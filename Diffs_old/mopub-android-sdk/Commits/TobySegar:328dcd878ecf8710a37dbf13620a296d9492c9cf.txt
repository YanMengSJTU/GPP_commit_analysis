diff --git a/CHANGELOG.md b/CHANGELOG.md
index 4f044652..2714ca24 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,50 @@
+## Version 4.16.0 (August 23, 2017)
+- Added support for viewability measurement from AVID (a.k.a. IAS) and Moat.  
+  - **Important:** New dependencies were included in this release; please update your `build.gradle`'s repositories block to include `maven { url "https://s3.amazonaws.com/moat-sdk-builds" }`.
+  - To disable this feature, see note below on [Disabling Viewability Measurement](#disableViewability).
+- Interstitials are now loaded offscreen instead of in a separate WebView.
+- Rewarded Videos have a new init method. See `MoPubRewardedVideos.initializeRewardedVideo(Activity, List<Class<? extends CustomEventRewardedVideo>>, MediationSettings...)`. Pass in a list of networks to initialize, and MoPub will initialize those networks with the settings from the previous ad request, persisted across app close.
+- Upgraded our ExoPlayer dependency to 2.4.4.
+- Bug fixes
+
+#### Disclosures
+MoPub v4.16 SDK integrates technology from our partners Integral Ad Science, Inc. (“IAS”) and Moat, Inc. (“Moat”) in order to support viewability measurement and other proprietary reporting that [IAS](https://integralads.com/capabilities/viewability/) and [Moat](https://moat.com/analytics) provide to their advertiser and publisher clients. You have the option to remove or disable this technology by following the [opt-out instructions](#disableViewability) below.  
+
+If you do not remove or disable IAS's and/or Moat’s technology in accordance with these instructions, you agree that IAS's [privacy policy](https://integralads.com/privacy-policy/) and [license](https://integralads.com/sdk-license-agreement) and Moat’s [privacy policy](https://moat.com/privacy),  [terms](https://moat.com/terms), and [license](https://moat.com/sdklicense.txt), respectively, apply to your integration of these partners' technologies into your application.
+
+#### <a name="disableViewability"></a>Disabling Viewability Measurement
+There are a few options for opting out of viewability measurement:  
+##### Strip out from JCenter Integration
+Normally, to add the MoPub SDK to your app via JCenter, your `build.gradle` would contain:
+
+```	
+dependencies {
+	compile('com.mopub:mopub-sdk:4.16.0@aar') {
+		transitive = true
+	}
+}
+```
+Update to the following to exclude one or both viewability vendors:
+
+```
+dependencies {
+	compile('com.mopub:mopub-sdk:4.16.0@aar') {
+		transitive = true
+		exclude module: 'libAvid-mopub' // To exclude AVID
+		exclude module: 'moat-mobile-app-kit' // To exclude Moat
+    }
+}
+```
+##### Strip out from GitHub integration
+Navigate to the `gradle.properties` file in your home directory (e.g. `~/.gradle/gradle.properties`) and include one or both of these lines to opt out of viewability measurement for AVID and/or Moat.  
+
+```
+mopub.avidEnabled=false
+mopub.moatEnabled=false
+```
+##### Disable via API
+If you would like to opt out of viewability measurement but do not want to modify the MoPub SDK, a function is provided for your convenience. At any point, call `MoPub.disableViewability(vendor);`. This method can can be called with any of the enum values available in `ExternalViewabilitySessionManager.ViewabilityVendor`: `AVID` will disable AVID but leave Moat enabled, `MOAT` will disable Moat but leave AVID enabled, and `ALL` will disable all viewability measurement.
+
 ## Version 4.15.0 (June 19, 2017)
 - The SDK now sends Advertising ID on Amazon devices when appropriate.
 - Fixed issue with Charles proxy in sample app for API 24+.
diff --git a/README.md b/README.md
index 0f827bbe..489b2eb5 100644
--- a/README.md
+++ b/README.md
@@ -12,6 +12,12 @@ To file an issue with our team visit the [MoPub Forum](https://twittercommunity.
 
 **Please Note: We no longer accept GitHub Issues.**
 
+## Disclosures
+
+MoPub v4.16 SDK integrates technology from our partners Integral Ad Science, Inc. (“IAS”) and Moat, Inc. (“Moat”) in order to support viewability measurement and other proprietary reporting that [IAS](https://integralads.com/capabilities/viewability/) and [Moat](https://moat.com/analytics) provide to their advertiser and publisher clients. You have the option to remove or disable this technology by following the [opt-out instructions](#disableViewability) below.  
+
+If you do not remove or disable IAS's and/or Moat’s technology in accordance with these instructions, you agree that IAS's [privacy policy](https://integralads.com/privacy-policy/) and [license](https://integralads.com/sdk-license-agreement) and Moat’s [privacy policy](https://moat.com/privacy),  [terms](https://moat.com/terms), and [license](https://moat.com/sdklicense.txt), respectively, apply to your integration of these partners' technologies into your application.
+
 ## Download
 
 The MoPub SDK is available via:
@@ -24,10 +30,11 @@ The MoPub SDK is available via:
     ```
     repositories {
         jcenter()
+        maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
     }
 
     dependencies {
-        compile('com.mopub:mopub-sdk:4.15.0@aar') {
+        compile('com.mopub:mopub-sdk:4.16.0@aar') {
             transitive = true
         }
     }
@@ -41,34 +48,34 @@ The MoPub SDK is available via:
     repositories {
         // ... other project repositories
         jcenter()
+        maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
     }
-    // ...
 
     dependencies {
         // ... other project dependencies
 
         // For banners
-        compile('com.mopub:mopub-sdk-banner:4.15.0@aar') {
+        compile('com.mopub:mopub-sdk-banner:4.16.0@aar') {
             transitive = true
         }
         
         // For interstitials
-        compile('com.mopub:mopub-sdk-interstitial:4.15.0@aar') {
+        compile('com.mopub:mopub-sdk-interstitial:4.16.0@aar') {
             transitive = true
         }
 
         // For rewarded videos. This will automatically also include interstitials
-        compile('com.mopub:mopub-sdk-rewardedvideo:4.15.0@aar') {
+        compile('com.mopub:mopub-sdk-rewardedvideo:4.16.0@aar') {
             transitive = true
         }
 
         // For native static (images).
-        compile('com.mopub:mopub-sdk-native-static:4.15.0@aar') {
+        compile('com.mopub:mopub-sdk-native-static:4.16.0@aar') {
             transitive = true
         }
 
         // For native video. This will automatically also include native static
-        compile('com.mopub:mopub-sdk-native-video:4.15.0@aar') {
+        compile('com.mopub:mopub-sdk-native-video:4.16.0@aar') {
             transitive = true
         }
     }
@@ -96,9 +103,12 @@ The MoPub SDK is available via:
 ## New in this Version
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for a complete list of additions, fixes, and enhancements in the latest release.
 
-- The SDK now sends Advertising ID on Amazon devices when appropriate.
-- Fixed issue with Charles proxy in sample app for API 24+.
-- Bug fixes.
+- Added support for viewability measurement from AVID (a.k.a. IAS) and Moat.  
+    - **Important:** New dependencies were included in this release; please update your `build.gradle`'s repositories block to include `maven { url "https://s3.amazonaws.com/moat-sdk-builds" }`. See [Upgrading from 4.15.0 and Prior](#upgradeRepositoryViewability) for more details.
+    - To disable this feature, see below section on [Disabling Viewability Measurement](#disableViewability).
+- Interstitials are now loaded offscreen instead of in a separate WebView.
+- Rewarded Videos have a new init method. See `MoPubRewardedVideos.initializeRewardedVideo(Activity, List<Class<? extends CustomEventRewardedVideo>>, MediationSettings...)`. Pass in a list of networks to initialize, and MoPub will initialize those networks with the settings from the previous ad request, persisted across app close.
+- Upgraded our ExoPlayer dependency to 2.4.4.
 
 ## Requirements
 
@@ -109,12 +119,43 @@ Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/mast
 - MoPub Volley Library (mopub-volley-1.1.0.jar - available on JCenter) (**Updated in 3.6.0**)
 - **Recommended** Google Play Services 9.4.0
 
-## Upgrading from 3.2.0 and Prior
-In 3.3.0 a dependency on android-support-annotations.jar was added. If you are using Maven or Gradle to include the MoPub SDK, this dependency is included in the build scripts. For instructions on adding dependencies for Eclipse projects, see our [Getting Started Guide](https://github.com/mopub/mopub-android-sdk/wiki/Getting-Started#adding-the-support-libraries-to-your-project)
-
-## Important Message About Upgrading to MoPub SDK 4.4.0+
-
-Version 4.4.0 of the MoPub SDK fixes a security issue identified by Google. Note that only publishers who received a message from Google are affected. While not all publishers are impacted, we recommend you upgrade to SDK 4.4.0+ ahead of Google's deadline (July 11, 2016) to avoid any issues submitting updates to your apps after the date. More information can be found in [Google's support article](https://support.google.com/faqs/answer/6345928).
+## <a name="upgradeRepositoryViewability"></a>Upgrading from 4.15.0 and Prior
+In 4.16.0, dependencies were added to viewability libraries provided by AVID and Moat. Apps upgrading from previous versions must add
+`maven { url "https://s3.amazonaws.com/moat-sdk-builds" }`
+to their `build.gradle` repositories block for these included dependencies to resolve.
+
+## <a name="disableViewability"></a>Disabling Viewability Measurement
+There are a few options for opting out of viewability measurement:  
+##### Strip out from JCenter Integration
+Normally, to add the MoPub SDK to your app via JCenter, your `build.gradle` would contain:
+
+```	
+dependencies {
+	compile('com.mopub:mopub-sdk:4.16.0@aar') {
+		transitive = true
+	}
+}
+```
+Update to the following to exclude one or both viewability vendors:
+
+```
+dependencies {
+	compile('com.mopub:mopub-sdk:4.16.0@aar') {
+		transitive = true
+		exclude module: 'libAvid-mopub' // To exclude AVID
+		exclude module: 'moat-mobile-app-kit' // To exclude Moat
+    }
+}
+```
+##### Strip out from GitHub integration
+Navigate to the `gradle.properties` file in your home directory (e.g. `~/.gradle/gradle.properties`) and include one or both of these lines to opt out of viewability measurement for AVID and/or Moat.  
+
+```
+mopub.avidEnabled=false
+mopub.moatEnabled=false
+```
+##### Disable via API
+If you would like to opt out of viewability measurement but do not want to modify the MoPub SDK, a function is provided for your convenience. At any point, call `MoPub.disableViewability(vendor);`. This method can can be called with any of the enum values available in `ExternalViewabilitySessionManager.ViewabilityVendor`: `AVID` will disable AVID but leave Moat enabled, `MOAT` will disable Moat but leave AVID enabled, and `ALL` will disable all viewability measurement.
 
 ## Working with Android 6.0 Runtime Permissions
 If your app's target SDK is 23 or higher _**and**_ the user's device is running Android 6.0 or higher, you are responsible for supporting [runtime permissions](http://developer.android.com/training/permissions/requesting.html), one of the [changes](http://developer.android.com/about/versions/marshmallow/android-6.0-changes.html) introduced in Android 6.0 (API level 23). In addition to listing any dangerous permissions your app needs in the manifest, your app also has to explicitly request the dangerous permission(s) during runtime by calling method `requestPermissions()` in the [`ActivityCompat`](http://developer.android.com/reference/android/support/v4/app/ActivityCompat.html) class.
diff --git a/build.gradle b/build.gradle
index 491fd57d..e7b8ca18 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5,7 +5,7 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.1.3'
+        classpath 'com.android.tools.build:gradle:2.3.0'
         classpath 'com.novoda:bintray-release:0.4.0'
     }
 }
diff --git a/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java b/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java
index d461aaf8..ea9d4ad5 100644
--- a/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java
+++ b/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java
@@ -14,6 +14,7 @@
  * specified in the FlurryNativeViewHolder.videoView to show a video. If a video is not available,
  * this will still use the mainImageView.
  *
+ *
  * Certified with Flurry 7.2.0
  */
 public class FlurryNativeAdRenderer implements
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 65b9ee77..8b60e124 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -3,4 +3,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-3.3-all.zip
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index 4773efcd..449a53f6 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.mopub.simpleadsdemo"
-      android:versionCode="52"
-      android:versionName="4.15.0">
+      android:versionCode="53"
+      android:versionName="4.16.0">
     <uses-sdk android:minSdkVersion="16"
               android:targetSdkVersion="24"/>
 
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index 516d5d2e..d02b7529 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -3,24 +3,25 @@ repositories {
     flatDir {
         dirs '../libs'
     }
+    maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
 }
 
 apply plugin: 'com.android.application'
 
 project.group = 'com.mopub'
 project.description = '''MoPub Sample App'''
-project.version = '4.15.0'
+project.version = '4.16.0'
 
 android {
-    compileSdkVersion 24
+    compileSdkVersion 25
     buildToolsVersion '25.0.2'
     lintOptions { abortOnError false }
 
     defaultConfig {
-        versionCode 52
+        versionCode 53
         versionName version
         minSdkVersion 16
-        targetSdkVersion 24
+        targetSdkVersion 25
     }
 
     buildTypes {
@@ -55,8 +56,8 @@ android {
 }
 
 dependencies {
-    compile 'com.android.support:support-v4:24.0.0'
+    compile 'com.android.support:support-v4:25.3.1'
     compile 'com.google.android.gms:play-services-ads:9.4.0'
-    compile 'com.android.support:recyclerview-v7:24.0.0'
+    compile 'com.android.support:recyclerview-v7:25.3.1'
     compile project(':mopub-sdk')
 }
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
index 2e9ddebf..fd15cba6 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
@@ -14,12 +14,15 @@
 import android.widget.Button;
 
 import com.mopub.common.MoPubReward;
+import com.mopub.mobileads.CustomEventRewardedVideo;
 import com.mopub.mobileads.MoPubErrorCode;
 import com.mopub.mobileads.MoPubRewardedVideoListener;
 import com.mopub.mobileads.MoPubRewardedVideoManager.RequestParameters;
 import com.mopub.mobileads.MoPubRewardedVideos;
 
 import java.util.HashMap;
+import java.util.LinkedList;
+import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
@@ -31,6 +34,10 @@
 
     private static boolean sRewardedVideoInitialized;
 
+    // Include any custom event rewarded video classes, if available, for initialization.
+    private static final List<Class<? extends CustomEventRewardedVideo>> sNetworksToInit =
+            new LinkedList<>();
+
     @Nullable private Button mShowButton;
     @Nullable private String mAdUnitId;
     @Nullable private Map<String, MoPubReward> mMoPubRewardsMap;
@@ -46,7 +53,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
         hideSoftKeyboard(views.mKeywordsField);
 
         if (!sRewardedVideoInitialized) {
-            MoPubRewardedVideos.initializeRewardedVideo(getActivity());
+            MoPubRewardedVideos.initializeRewardedVideo(getActivity(), sNetworksToInit);
             sRewardedVideoInitialized = true;
         }
         MoPubRewardedVideos.setRewardedVideoListener(this);
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java
index dcdf11bd..6104ff90 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java
@@ -1,9 +1,12 @@
 package com.mopub.mobileads;
 
+import android.app.Activity;
 import android.content.Context;
+import android.support.annotation.Nullable;
 
 import com.mopub.common.AdReport;
 import com.mopub.common.DataKeys;
+import com.mopub.common.ExternalViewabilitySessionManager;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.factories.HtmlBannerWebViewFactory;
 
@@ -14,8 +17,8 @@
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 
 public class HtmlBanner extends CustomEventBanner {
-
     private HtmlBannerWebView mHtmlBannerWebView;
+    @Nullable private ExternalViewabilitySessionManager mExternalViewabilitySessionManager;
 
     @Override
     protected void loadBanner(
@@ -48,11 +51,25 @@ protected void loadBanner(
 
         mHtmlBannerWebView = HtmlBannerWebViewFactory.create(context, adReport, customEventBannerListener, isScrollable, redirectUrl, clickthroughUrl);
         AdViewController.setShouldHonorServerDimensions(mHtmlBannerWebView);
+
+        if (context instanceof Activity) {
+            final Activity activity = (Activity) context;
+            mExternalViewabilitySessionManager = new ExternalViewabilitySessionManager(activity);
+            mExternalViewabilitySessionManager.createDisplaySession(activity, mHtmlBannerWebView);
+        } else {
+            MoPubLog.d("Unable to start viewability session for HTML banner: Context provided was not an Activity.");
+        }
+
         mHtmlBannerWebView.loadHtmlResponse(htmlData);
     }
 
     @Override
     protected void onInvalidate() {
+        if (mExternalViewabilitySessionManager != null) {
+            mExternalViewabilitySessionManager.endDisplaySession();
+            mExternalViewabilitySessionManager = null;
+        }
+
         if (mHtmlBannerWebView != null) {
             mHtmlBannerWebView.destroy();
         }
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java
index 558439d8..86526d22 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java
@@ -6,6 +6,7 @@
 import android.view.View;
 
 import com.mopub.common.AdReport;
+import com.mopub.common.ExternalViewabilitySessionManager;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.AdViewController;
@@ -20,16 +21,16 @@
 import static com.mopub.mobileads.MoPubErrorCode.MRAID_LOAD_ERROR;
 
 class MraidBanner extends CustomEventBanner {
-
     @Nullable private MraidController mMraidController;
     @Nullable private CustomEventBannerListener mBannerListener;
     @Nullable private MraidWebViewDebugListener mDebugListener;
+    @Nullable private ExternalViewabilitySessionManager mExternalViewabilitySessionManager;
 
     @Override
-    protected void loadBanner(@NonNull Context context,
-                    @NonNull CustomEventBannerListener customEventBannerListener,
-                    @NonNull Map<String, Object> localExtras,
-                    @NonNull Map<String, String> serverExtras) {
+    protected void loadBanner(@NonNull final Context context,
+                    @NonNull final CustomEventBannerListener customEventBannerListener,
+                    @NonNull final Map<String, Object> localExtras,
+                    @NonNull final Map<String, String> serverExtras) {
         mBannerListener = customEventBannerListener;
 
         String htmlData;
@@ -80,7 +81,16 @@ public void onClose() {
                 mBannerListener.onBannerCollapsed();
             }
         });
-        mMraidController.loadContent(htmlData);
+
+        mMraidController.fillContent(null, htmlData, new MraidController.MraidWebViewCacheListener() {
+            @Override
+            public void onReady(final @NonNull MraidBridge.MraidWebView webView,
+                    final @Nullable ExternalViewabilitySessionManager viewabilityManager) {
+                webView.getSettings().setJavaScriptEnabled(true);
+                mExternalViewabilitySessionManager = new ExternalViewabilitySessionManager(context);
+                mExternalViewabilitySessionManager.createDisplaySession(context, webView);
+            }
+        });
     }
 
     @Override
@@ -89,9 +99,14 @@ protected void onInvalidate() {
             mMraidController.setMraidListener(null);
             mMraidController.destroy();
         }
+
+        if (mExternalViewabilitySessionManager != null) {
+            mExternalViewabilitySessionManager.endDisplaySession();
+            mExternalViewabilitySessionManager = null;
+        }
     }
 
-    private boolean extrasAreValid(Map<String, String> serverExtras) {
+    private boolean extrasAreValid(@NonNull final Map<String, String> serverExtras) {
         return serverExtras.containsKey(HTML_RESPONSE_BODY_KEY);
     }
 
diff --git a/mopub-sdk/mopub-sdk-base/build.gradle b/mopub-sdk/mopub-sdk-base/build.gradle
index 2ced0308..f039998a 100644
--- a/mopub-sdk/mopub-sdk-base/build.gradle
+++ b/mopub-sdk/mopub-sdk-base/build.gradle
@@ -1,7 +1,23 @@
 apply from: '../shared-build.gradle'
 
+repositories {
+    flatDir {
+        dirs './libs'
+    }
+    maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
+}
+
 dependencies {
     compile 'com.mopub.volley:mopub-volley:1.1.0'
+
+    def avidEnabled = project.hasProperty("mopub.avidEnabled") ? project.getProperty("mopub.avidEnabled").toBoolean() : true
+    if (avidEnabled) {
+        compile('com.mopub:libAvid-mopub:3.6.4')
+    }
+    def moatEnabled = project.hasProperty("mopub.moatEnabled") ? project.getProperty("mopub.moatEnabled").toBoolean() : true
+    if (moatEnabled) {
+        compile 'com.moat.analytics.mobile.mpub:moat-mobile-app-kit:2.1.0'
+    }
 }
 
 project.description = 'MoPub Android SDK - Base'
diff --git a/mopub-sdk/mopub-sdk-base/src/main/AndroidManifest.xml b/mopub-sdk/mopub-sdk-base/src/main/AndroidManifest.xml
index d480f9c5..fac2245b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/AndroidManifest.xml
+++ b/mopub-sdk/mopub-sdk-base/src/main/AndroidManifest.xml
@@ -2,3 +2,4 @@
     package="com.mopub.mobileads.base">
     <application/>
 </manifest>
+
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
index 4975407a..bc09b958 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 import android.location.Location;
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
@@ -101,6 +102,15 @@
      */
     private static final String BUNDLE_ID_KEY = "bundle";
 
+    /**
+     * Whether or not this ad is using third-party viewability tracking.
+     * 0: Moat disabled, Avid disabled
+     * 1: Moat disabled, Avid enabled
+     * 2: Moat enabled, Avid disabled
+     * 3: Moat enabled, Avid enabled
+     */
+    private static final String VIEWABILITY_KEY = "vv";
+
     protected Context mContext;
     protected String mAdUnitId;
     protected String mKeywords;
@@ -206,6 +216,12 @@ protected void setBundleId(String bundleId) {
         }
     }
 
+    protected void enableViewability(@NonNull final String vendorKey) {
+        Preconditions.checkNotNull(vendorKey);
+
+        addParam(VIEWABILITY_KEY, vendorKey);
+    }
+
     protected void addBaseParams(final ClientMetadata clientMetadata) {
         setAdUnitId(mAdUnitId);
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AvidViewabilitySession.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AvidViewabilitySession.java
new file mode 100644
index 00000000..53b64f32
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AvidViewabilitySession.java
@@ -0,0 +1,433 @@
+package com.mopub.common;
+
+import android.app.Activity;
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.view.View;
+import android.webkit.WebView;
+
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Reflection;
+
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+// API documentation: https://drive.google.com/drive/folders/0B8U0thTyT1GGZTdEWm03VTlfbm8
+class AvidViewabilitySession implements ExternalViewabilitySession {
+    private static final String AVID_MANAGER_PATH =
+            "com.integralads.avid.library.mopub.AvidManager";
+    private static final String EXTERNAL_AVID_AD_SESSION_CONTEXT_PATH =
+            "com.integralads.avid.library.mopub.session.ExternalAvidAdSessionContext";
+    private static final String AVID_AD_SESSION_MANAGER_PATH =
+            "com.integralads.avid.library.mopub.session.AvidAdSessionManager";
+    private static final String AVID_KEY = "avid";
+
+    private static Object sAvidAdSessionContextDeferred;
+    private static Object sAvidAdSessionContextNonDeferred;
+    private static Boolean sIsViewabilityEnabledViaReflection;
+    private static boolean sIsVendorDisabled;
+
+    @Nullable private Object mAvidDisplayAdSession;
+    @Nullable private Object mAvidVideoAdSession;
+
+    static boolean isEnabled() {
+        return !sIsVendorDisabled && isViewabilityEnabledViaReflection();
+    }
+
+    static void disable() {
+        sIsVendorDisabled = true;
+    }
+
+    private static boolean isViewabilityEnabledViaReflection() {
+        if (sIsViewabilityEnabledViaReflection == null) {
+            sIsViewabilityEnabledViaReflection = Reflection.classFound(AVID_AD_SESSION_MANAGER_PATH);
+            MoPubLog.d("Avid is "
+                    + (sIsViewabilityEnabledViaReflection ? "" : "un")
+                    + "available via reflection.");
+        }
+
+        return sIsViewabilityEnabledViaReflection;
+    }
+
+    @Nullable
+    private static Object getAvidAdSessionContextDeferred() {
+        if (sAvidAdSessionContextDeferred == null) {
+            try {
+                // Pre-reflection code:
+                // sAvidAdSessionContextDeferred = new ExternalAvidAdSessionContext(
+                //         MoPub.SDK_VERSION, true);
+
+                sAvidAdSessionContextDeferred = Reflection.instantiateClassWithConstructor(
+                        EXTERNAL_AVID_AD_SESSION_CONTEXT_PATH, Object.class,
+                        new Class[] {String.class, boolean.class},
+                        new Object[] {MoPub.SDK_VERSION, true});
+            } catch (Exception e) {
+                MoPubLog.d("Unable to generate Avid deferred ad session context: "
+                        + e.getMessage());
+            }
+        }
+
+        return sAvidAdSessionContextDeferred;
+    }
+
+    @Nullable
+    private static Object getAvidAdSessionContextNonDeferred() {
+        if (sAvidAdSessionContextNonDeferred == null) {
+            try {
+                // Pre-reflection code:
+                // sAvidAdSessionContextNonDeferred = new ExternalAvidAdSessionContext(
+                //         MoPub.SDK_VERSION);
+
+                sAvidAdSessionContextNonDeferred = Reflection.instantiateClassWithConstructor(
+                        EXTERNAL_AVID_AD_SESSION_CONTEXT_PATH, Object.class,
+                        new Class[] {String.class},
+                        new Object[] {MoPub.SDK_VERSION});
+            } catch (Exception e) {
+                MoPubLog.d("Unable to generate Avid ad session context: "
+                        + e.getMessage());
+            }
+        }
+
+        return sAvidAdSessionContextNonDeferred;
+    }
+
+    @Override
+    @NonNull
+    public String getName() {
+        return "AVID";
+    }
+
+    @Override
+    @Nullable
+    public Boolean initialize(@NonNull final Context context) {
+        Preconditions.checkNotNull(context);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        // unimplemented by Avid
+        return true;
+    }
+
+    @Override
+    @Nullable
+    public Boolean invalidate() {
+        if (!isEnabled()) {
+            return null;
+        }
+
+        mAvidDisplayAdSession = null;
+        mAvidVideoAdSession = null;
+
+        return true;
+    }
+
+    @Override
+    @Nullable
+    public Boolean createDisplaySession(@NonNull final Context context,
+            @NonNull final WebView webView, boolean isDeferred) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(webView);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        final Object avidAdSessionContext =
+                isDeferred
+                ? getAvidAdSessionContextDeferred()
+                : getAvidAdSessionContextNonDeferred();
+        final Activity activity = (context instanceof Activity) ? (Activity) context : null;
+
+        // Pre-reflection code:
+        // mAvidDisplayAdSession = AvidAdSessionManager.startAvidDisplayAdSession(activity,
+        //         avidAdSessionContext);
+        // mAvidDisplayAdSession.registerAdView(webView, activity);
+
+        try {
+            mAvidDisplayAdSession = new Reflection.MethodBuilder(null, "startAvidDisplayAdSession")
+                    .setStatic(AVID_AD_SESSION_MANAGER_PATH)
+                    .addParam(Context.class, context)
+                    .addParam(EXTERNAL_AVID_AD_SESSION_CONTEXT_PATH, avidAdSessionContext)
+                    .execute();
+
+            new Reflection.MethodBuilder(mAvidDisplayAdSession, "registerAdView")
+                    .addParam(View.class, webView)
+                    .addParam(Activity.class, activity)
+                    .execute();
+
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to execute Avid start display session: " + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean startDeferredDisplaySession(@NonNull final Activity activity) {
+        if (!isEnabled()) {
+            return null;
+        }
+
+        if (mAvidDisplayAdSession == null) {
+            MoPubLog.d("Avid DisplayAdSession unexpectedly null.");
+            return false;
+        }
+
+        // Pre-reflection code:
+        // AvidManager.getInstance().registerActivity(activity);
+        // if (mAvidDisplayAdSession.getAvidDeferredAdSessionListener() != null) {
+        //     mAvidDisplayAdSession.getAvidDeferredAdSessionListener().recordReadyEvent();
+        // }
+
+        try {
+            final Object avidManager = new Reflection.MethodBuilder(null, "getInstance")
+                    .setStatic(AVID_MANAGER_PATH)
+                    .execute();
+
+            new Reflection.MethodBuilder(avidManager, "registerActivity")
+                    .addParam(Activity.class, activity)
+                    .execute();
+
+            final Object deferredAdSessionListener =
+                    new Reflection.MethodBuilder(mAvidDisplayAdSession,
+                            "getAvidDeferredAdSessionListener").execute();
+
+            if (deferredAdSessionListener == null) {
+                MoPubLog.d("Avid AdSessionListener unexpectedly null.");
+                return false;
+            }
+
+            new Reflection.MethodBuilder(deferredAdSessionListener, "recordReadyEvent")
+                    .execute();
+
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to execute Avid record deferred session: "
+                    + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean endDisplaySession() {
+        if (!isEnabled()) {
+            return null;
+        }
+
+        if (mAvidDisplayAdSession == null) {
+            MoPubLog.d("Avid DisplayAdSession unexpectedly null.");
+            return false;
+        }
+
+        // Pre-reflection code:
+        // mAvidDisplayAdSession.endSession();
+
+        try {
+            new Reflection.MethodBuilder(mAvidDisplayAdSession, "endSession").execute();
+
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to execute Avid end session: " + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean createVideoSession(@NonNull final Activity activity, @NonNull final View view,
+            @NonNull final Set<String> buyerResources,
+            @NonNull final Map<String, String> videoViewabilityTrackers) {
+        Preconditions.checkNotNull(activity);
+        Preconditions.checkNotNull(view);
+        Preconditions.checkNotNull(buyerResources);
+        Preconditions.checkNotNull(videoViewabilityTrackers);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        // Pre-reflection code:
+        // mAvidVideoAdSession = AvidAdSessionManager.startAvidManagedVideoAdSession(activity,
+        //         (ExternalAvidAdSessionContext) getAvidAdSessionContextNonDeferred());
+        // mAvidVideoAdSession.registerAdView(view, activity);
+        // mAvidVideoAdSession.injectJavascriptResource(videoViewabilityTrackers.get(AVID_KEY));
+        // for (final String buyerResource : buyerResources) {
+        //     mAvidVideoAdSession.injectJavascriptResource(buyerResource);
+        // }
+
+        try {
+            mAvidVideoAdSession = new Reflection.MethodBuilder(null, "startAvidManagedVideoAdSession")
+                    .setStatic(AVID_AD_SESSION_MANAGER_PATH)
+                    .addParam(Context.class, activity)
+                    .addParam(EXTERNAL_AVID_AD_SESSION_CONTEXT_PATH, getAvidAdSessionContextNonDeferred())
+                    .execute();
+
+            new Reflection.MethodBuilder(mAvidVideoAdSession, "registerAdView")
+                    .addParam(View.class, view)
+                    .addParam(Activity.class, activity)
+                    .execute();
+
+            new Reflection.MethodBuilder(mAvidVideoAdSession, "injectJavaScriptResource")
+                    .addParam(String.class, videoViewabilityTrackers.get(AVID_KEY))
+                    .execute();
+
+            for (final String buyerResource : buyerResources) {
+                new Reflection.MethodBuilder(mAvidVideoAdSession, "injectJavaScriptResource")
+                        .addParam(String.class, buyerResource)
+                        .execute();
+            }
+
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to execute Avid start video session: " + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean registerVideoObstructions(@NonNull final List<View> views) {
+        Preconditions.checkNotNull(views);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        if (mAvidVideoAdSession == null) {
+            MoPubLog.d("Avid VideoAdSession unexpectedly null.");
+            return false;
+        }
+
+        try {
+            for (final View view : views) {
+                if (view != null) {
+                    // Pre-reflection code:
+                    // mAvidVideoAdSession.registerFriendlyObstruction(view);
+
+                    new Reflection.MethodBuilder(mAvidVideoAdSession, "registerFriendlyObstruction")
+                            .addParam(View.class, view)
+                            .execute();
+                }
+            }
+
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to register Avid video obstructions: " + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean onVideoPrepared(@NonNull final View playerView, final int duration) {
+        Preconditions.checkNotNull(playerView);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        // unimplemented by Avid
+        return true;
+    }
+
+    @Override
+    @Nullable
+    public Boolean recordVideoEvent(@NonNull final VideoEvent event, final int playheadMillis) {
+        Preconditions.checkNotNull(event);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        if (mAvidVideoAdSession == null) {
+            MoPubLog.d("Avid VideoAdSession unexpectedly null.");
+            return false;
+        }
+
+        try {
+            switch (event) {
+                case AD_LOADED:
+                case AD_STARTED:
+                case AD_STOPPED:
+                case AD_PAUSED:
+                case AD_PLAYING:
+                case AD_SKIPPED:
+                case AD_IMPRESSED:
+                case AD_CLICK_THRU:
+                case AD_VIDEO_FIRST_QUARTILE:
+                case AD_VIDEO_MIDPOINT:
+                case AD_VIDEO_THIRD_QUARTILE:
+                case AD_COMPLETE:
+                    handleVideoEventReflection(event);
+                    return true;
+
+                case RECORD_AD_ERROR:
+                    handleVideoEventReflection(event, "error");
+                    return true;
+
+                default:
+                    MoPubLog.d("Unexpected video event type: " + event);
+                    return false;
+            }
+        } catch (Exception e) {
+            MoPubLog.d("Unable to execute Avid video event for "
+                    + event.getAvidMethodName() + ": " + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean endVideoSession() {
+        if (!isEnabled()) {
+            return null;
+        }
+
+        if (mAvidVideoAdSession == null) {
+            MoPubLog.d("Avid VideoAdSession unexpectedly null.");
+            return false;
+        }
+
+        // Pre-reflection code:
+        // mAvidVideoAdSession.endSession();
+
+        try {
+            new Reflection.MethodBuilder(mAvidVideoAdSession, "endSession").execute();
+
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to execute Avid end video session: " + e.getMessage());
+            return false;
+        }
+    }
+
+    private void handleVideoEventReflection(@NonNull final VideoEvent videoEvent) throws Exception {
+        handleVideoEventReflection(videoEvent, null);
+    }
+
+    private void handleVideoEventReflection(@NonNull final VideoEvent videoEvent,
+            @Nullable final String message) throws Exception {
+        // Pre-reflection code:
+        // mAvidVideoAdSession.getAvidVideoPlaybackListener().<videoEventMethodName>();
+
+        final Object playbackListener =
+                new Reflection.MethodBuilder(mAvidVideoAdSession, "getAvidVideoPlaybackListener")
+                .execute();
+
+        Reflection.MethodBuilder methodBuilder =
+                new Reflection.MethodBuilder(playbackListener, videoEvent.getAvidMethodName());
+
+        if (!TextUtils.isEmpty(message)) {
+            methodBuilder.addParam(String.class, message);
+        }
+
+        methodBuilder.execute();
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java
index 39fd7909..c0d2d12b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java
@@ -17,6 +17,7 @@ private Constants() {}
 
     public static final int TEN_SECONDS_MILLIS = 10 * 1000;
     public static final int THIRTY_SECONDS_MILLIS = 30 * 1000;
+    public static final int FIFTEEN_MINUTES_MILLIS = 15 * 60 * 1000;
     public static final int FOUR_HOURS_MILLIS = 4 * 60 * 60 * 1000;
 
     public static final int AD_EXPIRATION_DELAY = FOUR_HOURS_MILLIS;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java
index 494c980f..9b9d5a6f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java
@@ -32,6 +32,9 @@
     public static final String REWARDED_AD_DURATION_KEY = "Rewarded-Ad-Duration";
     public static final String SHOULD_REWARD_ON_CLICK_KEY = "Should-Reward-On-Click";
 
+    // Viewability fields
+    public static final String EXTERNAL_VIDEO_VIEWABILITY_TRACKERS_KEY = "External-Video-Viewability-Trackers";
+
     /**
      * @deprecated as of 4.12, replaced by {@link #REWARDED_AD_CUSTOMER_ID_KEY}
      */
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySession.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySession.java
new file mode 100644
index 00000000..258836f5
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySession.java
@@ -0,0 +1,92 @@
+package com.mopub.common;
+
+import android.app.Activity;
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.View;
+import android.webkit.WebView;
+
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+/**
+ * Implementers should use reflection to invoke external APIs as all viewability dependencies are
+ * optional.
+ *
+ * Note that all interface methods return @Nullable Booleans. Return values are as follows:
+ * null - vendor was disabled either via client or server; method calls fast fail
+ * true - successfully called through via reflection
+ * false - error invoking via reflection or unexpected internal session state
+ */
+public interface ExternalViewabilitySession {
+    @NonNull String getName();
+
+    @Nullable Boolean initialize(@NonNull final Context context);
+    @Nullable Boolean invalidate();
+
+    // Display only
+    @Nullable Boolean createDisplaySession(@NonNull final Context context,
+            @NonNull final WebView webView, boolean isDeferred);
+    @Nullable Boolean startDeferredDisplaySession(@NonNull final Activity activity);
+    @Nullable Boolean endDisplaySession();
+
+    // Video only
+    @Nullable Boolean createVideoSession(@NonNull final Activity activity, @NonNull final View view,
+            @NonNull final Set<String> buyerResources,
+            @NonNull final Map<String, String> videoViewabilityTrackers);
+    @Nullable Boolean registerVideoObstructions(@NonNull final List<View> views);
+    @Nullable Boolean onVideoPrepared(@NonNull final View playerView, final int duration);
+    @Nullable Boolean recordVideoEvent(@NonNull final VideoEvent event, final int playheadMillis);
+    @Nullable Boolean endVideoSession();
+
+    enum VideoEvent {
+        AD_LOADED(null, "recordAdLoadedEvent"),
+        AD_STARTED("AD_EVT_START", "recordAdStartedEvent"),
+        AD_STOPPED("AD_EVT_STOPPED", "recordAdStoppedEvent"),
+        AD_PAUSED("AD_EVT_PAUSED", "recordAdPausedEvent"),
+        AD_PLAYING("AD_EVT_PLAYING", "recordAdPlayingEvent"),
+        AD_SKIPPED("AD_EVT_SKIPPED", "recordAdSkippedEvent"),
+
+        AD_IMPRESSED(null, "recordAdImpressionEvent"),
+        AD_CLICK_THRU(null, "recordAdClickThruEvent"),
+
+        AD_VIDEO_FIRST_QUARTILE("AD_EVT_FIRST_QUARTILE", "recordAdVideoFirstQuartileEvent"),
+        AD_VIDEO_MIDPOINT("AD_EVT_MID_POINT", "recordAdVideoMidpointEvent"),
+        AD_VIDEO_THIRD_QUARTILE("AD_EVT_THIRD_QUARTILE", "recordAdVideoThirdQuartileEvent"),
+        AD_COMPLETE("AD_EVT_COMPLETE", "recordAdCompleteEvent"),
+
+        RECORD_AD_ERROR(null, "recordAdError");
+
+        // These are not yet possible with our VAST player. Unimplemented.
+        // AD_EXPANDED_CHANGE,
+        // AD_ENTERED_FULLSCREEN,
+        // AD_EXITED_FULLSCREEN,
+        // RECORD_AD_DURATION_CHANGED,
+        // AD_VOLUME_CHANGE_EVENT,
+
+        // These are not yet possible with our VAST player. Unimplemented.
+        // AD_USER_MINIMIZE,
+        // AD_USER_ACCEPT_INVITATION,
+        // AD_USER_CLOSE,
+
+
+        @Nullable private String moatEnumName;
+        @NonNull private String avidMethodName;
+        VideoEvent(@Nullable final String moatEnumName, @NonNull final String avidMethodName) {
+            this.moatEnumName = moatEnumName;
+            this.avidMethodName = avidMethodName;
+        }
+
+        @Nullable
+        public String getMoatEnumName() {
+            return moatEnumName;
+        }
+
+        @NonNull
+        public String getAvidMethodName() {
+            return avidMethodName;
+        }
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySessionManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySessionManager.java
new file mode 100644
index 00000000..439a96d3
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySessionManager.java
@@ -0,0 +1,265 @@
+package com.mopub.common;
+
+import android.app.Activity;
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.View;
+import android.webkit.WebView;
+
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.mobileads.VastVideoConfig;
+
+import java.util.HashSet;
+import java.util.List;
+import java.util.Locale;
+import java.util.Set;
+
+/**
+ * Encapsulates all third-party viewability session measurements.
+ */
+public class ExternalViewabilitySessionManager {
+
+    @NonNull private final Set<ExternalViewabilitySession> mViewabilitySessions;
+
+    public enum ViewabilityVendor {
+        AVID, MOAT, ALL;
+
+        public void disable() {
+            switch (this) {
+                case AVID:
+                    AvidViewabilitySession.disable();
+                    break;
+                case MOAT:
+                    MoatViewabilitySession.disable();
+                    break;
+                case ALL:
+                    AvidViewabilitySession.disable();
+                    MoatViewabilitySession.disable();
+                    break;
+                default:
+                    MoPubLog.d("Attempted to disable an invalid viewability vendor: " + this);
+                    return;
+            }
+            MoPubLog.d("Disabled viewability for " + this);
+        }
+
+        /**
+         * @link { AdUrlGenerator#VIEWABILITY_KEY }
+         */
+        @NonNull
+        public static String getEnabledVendorKey() {
+            final boolean avidEnabled = AvidViewabilitySession.isEnabled();
+            final boolean moatEnabled = MoatViewabilitySession.isEnabled();
+
+            String vendorKey = "0";
+            if (avidEnabled && moatEnabled) {
+                vendorKey = "3";
+            } else if (avidEnabled) {
+                vendorKey = "1";
+            } else if (moatEnabled) {
+                vendorKey = "2";
+            }
+
+            return vendorKey;
+        }
+
+        @Nullable
+        public static ViewabilityVendor fromKey(@NonNull final String key) {
+            Preconditions.checkNotNull(key);
+
+            switch (key) {
+                case "1":
+                    return AVID;
+                case "2":
+                    return MOAT;
+                case "3":
+                    return ALL;
+                default:
+                    return null;
+            }
+        }
+    }
+
+    public ExternalViewabilitySessionManager(@NonNull final Context context) {
+        Preconditions.checkNotNull(context);
+
+        mViewabilitySessions = new HashSet<ExternalViewabilitySession>();
+        mViewabilitySessions.add(new AvidViewabilitySession());
+        mViewabilitySessions.add(new MoatViewabilitySession());
+
+        initialize(context);
+    }
+
+    /**
+     * Allow the viewability session to perform any necessary initialization. Each session
+     * must handle any relevant caching or lazy loading independently.
+     *
+     * @param context Preferably Activity Context. Currently only used to obtain a reference to the
+     *                Application required by some viewability vendors.
+     */
+    private void initialize(@NonNull final Context context) {
+        Preconditions.checkNotNull(context);
+
+        for (final ExternalViewabilitySession session : mViewabilitySessions) {
+            final Boolean successful = session.initialize(context);
+            logEvent(session, "initialize", successful, false);
+        }
+    }
+
+    /**
+     * Perform any necessary clean-up and release of resources.
+     */
+    public void invalidate() {
+        for (final ExternalViewabilitySession session : mViewabilitySessions) {
+            final Boolean successful = session.invalidate();
+            logEvent(session, "invalidate", successful, false);
+        }
+    }
+
+    /**
+     * Registers and starts viewability tracking for the given WebView.
+     * @param context Preferably an Activity Context.
+     * @param webView The WebView to be tracked.
+     * @param isDeferred True for cached ads (i.e. interstitials)
+     */
+    public void createDisplaySession(@NonNull final Context context,
+            @NonNull final WebView webView, boolean isDeferred) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(webView);
+
+        for (final ExternalViewabilitySession session : mViewabilitySessions) {
+            final Boolean successful = session.createDisplaySession(context, webView, isDeferred);
+            logEvent(session, "start display session", successful, true);
+        }
+    }
+
+    public void createDisplaySession(@NonNull final Context context,
+            @NonNull final WebView webview) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(webview);
+
+        createDisplaySession(context, webview, false);
+    }
+
+    /**
+     * Begins deferred impression tracking. For cached ads (i.e. interstitials) this should be
+     * called separately from {@link ExternalViewabilitySessionManager#createDisplaySession(Context, WebView)}.
+     * @param activity
+     */
+    public void startDeferredDisplaySession(@NonNull final Activity activity) {
+        for (final ExternalViewabilitySession session : mViewabilitySessions) {
+            final Boolean successful = session.startDeferredDisplaySession(activity);
+            logEvent(session, "record deferred session", successful, true);
+        }
+    }
+
+    /**
+     * Unregisters and disables all viewability tracking for the given WebView.
+     */
+    public void endDisplaySession() {
+        for (final ExternalViewabilitySession session : mViewabilitySessions) {
+            final Boolean successful = session.endDisplaySession();
+            logEvent(session, "end display session", successful, true);
+        }
+    }
+
+    /**
+     * Registers and starts video viewability tracking for the given View.
+     *
+     * @param activity An Activity Context.
+     * @param view The player View.
+     * @param vastVideoConfig Configuration file used to store video viewability tracking tags.
+     */
+    public void createVideoSession(@NonNull final Activity activity, @NonNull final View view,
+            @NonNull final VastVideoConfig vastVideoConfig) {
+        Preconditions.checkNotNull(activity);
+        Preconditions.checkNotNull(view);
+        Preconditions.checkNotNull(vastVideoConfig);
+
+        for (final ExternalViewabilitySession session : mViewabilitySessions) {
+            final Set<String> buyerResources = new HashSet<String>();
+            if (session instanceof AvidViewabilitySession) {
+                buyerResources.addAll(vastVideoConfig.getAvidJavascriptResources());
+            } else if (session instanceof MoatViewabilitySession) {
+                buyerResources.addAll(vastVideoConfig.getMoatImpressionPixels());
+            }
+
+            final Boolean successful = session.createVideoSession(activity, view, buyerResources,
+                    vastVideoConfig.getExternalViewabilityTrackers());
+            logEvent(session, "start video session", successful, true);
+        }
+    }
+
+    /**
+     * Prevents friendly obstructions from affecting viewability scores.
+     *
+     * @param views Views in the same Window and a higher z-index as the video playing.
+     */
+    public void registerVideoObstructions(@NonNull final List<View> views) {
+        Preconditions.checkNotNull(views);
+
+        for (final ExternalViewabilitySession session : mViewabilitySessions) {
+            final Boolean successful = session.registerVideoObstructions(views);
+            logEvent(session, "register friendly obstruction", successful, true);
+        }
+    }
+
+    public void onVideoPrepared(@NonNull final View playerView, final int duration) {
+        Preconditions.checkNotNull(playerView);
+
+        for (final ExternalViewabilitySession session : mViewabilitySessions) {
+            final Boolean successful = session.onVideoPrepared(playerView, duration);
+            logEvent(session, "on video prepared", successful, true);
+        }
+    }
+
+    /**
+     * Notify pertinent video lifecycle events (e.g. MediaPlayer onPrepared, first quartile fired).
+     *
+     * @param event Corresponding {@link ExternalViewabilitySession.VideoEvent}.
+     * @param playheadMillis Current video playhead, in milliseconds.
+     */
+    public void recordVideoEvent(@NonNull final ExternalViewabilitySession.VideoEvent event,
+            final int playheadMillis) {
+        Preconditions.checkNotNull(event);
+
+        for (final ExternalViewabilitySession session : mViewabilitySessions) {
+            final Boolean successful = session.recordVideoEvent(event, playheadMillis);
+            logEvent(session, "record video event (" + event.name() + ")", successful, true);
+        }
+    }
+
+    /**
+     * Unregisters and disables all viewability tracking for the given View.
+     */
+    public void endVideoSession() {
+        for (final ExternalViewabilitySession session : mViewabilitySessions) {
+            final Boolean successful = session.endVideoSession();
+            logEvent(session, "end video session", successful, true);
+        }
+    }
+
+    private void logEvent(@NonNull final ExternalViewabilitySession session,
+            @NonNull final String event,
+            @Nullable final Boolean successful,
+            final boolean isVerbose) {
+        Preconditions.checkNotNull(session);
+        Preconditions.checkNotNull(event);
+
+        if (successful == null) {
+            // Method return values are only null when the corresponding viewability vendor has been
+            // disabled. Do not log in those cases.
+            return;
+        }
+
+        final String failureString = successful ? "" : "failed to ";
+        final String message = String.format(Locale.US, "%s viewability event: %s%s.",
+                session.getName(), failureString, event);
+        if (isVerbose) {
+            MoPubLog.v(message);
+        } else {
+            MoPubLog.d(message);
+        }
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
index 9be4cd82..bd44a852 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
@@ -10,8 +10,10 @@
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
+import static com.mopub.common.ExternalViewabilitySessionManager.ViewabilityVendor;
+
 public class MoPub {
-    public static final String SDK_VERSION = "4.15.0";
+    public static final String SDK_VERSION = "4.16.0";
 
     public enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
 
@@ -175,6 +177,12 @@ public static void onBackPressed(@NonNull final Activity activity) {
         MoPubLifecycleManager.getInstance(activity).onBackPressed(activity);
     }
 
+    public static void disableViewability(@NonNull final ViewabilityVendor vendor) {
+        Preconditions.checkNotNull(vendor);
+
+        vendor.disable();
+    }
+
     ////////// MoPub RewardedVideoControl methods //////////
     // These methods have been deprecated as of release 4.9 due to SDK modularization. MoPub is
     // inside of the base module while MoPubRewardedVideos is inside of the rewarded video module.
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoatViewabilitySession.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoatViewabilitySession.java
new file mode 100644
index 00000000..8a3b6e9e
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoatViewabilitySession.java
@@ -0,0 +1,488 @@
+package com.mopub.common;
+
+import android.app.Activity;
+import android.app.Application;
+import android.content.Context;
+import android.net.Uri;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.view.View;
+import android.webkit.WebView;
+
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Reflection;
+
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+// API documentation: https://drive.google.com/drive/folders/0B8U0thTyT1GGLUlweWRVMXk1Qlk
+class MoatViewabilitySession implements ExternalViewabilitySession {
+    private static final String MOAT_FACTORY_PATH = "com.moat.analytics.mobile.mpub.MoatFactory";
+    private static final String MOAT_OPTIONS_PATH = "com.moat.analytics.mobile.mpub.MoatOptions";
+    private static final String MOAT_ANALYTICS_PATH = "com.moat.analytics.mobile.mpub.MoatAnalytics";
+    private static final String MOAT_AD_EVENT_PATH = "com.moat.analytics.mobile.mpub.MoatAdEvent";
+    private static final String MOAT_AD_EVENT_TYPE_PATH = "com.moat.analytics.mobile.mpub.MoatAdEventType";
+    private static final String MOAT_REACTIVE_VIDEO_TRACKER_PLUGIN_PATH = "com.moat.analytics.mobile.mpub.ReactiveVideoTrackerPlugin";
+    private static final String MOAT_PLUGIN_PATH = "com.moat.analytics.mobile.mpub.MoatPlugin";
+
+    private static final String PARTNER_CODE_KEY = "partnerCode";
+    // MoPub's partner identifier with Moat. Partner code is normally parsed from the video
+    // viewability tracking URL, but in case of error, this default value is used instead.
+    private static final String DEFAULT_PARTNER_CODE = "mopubinapphtmvideo468906546585";
+    private static final String MOAT_KEY = "moat";
+    private static final String MOAT_VAST_IDS_KEY = "zMoatVASTIDs";
+
+    private static Boolean sIsViewabilityEnabledViaReflection;
+    private static boolean sIsVendorDisabled;
+    private static boolean sWasInitialized = false;
+
+    private static final Map<String, String> QUERY_PARAM_MAPPING = new HashMap<String, String>();
+    static {
+        QUERY_PARAM_MAPPING.put("moatClientLevel1", "level1");
+        QUERY_PARAM_MAPPING.put("moatClientLevel2", "level2");
+        QUERY_PARAM_MAPPING.put("moatClientLevel3", "level3");
+        QUERY_PARAM_MAPPING.put("moatClientLevel4", "level4");
+        QUERY_PARAM_MAPPING.put("moatClientSlicer1", "slicer1");
+        QUERY_PARAM_MAPPING.put("moatClientSlicer2", "slicer2");
+    }
+
+    @Nullable private Object mMoatWebAdTracker;
+    @Nullable private Object mMoatVideoTracker;
+    @NonNull private Map<String, String> mAdIds = new HashMap<String, String>();
+    private boolean mWasVideoPrepared;
+
+    static boolean isEnabled() {
+        return !sIsVendorDisabled && isViewabilityEnabledViaReflection();
+    }
+
+    static void disable() {
+        sIsVendorDisabled = true;
+    }
+
+    private static boolean isViewabilityEnabledViaReflection() {
+        if (sIsViewabilityEnabledViaReflection == null) {
+            sIsViewabilityEnabledViaReflection = Reflection.classFound(MOAT_FACTORY_PATH);
+            MoPubLog.d("Moat is "
+                    + (sIsViewabilityEnabledViaReflection ? "" : "un")
+                    + "available via reflection.");
+        }
+
+        return sIsViewabilityEnabledViaReflection;
+    }
+
+    @Override
+    @NonNull
+    public String getName() {
+        return "Moat";
+    }
+
+    @Override
+    @Nullable
+    public Boolean initialize(@NonNull final Context context) {
+        Preconditions.checkNotNull(context);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        if (sWasInitialized) {
+            return true;
+        }
+
+        final Application application;
+        if (context instanceof Activity) {
+            application = ((Activity) context).getApplication();
+        } else {
+            try {
+                application = (Application) context.getApplicationContext();
+            } catch (ClassCastException e) {
+                MoPubLog.d("Unable to initialize Moat, error obtaining application context.");
+                return false;
+            }
+        }
+
+        // Pre-reflection code:
+        // final MoatOptions options = new MoatOptions();
+        // options.disableAdIdCollection = true;
+        // MoatAnalytics.getInstance().start(options, application);
+
+        try {
+            Object moatOptions = Reflection.instantiateClassWithEmptyConstructor(MOAT_OPTIONS_PATH,
+                    Object.class);
+
+            moatOptions.getClass().getField("disableAdIdCollection")
+                    .setBoolean(moatOptions, true);
+
+            Object moatAnalytics = new Reflection.MethodBuilder(null, "getInstance")
+                    .setStatic(MOAT_ANALYTICS_PATH)
+                    .execute();
+
+            new Reflection.MethodBuilder(moatAnalytics, "start")
+                    .addParam(MOAT_OPTIONS_PATH, moatOptions)
+                    .addParam(Application.class, application)
+                    .execute();
+
+            sWasInitialized = true;
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to initialize Moat: " + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean invalidate() {
+        if (!isEnabled()) {
+            return null;
+        }
+
+        mMoatWebAdTracker = null;
+        mMoatVideoTracker = null;
+        mAdIds.clear();
+
+        return true;
+    }
+
+    @Override
+    @Nullable
+    public Boolean createDisplaySession(@NonNull final Context context,
+            @NonNull final WebView webView, boolean isDeferred) {
+        Preconditions.checkNotNull(context);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        // Pre-reflection code:
+        // mMoatWebAdTracker = MoatFactory.create().createWebAdTracker(webView);
+        // if (!isDeferred) {
+        //     mMoatWebAdTracker.startTracking();
+        // }
+
+        try {
+            Object moatFactory = new Reflection.MethodBuilder(null, "create")
+                    .setStatic(MOAT_FACTORY_PATH)
+                    .execute();
+
+            mMoatWebAdTracker = new Reflection.MethodBuilder(moatFactory, "createWebAdTracker")
+                    .addParam(WebView.class, webView)
+                    .execute();
+
+            // If we're not dealing with a deferred session, start tracking now
+            if (!isDeferred) {
+                new Reflection.MethodBuilder(mMoatWebAdTracker, "startTracking").execute();
+            }
+
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to execute Moat start display session: "
+                    + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean startDeferredDisplaySession(@NonNull final Activity activity) {
+        if (!isEnabled()) {
+            return null;
+        }
+
+        if (mMoatWebAdTracker == null) {
+            MoPubLog.d("MoatWebAdTracker unexpectedly null.");
+            return false;
+        }
+
+        // Pre-reflection code:
+        // mMoatWebAdTracker.startTracking();
+
+        try {
+            new Reflection.MethodBuilder(mMoatWebAdTracker, "startTracking").execute();
+
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to record deferred display session for Moat: " + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean endDisplaySession() {
+        if (!isEnabled()) {
+            return null;
+        }
+
+        if (mMoatWebAdTracker == null) {
+            MoPubLog.d("Moat WebAdTracker unexpectedly null.");
+            return false;
+        }
+
+        // Pre-reflection code:
+        // mMoatWebAdTracker.stopTracking();
+
+        try {
+            new Reflection.MethodBuilder(mMoatWebAdTracker, "stopTracking").execute();
+
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to execute Moat end session: " + e.getMessage());
+        }
+
+        return false;
+    }
+
+    @Override
+    @Nullable
+    public Boolean createVideoSession(@NonNull final Activity activity, @NonNull final View view,
+            @NonNull final Set<String> buyerResources,
+            @NonNull final Map<String, String> videoViewabilityTrackers) {
+        Preconditions.checkNotNull(activity);
+        Preconditions.checkNotNull(view);
+        Preconditions.checkNotNull(buyerResources);
+        Preconditions.checkNotNull(videoViewabilityTrackers);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        updateAdIdsFromUrlStringAndBuyerResources(videoViewabilityTrackers.get(MOAT_KEY),
+                buyerResources);
+
+        String partnerCode = mAdIds.get(PARTNER_CODE_KEY);
+        if (TextUtils.isEmpty(partnerCode)) {
+            MoPubLog.d("partnerCode was empty when starting Moat video session");
+            return false;
+        }
+
+        // Pre-reflection code:
+        // MoatPlugin moatPlugin = new ReactiveVideoTrackerPlugin(partnerCode);
+        // mMoatVideoTracker = MoatFactory.create().createCustomTracker(moatPlugin);
+
+        try {
+            final Object moatPlugin = Reflection.instantiateClassWithConstructor(
+                    MOAT_REACTIVE_VIDEO_TRACKER_PLUGIN_PATH, Object.class,
+                    new Class[]{String.class}, new Object[]{partnerCode});
+
+            final Object moatFactory = new Reflection.MethodBuilder(null, "create")
+                    .setStatic(MOAT_FACTORY_PATH)
+                    .execute();
+
+            mMoatVideoTracker = new Reflection.MethodBuilder(moatFactory, "createCustomTracker")
+                    .addParam(MOAT_PLUGIN_PATH, moatPlugin)
+                    .execute();
+
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to execute Moat start video session: " + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean registerVideoObstructions(@NonNull final List<View> views) {
+        Preconditions.checkNotNull(views);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        // unimplemented by Moat
+        return true;
+    }
+
+    @Override
+    @Nullable
+    public Boolean onVideoPrepared(@NonNull final View playerView, final int duration) {
+        Preconditions.checkNotNull(playerView);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        if (mMoatVideoTracker == null) {
+            MoPubLog.d("Moat VideoAdTracker unexpectedly null.");
+            return false;
+        }
+
+        if (mWasVideoPrepared) {
+            return false;
+        }
+
+        // Pre-reflection code:
+        // mMoatVideoTracker.trackVideoAd(mAdIds, duration, playerView);
+
+        try {
+            new Reflection.MethodBuilder(mMoatVideoTracker, "trackVideoAd")
+                    .addParam(Map.class, mAdIds)
+                    .addParam(Integer.class, duration)
+                    .addParam(View.class, playerView)
+                    .execute();
+            mWasVideoPrepared = true;
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to execute Moat onVideoPrepared: " + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean recordVideoEvent(@NonNull final VideoEvent event, final int playheadMillis) {
+        Preconditions.checkNotNull(event);
+
+        if (!isEnabled()) {
+            return null;
+        }
+
+        if (mMoatVideoTracker == null) {
+            MoPubLog.d("Moat VideoAdTracker unexpectedly null.");
+            return false;
+        }
+
+        try {
+            switch (event) {
+                case AD_STARTED:
+                case AD_STOPPED:
+                case AD_PAUSED:
+                case AD_PLAYING:
+                case AD_SKIPPED:
+                case AD_VIDEO_FIRST_QUARTILE:
+                case AD_VIDEO_MIDPOINT:
+                case AD_VIDEO_THIRD_QUARTILE:
+                case AD_COMPLETE:
+                    handleVideoEventReflection(event, playheadMillis);
+                    return true;
+
+                case AD_LOADED:
+                case AD_IMPRESSED:
+                case AD_CLICK_THRU:
+                case RECORD_AD_ERROR:
+                    // unimplemented
+                    return null;
+
+                default:
+                    MoPubLog.d("Unexpected video event: " + event.getMoatEnumName());
+                    return false;
+            }
+        } catch (Exception e) {
+            MoPubLog.d("Video event " + event.getMoatEnumName() + " failed. "
+                    + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Boolean endVideoSession() {
+        if (!isEnabled()) {
+            return null;
+        }
+
+        if (mMoatVideoTracker == null) {
+            MoPubLog.d("Moat VideoAdTracker unexpectedly null.");
+            return false;
+        }
+
+        // Pre-reflection code:
+        // mMoatVideoTracker.stopTracking();
+
+        try {
+            new Reflection.MethodBuilder(mMoatVideoTracker, "stopTracking").execute();
+
+            return true;
+        } catch (Exception e) {
+            MoPubLog.d("Unable to execute Moat end video session: " + e.getMessage());
+            return false;
+        }
+    }
+
+    /**
+     * Generates the adIds map from the video viewability tracking URL and any additional buyer tag
+     * resources.
+     *
+     * @param urlString Used to gather partnerCode and relevant level/slicer information.
+     * Example: https://z.moatads.com/mopubappdisplay698212075271/moatad.js#moatClientLevel1=appname&moatClientLevel2=adunit&moatClientLevel3=creativetype&moatClientSlicer1=adformat
+     *
+     * @param buyerResources Moat buyer-tag impression pixels.
+     *
+     * Example output adIds map:
+     * {
+     *     "level1": “appname",
+     *     "level2": "adunit",
+     *     "level3": "creativetype",
+     *     "slicer1": "adformat",
+     *     "partnerCode": "mopubappdisplay698212075271",
+     *     "zMoatVASTIDs": "<ViewableImpression id="${BUYER_AD_SERVER_MACRO[S]}"><![CDATA[https://px.moatads.com/pixel.gif?moatPartnerCode=${MOAT_PARTNER_CODE}]]</ViewableImpression>"
+     * }
+     */
+    private void updateAdIdsFromUrlStringAndBuyerResources(@Nullable final String urlString,
+            @Nullable final Set<String> buyerResources) {
+        mAdIds.clear();
+        mAdIds.put(PARTNER_CODE_KEY, DEFAULT_PARTNER_CODE);
+        mAdIds.put(MOAT_VAST_IDS_KEY, TextUtils.join(";", buyerResources));
+
+        if (TextUtils.isEmpty(urlString)) {
+            return;
+        }
+
+        final Uri uri = Uri.parse(urlString);
+
+        final List<String> pathSegments = uri.getPathSegments();
+        // If a partnerCode is parsed from the viewability tracking URL, prefer to use that.
+        // Otherwise fallback to the MoPub default that was already added to the map.
+        if (pathSegments.size() > 0 && !TextUtils.isEmpty(pathSegments.get(0))) {
+            mAdIds.put(PARTNER_CODE_KEY, pathSegments.get(0));
+        }
+
+        final String fragment = uri.getFragment();
+        if (!TextUtils.isEmpty(fragment)) {
+            for (final String fragmentPairs : fragment.split("&")) {
+                final String[] fragmentPair = fragmentPairs.split("=");
+                if (fragmentPair.length < 2) {
+                    continue;
+                }
+
+                final String fragmentKey = fragmentPair[0];
+                final String fragmentValue = fragmentPair[1];
+                if (TextUtils.isEmpty(fragmentKey) || TextUtils.isEmpty(fragmentValue)) {
+                    continue;
+                }
+
+                if (QUERY_PARAM_MAPPING.containsKey(fragmentKey)) {
+                    mAdIds.put(QUERY_PARAM_MAPPING.get(fragmentKey), fragmentValue);
+                }
+            }
+        }
+    }
+
+    private boolean handleVideoEventReflection(@NonNull VideoEvent videoEvent,
+            final int playheadMillis) throws Exception {
+        if (videoEvent.getMoatEnumName() == null) {
+            return false;
+        }
+
+        // Pre-reflection code:
+        // MoatAdEvent event = new MoatAdEventType(<moatAdEventType>, playhead);
+        // mMoatVideoTracker.dispatchEvent(event);
+
+        final Class<?> clazz = Class.forName(MOAT_AD_EVENT_TYPE_PATH);
+        final Enum<?> adEventTypeEnum = Enum.valueOf(clazz.asSubclass(Enum.class),
+                videoEvent.getMoatEnumName());
+
+        final Object moatAdEvent = Reflection.instantiateClassWithConstructor(
+                MOAT_AD_EVENT_PATH, Object.class, new Class[]{clazz, Integer.class},
+                new Object[]{adEventTypeEnum, playheadMillis});
+
+        new Reflection.MethodBuilder(mMoatVideoTracker, "dispatchEvent")
+                .addParam(MOAT_AD_EVENT_PATH, moatAdEvent)
+                .execute();
+
+        return true;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SharedPreferencesHelper.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SharedPreferencesHelper.java
index f6acc1d8..500910dc 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SharedPreferencesHelper.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SharedPreferencesHelper.java
@@ -2,15 +2,26 @@
 
 import android.content.Context;
 import android.content.SharedPreferences;
+import android.support.annotation.NonNull;
 
 import static android.content.Context.MODE_PRIVATE;
 
 public final class SharedPreferencesHelper {
-    public static final String PREFERENCE_NAME = "mopubSettings";
+    public static final String DEFAULT_PREFERENCE_NAME = "mopubSettings";
 
     private SharedPreferencesHelper() {}
     
-    public static SharedPreferences getSharedPreferences(Context context) {
-    	return context.getSharedPreferences(PREFERENCE_NAME, MODE_PRIVATE);
+    public static SharedPreferences getSharedPreferences(@NonNull final Context context) {
+        Preconditions.checkNotNull(context);
+
+        return context.getSharedPreferences(DEFAULT_PREFERENCE_NAME, MODE_PRIVATE);
+    }
+
+    public static SharedPreferences getSharedPreferences(
+            @NonNull final Context context, @NonNull final String preferenceName) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(preferenceName);
+
+        return context.getSharedPreferences(preferenceName, MODE_PRIVATE);
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
index c2163480..ca5009e8 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
@@ -59,6 +59,11 @@ protected String doInBackground(@Nullable String... urls) {
                     return locationUrl;
                 }
 
+                // Do not resolve redirects if native browser will handle the URL.
+                if (UrlAction.OPEN_NATIVE_BROWSER.shouldTryHandlingUrl(Uri.parse(locationUrl))) {
+                    return locationUrl;
+                }
+
                 previousUrl = locationUrl;
                 locationUrl = getRedirectLocation(locationUrl);
                 redirectCount++;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java
index 4c01c6c8..e59d522a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java
@@ -1,8 +1,10 @@
 package com.mopub.common.util;
 
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 
 import com.mopub.common.Preconditions;
+import com.mopub.common.logging.MoPubLog;
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
@@ -16,16 +18,18 @@
  */
 public class Reflection {
     public static class MethodBuilder {
-        private final Object mInstance;
-        private final String mMethodName;
-        private Class<?> mClass;
+        @Nullable private final Object mInstance;
+        @NonNull private final String mMethodName;
+        @Nullable private Class<?> mClass;
 
-        private List<Class<?>> mParameterClasses;
-        private List<Object> mParameters;
+        @NonNull private List<Class<?>> mParameterClasses;
+        @NonNull private List<Object> mParameters;
         private boolean mIsAccessible;
         private boolean mIsStatic;
 
-        public MethodBuilder(final Object instance, final String methodName) {
+        public MethodBuilder(@Nullable final Object instance, @NonNull final String methodName) {
+            Preconditions.checkNotNull(methodName);
+
             mInstance = instance;
             mMethodName = methodName;
 
@@ -35,37 +39,70 @@ public MethodBuilder(final Object instance, final String methodName) {
             mClass = (instance != null) ? instance.getClass() : null;
         }
 
-        public <T> MethodBuilder addParam(Class<T> clazz, T parameter) {
+        @NonNull
+        public <T> MethodBuilder addParam(@NonNull final Class<T> clazz,
+                @Nullable final T parameter) {
+            Preconditions.checkNotNull(clazz);
+
+            mParameterClasses.add(clazz);
+            mParameters.add(parameter);
+
+            return this;
+        }
+
+        @NonNull
+        public MethodBuilder addParam(@NonNull final String className,
+                @Nullable final Object parameter) throws ClassNotFoundException {
+            Preconditions.checkNotNull(className);
+
+            final Class<?> clazz = Class.forName(className);
+
             mParameterClasses.add(clazz);
             mParameters.add(parameter);
 
             return this;
         }
 
+        @NonNull
         public MethodBuilder setAccessible() {
             mIsAccessible = true;
 
             return this;
         }
 
-        public MethodBuilder setStatic(Class<?> clazz) {
+        @NonNull
+        public MethodBuilder setStatic(@NonNull final Class<?> clazz) {
+            Preconditions.checkNotNull(clazz);
+
             mIsStatic = true;
             mClass = clazz;
 
             return this;
         }
 
+        @NonNull
+        public MethodBuilder setStatic(@NonNull final String className)
+                throws ClassNotFoundException {
+            Preconditions.checkNotNull(className);
+
+            mIsStatic = true;
+            mClass = Class.forName(className);
+
+            return this;
+        }
+
+        @Nullable
         public Object execute() throws Exception {
-            Class<?>[] classArray = new Class<?>[mParameterClasses.size()];
-            Class<?>[] parameterTypes = mParameterClasses.toArray(classArray);
+            final Class<?>[] classArray = new Class<?>[mParameterClasses.size()];
+            final Class<?>[] parameterTypes = mParameterClasses.toArray(classArray);
 
-            Method method = getDeclaredMethodWithTraversal(mClass, mMethodName, parameterTypes);
+            final Method method = getDeclaredMethodWithTraversal(mClass, mMethodName, parameterTypes);
 
             if (mIsAccessible) {
                 method.setAccessible(true);
             }
 
-            Object[] parameters = mParameters.toArray();
+            final Object[] parameters = mParameters.toArray();
 
             if (mIsStatic) {
                 return method.invoke(null, parameters);
@@ -75,8 +112,13 @@ public Object execute() throws Exception {
         }
     }
 
-    public static Method getDeclaredMethodWithTraversal(Class<?> clazz, String methodName, Class<?>... parameterTypes)
+    @Nullable
+    public static Method getDeclaredMethodWithTraversal(@Nullable final Class<?> clazz,
+            @NonNull final String methodName, @NonNull final Class<?>... parameterTypes)
             throws NoSuchMethodException {
+        Preconditions.checkNotNull(methodName);
+        Preconditions.checkNotNull(parameterTypes);
+
         Class<?> currentClass = clazz;
 
         while (currentClass != null) {
@@ -90,7 +132,9 @@ public static Method getDeclaredMethodWithTraversal(Class<?> clazz, String metho
         throw new NoSuchMethodException();
     }
 
-    public static boolean classFound(final String className) {
+    public static boolean classFound(@NonNull final String className) {
+        Preconditions.checkNotNull(className);
+
         try {
             Class.forName(className);
             return true;
@@ -99,11 +143,13 @@ public static boolean classFound(final String className) {
         }
     }
 
+    @NonNull
     public static <T> T instantiateClassWithEmptyConstructor(@NonNull final String className,
             @NonNull final Class<? extends T> superclass)
             throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException,
             InvocationTargetException, InstantiationException, NullPointerException {
         Preconditions.checkNotNull(className);
+        Preconditions.checkNotNull(superclass);
 
         final Class<? extends T> clazz = Class.forName(className).asSubclass(superclass);
         // noinspection unchecked
@@ -113,9 +159,10 @@ public static boolean classFound(final String className) {
         return constructor.newInstance();
     }
 
+    @NonNull
     public static <T> T instantiateClassWithConstructor(@NonNull final String className,
-            @NonNull final Class<? extends T> superClass, @NonNull Class[] classes,
-            @NonNull Object[] parameters)
+            @NonNull final Class<? extends T> superClass, @NonNull final Class[] classes,
+            @NonNull final Object[] parameters)
             throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException,
             InvocationTargetException, InstantiationException {
         Preconditions.checkNotNull(className);
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
index fddc88a8..88e1304a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
@@ -45,6 +45,10 @@
     // Internal Video Trackers
     VIDEO_TRACKERS("X-Video-Trackers"),
 
+    // Viewability fields
+    VIDEO_VIEWABILITY_TRACKERS("X-Video-Viewability-Trackers"),
+    DISABLE_VIEWABILITY("X-Disable-Viewability"),
+
     @Deprecated CUSTOM_SELECTOR("X-Customselector");
 
     private final String key;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
index b984bf71..57144826 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
@@ -251,10 +251,15 @@ private void internalLoadAd() {
         loadNonJavascript(adUrl);
     }
 
-    void loadNonJavascript(String url) {
-        if (url == null) return;
+    void loadNonJavascript(@Nullable final String url) {
+        if (url == null) {
+            return;
+        }
+
+        if (!url.startsWith("javascript:")) {
+            MoPubLog.d("Loading url: " + url);
+        }
 
-        MoPubLog.d("Loading url: " + url);
         if (mIsLoading) {
             if (!TextUtils.isEmpty(mAdUnitId)) {  // This shouldn't be able to happen?
                 MoPubLog.i("Already loading an ad for " + mAdUnitId + ", wait to finish.");
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AvidBuyerTagXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AvidBuyerTagXmlManager.java
new file mode 100644
index 00000000..01087aa5
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AvidBuyerTagXmlManager.java
@@ -0,0 +1,76 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+
+import com.mopub.common.Preconditions;
+import com.mopub.mobileads.util.XmlUtils;
+
+import org.w3c.dom.Node;
+
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+/**
+ * Data Object for AVID's VAST Custom Extension.
+ */
+class AvidBuyerTagXmlManager {
+    // Elements
+    private static final String AD_VERIFICATIONS = "AdVerifications";
+    private static final String VERIFICATION = "Verification";
+    private static final String JAVA_SCRIPT_RESOURCE = "JavaScriptResource";
+
+    private final Node mAvidNode;
+
+    AvidBuyerTagXmlManager(@NonNull final Node avidNode) {
+        Preconditions.checkNotNull(avidNode);
+
+        mAvidNode = avidNode;
+    }
+
+    /**
+     * Return the corresponding javascript resources for the AVID-related Extension node.
+     *
+     * Expected Extension node:
+     * <Extension>
+     *   <AVID>
+     *     <AdVerifications>
+     *       <Verification>
+     *         <JavaScriptResource>
+     *           <![CDATA[
+     *             https://temp.avid.com/pixel.gif?avidExtension
+     *           ]]>
+     *         </JavaScriptResource>
+     *       </Verification>
+     *     </AdVerifications>
+     *   </AVID>
+     * </Extension>
+     *
+     * @return Collection of JavaScriptResources in string form, i.e.
+     * [https://temp.avid.com/pixel.gif?avidExtension]
+     */
+    @NonNull
+    Set<String> getJavaScriptResources() {
+        final Set<String> avidJavaScriptResources = new HashSet<String>();
+
+        final Node adVerification = XmlUtils.getFirstMatchingChildNode(mAvidNode, AD_VERIFICATIONS);
+        if (adVerification == null) {
+            return avidJavaScriptResources;
+        }
+
+        final List<Node> verifications = XmlUtils.getMatchingChildNodes(adVerification, VERIFICATION);
+        if (verifications == null) {
+            return avidJavaScriptResources;
+        }
+
+        for (final Node verification : verifications) {
+            final Node javaScriptResource = XmlUtils.getFirstMatchingChildNode(verification,
+                    JAVA_SCRIPT_RESOURCE);
+            if (javaScriptResource != null) {
+                avidJavaScriptResources.add(XmlUtils.getNodeValue(javaScriptResource));
+            }
+        }
+
+        return avidJavaScriptResources;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
index b37c8dec..c16c0085 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 import android.graphics.Color;
+import android.support.annotation.Nullable;
 import android.view.MotionEvent;
 import android.view.View;
 
@@ -34,13 +35,17 @@ public void init(boolean isScrollable) {
     }
 
     @Override
-    public void loadUrl(String url) {
-        if (url == null) return;
+    public void loadUrl(@Nullable final String url) {
+        if (url == null) {
+            return;
+        }
 
-        MoPubLog.d("Loading url: " + url);
         if (url.startsWith("javascript:")) {
             super.loadUrl(url);
+            return;
         }
+
+        MoPubLog.d("Loading url: " + url);
     }
 
     private void disableScrollingAndZoom() {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseWebView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseWebView.java
index 9837e067..e42aad70 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseWebView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseWebView.java
@@ -51,7 +51,7 @@ public void destroy() {
         super.destroy();
     }
 
-    protected void enablePlugins(final boolean enabled) {
+    public void enablePlugins(final boolean enabled) {
         // Android 4.3 and above has no concept of plugin states
         if (VERSION.SDK_INT >= VERSION_CODES.JELLY_BEAN_MR2) {
             return;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
index 0ee54d20..8bc63db5 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
@@ -7,8 +7,8 @@
 import android.webkit.WebView;
 import android.webkit.WebViewClient;
 
-import com.mopub.common.UrlHandler;
 import com.mopub.common.UrlAction;
+import com.mopub.common.UrlHandler;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Intents;
 import com.mopub.exceptions.IntentNotResolvableException;
@@ -83,7 +83,10 @@ public void onClose() {
 
                     @Override
                     public void onFailLoad() {
+                        mHtmlWebView.getSettings().setJavaScriptEnabled(false);
+                        mHtmlWebView.stopLoading();
                         mHtmlWebViewListener.onFailed(UNSPECIFIED);
+                        mHtmlWebView.getSettings().setJavaScriptEnabled(true);
                     }
                 })
                 .build().handleUrl(mContext, url, mHtmlWebView.wasClicked());
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/Interstitial.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/Interstitial.java
new file mode 100644
index 00000000..e2a377da
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/Interstitial.java
@@ -0,0 +1,8 @@
+package com.mopub.mobileads;
+
+/**
+ * Marker interface for denoting an Interstitial without necessarily using the
+ * mopub-sdk-interstitial module.
+ */
+public interface Interstitial {
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoatBuyerTagXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoatBuyerTagXmlManager.java
new file mode 100644
index 00000000..5472c971
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoatBuyerTagXmlManager.java
@@ -0,0 +1,89 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.Preconditions;
+import com.mopub.mobileads.util.XmlUtils;
+
+import org.w3c.dom.Element;
+import org.w3c.dom.Node;
+
+import java.util.HashSet;
+import java.util.List;
+import java.util.Locale;
+import java.util.Set;
+
+/**
+ * Data Object for Moat's VAST Custom Extension.
+ */
+class MoatBuyerTagXmlManager {
+    // Elements
+    private static final String VIEWABLE_IMPRESSION = "ViewableImpression";
+
+    // Attributes
+    private static final String ID = "id";
+
+    private final List<Node> mMoatVerificationNodes;
+
+    MoatBuyerTagXmlManager(@NonNull final List<Node> moatVerificationNodes) {
+        Preconditions.checkNotNull(moatVerificationNodes);
+
+        mMoatVerificationNodes = moatVerificationNodes;
+    }
+
+    /**
+     * Return the corresponding impression pixels for Moat-related Verification nodes.
+     *
+     * Expected Extension node:
+     * <Extension>
+     *   <AdVerifications>
+     *     <Verification vendor="Moat">
+     *       <ViewableImpression id="${BUYER_AD_SERVER_MACRO[S]}">
+     *         <![CDATA[
+     *           https://px.moatads.com/pixel.gif?moatPartnerCode=${MOAT_PARTNER_CODE}
+     *         ]]
+     *       </ViewableImpression>
+     *     </Verification>
+     *   </AdVerifications>
+     * </Extension>
+     *
+     * @return Collection of impression pixel tags in string form, i.e.
+     * <ViewableImpression id="${BUYER_AD_SERVER_MACRO[S]}">
+     *   <![CDATA[https://px.moatads.com/pixel.gif?moatPartnerCode=${MOAT_PARTNER_CODE}]]
+     * </ViewableImpression>
+     */
+    @NonNull
+    Set<String> getImpressionPixelsXml() {
+        final Set<String> impressionPixelsXml = new HashSet<String>();
+
+        for (final Node verification : mMoatVerificationNodes) {
+            if (verification == null) {
+                continue;
+            }
+
+            final Node viewableImpression = XmlUtils.getFirstMatchingChildNode(verification,
+                    VIEWABLE_IMPRESSION);
+
+            final String viewableImpressionXml = getViewableImpressionXml(viewableImpression);
+            if (viewableImpressionXml != null) {
+                impressionPixelsXml.add(viewableImpressionXml);
+            }
+        }
+
+        return impressionPixelsXml;
+    }
+
+    @Nullable
+    private String getViewableImpressionXml(@Nullable final Node viewableImpression) {
+        if (viewableImpression == null || !viewableImpression.hasAttributes()) {
+            return null;
+        }
+
+        final String idAttribute = XmlUtils.getAttributeValue(viewableImpression, ID);
+        final String content = XmlUtils.getNodeValue(viewableImpression);
+        return String.format(Locale.US,
+                "<ViewableImpression id=\"%s\"><![CDATA[%s]]</ViewableImpression>",
+                idAttribute, content);
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java
index 63fd8513..e0006a9b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java
@@ -11,16 +11,23 @@
  * A Vast tracking URL with an "absolute" trigger threshold. The tracker should be triggered
  * after a fixed number of milliseconds have been played.
  */
-public class VastAbsoluteProgressTracker extends VastTracker implements Comparable<VastAbsoluteProgressTracker>, Serializable {
+public class VastAbsoluteProgressTracker extends VastTracker
+        implements Comparable<VastAbsoluteProgressTracker>, Serializable {
     private static final long serialVersionUID = 0L;
     private final int mTrackingMilliseconds;
 
-    public VastAbsoluteProgressTracker(@NonNull final String trackingUrl, int trackingMilliseconds) {
-        super(trackingUrl);
+    public VastAbsoluteProgressTracker(@NonNull final MessageType messageType,
+            @NonNull final String content, int trackingMilliseconds) {
+        super(messageType, content);
         Preconditions.checkArgument(trackingMilliseconds >= 0);
         mTrackingMilliseconds = trackingMilliseconds;
     }
 
+    public VastAbsoluteProgressTracker(@NonNull final String trackingUrl,
+            int trackingMilliseconds) {
+        this(MessageType.TRACKING_URL, trackingUrl, trackingMilliseconds);
+    }
+
     public int getTrackingMilliseconds() {
         return mTrackingMilliseconds;
     }
@@ -35,6 +42,6 @@ public int compareTo(@NonNull final VastAbsoluteProgressTracker other) {
 
     @Override
     public String toString() {
-        return String.format(Locale.US, "%dms: %s", mTrackingMilliseconds, mTrackingUrl);
+        return String.format(Locale.US, "%dms: %s", mTrackingMilliseconds, getContent());
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionXmlManager.java
index 0e0a1c8a..7b46bd30 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionXmlManager.java
@@ -9,15 +9,25 @@
 
 import org.w3c.dom.Node;
 
+import java.util.Collections;
+import java.util.List;
+import java.util.Set;
+
 /**
  * This XML manager handles Extension nodes.
  */
 public class VastExtensionXmlManager {
     // Elements
     public static final String VIDEO_VIEWABILITY_TRACKER = "MoPubViewabilityTracker";
+    public static final String AD_VERIFICATIONS = "AdVerifications";
+    public static final String VERIFICATION = "Verification";
+    public static final String AVID = "AVID";
 
     // Attributes
+    public static final String VENDOR = "vendor";
     public static final String TYPE = "type";
+    public static final String ID = "id";
+    public static final String MOAT = "Moat";
 
     private final Node mExtensionNode;
 
@@ -57,6 +67,45 @@ VideoViewabilityTracker getVideoViewabilityTracker() {
                 videoViewabilityTrackerUrl);
     }
 
+    /**
+     * If there is an Extension node with an AVID element, return associated JavaScriptResources
+     * from buyer tags.
+     *
+     * @return Set of JavaScriptResources in string form, or null if AVID node is missing.
+     */
+    @Nullable
+    Set<String> getAvidJavaScriptResources() {
+        final Node avidNode = XmlUtils.getFirstMatchingChildNode(mExtensionNode, AVID);
+        if (avidNode == null) {
+            return null;
+        }
+
+        return new AvidBuyerTagXmlManager(avidNode).getJavaScriptResources();
+    }
+
+    /**
+     * If the Extension node contains Moat-related Verification nodes, return their corresponding
+     * impression pixels from buyer tags.
+     *
+     * @return Set of impression pixels in string form, or null if no Moat Verification nodes
+     * are present.
+     */
+    @Nullable
+    Set<String> getMoatImpressionPixels() {
+        final Node adVerification = XmlUtils.getFirstMatchingChildNode(mExtensionNode, AD_VERIFICATIONS);
+        if (adVerification == null) {
+            return null;
+        }
+
+        final List<Node> moatNodes = XmlUtils.getMatchingChildNodes(adVerification, VERIFICATION,
+                VENDOR, Collections.singletonList(MOAT));
+        if (moatNodes == null || moatNodes.isEmpty()) {
+            return null;
+        }
+
+        return new MoatBuyerTagXmlManager(moatNodes).getImpressionPixelsXml();
+    }
+
     /**
      * If the node has a "type" attribute, return its value.
      *
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastFractionalProgressTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastFractionalProgressTracker.java
index 824f9516..a179b4f4 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastFractionalProgressTracker.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastFractionalProgressTracker.java
@@ -15,12 +15,17 @@
     private static final long serialVersionUID = 0L;
     private final float mFraction;
 
-    public VastFractionalProgressTracker(@NonNull final String trackingUrl, float trackingFraction) {
-        super(trackingUrl);
+    public VastFractionalProgressTracker(@NonNull final MessageType messageType,
+            @NonNull final String content, float trackingFraction) {
+        super(messageType, content);
         Preconditions.checkArgument(trackingFraction >= 0);
         mFraction = trackingFraction;
     }
 
+    public VastFractionalProgressTracker(@NonNull final String trackingUrl, float trackingFraction) {
+        this(MessageType.TRACKING_URL, trackingUrl, trackingFraction);
+    }
+
     public float trackingFraction() {
         return mFraction;
     }
@@ -35,6 +40,6 @@ public int compareTo(@NonNull final VastFractionalProgressTracker other) {
 
     @Override
     public String toString() {
-        return String.format(Locale.US, "%2f: %s", mFraction, mTrackingUrl);
+        return String.format(Locale.US, "%2f: %s", mFraction, getContent());
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastTracker.java
index 46019add..4dbde1f8 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastTracker.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastTracker.java
@@ -11,14 +11,26 @@
  * progress trackers are only called once, but error trackers are repeatable.
  */
 public class VastTracker implements Serializable {
-    private static final long serialVersionUID = 0L;
-    @NonNull protected final String mTrackingUrl;
+    private static final long serialVersionUID = 1L;
+
+    @NonNull private final MessageType mMessageType;
+    @NonNull private final String mContent;
     private boolean mCalled;
     private boolean mIsRepeatable;
 
-    public VastTracker(@NonNull String trackingUrl) {
-        Preconditions.checkNotNull(trackingUrl);
-        mTrackingUrl = trackingUrl;
+    enum MessageType { TRACKING_URL, QUARTILE_EVENT }
+
+    public VastTracker(@NonNull final MessageType messageType, @NonNull final String content) {
+        Preconditions.checkNotNull(messageType);
+        Preconditions.checkNotNull(content);
+
+        mMessageType = messageType;
+        mContent = content;
+    }
+
+    // Legacy implementation implied URL tracking
+    public VastTracker(@NonNull final String trackingUrl) {
+        this(MessageType.TRACKING_URL, trackingUrl);
     }
 
     public VastTracker(@NonNull String trackingUrl, boolean isRepeatable) {
@@ -27,8 +39,13 @@ public VastTracker(@NonNull String trackingUrl, boolean isRepeatable) {
     }
 
     @NonNull
-    public String getTrackingUrl() {
-        return mTrackingUrl;
+    public MessageType getMessageType() {
+        return mMessageType;
+    }
+
+    @NonNull
+    public String getContent() {
+        return mContent;
     }
 
     public void setTracked() {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java
index e3012c70..77a8d5f4 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java
@@ -28,13 +28,15 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 
 import static com.mopub.network.TrackingRequest.makeVastTrackingHttpRequest;
 
 public class VastVideoConfig implements Serializable {
-    private static final long serialVersionUID = 1L;
+    private static final long serialVersionUID = 2L;
 
     @NonNull private final ArrayList<VastTracker> mImpressionTrackers;
     @NonNull private final ArrayList<VastFractionalProgressTracker> mFractionalTrackers;
@@ -46,6 +48,7 @@
     @NonNull private final ArrayList<VastTracker> mSkipTrackers;
     @NonNull private final ArrayList<VastTracker> mClickTrackers;
     @NonNull private final ArrayList<VastTracker> mErrorTrackers;
+
     @Nullable private String mClickThroughUrl;
     @Nullable private String mNetworkMediaFileUrl;
     @Nullable private String mDiskMediaFileUrl;
@@ -62,6 +65,10 @@
     @Nullable private String mCustomCloseIconUrl;
     @NonNull private DeviceUtils.ForceOrientation mCustomForceOrientation = DeviceUtils.ForceOrientation.FORCE_LANDSCAPE; // Default is forcing landscape
     @Nullable private VideoViewabilityTracker mVideoViewabilityTracker;
+    // Viewability
+    @NonNull private final Map<String, String> mExternalViewabilityTrackers;
+    @NonNull private final Set<String> mAvidJavascriptResources;
+    @NonNull private final Set<String> mMoatImpressionPixels;
 
     // MoPub-specific metadata
     private String mDspCreativeId;
@@ -86,6 +93,10 @@ public VastVideoConfig() {
         mErrorTrackers = new ArrayList<VastTracker>();
         mSocialActionsCompanionAds = new HashMap<String, VastCompanionAdConfig>();
         mIsRewardedVideo = false;
+
+        mExternalViewabilityTrackers = new HashMap<String, String>();
+        mAvidJavascriptResources = new HashSet<String>();
+        mMoatImpressionPixels = new HashSet<String>();
     }
 
     /**
@@ -241,6 +252,25 @@ public void addVideoTrackers(@Nullable final JSONObject videoTrackers) {
         }
     }
 
+    public void addExternalViewabilityTrackers(
+            @Nullable final Map<String, String> externalViewabilityTrackers) {
+        if (externalViewabilityTrackers != null) {
+            mExternalViewabilityTrackers.putAll(externalViewabilityTrackers);
+        }
+    }
+
+    public void addAvidJavascriptResources(@Nullable final Set<String> javascriptResources) {
+        if (javascriptResources != null) {
+            mAvidJavascriptResources.addAll(javascriptResources);
+        }
+    }
+
+    public void addMoatImpressionPixels(@Nullable final Set<String> impressionPixels) {
+        if (impressionPixels != null) {
+            mMoatImpressionPixels.addAll(impressionPixels);
+        }
+    }
+
     public void setClickThroughUrl(@Nullable final String clickThroughUrl) {
         mClickThroughUrl = clickThroughUrl;
     }
@@ -425,6 +455,21 @@ public VideoViewabilityTracker getVideoViewabilityTracker() {
         return mVideoViewabilityTracker;
     }
 
+    @NonNull
+    public Map<String, String> getExternalViewabilityTrackers() {
+        return mExternalViewabilityTrackers;
+    }
+
+    @NonNull
+    public Set<String> getAvidJavascriptResources() {
+        return mAvidJavascriptResources;
+    }
+
+    @NonNull
+    public Set<String> getMoatImpressionPixels() {
+        return mMoatImpressionPixels;
+    }
+
     public boolean isCustomForceOrientationSet() {
         return mIsForceOrientationSet;
     }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java
index d83b08f5..128282f9 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java
@@ -23,6 +23,8 @@
 import android.widget.RelativeLayout;
 import android.widget.VideoView;
 
+import com.mopub.common.ExternalViewabilitySession.VideoEvent;
+import com.mopub.common.ExternalViewabilitySessionManager;
 import com.mopub.common.IntentActions;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
@@ -31,6 +33,7 @@
 import com.mopub.mobileads.resource.DrawableConstants;
 
 import java.io.Serializable;
+import java.util.Arrays;
 import java.util.Map;
 
 import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
@@ -63,6 +66,7 @@
     private final VastVideoConfig mVastVideoConfig;
 
     @NonNull private final VastVideoView mVideoView;
+    @NonNull private ExternalViewabilitySessionManager mExternalViewabilitySessionManager;
     @NonNull private VastVideoGradientStripWidget mTopGradientStripWidget;
     @NonNull private VastVideoGradientStripWidget mBottomGradientStripWidget;
     @NonNull private ImageView mBlurredLastVideoFrameImageView;
@@ -139,6 +143,8 @@
             @Override
             public boolean onTouch(View view, MotionEvent motionEvent) {
                 if (motionEvent.getAction() == MotionEvent.ACTION_UP && shouldAllowClickThrough()) {
+                    mExternalViewabilitySessionManager.recordVideoEvent(VideoEvent.AD_CLICK_THRU,
+                            getCurrentPosition());
                     mIsClosing = true;
                     broadcastAction(IntentActions.ACTION_INTERSTITIAL_CLICK);
                     mVastVideoConfig.handleClickForResult(activity,
@@ -162,6 +168,11 @@ public boolean onTouch(View view, MotionEvent motionEvent) {
         mVideoView = createVideoView(activity, View.VISIBLE);
         mVideoView.requestFocus();
 
+        // Viewability measurements
+        mExternalViewabilitySessionManager = new ExternalViewabilitySessionManager(activity);
+        mExternalViewabilitySessionManager.createVideoSession(activity, mVideoView,
+                mVastVideoConfig);
+
         // Companion ad view, set to invisible initially to have it be drawn to calculate size
         mLandscapeCompanionAdView = createCompanionAdView(activity,
                 mVastVideoConfig.getVastCompanionAd(Configuration.ORIENTATION_LANDSCAPE),
@@ -210,6 +221,10 @@ public void onGlobalLayout() {
         // Always add last to layout since it must be visible above all other views
         addCloseButtonWidget(activity, View.GONE);
 
+        mExternalViewabilitySessionManager.registerVideoObstructions(Arrays.asList(
+                mTopGradientStripWidget, mProgressBarWidget, mBottomGradientStripWidget,
+                mRadialCountdownWidget, mCtaButtonWidget, mSocialActionsView, mCloseButtonWidget));
+
         Handler mainHandler = new Handler(Looper.getMainLooper());
         mProgressCheckerRunnable = new VastVideoViewProgressRunnable(this, mVastVideoConfig,
                 mainHandler);
@@ -271,8 +286,12 @@ protected void onResume() {
         startRunnables();
 
         if (mSeekerPositionOnPause > 0) {
+            mExternalViewabilitySessionManager.recordVideoEvent(VideoEvent.AD_PLAYING, mSeekerPositionOnPause);
             mVideoView.seekTo(mSeekerPositionOnPause);
+        } else {
+            mExternalViewabilitySessionManager.recordVideoEvent(VideoEvent.AD_LOADED, getCurrentPosition());
         }
+
         if (!mIsVideoFinishedPlaying) {
             mVideoView.start();
         }
@@ -287,6 +306,7 @@ protected void onPause() {
         mSeekerPositionOnPause = getCurrentPosition();
         mVideoView.pause();
         if (!mIsVideoFinishedPlaying && !mIsClosing) {
+            mExternalViewabilitySessionManager.recordVideoEvent(VideoEvent.AD_PAUSED, getCurrentPosition());
             mVastVideoConfig.handlePause(getContext(), mSeekerPositionOnPause);
         }
     }
@@ -294,6 +314,8 @@ protected void onPause() {
     @Override
     protected void onDestroy() {
         stopRunnables();
+        mExternalViewabilitySessionManager.recordVideoEvent(VideoEvent.AD_STOPPED, getCurrentPosition());
+        mExternalViewabilitySessionManager.endVideoSession();
         broadcastAction(IntentActions.ACTION_INTERSTITIAL_DISMISS);
 
         mVideoView.onDestroy();
@@ -325,7 +347,11 @@ protected void onConfigurationChanged(final Configuration newConfig) {
     }
 
     @Override
-    protected void onBackPressed() { }
+    protected void onBackPressed() {
+        if (!mIsVideoFinishedPlaying) {
+            mExternalViewabilitySessionManager.recordVideoEvent(VideoEvent.AD_SKIPPED, getCurrentPosition());
+        }
+    }
 
     // Enable the device's back button when the video close button has been displayed
     @Override
@@ -377,6 +403,7 @@ public void onPrepared(MediaPlayer mp) {
                 // The VideoView duration defaults to -1 when the video is not prepared or playing;
                 // Therefore set it here so that we have access to it at all times
                 mDuration = mVideoView.getDuration();
+                mExternalViewabilitySessionManager.onVideoPrepared(getLayout(), mDuration);
                 adjustSkipOffset();
                 if (mVastCompanionAdConfig == null || mHasSocialActions) {
                     videoView.prepareBlurredLastVideoFrame(mBlurredLastVideoFrameImageView,
@@ -394,7 +421,6 @@ public void onPrepared(MediaPlayer mp) {
             public void onCompletion(MediaPlayer mp) {
                 stopRunnables();
                 makeVideoInteractable();
-
                 videoCompleted(false);
                 mIsVideoFinishedPlaying = true;
                 if (mVastVideoConfig.isRewardedVideo()) {
@@ -404,6 +430,7 @@ public void onCompletion(MediaPlayer mp) {
                 // Only fire the completion tracker if we hit all the progress marks. Some Android implementations
                 // fire the completion event even if the whole video isn't watched.
                 if (!mVideoError && mVastVideoConfig.getRemainingProgressTrackerCount() == 0) {
+                    mExternalViewabilitySessionManager.recordVideoEvent(VideoEvent.AD_COMPLETE, getCurrentPosition());
                     mVastVideoConfig.handleComplete(getContext(), getCurrentPosition());
                 }
 
@@ -446,6 +473,8 @@ public void onCompletion(MediaPlayer mp) {
         videoView.setOnErrorListener(new MediaPlayer.OnErrorListener() {
             @Override
             public boolean onError(final MediaPlayer mediaPlayer, final int what, final int extra) {
+                mExternalViewabilitySessionManager.recordVideoEvent(VideoEvent.RECORD_AD_ERROR,
+                        getCurrentPosition());
                 stopRunnables();
                 makeVideoInteractable();
                 videoError(false);
@@ -539,6 +568,9 @@ public boolean onTouch(View view, MotionEvent motionEvent) {
                 }
                 if (motionEvent.getAction() == MotionEvent.ACTION_UP) {
                     mIsClosing = true;
+                    if (!mIsVideoFinishedPlaying) {
+                        mExternalViewabilitySessionManager.recordVideoEvent(VideoEvent.AD_SKIPPED, getCurrentPosition());
+                    }
                     mVastVideoConfig.handleClose(getContext(), currentPosition);
                     getBaseVideoViewControllerListener().onFinish();
                 }
@@ -788,6 +820,12 @@ void handleIconDisplay(int currentPosition) {
         }
     }
 
+    void handleViewabilityQuartileEvent(@NonNull final String enumValue) {
+        final VideoEvent videoEvent = Enum.valueOf(VideoEvent.class, enumValue);
+
+        mExternalViewabilitySessionManager.recordVideoEvent(videoEvent, getCurrentPosition());
+    }
+
     private boolean shouldAllowClickThrough() {
         return mShowCloseButtonEventFired;
     }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java
index d7abf6c3..3e9e8970 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java
@@ -3,7 +3,9 @@
 import android.os.Handler;
 import android.support.annotation.NonNull;
 
+import com.mopub.common.ExternalViewabilitySession.VideoEvent;
 import com.mopub.common.Preconditions;
+import com.mopub.mobileads.VastTracker.MessageType;
 import com.mopub.network.TrackingRequest;
 
 import java.util.ArrayList;
@@ -27,6 +29,21 @@ public VastVideoViewProgressRunnable(@NonNull VastVideoViewController videoViewC
         Preconditions.checkNotNull(vastVideoConfig);
         mVideoViewController = videoViewController;
         mVastVideoConfig = vastVideoConfig;
+
+        // Keep track of quartile measurement for ExternalViewabilitySessions
+        final List<VastFractionalProgressTracker> trackers =
+                new ArrayList<VastFractionalProgressTracker>();
+        trackers.add(new VastFractionalProgressTracker(MessageType.QUARTILE_EVENT,
+                VideoEvent.AD_STARTED.name(), 0f));
+        trackers.add(new VastFractionalProgressTracker(MessageType.QUARTILE_EVENT,
+                VideoEvent.AD_IMPRESSED.name(), 0f));
+        trackers.add(new VastFractionalProgressTracker(MessageType.QUARTILE_EVENT,
+                VideoEvent.AD_VIDEO_FIRST_QUARTILE.name(), 0.25f));
+        trackers.add(new VastFractionalProgressTracker(MessageType.QUARTILE_EVENT,
+                VideoEvent.AD_VIDEO_MIDPOINT.name(), 0.5f));
+        trackers.add(new VastFractionalProgressTracker(MessageType.QUARTILE_EVENT,
+                VideoEvent.AD_VIDEO_THIRD_QUARTILE.name(), 0.75f));
+        mVastVideoConfig.addFractionalTrackers(trackers);
     }
 
     @Override
@@ -42,7 +59,11 @@ public void doWork() {
             if (!trackersToTrack.isEmpty()) {
                 final List<String> trackUrls = new ArrayList<String>();
                 for (VastTracker tracker : trackersToTrack) {
-                    trackUrls.add(tracker.getTrackingUrl());
+                    if (tracker.getMessageType() == MessageType.TRACKING_URL) {
+                        trackUrls.add(tracker.getContent());
+                    } else if (tracker.getMessageType() == MessageType.QUARTILE_EVENT) {
+                        mVideoViewController.handleViewabilityQuartileEvent(tracker.getContent());
+                    }
                     tracker.setTracked();
                 }
                 TrackingRequest.makeTrackingHttpRequest(
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java
index 5f024d94..e646cae9 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java
@@ -31,6 +31,7 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 
 import static com.mopub.network.TrackingRequest.makeVastTrackingHttpRequest;
 
@@ -234,6 +235,7 @@ VastVideoConfig evaluateVastXmlManager(@NonNull final String vastXml,
                     populateLinearTrackersAndIcon(linearXmlManager, vastVideoConfig);
                 }
                 populateVideoViewabilityTracker(vastWrapperXmlManager, vastVideoConfig);
+                populateViewabilityMetadata(vastWrapperXmlManager, vastVideoConfig);
 
                 final List<VastCompanionAdXmlManager> companionAdXmlManagers =
                         vastWrapperXmlManager.getCompanionAdXmlManagers();
@@ -328,6 +330,7 @@ private VastVideoConfig evaluateInLineXmlManager(
                 errorTrackers.addAll(vastInLineXmlManager.getErrorTrackers());
                 vastVideoConfig.addErrorTrackers(errorTrackers);
                 populateVideoViewabilityTracker(vastInLineXmlManager, vastVideoConfig);
+                populateViewabilityMetadata(vastInLineXmlManager, vastVideoConfig);
 
                 return vastVideoConfig;
             }
@@ -361,6 +364,26 @@ private void populateVideoViewabilityTracker(
         }
     }
 
+    private void populateViewabilityMetadata(
+            @NonNull final VastBaseInLineWrapperXmlManager vastInLineXmlManager,
+            @NonNull VastVideoConfig vastVideoConfig) {
+        final VastExtensionParentXmlManager vastExtensionParentXmlManager =
+                vastInLineXmlManager.getVastExtensionParentXmlManager();
+        if (vastExtensionParentXmlManager != null) {
+            final List<VastExtensionXmlManager> vastExtensionXmlManagers =
+                    vastExtensionParentXmlManager.getVastExtensionXmlManagers();
+            for (VastExtensionXmlManager vastExtensionXmlManager : vastExtensionXmlManagers) {
+                if (vastExtensionXmlManager != null) {
+                    final Set<String> avid = vastExtensionXmlManager.getAvidJavaScriptResources();
+                    vastVideoConfig.addAvidJavascriptResources(avid);
+
+                    final Set<String> moat = vastExtensionXmlManager.getMoatImpressionPixels();
+                    vastVideoConfig.addMoatImpressionPixels(moat);
+                }
+            }
+        }
+    }
+
     /**
      * Retrieves the Wrapper's redirect uri and follows it to return the next VAST xml String.
      *
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
index 975b69cb..e1d2cb3d 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
@@ -6,6 +6,8 @@
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.Constants;
 
+import static com.mopub.common.ExternalViewabilitySessionManager.ViewabilityVendor;
+
 public class WebViewAdUrlGenerator extends AdUrlGenerator {
     private final boolean mIsStorePictureSupported;
 
@@ -27,6 +29,8 @@ public String generateUrlString(String serverHostname) {
 
         setExternalStoragePermission(mIsStorePictureSupported);
 
+        enableViewability(ViewabilityVendor.getEnabledVendorKey());
+
         return getFinalUrlString();
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewCacheService.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewCacheService.java
new file mode 100644
index 00000000..1cbb4a40
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewCacheService.java
@@ -0,0 +1,170 @@
+package com.mopub.mobileads;
+
+import android.annotation.SuppressLint;
+import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.ExternalViewabilitySessionManager;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+
+import java.lang.ref.WeakReference;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+
+import static com.mopub.common.Constants.FIFTEEN_MINUTES_MILLIS;
+
+/**
+ * Holds WebViews in memory until they are used.
+ */
+public class WebViewCacheService {
+    public static class Config {
+        @NonNull
+        private final BaseWebView mWebView;
+        @NonNull
+        private final WeakReference<Interstitial> mWeakInterstitial;
+        @NonNull
+        private final ExternalViewabilitySessionManager mViewabilityManager;
+
+        Config(@NonNull final BaseWebView baseWebView,
+                @NonNull final Interstitial baseInterstitial,
+                @NonNull final ExternalViewabilitySessionManager viewabilityManager) {
+            mWebView = baseWebView;
+            mWeakInterstitial = new WeakReference<Interstitial>(baseInterstitial);
+            mViewabilityManager = viewabilityManager;
+        }
+
+        @NonNull
+        public BaseWebView getWebView() {
+            return mWebView;
+        }
+
+        @NonNull
+        public WeakReference<Interstitial> getWeakInterstitial() {
+            return mWeakInterstitial;
+        }
+
+        @NonNull
+        public ExternalViewabilitySessionManager getViewabilityManager() {
+            return mViewabilityManager;
+        }
+    }
+
+    /**
+     * Maximum number of {@link BaseWebView}s that are cached. This limit is intended to be very
+     * conservative; it is not recommended to cache more than a few BaseWebViews.
+     */
+    @VisibleForTesting
+    static final int MAX_SIZE = 50;
+
+    /**
+     * Trim the cache at least this frequently. Trimming only removes a {@link Config}s when its
+     * associated {@link Interstitial} is no longer in memory. The cache is also
+     * trimmed every time {@link #storeWebViewConfig(Long, Interstitial, BaseWebView, ExternalViewabilitySessionManager)} is called.
+     */
+    @VisibleForTesting
+    static final long TRIM_CACHE_FREQUENCY_MILLIS = FIFTEEN_MINUTES_MILLIS;
+
+    @SuppressLint("UseSparseArrays")
+    @NonNull
+    private static final Map<Long, Config> sWebViewConfigs =
+            Collections.synchronizedMap(new HashMap<Long, Config>());
+
+    @VisibleForTesting
+    @NonNull
+    static final TrimCacheRunnable sTrimCacheRunnable = new TrimCacheRunnable();
+    @NonNull
+    private static Handler sHandler = new Handler();
+
+    private WebViewCacheService() {
+    }
+
+    /**
+     * Stores the {@link BaseWebView} in the cache. This WebView will live until it is retrieved via
+     * {@link #popWebViewConfig(Long)} or when the base interstitial object is removed from memory.
+     *
+     * @param broadcastIdentifier The unique identifier associated with both the interstitial and the WebView
+     * @param baseInterstitial    The interstitial managing this WebView
+     * @param baseWebView         The BaseWebView to be stored
+     * @param viewabilityManager  The associated viewability manager, which needs to be created
+     *                            during Interstitial load and reutilized on show
+     */
+    @VisibleForTesting
+    public static void storeWebViewConfig(@NonNull final Long broadcastIdentifier,
+            @NonNull final Interstitial baseInterstitial,
+            @NonNull final BaseWebView baseWebView,
+            @NonNull final ExternalViewabilitySessionManager viewabilityManager) {
+        Preconditions.checkNotNull(broadcastIdentifier);
+        Preconditions.checkNotNull(baseInterstitial);
+        Preconditions.checkNotNull(baseWebView);
+
+        trimCache();
+        // Ignore request when max size is reached.
+        if (sWebViewConfigs.size() >= MAX_SIZE) {
+            MoPubLog.w(
+                    "Unable to cache web view. Please destroy some via MoPubInterstitial#destroy() and try again.");
+            return;
+        }
+
+        sWebViewConfigs.put(broadcastIdentifier,
+                new Config(baseWebView, baseInterstitial, viewabilityManager));
+    }
+
+    @Nullable
+    public static Config popWebViewConfig(@NonNull final Long broadcastIdentifier) {
+        Preconditions.checkNotNull(broadcastIdentifier);
+
+        return sWebViewConfigs.remove(broadcastIdentifier);
+    }
+
+    @VisibleForTesting
+    static synchronized void trimCache() {
+        final Iterator<Map.Entry<Long, Config>> iterator = sWebViewConfigs.entrySet().iterator();
+        while (iterator.hasNext()) {
+            final Map.Entry<Long, Config> entry = iterator.next();
+
+            // If the Interstitial was removed from memory, end viewability manager tracking and
+            // discard the entire associated Config.
+            if (entry.getValue().getWeakInterstitial().get() == null) {
+                entry.getValue().getViewabilityManager().endDisplaySession();
+                iterator.remove();
+            }
+        }
+
+        if (!sWebViewConfigs.isEmpty()) {
+            sHandler.removeCallbacks(sTrimCacheRunnable);
+            sHandler.postDelayed(sTrimCacheRunnable, TRIM_CACHE_FREQUENCY_MILLIS);
+        }
+    }
+
+    private static class TrimCacheRunnable implements Runnable {
+        @Override
+        public void run() {
+            trimCache();
+        }
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    public static void clearAll() {
+        sWebViewConfigs.clear();
+        sHandler.removeCallbacks(sTrimCacheRunnable);
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    @NonNull
+    static Map<Long, Config> getWebViewConfigs() {
+        return sWebViewConfigs;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    static void setHandler(@NonNull final Handler handler) {
+        sHandler = handler;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
index 227e1c77..834483a9 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
@@ -25,18 +25,20 @@
 import android.widget.FrameLayout.LayoutParams;
 
 import com.mopub.common.AdReport;
+import com.mopub.common.ExternalViewabilitySessionManager;
+import com.mopub.common.UrlHandler;
 import com.mopub.common.CloseableLayout;
 import com.mopub.common.CloseableLayout.ClosePosition;
 import com.mopub.common.CloseableLayout.OnCloseListener;
 import com.mopub.common.Preconditions;
 import com.mopub.common.UrlAction;
-import com.mopub.common.UrlHandler;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.DeviceUtils;
 import com.mopub.common.util.Dips;
 import com.mopub.common.util.Views;
 import com.mopub.mobileads.MraidVideoPlayerActivity;
+import com.mopub.mobileads.WebViewCacheService;
 import com.mopub.mobileads.util.WebViews;
 import com.mopub.mraid.MraidBridge.MraidBridgeListener;
 import com.mopub.mraid.MraidBridge.MraidWebView;
@@ -63,6 +65,10 @@
         public void useCustomCloseChanged(boolean useCustomClose);
     }
 
+    public interface MraidWebViewCacheListener {
+        void onReady(final MraidWebView webView, final ExternalViewabilitySessionManager viewabilityManager);
+    }
+
     /**
      * Holds a weak reference to the activity if the context that is passed in is an activity.
      * While this field is never null, the reference could become null. This reference starts out
@@ -326,16 +332,69 @@ public void setDebugListener(@Nullable MraidWebViewDebugListener debugListener)
         mDebugListener = debugListener;
     }
 
-    public void loadContent(@NonNull String htmlData) {
-        Preconditions.checkState(mMraidWebView == null, "loadContent should only be called once");
+    /**
+     * Gets an MraidWebView and fills it with data. In the case that the MraidWebView is retrieved
+     * from the cache, this also notifies that the ad has been loaded. If the broadcast identifier
+     * is null or there is a cache miss, a new MraidWebView is created and is filled with htmlData.
+     * @param broadcastIdentifier The unique identifier of an interstitial. This can be null,
+     *                            especially when there is no interstitial.
+     * @param htmlData            The HTML of the ad. This will only be loaded if a cached WebView
+     *                            is not found.
+     * @param listener            Optional listener that (if non-null) is notified when an
+     *                            MraidWebView is loaded from the cache or created.
+     */
+    public void fillContent(@Nullable final Long broadcastIdentifier,
+            @NonNull final String htmlData,
+            @Nullable final MraidWebViewCacheListener listener) {
+        Preconditions.checkNotNull(htmlData, "htmlData cannot be null");
+
+        final boolean cacheHit = hydrateMraidWebView(broadcastIdentifier, listener);
+        Preconditions.NoThrow.checkNotNull(mMraidWebView, "mMraidWebView cannot be null");
 
-        mMraidWebView = new MraidWebView(mContext);
         mMraidBridge.attachView(mMraidWebView);
         mDefaultAdContainer.addView(mMraidWebView,
                 new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
 
-        // onPageLoaded gets fired once the html is loaded into the webView
-        mMraidBridge.setContentHtml(htmlData);
+        // If the WebView was retrieved from the cache, notify that the ad is already loaded.
+        if (cacheHit) {
+            handlePageLoad();
+        } else {
+            // Otherwise, load the content into the MraidWebView
+            mMraidBridge.setContentHtml(htmlData);
+        }
+    }
+
+    /**
+     * Gets and sets the MraidWebView. Returns true if the MraidWebView was from the cache, and
+     * false if a new one was created. If the broadcast identifier is {@code null}, then this
+     * will always return false and create a new MraidWebView.
+     *
+     * @param broadcastIdentifier The unique identifier associated with the MraidWebView in the cache.
+     * @param listener            Listener passed in from {@link #fillContent(Long, String, MraidWebViewCacheListener)}
+     * @return {@code true} if there was a cache hit, {@code false} if a new MraidWebView was created.
+     */
+    private boolean hydrateMraidWebView(@Nullable final Long broadcastIdentifier,
+            @Nullable final MraidWebViewCacheListener listener) {
+        if (broadcastIdentifier != null) {
+            final WebViewCacheService.Config config =
+                    WebViewCacheService.popWebViewConfig(broadcastIdentifier);
+            if (config != null && config.getWebView() instanceof MraidWebView) {
+                mMraidWebView = (MraidWebView) config.getWebView();
+                mMraidWebView.enablePlugins(true);
+
+                if (listener != null) {
+                    listener.onReady(mMraidWebView, config.getViewabilityManager());
+                }
+                return true;
+            }
+        }
+        MoPubLog.d("WebView cache miss. Creating a new MraidWebView.");
+        mMraidWebView = new MraidWebView(mContext);
+
+        if (listener != null) {
+            listener.onReady(mMraidWebView, null);
+        }
+        return false;
     }
 
     // onPageLoaded gets fired once the html is loaded into the webView.
@@ -438,7 +497,7 @@ void cancelLastRequest() {
     }
 
     @Nullable
-    private View getCurrentWebView() {
+    public MraidWebView getCurrentWebView() {
         return mTwoPartBridge.isAttached() ? mTwoPartWebView : mMraidWebView;
     }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
index a5b423e2..f8c4dbbe 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
@@ -38,6 +38,7 @@
 import java.util.Map;
 import java.util.TreeMap;
 
+import static com.mopub.common.ExternalViewabilitySessionManager.ViewabilityVendor;
 import static com.mopub.network.HeaderUtils.extractBooleanHeader;
 import static com.mopub.network.HeaderUtils.extractHeader;
 import static com.mopub.network.HeaderUtils.extractIntegerHeader;
@@ -108,6 +109,7 @@ public Listener getListener() {
         // error listener.
 
         Map<String, String> headers = networkResponse.headers;
+
         if (extractBooleanHeader(headers, ResponseHeader.WARMUP, false)) {
             return Response.error(new MoPubNetworkError("Ad Unit is warming up.", MoPubNetworkError.Reason.WARMING_UP));
         }
@@ -272,6 +274,23 @@ public Listener getListener() {
         if (videoTrackers != null) {
             serverExtras.put(DataKeys.VIDEO_TRACKERS_KEY, videoTrackers);
         }
+        if (AdType.REWARDED_VIDEO.equals(adTypeString) ||
+                (AdType.INTERSTITIAL.equals(adTypeString) &&
+                        FullAdType.VAST.equals(fullAdTypeString))) {
+            serverExtras.put(DataKeys.EXTERNAL_VIDEO_VIEWABILITY_TRACKERS_KEY,
+                    extractHeader(headers, ResponseHeader.VIDEO_VIEWABILITY_TRACKERS));
+        }
+
+        // Disable viewability vendors, if any
+        final String disabledViewabilityVendors = extractHeader(headers,
+                ResponseHeader.DISABLE_VIEWABILITY);
+        if (!TextUtils.isEmpty(disabledViewabilityVendors)) {
+            final ViewabilityVendor disabledVendors =
+                    ViewabilityVendor.fromKey(disabledViewabilityVendors);
+            if (disabledVendors != null) {
+                disabledVendors.disable();
+            }
+        }
 
         builder.setServerExtras(serverExtras);
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java
index 67309a7a..f55a88fa 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java
@@ -129,17 +129,19 @@ public static String getUserAgent(@NonNull Context context) {
             synchronized (Networking.class) {
                 userAgent = sUserAgent;
                 if (userAgent == null) {
-                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
-                        userAgent = WebSettings.getDefaultUserAgent(context);
-                    } else if (Looper.myLooper() == Looper.getMainLooper()){
-                        // WebViews may only be instantiated on the UI thread. If anything goes
-                        // wrong with getting a user agent, use the system-specific user agent.
-                        try {
+                    try {
+                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+                            userAgent = WebSettings.getDefaultUserAgent(context);
+                        } else if (Looper.myLooper() == Looper.getMainLooper()) {
+                            // WebViews may only be instantiated on the UI thread. If anything goes
+                            // wrong with getting a user agent, use the system-specific user agent.
                             userAgent = new WebView(context).getSettings().getUserAgentString();
-                        } catch (Exception e) {
+                        } else {
                             userAgent = DEFAULT_USER_AGENT;
                         }
-                    } else {
+                    } catch (Exception e) {
+                        // Some custom ROMs may fail to get a user agent. If that happens, return
+                        // the Android system user agent.
                         userAgent = DEFAULT_USER_AGENT;
                     }
                     sUserAgent = userAgent;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/TrackingRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/TrackingRequest.java
index 7d310976..aa13cdf2 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/TrackingRequest.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/TrackingRequest.java
@@ -82,7 +82,7 @@ public static void makeVastTrackingHttpRequest(
             if (vastTracker.isTracked() && !vastTracker.isRepeatable()) {
                 continue;
             }
-            trackers.add(vastTracker.getTrackingUrl());
+            trackers.add(vastTracker.getContent());
             vastTracker.setTracked();
         }
 
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
index 22e62819..55ec4bb1 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
@@ -13,7 +13,7 @@
  * At runtime, the MoPub SDK will find and instantiate a CustomEventInterstitial subclass as needed
  * and invoke its loadInterstitial() method.
  */
-public abstract class CustomEventInterstitial {
+public abstract class CustomEventInterstitial implements Interstitial {
     
     /*
      * When the MoPub SDK receives a response indicating it should load a custom event, it will send
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
index 47feb16c..73c57c5c 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
@@ -31,6 +31,7 @@
     private Context mContext;
     private Map<String, Object> mLocalExtras;
     private Map<String, String> mServerExtras;
+    private long mBroadcastIdentifier;
     private final Handler mHandler;
     private final Runnable mTimeout;
 
@@ -42,6 +43,7 @@ public CustomEventInterstitialAdapter(@NonNull final MoPubInterstitial moPubInte
         Preconditions.checkNotNull(serverExtras);
         mHandler = new Handler();
         mMoPubInterstitial = moPubInterstitial;
+        mBroadcastIdentifier = broadcastIdentifier;
         mContext = mMoPubInterstitial.getActivity();
         mTimeout = new Runnable() {
             @Override
@@ -118,6 +120,11 @@ void invalidate() {
         mServerExtras = null;
         mLocalExtras = null;
         mCustomEventInterstitialAdapterListener = null;
+        final WebViewCacheService.Config config =
+                WebViewCacheService.popWebViewConfig(mBroadcastIdentifier);
+        if (config != null) {
+            config.getWebView().destroy();
+        }
         mInvalidated = true;
     }
 
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
index f0643055..370b2fe0 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
@@ -31,7 +31,8 @@ protected void extractExtras(Map<String, String> serverExtras) {
 
     @Override
     protected void preRenderHtml(CustomEventInterstitialListener customEventInterstitialListener) {
-        MoPubActivity.preRenderHtml(mContext, mAdReport, customEventInterstitialListener, mHtmlData);
+        MoPubActivity.preRenderHtml(this, mContext, mAdReport, customEventInterstitialListener, mHtmlData,
+                mIsScrollable, mRedirectUrl, mClickthroughUrl, mBroadcastIdentifier);
     }
 
     @Override
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java
index 649ea18f..886624a9 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java
@@ -4,6 +4,7 @@
 import android.content.Context;
 import android.content.Intent;
 import android.os.Bundle;
+import android.support.annotation.Nullable;
 import android.util.Log;
 import android.view.View;
 import android.webkit.WebView;
@@ -12,6 +13,8 @@
 import com.mopub.common.AdReport;
 import com.mopub.common.CreativeOrientation;
 import com.mopub.common.DataKeys;
+import com.mopub.common.ExternalViewabilitySessionManager;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.DeviceUtils;
 import com.mopub.mobileads.factories.HtmlInterstitialWebViewFactory;
 
@@ -24,19 +27,20 @@
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.common.DataKeys.REDIRECT_URL_KEY;
 import static com.mopub.common.DataKeys.SCROLLABLE_KEY;
-import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
-import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
-import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
+import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
+import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
 import static com.mopub.mobileads.HtmlWebViewClient.MOPUB_FAIL_LOAD;
 import static com.mopub.mobileads.HtmlWebViewClient.MOPUB_FINISH_LOAD;
 
 public class MoPubActivity extends BaseInterstitialActivity {
-    private HtmlInterstitialWebView mHtmlInterstitialWebView;
+    @Nullable private HtmlInterstitialWebView mHtmlInterstitialWebView;
+    @Nullable private ExternalViewabilitySessionManager mExternalViewabilitySessionManager;
 
     public static void start(Context context, String htmlData, AdReport adReport,
             boolean isScrollable, String redirectUrl, String clickthroughUrl,
@@ -65,16 +69,23 @@ static Intent createIntent(Context context,
         return intent;
     }
 
-    static void preRenderHtml(final Context context, final AdReport adReport,
+    static void preRenderHtml(final Interstitial baseInterstitial,
+            final Context context,
+            final AdReport adReport,
             final CustomEventInterstitialListener customEventInterstitialListener,
-            final String htmlData) {
-        final HtmlInterstitialWebView dummyWebView = HtmlInterstitialWebViewFactory.create(context,
-                adReport, customEventInterstitialListener, false, null, null);
-
-        dummyWebView.enablePlugins(false);
-        dummyWebView.enableJavascriptCaching();
-
-        dummyWebView.setWebViewClient(new WebViewClient() {
+            final String htmlData,
+            final boolean isScrollable,
+            final String redirectUrl,
+            final String clickthroughUrl,
+            final long broadcastIdentifier) {
+        final HtmlInterstitialWebView htmlInterstitialWebView = HtmlInterstitialWebViewFactory.create(
+                context.getApplicationContext(), adReport, customEventInterstitialListener,
+                isScrollable, redirectUrl, clickthroughUrl);
+
+        htmlInterstitialWebView.enablePlugins(false);
+        htmlInterstitialWebView.enableJavascriptCaching();
+
+        htmlInterstitialWebView.setWebViewClient(new WebViewClient() {
             @Override
             public boolean shouldOverrideUrlLoading(WebView view, String url) {
                 if (MOPUB_FINISH_LOAD.equals(url)) {
@@ -86,7 +97,14 @@ public boolean shouldOverrideUrlLoading(WebView view, String url) {
                 return true;
             }
         });
-        dummyWebView.loadHtmlResponse(htmlData);
+
+        final ExternalViewabilitySessionManager externalViewabilitySessionManager =
+                new ExternalViewabilitySessionManager(context);
+        externalViewabilitySessionManager.createDisplaySession(context, htmlInterstitialWebView, true);
+
+        htmlInterstitialWebView.loadHtmlResponse(htmlData);
+        WebViewCacheService.storeWebViewConfig(broadcastIdentifier, baseInterstitial,
+                htmlInterstitialWebView, externalViewabilitySessionManager);
     }
 
     @Override
@@ -97,9 +115,33 @@ public View getAdView() {
         String clickthroughUrl = intent.getStringExtra(CLICKTHROUGH_URL_KEY);
         String htmlResponse = intent.getStringExtra(HTML_RESPONSE_BODY_KEY);
 
-        mHtmlInterstitialWebView = HtmlInterstitialWebViewFactory.create(getApplicationContext(), mAdReport, new BroadcastingInterstitialListener(), isScrollable, redirectUrl, clickthroughUrl);
-        mHtmlInterstitialWebView.loadHtmlResponse(htmlResponse);
+        final Long broadcastIdentifier = getBroadcastIdentifier();
+        if (broadcastIdentifier != null) {
+            // If a cache hit happens, the content is already loaded; therefore, this re-initializes
+            // the WebView with a new {@link BroadcastingInterstitialListener}, enables plugins,
+            // and fires the impression tracker.
+            final WebViewCacheService.Config config =
+                    WebViewCacheService.popWebViewConfig(broadcastIdentifier);
+            if (config != null && config.getWebView() instanceof HtmlInterstitialWebView) {
+                mHtmlInterstitialWebView = (HtmlInterstitialWebView) config.getWebView();
+                mHtmlInterstitialWebView.init(new BroadcastingInterstitialListener(), isScrollable,
+                        redirectUrl, clickthroughUrl, mAdReport != null ? mAdReport.getDspCreativeId(): null);
+                mHtmlInterstitialWebView.enablePlugins(true);
+                mHtmlInterstitialWebView.loadUrl(WEB_VIEW_DID_APPEAR.getUrl());
+
+                mExternalViewabilitySessionManager = config.getViewabilityManager();
+
+                return mHtmlInterstitialWebView;
+            }
+        }
 
+        MoPubLog.d("WebView cache miss. Recreating the WebView.");
+        mHtmlInterstitialWebView = HtmlInterstitialWebViewFactory.create(getApplicationContext(),
+                mAdReport, new BroadcastingInterstitialListener(), isScrollable, redirectUrl, clickthroughUrl);
+        
+        mExternalViewabilitySessionManager = new ExternalViewabilitySessionManager(this);
+        mExternalViewabilitySessionManager.createDisplaySession(this, mHtmlInterstitialWebView, true);
+        mHtmlInterstitialWebView.loadHtmlResponse(htmlResponse);
         return mHtmlInterstitialWebView;
     }
 
@@ -116,13 +158,23 @@ protected void onCreate(Bundle savedInstanceState) {
             requestedOrientation = (CreativeOrientation) orientationExtra;
         }
         DeviceUtils.lockOrientation(this, requestedOrientation);
+
+        if (mExternalViewabilitySessionManager != null) {
+            mExternalViewabilitySessionManager.startDeferredDisplaySession(this);
+        }
         broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_SHOW);
     }
 
     @Override
     protected void onDestroy() {
-        mHtmlInterstitialWebView.loadUrl(WEB_VIEW_DID_CLOSE.getUrl());
-        mHtmlInterstitialWebView.destroy();
+        if (mHtmlInterstitialWebView != null) {
+            mHtmlInterstitialWebView.loadUrl(WEB_VIEW_DID_CLOSE.getUrl());
+            mHtmlInterstitialWebView.destroy();
+        }
+        if (mExternalViewabilitySessionManager != null) {
+            mExternalViewabilitySessionManager.endDisplaySession();
+            mExternalViewabilitySessionManager = null;
+        }
         broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_DISMISS);
         super.onDestroy();
     }
@@ -130,7 +182,9 @@ protected void onDestroy() {
     class BroadcastingInterstitialListener implements CustomEventInterstitialListener {
         @Override
         public void onInterstitialLoaded() {
-            mHtmlInterstitialWebView.loadUrl(WEB_VIEW_DID_APPEAR.getUrl());
+            if (mHtmlInterstitialWebView != null) {
+                mHtmlInterstitialWebView.loadUrl(WEB_VIEW_DID_APPEAR.getUrl());
+            }
         }
 
         @Override
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
index e2f86bd6..bb9b44c4 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
@@ -13,9 +13,12 @@
 
 import com.mopub.common.AdReport;
 import com.mopub.common.Constants;
+import com.mopub.common.ExternalViewabilitySessionManager;
+import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
+import com.mopub.mraid.MraidBridge;
 import com.mopub.mraid.MraidController;
 import com.mopub.mraid.MraidController.MraidListener;
 import com.mopub.mraid.MraidController.UseCustomCloseListener;
@@ -34,38 +37,54 @@
 import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
 import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
+import static com.mopub.mobileads.HtmlWebViewClient.MOPUB_FAIL_LOAD;
 
 public class MraidActivity extends BaseInterstitialActivity {
     @Nullable private MraidController mMraidController;
     @Nullable private MraidWebViewDebugListener mDebugListener;
+    @Nullable private ExternalViewabilitySessionManager mExternalViewabilitySessionManager;
 
-    public static void preRenderHtml(@NonNull final Context context,
+    public static void preRenderHtml(@NonNull final Interstitial mraidInterstitial,
+            @NonNull final Context context,
             @NonNull final CustomEventInterstitialListener customEventInterstitialListener,
-            @Nullable final String htmlData) {
-        preRenderHtml(customEventInterstitialListener, htmlData, new BaseWebView(context));
+            @Nullable final String htmlData,
+            @NonNull final Long broadcastIdentifier) {
+        Preconditions.checkNotNull(mraidInterstitial);
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(customEventInterstitialListener);
+        Preconditions.checkNotNull(broadcastIdentifier);
+
+        preRenderHtml(mraidInterstitial, customEventInterstitialListener, htmlData,
+                new MraidBridge.MraidWebView(context), broadcastIdentifier);
     }
 
     @VisibleForTesting
-    static void preRenderHtml(
+    static void preRenderHtml(@NonNull final Interstitial mraidInterstitial,
             @NonNull final CustomEventInterstitialListener customEventInterstitialListener,
-            @Nullable final String htmlData, @NonNull final BaseWebView dummyWebView) {
-        dummyWebView.enablePlugins(false);
-        dummyWebView.enableJavascriptCaching();
+            @Nullable final String htmlData,
+            @NonNull final BaseWebView mraidWebView,
+            @NonNull final Long broadcastIdentifier) {
+        Preconditions.checkNotNull(mraidInterstitial);
+        Preconditions.checkNotNull(customEventInterstitialListener);
+        Preconditions.checkNotNull(mraidWebView);
+        Preconditions.checkNotNull(broadcastIdentifier);
+
+        mraidWebView.enablePlugins(false);
+        mraidWebView.enableJavascriptCaching();
 
-        dummyWebView.setWebViewClient(new MraidWebViewClient() {
+        mraidWebView.setWebViewClient(new MraidWebViewClient() {
             @Override
             public boolean shouldOverrideUrlLoading(WebView view, String url) {
+                if (MOPUB_FAIL_LOAD.equals(url)) {
+                    customEventInterstitialListener.onInterstitialFailed(
+                            MoPubErrorCode.MRAID_LOAD_ERROR);
+                }
                 return true;
             }
 
             @Override
             public void onPageFinished(final WebView view, final String url) {
                 customEventInterstitialListener.onInterstitialLoaded();
-
-                // can't reuse MraidBridge methods because MraidController is not initialized yet
-                dummyWebView.loadUrl("javascript:mraidbridge.setState('default');");
-                dummyWebView.loadUrl("javascript:mraidbridge.notifyReadyEvent();");
-
             }
 
             @Override
@@ -78,8 +97,14 @@ public void onReceivedError(final WebView view, final int errorCode,
             }
         });
 
-        dummyWebView.loadDataWithBaseURL(Networking.getBaseUrlScheme() + "://" + Constants.HOST + "/",
+        final Context context = mraidWebView.getContext();
+        final ExternalViewabilitySessionManager externalViewabilitySessionManager =
+                new ExternalViewabilitySessionManager(context);
+        externalViewabilitySessionManager.createDisplaySession(context, mraidWebView, true);
+
+        mraidWebView.loadDataWithBaseURL(Networking.getBaseUrlScheme() + "://" + Constants.HOST + "/",
                 htmlData, "text/html", "UTF-8", null);
+        WebViewCacheService.storeWebViewConfig(broadcastIdentifier, mraidInterstitial, mraidWebView, externalViewabilitySessionManager);
     }
 
     public static void start(@NonNull Context context, @Nullable AdReport adreport, @Nullable String htmlData, long broadcastIdentifier) {
@@ -164,13 +189,30 @@ public void useCustomCloseChanged(boolean useCustomClose) {
             }
         });
 
-        mMraidController.loadContent(htmlData);
+        mMraidController.fillContent(getBroadcastIdentifier(), htmlData,
+                new MraidController.MraidWebViewCacheListener() {
+                    @Override
+                    public void onReady(@NonNull final MraidBridge.MraidWebView webView,
+                            @Nullable final ExternalViewabilitySessionManager viewabilityManager) {
+                        if (viewabilityManager != null) {
+                            mExternalViewabilitySessionManager = viewabilityManager;
+                        } else {
+                            mExternalViewabilitySessionManager = new ExternalViewabilitySessionManager(MraidActivity.this);
+                            mExternalViewabilitySessionManager.createDisplaySession(MraidActivity.this, webView, true);
+                        }
+                    }
+                });
+
         return mMraidController.getAdContainer();
     }
 
     @Override
     public void onCreate(@Nullable Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
+
+        if (mExternalViewabilitySessionManager != null) {
+            mExternalViewabilitySessionManager.startDeferredDisplaySession(this);
+        }
         if (getBroadcastIdentifier()!= null) {
             broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_SHOW);
         }
@@ -201,7 +243,10 @@ protected void onDestroy() {
         if (mMraidController != null) {
             mMraidController.destroy();
         }
-
+        if (mExternalViewabilitySessionManager != null) {
+            mExternalViewabilitySessionManager.endDisplaySession();
+            mExternalViewabilitySessionManager = null;
+        }
         if (getBroadcastIdentifier()!= null) {
             broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_DISMISS);
         }
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
index aa84f691..2bc42b13 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
@@ -3,6 +3,7 @@
 import android.content.Context;
 
 import com.mopub.common.AdReport;
+import com.mopub.common.ExternalViewabilitySessionManager;
 import com.mopub.common.logging.MoPubLog;
 
 import java.util.Map;
@@ -17,6 +18,7 @@
     protected Context mContext;
     protected AdReport mAdReport;
     protected long mBroadcastIdentifier;
+    protected ExternalViewabilitySessionManager mExternalViewabilitySessionManager;
 
     abstract protected void extractExtras(Map<String, String> serverExtras);
     abstract protected void preRenderHtml(CustomEventInterstitialListener customEventInterstitialListener);
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
index d990c8e6..89fcd4ec 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
@@ -6,6 +6,7 @@
 import com.mopub.common.CacheService;
 import com.mopub.common.DataKeys;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Json;
 import com.mopub.mobileads.factories.VastManagerFactory;
 
 import org.json.JSONException;
@@ -19,16 +20,25 @@
     private VastManager mVastManager;
     private VastVideoConfig mVastVideoConfig;
     @Nullable private JSONObject mVideoTrackers;
+    @Nullable private Map<String, String> mExternalViewabilityTrackers;
 
     @Override
     protected void extractExtras(Map<String, String> serverExtras) {
         mVastResponse = serverExtras.get(DataKeys.HTML_RESPONSE_BODY_KEY);
 
+        final String externalViewabilityTrackers =
+                serverExtras.get(DataKeys.EXTERNAL_VIDEO_VIEWABILITY_TRACKERS_KEY);
+        try {
+            mExternalViewabilityTrackers = Json.jsonStringToMap(externalViewabilityTrackers);
+        } catch (JSONException e) {
+            MoPubLog.d("Failed to parse video viewability trackers to JSON: " +
+                    externalViewabilityTrackers);
+        }
+
         final String videoTrackers = serverExtras.get(DataKeys.VIDEO_TRACKERS_KEY);
         if (TextUtils.isEmpty(videoTrackers)) {
             return;
         }
-
         try {
             mVideoTrackers = new JSONObject(videoTrackers);
         } catch (JSONException e) {
@@ -79,6 +89,7 @@ public void onVastVideoConfigurationPrepared(final VastVideoConfig vastVideoConf
 
         mVastVideoConfig = vastVideoConfig;
         mVastVideoConfig.addVideoTrackers(mVideoTrackers);
+        mVastVideoConfig.addExternalViewabilityTrackers(mExternalViewabilityTrackers);
         mCustomEventInterstitialListener.onInterstitialLoaded();
     }
 
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java
index b0f5b08d..34ecd599 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java
@@ -22,7 +22,8 @@ protected void extractExtras(Map<String, String> serverExtras) {
     @Override
     protected void preRenderHtml(@NonNull CustomEventInterstitialListener
             customEventInterstitialListener) {
-        MraidActivity.preRenderHtml(mContext, customEventInterstitialListener, mHtmlData);
+        MraidActivity.preRenderHtml(this, mContext, customEventInterstitialListener, mHtmlData,
+                mBroadcastIdentifier);
     }
 
     @Override
diff --git a/mopub-sdk/mopub-sdk-native-static/build.gradle b/mopub-sdk/mopub-sdk-native-static/build.gradle
index 26111f70..8ac48763 100644
--- a/mopub-sdk/mopub-sdk-native-static/build.gradle
+++ b/mopub-sdk/mopub-sdk-native-static/build.gradle
@@ -2,7 +2,7 @@ apply from: '../shared-build.gradle'
 
 dependencies {
     compile project(':mopub-sdk:mopub-sdk-base')
-    compile 'com.android.support:recyclerview-v7:23.1.1'
+    compile 'com.android.support:recyclerview-v7:25.3.1'
 }
 
 project.description = 'MoPub Android SDK - Native Static'
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAd.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAd.java
index afa9e583..2c13abdd 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAd.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAd.java
@@ -32,8 +32,8 @@
  * When you have a {@link NativeAd} instance and wish to show a view you should:
  *
  * 1. Call {@link #createAdView(Context, ViewGroup)} to inflate a {@link View} that can show this ad.
- * 2. Call {@link #renderAdView(View)} with a compatible {@link View} to render the ad data into the view.
- * 3. Just before the ad is shown to the user, call {@link #prepare(View)}.
+ * 2. Just before the ad is shown to the user, call {@link #prepare(View)}.
+ * 3. Call {@link #renderAdView(View)} with a compatible {@link View} to render the ad data into the view.
  * 4. When the ad view is no longer shown to the user, call {@link #clear(View)}. You can later
  *    call {@link #prepare(View)} again if the ad will be shown to users.
  * 5. When the ad will never be shown again, call {@link #destroy()}.
diff --git a/mopub-sdk/mopub-sdk-native-video/build.gradle b/mopub-sdk/mopub-sdk-native-video/build.gradle
index 224045ef..6e83c328 100644
--- a/mopub-sdk/mopub-sdk-native-video/build.gradle
+++ b/mopub-sdk/mopub-sdk-native-video/build.gradle
@@ -2,7 +2,7 @@ apply from: '../shared-build.gradle'
 
 dependencies {
     compile project(':mopub-sdk:mopub-sdk-native-static')
-    compile 'com.google.android.exoplayer:exoplayer:r1.5.6'
+    compile 'com.google.android.exoplayer:exoplayer:r2.4.4'
 }
 
 project.description = 'MoPub Android SDK - Native Video'
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java
index 069bf59a..1bbdd628 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java
@@ -1,14 +1,15 @@
 package com.mopub.nativeads;
 
 import android.content.Context;
+import android.net.Uri;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
-import com.google.android.exoplayer.upstream.DataSource;
-import com.google.android.exoplayer.upstream.DataSpec;
-import com.google.android.exoplayer.upstream.DefaultHttpDataSource;
-import com.google.android.exoplayer.upstream.HttpDataSource;
+import com.google.android.exoplayer2.upstream.DataSource;
+import com.google.android.exoplayer2.upstream.DataSpec;
+import com.google.android.exoplayer2.upstream.DefaultHttpDataSource;
+import com.google.android.exoplayer2.upstream.HttpDataSource;
 import com.mopub.common.CacheService;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
@@ -135,11 +136,7 @@
 
     public HttpDiskCompositeDataSource(@NonNull final Context context,
             @NonNull final String userAgent, @Nullable final EventDetails eventDetails) {
-        this(context, userAgent, eventDetails,
-                new DefaultHttpDataSource(userAgent, null, null,
-                        DefaultHttpDataSource.DEFAULT_CONNECT_TIMEOUT_MILLIS,
-                        DefaultHttpDataSource.DEFAULT_READ_TIMEOUT_MILLIS,
-                        false));
+        this(context, userAgent, eventDetails, new DefaultHttpDataSource(userAgent, null));
     }
 
     @VisibleForTesting
@@ -279,6 +276,11 @@ private static Integer getExpectedFileLengthFromDisk(@NonNull final String key)
         return null;
     }
 
+    @Override
+    public Uri getUri() {
+        return mDataSpec != null ? mDataSpec.uri : null;
+    }
+
     @Override
     public void close() throws IOException {
         if (!TextUtils.isEmpty(mKey) && mCachedBytes != null) {
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
index 72f92a18..dc9cefcb 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
@@ -311,7 +311,7 @@ public void onVastVideoConfigurationPrepared(@Nullable VastVideoConfig vastVideo
                 final VisibilityTrackingEvent vastImpressionTrackingEvent =
                         new VisibilityTrackingEvent();
                 vastImpressionTrackingEvent.strategy = new PayloadVisibilityStrategy(mContext,
-                        vastTracker.getTrackingUrl());
+                        vastTracker.getContent());
                 vastImpressionTrackingEvent.minimumPercentageVisible =
                         mVideoResponseHeaders.getImpressionMinVisiblePercent();
                 vastImpressionTrackingEvent.totalRequiredPlayTimeMs =
@@ -328,7 +328,7 @@ public void onVastVideoConfigurationPrepared(@Nullable VastVideoConfig vastVideo
                         new VisibilityTrackingEvent();
                 vastVisibilityTrackingEvent.strategy =
                         new PayloadVisibilityStrategy(mContext,
-                                vastVideoViewabilityTracker.getTrackingUrl());
+                                vastVideoViewabilityTracker.getContent());
                 vastVisibilityTrackingEvent.minimumPercentageVisible =
                         vastVideoViewabilityTracker.getPercentViewable();
                 vastVisibilityTrackingEvent.totalRequiredPlayTimeMs =
@@ -622,8 +622,7 @@ private void maybeChangeState() {
             } else if (mEnded) {
                 newState = VideoState.ENDED;
             } else {
-                if (mLatestVideoControllerState == NativeVideoController.STATE_PREPARING
-                        || mLatestVideoControllerState == NativeVideoController.STATE_IDLE) {
+                if (mLatestVideoControllerState == NativeVideoController.STATE_IDLE) {
                     newState = VideoState.LOADING;
                 } else if (mLatestVideoControllerState == NativeVideoController.STATE_BUFFERING) {
                     newState = VideoState.BUFFERING;
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java
index ea7d68ea..94f66ef7 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java
@@ -5,7 +5,6 @@
 import android.graphics.drawable.Drawable;
 import android.media.AudioManager;
 import android.media.AudioManager.OnAudioFocusChangeListener;
-import android.media.MediaCodec;
 import android.net.Uri;
 import android.os.Handler;
 import android.os.Looper;
@@ -14,17 +13,29 @@
 import android.view.Surface;
 import android.view.TextureView;
 
-import com.google.android.exoplayer.ExoPlaybackException;
-import com.google.android.exoplayer.ExoPlayer;
-import com.google.android.exoplayer.MediaCodecAudioTrackRenderer;
-import com.google.android.exoplayer.MediaCodecSelector;
-import com.google.android.exoplayer.MediaCodecVideoTrackRenderer;
-import com.google.android.exoplayer.extractor.Extractor;
-import com.google.android.exoplayer.extractor.ExtractorSampleSource;
-import com.google.android.exoplayer.extractor.mp4.Mp4Extractor;
-import com.google.android.exoplayer.upstream.Allocator;
-import com.google.android.exoplayer.upstream.DataSource;
-import com.google.android.exoplayer.upstream.DefaultAllocator;
+import com.google.android.exoplayer2.C;
+import com.google.android.exoplayer2.DefaultLoadControl;
+import com.google.android.exoplayer2.ExoPlaybackException;
+import com.google.android.exoplayer2.ExoPlayer;
+import com.google.android.exoplayer2.ExoPlayerFactory;
+import com.google.android.exoplayer2.LoadControl;
+import com.google.android.exoplayer2.PlaybackParameters;
+import com.google.android.exoplayer2.Renderer;
+import com.google.android.exoplayer2.Timeline;
+import com.google.android.exoplayer2.audio.MediaCodecAudioRenderer;
+import com.google.android.exoplayer2.extractor.ExtractorsFactory;
+import com.google.android.exoplayer2.mediacodec.MediaCodecSelector;
+import com.google.android.exoplayer2.source.ExtractorMediaSource;
+import com.google.android.exoplayer2.source.MediaSource;
+import com.google.android.exoplayer2.source.TrackGroupArray;
+import com.google.android.exoplayer2.trackselection.DefaultTrackSelector;
+import com.google.android.exoplayer2.trackselection.TrackSelectionArray;
+import com.google.android.exoplayer2.trackselection.TrackSelector;
+import com.google.android.exoplayer2.upstream.DefaultAllocator;
+import com.google.android.exoplayer2.video.MediaCodecVideoRenderer;
+import com.google.android.exoplayer2.extractor.Extractor;
+import com.google.android.exoplayer2.extractor.mp4.Mp4Extractor;
+import com.google.android.exoplayer2.upstream.DataSource;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.event.BaseEvent;
@@ -48,7 +59,7 @@
  * Wrapper class around the {@link ExoPlayer} to provide a nice interface into the player along
  * with some helper methods. This class is not thread safe.
  */
-public class NativeVideoController implements ExoPlayer.Listener,OnAudioFocusChangeListener {
+public class NativeVideoController implements ExoPlayer.EventListener, OnAudioFocusChangeListener {
 
     public interface Listener {
         void onStateChanged(boolean playWhenReady, int playbackState);
@@ -61,7 +72,6 @@
     public static final int STATE_READY = ExoPlayer.STATE_READY;
     public static final int STATE_BUFFERING = ExoPlayer.STATE_BUFFERING;
     public static final int STATE_IDLE = ExoPlayer.STATE_IDLE;
-    public static final int STATE_PREPARING = ExoPlayer.STATE_PREPARING;
     public static final int STATE_ENDED = ExoPlayer.STATE_ENDED;
     public static final int STATE_CLEARED = ExoPlayer.STATE_ENDED + 1;
 
@@ -72,7 +82,7 @@
 
     @NonNull private final Context mContext;
     @NonNull private final Handler mHandler;
-    @NonNull private final ExoPlayerFactory mExoPlayerFactory;
+    @NonNull private final MoPubExoPlayerFactory mMoPubExoPlayerFactory;
     @NonNull private VastVideoConfig mVastVideoConfig;
     @NonNull private NativeVideoProgressRunnable mNativeVideoProgressRunnable;
     @NonNull private AudioManager mAudioManager;
@@ -84,8 +94,8 @@
     @Nullable private WeakReference<Object> mOwnerRef;
     @Nullable private volatile ExoPlayer mExoPlayer;
     @Nullable private BitmapDrawable mFinalFrame;
-    @Nullable private MediaCodecAudioTrackRenderer mAudioTrackRenderer;
-    @Nullable private MediaCodecVideoTrackRenderer mVideoTrackRenderer;
+    @Nullable private MediaCodecAudioRenderer mAudioRenderer;
+    @Nullable private MediaCodecVideoRenderer mVideoRenderer;
     @Nullable private EventDetails mEventDetails;
 
     private boolean mPlayWhenReady;
@@ -119,11 +129,11 @@ public static NativeVideoController createForId(final long id,
             @NonNull final Context context,
             @NonNull final VastVideoConfig vastVideoConfig,
             @NonNull final NativeVideoProgressRunnable nativeVideoProgressRunnable,
-            @NonNull final ExoPlayerFactory exoPlayerFactory,
+            @NonNull final MoPubExoPlayerFactory moPubExoPlayerFactory,
             @Nullable final EventDetails eventDetails,
             @NonNull final AudioManager audioManager) {
         NativeVideoController nvc = new NativeVideoController(context, vastVideoConfig,
-                nativeVideoProgressRunnable, exoPlayerFactory, eventDetails, audioManager);
+                nativeVideoProgressRunnable, moPubExoPlayerFactory, eventDetails, audioManager);
         sManagerMap.put(id, nvc);
         return nvc;
     }
@@ -153,7 +163,7 @@ private NativeVideoController(@NonNull final Context context,
                         new Handler(Looper.getMainLooper()),
                         visibilityTrackingEvents,
                         vastVideoConfig),
-                new ExoPlayerFactory(),
+                new MoPubExoPlayerFactory(),
                 eventDetails, 
                 (AudioManager) context.getSystemService(Context.AUDIO_SERVICE));
     }
@@ -161,19 +171,19 @@ private NativeVideoController(@NonNull final Context context,
     private NativeVideoController(@NonNull final Context context,
             @NonNull final VastVideoConfig vastVideoConfig,
             @NonNull final NativeVideoProgressRunnable nativeVideoProgressRunnable,
-            @NonNull final ExoPlayerFactory exoPlayerFactory,
+            @NonNull final MoPubExoPlayerFactory moPubExoPlayerFactory,
             @Nullable final EventDetails eventDetails,
             @NonNull final AudioManager audioManager) {
         Preconditions.checkNotNull(context);
         Preconditions.checkNotNull(vastVideoConfig);
-        Preconditions.checkNotNull(exoPlayerFactory);
+        Preconditions.checkNotNull(moPubExoPlayerFactory);
         Preconditions.checkNotNull(audioManager);
 
         mContext = context.getApplicationContext();
         mHandler = new Handler(Looper.getMainLooper());
         mVastVideoConfig = vastVideoConfig;
         mNativeVideoProgressRunnable = nativeVideoProgressRunnable;
-        mExoPlayerFactory = exoPlayerFactory;
+        mMoPubExoPlayerFactory = moPubExoPlayerFactory;
         mEventDetails = eventDetails;
         mAudioManager = audioManager;
     }
@@ -288,6 +298,15 @@ public void release(@NonNull final Object owner) {
         }
     }
 
+    @Override
+    public void onTimelineChanged(Timeline timeline, Object manifest) {}
+
+    @Override
+    public void onTracksChanged(TrackGroupArray trackGroups, TrackSelectionArray trackSelections) {}
+
+    @Override
+    public void onLoadingChanged(boolean isLoading) {}
+
     @Override
     public void onPlayerStateChanged(final boolean playWhenReady, final int newState) {
         if (newState == STATE_ENDED && mFinalFrame == null) {
@@ -342,9 +361,6 @@ public long getDuration() {
         return mNativeVideoProgressRunnable.getDuration();
     }
 
-    @Override
-    public void onPlayWhenReadyCommitted() {}
-
     @Override
     public void onPlayerError(ExoPlaybackException e) {
         if (mListener == null) {
@@ -361,6 +377,12 @@ public void onPlayerError(ExoPlaybackException e) {
         mNativeVideoProgressRunnable.requestStop();
     }
 
+    @Override
+    public void onPositionDiscontinuity() {}
+
+    @Override
+    public void onPlaybackParametersChanged(PlaybackParameters playbackParameters) {}
+
     /**
      * Handles forwarding the user to the specified click through url. Also, fires all unfired
      * impression trackers (which should already have been handled in the transition from in-stream
@@ -400,28 +422,43 @@ private void clearExistingPlayer() {
 
     private void preparePlayer() {
         if (mExoPlayer == null) {
-            mExoPlayer = mExoPlayerFactory.newInstance(2, 1000, 5000);
+            mVideoRenderer = new MediaCodecVideoRenderer(mContext,
+                    MediaCodecSelector.DEFAULT, 0, mHandler, null, 10);
+            mAudioRenderer = new MediaCodecAudioRenderer(MediaCodecSelector.DEFAULT);
+            final DefaultAllocator allocator = new DefaultAllocator(true, BUFFER_SEGMENT_SIZE,
+                    BUFFER_SEGMENT_COUNT);
+
+            mExoPlayer = mMoPubExoPlayerFactory.newInstance(
+                    new Renderer[] {mVideoRenderer, mAudioRenderer},
+                    new DefaultTrackSelector(),
+                    new DefaultLoadControl(allocator));
+
             mNativeVideoProgressRunnable.setExoPlayer(mExoPlayer);
             mExoPlayer.addListener(this);
 
-            // Set up data sources
-            final Allocator allocator = new DefaultAllocator(BUFFER_SEGMENT_SIZE);
-            final Extractor extractor = new Mp4Extractor();
+            final DataSource.Factory dataSourceFactory = new DataSource.Factory() {
+                @Override
+                public DataSource createDataSource() {
+                    return new HttpDiskCompositeDataSource(mContext, "exo_demo", mEventDetails);
+                }
+            };
 
-            final DataSource httpSource = new HttpDiskCompositeDataSource(mContext, "exo_demo",
-                    mEventDetails);
+            final ExtractorsFactory extractorsFactory = new ExtractorsFactory() {
+                @Override
+                public Extractor[] createExtractors() {
+                    return new Extractor[] {new Mp4Extractor()};
+                }
+            };
 
-            final String videoUrl = mVastVideoConfig.getNetworkMediaFileUrl();
+            final MediaSource mediaSource = new ExtractorMediaSource(
+                    Uri.parse(mVastVideoConfig.getNetworkMediaFileUrl()),
+                    dataSourceFactory,
+                    extractorsFactory,
+                    mHandler,
+                    null
+            );
 
-            final ExtractorSampleSource sampleSource = new ExtractorSampleSource(Uri.parse(videoUrl),
-                    httpSource, allocator, BUFFER_SEGMENT_SIZE * BUFFER_SEGMENT_COUNT, extractor);
-            mVideoTrackRenderer = new MediaCodecVideoTrackRenderer(mContext, sampleSource,
-                    MediaCodecSelector.DEFAULT,
-                    MediaCodec.VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING, 0, mHandler, null,
-                    10);
-            mAudioTrackRenderer = new MediaCodecAudioTrackRenderer(sampleSource,
-                    MediaCodecSelector.DEFAULT);
-            mExoPlayer.prepare(mAudioTrackRenderer, mVideoTrackRenderer);
+            mExoPlayer.prepare(mediaSource);
             mNativeVideoProgressRunnable.startRepeating(50);
         }
 
@@ -447,8 +484,9 @@ private void setExoAudio(final float volume) {
             return;
         }
 
-        mExoPlayer.sendMessage(
-                mAudioTrackRenderer, MediaCodecAudioTrackRenderer.MSG_SET_VOLUME, volume);
+        mExoPlayer.sendMessages(
+                new ExoPlayer.ExoPlayerMessage(mAudioRenderer, C.MSG_SET_VOLUME, volume)
+        );
     }
 
     private void setExoSurface(@Nullable final Surface surface) {
@@ -456,17 +494,19 @@ private void setExoSurface(@Nullable final Surface surface) {
             return;
         }
 
-        mExoPlayer.sendMessage(
-                mVideoTrackRenderer, MediaCodecVideoTrackRenderer.MSG_SET_SURFACE, surface);
+        mExoPlayer.sendMessages(
+            new ExoPlayer.ExoPlayerMessage(mVideoRenderer, C.MSG_SET_SURFACE, surface)
+        );
     }
 
     /**
      * Created purely for the purpose of mocking to ease testing.
      */
     @VisibleForTesting
-    static class ExoPlayerFactory {
-        public ExoPlayer newInstance(int rendererCount, int minBufferMs, int minRebufferMs) {
-            return ExoPlayer.Factory.newInstance(rendererCount, minBufferMs, minRebufferMs);
+    static class MoPubExoPlayerFactory {
+        public ExoPlayer newInstance(@NonNull final Renderer[] renderers,
+                @NonNull final TrackSelector trackSelector, @Nullable LoadControl loadControl) {
+            return ExoPlayerFactory.newInstance(renderers, trackSelector, loadControl);
         }
     }
 
@@ -607,7 +647,7 @@ public void doWork() {
                     if (tracker.isTracked()) {
                         continue;
                     }
-                    trackingUrls.add(tracker.getTrackingUrl());
+                    trackingUrls.add(tracker.getContent());
                     tracker.setTracked();
                 }
                 TrackingRequest.makeTrackingHttpRequest(trackingUrls, mContext);
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
index 4dc33142..e98c9b1f 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
@@ -241,8 +241,7 @@ private void maybeChangeState() {
         } else if (mEnded) {
             newState = VideoState.ENDED;
         } else {
-            if (mLatestVideoControllerState == NativeVideoController.STATE_PREPARING
-                    || mLatestVideoControllerState == NativeVideoController.STATE_IDLE) {
+            if (mLatestVideoControllerState == NativeVideoController.STATE_IDLE) {
                 newState = VideoState.LOADING;
             } else if (mLatestVideoControllerState == NativeVideoController.STATE_BUFFERING) {
                 newState = VideoState.BUFFERING;
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedAd.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedAd.java
index ba372b23..62dd02db 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedAd.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedAd.java
@@ -163,6 +163,7 @@ public void onLeaveApplication() {
         @Override
         public void onInterstitialDismissed() {
             MoPubRewardedVideoManager.onRewardedVideoClosed(mCustomEventClass, getAdNetworkId());
+            onInvalidate();
         }
 
         @Deprecated
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedPlayable.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedPlayable.java
index 41eabaa5..6af773a2 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedPlayable.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedPlayable.java
@@ -2,6 +2,7 @@
 
 import android.app.Activity;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 
 import com.mopub.common.MoPubReward;
 import com.mopub.common.VisibleForTesting;
@@ -16,7 +17,7 @@
 public class MoPubRewardedPlayable extends MoPubRewardedAd {
 
     @NonNull private static final String MOPUB_REWARDED_PLAYABLE_ID = "mopub_rewarded_playable_id";
-    @NonNull private RewardedMraidInterstitial mRewardedMraidInterstitial;
+    @Nullable private RewardedMraidInterstitial mRewardedMraidInterstitial;
 
     public MoPubRewardedPlayable() {
         mRewardedMraidInterstitial = new RewardedMraidInterstitial();
@@ -28,6 +29,10 @@ protected void loadWithSdkInitialized(@NonNull final Activity activity,
             @NonNull final Map<String, String> serverExtras) throws Exception {
         super.loadWithSdkInitialized(activity, localExtras, serverExtras);
 
+        if (mRewardedMraidInterstitial == null) {
+            MoPubLog.w("mRewardedMraidInterstitial is null. Has this class been invalidated?");
+            return;
+        }
         mRewardedMraidInterstitial.loadInterstitial(activity, new MoPubRewardedPlayableListener(),
                 localExtras, serverExtras);
     }
@@ -40,13 +45,16 @@ protected String getAdNetworkId() {
 
     @Override
     protected void onInvalidate() {
-        mRewardedMraidInterstitial.onInvalidate();
+        if (mRewardedMraidInterstitial != null) {
+            mRewardedMraidInterstitial.onInvalidate();
+        }
+        mRewardedMraidInterstitial = null;
         super.onInvalidate();
     }
 
     @Override
     protected void show() {
-        if (isReady()) {
+        if (isReady() && mRewardedMraidInterstitial != null) {
             MoPubLog.d("Showing MoPub rewarded playable.");
             mRewardedMraidInterstitial.showInterstitial();
         } else {
@@ -79,4 +87,11 @@ void setRewardedMraidInterstitial(
             @NonNull final RewardedMraidInterstitial rewardedMraidInterstitial) {
         mRewardedMraidInterstitial = rewardedMraidInterstitial;
     }
+
+    @Deprecated
+    @VisibleForTesting
+    @Nullable
+    RewardedMraidInterstitial getRewardedMraidInterstitial() {
+        return mRewardedMraidInterstitial;
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java
index a9695b16..e85a0e92 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java
@@ -2,6 +2,7 @@
 
 import android.app.Activity;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 
 import com.mopub.common.MoPubReward;
 import com.mopub.common.VisibleForTesting;
@@ -16,8 +17,7 @@
 
     @NonNull private static final String MOPUB_REWARDED_VIDEO_ID = "mopub_rewarded_video_id";
 
-    @NonNull private RewardedVastVideoInterstitial mRewardedVastVideoInterstitial;
-
+    @Nullable private RewardedVastVideoInterstitial mRewardedVastVideoInterstitial;
 
     public MoPubRewardedVideo() {
         mRewardedVastVideoInterstitial = new RewardedVastVideoInterstitial();
@@ -31,7 +31,10 @@ protected String getAdNetworkId() {
 
     @Override
     protected void onInvalidate() {
-        mRewardedVastVideoInterstitial.onInvalidate();
+        if (mRewardedVastVideoInterstitial != null) {
+            mRewardedVastVideoInterstitial.onInvalidate();
+        }
+        mRewardedVastVideoInterstitial = null;
         super.onInvalidate();
     }
 
@@ -41,13 +44,18 @@ protected void loadWithSdkInitialized(@NonNull final Activity activity,
             @NonNull final Map<String, String> serverExtras) throws Exception {
         super.loadWithSdkInitialized(activity, localExtras, serverExtras);
 
-        mRewardedVastVideoInterstitial.loadInterstitial(activity, new MoPubRewardedVideoListener(),
-                localExtras, serverExtras);
+        if (mRewardedVastVideoInterstitial == null) {
+            MoPubLog.w("mRewardedVastVideoInterstitial is null. Has this class been invalidated?");
+            return;
+        }
+        mRewardedVastVideoInterstitial.loadInterstitial(activity,
+                    new MoPubRewardedVideoListener(),
+                    localExtras, serverExtras);
     }
 
     @Override
     protected void show() {
-        if (isReady()) {
+        if (isReady() && mRewardedVastVideoInterstitial != null) {
             MoPubLog.d("Showing MoPub rewarded video.");
             mRewardedVastVideoInterstitial.showInterstitial();
         } else {
@@ -78,7 +86,14 @@ public void onVideoComplete() {
     @Deprecated
     @VisibleForTesting
     void setRewardedVastVideoInterstitial(
-            @NonNull final RewardedVastVideoInterstitial rewardedVastVideoInterstitial) {
+            @Nullable final RewardedVastVideoInterstitial rewardedVastVideoInterstitial) {
         mRewardedVastVideoInterstitial = rewardedVastVideoInterstitial;
     }
+
+    @Deprecated
+    @VisibleForTesting
+    @Nullable
+    RewardedVastVideoInterstitial getRewardedVastVideoInterstitial() {
+        return mRewardedVastVideoInterstitial;
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
index e533accb..35985303 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
@@ -2,6 +2,7 @@
 
 import android.app.Activity;
 import android.content.Context;
+import android.content.SharedPreferences;
 import android.location.Location;
 import android.os.Handler;
 import android.os.Looper;
@@ -18,6 +19,7 @@
 import com.mopub.common.MediationSettings;
 import com.mopub.common.MoPubReward;
 import com.mopub.common.Preconditions;
+import com.mopub.common.SharedPreferencesHelper;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Json;
@@ -34,11 +36,15 @@
 import com.mopub.volley.VolleyError;
 
 import org.json.JSONException;
+import org.json.JSONObject;
 
 import java.lang.ref.WeakReference;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.LinkedHashSet;
+import java.util.LinkedList;
+import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
@@ -52,6 +58,8 @@
  */
 public class MoPubRewardedVideoManager {
     private static MoPubRewardedVideoManager sInstance;
+    @NonNull private static SharedPreferences sCustomEventSharedPrefs;
+    private static final String CUSTOM_EVENT_PREF_NAME = "mopubCustomEventSettings";
     private static final int DEFAULT_LOAD_TIMEOUT = Constants.THIRTY_SECONDS_MILLIS;
     private static final String CURRENCIES_JSON_REWARDS_MAP_KEY = "rewards";
     private static final String CURRENCIES_JSON_REWARD_NAME_KEY = "name";
@@ -130,6 +138,68 @@ private MoPubRewardedVideoManager(@NonNull Activity mainActivity, MediationSetti
         mTimeoutMap = new HashMap<String, Runnable>();
 
         mAdRequestStatus = new AdRequestStatusMapping();
+
+        sCustomEventSharedPrefs =
+                SharedPreferencesHelper.getSharedPreferences(mContext, CUSTOM_EVENT_PREF_NAME);
+    }
+
+    @NonNull
+    public static synchronized List<CustomEventRewardedVideo> initNetworks(
+            @NonNull final Activity mainActivity,
+            @NonNull final List<Class<? extends CustomEventRewardedVideo>> networksToInit) {
+        Preconditions.checkNotNull(mainActivity);
+        Preconditions.checkNotNull(networksToInit);
+
+        if (sInstance == null) {
+            logErrorNotInitialized();
+            return Collections.emptyList();
+        }
+
+        // List of networks that end up getting initialized.
+        List<CustomEventRewardedVideo> initializedNetworksList = new LinkedList<>();
+
+        // Fetch saved network init settings from SharedPrefs.
+        final Map<String, ?> networkInitSettings = sCustomEventSharedPrefs.getAll();
+        MoPubLog.d(String.format(Locale.US, "fetched init settings for %s networks: %s",
+                networkInitSettings.size(), networkInitSettings.keySet()));
+
+        // Dedupe array of networks to init.
+        final LinkedHashSet<Class<? extends CustomEventRewardedVideo>> uniqueNetworksToInit =
+                new LinkedHashSet<>(networksToInit);
+
+        for (Class<? extends CustomEventRewardedVideo> networkClass : uniqueNetworksToInit) {
+            final String networkClassName = networkClass.getName();
+            if (networkInitSettings.containsKey(networkClassName)) {
+                try {
+                    final String networkInitParamsJsonString =
+                            (String) networkInitSettings.get(networkClassName);
+
+                    final Map<String, String> networkInitParamsMap =
+                            Json.jsonStringToMap(networkInitParamsJsonString);
+
+                    final CustomEventRewardedVideo customEvent =
+                            Reflection.instantiateClassWithEmptyConstructor(
+                                    networkClassName,
+                                    CustomEventRewardedVideo.class);
+
+                    MoPubLog.d(String.format(Locale.US, "Initializing %s with params %s",
+                            networkClassName, networkInitParamsMap));
+
+                    customEvent.checkAndInitializeSdk(
+                            mainActivity,
+                            Collections.<String, Object>emptyMap(),
+                            networkInitParamsMap);
+
+                    initializedNetworksList.add(customEvent);
+                } catch (Exception e) {
+                    MoPubLog.e("Error fetching init settings for network " + networkClassName);
+                }
+            } else {
+                MoPubLog.d("Init settings not found for " + networkClassName);
+            }
+        }
+
+        return initializedNetworksList;
     }
 
     public static synchronized void init(@NonNull Activity mainActivity, MediationSettings... mediationSettings) {
@@ -448,6 +518,9 @@ private void onAdSuccess(AdResponse adResponse, String adUnitId) {
             // Clear any available rewards for this AdUnit.
             mRewardedAdData.resetAvailableRewards(adUnitId);
 
+            // Clear any reward previously selected for this AdUnit.
+            mRewardedAdData.resetSelectedReward(adUnitId);
+
             // If the new multi-currency header doesn't exist, fallback to parsing legacy headers
             // X-Rewarded-Video-Currency-Name and X-Rewarded-Video-Currency-Amount.
             if (TextUtils.isEmpty(rewardedCurrencies)) {
@@ -491,15 +564,35 @@ public void run() {
             mCustomEventTimeoutHandler.postDelayed(timeout, timeoutMillis);
             mTimeoutMap.put(adUnitId, timeout);
 
+            // Fetch the server extras mappings.
+            final Map<String, String> serverExtras = adResponse.getServerExtras();
+
+            // If the custom event is a third-party rewarded video, the server extras mappings
+            // contain init parameters for this custom event class. Serialize the mappings into a
+            // JSON string, then update SharedPreferences keying on the custom event class name.
+            if (customEvent instanceof CustomEventRewardedVideo) {
+                final String serverExtrasJsonString = (new JSONObject(serverExtras)).toString();
+
+                MoPubLog.d(String.format(Locale.US,
+                        "Updating init settings for custom event %s with params %s",
+                        customEventClassName, serverExtrasJsonString));
+
+                sCustomEventSharedPrefs
+                        .edit()
+                        .putString(customEventClassName, serverExtrasJsonString)
+                        .apply();
+            }
+
             // Load custom event
             MoPubLog.d(String.format(Locale.US,
                     "Loading custom event with class name %s", customEventClassName));
-            customEvent.loadCustomEvent(mainActivity, localExtras, adResponse.getServerExtras());
+            customEvent.loadCustomEvent(mainActivity, localExtras, serverExtras);
 
             final String adNetworkId = customEvent.getAdNetworkId();
             mRewardedAdData.updateAdUnitCustomEventMapping(adUnitId, customEvent, adNetworkId);
         } catch (Exception e) {
-            MoPubLog.e(String.format(Locale.US, "Couldn't create custom event with class name %s", customEventClassName));
+            MoPubLog.e(String.format(Locale.US,
+                    "Couldn't create custom event with class name %s", customEventClassName));
             failover(adUnitId, MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
         }
     }
@@ -883,4 +976,12 @@ static AdRequestStatusMapping getAdRequestStatusMapping() {
         }
         return null;
     }
+
+    @Deprecated
+    @VisibleForTesting
+    static void setCustomEventSharedPrefs(@NonNull SharedPreferences sharedPrefs) {
+        Preconditions.checkNotNull(sharedPrefs);
+
+        sCustomEventSharedPrefs = sharedPrefs;
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java
index 9e7577c3..0b1faccb 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java
@@ -9,6 +9,7 @@
 import com.mopub.common.Preconditions;
 import com.mopub.common.util.ReflectionTarget;
 
+import java.util.List;
 import java.util.Set;
 
 /**
@@ -25,6 +26,17 @@ public static void initializeRewardedVideo(@NonNull Activity activity,
         MoPubRewardedVideoManager.init(activity, mediationSettings);
     }
 
+    @ReflectionTarget
+    public static void initializeRewardedVideo(@NonNull Activity activity,
+            @NonNull List<Class<? extends CustomEventRewardedVideo>> networksToInit,
+            MediationSettings... mediationSettings) {
+        Preconditions.checkNotNull(activity);
+        Preconditions.checkNotNull(networksToInit);
+
+        MoPubRewardedVideoManager.init(activity, mediationSettings);
+        MoPubRewardedVideoManager.initNetworks(activity, networksToInit);
+    }
+
     @ReflectionTarget
     public static void setRewardedVideoListener(@Nullable MoPubRewardedVideoListener listener) {
         MoPubRewardedVideoManager.setVideoListener(listener);
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedAdData.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedAdData.java
index f67a6f48..7c51b0bb 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedAdData.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedAdData.java
@@ -132,6 +132,13 @@ void resetAvailableRewards(@NonNull String moPubId) {
         }
     }
 
+    void resetSelectedReward(@NonNull String moPubId) {
+        Preconditions.checkNotNull(moPubId);
+
+        // Clear any reward previously selected for this AdUnit
+        updateAdUnitRewardMapping(moPubId, null, null);
+    }
+
     @Nullable
     String getServerCompletionUrl(@Nullable final String moPubId) {
         if (TextUtils.isEmpty(moPubId)) {
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidActivity.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidActivity.java
index 38e6846b..a5bf95a0 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidActivity.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidActivity.java
@@ -120,7 +120,7 @@ public void onOpen() {
             }
         });
 
-        mRewardedMraidController.loadContent(htmlData);
+        mRewardedMraidController.fillContent(getBroadcastIdentifier(), htmlData, null);
         return mRewardedMraidController.getAdContainer();
     }
 
diff --git a/mopub-sdk/proguard.txt b/mopub-sdk/proguard.txt
index bff255cd..21b8b752 100644
--- a/mopub-sdk/proguard.txt
+++ b/mopub-sdk/proguard.txt
@@ -16,6 +16,12 @@
 # Keep methods that are accessed via reflection
 -keepclassmembers class ** { @com.mopub.common.util.ReflectionTarget *; }
 
+# Viewability support
+-keepclassmembers class com.integralads.avid.library.mopub.** { public *; }
+-keep public class com.integralads.avid.library.mopub.**
+-keepclassmembers class com.moat.analytics.mobile.mpub.** { public *; }
+-keep public class com.moat.analytics.mobile.mpub.**
+
 # Support for Android Advertiser ID.
 -keep class com.google.android.gms.common.GooglePlayServicesUtil {*;}
 -keep class com.google.android.gms.ads.identifier.AdvertisingIdClient {*;}
diff --git a/mopub-sdk/shared-build.gradle b/mopub-sdk/shared-build.gradle
index ebdf708e..bfb4255b 100644
--- a/mopub-sdk/shared-build.gradle
+++ b/mopub-sdk/shared-build.gradle
@@ -6,22 +6,23 @@ repositories {
     flatDir {
         dirs project(':mopub-sdk').file('../libs')
     }
+    maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
 }
 
 project.group = 'com.mopub'
-project.version = '4.15.0'
+project.version = '4.16.0'
 
 android {
-    compileSdkVersion 23
+    compileSdkVersion 25
     buildToolsVersion '25.0.2'
     lintOptions { abortOnError false }
     useLibrary 'org.apache.http.legacy'
 
     defaultConfig {
-        versionCode 52
+        versionCode 53
         versionName version
         minSdkVersion 16
-        targetSdkVersion 23
+        targetSdkVersion 25
         consumerProguardFiles project(':mopub-sdk').file('proguard.txt')
     }
 
@@ -49,7 +50,7 @@ android {
 
             // Test JVM settings since we have a lot of classes loaded.
             all {
-                jvmArgs '-XX:MaxPermSize=4096m', '-Xmx8192m'
+                jvmArgs '-XX:MaxPermSize=4096m', '-Xmx8192m', '-noverify'
                 forkEvery 200
             }
         }
@@ -74,6 +75,6 @@ android {
 }
 
 dependencies {
-    compile 'com.android.support:support-v4:23.1.1'
-    compile 'com.android.support:support-annotations:23.1.1'
+    compile 'com.android.support:support-v4:25.3.1'
+    compile 'com.android.support:support-annotations:25.3.1'
 }
diff --git a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
index a561a950..f42591da 100644
--- a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
+++ b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
@@ -1,3 +1,3 @@
 fabric-identifier=com.mopub.sdk.android:mopub
-fabric-version=4.15.0+kit
+fabric-version=4.16.0+kit
 fabric-build-type=source
diff --git a/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java b/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java
index c3d5625b..a9f91333 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java
@@ -155,7 +155,7 @@ public void shouldOverrideUrlLoading_withEmptyUrl_shouldReturnFalse_shouldDoNoth
 
     @Test
     public void shouldOverrideUrlLoading_withNullUrl_shouldReturnFalse_shouldDoNothing() {
-        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, null)).isFalse();
+        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, (String) null)).isFalse();
         verify(mockWebView, never()).loadUrl(anyString());
         verify(mockMoPubBrowser, never()).finish();
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/UrlResolutionTaskTest.java b/mopub-sdk/src/test/java/com/mopub/common/UrlResolutionTaskTest.java
index df0626ea..509175ed 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/UrlResolutionTaskTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/UrlResolutionTaskTest.java
@@ -5,6 +5,8 @@
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
 
+import org.junit.After;
+import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
@@ -15,14 +17,26 @@
 import java.net.URISyntaxException;
 
 import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
 public class UrlResolutionTaskTest {
-    private final String BASE_URL =  "https://a.example.com/b/c/d?e=f";
     @Mock private HttpURLConnection mockHttpUrlConnection;
+    @Mock private UrlResolutionTask.UrlResolutionListener mockListener;
+
+    private UrlResolutionTask subject;
+    private final String BASE_URL =  "https://a.example.com/b/c/d?e=f";
+
+    @Before
+    public void setUp() throws Exception {
+        subject = new UrlResolutionTask(mockListener);
+    }
+
+    @After
+    public void tearDown() {
+        MoPub.setBrowserAgent(MoPub.BrowserAgent.IN_APP);
+    }
 
     @Test
     public void resolveRedirectLocation_withAbsoluteRedirect_shouldReturnAbsolutePath() throws Exception {
@@ -135,9 +149,48 @@ public void resolveRedirectLocation_withInvalidUrl_shouldThrowURISyntaxException
         UrlResolutionTask.resolveRedirectLocation(BASE_URL, mockHttpUrlConnection);
     }
 
+    @Test
+    public void doInBackground_withInAppBrowserAgent_withHttpScheme_shouldTryToResolveRedirectAndReturnNull() throws Exception {
+        // Since BASE_URL is not resolvable, attempting to resolve any redirects would result in
+        // catching an IOException and returning null. Hence, a null return value implies that
+        // redirect resolution was tried instead of just returning the URL.
+        assertThat(subject.doInBackground(BASE_URL)).isEqualTo(null);
+    }
+
+    @Test
+    public void doInBackground_withNativeBrowserAgent_withHttpScheme_shouldReturnUrlWithoutRedirectResolution() throws Exception {
+        MoPub.setBrowserAgent(MoPub.BrowserAgent.NATIVE);
+        assertThat(subject.doInBackground(BASE_URL)).isEqualTo(BASE_URL);
+    }
+
+    @Test
+    public void doInBackground_withInAppBrowserAgent_withNonHttpScheme_shouldReturnUrlWithoutRedirectResolution() throws Exception {
+        final String nonHttpUrl = "nonhttps://a.example.com/b/c/d?e=f";
+        assertThat(subject.doInBackground(nonHttpUrl)).isEqualTo(nonHttpUrl);
+    }
+
+    @Test
+    public void doInBackground_withNativeBrowserAgent_withNonHttpScheme_shouldReturnUrlWithoutRedirectResolution() throws Exception {
+        MoPub.setBrowserAgent(MoPub.BrowserAgent.NATIVE);
+        final String nonHttpUrl = "nonhttps://a.example.com/b/c/d?e=f";
+        assertThat(subject.doInBackground(nonHttpUrl)).isEqualTo(nonHttpUrl);
+    }
+
+    @Test
+    public void doInBackground_withInAppBrowserAgent_withMoPubNativeBrowserScheme_shouldReturnUrlWithoutRedirectResolution() throws Exception {
+        final String mopubNativeBrowserUrl = "mopubnativebrowser://navigate?url=https%3A%2F%2Fwww.twitter.com";
+        assertThat(subject.doInBackground(mopubNativeBrowserUrl)).isEqualTo(mopubNativeBrowserUrl);
+    }
+
+    @Test
+    public void doInBackground_withNativeBrowserAgent_withMoPubNativeBrowserScheme_shouldReturnUrlWithoutRedirectResolution() throws Exception {
+        MoPub.setBrowserAgent(MoPub.BrowserAgent.NATIVE);
+        final String mopubNativeBrowserUrl = "mopubnativebrowser://navigate?url=https%3A%2F%2Fwww.twitter.com";
+        assertThat(subject.doInBackground(mopubNativeBrowserUrl)).isEqualTo(mopubNativeBrowserUrl);
+    }
+
     private void setupMockHttpUrlConnection(final int responseCode,
             @Nullable final String absolutePathUrl) throws IOException {
-        mockHttpUrlConnection = mock(HttpURLConnection.class);
         when(mockHttpUrlConnection.getResponseCode()).thenReturn(responseCode);
         when(mockHttpUrlConnection.getHeaderField("Location")).thenReturn(absolutePathUrl);
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java b/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
index 19552de1..7a5f2917 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
@@ -44,7 +44,11 @@
 import org.robolectric.DefaultTestLifecycle;
 import org.robolectric.RobolectricGradleTestRunner;
 import org.robolectric.TestLifecycle;
+import org.robolectric.annotation.Config;
 import org.robolectric.internal.bytecode.InstrumentationConfiguration;
+import org.robolectric.manifest.AndroidManifest;
+import org.robolectric.res.FileFsFile;
+import org.robolectric.res.FsFile;
 import org.robolectric.util.concurrent.RoboExecutorService;
 
 import static com.mopub.common.MoPub.LocationAwareness;
@@ -108,4 +112,26 @@ public void prepareTest(Object test) {
             CacheService.clearAndNullCaches();
         }
     }
+
+    // custom AppManifest logic adapted from:
+    // https://gist.github.com/venator85/282df3677af9ecac56e5e4b91471cd8f
+    @Override
+    protected AndroidManifest getAppManifest(Config config) {
+        final AndroidManifest appManifest = super.getAppManifest(config);
+
+        if (appManifest.getAndroidManifestFile().exists()) {
+            return appManifest;
+        }
+
+        final FsFile androidManifestFile = FileFsFile.from(getModuleRootPath(config),
+                appManifest.getAndroidManifestFile().getPath()
+                        .replace("manifests/full", "manifests/aapt"));
+        return new AndroidManifest(androidManifestFile, appManifest.getResDirectory(),
+                appManifest.getAssetsDirectory());
+    }
+
+    private String getModuleRootPath(Config config) {
+        final String moduleRoot = config.constants().getResource("").toString().replace("file:", "");
+        return moduleRoot.substring(0, moduleRoot.indexOf("/build"));
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java
index 3446601f..a2971b0f 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java
@@ -1,5 +1,7 @@
 package com.mopub.common.util.test.support;
 
+import android.support.annotation.NonNull;
+
 import com.mopub.common.util.Reflection;
 
 import org.robolectric.annotation.Implementation;
@@ -17,7 +19,7 @@ public static void reset() {
     }
 
     @Implementation
-    public static boolean classFound(final String className) throws Exception {
+    public static boolean classFound(@NonNull final String className) {
         if (sNextClassNotFound) {
             sNextClassNotFound = false;
             return false;
@@ -30,4 +32,4 @@ public static boolean classFound(final String className) throws Exception {
     public static void setNextClassNotFound(final boolean nextNotFound) {
         sNextClassNotFound = nextNotFound;
     }
-}
\ No newline at end of file
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
index 2fdd7a26..4b0d48b1 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
@@ -13,6 +13,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
+import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 
 import java.util.HashMap;
@@ -48,7 +49,7 @@ public void setup() {
         subject = new HtmlBanner();
         htmlBannerWebView = TestHtmlBannerWebViewFactory.getSingletonMock();
         customEventBannerListener = mock(CustomEventBanner.CustomEventBannerListener.class);
-        context = new Activity();
+        context = Robolectric.buildActivity(Activity.class).create().get();
         localExtras = new HashMap<String, Object>();
         serverExtras = new HashMap<String, String>();
         responseBody = "expected response body";
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
index ddc9feb7..b4f51bb4 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
@@ -6,6 +6,7 @@
 import android.content.Intent;
 import android.content.pm.ResolveInfo;
 import android.net.Uri;
+import android.webkit.WebSettings;
 import android.webkit.WebView;
 
 import com.mopub.common.MoPubBrowser;
@@ -71,11 +72,17 @@ public void shouldOverrideUrlLoading_withMoPubClose_shouldCallAdDidClose() throw
     }
 
     @Test
-    public void shouldOverrideUrlLoading_withMoPubFailLoad_shouldCallLoadFailUrl() throws Exception {
+    public void shouldOverrideUrlLoading_withMoPubFailLoad_shouldCallLoadFailUrl_shouldStopCurrentLoad_shouldStopAndRestartJavascriptExecution() throws Exception {
+        WebSettings webSettings = mock(WebSettings.class);
+        when(htmlWebView.getSettings()).thenReturn(webSettings);
+
         boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, "mopub://failLoad");
 
         assertThat(didOverrideUrl).isTrue();
         verify(htmlWebViewListener).onFailed(UNSPECIFIED);
+        verify(htmlWebView).stopLoading();
+        verify(webSettings).setJavaScriptEnabled(false);
+        verify(webSettings).setJavaScriptEnabled(true);
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
index 10dd9951..b4422c18 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
@@ -64,6 +64,7 @@
 
     private HtmlInterstitialWebView htmlInterstitialWebView;
     private CustomEventInterstitialListener customEventInterstitialListener;
+    @Mock private HtmlInterstitial htmlInterstitial;
 
     private MoPubActivity subject;
 
@@ -98,7 +99,9 @@ public void onCreate_shouldHaveLockedOrientation() {
     @Test
     public void preRenderHtml_shouldPreloadTheHtml() throws Exception {
         String htmlData = "this is nonsense";
-        MoPubActivity.preRenderHtml(subject, mockAdReport, customEventInterstitialListener, htmlData);
+        MoPubActivity.preRenderHtml(htmlInterstitial, subject, mockAdReport,
+                customEventInterstitialListener, htmlData, true, "redirectUrl",
+                "clickthroughUrl", testBroadcastIdentifier);
 
         verify(htmlInterstitialWebView).enablePlugins(eq(false));
         verify(htmlInterstitialWebView).loadHtmlResponse(htmlData);
@@ -106,15 +109,18 @@ public void preRenderHtml_shouldPreloadTheHtml() throws Exception {
 
     @Test
     public void preRenderHtml_shouldEnableJavascriptCachingForDummyWebView() {
-        MoPubActivity.preRenderHtml(subject, mockAdReport, customEventInterstitialListener,
-                "html_data");
+        MoPubActivity.preRenderHtml(htmlInterstitial, subject, mockAdReport,
+                customEventInterstitialListener, "html_data", true, "redirectUrl",
+                "clickthroughUrl", testBroadcastIdentifier);
 
         verify(htmlInterstitialWebView).enableJavascriptCaching();
     }
 
     @Test
     public void preRenderHtml_shouldHaveAWebViewClientThatForwardsFinishLoad() throws Exception {
-        MoPubActivity.preRenderHtml(subject, mockAdReport, customEventInterstitialListener, null);
+        MoPubActivity.preRenderHtml(htmlInterstitial, subject, mockAdReport,
+                customEventInterstitialListener, null, true, "redirectUrl",
+                "clickthroughUrl", testBroadcastIdentifier);
 
         ArgumentCaptor<WebViewClient> webViewClientCaptor = ArgumentCaptor.forClass(WebViewClient.class);
         verify(htmlInterstitialWebView).setWebViewClient(webViewClientCaptor.capture());
@@ -128,7 +134,9 @@ public void preRenderHtml_shouldHaveAWebViewClientThatForwardsFinishLoad() throw
 
     @Test
     public void preRenderHtml_shouldHaveAWebViewClientThatForwardsFailLoad() throws Exception {
-        MoPubActivity.preRenderHtml(subject, mockAdReport, customEventInterstitialListener, null);
+        MoPubActivity.preRenderHtml(htmlInterstitial, subject, mockAdReport,
+                customEventInterstitialListener, null, true, "redirectUrl",
+                "clickthroughUrl", testBroadcastIdentifier);
 
         ArgumentCaptor<WebViewClient> webViewClientCaptor = ArgumentCaptor.forClass(WebViewClient.class);
         verify(htmlInterstitialWebView).setWebViewClient(webViewClientCaptor.capture());
@@ -147,18 +155,6 @@ public void onCreate_shouldSetContentView() throws Exception {
         assertThat(getContentView().getChildCount()).isEqualTo(1);
     }
 
-    @Test
-    public void onCreate_shouldLayoutWebView() throws Exception {
-        // onCreate is called in #setup
-
-        ArgumentCaptor<FrameLayout.LayoutParams> captor = ArgumentCaptor.forClass(FrameLayout.LayoutParams.class);
-        verify(htmlInterstitialWebView).setLayoutParams(captor.capture());
-        FrameLayout.LayoutParams actualLayoutParams = captor.getValue();
-
-        assertThat(actualLayoutParams.width).isEqualTo(FrameLayout.LayoutParams.MATCH_PARENT);
-        assertThat(actualLayoutParams.height).isEqualTo(FrameLayout.LayoutParams.MATCH_PARENT);
-    }
-
     @Test
     public void getAdView_shouldReturnPopulatedHtmlWebView() throws Exception {
         // This is needed because we preload in onCreate and the mock gets triggered.
@@ -252,8 +248,9 @@ public void getAdView_shouldSetUpForBroadcastingFail() throws Exception {
     }
 
     @Test
-    public void broadcastingInterstitialListener_onInterstitialLoaded_shouldCallJavascriptWebViewDidAppear() throws Exception {
+    public void broadcastingInterstitialListener_onInterstitialLoaded_withWebViewCacheMiss_shouldCallJavascriptWebViewDidAppear() throws Exception {
         MoPubActivity.BroadcastingInterstitialListener broadcastingInterstitialListener = ((MoPubActivity) subject).new BroadcastingInterstitialListener();
+        WebViewCacheService.clearAll();
 
         broadcastingInterstitialListener.onInterstitialLoaded();
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedPlayableTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedPlayableTest.java
index 2e82772b..479fe1d4 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedPlayableTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedPlayableTest.java
@@ -49,6 +49,15 @@ public void onInvalidate_withRewardedMraidActivity_shouldInvalidateRewardedMraid
         verify(mockRewardedMraidInterstitial).onInvalidate();
     }
 
+    @Test
+    public void onInvalidate_withNullRewardedMraidActivity_shouldNotInvalidateRewardedMraidActivity() {
+        subject.setRewardedMraidInterstitial(null);
+
+        subject.onInvalidate();
+
+        verifyZeroInteractions(mockRewardedMraidInterstitial);
+    }
+
     @Test
     public void loadWithSdkInitialized_withCorrectLocalExtras_shouldLoadVastVideoInterstitial() throws Exception {
         subject.setRewardedMraidInterstitial(mockRewardedMraidInterstitial);
@@ -82,7 +91,7 @@ public void show_withMraidLoaded_shouldShowRewardedMraidInterstitial() {
     }
 
     @Test
-    public void showVideo_withVideoNotLoaded_shouldDoNothing() {
+    public void show_withVideoNotLoaded_shouldDoNothing() {
         subject.setRewardedMraidInterstitial(mockRewardedMraidInterstitial);
         subject.setIsLoaded(false);
 
@@ -90,4 +99,17 @@ public void showVideo_withVideoNotLoaded_shouldDoNothing() {
 
         verifyZeroInteractions(mockRewardedMraidInterstitial);
     }
+
+    @Test
+    public void show_whenInvalidated_shouldDoNothing() {
+        subject.setRewardedMraidInterstitial(mockRewardedMraidInterstitial);
+        subject.setIsLoaded(true);
+        subject.onInvalidate();
+
+        subject.show();
+
+        verify(mockRewardedMraidInterstitial).onInvalidate();
+        verifyNoMoreInteractions(mockRewardedMraidInterstitial);
+        assertThat(subject.getRewardedMraidInterstitial()).isNull();
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
index a379840c..00953386 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
@@ -1,6 +1,7 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
+import android.content.SharedPreferences;
 import android.net.Uri;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
@@ -9,6 +10,7 @@
 import com.mopub.common.DataKeys;
 import com.mopub.common.LifecycleListener;
 import com.mopub.common.MoPubReward;
+import com.mopub.common.SharedPreferencesHelper;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.network.AdRequest;
 import com.mopub.network.AdResponse;
@@ -30,6 +32,9 @@
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLooper;
 
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
@@ -64,6 +69,7 @@
                     "    { \"name\": \"Energy\", \"amount\": 20 }\n" +
                     "  ]\n" +
                     "}\n";
+    public static final String TEST_CUSTOM_EVENT_PREF_NAME = "mopubTestCustomEventSettings";
 
     @Mock
     MoPubRequestQueue mockRequestQueue;
@@ -74,6 +80,7 @@
     private AdRequest request;
     private RewardedVideoCompletionRequest rewardedVideoCompletionRequest;
     private Activity mActivity;
+    private SharedPreferences mTestCustomEventSharedPrefs;
 
     @Before
     public void setup() {
@@ -81,6 +88,10 @@ public void setup() {
         MoPubRewardedVideoManager.init(mActivity);
         MoPubRewardedVideoManager.setVideoListener(mockVideoListener);
 
+        mTestCustomEventSharedPrefs = SharedPreferencesHelper.getSharedPreferences(
+                        mActivity, TEST_CUSTOM_EVENT_PREF_NAME);
+        MoPubRewardedVideoManager.setCustomEventSharedPrefs(mTestCustomEventSharedPrefs);
+
         when(mockRequestQueue.add(any(Request.class))).then(new Answer<Object>() {
             @Override
             public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {
@@ -109,6 +120,106 @@ public void tearDown() {
         ShadowLooper.unPauseMainLooper();
         MoPubRewardedVideoManager.getRewardedAdData().clear();
         MoPubRewardedVideoManager.getAdRequestStatusMapping().clearMapping();
+        mTestCustomEventSharedPrefs.edit().clear().commit();
+    }
+
+    @Test
+    public void initNetworks_withEmptySharedPrefs_shouldNotInitAnyNetworks() {
+        List<Class<? extends CustomEventRewardedVideo>> networksToInit =
+                Arrays.asList(
+                        CustomEventRewardedVideo.class,
+                        TestCustomEvent.class,
+                        NoVideoCustomEvent.class
+                );
+
+        List<CustomEventRewardedVideo> initializedNetworksList =
+                MoPubRewardedVideoManager.initNetworks(mActivity, networksToInit);
+
+        // Verify that no networks got initialized.
+        assertThat(initializedNetworksList.size()).isEqualTo(0);
+    }
+
+    @Test
+    public void initNetworks_shouldOnlyInitNetworksWithSettingsSavedInSharedPrefs() {
+        // Only TestCustomEvent has settings saved in SharedPrefs.
+        mTestCustomEventSharedPrefs.edit().putString(
+                TestCustomEvent.class.getName(),
+                "{\"k1\":\"v1\",\"k2\":\"v2\"}").commit();
+
+        List<Class<? extends CustomEventRewardedVideo>> networksToInit =
+                Arrays.asList(
+                        CustomEventRewardedVideo.class,
+                        TestCustomEvent.class,
+                        NoVideoCustomEvent.class
+                );
+
+        List<CustomEventRewardedVideo> networksInitialized =
+                MoPubRewardedVideoManager.initNetworks(mActivity, networksToInit);
+
+        // Verify that only TestCustomEvent got initialized.
+        assertThat(networksInitialized.size()).isEqualTo(1);
+        assertThat(networksInitialized.get(0).getClass().getName())
+                .isEqualTo(TestCustomEvent.class.getName());
+    }
+
+    @Test
+    public void initNetworks_withDuplicatedNetworks_shouldOnlyInitDedupedNetworks() {
+        // Only TestCustomEvent has settings saved in SharedPrefs.
+        mTestCustomEventSharedPrefs.edit().putString(
+                TestCustomEvent.class.getName(),
+                "{\"k1\":\"v1\",\"k2\":\"v2\"}").commit();
+
+        // All networks are duplicated.
+        List<Class<? extends CustomEventRewardedVideo>> networksToInit =
+                Arrays.asList(
+                        CustomEventRewardedVideo.class,
+                        TestCustomEvent.class,
+                        NoVideoCustomEvent.class,
+                        TestCustomEvent.class,
+                        NoVideoCustomEvent.class,
+                        CustomEventRewardedVideo.class
+                );
+
+        List<CustomEventRewardedVideo> networksInitialized =
+                MoPubRewardedVideoManager.initNetworks(mActivity, networksToInit);
+
+        // Verify that only TestCustomEvent got initialized, and only once.
+        assertThat(networksInitialized.size()).isEqualTo(1);
+        assertThat(networksInitialized.get(0).getClass().getName())
+                .isEqualTo(TestCustomEvent.class.getName());
+    }
+
+    @Test
+    public void initNetworks_shouldObeyOrderDuringInit() {
+        // Both TestCustomEvent and NoVideoCustomEvent have settings saved in SharedPrefs.
+        mTestCustomEventSharedPrefs.edit().putString(
+                TestCustomEvent.class.getName(),
+                "{\"k1\":\"v1\",\"k2\":\"v2\"}").commit();
+        mTestCustomEventSharedPrefs.edit().putString(
+                NoVideoCustomEvent.class.getName(),
+                "{\"k3\":\"v3\",\"k4\":\"v4\"}").commit();
+
+        // All networks are duplicated.
+        List<Class<? extends CustomEventRewardedVideo>> networksToInit =
+                Arrays.asList(
+                        NoVideoCustomEvent.class,
+                        TestCustomEvent.class,
+                        CustomEventRewardedVideo.class,
+                        TestCustomEvent.class,
+                        CustomEventRewardedVideo.class,
+                        NoVideoCustomEvent.class
+                );
+
+        List<CustomEventRewardedVideo> networksInitialized =
+                MoPubRewardedVideoManager.initNetworks(mActivity, networksToInit);
+
+        // Verify that only NoVideoCustomEvent and TestCustomEvent got initialized,
+        // in that order, and each only once.
+        assertThat(networksInitialized.size()).isEqualTo(2);
+        assertThat(networksInitialized.get(0).getClass().getName())
+                .isEqualTo(NoVideoCustomEvent.class.getName());
+        assertThat(networksInitialized.get(1).getClass().getName())
+                .isEqualTo(TestCustomEvent.class.getName());
     }
 
     @Test
@@ -438,6 +549,127 @@ public void onAdSuccess_withMalformedRewardedCurrenciesJsonHeader_shouldNotUpdat
         assertThat(rewardedVideoData.getAvailableRewards("testAdUnit").isEmpty());
     }
 
+    @Test
+    public void onAdSuccess_withEmptyServerExtras_shouldStillSaveEmptyMapInSharedPrefs() {
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName(
+                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setAdType(AdType.CUSTOM)
+                .build();
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
+
+        ShadowLooper.unPauseMainLooper();
+
+        Map<String, ?> networkInitSettings = mTestCustomEventSharedPrefs.getAll();
+        String testCustomEventClassName = TestCustomEvent.class.getName();
+
+        // Verify that TestCustomEvent has an empty map saved in SharedPrefs.
+        assertThat(networkInitSettings.size()).isEqualTo(1);
+        assertThat(networkInitSettings.containsKey(testCustomEventClassName)).isTrue();
+        assertThat(networkInitSettings.get(testCustomEventClassName)).isEqualTo("{}");
+    }
+
+    @Test
+    public void onAdSuccess_withServerExtras_shouldSaveInitParamsInSharedPrefs() {
+        Map<String, String> serverExtras = new HashMap<>();
+        serverExtras.put("k1", "v1");
+        serverExtras.put("k2", "v2");
+
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName(
+                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setAdType(AdType.CUSTOM)
+                .setServerExtras(serverExtras)
+                .build();
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
+
+        ShadowLooper.unPauseMainLooper();
+
+        Map<String, ?> networkInitSettings = mTestCustomEventSharedPrefs.getAll();
+        String testCustomEventClassName = TestCustomEvent.class.getName();
+
+        // Verify that TestCustomEvent has init params saved in SharedPrefs.
+        assertThat(networkInitSettings.size()).isEqualTo(1);
+        assertThat(networkInitSettings.containsKey(testCustomEventClassName)).isTrue();
+        assertThat(networkInitSettings.get(testCustomEventClassName))
+                .isEqualTo("{\"k1\":\"v1\",\"k2\":\"v2\"}");
+    }
+
+    @Test
+    public void onAdSuccess_withNewInitParams_shouldUpdateInitParamsInSharedPrefs() {
+        // Put in {"k1":"v1","k2":"v2"} as existing init params.
+        mTestCustomEventSharedPrefs.edit().putString(
+                TestCustomEvent.class.getName(),
+                "{\"k1\":\"v1\",\"k2\":\"v2\"}").commit();
+
+        // New init params are {"k3":"v3"}.
+        Map<String, String> serverExtras = new HashMap<>();
+        serverExtras.put("k3", "v3");
+
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName(
+                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setAdType(AdType.CUSTOM)
+                .setServerExtras(serverExtras)
+                .build();
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
+
+        ShadowLooper.unPauseMainLooper();
+
+        Map<String, ?> networkInitSettings = mTestCustomEventSharedPrefs.getAll();
+        String testCustomEventClassName = TestCustomEvent.class.getName();
+
+        // Verify that TestCustomEvent has new init params saved in SharedPrefs.
+        assertThat(networkInitSettings.size()).isEqualTo(1);
+        assertThat(networkInitSettings.containsKey(testCustomEventClassName)).isTrue();
+        assertThat(networkInitSettings.get(testCustomEventClassName)).isEqualTo("{\"k3\":\"v3\"}");
+    }
+
+    @Test
+    public void onAdSuccess_witNonCustomEventRewardedVideo_shouldNotSaveAnythingInSharedPrefs() {
+        Map<String, String> serverExtras = new HashMap<>();
+        serverExtras.put("k1", "v1");
+        serverExtras.put("k2", "v2");
+
+        // MoPubRewardedVideo does not extend from CustomEventRewardedVideo
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName(
+                        "com.mopub.mobileads.MoPubRewardedVideo")
+                .setAdType(AdType.CUSTOM)
+                .setServerExtras(serverExtras)
+                .build();
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
+
+        ShadowLooper.unPauseMainLooper();
+
+        // Verify that nothing got saved in SharedPrefs.
+        assertThat(mTestCustomEventSharedPrefs.getAll().size()).isEqualTo(0);
+    }
+
     @Test
     public void loadVideo_withCustomEventAlreadyLoaded_shouldNotLoadAnotherVideo() throws Exception {
         final CustomEventRewardedVideo mockCustomEvent = mock(CustomEventRewardedVideo.class);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java
index 7bfbf0a2..ecb80584 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java
@@ -57,6 +57,8 @@ public void onInvalidate_withVastVideoInterstitial_shouldInvalidateVastVideoInte
 
     @Test
     public void onInvalidate_withNullVastVideoInterstitial_shouldNotInvalidateVastVideoInterstitial() {
+        subject.setRewardedVastVideoInterstitial(null);
+
         subject.onInvalidate();
 
         verifyZeroInteractions(mockRewardedVastVideoInterstitial);
@@ -188,7 +190,7 @@ public void loadWithSdkInitialized_withEmptyCurrencyName_withNegativeCurrencyAmo
     }
 
     @Test
-    public void showVideo_withVideoLoaded_shouldShowVastVideoInterstitial() {
+    public void show_withVideoLoaded_shouldShowVastVideoInterstitial() {
         subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
         subject.setIsLoaded(true);
 
@@ -199,7 +201,7 @@ public void showVideo_withVideoLoaded_shouldShowVastVideoInterstitial() {
     }
 
     @Test
-    public void showVideo_withVideoNotLoaded_shouldDoNothing() {
+    public void show_withVideoNotLoaded_shouldDoNothing() {
         subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
         subject.setIsLoaded(false);
 
@@ -208,6 +210,19 @@ public void showVideo_withVideoNotLoaded_shouldDoNothing() {
         verifyZeroInteractions(mockRewardedVastVideoInterstitial);
     }
 
+    @Test
+    public void show_whenInvalidated_shouldDoNothing() {
+        subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
+        subject.setIsLoaded(true);
+        subject.onInvalidate();
+
+        subject.show();
+
+        verify(mockRewardedVastVideoInterstitial).onInvalidate();
+        verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
+        assertThat(subject.getRewardedVastVideoInterstitial()).isNull();
+    }
+
     @Test
     public void moPubRewardedAdListener_onInterstitialLoaded_withMoPubRewardedVideo_shouldPostExpirationRunnable() {
         listener = subject.createListener(MoPubRewardedVideo.class);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
index 58aba1f1..565920c5 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
@@ -48,11 +48,6 @@ public void setup() {
         adViewController = TestAdViewControllerFactory.getSingletonMock();
     }
 
-    @After
-    public void tearDown() {
-        ShadowReflection.reset();
-    }
-
     @Test
     public void screenStateBroadcastReceiver_withActionUserPresent_shouldUnpauseRefresh() throws Exception {
         broadcastIntent(new Intent(Intent.ACTION_USER_PRESENT));
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
index cbd4547f..a12135a7 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
@@ -42,6 +42,7 @@
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 
 @RunWith(SdkTestRunner.class)
@@ -56,6 +57,7 @@
     @Mock CustomEventInterstitial.CustomEventInterstitialListener
             customEventInterstitialListener;
     @Mock BroadcastReceiver broadcastReceiver;
+    @Mock ResponseBodyInterstitial mraidInterstitial;
 
     Context context;
 
@@ -69,25 +71,29 @@
     @Before
     public void setUp() throws Exception {
         context = Robolectric.buildActivity(Activity.class).create().get();
+        when(mockMraidWebView.getContext()).thenReturn(context);
     }
 
     @Test
     public void preRenderHtml_shouldEnableJavascriptCachingForDummyWebView() {
-        MraidActivity.preRenderHtml(customEventInterstitialListener, HTML_DATA, mockMraidWebView);
+        MraidActivity.preRenderHtml(mraidInterstitial, customEventInterstitialListener, HTML_DATA,
+                mockMraidWebView, testBroadcastIdentifier);
 
         verify(mockMraidWebView).enableJavascriptCaching();
     }
 
     @Test
     public void preRenderHtml_shouldDisablePluginsForDummyWebView() {
-        MraidActivity.preRenderHtml(customEventInterstitialListener, HTML_DATA, mockMraidWebView);
+        MraidActivity.preRenderHtml(mraidInterstitial, customEventInterstitialListener, HTML_DATA,
+                mockMraidWebView, testBroadcastIdentifier);
 
         verify(mockMraidWebView).enablePlugins(false);
     }
 
     @Test
     public void preRenderHtml_shouldLoadHtml() {
-        MraidActivity.preRenderHtml(customEventInterstitialListener, HTML_DATA, mockMraidWebView);
+        MraidActivity.preRenderHtml(mraidInterstitial, customEventInterstitialListener, HTML_DATA,
+                mockMraidWebView, testBroadcastIdentifier);
 
         verify(mockMraidWebView).loadDataWithBaseURL(
                 "http://ads.mopub.com/",
@@ -101,7 +107,8 @@ public void preRenderHtml_shouldLoadHtml() {
     @Ignore("Mraid 2.0")
     @Test
     public void preRenderHtml_shouldSetWebViewClient() throws Exception {
-        MraidActivity.preRenderHtml(subject, customEventInterstitialListener, "3:27");
+        MraidActivity.preRenderHtml(mraidInterstitial, subject, customEventInterstitialListener,
+                "3:27", testBroadcastIdentifier);
 
         verify(mockMraidWebView).enablePlugins(eq(false));
         verify(mraidController).setMraidListener(any(MraidListener.class));
@@ -112,7 +119,8 @@ public void preRenderHtml_shouldSetWebViewClient() throws Exception {
     @Ignore("Mraid 2.0")
     @Test
     public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialLoaded_whenMraidListenerOnReady() throws Exception {
-        MraidActivity.preRenderHtml(subject, customEventInterstitialListener, "");
+        MraidActivity.preRenderHtml(mraidInterstitial, subject, customEventInterstitialListener, "",
+                testBroadcastIdentifier);
 
         ArgumentCaptor<MraidListener> mraidListenerArgumentCaptorr = ArgumentCaptor.forClass(MraidListener.class);
         verify(mraidController).setMraidListener(mraidListenerArgumentCaptorr.capture());
@@ -126,7 +134,8 @@ public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialLoaded_
     @Ignore("Mraid 2.0")
     @Test
     public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialFailed_whenMraidListenerOnFailure() throws Exception {
-        MraidActivity.preRenderHtml(subject, customEventInterstitialListener, "");
+        MraidActivity.preRenderHtml(mraidInterstitial, subject, customEventInterstitialListener, "",
+                testBroadcastIdentifier);
 
         ArgumentCaptor<MraidListener> mraidListenerArgumentCaptorr = ArgumentCaptor.forClass(MraidListener.class);
         verify(mraidController).setMraidListener(mraidListenerArgumentCaptorr.capture());
@@ -140,13 +149,14 @@ public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialFailed_
     @Ignore("Mraid 2.0")
     @Test
     public void preRenderHtml_whenWebViewClientShouldOverrideUrlLoading_shouldReturnTrue() throws Exception {
-        MraidActivity.preRenderHtml(subject, customEventInterstitialListener, "");
+        MraidActivity.preRenderHtml(mraidInterstitial, subject, customEventInterstitialListener, "",
+                testBroadcastIdentifier);
 
         ArgumentCaptor<WebViewClient> webViewClientArgumentCaptor = ArgumentCaptor.forClass(WebViewClient.class);
         verify(mockMraidWebView).setWebViewClient(webViewClientArgumentCaptor.capture());
         WebViewClient webViewClient = webViewClientArgumentCaptor.getValue();
 
-        boolean consumeUrlLoading = webViewClient.shouldOverrideUrlLoading(null, null);
+        boolean consumeUrlLoading = webViewClient.shouldOverrideUrlLoading(null, (String) null);
 
         assertThat(consumeUrlLoading).isTrue();
         verify(customEventInterstitialListener, never()).onInterstitialLoaded();
@@ -157,7 +167,8 @@ public void preRenderHtml_whenWebViewClientShouldOverrideUrlLoading_shouldReturn
     @Ignore("Mraid 2.0")
     @Test
     public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialLoaded_whenWebViewClientOnPageFinished() throws Exception {
-        MraidActivity.preRenderHtml(subject, customEventInterstitialListener, "");
+        MraidActivity.preRenderHtml(mraidInterstitial, subject, customEventInterstitialListener, "",
+                testBroadcastIdentifier);
 
         ArgumentCaptor<WebViewClient> webViewClientArgumentCaptor = ArgumentCaptor.forClass(WebViewClient.class);
         verify(mockMraidWebView).setWebViewClient(webViewClientArgumentCaptor.capture());
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedAdDataTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedAdDataTest.java
index 2fb332c2..e7e5e862 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedAdDataTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedAdDataTest.java
@@ -202,4 +202,24 @@ public void resetAvailableRewards_shouldClearAvailableRewardsMap() {
     public void resetAvailableRewards_withNullAdUnitId_shouldThrowNPE() throws Exception {
         subject.resetAvailableRewards(null);
     }
+
+    @Test
+    public void resetSelectedReward_shouldClearRewardPreviouslySelectedForAdUnit() {
+        subject.addAvailableReward("mopub_id", "currency1", "123");
+        MoPubReward reward = subject.getAvailableRewards("mopub_id").toArray(new MoPubReward[1])[0];
+        subject.selectReward("mopub_id", reward);
+
+        MoPubReward selectedReward = subject.getMoPubReward("mopub_id");
+        assertThat(selectedReward.getLabel()).isEqualTo("currency1");
+        assertThat(selectedReward.getAmount()).isEqualTo(123);
+
+        // Reset reward previously selected for AdUnit "mopub_id"
+        subject.resetSelectedReward("mopub_id");
+        assertThat(subject.getMoPubReward("mopub_id")).isNull();
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void resetSelectedReward_withNullAdUnitId_shouldThrowNPE() throws Exception {
+        subject.resetSelectedReward(null);
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionXmlManagerTest.java
index 395b2ee6..ab3d313a 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionXmlManagerTest.java
@@ -39,7 +39,7 @@ public void getVideoViewabilityTracker_shouldReturnVideoViewabilityTracker() thr
         assertThat(tracker).isNotNull();
         assertThat(tracker.getViewablePlaytimeMS()).isEqualTo(2500);
         assertThat(tracker.getPercentViewable()).isEqualTo(50);
-        assertThat(tracker.getTrackingUrl()).isEqualTo("https://ad.server.com/impression/dot.gif");
+        assertThat(tracker.getContent()).isEqualTo("https://ad.server.com/impression/dot.gif");
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java
index e935461a..ef132fcd 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java
@@ -244,31 +244,31 @@ public void getFractionalTrackers_shouldReturnCorrectValues() {
 
         VastFractionalProgressTracker tracker0 = trackers.get(0);
         assertThat(tracker0.trackingFraction()).isEqualTo(0.13f);
-        assertThat(tracker0.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+        assertThat(tracker0.getContent()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
 
         VastFractionalProgressTracker tracker1 = trackers.get(1);
         assertThat(tracker1.trackingFraction()).isEqualTo(0.25f);
-        assertThat(tracker1.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;");
+        assertThat(tracker1.getContent()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;");
 
         VastFractionalProgressTracker tracker2 = trackers.get(2);
         assertThat(tracker2.trackingFraction()).isEqualTo(0.25f);
-        assertThat(tracker2.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?");
+        assertThat(tracker2.getContent()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?");
 
         VastFractionalProgressTracker tracker3 = trackers.get(3);
         assertThat(tracker3.trackingFraction()).isEqualTo(0.5f);
-        assertThat(tracker3.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;");
+        assertThat(tracker3.getContent()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;");
 
         VastFractionalProgressTracker tracker4 = trackers.get(4);
         assertThat(tracker4.trackingFraction()).isEqualTo(0.5f);
-        assertThat(tracker4.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?");
+        assertThat(tracker4.getContent()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?");
 
         VastFractionalProgressTracker tracker5 = trackers.get(5);
         assertThat(tracker5.trackingFraction()).isEqualTo(0.75f);
-        assertThat(tracker5.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;");
+        assertThat(tracker5.getContent()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;");
 
         VastFractionalProgressTracker tracker6 = trackers.get(6);
         assertThat(tracker6.trackingFraction()).isEqualTo(0.75f);
-        assertThat(tracker6.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?");
+        assertThat(tracker6.getContent()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?");
     }
 
     @Test
@@ -280,19 +280,19 @@ public void getAbsoluteProgressTrackers_shouldReturnCorrectValues() {
 
         VastAbsoluteProgressTracker tracker0 = trackers.get(0);
         assertThat(tracker0.getTrackingMilliseconds()).isEqualTo(0);
-        assertThat(tracker0.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+        assertThat(tracker0.getContent()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
 
         VastAbsoluteProgressTracker tracker1 = trackers.get(1);
         assertThat(tracker1.getTrackingMilliseconds()).isEqualTo(0);
-        assertThat(tracker1.getTrackingUrl()).isEqualTo("https://creativeView/one");
+        assertThat(tracker1.getContent()).isEqualTo("https://creativeView/one");
 
         VastAbsoluteProgressTracker tracker2 = trackers.get(2);
         assertThat(tracker2.getTrackingMilliseconds()).isEqualTo(0);
-        assertThat(tracker2.getTrackingUrl()).isEqualTo("https://creativeView/two");
+        assertThat(tracker2.getContent()).isEqualTo("https://creativeView/two");
 
         VastAbsoluteProgressTracker tracker3 = trackers.get(3);
         assertThat(tracker3.getTrackingMilliseconds()).isEqualTo(3670300);
-        assertThat(tracker3.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;" +
+        assertThat(tracker3.getContent()).isEqualTo("https://ad.doubleclick.net/activity;" +
                 "src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;" +
                 "rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoConfigTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoConfigTest.java
index ac31db25..76639db5 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoConfigTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoConfigTest.java
@@ -351,7 +351,7 @@ public void addVideoTrackers_withInvalidEvent_shouldSkipInvalidEvent() throws Ex
 
         final List<VastAbsoluteProgressTracker> trackers = subject.getAbsoluteTrackers();
         assertThat(trackers.size()).isEqualTo(1);
-        assertThat(trackers.get(0).getTrackingUrl()).isEqualTo("http://mopub.com/start/foo");
+        assertThat(trackers.get(0).getContent()).isEqualTo("http://mopub.com/start/foo");
     }
 
     @Test
@@ -503,18 +503,18 @@ public void handleClickForResult_withAboutBlankClickThroughUrl_shouldFailSilentl
 
     private void assertAbsoluteTracker(final VastAbsoluteProgressTracker actualTracker,
             final String expectedUrl, final int expectedMs) {
-        assertThat(actualTracker.getTrackingUrl()).isEqualTo(expectedUrl);
+        assertThat(actualTracker.getContent()).isEqualTo(expectedUrl);
         assertThat(actualTracker.getTrackingMilliseconds()).isEqualTo(expectedMs);
     }
 
     private void assertFractionalTracker(final VastFractionalProgressTracker actualTracker,
             final String expectedUrl, final float expectedFraction) {
-        assertThat(actualTracker.getTrackingUrl()).isEqualTo(expectedUrl);
+        assertThat(actualTracker.getContent()).isEqualTo(expectedUrl);
         assertThat(actualTracker.trackingFraction()).isEqualTo(expectedFraction);
     }
 
     private void assertTracker(final VastTracker actualTracker, final String expectedUrl) {
-        assertThat(actualTracker.getTrackingUrl()).isEqualTo(expectedUrl);
+        assertThat(actualTracker.getContent()).isEqualTo(expectedUrl);
     }
 
     private void addCompanionAds(VastVideoConfig subject) {
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
index 1518e9bf..757c5c28 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
@@ -18,6 +18,7 @@
 import android.widget.ImageView;
 import android.widget.VideoView;
 
+import com.mopub.common.ExternalViewabilitySession;
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.DeviceUtils.ForceOrientation;
@@ -1237,6 +1238,7 @@ public void onCompletion_whenAllTrackersTracked_whenNoPlaybackErrors_shouldPingC
 
         initializeSubject();
         testTracker.setTracked();
+        setViewabilityTrackersTracked(vastVideoConfig);
         spyOnVideoView();
         setVideoViewParams(15000, 15000);
 
@@ -2252,4 +2254,17 @@ private void setVideoViewParams(int currentPosition, int duration) throws Illega
     private ShadowVastVideoView getShadowVideoView() {
         return (ShadowVastVideoView) ShadowExtractor.extract(subject.getVastVideoView());
     }
+
+    private void setViewabilityTrackersTracked(VastVideoConfig vastVideoConfig) {
+        for (VastFractionalProgressTracker tracker : vastVideoConfig.getFractionalTrackers()) {
+            final String content = tracker.getContent();
+            try {
+                // Only mark trackers that match with viewability's VideoEvent enum
+                Enum.valueOf(ExternalViewabilitySession.VideoEvent.class, content);
+                tracker.setTracked();
+            } catch (IllegalArgumentException e) {
+                // pass
+            }
+        }
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerAggregatorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerAggregatorTest.java
index 5b7e6444..c7a9b243 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerAggregatorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerAggregatorTest.java
@@ -1620,7 +1620,7 @@ public void evaluateVastXmlManager_withVideoViewabilityTrackerInLine_shouldRetur
         VideoViewabilityTracker tracker = vastVideoConfig.getVideoViewabilityTracker();
         assertThat(tracker.getPercentViewable()).isEqualTo(70);
         assertThat(tracker.getViewablePlaytimeMS()).isEqualTo(3500);
-        assertThat(tracker.getTrackingUrl()).isEqualTo("https://ad.server.com/impression/dot.png");
+        assertThat(tracker.getContent()).isEqualTo("https://ad.server.com/impression/dot.png");
     }
 
     @Test
@@ -1632,7 +1632,7 @@ public void evaluateVastXmlManager_withVideoViewabilityTrackerInWrapper_shouldRe
         VideoViewabilityTracker tracker = vastVideoConfig.getVideoViewabilityTracker();
         assertThat(tracker.getPercentViewable()).isEqualTo(50);
         assertThat(tracker.getViewablePlaytimeMS()).isEqualTo(2500);
-        assertThat(tracker.getTrackingUrl()).isEqualTo("https://ad.server.com/impression/dot.gif");
+        assertThat(tracker.getContent()).isEqualTo("https://ad.server.com/impression/dot.gif");
     }
 
     @Test
@@ -1645,7 +1645,7 @@ public void evaluateVastXmlManager_withVideoViewabilityTrackerBothInWrapperAndIn
         VideoViewabilityTracker tracker = vastVideoConfig.getVideoViewabilityTracker();
         assertThat(tracker.getPercentViewable()).isEqualTo(70);
         assertThat(tracker.getViewablePlaytimeMS()).isEqualTo(3500);
-        assertThat(tracker.getTrackingUrl()).isEqualTo("https://ad.server.com/impression/dot.png");
+        assertThat(tracker.getContent()).isEqualTo("https://ad.server.com/impression/dot.png");
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java
index 0d935fc6..a2b0f541 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java
@@ -603,11 +603,11 @@ public void getAbsoluteProgressTrackers_withLinearXmlManager_shouldReturnCorrect
 
         VastAbsoluteProgressTracker tracker0 = trackers.get(0);
         assertThat(tracker0.getTrackingMilliseconds()).isEqualTo(0);
-        assertThat(tracker0.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+        assertThat(tracker0.getContent()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
 
         VastAbsoluteProgressTracker tracker1 = trackers.get(1);
         assertThat(tracker1.getTrackingMilliseconds()).isEqualTo(3670300);
-        assertThat(tracker1.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;" +
+        assertThat(tracker1.getContent()).isEqualTo("https://ad.doubleclick.net/activity;" +
                 "src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;" +
                 "rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
     }
@@ -621,31 +621,31 @@ public void getFractionalTrackers_withLinearXmlManager_shouldReturnCorrectValues
 
         VastFractionalProgressTracker tracker0 = trackers.get(0);
         assertThat(tracker0.trackingFraction()).isEqualTo(0.13f);
-        assertThat(tracker0.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+        assertThat(tracker0.getContent()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
 
         VastFractionalProgressTracker tracker1 = trackers.get(1);
         assertThat(tracker1.trackingFraction()).isEqualTo(0.25f);
-        assertThat(tracker1.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;");
+        assertThat(tracker1.getContent()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;");
 
         VastFractionalProgressTracker tracker2 = trackers.get(2);
         assertThat(tracker2.trackingFraction()).isEqualTo(0.25f);
-        assertThat(tracker2.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?");
+        assertThat(tracker2.getContent()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?");
 
         VastFractionalProgressTracker tracker3 = trackers.get(3);
         assertThat(tracker3.trackingFraction()).isEqualTo(0.5f);
-        assertThat(tracker3.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;");
+        assertThat(tracker3.getContent()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;");
 
         VastFractionalProgressTracker tracker4 = trackers.get(4);
         assertThat(tracker4.trackingFraction()).isEqualTo(0.5f);
-        assertThat(tracker4.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?");
+        assertThat(tracker4.getContent()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?");
 
         VastFractionalProgressTracker tracker5 = trackers.get(5);
         assertThat(tracker5.trackingFraction()).isEqualTo(0.75f);
-        assertThat(tracker5.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;");
+        assertThat(tracker5.getContent()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;");
 
         VastFractionalProgressTracker tracker6 = trackers.get(6);
         assertThat(tracker6.trackingFraction()).isEqualTo(0.75f);
-        assertThat(tracker6.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?");
+        assertThat(tracker6.getContent()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?");
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
index dd316ae0..9053b737 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
@@ -732,11 +732,12 @@ public String build() {
                     paramIfNotEmpty("iso", countryIso) +
                     paramIfNotEmpty("cn", carrierName) +
                     "&ct=" + networkType +
-                    "&av=" + BuildConfig.VERSION_NAME +
+                    "&av=" + Uri.encode(BuildConfig.VERSION_NAME) +
                     "&udid=" + PlayServicesUrlRewriter.UDID_TEMPLATE +
                     "&dnt=" + PlayServicesUrlRewriter.DO_NOT_TRACK_TEMPLATE +
                     "&mr=1" +
-                    "&android_perms_ext_storage=" + externalStoragePermission;
+                    "&android_perms_ext_storage=" + externalStoragePermission +
+                    "&vv=3";
         }
 
         public AdUrlBuilder withAdUnitId(String adUnitId) {
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewCacheServiceTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewCacheServiceTest.java
new file mode 100644
index 00000000..89651a0a
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewCacheServiceTest.java
@@ -0,0 +1,140 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.os.Handler;
+
+import com.mopub.common.ExternalViewabilitySessionManager;
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import java.util.Map;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.mockito.Mockito.verifyZeroInteractions;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class WebViewCacheServiceTest {
+
+    @Mock private BaseWebView baseWebView;
+    @Mock private Interstitial interstitial;
+    @Mock private ExternalViewabilitySessionManager viewabilityManager;
+    @Mock private Handler handler;
+    private long broadcastIdentifier;
+
+    @Before
+    public void setUp() throws Exception {
+        WebViewCacheService.clearAll();
+        WebViewCacheService.setHandler(handler);
+        broadcastIdentifier = 12345;
+    }
+
+    @Test
+    public void storeWebView_shouldPopulateMap() {
+        WebViewCacheService.storeWebViewConfig(broadcastIdentifier, interstitial,
+                baseWebView, viewabilityManager);
+
+        final Map<Long, WebViewCacheService.Config> configs = WebViewCacheService.getWebViewConfigs();
+        assertThat(configs.size()).isEqualTo(1);
+        assertThat(configs.get(broadcastIdentifier).getWebView()).isEqualTo(baseWebView);
+        assertThat(configs.get(broadcastIdentifier).getWeakInterstitial().get()).isEqualTo(interstitial);
+        assertThat(configs.get(broadcastIdentifier).getViewabilityManager()).isEqualTo(viewabilityManager);
+    }
+
+    @Test
+    public void storeWebView_withEmptyCache_shouldNotSetRunnableForTrimCache() {
+        WebViewCacheService.storeWebViewConfig(broadcastIdentifier, interstitial,
+                baseWebView, viewabilityManager);
+
+        verifyZeroInteractions(handler);
+        final Map<Long, WebViewCacheService.Config> configs = WebViewCacheService.getWebViewConfigs();
+        assertThat(configs.size()).isEqualTo(1);
+        assertThat(configs.get(broadcastIdentifier).getWebView()).isEqualTo(baseWebView);
+        assertThat(configs.get(broadcastIdentifier).getWeakInterstitial().get()).isEqualTo(interstitial);
+        assertThat(configs.get(broadcastIdentifier).getViewabilityManager()).isEqualTo(viewabilityManager);
+    }
+
+    @Test
+    public void storeWebView_withNonEmptyCache_shouldSetRunnableForTrimCache() {
+        WebViewCacheService.storeWebViewConfig(broadcastIdentifier, interstitial,
+                baseWebView, viewabilityManager);
+        WebViewCacheService.storeWebViewConfig(broadcastIdentifier + 1, interstitial,
+                baseWebView, viewabilityManager);
+
+        verify(handler).removeCallbacks(WebViewCacheService.sTrimCacheRunnable);
+        verify(handler).postDelayed(WebViewCacheService.sTrimCacheRunnable,
+                WebViewCacheService.TRIM_CACHE_FREQUENCY_MILLIS);
+        verifyNoMoreInteractions(handler);
+    }
+
+    @Test
+    public void storeWebView_withMaxSizeReached_shouldTrimCache_shouldIgnoreStoreRequest() {
+        for(int i = 0; i < WebViewCacheService.MAX_SIZE; i++) {
+            WebViewCacheService.storeWebViewConfig(broadcastIdentifier + i, interstitial,
+                    baseWebView, viewabilityManager);
+        }
+        final Map<Long, WebViewCacheService.Config> configs = WebViewCacheService.getWebViewConfigs();
+        assertThat(configs.size()).isEqualTo(WebViewCacheService.MAX_SIZE);
+
+        WebViewCacheService.storeWebViewConfig(broadcastIdentifier - 1, interstitial, baseWebView,
+                viewabilityManager);
+
+        // This is called MAX_SIZE - 1 times since trim() is not called on the first run due to
+        // the maps being empty. And then this is called an additional time to test the one
+        // after MAX_SIZE is reached.
+        verify(handler, times(WebViewCacheService.MAX_SIZE)).removeCallbacks(
+                WebViewCacheService.sTrimCacheRunnable);
+        verify(handler, times(WebViewCacheService.MAX_SIZE)).postDelayed(
+                WebViewCacheService.sTrimCacheRunnable,
+                WebViewCacheService.TRIM_CACHE_FREQUENCY_MILLIS);
+
+        assertThat(configs.size()).isEqualTo(WebViewCacheService.MAX_SIZE);
+        assertThat(configs.get(broadcastIdentifier-1)).isNull();
+    }
+
+    @Test
+    public void popWebView_shouldReturnWebView_shouldRemoveMappings() {
+        WebViewCacheService.storeWebViewConfig(broadcastIdentifier, interstitial,
+                baseWebView, viewabilityManager);
+
+        final WebViewCacheService.Config result = WebViewCacheService.popWebViewConfig(broadcastIdentifier);
+
+        assertThat(WebViewCacheService.getWebViewConfigs()).isEmpty();
+        assertThat(result.getWebView()).isEqualTo(baseWebView);
+        assertThat(result.getWeakInterstitial().get()).isEqualTo(interstitial);
+        assertThat(result.getViewabilityManager()).isEqualTo(viewabilityManager);
+    }
+
+    @Test
+    public void trimCache_shouldRemoveStaleWebViews() {
+        WebViewCacheService.storeWebViewConfig(broadcastIdentifier, interstitial,
+                baseWebView, viewabilityManager);
+        WebViewCacheService.storeWebViewConfig(broadcastIdentifier + 1, mock(ResponseBodyInterstitial.class),
+                baseWebView, viewabilityManager);
+
+        final Map<Long, WebViewCacheService.Config> configs = WebViewCacheService.getWebViewConfigs();
+        // This clears the WeakReference, which allows the cache to remove the WebView associated
+        // with that interstitial.
+        configs.get(broadcastIdentifier + 1).getWeakInterstitial().clear();
+
+        WebViewCacheService.trimCache();
+
+        final Map<Long, WebViewCacheService.Config> configsResult = WebViewCacheService.getWebViewConfigs();
+
+        assertThat(configsResult.size()).isEqualTo(1);
+        assertThat(configs.get(broadcastIdentifier).getWebView()).isEqualTo(baseWebView);
+        assertThat(configs.get(broadcastIdentifier).getWeakInterstitial().get()).isEqualTo(interstitial);
+        assertThat(configs.get(broadcastIdentifier).getViewabilityManager()).isEqualTo(viewabilityManager);
+        assertThat(configsResult.get(broadcastIdentifier + 1)).isNull();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/VastUtils.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/VastUtils.java
index 65eb1f81..088d6f22 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/VastUtils.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/VastUtils.java
@@ -33,7 +33,7 @@ public static Node createNode(String xml) throws Exception {
     public static List<String> vastTrackersToStrings(List<VastTracker> vastTrackers) {
         List<String> strings = new ArrayList<String>(vastTrackers.size());
         for (VastTracker vastTracker : vastTrackers) {
-            strings.add(vastTracker.getTrackingUrl());
+            strings.add(vastTracker.getContent());
         }
         return strings;
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
index 8fc20a16..f439272b 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
@@ -7,18 +7,19 @@
 import android.content.pm.PackageManager;
 import android.content.pm.ResolveInfo;
 import android.net.Uri;
-import android.os.Build;
 import android.view.View;
 import android.widget.FrameLayout;
 
-import com.mopub.TestSdkHelper;
 import com.mopub.common.AdReport;
 import com.mopub.common.CloseableLayout.ClosePosition;
+import com.mopub.common.ExternalViewabilitySessionManager;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Utils;
 import com.mopub.mobileads.BaseVideoPlayerActivityTest;
 import com.mopub.mobileads.BuildConfig;
+import com.mopub.mobileads.Interstitial;
 import com.mopub.mobileads.MraidVideoPlayerActivity;
+import com.mopub.mobileads.WebViewCacheService;
 import com.mopub.mraid.MraidBridge.MraidBridgeListener;
 import com.mopub.mraid.MraidBridge.MraidWebView;
 import com.mopub.mraid.MraidController.MraidListener;
@@ -69,6 +70,8 @@
     @Mock private MraidListener mockMraidListener;
     @Mock private UseCustomCloseListener mockUseCustomCloseListener;
     @Mock private OrientationBroadcastReceiver mockOrientationBroadcastReceiver;
+    @Mock private MraidWebView mockWebView;
+    @Mock private ExternalViewabilitySessionManager mockViewabilityManager;
     @Captor private ArgumentCaptor<MraidBridgeListener> bridgeListenerCaptor;
     @Captor private ArgumentCaptor<MraidBridgeListener> twoPartBridgeListenerCaptor;
 
@@ -80,6 +83,7 @@
     @Before
     public void setUp() {
         ShadowApplication.setDisplayMetricsDensity(1.0f);
+        WebViewCacheService.clearAll();
 
         activity = spy(Robolectric.buildActivity(Activity.class).create().get());
         activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
@@ -106,7 +110,7 @@ public Void answer(final InvocationOnMock invocation) throws Throwable {
         subject.setMraidListener(mockMraidListener);
         subject.setOrientationBroadcastReceiver(mockOrientationBroadcastReceiver);
         subject.setRootView(rootView);
-        subject.loadContent("fake_html_data");
+        subject.fillContent(null, "fake_html_data", null);
 
         verify(mockBridge).setMraidBridgeListener(bridgeListenerCaptor.capture());
         verify(mockTwoPartBridge).setMraidBridgeListener(twoPartBridgeListenerCaptor.capture());
@@ -209,7 +213,7 @@ public void handleResize_shouldThrowExceptionForInterstitial() throws MraidComma
         subject.setRootView(rootView);
 
         // Move to DEFAULT state
-        subject.loadContent("fake_html_data");
+        subject.fillContent(null, "fake_html_data", null);
         subject.handlePageLoad();
 
         subject.handleResize(100, 200, 0, 0, ClosePosition.TOP_RIGHT, true);
@@ -341,7 +345,7 @@ public void handleExpand_shouldBeIgnoredForInterstitial() throws MraidCommandExc
         subject.setRootView(rootView);
 
         // Move to DEFAULT state
-        subject.loadContent("fake_html_data");
+        subject.fillContent(null, "fake_html_data", null);
         subject.handlePageLoad();
 
         subject.handleExpand(null, false);
@@ -559,6 +563,40 @@ public void handleOpen_withAboutBlankUrl_shouldFailSilently() {
         assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
     }
 
+    @Test
+    public void fillContent_withCacheHit_shouldNotLoadHtmlData_shouldCallMraidListenerOnLoaded() {
+        subject = new MraidController(
+                activity, mockAdReport, PlacementType.INLINE,
+                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
+        subject.setMraidListener(mockMraidListener);
+        reset(mockMraidListener, mockBridge);
+        subject.setOrientationBroadcastReceiver(mockOrientationBroadcastReceiver);
+        subject.setRootView(rootView);
+        WebViewCacheService.storeWebViewConfig(broadcastIdentifier, new Interstitial() {},
+                mockWebView, mockViewabilityManager);
+
+        subject.fillContent(broadcastIdentifier, "fake_html_data", null);
+
+        verify(mockBridge, never()).setContentHtml("fake_html_data");
+        verify(mockMraidListener).onLoaded(subject.getAdContainer());
+    }
+
+    @Test
+    public void fillContent_withCacheMiss_shouldLoadHtmlData() {
+        subject = new MraidController(
+                activity, mockAdReport, PlacementType.INLINE,
+                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
+        subject.setMraidListener(mockMraidListener);
+        reset(mockMraidListener, mockBridge);
+        subject.setOrientationBroadcastReceiver(mockOrientationBroadcastReceiver);
+        subject.setRootView(rootView);
+
+        subject.fillContent(broadcastIdentifier, "fake_html_data", null);
+
+        verify(mockBridge).setContentHtml("fake_html_data");
+        verify(mockMraidListener, never()).onLoaded(any(View.class));
+    }
+
     @Test
     public void orientationBroadcastReceiver_whenUnregistered_shouldIgnoreOnReceive() {
         Intent intent = mock(Intent.class);
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/HttpDiskCompositeDataSourceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/HttpDiskCompositeDataSourceTest.java
index a369b0ef..96f461f3 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/HttpDiskCompositeDataSourceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/HttpDiskCompositeDataSourceTest.java
@@ -4,8 +4,8 @@
 import android.content.Context;
 import android.net.Uri;
 
-import com.google.android.exoplayer.upstream.DataSpec;
-import com.google.android.exoplayer.upstream.HttpDataSource;
+import com.google.android.exoplayer2.upstream.DataSpec;
+import com.google.android.exoplayer2.upstream.HttpDataSource;
 import com.mopub.common.CacheService;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
index 80ad306f..bc9f2129 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
@@ -273,9 +273,9 @@ public void onVastVideoConfigurationPrepared_shouldMergeHeaderAndJsonClickTracke
         assertThat(actualClickTrackers.size()).isEqualTo(2);
         final VastTracker headerClickTracker = actualClickTrackers.get(0);
         final VastTracker jsonClickTracker = actualClickTrackers.get(1);
-        assertThat(headerClickTracker.getTrackingUrl()).isEqualTo("header click tracker");
+        assertThat(headerClickTracker.getContent()).isEqualTo("header click tracker");
         assertThat(headerClickTracker.isRepeatable()).isFalse();
-        assertThat(jsonClickTracker.getTrackingUrl()).isEqualTo("json click tracker");
+        assertThat(jsonClickTracker.getContent()).isEqualTo("json click tracker");
         assertThat(jsonClickTracker.isRepeatable()).isFalse();
     }
 
@@ -293,7 +293,7 @@ public void onVastVideoConfigurationPrepared_shouldDedupeHeaderAndJsonClickTrack
         final List<VastTracker> actualClickTrackers = (List<VastTracker>) argumentCaptor.getValue();
         assertThat(actualClickTrackers.size()).isEqualTo(1);
         final VastTracker clickTracker = actualClickTrackers.get(0);
-        assertThat(clickTracker.getTrackingUrl()).isEqualTo("header click tracker");
+        assertThat(clickTracker.getContent()).isEqualTo("header click tracker");
         assertThat(clickTracker.isRepeatable()).isFalse();
     }
 
@@ -315,11 +315,11 @@ public void onVastVideoConfigurationPrepared_shouldAcceptJsonArrayClickTrackers(
         final VastTracker jsonClickTracker1 = actualClickTrackers.get(0);
         final VastTracker jsonClickTracker2 = actualClickTrackers.get(1);
         final VastTracker headerClickTracker = actualClickTrackers.get(2);
-        assertThat(jsonClickTracker1.getTrackingUrl()).isEqualTo("json click tracker 1");
+        assertThat(jsonClickTracker1.getContent()).isEqualTo("json click tracker 1");
         assertThat(jsonClickTracker1.isRepeatable()).isFalse();
-        assertThat(jsonClickTracker2.getTrackingUrl()).isEqualTo("json click tracker 2");
+        assertThat(jsonClickTracker2.getContent()).isEqualTo("json click tracker 2");
         assertThat(jsonClickTracker2.isRepeatable()).isFalse();
-        assertThat(headerClickTracker.getTrackingUrl()).isEqualTo("header click tracker");
+        assertThat(headerClickTracker.getContent()).isEqualTo("header click tracker");
         assertThat(headerClickTracker.isRepeatable()).isFalse();
     }
 
@@ -340,9 +340,9 @@ public void onVastVideoConfigurationPrepared_shouldDedupeJsonArrayClickTrackers(
         assertThat(actualClickTrackers.size()).isEqualTo(2);
         final VastTracker headerClickTracker = actualClickTrackers.get(0);
         final VastTracker jsonClickTracker = actualClickTrackers.get(1);
-        assertThat(headerClickTracker.getTrackingUrl()).isEqualTo("header click tracker");
+        assertThat(headerClickTracker.getContent()).isEqualTo("header click tracker");
         assertThat(headerClickTracker.isRepeatable()).isFalse();
-        assertThat(jsonClickTracker.getTrackingUrl()).isEqualTo("json click tracker");
+        assertThat(jsonClickTracker.getContent()).isEqualTo("json click tracker");
         assertThat(jsonClickTracker.isRepeatable()).isFalse();
     }
 
@@ -632,9 +632,6 @@ public void onStateChanged_shouldAppropriatelySetVideoState() {
         subject.prepare(mockRootView);
         subject.render(mockMediaLayout);
 
-        subject.onStateChanged(true, NativeVideoController.STATE_PREPARING);
-        assertThat(subject.getVideoState()).isEqualTo(VideoState.LOADING);
-
         subject.onStateChanged(true, NativeVideoController.STATE_IDLE);
         assertThat(subject.getVideoState()).isEqualTo(VideoState.LOADING);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
index 076e4ff1..59be34df 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
@@ -304,7 +304,7 @@ public void generateUrlString_withOnlyAdUnitSet_shouldReturnMinimumUrl() {
                         TEST_SCREEN_HEIGHT +
                         "&sc_a=" +
                         TEST_DENSITY +
-                        "&ct=3&av=" + BuildConfig.VERSION_NAME +
+                        "&ct=3&av=" + Uri.encode(BuildConfig.VERSION_NAME) +
                         "&udid=mp_tmpl_advertising_id&dnt=mp_tmpl_do_not_track");
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoControllerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoControllerTest.java
index 33234327..76187ea0 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoControllerTest.java
@@ -6,18 +6,26 @@
 import android.graphics.drawable.BitmapDrawable;
 import android.media.AudioManager;
 import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.view.Surface;
 import android.view.TextureView;
 
-import com.google.android.exoplayer.ExoPlaybackException;
-import com.google.android.exoplayer.ExoPlayer;
-import com.google.android.exoplayer.MediaCodecAudioTrackRenderer;
-import com.google.android.exoplayer.MediaCodecVideoTrackRenderer;
+import com.google.android.exoplayer2.C;
+import com.google.android.exoplayer2.ExoPlaybackException;
+import com.google.android.exoplayer2.ExoPlayer;
+import com.google.android.exoplayer2.ExoPlayer.ExoPlayerMessage;
+import com.google.android.exoplayer2.LoadControl;
+import com.google.android.exoplayer2.Renderer;
+import com.google.android.exoplayer2.source.MediaSource;
+import com.google.android.exoplayer2.video.MediaCodecVideoRenderer;
+import com.google.android.exoplayer2.audio.MediaCodecAudioRenderer;
+import com.google.android.exoplayer2.trackselection.TrackSelector;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.VastTracker;
 import com.mopub.mobileads.VastVideoConfig;
-import com.mopub.nativeads.NativeVideoController.ExoPlayerFactory;
+import com.mopub.nativeads.NativeVideoController.MoPubExoPlayerFactory;
 import com.mopub.nativeads.NativeVideoController.Listener;
 import com.mopub.nativeads.NativeVideoController.NativeVideoProgressRunnable;
 import com.mopub.nativeads.NativeVideoController.NativeVideoProgressRunnable.ProgressListener;
@@ -30,11 +38,13 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
 import org.mockito.Mock;
 import org.mockito.Mockito;
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -52,9 +62,11 @@
 import static org.mockito.Matchers.anyInt;
 import static org.mockito.Matchers.argThat;
 import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.atLeast;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 import static org.mockito.Mockito.when;
@@ -80,6 +92,10 @@
     @Mock private VisibilityChecker mockVisibilityChecker;
     @Mock private MoPubRequestQueue mockRequestQueue;
     @Mock private AudioManager mockAudioManager;
+    @Mock private MediaCodecVideoRenderer mockVideoRenderer;
+    @Mock private MediaCodecAudioRenderer mockAudioRenderer;
+    @Mock private TrackSelector mockTrackSelector;
+    @Mock private LoadControl mockLoadControl;
 
     @Before
     public void setUp() {
@@ -141,10 +157,10 @@ public void execute() {
                 activity,
                 vastVideoConfig,
                 mockNativeVideoProgressRunnable,
-                new ExoPlayerFactory() {
+                new MoPubExoPlayerFactory() {
                     @Override
-                    public ExoPlayer newInstance(int rendererCount, int minBufferMs,
-                            int minRebufferMs) {
+                    public ExoPlayer newInstance(@NonNull final Renderer[] renderers,
+                            @NonNull final TrackSelector trackSelector, @Nullable LoadControl loadControl) {
                         return mockExoPlayer;
                     }
                 },
@@ -217,12 +233,16 @@ public void getPlaybackState_withNonNullExoPlayer_shouldReturnExoPlayerState() {
     @Test
     public void setAudioEnabled_withTrue_shouldSetVolumeOnExoPlayer() {
         subject.prepare(this);
+        reset(mockExoPlayer);
         subject.setAudioEnabled(true);
 
-        verify(mockExoPlayer).sendMessage(
-                any(MediaCodecAudioTrackRenderer.class),
-                eq(MediaCodecAudioTrackRenderer.MSG_SET_VOLUME),
-                eq(1.0f));
+        ArgumentCaptor<ExoPlayerMessage> captor = ArgumentCaptor.forClass(ExoPlayerMessage.class);
+        verify(mockExoPlayer).sendMessages(captor.capture());
+
+        ExoPlayerMessage message = captor.getValue();
+        assertThat(message.target).isInstanceOf(MediaCodecAudioRenderer.class);
+        assertThat(message.messageType).isEqualTo(C.MSG_SET_VOLUME);
+        assertThat(message.message).isEqualTo(1.0f);
     }
 
     @Test
@@ -234,10 +254,13 @@ public void setAudioEnabled_withFalse_shouldDisableVolumeOnExoPlayer() {
 
         subject.setAudioEnabled(false);
 
-        verify(mockExoPlayer).sendMessage(
-                any(MediaCodecAudioTrackRenderer.class),
-                eq(MediaCodecAudioTrackRenderer.MSG_SET_VOLUME),
-                eq(0.0f));
+        ArgumentCaptor<ExoPlayerMessage> captor = ArgumentCaptor.forClass(ExoPlayerMessage.class);
+        verify(mockExoPlayer).sendMessages(captor.capture());
+
+        ExoPlayerMessage message = captor.getValue();
+        assertThat(message.target).isInstanceOf(MediaCodecAudioRenderer.class);
+        assertThat(message.messageType).isEqualTo(C.MSG_SET_VOLUME);
+        assertThat(message.message).isEqualTo(0.0f);
     }
 
     @Test
@@ -261,25 +284,27 @@ public void setAppAudioEnabled_withFalse_shouldAbandonAudioFocus() throws Except
     public void setAudioVolume_withAudioEnabled_shouldSetExoPlayerVolume() throws Exception {
         subject.prepare(this);
         subject.setAudioEnabled(true);
+        reset(mockExoPlayer);
 
         subject.setAudioVolume(0.3f);
 
-        verify(mockExoPlayer).sendMessage(
-                any(MediaCodecAudioTrackRenderer.class),
-                eq(MediaCodecAudioTrackRenderer.MSG_SET_VOLUME),
-                eq(0.3f));
+        ArgumentCaptor<ExoPlayerMessage> captor = ArgumentCaptor.forClass(ExoPlayerMessage.class);
+        verify(mockExoPlayer).sendMessages(captor.capture());
+
+        ExoPlayerMessage message = captor.getValue();
+        assertThat(message.target).isInstanceOf(MediaCodecAudioRenderer.class);
+        assertThat(message.messageType).isEqualTo(C.MSG_SET_VOLUME);
+        assertThat(message.message).isEqualTo(0.3f);
     }
 
     @Test
     public void setAudioVolume_withAudioDisabled_shouldDoNothing() throws Exception {
         subject.prepare(this);
+        reset(mockExoPlayer);
 
         subject.setAudioVolume(0.3f);
 
-        verify(mockExoPlayer, never()).sendMessage(
-                any(MediaCodecAudioTrackRenderer.class),
-                eq(MediaCodecAudioTrackRenderer.MSG_SET_VOLUME),
-                eq(0.3f));
+        verify(mockExoPlayer, never()).sendMessages(any(ExoPlayerMessage.class));
     }
 
     @Test
@@ -289,10 +314,13 @@ public void setTextureView_shouldSetTextureViewOnVideoProgressRunnable_shouldSet
 
         subject.setTextureView(mockTextureView);
 
-        verify(mockNativeVideoProgressRunnable).setTextureView(mockTextureView);
-        verify(mockExoPlayer).sendMessage(any(MediaCodecVideoTrackRenderer.class),
-                eq(MediaCodecVideoTrackRenderer.MSG_SET_SURFACE),
-                any(Surface.class));
+        ArgumentCaptor<ExoPlayerMessage> captor = ArgumentCaptor.forClass(ExoPlayerMessage.class);
+        verify(mockExoPlayer).sendMessages(captor.capture());
+
+        ExoPlayerMessage message = captor.getValue();
+        assertThat(message.target).isInstanceOf(MediaCodecVideoRenderer.class);
+        assertThat(message.messageType).isEqualTo(C.MSG_SET_SURFACE);
+        assertThat(message.message).isInstanceOf(Surface.class);
     }
 
     @Test
@@ -306,8 +334,19 @@ public void prepare_shouldClearExistingPlayer() {
         // This will clear the previous player
         subject.prepare(this);
 
-        verify(mockExoPlayer).sendMessage(any(MediaCodecVideoTrackRenderer.class),
-                eq(MediaCodecVideoTrackRenderer.MSG_SET_SURFACE), eq(null));
+        // Ensure the first two calls zero out the surface and disable audio
+        ArgumentCaptor<ExoPlayerMessage> captor = ArgumentCaptor.forClass(ExoPlayerMessage.class);
+        verify(mockExoPlayer, atLeast(2)).sendMessages(captor.capture());
+
+        List<ExoPlayerMessage> messages = captor.getAllValues();
+
+        assertThat(messages.get(0).target).isInstanceOf(MediaCodecVideoRenderer.class);
+        assertThat(messages.get(0).messageType).isEqualTo(C.MSG_SET_SURFACE);
+        assertThat(messages.get(0).message).isNull();
+        assertThat(messages.get(1).target).isInstanceOf(MediaCodecAudioRenderer.class);
+        assertThat(messages.get(1).messageType).isEqualTo(C.MSG_SET_VOLUME);
+        assertThat(messages.get(1).message).isEqualTo(0f);
+
         verify(mockExoPlayer).stop();
         verify(mockExoPlayer).release();
         verify(mockNativeVideoProgressRunnable).stop();
@@ -316,37 +355,42 @@ public void prepare_shouldClearExistingPlayer() {
 
     @Test
     public void prepare_shouldPreparePlayer() {
-        ExoPlayerFactory mockExoPlayerFactory = mock(ExoPlayerFactory.class);
-        when(mockExoPlayerFactory.newInstance(2, 1000, 5000)).thenReturn(mockExoPlayer);
+        MoPubExoPlayerFactory mockMoPubExoPlayerFactory = mock(MoPubExoPlayerFactory.class);
+        when(mockMoPubExoPlayerFactory.newInstance(
+                any(Renderer[].class),
+                any(TrackSelector.class),
+                any(LoadControl.class))
+        ).thenReturn(mockExoPlayer);
         subject = createForId(123,
                 activity,
                 vastVideoConfig,
                 mockNativeVideoProgressRunnable,
-                mockExoPlayerFactory,
+                mockMoPubExoPlayerFactory,
                 null,
                 mockAudioManager);
         subject.prepare(this);
 
-        verify(mockExoPlayerFactory).newInstance(2, 1000, 5000);
+        verify(mockMoPubExoPlayerFactory).newInstance(any(Renderer[].class),
+                any(TrackSelector.class), any(LoadControl.class));
         verify(mockNativeVideoProgressRunnable).setExoPlayer(mockExoPlayer);
         verify(mockNativeVideoProgressRunnable).startRepeating(50);
         verify(mockExoPlayer).addListener(subject);
-        verify(mockExoPlayer).prepare(any(MediaCodecAudioTrackRenderer.class),
-                any(MediaCodecVideoTrackRenderer.class));
+        verify(mockExoPlayer).prepare(any(MediaSource.class));
 
-        // set audio
-        verify(mockExoPlayer).sendMessage(
-                any(MediaCodecAudioTrackRenderer.class),
-                eq(MediaCodecAudioTrackRenderer.MSG_SET_VOLUME),
-                eq(0.0f));
+        // set audio and surface
+        ArgumentCaptor<ExoPlayerMessage> captor = ArgumentCaptor.forClass(ExoPlayerMessage.class);
+        verify(mockExoPlayer, times(2)).sendMessages(captor.capture());
+
+        List<ExoPlayerMessage> messages = captor.getAllValues();
+        assertThat(messages.get(0).target).isInstanceOf(MediaCodecAudioRenderer.class);
+        assertThat(messages.get(0).messageType).isEqualTo(C.MSG_SET_VOLUME);
+        assertThat(messages.get(0).message).isEqualTo(0f);
+        assertThat(messages.get(1).target).isInstanceOf(MediaCodecVideoRenderer.class);
+        assertThat(messages.get(1).messageType).isEqualTo(C.MSG_SET_SURFACE);
+        assertThat(messages.get(1).message).isNull();
 
         // play when ready
         verify(mockExoPlayer).setPlayWhenReady(false);
-
-        // set surface
-        verify(mockExoPlayer).sendMessage(any(MediaCodecVideoTrackRenderer.class),
-                eq(MediaCodecVideoTrackRenderer.MSG_SET_SURFACE),
-                eq(null));
     }
 
     @Test
@@ -362,8 +406,13 @@ public void clear_shouldSetPlayWhenReadyFalse_shouldClearExistingPlayer() {
         verify(mockExoPlayer).setPlayWhenReady(false);
 
         // clear exo player
-        verify(mockExoPlayer).sendMessage(any(MediaCodecVideoTrackRenderer.class),
-                eq(MediaCodecVideoTrackRenderer.MSG_SET_SURFACE), eq(null));
+        ArgumentCaptor<ExoPlayerMessage> captor = ArgumentCaptor.forClass(ExoPlayerMessage.class);
+        verify(mockExoPlayer).sendMessages(captor.capture());
+        ExoPlayerMessage message = captor.getValue();
+        assertThat(message.target).isInstanceOf(MediaCodecVideoRenderer.class);
+        assertThat(message.messageType).isEqualTo(C.MSG_SET_SURFACE);
+        assertThat(message.message).isNull();
+
         verify(mockExoPlayer).stop();
         verify(mockExoPlayer).release();
         verify(mockNativeVideoProgressRunnable).setExoPlayer(null);
@@ -378,8 +427,12 @@ public void release_withMatchingOwner_shouldClearExistingPlayer() {
         subject.release(this);
 
         // clear exo player
-        verify(mockExoPlayer).sendMessage(any(MediaCodecVideoTrackRenderer.class),
-                eq(MediaCodecVideoTrackRenderer.MSG_SET_SURFACE), eq(null));
+        ArgumentCaptor<ExoPlayerMessage> captor = ArgumentCaptor.forClass(ExoPlayerMessage.class);
+        verify(mockExoPlayer).sendMessages(captor.capture());
+        ExoPlayerMessage message = captor.getValue();
+        assertThat(message.target).isInstanceOf(MediaCodecVideoRenderer.class);
+        assertThat(message.messageType).isEqualTo(C.MSG_SET_SURFACE);
+        assertThat(message.message).isNull();
         verify(mockExoPlayer).stop();
         verify(mockExoPlayer).release();
         verify(mockNativeVideoProgressRunnable).setExoPlayer(null);
@@ -450,7 +503,7 @@ public void getDuration_shouldReturnProgressRunnableDuration() {
 
     @Test
     public void onPlayerError_shouldNotifyListener_shouldRequestProgressRunnableToStop() {
-        ExoPlaybackException exoPlaybackException = new ExoPlaybackException("exception");
+        ExoPlaybackException exoPlaybackException = ExoPlaybackException.createForSource(new IOException(""));
         subject.setListener(mockListener);
         subject.onPlayerError(exoPlaybackException);
 
@@ -464,10 +517,10 @@ public void handleCtaClick_shouldInvokeVastVideoConfigHandleClick() {
                 activity,
                 mockVastVideoConfig,
                 mockNativeVideoProgressRunnable,
-                new ExoPlayerFactory() {
+                new MoPubExoPlayerFactory() {
                     @Override
-                    public ExoPlayer newInstance(int rendererCount, int minBufferMs,
-                            int minRebufferMs) {
+                    public ExoPlayer newInstance(Renderer[] renderers, TrackSelector trackSelector,
+                            LoadControl loadControl) {
                         return mockExoPlayer;
                     }
                 },
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java
index 9bb34784..6204075d 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java
@@ -254,9 +254,6 @@ public void onSurfaceTextureDestroyed_shouldReleaseVideoController_shouldApplySt
 
     @Test
     public void onStateChanged_shouldAppropriatelySetVideoState() {
-        subject.onStateChanged(true, NativeVideoController.STATE_PREPARING);
-        assertThat(subject.getVideoState()).isEqualTo(VideoState.LOADING);
-
         subject.onStateChanged(true, NativeVideoController.STATE_IDLE);
         assertThat(subject.getVideoState()).isEqualTo(VideoState.LOADING);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java
index 56f0bc59..f13a663f 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java
@@ -1,5 +1,6 @@
 package com.mopub.nativeads.factories;
 
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
 import com.mopub.nativeads.CustomEventNative;
 
@@ -14,7 +15,7 @@
 
 
 @Config(constants = BuildConfig.class)
-@RunWith(RobolectricGradleTestRunner.class)
+@RunWith(SdkTestRunner.class)
 public class CustomEventNativeFactoryTest {
 
     @Before
diff --git a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java b/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
index 646c2dc4..877726ba 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
@@ -474,8 +474,6 @@ public void getHeaders_withLocaleLanguageAsEmptyString_shouldNotAddLanguageHeade
         activity.getResources().getConfiguration().locale = new Locale(" ");
 
         assertThat(subject.getHeaders()).isEqualTo(expectedHeaders);
-
-
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java b/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java
index 8af5748e..cd0ab708 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java
@@ -56,8 +56,7 @@ public void setUp() {
         final HurlStack.UrlRewriter urlRewriter = new PlayServicesUrlRewriter(clientMetadata.getDeviceId(), activity);
         // No Custom SSL Factory
 
-        final String userAgent = Networking.getUserAgent(activity.getApplicationContext());
-        HttpStack httpStack = new RequestQueueHttpStack(userAgent, urlRewriter);
+        HttpStack httpStack = new RequestQueueHttpStack("test_user_agent", urlRewriter);
 
         Network network = new BasicNetwork(httpStack);
         File volleyCacheDir = new File(activity.getCacheDir().getPath() + File.separator
diff --git a/mopub-sdk/src/test/resources/robolectric.properties b/mopub-sdk/src/test/resources/robolectric.properties
index 3cbe9a8d..f339de43 100644
--- a/mopub-sdk/src/test/resources/robolectric.properties
+++ b/mopub-sdk/src/test/resources/robolectric.properties
@@ -1,3 +1,3 @@
 sdk=21
-shadows=com.mopub.nativeads.test.support.MoPubShadowDisplay,com.mopub.nativeads.test.support.MoPubShadowBitmap,com.mopub.mobileads.test.support.ShadowVastVideoView
-manifest=src/main/AndroidManifest.xml
\ No newline at end of file
+shadows=com.mopub.nativeads.test.support.MoPubShadowDisplay,com.mopub.nativeads.test.support.MoPubShadowBitmap,com.mopub.mobileads.test.support.ShadowVastVideoView,com.mopub.common.util.test.support.ShadowReflection
+manifest=src/main/AndroidManifest.xml
