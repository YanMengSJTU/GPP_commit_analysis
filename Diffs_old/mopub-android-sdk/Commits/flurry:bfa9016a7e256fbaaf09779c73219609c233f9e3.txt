diff --git a/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java b/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java
new file mode 100644
index 00000000..9cf1db8c
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java
@@ -0,0 +1,71 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.os.Build;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.flurry.android.FlurryAgent;
+
+public final class FlurryAgentWrapper {
+    public static final String PARAM_API_KEY = "apiKey";
+    public static final String PARAM_AD_SPACE_NAME = "adSpaceName";
+
+    private static final String ORIGIN_IDENTIFIER = "Flurry_Mopub_Android";
+    private static final String ORIGIN_VERSION = "6.3.1";
+    private static FlurryAgentWrapper sWrapper;
+
+    private FlurryAgent.Builder mAgentBuilder;
+
+    public static synchronized FlurryAgentWrapper getInstance() {
+        if (sWrapper == null) {
+            sWrapper = new FlurryAgentWrapper();
+        }
+
+        return sWrapper;
+    }
+
+    private FlurryAgentWrapper() {
+        mAgentBuilder = new FlurryAgent.Builder()
+                .withLogEnabled(false)
+                .withLogLevel(Log.INFO);
+
+        FlurryAgent.addOrigin(ORIGIN_IDENTIFIER, ORIGIN_VERSION);
+    }
+
+    public synchronized void startSession(Context context, String apiKey) {
+        // validate parameters
+        if (context == null || TextUtils.isEmpty(apiKey)) {
+            return;
+        }
+
+        // init
+        if (!FlurryAgent.isSessionActive()) {
+            mAgentBuilder.build(context, apiKey);
+
+            // sessions are automatic on ICS+
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
+                return;
+            }
+
+            FlurryAgent.onStartSession(context);
+        }
+    }
+
+    public synchronized void endSession(Context context) {
+        // validate parameters
+        if (context == null) {
+            return;
+        }
+
+	if (FlurryAgent.isSessionActive()) {
+            // sessions are automatic on ICS+
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
+                return;
+            }
+
+            FlurryAgent.onEndSession(context);
+        }
+    }
+}
+
diff --git a/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java b/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java
new file mode 100644
index 00000000..acd4a805
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java
@@ -0,0 +1,177 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.util.Log;
+import android.widget.FrameLayout;
+
+import com.flurry.android.ads.FlurryAdBanner;
+import com.flurry.android.ads.FlurryAdBannerListener;
+import com.flurry.android.ads.FlurryAdErrorType;
+
+import java.util.Map;
+
+import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
+
+class FlurryCustomEventBanner extends com.mopub.mobileads.CustomEventBanner {
+    private static final String LOG_TAG = FlurryCustomEventBanner.class.getSimpleName();
+
+    private Context mContext;
+    private CustomEventBannerListener mListener;
+    private FrameLayout mLayout;
+
+    private String mAdSpaceName;
+
+    private FlurryAdBanner mBanner;
+
+    // CustomEventBanner
+    @Override
+    protected void loadBanner(Context context,
+                              CustomEventBannerListener listener,
+                              Map<String, Object> localExtras, Map<String, String> serverExtras) {
+        if (context == null) {
+            Log.e(LOG_TAG, "Context cannot be null.");
+            listener.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        if (listener == null) {
+            Log.e(LOG_TAG, "CustomEventBannerListener cannot be null.");
+            return;
+        }
+
+        if (!(context instanceof Activity)) {
+            Log.e(LOG_TAG, "Ad can be rendered only in Activity context.");
+            listener.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        if (!extrasAreValid(serverExtras)) {
+            listener.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mContext = context;
+        mListener = listener;
+        mLayout = new FrameLayout(context);
+
+        String apiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
+        mAdSpaceName = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
+
+        FlurryAgentWrapper.getInstance().startSession(context, apiKey);
+
+        Log.d(LOG_TAG, "fetch Flurry Ad (" + mAdSpaceName + ") -- " + mLayout.toString());
+        mBanner = new FlurryAdBanner(mContext, mLayout, mAdSpaceName);
+        mBanner.setListener(new FlurryMopubBannerListener());
+        mBanner.fetchAd();
+    }
+
+    @Override
+    protected void onInvalidate() {
+        if (mContext == null) {
+            return;
+        }
+
+        Log.d(LOG_TAG, "MoPub issued onInvalidate (" + mAdSpaceName + ")");
+
+        if (mBanner != null) {
+            mBanner.destroy();
+            mBanner = null;
+        }
+
+        FlurryAgentWrapper.getInstance().endSession(mContext);
+
+        mContext = null;
+        mListener = null;
+        mLayout = null;
+    }
+
+    private boolean extrasAreValid(Map<String, String> serverExtras) {
+        return serverExtras != null && serverExtras.containsKey(FlurryAgentWrapper.PARAM_API_KEY) &&
+                serverExtras.containsKey(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
+
+    }
+
+    // FlurryAdListener
+    private class FlurryMopubBannerListener implements FlurryAdBannerListener {
+        private final String LOG_TAG = getClass().getSimpleName();
+
+        @Override
+        public void onFetched(FlurryAdBanner adBanner) {
+            Log.d(LOG_TAG, "onFetched(" + adBanner.toString() + ")");
+
+            if (mBanner != null) {
+                mBanner.displayAd();
+            }
+        }
+
+        @Override
+        public void onRendered(FlurryAdBanner adBanner) {
+            Log.d(LOG_TAG, "onRendered(" + adBanner.toString() + ")");
+
+            if (mListener != null) {
+                mListener.onBannerLoaded(mLayout);
+            }
+        }
+
+        @Override
+        public void onShowFullscreen(FlurryAdBanner adBanner) {
+            Log.d(LOG_TAG, "onShowFullscreen(" + adBanner.toString() + ")");
+
+            if (mListener != null) {
+                mListener.onBannerExpanded();
+            }
+        }
+
+        @Override
+        public void onCloseFullscreen(FlurryAdBanner adBanner) {
+            Log.d(LOG_TAG, "onCloseFullscreen(" + adBanner.toString() + ")");
+
+            if (mListener != null) {
+                mListener.onBannerCollapsed();
+            }
+        }
+
+        @Override
+        public void onAppExit(FlurryAdBanner adBanner) {
+            Log.d(LOG_TAG, "onAppExit(" + adBanner.toString() + ")");
+
+            if (mListener != null) {
+                mListener.onLeaveApplication();
+            }
+        }
+
+        @Override
+        public void onClicked(FlurryAdBanner adBanner) {
+            Log.d(LOG_TAG, "onClicked " + adBanner.toString());
+
+            if (mListener != null) {
+                mListener.onBannerClicked();
+            }
+        }
+
+        @Override
+        public void onVideoCompleted(FlurryAdBanner adBanner) {
+            Log.d(LOG_TAG, "onVideoCompleted " + adBanner.toString());
+            
+            // no-op
+        }
+
+        @Override
+        public void onError(FlurryAdBanner adBanner, FlurryAdErrorType adErrorType,
+                            int errorCode) {
+            Log.d(LOG_TAG, "onError(" + adBanner.toString() + adErrorType.toString() +
+                    errorCode + ")");
+
+            if (mListener != null) {
+                if (FlurryAdErrorType.FETCH.equals(adErrorType)) {
+                    mListener.onBannerFailed(NETWORK_NO_FILL);
+                } else if (FlurryAdErrorType.RENDER.equals(adErrorType)) {
+                    mListener.onBannerFailed(NETWORK_INVALID_STATE);               
+                }
+            }
+        }
+    }
+}
diff --git a/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java b/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java
new file mode 100644
index 00000000..34951223
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java
@@ -0,0 +1,180 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.util.Log;
+
+import com.flurry.android.ads.FlurryAdErrorType;
+import com.flurry.android.ads.FlurryAdInterstitial;
+import com.flurry.android.ads.FlurryAdInterstitialListener;
+
+import java.util.Map;
+
+import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
+
+class FlurryCustomEventInterstitial extends com.mopub.mobileads.CustomEventInterstitial {
+    private static final String LOG_TAG = FlurryCustomEventInterstitial.class.getSimpleName();
+
+    private Context mContext;
+    private CustomEventInterstitialListener mListener;
+
+    private String mAdSpaceName;
+
+    private FlurryAdInterstitial mInterstitial;
+
+    // CustomEventInterstitial
+    @Override
+    protected void loadInterstitial(Context context,
+                                    CustomEventInterstitialListener listener,
+                                    Map<String, Object> localExtras,
+                                    Map<String, String> serverExtras) {
+        if (context == null) {
+            Log.e(LOG_TAG, "Context cannot be null.");
+            listener.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        if (listener == null) {
+            Log.e(LOG_TAG, "CustomEventInterstitialListener cannot be null.");
+            return;
+        }
+
+        if (!(context instanceof Activity)) {
+            Log.e(LOG_TAG, "Ad can be rendered only in Activity context.");
+            listener.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        if (!extrasAreValid(serverExtras)) {
+            listener.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mContext = context;
+        mListener = listener;
+
+        String apiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
+        mAdSpaceName = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
+
+        FlurryAgentWrapper.getInstance().startSession(context, apiKey);
+
+        Log.d(LOG_TAG, "fetch Flurry ad (" + mAdSpaceName + ")");
+        mInterstitial = new FlurryAdInterstitial(mContext, mAdSpaceName);
+        mInterstitial.setListener(new FlurryMopubInterstitialListener());
+        mInterstitial.fetchAd();
+    }
+
+    @Override
+    protected void onInvalidate() {
+        if (mContext == null) {
+            return;
+        }
+
+        Log.d(LOG_TAG, "MoPub issued onInvalidate (" + mAdSpaceName + ")");
+
+        if (mInterstitial != null) {
+            mInterstitial.destroy();
+            mInterstitial = null;
+        }
+
+        FlurryAgentWrapper.getInstance().endSession(mContext);
+
+        mContext = null;
+        mListener = null;
+    }
+
+    private boolean extrasAreValid(Map<String, String> serverExtras) {
+        return serverExtras != null && serverExtras.containsKey(FlurryAgentWrapper.PARAM_API_KEY) &&
+                serverExtras.containsKey(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
+    }
+
+    @Override
+    protected void showInterstitial() {
+        Log.d(LOG_TAG, "MoPub issued showInterstitial (" + mAdSpaceName + ")");
+
+        if (mInterstitial != null) {
+            mInterstitial.displayAd();
+        }
+    }
+
+    // FlurryAdListener
+    private class FlurryMopubInterstitialListener implements FlurryAdInterstitialListener {
+        private final String LOG_TAG = getClass().getSimpleName();
+
+        @Override
+        public void onFetched(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onFetched(" + adInterstitial.toString() + ")");
+
+            if (mListener != null) {
+                mListener.onInterstitialLoaded();
+            }
+        }
+
+        @Override
+        public void onRendered(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onRendered(" + adInterstitial.toString() + ")");
+
+            if (mListener != null) {
+                mListener.onInterstitialShown();
+            }
+        }
+
+        @Override
+        public void onDisplay(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onDisplay(" + adInterstitial.toString() + ")");
+
+            // no-op
+        }
+
+        @Override
+        public void onClose(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onClose(" + adInterstitial.toString() + ")");
+
+            if (mListener != null) {
+                mListener.onInterstitialDismissed();
+            }
+        }
+
+        @Override
+        public void onAppExit(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onAppExit(" + adInterstitial.toString() + ")");
+
+            if (mListener != null) {
+                mListener.onLeaveApplication();
+            }
+        }
+
+        @Override
+        public void onClicked(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onClicked " + adInterstitial.toString());
+
+            if (mListener != null) {
+                mListener.onInterstitialClicked();
+            }
+        }
+
+        @Override
+        public void onVideoCompleted(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onVideoCompleted " + adInterstitial.toString());
+
+            // no-op
+        }
+
+        @Override
+        public void onError(FlurryAdInterstitial adBanner, FlurryAdErrorType adErrorType,
+                            int errorCode) {
+            Log.d(LOG_TAG, "onError(" + adBanner.toString() + adErrorType.toString() +
+                    errorCode + ")");
+
+            if (mListener != null) {
+                if (FlurryAdErrorType.FETCH.equals(adErrorType)) {
+                    mListener.onInterstitialFailed(NETWORK_NO_FILL);
+                } else if (FlurryAdErrorType.RENDER.equals(adErrorType)) {
+                    mListener.onInterstitialFailed(NETWORK_INVALID_STATE);
+                }
+            }
+        }
+    }
+}
diff --git a/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java b/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java
new file mode 100644
index 00000000..1a9c1344
--- /dev/null
+++ b/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java
@@ -0,0 +1,55 @@
+package com.mopub.nativeads;
+
+import android.app.Activity;
+import android.support.annotation.NonNull;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.flurry.android.ads.FlurryAdNative;
+import com.mopub.mobileads.FlurryAgentWrapper;
+
+import java.util.Map;
+
+public class FlurryCustomEventNative extends CustomEventNative {
+
+    private static final String LOG_TAG = FlurryCustomEventNative.class.getSimpleName();
+
+    @Override
+    protected void loadNativeAd(@NonNull final Activity activity,
+                                @NonNull final CustomEventNativeListener customEventNativeListener,
+                                @NonNull final Map<String, Object> localExtras,
+                                @NonNull final Map<String, String> serverExtras) {
+
+        final String flurryApiKey;
+        final String flurryAdSpace;
+
+        //Get the FLURRY_APIKEY and FLURRY_ADSPACE from the server.
+        if (validateExtras(serverExtras)) {
+            flurryApiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
+            flurryAdSpace = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
+
+            FlurryAgentWrapper.getInstance().startSession(activity, flurryApiKey);
+        } else {
+            customEventNativeListener.onNativeAdFailed(
+                    NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
+            Log.i(LOG_TAG, "Failed Native AdFetch: Missing required server extras" +
+                    " [FLURRY_APIKEY and/or FLURRY_ADSPACE].");
+            return;
+        }
+
+        final FlurryStaticNativeAd mflurryStaticNativeAd =
+                new FlurryStaticNativeAd(activity,
+                        new FlurryAdNative(activity, flurryAdSpace), customEventNativeListener);
+        mflurryStaticNativeAd.fetchAd();
+    }
+
+    private boolean validateExtras(final Map<String, String> serverExtras) {
+        final String flurryApiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
+        final String flurryAdSpace = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
+        Log.i(LOG_TAG, "ServerInfo fetched from Mopub " + FlurryAgentWrapper.PARAM_API_KEY + " : "
+                + flurryApiKey + " and " + FlurryAgentWrapper.PARAM_AD_SPACE_NAME + " :" +
+                flurryAdSpace);
+        return (!TextUtils.isEmpty(flurryApiKey) && !TextUtils.isEmpty(flurryAdSpace));
+    }
+
+}
diff --git a/extras/src/com/mopub/nativeads/FlurryStaticNativeAd.java b/extras/src/com/mopub/nativeads/FlurryStaticNativeAd.java
new file mode 100644
index 00000000..802782c8
--- /dev/null
+++ b/extras/src/com/mopub/nativeads/FlurryStaticNativeAd.java
@@ -0,0 +1,267 @@
+package com.mopub.nativeads;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.util.Log;
+import android.view.View;
+
+import com.flurry.android.ads.FlurryAdErrorType;
+import com.flurry.android.ads.FlurryAdNative;
+import com.flurry.android.ads.FlurryAdNativeAsset;
+import com.flurry.android.ads.FlurryAdNativeListener;
+import com.mopub.mobileads.FlurryAgentWrapper;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class FlurryStaticNativeAd extends StaticNativeAd {
+
+    public static final String EXTRA_STAR_RATING_IMG = "flurry_starratingimage";
+    public static final String EXTRA_APP_CATEGORY = "flurry_appcategorytext";
+    public static final String EXTRA_SEC_BRANDING_LOGO = "flurry_brandingimage";
+
+    private static final String LOG_TAG = FlurryStaticNativeAd.class.getSimpleName();
+    private static final String ASSET_SEC_HQ_IMAGE = "secHqImage";
+    private static final String ASSET_SEC_IMAGE = "secImage";
+    private static final String ASSET_SEC_HQ_RATING_IMG = "secHqRatingImg";
+    private static final String ASSET_SEC_HQ_BRANDING_LOGO = "secHqBrandingLogo";
+    private static final String ASSET_SEC_RATING_IMG = "secRatingImg";
+    private static final String ASSET_APP_RATING = "appRating";
+    private static final String ASSET_APP_CATEGORY = "appCategory";
+    private static final String ASSET_HEADLINE = "headline";
+    private static final String ASSET_SUMMARY = "summary";
+    private static final String ASSET_CALL_TO_ACTION = "callToAction";
+    private static final double MOPUB_STAR_RATING_SCALE = StaticNativeAd.MAX_STAR_RATING;
+
+    private final Context mContext;
+    private final CustomEventNative.CustomEventNativeListener mCustomEventNativeListener;
+    private FlurryAdNative mFlurryAdNative;
+
+    FlurryAdNativeListener listener = new FlurryAdNativeListener() {
+        @Override
+        public void onFetched(FlurryAdNative adNative) {
+            Log.d(LOG_TAG, "onFetched(" +adNative.toString() + ") Successful.");
+            FlurryStaticNativeAd.this.onFetched(adNative);
+        }
+
+        @Override
+        public void onShowFullscreen(FlurryAdNative adNative) {
+            Log.d(LOG_TAG, "onShowFullscreen(" + adNative.toString() + ")");
+        }
+
+        @Override
+        public void onCloseFullscreen(FlurryAdNative adNative) {
+            Log.d(LOG_TAG, "onCloseFullscreen(" + adNative.toString() + ")");
+        }
+
+        @Override
+        public void onAppExit(FlurryAdNative adNative) {
+            Log.d(LOG_TAG, "onAppExit(" + adNative.toString() + ")");
+        }
+
+        @Override
+        public void onClicked(FlurryAdNative adNative) {
+            Log.d(LOG_TAG, "onClicked(" +adNative.toString() + ")");
+            notifyAdClicked();
+        }
+
+        @Override
+        public void onImpressionLogged(FlurryAdNative flurryAdNative) {
+            Log.d(LOG_TAG, "onImpressionLogged(" +flurryAdNative.toString() + ")");
+            notifyAdImpressed();
+        }
+
+        @Override
+        public void onExpanded(FlurryAdNative adNative) {
+            Log.d(LOG_TAG, "onExpanded(" + adNative.toString() + ")");
+        }
+
+        @Override
+        public void onCollapsed(FlurryAdNative adNative) {
+            Log.d(LOG_TAG, "onCollapsed(" + adNative.toString() + ")");
+        }
+
+        @Override
+        public void onError(FlurryAdNative adNative, FlurryAdErrorType adErrorType, int errorCode) {
+            if (adErrorType.equals(FlurryAdErrorType.FETCH)) {
+                Log.d(LOG_TAG, "onError(" + adNative.toString() + ", " + adErrorType.toString() +
+                        ","+ errorCode + ")");
+                FlurryStaticNativeAd.this.onFetchFailed(adNative);
+            }
+        }
+    };
+
+    FlurryStaticNativeAd(Context context, FlurryAdNative adNative,
+                         CustomEventNative.CustomEventNativeListener mCustomEventNativeListener) {
+        this.mContext = context;
+        this.mFlurryAdNative = adNative;
+        this.mCustomEventNativeListener = mCustomEventNativeListener;
+    }
+
+    // region StaticNativeAd
+    @Override
+    public void prepare(@NonNull final View view) {
+        mFlurryAdNative.setTrackingView(view);
+        Log.d(LOG_TAG, "prepare(" + mFlurryAdNative.toString() + " " + view.toString() + ")");
+    }
+
+    @Override
+    public void clear(@NonNull View view) {
+        mFlurryAdNative.removeTrackingView();
+        Log.d(LOG_TAG, "clear("+ mFlurryAdNative.toString() + ")");
+    }
+
+    @Override
+    public void destroy() {
+        Log.d(LOG_TAG, "destroy(" + mFlurryAdNative.toString() + ") started.");
+        mFlurryAdNative.destroy();
+
+        FlurryAgentWrapper.getInstance().endSession(mContext);
+    }
+    //endregion
+
+    synchronized void fetchAd() {
+        Context context = mContext;
+        if (context != null) {
+            Log.d(LOG_TAG, "Fetching Flurry Native Ad now.");
+            mFlurryAdNative.setListener(listener);
+            mFlurryAdNative.fetchAd();
+        } else {
+            Log.d(LOG_TAG, "Context is null, not fetching Flurry Native Ad.");
+        }
+    }
+
+    private synchronized void onFetched(FlurryAdNative adNative) {
+        if (adNative != null) {
+            Log.d(LOG_TAG, "onFetched: Native Ad fetched successfully!"
+                    + adNative.toString());
+            setupNativeAd(adNative);
+        }
+    }
+
+    private synchronized void onFetchFailed(FlurryAdNative adNative) {
+        Log.d(LOG_TAG, "onFetchFailed: Native ad not available. "
+                + adNative.toString());
+        if (mCustomEventNativeListener != null) {
+            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_NO_FILL);
+        }
+    }
+
+    private synchronized void setupNativeAd(@NonNull FlurryAdNative adNative) {
+        FlurryAdNativeAsset coverImageAsset = adNative.getAsset(ASSET_SEC_HQ_IMAGE);
+        FlurryAdNativeAsset iconImageAsset = adNative.getAsset(ASSET_SEC_IMAGE);
+
+        if (coverImageAsset != null && !TextUtils.isEmpty(coverImageAsset.getValue())) {
+            setMainImageUrl(coverImageAsset.getValue());
+        }
+        if (iconImageAsset != null && !TextUtils.isEmpty(iconImageAsset.getValue())) {
+            setIconImageUrl(iconImageAsset.getValue());
+        }
+
+        setTitle(adNative.getAsset(ASSET_HEADLINE).getValue());
+        setText(adNative.getAsset(ASSET_SUMMARY).getValue());
+        addExtra(EXTRA_SEC_BRANDING_LOGO,
+                adNative.getAsset(ASSET_SEC_HQ_BRANDING_LOGO).getValue());
+
+        if(isAppInstallAd()) {
+            // App rating image URL may be null
+            FlurryAdNativeAsset ratingHqImageAsset = adNative
+                    .getAsset(ASSET_SEC_HQ_RATING_IMG);
+            if (ratingHqImageAsset != null && !TextUtils.isEmpty(ratingHqImageAsset.getValue())) {
+                addExtra(EXTRA_STAR_RATING_IMG, ratingHqImageAsset.getValue());
+            } else {
+                FlurryAdNativeAsset ratingImageAsset = adNative.getAsset(ASSET_SEC_RATING_IMG);
+                if (ratingImageAsset != null && !TextUtils.isEmpty(ratingImageAsset.getValue())) {
+                    addExtra(EXTRA_STAR_RATING_IMG, ratingImageAsset.getValue());
+                }
+            }
+
+            FlurryAdNativeAsset appCategoryAsset = adNative.getAsset(ASSET_APP_CATEGORY);
+            if (appCategoryAsset != null) {
+                addExtra(EXTRA_APP_CATEGORY, appCategoryAsset.getValue());
+            }
+            FlurryAdNativeAsset appRatingAsset = adNative.getAsset(ASSET_APP_RATING);
+            if(appRatingAsset != null) {
+                setStarRating(getStarRatingValue(appRatingAsset.getValue()));
+            }
+        }
+
+        FlurryAdNativeAsset ctaAsset = adNative.getAsset(ASSET_CALL_TO_ACTION);
+        if(ctaAsset != null){
+            setCallToAction(ctaAsset.getValue());
+        }
+
+        if (getImageUrls() == null || getImageUrls().isEmpty()) {
+            Log.d(LOG_TAG, "preCacheImages: No images to cache for Flurry Native Ad: " +
+                    adNative.toString());
+            mCustomEventNativeListener.onNativeAdLoaded(this);
+        } else {
+            NativeImageHelper.preCacheImages(mContext, getImageUrls(),
+                    new NativeImageHelper.ImageListener() {
+                @Override
+                public void onImagesCached() {
+                    if (mCustomEventNativeListener != null) {
+                        Log.d(LOG_TAG, "preCacheImages: Ad image cached.");
+                        mCustomEventNativeListener.onNativeAdLoaded(FlurryStaticNativeAd.this);
+                    } else {
+                        Log.d(LOG_TAG, "Unable to notify cache failure: " +
+                                "CustomEventNativeListener is null.");
+                    }
+                }
+
+                @Override
+                public void onImagesFailedToCache(NativeErrorCode errorCode) {
+                    if (mCustomEventNativeListener != null) {
+                        Log.d(LOG_TAG, "preCacheImages: Unable to cache Ad image. Error["
+                                + errorCode.toString() + "]");
+                        mCustomEventNativeListener.onNativeAdFailed(errorCode);
+                    } else {
+                        Log.d(LOG_TAG, "Unable to notify cache failure: " +
+                                "CustomEventNativeListener is null.");
+                    }
+                }
+            });
+        }
+    }
+
+    private List<String> getImageUrls() {
+        final List<String> imageUrls = new ArrayList<>(2);
+        final String mainImageUrl = getMainImageUrl();
+
+        if (mainImageUrl != null) {
+            imageUrls.add(getMainImageUrl());
+            Log.d(LOG_TAG, "Flurry Native Ad main image found.");
+        }
+
+        final String iconUrl = getIconImageUrl();
+        if (iconUrl != null) {
+            imageUrls.add(this.getIconImageUrl());
+            Log.d(LOG_TAG, "Flurry Native Ad icon image found.");
+        }
+        return imageUrls;
+    }
+
+    @Nullable private Double getStarRatingValue(@Nullable String appRatingString) {
+        // App rating String should be of the form X/Y. E.g. 80/100
+        Double rating = null;
+        if (appRatingString != null) {
+            String[] ratingParts = appRatingString.split("/");
+            if (ratingParts.length == 2) {
+                try {
+                    float numer = Integer.valueOf(ratingParts[0]);
+                    float denom = Integer.valueOf(ratingParts[1]);
+                    rating = (numer / denom) * MOPUB_STAR_RATING_SCALE;
+                } catch (NumberFormatException e) { /*Ignore and return null*/ }
+            }
+        }
+        return rating;
+    }
+
+    private boolean isAppInstallAd() {
+        return mFlurryAdNative.getAsset(ASSET_SEC_RATING_IMG) != null ||
+                mFlurryAdNative.getAsset(ASSET_SEC_HQ_RATING_IMG) != null ||
+                mFlurryAdNative.getAsset(ASSET_APP_CATEGORY) != null;
+    }
+}
\ No newline at end of file
