diff --git a/extras/src/com/mopub/mobileads/AppLovinBanner.java b/extras/src/com/mopub/mobileads/AppLovinBanner.java
new file mode 100644
index 00000000..883f2797
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/AppLovinBanner.java
@@ -0,0 +1,299 @@
+import android.app.Activity;
+import android.content.Context;
+import android.util.Log;
+
+import com.applovin.adview.AppLovinAdView;
+import com.applovin.adview.AppLovinAdViewEventListener;
+import com.applovin.sdk.AppLovinAd;
+import com.applovin.sdk.AppLovinAdClickListener;
+import com.applovin.sdk.AppLovinAdDisplayListener;
+import com.applovin.sdk.AppLovinAdLoadListener;
+import com.applovin.sdk.AppLovinAdSize;
+import com.applovin.sdk.AppLovinErrorCodes;
+import com.applovin.sdk.AppLovinSdk;
+
+import java.lang.reflect.Constructor;
+import java.lang.reflect.InvocationHandler;
+import java.lang.reflect.Method;
+import java.lang.reflect.Proxy;
+import java.util.Map;
+
+import static android.util.Log.DEBUG;
+import static android.util.Log.ERROR;
+
+/**
+ * AppLovin SDK banner adapter for MoPub.
+ * <p>
+ * Created by Thomas So on 3/6/17.
+ */
+
+public class AppLovinBanner
+        extends CustomEventBanner
+{
+    private static final boolean LOGGING_ENABLED = true;
+
+    private static final int BANNER_STANDARD_HEIGHT         = 50;
+    private static final int BANNER_HEIGHT_OFFSET_TOLERANCE = 10;
+
+    private static final String AD_WIDTH_KEY  = "com_mopub_ad_width";
+    private static final String AD_HEIGHT_KEY = "com_mopub_ad_height";
+
+    //
+    // MoPub Custom Event Methods
+    //
+
+    @Override
+    protected void loadBanner(final Context context, final CustomEventBannerListener customEventBannerListener, final Map<String, Object> localExtras, final Map<String, String> serverExtras)
+    {
+        // SDK versions BELOW 7.1.0 require a instance of an Activity to be passed in as the context
+        if ( AppLovinSdk.VERSION_CODE < 710 && !( context instanceof Activity ) )
+        {
+            log( ERROR, "Unable to request AppLovin banner. Invalid context provided." );
+            customEventBannerListener.onBannerFailed( MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR );
+
+            return;
+        }
+
+        log( DEBUG, "Requesting AppLovin banner with localExtras: " + localExtras );
+
+        final AppLovinAdSize adSize = appLovinAdSizeFromLocalExtras( localExtras );
+        if ( adSize != null )
+        {
+            final AppLovinSdk sdk = AppLovinSdk.getInstance( context );
+            sdk.setPluginVersion( "MoPub-Certified-2.1.0" );
+
+            final AppLovinAdView adView = createAdView( adSize, serverExtras, context, customEventBannerListener );
+
+            adView.setAdLoadListener( new AppLovinAdLoadListener()
+            {
+                @Override
+                public void adReceived(final AppLovinAd ad)
+                {
+                    log( DEBUG, "Successfully loaded banner ad" );
+                    customEventBannerListener.onBannerLoaded( adView );
+                }
+
+                @Override
+                public void failedToReceiveAd(final int errorCode)
+                {
+                    log( ERROR, "Failed to load banner ad with code: " + errorCode );
+                    customEventBannerListener.onBannerFailed( toMoPubErrorCode( errorCode ) );
+
+                    // TODO: Add support for backfilling on regular ad request if invalid zone entered
+                }
+            } );
+            adView.setAdDisplayListener( new AppLovinAdDisplayListener()
+            {
+                @Override
+                public void adDisplayed(final AppLovinAd ad)
+                {
+                    log( DEBUG, "Banner displayed" );
+                }
+
+                @Override
+                public void adHidden(final AppLovinAd ad)
+                {
+                    log( DEBUG, "Banner dismissed" );
+                }
+            } );
+            adView.setAdClickListener( new AppLovinAdClickListener()
+            {
+                @Override
+                public void adClicked(final AppLovinAd ad)
+                {
+                    log( DEBUG, "Banner clicked" );
+
+                    customEventBannerListener.onBannerClicked();
+                    customEventBannerListener.onLeaveApplication();
+                }
+            } );
+
+            // As of Android SDK >= 7.3.0, we added a listener for banner events
+            if ( AppLovinSdk.VERSION_CODE >= 730 )
+            {
+                adView.setAdViewEventListener( (AppLovinAdViewEventListener) AppLovinAdViewEventListenerProxy.newInstance( customEventBannerListener ) );
+            }
+
+            adView.loadNextAd();
+        }
+        else
+        {
+            log( ERROR, "Unable to request AppLovin banner" );
+
+            customEventBannerListener.onBannerFailed( MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR );
+        }
+    }
+
+    @Override
+    protected void onInvalidate() {}
+
+    //
+    // Utility Methods
+    //
+
+    private AppLovinAdSize appLovinAdSizeFromLocalExtras(final Map<String, Object> localExtras)
+    {
+        // Handle trivial case
+        if ( localExtras == null || localExtras.isEmpty() )
+        {
+            log( ERROR, "No serverExtras provided" );
+            return null;
+        }
+
+        try
+        {
+            final int width = (Integer) localExtras.get( AD_WIDTH_KEY );
+            final int height = (Integer) localExtras.get( AD_HEIGHT_KEY );
+
+            // We have valid dimensions
+            if ( width > 0 && height > 0 )
+            {
+                log( DEBUG, "Valid width (" + width + ") and height (" + height + ") provided" );
+
+                // Assume fluid width, and check for height with offset tolerance
+                final int offset = Math.abs( BANNER_STANDARD_HEIGHT - height );
+
+                if ( offset <= BANNER_HEIGHT_OFFSET_TOLERANCE )
+                {
+                    return AppLovinAdSize.BANNER;
+                }
+                else if ( height <= AppLovinAdSize.MREC.getHeight() )
+                {
+                    return AppLovinAdSize.MREC;
+                }
+                else
+                {
+                    log( ERROR, "Provided dimensions does not meet the dimensions required of banner or mrec ads" );
+                }
+            }
+            else
+            {
+                log( ERROR, "Invalid width (" + width + ") and height (" + height + ") provided" );
+            }
+        }
+        catch ( Throwable th )
+        {
+            log( ERROR, "Encountered error while parsing width and height from serverExtras", th );
+        }
+
+        return null;
+    }
+
+    //
+    // Utility Methods
+    //
+
+    private AppLovinAdView createAdView(final AppLovinAdSize size, final Map<String, String> serverExtras, final Context parentContext, final CustomEventBannerListener customEventBannerListener)
+    {
+        AppLovinAdView adView = null;
+
+        try
+        {
+            // AppLovin SDK < 7.1.0 uses an Activity, as opposed to Context in >= 7.1.0
+            final Class<?> contextClass = ( AppLovinSdk.VERSION_CODE < 710 ) ? Activity.class : Context.class;
+
+            // Zones support is available on AppLovin SDK 7.5.0 and higher
+            final Constructor<?> constructor;
+            if ( AppLovinSdk.VERSION_CODE >= 750 && serverExtras != null && serverExtras.containsKey( "zone_id" ) )
+            {
+                // Dynamically create an instance of AppLovinAdView with a given zone without breaking backwards compatibility for publishers on older SDKs.
+                constructor = AppLovinAdView.class.getConstructor( AppLovinAdSize.class, String.class, contextClass );
+                adView = (AppLovinAdView) constructor.newInstance( size, serverExtras.get( "zone_id" ), parentContext );
+            }
+            else
+            {
+                constructor = AppLovinAdView.class.getConstructor( AppLovinAdSize.class, contextClass );
+                adView = (AppLovinAdView) constructor.newInstance( size, parentContext );
+            }
+        }
+        catch ( Throwable th )
+        {
+            log( ERROR, "Unable to get create AppLovinAdView." );
+            customEventBannerListener.onBannerFailed( MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR );
+        }
+
+        return adView;
+    }
+
+    private static void log(final int priority, final String message)
+    {
+        log( priority, message, null );
+    }
+
+    private static void log(final int priority, final String message, final Throwable th)
+    {
+        if ( LOGGING_ENABLED )
+        {
+            Log.println( priority, "AppLovinBanner", message + ( ( th == null ) ? "" : Log.getStackTraceString( th ) ) );
+        }
+    }
+
+    private static MoPubErrorCode toMoPubErrorCode(final int applovinErrorCode)
+    {
+        if ( applovinErrorCode == AppLovinErrorCodes.NO_FILL )
+        {
+            return MoPubErrorCode.NETWORK_NO_FILL;
+        }
+        else if ( applovinErrorCode == AppLovinErrorCodes.UNSPECIFIED_ERROR )
+        {
+            return MoPubErrorCode.NETWORK_INVALID_STATE;
+        }
+        else if ( applovinErrorCode == AppLovinErrorCodes.NO_NETWORK )
+        {
+            return MoPubErrorCode.NO_CONNECTION;
+        }
+        else if ( applovinErrorCode == AppLovinErrorCodes.FETCH_AD_TIMEOUT )
+        {
+            return MoPubErrorCode.NETWORK_TIMEOUT;
+        }
+        else
+        {
+            return MoPubErrorCode.UNSPECIFIED;
+        }
+    }
+
+    /**
+     * Dynamic proxy class for AppLovin's AppLovinAdViewEventListener. Used to keep compilation compatibility if publisher is on a version of the SDK before the listener was introduced (< 7.3.0).
+     */
+    private static final class AppLovinAdViewEventListenerProxy
+            implements InvocationHandler
+    {
+        private final CustomEventBannerListener customEventBannerListener;
+
+        private static Object newInstance(final CustomEventBannerListener customEventBannerListener)
+        {
+            return Proxy.newProxyInstance( AppLovinAdViewEventListener.class.getClassLoader(),
+                                           new Class[] { AppLovinAdViewEventListener.class },
+                                           new AppLovinAdViewEventListenerProxy( customEventBannerListener ) );
+        }
+
+        private AppLovinAdViewEventListenerProxy(final CustomEventBannerListener customEventBannerListener)
+        {
+            this.customEventBannerListener = customEventBannerListener;
+        }
+
+        public Object invoke(final Object proxy, final Method method, final Object[] args) throws Throwable
+        {
+            final String methodName = method.getName();
+
+            if ( "adOpenedFullscreen".equals( methodName ) )
+            {
+                log( DEBUG, "Banner opened fullscreen" );
+                customEventBannerListener.onBannerExpanded();
+            }
+            else if ( "adClosedFullscreen".equals( methodName ) )
+            {
+                log( DEBUG, "Banner closed fullscreen" );
+                customEventBannerListener.onBannerCollapsed();
+            }
+            else if ( "adLeftApplication".equals( methodName ) )
+            {
+                // We will fire onLeaveApplication() in the adClicked() callback
+                log( DEBUG, "Banner left application" );
+            }
+            else if ( "adFailedToDisplay".equals( methodName ) ) {}
+
+            return null;
+        }
+    }
+}
diff --git a/extras/src/com/mopub/mobileads/AppLovinInterstitial.java b/extras/src/com/mopub/mobileads/AppLovinInterstitial.java
new file mode 100644
index 00000000..59669772
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/AppLovinInterstitial.java
@@ -0,0 +1,291 @@
+import android.app.Activity;
+import android.content.Context;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.applovin.adview.AppLovinInterstitialAd;
+import com.applovin.adview.AppLovinInterstitialAdDialog;
+import com.applovin.sdk.AppLovinAd;
+import com.applovin.sdk.AppLovinAdClickListener;
+import com.applovin.sdk.AppLovinAdDisplayListener;
+import com.applovin.sdk.AppLovinAdLoadListener;
+import com.applovin.sdk.AppLovinAdSize;
+import com.applovin.sdk.AppLovinAdVideoPlaybackListener;
+import com.applovin.sdk.AppLovinErrorCodes;
+import com.applovin.sdk.AppLovinSdk;
+
+import java.lang.reflect.Method;
+import java.util.HashMap;
+import java.util.LinkedList;
+import java.util.Map;
+import java.util.Queue;
+
+import static android.util.Log.DEBUG;
+import static android.util.Log.ERROR;
+
+/**
+ * AppLovin SDK interstitial adapter for MoPub.
+ * <p>
+ * Created by Thomas So on 5/27/17.
+ */
+
+public class AppLovinInterstitial
+        extends CustomEventInterstitial
+        implements AppLovinAdLoadListener, AppLovinAdDisplayListener, AppLovinAdClickListener, AppLovinAdVideoPlaybackListener
+{
+    private static final boolean LOGGING_ENABLED = true;
+    private static final String  DEFAULT_ZONE    = "";
+
+    private CustomEventInterstitialListener listener;
+    private Context                         context;
+
+
+    // A map of Zone -> Queue of `AppLovinAd`s to be shared by instances of the custom event.
+    // This prevents skipping of ads as this adapter will be re-created and preloaded
+    // on every ad load regardless if ad was actually displayed or not.
+    private static final Map<String, Queue<AppLovinAd>> GLOBAL_INTERSTITIAL_ADS      = new HashMap<String, Queue<AppLovinAd>>();
+    private static final Object                         GLOBAL_INTERSTITIAL_ADS_LOCK = new Object();
+
+    private String zoneId; // The zone identifier this instance of the custom event is loading for
+
+    //
+    // MoPub Custom Event Methods
+    //
+
+    @Override
+    public void loadInterstitial(final Context context, final CustomEventInterstitialListener listener, final Map<String, Object> localExtras, final Map<String, String> serverExtras)
+    {
+        log( DEBUG, "Requesting AppLovin interstitial with localExtras: " + localExtras );
+
+        // SDK versions BELOW 7.2.0 require a instance of an Activity to be passed in as the context
+        if ( AppLovinSdk.VERSION_CODE < 720 && !( context instanceof Activity ) )
+        {
+            log( ERROR, "Unable to request AppLovin banner. Invalid context provided." );
+            listener.onInterstitialFailed( MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR );
+
+            return;
+        }
+
+        // Store parent objects
+        this.listener = listener;
+        this.context = context;
+
+        final AppLovinSdk sdk = AppLovinSdk.getInstance( context );
+        sdk.setPluginVersion( "MoPub-Certified-2.1.0" );
+
+        // Zones support is available on AppLovin SDK 7.5.0 and higher
+        final String serverExtrasZoneId = serverExtras != null ? serverExtras.get( "zone_id" ) : null;
+        zoneId = ( !TextUtils.isEmpty( serverExtrasZoneId ) && AppLovinSdk.VERSION_CODE >= 750 ) ? serverExtrasZoneId : DEFAULT_ZONE;
+
+        // Check if we already have a preloaded ad for the given zone
+        final AppLovinAd preloadedAd = dequeueAd( zoneId );
+        if ( preloadedAd != null )
+        {
+            log( DEBUG, "Found preloaded ad for zone: {" + zoneId + "}" );
+            adReceived( preloadedAd );
+        }
+        else
+        {
+            // If this is a default Zone, create the incentivized ad normally
+            if ( DEFAULT_ZONE.equals( zoneId ) )
+            {
+                sdk.getAdService().loadNextAd( AppLovinAdSize.INTERSTITIAL, this );
+            }
+            // Otherwise, use the Zones API
+            else
+            {
+                // Dynamically load an ad for a given zone without breaking backwards compatibility for publishers on older SDKs
+                try
+                {
+                    final Method method = sdk.getAdService().getClass().getMethod( "loadNextAdForZoneId", String.class, AppLovinAdLoadListener.class );
+                    method.invoke( sdk.getAdService(), zoneId, this );
+                }
+                catch ( Throwable th )
+                {
+                    log( ERROR, "Unable to load ad for zone: " + zoneId + "..." );
+                    listener.onInterstitialFailed( MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR );
+                }
+            }
+        }
+    }
+
+    @Override
+    public void showInterstitial()
+    {
+        final AppLovinAd preloadedAd = dequeueAd( zoneId );
+        if ( preloadedAd != null )
+        {
+            final AppLovinSdk sdk = AppLovinSdk.getInstance( context );
+
+            final AppLovinInterstitialAdDialog interstitialAd = createInterstitial( context, sdk );
+            interstitialAd.setAdDisplayListener( this );
+            interstitialAd.setAdClickListener( this );
+            interstitialAd.setAdVideoPlaybackListener( this );
+            interstitialAd.showAndRender( preloadedAd );
+        }
+        else
+        {
+            log( ERROR, "Failed to show an AppLovin interstitial before one was loaded" );
+            listener.onInterstitialFailed( MoPubErrorCode.NETWORK_INVALID_STATE );
+        }
+    }
+
+    @Override
+    public void onInvalidate() {}
+
+    //
+    // Ad Load Listener
+    //
+
+    @Override
+    public void adReceived(final AppLovinAd ad)
+    {
+        log( DEBUG, "Interstitial did load ad: " + ad.getAdIdNumber() );
+
+        enqueueAd( ad, zoneId );
+
+        listener.onInterstitialLoaded();
+    }
+
+    @Override
+    public void failedToReceiveAd(final int errorCode)
+    {
+        log( ERROR, "Interstitial failed to load with error: " + errorCode );
+        listener.onInterstitialFailed( toMoPubErrorCode( errorCode ) );
+
+        // TODO: Add support for backfilling on regular ad request if invalid zone entered
+    }
+
+    //
+    // Ad Display Listener
+    //
+
+    @Override
+    public void adDisplayed(final AppLovinAd appLovinAd)
+    {
+        log( DEBUG, "Interstitial displayed" );
+        listener.onInterstitialShown();
+    }
+
+    @Override
+    public void adHidden(final AppLovinAd appLovinAd)
+    {
+        log( DEBUG, "Interstitial dismissed" );
+        listener.onInterstitialDismissed();
+    }
+
+    //
+    // Ad Click Listener
+    //
+
+    @Override
+    public void adClicked(final AppLovinAd appLovinAd)
+    {
+        log( DEBUG, "Interstitial clicked" );
+        listener.onLeaveApplication();
+    }
+
+    //
+    // Video Playback Listener
+    //
+
+    @Override
+    public void videoPlaybackBegan(final AppLovinAd ad)
+    {
+        log( DEBUG, "Interstitial video playback began" );
+    }
+
+    @Override
+    public void videoPlaybackEnded(final AppLovinAd ad, final double percentViewed, final boolean fullyWatched)
+    {
+        log( DEBUG, "Interstitial video playback ended at playback percent: " + percentViewed );
+    }
+
+    //
+    // Utility Methods
+    //
+
+    private static AppLovinAd dequeueAd(final String zoneId)
+    {
+        synchronized ( GLOBAL_INTERSTITIAL_ADS_LOCK )
+        {
+            AppLovinAd preloadedAd = null;
+
+            final Queue<AppLovinAd> preloadedAds = GLOBAL_INTERSTITIAL_ADS.get( zoneId );
+            if ( preloadedAds != null && !preloadedAds.isEmpty() )
+            {
+                preloadedAd = preloadedAds.poll();
+            }
+
+            return preloadedAd;
+        }
+    }
+
+    private static void enqueueAd(final AppLovinAd ad, final String zoneId)
+    {
+        synchronized ( GLOBAL_INTERSTITIAL_ADS_LOCK )
+        {
+            Queue<AppLovinAd> preloadedAds = GLOBAL_INTERSTITIAL_ADS.get( zoneId );
+            if ( preloadedAds == null )
+            {
+                preloadedAds = new LinkedList<AppLovinAd>();
+                GLOBAL_INTERSTITIAL_ADS.put( zoneId, preloadedAds );
+            }
+
+            preloadedAds.offer( ad );
+        }
+    }
+
+    private AppLovinInterstitialAdDialog createInterstitial(final Context context, final AppLovinSdk sdk)
+    {
+        AppLovinInterstitialAdDialog inter = null;
+
+        try
+        {
+            // AppLovin SDK < 7.2.0 uses an Activity, as opposed to Context in >= 7.2.0
+            final Class<?> contextClass = ( AppLovinSdk.VERSION_CODE < 720 ) ? Activity.class : Context.class;
+            final Method method = AppLovinInterstitialAd.class.getMethod( "create", AppLovinSdk.class, contextClass );
+
+            inter = (AppLovinInterstitialAdDialog) method.invoke( null, sdk, context );
+        }
+        catch ( Throwable th )
+        {
+            log( ERROR, "Unable to create AppLovinInterstitialAd." );
+            listener.onInterstitialFailed( MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR );
+        }
+
+        return inter;
+    }
+
+    private static void log(final int priority, final String message)
+    {
+        if ( LOGGING_ENABLED )
+        {
+            Log.println( priority, "AppLovinInterstitial", message );
+        }
+    }
+
+    private static MoPubErrorCode toMoPubErrorCode(final int applovinErrorCode)
+    {
+        if ( applovinErrorCode == AppLovinErrorCodes.NO_FILL )
+        {
+            return MoPubErrorCode.NETWORK_NO_FILL;
+        }
+        else if ( applovinErrorCode == AppLovinErrorCodes.UNSPECIFIED_ERROR )
+        {
+            return MoPubErrorCode.NETWORK_INVALID_STATE;
+        }
+        else if ( applovinErrorCode == AppLovinErrorCodes.NO_NETWORK )
+        {
+            return MoPubErrorCode.NO_CONNECTION;
+        }
+        else if ( applovinErrorCode == AppLovinErrorCodes.FETCH_AD_TIMEOUT )
+        {
+            return MoPubErrorCode.NETWORK_TIMEOUT;
+        }
+        else
+        {
+            return MoPubErrorCode.UNSPECIFIED;
+        }
+    }
+}
diff --git a/extras/src/com/mopub/mobileads/AppLovinNative.java b/extras/src/com/mopub/mobileads/AppLovinNative.java
new file mode 100644
index 00000000..7ff9782b
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/AppLovinNative.java
@@ -0,0 +1,242 @@
+import android.content.Context;
+import android.os.Handler;
+import android.os.Looper;
+import android.support.annotation.NonNull;
+import android.util.Log;
+import android.view.View;
+
+import com.applovin.nativeAds.AppLovinNativeAd;
+import com.applovin.nativeAds.AppLovinNativeAdLoadListener;
+import com.applovin.sdk.AppLovinErrorCodes;
+import com.applovin.sdk.AppLovinPostbackListener;
+import com.applovin.sdk.AppLovinSdk;
+import com.mopub.nativeads.CustomEventNative;
+import com.mopub.nativeads.NativeErrorCode;
+import com.mopub.nativeads.NativeImageHelper;
+import com.mopub.nativeads.StaticNativeAd;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+
+import static android.util.Log.DEBUG;
+import static android.util.Log.ERROR;
+
+/**
+ * AppLovin SDK native adapter for MoPub.
+ * <p>
+ * Created by Thomas So on 5/27/17.
+ */
+
+public class AppLovinNative
+        extends CustomEventNative
+        implements AppLovinNativeAdLoadListener
+{
+    private static final boolean LOGGING_ENABLED = true;
+    private static final Handler uiHandler       = new Handler( Looper.getMainLooper() );
+
+    private CustomEventNativeListener nativeListener;
+    private Context                   context;
+
+    //
+    // MoPub Custom Event Methods
+    //
+
+    @Override
+    public void loadNativeAd(final Context context, final CustomEventNativeListener customEventNativeListener, final Map<String, Object> localExtras, final Map<String, String> serverExtras)
+    {
+        log( DEBUG, "Requesting AppLovin native ad with server extras: " + serverExtras );
+
+        this.context = context;
+        this.nativeListener = customEventNativeListener;
+
+        final AppLovinSdk sdk = AppLovinSdk.getInstance( context );
+        sdk.setPluginVersion( "MoPub-Certified-2.1.0" );
+        sdk.getNativeAdService().loadNativeAds( 1, this );
+    }
+
+    //
+    // Native Ad Load Listener
+    //
+
+    @Override
+    public void onNativeAdsLoaded(final List nativeAds)
+    {
+        final AppLovinNativeAd nativeAd = (AppLovinNativeAd) nativeAds.get( 0 );
+
+        log( DEBUG, "Native ad did load ad: " + nativeAd.getAdId() );
+
+        final List<String> imageUrls = new ArrayList<>( 2 );
+
+        if ( nativeAd.getIconUrl() != null ) imageUrls.add( nativeAd.getIconUrl() );
+        if ( nativeAd.getImageUrl() != null ) imageUrls.add( nativeAd.getImageUrl() );
+
+        // Please note: If/when we add support for videos, we must use AppLovin SDK's built-in precaching mechanism
+
+        runOnUiThread( new Runnable()
+        {
+            @Override
+            public void run()
+            {
+                NativeImageHelper.preCacheImages( context, imageUrls, new NativeImageHelper.ImageListener()
+                {
+                    @Override
+                    public void onImagesCached()
+                    {
+                        handleNativeAdFinishedCaching( nativeAd );
+                    }
+
+                    @Override
+                    public void onImagesFailedToCache(NativeErrorCode nativeErrorCode)
+                    {
+                        handleNativeAdFinishedCaching( nativeAd );
+                    }
+                } );
+            }
+        } );
+    }
+
+    private void handleNativeAdFinishedCaching(final AppLovinNativeAd nativeAd)
+    {
+        log( DEBUG, "Native ad done precaching" );
+
+        final AppLovinMopubNativeAd appLovinMopubNativeAd = new AppLovinMopubNativeAd( nativeAd, context );
+        nativeListener.onNativeAdLoaded( appLovinMopubNativeAd );
+    }
+
+    @Override
+    public void onNativeAdsFailedToLoad(final int errorCode)
+    {
+        log( ERROR, "Native ad video failed to load with error: " + errorCode );
+        nativeListener.onNativeAdFailed( toMoPubErrorCode( errorCode ) );
+    }
+
+    private class AppLovinMopubNativeAd
+            extends StaticNativeAd
+    {
+        private final AppLovinNativeAd parentNativeAd;
+        private final Context          parentContext;
+        private       View             parentView;
+
+        AppLovinMopubNativeAd(final AppLovinNativeAd nativeAd, final Context context)
+        {
+            parentNativeAd = nativeAd;
+            parentContext = context;
+
+            setTitle( nativeAd.getTitle() );
+            setText( nativeAd.getDescriptionText() );
+            setIconImageUrl( nativeAd.getIconUrl() );
+            setMainImageUrl( nativeAd.getImageUrl() );
+            setCallToAction( nativeAd.getCtaText() );
+            setStarRating( (double) nativeAd.getStarRating() );
+            setClickDestinationUrl( nativeAd.getClickUrl() );
+        }
+
+        @Override
+        public void prepare(@NonNull final View view)
+        {
+            // PLEASE NOTE: Use the code below if you would like AppLovin to handle the ad clicks for you:
+            /*
+            final View.OnClickListener onClickListener = new View.OnClickListener()
+            {
+                @Override
+                public void onClick(View v)
+                {
+                    parentNativeAd.launchClickTarget( parentContext );
+                    notifyAdClicked();
+                }
+            };
+
+            parentView = view;
+            parentView.setOnClickListener( onClickListener );
+
+            // If you need to make subviews of the view clickable (e.g. CTA button), apply the click listener to them:
+            parentView.findViewById( R.id.ID_OF_SUBVIEW ).setOnClickListener( onClickListener );
+            */
+
+            // As of AppLovin SDK >=7.1.0, impression tracking convenience methods have been added to AppLovinNativeAd
+            parentNativeAd.trackImpression( new AppLovinPostbackListener()
+            {
+                @Override
+                public void onPostbackSuccess(String url)
+                {
+                    log( DEBUG, "Native ad impression successfully executed." );
+                    notifyAdImpressed();
+                }
+
+                @Override
+                public void onPostbackFailure(String url, int errorCode)
+                {
+                    log( ERROR, "Native ad impression failed to execute." );
+                }
+            } );
+        }
+
+        @Override
+        public void clear(@NonNull final View view)
+        {
+            parentView = null;
+        }
+
+        @Override
+        public void destroy()
+        {
+            AppLovinNative.this.nativeListener = null;
+        }
+    }
+
+    //
+    // Utility Methods
+    //
+
+    private static void log(final int priority, final String message)
+    {
+        if ( LOGGING_ENABLED )
+        {
+            Log.println( priority, "AppLovinNative", message );
+        }
+    }
+
+    private static NativeErrorCode toMoPubErrorCode(final int applovinErrorCode)
+    {
+        if ( applovinErrorCode == AppLovinErrorCodes.NO_FILL )
+        {
+            return NativeErrorCode.NETWORK_NO_FILL;
+        }
+        else if ( applovinErrorCode == AppLovinErrorCodes.UNSPECIFIED_ERROR )
+        {
+            return NativeErrorCode.NETWORK_INVALID_STATE;
+        }
+        else if ( applovinErrorCode == AppLovinErrorCodes.NO_NETWORK )
+        {
+            return NativeErrorCode.CONNECTION_ERROR;
+        }
+        else if ( applovinErrorCode == AppLovinErrorCodes.FETCH_AD_TIMEOUT )
+        {
+            return NativeErrorCode.NETWORK_TIMEOUT;
+        }
+        else if ( applovinErrorCode == AppLovinErrorCodes.UNABLE_TO_PREPARE_NATIVE_AD )
+        {
+            return NativeErrorCode.INVALID_RESPONSE;
+        }
+        else
+        {
+            return NativeErrorCode.UNSPECIFIED;
+        }
+    }
+
+    /**
+     * Performs the given runnable on the main thread.
+     */
+    public static void runOnUiThread(final Runnable runnable)
+    {
+        if ( Looper.myLooper() == Looper.getMainLooper() )
+        {
+            runnable.run();
+        }
+        else
+        {
+            uiHandler.post( runnable );
+        }
+    }
+}
diff --git a/extras/src/com/mopub/mobileads/AppLovinRewardedVideo.java b/extras/src/com/mopub/mobileads/AppLovinRewardedVideo.java
new file mode 100644
index 00000000..7843b298
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/AppLovinRewardedVideo.java
@@ -0,0 +1,321 @@
+import android.app.Activity;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.util.Log;
+
+import com.applovin.adview.AppLovinIncentivizedInterstitial;
+import com.applovin.sdk.AppLovinAd;
+import com.applovin.sdk.AppLovinAdClickListener;
+import com.applovin.sdk.AppLovinAdDisplayListener;
+import com.applovin.sdk.AppLovinAdLoadListener;
+import com.applovin.sdk.AppLovinAdRewardListener;
+import com.applovin.sdk.AppLovinAdVideoPlaybackListener;
+import com.applovin.sdk.AppLovinErrorCodes;
+import com.applovin.sdk.AppLovinSdk;
+import com.mopub.common.LifecycleListener;
+import com.mopub.common.MoPubReward;
+
+import java.lang.reflect.Method;
+import java.util.HashMap;
+import java.util.Map;
+
+import static android.util.Log.DEBUG;
+import static android.util.Log.ERROR;
+
+/**
+ * AppLovin SDK rewarded video adapter for MoPub.
+ * <p>
+ * Created by Thomas So on 5/27/17.
+ */
+
+public class AppLovinRewardedVideo
+        extends CustomEventRewardedVideo
+        implements AppLovinAdLoadListener, AppLovinAdDisplayListener, AppLovinAdClickListener, AppLovinAdVideoPlaybackListener, AppLovinAdRewardListener
+{
+    private static final boolean LOGGING_ENABLED = true;
+    private static final String  DEFAULT_ZONE    = "";
+
+    // A map of Zone -> `AppLovinIncentivizedInterstitial` to be shared by instances of the custom event.
+    // This prevents skipping of ads as this adapter will be re-created and preloaded (along with underlying `AppLovinIncentivizedInterstitial`)
+    // on every ad load regardless if ad was actually displayed or not.
+    private static final Map<String, AppLovinIncentivizedInterstitial> GLOBAL_INCENTIVIZED_INTERSTITIAL_ADS = new HashMap<String, AppLovinIncentivizedInterstitial>();
+
+    private static boolean initialized;
+
+    private AppLovinIncentivizedInterstitial incentivizedInterstitial;
+    private Activity                         parentActivity;
+
+    private boolean     fullyWatched;
+    private MoPubReward reward;
+
+
+    //
+    // MoPub Custom Event Methods
+    //
+
+    @Override
+    protected boolean checkAndInitializeSdk(@NonNull final Activity activity, @NonNull final Map<String, Object> localExtras, @NonNull final Map<String, String> serverExtras) throws Exception
+    {
+        log( DEBUG, "Initializing AppLovin rewarded video..." );
+
+        if ( !initialized )
+        {
+            AppLovinSdk.initializeSdk( activity );
+            AppLovinSdk.getInstance( activity ).setPluginVersion( "MoPub-Certified-2.1.0" );
+
+            initialized = true;
+
+            return true;
+        }
+
+        return false;
+    }
+
+    @Override
+    protected void loadWithSdkInitialized(@NonNull final Activity activity, @NonNull final Map<String, Object> localExtras, @NonNull final Map<String, String> serverExtras) throws Exception
+    {
+        log( DEBUG, "Requesting AppLovin rewarded video with serverExtras: " + serverExtras );
+
+        parentActivity = activity;
+
+        // Zones support is available on AppLovin SDK 7.5.0 and higher
+        final String zoneId;
+        if ( AppLovinSdk.VERSION_CODE >= 750 && serverExtras != null && serverExtras.containsKey( "zone_id" ) )
+        {
+            zoneId = serverExtras.get( "zone_id" );
+        }
+        else
+        {
+            zoneId = DEFAULT_ZONE;
+        }
+
+
+        // Check if incentivized ad for zone already exists
+        if ( GLOBAL_INCENTIVIZED_INTERSTITIAL_ADS.containsKey( zoneId ) )
+        {
+            incentivizedInterstitial = GLOBAL_INCENTIVIZED_INTERSTITIAL_ADS.get( zoneId );
+        }
+        else
+        {
+            // If this is a default Zone, create the incentivized ad normally
+            if ( DEFAULT_ZONE.equals( zoneId ) )
+            {
+                incentivizedInterstitial = AppLovinIncentivizedInterstitial.create( activity );
+            }
+            // Otherwise, use the Zones API
+            else
+            {
+                incentivizedInterstitial = createIncentivizedInterstitialForZoneId( zoneId, AppLovinSdk.getInstance( activity ) );
+            }
+
+            GLOBAL_INCENTIVIZED_INTERSTITIAL_ADS.put( zoneId, incentivizedInterstitial );
+        }
+
+        incentivizedInterstitial.preload( this );
+    }
+
+    @Override
+    protected void showVideo()
+    {
+        if ( hasVideoAvailable() )
+        {
+            fullyWatched = false;
+            reward = null;
+
+            incentivizedInterstitial.show( parentActivity, null, this, this, this, this );
+        }
+        else
+        {
+            log( ERROR, "Failed to show an AppLovin rewarded video before one was loaded" );
+            MoPubRewardedVideoManager.onRewardedVideoPlaybackError( this.getClass(), "", MoPubErrorCode.VIDEO_PLAYBACK_ERROR );
+        }
+    }
+
+    @Override
+    protected boolean hasVideoAvailable()
+    {
+        return incentivizedInterstitial.isAdReadyToDisplay();
+    }
+
+    @Override
+    @Nullable
+    protected LifecycleListener getLifecycleListener() { return null; }
+
+    @Override
+    @NonNull
+    protected String getAdNetworkId() { return ""; }
+
+    @Override
+    protected void onInvalidate() {}
+
+    //
+    // Ad Load Listener
+    //
+
+    @Override
+    public void adReceived(final AppLovinAd ad)
+    {
+        log( DEBUG, "Rewarded video did load ad: " + ad.getAdIdNumber() );
+        MoPubRewardedVideoManager.onRewardedVideoLoadSuccess( this.getClass(), "" );
+    }
+
+    @Override
+    public void failedToReceiveAd(final int errorCode)
+    {
+        log( DEBUG, "Rewarded video failed to load with error: " + errorCode );
+        MoPubRewardedVideoManager.onRewardedVideoLoadFailure( this.getClass(), "", toMoPubErrorCode( errorCode ) );
+
+        // TODO: Add support for backfilling on regular ad request if invalid zone entered
+    }
+
+    //
+    // Ad Display Listener
+    //
+
+    @Override
+    public void adDisplayed(final AppLovinAd ad)
+    {
+        log( DEBUG, "Rewarded video displayed" );
+        MoPubRewardedVideoManager.onRewardedVideoStarted( this.getClass(), "" );
+    }
+
+    @Override
+    public void adHidden(final AppLovinAd ad)
+    {
+        log( DEBUG, "Rewarded video dismissed" );
+
+        if ( fullyWatched && reward != null )
+        {
+            log( DEBUG, "Rewarded" + reward.getAmount() + " " + reward.getLabel() );
+            MoPubRewardedVideoManager.onRewardedVideoCompleted( this.getClass(), "", reward );
+        }
+
+        MoPubRewardedVideoManager.onRewardedVideoClosed( this.getClass(), "" );
+    }
+
+    //
+    // Ad Click Listener
+    //
+
+    @Override
+    public void adClicked(final AppLovinAd ad)
+    {
+        log( DEBUG, "Rewarded video clicked" );
+        MoPubRewardedVideoManager.onRewardedVideoClicked( this.getClass(), "" );
+    }
+
+    //
+    // Video Playback Listener
+    //
+
+    @Override
+    public void videoPlaybackBegan(final AppLovinAd ad)
+    {
+        log( DEBUG, "Rewarded video playback began" );
+    }
+
+    @Override
+    public void videoPlaybackEnded(final AppLovinAd ad, final double percentViewed, final boolean fullyWatched)
+    {
+        log( DEBUG, "Rewarded video playback ended at playback percent: " + percentViewed );
+
+        this.fullyWatched = fullyWatched;
+    }
+
+    //
+    // Reward Listener
+    //
+
+    @Override
+    public void userOverQuota(final AppLovinAd appLovinAd, final Map map)
+    {
+        log( ERROR, "Rewarded video validation request for ad did exceed quota with response: " + map );
+    }
+
+    @Override
+    public void validationRequestFailed(final AppLovinAd appLovinAd, final int errorCode)
+    {
+        log( ERROR, "Rewarded video validation request for ad failed with error code: " + errorCode );
+    }
+
+    @Override
+    public void userRewardRejected(final AppLovinAd appLovinAd, final Map map)
+    {
+        log( ERROR, "Rewarded video validation request was rejected with response: " + map );
+    }
+
+    @Override
+    public void userDeclinedToViewAd(final AppLovinAd appLovinAd)
+    {
+        log( DEBUG, "User declined to view rewarded video" );
+        MoPubRewardedVideoManager.onRewardedVideoClosed( this.getClass(), "" );
+    }
+
+    @Override
+    public void userRewardVerified(final AppLovinAd appLovinAd, final Map map)
+    {
+        final String currency = (String) map.get( "currency" );
+        final int amount = (int) Double.parseDouble( (String) map.get( "amount" ) ); // AppLovin returns amount as double
+
+        log( DEBUG, "Verified " + amount + " " + currency );
+
+        reward = MoPubReward.success( currency, amount );
+    }
+
+    //
+    // Dynamically create an instance of AppLovinIncentivizedInterstitial with a given zone without breaking backwards compatibility for publishers on older SDKs.
+    //
+    private AppLovinIncentivizedInterstitial createIncentivizedInterstitialForZoneId(final String zoneId, final AppLovinSdk sdk)
+    {
+        AppLovinIncentivizedInterstitial incent = null;
+
+        try
+        {
+            final Method method = AppLovinIncentivizedInterstitial.class.getMethod( "create", String.class, AppLovinSdk.class );
+            incent = (AppLovinIncentivizedInterstitial) method.invoke( null, zoneId, sdk );
+        }
+        catch ( Throwable th )
+        {
+            log( ERROR, "Unable to load ad for zone: " + zoneId + "..." );
+            MoPubRewardedVideoManager.onRewardedVideoLoadFailure( getClass(), "", MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR );
+        }
+
+        return incent;
+    }
+
+    //
+    // Utility Methods
+    //
+
+    private static void log(final int priority, final String message)
+    {
+        if ( LOGGING_ENABLED )
+        {
+            Log.println( priority, "AppLovinRewardedVideo", message );
+        }
+    }
+
+    private static MoPubErrorCode toMoPubErrorCode(final int applovinErrorCode)
+    {
+        if ( applovinErrorCode == AppLovinErrorCodes.NO_FILL )
+        {
+            return MoPubErrorCode.NETWORK_NO_FILL;
+        }
+        else if ( applovinErrorCode == AppLovinErrorCodes.UNSPECIFIED_ERROR )
+        {
+            return MoPubErrorCode.NETWORK_INVALID_STATE;
+        }
+        else if ( applovinErrorCode == AppLovinErrorCodes.NO_NETWORK )
+        {
+            return MoPubErrorCode.NO_CONNECTION;
+        }
+        else if ( applovinErrorCode == AppLovinErrorCodes.FETCH_AD_TIMEOUT )
+        {
+            return MoPubErrorCode.NETWORK_TIMEOUT;
+        }
+        else
+        {
+            return MoPubErrorCode.UNSPECIFIED;
+        }
+    }
+}
