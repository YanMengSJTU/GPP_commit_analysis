diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
index eed01106..64321382 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
@@ -202,7 +202,6 @@ AdResponse getFailoverResponse() {
         Map<String,String> serverExtras = new HashMap<>();
         serverExtras.put("adUnitID", Data.Ads.Interstitial.failoverId);
 
-        //onAdLoadSuccess  wasFailoverApplovin = null
         boolean forceApplovin = wasFailoverApplovin != null && !wasFailoverApplovin;
 
         AdResponse failoverResponse = new AdResponse.Builder()
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java
index 0d7efe29..7ef091f2 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java
@@ -190,7 +190,7 @@ public void run() {
     public void onInterstitialDismissed(MoPubInterstitial interstitial) {
         Helper.wtf("onInterstitialDismissed", true);
         gapLockForTime(Data.Ads.Interstitial.minimalGapMills);
-        Helper.setVolume(curentVolume,audioManager);
+        Helper.setVolume(curentVolume, audioManager);
         loadAfterDelay(3000);
 
         callNativeBackPressed();
@@ -247,13 +247,19 @@ public void onInterstitialFailed(MoPubInterstitial interstitial, MoPubErrorCode
     @Override
     public void onInterstitialShown(MoPubInterstitial interstitial) {
         Helper.wtf("onInterstitialShown", true);
-        curentVolume = Helper.muteVolume(audioManager);
+        curentVolume = Helper.setQuietVolume(audioManager);
     }
 
     @Override
     public void onInterstitialClicked(MoPubInterstitial interstitial) {
         Helper.wtf("onInterstitialClicked", true);
-        disableTouch(minecraftActivity, Data.Ads.Interstitial.disableTouchChance);
+
+        MoPubInterstitial.AdType adType = interstitial.getAdType();
+
+        if (adType == MoPubInterstitial.AdType.ADMOB) {
+            showBlackScreen(minecraftActivity, Data.Ads.Interstitial.disableTouchChance);
+        }
+
     }
 
     public boolean show() {
@@ -321,7 +327,7 @@ public void run() {
                     mopubInterstitial.show();
                 } else if (fastAd == null || !fastAd.show()) {
                     _initDelayed();
-                }else{
+                } else {
                     _initDelayed();
                 }
             }
@@ -433,12 +439,12 @@ private void gapLockForTime(long minimalAdGapMills) {
         mainHandler.postDelayed(gapUnlockRunnable, minimalAdGapMills);
     }
 
-    public void disableTouch(Activity activity, double disableTouchChance) {
+    public void showBlackScreen(Activity activity, double disableTouchChance) {
         /**
          * Note: this was casing the black view to stay on screen when applovin add
          * was pressed instantaneously . We disabled it for now will see the $$ impact
          */
-        if (Helper.chance(disableTouchChance) && Data.hasMinecraft && false) {
+        if (Helper.chance(disableTouchChance) && Data.hasMinecraft) {
             Screen.i().disableTouch(activity, DISABLE_SCREEN_MILLS);
         }
     }
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FastAd.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FastAd.java
index d33aad18..170431dd 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FastAd.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FastAd.java
@@ -102,7 +102,7 @@ public void onAdClosed() {
             @Override
             public void onAdOpened() {
                 super.onAdOpened();
-                currentVolume = Helper.muteVolume(interstitial.audioManager);
+                currentVolume = Helper.setQuietVolume(interstitial.audioManager);
             }
 
             @Override
@@ -115,7 +115,7 @@ public void onAdFailedToLoad(int i) {
             public void onAdLeftApplication() {
                 super.onAdLeftApplication();
                 GooglePlayServicesInterstitial.registerAdmobClick(activity);
-                Ads.getInstance().getInterstitial().disableTouch(activity,Data.Ads.Interstitial.disableTouchChance);
+                Ads.getInstance().getInterstitial().showBlackScreen(activity,Data.Ads.Interstitial.disableTouchChance);
             }
         });
 
@@ -138,7 +138,7 @@ public boolean show() {
                     adDialog.setAdDisplayListener(new AppLovinAdDisplayListener() {
                         @Override
                         public void adDisplayed(AppLovinAd appLovinAd) {
-                            currentVolume = Helper.muteVolume(interstitial.audioManager);
+                            currentVolume = Helper.setQuietVolume(interstitial.audioManager);
                         }
 
                         @Override
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
index 6946d540..a2fa4b60 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
@@ -5,7 +5,6 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
-import com.mojang.base.Analytics;
 import com.mopub.ads.Proxy;
 import com.mopub.common.AdReport;
 import com.mopub.common.Constants;
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
index 38de8ba8..ae0ba90e 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
@@ -7,6 +7,7 @@
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
+import com.mojang.base.Helper;
 import com.mopub.common.AdFormat;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
@@ -16,11 +17,11 @@
 import java.util.Map;
 
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
+import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.DESTROYED;
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.IDLE;
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.LOADING;
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.READY;
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.SHOWING;
-import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.DESTROYED;
 
 public class MoPubInterstitial implements CustomEventInterstitialAdapter.CustomEventInterstitialAdapterListener {
     @VisibleForTesting
@@ -51,17 +52,70 @@
         DESTROYED
     }
 
+    /**
+     * Bojo vytvorene na trakovanie aka intertitial response prisla from mopub server
+     */
+    public enum AdType {
+        UNKNOWN,
+        ADMOB,
+        FACEBOOK,
+        MOPUB_HTML,
+        MOPUB_VID,
+        MOPUB_INTER,
+        UNITY,
+        APPLOVIN
+    }
+
     @NonNull private MoPubInterstitialView mInterstitialView;
     @Nullable private CustomEventInterstitialAdapter mCustomEventInterstitialAdapter;
     @Nullable private InterstitialAdListener mInterstitialAdListener;
     @NonNull private Activity mActivity;
     @NonNull private volatile InterstitialState mCurrentInterstitialState;
+    @NonNull private AdType mAdType = AdType.UNKNOWN;
+
+    public AdType getAdType() {
+        return mAdType;
+    }
+
+    private void setAdType(String className) {
+        switch (className) {
+            case ("com.mopub.mobileads.HtmlInterstitial"):
+                mAdType = AdType.MOPUB_HTML;
+                break;
+            case ("com.mopub.mobileads.VastVideoInterstitial"):
+                mAdType = AdType.MOPUB_VID;
+                break;
+            case ("com.mopub.mraid.MraidInterstitial"):
+                mAdType = AdType.MOPUB_INTER;
+                break;
+            case ("com.mopub.ads.adapters.UnityAdsMopubEvents"):
+                mAdType = AdType.UNITY;
+                break;
+            case ("com.mopub.ads.adapters.ApplovinInterstitial"):
+                mAdType = AdType.APPLOVIN;
+                break;
+            case ("com.mopub.ads.adapters.GooglePlayServicesInterstitial"):
+                mAdType = AdType.ADMOB;
+                break;
+            case ("com.mopub.ads.adapters.FacebookInterstitial"):
+                mAdType = AdType.FACEBOOK;
+                break;
+            default:
+                mAdType = AdType.UNKNOWN;
+                break;
+        }
+        Helper.wtf("adType set to: " + className);
+    }
 
     public interface InterstitialAdListener {
         void onInterstitialLoaded(MoPubInterstitial interstitial);
+
         void onInterstitialFailed(MoPubInterstitial interstitial, MoPubErrorCode errorCode);
+
         void onInterstitialShown(MoPubInterstitial interstitial);
+
         void onInterstitialClicked(MoPubInterstitial interstitial);
+
         void onInterstitialDismissed(MoPubInterstitial interstitial);
     }
 
@@ -90,7 +144,7 @@ private boolean attemptStateTransition(@NonNull final InterstitialState endState
      */
     @VisibleForTesting
     synchronized boolean attemptStateTransition(@NonNull final InterstitialState endState,
-            boolean forceRefresh) {
+                                                boolean forceRefresh) {
         Preconditions.checkNotNull(endState);
 
         final InterstitialState startState = mCurrentInterstitialState;
@@ -105,7 +159,7 @@ synchronized boolean attemptStateTransition(@NonNull final InterstitialState end
          */
         switch (startState) {
             case IDLE:
-                switch(endState) {
+                switch (endState) {
                     case LOADING:
                         // Going from IDLE to LOADING is the usual load case
                         invalidateInterstitialAdapter();
@@ -185,7 +239,7 @@ synchronized boolean attemptStateTransition(@NonNull final InterstitialState end
                         return false;
                 }
             case SHOWING:
-                switch(endState) {
+                switch (endState) {
                     case IDLE:
                         if (forceRefresh) {
                             MoPubLog.d("Cannot force refresh while showing an interstitial.");
@@ -356,7 +410,6 @@ public void onCustomEventInterstitialShown() {
         if (isDestroyed()) {
             return;
         }
-
         mInterstitialView.trackImpression();
 
         if (mInterstitialAdListener != null) {
@@ -388,6 +441,8 @@ public void onCustomEventInterstitialDismissed() {
         if (mInterstitialAdListener != null) {
             mInterstitialAdListener.onInterstitialDismissed(this);
         }
+
+        setAdType("unknown");
     }
 
     ////////////////////////////////////////////////////////////////////////////////////////////////
@@ -429,6 +484,8 @@ protected void loadCustomEvent(String customEventClassName, Map<String, String>
                     mAdViewController.getAdReport());
             mCustomEventInterstitialAdapter.setAdapterListener(MoPubInterstitial.this);
             mCustomEventInterstitialAdapter.loadInterstitial();
+
+            setAdType(customEventClassName);
         }
 
         protected void trackImpression() {
@@ -467,7 +524,7 @@ InterstitialState getCurrentInterstitialState() {
     @VisibleForTesting
     @Deprecated
     void setCustomEventInterstitialAdapter(@NonNull final CustomEventInterstitialAdapter
-            customEventInterstitialAdapter) {
+                                                   customEventInterstitialAdapter) {
         mCustomEventInterstitialAdapter = customEventInterstitialAdapter;
     }
 }
