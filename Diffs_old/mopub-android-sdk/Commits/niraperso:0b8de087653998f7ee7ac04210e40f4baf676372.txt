diff --git a/extras/src/com/mopub/mobileads/InMobiBannerCustomEvent.java b/extras/src/com/mopub/mobileads/InMobiBannerCustomEvent.java
new file mode 100755
index 00000000..d7eba5b9
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/InMobiBannerCustomEvent.java
@@ -0,0 +1,167 @@
+package com.inmobi.showcase;
+
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import android.app.Activity;
+import android.content.Context;
+import android.util.DisplayMetrics;
+import android.util.Log;
+import android.view.Display;
+import android.view.WindowManager;
+import android.widget.LinearLayout;
+
+import com.inmobi.ads.InMobiAdRequestStatus;
+import com.inmobi.ads.InMobiAdRequestStatus.StatusCode;
+import com.inmobi.ads.InMobiBanner;
+import com.inmobi.ads.InMobiBanner.AnimationType;
+import com.inmobi.ads.InMobiBanner.BannerAdListener;
+import com.inmobi.sdk.InMobiSdk;
+import com.inmobi.sdk.InMobiSdk.Education;
+import com.inmobi.sdk.InMobiSdk.Ethnicity;
+import com.inmobi.sdk.InMobiSdk.Gender;
+import com.inmobi.sdk.InMobiSdk.LogLevel;
+import com.mopub.common.MoPub;
+import com.mopub.mobileads.CustomEventBanner;
+import com.mopub.mobileads.MoPubErrorCode;
+
+/*
+ * Tested with InMobi SDK 5.0.0
+ */
+public class InMobiBannerCustomEvent extends CustomEventBanner implements BannerAdListener  {
+
+
+    private CustomEventBannerListener mBannerListener;
+    private InMobiBanner imbanner;
+    private static boolean isAppIntialize = false;
+    private JSONObject serverParams;
+    private String accountId="";
+    private long placementId=-1;
+
+    @Override
+    public void onAdDismissed(InMobiBanner arg0) {
+        // TODO Auto-generated method stub
+    	Log.v("InMobiBannerCustomEvent","Ad Dismissed");
+    }
+
+    @Override
+    public void onAdDisplayed(InMobiBanner arg0) {
+        // TODO Auto-generated method stub
+    	Log.v("InMobiBannerCustomEvent","Ad displayed");
+    }
+
+    @Override
+    public void onAdInteraction(InMobiBanner arg0, Map<Object, Object> arg1) {
+        // TODO Auto-generated method stub
+    	Log.v("InMobiBannerCustomEvent","Ad interaction");
+    }
+
+    @Override
+    public void onAdLoadFailed(InMobiBanner arg0, InMobiAdRequestStatus arg1) {
+        // TODO Auto-generated method stub
+    	Log.v("InMobiBannerCustomEvent","Ad failed to load");
+
+    }
+
+    @Override
+    public void onAdLoadSucceeded(InMobiBanner arg0) {
+        Log.d("InMobiBannerCustomEvent", "InMobi banner ad loaded successfully.");
+        if(mBannerListener!=null){
+            if (arg0 != null) {
+                mBannerListener.onBannerLoaded(arg0);
+            } else {
+                mBannerListener
+                        .onBannerFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+            }
+        }
+    }
+
+    @Override
+    public void onAdRewardActionCompleted(InMobiBanner arg0, Map<Object, Object> arg1) {
+        // TODO Auto-generated method stub
+    	Log.v("InMobiBannerCustomEvent","Ad rewarded");
+    }
+
+    @Override
+    public void onUserLeftApplication(InMobiBanner arg0) {
+        // TODO Auto-generated method stub
+    	Log.v("InMobiBannerCustomEvent","User left applicaton");
+    }
+
+    @Override
+    protected void loadBanner(Context context, CustomEventBannerListener arg1, Map<String, Object> arg2,
+                              Map<String, String> arg3) {
+    	Log.v("InMobiBannerCustomEvent","Reached native adapter");
+    	mBannerListener = arg1;
+        Activity activity = null;
+        if (context instanceof Activity) {
+            activity = (Activity) context;
+        } else {
+            // You may also pass in an Activity Context in the localExtras map
+            // and retrieve it here.
+        }
+        if (activity == null) {
+            mBannerListener.onBannerFailed(null);
+            return;
+        }
+        
+		try {
+			serverParams = new JSONObject(arg3);
+			accountId = serverParams.getString("accountid");
+			placementId = serverParams.getLong("placementid");
+		} catch (JSONException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+
+
+        if (!isAppIntialize) {
+            try {
+                InMobiSdk.init(activity,accountId);
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+            isAppIntialize = true;
+        }
+		InMobiSdk.setAreaCode("areacode");
+		InMobiSdk.setEducation(Education.HIGH_SCHOOL_OR_LESS);
+		InMobiSdk.setGender(Gender.MALE);
+		InMobiSdk.setIncome(1000);
+		InMobiSdk.setAge(23);
+		InMobiSdk.setPostalCode("postalcode");
+		InMobiSdk.setLogLevel(LogLevel.DEBUG);
+		InMobiSdk.setLocationWithCityStateCountry("blore", "kar", "india");
+		InMobiSdk.setLanguage("ENG");
+		InMobiSdk.setInterests("dance");
+		InMobiSdk.setEthnicity(Ethnicity.ASIAN);
+		InMobiSdk.setYearOfBirth(1980);
+
+        imbanner = new InMobiBanner(activity, placementId);
+        imbanner.setListener(this);
+        imbanner.setEnableAutoRefresh(false);
+        imbanner.setAnimationType(InMobiBanner.AnimationType.ANIMATION_OFF);
+
+        DisplayMetrics dm = new DisplayMetrics();
+        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
+        Display display = wm.getDefaultDisplay();
+        display.getMetrics(dm);
+		Map<String, String> map = new HashMap<String, String>();
+		map.put("tp", "c_mopub");
+		map.put("tp-ver", MoPub.SDK_VERSION);
+		imbanner.setExtras(map);
+
+        imbanner.setLayoutParams(new LinearLayout.LayoutParams(Math.round(320*dm.density), Math.round(50*dm.density)));
+        imbanner.load();
+    }
+
+    @Override
+    protected void onInvalidate() {
+        // TODO Auto-generated method stub
+
+    }
+}
+
diff --git a/extras/src/com/mopub/mobileads/InMobiInterstitialCustomEvent.java b/extras/src/com/mopub/mobileads/InMobiInterstitialCustomEvent.java
new file mode 100755
index 00000000..f587f871
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/InMobiInterstitialCustomEvent.java
@@ -0,0 +1,203 @@
+package com.inmobi.showcase;
+
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Set;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import android.app.Activity;
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.util.Log;
+
+import com.inmobi.ads.InMobiAdRequestStatus;
+import com.inmobi.ads.InMobiAdRequestStatus.StatusCode;
+import com.inmobi.ads.InMobiInterstitial;
+import com.inmobi.ads.InMobiInterstitial.InterstitialAdListener;
+import com.inmobi.sdk.InMobiSdk;
+import com.inmobi.sdk.InMobiSdk.Education;
+import com.inmobi.sdk.InMobiSdk.Ethnicity;
+import com.inmobi.sdk.InMobiSdk.Gender;
+import com.inmobi.sdk.InMobiSdk.LogLevel;
+import com.mopub.common.MoPub;
+import com.mopub.common.MoPubReward;
+import com.mopub.mobileads.CustomEventInterstitial;
+import com.mopub.mobileads.MoPubErrorCode;
+import com.mopub.mobileads.MoPubRewardedVideoListener;
+
+/*
+ * Tested with InMobi SDK  5.0.0
+ */
+public class InMobiInterstitialCustomEvent extends CustomEventInterstitial implements InterstitialAdListener {
+	private CustomEventInterstitialListener mInterstitialListener;
+	private JSONObject serverParams;
+	private String accountId="";
+	private long placementId=-1;
+	@Override
+	protected void loadInterstitial(Context context,
+			CustomEventInterstitialListener interstitialListener,
+			Map<String, Object> localExtras, Map<String, String> serverExtras) {
+		Log.v("InMobiInterstitialCustomEvent","Reached Interstitial adapter");
+		mInterstitialListener = interstitialListener;
+		try {
+		    serverParams = new JSONObject(serverExtras);
+		} catch (Exception e) {
+		    Log.e("InMobiInterstitialCustomEvent", "Could not parse server parameters");
+			e.printStackTrace();
+		}
+		Activity activity = null;
+		if (context instanceof Activity) {
+			activity = (Activity) context;
+		} else {
+		}
+
+		if (activity == null) {
+			mInterstitialListener
+					.onInterstitialFailed(MoPubErrorCode.UNSPECIFIED);
+			return;
+		}
+
+		try {
+			accountId = serverParams.getString("accountid");
+			placementId = serverParams.getLong("placementid");
+		} catch (JSONException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+
+		if (!isAppIntialize) {
+			InMobiSdk.init(activity,accountId);
+			isAppIntialize = true;
+		}
+		
+		/*
+		 * You may also pass the Placement ID by
+		 * specifying Custom Event Data in MoPub's web interface.
+		 */
+		
+		
+		iMInterstitial = new InMobiInterstitial(activity, placementId, this);
+		InMobiSdk.setAreaCode("areacode");
+		InMobiSdk.setEducation(Education.HIGH_SCHOOL_OR_LESS);
+		InMobiSdk.setGender(Gender.MALE);
+		InMobiSdk.setIncome(1000);
+		InMobiSdk.setAge(23);
+		InMobiSdk.setPostalCode("postalcode");
+		InMobiSdk.setLogLevel(LogLevel.DEBUG);
+		InMobiSdk.setLocationWithCityStateCountry("blore", "kar", "india");
+		InMobiSdk.setLanguage("ENG");
+		InMobiSdk.setInterests("dance");
+		InMobiSdk.setEthnicity(Ethnicity.ASIAN);
+		InMobiSdk.setYearOfBirth(1980);
+		Map<String, String> map = new HashMap<String, String>();
+		map.put("tp", "c_mopub");
+		map.put("tp-ver", MoPub.SDK_VERSION);
+		iMInterstitial.setExtras(map);
+		iMInterstitial.load();
+	}
+	
+	private InMobiInterstitial iMInterstitial;
+	private static boolean isAppIntialize = false;
+
+	/*
+	 * Abstract methods from CustomEventInterstitial
+	 */
+
+	@Override
+	public void showInterstitial() {
+		if (iMInterstitial != null
+				&& iMInterstitial.isReady()) {
+			iMInterstitial.show();
+		}
+	}
+
+	@Override
+	public void onInvalidate() {
+	}
+
+	@Override
+	public void onAdDismissed(InMobiInterstitial arg0) {
+		Log.d("InMobiInterstitialCustomEvent", "InMobi interstitial ad dismissed.");
+		if (mInterstitialListener != null) {
+			mInterstitialListener.onInterstitialDismissed();
+		}
+	}
+
+	@Override
+	public void onAdDisplayed(InMobiInterstitial arg0) {
+		Log.d("InMobiInterstitialCustomEvent", "InMobi interstitial show on screen.");
+		if (mInterstitialListener != null) {
+			mInterstitialListener.onInterstitialShown();
+		}
+	}
+
+	@Override
+	public void onAdLoadFailed(InMobiInterstitial arg0,
+			InMobiAdRequestStatus arg1) {
+		Log.d("InMobiInterstitialCustomEvent", "InMobi interstitial ad failed to load.");
+		if (mInterstitialListener != null) {
+
+			if (arg1.getStatusCode() == StatusCode.INTERNAL_ERROR) {
+				mInterstitialListener
+						.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
+			} else if (arg1.getStatusCode() == StatusCode.REQUEST_INVALID) {
+				mInterstitialListener
+						.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+			} else if (arg1.getStatusCode() == StatusCode.NETWORK_UNREACHABLE) {
+				mInterstitialListener
+						.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+			} else if (arg1.getStatusCode() == StatusCode.NO_FILL) {
+				mInterstitialListener
+						.onInterstitialFailed(MoPubErrorCode.NO_FILL);
+			} else if (arg1.getStatusCode() == StatusCode.REQUEST_TIMED_OUT) {
+				mInterstitialListener
+				.onInterstitialFailed(MoPubErrorCode.NETWORK_TIMEOUT);
+			} else if (arg1.getStatusCode() == StatusCode.SERVER_ERROR) {
+				mInterstitialListener
+				.onInterstitialFailed(MoPubErrorCode.SERVER_ERROR);
+			} else {
+				mInterstitialListener
+						.onInterstitialFailed(MoPubErrorCode.UNSPECIFIED);
+			}
+		}
+		
+	}
+
+	@Override
+	public void onAdLoadSucceeded(InMobiInterstitial arg0) {
+		Log.d("InMobiInterstitialCustomEvent", "InMobi interstitial ad loaded successfully.");
+		if (mInterstitialListener != null) {
+			mInterstitialListener.onInterstitialLoaded();
+		}
+	}
+
+	@Override
+	public void onAdRewardActionCompleted(InMobiInterstitial arg0,
+			Map<Object, Object> arg1) {
+		Log.d("InMobiInterstitialCustomEvent", "InMobi interstitial onRewardActionCompleted.");	
+		
+		Iterator<Object> iterator = arg1.keySet().iterator(); 
+		while (iterator.hasNext()) {  
+		   String key = iterator.next().toString();  
+		   String value = arg1.get(key).toString();  
+		   Log.d("Rewards: ", key+":"+value);
+		}
+	}
+
+	@Override
+	public void onUserLeftApplication(InMobiInterstitial arg0) {
+		Log.d("InMobiInterstitialCustomEvent", "InMobi interstitial ad leaving application.");
+	}
+
+	@Override
+	public void onAdInteraction(InMobiInterstitial arg0,
+			Map<Object, Object> arg1) {
+		Log.d("InMobiInterstitialCustomEvent", "InMobi interstitial interaction happening.");
+		if (mInterstitialListener != null) {
+			mInterstitialListener.onInterstitialClicked();
+		}		
+	}
+}
diff --git a/extras/src/com/mopub/mobileads/InMobiRewardedCustomEvent.java b/extras/src/com/mopub/mobileads/InMobiRewardedCustomEvent.java
new file mode 100644
index 00000000..aef285d5
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/InMobiRewardedCustomEvent.java
@@ -0,0 +1,216 @@
+package com.inmobi.showcase;
+
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+
+import org.json.JSONObject;
+
+import android.app.Activity;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.util.Log;
+
+import com.inmobi.ads.InMobiAdRequestStatus;
+import com.inmobi.ads.InMobiInterstitial;
+import com.inmobi.ads.InMobiAdRequestStatus.StatusCode;
+import com.inmobi.ads.InMobiInterstitial.InterstitialAdListener;
+import com.inmobi.sdk.InMobiSdk;
+import com.inmobi.sdk.InMobiSdk.Education;
+import com.inmobi.sdk.InMobiSdk.Ethnicity;
+import com.inmobi.sdk.InMobiSdk.Gender;
+import com.inmobi.sdk.InMobiSdk.LogLevel;
+import com.mopub.common.LifecycleListener;
+import com.mopub.common.MoPub;
+import com.mopub.common.MoPubReward;
+import com.mopub.mobileads.CustomEventRewardedVideo;
+import com.mopub.mobileads.MoPubErrorCode;
+import com.mopub.mobileads.MoPubRewardedVideoManager;
+
+public class InMobiRewardedCustomEvent extends CustomEventRewardedVideo implements
+InterstitialAdListener {
+
+	boolean isInitialized=false;
+	private InMobiInterstitial inmobiInterstitial;
+	private JSONObject serverParams;
+	private String accountId="";
+	private long placementId=-1;
+
+	@Override
+	protected boolean checkAndInitializeSdk(@NonNull Activity arg0,
+			@NonNull Map<String, Object> arg1, @NonNull Map<String, String> arg2)
+					throws Exception {
+		// TODO Auto-generated method stub
+		if(isInitialized){
+			return false;
+		}
+		try {
+		    serverParams = new JSONObject(arg2);
+		    accountId = serverParams.getString("accountid");
+		    placementId = serverParams.getLong("placementid");
+		} catch (Exception e) {
+		    Log.e("InMobiInterstitialCustomEvent", "Could not parse server parameters");
+			e.printStackTrace();
+		}
+
+		InMobiSdk.init(arg0,accountId);
+		Log.v("InMobiMopubRewardedCustomEvent","SDK Initialized");
+		isInitialized = true;
+		return true;
+
+	}
+	@Override
+	@NonNull
+	protected String getAdNetworkId() {
+		// TODO Auto-generated method stub
+		return String.valueOf(placementId);
+	}
+
+	@Override
+	@Nullable
+	protected LifecycleListener getLifecycleListener() {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	@Override
+	@Nullable
+	protected CustomEventRewardedVideoListener getVideoListenerForSdk() {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	@Override
+	protected boolean hasVideoAvailable() {
+		// TODO Auto-generated method stub
+		return inmobiInterstitial!=null && inmobiInterstitial.isReady();
+	}
+
+	@Override
+	protected void loadWithSdkInitialized(@NonNull Activity arg0,
+			@NonNull Map<String, Object> arg1, @NonNull Map<String, String> arg2)
+					throws Exception {
+		// TODO Auto-generated method stub
+		Log.v("InMobiMopubRewardedCustomEvent","Calling rewarded video");
+		
+		
+		inmobiInterstitial = new InMobiInterstitial(arg0,placementId,this);
+		InMobiSdk.setAreaCode("areacode");
+		InMobiSdk.setEducation(Education.HIGH_SCHOOL_OR_LESS);
+		InMobiSdk.setGender(Gender.MALE);
+		InMobiSdk.setIncome(1000);
+		InMobiSdk.setAge(23);
+		InMobiSdk.setPostalCode("postalcode");
+		InMobiSdk.setLogLevel(LogLevel.DEBUG);
+		InMobiSdk.setLocationWithCityStateCountry("blore", "kar", "india");
+		InMobiSdk.setLanguage("ENG");
+		InMobiSdk.setInterests("dance");
+		InMobiSdk.setEthnicity(Ethnicity.ASIAN);
+		InMobiSdk.setYearOfBirth(1980);
+		Map<String, String> map = new HashMap<String, String>();
+		map.put("tp", "c_mopub");
+		map.put("tp-ver", MoPub.SDK_VERSION);
+		inmobiInterstitial.setExtras(map);
+		inmobiInterstitial.load();
+	}
+
+	@Override
+	protected void onInvalidate() {
+		// TODO Auto-generated method stub
+
+	}
+
+	@Override
+	protected void showVideo() {
+		// TODO Auto-generated method stub
+		if(this.hasVideoAvailable()){
+			inmobiInterstitial.show();
+		}
+		else{
+			MoPubRewardedVideoManager.onRewardedVideoPlaybackError(InMobiRewardedCustomEvent.class, String.valueOf(placementId), MoPubErrorCode.VIDEO_PLAYBACK_ERROR);
+		}
+	}
+
+	@Override
+	public void onAdDismissed(InMobiInterstitial arg0) {
+		// TODO Auto-generated method stub
+		Log.v("InMobiMopubRewardedCustomEvent","Ad dismissed");
+		MoPubRewardedVideoManager.onRewardedVideoClosed(InMobiRewardedCustomEvent.class, String.valueOf(placementId));
+	}
+
+	@Override
+	public void onAdDisplayed(InMobiInterstitial arg0) {
+		// TODO Auto-generated method stub
+		Log.v("InMobiMopubRewardedCustomEvent","Ad displayed");
+		MoPubRewardedVideoManager.onRewardedVideoStarted(InMobiRewardedCustomEvent.class, String.valueOf(placementId));
+	}
+
+	@Override
+	public void onAdInteraction(InMobiInterstitial arg0,
+			Map<Object, Object> arg1) {
+		// TODO Auto-generated method stub
+		Log.v("InMobiMopubRewardedCustomEvent","Ad interaction");
+		MoPubRewardedVideoManager.onRewardedVideoClicked(InMobiRewardedCustomEvent.class, String.valueOf(placementId));
+	}
+
+	@Override
+	public void onAdLoadFailed(InMobiInterstitial arg0,
+			InMobiAdRequestStatus arg1) {
+
+		// TODO Auto-generated method stub
+		Log.v("InMobiMopubRewardedCustomEvent","Ad failed to load:"+arg1.getStatusCode().toString());
+		if (arg1.getStatusCode() == StatusCode.INTERNAL_ERROR) {
+			MoPubRewardedVideoManager
+			.onRewardedVideoLoadFailure(InMobiRewardedCustomEvent.class, "1445550471285", MoPubErrorCode.INTERNAL_ERROR);
+		} else if (arg1.getStatusCode() == StatusCode.REQUEST_INVALID) {
+			MoPubRewardedVideoManager
+			.onRewardedVideoLoadFailure(InMobiRewardedCustomEvent.class, "1445550471285", MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+		} else if (arg1.getStatusCode() == StatusCode.NETWORK_UNREACHABLE) {
+			MoPubRewardedVideoManager
+			.onRewardedVideoLoadFailure(InMobiRewardedCustomEvent.class, "1445550471285", MoPubErrorCode.NETWORK_INVALID_STATE);
+		} else if (arg1.getStatusCode() == StatusCode.NO_FILL) {
+			Log.v("InMobiMopubRewardedCustomEvent","No Fill");
+			MoPubRewardedVideoManager
+			.onRewardedVideoLoadFailure(InMobiRewardedCustomEvent.class,"1445550471285", MoPubErrorCode.NO_FILL);
+		} else if (arg1.getStatusCode() == StatusCode.REQUEST_TIMED_OUT) {
+			MoPubRewardedVideoManager
+			.onRewardedVideoLoadFailure(InMobiRewardedCustomEvent.class, "1445550471285", MoPubErrorCode.NETWORK_TIMEOUT);
+		} else if (arg1.getStatusCode() == StatusCode.SERVER_ERROR) {
+			MoPubRewardedVideoManager
+			.onRewardedVideoLoadFailure(InMobiRewardedCustomEvent.class, "1445550471285", MoPubErrorCode.SERVER_ERROR);
+		} else {
+			MoPubRewardedVideoManager
+			.onRewardedVideoLoadFailure(InMobiRewardedCustomEvent.class, "1445550471285", MoPubErrorCode.UNSPECIFIED);
+		}
+		Log.v("InMobiMopubRewardedCustomEvent","callback executed");
+	}
+
+	@Override
+	public void onAdLoadSucceeded(InMobiInterstitial arg0) {
+		Log.v("InMobiMopubRewardedCustomEvent","Ad load succeeded");
+		if(arg0!=null){
+			MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(InMobiRewardedCustomEvent.class, String.valueOf(placementId));
+		}
+	}
+
+	@Override
+	public void onAdRewardActionCompleted(InMobiInterstitial arg0,
+			Map<Object, Object> arg1) {
+		// TODO Auto-generated method stub
+		Log.v("InMobiMopubRewardedCustomEvent","Rewards");
+		Iterator<Object> iterator = arg1.keySet().iterator(); 
+		String key="",value="";
+		while (iterator.hasNext()) {  
+			key = iterator.next().toString();  
+			value = arg1.get(key).toString();  
+			Log.d("Rewards: ", key+":"+value);
+		}
+		MoPubRewardedVideoManager.onRewardedVideoCompleted(InMobiRewardedCustomEvent.class, null, MoPubReward.success(key, Integer.parseInt(value)));
+	}
+
+	@Override
+	public void onUserLeftApplication(InMobiInterstitial arg0) {
+		Log.v("InMobiMopubRewardedCustomEvent","User left application");
+	}
+
+}
diff --git a/extras/src/com/mopub/nativeads/InMobiNativeCustomEvent.java b/extras/src/com/mopub/nativeads/InMobiNativeCustomEvent.java
new file mode 100644
index 00000000..9623f792
--- /dev/null
+++ b/extras/src/com/mopub/nativeads/InMobiNativeCustomEvent.java
@@ -0,0 +1,337 @@
+package com.inmobi.showcase;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+import org.json.JSONTokener;
+
+import android.app.Activity;
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.util.Log;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.inmobi.ads.InMobiAdRequestStatus;
+import com.inmobi.ads.InMobiNative;
+import com.inmobi.ads.InMobiNative.NativeAdListener;
+import com.inmobi.sdk.InMobiSdk;
+import com.inmobi.sdk.InMobiSdk.Education;
+import com.inmobi.sdk.InMobiSdk.Ethnicity;
+import com.inmobi.sdk.InMobiSdk.Gender;
+import com.inmobi.sdk.InMobiSdk.LogLevel;
+import com.mopub.common.MoPub;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.nativeads.CustomEventNative;
+import com.mopub.nativeads.ImpressionTracker;
+import com.mopub.nativeads.NativeClickHandler;
+import com.mopub.nativeads.NativeErrorCode;
+import com.mopub.nativeads.NativeImageHelper;
+import com.mopub.nativeads.StaticNativeAd;
+import static com.mopub.common.util.Json.getJsonValue;
+import static com.mopub.common.util.Numbers.parseDouble;
+import static com.mopub.nativeads.NativeImageHelper.preCacheImages;
+
+public class InMobiNativeCustomEvent extends CustomEventNative {
+
+
+	private static boolean isAppIntialize = false;
+	private JSONObject serverParams;
+	private String accountId="";
+	private long placementId=-1;
+	@Override
+	protected void loadNativeAd(@NonNull Context arg0,
+			@NonNull CustomEventNativeListener arg1,
+			@NonNull Map<String, Object> arg2, @NonNull Map<String, String> arg3) {
+		// TODO Auto-generated method stub
+		Log.d("InMobiNativeCustomEvent", "Reached native adapter");
+		try {
+			serverParams = new JSONObject(arg3);
+		} catch (Exception e) {
+			Log.e("InMobiInterstitialCustomEvent", "Could not parse server parameters");
+			e.printStackTrace();
+		}
+
+		Activity activity = null;
+		if (arg0 instanceof Activity) {
+			activity = (Activity) arg0;
+		} else {
+			// You may also pass in an Activity Context in the localExtras map
+			// and retrieve it here.
+		}
+		if (activity == null) {
+			arg1.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
+			return;
+		}
+		try {
+			accountId = serverParams.getString("accountid");
+			placementId = serverParams.getLong("placementid");
+		} catch (JSONException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+		if (!isAppIntialize) {
+			try {
+				InMobiSdk.init(activity,accountId);
+			} catch (Exception e) {
+				e.printStackTrace();
+			}
+			isAppIntialize = true;
+		}
+
+		InMobiSdk.setAreaCode("areacode");
+		InMobiSdk.setEducation(Education.HIGH_SCHOOL_OR_LESS);
+		InMobiSdk.setGender(Gender.MALE);
+		InMobiSdk.setIncome(1000);
+		InMobiSdk.setAge(23);
+		InMobiSdk.setPostalCode("postalcode");
+		InMobiSdk.setLogLevel(LogLevel.DEBUG);
+		InMobiSdk.setLocationWithCityStateCountry("blore", "kar", "india");
+		InMobiSdk.setLanguage("ENG");
+		InMobiSdk.setInterests("dance");
+		InMobiSdk.setEthnicity(Ethnicity.ASIAN);
+		InMobiSdk.setYearOfBirth(1980);
+		Map<String, String> map = new HashMap<String, String>();
+		map.put("tp", "c_mopub");
+		map.put("tp-ver", MoPub.SDK_VERSION);
+		final InMobiStaticNativeAd inMobiStaticNativeAd =
+				new InMobiStaticNativeAd(arg0,
+						new ImpressionTracker(arg0),
+						new NativeClickHandler(arg0),
+						arg1);
+		inMobiStaticNativeAd.setIMNative(new InMobiNative(placementId,inMobiStaticNativeAd));
+		inMobiStaticNativeAd.loadAd();
+	}
+
+	static class InMobiStaticNativeAd extends StaticNativeAd implements NativeAdListener {
+		static final int IMPRESSION_MIN_TIME_VIEWED = 1000;
+
+		// Modifiable keys
+		static final String TITLE = "title";
+		static final String DESCRIPTION = "description";
+		static final String SCREENSHOTS = "screenshots";
+		static final String ICON = "icon";
+		static final String LANDING_URL = "landingURL";
+		static final String CTA = "cta";
+		static final String RATING = "rating";
+
+		// Constant keys
+		static final String URL = "url";
+
+		private final Context mContext;
+		private final CustomEventNativeListener mCustomEventNativeListener;
+		private final ImpressionTracker mImpressionTracker;
+		private final NativeClickHandler mNativeClickHandler;
+		private InMobiNative mImNative;
+
+		InMobiStaticNativeAd(final Context context,
+				final ImpressionTracker impressionTracker,
+				final NativeClickHandler nativeClickHandler,
+				final CustomEventNativeListener customEventNativeListener) {
+			mContext = context.getApplicationContext();
+			mImpressionTracker = impressionTracker;
+			mNativeClickHandler = nativeClickHandler;
+			mCustomEventNativeListener = customEventNativeListener;
+		}
+
+		void setIMNative(final InMobiNative imNative) {
+			mImNative = imNative;
+		}
+
+		void loadAd() {
+			mImNative.load();
+		}
+
+
+		// Lifecycle Handlers
+		@Override
+		public void prepare(final View view) {
+			if (view != null && view instanceof ViewGroup) {
+				InMobiNative.bind((ViewGroup)view, mImNative);
+			} else if (view != null && view.getParent() instanceof ViewGroup) {
+				InMobiNative.bind((ViewGroup)(view.getParent()), mImNative);
+			} else {
+				Log.e("MoPub", "InMobi did not receive ViewGroup to attachToView, unable to record impressions");
+			}
+			mImpressionTracker.addView(view, this);
+			mNativeClickHandler.setOnClickListener(view, this);
+		}
+
+		@Override
+		public void clear(final View view) {
+			mImpressionTracker.removeView(view);
+			mNativeClickHandler.clearOnClickListener(view);
+		}
+
+		@Override
+		public void destroy() {
+			//InMobiNative.unbind(arg0);
+			mImpressionTracker.destroy();
+		}
+
+		// Event Handlers
+		@Override
+		public void recordImpression(final View view) {
+			notifyAdImpressed();
+		}
+
+		@Override
+		public void handleClick(final View view) {
+			notifyAdClicked();
+			mNativeClickHandler.openClickDestinationUrl(getClickDestinationUrl(), view);
+			mImNative.reportAdClick(null);
+		}
+
+		void parseJson(final InMobiNative imNative) throws JSONException  {
+			final JSONTokener jsonTokener = new JSONTokener((String) imNative.getAdContent());
+			final JSONObject jsonObject = new JSONObject(jsonTokener);
+
+			setTitle(getJsonValue(jsonObject, TITLE, String.class));
+			String text = getJsonValue(jsonObject, DESCRIPTION, String.class);
+			if(text!=null)
+				setText(text);
+			final JSONObject screenShotJsonObject = getJsonValue(jsonObject, SCREENSHOTS, JSONObject.class);
+			if (screenShotJsonObject != null) {
+				setMainImageUrl(getJsonValue(screenShotJsonObject, URL, String.class));
+			}
+
+			final JSONObject iconJsonObject = getJsonValue(jsonObject, ICON, JSONObject.class);
+			if (iconJsonObject != null) {
+				setIconImageUrl(getJsonValue(iconJsonObject, URL, String.class));
+			}
+
+			final String clickDestinationUrl = getJsonValue(jsonObject, LANDING_URL, String.class);
+			if (clickDestinationUrl == null) {
+				final String errorMessage = "InMobi JSON response missing required key: "
+						+ LANDING_URL + ". Failing over.";
+				MoPubLog.d(errorMessage);
+				throw new JSONException(errorMessage);
+			}
+
+			setClickDestinationUrl(clickDestinationUrl);
+			String cta = getJsonValue(jsonObject, CTA, String.class);
+			if(cta!=null)
+				setCallToAction(cta);
+			try {
+				if(jsonObject.opt(RATING)!=null){
+					setStarRating(parseDouble(jsonObject.opt(RATING)));	
+				}
+			} catch (ClassCastException e) {
+				Log.d("MoPub", "Unable to set invalid star rating for InMobi Native.");
+			}            setImpressionMinTimeViewed(IMPRESSION_MIN_TIME_VIEWED);
+		}
+
+		@Override
+		public void onAdDismissed(InMobiNative arg0) {
+			// TODO Auto-generated method stub
+			Log.d("InMobiNativeCustomEvent","Native Ad is dismissed");
+		}
+
+		@Override
+		public void onAdDisplayed(InMobiNative arg0) {
+			// TODO Auto-generated method stub
+			Log.d("InMobiNativeCustomEvent","Native Ad is displayed");
+		}
+
+		@Override
+		public void onAdLoadFailed(InMobiNative arg0, InMobiAdRequestStatus arg1) {
+			// TODO Auto-generated method stub
+			Log.d("InMobiNativeCustomEvent","Native ad failed to load");
+			String errorMsg="";
+			switch (arg1.getStatusCode()) {
+			case INTERNAL_ERROR:
+				errorMsg="INTERNAL_ERROR";
+				break;
+			case REQUEST_INVALID:
+				errorMsg="INVALID_REQUEST";
+				break;
+			case NETWORK_UNREACHABLE:
+				errorMsg="NETWORK_UNREACHABLE";
+				break;
+			case NO_FILL:
+				errorMsg="NO_FILL";
+				break;
+			case REQUEST_PENDING:
+				errorMsg="REQUEST_PENDING";
+				break;
+			case REQUEST_TIMED_OUT:
+				errorMsg="REQUEST_TIMED_OUT";
+				break;
+			case SERVER_ERROR:
+				errorMsg="SERVER_ERROR";
+				break;
+			case AD_ACTIVE:
+				errorMsg="AD_ACTIVE";
+				break;
+			case EARLY_REFRESH_REQUEST:
+				errorMsg="EARLY_REFRESH_REQUEST";
+				break;
+			default:
+				errorMsg="NETWORK_ERROR";
+				break;
+			}
+			if (errorMsg == "INVALID_REQUEST") {
+				mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_REQUEST);
+			} else if (errorMsg == "INTERNAL_ERROR" || errorMsg == "NETWORK_ERROR") {
+				mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
+			} else if (errorMsg == "NO_FILL") {
+				mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_NO_FILL);
+			} else if (errorMsg == "REQUEST_TIMED_OUT"){
+				mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_TIMEOUT);
+			}else if(errorMsg == "NETWORK_UNREACHABLE"){
+				mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.CONNECTION_ERROR);
+			}
+			else {
+				mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
+			}
+		}
+
+		@Override
+		public void onAdLoadSucceeded(InMobiNative imNative) {
+			// TODO Auto-generated method stub
+			Log.v("InMobiNativeCustomEvent", "Ad loaded:"+imNative.getAdContent().toString());
+			try {
+				parseJson(imNative);
+			} catch (JSONException e) {
+				mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.INVALID_RESPONSE);
+				return;
+			}
+
+			final List<String> imageUrls = new ArrayList<String>();
+			/*final String mainImageUrl = getMainImageUrl();
+            if (mainImageUrl != null) {
+                imageUrls.add(mainImageUrl);
+            }*/
+
+			final String iconUrl = getIconImageUrl();
+			if (iconUrl != null) {
+				imageUrls.add(iconUrl);
+			}
+
+			preCacheImages(mContext, imageUrls, new NativeImageHelper.ImageListener() {
+				@Override
+				public void onImagesCached() {
+					Log.v("InMobiNativeCustomEvent", "image cached");
+					mCustomEventNativeListener.onNativeAdLoaded(InMobiStaticNativeAd.this);
+				}
+
+				@Override
+				public void onImagesFailedToCache(NativeErrorCode errorCode) {
+					Log.v("InMobiNativeCustomEvent", "image failed to cache");
+					mCustomEventNativeListener.onNativeAdFailed(errorCode);
+				}
+			});            
+		}
+
+		@Override
+		public void onUserLeftApplication(InMobiNative arg0) {
+			// TODO Auto-generated method stub
+			Log.d("InMobiNativeCustomEvent","User left application");
+		}
+
+	}
+}
