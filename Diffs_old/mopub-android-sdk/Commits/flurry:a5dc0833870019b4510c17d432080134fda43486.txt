diff --git a/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java b/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java
index 9cf1db8c..30070caf 100644
--- a/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java
+++ b/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 import android.os.Build;
+import android.support.annotation.NonNull;
 import android.text.TextUtils;
 import android.util.Log;
 
@@ -12,7 +13,7 @@
     public static final String PARAM_AD_SPACE_NAME = "adSpaceName";
 
     private static final String ORIGIN_IDENTIFIER = "Flurry_Mopub_Android";
-    private static final String ORIGIN_VERSION = "6.3.1";
+    private static final String ORIGIN_VERSION = "6.4.0";
     private static FlurryAgentWrapper sWrapper;
 
     private FlurryAgent.Builder mAgentBuilder;
@@ -33,9 +34,9 @@ private FlurryAgentWrapper() {
         FlurryAgent.addOrigin(ORIGIN_IDENTIFIER, ORIGIN_VERSION);
     }
 
-    public synchronized void startSession(Context context, String apiKey) {
+    public synchronized void startSession(@NonNull final Context context, final String apiKey) {
         // validate parameters
-        if (context == null || TextUtils.isEmpty(apiKey)) {
+        if (TextUtils.isEmpty(apiKey)) {
             return;
         }
 
@@ -52,13 +53,13 @@ public synchronized void startSession(Context context, String apiKey) {
         }
     }
 
-    public synchronized void endSession(Context context) {
+    public synchronized void endSession(final Context context) {
         // validate parameters
         if (context == null) {
             return;
         }
 
-	if (FlurryAgent.isSessionActive()) {
+        if (FlurryAgent.isSessionActive()) {
             // sessions are automatic on ICS+
             if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
                 return;
diff --git a/extras/src/com/mopub/nativeads/FlurryBaseNativeAd.java b/extras/src/com/mopub/nativeads/FlurryBaseNativeAd.java
new file mode 100644
index 00000000..4dff5bdf
--- /dev/null
+++ b/extras/src/com/mopub/nativeads/FlurryBaseNativeAd.java
@@ -0,0 +1,34 @@
+package com.mopub.nativeads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import java.util.List;
+import java.util.Map;
+
+public interface FlurryBaseNativeAd {
+
+    void fetchAd();
+    @NonNull List<String> getImageUrls();
+    boolean isAppInstallAd();
+    void precacheImages();
+
+    @Nullable String getTitle();
+    @Nullable String getText();
+    @Nullable String getCallToAction();
+    @Nullable String getMainImageUrl();
+    @Nullable String getIconImageUrl();
+    @Nullable Double getStarRating();
+    @Nullable Map<String, Object> getExtras();
+
+
+    void setTitle(@Nullable final String title);
+    void setText(@Nullable final String text);
+    void setCallToAction(@Nullable final String callToAction);
+    void setMainImageUrl(@Nullable final String mainImageUrl);
+    void setIconImageUrl(@Nullable final String iconImageUrl);
+    void setStarRating(@Nullable final Double starRating);
+    void addExtra(@NonNull final String key, @Nullable final Object value);
+
+    void onNativeAdLoaded();
+}
diff --git a/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java b/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java
index 1a9c1344..415df4eb 100644
--- a/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java
+++ b/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java
@@ -1,18 +1,71 @@
 package com.mopub.nativeads;
 
 import android.app.Activity;
+import android.content.Context;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.text.TextUtils;
 import android.util.Log;
+import android.view.View;
+import android.view.ViewGroup;
 
+import com.flurry.android.ads.FlurryAdErrorType;
 import com.flurry.android.ads.FlurryAdNative;
+import com.flurry.android.ads.FlurryAdNativeAsset;
+import com.flurry.android.ads.FlurryAdNativeListener;
+import com.flurry.android.ads.FlurryAdTargeting;
 import com.mopub.mobileads.FlurryAgentWrapper;
 
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 
-public class FlurryCustomEventNative extends CustomEventNative {
+public final class FlurryCustomEventNative extends CustomEventNative {
 
+    /**
+     * Extra image asset for the star-rating of app-install ads.
+     */
+    public static final String EXTRA_STAR_RATING_IMG = "flurry_starratingimage";
+    /**
+     * Extra text asset specifying the category for app-install ads.
+     */
+    public static final String EXTRA_APP_CATEGORY = "flurry_appcategorytext";
+    /**
+     * Extra image asset for the Flurry native ad branding logo.
+     */
+    public static final String EXTRA_SEC_BRANDING_LOGO = "flurry_brandingimage";
+    /**
+     * Key for enabling Flurry debug logging. After manually creating a {@link MoPubNative} object,
+     * pass in <code>true</code> as a value for this key in the map passed to
+     * {@link MoPubNative#setLocalExtras(Map)}.
+     *
+     * E.g.
+     *
+     * <blockquote><pre>
+     * {@code
+     * Map<String, Object> adapterExtras = new TreeMap<String, Object>();
+     * adapterExtras.put(FlurryCustomEventNative.LOCAL_EXTRA_TEST_MODE, true);
+     * mMoPubNative.setLocalExtras(adapterExtras);
+     * }
+     * </pre></blockquote>
+     *
+     * Debug logging is disabled on the Flurry SDK by default.
+     */
+    public static final String LOCAL_EXTRA_TEST_MODE = "enableTestMode";
     private static final String LOG_TAG = FlurryCustomEventNative.class.getSimpleName();
+    private static final String ASSET_SEC_HQ_IMAGE = "secHqImage";
+    private static final String ASSET_SEC_IMAGE = "secImage";
+    private static final String ASSET_SEC_HQ_RATING_IMG = "secHqRatingImg";
+    private static final String ASSET_SEC_HQ_BRANDING_LOGO = "secHqBrandingLogo";
+    private static final String ASSET_SEC_RATING_IMG = "secRatingImg";
+    private static final String ASSET_APP_RATING = "appRating";
+    private static final String ASSET_APP_CATEGORY = "appCategory";
+    private static final String ASSET_HEADLINE = "headline";
+    private static final String ASSET_SUMMARY = "summary";
+    private static final String ASSET_CALL_TO_ACTION = "callToAction";
+    private static final String ASSET_VIDEO = "videoUrl";
+    private static final double MOPUB_STAR_RATING_SCALE = StaticNativeAd.MAX_STAR_RATING;
 
     @Override
     protected void loadNativeAd(@NonNull final Activity activity,
@@ -37,10 +90,95 @@ protected void loadNativeAd(@NonNull final Activity activity,
             return;
         }
 
-        final FlurryStaticNativeAd mflurryStaticNativeAd =
-                new FlurryStaticNativeAd(activity,
-                        new FlurryAdNative(activity, flurryAdSpace), customEventNativeListener);
-        mflurryStaticNativeAd.fetchAd();
+        FlurryAdNative flurryAdNative = new FlurryAdNative(activity, flurryAdSpace);
+
+        if (localExtras.containsKey(LOCAL_EXTRA_TEST_MODE) &&
+                localExtras.get(LOCAL_EXTRA_TEST_MODE) instanceof Boolean) {
+            FlurryAdTargeting targeting = new FlurryAdTargeting();
+            targeting.setEnableTestAds((Boolean) localExtras.get(LOCAL_EXTRA_TEST_MODE));
+        }
+
+        final FlurryBaseNativeAd flurryNativeAd;
+        if (shouldAllowVideoNativeAds()) {
+            flurryNativeAd = new FlurryVideoEnabledNativeAd(activity, flurryAdNative,
+                    customEventNativeListener);
+        } else {
+            flurryNativeAd = new FlurryStaticNativeAd(activity, flurryAdNative,
+                    customEventNativeListener);
+        }
+        flurryNativeAd.fetchAd();
+    }
+
+    private static synchronized void mapNativeAd(@NonNull final FlurryBaseNativeAd mopubSupportedAd,
+                                                 @NonNull final FlurryAdNative flurryAdNative) {
+        FlurryAdNativeAsset coverImageAsset = flurryAdNative.getAsset(ASSET_SEC_HQ_IMAGE);
+        FlurryAdNativeAsset iconImageAsset = flurryAdNative.getAsset(ASSET_SEC_IMAGE);
+
+        if (coverImageAsset != null && !TextUtils.isEmpty(coverImageAsset.getValue())) {
+            mopubSupportedAd.setMainImageUrl(coverImageAsset.getValue());
+        }
+        if (iconImageAsset != null && !TextUtils.isEmpty(iconImageAsset.getValue())) {
+            mopubSupportedAd.setIconImageUrl(iconImageAsset.getValue());
+        }
+
+        mopubSupportedAd.setTitle(flurryAdNative.getAsset(ASSET_HEADLINE).getValue());
+        mopubSupportedAd.setText(flurryAdNative.getAsset(ASSET_SUMMARY).getValue());
+        mopubSupportedAd.addExtra(EXTRA_SEC_BRANDING_LOGO,
+                flurryAdNative.getAsset(ASSET_SEC_HQ_BRANDING_LOGO).getValue());
+
+        if (mopubSupportedAd.isAppInstallAd()) {
+            // App rating image URL may be null
+            FlurryAdNativeAsset ratingHqImageAsset = flurryAdNative
+                    .getAsset(ASSET_SEC_HQ_RATING_IMG);
+            if (ratingHqImageAsset != null && !TextUtils.isEmpty(ratingHqImageAsset.getValue())) {
+                mopubSupportedAd.addExtra(EXTRA_STAR_RATING_IMG, ratingHqImageAsset.getValue());
+            } else {
+                FlurryAdNativeAsset ratingImageAsset = flurryAdNative
+                        .getAsset(ASSET_SEC_RATING_IMG);
+                if (ratingImageAsset != null && !TextUtils.isEmpty(ratingImageAsset.getValue())) {
+                    mopubSupportedAd.addExtra(EXTRA_STAR_RATING_IMG, ratingImageAsset.getValue());
+                }
+            }
+
+            FlurryAdNativeAsset appCategoryAsset = flurryAdNative.getAsset(ASSET_APP_CATEGORY);
+            if (appCategoryAsset != null) {
+                mopubSupportedAd.addExtra(EXTRA_APP_CATEGORY, appCategoryAsset.getValue());
+            }
+            FlurryAdNativeAsset appRatingAsset = flurryAdNative.getAsset(ASSET_APP_RATING);
+            if (appRatingAsset != null) {
+                mopubSupportedAd.setStarRating(getStarRatingValue(appRatingAsset.getValue()));
+            }
+        }
+
+        FlurryAdNativeAsset ctaAsset = flurryAdNative.getAsset(ASSET_CALL_TO_ACTION);
+        if (ctaAsset != null) {
+            mopubSupportedAd.setCallToAction(ctaAsset.getValue());
+        }
+
+        if (mopubSupportedAd.getImageUrls().isEmpty()) {
+            Log.d(LOG_TAG, "preCacheImages: No images to cache for Flurry Native Ad: " +
+                    flurryAdNative.toString());
+            mopubSupportedAd.onNativeAdLoaded();
+        } else {
+            mopubSupportedAd.precacheImages();
+        }
+    }
+
+    @Nullable
+    private static Double getStarRatingValue(@Nullable final String appRatingString) {
+        // App rating String should be of the form X/Y. E.g. 80/100
+        Double rating = null;
+        if (appRatingString != null) {
+            String[] ratingParts = appRatingString.split("/");
+            if (ratingParts.length == 2) {
+                try {
+                    float numer = Integer.valueOf(ratingParts[0]);
+                    float denom = Integer.valueOf(ratingParts[1]);
+                    rating = (numer / denom) * MOPUB_STAR_RATING_SCALE;
+                } catch (NumberFormatException e) { /*Ignore and return null*/ }
+            }
+        }
+        return rating;
     }
 
     private boolean validateExtras(final Map<String, String> serverExtras) {
@@ -52,4 +190,419 @@ private boolean validateExtras(final Map<String, String> serverExtras) {
         return (!TextUtils.isEmpty(flurryApiKey) && !TextUtils.isEmpty(flurryAdSpace));
     }
 
+    private boolean shouldAllowVideoNativeAds() {
+        try {
+            Class.forName("com.mopub.nativeads.FlurryNativeAdRenderer");
+        } catch (ClassNotFoundException e) {
+            return false;
+        }
+
+        return true;
+    }
+
+    /**
+     * Class that supports Flurry static native ads with the help of the
+     * {@link MoPubStaticNativeAdRenderer}.
+     *
+     * @see FlurryVideoEnabledNativeAd
+     */
+    static class FlurryStaticNativeAd extends StaticNativeAd implements FlurryBaseNativeAd {
+
+        private @NonNull final Context mContext;
+        private @NonNull final CustomEventNativeListener mCustomEventNativeListener;
+        private @NonNull FlurryAdNative mFlurryAdNative;
+        private FlurryAdNativeListener mFlurryNativelistener = new FlurryBaseAdListener(this) {
+            @Override
+            public void onClicked(final FlurryAdNative flurryAdNative) {
+                super.onClicked(flurryAdNative);
+                notifyAdClicked();
+            }
+
+            @Override
+            public void onImpressionLogged(final FlurryAdNative flurryAdNative) {
+                super.onImpressionLogged(flurryAdNative);
+                notifyAdImpressed();
+            }
+
+            @Override
+            public void onError(final FlurryAdNative adNative,
+                                final FlurryAdErrorType adErrorType,
+                                final int errorCode) {
+                super.onError(adNative, adErrorType, errorCode);
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_NO_FILL);
+            }
+        };
+
+        FlurryStaticNativeAd(@NonNull Context context, @NonNull FlurryAdNative adNative,
+                             @NonNull CustomEventNativeListener mCustomEventNativeListener) {
+            this.mContext = context;
+            this.mFlurryAdNative = adNative;
+            this.mCustomEventNativeListener = mCustomEventNativeListener;
+        }
+
+        // region StaticNativeAd
+
+        @Override
+        public void prepare(@NonNull final View view) {
+            mFlurryAdNative.setTrackingView(view);
+            Log.d(LOG_TAG, "prepare(" + mFlurryAdNative.toString() + " " + view.toString() + ")");
+        }
+
+        @Override
+        public void clear(@NonNull final View view) {
+            mFlurryAdNative.removeTrackingView();
+            Log.d(LOG_TAG, "clear(" + mFlurryAdNative.toString() + ")");
+        }
+
+        @Override
+        public void destroy() {
+            Log.d(LOG_TAG, "destroy(" + mFlurryAdNative.toString() + ") started.");
+            mFlurryAdNative.destroy();
+
+            FlurryAgentWrapper.getInstance().endSession(mContext);
+        }
+
+        //endregion
+
+        // region FlurryBaseNativeAd
+
+        @Override
+        public synchronized void fetchAd() {
+            Log.d(LOG_TAG, "Fetching Flurry Native Ad now.");
+            mFlurryAdNative.setListener(mFlurryNativelistener);
+            mFlurryAdNative.fetchAd();
+        }
+
+        public @NonNull List<String> getImageUrls() {
+            final List<String> imageUrls = new ArrayList<>(2);
+            final String mainImageUrl = getMainImageUrl();
+
+            if (mainImageUrl != null) {
+                imageUrls.add(getMainImageUrl());
+                Log.d(LOG_TAG, "Flurry Native Ad main image found.");
+            }
+
+            final String iconUrl = getIconImageUrl();
+            if (iconUrl != null) {
+                imageUrls.add(this.getIconImageUrl());
+                Log.d(LOG_TAG, "Flurry Native Ad icon image found.");
+            }
+            return imageUrls;
+        }
+
+        public boolean isAppInstallAd() {
+            return mFlurryAdNative.getAsset(ASSET_SEC_RATING_IMG) != null ||
+                    mFlurryAdNative.getAsset(ASSET_SEC_HQ_RATING_IMG) != null ||
+                    mFlurryAdNative.getAsset(ASSET_APP_CATEGORY) != null;
+        }
+
+        @Override
+        public void onNativeAdLoaded() {
+            mCustomEventNativeListener.onNativeAdLoaded(this);
+        }
+
+        @Override
+        public void precacheImages() {
+            NativeImageHelper.preCacheImages(mContext, getImageUrls(),
+                    new NativeImageHelper.ImageListener() {
+                        @Override
+                        public void onImagesCached() {
+                            Log.d(LOG_TAG, "preCacheImages: Ad image cached.");
+                            mCustomEventNativeListener.onNativeAdLoaded(FlurryStaticNativeAd.this);
+                        }
+
+                        @Override
+                        public void onImagesFailedToCache(final NativeErrorCode errorCode) {
+                            mCustomEventNativeListener.onNativeAdFailed(errorCode);
+                            Log.d(LOG_TAG, "preCacheImages: Unable to cache Ad image. Error["
+                                    + errorCode.toString() + "]");
+                        }
+                    });
+        }
+
+        //endregion
+    }
+
+    /**
+     * Class that supports both Flurry static and video native ads with the help of
+     * {@link FlurryNativeAdRenderer}. This class does not need to be included if you
+     * are fetching only static ads. Use {@link FlurryStaticNativeAd} instead.
+     */
+    static class FlurryVideoEnabledNativeAd extends BaseNativeAd implements FlurryBaseNativeAd {
+        private @NonNull final Context mContext;
+        private @NonNull final CustomEventNativeListener mCustomEventNativeListener;
+        private @NonNull FlurryAdNative mFlurryAdNative;
+        private FlurryAdNativeListener mFlurryNativelistener = new FlurryBaseAdListener(this) {
+            @Override
+            public void onClicked(final FlurryAdNative flurryAdNative) {
+                super.onClicked(flurryAdNative);
+                notifyAdClicked();
+            }
+
+            @Override
+            public void onImpressionLogged(final FlurryAdNative flurryAdNative) {
+                super.onImpressionLogged(flurryAdNative);
+                notifyAdImpressed();
+            }
+
+            @Override
+            public void onError(final FlurryAdNative adNative,
+                                final FlurryAdErrorType adErrorType,
+                                final int errorCode) {
+                super.onError(adNative, adErrorType, errorCode);
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_NO_FILL);
+            }
+        };
+
+        // Basic fields
+        @Nullable private String mTitle;
+        @Nullable private String mText;
+        @Nullable private String mCallToAction;
+        @Nullable private String mMainImageUrl;
+        @Nullable private String mIconImageUrl;
+        @Nullable private Double mStarRating;
+
+        // Extras
+        @NonNull private final Map<String, Object> mExtras;
+
+
+        FlurryVideoEnabledNativeAd(@NonNull Context context, @NonNull FlurryAdNative adNative,
+                                   @NonNull CustomEventNativeListener mCustomEventNativeListener) {
+            this.mContext = context;
+            this.mFlurryAdNative = adNative;
+            FlurryAdTargeting targeting = new FlurryAdTargeting();
+            targeting.setEnableTestAds(true);
+            mFlurryAdNative.setTargeting(targeting);
+            this.mCustomEventNativeListener = mCustomEventNativeListener;
+            this.mExtras = new HashMap<>();
+        }
+
+        // region StaticNativeAd
+
+        @Override
+        public void prepare(@NonNull View view) {
+            mFlurryAdNative.setTrackingView(view);
+            Log.d(LOG_TAG, "prepare(" + mFlurryAdNative.toString() + " " + view.toString() + ")");
+        }
+
+        @Override
+        public void clear(@NonNull View view) {
+            mFlurryAdNative.removeTrackingView();
+            Log.d(LOG_TAG, "clear(" + mFlurryAdNative.toString() + ")");
+        }
+
+        @Override
+        public void destroy() {
+            Log.d(LOG_TAG, "destroy(" + mFlurryAdNative.toString() + ") started.");
+            mFlurryAdNative.destroy();
+
+            FlurryAgentWrapper.getInstance().endSession(mContext);
+        }
+
+        // endregion
+
+        // region FlurryBaseNativeAd
+
+        @Override
+        public synchronized void fetchAd() {
+            Log.d(LOG_TAG, "Fetching Flurry Native Ad now.");
+            mFlurryAdNative.setListener(mFlurryNativelistener);
+            mFlurryAdNative.fetchAd();
+        }
+
+        @Override
+        public boolean isAppInstallAd() {
+            return mFlurryAdNative.getAsset(ASSET_SEC_RATING_IMG) != null ||
+                    mFlurryAdNative.getAsset(ASSET_SEC_HQ_RATING_IMG) != null ||
+                    mFlurryAdNative.getAsset(ASSET_APP_CATEGORY) != null;
+        }
+
+        @Override
+        public void precacheImages() {
+            NativeImageHelper.preCacheImages(mContext, getImageUrls(),
+                    new NativeImageHelper.ImageListener() {
+                        @Override
+                        public void onImagesCached() {
+                            Log.d(LOG_TAG, "preCacheImages: Ad image cached.");
+                            mCustomEventNativeListener.onNativeAdLoaded(
+                                    FlurryVideoEnabledNativeAd.this);
+                        }
+
+                        @Override
+                        public void onImagesFailedToCache(final NativeErrorCode errorCode) {
+                            mCustomEventNativeListener.onNativeAdFailed(errorCode);
+                            Log.d(LOG_TAG, "preCacheImages: Unable to cache Ad image. Error["
+                                    + errorCode.toString() + "]");
+                        }
+                    });
+        }
+
+        @NonNull
+        @Override
+        public List<String> getImageUrls() {
+            final List<String> imageUrls = new ArrayList<>(2);
+            final String mainImageUrl = getMainImageUrl();
+
+            if (mainImageUrl != null) {
+                imageUrls.add(getMainImageUrl());
+                Log.d(LOG_TAG, "Flurry Native Ad main image found.");
+            }
+
+            final String iconUrl = getIconImageUrl();
+            if (iconUrl != null) {
+                imageUrls.add(this.getIconImageUrl());
+                Log.d(LOG_TAG, "Flurry Native Ad icon image found.");
+            }
+            return imageUrls;
+        }
+
+        @Nullable
+        @Override
+        public String getTitle() {
+            return mTitle;
+        }
+
+        @Nullable
+        @Override
+        public String getText() {
+            return mText;
+        }
+
+        @Nullable
+        @Override
+        public String getCallToAction() {
+            return mCallToAction;
+        }
+
+        @Nullable
+        @Override
+        public String getMainImageUrl() {
+            return mMainImageUrl;
+        }
+
+        @Nullable
+        @Override
+        public String getIconImageUrl() {
+            return mIconImageUrl;
+        }
+
+        @Nullable
+        @Override
+        public Double getStarRating() {
+            return mStarRating;
+        }
+
+        @NonNull
+        @Override
+        public Map<String, Object> getExtras() {
+            return mExtras;
+        }
+
+        @Override
+        public void setTitle(@Nullable String title) {
+            this.mTitle = title;
+        }
+
+        @Override
+        public void setText(@Nullable String text) {
+            this.mText = text;
+        }
+
+        @Override
+        public void setCallToAction(@Nullable String callToAction) {
+            this.mCallToAction = callToAction;
+        }
+
+        @Override
+        public void setMainImageUrl(@Nullable String mainImageUrl) {
+            this.mMainImageUrl = mainImageUrl;
+        }
+
+        @Override
+        public void setIconImageUrl(@Nullable String iconImageUrl) {
+            this.mIconImageUrl = iconImageUrl;
+        }
+
+        @Override
+        public void setStarRating(@Nullable Double starRating) {
+            this.mStarRating = starRating;
+        }
+
+        @Override
+        public void addExtra(@NonNull String key, @Nullable Object value) {
+            mExtras.put(key, value);
+        }
+
+        @Override
+        public void onNativeAdLoaded() {
+            mCustomEventNativeListener.onNativeAdLoaded(this);
+        }
+
+        // endregion
+
+        boolean isVideoAd() {
+            return mFlurryAdNative.isVideoAd();
+        }
+
+        void loadVideoIntoView(@NonNull ViewGroup videoView) {
+            mFlurryAdNative.getAsset(ASSET_VIDEO).loadAssetIntoView(videoView);
+        }
+    }
+
+    static abstract class FlurryBaseAdListener implements FlurryAdNativeListener {
+        private final @NonNull FlurryBaseNativeAd mBaseNativeAd;
+
+        FlurryBaseAdListener(@NonNull FlurryBaseNativeAd baseNativeAd) {
+            this.mBaseNativeAd = baseNativeAd;
+        }
+
+        @Override
+        public void onFetched(final FlurryAdNative flurryAdNative) {
+            Log.d(LOG_TAG, "onFetched: Native Ad fetched successfully!");
+            mapNativeAd(mBaseNativeAd, flurryAdNative);
+        }
+
+        @Override
+        public void onShowFullscreen(final FlurryAdNative flurryAdNative) {
+            Log.d(LOG_TAG, "onShowFullscreen");
+        }
+
+        @Override
+        public void onCloseFullscreen(final FlurryAdNative flurryAdNative) {
+            Log.d(LOG_TAG, "onCloseFullscreen");
+        }
+
+        @Override
+        public void onAppExit(final FlurryAdNative flurryAdNative) {
+            Log.d(LOG_TAG, "onAppExit");
+        }
+
+        @Override
+        public void onClicked(final FlurryAdNative flurryAdNative) {
+            Log.d(LOG_TAG, "onClicked");
+        }
+
+        @Override
+        public void onImpressionLogged(final FlurryAdNative flurryAdNative) {
+            Log.d(LOG_TAG, "onImpressionLogged");
+        }
+
+        @Override
+        public void onExpanded(final FlurryAdNative flurryAdNative) {
+            Log.d(LOG_TAG, "onExpanded");
+        }
+
+        @Override
+        public void onCollapsed(final FlurryAdNative flurryAdNative) {
+            Log.d(LOG_TAG, "onCollapsed");
+        }
+
+        @Override
+        public void onError(final FlurryAdNative flurryAdNative,
+                            final FlurryAdErrorType adErrorType,
+                            final int errorCode) {
+            Log.d(LOG_TAG, String.format("onError: Flurry native ad not available. " +
+                    "Error type: %s. Error code: %s", adErrorType.toString(), errorCode));
+        }
+    }
 }
diff --git a/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java b/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java
new file mode 100644
index 00000000..48752f33
--- /dev/null
+++ b/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java
@@ -0,0 +1,101 @@
+package com.mopub.nativeads;
+
+import android.app.Activity;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.mopub.common.VisibleForTesting;
+
+import java.util.WeakHashMap;
+
+public class FlurryNativeAdRenderer implements
+        MoPubAdRenderer<FlurryCustomEventNative.FlurryVideoEnabledNativeAd> {
+    @NonNull private final FlurryViewBinder mViewBinder;
+
+    // This is used instead of View.setTag, which causes a memory leak in 2.3
+    // and earlier: https://code.google.com/p/android/issues/detail?id=18273
+    @VisibleForTesting
+    @NonNull final WeakHashMap<View, FlurryNativeViewHolder> mViewHolderMap;
+
+    public FlurryNativeAdRenderer(@NonNull final FlurryViewBinder viewBinder) {
+        mViewBinder = viewBinder;
+        mViewHolderMap = new WeakHashMap<>();
+    }
+
+    @NonNull
+    @Override
+    public View createAdView(@NonNull final Activity activity, @Nullable final ViewGroup parent) {
+        return LayoutInflater.from(activity).inflate(
+                mViewBinder.staticViewBinder.layoutId, parent, false);
+    }
+
+    @Override
+    public void renderAdView(@NonNull View view,
+                             @NonNull FlurryCustomEventNative.FlurryVideoEnabledNativeAd ad) {
+        FlurryNativeViewHolder flurryNativeViewHolder = mViewHolderMap.get(view);
+        if (flurryNativeViewHolder == null) {
+            flurryNativeViewHolder = FlurryNativeViewHolder.fromViewBinder(view, mViewBinder);
+            mViewHolderMap.put(view, flurryNativeViewHolder);
+        }
+
+        update(flurryNativeViewHolder, ad);
+        NativeRendererHelper.updateExtras(flurryNativeViewHolder.staticNativeViewHolder.mainView,
+                mViewBinder.staticViewBinder.extras, ad.getExtras());
+        setViewVisibility(flurryNativeViewHolder, View.VISIBLE);
+    }
+
+    @Override
+    public boolean supports(@NonNull BaseNativeAd nativeAd) {
+        return nativeAd instanceof FlurryCustomEventNative.FlurryVideoEnabledNativeAd;
+    }
+
+    private void update(final FlurryNativeViewHolder viewHolder,
+                        final FlurryCustomEventNative.FlurryVideoEnabledNativeAd ad) {
+        NativeRendererHelper.addTextView(viewHolder.staticNativeViewHolder.titleView,
+                ad.getTitle());
+        NativeRendererHelper.addTextView(viewHolder.staticNativeViewHolder.textView, ad.getText());
+        NativeRendererHelper.addTextView(viewHolder.staticNativeViewHolder.callToActionView,
+                ad.getCallToAction());
+        NativeImageHelper.loadImageView(ad.getIconImageUrl(),
+                viewHolder.staticNativeViewHolder.iconImageView);
+
+        if (ad.isVideoAd()) {
+            ad.loadVideoIntoView(viewHolder.videoView);
+        } else {
+            NativeImageHelper.loadImageView(ad.getMainImageUrl(),
+                    viewHolder.staticNativeViewHolder.mainImageView);
+        }
+    }
+
+    private void setViewVisibility(@NonNull final FlurryNativeViewHolder viewHolder,
+                                   final int visibility) {
+        if (viewHolder.staticNativeViewHolder.mainView != null) {
+            viewHolder.staticNativeViewHolder.mainView.setVisibility(visibility);
+        }
+    }
+
+    static class FlurryNativeViewHolder {
+        private final StaticNativeViewHolder staticNativeViewHolder;
+        private final ViewGroup videoView;
+
+        private FlurryNativeViewHolder(final StaticNativeViewHolder staticNativeViewHolder,
+                                       final ViewGroup videoView) {
+            this.staticNativeViewHolder = staticNativeViewHolder;
+            this.videoView = videoView;
+        }
+
+        static FlurryNativeViewHolder fromViewBinder(
+                final View view,
+                final FlurryViewBinder viewBinder) {
+            StaticNativeViewHolder staticNativeViewHolder = StaticNativeViewHolder
+                    .fromViewBinder(view, viewBinder.staticViewBinder);
+
+            ViewGroup videoView = (ViewGroup) view.findViewById(viewBinder.videoViewId);
+
+            return new FlurryNativeViewHolder(staticNativeViewHolder, videoView);
+        }
+    }
+}
diff --git a/extras/src/com/mopub/nativeads/FlurryStaticNativeAd.java b/extras/src/com/mopub/nativeads/FlurryStaticNativeAd.java
deleted file mode 100644
index 802782c8..00000000
--- a/extras/src/com/mopub/nativeads/FlurryStaticNativeAd.java
+++ /dev/null
@@ -1,267 +0,0 @@
-package com.mopub.nativeads;
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.text.TextUtils;
-import android.util.Log;
-import android.view.View;
-
-import com.flurry.android.ads.FlurryAdErrorType;
-import com.flurry.android.ads.FlurryAdNative;
-import com.flurry.android.ads.FlurryAdNativeAsset;
-import com.flurry.android.ads.FlurryAdNativeListener;
-import com.mopub.mobileads.FlurryAgentWrapper;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class FlurryStaticNativeAd extends StaticNativeAd {
-
-    public static final String EXTRA_STAR_RATING_IMG = "flurry_starratingimage";
-    public static final String EXTRA_APP_CATEGORY = "flurry_appcategorytext";
-    public static final String EXTRA_SEC_BRANDING_LOGO = "flurry_brandingimage";
-
-    private static final String LOG_TAG = FlurryStaticNativeAd.class.getSimpleName();
-    private static final String ASSET_SEC_HQ_IMAGE = "secHqImage";
-    private static final String ASSET_SEC_IMAGE = "secImage";
-    private static final String ASSET_SEC_HQ_RATING_IMG = "secHqRatingImg";
-    private static final String ASSET_SEC_HQ_BRANDING_LOGO = "secHqBrandingLogo";
-    private static final String ASSET_SEC_RATING_IMG = "secRatingImg";
-    private static final String ASSET_APP_RATING = "appRating";
-    private static final String ASSET_APP_CATEGORY = "appCategory";
-    private static final String ASSET_HEADLINE = "headline";
-    private static final String ASSET_SUMMARY = "summary";
-    private static final String ASSET_CALL_TO_ACTION = "callToAction";
-    private static final double MOPUB_STAR_RATING_SCALE = StaticNativeAd.MAX_STAR_RATING;
-
-    private final Context mContext;
-    private final CustomEventNative.CustomEventNativeListener mCustomEventNativeListener;
-    private FlurryAdNative mFlurryAdNative;
-
-    FlurryAdNativeListener listener = new FlurryAdNativeListener() {
-        @Override
-        public void onFetched(FlurryAdNative adNative) {
-            Log.d(LOG_TAG, "onFetched(" +adNative.toString() + ") Successful.");
-            FlurryStaticNativeAd.this.onFetched(adNative);
-        }
-
-        @Override
-        public void onShowFullscreen(FlurryAdNative adNative) {
-            Log.d(LOG_TAG, "onShowFullscreen(" + adNative.toString() + ")");
-        }
-
-        @Override
-        public void onCloseFullscreen(FlurryAdNative adNative) {
-            Log.d(LOG_TAG, "onCloseFullscreen(" + adNative.toString() + ")");
-        }
-
-        @Override
-        public void onAppExit(FlurryAdNative adNative) {
-            Log.d(LOG_TAG, "onAppExit(" + adNative.toString() + ")");
-        }
-
-        @Override
-        public void onClicked(FlurryAdNative adNative) {
-            Log.d(LOG_TAG, "onClicked(" +adNative.toString() + ")");
-            notifyAdClicked();
-        }
-
-        @Override
-        public void onImpressionLogged(FlurryAdNative flurryAdNative) {
-            Log.d(LOG_TAG, "onImpressionLogged(" +flurryAdNative.toString() + ")");
-            notifyAdImpressed();
-        }
-
-        @Override
-        public void onExpanded(FlurryAdNative adNative) {
-            Log.d(LOG_TAG, "onExpanded(" + adNative.toString() + ")");
-        }
-
-        @Override
-        public void onCollapsed(FlurryAdNative adNative) {
-            Log.d(LOG_TAG, "onCollapsed(" + adNative.toString() + ")");
-        }
-
-        @Override
-        public void onError(FlurryAdNative adNative, FlurryAdErrorType adErrorType, int errorCode) {
-            if (adErrorType.equals(FlurryAdErrorType.FETCH)) {
-                Log.d(LOG_TAG, "onError(" + adNative.toString() + ", " + adErrorType.toString() +
-                        ","+ errorCode + ")");
-                FlurryStaticNativeAd.this.onFetchFailed(adNative);
-            }
-        }
-    };
-
-    FlurryStaticNativeAd(Context context, FlurryAdNative adNative,
-                         CustomEventNative.CustomEventNativeListener mCustomEventNativeListener) {
-        this.mContext = context;
-        this.mFlurryAdNative = adNative;
-        this.mCustomEventNativeListener = mCustomEventNativeListener;
-    }
-
-    // region StaticNativeAd
-    @Override
-    public void prepare(@NonNull final View view) {
-        mFlurryAdNative.setTrackingView(view);
-        Log.d(LOG_TAG, "prepare(" + mFlurryAdNative.toString() + " " + view.toString() + ")");
-    }
-
-    @Override
-    public void clear(@NonNull View view) {
-        mFlurryAdNative.removeTrackingView();
-        Log.d(LOG_TAG, "clear("+ mFlurryAdNative.toString() + ")");
-    }
-
-    @Override
-    public void destroy() {
-        Log.d(LOG_TAG, "destroy(" + mFlurryAdNative.toString() + ") started.");
-        mFlurryAdNative.destroy();
-
-        FlurryAgentWrapper.getInstance().endSession(mContext);
-    }
-    //endregion
-
-    synchronized void fetchAd() {
-        Context context = mContext;
-        if (context != null) {
-            Log.d(LOG_TAG, "Fetching Flurry Native Ad now.");
-            mFlurryAdNative.setListener(listener);
-            mFlurryAdNative.fetchAd();
-        } else {
-            Log.d(LOG_TAG, "Context is null, not fetching Flurry Native Ad.");
-        }
-    }
-
-    private synchronized void onFetched(FlurryAdNative adNative) {
-        if (adNative != null) {
-            Log.d(LOG_TAG, "onFetched: Native Ad fetched successfully!"
-                    + adNative.toString());
-            setupNativeAd(adNative);
-        }
-    }
-
-    private synchronized void onFetchFailed(FlurryAdNative adNative) {
-        Log.d(LOG_TAG, "onFetchFailed: Native ad not available. "
-                + adNative.toString());
-        if (mCustomEventNativeListener != null) {
-            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_NO_FILL);
-        }
-    }
-
-    private synchronized void setupNativeAd(@NonNull FlurryAdNative adNative) {
-        FlurryAdNativeAsset coverImageAsset = adNative.getAsset(ASSET_SEC_HQ_IMAGE);
-        FlurryAdNativeAsset iconImageAsset = adNative.getAsset(ASSET_SEC_IMAGE);
-
-        if (coverImageAsset != null && !TextUtils.isEmpty(coverImageAsset.getValue())) {
-            setMainImageUrl(coverImageAsset.getValue());
-        }
-        if (iconImageAsset != null && !TextUtils.isEmpty(iconImageAsset.getValue())) {
-            setIconImageUrl(iconImageAsset.getValue());
-        }
-
-        setTitle(adNative.getAsset(ASSET_HEADLINE).getValue());
-        setText(adNative.getAsset(ASSET_SUMMARY).getValue());
-        addExtra(EXTRA_SEC_BRANDING_LOGO,
-                adNative.getAsset(ASSET_SEC_HQ_BRANDING_LOGO).getValue());
-
-        if(isAppInstallAd()) {
-            // App rating image URL may be null
-            FlurryAdNativeAsset ratingHqImageAsset = adNative
-                    .getAsset(ASSET_SEC_HQ_RATING_IMG);
-            if (ratingHqImageAsset != null && !TextUtils.isEmpty(ratingHqImageAsset.getValue())) {
-                addExtra(EXTRA_STAR_RATING_IMG, ratingHqImageAsset.getValue());
-            } else {
-                FlurryAdNativeAsset ratingImageAsset = adNative.getAsset(ASSET_SEC_RATING_IMG);
-                if (ratingImageAsset != null && !TextUtils.isEmpty(ratingImageAsset.getValue())) {
-                    addExtra(EXTRA_STAR_RATING_IMG, ratingImageAsset.getValue());
-                }
-            }
-
-            FlurryAdNativeAsset appCategoryAsset = adNative.getAsset(ASSET_APP_CATEGORY);
-            if (appCategoryAsset != null) {
-                addExtra(EXTRA_APP_CATEGORY, appCategoryAsset.getValue());
-            }
-            FlurryAdNativeAsset appRatingAsset = adNative.getAsset(ASSET_APP_RATING);
-            if(appRatingAsset != null) {
-                setStarRating(getStarRatingValue(appRatingAsset.getValue()));
-            }
-        }
-
-        FlurryAdNativeAsset ctaAsset = adNative.getAsset(ASSET_CALL_TO_ACTION);
-        if(ctaAsset != null){
-            setCallToAction(ctaAsset.getValue());
-        }
-
-        if (getImageUrls() == null || getImageUrls().isEmpty()) {
-            Log.d(LOG_TAG, "preCacheImages: No images to cache for Flurry Native Ad: " +
-                    adNative.toString());
-            mCustomEventNativeListener.onNativeAdLoaded(this);
-        } else {
-            NativeImageHelper.preCacheImages(mContext, getImageUrls(),
-                    new NativeImageHelper.ImageListener() {
-                @Override
-                public void onImagesCached() {
-                    if (mCustomEventNativeListener != null) {
-                        Log.d(LOG_TAG, "preCacheImages: Ad image cached.");
-                        mCustomEventNativeListener.onNativeAdLoaded(FlurryStaticNativeAd.this);
-                    } else {
-                        Log.d(LOG_TAG, "Unable to notify cache failure: " +
-                                "CustomEventNativeListener is null.");
-                    }
-                }
-
-                @Override
-                public void onImagesFailedToCache(NativeErrorCode errorCode) {
-                    if (mCustomEventNativeListener != null) {
-                        Log.d(LOG_TAG, "preCacheImages: Unable to cache Ad image. Error["
-                                + errorCode.toString() + "]");
-                        mCustomEventNativeListener.onNativeAdFailed(errorCode);
-                    } else {
-                        Log.d(LOG_TAG, "Unable to notify cache failure: " +
-                                "CustomEventNativeListener is null.");
-                    }
-                }
-            });
-        }
-    }
-
-    private List<String> getImageUrls() {
-        final List<String> imageUrls = new ArrayList<>(2);
-        final String mainImageUrl = getMainImageUrl();
-
-        if (mainImageUrl != null) {
-            imageUrls.add(getMainImageUrl());
-            Log.d(LOG_TAG, "Flurry Native Ad main image found.");
-        }
-
-        final String iconUrl = getIconImageUrl();
-        if (iconUrl != null) {
-            imageUrls.add(this.getIconImageUrl());
-            Log.d(LOG_TAG, "Flurry Native Ad icon image found.");
-        }
-        return imageUrls;
-    }
-
-    @Nullable private Double getStarRatingValue(@Nullable String appRatingString) {
-        // App rating String should be of the form X/Y. E.g. 80/100
-        Double rating = null;
-        if (appRatingString != null) {
-            String[] ratingParts = appRatingString.split("/");
-            if (ratingParts.length == 2) {
-                try {
-                    float numer = Integer.valueOf(ratingParts[0]);
-                    float denom = Integer.valueOf(ratingParts[1]);
-                    rating = (numer / denom) * MOPUB_STAR_RATING_SCALE;
-                } catch (NumberFormatException e) { /*Ignore and return null*/ }
-            }
-        }
-        return rating;
-    }
-
-    private boolean isAppInstallAd() {
-        return mFlurryAdNative.getAsset(ASSET_SEC_RATING_IMG) != null ||
-                mFlurryAdNative.getAsset(ASSET_SEC_HQ_RATING_IMG) != null ||
-                mFlurryAdNative.getAsset(ASSET_APP_CATEGORY) != null;
-    }
-}
\ No newline at end of file
diff --git a/extras/src/com/mopub/nativeads/FlurryViewBinder.java b/extras/src/com/mopub/nativeads/FlurryViewBinder.java
new file mode 100644
index 00000000..101e0899
--- /dev/null
+++ b/extras/src/com/mopub/nativeads/FlurryViewBinder.java
@@ -0,0 +1,33 @@
+package com.mopub.nativeads;
+
+import android.support.annotation.NonNull;
+
+public class FlurryViewBinder {
+    ViewBinder staticViewBinder;
+    public int videoViewId;
+
+    private FlurryViewBinder(@NonNull Builder builder) {
+        this.staticViewBinder = builder.staticViewBinder;
+        this.videoViewId = builder.videoViewId;
+    }
+
+    public final static class Builder {
+        ViewBinder staticViewBinder;
+        int videoViewId;
+
+        public Builder(final ViewBinder staticViewBinder) {
+            this.staticViewBinder = staticViewBinder;
+        }
+
+        @NonNull
+        public final Builder videoViewId(final int videoViewId) {
+            this.videoViewId = videoViewId;
+            return this;
+        }
+
+        @NonNull
+        public final FlurryViewBinder build() {
+            return new FlurryViewBinder(this);
+        }
+    }
+}
