diff --git a/CHANGELOG.md b/CHANGELOG.md
index a7979dd3..b8c5b4e9 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,14 @@
+## Version 4.14.0 (May 10, 2017)
+- Rewarded Ad reward callback `onRewardedVideoCompleted(Set<String>, MoPubReward)` is also triggered now on the client for server-side rewarding.
+- Added click callback for Rewarded Ads.
+  - Any implementors of `MoPubRewardedVideoListener` will now need to also implement `MoPubRewardedVideoListener#onRewardedVideoClicked(String)`.
+- MoPub Ads now expire after 4 hours of being unused.
+  - Interstitial and Rewarded ads served by MoPub will expire 4 hours after successfully loading, triggering a load failure with the new `EXPIRED` `MoPubErrorCode`.
+  - Cached Native Ad Placer ads now also expire in 4 hours.
+- Improved logging when attempting to show an ad that is not ready.
+- Updated build tools version to 25.0.2.
+- Bug fixes.
+
 ## Version 4.13.0 (March 23, 2017)
 
 - Updated AdColony Custom Events.
diff --git a/README.md b/README.md
index a64f9262..3b5889ef 100644
--- a/README.md
+++ b/README.md
@@ -27,7 +27,7 @@ The MoPub SDK is available via:
     }
 
     dependencies {
-        compile('com.mopub:mopub-sdk:4.13.0@aar') {
+        compile('com.mopub:mopub-sdk:4.14.0@aar') {
             transitive = true
         }
     }
@@ -48,27 +48,27 @@ The MoPub SDK is available via:
         // ... other project dependencies
 
         // For banners
-        compile('com.mopub:mopub-sdk-banner:4.13.0@aar') {
+        compile('com.mopub:mopub-sdk-banner:4.14.0@aar') {
             transitive = true
         }
         
         // For interstitials
-        compile('com.mopub:mopub-sdk-interstitial:4.13.0@aar') {
+        compile('com.mopub:mopub-sdk-interstitial:4.14.0@aar') {
             transitive = true
         }
 
         // For rewarded videos. This will automatically also include interstitials
-        compile('com.mopub:mopub-sdk-rewardedvideo:4.13.0@aar') {
+        compile('com.mopub:mopub-sdk-rewardedvideo:4.14.0@aar') {
             transitive = true
         }
 
         // For native static (images).
-        compile('com.mopub:mopub-sdk-native-static:4.13.0@aar') {
+        compile('com.mopub:mopub-sdk-native-static:4.14.0@aar') {
             transitive = true
         }
 
         // For native video. This will automatically also include native static
-        compile('com.mopub:mopub-sdk-native-video:4.13.0@aar') {
+        compile('com.mopub:mopub-sdk-native-video:4.14.0@aar') {
             transitive = true
         }
     }
@@ -96,11 +96,14 @@ The MoPub SDK is available via:
 ## New in this Version
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for a complete list of additions, fixes, and enhancements in the latest release.
 
-- Updated AdColony Custom Events.
-- Updated Unity Custom Events.
-- Added AdMob Custom Events:
-  - Native: `GooglePlayServicesAdRenderer` and `GooglePlayServicesNative`
-  - Rewarded Video: `GooglePlayServicesRewardedVideo`
+- Rewarded Ad reward callback is also triggered now on the client for server-side rewarding.
+- Added click callback for Rewarded Ads.
+  - Any implementors of `MoPubRewardedVideoListener` will now need to also implement `public void onRewardedVideoClicked(@NonNull String adUnitId)`.
+- MoPub Ads now expire after 4 hours of being unused.
+  - Interstitial and Rewarded ads served by MoPub will expire 4 hours after successfully loading, triggering a load failure with the new `EXPIRED` `MoPubErrorCode`.
+  - Cached Native Ad Placer ads now also expire in 4 hours.
+- Improved logging when attempting to show an ad that is not ready.
+- Updated build tools version to 25.0.2.
 - Bug fixes.
 
 ## Requirements
diff --git a/build.gradle b/build.gradle
index a0f73c01..491fd57d 100644
--- a/build.gradle
+++ b/build.gradle
@@ -6,7 +6,7 @@ buildscript {
 
     dependencies {
         classpath 'com.android.tools.build:gradle:2.1.3'
-        classpath 'com.novoda:bintray-release:0.3.4'
+        classpath 'com.novoda:bintray-release:0.4.0'
     }
 }
 
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index e29019b9..d8576cc7 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.mopub.simpleadsdemo"
-      android:versionCode="50"
-      android:versionName="4.13.0">
+      android:versionCode="51"
+      android:versionName="4.14.0">
     <uses-sdk android:minSdkVersion="16"
               android:targetSdkVersion="23"/>
 
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index 3524a58a..8d401831 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -9,15 +9,15 @@ apply plugin: 'com.android.application'
 
 project.group = 'com.mopub'
 project.description = '''MoPub Sample App'''
-project.version = '4.13.0'
+project.version = '4.14.0'
 
 android {
     compileSdkVersion 23
-    buildToolsVersion '23.0.2'
+    buildToolsVersion '25.0.2'
     lintOptions { abortOnError false }
 
     defaultConfig {
-        versionCode 50
+        versionCode 51
         versionName version
         minSdkVersion 16
         targetSdkVersion 23
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java
index ff1337ac..8c2fb463 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java
@@ -74,6 +74,7 @@ public void onInterstitialLoaded(MoPubInterstitial interstitial) {
 
     @Override
     public void onInterstitialFailed(MoPubInterstitial interstitial, MoPubErrorCode errorCode) {
+        mShowButton.setEnabled(false);
         final String errorMessage = (errorCode != null) ? errorCode.toString() : "";
         logToast(getActivity(), "Interstitial failed to load: " + errorMessage);
     }
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
index fc637371..2e9ddebf 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
@@ -159,6 +159,13 @@ public void onRewardedVideoPlaybackError(@NonNull final String adUnitId, @NonNul
         }
     }
 
+    @Override
+    public void onRewardedVideoClicked(@NonNull final String adUnitId) {
+        if (adUnitId.equals(mAdUnitId)) {
+            logToast(getActivity(), "Rewarded video clicked.");
+        }
+    }
+
     @Override
     public void onRewardedVideoClosed(@NonNull final String adUnitId) {
         if (adUnitId.equals(mAdUnitId)) {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java
index 599a2455..39fd7909 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java
@@ -17,6 +17,9 @@ private Constants() {}
 
     public static final int TEN_SECONDS_MILLIS = 10 * 1000;
     public static final int THIRTY_SECONDS_MILLIS = 30 * 1000;
+    public static final int FOUR_HOURS_MILLIS = 4 * 60 * 60 * 1000;
+
+    public static final int AD_EXPIRATION_DELAY = FOUR_HOURS_MILLIS;
 
     public static final int TEN_MB = 10 * 1024 * 1024;
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
index f9025f68..3a745932 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
@@ -11,7 +11,7 @@
 import java.lang.reflect.Method;
 
 public class MoPub {
-    public static final String SDK_VERSION = "4.13.0";
+    public static final String SDK_VERSION = "4.14.0";
 
     public enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
index 55b24452..303f9539 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
@@ -200,6 +200,7 @@ protected void onDestroy() {
                 .build());
     }
 
+    @SuppressWarnings("ResourceType") // Using XML resources causes issues in Unity
     private View getMoPubBrowserView() {
         LinearLayout moPubBrowserView = new LinearLayout(this);
         LinearLayout.LayoutParams browserLayoutParams = new LinearLayout.LayoutParams(MATCH_PARENT, MATCH_PARENT);
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java
index fa140548..0eac6314 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java
@@ -127,7 +127,7 @@ private static void addHandler(@NonNull final Logger logger,
         }
 
         @Override
-        @SuppressLint("LogTagMismatch")
+        @SuppressWarnings({"LogTagMismatch", "WrongConstant"})
         public void publish(final LogRecord logRecord) {
             if (isLoggable(logRecord)) {
                 final int priority;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdTypeTranslator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
index 8a827f7b..025571bb 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
@@ -14,33 +14,50 @@
 public class AdTypeTranslator {
     public enum CustomEventType {
         // "Special" custom events that we let people choose in the UI.
-        GOOGLE_PLAY_SERVICES_BANNER("admob_native_banner", "com.mopub.mobileads.GooglePlayServicesBanner"),
-        GOOGLE_PLAY_SERVICES_INTERSTITIAL("admob_full_interstitial", "com.mopub.mobileads.GooglePlayServicesInterstitial"),
-        MILLENNIAL_BANNER("millennial_native_banner", "com.mopub.mobileads.MillennialBanner"),
-        MILLENNIAL_INTERSTITIAL("millennial_full_interstitial", "com.mopub.mobileads.MillennialInterstitial"),
+        GOOGLE_PLAY_SERVICES_BANNER("admob_native_banner",
+                "com.mopub.mobileads.GooglePlayServicesBanner", false),
+        GOOGLE_PLAY_SERVICES_INTERSTITIAL("admob_full_interstitial",
+                "com.mopub.mobileads.GooglePlayServicesInterstitial", false),
+        MILLENNIAL_BANNER("millennial_native_banner",
+                "com.mopub.mobileads.MillennialBanner", false),
+        MILLENNIAL_INTERSTITIAL("millennial_full_interstitial",
+                "com.mopub.mobileads.MillennialInterstitial", false),
 
         // MoPub-specific custom events.
-        MRAID_BANNER("mraid_banner", "com.mopub.mraid.MraidBanner"),
-        MRAID_INTERSTITIAL("mraid_interstitial", "com.mopub.mraid.MraidInterstitial"),
-        HTML_BANNER("html_banner", "com.mopub.mobileads.HtmlBanner"),
-        HTML_INTERSTITIAL("html_interstitial", "com.mopub.mobileads.HtmlInterstitial"),
-        VAST_VIDEO_INTERSTITIAL("vast_interstitial", "com.mopub.mobileads.VastVideoInterstitial"),
-        MOPUB_NATIVE("mopub_native", "com.mopub.nativeads.MoPubCustomEventNative"),
-        MOPUB_VIDEO_NATIVE("mopub_video_native", "com.mopub.nativeads.MoPubCustomEventVideoNative"),
-        MOPUB_REWARDED_VIDEO("rewarded_video", "com.mopub.mobileads.MoPubRewardedVideo"),
-        MOPUB_REWARDED_PLAYABLE("rewarded_playable", "com.mopub.mobileads.MoPubRewardedPlayable"),
-
-        UNSPECIFIED("", null);
+        MRAID_BANNER("mraid_banner",
+                "com.mopub.mraid.MraidBanner", true),
+        MRAID_INTERSTITIAL("mraid_interstitial",
+                "com.mopub.mraid.MraidInterstitial", true),
+        HTML_BANNER("html_banner",
+                "com.mopub.mobileads.HtmlBanner", true),
+        HTML_INTERSTITIAL("html_interstitial",
+                "com.mopub.mobileads.HtmlInterstitial", true),
+        VAST_VIDEO_INTERSTITIAL("vast_interstitial",
+                "com.mopub.mobileads.VastVideoInterstitial", true),
+        MOPUB_NATIVE("mopub_native",
+                "com.mopub.nativeads.MoPubCustomEventNative", true),
+        MOPUB_VIDEO_NATIVE("mopub_video_native",
+                "com.mopub.nativeads.MoPubCustomEventVideoNative", true),
+        MOPUB_REWARDED_VIDEO("rewarded_video",
+                "com.mopub.mobileads.MoPubRewardedVideo", true),
+        MOPUB_REWARDED_PLAYABLE("rewarded_playable",
+                "com.mopub.mobileads.MoPubRewardedPlayable", true),
 
+        UNSPECIFIED("", null, false);
+
+        @NonNull
         private final String mKey;
+        @Nullable
         private final String mClassName;
+        private final boolean mIsMoPubSpecific;
 
-        private CustomEventType(String key, String className) {
+        private CustomEventType(String key, String className, boolean isMoPubSpecific) {
             mKey = key;
             mClassName = className;
+            mIsMoPubSpecific = isMoPubSpecific;
         }
 
-        private static CustomEventType fromString(String key) {
+        private static CustomEventType fromString(@Nullable final String key) {
             for (CustomEventType customEventType : values()) {
                 if (customEventType.mKey.equals(key)) {
                     return customEventType;
@@ -50,10 +67,25 @@ private static CustomEventType fromString(String key) {
             return UNSPECIFIED;
         }
 
+        private static CustomEventType fromClassName(@Nullable final String className) {
+            for (CustomEventType customEventType : values()) {
+                if (customEventType.mClassName != null
+                        && customEventType.mClassName.equals(className)) {
+                    return customEventType;
+                }
+            }
+
+            return UNSPECIFIED;
+        }
+
         @Override
         public String toString() {
             return mClassName;
         }
+
+        public static boolean isMoPubSpecific(@Nullable final String className) {
+            return fromClassName(className).mIsMoPubSpecific;
+        }
     }
 
     public static final String BANNER_SUFFIX = "_banner";
@@ -70,7 +102,7 @@ public static String getCustomEventName(@NonNull AdFormat adFormat,
             @NonNull Map<String, String> headers) {
         if (AdType.CUSTOM.equalsIgnoreCase(adType)) {
             return extractHeader(headers, ResponseHeader.CUSTOM_EVENT_NAME);
-        } else if (AdType.STATIC_NATIVE.equalsIgnoreCase(adType)){
+        } else if (AdType.STATIC_NATIVE.equalsIgnoreCase(adType)) {
             return CustomEventType.MOPUB_NATIVE.toString();
         } else if (AdType.VIDEO_NATIVE.equalsIgnoreCase(adType)) {
             return CustomEventType.MOPUB_VIDEO_NATIVE.toString();
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
index 09bcce0f..b984bf71 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
@@ -58,6 +58,7 @@
     @Nullable private WebViewAdUrlGenerator mUrlGenerator;
 
     @Nullable private AdResponse mAdResponse;
+    @Nullable private String mCustomEventClassName;
     private final Runnable mRefreshRunnable;
     @NonNull private final AdRequest.Listener mAdListener;
 
@@ -138,6 +139,7 @@ public void run() {
     void onAdLoadSuccess(@NonNull final AdResponse adResponse) {
         mBackoffPower = 1;
         mAdResponse = adResponse;
+        mCustomEventClassName = adResponse.getCustomEventClassName();
         // Do other ad loading setup. See AdFetcher & AdLoadTask.
         mTimeoutMilliseconds = mAdResponse.getAdTimeoutMillis() == null
                 ? mTimeoutMilliseconds
@@ -321,6 +323,11 @@ public String getAdUnitId() {
         return mAdUnitId;
     }
 
+    @Nullable
+    public String getCustomEventClassName() {
+        return mCustomEventClassName;
+    }
+
     public void setAdUnitId(@NonNull String adUnitId) {
         mAdUnitId = adUnitId;
     }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java
index 20bc63a2..b7c20a78 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java
@@ -8,6 +8,9 @@
     CANCELLED("Ad request was cancelled."),
     NO_CONNECTION("No internet connection detected."),
 
+    /** see {@link com.mopub.common.Constants#AD_EXPIRATION_DELAY } */
+    EXPIRED("Ad expired since it was not shown within 4 hours."),
+
     ADAPTER_NOT_FOUND("Unable to find Native Network or Custom Event adapter."),
     ADAPTER_CONFIGURATION_ERROR("Native Network or Custom Event adapter was configured incorrectly."),
     NETWORK_TIMEOUT("Third-party network failed to respond in a timely manner."),
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/BaseWidgetDrawable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/BaseWidgetDrawable.java
index d12bf8e1..dbe95757 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/BaseWidgetDrawable.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/BaseWidgetDrawable.java
@@ -3,6 +3,7 @@
 import android.graphics.Canvas;
 import android.graphics.ColorFilter;
 import android.graphics.Paint;
+import android.graphics.PixelFormat;
 import android.graphics.Rect;
 import android.graphics.drawable.Drawable;
 import android.support.annotation.NonNull;
@@ -29,6 +30,6 @@ public void setColorFilter(ColorFilter colorFilter) {
 
     @Override
     public int getOpacity() {
-        return 0;
+        return PixelFormat.UNKNOWN;
     }
 }
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
index 38de8ba8..fe5a4a0a 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
@@ -3,6 +3,7 @@
 import android.app.Activity;
 import android.content.Context;
 import android.location.Location;
+import android.os.Handler;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
@@ -15,12 +16,14 @@
 
 import java.util.Map;
 
+import static com.mopub.common.Constants.AD_EXPIRATION_DELAY;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
+import static com.mopub.mobileads.MoPubErrorCode.EXPIRED;
+import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.DESTROYED;
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.IDLE;
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.LOADING;
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.READY;
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.SHOWING;
-import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.DESTROYED;
 
 public class MoPubInterstitial implements CustomEventInterstitialAdapter.CustomEventInterstitialAdapterListener {
     @VisibleForTesting
@@ -55,6 +58,8 @@
     @Nullable private CustomEventInterstitialAdapter mCustomEventInterstitialAdapter;
     @Nullable private InterstitialAdListener mInterstitialAdListener;
     @NonNull private Activity mActivity;
+    @NonNull private Handler mHandler;
+    @NonNull private final Runnable mAdExpiration;
     @NonNull private volatile InterstitialState mCurrentInterstitialState;
 
     public interface InterstitialAdListener {
@@ -72,6 +77,21 @@ public MoPubInterstitial(@NonNull final Activity activity, @NonNull final String
         mInterstitialView.setAdUnitId(adUnitId);
 
         mCurrentInterstitialState = IDLE;
+
+        mHandler = new Handler();
+        mAdExpiration = new Runnable() {
+            @Override
+            public void run() {
+                MoPubLog.d("Expiring unused Interstitial ad.");
+                attemptStateTransition(IDLE, true);
+                if (!SHOWING.equals(mCurrentInterstitialState) &&
+                        !DESTROYED.equals(mCurrentInterstitialState)) {
+                    // double-check the state in case the runnable fires right after the state
+                    // transition but before it's cancelled
+                    mInterstitialView.adFailed(EXPIRED);
+                }
+            }
+        };
     }
 
     private boolean attemptStateTransition(@NonNull final InterstitialState endState) {
@@ -83,14 +103,14 @@ private boolean attemptStateTransition(@NonNull final InterstitialState endState
      * Other methods should not be modifying mCurrentInterstitialState.
      *
      * @param endState     The desired end state.
-     * @param forceRefresh Whether or not this is part of a forceRefresh transition. Force
-     *                     refresh can happen from IDLE, LOADING, or READY. It will ignore
+     * @param force Whether or not this is part of a force transition. Force transitions
+     *                     can happen from IDLE, LOADING, or READY. It will ignore
      *                     the currently loading or loaded ad and attempt to load another.
      * @return {@code true} if a state change happened, {@code false} if no state change happened.
      */
     @VisibleForTesting
     synchronized boolean attemptStateTransition(@NonNull final InterstitialState endState,
-            boolean forceRefresh) {
+            boolean force) {
         Preconditions.checkNotNull(endState);
 
         final InterstitialState startState = mCurrentInterstitialState;
@@ -110,7 +130,7 @@ synchronized boolean attemptStateTransition(@NonNull final InterstitialState end
                         // Going from IDLE to LOADING is the usual load case
                         invalidateInterstitialAdapter();
                         mCurrentInterstitialState = LOADING;
-                        if (forceRefresh) {
+                        if (force) {
                             // Force-load means a pub-initiated force refresh.
                             mInterstitialView.forceRefresh();
                         } else {
@@ -137,7 +157,7 @@ synchronized boolean attemptStateTransition(@NonNull final InterstitialState end
                         mCurrentInterstitialState = IDLE;
                         return true;
                     case LOADING:
-                        if (!forceRefresh) {
+                        if (!force) {
                             // Cannot load more than one interstitial at a time
                             MoPubLog.d("Already loading an interstitial.");
                         }
@@ -145,6 +165,11 @@ synchronized boolean attemptStateTransition(@NonNull final InterstitialState end
                     case READY:
                         // This is the usual load finished transition
                         mCurrentInterstitialState = READY;
+                        // Expire MoPub ads to synchronize with MoPub Ad Server tracking window
+                        if (AdTypeTranslator.CustomEventType
+                                .isMoPubSpecific(mInterstitialView.getCustomEventClassName())) {
+                            mHandler.postDelayed(mAdExpiration, AD_EXPIRATION_DELAY);
+                        }
                         return true;
                     case SHOWING:
                         MoPubLog.d("Interstitial is not ready to be shown yet.");
@@ -158,8 +183,8 @@ synchronized boolean attemptStateTransition(@NonNull final InterstitialState end
             case READY:
                 switch (endState) {
                     case IDLE:
-                        if (forceRefresh) {
-                            // This happens on a force refresh
+                        if (force) {
+                            // This happens on a force refresh or an ad expiration
                             invalidateInterstitialAdapter();
                             mCurrentInterstitialState = IDLE;
                             return true;
@@ -177,6 +202,7 @@ synchronized boolean attemptStateTransition(@NonNull final InterstitialState end
                         // This is the usual transition from ready to showing
                         showCustomEventInterstitial();
                         mCurrentInterstitialState = SHOWING;
+                        mHandler.removeCallbacks(mAdExpiration);
                         return true;
                     case DESTROYED:
                         setInterstitialStateDestroyed();
@@ -187,7 +213,7 @@ synchronized boolean attemptStateTransition(@NonNull final InterstitialState end
             case SHOWING:
                 switch(endState) {
                     case IDLE:
-                        if (forceRefresh) {
+                        if (force) {
                             MoPubLog.d("Cannot force refresh while showing an interstitial.");
                             return false;
                         }
@@ -196,7 +222,7 @@ synchronized boolean attemptStateTransition(@NonNull final InterstitialState end
                         mCurrentInterstitialState = IDLE;
                         return true;
                     case LOADING:
-                        if (!forceRefresh) {
+                        if (!force) {
                             MoPubLog.d("Interstitial already showing. Not loading another.");
                         }
                         return false;
@@ -225,6 +251,7 @@ private void setInterstitialStateDestroyed() {
         invalidateInterstitialAdapter();
         mInterstitialView.setBannerAdListener(null);
         mInterstitialView.destroy();
+        mHandler.removeCallbacks(mAdExpiration);
         mCurrentInterstitialState = DESTROYED;
     }
 
@@ -398,6 +425,10 @@ public MoPubInterstitialView(Context context) {
             setAutorefreshEnabled(false);
         }
 
+        @Nullable String getCustomEventClassName() {
+            return mAdViewController.getCustomEventClassName();
+        }
+
         @Override
         public AdFormat getAdFormat() {
             return AdFormat.INTERSTITIAL;
@@ -445,6 +476,12 @@ protected void adFailed(MoPubErrorCode errorCode) {
         }
     }
 
+    @VisibleForTesting
+    @Deprecated
+    void setHandler(@NonNull final Handler handler) {
+        mHandler = handler;
+    }
+
     @VisibleForTesting
     @Deprecated
     void setInterstitialView(@NonNull MoPubInterstitialView interstitialView) {
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdSource.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdSource.java
index 7d2b43be..92a6e2d5 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdSource.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdSource.java
@@ -11,6 +11,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import static com.mopub.common.Constants.AD_EXPIRATION_DELAY;
 import static com.mopub.nativeads.MoPubNative.MoPubNativeNetworkListener;
 
 /**
@@ -35,7 +36,7 @@
      */
     private static final int CACHE_LIMIT = 1;
 
-    private static final int EXPIRATION_TIME_MILLISECONDS = 15 * 60 * 1000; // 15 minutes
+    private static final int EXPIRATION_TIME_MILLISECONDS = AD_EXPIRATION_DELAY;
     private static final int MAXIMUM_RETRY_TIME_MILLISECONDS = 5 * 60 * 1000; // 5 minutes.
     @VisibleForTesting static final int[] RETRY_TIME_ARRAY_MILLISECONDS = new int[]{1000, 3000, 5000, 25000, 60000, MAXIMUM_RETRY_TIME_MILLISECONDS};
 
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
index c85dd567..72f92a18 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
@@ -306,6 +306,19 @@ public void onVastVideoConfigurationPrepared(@Nullable VastVideoConfig vastVideo
                     mVideoResponseHeaders.getImpressionVisibleMs();
             visibilityTrackingEvents.add(visibilityTrackingEvent);
 
+            // VAST impression trackers
+            for (final VastTracker vastTracker : vastVideoConfig.getImpressionTrackers()) {
+                final VisibilityTrackingEvent vastImpressionTrackingEvent =
+                        new VisibilityTrackingEvent();
+                vastImpressionTrackingEvent.strategy = new PayloadVisibilityStrategy(mContext,
+                        vastTracker.getTrackingUrl());
+                vastImpressionTrackingEvent.minimumPercentageVisible =
+                        mVideoResponseHeaders.getImpressionMinVisiblePercent();
+                vastImpressionTrackingEvent.totalRequiredPlayTimeMs =
+                        mVideoResponseHeaders.getImpressionVisibleMs();
+                visibilityTrackingEvents.add(vastImpressionTrackingEvent);
+            }
+
             // Visibility tracking event from http response Vast payload
             mVastVideoConfig = vastVideoConfig;
             final VideoViewabilityTracker vastVideoViewabilityTracker =
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
index 2f551fb9..0b7c6d0b 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
@@ -7,6 +7,7 @@
 import android.graphics.Color;
 import android.graphics.ColorFilter;
 import android.graphics.Paint;
+import android.graphics.PixelFormat;
 import android.graphics.RectF;
 import android.graphics.SurfaceTexture;
 import android.graphics.drawable.Drawable;
@@ -419,7 +420,7 @@ public void setColorFilter(ColorFilter cf) { }
 
         @Override
         public int getOpacity() {
-            return 0;
+            return PixelFormat.UNKNOWN;
         }
     };
 
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedAd.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedAd.java
index d0129295..ba372b23 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedAd.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedAd.java
@@ -1,6 +1,7 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
+import android.os.Handler;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
@@ -13,6 +14,9 @@
 
 import java.util.Map;
 
+import static com.mopub.common.Constants.AD_EXPIRATION_DELAY;
+import static com.mopub.mobileads.MoPubErrorCode.EXPIRED;
+
 /**
  * Contains the common logic for rewarded ads.
  */
@@ -96,22 +100,40 @@ protected boolean isReady() {
 
         @NonNull final Class<? extends MoPubRewardedAd>  mCustomEventClass;
 
+        @NonNull private final Runnable mAdExpiration;
+        @NonNull private Handler mHandler;
+
         public MoPubRewardedAdListener(@NonNull final Class<? extends MoPubRewardedAd>
                 customEventClass) {
             Preconditions.checkNotNull(customEventClass);
 
             mCustomEventClass = customEventClass;
+
+            mHandler = new Handler();
+            mAdExpiration = new Runnable() {
+                @Override
+                public void run() {
+                    MoPubLog.d("Expiring unused Rewarded ad.");
+                    onInterstitialFailed(EXPIRED);
+                }
+            };
+
         }
 
         @Override
         public void onInterstitialLoaded() {
             mIsLoaded = true;
+            // Expire MoPub ads to synchronize with MoPub Ad Server tracking window
+            if (AdTypeTranslator.CustomEventType.isMoPubSpecific(mCustomEventClass.getName())) {
+                mHandler.postDelayed(mAdExpiration, AD_EXPIRATION_DELAY);
+            }
             MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(mCustomEventClass,
                     getAdNetworkId());
         }
 
         @Override
         public void onInterstitialFailed(final MoPubErrorCode errorCode) {
+            mHandler.removeCallbacks(mAdExpiration);
             switch (errorCode) {
                 case VIDEO_PLAYBACK_ERROR:
                     MoPubRewardedVideoManager.onRewardedVideoPlaybackError(mCustomEventClass,
@@ -125,6 +147,7 @@ public void onInterstitialFailed(final MoPubErrorCode errorCode) {
 
         @Override
         public void onInterstitialShown() {
+            mHandler.removeCallbacks(mAdExpiration);
             MoPubRewardedVideoManager.onRewardedVideoStarted(mCustomEventClass, getAdNetworkId());
         }
 
@@ -141,6 +164,12 @@ public void onLeaveApplication() {
         public void onInterstitialDismissed() {
             MoPubRewardedVideoManager.onRewardedVideoClosed(mCustomEventClass, getAdNetworkId());
         }
+
+        @Deprecated
+        @VisibleForTesting
+        void setHandler(@NonNull final Handler handler) {
+            mHandler = handler;
+        }
     }
 
     @Nullable
@@ -158,4 +187,11 @@ void setIsLoaded(final boolean isLoaded) {
         mIsLoaded = isLoaded;
     }
 
+    @Deprecated
+    @VisibleForTesting
+    MoPubRewardedAdListener createListener(@NonNull final Class<? extends MoPubRewardedAd>
+            customEventClass) {
+        return new MoPubRewardedAdListener(customEventClass);
+    }
+
 }
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoListener.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoListener.java
index ff9361f1..bf5a12f8 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoListener.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoListener.java
@@ -34,6 +34,11 @@
      */
     public void onRewardedVideoPlaybackError(@NonNull String adUnitId, @NonNull MoPubErrorCode errorCode);
 
+    /**
+     * Called when a rewarded video is clicked.
+     */
+    public void onRewardedVideoClicked(@NonNull String adUnitId);
+
     /**
      * Called when a rewarded video is closed. At this point your application should resume.
      */
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
index 2867c02d..e533accb 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
@@ -44,6 +44,8 @@
 import java.util.Set;
 import java.util.TreeMap;
 
+import static com.mopub.mobileads.MoPubErrorCode.EXPIRED;
+
 /**
  * Handles requesting Rewarded ads and mapping Rewarded Ad SDK settings to the CustomEvent
  * that is being loaded.
@@ -231,6 +233,8 @@ public static void setVideoListener(@Nullable MoPubRewardedVideoListener listene
     public static void loadVideo(@NonNull final String adUnitId,
             @Nullable final RequestParameters requestParameters,
             @Nullable final MediationSettings... mediationSettings) {
+        Preconditions.checkNotNull(adUnitId);
+
         if (sInstance == null) {
             logErrorNotInitialized();
             return;
@@ -238,7 +242,7 @@ public static void loadVideo(@NonNull final String adUnitId,
 
         final String currentlyShowingAdUnitId =
                 sInstance.mRewardedAdData.getCurrentlyShowingAdUnitId();
-        if (!TextUtils.isEmpty(currentlyShowingAdUnitId)) {
+        if (adUnitId.equals(currentlyShowingAdUnitId)) {
             MoPubLog.d(String.format(Locale.US, "Did not queue rewarded ad request for ad " +
                     "unit %s. The ad is already showing.", adUnitId));
             return;
@@ -335,6 +339,12 @@ public static void showVideo(@NonNull String adUnitId) {
                 sInstance.mAdRequestStatus.markPlayed(adUnitId);
                 customEvent.show();
             } else {
+                if (sInstance.mAdRequestStatus.isLoading(adUnitId)) {
+                    MoPubLog.d("Rewarded ad is not ready to be shown yet.");
+                } else {
+                    MoPubLog.d("No rewarded ad loading or loaded.");
+                }
+
                 sInstance.failover(adUnitId, MoPubErrorCode.VIDEO_NOT_AVAILABLE);
             }
         } else {
@@ -552,10 +562,13 @@ private void parseMultiCurrencyJson(@NonNull String adUnitId,
     }
 
     private void failover(@NonNull final String adUnitId, @NonNull final MoPubErrorCode errorCode) {
+        Preconditions.checkNotNull(adUnitId);
+        Preconditions.checkNotNull(errorCode);
+
         final String failoverUrl = mAdRequestStatus.getFailoverUrl(adUnitId);
         mAdRequestStatus.markFail(adUnitId);
 
-        if (failoverUrl != null) {
+        if (failoverUrl != null && !errorCode.equals(EXPIRED)) {
             loadVideo(adUnitId, failoverUrl);
         } else if (sInstance.mVideoListener != null) {
             sInstance.mVideoListener.onRewardedVideoLoadFailure(adUnitId, errorCode);
@@ -688,6 +701,11 @@ public void run() {
 
     private static void onRewardedVideoClickedAction(@NonNull final String adUnitId) {
         Preconditions.checkNotNull(adUnitId);
+
+        if (sInstance.mVideoListener != null) {
+            sInstance.mVideoListener.onRewardedVideoClicked(adUnitId);
+        }
+
         TrackingRequest.makeTrackingHttpRequest(
                 sInstance.mAdRequestStatus.getClickTrackerUrlString(adUnitId),
                 sInstance.mContext);
@@ -724,38 +742,21 @@ private static void onRewardedVideoClosedAction(@NonNull final String adUnitId)
     }
 
     public static <T extends CustomEventRewardedAd>
-    void onRewardedVideoCompleted(@NonNull final Class<T> customEventClass, final String thirdPartyId, @NonNull final MoPubReward moPubReward) {
-        // Unlike other callbacks in this class, only call the listener once with all the MoPubIds in the matching set.
+    void onRewardedVideoCompleted(@NonNull final Class<T> customEventClass,
+            final String thirdPartyId, @NonNull final MoPubReward moPubReward) {
+        // Unlike other callbacks in this class, only call the listener once with all the MoPubIds
+        // in the matching set.
         final String currentlyShowingAdUnitId =
                 sInstance.mRewardedAdData.getCurrentlyShowingAdUnitId();
+
+        rewardOnClient(customEventClass, thirdPartyId, moPubReward, currentlyShowingAdUnitId);
+        rewardOnServer(currentlyShowingAdUnitId);
+    }
+
+    private static void rewardOnServer(final String currentlyShowingAdUnitId) {
         final String serverCompletionUrl = sInstance.mRewardedAdData.getServerCompletionUrl(
                 currentlyShowingAdUnitId);
-        if (TextUtils.isEmpty(serverCompletionUrl)) {
-            postToInstance(new Runnable() {
-                @Override
-                public void run() {
-                    final MoPubReward chosenReward = chooseReward(
-                            sInstance.mRewardedAdData.getLastShownMoPubReward(customEventClass),
-                            moPubReward);
-
-                    Set<String> rewardedIds = new HashSet<String>();
-                    if (TextUtils.isEmpty(currentlyShowingAdUnitId)) {
-                        final Set<String> moPubIds = sInstance.mRewardedAdData.getMoPubIdsForAdNetwork(
-                                customEventClass, thirdPartyId);
-                        rewardedIds.addAll(moPubIds);
-                    } else {
-                        // If we know which ad unit is showing, only reward the currently showing
-                        // ad unit.
-                        rewardedIds.add(currentlyShowingAdUnitId);
-                    }
-
-                    if (sInstance.mVideoListener != null) {
-                        sInstance.mVideoListener.onRewardedVideoCompleted(rewardedIds,
-                                chosenReward);
-                    }
-                }
-            });
-        } else {
+        if (!TextUtils.isEmpty(serverCompletionUrl)) {
             postToInstance(new Runnable() {
                 @Override
                 public void run() {
@@ -780,6 +781,35 @@ public void run() {
         }
     }
 
+    private static <T extends CustomEventRewardedAd> void rewardOnClient(
+            @NonNull final Class<T> customEventClass, final String thirdPartyId,
+            @NonNull final MoPubReward moPubReward, final String currentlyShowingAdUnitId) {
+        postToInstance(new Runnable() {
+            @Override
+            public void run() {
+                final MoPubReward chosenReward = chooseReward(
+                        sInstance.mRewardedAdData.getLastShownMoPubReward(customEventClass),
+                        moPubReward);
+
+                Set<String> rewardedIds = new HashSet<String>();
+                if (TextUtils.isEmpty(currentlyShowingAdUnitId)) {
+                    final Set<String> moPubIds = sInstance.mRewardedAdData.getMoPubIdsForAdNetwork(
+                            customEventClass, thirdPartyId);
+                    rewardedIds.addAll(moPubIds);
+                } else {
+                    // If we know which ad unit is showing, only reward the currently showing
+                    // ad unit.
+                    rewardedIds.add(currentlyShowingAdUnitId);
+                }
+
+                if (sInstance.mVideoListener != null) {
+                    sInstance.mVideoListener.onRewardedVideoCompleted(rewardedIds,
+                            chosenReward);
+                }
+            }
+        });
+    }
+
     @VisibleForTesting
     static MoPubReward chooseReward(@Nullable final MoPubReward moPubReward, @NonNull final MoPubReward networkReward) {
         if (!networkReward.isSuccessful()) {
diff --git a/mopub-sdk/shared-build.gradle b/mopub-sdk/shared-build.gradle
index 443b27e2..72a17f79 100644
--- a/mopub-sdk/shared-build.gradle
+++ b/mopub-sdk/shared-build.gradle
@@ -9,16 +9,16 @@ repositories {
 }
 
 project.group = 'com.mopub'
-project.version = '4.13.0'
+project.version = '4.14.0'
 
 android {
     compileSdkVersion 23
-    buildToolsVersion '23.0.2'
+    buildToolsVersion '25.0.2'
     lintOptions { abortOnError false }
     useLibrary 'org.apache.http.legacy'
 
     defaultConfig {
-        versionCode 50
+        versionCode 51
         versionName version
         minSdkVersion 16
         targetSdkVersion 23
diff --git a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
index 12bcf2e5..ea7a4cad 100644
--- a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
+++ b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
@@ -1,3 +1,3 @@
 fabric-identifier=com.mopub.sdk.android:mopub
-fabric-version=4.13.0+kit
+fabric-version=4.14.0+kit
 fabric-build-type=source
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
index 579ebaec..b28dc1c4 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
@@ -147,4 +147,32 @@ public void getCustomEventName_withRewardedPlayableFormat_shouldBeMoPubRewardedP
 
         assertThat(customEventName).isEqualTo("com.mopub.mobileads.MoPubRewardedPlayable");
     }
+
+    @Test
+    public void isMoPubSpecific_withMoPubInterstitialClassNames_shouldBeTrue() {
+        assertThat(AdTypeTranslator.CustomEventType
+                .isMoPubSpecific("com.mopub.mraid.MraidInterstitial")).isTrue();
+        assertThat(AdTypeTranslator.CustomEventType
+                .isMoPubSpecific("com.mopub.mobileads.HtmlInterstitial")).isTrue();
+        assertThat(AdTypeTranslator.CustomEventType
+                .isMoPubSpecific("com.mopub.mobileads.VastVideoInterstitial")).isTrue();
+    }
+
+    @Test
+    public void isMoPubSpecific_withMoPubRewardedClassNames_shouldBeTrue() {
+        assertThat(AdTypeTranslator.CustomEventType
+                .isMoPubSpecific("com.mopub.mobileads.MoPubRewardedVideo")).isTrue();
+        assertThat(AdTypeTranslator.CustomEventType
+                .isMoPubSpecific("com.mopub.mobileads.MoPubRewardedPlayable")).isTrue();
+    }
+
+    @Test
+    public void isMoPubSpecific_withNonMoPubClassNames_shouldBeFalse() {
+        assertThat(AdTypeTranslator.CustomEventType
+                .isMoPubSpecific("com.mopub.mobileads.GooglePlayServicesBanner")).isFalse();
+        assertThat(AdTypeTranslator.CustomEventType
+                .isMoPubSpecific("com.whatever.ads.SomeRandomAdFormat")).isFalse();
+        assertThat(AdTypeTranslator.CustomEventType
+                .isMoPubSpecific(null)).isFalse();
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
index c81d7166..201321c3 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
@@ -1,6 +1,7 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
+import android.os.Handler;
 import android.support.annotation.NonNull;
 
 import com.mopub.common.test.support.SdkTestRunner;
@@ -11,6 +12,7 @@
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Mock;
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 
@@ -18,6 +20,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import static com.mopub.common.Constants.FOUR_HOURS_MILLIS;
 import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_DATA;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
 import static com.mopub.mobileads.MoPubErrorCode.CANCELLED;
@@ -29,12 +32,15 @@
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.READY;
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.SHOWING;
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyZeroInteractions;
+import static org.mockito.Mockito.when;
+
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
 public class MoPubInterstitialTest {
@@ -51,6 +57,7 @@
     private MoPubInterstitial.MoPubInterstitialView interstitialView;
     private AdViewController adViewController;
     private String customEventClassName;
+    @Mock private Handler mockHandler;
 
     @Before
     public void setUp() throws Exception {
@@ -58,6 +65,7 @@ public void setUp() throws Exception {
         subject = new MoPubInterstitial(activity, AD_UNIT_ID_VALUE);
         interstitialAdListener = mock(MoPubInterstitial.InterstitialAdListener.class);
         subject.setInterstitialAdListener(interstitialAdListener);
+        subject.setHandler(mockHandler);
 
         interstitialView = mock(MoPubInterstitial.MoPubInterstitialView.class);
 
@@ -422,6 +430,7 @@ public void attemptStateTransition_withLoadingStartState() {
 
         subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
         subject.setCurrentInterstitialState(LOADING);
+        subject.setInterstitialView(interstitialView);
         boolean stateDidChange = subject.attemptStateTransition(IDLE, false);
         assertThat(stateDidChange).isTrue();
         assertThat(subject.getCurrentInterstitialState()).isEqualTo(IDLE);
@@ -446,10 +455,13 @@ public void attemptStateTransition_withLoadingStartState() {
         verifyZeroInteractions(customEventInterstitialAdapter);
 
         resetMoPubInterstitial(LOADING);
+        when(interstitialView.getCustomEventClassName())
+                .thenReturn(AdTypeTranslator.CustomEventType.HTML_INTERSTITIAL.toString());
         stateDidChange = subject.attemptStateTransition(READY, false);
         assertThat(stateDidChange).isTrue();
         assertThat(subject.getCurrentInterstitialState()).isEqualTo(READY);
         verifyZeroInteractions(customEventInterstitialAdapter);
+        verify(mockHandler).postDelayed(any(Runnable.class), eq((long) FOUR_HOURS_MILLIS));
 
         resetMoPubInterstitial(LOADING);
         stateDidChange = subject.attemptStateTransition(READY, true);
@@ -533,18 +545,23 @@ public void attemptStateTransition_withReadyStartState() {
         assertThat(stateDidChange).isTrue();
         assertThat(subject.getCurrentInterstitialState()).isEqualTo(SHOWING);
         verify(customEventInterstitialAdapter).showInterstitial();
+        verify(mockHandler).removeCallbacks(any(Runnable.class));
+        reset(mockHandler);
 
         resetMoPubInterstitial(READY);
         stateDidChange = subject.attemptStateTransition(SHOWING, true);
         assertThat(stateDidChange).isTrue();
         assertThat(subject.getCurrentInterstitialState()).isEqualTo(SHOWING);
         verify(customEventInterstitialAdapter).showInterstitial();
+        verify(mockHandler).removeCallbacks(any(Runnable.class));
+        reset(mockHandler);
 
         resetMoPubInterstitial(READY);
         stateDidChange = subject.attemptStateTransition(DESTROYED, false);
         assertThat(stateDidChange).isTrue();
         assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
         verify(customEventInterstitialAdapter).invalidate();
+        verify(mockHandler).removeCallbacks(any(Runnable.class));
 
         resetMoPubInterstitial(READY);
         stateDidChange = subject.attemptStateTransition(DESTROYED, true);
@@ -685,6 +702,43 @@ public void attemptStateTransition_withDestroyedStartState() {
         assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
     }
 
+    @Test
+    public void attemptStateTransition_withLoadingStartState_withReadyEndState_withMoPubCustomEvent_shouldExpireAd() {
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(LOADING);
+        subject.setInterstitialView(interstitialView);
+
+        when(interstitialView.getCustomEventClassName())
+                .thenReturn(AdTypeTranslator.CustomEventType.MRAID_INTERSTITIAL.toString());
+        subject.attemptStateTransition(READY, false);
+        verify(mockHandler).postDelayed(any(Runnable.class), eq((long) FOUR_HOURS_MILLIS));
+        reset(mockHandler);
+
+        resetMoPubInterstitial(LOADING);
+        when(interstitialView.getCustomEventClassName())
+                .thenReturn(AdTypeTranslator.CustomEventType.HTML_INTERSTITIAL.toString());
+        subject.attemptStateTransition(READY, false);
+        verify(mockHandler).postDelayed(any(Runnable.class), eq((long) FOUR_HOURS_MILLIS));
+        reset(mockHandler);
+
+        resetMoPubInterstitial(LOADING);
+        when(interstitialView.getCustomEventClassName())
+                .thenReturn(AdTypeTranslator.CustomEventType.VAST_VIDEO_INTERSTITIAL.toString());
+        subject.attemptStateTransition(READY, false);
+        verify(mockHandler).postDelayed(any(Runnable.class), eq((long) FOUR_HOURS_MILLIS));
+    }
+
+    @Test
+    public void attemptStateTransition_withLoadingStartState_withReadyEndState_withNonMoPubCustomEvent_shouldNotExpireAd() {
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(LOADING);
+        subject.setInterstitialView(interstitialView);
+
+        when(interstitialView.getCustomEventClassName()).thenReturn("thirdPartyAd");
+        subject.attemptStateTransition(READY, false);
+        verifyZeroInteractions(mockHandler);
+    }
+
     private void loadCustomEvent() {
         MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = subject.new MoPubInterstitialView(activity);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
index f0e94132..a379840c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
@@ -157,6 +157,22 @@ public void loadVideo_withVideoAlreadyShowing_shouldNotLoadVideo() {
         verifyZeroInteractions(mockRequestQueue);
     }
 
+    @Test
+    public void loadVideo_withDifferentVideoAlreadyShowing_shouldLoadVideo() {
+        // To simulate that a video is showing
+        MoPubRewardedVideoManager.getRewardedAdData().setCurrentlyShowingAdUnitId("testAdUnit");
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.loadVideo("anotherTestAdUnit", null);
+
+        ShadowLooper.unPauseMainLooper();
+
+        verify(mockRequestQueue).add(any(AdRequest.class));
+    }
+
     @Test
     public void callbackMethods_withNullListener_shouldNotError() {
         // Clients can set RVM null.
@@ -855,7 +871,7 @@ public void onRewardedVideoCompleted_withEmptyServerCompletionUrl_withNoCurrentl
     }
 
     @Test
-    public void onRewardedVideoCompleted_withServerCompletionUrl_shouldMakeRewardedVideoCompletionRequest() {
+    public void onRewardedVideoCompleted_withServerCompletionUrl_shouldMakeRewardedVideoCompletionRequest_shouldNotifyRewardedVideoCompleted() {
         MoPubReward moPubReward = MoPubReward.success(MOPUB_REWARD, 123);
         RewardedAdData rewardedVideoData = MoPubRewardedVideoManager.getRewardedAdData();
         rewardedVideoData.setCurrentlyShowingAdUnitId("testAdUnit1");
@@ -875,6 +891,10 @@ public void onRewardedVideoCompleted_withServerCompletionUrl_shouldMakeRewardedV
         assertThat(rewardedVideoCompletionRequest.getUrl()).contains("testUrl");
         assertThat(rewardedVideoCompletionRequest.getUrl()).contains("&rcn=server-side%20currency");
         assertThat(rewardedVideoCompletionRequest.getUrl()).contains("&rca=777");
+        ArgumentCaptor<Set<String>> rewardedIdsCaptor = ArgumentCaptor.forClass((Class) Set.class);
+        verify(mockVideoListener).onRewardedVideoCompleted(rewardedIdsCaptor.capture(),
+                eq(moPubReward));
+        assertThat(rewardedIdsCaptor.getValue()).containsOnly("testAdUnit1");
     }
 
     @Test
@@ -900,6 +920,27 @@ public void onRewardedVideoCompleted_withServerCompletionUrl_withNullRewardForCu
         assertThat(rewardedVideoCompletionRequest.getUrl()).contains("&rcn=&rca=0");
     }
 
+    @Test
+    public void onRewardedVideoLoadFailure_withExpirationErrorCode_shouldCallFailCallback_shouldNotLoadFailUrl() {
+        AdResponse testResponse = new AdResponse.Builder()
+                .setAdType(AdType.CUSTOM)
+                .setCustomEventClassName(
+                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setFailoverUrl("fail.url")
+                .build();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
+        MoPubRewardedVideoManager.onRewardedVideoLoadFailure(TestCustomEvent.class,
+                TestCustomEvent.AD_NETWORK_ID, MoPubErrorCode.EXPIRED);
+
+        verify(mockVideoListener).onRewardedVideoLoadFailure(eq("testAdUnit"),
+                eq(MoPubErrorCode.EXPIRED));
+        verifyNoMoreInteractions(mockVideoListener);
+        verify(mockRequestQueue).add(any(AdRequest.class));
+        verifyNoMoreInteractions(mockRequestQueue);
+    }
+
     public static class TestCustomEvent extends CustomEventRewardedVideo {
         public static final String AD_NETWORK_ID = "id!";
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java
index e449609d..7bfbf0a2 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java
@@ -1,6 +1,7 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
+import android.os.Handler;
 
 import com.mopub.common.DataKeys;
 import com.mopub.common.test.support.SdkTestRunner;
@@ -16,6 +17,8 @@
 import java.util.Map;
 import java.util.TreeMap;
 
+import static com.mopub.common.Constants.FOUR_HOURS_MILLIS;
+import static com.mopub.mobileads.MoPubErrorCode.EXPIRED;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
@@ -29,8 +32,10 @@
 
     private Activity activity;
     private MoPubRewardedVideo subject;
+    private MoPubRewardedAd.MoPubRewardedAdListener listener;
 
     @Mock private RewardedVastVideoInterstitial mockRewardedVastVideoInterstitial;
+    @Mock private Handler mockHandler;
 
     @Before
     public void setup() {
@@ -202,4 +207,54 @@ public void showVideo_withVideoNotLoaded_shouldDoNothing() {
 
         verifyZeroInteractions(mockRewardedVastVideoInterstitial);
     }
+
+    @Test
+    public void moPubRewardedAdListener_onInterstitialLoaded_withMoPubRewardedVideo_shouldPostExpirationRunnable() {
+        listener = subject.createListener(MoPubRewardedVideo.class);
+        listener.setHandler(mockHandler);
+
+        listener.onInterstitialLoaded();
+
+        verify(mockHandler).postDelayed(any(Runnable.class), eq((long) FOUR_HOURS_MILLIS));
+    }
+
+    @Test
+    public void moPubRewardedAdListener_onInterstitialLoaded_withMoPubRewardedPlayable_shouldPostExpirationRunnable() {
+        listener = subject.createListener(MoPubRewardedPlayable.class);
+        listener.setHandler(mockHandler);
+
+        listener.onInterstitialLoaded();
+
+        verify(mockHandler).postDelayed(any(Runnable.class), eq((long) FOUR_HOURS_MILLIS));
+    }
+
+    @Test
+    public void moPubRewardedAdListener_onInterstitialLoaded_withOtherCustomEvents_shouldNotPostExpirationRunnable() {
+        listener = subject.createListener(MoPubRewardedAd.class);
+        listener.setHandler(mockHandler);
+
+        listener.onInterstitialLoaded();
+
+        verifyNoMoreInteractions(mockHandler);
+    }
+
+    @Test
+    public void moPubRewardedAdListener_onInterstitialFailed_shouldRemoveExpirationRunnable() {
+        listener = subject.createListener(MoPubRewardedVideo.class);
+        listener.setHandler(mockHandler);
+
+        listener.onInterstitialFailed(EXPIRED);
+
+        verify(mockHandler).removeCallbacks(any(Runnable.class));
+    }
+
+    @Test
+    public void moPubRewardedAdListener_onInterstitialShown_shouldRemoveExpirationRunnable() {
+        listener = subject.createListener(MoPubRewardedVideo.class);
+        listener.setHandler(mockHandler);
+
+        listener.onInterstitialShown();
+
+        verify(mockHandler).removeCallbacks(any(Runnable.class));
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
index 4f970182..80ad306f 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
@@ -125,6 +125,12 @@ public void setUp() throws Exception {
         when(mockVastVideoConfig.getVideoViewabilityTracker())
                 .thenReturn(new VideoViewabilityTracker(98, 76, "viewabilityTracker"));
 
+        List<VastTracker> vastTrackers = new ArrayList<VastTracker>();
+        vastTrackers.add(new VastTracker("vastimpression1"));
+        vastTrackers.add(new VastTracker("vastimpression2"));
+
+        when(mockVastVideoConfig.getImpressionTrackers()).thenReturn(vastTrackers);
+
         subject = new MoPubVideoNativeAd(
                 activity, jsonObject, mockCustomEventNativeListener, videoResponseHeaders,
                 mockVisibilityTracker, mockNativeVideoControllerFactory, null,
@@ -236,9 +242,18 @@ public void onVastVideoConfigurationPrepared_shouldConstructNativeVideoControlle
         assertThat(visibilityTrackingEvents.get(0).totalRequiredPlayTimeMs).isEqualTo(100);
 
         assertThat(visibilityTrackingEvents.get(1).strategy).isInstanceOf(PayloadVisibilityStrategy.class);
-        assertThat(visibilityTrackingEvents.get(1).minimumPercentageVisible).isEqualTo(76);
-        assertThat(visibilityTrackingEvents.get(1).totalRequiredPlayTimeMs).isEqualTo(98);
+        assertThat(visibilityTrackingEvents.get(1).minimumPercentageVisible).isEqualTo(15);
+        assertThat(visibilityTrackingEvents.get(1).totalRequiredPlayTimeMs).isEqualTo(100);
+
+        assertThat(visibilityTrackingEvents.get(2).strategy).isInstanceOf(PayloadVisibilityStrategy.class);
+        assertThat(visibilityTrackingEvents.get(2).minimumPercentageVisible).isEqualTo(15);
+        assertThat(visibilityTrackingEvents.get(2).totalRequiredPlayTimeMs).isEqualTo(100);
+
+        assertThat(visibilityTrackingEvents.get(3).strategy).isInstanceOf(PayloadVisibilityStrategy.class);
+        assertThat(visibilityTrackingEvents.get(3).minimumPercentageVisible).isEqualTo(76);
+        assertThat(visibilityTrackingEvents.get(3).totalRequiredPlayTimeMs).isEqualTo(98);
 
+        verify(mockVastVideoConfig).getImpressionTrackers();
         verify(mockVastVideoConfig).addClickTrackers(any(List.class));
         verify(mockVastVideoConfig).setClickThroughUrl("clk");
         verify(mockCustomEventNativeListener).onNativeAdLoaded(subject);
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdSourceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdSourceTest.java
index 6946d3af..413ef327 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdSourceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdSourceTest.java
@@ -188,7 +188,7 @@ public void dequeueAd_withStaleAd_shouldReturnNativeAd() {
 
         TimestampWrapper<NativeAd> timestampWrapper = new TimestampWrapper<NativeAd>(
                 mMockNativeAd);
-        timestampWrapper.mCreatedTimestamp = SystemClock.uptimeMillis() - (15*60*1000+1);
+        timestampWrapper.mCreatedTimestamp = SystemClock.uptimeMillis() - (4*60*60*1000+1);
         nativeAdCache.add(timestampWrapper);
 
         assertThat(subject.dequeueAd()).isNull();
