diff --git a/build.gradle b/build.gradle
index 62e69f6b..05b31a6b 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5,7 +5,7 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:3.0.1'
+        classpath 'com.android.tools.build:gradle:3.1.3'
         classpath 'com.novoda:bintray-release:0.8.0'
     }
 }
diff --git a/mopub-sample/res/layout/native_detail_fragment.xml b/mopub-sample/res/layout/native_detail_fragment.xml
new file mode 100644
index 00000000..0106e723
--- /dev/null
+++ b/mopub-sample/res/layout/native_detail_fragment.xml
@@ -0,0 +1,78 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent"
+              android:orientation="vertical">
+
+    <TextView
+        android:id="@+id/description"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:paddingLeft="8dp"
+        android:paddingRight="8dp"
+        android:paddingTop="8dp"
+        android:singleLine="true"
+        android:textColor="?android:attr/textColorPrimary"
+        android:textSize="16sp"
+        android:textStyle="bold"/>
+
+    <TextView
+        android:id="@+id/ad_unit_id"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:paddingLeft="8dp"
+        android:paddingRight="8dp"
+        android:singleLine="true"
+        android:textColor="?android:attr/textColorSecondary"
+        android:textSize="14sp"
+        android:textStyle="normal"/>
+
+    <EditText
+        android:id="@+id/keywords_field"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:hint="@string/keywords"
+        android:imeOptions="actionDone"
+        android:inputType="text|textFilter|textShortMessage"
+        android:singleLine="true"/>
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+
+        <EditText
+            android:id="@+id/user_data_keywords_field"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="3"
+            android:hint="@string/user_data_keywords"
+            android:imeOptions="actionDone"
+            android:inputType="text|textFilter|textShortMessage"
+            android:singleLine="true"/>
+
+        <Button
+            android:id="@+id/load_button"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:text="@string/load_ad"/>
+    </LinearLayout>
+
+    <!--<ListView-->
+        <!--android:id="@+id/native_list_view"-->
+        <!--android:layout_width="match_parent"-->
+        <!--android:layout_height="match_parent"-->
+        <!--android:padding="5dp"/>-->
+
+    <RelativeLayout
+        android:id="@+id/native_ad_view"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_gravity="center"
+        android:background="#FFFFFF"
+        android:gravity="center_horizontal"
+        android:padding="16dp">
+    </RelativeLayout>
+
+</LinearLayout>
diff --git a/mopub-sample/src/main/java/com/mopub/mobileads/FacebookBanner.java b/mopub-sample/src/main/java/com/mopub/mobileads/FacebookBanner.java
deleted file mode 100644
index 4eccbad5..00000000
--- a/mopub-sample/src/main/java/com/mopub/mobileads/FacebookBanner.java
+++ /dev/null
@@ -1,138 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.util.Log;
-
-import com.facebook.ads.Ad;
-import com.facebook.ads.AdError;
-import com.facebook.ads.AdListener;
-import com.facebook.ads.AdSize;
-import com.facebook.ads.AdView;
-import com.mopub.common.DataKeys;
-import com.mopub.common.util.Views;
-
-import java.util.Map;
-
-/**
- * Certified with Facebook Audience Network 4.26.1
- */
-public class FacebookBanner extends CustomEventBanner implements AdListener {
-    public static final String PLACEMENT_ID_KEY = "placement_id";
-
-    private AdView mFacebookBanner;
-    private CustomEventBannerListener mBannerListener;
-
-    /**
-     * CustomEventBanner implementation
-     */
-
-    @Override
-    protected void loadBanner(final Context context,
-            final CustomEventBannerListener customEventBannerListener,
-            final Map<String, Object> localExtras,
-            final Map<String, String> serverExtras) {
-        mBannerListener = customEventBannerListener;
-
-        final String placementId;
-        if (serverExtrasAreValid(serverExtras)) {
-            placementId = serverExtras.get(PLACEMENT_ID_KEY);
-        } else {
-            mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        int width;
-        int height;
-        if (localExtrasAreValid(localExtras)) {
-            width = (Integer) localExtras.get(DataKeys.AD_WIDTH);
-            height = (Integer) localExtras.get(DataKeys.AD_HEIGHT);
-        } else {
-            mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        AdSize adSize = calculateAdSize(width, height);
-        if (adSize == null) {
-            mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        mFacebookBanner = new AdView(context, placementId, adSize);
-        mFacebookBanner.setAdListener(this);
-        mFacebookBanner.disableAutoRefresh();
-        mFacebookBanner.loadAd();
-    }
-
-    @Override
-    protected void onInvalidate() {
-        if (mFacebookBanner != null) {
-            Views.removeFromParent(mFacebookBanner);
-            mFacebookBanner.destroy();
-            mFacebookBanner = null;
-        }
-    }
-
-    /**
-     * AdListener implementation
-     */
-
-    @Override
-    public void onAdLoaded(Ad ad) {
-        Log.d("MoPub", "Facebook banner ad loaded successfully. Showing ad...");
-        mBannerListener.onBannerLoaded(mFacebookBanner);
-    }
-
-    @Override
-    public void onError(final Ad ad, final AdError error) {
-        Log.d("MoPub", "Facebook banner ad failed to load.");
-        if (error == AdError.NO_FILL) {
-            mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_NO_FILL);
-        } else if (error == AdError.INTERNAL_ERROR) {
-            mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-        } else {
-            mBannerListener.onBannerFailed(MoPubErrorCode.UNSPECIFIED);
-        }
-    }
-
-    @Override
-    public void onAdClicked(Ad ad) {
-        Log.d("MoPub", "Facebook banner ad clicked.");
-        mBannerListener.onBannerClicked();
-    }
-
-    @Override
-    public void onLoggingImpression(Ad ad) {
-        Log.d("MoPub", "Facebook banner ad logged impression.");
-    }
-
-    private boolean serverExtrasAreValid(final Map<String, String> serverExtras) {
-        final String placementId = serverExtras.get(PLACEMENT_ID_KEY);
-        return (placementId != null && placementId.length() > 0);
-    }
-
-    private boolean localExtrasAreValid(@NonNull final Map<String, Object> localExtras) {
-        return localExtras.get(DataKeys.AD_WIDTH) instanceof Integer
-                && localExtras.get(DataKeys.AD_HEIGHT) instanceof Integer;
-    }
-
-    @Nullable
-    private AdSize calculateAdSize(int width, int height) {
-        // Use the smallest AdSize that will properly contain the adView
-        if (height <= AdSize.BANNER_320_50.getHeight()) {
-            return AdSize.BANNER_320_50;
-        } else if (height <= AdSize.BANNER_HEIGHT_90.getHeight()) {
-            return AdSize.BANNER_HEIGHT_90;
-        } else if (height <= AdSize.RECTANGLE_HEIGHT_250.getHeight()) {
-            return AdSize.RECTANGLE_HEIGHT_250;
-        } else {
-            return null;
-        }
-    }
-
-    @Deprecated // for testing
-    AdView getAdView() {
-        return mFacebookBanner;
-    }
-}
diff --git a/mopub-sample/src/main/java/com/mopub/mobileads/FacebookInterstitial.java b/mopub-sample/src/main/java/com/mopub/mobileads/FacebookInterstitial.java
deleted file mode 100644
index 1b24c584..00000000
--- a/mopub-sample/src/main/java/com/mopub/mobileads/FacebookInterstitial.java
+++ /dev/null
@@ -1,122 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.util.Log;
-
-import com.facebook.ads.Ad;
-import com.facebook.ads.AdError;
-import com.facebook.ads.InterstitialAd;
-import com.facebook.ads.InterstitialAdListener;
-
-import java.util.Map;
-
-/**
- * Certified with Facebook Audience Network 4.26.1
- */
-public class FacebookInterstitial extends CustomEventInterstitial implements InterstitialAdListener {
-    public static final String PLACEMENT_ID_KEY = "placement_id";
-
-    private InterstitialAd mFacebookInterstitial;
-    private CustomEventInterstitialListener mInterstitialListener;
-
-    /**
-     * CustomEventInterstitial implementation
-     */
-
-    @Override
-    protected void loadInterstitial(final Context context,
-            final CustomEventInterstitialListener customEventInterstitialListener,
-            final Map<String, Object> localExtras,
-            final Map<String, String> serverExtras) {
-        mInterstitialListener = customEventInterstitialListener;
-
-        final String placementId;
-        if (extrasAreValid(serverExtras)) {
-            placementId = serverExtras.get(PLACEMENT_ID_KEY);
-        } else {
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        mFacebookInterstitial = new InterstitialAd(context, placementId);
-        mFacebookInterstitial.setAdListener(this);
-        mFacebookInterstitial.loadAd();
-    }
-
-    @Override
-    protected void showInterstitial() {
-        if (mFacebookInterstitial != null && mFacebookInterstitial.isAdLoaded()) {
-            mFacebookInterstitial.show();
-        } else {
-            Log.d("MoPub", "Tried to show a Facebook interstitial ad before it finished loading. Please try again.");
-            if (mInterstitialListener != null) {
-                onError(mFacebookInterstitial, AdError.INTERNAL_ERROR);
-            } else {
-                Log.d("MoPub", "Interstitial listener not instantiated. Please load interstitial again.");
-            }
-        }
-    }
-
-    @Override
-    protected void onInvalidate() {
-        if (mFacebookInterstitial != null) {
-            mFacebookInterstitial.destroy();
-            mFacebookInterstitial = null;
-        }
-    }
-
-    /**
-     * InterstitialAdListener implementation
-     */
-
-    @Override
-    public void onAdLoaded(final Ad ad) {
-        Log.d("MoPub", "Facebook interstitial ad loaded successfully.");
-        mInterstitialListener.onInterstitialLoaded();
-    }
-
-    @Override
-    public void onError(final Ad ad, final AdError error) {
-        Log.d("MoPub", "Facebook interstitial ad failed to load.");
-        if (error == AdError.NO_FILL) {
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
-        } else if (error == AdError.INTERNAL_ERROR) {
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-        } else {
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.UNSPECIFIED);
-        }
-    }
-
-    @Override
-    public void onInterstitialDisplayed(final Ad ad) {
-        Log.d("MoPub", "Showing Facebook interstitial ad.");
-        mInterstitialListener.onInterstitialShown();
-    }
-
-    @Override
-    public void onAdClicked(final Ad ad) {
-        Log.d("MoPub", "Facebook interstitial ad clicked.");
-        mInterstitialListener.onInterstitialClicked();
-    }
-
-    @Override
-    public void onLoggingImpression(Ad ad) {
-        Log.d("MoPub", "Facebook interstitial ad logged impression.");
-    }
-
-    @Override
-    public void onInterstitialDismissed(final Ad ad) {
-        Log.d("MoPub", "Facebook interstitial ad dismissed.");
-        mInterstitialListener.onInterstitialDismissed();
-    }
-
-    private boolean extrasAreValid(final Map<String, String> serverExtras) {
-        final String placementId = serverExtras.get(PLACEMENT_ID_KEY);
-        return (placementId != null && placementId.length() > 0);
-    }
-
-    @Deprecated // for testing
-    InterstitialAd getInterstitialAd() {
-        return mFacebookInterstitial;
-    }
-}
diff --git a/mopub-sample/src/main/java/com/mopub/mobileads/FacebookRewardedVideo.java b/mopub-sample/src/main/java/com/mopub/mobileads/FacebookRewardedVideo.java
deleted file mode 100644
index c3c4a318..00000000
--- a/mopub-sample/src/main/java/com/mopub/mobileads/FacebookRewardedVideo.java
+++ /dev/null
@@ -1,158 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.text.TextUtils;
-import android.util.Log;
-
-import com.facebook.ads.AdError;
-import com.facebook.ads.RewardedVideoAd;
-import com.facebook.ads.RewardedVideoAdListener;
-import com.mopub.common.LifecycleListener;
-import com.facebook.ads.Ad;
-import com.mopub.common.MoPubReward;
-
-import java.util.Map;
-
-/**
- * Certified with Facebook Audience Network 4.26.1
- */
-public class FacebookRewardedVideo extends CustomEventRewardedVideo implements RewardedVideoAdListener {
-
-    @Nullable
-    private RewardedVideoAd mRewardedVideoAd;
-    @Nullable
-    private String mPlacementId;
-    private String TAG = "mopub";
-
-    /**
-     * CustomEventRewardedVideo implementation
-     */
-
-    @Nullable
-    @Override
-    protected LifecycleListener getLifecycleListener() {
-        return null;
-    }
-
-    @Override
-    protected boolean checkAndInitializeSdk(@NonNull Activity launcherActivity, @NonNull Map<String, Object> localExtras, @NonNull Map<String, String> serverExtras) throws Exception {
-        // Facebook doesn't have a dedicated initialization call, so we return false and do nothing.
-        return false;
-    }
-
-    @Override
-    protected void loadWithSdkInitialized(@NonNull Activity activity, @NonNull Map<String, Object> localExtras, @NonNull Map<String, String> serverExtras) throws Exception {
-        if (!serverExtras.isEmpty()) {
-            mPlacementId = serverExtras.get("placement_id");
-
-            if (!TextUtils.isEmpty(mPlacementId)) {
-                if (mRewardedVideoAd != null) {
-                    mRewardedVideoAd.destroy();
-                    mRewardedVideoAd = null;
-                }
-                Log.d(TAG, "Creating a Facebook Rewarded Video instance, and registering callbacks.");
-                mRewardedVideoAd = new RewardedVideoAd(activity, mPlacementId);
-                mRewardedVideoAd.setAdListener(this);
-            } else {
-                MoPubRewardedVideoManager.onRewardedVideoLoadFailure(FacebookRewardedVideo.class, getAdNetworkId(), MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-                Log.d(TAG, MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR.toString());
-                Log.d(TAG, "Placement ID is null or empty.");
-                return;
-            }
-        }
-
-        if (mRewardedVideoAd.isAdLoaded()) {
-            MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(FacebookRewardedVideo.class, mPlacementId);
-            return;
-        }
-
-        if (mRewardedVideoAd != null) {
-            Log.d(TAG, "Sending Facebook an ad request.");
-            mRewardedVideoAd.loadAd();
-        }
-    }
-
-    @NonNull
-    @Override
-    protected String getAdNetworkId() {
-        return (mRewardedVideoAd != null) ? (mRewardedVideoAd.getPlacementId()) : ("");
-    }
-
-    @Override
-    protected void onInvalidate() {
-        if (mRewardedVideoAd != null) {
-            Log.d(TAG, "Performing cleanup tasks...");
-            mRewardedVideoAd.setAdListener(null);
-            mRewardedVideoAd.destroy();
-            mRewardedVideoAd = null;
-        }
-    }
-
-    @Override
-    protected boolean hasVideoAvailable() {
-        return mRewardedVideoAd != null && mRewardedVideoAd.isAdLoaded();
-    }
-
-    @Override
-    protected void showVideo() {
-        if (hasVideoAvailable()) {
-            Log.d(TAG, "Facebook Rewarded Video creative is available. Showing...");
-            mRewardedVideoAd.show();
-        } else {
-            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(FacebookRewardedVideo.class, mPlacementId, MoPubErrorCode.VIDEO_NOT_AVAILABLE);
-            Log.d(TAG, "Facebook Rewarded Video creative is not available. Try re-requesting.");
-        }
-    }
-
-    @Override
-    public void onRewardedVideoCompleted() {
-        Log.d(TAG, "Facebook Rewarded Video creative is completed. Awarding the user.");
-        MoPubRewardedVideoManager.onRewardedVideoCompleted(FacebookRewardedVideo.class, mPlacementId, MoPubReward.success(MoPubReward.NO_REWARD_LABEL, MoPubReward.DEFAULT_REWARD_AMOUNT));
-    }
-
-    @Override
-    public void onLoggingImpression(Ad ad) {
-        MoPubRewardedVideoManager.onRewardedVideoStarted(FacebookRewardedVideo.class, mPlacementId);
-        Log.d(TAG, "Facebook Rewarded Video creative started playing.");
-    }
-
-    @Override
-    public void onRewardedVideoClosed() {
-        MoPubRewardedVideoManager.onRewardedVideoClosed(FacebookRewardedVideo.class, mPlacementId);
-        Log.d(TAG, "Facebook Rewarded Video creative closed.");
-    }
-
-    @Override
-    public void onAdLoaded(Ad ad) {
-        MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(FacebookRewardedVideo.class, mPlacementId);
-        Log.d(TAG, "Facebook Rewarded Video creative cached.");
-    }
-
-    @Override
-    public void onAdClicked(Ad ad) {
-        MoPubRewardedVideoManager.onRewardedVideoClicked(FacebookRewardedVideo.class, mPlacementId);
-        Log.d(TAG, "Facebook Rewarded Video creative clicked.");
-    }
-
-    @Override
-    public void onError(Ad ad, AdError adError) {
-        MoPubRewardedVideoManager.onRewardedVideoLoadFailure(FacebookRewardedVideo.class, mPlacementId, mapErrorCode(adError.getErrorCode()));
-        Log.d(TAG, "Loading/Playing Facebook Rewarded Video creative encountered an error: " + mapErrorCode(adError.getErrorCode()).toString());
-    }
-
-    @NonNull
-    private static MoPubErrorCode mapErrorCode(int error) {
-        switch (error) {
-            case AdError.NO_FILL_ERROR_CODE:
-                return MoPubErrorCode.NETWORK_NO_FILL;
-            case AdError.INTERNAL_ERROR_CODE:
-                return MoPubErrorCode.INTERNAL_ERROR;
-            case AdError.NETWORK_ERROR_CODE:
-                return MoPubErrorCode.NO_CONNECTION;
-            default:
-                return MoPubErrorCode.UNSPECIFIED;
-        }
-    }
-}
diff --git a/mopub-sample/src/main/java/com/mopub/mobileads/GooglePlayServicesBanner.java b/mopub-sample/src/main/java/com/mopub/mobileads/GooglePlayServicesBanner.java
deleted file mode 100644
index 46d18c56..00000000
--- a/mopub-sample/src/main/java/com/mopub/mobileads/GooglePlayServicesBanner.java
+++ /dev/null
@@ -1,187 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.util.Log;
-
-import com.google.android.gms.ads.AdListener;
-import com.google.android.gms.ads.AdRequest;
-import com.google.android.gms.ads.AdSize;
-import com.google.android.gms.ads.AdView;
-import com.mopub.common.util.Views;
-
-import java.util.Map;
-
-import static com.google.android.gms.ads.AdSize.BANNER;
-import static com.google.android.gms.ads.AdSize.FULL_BANNER;
-import static com.google.android.gms.ads.AdSize.LEADERBOARD;
-import static com.google.android.gms.ads.AdSize.MEDIUM_RECTANGLE;
-
-/*
- * Compatible with version 11.4.0 of the Google Play Services SDK.
- */
-
-// Note: AdMob ads will now use this class as Google has deprecated the AdMob SDK.
-
-class GooglePlayServicesBanner extends CustomEventBanner {
-    /*
-     * These keys are intended for MoPub internal use. Do not modify.
-     */
-    public static final String AD_UNIT_ID_KEY = "adUnitID";
-    public static final String AD_WIDTH_KEY = "adWidth";
-    public static final String AD_HEIGHT_KEY = "adHeight";
-    public static final String LOCATION_KEY = "location";
-
-    private CustomEventBannerListener mBannerListener;
-    private AdView mGoogleAdView;
-
-    @Override
-    protected void loadBanner(
-            final Context context,
-            final CustomEventBannerListener customEventBannerListener,
-            final Map<String, Object> localExtras,
-            final Map<String, String> serverExtras) {
-        mBannerListener = customEventBannerListener;
-        final String adUnitId;
-        final int adWidth;
-        final int adHeight;
-
-        if (extrasAreValid(serverExtras)) {
-            adUnitId = serverExtras.get(AD_UNIT_ID_KEY);
-            adWidth = Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
-            adHeight = Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
-        } else {
-            mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        mGoogleAdView = new AdView(context);
-        mGoogleAdView.setAdListener(new AdViewListener());
-        mGoogleAdView.setAdUnitId(adUnitId);
-
-        final AdSize adSize = calculateAdSize(adWidth, adHeight);
-        if (adSize == null) {
-            mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        mGoogleAdView.setAdSize(adSize);
-
-        final AdRequest adRequest = new AdRequest.Builder()
-                .setRequestAgent("MoPub")
-                .build();
-
-        try {
-            mGoogleAdView.loadAd(adRequest);
-        } catch (NoClassDefFoundError e) {
-            // This can be thrown by Play Services on Honeycomb.
-            mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_NO_FILL);
-        }
-    }
-
-    @Override
-    protected void onInvalidate() {
-        Views.removeFromParent(mGoogleAdView);
-        if (mGoogleAdView != null) {
-            mGoogleAdView.setAdListener(null);
-            mGoogleAdView.destroy();
-        }
-    }
-
-    private boolean extrasAreValid(Map<String, String> serverExtras) {
-        try {
-            Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
-            Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
-        } catch (NumberFormatException e) {
-            return false;
-        }
-
-        return serverExtras.containsKey(AD_UNIT_ID_KEY);
-    }
-
-    private AdSize calculateAdSize(int width, int height) {
-        // Use the smallest AdSize that will properly contain the adView
-        if (width <= BANNER.getWidth() && height <= BANNER.getHeight()) {
-            return BANNER;
-        } else if (width <= MEDIUM_RECTANGLE.getWidth() && height <= MEDIUM_RECTANGLE.getHeight()) {
-            return MEDIUM_RECTANGLE;
-        } else if (width <= FULL_BANNER.getWidth() && height <= FULL_BANNER.getHeight()) {
-            return FULL_BANNER;
-        } else if (width <= LEADERBOARD.getWidth() && height <= LEADERBOARD.getHeight()) {
-            return LEADERBOARD;
-        } else {
-            return null;
-        }
-    }
-
-    private class AdViewListener extends AdListener {
-        /*
-         * Google Play Services AdListener implementation
-         */
-        @Override
-        public void onAdClosed() {
-
-        }
-
-        @Override
-        public void onAdFailedToLoad(int errorCode) {
-            Log.d("MoPub", "Google Play Services banner ad failed to load.");
-            if (mBannerListener != null) {
-                mBannerListener.onBannerFailed(getMoPubErrorCode(errorCode));
-            }
-        }
-
-        @Override
-        public void onAdLeftApplication() {
-
-        }
-
-        @Override
-        public void onAdLoaded() {
-            Log.d("MoPub", "Google Play Services banner ad loaded successfully. Showing ad...");
-            if (mBannerListener != null) {
-                mBannerListener.onBannerLoaded(mGoogleAdView);
-            }
-        }
-
-        @Override
-        public void onAdOpened() {
-            Log.d("MoPub", "Google Play Services banner ad clicked.");
-            if (mBannerListener != null) {
-                mBannerListener.onBannerClicked();
-            }
-        }
-
-        /**
-         * Converts a given Google Mobile Ads SDK error code into {@link MoPubErrorCode}.
-         *
-         * @param error Google Mobile Ads SDK error code.
-         * @return an equivalent MoPub SDK error code for the given Google Mobile Ads SDK error
-         * code.
-         */
-        private MoPubErrorCode getMoPubErrorCode(int error) {
-            MoPubErrorCode errorCode;
-            switch (error) {
-                case AdRequest.ERROR_CODE_INTERNAL_ERROR:
-                    errorCode = MoPubErrorCode.INTERNAL_ERROR;
-                    break;
-                case AdRequest.ERROR_CODE_INVALID_REQUEST:
-                    errorCode = MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
-                    break;
-                case AdRequest.ERROR_CODE_NETWORK_ERROR:
-                    errorCode = MoPubErrorCode.NO_CONNECTION;
-                    break;
-                case AdRequest.ERROR_CODE_NO_FILL:
-                    errorCode = MoPubErrorCode.NO_FILL;
-                    break;
-                default:
-                    errorCode = MoPubErrorCode.UNSPECIFIED;
-            }
-            return errorCode;
-        }
-    }
-
-    @Deprecated // for testing
-    AdView getGoogleAdView() {
-        return mGoogleAdView;
-    }
-}
diff --git a/mopub-sample/src/main/java/com/mopub/mobileads/GooglePlayServicesInterstitial.java b/mopub-sample/src/main/java/com/mopub/mobileads/GooglePlayServicesInterstitial.java
deleted file mode 100644
index a91ab2fc..00000000
--- a/mopub-sample/src/main/java/com/mopub/mobileads/GooglePlayServicesInterstitial.java
+++ /dev/null
@@ -1,157 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.util.Log;
-
-import com.google.android.gms.ads.AdListener;
-import com.google.android.gms.ads.AdRequest;
-import com.google.android.gms.ads.InterstitialAd;
-
-import java.util.Map;
-
-/*
- * Compatible with version 11.4.0 of the Google Play Services SDK.
- */
-
-// Note: AdMob ads will now use this class as Google has deprecated the AdMob SDK.
-
-public class GooglePlayServicesInterstitial extends CustomEventInterstitial {
-    /*
-     * These keys are intended for MoPub internal use. Do not modify.
-     */
-    public static final String AD_UNIT_ID_KEY = "adUnitID";
-    public static final String LOCATION_KEY = "location";
-
-    private CustomEventInterstitialListener mInterstitialListener;
-    private InterstitialAd mGoogleInterstitialAd;
-
-    @Override
-    protected void loadInterstitial(
-            final Context context,
-            final CustomEventInterstitialListener customEventInterstitialListener,
-            final Map<String, Object> localExtras,
-            final Map<String, String> serverExtras) {
-        mInterstitialListener = customEventInterstitialListener;
-        final String adUnitId;
-
-        if (extrasAreValid(serverExtras)) {
-            adUnitId = serverExtras.get(AD_UNIT_ID_KEY);
-        } else {
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        mGoogleInterstitialAd = new InterstitialAd(context);
-        mGoogleInterstitialAd.setAdListener(new InterstitialAdListener());
-        mGoogleInterstitialAd.setAdUnitId(adUnitId);
-
-        final AdRequest adRequest = new AdRequest.Builder()
-                .setRequestAgent("MoPub")
-                .build();
-
-        try {
-            mGoogleInterstitialAd.loadAd(adRequest);
-        } catch (NoClassDefFoundError e) {
-            // This can be thrown by Play Services on Honeycomb.
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
-        }
-    }
-
-    @Override
-    protected void showInterstitial() {
-        if (mGoogleInterstitialAd.isLoaded()) {
-            mGoogleInterstitialAd.show();
-        } else {
-            Log.d("MoPub", "Tried to show a Google Play Services interstitial ad before it finished loading. Please try again.");
-        }
-    }
-
-    @Override
-    protected void onInvalidate() {
-        if (mGoogleInterstitialAd != null) {
-            mGoogleInterstitialAd.setAdListener(null);
-        }
-    }
-
-    private boolean extrasAreValid(Map<String, String> serverExtras) {
-        return serverExtras.containsKey(AD_UNIT_ID_KEY);
-    }
-
-    private class InterstitialAdListener extends AdListener {
-        /*
-    	 * Google Play Services AdListener implementation
-    	 */
-        @Override
-        public void onAdClosed() {
-            Log.d("MoPub", "Google Play Services interstitial ad dismissed.");
-            if (mInterstitialListener != null) {
-                mInterstitialListener.onInterstitialDismissed();
-            }
-        }
-
-        @Override
-        public void onAdFailedToLoad(int errorCode) {
-            Log.d("MoPub", "Google Play Services interstitial ad failed to load.");
-            if (mInterstitialListener != null) {
-                mInterstitialListener.onInterstitialFailed(getMoPubErrorCode(errorCode));
-            }
-        }
-
-        @Override
-        public void onAdLeftApplication() {
-            Log.d("MoPub", "Google Play Services interstitial ad clicked.");
-            if (mInterstitialListener != null) {
-                mInterstitialListener.onInterstitialClicked();
-            }
-        }
-
-        @Override
-        public void onAdLoaded() {
-            Log.d("MoPub", "Google Play Services interstitial ad loaded successfully.");
-            if (mInterstitialListener != null) {
-                mInterstitialListener.onInterstitialLoaded();
-            }
-        }
-
-        @Override
-        public void onAdOpened() {
-            Log.d("MoPub", "Showing Google Play Services interstitial ad.");
-            if (mInterstitialListener != null) {
-                mInterstitialListener.onInterstitialShown();
-            }
-        }
-
-        /**
-         * Converts a given Google Mobile Ads SDK error code into {@link MoPubErrorCode}.
-         *
-         * @param error Google Mobile Ads SDK error code.
-         * @return an equivalent MoPub SDK error code for the given Google Mobile Ads SDK error
-         * code.
-         */
-        private MoPubErrorCode getMoPubErrorCode(int error) {
-            MoPubErrorCode errorCode;
-            switch (error) {
-                case AdRequest.ERROR_CODE_INTERNAL_ERROR:
-                    errorCode = MoPubErrorCode.INTERNAL_ERROR;
-                    break;
-                case AdRequest.ERROR_CODE_INVALID_REQUEST:
-                    errorCode = MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
-                    break;
-                case AdRequest.ERROR_CODE_NETWORK_ERROR:
-                    errorCode = MoPubErrorCode.NO_CONNECTION;
-                    break;
-                case AdRequest.ERROR_CODE_NO_FILL:
-                    errorCode = MoPubErrorCode.NO_FILL;
-                    break;
-                default:
-                    errorCode = MoPubErrorCode.UNSPECIFIED;
-            }
-            return errorCode;
-        }
-    }
-
-    @Deprecated // for testing
-    InterstitialAd getGoogleInterstitialAd() {
-        return mGoogleInterstitialAd;
-    }
-}
diff --git a/mopub-sample/src/main/java/com/mopub/mobileads/GooglePlayServicesRewardedVideo.java b/mopub-sample/src/main/java/com/mopub/mobileads/GooglePlayServicesRewardedVideo.java
deleted file mode 100644
index e5629cba..00000000
--- a/mopub-sample/src/main/java/com/mopub/mobileads/GooglePlayServicesRewardedVideo.java
+++ /dev/null
@@ -1,265 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.text.TextUtils;
-import android.util.Log;
-
-import com.google.android.gms.ads.AdRequest;
-import com.google.android.gms.ads.MobileAds;
-import com.google.android.gms.ads.reward.RewardItem;
-import com.google.android.gms.ads.reward.RewardedVideoAd;
-import com.google.android.gms.ads.reward.RewardedVideoAdListener;
-import com.mopub.common.BaseLifecycleListener;
-import com.mopub.common.LifecycleListener;
-import com.mopub.common.MoPubReward;
-
-import java.util.Map;
-import java.util.concurrent.atomic.AtomicBoolean;
-
-/**
- * A {@link CustomEventRewardedVideo} used to load rewarded video Google rewarded video ads.
- *
- * Compatible with version 11.4.0 of the Google Play Services SDK.
- */
-public class GooglePlayServicesRewardedVideo extends CustomEventRewardedVideo implements
-        RewardedVideoAdListener {
-    private static final String TAG = "MoPubToAdMobRewarded";
-
-    /**
-     * The current version of the adapter.
-     */
-    private static final String ADAPTER_VERSION = "0.1.0";
-
-    /**
-     * Key to obtain AdMob application ID from the server extras provided by MoPub.
-     */
-    private static final String KEY_EXTRA_APPLICATION_ID = "appid";
-
-    /**
-     * Key to obtain AdMob ad unit ID from the extras provided by MoPub.
-     */
-    private static final String KEY_EXTRA_AD_UNIT_ID = "adunit";
-
-    /**
-     * Flag to determine whether or not the adapter has been initialized.
-     */
-    private static AtomicBoolean sIsInitialized;
-
-    /**
-     * Google Mobile Ads rewarded video ad unit ID.
-     */
-    private String mAdUnitId;
-
-    /**
-     * The Google Rewarded Video Ad instance.
-     */
-    private RewardedVideoAd mRewardedVideoAd;
-
-    /**
-     * A {@link LifecycleListener} used to forward the activity lifecycle events from MoPub SDK to
-     * Google Mobile Ads SDK.
-     */
-    private LifecycleListener mLifecycleListener = new BaseLifecycleListener() {
-        @Override
-        public void onPause(@NonNull Activity activity) {
-            super.onPause(activity);
-            if (mRewardedVideoAd != null) {
-                mRewardedVideoAd.pause(activity);
-            }
-        }
-
-        @Override
-        public void onResume(@NonNull Activity activity) {
-            super.onResume(activity);
-            if (mRewardedVideoAd != null) {
-                mRewardedVideoAd.resume(activity);
-            }
-        }
-    };
-
-    public GooglePlayServicesRewardedVideo() {
-        sIsInitialized = new AtomicBoolean(false);
-    }
-
-    @Nullable
-    @Override
-    protected LifecycleListener getLifecycleListener() {
-        return mLifecycleListener;
-    }
-
-    @NonNull
-    @Override
-    protected String getAdNetworkId() {
-        // Google rewarded videos do not have a unique identifier for each ad; using ad unit ID as
-        // an identifier for all ads.
-        return mAdUnitId;
-    }
-
-    @Override
-    protected void onInvalidate() {
-        if (mRewardedVideoAd != null) {
-            mRewardedVideoAd.setRewardedVideoAdListener(null);
-            mRewardedVideoAd = null;
-        }
-    }
-
-    @Override
-    protected boolean checkAndInitializeSdk(@NonNull Activity launcherActivity,
-            @NonNull Map<String, Object> localExtras,
-            @NonNull Map<String, String> serverExtras)
-            throws Exception {
-        if (!sIsInitialized.getAndSet(true)) {
-            Log.i(TAG, "Adapter version - " + ADAPTER_VERSION);
-
-            if (TextUtils.isEmpty(serverExtras.get(KEY_EXTRA_APPLICATION_ID))) {
-                MobileAds.initialize(launcherActivity);
-            } else {
-                MobileAds.initialize(launcherActivity, serverExtras.get(KEY_EXTRA_APPLICATION_ID));
-            }
-
-            if (TextUtils.isEmpty(serverExtras.get(KEY_EXTRA_AD_UNIT_ID))) {
-                // Using class name as the network ID for this callback since the ad unit ID is
-                // invalid.
-                MoPubRewardedVideoManager.onRewardedVideoLoadFailure(
-                        GooglePlayServicesRewardedVideo.class,
-                        GooglePlayServicesRewardedVideo.class.getSimpleName(),
-                        MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-                return false;
-            }
-
-            mAdUnitId = serverExtras.get(KEY_EXTRA_AD_UNIT_ID);
-
-            mRewardedVideoAd = MobileAds.getRewardedVideoAdInstance(launcherActivity);
-            mRewardedVideoAd.setRewardedVideoAdListener(GooglePlayServicesRewardedVideo.this);
-            return true;
-        }
-
-        return false;
-    }
-
-    @Override
-    protected void loadWithSdkInitialized(@NonNull Activity activity,
-            @NonNull Map<String, Object> localExtras,
-            @NonNull Map<String, String> serverExtras)
-            throws Exception {
-        if (TextUtils.isEmpty(serverExtras.get(KEY_EXTRA_AD_UNIT_ID))) {
-            // Using class name as the network ID for this callback since the ad unit ID is
-            // invalid.
-            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(
-                    GooglePlayServicesRewardedVideo.class,
-                    GooglePlayServicesRewardedVideo.class.getSimpleName(),
-                    MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-        mAdUnitId = serverExtras.get(KEY_EXTRA_AD_UNIT_ID);
-
-        if (mRewardedVideoAd == null) {
-            mRewardedVideoAd = MobileAds.getRewardedVideoAdInstance(activity);
-            mRewardedVideoAd.setRewardedVideoAdListener(GooglePlayServicesRewardedVideo.this);
-        }
-
-        if (mRewardedVideoAd.isLoaded()) {
-            MoPubRewardedVideoManager
-                    .onRewardedVideoLoadSuccess(GooglePlayServicesRewardedVideo.class, mAdUnitId);
-        } else {
-            mRewardedVideoAd
-                    .loadAd(mAdUnitId, new AdRequest.Builder().setRequestAgent("MoPub").build());
-        }
-    }
-
-    @Override
-    protected boolean hasVideoAvailable() {
-        return mRewardedVideoAd != null && mRewardedVideoAd.isLoaded();
-    }
-
-    @Override
-    protected void showVideo() {
-        if (hasVideoAvailable()) {
-            mRewardedVideoAd.show();
-        } else {
-            MoPubRewardedVideoManager.onRewardedVideoPlaybackError(
-                    GooglePlayServicesRewardedVideo.class,
-                    mAdUnitId,
-                    getMoPubErrorCode(AdRequest.ERROR_CODE_INTERNAL_ERROR));
-        }
-    }
-
-    @Override
-    public void onRewardedVideoAdLoaded() {
-        MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(
-                GooglePlayServicesRewardedVideo.class,
-                mAdUnitId);
-    }
-
-    @Override
-    public void onRewardedVideoAdOpened() {
-        // MoPub SDK does not have an equivalent callback for an ad opened event. Do nothing.
-    }
-
-    @Override
-    public void onRewardedVideoStarted() {
-        MoPubRewardedVideoManager.onRewardedVideoStarted(
-                GooglePlayServicesRewardedVideo.class,
-                mAdUnitId);
-    }
-
-    @Override
-    public void onRewardedVideoAdClosed() {
-        MoPubRewardedVideoManager.onRewardedVideoClosed(
-                GooglePlayServicesRewardedVideo.class,
-                mAdUnitId);
-    }
-
-    @Override
-    public void onRewarded(RewardItem rewardItem) {
-        MoPubRewardedVideoManager.onRewardedVideoCompleted(
-                GooglePlayServicesRewardedVideo.class,
-                mAdUnitId,
-                MoPubReward.success(rewardItem.getType(), rewardItem.getAmount()));
-    }
-
-    @Override
-    public void onRewardedVideoAdLeftApplication() {
-        MoPubRewardedVideoManager.onRewardedVideoClicked(
-                GooglePlayServicesRewardedVideo.class,
-                mAdUnitId);
-    }
-
-    @Override
-    public void onRewardedVideoAdFailedToLoad(int error) {
-        MoPubRewardedVideoManager.onRewardedVideoLoadFailure(
-                GooglePlayServicesRewardedVideo.class,
-                mAdUnitId,
-                getMoPubErrorCode(error));
-    }
-
-    /**
-     * Converts a given Google Mobile Ads SDK error code into {@link MoPubErrorCode}.
-     *
-     * @param error Google Mobile Ads SDK error code.
-     * @return an equivalent MoPub SDK error code for the given Google Mobile Ads SDK error
-     * code.
-     */
-    private MoPubErrorCode getMoPubErrorCode(int error) {
-        MoPubErrorCode errorCode;
-        switch (error) {
-            case AdRequest.ERROR_CODE_INTERNAL_ERROR:
-                errorCode = MoPubErrorCode.INTERNAL_ERROR;
-                break;
-            case AdRequest.ERROR_CODE_INVALID_REQUEST:
-                errorCode = MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
-                break;
-            case AdRequest.ERROR_CODE_NETWORK_ERROR:
-                errorCode = MoPubErrorCode.NO_CONNECTION;
-                break;
-            case AdRequest.ERROR_CODE_NO_FILL:
-                errorCode = MoPubErrorCode.NO_FILL;
-                break;
-            default:
-                errorCode = MoPubErrorCode.UNSPECIFIED;
-        }
-        return errorCode;
-    }
-}
diff --git a/mopub-sample/src/main/java/com/mopub/nativeads/FacebookAdRenderer.java b/mopub-sample/src/main/java/com/mopub/nativeads/FacebookAdRenderer.java
deleted file mode 100644
index 1429555d..00000000
--- a/mopub-sample/src/main/java/com/mopub/nativeads/FacebookAdRenderer.java
+++ /dev/null
@@ -1,209 +0,0 @@
-package com.mopub.nativeads;
-
-import android.content.Context;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ImageView;
-import android.widget.RelativeLayout;
-import android.widget.TextView;
-
-import com.facebook.ads.MediaView;
-import com.mopub.common.Preconditions;
-
-import java.util.WeakHashMap;
-
-import static android.view.View.VISIBLE;
-
-/**
- * Include this class if you want to use Facebook native video ads. This renderer handles Facebook
- * static and video native ads. This will automatically replace the main image view with the
- * Facebook MediaView that handles showing the main asset.
- * Certified with Facebook Audience Network 4.26.1
- */
-public class FacebookAdRenderer implements MoPubAdRenderer<FacebookNative.FacebookVideoEnabledNativeAd> {
-    private final ViewBinder mViewBinder;
-
-    // This is used instead of View.setTag, which causes a memory leak in 2.3
-    // and earlier: https://code.google.com/p/android/issues/detail?id=18273
-    final WeakHashMap<View, FacebookNativeViewHolder> mViewHolderMap;
-
-    /**
-     * Constructs a native ad renderer with a view binder.
-     *
-     * @param viewBinder The view binder to use when inflating and rendering an ad.
-     */
-    public FacebookAdRenderer(final ViewBinder viewBinder) {
-        mViewBinder = viewBinder;
-        mViewHolderMap = new WeakHashMap<View, FacebookNativeViewHolder>();
-    }
-
-    @Override
-    public View createAdView(final Context context, final ViewGroup parent) {
-        final View adView = LayoutInflater
-                .from(context)
-                .inflate(mViewBinder.layoutId, parent, false);
-        final View mainImageView = adView.findViewById(mViewBinder.mainImageId);
-        if (mainImageView == null) {
-            return adView;
-        }
-
-        final ViewGroup.LayoutParams mainImageViewLayoutParams = mainImageView.getLayoutParams();
-        final MediaView.LayoutParams mediaViewLayoutParams = new MediaView.LayoutParams(
-                mainImageViewLayoutParams.width, mainImageViewLayoutParams.height);
-
-        if (mainImageViewLayoutParams instanceof ViewGroup.MarginLayoutParams) {
-            final ViewGroup.MarginLayoutParams marginParams =
-                    (ViewGroup.MarginLayoutParams) mainImageViewLayoutParams;
-            mediaViewLayoutParams.setMargins(marginParams.leftMargin,
-                    marginParams.topMargin,
-                    marginParams.rightMargin,
-                    marginParams.bottomMargin);
-        }
-
-        if (mainImageViewLayoutParams instanceof RelativeLayout.LayoutParams) {
-            final RelativeLayout.LayoutParams mainImageViewRelativeLayoutParams =
-                    (RelativeLayout.LayoutParams) mainImageViewLayoutParams;
-            final int[] rules = mainImageViewRelativeLayoutParams.getRules();
-            for (int i = 0; i < rules.length; i++) {
-                mediaViewLayoutParams.addRule(i, rules[i]);
-            }
-            mainImageView.setVisibility(View.INVISIBLE);
-        } else {
-            mainImageView.setVisibility(View.GONE);
-        }
-
-        final MediaView mediaView = new MediaView(context);
-        ViewGroup mainImageParent = (ViewGroup) mainImageView.getParent();
-        int mainImageIndex = mainImageParent.indexOfChild(mainImageView);
-        mainImageParent.addView(mediaView, mainImageIndex + 1, mediaViewLayoutParams);
-        return adView;
-    }
-
-    @Override
-    public void renderAdView(final View view,
-            final FacebookNative.FacebookVideoEnabledNativeAd facebookVideoEnabledNativeAd) {
-        FacebookNativeViewHolder facebookNativeViewHolder = mViewHolderMap.get(view);
-        if (facebookNativeViewHolder == null) {
-            facebookNativeViewHolder = FacebookNativeViewHolder.fromViewBinder(view, mViewBinder);
-            mViewHolderMap.put(view, facebookNativeViewHolder);
-        }
-
-        update(facebookNativeViewHolder, facebookVideoEnabledNativeAd);
-        NativeRendererHelper.updateExtras(facebookNativeViewHolder.getMainView(),
-                mViewBinder.extras,
-                facebookVideoEnabledNativeAd.getExtras());
-        setViewVisibility(facebookNativeViewHolder, VISIBLE);
-    }
-
-    @Override
-    public boolean supports(final BaseNativeAd nativeAd) {
-        Preconditions.checkNotNull(nativeAd);
-        return nativeAd instanceof FacebookNative.FacebookVideoEnabledNativeAd;
-    }
-
-    private void update(final FacebookNativeViewHolder facebookNativeViewHolder,
-            final FacebookNative.FacebookVideoEnabledNativeAd nativeAd) {
-        final ImageView mainImageView = facebookNativeViewHolder.getMainImageView();
-        NativeRendererHelper.addTextView(facebookNativeViewHolder.getTitleView(),
-                nativeAd.getTitle());
-        NativeRendererHelper.addTextView(facebookNativeViewHolder.getTextView(), nativeAd.getText());
-        NativeRendererHelper.addTextView(facebookNativeViewHolder.getCallToActionView(),
-                nativeAd.getCallToAction());
-        NativeImageHelper.loadImageView(nativeAd.getMainImageUrl(), mainImageView);
-        NativeImageHelper.loadImageView(nativeAd.getIconImageUrl(),
-                facebookNativeViewHolder.getIconImageView());
-        NativeRendererHelper.addPrivacyInformationIcon(
-                facebookNativeViewHolder.getPrivacyInformationIconImageView(),
-                nativeAd.getPrivacyInformationIconImageUrl(),
-                nativeAd.getPrivacyInformationIconClickThroughUrl());
-        final MediaView mediaView = facebookNativeViewHolder.getMediaView();
-        if (mediaView != null && mainImageView != null) {
-            nativeAd.updateMediaView(mediaView);
-            mediaView.setVisibility(View.VISIBLE);
-            if (facebookNativeViewHolder.isMainImageViewInRelativeView()) {
-                mainImageView.setVisibility(View.INVISIBLE);
-            } else {
-                mainImageView.setVisibility(View.GONE);
-            }
-
-        }
-    }
-
-    private static void setViewVisibility(final FacebookNativeViewHolder facebookNativeViewHolder,
-            final int visibility) {
-        if (facebookNativeViewHolder.getMainView() != null) {
-            facebookNativeViewHolder.getMainView().setVisibility(visibility);
-        }
-    }
-
-    static class FacebookNativeViewHolder {
-        private final StaticNativeViewHolder mStaticNativeViewHolder;
-        private final MediaView mMediaView;
-        private final boolean isMainImageViewInRelativeView;
-
-        // Use fromViewBinder instead of a constructor
-        private FacebookNativeViewHolder(final StaticNativeViewHolder staticNativeViewHolder,
-                final MediaView mediaView, final boolean mainImageViewInRelativeView) {
-            mStaticNativeViewHolder = staticNativeViewHolder;
-            mMediaView = mediaView;
-            isMainImageViewInRelativeView = mainImageViewInRelativeView;
-        }
-
-        static FacebookNativeViewHolder fromViewBinder(final View view,
-                final ViewBinder viewBinder) {
-            StaticNativeViewHolder staticNativeViewHolder = StaticNativeViewHolder.fromViewBinder(view, viewBinder);
-            final View mainImageView = staticNativeViewHolder.mainImageView;
-            boolean mainImageViewInRelativeView = false;
-            MediaView mediaView = null;
-            if (mainImageView != null) {
-                final ViewGroup mainImageParent = (ViewGroup) mainImageView.getParent();
-                if (mainImageParent instanceof RelativeLayout) {
-                    mainImageViewInRelativeView = true;
-                }
-                final int mainImageIndex = mainImageParent.indexOfChild(mainImageView);
-                final View viewAfterImageView = mainImageParent.getChildAt(mainImageIndex + 1);
-                if (viewAfterImageView instanceof MediaView) {
-                    mediaView = (MediaView) viewAfterImageView;
-                }
-            }
-            return new FacebookNativeViewHolder(staticNativeViewHolder, mediaView, mainImageViewInRelativeView);
-        }
-
-        public View getMainView() {
-            return mStaticNativeViewHolder.mainView;
-        }
-
-        public TextView getTitleView() {
-            return mStaticNativeViewHolder.titleView;
-        }
-
-        public TextView getTextView() {
-            return mStaticNativeViewHolder.textView;
-        }
-
-        public TextView getCallToActionView() {
-            return mStaticNativeViewHolder.callToActionView;
-        }
-
-        public ImageView getMainImageView() {
-            return mStaticNativeViewHolder.mainImageView;
-        }
-
-        public ImageView getIconImageView() {
-            return mStaticNativeViewHolder.iconImageView;
-        }
-
-        public ImageView getPrivacyInformationIconImageView() {
-            return mStaticNativeViewHolder.privacyInformationIconImageView;
-        }
-
-        public MediaView getMediaView() {
-            return mMediaView;
-        }
-
-        public boolean isMainImageViewInRelativeView() {
-            return isMainImageViewInRelativeView;
-        }
-    }
-}
diff --git a/mopub-sample/src/main/java/com/mopub/nativeads/FacebookNative.java b/mopub-sample/src/main/java/com/mopub/nativeads/FacebookNative.java
deleted file mode 100644
index 4eb9d55f..00000000
--- a/mopub-sample/src/main/java/com/mopub/nativeads/FacebookNative.java
+++ /dev/null
@@ -1,526 +0,0 @@
-package com.mopub.nativeads;
-
-import android.content.Context;
-import android.view.View;
-import android.view.ViewGroup;
-
-import com.facebook.ads.Ad;
-import com.facebook.ads.AdError;
-import com.facebook.ads.AdListener;
-import com.facebook.ads.MediaView;
-import com.facebook.ads.NativeAd;
-import com.facebook.ads.NativeAd.Rating;
-import com.mopub.common.Preconditions;
-import com.mopub.common.logging.MoPubLog;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import static com.mopub.nativeads.NativeImageHelper.preCacheImages;
-
-/**
- * FacebookAdRenderer is also necessary in order to show video ads.
- * Video ads will only be shown if VIDEO_ENABLED is set to true or a server configuration
- * "video_enabled" flag is set to true. The server configuration will override the local
- * configuration.
- * Certified with Facebook Audience Network 4.26.1
- */
-public class FacebookNative extends CustomEventNative {
-    private static final String PLACEMENT_ID_KEY = "placement_id";
-    private static final String VIDEO_ENABLED_KEY = "video_enabled";
-
-    /**
-     * Sets whether or not Facebook native video ads will be shown. This value is overridden with
-     * server extras.
-     */
-    private static boolean VIDEO_ENABLED = false;
-
-    /**
-     * Sets whether or not there is a video renderer available. This class will check for the
-     * default Facebook video renderer. This value can be overridden with {@link
-     * FacebookNative#setVideoRendererAvailable} if there already is a custom Facebook video
-     * renderer.
-     */
-    private static Boolean sIsVideoRendererAvailable = null;
-
-    // CustomEventNative implementation
-    @Override
-    protected void loadNativeAd(final Context context,
-            final CustomEventNativeListener customEventNativeListener,
-            final Map<String, Object> localExtras,
-            final Map<String, String> serverExtras) {
-
-        final String placementId;
-        if (extrasAreValid(serverExtras)) {
-            placementId = serverExtras.get(PLACEMENT_ID_KEY);
-        } else {
-            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        final String videoEnabledString = serverExtras.get(VIDEO_ENABLED_KEY);
-        boolean videoEnabledFromServer = Boolean.parseBoolean(videoEnabledString);
-
-        if (sIsVideoRendererAvailable == null) {
-            try {
-                Class.forName("com.mopub.nativeads.FacebookAdRenderer");
-                sIsVideoRendererAvailable = true;
-            } catch (ClassNotFoundException e) {
-                sIsVideoRendererAvailable = false;
-            }
-        }
-
-        if (shouldUseVideoEnabledNativeAd(sIsVideoRendererAvailable, videoEnabledString,
-                videoEnabledFromServer)) {
-            final FacebookVideoEnabledNativeAd facebookVideoEnabledNativeAd =
-                    new FacebookVideoEnabledNativeAd(context,
-                            new NativeAd(context, placementId), customEventNativeListener);
-            facebookVideoEnabledNativeAd.loadAd();
-        } else {
-            final FacebookStaticNativeAd facebookStaticNativeAd = new FacebookStaticNativeAd(
-                    context, new NativeAd(context, placementId), customEventNativeListener);
-            facebookStaticNativeAd.loadAd();
-        }
-    }
-
-    /**
-     * Sets whether Facebook native video ads may be shown. This value is overridden by the value of
-     * the "video_enabled" key that may be sent from the MoPub ad server.
-     * com.mopub.nativeads.FacebookAdRenderer must also be used to display video-enabled ads.
-     *
-     * @param videoEnabled True if you want to enable Facebook native video.
-     */
-    public static void setVideoEnabled(final boolean videoEnabled) {
-        VIDEO_ENABLED = videoEnabled;
-    }
-
-    /**
-     * Sets whether a renderer is available that supports Facebook video ads.
-     * <p/>
-     * If you use a custom renderer class that is not com.mopub.nativeads.FacebookAdRenderer to show
-     * video-enabled native ads, you should set this to true.
-     *
-     * @param videoRendererAvailable Whether or not there is a renderer available for video-enabled
-     *                               Facebook native ads.
-     */
-    public static void setVideoRendererAvailable(final boolean videoRendererAvailable) {
-        sIsVideoRendererAvailable = videoRendererAvailable;
-    }
-
-    static boolean shouldUseVideoEnabledNativeAd(final boolean isVideoRendererAvailable,
-            final String videoEnabledString, final boolean videoEnabledFromServer) {
-        if (!isVideoRendererAvailable) {
-            return false;
-        }
-        return (videoEnabledString != null && videoEnabledFromServer) ||
-                (videoEnabledString == null && VIDEO_ENABLED);
-    }
-
-    static Boolean isVideoRendererAvailable() {
-        return sIsVideoRendererAvailable;
-    }
-
-    private boolean extrasAreValid(final Map<String, String> serverExtras) {
-        final String placementId = serverExtras.get(PLACEMENT_ID_KEY);
-        return (placementId != null && placementId.length() > 0);
-    }
-
-    private static void registerChildViewsForInteraction(final View view, final NativeAd nativeAd) {
-        if (nativeAd == null) {
-            return;
-        }
-
-        final List<View> clickableViews = new ArrayList<>();
-        assembleChildViewsWithLimit(view, clickableViews, 10);
-
-        if (clickableViews.size() == 1) {
-            nativeAd.registerViewForInteraction(view);
-        } else {
-            nativeAd.registerViewForInteraction(view, clickableViews);
-        }
-    }
-
-    private static void assembleChildViewsWithLimit(final View view,
-            final List<View> clickableViews, final int limit) {
-        if (view == null) {
-            MoPubLog.d("View given is null. Ignoring");
-            return;
-        }
-
-        if (limit <= 0) {
-            MoPubLog.d("Depth limit reached; adding this view regardless of its type.");
-            clickableViews.add(view);
-            return;
-        }
-
-        if (view instanceof ViewGroup && ((ViewGroup) view).getChildCount() > 0) {
-            final ViewGroup vg = (ViewGroup) view;
-            for (int i = 0; i < vg.getChildCount(); i++) {
-                assembleChildViewsWithLimit(vg.getChildAt(i), clickableViews, limit - 1);
-            }
-            return;
-        }
-
-        clickableViews.add(view);
-    }
-
-    static class FacebookStaticNativeAd extends StaticNativeAd implements AdListener {
-        private static final String SOCIAL_CONTEXT_FOR_AD = "socialContextForAd";
-
-        private final Context mContext;
-        private final NativeAd mNativeAd;
-        private final CustomEventNativeListener mCustomEventNativeListener;
-
-        FacebookStaticNativeAd(final Context context,
-                final NativeAd nativeAd,
-                final CustomEventNativeListener customEventNativeListener) {
-            mContext = context.getApplicationContext();
-            mNativeAd = nativeAd;
-            mCustomEventNativeListener = customEventNativeListener;
-        }
-
-        void loadAd() {
-            mNativeAd.setAdListener(this);
-            mNativeAd.loadAd();
-        }
-
-        // AdListener
-        @Override
-        public void onAdLoaded(final Ad ad) {
-            // This identity check is from Facebook's Native API sample code:
-            // https://developers.facebook.com/docs/audience-network/android/native-api
-            if (!mNativeAd.equals(ad) || !mNativeAd.isAdLoaded()) {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
-                return;
-            }
-
-            setTitle(mNativeAd.getAdTitle());
-            setText(mNativeAd.getAdBody());
-
-            final NativeAd.Image coverImage = mNativeAd.getAdCoverImage();
-            setMainImageUrl(coverImage == null ? null : coverImage.getUrl());
-
-            final NativeAd.Image icon = mNativeAd.getAdIcon();
-            setIconImageUrl(icon == null ? null : icon.getUrl());
-
-            setCallToAction(mNativeAd.getAdCallToAction());
-            setStarRating(getDoubleRating(mNativeAd.getAdStarRating()));
-
-            addExtra(SOCIAL_CONTEXT_FOR_AD, mNativeAd.getAdSocialContext());
-
-            final NativeAd.Image adChoicesIconImage = mNativeAd.getAdChoicesIcon();
-            setPrivacyInformationIconImageUrl(adChoicesIconImage == null ? null : adChoicesIconImage
-                    .getUrl());
-            setPrivacyInformationIconClickThroughUrl(mNativeAd.getAdChoicesLinkUrl());
-
-            final List<String> imageUrls = new ArrayList<String>();
-            final String mainImageUrl = getMainImageUrl();
-            if (mainImageUrl != null) {
-                imageUrls.add(getMainImageUrl());
-            }
-            final String iconUrl = getIconImageUrl();
-            if (iconUrl != null) {
-                imageUrls.add(getIconImageUrl());
-            }
-            final String privacyInformationIconImageUrl = getPrivacyInformationIconImageUrl();
-            if (privacyInformationIconImageUrl != null) {
-                imageUrls.add(privacyInformationIconImageUrl);
-            }
-
-            preCacheImages(mContext, imageUrls, new NativeImageHelper.ImageListener() {
-                @Override
-                public void onImagesCached() {
-                    mCustomEventNativeListener.onNativeAdLoaded(FacebookStaticNativeAd.this);
-                }
-
-                @Override
-                public void onImagesFailedToCache(NativeErrorCode errorCode) {
-                    mCustomEventNativeListener.onNativeAdFailed(errorCode);
-                }
-            });
-        }
-
-        @Override
-        public void onError(final Ad ad, final AdError adError) {
-            if (adError == null) {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
-            } else if (adError.getErrorCode() == AdError.NO_FILL.getErrorCode()) {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_NO_FILL);
-            } else if (adError.getErrorCode() == AdError.INTERNAL_ERROR.getErrorCode()) {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
-            } else {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
-            }
-        }
-
-        @Override
-        public void onAdClicked(final Ad ad) {
-            notifyAdClicked();
-        }
-
-        @Override
-        public void onLoggingImpression(final Ad ad) {
-            notifyAdImpressed();
-        }
-
-        // BaseForwardingNativeAd
-        @Override
-        public void prepare(final View view) {
-            registerChildViewsForInteraction(view, mNativeAd);
-        }
-
-        @Override
-        public void clear(final View view) {
-            mNativeAd.unregisterView();
-        }
-
-        @Override
-        public void destroy() {
-            mNativeAd.destroy();
-        }
-
-        private Double getDoubleRating(final Rating rating) {
-            if (rating == null) {
-                return null;
-            }
-
-            return MAX_STAR_RATING * rating.getValue() / rating.getScale();
-        }
-    }
-
-
-    static class FacebookVideoEnabledNativeAd extends BaseNativeAd implements AdListener {
-        private static final String SOCIAL_CONTEXT_FOR_AD = "socialContextForAd";
-
-        static final double MIN_STAR_RATING = 0;
-        static final double MAX_STAR_RATING = 5;
-
-        private final Context mContext;
-        private final NativeAd mNativeAd;
-        private final CustomEventNativeListener mCustomEventNativeListener;
-
-        private Double mStarRating;
-
-        private final Map<String, Object> mExtras;
-
-        FacebookVideoEnabledNativeAd(final Context context,
-                final NativeAd nativeAd,
-                final CustomEventNativeListener customEventNativeListener) {
-            mContext = context.getApplicationContext();
-            mNativeAd = nativeAd;
-            mCustomEventNativeListener = customEventNativeListener;
-            mExtras = new HashMap<String, Object>();
-        }
-
-        void loadAd() {
-            mNativeAd.setAdListener(this);
-            mNativeAd.loadAd();
-        }
-
-        /**
-         * Returns the String corresponding to the ad's title.
-         */
-        final public String getTitle() {
-            return mNativeAd.getAdTitle();
-        }
-
-        /**
-         * Returns the String corresponding to the ad's body text. May be null.
-         */
-        final public String getText() {
-            return mNativeAd.getAdBody();
-        }
-
-        /**
-         * Returns the String url corresponding to the ad's main image. May be null.
-         */
-        final public String getMainImageUrl() {
-            final NativeAd.Image coverImage = mNativeAd.getAdCoverImage();
-            return coverImage == null ? null : coverImage.getUrl();
-        }
-
-        /**
-         * Returns the String url corresponding to the ad's icon image. May be null.
-         */
-        final public String getIconImageUrl() {
-            final NativeAd.Image icon = mNativeAd.getAdIcon();
-            return icon == null ? null : icon.getUrl();
-        }
-
-        /**
-         * Returns the Call To Action String (i.e. "Download" or "Learn More") associated with this ad.
-         */
-        final public String getCallToAction() {
-            return mNativeAd.getAdCallToAction();
-        }
-
-        /**
-         * For app install ads, this returns the associated star rating (on a 5 star scale) for the
-         * advertised app. Note that this method may return null if the star rating was either never set
-         * or invalid.
-         */
-        final public Double getStarRating() {
-            return mStarRating;
-        }
-
-        /**
-         * Returns the Privacy Information click through url.
-         *
-         * @return String representing the Privacy Information Icon click through url, or {@code null}
-         * if not set.
-         */
-        final public String getPrivacyInformationIconClickThroughUrl() {
-            return mNativeAd.getAdChoicesLinkUrl();
-        }
-
-        /**
-         * Returns the Privacy Information image url.
-         *
-         * @return String representing the Privacy Information Icon click through url, or {@code
-         * null} if not set.
-         */
-        final public String getPrivacyInformationIconImageUrl() {
-            return mNativeAd.getAdChoicesIcon() == null ? null : mNativeAd.getAdChoicesIcon().getUrl();
-        }
-
-        // AdListener
-        @Override
-        public void onAdLoaded(final Ad ad) {
-            // This identity check is from Facebook's Native API sample code:
-            // https://developers.facebook.com/docs/audience-network/android/native-api
-            if (!mNativeAd.equals(ad) || !mNativeAd.isAdLoaded()) {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
-                return;
-            }
-
-            setStarRating(getDoubleRating(mNativeAd.getAdStarRating()));
-
-            addExtra(SOCIAL_CONTEXT_FOR_AD, mNativeAd.getAdSocialContext());
-
-            final List<String> imageUrls = new ArrayList<String>();
-            final String mainImageUrl = getMainImageUrl();
-            if (mainImageUrl != null) {
-                imageUrls.add(mainImageUrl);
-            }
-            final String iconImageUrl = getIconImageUrl();
-            if (iconImageUrl != null) {
-                imageUrls.add(iconImageUrl);
-            }
-            final String privacyInformationIconImageUrl = getPrivacyInformationIconImageUrl();
-            if (privacyInformationIconImageUrl != null) {
-                imageUrls.add(privacyInformationIconImageUrl);
-            }
-
-            preCacheImages(mContext, imageUrls, new NativeImageHelper.ImageListener() {
-                @Override
-                public void onImagesCached() {
-                    mCustomEventNativeListener.onNativeAdLoaded(FacebookVideoEnabledNativeAd.this);
-                }
-
-                @Override
-                public void onImagesFailedToCache(NativeErrorCode errorCode) {
-                    mCustomEventNativeListener.onNativeAdFailed(errorCode);
-                }
-            });
-        }
-
-        @Override
-        public void onError(final Ad ad, final AdError adError) {
-            if (adError == null) {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
-            } else if (adError.getErrorCode() == AdError.NO_FILL.getErrorCode()) {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_NO_FILL);
-            } else if (adError.getErrorCode() == AdError.INTERNAL_ERROR.getErrorCode()) {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
-            } else {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
-            }
-        }
-
-        @Override
-        public void onAdClicked(final Ad ad) {
-            notifyAdClicked();
-        }
-
-        @Override
-        public void onLoggingImpression(final Ad ad) {
-            notifyAdImpressed();
-        }
-
-        // BaseForwardingNativeAd
-        @Override
-        public void prepare(final View view) {
-            registerChildViewsForInteraction(view, mNativeAd);
-        }
-
-        @Override
-        public void clear(final View view) {
-            mNativeAd.unregisterView();
-        }
-
-        @Override
-        public void destroy() {
-            mNativeAd.destroy();
-        }
-
-        /**
-         * Given a particular String key, return the associated Object value from the ad's extras map.
-         * See {@link StaticNativeAd#getExtras()} for more information.
-         */
-        final public Object getExtra(final String key) {
-            if (!Preconditions.NoThrow.checkNotNull(key, "getExtra key is not allowed to be null")) {
-                return null;
-            }
-            return mExtras.get(key);
-        }
-
-        /**
-         * Returns a copy of the extras map, reflecting additional ad content not reflected in any
-         * of the above hardcoded setters. This is particularly useful for passing down custom fields
-         * with MoPub's direct-sold native ads or from mediated networks that pass back additional
-         * fields.
-         */
-        final public Map<String, Object> getExtras() {
-            return new HashMap<String, Object>(mExtras);
-        }
-
-        final public void addExtra(final String key, final Object value) {
-            if (!Preconditions.NoThrow.checkNotNull(key, "addExtra key is not allowed to be null")) {
-                return;
-            }
-            mExtras.put(key, value);
-        }
-
-        /**
-         * Attaches the native ad to the MediaView, if it exists.
-         *
-         * @param mediaView The View that holds the main media.
-         */
-        public void updateMediaView(final MediaView mediaView) {
-            if (mediaView != null) {
-                mediaView.setNativeAd(mNativeAd);
-            }
-        }
-
-        private void setStarRating(final Double starRating) {
-            if (starRating == null) {
-                mStarRating = null;
-            } else if (starRating >= MIN_STAR_RATING && starRating <= MAX_STAR_RATING) {
-                mStarRating = starRating;
-            } else {
-                MoPubLog.d("Ignoring attempt to set invalid star rating (" + starRating + "). Must be "
-                        + "between " + MIN_STAR_RATING + " and " + MAX_STAR_RATING + ".");
-            }
-        }
-
-        private Double getDoubleRating(final Rating rating) {
-            if (rating == null) {
-                return null;
-            }
-
-            return MAX_STAR_RATING * rating.getValue() / rating.getScale();
-        }
-    }
-}
diff --git a/mopub-sample/src/main/java/com/mopub/nativeads/GooglePlayServicesAdRenderer.java b/mopub-sample/src/main/java/com/mopub/nativeads/GooglePlayServicesAdRenderer.java
deleted file mode 100644
index 3887c33d..00000000
--- a/mopub-sample/src/main/java/com/mopub/nativeads/GooglePlayServicesAdRenderer.java
+++ /dev/null
@@ -1,408 +0,0 @@
-package com.mopub.nativeads;
-
-import android.content.Context;
-import android.support.annotation.IdRes;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.util.Log;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.FrameLayout;
-import android.widget.ImageView;
-import android.widget.TextView;
-
-import com.google.android.gms.ads.formats.AdChoicesView;
-import com.google.android.gms.ads.formats.NativeAdView;
-import com.google.android.gms.ads.formats.NativeAppInstallAdView;
-import com.google.android.gms.ads.formats.NativeContentAdView;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.nativeads.GooglePlayServicesNative.GooglePlayServicesNativeAd;
-
-import java.util.Locale;
-import java.util.Map;
-import java.util.WeakHashMap;
-
-/**
- * The {@link GooglePlayServicesAdRenderer} class is used to render
- * GooglePlayServicesStaticNativeAds.
- *
- * Compatible with version 11.4.0 of the Google Play Services SDK.
- */
-public class GooglePlayServicesAdRenderer implements MoPubAdRenderer<GooglePlayServicesNativeAd> {
-
-    /**
-     * Key to set and get star rating text view as an extra in the view binder.
-     */
-    public static final String VIEW_BINDER_KEY_STAR_RATING = "key_star_rating";
-
-    /**
-     * Key to set and get advertiser text view as an extra in the view binder.
-     */
-    public static final String VIEW_BINDER_KEY_ADVERTISER = "key_advertiser";
-
-    /**
-     * Key to set and get store text view as an extra in the view binder.
-     */
-    public static final String VIEW_BINDER_KEY_STORE = "key_store";
-
-    /**
-     * Key to set and get price text view as an extra in the view binder.
-     */
-    public static final String VIEW_BINDER_KEY_PRICE = "key_price";
-
-    /**
-     * Key to set and get the AdChoices icon view as an extra in the view binder.
-     */
-    public static final String VIEW_BINDER_KEY_AD_CHOICES_ICON_CONTAINER = "ad_choices_container";
-
-    /**
-     * ID for the frame layout that wraps the Google ad view.
-     */
-    @IdRes
-    private static final int ID_WRAPPING_FRAME = 1001;
-
-    /**
-     * ID for the Google native ad view.
-     */
-    @IdRes
-    private static final int ID_GOOGLE_NATIVE_VIEW = 1002;
-
-    /**
-     * A view binder containing the layout resource and views to be rendered by the renderer.
-     */
-    private final ViewBinder mViewBinder;
-
-    /**
-     * A weak hash map used to keep track of view holder so that the views can be properly recycled.
-     */
-    private final WeakHashMap<View, GoogleStaticNativeViewHolder> mViewHolderMap;
-
-    public GooglePlayServicesAdRenderer(ViewBinder viewBinder) {
-        this.mViewBinder = viewBinder;
-        this.mViewHolderMap = new WeakHashMap<>();
-    }
-
-    @NonNull
-    @Override
-    public View createAdView(@NonNull Context context, @Nullable ViewGroup parent) {
-        View view = LayoutInflater.from(context).inflate(mViewBinder.layoutId, parent, false);
-        // Create a frame layout and add the inflated view as a child. This will allow us to add
-        // the Google native ad view into the view hierarchy at render time.
-        FrameLayout wrappingView = new FrameLayout(context);
-        wrappingView.setId(ID_WRAPPING_FRAME);
-        wrappingView.addView(view);
-        Log.i(GooglePlayServicesNative.TAG, "Ad view created.");
-        return wrappingView;
-    }
-
-    @Override
-    public void renderAdView(@NonNull View view,
-            @NonNull GooglePlayServicesNativeAd nativeAd) {
-        GoogleStaticNativeViewHolder viewHolder = mViewHolderMap.get(view);
-        if (viewHolder == null) {
-            viewHolder = GoogleStaticNativeViewHolder.fromViewBinder(view, mViewBinder);
-            mViewHolderMap.put(view, viewHolder);
-        }
-
-        removeGoogleNativeAdView(view, nativeAd.shouldSwapMargins());
-
-        NativeAdView nativeAdView = null;
-        if (nativeAd.isNativeAppInstallAd()) {
-            nativeAdView = new NativeAppInstallAdView(view.getContext());
-            updateAppInstallAdView(nativeAd, viewHolder, (NativeAppInstallAdView) nativeAdView);
-        } else if (nativeAd.isNativeContentAd()) {
-            nativeAdView = new NativeContentAdView(view.getContext());
-            updateContentAdView(nativeAd, viewHolder, (NativeContentAdView) nativeAdView);
-        }
-
-        if (nativeAdView != null) {
-            insertGoogleNativeAdView(nativeAdView, view, nativeAd.shouldSwapMargins());
-        } else {
-            Log.w(GooglePlayServicesNative.TAG,
-                    "Couldn't add Google native ad view. NativeAdView is null.");
-        }
-    }
-
-    /**
-     * This method will add the given Google native ad view into the view hierarchy of the given
-     * MoPub native ad view.
-     *
-     * @param googleNativeAdView Google's native ad view to be added as a parent to the MoPub's
-     *                           view.
-     * @param moPubNativeAdView  MoPub's native ad view created by this renderer.
-     * @param swapMargins        {@code true} if the margins need to be swapped, {@code false}
-     *                           otherwise.
-     */
-    private static void insertGoogleNativeAdView(NativeAdView googleNativeAdView,
-            View moPubNativeAdView,
-            boolean swapMargins) {
-        if (moPubNativeAdView instanceof FrameLayout
-                && moPubNativeAdView.getId() == ID_WRAPPING_FRAME) {
-            googleNativeAdView.setId(ID_GOOGLE_NATIVE_VIEW);
-            FrameLayout outerFrame = (FrameLayout) moPubNativeAdView;
-            View actualView = outerFrame.getChildAt(0);
-
-            if (swapMargins) {
-                // Google native ad view renders the AdChoices icon in one of the four corners of
-                // its view. If a margin is specified on the actual ad view, the AdChoices view
-                // might be rendered outside the actual ad view. Moving the margins from the
-                // actual ad view to Google native ad view will make sure that the AdChoices icon
-                // is being rendered within the bounds of the actual ad view.
-                FrameLayout.LayoutParams googleNativeAdViewParams = new FrameLayout.LayoutParams(
-                        ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
-                FrameLayout.LayoutParams actualViewParams =
-                        (FrameLayout.LayoutParams) actualView.getLayoutParams();
-                googleNativeAdViewParams.setMargins(actualViewParams.leftMargin,
-                        actualViewParams.topMargin,
-                        actualViewParams.rightMargin,
-                        actualViewParams.bottomMargin);
-                googleNativeAdView.setLayoutParams(googleNativeAdViewParams);
-                actualViewParams.setMargins(0, 0, 0, 0);
-            } else {
-                googleNativeAdView.setLayoutParams(new ViewGroup.LayoutParams(
-                        ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
-            }
-
-            outerFrame.removeView(actualView);
-            googleNativeAdView.addView(actualView);
-            outerFrame.addView(googleNativeAdView);
-        } else {
-            Log.w(GooglePlayServicesNative.TAG,
-                    "Couldn't add Google native ad view. Wrapping view not found.");
-        }
-    }
-
-    /**
-     * This method will remove the Google native ad view from the view hierarchy if one is present.
-     *
-     * @param view        the view from which to remove the Google native ad view.
-     * @param swapMargins {@code true} if the margins need to be swapped before removing the
-     *                    Google native ad view, {@code false} otherwise.
-     */
-    protected static void removeGoogleNativeAdView(@NonNull View view, boolean swapMargins) {
-        if (view instanceof FrameLayout && view.getId() == ID_WRAPPING_FRAME) {
-            View adView = view.findViewById(ID_GOOGLE_NATIVE_VIEW);
-            if (adView != null) {
-                ViewGroup outerView = (ViewGroup) view;
-                int index = outerView.indexOfChild(adView);
-                outerView.removeView(adView);
-                View actualNativeView = ((ViewGroup) adView).getChildAt(0);
-                if (actualNativeView != null) {
-                    if (swapMargins) {
-                        FrameLayout.LayoutParams actualViewParams =
-                                (FrameLayout.LayoutParams) actualNativeView.getLayoutParams();
-                        FrameLayout.LayoutParams googleNativeViewParams =
-                                (FrameLayout.LayoutParams) adView.getLayoutParams();
-                        actualViewParams.setMargins(
-                                googleNativeViewParams.leftMargin,
-                                googleNativeViewParams.topMargin,
-                                googleNativeViewParams.rightMargin,
-                                googleNativeViewParams.bottomMargin);
-                    }
-                    ((ViewGroup) adView).removeView(actualNativeView);
-                    outerView.addView(actualNativeView, index);
-                }
-
-                if (adView instanceof NativeAdView) {
-                    ((NativeAdView) adView).destroy();
-                }
-            }
-        }
-    }
-
-    /**
-     * This method will render the given native ad view using the native ad and set the views to
-     * Google's native content ad view.
-     *
-     * @param staticNativeAd         a static native ad object containing the required assets to
-     *                               set to the native ad view.
-     * @param staticNativeViewHolder a static native view holder object containing the mapped
-     *                               views from the view binder.
-     * @param contentAdView          the Google native content ad view in the view hierarchy.
-     */
-    private void updateContentAdView(GooglePlayServicesNativeAd staticNativeAd,
-            GoogleStaticNativeViewHolder staticNativeViewHolder,
-            NativeContentAdView contentAdView) {
-        NativeRendererHelper.addTextView(
-                staticNativeViewHolder.mTitleView, staticNativeAd.getTitle());
-        contentAdView.setHeadlineView(staticNativeViewHolder.mTitleView);
-        NativeRendererHelper.addTextView(
-                staticNativeViewHolder.mTextView, staticNativeAd.getText());
-        contentAdView.setBodyView(staticNativeViewHolder.mTextView);
-        NativeRendererHelper.addTextView(staticNativeViewHolder.mCallToActionView,
-                staticNativeAd.getCallToAction());
-        contentAdView.setCallToActionView(staticNativeViewHolder.mCallToActionView);
-        NativeImageHelper.loadImageView(staticNativeAd.getMainImageUrl(),
-                staticNativeViewHolder.mMainImageView);
-        contentAdView.setImageView(staticNativeViewHolder.mMainImageView);
-        NativeImageHelper.loadImageView(staticNativeAd.getIconImageUrl(),
-                staticNativeViewHolder.mIconImageView);
-        contentAdView.setLogoView(staticNativeViewHolder.mIconImageView);
-        if (staticNativeAd.getAdvertiser() != null) {
-            NativeRendererHelper.addTextView(
-                    staticNativeViewHolder.mAdvertiserTextView, staticNativeAd.getAdvertiser());
-            contentAdView.setAdvertiserView(staticNativeViewHolder.mAdvertiserTextView);
-        }
-
-        // Add the AdChoices icon to the container if one is provided by the publisher.
-        if (staticNativeViewHolder.mAdChoicesIconContainer != null) {
-            AdChoicesView adChoicesView = new AdChoicesView(contentAdView.getContext());
-            staticNativeViewHolder.mAdChoicesIconContainer.removeAllViews();
-            staticNativeViewHolder.mAdChoicesIconContainer.addView(adChoicesView);
-            contentAdView.setAdChoicesView(adChoicesView);
-        }
-
-        // Set the privacy information icon to null as the Google Mobile Ads SDK automatically
-        // renders the AdChoices icon.
-        NativeRendererHelper.addPrivacyInformationIcon(
-                staticNativeViewHolder.mPrivacyInformationIconImageView, null, null);
-
-        contentAdView.setNativeAd(staticNativeAd.getContentAd());
-    }
-
-    /**
-     * This method will render the given native ad view using the native ad and set the views to
-     * Google's native app install ad view.
-     *
-     * @param staticNativeAd         a static native ad object containing the required assets to set
-     *                               to the native ad view.
-     * @param staticNativeViewHolder a static native view holder object containing the mapped
-     *                               views from the view binder.
-     * @param appInstallAdView       the Google native app install ad view in the view hierarchy.
-     */
-    private void updateAppInstallAdView(GooglePlayServicesNativeAd staticNativeAd,
-            GoogleStaticNativeViewHolder staticNativeViewHolder,
-            NativeAppInstallAdView appInstallAdView) {
-
-        NativeRendererHelper.addTextView(
-                staticNativeViewHolder.mTitleView, staticNativeAd.getTitle());
-        appInstallAdView.setHeadlineView(staticNativeViewHolder.mTitleView);
-        NativeRendererHelper.addTextView(
-                staticNativeViewHolder.mTextView, staticNativeAd.getText());
-        appInstallAdView.setBodyView(staticNativeViewHolder.mTextView);
-        NativeRendererHelper.addTextView(
-                staticNativeViewHolder.mCallToActionView, staticNativeAd.getCallToAction());
-        appInstallAdView.setCallToActionView(staticNativeViewHolder.mCallToActionView);
-        NativeImageHelper.loadImageView(
-                staticNativeAd.getMainImageUrl(), staticNativeViewHolder.mMainImageView);
-        appInstallAdView.setImageView(staticNativeViewHolder.mMainImageView);
-        NativeImageHelper.loadImageView(
-                staticNativeAd.getIconImageUrl(), staticNativeViewHolder.mIconImageView);
-        appInstallAdView.setIconView(staticNativeViewHolder.mIconImageView);
-        if (staticNativeAd.getStarRating() != null) {
-            NativeRendererHelper.addTextView(staticNativeViewHolder.mStarRatingTextView,
-                    String.format(
-                            Locale.getDefault(), "%.1f/5 Stars", staticNativeAd.getStarRating()));
-            appInstallAdView.setStarRatingView(staticNativeViewHolder.mStarRatingTextView);
-        }
-        if (staticNativeAd.getPrice() != null) {
-            NativeRendererHelper.addTextView(
-                    staticNativeViewHolder.mPriceTextView, staticNativeAd.getPrice());
-            appInstallAdView.setPriceView(staticNativeViewHolder.mPriceTextView);
-        }
-        if (staticNativeAd.getStore() != null) {
-            NativeRendererHelper.addTextView(
-                    staticNativeViewHolder.mStoreTextView, staticNativeAd.getStore());
-            appInstallAdView.setStoreView(staticNativeViewHolder.mStoreTextView);
-        }
-
-        // Set the privacy information icon to null as the Google Mobile Ads SDK automatically
-        // renders the AdChoices icon.
-        NativeRendererHelper.addPrivacyInformationIcon(
-                staticNativeViewHolder.mPrivacyInformationIconImageView, null, null);
-
-        // Add the AdChoices icon to the container if one is provided by the publisher.
-        if (staticNativeViewHolder.mAdChoicesIconContainer != null) {
-            AdChoicesView adChoicesView = new AdChoicesView(appInstallAdView.getContext());
-            staticNativeViewHolder.mAdChoicesIconContainer.removeAllViews();
-            staticNativeViewHolder.mAdChoicesIconContainer.addView(adChoicesView);
-            appInstallAdView.setAdChoicesView(adChoicesView);
-        }
-
-        appInstallAdView.setNativeAd(staticNativeAd.getAppInstallAd());
-    }
-
-    @Override
-    public boolean supports(@NonNull BaseNativeAd nativeAd) {
-        return nativeAd instanceof GooglePlayServicesNativeAd;
-    }
-
-    private static class GoogleStaticNativeViewHolder {
-        @Nullable
-        View mMainView;
-        @Nullable
-        TextView mTitleView;
-        @Nullable
-        TextView mTextView;
-        @Nullable
-        TextView mCallToActionView;
-        @Nullable
-        ImageView mMainImageView;
-        @Nullable
-        ImageView mIconImageView;
-        @Nullable
-        ImageView mPrivacyInformationIconImageView;
-        @Nullable
-        TextView mStarRatingTextView;
-        @Nullable
-        TextView mAdvertiserTextView;
-        @Nullable
-        TextView mStoreTextView;
-        @Nullable
-        TextView mPriceTextView;
-        @Nullable
-        FrameLayout mAdChoicesIconContainer;
-
-        private static final GoogleStaticNativeViewHolder EMPTY_VIEW_HOLDER =
-                new GoogleStaticNativeViewHolder();
-
-        @NonNull
-        public static GoogleStaticNativeViewHolder fromViewBinder(@NonNull View view,
-                @NonNull ViewBinder viewBinder) {
-            final GoogleStaticNativeViewHolder viewHolder = new GoogleStaticNativeViewHolder();
-            viewHolder.mMainView = view;
-            try {
-                viewHolder.mTitleView = (TextView) view.findViewById(viewBinder.titleId);
-                viewHolder.mTextView = (TextView) view.findViewById(viewBinder.textId);
-                viewHolder.mCallToActionView =
-                        (TextView) view.findViewById(viewBinder.callToActionId);
-                viewHolder.mMainImageView =
-                        (ImageView) view.findViewById(viewBinder.mainImageId);
-                viewHolder.mIconImageView =
-                        (ImageView) view.findViewById(viewBinder.iconImageId);
-                viewHolder.mPrivacyInformationIconImageView =
-                        (ImageView) view.findViewById(viewBinder.privacyInformationIconImageId);
-                Map<String, Integer> extraViews = viewBinder.extras;
-                Integer starRatingTextViewId = extraViews.get(VIEW_BINDER_KEY_STAR_RATING);
-                if (starRatingTextViewId != null) {
-                    viewHolder.mStarRatingTextView =
-                            (TextView) view.findViewById(starRatingTextViewId);
-                }
-                Integer advertiserTextViewId = extraViews.get(VIEW_BINDER_KEY_ADVERTISER);
-                if (advertiserTextViewId != null) {
-                    viewHolder.mAdvertiserTextView =
-                            (TextView) view.findViewById(advertiserTextViewId);
-                }
-                Integer storeTextViewId = extraViews.get(VIEW_BINDER_KEY_STORE);
-                if (storeTextViewId != null) {
-                    viewHolder.mStoreTextView = (TextView) view.findViewById(storeTextViewId);
-                }
-                Integer priceTextViewId = extraViews.get(VIEW_BINDER_KEY_PRICE);
-                if (priceTextViewId != null) {
-                    viewHolder.mPriceTextView = (TextView) view.findViewById(priceTextViewId);
-                }
-                Integer adChoicesIconViewId =
-                        extraViews.get(VIEW_BINDER_KEY_AD_CHOICES_ICON_CONTAINER);
-                if (adChoicesIconViewId != null) {
-                    viewHolder.mAdChoicesIconContainer =
-                            (FrameLayout) view.findViewById(adChoicesIconViewId);
-                }
-                return viewHolder;
-            } catch (ClassCastException exception) {
-                MoPubLog.w("Could not cast from id in ViewBinder to expected View type", exception);
-                return EMPTY_VIEW_HOLDER;
-            }
-        }
-    }
-}
diff --git a/mopub-sample/src/main/java/com/mopub/nativeads/GooglePlayServicesNative.java b/mopub-sample/src/main/java/com/mopub/nativeads/GooglePlayServicesNative.java
deleted file mode 100644
index 7797c08c..00000000
--- a/mopub-sample/src/main/java/com/mopub/nativeads/GooglePlayServicesNative.java
+++ /dev/null
@@ -1,615 +0,0 @@
-package com.mopub.nativeads;
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-import android.text.TextUtils;
-import android.util.Log;
-import android.view.View;
-
-import com.google.android.gms.ads.AdListener;
-import com.google.android.gms.ads.AdLoader;
-import com.google.android.gms.ads.AdRequest;
-import com.google.android.gms.ads.MobileAds;
-import com.google.android.gms.ads.formats.NativeAdOptions;
-import com.google.android.gms.ads.formats.NativeAppInstallAd;
-import com.google.android.gms.ads.formats.NativeContentAd;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-import java.util.concurrent.atomic.AtomicBoolean;
-
-/**
- * The {@link GooglePlayServicesNative} class is used to load native Google mobile ads.
- *
- * Compatible with version 11.4.0 of the Google Play Services SDK.
- */
-public class GooglePlayServicesNative extends CustomEventNative {
-    protected static final String TAG = "MoPubToAdMobNative";
-
-    /**
-     * The current version of the adapter.
-     */
-    private static final String ADAPTER_VERSION = "0.3.1";
-
-    /**
-     * Key to obtain AdMob application ID from the server extras provided by MoPub.
-     */
-    private static final String KEY_EXTRA_APPLICATION_ID = "appid";
-
-    /**
-     * Key to obtain AdMob ad unit ID from the extras provided by MoPub.
-     */
-    private static final String KEY_EXTRA_AD_UNIT_ID = "adunit";
-
-    /**
-     * Key to set and obtain the image orientation preference.
-     */
-    public static final String KEY_EXTRA_ORIENTATION_PREFERENCE = "orientation_preference";
-
-    /**
-     * Key to set and obtain the AdChoices icon placement preference.
-     */
-    public static final String KEY_EXTRA_AD_CHOICES_PLACEMENT = "ad_choices_placement";
-
-    /**
-     * Key to set and obtain the experimental swap margins flag.
-     */
-    public static final String KEY_EXPERIMENTAL_EXTRA_SWAP_MARGINS = "swap_margins";
-
-    /**
-     * Flag to determine whether or not the adapter has been initialized.
-     */
-    private static AtomicBoolean sIsInitialized = new AtomicBoolean(false);
-
-    @Override
-    protected void loadNativeAd(@NonNull final Context context,
-            @NonNull final CustomEventNativeListener customEventNativeListener,
-            @NonNull Map<String, Object> localExtras,
-            @NonNull Map<String, String> serverExtras) {
-        if (!sIsInitialized.getAndSet(true)) {
-            Log.i(TAG, "Adapter version - " + ADAPTER_VERSION);
-            if (serverExtras.containsKey(KEY_EXTRA_APPLICATION_ID)
-                    && !TextUtils.isEmpty(serverExtras.get(KEY_EXTRA_APPLICATION_ID))) {
-                MobileAds.initialize(context, serverExtras.get(KEY_EXTRA_APPLICATION_ID));
-            } else {
-                MobileAds.initialize(context);
-            }
-        }
-
-        String adUnitId = serverExtras.get(KEY_EXTRA_AD_UNIT_ID);
-        if (TextUtils.isEmpty(adUnitId)) {
-            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_REQUEST);
-            return;
-        }
-        GooglePlayServicesNativeAd nativeAd =
-                new GooglePlayServicesNativeAd(customEventNativeListener);
-        nativeAd.loadAd(context, adUnitId, localExtras);
-    }
-
-    /**
-     * The {@link GooglePlayServicesNativeAd} class is used to load and map Google native
-     * ads to MoPub native ads.
-     */
-    static class GooglePlayServicesNativeAd extends BaseNativeAd {
-
-        // Native ad assets.
-        private String mTitle;
-        private String mText;
-        private String mMainImageUrl;
-        private String mIconImageUrl;
-        private String mCallToAction;
-        private Double mStarRating;
-        private String mAdvertiser;
-        private String mStore;
-        private String mPrice;
-
-        /**
-         * Flag to determine whether or not to swap margins from actual ad view to Google native ad
-         * view.
-         */
-        private boolean mSwapMargins;
-
-        /**
-         * A custom event native listener used to forward Google Mobile Ads SDK events to MoPub.
-         */
-        private CustomEventNativeListener mCustomEventNativeListener;
-
-        /**
-         * A Google native ad of type content.
-         */
-        private NativeContentAd mNativeContentAd;
-
-        /**
-         * A Google native ad of type app install.
-         */
-        private NativeAppInstallAd mNativeAppInstallAd;
-
-        public GooglePlayServicesNativeAd(
-                CustomEventNativeListener customEventNativeListener) {
-            this.mCustomEventNativeListener = customEventNativeListener;
-        }
-
-        /**
-         * @return the title string associated with this native ad.
-         */
-        public String getTitle() {
-            return mTitle;
-        }
-
-        /**
-         * @return the text/body string associated with the native ad.
-         */
-        public String getText() {
-            return mText;
-        }
-
-        /**
-         * @return the main image URL associated with the native ad.
-         */
-        public String getMainImageUrl() {
-            return mMainImageUrl;
-        }
-
-        /**
-         * @return the icon image URL associated with the native ad.
-         */
-        public String getIconImageUrl() {
-            return mIconImageUrl;
-        }
-
-        /**
-         * @return the call to action string associated with the native ad.
-         */
-        public String getCallToAction() {
-            return mCallToAction;
-        }
-
-        /**
-         * @return the star rating associated with the native ad.
-         */
-        public Double getStarRating() {
-            return mStarRating;
-        }
-
-        /**
-         * @return the advertiser string associated with the native ad.
-         */
-        public String getAdvertiser() {
-            return mAdvertiser;
-        }
-
-        /**
-         * @return the store string associated with the native ad.
-         */
-        public String getStore() {
-            return mStore;
-        }
-
-        /**
-         * @return the price string associated with the native ad.
-         */
-        public String getPrice() {
-            return mPrice;
-        }
-
-        /**
-         * @param title the title to be set.
-         */
-        public void setTitle(String title) {
-            this.mTitle = title;
-        }
-
-        /**
-         * @param text the text/body to be set.
-         */
-        public void setText(String text) {
-            this.mText = text;
-        }
-
-        /**
-         * @param mainImageUrl the main image URL to be set.
-         */
-        public void setMainImageUrl(String mainImageUrl) {
-            this.mMainImageUrl = mainImageUrl;
-        }
-
-        /**
-         * @param iconImageUrl the icon image URL to be set.
-         */
-        public void setIconImageUrl(String iconImageUrl) {
-            this.mIconImageUrl = iconImageUrl;
-        }
-
-        /**
-         * @param callToAction the call to action string to be set.
-         */
-        public void setCallToAction(String callToAction) {
-            this.mCallToAction = callToAction;
-        }
-
-        /**
-         * @param starRating the star rating value to be set.
-         */
-        public void setStarRating(Double starRating) {
-            this.mStarRating = starRating;
-        }
-
-        /**
-         * @param advertiser the advertiser string to be set.
-         */
-        public void setAdvertiser(String advertiser) {
-            this.mAdvertiser = advertiser;
-        }
-
-        /**
-         * @param store the store string to be set.
-         */
-        public void setStore(String store) {
-            this.mStore = store;
-        }
-
-        /**
-         * @param price the price string to be set.
-         */
-        public void setPrice(String price) {
-            this.mPrice = price;
-        }
-
-        /**
-         * @return whether or not this ad is native content ad.
-         */
-        public boolean isNativeContentAd() {
-            return mNativeContentAd != null;
-        }
-
-        /**
-         * @return whether or not to swap margins when rendering the ad.
-         */
-        public boolean shouldSwapMargins() {
-            return this.mSwapMargins;
-        }
-
-        /**
-         * @return whether or not this ad is native app install ad.
-         */
-        public boolean isNativeAppInstallAd() {
-            return mNativeAppInstallAd != null;
-        }
-
-        /**
-         * @return {@link #mNativeContentAd}.
-         */
-        public NativeContentAd getContentAd() {
-            return mNativeContentAd;
-        }
-
-        /**
-         * @return {@link #mNativeAppInstallAd}.
-         */
-        public NativeAppInstallAd getAppInstallAd() {
-            return mNativeAppInstallAd;
-        }
-
-        /**
-         * This method will load native ads from Google for the given ad unit ID.
-         *
-         * @param context  required to request a Google native ad.
-         * @param adUnitId Google's AdMob Ad Unit ID.
-         */
-        public void loadAd(final Context context, String adUnitId,
-                Map<String, Object> localExtras) {
-            AdLoader.Builder builder = new AdLoader.Builder(context, adUnitId);
-
-            // Get the experimental swap margins extra.
-            if (localExtras.containsKey(KEY_EXPERIMENTAL_EXTRA_SWAP_MARGINS)) {
-                Object swapMarginExtra = localExtras.get(KEY_EXPERIMENTAL_EXTRA_SWAP_MARGINS);
-                if (swapMarginExtra instanceof Boolean) {
-                    mSwapMargins = (boolean) swapMarginExtra;
-                }
-            }
-
-            NativeAdOptions.Builder optionsBuilder = new NativeAdOptions.Builder();
-
-            // MoPub requires the images to be pre-cached using their APIs, so we do not want
-            // Google to download the image assets.
-            optionsBuilder.setReturnUrlsForImageAssets(true);
-
-            // MoPub allows for only one image, so only request for one image.
-            optionsBuilder.setRequestMultipleImages(false);
-
-            // Get the preferred image orientation from the local extras.
-            if (localExtras.containsKey(KEY_EXTRA_ORIENTATION_PREFERENCE)
-                    && isValidOrientationExtra(localExtras.get(KEY_EXTRA_ORIENTATION_PREFERENCE))) {
-                optionsBuilder.setImageOrientation(
-                        (int) localExtras.get(KEY_EXTRA_ORIENTATION_PREFERENCE));
-            }
-
-            // Get the preferred AdChoices icon placement from the local extras.
-            if (localExtras.containsKey(KEY_EXTRA_AD_CHOICES_PLACEMENT)
-                    && isValidAdChoicesPlacementExtra(
-                    localExtras.get(KEY_EXTRA_AD_CHOICES_PLACEMENT))) {
-                optionsBuilder.setAdChoicesPlacement(
-                        (int) localExtras.get(KEY_EXTRA_AD_CHOICES_PLACEMENT));
-            }
-            NativeAdOptions adOptions = optionsBuilder.build();
-
-            AdLoader adLoader =
-                    builder.forContentAd(new NativeContentAd.OnContentAdLoadedListener() {
-                        @Override
-                        public void onContentAdLoaded(final NativeContentAd nativeContentAd) {
-                            if (!isValidContentAd(nativeContentAd)) {
-                                Log.i(TAG, "The Google native content ad is missing one or more "
-                                        + "required assets, failing request.");
-                                mCustomEventNativeListener.onNativeAdFailed(
-                                        NativeErrorCode.INVALID_RESPONSE);
-                                return;
-                            }
-
-                            mNativeContentAd = nativeContentAd;
-                            List<com.google.android.gms.ads.formats.NativeAd.Image> images =
-                                    nativeContentAd.getImages();
-                            List<String> imageUrls = new ArrayList<>();
-                            // Only one image should be in the the list as we turned off request
-                            // for multiple images.
-                            com.google.android.gms.ads.formats.NativeAd.Image mainImage =
-                                    images.get(0);
-                            // Assuming that the URI provided is an URL.
-                            imageUrls.add(mainImage.getUri().toString());
-
-                            com.google.android.gms.ads.formats.NativeAd.Image logoImage =
-                                    nativeContentAd.getLogo();
-                            // Assuming that the URI provided is an URL.
-                            imageUrls.add(logoImage.getUri().toString());
-                            preCacheImages(context, imageUrls);
-                        }
-                    }).forAppInstallAd(new NativeAppInstallAd.OnAppInstallAdLoadedListener() {
-                        @Override
-                        public void onAppInstallAdLoaded(
-                                final NativeAppInstallAd nativeAppInstallAd) {
-                            if (!isValidAppInstallAd(nativeAppInstallAd)) {
-                                Log.i(TAG, "The Google native app install ad is missing one or "
-                                        + "more required assets, failing request.");
-                                mCustomEventNativeListener.onNativeAdFailed(
-                                        NativeErrorCode.INVALID_RESPONSE);
-                                return;
-                            }
-                            mNativeAppInstallAd = nativeAppInstallAd;
-                            List<com.google.android.gms.ads.formats.NativeAd.Image> images =
-                                    nativeAppInstallAd.getImages();
-                            List<String> imageUrls = new ArrayList<>();
-                            // Only one image should be in the the list as we turned off request
-                            // for multiple images.
-                            com.google.android.gms.ads.formats.NativeAd.Image mainImage =
-                                    images.get(0);
-                            // Assuming that the URI provided is an URL.
-                            imageUrls.add(mainImage.getUri().toString());
-
-                            com.google.android.gms.ads.formats.NativeAd.Image iconImage =
-                                    nativeAppInstallAd.getIcon();
-                            // Assuming that the URI provided is an URL.
-                            imageUrls.add(iconImage.getUri().toString());
-                            preCacheImages(context, imageUrls);
-                        }
-                    }).withAdListener(new AdListener() {
-                        @Override
-                        public void onAdClicked() {
-                            super.onAdClicked();
-                            GooglePlayServicesNativeAd.this.notifyAdClicked();
-                        }
-
-                        @Override
-                        public void onAdImpression() {
-                            super.onAdImpression();
-                            GooglePlayServicesNativeAd.this.notifyAdImpressed();
-                        }
-
-                        @Override
-                        public void onAdFailedToLoad(int errorCode) {
-                            super.onAdFailedToLoad(errorCode);
-                            switch (errorCode) {
-                                case AdRequest.ERROR_CODE_INTERNAL_ERROR:
-                                    mCustomEventNativeListener.onNativeAdFailed(
-                                            NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
-                                    break;
-                                case AdRequest.ERROR_CODE_INVALID_REQUEST:
-                                    mCustomEventNativeListener.onNativeAdFailed(
-                                            NativeErrorCode.NETWORK_INVALID_REQUEST);
-                                    break;
-                                case AdRequest.ERROR_CODE_NETWORK_ERROR:
-                                    mCustomEventNativeListener.onNativeAdFailed(
-                                            NativeErrorCode.CONNECTION_ERROR);
-                                    break;
-                                case AdRequest.ERROR_CODE_NO_FILL:
-                                    mCustomEventNativeListener.onNativeAdFailed(
-                                            NativeErrorCode.NETWORK_NO_FILL);
-                                    break;
-                                default:
-                                    mCustomEventNativeListener.onNativeAdFailed(
-                                            NativeErrorCode.UNSPECIFIED);
-                            }
-                        }
-                    }).withNativeAdOptions(adOptions).build();
-            adLoader.loadAd(new AdRequest.Builder().setRequestAgent("MoPub").build());
-        }
-
-        /**
-         * This method will check whether or not the provided extra value can be mapped to
-         * NativeAdOptions' orientation constants.
-         *
-         * @param extra to be checked if it is valid.
-         * @return {@code true} if the extra can be mapped to one of {@link NativeAdOptions}
-         * orientation constants, {@code false} otherwise.
-         */
-        private boolean isValidOrientationExtra(Object extra) {
-            if (extra == null || !(extra instanceof Integer)) {
-                return false;
-            }
-            Integer preference = (Integer) extra;
-            return (preference == NativeAdOptions.ORIENTATION_ANY
-                    || preference == NativeAdOptions.ORIENTATION_LANDSCAPE
-                    || preference == NativeAdOptions.ORIENTATION_PORTRAIT);
-        }
-
-        /**
-         * Checks whether or not the provided extra value can be mapped to NativeAdOptions'
-         * AdChoices icon placement constants.
-         *
-         * @param extra to be checked if it is valid.
-         * @return {@code true} if the extra can be mapped to one of {@link NativeAdOptions}
-         * AdChoices icon placement constants, {@code false} otherwise.
-         */
-        private boolean isValidAdChoicesPlacementExtra(Object extra) {
-            if (extra == null || !(extra instanceof Integer)) {
-                return false;
-            }
-            Integer placement = (Integer) extra;
-            return (placement == NativeAdOptions.ADCHOICES_TOP_LEFT
-                    || placement == NativeAdOptions.ADCHOICES_TOP_RIGHT
-                    || placement == NativeAdOptions.ADCHOICES_BOTTOM_LEFT
-                    || placement == NativeAdOptions.ADCHOICES_BOTTOM_RIGHT);
-        }
-
-        /**
-         * This method will check whether or not the given content ad has all the required assets
-         * (title, text, main image url, icon url and call to action) for it to be correctly
-         * mapped to a {@link GooglePlayServicesNativeAd}.
-         *
-         * @param contentAd to be checked if it is valid.
-         * @return {@code true} if the given native content ad has all the necessary assets to
-         * create a {@link GooglePlayServicesNativeAd}, {@code false} otherwise.
-         */
-        private boolean isValidContentAd(NativeContentAd contentAd) {
-            return (contentAd.getHeadline() != null && contentAd.getBody() != null
-                    && contentAd.getImages() != null && contentAd.getImages().size() > 0
-                    && contentAd.getImages().get(0) != null && contentAd.getLogo() != null
-                    && contentAd.getCallToAction() != null);
-        }
-
-        /**
-         * This method will check whether or not the given native app install ad has all the
-         * required assets (title, text, main image url, icon url and call to action) for it to
-         * be correctly mapped to a {@link GooglePlayServicesNativeAd}.
-         *
-         * @param appInstallAd to checked if it is valid.
-         * @return {@code true} if the given native app install ad has all the necessary assets to
-         * to create a {@link GooglePlayServicesNativeAd}, {@code false} otherwise.
-         */
-        private boolean isValidAppInstallAd(NativeAppInstallAd appInstallAd) {
-            return (appInstallAd.getHeadline() != null && appInstallAd.getBody() != null
-                    && appInstallAd.getImages() != null && appInstallAd.getImages().size() > 0
-                    && appInstallAd.getImages().get(0) != null && appInstallAd.getIcon() != null
-                    && appInstallAd.getCallToAction() != null);
-        }
-
-        @Override
-        public void prepare(@NonNull View view) {
-            // Adding click and impression trackers is handled by the GooglePlayServicesRenderer,
-            // do nothing here.
-        }
-
-        @Override
-        public void clear(@NonNull View view) {
-            // Called when an ad is no longer displayed to a user.
-            GooglePlayServicesAdRenderer.removeGoogleNativeAdView(view, shouldSwapMargins());
-        }
-
-        @Override
-        public void destroy() {
-            // Called when the ad will never be displayed again.
-            if (mNativeContentAd != null) {
-                mNativeContentAd.destroy();
-            }
-            if (mNativeAppInstallAd != null) {
-                mNativeAppInstallAd.destroy();
-            }
-        }
-
-        /**
-         * This method will try to cache images and send success/failure callbacks based on
-         * whether or not the image caching succeeded.
-         *
-         * @param context   required to pre-cache images.
-         * @param imageUrls the urls of images that need to be cached.
-         */
-        private void preCacheImages(Context context, List<String> imageUrls) {
-            NativeImageHelper.preCacheImages(context, imageUrls,
-                    new NativeImageHelper.ImageListener() {
-                        @Override
-                        public void onImagesCached() {
-                            if (mNativeContentAd != null) {
-                                prepareNativeContentAd(mNativeContentAd);
-                                mCustomEventNativeListener.onNativeAdLoaded(
-                                        GooglePlayServicesNativeAd.this);
-                            } else if (mNativeAppInstallAd != null) {
-                                prepareNativeAppInstallAd(mNativeAppInstallAd);
-                                mCustomEventNativeListener.onNativeAdLoaded(
-                                        GooglePlayServicesNativeAd.this);
-                            }
-                        }
-
-                        @Override
-                        public void onImagesFailedToCache(NativeErrorCode errorCode) {
-                            mCustomEventNativeListener.onNativeAdFailed(errorCode);
-                        }
-                    });
-        }
-
-        /**
-         * This method will map the Google native content ad loaded to this
-         * {@link GooglePlayServicesNativeAd}.
-         *
-         * @param contentAd that needs to be mapped to this native ad.
-         */
-        private void prepareNativeContentAd(NativeContentAd contentAd) {
-            List<com.google.android.gms.ads.formats.NativeAd.Image> images = contentAd.getImages();
-            setMainImageUrl(images.get(0).getUri().toString());
-
-            com.google.android.gms.ads.formats.NativeAd.Image logo = contentAd.getLogo();
-            setIconImageUrl(logo.getUri().toString());
-
-            setCallToAction(contentAd.getCallToAction().toString());
-
-            setTitle(contentAd.getHeadline().toString());
-
-            setText(contentAd.getBody().toString());
-
-            setAdvertiser(contentAd.getAdvertiser().toString());
-        }
-
-        /**
-         * This method will map the Google native app install ad loaded to this
-         * {@link GooglePlayServicesNativeAd}.
-         *
-         * @param appInstallAd that needs to be mapped to this native ad.
-         */
-        private void prepareNativeAppInstallAd(NativeAppInstallAd appInstallAd) {
-            List<com.google.android.gms.ads.formats.NativeAd.Image> images =
-                    appInstallAd.getImages();
-            setMainImageUrl(images.get(0).getUri().toString());
-
-            com.google.android.gms.ads.formats.NativeAd.Image icon = appInstallAd.getIcon();
-            setIconImageUrl(icon.getUri().toString());
-
-            setCallToAction(appInstallAd.getCallToAction().toString());
-
-            setTitle(appInstallAd.getHeadline().toString());
-
-            setText(appInstallAd.getBody().toString());
-
-            if (appInstallAd.getStarRating() != null) {
-                setStarRating(appInstallAd.getStarRating());
-            }
-
-            // Add store asset if available.
-            if (appInstallAd.getStore() != null) {
-                setStore(appInstallAd.getStore().toString());
-            }
-
-            // Add price asset if available.
-            if (appInstallAd.getPrice() != null) {
-                setPrice(appInstallAd.getPrice().toString());
-            }
-        }
-    }
-}
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java
index 3a1b987b..ee1483c6 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java
@@ -28,6 +28,7 @@
 import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.MRECT;
 import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.RECYCLER_VIEW;
 import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.REWARDED_VIDEO;
+import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.MANUAL_NATIVE;
 
 class AdUnitDataSource {
     private Context mContext;
@@ -173,6 +174,11 @@ private void deleteAllAdUnitsWithAdUnitIdAndAdType(@NonNull final String adUnitI
                         .Builder(mContext.getString(R.string.ad_unit_id_native), CUSTOM_NATIVE)
                         .description("MoPub View Pager Sample")
                         .build());
+        adUnitList.add(
+                new MoPubSampleAdUnit
+                        .Builder(mContext.getString(R.string.ad_unit_id_native), MANUAL_NATIVE)
+                        .description("MoPub Native Manual Sample")
+                        .build());
         return adUnitList;
     }
 
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
index ea3bb0d3..0d3654cb 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
@@ -26,7 +26,8 @@
         REWARDED_VIDEO("Rewarded Video", RewardedVideoDetailFragment.class),
         LIST_VIEW("Native List View", NativeListViewFragment.class),
         RECYCLER_VIEW("Native Recycler View", NativeRecyclerViewFragment.class),
-        CUSTOM_NATIVE("Native Gallery (Custom Stream)", NativeGalleryFragment.class);
+        CUSTOM_NATIVE("Native Gallery (Custom Stream)", NativeGalleryFragment.class),
+        MANUAL_NATIVE("Native (Manual)", NativeDetailFragment.class);
 
         String getName() {
             return name;
@@ -78,6 +79,8 @@ static AdType fromDeeplinkString(@Nullable final String adType) {
                     return RECYCLER_VIEW;
                 case "nativecollectionplacer":
                     return CUSTOM_NATIVE;
+                case "nativemanual":
+                    return MANUAL_NATIVE;
                 default:
                     return null;
             }
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeDetailFragment.java
new file mode 100644
index 00000000..deab42a5
--- /dev/null
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeDetailFragment.java
@@ -0,0 +1,158 @@
+package com.mopub.simpleadsdemo;
+
+import android.app.Activity;
+import android.location.Location;
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.app.FragmentStatePagerAdapter;
+import android.support.v4.view.ViewPager;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.mopub.nativeads.AdapterHelper;
+import com.mopub.nativeads.MediaViewBinder;
+import com.mopub.nativeads.MoPubAdRenderer;
+import com.mopub.nativeads.MoPubNative;
+import com.mopub.nativeads.MoPubNativeAdLoadedListener;
+import com.mopub.nativeads.MoPubStaticNativeAdRenderer;
+import com.mopub.nativeads.MoPubStreamAdPlacer;
+import com.mopub.nativeads.MoPubVideoNativeAdRenderer;
+import com.mopub.nativeads.NativeAd;
+import com.mopub.nativeads.NativeErrorCode;
+import com.mopub.nativeads.RequestParameters;
+import com.mopub.nativeads.ViewBinder;
+
+import java.util.EnumSet;
+
+import static com.mopub.nativeads.RequestParameters.NativeAdAsset;
+
+public class NativeDetailFragment extends Fragment {
+    private MoPubSampleAdUnit mAdConfiguration;
+    private MoPubNative moPubNative;
+
+    private AdapterHelper adapterHelper;
+    private RequestParameters mRequestParameters;
+    private MoPubNative.MoPubNativeNetworkListener moPubNativeNetworkListener;
+
+    @Override
+    public View onCreateView(final LayoutInflater inflater, final ViewGroup container,
+            final Bundle savedInstanceState) {
+        super.onCreateView(inflater, container, savedInstanceState);
+        mAdConfiguration = MoPubSampleAdUnit.fromBundle(getArguments());
+        final View view = inflater.inflate(R.layout.native_detail_fragment, container, false);
+        final RelativeLayout nativeAdView = (RelativeLayout) view.findViewById(R.id.native_ad_view);
+        final DetailFragmentViewHolder views = DetailFragmentViewHolder.fromView(view);
+        views.mLoadButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                // If your app already has location access, include it here.
+                final Location location = null;
+                final String keywords = views.mKeywordsField.getText().toString();
+                final String userDataKeywords = views.mUserDataKeywordsField.getText().toString();
+
+                // Setting desired assets on your request helps native ad networks and bidders
+                // provide higher-quality ads.
+                final EnumSet<NativeAdAsset> desiredAssets = EnumSet.of(
+                        NativeAdAsset.TITLE,
+                        NativeAdAsset.TEXT,
+                        NativeAdAsset.ICON_IMAGE,
+                        NativeAdAsset.MAIN_IMAGE,
+                        NativeAdAsset.CALL_TO_ACTION_TEXT,
+                        NativeAdAsset.STAR_RATING
+                );
+
+                mRequestParameters = new RequestParameters.Builder()
+                        .location(location)
+                        .keywords(keywords)
+                        .userDataKeywords(userDataKeywords)
+                        .desiredAssets(desiredAssets)
+                        .build();
+
+                moPubNative.makeRequest(mRequestParameters);
+
+            }
+        });
+
+        final String adUnitId = mAdConfiguration.getAdUnitId();
+        views.mDescriptionView.setText(mAdConfiguration.getDescription());
+        views.mAdUnitIdView.setText(adUnitId);
+        views.mKeywordsField.setText(getArguments().getString(MoPubListFragment.KEYWORDS_KEY, ""));
+        views.mUserDataKeywordsField.setText(getArguments().getString(MoPubListFragment.USER_DATA_KEYWORDS_KEY, ""));
+
+        moPubNative = new MoPubNative(getActivity(), mAdConfiguration.getAdUnitId(), new MoPubNative.MoPubNativeNetworkListener() {
+            @Override
+            public void onNativeLoad(final NativeAd nativeAd) {
+                Log.d("MoPub", "Native ad has loaded.");
+                // Set the native event listeners (onImpression, and onClick).
+                nativeAd.setMoPubNativeEventListener(new NativeAd.MoPubNativeEventListener() {
+                    @Override
+                    public void onImpression(View view) {
+                        Log.d("MoPub", "Native ad recorded an impression.");
+                    }
+
+                    @Override
+                    public void onClick(View view) {
+                        Log.d("MoPub", "Native ad recorded a click.");
+                    }
+                });
+
+                View adView = adapterHelper.getAdView(null, null, nativeAd, new ViewBinder.Builder(0).build());
+                nativeAdView.addView(adView);
+            }
+
+            @Override
+            public void onNativeFail(NativeErrorCode errorCode) {
+                Log.d("MoPub", "Native ad failed to load with error: " + errorCode.toString());
+            }
+        });
+
+        // Set up a renderer for a static native ad.
+        final MoPubStaticNativeAdRenderer moPubStaticNativeAdRenderer = new MoPubStaticNativeAdRenderer(
+                new ViewBinder.Builder(R.layout.native_ad_list_item)
+                        .titleId(R.id.native_title)
+                        .textId(R.id.native_text)
+                        .mainImageId(R.id.native_main_image)
+                        .iconImageId(R.id.native_icon_image)
+                        .callToActionId(R.id.native_cta)
+                        .privacyInformationIconImageId(R.id.native_privacy_information_icon_image)
+                        .build()
+        );
+
+        // Set up a renderer for a video native ad.
+        final MoPubVideoNativeAdRenderer moPubVideoNativeAdRenderer = new MoPubVideoNativeAdRenderer(
+                new MediaViewBinder.Builder(R.layout.video_ad_list_item)
+                        .titleId(R.id.native_title)
+                        .textId(R.id.native_text)
+                        .mediaLayoutId(R.id.native_media_layout)
+                        .iconImageId(R.id.native_icon_image)
+                        .callToActionId(R.id.native_cta)
+                        .privacyInformationIconImageId(R.id.native_privacy_information_icon_image)
+                        .build());
+
+        moPubNative.registerAdRenderer(moPubStaticNativeAdRenderer);
+        moPubNative.registerAdRenderer(moPubVideoNativeAdRenderer);
+
+        adapterHelper = new AdapterHelper(getActivity(), 0, 3); // When standalone, any range will be fine.
+
+        return view;
+    }
+
+    @Override
+    public void onDestroyView() {
+        // You must call this or the ad adapter may cause a memory leak.
+        moPubNative.destroy();
+        super.onDestroyView();
+    }
+
+    @Override
+    public void onResume() {
+        // MoPub recommends reloading ads when the user returns to a view.
+        super.onResume();
+    }
+
+}
diff --git a/mopub-sdk/shared-build.gradle b/mopub-sdk/shared-build.gradle
index d808ee9b..9aca8f01 100644
--- a/mopub-sdk/shared-build.gradle
+++ b/mopub-sdk/shared-build.gradle
@@ -14,7 +14,7 @@ project.version = '5.2.0'
 
 android {
     compileSdkVersion 26
-    buildToolsVersion '26.0.2'
+//    buildToolsVersion '26.0.2'
     lintOptions { abortOnError false }
     useLibrary 'org.apache.http.legacy'
 
