diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
index f1aaa888..f504c798 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
@@ -1,6 +1,5 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
 import android.content.Context;
 import android.os.Handler;
 import android.support.annotation.NonNull;
@@ -90,50 +89,50 @@ public void onAdRemoved(final int position) {
      * wish to hard-code positions in your app, see {@link MoPubStreamAdPlacer(Context,
      * MoPubClientPositioning)}.
      *
-     * @param activity The activity.
+     * @param context The context.
      */
-    public MoPubStreamAdPlacer(@NonNull final Activity activity) {
+    public MoPubStreamAdPlacer(@NonNull final Context context) {
         // MoPubClientPositioning is mutable, so we must take care not to hold a
         // reference to it that might be subsequently modified by the caller.
-        this(activity, MoPubNativeAdPositioning.serverPositioning());
+        this(context, MoPubNativeAdPositioning.serverPositioning());
     }
 
     /**
      * Creates a new MoPubStreamAdPlacer object, using server positioning.
      *
-     * @param activity The activity.
+     * @param context The context.
      * @param adPositioning A positioning object for specifying where ads will be placed in your
      * stream. See {@link MoPubNativeAdPositioning#serverPositioning()}.
      */
-    public MoPubStreamAdPlacer(@NonNull final Activity activity,
+    public MoPubStreamAdPlacer(@NonNull final Context context,
             @NonNull final MoPubServerPositioning adPositioning) {
-        this(activity, new NativeAdSource(), new ServerPositioningSource(activity));
+        this(context, new NativeAdSource(), new ServerPositioningSource(context));
     }
 
     /**
      * Creates a new MoPubStreamAdPlacer object, using client positioning.
      *
-     * @param activity The activity.
+     * @param context The context.
      * @param adPositioning A positioning object for specifying where ads will be placed in your
      * stream. See {@link MoPubNativeAdPositioning#clientPositioning()}.
      */
-    public MoPubStreamAdPlacer(@NonNull final Activity activity,
+    public MoPubStreamAdPlacer(@NonNull final Context context,
             @NonNull final MoPubClientPositioning adPositioning) {
         // MoPubClientPositioning is mutable, so we must take care not to hold a
         // reference to it that might be subsequently modified by the caller.
-        this(activity, new NativeAdSource(), new ClientPositioningSource(adPositioning));
+        this(context, new NativeAdSource(), new ClientPositioningSource(adPositioning));
     }
 
     @VisibleForTesting
-    MoPubStreamAdPlacer(@NonNull final Activity activity,
+    MoPubStreamAdPlacer(@NonNull final Context context,
             @NonNull final NativeAdSource adSource,
             @NonNull final PositioningSource positioningSource) {
-        Preconditions.checkNotNull(activity, "activity is not allowed to be null");
+        Preconditions.checkNotNull(context, "context is not allowed to be null");
         Preconditions.checkNotNull(adSource, "adSource is not allowed to be null");
         Preconditions.checkNotNull(positioningSource, "positioningSource is not allowed to be " +
                 "null");
 
-        context = activity;
+        this.context = context;
         mPositioningSource = positioningSource;
         mAdSource = adSource;
         mPlacementData = PlacementData.empty();
@@ -357,7 +356,7 @@ public void clearAds() {
     /**
      * Destroys the ad placer, preventing it from future use.
      *
-     * You must call this method before the hosting activity for this class is destroyed in order to
+     * You must call this method before the hosting context for this class is destroyed in order to
      * avoid a memory leak. Typically you should destroy the adapter in the life-cycle method that
      * is counterpoint to the method you used to create the adapter. For example, if you created the
      * adapter in {@code Fragment#onCreateView} you should destroy it in {code
