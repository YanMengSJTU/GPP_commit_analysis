diff --git a/CHANGELOG.md b/CHANGELOG.md
index acc61b39..00f6290c 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,9 @@
+## Version 4.11.0 (November 10, 2016)
+- Added a workaround for an Android bug where Lollipop devices (Android 5.1.1, API level 22) and lower incorrectly handle SSL connections using Server Name Identification.
+- Rewarded video `load()` calls now do not load another rewarded video with the same ad unit id while one is already loading or loaded.
+- Moved the VAST video start tracker to immediately after the video starts (was 2 seconds after the video started).
+- Bug fixes.
+
 ## Version 4.10.0 (October 18, 2016)
 - **Added and updated mediated network versions**
   - Added Flurry version 6.5.0. All Flurry adapters can be found in the corresponding `extras` directory (`/extras/src/com/mopub/mobileads` for banners and interstitials, `/extras/src/com/mopub/nativeads` for native).
@@ -5,7 +11,6 @@
     - Banners: `FlurryCustomEventBanner`
     - Interstitial: `FlurryCustomEventInterstitial`
     - Native: `FlurryCustomEventNative`, `FlurryBaseNativeAd`, `FlurryNativeAdRenderer`, and `FlurryViewBinder`
-  - Certified Google Play Services 9.4.0
   - Certified Facebook Audience Network version 4.15.0  
   - Certified Tapjoy version 11.8.2
   - Certified Millennial Media version 6.3.0
diff --git a/README.md b/README.md
index c830cc7c..be76ca00 100644
--- a/README.md
+++ b/README.md
@@ -27,7 +27,7 @@ The MoPub SDK is available via:
     }
 
     dependencies {
-        compile('com.mopub:mopub-sdk:4.10.0@aar') {
+        compile('com.mopub:mopub-sdk:4.11.0@aar') {
             transitive = true
         }
     }
@@ -48,27 +48,27 @@ The MoPub SDK is available via:
         // ... other project dependencies
 
         // For banners
-        compile('com.mopub:mopub-sdk-banner:4.10.0@aar') {
+        compile('com.mopub:mopub-sdk-banner:4.11.0@aar') {
             transitive = true
         }
         
         // For interstitials
-        compile('com.mopub:mopub-sdk-interstitial:4.10.0@aar') {
+        compile('com.mopub:mopub-sdk-interstitial:4.11.0@aar') {
             transitive = true
         }
 
         // For rewarded videos. This will automatically also include interstitials
-        compile('com.mopub:mopub-sdk-rewardedvideo:4.10.0@aar') {
+        compile('com.mopub:mopub-sdk-rewardedvideo:4.11.0@aar') {
             transitive = true
         }
 
         // For native static (images).
-        compile('com.mopub:mopub-sdk-native-static:4.10.0@aar') {
+        compile('com.mopub:mopub-sdk-native-static:4.11.0@aar') {
             transitive = true
         }
 
         // For native video. This will automatically also include native static
-        compile('com.mopub:mopub-sdk-native-video:4.10.0@aar') {
+        compile('com.mopub:mopub-sdk-native-video:4.11.0@aar') {
             transitive = true
         }
     }
@@ -96,19 +96,10 @@ The MoPub SDK is available via:
 ## New in this Version
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for a complete list of additions, fixes, and enhancements in the latest release.
 
-- **Added and updated mediated network versions**
-  - Added Flurry version 6.5.0. All Flurry adapters can be found in the corresponding `extras` directory (`/extras/src/com/mopub/mobileads` for banners and interstitials, `/extras/src/com/mopub/nativeads` for native).
-    - All Flurry ad formats must include: `FlurryAgentWrapper`
-    - Banners: `FlurryCustomEventBanner`
-    - Interstitial: `FlurryCustomEventInterstitial`
-    - Native: `FlurryCustomEventNative`, `FlurryBaseNativeAd`, `FlurryNativeAdRenderer`, and `FlurryViewBinder`
-  - Certified Google Play Services 9.4.0
-  - Certified Facebook Audience Network version 4.15.0  
-  - Certified Tapjoy version 11.8.2
-  - Certified Millennial Media version 6.3.0
-  - Certified Vungle version 4.0.2  
-- Fixed intermittent `IllegalStateException` for MRAID creatives attemping to retrieve getRootView() on unattached Views.
-- Updated `mopub-sample`'s example `proguard.cfg` to properly retain methods called only via reflection.
+- Added a workaround for an Android bug where Lollipop devices (Android 5.1.1, API level 22) and lower incorrectly handle SSL connections using Server Name Identification.
+- Rewarded video `load()` calls now do not load another rewarded video with the same ad unit id while one is already loading or loaded.
+- Moved the VAST video start tracker to immediately after the video starts (was 2 seconds after the video started).
+- Bug fixes.
 
 - **Note:** Maven builds from source are currently unstable and will be reinstated in a future release. Maven developers can still pull the MoPub SDK AAR from JCenter.
 
diff --git a/extras/src/com/mopub/nativeads/MillennialNative.java b/extras/src/com/mopub/nativeads/MillennialNative.java
index 03a6abc2..29411d97 100644
--- a/extras/src/com/mopub/nativeads/MillennialNative.java
+++ b/extras/src/com/mopub/nativeads/MillennialNative.java
@@ -20,6 +20,10 @@
 
 import static com.mopub.nativeads.NativeImageHelper.preCacheImages;
 
+/**
+ * Compatible with version 6.3 of the Millennial Media SDK.
+ */
+
 public class MillennialNative extends CustomEventNative {
     public static final String DCN_KEY = "dcn";
     public static final String APID_KEY = "adUnitID";
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index a7a25e5d..0cd8cc88 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.mopub.simpleadsdemo"
-      android:versionCode="47"
-      android:versionName="4.10.0">
+      android:versionCode="48"
+      android:versionName="4.11.0">
     <uses-sdk android:minSdkVersion="9"
               android:targetSdkVersion="23"/>
 
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index 587ee1f7..e1d18cc6 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -9,7 +9,7 @@ apply plugin: 'com.android.application'
 
 project.group = 'com.mopub'
 project.description = '''MoPub Sample App'''
-project.version = '4.10.0'
+project.version = '4.11.0'
 
 android {
     compileSdkVersion 23
@@ -17,7 +17,7 @@ android {
     lintOptions { abortOnError false }
 
     defaultConfig {
-        versionCode 47
+        versionCode 48
         versionName version
         minSdkVersion 9
         targetSdkVersion 23
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
index b74804c0..8c3356c4 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
@@ -11,7 +11,7 @@
 import java.lang.reflect.Method;
 
 public class MoPub {
-    public static final String SDK_VERSION = "4.10.0";
+    public static final String SDK_VERSION = "4.11.0";
 
     public enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdRequestStatusMapping.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdRequestStatusMapping.java
index 10d6625b..d86c7ac9 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdRequestStatusMapping.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdRequestStatusMapping.java
@@ -5,7 +5,7 @@
 import android.text.TextUtils;
 
 import com.mopub.common.Preconditions;
-import com.mopub.network.AdRequest;
+import com.mopub.common.VisibleForTesting;
 
 import java.util.Map;
 import java.util.TreeMap;
@@ -98,6 +98,12 @@ void clearClickUrl(@NonNull final String adUnitId) {
         }
     }
 
+    @Deprecated
+    @VisibleForTesting
+    void clearMapping() {
+        mAdUnitToAdRequestStatus.clear();
+    }
+
     private static enum LoadingStatus { LOADING, LOADED, PLAYED }
     private static class AdRequestStatus {
         @NonNull
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java
index 6852e38e..78997180 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java
@@ -51,7 +51,7 @@
     private static final String SKIP = "skip";
 
     private static final int CREATIVE_VIEW_TRACKER_THRESHOLD = 0;
-    private static final int START_TRACKER_THRESHOLD = 2000;
+    private static final int START_TRACKER_THRESHOLD = 0;
     private static final float FIRST_QUARTER_MARKER = 0.25f;
     private static final float MID_POINT_MARKER = 0.50f;
     private static final float THIRD_QUARTER_MARKER = 0.75f;
@@ -142,7 +142,7 @@
     List<VastAbsoluteProgressTracker> getAbsoluteProgressTrackers() {
         List<VastAbsoluteProgressTracker> trackers = new ArrayList<VastAbsoluteProgressTracker>();
 
-        // Start trackers are treated as absolute trackers with a 2s offset.
+        // Start trackers are treated as absolute trackers set at 0 seconds
         final List<String> startTrackers = getVideoTrackersByAttribute(START);
         for (String url : startTrackers) {
             trackers.add(new VastAbsoluteProgressTracker(url, START_TRACKER_THRESHOLD));
@@ -178,9 +178,12 @@
             final List<Node> creativeViewNodes = XmlUtils.getMatchingChildNodes(trackingEvents,
                     VIDEO_TRACKER, EVENT, Collections.singletonList(CREATIVE_VIEW));
             for (Node creativeViewNode : creativeViewNodes) {
-                trackers.add(
-                        new VastAbsoluteProgressTracker(XmlUtils.getNodeValue(creativeViewNode),
-                                CREATIVE_VIEW_TRACKER_THRESHOLD));
+                final String creativeNodeValue = XmlUtils.getNodeValue(creativeViewNode);
+                if (creativeNodeValue != null) {
+                    trackers.add(
+                            new VastAbsoluteProgressTracker(creativeNodeValue,
+                                    CREATIVE_VIEW_TRACKER_THRESHOLD));
+                }
             }
         }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/CustomSSLSocketFactory.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/CustomSSLSocketFactory.java
index 21c48ac1..087f864e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/CustomSSLSocketFactory.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/CustomSSLSocketFactory.java
@@ -1,12 +1,24 @@
 package com.mopub.network;
 
 import android.net.SSLCertificateSocketFactory;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Reflection;
 
 import java.io.IOException;
 import java.net.InetAddress;
 import java.net.Socket;
+import java.net.SocketException;
 import java.net.UnknownHostException;
 
+import javax.net.ssl.HostnameVerifier;
+import javax.net.ssl.HttpsURLConnection;
+import javax.net.ssl.SSLHandshakeException;
 import javax.net.ssl.SSLSocket;
 import javax.net.ssl.SSLSocketFactory;
 
@@ -15,10 +27,11 @@
  */
 public class CustomSSLSocketFactory extends SSLSocketFactory {
 
-    private SSLSocketFactory mCertificateSocketFactory;
+    @Nullable private SSLSocketFactory mCertificateSocketFactory;
 
     private CustomSSLSocketFactory() {}
 
+    @NonNull
     public static CustomSSLSocketFactory getDefault(final int handshakeTimeoutMillis) {
         CustomSSLSocketFactory factory = new CustomSSLSocketFactory();
         factory.mCertificateSocketFactory = SSLCertificateSocketFactory.getDefault(handshakeTimeoutMillis, null);
@@ -31,6 +44,9 @@ public static CustomSSLSocketFactory getDefault(final int handshakeTimeoutMillis
     // SocketFactory overrides
     @Override
     public Socket createSocket() throws IOException {
+        if (mCertificateSocketFactory == null) {
+            throw new SocketException("SSLSocketFactory was null. Unable to create socket.");
+        }
         final Socket socket = mCertificateSocketFactory.createSocket();
         enableTlsIfAvailable(socket);
         return socket;
@@ -38,6 +54,9 @@ public Socket createSocket() throws IOException {
 
     @Override
     public Socket createSocket(final String host, final int i) throws IOException, UnknownHostException {
+        if (mCertificateSocketFactory == null) {
+            throw new SocketException("SSLSocketFactory was null. Unable to create socket.");
+        }
         final Socket socket = mCertificateSocketFactory.createSocket(host, i);
         enableTlsIfAvailable(socket);
         return socket;
@@ -45,6 +64,9 @@ public Socket createSocket(final String host, final int i) throws IOException, U
 
     @Override
     public Socket createSocket(final String host, final int port, final InetAddress localhost, final int localPort) throws IOException, UnknownHostException {
+        if (mCertificateSocketFactory == null) {
+            throw new SocketException("SSLSocketFactory was null. Unable to create socket.");
+        }
         final Socket socket = mCertificateSocketFactory.createSocket(host, port, localhost, localPort);
         enableTlsIfAvailable(socket);
         return socket;
@@ -52,6 +74,9 @@ public Socket createSocket(final String host, final int port, final InetAddress
 
     @Override
     public Socket createSocket(final InetAddress address, final int port) throws IOException {
+        if (mCertificateSocketFactory == null) {
+            throw new SocketException("SSLSocketFactory was null. Unable to create socket.");
+        }
         final Socket socket = mCertificateSocketFactory.createSocket(address, port);
         enableTlsIfAvailable(socket);
         return socket;
@@ -59,6 +84,9 @@ public Socket createSocket(final InetAddress address, final int port) throws IOE
 
     @Override
     public Socket createSocket(final InetAddress address, final int port, final InetAddress localhost, final int localPort) throws IOException {
+        if (mCertificateSocketFactory == null) {
+            throw new SocketException("SSLSocketFactory was null. Unable to create socket.");
+        }
         final Socket socket = mCertificateSocketFactory.createSocket(address, port, localhost, localPort);
         enableTlsIfAvailable(socket);
         return socket;
@@ -68,22 +96,105 @@ public Socket createSocket(final InetAddress address, final int port, final Inet
 
     @Override
     public String[] getDefaultCipherSuites() {
+        if (mCertificateSocketFactory == null) {
+            return new String[]{};
+        }
         return mCertificateSocketFactory.getDefaultCipherSuites();
     }
 
     @Override
     public String[] getSupportedCipherSuites() {
+        if (mCertificateSocketFactory == null) {
+            return new String[]{};
+        }
         return mCertificateSocketFactory.getSupportedCipherSuites();
     }
 
     @Override
     public Socket createSocket(final Socket socketParam, final String host, final int port, final boolean autoClose) throws IOException {
-        Socket socket = mCertificateSocketFactory.createSocket(socketParam, host, port, autoClose);
+        if (mCertificateSocketFactory == null) {
+            throw new SocketException("SSLSocketFactory was null. Unable to create socket.");
+        }
+
+        // Don't use the original socket and create a new one. This closes the original socket
+        // if the autoClose flag is set.
+        if (autoClose && socketParam != null) {
+            socketParam.close();
+        }
+
+        final Socket socket = mCertificateSocketFactory.createSocket(
+                InetAddressUtils.getInetAddressByName(host), port);
         enableTlsIfAvailable(socket);
+        doManualServerNameIdentification(socket, host);
         return socket;
     }
 
-    private void enableTlsIfAvailable(Socket socket) {
+    /**
+     * Some versions of Android fail to do server name identification (SNI) even though they are
+     * able to. This method forces SNI to happen, if possible. SNI is only used in https
+     * connections, and this method will no-op for http connections. This method throws an
+     * SSLHandshakeException if SNI fails. This method may also throw other socket-related
+     * IOExceptions.
+     *
+     * @param socket The socket to do SNI on
+     * @param host   The host to verify the server name
+     * @throws IOException
+     */
+    private void doManualServerNameIdentification(@NonNull final Socket socket,
+            @Nullable final String host) throws IOException {
+        Preconditions.checkNotNull(socket);
+
+        if (mCertificateSocketFactory == null) {
+            throw new SocketException("SSLSocketFactory was null. Unable to create socket.");
+        }
+
+        if (socket instanceof SSLSocket) {
+            final SSLSocket sslSocket = (SSLSocket) socket;
+            setHostnameOnSocket((SSLCertificateSocketFactory) mCertificateSocketFactory, sslSocket,
+                    host);
+            verifyServerName(sslSocket, host);
+        }
+    }
+
+    /**
+     * Calling setHostname on a socket turns on the server name identification feature.
+     * Unfortunately, this was introduced in Android version 17, so we do what we can.
+     */
+    @VisibleForTesting
+    static void setHostnameOnSocket(@NonNull final SSLCertificateSocketFactory certificateSocketFactory,
+            @NonNull final SSLSocket sslSocket, @Nullable final String host) {
+        Preconditions.checkNotNull(certificateSocketFactory);
+        Preconditions.checkNotNull(sslSocket);
+
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+            certificateSocketFactory.setHostname(sslSocket, host);
+        } else {
+            try {
+                new Reflection.MethodBuilder(sslSocket, "setHostname")
+                        .addParam(String.class, host)
+                        .execute();
+            } catch (Exception e) {
+                MoPubLog.d("Unable to call setHostname() on the socket");
+            }
+        }
+    }
+
+    /**
+     * This actually performs server name identification.
+     */
+    @VisibleForTesting
+    static void verifyServerName(@NonNull final SSLSocket sslSocket,
+            @Nullable final String host) throws IOException {
+        Preconditions.checkNotNull(sslSocket);
+
+        sslSocket.startHandshake();
+        final HostnameVerifier hostnameVerifier = HttpsURLConnection.getDefaultHostnameVerifier();
+        if (!hostnameVerifier.verify(host, sslSocket.getSession())) {
+            throw new SSLHandshakeException("Server Name Identification failed.");
+        }
+    }
+
+    private void enableTlsIfAvailable(@Nullable Socket socket) {
         if (socket instanceof SSLSocket) {
             SSLSocket sslSocket = (SSLSocket) socket;
             String[] supportedProtocols = sslSocket.getSupportedProtocols();
@@ -92,4 +203,10 @@ private void enableTlsIfAvailable(Socket socket) {
             sslSocket.setEnabledProtocols(supportedProtocols);
         }
     }
+
+    @Deprecated
+    @VisibleForTesting
+    void setCertificateSocketFactory(@NonNull final SSLSocketFactory sslSocketFactory) {
+        mCertificateSocketFactory = sslSocketFactory;
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/InetAddressUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/InetAddressUtils.java
new file mode 100644
index 00000000..b522e707
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/InetAddressUtils.java
@@ -0,0 +1,20 @@
+package com.mopub.network;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+
+/**
+ * This class exists to wrap InetAddress static calls since java.net classes cannot be mocked
+ */
+public class InetAddressUtils {
+    @NonNull
+    public static InetAddress getInetAddressByName(@Nullable final String host) throws UnknownHostException {
+        return InetAddress.getByName(host);
+    }
+
+    private InetAddressUtils() {
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
index 23eb60f6..80c50c7b 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
@@ -237,6 +237,20 @@ public static void loadVideo(@NonNull final String adUnitId,
             return;
         }
 
+        if (sInstance.mAdRequestStatus.canPlay(adUnitId)) {
+            MoPubLog.d(String.format(Locale.US, "Did not queue rewarded video request for ad " +
+            "unit %s. This ad unit already finished loading and is ready to show.", adUnitId));
+            postToInstance(new Runnable() {
+                @Override
+                public void run() {
+                    if (sInstance.mVideoListener != null) {
+                        sInstance.mVideoListener.onRewardedVideoLoadSuccess(adUnitId);
+                    }
+                }
+            });
+            return;
+        }
+
 
         // If any instance MediationSettings have been specified, update the internal map.
         // Note: This always clears the MediationSettings for the ad unit, whether or not any
@@ -711,4 +725,14 @@ static RewardedVideoData getRewardedVideoData() {
         }
         return null;
     }
+
+    @Deprecated
+    @VisibleForTesting
+    @Nullable
+    static AdRequestStatusMapping getAdRequestStatusMapping() {
+        if (sInstance != null) {
+            return sInstance.mAdRequestStatus;
+        }
+        return null;
+    }
 }
diff --git a/mopub-sdk/publisher.gradle b/mopub-sdk/publisher.gradle
index ee0f09ea..2744493a 100644
--- a/mopub-sdk/publisher.gradle
+++ b/mopub-sdk/publisher.gradle
@@ -58,6 +58,5 @@ publish {
     bintrayUser = project.hasProperty("bintray.user") ? project.getProperty("bintray.user") : ""
     bintrayKey = project.hasProperty("bintray.apikey") ? project.getProperty("bintray.apikey") : ""
 
-    autoPublish = true
     dryRun = false
 }
diff --git a/mopub-sdk/shared-build.gradle b/mopub-sdk/shared-build.gradle
index 93504a59..1669e9e4 100644
--- a/mopub-sdk/shared-build.gradle
+++ b/mopub-sdk/shared-build.gradle
@@ -9,7 +9,7 @@ repositories {
 }
 
 project.group = 'com.mopub'
-project.version = '4.10.0'
+project.version = '4.11.0'
 
 android {
 	compileSdkVersion 24
@@ -18,12 +18,11 @@ android {
 	useLibrary 'org.apache.http.legacy'
 
 	defaultConfig {
-		versionCode 47
+		versionCode 48
 		versionName version
 		minSdkVersion 9
 		targetSdkVersion 24
 		consumerProguardFiles '../proguard.txt'
-
 	}
 
 	sourceSets {
diff --git a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
index 6e4f5a3a..23ca26ca 100644
--- a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
+++ b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
@@ -1,3 +1,3 @@
 fabric-identifier=com.mopub.sdk.android:mopub
-fabric-version=4.10.0+kit
+fabric-version=4.11.0+kit
 fabric-build-type=source
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
index 112b3ff3..24e0e4db 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
@@ -84,6 +84,7 @@ public void tearDown() {
         // Unpause the main looper in case a test terminated while the looper was paused.
         ShadowLooper.unPauseMainLooper();
         MoPubRewardedVideoManager.getRewardedVideoData().clear();
+        MoPubRewardedVideoManager.getAdRequestStatusMapping().clearMapping();
     }
 
     @Test
@@ -241,7 +242,7 @@ public void onAdSuccess_shouldInstantiateCustomEvent_andLoad() {
     }
 
     @Test
-    public void onAdSuccess_withCustomEventAlreadyLoaded_shouldInvalidateOldCustomEvent() throws Exception {
+    public void loadVideo_withCustomEventAlreadyLoaded_shouldNotLoadAnotherVideo() throws Exception {
         final CustomEventRewardedVideo mockCustomEvent = mock(CustomEventRewardedVideo.class);
         MoPubRewardedVideoManager.getRewardedVideoData().updateAdUnitCustomEventMapping(
                 "testAdUnit", mockCustomEvent, null, TestCustomEvent.AD_NETWORK_ID);
@@ -266,24 +267,22 @@ public void onAdSuccess_withCustomEventAlreadyLoaded_shouldInvalidateOldCustomEv
         assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
         verify(mockVideoListener).onRewardedVideoLoadSuccess(eq("testAdUnit"));
         verifyNoMoreInteractions(mockVideoListener);
+        verify(mockRequestQueue).add(any(Request.class));
         reset(mockVideoListener);
 
         ShadowLooper.pauseMainLooper();
 
         // Load the second custom event
         MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        requestListener.onSuccess(testResponse);
 
         ShadowLooper.unPauseMainLooper();
 
-        // Verify the second custom event was loaded
+        // Verify the first custom event is still available
         assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
         verify(mockVideoListener).onRewardedVideoLoadSuccess(eq("testAdUnit"));
         verifyNoMoreInteractions(mockVideoListener);
-
-        // Verify that the first custom event was invalidated
-        verify(mockCustomEvent).onInvalidate();
-        verifyNoMoreInteractions(mockCustomEvent);
+        // Make sure the second load does not attempt to load another ad
+        verifyNoMoreInteractions(mockRequestQueue);
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java
new file mode 100644
index 00000000..bee53d27
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java
@@ -0,0 +1,478 @@
+package com.mopub.mobileads;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.test.support.VastUtils;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+import org.w3c.dom.Node;
+
+import java.util.List;
+
+import static com.mopub.mobileads.test.support.VastUtils.createNode;
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class VastLinearXmlManagerTest {
+
+    private VastLinearXmlManager subject;
+    private Node linearNode;
+
+    @Before
+    public void setup() throws Exception {
+        String linearXml = "<Linear skipoffset=\"25%\">" +
+                "<Duration>00:00:58</Duration>" +
+                "<TrackingEvents>" +
+                "    <Tracking event=\"creativeView\">" +
+                "        <![CDATA[" +
+                "        https://creativeView/one" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"creativeView\">" +
+                "        <![CDATA[" +
+                "        https://creativeView/two" +
+                "        ]]>" +
+                "    </Tracking>" +
+                // Ensure empty creativeView event is ignored
+                "    <Tracking event=\"creativeView\"/>" +
+                "    <Tracking event=\"start\">" +
+                "        <![CDATA[" +
+                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"progress\" offset=\"13%\">" +
+                "        <![CDATA[" +
+                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"progress\" offset=\"01:01:10.300\">" +
+                "        <![CDATA[" +
+                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                // Invalid tracking due to ambiguous offset.
+                "    <Tracking event=\"progress\" offset=\"01:01\">" +
+                "        <![CDATA[" +
+                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                // Invalid tracking due to a too-high percentage offset.
+                "    <Tracking event=\"progress\" offset=\"113%\">" +
+                "        <![CDATA[" +
+                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                // Invalid tracking due to a negative percentage offset.
+                "    <Tracking event=\"progress\" offset=\"-113%\">" +
+                "        <![CDATA[" +
+                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                // Invalid tracking due to a non-number offset
+                "    <Tracking event=\"progress\" offset=\"ten seconds\">" +
+                "        <![CDATA[" +
+                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"midpoint\">" +
+                "        <![CDATA[" +
+                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"midpoint\">" +
+                "        <![CDATA[" +
+                "        https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"firstQuartile\">" +
+                "        <![CDATA[" +
+                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"firstQuartile\">" +
+                "        <![CDATA[" +
+                "        https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"thirdQuartile\">" +
+                "        <![CDATA[" +
+                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"thirdQuartile\">" +
+                "        <![CDATA[" +
+                "        https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"complete\">" +
+                "        <![CDATA[" +
+                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=13;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"complete\">" +
+                "        <![CDATA[" +
+                "        https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.5;sz=1x1;ord=2922389?" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"close\">" +
+                "        <![CDATA[" +
+                "        https://www.mopub.com/close?q=ignatius" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"close\">" +
+                "        <![CDATA[" +
+                "        https://www.mopub.com/close?q=j3" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"closeLinear\">" +
+                "        <![CDATA[" +
+                "        https://www.mopub.com/closeLinear" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"skip\">" +
+                "        <![CDATA[" +
+                "        https://www.mopub.com/skip?q=ignatius" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"skip\">" +
+                "        <![CDATA[" +
+                "        https://www.mopub.com/skip?q=j3" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"mute\">" +
+                "        <![CDATA[" +
+                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=16;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"pause\">" +
+                "        <![CDATA[" +
+                "        https://www.mopub.com/pause?num=1" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"pause\">" +
+                "        <![CDATA[" +
+                "        https://www.mopub.com/pause?num=2" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"resume\">" +
+                "        <![CDATA[" +
+                "        https://www.mopub.com/resume?num=1" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"resume\">" +
+                "        <![CDATA[" +
+                "        https://www.mopub.com/resume?num=2" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"fullscreen\">" +
+                "        <![CDATA[" +
+                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=19;ecn1=1;etm1=0;" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "    <Tracking event=\"fullscreen\">" +
+                "        <![CDATA[" +
+                "        https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.6;sz=1x1;ord=2922389?" +
+                "        ]]>" +
+                "    </Tracking>" +
+                "</TrackingEvents>" +
+                "<AdParameters/>" +
+                "<VideoClicks>" +
+                "    <ClickThrough>" +
+                "        <![CDATA[ https://www.google.com/support/richmedia ]]>" +
+                "    </ClickThrough>" +
+                "    <ClickTracking id=\"DART\">" +
+                "        <![CDATA[" +
+                "        https://ad.doubleclick.net/click%3Bh%3Dv8/3e1b/3/0/%2a/z%3B223626102%3B0-0%3B0%3B47414672%3B255-0/0%3B30477563/30495440/1%3B%3B%7Eaopt%3D0/0/ff/0%3B%7Esscs%3D%3fhttp://s0.2mdn.net/dot.gif" +
+                "        ]]>" +
+                "    </ClickTracking>" +
+                "    <ClickTracking id=\"ThirdParty\">" +
+                "        <![CDATA[" +
+                "        https://ad.doubleclick.net/clk;212442087;33815766;i?https://www.google.com/support/richmedia" +
+                "        ]]>" +
+                "    </ClickTracking>" +
+                "</VideoClicks>" +
+                "<MediaFiles>" +
+                "    <MediaFile id=\"1\" delivery=\"progressive\" type=\"video/quicktime\" bitrate=\"457\"" +
+                "               width=\"300\" height=\"225\">" +
+                "        <![CDATA[" +
+                "        https://s3.amazonaws.com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
+                "        ]]>" +
+                "    </MediaFile>" +
+                "    <MediaFile id=\"2\" delivery=\"progressive\" type=\"video/quicktime\" bitrate=\"457\"" +
+                "               width=\"300\" height=\"225\">" +
+                "        <![CDATA[" +
+                "        https://s3.amazonaws.com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny_2.mp4" +
+                "        ]]>" +
+                "    </MediaFile>" +
+                "</MediaFiles>" +
+                "<Icons>" +
+                "    <Icon program=\"program\" width=\"123\" height=\"234\" xPosition=\"789\" " +
+                "    yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
+                "    duration=\"01:02:03.456\">" +
+                "        <StaticResource creativeType=\"ImAge/JpEg\">" +
+                "           <![CDATA[staticResource1]]>" +
+                "        </StaticResource>" +
+                "    </Icon>" +
+                "    <Icon program=\"program\" width=\"123\" height=\"234\" xPosition=\"789\" " +
+                "    yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
+                "    duration=\"01:02:03.456\">" +
+                "        <StaticResource creativeType=\"ImAge/JpEg\">" +
+                "           <![CDATA[staticResource2]]>" +
+                "        </StaticResource>" +
+                "    </Icon>" +
+                "</Icons>" +
+                "</Linear>";
+
+        linearNode = createNode(linearXml);
+    }
+
+    @Test
+    public void getFractionalTrackers_shouldReturnCorrectValues() {
+        subject = new VastLinearXmlManager(linearNode);
+        List<VastFractionalProgressTracker> trackers = subject.getFractionalProgressTrackers();
+
+        assertThat(trackers.size()).isEqualTo(7);
+
+        VastFractionalProgressTracker tracker0 = trackers.get(0);
+        assertThat(tracker0.trackingFraction()).isEqualTo(0.13f);
+        assertThat(tracker0.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+
+        VastFractionalProgressTracker tracker1 = trackers.get(1);
+        assertThat(tracker1.trackingFraction()).isEqualTo(0.25f);
+        assertThat(tracker1.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;");
+
+        VastFractionalProgressTracker tracker2 = trackers.get(2);
+        assertThat(tracker2.trackingFraction()).isEqualTo(0.25f);
+        assertThat(tracker2.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?");
+
+        VastFractionalProgressTracker tracker3 = trackers.get(3);
+        assertThat(tracker3.trackingFraction()).isEqualTo(0.5f);
+        assertThat(tracker3.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;");
+
+        VastFractionalProgressTracker tracker4 = trackers.get(4);
+        assertThat(tracker4.trackingFraction()).isEqualTo(0.5f);
+        assertThat(tracker4.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?");
+
+        VastFractionalProgressTracker tracker5 = trackers.get(5);
+        assertThat(tracker5.trackingFraction()).isEqualTo(0.75f);
+        assertThat(tracker5.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;");
+
+        VastFractionalProgressTracker tracker6 = trackers.get(6);
+        assertThat(tracker6.trackingFraction()).isEqualTo(0.75f);
+        assertThat(tracker6.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?");
+    }
+
+    @Test
+    public void getAbsoluteProgressTrackers_shouldReturnCorrectValues() {
+        subject = new VastLinearXmlManager(linearNode);
+        List<VastAbsoluteProgressTracker> trackers = subject.getAbsoluteProgressTrackers();
+
+        assertThat(trackers.size()).isEqualTo(4);
+
+        VastAbsoluteProgressTracker tracker0 = trackers.get(0);
+        assertThat(tracker0.getTrackingMilliseconds()).isEqualTo(0);
+        assertThat(tracker0.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+
+        VastAbsoluteProgressTracker tracker1 = trackers.get(1);
+        assertThat(tracker1.getTrackingMilliseconds()).isEqualTo(0);
+        assertThat(tracker1.getTrackingUrl()).isEqualTo("https://creativeView/one");
+
+        VastAbsoluteProgressTracker tracker2 = trackers.get(2);
+        assertThat(tracker2.getTrackingMilliseconds()).isEqualTo(0);
+        assertThat(tracker2.getTrackingUrl()).isEqualTo("https://creativeView/two");
+
+        VastAbsoluteProgressTracker tracker3 = trackers.get(3);
+        assertThat(tracker3.getTrackingMilliseconds()).isEqualTo(3670300);
+        assertThat(tracker3.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;" +
+                "src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;" +
+                "rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+    }
+
+    @Test
+    public void getVideoCompleteTrackers_shouldReturnTheCorrectValue() {
+        subject = new VastLinearXmlManager(linearNode);
+        assertThat(VastUtils.vastTrackersToStrings(subject.getVideoCompleteTrackers()))
+                .containsOnly("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=13;ecn1=1;etm1=0;",
+                        "https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.5;sz=1x1;ord=2922389?");
+    }
+
+    @Test
+    public void getVideoCloseTrackers_shouldReturnTheCorrectValue() {
+        subject = new VastLinearXmlManager(linearNode);
+        assertThat(VastUtils.vastTrackersToStrings(subject.getVideoCloseTrackers()))
+                .containsOnly("https://www.mopub.com/close?q=ignatius",
+                        "https://www.mopub.com/close?q=j3",
+                        "https://www.mopub.com/closeLinear");
+    }
+
+    @Test
+    public void getPauseTrackers_shouldReturnRepeatableVastTrackers() {
+        subject = new VastLinearXmlManager(linearNode);
+        for (VastTracker vastTracker : subject.getPauseTrackers()) {
+            assertThat(vastTracker.isRepeatable());
+        }
+        assertThat(VastUtils.vastTrackersToStrings(subject.getPauseTrackers()))
+                .containsOnly("https://www.mopub.com/pause?num=1",
+                        "https://www.mopub.com/pause?num=2");
+    }
+
+    @Test
+    public void getResumeTrackers_shouldReturnRepeatableVastTrackers() {
+        subject = new VastLinearXmlManager(linearNode);
+        for (VastTracker vastTracker : subject.getResumeTrackers()) {
+            assertThat(vastTracker.isRepeatable());
+        }
+        assertThat(VastUtils.vastTrackersToStrings(subject.getResumeTrackers()))
+                .containsOnly("https://www.mopub.com/resume?num=1",
+                        "https://www.mopub.com/resume?num=2");
+    }
+
+    @Test
+    public void getVideoSkipTrackers_shouldReturnTheCorrectValue() {
+        subject = new VastLinearXmlManager(linearNode);
+        assertThat(VastUtils.vastTrackersToStrings(subject.getVideoSkipTrackers()))
+                .containsOnly("https://www.mopub.com/skip?q=ignatius",
+                        "https://www.mopub.com/skip?q=j3");
+    }
+
+    @Test
+    public void getClickThroughUrl_shouldReturnTheCorrectValue() {
+        subject = new VastLinearXmlManager(linearNode);
+        String url = subject.getClickThroughUrl();
+
+        assertThat(url).isEqualTo("https://www.google.com/support/richmedia");
+    }
+
+    @Test
+    public void getClickTrackers_shouldReturnTheCorrectValue() {
+        subject = new VastLinearXmlManager(linearNode);
+        assertThat(VastUtils.vastTrackersToStrings(subject.getClickTrackers()))
+                .containsOnly("https://ad.doubleclick" +
+                                ".net/click%3Bh%3Dv8/3e1b/3/0/%2a/z%3B223626102%3B0-0%3B0" +
+                                "%3B47414672%3B255-0/0%3B30477563/30495440/1%3B%3B%7Eaopt%3D0/0" +
+                                "/ff/0%3B%7Esscs%3D%3fhttp://s0.2mdn.net/dot.gif",
+                        "https://ad.doubleclick.net/clk;212442087;33815766;i?https://www.google" +
+                                ".com/support/richmedia");
+    }
+
+    @Test
+    public void getSkipOffset_shouldReturnTheCorrectValue() {
+        subject = new VastLinearXmlManager(linearNode);
+        String skipOffset = subject.getSkipOffset();
+
+        assertThat(skipOffset).isEqualTo("25%");
+    }
+
+    @Test
+    public void getSkipOffset_withNoSkipOffsetAttribute_shouldReturnNull() throws Exception {
+        String linearXml = "<Linear>" +
+                "</Linear>";
+
+        Node linearNode = createNode(linearXml);
+        subject = new VastLinearXmlManager(linearNode);
+
+        assertThat(subject.getSkipOffset()).isNull();
+    }
+
+    @Test
+    public void getSkipOffset_withNoSkipOffsetAttributeValue_shouldReturnNull() throws Exception {
+        String linearXml = "<Linear skipoffset=\"\">" +
+                "</Linear>";
+
+        Node linearNode = createNode(linearXml);
+        subject = new VastLinearXmlManager(linearNode);
+
+        assertThat(subject.getSkipOffset()).isNull();
+    }
+
+    @Test
+    public void getMediaXmlManagers_shouldReturnMediaXmlManagers() {
+        subject = new VastLinearXmlManager(linearNode);
+        List<VastMediaXmlManager> mediaXmlManagers = subject.getMediaXmlManagers();
+
+        assertThat(mediaXmlManagers.size()).isEqualTo(2);
+
+        assertThat(mediaXmlManagers.get(0).getMediaUrl()).isEqualTo("https://s3.amazonaws" +
+                ".com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4");
+        assertThat(mediaXmlManagers.get(1).getMediaUrl()).isEqualTo("https://s3.amazonaws" +
+                ".com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny_2.mp4");
+    }
+
+    @Test
+    public void getMediaXmlManagers_withNoMediaFileNode_shouldReturnEmptyList() throws Exception {
+        String linearXml = "<Linear skipoffset=\"25%\">" +
+                "    <MediaFiles>" +
+                "    </MediaFiles>" +
+                "</Linear>";
+
+        Node linearNode = createNode(linearXml);
+        subject = new VastLinearXmlManager(linearNode);
+
+        List<VastMediaXmlManager> mediaXmlManagers = subject.getMediaXmlManagers();
+        assertThat(mediaXmlManagers).isEmpty();
+    }
+
+    @Test
+    public void getMediaXmlManagers_withNoMediaFilesNode_shouldReturnEmptyList() throws Exception {
+        String linearXml = "<Linear skipoffset=\"25%\">" +
+                "    <MediaFile id=\"1\" delivery=\"progressive\" type=\"video/quicktime\" bitrate=\"457\"" +
+                "               width=\"300\" height=\"225\">" +
+                "        <![CDATA[" +
+                "        https://s3.amazonaws.com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
+                "        ]]>" +
+                "    </MediaFile>" +
+                "</Linear>";
+
+        Node linearNode = createNode(linearXml);
+        subject = new VastLinearXmlManager(linearNode);
+
+        List<VastMediaXmlManager> mediaXmlManagers = subject.getMediaXmlManagers();
+        assertThat(mediaXmlManagers).isEmpty();
+    }
+
+    @Test
+    public void getIconXmlManagers_shouldReturnIconXmlManagers() throws Exception {
+        subject = new VastLinearXmlManager(linearNode);
+        List<VastIconXmlManager> iconXmlManagers = subject.getIconXmlManagers();
+
+        assertThat(iconXmlManagers).hasSize(2);
+        assertThat(iconXmlManagers.get(0).getResourceXmlManager().getStaticResource())
+                .isEqualTo("staticResource1");
+        assertThat(iconXmlManagers.get(1).getResourceXmlManager().getStaticResource())
+                .isEqualTo("staticResource2");
+    }
+
+    @Test
+    public void getIconXmlManagers_withNoIconNode_shouldReturnEmptyList() throws Exception {
+        String linearXml = "<Linear skipoffset=\"25%\">" +
+                "    <Icons>" +
+                "    </Icons>" +
+                "</Linear>";
+
+        Node linearNode = createNode(linearXml);
+        subject = new VastLinearXmlManager(linearNode);
+
+        assertThat(subject.getIconXmlManagers()).isEmpty();
+    }
+
+    @Test
+    public void getIconXmlManagers_withNoIconsNode_shouldReturnEmptyList() throws Exception {
+        String linearXml = "<Linear skipoffset=\"25%\">" +
+                "    <Icon program=\"program\" width=\"123\" height=\"234\" xPosition=\"789\" " +
+                "    yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
+                "    duration=\"01:02:03.456\">" +
+                "        <StaticResource creativeType=\"ImAge/JpEg\">" +
+                "           <![CDATA[staticResource1]]>" +
+                "        </StaticResource>" +
+                "    </Icon>" +
+                "</Linear>";
+
+        Node linearNode = createNode(linearXml);
+        subject = new VastLinearXmlManager(linearNode);
+
+        assertThat(subject.getIconXmlManagers()).isEmpty();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java
new file mode 100644
index 00000000..7f0d8b98
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java
@@ -0,0 +1,605 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+
+import com.mopub.common.CacheService;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.DeviceUtils;
+import com.mopub.common.util.test.support.ShadowMoPubHttpUrlConnection;
+import com.mopub.mobileads.test.support.VastUtils;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowLooper;
+
+import java.util.concurrent.Semaphore;
+
+import static com.mopub.mobileads.VastManager.VastManagerListener;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.doAnswer;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class, shadows = {ShadowMoPubHttpUrlConnection.class})
+public class VastManagerTest {
+    static final String EXTENSIONS_SNIPPET_PLACEHOLDER = "<![CDATA[EXTENSIONS_SNIPPET]]>";
+    static final String TEST_VAST_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>https://dsp.x-team.staging.mopub.com/xml</VASTAdTagURI><Impression>https://myTrackingURL/wrapper/impression1</Impression><Impression>https://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>https://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>https://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>https://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='progress' offset='00:00:03.100'>https://myTrackingURL/wrapper/progress</Tracking><Tracking event='firstQuartile'>https://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>https://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>https://myTrackingURL/wrapper/complete</Tracking><Tracking event='close'>https://myTrackingURL/wrapper/close</Tracking><Tracking event='skip'>https://myTrackingURL/wrapper/skip</Tracking><Tracking event='mute'>https://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>https://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>https://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>https://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>https://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>https://myTrackingURL/wrapper/click</ClickTracking></VideoClicks></Linear></Creative><Creative AdID=\"601364-Companion\"> <CompanionAds><Companion width=\"9000\"></Companion> </CompanionAds></Creative></Creatives><![CDATA[EXTENSIONS_SNIPPET]]><Error><![CDATA[https://wrapperErrorTracker]]></Error></Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>https://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>https://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
+    static final String TEST_NESTED_VAST_XML_STRING = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><VAST version='2.0'><Ad id='57722'><InLine><AdSystem version='1.0'>Tapad</AdSystem><AdTitle><![CDATA[PKW6T_LIV_DSN_Audience_TAPAD_3rd Party Audience Targeting_Action Movi]]></AdTitle><Description/><Impression><![CDATA[https://rtb-test.dev.tapad.com:8080/creative/imp.png?ts=1374099035457&svid=1&creative_id=30731&ctx_type=InApp&ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&liverail_cp=1]]></Impression><Creatives><Creative sequence='1' id='57722'><Linear><TrackingEvents><Tracking event='close'>https://myTrackingURL/wrapper/nested_close</Tracking><Tracking event='skip'>https://myTrackingURL/wrapper/nested_skip</Tracking></TrackingEvents><Duration>00:00:15</Duration><VideoClicks><ClickThrough><![CDATA[https://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=https%3A%2F%2Ftapad.com]]></ClickThrough></VideoClicks><MediaFiles><MediaFile delivery='progressive' bitrate='416' width='800' height='480' type='video/mp4'><![CDATA[https://s3.amazonaws.com/mopub-vast/tapad-video.mp4]]></MediaFile><MediaFile delivery='progressive' bitrate='416' width='300' height='250' type='video/mp4'><![CDATA[https://s3.amazonaws.com/mopub-vast/tapad-video1.mp4]]></MediaFile></MediaFiles></Linear></Creative><Creative AdID=\"601364-Companion\"><CompanionAds><Companion id=\"valid\" height=\"250\" width=\"300\"><StaticResource creativeType=\"image/jpeg\">https://demo.tremormedia.com/proddev/vast/Blistex1.jpg</StaticResource><TrackingEvents><Tracking event=\"creativeView\">https://myTrackingURL/firstCompanionCreativeView</Tracking><Tracking event=\"creativeView\">https://myTrackingURL/secondCompanionCreativeView</Tracking></TrackingEvents><CompanionClickThrough>https://www.tremormedia.com</CompanionClickThrough><CompanionClickTracking><![CDATA[https://companionClickTracking1]]></CompanionClickTracking><CompanionClickTracking><![CDATA[https://companionClickTracking2]]></CompanionClickTracking></Companion></CompanionAds></Creative></Creatives><![CDATA[EXTENSIONS_SNIPPET]]><Error><![CDATA[https://inLineErrorTracker]]></Error></InLine></Ad></VAST>";
+    static final String TEST_VAST_BAD_NEST_URL_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>https://dsp.x-team.staging.mopub.com/xml\"$|||</VASTAdTagURI><Impression>https://myTrackingURL/wrapper/impression1</Impression><Impression>https://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>https://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>https://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>https://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='firstQuartile'>https://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>https://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>https://myTrackingURL/wrapper/complete</Tracking><Tracking event='mute'>https://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>https://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>https://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>https://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>https://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>https://myTrackingURL/wrapper/click</ClickTracking></VideoClicks></Linear></Creative></Creatives></Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>https://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>https://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
+
+    private VastManager subject;
+    private VastManagerListener vastManagerListener;
+    private Activity context;
+    private VastVideoConfig mVastVideoConfig;
+    private Semaphore semaphore;
+    private String dspCreativeId;
+
+    @Before
+    public void setup() {
+        context = Robolectric.buildActivity(Activity.class).create().get();
+        CacheService.initializeDiskCache(context);
+        subject = new VastManager(context, true);
+        dspCreativeId = "dspCreativeId";
+        semaphore = new Semaphore(0);
+        vastManagerListener = mock(VastManagerListener.class);
+        doAnswer(new Answer() {
+            @Override
+            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
+                Object[] args = invocationOnMock.getArguments();
+                VastManagerTest.this.mVastVideoConfig = (VastVideoConfig) args[0];
+                semaphore.release();
+                return null;
+            }
+        }).when(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+    }
+
+    @After
+    public void tearDown() {
+        CacheService.clearAndNullCaches();
+    }
+
+    private void prepareVastVideoConfiguration() {
+        subject.prepareVastVideoConfiguration(TEST_VAST_XML_STRING, vastManagerListener, dspCreativeId, context);
+
+        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
+        ShadowLooper.runUiThreadTasks();
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_shouldNotifyTheListenerAndContainTheCorrectVastValues() throws Exception {
+        // Vast redirect responses
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING);
+        // Video download response
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+
+        assertThat(mVastVideoConfig.getNetworkMediaFileUrl()).isEqualTo("https://s3.amazonaws.com/mopub-vast/tapad-video.mp4");
+
+        final String expectedFilePathDiskCache = CacheService.getFilePathDiskCache(mVastVideoConfig.getNetworkMediaFileUrl());
+        assertThat(mVastVideoConfig.getDiskMediaFileUrl()).isEqualTo(expectedFilePathDiskCache);
+
+        assertThat(mVastVideoConfig.getClickThroughUrl()).isEqualTo("https://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=https%3A%2F%2Ftapad.com");
+        assertThat(mVastVideoConfig.getImpressionTrackers().size()).isEqualTo(5);
+
+        // Verify quartile trackers
+        assertThat(mVastVideoConfig.getFractionalTrackers().size()).isEqualTo(3);
+        assertThat(mVastVideoConfig.getFractionalTrackers().get(0).trackingFraction()).isEqualTo(0.25f);
+        assertThat(mVastVideoConfig.getFractionalTrackers().get(1).trackingFraction()).isEqualTo(0.5f);
+        assertThat(mVastVideoConfig.getFractionalTrackers().get(2).trackingFraction()).isEqualTo(0.75f);
+
+        // Verify start tracker.
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().size()).isEqualTo(3);
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(0).getTrackingMilliseconds())
+                .isEqualTo(0);
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(1).getTrackingMilliseconds())
+                .isEqualTo(0);
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(2).getTrackingMilliseconds())
+                .isEqualTo(3100);
+
+        assertThat(mVastVideoConfig.getCompleteTrackers().size()).isEqualTo(1);
+
+        // We specifically added a close tracker and a skip tracker to the nested vast test case as well,
+        // therefore there are two expected trackers total for each type.
+        assertThat(mVastVideoConfig.getCloseTrackers().size()).isEqualTo(2);
+        assertThat(mVastVideoConfig.getSkipTrackers().size()).isEqualTo(2);
+        assertThat(mVastVideoConfig.getClickTrackers().size()).isEqualTo(1);
+
+        final VastCompanionAdConfig vastCompanionAdConfig = mVastVideoConfig.getVastCompanionAd(
+                context.getResources().getConfiguration().orientation);
+        assertThat(vastCompanionAdConfig.getWidth()).isEqualTo(300);
+        assertThat(vastCompanionAdConfig.getHeight()).isEqualTo(250);
+        assertThat(vastCompanionAdConfig.getVastResource().getResource())
+                .isEqualTo("https://demo.tremormedia.com/proddev/vast/Blistex1.jpg");
+        assertThat(vastCompanionAdConfig.getVastResource().getType())
+                .isEqualTo(VastResource.Type.STATIC_RESOURCE);
+        assertThat(vastCompanionAdConfig.getVastResource().getCreativeType())
+                .isEqualTo(VastResource.CreativeType.IMAGE);
+        assertThat(vastCompanionAdConfig.getClickThroughUrl()).isEqualTo("https://www.tremormedia.com");
+
+        assertThat(VastUtils.vastTrackersToStrings(vastCompanionAdConfig.getClickTrackers()))
+                .containsOnly("https://companionClickTracking1",
+                        "https://companionClickTracking2");
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_shouldHandleMultipleRedirects() throws Exception {
+        // Vast redirect responses
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_VAST_XML_STRING);
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_VAST_XML_STRING);
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING);
+        // Video download response
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig
+                .class));
+
+        // at this point it should have 3 sets of data from TEST_VAST_XML_STRING and one set from TEST_NESTED_VAST_XML_STRING
+        assertThat(mVastVideoConfig.getNetworkMediaFileUrl()).isEqualTo("https://s3.amazonaws.com/mopub-vast/tapad-video.mp4");
+        final String expectedFilePathDiskCache = CacheService.getFilePathDiskCache(mVastVideoConfig.getNetworkMediaFileUrl());
+        assertThat(mVastVideoConfig.getDiskMediaFileUrl()).isEqualTo(expectedFilePathDiskCache);
+
+        assertThat(mVastVideoConfig.getClickThroughUrl()).isEqualTo("https://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=https%3A%2F%2Ftapad.com");
+        assertThat(mVastVideoConfig.getImpressionTrackers().size()).isEqualTo(13);
+
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().size()).isEqualTo(9);
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(0).getTrackingMilliseconds()).isEqualTo(0);
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(1).getTrackingMilliseconds()).isEqualTo(0);
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(2).getTrackingMilliseconds()).isEqualTo(0);
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(3).getTrackingMilliseconds()).isEqualTo(0);
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(4).getTrackingMilliseconds()).isEqualTo(0);
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(5).getTrackingMilliseconds()).isEqualTo(0);
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(6).getTrackingMilliseconds()).isEqualTo(3100);
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(7).getTrackingMilliseconds()).isEqualTo(3100);
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(8).getTrackingMilliseconds()).isEqualTo(3100);
+
+
+        assertThat(mVastVideoConfig.getFractionalTrackers().size()).isEqualTo(9);
+        assertThat(mVastVideoConfig.getFractionalTrackers().get(0).trackingFraction()).isEqualTo(0.25f);
+        assertThat(mVastVideoConfig.getFractionalTrackers().get(1).trackingFraction()).isEqualTo(0.25f);
+        assertThat(mVastVideoConfig.getFractionalTrackers().get(2).trackingFraction()).isEqualTo(0.25f);
+        assertThat(mVastVideoConfig.getFractionalTrackers().get(3).trackingFraction()).isEqualTo(0.5f);
+        assertThat(mVastVideoConfig.getFractionalTrackers().get(4).trackingFraction()).isEqualTo(0.5f);
+        assertThat(mVastVideoConfig.getFractionalTrackers().get(5).trackingFraction()).isEqualTo(0.5f);
+        assertThat(mVastVideoConfig.getFractionalTrackers().get(6).trackingFraction()).isEqualTo(0.75f);
+        assertThat(mVastVideoConfig.getFractionalTrackers().get(7).trackingFraction()).isEqualTo(0.75f);
+        assertThat(mVastVideoConfig.getFractionalTrackers().get(8).trackingFraction()).isEqualTo(0.75f);
+
+        assertThat(mVastVideoConfig.getCompleteTrackers().size()).isEqualTo(3);
+        assertThat(mVastVideoConfig.getCloseTrackers().size()).isEqualTo(4);
+        assertThat(mVastVideoConfig.getSkipTrackers().size()).isEqualTo(4);
+        assertThat(mVastVideoConfig.getClickTrackers().size()).isEqualTo(3);
+        assertThat(mVastVideoConfig.getErrorTrackers().size()).isEqualTo(4);
+
+        final VastCompanionAdConfig vastCompanionAdConfig = mVastVideoConfig.getVastCompanionAd(
+                context.getResources().getConfiguration().orientation);
+        assertThat(vastCompanionAdConfig.getWidth()).isEqualTo(300);
+        assertThat(vastCompanionAdConfig.getHeight()).isEqualTo(250);
+        assertThat(vastCompanionAdConfig.getVastResource().getResource())
+                .isEqualTo("https://demo.tremormedia.com/proddev/vast/Blistex1.jpg");
+        assertThat(vastCompanionAdConfig.getVastResource().getType())
+                .isEqualTo(VastResource.Type.STATIC_RESOURCE);
+        assertThat(vastCompanionAdConfig.getVastResource().getCreativeType())
+                .isEqualTo(VastResource.CreativeType.IMAGE);
+        assertThat(vastCompanionAdConfig.getClickThroughUrl()).isEqualTo("https://www.tremormedia.com");
+        assertThat(VastUtils.vastTrackersToStrings(vastCompanionAdConfig.getClickTrackers()))
+                .containsOnly("https://companionClickTracking1",
+                        "https://companionClickTracking2");
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_shouldReturnCorrectVastValuesWhenAVastRedirectFails() throws Exception {
+        // Vast redirect response
+        ShadowMoPubHttpUrlConnection.addPendingResponse(404, "");
+        // Video download response
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+
+        assertThat(mVastVideoConfig).isNull();
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withNoExtensions_shouldContainTheCorrectDefaultExtensionValues() throws Exception {
+        // Vast redirect response to XML without VAST extensions
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING);
+        // Video download response
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+
+        assertThat(mVastVideoConfig.getCustomCtaText()).isNull();
+        assertThat(mVastVideoConfig.getCustomSkipText()).isNull();
+        assertThat(mVastVideoConfig.getCustomCloseIconUrl()).isNull();
+        assertThat(mVastVideoConfig.getCustomForceOrientation()).isEqualTo(DeviceUtils.ForceOrientation.FORCE_LANDSCAPE);
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withExtensionsUnderWrapper_shouldContainTheCorrectCustomExtensionValues() throws Exception {
+        // Vast redirect response to XML without extensions
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING);
+        // Video download response
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
+
+        // Add extensions under Wrapper element in TEST_VAST_XML_STRING
+        subject.prepareVastVideoConfiguration(
+                TEST_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
+                        "<Extensions>" +
+                            "<Extension type=\"MoPub\">" +
+                                "<MoPubCtaText>custom CTA text</MoPubCtaText>" +
+                                "<MoPubSkipText>skip</MoPubSkipText>" +
+                                "<MoPubCloseIcon>https://ton.twitter.com/exchange-media/images/v4/star_icon_3x.png</MoPubCloseIcon>" +
+                                "<MoPubForceOrientation>device</MoPubForceOrientation>" +
+                            "</Extension>" +
+                        "</Extensions>"),
+                vastManagerListener,
+                dspCreativeId,
+                context);
+
+        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
+        ShadowLooper.runUiThreadTasks();
+        semaphore.acquire();
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+
+        // Verify custom extensions
+        assertThat(mVastVideoConfig.getCustomCtaText()).isEqualTo("custom CTA text");
+        assertThat(mVastVideoConfig.getCustomSkipText()).isEqualTo("skip");
+        assertThat(mVastVideoConfig.getCustomCloseIconUrl()).isEqualTo("https://ton.twitter.com/exchange-media/images/v4/star_icon_3x.png");
+        assertThat(mVastVideoConfig.getCustomForceOrientation()).isEqualTo(DeviceUtils.ForceOrientation.DEVICE_ORIENTATION);
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withExtensionsUnderInline_shouldContainTheCorrectCustomExtensionValues() throws Exception {
+        // Vast redirect response to XML with extensions under Inline element
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200,
+                TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
+                        "<Extensions>" +
+                                "<Extension type=\"MoPub\">" +
+                                "<MoPubCtaText>custom CTA text</MoPubCtaText>" +
+                                "<MoPubSkipText>skip</MoPubSkipText>" +
+                                "<MoPubCloseIcon>https://ton.twitter.com/exchange-media/images/v4/star_icon_3x.png</MoPubCloseIcon>" +
+                                "<MoPubForceOrientation>device</MoPubForceOrientation>" +
+                                "</Extension>" +
+                                "</Extensions>"));
+        // Video download response
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+
+        // Verify custom extensions
+        assertThat(mVastVideoConfig.getCustomCtaText()).isEqualTo("custom CTA text");
+        assertThat(mVastVideoConfig.getCustomSkipText()).isEqualTo("skip");
+        assertThat(mVastVideoConfig.getCustomCloseIconUrl()).isEqualTo("https://ton.twitter.com/exchange-media/images/v4/star_icon_3x.png");
+        assertThat(mVastVideoConfig.getCustomForceOrientation()).isEqualTo(DeviceUtils.ForceOrientation.DEVICE_ORIENTATION);
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withExtensionsUnderBothWrapperAndInline_shouldContainLastParsedCustomExtensionValues() throws Exception {
+        // Vast redirect response to XML with extensions under Inline element in TEST_NESTED_VAST_XML_STRING, will be parsed last
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200,
+                TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
+                        "<Extensions>" +
+                                "<Extension type=\"MoPub\">" +
+                                "<MoPubCtaText>CTA 2</MoPubCtaText>" +
+                                "<MoPubSkipText>skip 2</MoPubSkipText>" +
+                                "<MoPubCloseIcon>https://ton.twitter.com/exchange-media/images/v4/star_icon_3x_2.png</MoPubCloseIcon>" +
+                                "<MoPubForceOrientation>landscape</MoPubForceOrientation>" +
+                                "</Extension>" +
+                                "</Extensions>"));
+        // Video download response
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
+
+        // Also add extensions under Wrapper element in TEST_VAST_XML_STRING
+        subject.prepareVastVideoConfiguration(
+                TEST_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
+                        "<Extensions>" +
+                            "<Extension type=\"MoPub\">" +
+                                "<MoPubCtaText>CTA 1</MoPubCtaText>" +
+                                "<MoPubSkipText>skip 1</MoPubSkipText>" +
+                                "<MoPubCloseIcon>https://ton.twitter.com/exchange-media/images/v4/star_icon_3x_1.png</MoPubCloseIcon>" +
+                                "<MoPubForceOrientation>device orientation</MoPubForceOrientation>" +
+                            "</Extension>" +
+                        "</Extensions>"),
+                vastManagerListener,
+                dspCreativeId,
+                context);
+
+        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
+        ShadowLooper.runUiThreadTasks();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+
+        // Verify custom extension values are the ones last parsed in TEST_NESTED_VAST_XML_STRING
+        assertThat(mVastVideoConfig.getCustomCtaText()).isEqualTo("CTA 2");
+        assertThat(mVastVideoConfig.getCustomSkipText()).isEqualTo("skip 2");
+        assertThat(mVastVideoConfig.getCustomCloseIconUrl()).isEqualTo("https://ton.twitter.com/exchange-media/images/v4/star_icon_3x_2.png");
+        assertThat(mVastVideoConfig.getCustomForceOrientation()).isEqualTo(DeviceUtils.ForceOrientation.FORCE_LANDSCAPE);
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withCustomCtaTextAsSingleSpace_shouldReturnEmptyString() throws Exception {
+        // Vast redirect response
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200,
+                TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
+                        "<Extensions>" +
+                                "<Extension type=\"MoPub\">" +
+                                "<MoPubCtaText> </MoPubCtaText>" +     // single space, i.e. no text
+                                "</Extension>" +
+                                "</Extensions>"));
+        // Video download response
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+        assertThat(mVastVideoConfig.getCustomCtaText()).isEmpty();
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withCustomCtaTextLongerThan15Chars_shouldReturnNull() throws Exception {
+        // Vast redirect response
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200,
+                TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
+                        "<Extensions>" +
+                                "<Extension type=\"MoPub\">" +
+                                "<MoPubCtaText>1234567890123456</MoPubCtaText>" +     // 16 chars
+                                "</Extension>" +
+                                "</Extensions>"));
+        // Video download response
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+        assertThat(mVastVideoConfig.getCustomCtaText()).isNull();
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withCustomSkipTextLongerThan8Chars_shouldReturnNull() throws Exception {
+        // Vast redirect response
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200,
+                TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
+                        "<Extensions>" +
+                                "<Extension type=\"MoPub\">" +
+                                "<MoPubSkipText>123456789</MoPubSkipText>" +     // 9 chars
+                                "</Extension>" +
+                                "</Extensions>"));
+        // Video download response
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+        assertThat(mVastVideoConfig.getCustomSkipText()).isNull();
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withInvalidCustomForceOrientation_shouldReturnDefaultForceLandscapeOrientation() throws Exception {
+        // Vast redirect response
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200,
+                TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
+                        "<Extensions>" +
+                                "<Extension type=\"MoPub\">" +
+                                "<MoPubForceOrientation>abcd</MoPubForceOrientation>" +   // invalid value
+                                "</Extension>" +
+                                "</Extensions>"));
+        // Video download response
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+        assertThat(mVastVideoConfig.getCustomForceOrientation()).isEqualTo(DeviceUtils.ForceOrientation.FORCE_LANDSCAPE);
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withCustomForceOrientationInMixedCaseAndUntrimmed_shouldReturnCustomForceOrientation() throws Exception {
+        // Vast redirect response
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200,
+                TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
+                        "<Extensions>" +
+                                "<Extension type=\"MoPub\">" +
+                                "<MoPubForceOrientation> PortRAIT  </MoPubForceOrientation>" +
+                                "</Extension>" +
+                                "</Extensions>"));
+        // Video download response
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+        assertThat(mVastVideoConfig.getCustomForceOrientation()).isEqualTo(DeviceUtils.ForceOrientation.FORCE_PORTRAIT);
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withValidPercentSkipOffset_shouldReturnCorrectValue() throws Exception {
+        // Vast redirect response
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset='25%'>"));
+        // Video download response
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+
+        assertThat(mVastVideoConfig.getSkipOffsetString()).isEqualTo("25%");
+    }
+
+
+    @Test
+    public void prepareVastVideoConfiguration_withValidAbsoluteSkipOffset_shouldReturnCorrectValue() throws Exception {
+        // Vast redirect response
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset='  00:03:14 '>"));
+        // Video download response
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+
+        assertThat(mVastVideoConfig.getSkipOffsetString()).isEqualTo("00:03:14");
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withValidAbsoluteSkipOffsetWithExtraSpace_shouldReturnCorrectTrimmedValue() throws Exception {
+        // Vast redirect response
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset='  00:03:14.159 '>"));
+        // Video download response
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+
+        assertThat(mVastVideoConfig.getSkipOffsetString()).isEqualTo("00:03:14.159");
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withSkipOffsets_shouldReturnLastParsedValue() throws Exception {
+        // Vast redirect response with skipoffset in percent format
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset='25%'>"));
+        // Video download response
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
+
+        // Also add a skipoffset in absolute format
+        subject.prepareVastVideoConfiguration(
+                TEST_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset='00:03:14'>"),
+                vastManagerListener,
+                dspCreativeId,
+                context);
+
+        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
+        ShadowLooper.runUiThreadTasks();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+
+        // Verify that the last parsed skipoffset value is returned
+        assertThat(mVastVideoConfig.getSkipOffsetString()).isEqualTo("25%");
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withEmptySkipOffset_shouldReturnNull() throws Exception {
+        // Vast redirect response
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset=' '>"));
+        // Video download response
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+
+        assertThat(mVastVideoConfig.getSkipOffsetString()).isNull();
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withNoMediaUrlInXml_shouldReturnNull() throws Exception {
+        subject.prepareVastVideoConfiguration(TEST_VAST_BAD_NEST_URL_XML_STRING,
+                vastManagerListener, dspCreativeId, context);
+
+        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
+        ShadowLooper.runUiThreadTasks();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
+        assertThat(mVastVideoConfig).isEqualTo(null);
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withNullXml_shouldReturnNull() throws Exception {
+        subject.prepareVastVideoConfiguration(null, vastManagerListener, dspCreativeId, context);
+
+        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
+        ShadowLooper.runUiThreadTasks();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
+        assertThat(mVastVideoConfig).isEqualTo(null);
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withEmptyXml_shouldReturnNull() throws Exception {
+        subject.prepareVastVideoConfiguration("", vastManagerListener, dspCreativeId, context);
+
+        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
+        ShadowLooper.runUiThreadTasks();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
+        assertThat(mVastVideoConfig).isEqualTo(null);
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withVideoInDiskCache_shouldNotDownloadVideo() throws Exception {
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING);
+
+        CacheService.putToDiskCache("https://s3.amazonaws.com/mopub-vast/tapad-video.mp4", "video_data".getBytes());
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+
+        assertThat(ShadowMoPubHttpUrlConnection.getLatestRequestUrl()).isNotNull();
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
+        assertThat(mVastVideoConfig.getDiskMediaFileUrl())
+                .isEqualTo(CacheService.getFilePathDiskCache("https://s3.amazonaws.com/mopub-vast/tapad-video.mp4"));
+    }
+
+    @Test
+    public void prepareVastVideoConfiguration_withUninitializedDiskCache_shouldReturnNull() throws Exception {
+        CacheService.clearAndNullCaches();
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING);
+
+        prepareVastVideoConfiguration();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
+        assertThat(mVastVideoConfig).isEqualTo(null);
+    }
+
+    @Test
+    public void cancel_shouldCancelBackgroundProcessingAndNotNotifyListenerWithNull() throws Exception {
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING);
+
+        Robolectric.getBackgroundThreadScheduler().pause();
+
+        subject.prepareVastVideoConfiguration(TEST_VAST_XML_STRING, vastManagerListener, dspCreativeId, context);
+
+        subject.cancel();
+
+        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
+        ShadowLooper.runUiThreadTasks();
+        semaphore.acquire();
+
+        verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
+        assertThat(mVastVideoConfig).isEqualTo(null);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java
new file mode 100644
index 00000000..0d935fc6
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java
@@ -0,0 +1,708 @@
+package com.mopub.mobileads;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.DeviceUtils.ForceOrientation;
+import com.mopub.mobileads.test.support.VastUtils;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+import org.xml.sax.SAXException;
+
+import java.io.IOException;
+import java.util.List;
+
+import javax.xml.parsers.ParserConfigurationException;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class VastXmlManagerTest {
+    private static final String XML_HEADER_TAG = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
+    private static final String TEST_VAST_XML_STRING = "<VAST xmlns:xsi=\"https://www.w3.org/2001/XMLSchema-instance\" version=\"2.0\" xsi:noNamespaceSchemaLocation=\"vast.xsd\">" +
+            "            <Ad id=\"223626102\">" +
+            "                <InLine>" +
+            "                    <AdSystem version=\"2.0\">DART_DFA</AdSystem>" +
+            "                    <AdTitle>In-Stream Video</AdTitle>" +
+            "                    <Description>A test creative with a description.</Description>" +
+            "                    <Survey/>" +
+            "                    <Impression id=\"DART\">" +
+            "                        <![CDATA[" +
+            "                        https://ad.doubleclick.net/imp;v7;x;223626102;0-0;0;47414672;0/0;30477563/30495440/1;;~aopt=0/0/ff/0;~cs=j%3fhttp://s0.2mdn.net/dot.gif" +
+            "                        ]]>" +
+            "                    </Impression>" +
+            "                    <Impression id=\"ThirdParty\">" +
+            "                        <![CDATA[" +
+            "                        https://ad.doubleclick.net/ad/N270.Process_Other/B3473145;sz=1x1;ord=2922389?" +
+            "                        ]]>" +
+            "                    </Impression>" +
+            "                    <Creatives>" +
+            "                        <Creative sequence=\"1\" AdID=\"\">" +
+            "                            <Linear skipoffset=\"25%\">" +
+            "                                <Duration>00:00:58</Duration>" +
+            "                                <TrackingEvents>" +
+            "                                    <Tracking event=\"start\">" +
+            "                                        <![CDATA[" +
+            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"progress\" offset=\"13%\">" +
+            "                                        <![CDATA[" +
+            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"progress\" offset=\"01:01:10.300\">" +
+            "                                        <![CDATA[" +
+            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            // Invalid tracking due to ambiguous offset.
+            "                                    <Tracking event=\"progress\" offset=\"01:01\">" +
+            "                                        <![CDATA[" +
+            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            // Invalid tracking due to a too-high percentage offset.
+            "                                    <Tracking event=\"progress\" offset=\"113%\">" +
+            "                                        <![CDATA[" +
+            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            // Invalid tracking due to a negative percentage offset.
+            "                                    <Tracking event=\"progress\" offset=\"-113%\">" +
+            "                                        <![CDATA[" +
+            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            // Invalid tracking due to a non-number offset
+            "                                    <Tracking event=\"progress\" offset=\"ten seconds\">" +
+            "                                        <![CDATA[" +
+            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"midpoint\">" +
+            "                                        <![CDATA[" +
+            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"midpoint\">" +
+            "                                        <![CDATA[" +
+            "                                        https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"firstQuartile\">" +
+            "                                        <![CDATA[" +
+            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"firstQuartile\">" +
+            "                                        <![CDATA[" +
+            "                                        https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"thirdQuartile\">" +
+            "                                        <![CDATA[" +
+            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"thirdQuartile\">" +
+            "                                        <![CDATA[" +
+            "                                        https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"complete\">" +
+            "                                        <![CDATA[" +
+            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=13;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"complete\">" +
+            "                                        <![CDATA[" +
+            "                                        https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.5;sz=1x1;ord=2922389?" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"close\">" +
+            "                                        <![CDATA[" +
+            "                                        https://www.mopub.com/close?q=ignatius" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"close\">" +
+            "                                        <![CDATA[" +
+            "                                        https://www.mopub.com/close?q=j3" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"skip\">" +
+            "                                        <![CDATA[" +
+            "                                        https://www.mopub.com/skip?q=ignatius" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"skip\">" +
+            "                                        <![CDATA[" +
+            "                                        https://www.mopub.com/skip?q=j3" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"mute\">" +
+            "                                        <![CDATA[" +
+            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=16;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"pause\">" +
+            "                                        <![CDATA[" +
+            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=15;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"fullscreen\">" +
+            "                                        <![CDATA[" +
+            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=19;ecn1=1;etm1=0;" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                    <Tracking event=\"fullscreen\">" +
+            "                                        <![CDATA[" +
+            "                                        https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.6;sz=1x1;ord=2922389?" +
+            "                                        ]]>" +
+            "                                    </Tracking>" +
+            "                                </TrackingEvents>" +
+            "                                <AdParameters/>" +
+            "                                <VideoClicks>" +
+            "                                    <ClickThrough>" +
+            "                                        <![CDATA[ https://www.google.com/support/richmedia ]]>" +
+            "                                    </ClickThrough>" +
+            "                                    <ClickTracking id=\"DART\">" +
+            "                                        <![CDATA[" +
+            "                                        https://ad.doubleclick.net/click%3Bh%3Dv8/3e1b/3/0/%2a/z%3B223626102%3B0-0%3B0%3B47414672%3B255-0/0%3B30477563/30495440/1%3B%3B%7Eaopt%3D0/0/ff/0%3B%7Esscs%3D%3fhttp://s0.2mdn.net/dot.gif" +
+            "                                        ]]>" +
+            "                                    </ClickTracking>" +
+            "                                    <ClickTracking id=\"ThirdParty\">" +
+            "                                        <![CDATA[" +
+            "                                        https://ad.doubleclick.net/clk;212442087;33815766;i?https://www.google.com/support/richmedia" +
+            "                                        ]]>" +
+            "                                    </ClickTracking>" +
+            "                                </VideoClicks>" +
+            "                                <MediaFiles>" +
+            "                                    <MediaFile id=\"1\" delivery=\"progressive\" type=\"video/quicktime\" bitrate=\"457\"" +
+            "                                               width=\"300\" height=\"225\">" +
+            "                                        <![CDATA[" +
+            "                                        https://s3.amazonaws.com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
+            "                                        ]]>" +
+            "                                    </MediaFile>" +
+            "                                </MediaFiles>" +
+            "                               <Icons>" +
+            "                                   <Icon program=\"program\" width=\"123\" height=\"234\" xPosition=\"789\" " +
+            "                                   yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
+            "                                   duration=\"01:02:03.456\">" +
+            "                                       <StaticResource creativeType=\"ImAge/JpEg\">" +
+            "                                           <![CDATA[imageJpeg]]>" +
+            "                                       </StaticResource>" +
+            "                                       <IconClicks>" +
+            "                                           <IconClickThrough>" +
+            "                                               <![CDATA[clickThroughUri]]>" +
+            "                                           </IconClickThrough>" +
+            "                                           <IconClickTracking>" +
+            "                                               <![CDATA[clickTrackingUri1]]>" +
+            "                                           </IconClickTracking>" +
+            "                                           <IconClickTracking>" +
+            "                                               <![CDATA[clickTrackingUri2]]>" +
+            "                                           </IconClickTracking>" +
+            "                                       </IconClicks>" +
+            "                                       <IconViewTracking>" +
+            "                                           <![CDATA[viewTrackingUri1]]>" +
+            "                                       </IconViewTracking>" +
+            "                                       <IconViewTracking>" +
+            "                                           <![CDATA[viewTrackingUri2]]>" +
+            "                                       </IconViewTracking>" +
+            "                                    </Icon>" +
+            "                                </Icons>" +
+            "                            </Linear>" +
+            "                        </Creative>" +
+            "                        <Creative AdID=\"601364-Companion\">" +
+            "                            <CompanionAds>" +
+            "                               <Companion height=\"90\" width=\"728\">" +
+            "                                   <StaticResource creativeType=\"image/jpeg\">https://demo.tremormedia.com/proddev/vast/728x90_banner1.jpg</StaticResource>" +
+            "                                   <CompanionClickThrough>https://www.tremormedia.com</CompanionClickThrough>" +
+            "                                   <BADTrackingEvents>" +
+            "                                       <Tracking event=\"creativeView\">https://myTrackingURL/firstCompanionCreativeView</Tracking>" +
+            "                                       <Tracking event=\"creativeView\">https://myTrackingURL/secondCompanionCreativeView</Tracking>" +
+            "                                   </BADTrackingEvents>" +
+            "                               </Companion>" +
+            "                               <Companion id=\"valid\" height=\"250\" width=\"300\">" +
+            "                                   <StaticResource creativeType=\"image/png\">https://demo.tremormedia.com/proddev/vast/Blistex1.png</StaticResource>" +
+            "                                   <TrackingEvents>" +
+            "                                       <Tracking event=\"creativeView\">https://myTrackingURL/firstCompanionCreativeView</Tracking>" +
+            "                                       <Tracking event=\"creativeView\">https://myTrackingURL/secondCompanionCreativeView</Tracking>" +
+            "                                   </TrackingEvents>" +
+            "                                   <CompanionClickThrough>https://www.tremormedia.com</CompanionClickThrough>" +
+            "                                   <CompanionClickTracking><![CDATA[https://companionClickTracking1]]></CompanionClickTracking>" +
+            "                               </Companion>" +
+            "                               <Companion height=\"789\" width=\"456\">" +
+            "                                   <StaticResource creativeType=\"image/bmp\">" +
+            "                                       <![CDATA[" +
+            "                                           https://cdn.liverail.com/adasset/229/7969/300x250.bmp" +
+            "                                       ]]>" +
+            "                                   </StaticResource>" +
+            "                                   <TrackingEvents>" +
+            "                                       <Tracking event=\"creativeView\">" +
+            "                                           <![CDATA[" +
+            "                                               https://trackingUrl1.com/" +
+            "                                           ]]>" +
+            "                                       </Tracking>" +
+            "                                   </TrackingEvents>" +
+            "                                   <CompanionClickThrough>" +
+            "                                       <![CDATA[" +
+            "                                           https://clickThroughUrl1.com/" +
+            "                                       ]]>" +
+            "                                   </CompanionClickThrough>" +
+            "                                   <CompanionClickTracking><![CDATA[https://companionClickTracking2]]></CompanionClickTracking>" +
+            "                               </Companion>" +
+            "                               <Companion height=\"789\" width=\"1011\">" +
+            "                                   <StaticResource creativeType=\"image/gif\">" +
+            "                                       <![CDATA[" +
+            "                                           https://cdn.liverail.com/adasset/229/7969/300x250.gif" +
+            "                                       ]]>" +
+            "                                   </StaticResource>" +
+            "                                   <CompanionClickThrough>" +
+            "                                       <![CDATA[" +
+            "                                           https://clickThroughUrl2.com/" +
+            "                                       ]]>" +
+            "                                   </CompanionClickThrough>" +
+            "                                   <CompanionClickTracking><![CDATA[https://companionClickTracking3]]></CompanionClickTracking>" +
+            "                               </Companion>" +
+            "                               <Companion width=\"300\" height=\"60\">" +
+            "                                   <StaticResource creativeType=\"application/x-shockwave-flash\">" +
+            "                                       <![CDATA[" +
+            "                                           https://cdn.liverail.com/adasset4/1331/229/7969/5122396e510b80db6b5ef4013ddabe90.swf" +
+            "                                       ]]>" +
+            "                                   </StaticResource>" +
+            "                                   <TrackingEvents>" +
+            "                                       <Tracking event=\"creativeView\">" +
+            "                                           <![CDATA[" +
+            "                                               https://trackingUrl2.com/" +
+            "                                           ]]>" +
+            "                                       </Tracking>" +
+            "                                   </TrackingEvents>" +
+            "                                   <CompanionClickThrough>" +
+            "                                       <![CDATA[" +
+            "                                           https://clickThroughUrl3.com/" +
+            "                                       ]]>" +
+            "                                   </CompanionClickThrough>" +
+            "                                   <CompanionClickTracking><![CDATA[https://companionClickTracking4]]></CompanionClickTracking>" +
+            "                               </Companion>" +
+            "                               <Companion id=\"valid\" height=\"249\" width=\"299\">" +
+            "                                   <BADStaticResource creativeType=\"image/jpeg\">https://demo.tremormedia.com/proddev/vast/Blistex1.jpg</BADStaticResource>" +
+            "                                   <TrackingEvents>" +
+            "                                           <Tracking event=\"creativeView\">https://myTrackingURL/firstCompanionCreativeView</Tracking>" +
+            "                                           <Tracking event=\"creativeView\">https://myTrackingURL/secondCompanionCreativeView</Tracking>" +
+            "                                           <BADTracking event=\"creativeView\">https://myTrackingURL/thirdCompanionCreativeView</BADTracking>" +
+            "                                           <Tracking BADevent=\"creativeView\">https://myTrackingURL/fourthCompanionCreativeView</Tracking>" +
+            "                                           <Tracking event=\"BADcreativeView\">https://myTrackingURL/fifthCompanionCreativeView</Tracking>" +
+            "                                   </TrackingEvents>" +
+            "                                   <BADCompanionClickThrough>https://www.tremormedia.com</BADCompanionClickThrough>" +
+            "                                   <BADCompanionClickTracking><![CDATA[https://companionClickTracking5]]></BADCompanionClickTracking>" +
+            "                               </Companion>" +
+            "                               <Companion width=\"9000\">" +
+            "                                   <TrackingEvents>" +
+            "                                       <ThisWillNotBeFound>" +
+            "                                           <Tracking event=\"creativeView\">https://myTrackingURL/firstCompanionCreativeView</Tracking>" +
+            "                                           <Tracking event=\"creativeView\">https://myTrackingURL/secondCompanionCreativeView</Tracking>" +
+            "                                       </ThisWillNotBeFound>" +
+            "                                   </TrackingEvents>" +
+            "                               </Companion>" +
+            "                               <BADCompanion>" +
+            "                               </BADCompanion>" +
+            "                            </CompanionAds>" +
+            "                        </Creative>" +
+            "                    </Creatives>" +
+            "                    <Extensions>" +
+            "                        <Extension type=\"DART\">" +
+            "                            <AdServingData>" +
+            "                                <DeliveryData>" +
+            "                                    <GeoData>" +
+            "                                        <![CDATA[" +
+            "                                        ct=US&st=CA&ac=415&zp=94103&bw=4&dma=197&city=13358" +
+            "                                        ]]>" +
+            "                                    </GeoData>" +
+            "                                </DeliveryData>" +
+            "                            </AdServingData>" +
+            "                        </Extension>" +
+            "                        <Extension type=\"MoPub\">" +
+            "                           <MoPubCtaText>custom CTA text</MoPubCtaText>" +
+            "                           <MoPubSkipText>skip</MoPubSkipText>" +
+            "                           <MoPubCloseIcon>https://ton.twitter.com/exchange-media/images/v4/star_icon_3x.png</MoPubCloseIcon>" +
+            "                           <MoPubForceOrientation>device</MoPubForceOrientation>" +
+            "                           <MoPubViewabilityTracker" +
+"                                           viewablePlaytime=\"2.5\"" +
+            "                               percentViewable=\"50%\">" +
+            "                               <![CDATA[" +
+            "                                   https://ad.server.com/impression/dot.gif" +
+            "                               ]]>" +
+            "                           </MoPubViewabilityTracker>" +
+            "                        </Extension>" +
+            "                    </Extensions>" +
+            "                </InLine>" +
+            "                <Wrapper>" +
+            "                   <AdSystem>Acudeo Compatible</AdSystem>" +
+            "                   <VASTAdTagURI>https://0.dsp.dev1.mopub.com/xml</VASTAdTagURI>" +
+            "                   <Impression>https://myTrackingURL/wrapper/impression</Impression>" +
+            "                   <Creatives>" +
+            "                   </Creatives>" +
+            "                </Wrapper>" +
+            "            </Ad>" +
+            "        </VAST>" +
+            "<MP_TRACKING_URLS>" +
+            "   <MP_TRACKING_URL>https://www.mopub.com/imp1</MP_TRACKING_URL>" +
+            "   <MP_TRACKING_URL>https://www.mopub.com/imp2</MP_TRACKING_URL>" +
+            "</MP_TRACKING_URLS>";
+
+    private VastXmlManager mXmlManager;
+    private boolean mExceptionRaised;
+
+    @Before
+    public void setup() {
+        mXmlManager = new VastXmlManager();
+        mExceptionRaised = false;
+
+        try {
+            mXmlManager.parseVastXml(TEST_VAST_XML_STRING);
+        } catch (ParserConfigurationException e) {
+            e.printStackTrace();
+            mExceptionRaised = true;
+        } catch (IOException e) {
+            e.printStackTrace();
+            mExceptionRaised = true;
+        } catch (SAXException e) {
+            e.printStackTrace();
+            mExceptionRaised = true;
+        }
+    }
+
+    /**
+     * UNIT TESTS
+     */
+
+    @Test
+    public void parseVastXml_shouldNotRaiseAnExceptionProcessingValidXml() {
+        assertThat(mExceptionRaised).isEqualTo(false);
+    }
+
+    @Test
+    public void parseVastXml_shouldNotRaiseAnExceptionProcessingXmlWithXmlHeaderTag() throws ParserConfigurationException, IOException, SAXException {
+        String xmlString = XML_HEADER_TAG + TEST_VAST_XML_STRING;
+
+        mXmlManager = new VastXmlManager();
+        mXmlManager.parseVastXml(xmlString);
+    }
+
+    @Test
+    public void parseVastXml_withMalformedXml_shouldNotCauseProblems() {
+        String badXml = "<im>going<<<to||***crash></,>CDATA[]YOUR_FACE";
+
+        VastXmlManager badManager = new VastXmlManager();
+
+        try {
+            badManager.parseVastXml(badXml);
+        } catch (ParserConfigurationException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        } catch (SAXException e) {
+            e.printStackTrace();
+        }
+
+        assertThat(badManager.getMoPubImpressionTrackers().size()).isEqualTo(0);
+    }
+
+    @Test
+    public void parseVastXml_withMalformedNodes_shouldNotCauseProblems() {
+        String badXml = "<VAST><Impression id=\"DART\"></Impression><Tracking event=\"start\"><![CDATA[ good ]]><ExtraNode><![CDATA[ bad ]]></ExtraNode></Tracking></VAST>";
+
+        VastXmlManager badManager = new VastXmlManager();
+
+        try {
+            badManager.parseVastXml(badXml);
+        } catch (ParserConfigurationException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        } catch (SAXException e) {
+            e.printStackTrace();
+        }
+
+        assertThat(badManager.getAdXmlManagers()).isEmpty();
+    }
+
+    @Test
+    public void getAdXmlManagers_shouldReturnAllAdXmlManagers() throws Exception {
+        String vastXml = "<VAST xmlns:xsi=\"https://www.w3.org/2001/XMLSchema-instance\" version=\"2.0\" xsi:noNamespaceSchemaLocation=\"vast.xsd\">" +
+                "    <Ad id=\"12345678\">" +
+                "        <InLine></InLine>" +
+                "    </Ad>" +
+                "    <Ad id=\"87654321\">" +
+                "        <Wrapper></Wrapper>" +
+                "    </Ad>" +
+                "</VAST>";
+
+        VastXmlManager subject = new VastXmlManager();
+        subject.parseVastXml(vastXml);
+        List<VastAdXmlManager> vastAdXmlManagers = subject.getAdXmlManagers();
+
+        assertThat(vastAdXmlManagers.size()).isEqualTo(2);
+        assertThat(vastAdXmlManagers.get(0).getInLineXmlManager()).isNotNull();
+        assertThat(vastAdXmlManagers.get(0).getWrapperXmlManager()).isNull();
+        assertThat(vastAdXmlManagers.get(1).getInLineXmlManager()).isNull();
+        assertThat(vastAdXmlManagers.get(1).getWrapperXmlManager()).isNotNull();
+    }
+
+    @Test
+    public void getMoPubImpressionTrackers_shouldReturnTheCorrectValue() {
+        assertThat(VastUtils.vastTrackersToStrings(mXmlManager.getMoPubImpressionTrackers()))
+                .containsOnly("https://www.mopub.com/imp1", "https://www.mopub.com/imp2");
+    }
+
+    @Test
+    public void getCustomCtaText_shouldReturnTheCorrectValue() {
+        String customCtaText = mXmlManager.getCustomCtaText();
+
+        assertThat(customCtaText).isEqualTo("custom CTA text");
+    }
+
+    @Test
+    public void getCustomSkipText_shouldReturnTheCorrectValue() {
+        String customSkipText = mXmlManager.getCustomSkipText();
+
+        assertThat(customSkipText).isEqualTo("skip");
+    }
+
+    @Test
+    public void getCustomCloseIconUrl_shouldReturnTheCorrectValue() {
+        String customCloseIconUrl = mXmlManager.getCustomCloseIconUrl();
+
+        assertThat(customCloseIconUrl).isEqualTo("https://ton.twitter" +
+                ".com/exchange-media/images/v4/star_icon_3x.png");
+    }
+
+    @Test
+    public void getCustomForceOrientation_shouldReturnTheCorrectValue() {
+        ForceOrientation customForceOrientation = mXmlManager.getCustomForceOrientation();
+
+        assertThat(customForceOrientation).isEqualTo(ForceOrientation.DEVICE_ORIENTATION);
+    }
+
+    /**
+     * INTEGRATION TESTS
+     */
+
+    @Test
+    public void getVastAdTagURI_withWrapperXmlManager_shouldReturnTheCorrectValue() {
+        String url = mXmlManager.getAdXmlManagers().get(0).getWrapperXmlManager().getVastAdTagURI();
+
+        assertThat(url).isEqualTo("https://0.dsp.dev1.mopub.com/xml");
+    }
+
+    @Test
+    public void getImpressionTrackers_withInLineXmlManager_shouldReturnTheCorrectValue() {
+        assertThat(VastUtils.vastTrackersToStrings(mXmlManager.getAdXmlManagers().get(0)
+                .getInLineXmlManager().getImpressionTrackers()))
+                .containsOnly("https://ad.doubleclick.net/imp;v7;x;223626102;0-0;0;47414672;0/0;" +
+                                "30477563/30495440/1;;~aopt=0/0/ff/0;~cs=j%3fhttp://s0.2mdn" +
+                                ".net/dot.gif",
+                        "https://ad.doubleclick.net/ad/N270.Process_Other/B3473145;sz=1x1;ord=2922389?");
+    }
+
+    @Test
+    public void getCompanionAdXmlManagers_withInLineXmlManager_shouldReturnListOfPopulatedCompanionAdXmlManagers() throws Exception {
+        List<VastCompanionAdXmlManager> imageCompanionAdXmlManagers = mXmlManager.getAdXmlManagers().get(0)
+                .getInLineXmlManager().getCompanionAdXmlManagers();
+        assertThat(imageCompanionAdXmlManagers.size()).isEqualTo(7);
+
+        assertThat(imageCompanionAdXmlManagers.get(0).getWidth()).isEqualTo(728);
+        assertThat(imageCompanionAdXmlManagers.get(0).getHeight()).isEqualTo(90);
+        assertThat(imageCompanionAdXmlManagers.get(0).getResourceXmlManager().getStaticResourceType())
+                .isEqualTo("image/jpeg");
+        assertThat(imageCompanionAdXmlManagers.get(0).getResourceXmlManager().getStaticResource())
+                .isEqualTo("https://demo.tremormedia.com/proddev/vast/728x90_banner1.jpg");
+        assertThat(imageCompanionAdXmlManagers.get(0).getClickThroughUrl()).isEqualTo(
+                "https://www.tremormedia.com");
+        assertThat(imageCompanionAdXmlManagers.get(0).getClickTrackers()).isEmpty();
+
+        assertThat(imageCompanionAdXmlManagers.get(1).getWidth()).isEqualTo(300);
+        assertThat(imageCompanionAdXmlManagers.get(1).getHeight()).isEqualTo(250);
+        assertThat(imageCompanionAdXmlManagers.get(1).getResourceXmlManager().getStaticResourceType())
+                .isEqualTo("image/png");
+        assertThat(imageCompanionAdXmlManagers.get(1).getResourceXmlManager().getStaticResource())
+                .isEqualTo("https://demo.tremormedia.com/proddev/vast/Blistex1.png");
+        assertThat(imageCompanionAdXmlManagers.get(1).getClickThroughUrl()).isEqualTo(
+                "https://www.tremormedia.com");
+        assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(1)
+                .getClickTrackers())).containsOnly("https://companionClickTracking1");
+
+        assertThat(imageCompanionAdXmlManagers.get(2).getWidth()).isEqualTo(456);
+        assertThat(imageCompanionAdXmlManagers.get(2).getHeight()).isEqualTo(789);
+        assertThat(imageCompanionAdXmlManagers.get(2).getResourceXmlManager().getStaticResourceType())
+                .isEqualTo("image/bmp");
+        assertThat(imageCompanionAdXmlManagers.get(2).getResourceXmlManager().getStaticResource())
+                .isEqualTo("https://cdn.liverail.com/adasset/229/7969/300x250.bmp");
+        assertThat(imageCompanionAdXmlManagers.get(2).getClickThroughUrl())
+                .isEqualTo("https://clickThroughUrl1.com/");
+        assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(2)
+                .getClickTrackers())).containsOnly("https://companionClickTracking2");
+        assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(2)
+                .getCompanionCreativeViewTrackers())).containsOnly("https://trackingUrl1.com/");
+
+        assertThat(imageCompanionAdXmlManagers.get(3).getWidth()).isEqualTo(1011);
+        assertThat(imageCompanionAdXmlManagers.get(3).getHeight()).isEqualTo(789);
+        assertThat(imageCompanionAdXmlManagers.get(3).getResourceXmlManager().getStaticResourceType())
+                .isEqualTo("image/gif");
+        assertThat(imageCompanionAdXmlManagers.get(3).getResourceXmlManager().getStaticResource())
+                .isEqualTo("https://cdn.liverail.com/adasset/229/7969/300x250.gif");
+        assertThat(imageCompanionAdXmlManagers.get(3).getClickThroughUrl()).isEqualTo(
+                "https://clickThroughUrl2.com/");
+        assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(3)
+                .getClickTrackers())).containsOnly("https://companionClickTracking3");
+        assertThat(imageCompanionAdXmlManagers.get(3).getCompanionCreativeViewTrackers()).isEmpty();
+
+        assertThat(imageCompanionAdXmlManagers.get(4).getWidth()).isEqualTo(300);
+        assertThat(imageCompanionAdXmlManagers.get(4).getHeight()).isEqualTo(60);
+        assertThat(imageCompanionAdXmlManagers.get(4).getResourceXmlManager().getStaticResourceType())
+                .isEqualTo("application/x-shockwave-flash");
+        assertThat(imageCompanionAdXmlManagers.get(4).getResourceXmlManager().getStaticResource())
+                .isEqualTo(
+                        "https://cdn.liverail.com/adasset4/1331/229/7969/5122396e510b80db6b5ef4013ddabe90.swf");
+        assertThat(imageCompanionAdXmlManagers.get(4).getClickThroughUrl()).isEqualTo(
+                "https://clickThroughUrl3.com/");
+        assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(4)
+                .getClickTrackers())).containsOnly("https://companionClickTracking4");
+        assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(4)
+                .getCompanionCreativeViewTrackers())).containsOnly("https://trackingUrl2.com/");
+
+        assertThat(imageCompanionAdXmlManagers.get(5).getWidth()).isEqualTo(299);
+        assertThat(imageCompanionAdXmlManagers.get(5).getHeight()).isEqualTo(249);
+        assertThat(imageCompanionAdXmlManagers.get(5).getResourceXmlManager().getStaticResourceType()).isNull();
+        assertThat(imageCompanionAdXmlManagers.get(5).getResourceXmlManager().getStaticResource()).isNull();
+        assertThat(imageCompanionAdXmlManagers.get(5).getClickThroughUrl()).isNull();
+        assertThat(imageCompanionAdXmlManagers.get(5).getClickTrackers()).isEmpty();
+        assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(5)
+                .getCompanionCreativeViewTrackers()))
+                .containsOnly("https://myTrackingURL/firstCompanionCreativeView",
+                        "https://myTrackingURL/secondCompanionCreativeView");
+
+        assertThat(imageCompanionAdXmlManagers.get(6).getWidth()).isEqualTo(9000);
+        assertThat(imageCompanionAdXmlManagers.get(6).getHeight()).isNull();
+        assertThat(imageCompanionAdXmlManagers.get(6).getResourceXmlManager().getStaticResourceType()).isNull();
+        assertThat(imageCompanionAdXmlManagers.get(6).getResourceXmlManager().getStaticResource()).isNull();
+        assertThat(imageCompanionAdXmlManagers.get(6).getClickThroughUrl()).isNull();
+        assertThat(imageCompanionAdXmlManagers.get(6).getClickTrackers()).isEmpty();
+        assertThat(imageCompanionAdXmlManagers.get(6).getCompanionCreativeViewTrackers()).isEmpty();
+    }
+
+    @Test
+    public void getAbsoluteProgressTrackers_withLinearXmlManager_shouldReturnCorrectValues() {
+        List<VastAbsoluteProgressTracker> trackers = mXmlManager.getAdXmlManagers().get(0)
+                .getInLineXmlManager().getLinearXmlManagers().get(0).getAbsoluteProgressTrackers();
+
+        assertThat(trackers.size()).isEqualTo(2);
+
+        VastAbsoluteProgressTracker tracker0 = trackers.get(0);
+        assertThat(tracker0.getTrackingMilliseconds()).isEqualTo(0);
+        assertThat(tracker0.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+
+        VastAbsoluteProgressTracker tracker1 = trackers.get(1);
+        assertThat(tracker1.getTrackingMilliseconds()).isEqualTo(3670300);
+        assertThat(tracker1.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;" +
+                "src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;" +
+                "rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+    }
+
+    @Test
+    public void getFractionalTrackers_withLinearXmlManager_shouldReturnCorrectValues() {
+        List<VastFractionalProgressTracker> trackers = mXmlManager.getAdXmlManagers().get(0)
+                .getInLineXmlManager().getLinearXmlManagers().get(0).getFractionalProgressTrackers();
+
+        assertThat(trackers.size()).isEqualTo(7);
+
+        VastFractionalProgressTracker tracker0 = trackers.get(0);
+        assertThat(tracker0.trackingFraction()).isEqualTo(0.13f);
+        assertThat(tracker0.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+
+        VastFractionalProgressTracker tracker1 = trackers.get(1);
+        assertThat(tracker1.trackingFraction()).isEqualTo(0.25f);
+        assertThat(tracker1.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;");
+
+        VastFractionalProgressTracker tracker2 = trackers.get(2);
+        assertThat(tracker2.trackingFraction()).isEqualTo(0.25f);
+        assertThat(tracker2.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?");
+
+        VastFractionalProgressTracker tracker3 = trackers.get(3);
+        assertThat(tracker3.trackingFraction()).isEqualTo(0.5f);
+        assertThat(tracker3.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;");
+
+        VastFractionalProgressTracker tracker4 = trackers.get(4);
+        assertThat(tracker4.trackingFraction()).isEqualTo(0.5f);
+        assertThat(tracker4.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?");
+
+        VastFractionalProgressTracker tracker5 = trackers.get(5);
+        assertThat(tracker5.trackingFraction()).isEqualTo(0.75f);
+        assertThat(tracker5.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;");
+
+        VastFractionalProgressTracker tracker6 = trackers.get(6);
+        assertThat(tracker6.trackingFraction()).isEqualTo(0.75f);
+        assertThat(tracker6.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?");
+    }
+
+    @Test
+    public void getVideoCompleteTrackers_withLinearXmlManager_shouldReturnTheCorrectValue() {
+        assertThat(VastUtils.vastTrackersToStrings(mXmlManager.getAdXmlManagers().get(0).getInLineXmlManager().getLinearXmlManagers().get(0).getVideoCompleteTrackers()))
+                .containsOnly("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;" +
+                                "pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;" +
+                                "timestamp=2922389;eid1=13;ecn1=1;etm1=0;",
+                        "https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.5;sz=1x1;" +
+                                "ord=2922389?");
+    }
+
+    @Test
+    public void getVideoCloseTrackers_withLinearXmlManager_shouldReturnTheCorrectValue() {
+        assertThat(VastUtils.vastTrackersToStrings(mXmlManager.getAdXmlManagers().get(0)
+                .getInLineXmlManager().getLinearXmlManagers().get(0).getVideoCloseTrackers()))
+                .containsOnly("https://www.mopub.com/close?q=ignatius",
+                        "https://www.mopub.com/close?q=j3");
+    }
+
+    @Test
+    public void getVideoSkipTrackers_withLinearXmlManager_shouldReturnTheCorrectValue() {
+        assertThat(VastUtils.vastTrackersToStrings(mXmlManager.getAdXmlManagers().get(0)
+                .getInLineXmlManager().getLinearXmlManagers().get(0).getVideoSkipTrackers()))
+                .containsOnly("https://www.mopub.com/skip?q=ignatius",
+                        "https://www.mopub.com/skip?q=j3");
+    }
+
+    @Test
+    public void getClickThroughUrl_withLinearXmlManager_shouldReturnTheCorrectValue() {
+        String url = mXmlManager.getAdXmlManagers().get(0)
+                .getInLineXmlManager().getLinearXmlManagers().get(0).getClickThroughUrl();
+
+        assertThat(url).isEqualTo("https://www.google.com/support/richmedia");
+    }
+
+    @Test
+    public void getClickTrackers_withLinearXmlManager_shouldReturnTheCorrectValue() {
+        assertThat(VastUtils.vastTrackersToStrings(mXmlManager.getAdXmlManagers().get(0).getInLineXmlManager().getLinearXmlManagers().get(0).getClickTrackers()))
+                .containsOnly("https://ad.doubleclick.net/click%3Bh%3Dv8/3e1b/3/0/%2a/z%3B223626102%3B0-0%3B0%3B47414672%3B255-0/0%3B30477563/30495440/1%3B%3B%7Eaopt%3D0/0/ff/0%3B%7Esscs%3D%3fhttp://s0.2mdn.net/dot.gif",
+                        "https://ad.doubleclick.net/clk;212442087;33815766;i?https://www.google.com/support/richmedia");
+    }
+
+    @Test
+    public void getSkipOffset_withLinearXmlManager_shouldReturnTheCorrectValue() {
+        String skipOffset = mXmlManager.getAdXmlManagers().get(0).getInLineXmlManager()
+                .getLinearXmlManagers().get(0).getSkipOffset();
+
+        assertThat(skipOffset).isEqualTo("25%");
+    }
+
+    @Test
+    public void getMediaFileUrl_withMediaXmlManager_shouldReturnTheCorrectValue() {
+        String url = mXmlManager.getAdXmlManagers().get(0).getInLineXmlManager()
+                .getLinearXmlManagers().get(0).getMediaXmlManagers().get(0).getMediaUrl();
+
+        assertThat(url).isEqualTo("https://s3.amazonaws.com/uploads.hipchat" +
+                ".com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4");
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/network/CustomSSLSocketFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/network/CustomSSLSocketFactoryTest.java
new file mode 100644
index 00000000..01ba66f4
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/network/CustomSSLSocketFactoryTest.java
@@ -0,0 +1,149 @@
+package com.mopub.network;
+
+import android.annotation.SuppressLint;
+import android.annotation.TargetApi;
+import android.net.SSLCertificateSocketFactory;
+import android.os.Build;
+import android.support.annotation.Nullable;
+
+import com.mopub.TestSdkHelper;
+import com.mopub.mobileads.BuildConfig;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mockito;
+import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PrepareForTest;
+import org.powermock.modules.junit4.PowerMockRunner;
+import org.robolectric.annotation.Config;
+
+import java.net.InetAddress;
+import java.net.Socket;
+
+import javax.net.ssl.HostnameVerifier;
+import javax.net.ssl.HttpsURLConnection;
+import javax.net.ssl.SSLHandshakeException;
+import javax.net.ssl.SSLSession;
+import javax.net.ssl.SSLSocket;
+
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyInt;
+import static org.mockito.Matchers.anyString;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.powermock.api.mockito.PowerMockito.mockStatic;
+
+@PrepareForTest(InetAddressUtils.class)
+@RunWith(PowerMockRunner.class)
+@Config(constants = BuildConfig.class)
+public class CustomSSLSocketFactoryTest {
+
+    private CustomSSLSocketFactory subject;
+    private SSLCertificateSocketFactory mockSSLCertificateSocketFactory;
+    private SSLSocketWithSetHostname mockSSLSocket;
+
+    @SuppressLint("SSLCertificateSocketFactoryCreateSocket")
+    @Before
+    public void setUp() throws Exception {
+        mockStatic(InetAddressUtils.class);
+        mockSSLCertificateSocketFactory = mock(SSLCertificateSocketFactory.class);
+        mockSSLSocket = mock(SSLSocketWithSetHostname.class);
+        Mockito.when(mockSSLCertificateSocketFactory.createSocket(any(InetAddress.class),
+                anyInt())).thenReturn(mockSSLSocket);
+        InetAddress mockInetAddress = mock(InetAddress.class);
+        PowerMockito.when(InetAddressUtils.getInetAddressByName(anyString())).thenReturn(
+                mockInetAddress);
+        subject = CustomSSLSocketFactory.getDefault(0);
+        subject.setCertificateSocketFactory(mockSSLCertificateSocketFactory);
+    }
+
+    @Test
+    public void createSocket_withSocketParam_withAutoCloseTrue_shouldCloseOriginalSocket() throws Exception {
+        final Socket mockSocket = mock(Socket.class);
+        final HostnameVerifier mockHostnameVerifier = mock(HostnameVerifier.class);
+        Mockito.when(mockHostnameVerifier.verify(eq("hostname"), any(SSLSession.class))).thenReturn(true);
+        HttpsURLConnection.setDefaultHostnameVerifier(mockHostnameVerifier);
+
+        subject.createSocket(mockSocket, "hostname", 443, true);
+
+        verify(mockSocket).close();
+        verifyNoMoreInteractions(mockSocket);
+    }
+
+    @Test
+    public void createSocket_withSocketParam_withAutoCloseFalse_shouldNotCloseOriginalSocket_shouldCallSetHostname() throws Exception {
+        final Socket mockSocket = mock(Socket.class);
+        final HostnameVerifier mockHostnameVerifier = mock(HostnameVerifier.class);
+        Mockito.when(mockHostnameVerifier.verify(eq("hostname"), any(SSLSession.class))).thenReturn(true);
+        HttpsURLConnection.setDefaultHostnameVerifier(mockHostnameVerifier);
+
+        subject.createSocket(mockSocket, "hostname", 443, false);
+
+        verify(mockSocket, never()).close();
+        verify(mockSSLSocket).getSupportedProtocols();
+        verify(mockSSLSocket).setEnabledProtocols(any(String[].class));
+        verify(mockSSLSocket).startHandshake();
+        verify(mockSSLSocket).getSession();
+        verify(mockSSLSocket).setHostname(any(String.class));
+        verifyNoMoreInteractions(mockSSLSocket);
+    }
+
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
+    @Test
+    public void setHostnameOnSocket_withAtLeastJellyBeanMR1_shouldEnableServerNameIdentification() {
+        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.JELLY_BEAN_MR1);
+
+        final SSLSocket mockSSLSocket = mock(SSLSocket.class);
+
+        CustomSSLSocketFactory.setHostnameOnSocket(mockSSLCertificateSocketFactory, mockSSLSocket,
+                "hostname");
+
+        verify(mockSSLCertificateSocketFactory).setHostname(mockSSLSocket, "hostname");
+    }
+
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
+    @Test
+    public void setHostnameOnSocket_withBelowJellyBeanMR1_shouldEnableServerNameIdentification() {
+        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.JELLY_BEAN);
+
+        final SSLSocket mockSSLSocket = mock(SSLSocket.class);
+
+        CustomSSLSocketFactory.setHostnameOnSocket(mockSSLCertificateSocketFactory, mockSSLSocket,
+                "hostname");
+
+        verify(mockSSLCertificateSocketFactory, never()).setHostname(mockSSLSocket, "hostname");
+    }
+
+    @Test
+    public void verifyServerName_withValidServerNameIdentification_shouldNotThrowSSLHandshakeException() throws Exception {
+        final SSLSocket mockSslSocket = mock(SSLSocket.class);
+        final HostnameVerifier mockHostnameVerifier = mock(HostnameVerifier.class);
+        Mockito.when(mockHostnameVerifier.verify(eq("hostname"), any(SSLSession.class))).thenReturn(true);
+        HttpsURLConnection.setDefaultHostnameVerifier(mockHostnameVerifier);
+
+        CustomSSLSocketFactory.verifyServerName(mockSslSocket, "hostname");
+    }
+
+    @Test(expected = SSLHandshakeException.class)
+    public void verifyServerName_withInvalidServerNameIdentification_shouldThrowSSLHandshakeException() throws Exception {
+        final SSLSocket mockSslSocket = mock(SSLSocket.class);
+        final HostnameVerifier mockHostnameVerifier = mock(HostnameVerifier.class);
+        Mockito.when(mockHostnameVerifier.verify(eq("hostname"), any(SSLSession.class))).thenReturn(false);
+        HttpsURLConnection.setDefaultHostnameVerifier(mockHostnameVerifier);
+
+        CustomSSLSocketFactory.verifyServerName(mockSslSocket, "hostname");
+    }
+
+    /**
+     * This class has the setHostname() method that CustomSSLSocketFactory#setHostnameOnSocket uses
+     * via reflection. This exists so we can Mockito.verify the method setHostname().
+     */
+    private abstract class SSLSocketWithSetHostname extends SSLSocket {
+        public void setHostname(@Nullable final String hostname) {
+        }
+    }
+}
