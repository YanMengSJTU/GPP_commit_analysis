diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
index 99af42d0..70c0607b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
@@ -1,5 +1,6 @@
 package com.mopub.common;
 
+import android.annotation.SuppressLint;
 import android.content.Context;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageInfo;
@@ -17,6 +18,7 @@
 import com.mopub.common.privacy.MoPubIdentifier;
 import com.mopub.common.util.DeviceUtils;
 import com.mopub.common.util.Dips;
+import com.mopub.common.util.Expiration;
 
 import java.util.Locale;
 import java.util.concurrent.TimeUnit;
@@ -103,9 +105,8 @@ public int getId() {
 
     // Lazy client values
     private Point mDeviceDimensions = null;
-
     private MoPubNetworkType mMopubNetworkType = null;
-    private long mmMopubNetworkTypeTs = 0;
+    private Expiration mmMopubNetworkTypeExpiration = new Expiration(1, TimeUnit.MINUTES);
 
     /**
      * Returns the singleton ClientMetadata object, using the context to obtain data if necessary.
@@ -243,9 +244,10 @@ public String getOrientationString() {
     public MoPubNetworkType getActiveNetworkType() {
         if (mMopubNetworkType == null
             || mMopubNetworkType == MoPubNetworkType.UNKNOWN
-            || mmMopubNetworkTypeTs + MILLISECONDS.convert(1, MINUTES) < System.currentTimeMillis()) {
+            || mmMopubNetworkTypeExpiration.isExpired()) {
             int networkType = UNKNOWN_NETWORK;
             try {
+                @SuppressLint("MissingPermission")
                 NetworkInfo activeNetworkInfo = mConnectivityManager.getActiveNetworkInfo();
                 if (activeNetworkInfo != null) {
                     networkType = activeNetworkInfo.getType();
@@ -255,7 +257,7 @@ public MoPubNetworkType getActiveNetworkType() {
             MoPubNetworkType moPubNetworkType = MoPubNetworkType.fromAndroidNetworkType(networkType);
             synchronized (this) {
                 mMopubNetworkType = moPubNetworkType;
-                mmMopubNetworkTypeTs = System.currentTimeMillis();
+                mmMopubNetworkTypeExpiration.refresh();
             }
         }
         return mMopubNetworkType;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/MoPubIdentifier.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/MoPubIdentifier.java
index c2ffb928..73e43f4d 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/MoPubIdentifier.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/MoPubIdentifier.java
@@ -15,8 +15,10 @@
 import com.mopub.common.SharedPreferencesHelper;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Expiration;
 
 import java.util.Calendar;
+import java.util.concurrent.TimeUnit;
 
 public class MoPubIdentifier {
 
@@ -34,6 +36,8 @@
     @NonNull
     private AdvertisingId mAdInfo;
 
+    private final Expiration mAdInfoExpiration = new Expiration(5, TimeUnit.MINUTES);
+
     @NonNull
     private final Context mAppContext;
 
@@ -58,10 +62,13 @@ public MoPubIdentifier(@NonNull final Context appContext) {
 
         mAppContext = appContext;
         mIdChangeListener = idChangeListener;
-        mAdInfo = readIdFromStorage(mAppContext);
-        if (mAdInfo == null) {
-            mAdInfo = AdvertisingId.generateExpiredAdvertisingId();
+
+        AdvertisingId advertisingId = readIdFromStorage(mAppContext);
+        if (advertisingId == null) {
+            advertisingId = AdvertisingId.generateExpiredAdvertisingId();
         }
+
+        mAdInfo = advertisingId;
         refreshAdvertisingInfo();
     }
 
@@ -83,7 +90,10 @@ private void refreshAdvertisingInfo() {
             return;
         }
         mRefreshingAdvertisingInfo = true;
-        new RefreshAdvertisingInfoAsyncTask().execute();
+
+        if (mAdInfoExpiration.isExpired()) {
+            new RefreshAdvertisingInfoAsyncTask().execute();
+        }
     }
 
     void refreshAdvertisingInfoBackgroundThread() {
@@ -255,6 +265,7 @@ private AdvertisingId getAmazonAdvertisingInfo(@NonNull final Context context) {
         @Override
         protected Void doInBackground(final Void... voids) {
             refreshAdvertisingInfoBackgroundThread();
+            mAdInfoExpiration.refresh();
             mRefreshingAdvertisingInfo = false;
             return null;
         }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Expiration.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Expiration.java
new file mode 100644
index 00000000..a919df0e
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Expiration.java
@@ -0,0 +1,24 @@
+package com.mopub.common.util;
+
+import java.util.concurrent.TimeUnit;
+
+/**
+ * Expiration
+ * Created by liuwei on 5/23/18.
+ */
+public class Expiration {
+  private final long durationNs;
+  private long ts = 0;
+
+  public Expiration(long duration, TimeUnit unit) {
+    this.durationNs = unit.toNanos(duration);
+  }
+
+  public synchronized boolean isExpired() {
+    return ts == 0 || ts + durationNs < System.nanoTime();
+  }
+
+  public synchronized void refresh() {
+    ts = System.nanoTime();
+  }
+}
