diff --git a/CHANGELOG.md b/CHANGELOG.md
index ad9b89df..00f6290c 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,36 @@
+## Version 4.11.0 (November 10, 2016)
+- Added a workaround for an Android bug where Lollipop devices (Android 5.1.1, API level 22) and lower incorrectly handle SSL connections using Server Name Identification.
+- Rewarded video `load()` calls now do not load another rewarded video with the same ad unit id while one is already loading or loaded.
+- Moved the VAST video start tracker to immediately after the video starts (was 2 seconds after the video started).
+- Bug fixes.
+
+## Version 4.10.0 (October 18, 2016)
+- **Added and updated mediated network versions**
+  - Added Flurry version 6.5.0. All Flurry adapters can be found in the corresponding `extras` directory (`/extras/src/com/mopub/mobileads` for banners and interstitials, `/extras/src/com/mopub/nativeads` for native).
+    - All Flurry ad formats must include: `FlurryAgentWrapper`
+    - Banners: `FlurryCustomEventBanner`
+    - Interstitial: `FlurryCustomEventInterstitial`
+    - Native: `FlurryCustomEventNative`, `FlurryBaseNativeAd`, `FlurryNativeAdRenderer`, and `FlurryViewBinder`
+  - Certified Facebook Audience Network version 4.15.0  
+  - Certified Tapjoy version 11.8.2
+  - Certified Millennial Media version 6.3.0
+  - Certified Vungle version 4.0.2  
+- Fixed intermittent `IllegalStateException` for MRAID creatives attemping to retrieve getRootView() on unattached Views.
+- Updated `mopub-sample`'s example `proguard.cfg` to properly retain methods called only via reflection.
+
+## Version 4.9.0 (September 1, 2016)
+- Removed the full SDK bundle.
+- Removed Eclipse support.
+- Removed InMobi custom events from extras.
+- Deprecated rewarded video calls from `MoPub.java` and moved them to `MoPubRewardedVideos.java`.
+  - For example, `MoPub#loadRewardedVideo` is deprecated in favor of `MoPubRewardedVideos#loadRewardedVideo`.
+- Bug fixes.
+
+**Modular SDK**
+ - Added the ability to specify which ad formats to include as dependencies (to decrease the overall footprint of the MoPub SDK in your app).
+ - Default behavior remains unchanged and includes access to all ad formats.
+ - **Note:** Maven builds from source are currently unstable and will be reinstated in a future release. Maven developers can still pull the MoPub SDK AAR from JCenter.
+
 ## Version 4.8.0 (August 1, 2016)
 - Changed the behavior of `MoPubInterstitial#load()` while an interstitial is loading or has been successfully loaded. Previously, this would discard the currently-caching or cached interstitial -- now the interstitial will be unaffected and will remain in the cache.
 - `MoPubInterstitial`s can now be shown only once per successful ad load.
diff --git a/README.md b/README.md
index 31ebc99e..be76ca00 100644
--- a/README.md
+++ b/README.md
@@ -16,10 +16,10 @@ To file an issue with our team visit the [MoPub Forum](https://twittercommunity.
 
 The MoPub SDK is available via:
 
-1. **jCenter AAR**
+1. **JCenter AAR**
     
     [ ![Download](https://api.bintray.com/packages/mopub/mopub-android-sdk/mopub-android-sdk/images/download.svg)](https://bintray.com/mopub/mopub-android-sdk/mopub-android-sdk/_latestVersion)  
-    The MoPub SDK is available as an AAR via jCenter; to use it, add the following to your `build.gradle`.
+    The MoPub SDK is available as an AAR via JCenter; to use it, add the following to your `build.gradle`.
     
     ```
     repositories {
@@ -27,7 +27,48 @@ The MoPub SDK is available via:
     }
 
     dependencies {
-        compile('com.mopub:mopub-sdk:4.8.0@aar') {
+        compile('com.mopub:mopub-sdk:4.11.0@aar') {
+            transitive = true
+        }
+    }
+    ```
+
+    ***SDK Modularization***
+
+    With the modular SDK, you can choose to include specific formats to decrease overall SDK footprint in your app. To do so, include the line for any combination of components that you want in your `build.gradle` file as follows:
+
+    ```groovy
+    repositories {
+        // ... other project repositories
+        jcenter()
+    }
+    // ...
+
+    dependencies {
+        // ... other project dependencies
+
+        // For banners
+        compile('com.mopub:mopub-sdk-banner:4.11.0@aar') {
+            transitive = true
+        }
+        
+        // For interstitials
+        compile('com.mopub:mopub-sdk-interstitial:4.11.0@aar') {
+            transitive = true
+        }
+
+        // For rewarded videos. This will automatically also include interstitials
+        compile('com.mopub:mopub-sdk-rewardedvideo:4.11.0@aar') {
+            transitive = true
+        }
+
+        // For native static (images).
+        compile('com.mopub:mopub-sdk-native-static:4.11.0@aar') {
+            transitive = true
+        }
+
+        // For native video. This will automatically also include native static
+        compile('com.mopub:mopub-sdk-native-video:4.11.0@aar') {
             transitive = true
         }
     }
@@ -39,14 +80,7 @@ The MoPub SDK is available via:
 
     The MoPub SDK is also distributed as zipped source code that you can include in your application.  MoPub provides two prepackaged archives of source code:
 
-    **[MoPub Android Full SDK.zip](http://bit.ly/YUdU9v)**  
-    _Includes everything you need to serve MoPub ads *and* built-in support for Millennial Media third party ad network - [Millennial Media](http://www.millennialmedia.com/) - including the required third party binaries._
-    
-    _**Note:** Millennial Media has updated their minimum supported version of Android to 4.1 (API level 16+). The MoPub Android Full SDK manifest and build.gradle files have been updated accordingly._
-    
-    _**Note:** Millennial Media has deprecated support for Ant/Eclipse; migrating users should use the MoPub Android base SDK and follow [Millennial's Ant/Eclipse Integration Guide](http://docs.millennialmedia.com/android-ad-sdk/ant-eclipse-integration-guide.html)._
-    
-    **[MoPub Android Base SDK.zip](http://bit.ly/YUdWhH)**  
+    **[MoPub Android SDK.zip](http://bit.ly/YUdWhH)**  
     _Includes everything you need to serve MoPub ads.  No third party ad networks are included._
     
     **For additional integration instructions, please see the [Getting Started guide](https://github.com/mopub/mopub-android-sdk/wiki/Getting-Started#requirements-and-dependencies).**
@@ -62,9 +96,12 @@ The MoPub SDK is available via:
 ## New in this Version
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for a complete list of additions, fixes, and enhancements in the latest release.
 
-- Changed the behavior of `MoPubInterstitial#load()` while an interstitial is loading or has been successfully loaded. Previously, this would discard the currently-caching or cached interstitial -- now the interstitial will be unaffected and will remain in the cache.
-- `MoPubInterstitial`s can now be shown only once per successful ad load.
-- Modified a number of Native Ads APIs (manual integration) to accept Context instead of Activity. Affected classes/methods include: `MoPubNative`, `AdapterHelper`, `CustomEventNative#loadNativeAd()`, and `MoPubAdRenderer#createAdView()`.
+- Added a workaround for an Android bug where Lollipop devices (Android 5.1.1, API level 22) and lower incorrectly handle SSL connections using Server Name Identification.
+- Rewarded video `load()` calls now do not load another rewarded video with the same ad unit id while one is already loading or loaded.
+- Moved the VAST video start tracker to immediately after the video starts (was 2 seconds after the video started).
+- Bug fixes.
+
+- **Note:** Maven builds from source are currently unstable and will be reinstated in a future release. Maven developers can still pull the MoPub SDK AAR from JCenter.
 
 ## Requirements
 
@@ -73,7 +110,7 @@ Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/mast
 - android-support-annotations.jar, r23 (**Updated in 4.4.0**)
 - android-support-v7-recyclerview.jar, r23 (**Updated in 4.4.0**)
 - MoPub Volley Library (mopub-volley-1.1.0.jar - available on JCenter) (**Updated in 3.6.0**)
-- **Recommended** Google Play Services 7.8.0
+- **Recommended** Google Play Services 9.4.0
 
 ## Upgrading from 3.2.0 and Prior
 In 3.3.0 a dependency on android-support-annotations.jar was added. If you are using Maven or Gradle to include the MoPub SDK, this dependency is included in the build scripts. For instructions on adding dependencies for Eclipse projects, see our [Getting Started Guide](https://github.com/mopub/mopub-android-sdk/wiki/Getting-Started#adding-the-support-libraries-to-your-project)
diff --git a/build.gradle b/build.gradle
index 6a87580d..a0f73c01 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5,7 +5,8 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.1.2'
+        classpath 'com.android.tools.build:gradle:2.1.3'
+        classpath 'com.novoda:bintray-release:0.3.4'
     }
 }
 
diff --git a/extras/README b/extras/README
deleted file mode 100644
index 5cbc94d1..00000000
--- a/extras/README
+++ /dev/null
@@ -1,9 +0,0 @@
-Google AdSense SDK
-==================
-Although the AdSense SDK for Android is deprecated, you can support it by doing the following:
-
-1) Copy AdSenseAdapter.java under the extras/ folder to mopub-android-sdk/src/com/mopub/mobileads
-2) Place the Google AdSense SDK in mopub-android-sdk/libs
-3) Add GoogleAdView.jar to the Java Build Path in the Properties section of mopub-android-sdk.
-
-*NOTE: At this time, Google does not allow distribution of GoogleAdView.jar so you will need to get that file from Google
diff --git a/extras/src/com/mopub/mobileads/ChartboostShared.java b/extras/src/com/mopub/mobileads/ChartboostShared.java
index a3bb1780..cc722c38 100644
--- a/extras/src/com/mopub/mobileads/ChartboostShared.java
+++ b/extras/src/com/mopub/mobileads/ChartboostShared.java
@@ -75,7 +75,6 @@ public static synchronized boolean initializeSdk(@NonNull Activity launcherActiv
 
         // Perform all the common SDK initialization steps including startAppWithId
         Chartboost.startWithAppId(launcherActivity, mAppId, mAppSignature);
-        Chartboost.setImpressionsUseActivities(false);
         Chartboost.setMediation(Chartboost.CBMediation.CBMediationMoPub, MoPub.SDK_VERSION);
         Chartboost.setDelegate(sDelegate);
         Chartboost.setShouldRequestInterstitialsInFirstSession(true);
diff --git a/extras/src/com/mopub/mobileads/FacebookBanner.java b/extras/src/com/mopub/mobileads/FacebookBanner.java
index c8a0b879..b1954853 100644
--- a/extras/src/com/mopub/mobileads/FacebookBanner.java
+++ b/extras/src/com/mopub/mobileads/FacebookBanner.java
@@ -16,7 +16,7 @@
 import java.util.Map;
 
 /**
- * Tested with Facebook SDK 4.8.1.
+ * Tested with Facebook SDK 4.15.0.
  */
 public class FacebookBanner extends CustomEventBanner implements AdListener {
     public static final String PLACEMENT_ID_KEY = "placement_id";
diff --git a/extras/src/com/mopub/mobileads/FacebookInterstitial.java b/extras/src/com/mopub/mobileads/FacebookInterstitial.java
index 24d19317..06d4b11f 100644
--- a/extras/src/com/mopub/mobileads/FacebookInterstitial.java
+++ b/extras/src/com/mopub/mobileads/FacebookInterstitial.java
@@ -11,7 +11,7 @@
 import java.util.Map;
 
 /**
- * Tested with Facebook SDK 4.8.1.
+ * Tested with Facebook SDK 4.15.0.
  */
 public class FacebookInterstitial extends CustomEventInterstitial implements InterstitialAdListener {
     public static final String PLACEMENT_ID_KEY = "placement_id";
diff --git a/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java b/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java
new file mode 100644
index 00000000..421a7248
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java
@@ -0,0 +1,82 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.flurry.android.FlurryAgent;
+import com.flurry.android.FlurryAgentListener;
+
+/**
+ * Tested with Flurry 6.5.0
+ */
+public final class FlurryAgentWrapper {
+    public static final String PARAM_API_KEY = "apiKey";
+    public static final String PARAM_AD_SPACE_NAME = "adSpaceName";
+
+    private static final String ORIGIN_IDENTIFIER = "Flurry_Mopub_Android";
+    private static final String ORIGIN_VERSION = "6.5.0";
+
+    private FlurryAgent.Builder mAgentBuilder;
+
+    public static FlurryAgentWrapper getInstance() {
+        return FlurryAgentLoader.INSTANCE;
+    }
+
+    private FlurryAgentWrapper() {
+        mAgentBuilder = new FlurryAgent.Builder()
+                .withLogEnabled(false)
+                .withLogLevel(Log.INFO);
+
+        FlurryAgent.addOrigin(ORIGIN_IDENTIFIER, ORIGIN_VERSION);
+    }
+
+    public synchronized void startSession(@NonNull final Context context,
+            final String apiKey,
+            @Nullable FlurryAgentListener flurryAgentListener) {
+        // validate parameters
+        if (TextUtils.isEmpty(apiKey)) {
+            return;
+        }
+
+        // init
+        if (!FlurryAgent.isSessionActive()) {
+            mAgentBuilder.withListener(flurryAgentListener) // withListener allows nulls
+                    .build(context, apiKey);
+
+            // sessions are automatic on ICS+
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
+                return;
+            }
+
+            FlurryAgent.onStartSession(context);
+        }
+    }
+
+    public synchronized void endSession(final Context context) {
+        // validate parameters
+        if (context == null) {
+            return;
+        }
+
+        if (FlurryAgent.isSessionActive()) {
+            // sessions are automatic on ICS+
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
+                return;
+            }
+
+            FlurryAgent.onEndSession(context);
+        }
+    }
+
+    public synchronized boolean isSessionActive() {
+        return FlurryAgent.isSessionActive();
+    }
+
+    private static class FlurryAgentLoader {
+        private static final FlurryAgentWrapper INSTANCE = new FlurryAgentWrapper();
+    }
+}
diff --git a/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java b/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java
new file mode 100644
index 00000000..61397ac4
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java
@@ -0,0 +1,198 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.text.TextUtils;
+import android.util.Log;
+import android.widget.FrameLayout;
+
+import com.flurry.android.ads.FlurryAdBanner;
+import com.flurry.android.ads.FlurryAdBannerListener;
+import com.flurry.android.ads.FlurryAdErrorType;
+
+import java.util.Map;
+
+import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
+import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
+
+/**
+ * Tested with Flurry 6.5.0
+ */
+class FlurryCustomEventBanner extends com.mopub.mobileads.CustomEventBanner {
+    private static final String LOG_TAG = FlurryCustomEventBanner.class.getSimpleName();
+
+    private Context mContext;
+    private CustomEventBannerListener mListener;
+    private FrameLayout mLayout;
+
+    private String mAdSpaceName;
+
+    private FlurryAdBanner mBanner;
+
+    // CustomEventBanner
+    @Override
+    protected void loadBanner(Context context,
+            CustomEventBannerListener listener,
+            Map<String, Object> localExtras, Map<String, String> serverExtras) {
+        if (context == null) {
+            Log.e(LOG_TAG, "Context cannot be null.");
+            listener.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        if (listener == null) {
+            Log.e(LOG_TAG, "CustomEventBannerListener cannot be null.");
+            return;
+        }
+
+        if (!(context instanceof Activity)) {
+            Log.e(LOG_TAG, "Ad can be rendered only in Activity context.");
+            listener.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        if (!validateExtras(serverExtras)) {
+            Log.e(LOG_TAG, "Failed banner ad fetch: Missing required server extras" +
+                    " [FLURRY_APIKEY and/or FLURRY_ADSPACE].");
+            listener.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mContext = context;
+        mListener = listener;
+        mLayout = new FrameLayout(context);
+
+        String apiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
+        mAdSpaceName = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
+
+        FlurryAgentWrapper.getInstance().startSession(context, apiKey, null);
+
+        Log.d(LOG_TAG, "Fetching Flurry ad, ad unit name:" + mAdSpaceName);
+        mBanner = new FlurryAdBanner(mContext, mLayout, mAdSpaceName);
+        mBanner.setListener(new FlurryMopubBannerListener());
+        mBanner.fetchAd();
+    }
+
+    @Override
+    protected void onInvalidate() {
+        if (mContext == null) {
+            return;
+        }
+
+        Log.d(LOG_TAG, "MoPub issued onInvalidate. Flurry ad unit: " + mAdSpaceName);
+
+        if (mBanner != null) {
+            mBanner.destroy();
+            mBanner = null;
+        }
+
+        FlurryAgentWrapper.getInstance().endSession(mContext);
+
+        mContext = null;
+        mListener = null;
+        mLayout = null;
+    }
+
+    private boolean validateExtras(final Map<String, String> serverExtras) {
+        if (serverExtras == null) { return false; }
+
+        final String flurryApiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
+        final String flurryAdSpace = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
+        Log.i(LOG_TAG, "ServerInfo fetched from Mopub " + FlurryAgentWrapper.PARAM_API_KEY + " : "
+                + flurryApiKey + " and " + FlurryAgentWrapper.PARAM_AD_SPACE_NAME + " :" +
+                flurryAdSpace);
+
+        return (!TextUtils.isEmpty(flurryApiKey) && !TextUtils.isEmpty(flurryAdSpace));
+    }
+
+    // FlurryAdListener
+    private class FlurryMopubBannerListener implements FlurryAdBannerListener {
+        private final String LOG_TAG = getClass().getSimpleName();
+
+        @Override
+        public void onFetched(FlurryAdBanner adBanner) {
+            Log.d(LOG_TAG, "onFetched: Flurry banner ad fetched successfully!");
+
+            if (mBanner != null) {
+                mBanner.displayAd();
+            }
+        }
+
+        @Override
+        public void onRendered(FlurryAdBanner adBanner) {
+            Log.d(LOG_TAG, "onRendered: Flurry banner ad rendered");
+
+            if (mListener != null) {
+                mListener.onBannerLoaded(mLayout);
+            }
+        }
+
+        @Override
+        public void onShowFullscreen(FlurryAdBanner adBanner) {
+            Log.d(LOG_TAG, "onFetched: Flurry banner ad in full-screen");
+
+            if (mListener != null) {
+                mListener.onBannerExpanded();
+            }
+        }
+
+        @Override
+        public void onCloseFullscreen(FlurryAdBanner adBanner) {
+            Log.d(LOG_TAG, "onCloseFullscreen: Flurry banner ad full-screen closed");
+
+            if (mListener != null) {
+                mListener.onBannerCollapsed();
+            }
+        }
+
+        @Override
+        public void onAppExit(FlurryAdBanner adBanner) {
+            Log.d(LOG_TAG, "onAppExit: Flurry banner ad exited app");
+
+            if (mListener != null) {
+                mListener.onLeaveApplication();
+            }
+        }
+
+        @Override
+        public void onClicked(FlurryAdBanner adBanner) {
+            Log.d(LOG_TAG, "onClicked: Flurry banner ad clicked");
+
+            if (mListener != null) {
+                mListener.onBannerClicked();
+            }
+        }
+
+        @Override
+        public void onVideoCompleted(FlurryAdBanner adBanner) {
+            Log.d(LOG_TAG, "onVideoCompleted: Flurry banner ad video completed");
+
+            // no-op
+        }
+
+        @Override
+        public void onError(FlurryAdBanner adBanner, FlurryAdErrorType adErrorType,
+                int errorCode) {
+            Log.d(LOG_TAG, String.format("onError: Flurry banner ad not available. " +
+                    "Error type: %s. Error code: %s", adErrorType.toString(), errorCode));
+
+            if (mListener != null) {
+                switch(adErrorType) {
+                    case FETCH:
+                        mListener.onBannerFailed(NETWORK_NO_FILL);
+                        return;
+                    case RENDER:
+                        mListener.onBannerFailed(NETWORK_INVALID_STATE);
+                        return;
+                    case CLICK:
+                        // Don't call onBannerFailed in this case.
+                        return;
+                    default:
+                        mListener.onBannerFailed(UNSPECIFIED);
+                }
+            }
+        }
+    }
+}
diff --git a/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java b/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java
new file mode 100644
index 00000000..d2923675
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java
@@ -0,0 +1,202 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.flurry.android.ads.FlurryAdErrorType;
+import com.flurry.android.ads.FlurryAdInterstitial;
+import com.flurry.android.ads.FlurryAdInterstitialListener;
+
+import java.util.Map;
+
+import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
+import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
+
+/**
+ * Tested with Flurry 6.5.0
+ */
+class FlurryCustomEventInterstitial extends com.mopub.mobileads.CustomEventInterstitial {
+    private static final String LOG_TAG = FlurryCustomEventInterstitial.class.getSimpleName();
+
+    private Context mContext;
+    private CustomEventInterstitialListener mListener;
+
+    private String mAdSpaceName;
+
+    private FlurryAdInterstitial mInterstitial;
+
+    // CustomEventInterstitial
+    @Override
+    protected void loadInterstitial(Context context,
+            CustomEventInterstitialListener listener,
+            Map<String, Object> localExtras,
+            Map<String, String> serverExtras) {
+        if (context == null) {
+            Log.e(LOG_TAG, "Context cannot be null.");
+            listener.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        if (listener == null) {
+            Log.e(LOG_TAG, "CustomEventInterstitialListener cannot be null.");
+            return;
+        }
+
+        if (!(context instanceof Activity)) {
+            Log.e(LOG_TAG, "Ad can be rendered only in Activity context.");
+            listener.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        if (!validateExtras(serverExtras)) {
+            Log.e(LOG_TAG, "Failed interstitial ad fetch: Missing required server extras" +
+                    " [FLURRY_APIKEY and/or FLURRY_ADSPACE].");
+            listener.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mContext = context;
+        mListener = listener;
+
+        String apiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
+        mAdSpaceName = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
+
+        FlurryAgentWrapper.getInstance().startSession(context, apiKey, null);
+
+        Log.d(LOG_TAG, "Fetching Flurry ad, ad unit name:" + mAdSpaceName);
+        mInterstitial = new FlurryAdInterstitial(mContext, mAdSpaceName);
+        mInterstitial.setListener(new FlurryMopubInterstitialListener());
+        mInterstitial.fetchAd();
+    }
+
+    @Override
+    protected void onInvalidate() {
+        if (mContext == null) {
+            return;
+        }
+
+        Log.d(LOG_TAG, "MoPub issued onInvalidate (" + mAdSpaceName + ")");
+
+        if (mInterstitial != null) {
+            mInterstitial.destroy();
+            mInterstitial = null;
+        }
+
+        FlurryAgentWrapper.getInstance().endSession(mContext);
+
+        mContext = null;
+        mListener = null;
+    }
+
+    @Override
+    protected void showInterstitial() {
+        Log.d(LOG_TAG, "MoPub issued showInterstitial (" + mAdSpaceName + ")");
+
+        if (mInterstitial != null) {
+            mInterstitial.displayAd();
+        }
+    }
+
+    private boolean validateExtras(final Map<String, String> serverExtras) {
+        if (serverExtras == null) { return false; }
+
+        final String flurryApiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
+        final String flurryAdSpace = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
+        Log.i(LOG_TAG, "ServerInfo fetched from Mopub " + FlurryAgentWrapper.PARAM_API_KEY + " : "
+                + flurryApiKey + " and " + FlurryAgentWrapper.PARAM_AD_SPACE_NAME + " :" +
+                flurryAdSpace);
+
+        return (!TextUtils.isEmpty(flurryApiKey) && !TextUtils.isEmpty(flurryAdSpace));
+    }
+
+    // FlurryAdListener
+    private class FlurryMopubInterstitialListener implements FlurryAdInterstitialListener {
+        private final String LOG_TAG = getClass().getSimpleName();
+
+        @Override
+        public void onFetched(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onFetched: Flurry interstitial ad fetched successfully!");
+
+            if (mListener != null) {
+                mListener.onInterstitialLoaded();
+            }
+        }
+
+        @Override
+        public void onRendered(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onRendered: Flurry interstitial ad rendered");
+
+            if (mListener != null) {
+                mListener.onInterstitialShown();
+            }
+        }
+
+        @Override
+        public void onDisplay(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onDisplay: Flurry interstitial ad displayed");
+
+            // no-op
+        }
+
+        @Override
+        public void onClose(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onClose: Flurry interstitial ad closed");
+
+            if (mListener != null) {
+                mListener.onInterstitialDismissed();
+            }
+        }
+
+        @Override
+        public void onAppExit(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onAppExit: Flurry interstitial ad exited app");
+
+            if (mListener != null) {
+                mListener.onLeaveApplication();
+            }
+        }
+
+        @Override
+        public void onClicked(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onClicked: Flurry interstitial ad clicked");
+
+            if (mListener != null) {
+                mListener.onInterstitialClicked();
+            }
+        }
+
+        @Override
+        public void onVideoCompleted(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onVideoCompleted: Flurry interstitial ad video completed");
+
+            // no-op
+        }
+
+        @Override
+        public void onError(FlurryAdInterstitial adInterstitial, FlurryAdErrorType adErrorType,
+                int errorCode) {
+            Log.d(LOG_TAG, String.format("onError: Flurry interstitial ad not available. " +
+                    "Error type: %s. Error code: %s", adErrorType.toString(), errorCode));
+
+            if (mListener != null) {
+                switch(adErrorType) {
+                    case FETCH:
+                        mListener.onInterstitialFailed(NETWORK_NO_FILL);
+                        return;
+                    case RENDER:
+                        mListener.onInterstitialFailed(NETWORK_INVALID_STATE);
+                        return;
+                    case CLICK:
+                        // Don't call onInterstitialFailed in this case.
+                        return;
+                    default:
+                        mListener.onInterstitialFailed(UNSPECIFIED);
+                }
+            }
+        }
+    }
+}
diff --git a/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java b/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
index d1268306..679b7d7d 100644
--- a/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
+++ b/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
@@ -17,7 +17,7 @@
 import static com.google.android.gms.ads.AdSize.MEDIUM_RECTANGLE;
 
 /*
- * Compatible with version 7.8.0 of the Google Play Services SDK.
+ * Compatible with version 9.4.0 of the Google Play Services SDK.
  */
 
 // Note: AdMob ads will now use this class as Google has deprecated the AdMob SDK.
diff --git a/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java b/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
index 7417ac76..ac672cbe 100644
--- a/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
+++ b/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
@@ -10,7 +10,7 @@
 import java.util.Map;
 
 /*
- * Compatible with version 7.8.0 of the Google Play Services SDK.
+ * Compatible with version 9.4.0 of the Google Play Services SDK.
  */
 
 // Note: AdMob ads will now use this class as Google has deprecated the AdMob SDK.
diff --git a/extras/src/com/mopub/mobileads/MillennialBanner.java b/extras/src/com/mopub/mobileads/MillennialBanner.java
index d09dcf6e..4a4b0f1a 100644
--- a/extras/src/com/mopub/mobileads/MillennialBanner.java
+++ b/extras/src/com/mopub/mobileads/MillennialBanner.java
@@ -2,6 +2,7 @@
 
 import android.app.Activity;
 import android.content.Context;
+import android.os.Build;
 import android.os.Handler;
 import android.os.Looper;
 import android.util.Log;
@@ -16,16 +17,17 @@
 import com.millennialmedia.InlineAd.InlineErrorStatus;
 import com.millennialmedia.MMException;
 import com.millennialmedia.MMSDK;
+import com.millennialmedia.internal.ActivityListenerManager;
 
 import java.util.Map;
 
 /**
- * Compatible with version 6.0 of the Millennial Media SDK.
+ * Compatible with version 6.3 of the Millennial Media SDK.
  */
 
 class MillennialBanner extends CustomEventBanner {
 
-    public static final String LOGCAT_TAG = "MP->MM Inline";
+    private static final String TAG = MillennialBanner.class.getSimpleName();
     public static final String DCN_KEY = "dcn";
     public static final String APID_KEY = "adUnitID";
     public static final String AD_WIDTH_KEY = "adWidth";
@@ -42,26 +44,21 @@ protected void loadBanner(final Context context, final CustomEventBannerListener
             final Map<String, Object> localExtras, final Map<String, String> serverExtras) {
 
         LayoutParams lp;
-        String apid = null;
-        String dcn = null;
+        String apid;
+        String dcn;
         int width;
         int height;
         mBannerListener = customEventBannerListener;
 
-        if ( !MMSDK.isInitialized() ) {
-            try {
-                MMSDK.initialize((Activity) context);
-            } catch ( Exception e ) {
-                Log.e(LOGCAT_TAG, "Unable to initialize the Millennial SDK-- " + e.getMessage());
-                e.printStackTrace();
-                UI_THREAD_HANDLER.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        mBannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
-                    }
-                });
-                return;
-            }
+        if (!initializeSDK(context)) {
+            Log.e(TAG, "Unable to initialize MMSDK");
+            UI_THREAD_HANDLER.post(new Runnable() {
+                @Override
+                public void run() {
+                    mBannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
+                }
+            });
+            return;
         }
 
         if (extrasAreValid(serverExtras)) {
@@ -70,7 +67,7 @@ public void run() {
             width = Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
             height = Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
         } else {
-            Log.e(LOGCAT_TAG, "We were given invalid extras! Make sure placement ID, width, and height are specified.");
+            Log.e(TAG, "We were given invalid extras! Make sure placement ID, width, and height are specified.");
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
                 public void run() {
@@ -80,17 +77,21 @@ public void run() {
             return;
         }
 
-        // Add DCN's for Nexage folks
+        // Set DCN on the AppInfo if provided
         try {
             AppInfo ai = new AppInfo().setMediator("mopubsdk");
-            if ( dcn != null && dcn.length() > 0 ) {
+            if (dcn != null && dcn.length() > 0) {
                 ai = ai.setSiteId(dcn);
             } else {
                 ai = ai.setSiteId(null);
             }
-            MMSDK.setAppInfo(ai);
-        } catch ( IllegalStateException e ) {
-            Log.i(LOGCAT_TAG, "Caught exception " + e.getMessage());
+            try {
+                MMSDK.setAppInfo(ai);
+            } catch (MMException e) {
+                Log.e(TAG, "MM SDK is not initialized", e);
+            }
+        } catch (IllegalStateException e) {
+            Log.i(TAG, "Caught exception " + e.getMessage());
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
                 public void run() {
@@ -111,7 +112,7 @@ public void run() {
         try {
             mInlineAd = InlineAd.createInstance(apid, mInternalView);
             mInlineAdMetadata = new InlineAdMetadata().setAdSize(new AdSize(width, height));
-        } catch ( MMException e ) {
+        } catch (MMException e) {
             e.printStackTrace();
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
@@ -123,9 +124,13 @@ public void run() {
         }
 
         mInlineAd.setListener(new MillennialInlineListener());
-        
+
+        try {
         /* If MoPub gets location, so do we. */
-        MMSDK.setLocationEnabled( (localExtras.get("location") != null) );
+            MMSDK.setLocationEnabled((localExtras.get("location") != null));
+        } catch (MMException e) {
+            Log.e(TAG, "MM SDK is not initialized", e);
+        }
 
         AdViewController.setShouldHonorServerDimensions(mInternalView);
 
@@ -141,16 +146,43 @@ protected void onInvalidate() {
         }
     }
 
+    private boolean initializeSDK(Context context) {
+        try {
+            if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
+                if (!MMSDK.isInitialized()) {
+                    if (context instanceof Activity) {
+                        try {
+                            MMSDK.initialize(((Activity) context), ActivityListenerManager.LifecycleState.RESUMED);
+                        } catch (Exception e) {
+                            Log.e(TAG, "Error initializing MMSDK", e);
+                            return false;
+                        }
+                    } else {
+                        Log.e(TAG, "MMSDK.initialize must be explicitly called when instantiating the MoPub AdView or InterstitialAd without an Activity.");
+                        return false;
+                    }
+                }
+            } else {
+                Log.e(TAG, "MMSDK minimum supported API is 16");
+                return false;
+            }
+            return true;
+        } catch (Exception e) {
+            Log.e(TAG, "Error initializing MMSDK", e);
+            return false;
+        }
+    }
+
     private boolean extrasAreValid(final Map<String, String> serverExtras) {
         try {
             // Add pos / non-null and APIDs.
             int w = Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
             int h = Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
-            if ( h < 0 || w < 0 ) {
+            if (h < 0 || w < 0) {
                 throw new NumberFormatException();
             }
         } catch (Exception e) {
-            Log.e(LOGCAT_TAG, "Width and height must exist and contain positive integers!");
+            Log.e(TAG, "Width and height must exist and contain positive integers!");
             e.printStackTrace();
             return false;
         }
@@ -161,14 +193,14 @@ private boolean extrasAreValid(final Map<String, String> serverExtras) {
     class MillennialInlineListener implements InlineAd.InlineListener {
 
         @Override
-        public void onAdLeftApplication(InlineAd arg0) {
+        public void onAdLeftApplication(InlineAd inlineAd) {
             // Intentionally not calling MoPub's onLeaveApplication to avoid double-count
-            Log.d(LOGCAT_TAG, "Millennial Inline Ad - Leaving application");
+            Log.d(TAG, "Millennial Inline Ad - Leaving application");
         }
 
         @Override
-        public void onClicked(InlineAd arg0) {
-            Log.d(LOGCAT_TAG, "Millennial Inline Ad - Ad clicked");
+        public void onClicked(InlineAd inlineAd) {
+            Log.d(TAG, "Millennial Inline Ad - Ad clicked");
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
                 public void run() {
@@ -178,8 +210,8 @@ public void run() {
         }
 
         @Override
-        public void onCollapsed(InlineAd arg0) {
-            Log.d(LOGCAT_TAG, "Millennial Inline Ad - Banner collapsed");
+        public void onCollapsed(InlineAd inlineAd) {
+            Log.d(TAG, "Millennial Inline Ad - Banner collapsed");
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
                 public void run() {
@@ -190,8 +222,8 @@ public void run() {
         }
 
         @Override
-        public void onExpanded(InlineAd arg0) {
-            Log.d(LOGCAT_TAG, "Millennial Inline Ad - Banner expanded");
+        public void onExpanded(InlineAd inlineAd) {
+            Log.d(TAG, "Millennial Inline Ad - Banner expanded");
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
                 public void run() {
@@ -201,11 +233,11 @@ public void run() {
         }
 
         @Override
-        public void onRequestFailed(InlineAd arg0, InlineErrorStatus err) {
-            Log.d(LOGCAT_TAG, "Millennial Inline Ad - Banner failed (" + err.getErrorCode() + "): " + err.getDescription() );
+        public void onRequestFailed(InlineAd inlineAd, InlineErrorStatus inlineErrorStatus) {
+            Log.d(TAG, "Millennial Inline Ad - Banner failed (" + inlineErrorStatus.getErrorCode() + "): " + inlineErrorStatus.getDescription());
             MoPubErrorCode mopubErrorCode;
 
-            switch ( err.getErrorCode() ) {
+            switch (inlineErrorStatus.getErrorCode()) {
                 case InlineErrorStatus.ADAPTER_NOT_FOUND:
                     mopubErrorCode = MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
                     break;
@@ -237,8 +269,8 @@ public void run() {
         }
 
         @Override
-        public void onRequestSucceeded(InlineAd arg0) {
-            Log.d(LOGCAT_TAG, "Millennial Inline Ad - Banner request succeeded");
+        public void onRequestSucceeded(InlineAd inlineAd) {
+            Log.d(TAG, "Millennial Inline Ad - Banner request succeeded");
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
                 public void run() {
@@ -248,14 +280,14 @@ public void run() {
         }
 
         @Override
-        public void onResize(InlineAd arg0, int w, int h) {
-            Log.d(LOGCAT_TAG, "Millennial Inline Ad - Banner about to resize (width: " + w + ", height: " + h + ")");
+        public void onResize(InlineAd inlineAd, int w, int h) {
+            Log.d(TAG, "Millennial Inline Ad - Banner about to resize (width: " + w + ", height: " + h + ")");
         }
 
         @Override
-        public void onResized(InlineAd arg0, int w, int h, boolean isClosed) {
-            Log.d(LOGCAT_TAG, "Millennial Inline Ad - Banner resized (width: " + w + ", height: " + h + "). "
-                    + (isClosed ? "Returned to original placement." : "Got a fresh, new place.") );
+        public void onResized(InlineAd inlineAd, int w, int h, boolean isClosed) {
+            Log.d(TAG, "Millennial Inline Ad - Banner resized (width: " + w + ", height: " + h + "). "
+                    + (isClosed ? "Returned to original placement." : "Got a fresh, new place."));
 
         }
 
diff --git a/extras/src/com/mopub/mobileads/MillennialInterstitial.java b/extras/src/com/mopub/mobileads/MillennialInterstitial.java
index 25eba9b4..55eef347 100644
--- a/extras/src/com/mopub/mobileads/MillennialInterstitial.java
+++ b/extras/src/com/mopub/mobileads/MillennialInterstitial.java
@@ -2,26 +2,28 @@
 
 import android.app.Activity;
 import android.content.Context;
+import android.os.Build;
 import android.os.Handler;
 import android.os.Looper;
 import android.util.Log;
 
-import java.util.Map;
-
 import com.millennialmedia.AppInfo;
 import com.millennialmedia.InterstitialAd;
 import com.millennialmedia.InterstitialAd.InterstitialErrorStatus;
 import com.millennialmedia.InterstitialAd.InterstitialListener;
 import com.millennialmedia.MMException;
 import com.millennialmedia.MMSDK;
+import com.millennialmedia.internal.ActivityListenerManager;
+
+import java.util.Map;
 
 /**
- * Compatible with version 6.0 of the Millennial Media SDK.
+ * Compatible with version 6.3 of the Millennial Media SDK.
  */
 
 class MillennialInterstitial extends CustomEventInterstitial {
 
-    public static final String LOGCAT_TAG = "MP->MM Int.";
+    private static final String TAG = MillennialInterstitial.class.getSimpleName();
     public static final String DCN_KEY = "dcn";
     public static final String APID_KEY = "adUnitID";
 
@@ -33,33 +35,28 @@
     @Override
     protected void loadInterstitial(final Context context, final CustomEventInterstitialListener customEventInterstitialListener,
             final Map<String, Object> localExtras, final Map<String, String> serverExtras) {
-        String dcn = null;
+        String dcn;
         mInterstitialListener = customEventInterstitialListener;
         mContext = context;
 
         final String apid;
 
-        if ( !MMSDK.isInitialized() ) {
-            try {
-                MMSDK.initialize((Activity) context);
-            } catch ( Exception e ) {
-                Log.e(LOGCAT_TAG, "Unable to initialize the Millennial SDK-- " + e.getMessage());
-                e.printStackTrace();
-                UI_THREAD_HANDLER.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        mInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
-                    }
-                });
-                return;
-            }
+        if (!initializeSDK(context)) {
+            Log.e(TAG, "Unable to initialize MMSDK");
+            UI_THREAD_HANDLER.post(new Runnable() {
+                @Override
+                public void run() {
+                    mInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
+                }
+            });
+            return;
         }
 
         if (extrasAreValid(serverExtras)) {
             dcn = serverExtras.get(DCN_KEY);
             apid = serverExtras.get(APID_KEY);
         } else {
-            Log.e(LOGCAT_TAG, "Invalid extras-- Be sure you have an placement ID specified.");
+            Log.e(TAG, "Invalid extras-- Be sure you have an placement ID specified.");
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
                 public void run() {
@@ -72,18 +69,26 @@ public void run() {
         // Add DCN support
         try {
             AppInfo ai = new AppInfo().setMediator("mopubsdk");
-            if ( dcn != null && dcn.length() > 0 ) {
+            if (dcn != null && dcn.length() > 0) {
                 ai = ai.setSiteId(dcn);
             } else {
                 ai.setSiteId(null);
             }
-            MMSDK.setAppInfo(ai);
-        } catch ( IllegalStateException e ) {
-            Log.i(LOGCAT_TAG, "SDK not finished initializing-- " + e.getMessage());
+            try {
+                MMSDK.setAppInfo(ai);
+            } catch (MMException e) {
+                Log.e(TAG, "MM SDK is not initialized", e);
+            }
+        } catch (IllegalStateException e) {
+            Log.i(TAG, "SDK not finished initializing-- " + e.getMessage());
         }
-        
+
+        try {
         /* If MoPub gets location, so do we. */
-        MMSDK.setLocationEnabled( (localExtras.get("location") != null) );
+            MMSDK.setLocationEnabled((localExtras.get("location") != null));
+        } catch (MMException e) {
+            Log.e(TAG, "MM SDK is not initialized", e);
+        }
 
         try {
             mMillennialInterstitial = InterstitialAd.createInstance(apid);
@@ -107,7 +112,7 @@ protected void showInterstitial() {
         if (mMillennialInterstitial.isReady()) {
             try {
                 mMillennialInterstitial.show(mContext);
-            } catch ( MMException e ) {
+            } catch (MMException e) {
                 e.printStackTrace();
                 UI_THREAD_HANDLER.post(new Runnable() {
                     @Override
@@ -118,7 +123,7 @@ public void run() {
                 return;
             }
         } else {
-            Log.w(LOGCAT_TAG, "showInterstitial called before Millennial's ad was loaded.");
+            Log.w(TAG, "showInterstitial called before Millennial's ad was loaded.");
         }
     }
 
@@ -130,6 +135,33 @@ protected void onInvalidate() {
         }
     }
 
+    private boolean initializeSDK(Context context) {
+        try {
+            if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
+                if (!MMSDK.isInitialized()) {
+                    if (context instanceof Activity) {
+                        try {
+                            MMSDK.initialize(((Activity) context), ActivityListenerManager.LifecycleState.RESUMED);
+                        } catch (Exception e) {
+                            Log.e(TAG, "Error initializing MMSDK", e);
+                            return false;
+                        }
+                    } else {
+                        Log.e(TAG, "MMSDK.initialize must be explicitly called when instantiating the MoPub AdView or InterstitialAd without an Activity.");
+                        return false;
+                    }
+                }
+            } else {
+                Log.e(TAG, "MMSDK minimum supported API is 16");
+                return false;
+            }
+            return true;
+        } catch (Exception e) {
+            Log.e(TAG, "Error initializing MMSDK", e);
+            return false;
+        }
+    }
+
     private boolean extrasAreValid(Map<String, String> serverExtras) {
         return serverExtras.containsKey(APID_KEY);
     }
@@ -137,14 +169,14 @@ private boolean extrasAreValid(Map<String, String> serverExtras) {
     class MillennialInterstitialListener implements InterstitialListener {
 
         @Override
-        public void onAdLeftApplication(InterstitialAd arg0) {
+        public void onAdLeftApplication(InterstitialAd interstitialAd) {
             // Intentionally not calling MoPub's onLeaveApplication to avoid double-count
-            Log.d(LOGCAT_TAG, "Millennial Interstitial Ad - Leaving application");
+            Log.d(TAG, "Millennial Interstitial Ad - Leaving application");
         }
 
         @Override
-        public void onClicked(InterstitialAd arg0) {
-            Log.d(LOGCAT_TAG, "Millennial Interstitial Ad - Ad was clicked");
+        public void onClicked(InterstitialAd interstitialAd) {
+            Log.d(TAG, "Millennial Interstitial Ad - Ad was clicked");
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
                 public void run() {
@@ -154,8 +186,8 @@ public void run() {
         }
 
         @Override
-        public void onClosed(InterstitialAd arg0) {
-            Log.d(LOGCAT_TAG, "Millennial Interstitial Ad - Ad was closed");
+        public void onClosed(InterstitialAd interstitialAd) {
+            Log.d(TAG, "Millennial Interstitial Ad - Ad was closed");
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
                 public void run() {
@@ -165,8 +197,8 @@ public void run() {
         }
 
         @Override
-        public void onExpired(InterstitialAd arg0) {
-            Log.d(LOGCAT_TAG, "Millennial Interstitial Ad - Ad expired");
+        public void onExpired(InterstitialAd interstitialAd) {
+            Log.d(TAG, "Millennial Interstitial Ad - Ad expired");
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
                 public void run() {
@@ -176,16 +208,16 @@ public void run() {
         }
 
         @Override
-        public void onLoadFailed(InterstitialAd arg0,
-                InterstitialErrorStatus err) {
-            Log.d(LOGCAT_TAG, "Millennial Interstitial Ad - load failed (" + err.getErrorCode() + "): " + err.getDescription() );
+        public void onLoadFailed(InterstitialAd interstitialAd,
+                InterstitialErrorStatus interstitialErrorStatus) {
+            Log.d(TAG, "Millennial Interstitial Ad - load failed (" + interstitialErrorStatus.getErrorCode() + "): " + interstitialErrorStatus.getDescription());
             final MoPubErrorCode moPubErrorCode;
 
-            switch (err.getErrorCode() ) {
+            switch (interstitialErrorStatus.getErrorCode()) {
                 case InterstitialErrorStatus.ALREADY_LOADED:
                     // This will generate discrepancies, as requests will NOT be sent to Millennial.
                     mInterstitialListener.onInterstitialLoaded();
-                    Log.w(LOGCAT_TAG, "Millennial Interstitial Ad - Attempted to load ads when ads are already loaded." );
+                    Log.w(TAG, "Millennial Interstitial Ad - Attempted to load ads when ads are already loaded.");
                     return;
                 case InterstitialErrorStatus.EXPIRED:
                 case InterstitialErrorStatus.DISPLAY_FAILED:
@@ -214,8 +246,8 @@ public void run() {
         }
 
         @Override
-        public void onLoaded(InterstitialAd arg0) {
-            Log.d(LOGCAT_TAG, "Millennial Interstitial Ad - Ad loaded splendidly");
+        public void onLoaded(InterstitialAd interstitialAd) {
+            Log.d(TAG, "Millennial Interstitial Ad - Ad loaded splendidly");
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
                 public void run() {
@@ -225,9 +257,9 @@ public void run() {
         }
 
         @Override
-        public void onShowFailed(InterstitialAd arg0,
-                InterstitialErrorStatus arg1) {
-            Log.e(LOGCAT_TAG, "Millennial Interstitial Ad - Show failed (" + arg1.getErrorCode() + "): " + arg1.getDescription());
+        public void onShowFailed(InterstitialAd interstitialAd,
+                InterstitialErrorStatus interstitialErrorStatus) {
+            Log.e(TAG, "Millennial Interstitial Ad - Show failed (" + interstitialErrorStatus.getErrorCode() + "): " + interstitialErrorStatus.getDescription());
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
                 public void run() {
@@ -237,8 +269,8 @@ public void run() {
         }
 
         @Override
-        public void onShown(InterstitialAd arg0) {
-            Log.d(LOGCAT_TAG, "Millennial Interstitial Ad - Ad shown");
+        public void onShown(InterstitialAd interstitialAd) {
+            Log.d(TAG, "Millennial Interstitial Ad - Ad shown");
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
                 public void run() {
diff --git a/extras/src/com/mopub/mobileads/TapjoyInterstitial.java b/extras/src/com/mopub/mobileads/TapjoyInterstitial.java
index 029592dc..48980569 100644
--- a/extras/src/com/mopub/mobileads/TapjoyInterstitial.java
+++ b/extras/src/com/mopub/mobileads/TapjoyInterstitial.java
@@ -1,3 +1,11 @@
+// Copyright (C) 2015 by Tapjoy Inc.
+//
+// This file is part of the Tapjoy SDK.
+//
+// By using the Tapjoy SDK in your software, you agree to the terms of the Tapjoy SDK License Agreement.
+//
+// The Tapjoy SDK is bound by the Tapjoy SDK License Agreement and can be found here: https://www.tapjoy.com/sdk/license
+
 package com.mopub.mobileads;
 
 import android.content.Context;
@@ -7,18 +15,25 @@
 
 import com.mopub.common.logging.MoPubLog;
 import com.tapjoy.TJActionRequest;
+import com.tapjoy.TJConnectListener;
 import com.tapjoy.TJError;
 import com.tapjoy.TJPlacement;
 import com.tapjoy.TJPlacementListener;
+import com.tapjoy.Tapjoy;
 import com.tapjoy.TapjoyLog;
 
 import java.util.Map;
 
-// Tested with Tapjoy SDK 11.5.1
+// Tested with Tapjoy SDK 11.8.2
 public class TapjoyInterstitial extends CustomEventInterstitial implements TJPlacementListener {
     private static final String TAG = TapjoyInterstitial.class.getSimpleName();
     private static final String TJC_MOPUB_NETWORK_CONSTANT = "mopub";
-    private static final String TJC_MOPUB_ADAPTER_VERSION_NUMBER = "4.0.0";
+    private static final String TJC_MOPUB_ADAPTER_VERSION_NUMBER = "4.1.0";
+
+    // Configuration keys
+    public static final String SDK_KEY = "sdkKey";
+    public static final String DEBUG_ENABLED = "debugEnabled";
+    public static final String PLACEMENT_NAME = "name";
 
     private TJPlacement tjPlacement;
     private CustomEventInterstitialListener mInterstitialListener;
@@ -29,7 +44,7 @@
     }
 
     @Override
-    protected void loadInterstitial(Context context,
+    protected void loadInterstitial(final Context context,
             CustomEventInterstitialListener customEventInterstitialListener,
             Map<String, Object> localExtras,
             Map<String, String> serverExtras) {
@@ -38,11 +53,48 @@ protected void loadInterstitial(Context context,
         mInterstitialListener = customEventInterstitialListener;
         mHandler = new Handler(Looper.getMainLooper());
 
-        String name = serverExtras.get("name");
-        if (TextUtils.isEmpty(name)) {
+        final String placementName = serverExtras.get(PLACEMENT_NAME);
+        if (TextUtils.isEmpty(placementName)) {
             MoPubLog.d("Tapjoy interstitial loaded with empty 'name' field. Request will fail.");
         }
-        tjPlacement = new TJPlacement(context, name, this);
+
+        boolean canRequestPlacement = true;
+        if (!Tapjoy.isConnected()) {
+            // Check if configuration data is available
+            boolean enableDebug = Boolean.valueOf(serverExtras.get(DEBUG_ENABLED));
+            Tapjoy.setDebugEnabled(enableDebug);
+
+            String sdkKey = serverExtras.get(SDK_KEY);
+            if (!TextUtils.isEmpty(sdkKey)) {
+                MoPubLog.d("Connecting to Tapjoy via MoPub dashboard settings...");
+                Tapjoy.connect(context, sdkKey, null, new TJConnectListener() {
+                    @Override
+                    public void onConnectSuccess() {
+                        MoPubLog.d("Tapjoy connected successfully");
+                        createPlacement(context, placementName);
+                    }
+
+                    @Override
+                    public void onConnectFailure() {
+                        MoPubLog.d("Tapjoy connect failed");
+                    }
+                });
+
+                // If sdkKey is present via MoPub dashboard, we only want to request placement
+                // after auto-connect succeeds
+                canRequestPlacement = false;
+            } else {
+                MoPubLog.d("Tapjoy interstitial is initialized with empty 'sdkKey'. You must call Tapjoy.connect()");
+            }
+        }
+
+        if (canRequestPlacement) {
+            createPlacement(context, placementName);
+        }
+    }
+
+    private void createPlacement(Context context, String placementName) {
+        tjPlacement = new TJPlacement(context, placementName, this);
         tjPlacement.setMediationName(TJC_MOPUB_NETWORK_CONSTANT);
         tjPlacement.setAdapterVersion(TJC_MOPUB_ADAPTER_VERSION_NUMBER);
         tjPlacement.requestContent();
diff --git a/extras/src/com/mopub/mobileads/TapjoyRewardedVideo.java b/extras/src/com/mopub/mobileads/TapjoyRewardedVideo.java
index d0f81000..b08d8f04 100644
--- a/extras/src/com/mopub/mobileads/TapjoyRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/TapjoyRewardedVideo.java
@@ -21,16 +21,23 @@
 import java.util.Hashtable;
 import java.util.Map;
 
-// Tested with Tapjoy SDK 11.5.1
+// Tested with Tapjoy SDK 11.8.2
 public class TapjoyRewardedVideo extends CustomEventRewardedVideo {
     private static final String TAG = TapjoyRewardedVideo.class.getSimpleName();
     private static final String TJC_MOPUB_NETWORK_CONSTANT = "mopub";
-    private static final String TJC_MOPUB_ADAPTER_VERSION_NUMBER = "4.0.0";
+    private static final String TJC_MOPUB_ADAPTER_VERSION_NUMBER = "4.1.0";
     private static final String TAPJOY_AD_NETWORK_CONSTANT = "tapjoy_id";
 
+    // Configuration keys
+    public static final String SDK_KEY = "sdkKey";
+    public static final String DEBUG_ENABLED = "debugEnabled";
+    public static final String PLACEMENT_NAME = "name";
+
     private String sdkKey;
+    private String placementName;
     private Hashtable<String, Object> connectFlags;
     private TJPlacement tjPlacement;
+    private boolean isAutoConnect = false;
     private static TapjoyRewardedVideoListener sTapjoyListener = new TapjoyRewardedVideoListener();
 
     static {
@@ -62,25 +69,33 @@ protected boolean checkAndInitializeSdk(@NonNull Activity launcherActivity,
             @NonNull Map<String, String> serverExtras)
             throws Exception {
 
+        placementName = serverExtras.get(PLACEMENT_NAME);
+        if (TextUtils.isEmpty(placementName)) {
+            MoPubLog.d("Tapjoy rewarded video loaded with empty 'name' field. Request will fail.");
+        }
+
         if (!Tapjoy.isConnected()) {
             if (checkAndInitMediationSettings()) {
-                MoPubLog.d("Request to connect to Tapjoy");
-
-                Tapjoy.connect(launcherActivity, sdkKey, connectFlags, new TJConnectListener() {
-                    @Override
-                    public void onConnectSuccess() {
-                        MoPubLog.d("Tapjoy connected successfully");
-                    }
-
-                    @Override
-                    public void onConnectFailure() {
-                        MoPubLog.e("Tapjoy connect failed");
-                    }
-                });
+                MoPubLog.d("Connecting to Tapjoy via MoPub mediation settings...");
+                connectToTapjoy(launcherActivity);
 
+                isAutoConnect = true;
                 return true;
             } else {
-                MoPubLog.d("Cannot connect to Tapjoy -- missing 'sdkkey' declaration via TapjoyMediationSettings");
+                boolean enableDebug = Boolean.valueOf(serverExtras.get(DEBUG_ENABLED));
+                Tapjoy.setDebugEnabled(enableDebug);
+
+                sdkKey = serverExtras.get(SDK_KEY);
+                if (!TextUtils.isEmpty(sdkKey)) {
+                    MoPubLog.d("Connecting to Tapjoy via MoPub dashboard settings...");
+                    connectToTapjoy(launcherActivity);
+
+                    isAutoConnect = true;
+                    return true;
+                } else {
+                    MoPubLog.d("Tapjoy rewarded video is initialized with empty 'sdkKey'. You must call Tapjoy.connect()");
+                    isAutoConnect = false;
+                }
             }
         }
 
@@ -93,15 +108,40 @@ protected void loadWithSdkInitialized(@NonNull Activity activity,
             @NonNull Map<String, String> serverExtras)
             throws Exception {
         MoPubLog.d("Requesting Tapjoy rewarded video");
+        createPlacement(activity);
+    }
+
+    private void connectToTapjoy(final Activity launcherActivity) {
+        Tapjoy.connect(launcherActivity, sdkKey, connectFlags, new TJConnectListener() {
+            @Override
+            public void onConnectSuccess() {
+                MoPubLog.d("Tapjoy connected successfully");
+                createPlacement(launcherActivity);
+            }
 
-        String name = serverExtras.get("name");
-        if (TextUtils.isEmpty(name)) {
-            MoPubLog.d("Tapjoy interstitial loaded with empty 'name' field. Request will fail.");
+            @Override
+            public void onConnectFailure() {
+                MoPubLog.d("Tapjoy connect failed");
+            }
+        });
+    }
+
+    private void createPlacement(Activity activity) {
+        if (!TextUtils.isEmpty(placementName)) {
+            if (isAutoConnect && !Tapjoy.isConnected()) {
+                // If adapter is making the Tapjoy.connect() call on behalf of the pub, wait for it to
+                // succeed before making a placement request.
+                MoPubLog.d("Tapjoy is still connecting. Please wait for this to finish before making a placement request");
+                return;
+            }
+
+            tjPlacement = new TJPlacement(activity, placementName, sTapjoyListener);
+            tjPlacement.setMediationName(TJC_MOPUB_NETWORK_CONSTANT);
+            tjPlacement.setAdapterVersion(TJC_MOPUB_ADAPTER_VERSION_NUMBER);
+            tjPlacement.requestContent();
+        } else {
+            MoPubLog.d("Tapjoy placementName is empty. Unable to create TJPlacement.");
         }
-        tjPlacement = new TJPlacement(activity, name, sTapjoyListener);
-        tjPlacement.setMediationName(TJC_MOPUB_NETWORK_CONSTANT);
-        tjPlacement.setAdapterVersion(TJC_MOPUB_ADAPTER_VERSION_NUMBER);
-        tjPlacement.requestContent();
     }
 
     @Override
@@ -117,19 +157,19 @@ protected void showVideo() {
         } else {
             MoPubLog.d("Failed to show Tapjoy rewarded video.");
         }
-
     }
 
     private boolean checkAndInitMediationSettings() {
-        MoPubLog.d("Initializing Tapjoy mediation settings");
-
         final TapjoyMediationSettings globalMediationSettings =
                 MoPubRewardedVideoManager.getGlobalMediationSettings(TapjoyMediationSettings.class);
 
         if (globalMediationSettings != null) {
+            MoPubLog.d("Initializing Tapjoy mediation settings");
+
             if (!TextUtils.isEmpty(globalMediationSettings.getSdkKey())) {
                 sdkKey = globalMediationSettings.getSdkKey();
             } else {
+                MoPubLog.d("Cannot initialize Tapjoy -- 'sdkkey' is empty");
                 return false;
             }
 
@@ -146,7 +186,7 @@ private boolean checkAndInitMediationSettings() {
     private static class TapjoyRewardedVideoListener implements TJPlacementListener, CustomEventRewardedVideoListener, TJVideoListener {
         @Override
         public void onRequestSuccess(TJPlacement placement) {
-            if (!placement.isContentAvailable()){
+            if (!placement.isContentAvailable()) {
                 MoPubLog.d("No Tapjoy rewarded videos available");
                 MoPubRewardedVideoManager.onRewardedVideoLoadFailure(TapjoyRewardedVideo.class, TAPJOY_AD_NETWORK_CONSTANT, MoPubErrorCode.NETWORK_NO_FILL);
             }
diff --git a/extras/src/com/mopub/mobileads/VungleInterstitial.java b/extras/src/com/mopub/mobileads/VungleInterstitial.java
index 09a39731..f7a9e5dd 100644
--- a/extras/src/com/mopub/mobileads/VungleInterstitial.java
+++ b/extras/src/com/mopub/mobileads/VungleInterstitial.java
@@ -9,11 +9,9 @@
 import com.vungle.publisher.VunglePub;
 
 import java.util.Map;
-import java.util.concurrent.ScheduledThreadPoolExecutor;
-import java.util.concurrent.TimeUnit;
 
 /*
- * Tested with Vungle SDK 3.3.0
+ * Tested with Vungle SDK 4.0.2
  */
 public class VungleInterstitial extends CustomEventInterstitial implements EventListener {
 
@@ -27,12 +25,10 @@
     private final VunglePub mVunglePub;
     private final Handler mHandler;
     private CustomEventInterstitialListener mCustomEventInterstitialListener;
-    private boolean mIsLoading;
 
     public VungleInterstitial() {
         mHandler = new Handler(Looper.getMainLooper());
         mVunglePub = VunglePub.getInstance();
-        mIsLoading = false;
     }
 
     @Override
@@ -62,9 +58,11 @@ protected void loadInterstitial(Context context,
         mVunglePub.init(context, appId);
         mVunglePub.setEventListeners(this);
         if (mVunglePub.isAdPlayable()) {
-            notifyAdAvailable();
+            Log.d("MoPub", "Vungle interstitial ad successfully loaded.");
+            mCustomEventInterstitialListener.onInterstitialLoaded();
         } else {
-            mIsLoading = true;
+            Log.d("MoPub", "Vungle interstitial ad is not loaded.");
+            mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
         }
     }
 
@@ -80,24 +78,12 @@ protected void showInterstitial() {
     @Override
     protected void onInvalidate() {
         mVunglePub.clearEventListeners();
-        mIsLoading = false;
     }
 
     private boolean extrasAreValid(Map<String, String> serverExtras) {
         return serverExtras.containsKey(APP_ID_KEY);
     }
 
-    private void notifyAdAvailable() {
-        Log.d("MoPub", "Vungle interstitial ad successfully loaded.");
-        mIsLoading = false;
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                mCustomEventInterstitialListener.onInterstitialLoaded();
-            }
-        });
-    }
-
     /*
      * EventListener implementation
      */
@@ -120,7 +106,7 @@ public void run() {
     }
 
     @Override
-    public void onAdEnd(final boolean wasCallToActionClicked) {
+    public void onAdEnd(final boolean wasSuccessfulView, final boolean wasCallToActionClicked) {
         mHandler.post(new Runnable() {
             @Override
             public void run() {
@@ -140,8 +126,7 @@ public void onAdUnavailable(final String s) {
 
     @Override
     public void onAdPlayableChanged(final boolean playable) {
-        if (mIsLoading && playable) {
-            notifyAdAvailable();
-        }
+        Log.d("MoPub", String.format("Vungle interstitial ad is %s.",
+                playable ? "playable" : "not playable"));
     }
 }
diff --git a/extras/src/com/mopub/mobileads/VungleRewardedVideo.java b/extras/src/com/mopub/mobileads/VungleRewardedVideo.java
index 8f5a8245..f8d86c73 100644
--- a/extras/src/com/mopub/mobileads/VungleRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/VungleRewardedVideo.java
@@ -1,11 +1,10 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
-import android.os.Handler;
-import android.os.Looper;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
+
 import com.mopub.common.BaseLifecycleListener;
 import com.mopub.common.DataKeys;
 import com.mopub.common.LifecycleListener;
@@ -16,13 +15,13 @@
 import com.vungle.publisher.EventListener;
 import com.vungle.publisher.VunglePub;
 
-import java.util.*;
-import java.util.concurrent.*;
+import java.util.Locale;
+import java.util.Map;
 
 /**
  * A custom event for showing Vungle rewarded videos.
  *
- * Certified with Vungle 3.3.0
+ * Certified with Vungle 4.0.2
  */
 public class VungleRewardedVideo extends CustomEventRewardedVideo {
 
@@ -52,14 +51,11 @@ public void onResume(@NonNull final Activity activity) {
         }
     };
 
-    private final Handler mHandler;
-    private boolean mIsLoading;
     private String mAdUnitId;
+    private String mCustomerId;
 
     public VungleRewardedVideo() {
         sVungleListener = new VungleRewardedVideoListener();
-        mHandler = new Handler(Looper.getMainLooper());
-        mIsLoading = false;
     }
 
     @Nullable
@@ -103,10 +99,20 @@ protected void loadWithSdkInitialized(@NonNull final Activity activity, @NonNull
         if (adUnitObject instanceof String) {
             mAdUnitId = (String) adUnitObject;
         }
+
+        Object customerIdObject = localExtras.get(DataKeys.REWARDED_VIDEO_CUSTOMER_ID);
+        if (customerIdObject instanceof String && !TextUtils.isEmpty((String) customerIdObject)) {
+            mCustomerId = (String) customerIdObject;
+        }
+
         if (sVunglePub.isAdPlayable()) {
-            notifyAdAvailable();
+            MoPubLog.d("Vungle rewarded video ad successfully loaded.");
+            MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(VungleRewardedVideo.class,
+                    VUNGLE_AD_NETWORK_CONSTANT);
         } else {
-            mIsLoading = true;
+            MoPubLog.d("Vungle rewarded video ad is not loaded.");
+            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(VungleRewardedVideo.class,
+                    VUNGLE_AD_NETWORK_CONSTANT, MoPubErrorCode.NETWORK_NO_FILL);
         }
     }
 
@@ -151,33 +157,31 @@ private void modifyAdConfig(AdConfig adConfig, VungleMediationSettings mediation
         if (!TextUtils.isEmpty(mediationSettings.title)) {
             adConfig.setIncentivizedCancelDialogTitle(mediationSettings.title);
         }
-        if (!TextUtils.isEmpty(mediationSettings.userId)) {
+        if (!TextUtils.isEmpty(mCustomerId)) {
+            adConfig.setIncentivizedUserId(mCustomerId);
+        } else if (!TextUtils.isEmpty(mediationSettings.userId)) {
             adConfig.setIncentivizedUserId(mediationSettings.userId);
         }
     }
 
-    private void notifyAdAvailable() {
-        MoPubLog.d("Vungle rewarded video ad successfully loaded.");
-        mIsLoading = false;
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(VungleRewardedVideo.class,
-                        VUNGLE_AD_NETWORK_CONSTANT);
-            }
-        });
-    }
-
     @Override
     protected void onInvalidate() {
-        mIsLoading = false;
     }
 
     private class VungleRewardedVideoListener implements EventListener,
             CustomEventRewardedVideoListener {
 
         @Override
-        public void onAdEnd(final boolean wasCallToActionClicked) {
+        public void onAdEnd(final boolean wasSuccessfulView, final boolean wasCallToActionClicked) {
+            if (wasSuccessfulView) {
+                // Vungle does not provide a callback when a user should be rewarded.
+                // You will need to provide your own reward logic if you receive a reward with
+                // "NO_REWARD_LABEL" && "NO_REWARD_AMOUNT"
+                MoPubRewardedVideoManager.onRewardedVideoCompleted(VungleRewardedVideo.class,
+                        VUNGLE_AD_NETWORK_CONSTANT,
+                        MoPubReward.success(MoPubReward.NO_REWARD_LABEL,
+                                MoPubReward.NO_REWARD_AMOUNT));
+            }
             if (wasCallToActionClicked) {
                 MoPubRewardedVideoManager.onRewardedVideoClicked(VungleRewardedVideo.class,
                         VUNGLE_AD_NETWORK_CONSTANT);
@@ -200,23 +204,14 @@ public void onAdUnavailable(final String s) {
 
         @Override
         public void onAdPlayableChanged(final boolean playable) {
-            if (mIsLoading && playable) {
-                notifyAdAvailable();
-            }
+            MoPubLog.d(String.format("Vungle rewarded video ad is %s.",
+                    playable ? "playable" : "not playable"));
         }
 
         @Override
         public void onVideoView(final boolean isCompletedView, final int watchedMillis, final int videoMillis) {
             MoPubLog.d(String.format(Locale.US, "%.1f%% of Vungle video watched.",
                     (double) watchedMillis / videoMillis * 100));
-            if (isCompletedView) {
-                // Vungle does not provide a callback when a user should be rewarded.
-                // You will need to provide your own reward logic if you receive a reward with
-                // "NO_REWARD_LABEL" && "NO_REWARD_AMOUNT"
-                MoPubRewardedVideoManager.onRewardedVideoCompleted(VungleRewardedVideo.class,
-                        VUNGLE_AD_NETWORK_CONSTANT,
-                        MoPubReward.success(MoPubReward.NO_REWARD_LABEL, MoPubReward.NO_REWARD_AMOUNT));
-            }
         }
     }
 
diff --git a/extras/src/com/mopub/nativeads/FacebookNative.java b/extras/src/com/mopub/nativeads/FacebookNative.java
index 8faa9268..c6b1ee58 100644
--- a/extras/src/com/mopub/nativeads/FacebookNative.java
+++ b/extras/src/com/mopub/nativeads/FacebookNative.java
@@ -21,7 +21,7 @@
 import static com.mopub.nativeads.NativeImageHelper.preCacheImages;
 
 /**
- * Tested with Facebook SDK 4.8.1. FacebookAdRenderer is also necessary in order to show video ads.
+ * Tested with Facebook SDK 4.15.0. FacebookAdRenderer is also necessary in order to show video ads.
  * Video ads will only be shown if VIDEO_ENABLED is set to true or a server configuration
  * "video_enabled" flag is set to true. The server configuration will override the local
  * configuration.
diff --git a/extras/src/com/mopub/nativeads/FlurryBaseNativeAd.java b/extras/src/com/mopub/nativeads/FlurryBaseNativeAd.java
new file mode 100644
index 00000000..3fe494e1
--- /dev/null
+++ b/extras/src/com/mopub/nativeads/FlurryBaseNativeAd.java
@@ -0,0 +1,37 @@
+package com.mopub.nativeads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Tested with Flurry 6.5.0
+ */
+public interface FlurryBaseNativeAd {
+
+    void fetchAd();
+    @NonNull List<String> getImageUrls();
+    boolean isAppInstallAd();
+    void precacheImages();
+
+    @Nullable String getTitle();
+    @Nullable String getText();
+    @Nullable String getCallToAction();
+    @Nullable String getMainImageUrl();
+    @Nullable String getIconImageUrl();
+    @Nullable Double getStarRating();
+    @Nullable Map<String, Object> getExtras();
+
+
+    void setTitle(@Nullable final String title);
+    void setText(@Nullable final String text);
+    void setCallToAction(@Nullable final String callToAction);
+    void setMainImageUrl(@Nullable final String mainImageUrl);
+    void setIconImageUrl(@Nullable final String iconImageUrl);
+    void setStarRating(@Nullable final Double starRating);
+    void addExtra(@NonNull final String key, @Nullable final Object value);
+
+    void onNativeAdLoaded();
+}
diff --git a/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java b/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java
new file mode 100644
index 00000000..ddcc9639
--- /dev/null
+++ b/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java
@@ -0,0 +1,627 @@
+package com.mopub.nativeads;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.util.Log;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.flurry.android.FlurryAgentListener;
+import com.flurry.android.ads.FlurryAdErrorType;
+import com.flurry.android.ads.FlurryAdNative;
+import com.flurry.android.ads.FlurryAdNativeAsset;
+import com.flurry.android.ads.FlurryAdNativeListener;
+import com.flurry.android.ads.FlurryAdTargeting;
+import com.mopub.mobileads.FlurryAgentWrapper;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Tested with Flurry 6.5.0
+ */
+public final class FlurryCustomEventNative extends CustomEventNative {
+
+    /**
+     * Extra image asset for the star-rating of app-install ads.
+     */
+    public static final String EXTRA_STAR_RATING_IMG = "flurry_starratingimage";
+    /**
+     * Extra text asset specifying the category for app-install ads.
+     */
+    public static final String EXTRA_APP_CATEGORY = "flurry_appcategorytext";
+    /**
+     * Extra image asset for the Flurry native ad branding logo.
+     */
+    public static final String EXTRA_SEC_BRANDING_LOGO = "flurry_brandingimage";
+    /**
+     * Key for enabling Flurry debug logging. After manually creating a {@link MoPubNative} object,
+     * pass in <code>true</code> as a value for this key in the map passed to
+     * {@link MoPubNative#setLocalExtras(Map)}.
+     *
+     * E.g.
+     *
+     * <blockquote><pre>
+     * {@code
+     * Map<String, Object> adapterExtras = new TreeMap<String, Object>();
+     * adapterExtras.put(FlurryCustomEventNative.LOCAL_EXTRA_TEST_MODE, true);
+     * mMoPubNative.setLocalExtras(adapterExtras);
+     * }
+     * </pre></blockquote>
+     *
+     * Debug logging is disabled on the Flurry SDK by default.
+     */
+    public static final String LOCAL_EXTRA_TEST_MODE = "enableTestMode";
+    private static final String LOG_TAG = FlurryCustomEventNative.class.getSimpleName();
+    private static final String ASSET_SEC_HQ_IMAGE = "secHqImage";
+    private static final String ASSET_SEC_IMAGE = "secImage";
+    private static final String ASSET_SEC_HQ_RATING_IMG = "secHqRatingImg";
+    private static final String ASSET_SEC_HQ_BRANDING_LOGO = "secHqBrandingLogo";
+    private static final String ASSET_SEC_RATING_IMG = "secRatingImg";
+    private static final String ASSET_APP_RATING = "appRating";
+    private static final String ASSET_APP_CATEGORY = "appCategory";
+    private static final String ASSET_HEADLINE = "headline";
+    private static final String ASSET_SUMMARY = "summary";
+    private static final String ASSET_CALL_TO_ACTION = "callToAction";
+    private static final String ASSET_VIDEO = "videoUrl";
+    private static final double MOPUB_STAR_RATING_SCALE = StaticNativeAd.MAX_STAR_RATING;
+
+    private FlurryAgentListener mFlurryAgentListener;
+
+    @Override
+    protected void loadNativeAd(@NonNull final Context context,
+            @NonNull final CustomEventNativeListener customEventNativeListener,
+            @NonNull final Map<String, Object> localExtras,
+            @NonNull final Map<String, String> serverExtras) {
+
+        final String flurryApiKey;
+        final String flurryAdSpace;
+
+        //Get the FLURRY_APIKEY and FLURRY_ADSPACE from the server.
+        if (validateExtras(serverExtras)) {
+            flurryApiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
+            flurryAdSpace = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
+
+            if (FlurryAgentWrapper.getInstance().isSessionActive() || mFlurryAgentListener != null) {
+                fetchFlurryAd(context, flurryAdSpace, localExtras, customEventNativeListener);
+            } else {
+                mFlurryAgentListener = new FlurryAgentListener() {
+                    @Override
+                    public void onSessionStarted() {
+                        fetchFlurryAd(context, flurryAdSpace, localExtras,
+                                customEventNativeListener);
+                    }
+                };
+
+                FlurryAgentWrapper.getInstance().startSession(context, flurryApiKey,
+                        mFlurryAgentListener);
+            }
+        } else {
+            customEventNativeListener.onNativeAdFailed(
+                    NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
+            Log.i(LOG_TAG, "Failed Native AdFetch: Missing required server extras" +
+                    " [FLURRY_APIKEY and/or FLURRY_ADSPACE].");
+        }
+    }
+
+    private static synchronized void mapNativeAd(@NonNull final FlurryBaseNativeAd mopubSupportedAd,
+            @NonNull final FlurryAdNative flurryAdNative) {
+        FlurryAdNativeAsset coverImageAsset = flurryAdNative.getAsset(ASSET_SEC_HQ_IMAGE);
+        FlurryAdNativeAsset iconImageAsset = flurryAdNative.getAsset(ASSET_SEC_IMAGE);
+
+        if (coverImageAsset != null && !TextUtils.isEmpty(coverImageAsset.getValue())) {
+            mopubSupportedAd.setMainImageUrl(coverImageAsset.getValue());
+        }
+        if (iconImageAsset != null && !TextUtils.isEmpty(iconImageAsset.getValue())) {
+            mopubSupportedAd.setIconImageUrl(iconImageAsset.getValue());
+        }
+
+        mopubSupportedAd.setTitle(flurryAdNative.getAsset(ASSET_HEADLINE).getValue());
+        mopubSupportedAd.setText(flurryAdNative.getAsset(ASSET_SUMMARY).getValue());
+        mopubSupportedAd.addExtra(EXTRA_SEC_BRANDING_LOGO,
+                flurryAdNative.getAsset(ASSET_SEC_HQ_BRANDING_LOGO).getValue());
+
+        if (mopubSupportedAd.isAppInstallAd()) {
+            // App rating image URL may be null
+            FlurryAdNativeAsset ratingHqImageAsset = flurryAdNative
+                    .getAsset(ASSET_SEC_HQ_RATING_IMG);
+            if (ratingHqImageAsset != null && !TextUtils.isEmpty(ratingHqImageAsset.getValue())) {
+                mopubSupportedAd.addExtra(EXTRA_STAR_RATING_IMG, ratingHqImageAsset.getValue());
+            } else {
+                FlurryAdNativeAsset ratingImageAsset = flurryAdNative
+                        .getAsset(ASSET_SEC_RATING_IMG);
+                if (ratingImageAsset != null && !TextUtils.isEmpty(ratingImageAsset.getValue())) {
+                    mopubSupportedAd.addExtra(EXTRA_STAR_RATING_IMG, ratingImageAsset.getValue());
+                }
+            }
+
+            FlurryAdNativeAsset appCategoryAsset = flurryAdNative.getAsset(ASSET_APP_CATEGORY);
+            if (appCategoryAsset != null) {
+                mopubSupportedAd.addExtra(EXTRA_APP_CATEGORY, appCategoryAsset.getValue());
+            }
+            FlurryAdNativeAsset appRatingAsset = flurryAdNative.getAsset(ASSET_APP_RATING);
+            if (appRatingAsset != null) {
+                mopubSupportedAd.setStarRating(getStarRatingValue(appRatingAsset.getValue()));
+            }
+        }
+
+        FlurryAdNativeAsset ctaAsset = flurryAdNative.getAsset(ASSET_CALL_TO_ACTION);
+        if (ctaAsset != null) {
+            mopubSupportedAd.setCallToAction(ctaAsset.getValue());
+        }
+
+        if (mopubSupportedAd.getImageUrls().isEmpty()) {
+            Log.d(LOG_TAG, "preCacheImages: No images to cache for Flurry Native Ad: " +
+                    flurryAdNative.toString());
+            mopubSupportedAd.onNativeAdLoaded();
+        } else {
+            mopubSupportedAd.precacheImages();
+        }
+    }
+
+    @Nullable
+    private static Double getStarRatingValue(@Nullable final String appRatingString) {
+        // App rating String should be of the form X/Y. E.g. 80/100
+        Double rating = null;
+        if (appRatingString != null) {
+            String[] ratingParts = appRatingString.split("/");
+            if (ratingParts.length == 2) {
+                try {
+                    float numer = Integer.valueOf(ratingParts[0]);
+                    float denom = Integer.valueOf(ratingParts[1]);
+                    rating = (numer / denom) * MOPUB_STAR_RATING_SCALE;
+                } catch (NumberFormatException e) { /*Ignore and return null*/ }
+            }
+        }
+        return rating;
+    }
+
+    private boolean validateExtras(final Map<String, String> serverExtras) {
+        final String flurryApiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
+        final String flurryAdSpace = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
+        Log.i(LOG_TAG, "ServerInfo fetched from Mopub " + FlurryAgentWrapper.PARAM_API_KEY + " : "
+                + flurryApiKey + " and " + FlurryAgentWrapper.PARAM_AD_SPACE_NAME + " :" +
+                flurryAdSpace);
+        return (!TextUtils.isEmpty(flurryApiKey) && !TextUtils.isEmpty(flurryAdSpace));
+    }
+
+    private void fetchFlurryAd(@NonNull Context context, String flurryAdSpace,
+            @NonNull Map<String, Object> localExtras,
+            @NonNull CustomEventNativeListener customEventNativeListener) {
+        final FlurryAdNative flurryAdNative = new FlurryAdNative(context, flurryAdSpace);
+
+        if (localExtras.containsKey(LOCAL_EXTRA_TEST_MODE) &&
+                localExtras.get(LOCAL_EXTRA_TEST_MODE) instanceof Boolean) {
+            final FlurryAdTargeting targeting = new FlurryAdTargeting();
+            targeting.setEnableTestAds((Boolean) localExtras.get(LOCAL_EXTRA_TEST_MODE));
+        }
+
+        final FlurryBaseNativeAd flurryNativeAd;
+        if (shouldAllowVideoNativeAds()) {
+            flurryNativeAd = new FlurryVideoEnabledNativeAd(context, flurryAdNative,
+                    customEventNativeListener);
+        } else {
+            flurryNativeAd = new FlurryStaticNativeAd(context, flurryAdNative,
+                    customEventNativeListener);
+        }
+        flurryNativeAd.fetchAd();
+    }
+
+    private boolean shouldAllowVideoNativeAds() {
+        try {
+            Class.forName("com.mopub.nativeads.FlurryNativeAdRenderer");
+        } catch (ClassNotFoundException e) {
+            return false;
+        }
+
+        return true;
+    }
+
+    /**
+     * Class that supports Flurry static native ads with the help of the
+     * {@link MoPubStaticNativeAdRenderer}.
+     *
+     * @see FlurryVideoEnabledNativeAd
+     */
+    private static class FlurryStaticNativeAd extends StaticNativeAd implements FlurryBaseNativeAd {
+
+        @NonNull private final Context mContext;
+        @NonNull private final CustomEventNativeListener mCustomEventNativeListener;
+        @NonNull private final FlurryAdNative mFlurryAdNative;
+        private final FlurryAdNativeListener mFlurryNativelistener = new FlurryBaseAdListener(this) {
+            @Override
+            public void onClicked(final FlurryAdNative flurryAdNative) {
+                super.onClicked(flurryAdNative);
+                notifyAdClicked();
+            }
+
+            @Override
+            public void onImpressionLogged(final FlurryAdNative flurryAdNative) {
+                super.onImpressionLogged(flurryAdNative);
+                notifyAdImpressed();
+            }
+
+            @Override
+            public void onError(final FlurryAdNative adNative,
+                    final FlurryAdErrorType adErrorType,
+                    final int errorCode) {
+                super.onError(adNative, adErrorType, errorCode);
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_NO_FILL);
+            }
+        };
+
+        FlurryStaticNativeAd(@NonNull Context context, @NonNull FlurryAdNative adNative,
+                @NonNull CustomEventNativeListener customEventNativeListener) {
+            mContext = context;
+            mFlurryAdNative = adNative;
+            mCustomEventNativeListener = customEventNativeListener;
+        }
+
+        // region StaticNativeAd
+
+        @Override
+        public void prepare(@NonNull final View view) {
+            mFlurryAdNative.setTrackingView(view);
+            Log.d(LOG_TAG, "prepare(" + mFlurryAdNative.toString() + " " + view.toString() + ")");
+        }
+
+        @Override
+        public void clear(@NonNull final View view) {
+            mFlurryAdNative.removeTrackingView();
+            Log.d(LOG_TAG, "clear(" + mFlurryAdNative.toString() + ")");
+        }
+
+        @Override
+        public void destroy() {
+            Log.d(LOG_TAG, "destroy(" + mFlurryAdNative.toString() + ") started.");
+            mFlurryAdNative.destroy();
+
+            FlurryAgentWrapper.getInstance().endSession(mContext);
+        }
+
+        //endregion
+
+        // region FlurryBaseNativeAd
+
+        @Override
+        public synchronized void fetchAd() {
+            Log.d(LOG_TAG, "Fetching Flurry Native Ad now.");
+            mFlurryAdNative.setListener(mFlurryNativelistener);
+            mFlurryAdNative.fetchAd();
+        }
+
+        @NonNull
+        public List<String> getImageUrls() {
+            final List<String> imageUrls = new ArrayList<>(2);
+            final String mainImageUrl = getMainImageUrl();
+
+            if (mainImageUrl != null) {
+                imageUrls.add(getMainImageUrl());
+                Log.d(LOG_TAG, "Flurry Native Ad main image found.");
+            }
+
+            final String iconUrl = getIconImageUrl();
+            if (iconUrl != null) {
+                imageUrls.add(this.getIconImageUrl());
+                Log.d(LOG_TAG, "Flurry Native Ad icon image found.");
+            }
+            return imageUrls;
+        }
+
+        public boolean isAppInstallAd() {
+            return mFlurryAdNative.getAsset(ASSET_SEC_RATING_IMG) != null ||
+                    mFlurryAdNative.getAsset(ASSET_SEC_HQ_RATING_IMG) != null ||
+                    mFlurryAdNative.getAsset(ASSET_APP_CATEGORY) != null;
+        }
+
+        @Override
+        public void onNativeAdLoaded() {
+            mCustomEventNativeListener.onNativeAdLoaded(this);
+        }
+
+        @Override
+        public void precacheImages() {
+            NativeImageHelper.preCacheImages(mContext, getImageUrls(),
+                    new NativeImageHelper.ImageListener() {
+                        @Override
+                        public void onImagesCached() {
+                            Log.d(LOG_TAG, "preCacheImages: Ad image cached.");
+                            mCustomEventNativeListener.onNativeAdLoaded(FlurryStaticNativeAd.this);
+                        }
+
+                        @Override
+                        public void onImagesFailedToCache(final NativeErrorCode errorCode) {
+                            mCustomEventNativeListener.onNativeAdFailed(errorCode);
+                            Log.d(LOG_TAG, "preCacheImages: Unable to cache Ad image. Error["
+                                    + errorCode.toString() + "]");
+                        }
+                    });
+        }
+
+        //endregion
+    }
+
+    /**
+     * Class that supports both Flurry static and video native ads with the help of
+     * {@link FlurryNativeAdRenderer}. This class does not need to be included if you
+     * are fetching only static ads. Use {@link FlurryStaticNativeAd} instead.
+     */
+    static class FlurryVideoEnabledNativeAd extends BaseNativeAd implements FlurryBaseNativeAd {
+        private @NonNull final Context mContext;
+        private @NonNull final CustomEventNativeListener mCustomEventNativeListener;
+        private @NonNull final FlurryAdNative mFlurryAdNative;
+        private final FlurryAdNativeListener mFlurryNativelistener = new FlurryBaseAdListener(this) {
+            @Override
+            public void onClicked(final FlurryAdNative flurryAdNative) {
+                super.onClicked(flurryAdNative);
+                notifyAdClicked();
+            }
+
+            @Override
+            public void onImpressionLogged(final FlurryAdNative flurryAdNative) {
+                super.onImpressionLogged(flurryAdNative);
+                notifyAdImpressed();
+            }
+
+            @Override
+            public void onError(final FlurryAdNative adNative,
+                    final FlurryAdErrorType adErrorType,
+                    final int errorCode) {
+                super.onError(adNative, adErrorType, errorCode);
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_NO_FILL);
+            }
+        };
+
+        // Basic fields
+        @Nullable private String mTitle;
+        @Nullable private String mText;
+        @Nullable private String mCallToAction;
+        @Nullable private String mMainImageUrl;
+        @Nullable private String mIconImageUrl;
+        @Nullable private Double mStarRating;
+
+        // Extras
+        @NonNull private final Map<String, Object> mExtras;
+
+
+        FlurryVideoEnabledNativeAd(@NonNull Context context, @NonNull FlurryAdNative adNative,
+                @NonNull CustomEventNativeListener customEventNativeListener) {
+            mContext = context;
+            mFlurryAdNative = adNative;
+            mCustomEventNativeListener = customEventNativeListener;
+            mExtras = new HashMap<>();
+        }
+
+        // region StaticNativeAd
+
+        @Override
+        public void prepare(@NonNull View view) {
+            mFlurryAdNative.setTrackingView(view);
+            Log.d(LOG_TAG, "prepare(" + mFlurryAdNative.toString() + " " + view.toString() + ")");
+        }
+
+        @Override
+        public void clear(@NonNull View view) {
+            mFlurryAdNative.removeTrackingView();
+            Log.d(LOG_TAG, "clear(" + mFlurryAdNative.toString() + ")");
+        }
+
+        @Override
+        public void destroy() {
+            Log.d(LOG_TAG, "destroy(" + mFlurryAdNative.toString() + ") started.");
+            mFlurryAdNative.destroy();
+
+            FlurryAgentWrapper.getInstance().endSession(mContext);
+        }
+
+        // endregion
+
+        // region FlurryBaseNativeAd
+
+        @Override
+        public synchronized void fetchAd() {
+            Log.d(LOG_TAG, "Fetching Flurry Native Ad now.");
+            mFlurryAdNative.setListener(mFlurryNativelistener);
+            mFlurryAdNative.fetchAd();
+        }
+
+        @Override
+        public boolean isAppInstallAd() {
+            return mFlurryAdNative.getAsset(ASSET_SEC_RATING_IMG) != null ||
+                    mFlurryAdNative.getAsset(ASSET_SEC_HQ_RATING_IMG) != null ||
+                    mFlurryAdNative.getAsset(ASSET_APP_CATEGORY) != null;
+        }
+
+        @Override
+        public void precacheImages() {
+            NativeImageHelper.preCacheImages(mContext, getImageUrls(),
+                    new NativeImageHelper.ImageListener() {
+                        @Override
+                        public void onImagesCached() {
+                            Log.d(LOG_TAG, "preCacheImages: Ad image cached.");
+                            mCustomEventNativeListener.onNativeAdLoaded(
+                                    FlurryVideoEnabledNativeAd.this);
+                        }
+
+                        @Override
+                        public void onImagesFailedToCache(final NativeErrorCode errorCode) {
+                            mCustomEventNativeListener.onNativeAdFailed(errorCode);
+                            Log.d(LOG_TAG, "preCacheImages: Unable to cache Ad image. Error["
+                                    + errorCode.toString() + "]");
+                        }
+                    });
+        }
+
+        @NonNull
+        @Override
+        public List<String> getImageUrls() {
+            final List<String> imageUrls = new ArrayList<>(2);
+            final String mainImageUrl = getMainImageUrl();
+
+            if (mainImageUrl != null) {
+                imageUrls.add(getMainImageUrl());
+                Log.d(LOG_TAG, "Flurry Native Ad main image found.");
+            }
+
+            final String iconUrl = getIconImageUrl();
+            if (iconUrl != null) {
+                imageUrls.add(this.getIconImageUrl());
+                Log.d(LOG_TAG, "Flurry Native Ad icon image found.");
+            }
+            return imageUrls;
+        }
+
+        @Nullable
+        @Override
+        public String getTitle() {
+            return mTitle;
+        }
+
+        @Nullable
+        @Override
+        public String getText() {
+            return mText;
+        }
+
+        @Nullable
+        @Override
+        public String getCallToAction() {
+            return mCallToAction;
+        }
+
+        @Nullable
+        @Override
+        public String getMainImageUrl() {
+            return mMainImageUrl;
+        }
+
+        @Nullable
+        @Override
+        public String getIconImageUrl() {
+            return mIconImageUrl;
+        }
+
+        @Nullable
+        @Override
+        public Double getStarRating() {
+            return mStarRating;
+        }
+
+        @NonNull
+        @Override
+        public Map<String, Object> getExtras() {
+            return mExtras;
+        }
+
+        @Override
+        public void setTitle(@Nullable String title) {
+            mTitle = title;
+        }
+
+        @Override
+        public void setText(@Nullable String text) {
+            mText = text;
+        }
+
+        @Override
+        public void setCallToAction(@Nullable String callToAction) {
+            mCallToAction = callToAction;
+        }
+
+        @Override
+        public void setMainImageUrl(@Nullable String mainImageUrl) {
+            mMainImageUrl = mainImageUrl;
+        }
+
+        @Override
+        public void setIconImageUrl(@Nullable String iconImageUrl) {
+            mIconImageUrl = iconImageUrl;
+        }
+
+        @Override
+        public void setStarRating(@Nullable Double starRating) {
+            mStarRating = starRating;
+        }
+
+        @Override
+        public void addExtra(@NonNull String key, @Nullable Object value) {
+            mExtras.put(key, value);
+        }
+
+        @Override
+        public void onNativeAdLoaded() {
+            mCustomEventNativeListener.onNativeAdLoaded(this);
+        }
+
+        // endregion
+
+        boolean isVideoAd() {
+            return mFlurryAdNative.isVideoAd();
+        }
+
+        void loadVideoIntoView(@NonNull ViewGroup videoView) {
+            mFlurryAdNative.getAsset(ASSET_VIDEO).loadAssetIntoView(videoView);
+        }
+    }
+
+    static abstract class FlurryBaseAdListener implements FlurryAdNativeListener {
+        private final @NonNull FlurryBaseNativeAd mBaseNativeAd;
+
+        FlurryBaseAdListener(@NonNull FlurryBaseNativeAd baseNativeAd) {
+            mBaseNativeAd = baseNativeAd;
+        }
+
+        @Override
+        public void onFetched(final FlurryAdNative flurryAdNative) {
+            Log.d(LOG_TAG, "onFetched: Flurry native ad fetched successfully!");
+            mapNativeAd(mBaseNativeAd, flurryAdNative);
+        }
+
+        @Override
+        public void onShowFullscreen(final FlurryAdNative flurryAdNative) {
+            Log.d(LOG_TAG, "onShowFullscreen: Flurry native ad in full-screen");
+        }
+
+        @Override
+        public void onCloseFullscreen(final FlurryAdNative flurryAdNative) {
+            Log.d(LOG_TAG, "onCloseFullscreen: Flurry native ad full-screen closed");
+        }
+
+        @Override
+        public void onAppExit(final FlurryAdNative flurryAdNative) {
+            Log.d(LOG_TAG, "onAppExit: Flurry native ad exited app");
+        }
+
+        @Override
+        public void onClicked(final FlurryAdNative flurryAdNative) {
+            Log.d(LOG_TAG, "onClicked: Flurry native ad clicked");
+        }
+
+        @Override
+        public void onImpressionLogged(final FlurryAdNative flurryAdNative) {
+            Log.d(LOG_TAG, "onImpressionLogged: Flurry native ad impression logged");
+        }
+
+        @Override
+        public void onExpanded(final FlurryAdNative flurryAdNative) {
+            Log.d(LOG_TAG, "onExpanded: Flurry native ad expanded");
+        }
+
+        @Override
+        public void onCollapsed(final FlurryAdNative flurryAdNative) {
+            Log.d(LOG_TAG, "onCollapsed: Flurry native ad collapsed");
+        }
+
+        @Override
+        public void onError(final FlurryAdNative flurryAdNative,
+                final FlurryAdErrorType adErrorType,
+                final int errorCode) {
+            Log.d(LOG_TAG, String.format("onError: Flurry native ad not available. " +
+                    "Error type: %s. Error code: %s", adErrorType.toString(), errorCode));
+        }
+    }
+}
diff --git a/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java b/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java
new file mode 100644
index 00000000..c73e4e6e
--- /dev/null
+++ b/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java
@@ -0,0 +1,102 @@
+package com.mopub.nativeads;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+
+import java.util.WeakHashMap;
+
+/**
+ * Include this class if you want to use Flurry native video ads. This will use the FrameLayout
+ * specified in the FlurryNativeViewHolder.videoView to show a video. If a video is not available,
+ * this will still use the mainImageView.
+ *
+ * Tested with Flurry 6.5.0
+ */
+public class FlurryNativeAdRenderer implements
+        MoPubAdRenderer<FlurryCustomEventNative.FlurryVideoEnabledNativeAd> {
+    @NonNull private final FlurryViewBinder mViewBinder;
+    @NonNull private final WeakHashMap<View, FlurryNativeViewHolder> mViewHolderMap;
+
+    public FlurryNativeAdRenderer(@NonNull final FlurryViewBinder viewBinder) {
+        mViewBinder = viewBinder;
+        mViewHolderMap = new WeakHashMap<>();
+    }
+
+    @NonNull
+    @Override
+    public View createAdView(@NonNull final Context context, @Nullable final ViewGroup parent) {
+        return LayoutInflater.from(context).inflate(
+                mViewBinder.staticViewBinder.layoutId, parent, false);
+    }
+
+    @Override
+    public void renderAdView(@NonNull View view,
+            @NonNull FlurryCustomEventNative.FlurryVideoEnabledNativeAd ad) {
+        FlurryNativeViewHolder flurryNativeViewHolder = mViewHolderMap.get(view);
+        if (flurryNativeViewHolder == null) {
+            flurryNativeViewHolder = FlurryNativeViewHolder.fromViewBinder(view, mViewBinder);
+            mViewHolderMap.put(view, flurryNativeViewHolder);
+        }
+
+        update(flurryNativeViewHolder, ad);
+        NativeRendererHelper.updateExtras(flurryNativeViewHolder.staticNativeViewHolder.mainView,
+                mViewBinder.staticViewBinder.extras, ad.getExtras());
+        setViewVisibility(flurryNativeViewHolder, View.VISIBLE);
+    }
+
+    @Override
+    public boolean supports(@NonNull BaseNativeAd nativeAd) {
+        return nativeAd instanceof FlurryCustomEventNative.FlurryVideoEnabledNativeAd;
+    }
+
+    private void update(final FlurryNativeViewHolder viewHolder,
+            final FlurryCustomEventNative.FlurryVideoEnabledNativeAd ad) {
+        NativeRendererHelper.addTextView(viewHolder.staticNativeViewHolder.titleView,
+                ad.getTitle());
+        NativeRendererHelper.addTextView(viewHolder.staticNativeViewHolder.textView, ad.getText());
+        NativeRendererHelper.addTextView(viewHolder.staticNativeViewHolder.callToActionView,
+                ad.getCallToAction());
+        NativeImageHelper.loadImageView(ad.getIconImageUrl(),
+                viewHolder.staticNativeViewHolder.iconImageView);
+
+        if (ad.isVideoAd()) {
+            ad.loadVideoIntoView(viewHolder.videoView);
+        } else {
+            NativeImageHelper.loadImageView(ad.getMainImageUrl(),
+                    viewHolder.staticNativeViewHolder.mainImageView);
+        }
+    }
+
+    private void setViewVisibility(@NonNull final FlurryNativeViewHolder viewHolder,
+            final int visibility) {
+        if (viewHolder.staticNativeViewHolder.mainView != null) {
+            viewHolder.staticNativeViewHolder.mainView.setVisibility(visibility);
+        }
+    }
+
+    private static class FlurryNativeViewHolder {
+        private final StaticNativeViewHolder staticNativeViewHolder;
+        private final ViewGroup videoView;
+
+        private FlurryNativeViewHolder(final StaticNativeViewHolder staticNativeViewHolder,
+                final ViewGroup videoView) {
+            this.staticNativeViewHolder = staticNativeViewHolder;
+            this.videoView = videoView;
+        }
+
+        static FlurryNativeViewHolder fromViewBinder(
+                final View view,
+                final FlurryViewBinder viewBinder) {
+            StaticNativeViewHolder staticNativeViewHolder = StaticNativeViewHolder
+                    .fromViewBinder(view, viewBinder.staticViewBinder);
+
+            ViewGroup videoView = (ViewGroup) view.findViewById(viewBinder.videoViewId);
+
+            return new FlurryNativeViewHolder(staticNativeViewHolder, videoView);
+        }
+    }
+}
diff --git a/extras/src/com/mopub/nativeads/FlurryViewBinder.java b/extras/src/com/mopub/nativeads/FlurryViewBinder.java
new file mode 100644
index 00000000..0699f418
--- /dev/null
+++ b/extras/src/com/mopub/nativeads/FlurryViewBinder.java
@@ -0,0 +1,36 @@
+package com.mopub.nativeads;
+
+import android.support.annotation.NonNull;
+
+/**
+ * Tested with Flurry 6.5.0
+ */
+public class FlurryViewBinder {
+    ViewBinder staticViewBinder;
+    int videoViewId;
+
+    private FlurryViewBinder(@NonNull Builder builder) {
+        this.staticViewBinder = builder.staticViewBinder;
+        this.videoViewId = builder.videoViewId;
+    }
+
+    public final static class Builder {
+        ViewBinder staticViewBinder;
+        int videoViewId;
+
+        public Builder(final ViewBinder staticViewBinder) {
+            this.staticViewBinder = staticViewBinder;
+        }
+
+        @NonNull
+        public final Builder videoViewId(final int videoViewId) {
+            this.videoViewId = videoViewId;
+            return this;
+        }
+
+        @NonNull
+        public final FlurryViewBinder build() {
+            return new FlurryViewBinder(this);
+        }
+    }
+}
diff --git a/extras/src/com/mopub/nativeads/InMobiNative.java b/extras/src/com/mopub/nativeads/InMobiNative.java
deleted file mode 100644
index d6a0e15e..00000000
--- a/extras/src/com/mopub/nativeads/InMobiNative.java
+++ /dev/null
@@ -1,229 +0,0 @@
-package com.mopub.nativeads;
-
-import android.content.Context;
-import android.util.Log;
-import android.view.View;
-import android.view.ViewGroup;
-
-import com.inmobi.commons.InMobi;
-import com.inmobi.monetization.IMErrorCode;
-import com.inmobi.monetization.IMNative;
-import com.inmobi.monetization.IMNativeListener;
-import com.mopub.common.logging.MoPubLog;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.json.JSONTokener;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-
-import static com.mopub.common.util.Json.getJsonValue;
-import static com.mopub.common.util.Numbers.parseDouble;
-import static com.mopub.nativeads.NativeImageHelper.preCacheImages;
-
-/*
- * Tested with InMobi SDK 4.4.1
- */
-class InMobiNative extends CustomEventNative {
-    private static final String APP_ID_KEY = "app_id";
-
-    // CustomEventNative implementation
-    @Override
-    protected void loadNativeAd(final Context context,
-            final CustomEventNativeListener customEventNativeListener,
-            final Map<String, Object> localExtras,
-            final Map<String, String> serverExtras) {
-
-        final String appId;
-        if (extrasAreValid(serverExtras)) {
-            appId = serverExtras.get(APP_ID_KEY);
-        } else {
-            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        InMobi.initialize(context, appId);
-        final InMobiStaticNativeAd inMobiStaticNativeAd =
-                new InMobiStaticNativeAd(context,
-                        new ImpressionTracker(context),
-                        new NativeClickHandler(context),
-                        customEventNativeListener);
-        inMobiStaticNativeAd.setIMNative(new IMNative(inMobiStaticNativeAd));
-        inMobiStaticNativeAd.loadAd();
-    }
-
-    private boolean extrasAreValid(final Map<String, String> serverExtras) {
-        final String placementId = serverExtras.get(APP_ID_KEY);
-        return (placementId != null && placementId.length() > 0);
-    }
-
-    static class InMobiStaticNativeAd extends StaticNativeAd implements IMNativeListener {
-        static final int IMPRESSION_MIN_TIME_VIEWED = 0;
-
-        // Modifiable keys
-        static final String TITLE = "title";
-        static final String DESCRIPTION = "description";
-        static final String SCREENSHOTS = "screenshots";
-        static final String ICON = "icon";
-        static final String LANDING_URL = "landing_url";
-        static final String CTA = "cta";
-        static final String RATING = "rating";
-
-        // Constant keys
-        static final String URL = "url";
-
-        private final Context mContext;
-        private final CustomEventNativeListener mCustomEventNativeListener;
-        private final ImpressionTracker mImpressionTracker;
-        private final NativeClickHandler mNativeClickHandler;
-        private IMNative mImNative;
-
-        InMobiStaticNativeAd(final Context context,
-                final ImpressionTracker impressionTracker,
-                final NativeClickHandler nativeClickHandler,
-                final CustomEventNativeListener customEventNativeListener) {
-            mContext = context.getApplicationContext();
-            mImpressionTracker = impressionTracker;
-            mNativeClickHandler = nativeClickHandler;
-            mCustomEventNativeListener = customEventNativeListener;
-        }
-
-        void setIMNative(final IMNative imNative) {
-            mImNative = imNative;
-        }
-
-        void loadAd() {
-            mImNative.loadAd();
-        }
-
-        // IMNativeListener implementation
-        @Override
-        public void onNativeRequestSucceeded(final IMNative imNative) {
-            if (imNative == null) {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
-                return;
-            }
-
-            try {
-                parseJson(imNative);
-            } catch (JSONException e) {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.INVALID_RESPONSE);
-                return;
-            }
-
-            final List<String> imageUrls = new ArrayList<String>();
-            final String mainImageUrl = getMainImageUrl();
-            if (mainImageUrl != null) {
-                imageUrls.add(mainImageUrl);
-            }
-
-            final String iconUrl = getIconImageUrl();
-            if (iconUrl != null) {
-                imageUrls.add(iconUrl);
-            }
-
-            preCacheImages(mContext, imageUrls, new NativeImageHelper.ImageListener() {
-                @Override
-                public void onImagesCached() {
-                    mCustomEventNativeListener.onNativeAdLoaded(InMobiStaticNativeAd.this);
-                }
-
-                @Override
-                public void onImagesFailedToCache(NativeErrorCode errorCode) {
-                    mCustomEventNativeListener.onNativeAdFailed(errorCode);
-                }
-            });
-        }
-
-        @Override
-        public void onNativeRequestFailed(final IMErrorCode errorCode) {
-            if (errorCode == IMErrorCode.INVALID_REQUEST) {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_REQUEST);
-            } else if (errorCode == IMErrorCode.INTERNAL_ERROR || errorCode == IMErrorCode.NETWORK_ERROR) {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
-            } else if (errorCode == IMErrorCode.NO_FILL) {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_NO_FILL);
-            } else {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
-            }
-        }
-
-        // Lifecycle Handlers
-        @Override
-        public void prepare(final View view) {
-            if (view != null && view instanceof ViewGroup) {
-                mImNative.attachToView((ViewGroup) view);
-            } else if (view != null && view.getParent() instanceof ViewGroup) {
-                mImNative.attachToView((ViewGroup) view.getParent());
-            } else {
-                Log.e("MoPub", "InMobi did not receive ViewGroup to attachToView, unable to record impressions");
-            }
-            mImpressionTracker.addView(view, this);
-            mNativeClickHandler.setOnClickListener(view, this);
-        }
-
-        @Override
-        public void clear(final View view) {
-            mImpressionTracker.removeView(view);
-            mNativeClickHandler.clearOnClickListener(view);
-        }
-
-        @Override
-        public void destroy() {
-            mImNative.detachFromView();
-            mImpressionTracker.destroy();
-        }
-
-        // Event Handlers
-        @Override
-        public void recordImpression(final View view) {
-            notifyAdImpressed();
-        }
-
-        @Override
-        public void handleClick(final View view) {
-            notifyAdClicked();
-            mNativeClickHandler.openClickDestinationUrl(getClickDestinationUrl(), view);
-            mImNative.handleClick(null);
-        }
-
-        void parseJson(final IMNative imNative) throws JSONException  {
-            final JSONTokener jsonTokener = new JSONTokener(imNative.getContent());
-            final JSONObject jsonObject = new JSONObject(jsonTokener);
-
-            setTitle(getJsonValue(jsonObject, TITLE, String.class));
-            setText(getJsonValue(jsonObject, DESCRIPTION, String.class));
-
-            final JSONObject screenShotJsonObject = getJsonValue(jsonObject, SCREENSHOTS, JSONObject.class);
-            if (screenShotJsonObject != null) {
-                setMainImageUrl(getJsonValue(screenShotJsonObject, URL, String.class));
-            }
-
-            final JSONObject iconJsonObject = getJsonValue(jsonObject, ICON, JSONObject.class);
-            if (iconJsonObject != null) {
-                setIconImageUrl(getJsonValue(iconJsonObject, URL, String.class));
-            }
-
-            final String clickDestinationUrl = getJsonValue(jsonObject, LANDING_URL, String.class);
-            if (clickDestinationUrl == null) {
-                final String errorMessage = "InMobi JSON response missing required key: "
-                        + LANDING_URL + ". Failing over.";
-                MoPubLog.d(errorMessage);
-                throw new JSONException(errorMessage);
-            }
-
-            setClickDestinationUrl(clickDestinationUrl);
-            setCallToAction(getJsonValue(jsonObject, CTA, String.class));
-
-            try {
-                setStarRating(parseDouble(jsonObject.opt(RATING)));
-            } catch (ClassCastException e) {
-                Log.d("MoPub", "Unable to set invalid star rating for InMobi Native.");
-            }
-            setImpressionMinTimeViewed(IMPRESSION_MIN_TIME_VIEWED);
-        }
-
-    }
-}
diff --git a/extras/src/com/mopub/nativeads/MillennialNative.java b/extras/src/com/mopub/nativeads/MillennialNative.java
index 85070c23..29411d97 100644
--- a/extras/src/com/mopub/nativeads/MillennialNative.java
+++ b/extras/src/com/mopub/nativeads/MillennialNative.java
@@ -2,6 +2,7 @@
 
 import android.app.Activity;
 import android.content.Context;
+import android.os.Build;
 import android.os.Handler;
 import android.os.Looper;
 import android.util.Log;
@@ -11,6 +12,7 @@
 import com.millennialmedia.MMException;
 import com.millennialmedia.MMSDK;
 import com.millennialmedia.NativeAd;
+import com.millennialmedia.internal.ActivityListenerManager;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -18,45 +20,42 @@
 
 import static com.mopub.nativeads.NativeImageHelper.preCacheImages;
 
+/**
+ * Compatible with version 6.3 of the Millennial Media SDK.
+ */
+
 public class MillennialNative extends CustomEventNative {
     public static final String DCN_KEY = "dcn";
     public static final String APID_KEY = "adUnitID";
-    private final static String LOGCAT_TAG = "MoPub->MM-Native";
+    private final static String TAG = MillennialNative.class.getSimpleName();
     private static final Handler UI_THREAD_HANDLER = new Handler(Looper.getMainLooper());
 
     @Override
     protected void loadNativeAd(final Context context,
-            final CustomEventNativeListener listener,
-            final Map<String, Object> localExtras,
-            final Map<String, String> serverExtras) {
-
+            final CustomEventNativeListener customEventNativeListener,
+            Map<String, Object> localExtras,
+            Map<String, String> serverExtras) {
         String placementId;
         String siteId;
-
-        if ( !MMSDK.isInitialized() ) {
-            try {
-                MMSDK.initialize((Activity) context);
-            } catch ( Exception e ) {
-                Log.e(LOGCAT_TAG, "Unable to initialize the Millennial SDK-- " + e.getMessage());
-                e.printStackTrace();
-                UI_THREAD_HANDLER.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        listener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
-                    }
-                });
-                return;
-            }
+        if (!initializeSDK(context)) {
+            Log.e(TAG, "Unable to initialize MMSDK");
+            UI_THREAD_HANDLER.post(new Runnable() {
+                @Override
+                public void run() {
+                    customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
+                }
+            });
+            return;
         }
 
-        if ( extrasAreValid( serverExtras )) {
+        if (extrasAreValid(serverExtras)) {
             placementId = serverExtras.get(APID_KEY);
             siteId = serverExtras.get(DCN_KEY);
         } else {
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
                 public void run() {
-                    listener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
+                    customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
                 }
             });
             return;
@@ -64,19 +63,23 @@ public void run() {
 
         try {
             AppInfo ai = new AppInfo().setMediator("mopubsdk");
-            if ( siteId != null && siteId.length() > 0 ) {
+            if (siteId != null && siteId.length() > 0) {
                 ai = ai.setSiteId(siteId);
             } else {
                 ai = ai.setSiteId(null);
             }
 
-            MMSDK.setAppInfo(ai);
-        } catch ( IllegalStateException e ) {
-            Log.w(LOGCAT_TAG, "Caught exception: " + e.getMessage());
+            try {
+                MMSDK.setAppInfo(ai);
+            } catch (MMException e) {
+                Log.e(TAG, "MM SDK is not initialized", e);
+            }
+        } catch (IllegalStateException e) {
+            Log.w(TAG, "App info error", e);
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
                 public void run() {
-                    listener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
+                    customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
                 }
             });
             return;
@@ -89,13 +92,13 @@ public void run() {
                             nativeAd,
                             new ImpressionTracker(context),
                             new NativeClickHandler(context),
-                            listener);
+                            customEventNativeListener);
             millennialStaticNativeAd.loadAd();
-        } catch ( MMException e ) {
+        } catch (MMException e) {
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
                 public void run() {
-                    listener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
+                    customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
                 }
             });
         }
@@ -104,7 +107,7 @@ public void run() {
     private boolean extrasAreValid(final Map<String, String> serverExtras) {
         String placementId = serverExtras.get(APID_KEY);
         return (serverExtras.containsKey(APID_KEY) &&
-                placementId != null && placementId.length() > 0 );
+                placementId != null && placementId.length() > 0);
     }
 
 
@@ -132,12 +135,11 @@ public MillennialStaticNativeAd(final Context context,
         }
 
         void loadAd() {
-            Log.i(LOGCAT_TAG, "Loading native ad...");
+            Log.d(TAG, "Millennial native ad loading.");
             try {
                 mNativeAd.load(mContext, null);
             } catch (MMException e) {
-                Log.w(MillennialNative.LOGCAT_TAG, "Caught configuration error Exception.");
-                e.printStackTrace();
+                Log.w(TAG, "Configuration error", e);
                 UI_THREAD_HANDLER.post(new Runnable() {
                     @Override
                     public void run() {
@@ -177,9 +179,9 @@ public void recordImpression(final View view) {
             notifyAdImpressed();
             try {
                 mNativeAd.fireImpression();
-                Log.i(LOGCAT_TAG, "Millennial native impression recorded.");
-            } catch ( MMException m ) {
-                Log.e(LOGCAT_TAG, "Millennial native impression NOT tracked: " + m.getMessage() );
+                Log.d(TAG, "Millennial native ad impression recorded.");
+            } catch (MMException m) {
+                Log.e(TAG, "Error tracking Millennial native ad impression", m);
             }
         }
 
@@ -187,8 +189,8 @@ public void recordImpression(final View view) {
         public void handleClick(final View view) {
             notifyAdClicked();
             mNativeClickHandler.openClickDestinationUrl(getClickDestinationUrl(), view);
-            mNativeAd.fireClicked();
-            Log.i(LOGCAT_TAG, "Millennial native ad clicked!");
+            mNativeAd.fireCallToActionClicked();
+            Log.d(TAG, "Millennial native ad clicked.");
         }
 
         // MM'S Native mListener
@@ -207,8 +209,8 @@ public void onLoaded(NativeAd nativeAd) {
                 UI_THREAD_HANDLER.post(new Runnable() {
                     @Override
                     public void run() {
-                        Log.d(LOGCAT_TAG,
-                                "Millennial native encountered null destination url. Failing over.");
+                        Log.d(TAG,
+                                "Millennial native ad encountered null destination url. Failing over.");
                         mListener.onNativeAdFailed(
                                 NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
                     }
@@ -220,9 +222,13 @@ public void run() {
             setIconImageUrl(iconImageUrl);
             setMainImageUrl(mainImageUrl);
 
-            final List<String> urls = new ArrayList<String>();
-            if ( iconImageUrl != null ) { urls.add(iconImageUrl); }
-            if ( mainImageUrl != null ) { urls.add(mainImageUrl); }
+            final List<String> urls = new ArrayList<>();
+            if (iconImageUrl != null) {
+                urls.add(iconImageUrl);
+            }
+            if (mainImageUrl != null) {
+                urls.add(mainImageUrl);
+            }
 
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
@@ -232,7 +238,7 @@ public void run() {
                         @Override
                         public void onImagesCached() {
                             mListener.onNativeAdLoaded(mMillennialStaticNativeAd);
-                            Log.i(LOGCAT_TAG, "Millennial native ad loaded");
+                            Log.d(TAG, "Millennial native ad loaded.");
                         }
 
                         @Override
@@ -248,7 +254,7 @@ public void onImagesFailedToCache(NativeErrorCode errorCode) {
         @Override
         public void onLoadFailed(NativeAd nativeAd, NativeAd.NativeErrorStatus nativeErrorStatus) {
             final NativeErrorCode error;
-            switch ( nativeErrorStatus.getErrorCode() ) {
+            switch (nativeErrorStatus.getErrorCode()) {
                 case NativeAd.NativeErrorStatus.LOAD_TIMED_OUT:
                     error = NativeErrorCode.NETWORK_TIMEOUT;
                     break;
@@ -278,24 +284,46 @@ public void run() {
                     mListener.onNativeAdFailed(error);
                 }
             });
-            Log.i(LOGCAT_TAG, "Millennial native ad failed: " + nativeErrorStatus.getDescription() );
+            Log.i(TAG, "Millennial native ad failed: " + nativeErrorStatus.getDescription());
         }
 
         @Override
         public void onClicked(NativeAd nativeAd, NativeAd.ComponentName componentName, int i) {
-            Log.i(LOGCAT_TAG, "Millennial native SDK's click tracker fired.");
+            Log.d(TAG, "Millennial native ad click tracker fired.");
         }
 
         @Override
         public void onAdLeftApplication(NativeAd nativeAd) {
-            Log.i(LOGCAT_TAG, "Millennial native SDK has left the application.");
+            Log.d(TAG, "Millennial native ad has left the application.");
 
         }
 
         @Override
         public void onExpired(NativeAd nativeAd) {
-            Log.i(LOGCAT_TAG, "Millennial native ad has expired!");
+            Log.d(TAG, "Millennial native ad has expired!");
         }
 
     }
+
+    private boolean initializeSDK(Context context) {
+        try {
+            if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
+                if (!MMSDK.isInitialized()) {
+                    try {
+                        MMSDK.initialize((Activity) context, ActivityListenerManager.LifecycleState.RESUMED);
+                    } catch (Exception e) {
+                        Log.e(TAG, "Error initializing MMSDK", e);
+                        return false;
+                    }
+                }
+            } else {
+                Log.e(TAG, "MMSDK minimum supported API is 16");
+                return false;
+            }
+            return true;
+        } catch (Exception e) {
+            Log.e(TAG, "Error initializing MMSDK", e);
+            return false;
+        }
+    }
 }
diff --git a/extras/src/com/mopub/simpleadsdemo/InMobiBanner.java b/extras/src/com/mopub/simpleadsdemo/InMobiBanner.java
deleted file mode 100644
index b51fb04c..00000000
--- a/extras/src/com/mopub/simpleadsdemo/InMobiBanner.java
+++ /dev/null
@@ -1,142 +0,0 @@
-package com.mopub.simpleadsdemo;
-
-import android.app.Activity;
-import android.content.Context;
-
-import com.inmobi.commons.InMobi;
-import com.inmobi.commons.InMobi.LOG_LEVEL;
-import com.inmobi.monetization.IMBanner;
-import com.inmobi.monetization.IMBannerListener;
-import com.inmobi.monetization.IMErrorCode;
-import com.mopub.common.MoPub;
-import com.mopub.common.util.Views;
-import com.mopub.mobileads.CustomEventBanner;
-import com.mopub.mobileads.MoPubErrorCode;
-
-import java.util.HashMap;
-import java.util.Map;
-
-/*
- * Tested with InMobi SDK 4.4.1
- */
-public class InMobiBanner extends CustomEventBanner implements IMBannerListener {
-
-    private static final String DEFAULT_APP_ID = "YOUR_INMOBI_APP_ID_HERE";
-
-    /*
-     * These keys are intended for MoPub internal use. Do not modify.
-     */
-    public static final String APP_ID_KEY = "app_id";
-
-    @Override
-    protected void loadBanner(Context context,
-            CustomEventBannerListener bannerListener,
-            Map<String, Object> localExtras, Map<String, String> serverExtras) {
-        mBannerListener = bannerListener;
-        String inMobiAppId = DEFAULT_APP_ID;
-
-        Activity activity = null;
-        if (context instanceof Activity) {
-            activity = (Activity) context;
-        } else {
-            // You may also pass in an Activity Context in the localExtras map
-            // and retrieve it here.
-        }
-        if (activity == null) {
-            mBannerListener.onBannerFailed(null);
-            return;
-        }
-
-        if (extrasAreValid(serverExtras)) {
-            inMobiAppId = serverExtras.get(APP_ID_KEY);
-        }
-
-        if (!isAppInitialized) {
-            InMobi.initialize(activity, inMobiAppId);
-            isAppInitialized = true;
-        }
-
-        iMBanner = new IMBanner(activity, inMobiAppId,
-                IMBanner.INMOBI_AD_UNIT_320X50);
-
-        Map<String, String> map = new HashMap<String, String>();
-        map.put("tp", "c_mopub");
-        map.put("tp-ver", MoPub.SDK_VERSION);
-        iMBanner.setRequestParams(map);
-        InMobi.setLogLevel(LOG_LEVEL.VERBOSE);
-        iMBanner.setIMBannerListener(this);
-        iMBanner.setRefreshInterval(-1);
-        iMBanner.loadBanner();
-
-    }
-
-    private boolean extrasAreValid(Map<String, String> extras) {
-        return extras.containsKey(APP_ID_KEY);
-    }
-
-    private CustomEventBannerListener mBannerListener;
-    private IMBanner iMBanner;
-    private static boolean isAppInitialized = false;
-
-    /*
-     * Abstract methods from CustomEventBanner
-     */
-
-    @Override
-    public void onInvalidate() {
-        if (iMBanner != null) {
-            iMBanner.setIMBannerListener(null);
-            Views.removeFromParent(iMBanner);
-            iMBanner.destroy();
-        }
-    }
-
-    @Override
-    public void onBannerInteraction(IMBanner imBanner, Map<String, String> map) {
-        mBannerListener.onBannerClicked();
-    }
-
-    @Override
-    public void onBannerRequestFailed(IMBanner imBanner, IMErrorCode imErrorCode) {
-
-        if (imErrorCode == IMErrorCode.INTERNAL_ERROR) {
-            mBannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
-        } else if (imErrorCode == IMErrorCode.INVALID_REQUEST) {
-            mBannerListener
-                    .onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-        } else if (imErrorCode == IMErrorCode.NETWORK_ERROR) {
-            mBannerListener
-                    .onBannerFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-        } else if (imErrorCode == IMErrorCode.NO_FILL) {
-            mBannerListener.onBannerFailed(MoPubErrorCode.NO_FILL);
-        } else {
-            mBannerListener.onBannerFailed(MoPubErrorCode.UNSPECIFIED);
-        }
-    }
-
-    @Override
-    public void onBannerRequestSucceeded(IMBanner imBanner) {
-        if (iMBanner != null) {
-            mBannerListener.onBannerLoaded(imBanner);
-
-        } else {
-            mBannerListener.onBannerFailed(null);
-        }
-    }
-
-    @Override
-    public void onDismissBannerScreen(IMBanner imBanner) {
-        mBannerListener.onBannerCollapsed();
-    }
-
-    @Override
-    public void onLeaveApplication(IMBanner imBanner) {
-
-    }
-
-    @Override
-    public void onShowBannerScreen(IMBanner imBanner) {
-        mBannerListener.onBannerExpanded();
-    }
-
-}
diff --git a/extras/src/com/mopub/simpleadsdemo/InMobiInterstitial.java b/extras/src/com/mopub/simpleadsdemo/InMobiInterstitial.java
deleted file mode 100644
index ad45e7d8..00000000
--- a/extras/src/com/mopub/simpleadsdemo/InMobiInterstitial.java
+++ /dev/null
@@ -1,135 +0,0 @@
-package com.mopub.simpleadsdemo;
-
-import android.app.Activity;
-import android.content.Context;
-
-import com.inmobi.commons.InMobi;
-import com.inmobi.monetization.IMErrorCode;
-import com.inmobi.monetization.IMInterstitial;
-import com.inmobi.monetization.IMInterstitialListener;
-import com.mopub.common.MoPub;
-import com.mopub.mobileads.CustomEventInterstitial;
-import com.mopub.mobileads.MoPubErrorCode;
-
-import java.util.HashMap;
-import java.util.Map;
-
-/*
- * Tested with InMobi SDK  4.4.1
- */
-public class InMobiInterstitial extends CustomEventInterstitial implements IMInterstitialListener {
-
-    private static final String DEFAULT_APP_ID = "YOUR_INMOBI_APP_ID_HERE";
-
-    /*
-     * These keys are intended for MoPub internal use. Do not modify.
-     */
-    public static final String APP_ID_KEY = "app_id";
-
-    @Override
-    protected void loadInterstitial(Context context,
-                                    CustomEventInterstitialListener interstitialListener,
-                                    Map<String, Object> localExtras, Map<String, String> serverExtras) {
-        mInterstitialListener = interstitialListener;
-
-        Activity activity = null;
-        if (context instanceof Activity) {
-            activity = (Activity) context;
-        } else {
-            // You may also pass in an Activity Context in the localExtras map
-            // and retrieve it here.
-        }
-
-        if (activity == null) {
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.UNSPECIFIED);
-            return;
-        }
-
-        String inMobiAppId = DEFAULT_APP_ID;
-        if (extrasAreValid(serverExtras)) {
-            inMobiAppId = serverExtras.get(APP_ID_KEY);
-        }
-
-        if (!isAppInitialized) {
-            InMobi.initialize(activity, inMobiAppId);
-            isAppInitialized = true;
-        }
-        this.iMInterstitial = new IMInterstitial(activity, inMobiAppId);
-
-        Map<String, String> map = new HashMap<String, String>();
-        map.put("tp", "c_mopub");
-        map.put("tp-ver", MoPub.SDK_VERSION);
-        iMInterstitial.setRequestParams(map);
-        iMInterstitial.setIMInterstitialListener(this);
-        iMInterstitial.loadInterstitial();
-    }
-
-    private boolean extrasAreValid(Map<String, String> extras) {
-        return extras.containsKey(APP_ID_KEY);
-    }
-
-    private CustomEventInterstitialListener mInterstitialListener;
-    private IMInterstitial iMInterstitial;
-    private static boolean isAppInitialized = false;
-
-    /*
-     * Abstract methods from CustomEventInterstitial
-     */
-
-    @Override
-    public void showInterstitial() {
-        if (iMInterstitial != null
-                && IMInterstitial.State.READY.equals(this.iMInterstitial.getState())) {
-            iMInterstitial.show();
-        }
-    }
-
-    @Override
-    public void onInvalidate() {
-        if (iMInterstitial != null) {
-            iMInterstitial.setIMInterstitialListener(null);
-            iMInterstitial.destroy();
-        }
-    }
-
-    @Override
-    public void onDismissInterstitialScreen(IMInterstitial imInterstitial) {
-        mInterstitialListener.onInterstitialDismissed();
-    }
-
-    @Override
-    public void onInterstitialFailed(IMInterstitial imInterstitial, IMErrorCode imErrorCode) {
-        if (imErrorCode == IMErrorCode.INTERNAL_ERROR) {
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
-        } else if (imErrorCode == IMErrorCode.INVALID_REQUEST) {
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-        } else if (imErrorCode == IMErrorCode.NETWORK_ERROR) {
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-        } else if (imErrorCode == IMErrorCode.NO_FILL) {
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NO_FILL);
-        } else {
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.UNSPECIFIED);
-        }
-    }
-
-    @Override
-    public void onInterstitialInteraction(IMInterstitial imInterstitial,
-                                          Map<String, String> map) {
-        mInterstitialListener.onInterstitialClicked();
-    }
-
-    @Override
-    public void onInterstitialLoaded(IMInterstitial imInterstitial) {
-        mInterstitialListener.onInterstitialLoaded();
-    }
-
-    @Override
-    public void onLeaveApplication(IMInterstitial imInterstitial) {
-
-    }
-
-    @Override
-    public void onShowInterstitialScreen(IMInterstitial imInterstitial) {
-        mInterstitialListener.onInterstitialShown();
-    }
-}
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 1e12d0b2..65b9ee77 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Mon Jun 20 17:07:26 PDT 2016
+#Tue Sep 06 11:08:36 PDT 2016
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-all.zip
diff --git a/mopub-sample/.classpath b/mopub-sample/.classpath
deleted file mode 100644
index 3c02ddb2..00000000
--- a/mopub-sample/.classpath
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry kind="src" path="src/main/java"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
-	<classpathentry kind="output" path="bin/classes"/>
-</classpath>
diff --git a/mopub-sample/.project b/mopub-sample/.project
deleted file mode 100644
index 2ae5c5ab..00000000
--- a/mopub-sample/.project
+++ /dev/null
@@ -1,33 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>mopub-sample</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-</projectDescription>
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index 9bdae2d6..0cd8cc88 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.mopub.simpleadsdemo"
-      android:versionCode="43"
-      android:versionName="4.8.0">
+      android:versionCode="48"
+      android:versionName="4.11.0">
     <uses-sdk android:minSdkVersion="9"
               android:targetSdkVersion="23"/>
 
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index a5b268ba..e1d18cc6 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -7,9 +7,9 @@ repositories {
 
 apply plugin: 'com.android.application'
 
-group = 'com.mopub'
-description = '''MoPub Sample App'''
-version = '4.8.0'
+project.group = 'com.mopub'
+project.description = '''MoPub Sample App'''
+project.version = '4.11.0'
 
 android {
     compileSdkVersion 23
@@ -17,7 +17,7 @@ android {
     lintOptions { abortOnError false }
 
     defaultConfig {
-        versionCode 43
+        versionCode 48
         versionName version
         minSdkVersion 9
         targetSdkVersion 23
@@ -56,7 +56,7 @@ android {
 
 dependencies {
     compile 'com.android.support:support-v4:23.1.1'
-    compile 'com.google.android.gms:play-services-ads:7.8.0'
+    compile 'com.google.android.gms:play-services-ads:9.4.0'
     compile 'com.android.support:recyclerview-v7:23.1.1'
     compile project(':mopub-sdk')
 }
diff --git a/mopub-sample/proguard.cfg b/mopub-sample/proguard.cfg
index 9b84b5cf..7cb03eb0 100644
--- a/mopub-sample/proguard.cfg
+++ b/mopub-sample/proguard.cfg
@@ -12,6 +12,9 @@
 -keep class * extends com.mopub.mobileads.CustomEventInterstitial {}
 -keep class * extends com.mopub.nativeads.CustomEventNative {}
 
+# Keep methods that are accessed via reflection
+-keepclassmembers class ** { @com.mopub.common.util.ReflectionTarget *; }
+
 # Support for Android Advertiser ID.
 -keep class com.google.android.gms.common.GooglePlayServicesUtil {*;}
 -keep class com.google.android.gms.ads.identifier.AdvertisingIdClient {*;}
diff --git a/mopub-sdk/.classpath b/mopub-sdk/.classpath
deleted file mode 100644
index a4dec28b..00000000
--- a/mopub-sdk/.classpath
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry kind="src" path="src/main/java"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
-	<classpathentry kind="lib" path="libs/android-support-v4.jar"/>
-	<classpathentry kind="output" path="bin/classes"/>
-</classpath>
diff --git a/mopub-sdk/.project b/mopub-sdk/.project
deleted file mode 100644
index bd2cd4f9..00000000
--- a/mopub-sdk/.project
+++ /dev/null
@@ -1,33 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>mopub-sdk</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-</projectDescription>
diff --git a/mopub-sdk/build.gradle b/mopub-sdk/build.gradle
index 4b23d6cc..dc087560 100644
--- a/mopub-sdk/build.gradle
+++ b/mopub-sdk/build.gradle
@@ -1,233 +1,27 @@
-// This buildscript will assemble the MoPub SDK into an AAR.
+apply from: 'shared-build.gradle'
 
-buildscript {
-    repositories {
-        mavenCentral()
-        jcenter()
-    }
-
-    dependencies {
-        classpath 'com.android.tools.build:gradle:2.1.2'
-        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
-    }
-}
-
-plugins {
-    id "com.jfrog.bintray" version "1.2"
-}
-
-repositories {
-    mavenCentral()
-    jcenter()
-    flatDir {
-         dirs '../libs'
-    }
-}
-
-configurations {
-    javadocDeps
-}
-
-apply plugin: 'com.android.library'
-apply plugin: 'com.github.dcendents.android-maven'
-
-task wrapper(type: Wrapper) {
-    gradleVersion = '2.10'
-}
-
-group = 'com.mopub'
-description = '''MoPub Android SDK'''
-version = '4.8.0'
-
-android {
-    compileSdkVersion 23
-    buildToolsVersion '23.0.3'
-    lintOptions { abortOnError false }
-    useLibrary 'org.apache.http.legacy' //ENABLE IF compileSdkVersion > 23
-
-    defaultConfig {
-        versionCode 43
-        versionName version
-        minSdkVersion 16
-        targetSdkVersion 22
-        consumerProguardFiles 'proguard.txt'
-    }
-
-    sourceSets {
-        main {
-            manifest.srcFile 'AndroidManifest.xml'
-            java.srcDirs = ['src/main/java']
-            resources.srcDirs = ['src/main/resources']
-            aidl.srcDirs = ['src/main']
-            renderscript.srcDirs = ['src/main']
-            res.srcDirs = ['res']
-            assets.srcDirs = ['assets']
-        }
-    }
-
-    testOptions {
-        unitTests {
-            // This causes android platform methods from the test JAR
-            // to return null, false, etc instead of throwing an exception.
-            // We should periodically disable this and tackle the broken tests
-            // as it exposes when we are hitting platform APIs in our tests.
-            // If these tests *require* platform APIs we may want to make them
-            // connected tests instead.
-            returnDefaultValues = true
-
-            // Test JVM settings since we have a lot of classes loaded.
-            all {
-                jvmArgs '-XX:MaxPermSize=4096m', '-Xmx8192m'
-                forkEvery 200
-            }
-        }
-    }
-
-    buildTypes {
-        release {
-            minifyEnabled false
-            proguardFiles getDefaultProguardFile('proguard-android.txt'), file('proguard.txt')
-        }
-      
-        debug {
-            minifyEnabled false
-        }
-    }
-
-    // Note: You will also need a local.properties file to set the location of the SDK in the same 
-    // way that the existing SDK requires, using the sdk.dir property.
-    // Alternatively, you can set an environment variable called ANDROID_HOME. There is no 
-    // difference between the two methods, you can use the one you prefer.
-}
-
-//https://developer.android.com/topic/libraries/support-library/revisions.html
 dependencies {
-    compile fileTree(include: ['*.jar'], dir: 'libs')
-    compile project(':base')
-    compile project(':unity-ads')
-    compile 'com.android.support:support-v4:23.3.0'
-    compile 'com.android.support:support-annotations:23.3.0'
-    compile 'com.android.support:recyclerview-v7:23.3.0'
-    //compile 'com.facebook.android:audience-network-sdk:4.11.0'
-    compile 'com.google.android.gms:play-services-ads:9.0.2'
-    compile 'com.mopub.volley:mopub-volley:1.1.0'
-    compile 'com.google.android.exoplayer:exoplayer:r1.5.7'
-    testCompile 'junit:junit:4.12'
+    compile project(':mopub-sdk:mopub-sdk-base')
+    compile project(':mopub-sdk:mopub-sdk-banner')
+    compile project(':mopub-sdk:mopub-sdk-interstitial')
+    compile project(':mopub-sdk:mopub-sdk-rewardedvideo')
+    compile project(':mopub-sdk:mopub-sdk-native-static')
+    compile project(':mopub-sdk:mopub-sdk-native-video')
+
+    testCompile 'junit:junit:4.10'
     testCompile 'org.robolectric:robolectric:3.0'
     testCompile 'org.robolectric:shadows-support-v4:3.0'
     testCompile 'org.robolectric:shadows-httpclient:3.0'
     testCompile 'com.squareup:fest-android:1.0.7'
     testCompile 'org.mockito:mockito-core:1.9.5'
-    // anchor: additional dependencies
-    javadocDeps 'com.google.android.exoplayer:exoplayer:r1.5.6:sources'
-    javadocDeps 'com.mopub.volley:mopub-volley:1.1.0:sources'
-    javadocDeps 'com.android.support:support-v4:23.1.1:sources'
-    javadocDeps 'com.android.support:support-annotations:23.1.1:sources'
-    javadocDeps 'com.android.support:recyclerview-v7:23.1.1:sources'
-}
-
-def siteUrl = 'https://github.com/mopub/mopub-android-sdk'
-def gitUrl = 'https://github.com/mopub/mopub-android-sdk.git'
-// Put your credentials (bintray.user, bintray.apikey) in ~/.gradle/gradle.properties
-bintray {
-    user = project.hasProperty("bintray.user") ? project.getProperty("bintray.user") : ""
-    key = project.hasProperty("bintray.apikey") ? project.getProperty("bintray.apikey") : ""
-
-    configurations = ['archives']
-    publish = true
-
-    pkg {
-        repo = 'mopub-android-sdk'
-        name = 'mopub-android-sdk'
-
-        userOrg = 'mopub'
-        desc = description
-
-        websiteUrl = siteUrl
-        vcsUrl = gitUrl
-        licenses = ['Apache-2.0']
-
-        version {
-            name = project.version
-        }
-    }
+    testCompile 'org.powermock:powermock-module-junit4:1.6.5'
+    testCompile 'org.powermock:powermock-module-junit4-rule:1.6.5'
+    testCompile 'org.powermock:powermock-api-mockito:1.6.5'
+    testCompile 'org.powermock:powermock-classloading-xstream:1.6.5'
 }
 
-install {
-    repositories.mavenInstaller {
-        pom {
-            project {
-                packaging 'aar'
-
-                name 'MoPub Android SDK'
-                url siteUrl
-
-                licenses {
-                    license {
-                        name 'MoPub SDK License'
-                        url 'http://www.mopub.com/legal/sdk-license-agreement/'
-                    }
-                }
-                developers {
-                    // ID corresponds to GitHub user name
-                    developer {
-                        id 'nathanshayefar'
-                        name 'Nathan Shayefar'
-                        email 'nshayefar@twitter.com'
-                    }
-                    developer {
-                        id 'joeblubaugh'
-                        name 'Joe Blubaugh'
-                        email 'joeblubaugh@twitter.com'
-                    }
-                    developer {
-                        id 'steffanc'
-                        name 'Steffan Chartrand'
-                        email 'schartrand@twitter.com'
-                    }
-                    developer {
-                        id 'aornelas'
-                        name 'Andrés Ornelas'
-                        email 'andres@twitter.com'
-                    }
-                    developer {
-                        id 'bichenwang'
-                        name 'Bichen Wang'
-                        email 'bwang@twitter.com'
-                    }
-                    developer {
-                        id 'nathank33'
-                        name 'Nathan Braun'
-                        email 'nbraun@twitter.com'
-                    }
-                }
-                scm {
-                    connection gitUrl
-                    developerConnection gitUrl
-                    url siteUrl
-                }
-            }
-        }
-    }
-}
-
-task sourcesJar(type: Jar) {
-    from android.sourceSets.main.java.srcDirs
-    classifier = 'sources'
-}
-
-task javadoc(type: Javadoc) {
-    source = android.sourceSets.main.java.srcDirs
-    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
-    classpath += configurations.javadocDeps
-}
-
-task javadocJar(type: Jar, dependsOn: javadoc) {
-    classifier = 'javadoc'
-    from javadoc.destinationDir
-}
-
-artifacts {
-    archives javadocJar
-    archives sourcesJar
-}
+project.description = 'MoPub Android SDK'
+project.ext.displayName = 'MoPub Android SDK'
+project.ext.projectName = 'mopub-sdk'
+project.ext.uploadName = 'mopub-android-sdk'
+apply from: 'publisher.gradle'
diff --git a/mopub-sdk/mopub-sdk-banner/build.gradle b/mopub-sdk/mopub-sdk-banner/build.gradle
new file mode 100644
index 00000000..011a0db8
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-banner/build.gradle
@@ -0,0 +1,11 @@
+apply from: '../shared-build.gradle'
+
+dependencies {
+    compile project(':mopub-sdk:mopub-sdk-base')
+}
+
+project.description = 'MoPub Android SDK - Banner'
+project.ext.displayName = 'MoPub Android SDK - Banner'
+project.ext.projectName = 'mopub-sdk-banner'
+project.ext.uploadName = 'mopub-android-sdk-banner'
+apply from: '../publisher.gradle'
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/AndroidManifest.xml b/mopub-sdk/mopub-sdk-banner/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..5bf5c16c
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-banner/src/main/AndroidManifest.xml
@@ -0,0 +1,4 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.mopub.mobileads.banner">
+    <application/>
+</manifest>
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBanner.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBanner.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBanner.java
rename to mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBanner.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
similarity index 98%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
rename to mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
index a261bd64..ef72d1ba 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
@@ -10,6 +10,7 @@
 import com.mopub.common.Constants;
 import com.mopub.common.Preconditions;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.ReflectionTarget;
 import com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
 import com.mopub.mobileads.factories.CustomEventBannerFactory;
 
@@ -77,6 +78,7 @@ public void run() {
         mLocalExtras.put(AD_HEIGHT, mMoPubView.getAdHeight());
     }
 
+    @ReflectionTarget
     void loadAd() {
         if (isInvalidated() || mCustomEventBanner == null) {
             return;
@@ -94,6 +96,7 @@ void loadAd() {
         }
     }
 
+    @ReflectionTarget
     void invalidate() {
         if (mCustomEventBanner != null) {
             // Custom event classes can be developed by any third party and may not be tested.
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/DefaultBannerAdListener.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/DefaultBannerAdListener.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/DefaultBannerAdListener.java
rename to mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/DefaultBannerAdListener.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlBanner.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/HtmlBanner.java
rename to mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlBannerWebView.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBannerWebView.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/HtmlBannerWebView.java
rename to mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBannerWebView.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/CustomEventBannerAdapterFactory.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/CustomEventBannerAdapterFactory.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/factories/CustomEventBannerAdapterFactory.java
rename to mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/CustomEventBannerAdapterFactory.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/CustomEventBannerFactory.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/CustomEventBannerFactory.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/factories/CustomEventBannerFactory.java
rename to mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/CustomEventBannerFactory.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java
rename to mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidBanner.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mraid/MraidBanner.java
rename to mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java
diff --git a/mopub-sdk/mopub-sdk-base/build.gradle b/mopub-sdk/mopub-sdk-base/build.gradle
new file mode 100644
index 00000000..2ced0308
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/build.gradle
@@ -0,0 +1,11 @@
+apply from: '../shared-build.gradle'
+
+dependencies {
+    compile 'com.mopub.volley:mopub-volley:1.1.0'
+}
+
+project.description = 'MoPub Android SDK - Base'
+project.ext.displayName = 'MoPub Android SDK - Base'
+project.ext.projectName = 'mopub-sdk-base'
+project.ext.uploadName = 'mopub-android-sdk-base'
+apply from: '../publisher.gradle'
diff --git a/mopub-sdk/mopub-sdk-base/src/main/AndroidManifest.xml b/mopub-sdk/mopub-sdk-base/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..d480f9c5
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/AndroidManifest.xml
@@ -0,0 +1,4 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.mopub.mobileads.base">
+    <application/>
+</manifest>
diff --git a/mopub-sdk/src/main/java/com/mopub/common/AdFormat.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdFormat.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/AdFormat.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdFormat.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/AdReport.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdReport.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/AdReport.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdReport.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/AdType.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdType.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/AdType.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdType.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/AdUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/AdUrlGenerator.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/BaseLifecycleListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseLifecycleListener.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/BaseLifecycleListener.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseLifecycleListener.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/BaseUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseUrlGenerator.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/BaseUrlGenerator.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseUrlGenerator.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/BrowserWebViewClient.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BrowserWebViewClient.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/BrowserWebViewClient.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BrowserWebViewClient.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/CacheService.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CacheService.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/CacheService.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CacheService.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/ClientMetadata.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/ClientMetadata.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/CloseableLayout.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CloseableLayout.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/CloseableLayout.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CloseableLayout.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/Constants.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java
similarity index 82%
rename from mopub-sdk/src/main/java/com/mopub/common/Constants.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java
index 7c5b1462..99efe98b 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/Constants.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java
@@ -1,6 +1,7 @@
 package com.mopub.common;
 
 public class Constants {
+
     private Constants() {}
 
     public static final String HTTP = "http";
@@ -20,4 +21,7 @@ private Constants() {}
     public static final int TEN_MB = 10 * 1024 * 1024;
 
     public static final int UNUSED_REQUEST_CODE = 255;  // Acceptable range is [0, 255]
+
+    public static final String NATIVE_VIDEO_ID = "native_video_id";
+    public static final String NATIVE_VAST_VIDEO_CONFIG = "native_vast_video_config";
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/CreativeOrientation.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CreativeOrientation.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/CreativeOrientation.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CreativeOrientation.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/DataKeys.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/DataKeys.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/DiskLruCache.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DiskLruCache.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/DiskLruCache.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DiskLruCache.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/DiskLruCacheStrictLineReader.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DiskLruCacheStrictLineReader.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/DiskLruCacheStrictLineReader.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DiskLruCacheStrictLineReader.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/DiskLruCacheUtil.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DiskLruCacheUtil.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/DiskLruCacheUtil.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DiskLruCacheUtil.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/DoubleTimeTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DoubleTimeTracker.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/DoubleTimeTracker.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DoubleTimeTracker.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/DownloadResponse.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DownloadResponse.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/DownloadResponse.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DownloadResponse.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/FullAdType.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/FullAdType.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/FullAdType.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/FullAdType.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/GpsHelper.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/GpsHelper.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/HttpResponses.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/HttpResponses.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/HttpResponses.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/HttpResponses.java
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/IntentActions.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/IntentActions.java
new file mode 100644
index 00000000..00dcd8b5
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/IntentActions.java
@@ -0,0 +1,16 @@
+package com.mopub.common;
+
+/**
+ * IntentActions are used by a {@link com.mopub.mobileads.BaseBroadcastReceiver}
+ * to relay information about the current state of a custom event activity.
+ */
+public class IntentActions {
+    public static final String ACTION_INTERSTITIAL_FAIL = "com.mopub.action.interstitial.fail";
+    public static final String ACTION_INTERSTITIAL_SHOW = "com.mopub.action.interstitial.show";
+    public static final String ACTION_INTERSTITIAL_DISMISS = "com.mopub.action.interstitial.dismiss";
+    public static final String ACTION_INTERSTITIAL_CLICK = "com.mopub.action.interstitial.click";
+
+    public static final String ACTION_REWARDED_VIDEO_COMPLETE = "com.mopub.action.rewardedvideo.complete";
+
+    private IntentActions() {}
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/LifecycleListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LifecycleListener.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/LifecycleListener.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LifecycleListener.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/LocationService.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LocationService.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/LocationService.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LocationService.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MediationSettings.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MediationSettings.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/MediationSettings.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MediationSettings.java
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
new file mode 100644
index 00000000..8c3356c4
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
@@ -0,0 +1,241 @@
+package com.mopub.common;
+
+import android.app.Activity;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Reflection;
+
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+
+public class MoPub {
+    public static final String SDK_VERSION = "4.11.0";
+
+    public enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
+
+    private static final String MOPUB_REWARDED_VIDEOS =
+            "com.mopub.mobileads.MoPubRewardedVideos";
+    private static final String MOPUB_REWARDED_VIDEO_MANAGER =
+            "com.mopub.mobileads.MoPubRewardedVideoManager";
+    private static final String MOPUB_REWARDED_VIDEO_LISTENER =
+            "com.mopub.mobileads.MoPubRewardedVideoListener";
+    private static final String MOPUB_REWARDED_VIDEO_MANAGER_REQUEST_PARAMETERS =
+            "com.mopub.mobileads.MoPubRewardedVideoManager$RequestParameters";
+
+    private static final int DEFAULT_LOCATION_PRECISION = 6;
+    private static volatile LocationAwareness sLocationLocationAwareness = LocationAwareness.NORMAL;
+    private static volatile int sLocationPrecision = DEFAULT_LOCATION_PRECISION;
+    private static boolean sSearchedForUpdateActivityMethod = false;
+    @Nullable private static Method sUpdateActivityMethod;
+
+    public static LocationAwareness getLocationAwareness() {
+        return sLocationLocationAwareness;
+    }
+
+    public static void setLocationAwareness(LocationAwareness locationAwareness) {
+        sLocationLocationAwareness = locationAwareness;
+    }
+
+    public static int getLocationPrecision() {
+        return sLocationPrecision;
+    }
+
+    /**
+     * Sets the precision to use when the SDK's location awareness is set
+     * to {@link com.mopub.common.MoPub.LocationAwareness#TRUNCATED}.
+     */
+    public static void setLocationPrecision(int precision) {
+        sLocationPrecision = Math.min(Math.max(0, precision), DEFAULT_LOCATION_PRECISION);
+    }
+
+
+    //////// MoPub LifecycleListener messages ////////
+
+    public static void onCreate(@NonNull final Activity activity) {
+        MoPubLifecycleManager.getInstance(activity).onCreate(activity);
+        updateActivity(activity);
+    }
+
+    public static void onStart(@NonNull final Activity activity) {
+        MoPubLifecycleManager.getInstance(activity).onStart(activity);
+        updateActivity(activity);
+    }
+
+    public static void onPause(@NonNull final Activity activity) {
+        MoPubLifecycleManager.getInstance(activity).onPause(activity);
+    }
+
+    public static void onResume(@NonNull final Activity activity) {
+        MoPubLifecycleManager.getInstance(activity).onResume(activity);
+        updateActivity(activity);
+    }
+
+    public static void onRestart(@NonNull final Activity activity) {
+        MoPubLifecycleManager.getInstance(activity).onRestart(activity);
+        updateActivity(activity);
+    }
+
+    public static void onStop(@NonNull final Activity activity) {
+        MoPubLifecycleManager.getInstance(activity).onStop(activity);
+    }
+
+    public static void onDestroy(@NonNull final Activity activity) {
+        MoPubLifecycleManager.getInstance(activity).onDestroy(activity);
+    }
+
+    public static void onBackPressed(@NonNull final Activity activity) {
+        MoPubLifecycleManager.getInstance(activity).onBackPressed(activity);
+    }
+
+    ////////// MoPub RewardedVideoControl methods //////////
+    // These methods have been deprecated as of release 4.9 due to SDK modularization. MoPub is
+    // inside of the base module while MoPubRewardedVideos is inside of the rewarded video module.
+    // MoPubRewardedVideos methods must now be called with reflection because the publisher
+    // may have excluded the rewarded video module.
+
+
+    /**
+     * @deprecated As of release 4.9, use MoPubRewardedVideos#initializeRewardedVideo instead
+     */
+    @Deprecated
+    public static void initializeRewardedVideo(@NonNull Activity activity, MediationSettings... mediationSettings) {
+        try {
+            new Reflection.MethodBuilder(null, "initializeRewardedVideo")
+                    .setStatic(Class.forName(MOPUB_REWARDED_VIDEOS))
+                    .addParam(Activity.class, activity)
+                    .addParam(MediationSettings[].class, mediationSettings)
+                    .execute();
+        } catch (ClassNotFoundException e) {
+            MoPubLog.w("initializeRewardedVideo was called without the rewarded video module");
+        } catch (NoSuchMethodException e) {
+            MoPubLog.w("initializeRewardedVideo was called without the rewarded video module");
+        } catch (Exception e) {
+            MoPubLog.e("Error while initializing rewarded video", e);
+        }
+    }
+
+    @VisibleForTesting
+    static void updateActivity(@NonNull Activity activity) {
+        if (!sSearchedForUpdateActivityMethod) {
+            sSearchedForUpdateActivityMethod = true;
+            try {
+                Class moPubRewardedVideoManagerClass = Class.forName(
+                        MOPUB_REWARDED_VIDEO_MANAGER);
+                sUpdateActivityMethod = Reflection.getDeclaredMethodWithTraversal(
+                        moPubRewardedVideoManagerClass, "updateActivity", Activity.class);
+            } catch (ClassNotFoundException e) {
+                // rewarded video module not included
+            } catch (NoSuchMethodException e) {
+                // rewarded video module not included
+            }
+        }
+
+        if (sUpdateActivityMethod != null) {
+            try {
+                sUpdateActivityMethod.invoke(null, activity);
+            } catch (IllegalAccessException e) {
+                MoPubLog.e("Error while attempting to access the update activity method - this " +
+                        "should not have happened", e);
+            } catch (InvocationTargetException e) {
+                MoPubLog.e("Error while attempting to access the update activity method - this " +
+                        "should not have happened", e);
+            }
+        }
+    }
+
+    /**
+     * @deprecated As of release 4.9, use MoPubRewardedVideos#setRewardedVideoListener instead
+     */
+    @Deprecated
+    public static void setRewardedVideoListener(@Nullable Object listener) {
+        try {
+            Class moPubRewardedVideoListenerClass = Class.forName(
+                    MOPUB_REWARDED_VIDEO_LISTENER);
+            new Reflection.MethodBuilder(null, "setRewardedVideoListener")
+                    .setStatic(Class.forName(MOPUB_REWARDED_VIDEOS))
+                    .addParam(moPubRewardedVideoListenerClass, listener)
+                    .execute();
+        } catch (ClassNotFoundException e) {
+            MoPubLog.w("setRewardedVideoListener was called without the rewarded video module");
+        } catch (NoSuchMethodException e) {
+            MoPubLog.w("setRewardedVideoListener was called without the rewarded video module");
+        } catch (Exception e) {
+            MoPubLog.e("Error while setting rewarded video listener", e);
+        }
+    }
+
+    /**
+     * @deprecated As of release 4.9, use MoPubRewardedVideos#loadRewardedVideo instead
+     */
+    @Deprecated
+    public static void loadRewardedVideo(@NonNull String adUnitId,
+            @Nullable MediationSettings... mediationSettings) {
+        MoPub.loadRewardedVideo(adUnitId, null, mediationSettings);
+    }
+
+    /**
+     * @deprecated As of release 4.9, use MoPubRewardedVideos#loadRewardedVideo instead
+     */
+    @Deprecated
+    public static void loadRewardedVideo(@NonNull String adUnitId,
+            @Nullable Object requestParameters,
+            @Nullable MediationSettings... mediationSettings) {
+        try {
+            Class requestParametersClass = Class.forName(
+                    MOPUB_REWARDED_VIDEO_MANAGER_REQUEST_PARAMETERS);
+            new Reflection.MethodBuilder(null, "loadRewardedVideo")
+                    .setStatic(Class.forName(MOPUB_REWARDED_VIDEOS))
+                    .addParam(String.class, adUnitId)
+                    .addParam(requestParametersClass, requestParameters)
+                    .addParam(MediationSettings[].class, mediationSettings)
+                    .execute();
+        } catch (ClassNotFoundException e) {
+            MoPubLog.w("loadRewardedVideo was called without the rewarded video module");
+        } catch (NoSuchMethodException e) {
+            MoPubLog.w("loadRewardedVideo was called without the rewarded video module");
+        } catch (Exception e) {
+            MoPubLog.e("Error while loading rewarded video", e);
+        }
+    }
+
+    /**
+     * @deprecated As of release 4.9, use MoPubRewardedVideos#hasRewardedVideo instead
+     */
+    @Deprecated
+    public static boolean hasRewardedVideo(@NonNull String adUnitId) {
+        try {
+            return (boolean) new Reflection.MethodBuilder(null, "hasRewardedVideo")
+                    .setStatic(Class.forName(MOPUB_REWARDED_VIDEOS))
+                    .addParam(String.class, adUnitId)
+                    .execute();
+        } catch (ClassNotFoundException e) {
+            MoPubLog.w("hasRewardedVideo was called without the rewarded video module");
+        } catch (NoSuchMethodException e) {
+            MoPubLog.w("hasRewardedVideo was called without the rewarded video module");
+        } catch (Exception e) {
+            MoPubLog.e("Error while checking rewarded video", e);
+        }
+        return false;
+    }
+
+    /**
+     * @deprecated As of release 4.9, use MoPubRewardedVideos#showRewardedVideo instead
+     */
+    @Deprecated
+    public static void showRewardedVideo(@NonNull String adUnitId) {
+        try {
+            new Reflection.MethodBuilder(null, "showRewardedVideo")
+                    .setStatic(Class.forName(MOPUB_REWARDED_VIDEOS))
+                    .addParam(String.class, adUnitId)
+                    .execute();
+        } catch (ClassNotFoundException e) {
+            MoPubLog.w("showRewardedVideo was called without the rewarded video module");
+        } catch (NoSuchMethodException e) {
+            MoPubLog.w("showRewardedVideo was called without the rewarded video module");
+        } catch (Exception e) {
+            MoPubLog.e("Error while showing rewarded video", e);
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPubHttpUrlConnection.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubHttpUrlConnection.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/MoPubHttpUrlConnection.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubHttpUrlConnection.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPubLifecycleManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubLifecycleManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/MoPubLifecycleManager.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubLifecycleManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/Preconditions.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Preconditions.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/Preconditions.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Preconditions.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/SharedPreferencesHelper.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SharedPreferencesHelper.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/SharedPreferencesHelper.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SharedPreferencesHelper.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/UrlAction.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlAction.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/UrlAction.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlAction.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/UrlHandler.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlHandler.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/UrlHandler.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlHandler.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/UrlResolutionTask.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/UrlResolutionTask.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/VisibleForTesting.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/VisibleForTesting.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/VisibleForTesting.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/VisibleForTesting.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/BaseEvent.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/BaseEvent.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/event/BaseEvent.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/BaseEvent.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/ErrorEvent.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/ErrorEvent.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/event/ErrorEvent.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/ErrorEvent.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/Event.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/Event.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/event/Event.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/Event.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/EventDetails.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventDetails.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/event/EventDetails.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventDetails.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/EventDispatcher.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventDispatcher.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/event/EventDispatcher.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventDispatcher.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/EventRecorder.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventRecorder.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/event/EventRecorder.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventRecorder.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/EventSampler.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventSampler.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/event/EventSampler.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventSampler.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/EventSerializer.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventSerializer.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/event/EventSerializer.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventSerializer.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/LogCatEventRecorder.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/LogCatEventRecorder.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/event/LogCatEventRecorder.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/LogCatEventRecorder.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/MoPubEvents.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/MoPubEvents.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/event/MoPubEvents.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/MoPubEvents.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/NoopEventRecorder.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/NoopEventRecorder.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/event/NoopEventRecorder.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/NoopEventRecorder.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/ScribeEventRecorder.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/ScribeEventRecorder.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/event/ScribeEventRecorder.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/ScribeEventRecorder.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/factories/MethodBuilderFactory.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/factories/MethodBuilderFactory.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/factories/MethodBuilderFactory.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/factories/MethodBuilderFactory.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/logging/MoPubLog.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/logging/MoPubLog.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/AsyncTasks.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/AsyncTasks.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/AsyncTasks.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/AsyncTasks.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/DateAndTime.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DateAndTime.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/DateAndTime.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DateAndTime.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/DeviceUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DeviceUtils.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/DeviceUtils.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DeviceUtils.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Dips.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Dips.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/Dips.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Dips.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Drawables.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Drawables.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/Drawables.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Drawables.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Files.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Files.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/Files.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Files.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/ImageUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ImageUtils.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/ImageUtils.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ImageUtils.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Intents.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Intents.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/Intents.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Intents.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Json.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Json.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/Json.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Json.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/ManifestUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ManifestUtils.java
similarity index 95%
rename from mopub-sdk/src/main/java/com/mopub/common/util/ManifestUtils.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ManifestUtils.java
index 08b4306e..c248acec 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/ManifestUtils.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ManifestUtils.java
@@ -25,6 +25,8 @@
 public class ManifestUtils {
     private ManifestUtils() {}
 
+    private static final String MOPUB_ACTIVITY = "com.mopub.mobileads.MoPubActivity";
+    private static final String MRAID_ACTIVITY = "com.mopub.mobileads.MraidActivity";
     private static final List<Class<? extends Activity>> REQUIRED_WEB_VIEW_SDK_ACTIVITIES;
     private static FlagCheckUtil sFlagCheckUtil = new FlagCheckUtil();
 
@@ -36,8 +38,15 @@ private ManifestUtils() {}
         REQUIRED_WEB_VIEW_SDK_ACTIVITIES = new ArrayList<Class<? extends Activity>>(4);
         // As a convenience, full class paths are provided here, in case the MoPub SDK was imported
         // incorrectly and these files were left out.
-        REQUIRED_WEB_VIEW_SDK_ACTIVITIES.add(com.mopub.mobileads.MoPubActivity.class);
-        REQUIRED_WEB_VIEW_SDK_ACTIVITIES.add(com.mopub.mobileads.MraidActivity.class);
+        try {
+            final Class moPubActivityClass = Class.forName(MOPUB_ACTIVITY);
+            final Class mraidActivityClass = Class.forName(MRAID_ACTIVITY);
+            REQUIRED_WEB_VIEW_SDK_ACTIVITIES.add(moPubActivityClass);
+            REQUIRED_WEB_VIEW_SDK_ACTIVITIES.add(mraidActivityClass);
+        } catch (ClassNotFoundException e) {
+            MoPubLog.i("ManifestUtils running without interstitial module");
+        }
+
         REQUIRED_WEB_VIEW_SDK_ACTIVITIES.add(com.mopub.mobileads.MraidVideoPlayerActivity.class);
         REQUIRED_WEB_VIEW_SDK_ACTIVITIES.add(com.mopub.common.MoPubBrowser.class);
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/MoPubCollections.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/MoPubCollections.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/MoPubCollections.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/MoPubCollections.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Numbers.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Numbers.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/Numbers.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Numbers.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Reflection.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java
similarity index 77%
rename from mopub-sdk/src/main/java/com/mopub/common/util/Reflection.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java
index 658d5948..4c01c6c8 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/Reflection.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java
@@ -10,6 +10,10 @@
 import java.util.ArrayList;
 import java.util.List;
 
+/**
+ * NOTE: Any methods accessed via this class should be annotated with
+ * {@link com.mopub.common.util.ReflectionTarget}
+ */
 public class Reflection {
     public static class MethodBuilder {
         private final Object mInstance;
@@ -108,4 +112,22 @@ public static boolean classFound(final String className) {
 
         return constructor.newInstance();
     }
+
+    public static <T> T instantiateClassWithConstructor(@NonNull final String className,
+            @NonNull final Class<? extends T> superClass, @NonNull Class[] classes,
+            @NonNull Object[] parameters)
+            throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException,
+            InvocationTargetException, InstantiationException {
+        Preconditions.checkNotNull(className);
+        Preconditions.checkNotNull(superClass);
+        Preconditions.checkNotNull(classes);
+        Preconditions.checkNotNull(parameters);
+
+        final Class<? extends T> clazz = Class.forName(className).asSubclass(superClass);
+        // noinspection unchecked
+        final Constructor<? extends T> constructor = clazz.getDeclaredConstructor(classes);
+        constructor.setAccessible(true);
+
+        return constructor.newInstance(parameters);
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ReflectionTarget.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ReflectionTarget.java
new file mode 100644
index 00000000..6f2d46f1
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ReflectionTarget.java
@@ -0,0 +1,7 @@
+package com.mopub.common.util;
+
+/**
+ * Methods that are accessed via reflection should be annotated with this so proguard does not
+ * obfuscate them.
+ */
+public @interface ReflectionTarget { }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/ResponseHeader.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/ResponseHeader.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Streams.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Streams.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/Streams.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Streams.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Strings.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Strings.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/Strings.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Strings.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Timer.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Timer.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/Timer.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Timer.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Utils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Utils.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/Utils.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Utils.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/VersionCode.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/VersionCode.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/VersionCode.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/VersionCode.java
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Views.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Views.java
new file mode 100644
index 00000000..694ff1c5
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Views.java
@@ -0,0 +1,77 @@
+package com.mopub.common.util;
+
+import android.app.Activity;
+import android.content.Context;
+import android.support.annotation.Nullable;
+import android.support.v4.view.ViewCompat;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.mopub.common.logging.MoPubLog;
+
+public class Views {
+    public static void removeFromParent(@Nullable View view) {
+        if (view == null || view.getParent() == null) {
+            return;
+        }
+
+        if (view.getParent() instanceof ViewGroup) {
+            ((ViewGroup) view.getParent()).removeView(view);
+        }
+    }
+
+    /**
+     * Finds the topmost view in the current Activity or current view hierarchy.
+     *
+     * @param context If an Activity Context, used to obtain the Activity's DecorView. This is
+     *                ignored if it is a non-Activity Context.
+     * @param view A View in the currently displayed view hierarchy. If a null or non-Activity
+     *             Context is provided, this View's topmost parent is used to determine the
+     *             rootView.
+     * @return The topmost View in the currency Activity or current view hierarchy. Null if no
+     * applicable View can be found.
+     */
+    @Nullable
+    public static View getTopmostView(@Nullable final Context context, @Nullable final View view) {
+        final View rootViewFromActivity = getRootViewFromActivity(context);
+        final View rootViewFromView = getRootViewFromView(view);
+
+        // Prefer to use the rootView derived from the Activity's DecorView since it provides a
+        // consistent value when the View is not attached to the Window. Fall back to the passed-in
+        // View's hierarchy if necessary.
+        return rootViewFromActivity != null
+                ? rootViewFromActivity
+                : rootViewFromView;
+    }
+
+    @Nullable
+    private static View getRootViewFromActivity(@Nullable final Context context) {
+        if (!(context instanceof Activity)) {
+            return null;
+        }
+
+        return ((Activity) context).getWindow().getDecorView().findViewById(android.R.id.content);
+    }
+
+    @Nullable
+    private static View getRootViewFromView(@Nullable final View view) {
+        if (view == null) {
+            return null;
+        }
+
+        if (!ViewCompat.isAttachedToWindow(view)) {
+            MoPubLog.d("Attempting to call View#getRootView() on an unattached View.");
+        }
+
+        final View rootView = view.getRootView();
+
+        if (rootView == null) {
+            return null;
+        }
+
+        final View rootContentView = rootView.findViewById(android.R.id.content);
+        return rootContentView != null
+                ? rootContentView
+                : rootView;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Visibility.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Visibility.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/Visibility.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Visibility.java
diff --git a/mopub-sdk/src/main/java/com/mopub/exceptions/IntentNotResolvableException.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/exceptions/IntentNotResolvableException.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/exceptions/IntentNotResolvableException.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/exceptions/IntentNotResolvableException.java
diff --git a/mopub-sdk/src/main/java/com/mopub/exceptions/UrlParseException.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/exceptions/UrlParseException.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/exceptions/UrlParseException.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/exceptions/UrlParseException.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertGestureListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdAlertGestureListener.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertGestureListener.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdAlertGestureListener.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdAlertReporter.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdAlertReporter.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdRequestStatusMapping.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdRequestStatusMapping.java
similarity index 97%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/AdRequestStatusMapping.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdRequestStatusMapping.java
index 10d6625b..d86c7ac9 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdRequestStatusMapping.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdRequestStatusMapping.java
@@ -5,7 +5,7 @@
 import android.text.TextUtils;
 
 import com.mopub.common.Preconditions;
-import com.mopub.network.AdRequest;
+import com.mopub.common.VisibleForTesting;
 
 import java.util.Map;
 import java.util.TreeMap;
@@ -98,6 +98,12 @@ void clearClickUrl(@NonNull final String adUnitId) {
         }
     }
 
+    @Deprecated
+    @VisibleForTesting
+    void clearMapping() {
+        mAdUnitToAdRequestStatus.clear();
+    }
+
     private static enum LoadingStatus { LOADING, LOADED, PLAYED }
     private static class AdRequestStatus {
         @NonNull
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdTypeTranslator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseBroadcastReceiver.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseBroadcastReceiver.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/BaseBroadcastReceiver.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseBroadcastReceiver.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
similarity index 92%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
index 1a4dc8b5..a3906be0 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
@@ -6,9 +6,8 @@
 import android.content.Intent;
 import android.media.AudioManager;
 
+import com.mopub.common.Constants;
 import com.mopub.common.logging.MoPubLog;
-import com.mopub.nativeads.NativeVideoController;
-import com.mopub.nativeads.NativeVideoViewController;
 
 import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
@@ -72,8 +71,8 @@ public static Intent createIntentNativeVideo(final Context context, final long n
         final Intent intentVideoPlayerActivity = new Intent(context, MraidVideoPlayerActivity.class);
         intentVideoPlayerActivity.setFlags(FLAG_ACTIVITY_NEW_TASK);
         intentVideoPlayerActivity.putExtra(VIDEO_CLASS_EXTRAS_KEY, "native");
-        intentVideoPlayerActivity.putExtra(NativeVideoViewController.NATIVE_VIDEO_ID, nativeVideoId);
-        intentVideoPlayerActivity.putExtra(NativeVideoViewController.NATIVE_VAST_VIDEO_CONFIG, vastVideoConfig);
+        intentVideoPlayerActivity.putExtra(Constants.NATIVE_VIDEO_ID, nativeVideoId);
+        intentVideoPlayerActivity.putExtra(Constants.NATIVE_VAST_VIDEO_CONFIG, vastVideoConfig);
         return intentVideoPlayerActivity;
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
similarity index 95%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
index d1504467..6bc577f0 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
@@ -12,10 +12,9 @@
 import android.widget.RelativeLayout;
 import android.widget.VideoView;
 
+import com.mopub.common.IntentActions;
 import com.mopub.common.logging.MoPubLog;
 
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
-
 public abstract class BaseVideoViewController {
     private final Context mContext;
     private final RelativeLayout mLayout;
@@ -76,7 +75,7 @@ public ViewGroup getLayout() {
 
     protected void videoError(boolean shouldFinish) {
         MoPubLog.e("Video cannot be played.");
-        broadcastAction(ACTION_INTERSTITIAL_FAIL);
+        broadcastAction(IntentActions.ACTION_INTERSTITIAL_FAIL);
         if (shouldFinish) {
            mBaseVideoViewControllerListener.onFinish();
         }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseWebView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseWebView.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/BaseWebView.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseWebView.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/FacebookKeywordProvider.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/FacebookKeywordProvider.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/FacebookKeywordProvider.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/FacebookKeywordProvider.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewListener.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewListener.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewListener.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubErrorCode.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/MoPubErrorCode.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
similarity index 84%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
index ea850f3e..fcb0c4ab 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
@@ -15,11 +15,12 @@
 import android.widget.FrameLayout;
 
 import com.mopub.common.AdFormat;
+import com.mopub.common.AdReport;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.ManifestUtils;
+import com.mopub.common.util.Reflection;
 import com.mopub.common.util.Visibility;
 import com.mopub.mobileads.factories.AdViewControllerFactory;
-import com.mopub.mobileads.factories.CustomEventBannerAdapterFactory;
 
 import java.util.Map;
 import java.util.TreeMap;
@@ -35,9 +36,13 @@
         public void onBannerCollapsed(MoPubView banner);
     }
 
+    private final String CUSTOM_EVENT_BANNER_ADAPTER_FACTORY =
+            "com.mopub.mobileads.factories.CustomEventBannerAdapterFactory";
+
     @Nullable
     protected AdViewController mAdViewController;
-    protected CustomEventBannerAdapter mCustomEventBannerAdapter;
+    // mCustomEventBannerAdapter must be a CustomEventBannerAdapter
+    protected Object mCustomEventBannerAdapter;
 
     private Context mContext;
     private int mScreenVisibility;
@@ -126,11 +131,23 @@ public void destroy() {
         }
 
         if (mCustomEventBannerAdapter != null) {
-            mCustomEventBannerAdapter.invalidate();
+            invalidateAdapter();
             mCustomEventBannerAdapter = null;
         }
     }
 
+    private void invalidateAdapter() {
+        if (mCustomEventBannerAdapter != null) {
+            try {
+                new Reflection.MethodBuilder(mCustomEventBannerAdapter, "invalidate")
+                        .setAccessible()
+                        .execute();
+            } catch (Exception e) {
+                MoPubLog.e("Error invalidating adapter", e);
+            }
+        }
+    }
+
     Integer getAdTimeoutDelay() {
         return (mAdViewController != null) ? mAdViewController.getAdTimeoutDelay() : null;
     }
@@ -153,18 +170,31 @@ protected void loadCustomEvent(String customEventClassName, Map<String, String>
         }
 
         if (mCustomEventBannerAdapter != null) {
-            mCustomEventBannerAdapter.invalidate();
+            invalidateAdapter();
         }
 
         MoPubLog.d("Loading custom event adapter.");
 
-        mCustomEventBannerAdapter = CustomEventBannerAdapterFactory.create(
-                this,
-                customEventClassName,
-                serverExtras,
-                mAdViewController.getBroadcastIdentifier(),
-                mAdViewController.getAdReport());
-        mCustomEventBannerAdapter.loadAd();
+        if (Reflection.classFound(CUSTOM_EVENT_BANNER_ADAPTER_FACTORY)) {
+            try {
+                final Class<?> adapterFactoryClass = Class.forName(CUSTOM_EVENT_BANNER_ADAPTER_FACTORY);
+                mCustomEventBannerAdapter = new Reflection.MethodBuilder(null, "create")
+                        .setStatic(adapterFactoryClass)
+                        .addParam(MoPubView.class, this)
+                        .addParam(String.class, customEventClassName)
+                        .addParam(Map.class, serverExtras)
+                        .addParam(long.class, mAdViewController.getBroadcastIdentifier())
+                        .addParam(AdReport.class, mAdViewController.getAdReport())
+                        .execute();
+                new Reflection.MethodBuilder(mCustomEventBannerAdapter, "loadAd")
+                        .setAccessible()
+                        .execute();
+            } catch (Exception e) {
+                MoPubLog.e("Error loading custom event", e);
+            }
+        } else {
+            MoPubLog.e("Could not load custom event -- missing banner module");
+        }
     }
 
     protected void registerClick() {
@@ -204,7 +234,7 @@ private void setAdVisibility(final int visibility) {
 
     protected void adLoaded() {
         MoPubLog.d("adLoaded");
-        
+
         if (mBannerAdListener != null) {
             mBannerAdListener.onBannerLoaded(this);
         }
@@ -330,7 +360,7 @@ public boolean getTesting() {
 
     public void forceRefresh() {
         if (mCustomEventBannerAdapter != null) {
-            mCustomEventBannerAdapter.invalidate();
+            invalidateAdapter();
             mCustomEventBannerAdapter = null;
         }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
similarity index 80%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
index bbbf6322..ff1bfc63 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
@@ -2,6 +2,7 @@
 
 import android.app.Activity;
 import android.content.ActivityNotFoundException;
+import android.content.Context;
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.os.Bundle;
@@ -11,16 +12,19 @@
 import android.view.Window;
 import android.view.WindowManager;
 
+import com.mopub.common.IntentActions;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Intents;
+import com.mopub.common.util.Reflection;
 import com.mopub.mraid.MraidVideoViewController;
-import com.mopub.nativeads.NativeVideoViewController;
 
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
+import static com.mopub.mobileads.BaseBroadcastReceiver.broadcastAction;
 
 public class MraidVideoPlayerActivity extends BaseVideoPlayerActivity implements BaseVideoViewController.BaseVideoViewControllerListener {
+    private static final String NATIVE_VIDEO_VIEW_CONTROLLER =
+            "com.mopub.nativeads.NativeVideoViewController";
+
     @Nullable private BaseVideoViewController mBaseVideoController;
     private long mBroadcastIdentifier;
 
@@ -39,7 +43,7 @@ protected void onCreate(Bundle savedInstanceState) {
             // This can happen if the activity was started without valid intent extras. We leave
             // mBaseVideoController set to null, and finish the activity immediately.
 
-            broadcastAction(this, mBroadcastIdentifier, ACTION_INTERSTITIAL_FAIL);
+            broadcastAction(this, mBroadcastIdentifier, IntentActions.ACTION_INTERSTITIAL_FAIL);
             finish();
             return;
         }
@@ -110,7 +114,23 @@ private BaseVideoViewController createVideoViewController(Bundle savedInstanceSt
         } else if ("mraid".equals(clazz)) {
             return new MraidVideoViewController(this, getIntent().getExtras(), savedInstanceState, this);
         } else if ("native".equals(clazz)) {
-            return new NativeVideoViewController(this, getIntent().getExtras(), savedInstanceState, this);
+            final Class[] constructorParameterClasses = { Context.class, Bundle.class, Bundle.class,
+                    BaseVideoViewController.BaseVideoViewControllerListener.class };
+            final Object[] constructorParameterValues =
+                    { this, getIntent().getExtras(), savedInstanceState, this };
+
+            if (!Reflection.classFound(NATIVE_VIDEO_VIEW_CONTROLLER)) {
+                throw new IllegalStateException("Missing native video module");
+            }
+
+            try {
+                return Reflection.instantiateClassWithConstructor(NATIVE_VIDEO_VIEW_CONTROLLER,
+                        BaseVideoViewController.class,
+                        constructorParameterClasses,
+                        constructorParameterValues);
+            } catch (Exception e) {
+                throw new IllegalStateException("Missing native video module");
+            }
         } else {
             throw new IllegalStateException("Unsupported video type: " + clazz);
         }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/RepeatingHandlerRunnable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/RepeatingHandlerRunnable.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/RepeatingHandlerRunnable.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/RepeatingHandlerRunnable.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastAdXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAdXmlManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastAdXmlManager.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAdXmlManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManager.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastCompanionAdConfig.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastCompanionAdConfig.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastCompanionAdConfig.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastCompanionAdConfig.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastCompanionAdXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastCompanionAdXmlManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastCompanionAdXmlManager.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastCompanionAdXmlManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastErrorCode.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastErrorCode.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastErrorCode.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastErrorCode.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastExtensionParentXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionParentXmlManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastExtensionParentXmlManager.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionParentXmlManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastExtensionXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionXmlManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastExtensionXmlManager.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionXmlManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastFractionalProgressTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastFractionalProgressTracker.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastFractionalProgressTracker.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastFractionalProgressTracker.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastIconConfig.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastIconConfig.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastIconConfig.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastIconConfig.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastIconXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastIconXmlManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastIconXmlManager.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastIconXmlManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastInLineXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastInLineXmlManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastInLineXmlManager.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastInLineXmlManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java
similarity index 97%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java
index 6852e38e..78997180 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java
@@ -51,7 +51,7 @@
     private static final String SKIP = "skip";
 
     private static final int CREATIVE_VIEW_TRACKER_THRESHOLD = 0;
-    private static final int START_TRACKER_THRESHOLD = 2000;
+    private static final int START_TRACKER_THRESHOLD = 0;
     private static final float FIRST_QUARTER_MARKER = 0.25f;
     private static final float MID_POINT_MARKER = 0.50f;
     private static final float THIRD_QUARTER_MARKER = 0.75f;
@@ -142,7 +142,7 @@
     List<VastAbsoluteProgressTracker> getAbsoluteProgressTrackers() {
         List<VastAbsoluteProgressTracker> trackers = new ArrayList<VastAbsoluteProgressTracker>();
 
-        // Start trackers are treated as absolute trackers with a 2s offset.
+        // Start trackers are treated as absolute trackers set at 0 seconds
         final List<String> startTrackers = getVideoTrackersByAttribute(START);
         for (String url : startTrackers) {
             trackers.add(new VastAbsoluteProgressTracker(url, START_TRACKER_THRESHOLD));
@@ -178,9 +178,12 @@
             final List<Node> creativeViewNodes = XmlUtils.getMatchingChildNodes(trackingEvents,
                     VIDEO_TRACKER, EVENT, Collections.singletonList(CREATIVE_VIEW));
             for (Node creativeViewNode : creativeViewNodes) {
-                trackers.add(
-                        new VastAbsoluteProgressTracker(XmlUtils.getNodeValue(creativeViewNode),
-                                CREATIVE_VIEW_TRACKER_THRESHOLD));
+                final String creativeNodeValue = XmlUtils.getNodeValue(creativeViewNode);
+                if (creativeNodeValue != null) {
+                    trackers.add(
+                            new VastAbsoluteProgressTracker(creativeNodeValue,
+                                    CREATIVE_VIEW_TRACKER_THRESHOLD));
+                }
             }
         }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastMacro.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMacro.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastMacro.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMacro.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastMacroHelper.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMacroHelper.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastMacroHelper.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMacroHelper.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastManager.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastMediaXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMediaXmlManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastMediaXmlManager.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMediaXmlManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastResource.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastResource.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastResource.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastResource.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastResourceXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastResourceXmlManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastResourceXmlManager.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastResourceXmlManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastTracker.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastTracker.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastTracker.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoCloseButtonWidget.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoCloseButtonWidget.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoCloseButtonWidget.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoCloseButtonWidget.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoConfig.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoConfig.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoCtaButtonWidget.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoCtaButtonWidget.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoCtaButtonWidget.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoCtaButtonWidget.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoGradientStripWidget.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoGradientStripWidget.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoGradientStripWidget.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoGradientStripWidget.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoProgressBarWidget.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoProgressBarWidget.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoProgressBarWidget.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoProgressBarWidget.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoRadialCountdownWidget.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoRadialCountdownWidget.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoRadialCountdownWidget.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoRadialCountdownWidget.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoView.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoView.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoView.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java
similarity index 98%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java
index 1efde370..2015a857 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java
@@ -23,6 +23,7 @@
 import android.widget.RelativeLayout;
 import android.widget.VideoView;
 
+import com.mopub.common.IntentActions;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.util.Dips;
@@ -35,9 +36,6 @@
 import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
 import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
 import static com.mopub.common.MoPubBrowser.MOPUB_BROWSER_REQUEST_CODE;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.VastXmlManagerAggregator.ADS_BY_AD_SLOT_ID;
 import static com.mopub.mobileads.VastXmlManagerAggregator.SOCIAL_ACTIONS_AD_SLOT_ID;
 import static com.mopub.network.TrackingRequest.makeVastTrackingHttpRequest;
@@ -142,7 +140,7 @@
             public boolean onTouch(View view, MotionEvent motionEvent) {
                 if (motionEvent.getAction() == MotionEvent.ACTION_UP && shouldAllowClickThrough()) {
                     mIsClosing = true;
-                    broadcastAction(ACTION_INTERSTITIAL_CLICK);
+                    broadcastAction(IntentActions.ACTION_INTERSTITIAL_CLICK);
                     mVastVideoConfig.handleClickForResult(activity,
                             mIsVideoFinishedPlaying ? mDuration : getCurrentPosition(),
                             MOPUB_BROWSER_REQUEST_CODE);
@@ -265,7 +263,7 @@ protected void onCreate() {
         }
 
         mVastVideoConfig.handleImpression(getContext(), getCurrentPosition());
-        broadcastAction(ACTION_INTERSTITIAL_SHOW);
+        broadcastAction(IntentActions.ACTION_INTERSTITIAL_SHOW);
     }
 
     @Override
@@ -296,7 +294,7 @@ protected void onPause() {
     @Override
     protected void onDestroy() {
         stopRunnables();
-        broadcastAction(ACTION_INTERSTITIAL_DISMISS);
+        broadcastAction(IntentActions.ACTION_INTERSTITIAL_DISMISS);
 
         mVideoView.onDestroy();
     }
@@ -400,7 +398,7 @@ public void onCompletion(MediaPlayer mp) {
                 videoCompleted(false);
                 mIsVideoFinishedPlaying = true;
                 if (mVastVideoConfig.isRewardedVideo()) {
-                    broadcastAction(RewardedVideoBroadcastReceiver.ACTION_REWARDED_VIDEO_COMPLETE);
+                    broadcastAction(IntentActions.ACTION_REWARDED_VIDEO_COMPLETE);
                 }
 
                 // Only fire the completion tracker if we hit all the progress marks. Some Android implementations
@@ -826,7 +824,7 @@ private VastWebView createCompanionVastWebView(@NonNull final Context context,
         companionView.setVastWebViewClickListener(new VastWebView.VastWebViewClickListener() {
             @Override
             public void onVastWebViewClick() {
-                broadcastAction(ACTION_INTERSTITIAL_CLICK);
+                broadcastAction(IntentActions.ACTION_INTERSTITIAL_CLICK);
                 makeVastTrackingHttpRequest(
                         vastCompanionAdConfig.getClickTrackers(),
                         null,
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewCountdownRunnable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewCountdownRunnable.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewCountdownRunnable.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewCountdownRunnable.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastWebView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWebView.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastWebView.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWebView.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastXmlManager.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VideoDownloader.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoDownloader.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VideoDownloader.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoDownloader.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VideoViewabilityTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoViewabilityTracker.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VideoViewabilityTracker.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoViewabilityTracker.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VideoViewabilityTrackerXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoViewabilityTrackerXmlManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VideoViewabilityTrackerXmlManager.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoViewabilityTrackerXmlManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/ViewGestureDetector.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ViewGestureDetector.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/ViewGestureDetector.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ViewGestureDetector.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/AdViewControllerFactory.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/AdViewControllerFactory.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/factories/AdViewControllerFactory.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/AdViewControllerFactory.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/MoPubViewFactory.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/MoPubViewFactory.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/factories/MoPubViewFactory.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/MoPubViewFactory.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/MraidControllerFactory.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/MraidControllerFactory.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/factories/MraidControllerFactory.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/MraidControllerFactory.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/VastManagerFactory.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/VastManagerFactory.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/factories/VastManagerFactory.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/VastManagerFactory.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/BaseWidgetDrawable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/BaseWidgetDrawable.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/resource/BaseWidgetDrawable.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/BaseWidgetDrawable.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CtaButtonDrawable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CtaButtonDrawable.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/resource/CtaButtonDrawable.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CtaButtonDrawable.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/ProgressBarDrawable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/ProgressBarDrawable.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/resource/ProgressBarDrawable.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/ProgressBarDrawable.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/RadialCountdownDrawable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/RadialCountdownDrawable.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/resource/RadialCountdownDrawable.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/RadialCountdownDrawable.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/WebViews.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/util/WebViews.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/util/WebViews.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/util/WebViews.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/XmlUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/util/XmlUtils.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/util/XmlUtils.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/util/XmlUtils.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidBridge.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidBridge.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mraid/MraidBridge.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidBridge.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidCommandException.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidCommandException.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mraid/MraidCommandException.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidCommandException.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
similarity index 97%
rename from mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
index aaf3ce0c..ef97e1a9 100644
--- a/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
@@ -724,7 +724,7 @@ void handleResize(final int widthDips, final int heightDips, final int offsetXDi
             mDefaultAdContainer.setVisibility(View.INVISIBLE);
             mCloseableAdContainer.addView(mMraidWebView,
                     new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
-            getRootView().addView(mCloseableAdContainer, layoutParams);
+            getAndMemoizeRootView().addView(mCloseableAdContainer, layoutParams);
         } else if (mViewState == ViewState.RESIZED) {
             mCloseableAdContainer.setLayoutParams(layoutParams);
         }
@@ -772,7 +772,7 @@ void handleExpand(@Nullable URI uri, boolean shouldUseCustomClose)
                 mDefaultAdContainer.setVisibility(View.INVISIBLE);
                 mCloseableAdContainer.addView(mMraidWebView, layoutParams);
             }
-            getRootView().addView(mCloseableAdContainer,
+            getAndMemoizeRootView().addView(mCloseableAdContainer,
                     new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
         } else if (mViewState == ViewState.RESIZED) {
             if (isTwoPart) {
@@ -821,7 +821,7 @@ void handleClose() {
                         LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
                 mDefaultAdContainer.setVisibility(View.VISIBLE);
             }
-            getRootView().removeView(mCloseableAdContainer);
+            Views.removeFromParent(mCloseableAdContainer);
 
             // Set the view state to default
             setViewState(ViewState.DEFAULT);
@@ -831,18 +831,28 @@ void handleClose() {
         }
     }
 
+    /*
+     * Prefer this method over getAndMemoizeRootView() when the rootView is only being used for
+     * screen size calculations (and not for adding/removing anything from the view hierarchy).
+     * Having consistent return values is less important in the former case.
+     */
     @NonNull
-    @TargetApi(VERSION_CODES.KITKAT)
     private ViewGroup getRootView() {
-        if (mRootView == null) {
-            // This method should never be called this method before the container is ready, ie before
-            // handlePageLoad.
-            if (VERSION.SDK_INT >= VERSION_CODES.KITKAT) {
-                Preconditions.checkState(mDefaultAdContainer.isAttachedToWindow());
-            }
+        if (mRootView != null) {
+            return mRootView;
+        }
 
-            mRootView = (ViewGroup) mDefaultAdContainer.getRootView().findViewById(
-                    android.R.id.content);
+        final View bestRootView = Views.getTopmostView(mWeakActivity.get(),
+                mDefaultAdContainer);
+        return bestRootView instanceof ViewGroup
+                ? (ViewGroup) bestRootView
+                : mDefaultAdContainer;
+    }
+
+    @NonNull
+    private ViewGroup getAndMemoizeRootView() {
+        if (mRootView == null) {
+            mRootView = getRootView();
         }
 
         return mRootView;
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidJavascriptCommand.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidJavascriptCommand.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mraid/MraidJavascriptCommand.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidJavascriptCommand.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidNativeCommandHandler.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidNativeCommandHandler.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mraid/MraidNativeCommandHandler.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidNativeCommandHandler.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidOrientation.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidOrientation.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mraid/MraidOrientation.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidOrientation.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidScreenMetrics.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidScreenMetrics.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mraid/MraidScreenMetrics.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidScreenMetrics.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidVideoViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidVideoViewController.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mraid/MraidVideoViewController.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidVideoViewController.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidWebViewDebugListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidWebViewDebugListener.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mraid/MraidWebViewDebugListener.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidWebViewDebugListener.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/PlacementType.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/PlacementType.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mraid/PlacementType.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/PlacementType.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/ViewState.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/ViewState.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mraid/ViewState.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/ViewState.java
diff --git a/mopub-sdk/src/main/java/com/mopub/network/AdRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/network/AdRequest.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
diff --git a/mopub-sdk/src/main/java/com/mopub/network/AdResponse.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdResponse.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/network/AdResponse.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdResponse.java
diff --git a/mopub-sdk/src/main/java/com/mopub/network/BackoffPolicy.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/BackoffPolicy.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/network/BackoffPolicy.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/BackoffPolicy.java
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/CustomSSLSocketFactory.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/CustomSSLSocketFactory.java
new file mode 100644
index 00000000..087f864e
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/CustomSSLSocketFactory.java
@@ -0,0 +1,212 @@
+package com.mopub.network;
+
+import android.net.SSLCertificateSocketFactory;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Reflection;
+
+import java.io.IOException;
+import java.net.InetAddress;
+import java.net.Socket;
+import java.net.SocketException;
+import java.net.UnknownHostException;
+
+import javax.net.ssl.HostnameVerifier;
+import javax.net.ssl.HttpsURLConnection;
+import javax.net.ssl.SSLHandshakeException;
+import javax.net.ssl.SSLSocket;
+import javax.net.ssl.SSLSocketFactory;
+
+/**
+ * An {@link javax.net.ssl.SSLSocketFactory} that supports TLS settings for the MoPub ad servers.
+ */
+public class CustomSSLSocketFactory extends SSLSocketFactory {
+
+    @Nullable private SSLSocketFactory mCertificateSocketFactory;
+
+    private CustomSSLSocketFactory() {}
+
+    @NonNull
+    public static CustomSSLSocketFactory getDefault(final int handshakeTimeoutMillis) {
+        CustomSSLSocketFactory factory = new CustomSSLSocketFactory();
+        factory.mCertificateSocketFactory = SSLCertificateSocketFactory.getDefault(handshakeTimeoutMillis, null);
+
+        return factory;
+    }
+
+    // Forward all methods. Enable TLS 1.1 and 1.2 before returning.
+
+    // SocketFactory overrides
+    @Override
+    public Socket createSocket() throws IOException {
+        if (mCertificateSocketFactory == null) {
+            throw new SocketException("SSLSocketFactory was null. Unable to create socket.");
+        }
+        final Socket socket = mCertificateSocketFactory.createSocket();
+        enableTlsIfAvailable(socket);
+        return socket;
+    }
+
+    @Override
+    public Socket createSocket(final String host, final int i) throws IOException, UnknownHostException {
+        if (mCertificateSocketFactory == null) {
+            throw new SocketException("SSLSocketFactory was null. Unable to create socket.");
+        }
+        final Socket socket = mCertificateSocketFactory.createSocket(host, i);
+        enableTlsIfAvailable(socket);
+        return socket;
+    }
+
+    @Override
+    public Socket createSocket(final String host, final int port, final InetAddress localhost, final int localPort) throws IOException, UnknownHostException {
+        if (mCertificateSocketFactory == null) {
+            throw new SocketException("SSLSocketFactory was null. Unable to create socket.");
+        }
+        final Socket socket = mCertificateSocketFactory.createSocket(host, port, localhost, localPort);
+        enableTlsIfAvailable(socket);
+        return socket;
+    }
+
+    @Override
+    public Socket createSocket(final InetAddress address, final int port) throws IOException {
+        if (mCertificateSocketFactory == null) {
+            throw new SocketException("SSLSocketFactory was null. Unable to create socket.");
+        }
+        final Socket socket = mCertificateSocketFactory.createSocket(address, port);
+        enableTlsIfAvailable(socket);
+        return socket;
+    }
+
+    @Override
+    public Socket createSocket(final InetAddress address, final int port, final InetAddress localhost, final int localPort) throws IOException {
+        if (mCertificateSocketFactory == null) {
+            throw new SocketException("SSLSocketFactory was null. Unable to create socket.");
+        }
+        final Socket socket = mCertificateSocketFactory.createSocket(address, port, localhost, localPort);
+        enableTlsIfAvailable(socket);
+        return socket;
+    }
+
+    // SSLSocketFactory overrides
+
+    @Override
+    public String[] getDefaultCipherSuites() {
+        if (mCertificateSocketFactory == null) {
+            return new String[]{};
+        }
+        return mCertificateSocketFactory.getDefaultCipherSuites();
+    }
+
+    @Override
+    public String[] getSupportedCipherSuites() {
+        if (mCertificateSocketFactory == null) {
+            return new String[]{};
+        }
+        return mCertificateSocketFactory.getSupportedCipherSuites();
+    }
+
+    @Override
+    public Socket createSocket(final Socket socketParam, final String host, final int port, final boolean autoClose) throws IOException {
+        if (mCertificateSocketFactory == null) {
+            throw new SocketException("SSLSocketFactory was null. Unable to create socket.");
+        }
+
+        // Don't use the original socket and create a new one. This closes the original socket
+        // if the autoClose flag is set.
+        if (autoClose && socketParam != null) {
+            socketParam.close();
+        }
+
+        final Socket socket = mCertificateSocketFactory.createSocket(
+                InetAddressUtils.getInetAddressByName(host), port);
+        enableTlsIfAvailable(socket);
+        doManualServerNameIdentification(socket, host);
+        return socket;
+    }
+
+    /**
+     * Some versions of Android fail to do server name identification (SNI) even though they are
+     * able to. This method forces SNI to happen, if possible. SNI is only used in https
+     * connections, and this method will no-op for http connections. This method throws an
+     * SSLHandshakeException if SNI fails. This method may also throw other socket-related
+     * IOExceptions.
+     *
+     * @param socket The socket to do SNI on
+     * @param host   The host to verify the server name
+     * @throws IOException
+     */
+    private void doManualServerNameIdentification(@NonNull final Socket socket,
+            @Nullable final String host) throws IOException {
+        Preconditions.checkNotNull(socket);
+
+        if (mCertificateSocketFactory == null) {
+            throw new SocketException("SSLSocketFactory was null. Unable to create socket.");
+        }
+
+        if (socket instanceof SSLSocket) {
+            final SSLSocket sslSocket = (SSLSocket) socket;
+            setHostnameOnSocket((SSLCertificateSocketFactory) mCertificateSocketFactory, sslSocket,
+                    host);
+            verifyServerName(sslSocket, host);
+        }
+    }
+
+    /**
+     * Calling setHostname on a socket turns on the server name identification feature.
+     * Unfortunately, this was introduced in Android version 17, so we do what we can.
+     */
+    @VisibleForTesting
+    static void setHostnameOnSocket(@NonNull final SSLCertificateSocketFactory certificateSocketFactory,
+            @NonNull final SSLSocket sslSocket, @Nullable final String host) {
+        Preconditions.checkNotNull(certificateSocketFactory);
+        Preconditions.checkNotNull(sslSocket);
+
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+            certificateSocketFactory.setHostname(sslSocket, host);
+        } else {
+            try {
+                new Reflection.MethodBuilder(sslSocket, "setHostname")
+                        .addParam(String.class, host)
+                        .execute();
+            } catch (Exception e) {
+                MoPubLog.d("Unable to call setHostname() on the socket");
+            }
+        }
+    }
+
+    /**
+     * This actually performs server name identification.
+     */
+    @VisibleForTesting
+    static void verifyServerName(@NonNull final SSLSocket sslSocket,
+            @Nullable final String host) throws IOException {
+        Preconditions.checkNotNull(sslSocket);
+
+        sslSocket.startHandshake();
+        final HostnameVerifier hostnameVerifier = HttpsURLConnection.getDefaultHostnameVerifier();
+        if (!hostnameVerifier.verify(host, sslSocket.getSession())) {
+            throw new SSLHandshakeException("Server Name Identification failed.");
+        }
+    }
+
+    private void enableTlsIfAvailable(@Nullable Socket socket) {
+        if (socket instanceof SSLSocket) {
+            SSLSocket sslSocket = (SSLSocket) socket;
+            String[] supportedProtocols = sslSocket.getSupportedProtocols();
+            // Make sure all supported protocols are enabled. Android does not enable TLSv1.1 or
+            // TLSv1.2 by default.
+            sslSocket.setEnabledProtocols(supportedProtocols);
+        }
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    void setCertificateSocketFactory(@NonNull final SSLSocketFactory sslSocketFactory) {
+        mCertificateSocketFactory = sslSocketFactory;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/network/HeaderUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/HeaderUtils.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/network/HeaderUtils.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/HeaderUtils.java
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/InetAddressUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/InetAddressUtils.java
new file mode 100644
index 00000000..b522e707
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/InetAddressUtils.java
@@ -0,0 +1,20 @@
+package com.mopub.network;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import java.net.InetAddress;
+import java.net.UnknownHostException;
+
+/**
+ * This class exists to wrap InetAddress static calls since java.net classes cannot be mocked
+ */
+public class InetAddressUtils {
+    @NonNull
+    public static InetAddress getInetAddressByName(@Nullable final String host) throws UnknownHostException {
+        return InetAddress.getByName(host);
+    }
+
+    private InetAddressUtils() {
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/network/MaxWidthImageLoader.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MaxWidthImageLoader.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/network/MaxWidthImageLoader.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MaxWidthImageLoader.java
diff --git a/mopub-sdk/src/main/java/com/mopub/network/MoPubNetworkError.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubNetworkError.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/network/MoPubNetworkError.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubNetworkError.java
diff --git a/mopub-sdk/src/main/java/com/mopub/network/MoPubRequestQueue.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequestQueue.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/network/MoPubRequestQueue.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequestQueue.java
diff --git a/mopub-sdk/src/main/java/com/mopub/network/Networking.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/network/Networking.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java
diff --git a/mopub-sdk/src/main/java/com/mopub/network/PlayServicesUrlRewriter.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/PlayServicesUrlRewriter.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/network/PlayServicesUrlRewriter.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/PlayServicesUrlRewriter.java
diff --git a/mopub-sdk/src/main/java/com/mopub/network/RequestManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/RequestManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/network/RequestManager.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/RequestManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/network/RequestQueueHttpStack.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/RequestQueueHttpStack.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/network/RequestQueueHttpStack.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/RequestQueueHttpStack.java
diff --git a/mopub-sdk/src/main/java/com/mopub/network/ScribeBackoffPolicy.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/ScribeBackoffPolicy.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/network/ScribeBackoffPolicy.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/ScribeBackoffPolicy.java
diff --git a/mopub-sdk/src/main/java/com/mopub/network/ScribeRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/ScribeRequest.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/network/ScribeRequest.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/ScribeRequest.java
diff --git a/mopub-sdk/src/main/java/com/mopub/network/ScribeRequestManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/ScribeRequestManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/network/ScribeRequestManager.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/ScribeRequestManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/network/TrackingRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/TrackingRequest.java
similarity index 98%
rename from mopub-sdk/src/main/java/com/mopub/network/TrackingRequest.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/TrackingRequest.java
index f806a0a9..7d310976 100644
--- a/mopub-sdk/src/main/java/com/mopub/network/TrackingRequest.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/TrackingRequest.java
@@ -25,6 +25,9 @@
 
 public class TrackingRequest extends Request<Void> {
 
+    // Retrying may cause duplicate impressions
+    private static final int ZERO_RETRIES = 0;
+
     public interface Listener extends Response.ErrorListener {
         void onResponse(@NonNull String url);
     }
@@ -37,7 +40,7 @@ private TrackingRequest(@NonNull final String url, @Nullable final Listener list
         setShouldCache(false);
         setRetryPolicy(new DefaultRetryPolicy(
                 DefaultRetryPolicy.DEFAULT_TIMEOUT_MS,
-                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,
+                ZERO_RETRIES,
                 DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
     }
 
diff --git a/mopub-sdk/mopub-sdk-interstitial/build.gradle b/mopub-sdk/mopub-sdk-interstitial/build.gradle
new file mode 100644
index 00000000..fe56e07f
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-interstitial/build.gradle
@@ -0,0 +1,11 @@
+apply from: '../shared-build.gradle'
+
+dependencies {
+    compile project(':mopub-sdk:mopub-sdk-base')
+}
+
+project.description = 'MoPub Android SDK - Interstitial'
+project.ext.displayName = 'MoPub Android SDK - Interstitial'
+project.ext.projectName = 'mopub-sdk-interstitial'
+project.ext.uploadName = 'mopub-android-sdk-interstitial'
+apply from: '../publisher.gradle'
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/AndroidManifest.xml b/mopub-sdk/mopub-sdk-interstitial/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..643b97ff
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/AndroidManifest.xml
@@ -0,0 +1,4 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.mopub.mobileads.interstitial">
+    <application/>
+</manifest>
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
rename to mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
rename to mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
rename to mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/DefaultInterstitialAdListener.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/DefaultInterstitialAdListener.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/DefaultInterstitialAdListener.java
rename to mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/DefaultInterstitialAdListener.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java
similarity index 65%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java
rename to mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java
index 0e19182f..bfe38ea0 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java
@@ -5,6 +5,8 @@
 import android.content.IntentFilter;
 import android.support.annotation.NonNull;
 
+import com.mopub.common.IntentActions;
+
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 
@@ -12,10 +14,6 @@
     private final CustomEventInterstitialListener mCustomEventInterstitialListener;
 
 
-    public static final String ACTION_INTERSTITIAL_FAIL = "com.mopub.action.interstitial.fail";
-    public static final String ACTION_INTERSTITIAL_SHOW = "com.mopub.action.interstitial.show";
-    public static final String ACTION_INTERSTITIAL_DISMISS = "com.mopub.action.interstitial.dismiss";
-    public static final String ACTION_INTERSTITIAL_CLICK = "com.mopub.action.interstitial.click";
     private static IntentFilter sIntentFilter;
 
 
@@ -29,10 +27,10 @@ public EventForwardingBroadcastReceiver(CustomEventInterstitialListener customEv
     public IntentFilter getIntentFilter() {
         if (sIntentFilter == null) {
             sIntentFilter = new IntentFilter();
-            sIntentFilter.addAction(ACTION_INTERSTITIAL_FAIL);
-            sIntentFilter.addAction(ACTION_INTERSTITIAL_SHOW);
-            sIntentFilter.addAction(ACTION_INTERSTITIAL_DISMISS);
-            sIntentFilter.addAction(ACTION_INTERSTITIAL_CLICK);
+            sIntentFilter.addAction(IntentActions.ACTION_INTERSTITIAL_FAIL);
+            sIntentFilter.addAction(IntentActions.ACTION_INTERSTITIAL_SHOW);
+            sIntentFilter.addAction(IntentActions.ACTION_INTERSTITIAL_DISMISS);
+            sIntentFilter.addAction(IntentActions.ACTION_INTERSTITIAL_CLICK);
         }
         return sIntentFilter;
     }
@@ -48,14 +46,14 @@ public void onReceive(Context context, Intent intent) {
         }
 
         final String action = intent.getAction();
-        if (ACTION_INTERSTITIAL_FAIL.equals(action)) {
+        if (IntentActions.ACTION_INTERSTITIAL_FAIL.equals(action)) {
             mCustomEventInterstitialListener.onInterstitialFailed(NETWORK_INVALID_STATE);
-        } else if (ACTION_INTERSTITIAL_SHOW.equals(action)) {
+        } else if (IntentActions.ACTION_INTERSTITIAL_SHOW.equals(action)) {
             mCustomEventInterstitialListener.onInterstitialShown();
-        } else if (ACTION_INTERSTITIAL_DISMISS.equals(action)) {
+        } else if (IntentActions.ACTION_INTERSTITIAL_DISMISS.equals(action)) {
             mCustomEventInterstitialListener.onInterstitialDismissed();
             unregister(this);
-        } else if (ACTION_INTERSTITIAL_CLICK.equals(action)) {
+        } else if (IntentActions.ACTION_INTERSTITIAL_CLICK.equals(action)) {
             mCustomEventInterstitialListener.onInterstitialClicked();
         }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
rename to mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java
rename to mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubActivity.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java
similarity index 94%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/MoPubActivity.java
rename to mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java
index 4e3a4480..649ea18f 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubActivity.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java
@@ -27,10 +27,10 @@
 import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
 import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
 import static com.mopub.mobileads.HtmlWebViewClient.MOPUB_FAIL_LOAD;
 import static com.mopub.mobileads.HtmlWebViewClient.MOPUB_FINISH_LOAD;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
similarity index 73%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
rename to mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
index fa1ba0f6..38de8ba8 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
@@ -6,31 +6,27 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
-import android.util.Log;
 
 import com.mopub.common.AdFormat;
-import com.mopub.common.DataKeys;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.factories.CustomEventInterstitialAdapterFactory;
 
 import java.util.Map;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
 
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.IDLE;
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.LOADING;
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.READY;
+import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.SHOWING;
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.DESTROYED;
 
 public class MoPubInterstitial implements CustomEventInterstitialAdapter.CustomEventInterstitialAdapterListener {
     @VisibleForTesting
     enum InterstitialState {
         /**
-         * Either waiting for something to happen or already showing an interstitial. There is no
-         * interstitial currently loaded.
+         * Waiting to something to happen. There is no interstitial currently loaded.
          */
         IDLE,
 
@@ -44,6 +40,11 @@
          */
         READY,
 
+        /**
+         * The interstitial is showing.
+         */
+        SHOWING,
+
         /**
          * No longer able to accept events as the internal InterstitialView has been destroyed.
          */
@@ -54,7 +55,7 @@
     @Nullable private CustomEventInterstitialAdapter mCustomEventInterstitialAdapter;
     @Nullable private InterstitialAdListener mInterstitialAdListener;
     @NonNull private Activity mActivity;
-    @NonNull private InterstitialState mCurrentInterstitialState;
+    @NonNull private volatile InterstitialState mCurrentInterstitialState;
 
     public interface InterstitialAdListener {
         void onInterstitialLoaded(MoPubInterstitial interstitial);
@@ -81,47 +82,45 @@ private boolean attemptStateTransition(@NonNull final InterstitialState endState
      * Attempts to transition to the new state. All state transitions should go through this method.
      * Other methods should not be modifying mCurrentInterstitialState.
      *
-     * @param endState The desired end state.
-     * @param forced   If possible, forces the state to go to a particular state. This is not
-     *                 guaranteed to always set the endState but will allow certain irregular
-     *                 state transitions.
+     * @param endState     The desired end state.
+     * @param forceRefresh Whether or not this is part of a forceRefresh transition. Force
+     *                     refresh can happen from IDLE, LOADING, or READY. It will ignore
+     *                     the currently loading or loaded ad and attempt to load another.
      * @return {@code true} if a state change happened, {@code false} if no state change happened.
      */
     @VisibleForTesting
-    boolean attemptStateTransition(@NonNull final InterstitialState endState,
-            boolean forced) {
+    synchronized boolean attemptStateTransition(@NonNull final InterstitialState endState,
+            boolean forceRefresh) {
         Preconditions.checkNotNull(endState);
 
         final InterstitialState startState = mCurrentInterstitialState;
 
         /**
-         * There are 32 potential cases. Any combination that is a no op will not be enumerated
-         * and returns false. The usual case goes IDLE -> LOADING -> READY -> IDLE. At any point,
-         * a forced transition into IDLE resets MoPubInterstitial and clears the interstitial
-         * adapter. Also, MoPubInterstitial can be destroyed arbitrarily, and once this is
-         * destroyed, it no longer can perform any state transitions.
+         * There are 50 potential cases. Any combination that is a no op will not be enumerated
+         * and returns false. The usual case goes IDLE -> LOADING -> READY -> SHOWING -> IDLE. At
+         * most points, having the force refresh flag into IDLE resets MoPubInterstitial and clears
+         * the interstitial adapter. This cannot happen while an interstitial is showing. Also,
+         * MoPubInterstitial can be destroyed arbitrarily, and once this is destroyed, it no longer
+         * can perform any state transitions.
          */
         switch (startState) {
             case IDLE:
                 switch(endState) {
-                    case IDLE:
-                        if (!forced) {
-                            // This is the case of trying to show(), but nothing was loaded
-                            MoPubLog.d("No interstitial loading or loaded.");
-                        }
-                        // Forcing into IDLE resets the state, but it has already been reset,
-                        // so this is a no op.
-                        return false;
                     case LOADING:
                         // Going from IDLE to LOADING is the usual load case
                         invalidateInterstitialAdapter();
                         mCurrentInterstitialState = LOADING;
-                        if (forced) {
+                        if (forceRefresh) {
+                            // Force-load means a pub-initiated force refresh.
                             mInterstitialView.forceRefresh();
                         } else {
+                            // Otherwise, do a normal load
                             mInterstitialView.loadAd();
                         }
                         return true;
+                    case SHOWING:
+                        MoPubLog.d("No interstitial loading or loaded.");
+                        return false;
                     case DESTROYED:
                         setInterstitialStateDestroyed();
                         return true;
@@ -131,27 +130,25 @@ boolean attemptStateTransition(@NonNull final InterstitialState endState,
             case LOADING:
                 switch (endState) {
                     case IDLE:
-                        if (forced) {
-                            // Being forced back into idle while loading resets MoPubInterstitial.
-                            invalidateInterstitialAdapter();
-                            mCurrentInterstitialState = IDLE;
-                            return true;
-                        } else {
-                            // No force to IDLE means show(), but this is still loading
-                            MoPubLog.d("Interstitial is not ready to be shown yet.");
-                            return false;
-                        }
+                        // Being forced back into idle while loading resets MoPubInterstitial while
+                        // not forced just means the load failed. Either way, it should reset the
+                        // state back into IDLE.
+                        invalidateInterstitialAdapter();
+                        mCurrentInterstitialState = IDLE;
+                        return true;
                     case LOADING:
-                        if (!forced) {
+                        if (!forceRefresh) {
                             // Cannot load more than one interstitial at a time
                             MoPubLog.d("Already loading an interstitial.");
                         }
-                        // If forced, it means a failover started. This is still loading.
                         return false;
                     case READY:
                         // This is the usual load finished transition
                         mCurrentInterstitialState = READY;
                         return true;
+                    case SHOWING:
+                        MoPubLog.d("Interstitial is not ready to be shown yet.");
+                        return false;
                     case DESTROYED:
                         setInterstitialStateDestroyed();
                         return true;
@@ -161,16 +158,13 @@ boolean attemptStateTransition(@NonNull final InterstitialState endState,
             case READY:
                 switch (endState) {
                     case IDLE:
-                        mCurrentInterstitialState = IDLE;
-                        if (forced) {
-                            // This happens on a reset
+                        if (forceRefresh) {
+                            // This happens on a force refresh
                             invalidateInterstitialAdapter();
-                            return true;
-                        } else {
-                            // This is the usual show interstitial when ready
-                            showCustomEventInterstitial();
+                            mCurrentInterstitialState = IDLE;
                             return true;
                         }
+                        return false;
                     case LOADING:
                         // This is to prevent loading another interstitial while one is loaded.
                         MoPubLog.d("Interstitial already loaded. Not loading another.");
@@ -179,6 +173,36 @@ boolean attemptStateTransition(@NonNull final InterstitialState endState,
                             mInterstitialAdListener.onInterstitialLoaded(this);
                         }
                         return false;
+                    case SHOWING:
+                        // This is the usual transition from ready to showing
+                        showCustomEventInterstitial();
+                        mCurrentInterstitialState = SHOWING;
+                        return true;
+                    case DESTROYED:
+                        setInterstitialStateDestroyed();
+                        return true;
+                    default:
+                        return false;
+                }
+            case SHOWING:
+                switch(endState) {
+                    case IDLE:
+                        if (forceRefresh) {
+                            MoPubLog.d("Cannot force refresh while showing an interstitial.");
+                            return false;
+                        }
+                        // This is the usual transition when done showing this interstitial
+                        invalidateInterstitialAdapter();
+                        mCurrentInterstitialState = IDLE;
+                        return true;
+                    case LOADING:
+                        if (!forceRefresh) {
+                            MoPubLog.d("Interstitial already showing. Not loading another.");
+                        }
+                        return false;
+                    case SHOWING:
+                        MoPubLog.d("Already showing an interstitial. Cannot show it again.");
+                        return false;
                     case DESTROYED:
                         setInterstitialStateDestroyed();
                         return true;
@@ -209,7 +233,7 @@ public void load() {
     }
 
     public boolean show() {
-        return attemptStateTransition(IDLE);
+        return attemptStateTransition(SHOWING);
     }
 
     public void forceRefresh() {
@@ -313,9 +337,6 @@ public void onCustomEventInterstitialLoaded() {
 
         if (mInterstitialAdListener != null) {
             mInterstitialAdListener.onInterstitialLoaded(this);
-            if (getMoPubInterstitialView().mAdViewController != null) {
-                getMoPubInterstitialView().mAdViewController.wasFailoverApplovin = null;
-            }
         }
     }
 
@@ -325,10 +346,8 @@ public void onCustomEventInterstitialFailed(@NonNull final MoPubErrorCode errorC
             return;
         }
 
-        if (mInterstitialView.loadFailUrl(errorCode)) {
-            attemptStateTransition(LOADING, true);
-        } else {
-            attemptStateTransition(IDLE, true);
+        if (!mInterstitialView.loadFailUrl(errorCode)) {
+            attemptStateTransition(IDLE);
         }
     }
 
@@ -364,6 +383,8 @@ public void onCustomEventInterstitialDismissed() {
             return;
         }
 
+        attemptStateTransition(IDLE);
+
         if (mInterstitialAdListener != null) {
             mInterstitialAdListener.onInterstitialDismissed(this);
         }
@@ -388,8 +409,6 @@ protected void loadCustomEvent(String customEventClassName, Map<String, String>
                 return;
             }
 
-            extractCountryFromExtras(serverExtras);
-
             if (TextUtils.isEmpty(customEventClassName)) {
                 MoPubLog.d("Couldn't invoke custom event because the server did not specify one.");
                 loadFailUrl(ADAPTER_NOT_FOUND);
@@ -419,51 +438,13 @@ protected void trackImpression() {
 
         @Override
         protected void adFailed(MoPubErrorCode errorCode) {
-            attemptStateTransition(IDLE, true);
+            attemptStateTransition(IDLE);
             if (mInterstitialAdListener != null) {
                 mInterstitialAdListener.onInterstitialFailed(MoPubInterstitial.this, errorCode);
             }
         }
     }
 
-    @VisibleForTesting
-    Map<String, String> extractCountryFromExtras(Map<String, String> serverExtras) {
-        Preconditions.checkNotNull(serverExtras);
-        if(serverExtras.containsKey(DataKeys.CLICKTHROUGH_URL_KEY)){
-            String url = serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY);
-            Pattern p = Pattern.compile("(?<=&country_code=).*?(?=&)");
-            Matcher m = p.matcher(url);
-            if(m.find() && mCountryCode == null){
-                mCountryCode = m.group();
-            }else {
-                HAS_LOCATION = false;
-            }
-            //else {
-                //Pattern p2 = Pattern.compile("(?<=&cid=).*?(?=&)");
-                //Matcher m2 = p2.matcher(url);
-                //if(m2.find()){
-                //    url = m2.replaceAll(m2.group()+"&city=SanFrancisco&ckv=2&country_code=US");
-                //    serverExtras.remove(DataKeys.CLICKTHROUGH_URL_KEY);
-                //    serverExtras.put(DataKeys.CLICKTHROUGH_URL_KEY, url);
-                //}
-            //}
-        }
-        return serverExtras;
-    }
-
-    @VisibleForTesting
-    void extractCityFromExtras(Map<String, String> serverExtras) {
-        Preconditions.checkNotNull(serverExtras);
-        if(serverExtras.containsKey(DataKeys.CLICKTHROUGH_URL_KEY)){
-            String url = serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY);
-            Pattern p = Pattern.compile("(?<=&city=).*?(?=&)");
-            Matcher m = p.matcher(url);
-            if(m.find()){
-                mCity = m.group();
-            }
-        }
-    }
-
     @VisibleForTesting
     @Deprecated
     void setInterstitialView(@NonNull MoPubInterstitialView interstitialView) {
@@ -489,17 +470,4 @@ void setCustomEventInterstitialAdapter(@NonNull final CustomEventInterstitialAda
             customEventInterstitialAdapter) {
         mCustomEventInterstitialAdapter = customEventInterstitialAdapter;
     }
-
-    
-    //http://www.nationsonline.org/oneworld/country_code_list.htm
-    @Nullable public String getCountryCode() {
-        return mCountryCode;
-    }
-
-    public String getCity() {
-        return mCity;
-    }
-    private String mCountryCode;
-    private String mCity;
-    public static boolean HAS_LOCATION = true;
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
similarity index 95%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java
rename to mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
index 9b21623f..7431b47d 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
@@ -31,10 +31,10 @@
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
 import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
 
 public class MraidActivity extends BaseInterstitialActivity {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
rename to mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
rename to mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialAdapterFactory.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialAdapterFactory.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialAdapterFactory.java
rename to mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialAdapterFactory.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialFactory.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialFactory.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialFactory.java
rename to mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialFactory.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactory.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactory.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactory.java
rename to mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactory.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mraid/MraidInterstitial.java
rename to mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java
diff --git a/mopub-sdk/mopub-sdk-native-static/build.gradle b/mopub-sdk/mopub-sdk-native-static/build.gradle
new file mode 100644
index 00000000..26111f70
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-native-static/build.gradle
@@ -0,0 +1,12 @@
+apply from: '../shared-build.gradle'
+
+dependencies {
+    compile project(':mopub-sdk:mopub-sdk-base')
+    compile 'com.android.support:recyclerview-v7:23.1.1'
+}
+
+project.description = 'MoPub Android SDK - Native Static'
+project.ext.displayName = 'MoPub Android SDK - Native Static'
+project.ext.projectName = 'mopub-sdk-native-static'
+project.ext.uploadName = 'mopub-android-sdk-native-static'
+apply from: '../publisher.gradle'
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/AndroidManifest.xml b/mopub-sdk/mopub-sdk-native-static/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..ee9149e4
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/AndroidManifest.xml
@@ -0,0 +1,4 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.mopub.mobileads.native_static">
+    <application/>
+</manifest>
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/AdRendererRegistry.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/AdRendererRegistry.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/AdRendererRegistry.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/AdRendererRegistry.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/AdapterHelper.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/AdapterHelper.java
similarity index 93%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/AdapterHelper.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/AdapterHelper.java
index 21206b09..9318e2ce 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/AdapterHelper.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/AdapterHelper.java
@@ -55,11 +55,18 @@ public View getAdView(@Nullable final View convertView,
                 convertView,
                 parent,
                 context,
-                nativeAd,
-                viewBinder
+                nativeAd
         );
     }
 
+    @Deprecated
+    @NonNull
+    public View getAdView(@Nullable final View convertView,
+            @Nullable final ViewGroup parent,
+            @Nullable final NativeAd nativeAd) {
+        return getAdView(convertView, parent, nativeAd, null);
+    }
+
     // Total number of content rows + ad rows
     @Deprecated
     public int shiftedCount(final int originalCount) {
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/BaseNativeAd.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/BaseNativeAd.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/BaseNativeAd.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/BaseNativeAd.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ClickInterface.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ClickInterface.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/ClickInterface.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ClickInterface.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ClientPositioningSource.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ClientPositioningSource.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/ClientPositioningSource.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ClientPositioningSource.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/CustomEventNative.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/CustomEventNative.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionInterface.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionInterface.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionInterface.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionInterface.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionTracker.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionTracker.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionTracker.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionTracker.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/IntInterval.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/IntInterval.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/IntInterval.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/IntInterval.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNative.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNative.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdLoadedListener.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNativeAdLoadedListener.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdLoadedListener.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNativeAdLoadedListener.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdPositioning.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNativeAdPositioning.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdPositioning.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNativeAdPositioning.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubRecyclerViewHolder.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerViewHolder.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/MoPubRecyclerViewHolder.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerViewHolder.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStaticNativeAdRenderer.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubStaticNativeAdRenderer.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStaticNativeAdRenderer.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubStaticNativeAdRenderer.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAd.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAd.java
similarity index 97%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/NativeAd.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAd.java
index a0f5b81b..afa9e583 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAd.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAd.java
@@ -8,7 +8,6 @@
 
 import com.mopub.common.VisibleForTesting;
 import com.mopub.nativeads.MoPubCustomEventNative.MoPubStaticNativeAd;
-import com.mopub.nativeads.MoPubCustomEventVideoNative.MoPubVideoNativeAd;
 import com.mopub.network.AdResponse;
 import com.mopub.network.TrackingRequest;
 
@@ -123,7 +122,7 @@ public boolean isDestroyed() {
      * Returns the {@link BaseNativeAd} object for this {@link NativeAd}. This object is created by
      * a {@link CustomEventNative} subclass after a successful ad request and is specific to the ad
      * source. If it comes from the MoPub Exchange or is a directly-served ad it will be of the type
-     * {@link MoPubStaticNativeAd} or {@link MoPubVideoNativeAd}. If it is returned by a mediated ad
+     * {@link MoPubStaticNativeAd} or MoPubVideoNativeAd. If it is returned by a mediated ad
      * network it may have another type.
      */
     @NonNull
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdData.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdData.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdData.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdData.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdSource.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdSource.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdSource.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdSource.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
similarity index 74%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
index 0b275866..50db633a 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
@@ -6,7 +6,6 @@
 import android.view.View;
 import android.view.ViewGroup;
 
-import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 
@@ -38,17 +37,14 @@ private NativeAdViewHelper() {
     static View getAdView(@Nullable View convertView,
             @Nullable final ViewGroup parent,
             @NonNull final Context context,
-            @Nullable final NativeAd nativeAd,
-            @Nullable final ViewBinder viewBinder) {
-
-        Preconditions.NoThrow.checkNotNull(viewBinder, "ViewBinder is null.");
+            @Nullable final NativeAd nativeAd) {
 
         if (convertView != null) {
-            clearNativeAd(context, convertView);
+            clearNativeAd(convertView);
         }
 
-        if (nativeAd == null || nativeAd.isDestroyed() || viewBinder == null) {
-            MoPubLog.d("NativeAd or viewBinder null or invalid. Returning empty view");
+        if (nativeAd == null || nativeAd.isDestroyed()) {
+            MoPubLog.d("NativeAd null or invalid. Returning empty view");
             // Only create a view if one hasn't been created already
             if (convertView == null || !ViewType.EMPTY.equals(convertView.getTag())) {
                 convertView = new View(context);
@@ -61,23 +57,21 @@ static View getAdView(@Nullable View convertView,
                 convertView = nativeAd.createAdView(context, parent);
                 convertView.setTag(ViewType.AD);
             }
-            prepareNativeAd(context, convertView, nativeAd);
+            prepareNativeAd(convertView, nativeAd);
             nativeAd.renderAdView(convertView);
         }
 
         return convertView;
     }
 
-    private static void clearNativeAd(@NonNull final Context context,
-            @NonNull final View view) {
+    private static void clearNativeAd(@NonNull final View view) {
         final NativeAd nativeAd = sNativeAdMap.get(view);
         if (nativeAd != null) {
             nativeAd.clear(view);
         }
     }
 
-    private static void prepareNativeAd(@NonNull final Context context,
-            @NonNull final View view,
+    private static void prepareNativeAd(@NonNull final View view,
             @NonNull final NativeAd nativeAd) {
         sNativeAdMap.put(view, nativeAd);
         nativeAd.prepare(view);
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeClickHandler.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeClickHandler.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/NativeClickHandler.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeClickHandler.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeErrorCode.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeErrorCode.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/NativeErrorCode.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeErrorCode.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeImageHelper.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeImageHelper.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/NativeImageHelper.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeImageHelper.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeRendererHelper.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeRendererHelper.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/NativeRendererHelper.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeRendererHelper.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/PlacementData.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PlacementData.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/PlacementData.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PlacementData.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/PositioningRequest.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningRequest.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/PositioningRequest.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningRequest.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/PositioningSource.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningSource.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/PositioningSource.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningSource.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/RequestParameters.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/RequestParameters.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/RequestParameters.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/RequestParameters.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ServerPositioningSource.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ServerPositioningSource.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/ServerPositioningSource.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ServerPositioningSource.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/SpinningProgressView.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/SpinningProgressView.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/SpinningProgressView.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/SpinningProgressView.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/StaticNativeAd.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeAd.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/StaticNativeAd.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeAd.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/StaticNativeViewHolder.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeViewHolder.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/StaticNativeViewHolder.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeViewHolder.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/TaskManager.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TaskManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/TaskManager.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TaskManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/TimestampWrapper.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TimestampWrapper.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/TimestampWrapper.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TimestampWrapper.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ViewBinder.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ViewBinder.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/ViewBinder.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ViewBinder.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/VisibilityTracker.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/VisibilityTracker.java
similarity index 94%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/VisibilityTracker.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/VisibilityTracker.java
index 39cbfc39..7453d2c4 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/VisibilityTracker.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/VisibilityTracker.java
@@ -1,6 +1,5 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
 import android.content.Context;
 import android.graphics.Rect;
 import android.os.Handler;
@@ -12,6 +11,7 @@
 
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Views;
 
 import java.lang.ref.WeakReference;
 import java.util.ArrayList;
@@ -110,7 +110,7 @@ private void setViewTreeObserver(@Nullable final Context context, @Nullable fina
             return;
         }
 
-        final View rootView = getBestRootView(context, view);
+        final View rootView = Views.getTopmostView(context, view);
         if (rootView == null) {
             MoPubLog.d("Unable to set Visibility Tracker due to no available root view.");
             return;
@@ -127,24 +127,6 @@ private void setViewTreeObserver(@Nullable final Context context, @Nullable fina
         viewTreeObserver.addOnPreDrawListener(mOnPreDrawListener);
     }
 
-    @VisibleForTesting
-    @Nullable
-    static View getBestRootView(@Nullable final Context context, @Nullable final View view) {
-        if (context instanceof Activity) {
-            return ((Activity) context).getWindow().getDecorView();
-        }
-
-        if (view != null) {
-            final View rootView = view.getRootView();
-            if (rootView != null) {
-                final View rootContentView = rootView.findViewById(android.R.id.content);
-                return rootContentView != null ? rootContentView : rootView;
-            }
-        }
-
-        return null;
-    }
-
     void setVisibilityTrackerListener(
             @Nullable final VisibilityTrackerListener visibilityTrackerListener) {
         mVisibilityTrackerListener = visibilityTrackerListener;
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/factories/CustomEventNativeFactory.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/factories/CustomEventNativeFactory.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/factories/CustomEventNativeFactory.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/factories/CustomEventNativeFactory.java
diff --git a/mopub-sdk/mopub-sdk-native-video/build.gradle b/mopub-sdk/mopub-sdk-native-video/build.gradle
new file mode 100644
index 00000000..224045ef
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-native-video/build.gradle
@@ -0,0 +1,12 @@
+apply from: '../shared-build.gradle'
+
+dependencies {
+    compile project(':mopub-sdk:mopub-sdk-native-static')
+    compile 'com.google.android.exoplayer:exoplayer:r1.5.6'
+}
+
+project.description = 'MoPub Android SDK - Native Video'
+project.ext.displayName = 'MoPub Android SDK - Native Video'
+project.ext.projectName = 'mopub-sdk-native-video'
+project.ext.uploadName = 'mopub-android-sdk-native-video'
+apply from: '../publisher.gradle'
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/AndroidManifest.xml b/mopub-sdk/mopub-sdk-native-video/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..dc41fe9a
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/AndroidManifest.xml
@@ -0,0 +1,4 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.mopub.mobileads.native_video">
+    <application/>
+</manifest>
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java
rename to mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MediaLayout.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaLayout.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/MediaLayout.java
rename to mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaLayout.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MediaViewBinder.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaViewBinder.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/MediaViewBinder.java
rename to mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaViewBinder.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MediaViewHolder.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaViewHolder.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/MediaViewHolder.java
rename to mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaViewHolder.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
rename to mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubVideoNativeAdRenderer.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubVideoNativeAdRenderer.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/MoPubVideoNativeAdRenderer.java
rename to mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubVideoNativeAdRenderer.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
rename to mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeVideoController.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java
similarity index 99%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/NativeVideoController.java
rename to mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java
index 876e2c30..33e80e12 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeVideoController.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java
@@ -132,7 +132,7 @@ public static NativeVideoController createForId(final long id,
     }
 
     @VisibleForTesting
-    static void setForId(final long id,
+    public static void setForId(final long id,
             @NonNull final NativeVideoController nativeVideoController) {
         sManagerMap.put(id, nativeVideoController);
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeVideoViewController.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
similarity index 96%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
rename to mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
index 99e7c58e..501d0d19 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
@@ -16,6 +16,7 @@
 import android.view.ViewGroup.LayoutParams;
 import android.widget.VideoView;
 
+import com.mopub.common.Constants;
 import com.mopub.common.Preconditions;
 import com.mopub.common.UrlAction;
 import com.mopub.common.UrlHandler;
@@ -34,9 +35,6 @@
 
     enum VideoState { NONE, LOADING, BUFFERING, PAUSED, PLAYING, ENDED, FAILED_LOAD }
 
-    @NonNull public static final String NATIVE_VIDEO_ID = "native_video_id";
-    @NonNull public static final String NATIVE_VAST_VIDEO_CONFIG = "native_vast_video_config";
-
     @NonNull private VideoState mVideoState;
     @NonNull private VastVideoConfig mVastVideoConfig;
     @NonNull private final NativeFullScreenVideoView mFullScreenVideoView;
@@ -57,7 +55,7 @@ public NativeVideoViewController(@NonNull final Context context,
         this(context, intentExtras, savedInstanceState, baseVideoViewControllerListener,
                 new NativeFullScreenVideoView(context,
                         context.getResources().getConfiguration().orientation,
-                        ((VastVideoConfig) intentExtras.get(NATIVE_VAST_VIDEO_CONFIG))
+                        ((VastVideoConfig) intentExtras.get(Constants.NATIVE_VAST_VIDEO_CONFIG))
                                 .getCustomCtaText()));
     }
 
@@ -74,9 +72,9 @@ public NativeVideoViewController(@NonNull final Context context,
         Preconditions.checkNotNull(fullScreenVideoView);
 
         mVideoState = VideoState.NONE;
-        mVastVideoConfig = ((VastVideoConfig) intentExtras.get(NATIVE_VAST_VIDEO_CONFIG));
+        mVastVideoConfig = ((VastVideoConfig) intentExtras.get(Constants.NATIVE_VAST_VIDEO_CONFIG));
         mFullScreenVideoView = fullScreenVideoView;
-        final long videoId = (long) intentExtras.get(NATIVE_VIDEO_ID);
+        final long videoId = (long) intentExtras.get(Constants.NATIVE_VIDEO_ID);
         mNativeVideoController = NativeVideoController.getForId(videoId);
 
         // Variables being checked below may be null but if they are it indicates
@@ -262,7 +260,6 @@ private void maybeChangeState() {
         applyState(newState);
     }
 
-
     @VisibleForTesting
     void applyState(@NonNull final VideoState videoState) {
         applyState(videoState, false);
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/VideoNativeAd.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/VideoNativeAd.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/VideoNativeAd.java
rename to mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/VideoNativeAd.java
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/build.gradle b/mopub-sdk/mopub-sdk-rewardedvideo/build.gradle
new file mode 100644
index 00000000..f9ad623a
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/build.gradle
@@ -0,0 +1,11 @@
+apply from: '../shared-build.gradle'
+
+dependencies {
+    compile project(':mopub-sdk:mopub-sdk-interstitial')
+}
+
+project.description = 'MoPub Android SDK - Rewarded Video'
+project.ext.displayName = 'MoPub Android SDK - Rewarded Video'
+project.ext.projectName = 'mopub-sdk-rewardedvideo'
+project.ext.uploadName = 'mopub-android-sdk-rewardedvideo'
+apply from: '../publisher.gradle'
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/AndroidManifest.xml b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..0e4559c9
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/AndroidManifest.xml
@@ -0,0 +1,4 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.mopub.mobileads.rewarded_video">
+    <application/>
+</manifest>
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPubReward.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/common/MoPubReward.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/MoPubReward.java
rename to mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/common/MoPubReward.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java
rename to mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java
rename to mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideoListener.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoListener.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideoListener.java
rename to mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoListener.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
similarity index 88%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
rename to mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
index c18854ed..80c50c7b 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
@@ -22,6 +22,7 @@
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.MoPubCollections;
 import com.mopub.common.util.Reflection;
+import com.mopub.common.util.ReflectionTarget;
 import com.mopub.common.util.Utils;
 import com.mopub.network.AdRequest;
 import com.mopub.network.AdResponse;
@@ -58,8 +59,7 @@
     @NonNull private final AdRequestStatusMapping mAdRequestStatus;
     @NonNull private final RewardedVideoData mRewardedVideoData;
     @Nullable private MoPubRewardedVideoListener mVideoListener;
-    private final long mBroadcastIdentifier;
-    
+
     @NonNull private final Set<MediationSettings> mGlobalMediationSettings;
     @NonNull private final Map<String, Set<MediationSettings>> mInstanceMediationSettings;
 
@@ -119,8 +119,7 @@ private MoPubRewardedVideoManager(@NonNull Activity mainActivity, MediationSetti
         mInstanceMediationSettings = new HashMap<String, Set<MediationSettings>>();
         mCustomEventTimeoutHandler = new Handler();
         mTimeoutMap = new HashMap<String, Runnable>();
-        mBroadcastIdentifier = Utils.generateUniqueId();
-        
+
         mAdRequestStatus = new AdRequestStatusMapping();
     }
 
@@ -133,6 +132,7 @@ public static synchronized void init(@NonNull Activity mainActivity, MediationSe
         }
     }
 
+    @ReflectionTarget
     public static void updateActivity(@NonNull Activity activity) {
         if (sInstance != null) {
             sInstance.mMainActivity = new WeakReference<Activity>(activity);
@@ -229,6 +229,29 @@ public static void loadVideo(@NonNull final String adUnitId,
             return;
         }
 
+        final String currentlyShowingAdUnitId =
+                sInstance.mRewardedVideoData.getCurrentlyShowingAdUnitId();
+        if (!TextUtils.isEmpty(currentlyShowingAdUnitId)) {
+            MoPubLog.d(String.format(Locale.US, "Did not queue rewarded video request for ad " +
+                    "unit %s. The video is already showing.", adUnitId));
+            return;
+        }
+
+        if (sInstance.mAdRequestStatus.canPlay(adUnitId)) {
+            MoPubLog.d(String.format(Locale.US, "Did not queue rewarded video request for ad " +
+            "unit %s. This ad unit already finished loading and is ready to show.", adUnitId));
+            postToInstance(new Runnable() {
+                @Override
+                public void run() {
+                    if (sInstance.mVideoListener != null) {
+                        sInstance.mVideoListener.onRewardedVideoLoadSuccess(adUnitId);
+                    }
+                }
+            });
+            return;
+        }
+
+
         // If any instance MediationSettings have been specified, update the internal map.
         // Note: This always clears the MediationSettings for the ad unit, whether or not any
         // MediationSettings have been provided.
@@ -292,7 +315,7 @@ public static void showVideo(@NonNull String adUnitId) {
                 sInstance.mRewardedVideoData.updateCustomEventLastShownRewardMapping(
                         customEvent.getClass(),
                         sInstance.mRewardedVideoData.getMoPubReward(adUnitId));
-                sInstance.mRewardedVideoData.setCurrentAdUnitId(adUnitId);
+                sInstance.mRewardedVideoData.setCurrentlyShowingAdUnitId(adUnitId);
                 sInstance.mAdRequestStatus.markPlayed(adUnitId);
                 customEvent.showVideo();
             } else {
@@ -354,7 +377,8 @@ private void onAdSuccess(AdResponse adResponse, String adUnitId) {
                     adResponse.getRewardedVideoCurrencyAmount());
             localExtras.put(DataKeys.AD_REPORT_KEY,
                     new AdReport(adUnitId, ClientMetadata.getInstance(mContext), adResponse));
-            localExtras.put(DataKeys.BROADCAST_IDENTIFIER_KEY, mBroadcastIdentifier);
+            localExtras.put(DataKeys.BROADCAST_IDENTIFIER_KEY, Utils.generateUniqueId());
+
             localExtras.put(DataKeys.REWARDED_VIDEO_CUSTOMER_ID,
                     mRewardedVideoData.getCustomerId());
             mRewardedVideoData.updateAdUnitRewardMapping(adUnitId,
@@ -407,7 +431,7 @@ private void onAdError(@NonNull VolleyError volleyError, @NonNull String adUnitI
             switch (err.getReason()) {
                 case NO_FILL:
                 case WARMING_UP:
-                    errorCode = MoPubErrorCode.NETWORK_NO_FILL;
+                    errorCode = MoPubErrorCode.NO_FILL;
                     break;
                 case BAD_BODY:
                 case BAD_HEADER_DATA:
@@ -476,8 +500,9 @@ protected void forEach(@NonNull final String moPubId) {
 
     public static <T extends CustomEventRewardedVideo>
     void onRewardedVideoStarted(@NonNull final Class<T> customEventClass, final String thirdPartyId) {
-        final String currentAdUnitId = sInstance.mRewardedVideoData.getCurrentAdUnitId();
-        if (TextUtils.isEmpty(currentAdUnitId)) {
+        final String currentlyShowingAdUnitId =
+                sInstance.mRewardedVideoData.getCurrentlyShowingAdUnitId();
+        if (TextUtils.isEmpty(currentlyShowingAdUnitId)) {
             postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
                 @Override
                 protected void forEach(@NonNull final String moPubId) {
@@ -488,7 +513,7 @@ protected void forEach(@NonNull final String moPubId) {
             postToInstance(new Runnable() {
                 @Override
                 public void run() {
-                    onRewardedVideoStartedAction(currentAdUnitId);
+                    onRewardedVideoStartedAction(currentlyShowingAdUnitId);
                 }
             });
         }
@@ -507,8 +532,9 @@ private static void onRewardedVideoStartedAction(@NonNull final String adUnitId)
 
     public static <T extends CustomEventRewardedVideo>
     void onRewardedVideoPlaybackError(@NonNull final Class<T> customEventClass, final String thirdPartyId, final MoPubErrorCode errorCode) {
-        final String currentAdUnitId = sInstance.mRewardedVideoData.getCurrentAdUnitId();
-        if (TextUtils.isEmpty(currentAdUnitId)) {
+        final String currentlyShowingAdUnitId =
+                sInstance.mRewardedVideoData.getCurrentlyShowingAdUnitId();
+        if (TextUtils.isEmpty(currentlyShowingAdUnitId)) {
             postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
                 @Override
                 protected void forEach(@NonNull final String moPubId) {
@@ -519,7 +545,7 @@ protected void forEach(@NonNull final String moPubId) {
             postToInstance(new Runnable() {
                 @Override
                 public void run() {
-                    onRewardedVideoPlaybackErrorAction(currentAdUnitId, errorCode);
+                    onRewardedVideoPlaybackErrorAction(currentlyShowingAdUnitId, errorCode);
                 }
             });
         }
@@ -535,8 +561,9 @@ private static void onRewardedVideoPlaybackErrorAction(@NonNull final String adU
 
     public static <T extends CustomEventRewardedVideo>
     void onRewardedVideoClicked(@NonNull final Class<T> customEventClass, final String thirdPartyId) {
-        final String currentAdUnitId = sInstance.mRewardedVideoData.getCurrentAdUnitId();
-        if (TextUtils.isEmpty(currentAdUnitId)) {
+        final String currentlyShowingAdUnitId =
+                sInstance.mRewardedVideoData.getCurrentlyShowingAdUnitId();
+        if (TextUtils.isEmpty(currentlyShowingAdUnitId)) {
             postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
                 @Override
                 protected void forEach(@NonNull final String moPubId) {
@@ -547,7 +574,7 @@ protected void forEach(@NonNull final String moPubId) {
             postToInstance(new Runnable() {
                 @Override
                 public void run() {
-                    onRewardedVideoClickedAction(currentAdUnitId);
+                    onRewardedVideoClickedAction(currentlyShowingAdUnitId);
                 }
             });
         }
@@ -563,8 +590,9 @@ private static void onRewardedVideoClickedAction(@NonNull final String adUnitId)
 
     public static <T extends CustomEventRewardedVideo>
     void onRewardedVideoClosed(@NonNull final Class<T> customEventClass, final String thirdPartyId) {
-        final String currentAdUnitId = sInstance.mRewardedVideoData.getCurrentAdUnitId();
-        if (TextUtils.isEmpty(currentAdUnitId)) {
+        final String currentlyShowingAdUnitId =
+                sInstance.mRewardedVideoData.getCurrentlyShowingAdUnitId();
+        if (TextUtils.isEmpty(currentlyShowingAdUnitId)) {
             postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
                 @Override
                 protected void forEach(@NonNull final String moPubId) {
@@ -575,10 +603,11 @@ protected void forEach(@NonNull final String moPubId) {
             postToInstance(new Runnable() {
                 @Override
                 public void run() {
-                    onRewardedVideoClosedAction(currentAdUnitId);
+                    onRewardedVideoClosedAction(currentlyShowingAdUnitId);
                 }
             });
         }
+        sInstance.mRewardedVideoData.setCurrentlyShowingAdUnitId(null);
     }
 
     private static void onRewardedVideoClosedAction(@NonNull final String adUnitId) {
@@ -591,9 +620,10 @@ private static void onRewardedVideoClosedAction(@NonNull final String adUnitId)
     public static <T extends CustomEventRewardedVideo>
     void onRewardedVideoCompleted(@NonNull final Class<T> customEventClass, final String thirdPartyId, @NonNull final MoPubReward moPubReward) {
         // Unlike other callbacks in this class, only call the listener once with all the MoPubIds in the matching set.
-        final String currentAdUnitId = sInstance.mRewardedVideoData.getCurrentAdUnitId();
+        final String currentlyShowingAdUnitId =
+                sInstance.mRewardedVideoData.getCurrentlyShowingAdUnitId();
         final String serverCompletionUrl = sInstance.mRewardedVideoData.getServerCompletionUrl(
-                currentAdUnitId);
+                currentlyShowingAdUnitId);
         if (TextUtils.isEmpty(serverCompletionUrl)) {
             postToInstance(new Runnable() {
                 @Override
@@ -601,11 +631,21 @@ public void run() {
                     final MoPubReward chosenReward = chooseReward(
                             sInstance.mRewardedVideoData.getLastShownMoPubReward(customEventClass),
                             moPubReward);
-                    final Set<String> moPubIds = sInstance.mRewardedVideoData.getMoPubIdsForAdNetwork(
-                            customEventClass, thirdPartyId);
-                    Set<String> rewarded = new HashSet<String>(moPubIds);
+
+                    Set<String> rewardedIds = new HashSet<String>();
+                    if (TextUtils.isEmpty(currentlyShowingAdUnitId)) {
+                        final Set<String> moPubIds = sInstance.mRewardedVideoData.getMoPubIdsForAdNetwork(
+                                customEventClass, thirdPartyId);
+                        rewardedIds.addAll(moPubIds);
+                    } else {
+                        // If we know which ad unit is showing, only reward the currently showing
+                        // ad unit.
+                        rewardedIds.add(currentlyShowingAdUnitId);
+                    }
+
                     if (sInstance.mVideoListener != null) {
-                        sInstance.mVideoListener.onRewardedVideoCompleted(rewarded, chosenReward);
+                        sInstance.mVideoListener.onRewardedVideoCompleted(rewardedIds,
+                                chosenReward);
                     }
                 }
             });
@@ -685,4 +725,14 @@ static RewardedVideoData getRewardedVideoData() {
         }
         return null;
     }
+
+    @Deprecated
+    @VisibleForTesting
+    @Nullable
+    static AdRequestStatusMapping getAdRequestStatusMapping() {
+        if (sInstance != null) {
+            return sInstance.mAdRequestStatus;
+        }
+        return null;
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java
new file mode 100644
index 00000000..3fd9c37b
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java
@@ -0,0 +1,60 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.MediationSettings;
+import com.mopub.common.Preconditions;
+import com.mopub.common.util.ReflectionTarget;
+
+/**
+ * MoPubRewardedVideos is a utility class that holds controller methods for other MoPub rewarded
+ * video classes.
+ */
+public class MoPubRewardedVideos {
+
+    @ReflectionTarget
+    public static void initializeRewardedVideo(@NonNull Activity activity,
+            MediationSettings... mediationSettings) {
+        Preconditions.checkNotNull(activity);
+
+        MoPubRewardedVideoManager.init(activity, mediationSettings);
+    }
+
+    @ReflectionTarget
+    public static void setRewardedVideoListener(@Nullable MoPubRewardedVideoListener listener) {
+        MoPubRewardedVideoManager.setVideoListener(listener);
+    }
+
+    @ReflectionTarget
+    public static void loadRewardedVideo(@NonNull String adUnitId,
+            @Nullable MediationSettings... mediationSettings) {
+        Preconditions.checkNotNull(adUnitId);
+
+        MoPubRewardedVideoManager.loadVideo(adUnitId, null, mediationSettings);
+    }
+
+    @ReflectionTarget
+    public static void loadRewardedVideo(@NonNull String adUnitId,
+            @Nullable MoPubRewardedVideoManager.RequestParameters requestParameters,
+            @Nullable MediationSettings... mediationSettings) {
+        Preconditions.checkNotNull(adUnitId);
+
+        MoPubRewardedVideoManager.loadVideo(adUnitId, requestParameters, mediationSettings);
+    }
+
+    @ReflectionTarget
+    public static boolean hasRewardedVideo(@NonNull String adUnitId) {
+        Preconditions.checkNotNull(adUnitId);
+
+        return MoPubRewardedVideoManager.hasVideo(adUnitId);
+    }
+
+    @ReflectionTarget
+    public static void showRewardedVideo(@NonNull String adUnitId) {
+        Preconditions.checkNotNull(adUnitId);
+
+        MoPubRewardedVideoManager.showVideo(adUnitId);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVastVideoInterstitial.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVastVideoInterstitial.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVastVideoInterstitial.java
rename to mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVastVideoInterstitial.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoBroadcastReceiver.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoBroadcastReceiver.java
similarity index 85%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoBroadcastReceiver.java
rename to mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoBroadcastReceiver.java
index e53712e2..4ec3c111 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoBroadcastReceiver.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoBroadcastReceiver.java
@@ -6,9 +6,10 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
+import com.mopub.common.IntentActions;
+
 public class RewardedVideoBroadcastReceiver extends BaseBroadcastReceiver {
 
-    public static final String ACTION_REWARDED_VIDEO_COMPLETE = "com.mopub.action.rewardedvideo.complete";
     private static IntentFilter sIntentFilter;
 
     @Nullable
@@ -26,7 +27,7 @@ public RewardedVideoBroadcastReceiver(
     public IntentFilter getIntentFilter() {
         if (sIntentFilter == null) {
             sIntentFilter = new IntentFilter();
-            sIntentFilter.addAction(ACTION_REWARDED_VIDEO_COMPLETE);
+            sIntentFilter.addAction(IntentActions.ACTION_REWARDED_VIDEO_COMPLETE);
         }
         return sIntentFilter;
     }
@@ -42,7 +43,7 @@ public void onReceive(@NonNull final Context context, @NonNull final Intent inte
         }
 
         final String action = intent.getAction();
-        if (ACTION_REWARDED_VIDEO_COMPLETE.equals(action)) {
+        if (IntentActions.ACTION_REWARDED_VIDEO_COMPLETE.equals(action)) {
             mRewardedVideoListener.onVideoComplete();
             unregister(this);
         }
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequest.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequest.java
new file mode 100644
index 00000000..50f10267
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequest.java
@@ -0,0 +1,42 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+
+import com.mopub.volley.NetworkResponse;
+import com.mopub.volley.Request;
+import com.mopub.volley.Response;
+import com.mopub.volley.RetryPolicy;
+import com.mopub.volley.toolbox.HttpHeaderParser;
+
+/**
+ * The actual class making the video completion request. Since we actually only care about the
+ * status code of the request, that's the only thing that is delivered.
+ */
+public class RewardedVideoCompletionRequest extends Request<Integer> {
+
+    public interface RewardedVideoCompletionRequestListener extends Response.ErrorListener {
+        void onResponse(Integer response);
+    }
+
+    @NonNull final RewardedVideoCompletionRequestListener mListener;
+
+    public RewardedVideoCompletionRequest(@NonNull final String url,
+            @NonNull final RetryPolicy retryPolicy,
+            @NonNull final RewardedVideoCompletionRequestListener listener) {
+        super(Method.GET, url, listener);
+        setShouldCache(false);
+        setRetryPolicy(retryPolicy);
+        mListener = listener;
+    }
+
+    @Override
+    protected Response<Integer> parseNetworkResponse(final NetworkResponse networkResponse) {
+        return Response.success(networkResponse.statusCode,
+                HttpHeaderParser.parseCacheHeaders(networkResponse));
+    }
+
+    @Override
+    protected void deliverResponse(final Integer response) {
+        mListener.onResponse(response);
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java
new file mode 100644
index 00000000..5e37c66b
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java
@@ -0,0 +1,156 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.net.Uri;
+import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.mopub.common.MoPub;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.network.Networking;
+import com.mopub.volley.DefaultRetryPolicy;
+import com.mopub.volley.RequestQueue;
+import com.mopub.volley.VolleyError;
+
+/**
+ * Handles the server-to-server rewarded video completion handshake.
+ */
+public class RewardedVideoCompletionRequestHandler implements
+        RewardedVideoCompletionRequest.RewardedVideoCompletionRequestListener {
+
+    /**
+     * Request timeouts. Use the last value if the current retry is higher than the number of values
+     * in this list.
+     */
+    static final int[] RETRY_TIMES = {5000, 10000, 20000, 40000, 60000};
+
+    /**
+     * The actual request should take a little shorter to have the runnable run at the set time and
+     * have the previous request finish.
+     */
+    static final int REQUEST_TIMEOUT_DELAY = 1000;
+
+    static final int MAX_RETRIES = 17;
+    private static final String CUSTOMER_ID_KEY = "&customer_id=";
+    private static final String SDK_VERSION_KEY = "&nv=";
+    private static final String API_VERSION_KEY = "&v=";
+
+    @NonNull private final String mUrl;
+    @NonNull private final Handler mHandler;
+    @NonNull private final RequestQueue mRequestQueue;
+    private int mRetryCount;
+    private volatile boolean mShouldStop;
+
+    RewardedVideoCompletionRequestHandler(@NonNull final Context context,
+            @NonNull final String url, @Nullable final String customerId) {
+        this(context, url, customerId, new Handler());
+    }
+
+    RewardedVideoCompletionRequestHandler(@NonNull final Context context,
+            @NonNull final String url,
+            @Nullable final String customerId,
+            @NonNull final Handler handler) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(url);
+        mUrl = appendParameters(url, customerId);
+        mRetryCount = 0;
+        mHandler = handler;
+        mRequestQueue = Networking.getRequestQueue(context);
+    }
+
+    void makeRewardedVideoCompletionRequest() {
+        if (mShouldStop) {
+            // If we make a successful request, cancel all pending requests, and don't make more.
+            mRequestQueue.cancelAll(mUrl);
+            return;
+        }
+
+        final RewardedVideoCompletionRequest rewardedVideoCompletionRequest =
+                new RewardedVideoCompletionRequest(mUrl,
+                        new DefaultRetryPolicy(getTimeout(mRetryCount) - REQUEST_TIMEOUT_DELAY,
+                                0, 0f), this);
+        rewardedVideoCompletionRequest.setTag(mUrl);
+        mRequestQueue.add(rewardedVideoCompletionRequest);
+
+        if (mRetryCount >= MAX_RETRIES) {
+            MoPubLog.d("Exceeded number of retries for rewarded video completion request.");
+            return;
+        }
+
+        mHandler.postDelayed(new Runnable() {
+            @Override
+            public void run() {
+                makeRewardedVideoCompletionRequest();
+            }
+        }, getTimeout(mRetryCount));
+        mRetryCount++;
+    }
+
+    @Override
+    public void onResponse(final Integer response) {
+        // Only consider it a failure if we get a 5xx status code.
+        if (response != null && !(response >= 500 && response < 600)) {
+            mShouldStop = true;
+        }
+    }
+
+    @Override
+    public void onErrorResponse(final VolleyError volleyError) {
+        if (volleyError != null && volleyError.networkResponse != null &&
+                !(volleyError.networkResponse.statusCode >= 500
+                        && volleyError.networkResponse.statusCode < 600)) {
+            mShouldStop = true;
+        }
+    }
+
+    public static void makeRewardedVideoCompletionRequest(@Nullable final Context context,
+            @Nullable final String url,
+            @Nullable final String customerId) {
+        if (TextUtils.isEmpty(url) || context == null) {
+            return;
+        }
+
+        new RewardedVideoCompletionRequestHandler(context,
+                url, customerId).makeRewardedVideoCompletionRequest();
+    }
+
+    static int getTimeout(int retryCount) {
+        if (retryCount >= 0 && retryCount < RETRY_TIMES.length) {
+            return RETRY_TIMES[retryCount];
+        } else {
+            return RETRY_TIMES[RETRY_TIMES.length - 1];
+        }
+    }
+
+    private static String appendParameters(@NonNull final String url,
+            @Nullable final String customerId) {
+        Preconditions.checkNotNull(url);
+
+        return url +
+                CUSTOMER_ID_KEY + (customerId == null ? "" : Uri.encode(customerId)) +
+                SDK_VERSION_KEY + Uri.encode(MoPub.SDK_VERSION) +
+                API_VERSION_KEY + MoPubRewardedVideoManager.API_VERSION;
+    }
+
+    @VisibleForTesting
+    @Deprecated
+    boolean getShouldStop() {
+        return mShouldStop;
+    }
+
+    @VisibleForTesting
+    @Deprecated
+    int getRetryCount() {
+        return mRetryCount;
+    }
+
+    @VisibleForTesting
+    @Deprecated
+    void setRetryCount(int retryCount) {
+        mRetryCount = retryCount;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoData.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoData.java
similarity index 92%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoData.java
rename to mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoData.java
index 64c5473a..1023820d 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoData.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoData.java
@@ -7,6 +7,7 @@
 
 import com.mopub.common.MoPubReward;
 import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
 
 import java.util.Collections;
 import java.util.HashMap;
@@ -33,7 +34,7 @@
     @NonNull
     private final Set<CustomEventRewardedVideo.CustomEventRewardedVideoListener> mAdNetworkListeners;
     @Nullable
-    private String mCurrentAdUnitId;
+    private String mCurrentlyShowingAdUnitId;
     @Nullable
     private String mCustomerId;
 
@@ -183,13 +184,13 @@ void associateCustomEventWithMoPubId(
         moPubIds.add(moPubId);
     }
 
-    void setCurrentAdUnitId(@Nullable final String currentAdUnitId) {
-        mCurrentAdUnitId = currentAdUnitId;
+    void setCurrentlyShowingAdUnitId(@Nullable final String currentAdUnitId) {
+        mCurrentlyShowingAdUnitId = currentAdUnitId;
     }
 
     @Nullable
-    String getCurrentAdUnitId() {
-        return mCurrentAdUnitId;
+    String getCurrentlyShowingAdUnitId() {
+        return mCurrentlyShowingAdUnitId;
     }
 
     void setCustomerId(@Nullable final String customerId) {
@@ -201,6 +202,19 @@ String getCustomerId() {
         return mCustomerId;
     }
 
+    @VisibleForTesting
+    @Deprecated
+    void clear() {
+        mAdUnitToCustomEventMap.clear();
+        mAdUnitToRewardMap.clear();
+        mAdUnitToServerCompletionUrlMap.clear();
+        mCustomEventToRewardMap.clear();
+        mCustomEventToMoPubIdMap.clear();
+        mAdNetworkListeners.clear();
+        mCurrentlyShowingAdUnitId = null;
+        mCustomerId = null;
+    }
+
     private static class TwoPartKey extends Pair<Class<? extends CustomEventRewardedVideo>, String> {
         @NonNull
         final Class<? extends CustomEventRewardedVideo> customEventClass;
diff --git a/mopub-sdk/publisher.gradle b/mopub-sdk/publisher.gradle
new file mode 100644
index 00000000..2744493a
--- /dev/null
+++ b/mopub-sdk/publisher.gradle
@@ -0,0 +1,62 @@
+apply plugin: 'com.android.library'
+apply plugin: 'com.novoda.bintray-release'
+
+def siteUrl = 'https://github.com/mopub/mopub-android-sdk'
+def gitUrl = 'https://github.com/mopub/mopub-android-sdk.git'
+def bintrayRepo = 'mopub-android-sdk'
+def bintrayUserOrg = 'mopub'
+// Put your credentials (bintray.user, bintray.apikey) in ~/.gradle/gradle.properties
+
+if (JavaVersion.current().isJava8Compatible()) {
+    allprojects {
+        tasks.withType(Javadoc) {
+            // The javadoc task in Java 8 is too strict and throws unnecessary syntax errors
+            // if our comments fail to abide by the new standard.
+            options.addStringOption('Xdoclint:none', '-quiet')
+        }
+    }
+}
+
+android.libraryVariants.all { variant ->
+    def name = variant.buildType.name
+    def task = project.tasks.create "jar${name.capitalize()}", Jar
+
+    task.dependsOn variant.javaCompile
+    task.from variant.javaCompile.destinationDir
+    artifacts.add('archives', task);
+}
+
+android.libraryVariants.all { variant ->
+    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
+        title = project.ext.displayName
+        description "Generates Javadoc for $variant.name."
+        source = variant.javaCompile.source
+        classpath += files(variant.javaCompile.classpath.files, project.android.getBootClasspath())
+        classpath += project.configurations.compile
+
+        options {
+            links "http://docs.oracle.com/javase/7/docs/api/"
+            linksOffline "https://developer.android.com/reference","${android.sdkDirectory}/docs/reference"
+        }
+
+        exclude '**/BuildConfig.java'
+        exclude '**/R.java'
+    }
+}
+
+publish {
+    repoName = bintrayRepo
+    userOrg = bintrayUserOrg
+    groupId = project.group
+    artifactId = project.ext.projectName
+    uploadName = project.ext.uploadName
+    version = project.version
+    description = project.description
+    website = siteUrl
+    repository = gitUrl
+
+    bintrayUser = project.hasProperty("bintray.user") ? project.getProperty("bintray.user") : ""
+    bintrayKey = project.hasProperty("bintray.apikey") ? project.getProperty("bintray.apikey") : ""
+
+    dryRun = false
+}
diff --git a/mopub-sdk/res/.README b/mopub-sdk/res/.README
deleted file mode 100644
index 902f3db1..00000000
--- a/mopub-sdk/res/.README
+++ /dev/null
@@ -1 +0,0 @@
-This res directory exists to allow building on Eclipse.
diff --git a/mopub-sdk/shared-build.gradle b/mopub-sdk/shared-build.gradle
new file mode 100644
index 00000000..188001c1
--- /dev/null
+++ b/mopub-sdk/shared-build.gradle
@@ -0,0 +1,79 @@
+apply plugin: 'com.android.library'
+
+repositories {
+    mavenCentral()
+    jcenter()
+    flatDir {
+        dirs project(':mopub-sdk').file('../libs')
+    }
+}
+
+project.group = 'com.mopub'
+project.version = '4.11.0'
+
+android {
+    compileSdkVersion 23
+    buildToolsVersion '23.0.2'
+    lintOptions { abortOnError false }
+    useLibrary 'org.apache.http.legacy'
+
+    defaultConfig {
+        versionCode 48
+        versionName version
+        minSdkVersion 9
+        targetSdkVersion 23
+        consumerProguardFiles project(':mopub-sdk').file('proguard.txt')
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'src/main/AndroidManifest.xml'
+            java.srcDirs = ['src/main/java']
+            resources.srcDirs = ['src/main/resources']
+            aidl.srcDirs = ['src/main']
+            renderscript.srcDirs = ['src/main']
+            res.srcDirs = ['res']
+            assets.srcDirs = ['assets']
+        }
+    }
+
+    testOptions {
+        unitTests {
+            // This causes android platform methods from the test JAR
+            // to return null, false, etc instead of throwing an exception.
+            // We should periodically disable this and tackle the broken tests
+            // as it exposes when we are hitting platform APIs in our tests.
+            // If these tests *require* platform APIs we may want to make them
+            // connected tests instead.
+            returnDefaultValues = true
+
+            // Test JVM settings since we have a lot of classes loaded.
+            all {
+                jvmArgs '-XX:MaxPermSize=4096m', '-Xmx8192m'
+                forkEvery 200
+            }
+        }
+    }
+
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'),
+                    project(':mopub-sdk').file('proguard.txt')
+        }
+
+        debug {
+            minifyEnabled false
+        }
+    }
+
+    // Note: You will also need a local.properties file to set the location of the SDK in the same
+    // way that the existing SDK requires, using the sdk.dir property.
+    // Alternatively, you can set an environment variable called ANDROID_HOME. There is no
+    // difference between the two methods, you can use the one you prefer.
+}
+
+dependencies {
+    compile 'com.android.support:support-v4:23.1.1'
+    compile 'com.android.support:support-annotations:23.1.1'
+}
diff --git a/mopub-sdk/AndroidManifest.xml b/mopub-sdk/src/main/AndroidManifest.xml
similarity index 100%
rename from mopub-sdk/AndroidManifest.xml
rename to mopub-sdk/src/main/AndroidManifest.xml
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
deleted file mode 100644
index c753e61e..00000000
--- a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
+++ /dev/null
@@ -1,110 +0,0 @@
-package com.mopub.common;
-
-import android.app.Activity;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import com.mopub.mobileads.MoPubRewardedVideoListener;
-import com.mopub.mobileads.MoPubRewardedVideoManager;
-import com.mopub.mobileads.MoPubRewardedVideoManager.RequestParameters;
-
-public class MoPub {
-    public static final String SDK_VERSION = "4.8.0";
-
-    public enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
-
-    private static final int DEFAULT_LOCATION_PRECISION = 6;
-    private static volatile LocationAwareness sLocationLocationAwareness = LocationAwareness.NORMAL;
-    private static volatile int sLocationPrecision = DEFAULT_LOCATION_PRECISION;
-
-    public static LocationAwareness getLocationAwareness() {
-        return sLocationLocationAwareness;
-    }
-
-    public static void setLocationAwareness(LocationAwareness locationAwareness) {
-        sLocationLocationAwareness = locationAwareness;
-    }
-
-    public static int getLocationPrecision() {
-        return sLocationPrecision;
-    }
-
-    /**
-     * Sets the precision to use when the SDK's location awareness is set
-     * to {@link com.mopub.common.MoPub.LocationAwareness#TRUNCATED}.
-     */
-    public static void setLocationPrecision(int precision) {
-        sLocationPrecision = Math.min(Math.max(0, precision), DEFAULT_LOCATION_PRECISION);
-    }
-
-
-    //////// MoPub LifecycleListener messages ////////
-
-    public static void onCreate(@NonNull final Activity activity) {
-        MoPubLifecycleManager.getInstance(activity).onCreate(activity);
-        updateActivity(activity);
-    }
-
-    public static void onStart(@NonNull final Activity activity) {
-        MoPubLifecycleManager.getInstance(activity).onStart(activity);
-        updateActivity(activity);
-    }
-
-    public static void onPause(@NonNull final Activity activity) {
-        MoPubLifecycleManager.getInstance(activity).onPause(activity);
-    }
-
-    public static void onResume(@NonNull final Activity activity) {
-        MoPubLifecycleManager.getInstance(activity).onResume(activity);
-        updateActivity(activity);
-    }
-
-    public static void onRestart(@NonNull final Activity activity) {
-        MoPubLifecycleManager.getInstance(activity).onRestart(activity);
-        updateActivity(activity);
-    }
-
-    public static void onStop(@NonNull final Activity activity) {
-        MoPubLifecycleManager.getInstance(activity).onStop(activity);
-    }
-
-    public static void onDestroy(@NonNull final Activity activity) {
-        MoPubLifecycleManager.getInstance(activity).onDestroy(activity);
-    }
-
-    public static void onBackPressed(@NonNull final Activity activity) {
-        MoPubLifecycleManager.getInstance(activity).onBackPressed(activity);
-    }
-
-    ////////// MoPub RewardedVideoControl methods //////////
-    public static void initializeRewardedVideo(@NonNull Activity activity, MediationSettings... mediationSettings) {
-        MoPubRewardedVideoManager.init(activity, mediationSettings);
-    }
-
-    private static void updateActivity(@NonNull Activity activity) {
-        MoPubRewardedVideoManager.updateActivity(activity);
-    }
-
-    public static void setRewardedVideoListener(@Nullable MoPubRewardedVideoListener listener) {
-        MoPubRewardedVideoManager.setVideoListener(listener);
-    }
-
-    public static void loadRewardedVideo(@NonNull String adUnitId,
-            @Nullable MediationSettings... mediationSettings) {
-        MoPubRewardedVideoManager.loadVideo(adUnitId, null, mediationSettings);
-    }
-
-    public static void loadRewardedVideo(@NonNull String adUnitId,
-            @Nullable RequestParameters requestParameters,
-            @Nullable MediationSettings... mediationSettings) {
-        MoPubRewardedVideoManager.loadVideo(adUnitId, requestParameters, mediationSettings);
-    }
-
-    public static boolean hasRewardedVideo(@NonNull String adUnitId) {
-        return MoPubRewardedVideoManager.hasVideo(adUnitId);
-    }
-
-    public static void showRewardedVideo(@NonNull String adUnitId) {
-        MoPubRewardedVideoManager.showVideo(adUnitId);
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Views.java b/mopub-sdk/src/main/java/com/mopub/common/util/Views.java
deleted file mode 100644
index e0ebd1e5..00000000
--- a/mopub-sdk/src/main/java/com/mopub/common/util/Views.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.mopub.common.util;
-
-import android.view.View;
-import android.view.ViewGroup;
-
-public class Views {
-    public static void removeFromParent(View view) {
-        if (view == null || view.getParent() == null) {
-            return;
-        }
-
-        if (view.getParent() instanceof ViewGroup) {
-            ((ViewGroup) view.getParent()).removeView(view);
-        }
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/network/CustomSSLSocketFactory.java b/mopub-sdk/src/main/java/com/mopub/network/CustomSSLSocketFactory.java
deleted file mode 100644
index 21c48ac1..00000000
--- a/mopub-sdk/src/main/java/com/mopub/network/CustomSSLSocketFactory.java
+++ /dev/null
@@ -1,95 +0,0 @@
-package com.mopub.network;
-
-import android.net.SSLCertificateSocketFactory;
-
-import java.io.IOException;
-import java.net.InetAddress;
-import java.net.Socket;
-import java.net.UnknownHostException;
-
-import javax.net.ssl.SSLSocket;
-import javax.net.ssl.SSLSocketFactory;
-
-/**
- * An {@link javax.net.ssl.SSLSocketFactory} that supports TLS settings for the MoPub ad servers.
- */
-public class CustomSSLSocketFactory extends SSLSocketFactory {
-
-    private SSLSocketFactory mCertificateSocketFactory;
-
-    private CustomSSLSocketFactory() {}
-
-    public static CustomSSLSocketFactory getDefault(final int handshakeTimeoutMillis) {
-        CustomSSLSocketFactory factory = new CustomSSLSocketFactory();
-        factory.mCertificateSocketFactory = SSLCertificateSocketFactory.getDefault(handshakeTimeoutMillis, null);
-
-        return factory;
-    }
-
-    // Forward all methods. Enable TLS 1.1 and 1.2 before returning.
-
-    // SocketFactory overrides
-    @Override
-    public Socket createSocket() throws IOException {
-        final Socket socket = mCertificateSocketFactory.createSocket();
-        enableTlsIfAvailable(socket);
-        return socket;
-    }
-
-    @Override
-    public Socket createSocket(final String host, final int i) throws IOException, UnknownHostException {
-        final Socket socket = mCertificateSocketFactory.createSocket(host, i);
-        enableTlsIfAvailable(socket);
-        return socket;
-    }
-
-    @Override
-    public Socket createSocket(final String host, final int port, final InetAddress localhost, final int localPort) throws IOException, UnknownHostException {
-        final Socket socket = mCertificateSocketFactory.createSocket(host, port, localhost, localPort);
-        enableTlsIfAvailable(socket);
-        return socket;
-    }
-
-    @Override
-    public Socket createSocket(final InetAddress address, final int port) throws IOException {
-        final Socket socket = mCertificateSocketFactory.createSocket(address, port);
-        enableTlsIfAvailable(socket);
-        return socket;
-    }
-
-    @Override
-    public Socket createSocket(final InetAddress address, final int port, final InetAddress localhost, final int localPort) throws IOException {
-        final Socket socket = mCertificateSocketFactory.createSocket(address, port, localhost, localPort);
-        enableTlsIfAvailable(socket);
-        return socket;
-    }
-
-    // SSLSocketFactory overrides
-
-    @Override
-    public String[] getDefaultCipherSuites() {
-        return mCertificateSocketFactory.getDefaultCipherSuites();
-    }
-
-    @Override
-    public String[] getSupportedCipherSuites() {
-        return mCertificateSocketFactory.getSupportedCipherSuites();
-    }
-
-    @Override
-    public Socket createSocket(final Socket socketParam, final String host, final int port, final boolean autoClose) throws IOException {
-        Socket socket = mCertificateSocketFactory.createSocket(socketParam, host, port, autoClose);
-        enableTlsIfAvailable(socket);
-        return socket;
-    }
-
-    private void enableTlsIfAvailable(Socket socket) {
-        if (socket instanceof SSLSocket) {
-            SSLSocket sslSocket = (SSLSocket) socket;
-            String[] supportedProtocols = sslSocket.getSupportedProtocols();
-            // Make sure all supported protocols are enabled. Android does not enable TLSv1.1 or
-            // TLSv1.2 by default.
-            sslSocket.setEnabledProtocols(supportedProtocols);
-        }
-    }
-}
diff --git a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
index 7607dd22..23ca26ca 100644
--- a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
+++ b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
@@ -1,3 +1,3 @@
 fabric-identifier=com.mopub.sdk.android:mopub
-fabric-version=4.8.0+kit
+fabric-version=4.11.0+kit
 fabric-build-type=source
diff --git a/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java b/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java
new file mode 100644
index 00000000..b54eb796
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java
@@ -0,0 +1,188 @@
+package com.mopub.common;
+
+import android.app.Activity;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.Reflection;
+import com.mopub.mobileads.BuildConfig;
+import com.mopub.mobileads.MoPubRewardedVideoListener;
+import com.mopub.mobileads.MoPubRewardedVideoManager;
+import com.mopub.mobileads.MoPubRewardedVideos;
+
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
+import org.powermock.core.classloader.annotations.PrepareForTest;
+import org.powermock.modules.junit4.rule.PowerMockRule;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.powermock.api.mockito.PowerMockito.mock;
+import static org.powermock.api.mockito.PowerMockito.mockStatic;
+import static org.powermock.api.mockito.PowerMockito.verifyStatic;
+import static org.powermock.api.mockito.PowerMockito.when;
+
+// If you encounter a VerifyError with PowerMock then you need to set Android Studio to use
+// JDK version 7u79 or later. Go to File > Project Structure > [Platform Settings] > SDK to
+// change the JDK version.
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class, sdk = 21)
+@PowerMockIgnore({ "org.mockito.*", "org.robolectric.*", "android.*" })
+@PrepareForTest({MoPubRewardedVideoManager.class})
+public class MoPubTest {
+
+    private Activity mActivity;
+    private MediationSettings[] mMediationSettings;
+    private String mAdUnitId;
+    private MoPubRewardedVideoListener mockRewardedVideoListener;
+    private MoPubRewardedVideoManager.RequestParameters mockRequestParameters;
+
+    @Rule
+    public PowerMockRule rule = new PowerMockRule();
+
+    @Before
+    public void setup() {
+        mActivity = Robolectric.buildActivity(Activity.class).create().get();
+        mMediationSettings = new MediationSettings[0];
+        mAdUnitId = "123";
+
+        mockRewardedVideoListener = mock(MoPubRewardedVideoListener.class);
+        mockRequestParameters = mock(MoPubRewardedVideoManager.RequestParameters.class);
+
+        mockStatic(MoPubRewardedVideoManager.class);
+    }
+
+    @Test
+    public void initializeRewardedVideo_withReflection_shouldExist() throws Exception {
+        assertThat(Reflection.getDeclaredMethodWithTraversal(MoPubRewardedVideos.class,
+                "initializeRewardedVideo", Activity.class, MediationSettings[].class)).isNotNull();
+    }
+
+    @Test
+    public void initializeRewardedVideo_withValidParameters_shouldCallMoPubRewardedVideoManager() throws Exception {
+        MoPub.initializeRewardedVideo(mActivity, mMediationSettings);
+
+        verifyStatic();
+        MoPubRewardedVideoManager.init(mActivity, mMediationSettings);
+    }
+
+    @Test
+    public void updateActivity_withReflection_shouldExist() throws Exception {
+        assertThat(Reflection.getDeclaredMethodWithTraversal(MoPubRewardedVideoManager.class,
+                "updateActivity", Activity.class)).isNotNull();
+    }
+
+    @Test
+    public void updateActivity_withValidActivity_shouldCallMoPubRewardedVideoManager() throws Exception {
+        MoPub.updateActivity(mActivity);
+
+        verifyStatic();
+        MoPubRewardedVideoManager.updateActivity(mActivity);
+    }
+
+    @Test
+    public void setRewardedVideoListener_withReflection_shouldExist() throws Exception {
+        assertThat(Reflection.getDeclaredMethodWithTraversal(MoPubRewardedVideos.class,
+                "setRewardedVideoListener", MoPubRewardedVideoListener.class)).isNotNull();
+    }
+
+    @Test
+    public void setRewardedVideoListener_withValidListener_shouldSetMoPubRewardedVideoManagerListener() throws Exception {
+        MoPub.setRewardedVideoListener(mockRewardedVideoListener);
+
+        verifyStatic();
+        MoPubRewardedVideoManager.setVideoListener(mockRewardedVideoListener);
+    }
+
+    @Test
+    public void setRewardedVideoListener_withNullListener_shouldCallMoPubRewardedVideoManagerListenerWithNull() throws Exception {
+        MoPub.setRewardedVideoListener(null);
+
+        verifyStatic();
+        MoPubRewardedVideoManager.setVideoListener(null);
+    }
+
+    @Test
+    public void loadRewardedVideo_withReflection_shouldExist() throws Exception {
+        assertThat(Reflection.getDeclaredMethodWithTraversal(MoPubRewardedVideos.class,
+                "loadRewardedVideo", String.class,
+                MoPubRewardedVideoManager.RequestParameters.class,
+                MediationSettings[].class)).isNotNull();
+    }
+
+    @Test
+    public void loadRewardedVideo_withTwoNonNullParameters_shouldCallMoPubRewardedVideoManager() throws Exception {
+        MoPub.loadRewardedVideo(mAdUnitId, mMediationSettings);
+
+        verifyStatic();
+        MoPubRewardedVideoManager.loadVideo(mAdUnitId, null, mMediationSettings);
+    }
+
+    @Test
+    public void loadRewardedVideo_withTwoParameters_withNullMediationSettings_shouldCallMoPubRewardedVideoManager() throws Exception {
+        MoPub.loadRewardedVideo(mAdUnitId, (MediationSettings[]) null);
+
+        verifyStatic();
+        MoPubRewardedVideoManager.loadVideo(mAdUnitId, null, (MediationSettings[]) null);
+    }
+
+    @Test
+    public void loadRewardedVideo_withThreeNonNullParameters_shouldCallMoPubRewardedVideoManager() throws Exception {
+        MoPub.loadRewardedVideo(mAdUnitId, mockRequestParameters, mMediationSettings);
+
+        verifyStatic();
+        MoPubRewardedVideoManager.loadVideo(mAdUnitId, mockRequestParameters, mMediationSettings);
+    }
+
+    @Test
+    public void loadRewardedVideo_withThreeParameters_withNullRequestParameters_shouldCallMoPubRewardedVideoManager() throws Exception {
+        MoPub.loadRewardedVideo(mAdUnitId, null, mMediationSettings);
+
+        verifyStatic();
+        MoPubRewardedVideoManager.loadVideo(mAdUnitId, null, mMediationSettings);
+    }
+
+    @Test
+    public void loadRewardedVideo_withThreeParameters_withNullRequestParameters_withNullMediationSettings_shouldCallMoPubRewardedVideoManager() throws Exception {
+        MoPub.loadRewardedVideo(mAdUnitId, null, (MediationSettings[]) null);
+
+        verifyStatic();
+        MoPubRewardedVideoManager.loadVideo(mAdUnitId, null, (MediationSettings[]) null);
+    }
+
+    @Test
+    public void hasRewardedVideo_withReflection_shouldExist() throws Exception {
+        assertThat(Reflection.getDeclaredMethodWithTraversal(MoPubRewardedVideos.class,
+                "hasRewardedVideo", String.class)).isNotNull();
+    }
+
+    @Test
+    public void hasRewardedVideo_withValidAdUnitId_shouldReturnTrue() throws Exception {
+        when(MoPubRewardedVideoManager.hasVideo(mAdUnitId)).thenReturn(true);
+
+        assertThat(MoPub.hasRewardedVideo(mAdUnitId)).isTrue();
+    }
+
+    @Test
+    public void hasRewardedVideo_withInvalidAdUnitId_shouldReturnFalse() throws Exception {
+        assertThat(MoPub.hasRewardedVideo("fakeId")).isFalse();
+    }
+
+    @Test
+    public void showRewardedVideo_withReflection_shouldExist() throws Exception {
+        assertThat(Reflection.getDeclaredMethodWithTraversal(MoPubRewardedVideos.class,
+                "showRewardedVideo", String.class)).isNotNull();
+    }
+
+    @Test
+    public void showRewardedVideo_withNonNullAdUnitId_shouldCallMoPubRewardedVideoManager() throws Exception {
+        MoPub.showRewardedVideo(mAdUnitId);
+
+        verifyStatic();
+        MoPubRewardedVideoManager.showVideo(mAdUnitId);
+    }
+
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java b/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
index 9f3cf277..19552de1 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
@@ -4,13 +4,16 @@
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.MoPub;
 import com.mopub.common.MoPubHttpUrlConnection;
+import com.mopub.common.Preconditions;
 import com.mopub.common.event.EventDispatcher;
 import com.mopub.common.event.MoPubEvents;
 import com.mopub.common.factories.MethodBuilderFactory;
 import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.DateAndTime;
+import com.mopub.common.util.Reflection;
 import com.mopub.common.util.test.support.ShadowAsyncTasks;
 import com.mopub.common.util.test.support.ShadowMoPubHttpUrlConnection;
+import com.mopub.common.util.test.support.ShadowReflection;
 import com.mopub.common.util.test.support.TestDateAndTime;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
 import com.mopub.mobileads.factories.AdViewControllerFactory;
@@ -58,6 +61,7 @@ public InstrumentationConfiguration createClassLoaderConfig() {
         InstrumentationConfiguration.Builder builder = InstrumentationConfiguration.newBuilder();
         builder.addInstrumentedClass(AsyncTasks.class.getName());
         builder.addInstrumentedClass(MoPubHttpUrlConnection.class.getName());
+        builder.addInstrumentedClass(Reflection.class.getName());
         // To mitigate: https://github.com/robolectric/robolectric/issues/2129
         builder.addInstrumentedPackage("org.xyz.testMp");
         return builder.build();
@@ -73,6 +77,10 @@ public InstrumentationConfiguration createClassLoaderConfig() {
         public void prepareTest(Object test) {
             ClientMetadata.clearForTesting();
 
+            // Precondition exceptions should not be thrown during tests so that we can test
+            // for unexpected behavior even after failing a precondition.
+            Preconditions.NoThrow.setStrictMode(false);
+
             DateAndTime.setInstance(new TestDateAndTime());
             CustomEventBannerFactory.setInstance(new TestCustomEventBannerFactory());
             CustomEventInterstitialFactory.setInstance(new TestCustomEventInterstitialFactory());
@@ -89,6 +97,7 @@ public void prepareTest(Object test) {
 
             ShadowAsyncTasks.reset();
             ShadowMoPubHttpUrlConnection.reset();
+            ShadowReflection.reset();
             MoPubEvents.setEventDispatcher(mock(EventDispatcher.class));
             MoPub.setLocationAwareness(LocationAwareness.NORMAL);
             MoPub.setLocationPrecision(6);
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
index 8db4a294..a42b716d 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
@@ -62,6 +62,8 @@ public void tearDown() throws Exception {
         setDebugMode(false);
         // This may have been set to a mock during testing. Reset this class back to normal
         ManifestUtils.setFlagCheckUtil(new ManifestUtils.FlagCheckUtil());
+
+        addInterstitialModule();
     }
 
     @Test
@@ -108,6 +110,21 @@ public void displayWarningForMissingActivities_withAllActivitiesDeclared_shouldN
         assertThat(ShadowLog.getLogs()).isEmpty();
     }
 
+    @Test
+    public void displayWarningForMissingActivities_withoutInterstitialModule_withoutInterstitialActivitiesDeclared_shouldNotShowLogOrToast() throws Exception {
+        removeInterstitialModule();
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubBrowser.class), mockResolveInfo);
+
+        ShadowLog.setupLogging();
+        setDebugMode(true);
+
+        ManifestUtils.displayWarningForMissingActivities(context, requiredWebViewSdkActivities);
+
+        assertThat(ShadowToast.getLatestToast()).isNull();
+        assertThat(ShadowLog.getLogs()).isEmpty();
+    }
+
     @Test
      public void displayWarningForMissingActivities_withOneMissingActivity_shouldLogOnlyThatOne() throws Exception {
         RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
@@ -363,6 +380,15 @@ public void getRequiredWebViewSdkActivities_shouldIncludeRequiredActivities() th
         );
     }
 
+    @Test
+    public void getRequiredWebViewSdkActivities_withoutInterstitialModule_shouldNotHaveAllRequiredActivities() throws Exception {
+        removeInterstitialModule();
+        assertThat(requiredWebViewSdkActivities).containsOnly(
+                MraidVideoPlayerActivity.class,
+                MoPubBrowser.class
+        );
+    }
+
     @SuppressWarnings("unchecked")
     @Test
     public void getRequiredNativeSdkActivities_shouldIncludeRequiredActivities() throws Exception {
@@ -371,6 +397,24 @@ public void getRequiredNativeSdkActivities_shouldIncludeRequiredActivities() thr
         );
     }
 
+    private void addInterstitialModule() {
+        Class moPubActivityClass = com.mopub.mobileads.MoPubActivity.class;
+        Class mraidActivityClass = com.mopub.mobileads.MraidActivity.class;
+        if (!ManifestUtils.getRequiredWebViewSdkActivities().contains(moPubActivityClass)) {
+            ManifestUtils.getRequiredWebViewSdkActivities().add(moPubActivityClass);
+        }
+        if (!ManifestUtils.getRequiredWebViewSdkActivities().contains(mraidActivityClass)) {
+            ManifestUtils.getRequiredWebViewSdkActivities().add(mraidActivityClass);
+        }
+    }
+
+    private void removeInterstitialModule() {
+        Class moPubActivityClass = com.mopub.mobileads.MoPubActivity.class;
+        Class mraidActivityClass = com.mopub.mobileads.MraidActivity.class;
+        ManifestUtils.getRequiredWebViewSdkActivities().remove(moPubActivityClass);
+        ManifestUtils.getRequiredWebViewSdkActivities().remove(mraidActivityClass);
+    }
+
     private void setDebugMode(boolean enabled) {
         final ApplicationInfo applicationInfo = context.getApplicationInfo();
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java
index b36ae026..781d273a 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java
@@ -9,6 +9,9 @@
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
 
+import java.math.BigDecimal;
+import java.math.BigInteger;
+
 import static com.mopub.common.util.Reflection.MethodBuilder;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.fest.assertions.api.Assertions.fail;
@@ -158,4 +161,48 @@ public void execute_withAccessibility_shouldRunPrivateMethods() throws Exception
 
         assertThat(result).isEqualTo(-1);
     }
+
+    @Test
+    public void instantiateClassWithConstructor_withCorrectParameters_shouldInstiantiateObject() throws Exception {
+        Class[] classes = {int.class};
+        Object[] parameters = {30};
+        Number integer = Reflection.instantiateClassWithConstructor("java.lang.Integer",
+                Number.class, classes, parameters);
+
+        assertThat(integer).isEqualTo(new Integer(30));
+    }
+
+    @Test
+    public void instantiateClassWithConstructor_withCorrectMultipleParameters_shouldInstiantiateObject() throws Exception {
+        Class[] classes = {BigInteger.class, int.class};
+        Object[] parameters = {new BigInteger("10"), 5};
+        Number bigDecimal = Reflection.instantiateClassWithConstructor("java.math.BigDecimal",
+                Number.class, classes, parameters);
+
+        assertThat(bigDecimal).isEqualTo(new BigDecimal(new BigInteger("10"), 5));
+    }
+
+    @Test(expected = ClassCastException.class)
+    public void instantiateClassWithConstructor_withInvalidSuperClass_shouldThrowException() throws Exception {
+        Class[] classes = {int.class};
+        Object[] parameters = {30};
+
+        Reflection.instantiateClassWithConstructor("java.lang.Integer", String.class, classes, parameters);
+    }
+
+    @Test(expected = ClassNotFoundException.class)
+    public void instantiateClassWithConstructor_withClassNotFound_shouldThrowException() throws Exception {
+        Class[] classes = {int.class};
+        Object[] parameters = {30};
+
+        Reflection.instantiateClassWithConstructor("java.lang.FakeClass123", Integer.class, classes, parameters);
+    }
+
+    @Test(expected = Exception.class)
+    public void instantiateClassWithConstructor_withMismatchingClassParameters_shouldThrowException() throws Exception {
+        Class[] classes = {boolean.class};
+        Object[] parameters = {30};
+
+        Reflection.instantiateClassWithConstructor("java.lang.Integer", Number.class, classes, parameters);
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/ViewsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/ViewsTest.java
index 48fa3198..a9eb7a6b 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/ViewsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/ViewsTest.java
@@ -1,12 +1,11 @@
 package com.mopub.common.util;
 
 import android.app.Activity;
-import android.content.Context;
-import android.content.res.Resources;
 import android.view.View;
 import android.widget.RelativeLayout;
 import android.widget.TextView;
 
+
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -17,63 +16,114 @@
 
 @RunWith(RobolectricTestRunner.class)
 public class ViewsTest {
-    private Context context;
-    private View subject;
-    private RelativeLayout parent;
-    private Activity testActivity;
-    private Resources testResources;
+    private Activity activity;
+    private View frameLayout;
+    private RelativeLayout relativeLayout;
+    private View view;
 
     @Before
     public void setup() {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        subject = new View(context);
-        parent = new RelativeLayout(context);
+        activity = Robolectric.buildActivity(Activity.class).create().get();
+
+        // Expected view hierarchy:
+        // - FrameLayout
+        // -- RelativeLayout
+        // --- View
+        frameLayout = activity.findViewById(android.R.id.content);
+        relativeLayout = new RelativeLayout(activity);
+        view = new View(activity);
 
+        activity.setContentView(relativeLayout);
     }
 
     @Test
     public void removeFromParent_shouldRemoveViewFromParent() throws Exception {
-        assertThat(parent.getChildCount()).isEqualTo(0);
+        assertThat(relativeLayout.getChildCount()).isEqualTo(0);
 
-        parent.addView(subject);
-        assertThat(parent.getChildCount()).isEqualTo(1);
-        assertThat(subject.getParent()).isEqualTo(parent);
+        relativeLayout.addView(view);
+        assertThat(relativeLayout.getChildCount()).isEqualTo(1);
+        assertThat(view.getParent()).isEqualTo(relativeLayout);
 
-        Views.removeFromParent(subject);
+        Views.removeFromParent(view);
 
-        assertThat(parent.getChildCount()).isEqualTo(0);
-        assertThat(subject.getParent()).isNull();
+        assertThat(relativeLayout.getChildCount()).isEqualTo(0);
+        assertThat(view.getParent()).isNull();
     }
 
     @Test
     public void removeFromParent_withMultipleChildren_shouldRemoveCorrectChild() throws Exception {
-        parent.addView(new TextView(context));
+        relativeLayout.addView(new TextView(activity));
 
-        assertThat(parent.getChildCount()).isEqualTo(1);
+        assertThat(relativeLayout.getChildCount()).isEqualTo(1);
 
-        parent.addView(subject);
+        relativeLayout.addView(view);
 
-        assertThat(parent.getChildCount()).isEqualTo(2);
+        assertThat(relativeLayout.getChildCount()).isEqualTo(2);
 
-        Views.removeFromParent(subject);
-        assertThat(parent.getChildCount()).isEqualTo(1);
+        Views.removeFromParent(view);
+        assertThat(relativeLayout.getChildCount()).isEqualTo(1);
 
-        assertThat(parent.getChildAt(0)).isInstanceOf(TextView.class);
+        assertThat(relativeLayout.getChildAt(0)).isInstanceOf(TextView.class);
     }
 
     @Test
-    public void removeFromParent_whenViewIsNull_shouldPass() throws Exception {
+    public void removeFromParent_whenViewIsNull_shouldNotThrowException() throws Exception {
         Views.removeFromParent(null);
 
         // pass
     }
 
     @Test
-    public void removeFromParent_whenViewsParentIsNull_shouldPass() throws Exception {
-        assertThat(subject.getParent()).isNull();
+    public void removeFromParent_whenViewsParentIsNull_shouldNotThrowException() throws Exception {
+        assertThat(view.getParent()).isNull();
 
-        Views.removeFromParent(subject);
+        Views.removeFromParent(view);
 
         // pass
     }
+
+    @Test
+    public void getTopmostView_withActivityContext_shouldReturnRootView() {
+        relativeLayout.addView(view);
+
+        View rootView = Views.getTopmostView(activity, view);
+
+        assertThat(rootView).isEqualTo(frameLayout);
+    }
+
+    @Test
+    public void getTopmostView_withNonActivityContext_shouldReturnRootView() {
+        relativeLayout.addView(view);
+
+        View rootView = Views.getTopmostView(activity.getApplicationContext(), view);
+
+        assertThat(rootView).isEqualTo(frameLayout);
+    }
+
+    @Test
+    public void getTopmostView_withNonActivityContext_withUnattachedView_shouldReturnView() {
+        // don't add "view" to the view hierarchy
+
+        View rootView = Views.getTopmostView(activity.getApplicationContext(), view);
+
+        assertThat(rootView).isEqualTo(view);
+    }
+
+    @Test
+    public void getTopmostView_withNonActivityContext_withNullView_shouldReturnNull() {
+        relativeLayout.addView(view);
+
+        View rootView = Views.getTopmostView(activity.getApplicationContext(), null);
+
+        assertThat(rootView).isNull();
+    }
+
+    @Test
+    public void getTopmostView_withNullArguments_shouldReturnNull() {
+        relativeLayout.addView(view);
+
+        View rootView = Views.getTopmostView(null, null);
+
+        assertThat(rootView).isNull();
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java
new file mode 100644
index 00000000..3446601f
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java
@@ -0,0 +1,33 @@
+package com.mopub.common.util.test.support;
+
+import com.mopub.common.util.Reflection;
+
+import org.robolectric.annotation.Implementation;
+import org.robolectric.annotation.Implements;
+import org.robolectric.util.ReflectionHelpers;
+
+import static org.robolectric.internal.Shadow.directlyOn;
+
+@Implements(Reflection.class)
+public class ShadowReflection {
+    private static boolean sNextClassNotFound;
+
+    public static void reset() {
+        sNextClassNotFound = false;
+    }
+
+    @Implementation
+    public static boolean classFound(final String className) throws Exception {
+        if (sNextClassNotFound) {
+            sNextClassNotFound = false;
+            return false;
+        }
+
+        return directlyOn(Reflection.class, "classFound",
+                new ReflectionHelpers.ClassParameter<>(String.class, className));
+    }
+
+    public static void setNextClassNotFound(final boolean nextNotFound) {
+        sNextClassNotFound = nextNotFound;
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
index d5bb4ec5..e5f40f61 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
@@ -23,10 +23,10 @@
 import java.util.Set;
 
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialAdListener;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
index df8821fe..d641f19c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
@@ -23,8 +23,8 @@
 import static com.mopub.common.DataKeys.REDIRECT_URL_KEY;
 import static com.mopub.common.DataKeys.SCROLLABLE_KEY;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 import static org.fest.assertions.api.Assertions.assertThat;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
index 14308b95..10dd9951 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
@@ -34,10 +34,10 @@
 import static com.mopub.common.DataKeys.REDIRECT_URL_KEY;
 import static com.mopub.common.DataKeys.SCROLLABLE_KEY;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 import static org.fest.assertions.api.Assertions.assertThat;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
index 3d47a818..c81d7166 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
@@ -1,8 +1,8 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
+import android.support.annotation.NonNull;
 
-import com.mopub.common.DataKeys;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestAdViewControllerFactory;
 import com.mopub.mobileads.test.support.TestCustomEventInterstitialAdapterFactory;
@@ -23,6 +23,11 @@
 import static com.mopub.mobileads.MoPubErrorCode.CANCELLED;
 import static com.mopub.mobileads.MoPubErrorCode.INTERNAL_ERROR;
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
+import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.DESTROYED;
+import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.IDLE;
+import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.LOADING;
+import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.READY;
+import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.SHOWING;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
@@ -30,7 +35,6 @@
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyZeroInteractions;
-
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
 public class MoPubInterstitialTest {
@@ -70,6 +74,7 @@ public void setUp() throws Exception {
     public void forceRefresh_shouldResetInterstitialViewAndMarkNotDestroyed() throws Exception {
         subject.setInterstitialView(interstitialView);
         subject.onCustomEventInterstitialLoaded();
+        subject.setCurrentInterstitialState(READY);
         subject.forceRefresh();
 
         assertThat(subject.isReady()).isFalse();
@@ -146,56 +151,6 @@ public void onCustomEventInterstitialLoaded_shouldNotifyListener() throws Except
         verify(interstitialView, never()).trackImpression();
     }
 
-    @Test
-    public void extractCountryFromExtras() throws Exception {
-        String responseClickThroughUrl = "http://ads.mopub.com/m/imp?appid=" +
-                "&cid=7c8" +
-                "&city=Bratislava" +
-                "&ckv=2" +
-                "&country_code=SK" +
-                "&cppck=61FA7" +
-                "&dev=XT1028" +
-                "&exclude_adgroups=7c8f" +
-                "&is_mraid=0" +
-                "&os=Android" +
-                "&osv=5.1.0" +
-                "&req=ca42.0" +
-                "&rev=0.0" +
-                "&udid=sha%3Ab6b3" +
-                "&video_type=";
-        Map<String, String> serverExtras = new HashMap<>();
-        serverExtras.put(DataKeys.CLICKTHROUGH_URL_KEY, responseClickThroughUrl);
-
-        subject.extractCountryFromExtras(serverExtras);
-
-        assertThat(subject.getCountryCode()).isEqualTo("SK");
-    }
-
-    @Test
-    public void extractCityFromExtras() throws Exception {
-        String responseClickThroughUrl = "http://ads.mopub.com/m/imp?appid=" +
-                "&cid=7c8" +
-                "&city=Bratislava" +
-                "&ckv=2" +
-                "&country_code=SK" +
-                "&cppck=61FA7" +
-                "&dev=XT1028" +
-                "&exclude_adgroups=7c8f" +
-                "&is_mraid=0" +
-                "&os=Android" +
-                "&osv=5.1.0" +
-                "&req=ca42.0" +
-                "&rev=0.0" +
-                "&udid=sha%3Ab6b3" +
-                "&video_type=";
-        Map<String, String> serverExtras = new HashMap<>();
-        serverExtras.put(DataKeys.CLICKTHROUGH_URL_KEY,responseClickThroughUrl);
-
-        subject.extractCityFromExtras(serverExtras);
-
-        assertThat(subject.getCity()).isEqualTo("Bratislava");
-    }
-
     @Test
     public void onCustomEventInterstitialLoaded_whenInterstitialAdListenerIsNull_shouldNotNotifyListenerOrTrackImpression() throws Exception {
         subject.setInterstitialView(interstitialView);
@@ -389,352 +344,345 @@ public void adFailed_shouldNotifyInterstitialAdListener() throws Exception {
     @Test
     public void attemptStateTransition_withIdleStartState() {
         /**
-         * IDLE can go to LOADING when load is called. IDLE can also go to DESTROYED if the
-         * interstitial view is destroyed.
+         * IDLE can go to LOADING when load or forceRefresh is called. IDLE can also go to
+         * DESTROYED if the interstitial view is destroyed.
          */
 
         subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.IDLE);
-        boolean stateDidChange = subject.attemptStateTransition(
-                MoPubInterstitial.InterstitialState.IDLE, false);
+        subject.setCurrentInterstitialState(IDLE);
+        boolean stateDidChange = subject.attemptStateTransition(IDLE, false);
         assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
-                MoPubInterstitial.InterstitialState.IDLE);
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(IDLE);
         verifyZeroInteractions(customEventInterstitialAdapter);
 
-        reset(customEventInterstitialAdapter);
-        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.IDLE);
-        stateDidChange = subject.attemptStateTransition(
-                MoPubInterstitial.InterstitialState.IDLE, true);
+        resetMoPubInterstitial(IDLE);
+        stateDidChange = subject.attemptStateTransition(IDLE, true);
         assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
-                MoPubInterstitial.InterstitialState.IDLE);
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(IDLE);
         verifyZeroInteractions(customEventInterstitialAdapter);
 
-        reset(customEventInterstitialAdapter);
-        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setInterstitialView(interstitialView);
-        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.IDLE);
-        stateDidChange = subject.attemptStateTransition(
-                MoPubInterstitial.InterstitialState.LOADING, false);
+        resetMoPubInterstitial(IDLE);
+        stateDidChange = subject.attemptStateTransition(LOADING, false);
         assertThat(stateDidChange).isTrue();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
-                MoPubInterstitial.InterstitialState.LOADING);
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(LOADING);
         verify(customEventInterstitialAdapter).invalidate();
         verify(interstitialView).loadAd();
 
-        reset(customEventInterstitialAdapter, interstitialView);
-        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setInterstitialView(interstitialView);
-        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.IDLE);
-        stateDidChange = subject.attemptStateTransition(
-                MoPubInterstitial.InterstitialState.LOADING, true);
+        resetMoPubInterstitial(IDLE);
+        stateDidChange = subject.attemptStateTransition(LOADING, true);
         assertThat(stateDidChange).isTrue();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
-                MoPubInterstitial.InterstitialState.LOADING);
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(LOADING);
         verify(customEventInterstitialAdapter).invalidate();
         verify(interstitialView).forceRefresh();
 
-        reset(customEventInterstitialAdapter);
-        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.IDLE);
-        stateDidChange = subject.attemptStateTransition(
-                MoPubInterstitial.InterstitialState.READY, false);
+        resetMoPubInterstitial(IDLE);
+        stateDidChange = subject.attemptStateTransition(READY, false);
         assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
-                MoPubInterstitial.InterstitialState.IDLE);
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(IDLE);
         verifyZeroInteractions(customEventInterstitialAdapter);
 
-        reset(customEventInterstitialAdapter);
-        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.IDLE);
-        stateDidChange = subject.attemptStateTransition(
-                MoPubInterstitial.InterstitialState.READY, true);
+        resetMoPubInterstitial(IDLE);
+        stateDidChange = subject.attemptStateTransition(READY, true);
         assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
-                MoPubInterstitial.InterstitialState.IDLE);
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(IDLE);
         verifyZeroInteractions(customEventInterstitialAdapter);
 
-        reset(customEventInterstitialAdapter);
-        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.IDLE);
-        stateDidChange = subject.attemptStateTransition(
-                MoPubInterstitial.InterstitialState.DESTROYED, false);
+        resetMoPubInterstitial(IDLE);
+        stateDidChange = subject.attemptStateTransition(SHOWING, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(IDLE);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(IDLE);
+        stateDidChange = subject.attemptStateTransition(SHOWING, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(IDLE);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(IDLE);
+        stateDidChange = subject.attemptStateTransition(DESTROYED, false);
         assertThat(stateDidChange).isTrue();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
-                MoPubInterstitial.InterstitialState.DESTROYED);
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
         verify(customEventInterstitialAdapter).invalidate();
 
-        reset(customEventInterstitialAdapter);
-        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.IDLE);
-        stateDidChange = subject.attemptStateTransition(
-                MoPubInterstitial.InterstitialState.DESTROYED, true);
+        resetMoPubInterstitial(IDLE);
+        stateDidChange = subject.attemptStateTransition(DESTROYED, true);
         assertThat(stateDidChange).isTrue();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
-                MoPubInterstitial.InterstitialState.DESTROYED);
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
         verify(customEventInterstitialAdapter).invalidate();
     }
 
     @Test
     public void attemptStateTransition_withLoadingStartState() {
         /**
-         * LOADING can go to IDLE if and only if it's a hard reset to IDLE. LOADING should go to
-         * READY when the interstitial is done loading. LOADING can go to DESTROYED if the
-         * interstitial view is destroyed.
+         * LOADING can go to IDLE if a force refresh happens. LOADING can also go into IDLE if an
+         * ad failed to load. LOADING should go to READY when the interstitial is done loading.
+         * LOADING can go to DESTROYED if the interstitial view is destroyed.
          */
 
         subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.LOADING);
-        boolean stateDidChange = subject.attemptStateTransition(
-                MoPubInterstitial.InterstitialState.IDLE, false);
-        assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
-                MoPubInterstitial.InterstitialState.LOADING);
-        verifyZeroInteractions(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(LOADING);
+        boolean stateDidChange = subject.attemptStateTransition(IDLE, false);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(IDLE);
+        verify(customEventInterstitialAdapter).invalidate();
 
-        reset(customEventInterstitialAdapter);
-        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.LOADING);
-        stateDidChange = subject.attemptStateTransition(
-                MoPubInterstitial.InterstitialState.IDLE, true);
+        resetMoPubInterstitial(LOADING);
+        stateDidChange = subject.attemptStateTransition(IDLE, true);
         assertThat(stateDidChange).isTrue();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
-                MoPubInterstitial.InterstitialState.IDLE);
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(IDLE);
         verify(customEventInterstitialAdapter).invalidate();
 
-        reset(customEventInterstitialAdapter);
-        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.LOADING);
-        stateDidChange = subject.attemptStateTransition(
-                MoPubInterstitial.InterstitialState.LOADING, false);
+        resetMoPubInterstitial(LOADING);
+        stateDidChange = subject.attemptStateTransition(LOADING, false);
         assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
-                MoPubInterstitial.InterstitialState.LOADING);
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(LOADING);
         verifyZeroInteractions(customEventInterstitialAdapter);
 
-        reset(customEventInterstitialAdapter);
-        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.LOADING);
-        stateDidChange = subject.attemptStateTransition(
-                MoPubInterstitial.InterstitialState.LOADING, true);
+        resetMoPubInterstitial(LOADING);
+        stateDidChange = subject.attemptStateTransition(LOADING, true);
         assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
-                MoPubInterstitial.InterstitialState.LOADING);
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(LOADING);
         verifyZeroInteractions(customEventInterstitialAdapter);
 
-        reset(customEventInterstitialAdapter);
-        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.LOADING);
-        stateDidChange = subject.attemptStateTransition(
-                MoPubInterstitial.InterstitialState.READY, false);
+        resetMoPubInterstitial(LOADING);
+        stateDidChange = subject.attemptStateTransition(READY, false);
         assertThat(stateDidChange).isTrue();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
-                MoPubInterstitial.InterstitialState.READY);
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(READY);
         verifyZeroInteractions(customEventInterstitialAdapter);
 
-        reset(customEventInterstitialAdapter);
-        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.LOADING);
-        stateDidChange = subject.attemptStateTransition(
-                MoPubInterstitial.InterstitialState.READY, true);
+        resetMoPubInterstitial(LOADING);
+        stateDidChange = subject.attemptStateTransition(READY, true);
         assertThat(stateDidChange).isTrue();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
-                MoPubInterstitial.InterstitialState.READY);
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(READY);
         verifyZeroInteractions(customEventInterstitialAdapter);
 
-        reset(customEventInterstitialAdapter);
-        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.LOADING);
-        stateDidChange = subject.attemptStateTransition(
-                MoPubInterstitial.InterstitialState.DESTROYED, false);
+        resetMoPubInterstitial(LOADING);
+        stateDidChange = subject.attemptStateTransition(SHOWING, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(LOADING);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(LOADING);
+        stateDidChange = subject.attemptStateTransition(SHOWING, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(LOADING);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(LOADING);
+        stateDidChange = subject.attemptStateTransition(DESTROYED, false);
         assertThat(stateDidChange).isTrue();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
-                MoPubInterstitial.InterstitialState.DESTROYED);
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
         verify(customEventInterstitialAdapter).invalidate();
 
-        reset(customEventInterstitialAdapter);
-        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.LOADING);
-        stateDidChange = subject.attemptStateTransition(
-                MoPubInterstitial.InterstitialState.DESTROYED, true);
+        resetMoPubInterstitial(LOADING);
+        stateDidChange = subject.attemptStateTransition(DESTROYED, true);
         assertThat(stateDidChange).isTrue();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
-                MoPubInterstitial.InterstitialState.DESTROYED);
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
         verify(customEventInterstitialAdapter).invalidate();
     }
 
     @Test
     public void attemptStateTransition_withReadyStartState() {
         /**
-         * This state should succeed for going to IDLE. When it's forced, it's implicitly resetting
-         * the internals into ready state. If it's not forced, this is when the interstitial is
-         * shown. Also, READY can go into DESTROYED.
+         * This state should succeed for going to SHOWING. It is also possible to force refresh from
+         * here into IDLE. Also, READY can go into DESTROYED.
          */
 
         subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.READY);
-        boolean stateDidChange = subject.attemptStateTransition(
-                MoPubInterstitial.InterstitialState.IDLE, false);
-        assertThat(stateDidChange).isTrue();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
-                MoPubInterstitial.InterstitialState.IDLE);
-        verify(customEventInterstitialAdapter).showInterstitial();
+        subject.setCurrentInterstitialState(READY);
+        boolean stateDidChange = subject.attemptStateTransition(IDLE, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(READY);
+        verifyZeroInteractions(customEventInterstitialAdapter);
 
-        reset(customEventInterstitialAdapter);
-        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.READY);
-        stateDidChange = subject.attemptStateTransition(
-                MoPubInterstitial.InterstitialState.IDLE, true);
+        resetMoPubInterstitial(READY);
+        stateDidChange = subject.attemptStateTransition(IDLE, true);
         assertThat(stateDidChange).isTrue();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
-                MoPubInterstitial.InterstitialState.IDLE);
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(IDLE);
         verify(customEventInterstitialAdapter).invalidate();
 
-        reset(customEventInterstitialAdapter);
-        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.READY);
-        stateDidChange = subject.attemptStateTransition(
-                MoPubInterstitial.InterstitialState.LOADING, false);
+        resetMoPubInterstitial(READY);
+        stateDidChange = subject.attemptStateTransition(LOADING, false);
         assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
-                MoPubInterstitial.InterstitialState.READY);
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(READY);
         verifyZeroInteractions(customEventInterstitialAdapter);
         verify(interstitialAdListener).onInterstitialLoaded(subject);
 
-        reset(customEventInterstitialAdapter, interstitialAdListener);
-        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.READY);
-        stateDidChange = subject.attemptStateTransition(
-                MoPubInterstitial.InterstitialState.LOADING, true);
+        resetMoPubInterstitial(READY);
+        stateDidChange = subject.attemptStateTransition(LOADING, true);
         assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
-                MoPubInterstitial.InterstitialState.READY);
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(READY);
         verifyZeroInteractions(customEventInterstitialAdapter);
         verify(interstitialAdListener).onInterstitialLoaded(subject);
 
-        reset(customEventInterstitialAdapter);
-        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.READY);
-        stateDidChange = subject.attemptStateTransition(
-                MoPubInterstitial.InterstitialState.READY, false);
+        resetMoPubInterstitial(READY);
+        stateDidChange = subject.attemptStateTransition(READY, false);
         assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
-                MoPubInterstitial.InterstitialState.READY);
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(READY);
         verifyZeroInteractions(customEventInterstitialAdapter);
 
-        reset(customEventInterstitialAdapter);
-        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.READY);
-        stateDidChange = subject.attemptStateTransition(
-                MoPubInterstitial.InterstitialState.READY, true);
+        resetMoPubInterstitial(READY);
+        stateDidChange = subject.attemptStateTransition(READY, true);
         assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
-                MoPubInterstitial.InterstitialState.READY);
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(READY);
         verifyZeroInteractions(customEventInterstitialAdapter);
 
-        reset(customEventInterstitialAdapter);
-        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.READY);
-        stateDidChange = subject.attemptStateTransition(
-                MoPubInterstitial.InterstitialState.DESTROYED, false);
+        resetMoPubInterstitial(READY);
+        stateDidChange = subject.attemptStateTransition(SHOWING, false);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(SHOWING);
+        verify(customEventInterstitialAdapter).showInterstitial();
+
+        resetMoPubInterstitial(READY);
+        stateDidChange = subject.attemptStateTransition(SHOWING, true);
         assertThat(stateDidChange).isTrue();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
-                MoPubInterstitial.InterstitialState.DESTROYED);
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(SHOWING);
+        verify(customEventInterstitialAdapter).showInterstitial();
+
+        resetMoPubInterstitial(READY);
+        stateDidChange = subject.attemptStateTransition(DESTROYED, false);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
         verify(customEventInterstitialAdapter).invalidate();
 
-        reset(customEventInterstitialAdapter);
-        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.READY);
-        stateDidChange = subject.attemptStateTransition(
-                MoPubInterstitial.InterstitialState.DESTROYED, true);
+        resetMoPubInterstitial(READY);
+        stateDidChange = subject.attemptStateTransition(DESTROYED, true);
         assertThat(stateDidChange).isTrue();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
-                MoPubInterstitial.InterstitialState.DESTROYED);
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
         verify(customEventInterstitialAdapter).invalidate();
     }
 
+    @Test
+    public void attemptStateTransition_withShowingStartState() {
+        /**
+         * When the interstitial is dismissed, this should transition to IDLE. Otherwise, block
+         * other transitions except to DESTROYED. You cannot force refresh while an interstitial
+         * is showing.
+         */
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(SHOWING);
+        boolean stateDidChange = subject.attemptStateTransition(IDLE, false);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(IDLE);
+        verify(customEventInterstitialAdapter).invalidate();
+
+        resetMoPubInterstitial(SHOWING);
+        stateDidChange = subject.attemptStateTransition(IDLE, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(SHOWING);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(SHOWING);
+        stateDidChange = subject.attemptStateTransition(LOADING, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(SHOWING);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(SHOWING);
+        stateDidChange = subject.attemptStateTransition(LOADING, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(SHOWING);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(SHOWING);
+        stateDidChange = subject.attemptStateTransition(READY, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(SHOWING);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(SHOWING);
+        stateDidChange = subject.attemptStateTransition(READY, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(SHOWING);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(SHOWING);
+        stateDidChange = subject.attemptStateTransition(SHOWING, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(SHOWING);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(SHOWING);
+        stateDidChange = subject.attemptStateTransition(SHOWING, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(SHOWING);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(SHOWING);
+        stateDidChange = subject.attemptStateTransition(DESTROYED, false);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
+        verify(customEventInterstitialAdapter).invalidate();
+
+        resetMoPubInterstitial(SHOWING);
+        stateDidChange = subject.attemptStateTransition(DESTROYED, true);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
+        verify(customEventInterstitialAdapter).invalidate();
+    }
     @Test
     public void attemptStateTransition_withDestroyedStartState() {
         // All state transitions should fail if starting from a destroyed state
         subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.DESTROYED);
-        boolean stateDidChange = subject.attemptStateTransition(
-                MoPubInterstitial.InterstitialState.IDLE, false);
+        subject.setCurrentInterstitialState(DESTROYED);
+        boolean stateDidChange = subject.attemptStateTransition(IDLE, false);
         assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
-                MoPubInterstitial.InterstitialState.DESTROYED);
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
         verifyZeroInteractions(customEventInterstitialAdapter);
 
-        reset(customEventInterstitialAdapter);
-        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.DESTROYED);
-        stateDidChange = subject.attemptStateTransition(
-                MoPubInterstitial.InterstitialState.IDLE, true);
+        resetMoPubInterstitial(DESTROYED);
+        stateDidChange = subject.attemptStateTransition(IDLE, true);
         assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
-                MoPubInterstitial.InterstitialState.DESTROYED);
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
         verifyZeroInteractions(customEventInterstitialAdapter);
 
-        reset(customEventInterstitialAdapter);
-        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.DESTROYED);
-        stateDidChange = subject.attemptStateTransition(
-                MoPubInterstitial.InterstitialState.LOADING, false);
+        resetMoPubInterstitial(DESTROYED);
+        stateDidChange = subject.attemptStateTransition(LOADING, false);
         assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
-                MoPubInterstitial.InterstitialState.DESTROYED);
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
         verifyZeroInteractions(customEventInterstitialAdapter);
 
-        reset(customEventInterstitialAdapter);
-        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.DESTROYED);
-        stateDidChange = subject.attemptStateTransition(
-                MoPubInterstitial.InterstitialState.LOADING, true);
+        resetMoPubInterstitial(DESTROYED);
+        stateDidChange = subject.attemptStateTransition(LOADING, true);
         assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
-                MoPubInterstitial.InterstitialState.DESTROYED);
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
         verifyZeroInteractions(customEventInterstitialAdapter);
 
-        reset(customEventInterstitialAdapter);
-        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.DESTROYED);
-        stateDidChange = subject.attemptStateTransition(
-                MoPubInterstitial.InterstitialState.READY, false);
+        resetMoPubInterstitial(DESTROYED);
+        stateDidChange = subject.attemptStateTransition(READY, false);
         assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
-                MoPubInterstitial.InterstitialState.DESTROYED);
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
         verifyZeroInteractions(customEventInterstitialAdapter);
 
-        reset(customEventInterstitialAdapter);
-        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.DESTROYED);
-        stateDidChange = subject.attemptStateTransition(
-                MoPubInterstitial.InterstitialState.READY, true);
+        resetMoPubInterstitial(DESTROYED);
+        stateDidChange = subject.attemptStateTransition(READY, true);
         assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
-                MoPubInterstitial.InterstitialState.DESTROYED);
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
         verifyZeroInteractions(customEventInterstitialAdapter);
 
-        reset(customEventInterstitialAdapter);
-        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.DESTROYED);
-        stateDidChange = subject.attemptStateTransition(
-                MoPubInterstitial.InterstitialState.DESTROYED, false);
+        resetMoPubInterstitial(DESTROYED);
+        stateDidChange = subject.attemptStateTransition(LOADING, false);
         assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
-                MoPubInterstitial.InterstitialState.DESTROYED);
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
         verifyZeroInteractions(customEventInterstitialAdapter);
 
-        reset(customEventInterstitialAdapter);
-        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(MoPubInterstitial.InterstitialState.DESTROYED);
-        stateDidChange = subject.attemptStateTransition(
-                MoPubInterstitial.InterstitialState.DESTROYED, true);
+        resetMoPubInterstitial(DESTROYED);
+        stateDidChange = subject.attemptStateTransition(LOADING, true);
         assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(
-                MoPubInterstitial.InterstitialState.DESTROYED);
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(DESTROYED);
+        stateDidChange = subject.attemptStateTransition(DESTROYED, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(DESTROYED);
+        stateDidChange = subject.attemptStateTransition(DESTROYED, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
     }
 
     private void loadCustomEvent() {
@@ -757,4 +705,12 @@ private void assertShowsCustomEventInterstitial(boolean shouldBeReady) {
             verify(customEventInterstitialAdapter, never()).showInterstitial();
         }
     }
+
+    private void resetMoPubInterstitial(
+            @NonNull final MoPubInterstitial.InterstitialState interstitialState) {
+        reset(customEventInterstitialAdapter, interstitialAdListener, interstitialView);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setInterstitialView(interstitialView);
+        subject.setCurrentInterstitialState(interstitialState);
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
index 4d392c6e..24e0e4db 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
@@ -6,6 +6,7 @@
 import android.support.annotation.Nullable;
 
 import com.mopub.common.AdType;
+import com.mopub.common.DataKeys;
 import com.mopub.common.LifecycleListener;
 import com.mopub.common.MoPubReward;
 import com.mopub.common.test.support.SdkTestRunner;
@@ -20,6 +21,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
 import org.mockito.ArgumentMatcher;
 import org.mockito.Mock;
 import org.mockito.invocation.InvocationOnMock;
@@ -29,6 +31,7 @@
 import org.robolectric.shadows.ShadowLooper;
 
 import java.util.Map;
+import java.util.Set;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
@@ -39,6 +42,7 @@
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.mockito.Mockito.verifyZeroInteractions;
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
@@ -46,6 +50,8 @@
 public class
         MoPubRewardedVideoManagerTest {
 
+    public static final String MOPUB_REWARD = "mopub_reward";
+
     @Mock
     MoPubRequestQueue mockRequestQueue;
     @Mock
@@ -77,6 +83,8 @@ public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {
     public void tearDown() {
         // Unpause the main looper in case a test terminated while the looper was paused.
         ShadowLooper.unPauseMainLooper();
+        MoPubRewardedVideoManager.getRewardedVideoData().clear();
+        MoPubRewardedVideoManager.getAdRequestStatusMapping().clearMapping();
     }
 
     @Test
@@ -109,6 +117,22 @@ public void loadVideo_withCustomerIdInRequestParameters_shouldSetCustomerId() {
         ShadowLooper.unPauseMainLooper();
     }
 
+    @Test
+    public void loadVideo_withVideoAlreadyShowing_shouldNotLoadVideo() {
+        // To simulate that a video is showing
+        MoPubRewardedVideoManager.getRewardedVideoData().setCurrentlyShowingAdUnitId("testAdUnit");
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+
+        ShadowLooper.unPauseMainLooper();
+
+        verifyZeroInteractions(mockRequestQueue);
+    }
+
     @Test
     public void callbackMethods_withNullListener_shouldNotError() {
         // Clients can set RVM null.
@@ -129,10 +153,14 @@ public void callbackMethods_withNullListener_shouldNotError() {
 
         ShadowLooper.unPauseMainLooper();
 
-        MoPubRewardedVideoManager.onRewardedVideoClicked(TestCustomEvent.class, "id!");
-        MoPubRewardedVideoManager.onRewardedVideoStarted(TestCustomEvent.class, "id!");
-        MoPubRewardedVideoManager.onRewardedVideoClosed(TestCustomEvent.class, "id!");
-        MoPubRewardedVideoManager.onRewardedVideoCompleted(TestCustomEvent.class, "id!",
+        MoPubRewardedVideoManager.onRewardedVideoClicked(TestCustomEvent.class,
+                TestCustomEvent.AD_NETWORK_ID);
+        MoPubRewardedVideoManager.onRewardedVideoStarted(TestCustomEvent.class,
+                TestCustomEvent.AD_NETWORK_ID);
+        MoPubRewardedVideoManager.onRewardedVideoClosed(TestCustomEvent.class,
+                TestCustomEvent.AD_NETWORK_ID);
+        MoPubRewardedVideoManager.onRewardedVideoCompleted(TestCustomEvent.class,
+                TestCustomEvent.AD_NETWORK_ID,
                 MoPubReward.success("test", 111));
 
         // The test passed because none of the above calls thew an exception even though the listener is null.
@@ -214,10 +242,10 @@ public void onAdSuccess_shouldInstantiateCustomEvent_andLoad() {
     }
 
     @Test
-    public void onAdSuccess_withCustomEventAlreadyLoaded_shouldInvalidateOldCustomEvent() throws Exception {
+    public void loadVideo_withCustomEventAlreadyLoaded_shouldNotLoadAnotherVideo() throws Exception {
         final CustomEventRewardedVideo mockCustomEvent = mock(CustomEventRewardedVideo.class);
         MoPubRewardedVideoManager.getRewardedVideoData().updateAdUnitCustomEventMapping(
-                "testAdUnit", mockCustomEvent, null, "id!");
+                "testAdUnit", mockCustomEvent, null, TestCustomEvent.AD_NETWORK_ID);
 
         AdResponse testResponse = new AdResponse.Builder()
                 .setCustomEventClassName(
@@ -239,24 +267,66 @@ public void onAdSuccess_withCustomEventAlreadyLoaded_shouldInvalidateOldCustomEv
         assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
         verify(mockVideoListener).onRewardedVideoLoadSuccess(eq("testAdUnit"));
         verifyNoMoreInteractions(mockVideoListener);
+        verify(mockRequestQueue).add(any(Request.class));
         reset(mockVideoListener);
 
         ShadowLooper.pauseMainLooper();
 
         // Load the second custom event
         MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        requestListener.onSuccess(testResponse);
 
         ShadowLooper.unPauseMainLooper();
 
-        // Verify the second custom event was loaded
+        // Verify the first custom event is still available
         assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
         verify(mockVideoListener).onRewardedVideoLoadSuccess(eq("testAdUnit"));
         verifyNoMoreInteractions(mockVideoListener);
+        // Make sure the second load does not attempt to load another ad
+        verifyNoMoreInteractions(mockRequestQueue);
+    }
+
+    @Test
+    public void onAdSuccess_shouldHaveUniqueBroadcastIdsSetForEachCustomEvent() throws Exception {
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName(
+                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setAdType(AdType.CUSTOM)
+                .build();
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        // Load the first custom event
+        MoPubRewardedVideoManager.loadVideo("testAdUnit1", null);
+        requestListener.onSuccess(testResponse);
+
+        ShadowLooper.unPauseMainLooper();
+
+        // Get the first custom event's broadcast id
+        TestCustomEvent testCustomEvent1 = (TestCustomEvent)
+                MoPubRewardedVideoManager.getRewardedVideoData().getCustomEvent("testAdUnit1");
+        Long broadcastId1 = (Long) testCustomEvent1.getLocalExtras().get(
+                DataKeys.BROADCAST_IDENTIFIER_KEY);
+        assertThat(broadcastId1).isNotNull();
+
+        ShadowLooper.pauseMainLooper();
+
+        // Load the second custom event
+        MoPubRewardedVideoManager.loadVideo("testAdUnit2", null);
+        requestListener.onSuccess(testResponse);
+
+        ShadowLooper.unPauseMainLooper();
+
+        // Get the second custom event's broadcast id
+        TestCustomEvent testCustomEvent2 = (TestCustomEvent)
+                MoPubRewardedVideoManager.getRewardedVideoData().getCustomEvent("testAdUnit2");
+        Long broadcastId2 = (Long) testCustomEvent2.getLocalExtras().get(
+                DataKeys.BROADCAST_IDENTIFIER_KEY);
+        assertThat(broadcastId2).isNotNull();
 
-        // Verify that the first custom event was invalidated
-        verify(mockCustomEvent).onInvalidate();
-        verifyNoMoreInteractions(mockCustomEvent);
+        // Make sure they're different
+        assertThat(broadcastId1).isNotEqualTo(broadcastId2);
     }
 
     @Test
@@ -371,7 +441,7 @@ public void onAdFailure_shouldCallFailCallback() {
 
     @Test
     public void chooseReward_shouldReturnMoPubRewardOverNetworkReward() throws Exception {
-        MoPubReward moPubReward = MoPubReward.success("mopub_reward", 123);
+        MoPubReward moPubReward = MoPubReward.success(MOPUB_REWARD, 123);
         MoPubReward networkReward = MoPubReward.success("network_reward", 456);
 
         MoPubReward chosenReward =
@@ -381,16 +451,70 @@ public void chooseReward_shouldReturnMoPubRewardOverNetworkReward() throws Excep
 
     @Test
     public void chooseReward_withNetworkRewardNotSuccessful_shouldReturnNetworkReward() throws Exception {
-        MoPubReward moPubReward = MoPubReward.success("mopub_reward", 123);
+        MoPubReward moPubReward = MoPubReward.success(MOPUB_REWARD, 123);
         MoPubReward networkReward = MoPubReward.failure();
 
         MoPubReward chosenReward =
                 MoPubRewardedVideoManager.chooseReward(moPubReward, networkReward);
         assertThat(chosenReward).isEqualTo(networkReward);
     }
+    
+    @Test
+    public void onRewardedVideoCompleted_withEmptyServerCompletionUrl_withCurrentlyShowingAdUnitId_shouldNotifyRewardedVideoCompletedForOneAdUnitId() {
+        MoPubReward moPubReward = MoPubReward.success(MOPUB_REWARD, 123);
+        RewardedVideoData rewardedVideoData = MoPubRewardedVideoManager.getRewardedVideoData();
+        rewardedVideoData.setCurrentlyShowingAdUnitId("testAdUnit1");
+        rewardedVideoData.updateAdUnitCustomEventMapping("testAdUnit1", new TestCustomEvent(), null,
+                TestCustomEvent.AD_NETWORK_ID);
+        rewardedVideoData.updateAdUnitCustomEventMapping("testAdUnit2", new TestCustomEvent(), null,
+                TestCustomEvent.AD_NETWORK_ID);
+        // Server completion url empty and custom event has no server reward set
+
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.onRewardedVideoCompleted(TestCustomEvent.class, TestCustomEvent.AD_NETWORK_ID,
+                moPubReward);
+        
+        ShadowLooper.unPauseMainLooper();
+
+        ArgumentCaptor<Set<String>> rewardedIdsCaptor = ArgumentCaptor.forClass((Class) Set.class);
+        verify(mockVideoListener).onRewardedVideoCompleted(rewardedIdsCaptor.capture(),
+                eq(moPubReward));
+        assertThat(rewardedIdsCaptor.getValue()).containsOnly("testAdUnit1");
+    }
+
+    @Test
+    public void onRewardedVideoCompleted_withEmptyServerCompletionUrl_withNoCurrentlyShowingAdUnitId_shouldNotifyRewardedVideoCompletedForAllAdUnitIds() {
+        MoPubReward moPubReward = MoPubReward.success(MOPUB_REWARD, 123);
+        RewardedVideoData rewardedVideoData = MoPubRewardedVideoManager.getRewardedVideoData();
+        rewardedVideoData.setCurrentlyShowingAdUnitId(null);
+        rewardedVideoData.updateAdUnitCustomEventMapping("testAdUnit1", new TestCustomEvent(), null,
+                TestCustomEvent.AD_NETWORK_ID);
+        rewardedVideoData.updateAdUnitCustomEventMapping("testAdUnit2", new TestCustomEvent(), null,
+                TestCustomEvent.AD_NETWORK_ID);
+        rewardedVideoData.updateAdUnitCustomEventMapping("testAdUnit3", new TestCustomEvent(), null,
+                TestCustomEvent.AD_NETWORK_ID);
+        // Server completion url empty and custom event has no server reward set
+
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.onRewardedVideoCompleted(TestCustomEvent.class, TestCustomEvent.AD_NETWORK_ID,
+                moPubReward);
+
+        ShadowLooper.unPauseMainLooper();
+
+        ArgumentCaptor<Set<String>> rewardedIdsCaptor = ArgumentCaptor.forClass((Class) Set.class);
+        verify(mockVideoListener).onRewardedVideoCompleted(rewardedIdsCaptor.capture(),
+                eq(moPubReward));
+        assertThat(rewardedIdsCaptor.getValue()).containsOnly("testAdUnit1", "testAdUnit2",
+                "testAdUnit3");
+    }
 
     public static class TestCustomEvent extends CustomEventRewardedVideo {
-        protected boolean mPlayable = false;
+        public static final String AD_NETWORK_ID = "id!";
+
+        boolean mPlayable = false;
+        private Map<String, Object> mLocalExtras;
 
         @Nullable
         @Override
@@ -407,7 +531,7 @@ protected LifecycleListener getLifecycleListener() {
         @NonNull
         @Override
         protected String getAdNetworkId() {
-            return "id!";
+            return AD_NETWORK_ID;
         }
 
         @Override
@@ -428,7 +552,9 @@ protected void loadWithSdkInitialized(@NonNull final Activity activity,
                 @NonNull final Map<String, String> serverExtras) throws Exception {
             // Do nothing because robolectric handlers execute immediately.
             mPlayable = true;
-            MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(TestCustomEvent.class, "id!");
+            MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(TestCustomEvent.class,
+                    TestCustomEvent.AD_NETWORK_ID);
+            mLocalExtras = localExtras;
         }
 
         @Override
@@ -438,7 +564,12 @@ protected boolean hasVideoAvailable() {
 
         @Override
         protected void showVideo() {
-            MoPubRewardedVideoManager.onRewardedVideoStarted(TestCustomEvent.class, "id!");
+            MoPubRewardedVideoManager.onRewardedVideoStarted(TestCustomEvent.class, TestCustomEvent.AD_NETWORK_ID);
+        }
+
+        @Nullable
+        Map<String, Object> getLocalExtras() {
+            return mLocalExtras;
         }
     }
 
@@ -448,7 +579,7 @@ protected void loadWithSdkInitialized(@NonNull final Activity activity,
                 @NonNull final Map<String, Object> localExtras,
                 @NonNull final Map<String, String> serverExtras) throws Exception {
             mPlayable = false;
-            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(NoVideoCustomEvent.class, "id!", MoPubErrorCode.NETWORK_NO_FILL);
+            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(NoVideoCustomEvent.class, TestCustomEvent.AD_NETWORK_ID, MoPubErrorCode.NETWORK_NO_FILL);
         }
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
index 16fd1507..0b440d17 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
@@ -6,9 +6,12 @@
 import android.view.View;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.Reflection;
+import com.mopub.common.util.test.support.ShadowReflection;
 import com.mopub.mobileads.test.support.TestAdViewControllerFactory;
 import com.mopub.mobileads.test.support.TestCustomEventBannerAdapterFactory;
 
+import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -28,7 +31,7 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
+@Config(constants = BuildConfig.class, shadows = {ShadowReflection.class})
 public class MoPubViewTest {
     private MoPubView subject;
     private Map<String,String> paramsMap = new HashMap<String, String>();
@@ -45,6 +48,11 @@ public void setup() {
         adViewController = TestAdViewControllerFactory.getSingletonMock();
     }
 
+    @After
+    public void tearDown() {
+        ShadowReflection.reset();
+    }
+
     @Test
     public void screenStateBroadcastReceiver_withActionUserPresent_shouldUnpauseRefresh() throws Exception {
         broadcastIntent(new Intent(Intent.ACTION_USER_PRESENT));
@@ -191,6 +199,57 @@ public void loadCustomEvent_whenParamsMapIsNull_shouldCallLoadFailUrl() throws E
         verify(customEventBannerAdapter, never()).loadAd();
     }
 
+    @Test
+    public void loadCustomEvent_withTwoCalls_shouldInvalidateAdapterOnce() throws Exception {
+        subject.loadCustomEvent("name", paramsMap);
+        subject.loadCustomEvent("name", paramsMap);
+
+        verify(customEventBannerAdapter).invalidate();
+    }
+
+    @Test
+    public void forceRefresh_withCallToLoadCustomEvent_shouldInvalidateAdapter() throws Exception {
+        subject.loadCustomEvent("name", paramsMap);
+        subject.forceRefresh();
+
+        verify(customEventBannerAdapter).invalidate();
+    }
+
+    @Test
+    public void loadCustomEvent_withoutBannerModule_shouldNotLoadAd() throws Exception {
+        ShadowReflection.setNextClassNotFound(true);
+
+        subject.loadCustomEvent("name", paramsMap);
+
+        verify(customEventBannerAdapter, never()).loadAd();
+    }
+
+    @Test
+    public void forceRefresh_withoutBannerModule_withCallToLoadCustomEvent_shouldNotInvalidateAdapter() throws Exception {
+        ShadowReflection.setNextClassNotFound(true);
+
+        subject.loadCustomEvent("name", paramsMap);
+        subject.forceRefresh();
+
+        verify(customEventBannerAdapter, never()).invalidate();
+    }
+
+    @Test
+    public void forceRefresh_withoutBannerModule_withCallToLoadCustomEvent_shouldForceRefreshAdViewController() throws Exception {
+        ShadowReflection.setNextClassNotFound(true);
+
+        subject.loadCustomEvent("name", paramsMap);
+        subject.forceRefresh();
+
+        verify(adViewController).forceRefresh();
+    }
+
+    @Test
+    public void invalidateAdapter_withReflection_shouldExist() throws Exception {
+        assertThat(Reflection.getDeclaredMethodWithTraversal(CustomEventBannerAdapter.class,
+                "invalidate")).isNotNull();
+    }
+
     private void broadcastIntent(final Intent intent) {
         final List<ShadowApplication.Wrapper> wrappers = ShadowApplication.getInstance().getRegisteredReceivers();
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
index dc0602f1..189d3ad8 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
@@ -33,9 +33,9 @@
 
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
index ef88b18d..8c120a01 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
@@ -1,16 +1,24 @@
 package com.mopub.mobileads;
 
+import android.annotation.TargetApi;
 import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
 import android.content.pm.ActivityInfo;
+import android.graphics.Bitmap;
+import android.os.Build;
 import android.os.Bundle;
+import android.view.TextureView;
 import android.view.View;
 import android.widget.ImageView;
 
+import com.mopub.common.Constants;
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mraid.MraidVideoViewController;
+import com.mopub.nativeads.NativeFullScreenVideoView;
+import com.mopub.nativeads.NativeVideoController;
+import com.mopub.nativeads.NativeVideoViewController;
 
 import org.junit.Before;
 import org.junit.Ignore;
@@ -21,17 +29,22 @@
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowActivity;
 
+import java.lang.reflect.Constructor;
+
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
 public class MraidVideoPlayerActivityTest {
     private static final String VAST = "vast";
     private static final String MRAID = "mraid";
+    private static final String NATIVE_VIDEO_VIEW_CONTROLLER =
+            "com.mopub.nativeads.NativeVideoViewController";
 
     private MraidVideoPlayerActivity subject;
     private long testBroadcastIdentifier;
@@ -63,6 +76,13 @@ public void onCreate_withMraidExtraKey_shouldUseMraidVideoViewController() throw
         assertThat(subject.getBaseVideoViewController()).isInstanceOf(MraidVideoViewController.class);
     }
 
+    @Test
+    public void onCreate_withNativeExtraKey_shouldUseNativeVideoViewController() throws Exception {
+        initializeSubjectForNative();
+
+        assertThat(subject.getBaseVideoViewController()).isInstanceOf(NativeVideoViewController.class);
+    }
+
     @Ignore("pending: this is currently impossible to write")
     @Test
     public void onCreate_shouldForwardOnCreateToViewController() throws Exception {
@@ -167,6 +187,16 @@ public void onStartActivityForResult_withNullClass_shouldNotStartAnActivity() th
         assertThat(intentForResult).isNull();
     }
 
+    @Test
+    public void createVideoViewController_withNativeVideoViewControllerReflectionConstructor_shouldExist() throws Exception {
+        final Class<?> nativeVideoViewController = Class.forName(NATIVE_VIDEO_VIEW_CONTROLLER);
+        final Constructor<?> declaredConstructor = nativeVideoViewController.getDeclaredConstructor(
+                Context.class, Bundle.class, Bundle.class,
+                BaseVideoViewController.BaseVideoViewControllerListener.class);
+
+        assertThat(declaredConstructor).isNotNull();
+    }
+
     private void initializeSubjectForMraid() {
         intent.putExtra(BaseVideoPlayerActivity.VIDEO_CLASS_EXTRAS_KEY, "mraid");
 
@@ -188,6 +218,32 @@ private void initializeSubjectForVast() {
                 .get();
     }
 
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+    private void initializeSubjectForNative() {
+        intent.putExtra(BaseVideoPlayerActivity.VIDEO_CLASS_EXTRAS_KEY, "native");
+
+        NativeFullScreenVideoView mockFullScreenVideoView = mock(NativeFullScreenVideoView.class);
+        NativeVideoController mockVideoController = mock(NativeVideoController.class);
+        VastVideoConfig mockVastVideoConfig = mock(VastVideoConfig.class);
+        TextureView mockTextureView = mock(TextureView.class);
+        Bitmap mockBitmap = mock(Bitmap.class);
+
+        when(mockVastVideoConfig.getCustomCtaText()).thenReturn("Learn More");
+        when(mockFullScreenVideoView.getTextureView()).thenReturn(mockTextureView);
+        when(mockTextureView.getBitmap()).thenReturn(mockBitmap);
+
+        Bundle additionalExtras = new Bundle();
+        additionalExtras.putSerializable(Constants.NATIVE_VAST_VIDEO_CONFIG, mockVastVideoConfig);
+        additionalExtras.putLong(Constants.NATIVE_VIDEO_ID, 123);
+        NativeVideoController.setForId(123, mockVideoController);
+        intent.putExtras(additionalExtras);
+
+        subject = Robolectric.buildActivity(MraidVideoPlayerActivity.class)
+                .withIntent(intent)
+                .create()
+                .get();
+    }
+
     private void initializeSubjectWithMockViewController() {
         initializeSubjectForMraid();
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoBroadcastReceiverTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoBroadcastReceiverTest.java
index 64b328a4..97a711ec 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoBroadcastReceiverTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoBroadcastReceiverTest.java
@@ -4,6 +4,7 @@
 import android.content.Intent;
 import android.content.IntentFilter;
 
+import com.mopub.common.IntentActions;
 import com.mopub.common.test.support.SdkTestRunner;
 
 import org.fest.util.Sets;
@@ -41,7 +42,7 @@ public void setUp() throws Exception {
     @Test
     public void constructor_shouldSetIntentFilter() throws Exception {
         Set<String> expectedActions = Sets.newLinkedHashSet(
-                RewardedVideoBroadcastReceiver.ACTION_REWARDED_VIDEO_COMPLETE
+                IntentActions.ACTION_REWARDED_VIDEO_COMPLETE
         );
 
         final IntentFilter intentFilter = subject.getIntentFilter();
@@ -57,7 +58,7 @@ public void constructor_shouldSetIntentFilter() throws Exception {
     public void onReceive_withActionRewardedVideoComplete_shouldNotifyListener() {
         final Intent rewardedVideoCompleteIntent = new Intent();
         rewardedVideoCompleteIntent.setAction(
-                RewardedVideoBroadcastReceiver.ACTION_REWARDED_VIDEO_COMPLETE);
+                IntentActions.ACTION_REWARDED_VIDEO_COMPLETE);
         rewardedVideoCompleteIntent.putExtra("broadcastIdentifier", broadcastIdentifier);
 
         subject.onReceive(context, rewardedVideoCompleteIntent);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java
index c16f52b6..bee53d27 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java
@@ -36,6 +36,8 @@ public void setup() throws Exception {
                 "        https://creativeView/two" +
                 "        ]]>" +
                 "    </Tracking>" +
+                // Ensure empty creativeView event is ignored
+                "    <Tracking event=\"creativeView\"/>" +
                 "    <Tracking event=\"start\">" +
                 "        <![CDATA[" +
                 "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
@@ -272,15 +274,15 @@ public void getAbsoluteProgressTrackers_shouldReturnCorrectValues() {
 
         VastAbsoluteProgressTracker tracker0 = trackers.get(0);
         assertThat(tracker0.getTrackingMilliseconds()).isEqualTo(0);
-        assertThat(tracker0.getTrackingUrl()).isEqualTo("https://creativeView/one");
+        assertThat(tracker0.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
 
         VastAbsoluteProgressTracker tracker1 = trackers.get(1);
         assertThat(tracker1.getTrackingMilliseconds()).isEqualTo(0);
-        assertThat(tracker1.getTrackingUrl()).isEqualTo("https://creativeView/two");
+        assertThat(tracker1.getTrackingUrl()).isEqualTo("https://creativeView/one");
 
         VastAbsoluteProgressTracker tracker2 = trackers.get(2);
-        assertThat(tracker2.getTrackingMilliseconds()).isEqualTo(2000);
-        assertThat(tracker2.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+        assertThat(tracker2.getTrackingMilliseconds()).isEqualTo(0);
+        assertThat(tracker2.getTrackingUrl()).isEqualTo("https://creativeView/two");
 
         VastAbsoluteProgressTracker tracker3 = trackers.get(3);
         assertThat(tracker3.getTrackingMilliseconds()).isEqualTo(3670300);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java
index d53c7cc3..7f0d8b98 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java
@@ -103,7 +103,7 @@ public void prepareVastVideoConfiguration_shouldNotifyTheListenerAndContainTheCo
         assertThat(mVastVideoConfig.getAbsoluteTrackers().get(0).getTrackingMilliseconds())
                 .isEqualTo(0);
         assertThat(mVastVideoConfig.getAbsoluteTrackers().get(1).getTrackingMilliseconds())
-                .isEqualTo(2000);
+                .isEqualTo(0);
         assertThat(mVastVideoConfig.getAbsoluteTrackers().get(2).getTrackingMilliseconds())
                 .isEqualTo(3100);
 
@@ -158,9 +158,9 @@ public void prepareVastVideoConfiguration_shouldHandleMultipleRedirects() throws
         assertThat(mVastVideoConfig.getAbsoluteTrackers().get(0).getTrackingMilliseconds()).isEqualTo(0);
         assertThat(mVastVideoConfig.getAbsoluteTrackers().get(1).getTrackingMilliseconds()).isEqualTo(0);
         assertThat(mVastVideoConfig.getAbsoluteTrackers().get(2).getTrackingMilliseconds()).isEqualTo(0);
-        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(3).getTrackingMilliseconds()).isEqualTo(2000);
-        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(4).getTrackingMilliseconds()).isEqualTo(2000);
-        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(5).getTrackingMilliseconds()).isEqualTo(2000);
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(3).getTrackingMilliseconds()).isEqualTo(0);
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(4).getTrackingMilliseconds()).isEqualTo(0);
+        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(5).getTrackingMilliseconds()).isEqualTo(0);
         assertThat(mVastVideoConfig.getAbsoluteTrackers().get(6).getTrackingMilliseconds()).isEqualTo(3100);
         assertThat(mVastVideoConfig.getAbsoluteTrackers().get(7).getTrackingMilliseconds()).isEqualTo(3100);
         assertThat(mVastVideoConfig.getAbsoluteTrackers().get(8).getTrackingMilliseconds()).isEqualTo(3100);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
index 30c32d09..1fa858ca 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
@@ -29,8 +29,8 @@
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 import static com.mopub.mobileads.VastManager.VastManagerListener;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
index f7cfbc63..1c063c3a 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
@@ -65,9 +65,9 @@
 import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
 import static com.mopub.common.VolleyRequestMatcher.isUrl;
 import static com.mopub.mobileads.BaseVideoViewController.BaseVideoViewControllerListener;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static com.mopub.mobileads.VastVideoViewController.CURRENT_POSITION;
 import static com.mopub.mobileads.VastVideoViewController.DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java
index 3f2a1ddd..0d935fc6 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java
@@ -602,7 +602,7 @@ public void getAbsoluteProgressTrackers_withLinearXmlManager_shouldReturnCorrect
         assertThat(trackers.size()).isEqualTo(2);
 
         VastAbsoluteProgressTracker tracker0 = trackers.get(0);
-        assertThat(tracker0.getTrackingMilliseconds()).isEqualTo(2000);
+        assertThat(tracker0.getTrackingMilliseconds()).isEqualTo(0);
         assertThat(tracker0.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
 
         VastAbsoluteProgressTracker tracker1 = trackers.get(1);
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java
index 3d38b27f..2744dc6e 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java
@@ -24,9 +24,9 @@
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 import static org.fest.assertions.api.Assertions.assertThat;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
index eea82131..f3cd7f58 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
@@ -13,6 +13,7 @@
 import android.view.TextureView.SurfaceTextureListener;
 import android.view.View;
 
+import com.mopub.common.Constants;
 import com.mopub.common.event.EventDetails;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BaseVideoPlayerActivity;
@@ -524,9 +525,9 @@ public void MediaLayout_clickListener_shouldPrepareToLeaveView_shouldTriggerImpr
                 .isEqualTo(MraidVideoPlayerActivity.class.getName());
         assertThat(startedActivity.getStringExtra(BaseVideoPlayerActivity.VIDEO_CLASS_EXTRAS_KEY))
                 .isEqualTo("native");
-        assertThat(startedActivity.getLongExtra(NativeVideoViewController.NATIVE_VIDEO_ID, 0L))
+        assertThat(startedActivity.getLongExtra(Constants.NATIVE_VIDEO_ID, 0L))
                 .isGreaterThan(0L);
-        assertThat(startedActivity.getSerializableExtra(NativeVideoViewController
+        assertThat(startedActivity.getSerializableExtra(Constants
                 .NATIVE_VAST_VIDEO_CONFIG))
                 .isEqualTo(mockVastVideoConfig);
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
index 62b74958..4404ab8c 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
@@ -25,7 +25,6 @@
     private Activity activity;
     @Mock private View mockView;
     @Mock private ViewGroup mockViewGroup;
-    @Mock private ViewBinder mockViewBinder;
     @Mock private NativeAd mMockNativeAd1;
     @Mock private NativeAd mMockNativeAd2;
 
@@ -42,8 +41,7 @@ public void setUp() throws Exception {
 
     @Test
     public void getAdView_shouldRenderView() throws Exception {
-        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1,
-                mockViewBinder);
+        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1);
 
         verify(mMockNativeAd1).createAdView(activity, mockViewGroup);
         verify(mMockNativeAd1).renderAdView(mockView);
@@ -53,8 +51,7 @@ public void getAdView_shouldRenderView() throws Exception {
     public void getAdView_withDestroyedNativeAd_shouldReturnEmptyAndGoneConvertView() throws Exception {
         when(mMockNativeAd1.isDestroyed()).thenReturn(true);
 
-        View view = NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1,
-                mockViewBinder);
+        View view = NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1);
 
         assertThat(view).isNotEqualTo(mockView);
         assertThat(view.getTag()).isEqualTo(NativeAdViewHelper.ViewType.EMPTY);
@@ -63,24 +60,20 @@ public void getAdView_withDestroyedNativeAd_shouldReturnEmptyAndGoneConvertView(
 
     @Test
     public void getAdView_shouldClearPreviousNativeAd() throws Exception {
-        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1,
-                mockViewBinder);
+        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1);
 
         // Second call should clear the first NativeAd
-        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd2,
-                mockViewBinder);
+        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd2);
         verify(mMockNativeAd1).clear(mockView);
 
         // Third call should clear the second NativeAd
-        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1,
-                mockViewBinder);
+        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1);
         verify(mMockNativeAd2).clear(mockView);
     }
 
     @Test
     public void getAdView_shouldPrepareNativeAd() throws Exception {
-        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1,
-                mockViewBinder);
+        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1);
 
         verify(mMockNativeAd1).prepare(mockView);
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java
index 79307f38..6c35d102 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java
@@ -12,6 +12,7 @@
 import android.view.View;
 import android.view.ViewGroup.LayoutParams;
 
+import com.mopub.common.Constants;
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BaseVideoViewController.BaseVideoViewControllerListener;
@@ -63,13 +64,13 @@ public void setUp() {
         activity = Robolectric.buildActivity(Activity.class).create().get();
 
         intentExtras = new Bundle();
-        intentExtras.putLong(NativeVideoViewController.NATIVE_VIDEO_ID, 123);
+        intentExtras.putLong(Constants.NATIVE_VIDEO_ID, 123);
         NativeVideoController.setForId(123, mockVideoController);
 
         when(mockVastVideoConfig.getCustomCtaText()).thenReturn("Learn More");
         when(mockFullScreenVideoView.getTextureView()).thenReturn(mockTextureView);
         when(mockTextureView.getBitmap()).thenReturn(mockBitmap);
-        intentExtras.putSerializable(NativeVideoViewController.NATIVE_VAST_VIDEO_CONFIG, mockVastVideoConfig);
+        intentExtras.putSerializable(Constants.NATIVE_VAST_VIDEO_CONFIG, mockVastVideoConfig);
 
         subject = new NativeVideoViewController(activity, intentExtras, null,
                 mockBaseVideoViewControllerListener, mockFullScreenVideoView);
@@ -100,7 +101,7 @@ public void constructor_withNullNativeVideoController_shouldThrowNPE() {
 
     @Test(expected = NullPointerException.class)
     public void onCreate_withNullNativeVideoController_shouldThrowNPE() {
-        intentExtras.remove(NativeVideoViewController.NATIVE_VAST_VIDEO_CONFIG);
+        intentExtras.remove(Constants.NATIVE_VAST_VIDEO_CONFIG);
         subject = new NativeVideoViewController(activity, intentExtras, null,
                 mockBaseVideoViewControllerListener, mockFullScreenVideoView);
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
index c176e2a4..2c6be2a7 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
@@ -35,9 +35,11 @@
 import static com.mopub.nativeads.VisibilityTracker.VisibilityTrackerListener;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyInt;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
@@ -82,13 +84,14 @@ public void onVisibilityChanged(List<View> visibleViews, List<View> invisibleVie
 
     @Test
     public void constructor_shouldSetOnPreDrawListenerForDecorView() throws Exception {
-        Activity activity1 = mock(Activity.class);
+        Activity activity1 = spy(Robolectric.buildActivity(Activity.class).create().get());
         Window window = mock(Window.class);
         View decorView = mock(View.class);
         ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
 
         when(activity1.getWindow()).thenReturn(window);
         when(window.getDecorView()).thenReturn(decorView);
+        when(decorView.findViewById(anyInt())).thenReturn(decorView);
         when(decorView.getViewTreeObserver()).thenReturn(viewTreeObserver);
         when(viewTreeObserver.isAlive()).thenReturn(true);
 
@@ -123,62 +126,6 @@ public void constructor_withApplicationContext_shouldNotSetOnPreDrawListener() {
         assertThat(subject.mWeakViewTreeObserver.get()).isNull();
     }
 
-    @Test
-    public void getBestRootView_withActivity_withNullView_shouldReturnActivityDecorView() {
-        Activity activity1 = mock(Activity.class);
-        Window window = mock(Window.class);
-        View decorView = mock(View.class);
-        ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
-
-        when(activity1.getWindow()).thenReturn(window);
-        when(window.getDecorView()).thenReturn(decorView);
-        when(decorView.getViewTreeObserver()).thenReturn(viewTreeObserver);
-        when(viewTreeObserver.isAlive()).thenReturn(true);
-
-        View view = VisibilityTracker.getBestRootView(activity1, null);
-
-        assertThat(view).isEqualTo(decorView);
-    }
-
-    @Test
-    public void getBestRootView_withApplicationContext_withRootView_shouldReturnRootView() {
-        View rootView = new View(activity.getApplicationContext());
-
-        View view = VisibilityTracker.getBestRootView(activity.getApplicationContext(), rootView);
-
-        assertThat(view).isEqualTo(rootView);
-    }
-
-    @Test
-    public void getBestRootView_withApplicationContext_withContentView_shouldReturnContentView() {
-        View rootView = mock(View.class);
-        View contentView = mock(View.class);
-
-        when(rootView.findViewById(android.R.id.content)).thenReturn(contentView);
-        when(rootView.getRootView()).thenReturn(rootView);
-
-        View view = VisibilityTracker.getBestRootView(activity.getApplicationContext(), rootView);
-
-        assertThat(view).isEqualTo(contentView);
-    }
-
-    @Test
-    public void getBestRootView_withApplicationContext_withNullView_shouldReturnNull() {
-        View view = VisibilityTracker.getBestRootView(activity.getApplicationContext(), null);
-
-        assertThat(view).isNull();
-    }
-
-    @Test
-    public void getBestRootView_withApplicationContext_withNullRootView_withNullParentView_shouldReturnNull() {
-        View originalView = mock(View.class);
-        when(originalView.getRootView()).thenReturn(null);
-
-        View view = VisibilityTracker.getBestRootView(activity.getApplicationContext(), originalView);
-
-        assertThat(view).isNull();
-    }
-
     @Test
     public void addView_withVisibleView_shouldAddVisibleViewToTrackedViews() throws Exception {
         subject.addView(view, MIN_PERCENTAGE_VIEWED);
@@ -236,13 +183,14 @@ public void clear_shouldRemoveAllViewsFromTrackedViews_shouldRemoveMessagesFromV
 
     @Test
     public void destroy_shouldCallClear_shouldRemoveListenerFromDecorView() throws Exception {
-        Activity activity1 = mock(Activity.class);
+        Activity activity1 = spy(Robolectric.buildActivity(Activity.class).create().get());
         Window window = mock(Window.class);
         View decorView = mock(View.class);
         ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
 
         when(activity1.getWindow()).thenReturn(window);
         when(window.getDecorView()).thenReturn(decorView);
+        when(decorView.findViewById(anyInt())).thenReturn(decorView);
         when(decorView.getViewTreeObserver()).thenReturn(viewTreeObserver);
         when(viewTreeObserver.isAlive()).thenReturn(true);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/network/CustomSSLSocketFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/network/CustomSSLSocketFactoryTest.java
new file mode 100644
index 00000000..01ba66f4
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/network/CustomSSLSocketFactoryTest.java
@@ -0,0 +1,149 @@
+package com.mopub.network;
+
+import android.annotation.SuppressLint;
+import android.annotation.TargetApi;
+import android.net.SSLCertificateSocketFactory;
+import android.os.Build;
+import android.support.annotation.Nullable;
+
+import com.mopub.TestSdkHelper;
+import com.mopub.mobileads.BuildConfig;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mockito;
+import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PrepareForTest;
+import org.powermock.modules.junit4.PowerMockRunner;
+import org.robolectric.annotation.Config;
+
+import java.net.InetAddress;
+import java.net.Socket;
+
+import javax.net.ssl.HostnameVerifier;
+import javax.net.ssl.HttpsURLConnection;
+import javax.net.ssl.SSLHandshakeException;
+import javax.net.ssl.SSLSession;
+import javax.net.ssl.SSLSocket;
+
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyInt;
+import static org.mockito.Matchers.anyString;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.powermock.api.mockito.PowerMockito.mockStatic;
+
+@PrepareForTest(InetAddressUtils.class)
+@RunWith(PowerMockRunner.class)
+@Config(constants = BuildConfig.class)
+public class CustomSSLSocketFactoryTest {
+
+    private CustomSSLSocketFactory subject;
+    private SSLCertificateSocketFactory mockSSLCertificateSocketFactory;
+    private SSLSocketWithSetHostname mockSSLSocket;
+
+    @SuppressLint("SSLCertificateSocketFactoryCreateSocket")
+    @Before
+    public void setUp() throws Exception {
+        mockStatic(InetAddressUtils.class);
+        mockSSLCertificateSocketFactory = mock(SSLCertificateSocketFactory.class);
+        mockSSLSocket = mock(SSLSocketWithSetHostname.class);
+        Mockito.when(mockSSLCertificateSocketFactory.createSocket(any(InetAddress.class),
+                anyInt())).thenReturn(mockSSLSocket);
+        InetAddress mockInetAddress = mock(InetAddress.class);
+        PowerMockito.when(InetAddressUtils.getInetAddressByName(anyString())).thenReturn(
+                mockInetAddress);
+        subject = CustomSSLSocketFactory.getDefault(0);
+        subject.setCertificateSocketFactory(mockSSLCertificateSocketFactory);
+    }
+
+    @Test
+    public void createSocket_withSocketParam_withAutoCloseTrue_shouldCloseOriginalSocket() throws Exception {
+        final Socket mockSocket = mock(Socket.class);
+        final HostnameVerifier mockHostnameVerifier = mock(HostnameVerifier.class);
+        Mockito.when(mockHostnameVerifier.verify(eq("hostname"), any(SSLSession.class))).thenReturn(true);
+        HttpsURLConnection.setDefaultHostnameVerifier(mockHostnameVerifier);
+
+        subject.createSocket(mockSocket, "hostname", 443, true);
+
+        verify(mockSocket).close();
+        verifyNoMoreInteractions(mockSocket);
+    }
+
+    @Test
+    public void createSocket_withSocketParam_withAutoCloseFalse_shouldNotCloseOriginalSocket_shouldCallSetHostname() throws Exception {
+        final Socket mockSocket = mock(Socket.class);
+        final HostnameVerifier mockHostnameVerifier = mock(HostnameVerifier.class);
+        Mockito.when(mockHostnameVerifier.verify(eq("hostname"), any(SSLSession.class))).thenReturn(true);
+        HttpsURLConnection.setDefaultHostnameVerifier(mockHostnameVerifier);
+
+        subject.createSocket(mockSocket, "hostname", 443, false);
+
+        verify(mockSocket, never()).close();
+        verify(mockSSLSocket).getSupportedProtocols();
+        verify(mockSSLSocket).setEnabledProtocols(any(String[].class));
+        verify(mockSSLSocket).startHandshake();
+        verify(mockSSLSocket).getSession();
+        verify(mockSSLSocket).setHostname(any(String.class));
+        verifyNoMoreInteractions(mockSSLSocket);
+    }
+
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
+    @Test
+    public void setHostnameOnSocket_withAtLeastJellyBeanMR1_shouldEnableServerNameIdentification() {
+        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.JELLY_BEAN_MR1);
+
+        final SSLSocket mockSSLSocket = mock(SSLSocket.class);
+
+        CustomSSLSocketFactory.setHostnameOnSocket(mockSSLCertificateSocketFactory, mockSSLSocket,
+                "hostname");
+
+        verify(mockSSLCertificateSocketFactory).setHostname(mockSSLSocket, "hostname");
+    }
+
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
+    @Test
+    public void setHostnameOnSocket_withBelowJellyBeanMR1_shouldEnableServerNameIdentification() {
+        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.JELLY_BEAN);
+
+        final SSLSocket mockSSLSocket = mock(SSLSocket.class);
+
+        CustomSSLSocketFactory.setHostnameOnSocket(mockSSLCertificateSocketFactory, mockSSLSocket,
+                "hostname");
+
+        verify(mockSSLCertificateSocketFactory, never()).setHostname(mockSSLSocket, "hostname");
+    }
+
+    @Test
+    public void verifyServerName_withValidServerNameIdentification_shouldNotThrowSSLHandshakeException() throws Exception {
+        final SSLSocket mockSslSocket = mock(SSLSocket.class);
+        final HostnameVerifier mockHostnameVerifier = mock(HostnameVerifier.class);
+        Mockito.when(mockHostnameVerifier.verify(eq("hostname"), any(SSLSession.class))).thenReturn(true);
+        HttpsURLConnection.setDefaultHostnameVerifier(mockHostnameVerifier);
+
+        CustomSSLSocketFactory.verifyServerName(mockSslSocket, "hostname");
+    }
+
+    @Test(expected = SSLHandshakeException.class)
+    public void verifyServerName_withInvalidServerNameIdentification_shouldThrowSSLHandshakeException() throws Exception {
+        final SSLSocket mockSslSocket = mock(SSLSocket.class);
+        final HostnameVerifier mockHostnameVerifier = mock(HostnameVerifier.class);
+        Mockito.when(mockHostnameVerifier.verify(eq("hostname"), any(SSLSession.class))).thenReturn(false);
+        HttpsURLConnection.setDefaultHostnameVerifier(mockHostnameVerifier);
+
+        CustomSSLSocketFactory.verifyServerName(mockSslSocket, "hostname");
+    }
+
+    /**
+     * This class has the setHostname() method that CustomSSLSocketFactory#setHostnameOnSocket uses
+     * via reflection. This exists so we can Mockito.verify the method setHostname().
+     */
+    private abstract class SSLSocketWithSetHostname extends SSLSocket {
+        public void setHostname(@Nullable final String hostname) {
+        }
+    }
+}
diff --git a/mopub-sdk/src/test/resources/robolectric.properties b/mopub-sdk/src/test/resources/robolectric.properties
index dbe9f738..3cbe9a8d 100644
--- a/mopub-sdk/src/test/resources/robolectric.properties
+++ b/mopub-sdk/src/test/resources/robolectric.properties
@@ -1,2 +1,3 @@
 sdk=21
 shadows=com.mopub.nativeads.test.support.MoPubShadowDisplay,com.mopub.nativeads.test.support.MoPubShadowBitmap,com.mopub.mobileads.test.support.ShadowVastVideoView
+manifest=src/main/AndroidManifest.xml
\ No newline at end of file
diff --git a/settings.gradle b/settings.gradle
index 281d020c..e0667c15 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,3 +1,4 @@
 rootProject.name = 'mopub-android'
-include ':mopub-sdk', ':mopub-sample'
-
+include ':mopub-sdk', ':mopub-sample', ':mopub-sdk:mopub-sdk-base', ':mopub-sdk:mopub-sdk-banner',
+        ':mopub-sdk:mopub-sdk-interstitial', ':mopub-sdk:mopub-sdk-rewardedvideo',
+        ':mopub-sdk:mopub-sdk-native-static', ':mopub-sdk:mopub-sdk-native-video'
