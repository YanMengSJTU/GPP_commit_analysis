diff --git a/mopub-sdk/mopub-sdk-base/build.gradle b/mopub-sdk/mopub-sdk-base/build.gradle
index 989bdba8..64b3e42a 100644
--- a/mopub-sdk/mopub-sdk-base/build.gradle
+++ b/mopub-sdk/mopub-sdk-base/build.gradle
@@ -29,6 +29,7 @@ dependencies {
 //        compile 'com.moat.analytics.mobile.mpub:moat-mobile-app-kit:2.4.5'
 //    }
     compile('com.mopub:libAvid-mopub:3.6.4')
+    //compile ('com.moat.analytics.mobile.mpub:moat-mobile-app-kit:2.4.5')
     //https://s3.amazonaws.com/moat-sdk-builds/com/moat/analytics/mobile/mpub/moat-mobile-app-kit/2.4.5/moat-mobile-app-kit-2.4.5.aar
     //implementation 'com.moat.analytics.mobile.mpub:moat-mobile-app-kit:2.4.5'
     //We get this locally because s3.amazonaws suck balls
@@ -39,10 +40,12 @@ dependencies {
     compile 'com.google.android.gms:play-services-ads:15.0.1'
     compile project(':unity-ads')
     compile 'com.flurry.android:ads:11.1.1@aar'
-
+//Yandex
+    compile 'com.yandex.android:mobmetricalib:3.4.0'
+    compile 'com.yandex.android:mobileads:2.80'
 
 // AppLovin
-    compile 'com.applovin:applovin-sdk:9.1.3'
+    compile 'com.applovin:applovin-sdk:+'
 
 // Facebook Audience Network
    compile 'com.facebook.android:audience-network-sdk:5.1.0'
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/GooglePlayServicesInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/GooglePlayServicesInterstitial.java
index fe92b8fd..c4e8bb95 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/GooglePlayServicesInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/GooglePlayServicesInterstitial.java
@@ -21,6 +21,7 @@
     /*
      * These keys are intended for MoPub internal use. Do not modify.
      * interstitial id for com.mmarcel.cnb2 ca-app-pub-5506681209071224/9599909610
+     * interstitial id for com.craft.goodcraft3 ca-app-pub-5506681209071224/9599909610
      * Trololo niekoho ineho ids
      * appId : ca-app-pub-3921817383553013~8326213202
      * Interstitial: ca-app-pub-3921817383553013/6997054740
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
index 4b15d434..41f4e17f 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
@@ -15,6 +15,7 @@
 import android.view.WindowManager;
 import android.webkit.WebView;
 
+import com.mojang.base.Helper;
 import com.mopub.common.AdReport;
 import com.mopub.common.Constants;
 import com.mopub.common.CreativeOrientation;
@@ -35,6 +36,7 @@
 
 import java.io.Serializable;
 
+import static com.mojang.base.Helper.runOnUiThread;
 import static com.mopub.common.DataKeys.AD_REPORT_KEY;
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static com.mopub.common.DataKeys.CREATIVE_ORIENTATION_KEY;
@@ -73,9 +75,16 @@ public static void preRenderHtml(@NonNull final Interstitial mraidInterstitial,
         Preconditions.checkNotNull(customEventInterstitialListener);
         Preconditions.checkNotNull(broadcastIdentifier);
 
-        preRenderHtml(mraidInterstitial, customEventInterstitialListener, htmlData,
-                new MraidBridge.MraidWebView(context), broadcastIdentifier,
-                new MraidController(context, adReport, PlacementType.INTERSTITIAL));
+        Helper.runOnUiThread(new Runnable() {
+            @Override
+            public void run() {
+                preRenderHtml(mraidInterstitial, customEventInterstitialListener, htmlData,
+                        new MraidBridge.MraidWebView(context), broadcastIdentifier,
+                        new MraidController(context, adReport, PlacementType.INTERSTITIAL));
+            }
+        });
+
+
     }
 
     @VisibleForTesting
@@ -92,50 +101,58 @@ static void preRenderHtml(@NonNull final Interstitial mraidInterstitial,
         Preconditions.checkNotNull(broadcastIdentifier);
         Preconditions.checkNotNull(mraidController);
 
-        mraidWebView.enablePlugins(false);
-        mraidWebView.enableJavascriptCaching();
-        final Context context = mraidWebView.getContext();
-
-        mraidWebView.setWebViewClient(new MraidWebViewClient() {
-            @Override
-            public boolean shouldOverrideUrlLoading(WebView view, String url) {
-                if (MOPUB_FAIL_LOAD.equals(url)) {
-                    MoPubLog.log(LOAD_FAILED, MoPubErrorCode.VIDEO_CACHE_ERROR.getIntCode(),
-                            MoPubErrorCode.VIDEO_CACHE_ERROR);
-                    customEventInterstitialListener.onInterstitialFailed(
-                            MoPubErrorCode.MRAID_LOAD_ERROR);
-                }
-                return true;
-            }
-
+        Helper.runOnUiThread(new Runnable() {
             @Override
-            public void onPageFinished(final WebView view, final String url) {
-                MoPubLog.log(LOAD_SUCCESS);
-                customEventInterstitialListener.onInterstitialLoaded();
-                mraidController.onPreloadFinished(mraidWebView);
-            }
-
-            @Override
-            public void onReceivedError(final WebView view, final int errorCode,
-                    final String description,
-                    final String failingUrl) {
-                super.onReceivedError(view, errorCode, description, failingUrl);
-                MoPubLog.log(LOAD_FAILED, MoPubErrorCode.VIDEO_CACHE_ERROR.getIntCode(),
-                        MoPubErrorCode.VIDEO_CACHE_ERROR);
-                customEventInterstitialListener.onInterstitialFailed(
-                        MoPubErrorCode.MRAID_LOAD_ERROR);
+            public void run() {
+                mraidWebView.enablePlugins(false);
+                mraidWebView.enableJavascriptCaching();
+                final Context context = mraidWebView.getContext();
+
+                mraidWebView.setWebViewClient(new MraidWebViewClient() {
+                    @Override
+                    public boolean shouldOverrideUrlLoading(WebView view, String url) {
+                        if (MOPUB_FAIL_LOAD.equals(url)) {
+                            MoPubLog.log(LOAD_FAILED, MoPubErrorCode.VIDEO_CACHE_ERROR.getIntCode(),
+                                    MoPubErrorCode.VIDEO_CACHE_ERROR);
+                            customEventInterstitialListener.onInterstitialFailed(
+                                    MoPubErrorCode.MRAID_LOAD_ERROR);
+                        }
+                        return true;
+                    }
+
+                    @Override
+                    public void onPageFinished(final WebView view, final String url) {
+                        MoPubLog.log(LOAD_SUCCESS);
+                        customEventInterstitialListener.onInterstitialLoaded();
+                        mraidController.onPreloadFinished(mraidWebView);
+                    }
+
+                    @Override
+                    public void onReceivedError(final WebView view, final int errorCode,
+                                                final String description,
+                                                final String failingUrl) {
+                        super.onReceivedError(view, errorCode, description, failingUrl);
+                        MoPubLog.log(LOAD_FAILED, MoPubErrorCode.VIDEO_CACHE_ERROR.getIntCode(),
+                                MoPubErrorCode.VIDEO_CACHE_ERROR);
+                        customEventInterstitialListener.onInterstitialFailed(
+                                MoPubErrorCode.MRAID_LOAD_ERROR);
+                    }
+                });
+
+                final ExternalViewabilitySessionManager externalViewabilitySessionManager =
+                        new ExternalViewabilitySessionManager(context);
+                externalViewabilitySessionManager.createDisplaySession(context, mraidWebView, true);
+
+                mraidWebView.loadDataWithBaseURL(Networking.getBaseUrlScheme() + "://" + Constants.HOST + "/",
+                        htmlData, "text/html", "UTF-8", null);
+
+                WebViewCacheService.storeWebViewConfig(broadcastIdentifier, mraidInterstitial,
+                        mraidWebView, externalViewabilitySessionManager, mraidController);
             }
         });
 
-        final ExternalViewabilitySessionManager externalViewabilitySessionManager =
-                new ExternalViewabilitySessionManager(context);
-        externalViewabilitySessionManager.createDisplaySession(context, mraidWebView, true);
 
-        mraidWebView.loadDataWithBaseURL(Networking.getBaseUrlScheme() + "://" + Constants.HOST + "/",
-                htmlData, "text/html", "UTF-8", null);
 
-        WebViewCacheService.storeWebViewConfig(broadcastIdentifier, mraidInterstitial,
-                mraidWebView, externalViewabilitySessionManager, mraidController);
     }
 
     public static void start(@NonNull final Context context,
