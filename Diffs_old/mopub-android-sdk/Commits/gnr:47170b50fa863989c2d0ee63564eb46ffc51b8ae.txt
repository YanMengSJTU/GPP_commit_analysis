diff --git a/.gitignore b/.gitignore
index b4a84980..1a2d1ea8 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,4 +1,3 @@
-*.aar
 *.apk
 *.iml
 *.orig
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 99f1bc28..e88b6816 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,90 @@
+#### Version 4.7.1 (June 10, 2016)
+- Fixed deeplink bug.
+
+## Version 4.7.0 (June 2, 2016)
+- Rewarded video server-side currency rewarding (Beta).
+- Enhanced Android intent handling.
+
+#### Version 4.6.1 (May 5, 2016)
+- Enhanced caching logic for HTML and MRAID interstitials. Resource-heavy interstitials will now render more quickly when MoPubInterstitial#show() is called.
+
+## Version 4.6.0 (April 21, 2016)
+- Certified Chartboost version 6.4.1
+- Certified Tapjoy version 11.5.1
+
+#### Version 4.5.1 (March 31, 2016)
+- Updated ExoPlayer dependency from r1.4.2 to r1.5.6; courtesy @talklittle. Removed references to READ_EXTERNAL_STORAGE permission.
+
+## Version 4.5.0 (March 24, 2016)
+- Rewarded video support from the MoPub Marketplace (Beta)
+- Miscellaneous bug fixes.
+
+#### Version 4.4.1 (February 23, 2016)
+- Fixed deeplink bug where host must be present in URL.
+
+## Version 4.4.0 (February 11, 2016) 
+- Updated permission model to be compatible with Android 6.0 (API level 23).
+- Enhancements and bug fixes for video ads.
+
+## Version 4.3.0 (December 15, 2015)
+
+- Enhancements and bug fixes for VAST video ads.
+
+## Version 4.2.0 (November 30, 2015)
+
+- Support for mediating Facebook Native Video ads.
+- Mediated Facebook Native Ads now display the AdChoices icon.
+- Support for Facebook SDK 4.8.1
+
+## Version 4.1.0 (November 12, 2015)
+
+- A number of Native Ad classes now require `Activity` instances instead of `Context`. Most users should be unaffected by this change, and it fixes a crash caused by handling themes incorrectly. The following classes are affected:
+
+  - `CustomEventNative` and its implementations including `MoPubCustomEventNative`.
+  - `MoPubAdAdapter` and `MoPubRecyclerAdapter`.
+  - `MoPubAdRenderer` and its implementations.
+  - `MoPubStreamAdPlacer`
+  - `MoPubNative`
+  - `NativeAd` and `NativeAdSource`
+  - `NativeAdViewHelper`
+
+- Vungle's ad adapters have been updated for their 3.3.0 SDK.
+- Tapjoy adapters for interstitials and rewarded video are included for their 11.2.2 SDK. 
+- The Play Services adapters have been tested with Play Services 7.8.0.
+
+## Version 4.0.0 (October 6, 2015)
+
+Version 4.0.0 includes a number of improvements to our Native Ads systems under the hood. This means a few changes for publishers integrating the ads. The [Native Ads Integration Guide](https://github.com/mopub/mopub-android-sdk/wiki/Native-Ads-Integration) describes all the steps you'll need to integrate 4.0.0.
+
+**Native Ads Changes**
+ - `MoPubNativeAdRenderer` has been replaced by `MoPubStaticNativeRenderer` 
+ - When requesting ads using `MoPubNative`, you must instantiate and register a `MoPubStaticNativeAdRenderer`. See the [Integration Document](https://github.com/mopub/mopub-android-sdk/wiki/Manual-Integration-of-Native-Ads) for more details.
+ - `NativeResponse` has been replaced with `NativeAd`
+ - `NativeAd` has a new API that supports creating and rendering `View`s for Native Ads.
+   - `#createAdView` returns a `View` that can hold data for the `NativeAd`
+   - `#renderAdView` will populate the `View` with ad data. 
+   - Other lifecycle methods from `NativeResponse` remain:
+     - `#prepare`, `#clear`, `#destroy`
+ - The process of writing new `CustomEventNative` instances has changed. These changes will support more dynamic, flexible, and attractive Native Ad formats in the future. All bundled native Custom Event files have been updated to use the new API.
+
+**Removed Old Code**
+ - Removed legacy banner/interestitial listeners, deprecated in 1.11
+ - Removed legacy custom event implementation ("custom event methods") deprecated in 1.10
+
+## Version 3.13.0 (September 21, 2015)
+
+- **Android M Support** - Replaced usage of the now-deprecated HttpClient with HttpURLConnection.
+
+## Version 3.12.0 (August 31, 2015)
+
+- **Rewarded Video Mediation** is now Generally Available. We provide support for Unity Ads, Chartboost, Vungle, and Ad Colony rewarded video.
+- **Privacy Information Icon** is now available for native ads. You should add this view to your ViewBinder. See the example in the MoPub Sample app.
+
+## Version 3.11.0 (August 20, 2015)
+
+- Updated Millennial Media support to 6.0.0, including updates to the `MillennialBanner.java` and `MillennialInterstitial.java` custom events.
+- Added mediation for Millennial Media native ads: `MillennialNative.java`, located in the native extras directory of the SDK (`/extras/src/com/mopub/nativeads`).
+
 ## Version 3.10.0 (August 3, 2015)
 
 - VAST UI improvements and bug fixes.
diff --git a/README.md b/README.md
index 1514edfa..50f2f040 100644
--- a/README.md
+++ b/README.md
@@ -27,7 +27,7 @@ The MoPub SDK is available via:
     }
 
     dependencies {
-        compile('com.mopub:mopub-sdk:3.10.0@aar') {
+        compile('com.mopub:mopub-sdk:4.7.0@aar') {
             transitive = true
         }
     }
@@ -42,6 +42,10 @@ The MoPub SDK is available via:
     **[MoPub Android Full SDK.zip](http://bit.ly/YUdU9v)**  
     _Includes everything you need to serve MoPub ads *and* built-in support for Millennial Media third party ad network - [Millennial Media](http://www.millennialmedia.com/) - including the required third party binaries._
     
+    _**Note:** Millennial Media has updated their minimum supported version of Android to 4.1 (API level 16+). The MoPub Android Full SDK manifest and build.gradle files have been updated accordingly._
+    
+    _**Note:** Millennial Media has deprecated support for Ant/Eclipse; migrating users should use the MoPub Android base SDK and follow [Millennial's Ant/Eclipse Integration Guide](http://docs.millennialmedia.com/android-ad-sdk/ant-eclipse-integration-guide.html)._
+    
     **[MoPub Android Base SDK.zip](http://bit.ly/YUdWhH)**  
     _Includes everything you need to serve MoPub ads.  No third party ad networks are included._
     
@@ -56,29 +60,44 @@ The MoPub SDK is available via:
     **For additional integration instructions, please see the [Getting Started guide](https://github.com/mopub/mopub-android-sdk/wiki/Getting-Started#requirements-and-dependencies).**
 
 ## New in this Version
+Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for a complete list of additions, fixes, and enhancements in the latest release.
 
-Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for a complete list of additions, fixes, and enhancements in the lastest release..
-
-- VAST UI improvements and bug fixes.
-  - Pause trackers no longer fire when the ad is skipped.
-  - Improved retrieval of blurred video frame when there is no companion ad.
-- Added com.mopub:mopub-sdk AAR to [jCenter](https://bintray.com/mopub/mopub-android-sdk/mopub-android-sdk/view).
-- Bug Fixes:
-  - Fixed a NullPointerException in CacheService on devices with low storage space.
-  - Improved redirect loading for in-app browser.
+- Fixed deeplink bug.
 
 ## Requirements
 
 - Android 2.3.1 (API Version 9) and up
-- android-support-v4.jar, r22 (**Updated in 3.7.0**)
-- android-support-annotations.jar, r22 (**Updated in 3.7.0**)
-- android-support-v7-recyclerview.jar, r22 (**Updated in 3.9.0**)
+- android-support-v4.jar, r23 (**Updated in 4.4.0**)
+- android-support-annotations.jar, r23 (**Updated in 4.4.0**)
+- android-support-v7-recyclerview.jar, r23 (**Updated in 4.4.0**)
 - MoPub Volley Library (mopub-volley-1.1.0.jar - available on JCenter) (**Updated in 3.6.0**)
-- **Recommended** Google Play Services 7.0.0
+- **Recommended** Google Play Services 7.8.0
 
 ## Upgrading from 3.2.0 and Prior
 In 3.3.0 a dependency on android-support-annotations.jar was added. If you are using Maven or Gradle to include the MoPub SDK, this dependency is included in the build scripts. For instructions on adding dependencies for Eclipse projects, see our [Getting Started Guide](https://github.com/mopub/mopub-android-sdk/wiki/Getting-Started#adding-the-support-libraries-to-your-project)
 
+## Important Message About Upgrading to MoPub SDK 4.4.0+
+
+Version 4.4.0 of the MoPub SDK fixes a security issue identified by Google. Note that only publishers who received a message from Google are affected. While not all publishers are impacted, we recommend you upgrade to SDK 4.4.0+ ahead of Google's deadline (July 11, 2016) to avoid any issues submitting updates to your apps after the date. More information can be found in [Google's support article](https://support.google.com/faqs/answer/6345928).
+
+## Working with Android 6.0 Runtime Permissions
+If your app's target SDK is 23 or higher _**and**_ the user's device is running Android 6.0 or higher, you are responsible for supporting [runtime permissions](http://developer.android.com/training/permissions/requesting.html), one of the [changes](http://developer.android.com/about/versions/marshmallow/android-6.0-changes.html) introduced in Android 6.0 (API level 23). In addition to listing any dangerous permissions your app needs in the manifest, your app also has to explicitly request the dangerous permission(s) during runtime by calling method `requestPermissions()` in the [`ActivityCompat`](http://developer.android.com/reference/android/support/v4/app/ActivityCompat.html) class.
+
+### Specifically for the MoPub SDK:
+- Dangerous permission [`ACCESS_COARSE_LOCATION`](http://developer.android.com/reference/android/Manifest.permission.html#ACCESS_COARSE_LOCATION) is needed to pass network location data to MoPub.
+- Dangerous permission [`ACCESS_FINE_LOCATION`](http://developer.android.com/reference/android/Manifest.permission.html#ACCESS_FINE_LOCATION) is needed to pass GPS location data to MoPub.
+    - Granting `ACCESS_FINE_LOCATION` also allows network location data to be passed to MoPub without the need to also grant `ACCESS_COARSE_LOCATION`.
+- Dangerous permission [`WRITE_EXTERNAL_STORAGE`](http://developer.android.com/reference/android/Manifest.permission.html#WRITE_EXTERNAL_STORAGE) is needed for MRAID 2.
+- _**Note:** The user can deny granting any dangerous permissions during runtime, so please make sure your app can handle this properly._
+- _**Note:** The user can revoke any permissions granted previously by going to your app's Settings screen, so please make sure your app can handle this properly._
+
+### Additional resources:
+- [Android 6.0 Changes](http://developer.android.com/about/versions/marshmallow/android-6.0-changes.html)
+- [Requesting Permissions at Run Time](http://developer.android.com/training/permissions/requesting.html)
+- [Permissions Best Practices](http://developer.android.com/training/permissions/best-practices.html)
+- [Normal vs Dangerous Permissions](http://developer.android.com/guide/topics/security/permissions.html#normal-dangerous)
+- [Permission Groups](http://developer.android.com/guide/topics/security/permissions.html#perm-groups)
+
 ## License
 
 We have launched a new license as of version 3.2.0. To view the full license, visit [http://www.mopub.com/legal/sdk-license-agreement/](http://www.mopub.com/legal/sdk-license-agreement/).
diff --git a/build.gradle b/build.gradle
index c62b6341..6410ab25 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5,7 +5,7 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:1.2.3'
+        classpath 'com.android.tools.build:gradle:1.3.1'
     }
 }
 
diff --git a/extras/src/com/mopub/mobileads/ChartboostInterstitial.java b/extras/src/com/mopub/mobileads/ChartboostInterstitial.java
index 2862ebcf..ace44241 100644
--- a/extras/src/com/mopub/mobileads/ChartboostInterstitial.java
+++ b/extras/src/com/mopub/mobileads/ChartboostInterstitial.java
@@ -14,7 +14,7 @@
 /**
  * A custom event for showing Chartboost interstitial ads.
  *
- * Certified with Chartboost 5.3.0
+ * Certified with Chartboost 6.4.1
  */
 class ChartboostInterstitial extends CustomEventInterstitial {
 
diff --git a/extras/src/com/mopub/mobileads/ChartboostRewardedVideo.java b/extras/src/com/mopub/mobileads/ChartboostRewardedVideo.java
index 619271b8..08f90ca8 100644
--- a/extras/src/com/mopub/mobileads/ChartboostRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/ChartboostRewardedVideo.java
@@ -16,7 +16,7 @@
 /**
  * A custom event for showing Chartboost rewarded videos.
  *
- * Certified with Chartboost 5.3.0
+ * Certified with Chartboost 6.4.1
  */
 public class ChartboostRewardedVideo extends CustomEventRewardedVideo {
     @NonNull private static final LifecycleListener sLifecycleListener =
diff --git a/extras/src/com/mopub/mobileads/ChartboostShared.java b/extras/src/com/mopub/mobileads/ChartboostShared.java
index e146f15a..a3bb1780 100644
--- a/extras/src/com/mopub/mobileads/ChartboostShared.java
+++ b/extras/src/com/mopub/mobileads/ChartboostShared.java
@@ -8,6 +8,7 @@
 import com.chartboost.sdk.Chartboost;
 import com.chartboost.sdk.ChartboostDelegate;
 import com.chartboost.sdk.Model.CBError;
+import com.mopub.common.MoPub;
 import com.mopub.common.MoPubReward;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
@@ -26,7 +27,7 @@
 /**
  * Shared infrastructure for initializing the Chartboost SDK when mediated by MoPub
  *
- * Certified with Chartboost 5.3.0
+ * Certified with Chartboost 6.4.1
  */
 public class ChartboostShared {
     private static volatile ChartboostSingletonDelegate sDelegate = new ChartboostSingletonDelegate();
@@ -75,7 +76,7 @@ public static synchronized boolean initializeSdk(@NonNull Activity launcherActiv
         // Perform all the common SDK initialization steps including startAppWithId
         Chartboost.startWithAppId(launcherActivity, mAppId, mAppSignature);
         Chartboost.setImpressionsUseActivities(false);
-        Chartboost.setFramework(Chartboost.CBFramework.CBFrameworkMoPub);
+        Chartboost.setMediation(Chartboost.CBMediation.CBMediationMoPub, MoPub.SDK_VERSION);
         Chartboost.setDelegate(sDelegate);
         Chartboost.setShouldRequestInterstitialsInFirstSession(true);
         Chartboost.setAutoCacheAds(false);
diff --git a/extras/src/com/mopub/mobileads/FacebookBanner.java b/extras/src/com/mopub/mobileads/FacebookBanner.java
index f0513a57..c8a0b879 100644
--- a/extras/src/com/mopub/mobileads/FacebookBanner.java
+++ b/extras/src/com/mopub/mobileads/FacebookBanner.java
@@ -16,7 +16,7 @@
 import java.util.Map;
 
 /**
- * Tested with Facebook SDK 3.23.1.
+ * Tested with Facebook SDK 4.8.1.
  */
 public class FacebookBanner extends CustomEventBanner implements AdListener {
     public static final String PLACEMENT_ID_KEY = "placement_id";
diff --git a/extras/src/com/mopub/mobileads/FacebookInterstitial.java b/extras/src/com/mopub/mobileads/FacebookInterstitial.java
index 3ff45d1b..24d19317 100644
--- a/extras/src/com/mopub/mobileads/FacebookInterstitial.java
+++ b/extras/src/com/mopub/mobileads/FacebookInterstitial.java
@@ -11,7 +11,7 @@
 import java.util.Map;
 
 /**
- * Tested with Facebook SDK 3.23.1.
+ * Tested with Facebook SDK 4.8.1.
  */
 public class FacebookInterstitial extends CustomEventInterstitial implements InterstitialAdListener {
     public static final String PLACEMENT_ID_KEY = "placement_id";
@@ -49,6 +49,11 @@ protected void showInterstitial() {
             mFacebookInterstitial.show();
         } else {
             Log.d("MoPub", "Tried to show a Facebook interstitial ad before it finished loading. Please try again.");
+            if (mInterstitialListener != null) {
+                onError(mFacebookInterstitial, AdError.INTERNAL_ERROR);
+            } else {
+                Log.d("MoPub", "Interstitial listener not instantiated. Please load interstitial again.");
+            }
         }
     }
 
diff --git a/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java b/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
index 17273749..d1268306 100644
--- a/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
+++ b/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
@@ -17,7 +17,7 @@
 import static com.google.android.gms.ads.AdSize.MEDIUM_RECTANGLE;
 
 /*
- * Compatible with version 7.0.0 of the Google Play Services SDK.
+ * Compatible with version 7.8.0 of the Google Play Services SDK.
  */
 
 // Note: AdMob ads will now use this class as Google has deprecated the AdMob SDK.
diff --git a/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java b/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
index 9aab1650..7417ac76 100644
--- a/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
+++ b/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
@@ -10,7 +10,7 @@
 import java.util.Map;
 
 /*
- * Compatible with version 7.0.0 of the Google Play Services SDK.
+ * Compatible with version 7.8.0 of the Google Play Services SDK.
  */
 
 // Note: AdMob ads will now use this class as Google has deprecated the AdMob SDK.
diff --git a/extras/src/com/mopub/mobileads/MillennialBanner.java b/extras/src/com/mopub/mobileads/MillennialBanner.java
index 5ea0a596..d09dcf6e 100644
--- a/extras/src/com/mopub/mobileads/MillennialBanner.java
+++ b/extras/src/com/mopub/mobileads/MillennialBanner.java
@@ -1,126 +1,264 @@
 package com.mopub.mobileads;
 
+import android.app.Activity;
 import android.content.Context;
-import android.location.Location;
+import android.os.Handler;
+import android.os.Looper;
 import android.util.Log;
+import android.view.Gravity;
+import android.widget.LinearLayout;
+import android.widget.LinearLayout.LayoutParams;
 
-import com.millennialmedia.android.MMAd;
-import com.millennialmedia.android.MMAdView;
-import com.millennialmedia.android.MMException;
-import com.millennialmedia.android.MMRequest;
-import com.millennialmedia.android.MMSDK;
-import com.millennialmedia.android.RequestListener;
+import com.millennialmedia.AppInfo;
+import com.millennialmedia.InlineAd;
+import com.millennialmedia.InlineAd.AdSize;
+import com.millennialmedia.InlineAd.InlineAdMetadata;
+import com.millennialmedia.InlineAd.InlineErrorStatus;
+import com.millennialmedia.MMException;
+import com.millennialmedia.MMSDK;
 
 import java.util.Map;
 
 /**
- * Compatible with version 5.3.0 of the Millennial Media SDK.
+ * Compatible with version 6.0 of the Millennial Media SDK.
  */
 
 class MillennialBanner extends CustomEventBanner {
 
+    public static final String LOGCAT_TAG = "MP->MM Inline";
+    public static final String DCN_KEY = "dcn";
     public static final String APID_KEY = "adUnitID";
     public static final String AD_WIDTH_KEY = "adWidth";
     public static final String AD_HEIGHT_KEY = "adHeight";
 
-    private MMAdView mMillennialAdView;
+    private InlineAd mInlineAd;
     private CustomEventBannerListener mBannerListener;
+    private LinearLayout mInternalView;
+    private static final Handler UI_THREAD_HANDLER = new Handler(Looper.getMainLooper());
 
 
     @Override
     protected void loadBanner(final Context context, final CustomEventBannerListener customEventBannerListener,
-                              final Map<String, Object> localExtras, final Map<String, String> serverExtras) {
+            final Map<String, Object> localExtras, final Map<String, String> serverExtras) {
+
+        LayoutParams lp;
+        String apid = null;
+        String dcn = null;
+        int width;
+        int height;
         mBannerListener = customEventBannerListener;
 
+        if ( !MMSDK.isInitialized() ) {
+            try {
+                MMSDK.initialize((Activity) context);
+            } catch ( Exception e ) {
+                Log.e(LOGCAT_TAG, "Unable to initialize the Millennial SDK-- " + e.getMessage());
+                e.printStackTrace();
+                UI_THREAD_HANDLER.post(new Runnable() {
+                    @Override
+                    public void run() {
+                        mBannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
+                    }
+                });
+                return;
+            }
+        }
 
-        final String apid;
-        final int width;
-        final int height;
         if (extrasAreValid(serverExtras)) {
+            dcn = serverExtras.get(DCN_KEY);
             apid = serverExtras.get(APID_KEY);
             width = Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
             height = Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
         } else {
-            mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            Log.e(LOGCAT_TAG, "We were given invalid extras! Make sure placement ID, width, and height are specified.");
+            UI_THREAD_HANDLER.post(new Runnable() {
+                @Override
+                public void run() {
+                    mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+                }
+            });
             return;
         }
 
-        MMSDK.initialize(context);
+        // Add DCN's for Nexage folks
+        try {
+            AppInfo ai = new AppInfo().setMediator("mopubsdk");
+            if ( dcn != null && dcn.length() > 0 ) {
+                ai = ai.setSiteId(dcn);
+            } else {
+                ai = ai.setSiteId(null);
+            }
+            MMSDK.setAppInfo(ai);
+        } catch ( IllegalStateException e ) {
+            Log.i(LOGCAT_TAG, "Caught exception " + e.getMessage());
+            UI_THREAD_HANDLER.post(new Runnable() {
+                @Override
+                public void run() {
+                    mBannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
+                }
+            });
+            return;
+        }
+
+        mInternalView = new LinearLayout(context);
 
-        mMillennialAdView = new MMAdView(context);
-        mMillennialAdView.setListener(new MillennialBannerRequestListener());
+        lp = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);
+        lp.gravity = Gravity.CENTER_HORIZONTAL;
+        mInternalView.setLayoutParams(lp);
 
-        mMillennialAdView.setApid(apid);
-        mMillennialAdView.setWidth(width);
-        mMillennialAdView.setHeight(height);
+        InlineAdMetadata mInlineAdMetadata = null;
 
-        final Location location = (Location) localExtras.get("location");
-        if (location != null) {
-            MMRequest.setUserLocation(location);
+        try {
+            mInlineAd = InlineAd.createInstance(apid, mInternalView);
+            mInlineAdMetadata = new InlineAdMetadata().setAdSize(new AdSize(width, height));
+        } catch ( MMException e ) {
+            e.printStackTrace();
+            UI_THREAD_HANDLER.post(new Runnable() {
+                @Override
+                public void run() {
+                    mBannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
+                }
+            });
+            return;
         }
 
-        mMillennialAdView.setMMRequest(new MMRequest());
-        mMillennialAdView.setId(MMSDK.getDefaultAdId());
-        AdViewController.setShouldHonorServerDimensions(mMillennialAdView);
-        mMillennialAdView.getAd();
+        mInlineAd.setListener(new MillennialInlineListener());
+        
+        /* If MoPub gets location, so do we. */
+        MMSDK.setLocationEnabled( (localExtras.get("location") != null) );
+
+        AdViewController.setShouldHonorServerDimensions(mInternalView);
+
+        mInlineAd.request(mInlineAdMetadata);
     }
 
     @Override
     protected void onInvalidate() {
-        // mMillennialAdView can be null if loadBanner terminated prematurely (i.e. the associated
-        // serverExtras are invalid).
-        if (mMillennialAdView != null) {
-            mMillennialAdView.setListener(null);
+        // Destroy any hanging references.
+        if (mInlineAd != null) {
+            mInlineAd.setListener(null);
+            mInlineAd = null;
         }
     }
 
     private boolean extrasAreValid(final Map<String, String> serverExtras) {
         try {
-            Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
-            Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
-        } catch (NumberFormatException e) {
+            // Add pos / non-null and APIDs.
+            int w = Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
+            int h = Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
+            if ( h < 0 || w < 0 ) {
+                throw new NumberFormatException();
+            }
+        } catch (Exception e) {
+            Log.e(LOGCAT_TAG, "Width and height must exist and contain positive integers!");
+            e.printStackTrace();
             return false;
         }
 
         return serverExtras.containsKey(APID_KEY);
     }
 
-    class MillennialBannerRequestListener implements RequestListener {
+    class MillennialInlineListener implements InlineAd.InlineListener {
+
         @Override
-        public void MMAdOverlayLaunched(final MMAd mmAd) {
-            Log.d("MoPub", "Millennial banner ad Launched.");
-            mBannerListener.onBannerExpanded();
+        public void onAdLeftApplication(InlineAd arg0) {
+            // Intentionally not calling MoPub's onLeaveApplication to avoid double-count
+            Log.d(LOGCAT_TAG, "Millennial Inline Ad - Leaving application");
         }
 
         @Override
-        public void MMAdOverlayClosed(final MMAd mmAd) {
-            Log.d("MoPub", "Millennial banner ad closed.");
-            mBannerListener.onBannerCollapsed();
+        public void onClicked(InlineAd arg0) {
+            Log.d(LOGCAT_TAG, "Millennial Inline Ad - Ad clicked");
+            UI_THREAD_HANDLER.post(new Runnable() {
+                @Override
+                public void run() {
+                    mBannerListener.onBannerClicked();
+                }
+            });
         }
 
         @Override
-        public void MMAdRequestIsCaching(final MMAd mmAd) {}
+        public void onCollapsed(InlineAd arg0) {
+            Log.d(LOGCAT_TAG, "Millennial Inline Ad - Banner collapsed");
+            UI_THREAD_HANDLER.post(new Runnable() {
+                @Override
+                public void run() {
+                    mBannerListener.onBannerCollapsed();
+                }
+            });
+
+        }
 
         @Override
-        public void requestCompleted(final MMAd mmAd) {
-            Log.d("MoPub", "Millennial banner ad loaded successfully. Showing ad...");
-            mBannerListener.onBannerLoaded(mMillennialAdView);
+        public void onExpanded(InlineAd arg0) {
+            Log.d(LOGCAT_TAG, "Millennial Inline Ad - Banner expanded");
+            UI_THREAD_HANDLER.post(new Runnable() {
+                @Override
+                public void run() {
+                    mBannerListener.onBannerExpanded();
+                }
+            });
         }
 
         @Override
-        public void requestFailed(final MMAd mmAd, final MMException e) {
-            Log.d("MoPub", "Millennial banner ad failed to load.");
-            mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_NO_FILL);
+        public void onRequestFailed(InlineAd arg0, InlineErrorStatus err) {
+            Log.d(LOGCAT_TAG, "Millennial Inline Ad - Banner failed (" + err.getErrorCode() + "): " + err.getDescription() );
+            MoPubErrorCode mopubErrorCode;
+
+            switch ( err.getErrorCode() ) {
+                case InlineErrorStatus.ADAPTER_NOT_FOUND:
+                    mopubErrorCode = MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+                    break;
+                case InlineErrorStatus.DISPLAY_FAILED:
+                    mopubErrorCode = MoPubErrorCode.INTERNAL_ERROR;
+                    break;
+                case InlineErrorStatus.INIT_FAILED:
+                    mopubErrorCode = MoPubErrorCode.WARMUP;
+                    break;
+                case InlineErrorStatus.NO_NETWORK:
+                    mopubErrorCode = MoPubErrorCode.NO_CONNECTION;
+                    break;
+                case InlineErrorStatus.UNKNOWN:
+                    mopubErrorCode = MoPubErrorCode.UNSPECIFIED;
+                    break;
+                case InlineErrorStatus.LOAD_FAILED:
+                default:
+                    mopubErrorCode = MoPubErrorCode.NETWORK_NO_FILL;
+            }
+
+            final MoPubErrorCode fErrorCode = mopubErrorCode;
+            UI_THREAD_HANDLER.post(new Runnable() {
+                @Override
+                public void run() {
+                    mBannerListener.onBannerFailed(fErrorCode);
+                }
+            });
+
         }
 
         @Override
-        public void onSingleTap(final MMAd mmAd) {
-            mBannerListener.onBannerClicked();
+        public void onRequestSucceeded(InlineAd arg0) {
+            Log.d(LOGCAT_TAG, "Millennial Inline Ad - Banner request succeeded");
+            UI_THREAD_HANDLER.post(new Runnable() {
+                @Override
+                public void run() {
+                    mBannerListener.onBannerLoaded(mInternalView);
+                }
+            });
+        }
+
+        @Override
+        public void onResize(InlineAd arg0, int w, int h) {
+            Log.d(LOGCAT_TAG, "Millennial Inline Ad - Banner about to resize (width: " + w + ", height: " + h + ")");
+        }
+
+        @Override
+        public void onResized(InlineAd arg0, int w, int h, boolean isClosed) {
+            Log.d(LOGCAT_TAG, "Millennial Inline Ad - Banner resized (width: " + w + ", height: " + h + "). "
+                    + (isClosed ? "Returned to original placement." : "Got a fresh, new place.") );
+
         }
-    }
 
-    @Deprecated
-    MMAdView getMMAdView() {
-        return mMillennialAdView;
     }
+
 }
diff --git a/extras/src/com/mopub/mobileads/MillennialInterstitial.java b/extras/src/com/mopub/mobileads/MillennialInterstitial.java
index e4ca44b6..25eba9b4 100644
--- a/extras/src/com/mopub/mobileads/MillennialInterstitial.java
+++ b/extras/src/com/mopub/mobileads/MillennialInterstitial.java
@@ -1,72 +1,132 @@
 package com.mopub.mobileads;
 
+import android.app.Activity;
 import android.content.Context;
-import android.location.Location;
+import android.os.Handler;
+import android.os.Looper;
 import android.util.Log;
 
-import com.millennialmedia.android.MMAd;
-import com.millennialmedia.android.MMException;
-import com.millennialmedia.android.MMInterstitial;
-import com.millennialmedia.android.MMRequest;
-import com.millennialmedia.android.MMSDK;
-import com.millennialmedia.android.RequestListener;
-
 import java.util.Map;
 
+import com.millennialmedia.AppInfo;
+import com.millennialmedia.InterstitialAd;
+import com.millennialmedia.InterstitialAd.InterstitialErrorStatus;
+import com.millennialmedia.InterstitialAd.InterstitialListener;
+import com.millennialmedia.MMException;
+import com.millennialmedia.MMSDK;
+
 /**
- * Compatible with version 5.3.0 of the Millennial Media SDK.
+ * Compatible with version 6.0 of the Millennial Media SDK.
  */
 
 class MillennialInterstitial extends CustomEventInterstitial {
 
+    public static final String LOGCAT_TAG = "MP->MM Int.";
+    public static final String DCN_KEY = "dcn";
     public static final String APID_KEY = "adUnitID";
 
-    private MMInterstitial mMillennialInterstitial;
+    private InterstitialAd mMillennialInterstitial;
+    private Context mContext;
     private CustomEventInterstitialListener mInterstitialListener;
-
+    private static final Handler UI_THREAD_HANDLER = new Handler(Looper.getMainLooper());
 
     @Override
     protected void loadInterstitial(final Context context, final CustomEventInterstitialListener customEventInterstitialListener,
-                                    final Map<String, Object> localExtras, final Map<String, String> serverExtras) {
+            final Map<String, Object> localExtras, final Map<String, String> serverExtras) {
+        String dcn = null;
         mInterstitialListener = customEventInterstitialListener;
+        mContext = context;
 
         final String apid;
+
+        if ( !MMSDK.isInitialized() ) {
+            try {
+                MMSDK.initialize((Activity) context);
+            } catch ( Exception e ) {
+                Log.e(LOGCAT_TAG, "Unable to initialize the Millennial SDK-- " + e.getMessage());
+                e.printStackTrace();
+                UI_THREAD_HANDLER.post(new Runnable() {
+                    @Override
+                    public void run() {
+                        mInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
+                    }
+                });
+                return;
+            }
+        }
+
         if (extrasAreValid(serverExtras)) {
+            dcn = serverExtras.get(DCN_KEY);
             apid = serverExtras.get(APID_KEY);
         } else {
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            Log.e(LOGCAT_TAG, "Invalid extras-- Be sure you have an placement ID specified.");
+            UI_THREAD_HANDLER.post(new Runnable() {
+                @Override
+                public void run() {
+                    mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+                }
+            });
             return;
         }
 
-        MMSDK.initialize(context);
-
-        final Location location = (Location) localExtras.get("location");
-        if (location != null) {
-            MMRequest.setUserLocation(location);
+        // Add DCN support
+        try {
+            AppInfo ai = new AppInfo().setMediator("mopubsdk");
+            if ( dcn != null && dcn.length() > 0 ) {
+                ai = ai.setSiteId(dcn);
+            } else {
+                ai.setSiteId(null);
+            }
+            MMSDK.setAppInfo(ai);
+        } catch ( IllegalStateException e ) {
+            Log.i(LOGCAT_TAG, "SDK not finished initializing-- " + e.getMessage());
+        }
+        
+        /* If MoPub gets location, so do we. */
+        MMSDK.setLocationEnabled( (localExtras.get("location") != null) );
+
+        try {
+            mMillennialInterstitial = InterstitialAd.createInstance(apid);
+        } catch (MMException e) {
+            e.printStackTrace();
+            UI_THREAD_HANDLER.post(new Runnable() {
+                @Override
+                public void run() {
+                    mInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
+                }
+            });
+            return;
         }
 
-        mMillennialInterstitial = new MMInterstitial(context);
-        mMillennialInterstitial.setListener(new MillennialInterstitialRequestListener());
-        mMillennialInterstitial.setMMRequest(new MMRequest());
-        mMillennialInterstitial.setApid(apid);
-        mMillennialInterstitial.fetch();
+        mMillennialInterstitial.setListener(new MillennialInterstitialListener());
+        mMillennialInterstitial.load(context, null);
     }
 
     @Override
     protected void showInterstitial() {
-        if (mMillennialInterstitial.isAdAvailable()) {
-            mMillennialInterstitial.display();
+        if (mMillennialInterstitial.isReady()) {
+            try {
+                mMillennialInterstitial.show(mContext);
+            } catch ( MMException e ) {
+                e.printStackTrace();
+                UI_THREAD_HANDLER.post(new Runnable() {
+                    @Override
+                    public void run() {
+                        mInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
+                    }
+                });
+                return;
+            }
         } else {
-            Log.d("MoPub", "Tried to show a Millennial interstitial ad before it finished loading. Please try again.");
+            Log.w(LOGCAT_TAG, "showInterstitial called before Millennial's ad was loaded.");
         }
     }
 
     @Override
     protected void onInvalidate() {
-        // mMillennialInterstitial can be null if loadInterstitial terminated prematurely (i.e.
-        // the associated serverExtras are invalid).
         if (mMillennialInterstitial != null) {
             mMillennialInterstitial.setListener(null);
+            mMillennialInterstitial = null;
         }
     }
 
@@ -74,51 +134,117 @@ private boolean extrasAreValid(Map<String, String> serverExtras) {
         return serverExtras.containsKey(APID_KEY);
     }
 
-    class MillennialInterstitialRequestListener implements RequestListener {
+    class MillennialInterstitialListener implements InterstitialListener {
+
         @Override
-        public void MMAdOverlayLaunched(final MMAd mmAd) {
-            Log.d("MoPub", "Showing Millennial interstitial ad.");
-            mInterstitialListener.onInterstitialShown();
+        public void onAdLeftApplication(InterstitialAd arg0) {
+            // Intentionally not calling MoPub's onLeaveApplication to avoid double-count
+            Log.d(LOGCAT_TAG, "Millennial Interstitial Ad - Leaving application");
         }
 
         @Override
-        public void MMAdOverlayClosed(final MMAd mmAd) {
-            Log.d("MoPub", "Millennial interstitial ad dismissed.");
-            mInterstitialListener.onInterstitialDismissed();
+        public void onClicked(InterstitialAd arg0) {
+            Log.d(LOGCAT_TAG, "Millennial Interstitial Ad - Ad was clicked");
+            UI_THREAD_HANDLER.post(new Runnable() {
+                @Override
+                public void run() {
+                    mInterstitialListener.onInterstitialClicked();
+                }
+            });
         }
 
-        @Override public void MMAdRequestIsCaching(final MMAd mmAd) {}
+        @Override
+        public void onClosed(InterstitialAd arg0) {
+            Log.d(LOGCAT_TAG, "Millennial Interstitial Ad - Ad was closed");
+            UI_THREAD_HANDLER.post(new Runnable() {
+                @Override
+                public void run() {
+                    mInterstitialListener.onInterstitialDismissed();
+                }
+            });
+        }
 
         @Override
-        public void requestCompleted(final MMAd mmAd) {
-            if (mMillennialInterstitial.isAdAvailable()) {
-                Log.d("MoPub", "Millennial interstitial ad loaded successfully.");
-                mInterstitialListener.onInterstitialLoaded();
-            } else {
-                Log.d("MoPub", "Millennial interstitial request completed, but no ad was available.");
-                mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-            }
+        public void onExpired(InterstitialAd arg0) {
+            Log.d(LOGCAT_TAG, "Millennial Interstitial Ad - Ad expired");
+            UI_THREAD_HANDLER.post(new Runnable() {
+                @Override
+                public void run() {
+                    mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NO_FILL);
+                }
+            });
         }
 
         @Override
-        public void requestFailed(final MMAd mmAd, final MMException e) {
-            if (mMillennialInterstitial == null || e == null) {
-                mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-            } else if (e.getCode() == MMException.CACHE_NOT_EMPTY && mMillennialInterstitial.isAdAvailable()) {
-                // requestFailed can be due to an ad already loaded or an ad failed to load.
-                Log.d("MoPub", "Millennial interstitial loaded successfully from cache.");
-                mInterstitialListener.onInterstitialLoaded();
-            } else {
-                Log.d("MoPub", "Millennial interstitial ad failed to load.");
-                mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+        public void onLoadFailed(InterstitialAd arg0,
+                InterstitialErrorStatus err) {
+            Log.d(LOGCAT_TAG, "Millennial Interstitial Ad - load failed (" + err.getErrorCode() + "): " + err.getDescription() );
+            final MoPubErrorCode moPubErrorCode;
+
+            switch (err.getErrorCode() ) {
+                case InterstitialErrorStatus.ALREADY_LOADED:
+                    // This will generate discrepancies, as requests will NOT be sent to Millennial.
+                    mInterstitialListener.onInterstitialLoaded();
+                    Log.w(LOGCAT_TAG, "Millennial Interstitial Ad - Attempted to load ads when ads are already loaded." );
+                    return;
+                case InterstitialErrorStatus.EXPIRED:
+                case InterstitialErrorStatus.DISPLAY_FAILED:
+                case InterstitialErrorStatus.INIT_FAILED:
+                case InterstitialErrorStatus.ADAPTER_NOT_FOUND:
+                    moPubErrorCode = MoPubErrorCode.INTERNAL_ERROR;
+                    break;
+                case InterstitialErrorStatus.NO_NETWORK:
+                    moPubErrorCode = MoPubErrorCode.NO_CONNECTION;
+                    break;
+                case InterstitialErrorStatus.UNKNOWN:
+                    moPubErrorCode = MoPubErrorCode.UNSPECIFIED;
+                    break;
+                case InterstitialErrorStatus.NOT_LOADED:
+                case InterstitialErrorStatus.LOAD_FAILED:
+                default:
+                    moPubErrorCode = MoPubErrorCode.NETWORK_NO_FILL;
             }
+
+            UI_THREAD_HANDLER.post(new Runnable() {
+                @Override
+                public void run() {
+                    mInterstitialListener.onInterstitialFailed(moPubErrorCode);
+                }
+            });
+        }
+
+        @Override
+        public void onLoaded(InterstitialAd arg0) {
+            Log.d(LOGCAT_TAG, "Millennial Interstitial Ad - Ad loaded splendidly");
+            UI_THREAD_HANDLER.post(new Runnable() {
+                @Override
+                public void run() {
+                    mInterstitialListener.onInterstitialLoaded();
+                }
+            });
         }
 
         @Override
-        public void onSingleTap(final MMAd mmAd) {
-            Log.d("MoPub", "Millennial interstitial clicked.");
-            mInterstitialListener.onInterstitialClicked();
+        public void onShowFailed(InterstitialAd arg0,
+                InterstitialErrorStatus arg1) {
+            Log.e(LOGCAT_TAG, "Millennial Interstitial Ad - Show failed (" + arg1.getErrorCode() + "): " + arg1.getDescription());
+            UI_THREAD_HANDLER.post(new Runnable() {
+                @Override
+                public void run() {
+                    mInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
+                }
+            });
         }
 
+        @Override
+        public void onShown(InterstitialAd arg0) {
+            Log.d(LOGCAT_TAG, "Millennial Interstitial Ad - Ad shown");
+            UI_THREAD_HANDLER.post(new Runnable() {
+                @Override
+                public void run() {
+                    mInterstitialListener.onInterstitialShown();
+                }
+            });
+        }
     }
 }
diff --git a/extras/src/com/mopub/mobileads/TapjoyInterstitial.java b/extras/src/com/mopub/mobileads/TapjoyInterstitial.java
new file mode 100644
index 00000000..029592dc
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/TapjoyInterstitial.java
@@ -0,0 +1,130 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.os.Handler;
+import android.os.Looper;
+import android.text.TextUtils;
+
+import com.mopub.common.logging.MoPubLog;
+import com.tapjoy.TJActionRequest;
+import com.tapjoy.TJError;
+import com.tapjoy.TJPlacement;
+import com.tapjoy.TJPlacementListener;
+import com.tapjoy.TapjoyLog;
+
+import java.util.Map;
+
+// Tested with Tapjoy SDK 11.5.1
+public class TapjoyInterstitial extends CustomEventInterstitial implements TJPlacementListener {
+    private static final String TAG = TapjoyInterstitial.class.getSimpleName();
+    private static final String TJC_MOPUB_NETWORK_CONSTANT = "mopub";
+    private static final String TJC_MOPUB_ADAPTER_VERSION_NUMBER = "4.0.0";
+
+    private TJPlacement tjPlacement;
+    private CustomEventInterstitialListener mInterstitialListener;
+    private Handler mHandler;
+
+    static {
+        TapjoyLog.i(TAG, "Class initialized with network adapter version " + TJC_MOPUB_ADAPTER_VERSION_NUMBER);
+    }
+
+    @Override
+    protected void loadInterstitial(Context context,
+            CustomEventInterstitialListener customEventInterstitialListener,
+            Map<String, Object> localExtras,
+            Map<String, String> serverExtras) {
+        MoPubLog.d("Requesting Tapjoy interstitial");
+
+        mInterstitialListener = customEventInterstitialListener;
+        mHandler = new Handler(Looper.getMainLooper());
+
+        String name = serverExtras.get("name");
+        if (TextUtils.isEmpty(name)) {
+            MoPubLog.d("Tapjoy interstitial loaded with empty 'name' field. Request will fail.");
+        }
+        tjPlacement = new TJPlacement(context, name, this);
+        tjPlacement.setMediationName(TJC_MOPUB_NETWORK_CONSTANT);
+        tjPlacement.setAdapterVersion(TJC_MOPUB_ADAPTER_VERSION_NUMBER);
+        tjPlacement.requestContent();
+    }
+
+    @Override
+    protected void onInvalidate() {
+        // No custom cleanup to do here.
+    }
+
+    @Override
+    protected void showInterstitial() {
+        MoPubLog.d("Tapjoy interstitial will be shown");
+        tjPlacement.showContent();
+    }
+
+    // Tapjoy
+
+    @Override
+    public void onRequestSuccess(final TJPlacement placement) {
+        mHandler.post(new Runnable() {
+            @Override
+            public void run() {
+                if (placement.isContentAvailable()) {
+                    MoPubLog.d("Tapjoy interstitial request successful");
+                    mInterstitialListener.onInterstitialLoaded();
+                } else {
+                    MoPubLog.d("No Tapjoy interstitials available");
+                    mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+                }
+            }
+        });
+    }
+
+    @Override
+    public void onRequestFailure(TJPlacement placement, TJError error) {
+        MoPubLog.d("Tapjoy interstitial request failed");
+
+        mHandler.post(new Runnable() {
+            @Override
+            public void run() {
+                mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+            }
+        });
+    }
+
+    @Override
+    public void onContentShow(TJPlacement placement) {
+        MoPubLog.d("Tapjoy interstitial shown");
+
+        mHandler.post(new Runnable() {
+            @Override
+            public void run() {
+                mInterstitialListener.onInterstitialShown();
+            }
+        });
+    }
+
+    @Override
+    public void onContentDismiss(TJPlacement placement) {
+        MoPubLog.d("Tapjoy interstitial dismissed");
+
+        mHandler.post(new Runnable() {
+            @Override
+            public void run() {
+                mInterstitialListener.onInterstitialDismissed();
+            }
+        });
+    }
+
+    @Override
+    public void onContentReady(TJPlacement placement) {
+    }
+
+    @Override
+    public void onPurchaseRequest(TJPlacement placement, TJActionRequest request,
+            String productId) {
+    }
+
+    @Override
+    public void onRewardRequest(TJPlacement placement, TJActionRequest request, String itemId,
+            int quantity) {
+    }
+
+}
diff --git a/extras/src/com/mopub/mobileads/TapjoyRewardedVideo.java b/extras/src/com/mopub/mobileads/TapjoyRewardedVideo.java
new file mode 100644
index 00000000..d0f81000
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/TapjoyRewardedVideo.java
@@ -0,0 +1,233 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.mopub.common.LifecycleListener;
+import com.mopub.common.MediationSettings;
+import com.mopub.common.MoPubReward;
+import com.mopub.common.logging.MoPubLog;
+import com.tapjoy.TJActionRequest;
+import com.tapjoy.TJConnectListener;
+import com.tapjoy.TJError;
+import com.tapjoy.TJPlacement;
+import com.tapjoy.TJPlacementListener;
+import com.tapjoy.TJVideoListener;
+import com.tapjoy.Tapjoy;
+import com.tapjoy.TapjoyLog;
+
+import java.util.Hashtable;
+import java.util.Map;
+
+// Tested with Tapjoy SDK 11.5.1
+public class TapjoyRewardedVideo extends CustomEventRewardedVideo {
+    private static final String TAG = TapjoyRewardedVideo.class.getSimpleName();
+    private static final String TJC_MOPUB_NETWORK_CONSTANT = "mopub";
+    private static final String TJC_MOPUB_ADAPTER_VERSION_NUMBER = "4.0.0";
+    private static final String TAPJOY_AD_NETWORK_CONSTANT = "tapjoy_id";
+
+    private String sdkKey;
+    private Hashtable<String, Object> connectFlags;
+    private TJPlacement tjPlacement;
+    private static TapjoyRewardedVideoListener sTapjoyListener = new TapjoyRewardedVideoListener();
+
+    static {
+        TapjoyLog.i(TAG, "Class initialized with network adapter version " + TJC_MOPUB_ADAPTER_VERSION_NUMBER);
+    }
+
+    @Override
+    protected CustomEventRewardedVideoListener getVideoListenerForSdk() {
+        return sTapjoyListener;
+    }
+
+    @Override
+    protected LifecycleListener getLifecycleListener() {
+        return null;
+    }
+
+    @Override
+    protected String getAdNetworkId() {
+        return TAPJOY_AD_NETWORK_CONSTANT;
+    }
+
+    @Override
+    protected void onInvalidate() {
+    }
+
+    @Override
+    protected boolean checkAndInitializeSdk(@NonNull Activity launcherActivity,
+            @NonNull Map<String, Object> localExtras,
+            @NonNull Map<String, String> serverExtras)
+            throws Exception {
+
+        if (!Tapjoy.isConnected()) {
+            if (checkAndInitMediationSettings()) {
+                MoPubLog.d("Request to connect to Tapjoy");
+
+                Tapjoy.connect(launcherActivity, sdkKey, connectFlags, new TJConnectListener() {
+                    @Override
+                    public void onConnectSuccess() {
+                        MoPubLog.d("Tapjoy connected successfully");
+                    }
+
+                    @Override
+                    public void onConnectFailure() {
+                        MoPubLog.e("Tapjoy connect failed");
+                    }
+                });
+
+                return true;
+            } else {
+                MoPubLog.d("Cannot connect to Tapjoy -- missing 'sdkkey' declaration via TapjoyMediationSettings");
+            }
+        }
+
+        return false;
+    }
+
+    @Override
+    protected void loadWithSdkInitialized(@NonNull Activity activity,
+            @NonNull Map<String, Object> localExtras,
+            @NonNull Map<String, String> serverExtras)
+            throws Exception {
+        MoPubLog.d("Requesting Tapjoy rewarded video");
+
+        String name = serverExtras.get("name");
+        if (TextUtils.isEmpty(name)) {
+            MoPubLog.d("Tapjoy interstitial loaded with empty 'name' field. Request will fail.");
+        }
+        tjPlacement = new TJPlacement(activity, name, sTapjoyListener);
+        tjPlacement.setMediationName(TJC_MOPUB_NETWORK_CONSTANT);
+        tjPlacement.setAdapterVersion(TJC_MOPUB_ADAPTER_VERSION_NUMBER);
+        tjPlacement.requestContent();
+    }
+
+    @Override
+    protected boolean hasVideoAvailable() {
+        return tjPlacement.isContentAvailable();
+    }
+
+    @Override
+    protected void showVideo() {
+        if (hasVideoAvailable()) {
+            MoPubLog.d("Tapjoy rewarded video will be shown.");
+            tjPlacement.showContent();
+        } else {
+            MoPubLog.d("Failed to show Tapjoy rewarded video.");
+        }
+
+    }
+
+    private boolean checkAndInitMediationSettings() {
+        MoPubLog.d("Initializing Tapjoy mediation settings");
+
+        final TapjoyMediationSettings globalMediationSettings =
+                MoPubRewardedVideoManager.getGlobalMediationSettings(TapjoyMediationSettings.class);
+
+        if (globalMediationSettings != null) {
+            if (!TextUtils.isEmpty(globalMediationSettings.getSdkKey())) {
+                sdkKey = globalMediationSettings.getSdkKey();
+            } else {
+                return false;
+            }
+
+            if (globalMediationSettings.getConnectFlags() != null) {
+                connectFlags = globalMediationSettings.getConnectFlags();
+            }
+
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+    private static class TapjoyRewardedVideoListener implements TJPlacementListener, CustomEventRewardedVideoListener, TJVideoListener {
+        @Override
+        public void onRequestSuccess(TJPlacement placement) {
+            if (!placement.isContentAvailable()){
+                MoPubLog.d("No Tapjoy rewarded videos available");
+                MoPubRewardedVideoManager.onRewardedVideoLoadFailure(TapjoyRewardedVideo.class, TAPJOY_AD_NETWORK_CONSTANT, MoPubErrorCode.NETWORK_NO_FILL);
+            }
+        }
+
+        @Override
+        public void onContentReady(TJPlacement placement) {
+            MoPubLog.d("Tapjoy rewarded video content is ready");
+            MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(TapjoyRewardedVideo.class, TAPJOY_AD_NETWORK_CONSTANT);
+        }
+
+        @Override
+        public void onRequestFailure(TJPlacement placement, TJError error) {
+            MoPubLog.d("Tapjoy rewarded video request failed");
+            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(TapjoyRewardedVideo.class, TAPJOY_AD_NETWORK_CONSTANT, MoPubErrorCode.NETWORK_NO_FILL);
+        }
+
+        @Override
+        public void onContentShow(TJPlacement placement) {
+            Tapjoy.setVideoListener(this);
+            MoPubLog.d("Tapjoy rewarded video content shown");
+            MoPubRewardedVideoManager.onRewardedVideoStarted(TapjoyRewardedVideo.class, TAPJOY_AD_NETWORK_CONSTANT);
+        }
+
+        @Override
+        public void onContentDismiss(TJPlacement placement) {
+            Tapjoy.setVideoListener(null);
+            MoPubLog.d("Tapjoy rewarded video content dismissed");
+            MoPubRewardedVideoManager.onRewardedVideoClosed(TapjoyRewardedVideo.class, TAPJOY_AD_NETWORK_CONSTANT);
+        }
+
+        @Override
+        public void onPurchaseRequest(TJPlacement placement, TJActionRequest request,
+                String productId) {
+        }
+
+        @Override
+        public void onRewardRequest(TJPlacement placement, TJActionRequest request, String itemId,
+                int quantity) {
+        }
+
+        @Override
+        public void onVideoStart() {
+
+        }
+
+        @Override
+        public void onVideoError(int statusCode) {
+        }
+
+        @Override
+        public void onVideoComplete() {
+            MoPubLog.d("Tapjoy rewarded video completed");
+            MoPubRewardedVideoManager.onRewardedVideoCompleted(TapjoyRewardedVideo.class, TAPJOY_AD_NETWORK_CONSTANT, MoPubReward.success(MoPubReward.NO_REWARD_LABEL, MoPubReward.NO_REWARD_AMOUNT));
+        }
+    }
+
+    public static final class TapjoyMediationSettings implements MediationSettings {
+        @Nullable
+        private final String mSdkKey;
+        @Nullable
+        Hashtable<String, Object> mConnectFlags;
+
+        public TapjoyMediationSettings(String sdkKey) {
+            this.mSdkKey = sdkKey;
+        }
+
+        public TapjoyMediationSettings(String sdkKey, Hashtable<String, Object> connectFlags) {
+            this.mSdkKey = sdkKey;
+            this.mConnectFlags = connectFlags;
+        }
+
+        @NonNull
+        public String getSdkKey() {
+            return mSdkKey;
+        }
+
+        @NonNull
+        public Hashtable<String, Object> getConnectFlags() {
+            return mConnectFlags;
+        }
+    }
+
+}
diff --git a/extras/src/com/mopub/mobileads/UnityRewardedVideo.java b/extras/src/com/mopub/mobileads/UnityRewardedVideo.java
new file mode 100644
index 00000000..f4fe4bcc
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/UnityRewardedVideo.java
@@ -0,0 +1,237 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.mopub.common.BaseLifecycleListener;
+import com.mopub.common.DataKeys;
+import com.mopub.common.LifecycleListener;
+import com.mopub.common.MediationSettings;
+import com.mopub.common.MoPubReward;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.unity3d.ads.android.IUnityAdsListener;
+import com.unity3d.ads.android.UnityAds;
+
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * A custom event for showing Unity rewarded videos.
+ *
+ * Certified with Unity 1.4.7
+ */
+public class UnityRewardedVideo extends CustomEventRewardedVideo {
+    private static final String DEFAULT_ZONE_ID = "";
+    private static final String GAME_ID_KEY = "gameId";
+    private static final String ZONE_ID_KEY = "zoneId";
+    private static final LifecycleListener sLifecycleListener = new UnityLifecycleListener();
+    private static final UnityAdsListener sUnityAdsListener = new UnityAdsListener();
+
+    private static boolean sInitialized = false;
+    @NonNull private static String sZoneId = DEFAULT_ZONE_ID;
+
+    @Nullable private UnityMediationSettings mMediationSettings;
+
+    @Override
+    @NonNull
+    public CustomEventRewardedVideoListener getVideoListenerForSdk() {
+        return sUnityAdsListener;
+    }
+
+    @Override
+    @NonNull
+    public LifecycleListener getLifecycleListener() {
+        return sLifecycleListener;
+    }
+
+    @Override
+    @NonNull
+    public String getAdNetworkId() {
+        return sZoneId;
+    }
+
+    @Override
+    public boolean checkAndInitializeSdk(@NonNull final Activity launcherActivity,
+            @NonNull final Map<String, Object> localExtras,
+            @NonNull final Map<String, String> serverExtras) throws Exception {
+        if (sInitialized) {
+            return false;
+        }
+
+        String gameId;
+        if (serverExtras.containsKey(GAME_ID_KEY)) {
+            gameId = serverExtras.get(GAME_ID_KEY);
+            if (TextUtils.isEmpty(gameId)) {
+                throw new IllegalStateException("Unity rewarded video initialization failed due " +
+                        "to empty " + GAME_ID_KEY);
+            }
+        } else {
+            throw new IllegalStateException("Unity rewarded video initialization failed due to " +
+                    "missing " + GAME_ID_KEY);
+        }
+
+        UnityAds.init(launcherActivity, gameId, sUnityAdsListener);
+        sInitialized = true;
+
+        return true;
+    }
+
+    @Override
+    protected void loadWithSdkInitialized(@NonNull Activity activity,
+            @NonNull Map<String, Object> localExtras, @NonNull Map<String, String> serverExtras)
+            throws Exception {
+
+        if (serverExtras.containsKey(ZONE_ID_KEY)) {
+            String zoneId = serverExtras.get(ZONE_ID_KEY);
+            sZoneId = TextUtils.isEmpty(zoneId) ? sZoneId : zoneId;
+        }
+
+        try {
+            setUpMediationSettingsForRequest((String) localExtras.get(DataKeys.AD_UNIT_ID_KEY));
+        } catch (ClassCastException e) {
+            MoPubLog.e("Failed to set up Unity mediation settings due to invalid ad unit id", e);
+        }
+
+        loadRewardedVideo();
+    }
+
+    @Override
+    public boolean hasVideoAvailable() {
+        return UnityAds.canShow();
+    }
+
+    @Override
+    public void showVideo() {
+        if (hasVideoAvailable()) {
+            UnityAds.show(getUnityProperties());
+        } else {
+            MoPubLog.d("Attempted to show Unity rewarded video before it was available.");
+        }
+    }
+
+    @Override
+    protected void onInvalidate() {
+        UnityAds.setListener(null);
+    }
+
+
+    private void setUpMediationSettingsForRequest(@Nullable final String moPubId) {
+        mMediationSettings =
+                MoPubRewardedVideoManager.getGlobalMediationSettings(UnityMediationSettings.class);
+
+        // Instance settings override global settings.
+        if (moPubId != null) {
+            final UnityMediationSettings instanceSettings = MoPubRewardedVideoManager
+                    .getInstanceMediationSettings(UnityMediationSettings.class, moPubId);
+            if (instanceSettings != null) {
+                mMediationSettings = instanceSettings;
+            }
+        }
+
+    }
+
+    private static final class UnityLifecycleListener extends BaseLifecycleListener {
+        @Override
+        public void onCreate(@NonNull final Activity activity) {
+            super.onCreate(activity);
+            UnityAds.changeActivity(activity);
+        }
+
+        @Override
+        public void onResume(@NonNull final Activity activity) {
+            super.onResume(activity);
+            UnityAds.changeActivity(activity);
+        }
+
+    }
+
+    @NonNull
+    private Map<String, Object> getUnityProperties() {
+        if (mMediationSettings == null) {
+            return Collections.emptyMap();
+        }
+        return mMediationSettings.getPropertiesMap();
+    }
+
+
+    private static class UnityAdsListener implements IUnityAdsListener,
+            CustomEventRewardedVideoListener {
+        @Override
+        public void onFetchCompleted() {
+            MoPubLog.d("Unity rewarded video cached for zone " + UnityAds.getZone() + ".");
+            loadRewardedVideo();
+        }
+
+        @Override
+        public void onFetchFailed() {
+            MoPubLog.d("Unity rewarded video cache failed for zone " + UnityAds.getZone() + ".");
+            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(UnityRewardedVideo.class,
+                    UnityAds.getZone(), MoPubErrorCode.NETWORK_NO_FILL);
+        }
+
+        @Override
+        public void onShow() {
+            MoPubLog.d("Unity rewarded video displayed for zone " + UnityAds.getZone() + ".");
+        }
+
+        @Override
+        public void onHide() {
+            MoPubRewardedVideoManager.onRewardedVideoClosed(UnityRewardedVideo.class, UnityAds.getZone());
+            MoPubLog.d("Unity rewarded video dismissed for zone " + UnityAds.getZone() + ".");
+        }
+
+        @Override
+        public void onVideoStarted() {
+            MoPubRewardedVideoManager.onRewardedVideoStarted(UnityRewardedVideo.class, UnityAds.getZone());
+            MoPubLog.d("Unity rewarded video started for zone " + UnityAds.getZone() + ".");
+        }
+
+        @Override
+        public void onVideoCompleted(final String itemKey, final boolean skipped) {
+            if (!skipped) {
+                MoPubRewardedVideoManager.onRewardedVideoCompleted(
+                        UnityRewardedVideo.class,
+                        UnityAds.getZone(),
+                        MoPubReward.success(itemKey, MoPubReward.NO_REWARD_AMOUNT));
+                MoPubLog.d("Unity rewarded video completed for zone " + UnityAds.getZone()
+                        + " with reward item key " + itemKey);
+            } else {
+                MoPubRewardedVideoManager.onRewardedVideoCompleted(
+                        UnityRewardedVideo.class,
+                        UnityAds.getZone(),
+                        MoPubReward.failure());
+                MoPubLog.d("Unity rewarded video skipped for zone " + UnityAds.getZone() + " with "
+                        + "reward item key " + itemKey);
+            }
+        }
+    }
+
+    private static void loadRewardedVideo() {
+        UnityAds.setZone(sZoneId);
+        MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(UnityRewardedVideo.class, UnityAds.getZone());
+    }
+
+    public static final class UnityMediationSettings implements MediationSettings {
+        @NonNull private final HashMap<String, Object> mProperties;
+
+        public UnityMediationSettings(@NonNull final String gamerId) {
+            mProperties = new HashMap<String, Object>();
+            mProperties.put(UnityAds.UNITY_ADS_OPTION_GAMERSID_KEY, gamerId);
+        }
+
+        @NonNull
+        public Map<String, Object> getPropertiesMap() {
+            return mProperties;
+        }
+    }
+
+    @VisibleForTesting
+    void reset() {
+        sInitialized = false;
+        sZoneId = DEFAULT_ZONE_ID;
+    }
+}
diff --git a/extras/src/com/mopub/mobileads/VungleInterstitial.java b/extras/src/com/mopub/mobileads/VungleInterstitial.java
index 1e2ea4b8..09a39731 100644
--- a/extras/src/com/mopub/mobileads/VungleInterstitial.java
+++ b/extras/src/com/mopub/mobileads/VungleInterstitial.java
@@ -26,14 +26,13 @@
 
     private final VunglePub mVunglePub;
     private final Handler mHandler;
-    private final ScheduledThreadPoolExecutor mScheduledThreadPoolExecutor;
     private CustomEventInterstitialListener mCustomEventInterstitialListener;
     private boolean mIsLoading;
 
     public VungleInterstitial() {
         mHandler = new Handler(Looper.getMainLooper());
-        mScheduledThreadPoolExecutor = new ScheduledThreadPoolExecutor(10);
         mVunglePub = VunglePub.getInstance();
+        mIsLoading = false;
     }
 
     @Override
@@ -62,7 +61,11 @@ protected void loadInterstitial(Context context,
         // init clears the event listener.
         mVunglePub.init(context, appId);
         mVunglePub.setEventListeners(this);
-        scheduleOnInterstitialLoaded();
+        if (mVunglePub.isAdPlayable()) {
+            notifyAdAvailable();
+        } else {
+            mIsLoading = true;
+        }
     }
 
     @Override
@@ -77,7 +80,6 @@ protected void showInterstitial() {
     @Override
     protected void onInvalidate() {
         mVunglePub.clearEventListeners();
-        mScheduledThreadPoolExecutor.shutdownNow();
         mIsLoading = false;
     }
 
@@ -85,28 +87,15 @@ private boolean extrasAreValid(Map<String, String> serverExtras) {
         return serverExtras.containsKey(APP_ID_KEY);
     }
 
-    private void scheduleOnInterstitialLoaded() {
-        Runnable runnable = new Runnable() {
+    private void notifyAdAvailable() {
+        Log.d("MoPub", "Vungle interstitial ad successfully loaded.");
+        mIsLoading = false;
+        mHandler.post(new Runnable() {
             @Override
             public void run() {
-            if (mVunglePub.isAdPlayable()) {
-                Log.d("MoPub", "Vungle interstitial ad successfully loaded.");
-                mScheduledThreadPoolExecutor.shutdownNow();
-                mHandler.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        mCustomEventInterstitialListener.onInterstitialLoaded();
-                    }
-                });
-                mIsLoading = false;
-            }
+                mCustomEventInterstitialListener.onInterstitialLoaded();
             }
-        };
-
-        if (!mIsLoading) {
-            mScheduledThreadPoolExecutor.scheduleAtFixedRate(runnable, 1, 1, TimeUnit.SECONDS);
-            mIsLoading = true;
-        }
+        });
     }
 
     /*
@@ -151,12 +140,8 @@ public void onAdUnavailable(final String s) {
 
     @Override
     public void onAdPlayableChanged(final boolean playable) {
-        // Do nothing here. After loading is kicked off, we scheduleOnInterstitialLoaded and check until
-        // we have a playable ad or we timeout.
-    }
-
-    @Deprecated // for testing
-    ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() {
-        return mScheduledThreadPoolExecutor;
+        if (mIsLoading && playable) {
+            notifyAdAvailable();
+        }
     }
 }
diff --git a/extras/src/com/mopub/mobileads/VungleRewardedVideo.java b/extras/src/com/mopub/mobileads/VungleRewardedVideo.java
index 9d020b40..8f5a8245 100644
--- a/extras/src/com/mopub/mobileads/VungleRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/VungleRewardedVideo.java
@@ -36,7 +36,7 @@
 
     // This has to be reinitialized every time the CE loads to avoid conflict with the interstitials.
     private static VunglePub sVunglePub;
-    private static VungleRewardedVideoListener sVungleListener = new VungleRewardedVideoListener();
+    private static VungleRewardedVideoListener sVungleListener;
     private static boolean sInitialized;
     private static final LifecycleListener sLifecycleListener = new BaseLifecycleListener() {
         @Override
@@ -53,14 +53,12 @@ public void onResume(@NonNull final Activity activity) {
     };
 
     private final Handler mHandler;
-    private final ScheduledThreadPoolExecutor mScheduledThreadPoolExecutor;
     private boolean mIsLoading;
     private String mAdUnitId;
 
-
     public VungleRewardedVideo() {
+        sVungleListener = new VungleRewardedVideoListener();
         mHandler = new Handler(Looper.getMainLooper());
-        mScheduledThreadPoolExecutor = new ScheduledThreadPoolExecutor(1);
         mIsLoading = false;
     }
 
@@ -105,7 +103,11 @@ protected void loadWithSdkInitialized(@NonNull final Activity activity, @NonNull
         if (adUnitObject instanceof String) {
             mAdUnitId = (String) adUnitObject;
         }
-        scheduleOnVideoLoaded();
+        if (sVunglePub.isAdPlayable()) {
+            notifyAdAvailable();
+        } else {
+            mIsLoading = true;
+        }
     }
 
     @Override
@@ -154,36 +156,24 @@ private void modifyAdConfig(AdConfig adConfig, VungleMediationSettings mediation
         }
     }
 
-    private void scheduleOnVideoLoaded() {
-        Runnable runnable = new Runnable() {
+    private void notifyAdAvailable() {
+        MoPubLog.d("Vungle rewarded video ad successfully loaded.");
+        mIsLoading = false;
+        mHandler.post(new Runnable() {
             @Override
             public void run() {
-                if (sVunglePub.isAdPlayable()) {
-                    MoPubLog.d("Vungle interstitial ad successfully loaded.");
-                    mScheduledThreadPoolExecutor.shutdownNow();
-                    mHandler.post(new Runnable() {
-                        @Override
-                        public void run() {
-                            MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(VungleRewardedVideo.class, VUNGLE_AD_NETWORK_CONSTANT);
-                        }
-                    });
-                    mIsLoading = false;
-                }
+                MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(VungleRewardedVideo.class,
+                        VUNGLE_AD_NETWORK_CONSTANT);
             }
-        };
-
-        if (!mIsLoading) {
-            mScheduledThreadPoolExecutor.scheduleAtFixedRate(runnable, 1, 1, TimeUnit.SECONDS);
-            mIsLoading = true;
-        }
+        });
     }
 
     @Override
     protected void onInvalidate() {
-        mScheduledThreadPoolExecutor.shutdownNow();
+        mIsLoading = false;
     }
 
-    private static class VungleRewardedVideoListener implements EventListener,
+    private class VungleRewardedVideoListener implements EventListener,
             CustomEventRewardedVideoListener {
 
         @Override
@@ -210,8 +200,9 @@ public void onAdUnavailable(final String s) {
 
         @Override
         public void onAdPlayableChanged(final boolean playable) {
-            // Do nothing here. After loading is kicked off, we scheduleOnInterstitialLoaded and check until
-            // we have a playable ad or we timeout.
+            if (mIsLoading && playable) {
+                notifyAdAvailable();
+            }
         }
 
         @Override
diff --git a/extras/src/com/mopub/nativeads/FacebookAdRenderer.java b/extras/src/com/mopub/nativeads/FacebookAdRenderer.java
new file mode 100644
index 00000000..72e87349
--- /dev/null
+++ b/extras/src/com/mopub/nativeads/FacebookAdRenderer.java
@@ -0,0 +1,209 @@
+package com.mopub.nativeads;
+
+import android.app.Activity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.facebook.ads.MediaView;
+import com.mopub.common.Preconditions;
+
+import java.util.WeakHashMap;
+
+import static android.view.View.VISIBLE;
+
+/**
+ * Include this class if you want to use Facebook native video ads. This renderer handles Facebook
+ * static and video native ads. This will automatically replace the main image view with the
+ * Facebook MediaView that handles showing the main asset.
+ */
+public class FacebookAdRenderer implements MoPubAdRenderer<FacebookNative.FacebookVideoEnabledNativeAd> {
+    private final ViewBinder mViewBinder;
+
+    // This is used instead of View.setTag, which causes a memory leak in 2.3
+    // and earlier: https://code.google.com/p/android/issues/detail?id=18273
+    final WeakHashMap<View, FacebookNativeViewHolder> mViewHolderMap;
+
+    /**
+     * Constructs a native ad renderer with a view binder.
+     *
+     * @param viewBinder The view binder to use when inflating and rendering an ad.
+     */
+    public FacebookAdRenderer(final ViewBinder viewBinder) {
+        mViewBinder = viewBinder;
+        mViewHolderMap = new WeakHashMap<View, FacebookNativeViewHolder>();
+    }
+
+    @Override
+    public View createAdView(final Activity activity, final ViewGroup parent) {
+        final View adView = LayoutInflater
+                .from(activity)
+                .inflate(mViewBinder.layoutId, parent, false);
+        final View mainImageView = adView.findViewById(mViewBinder.mainImageId);
+        if (mainImageView == null) {
+            return adView;
+        }
+
+        final ViewGroup.LayoutParams mainImageViewLayoutParams = mainImageView.getLayoutParams();
+        final MediaView.LayoutParams mediaViewLayoutParams = new MediaView.LayoutParams(
+                mainImageViewLayoutParams.width, mainImageViewLayoutParams.height);
+
+        if (mainImageViewLayoutParams instanceof ViewGroup.MarginLayoutParams) {
+            final ViewGroup.MarginLayoutParams marginParams =
+                    (ViewGroup.MarginLayoutParams) mainImageViewLayoutParams;
+            mediaViewLayoutParams.setMargins(marginParams.leftMargin,
+                    marginParams.topMargin,
+                    marginParams.rightMargin,
+                    marginParams.bottomMargin);
+        }
+
+        if (mainImageViewLayoutParams instanceof RelativeLayout.LayoutParams) {
+            final RelativeLayout.LayoutParams mainImageViewRelativeLayoutParams =
+                    (RelativeLayout.LayoutParams) mainImageViewLayoutParams;
+            final int[] rules = mainImageViewRelativeLayoutParams.getRules();
+            for (int i = 0; i < rules.length; i++) {
+                mediaViewLayoutParams.addRule(i, rules[i]);
+            }
+            mainImageView.setVisibility(View.INVISIBLE);
+        } else {
+            mainImageView.setVisibility(View.GONE);
+        }
+
+        final MediaView mediaView = new MediaView(activity);
+        ViewGroup mainImageParent = (ViewGroup) mainImageView.getParent();
+        int mainImageIndex = mainImageParent.indexOfChild(mainImageView);
+        mainImageParent.addView(mediaView, mainImageIndex + 1, mediaViewLayoutParams);
+        return adView;
+    }
+
+    @Override
+    public void renderAdView(final View view,
+            final FacebookNative.FacebookVideoEnabledNativeAd facebookVideoEnabledNativeAd) {
+        FacebookNativeViewHolder facebookNativeViewHolder = mViewHolderMap.get(view);
+        if (facebookNativeViewHolder == null) {
+            facebookNativeViewHolder = FacebookNativeViewHolder.fromViewBinder(view, mViewBinder);
+            mViewHolderMap.put(view, facebookNativeViewHolder);
+        }
+
+        update(facebookNativeViewHolder, facebookVideoEnabledNativeAd);
+        NativeRendererHelper.updateExtras(facebookNativeViewHolder.getMainView(),
+                mViewBinder.extras,
+                facebookVideoEnabledNativeAd.getExtras());
+        setViewVisibility(facebookNativeViewHolder, VISIBLE);
+    }
+
+    @Override
+    public boolean supports(final BaseNativeAd nativeAd) {
+        Preconditions.checkNotNull(nativeAd);
+        return nativeAd instanceof FacebookNative.FacebookVideoEnabledNativeAd;
+    }
+
+    private void update(final FacebookNativeViewHolder facebookNativeViewHolder,
+            final FacebookNative.FacebookVideoEnabledNativeAd nativeAd) {
+        final ImageView mainImageView = facebookNativeViewHolder.getMainImageView();
+        NativeRendererHelper.addTextView(facebookNativeViewHolder.getTitleView(),
+                nativeAd.getTitle());
+        NativeRendererHelper.addTextView(facebookNativeViewHolder.getTextView(), nativeAd.getText());
+        NativeRendererHelper.addTextView(facebookNativeViewHolder.getCallToActionView(),
+                nativeAd.getCallToAction());
+        NativeImageHelper.loadImageView(nativeAd.getMainImageUrl(), mainImageView);
+        NativeImageHelper.loadImageView(nativeAd.getIconImageUrl(),
+                facebookNativeViewHolder.getIconImageView());
+        NativeRendererHelper.addPrivacyInformationIcon(
+                facebookNativeViewHolder.getPrivacyInformationIconImageView(),
+                nativeAd.getPrivacyInformationIconImageUrl(),
+                nativeAd.getPrivacyInformationIconClickThroughUrl());
+        final MediaView mediaView = facebookNativeViewHolder.getMediaView();
+        if (mediaView != null && mainImageView != null) {
+            nativeAd.updateMediaView(mediaView);
+            mediaView.setVisibility(View.VISIBLE);
+            if (facebookNativeViewHolder.isMainImageViewInRelativeView()) {
+                mainImageView.setVisibility(View.INVISIBLE);
+            } else {
+                mainImageView.setVisibility(View.GONE);
+            }
+
+        }
+    }
+
+    private static void setViewVisibility(final FacebookNativeViewHolder facebookNativeViewHolder,
+            final int visibility) {
+        if (facebookNativeViewHolder.getMainView() != null) {
+            facebookNativeViewHolder.getMainView().setVisibility(visibility);
+        }
+    }
+
+    static class FacebookNativeViewHolder {
+        private final StaticNativeViewHolder mStaticNativeViewHolder;
+        private final MediaView mMediaView;
+        private final boolean isMainImageViewInRelativeView;
+
+        // Use fromViewBinder instead of a constructor
+        private FacebookNativeViewHolder(final StaticNativeViewHolder staticNativeViewHolder,
+                final MediaView mediaView, final boolean mainImageViewInRelativeView) {
+            mStaticNativeViewHolder = staticNativeViewHolder;
+            mMediaView = mediaView;
+            isMainImageViewInRelativeView = mainImageViewInRelativeView;
+        }
+
+        static FacebookNativeViewHolder fromViewBinder(final View view,
+                final ViewBinder viewBinder) {
+            StaticNativeViewHolder staticNativeViewHolder = StaticNativeViewHolder.fromViewBinder(view, viewBinder);
+            final View mainImageView = staticNativeViewHolder.mainImageView;
+            boolean mainImageViewInRelativeView = false;
+            MediaView mediaView = null;
+            if (mainImageView != null) {
+                final ViewGroup mainImageParent = (ViewGroup) mainImageView.getParent();
+                if (mainImageParent instanceof RelativeLayout) {
+                    mainImageViewInRelativeView = true;
+                }
+                final int mainImageIndex = mainImageParent.indexOfChild(mainImageView);
+                final View viewAfterImageView = mainImageParent.getChildAt(mainImageIndex + 1);
+                if (viewAfterImageView instanceof MediaView) {
+                    mediaView = (MediaView) viewAfterImageView;
+                }
+            }
+            return new FacebookNativeViewHolder(staticNativeViewHolder, mediaView, mainImageViewInRelativeView);
+        }
+
+        public View getMainView() {
+            return mStaticNativeViewHolder.mainView;
+        }
+
+        public TextView getTitleView() {
+            return mStaticNativeViewHolder.titleView;
+        }
+
+        public TextView getTextView() {
+            return mStaticNativeViewHolder.textView;
+        }
+
+        public TextView getCallToActionView() {
+            return mStaticNativeViewHolder.callToActionView;
+        }
+
+        public ImageView getMainImageView() {
+            return mStaticNativeViewHolder.mainImageView;
+        }
+
+        public ImageView getIconImageView() {
+            return mStaticNativeViewHolder.iconImageView;
+        }
+
+        public ImageView getPrivacyInformationIconImageView() {
+            return mStaticNativeViewHolder.privacyInformationIconImageView;
+        }
+
+        public MediaView getMediaView() {
+            return mMediaView;
+        }
+
+        public boolean isMainImageViewInRelativeView() {
+            return isMainImageViewInRelativeView;
+        }
+    }
+}
+
diff --git a/extras/src/com/mopub/nativeads/FacebookNative.java b/extras/src/com/mopub/nativeads/FacebookNative.java
index 76985261..ab951a6d 100644
--- a/extras/src/com/mopub/nativeads/FacebookNative.java
+++ b/extras/src/com/mopub/nativeads/FacebookNative.java
@@ -1,5 +1,6 @@
 package com.mopub.nativeads;
 
+import android.app.Activity;
 import android.content.Context;
 import android.view.View;
 
@@ -7,22 +8,46 @@
 import com.facebook.ads.AdError;
 import com.facebook.ads.AdListener;
 import com.facebook.ads.ImpressionListener;
+import com.facebook.ads.MediaView;
 import com.facebook.ads.NativeAd;
 import com.facebook.ads.NativeAd.Rating;
+import com.mopub.common.Preconditions;
+import com.mopub.common.logging.MoPubLog;
 
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
-/*
- * Tested with Facebook SDK 3.23.1
+import static com.mopub.nativeads.NativeImageHelper.preCacheImages;
+
+/**
+ * Tested with Facebook SDK 4.8.1. FacebookAdRenderer is also necessary in order to show video ads.
+ * Video ads will only be shown if VIDEO_ENABLED is set to true or a server configuration
+ * "video_enabled" flag is set to true. The server configuration will override the local
+ * configuration.
  */
 public class FacebookNative extends CustomEventNative {
     private static final String PLACEMENT_ID_KEY = "placement_id";
+    private static final String VIDEO_ENABLED_KEY = "video_enabled";
+
+    /**
+     * Sets whether or not Facebook native video ads will be shown. This value is overridden with
+     * server extras.
+     */
+    private static boolean VIDEO_ENABLED = false;
+
+    /**
+     * Sets whether or not there is a video renderer available. This class will check for the
+     * default Facebook video renderer. This value can be overridden with {@link
+     * FacebookNative#setVideoRendererAvailable} if there already is a custom Facebook video
+     * renderer.
+     */
+    private static Boolean sIsVideoRendererAvailable = null;
 
     // CustomEventNative implementation
     @Override
-    protected void loadNativeAd(final Context context,
+    protected void loadNativeAd(final Activity activity,
             final CustomEventNativeListener customEventNativeListener,
             final Map<String, Object> localExtras,
             final Map<String, String> serverExtras) {
@@ -35,10 +60,66 @@ protected void loadNativeAd(final Context context,
             return;
         }
 
-        final FacebookForwardingNativeAd facebookForwardingNativeAd =
-                new FacebookForwardingNativeAd(context,
-                        new NativeAd(context, placementId), customEventNativeListener);
-        facebookForwardingNativeAd.loadAd();
+        final String videoEnabledString = serverExtras.get(VIDEO_ENABLED_KEY);
+        boolean videoEnabledFromServer = Boolean.parseBoolean(videoEnabledString);
+
+        if (sIsVideoRendererAvailable == null) {
+            try {
+                Class.forName("com.mopub.nativeads.FacebookAdRenderer");
+                sIsVideoRendererAvailable = true;
+            } catch (ClassNotFoundException e) {
+                sIsVideoRendererAvailable = false;
+            }
+        }
+
+        if (shouldUseVideoEnabledNativeAd(sIsVideoRendererAvailable, videoEnabledString,
+                videoEnabledFromServer)) {
+            final FacebookVideoEnabledNativeAd facebookVideoEnabledNativeAd =
+                    new FacebookVideoEnabledNativeAd(activity,
+                            new NativeAd(activity, placementId), customEventNativeListener);
+            facebookVideoEnabledNativeAd.loadAd();
+        } else {
+            final FacebookStaticNativeAd facebookStaticNativeAd = new FacebookStaticNativeAd(
+                    activity, new NativeAd(activity, placementId), customEventNativeListener);
+            facebookStaticNativeAd.loadAd();
+        }
+    }
+
+    /**
+     * Sets whether Facebook native video ads may be shown. This value is overridden by the value of
+     * the "video_enabled" key that may be sent from the MoPub ad server.
+     * com.mopub.nativeads.FacebookAdRenderer must also be used to display video-enabled ads.
+     *
+     * @param videoEnabled True if you want to enable Facebook native video.
+     */
+    public static void setVideoEnabled(final boolean videoEnabled) {
+        VIDEO_ENABLED = videoEnabled;
+    }
+
+    /**
+     * Sets whether a renderer is available that supports Facebook video ads.
+     * <p/>
+     * If you use a custom renderer class that is not com.mopub.nativeads.FacebookAdRenderer to show
+     * video-enabled native ads, you should set this to true.
+     *
+     * @param videoRendererAvailable Whether or not there is a renderer available for video-enabled
+     *                               Facebook native ads.
+     */
+    public static void setVideoRendererAvailable(final boolean videoRendererAvailable) {
+        sIsVideoRendererAvailable = videoRendererAvailable;
+    }
+
+    static boolean shouldUseVideoEnabledNativeAd(final boolean isVideoRendererAvailable,
+            final String videoEnabledString, final boolean videoEnabledFromServer) {
+        if (!isVideoRendererAvailable) {
+            return false;
+        }
+        return (videoEnabledString != null && videoEnabledFromServer) ||
+                (videoEnabledString == null && VIDEO_ENABLED);
+    }
+
+    static Boolean isVideoRendererAvailable() {
+        return sIsVideoRendererAvailable;
     }
 
     private boolean extrasAreValid(final Map<String, String> serverExtras) {
@@ -46,14 +127,14 @@ private boolean extrasAreValid(final Map<String, String> serverExtras) {
         return (placementId != null && placementId.length() > 0);
     }
 
-    static class FacebookForwardingNativeAd extends BaseForwardingNativeAd implements AdListener, ImpressionListener {
+    static class FacebookStaticNativeAd extends StaticNativeAd implements AdListener, ImpressionListener {
         private static final String SOCIAL_CONTEXT_FOR_AD = "socialContextForAd";
 
         private final Context mContext;
         private final NativeAd mNativeAd;
         private final CustomEventNativeListener mCustomEventNativeListener;
 
-        FacebookForwardingNativeAd(final Context context,
+        FacebookStaticNativeAd(final Context context,
                 final NativeAd nativeAd,
                 final CustomEventNativeListener customEventNativeListener) {
             mContext = context.getApplicationContext();
@@ -80,10 +161,10 @@ public void onAdLoaded(final Ad ad) {
             setTitle(mNativeAd.getAdTitle());
             setText(mNativeAd.getAdBody());
 
-            NativeAd.Image coverImage = mNativeAd.getAdCoverImage();
+            final NativeAd.Image coverImage = mNativeAd.getAdCoverImage();
             setMainImageUrl(coverImage == null ? null : coverImage.getUrl());
 
-            NativeAd.Image icon = mNativeAd.getAdIcon();
+            final NativeAd.Image icon = mNativeAd.getAdIcon();
             setIconImageUrl(icon == null ? null : icon.getUrl());
 
             setCallToAction(mNativeAd.getAdCallToAction());
@@ -91,6 +172,11 @@ public void onAdLoaded(final Ad ad) {
 
             addExtra(SOCIAL_CONTEXT_FOR_AD, mNativeAd.getAdSocialContext());
 
+            final NativeAd.Image adChoicesIconImage = mNativeAd.getAdChoicesIcon();
+            setPrivacyInformationIconImageUrl(adChoicesIconImage == null ? null : adChoicesIconImage
+                    .getUrl());
+            setPrivacyInformationIconClickThroughUrl(mNativeAd.getAdChoicesLinkUrl());
+
             final List<String> imageUrls = new ArrayList<String>();
             final String mainImageUrl = getMainImageUrl();
             if (mainImageUrl != null) {
@@ -100,11 +186,15 @@ public void onAdLoaded(final Ad ad) {
             if (iconUrl != null) {
                 imageUrls.add(getIconImageUrl());
             }
+            final String privacyInformationIconImageUrl = getPrivacyInformationIconImageUrl();
+            if (privacyInformationIconImageUrl != null) {
+                imageUrls.add(privacyInformationIconImageUrl);
+            }
 
-            preCacheImages(mContext, imageUrls, new ImageListener() {
+            preCacheImages(mContext, imageUrls, new NativeImageHelper.ImageListener() {
                 @Override
                 public void onImagesCached() {
-                    mCustomEventNativeListener.onNativeAdLoaded(FacebookForwardingNativeAd.this);
+                    mCustomEventNativeListener.onNativeAdLoaded(FacebookStaticNativeAd.this);
                 }
 
                 @Override
@@ -142,8 +232,6 @@ public void onLoggingImpression(final Ad ad) {
         @Override
         public void prepare(final View view) {
             mNativeAd.registerViewForInteraction(view);
-            setOverridingClickTracker(true);
-            setOverridingImpressionTracker(true);
         }
 
         @Override
@@ -164,4 +252,240 @@ private Double getDoubleRating(final Rating rating) {
             return MAX_STAR_RATING * rating.getValue() / rating.getScale();
         }
     }
+
+
+    static class FacebookVideoEnabledNativeAd extends BaseNativeAd implements AdListener, ImpressionListener {
+        private static final String SOCIAL_CONTEXT_FOR_AD = "socialContextForAd";
+
+        static final double MIN_STAR_RATING = 0;
+        static final double MAX_STAR_RATING = 5;
+
+        private final Context mContext;
+        private final NativeAd mNativeAd;
+        private final CustomEventNativeListener mCustomEventNativeListener;
+
+        private Double mStarRating;
+
+        private final Map<String, Object> mExtras;
+
+        FacebookVideoEnabledNativeAd(final Context context,
+                final NativeAd nativeAd,
+                final CustomEventNativeListener customEventNativeListener) {
+            mContext = context.getApplicationContext();
+            mNativeAd = nativeAd;
+            mCustomEventNativeListener = customEventNativeListener;
+            mExtras = new HashMap<String, Object>();
+        }
+
+        void loadAd() {
+            mNativeAd.setAdListener(this);
+            mNativeAd.setImpressionListener(this);
+            mNativeAd.loadAd();
+        }
+
+        /**
+         * Returns the String corresponding to the ad's title.
+         */
+        final public String getTitle() {
+            return mNativeAd.getAdTitle();
+        }
+
+        /**
+         * Returns the String corresponding to the ad's body text. May be null.
+         */
+        final public String getText() {
+            return mNativeAd.getAdBody();
+        }
+
+        /**
+         * Returns the String url corresponding to the ad's main image. May be null.
+         */
+        final public String getMainImageUrl() {
+            final NativeAd.Image coverImage = mNativeAd.getAdCoverImage();
+            return coverImage == null ? null : coverImage.getUrl();
+        }
+
+        /**
+         * Returns the String url corresponding to the ad's icon image. May be null.
+         */
+        final public String getIconImageUrl() {
+            final NativeAd.Image icon = mNativeAd.getAdIcon();
+            return icon == null ? null : icon.getUrl();
+        }
+
+        /**
+         * Returns the Call To Action String (i.e. "Download" or "Learn More") associated with this ad.
+         */
+        final public String getCallToAction() {
+            return mNativeAd.getAdCallToAction();
+        }
+
+        /**
+         * For app install ads, this returns the associated star rating (on a 5 star scale) for the
+         * advertised app. Note that this method may return null if the star rating was either never set
+         * or invalid.
+         */
+        final public Double getStarRating() {
+            return mStarRating;
+        }
+
+        /**
+         * Returns the Privacy Information click through url.
+         *
+         * @return String representing the Privacy Information Icon click through url, or {@code null}
+         * if not set.
+         */
+        final public String getPrivacyInformationIconClickThroughUrl() {
+            return mNativeAd.getAdChoicesLinkUrl();
+        }
+
+        /**
+         * Returns the Privacy Information image url.
+         *
+         * @return String representing the Privacy Information Icon click through url, or {@code
+         * null} if not set.
+         */
+        final public String getPrivacyInformationIconImageUrl() {
+            return mNativeAd.getAdChoicesIcon() == null ? null : mNativeAd.getAdChoicesIcon().getUrl();
+        }
+
+        // AdListener
+        @Override
+        public void onAdLoaded(final Ad ad) {
+            // This identity check is from Facebook's Native API sample code:
+            // https://developers.facebook.com/docs/audience-network/android/native-api
+            if (!mNativeAd.equals(ad) || !mNativeAd.isAdLoaded()) {
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
+                return;
+            }
+
+            setStarRating(getDoubleRating(mNativeAd.getAdStarRating()));
+
+            addExtra(SOCIAL_CONTEXT_FOR_AD, mNativeAd.getAdSocialContext());
+
+            final List<String> imageUrls = new ArrayList<String>();
+            final String mainImageUrl = getMainImageUrl();
+            if (mainImageUrl != null) {
+                imageUrls.add(mainImageUrl);
+            }
+            final String iconImageUrl = getIconImageUrl();
+            if (iconImageUrl != null) {
+                imageUrls.add(iconImageUrl);
+            }
+            final String privacyInformationIconImageUrl = getPrivacyInformationIconImageUrl();
+            if (privacyInformationIconImageUrl != null) {
+                imageUrls.add(privacyInformationIconImageUrl);
+            }
+
+            preCacheImages(mContext, imageUrls, new NativeImageHelper.ImageListener() {
+                @Override
+                public void onImagesCached() {
+                    mCustomEventNativeListener.onNativeAdLoaded(FacebookVideoEnabledNativeAd.this);
+                }
+
+                @Override
+                public void onImagesFailedToCache(NativeErrorCode errorCode) {
+                    mCustomEventNativeListener.onNativeAdFailed(errorCode);
+                }
+            });
+        }
+
+        @Override
+        public void onError(final Ad ad, final AdError adError) {
+            if (adError == null) {
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
+            } else if (adError.getErrorCode() == AdError.NO_FILL.getErrorCode()) {
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_NO_FILL);
+            } else if (adError.getErrorCode() == AdError.INTERNAL_ERROR.getErrorCode()) {
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
+            } else {
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
+            }
+        }
+
+        @Override
+        public void onAdClicked(final Ad ad) {
+            notifyAdClicked();
+        }
+
+        // ImpressionListener
+        @Override
+        public void onLoggingImpression(final Ad ad) {
+            notifyAdImpressed();
+        }
+
+        // BaseForwardingNativeAd
+        @Override
+        public void prepare(final View view) {
+            mNativeAd.registerViewForInteraction(view);
+        }
+
+        @Override
+        public void clear(final View view) {
+            mNativeAd.unregisterView();
+        }
+
+        @Override
+        public void destroy() {
+            mNativeAd.destroy();
+        }
+
+        /**
+         * Given a particular String key, return the associated Object value from the ad's extras map.
+         * See {@link StaticNativeAd#getExtras()} for more information.
+         */
+        final public Object getExtra(final String key) {
+            if (!Preconditions.NoThrow.checkNotNull(key, "getExtra key is not allowed to be null")) {
+                return null;
+            }
+            return mExtras.get(key);
+        }
+
+        /**
+         * Returns a copy of the extras map, reflecting additional ad content not reflected in any
+         * of the above hardcoded setters. This is particularly useful for passing down custom fields
+         * with MoPub's direct-sold native ads or from mediated networks that pass back additional
+         * fields.
+         */
+        final public Map<String, Object> getExtras() {
+            return new HashMap<String, Object>(mExtras);
+        }
+
+        final public void addExtra( final String key, final Object value) {
+            if (!Preconditions.NoThrow.checkNotNull(key, "addExtra key is not allowed to be null")) {
+                return;
+            }
+            mExtras.put(key, value);
+        }
+
+        /**
+         * Attaches the native ad to the MediaView, if it exists.
+         *
+         * @param mediaView The View that holds the main media.
+         */
+        public void updateMediaView(final MediaView mediaView) {
+            if (mediaView != null) {
+                mediaView.setNativeAd(mNativeAd);
+            }
+        }
+
+        private void setStarRating(final Double starRating) {
+            if (starRating == null) {
+                mStarRating = null;
+            } else if (starRating >= MIN_STAR_RATING && starRating <= MAX_STAR_RATING) {
+                mStarRating = starRating;
+            } else {
+                MoPubLog.d("Ignoring attempt to set invalid star rating (" + starRating + "). Must be "
+                        + "between " + MIN_STAR_RATING + " and " + MAX_STAR_RATING + ".");
+            }
+        }
+
+        private Double getDoubleRating(final Rating rating) {
+            if (rating == null) {
+                return null;
+            }
+
+            return MAX_STAR_RATING * rating.getValue() / rating.getScale();
+        }
+    }
 }
diff --git a/extras/src/com/mopub/nativeads/InMobiNative.java b/extras/src/com/mopub/nativeads/InMobiNative.java
index ae00d72a..0c0c7a04 100644
--- a/extras/src/com/mopub/nativeads/InMobiNative.java
+++ b/extras/src/com/mopub/nativeads/InMobiNative.java
@@ -10,6 +10,7 @@
 import com.inmobi.monetization.IMErrorCode;
 import com.inmobi.monetization.IMNative;
 import com.inmobi.monetization.IMNativeListener;
+import com.mopub.common.logging.MoPubLog;
 
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -21,6 +22,7 @@
 
 import static com.mopub.common.util.Json.getJsonValue;
 import static com.mopub.common.util.Numbers.parseDouble;
+import static com.mopub.nativeads.NativeImageHelper.preCacheImages;
 
 /*
  * Tested with InMobi SDK 4.4.1
@@ -30,17 +32,11 @@
 
     // CustomEventNative implementation
     @Override
-    protected void loadNativeAd(final Context context,
+    protected void loadNativeAd(final Activity activity,
             final CustomEventNativeListener customEventNativeListener,
             final Map<String, Object> localExtras,
             final Map<String, String> serverExtras) {
 
-        if (!(context instanceof Activity)) {
-            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-        final Activity activity = (Activity) context;
-
         final String appId;
         if (extrasAreValid(serverExtras)) {
             appId = serverExtras.get(APP_ID_KEY);
@@ -50,10 +46,13 @@ protected void loadNativeAd(final Context context,
         }
 
         InMobi.initialize(activity, appId);
-        final InMobiForwardingNativeAd inMobiForwardingNativeAd =
-                new InMobiForwardingNativeAd(context, customEventNativeListener);
-        inMobiForwardingNativeAd.setIMNative(new IMNative(inMobiForwardingNativeAd));
-        inMobiForwardingNativeAd.loadAd();
+        final InMobiStaticNativeAd inMobiStaticNativeAd =
+                new InMobiStaticNativeAd(activity,
+                        new ImpressionTracker(activity),
+                        new NativeClickHandler(activity),
+                        customEventNativeListener);
+        inMobiStaticNativeAd.setIMNative(new IMNative(inMobiStaticNativeAd));
+        inMobiStaticNativeAd.loadAd();
     }
 
     private boolean extrasAreValid(final Map<String, String> serverExtras) {
@@ -61,7 +60,7 @@ private boolean extrasAreValid(final Map<String, String> serverExtras) {
         return (placementId != null && placementId.length() > 0);
     }
 
-    static class InMobiForwardingNativeAd extends BaseForwardingNativeAd implements IMNativeListener {
+    static class InMobiStaticNativeAd extends StaticNativeAd implements IMNativeListener {
         static final int IMPRESSION_MIN_TIME_VIEWED = 0;
 
         // Modifiable keys
@@ -78,11 +77,17 @@ private boolean extrasAreValid(final Map<String, String> serverExtras) {
 
         private final Context mContext;
         private final CustomEventNativeListener mCustomEventNativeListener;
+        private final ImpressionTracker mImpressionTracker;
+        private final NativeClickHandler mNativeClickHandler;
         private IMNative mImNative;
 
-        InMobiForwardingNativeAd(final Context context,
+        InMobiStaticNativeAd(final Context context,
+                final ImpressionTracker impressionTracker,
+                final NativeClickHandler nativeClickHandler,
                 final CustomEventNativeListener customEventNativeListener) {
             mContext = context.getApplicationContext();
+            mImpressionTracker = impressionTracker;
+            mNativeClickHandler = nativeClickHandler;
             mCustomEventNativeListener = customEventNativeListener;
         }
 
@@ -105,7 +110,7 @@ public void onNativeRequestSucceeded(final IMNative imNative) {
             try {
                 parseJson(imNative);
             } catch (JSONException e) {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.INVALID_JSON);
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.INVALID_RESPONSE);
                 return;
             }
 
@@ -120,10 +125,10 @@ public void onNativeRequestSucceeded(final IMNative imNative) {
                 imageUrls.add(iconUrl);
             }
 
-            preCacheImages(mContext, imageUrls, new ImageListener() {
+            preCacheImages(mContext, imageUrls, new NativeImageHelper.ImageListener() {
                 @Override
                 public void onImagesCached() {
-                    mCustomEventNativeListener.onNativeAdLoaded(InMobiForwardingNativeAd.this);
+                    mCustomEventNativeListener.onNativeAdLoaded(InMobiStaticNativeAd.this);
                 }
 
                 @Override
@@ -146,6 +151,7 @@ public void onNativeRequestFailed(final IMErrorCode errorCode) {
             }
         }
 
+        // Lifecycle Handlers
         @Override
         public void prepare(final View view) {
             if (view != null && view instanceof ViewGroup) {
@@ -155,16 +161,33 @@ public void prepare(final View view) {
             } else {
                 Log.e("MoPub", "InMobi did not receive ViewGroup to attachToView, unable to record impressions");
             }
+            mImpressionTracker.addView(view, this);
+            mNativeClickHandler.setOnClickListener(view, this);
         }
 
         @Override
-        public void handleClick(final View view) {
-            mImNative.handleClick(null);
+        public void clear(final View view) {
+            mImpressionTracker.removeView(view);
+            mNativeClickHandler.clearOnClickListener(view);
         }
 
         @Override
         public void destroy() {
             mImNative.detachFromView();
+            mImpressionTracker.destroy();
+        }
+
+        // Event Handlers
+        @Override
+        public void recordImpression(final View view) {
+            notifyAdImpressed();
+        }
+
+        @Override
+        public void handleClick(final View view) {
+            notifyAdClicked();
+            mNativeClickHandler.openClickDestinationUrl(getClickDestinationUrl(), view);
+            mImNative.handleClick(null);
         }
 
         void parseJson(final IMNative imNative) throws JSONException  {
@@ -184,7 +207,15 @@ void parseJson(final IMNative imNative) throws JSONException  {
                 setIconImageUrl(getJsonValue(iconJsonObject, URL, String.class));
             }
 
-            setClickDestinationUrl(getJsonValue(jsonObject, LANDING_URL, String.class));
+            final String clickDestinationUrl = getJsonValue(jsonObject, LANDING_URL, String.class);
+            if (clickDestinationUrl == null) {
+                final String errorMessage = "InMobi JSON response missing required key: "
+                        + LANDING_URL + ". Failing over.";
+                MoPubLog.d(errorMessage);
+                throw new JSONException(errorMessage);
+            }
+
+            setClickDestinationUrl(clickDestinationUrl);
             setCallToAction(getJsonValue(jsonObject, CTA, String.class));
 
             try {
diff --git a/extras/src/com/mopub/nativeads/MillennialNative.java b/extras/src/com/mopub/nativeads/MillennialNative.java
new file mode 100644
index 00000000..7a312731
--- /dev/null
+++ b/extras/src/com/mopub/nativeads/MillennialNative.java
@@ -0,0 +1,301 @@
+package com.mopub.nativeads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.os.Handler;
+import android.os.Looper;
+import android.util.Log;
+import android.view.View;
+
+import com.millennialmedia.AppInfo;
+import com.millennialmedia.MMException;
+import com.millennialmedia.MMSDK;
+import com.millennialmedia.NativeAd;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+
+import static com.mopub.nativeads.NativeImageHelper.preCacheImages;
+
+public class MillennialNative extends CustomEventNative {
+    public static final String DCN_KEY = "dcn";
+    public static final String APID_KEY = "adUnitID";
+    private final static String LOGCAT_TAG = "MoPub->MM-Native";
+    private static final Handler UI_THREAD_HANDLER = new Handler(Looper.getMainLooper());
+
+    @Override
+    protected void loadNativeAd(final Activity activity,
+            final CustomEventNativeListener listener,
+            final Map<String, Object> localExtras,
+            final Map<String, String> serverExtras) {
+
+        String placementId;
+        String siteId;
+
+        if ( !MMSDK.isInitialized() ) {
+            try {
+                MMSDK.initialize(activity);
+            } catch ( Exception e ) {
+                Log.e(LOGCAT_TAG, "Unable to initialize the Millennial SDK-- " + e.getMessage());
+                e.printStackTrace();
+                UI_THREAD_HANDLER.post(new Runnable() {
+                    @Override
+                    public void run() {
+                        listener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
+                    }
+                });
+                return;
+            }
+        }
+
+        if ( extrasAreValid( serverExtras )) {
+            placementId = serverExtras.get(APID_KEY);
+            siteId = serverExtras.get(DCN_KEY);
+        } else {
+            UI_THREAD_HANDLER.post(new Runnable() {
+                @Override
+                public void run() {
+                    listener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
+                }
+            });
+            return;
+        }
+
+        try {
+            AppInfo ai = new AppInfo().setMediator("mopubsdk");
+            if ( siteId != null && siteId.length() > 0 ) {
+                ai = ai.setSiteId(siteId);
+            } else {
+                ai = ai.setSiteId(null);
+            }
+
+            MMSDK.setAppInfo(ai);
+        } catch ( IllegalStateException e ) {
+            Log.w(LOGCAT_TAG, "Caught exception: " + e.getMessage());
+            UI_THREAD_HANDLER.post(new Runnable() {
+                @Override
+                public void run() {
+                    listener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
+                }
+            });
+            return;
+        }
+
+        try {
+            NativeAd nativeAd = NativeAd.createInstance(placementId, NativeAd.NATIVE_TYPE_INLINE);
+            final MillennialStaticNativeAd millennialStaticNativeAd =
+                    new MillennialStaticNativeAd(activity,
+                            nativeAd,
+                            new ImpressionTracker(activity),
+                            new NativeClickHandler(activity),
+                            listener);
+            millennialStaticNativeAd.loadAd();
+        } catch ( MMException e ) {
+            UI_THREAD_HANDLER.post(new Runnable() {
+                @Override
+                public void run() {
+                    listener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
+                }
+            });
+        }
+    }
+
+    private boolean extrasAreValid(final Map<String, String> serverExtras) {
+        String placementId = serverExtras.get(APID_KEY);
+        return (serverExtras.containsKey(APID_KEY) &&
+                placementId != null && placementId.length() > 0 );
+    }
+
+
+    static class MillennialStaticNativeAd extends StaticNativeAd implements NativeAd.NativeListener {
+        private final Context mContext;
+        private NativeAd mNativeAd;
+        private final ImpressionTracker mImpressionTracker;
+        private final NativeClickHandler mNativeClickHandler;
+        private final CustomEventNativeListener mListener;
+        private final MillennialStaticNativeAd mMillennialStaticNativeAd;
+
+        public MillennialStaticNativeAd(final Context context,
+                final NativeAd nativeAd,
+                final ImpressionTracker impressionTracker,
+                final NativeClickHandler nativeClickHandler,
+                final CustomEventNativeListener customEventNativeListener) {
+            mContext = context.getApplicationContext();
+            mNativeAd = nativeAd;
+            mImpressionTracker = impressionTracker;
+            mNativeClickHandler = nativeClickHandler;
+            mListener = customEventNativeListener;
+            mMillennialStaticNativeAd = this;
+
+            nativeAd.setListener(this);
+        }
+
+        void loadAd() {
+            Log.i(LOGCAT_TAG, "Loading native ad...");
+            try {
+                mNativeAd.load(mContext, null);
+            } catch (MMException e) {
+                Log.w(MillennialNative.LOGCAT_TAG, "Caught configuration error Exception.");
+                e.printStackTrace();
+                UI_THREAD_HANDLER.post(new Runnable() {
+                    @Override
+                    public void run() {
+                        mListener.onNativeAdFailed(NativeErrorCode
+                                .NATIVE_ADAPTER_CONFIGURATION_ERROR);
+                    }
+                });
+            }
+        }
+
+        // Lifecycle Handlers
+        @Override
+        public void prepare(final View view) {
+            // Must access these methods directly to get impressions to fire.
+            mNativeAd.getIconImage();
+            mNativeAd.getDisclaimer();
+            mImpressionTracker.addView(view, this);
+            mNativeClickHandler.setOnClickListener(view, this);
+        }
+
+        @Override
+        public void clear(final View view) {
+            mImpressionTracker.removeView(view);
+            mNativeClickHandler.clearOnClickListener(view);
+        }
+
+        @Override
+        public void destroy() {
+            mImpressionTracker.destroy();
+            mNativeAd.setListener(null);
+            mNativeAd = null;
+        }
+
+        // Event Handlers
+        @Override
+        public void recordImpression(final View view) {
+            notifyAdImpressed();
+            try {
+                mNativeAd.fireImpression();
+                Log.i(LOGCAT_TAG, "Millennial native impression recorded.");
+            } catch ( MMException m ) {
+                Log.e(LOGCAT_TAG, "Millennial native impression NOT tracked: " + m.getMessage() );
+            }
+        }
+
+        @Override
+        public void handleClick(final View view) {
+            notifyAdClicked();
+            mNativeClickHandler.openClickDestinationUrl(getClickDestinationUrl(), view);
+            mNativeAd.fireClicked();
+            Log.i(LOGCAT_TAG, "Millennial native ad clicked!");
+        }
+
+        // MM'S Native mListener
+        @Override
+        public void onLoaded(NativeAd nativeAd) {
+            // Set assets
+            String iconImageUrl = nativeAd.getImageUrl(NativeAd.ComponentName.ICON_IMAGE, 1);
+            String mainImageUrl = nativeAd.getImageUrl(NativeAd.ComponentName.MAIN_IMAGE, 1);
+
+            setTitle(nativeAd.getTitle().getText().toString());
+            setText(nativeAd.getBody().getText().toString());
+            setCallToAction(nativeAd.getCallToActionButton().getText().toString());
+
+            final String clickDestinationUrl = nativeAd.getCallToActionUrl();
+            if (clickDestinationUrl == null) {
+                UI_THREAD_HANDLER.post(new Runnable() {
+                    @Override
+                    public void run() {
+                        Log.d(LOGCAT_TAG,
+                                "Millennial native encountered null destination url. Failing over.");
+                        mListener.onNativeAdFailed(
+                                NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
+                    }
+                });
+                return;
+            }
+
+            setClickDestinationUrl(clickDestinationUrl);
+            setIconImageUrl(iconImageUrl);
+            setMainImageUrl(mainImageUrl);
+
+            final List<String> urls = new ArrayList<String>();
+            if ( iconImageUrl != null ) { urls.add(iconImageUrl); }
+            if ( mainImageUrl != null ) { urls.add(mainImageUrl); }
+
+            UI_THREAD_HANDLER.post(new Runnable() {
+                @Override
+                public void run() {
+                    // This has to be run on the main thread:
+                    preCacheImages(mContext, urls, new NativeImageHelper.ImageListener() {
+                        @Override
+                        public void onImagesCached() {
+                            mListener.onNativeAdLoaded(mMillennialStaticNativeAd);
+                            Log.i(LOGCAT_TAG, "Millennial native ad loaded");
+                        }
+
+                        @Override
+                        public void onImagesFailedToCache(NativeErrorCode errorCode) {
+                            mListener.onNativeAdFailed(errorCode);
+                        }
+                    });
+
+                }
+            });
+        }
+
+        @Override
+        public void onLoadFailed(NativeAd nativeAd, NativeAd.NativeErrorStatus nativeErrorStatus) {
+            final NativeErrorCode error;
+            switch ( nativeErrorStatus.getErrorCode() ) {
+                case NativeAd.NativeErrorStatus.LOAD_TIMED_OUT:
+                    error = NativeErrorCode.NETWORK_TIMEOUT;
+                    break;
+                case NativeAd.NativeErrorStatus.NO_NETWORK:
+                    error = NativeErrorCode.CONNECTION_ERROR;
+                    break;
+                case NativeAd.NativeErrorStatus.UNKNOWN:
+                    error = NativeErrorCode.UNSPECIFIED;
+                    break;
+                case NativeAd.NativeErrorStatus.LOAD_FAILED:
+                case NativeAd.NativeErrorStatus.INIT_FAILED:
+                    error = NativeErrorCode.UNEXPECTED_RESPONSE_CODE;
+                    break;
+                case NativeAd.NativeErrorStatus.ADAPTER_NOT_FOUND:
+                    error = NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR;
+                    break;
+                case NativeAd.NativeErrorStatus.DISPLAY_FAILED:
+                case NativeAd.NativeErrorStatus.EXPIRED:
+                    error = NativeErrorCode.UNSPECIFIED;
+                    break;
+                default:
+                    error = NativeErrorCode.NETWORK_NO_FILL;
+            }
+            UI_THREAD_HANDLER.post(new Runnable() {
+                @Override
+                public void run() {
+                    mListener.onNativeAdFailed(error);
+                }
+            });
+            Log.i(LOGCAT_TAG, "Millennial native ad failed: " + nativeErrorStatus.getDescription() );
+        }
+
+        @Override
+        public void onClicked(NativeAd nativeAd, NativeAd.ComponentName componentName, int i) {
+            Log.i(LOGCAT_TAG, "Millennial native SDK's click tracker fired.");
+        }
+
+        @Override
+        public void onAdLeftApplication(NativeAd nativeAd) {
+            Log.i(LOGCAT_TAG, "Millennial native SDK has left the application.");
+
+        }
+
+        @Override
+        public void onExpired(NativeAd nativeAd) {
+            Log.i(LOGCAT_TAG, "Millennial native ad has expired!");
+        }
+
+    }
+}
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index 36a2f79c..5915b7c8 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -1,16 +1,15 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.mopub.simpleadsdemo"
-      android:versionCode="27"
-      android:versionName="3.10.0">
+      android:versionCode="42"
+      android:versionName="4.7.1">
     <uses-sdk android:minSdkVersion="9"
-              android:targetSdkVersion="22"/>
+              android:targetSdkVersion="23"/>
 
     <uses-permission android:name="android.permission.INTERNET" />
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
     <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
 
-
     <!-- For MRAID 2 -->
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
 
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index 1e3fca7a..3e922f90 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -1,22 +1,26 @@
 repositories {
     jcenter()
+    flatDir {
+        dirs '../libs'
+    }
 }
 
 apply plugin: 'com.android.application'
 
 group = 'com.mopub'
 description = '''MoPub Sample App'''
-version = '3.10.0'
+version = '4.7.1'
 
 android {
-    compileSdkVersion 22
-    buildToolsVersion '22.0.1'
+    compileSdkVersion 23
+    buildToolsVersion '23.0.2'
+    lintOptions { abortOnError false }
 
     defaultConfig {
-        versionCode 27
+        versionCode 42
         versionName version
         minSdkVersion 9
-        targetSdkVersion 22
+        targetSdkVersion 23
     }
 
     buildTypes {
@@ -51,8 +55,8 @@ android {
 }
 
 dependencies {
-    compile 'com.android.support:support-v4:22.0.0'
-    compile 'com.google.android.gms:play-services-ads:7.0.0'
-    compile 'com.android.support:recyclerview-v7:22.0.0'
+    compile 'com.android.support:support-v4:23.1.1'
+    compile 'com.google.android.gms:play-services-ads:7.8.0'
+    compile 'com.android.support:recyclerview-v7:23.1.1'
     compile project(':mopub-sdk')
 }
diff --git a/mopub-sample/pom.xml b/mopub-sample/pom.xml
index 3c112660..8a283c4d 100644
--- a/mopub-sample/pom.xml
+++ b/mopub-sample/pom.xml
@@ -33,14 +33,14 @@
         <dependency>
             <groupId>com.android.support</groupId>
             <artifactId>support-v4</artifactId>
-            <version>22.0.0</version>
+            <version>23.1.1</version>
             <type>aar</type>
         </dependency>
 
         <dependency>
             <groupId>com.android.support</groupId>
             <artifactId>recyclerview-v7</artifactId>
-            <version>22.0.0</version>
+            <version>23.1.1</version>
             <type>aar</type>
         </dependency>
         
diff --git a/mopub-sample/res/layout/mrect_detail_fragment.xml b/mopub-sample/res/layout/mrect_detail_fragment.xml
deleted file mode 100644
index 15167ce5..00000000
--- a/mopub-sample/res/layout/mrect_detail_fragment.xml
+++ /dev/null
@@ -1,61 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent">
-
-    <TextView
-        android:id="@+id/description"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:paddingLeft="8dp"
-        android:paddingRight="8dp"
-        android:paddingTop="8dp"
-        android:singleLine="true"
-        android:textColor="?android:attr/textColorPrimary"
-        android:textSize="16sp"
-        android:textStyle="bold" />
-
-    <TextView
-        android:id="@+id/ad_unit_id"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:paddingLeft="8dp"
-        android:paddingRight="8dp"
-        android:singleLine="true"
-        android:textColor="?android:attr/textColorSecondary"
-        android:textSize="14sp"
-        android:textStyle="normal" />
-
-    <LinearLayout
-        android:orientation="horizontal"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content">
-
-        <EditText
-            android:id="@+id/keywords_field"
-            android:hint="@string/keywords"
-            android:layout_width="0dp"
-            android:layout_height="wrap_content"
-            android:layout_weight="3"
-            android:inputType="text|textFilter|textShortMessage"
-            android:imeOptions="actionDone"
-            android:singleLine="true" />
-
-        <Button
-            android:id="@+id/load_button"
-            android:text="@string/load_ad"
-            android:layout_width="0dp"
-            android:layout_height="wrap_content"
-            android:layout_weight="1" />
-    </LinearLayout>
-
-    <com.mopub.mobileads.MoPubView
-        android:id="@+id/mrect_mopubview"
-        android:layout_width="300dp"
-        android:layout_height="250dp"
-        android:layout_gravity="center_horizontal"
-        android:paddingTop="10dp">
-    </com.mopub.mobileads.MoPubView>
-</LinearLayout>
diff --git a/mopub-sample/res/layout/native_ad_list_item.xml b/mopub-sample/res/layout/native_ad_list_item.xml
index 47528603..e81c3379 100644
--- a/mopub-sample/res/layout/native_ad_list_item.xml
+++ b/mopub-sample/res/layout/native_ad_list_item.xml
@@ -61,4 +61,14 @@
         android:clickable="true"
         android:paddingBottom="10dp" />
 
+    <ImageView
+        android:id="@+id/native_privacy_information_icon_image"
+        android:layout_width="40dp"
+        android:layout_height="40dp"
+        android:padding="10dp"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"
+        android:layout_alignParentTop="true"
+        android:contentDescription="@string/native_privacy_information_icon_image"/>
+
 </RelativeLayout>
diff --git a/mopub-sample/res/layout/native_list_view_fragment.xml b/mopub-sample/res/layout/native_list_view_fragment.xml
index ff83a0ee..d63273d1 100644
--- a/mopub-sample/res/layout/native_list_view_fragment.xml
+++ b/mopub-sample/res/layout/native_list_view_fragment.xml
@@ -53,6 +53,6 @@
     <ListView
         android:id="@+id/native_list_view"
         android:layout_width="match_parent"
-        android:layout_height="wrap_content"
+        android:layout_height="match_parent"
         android:padding="5dp"/>
 </LinearLayout>
diff --git a/mopub-sample/res/layout/video_ad_list_item.xml b/mopub-sample/res/layout/video_ad_list_item.xml
new file mode 100644
index 00000000..286dd0e3
--- /dev/null
+++ b/mopub-sample/res/layout/video_ad_list_item.xml
@@ -0,0 +1,74 @@
+<RelativeLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/native_outer_view"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:background="@android:color/white">
+    <ImageView android:id="@+id/native_icon_image"
+        android:layout_width="64dp"
+        android:layout_height="64dp"
+        android:background="@null"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentTop="true"
+        android:layout_marginTop="10dp"
+        android:layout_marginLeft="10dp"
+        />
+
+    <TextView android:id="@+id/native_title"
+        android:layout_width="match_parent"
+        android:layout_marginLeft="84dp"
+        android:layout_marginTop="32dp"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        android:layout_alignParentLeft="true"
+        android:textColor="@android:color/darker_gray"
+        android:textStyle="bold" />
+
+    <TextView android:id="@+id/native_text"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_below="@+id/native_icon_image"
+        android:layout_alignParentLeft="true"
+        android:layout_marginLeft="10dp"
+        android:layout_marginTop="10dp"
+        android:textColor="@android:color/darker_gray" />
+
+
+    <com.mopub.nativeads.MediaLayout
+        android:id="@+id/native_media_layout"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:background="#000000"
+        android:layout_marginTop="10dp"
+        android:layout_marginLeft="10dp"
+        android:layout_marginRight="10dp"
+        android:layout_marginBottom="10dp"
+        android:layout_below="@+id/native_text"
+        android:layout_centerHorizontal="true" />
+
+    <Button
+        android:id="@+id/native_cta"
+        android:layout_width="wrap_content"
+        android:layout_height="35dp"
+        android:text="@string/learn_more"
+        android:textColor="@android:color/black"
+        android:textStyle="bold"
+        android:layout_marginRight="10dp"
+        android:layout_marginTop="10dp"
+        android:layout_below="@+id/native_media_layout"
+        android:textSize="12sp"
+        android:layout_alignParentRight="true"
+        android:clickable="true"
+        android:paddingBottom="10dp" />
+
+    <ImageView
+        android:id="@+id/native_privacy_information_icon_image"
+        android:layout_width="40dp"
+        android:layout_height="40dp"
+        android:padding="10dp"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"
+        android:layout_alignParentTop="true"
+        android:contentDescription="@string/native_privacy_information_icon_image"/>
+
+</RelativeLayout>
diff --git a/mopub-sample/res/values/dimens.xml b/mopub-sample/res/values/dimens.xml
index 02259949..75ede747 100644
--- a/mopub-sample/res/values/dimens.xml
+++ b/mopub-sample/res/values/dimens.xml
@@ -5,4 +5,12 @@
     <dimen name="detail_text_size">10sp</dimen>
     <dimen name="title_size">24sp</dimen>
     <dimen name="native_main_image_height">200dp</dimen>
+    <dimen name="banner_width">320dp</dimen>
+    <dimen name="banner_height">50dp</dimen>
+    <dimen name="mrect_width">300dp</dimen>
+    <dimen name="mrect_height">250dp</dimen>
+    <dimen name="leaderboard_width">728dp</dimen>
+    <dimen name="leaderboard_height">90dp</dimen>
+    <dimen name="skyscraper_width">160dp</dimen>
+    <dimen name="skyscraper_height">600dp</dimen>
 </resources>
\ No newline at end of file
diff --git a/mopub-sample/res/values/strings.xml b/mopub-sample/res/values/strings.xml
index 4824d0b9..a1deb782 100644
--- a/mopub-sample/res/values/strings.xml
+++ b/mopub-sample/res/values/strings.xml
@@ -8,6 +8,7 @@
     <string name="show_ad">Show Ad</string>
     <string name="native_icon_image">native_icon_image</string>
     <string name="native_main_image">native_main_image</string>
+    <string name="native_privacy_information_icon_image">Privacy Information Icon image</string>
     <string name="learn_more">Learn More</string>
     <string name="save">Save Ad Unit</string>
     <string name="ad_unit_id">Ad Unit Id:</string>
@@ -19,7 +20,9 @@
     <string name="add_ad_unit_button">Add an Ad Unit</string>
     <string name="ad_unit_id_banner">b195f8dd8ded45fe847ad89ed1d016da</string>
     <string name="ad_unit_id_mrect">252412d5e9364a05ab77d9396346d73d</string>
+    <string name="ad_unit_id_leaderboard">a8919cca19784497872ae69d48f678e1</string>
     <string name="ad_unit_id_interstitial">24534e1901884e398f1253216226017e</string>
+    <string name="ad_unit_id_rewarded_video">920b6145fb1546cf8b5cf2ac34638bb7</string>
     <string name="ad_unit_id_native">11a17b188668469fb0412708c3d16813</string>
     <string name="swipe_text"><![CDATA[< Swipe Left & Right >]]></string>
 </resources>
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java
new file mode 100644
index 00000000..f4ee63c9
--- /dev/null
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java
@@ -0,0 +1,114 @@
+package com.mopub.simpleadsdemo;
+
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.LinearLayout;
+
+import com.mopub.mobileads.MoPubErrorCode;
+import com.mopub.mobileads.MoPubView;
+
+import static com.mopub.mobileads.MoPubView.BannerAdListener;
+import static com.mopub.simpleadsdemo.Utils.hideSoftKeyboard;
+import static com.mopub.simpleadsdemo.Utils.logToast;
+
+/**
+ * A base class for creating banner style ads with various height and width dimensions.
+ * <p>
+ * A subclass simply needs to specify the height and width of the ad in pixels, and this class will
+ * inflate a layout containing a programmatically rescaled {@link MoPubView} that will be used to
+ * display the ad.
+ */
+public abstract class AbstractBannerDetailFragment extends Fragment implements BannerAdListener {
+    private MoPubView mMoPubView;
+    private MoPubSampleAdUnit mMoPubSampleAdUnit;
+
+    public abstract int getWidth();
+
+    public abstract int getHeight();
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container,
+                             Bundle savedInstanceState) {
+        super.onCreateView(inflater, container, savedInstanceState);
+        final View view = inflater.inflate(R.layout.banner_detail_fragment, container, false);
+        final DetailFragmentViewHolder views = DetailFragmentViewHolder.fromView(view);
+
+        mMoPubSampleAdUnit = MoPubSampleAdUnit.fromBundle(getArguments());
+        mMoPubView = (MoPubView) view.findViewById(R.id.banner_mopubview);
+        LinearLayout.LayoutParams layoutParams =
+                (LinearLayout.LayoutParams) mMoPubView.getLayoutParams();
+        layoutParams.width = getWidth();
+        layoutParams.height = getHeight();
+        mMoPubView.setLayoutParams(layoutParams);
+
+        hideSoftKeyboard(views.mKeywordsField);
+
+        final String adUnitId = mMoPubSampleAdUnit.getAdUnitId();
+        views.mDescriptionView.setText(mMoPubSampleAdUnit.getDescription());
+        views.mAdUnitIdView.setText(adUnitId);
+        views.mLoadButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                final String keywords = views.mKeywordsField.getText().toString();
+                loadMoPubView(adUnitId, keywords);
+            }
+        });
+        mMoPubView.setBannerAdListener(this);
+        loadMoPubView(adUnitId, null);
+
+        return view;
+    }
+
+    @Override
+    public void onDestroyView() {
+        super.onDestroyView();
+
+        if (mMoPubView != null) {
+            mMoPubView.destroy();
+            mMoPubView = null;
+        }
+    }
+
+    private void loadMoPubView(final String adUnitId, final String keywords) {
+        mMoPubView.setAdUnitId(adUnitId);
+        mMoPubView.setKeywords(keywords);
+        mMoPubView.loadAd();
+    }
+
+    private String getName() {
+        if (mMoPubSampleAdUnit == null) {
+            return MoPubSampleAdUnit.AdType.BANNER.getName();
+        }
+        return mMoPubSampleAdUnit.getHeaderName();
+    }
+
+    // BannerAdListener
+    @Override
+    public void onBannerLoaded(MoPubView banner) {
+        logToast(getActivity(), getName() + " loaded.");
+    }
+
+    @Override
+    public void onBannerFailed(MoPubView banner, MoPubErrorCode errorCode) {
+        final String errorMessage = (errorCode != null) ? errorCode.toString() : "";
+        logToast(getActivity(), getName() + " failed to load: " + errorMessage);
+    }
+
+    @Override
+    public void onBannerClicked(MoPubView banner) {
+        logToast(getActivity(), getName() + " clicked.");
+    }
+
+    @Override
+    public void onBannerExpanded(MoPubView banner) {
+        logToast(getActivity(), getName() + " expanded.");
+    }
+
+    @Override
+    public void onBannerCollapsed(MoPubView banner) {
+        logToast(getActivity(), getName() + " collapsed.");
+    }
+}
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java
index d6063c29..e95f9bce 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java
@@ -8,6 +8,7 @@
 import com.mopub.common.logging.MoPubLog;
 
 import java.util.ArrayList;
+import java.util.HashSet;
 import java.util.List;
 
 import static com.mopub.simpleadsdemo.MoPubSQLiteHelper.COLUMN_AD_TYPE;
@@ -17,8 +18,17 @@
 import static com.mopub.simpleadsdemo.MoPubSQLiteHelper.COLUMN_USER_GENERATED;
 import static com.mopub.simpleadsdemo.MoPubSQLiteHelper.TABLE_AD_CONFIGURATIONS;
 import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType;
+import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.BANNER;
+import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.CUSTOM_NATIVE;
+import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.INTERSTITIAL;
+import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.LEADERBOARD;
+import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.LIST_VIEW;
+import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.MRECT;
+import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.RECYCLER_VIEW;
+import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.REWARDED_VIDEO;
 
 class AdUnitDataSource {
+    private Context mContext;
     private MoPubSQLiteHelper mDatabaseHelper;
     private String[] mAllColumns = {
             COLUMN_ID,
@@ -29,23 +39,41 @@
     };
 
     AdUnitDataSource(final Context context) {
+        mContext = context.getApplicationContext();
         mDatabaseHelper = new MoPubSQLiteHelper(context);
+        populateDefaultSampleAdUnits();
+    }
+
+    MoPubSampleAdUnit createDefaultSampleAdUnit(final MoPubSampleAdUnit sampleAdUnit) {
+        return createSampleAdUnit(sampleAdUnit, false);
     }
 
     MoPubSampleAdUnit createSampleAdUnit(final MoPubSampleAdUnit sampleAdUnit) {
+        return createSampleAdUnit(sampleAdUnit, true);
+    }
+
+    private MoPubSampleAdUnit createSampleAdUnit(final MoPubSampleAdUnit sampleAdUnit,
+                                                 final boolean isUserGenerated) {
         final ContentValues values = new ContentValues();
+        final int userGenerated = isUserGenerated ? 1 : 0;
         values.put(COLUMN_AD_UNIT_ID, sampleAdUnit.getAdUnitId());
         values.put(COLUMN_DESCRIPTION, sampleAdUnit.getDescription());
-        values.put(COLUMN_USER_GENERATED, 1);
+        values.put(COLUMN_USER_GENERATED, userGenerated);
         values.put(COLUMN_AD_TYPE, sampleAdUnit.getFragmentClassName());
+
         final SQLiteDatabase database = mDatabaseHelper.getWritableDatabase();
         final long insertId = database.insert(TABLE_AD_CONFIGURATIONS, null, values);
         final Cursor cursor = database.query(TABLE_AD_CONFIGURATIONS, mAllColumns,
                 COLUMN_ID + " = " + insertId, null, null, null, null);
         cursor.moveToFirst();
+
         final MoPubSampleAdUnit newAdConfiguration = cursorToAdConfiguration(cursor);
         cursor.close();
         database.close();
+
+        if (newAdConfiguration != null) {
+            MoPubLog.d("Ad configuration added with id: " + newAdConfiguration.getId());
+        }
         return newAdConfiguration;
     }
 
@@ -58,8 +86,7 @@ void deleteSampleAdUnit(final MoPubSampleAdUnit adConfiguration) {
     }
 
     List<MoPubSampleAdUnit> getAllAdUnits() {
-        final List<MoPubSampleAdUnit> adConfigurations =
-                new ArrayList<MoPubSampleAdUnit>();
+        final List<MoPubSampleAdUnit> adConfigurations = new ArrayList<>();
         SQLiteDatabase database = mDatabaseHelper.getReadableDatabase();
         final Cursor cursor = database.query(TABLE_AD_CONFIGURATIONS,
                 mAllColumns, null, null, null, null, null);
@@ -76,6 +103,65 @@ void deleteSampleAdUnit(final MoPubSampleAdUnit adConfiguration) {
         return adConfigurations;
     }
 
+    List<MoPubSampleAdUnit> getDefaultAdUnits() {
+        final List<MoPubSampleAdUnit> adUnitList = new ArrayList<>();
+        adUnitList.add(
+                new MoPubSampleAdUnit
+                        .Builder(mContext.getString(R.string.ad_unit_id_banner), BANNER)
+                        .description("MoPub Banner Sample")
+                        .build());
+        adUnitList.add(
+                new MoPubSampleAdUnit
+                        .Builder(mContext.getString(R.string.ad_unit_id_mrect), MRECT)
+                        .description("MoPub Mrect Sample")
+                        .build());
+        adUnitList.add(
+                new MoPubSampleAdUnit
+                        .Builder(mContext.getString(R.string.ad_unit_id_leaderboard), LEADERBOARD)
+                        .description("MoPub Leaderboard Sample")
+                        .build());
+        adUnitList.add(
+                new MoPubSampleAdUnit
+                        .Builder(mContext.getString(R.string.ad_unit_id_interstitial), INTERSTITIAL)
+                        .description("MoPub Interstitial Sample")
+                        .build());
+        adUnitList.add(
+                new MoPubSampleAdUnit
+                        .Builder(mContext.getString(R.string.ad_unit_id_rewarded_video),
+                        REWARDED_VIDEO)
+                        .description("MoPub Rewarded Video Sample")
+                        .build());
+        adUnitList.add(
+                new MoPubSampleAdUnit
+                        .Builder(mContext.getString(R.string.ad_unit_id_native), LIST_VIEW)
+                        .description("MoPub Ad Placer Sample")
+                        .build());
+        adUnitList.add(
+                new MoPubSampleAdUnit
+                        .Builder(mContext.getString(R.string.ad_unit_id_native), RECYCLER_VIEW)
+                        .description("MoPub Recycler View Sample")
+                        .build());
+        adUnitList.add(
+                new MoPubSampleAdUnit
+                        .Builder(mContext.getString(R.string.ad_unit_id_native), CUSTOM_NATIVE)
+                        .description("MoPub View Pager Sample")
+                        .build());
+        return adUnitList;
+    }
+
+    private void populateDefaultSampleAdUnits() {
+        final HashSet<MoPubSampleAdUnit> allAdUnits = new HashSet<>();
+        for (final MoPubSampleAdUnit adUnit : getAllAdUnits()) {
+            allAdUnits.add(adUnit);
+        }
+
+        for (final MoPubSampleAdUnit defaultAdUnit : getDefaultAdUnits()) {
+            if (!allAdUnits.contains(defaultAdUnit)) {
+                createDefaultSampleAdUnit(defaultAdUnit);
+            }
+        }
+    }
+
     private MoPubSampleAdUnit cursorToAdConfiguration(final Cursor cursor) {
         final long id = cursor.getLong(0);
         final String adUnitId = cursor.getString(1);
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/BannerDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/BannerDetailFragment.java
index a02dd1a1..f083f921 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/BannerDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/BannerDetailFragment.java
@@ -1,87 +1,14 @@
 package com.mopub.simpleadsdemo;
 
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-
-import com.mopub.mobileads.MoPubErrorCode;
-import com.mopub.mobileads.MoPubView;
-
-import static com.mopub.mobileads.MoPubView.BannerAdListener;
-import static com.mopub.simpleadsdemo.Utils.hideSoftKeyboard;
-import static com.mopub.simpleadsdemo.Utils.logToast;
-
-public class BannerDetailFragment extends Fragment implements BannerAdListener {
-    private MoPubView mMoPubView;
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-        super.onCreateView(inflater, container, savedInstanceState);
-        final MoPubSampleAdUnit adConfiguration =
-                MoPubSampleAdUnit.fromBundle(getArguments());
-        final View view = inflater.inflate(R.layout.banner_detail_fragment, container, false);
-        final DetailFragmentViewHolder views = DetailFragmentViewHolder.fromView(view);
-        mMoPubView = (MoPubView) view.findViewById(R.id.banner_mopubview);
-        hideSoftKeyboard(views.mKeywordsField);
-
-        final String adUnitId = adConfiguration.getAdUnitId();
-        views.mDescriptionView.setText(adConfiguration.getDescription());
-        views.mAdUnitIdView.setText(adUnitId);
-        views.mLoadButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                final String keywords = views.mKeywordsField.getText().toString();
-                loadMoPubView(adUnitId, keywords);
-            }
-        });
-        mMoPubView.setBannerAdListener(this);
-        loadMoPubView(adUnitId, null);
-
-        return view;
-    }
-
-    @Override
-    public void onDestroyView() {
-        super.onDestroyView();
-
-        if (mMoPubView != null) {
-            mMoPubView.destroy();
-            mMoPubView = null;
-        }
-    }
-
-    private void loadMoPubView(final String adUnitId, final String keywords) {
-        mMoPubView.setAdUnitId(adUnitId);
-        mMoPubView.setKeywords(keywords);
-        mMoPubView.loadAd();
-    }
-
-    // BannerAdListener
-    @Override
-    public void onBannerLoaded(MoPubView banner) {
-        logToast(getActivity(), "Banner loaded.");
-    }
-
-    @Override
-    public void onBannerFailed(MoPubView banner, MoPubErrorCode errorCode) {
-        final String errorMessage = (errorCode != null) ? errorCode.toString() : "";
-        logToast(getActivity(), "Banner failed to load: " + errorMessage);
-    }
-
-    @Override
-    public void onBannerClicked(MoPubView banner) {
-        logToast(getActivity(), "Banner clicked.");
-    }
+public class BannerDetailFragment extends AbstractBannerDetailFragment {
 
     @Override
-    public void onBannerExpanded(MoPubView banner) {
-        logToast(getActivity(), "Banner expanded.");
+    public int getWidth() {
+        return (int) getResources().getDimension(R.dimen.banner_width);
     }
 
     @Override
-    public void onBannerCollapsed(MoPubView banner) {
-        logToast(getActivity(), "Banner collapsed.");
+    public int getHeight() {
+        return (int) getResources().getDimension(R.dimen.banner_height);
     }
 }
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LeaderboardDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LeaderboardDetailFragment.java
new file mode 100644
index 00000000..c0c000f0
--- /dev/null
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LeaderboardDetailFragment.java
@@ -0,0 +1,14 @@
+package com.mopub.simpleadsdemo;
+
+public class LeaderboardDetailFragment extends AbstractBannerDetailFragment {
+
+    @Override
+    public int getWidth() {
+        return (int) getResources().getDimension(R.dimen.leaderboard_width);
+    }
+
+    @Override
+    public int getHeight() {
+        return (int) getResources().getDimension(R.dimen.leaderboard_height);
+    }
+}
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LoggingUtils.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LoggingUtils.java
index 22aa7e69..c39e77f5 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LoggingUtils.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LoggingUtils.java
@@ -67,7 +67,7 @@ public void publish(final LogRecord logRecord) {
             if (MoPubErrorCode.WARMUP.toString().equals(logRecord.getMessage())) {
                 Utils.logToast(mContext, MoPubErrorCode.WARMUP.toString());
             }
-            // Toasts the no connection message if a native response failed due to no internet
+            // Toasts the no connection message if a native ad failed due to no internet
             if (MoPubErrorCode.NO_CONNECTION.toString().equals(logRecord.getMessage())) {
                 Utils.logToast(mContext, MoPubErrorCode.NO_CONNECTION.toString());
             }
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSQLiteHelper.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSQLiteHelper.java
index af774f91..3f3efa4a 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSQLiteHelper.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSQLiteHelper.java
@@ -1,21 +1,10 @@
 package com.mopub.simpleadsdemo;
 
-import android.content.ContentValues;
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteOpenHelper;
 import android.util.Log;
 
-import java.util.ArrayList;
-import java.util.List;
-
-import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.BANNER;
-import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.CUSTOM_NATIVE;
-import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.INTERSTITIAL;
-import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.LIST_VIEW;
-import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.RECYCLER_VIEW;
-import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType.MRECT;
-
 class MoPubSQLiteHelper extends SQLiteOpenHelper {
     public static final String TABLE_AD_CONFIGURATIONS = "adConfigurations";
     public static final String COLUMN_ID = "_id";
@@ -36,65 +25,13 @@
             + COLUMN_AD_TYPE + " text not null"
             + ");";
 
-    private final Context mContext;
-
     public MoPubSQLiteHelper(final Context context) {
         super(context, DATABASE_NAME, null, DATABASE_VERSION);
-        mContext = context.getApplicationContext();
     }
 
     @Override
     public void onCreate(SQLiteDatabase sqLiteDatabase) {
-        // Built-in sample ad units.
-        final List<MoPubSampleAdUnit> adUnitList = new ArrayList<MoPubSampleAdUnit>();
-        adUnitList.add(
-                new MoPubSampleAdUnit
-                        .Builder(mContext.getString(R.string.ad_unit_id_banner), BANNER)
-                        .description("MoPub Banner Sample")
-                        .build());
-
-        adUnitList.add(
-                new MoPubSampleAdUnit
-                        .Builder(mContext.getString(R.string.ad_unit_id_mrect), MRECT)
-                        .description("MoPub Mrect Sample")
-                        .build());
-
-        adUnitList.add(
-                new MoPubSampleAdUnit
-                        .Builder(mContext.getString(R.string.ad_unit_id_interstitial), INTERSTITIAL)
-                        .description("MoPub Interstitial Sample")
-                        .build());
-
-        adUnitList.add(
-                new MoPubSampleAdUnit
-                        .Builder(mContext.getString(R.string.ad_unit_id_native), LIST_VIEW)
-                        .description("MoPub Ad Placer Sample")
-                        .build());
-        adUnitList.add(
-                new MoPubSampleAdUnit
-                        .Builder(mContext.getString(R.string.ad_unit_id_native), RECYCLER_VIEW)
-                        .description("MoPub Recycler View Sample")
-                        .build());
-        adUnitList.add(
-                new MoPubSampleAdUnit
-                        .Builder(mContext.getString(R.string.ad_unit_id_native), CUSTOM_NATIVE)
-                        .description("MoPub View Pager Sample")
-                        .build());
         sqLiteDatabase.execSQL(DATABASE_CREATE);
-        sqLiteDatabase.beginTransaction();
-
-        // Populate the MoPub built-in samples.
-        for (final MoPubSampleAdUnit adUnit : adUnitList) {
-            final ContentValues values = new ContentValues();
-            values.put(COLUMN_AD_UNIT_ID, adUnit.getAdUnitId());
-            values.put(COLUMN_DESCRIPTION, adUnit.getDescription());
-            values.put(COLUMN_USER_GENERATED, 0);
-            values.put(COLUMN_AD_TYPE, adUnit.getFragmentClassName());
-
-            sqLiteDatabase.insert(TABLE_AD_CONFIGURATIONS, null, values);
-        }
-        sqLiteDatabase.setTransactionSuccessful();
-        sqLiteDatabase.endTransaction();
     }
 
     @Override
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java
index 8322b4ac..fc175ea0 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java
@@ -3,14 +3,27 @@
 import android.annotation.TargetApi;
 import android.os.Build;
 import android.os.Bundle;
+import android.support.v4.app.ActivityCompat;
 import android.support.v4.app.FragmentActivity;
 import android.support.v4.app.FragmentManager;
 import android.webkit.WebView;
 
 import com.mopub.common.MoPub;
+import com.mopub.common.util.DeviceUtils;
 
+import java.util.ArrayList;
+import java.util.List;
+
+import static android.Manifest.permission.ACCESS_COARSE_LOCATION;
+import static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;
+import static com.mopub.common.Constants.UNUSED_REQUEST_CODE;
 
 public class MoPubSampleActivity extends FragmentActivity {
+    private static final List<String> REQUIRED_DANGEROUS_PERMISSIONS = new ArrayList<String>();
+    static {
+        REQUIRED_DANGEROUS_PERMISSIONS.add(ACCESS_COARSE_LOCATION);
+        REQUIRED_DANGEROUS_PERMISSIONS.add(WRITE_EXTERNAL_STORAGE);
+    }
 
     // Sample app web views are debuggable.
     static {
@@ -33,6 +46,19 @@ protected void onCreate(Bundle savedInstanceState) {
             return;
         }
 
+        List<String> permissionsToBeRequested = new ArrayList<String>();
+        for (String permission : REQUIRED_DANGEROUS_PERMISSIONS) {
+            if (!DeviceUtils.isPermissionGranted(this, permission)) {
+                permissionsToBeRequested.add(permission);
+            }
+        }
+
+        // Request dangerous permissions
+        if (!permissionsToBeRequested.isEmpty()) {
+            ActivityCompat.requestPermissions(this, permissionsToBeRequested.toArray(
+                    new String[permissionsToBeRequested.size()]), UNUSED_REQUEST_CODE);
+        }
+
         // Set location awareness and precision globally for your app:
         MoPub.setLocationAwareness(MoPub.LocationAwareness.TRUNCATED);
         MoPub.setLocationPrecision(4);
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
index 724656ff..f6573175 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
@@ -18,6 +18,8 @@
     enum AdType {
         BANNER("Banner", BannerDetailFragment.class),
         MRECT("Mrect", MrectDetailFragment.class),
+        LEADERBOARD("Leaderboard", LeaderboardDetailFragment.class),
+        SKYSCRAPER("Skyscraper", SkyscraperDetailFragment.class),
         INTERSTITIAL("Interstitial", InterstitialDetailFragment.class),
         REWARDED_VIDEO("Rewarded Video", RewardedVideoDetailFragment.class),
         LIST_VIEW("Native List View", NativeListViewFragment.class),
@@ -31,7 +33,7 @@ String getName() {
         private final String name;
         private final Class<? extends Fragment> fragmentClass;
 
-        private AdType(final String name, final Class<? extends Fragment> fragmentClass) {
+        AdType(final String name, final Class<? extends Fragment> fragmentClass) {
             this.name = name;
             this.fragmentClass = fragmentClass;
         }
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MrectDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MrectDetailFragment.java
index 2ae93318..2f15a7fa 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MrectDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MrectDetailFragment.java
@@ -1,87 +1,14 @@
 package com.mopub.simpleadsdemo;
 
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-
-import com.mopub.mobileads.MoPubErrorCode;
-import com.mopub.mobileads.MoPubView;
-
-import static com.mopub.mobileads.MoPubView.BannerAdListener;
-import static com.mopub.simpleadsdemo.Utils.hideSoftKeyboard;
-import static com.mopub.simpleadsdemo.Utils.logToast;
-
-public class MrectDetailFragment extends Fragment implements BannerAdListener {
-    private MoPubView mMoPubView;
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-        super.onCreateView(inflater, container, savedInstanceState);
-
-        final MoPubSampleAdUnit adConfiguration =
-                MoPubSampleAdUnit.fromBundle(getArguments());
-        final View view = inflater.inflate(R.layout.mrect_detail_fragment, container, false);
-        final DetailFragmentViewHolder views = DetailFragmentViewHolder.fromView(view);
-        hideSoftKeyboard(views.mKeywordsField);
-        mMoPubView = (MoPubView) view.findViewById(R.id.mrect_mopubview);
-        final String adUnitId = adConfiguration.getAdUnitId();
-        views.mDescriptionView.setText(adConfiguration.getDescription());
-        views.mAdUnitIdView.setText(adUnitId);
-        views.mLoadButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                final String keywords = views.mKeywordsField.getText().toString();
-                loadMoPubView(adUnitId, keywords);
-            }
-        });
-        mMoPubView.setBannerAdListener(this);
-        loadMoPubView(adUnitId, null);
-
-        return view;
-    }
-
-    @Override
-    public void onDestroyView() {
-        super.onDestroyView();
-
-        if (mMoPubView != null) {
-            mMoPubView.destroy();
-            mMoPubView = null;
-        }
-    }
-
-    private void loadMoPubView(final String adUnitId, final String keywords) {
-        mMoPubView.setAdUnitId(adUnitId);
-        mMoPubView.setKeywords(keywords);
-        mMoPubView.loadAd();
-    }
-
-    // BannerAdListener
-    @Override
-    public void onBannerLoaded(MoPubView banner) {
-        logToast(getActivity(), "Mrect loaded.");
-    }
-
-    @Override
-    public void onBannerFailed(MoPubView banner, MoPubErrorCode errorCode) {
-        final String errorMessage = (errorCode != null) ? errorCode.toString() : "";
-        logToast(getActivity(), "Mrect failed to load: " + errorMessage);
-    }
-
-    @Override
-    public void onBannerClicked(MoPubView banner) {
-        logToast(getActivity(), "Mrect clicked.");
-    }
+public class MrectDetailFragment extends AbstractBannerDetailFragment {
 
     @Override
-    public void onBannerExpanded(MoPubView banner) {
-        logToast(getActivity(), "Mrect expanded.");
+    public int getWidth() {
+        return (int) getResources().getDimension(R.dimen.mrect_width);
     }
 
     @Override
-    public void onBannerCollapsed(MoPubView banner) {
-        logToast(getActivity(), "Mrect collapsed.");
+    public int getHeight() {
+        return (int) getResources().getDimension(R.dimen.mrect_height);
     }
 }
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java
index 42b2ba38..b7141689 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java
@@ -12,9 +12,11 @@
 import android.view.ViewGroup;
 import android.widget.TextView;
 
+import com.mopub.nativeads.MediaViewBinder;
 import com.mopub.nativeads.MoPubNativeAdLoadedListener;
-import com.mopub.nativeads.MoPubNativeAdRenderer;
+import com.mopub.nativeads.MoPubStaticNativeAdRenderer;
 import com.mopub.nativeads.MoPubStreamAdPlacer;
+import com.mopub.nativeads.MoPubVideoNativeAdRenderer;
 import com.mopub.nativeads.RequestParameters;
 import com.mopub.nativeads.ViewBinder;
 
@@ -69,20 +71,36 @@ public void onClick(View view) {
         views.mAdUnitIdView.setText(adUnitId);
         mViewPager = (ViewPager) view.findViewById(R.id.gallery_pager);
 
-        // This ad placer is used to automatically insert ads into the ViewPager.
-        mStreamAdPlacer = new MoPubStreamAdPlacer(getActivity());
-        final MoPubNativeAdRenderer adRenderer = new MoPubNativeAdRenderer(
+        // Set up a renderer for a static native ad.
+        final MoPubStaticNativeAdRenderer moPubStaticNativeAdRenderer = new MoPubStaticNativeAdRenderer(
                 new ViewBinder.Builder(R.layout.native_ad_list_item)
                         .titleId(R.id.native_title)
                         .textId(R.id.native_text)
                         .mainImageId(R.id.native_main_image)
                         .iconImageId(R.id.native_icon_image)
                         .callToActionId(R.id.native_cta)
+                        .privacyInformationIconImageId(R.id.native_privacy_information_icon_image)
                         .build()
         );
-        mPagerAdapter = new CustomPagerAdapter(getChildFragmentManager(), mStreamAdPlacer);
-        mStreamAdPlacer.registerAdRenderer(adRenderer);
+
+        // Set up a renderer for a video native ad.
+        final MoPubVideoNativeAdRenderer moPubVideoNativeAdRenderer = new MoPubVideoNativeAdRenderer(
+                new MediaViewBinder.Builder(R.layout.video_ad_list_item)
+                        .titleId(R.id.native_title)
+                        .textId(R.id.native_text)
+                        .mediaLayoutId(R.id.native_media_layout)
+                        .iconImageId(R.id.native_icon_image)
+                        .callToActionId(R.id.native_cta)
+                        .privacyInformationIconImageId(R.id.native_privacy_information_icon_image)
+                        .build());
+
+        // This ad placer is used to automatically insert ads into the ViewPager.
+        mStreamAdPlacer = new MoPubStreamAdPlacer(getActivity());
+        mStreamAdPlacer.registerAdRenderer(moPubStaticNativeAdRenderer);
+        mStreamAdPlacer.registerAdRenderer(moPubVideoNativeAdRenderer);
         mStreamAdPlacer.setAdLoadedListener(this);
+
+        mPagerAdapter = new CustomPagerAdapter(getChildFragmentManager(), mStreamAdPlacer);
         mViewPager.setAdapter(mPagerAdapter);
 
         return view;
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java
index 5c48fe32..b0e6cc5e 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java
@@ -9,13 +9,16 @@
 import android.widget.ArrayAdapter;
 import android.widget.ListView;
 
+import com.mopub.nativeads.MediaViewBinder;
 import com.mopub.nativeads.MoPubAdAdapter;
-import com.mopub.nativeads.MoPubNativeAdRenderer;
+import com.mopub.nativeads.MoPubStaticNativeAdRenderer;
+import com.mopub.nativeads.MoPubVideoNativeAdRenderer;
 import com.mopub.nativeads.RequestParameters;
 import com.mopub.nativeads.ViewBinder;
 
 import java.util.EnumSet;
 
+import static com.mopub.nativeads.MoPubNativeAdPositioning.MoPubServerPositioning;
 import static com.mopub.nativeads.RequestParameters.NativeAdAsset;
 
 public class NativeListViewFragment extends Fragment {
@@ -70,21 +73,37 @@ public void onClick(View view) {
 
         // Create an ad adapter that gets its positioning information from the MoPub Ad Server.
         // This adapter will be used in place of the original adapter for the ListView.
-        mAdAdapter = new MoPubAdAdapter(getActivity(), adapter);
+        mAdAdapter = new MoPubAdAdapter(getActivity(), adapter, new MoPubServerPositioning());
 
-        // Set up an renderer that knows how to put ad data in an ad view.
-        final MoPubNativeAdRenderer adRenderer = new MoPubNativeAdRenderer(
+        // Set up a renderer that knows how to put ad data in your custom native view.
+        final MoPubStaticNativeAdRenderer staticAdRender = new MoPubStaticNativeAdRenderer(
                 new ViewBinder.Builder(R.layout.native_ad_list_item)
                         .titleId(R.id.native_title)
                         .textId(R.id.native_text)
                         .mainImageId(R.id.native_main_image)
                         .iconImageId(R.id.native_icon_image)
                         .callToActionId(R.id.native_cta)
+                        .privacyInformationIconImageId(R.id.native_privacy_information_icon_image)
                         .build());
 
-        // Register the renderer with the MoPubAdAdapter and then set the adapter on the ListView.
-        mAdAdapter.registerAdRenderer(adRenderer);
+        // Set up a renderer for a video native ad.
+        final MoPubVideoNativeAdRenderer videoAdRenderer = new MoPubVideoNativeAdRenderer(
+                new MediaViewBinder.Builder(R.layout.video_ad_list_item)
+                        .titleId(R.id.native_title)
+                        .textId(R.id.native_text)
+                        .mediaLayoutId(R.id.native_media_layout)
+                        .iconImageId(R.id.native_icon_image)
+                        .callToActionId(R.id.native_cta)
+                        .privacyInformationIconImageId(R.id.native_privacy_information_icon_image)
+                        .build());
+
+
+        // Register the renderers with the MoPubAdAdapter and then set the adapter on the ListView.
+        mAdAdapter.registerAdRenderer(videoAdRenderer);
+        mAdAdapter.registerAdRenderer(staticAdRender);
         listView.setAdapter(mAdAdapter);
+
+        mAdAdapter.loadAds(mAdConfiguration.getAdUnitId(), mRequestParameters);
         return view;
     }
 
@@ -94,11 +113,4 @@ public void onDestroyView() {
         mAdAdapter.destroy();
         super.onDestroyView();
     }
-
-    @Override
-    public void onResume() {
-        // MoPub recommends loading knew ads when the user returns to your activity.
-        mAdAdapter.loadAds(mAdConfiguration.getAdUnitId(), mRequestParameters);
-        super.onResume();
-    }
 }
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java
index 29feeac4..472a5648 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java
@@ -14,8 +14,11 @@
 import android.widget.Button;
 import android.widget.TextView;
 
+import com.mopub.nativeads.MediaViewBinder;
 import com.mopub.nativeads.MoPubNativeAdPositioning;
+import com.mopub.nativeads.MoPubStaticNativeAdRenderer;
 import com.mopub.nativeads.MoPubRecyclerAdapter;
+import com.mopub.nativeads.MoPubVideoNativeAdRenderer;
 import com.mopub.nativeads.RequestParameters;
 import com.mopub.nativeads.ViewBinder;
 
@@ -26,7 +29,7 @@
     private MoPubRecyclerAdapter mRecyclerAdapter;
     private MoPubSampleAdUnit mAdConfiguration;
     private RequestParameters mRequestParameters;
-    private enum LayoutType { LINEAR, GRID };
+    private enum LayoutType { LINEAR, GRID }
     private LayoutType mLayoutType;
     private RecyclerView mRecyclerView;
 
@@ -82,13 +85,31 @@ public void onClick(final View v) {
 
         mRecyclerAdapter = new MoPubRecyclerAdapter(getActivity(), originalAdapter,
                 new MoPubNativeAdPositioning.MoPubServerPositioning());
-        mRecyclerAdapter.registerViewBinder(new ViewBinder.Builder(R.layout.native_ad_list_item)
-                .titleId(R.id.native_title)
-                .textId(R.id.native_text)
-                .mainImageId(R.id.native_main_image)
-                .iconImageId(R.id.native_icon_image)
-                .callToActionId(R.id.native_cta)
-                .build());
+
+        MoPubStaticNativeAdRenderer moPubStaticNativeAdRenderer = new MoPubStaticNativeAdRenderer(
+                new ViewBinder.Builder(R.layout.native_ad_list_item)
+                        .titleId(R.id.native_title)
+                        .textId(R.id.native_text)
+                        .mainImageId(R.id.native_main_image)
+                        .iconImageId(R.id.native_icon_image)
+                        .callToActionId(R.id.native_cta)
+                        .privacyInformationIconImageId(R.id.native_privacy_information_icon_image)
+                        .build()
+        );
+
+        // Set up a renderer for a video native ad.
+        MoPubVideoNativeAdRenderer moPubVideoNativeAdRenderer = new MoPubVideoNativeAdRenderer(
+                new MediaViewBinder.Builder(R.layout.video_ad_list_item)
+                        .titleId(R.id.native_title)
+                        .textId(R.id.native_text)
+                        .mediaLayoutId(R.id.native_media_layout)
+                        .iconImageId(R.id.native_icon_image)
+                        .callToActionId(R.id.native_cta)
+                        .privacyInformationIconImageId(R.id.native_privacy_information_icon_image)
+                        .build());
+
+        mRecyclerAdapter.registerAdRenderer(moPubStaticNativeAdRenderer);
+        mRecyclerAdapter.registerAdRenderer(moPubVideoNativeAdRenderer);
 
         mRecyclerView.setAdapter(mRecyclerAdapter);
         mRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
index 16eaed98..19e7825b 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
@@ -2,6 +2,7 @@
 
 import android.os.Bundle;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.support.v4.app.Fragment;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -12,6 +13,7 @@
 import com.mopub.common.MoPubReward;
 import com.mopub.mobileads.MoPubErrorCode;
 import com.mopub.mobileads.MoPubRewardedVideoListener;
+import com.mopub.mobileads.MoPubRewardedVideoManager.RequestParameters;
 
 import java.util.Locale;
 import java.util.Set;
@@ -21,8 +23,11 @@
 
 public class RewardedVideoDetailFragment extends Fragment implements MoPubRewardedVideoListener {
 
-    private Button mShowButton;
-    private static boolean rewardedVideoInitialized;
+    private static boolean sRewardedVideoInitialized;
+
+    @Nullable private Button mShowButton;
+    @Nullable private String mAdUnitId;
+
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
         super.onCreateView(inflater, container, savedInstanceState);
@@ -32,20 +37,27 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
         final DetailFragmentViewHolder views = DetailFragmentViewHolder.fromView(view);
         hideSoftKeyboard(views.mKeywordsField);
 
-        if (!rewardedVideoInitialized) {
+        if (!sRewardedVideoInitialized) {
             MoPub.initializeRewardedVideo(getActivity());
-            rewardedVideoInitialized = true;
+            sRewardedVideoInitialized = true;
         }
         MoPub.setRewardedVideoListener(this);
 
-        final String adUnitId = adConfiguration.getAdUnitId();
+        mAdUnitId = adConfiguration.getAdUnitId();
         views.mDescriptionView.setText(adConfiguration.getDescription());
-        views.mAdUnitIdView.setText(adUnitId);
+        views.mAdUnitIdView.setText(mAdUnitId);
         views.mLoadButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
-                MoPub.loadRewardedVideo(adUnitId);
-                mShowButton.setEnabled(false);
+                if (mAdUnitId == null) {
+                    return;
+                }
+                MoPub.loadRewardedVideo(mAdUnitId,
+                        new RequestParameters(views.mKeywordsField.getText().toString(), null,
+                                "sample_app_customer_id"));
+                if (mShowButton != null) {
+                    mShowButton.setEnabled(false);
+                }
             }
         });
         mShowButton = (Button) view.findViewById(R.id.interstitial_show_button);
@@ -53,7 +65,10 @@ public void onClick(View view) {
         mShowButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
-                MoPub.showRewardedVideo(adUnitId);
+                if (mAdUnitId == null) {
+                    return;
+                }
+                MoPub.showRewardedVideo(mAdUnitId);
             }
         });
 
@@ -68,40 +83,65 @@ public void onDestroyView() {
     // MoPubRewardedVideoListener implementation
     @Override
     public void onRewardedVideoLoadSuccess(@NonNull final String adUnitId) {
-        mShowButton.setEnabled(true);
-        logToast(getActivity(), "Rewarded video loaded.");
+        if (adUnitId.equals(mAdUnitId)) {
+            if (mShowButton != null) {
+                mShowButton.setEnabled(true);
+            }
+            logToast(getActivity(), "Rewarded video loaded.");
+        }
     }
 
     @Override
     public void onRewardedVideoLoadFailure(@NonNull final String adUnitId, @NonNull final MoPubErrorCode errorCode) {
-        mShowButton.setEnabled(false);
-        logToast(getActivity(), String.format(Locale.US, "Rewarded video failed to load: %s", errorCode.toString()));
+        if (adUnitId.equals(mAdUnitId)) {
+            if (mShowButton != null) {
+                mShowButton.setEnabled(false);
+            }
+            logToast(getActivity(), String.format(Locale.US, "Rewarded video failed to load: %s",
+                    errorCode.toString()));
+        }
     }
 
     @Override
     public void onRewardedVideoStarted(@NonNull final String adUnitId) {
-        logToast(getActivity(), "Rewarded video started.");
-        mShowButton.setEnabled(false);
+        if (adUnitId.equals(mAdUnitId)) {
+            logToast(getActivity(), "Rewarded video started.");
+            if (mShowButton != null) {
+                mShowButton.setEnabled(false);
+            }
+        }
     }
 
     @Override
     public void onRewardedVideoPlaybackError(@NonNull final String adUnitId, @NonNull final MoPubErrorCode errorCode) {
-        logToast(getActivity(), String.format(Locale.US, "Rewarded video playback error: %s", errorCode.toString()));
-        mShowButton.setEnabled(false);
+        if (adUnitId.equals(mAdUnitId)) {
+            logToast(getActivity(), String.format(Locale.US, "Rewarded video playback error: %s",
+                    errorCode.toString()));
+            if (mShowButton != null) {
+                mShowButton.setEnabled(false);
+            }
+        }
     }
 
     @Override
     public void onRewardedVideoClosed(@NonNull final String adUnitId) {
-        logToast(getActivity(), "Rewarded video closed.");
-        mShowButton.setEnabled(false);
+        if (adUnitId.equals(mAdUnitId)) {
+            logToast(getActivity(), "Rewarded video closed.");
+            if (mShowButton != null) {
+                mShowButton.setEnabled(false);
+            }
+        }
     }
 
     @Override
-    public void onRewardedVideoCompleted(@NonNull final Set<String> adUnitIds, @NonNull final MoPubReward reward) {
-        logToast(getActivity(),
-                String.format(Locale.US,
-                        "Rewarded video completed with reward  \"%d %s\"",
-                        reward.getAmount(),
-                        reward.getLabel()));
+    public void onRewardedVideoCompleted(@NonNull final Set<String> adUnitIds,
+            @NonNull final MoPubReward reward) {
+        if (adUnitIds.contains(mAdUnitId)) {
+            logToast(getActivity(),
+                    String.format(Locale.US,
+                            "Rewarded video completed with reward  \"%d %s\"",
+                            reward.getAmount(),
+                            reward.getLabel()));
+        }
     }
 }
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/SkyscraperDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/SkyscraperDetailFragment.java
new file mode 100644
index 00000000..0a715bbe
--- /dev/null
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/SkyscraperDetailFragment.java
@@ -0,0 +1,14 @@
+package com.mopub.simpleadsdemo;
+
+public class SkyscraperDetailFragment extends AbstractBannerDetailFragment {
+
+    @Override
+    public int getWidth() {
+        return (int) getResources().getDimension(R.dimen.skyscraper_width);
+    }
+
+    @Override
+    public int getHeight() {
+        return (int) getResources().getDimension(R.dimen.skyscraper_height);
+    }
+}
diff --git a/mopub-sample/src/test/resources/org.robolectric.Config.properties b/mopub-sample/src/test/resources/robolectric.properties
similarity index 100%
rename from mopub-sample/src/test/resources/org.robolectric.Config.properties
rename to mopub-sample/src/test/resources/robolectric.properties
diff --git a/mopub-sdk/AndroidManifest.xml b/mopub-sdk/AndroidManifest.xml
index 42216cc5..144e231e 100644
--- a/mopub-sdk/AndroidManifest.xml
+++ b/mopub-sdk/AndroidManifest.xml
@@ -5,7 +5,7 @@
     android:versionName="1.0">
     <uses-sdk
         android:minSdkVersion="9"
-        android:targetSdkVersion="22"/>
+        android:targetSdkVersion="23"/>
     <application/>
 </manifest>
 
diff --git a/mopub-sdk/build.gradle b/mopub-sdk/build.gradle
index aa1b028a..ed5c8637 100644
--- a/mopub-sdk/build.gradle
+++ b/mopub-sdk/build.gradle
@@ -7,9 +7,8 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:1.2.3'
+        classpath 'com.android.tools.build:gradle:1.3.1'
         classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
-        classpath 'org.robolectric:robolectric-gradle-plugin:1.1.0'
     }
 }
 
@@ -20,11 +19,17 @@ plugins {
 repositories {
     mavenCentral()
     jcenter()
+    flatDir {
+         dirs '../libs'
+    }
+}
+
+configurations {
+    javadocDeps
 }
 
 apply plugin: 'com.android.library'
 apply plugin: 'com.github.dcendents.android-maven'
-apply plugin: 'org.robolectric'
 
 task wrapper(type: Wrapper) {
     gradleVersion = '2.5'
@@ -32,14 +37,16 @@ task wrapper(type: Wrapper) {
 
 group = 'com.mopub'
 description = '''MoPub Android SDK'''
-version = '3.10.0'
+version = '4.7.1'
 
 android {
-    compileSdkVersion 22
-    buildToolsVersion '22.0.1'
+    compileSdkVersion 23
+    buildToolsVersion '23.0.2'
+    lintOptions { abortOnError false }
+    useLibrary 'org.apache.http.legacy'
 
     defaultConfig {
-        versionCode 27
+        versionCode 42
         versionName version
         minSdkVersion 14
         targetSdkVersion 22
@@ -90,14 +97,24 @@ android {
 
 
 dependencies {
-    compile 'com.android.support:support-v4:22.2.1'
-    compile 'com.android.support:support-annotations:22.2.1'
-    compile 'com.android.support:recyclerview-v7:22.2.1'
+    compile 'com.android.support:support-v4:23.4.0'
+    compile 'com.android.support:support-annotations:23.4.0'
+    compile 'com.android.support:recyclerview-v7:23.4.0'
     compile fileTree(dir: 'libs', include: 'amazon-ads-5.6.20.jar')
     compile 'com.mopub.volley:mopub-volley:1.1.0'
+    compile 'com.google.android.exoplayer:exoplayer:r1.5.6'
+    // anchor: additional dependencies
+
+    javadocDeps 'com.google.android.exoplayer:exoplayer:r1.5.6:sources'
+    javadocDeps 'com.mopub.volley:mopub-volley:1.1.0:sources'
+    javadocDeps 'com.android.support:support-v4:23.1.1:sources'
+    javadocDeps 'com.android.support:support-annotations:23.1.1:sources'
+    javadocDeps 'com.android.support:recyclerview-v7:23.1.1:sources'
 
     testCompile 'junit:junit:4.10'
-    testCompile 'org.robolectric:robolectric:2.4'
+    testCompile 'org.robolectric:robolectric:3.0'
+    testCompile 'org.robolectric:shadows-support-v4:3.0'
+    testCompile 'org.robolectric:shadows-httpclient:3.0'
     testCompile 'com.squareup:fest-android:1.0.7'
     testCompile 'org.mockito:mockito-core:1.9.5'
 }
@@ -195,6 +212,7 @@ task sourcesJar(type: Jar) {
 task javadoc(type: Javadoc) {
     source = android.sourceSets.main.java.srcDirs
     classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
+    classpath += configurations.javadocDeps
 }
 
 task javadocJar(type: Jar, dependsOn: javadoc) {
diff --git a/mopub-sdk/etc/mraid.js b/mopub-sdk/etc/mraid.js
index 7ce13b28..8e5bb5b7 100644
--- a/mopub-sdk/etc/mraid.js
+++ b/mopub-sdk/etc/mraid.js
@@ -28,7 +28,6 @@
     lastSizeChangeProperties: null
   };
 
-
   bridge.fireChangeEvent = function(properties) {
     for (var p in properties) {
       if (properties.hasOwnProperty(p)) {
@@ -278,6 +277,12 @@
 
   var placementType = PLACEMENT_TYPES.UNKNOWN;
 
+  var hostSDKVersion = {
+    'major': 0,
+    'minor': 0,
+    'patch': 0
+  };
+
   //////////////////////////////////////////////////////////////////////////////////////////////////
 
   var EventListeners = function(event) {
@@ -398,7 +403,23 @@
 
     supports: function(val) {
       broadcastEvent(EVENTS.INFO, 'Set supports to ' + stringify(val));
-        supportProperties = val;
+      supportProperties = val;
+    },
+
+    hostSDKVersion: function(val) {
+      // val is expected to be formatted like 'X.Y.Z[-+]identifier'.
+      var versions = val.split('.').map(function(version) {
+        return parseInt(version, 10);
+      }).filter(function(version) {
+        return version >= 0;
+      });
+
+      if (versions.length >= 3) {
+        hostSDKVersion['major'] = parseInt(versions[0], 10);
+        hostSDKVersion['minor'] = parseInt(versions[1], 10);
+        hostSDKVersion['patch'] = parseInt(versions[2], 10);
+        broadcastEvent(EVENTS.INFO, 'Set hostSDKVersion to ' + stringify(hostSDKVersion));
+      }
     }
   };
 
@@ -714,6 +735,14 @@
     }
   };
 
+  // Determining SDK version ///////////////////////////////////////////////////////////////////////
+
+  mraid.getHostSDKVersion = function() {
+    return hostSDKVersion;
+  }
+
+  // Calendar helpers //////////////////////////////////////////////////////////////////////////////
+
   var CalendarEventParser = {
     initialize: function(parameters) {
       this.parameters = parameters;
diff --git a/mopub-sdk/pom.xml b/mopub-sdk/pom.xml
index caee1e26..011a3234 100644
--- a/mopub-sdk/pom.xml
+++ b/mopub-sdk/pom.xml
@@ -21,20 +21,20 @@
         <dependency>
             <groupId>com.android.support</groupId>
             <artifactId>support-annotations</artifactId>
-            <version>22.0.0</version>
+            <version>23.1.1</version>
         </dependency>
 
         <dependency>
             <groupId>com.android.support</groupId>
             <artifactId>support-v4</artifactId>
-            <version>22.0.0</version>
+            <version>23.1.1</version>
             <type>aar</type>
         </dependency>
 
         <dependency>
             <groupId>com.android.support</groupId>
             <artifactId>recyclerview-v7</artifactId>
-            <version>22.0.0</version>
+            <version>23.1.1</version>
             <type>aar</type>
         </dependency>
         
@@ -44,6 +44,13 @@
             <version>1.1.0</version>
         </dependency>
 
+        <dependency>
+            <groupId>com.google.android.exoplayer</groupId>
+            <artifactId>exoplayer</artifactId>
+            <version>r1.5.6</version>
+            <type>aar</type>
+        </dependency>
+
         <!--android & oobolectric-->
         <dependency>
             <groupId>com.google.android</groupId>
diff --git a/mopub-sdk/proguard.txt b/mopub-sdk/proguard.txt
index 0a2e3c08..3ad22097 100644
--- a/mopub-sdk/proguard.txt
+++ b/mopub-sdk/proguard.txt
@@ -16,3 +16,8 @@
 -keep class com.google.android.gms.common.GooglePlayServicesUtil {*;}
 -keep class com.google.android.gms.ads.identifier.AdvertisingIdClient {*;}
 -keep class com.google.android.gms.ads.identifier.AdvertisingIdClient$Info {*;}
+-dontwarn com.google.android.gms.**
+
+# Filter out warnings that refer to legacy Code.
+-dontwarn org.apache.http.**
+-dontwarn com.mopub.volley.toolbox.**
diff --git a/mopub-sdk/src/main/java/com/mopub/common/AdReport.java b/mopub-sdk/src/main/java/com/mopub/common/AdReport.java
index 0415b271..7e6a2b39 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/AdReport.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/AdReport.java
@@ -63,6 +63,10 @@ public String getResponseString() {
         return mAdResponse.getStringBody();
     }
 
+    public String getDspCreativeId() {
+        return mAdResponse.getDspCreativeId();
+    }
+
     private void appendKeyValue(StringBuilder parameters, String key, String value) {
         parameters.append(key);
         parameters.append(" : ");
diff --git a/mopub-sdk/src/main/java/com/mopub/common/AdType.java b/mopub-sdk/src/main/java/com/mopub/common/AdType.java
index 86543d5a..38f7c2ba 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/AdType.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/AdType.java
@@ -8,7 +8,9 @@
     public static final String HTML = "html";
     public static final String MRAID = "mraid";
     public static final String INTERSTITIAL = "interstitial";
-    public static final String NATIVE = "json";
+    public static final String STATIC_NATIVE = "json";
+    public static final String VIDEO_NATIVE = "json_video";
+    public static final String REWARDED_VIDEO = "rewarded_video";
     public static final String CUSTOM = "custom";
     public static final String CLEAR = "clear";
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/AdUrlGenerator.java b/mopub-sdk/src/main/java/com/mopub/common/AdUrlGenerator.java
index 397a0d04..4975407a 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/AdUrlGenerator.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/AdUrlGenerator.java
@@ -63,7 +63,7 @@
 
     /**
      * Density as represented by a float. See
-     * http://developer.android.com/guide/practices/screens_support.html
+     * https://developer.android.com/guide/practices/screens_support.html
      * for details on values this can be.
      */
     private static final String SCREEN_SCALE_KEY = "sc_a";
diff --git a/mopub-sdk/src/main/java/com/mopub/common/BaseUrlGenerator.java b/mopub-sdk/src/main/java/com/mopub/common/BaseUrlGenerator.java
index 68d88289..759b528e 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/BaseUrlGenerator.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/BaseUrlGenerator.java
@@ -19,8 +19,8 @@
     public abstract String generateUrlString(String serverHostname);
 
     protected void initUrlString(String serverHostname, String handlerType) {
-        String scheme = Networking.useHttps() ? Constants.HTTPS : Constants.HTTP;
-        mStringBuilder = new StringBuilder(scheme).append("://").append(serverHostname).append(handlerType);
+        mStringBuilder = new StringBuilder(Networking.getScheme()).append("://")
+                .append(serverHostname).append(handlerType);
         mFirstParam = true;
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/common/CacheService.java b/mopub-sdk/src/main/java/com/mopub/common/CacheService.java
index 58cd1cf5..a88ad866 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/CacheService.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/CacheService.java
@@ -21,7 +21,7 @@
 import static com.mopub.common.DiskLruCache.open;
 
 public class CacheService {
-    public static interface DiskLruCacheGetListener {
+    public interface DiskLruCacheGetListener {
         void onComplete(final String key, final byte[] content);
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/common/ClientMetadata.java b/mopub-sdk/src/main/java/com/mopub/common/ClientMetadata.java
index 412f47be..d6c76b92 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/ClientMetadata.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/ClientMetadata.java
@@ -21,7 +21,6 @@
 
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
 import static android.content.pm.PackageManager.NameNotFoundException;
-import static android.content.pm.PackageManager.PERMISSION_GRANTED;
 
 /**
  * Singleton that caches Client objects so they will be available to background threads.
@@ -49,14 +48,14 @@
     private boolean mDoNotTrack = false;
     private boolean mAdvertisingInfoSet = false;
 
-    public static enum MoPubNetworkType {
+    public enum MoPubNetworkType {
         UNKNOWN(0),
         ETHERNET(1),
         WIFI(2),
         MOBILE(3);
 
         private final int mId;
-        private MoPubNetworkType(int id) {
+        MoPubNetworkType(int id) {
             mId = id;
         }
 
@@ -227,7 +226,7 @@ public String getOrientationString() {
 
     public MoPubNetworkType getActiveNetworkType() {
         int networkType = UNKNOWN_NETWORK;
-        if (mContext.checkCallingOrSelfPermission(ACCESS_NETWORK_STATE) == PERMISSION_GRANTED) {
+        if (DeviceUtils.isPermissionGranted(mContext, ACCESS_NETWORK_STATE)) {
             NetworkInfo activeNetworkInfo = mConnectivityManager.getActiveNetworkInfo();
             networkType = activeNetworkInfo != null
                     ? activeNetworkInfo.getType() : UNKNOWN_NETWORK;
diff --git a/mopub-sdk/src/main/java/com/mopub/common/CloseableLayout.java b/mopub-sdk/src/main/java/com/mopub/common/CloseableLayout.java
index a38f4b52..6a642d16 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/CloseableLayout.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/CloseableLayout.java
@@ -46,10 +46,10 @@
     /**
      * Defines a subset of supported gravity combinations for the CloseableLayout. These values
      * include the possible values for customClosePosition as defined in the
-     * <a href="http://www.iab.net/media/file/IAB_MRAID_v2_FINAL.pdf">MRAID 2.0
+     * <a href="https://www.iab.net/media/file/IAB_MRAID_v2_FINAL.pdf">MRAID 2.0
      * specification</a>.
      */
-    public static enum ClosePosition {
+    public enum ClosePosition {
         TOP_LEFT(Gravity.TOP | Gravity.LEFT),
         TOP_CENTER(Gravity.TOP | Gravity.CENTER_HORIZONTAL),
         TOP_RIGHT(Gravity.TOP | Gravity.RIGHT),
@@ -185,7 +185,7 @@ private void applyCloseBoundsWithSize(ClosePosition closePosition, final int siz
 
     @Override
     public boolean onInterceptTouchEvent(@NonNull final MotionEvent event) {
-        // See http://developer.android.com/training/gestures/viewgroup.html for details on
+        // See https://developer.android.com/training/gestures/viewgroup.html for details on
         // capturing motion events
 
         // Start intercepting touch events only when we see a down event
diff --git a/mopub-sdk/src/main/java/com/mopub/common/Constants.java b/mopub-sdk/src/main/java/com/mopub/common/Constants.java
index 0ca157fe..7c5b1462 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/Constants.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/Constants.java
@@ -5,6 +5,7 @@ private Constants() {}
 
     public static final String HTTP = "http";
     public static final String HTTPS = "https";
+    public static final String INTENT_SCHEME = "intent";
 
     public static final String HOST = "ads.mopub.com";
 
@@ -17,4 +18,6 @@ private Constants() {}
     public static final int THIRTY_SECONDS_MILLIS = 30 * 1000;
 
     public static final int TEN_MB = 10 * 1024 * 1024;
+
+    public static final int UNUSED_REQUEST_CODE = 255;  // Acceptable range is [0, 255]
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/DataKeys.java b/mopub-sdk/src/main/java/com/mopub/common/DataKeys.java
index 3adb73e3..aa66cb94 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/DataKeys.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/DataKeys.java
@@ -8,6 +8,7 @@
     public static final String HTML_RESPONSE_BODY_KEY = "Html-Response-Body";
     public static final String REDIRECT_URL_KEY = "Redirect-Url";
     public static final String CLICKTHROUGH_URL_KEY = "Clickthrough-Url";
+    public static final String CLICK_TRACKING_URL_KEY = "Click-Tracking-Url";
     public static final String SCROLLABLE_KEY = "Scrollable";
     public static final String CREATIVE_ORIENTATION_KEY = "com_mopub_orientation";
     public static final String JSON_BODY_KEY = "com_mopub_native_json";
@@ -15,4 +16,17 @@
     public static final String AD_UNIT_ID_KEY = "com_mopub_ad_unit_id";
     public static final String AD_WIDTH = "com_mopub_ad_width";
     public static final String AD_HEIGHT = "com_mopub_ad_height";
+
+    // Native Video fields
+    public static final String PLAY_VISIBLE_PERCENT = "Play-Visible-Percent";
+    public static final String PAUSE_VISIBLE_PERCENT = "Pause-Visible-Percent";
+    public static final String IMPRESSION_MIN_VISIBLE_PERCENT = "Impression-Min-Visible-Percent";
+    public static final String IMPRESSION_VISIBLE_MS = "Impression-Visible-Ms";
+    public static final String MAX_BUFFER_MS = "Max-Buffer-Ms";
+    public static final String EVENT_DETAILS = "Event-Details";
+
+    // Rewarded Video fields
+    public static final String REWARDED_VIDEO_CURRENCY_NAME_KEY = "Rewarded-Video-Currency-Name";
+    public static final String REWARDED_VIDEO_CURRENCY_AMOUNT_STRING_KEY = "Rewarded-Video-Currency-Value-String";
+    public static final String REWARDED_VIDEO_CUSTOMER_ID = "Rewarded-Video-Customer-Id";
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/DiskLruCache.java b/mopub-sdk/src/main/java/com/mopub/common/DiskLruCache.java
index c62d6594..882d2071 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/DiskLruCache.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/DiskLruCache.java
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
diff --git a/mopub-sdk/src/main/java/com/mopub/common/DiskLruCacheStrictLineReader.java b/mopub-sdk/src/main/java/com/mopub/common/DiskLruCacheStrictLineReader.java
index 8e4aa1f4..824a9254 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/DiskLruCacheStrictLineReader.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/DiskLruCacheStrictLineReader.java
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
diff --git a/mopub-sdk/src/main/java/com/mopub/common/DiskLruCacheUtil.java b/mopub-sdk/src/main/java/com/mopub/common/DiskLruCacheUtil.java
index 6cc5b4f9..ba7622ea 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/DiskLruCacheUtil.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/DiskLruCacheUtil.java
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *      https://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
diff --git a/mopub-sdk/src/main/java/com/mopub/common/DoubleTimeTracker.java b/mopub-sdk/src/main/java/com/mopub/common/DoubleTimeTracker.java
new file mode 100644
index 00000000..25564d9b
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/DoubleTimeTracker.java
@@ -0,0 +1,77 @@
+package com.mopub.common;
+
+import android.os.SystemClock;
+import android.support.annotation.NonNull;
+
+import com.mopub.common.logging.MoPubLog;
+
+/**
+ * This class uses system time to track durations. It can be started and paused, but not reset.
+ * Create a new {@link DoubleTimeTracker} if you need to track a new duration.
+ */
+public class DoubleTimeTracker {
+    /**
+     * Wrapper for Android SystemClock used to allow dependency injection for tests.
+     */
+    public interface Clock {
+        long elapsedRealTime();
+    }
+
+
+    private enum State { STARTED, PAUSED }
+    @NonNull private volatile State state;
+    private long startedTimestamp;
+    private long interval;
+    @NonNull private final Clock mClock;
+
+    public DoubleTimeTracker() {
+        this(new SystemClockClock());
+    }
+
+    @VisibleForTesting
+    public DoubleTimeTracker(@NonNull Clock clock) {
+        this.mClock = clock;
+        this.state = State.PAUSED;
+    }
+
+    public synchronized void start() {
+        if (state == State.STARTED) {
+            MoPubLog.v("DoubleTimeTracker already started.");
+            return;
+        }
+
+        state = State.STARTED;
+        startedTimestamp = mClock.elapsedRealTime();
+    }
+
+    public synchronized void pause() {
+        if (state == State.PAUSED) {
+            MoPubLog.v("DoubleTimeTracker already paused.");
+            return;
+        }
+
+
+        interval += computeIntervalDiff();
+        startedTimestamp = 0;
+        state = State.PAUSED;
+    }
+
+
+    public synchronized double getInterval() {
+        return interval + computeIntervalDiff();
+    }
+
+    private synchronized long computeIntervalDiff() {
+        if (state == State.PAUSED) {
+            return 0;
+        }
+
+        return mClock.elapsedRealTime() - startedTimestamp;
+    }
+
+    private static class SystemClockClock implements Clock {
+        public long elapsedRealTime() {
+            return SystemClock.elapsedRealtime();
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/DownloadTask.java b/mopub-sdk/src/main/java/com/mopub/common/DownloadTask.java
deleted file mode 100644
index 7230a2ae..00000000
--- a/mopub-sdk/src/main/java/com/mopub/common/DownloadTask.java
+++ /dev/null
@@ -1,66 +0,0 @@
-package com.mopub.common;
-
-import android.net.http.AndroidHttpClient;
-import android.os.AsyncTask;
-
-import com.mopub.common.logging.MoPubLog;
-
-import org.apache.http.HttpResponse;
-import org.apache.http.client.methods.HttpUriRequest;
-
-public class DownloadTask extends AsyncTask<HttpUriRequest, Void, DownloadResponse> {
-    private final DownloadTaskListener mDownloadTaskListener;
-    private String mUrl;
-
-    public static interface DownloadTaskListener {
-        abstract void onComplete(String url, DownloadResponse downloadResponse);
-    }
-
-    public DownloadTask(final DownloadTaskListener downloadTaskListener) throws IllegalArgumentException {
-        if (downloadTaskListener == null) {
-            throw new IllegalArgumentException("DownloadTaskListener must not be null.");
-        }
-
-        mDownloadTaskListener = downloadTaskListener;
-    }
-
-    @Override
-    protected DownloadResponse doInBackground(final HttpUriRequest... httpUriRequests) {
-        if (httpUriRequests == null || httpUriRequests.length == 0 || httpUriRequests[0] == null) {
-            MoPubLog.d("Download task tried to execute null or empty url");
-            return null;
-        }
-
-        final HttpUriRequest httpUriRequest = httpUriRequests[0];
-        mUrl = httpUriRequest.getURI().toString();
-
-        AndroidHttpClient httpClient = null;
-        try {
-            httpClient = HttpClient.getHttpClient();
-            final HttpResponse httpResponse = httpClient.execute(httpUriRequest);
-            return new DownloadResponse(httpResponse);
-        } catch (Exception e) {
-            MoPubLog.d("Download task threw an internal exception", e);
-            return null;
-        } finally {
-            if (httpClient != null) {
-                httpClient.close();
-            }
-        }
-    }
-
-    @Override
-    protected void onPostExecute(final DownloadResponse downloadResponse) {
-        if (isCancelled()) {
-            onCancelled();
-            return;
-        }
-
-        mDownloadTaskListener.onComplete(mUrl, downloadResponse);
-    }
-
-    @Override
-    protected void onCancelled() {
-        MoPubLog.d("DownloadTask was cancelled.");
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/FullAdType.java b/mopub-sdk/src/main/java/com/mopub/common/FullAdType.java
new file mode 100644
index 00000000..cec3a306
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/FullAdType.java
@@ -0,0 +1,9 @@
+package com.mopub.common;
+
+/**
+ * Valid values for the "X-Fulladtype" header from the MoPub ad server. The value of this header
+ * controls the custom event loading behavior.
+ */
+public class FullAdType {
+    public final static String VAST = "vast";
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java b/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java
index e26371b0..5773b410 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java
@@ -31,7 +31,7 @@ public AdvertisingInfo(String adId, boolean limitAdTrackingEnabled) {
     }
 
     public interface GpsHelperListener {
-        public void onFetchAdInfoCompleted();
+        void onFetchAdInfoCompleted();
     }
 
     public static boolean isPlayServicesAvailable(final Context context) {
diff --git a/mopub-sdk/src/main/java/com/mopub/common/LifecycleListener.java b/mopub-sdk/src/main/java/com/mopub/common/LifecycleListener.java
index d92f8d5d..724d683a 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/LifecycleListener.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/LifecycleListener.java
@@ -8,14 +8,13 @@
  * occur.
  */
 public interface LifecycleListener {
+    void onCreate(@NonNull Activity activity);
+    void onStart(@NonNull Activity activity);
+    void onPause(@NonNull Activity activity);
+    void onResume(@NonNull Activity activity);
 
-    public void onCreate(@NonNull Activity activity);
-    public void onStart(@NonNull Activity activity);
-    public void onPause(@NonNull Activity activity);
-    public void onResume(@NonNull Activity activity);
-
-    public void onRestart(@NonNull Activity activity);
-    public void onStop(@NonNull Activity activity);
-    public void onDestroy(@NonNull Activity activity);
-    public void onBackPressed(@NonNull Activity activity);
+    void onRestart(@NonNull Activity activity);
+    void onStop(@NonNull Activity activity);
+    void onDestroy(@NonNull Activity activity);
+    void onBackPressed(@NonNull Activity activity);
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/LocationService.java b/mopub-sdk/src/main/java/com/mopub/common/LocationService.java
index 6602db66..77e44feb 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/LocationService.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/LocationService.java
@@ -3,14 +3,19 @@
 import android.content.Context;
 import android.location.Location;
 import android.location.LocationManager;
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.DeviceUtils;
 
 import java.math.BigDecimal;
 
+import static android.Manifest.permission.ACCESS_COARSE_LOCATION;
+import static android.Manifest.permission.ACCESS_FINE_LOCATION;
+
 public class LocationService {
-    public static enum LocationAwareness {
+    public enum LocationAwareness {
         NORMAL, TRUNCATED, DISABLED;
 
         // These deprecated methods are only used to support the deprecated methods
@@ -42,6 +47,34 @@
         }
     }
 
+    public enum ValidLocationProvider {
+        NETWORK(LocationManager.NETWORK_PROVIDER),
+        GPS(LocationManager.GPS_PROVIDER);
+
+        @NonNull final String name;
+
+        ValidLocationProvider(@NonNull final String name) {
+            this.name = name;
+        }
+
+        @Override
+        public String toString() {
+            return name;
+        }
+
+        private boolean hasRequiredPermissions(@NonNull final Context context) {
+            switch (this) {
+                case NETWORK:
+                    return DeviceUtils.isPermissionGranted(context, ACCESS_FINE_LOCATION)
+                            || DeviceUtils.isPermissionGranted(context, ACCESS_COARSE_LOCATION);
+                case GPS:
+                    return DeviceUtils.isPermissionGranted(context, ACCESS_FINE_LOCATION);
+                default:
+                    return false;
+            }
+        }
+    }
+
     /*
      * Returns the last known location of the device using its GPS and network location providers.
      * May be null if:
@@ -50,67 +83,91 @@
      * - Location awareness is disabled in the parent MoPubView
      */
     @Nullable
-    public static Location getLastKnownLocation(final Context context,
+    public static Location getLastKnownLocation(@NonNull final Context context,
             final int locationPrecision,
-            final MoPub.LocationAwareness locationLocationAwareness) {
-        Location result;
+            final @NonNull MoPub.LocationAwareness locationAwareness) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(locationAwareness);
+
+        if (locationAwareness == MoPub.LocationAwareness.DISABLED) {
+            return null;
+        }
+
+        final Location gpsLocation = getLocationFromProvider(context, ValidLocationProvider.GPS);
+        final Location networkLocation = getLocationFromProvider(context, ValidLocationProvider.NETWORK);
+        final Location result = getMostRecentValidLocation(gpsLocation, networkLocation);
+
+        // Truncate latitude/longitude to the number of digits specified by locationPrecision.
+        if (locationAwareness == MoPub.LocationAwareness.TRUNCATED) {
+            truncateLocationLatLon(result, locationPrecision);
+        }
+
+        return result;
+    }
 
-        if (locationLocationAwareness == MoPub.LocationAwareness.DISABLED) {
+    @VisibleForTesting
+    @Nullable
+    static Location getLocationFromProvider(@NonNull final Context context,
+            @NonNull final ValidLocationProvider provider) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(provider);
+
+        if (!provider.hasRequiredPermissions(context)) {
             return null;
         }
 
-        LocationManager locationManager = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);
-        Location gpsLocation = null;
+        final LocationManager locationManager =
+                (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);
         try {
-            gpsLocation = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
+            // noinspection ResourceType
+            return locationManager.getLastKnownLocation(provider.toString());
         } catch (SecurityException e) {
-            MoPubLog.d("Failed to retrieve GPS location: access appears to be disabled.");
+            MoPubLog.d("Failed to retrieve location from " +
+                    provider.toString() + " provider: access appears to be disabled.");
         } catch (IllegalArgumentException e) {
-            MoPubLog.d("Failed to retrieve GPS location: device has no GPS provider.");
+            MoPubLog.d("Failed to retrieve location: device has no " +
+                    provider.toString() + " location provider.");
         } catch (NullPointerException e) { // This happens on 4.2.2 on a few Android TV devices
-            MoPubLog.d("Failed to retrieve GPS location: device has no GPS provider.");
+            MoPubLog.d("Failed to retrieve location: device has no " +
+                    provider.toString() + " location provider.");
         }
 
-        Location networkLocation = null;
-        try {
-            networkLocation = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
-        } catch (SecurityException e) {
-            MoPubLog.d("Failed to retrieve network location: access appears to be disabled.");
-        } catch (IllegalArgumentException e) {
-            MoPubLog.d("Failed to retrieve network location: device has no network provider.");
-        }  catch (NullPointerException e) { // This happens on 4.2.2 on a few Android TV devices
-            MoPubLog.d("Failed to retrieve GPS location: device has no network provider.");
+        return null;
+    }
+
+    @VisibleForTesting
+    @Nullable
+    static Location getMostRecentValidLocation(@Nullable final Location a, @Nullable final Location b) {
+        if (a == null) {
+            return b;
         }
 
-        if (gpsLocation == null && networkLocation == null) {
-            return null;
-        } else if (gpsLocation != null && networkLocation != null) {
-            if (gpsLocation.getTime() > networkLocation.getTime()) {
-                result = gpsLocation;
-            } else {
-                result = networkLocation;
-            }
-        } else if (gpsLocation != null) {
-            result = gpsLocation;
-        } else {
-            result = networkLocation;
+        if (b == null) {
+            return a;
         }
 
-        // Truncate latitude/longitude to the number of digits specified by locationPrecision.
-        if (locationLocationAwareness == MoPub.LocationAwareness.TRUNCATED) {
-            double lat = result.getLatitude();
-            double truncatedLat = BigDecimal.valueOf(lat)
-                    .setScale(locationPrecision, BigDecimal.ROUND_HALF_DOWN)
-                    .doubleValue();
-            result.setLatitude(truncatedLat);
-
-            double lon = result.getLongitude();
-            double truncatedLon = BigDecimal.valueOf(lon)
-                    .setScale(locationPrecision, BigDecimal.ROUND_HALF_DOWN)
-                    .doubleValue();
-            result.setLongitude(truncatedLon);
+        // At this point, locations A and B are non-null, so return the more recent one
+        return (a.getTime() > b.getTime()) ? a : b;
+    }
+
+    @VisibleForTesting
+    @Nullable
+    static void truncateLocationLatLon(@Nullable final Location location,
+            final int precision) {
+        if (location == null || precision < 0) {
+            return;
         }
 
-        return result;
+        double lat = location.getLatitude();
+        double truncatedLat = BigDecimal.valueOf(lat)
+                .setScale(precision, BigDecimal.ROUND_HALF_DOWN)
+                .doubleValue();
+        location.setLatitude(truncatedLat);
+
+        double lon = location.getLongitude();
+        double truncatedLon = BigDecimal.valueOf(lon)
+                .setScale(precision, BigDecimal.ROUND_HALF_DOWN)
+                .doubleValue();
+        location.setLongitude(truncatedLon);
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
index f9cca092..f857b641 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
@@ -6,11 +6,12 @@
 
 import com.mopub.mobileads.MoPubRewardedVideoListener;
 import com.mopub.mobileads.MoPubRewardedVideoManager;
+import com.mopub.mobileads.MoPubRewardedVideoManager.RequestParameters;
 
 public class MoPub {
-    public static final String SDK_VERSION = "3.10.0";
+    public static final String SDK_VERSION = "4.7.1";
 
-    public static enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
+    public enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
 
     private static final int DEFAULT_LOCATION_PRECISION = 6;
     private static volatile LocationAwareness sLocationLocationAwareness = LocationAwareness.NORMAL;
@@ -88,8 +89,15 @@ public static void setRewardedVideoListener(@Nullable MoPubRewardedVideoListener
         MoPubRewardedVideoManager.setVideoListener(listener);
     }
 
-    public static void loadRewardedVideo(@NonNull String adUnitId, @Nullable MediationSettings... mediationSettings) {
-        MoPubRewardedVideoManager.loadVideo(adUnitId, mediationSettings);
+    public static void loadRewardedVideo(@NonNull String adUnitId,
+            @Nullable MediationSettings... mediationSettings) {
+        MoPubRewardedVideoManager.loadVideo(adUnitId, null, mediationSettings);
+    }
+
+    public static void loadRewardedVideo(@NonNull String adUnitId,
+            @Nullable RequestParameters requestParameters,
+            @Nullable MediationSettings... mediationSettings) {
+        MoPubRewardedVideoManager.loadVideo(adUnitId, requestParameters, mediationSettings);
     }
 
     public static boolean hasRewardedVideo(@NonNull String adUnitId) {
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java b/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java
index 8a92ddc6..b66986ef 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java
@@ -1,8 +1,6 @@
 package com.mopub.common;
 
 import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
 import android.graphics.Color;
 import android.graphics.drawable.Drawable;
 import android.os.Bundle;
@@ -19,14 +17,14 @@
 import android.widget.LinearLayout;
 import android.widget.RelativeLayout;
 
-import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.event.Event;
+import com.mopub.common.event.MoPubEvents;
 import com.mopub.mobileads.BaseWebView;
 import com.mopub.mobileads.util.WebViews;
 
-import java.util.EnumSet;
-
 import static android.view.ViewGroup.LayoutParams.MATCH_PARENT;
 import static android.view.ViewGroup.LayoutParams.WRAP_CONTENT;
+import static com.mopub.common.event.BaseEvent.*;
 import static com.mopub.common.util.Drawables.BACKGROUND;
 import static com.mopub.common.util.Drawables.CLOSE;
 import static com.mopub.common.util.Drawables.LEFT_ARROW;
@@ -35,6 +33,8 @@
 
 public class MoPubBrowser extends Activity {
     public static final String DESTINATION_URL_KEY = "URL";
+    public static final String DSP_CREATIVE_ID = "mopub-dsp-creative-id";
+    public static final int MOPUB_BROWSER_REQUEST_CODE = 1;
     private static final int INNER_LAYOUT_ID = 1;
 
     private WebView mWebView;
@@ -43,6 +43,9 @@
     private ImageButton mRefreshButton;
     private ImageButton mCloseButton;
 
+    private DoubleTimeTracker dwellTimeTracker;
+    private String mDspCreativeId;
+
     @NonNull
     public ImageButton getBackButton() {
         return mBackButton;
@@ -68,14 +71,6 @@ public WebView getWebView() {
         return mWebView;
     }
 
-    public static void open(final Context context, final String url) {
-        MoPubLog.d("Opening url in MoPubBrowser: " + url);
-        final Intent intent = new Intent(context, MoPubBrowser.class);
-        intent.putExtra(DESTINATION_URL_KEY, url);
-        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        context.startActivity(intent);
-    }
-
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -87,6 +82,8 @@ public void onCreate(Bundle savedInstanceState) {
 
         setContentView(getMoPubBrowserView());
 
+        dwellTimeTracker = new DoubleTimeTracker();
+
         initializeWebView();
         initializeButtons();
         enableCookies();
@@ -100,12 +97,14 @@ private void initializeWebView() {
         /**
          * Pinch to zoom is apparently not enabled by default on all devices, so
          * declare zoom support explicitly.
-         * http://stackoverflow.com/questions/5125851/enable-disable-zoom-in-android-webview
+         * https://stackoverflow.com/questions/5125851/enable-disable-zoom-in-android-webview
          */
         webSettings.setSupportZoom(true);
         webSettings.setBuiltInZoomControls(true);
         webSettings.setUseWideViewPort(true);
 
+        mDspCreativeId = getIntent().getStringExtra(DSP_CREATIVE_ID);
+
         mWebView.loadUrl(getIntent().getStringExtra(DESTINATION_URL_KEY));
 
         mWebView.setWebViewClient(new BrowserWebViewClient(this));
@@ -165,6 +164,8 @@ protected void onPause() {
         super.onPause();
         CookieSyncManager.getInstance().stopSync();
         WebViews.onPause(mWebView, isFinishing());
+        // Pause dwell time counting.
+        dwellTimeTracker.pause();
     }
 
     @Override
@@ -172,6 +173,8 @@ protected void onResume() {
         super.onResume();
         CookieSyncManager.getInstance().startSync();
         WebViews.onResume(mWebView);
+
+        dwellTimeTracker.start();
     }
 
     @Override
@@ -188,6 +191,13 @@ protected void onDestroy() {
         super.onDestroy();
         mWebView.destroy();
         mWebView = null;
+        // Log dwell time value.
+        MoPubEvents.log(new Event.Builder(Name.AD_DWELL_TIME,
+                Category.AD_INTERACTIONS,
+                SamplingRate.AD_INTERACTIONS.getSamplingRate())
+                .withDspCreativeId(mDspCreativeId)
+                .withPerformanceDurationMs(dwellTimeTracker.getInterval())
+                .build());
     }
 
     @Override
diff --git a/mopub-sdk/src/main/java/com/mopub/common/HttpClient.java b/mopub-sdk/src/main/java/com/mopub/common/MoPubHttpUrlConnection.java
similarity index 60%
rename from mopub-sdk/src/main/java/com/mopub/common/HttpClient.java
rename to mopub-sdk/src/main/java/com/mopub/common/MoPubHttpUrlConnection.java
index 09c16730..d8032625 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/HttpClient.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/MoPubHttpUrlConnection.java
@@ -1,51 +1,38 @@
 package com.mopub.common;
 
-import android.content.Context;
-import android.net.http.AndroidHttpClient;
 import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
 
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.network.Networking;
 
-import org.apache.http.client.methods.HttpGet;
-import org.apache.http.client.params.HttpClientParams;
-import org.apache.http.params.HttpConnectionParams;
-import org.apache.http.params.HttpParams;
-
+import java.io.IOException;
 import java.io.UnsupportedEncodingException;
+import java.net.HttpURLConnection;
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.net.URL;
 import java.net.URLDecoder;
 
-import static com.mopub.common.util.ResponseHeader.USER_AGENT;
-
-public class HttpClient {
-    private static final int CONNECTION_TIMEOUT = 10000;
-    private static final int SOCKET_TIMEOUT = 10000;
-
-    public static AndroidHttpClient getHttpClient() {
-        final String userAgent = Networking.getCachedUserAgent();
-
-        AndroidHttpClient httpClient = AndroidHttpClient.newInstance(userAgent);
+public abstract class MoPubHttpUrlConnection extends HttpURLConnection {
+    private static final int CONNECT_TIMEOUT = 10000;
+    private static final int READ_TIMEOUT = 10000;
 
-        HttpParams params = httpClient.getParams();
-        HttpConnectionParams.setConnectionTimeout(params, CONNECTION_TIMEOUT);
-        HttpConnectionParams.setSoTimeout(params, SOCKET_TIMEOUT);
-        HttpClientParams.setRedirecting(params, true);
-
-        return httpClient;
-    }
-
-    public static HttpGet initializeHttpGet(@NonNull final String url) {
-        return initializeHttpGet(url, null);
+    private MoPubHttpUrlConnection(URL url) {
+        super(url);
     }
 
-    public static HttpGet initializeHttpGet(@NonNull String url, @Nullable final Context context) {
+    public static HttpURLConnection getHttpUrlConnection(@NonNull final String url)
+            throws IOException {
         Preconditions.checkNotNull(url);
 
-        // Try to encode url. If this fails, then fallback on the original url
+        // If the passed-in url has already been encoded improperly, there is no way to salvage this
+        // connection request -- fail quickly instead.
+        if (isUrlImproperlyEncoded(url)) {
+            throw new IllegalArgumentException("URL is improperly encoded: " + url);
+        }
+
+        // Attempt to encode the passed-in url and use that, if possible. If this fails, then
+        // fallback to the original url instead.
         String getUrl;
         try {
             getUrl = urlEncode(url);
@@ -53,26 +40,20 @@ public static HttpGet initializeHttpGet(@NonNull String url, @Nullable final Con
             getUrl = url;
         }
 
-        final HttpGet httpGet = new HttpGet(getUrl);
-
-        final String webViewUserAgent;
-        if (context != null) {
-            webViewUserAgent = Networking.getUserAgent(context);
-        } else {
-            webViewUserAgent = Networking.getCachedUserAgent();
-        }
-
-        if (webViewUserAgent != null) {
-            httpGet.addHeader(USER_AGENT.getKey(), webViewUserAgent);
-        }
+        final HttpURLConnection urlConnection =
+                (HttpURLConnection) new URL(getUrl).openConnection();
+        urlConnection.setRequestProperty("User-Agent", Networking.getCachedUserAgent());
+        urlConnection.setConnectTimeout(CONNECT_TIMEOUT);
+        urlConnection.setReadTimeout(READ_TIMEOUT);
 
-        return httpGet;
+        return urlConnection;
     }
 
     /**
      * This method constructs a properly encoded and valid URI adhering to legal characters for
      * each component. See Android docs on these classes for reference.
      */
+    @NonNull
     public static String urlEncode(@NonNull final String url) throws Exception {
         Preconditions.checkNotNull(url);
 
@@ -122,6 +103,7 @@ static boolean isUrlUnencoded(@NonNull String url) {
     /**
      * This method encodes each component of the URL into a valid URI.
      */
+    @NonNull
     static URI encodeUrl(@NonNull String urlString) throws Exception {
         URI uri;
         try {
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPubReward.java b/mopub-sdk/src/main/java/com/mopub/common/MoPubReward.java
index 85f0f3c2..0c2b0ce3 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/MoPubReward.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/MoPubReward.java
@@ -6,8 +6,23 @@
  * Represents a reward to the user for completing a rewarded task like watching a video.
  */
 public final class MoPubReward {
+    /**
+     * This should be used if there is no reward label specified.
+     */
     public static final String NO_REWARD_LABEL = "";
+
+    /**
+     * Legacy amount for certain custom events that don't take a reward amount. Try not to use this
+     * for any future custom events.
+     */
     public static final int NO_REWARD_AMOUNT = -123;
+
+    /**
+     * The default amount if nothing or an invalid amount is specified. This also is applicable for
+     * custom events that do not require a reward amount.
+     */
+    public static final int DEFAULT_REWARD_AMOUNT = 0;
+
     private final boolean mSuccess;
     private final @NonNull String mLabel;
     private final int mAmount;
diff --git a/mopub-sdk/src/main/java/com/mopub/common/Preconditions.java b/mopub-sdk/src/main/java/com/mopub/common/Preconditions.java
index ca5a52ec..126ff4b4 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/Preconditions.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/Preconditions.java
@@ -184,8 +184,6 @@ public static boolean checkState(boolean expression,
 
         /**
          * Ensures that an object reference is not null.
-         *
-         * @returns true if
          */
         public static boolean checkNotNull(Object reference) {
             return checkNotNullInternal(reference, sStrictMode, "Object can not be null.",
diff --git a/mopub-sdk/src/main/java/com/mopub/common/UrlAction.java b/mopub-sdk/src/main/java/com/mopub/common/UrlAction.java
index d2b5a438..7bd4c068 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/UrlAction.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/UrlAction.java
@@ -4,6 +4,7 @@
 import android.content.Intent;
 import android.net.Uri;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
 import com.mopub.common.event.BaseEvent;
@@ -12,6 +13,7 @@
 import com.mopub.exceptions.IntentNotResolvableException;
 import com.mopub.exceptions.UrlParseException;
 
+import java.net.URISyntaxException;
 import java.util.List;
 
 import static com.mopub.common.Constants.HTTP;
@@ -34,23 +36,24 @@
     /* 0 */ HANDLE_MOPUB_SCHEME(false) {
         @Override
         public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
-            return "mopub".equals(uri.getScheme());
+            return "mopub".equalsIgnoreCase(uri.getScheme());
         }
 
         @Override
         protected void performAction(
                 @NonNull final Context context, @NonNull final Uri uri,
-                @NonNull final UrlHandler urlHandler)
+                @NonNull final UrlHandler urlHandler,
+                @Nullable String creativeId)
                 throws IntentNotResolvableException {
             final String host = uri.getHost();
             final UrlHandler.MoPubSchemeListener moPubSchemeListener =
                     urlHandler.getMoPubSchemeListener();
 
-            if ("finishLoad".equals(host)) {
+            if ("finishLoad".equalsIgnoreCase(host)) {
                 moPubSchemeListener.onFinishLoad();
-            } else if ("close".equals(host)) {
+            } else if ("close".equalsIgnoreCase(host)) {
                 moPubSchemeListener.onClose();
-            } else if ("failLoad".equals(host)) {
+            } else if ("failLoad".equalsIgnoreCase(host)) {
                 moPubSchemeListener.onFailLoad();
             } else {
                 throw new IntentNotResolvableException("Could not handle MoPub Scheme url: " + uri);
@@ -61,13 +64,14 @@ protected void performAction(
     /* 1 */ IGNORE_ABOUT_SCHEME(false) {
         @Override
         public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
-            return "about".equals(uri.getScheme());
+            return "about".equalsIgnoreCase(uri.getScheme());
         }
 
         @Override
         protected void performAction(
                 @NonNull final Context context, @NonNull final Uri uri,
-                @NonNull final UrlHandler urlHandler)
+                @NonNull final UrlHandler urlHandler,
+                @Nullable String creativeId)
                 throws IntentNotResolvableException {
             MoPubLog.d("Link to about page ignored.");
         }
@@ -77,16 +81,17 @@ protected void performAction(
         @Override
         public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
             final String scheme = uri.getScheme();
-            return "tel".equals(scheme) || "voicemail".equals(scheme)
-                    || "sms".equals(scheme) || "mailto".equals(scheme)
-                    || "geo".equals(scheme)
-                    || "google.streetview".equals(scheme);
+            return "tel".equalsIgnoreCase(scheme) || "voicemail".equalsIgnoreCase(scheme)
+                    || "sms".equalsIgnoreCase(scheme) || "mailto".equalsIgnoreCase(scheme)
+                    || "geo".equalsIgnoreCase(scheme)
+                    || "google.streetview".equalsIgnoreCase(scheme);
         }
 
         @Override
         protected void performAction(
                 @NonNull final Context context, @NonNull final Uri uri,
-                @NonNull final UrlHandler urlHandler)
+                @NonNull final UrlHandler urlHandler,
+                @Nullable String creativeId)
                 throws IntentNotResolvableException {
             final String errorMessage = "Could not handle intent with URI: " + uri + "\n\tIs " +
                     "this intent supported on your phone?";
@@ -97,13 +102,14 @@ protected void performAction(
     /* 3 */ OPEN_NATIVE_BROWSER(true) {
         @Override
         public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
-            return "mopubnativebrowser".equals(uri.getScheme());
+            return "mopubnativebrowser".equalsIgnoreCase(uri.getScheme());
         }
 
         @Override
         protected void performAction(
                 @NonNull final Context context, @NonNull final Uri uri,
-                @NonNull final UrlHandler urlHandler)
+                @NonNull final UrlHandler urlHandler,
+                @Nullable String creativeId)
                 throws IntentNotResolvableException {
             final String errorMessage = "Unable to load mopub native browser url: " + uri;
             try {
@@ -121,16 +127,18 @@ public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
             final String scheme = uri.getScheme();
             final String host = uri.getHost();
 
-            return "play.google.com".equals(host) || "market.android.com".equals(host)
-                    || "market".equals(scheme)
-                    || uri.toString().startsWith("play.google.com/")
-                    || uri.toString().startsWith("market.android.com/");
+            return "play.google.com".equalsIgnoreCase(host)
+                    || "market.android.com".equalsIgnoreCase(host)
+                    || "market".equalsIgnoreCase(scheme)
+                    || uri.toString().toLowerCase().startsWith("play.google.com/")
+                    || uri.toString().toLowerCase().startsWith("market.android.com/");
         }
 
         @Override
         protected void performAction(
                 @NonNull final Context context, @NonNull final Uri uri,
-                @NonNull final UrlHandler urlHandler)
+                @NonNull final UrlHandler urlHandler,
+                @Nullable String creativeId)
                 throws IntentNotResolvableException {
             Intents.launchApplicationUrl(context, uri);
         }
@@ -140,16 +148,17 @@ protected void performAction(
         @Override
         public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
             final String scheme = uri.getScheme();
-            return (HTTP.equals(scheme) || HTTPS.equals(scheme));
+            return (HTTP.equalsIgnoreCase(scheme) || HTTPS.equalsIgnoreCase(scheme));
         }
 
         @Override
         protected void performAction(
                 @NonNull final Context context, @NonNull final Uri uri,
-                @NonNull final UrlHandler urlHandler)
+                @NonNull final UrlHandler urlHandler,
+                @Nullable String creativeId)
                 throws IntentNotResolvableException {
             if (!urlHandler.shouldSkipShowMoPubBrowser()) {
-                Intents.showMoPubBrowserForUrl(context, uri);
+                Intents.showMoPubBrowserForUrl(context, uri, creativeId);
             }
         }
     },
@@ -162,13 +171,15 @@ protected void performAction(
         @Override
         public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
             Preconditions.checkNotNull(uri);
-            return "mopubshare".equals(uri.getScheme()) && "tweet".equals(uri.getHost());
+            return "mopubshare".equalsIgnoreCase(uri.getScheme())
+                    && "tweet".equalsIgnoreCase(uri.getHost());
         }
 
         @Override
         protected void performAction(
                 @NonNull final Context context, @NonNull final Uri uri,
-                @NonNull final UrlHandler urlHandler)
+                @NonNull final UrlHandler urlHandler,
+                @Nullable String creativeId)
                 throws IntentNotResolvableException {
             Preconditions.checkNotNull(context);
             Preconditions.checkNotNull(uri);
@@ -194,7 +205,8 @@ public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
         @Override
         protected void performAction(
                 @NonNull final Context context, @NonNull final Uri uri,
-                @NonNull final UrlHandler urlHandler)
+                @NonNull final UrlHandler urlHandler,
+                @Nullable String creativeId)
                 throws IntentNotResolvableException {
 
             // 1. Parse the URL as a valid deeplink+
@@ -214,7 +226,7 @@ protected void performAction(
                 fallbackTrackingUrls = uri.getQueryParameters("fallbackTrackingUrl");
             } catch (UnsupportedOperationException e) {
                 // If the URL is not hierarchical, getQueryParameter[s] will throw
-                // UnsupportedOperationException (see http://developer.android.com/reference/android/net/Uri.html#getQueryParameter(java.lang.String)
+                // UnsupportedOperationException (see https://developer.android.com/reference/android/net/Uri.html#getQueryParameter(java.lang.String)
                 throw new IntentNotResolvableException("Deeplink+ URL was not a hierarchical" +
                         " URI.");
             }
@@ -262,16 +274,26 @@ protected void performAction(
         @Override
         public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
             final String scheme = uri.getScheme();
-            final String host = uri.getHost();
-            return !TextUtils.isEmpty(scheme) && !TextUtils.isEmpty(host);
+            return !TextUtils.isEmpty(scheme);
         }
 
         @Override
         protected void performAction(
                 @NonNull final Context context, @NonNull final Uri uri,
-                @NonNull final UrlHandler urlHandler)
+                @NonNull final UrlHandler urlHandler,
+                @Nullable String creativeId)
                 throws IntentNotResolvableException {
-            Intents.launchApplicationUrl(context, uri);
+            if (Constants.INTENT_SCHEME.equalsIgnoreCase(uri.getScheme())) {
+                try {
+                    final Intent intent = Intent.parseUri(uri.toString(), Intent.URI_INTENT_SCHEME);
+                    Intents.launchApplicationIntent(context, intent);
+                } catch (URISyntaxException e) {
+                    throw new IntentNotResolvableException("Intent uri had invalid syntax: "
+                            + uri.toString());
+                }
+            } else {
+                Intents.launchApplicationUrl(context, uri);
+            }
         }
     },
 
@@ -285,7 +307,8 @@ public boolean shouldTryHandlingUrl(@NonNull final Uri uri) {
         @Override
         protected void performAction(
                 @NonNull final Context context, @NonNull final Uri uri,
-                @NonNull final UrlHandler urlHandler)
+                @NonNull final UrlHandler urlHandler,
+                @Nullable final String creativeId)
                 throws IntentNotResolvableException { }
     };
 
@@ -293,14 +316,15 @@ public void handleUrl(
             UrlHandler urlHandler,
             @NonNull final Context context,
             @NonNull final Uri destinationUri,
-            final boolean fromUserInteraction)
+            final boolean fromUserInteraction,
+            @Nullable String creativeId)
             throws IntentNotResolvableException {
         MoPubLog.d("Ad event URL: " + destinationUri);
         if (mRequiresUserInteraction && !fromUserInteraction) {
             throw new IntentNotResolvableException("Attempted to handle action without user " +
                     "interaction.");
         } else {
-            performAction(context, destinationUri, urlHandler);
+            performAction(context, destinationUri, urlHandler, creativeId);
         }
     }
 
@@ -314,6 +338,7 @@ public void handleUrl(
 
     protected abstract void performAction(
             @NonNull final Context context, @NonNull final Uri uri,
-            @NonNull final UrlHandler urlHandler)
+            @NonNull final UrlHandler urlHandler,
+            @Nullable String creativeId)
             throws IntentNotResolvableException;
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/UrlHandler.java b/mopub-sdk/src/main/java/com/mopub/common/UrlHandler.java
index 74abd946..599dd1c8 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/UrlHandler.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/UrlHandler.java
@@ -68,6 +68,7 @@ void urlHandlingFailed(@NonNull final String url,
         @NonNull
         private MoPubSchemeListener moPubSchemeListener = EMPTY_MOPUB_SCHEME_LISTENER;
         private boolean skipShowMoPubBrowser = false;
+        @Nullable private String creativeId;
 
         /**
          * Sets the {@link UrlAction}s to support in the {@code UrlHandler} to build.
@@ -122,7 +123,7 @@ public Builder withMoPubSchemeListener(
 
         /**
          * If called, will avoid starting a {@link MoPubBrowser} activity where applicable.
-         * (see {@link Intents#showMoPubBrowserForUrl(Context, Uri)})
+         * (see {@link Intents#showMoPubBrowserForUrl(Context, Uri, String)})
          *
          * @return A {@link Builder} that will skip starting a {@code MoPubBrowser}.
          */
@@ -131,6 +132,16 @@ public Builder withoutMoPubBrowser() {
             return this;
         }
 
+        /**
+         * Sets the creativeId for the ad associated with this URL
+         *
+         * @return A {@link Builder} that knows the creativeID for the ad.
+         */
+        public Builder withDspCreativeId(@Nullable final String creativeId) {
+            this.creativeId = creativeId;
+            return this;
+        }
+
         /**
          * Creates an immutable {@link UrlHandler} with the desired configuration, according to the
          * other {@link Builder} methods called before.
@@ -139,7 +150,7 @@ public Builder withoutMoPubBrowser() {
          */
         public UrlHandler build() {
             return new UrlHandler(supportedUrlActions, resultActions, moPubSchemeListener,
-                    skipShowMoPubBrowser);
+                    skipShowMoPubBrowser, creativeId);
         }
     }
 
@@ -165,6 +176,7 @@ public void urlHandlingFailed(@NonNull String url, @NonNull UrlAction lastFailed
     private ResultActions mResultActions;
     @NonNull
     private MoPubSchemeListener mMoPubSchemeListener;
+    @Nullable private String mDspCreativeId;
     private boolean mSkipShowMoPubBrowser;
     private boolean mAlreadySucceeded;
     private boolean mTaskPending;
@@ -176,11 +188,13 @@ private UrlHandler(
             @NonNull final EnumSet<UrlAction> supportedUrlActions,
             @NonNull final ResultActions resultActions,
             @NonNull final MoPubSchemeListener moPubSchemeListener,
-            final boolean skipShowMoPubBrowser) {
+            final boolean skipShowMoPubBrowser,
+            @Nullable final String dspCreativeId) {
         mSupportedUrlActions = EnumSet.copyOf(supportedUrlActions);
         mResultActions = resultActions;
         mMoPubSchemeListener = moPubSchemeListener;
         mSkipShowMoPubBrowser = skipShowMoPubBrowser;
+        mDspCreativeId = dspCreativeId;
         mAlreadySucceeded = false;
         mTaskPending = false;
     }
@@ -295,7 +309,7 @@ public boolean handleResolvedUrl(@NonNull final Context context,
             if (urlAction.shouldTryHandlingUrl(destinationUri)) {
                 try {
                     urlAction.handleUrl(UrlHandler.this, context, destinationUri,
-                            fromUserInteraction);
+                            fromUserInteraction, mDspCreativeId);
                     if (!mAlreadySucceeded && !mTaskPending
                             && !UrlAction.IGNORE_ABOUT_SCHEME.equals(urlAction)
                             && !UrlAction.HANDLE_MOPUB_SCHEME.equals(urlAction)) {
diff --git a/mopub-sdk/src/main/java/com/mopub/common/UrlResolutionTask.java b/mopub-sdk/src/main/java/com/mopub/common/UrlResolutionTask.java
index 823f39c2..c2163480 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/UrlResolutionTask.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/UrlResolutionTask.java
@@ -5,10 +5,13 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.AsyncTasks;
 
 import java.io.IOException;
 import java.net.HttpURLConnection;
+import java.net.URI;
+import java.net.URISyntaxException;
 import java.net.URL;
 
 @VisibleForTesting
@@ -63,13 +66,16 @@ protected String doInBackground(@Nullable String... urls) {
 
         } catch (IOException e) {
             return null;
+        } catch (URISyntaxException e) {
+            return null;
         }
 
         return previousUrl;
     }
 
     @Nullable
-    private String getRedirectLocation(@NonNull final String urlString) throws IOException {
+    private String getRedirectLocation(@NonNull final String urlString) throws IOException,
+            URISyntaxException {
         final URL url = new URL(urlString);
 
         HttpURLConnection httpUrlConnection = null;
@@ -77,13 +83,7 @@ private String getRedirectLocation(@NonNull final String urlString) throws IOExc
             httpUrlConnection = (HttpURLConnection) url.openConnection();
             httpUrlConnection.setInstanceFollowRedirects(false);
 
-            int responseCode = httpUrlConnection.getResponseCode();
-
-            if (responseCode >= 300 && responseCode < 400) {
-                return httpUrlConnection.getHeaderField("Location");
-            } else {
-                return null;
-            }
+            return resolveRedirectLocation(urlString, httpUrlConnection);
         } finally {
             if (httpUrlConnection != null) {
                 httpUrlConnection.disconnect();
@@ -91,6 +91,29 @@ private String getRedirectLocation(@NonNull final String urlString) throws IOExc
         }
     }
 
+    @VisibleForTesting
+    @Nullable
+    static String resolveRedirectLocation(@NonNull final String baseUrl,
+            @NonNull final HttpURLConnection httpUrlConnection) throws IOException, URISyntaxException {
+        final URI baseUri = new URI(baseUrl);
+        final int responseCode = httpUrlConnection.getResponseCode();
+        final String redirectUrl = httpUrlConnection.getHeaderField("Location");
+        String result = null;
+
+        if (responseCode >= 300 && responseCode < 400) {
+            try {
+                // If redirectUrl is a relative path, then resolve() will correctly complete the path;
+                // otherwise, resolve() will return the redirectUrl
+                result =  baseUri.resolve(redirectUrl).toString();
+            } catch (IllegalArgumentException e) {
+                // Ensure the request is cancelled instead of resolving an intermediary URL
+                throw new URISyntaxException(redirectUrl, "Unable to parse invalid URL");
+            }
+        }
+
+        return result;
+    }
+
     @Override
     protected void onPostExecute(@Nullable final String resolvedUrl) {
         super.onPostExecute(resolvedUrl);
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/BaseEvent.java b/mopub-sdk/src/main/java/com/mopub/common/event/BaseEvent.java
index db599026..5571fc30 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/event/BaseEvent.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/event/BaseEvent.java
@@ -5,7 +5,6 @@
 
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.Preconditions;
-import com.mopub.common.VisibleForTesting;
 
 import java.text.SimpleDateFormat;
 import java.util.Date;
@@ -14,12 +13,12 @@
 
 public abstract class BaseEvent {
 
-    public static enum ScribeCategory {
+    public enum ScribeCategory {
         EXCHANGE_CLIENT_EVENT("exchange_client_event"),
         EXCHANGE_CLIENT_ERROR("exchange_client_error");
 
         @NonNull private final String mScribeCategory;
-        private ScribeCategory(@NonNull String scribeCategory) {
+        ScribeCategory(@NonNull String scribeCategory) {
             mScribeCategory = scribeCategory;
         }
 
@@ -29,13 +28,13 @@ public String getCategory() {
         }
     }
 
-    public static enum SdkProduct {
+    public enum SdkProduct {
         NONE(0),
         WEB_VIEW(1),
         NATIVE(2);
 
         private final int mType;
-        private SdkProduct(int type) {
+        SdkProduct(int type) {
             mType = type;
         }
 
@@ -44,14 +43,14 @@ public int getType() {
         }
     }
 
-    public static enum AppPlatform {
+    public enum AppPlatform {
         NONE(0),
         IOS(1),
         ANDROID(2),
         MOBILE_WEB(3);
 
         private final int mType;
-        private AppPlatform(int type) {
+        AppPlatform(int type) {
             mType = type;
         }
 
@@ -61,12 +60,25 @@ public int getType() {
     }
 
     public enum Name {
+        // Ad Requests:
         AD_REQUEST("ad_request"),
         IMPRESSION_REQUEST("impression_request"),
-        CLICK_REQUEST("click_request");
+        CLICK_REQUEST("click_request"),
+
+        // Native Video:
+        DOWNLOAD_START("download_start"),
+        DOWNLOAD_VIDEO_READY("download_video_ready"),
+        DOWNLOAD_BUFFERING("download_video_buffering"),
+        DOWNLOAD_FINISHED("download_finished"),
+        ERROR_DURING_PLAYBACK("error_during_playback"),
+        ERROR_FAILED_TO_PLAY("error_failed_to_play"),
+
+        // Ad Interactions
+        AD_DWELL_TIME("clickthrough_dwell_time"),
+        ;
 
         @NonNull private final String mName;
-        private Name(@NonNull String name) {
+        Name(@NonNull String name) {
             mName = name;
         }
 
@@ -77,10 +89,13 @@ public String getName() {
     }
 
     public enum Category {
-        REQUESTS("requests");
+        REQUESTS("requests"),
+        NATIVE_VIDEO("native_video"),
+        AD_INTERACTIONS("ad_interactions"),
+        ;
 
         @NonNull private final String mCategory;
-        private Category(@NonNull String category) {
+        Category(@NonNull String category) {
             mCategory = category;
         }
 
@@ -91,10 +106,13 @@ public String getCategory() {
     }
 
     public enum SamplingRate {
-        AD_REQUEST(0.1);
+        AD_REQUEST(0.1),
+        NATIVE_VIDEO(0.1),
+        AD_INTERACTIONS(0.1),
+        ;
 
         private final double mSamplingRate;
-        private SamplingRate(double samplingRate) {
+        SamplingRate(double samplingRate) {
             mSamplingRate = samplingRate;
         }
 
@@ -113,6 +131,7 @@ public double getSamplingRate() {
     @Nullable private final String mAdNetworkType;
     @Nullable private final Double mAdWidthPx;
     @Nullable private final Double mAdHeightPx;
+    @Nullable private final String mDspCreativeId;
     @Nullable private final Integer mDeviceScreenWidthDip;
     @Nullable private final Integer mDeviceScreenHeightDip;
     @Nullable private final Double mGeoLat;
@@ -151,6 +170,7 @@ public BaseEvent(@NonNull final Builder builder) {
         mAdNetworkType = builder.mAdNetworkType;
         mAdWidthPx = builder.mAdWidthPx;
         mAdHeightPx = builder.mAdHeightPx;
+        mDspCreativeId = builder.mDspCreativeId;
         mGeoLat = builder.mGeoLat;
         mGeoLon = builder.mGeoLon;
         mGeoAccuracy = builder.mGeoAccuracy;
@@ -222,6 +242,11 @@ public String getAdCreativeId() {
         return mAdCreativeId;
     }
 
+    @Nullable
+    public String getDspCreativeId() {
+        return mDspCreativeId;
+    }
+
     @Nullable
     public String getAdType() {
         return mAdType;
@@ -408,6 +433,7 @@ public String toString() {
                 "AdNetworkType: " + getAdNetworkType() + "\n" +
                 "AdWidthPx: " + getAdWidthPx() + "\n" +
                 "AdHeightPx: " + getAdHeightPx() + "\n" +
+                "DspCreativeId: " + getDspCreativeId() + "\n" +
                 "AppPlatform: " + getAppPlatform() + "\n" +
                 "AppName: " + getAppName() + "\n" +
                 "AppPackageName: " + getAppPackageName() + "\n" +
@@ -448,6 +474,7 @@ public String toString() {
         @Nullable private String mAdNetworkType;
         @Nullable private Double mAdWidthPx;
         @Nullable private Double mAdHeightPx;
+        @Nullable private String mDspCreativeId;
         @Nullable private Double mGeoLat;
         @Nullable private Double mGeoLon;
         @Nullable private Double mGeoAccuracy;
@@ -519,6 +546,12 @@ public Builder withAdHeightPx(@Nullable Double adHeightPx) {
             return this;
         }
 
+        @NonNull
+        public Builder withDspCreativeId(@Nullable String dspCreativeId) {
+            mDspCreativeId = dspCreativeId;
+            return this;
+        }
+
         @NonNull
         public Builder withGeoLat(@Nullable Double geoLat) {
             mGeoLat = geoLat;
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/Event.java b/mopub-sdk/src/main/java/com/mopub/common/event/Event.java
index 4228ab35..949ce72f 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/event/Event.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/event/Event.java
@@ -1,6 +1,10 @@
 package com.mopub.common.event;
 
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.logging.MoPubLog;
 
 /**
  * Immutable data class with client event data.
@@ -21,4 +25,50 @@ public Event build() {
             return new Event(this);
         }
     }
+
+    /**
+     * Creates a BaseEvent from the specified event and the metadata surrounding the event.
+     *
+     * @param name         Event name: See {@link com.mopub.common.event.BaseEvent.Name} for
+     *                     constants.
+     * @param category     Category: See {@link com.mopub.common.event.BaseEvent.Category} for
+     *                     constants.
+     * @param samplingRate The percentage of events to sample. See {@link com.mopub.common.event.BaseEvent.SamplingRate}
+     *                     for constants.
+     * @param eventDetails Data object containing the remaining meta data around this event.
+     * @return An {@link BaseEvent} with all the parts combined, or {@code null} if there is no
+     * metadata available.
+     */
+    @Nullable
+    public static BaseEvent createEventFromDetails(@NonNull final BaseEvent.Name name,
+            @NonNull final BaseEvent.Category category,
+            @NonNull final BaseEvent.SamplingRate samplingRate,
+            @Nullable EventDetails eventDetails) {
+        Preconditions.checkNotNull(name);
+        Preconditions.checkNotNull(category);
+        Preconditions.checkNotNull(samplingRate);
+
+        if (eventDetails == null) {
+            MoPubLog.d("Unable to log event due to no details present");
+            return null;
+        }
+
+        return new Event.Builder(name,
+                category,
+                samplingRate.getSamplingRate())
+                .withAdUnitId(eventDetails.getAdUnitId())
+                .withAdCreativeId(eventDetails.getDspCreativeId())
+                .withAdType(eventDetails.getAdType())
+                .withAdNetworkType(eventDetails.getAdNetworkType())
+                .withAdWidthPx(eventDetails.getAdWidthPx())
+                .withAdHeightPx(eventDetails.getAdHeightPx())
+                .withGeoLat(eventDetails.getGeoLatitude())
+                .withGeoLon(eventDetails.getGeoLongitude())
+                .withGeoAccuracy(eventDetails.getGeoAccuracy())
+                .withPerformanceDurationMs(eventDetails.getPerformanceDurationMs())
+                .withRequestId(eventDetails.getRequestId())
+                .withRequestStatusCode(eventDetails.getRequestStatusCode())
+                .withRequestUri(eventDetails.getRequestUri())
+                .build();
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/EventDetails.java b/mopub-sdk/src/main/java/com/mopub/common/event/EventDetails.java
new file mode 100644
index 00000000..dcba998a
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/event/EventDetails.java
@@ -0,0 +1,256 @@
+package com.mopub.common.event;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.util.Json;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class EventDetails {
+
+    public static class Builder {
+        @NonNull private final Map<String, String> eventDetailsMap;
+
+        public Builder() {
+            eventDetailsMap = new HashMap<String, String>();
+        }
+
+        @NonNull
+        public Builder adUnitId(@Nullable final String adUnitId) {
+            if (adUnitId != null) {
+                eventDetailsMap.put(AD_UNIT_ID_KEY, adUnitId);
+            }
+            return this;
+        }
+
+        @NonNull
+        public Builder dspCreativeId(@Nullable final String dspCreativeId) {
+            if (dspCreativeId != null) {
+                eventDetailsMap.put(DSP_CREATIVE_ID_KEY, dspCreativeId);
+            }
+            return this;
+        }
+
+        @NonNull
+        public Builder adType(@Nullable final String adType) {
+            if (adType != null) {
+                eventDetailsMap.put(AD_TYPE_KEY, adType);
+            }
+            return this;
+        }
+
+        @NonNull
+        public Builder adNetworkType(@Nullable final String adNetworkType) {
+            if (adNetworkType != null) {
+                eventDetailsMap.put(AD_NETWORK_TYPE_KEY, adNetworkType);
+            }
+            return this;
+        }
+
+        @NonNull
+        public Builder adWidthPx(@Nullable final Integer adWidthPx) {
+            if (adWidthPx != null) {
+                eventDetailsMap.put(AD_WIDTH_PX_KEY, String.valueOf(adWidthPx));
+            }
+            return this;
+        }
+
+        @NonNull
+        public Builder adHeightPx(@Nullable final Integer adHeightPx) {
+            if (adHeightPx != null) {
+                eventDetailsMap.put(AD_HEIGHT_PX_KEY, String.valueOf(adHeightPx));
+            }
+            return this;
+        }
+
+        @NonNull
+        public Builder geoLatitude(@Nullable final Double geoLatitude) {
+            if (geoLatitude != null) {
+                eventDetailsMap.put(GEO_LATITUDE_KEY, String.valueOf(geoLatitude));
+            }
+            return this;
+        }
+
+        @NonNull
+        public Builder geoLongitude(@Nullable final Double geoLongitude) {
+            if (geoLongitude != null) {
+                eventDetailsMap.put(GEO_LONGITUDE_KEY, String.valueOf(geoLongitude));
+            }
+            return this;
+        }
+
+        @NonNull
+        public Builder geoAccuracy(@Nullable final Float geoAccuracy) {
+            if (geoAccuracy != null) {
+                eventDetailsMap.put(GEO_ACCURACY_KEY, String.valueOf((double) geoAccuracy));
+            }
+            return this;
+        }
+
+        @NonNull
+        public Builder performanceDurationMs(@Nullable final Long performanceDurationMs) {
+            if (performanceDurationMs != null) {
+                eventDetailsMap.put(PERFORMANCE_DURATION_MS_KEY,
+                        String.valueOf((double) performanceDurationMs));
+            }
+            return this;
+        }
+
+        @NonNull
+        public Builder requestId(@Nullable final String requestId) {
+            if (requestId != null) {
+                eventDetailsMap.put(REQUEST_ID_KEY, requestId);
+            }
+            return this;
+        }
+
+        @NonNull
+        public Builder requestStatusCode(@Nullable final Integer requestStatusCode) {
+            if (requestStatusCode != null) {
+                eventDetailsMap.put(REQUEST_STATUS_CODE_KEY, String.valueOf(requestStatusCode));
+            }
+            return this;
+        }
+
+        @NonNull
+        public Builder requestUri(@Nullable final String requestUri) {
+            if (requestUri != null) {
+                eventDetailsMap.put(REQUEST_URI_KEY, requestUri);
+            }
+            return this;
+        }
+
+        @NonNull
+        public EventDetails build() {
+            return new EventDetails(eventDetailsMap);
+        }
+    }
+
+
+    private static final String AD_UNIT_ID_KEY = "ad_unit_id";
+    private static final String DSP_CREATIVE_ID_KEY = "dsp_creative_id";
+    private static final String AD_TYPE_KEY = "ad_type";
+    private static final String AD_NETWORK_TYPE_KEY = "ad_network_type";
+    private static final String AD_WIDTH_PX_KEY = "ad_width_px";
+    private static final String AD_HEIGHT_PX_KEY = "ad_height_px_key";
+    private static final String GEO_LATITUDE_KEY = "geo_latitude";
+    private static final String GEO_LONGITUDE_KEY = "geo_longitude";
+    private static final String GEO_ACCURACY_KEY = "geo_accuracy_key";
+    private static final String PERFORMANCE_DURATION_MS_KEY = "performance_duration_ms";
+    private static final String REQUEST_ID_KEY = "request_id_key";
+    private static final String REQUEST_STATUS_CODE_KEY = "request_status_code";
+    private static final String REQUEST_URI_KEY = "request_uri_key";
+
+    @NonNull private final Map<String, String> mEventDetailsMap;
+
+    private EventDetails(@NonNull final Map<String, String> eventDetailsMap) {
+        Preconditions.checkNotNull(eventDetailsMap);
+        mEventDetailsMap = eventDetailsMap;
+    }
+
+    @Nullable
+    public String getAdUnitId() {
+        return mEventDetailsMap.get(AD_UNIT_ID_KEY);
+    }
+
+    @Nullable
+    public String getDspCreativeId() {
+        return mEventDetailsMap.get(DSP_CREATIVE_ID_KEY);
+    }
+
+    @Nullable
+    public String getAdType() {
+        return mEventDetailsMap.get(AD_TYPE_KEY);
+    }
+
+    @Nullable
+    public String getAdNetworkType() {
+        return mEventDetailsMap.get(AD_NETWORK_TYPE_KEY);
+    }
+
+    @Nullable
+    public Double getAdWidthPx() {
+        return getNullableDoubleValue(mEventDetailsMap, AD_WIDTH_PX_KEY);
+    }
+
+    @Nullable
+    public Double getAdHeightPx() {
+        return getNullableDoubleValue(mEventDetailsMap, AD_HEIGHT_PX_KEY);
+
+    }
+
+    @Nullable
+    public Double getGeoLatitude() {
+        return getNullableDoubleValue(mEventDetailsMap, GEO_LATITUDE_KEY);
+    }
+
+    @Nullable
+    public Double getGeoLongitude() {
+        return getNullableDoubleValue(mEventDetailsMap, GEO_LONGITUDE_KEY);
+    }
+
+    @Nullable
+    public Double getGeoAccuracy() {
+        return getNullableDoubleValue(mEventDetailsMap, GEO_ACCURACY_KEY);
+    }
+
+    @Nullable
+    public Double getPerformanceDurationMs() {
+        return getNullableDoubleValue(mEventDetailsMap, PERFORMANCE_DURATION_MS_KEY);
+    }
+
+    @Nullable
+    public String getRequestId() {
+        return mEventDetailsMap.get(REQUEST_ID_KEY);
+    }
+
+    @Nullable
+    public Integer getRequestStatusCode() {
+        return getNullableIntegerValue(mEventDetailsMap, REQUEST_STATUS_CODE_KEY);
+    }
+
+    @Nullable
+    public String getRequestUri() {
+        return mEventDetailsMap.get(REQUEST_URI_KEY);
+    }
+
+    public String toJsonString() {
+        return Json.mapToJsonString(mEventDetailsMap);
+    }
+
+    @Override
+    public String toString() {
+        return toJsonString();
+    }
+
+    @Nullable
+    private static Double getNullableDoubleValue(@NonNull final Map<String, String> map,
+            @NonNull final String key) {
+        final String value = map.get(key);
+        if (value == null) {
+            return null;
+        }
+        try {
+            return Double.parseDouble(value);
+        } catch (NumberFormatException e) {
+            return null;
+        }
+    }
+
+    @Nullable
+    private static Integer getNullableIntegerValue(@NonNull final Map<String, String> map,
+            @NonNull final String key) {
+        final String value = map.get(key);
+        if (value == null) {
+            return null;
+        }
+        try {
+            return Integer.parseInt(value);
+        } catch (NumberFormatException e) {
+            return null;
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/EventRecorder.java b/mopub-sdk/src/main/java/com/mopub/common/event/EventRecorder.java
index efaa5515..e24dea37 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/event/EventRecorder.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/event/EventRecorder.java
@@ -4,5 +4,5 @@
  * This interface represents a backend to which MoPub client events are logged.
  */
 public interface EventRecorder {
-    public void record(BaseEvent baseEvent);
+    void record(BaseEvent baseEvent);
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/EventSampler.java b/mopub-sdk/src/main/java/com/mopub/common/event/EventSampler.java
index 607d28d8..9b514448 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/event/EventSampler.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/event/EventSampler.java
@@ -5,6 +5,8 @@
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 
+import java.util.LinkedHashMap;
+import java.util.Map;
 import java.util.Random;
 
 /**
@@ -12,7 +14,15 @@
  */
 public class EventSampler {
 
+    @VisibleForTesting static final int MAX_SIZE = 100;
+    private static final float LOAD_FACTOR = 0.75f;
+    /**
+     * The capacity is just large enough to hold the max size without rehashing.
+     */
+    private static final int CAPACITY = (int) (MAX_SIZE / LOAD_FACTOR + 2);
+
     @NonNull private Random mRandom;
+    @NonNull private LinkedHashMap<String, Boolean> mSampleDecisionsCache;
 
     public EventSampler() {
         this(new Random());
@@ -21,19 +31,41 @@ public EventSampler() {
     @VisibleForTesting
     public EventSampler(@NonNull Random random) {
         mRandom = random;
+        mSampleDecisionsCache = new LinkedHashMap<String, Boolean>(CAPACITY, LOAD_FACTOR, true) {
+            @Override
+            protected boolean removeEldestEntry(Map.Entry<String, Boolean> eldest) {
+                return size() > MAX_SIZE;
+            }
+        };
     }
 
     /**
-     * Samples events based on custom rules.
+     * Samples events based on custom rules. Events with the same request ID will either all pass or
+     * be discarded together.
      *
      * @param baseEvent The event to be sampled.
-     *
-     * @return Will return {@code true} if the event passed sampling and {@code false}
-     * if it is to be discarded.
+     * @return Will return {@code true} if the event passed sampling and {@code false} if it is to
+     * be discarded.
      */
     boolean sample(@NonNull BaseEvent baseEvent) {
         Preconditions.checkNotNull(baseEvent);
 
-        return mRandom.nextDouble() < baseEvent.getSamplingRate();
+        final String requestId = baseEvent.getRequestId();
+        if (requestId == null) {
+            return mRandom.nextDouble() < baseEvent.getSamplingRate();
+        }
+
+        final Boolean existingSample = mSampleDecisionsCache.get(requestId);
+        if (existingSample != null) {
+            return existingSample;
+        }
+        final boolean newSample = mRandom.nextDouble() < baseEvent.getSamplingRate();
+        mSampleDecisionsCache.put(requestId, newSample);
+        return newSample;
+    }
+
+    @VisibleForTesting
+    int getCacheSize() {
+        return mSampleDecisionsCache.size();
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/EventSerializer.java b/mopub-sdk/src/main/java/com/mopub/common/event/EventSerializer.java
index 94cf7c31..b91c95cd 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/event/EventSerializer.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/event/EventSerializer.java
@@ -74,6 +74,7 @@ public JSONObject serializeAsJson(@NonNull BaseEvent event) throws JSONException
         jsonObject.put("ad_network_type", event.getAdNetworkType());
         jsonObject.put("ad_width_px", event.getAdWidthPx());
         jsonObject.put("ad_height_px", event.getAdHeightPx());
+        jsonObject.put("dsp_creative_id", event.getDspCreativeId());
 
         // App Details
         BaseEvent.AppPlatform appPlatform = event.getAppPlatform();
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/DeviceUtils.java b/mopub-sdk/src/main/java/com/mopub/common/util/DeviceUtils.java
index 47406b98..ed4142da 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/DeviceUtils.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/DeviceUtils.java
@@ -13,9 +13,9 @@
 import android.net.NetworkInfo;
 import android.os.Build;
 import android.os.StatFs;
-import android.provider.Settings;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.support.v4.content.ContextCompat;
 import android.util.DisplayMetrics;
 import android.view.Display;
 import android.view.Surface;
@@ -25,20 +25,14 @@
 import com.mopub.common.Preconditions;
 import com.mopub.common.logging.MoPubLog;
 
-import org.apache.http.conn.util.InetAddressUtils;
-
 import java.io.File;
-import java.net.InetAddress;
-import java.net.NetworkInterface;
 import java.net.SocketException;
-import java.util.Locale;
 
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
 import static android.Manifest.permission.INTERNET;
 import static com.mopub.common.util.Reflection.MethodBuilder;
 import static com.mopub.common.util.VersionCode.HONEYCOMB;
 import static com.mopub.common.util.VersionCode.currentApiLevel;
-import static java.util.Collections.list;
 
 public class DeviceUtils {
     private static final int MAX_MEMORY_CACHE_SIZE = 30 * 1024 * 1024; // 30 MB
@@ -47,7 +41,7 @@
 
     private DeviceUtils() {}
 
-    public static enum ForceOrientation {
+    public enum ForceOrientation {
         FORCE_PORTRAIT("portrait"),
         FORCE_LANDSCAPE("landscape"),
         DEVICE_ORIENTATION("device"),
@@ -55,7 +49,7 @@ private DeviceUtils() {}
 
         @NonNull private final String mKey;
 
-        private ForceOrientation(@NonNull final String key) {
+        ForceOrientation(@NonNull final String key) {
             mKey = key;
         }
 
@@ -71,64 +65,12 @@ public static ForceOrientation getForceOrientation(@Nullable String key) {
         }
     }
 
-    public static enum IP {
-        IPv4,
-        IPv6;
-
-        private boolean matches(final String address) {
-            switch (this) {
-                case IPv4:
-                    return InetAddressUtils.isIPv4Address(address);
-                case IPv6:
-                    return InetAddressUtils.isIPv6Address(address);
-                default:
-                    return false;
-            }
-        }
-
-        private String toString(final String address) {
-            switch (this) {
-                case IPv4:
-                    return address;
-                case IPv6:
-                    return address.split("%")[0];
-                default:
-                    return null;
-            }
-        }
-    }
-
-    public static String getIpAddress(IP ip) throws SocketException {
-        for (final NetworkInterface networkInterface : list(NetworkInterface.getNetworkInterfaces())) {
-            for (final InetAddress address : list(networkInterface.getInetAddresses())) {
-                if (!address.isLoopbackAddress()) {
-                    String hostAddress = address.getHostAddress().toUpperCase(Locale.US);
-                    if (ip.matches(hostAddress)) {
-                        return ip.toString(hostAddress);
-                    }
-                }
-            }
-        }
-
-        return null;
-    }
-
-    public static String getHashedUdid(final Context context) {
-        if (context == null) {
-            return null;
-        }
-
-        String udid = Settings.Secure.getString(context.getContentResolver(), Settings.Secure.ANDROID_ID);
-        return Utils.sha1(udid);
-    }
-
     public static boolean isNetworkAvailable(@Nullable final Context context) {
         if (context == null) {
             return false;
         }
 
-        final int internetPermission = context.checkCallingOrSelfPermission(INTERNET);
-        if (internetPermission == PackageManager.PERMISSION_DENIED) {
+        if (!DeviceUtils.isPermissionGranted(context, INTERNET)) {
             return false;
         }
 
@@ -137,8 +79,7 @@ public static boolean isNetworkAvailable(@Nullable final Context context) {
          * It's possible to not have permission to check network state but still be able
          * to access the network itself.
          */
-        final int networkAccessPermission = context.checkCallingOrSelfPermission(ACCESS_NETWORK_STATE);
-        if (networkAccessPermission == PackageManager.PERMISSION_DENIED) {
+        if (!DeviceUtils.isPermissionGranted(context, ACCESS_NETWORK_STATE)) {
             return true;
         }
 
@@ -307,4 +248,37 @@ public static Point getDeviceDimensions(@NonNull final Context context) {
 
         return new Point(bestWidthPixels, bestHeightPixels);
     }
+
+    public static boolean isPermissionGranted(@NonNull final Context context,
+            @NonNull final String permission) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(permission);
+
+        return ContextCompat.checkSelfPermission(context, permission) ==
+                PackageManager.PERMISSION_GRANTED;
+    }
+
+    /**
+     * @deprecated As of release 4.4.0
+     */
+    @Deprecated
+    public enum IP { IPv4, IPv6 }
+
+    /**
+     * @deprecated As of release 4.4.0
+     */
+    @Deprecated
+    @Nullable
+    public static String getIpAddress(IP ip) throws SocketException {
+        return null;
+    }
+
+    /**
+     * @deprecated As of release 4.4.0
+     */
+    @Deprecated
+    @Nullable
+    public static String getHashedUdid(final Context context) {
+        return null;
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Drawables.java b/mopub-sdk/src/main/java/com/mopub/common/util/Drawables.java
index 5e1b1a68..652bf750 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/Drawables.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/Drawables.java
@@ -22,7 +22,12 @@
     INTERSTITIAL_CLOSE_BUTTON_NORMAL("iVBORw0KGgoAAAANSUhEUgAAAGAAAABgCAMAAADVRocKAAAAUVBMVEUAAAD///////////////////////////////////////////////8AAAAQEBAgICAwMDBAQEBQUFBgYGBwcHCAgICfn5+/v7/Pz8/v7+////9QtCtmAAAADXRSTlMAECBQYHCAj5+/z9/v87rZqQAAAfxJREFUeAHslc2SgyAQhHeJ8UcZVBIJ+P4PuoWZA26t7ehySZV9DKn+GLoz+bp06dKlD5IqqqabWV1TFiqn+61m71Rdfct090rPG9KV+r99PUPVKpu9d9PImpzPg7hrNgnOGlrJWBf4UN/PXr9lh5elP2Vf/IVWnaoOX9/1tKne8RAnClXy7UeCGnmK8qj/O93wpF09wzvrM/5+IIEGDwnA3xkSyThAAO/vSCx3LIcb8IcEYZeUBv6QoJUI0CJ/TGhF+2Hpj6GDMkuX7sIHCgMd1hAkj8QNTX5fDwQbwiP5xYm6qpb9kPijceKlE8KyNZRkgDH1Z8KGf0oYBSOoXw0K8zZh4EOzbhIeoYpf6dcmawI66uMHFQRoTgDZgIOYgt5dEhYboY8tLwwYccBXxYOFnZg7jhgQgD/H3O10yOI4cfQW96iIxwYXBlfLxIMCltQTQQLwj/Lwj6fhCCAB+HMIDcx4IkzA/jTBlHkPQQL05320A8AE5C8HYALwxwCFAUyA/hjwnQ+Q4Yk+L+QsNf1pzw4NAIBhEAi6iqruP21lTCTnYIcEePih8VfBnx1/19xwuGVy0/exhQcvHx15+OXx3RcQXKF8CfQ11hdxjxI8DPE4xwMpj9Q8FPRY04NZj5Y9HN/x/kvifT9Q+InFj0Qzc52ZuW505vKqqqr6JLIRlkedBesAAAAASUVORK5CYII="),
     INTERSTITIAL_CLOSE_BUTTON_PRESSED("iVBORw0KGgoAAAANSUhEUgAAAGAAAABgCAMAAADVRocKAAAAY1BMVEUAAAAjHyD///93cXH///9bVlZ3cXF3cXFxbGx3cXFybGx3cXF3cXFzbW13cXF3cXF0bm53cXF3cXETEhIZGBggHh4mJCQsKioyMDA5NjY/PDxFQkJSTU1eWVlkX19xa2t3cXE1H1L7AAAAE3RSTlMACBAgIDBQYHiAiI+fp7/P19/vm4QQ3gAAAg9JREFUeAHsld1ygyAUhNumahKNjoBIIhHf/ylb8cwEO2XBn5vMuJcysx/HXY8fhw4dOvRGOmV5WQ+kurxmpz3d04K8XdVFutPdczZ4xPLtcyS3AeqWbLt98bLqddeSOt2/nhcbpjgzMjFaCT6TUNrQITuvvX5FDk/F/5V6DpOqVUOkdH3dcK8aTUOsKNSFbt9yqJamuCz1n9I1Dx7Uw0xZr/HvJY+Q7AEB+mvBoyQ0IID3r3m09LIcUugPCGlk/xn0BwQW9z1U2B8Rqqj9YPsjlgKE7dI58gUZyRdLmtlLwg11vq87gklzd764qK4mdj84/mAce2mHYLdGEgDY/0vr+hPB4+8SWvsHCiTwp0Fm8BMkHYp5k3AK+fCrZm4yI8CjZnyQQwCzCQAbcEApsOCSUMgIP1ZwYVBHDb4qHswEmlpTxIAA/CnmOtAhhePE0Svco2w8FrgwuFpiPMhgSXtUeYn8rcaVd/UCSooAEKA/hVDCjDuOCdifdzBl2kOQAP1pHwUAmAD8YwGYgP0x4JsAiED+GPDpAXztCNj+it4v5F1q+tOeHVoBAMIwEBUI3kOx/7TILsB3lx3aJBd+aPpV+GfH3zU3HG6Z3vR5bOHBy0dHHn55fPcFRFcoXwJ9jfVF3KMEDkM8zvFAyiM1DwU91vRg1qNlD8c93vcDhZ9Y+Eg0WvvMzHW/zlxeKaX0AEs5cjxqSuS5AAAAAElFTkSuQmCC"),
 
-    THATCHED_BACKGROUND("");
+    THATCHED_BACKGROUND(""),
+
+    NATIVE_PRIVACY_INFORMATION_ICON("iVBORw0KGgoAAAANSUhEUgAAADwAAAA8CAYAAAA6/NlyAAAAAXNSR0IArs4c6QAAC6lJREFUaAXlWwlYVNcVfu+xyTAgiuKggDIM4C5aFwLyCUlE4xJcYjRaa2PbxGjVamo3o4lGm0Vr1ZiYJv2SNokKglbjlyZiEmjjglIDLqhRGBZZpiqoSIAZYKb3H/PI+ObcYcBB08/n5/feO+fcc/4z9757z73nIAoddA0YMMNT8CoLtQjNQZIgdLOYhQBBMKsFUfISBIvnbbOiSbCYjYIg1YqSUGUWhGui4FYpGINL8/PTTB0BTXSl0gEJCWrpZt2gZsHcTxTEXhaLxa09+kVRbLYIlnI3QTpv7qw6k5+VVdsePVQblzgcHR3Tp1EwxwqiRcecZB3quos5bxYsYoGHIB3Ny8suvlvNd+Xw4JEjw8yN5kSzRQi9WyDOtJdEoVTykDJPnzhR5Iw8JdMuh+Pi4nxv1BnHWSzCQEppR9NEUTjrr/I6eOTIkVtttdVmh6OjR0WYBPMTbOJhk8/9vESjpyCl5+Udv9QWFG1yeGD0iFj2QY1lBpxq56tWu82YPi181IgfhQVpNAFd2T/vTp06eXh4WH+sxsZGY31DQ0N1VXVVpcFQdTznZFHanr2Ft2prm510gk0Y4qGzeTlHnZR3DnhCQoL7tZq6yWazeUhrijUajdecWTOiHoqJ6avTanUeHu4erbWx5Tc2NZkKCvWFx7KzL+xISfvGYDCwZcvxJUnSqW5+qgNZWVlNjiWd6KnBg5N8mqUbT1kEc7AjZX5+fu4rf/PrmKSxj4z29PR0yXA3mUzGjENfHF7/+sbsmpoah86IglTmZvbfdfp0xreOcDocmujZqzfqfurIWTc3N/H5Xy2Onj4lOUGtVvs5MtZeXm1tbc2effuz/rT5jbzmZrZEcy443d1f9TdHPe0wMFB3DUy2WMyRHP2CTheuTvnw/bnxcbEjXNWrlC3ojh48OCp58sTwY8dPXKquvs6Jwix+9aamzlcqyy9QekDjOmydoCyWOF7DcUmPBm3btHFeQEBAd56Mq+m+vr5+kyeMH3i5vLyksFBPRl8s8NH00PQyXTFUXKbsk0P69tLTPJs1IPmLFz434OdP/yTZ3b31CcloNNaf/+bipa9zcwtLS8tullwuu8XmJCvYcG24undIsG9oaHDnYUOHhveLiozw8vLypoDa0pqamhr/+v4H+994a3u+Ld3mmQXrbjupJcvOIQQV1781/ZK3zsLZBb+Yz9Zhxxfz8UJq2p7je/d/XMKWH+53Z6uFLVfitOTHe8+cMX0U872vLY96fvvd99L5TovGLj6e25TBid2Q9uvW43GmvCdlAMP4t88vm8WWAbt2snxZefnl1zZu2rNm/atH88+dv8GWMpnV6h2yaJOavie/oqJCz5zuxmb/zryG0UMGRRSVlBRwhre7sanZ76qh4pxt+zuAW2PjZkuSrYD8jAkK3yyLG1QyzfbOvh0z682Mnz278MCFi5dqbHnteYaOj3am5Go0PYz9oqK0bBNhNxrxw8c9FBOR9dXhs5yJLDAoNLjkv+XlN2QMdzjcPTBoGht7dr8olh7MxrwJiq2XDRv/vDl1y7btZ2TFrrpn/uvfZbdu1ZSPHDE8kuFwV+rFDD4mPi50Z8ruPPajK9lsC27pyiawXJnR4jC2eE2CeYzMsL2vWL50KJYeW5r8DGeXLFvx3oF/flYm01x9P30m//q5cxcusqBmEOU0Zm+VyvvmkWPZBqVtdGAvTWixwVBm7eWWvat1P6uUZu+IoBBUECwBw3jTlq3pXx09epXiu5IGG7AFm5ReYARWimfrm7WHcVIhGE0TmbDdd7L2xRdiBw7o349ShG+2I4YxZQs09DT7pk39+/bVKWUwtDWBgY2ff5lZquSxr79LYN/Ik1eLi03WHsaxDPvlWnpbboCNQNIjD4+W323vmI1Xr1mXbUu7F8+wCduULcTxwKzkwTf4CLrVSZxBKYXwjl0PL2Tc/pd3D1FtHNHiY2O7p6fsePLE4azl+I9n0By1oXg828AKzFQb2UcJp4s4cKOEsMWj6Agq9h34hPyVKXnQ5s2do3tz66ZnWDTVz8fHxxf/8QwaeLx2FB22gYHi8TDDR/gqWY9SidNFbN6xn6WUIoKi6DxaYGCg18IFzyRTMyxo4EGG156i8zAAM7Ar27Bh7QZfJZwbK5l4x0kFtXlHbIxwkWrDo00cPy5UrVKpeXzwIMPjU3RgABYlD5iBXUnHu/WMnH3E3SgmjmUoOjYCzsbGcvtwbRhpQ+bj7oyMrTwwAIstTX7mYYev0u2MgCz6/Z3NdiRI7Hq+l3LuqVBfdK01SWdklDp4WHjY4StzmqU/iCsgoGtXgixgi0fRHdE++exgaW1dXS1PBjzI8Pg8Og8LDzt8ZYd+yPXYXzhdtKcKAvazFN0R7cqVK8a33n5nPzuesTuXAg08yDjSQfF4WHjY4SsLxeTE1p0q5aPUO6mCUFhQ0GaHoePvH+4o0BcWvbN0yaLE0OBe1gPB0rLysi1b38xsb2jKw8LDDl+Zw2272rK/VWqGY+z/biW9ve/twcK+YZayJC42C5JDLCysjw8hfl9IWm0YOf/wsMNX6XZ+1h4vMgL2VEEICQ4hjVCyHU1jXwb54/Oww1c2pCU2e5r9leCqqqqru/j7283UOl0YaGVKeWfevb29pQ2vrE8cOXyYNYNx4j9fn1rx+5WZ9fX15JavNZ3fYbETQ+rGjmglSLUSMu8Uk6U4yLVz+LBhZBRD6VDS4GzimPjRciyNZ9CUcs6+87AgT0XpgK8S+2lJx5DYohqxs612Oyz3rK1eimbLd/TMw8LDDl9ZjpnVVBBX+j/26RsbmxqVLJW3t8+0qcltintlHehZ+Vm+UzSZ5+gODMCilEEyDhlIJR3v8FVCAQlqKpQCSF4V6PUFSjre582ZHU/R7yWNhwGZRyrdavWR+SqhWgYFJBRYpCwpui5cqxv7aKKG4t0LGmwDA2WLhxk+wle2DiPBJJ2nGiM/i5QlxVu+ePE4di5MsTqUBpvLFy8ZTxkBVmCmeLKPVsQoDWJdbrc0IBmd8cWXhykFoaEhfV5Zt4Y876LkXUWDTZaL6k3pQy6ZSqDDN/iINlaHrXVQrDSIUrL+1Q3ZLD9Lxs8TxiUlTpk8MYRq1xE02IJNSjdyyEicUzyUPcm1Xi1jEnVQlDAmL5aMzqR4bHhJL77wh9mTJjxGnolRbdpLgw3Ygk1KBxLmvCoBW99aGqPoC3VQlDJk3isqK8noip0Udlr30qq5U5MndVhPQzdswBaFD9iAkeLBJ9uCthaHIYyiL6oRygyeW7IsFcOG4mM7tnb1qnmv/fHleHYoJ1Iy7aFBF3RCN2/LB0zAxiuFUPp0h8OocEPRFwWuoKCwdvXL61OQjKb4bKS5TXps/MOffrz3aVcsWdDBdM2HTuimbAILMAEbxYcvyqo9d6UgKtxYQjyCSogfzPi8MlIXsd9RQrxXz54hmze8/mxRcbGeZfSO7ExN0yttOHqfPXOGdvasJ+PC+vTROpIDD1UAwETLiUZ/ledBJY8cfq4seaivb6jTF+mLck+d0f/4qZmTlQDw/tGu1ANDhwxi21ttmLc3nX+2befSkgdZ8XdVd2RyHDKoBli7auWsjipVknEo7/hmMYz5PYu1VszgVeeR3waMoAqmR8/gLuzEngwhUWaAzDuS0cjPKoF1xDtm4/kLFn2Qk3Oymqeffe+nzubmHOLxuQ6jQf+oiIK6hib2LVlIh1BmgMw7ktEsxRHES7zxjDtLR6/u2p12cNHS5Z9WVVWRR1LQZS1M66zaXVxcbBc1yrbIb1hm4t6m0sPfrYhBetVVjiM2RmiLaI8XVMhYXVJ6KCtDCeI9Ky5le3BsS+9bcansNO5tLR9GCcITU6doketB+iOAZTOo8mGcn+FI6QdTPmzr9P97gbjDScvWUfnZYCivjgwPO4WiL0YLlOn38o4IqouP166cnGOcoIOPptVJi9+UTWgPyh95KH+EB+bPeJSOPzB/qKV0HO8/1D/F+x+ML5JiiCUb7QAAAABJRU5ErkJggg=="),
+    NATIVE_MUTED("iVBORw0KGgoAAAANSUhEUgAAAEIAAAA6CAYAAAAEJY9EAAAAAXNSR0IArs4c6QAABIlJREFUaAXVmluITVEYx53BuJNLbuUShsSDKEIeSYnkYRIPHvBESbyQy2BKvEheRpIHRSQPiHhQPJBLGB5EYuZhMHhB7pfx+5/OPtacOftyztl7nb2++mbttda3vvV9v/Zea+19JtMtBdLR0TGVMOrQdvR+JpP5YzusjO0JzfkAUEN9I7rQaH/G9S5gfDXaEr9UINWUDUxuQlAsU9AVurApVQPB3bCWRBf5JDvdpz2x5qqAAMJKMloekFWvgL5EuqyDAMIyMlmdSDYVOLUKAghaD9ZXEG9iQ62BAMJ8stAOkUqxAgIIM8l+K2plvnJIJx4YEKYR2Ha0RzkB2hqTKAggTCKR3aj1XaBUgImBAMIYgtmD9ik1qGrYJwICCCNIphEdWI2kypkzdhBAGJKDoNIZiRUEEHQH7ENHOkMgF2hsIIDQF58N6Nicb6eKWEAAoZasd6J1TmVvBFvx3g4E+diGJv7GyFz9mUcnVJXNfLN4QVmS4GMQA+ah2s0e4KOF8v8hB4Ph1GegMixFdGCaVcqAcmyJbzTj9qP5RZi2syRyMqo/7L3DnbebraGtCR9XsncElbk424Km+eCzzoSQS76e2GtJ5Hiu7ltgpzu2ATVz1NKwnr5bNfxRx6YCA6qpkyk+ES0nB33k8RUfCJ59Ty4miMg4tJ/XmuLyfUBsvjBCIHgu3wmEtj0X5HRIkF1gRIRwk0erLZbtMyTAWLoJ9g6OjoU4y8OICOEJ/o7IZ3axDHGemm5gXCBBxRP0lUswhmIzGzUXRo0zRRD24vO7Gp0CoYAjwlgg2wDpBEF2zjwaZlKCQT3sMTGHmNddIKjTSRAKvEwYRSE4DaIMGL4QnAehBJCX6K/sVfCfFm9hLGbm7KOhZIwtUqfDMFmKve8J1FkQBoSgLbIQTv6cUdjhJIgyIXi5F4XhHIiIEF57WfuUXWA4BSIiBO0OepsOO2d0guEMCCDoLbkBDVoT8ltkxHOGYNTjM3ug+q0LB0QrfiQIXi4RYawCxmDdEa3oX29wisuJAbHl74RCmwgwujNmfA2Gn7k4U+gghfW3PjH5QvDsI8B4m337xPAUt8crBs5BS/14q9849RNf0nKSCfRbqrmuNVNvJP7sq3RQAIJBjjIpfIW/Rt+biv+9UM8Xzg+gozRLTPKC4DYX+mKuybQtQQegD9HL2P2hjCz40Jfsxai+zN1Dr+Kjo2IQONJRVz8FCMYw1WOQoiBi8OvrwrzNfI3COiD6Dpsd6Mcw27T2xwJCyQGjjWIX+kV11yQ2EEocGHol1oL2Q3WXJFYQShwYTykaUVcOagq701aUbYjjDzAe4ecg6sJBLZty7HeEBxIYt7k+7NXTXiYGQokD4zrF0bRDUHyJgtAEwLhEoVNhqiVxEMoeGGcpzqeZhBUQORgnKK+kFYY1EDkATZQ30gjDKggeEW2nh9C7aYNhFYSSB4beFvWC9lh1H7F+GLMOQokD4yeFTp/PVS8irUXaEm2qCghlBIxvFLtRvZ+Y8onKObPBxnUs3yMqCZRvGb0Zr48tdWg7ehFIHyityj8qXk0CqNjsSgAAAABJRU5ErkJggg=="),
+    NATIVE_UNMUTED("iVBORw0KGgoAAAANSUhEUgAAAEAAAAA6CAYAAAAA0F95AAAAAXNSR0IArs4c6QAABhFJREFUaAXVmmuIVkUYx90tL1tpadGNbpJGt7XYtgtdpECCMiK/p1FUEEQQLuSGlZZhFBWJQX20IDLCJMpPYpZRaQRGEUvZtmwlxpaZJm2Uvf3+b2fWs7PPHM9uZ857zgPPOzPPPPNc/nNmzszZnTSpAtRoNGbA8+BTyw6nrWyHvj+SvhXZnfDRSd9myrVtbW2HknbUoj2q9SMYJ/lFqNwDu+Q1YgG8UJUyqGUAkPyNJHhXIMkrAvLCxS0BgOSvI5P7M7I5NqOv0K7SASD5bjJYCrd8/xGSpQJA8hfjsxc+Ss6rQKUBQPJzSfhReEoVEncxlAIAyZ+Fw5Vwh3NclTI6ACSvw80T8PSqJJ2OI/3+TcsLqZP8iRhaBc8qxOARjOBvKiq3wRfAP8MbOVD9QBmkaAAQzPF41cyfEvReYAf+tLHKn5J3dD3y5YDQ5wR+GWUJ4PQYHGnNn+k7jNi+HNvp5OVKT0Qv8cxUw6LCAcCZnD4Gn2s5jCg7LWBby28ZcZlPe6EAJE4exuGFgWBiindlGFc8d1v9hQFA8lqDPXCX5Si2jHX+BT4+yvCzkBgv9fsLAQDDOtbqbH+N76CoNj4mw93wfDi0ptfgb3eGzyV+n7kufKUcbT1eC3LoTUiFhPUmeRw+PTEwjGwNs74tbZD2QeRPInsWnpbuS+pz6b8Sve2ubwQAOiYjnA3r9TUemoeyPmrEpPsw7pKXHyW3lJgPkMxOCRzRHkS+lraWo0W3078DvYY6mwAg0Dl9GXyyhFUiYtPy6jRi0p6jV1wPyXyf7qf9PnJNynlpeVI/h/Iq+GO121GUoYfgyiWvAJOZOqC6QTpvPEAO1l72qqHvRFe7igbqolLKac05nUD5VsaY8+m72e8HOC2NL3150u5yoAmA8a75gM2o4rexnvWKW0xC1qanD6wWzUDYXB7Wo2MNaKksWQbPEcS3gUC0FEYe65TOZ6m6X+2WoBYAKFBA+JNC7/l/1DZozGuYMfvQ+8bQlegi/dQGAAVLQv0U76luUCfLwDogfW7oSjRLP7UCQAFDW/4rzN85hnTIkEnUBKuOAGhnDy2DM4xkfzVkEnXwxEytHQAsAyX/SyAp6+8JIQBkYmbtAEgS/yMAgI7zPoV0pTetrgA0NzA/U9pWsicYek70W+0AYN1OJ/rjXAZeaT3u1ptBw7SU6gcAQV+r6AM0YMhDAOzXflKrJ4DZV7w3GUlKdBDuN/rONmQS7dVPrQAg3ltgfbOw6ANm9K90B4DpKn1ZWpaq71G9NgCQjC4vd6QS8KvWxUcHo9Am2LwnCIDQocJ30LI2yZ+E80fgKYEg+pj9r42+rH+0GAHgR2Ng1UT3ElBoJg/R96IfMKB1IBvznSDR6wew5mGqPals9Q1UpZ2s466MeDaQw4DRr09iuvdb9KkTNr8J0tA1U0+CvpWFBtFlkvT116AoRHJg0NAOb/nQTe813zH6Oics8uVJW0t+i+trAoAT7Z6vJ+z6cpU40668GrbO4bls5FB6F53Fnt4g7dXE/rcnV1NfkUPxbGbMbjfmf78FMPYdxlbAw85ohPJNbL4CD8H6QKpvAr341pMxipgQzfz8UcLDDYG1/nCzwH9UwvElGF4Bu2WV9jPe+i6Se3C8g4ihkzGr4NDEvoPdl9N2Q4ppnVx1DGs9PgW35LVK8vou2AOHctpP3xvwKAopj1LK2wCE7eg+DzfyjilQTxt46JaoSXmG+MZclgoFQMngZCvFS6qXTKEbosJYR1w7rXgKB0BOcLZJTi2HEWVK0Fp+HxLPhpDfKADIGU61c4tLIfwN4kgbXPq1uIP2C1kBFLFjB+0T1LpkcwodSYNjJ9KBv034+4Sxc+Ah2npFZ1JUABLP2g90Lr8hM5KCOkl6L6Y087ko2hJw3glIbwQ9hpqZylF0AJQxIOjG9jSss0KlqBQAlDEg6L6hU1qf2lWh0gBQwoAwTLESHoArQaUCoIwB4XcKfd0ZuZFJ7lFpJ8nSAVCigLCPYjms251FeyxhDFlLAFAigKDkBYLASJMOMhvTgpj1tpjG89jm4KJ/zloC6/DyE7wecL6iLIX+Baeqfh1gjc2nAAAAAElFTkSuQmCC"),
+    NATIVE_PLAY("");
 
     private final String encodedString;
 
@@ -31,7 +36,7 @@
     // multiple views.
     private Bitmap cachedBitmap;
 
-    private Drawables(final String encodedString) {
+    Drawables(final String encodedString) {
         this.encodedString = encodedString;
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/ImageUtils.java b/mopub-sdk/src/main/java/com/mopub/common/util/ImageUtils.java
index 267a9bbf..90e7f16a 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/ImageUtils.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/ImageUtils.java
@@ -46,8 +46,8 @@ public static Bitmap applyFastGaussianBlurToBitmap(@NonNull Bitmap mutableBitmap
 
     /**
      * Sets the alpha value of the ImageView.
-     * API Level < 16: http://developer.android.com/reference/android/widget/ImageView.html#setAlpha(int)
-     * API Level >= 16: http://developer.android.com/reference/android/widget/ImageView.html#setImageAlpha(int)
+     * API Level < 16: https://developer.android.com/reference/android/widget/ImageView.html#setAlpha(int)
+     * API Level >= 16: https://developer.android.com/reference/android/widget/ImageView.html#setImageAlpha(int)
      * @param imageView the ImageView
      * @param alpha the alpha value being applied to the ImageView
      */
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Intents.java b/mopub-sdk/src/main/java/com/mopub/common/util/Intents.java
index ba776d4f..c0d9b3e8 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/Intents.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/Intents.java
@@ -12,6 +12,7 @@
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
+import com.mopub.common.Constants;
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.Preconditions;
 import com.mopub.common.UrlAction;
@@ -19,7 +20,6 @@
 import com.mopub.exceptions.IntentNotResolvableException;
 import com.mopub.exceptions.UrlParseException;
 
-import java.util.EnumSet;
 import java.util.List;
 
 import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;
@@ -74,32 +74,10 @@ public static boolean deviceCanHandleIntent(@NonNull final Context context,
         }
     }
 
-    public static boolean canHandleApplicationUrl(final Context context, final Uri uri) {
-        return canHandleApplicationUrl(context, uri, true);
-    }
-
-    public static boolean canHandleApplicationUrl(final Context context, final Uri uri,
-            final boolean logError) {
-        // Determine which activities can handle the intent
-        final Intent intent = new Intent(Intent.ACTION_VIEW, uri);
-
-        // If there are no relevant activities, don't follow the link
-        if (!Intents.deviceCanHandleIntent(context, intent)) {
-            if (logError) {
-                MoPubLog.w("Could not handle application specific action: " + uri + ". " +
-                        "You may be running in the emulator or another device which does not " +
-                        "have the required application.");
-            }
-            return false;
-        }
-
-        return true;
-    }
-
     /**
      * Native Browser Scheme URLs provide a means for advertisers to include links that click out to
      * an external browser, rather than the MoPub in-app browser. Properly formatted native browser
-     * URLs take the form of "mopubnativebrowser://navigate?url=http%3A%2F%2Fwww.mopub.com".
+     * URLs take the form of "mopubnativebrowser://navigate?url=https%3A%2F%2Fwww.mopub.com".
      *
      * @param uri The Native Browser Scheme URL to open in the external browser.
      * @return An Intent that will open an app-external browser taking the user to a page specified
@@ -123,7 +101,7 @@ public static Intent intentForNativeBrowserScheme(@NonNull final Uri uri)
             urlToOpenInNativeBrowser = uri.getQueryParameter("url");
         } catch (UnsupportedOperationException e) {
             // Accessing query parameters only makes sense for hierarchical URIs as per:
-            // http://developer.android.com/reference/android/net/Uri.html#getQueryParameter(java.lang.String)
+            // https://developer.android.com/reference/android/net/Uri.html#getQueryParameter(java.lang.String)
             MoPubLog.w("Could not handle url: " + uri);
             throw new UrlParseException("Passed-in URL did not create a hierarchical URI.");
         }
@@ -174,7 +152,7 @@ public static Intent intentForShareTweet(@NonNull final Uri uri)
             tweetId = uri.getQueryParameter("tweet_id");
         } catch (UnsupportedOperationException e) {
             // Accessing query parameters only makes sense for hierarchical URIs as per:
-            // http://developer.android.com/reference/android/net/Uri.html#getQueryParameter(java.lang.String)
+            // https://developer.android.com/reference/android/net/Uri.html#getQueryParameter(java.lang.String)
             MoPubLog.w("Could not handle url: " + uri);
             throw new UrlParseException("Passed-in URL did not create a hierarchical URI.");
         }
@@ -208,7 +186,8 @@ public static Intent intentForShareTweet(@NonNull final Uri uri)
      * @param uri The URL to load in the started {@link MoPubBrowser} activity.
      */
     public static void showMoPubBrowserForUrl(@NonNull final Context context,
-            @NonNull Uri uri)
+            @NonNull Uri uri,
+            @Nullable String dspCreativeId)
             throws IntentNotResolvableException {
         Preconditions.checkNotNull(context);
         Preconditions.checkNotNull(uri);
@@ -217,6 +196,9 @@ public static void showMoPubBrowserForUrl(@NonNull final Context context,
 
         final Bundle extras = new Bundle();
         extras.putString(MoPubBrowser.DESTINATION_URL_KEY, uri.toString());
+        if (!TextUtils.isEmpty(dspCreativeId)) {
+            extras.putString(MoPubBrowser.DSP_CREATIVE_ID, dspCreativeId);
+        }
         Intent intent = getStartActivityIntent(context, MoPubBrowser.class, extras);
 
         String errorMessage = "Could not show MoPubBrowser for url: " + uri + "\n\tPerhaps you " +
@@ -225,16 +207,6 @@ public static void showMoPubBrowserForUrl(@NonNull final Context context,
         launchIntentForUserClick(context, intent, errorMessage);
     }
 
-    public static void launchActionViewIntent(Context context, @NonNull final Uri uri,
-            @NonNull final String errorMessage) throws IntentNotResolvableException {
-        final Intent intent = new Intent(Intent.ACTION_VIEW, uri);
-        if (!(context instanceof Activity)) {
-            intent.addFlags(FLAG_ACTIVITY_NEW_TASK);
-        }
-
-        launchIntentForUserClick(context, intent, errorMessage);
-    }
-
     public static void launchIntentForUserClick(@NonNull final Context context,
             @NonNull final Intent intent, @Nullable final String errorMessage)
             throws IntentNotResolvableException {
@@ -242,7 +214,7 @@ public static void launchIntentForUserClick(@NonNull final Context context,
         Preconditions.NoThrow.checkNotNull(intent);
 
         try {
-            Intents.startActivity(context, intent);
+            startActivity(context, intent);
         } catch (IntentNotResolvableException e) {
             throw new IntentNotResolvableException(errorMessage + "\n" + e.getMessage());
         }
@@ -250,13 +222,88 @@ public static void launchIntentForUserClick(@NonNull final Context context,
 
     public static void launchApplicationUrl(@NonNull final Context context,
             @NonNull final Uri uri) throws IntentNotResolvableException {
-        if (Intents.canHandleApplicationUrl(context, uri)) {
-            final String errorMessage = "Unable to open intent for: " + uri;
-            Intents.launchActionViewIntent(context, uri, errorMessage);
+        final Intent intent = new Intent(Intent.ACTION_VIEW, uri);
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(uri);
+
+        if (deviceCanHandleIntent(context, intent)) {
+            launchApplicationIntent(context, intent);
         } else {
+            // Deeplink+ needs this exception to know primaryUrl failed and then attempt fallbackUrl
+            // See UrlAction.FOLLOW_DEEP_LINK_WITH_FALLBACK
             throw new IntentNotResolvableException("Could not handle application specific " +
                     "action: " + uri + "\n\tYou may be running in the emulator or another " +
                     "device which does not have the required application.");
         }
     }
+
+    public static void launchApplicationIntent(@NonNull final Context context,
+            @NonNull final Intent intent) throws IntentNotResolvableException {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(intent);
+
+        if (deviceCanHandleIntent(context, intent)) {
+            final String errorMessage = "Unable to open intent: " + intent;
+            if (!(context instanceof Activity)) {
+                intent.addFlags(FLAG_ACTIVITY_NEW_TASK);
+            }
+            launchIntentForUserClick(context, intent, errorMessage);
+        } else {
+            final String fallbackUrl = intent.getStringExtra("browser_fallback_url");
+            if (TextUtils.isEmpty(fallbackUrl)) {
+                if (!"market".equalsIgnoreCase(intent.getScheme())) {
+                    launchApplicationUrl(context, getPlayStoreUri(intent));
+                } else {
+                    throw new IntentNotResolvableException("Device could not handle neither " +
+                            "intent nor market url.\nIntent: " + intent.toString());
+                }
+            } else {
+                final Uri fallbackUri = Uri.parse(fallbackUrl);
+                final String fallbackScheme = fallbackUri.getScheme();
+                if (Constants.HTTP.equalsIgnoreCase(fallbackScheme)
+                        || Constants.HTTPS.equalsIgnoreCase(fallbackScheme)) {
+                    showMoPubBrowserForUrl(context, fallbackUri, null);
+                } else {
+                    launchApplicationUrl(context, fallbackUri);
+                }
+            }
+        }
+    }
+
+    @NonNull
+    public static Uri getPlayStoreUri(@NonNull final Intent intent) {
+        Preconditions.checkNotNull(intent);
+
+        return Uri.parse("market://details?id=" + intent.getPackage());
+    }
+
+    public static void launchActionViewIntent(@NonNull final Context context,
+            @NonNull final Uri uri,
+            @Nullable final String errorMessage) throws IntentNotResolvableException {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(uri);
+
+        final Intent intent = new Intent(Intent.ACTION_VIEW, uri);
+        if (!(context instanceof Activity)) {
+            intent.addFlags(FLAG_ACTIVITY_NEW_TASK);
+        }
+        launchIntentForUserClick(context, intent, errorMessage);
+    }
+
+    /**
+     * @deprecated as of 4.7.0. Use {@link #deviceCanHandleIntent(Context, Intent)}
+     */
+    @Deprecated
+    public static boolean canHandleApplicationUrl(final Context context, final Uri uri) {
+        return false;
+    }
+
+    /**
+     * @deprecated as of 4.7.0. Use {@link #deviceCanHandleIntent(Context, Intent)}
+     */
+    @Deprecated
+    public static boolean canHandleApplicationUrl(final Context context, final Uri uri,
+            final boolean logError) {
+        return false;
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/ManifestUtils.java b/mopub-sdk/src/main/java/com/mopub/common/util/ManifestUtils.java
index aaf7b4bf..08b4306e 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/ManifestUtils.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/ManifestUtils.java
@@ -123,7 +123,7 @@ public static boolean isDebuggable(@NonNull final Context context) {
      * Filters in activities to be returned based on matching their declaration state
      * in the Android Manifest with the isDeclared param.
      *
-     * @param context
+     * @param context the context
      * @param requiredActivities activities to filter against
      * @param isDeclared desired declaration state of activities in Android Manifest to be returned
      * @return the list of filtered in activities
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Reflection.java b/mopub-sdk/src/main/java/com/mopub/common/util/Reflection.java
index 3efa8598..658d5948 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/Reflection.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/Reflection.java
@@ -102,6 +102,7 @@ public static boolean classFound(final String className) {
         Preconditions.checkNotNull(className);
 
         final Class<? extends T> clazz = Class.forName(className).asSubclass(superclass);
+        // noinspection unchecked
         final Constructor<? extends T> constructor = clazz.getDeclaredConstructor((Class[]) null);
         constructor.setAccessible(true);
 
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/ResponseHeader.java b/mopub-sdk/src/main/java/com/mopub/common/util/ResponseHeader.java
index 6e407f85..002c36b2 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/ResponseHeader.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/ResponseHeader.java
@@ -7,6 +7,7 @@
     CUSTOM_EVENT_DATA("X-Custom-Event-Class-Data"),
     CUSTOM_EVENT_NAME("X-Custom-Event-Class-Name"),
     CUSTOM_EVENT_HTML_DATA("X-Custom-Event-Html-Data"),
+    CREATIVE_ID("X-CreativeId"),
     DSP_CREATIVE_ID("X-DspCreativeid"),
     FAIL_URL("X-Failurl"),
     FULL_AD_TYPE("X-Fulladtype"),
@@ -25,10 +26,22 @@
     USER_AGENT("User-Agent"),
     ACCEPT_LANGUAGE("Accept-Language"),
 
+    // Native Video fields
+    PLAY_VISIBLE_PERCENT("X-Play-Visible-Percent"),
+    PAUSE_VISIBLE_PERCENT("X-Pause-Visible-Percent"),
+    IMPRESSION_MIN_VISIBLE_PERCENT("X-Impression-Min-Visible-Percent"),
+    IMPRESSION_VISIBLE_MS("X-Impression-Visible-Ms"),
+    MAX_BUFFER_MS("X-Max-Buffer-Ms"),
+
+    // Rewarded Video fields
+    REWARDED_VIDEO_CURRENCY_NAME("X-Rewarded-Video-Currency-Name"),
+    REWARDED_VIDEO_CURRENCY_AMOUNT("X-Rewarded-Video-Currency-Amount"),
+    REWARDED_VIDEO_COMPLETION_URL("X-Rewarded-Video-Completion-Url"),
+
     @Deprecated CUSTOM_SELECTOR("X-Customselector");
 
     private final String key;
-    private ResponseHeader(String key) {
+    ResponseHeader(String key) {
         this.key = key;
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Timer.java b/mopub-sdk/src/main/java/com/mopub/common/util/Timer.java
index b53c4de3..f3125176 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/Timer.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/Timer.java
@@ -3,7 +3,7 @@
 import java.util.concurrent.TimeUnit;
 
 public class Timer {
-    private static enum State { STARTED, STOPPED }
+    private enum State { STARTED, STOPPED }
     private long mStopTimeNanos;
     private long mStartTimeNanos;
     private State mState;
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Utils.java b/mopub-sdk/src/main/java/com/mopub/common/util/Utils.java
index c4b620de..cc5f9e5b 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/Utils.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/Utils.java
@@ -1,7 +1,5 @@
 package com.mopub.common.util;
 
-import com.mopub.common.VisibleForTesting;
-
 import java.security.MessageDigest;
 import java.util.Locale;
 import java.util.concurrent.atomic.AtomicLong;
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/VersionCode.java b/mopub-sdk/src/main/java/com/mopub/common/util/VersionCode.java
index 606b3782..fee8713e 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/VersionCode.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/VersionCode.java
@@ -39,7 +39,7 @@ private static VersionCode forApiLevel(int targetApiLevel) {
         return CUR_DEVELOPMENT;
     }
 
-    private VersionCode(int apiLevel) {
+    VersionCode(int apiLevel) {
         this.mApiLevel = apiLevel;
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoader.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoader.java
deleted file mode 100644
index 3b0e073c..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoader.java
+++ /dev/null
@@ -1,72 +0,0 @@
-package com.mopub.mobileads;
-
-import android.support.annotation.Nullable;
-import android.text.TextUtils;
-
-import com.mopub.common.VisibleForTesting;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.network.AdResponse;
-
-import java.lang.ref.WeakReference;
-import java.util.Map;
-
-abstract class AdLoader {
-
-    WeakReference<AdViewController> mWeakAdViewController;
-    AdLoader(AdViewController adViewController) {
-        mWeakAdViewController = new WeakReference<AdViewController>(adViewController);
-    }
-
-    abstract void load();
-
-    @Nullable
-    static AdLoader fromAdResponse(AdResponse response, AdViewController adViewController) {
-        MoPubLog.i("Performing custom event.");
-
-        // If applicable, try to invoke the new custom event system (which uses custom classes)
-        String adTypeCustomEventName = response.getCustomEventClassName();
-        if (adTypeCustomEventName != null) {
-            Map<String, String> customEventData = response.getServerExtras();
-            return new CustomEventAdLoader(adViewController, adTypeCustomEventName, customEventData);
-        }
-
-        MoPubLog.i("Failed to create custom event.");
-        return null;
-    }
-
-    static class CustomEventAdLoader extends AdLoader {
-        private String mCustomEventClassName;
-        private Map<String,String> mServerExtras;
-
-        public CustomEventAdLoader(AdViewController adViewController,
-                String customEventCLassName,
-                Map<String, String> serverExtras) {
-            super(adViewController);
-            mCustomEventClassName = customEventCLassName;
-            mServerExtras = serverExtras;
-        }
-
-        @Override
-        void load() {
-            AdViewController adViewController = mWeakAdViewController.get();
-            if (adViewController == null
-                    || adViewController.isDestroyed()
-                    || TextUtils.isEmpty(mCustomEventClassName)) {
-                return;
-            }
-            adViewController.setNotLoading();
-
-            final MoPubView moPubView = adViewController.getMoPubView();
-            if (moPubView == null) {
-                MoPubLog.d("Can't load an ad in this ad view because it was destroyed.");
-                return;
-            }
-            moPubView.loadCustomEvent(mCustomEventClassName, mServerExtras);
-        }
-
-        @VisibleForTesting
-        Map<String, String> getServerExtras() {
-            return mServerExtras;
-        }
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdTypeTranslator.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
index f2d5e8c9..7cdeb29e 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
@@ -26,6 +26,8 @@
         HTML_INTERSTITIAL("html_interstitial", "com.mopub.mobileads.HtmlInterstitial"),
         VAST_VIDEO_INTERSTITIAL("vast_interstitial", "com.mopub.mobileads.VastVideoInterstitial"),
         MOPUB_NATIVE("mopub_native", "com.mopub.nativeads.MoPubCustomEventNative"),
+        MOPUB_VIDEO_NATIVE("mopub_video_native", "com.mopub.nativeads.MoPubCustomEventVideoNative"),
+        MOPUB_REWARDED_VIDEO("rewarded_video", "com.mopub.mobileads.MoPubRewardedVideo"),
 
         UNSPECIFIED("", null);
 
@@ -67,8 +69,12 @@ public static String getCustomEventName(@NonNull AdFormat adFormat,
             @NonNull Map<String, String> headers) {
         if (AdType.CUSTOM.equalsIgnoreCase(adType)) {
             return extractHeader(headers, ResponseHeader.CUSTOM_EVENT_NAME);
-        } else if (AdType.NATIVE.equalsIgnoreCase(adType)){
+        } else if (AdType.STATIC_NATIVE.equalsIgnoreCase(adType)){
             return CustomEventType.MOPUB_NATIVE.toString();
+        } else if (AdType.VIDEO_NATIVE.equalsIgnoreCase(adType)) {
+            return CustomEventType.MOPUB_VIDEO_NATIVE.toString();
+        } else if (AdType.REWARDED_VIDEO.equalsIgnoreCase(adType)) {
+            return CustomEventType.MOPUB_REWARDED_VIDEO.toString();
         } else if (AdType.HTML.equalsIgnoreCase(adType) || AdType.MRAID.equalsIgnoreCase(adType)) {
             return (AdFormat.INTERSTITIAL.equals(adFormat)
                     ? CustomEventType.fromString(adType + INTERSTITIAL_SUFFIX)
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
index a049e317..2ae7a79a 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
@@ -1,7 +1,6 @@
 package com.mopub.mobileads;
 
 import android.content.Context;
-import android.content.pm.PackageManager;
 import android.location.Location;
 import android.net.ConnectivityManager;
 import android.net.NetworkInfo;
@@ -17,6 +16,7 @@
 import com.mopub.common.AdReport;
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.Constants;
+import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.event.BaseEvent;
 import com.mopub.common.logging.MoPubLog;
@@ -53,18 +53,13 @@
 
     private final long mBroadcastIdentifier;
 
-    @Nullable
-    private Context mContext;
-    @Nullable
-    private MoPubView mMoPubView;
-    @Nullable
-    private WebViewAdUrlGenerator mUrlGenerator;
+    @Nullable private Context mContext;
+    @Nullable private MoPubView mMoPubView;
+    @Nullable private WebViewAdUrlGenerator mUrlGenerator;
 
-    @Nullable
-    private AdResponse mAdResponse;
+    @Nullable private AdResponse mAdResponse;
     private final Runnable mRefreshRunnable;
-    @NonNull
-    private final AdRequest.Listener mAdListener;
+    @NonNull private final AdRequest.Listener mAdListener;
 
     private boolean mIsDestroyed;
     private Handler mHandler;
@@ -82,13 +77,10 @@
     private Location mLocation;
     private boolean mIsTesting;
     private boolean mAdWasLoaded;
-    @Nullable
-    private String mAdUnitId;
+    @Nullable private String mAdUnitId;
     private int mTimeoutMilliseconds;
-    @Nullable
-    private AdRequest mActiveRequest;
-    @Nullable
-    private Integer mRefreshTimeMillis;
+    @Nullable private AdRequest mActiveRequest;
+    @Nullable private Integer mRefreshTimeMillis;
 
     public static void setShouldHonorServerDimensions(View view) {
         sViewShouldHonorServerDimensions.put(view, true);
@@ -102,7 +94,7 @@ public AdViewController(@NonNull Context context, @NonNull MoPubView view) {
         mContext = context;
         mMoPubView = view;
 
-        // Default timeout means "never refresh"
+        // Timeout value of less than 0 means use the ad format's default timeout
         mTimeoutMilliseconds = -1;
         mBroadcastIdentifier = Utils.generateUniqueId();
 
@@ -141,11 +133,9 @@ void onAdLoadSuccess(@NonNull final AdResponse adResponse) {
         mRefreshTimeMillis = mAdResponse.getRefreshTimeMillis();
         setNotLoading();
 
-        // Get our custom event from the ad response and load into the view.
-        AdLoader adLoader = AdLoader.fromAdResponse(mAdResponse, this);
-        if (adLoader != null) {
-            adLoader.load();
-        }
+        loadCustomEvent(mMoPubView, adResponse.getCustomEventClassName(),
+                adResponse.getServerExtras());
+
         scheduleRefreshTimerIfEnabled();
     }
 
@@ -173,6 +163,20 @@ void onAdLoadError(final VolleyError error) {
         adDidFail(errorCode);
     }
 
+    @VisibleForTesting
+    void loadCustomEvent(@Nullable final MoPubView moPubView,
+            @Nullable final String customEventClassName,
+            @NonNull final Map<String, String> serverExtras) {
+        Preconditions.checkNotNull(serverExtras);
+
+        if (moPubView == null) {
+            MoPubLog.d("Can't load an ad in this ad view because it was destroyed.");
+            return;
+        }
+
+        moPubView.loadCustomEvent(customEventClassName, serverExtras);
+    }
+
     @VisibleForTesting
     @NonNull
     static MoPubErrorCode getErrorCodeFromVolleyError(@NonNull final VolleyError error,
@@ -270,11 +274,6 @@ void loadFailUrl(MoPubErrorCode errorCode) {
         }
     }
 
-    @Deprecated
-    void setFailUrl(String failUrl) {
-        // Does nothing.
-    }
-
     void setNotLoading() {
         this.mIsLoading = false;
         if (mActiveRequest != null) {
@@ -313,10 +312,6 @@ public long getBroadcastIdentifier() {
         return mBroadcastIdentifier;
     }
 
-    public void setTimeout(int milliseconds) {
-       mTimeoutMilliseconds = milliseconds;
-    }
-
     public int getAdWidth() {
         if (mAdResponse != null && mAdResponse.getWidth() != null) {
             return mAdResponse.getWidth();
@@ -333,21 +328,6 @@ public int getAdHeight() {
         return 0;
     }
 
-    @Deprecated
-    public String getClickTrackingUrl() {
-        return mAdResponse == null ? null : mAdResponse.getClickTrackingUrl();
-    }
-
-    @Deprecated
-    public String getRedirectUrl() {
-        return mAdResponse == null ? null : mAdResponse.getRedirectUrl();
-    }
-
-    @Deprecated
-    public String getResponseString() {
-        return mAdResponse == null ? null : mAdResponse.getStringBody();
-    }
-
     public boolean getAutorefreshEnabled() {
         return mAutoRefreshEnabled;
     }
@@ -397,11 +377,6 @@ public void setTesting(boolean enabled) {
         mIsTesting = enabled;
     }
 
-    @Deprecated
-    Object getAdConfiguration() {
-        return null;
-    }
-
     boolean isDestroyed() {
         return mIsDestroyed;
     }
@@ -434,7 +409,7 @@ void cleanup() {
     }
 
     Integer getAdTimeoutDelay() {
-        return mAdResponse == null ? null : mAdResponse.getAdTimeoutMillis();
+        return mTimeoutMilliseconds;
     }
 
     void trackImpression() {
@@ -446,6 +421,7 @@ void trackImpression() {
 
     void registerClick() {
         if (mAdResponse != null) {
+            // Click tracker fired from Banners and Interstitials
             TrackingRequest.makeTrackingHttpRequest(mAdResponse.getClickTrackingUrl(),
                     mContext, BaseEvent.Name.CLICK_REQUEST);
         }
@@ -531,8 +507,9 @@ private boolean isNetworkAvailable() {
             return false;
         }
         // If we don't have network state access, just assume the network is up.
-        int result = mContext.checkCallingPermission(ACCESS_NETWORK_STATE);
-        if (result == PackageManager.PERMISSION_DENIED) return true;
+        if (!DeviceUtils.isPermissionGranted(mContext, ACCESS_NETWORK_STATE)) {
+            return true;
+        }
 
         // Otherwise, perform the connectivity check.
         ConnectivityManager cm
@@ -544,7 +521,7 @@ private boolean isNetworkAvailable() {
     void setAdContentView(final View view) {
         // XXX: This method is called from the WebViewClient's callbacks, which has caused an error on a small portion of devices
         // We suspect that the code below may somehow be running on the wrong UI Thread in the rare case.
-        // see: http://stackoverflow.com/questions/10426120/android-got-calledfromwrongthreadexception-in-onpostexecute-how-could-it-be
+        // see: https://stackoverflow.com/questions/10426120/android-got-calledfromwrongthreadexception-in-onpostexecute-how-could-it-be
         mHandler.post(new Runnable() {
             @Override
             public void run() {
@@ -587,40 +564,4 @@ Integer getRefreshTimeMillis() {
     void setRefreshTimeMillis(@Nullable final Integer refreshTimeMillis) {
         mRefreshTimeMillis = refreshTimeMillis;
     }
-
-    @Deprecated
-    public void customEventDidLoadAd() {
-        setNotLoading();
-        trackImpression();
-        scheduleRefreshTimerIfEnabled();
-    }
-
-    @Deprecated
-    public void customEventDidFailToLoadAd() {
-        loadFailUrl(MoPubErrorCode.UNSPECIFIED);
-    }
-
-    @Deprecated
-    public void customEventActionWillBegin() {
-        registerClick();
-    }
-
-    @Deprecated
-    public void setClickthroughUrl(String clickthroughUrl) {
-        // Does nothing
-    }
-
-    /**
-     * @deprecated As of release 2.4
-     */
-    @Deprecated
-    public boolean isFacebookSupported() {
-        return false;
-    }
-
-    /**
-     * @deprecated As of release 2.4
-     */
-    @Deprecated
-    public void setFacebookSupported(boolean enabled) {}
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseBroadcastReceiver.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseBroadcastReceiver.java
new file mode 100644
index 00000000..9b2e04e4
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseBroadcastReceiver.java
@@ -0,0 +1,58 @@
+package com.mopub.mobileads;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.v4.content.LocalBroadcastManager;
+
+import com.mopub.common.DataKeys;
+import com.mopub.common.Preconditions;
+
+public abstract class BaseBroadcastReceiver extends BroadcastReceiver {
+    private final long mBroadcastIdentifier;
+    @Nullable private Context mContext;
+
+    public BaseBroadcastReceiver(final long broadcastIdentifier) {
+        mBroadcastIdentifier = broadcastIdentifier;
+    }
+
+    static void broadcastAction(@NonNull final Context context, final long broadcastIdentifier,
+            @NonNull final String action) {
+        Preconditions.checkNotNull(context, "context cannot be null");
+        Preconditions.checkNotNull(action, "action cannot be null");
+        Intent intent = new Intent(action);
+        intent.putExtra(DataKeys.BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
+        LocalBroadcastManager.getInstance(context.getApplicationContext()).sendBroadcast(intent);
+    }
+
+    @NonNull
+    public abstract IntentFilter getIntentFilter();
+
+    public void register(final @NonNull BroadcastReceiver broadcastReceiver, Context context) {
+        mContext = context;
+        LocalBroadcastManager.getInstance(mContext).registerReceiver(broadcastReceiver,
+                getIntentFilter());
+    }
+
+    public void unregister(final @Nullable BroadcastReceiver broadcastReceiver) {
+        if (mContext != null && broadcastReceiver != null) {
+            LocalBroadcastManager.getInstance(mContext).unregisterReceiver(broadcastReceiver);
+            mContext = null;
+        }
+    }
+
+    /**
+     * Only consume this broadcast if the identifier on the received Intent and this broadcast
+     * match up. This allows us to target broadcasts to the ad that spawned them. We include
+     * this here because there is no appropriate IntentFilter condition that can recreate this
+     * behavior.
+     */
+    public boolean shouldConsumeBroadcast(@NonNull final Intent intent) {
+        Preconditions.checkNotNull(intent, "intent cannot be null");
+        final long receivedIdentifier = intent.getLongExtra(DataKeys.BROADCAST_IDENTIFIER_KEY, -1);
+        return mBroadcastIdentifier == receivedIdentifier;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
index 6af45e32..0710d7dc 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
@@ -8,6 +8,7 @@
 import com.mopub.common.AdReport;
 import com.mopub.common.Constants;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.network.Networking;
 
 import static com.mopub.common.util.VersionCode.ICE_CREAM_SANDWICH;
 import static com.mopub.common.util.VersionCode.currentApiLevel;
@@ -55,8 +56,8 @@ private void disableScrollingAndZoom() {
     }
 
     void loadHtmlResponse(String htmlResponse) {
-        loadDataWithBaseURL("http://" + Constants.HOST + "/", htmlResponse, "text/html", "utf-8",
-                null);
+        loadDataWithBaseURL(Networking.getBaseUrlScheme() + "://" + Constants.HOST + "/", htmlResponse,
+                "text/html", "utf-8", null);
     }
 
     void initializeOnTouchListener(final boolean isScrollable) {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
index 1b1ddf21..122787a0 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
@@ -67,8 +67,6 @@ public void onClose() {
         mCloseableLayout.addView(adView,
                 new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
         setContentView(mCloseableLayout);
-
-
     }
 
     @Override
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
index 226ea8ec..1a4dc8b5 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
@@ -4,15 +4,18 @@
 import android.content.ActivityNotFoundException;
 import android.content.Context;
 import android.content.Intent;
+import android.media.AudioManager;
 
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.nativeads.NativeVideoController;
+import com.mopub.nativeads.NativeVideoViewController;
 
 import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static com.mopub.mobileads.VastVideoViewController.VAST_VIDEO_CONFIG;
 
 public class BaseVideoPlayerActivity extends Activity {
-    static final String VIDEO_CLASS_EXTRAS_KEY = "video_view_class_name";
+    public static final String VIDEO_CLASS_EXTRAS_KEY = "video_view_class_name";
     public static final String VIDEO_URL = "video_url";
 
     public static void startMraid(final Context context, final String videoUrl) {
@@ -36,7 +39,8 @@ static Intent createIntentMraid(final Context context,
     static void startVast(final Context context,
             final VastVideoConfig vastVideoConfig,
             final long broadcastIdentifier) {
-        final Intent intentVideoPlayerActivity = createIntentVast(context, vastVideoConfig, broadcastIdentifier);
+        final Intent intentVideoPlayerActivity = createIntentVast(context, vastVideoConfig,
+                broadcastIdentifier);
         try {
             context.startActivity(intentVideoPlayerActivity);
         } catch (ActivityNotFoundException e) {
@@ -54,5 +58,35 @@ static Intent createIntentVast(final Context context,
         intentVideoPlayerActivity.putExtra(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
         return intentVideoPlayerActivity;
     }
+
+    public static void startNativeVideo(final Context context, final long nativeVideoId, final VastVideoConfig vastVideoConfig) {
+        final Intent intentVideoPlayerActivity = createIntentNativeVideo(context, nativeVideoId, vastVideoConfig);
+        try {
+            context.startActivity(intentVideoPlayerActivity);
+        } catch (ActivityNotFoundException e) {
+            MoPubLog.d("Activity MraidVideoPlayerActivity not found. Did you declare it in your AndroidManifest.xml?");
+        }
+    }
+
+    public static Intent createIntentNativeVideo(final Context context, final long nativeVideoId, final VastVideoConfig vastVideoConfig) {
+        final Intent intentVideoPlayerActivity = new Intent(context, MraidVideoPlayerActivity.class);
+        intentVideoPlayerActivity.setFlags(FLAG_ACTIVITY_NEW_TASK);
+        intentVideoPlayerActivity.putExtra(VIDEO_CLASS_EXTRAS_KEY, "native");
+        intentVideoPlayerActivity.putExtra(NativeVideoViewController.NATIVE_VIDEO_ID, nativeVideoId);
+        intentVideoPlayerActivity.putExtra(NativeVideoViewController.NATIVE_VAST_VIDEO_CONFIG, vastVideoConfig);
+        return intentVideoPlayerActivity;
+    }
+
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+
+        // VideoViews may never release audio focus, leaking the activity. See
+        // https://code.google.com/p/android/issues/detail?id=152173.
+        AudioManager am = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
+        if (am != null) {
+            am.abandonAudioFocus(null);
+        }
+    }
 }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
index 6856f4a9..d1504467 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
@@ -32,7 +32,7 @@ void onStartActivityForResult(final Class<? extends Activity> clazz,
     }
 
     protected BaseVideoViewController(final Context context, @Nullable final Long broadcastIdentifier, final BaseVideoViewControllerListener baseVideoViewControllerListener) {
-        mContext = context.getApplicationContext();
+        mContext = context;
         mBroadcastIdentifier = broadcastIdentifier;
         mBaseVideoViewControllerListener = baseVideoViewControllerListener;
         mLayout = new RelativeLayout(mContext);
@@ -51,7 +51,8 @@ protected void onCreate() {
     protected abstract void onResume();
     protected abstract void onDestroy();
     protected abstract void onSaveInstanceState(@NonNull Bundle outState);
-    protected abstract void onConfigurationChanged(@Nullable Configuration configuration);
+    protected abstract void onConfigurationChanged(Configuration configuration);
+    protected abstract void onBackPressed();
 
     public boolean backButtonEnabled() {
         return true;
@@ -89,9 +90,9 @@ protected void videoCompleted(boolean shouldFinish) {
 
     void broadcastAction(final String action) {
         if (mBroadcastIdentifier != null) {
-            EventForwardingBroadcastReceiver.broadcastAction(mContext, mBroadcastIdentifier, action);
+            BaseBroadcastReceiver.broadcastAction(mContext, mBroadcastIdentifier, action);
         } else {
-            MoPubLog.w("Tried to broadcast a video event without a braodcast identifier to send to.");
+            MoPubLog.w("Tried to broadcast a video event without a broadcast identifier to send to.");
         }
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseWebView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseWebView.java
index a9331a31..84d1e820 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseWebView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseWebView.java
@@ -1,5 +1,6 @@
 package com.mopub.mobileads;
 
+import android.annotation.SuppressLint;
 import android.content.Context;
 import android.graphics.Color;
 import android.graphics.PixelFormat;
@@ -11,6 +12,7 @@
 import android.webkit.WebSettings;
 import android.webkit.WebView;
 
+import com.mopub.common.VisibleForTesting;
 import com.mopub.common.util.VersionCode;
 import com.mopub.common.util.Views;
 import com.mopub.mobileads.util.WebViews;
@@ -25,8 +27,9 @@ public BaseWebView(Context context) {
          * an Activity context, as it will leak on Froyo devices and earlier.
          */
         super(context.getApplicationContext());
-        enablePlugins(false);
 
+        enablePlugins(false);
+        restrictDeviceContentAccess();
         WebViews.setDisableJSChromeClient(this);
 
         if (!sDeadlockCleared) {
@@ -35,6 +38,20 @@ public BaseWebView(Context context) {
         }
     }
 
+    @Override
+    public void destroy() {
+        mIsDestroyed = true;
+
+        // Needed to prevent receiving the following error on Android versions using WebViewClassic
+        // https://code.google.com/p/android/issues/detail?id=65833.
+        Views.removeFromParent(this);
+
+        // Even after removing from the parent, WebViewClassic can leak because of a static
+        // reference from HTML5VideoViewProcessor. Removing children fixes this problem.
+        removeAllViews();
+        super.destroy();
+    }
+
     protected void enablePlugins(final boolean enabled) {
         // Android 4.3 and above has no concept of plugin states
         if (VersionCode.currentApiLevel().isAtLeast(VersionCode.JELLY_BEAN_MR2)) {
@@ -48,23 +65,34 @@ protected void enablePlugins(final boolean enabled) {
         }
     }
 
-    @Override
-    public void destroy() {
-        mIsDestroyed = true;
+    /*
+     * Intended to be used with dummy WebViews to precache WebView javascript and assets.
+     */
+    @SuppressLint("SetJavaScriptEnabled")
+    protected void enableJavascriptCaching() {
+        getSettings().setJavaScriptEnabled(true);
+        getSettings().setDomStorageEnabled(true);
+        getSettings().setAppCacheEnabled(true);
+        // Required for the Application Caches API to be enabled
+        // See: http://developer.android.com/reference/android/webkit/WebSettings.html#setAppCachePath(java.lang.String)
+        getSettings().setAppCachePath(getContext().getCacheDir().getAbsolutePath());
+    }
 
-        // Needed to prevent receiving the following error on Android versions using WebViewClassic
-        // https://code.google.com/p/android/issues/detail?id=65833.
-        Views.removeFromParent(this);
+    /*
+     * Disabling file access and content access prevents advertising creatives from
+     * detecting the presence of, or reading, files on the device filesystem.
+     */
+    private void restrictDeviceContentAccess() {
+        getSettings().setAllowFileAccess(false);
 
-        // Even after removing from the parent, WebViewClassic can leak because of a static
-        // reference from HTML5VideoViewProcessor. Removing children fixes this problem.
-        removeAllViews();
-        super.destroy();
-    }
+        if (VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB) {
+            getSettings().setAllowContentAccess(false);
+        }
 
-    @Deprecated // for testing
-    void setIsDestroyed(boolean isDestroyed) {
-        mIsDestroyed = isDestroyed;
+        if (VERSION.SDK_INT >= VERSION_CODES.JELLY_BEAN) {
+            getSettings().setAllowFileAccessFromFileURLs(false);
+            getSettings().setAllowUniversalAccessFromFileURLs(false);
+        }
     }
 
     /**
@@ -80,7 +108,7 @@ void setIsDestroyed(boolean isDestroyed) {
      */
     private void clearWebViewDeadlock(@NonNull final Context context) {
         if (VERSION.SDK_INT == VERSION_CODES.KITKAT) {
-            // Create an invisible webview
+            // Create an invisible WebView
             final WebView webView = new WebView(context.getApplicationContext());
             webView.setBackgroundColor(Color.TRANSPARENT);
 
@@ -104,5 +132,9 @@ private void clearWebViewDeadlock(@NonNull final Context context) {
         }
     }
 
-
+    @VisibleForTesting
+    @Deprecated // for testing
+    void setIsDestroyed(boolean isDestroyed) {
+        mIsDestroyed = isDestroyed;
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
index 9634f3ba..974a113e 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
@@ -82,9 +82,7 @@ void loadAd() {
             return;
         }
 
-        if (getTimeoutDelayMilliseconds() > 0) {
-            mHandler.postDelayed(mTimeout, getTimeoutDelayMilliseconds());
-        }
+        mHandler.postDelayed(mTimeout, getTimeoutDelayMilliseconds());
 
         // Custom event classes can be developed by any third party and may not be tested.
         // We catch all exceptions here to prevent crashes from untested code.
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
index 740ec3c4..47feb16c 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
@@ -75,9 +75,7 @@ void loadInterstitial() {
             return;
         }
 
-        if (getTimeoutDelayMilliseconds() > 0) {
-            mHandler.postDelayed(mTimeout, getTimeoutDelayMilliseconds());
-        }
+        mHandler.postDelayed(mTimeout, getTimeoutDelayMilliseconds());
 
         // Custom event classes can be developed by any third party and may not be tested.
         // We catch all exceptions here to prevent crashes from untested code.
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java
index ec9edbb4..9e1c961b 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java
@@ -4,6 +4,7 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
+import com.mopub.common.DataKeys;
 import com.mopub.common.LifecycleListener;
 import com.mopub.common.MoPubLifecycleManager;
 import com.mopub.common.VisibleForTesting;
@@ -15,6 +16,7 @@
  *
  */
 public abstract class CustomEventRewardedVideo {
+
     /**
      * This marker interface is used to indicate that an object is a listener for a 3rd party SDKs
      * rewarded video system.
@@ -61,8 +63,8 @@
      * be loaded.
      *
      * @param launcherActivity the "main activity" of the app. Useful for initializing sdks.
-     * @param localExtras
-     * @param serverExtras
+     * @param localExtras a map containing additional custom data set in app
+     * @param serverExtras a map containing additional custom data configurable on the mopub website
      */
     final void loadCustomEvent(@NonNull Activity launcherActivity,
             @NonNull Map<String, Object> localExtras,
@@ -101,8 +103,8 @@ protected abstract boolean checkAndInitializeSdk(@NonNull Activity launcherActiv
      * (onAdLoadSuccess, etc). Instead the SDK delegate/listener should call these methods.
      *
      * @param activity the "main activity" of the app. Useful for initializing sdks.
-     * @param localExtras
-     * @param serverExtras
+     * @param localExtras a map containing additional custom data set in app
+     * @param serverExtras a map containing additional custom data configurable on the mopub website
      */
     protected abstract void loadWithSdkInitialized(@NonNull Activity activity,
             @NonNull Map<String, Object> localExtras,
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java b/mopub-sdk/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java
index d5561d92..0e19182f 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java
@@ -1,20 +1,16 @@
 package com.mopub.mobileads;
 
-import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
-import android.support.v4.content.LocalBroadcastManager;
-
-import com.mopub.common.DataKeys;
+import android.support.annotation.NonNull;
 
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 
-public class EventForwardingBroadcastReceiver extends BroadcastReceiver {
+public class EventForwardingBroadcastReceiver extends BaseBroadcastReceiver {
     private final CustomEventInterstitialListener mCustomEventInterstitialListener;
-    private final long mBroadcastIdentifier;
-    private Context mContext;
+
 
     public static final String ACTION_INTERSTITIAL_FAIL = "com.mopub.action.interstitial.fail";
     public static final String ACTION_INTERSTITIAL_SHOW = "com.mopub.action.interstitial.show";
@@ -24,18 +20,13 @@
 
 
     public EventForwardingBroadcastReceiver(CustomEventInterstitialListener customEventInterstitialListener, final long broadcastIdentifier) {
+        super(broadcastIdentifier);
         mCustomEventInterstitialListener = customEventInterstitialListener;
-        mBroadcastIdentifier = broadcastIdentifier;
-        sIntentFilter = getHtmlInterstitialIntentFilter();
+        getIntentFilter();
     }
 
-    static void broadcastAction(final Context context, final long broadcastIdentifier, final String action) {
-        Intent intent = new Intent(action);
-        intent.putExtra(DataKeys.BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
-        LocalBroadcastManager.getInstance(context.getApplicationContext()).sendBroadcast(intent);
-    }
-
-    public static IntentFilter getHtmlInterstitialIntentFilter() {
+    @NonNull
+    public IntentFilter getIntentFilter() {
         if (sIntentFilter == null) {
             sIntentFilter = new IntentFilter();
             sIntentFilter.addAction(ACTION_INTERSTITIAL_FAIL);
@@ -52,14 +43,7 @@ public void onReceive(Context context, Intent intent) {
             return;
         }
 
-        /**
-         * Only consume this broadcast if the identifier on the received Intent and this broadcast
-         * match up. This allows us to target broadcasts to the ad that spawned them. We include
-         * this here because there is no appropriate IntentFilter condition that can recreate this
-         * behavior.
-         */
-        final long receivedIdentifier = intent.getLongExtra(DataKeys.BROADCAST_IDENTIFIER_KEY, -1);
-        if (mBroadcastIdentifier != receivedIdentifier) {
+        if (!shouldConsumeBroadcast(intent)) {
             return;
         }
 
@@ -70,22 +54,10 @@ public void onReceive(Context context, Intent intent) {
             mCustomEventInterstitialListener.onInterstitialShown();
         } else if (ACTION_INTERSTITIAL_DISMISS.equals(action)) {
             mCustomEventInterstitialListener.onInterstitialDismissed();
-            unregister();
+            unregister(this);
         } else if (ACTION_INTERSTITIAL_CLICK.equals(action)) {
             mCustomEventInterstitialListener.onInterstitialClicked();
         }
 
     }
-
-    public void register(Context context) {
-        mContext = context;
-        LocalBroadcastManager.getInstance(mContext).registerReceiver(this, sIntentFilter);
-    }
-
-    public void unregister() {
-        if (mContext != null) {
-            LocalBroadcastManager.getInstance(mContext).unregisterReceiver(this);
-            mContext = null;
-        }
-    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlBannerWebView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlBannerWebView.java
index 358ea16c..3d847393 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlBannerWebView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlBannerWebView.java
@@ -13,10 +13,10 @@ public HtmlBannerWebView(Context context, AdReport adReport) {
         super(context, adReport);
     }
 
-    public void init(CustomEventBannerListener customEventBannerListener, boolean isScrollable, String redirectUrl, String clickthroughUrl) {
+    public void init(CustomEventBannerListener customEventBannerListener, boolean isScrollable, String redirectUrl, String clickthroughUrl, String dspCreativeId) {
         super.init(isScrollable);
 
-        setWebViewClient(new HtmlWebViewClient(new HtmlBannerWebViewListener(customEventBannerListener), this, clickthroughUrl, redirectUrl));
+        setWebViewClient(new HtmlWebViewClient(new HtmlBannerWebViewListener(customEventBannerListener), this, clickthroughUrl, redirectUrl, dspCreativeId));
     }
 
     static class HtmlBannerWebViewListener implements HtmlWebViewListener {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java
index 78795c1b..fb3762c0 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java
@@ -16,11 +16,11 @@ public HtmlInterstitialWebView(Context context, AdReport adReport) {
         mHandler = new Handler();
     }
 
-    public void init(final CustomEventInterstitialListener customEventInterstitialListener, boolean isScrollable, String redirectUrl, String clickthroughUrl) {
+    public void init(final CustomEventInterstitialListener customEventInterstitialListener, boolean isScrollable, String redirectUrl, String clickthroughUrl, String dspCreativeId) {
         super.init(isScrollable);
 
         HtmlInterstitialWebViewListener htmlInterstitialWebViewListener = new HtmlInterstitialWebViewListener(customEventInterstitialListener);
-        HtmlWebViewClient htmlWebViewClient = new HtmlWebViewClient(htmlInterstitialWebViewListener, this, clickthroughUrl, redirectUrl);
+        HtmlWebViewClient htmlWebViewClient = new HtmlWebViewClient(htmlInterstitialWebViewListener, this, clickthroughUrl, redirectUrl, dspCreativeId);
         setWebViewClient(htmlWebViewClient);
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
index 35e56469..0ee54d20 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
@@ -33,22 +33,27 @@
             UrlAction.FOLLOW_DEEP_LINK);
 
     private final Context mContext;
+    private final String mDspCreativeId;
     private HtmlWebViewListener mHtmlWebViewListener;
     private BaseHtmlWebView mHtmlWebView;
     private final String mClickthroughUrl;
     private final String mRedirectUrl;
 
-    HtmlWebViewClient(HtmlWebViewListener htmlWebViewListener, BaseHtmlWebView htmlWebView, String clickthrough, String redirect) {
+    HtmlWebViewClient(HtmlWebViewListener htmlWebViewListener,
+            BaseHtmlWebView htmlWebView, String clickthrough,
+            String redirect, String dspCreativeId) {
         mHtmlWebViewListener = htmlWebViewListener;
         mHtmlWebView = htmlWebView;
         mClickthroughUrl = clickthrough;
         mRedirectUrl = redirect;
+        mDspCreativeId = dspCreativeId;
         mContext = htmlWebView.getContext();
     }
 
     @Override
     public boolean shouldOverrideUrlLoading(final WebView view, final String url) {
         new UrlHandler.Builder()
+                .withDspCreativeId(mDspCreativeId)
                 .withSupportedUrlActions(SUPPORTED_URL_ACTIONS)
                 .withResultActions(new UrlHandler.ResultActions() {
                     @Override
@@ -92,7 +97,7 @@ public void onPageStarted(WebView view, String url, Bitmap favicon) {
             view.stopLoading();
             if (mHtmlWebView.wasClicked()) {
                 try {
-                    Intents.showMoPubBrowserForUrl(mContext, Uri.parse(url));
+                    Intents.showMoPubBrowserForUrl(mContext, Uri.parse(url), mDspCreativeId);
                 } catch (IntentNotResolvableException e) {
                     MoPubLog.d(e.getMessage());
                 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubActivity.java
index bf0168d3..4e3a4480 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubActivity.java
@@ -67,15 +67,19 @@ static Intent createIntent(Context context,
 
     static void preRenderHtml(final Context context, final AdReport adReport,
             final CustomEventInterstitialListener customEventInterstitialListener,
-            String htmlData) {
-        HtmlInterstitialWebView dummyWebView = HtmlInterstitialWebViewFactory.create(context, adReport, customEventInterstitialListener, false, null, null);
+            final String htmlData) {
+        final HtmlInterstitialWebView dummyWebView = HtmlInterstitialWebViewFactory.create(context,
+                adReport, customEventInterstitialListener, false, null, null);
+
         dummyWebView.enablePlugins(false);
+        dummyWebView.enableJavascriptCaching();
+
         dummyWebView.setWebViewClient(new WebViewClient() {
             @Override
             public boolean shouldOverrideUrlLoading(WebView view, String url) {
-                if (url.equals(MOPUB_FINISH_LOAD)) {
+                if (MOPUB_FINISH_LOAD.equals(url)) {
                     customEventInterstitialListener.onInterstitialLoaded();
-                } else if (url.equals(MOPUB_FAIL_LOAD)) {
+                } else if (MOPUB_FAIL_LOAD.equals(url)) {
                     customEventInterstitialListener.onInterstitialFailed(null);
                 }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
index 5aa4176d..25bf2a69 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
@@ -7,6 +7,7 @@
 
 import com.mopub.common.AdFormat;
 import com.mopub.common.MoPub;
+import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.factories.CustomEventInterstitialAdapterFactory;
 
@@ -42,14 +43,6 @@ boolean isReady() {
         public void onInterstitialDismissed(MoPubInterstitial interstitial);
     }
 
-    private MoPubInterstitialListener mListener;
-
-    @Deprecated
-    public interface MoPubInterstitialListener {
-        public void OnInterstitialLoaded();
-        public void OnInterstitialFailed();
-    }
-
     public MoPubInterstitial(Activity activity, String id) {
         mActivity = activity;
         mAdUnitId = id;
@@ -177,8 +170,6 @@ public void onCustomEventInterstitialLoaded() {
 
         if (mInterstitialAdListener != null) {
             mInterstitialAdListener.onInterstitialLoaded(this);
-        } else if (mListener != null) {
-            mListener.OnInterstitialLoaded();
         }
     }
 
@@ -223,26 +214,6 @@ public void onCustomEventInterstitialDismissed() {
         }
     }
 
-    @Deprecated
-    public void setLocationAwareness(LocationAwareness locationAwareness) {
-        MoPub.setLocationAwareness(locationAwareness.getNewLocationAwareness());
-    }
-
-    @Deprecated
-    public LocationAwareness getLocationAwareness() {
-        return LocationAwareness.fromMoPubLocationAwareness(MoPub.getLocationAwareness());
-    }
-
-    @Deprecated
-    public void setLocationPrecision(int precision) {
-        MoPub.setLocationPrecision(precision);
-    }
-
-    @Deprecated
-    public int getLocationPrecision() {
-        return MoPub.getLocationPrecision();
-    }
-
     ////////////////////////////////////////////////////////////////////////////////////////////////
 
     public class MoPubInterstitialView extends MoPubView {
@@ -298,47 +269,9 @@ protected void adFailed(MoPubErrorCode errorCode) {
         }
     }
 
-    @Deprecated // for testing
+    @VisibleForTesting
+    @Deprecated
     void setInterstitialView(MoPubInterstitialView interstitialView) {
         mInterstitialView = interstitialView;
     }
-
-    @Deprecated
-    public void setListener(MoPubInterstitialListener listener) {
-        mListener = listener;
-    }
-
-    @Deprecated
-    public MoPubInterstitialListener getListener() {
-        return mListener;
-    }
-
-    @Deprecated
-    public void customEventDidLoadAd() {
-        if (mInterstitialView != null) mInterstitialView.trackImpression();
-    }
-
-    @Deprecated
-    public void customEventDidFailToLoadAd() {
-        if (mInterstitialView != null) mInterstitialView.loadFailUrl(MoPubErrorCode.UNSPECIFIED);
-    }
-
-    @Deprecated
-    public void customEventActionWillBegin() {
-        if (mInterstitialView != null) mInterstitialView.registerClick();
-    }
-
-    /**
-     * @deprecated As of release 2.4
-     */
-    @Deprecated
-    public void setFacebookSupported(boolean enabled) {}
-
-    /**
-     * @deprecated As of release 2.4
-     */
-    @Deprecated
-    public boolean isFacebookSupported() {
-        return false;
-    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java
new file mode 100644
index 00000000..9715fdb0
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java
@@ -0,0 +1,211 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.DataKeys;
+import com.mopub.common.LifecycleListener;
+import com.mopub.common.MoPubReward;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+
+import java.util.Map;
+
+/**
+ * A custom event for showing MoPub rewarded videos.
+ */
+public class MoPubRewardedVideo extends CustomEventRewardedVideo {
+
+    @NonNull private static final String MOPUB_REWARDED_VIDEO_ID = "mopub_rewarded_video_id";
+
+    @NonNull private RewardedVastVideoInterstitial mRewardedVastVideoInterstitial;
+    @Nullable private String mRewardedVideoCurrencyName;
+    private int mRewardedVideoCurrencyAmount;
+    private boolean mIsLoaded;
+
+    public MoPubRewardedVideo() {
+        mRewardedVastVideoInterstitial = new RewardedVastVideoInterstitial();
+    }
+
+    @Nullable
+    @Override
+    protected CustomEventRewardedVideoListener getVideoListenerForSdk() {
+        // Since MoPub is the SDK, there is no reason to get the SDK video listener
+        // since we have direct access.
+        return null;
+    }
+
+    @Nullable
+    @Override
+    protected LifecycleListener getLifecycleListener() {
+        // RewardedVastVideoInterstitial will handle all lifecycle events.
+        return null;
+    }
+
+    @NonNull
+    @Override
+    protected String getAdNetworkId() {
+        return MOPUB_REWARDED_VIDEO_ID;
+    }
+
+    @Override
+    protected void onInvalidate() {
+        mRewardedVastVideoInterstitial.onInvalidate();
+        mIsLoaded = false;
+    }
+
+    @Override
+    protected boolean checkAndInitializeSdk(@NonNull final Activity launcherActivity,
+            @NonNull final Map<String, Object> localExtras,
+            @NonNull final Map<String, String> serverExtras) throws Exception {
+        // No additional initialization is necessary.
+        return false;
+    }
+
+    @Override
+    protected void loadWithSdkInitialized(@NonNull final Activity activity,
+            @NonNull final Map<String, Object> localExtras,
+            @NonNull final Map<String, String> serverExtras) throws Exception {
+        Preconditions.checkNotNull(activity, "activity cannot be null");
+        Preconditions.checkNotNull(localExtras, "localExtras cannot be null");
+        Preconditions.checkNotNull(serverExtras, "serverExtras cannot be null");
+
+        final Object rewardedVideoCurrencyName = localExtras.get(
+                DataKeys.REWARDED_VIDEO_CURRENCY_NAME_KEY);
+        if (rewardedVideoCurrencyName instanceof String) {
+            mRewardedVideoCurrencyName = (String) rewardedVideoCurrencyName;
+        } else {
+            MoPubLog.d("No currency name specified for rewarded video. Using the default name.");
+            mRewardedVideoCurrencyName = MoPubReward.NO_REWARD_LABEL;
+        }
+
+        final Object rewardedVideoCurrencyAmount = localExtras.get(
+                DataKeys.REWARDED_VIDEO_CURRENCY_AMOUNT_STRING_KEY);
+        if (rewardedVideoCurrencyAmount instanceof String) {
+            try {
+                mRewardedVideoCurrencyAmount = Integer.parseInt(
+                        (String) rewardedVideoCurrencyAmount);
+            } catch (NumberFormatException e) {
+                MoPubLog.d(
+                        "Unable to convert currency amount: " + rewardedVideoCurrencyAmount +
+                                ". Using the default reward amount: " +
+                                MoPubReward.DEFAULT_REWARD_AMOUNT);
+                mRewardedVideoCurrencyAmount = MoPubReward.DEFAULT_REWARD_AMOUNT;
+            }
+        } else {
+            MoPubLog.d(
+                    "No currency amount specified for rewarded video. Using the default reward amount: " +
+                            MoPubReward.DEFAULT_REWARD_AMOUNT);
+            mRewardedVideoCurrencyAmount = MoPubReward.DEFAULT_REWARD_AMOUNT;
+        }
+
+        if (mRewardedVideoCurrencyAmount < 0) {
+            MoPubLog.d(
+                    "Negative currency amount specified for rewarded video. Using the default reward amount: " +
+                            MoPubReward.DEFAULT_REWARD_AMOUNT);
+            mRewardedVideoCurrencyAmount = MoPubReward.DEFAULT_REWARD_AMOUNT;
+        }
+
+        mRewardedVastVideoInterstitial.loadInterstitial(activity, new MoPubRewardedVideoListener(),
+                localExtras, serverExtras);
+    }
+
+    @Override
+    protected boolean hasVideoAvailable() {
+        return mIsLoaded;
+    }
+
+    @Override
+    protected void showVideo() {
+        if (hasVideoAvailable()) {
+            MoPubLog.d("Showing MoPub rewarded video.");
+            mRewardedVastVideoInterstitial.showInterstitial();
+        } else {
+            MoPubLog.d("Unable to show MoPub rewarded video");
+        }
+    }
+
+    private class MoPubRewardedVideoListener implements CustomEventInterstitial.CustomEventInterstitialListener, RewardedVastVideoInterstitial.CustomEventRewardedVideoInterstitialListener {
+        @Override
+        public void onInterstitialLoaded() {
+            mIsLoaded = true;
+            MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(MoPubRewardedVideo.class,
+                    MOPUB_REWARDED_VIDEO_ID);
+        }
+
+        @Override
+        public void onInterstitialFailed(final MoPubErrorCode errorCode) {
+            switch (errorCode) {
+                case VIDEO_PLAYBACK_ERROR:
+                    MoPubRewardedVideoManager.onRewardedVideoPlaybackError(MoPubRewardedVideo.class,
+                            MOPUB_REWARDED_VIDEO_ID, errorCode);
+                    break;
+                default:
+                    MoPubRewardedVideoManager.onRewardedVideoLoadFailure(MoPubRewardedVideo.class,
+                            MOPUB_REWARDED_VIDEO_ID, errorCode);
+            }
+        }
+
+        @Override
+        public void onInterstitialShown() {
+            MoPubRewardedVideoManager.onRewardedVideoStarted(MoPubRewardedVideo.class,
+                    MOPUB_REWARDED_VIDEO_ID);
+        }
+
+        @Override
+        public void onInterstitialClicked() {
+            MoPubRewardedVideoManager.onRewardedVideoClicked(MoPubRewardedVideo.class,
+                    MOPUB_REWARDED_VIDEO_ID);
+        }
+
+        @Override
+        public void onLeaveApplication() {
+        }
+
+        @Override
+        public void onInterstitialDismissed() {
+            MoPubRewardedVideoManager.onRewardedVideoClosed(MoPubRewardedVideo.class,
+                    MOPUB_REWARDED_VIDEO_ID);
+        }
+
+        @Override
+        public void onVideoComplete() {
+            if (mRewardedVideoCurrencyName == null) {
+                MoPubLog.d("No rewarded video was loaded, so no reward is possible");
+            } else {
+                MoPubRewardedVideoManager.onRewardedVideoCompleted(MoPubRewardedVideo.class,
+                        MOPUB_REWARDED_VIDEO_ID,
+                        MoPubReward.success(mRewardedVideoCurrencyName,
+                                mRewardedVideoCurrencyAmount));
+            }
+        }
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    void setRewardedVastVideoInterstitial(
+            @NonNull final RewardedVastVideoInterstitial rewardedVastVideoInterstitial) {
+        mRewardedVastVideoInterstitial = rewardedVastVideoInterstitial;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    @Nullable
+    String getRewardedVideoCurrencyName() {
+        return mRewardedVideoCurrencyName;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    int getRewardedVideoCurrencyAmount() {
+        return mRewardedVideoCurrencyAmount;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    void setIsLoaded(final boolean isLoaded) {
+        mIsLoaded = isLoaded;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
index cc285b42..fab2d5d8 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
@@ -2,23 +2,27 @@
 
 import android.app.Activity;
 import android.content.Context;
+import android.location.Location;
 import android.os.Handler;
 import android.os.Looper;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.text.TextUtils;
 
 import com.mopub.common.AdFormat;
+import com.mopub.common.AdReport;
 import com.mopub.common.AdUrlGenerator;
+import com.mopub.common.ClientMetadata;
 import com.mopub.common.Constants;
 import com.mopub.common.DataKeys;
-import com.mopub.common.LocationService;
 import com.mopub.common.MediationSettings;
-import com.mopub.common.MoPub;
 import com.mopub.common.MoPubReward;
 import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.MoPubCollections;
 import com.mopub.common.util.Reflection;
+import com.mopub.common.util.Utils;
 import com.mopub.network.AdRequest;
 import com.mopub.network.AdResponse;
 import com.mopub.network.MoPubNetworkError;
@@ -36,17 +40,25 @@
 import java.util.TreeMap;
 
 /**
+ * Handles requesting Rewarded Video ads and mapping Rewarded Video SDK settings to the CustomEvent
+ * that is being loaded.
  */
 public class MoPubRewardedVideoManager {
     private static MoPubRewardedVideoManager sInstance;
     private static final int DEFAULT_LOAD_TIMEOUT = Constants.THIRTY_SECONDS_MILLIS;
 
+    /**
+     * This must an integer because the backend only supports int types for api version.
+     */
+    public static final int API_VERSION = 1;
+
     @NonNull private final Handler mCallbackHandler;
     @NonNull private WeakReference<Activity> mMainActivity;
     @NonNull private final Context mContext;
     @NonNull private final AdRequestStatusMapping mAdRequestStatus;
     @NonNull private final RewardedVideoData mRewardedVideoData;
     @Nullable private MoPubRewardedVideoListener mVideoListener;
+    private final long mBroadcastIdentifier;
     
     @NonNull private final Set<MediationSettings> mGlobalMediationSettings;
     @NonNull private final Map<String, Set<MediationSettings>> mInstanceMediationSettings;
@@ -74,6 +86,29 @@ public void onErrorResponse(final VolleyError volleyError) {
         }
     }
 
+    public static final class RequestParameters {
+        @Nullable public final String mKeywords;
+        @Nullable public final Location mLocation;
+        @Nullable public final String mCustomerId;
+
+        public RequestParameters(@Nullable final String keywords) {
+            this(keywords, null);
+        }
+
+        public RequestParameters(@Nullable final String keywords,
+                @Nullable final Location location) {
+            this(keywords, location, null);
+        }
+
+        public RequestParameters(@Nullable final String keywords, @Nullable final Location location,
+                @Nullable final String customerId) {
+            mKeywords = keywords;
+            mLocation = location;
+            mCustomerId = customerId;
+        }
+    }
+
+
     private MoPubRewardedVideoManager(@NonNull Activity mainActivity, MediationSettings... mediationSettings) {
         mMainActivity = new WeakReference<Activity>(mainActivity);
         mContext = mainActivity.getApplicationContext();
@@ -84,6 +119,7 @@ private MoPubRewardedVideoManager(@NonNull Activity mainActivity, MediationSetti
         mInstanceMediationSettings = new HashMap<String, Set<MediationSettings>>();
         mCustomEventTimeoutHandler = new Handler();
         mTimeoutMap = new HashMap<String, Runnable>();
+        mBroadcastIdentifier = Utils.generateUniqueId();
         
         mAdRequestStatus = new AdRequestStatusMapping();
     }
@@ -180,10 +216,14 @@ public static void setVideoListener(@Nullable MoPubRewardedVideoListener listene
      * method will not make a new request if there is already a video loading for this adUnitId.
      *
      * @param adUnitId MoPub adUnitId String
+     * @param requestParameters Optional RequestParameters object containing optional keywords,
+     *                          optional location value, and optional customer id
      * @param mediationSettings Optional instance-level MediationSettings to associate with the
      *                          above adUnitId.
      */
-    public static void loadVideo(@NonNull String adUnitId, @Nullable final MediationSettings... mediationSettings) {
+    public static void loadVideo(@NonNull final String adUnitId,
+            @Nullable final RequestParameters requestParameters,
+            @Nullable final MediationSettings... mediationSettings) {
         if (sInstance == null) {
             logErrorNotInitialized();
             return;
@@ -196,15 +236,15 @@ public static void loadVideo(@NonNull String adUnitId, @Nullable final Mediation
         MoPubCollections.addAllNonNull(newInstanceMediationSettings, mediationSettings);
         sInstance.mInstanceMediationSettings.put(adUnitId, newInstanceMediationSettings);
 
+        final String customerId = requestParameters == null ? null : requestParameters.mCustomerId;
+        if (!TextUtils.isEmpty(customerId)) {
+            sInstance.mRewardedVideoData.setCustomerId(customerId);
+        }
+
         final AdUrlGenerator urlGenerator = new WebViewAdUrlGenerator(sInstance.mContext, false);
         final String adUrlString = urlGenerator.withAdUnitId(adUnitId)
-                .withLocation(
-                        LocationService.getLastKnownLocation(
-                                sInstance.mContext,
-                                MoPub.getLocationPrecision(),
-                                MoPub.getLocationAwareness()
-                        )
-                )
+                .withKeywords(requestParameters == null ? null : requestParameters.mKeywords)
+                .withLocation(requestParameters == null ? null : requestParameters.mLocation)
                 .generateUrlString(Constants.HOST);
 
         loadVideo(adUnitId, adUrlString);
@@ -249,6 +289,10 @@ public static void showVideo(@NonNull String adUnitId) {
         if (sInstance != null) {
             final CustomEventRewardedVideo customEvent = sInstance.mRewardedVideoData.getCustomEvent(adUnitId);
             if (isPlayable(adUnitId, customEvent)) {
+                sInstance.mRewardedVideoData.updateCustomEventLastShownRewardMapping(
+                        customEvent.getClass(),
+                        sInstance.mRewardedVideoData.getMoPubReward(adUnitId));
+                sInstance.mRewardedVideoData.setCurrentAdUnitId(adUnitId);
                 sInstance.mAdRequestStatus.markPlayed(adUnitId);
                 customEvent.showVideo();
             } else {
@@ -279,12 +323,21 @@ private void onAdSuccess(AdResponse adResponse, String adUnitId) {
         }
 
         final String customEventClassName = adResponse.getCustomEventClassName();
+
         if (customEventClassName == null) {
             MoPubLog.e("Couldn't create custom event, class name was null.");
             failover(adUnitId, MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
             return;
         }
 
+        // We only allow one rewarded video to be loaded at a time for each ad unit. This should
+        // clear out the old rewarded video if there already was one loaded and not played.
+        final CustomEventRewardedVideo oldRewardedVideo = mRewardedVideoData.getCustomEvent(
+                adUnitId);
+        if (oldRewardedVideo != null) {
+            oldRewardedVideo.onInvalidate();
+        }
+
         try {
             // Instantiate a custom event
             final CustomEventRewardedVideo customEvent =
@@ -295,6 +348,20 @@ private void onAdSuccess(AdResponse adResponse, String adUnitId) {
             // Put important data into localExtras...
             final Map<String, Object> localExtras = new TreeMap<String, Object>();
             localExtras.put(DataKeys.AD_UNIT_ID_KEY, adUnitId);
+            localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_NAME_KEY,
+                    adResponse.getRewardedVideoCurrencyName());
+            localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_AMOUNT_STRING_KEY,
+                    adResponse.getRewardedVideoCurrencyAmount());
+            localExtras.put(DataKeys.AD_REPORT_KEY,
+                    new AdReport(adUnitId, ClientMetadata.getInstance(mContext), adResponse));
+            localExtras.put(DataKeys.BROADCAST_IDENTIFIER_KEY, mBroadcastIdentifier);
+            localExtras.put(DataKeys.REWARDED_VIDEO_CUSTOMER_ID,
+                    mRewardedVideoData.getCustomerId());
+            mRewardedVideoData.updateAdUnitRewardMapping(adUnitId,
+                    adResponse.getRewardedVideoCurrencyName(),
+                    adResponse.getRewardedVideoCurrencyAmount());
+            mRewardedVideoData.updateAdUnitToServerCompletionUrlMapping(adUnitId,
+                    adResponse.getRewardedVideoCompletionUrl());
 
             Activity mainActivity = mMainActivity.get();
             if (mainActivity == null) {
@@ -409,71 +476,159 @@ protected void forEach(@NonNull final String moPubId) {
 
     public static <T extends CustomEventRewardedVideo>
     void onRewardedVideoStarted(@NonNull final Class<T> customEventClass, final String thirdPartyId) {
-        postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
-            @Override
-            protected void forEach(@NonNull final String moPubId) {
-                if (sInstance.mVideoListener != null) {
-                    sInstance.mVideoListener.onRewardedVideoStarted(moPubId);
+        final String currentAdUnitId = sInstance.mRewardedVideoData.getCurrentAdUnitId();
+        if (TextUtils.isEmpty(currentAdUnitId)) {
+            postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
+                @Override
+                protected void forEach(@NonNull final String moPubId) {
+                    onRewardedVideoStartedAction(moPubId);
                 }
-                TrackingRequest.makeTrackingHttpRequest(
-                        sInstance.mAdRequestStatus.getImpressionTrackerUrlString(moPubId),
-                        sInstance.mContext);
-                sInstance.mAdRequestStatus.clearImpressionUrl(moPubId);
-            }
-        });
+            });
+        } else {
+            postToInstance(new Runnable() {
+                @Override
+                public void run() {
+                    onRewardedVideoStartedAction(currentAdUnitId);
+                }
+            });
+        }
+    }
+
+    private static void onRewardedVideoStartedAction(@NonNull final String adUnitId) {
+        Preconditions.checkNotNull(adUnitId);
+        if (sInstance.mVideoListener != null) {
+            sInstance.mVideoListener.onRewardedVideoStarted(adUnitId);
+        }
+        TrackingRequest.makeTrackingHttpRequest(
+                sInstance.mAdRequestStatus.getImpressionTrackerUrlString(adUnitId),
+                sInstance.mContext);
+        sInstance.mAdRequestStatus.clearImpressionUrl(adUnitId);
     }
 
     public static <T extends CustomEventRewardedVideo>
     void onRewardedVideoPlaybackError(@NonNull final Class<T> customEventClass, final String thirdPartyId, final MoPubErrorCode errorCode) {
-        postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
-            @Override
-            protected void forEach(@NonNull final String moPubId) {
-                if (sInstance.mVideoListener != null) {
-                    sInstance.mVideoListener.onRewardedVideoPlaybackError(moPubId, errorCode);
+        final String currentAdUnitId = sInstance.mRewardedVideoData.getCurrentAdUnitId();
+        if (TextUtils.isEmpty(currentAdUnitId)) {
+            postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
+                @Override
+                protected void forEach(@NonNull final String moPubId) {
+                    onRewardedVideoPlaybackErrorAction(moPubId, errorCode);
                 }
-            }
-        });
+            });
+        } else {
+            postToInstance(new Runnable() {
+                @Override
+                public void run() {
+                    onRewardedVideoPlaybackErrorAction(currentAdUnitId, errorCode);
+                }
+            });
+        }
+    }
 
+    private static void onRewardedVideoPlaybackErrorAction(@NonNull final String adUnitId, @NonNull final MoPubErrorCode errorCode) {
+        Preconditions.checkNotNull(adUnitId);
+        Preconditions.checkNotNull(errorCode);
+        if (sInstance.mVideoListener != null) {
+            sInstance.mVideoListener.onRewardedVideoPlaybackError(adUnitId, errorCode);
+        }
     }
 
     public static <T extends CustomEventRewardedVideo>
     void onRewardedVideoClicked(@NonNull final Class<T> customEventClass, final String thirdPartyId) {
-        postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
-            @Override
-            protected void forEach(@NonNull final String moPubId) {
-                TrackingRequest.makeTrackingHttpRequest(
-                        sInstance.mAdRequestStatus.getClickTrackerUrlString(moPubId),
-                        sInstance.mContext);
-                sInstance.mAdRequestStatus.clearClickUrl(moPubId);
-            }
-        });
+        final String currentAdUnitId = sInstance.mRewardedVideoData.getCurrentAdUnitId();
+        if (TextUtils.isEmpty(currentAdUnitId)) {
+            postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
+                @Override
+                protected void forEach(@NonNull final String moPubId) {
+                    onRewardedVideoClickedAction(moPubId);
+                }
+            });
+        } else {
+            postToInstance(new Runnable() {
+                @Override
+                public void run() {
+                    onRewardedVideoClickedAction(currentAdUnitId);
+                }
+            });
+        }
+    }
+
+    private static void onRewardedVideoClickedAction(@NonNull final String adUnitId) {
+        Preconditions.checkNotNull(adUnitId);
+        TrackingRequest.makeTrackingHttpRequest(
+                sInstance.mAdRequestStatus.getClickTrackerUrlString(adUnitId),
+                sInstance.mContext);
+        sInstance.mAdRequestStatus.clearClickUrl(adUnitId);
     }
 
     public static <T extends CustomEventRewardedVideo>
     void onRewardedVideoClosed(@NonNull final Class<T> customEventClass, final String thirdPartyId) {
-        postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
-            @Override
-            protected void forEach(@NonNull final String moPubId) {
-                if (sInstance.mVideoListener != null) {
-                    sInstance.mVideoListener.onRewardedVideoClosed(moPubId);
+        final String currentAdUnitId = sInstance.mRewardedVideoData.getCurrentAdUnitId();
+        if (TextUtils.isEmpty(currentAdUnitId)) {
+            postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
+                @Override
+                protected void forEach(@NonNull final String moPubId) {
+                    onRewardedVideoClosedAction(moPubId);
                 }
-            }
-        });
+            });
+        } else {
+            postToInstance(new Runnable() {
+                @Override
+                public void run() {
+                    onRewardedVideoClosedAction(currentAdUnitId);
+                }
+            });
+        }
+    }
+
+    private static void onRewardedVideoClosedAction(@NonNull final String adUnitId) {
+        Preconditions.checkNotNull(adUnitId);
+        if (sInstance.mVideoListener != null) {
+            sInstance.mVideoListener.onRewardedVideoClosed(adUnitId);
+        }
     }
 
     public static <T extends CustomEventRewardedVideo>
     void onRewardedVideoCompleted(@NonNull final Class<T> customEventClass, final String thirdPartyId, @NonNull final MoPubReward moPubReward) {
         // Unlike other callbacks in this class, only call the listener once with all the MoPubIds in the matching set.
-        postToInstance(new Runnable() {
-            @Override
-            public void run() {
-                final Set<String> moPubIds = sInstance.mRewardedVideoData.getMoPubIdsForAdNetwork(customEventClass, thirdPartyId);
-                Set<String> rewarded = new HashSet<String>(moPubIds);
-                if (sInstance.mVideoListener != null) {
-                    sInstance.mVideoListener.onRewardedVideoCompleted(rewarded, moPubReward);
+        final String currentAdUnitId = sInstance.mRewardedVideoData.getCurrentAdUnitId();
+        final String serverCompletionUrl = sInstance.mRewardedVideoData.getServerCompletionUrl(
+                currentAdUnitId);
+        if (TextUtils.isEmpty(serverCompletionUrl)) {
+            postToInstance(new Runnable() {
+                @Override
+                public void run() {
+                    final MoPubReward chosenReward = chooseReward(
+                            sInstance.mRewardedVideoData.getLastShownMoPubReward(customEventClass),
+                            moPubReward);
+                    final Set<String> moPubIds = sInstance.mRewardedVideoData.getMoPubIdsForAdNetwork(
+                            customEventClass, thirdPartyId);
+                    Set<String> rewarded = new HashSet<String>(moPubIds);
+                    if (sInstance.mVideoListener != null) {
+                        sInstance.mVideoListener.onRewardedVideoCompleted(rewarded, chosenReward);
+                    }
                 }
-            }
-        });
+            });
+        } else {
+            postToInstance(new Runnable() {
+                @Override
+                public void run() {
+                    RewardedVideoCompletionRequestHandler.makeRewardedVideoCompletionRequest(
+                            sInstance.mContext,
+                            serverCompletionUrl,
+                            sInstance.mRewardedVideoData.getCustomerId());
+                }
+            });
+        }
+    }
+
+    @VisibleForTesting
+    static MoPubReward chooseReward(@Nullable final MoPubReward moPubReward, @NonNull final MoPubReward networkReward) {
+        if (!networkReward.isSuccessful()) {
+            return networkReward;
+        }
+
+        return moPubReward != null ? moPubReward : networkReward;
     }
 
     /**
@@ -520,4 +675,14 @@ public void run() {
             }
         }
     }
+
+    @Deprecated
+    @VisibleForTesting
+    @Nullable
+    static RewardedVideoData getRewardedVideoData() {
+        if (sInstance != null) {
+            return sInstance.mRewardedVideoData;
+        }
+        return null;
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
index 4c272364..87028860 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
@@ -14,7 +14,6 @@
 import android.widget.FrameLayout;
 
 import com.mopub.common.AdFormat;
-import com.mopub.common.MoPub;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.ManifestUtils;
 import com.mopub.common.util.Visibility;
@@ -24,7 +23,6 @@
 import java.util.Map;
 import java.util.TreeMap;
 
-import static com.mopub.common.LocationService.LocationAwareness;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
 
 public class MoPubView extends FrameLayout {
@@ -36,7 +34,6 @@
         public void onBannerCollapsed(MoPubView banner);
     }
 
-    public static final int DEFAULT_LOCATION_PRECISION = 6;
     @Nullable
     protected AdViewController mAdViewController;
     protected CustomEventBannerAdapter mCustomEventBannerAdapter;
@@ -46,13 +43,6 @@
     private BroadcastReceiver mScreenStateReceiver;
 
     private BannerAdListener mBannerAdListener;
-    
-    private OnAdWillLoadListener mOnAdWillLoadListener;
-    private OnAdLoadedListener mOnAdLoadedListener;
-    private OnAdFailedListener mOnAdFailedListener;
-    private OnAdPresentedOverlayListener mOnAdPresentedOverlayListener;
-    private OnAdClosedListener mOnAdClosedListener;
-    private OnAdClickedListener mOnAdClickedListener;
 
     public MoPubView(Context context) {
         this(context, null);
@@ -70,7 +60,7 @@ public MoPubView(Context context, AttributeSet attrs) {
         setVerticalScrollBarEnabled(false);
 
         // There is a rare bug in Froyo/2.2 where creation of a WebView causes a
-        // NullPointerException. (http://code.google.com/p/android/issues/detail?id=10789)
+        // NullPointerException. (https://code.google.com/p/android/issues/detail?id=10789)
         // It happens when the WebView can't access the local file store to make a cache file.
         // Here, we'll work around it by trying to create a file store and then just go inert
         // if it's not accessible.
@@ -84,7 +74,7 @@ public MoPubView(Context context, AttributeSet attrs) {
         } catch(Throwable t) {
             MoPubLog.e("Disabling MoPub. Error accessing local cache file so MoPub will " +
                     "fail if we try to create a WebView. Details of this Android bug found at:" +
-                    "http://code.google.com/p/android/issues/detail?id=10789");
+                    "https://code.google.com/p/android/issues/detail?id=10789");
             return;
         }
 
@@ -220,40 +210,30 @@ protected void adLoaded() {
         
         if (mBannerAdListener != null) {
             mBannerAdListener.onBannerLoaded(this);
-        } else if (mOnAdLoadedListener != null) {
-            mOnAdLoadedListener.OnAdLoaded(this);
         }
     }
 
     protected void adFailed(MoPubErrorCode errorCode) {
         if (mBannerAdListener != null) {
             mBannerAdListener.onBannerFailed(this, errorCode);
-        } else if (mOnAdFailedListener != null) {
-            mOnAdFailedListener.OnAdFailed(this);
         }
     }
 
     protected void adPresentedOverlay() {
         if (mBannerAdListener != null) {
             mBannerAdListener.onBannerExpanded(this);
-        } else if (mOnAdPresentedOverlayListener != null) {
-            mOnAdPresentedOverlayListener.OnAdPresentedOverlay(this);
         }
     }
 
     protected void adClosed() {
         if (mBannerAdListener != null) {
             mBannerAdListener.onBannerCollapsed(this);
-        } else if (mOnAdClosedListener != null) {
-            mOnAdClosedListener.OnAdClosed(this);
         }
     }
 
     protected void adClicked() {
         if (mBannerAdListener != null) {
             mBannerAdListener.onBannerClicked(this);
-        } else if (mOnAdClickedListener != null) {
-            mOnAdClickedListener.OnAdClicked(this);
         }
     }
 
@@ -288,10 +268,6 @@ public Location getLocation() {
         return (mAdViewController != null) ? mAdViewController.getLocation() : null;
     }
 
-    public void setTimeout(int milliseconds) {
-        if (mAdViewController != null) mAdViewController.setTimeout(milliseconds);
-    }
-
     public int getAdWidth() {
         return (mAdViewController != null) ? mAdViewController.getAdWidth() : 0;
     }
@@ -300,24 +276,6 @@ public int getAdHeight() {
         return (mAdViewController != null) ? mAdViewController.getAdHeight() : 0;
     }
 
-    public String getResponseString() {
-        return (mAdViewController != null) ? mAdViewController.getResponseString() : null;
-    }
-
-    @Deprecated
-    public void setClickthroughUrl(String url) {
-        // Does nothing.
-    }
-
-    public String getClickTrackingUrl() {
-        return (mAdViewController != null) ? mAdViewController.getClickTrackingUrl() : null;
-    }
-
-    @Deprecated
-    public String getClickthroughUrl() {
-        return getClickTrackingUrl();
-    }
-
     public Activity getActivity() {
         return (Activity) mContext;
     }
@@ -390,118 +348,20 @@ public AdFormat getAdFormat() {
         return AdFormat.BANNER;
     }
 
+    /**
+     * @deprecated As of release 4.4.0
+     */
     @Deprecated
-    public void setLocationAwareness(LocationAwareness locationAwareness) {
-        MoPub.setLocationAwareness(locationAwareness.getNewLocationAwareness());
-    }
-
-    @Deprecated
-    public LocationAwareness getLocationAwareness() {
-        return LocationAwareness.fromMoPubLocationAwareness(MoPub.getLocationAwareness());
-    }
-
-    @Deprecated
-    public void setLocationPrecision(int precision) {
-        MoPub.setLocationPrecision(precision);
-    }
-
-    @Deprecated
-    public int getLocationPrecision() {
-        return MoPub.getLocationPrecision();
-    }
-
-    @Deprecated
-    public interface OnAdWillLoadListener {
-        public void OnAdWillLoad(MoPubView m, String url);
-    }
-
-    @Deprecated
-    public interface OnAdLoadedListener {
-        public void OnAdLoaded(MoPubView m);
-    }
-
-    @Deprecated
-    public interface OnAdFailedListener {
-        public void OnAdFailed(MoPubView m);
-    }
-
-    @Deprecated
-    public interface OnAdClosedListener {
-        public void OnAdClosed(MoPubView m);
-    }
-
-    @Deprecated
-    public interface OnAdClickedListener {
-        public void OnAdClicked(MoPubView m);
-    }
-
-    @Deprecated
-    public interface OnAdPresentedOverlayListener {
-        public void OnAdPresentedOverlay(MoPubView m);
-    }
-
-    @Deprecated
-    public void setOnAdWillLoadListener(OnAdWillLoadListener listener) {
-        mOnAdWillLoadListener = listener;
-    }
-
-    @Deprecated
-    public void setOnAdLoadedListener(OnAdLoadedListener listener) {
-        mOnAdLoadedListener = listener;
-    }
-
-    @Deprecated
-    public void setOnAdFailedListener(OnAdFailedListener listener) {
-        mOnAdFailedListener = listener;
-    }
-
-    @Deprecated
-    public void setOnAdPresentedOverlayListener(OnAdPresentedOverlayListener listener) {
-        mOnAdPresentedOverlayListener = listener;
-    }
-
-    @Deprecated
-    public void setOnAdClosedListener(OnAdClosedListener listener) {
-        mOnAdClosedListener = listener;
-    }
-
-    @Deprecated
-    public void setOnAdClickedListener(OnAdClickedListener listener) {
-        mOnAdClickedListener = listener;
-    }
-
-    @Deprecated
-    protected void adWillLoad(String url) {
-        MoPubLog.d("adWillLoad: " + url);
-        if (mOnAdWillLoadListener != null) mOnAdWillLoadListener.OnAdWillLoad(this, url);
-    }
-
-    @Deprecated
-    public void customEventDidLoadAd() {
-        if (mAdViewController != null) mAdViewController.customEventDidLoadAd();
-    }
-
-    @Deprecated
-    public void customEventDidFailToLoadAd() {
-        if (mAdViewController != null) mAdViewController.customEventDidFailToLoadAd();
+    public void setTimeout(int milliseconds) {
     }
 
     @Deprecated
-    public void customEventActionWillBegin() {
-        if (mAdViewController != null) mAdViewController.customEventActionWillBegin();
+    public String getResponseString() {
+        return null;
     }
 
-    /**
-     * @deprecated As of release 2.4
-     */
-    @Deprecated
-    public void setFacebookSupported(boolean enabled) {}
-
-    /**
-     * @deprecated As of release 2.4
-     */
     @Deprecated
-    public boolean isFacebookSupported() {
-        return false;
+    public String getClickTrackingUrl() {
+        return null;
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java
index 2ae82e8d..9b21623f 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java
@@ -24,6 +24,7 @@
 import com.mopub.mraid.MraidController.UseCustomCloseListener;
 import com.mopub.mraid.MraidWebViewDebugListener;
 import com.mopub.mraid.PlacementType;
+import com.mopub.network.Networking;
 
 import static com.mopub.common.DataKeys.AD_REPORT_KEY;
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
@@ -43,9 +44,16 @@
     public static void preRenderHtml(@NonNull final Context context,
             @NonNull final CustomEventInterstitialListener customEventInterstitialListener,
             @NonNull final String htmlData) {
-        BaseWebView dummyWebView = new BaseWebView(context);
+        preRenderHtml(customEventInterstitialListener, htmlData, new BaseWebView(context));
+    }
 
+    @VisibleForTesting
+    static void preRenderHtml(
+            @NonNull final CustomEventInterstitialListener customEventInterstitialListener,
+            @NonNull final String htmlData, @NonNull final BaseWebView dummyWebView) {
         dummyWebView.enablePlugins(false);
+        dummyWebView.enableJavascriptCaching();
+
         dummyWebView.setWebViewClient(new WebViewClient() {
             @Override
             public void onPageFinished(final WebView view, final String url) {
@@ -67,7 +75,7 @@ public void onReceivedError(final WebView view, final int errorCode,
             }
         });
 
-        dummyWebView.loadDataWithBaseURL("http://" + Constants.HOST + "/",
+        dummyWebView.loadDataWithBaseURL(Networking.getBaseUrlScheme() + "://" + Constants.HOST + "/",
                 htmlData, "text/html", "UTF-8", null);
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
index 9f58f6f9..bbbf6322 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
@@ -14,6 +14,7 @@
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Intents;
 import com.mopub.mraid.MraidVideoViewController;
+import com.mopub.nativeads.NativeVideoViewController;
 
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
@@ -79,7 +80,7 @@ protected void onSaveInstanceState(@NonNull Bundle outState) {
     }
 
     @Override
-    public void onConfigurationChanged(@Nullable Configuration newConfig) {
+    public void onConfigurationChanged(final Configuration newConfig) {
         super.onConfigurationChanged(newConfig);
         if (mBaseVideoController != null) {
             mBaseVideoController.onConfigurationChanged(newConfig);
@@ -90,6 +91,7 @@ public void onConfigurationChanged(@Nullable Configuration newConfig) {
     public void onBackPressed() {
         if (mBaseVideoController != null && mBaseVideoController.backButtonEnabled()) {
             super.onBackPressed();
+            mBaseVideoController.onBackPressed();
         }
     }
 
@@ -107,6 +109,8 @@ private BaseVideoViewController createVideoViewController(Bundle savedInstanceSt
             return new VastVideoViewController(this, getIntent().getExtras(), savedInstanceState, mBroadcastIdentifier, this);
         } else if ("mraid".equals(clazz)) {
             return new MraidVideoViewController(this, getIntent().getExtras(), savedInstanceState, this);
+        } else if ("native".equals(clazz)) {
+            return new NativeVideoViewController(this, getIntent().getExtras(), savedInstanceState, this);
         } else {
             throw new IllegalStateException("Unsupported video type: " + clazz);
         }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/RepeatingHandlerRunnable.java b/mopub-sdk/src/main/java/com/mopub/mobileads/RepeatingHandlerRunnable.java
index 2c26fa69..05a8c05d 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/RepeatingHandlerRunnable.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/RepeatingHandlerRunnable.java
@@ -13,9 +13,9 @@
 public abstract class RepeatingHandlerRunnable implements Runnable {
     @NonNull protected final Handler mHandler;
     private volatile boolean mIsRunning;
-    private volatile long mUpdateIntervalMillis;
+    protected volatile long mUpdateIntervalMillis;
 
-    RepeatingHandlerRunnable(@NonNull final Handler handler) {
+    public RepeatingHandlerRunnable(@NonNull final Handler handler) {
         Preconditions.checkNotNull(handler);
         mHandler = handler;
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
index a6b3c625..aa84f691 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
@@ -56,7 +56,7 @@ public void loadInterstitial(
 
         mBroadcastReceiver = new EventForwardingBroadcastReceiver(customEventInterstitialListener,
                 mBroadcastIdentifier);
-        mBroadcastReceiver.register(context);
+        mBroadcastReceiver.register(mBroadcastReceiver, context);
 
         preRenderHtml(customEventInterstitialListener);
     }
@@ -64,7 +64,7 @@ public void loadInterstitial(
     @Override
     public void onInvalidate() {
         if (mBroadcastReceiver != null) {
-            mBroadcastReceiver.unregister();
+            mBroadcastReceiver.unregister(mBroadcastReceiver);
         }
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVastVideoInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVastVideoInterstitial.java
new file mode 100644
index 00000000..3e1b6c7d
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVastVideoInterstitial.java
@@ -0,0 +1,60 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.VisibleForTesting;
+
+import java.util.Map;
+
+class RewardedVastVideoInterstitial extends VastVideoInterstitial {
+
+    interface CustomEventRewardedVideoInterstitialListener extends CustomEventInterstitialListener {
+        void onVideoComplete();
+    }
+
+    @Nullable private RewardedVideoBroadcastReceiver mRewardedVideoBroadcastReceiver;
+
+    public RewardedVastVideoInterstitial() {
+        super();
+    }
+
+    @Override
+    public void loadInterstitial(
+            Context context,
+            CustomEventInterstitialListener customEventInterstitialListener,
+            Map<String, Object> localExtras,
+            Map<String, String> serverExtras) {
+        super.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
+
+        if (customEventInterstitialListener instanceof CustomEventRewardedVideoInterstitialListener) {
+            mRewardedVideoBroadcastReceiver = new RewardedVideoBroadcastReceiver(
+                    (CustomEventRewardedVideoInterstitialListener) customEventInterstitialListener,
+                    mBroadcastIdentifier);
+            mRewardedVideoBroadcastReceiver.register(mRewardedVideoBroadcastReceiver, context);
+        }
+    }
+
+    @Override
+    public void onVastVideoConfigurationPrepared(final VastVideoConfig vastVideoConfig) {
+        if (vastVideoConfig != null) {
+            vastVideoConfig.setIsRewardedVideo(true);
+        }
+        super.onVastVideoConfigurationPrepared(vastVideoConfig);
+    }
+
+    @Override
+    public void onInvalidate() {
+        super.onInvalidate();
+        if (mRewardedVideoBroadcastReceiver != null) {
+            mRewardedVideoBroadcastReceiver.unregister(mRewardedVideoBroadcastReceiver);
+        }
+    }
+
+    @VisibleForTesting
+    @Deprecated
+    @Nullable
+    RewardedVideoBroadcastReceiver getRewardedVideoBroadcastReceiver() {
+        return mRewardedVideoBroadcastReceiver;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoBroadcastReceiver.java b/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoBroadcastReceiver.java
new file mode 100644
index 00000000..e53712e2
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoBroadcastReceiver.java
@@ -0,0 +1,50 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+public class RewardedVideoBroadcastReceiver extends BaseBroadcastReceiver {
+
+    public static final String ACTION_REWARDED_VIDEO_COMPLETE = "com.mopub.action.rewardedvideo.complete";
+    private static IntentFilter sIntentFilter;
+
+    @Nullable
+    private RewardedVastVideoInterstitial.CustomEventRewardedVideoInterstitialListener mRewardedVideoListener;
+
+    public RewardedVideoBroadcastReceiver(
+            @Nullable RewardedVastVideoInterstitial.CustomEventRewardedVideoInterstitialListener rewardedVideoListener,
+            final long broadcastIdentifier) {
+        super(broadcastIdentifier);
+        mRewardedVideoListener = rewardedVideoListener;
+        getIntentFilter();
+    }
+
+    @NonNull
+    public IntentFilter getIntentFilter() {
+        if (sIntentFilter == null) {
+            sIntentFilter = new IntentFilter();
+            sIntentFilter.addAction(ACTION_REWARDED_VIDEO_COMPLETE);
+        }
+        return sIntentFilter;
+    }
+
+    @Override
+    public void onReceive(@NonNull final Context context, @NonNull final Intent intent) {
+        if (mRewardedVideoListener == null) {
+            return;
+        }
+
+        if (!shouldConsumeBroadcast(intent)) {
+            return;
+        }
+
+        final String action = intent.getAction();
+        if (ACTION_REWARDED_VIDEO_COMPLETE.equals(action)) {
+            mRewardedVideoListener.onVideoComplete();
+            unregister(this);
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequest.java b/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequest.java
new file mode 100644
index 00000000..50f10267
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequest.java
@@ -0,0 +1,42 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+
+import com.mopub.volley.NetworkResponse;
+import com.mopub.volley.Request;
+import com.mopub.volley.Response;
+import com.mopub.volley.RetryPolicy;
+import com.mopub.volley.toolbox.HttpHeaderParser;
+
+/**
+ * The actual class making the video completion request. Since we actually only care about the
+ * status code of the request, that's the only thing that is delivered.
+ */
+public class RewardedVideoCompletionRequest extends Request<Integer> {
+
+    public interface RewardedVideoCompletionRequestListener extends Response.ErrorListener {
+        void onResponse(Integer response);
+    }
+
+    @NonNull final RewardedVideoCompletionRequestListener mListener;
+
+    public RewardedVideoCompletionRequest(@NonNull final String url,
+            @NonNull final RetryPolicy retryPolicy,
+            @NonNull final RewardedVideoCompletionRequestListener listener) {
+        super(Method.GET, url, listener);
+        setShouldCache(false);
+        setRetryPolicy(retryPolicy);
+        mListener = listener;
+    }
+
+    @Override
+    protected Response<Integer> parseNetworkResponse(final NetworkResponse networkResponse) {
+        return Response.success(networkResponse.statusCode,
+                HttpHeaderParser.parseCacheHeaders(networkResponse));
+    }
+
+    @Override
+    protected void deliverResponse(final Integer response) {
+        mListener.onResponse(response);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java b/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java
new file mode 100644
index 00000000..5e37c66b
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java
@@ -0,0 +1,156 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.net.Uri;
+import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.mopub.common.MoPub;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.network.Networking;
+import com.mopub.volley.DefaultRetryPolicy;
+import com.mopub.volley.RequestQueue;
+import com.mopub.volley.VolleyError;
+
+/**
+ * Handles the server-to-server rewarded video completion handshake.
+ */
+public class RewardedVideoCompletionRequestHandler implements
+        RewardedVideoCompletionRequest.RewardedVideoCompletionRequestListener {
+
+    /**
+     * Request timeouts. Use the last value if the current retry is higher than the number of values
+     * in this list.
+     */
+    static final int[] RETRY_TIMES = {5000, 10000, 20000, 40000, 60000};
+
+    /**
+     * The actual request should take a little shorter to have the runnable run at the set time and
+     * have the previous request finish.
+     */
+    static final int REQUEST_TIMEOUT_DELAY = 1000;
+
+    static final int MAX_RETRIES = 17;
+    private static final String CUSTOMER_ID_KEY = "&customer_id=";
+    private static final String SDK_VERSION_KEY = "&nv=";
+    private static final String API_VERSION_KEY = "&v=";
+
+    @NonNull private final String mUrl;
+    @NonNull private final Handler mHandler;
+    @NonNull private final RequestQueue mRequestQueue;
+    private int mRetryCount;
+    private volatile boolean mShouldStop;
+
+    RewardedVideoCompletionRequestHandler(@NonNull final Context context,
+            @NonNull final String url, @Nullable final String customerId) {
+        this(context, url, customerId, new Handler());
+    }
+
+    RewardedVideoCompletionRequestHandler(@NonNull final Context context,
+            @NonNull final String url,
+            @Nullable final String customerId,
+            @NonNull final Handler handler) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(url);
+        mUrl = appendParameters(url, customerId);
+        mRetryCount = 0;
+        mHandler = handler;
+        mRequestQueue = Networking.getRequestQueue(context);
+    }
+
+    void makeRewardedVideoCompletionRequest() {
+        if (mShouldStop) {
+            // If we make a successful request, cancel all pending requests, and don't make more.
+            mRequestQueue.cancelAll(mUrl);
+            return;
+        }
+
+        final RewardedVideoCompletionRequest rewardedVideoCompletionRequest =
+                new RewardedVideoCompletionRequest(mUrl,
+                        new DefaultRetryPolicy(getTimeout(mRetryCount) - REQUEST_TIMEOUT_DELAY,
+                                0, 0f), this);
+        rewardedVideoCompletionRequest.setTag(mUrl);
+        mRequestQueue.add(rewardedVideoCompletionRequest);
+
+        if (mRetryCount >= MAX_RETRIES) {
+            MoPubLog.d("Exceeded number of retries for rewarded video completion request.");
+            return;
+        }
+
+        mHandler.postDelayed(new Runnable() {
+            @Override
+            public void run() {
+                makeRewardedVideoCompletionRequest();
+            }
+        }, getTimeout(mRetryCount));
+        mRetryCount++;
+    }
+
+    @Override
+    public void onResponse(final Integer response) {
+        // Only consider it a failure if we get a 5xx status code.
+        if (response != null && !(response >= 500 && response < 600)) {
+            mShouldStop = true;
+        }
+    }
+
+    @Override
+    public void onErrorResponse(final VolleyError volleyError) {
+        if (volleyError != null && volleyError.networkResponse != null &&
+                !(volleyError.networkResponse.statusCode >= 500
+                        && volleyError.networkResponse.statusCode < 600)) {
+            mShouldStop = true;
+        }
+    }
+
+    public static void makeRewardedVideoCompletionRequest(@Nullable final Context context,
+            @Nullable final String url,
+            @Nullable final String customerId) {
+        if (TextUtils.isEmpty(url) || context == null) {
+            return;
+        }
+
+        new RewardedVideoCompletionRequestHandler(context,
+                url, customerId).makeRewardedVideoCompletionRequest();
+    }
+
+    static int getTimeout(int retryCount) {
+        if (retryCount >= 0 && retryCount < RETRY_TIMES.length) {
+            return RETRY_TIMES[retryCount];
+        } else {
+            return RETRY_TIMES[RETRY_TIMES.length - 1];
+        }
+    }
+
+    private static String appendParameters(@NonNull final String url,
+            @Nullable final String customerId) {
+        Preconditions.checkNotNull(url);
+
+        return url +
+                CUSTOMER_ID_KEY + (customerId == null ? "" : Uri.encode(customerId)) +
+                SDK_VERSION_KEY + Uri.encode(MoPub.SDK_VERSION) +
+                API_VERSION_KEY + MoPubRewardedVideoManager.API_VERSION;
+    }
+
+    @VisibleForTesting
+    @Deprecated
+    boolean getShouldStop() {
+        return mShouldStop;
+    }
+
+    @VisibleForTesting
+    @Deprecated
+    int getRetryCount() {
+        return mRetryCount;
+    }
+
+    @VisibleForTesting
+    @Deprecated
+    void setRetryCount(int retryCount) {
+        mRetryCount = retryCount;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoData.java b/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoData.java
index c3d45cec..64c5473a 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoData.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoData.java
@@ -2,8 +2,12 @@
 
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.text.TextUtils;
 import android.util.Pair;
 
+import com.mopub.common.MoPubReward;
+import com.mopub.common.Preconditions;
+
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -19,12 +23,26 @@
     @NonNull
     private final Map<String, CustomEventRewardedVideo> mAdUnitToCustomEventMap;
     @NonNull
+    private final Map<String, MoPubReward> mAdUnitToRewardMap;
+    @NonNull
+    private final Map<String, String> mAdUnitToServerCompletionUrlMap;
+    @NonNull
+    private final Map<Class<? extends CustomEventRewardedVideo>, MoPubReward> mCustomEventToRewardMap;
+    @NonNull
     private final Map<TwoPartKey, Set<String>> mCustomEventToMoPubIdMap;
     @NonNull
     private final Set<CustomEventRewardedVideo.CustomEventRewardedVideoListener> mAdNetworkListeners;
+    @Nullable
+    private String mCurrentAdUnitId;
+    @Nullable
+    private String mCustomerId;
+
 
     RewardedVideoData() {
         mAdUnitToCustomEventMap = new TreeMap<String, CustomEventRewardedVideo>();
+        mAdUnitToRewardMap = new TreeMap<String, MoPubReward>();
+        mAdUnitToServerCompletionUrlMap = new TreeMap<String, String>();
+        mCustomEventToRewardMap = new HashMap<Class<? extends CustomEventRewardedVideo>, MoPubReward>();
         mCustomEventToMoPubIdMap = new HashMap<TwoPartKey, Set<String>>();
         mAdNetworkListeners = new HashSet<CustomEventRewardedVideo.CustomEventRewardedVideoListener>();
     }
@@ -34,6 +52,24 @@ CustomEventRewardedVideo getCustomEvent(@NonNull String moPubId) {
         return mAdUnitToCustomEventMap.get(moPubId);
     }
 
+    @Nullable
+    MoPubReward getMoPubReward(@Nullable String moPubId) {
+        return mAdUnitToRewardMap.get(moPubId);
+    }
+
+    @Nullable
+    String getServerCompletionUrl(@Nullable final String moPubId) {
+        if (TextUtils.isEmpty(moPubId)) {
+            return null;
+        }
+        return mAdUnitToServerCompletionUrlMap.get(moPubId);
+    }
+
+    @Nullable
+    MoPubReward getLastShownMoPubReward(@NonNull Class<? extends CustomEventRewardedVideo> customEventClass) {
+        return mCustomEventToRewardMap.get(customEventClass);
+    }
+
     @NonNull
     Set<String> getMoPubIdsForAdNetwork(
             @NonNull Class<? extends CustomEventRewardedVideo> customEventClass,
@@ -65,6 +101,53 @@ void updateAdUnitCustomEventMapping(
         associateCustomEventWithMoPubId(customEvent.getClass(), adNetworkId, moPubId);
     }
 
+    void updateAdUnitRewardMapping(
+            @NonNull String moPubId,
+            @Nullable String currencyName,
+            @Nullable String currencyAmount) {
+        Preconditions.checkNotNull(moPubId);
+        if (currencyName == null || currencyAmount == null) {
+            // If we get here it means that the reward was not set on the frontend ad unit
+            mAdUnitToRewardMap.remove(moPubId);
+            return;
+        }
+
+        int intCurrencyAmount;
+        try {
+            intCurrencyAmount = Integer.parseInt(currencyAmount);
+        } catch(NumberFormatException e) {
+            return;
+        }
+
+        if (intCurrencyAmount < 0) {
+            return;
+        }
+
+        mAdUnitToRewardMap.put(moPubId, MoPubReward.success(currencyName, intCurrencyAmount));
+    }
+
+    void updateAdUnitToServerCompletionUrlMapping(@NonNull final String moPubId,
+            @Nullable final String serverCompletionUrl) {
+        Preconditions.checkNotNull(moPubId);
+        mAdUnitToServerCompletionUrlMap.put(moPubId, serverCompletionUrl);
+    }
+
+    /**
+     * This method should be called right before the rewarded video is shown in order to store the
+     * reward associated with the custom event class. If called earlier in the rewarded lifecycle,
+     * it's possible that this mapping will be overridden by another reward value before the video
+     * is shown.
+     *
+     * @param customEventClass the rewarded video custom event class
+     * @param moPubReward the reward from teh MoPub ad server returned in HTTP headers
+     */
+    void updateCustomEventLastShownRewardMapping(
+            @NonNull final Class<? extends CustomEventRewardedVideo> customEventClass,
+            @Nullable final MoPubReward moPubReward) {
+        Preconditions.checkNotNull(customEventClass);
+        mCustomEventToRewardMap.put(customEventClass, moPubReward);
+    }
+
     void associateCustomEventWithMoPubId(
             @NonNull Class<? extends CustomEventRewardedVideo> customEventClass,
             @NonNull String adNetworkId,
@@ -100,6 +183,24 @@ void associateCustomEventWithMoPubId(
         moPubIds.add(moPubId);
     }
 
+    void setCurrentAdUnitId(@Nullable final String currentAdUnitId) {
+        mCurrentAdUnitId = currentAdUnitId;
+    }
+
+    @Nullable
+    String getCurrentAdUnitId() {
+        return mCurrentAdUnitId;
+    }
+
+    void setCustomerId(@Nullable final String customerId) {
+        mCustomerId = customerId;
+    }
+
+    @Nullable
+    String getCustomerId() {
+        return mCustomerId;
+    }
+
     private static class TwoPartKey extends Pair<Class<? extends CustomEventRewardedVideo>, String> {
         @NonNull
         final Class<? extends CustomEventRewardedVideo> customEventClass;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManager.java
index f1998357..b2016d12 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManager.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManager.java
@@ -1,6 +1,7 @@
 package com.mopub.mobileads;
 
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
 import com.mopub.common.Preconditions;
@@ -21,6 +22,7 @@
     private static final String CREATIVE = "Creative";
     private static final String COMPANION_ADS = "CompanionAds";
     private static final String ERROR = "Error";
+    private static final String EXTENSIONS = "Extensions";
 
     @NonNull protected final Node mNode;
 
@@ -140,4 +142,20 @@
 
         return companionAdXmlManagers;
     }
+
+    /**
+     * If there is an Extensions section with at least one Extension, return its XML manager.
+     *
+     * @return The {@link VastExtensionParentXmlManager} or null if there are no Extensions or
+     * Extension child nodes.
+     */
+    @Nullable
+    VastExtensionParentXmlManager getVastExtensionParentXmlManager() {
+        Node vastExtensionsNode = XmlUtils.getFirstMatchingChildNode(mNode, EXTENSIONS);
+        if (vastExtensionsNode == null) {
+            return null;
+        }
+
+        return new VastExtensionParentXmlManager(vastExtensionsNode);
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastCompanionAdConfig.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastCompanionAdConfig.java
index 6bf820ae..6d269f82 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastCompanionAdConfig.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastCompanionAdConfig.java
@@ -129,7 +129,7 @@ void handleImpression(@NonNull Context context, int contentPlayHead) {
      *                               HTML, or an IFrame.
      */
     void handleClick(@NonNull final Context context, final int requestCode,
-            @Nullable final String webViewClickThroughUrl) {
+            @Nullable final String webViewClickThroughUrl, @Nullable final String dspCreativeId) {
         Preconditions.checkNotNull(context);
         Preconditions.checkArgument(context instanceof Activity, "context must be an activity");
 
@@ -157,6 +157,9 @@ public void urlHandlingSucceeded(@NonNull String url,
                             Bundle bundle = new Bundle();
                             bundle.putString(MoPubBrowser.DESTINATION_URL_KEY,
                                     url);
+                            if (!TextUtils.isEmpty(dspCreativeId)) {
+                                bundle.putString(MoPubBrowser.DSP_CREATIVE_ID, dspCreativeId);
+                            }
 
                             final Class clazz = MoPubBrowser.class;
                             final Intent intent = Intents.getStartActivityIntent(
@@ -175,6 +178,7 @@ public void urlHandlingFailed(@NonNull String url,
                             @NonNull UrlAction lastFailedUrlAction) {
                     }
                 })
+                .withDspCreativeId(dspCreativeId)
                 .withoutMoPubBrowser()
                 .build().handleUrl(context, correctClickThroughUrl);
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastCompanionAdXmlManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastCompanionAdXmlManager.java
index abacc76c..1d977fb1 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastCompanionAdXmlManager.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastCompanionAdXmlManager.java
@@ -28,6 +28,7 @@
     private static final String EVENT = "event";
     private static final String WIDTH = "width";
     private static final String HEIGHT = "height";
+    private static final String AD_SLOT_ID = "adSlotID";
 
     // Attribute values
     private static final String CREATIVE_VIEW = "creativeView";
@@ -63,6 +64,16 @@ Integer getHeight() {
         return XmlUtils.getAttributeValueAsInt(mCompanionNode, HEIGHT);
     }
 
+    /**
+     * Gets the adSlotID attribute from the companion ad or {@code null} if not present.
+     *
+     * @return String adSlotId attribute or {@code null}.
+     */
+    @Nullable
+    String getAdSlotId() {
+        return XmlUtils.getAttributeValue(mCompanionNode, AD_SLOT_ID);
+    }
+
     @NonNull
     VastResourceXmlManager getResourceXmlManager() {
         return mResourceXmlManager;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastErrorCode.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastErrorCode.java
index f216a958..532050bf 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastErrorCode.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastErrorCode.java
@@ -6,7 +6,7 @@
 
 /**
  * The various possible error codes for VAST that MoPub supports. See
- * http://www.iab.net/media/file/VASTv3.0.pdf for more information about the error codes.
+ * https://www.iab.net/media/file/VASTv3.0.pdf for more information about the error codes.
  */
 public enum VastErrorCode {
     /**
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastExtensionParentXmlManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastExtensionParentXmlManager.java
new file mode 100644
index 00000000..c4145a13
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastExtensionParentXmlManager.java
@@ -0,0 +1,51 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+
+import com.mopub.common.Preconditions;
+import com.mopub.mobileads.util.XmlUtils;
+
+import org.w3c.dom.Node;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * This XML manager handles Extensions nodes, which may in turn contain Extension nodes.
+ */
+public class VastExtensionParentXmlManager {
+
+    private static final String EXTENSION = "Extension";
+    @NonNull private final Node mVastExtensionParentNode;
+
+    VastExtensionParentXmlManager(@NonNull Node vastExtensionParentNode) {
+        Preconditions.checkNotNull(vastExtensionParentNode);
+
+        mVastExtensionParentNode = vastExtensionParentNode;
+    }
+
+    /**
+     * If there are Extension sections, return their XML managers.
+     *
+     * @return The {@link VastExtensionXmlManager}s or an empty list if there are no Extension
+     * nodes.
+     */
+    @NonNull
+    List<VastExtensionXmlManager> getVastExtensionXmlManagers() {
+        final List<VastExtensionXmlManager> vastExtensionXmlManagers = new
+                ArrayList<VastExtensionXmlManager>();
+
+        final List<Node> vastExtensionNodes =
+                XmlUtils.getMatchingChildNodes(mVastExtensionParentNode, EXTENSION);
+        if (vastExtensionNodes == null) {
+            return vastExtensionXmlManagers;
+        }
+
+        for (Node vastExtensionNode : vastExtensionNodes) {
+            vastExtensionXmlManagers.add(new VastExtensionXmlManager(vastExtensionNode));
+        }
+
+        return vastExtensionXmlManagers;
+    }
+
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastExtensionXmlManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastExtensionXmlManager.java
new file mode 100644
index 00000000..0e0a1c8a
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastExtensionXmlManager.java
@@ -0,0 +1,69 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.mopub.common.Preconditions;
+import com.mopub.mobileads.util.XmlUtils;
+
+import org.w3c.dom.Node;
+
+/**
+ * This XML manager handles Extension nodes.
+ */
+public class VastExtensionXmlManager {
+    // Elements
+    public static final String VIDEO_VIEWABILITY_TRACKER = "MoPubViewabilityTracker";
+
+    // Attributes
+    public static final String TYPE = "type";
+
+    private final Node mExtensionNode;
+
+    public VastExtensionXmlManager(@NonNull Node extensionNode) {
+        Preconditions.checkNotNull(extensionNode);
+
+        this.mExtensionNode = extensionNode;
+    }
+
+    /**
+     * If there is an Extension node with a MoPubViewabilityTracker element, return its data object.
+     *
+     * @return The {@link VideoViewabilityTracker} parsed from the given node or null if missing or
+     * invalid.
+     */
+    @Nullable
+    VideoViewabilityTracker getVideoViewabilityTracker() {
+        Node videoViewabilityTrackerNode =
+                XmlUtils.getFirstMatchingChildNode(mExtensionNode, VIDEO_VIEWABILITY_TRACKER);
+        if (videoViewabilityTrackerNode == null) {
+            return null;
+        }
+
+        VideoViewabilityTrackerXmlManager videoViewabilityTrackerXmlManager =
+                new VideoViewabilityTrackerXmlManager(videoViewabilityTrackerNode);
+        Integer viewablePlaytime = videoViewabilityTrackerXmlManager.getViewablePlaytimeMS();
+        Integer percentViewable = videoViewabilityTrackerXmlManager.getPercentViewable();
+        String videoViewabilityTrackerUrl =
+                videoViewabilityTrackerXmlManager.getVideoViewabilityTrackerUrl();
+
+        if (viewablePlaytime == null || percentViewable == null
+                || TextUtils.isEmpty(videoViewabilityTrackerUrl)) {
+            return null;
+        }
+
+        return new VideoViewabilityTracker(viewablePlaytime, percentViewable,
+                videoViewabilityTrackerUrl);
+    }
+
+    /**
+     * If the node has a "type" attribute, return its value.
+     *
+     * @return A String with the value of the "type" attribute or null if missing.
+     */
+    @Nullable
+    String getType() {
+        return XmlUtils.getAttributeValue(mExtensionNode, TYPE);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastIconConfig.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastIconConfig.java
index 73648a27..ebf2cbee 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastIconConfig.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastIconConfig.java
@@ -136,7 +136,8 @@ void handleImpression(@NonNull Context context, int contentPlayHead, @NonNull St
      * @param webViewClickThroughUri The click through uri for Javascript, HTML and IFrame resources
      *                               from the WebView
      */
-    void handleClick(@NonNull final Context context, @Nullable String webViewClickThroughUri) {
+    void handleClick(@NonNull final Context context, @Nullable String webViewClickThroughUri,
+            @Nullable final String dspCreativeId) {
         Preconditions.checkNotNull(context);
 
 
@@ -159,7 +160,9 @@ public void urlHandlingSucceeded(@NonNull String url,
                         if (urlAction == UrlAction.OPEN_IN_APP_BROWSER) {
                             Bundle bundle = new Bundle();
                             bundle.putString(MoPubBrowser.DESTINATION_URL_KEY, url);
-
+                            if (!TextUtils.isEmpty(dspCreativeId)) {
+                                bundle.putString(MoPubBrowser.DSP_CREATIVE_ID, dspCreativeId);
+                            }
                             Intent intent = Intents.getStartActivityIntent(
                                     context, MoPubBrowser.class, bundle);
                             try {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastMacro.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastMacro.java
index dd5cf87b..73881485 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastMacro.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastMacro.java
@@ -2,7 +2,7 @@
 
 /**
  * Macros that MoPub supports. This is in the format of [name]. For example, an errorcode macro
- * would show up as "http://www.somesite.com/somemethod?error=[ERRORCODE]"
+ * would show up as "https://www.somesite.com/somemethod?error=[ERRORCODE]"
  */
 enum VastMacro {
     /**
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastManager.java
index d2e16bc7..2e1e5fcb 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastManager.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastManager.java
@@ -3,6 +3,7 @@
 import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.text.TextUtils;
 import android.view.Display;
 import android.view.WindowManager;
 
@@ -11,8 +12,7 @@
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.AsyncTasks;
-
-import static com.mopub.mobileads.VastVideoDownloadTask.VastVideoDownloadTaskListener;
+import com.mopub.mobileads.VideoDownloader.VideoDownloaderListener;
 
 /**
  * Given a VAST xml document, this class manages the lifecycle of parsing and finding a video and
@@ -20,6 +20,8 @@
  * {@link VastVideoConfig}.
  */
 public class VastManager implements VastXmlManagerAggregator.VastXmlManagerAggregatorListener {
+
+
     /**
      * Users of this class should subscribe to this listener to get updates
      * when a video is found or when no video is available.
@@ -32,17 +34,20 @@
          * @param vastVideoConfig A configuration that can be used for displaying a VAST
          *                               video or {@code null} if the VAST document is invalid.
          */
-        void onVastVideoConfigurationPrepared(
-                @Nullable final VastVideoConfig vastVideoConfig);
+        void onVastVideoConfigurationPrepared(@Nullable final VastVideoConfig vastVideoConfig);
     }
 
     @Nullable private VastManagerListener mVastManagerListener;
     @Nullable private VastXmlManagerAggregator mVastXmlManagerAggregator;
+    @Nullable private String mDspCreativeId;
     private double mScreenAspectRatio;
     private int mScreenAreaDp;
 
-    public VastManager(@NonNull final Context context) {
+    private final boolean mShouldPreCacheVideo;
+
+    public VastManager(@NonNull final Context context, boolean shouldPreCacheVideo) {
         initializeScreenDimensions(context);
+        mShouldPreCacheVideo = shouldPreCacheVideo;
     }
 
     /**
@@ -54,13 +59,16 @@ public VastManager(@NonNull final Context context) {
      */
     public void prepareVastVideoConfiguration(@Nullable final String vastXml,
             @NonNull final VastManagerListener vastManagerListener,
+            @Nullable String dspCreativeId,
             @NonNull final Context context) {
         Preconditions.checkNotNull(vastManagerListener, "vastManagerListener cannot be null");
         Preconditions.checkNotNull(context, "context cannot be null");
+
         if (mVastXmlManagerAggregator == null) {
             mVastManagerListener = vastManagerListener;
             mVastXmlManagerAggregator = new VastXmlManagerAggregator(this, mScreenAspectRatio,
                     mScreenAreaDp, context.getApplicationContext());
+            mDspCreativeId = dspCreativeId;
 
             try {
                 AsyncTasks.safeExecuteOnExecutor(mVastXmlManagerAggregator, vastXml);
@@ -88,38 +96,35 @@ public void onAggregationComplete(@Nullable final VastVideoConfig vastVideoConfi
                     "mVastManagerListener cannot be null here. Did you call " +
                             "prepareVastVideoConfiguration()?");
         }
+
         if (vastVideoConfig == null) {
             mVastManagerListener.onVastVideoConfigurationPrepared(null);
             return;
         }
 
-        if (updateDiskMediaFileUrl(vastVideoConfig)) {
+        if (!TextUtils.isEmpty(mDspCreativeId)) {
+            vastVideoConfig.setDspCreativeId(mDspCreativeId);
+        }
+
+        // Return immediately if we already have a cached video or if video precache is not required.
+        if (!mShouldPreCacheVideo || updateDiskMediaFileUrl(vastVideoConfig)) {
             mVastManagerListener.onVastVideoConfigurationPrepared(vastVideoConfig);
             return;
         }
 
-        final VastVideoDownloadTask vastVideoDownloadTask = new VastVideoDownloadTask(
-                new VastVideoDownloadTaskListener() {
-                    @Override
-                    public void onComplete(boolean success) {
-                        if (success && updateDiskMediaFileUrl(vastVideoConfig)) {
-                            mVastManagerListener.onVastVideoConfigurationPrepared(vastVideoConfig);
-                        } else {
-                            mVastManagerListener.onVastVideoConfigurationPrepared(null);
-                        }
-                    }
+        final VideoDownloaderListener videoDownloaderListener = new VideoDownloaderListener() {
+            @Override
+            public void onComplete(boolean success) {
+                if (success && updateDiskMediaFileUrl(vastVideoConfig)) {
+                    mVastManagerListener.onVastVideoConfigurationPrepared(vastVideoConfig);
+                } else {
+                    MoPubLog.d("Failed to download VAST video.");
+                    mVastManagerListener.onVastVideoConfigurationPrepared(null);
                 }
-        );
-
-        try {
-            AsyncTasks.safeExecuteOnExecutor(
-                    vastVideoDownloadTask,
-                    vastVideoConfig.getNetworkMediaFileUrl()
-            );
-        } catch (Exception e) {
-            MoPubLog.d("Failed to download vast video", e);
-            mVastManagerListener.onVastVideoConfigurationPrepared(null);
-        }
+            }
+        };
+
+        VideoDownloader.cache(vastVideoConfig.getNetworkMediaFileUrl(), videoDownloaderListener);
     }
 
     /**
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java
index 53e9c9ce..d1075d47 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java
@@ -14,6 +14,14 @@
 import com.mopub.mobileads.resource.DrawableConstants;
 
 public class VastVideoBlurLastVideoFrameTask extends AsyncTask<String, Void, Boolean> {
+
+    private static final int MICROSECONDS_PER_MILLISECOND = 1000;
+
+    /**
+     * Gets a frame this many microseconds from the end of the video.
+     */
+    private static final int OFFSET_IN_MICROSECONDS = 200000;
+
     @NonNull private final MediaMetadataRetriever mMediaMetadataRetriever;
     @NonNull private final ImageView mBlurredLastVideoFrameImageView;
     private int mVideoDuration;
@@ -40,8 +48,12 @@ protected Boolean doInBackground(String... videoPaths) {
 
                 mMediaMetadataRetriever.setDataSource(videoPath);
 
+                // This actually gets a frame just before the video ends. If we try to get a frame
+                // that's actually past the end of the video or before 0, this will pick some
+                // arbitrary frame.
                 mLastVideoFrame = mMediaMetadataRetriever.getFrameAtTime(
-                        mVideoDuration * 1000, MediaMetadataRetriever.OPTION_CLOSEST);
+                        mVideoDuration * MICROSECONDS_PER_MILLISECOND - OFFSET_IN_MICROSECONDS,
+                        MediaMetadataRetriever.OPTION_CLOSEST);
 
                 if (mLastVideoFrame == null) {
                     return false;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoConfig.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoConfig.java
index 913f4bf3..9f53d535 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoConfig.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoConfig.java
@@ -18,11 +18,14 @@
 import com.mopub.common.util.DeviceUtils;
 import com.mopub.common.util.Intents;
 import com.mopub.common.util.Strings;
+import com.mopub.exceptions.IntentNotResolvableException;
 
 import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 
 import static com.mopub.network.TrackingRequest.makeVastTrackingHttpRequest;
 
@@ -45,13 +48,19 @@
     @Nullable private String mSkipOffset;
     @Nullable private VastCompanionAdConfig mLandscapeVastCompanionAdConfig;
     @Nullable private VastCompanionAdConfig mPortraitVastCompanionAdConfig;
+    @NonNull private Map<String, VastCompanionAdConfig> mSocialActionsCompanionAds;
     @Nullable private VastIconConfig mVastIconConfig;
+    private boolean mIsRewardedVideo;
 
     // Custom extensions
     @Nullable private String mCustomCtaText;
     @Nullable private String mCustomSkipText;
     @Nullable private String mCustomCloseIconUrl;
     @NonNull private DeviceUtils.ForceOrientation mCustomForceOrientation = DeviceUtils.ForceOrientation.FORCE_LANDSCAPE; // Default is forcing landscape
+    @Nullable private VideoViewabilityTracker mVideoViewabilityTracker;
+
+    // MoPub-specific metadata
+    private String mDspCreativeId;
 
     /**
      * Flag to indicate if the VAST xml document has explicitly set the orientation as opposed to
@@ -59,6 +68,7 @@
      */
     private boolean mIsForceOrientationSet;
 
+
     public VastVideoConfig() {
         mImpressionTrackers = new ArrayList<VastTracker>();
         mFractionalTrackers = new ArrayList<VastFractionalProgressTracker>();
@@ -70,12 +80,22 @@ public VastVideoConfig() {
         mSkipTrackers = new ArrayList<VastTracker>();
         mClickTrackers = new ArrayList<VastTracker>();
         mErrorTrackers = new ArrayList<VastTracker>();
+        mSocialActionsCompanionAds = new HashMap<String, VastCompanionAdConfig>();
+        mIsRewardedVideo = false;
     }
 
     /**
      * Setters
      */
 
+    public void setDspCreativeId(@NonNull final String dspCreativeId) {
+        mDspCreativeId = dspCreativeId;
+    }
+
+    public String getDspCreativeId() {
+        return mDspCreativeId;
+    }
+
     public void addImpressionTrackers(@NonNull final List<VastTracker> impressionTrackers) {
         Preconditions.checkNotNull(impressionTrackers, "impressionTrackers cannot be null");
         mImpressionTrackers.addAll(impressionTrackers);
@@ -168,6 +188,11 @@ public void setVastCompanionAd(@Nullable final VastCompanionAdConfig landscapeVa
         mPortraitVastCompanionAdConfig = portraitVastCompanionAdConfig;
     }
 
+    public void setSocialActionsCompanionAds(
+            @NonNull final Map<String, VastCompanionAdConfig> socialActionsCompanionAds) {
+        this.mSocialActionsCompanionAds = socialActionsCompanionAds;
+    }
+
     public void setVastIconConfig(@Nullable final VastIconConfig vastIconConfig) {
         mVastIconConfig = vastIconConfig;
     }
@@ -203,6 +228,16 @@ public void setSkipOffset(@Nullable final String skipOffset) {
         }
     }
 
+    public void setVideoViewabilityTracker(@Nullable final VideoViewabilityTracker videoViewabilityTracker) {
+        if (videoViewabilityTracker != null) {
+            mVideoViewabilityTracker = videoViewabilityTracker;
+        }
+    }
+
+    public void setIsRewardedVideo(final boolean isRewardedVideo) {
+        mIsRewardedVideo = isRewardedVideo;
+    }
+
     /**
      * Getters
      */
@@ -289,6 +324,11 @@ public VastCompanionAdConfig getVastCompanionAd(final int orientation) {
         }
     }
 
+    @NonNull
+    public Map<String, VastCompanionAdConfig> getSocialActionsCompanionAds() {
+        return mSocialActionsCompanionAds;
+    }
+
     @Nullable
     public VastIconConfig getVastIconConfig() {
         return mVastIconConfig;
@@ -309,6 +349,11 @@ public String getCustomCloseIconUrl() {
         return mCustomCloseIconUrl;
     }
 
+    @Nullable
+    public VideoViewabilityTracker getVideoViewabilityTracker() {
+        return mVideoViewabilityTracker;
+    }
+
     public boolean isCustomForceOrientationSet() {
         return mIsForceOrientationSet;
     }
@@ -343,6 +388,15 @@ public String getSkipOffsetString() {
         return mSkipOffset;
     }
 
+    /**
+     * Returns whether or not this is an unskippable rewarded video.
+     *
+     * @return True if this is a rewarded video, false otherwise.
+     */
+    public boolean isRewardedVideo() {
+        return mIsRewardedVideo;
+    }
+
     /**
      * Called when the video starts playing.
      *
@@ -362,23 +416,50 @@ public void handleImpression(@NonNull final Context context, int contentPlayHead
 
     /**
      * Called when the video is clicked. Handles forwarding the user to the specified click through
-     * url.
+     * url, calling {@link Activity#onActivityResult(int, int, Intent)} when done.
      *
-     * @param activity        This has to be an activity to call startActivityForResult.
+     * @param activity        Used to call startActivityForResult with provided requestCode.
      * @param contentPlayHead Current video playback time when clicked.
-     * @param requestCode     The code that identifies what kind of activity request is going to be
-     *                        made
+     * @param requestCode     Code that identifies what kind of activity request is going to be
+     *                        made.
      */
-    public void handleClick(@NonNull final Activity activity, final int contentPlayHead,
+    public void handleClickForResult(@NonNull final Activity activity, final int contentPlayHead,
             final int requestCode) {
-        Preconditions.checkNotNull(activity, "activity cannot be null");
+        handleClick(activity, contentPlayHead, requestCode);
+    }
+
+    /**
+     * Called when the video is clicked. Handles forwarding the user to the specified click through
+     * url. Does not provide any feedback when opened activity is finished.
+     *
+     * @param context         Used to call startActivity.
+     * @param contentPlayHead Current video playback time when clicked.
+     */
+    public void handleClickWithoutResult(@NonNull final Context context,
+            final int contentPlayHead) {
+        handleClick(context.getApplicationContext(), contentPlayHead, null);
+    }
+
+    /**
+     * Called when the video is clicked. Handles forwarding the user to the specified click through
+     * url.
+     *
+     * @param context         If an Activity context, used to call startActivityForResult with
+     *                        provided requestCode; otherwise, used to call startActivity.
+     * @param contentPlayHead Current video playback time when clicked.
+     * @param requestCode     Required when the context is an Activity; code that identifies what
+     *                        kind of activity request is going to be made.
+     */
+    private void handleClick(@NonNull final Context context, final int contentPlayHead,
+            @Nullable final Integer requestCode) {
+        Preconditions.checkNotNull(context, "context cannot be null");
 
         makeVastTrackingHttpRequest(
                 mClickTrackers,
                 null,
                 contentPlayHead,
                 mNetworkMediaFileUrl,
-                activity
+                context
         );
 
         if (TextUtils.isEmpty(mClickThroughUrl)) {
@@ -386,6 +467,7 @@ public void handleClick(@NonNull final Activity activity, final int contentPlayH
         }
 
         new UrlHandler.Builder()
+                .withDspCreativeId(mDspCreativeId)
                 .withSupportedUrlActions(
                         UrlAction.IGNORE_ABOUT_SCHEME,
                         UrlAction.OPEN_APP_MARKET,
@@ -401,15 +483,27 @@ public void urlHandlingSucceeded(@NonNull String url,
                         if (urlAction == UrlAction.OPEN_IN_APP_BROWSER) {
                             Bundle bundle = new Bundle();
                             bundle.putString(MoPubBrowser.DESTINATION_URL_KEY, url);
+                            bundle.putString(MoPubBrowser.DSP_CREATIVE_ID, mDspCreativeId);
 
                             final Class clazz = MoPubBrowser.class;
                             final Intent intent = Intents.getStartActivityIntent(
-                                    activity, clazz, bundle);
+                                    context, clazz, bundle);
                             try {
-                                activity.startActivityForResult(intent, requestCode);
+                                if (context instanceof Activity) {
+                                    // Activity context requires a requestCode
+                                    Preconditions.checkNotNull(requestCode);
+
+                                    ((Activity) context)
+                                            .startActivityForResult(intent, requestCode);
+                                } else {
+                                    Intents.startActivity(context, intent);
+                                }
                             } catch (ActivityNotFoundException e) {
                                 MoPubLog.d("Activity " + clazz.getName() + " not found. Did you " +
                                         "declare it in your AndroidManifest.xml?");
+                            } catch (IntentNotResolvableException e) {
+                                MoPubLog.d("Activity " + clazz.getName() + " not found. Did you " +
+                                        "declare it in your AndroidManifest.xml?");
                             }
                         }
                     }
@@ -420,7 +514,7 @@ public void urlHandlingFailed(@NonNull String url,
                     }
                 })
                 .withoutMoPubBrowser()
-                .build().handleUrl(activity, mClickThroughUrl);
+                .build().handleUrl(context, mClickThroughUrl);
     }
 
     /**
@@ -506,7 +600,7 @@ public void handleComplete(@NonNull Context context, int contentPlayHead) {
      * @param context         The context. Can be application or activity context.
      * @param contentPlayHead Current video playback time.
      */
-    public void handleError(@NonNull Context context, @NonNull VastErrorCode errorCode,
+    public void handleError(@NonNull Context context, @Nullable VastErrorCode errorCode,
             int contentPlayHead) {
         Preconditions.checkNotNull(context, "context cannot be null");
         makeVastTrackingHttpRequest(
@@ -571,7 +665,7 @@ public int getRemainingProgressTrackerCount() {
 
     /**
      * Gets the skip offset in milliseconds. If the skip offset would be past the video duration,
-     * this returns null. If an error occurs, this returns null.
+     * this returns the video duration. Returns null when the skip offset is not set or cannot be parsed.
      *
      * @param videoDuration Used to calculate percentage based offsets.
      * @return The skip offset in milliseconds. Can return null.
@@ -580,20 +674,24 @@ public int getRemainingProgressTrackerCount() {
     public Integer getSkipOffsetMillis(final int videoDuration) {
         if (mSkipOffset != null) {
             try {
+                final Integer skipOffsetMilliseconds;
                 if (Strings.isAbsoluteTracker(mSkipOffset)) {
-                    Integer skipOffsetMilliseconds = Strings.parseAbsoluteOffset(mSkipOffset);
-                    if (skipOffsetMilliseconds != null && skipOffsetMilliseconds < videoDuration) {
-                        return skipOffsetMilliseconds;
-                    }
+                    skipOffsetMilliseconds = Strings.parseAbsoluteOffset(mSkipOffset);
                 } else if (Strings.isPercentageTracker(mSkipOffset)) {
                     float percentage = Float.parseFloat(mSkipOffset.replace("%", "")) / 100f;
-                    int skipOffsetMillisecondsRounded = Math.round(videoDuration * percentage);
-                    if (skipOffsetMillisecondsRounded < videoDuration) {
-                        return skipOffsetMillisecondsRounded;
-                    }
+                    skipOffsetMilliseconds = Math.round(videoDuration * percentage);
                 } else {
                     MoPubLog.d(
                             String.format("Invalid VAST skipoffset format: %s", mSkipOffset));
+                    return null;
+                }
+
+                if (skipOffsetMilliseconds != null) {
+                    if (skipOffsetMilliseconds < videoDuration) {
+                        return skipOffsetMilliseconds;
+                    } else {
+                        return videoDuration;
+                    }
                 }
             } catch (NumberFormatException e) {
                 MoPubLog.d(String.format("Failed to parse skipoffset %s", mSkipOffset));
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoCtaButtonWidget.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoCtaButtonWidget.java
index 0ca1a1ff..7d3dc4c9 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoCtaButtonWidget.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoCtaButtonWidget.java
@@ -23,6 +23,7 @@
     private boolean mIsVideoComplete;
     private boolean mHasCompanionAd;
     private boolean mHasClickthroughUrl;
+    private boolean mHasSocialActions;
 
     public VastVideoCtaButtonWidget(@NonNull final Context context, final int videoViewId,
             final boolean hasCompanionAd, final boolean hasClickthroughUrl) {
@@ -30,6 +31,7 @@ public VastVideoCtaButtonWidget(@NonNull final Context context, final int videoV
 
         mHasCompanionAd = hasCompanionAd;
         mHasClickthroughUrl = hasClickthroughUrl;
+        mHasSocialActions = false;
 
         setId((int) Utils.generateUniqueId());
 
@@ -46,11 +48,11 @@ public VastVideoCtaButtonWidget(@NonNull final Context context, final int videoV
         mLandscapeLayoutParams.addRule(RelativeLayout.ALIGN_BOTTOM, videoViewId);
         mLandscapeLayoutParams.addRule(RelativeLayout.ALIGN_RIGHT, videoViewId);
 
-        // portrait layout: placed center below video view
+        // portrait layout: placed bottom-right corner of screen
         mPortraitLayoutParams = new RelativeLayout.LayoutParams(width, height);
         mPortraitLayoutParams.setMargins(margin, margin, margin, margin);
-        mPortraitLayoutParams.addRule(RelativeLayout.BELOW, videoViewId);
-        mPortraitLayoutParams.addRule(RelativeLayout.CENTER_HORIZONTAL);
+        mPortraitLayoutParams.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
+        mPortraitLayoutParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
 
         updateLayoutAndVisibility();
     }
@@ -66,6 +68,14 @@ void updateCtaText(@NonNull final String customCtaText) {
         mCtaButtonDrawable.setCtaText(customCtaText);
     }
 
+    void setHasSocialActions(final boolean hasSocialActions) {
+        mHasSocialActions = hasSocialActions;
+    }
+
+    boolean getHasSocialActions() {
+        return mHasSocialActions;
+    }
+
     void notifyVideoSkippable() {
         mIsVideoSkippable = true;
         updateLayoutAndVisibility();
@@ -91,7 +101,8 @@ private void updateLayoutAndVisibility() {
         }
 
         // If video has finished playing and there's a companion ad, do not show CTA button
-        if (mIsVideoComplete && mHasCompanionAd) {
+        // Unless the ad has social actions
+        if (mIsVideoComplete && mHasCompanionAd && !mHasSocialActions) {
             setVisibility(View.GONE);
             return;
         }
@@ -100,29 +111,25 @@ private void updateLayoutAndVisibility() {
 
         switch (currentOrientation) {
             case Configuration.ORIENTATION_LANDSCAPE:
-                setVisibility(View.VISIBLE);
                 setLayoutParams(mLandscapeLayoutParams);
                 break;
             case Configuration.ORIENTATION_PORTRAIT:
-                setVisibility(View.VISIBLE);
                 setLayoutParams(mPortraitLayoutParams);
                 break;
             case Configuration.ORIENTATION_UNDEFINED:
                 MoPubLog.d("Screen orientation undefined: CTA button widget defaulting to portrait layout");
-                setVisibility(View.VISIBLE);
                 setLayoutParams(mPortraitLayoutParams);
                 break;
             case Configuration.ORIENTATION_SQUARE:
                 MoPubLog.d("Screen orientation is deprecated ORIENTATION_SQUARE: CTA button widget defaulting to portrait layout");
-                setVisibility(View.VISIBLE);
                 setLayoutParams(mPortraitLayoutParams);
                 break;
             default:
                 MoPubLog.d("Unrecognized screen orientation: CTA button widget defaulting to portrait layout");
-                setVisibility(View.VISIBLE);
                 setLayoutParams(mPortraitLayoutParams);
                 break;
         }
+        setVisibility(View.VISIBLE);
     }
 
     // for testing
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoDownloadTask.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoDownloadTask.java
deleted file mode 100644
index 910b59d2..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoDownloadTask.java
+++ /dev/null
@@ -1,76 +0,0 @@
-package com.mopub.mobileads;
-
-import android.net.http.AndroidHttpClient;
-import android.os.AsyncTask;
-
-import com.mopub.common.CacheService;
-import com.mopub.common.HttpClient;
-import com.mopub.common.logging.MoPubLog;
-
-import org.apache.http.HttpResponse;
-import org.apache.http.client.methods.HttpGet;
-
-import java.io.BufferedInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-
-public class VastVideoDownloadTask extends AsyncTask<String, Void, Boolean> {
-    private static final int MAX_VIDEO_SIZE = 25 * 1024 * 1024; // 25 MiB
-
-    public interface VastVideoDownloadTaskListener {
-        public void onComplete(boolean success);
-    }
-
-    private final VastVideoDownloadTaskListener mVastVideoDownloadTaskListener;
-
-    public VastVideoDownloadTask(final VastVideoDownloadTaskListener listener) {
-        mVastVideoDownloadTaskListener = listener;
-    }
-
-    @Override
-    protected Boolean doInBackground(final String... params) {
-        if (params == null || params.length == 0 || params[0] == null) {
-            return false;
-        }
-
-        final String videoUrl = params[0];
-        AndroidHttpClient httpClient = null;
-        try {
-            httpClient = HttpClient.getHttpClient();
-            final HttpGet httpget = HttpClient.initializeHttpGet(videoUrl);
-            final HttpResponse response = httpClient.execute(httpget);
-
-            if (response == null || response.getEntity() == null) {
-                throw new IOException("Obtained null response from video url: " + videoUrl);
-            }
-
-            if (response.getEntity().getContentLength() > MAX_VIDEO_SIZE) {
-                throw new IOException("Video exceeded max download size");
-            }
-
-            final InputStream inputStream = new BufferedInputStream(response.getEntity().getContent());
-            final boolean diskPutResult = CacheService.putToDiskCache(videoUrl, inputStream);
-            inputStream.close();
-            return diskPutResult;
-        } catch (Exception e) {
-            MoPubLog.d("Failed to download video: " + e.getMessage());
-            return false;
-        } finally {
-            if (httpClient != null) {
-                httpClient.close();
-            }
-        }
-    }
-
-    @Override
-    protected void onCancelled() {
-        onPostExecute(false);
-    }
-
-    @Override
-    protected void onPostExecute(final Boolean success) {
-        if (mVastVideoDownloadTaskListener != null) {
-            mVastVideoDownloadTaskListener.onComplete(success);
-        }
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
index a3a14cd9..293336d2 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
@@ -27,7 +27,8 @@ protected void preRenderHtml(CustomEventInterstitialListener customEventIntersti
         }
 
         mVastManager = VastManagerFactory.create(mContext);
-        mVastManager.prepareVastVideoConfiguration(mVastResponse, this, mContext);
+        mVastManager.prepareVastVideoConfiguration(mVastResponse, this,
+                mAdReport.getDspCreativeId(), mContext);
     }
 
     @Override
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoProgressBarWidget.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoProgressBarWidget.java
index 7f7eb5d3..9af9ded0 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoProgressBarWidget.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoProgressBarWidget.java
@@ -14,8 +14,9 @@
 
 public class VastVideoProgressBarWidget extends ImageView {
     @NonNull private ProgressBarDrawable mProgressBarDrawable;
+    private final int mProgressBarHeight;
 
-    public VastVideoProgressBarWidget(@NonNull final Context context, final int anchorId) {
+    public VastVideoProgressBarWidget(@NonNull final Context context) {
         super(context);
 
         setId((int) Utils.generateUniqueId());
@@ -23,27 +24,33 @@ public VastVideoProgressBarWidget(@NonNull final Context context, final int anch
         mProgressBarDrawable = new ProgressBarDrawable(context);
         setImageDrawable(mProgressBarDrawable);
 
-        final int progressBarHeight
-                = Dips.dipsToIntPixels(DrawableConstants.ProgressBar.HEIGHT_DIPS, context);
+        mProgressBarHeight =
+                Dips.dipsToIntPixels(DrawableConstants.ProgressBar.HEIGHT_DIPS, context);
+    }
 
+    public void setAnchorId(final int anchorId) {
         final RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(
                 RelativeLayout.LayoutParams.MATCH_PARENT,
-                progressBarHeight);
-
+                mProgressBarHeight);
         layoutParams.addRule(RelativeLayout.ALIGN_BOTTOM, anchorId);
-
         setLayoutParams(layoutParams);
+
     }
 
-    void calibrateAndMakeVisible(final int duration, final int skipOffset) {
+    public void calibrateAndMakeVisible(final int duration, final int skipOffset) {
         mProgressBarDrawable.setDurationAndSkipOffset(duration, skipOffset);
         setVisibility(View.VISIBLE);
     }
 
-    void updateProgress(final int progress) {
+    public void updateProgress(final int progress) {
         mProgressBarDrawable.setProgress(progress);
     }
 
+    public void reset() {
+        mProgressBarDrawable.reset();
+        mProgressBarDrawable.setProgress(0);
+    }
+
     // for testing
     @Deprecated
     @VisibleForTesting
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
index 77f9cece..1efde370 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
@@ -16,6 +16,7 @@
 import android.view.Gravity;
 import android.view.MotionEvent;
 import android.view.View;
+import android.view.ViewTreeObserver;
 import android.webkit.WebView;
 import android.webkit.WebViewClient;
 import android.widget.ImageView;
@@ -26,14 +27,19 @@
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.util.Dips;
 import com.mopub.common.util.Utils;
+import com.mopub.mobileads.resource.DrawableConstants;
 
 import java.io.Serializable;
+import java.util.Map;
 
 import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
 import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
+import static com.mopub.common.MoPubBrowser.MOPUB_BROWSER_REQUEST_CODE;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.mobileads.VastXmlManagerAggregator.ADS_BY_AD_SLOT_ID;
+import static com.mopub.mobileads.VastXmlManagerAggregator.SOCIAL_ACTIONS_AD_SLOT_ID;
 import static com.mopub.network.TrackingRequest.makeVastTrackingHttpRequest;
 
 public class VastVideoViewController extends BaseVideoViewController {
@@ -43,7 +49,6 @@
 
     private static final long VIDEO_PROGRESS_TIMER_CHECKER_DELAY = 50;
     private static final long VIDEO_COUNTDOWN_UPDATE_INTERVAL = 250;
-    private static final int MOPUB_BROWSER_REQUEST_CODE = 1;
     private static final int SEEKER_POSITION_NOT_INITIALIZED = -1;
 
     /**
@@ -70,9 +75,12 @@
     @NonNull private VastVideoCloseButtonWidget mCloseButtonWidget;
 
     @Nullable private VastCompanionAdConfig mVastCompanionAdConfig;
+    @Nullable private final VastIconConfig mVastIconConfig;
     @NonNull private final View mLandscapeCompanionAdView;
     @NonNull private final View mPortraitCompanionAdView;
-    @Nullable private final VastIconConfig mVastIconConfig;
+    @NonNull private final Map<String, VastCompanionAdConfig> mSocialActionsCompanionAds;
+    @NonNull private View mAdsByView;
+    @NonNull private final View mSocialActionsView;
     @NonNull private final View mIconView;
 
     @NonNull private final VastVideoViewProgressRunnable mProgressCheckerRunnable;
@@ -86,6 +94,7 @@
     private boolean mVideoError;
     private boolean mHasSkipOffset = false;
     private boolean mIsCalibrationDone = false;
+    private boolean mHasSocialActions = false;
     private int mDuration;
 
     /**
@@ -125,6 +134,7 @@
 
         mVastCompanionAdConfig = mVastVideoConfig.getVastCompanionAd(
                 activity.getResources().getConfiguration().orientation);
+        mSocialActionsCompanionAds = mVastVideoConfig.getSocialActionsCompanionAds();
         mVastIconConfig = mVastVideoConfig.getVastIconConfig();
 
         mClickThroughListener = new View.OnTouchListener() {
@@ -133,7 +143,7 @@ public boolean onTouch(View view, MotionEvent motionEvent) {
                 if (motionEvent.getAction() == MotionEvent.ACTION_UP && shouldAllowClickThrough()) {
                     mIsClosing = true;
                     broadcastAction(ACTION_INTERSTITIAL_CLICK);
-                    mVastVideoConfig.handleClick(activity,
+                    mVastVideoConfig.handleClickForResult(activity,
                             mIsVideoFinishedPlaying ? mDuration : getCurrentPosition(),
                             MOPUB_BROWSER_REQUEST_CODE);
                 }
@@ -147,6 +157,9 @@ public boolean onTouch(View view, MotionEvent motionEvent) {
         // Solid black background
         getLayout().setBackgroundColor(Color.BLACK);
 
+        // Blurred last frame
+        addBlurredLastVideoFrameImageView(activity, View.INVISIBLE);
+
         // Video view
         mVideoView = createVideoView(activity, View.VISIBLE);
         mVideoView.requestFocus();
@@ -173,13 +186,28 @@ public boolean onTouch(View view, MotionEvent motionEvent) {
 
         // Icon view
         mIconView = createIconView(activity, mVastIconConfig, View.INVISIBLE);
-
-        // Blurred last frame
-        addBlurredLastVideoFrameImageView(activity, View.INVISIBLE);
+        mIconView.getViewTreeObserver().addOnGlobalLayoutListener(
+                new ViewTreeObserver.OnGlobalLayoutListener() {
+                    @Override
+                    public void onGlobalLayout() {
+                        // Wait until mIconView has been laid out to get accurate height
+                        mAdsByView = createAdsByView(activity);
+                        mIconView.getViewTreeObserver().removeGlobalOnLayoutListener(this);
+                    }
+                }
+        );
 
         // CTA button
         addCtaButtonWidget(activity);
 
+        // Social Actions
+        final int ctaHeight = Dips.dipsToIntPixels(DrawableConstants.CtaButton.HEIGHT_DIPS,
+                activity);
+        mSocialActionsView = createSocialActionsView(activity,
+                mSocialActionsCompanionAds.get(SOCIAL_ACTIONS_AD_SLOT_ID),
+                ctaHeight, RelativeLayout.ALIGN_TOP, mCtaButtonWidget, View.INVISIBLE,
+                DrawableConstants.SocialActions.SOCIAL_ACTIONS_LEFT_MARGIN_DIPS);
+
         // Close button snapped to top-right corner of screen
         // Always add last to layout since it must be visible above all other views
         addCloseButtonWidget(activity, View.GONE);
@@ -190,6 +218,28 @@ public boolean onTouch(View view, MotionEvent motionEvent) {
         mCountdownRunnable = new VastVideoViewCountdownRunnable(this, mainHandler);
     }
 
+    @VisibleForTesting
+    View createAdsByView(Activity activity) {
+        return createSocialActionsView(activity,
+                mSocialActionsCompanionAds.get(ADS_BY_AD_SLOT_ID),
+                mIconView.getHeight(),
+                RelativeLayout.RIGHT_OF, mIconView, View.VISIBLE,
+                DrawableConstants.SocialActions.ADS_BY_LEFT_MARGIN_DIPS
+        );
+    }
+
+    @Deprecated // Just use for testing
+    @VisibleForTesting
+    boolean getHasSocialActions() {
+        return mHasSocialActions;
+    }
+
+    @Deprecated // Just use for testing
+    @VisibleForTesting
+    View getSocialActionsView() {
+        return mSocialActionsView;
+    }
+
     @Override
     protected VideoView getVideoView() {
         return mVideoView;
@@ -258,7 +308,7 @@ protected void onSaveInstanceState(@NonNull Bundle outState) {
     }
 
     @Override
-    protected void onConfigurationChanged(@Nullable final Configuration newConfig) {
+    protected void onConfigurationChanged(final Configuration newConfig) {
         final int orientation = getContext().getResources().getConfiguration().orientation;
         mVastCompanionAdConfig = mVastVideoConfig.getVastCompanionAd(orientation);
         if (mLandscapeCompanionAdView.getVisibility() == View.VISIBLE ||
@@ -276,6 +326,9 @@ protected void onConfigurationChanged(@Nullable final Configuration newConfig) {
         }
     }
 
+    @Override
+    protected void onBackPressed() { }
+
     // Enable the device's back button when the video close button has been displayed
     @Override
     public boolean backButtonEnabled() {
@@ -292,6 +345,12 @@ void onActivityResult(final int requestCode, final int resultCode, final Intent
     private void adjustSkipOffset() {
         int videoDuration = getDuration();
 
+        // If this is a rewarded video, never allow it to be skippable.
+        if (mVastVideoConfig.isRewardedVideo()) {
+            mShowCloseButtonDelay = videoDuration;
+            return;
+        }
+
         // Default behavior: video is non-skippable if duration < 16 seconds
         if (videoDuration < MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON) {
             mShowCloseButtonDelay = videoDuration;
@@ -321,7 +380,7 @@ public void onPrepared(MediaPlayer mp) {
                 // Therefore set it here so that we have access to it at all times
                 mDuration = mVideoView.getDuration();
                 adjustSkipOffset();
-                if (mVastCompanionAdConfig == null) {
+                if (mVastCompanionAdConfig == null || mHasSocialActions) {
                     videoView.prepareBlurredLastVideoFrame(mBlurredLastVideoFrameImageView,
                             mVastVideoConfig.getDiskMediaFileUrl());
                 }
@@ -340,6 +399,9 @@ public void onCompletion(MediaPlayer mp) {
 
                 videoCompleted(false);
                 mIsVideoFinishedPlaying = true;
+                if (mVastVideoConfig.isRewardedVideo()) {
+                    broadcastAction(RewardedVideoBroadcastReceiver.ACTION_REWARDED_VIDEO_COMPLETE);
+                }
 
                 // Only fire the completion tracker if we hit all the progress marks. Some Android implementations
                 // fire the completion event even if the whole video isn't watched.
@@ -350,7 +412,18 @@ public void onCompletion(MediaPlayer mp) {
                 videoView.setVisibility(View.INVISIBLE);
 
                 mProgressBarWidget.setVisibility(View.GONE);
-                mIconView.setVisibility(View.GONE);
+
+                if (mHasSocialActions) {
+                    // Social Actions need the blurred last frame to fill the screen regardless
+                    // of the companion ad.
+                    if (mBlurredLastVideoFrameImageView.getDrawable() != null) {
+                        mBlurredLastVideoFrameImageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
+                        mBlurredLastVideoFrameImageView.setVisibility(View.VISIBLE);
+                    }
+                    // Also, avoid removing DAA icon for social actions
+                } else {
+                    mIconView.setVisibility(View.GONE);
+                }
 
                 mTopGradientStripWidget.notifyVideoComplete();
                 mBottomGradientStripWidget.notifyVideoComplete();
@@ -425,7 +498,8 @@ private void addBottomGradientStripWidget(@NonNull final Context context) {
     }
 
     private void addProgressBarWidget(@NonNull final Context context, int initialVisibility) {
-        mProgressBarWidget = new VastVideoProgressBarWidget(context, mVideoView.getId());
+        mProgressBarWidget = new VastVideoProgressBarWidget(context);
+        mProgressBarWidget.setAnchorId(mVideoView.getId());
         mProgressBarWidget.setVisibility(initialVisibility);
         getLayout().addView(mProgressBarWidget);
     }
@@ -534,35 +608,7 @@ View createCompanionAdView(@NonNull final Context context,
                         RelativeLayout.LayoutParams.MATCH_PARENT);
         getLayout().addView(relativeLayout, layoutParams);
 
-        VastWebView companionView = VastWebView.createView(context,
-                vastCompanionAdConfig.getVastResource());
-
-        // For javascript, HTML, and IFrames, ignore the traditional clickthrough url and open all
-        // new urls in the MoPub Browser. For static images, use the clickthrough url specified in
-        // the VAST document. These two handleClicks make it so that the correct behavior happens
-        // in these special cases. onVastWebViewClick is called in both circumstances to fire the
-        // click trackers.
-        companionView.setVastWebViewClickListener(new VastWebView.VastWebViewClickListener() {
-            @Override
-            public void onVastWebViewClick() {
-                broadcastAction(ACTION_INTERSTITIAL_CLICK);
-                makeVastTrackingHttpRequest(
-                        vastCompanionAdConfig.getClickTrackers(),
-                        null,
-                        mDuration,
-                        null,
-                        context
-                );
-                vastCompanionAdConfig.handleClick(context, MOPUB_BROWSER_REQUEST_CODE, null);
-            }
-        });
-        companionView.setWebViewClient(new WebViewClient() {
-            @Override
-            public boolean shouldOverrideUrlLoading(WebView view, String url) {
-                vastCompanionAdConfig.handleClick(context, MOPUB_BROWSER_REQUEST_CODE, url);
-                return true;
-            }
-        });
+        VastWebView companionView = createCompanionVastWebView(context, vastCompanionAdConfig);
 
         companionView.setVisibility(initialVisibility);
 
@@ -576,6 +622,62 @@ public boolean shouldOverrideUrlLoading(WebView view, String url) {
         return companionView;
     }
 
+    /**
+     * Creates and lays out the webviews used to display the social actions.
+     *
+     * @param context The context.
+     * @param vastCompanionAdConfig The data used to populate the view.
+     * @param anchorHeight The height in pixels of the view to use as anchor for the view.
+     * @param layoutVerb The way to layout the view relative to the anchorView.
+     * @param anchorView The view to use as anchor when laying out the view.
+     * @param initialVisibility The visibility the view should have.
+     * @return the populated webview
+     */
+    @NonNull
+    @VisibleForTesting
+    View createSocialActionsView(@NonNull final Context context,
+            @Nullable final VastCompanionAdConfig vastCompanionAdConfig, final int anchorHeight,
+            final int layoutVerb, @NonNull final View anchorView, final int initialVisibility,
+            final int leftMarginDips) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(anchorView);
+
+        if (vastCompanionAdConfig == null) {
+            final View emptyView = new View(context);
+            emptyView.setVisibility(View.INVISIBLE);
+            return emptyView;
+        }
+
+        mHasSocialActions = true;
+        mCtaButtonWidget.setHasSocialActions(mHasSocialActions);
+
+        VastWebView companionView = createCompanionVastWebView(context, vastCompanionAdConfig);
+
+        final int width = Dips.dipsToIntPixels(vastCompanionAdConfig.getWidth(), context);
+        final int height = Dips.dipsToIntPixels(vastCompanionAdConfig.getHeight(), context);
+        final int offset = (anchorHeight - height) / 2;
+        final int leftMargin = Dips.dipsToIntPixels(leftMarginDips, context);
+
+        final RelativeLayout.LayoutParams companionAdLayout =
+                new RelativeLayout.LayoutParams(width, height);
+        companionAdLayout.addRule(layoutVerb, anchorView.getId());
+        companionAdLayout.addRule(RelativeLayout.ALIGN_TOP, anchorView.getId());
+        companionAdLayout.setMargins(leftMargin, offset, 0, 0);
+
+        RelativeLayout relativeLayout = new RelativeLayout(context);
+        relativeLayout.setGravity(Gravity.CENTER_VERTICAL);
+        RelativeLayout.LayoutParams layoutParams =
+                new RelativeLayout.LayoutParams(
+                        RelativeLayout.LayoutParams.WRAP_CONTENT,
+                        RelativeLayout.LayoutParams.WRAP_CONTENT);
+        relativeLayout.addView(companionView, layoutParams);
+
+        getLayout().addView(relativeLayout, companionAdLayout);
+
+        companionView.setVisibility(initialVisibility);
+        return companionView;
+    }
+
     /**
      * Creates and lays out the webview used to display the icon.
      *
@@ -603,25 +705,27 @@ public void onVastWebViewClick() {
                         getNetworkMediaFileUrl(),
                         context
                 );
-                vastIconConfig.handleClick(getContext(), null);
+                vastIconConfig.handleClick(getContext(), null, mVastVideoConfig.getDspCreativeId());
             }
         });
         iconView.setWebViewClient(new WebViewClient() {
             @Override
             public boolean shouldOverrideUrlLoading(WebView view, String url) {
-                vastIconConfig.handleClick(getContext(), url);
+                vastIconConfig.handleClick(getContext(), url, mVastVideoConfig.getDspCreativeId());
                 return true;
             }
         });
         iconView.setVisibility(initialVisibility);
 
-        // Add extra room for the WebView to account for the natural padding in Android WebViews.
         RelativeLayout.LayoutParams layoutParams =
                 new RelativeLayout.LayoutParams(
-                        Dips.asIntPixels(vastIconConfig.getWidth() + WEBVIEW_PADDING, context),
-                        Dips.asIntPixels(vastIconConfig.getHeight() + WEBVIEW_PADDING, context));
-        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_LEFT);
-        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_TOP);
+                        Dips.asIntPixels(vastIconConfig.getWidth(), context),
+                        Dips.asIntPixels(vastIconConfig.getHeight(), context));
+        final int leftMargin = Dips.dipsToIntPixels(
+                DrawableConstants.PrivacyInfoIcon.LEFT_MARGIN_DIPS, context);
+        final int topMargin = Dips.dipsToIntPixels(
+                DrawableConstants.PrivacyInfoIcon.TOP_MARGIN_DIPS, context);
+        layoutParams.setMargins(leftMargin, topMargin, 0, 0);
 
         getLayout().addView(iconView, layoutParams);
 
@@ -643,6 +747,7 @@ void makeVideoInteractable() {
         mCloseButtonWidget.setVisibility(View.VISIBLE);
 
         mCtaButtonWidget.notifyVideoSkippable();
+        mSocialActionsView.setVisibility(View.VISIBLE);
     }
 
     boolean shouldBeInteractable() {
@@ -704,6 +809,45 @@ private void stopRunnables() {
         mCountdownRunnable.stop();
     }
 
+    @NonNull
+    private VastWebView createCompanionVastWebView(@NonNull final Context context,
+            @NonNull final VastCompanionAdConfig vastCompanionAdConfig) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(vastCompanionAdConfig);
+
+        VastWebView companionView = VastWebView.createView(context,
+                vastCompanionAdConfig.getVastResource());
+
+        // For javascript, HTML, and IFrames, ignore the traditional clickthrough url and open all
+        // new urls in the MoPub Browser. For static images, use the clickthrough url specified in
+        // the VAST document. These two handleClicks make it so that the correct behavior happens
+        // in these special cases. onVastWebViewClick is called in both circumstances to fire the
+        // click trackers.
+        companionView.setVastWebViewClickListener(new VastWebView.VastWebViewClickListener() {
+            @Override
+            public void onVastWebViewClick() {
+                broadcastAction(ACTION_INTERSTITIAL_CLICK);
+                makeVastTrackingHttpRequest(
+                        vastCompanionAdConfig.getClickTrackers(),
+                        null,
+                        mDuration,
+                        null,
+                        context
+                );
+                vastCompanionAdConfig.handleClick(context, MOPUB_BROWSER_REQUEST_CODE, null, mVastVideoConfig.getDspCreativeId());
+            }
+        });
+        companionView.setWebViewClient(new WebViewClient() {
+            @Override
+            public boolean shouldOverrideUrlLoading(WebView view, String url) {
+                vastCompanionAdConfig.handleClick(context, MOPUB_BROWSER_REQUEST_CODE, url, mVastVideoConfig.getDspCreativeId());
+                return true;
+            }
+        });
+
+        return companionView;
+    }
+
     // for testing
     @Deprecated
     @VisibleForTesting
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastWebView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastWebView.java
index 5889cd0b..673dc07f 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastWebView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastWebView.java
@@ -12,6 +12,7 @@
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.util.Utils;
 import com.mopub.common.util.VersionCode;
+import com.mopub.network.Networking;
 
 import static com.mopub.common.util.VersionCode.currentApiLevel;
 
@@ -41,7 +42,7 @@
     }
 
     void loadData(String data) {
-        loadDataWithBaseURL("http://" + Constants.HOST + "/",
+        loadDataWithBaseURL(Networking.getBaseUrlScheme() + "://" + Constants.HOST + "/",
                 data, "text/html", "utf-8", null);
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastXmlManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastXmlManager.java
index e13d7c60..8982783b 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastXmlManager.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastXmlManager.java
@@ -24,7 +24,7 @@
 
 /**
  * Parses the VAST XML to spec. See www.iab.net for details.
- * Currently using the VAST 3.0 spec found here: http://www.iab.net/media/file/VASTv3.0.pdf.
+ * Currently using the VAST 3.0 spec found here: https://www.iab.net/media/file/VASTv3.0.pdf.
  */
 class VastXmlManager {
     private static final String ROOT_TAG = "MPMoVideoXMLDocRoot";
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java
index 09c5d7b7..5f024d94 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java
@@ -3,7 +3,6 @@
 import android.content.Context;
 import android.content.res.Configuration;
 import android.graphics.Point;
-import android.net.http.AndroidHttpClient;
 import android.os.AsyncTask;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
@@ -11,24 +10,27 @@
 import android.view.Display;
 import android.view.WindowManager;
 
-import com.mopub.common.HttpClient;
+import com.mopub.common.MoPubHttpUrlConnection;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Dips;
+import com.mopub.common.util.Streams;
 import com.mopub.common.util.Strings;
 import com.mopub.network.Networking;
 
-import org.apache.http.HttpEntity;
-import org.apache.http.HttpResponse;
-import org.apache.http.client.methods.HttpGet;
-
+import java.io.BufferedInputStream;
+import java.io.IOException;
+import java.io.InputStream;
 import java.lang.ref.WeakReference;
+import java.net.HttpURLConnection;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Map;
 
 import static com.mopub.network.TrackingRequest.makeVastTrackingHttpRequest;
 
@@ -40,6 +42,11 @@
  */
 public class VastXmlManagerAggregator extends AsyncTask<String, Void, VastVideoConfig> {
 
+    private static final String MOPUB = "MoPub";
+
+    public static final String ADS_BY_AD_SLOT_ID = "adsBy";
+    public static final String SOCIAL_ACTIONS_AD_SLOT_ID = "socialActions";
+
     /**
      * Listener for when the xml parsing is done.
      */
@@ -105,25 +112,17 @@ protected void onPreExecute() {
 
     @Override
     protected VastVideoConfig doInBackground(@Nullable String... strings) {
-        AndroidHttpClient httpClient = null;
+        if (strings == null || strings.length == 0 || strings[0] == null) {
+            return null;
+        }
+
         try {
-            httpClient = HttpClient.getHttpClient();
-            if (strings != null && strings.length > 0) {
-                String vastXml = strings[0];
-                if (vastXml == null) {
-                    return null;
-                }
-                return evaluateVastXmlManager(vastXml, httpClient, new ArrayList<VastTracker>());
-            }
+            final String vastXml = strings[0];
+            return evaluateVastXmlManager(vastXml, new ArrayList<VastTracker>());
         } catch (Exception e) {
-            MoPubLog.d("Failed to parse VAST XML", e);
-        } finally {
-            if (httpClient != null) {
-                httpClient.close();
-            }
+            MoPubLog.d("Unable to generate VastVideoConfig.", e);
+            return null;
         }
-
-        return null;
     }
 
     @Override
@@ -155,7 +154,6 @@ protected void onCancelled() {
      * non-xml errors.
      *
      * @param vastXml           The xml that this class parses
-     * @param androidHttpClient This is used to follow redirects
      * @param errorTrackers     This is the current list of error tracker URLs to hit if something
      *                          goes wrong.
      * @return {@link VastVideoConfig} with all available fields set or null if the xml is
@@ -164,10 +162,8 @@ protected void onCancelled() {
     @VisibleForTesting
     @Nullable
     VastVideoConfig evaluateVastXmlManager(@NonNull final String vastXml,
-            @NonNull final AndroidHttpClient androidHttpClient,
             @NonNull final List<VastTracker> errorTrackers) {
         Preconditions.checkNotNull(vastXml, "vastXml cannot be null");
-        Preconditions.checkNotNull(androidHttpClient, "androidHttpClient cannot be null");
         Preconditions.checkNotNull(errorTrackers, "errorTrackers cannot be null");
 
         final VastXmlManager xmlManager = new VastXmlManager();
@@ -180,7 +176,7 @@ VastVideoConfig evaluateVastXmlManager(@NonNull final String vastXml,
             return null;
         }
 
-        List<VastAdXmlManager> vastAdXmlManagers = xmlManager.getAdXmlManagers();
+        final List<VastAdXmlManager> vastAdXmlManagers = xmlManager.getAdXmlManagers();
 
         // If there are no ads, fire the error trackers
         if (fireErrorTrackerIfNoAds(vastAdXmlManagers, xmlManager, mContext)) {
@@ -188,15 +184,15 @@ VastVideoConfig evaluateVastXmlManager(@NonNull final String vastXml,
         }
 
         for (VastAdXmlManager vastAdXmlManager : vastAdXmlManagers) {
-
             if (!isValidSequenceNumber(vastAdXmlManager.getSequence())) {
                 continue;
             }
 
             // InLine evaluation
-            VastInLineXmlManager vastInLineXmlManager = vastAdXmlManager.getInLineXmlManager();
+            final VastInLineXmlManager vastInLineXmlManager =
+                    vastAdXmlManager.getInLineXmlManager();
             if (vastInLineXmlManager != null) {
-                VastVideoConfig vastVideoConfig = evaluateInLineXmlManager(
+                final VastVideoConfig vastVideoConfig = evaluateInLineXmlManager(
                         vastInLineXmlManager, errorTrackers);
                 // If the vastVideoConfig is non null, it means we found a valid media file
                 if (vastVideoConfig != null) {
@@ -206,19 +202,19 @@ VastVideoConfig evaluateVastXmlManager(@NonNull final String vastXml,
             }
 
             // Wrapper evaluation
-            VastWrapperXmlManager vastWrapperXmlManager = vastAdXmlManager.getWrapperXmlManager();
+            final VastWrapperXmlManager vastWrapperXmlManager
+                    = vastAdXmlManager.getWrapperXmlManager();
             if (vastWrapperXmlManager != null) {
                 final List<VastTracker> wrapperErrorTrackers = new ArrayList<VastTracker>(errorTrackers);
                 wrapperErrorTrackers.addAll(vastWrapperXmlManager.getErrorTrackers());
-                String vastRedirectXml = evaluateWrapperRedirect(vastWrapperXmlManager,
-                        androidHttpClient, wrapperErrorTrackers);
+                final String vastRedirectXml = evaluateWrapperRedirect(vastWrapperXmlManager,
+                        wrapperErrorTrackers);
                 if (vastRedirectXml == null) {
                     continue;
                 }
 
-                VastVideoConfig vastVideoConfig = evaluateVastXmlManager(
+                final VastVideoConfig vastVideoConfig = evaluateVastXmlManager(
                         vastRedirectXml,
-                        androidHttpClient,
                         wrapperErrorTrackers);
                 // If we don't find a valid video creative somewhere down this wrapper chain,
                 // look at the next Ad element
@@ -232,19 +228,22 @@ VastVideoConfig evaluateVastXmlManager(@NonNull final String vastXml,
                 // in one of Wrapper redirects. Therefore, aggregate all trackers in the wrapper
                 vastVideoConfig.addImpressionTrackers(
                         vastWrapperXmlManager.getImpressionTrackers());
-                List<VastLinearXmlManager> linearXmlManagers =
+                final List<VastLinearXmlManager> linearXmlManagers =
                         vastWrapperXmlManager.getLinearXmlManagers();
                 for (VastLinearXmlManager linearXmlManager : linearXmlManagers) {
                     populateLinearTrackersAndIcon(linearXmlManager, vastVideoConfig);
                 }
+                populateVideoViewabilityTracker(vastWrapperXmlManager, vastVideoConfig);
 
+                final List<VastCompanionAdXmlManager> companionAdXmlManagers =
+                        vastWrapperXmlManager.getCompanionAdXmlManagers();
                 // Only populate a companion ad if we don't already have one from one of the
                 // redirects
                 if (!vastVideoConfig.hasCompanionAd()) {
                     vastVideoConfig.setVastCompanionAd(
-                            getBestCompanionAd(vastWrapperXmlManager.getCompanionAdXmlManagers(),
+                            getBestCompanionAd(companionAdXmlManagers,
                                     CompanionOrientation.LANDSCAPE),
-                            getBestCompanionAd(vastWrapperXmlManager.getCompanionAdXmlManagers(),
+                            getBestCompanionAd(companionAdXmlManagers,
                                     CompanionOrientation.PORTRAIT));
                 } else {
                     // Otherwise append the companion trackers if it doesn't have resources
@@ -253,7 +252,7 @@ VastVideoConfig evaluateVastXmlManager(@NonNull final String vastXml,
                     final VastCompanionAdConfig portraitCompanionAd = vastVideoConfig.getVastCompanionAd(
                             Configuration.ORIENTATION_PORTRAIT);
                     if (landscapeCompanionAd != null && portraitCompanionAd != null) {
-                        for (final VastCompanionAdXmlManager companionAdXmlManager : vastWrapperXmlManager.getCompanionAdXmlManagers()) {
+                        for (final VastCompanionAdXmlManager companionAdXmlManager : companionAdXmlManagers) {
                             if (!companionAdXmlManager.hasResources()) {
                                 landscapeCompanionAd.addClickTrackers(
                                         companionAdXmlManager.getClickTrackers());
@@ -268,6 +267,11 @@ VastVideoConfig evaluateVastXmlManager(@NonNull final String vastXml,
                     }
                 }
 
+                if (vastVideoConfig.getSocialActionsCompanionAds().isEmpty()) {
+                    vastVideoConfig.setSocialActionsCompanionAds(
+                            getSocialActionsCompanionAds(companionAdXmlManagers));
+                }
+
                 populateMoPubCustomElements(xmlManager, vastVideoConfig);
 
                 return vastVideoConfig;
@@ -293,13 +297,16 @@ private VastVideoConfig evaluateInLineXmlManager(
             @NonNull final VastInLineXmlManager vastInLineXmlManager,
             @NonNull final List<VastTracker> errorTrackers) {
         Preconditions.checkNotNull(vastInLineXmlManager);
+        Preconditions.checkNotNull(errorTrackers);
+
+        final List<VastLinearXmlManager> linearXmlManagers
+                = vastInLineXmlManager.getLinearXmlManagers();
 
-        List<VastLinearXmlManager> linearXmlManagers = vastInLineXmlManager.getLinearXmlManagers();
         for (VastLinearXmlManager linearXmlManager : linearXmlManagers) {
             String bestMediaFileUrl = getBestMediaFileUrl(linearXmlManager.getMediaXmlManagers());
             if (bestMediaFileUrl != null) {
                 // Create vast video configuration and populate initial trackers
-                VastVideoConfig vastVideoConfig = new VastVideoConfig();
+                final VastVideoConfig vastVideoConfig = new VastVideoConfig();
                 vastVideoConfig.addImpressionTrackers(vastInLineXmlManager.getImpressionTrackers());
                 populateLinearTrackersAndIcon(linearXmlManager, vastVideoConfig);
 
@@ -309,13 +316,19 @@ private VastVideoConfig evaluateInLineXmlManager(
                 vastVideoConfig.setClickThroughUrl(linearXmlManager.getClickThroughUrl());
                 vastVideoConfig.setNetworkMediaFileUrl(bestMediaFileUrl);
 
+                final List<VastCompanionAdXmlManager> companionAdXmlManagers =
+                        vastInLineXmlManager.getCompanionAdXmlManagers();
                 vastVideoConfig.setVastCompanionAd(
-                        getBestCompanionAd(vastInLineXmlManager.getCompanionAdXmlManagers(),
+                        getBestCompanionAd(companionAdXmlManagers,
                                 CompanionOrientation.LANDSCAPE),
-                        getBestCompanionAd(vastInLineXmlManager.getCompanionAdXmlManagers(),
+                        getBestCompanionAd(companionAdXmlManagers,
                                 CompanionOrientation.PORTRAIT));
+                vastVideoConfig.setSocialActionsCompanionAds(
+                        getSocialActionsCompanionAds(companionAdXmlManagers));
                 errorTrackers.addAll(vastInLineXmlManager.getErrorTrackers());
                 vastVideoConfig.addErrorTrackers(errorTrackers);
+                populateVideoViewabilityTracker(vastInLineXmlManager, vastVideoConfig);
+
                 return vastVideoConfig;
             }
         }
@@ -323,26 +336,49 @@ private VastVideoConfig evaluateInLineXmlManager(
         return null;
     }
 
+    private void populateVideoViewabilityTracker(
+            @NonNull final VastBaseInLineWrapperXmlManager vastInLineXmlManager,
+            @NonNull VastVideoConfig vastVideoConfig) {
+        Preconditions.checkNotNull(vastInLineXmlManager);
+        Preconditions.checkNotNull(vastVideoConfig);
+
+        if (vastVideoConfig.getVideoViewabilityTracker() != null) {
+            return;
+        }
+
+        final VastExtensionParentXmlManager vastExtensionParentXmlManager =
+                vastInLineXmlManager.getVastExtensionParentXmlManager();
+        if (vastExtensionParentXmlManager != null) {
+            final List<VastExtensionXmlManager> vastExtensionXmlManagers =
+                    vastExtensionParentXmlManager.getVastExtensionXmlManagers();
+            for (VastExtensionXmlManager vastExtensionXmlManager : vastExtensionXmlManagers) {
+                if (MOPUB.equals(vastExtensionXmlManager.getType())) {
+                    vastVideoConfig.setVideoViewabilityTracker(vastExtensionXmlManager
+                            .getVideoViewabilityTracker());
+                    break;
+                }
+            }
+        }
+    }
+
     /**
      * Retrieves the Wrapper's redirect uri and follows it to return the next VAST xml String.
      *
      * @param vastWrapperXmlManager used to get the redirect uri
-     * @param androidHttpClient     the http client
      * @param wrapperErrorTrackers  Error trackers to hit if something goes wrong
      * @return the next VAST xml String or {@code null} if it could not be resolved
      */
     @Nullable
     private String evaluateWrapperRedirect(@NonNull VastWrapperXmlManager vastWrapperXmlManager,
-            @NonNull AndroidHttpClient androidHttpClient,
             @NonNull List<VastTracker> wrapperErrorTrackers) {
-        String vastAdTagUri = vastWrapperXmlManager.getVastAdTagURI();
+        final String vastAdTagUri = vastWrapperXmlManager.getVastAdTagURI();
         if (vastAdTagUri == null) {
             return null;
         }
 
         String vastRedirectXml = null;
         try {
-            vastRedirectXml = followVastRedirect(androidHttpClient, vastAdTagUri);
+            vastRedirectXml = followVastRedirect(vastAdTagUri);
         } catch (Exception e) {
             MoPubLog.d("Failed to follow VAST redirect", e);
             if (!wrapperErrorTrackers.isEmpty()) {
@@ -512,7 +548,7 @@ VastCompanionAdConfig getBestCompanionAd(
                     continue;
                 }
 
-                Point vastScaledDimensions = getScaledDimensions(width, height);
+                Point vastScaledDimensions = getScaledDimensions(width, height, type, orientation);
                 VastResource vastResource = VastResource.fromVastResourceXmlManager(
                         companionXmlManager.getResourceXmlManager(), type,
                         vastScaledDimensions.x, vastScaledDimensions.y);
@@ -551,47 +587,119 @@ VastCompanionAdConfig getBestCompanionAd(
         return null;
     }
 
+    @VisibleForTesting
+    @NonNull
+    Map<String, VastCompanionAdConfig> getSocialActionsCompanionAds(
+            @NonNull final List<VastCompanionAdXmlManager> managers) {
+        Preconditions.checkNotNull(managers, "managers cannot be null");
+
+        final Map<String, VastCompanionAdConfig> socialActionsCompanionAds =
+                new HashMap<String, VastCompanionAdConfig>();
+
+        for (VastCompanionAdXmlManager companionXmlManager : managers) {
+            final Integer width = companionXmlManager.getWidth();
+            final Integer height = companionXmlManager.getHeight();
+            if (width == null || height == null) {
+                continue;
+            }
+
+            final String adSlotId = companionXmlManager.getAdSlotId();
+            if (ADS_BY_AD_SLOT_ID.equals(adSlotId)) {
+                // adsBy companion ads must be 25-75dips wide and 10-50dips tall
+                if (width < 25 || width > 75 || height < 10 || height > 50) {
+                    continue;
+                }
+            } else if (SOCIAL_ACTIONS_AD_SLOT_ID.equals(adSlotId)) {
+                // socialActions companion ads must be 50-150dips wide and 10-50dips tall
+                if (width < 50 || width > 150 || height < 10 || height > 50) {
+                    continue;
+                }
+            } else {
+                // Social Actions companion ads must have adsBy or socialActions as adSlotId
+                continue;
+            }
+
+            VastResource vastResource = VastResource.fromVastResourceXmlManager(
+                    companionXmlManager.getResourceXmlManager(), VastResource.Type.HTML_RESOURCE,
+                    width, height);
+            if (vastResource == null) {
+                continue;
+            }
+
+            socialActionsCompanionAds.put(adSlotId,
+                    new VastCompanionAdConfig(
+                        width,
+                        height,
+                        vastResource,
+                        companionXmlManager.getClickThroughUrl(),
+                        companionXmlManager.getClickTrackers(),
+                        companionXmlManager.getCompanionCreativeViewTrackers()));
+        }
+
+        return socialActionsCompanionAds;
+    }
+
     /**
      * Given a width and height for a resource, if the dimensions are larger than the screen size
-     * then scale them down to fit in the screen while maintaining the aspect ratio. Scaling
-     * takes into account the default Android WebView padding.
+     * then scale them down to fit in the screen. This maintains the aspect ratio if the resource is
+     * not an HTMLResource. Since HTML can freely fill any space, the maximum size of an
+     * HTMLResource is the screen size. Scaling takes into account the default Android WebView
+     * padding.
      *
-     * @param widthDp width of the resource in dips
-     * @param heightDp height of the resource in dips
+     * @param widthDp     width of the resource in dips
+     * @param heightDp    height of the resource in dips
+     * @param type        The type of the resource. HTMLResource uses special scaling.
+     * @param orientation Expected orientation of the resource
      * @return the new scaled dimensions that honor the aspect ratio
      */
     @VisibleForTesting
     @NonNull
-    Point getScaledDimensions(int widthDp, int heightDp) {
-        Point defaultPoint = new Point(widthDp, heightDp);
-        final Display display = ((WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+    Point getScaledDimensions(int widthDp, int heightDp, final VastResource.Type type,
+            final CompanionOrientation orientation) {
+        final Point defaultPoint = new Point(widthDp, heightDp);
+        final Display display = ((WindowManager) mContext.getSystemService(
+                Context.WINDOW_SERVICE)).getDefaultDisplay();
         int x = display.getWidth();
         int y = display.getHeight();
 
-        // For landscape, width is always greater than height
-        int screenWidth = Math.max(x, y);
-        int screenHeight = Math.min(x, y);
-
         int widthPx = Dips.dipsToIntPixels(widthDp, mContext);
         int heightPx = Dips.dipsToIntPixels(heightDp, mContext);
 
+        final int screenWidthPx, screenHeightPx;
+        if (CompanionOrientation.LANDSCAPE == orientation) {
+            screenWidthPx = Math.max(x, y);
+            screenHeightPx = Math.min(x, y);
+        } else {
+            screenWidthPx = Math.min(x, y);
+            screenHeightPx = Math.max(x, y);
+        }
+
         // Return if the width and height already fit in the screen
-        if (widthPx <= screenWidth && heightPx <= screenHeight) {
+        if (widthPx <= (screenWidthPx - VastVideoViewController.WEBVIEW_PADDING) &&
+                heightPx <= (screenHeightPx - VastVideoViewController.WEBVIEW_PADDING)) {
             return defaultPoint;
         }
 
-        float widthRatio = (float) widthPx / screenWidth;
-        float heightRatio = (float) heightPx / screenHeight;
-
-        Point point = new Point();
-        if (widthRatio >= heightRatio) {
-            point.x = screenWidth - VastVideoViewController.WEBVIEW_PADDING;
-            point.y = (int) (heightPx / widthRatio) - VastVideoViewController.WEBVIEW_PADDING;
+        final Point point = new Point();
+        if (VastResource.Type.HTML_RESOURCE == type) {
+            point.x = Math.min(screenWidthPx, widthPx);
+            point.y = Math.min(screenHeightPx, heightPx);
         } else {
-            point.x = (int) (widthPx / heightRatio) - VastVideoViewController.WEBVIEW_PADDING;
-            point.y = screenHeight - VastVideoViewController.WEBVIEW_PADDING;
+            float widthRatio = (float) widthPx / screenWidthPx;
+            float heightRatio = (float) heightPx / screenHeightPx;
+
+            if (widthRatio >= heightRatio) {
+                point.x = screenWidthPx;
+                point.y = (int) (heightPx / widthRatio);
+            } else {
+                point.x = (int) (widthPx / heightRatio);
+                point.y = screenHeightPx;
+            }
         }
 
+        point.x -= VastVideoViewController.WEBVIEW_PADDING;
+        point.y -= VastVideoViewController.WEBVIEW_PADDING;
+
         if (point.x < 0 || point.y < 0) {
             return defaultPoint;
         }
@@ -688,19 +796,27 @@ static boolean isValidSequenceNumber(@Nullable final String sequence) {
     }
 
     @Nullable
-    private String followVastRedirect(@NonNull final AndroidHttpClient httpClient,
-            @NonNull final String redirectUrl) throws Exception {
-        Preconditions.checkNotNull(httpClient);
+    private String followVastRedirect(@NonNull final String redirectUrl) throws IOException {
         Preconditions.checkNotNull(redirectUrl);
 
         if (mTimesFollowedVastRedirect < MAX_TIMES_TO_FOLLOW_VAST_REDIRECT) {
             mTimesFollowedVastRedirect++;
 
-            final HttpGet httpget = HttpClient.initializeHttpGet(redirectUrl);
-            final HttpResponse response = httpClient.execute(httpget);
-            final HttpEntity entity = response.getEntity();
-            return (entity != null) ? Strings.fromStream(entity.getContent()) : null;
+            HttpURLConnection urlConnection = null;
+            InputStream inputStream = null;
+            try {
+                urlConnection = MoPubHttpUrlConnection.getHttpUrlConnection(redirectUrl);
+                inputStream = new BufferedInputStream(urlConnection.getInputStream());
+
+                return Strings.fromStream(inputStream);
+            } finally {
+                Streams.closeStream(inputStream);
+                if (urlConnection != null) {
+                    urlConnection.disconnect();
+                }
+            }
         }
+
         return null;
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VideoDownloader.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VideoDownloader.java
new file mode 100644
index 00000000..968e5550
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VideoDownloader.java
@@ -0,0 +1,184 @@
+package com.mopub.mobileads;
+
+import android.os.AsyncTask;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.CacheService;
+import com.mopub.common.MoPubHttpUrlConnection;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.AsyncTasks;
+import com.mopub.common.util.Streams;
+
+import java.io.BufferedInputStream;
+import java.io.InputStream;
+import java.lang.ref.WeakReference;
+import java.net.HttpURLConnection;
+import java.util.ArrayDeque;
+import java.util.Deque;
+
+public class VideoDownloader {
+    private static final int MAX_VIDEO_SIZE = 25 * 1024 * 1024; // 25 MiB
+    private static final Deque<WeakReference<VideoDownloaderTask>> sDownloaderTasks =
+            new ArrayDeque<WeakReference<VideoDownloaderTask>>();
+
+    interface VideoDownloaderListener {
+        void onComplete(boolean success);
+    }
+
+    private VideoDownloader() {}
+
+    public static void cache(@Nullable final String url,
+            @NonNull final VideoDownloaderListener listener) {
+        Preconditions.checkNotNull(listener);
+
+        if (url == null) {
+            MoPubLog.d("VideoDownloader attempted to cache video with null url.");
+            listener.onComplete(false);
+            return;
+        }
+
+        final VideoDownloaderTask videoDownloaderTask = new VideoDownloaderTask(listener);
+        try {
+            AsyncTasks.safeExecuteOnExecutor(videoDownloaderTask, url);
+        } catch (Exception e) {
+            listener.onComplete(false);
+        }
+    }
+
+
+    public static void cancelAllDownloaderTasks() {
+        for (final WeakReference<VideoDownloaderTask> weakDownloaderTask : sDownloaderTasks) {
+            cancelOneTask(weakDownloaderTask);
+        }
+
+        sDownloaderTasks.clear();
+    }
+
+    public static void cancelLastDownloadTask() {
+        if (sDownloaderTasks.isEmpty()) {
+            return;
+        }
+
+        cancelOneTask(sDownloaderTasks.peekLast());
+        sDownloaderTasks.removeLast();
+    }
+
+    /**
+     * @param weakDownloaderTask A weak reference to an in-flight VideoDownloaderTask
+     * @return  <tt>false</tt> if weakDownloaderTask is null, has a null referent, or if the task has
+     *          already been completed
+     *          <tt>true</tt> otherwise
+     */
+    private static boolean cancelOneTask(
+            @Nullable final WeakReference<VideoDownloaderTask> weakDownloaderTask) {
+        if (weakDownloaderTask == null) {
+            return false;
+        }
+
+        final VideoDownloaderTask downloaderTask = weakDownloaderTask.get();
+        if (downloaderTask == null) {
+            return false;
+        }
+
+        return downloaderTask.cancel(true);
+    }
+
+    @VisibleForTesting
+    static class VideoDownloaderTask extends AsyncTask<String, Void, Boolean> {
+        @NonNull private final VideoDownloaderListener mListener;
+        @NonNull private final WeakReference<VideoDownloaderTask> mWeakSelf;
+
+        @VisibleForTesting
+        VideoDownloaderTask(@NonNull final VideoDownloaderListener listener) {
+            mListener = listener;
+            mWeakSelf = new WeakReference<VideoDownloaderTask>(this);
+            sDownloaderTasks.add(mWeakSelf);
+        }
+
+        @Override
+        protected Boolean doInBackground(final String... params) {
+            if (params == null || params.length == 0 || params[0] == null) {
+                MoPubLog.d("VideoDownloader task tried to execute null or empty url.");
+                return false;
+            }
+
+            final String videoUrl = params[0];
+            HttpURLConnection urlConnection = null;
+            InputStream inputStream = null;
+            try {
+                urlConnection = MoPubHttpUrlConnection.getHttpUrlConnection(videoUrl);
+                inputStream = new BufferedInputStream(urlConnection.getInputStream());
+
+                // Check status code range
+                int statusCode = urlConnection.getResponseCode();
+                if (statusCode < HttpURLConnection.HTTP_OK
+                        || statusCode >= HttpURLConnection.HTTP_MULT_CHOICE) {
+                    MoPubLog.d("VideoDownloader encountered unexpected statusCode: " +
+                            statusCode);
+                    return false;
+                }
+
+                // Check video size below maximum
+                int contentLength = urlConnection.getContentLength();
+                if (contentLength > MAX_VIDEO_SIZE) {
+                    MoPubLog.d(String.format(
+                            "VideoDownloader encountered video larger than disk cap. " +
+                                    "(%d bytes / %d maximum).",
+                            contentLength,
+                            MAX_VIDEO_SIZE));
+                    return false;
+                }
+
+                boolean diskPutResult = CacheService.putToDiskCache(videoUrl, inputStream);
+                return diskPutResult;
+            } catch (Exception e) {
+                MoPubLog.d("VideoDownloader task threw an internal exception.", e);
+                return false;
+            } finally {
+                Streams.closeStream(inputStream);
+                if (urlConnection != null) {
+                    urlConnection.disconnect();
+                }
+            }
+        }
+
+        @Override
+        protected void onPostExecute(final Boolean success) {
+            if (isCancelled()) {
+                onCancelled();
+                return;
+            }
+
+            sDownloaderTasks.remove(mWeakSelf);
+
+            if (success == null) {
+                mListener.onComplete(false);
+                return;
+            }
+
+            mListener.onComplete(success);
+        }
+
+        @Override
+        protected void onCancelled() {
+            MoPubLog.d("VideoDownloader task was cancelled.");
+            sDownloaderTasks.remove(mWeakSelf);
+            mListener.onComplete(false);
+        }
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    public static Deque<WeakReference<VideoDownloaderTask>> getDownloaderTasks() {
+        return sDownloaderTasks;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    public static void clearDownloaderTasks() {
+        sDownloaderTasks.clear();
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VideoViewabilityTracker.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VideoViewabilityTracker.java
new file mode 100644
index 00000000..4605651d
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VideoViewabilityTracker.java
@@ -0,0 +1,23 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+
+public class VideoViewabilityTracker extends VastTracker {
+    private final int mViewablePlaytimeMS;
+    private final int mPercentViewable;
+
+    public VideoViewabilityTracker(final int viewablePlaytimeMS, final int percentViewable,
+            @NonNull final String trackerUrl) {
+        super(trackerUrl);
+        mViewablePlaytimeMS = viewablePlaytimeMS;
+        mPercentViewable = percentViewable;
+    }
+
+    public int getViewablePlaytimeMS() {
+        return mViewablePlaytimeMS;
+    }
+
+    public int getPercentViewable() {
+        return mPercentViewable;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VideoViewabilityTrackerXmlManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VideoViewabilityTrackerXmlManager.java
new file mode 100644
index 00000000..69438c34
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VideoViewabilityTrackerXmlManager.java
@@ -0,0 +1,112 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Strings;
+import com.mopub.mobileads.util.XmlUtils;
+
+import org.w3c.dom.Node;
+
+/**
+ * Data Object for the MoPubViewabilityTracker VAST Custom Extension.
+ */
+public class VideoViewabilityTrackerXmlManager {
+    // Attributes
+    public static final String VIEWABLE_PLAYTIME = "viewablePlaytime";
+    public static final String PERCENT_VIEWABLE = "percentViewable";
+
+    private final Node mVideoViewabilityNode;
+
+    VideoViewabilityTrackerXmlManager(@NonNull final Node videoViewabilityNode) {
+        Preconditions.checkNotNull(videoViewabilityNode);
+
+        mVideoViewabilityNode = videoViewabilityNode;
+    }
+
+    /**
+     * The amount of milliseconds the video must be playing to fire the impression, parsed from the
+     * "viewablePlaytime" attribute. The following two formats are valid for this attribute:
+     *     HH:MM:SS[.mmm]
+     *     SS[.mmm]
+     *
+     * @return The value of the "viewablePlaytime" attribute parsed into milliseconds or null if
+     * missing or invalid.
+     */
+    @Nullable
+    Integer getViewablePlaytimeMS() {
+        String viewablePlaytimeStr =
+                XmlUtils.getAttributeValue(mVideoViewabilityNode, VIEWABLE_PLAYTIME);
+        if (viewablePlaytimeStr == null) {
+            return null;
+        }
+
+        Integer viewablePlaytimeMS = null;
+        if (Strings.isAbsoluteTracker(viewablePlaytimeStr)) {
+            try {
+                viewablePlaytimeMS = Strings.parseAbsoluteOffset(viewablePlaytimeStr);
+            } catch (NumberFormatException e) {
+                MoPubLog.d(String.format("Invalid VAST viewablePlaytime format " +
+                        "for \"HH:MM:SS[.mmm]\": %s:", viewablePlaytimeStr));
+            }
+        } else {
+            try {
+                viewablePlaytimeMS = (int) (Float.parseFloat(viewablePlaytimeStr) * 1000);
+            } catch (NumberFormatException e) {
+                MoPubLog.d(String.format("Invalid VAST viewablePlaytime format" +
+                        " for \"SS[.mmm]\": %s:", viewablePlaytimeStr));
+            }
+        }
+
+        if (viewablePlaytimeMS == null || viewablePlaytimeMS < 0) {
+            return null;
+        }
+
+        return viewablePlaytimeMS;
+    }
+
+    /**
+     * The percentage of the video that must be in view for the tracker to be fired, parsed from the
+     * "percentViewable" attribute. The attribute may or may not have the percentage sign though it
+     * must be a number between 0 and 100, inclusive. Any decimal digits are discarded (e.g.,
+     * "99.9%" is parsed into "99").
+     *
+     * @return The value of the percentViewable attribute parsed into an integer between 0 and 100,
+     * or null if missing or invalid.
+     */
+    @Nullable
+    Integer getPercentViewable() {
+        String percentViewableStr =
+                XmlUtils.getAttributeValue(mVideoViewabilityNode, PERCENT_VIEWABLE);
+        if (percentViewableStr == null) {
+            return null;
+        }
+
+        Integer percentViewable = null;
+        try {
+            percentViewable = (int) (Float.parseFloat(percentViewableStr.replace("%", "")));
+        } catch (NumberFormatException e) {
+            MoPubLog.d(String.format("Invalid VAST percentViewable format for \"d{1,3}%%\": %s:",
+                    percentViewableStr));
+        }
+
+        if (percentViewable == null || percentViewable < 0 || percentViewable > 100) {
+            return null;
+        }
+
+        return percentViewable;
+    }
+
+    /**
+     * The tracker URL to be fired when the viewablePlaytime and percentViewable values are met,
+     * parsed from the body of the node.
+     *
+     * @return A String with the tracker URL or null if missing.
+     */
+    @Nullable
+    String getVideoViewabilityTrackerUrl() {
+        return XmlUtils.getNodeValue(mVideoViewabilityNode);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java
index 59b9544d..9c0c92c9 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java
@@ -28,7 +28,7 @@ public HtmlBannerWebView internalCreate(
             String redirectUrl,
             String clickthroughUrl) {
         HtmlBannerWebView htmlBannerWebView = new HtmlBannerWebView(context, adReport);
-        htmlBannerWebView.init(customEventBannerListener, isScrollable, redirectUrl, clickthroughUrl);
+        htmlBannerWebView.init(customEventBannerListener, isScrollable, redirectUrl, clickthroughUrl, adReport.getDspCreativeId());
         return htmlBannerWebView;
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactory.java
index 65d97a39..e26f34a8 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactory.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactory.java
@@ -28,7 +28,7 @@ public HtmlInterstitialWebView internalCreate(
             String redirectUrl,
             String clickthroughUrl) {
         HtmlInterstitialWebView htmlInterstitialWebView = new HtmlInterstitialWebView(context, adReport);
-        htmlInterstitialWebView.init(customEventInterstitialListener, isScrollable, redirectUrl, clickthroughUrl);
+        htmlInterstitialWebView.init(customEventInterstitialListener, isScrollable, redirectUrl, clickthroughUrl, adReport.getDspCreativeId());
         return htmlInterstitialWebView;
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HttpClientFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HttpClientFactory.java
deleted file mode 100644
index b13cded1..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HttpClientFactory.java
+++ /dev/null
@@ -1,41 +0,0 @@
-package com.mopub.mobileads.factories;
-
-import org.apache.http.impl.client.DefaultHttpClient;
-import org.apache.http.params.BasicHttpParams;
-import org.apache.http.params.HttpConnectionParams;
-import org.apache.http.params.HttpParams;
-
-public class HttpClientFactory {
-    public static final int SOCKET_SIZE = 8192;
-
-    private static HttpClientFactory instance = new HttpClientFactory();
-
-    @Deprecated // for testing
-    public static void setInstance(HttpClientFactory factory) {
-        instance = factory;
-    }
-
-    public static DefaultHttpClient create(int timeoutMilliseconds) {
-        return instance.internalCreate(timeoutMilliseconds);
-    }
-
-    public static DefaultHttpClient create() {
-        return instance.internalCreate(0);
-    }
-
-    protected DefaultHttpClient internalCreate(int timeoutMilliseconds) {
-        HttpParams httpParameters = new BasicHttpParams();
-
-        if (timeoutMilliseconds > 0) {
-            // Set timeouts to wait for connection establishment / receiving data.
-            HttpConnectionParams.setConnectionTimeout(httpParameters, timeoutMilliseconds);
-            HttpConnectionParams.setSoTimeout(httpParameters, timeoutMilliseconds);
-        }
-
-        // Set the buffer size to avoid OutOfMemoryError exceptions on certain HTC devices.
-        // http://stackoverflow.com/questions/5358014/android-httpclient-oom-on-4g-lte-htc-thunderbolt
-        HttpConnectionParams.setSocketBufferSize(httpParameters, SOCKET_SIZE);
-
-        return new DefaultHttpClient(httpParameters);
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/MoPubViewFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/MoPubViewFactory.java
index b24a90f7..8a335dc9 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/MoPubViewFactory.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/MoPubViewFactory.java
@@ -2,12 +2,14 @@
 
 import android.content.Context;
 
+import com.mopub.common.VisibleForTesting;
 import com.mopub.mobileads.MoPubView;
 
 public class MoPubViewFactory {
     protected static MoPubViewFactory instance = new MoPubViewFactory();
 
-    @Deprecated // for testing
+    @VisibleForTesting
+    @Deprecated
     public static void setInstance(MoPubViewFactory factory) {
         instance = factory;
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/VastManagerFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/VastManagerFactory.java
index 68f918c2..2d754c77 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/VastManagerFactory.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/VastManagerFactory.java
@@ -8,11 +8,15 @@
     protected static VastManagerFactory instance = new VastManagerFactory();
 
     public static VastManager create(final Context context) {
-        return instance.internalCreate(context);
+        return instance.internalCreate(context, true);
     }
 
-    public VastManager internalCreate(final Context context) {
-        return new VastManager(context);
+    public static VastManager create(final Context context, boolean preCacheVideo) {
+        return instance.internalCreate(context, preCacheVideo);
+    }
+
+    public VastManager internalCreate(final Context context, boolean preCacheVideo) {
+        return new VastManager(context, preCacheVideo);
     }
 
     @Deprecated // for testing
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/VastVideoDownloadTaskFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/VastVideoDownloadTaskFactory.java
deleted file mode 100644
index c2bd8e68..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/VastVideoDownloadTaskFactory.java
+++ /dev/null
@@ -1,20 +0,0 @@
-package com.mopub.mobileads.factories;
-
-import com.mopub.mobileads.VastVideoDownloadTask;
-
-public class VastVideoDownloadTaskFactory {
-    private static VastVideoDownloadTaskFactory instance = new VastVideoDownloadTaskFactory();
-
-    @Deprecated // for testing
-    public static void setInstance(VastVideoDownloadTaskFactory factory){
-        instance = factory;
-    }
-
-    public static VastVideoDownloadTask create(VastVideoDownloadTask.VastVideoDownloadTaskListener vastVideoDownloadTaskListener) {
-        return instance.internalCreate(vastVideoDownloadTaskListener);
-    }
-
-    protected VastVideoDownloadTask internalCreate(VastVideoDownloadTask.VastVideoDownloadTaskListener vastVideoDownloadTaskListener) {
-        return new VastVideoDownloadTask(vastVideoDownloadTaskListener);
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
index 8fc410a5..0cdb4fa7 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
@@ -6,13 +6,22 @@
 
 public class CloseButtonDrawable extends BaseWidgetDrawable {
     private final Paint closeButtonPaint;
+    /**
+     * Used to ensure that the rounded edges of the X stay in the bounds of the drawable
+     */
+    private final float halfStrokeWidth;
 
     public CloseButtonDrawable() {
+        this(DrawableConstants.CloseButton.STROKE_WIDTH);
+    }
+
+    public CloseButtonDrawable(float strokeWidth) {
         super();
 
+        halfStrokeWidth = strokeWidth / 2;
         closeButtonPaint = new Paint();
         closeButtonPaint.setColor(DrawableConstants.CloseButton.STROKE_COLOR);
-        closeButtonPaint.setStrokeWidth(DrawableConstants.CloseButton.STROKE_WIDTH);
+        closeButtonPaint.setStrokeWidth(strokeWidth);
         closeButtonPaint.setStrokeCap(DrawableConstants.CloseButton.STROKE_CAP);
     }
 
@@ -20,7 +29,9 @@ public CloseButtonDrawable() {
     public void draw(final Canvas canvas) {
         final int w = getBounds().width();
         final int h = getBounds().height();
-        canvas.drawLine(0, h, w, 0, closeButtonPaint);
-        canvas.drawLine(0, 0, w, h, closeButtonPaint);
+        canvas.drawLine(0+halfStrokeWidth, h-halfStrokeWidth,
+                w-halfStrokeWidth, 0+halfStrokeWidth, closeButtonPaint);
+        canvas.drawLine(0+halfStrokeWidth, 0+halfStrokeWidth,
+                w-halfStrokeWidth, h-halfStrokeWidth, closeButtonPaint);
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java
index 5c2b844f..b3dd1bff 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java
@@ -6,6 +6,8 @@
 
 public class DrawableConstants {
 
+    public static final int TRANSPARENT_GRAY = 0x88000000;
+
     public static class ProgressBar {
         public static final int HEIGHT_DIPS = 4;
         public static final int NUGGET_WIDTH_DIPS = 4;
@@ -42,12 +44,12 @@
     }
 
     public static class CtaButton {
-        public static final int WIDTH_DIPS = 200;
-        public static final int HEIGHT_DIPS = 42;
+        public static final int WIDTH_DIPS = 150;
+        public static final int HEIGHT_DIPS = 38;
         public static final int MARGIN_DIPS = 16;
         public static final int CORNER_RADIUS_DIPS = 6;
         public static final int OUTLINE_STROKE_WIDTH_DIPS = 2;
-        public static final float TEXT_SIZE_SP = 20f;
+        public static final float TEXT_SIZE_SP = 15f;
 
         public static final int BACKGROUND_COLOR = Color.BLACK;
         public static final int BACKGROUND_ALPHA = 51;
@@ -58,7 +60,7 @@
         public static final Paint.Style OUTLINE_STYLE = Paint.Style.STROKE;
 
         public static final String DEFAULT_CTA_TEXT = "Learn More";
-        public static final Typeface TEXT_TYPEFACE = Typeface.create("Helvetica", Typeface.BOLD);
+        public static final Typeface TEXT_TYPEFACE = Typeface.create("Helvetica", Typeface.NORMAL);
         public static final int TEXT_COLOR = Color.WHITE;
         public static final Paint.Align TEXT_ALIGN = Paint.Align.CENTER;
     }
@@ -82,10 +84,20 @@
     public static class GradientStrip {
         public static final int GRADIENT_STRIP_HEIGHT_DIPS = 72;
         public static final int START_COLOR = Color.argb(102, 0, 0, 0);
-        public static final int END_COLOR = Color.argb(0, 255, 255, 255);
+        public static final int END_COLOR = Color.argb(0, 0, 0, 0);
     }
 
     public static class BlurredLastVideoFrame {
-        public static final int ALPHA = 128;
+        public static final int ALPHA = 100;
+    }
+
+    public static class PrivacyInfoIcon {
+        public static final int LEFT_MARGIN_DIPS = 12;
+        public static final int TOP_MARGIN_DIPS = 12;
+    }
+
+    public static class SocialActions {
+        public static final int ADS_BY_LEFT_MARGIN_DIPS = 6;
+        public static final int SOCIAL_ACTIONS_LEFT_MARGIN_DIPS = 16;
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/ProgressBarDrawable.java b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/ProgressBarDrawable.java
index 88fc74dc..7bfc5d0e 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/ProgressBarDrawable.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/ProgressBarDrawable.java
@@ -63,6 +63,10 @@ public void draw(final Canvas canvas) {
         }
     }
 
+    public void reset() {
+        mLastProgress = 0;
+    }
+
     public void setDurationAndSkipOffset(final int duration, final int skipOffset) {
         mDuration = duration;
         mSkipOffset = skipOffset;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/HttpClients.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/HttpClients.java
deleted file mode 100644
index fa2dd387..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/HttpClients.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.mopub.mobileads.util;
-
-import org.apache.http.client.HttpClient;
-
-public class HttpClients {
-    public static void safeShutdown(final HttpClient httpClient) {
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-                if (httpClient != null && httpClient.getConnectionManager() != null) {
-                    httpClient.getConnectionManager().shutdown();
-                }
-            }
-        }).start();
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/WebViews.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/WebViews.java
index 57eb0f0c..12170703 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/WebViews.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/WebViews.java
@@ -14,7 +14,7 @@
 
 public class WebViews {
     @TargetApi(VERSION_CODES.HONEYCOMB)
-    public static void onResume(@NonNull WebView webView) {
+    public static void onResume(@NonNull final WebView webView) {
         if (VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB) {
             webView.onResume();
             return;
@@ -29,7 +29,7 @@ public static void onResume(@NonNull WebView webView) {
     }
 
     @TargetApi(VERSION_CODES.HONEYCOMB)
-    public static void onPause(@NonNull WebView webView, boolean isFinishing) {
+    public static void onPause(@NonNull final WebView webView, boolean isFinishing) {
         // XXX
         // We need to call WebView#stopLoading and WebView#loadUrl here due to an Android
         // bug where the audio of an HTML5 video will continue to play after the activity has been
@@ -53,31 +53,36 @@ public static void onPause(@NonNull WebView webView, boolean isFinishing) {
         }
     }
 
-    public static void setDisableJSChromeClient(WebView webView) {
+    public static void setDisableJSChromeClient(@NonNull final WebView webView) {
         webView.setWebChromeClient(new WebChromeClient() {
             @Override
-            public boolean onJsAlert(WebView view, String url, String message, JsResult result) {
+            public boolean onJsAlert(@NonNull final WebView view, @NonNull final String url,
+                    @NonNull final String message, @NonNull final JsResult result) {
                 MoPubLog.d(message);
                 result.confirm();
                 return true;
             }
 
             @Override
-            public boolean onJsConfirm(WebView view, String url, String message, JsResult result) {
+            public boolean onJsConfirm(@NonNull final WebView view, @NonNull final String url,
+                    @NonNull final String message, @NonNull final JsResult result) {
                 MoPubLog.d(message);
                 result.confirm();
                 return true;
             }
 
             @Override
-            public boolean onJsPrompt(WebView view, String url, String message, String defaultValue, JsPromptResult result) {
+            public boolean onJsPrompt(@NonNull final WebView view, @NonNull final String url,
+                    @NonNull final String message, @NonNull final String defaultValue,
+                    @NonNull final JsPromptResult result) {
                 MoPubLog.d(message);
                 result.confirm();
                 return true;
             }
 
             @Override
-            public boolean onJsBeforeUnload(WebView view, String url, String message, JsResult result) {
+            public boolean onJsBeforeUnload(@NonNull final WebView view, @NonNull final String url,
+                    @NonNull final String message, @NonNull final JsResult result) {
                 MoPubLog.d(message);
                 result.confirm();
                 return true;
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidBridge.java b/mopub-sdk/src/main/java/com/mopub/mraid/MraidBridge.java
index bd907c1a..897b22a0 100644
--- a/mopub-sdk/src/main/java/com/mopub/mraid/MraidBridge.java
+++ b/mopub-sdk/src/main/java/com/mopub/mraid/MraidBridge.java
@@ -30,6 +30,7 @@
 import com.mopub.mobileads.resource.MraidJavascript;
 import com.mopub.mraid.MraidBridge.MraidWebView.OnVisibilityChangedListener;
 import com.mopub.mraid.MraidNativeCommandHandler.MraidCommandFailureListener;
+import com.mopub.network.Networking;
 
 import org.apache.http.NameValuePair;
 import org.apache.http.client.utils.URLEncodedUtils;
@@ -203,7 +204,7 @@ public void setContentHtml(@NonNull String htmlData) {
         }
 
         mHasLoaded = false;
-        mMraidWebView.loadDataWithBaseURL("http://" + Constants.HOST + "/",
+        mMraidWebView.loadDataWithBaseURL(Networking.getBaseUrlScheme() + "://" + Constants.HOST + "/",
                 htmlData, "text/html", "UTF-8", null);
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java b/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java
index c66ceb88..f8a41988 100644
--- a/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java
@@ -55,11 +55,11 @@
     private final AdReport mAdReport;
 
     public interface MraidListener {
-        public void onLoaded(View view);
-        public void onFailedToLoad();
-        public void onExpand();
-        public void onOpen();
-        public void onClose();
+        void onLoaded(View view);
+        void onFailedToLoad();
+        void onExpand();
+        void onOpen();
+        void onClose();
     }
 
     public interface UseCustomCloseListener {
@@ -446,8 +446,8 @@ private View getCurrentWebView() {
     }
 
     private boolean isInlineVideoAvailable() {
-        //noinspection SimplifiableIfStatement
         final Activity activity = mWeakActivity.get();
+        //noinspection SimplifiableIfStatement
         if (activity == null || getCurrentWebView() == null) {
             return false;
         }
@@ -1036,14 +1036,19 @@ void handleOpen(@NonNull final String url) {
             mMraidListener.onOpen();
         }
 
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(
-                        UrlAction.IGNORE_ABOUT_SCHEME,
-                        UrlAction.OPEN_NATIVE_BROWSER,
-                        UrlAction.OPEN_IN_APP_BROWSER,
-                        UrlAction.HANDLE_SHARE_TWEET,
-                        UrlAction.FOLLOW_DEEP_LINK_WITH_FALLBACK,
-                        UrlAction.FOLLOW_DEEP_LINK)
+        UrlHandler.Builder builder = new UrlHandler.Builder();
+
+        if (mAdReport != null) {
+            builder.withDspCreativeId(mAdReport.getDspCreativeId());
+        }
+
+        builder.withSupportedUrlActions(
+                UrlAction.IGNORE_ABOUT_SCHEME,
+                UrlAction.OPEN_NATIVE_BROWSER,
+                UrlAction.OPEN_IN_APP_BROWSER,
+                UrlAction.HANDLE_SHARE_TWEET,
+                UrlAction.FOLLOW_DEEP_LINK_WITH_FALLBACK,
+                UrlAction.FOLLOW_DEEP_LINK)
                 .build().handleUrl(mContext, url);
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidNativeCommandHandler.java b/mopub-sdk/src/main/java/com/mopub/mraid/MraidNativeCommandHandler.java
index bc0a2d82..b90b60ab 100644
--- a/mopub-sdk/src/main/java/com/mopub/mraid/MraidNativeCommandHandler.java
+++ b/mopub-sdk/src/main/java/com/mopub/mraid/MraidNativeCommandHandler.java
@@ -15,43 +15,42 @@
 import android.os.Environment;
 import android.provider.CalendarContract;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.v4.content.ContextCompat;
+import android.text.TextUtils;
 import android.view.View;
 import android.view.Window;
 import android.view.WindowManager;
 import android.widget.Toast;
 
+import com.mopub.common.MoPubHttpUrlConnection;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.AsyncTasks;
+import com.mopub.common.util.DeviceUtils;
 import com.mopub.common.util.Intents;
 import com.mopub.common.util.Streams;
 import com.mopub.common.util.Utils;
 import com.mopub.common.util.VersionCode;
-import com.mopub.mobileads.factories.HttpClientFactory;
-import com.mopub.network.HeaderUtils;
-
-import org.apache.http.Header;
-import org.apache.http.HttpResponse;
-import org.apache.http.client.HttpClient;
-import org.apache.http.client.methods.HttpGet;
 
+import java.io.BufferedInputStream;
 import java.io.File;
 import java.io.FileOutputStream;
-import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.net.HttpURLConnection;
 import java.net.URI;
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 
 import static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;
 import static android.os.Environment.MEDIA_MOUNTED;
-import static com.mopub.common.HttpClient.*;
 import static com.mopub.common.util.ResponseHeader.LOCATION;
 
 public class MraidNativeCommandHandler {
@@ -142,7 +141,7 @@ boolean isSmsAvailable(Context context) {
 
     public static boolean isStorePictureSupported(Context context) {
         return MEDIA_MOUNTED.equals(Environment.getExternalStorageState())
-                && context.checkCallingOrSelfPermission(WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
+                && DeviceUtils.isPermissionGranted(context, WRITE_EXTERNAL_STORAGE);
     }
 
     static boolean isCalendarAvailable(Context context) {
@@ -171,11 +170,11 @@ boolean isInlineVideoAvailable(@NonNull Activity activity, @NonNull View view) {
         // Hardware Acceleration
         // Hardware acceleration for the application and activity is enabled by default
         // in API >= 14 (Ice Cream Sandwich)
-        // http://developer.android.com/reference/android/R.attr.html#hardwareAccelerated
-        // http://developer.android.com/guide/topics/graphics/hardware-accel.html
+        // https://developer.android.com/reference/android/R.attr.html#hardwareAccelerated
+        // https://developer.android.com/guide/topics/graphics/hardware-accel.html
 
         // HTML5 Inline Video
-        // http://developer.android.com/about/versions/android-3.1.html
+        // https://developer.android.com/about/versions/android-3.1.html
 
         // Traverse up the View tree to determine if any views are being software rendered
         // You can only disable hardware acceleration at the view level by setting the layer type
@@ -200,7 +199,7 @@ boolean isInlineVideoAvailable(@NonNull Activity activity, @NonNull View view) {
         // Hardware acceleration can only be enabled for a window, not disabled
         // This flag is automatically set by the system if the android:hardwareAccelerated
         // XML attribute is set to true on an activity or on the application.
-        // http://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_HARDWARE_ACCELERATED
+        // https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_HARDWARE_ACCELERATED
         Window window = activity.getWindow();
         if (window != null) {
             if (Utils.bitMaskContainsFlag(window.getAttributes().flags,
@@ -439,10 +438,18 @@ public void onClick(DialogInterface dialog, int which) {
                 .show();
     }
 
-    private static class DownloadImageAsyncTask extends AsyncTask<String, Void, Boolean> {
+    /**
+     * Downloads an image from a remote URL and stores it in the user's photo gallery.
+     *
+     * This runs on the background thread, creates the appropriate photo gallery directory if not
+     * present, and uses the mime-type to append a file extension if necessary.
+     *
+     * The DownloadImageAsyncTaskListener parameter is notified of task success or failure.
+     */
+    @VisibleForTesting
+    static class DownloadImageAsyncTask extends AsyncTask<String, Void, Boolean> {
         interface DownloadImageAsyncTaskListener {
             void onSuccess();
-
             void onFailure();
         }
 
@@ -458,8 +465,9 @@ public DownloadImageAsyncTask(@NonNull final Context context,
 
         @Override
         protected Boolean doInBackground(@NonNull String[] params) {
-            Preconditions.checkState(params.length > 0);
-            Preconditions.checkNotNull(params[0]);
+            if (params == null || params.length == 0 || params[0] == null) {
+                return false;
+            }
 
             final File pictureStoragePath = getPictureStoragePath();
 
@@ -469,21 +477,20 @@ protected Boolean doInBackground(@NonNull String[] params) {
             final String uriString = params[0];
             URI uri = URI.create(uriString);
 
-            final HttpClient httpClient = HttpClientFactory.create();
-            final HttpGet httpGet = initializeHttpGet(uri.toString());
-
             InputStream pictureInputStream = null;
             OutputStream pictureOutputStream = null;
             try {
-                final HttpResponse httpResponse = httpClient.execute(httpGet);
-                pictureInputStream = httpResponse.getEntity().getContent();
+                final HttpURLConnection urlConnection =
+                        MoPubHttpUrlConnection.getHttpUrlConnection(uriString);
+                pictureInputStream = new BufferedInputStream(urlConnection.getInputStream());
 
-                final String redirectLocation = HeaderUtils.extractHeader(httpResponse, LOCATION);
-                if (redirectLocation != null) {
+                final String redirectLocation = urlConnection.getHeaderField(LOCATION.getKey());
+                if (!TextUtils.isEmpty(redirectLocation)) {
                     uri = URI.create(redirectLocation);
                 }
 
-                final String pictureFileName = getFileNameForUriAndHttpResponse(uri, httpResponse);
+                final String pictureFileName =
+                        getFileNameForUriAndHeaders(uri, urlConnection.getHeaderFields());
                 final File pictureFile = new File(pictureStoragePath, pictureFileName);
                 pictureOutputStream = new FileOutputStream(pictureFile);
                 Streams.copyContent(pictureInputStream, pictureOutputStream);
@@ -492,7 +499,7 @@ protected Boolean doInBackground(@NonNull String[] params) {
                 loadPictureIntoGalleryApp(pictureFileFullPath);
 
                 return true;
-            } catch (IOException e) {
+            } catch (Exception e) {
                 return false;
             } finally {
                 Streams.closeStream(pictureInputStream);
@@ -509,27 +516,36 @@ protected void onPostExecute(final Boolean success) {
             }
         }
 
-        private String getFileNameForUriAndHttpResponse(final URI uri, final HttpResponse response) {
+        @Nullable
+        private String getFileNameForUriAndHeaders(@NonNull final URI uri,
+                @Nullable final Map<String, List<String>> headers) {
+            Preconditions.checkNotNull(uri);
             final String path = uri.getPath();
 
-            if (path == null) {
+            if (path == null || headers == null) {
                 return null;
             }
-
             String filename = new File(path).getName();
 
-            Header header = response.getFirstHeader(MIME_TYPE_HEADER);
-            if (header != null) {
-                String[] fields = header.getValue().split(";");
-                for (final String field : fields) {
-                    String extension;
-                    if (field.contains("image/")) {
-                        extension = "." + field.split("/")[1];
-                        if (!filename.endsWith(extension)) {
-                            filename += extension;
-                        }
-                        break;
+            final List<String> mimeTypeHeaders = headers.get(MIME_TYPE_HEADER);
+            if (mimeTypeHeaders == null || mimeTypeHeaders.isEmpty()
+                    || mimeTypeHeaders.get(0) == null) {
+                return filename;
+            }
+
+            // Capture the first MIME_TYPE_HEADER (e.g. "text/plain; image/jpeg; image/gif") and
+            // parse out supported Content-Types (e.g. {"text/plain", "image/jpeg", "image/gif"}).
+            // If any of the Content-Types are of type "image", use the extension matching the first
+            // associated content subtype: add this extension to the filename if it does not already
+            // include it.
+            final String[] fields = mimeTypeHeaders.get(0).split(";");
+            for (final String field : fields) {
+                if (field.contains("image/")) {
+                    final String extension = "." + field.split("/")[1];
+                    if (!filename.endsWith(extension)) {
+                        filename += extension;
                     }
+                    break;
                 }
             }
 
@@ -548,6 +564,12 @@ private void loadPictureIntoGalleryApp(final String filename) {
             mediaScannerConnectionClient.setMediaScannerConnection(mediaScannerConnection);
             mediaScannerConnection.connect();
         }
+
+        @VisibleForTesting
+        @Deprecated
+        DownloadImageAsyncTaskListener getListener() {
+            return mListener;
+        }
     }
 
     private static class MoPubMediaScannerConnectionClient
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidVideoViewController.java b/mopub-sdk/src/main/java/com/mopub/mraid/MraidVideoViewController.java
index 8aea4da9..14976812 100644
--- a/mopub-sdk/src/main/java/com/mopub/mraid/MraidVideoViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mraid/MraidVideoViewController.java
@@ -6,7 +6,6 @@
 import android.media.MediaPlayer;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
 import android.view.View;
 import android.widget.ImageButton;
 import android.widget.RelativeLayout;
@@ -88,8 +87,10 @@ protected void onResume() {}
     protected void onSaveInstanceState(@NonNull Bundle outState) {}
 
     @Override
-    protected void onConfigurationChanged(@Nullable Configuration newConfig) {
-    }
+    protected void onConfigurationChanged(final Configuration newConfig) {}
+
+    @Override
+    protected void onBackPressed() {}
 
     private void createInterstitialCloseButton() {
         mCloseButton = new ImageButton(getContext());
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/AdRendererRegistry.java b/mopub-sdk/src/main/java/com/mopub/nativeads/AdRendererRegistry.java
new file mode 100644
index 00000000..daad0fb1
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/AdRendererRegistry.java
@@ -0,0 +1,90 @@
+package com.mopub.nativeads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.Preconditions;
+
+import java.util.ArrayList;
+
+/**
+ * A data structure providing methods to store and retrieve native ad renderers.
+ */
+public class AdRendererRegistry {
+
+    @NonNull private final ArrayList<MoPubAdRenderer> mMoPubAdRenderers;
+
+    public AdRendererRegistry() {
+        mMoPubAdRenderers = new ArrayList<MoPubAdRenderer>();
+    }
+
+    /**
+     * Registers an ad renderer for rendering a specific native ad format.
+     * Note that if multiple ad renderers support a specific native ad format, the first
+     * one registered will be used.
+     */
+    public void registerAdRenderer(@NonNull final MoPubAdRenderer moPubAdRenderer) {
+        mMoPubAdRenderers.add(moPubAdRenderer);
+    }
+
+    public int getAdRendererCount() {
+        return mMoPubAdRenderers.size();
+    }
+
+    @NonNull
+    public Iterable<MoPubAdRenderer> getRendererIterable() {
+        return mMoPubAdRenderers;
+    }
+
+    /**
+     * Returns the view type of the first registered ad renderer that supports rendering the
+     * {@link NativeAd} passed in. View types reserved for native ads are greater than or equal
+     * to 1, hence we add 1 when returning the view type.
+     *
+     * @param nativeAd The {@link NativeAd} to render.
+     * @return The integer representing the view type of the first renderer registered that
+     *         supports rendering the {@link NativeAd}.
+     */
+    public int getViewTypeForAd(@NonNull final NativeAd nativeAd) {
+        Preconditions.checkNotNull(nativeAd);
+        for (int i = 0; i < mMoPubAdRenderers.size(); ++i) {
+            if (nativeAd.getMoPubAdRenderer() == mMoPubAdRenderers.get(i)) {
+                return i + 1;
+            }
+        }
+        return 0;
+    }
+
+    /**
+     * Returns the first registered ad renderer that supports rendering the native ad passed in.
+     *
+     * @param nativeAd The native ad to render.
+     * @return The renderer that supports rendering the native ad.
+     */
+    @Nullable
+    public MoPubAdRenderer getRendererForAd(@NonNull final BaseNativeAd nativeAd) {
+        Preconditions.checkNotNull(nativeAd);
+        for (MoPubAdRenderer moPubAdRenderer : mMoPubAdRenderers) {
+            if (moPubAdRenderer.supports(nativeAd)) {
+                return moPubAdRenderer;
+            }
+        }
+        return null;
+    }
+
+    /**
+     * Returns the renderer corresponding to view type passed in. View types reserved for native
+     * ads are greater than or equal to 1, hence we subtract 1 when matching the renderer.
+     *
+     * @param viewType The integer representing the view type of renderer.
+     * @return The renderer mapped to the view type.
+     */
+    @Nullable
+    public MoPubAdRenderer getRendererForViewType(final int viewType) {
+        try {
+            return mMoPubAdRenderers.get(viewType - 1);
+        } catch (IndexOutOfBoundsException e) {
+            return null;
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/AdapterHelper.java b/mopub-sdk/src/main/java/com/mopub/nativeads/AdapterHelper.java
index 28bd5620..bc114f96 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/AdapterHelper.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/AdapterHelper.java
@@ -13,8 +13,6 @@
 
 import java.lang.ref.WeakReference;
 
-import static com.mopub.nativeads.MoPubNative.MoPubNativeListener;
-
 /**
  * @deprecated As of release 2.4, use {@link com.mopub.nativeads.MoPubAdAdapter} or
  * {@link com.mopub.nativeads.MoPubStreamAdPlacer} instead
@@ -43,9 +41,8 @@ public AdapterHelper(@NonNull final Context context, final int start, final int
     @NonNull
     public View getAdView(@Nullable final View convertView,
             @Nullable final ViewGroup parent,
-            @Nullable final NativeResponse nativeResponse,
-            @Nullable final ViewBinder viewBinder,
-            @Nullable @SuppressWarnings("unused") final MoPubNativeListener moPubNativeListener) {
+            @Nullable final NativeAd nativeAd,
+            @Nullable final ViewBinder viewBinder) {
         final Activity activity = mActivity.get();
         if (activity == null) {
             MoPubLog.w("Weak reference to Activity Context in"
@@ -57,7 +54,7 @@ public View getAdView(@Nullable final View convertView,
                 convertView,
                 parent,
                 activity,
-                nativeResponse,
+                nativeAd,
                 viewBinder
         );
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/BaseForwardingNativeAd.java b/mopub-sdk/src/main/java/com/mopub/nativeads/BaseForwardingNativeAd.java
deleted file mode 100644
index 4f463ba5..00000000
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/BaseForwardingNativeAd.java
+++ /dev/null
@@ -1,402 +0,0 @@
-package com.mopub.nativeads;
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.text.TextUtils;
-import android.view.View;
-
-import com.mopub.common.Preconditions.NoThrow;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.network.Networking;
-import com.mopub.volley.VolleyError;
-import com.mopub.volley.toolbox.ImageLoader;
-
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.concurrent.atomic.AtomicInteger;
-
-import static com.mopub.nativeads.CustomEventNative.CustomEventNativeListener;
-import static com.mopub.nativeads.CustomEventNative.ImageListener;
-
-abstract class BaseForwardingNativeAd implements NativeAdInterface {
-    private static final int IMPRESSION_MIN_PERCENTAGE_VIEWED = 50;
-
-    static interface NativeEventListener {
-        public void onAdImpressed();
-        public void onAdClicked();
-    }
-    @Nullable private NativeEventListener mNativeEventListener;
-
-    static final double MIN_STAR_RATING = 0;
-    static final double MAX_STAR_RATING = 5;
-
-    // Basic fields
-    @Nullable private String mMainImageUrl;
-    @Nullable private String mIconImageUrl;
-    @Nullable private String mClickDestinationUrl;
-    @Nullable private String mCallToAction;
-    @Nullable private String mTitle;
-    @Nullable private String mText;
-    @Nullable private Double mStarRating;
-
-    // Impression logistics
-    @NonNull private final Set<String> mImpressionTrackers;
-    private int mImpressionMinTimeViewed;
-
-    // Extras
-    @NonNull private final Map<String, Object> mExtras;
-
-    // Event Logistics
-    private boolean mIsOverridingClickTracker;
-    private boolean mIsOverridingImpressionTracker;
-
-    BaseForwardingNativeAd() {
-        mImpressionMinTimeViewed = 1000;
-
-        mImpressionTrackers = new HashSet<String>();
-        mExtras = new HashMap<String, Object>();
-    }
-
-    // Getters
-    /**
-     * Returns the String url corresponding to the ad's main image.
-     */
-    @Nullable
-    @Override
-    final public String getMainImageUrl() {
-        return mMainImageUrl;
-    }
-
-    /**
-     * Returns the String url corresponding to the ad's icon image.
-     */
-    @Nullable
-    @Override
-    final public String getIconImageUrl() {
-        return mIconImageUrl;
-    }
-
-    /**
-     * Returns a Set<String> of all impression trackers associated with this native ad. Note that
-     * network requests will automatically be made to each of these impression trackers when the
-     * native ad is display on screen. See {@link BaseForwardingNativeAd#getImpressionMinPercentageViewed}
-     * and {@link BaseForwardingNativeAd#getImpressionMinTimeViewed()} for relevant
-     * impression-tracking parameters.
-     */
-    @NonNull
-    @Override
-    final public Set<String> getImpressionTrackers() {
-        return new HashSet<String>(mImpressionTrackers);
-    }
-
-    /**
-     * Returns the String url that the device will attempt to resolve when the ad is clicked.
-     */
-    @Nullable
-    @Override
-    final public String getClickDestinationUrl() {
-        return mClickDestinationUrl;
-    }
-
-    /**
-     * Returns the Call To Action String (i.e. "Download" or "Learn More") associated with this ad.
-     */
-    @Nullable
-    @Override
-    final public String getCallToAction() {
-        return mCallToAction;
-    }
-
-    /**
-     * Returns the String corresponding to the ad's title.
-     */
-    @Nullable
-    @Override
-    final public String getTitle() {
-        return mTitle;
-    }
-
-    /**
-     * Returns the String corresponding to the ad's body text.
-     */
-    @Nullable
-    @Override
-    final public String getText() {
-        return mText;
-    }
-
-    /**
-     * For app install ads, this returns the associated star rating (on a 5 star scale) for the
-     * advertised app. Note that this method may return null if the star rating was either never set
-     * or invalid.
-     */
-    @Nullable
-    @Override
-    final public Double getStarRating() {
-        return mStarRating;
-    }
-
-    /**
-     * Returns the minimum viewable percentage of the ad that must be onscreen for it to be
-     * considered visible. See {@link BaseForwardingNativeAd#getImpressionMinTimeViewed()} for
-     * additional impression tracking considerations.
-     */
-    @Override
-    final public int getImpressionMinPercentageViewed() {
-        return IMPRESSION_MIN_PERCENTAGE_VIEWED;
-    }
-
-    /**
-     * Returns the minimum amount of time (in milliseconds) the ad that must be onscreen before an
-     * impression is recorded. See {@link BaseForwardingNativeAd#getImpressionMinPercentageViewed()}
-     * for additional impression tracking considerations.
-     */
-    @Override
-    final public int getImpressionMinTimeViewed() {
-        return mImpressionMinTimeViewed;
-    }
-
-    // Extras Getters
-    /**
-     * Given a particular String key, return the associated Object value from the ad's extras map.
-     * See {@link BaseForwardingNativeAd#getExtras()} for more information.
-     */
-    @Nullable
-    @Override
-    final public Object getExtra(@NonNull final String key) {
-        if (!NoThrow.checkNotNull(key, "getExtra key is not allowed to be null")) {
-            return null;
-        }
-        return mExtras.get(key);
-    }
-
-    /**
-     * Returns a copy of the extras map, reflecting additional ad content not reflected in any
-     * of the above hardcoded setters. This is particularly useful for passing down custom fields
-     * with MoPub's direct-sold native ads or from mediated networks that pass back additional
-     * fields.
-     */
-    @NonNull
-    @Override
-    final public Map<String, Object> getExtras() {
-        return new HashMap<String, Object>(mExtras);
-    }
-
-    /**
-     * Returns {@code true} if the native ad is using a network impression tracker. If set to
-     * true, the network must expose a callback that calls into
-     * {@link BaseForwardingNativeAd#notifyAdImpressed()} in order for MoPub to fire its impression
-     * tracker at the appropriate time.
-     */
-    @Override
-    final public boolean isOverridingImpressionTracker() {
-        return mIsOverridingImpressionTracker;
-    }
-
-    /**
-     * Returns {@code true} if the native ad is using a network click tracker. If set to true, the
-     * network must expose a callback that calls into
-     * {@link BaseForwardingNativeAd#notifyAdClicked()} in order for MoPub to fire its click tracker
-     * at the appropriate time.
-     */
-    @Override
-    final public boolean isOverridingClickTracker() {
-        return mIsOverridingClickTracker;
-    }
-
-    // Setters
-    @Override
-    public final void setNativeEventListener(
-            @Nullable final NativeEventListener nativeEventListener) {
-        mNativeEventListener = nativeEventListener;
-    }
-
-    final void setMainImageUrl(@Nullable final String mainImageUrl) {
-        mMainImageUrl = mainImageUrl;
-    }
-
-    final void setIconImageUrl(@Nullable final String iconImageUrl) {
-        mIconImageUrl = iconImageUrl;
-    }
-
-    final void setClickDestinationUrl(@Nullable final String clickDestinationUrl) {
-        mClickDestinationUrl = clickDestinationUrl;
-    }
-
-    final void setCallToAction(@Nullable final String callToAction) {
-        mCallToAction = callToAction;
-    }
-
-    final void setTitle(@Nullable final String title) {
-        mTitle = title;
-    }
-
-    final void setText(@Nullable final String text) {
-        mText = text;
-    }
-
-    final void setStarRating(@Nullable final Double starRating) {
-        if (starRating == null) {
-            mStarRating = null;
-        } else if (starRating >= MIN_STAR_RATING && starRating <= MAX_STAR_RATING) {
-            mStarRating = starRating;
-        } else {
-            MoPubLog.d("Ignoring attempt to set invalid star rating (" + starRating + "). Must be "
-                    + "between " + MIN_STAR_RATING + " and " + MAX_STAR_RATING + ".");
-        }
-    }
-
-    final void addExtra(@NonNull final String key, @Nullable final Object value) {
-        if (!NoThrow.checkNotNull(key, "addExtra key is not allowed to be null")) {
-            return;
-        }
-        mExtras.put(key, value);
-    }
-
-    final void addImpressionTracker(@NonNull final String url) {
-        if (!NoThrow.checkNotNull(url, "impressionTracker url is not allowed to be null")) {
-            return;
-        }
-        mImpressionTrackers.add(url);
-    }
-
-    final void setImpressionMinTimeViewed(final int impressionMinTimeViewed) {
-        if (impressionMinTimeViewed >= 0) {
-            mImpressionMinTimeViewed = impressionMinTimeViewed;
-        }
-    }
-
-    final void setOverridingImpressionTracker(final boolean isOverridingImpressionTracker) {
-        mIsOverridingImpressionTracker = isOverridingImpressionTracker;
-    }
-
-    final void setOverridingClickTracker(final boolean isOverridingClickTracker) {
-        mIsOverridingClickTracker = isOverridingClickTracker;
-    }
-
-    // Event Handlers
-    /**
-     * Your base native ad subclass should implement this method if the network requires the developer
-     * to prepare state for recording an impression or click before a view is rendered to screen.
-     *
-     * This method is optional.
-     */
-    @Override
-    public void prepare(@Nullable final View view) { }
-
-    /**
-     * Your base native ad subclass should implement this method if the network requires the developer
-     * to explicitly record an impression of a view rendered to screen.
-     *
-     * This method is optional.
-     */
-    @Override
-    public void recordImpression() { }
-
-    /**
-     * Your base native ad subclass should implement this method if the network requires the developer
-     * to explicitly handle click events of views rendered to screen.
-     *
-     * This method is optional.
-     */
-    @Override
-    public void handleClick(@Nullable final View view) { }
-
-    /**
-     * Your base native ad subclass should implement this method if the network requires the developer
-     * to reset or clear state of the native ad after it goes off screen and before it is rendered
-     * again.
-     *
-     * This method is optional.
-     */
-    @Override
-    public void clear(@Nullable final View view) { }
-
-    /**
-     * Your base native ad subclass should implement this method if the network requires the developer
-     * to destroy or cleanup their native ad when they are finished with it.
-     *
-     * This method is optional.
-     */
-    @Override
-    public void destroy() { }
-
-    // Event Notifiers
-    /**
-     * Notifies the SDK that the ad has been shown. This will cause the SDK to record an impression
-     * for the ad. This is meant for network SDKs that expose their own impression tracking
-     * callbacks, and requires that you call
-     * {@link BaseForwardingNativeAd#setOverridingImpressionTracker} from your implementation of
-     * {@link BaseForwardingNativeAd#prepare}.
-     */
-    protected final void notifyAdImpressed() {
-        if (mNativeEventListener != null) {
-            mNativeEventListener.onAdImpressed();
-        }
-    }
-
-    /**
-     * Notifies the SDK that the user has clicked the ad. This will cause the SDK to record an
-     * click for the ad. This is meant for network SDKs that expose their own click
-     * tracking callbacks, and requires that you call
-     * {@link BaseForwardingNativeAd#setOverridingClickTracker} from your implementation of
-     * {@link BaseForwardingNativeAd#prepare}.
-     */
-    protected final void notifyAdClicked() {
-        if (mNativeEventListener != null) {
-            mNativeEventListener.onAdClicked();
-        }
-    }
-
-    /**
-     * Pre caches the given set of image urls. We recommend using this method to warm the image
-     * cache before calling {@link CustomEventNativeListener#onNativeAdLoaded}. Doing so will
-     * force images to cache before displaying the ad.
-     */
-    static void preCacheImages(@NonNull final Context context,
-            @NonNull final List<String> imageUrls,
-            @NonNull final ImageListener imageListener) {
-        final ImageLoader imageLoader = Networking.getImageLoader(context);
-        // These Atomics are only accessed on the main thread.
-        // We use Atomics here so we can change their values while keeping a reference for the inner class.
-        final AtomicInteger imageCounter = new AtomicInteger(imageUrls.size());
-        final AtomicBoolean anyFailures = new AtomicBoolean(false);
-        ImageLoader.ImageListener volleyImageListener = new ImageLoader.ImageListener() {
-            @Override
-            public void onResponse(final ImageLoader.ImageContainer imageContainer, final boolean isImmediate) {
-                // Image Loader returns a "default" response immediately. We want to ignore this
-                // unless the image is already cached.
-                if (imageContainer.getBitmap() != null) {
-                    final int count = imageCounter.decrementAndGet();
-                    if (count == 0 && !anyFailures.get()) {
-                        imageListener.onImagesCached();
-                    }
-                }
-            }
-
-            @Override
-            public void onErrorResponse(final VolleyError volleyError) {
-                MoPubLog.d("Failed to download a native ads image:", volleyError);
-                boolean anyPreviousErrors = anyFailures.getAndSet(true);
-                imageCounter.decrementAndGet();
-                if (!anyPreviousErrors) {
-                    imageListener.onImagesFailedToCache(NativeErrorCode.IMAGE_DOWNLOAD_FAILURE);
-                }
-            }
-        };
-
-        for (String url : imageUrls) {
-            if (TextUtils.isEmpty(url)) {
-                anyFailures.set(true);
-                imageListener.onImagesFailedToCache(NativeErrorCode.IMAGE_DOWNLOAD_FAILURE);
-                return;
-            }
-            imageLoader.get(url, volleyImageListener);
-        }
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/BaseNativeAd.java b/mopub-sdk/src/main/java/com/mopub/nativeads/BaseNativeAd.java
new file mode 100644
index 00000000..90b53bcd
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/BaseNativeAd.java
@@ -0,0 +1,158 @@
+package com.mopub.nativeads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.View;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.logging.MoPubLog;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+
+import java.util.HashSet;
+import java.util.Set;
+
+/**
+ * This is the base class for implementations of all native ad formats. When implementing a new
+ * native ad format, be sure to also implement and register an appropriate {@link MoPubAdRenderer}
+ * that supports the format.
+ */
+public abstract class BaseNativeAd {
+
+    public interface NativeEventListener {
+        void onAdImpressed();
+        void onAdClicked();
+    }
+
+    @NonNull final private Set<String> mImpressionTrackers;
+    @NonNull final private Set<String> mClickTrackers;
+    @Nullable private NativeEventListener mNativeEventListener;
+
+    protected BaseNativeAd() {
+        mImpressionTrackers = new HashSet<String>();
+        mClickTrackers = new HashSet<String>();
+    }
+
+    // Lifecycle Handlers
+    /**
+     * Your {@link BaseNativeAd} subclass should implement this method if the network requires the developer
+     * to prepare state for recording an impression or click before a view is rendered to screen.
+     *
+     * This method is optional.
+     */
+    public abstract void prepare(@NonNull final View view);
+
+    /**
+     * Your {@link BaseNativeAd} subclass should implement this method if the network requires the developer
+     * to reset or clear state of the native ad after it goes off screen and before it is rendered
+     * again.
+     *
+     * This method is optional.
+     */
+    public abstract void clear(@NonNull final View view);
+
+    /**
+     * Your {@link BaseNativeAd} subclass should implement this method if the network requires the developer
+     * to destroy or cleanup their native ad when they are permanently finished with it.
+     *
+     * This method is optional.
+     */
+    public abstract void destroy();
+
+    public void setNativeEventListener(
+            @Nullable final NativeEventListener nativeEventListener) {
+        mNativeEventListener = nativeEventListener;
+    }
+
+    // Event Notifiers
+    /**
+     * Notifies the SDK that the ad has been shown. This will cause the SDK to record an impression
+     * for the ad. This method must be called when the native ad is impressed in order for the
+     * MoPub impression trackers to fire correctly.
+     */
+    protected final void notifyAdImpressed() {
+        if (mNativeEventListener != null) {
+            mNativeEventListener.onAdImpressed();
+        }
+    }
+
+    /**
+     * Notifies the SDK that the user has clicked the ad. This will cause the SDK to record an
+     * click for the ad. This method must be called when the native ad is clicked in order for the
+     * MoPub click trackers to fire correctly.
+     */
+    protected final void notifyAdClicked() {
+        if (mNativeEventListener != null) {
+            mNativeEventListener.onAdClicked();
+        }
+    }
+
+    final protected void addImpressionTrackers(final Object impressionTrackers) throws ClassCastException {
+        if (!(impressionTrackers instanceof JSONArray)) {
+            throw new ClassCastException("Expected impression trackers of type JSONArray.");
+        }
+
+        final JSONArray trackers = (JSONArray) impressionTrackers;
+        for (int i = 0; i < trackers.length(); i++) {
+            try {
+                addImpressionTracker(trackers.getString(i));
+            } catch (JSONException e) {
+                // This will only occur if we access a non-existent index in JSONArray.
+                MoPubLog.d("Unable to parse impression trackers.");
+            }
+        }
+    }
+
+    final protected void addClickTrackers(final Object clickTrackers) throws ClassCastException {
+        if (!(clickTrackers instanceof JSONArray)) {
+            throw new ClassCastException("Expected click trackers of type JSONArray.");
+        }
+
+        final JSONArray trackers = (JSONArray) clickTrackers;
+        for (int i = 0; i < trackers.length(); i++) {
+            try {
+                addClickTracker(trackers.getString(i));
+            } catch (JSONException e) {
+                // This will only occur if we access a non-existent index in JSONArray.
+                MoPubLog.d("Unable to parse click trackers.");
+            }
+        }
+    }
+
+    final public void addImpressionTracker(@NonNull final String url) {
+        if (!Preconditions.NoThrow.checkNotNull(url, "impressionTracker url is not allowed to be null")) {
+            return;
+        }
+        mImpressionTrackers.add(url);
+    }
+
+    final public void addClickTracker(@NonNull final String url) {
+        if (!Preconditions.NoThrow.checkNotNull(url, "clickTracker url is not allowed to be null")) {
+            return;
+        }
+        mClickTrackers.add(url);
+    }
+
+    /**
+     * Returns a Set<String> of all impression trackers associated with this native ad. Note that
+     * network requests will automatically be made to each of these impression trackers when the
+     * native ad is display on screen. See {@link StaticNativeAd#getImpressionMinPercentageViewed}
+     * and {@link StaticNativeAd#getImpressionMinTimeViewed()} for relevant
+     * impression-tracking parameters.
+     */
+    @NonNull
+    Set<String> getImpressionTrackers() {
+        return new HashSet<String>(mImpressionTrackers);
+    }
+
+    /**
+     * Returns a Set<String> of all click trackers associated with this native ad. Note that
+     * network requests will automatically be made to each of these click trackers when the
+     * native ad is clicked.
+     */
+    @NonNull
+    Set<String> getClickTrackers() {
+        return new HashSet<String>(mClickTrackers);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ClickInterface.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ClickInterface.java
new file mode 100644
index 00000000..84b36260
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ClickInterface.java
@@ -0,0 +1,11 @@
+package com.mopub.nativeads;
+
+import android.view.View;
+
+/**
+ * This interface should be implemented by native ad formats that want to make use of the
+ * {@link NativeClickHandler} to track clicks and open click destinations.
+ */
+public interface ClickInterface {
+    void handleClick(View view);
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java
index 8893bd1f..5f8a1d35 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java
@@ -1,6 +1,6 @@
 package com.mopub.nativeads;
 
-import android.content.Context;
+import android.app.Activity;
 import android.support.annotation.NonNull;
 
 import java.util.Map;
@@ -20,47 +20,30 @@
      * native ad from a third-party ad network, or execute any application code. It must also notify
      * the provided {@link CustomEventNativeListener} Object of certain lifecycle events.
      *
-     * @param context The activity context.
+     * @param activity The activity.
      * @param customEventNativeListener An Object that must be notified of certain lifecycle
      * events.
      * @param localExtras A Map containing additional custom data that is set within your
-     * application by calling {@link MoPubNative#setLocalExtras(Map<String, Object>)}. Note that the
-     * localExtras Map is a copy of the Map supplied to {@link MoPubNative#setLocalExtras(Map<String,
-     * Object>)}.
+     * application by calling {@link MoPubNative#setLocalExtras(Map)}. Note that the
+     * localExtras Map is a copy of the Map supplied to {@link MoPubNative#setLocalExtras(Map)}.
      * @param serverExtras A Map containing additional custom data configurable on the MoPub website
      * that you want to associate with a given custom event request. This data may be used to pass
      * dynamic information, such as publisher IDs, without changes in application code.
      */
-    protected abstract void loadNativeAd(@NonNull final Context context,
+    protected abstract void loadNativeAd(@NonNull final Activity activity,
             @NonNull final CustomEventNativeListener customEventNativeListener,
             @NonNull final Map<String, Object> localExtras,
             @NonNull final Map<String, String> serverExtras);
 
-    public interface ImageListener {
-        /**
-         * Called when images are successfully cached. If you haven't already called {@link
-         * CustomEventNativeListener#onNativeAdLoaded}, you should typically do so now.
-         */
-        void onImagesCached();
-
-        /**
-         * Called when images failed to cache. You should typically call {@link
-         * CustomEventNativeListener#onNativeAdFailed} from this callback.
-         *
-         * @param errorCode An enum value with the relevant error message.
-         */
-        void onImagesFailedToCache(NativeErrorCode errorCode);
-    }
-
     public interface CustomEventNativeListener {
         /**
          * Your custom event subclass must call this method when it successfully loads a native ad.
          * Failure to do so will disrupt the mediation waterfall and cause future ad requests to
          * stall.
          *
-         * @param nativeAd The ad that was succesfully loaded.
+         * @param nativeAd The ad that was successfully loaded.
          */
-        void onNativeAdLoaded(NativeAdInterface nativeAd);
+        void onNativeAdLoaded(BaseNativeAd nativeAd);
 
         /**
          * Your custom event subclass must call this method when it fails to load a native ad.
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
index b695033b..c84b77b7 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
@@ -1,9 +1,10 @@
 package com.mopub.nativeads;
 
-import android.content.Context;
+import android.app.Activity;
 import android.support.annotation.NonNull;
 
 import com.mopub.common.DataKeys;
+import com.mopub.common.event.EventDetails;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.nativeads.factories.CustomEventNativeFactory;
 import com.mopub.network.AdResponse;
@@ -13,13 +14,15 @@
 final class CustomEventNativeAdapter {
     private CustomEventNativeAdapter() {}
 
-    public static void loadNativeAd(@NonNull final Context context,
+    public static void loadNativeAd(@NonNull final Activity activity,
             @NonNull final Map<String, Object> localExtras,
             @NonNull final AdResponse adResponse,
             @NonNull final CustomEventNative.CustomEventNativeListener customEventNativeListener) {
 
         final CustomEventNative customEventNative;
         String customEventNativeClassName = adResponse.getCustomEventClassName();
+
+        MoPubLog.d("Attempting to invoke custom event: " + customEventNativeClassName);
         try {
             customEventNative = CustomEventNativeFactory.create(customEventNativeClassName);
         } catch (Exception e) {
@@ -31,11 +34,18 @@ public static void loadNativeAd(@NonNull final Context context,
             localExtras.put(DataKeys.JSON_BODY_KEY, adResponse.getJsonBody());
         }
 
+        final EventDetails eventDetails = adResponse.getEventDetails();
+        if (eventDetails != null) {
+            localExtras.put(DataKeys.EVENT_DETAILS, eventDetails);
+        }
+
+        localExtras.put(DataKeys.CLICK_TRACKING_URL_KEY, adResponse.getClickTrackingUrl());
+
         // Custom event classes can be developed by any third party and may not be tested.
         // We catch all exceptions here to prevent crashes from untested code.
         try {
             customEventNative.loadNativeAd(
-                    context,
+                    activity,
                     customEventNativeListener,
                     localExtras,
                     adResponse.getServerExtras()
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java b/mopub-sdk/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java
new file mode 100644
index 00000000..069bf59a
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java
@@ -0,0 +1,493 @@
+package com.mopub.nativeads;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.google.android.exoplayer.upstream.DataSource;
+import com.google.android.exoplayer.upstream.DataSpec;
+import com.google.android.exoplayer.upstream.DefaultHttpDataSource;
+import com.google.android.exoplayer.upstream.HttpDataSource;
+import com.mopub.common.CacheService;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.event.BaseEvent;
+import com.mopub.common.event.Event;
+import com.mopub.common.event.EventDetails;
+import com.mopub.common.event.MoPubEvents;
+import com.mopub.common.logging.MoPubLog;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.IOException;
+import java.util.TreeSet;
+
+/**
+ * This data source caches data on disk as it is read from an {@link HttpDataSource}. This expects
+ * relatively large files, and this will segment the files. If any segment becomes invalid, the
+ * entire file is effectively cleared from the cache.
+ */
+public class HttpDiskCompositeDataSource implements DataSource {
+
+    // Keys are prefixed since URLs can end basically however they want, and key names could
+    // potentially be part of the URL and get the cache confused.
+    @VisibleForTesting static final String INTERVALS_KEY_PREFIX = "intervals-sorted-";
+    @VisibleForTesting static final String EXPECTED_FILE_SIZE_KEY_PREFIX = "expectedsize-";
+
+    // These are used to serialize/deserialize the intervals list
+    private static final String START = "start";
+    private static final String LENGTH = "length";
+
+    /**
+     * The constant used in {@link DefaultHttpDataSource} is private even though this is a pretty
+     * standard constant used in Exoplayer. This represents the constant that tells the HTTP
+     * connection to get all remaining bytes available.
+     */
+    @VisibleForTesting static final int LENGTH_UNBOUNDED = -1;
+
+    /**
+     * HTTP response 416 means trying to request for bytes that the server does not have.
+     */
+    private static final int HTTP_RESPONSE_REQUESTED_RANGE_NOT_SATISFIABLE = 416;
+
+    /**
+     * The current block size is arbitrarily set at 500KiB. This has to be bigger than the biggest
+     * read request from the consumer of this class's read method. This also has to be reasonably
+     * small to accommodate devices that don't have a lot of memory to work with.
+     */
+    @VisibleForTesting static final int BLOCK_SIZE = 500 * 1024;
+
+    /**
+     * The network data source
+     */
+    @NonNull private final HttpDataSource mHttpDataSource;
+
+    /**
+     * Bytes from disk. This is the in-memory working copy.
+     */
+    @Nullable private byte[] mCachedBytes;
+
+    /**
+     * Base key of the cache. This is the URI of the {@link DataSpec}.
+     */
+    @Nullable private String mKey;
+
+    /**
+     * This is the set of intervals that the cache thinks are valid. Intervals have a start and a
+     * length.
+     */
+    @NonNull private final TreeSet<IntInterval> mIntervals;
+
+    /**
+     * The absolute index of the first byte that is currently being requested.
+     */
+    private int mStartInFile;
+
+    /**
+     * The total number of bytes read in the current block. This indicates the current cursor
+     * position. mDataBlockOffset plus mStartInFile is the cursor position for the file.
+     * mDataBlockOffset plus mStartInDataBlock is the cursor position for the current data block.
+     */
+    private int mDataBlockOffset;
+
+    /**
+     * Which segment of the file the current block is on.
+     */
+    private int mSegment;
+
+    /**
+     * The index of the physical byte array for the current block.
+     */
+    private int mStartInDataBlock;
+
+    /**
+     * Whether or not this has an {@link HttpDataSource} that is already open.
+     */
+    private boolean mIsHttpSourceOpen;
+
+    /**
+     * The expected size of the entire file.
+     */
+    @Nullable private Integer mExpectedFileLength = null;
+
+    /**
+     * Data needed to open another {@link HttpDataSource}.
+     */
+    @Nullable private DataSpec mDataSpec;
+
+    /**
+     * Whether or not the cache has been written to during the current session.
+     */
+    private boolean mIsDirty;
+
+    /**
+     * Used to store metadata around event logging.
+     */
+    @Nullable private final EventDetails mEventDetails;
+
+    /**
+     * Whether or not the event for starting the download has already been fired.
+     */
+    private boolean mHasLoggedDownloadStart;
+
+    public HttpDiskCompositeDataSource(@NonNull final Context context,
+            @NonNull final String userAgent, @Nullable final EventDetails eventDetails) {
+        this(context, userAgent, eventDetails,
+                new DefaultHttpDataSource(userAgent, null, null,
+                        DefaultHttpDataSource.DEFAULT_CONNECT_TIMEOUT_MILLIS,
+                        DefaultHttpDataSource.DEFAULT_READ_TIMEOUT_MILLIS,
+                        false));
+    }
+
+    @VisibleForTesting
+    HttpDiskCompositeDataSource(@NonNull final Context context,
+            @NonNull final String userAgent, @Nullable final EventDetails eventDetails,
+            @NonNull final HttpDataSource httpDataSource) {
+        mHttpDataSource = httpDataSource;
+        CacheService.initialize(context);
+        mIntervals = new TreeSet<IntInterval>();
+        mEventDetails = eventDetails;
+    }
+
+    @Override
+    public long open(@NonNull final DataSpec dataSpec) throws IOException {
+        Preconditions.checkNotNull(dataSpec);
+        if (dataSpec.uri == null) {
+            return LENGTH_UNBOUNDED;
+        }
+
+        mIsDirty = false;
+
+        mDataSpec = dataSpec;
+        mKey = dataSpec.uri.toString();
+        if (mKey == null) {
+            return LENGTH_UNBOUNDED;
+        }
+        mStartInFile = (int) dataSpec.absoluteStreamPosition;
+        mSegment = mStartInFile / BLOCK_SIZE;
+        mCachedBytes = CacheService.getFromDiskCache(mSegment + mKey);
+        mStartInDataBlock = mStartInFile % BLOCK_SIZE;
+        mDataBlockOffset = 0;
+
+        mExpectedFileLength = getExpectedFileLengthFromDisk(mKey);
+
+        populateIntervalsFromDisk(mKey, mIntervals);
+
+        int mDataRequestStartPoint = getFirstContiguousPointAfter(mStartInFile, mIntervals);
+
+        // Cache miss
+        if (mCachedBytes == null) {
+            mCachedBytes = new byte[BLOCK_SIZE];
+
+            // It's not in the cache, but we expected it to be there.
+            if (mDataRequestStartPoint > mStartInFile) {
+                MoPubLog.d("Cache segment " + mSegment + " was evicted. Invalidating cache");
+                mIntervals.clear();
+                mDataRequestStartPoint = (int) dataSpec.absoluteStreamPosition;
+            }
+        }
+
+        long size;
+        // If we think there are more bytes left to read from the network
+        if (mExpectedFileLength == null || mDataRequestStartPoint != mExpectedFileLength) {
+            final long lengthToUse;
+            if (mDataSpec.length == LENGTH_UNBOUNDED) {
+                lengthToUse = LENGTH_UNBOUNDED;
+            } else {
+                // Make sure to take into account that the start point is at a later point
+                lengthToUse = mDataSpec.length - (mDataRequestStartPoint - mStartInFile);
+            }
+            // Modify the data spec to include the new params
+            DataSpec modifiedDataSpec = new DataSpec(dataSpec.uri, mDataRequestStartPoint,
+                    lengthToUse, dataSpec.key, dataSpec.flags);
+
+            try {
+                size = mHttpDataSource.open(modifiedDataSpec);
+                if (mExpectedFileLength == null && lengthToUse == LENGTH_UNBOUNDED) {
+                    // If we don't have an expected file length set, set it if we requested the
+                    // rest of the file.
+                    mExpectedFileLength = (int) (mStartInFile + size);
+                    CacheService.putToDiskCache(EXPECTED_FILE_SIZE_KEY_PREFIX + mKey,
+                            String.valueOf(mExpectedFileLength).getBytes());
+                }
+                mIsHttpSourceOpen = true;
+                if (!mHasLoggedDownloadStart) {
+                    MoPubEvents.log(Event.createEventFromDetails(
+                            BaseEvent.Name.DOWNLOAD_START,
+                            BaseEvent.Category.NATIVE_VIDEO,
+                            BaseEvent.SamplingRate.NATIVE_VIDEO,
+                            mEventDetails));
+                    mHasLoggedDownloadStart = true;
+                }
+            } catch (HttpDataSource.InvalidResponseCodeException e) {
+                // This shouldn't happen anymore, but if we accidentally requested too many bytes
+                // because we already had the bytes before that point, then it's still fine.
+                if (e.responseCode == HTTP_RESPONSE_REQUESTED_RANGE_NOT_SATISFIABLE) {
+                    size = mExpectedFileLength == null ? mDataRequestStartPoint - mStartInFile : mExpectedFileLength - mStartInFile;
+                } else {
+                    throw e;
+                }
+                mIsHttpSourceOpen = false;
+            }
+        } else {
+            size = dataSpec.length == LENGTH_UNBOUNDED ? mExpectedFileLength - mStartInFile : dataSpec.length;
+        }
+        return size;
+    }
+
+    private static void populateIntervalsFromDisk(@NonNull final String key,
+            @NonNull final TreeSet<IntInterval> intervals) {
+        Preconditions.checkNotNull(key);
+        Preconditions.checkNotNull(intervals);
+
+        intervals.clear();
+        byte[] intervalsFromDisk = CacheService.getFromDiskCache(INTERVALS_KEY_PREFIX + key);
+        if (intervalsFromDisk != null) {
+            String intervalsStringData = new String(intervalsFromDisk);
+            try {
+                JSONArray jsonIntervalArray = new JSONArray(intervalsStringData);
+                for (int i = 0; i < jsonIntervalArray.length(); i++) {
+                    JSONObject jsonInterval = new JSONObject((String) jsonIntervalArray.get(i));
+                    intervals.add(new IntInterval(jsonInterval.getInt(START),
+                            jsonInterval.getInt(LENGTH)));
+                }
+            } catch (JSONException e) {
+                MoPubLog.d("clearing cache since invalid json intervals found", e);
+                intervals.clear();
+            } catch (ClassCastException e) {
+                MoPubLog.d("clearing cache since unable to read json data");
+                intervals.clear();
+            }
+        }
+    }
+
+    private static Integer getExpectedFileLengthFromDisk(@NonNull final String key) {
+        Preconditions.checkNotNull(key);
+
+        byte[] maxSizeByteArray = CacheService.getFromDiskCache(
+                EXPECTED_FILE_SIZE_KEY_PREFIX + key);
+        if (maxSizeByteArray != null) {
+            try {
+                return Integer.parseInt(new String(maxSizeByteArray));
+            } catch (NumberFormatException e) {
+                return null;
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public void close() throws IOException {
+        if (!TextUtils.isEmpty(mKey) && mCachedBytes != null) {
+            CacheService.putToDiskCache(mSegment + mKey, mCachedBytes);
+            addNewInterval(mIntervals, mStartInFile, mDataBlockOffset);
+            writeIntervalsToDisk(mIntervals, mKey);
+            if (mIsDirty && mExpectedFileLength != null && getFirstContiguousPointAfter(
+                    0, mIntervals) == mExpectedFileLength) {
+                MoPubEvents.log(Event.createEventFromDetails(
+                        BaseEvent.Name.DOWNLOAD_FINISHED,
+                        BaseEvent.Category.NATIVE_VIDEO,
+                        BaseEvent.SamplingRate.NATIVE_VIDEO,
+                        mEventDetails));
+            }
+        }
+        mCachedBytes = null;
+
+        mHttpDataSource.close();
+        mIsHttpSourceOpen = false;
+        mStartInFile = 0;
+        mDataBlockOffset = 0;
+        mStartInDataBlock = 0;
+        mExpectedFileLength = null;
+        mIsDirty = false;
+    }
+
+    private static void writeIntervalsToDisk(@NonNull final TreeSet<IntInterval> intervals,
+            @NonNull final String key) {
+        Preconditions.checkNotNull(intervals);
+        Preconditions.checkNotNull(key);
+
+        final JSONArray jsonIntervals = new JSONArray();
+        for (IntInterval interval : intervals) {
+            jsonIntervals.put(interval);
+        }
+        CacheService.putToDiskCache(INTERVALS_KEY_PREFIX + key,
+                jsonIntervals.toString().getBytes());
+    }
+
+    @Override
+    public int read(final byte[] buffer, final int offset, final int length) throws IOException {
+        if (length > BLOCK_SIZE) {
+            MoPubLog.d(
+                    "Reading more than the block size (" + BLOCK_SIZE + " bytes) at once is not possible. length = " + length);
+            return -1;
+        }
+        if (mDataSpec == null) {
+            MoPubLog.d("Unable to read from data source when no spec provided");
+            return -1;
+        }
+        if (mCachedBytes == null) {
+            MoPubLog.d("No cache set up. Call open before read.");
+            return -1;
+        }
+
+        // Number of bytes available in the current block
+        final int bytesAvailableInCurrentBlock = BLOCK_SIZE - mStartInDataBlock - mDataBlockOffset;
+
+        // The position of the next expected break (could be end of file)
+        final int farthestContiguousPoint = getFirstContiguousPointAfter(
+                mStartInFile + mDataBlockOffset, mIntervals);
+        // Amount of data expected to be in the cache
+        final int validBytesLeftInCache = farthestContiguousPoint - mStartInFile - mDataBlockOffset;
+        // The number of expected bytes to be able to read from the cache
+        final int bytesToRead = Math.min(validBytesLeftInCache, length);
+        // To keep track of actual bytes read from the cache
+        int bytesReadFromDisk = 0;
+        // If the data is available at least partially on disk
+        if (areBytesAvailableInCache(farthestContiguousPoint, mStartInFile, mDataBlockOffset)) {
+            // The case of when all of the bytes are available in the current block
+            if (bytesToRead <= bytesAvailableInCurrentBlock) {
+                System.arraycopy(mCachedBytes, mStartInDataBlock + mDataBlockOffset, buffer, offset,
+                        bytesToRead);
+                mDataBlockOffset += bytesToRead;
+                bytesReadFromDisk += bytesToRead;
+            } else {
+                // Read all of the available bytes in the current block
+                System.arraycopy(mCachedBytes, mStartInDataBlock + mDataBlockOffset, buffer, offset,
+                        bytesAvailableInCurrentBlock);
+                mDataBlockOffset += bytesAvailableInCurrentBlock;
+                bytesReadFromDisk += bytesAvailableInCurrentBlock;
+
+                // Flush the cache
+                writeCacheToDiskAndClearVariables();
+
+                // Read in the next segment from disk
+                mCachedBytes = CacheService.getFromDiskCache(mSegment + mKey);
+                if (mCachedBytes == null) {
+                    // If there is a mismatch between expected bytes available in the cache and what
+                    // is actually in the cache, this is an unrecoverable problem. Reset the cache
+                    // and clear the data and open a new HTTP connection starting at the current position.
+                    MoPubLog.d("Unexpected cache miss. Invalidating cache");
+                    mIntervals.clear();
+                    mCachedBytes = new byte[BLOCK_SIZE];
+                    mHttpDataSource.close();
+
+                    mHttpDataSource.open(
+                            new DataSpec(mDataSpec.uri, mStartInFile + mDataBlockOffset,
+                                    LENGTH_UNBOUNDED, mDataSpec.key, mDataSpec.flags));
+                    mIsHttpSourceOpen = true;
+                } else {
+                    // If the data is available in the cache, read the remaining bytes into the
+                    // buffer, additionally offset by what has already been written to the buffer.
+                    System.arraycopy(mCachedBytes, mStartInDataBlock + mDataBlockOffset, buffer,
+                            offset + bytesReadFromDisk,
+                            bytesToRead - bytesReadFromDisk);
+                    mDataBlockOffset += bytesToRead - bytesReadFromDisk;
+                    bytesReadFromDisk = bytesToRead;
+                }
+            }
+        }
+
+        // If we have read enough data from disk, don't ask for network data
+        final int bytesToReadFromNetwork = length - bytesReadFromDisk;
+        if (bytesToReadFromNetwork <= 0) {
+            return bytesReadFromDisk;
+        }
+
+        mIsDirty = true;
+
+        // This should never happen, but if we lose network or something, this might happen
+        if (!mIsHttpSourceOpen) {
+            MoPubLog.d("end of cache reached. No http source open");
+            return -1;
+        }
+
+        // Read from network and store to disk
+        int bytesReadFromNetwork = mHttpDataSource.read(buffer, offset + bytesReadFromDisk,
+                bytesToReadFromNetwork);
+
+        final int bytesAvailableInCurrentBlockForNetwork =
+                BLOCK_SIZE - mStartInDataBlock - mDataBlockOffset;
+        if (bytesAvailableInCurrentBlockForNetwork < bytesReadFromNetwork) {
+            // If there is not enough room in the current block, write up to the end of the current
+            // block, set up a new segment (which may have data in the cache already), and write
+            // the rest of the data.
+            System.arraycopy(buffer, offset + bytesReadFromDisk, mCachedBytes,
+                    mStartInDataBlock + mDataBlockOffset, bytesAvailableInCurrentBlockForNetwork);
+            mDataBlockOffset += bytesAvailableInCurrentBlockForNetwork;
+
+            writeCacheToDiskAndClearVariables();
+
+            mCachedBytes = CacheService.getFromDiskCache(mSegment + mKey);
+            if (mCachedBytes == null) {
+                mCachedBytes = new byte[BLOCK_SIZE];
+            }
+
+            System.arraycopy(buffer,
+                    offset + bytesAvailableInCurrentBlockForNetwork + bytesReadFromDisk,
+                    mCachedBytes, mStartInDataBlock + mDataBlockOffset,
+                    bytesReadFromNetwork - bytesAvailableInCurrentBlockForNetwork);
+            mDataBlockOffset += bytesReadFromNetwork - bytesAvailableInCurrentBlockForNetwork;
+        } else {
+            System.arraycopy(buffer, offset + bytesReadFromDisk, mCachedBytes,
+                    mStartInDataBlock + mDataBlockOffset, bytesReadFromNetwork);
+            mDataBlockOffset += bytesReadFromNetwork;
+        }
+
+        return bytesReadFromNetwork + bytesReadFromDisk;
+    }
+
+    private static boolean areBytesAvailableInCache(final int farthestContiguousPoint,
+            final int startInFile, final int dataBlockOffset) {
+        return farthestContiguousPoint > startInFile + dataBlockOffset;
+    }
+
+    private void writeCacheToDiskAndClearVariables() {
+        CacheService.putToDiskCache(mSegment + mKey, mCachedBytes);
+        addNewInterval(mIntervals, mStartInFile, mDataBlockOffset);
+        mStartInDataBlock = 0;
+        mStartInFile = mStartInFile + mDataBlockOffset;
+        mDataBlockOffset = 0;
+        mSegment = mStartInFile / BLOCK_SIZE;
+    }
+
+    /**
+     * Gets the first contiguous point from disk that we have starting from the given point. If
+     * there is no segment that contains this point, return that point.
+     */
+    @VisibleForTesting
+    static int getFirstContiguousPointAfter(int point,
+            @NonNull final TreeSet<IntInterval> intervals) {
+        Preconditions.checkNotNull(intervals);
+
+        int lastContiguousPoint = point;
+        for (final IntInterval interval : intervals) {
+            if (interval.getStart() <= lastContiguousPoint) {
+                lastContiguousPoint = Math.max(lastContiguousPoint,
+                        interval.getStart() + interval.getLength());
+            }
+        }
+        return lastContiguousPoint;
+    }
+
+    /**
+     * Adds the interval if the interval does not already exist.
+     *
+     * @param intervals The current set of intervals
+     * @param start     The starting point of this interval
+     * @param length    The length of this interval
+     */
+    @VisibleForTesting
+    static void addNewInterval(@NonNull final TreeSet<IntInterval> intervals, final int start,
+            final int length) {
+        Preconditions.checkNotNull(intervals);
+
+        if (getFirstContiguousPointAfter(start, intervals) >= start + length) {
+            return;
+        }
+        intervals.add(new IntInterval(start, length));
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionInterface.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionInterface.java
new file mode 100644
index 00000000..6f84021f
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionInterface.java
@@ -0,0 +1,15 @@
+package com.mopub.nativeads;
+
+import android.view.View;
+
+/**
+ * This interface should be implemented by native ad formats that want to make use of the
+ * {@link ImpressionTracker} to track impressions.
+ */
+public interface ImpressionInterface {
+    int getImpressionMinPercentageViewed();
+    int getImpressionMinTimeViewed();
+    void recordImpression(View view);
+    boolean isImpressionRecorded();
+    void setImpressionRecorded();
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionTracker.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionTracker.java
index 176f0e65..d757285d 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionTracker.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionTracker.java
@@ -1,7 +1,8 @@
 package com.mopub.nativeads;
 
-import android.content.Context;
+import android.app.Activity;
 import android.os.Handler;
+import android.os.Looper;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.view.View;
@@ -16,18 +17,22 @@
 import static com.mopub.nativeads.VisibilityTracker.VisibilityChecker;
 import static com.mopub.nativeads.VisibilityTracker.VisibilityTrackerListener;
 
-class ImpressionTracker {
+/**
+ * Impression tracker used to call {@link ImpressionInterface#recordImpression(View)} when a
+ * percentage of a native ad has been on screen for a duration of time.
+ */
+public class ImpressionTracker {
 
     private static final int PERIOD = 250;
 
     // Object tracking visibility of added views
     @NonNull private final VisibilityTracker mVisibilityTracker;
 
-    // All views and responses being tracked for impressions
-    @NonNull private final Map<View, NativeResponse> mTrackedViews;
+    // All views and ads being tracked for impressions
+    @NonNull private final Map<View, ImpressionInterface> mTrackedViews;
 
     // Visible views being polled for time on screen before tracking impression
-    @NonNull private final Map<View, TimestampWrapper<NativeResponse>> mPollingViews;
+    @NonNull private final Map<View, TimestampWrapper<ImpressionInterface>> mPollingViews;
 
     // Handler for polling visible views
     @NonNull private final Handler mPollHandler;
@@ -41,17 +46,17 @@
     // Listener for when a view becomes visible or non visible
     @Nullable private VisibilityTrackerListener mVisibilityTrackerListener;
 
-    ImpressionTracker(@NonNull final Context context) {
-        this(new WeakHashMap<View, NativeResponse>(),
-                new WeakHashMap<View, TimestampWrapper<NativeResponse>>(),
+    public ImpressionTracker(@NonNull final Activity activity) {
+        this(new WeakHashMap<View, ImpressionInterface>(),
+                new WeakHashMap<View, TimestampWrapper<ImpressionInterface>>(),
                 new VisibilityChecker(),
-                new VisibilityTracker(context),
-                new Handler());
+                new VisibilityTracker(activity),
+                new Handler(Looper.getMainLooper()));
     }
 
     @VisibleForTesting
-    ImpressionTracker(@NonNull final Map<View, NativeResponse> trackedViews,
-            @NonNull final Map<View, TimestampWrapper<NativeResponse>> pollingViews,
+    ImpressionTracker(@NonNull final Map<View, ImpressionInterface> trackedViews,
+            @NonNull final Map<View, TimestampWrapper<ImpressionInterface>> pollingViews,
             @NonNull final VisibilityChecker visibilityChecker,
             @NonNull final VisibilityTracker visibilityTracker,
             @NonNull final Handler handler) {
@@ -64,23 +69,23 @@
             @Override
             public void onVisibilityChanged(@NonNull final List<View> visibleViews, @NonNull final List<View> invisibleViews) {
                 for (final View view : visibleViews) {
-                    // It's possible for native response to be null if the view was GC'd from this class
+                    // It's possible for native ad to be null if the view was GC'd from this class
                     // but not from VisibilityTracker
                     // If it's null then clean up the view from this class
-                    final NativeResponse nativeResponse = mTrackedViews.get(view);
-                    if (nativeResponse == null) {
+                    final ImpressionInterface impressionInterface = mTrackedViews.get(view);
+                    if (impressionInterface == null) {
                         removeView(view);
                         continue;
                     }
 
-                    // If the native response is already polling, don't recreate it
-                    final TimestampWrapper<NativeResponse> polling = mPollingViews.get(view);
-                    if (polling != null && nativeResponse.equals(polling.mInstance)) {
+                    // If the native ad is already polling, don't recreate it
+                    final TimestampWrapper<ImpressionInterface> polling = mPollingViews.get(view);
+                    if (polling != null && impressionInterface.equals(polling.mInstance)) {
                         continue;
                     }
 
                     // Add a new polling view
-                    mPollingViews.put(view, new TimestampWrapper<NativeResponse>(nativeResponse));
+                    mPollingViews.put(view, new TimestampWrapper<ImpressionInterface>(impressionInterface));
                 }
 
                 for (final View view : invisibleViews) {
@@ -98,24 +103,24 @@ public void onVisibilityChanged(@NonNull final List<View> visibleViews, @NonNull
     /**
      * Tracks the given view for impressions.
      */
-    void addView(final View view, @NonNull final NativeResponse nativeResponse) {
-        // View is already associated with same native response
-        if (mTrackedViews.get(view) == nativeResponse) {
+    public void addView(final View view, @NonNull final ImpressionInterface impressionInterface) {
+        // View is already associated with the same native ad
+        if (mTrackedViews.get(view) == impressionInterface) {
             return;
         }
 
-        // Clean up state if view is being recycled and associated with a different response
+        // Clean up state if view is being recycled and associated with a different ad
         removeView(view);
 
-        if (nativeResponse.getRecordedImpression() || nativeResponse.isDestroyed()) {
+        if (impressionInterface.isImpressionRecorded()) {
             return;
         }
 
-        mTrackedViews.put(view, nativeResponse);
-        mVisibilityTracker.addView(view, nativeResponse.getImpressionMinPercentageViewed());
+        mTrackedViews.put(view, impressionInterface);
+        mVisibilityTracker.addView(view, impressionInterface.getImpressionMinPercentageViewed());
     }
 
-    void removeView(final View view) {
+    public void removeView(final View view) {
         mTrackedViews.remove(view);
         removePollingView(view);
         mVisibilityTracker.removeView(view);
@@ -124,14 +129,14 @@ void removeView(final View view) {
     /**
      * Immediately clear all views. Useful for when we re-request ads for an ad placer
      */
-    void clear() {
+    public void clear() {
         mTrackedViews.clear();
         mPollingViews.clear();
         mVisibilityTracker.clear();
         mPollHandler.removeMessages(0);
     }
 
-    void destroy() {
+    public void destroy() {
         clear();
         mVisibilityTracker.destroy();
         mVisibilityTrackerListener = null;
@@ -163,9 +168,9 @@ private void removePollingView(final View view) {
 
         @Override
         public void run() {
-            for (final Map.Entry<View, TimestampWrapper<NativeResponse>> entry : mPollingViews.entrySet()) {
+            for (final Map.Entry<View, TimestampWrapper<ImpressionInterface>> entry : mPollingViews.entrySet()) {
                 final View view = entry.getKey();
-                final TimestampWrapper<NativeResponse> timestampWrapper = entry.getValue();
+                final TimestampWrapper<ImpressionInterface> timestampWrapper = entry.getValue();
 
                 // If it's been visible for the min impression time, trigger the callback
                 if (!mVisibilityChecker.hasRequiredTimeElapsed(
@@ -175,6 +180,7 @@ public void run() {
                 }
 
                 timestampWrapper.mInstance.recordImpression(view);
+                timestampWrapper.mInstance.setImpressionRecorded();
 
                 // Removed in a separate loop to avoid a ConcurrentModification exception.
                 mRemovedViews.add(view);
@@ -197,4 +203,4 @@ public void run() {
     VisibilityTrackerListener getVisibilityTrackerListener() {
         return mVisibilityTrackerListener;
     }
-}
\ No newline at end of file
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/IntInterval.java b/mopub-sdk/src/main/java/com/mopub/nativeads/IntInterval.java
new file mode 100644
index 00000000..bdbc0bb7
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/IntInterval.java
@@ -0,0 +1,77 @@
+package com.mopub.nativeads;
+
+import android.support.annotation.Nullable;
+
+/**
+ * Stores an integer interval in the form of a start and a length.
+ */
+public class IntInterval implements Comparable<IntInterval>{
+    private int start;
+    private int length;
+
+    public IntInterval(int start, int length) {
+        this.start = start;
+        this.length = length;
+    }
+
+    public int getStart() {
+        return start;
+    }
+
+    public int getLength() {
+        return length;
+    }
+
+    public void setStart(int start) {
+        this.start = start;
+    }
+
+    public void setLength(int length) {
+        this.length = length;
+    }
+
+    /**
+     * For comparing intervals directly to this object.
+     * @param start The start of the interval
+     * @param length The length of the interval
+     * @return Whether or not the given interval and this object have the same values.
+     */
+    public boolean equals(int start, int length) {
+        return this.start == start && this.length == length;
+    }
+
+    @Override
+    public String toString() {
+        return "{start : " + start + ", length : " + length + "}";
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        }
+        if (!(o instanceof IntInterval)) {
+            return false;
+        }
+
+        final IntInterval other = (IntInterval) o;
+        return this.start == other.start && this.length == other.length;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = 29;
+        result = 31 * result + start;
+        result = 31 * result + length;
+        return result;
+    }
+
+    @Override
+    @SuppressWarnings("ConstantConditions")
+    public int compareTo(@Nullable final IntInterval another) {
+        if (start == another.start) {
+            return length - another.length;
+        }
+        return start - another.start;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MediaLayout.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MediaLayout.java
new file mode 100644
index 00000000..8cfd81bc
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MediaLayout.java
@@ -0,0 +1,395 @@
+package com.mopub.nativeads;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.graphics.Color;
+import android.graphics.SurfaceTexture;
+import android.graphics.drawable.Drawable;
+import android.graphics.drawable.GradientDrawable;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.util.AttributeSet;
+import android.view.TextureView;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.ProgressBar;
+import android.widget.RelativeLayout;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Dips;
+import com.mopub.common.util.Drawables;
+import com.mopub.common.util.Utils;
+import com.mopub.mobileads.VastVideoProgressBarWidget;
+import com.mopub.mobileads.resource.DrawableConstants.GradientStrip;
+
+@TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+public class MediaLayout extends RelativeLayout {
+    public enum Mode { IMAGE, PLAYING, LOADING, BUFFERING, PAUSED, FINISHED }
+    public enum MuteState { MUTED, UNMUTED }
+
+    private static final int GRADIENT_STRIP_HEIGHT_DIPS = 35;
+    private static final int MUTE_SIZE_DIPS = 36;
+    private static final int CONTROL_SIZE_DIPS = 40;
+    private static final int PINNER_PADDING_DIPS = 10;
+
+    private static final float ASPECT_MULTIPLIER_WIDTH_TO_HEIGHT = 9f / 16;
+    private static final float ASPECT_MULTIPLIER_HEIGHT_TO_WIDTH = 16f / 9;
+
+    @NonNull private volatile Mode mMode = Mode.IMAGE;
+    @NonNull private MuteState mMuteState;
+
+    @NonNull private ImageView mMainImageView;
+
+    // These views are video-only, ordered by their z index. Don't create them if they aren't needed.
+    @Nullable private TextureView mVideoTextureView;
+    @Nullable private ProgressBar mLoadingSpinner;
+    @Nullable private ImageView mPlayButton;
+    @Nullable private ImageView mBottomGradient;
+    @Nullable private ImageView mTopGradient;
+    @Nullable private VastVideoProgressBarWidget mVideoProgress;
+    @Nullable private ImageView mMuteControl;
+    @Nullable private View mOverlay;
+    @Nullable private Drawable mMutedDrawable;
+    @Nullable private Drawable mUnmutedDrawable;
+
+    private boolean mIsInitialized;
+
+    // Measurements
+    private final int mControlSizePx;
+    private final int mGradientStripHeightPx;
+    private final int mMuteSizePx;
+    private final int mPaddingPx;
+
+    // Constructors
+    public MediaLayout(@NonNull final Context context) {
+        this(context, null);
+    }
+
+    public MediaLayout(@NonNull final Context context, @Nullable final AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    public MediaLayout(@NonNull final Context context, @Nullable final AttributeSet attrs,
+            final int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        Preconditions.checkNotNull(context);
+
+        mMuteState = MuteState.MUTED;
+
+        // Create and layout the main imageView and set its modes.
+        LayoutParams params = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
+        params.addRule(RelativeLayout.CENTER_IN_PARENT);
+        mMainImageView = new ImageView(context);
+        mMainImageView.setLayoutParams(params);
+        mMainImageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
+        addView(mMainImageView);
+
+        mControlSizePx = Dips.asIntPixels(CONTROL_SIZE_DIPS, context);
+        mGradientStripHeightPx = Dips.asIntPixels(GRADIENT_STRIP_HEIGHT_DIPS, context);
+        mMuteSizePx = Dips.asIntPixels(MUTE_SIZE_DIPS, context);
+        mPaddingPx = Dips.asIntPixels(PINNER_PADDING_DIPS, context);
+    }
+
+    public void setSurfaceTextureListener(@Nullable final TextureView.SurfaceTextureListener stl) {
+        if (mVideoTextureView != null) {
+            mVideoTextureView.setSurfaceTextureListener(stl);
+
+            SurfaceTexture st = mVideoTextureView.getSurfaceTexture();
+            if (st != null && stl != null) {
+                stl.onSurfaceTextureAvailable(st, mVideoTextureView.getWidth(), mVideoTextureView.getHeight());
+            }
+        }
+    }
+
+    /**
+     * Users should call this method when the view will be used for video. Video views are not
+     * instantiated in the image-only case in order to save time and memory.
+     */
+    public void initForVideo() {
+        if (mIsInitialized) {
+            return;
+        }
+
+        // Init and set up all the video view items.
+        final LayoutParams videoTextureLayoutParams =
+                new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
+        videoTextureLayoutParams.addRule(RelativeLayout.CENTER_IN_PARENT);
+        mVideoTextureView = new TextureView(getContext());
+        mVideoTextureView.setLayoutParams(videoTextureLayoutParams);
+        mVideoTextureView.setId((int) Utils.generateUniqueId());
+        addView(mVideoTextureView);
+
+        // Place texture beneath image.
+        mMainImageView.bringToFront();
+
+        final LayoutParams loadingSpinnerParams = new LayoutParams(mControlSizePx, mControlSizePx);
+        loadingSpinnerParams.addRule(RelativeLayout.ALIGN_PARENT_TOP);
+        loadingSpinnerParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
+        mLoadingSpinner = new ProgressBar(getContext());
+        mLoadingSpinner.setLayoutParams(loadingSpinnerParams);
+        mLoadingSpinner.setPadding(0, mPaddingPx, mPaddingPx, 0);
+        mLoadingSpinner.setIndeterminate(true);
+        addView(mLoadingSpinner);
+
+        final LayoutParams bottomGradientParams =
+                new LayoutParams(LayoutParams.MATCH_PARENT, mGradientStripHeightPx);
+        bottomGradientParams.addRule(RelativeLayout.ALIGN_BOTTOM, mVideoTextureView.getId());
+        mBottomGradient = new ImageView(getContext());
+        mBottomGradient.setLayoutParams(bottomGradientParams);
+        final GradientDrawable bottomGradientDrawable =
+                new GradientDrawable(GradientDrawable.Orientation.BOTTOM_TOP,
+                new int[] {GradientStrip.START_COLOR, GradientStrip.END_COLOR});
+        mBottomGradient.setImageDrawable(bottomGradientDrawable);
+        addView(mBottomGradient);
+
+        final LayoutParams topGradientParams =
+                new LayoutParams(LayoutParams.MATCH_PARENT, mGradientStripHeightPx);
+        topGradientParams.addRule(RelativeLayout.ALIGN_TOP, mVideoTextureView.getId());
+        mTopGradient = new ImageView(getContext());
+        mTopGradient.setLayoutParams(topGradientParams);
+        final GradientDrawable topGradientDrawable =
+                new GradientDrawable(GradientDrawable.Orientation.TOP_BOTTOM,
+                        new int[] {GradientStrip.START_COLOR, GradientStrip.END_COLOR});
+        mTopGradient.setImageDrawable(topGradientDrawable);
+        addView(mTopGradient);
+
+        mVideoProgress = new VastVideoProgressBarWidget(getContext());
+        mVideoProgress.setAnchorId(mVideoTextureView.getId());
+        mVideoProgress.calibrateAndMakeVisible(1000, 0);
+        addView(mVideoProgress);
+
+        mMutedDrawable = Drawables.NATIVE_MUTED.createDrawable(getContext());
+        mUnmutedDrawable = Drawables.NATIVE_UNMUTED.createDrawable(getContext());
+        final LayoutParams muteControlParams = new LayoutParams(mMuteSizePx, mMuteSizePx);
+        muteControlParams.addRule(RelativeLayout.ALIGN_PARENT_LEFT);
+        muteControlParams.addRule(RelativeLayout.ABOVE, mVideoProgress.getId());
+        mMuteControl = new ImageView(getContext());
+        mMuteControl.setLayoutParams(muteControlParams);
+        mMuteControl.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
+        mMuteControl.setPadding(mPaddingPx, mPaddingPx, mPaddingPx, mPaddingPx);
+        mMuteControl.setImageDrawable(mMutedDrawable);
+        addView(mMuteControl);
+
+        final LayoutParams overlayParams =
+                new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
+        overlayParams.addRule(RelativeLayout.CENTER_IN_PARENT);
+        mOverlay = new View(getContext());
+        mOverlay.setLayoutParams(overlayParams);
+        mOverlay.setBackgroundColor(Color.TRANSPARENT);
+        addView(mOverlay);
+
+        final LayoutParams playButtonParams = new LayoutParams(mControlSizePx, mControlSizePx);
+        playButtonParams.addRule(RelativeLayout.CENTER_IN_PARENT);
+        mPlayButton = new ImageView(getContext());
+        mPlayButton.setLayoutParams(playButtonParams);
+        mPlayButton.setImageDrawable(Drawables.NATIVE_PLAY.createDrawable(getContext()));
+        addView(mPlayButton);
+
+        mIsInitialized = true;
+        updateViewState();
+    }
+
+    /**
+     * Resets the view, removing all the OnClickListeners and setting the view to hide
+     */
+    public void reset() {
+        setMode(Mode.IMAGE);
+        setPlayButtonClickListener(null);
+        setMuteControlClickListener(null);
+        setVideoClickListener(null);
+    }
+
+    @Override
+    protected void onMeasure(final int widthMeasureSpec, final int heightMeasureSpec) {
+        final int widthMode = MeasureSpec.getMode(widthMeasureSpec);
+        final int heightMode = MeasureSpec.getMode(heightMeasureSpec);
+
+        final int measWidth = MeasureSpec.getSize(widthMeasureSpec);
+        final int measHeight = MeasureSpec.getSize(heightMeasureSpec);
+
+        final int curWidth = getMeasuredWidth();
+        final int curHeight = getMeasuredHeight();
+
+        int finalWidth;
+        if (widthMode == MeasureSpec.EXACTLY) {
+            finalWidth = measWidth;
+        } else if (widthMode == MeasureSpec.AT_MOST) {
+            // Cap width at max width.
+            finalWidth = Math.min(measWidth, curWidth);
+        } else {
+            // MeasWidth is meaningless. Stay with current width.
+            finalWidth = curWidth;
+        }
+
+        // Set height based on width + height constraints.
+        int finalHeight = (int) (ASPECT_MULTIPLIER_WIDTH_TO_HEIGHT * finalWidth);
+
+        // Check if the layout is giving us bounds smaller than we want, conform to those if needed.
+        if (heightMode == MeasureSpec.EXACTLY && measHeight < finalHeight) {
+            finalHeight = measHeight;
+            finalWidth = (int) (ASPECT_MULTIPLIER_HEIGHT_TO_WIDTH * finalHeight);
+        }
+
+        if (Math.abs(finalHeight - curHeight) >= 2
+                || Math.abs(finalWidth - curWidth) >= 2) {
+            MoPubLog.v(String.format("Resetting mediaLayout size to w: %d h: %d", finalWidth, finalHeight));
+            getLayoutParams().width = finalWidth;
+            getLayoutParams().height = finalHeight;
+        }
+
+        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+    }
+
+    public void setMainImageDrawable(@NonNull Drawable drawable) {
+        Preconditions.checkNotNull(drawable);
+        mMainImageView.setImageDrawable(drawable);
+    }
+
+    public void resetProgress() {
+        if (mVideoProgress != null) {
+            mVideoProgress.reset();
+        }
+    }
+
+    public void updateProgress(final int progressTenthPercentage) {
+        if (mVideoProgress != null) {
+            mVideoProgress.updateProgress(progressTenthPercentage);
+        }
+    }
+
+    public TextureView getTextureView() {
+        return mVideoTextureView;
+    }
+
+    public void setMode(@NonNull final Mode mode) {
+        Preconditions.checkNotNull(mode);
+        mMode = mode;
+        post(new Runnable() {
+            @Override
+            public void run() {
+                updateViewState();
+            }
+        });
+    }
+
+    @Nullable
+    public ImageView getMainImageView() {
+        return mMainImageView;
+    }
+
+    public void setMuteControlClickListener(@Nullable OnClickListener muteControlListener) {
+        if (mMuteControl != null) {
+            mMuteControl.setOnClickListener(muteControlListener);
+        }
+    }
+
+    public void setPlayButtonClickListener(@Nullable OnClickListener playButtonListener) {
+        if (mPlayButton != null && mOverlay != null) {
+            mOverlay.setOnClickListener(playButtonListener);
+            mPlayButton.setOnClickListener(playButtonListener);
+        }
+    }
+
+    public void setVideoClickListener(@Nullable OnClickListener videoClickListener) {
+        if (mVideoTextureView != null) {
+            mVideoTextureView.setOnClickListener(videoClickListener);
+        }
+    }
+
+    public void setMuteState(@NonNull final MuteState muteState) {
+        Preconditions.checkNotNull(muteState);
+        if (muteState == mMuteState) {
+            return;
+        }
+        mMuteState = muteState;
+        if (mMuteControl != null) {
+            switch (mMuteState) {
+                case MUTED:
+                    mMuteControl.setImageDrawable(mMutedDrawable);
+                    break;
+                case UNMUTED:
+                default:
+                    mMuteControl.setImageDrawable(mUnmutedDrawable);
+            }
+        }
+    }
+
+    private void updateViewState() {
+        switch (mMode) {
+            case IMAGE:
+                setMainImageVisibility(VISIBLE);
+                setLoadingSpinnerVisibility(INVISIBLE);
+                setVideoControlVisibility(INVISIBLE);
+                setPlayButtonVisibility(INVISIBLE);
+                break;
+            case LOADING:
+                setMainImageVisibility(VISIBLE);
+                setLoadingSpinnerVisibility(VISIBLE);
+                setVideoControlVisibility(INVISIBLE);
+                setPlayButtonVisibility(INVISIBLE);
+                break;
+            case BUFFERING:
+                setMainImageVisibility(INVISIBLE);
+                setLoadingSpinnerVisibility(VISIBLE);
+                setVideoControlVisibility(VISIBLE);
+                setPlayButtonVisibility(INVISIBLE);
+            case PLAYING:
+                setMainImageVisibility(INVISIBLE);
+                setLoadingSpinnerVisibility(INVISIBLE);
+                setVideoControlVisibility(VISIBLE);
+                setPlayButtonVisibility(INVISIBLE);
+                break;
+            case PAUSED:
+                setMainImageVisibility(INVISIBLE);
+                setLoadingSpinnerVisibility(INVISIBLE);
+                setVideoControlVisibility(VISIBLE);
+                setPlayButtonVisibility(VISIBLE);
+                break;
+            case FINISHED:
+                setMainImageVisibility(VISIBLE);
+                setLoadingSpinnerVisibility(INVISIBLE);
+                setVideoControlVisibility(INVISIBLE);
+                setPlayButtonVisibility(VISIBLE);
+                break;
+            default:
+                break;
+        }
+    }
+
+    private void setMainImageVisibility(final int visibility) {
+        mMainImageView.setVisibility(visibility);
+    }
+
+    private void setLoadingSpinnerVisibility(final int visibility) {
+        if (mLoadingSpinner != null) {
+            mLoadingSpinner.setVisibility(visibility);
+        }
+
+        if (mTopGradient != null) {
+            mTopGradient.setVisibility(visibility);
+        }
+    }
+
+    private void setVideoControlVisibility(final int visibility) {
+        if (mBottomGradient != null) {
+            mBottomGradient.setVisibility(visibility);
+        }
+
+        if (mVideoProgress != null) {
+            mVideoProgress.setVisibility(visibility);
+        }
+
+        if (mMuteControl != null) {
+            mMuteControl.setVisibility(visibility);
+        }
+    }
+
+    private void setPlayButtonVisibility(final int visibility) {
+        if (mPlayButton != null && mOverlay != null) {
+            mPlayButton.setVisibility(visibility);
+            mOverlay.setVisibility(visibility);
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MediaViewBinder.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MediaViewBinder.java
new file mode 100644
index 00000000..4b0f9efb
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MediaViewBinder.java
@@ -0,0 +1,99 @@
+package com.mopub.nativeads;
+
+import android.support.annotation.NonNull;
+
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+
+public class MediaViewBinder {
+    public final static class Builder {
+        private final int layoutId;
+        private int mediaLayoutId;
+        private int titleId;
+        private int textId;
+        private int iconImageId;
+        private int callToActionId;
+        private int privacyInformationIconImageId;
+
+        @NonNull private Map<String, Integer> extras = Collections.emptyMap();
+
+        public Builder(final int layoutId) {
+            this.layoutId = layoutId;
+            this.extras = new HashMap<String, Integer>();
+        }
+
+        @NonNull
+        public final Builder mediaLayoutId(final int mediaLayoutId) {
+            this.mediaLayoutId = mediaLayoutId;
+            return this;
+        }
+
+        @NonNull
+        public final Builder titleId(final int titlteId) {
+            this.titleId = titlteId;
+            return this;
+        }
+
+        @NonNull
+        public final Builder textId(final int textId) {
+            this.textId = textId;
+            return this;
+        }
+
+        @NonNull
+        public final Builder iconImageId(final int iconImageId) {
+            this.iconImageId = iconImageId;
+            return this;
+        }
+
+        @NonNull
+        public final Builder callToActionId(final int callToActionId) {
+            this.callToActionId = callToActionId;
+            return this;
+        }
+
+        @NonNull
+        public final Builder privacyInformationIconImageId(final int privacyInformationIconImageId) {
+            this.privacyInformationIconImageId = privacyInformationIconImageId;
+            return this;
+        }
+
+        @NonNull
+        public final Builder addExtras(final Map<String, Integer> resourceIds) {
+            this.extras = new HashMap<String, Integer>(resourceIds);
+            return this;
+        }
+
+        @NonNull
+        public final Builder addExtra(final String key, final int resourceId) {
+            this.extras.put(key, resourceId);
+            return this;
+        }
+
+        @NonNull
+        public final MediaViewBinder build() {
+            return new MediaViewBinder(this);
+        }
+    }
+
+    final int layoutId;
+    final int mediaLayoutId;
+    final int titleId;
+    final int textId;
+    final int callToActionId;
+    final int iconImageId;
+    final int privacyInformationIconImageId;
+    @NonNull final Map<String, Integer> extras;
+
+    private MediaViewBinder(@NonNull final Builder builder) {
+        this.layoutId = builder.layoutId;
+        this.mediaLayoutId = builder.mediaLayoutId;
+        this.titleId = builder.titleId;
+        this.textId = builder.textId;
+        this.callToActionId = builder.callToActionId;
+        this.iconImageId = builder.iconImageId;
+        this.privacyInformationIconImageId = builder.privacyInformationIconImageId;
+        this.extras = builder.extras;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MediaViewHolder.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MediaViewHolder.java
new file mode 100644
index 00000000..54121e39
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MediaViewHolder.java
@@ -0,0 +1,49 @@
+package com.mopub.nativeads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+
+class MediaViewHolder {
+    @Nullable View mainView;
+    @Nullable MediaLayout mediaLayout;
+    @Nullable TextView titleView;
+    @Nullable TextView textView;
+    @Nullable ImageView iconImageView;
+    @Nullable TextView callToActionView;
+    @Nullable ImageView privacyInformationIconImageView;
+
+    @VisibleForTesting
+    static final MediaViewHolder EMPTY_MEDIA_VIEW_HOLDER = new MediaViewHolder();
+
+    // Use fromViewBinder instead of a constructor
+    private MediaViewHolder() {}
+
+    @NonNull
+    static MediaViewHolder fromViewBinder(@NonNull final View view,
+            @NonNull final MediaViewBinder mediaViewBinder) {
+        final MediaViewHolder mediaViewHolder = new MediaViewHolder();
+        mediaViewHolder.mainView = view;
+        try {
+            mediaViewHolder.titleView = (TextView) view.findViewById(mediaViewBinder.titleId);
+            mediaViewHolder.textView = (TextView) view.findViewById(mediaViewBinder.textId);
+            mediaViewHolder.callToActionView =
+                    (TextView) view.findViewById(mediaViewBinder.callToActionId);
+            mediaViewHolder.mediaLayout = (MediaLayout) view.findViewById(mediaViewBinder.mediaLayoutId);
+            mediaViewHolder.iconImageView =
+                    (ImageView) view.findViewById(mediaViewBinder.iconImageId);
+            mediaViewHolder.privacyInformationIconImageView =
+                    (ImageView) view.findViewById(mediaViewBinder.privacyInformationIconImageId);
+            return mediaViewHolder;
+        } catch (ClassCastException exception) {
+            MoPubLog.w("Could not cast from id in MediaViewBinder to expected View type",
+                    exception);
+            return EMPTY_MEDIA_VIEW_HOLDER;
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
index de938aa9..18ec136c 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
@@ -1,5 +1,6 @@
 package com.mopub.nativeads;
 
+import android.app.Activity;
 import android.content.Context;
 import android.database.DataSetObserver;
 import android.support.annotation.NonNull;
@@ -51,41 +52,41 @@
      * wish to hard-code positions in your app, see {@link MoPubAdAdapter(Context,
      * MoPubClientPositioning)}.
      *
-     * @param context The activity context.
+     * @param activity The activity.
      * @param originalAdapter Your original adapter.
      */
-    public MoPubAdAdapter(@NonNull final Context context, @NonNull final Adapter originalAdapter) {
-        this(context, originalAdapter, MoPubNativeAdPositioning.serverPositioning());
+    public MoPubAdAdapter(@NonNull final Activity activity, @NonNull final Adapter originalAdapter) {
+        this(activity, originalAdapter, MoPubNativeAdPositioning.serverPositioning());
     }
 
     /**
      * Creates a new MoPubAdAdapter object, using server positioning.
      *
-     * @param context The activity context.
+     * @param activity The activity.
      * @param originalAdapter Your original adapter.
      * @param adPositioning A positioning object for specifying where ads will be placed in your
      * stream. See {@link MoPubNativeAdPositioning#serverPositioning()}.
      */
-    public MoPubAdAdapter(@NonNull final Context context,
+    public MoPubAdAdapter(@NonNull final Activity activity,
             @NonNull final Adapter originalAdapter,
             @NonNull final MoPubServerPositioning adPositioning) {
-        this(new MoPubStreamAdPlacer(context, adPositioning), originalAdapter,
-                new VisibilityTracker(context));
+        this(new MoPubStreamAdPlacer(activity, adPositioning), originalAdapter,
+                new VisibilityTracker(activity));
     }
 
     /**
      * Creates a new MoPubAdAdapter object, using client positioning.
      *
-     * @param context The activity context.
+     * @param activity The activity.
      * @param originalAdapter Your original adapter.
      * @param adPositioning A positioning object for specifying where ads will be placed in your
      * stream. See {@link MoPubNativeAdPositioning#clientPositioning()}.
      */
-    public MoPubAdAdapter(@NonNull final Context context,
+    public MoPubAdAdapter(@NonNull final Activity activity,
             @NonNull final Adapter originalAdapter,
             @NonNull final MoPubClientPositioning adPositioning) {
-        this(new MoPubStreamAdPlacer(context, adPositioning), originalAdapter,
-                new VisibilityTracker(context));
+        this(new MoPubStreamAdPlacer(activity, adPositioning), originalAdapter,
+                new VisibilityTracker(activity));
     }
 
     @VisibleForTesting
@@ -150,17 +151,14 @@ void handleAdRemoved(final int position) {
     }
 
     /**
-     * Registers a {@link MoPubNativeAdRenderer} to use when displaying ads in your stream.
+     * Registers a {@link MoPubStaticNativeAdRenderer}, supporting a specific native ad format,
+     * to use when displaying ads in your stream. Note that if multiple ad renderers support
+     * a specific native ad format, the first one registered will be used.
      *
      * This renderer will automatically create and render your view when you call {@link #getView}.
-     * If you register a second renderer, it will replace the first, although this behavior is
-     * subject to change in a future SDK version.
      *
      * @param adRenderer The ad renderer.
-     *
-     * @deprecated in version 3.9.0, use {@link #registerViewBinder(ViewBinder)} instead.
      */
-    @Deprecated
     public final void registerAdRenderer(@NonNull final MoPubAdRenderer adRenderer) {
         if (!Preconditions.NoThrow.checkNotNull(
                 adRenderer, "Tried to set a null ad renderer on the placer.")) {
@@ -169,23 +167,6 @@ public final void registerAdRenderer(@NonNull final MoPubAdRenderer adRenderer)
         mStreamAdPlacer.registerAdRenderer(adRenderer);
     }
 
-    /**
-     * Registers a {@link ViewBinder} to use when displaying ads in your stream.
-     *
-     * This binder will be used automatically to create and render your view when you call
-     * {@link #getView}. If you register a second {@link ViewBinder}, it will replace the first,
-     * although this behavior is subject to change in a future SDK version.
-     *
-     * @param viewBinder The view binder
-     */
-    public final void registerViewBinder(@NonNull final ViewBinder viewBinder) {
-        if (!Preconditions.NoThrow.checkNotNull(
-                viewBinder, "Tried to set a null view binder on the placer.")) {
-            return;
-        }
-        mStreamAdPlacer.registerAdRenderer(new MoPubNativeAdRenderer(viewBinder));
-    }
-
     /**
      * Sets a listener that will be called after the SDK loads new ads from the server and places
      * them into your stream.
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java
index 686b3c52..e79548bb 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java
@@ -1,6 +1,6 @@
 package com.mopub.nativeads;
 
-import android.content.Context;
+import android.app.Activity;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.view.View;
@@ -9,28 +9,28 @@
 /**
  * An interface for creating ad views and rendering them using ad data.
  *
- * Normally you will use the subclass {@link com.mopub.nativeads.MoPubNativeAdRenderer} with {@link
+ * Normally you will use the subclass {@link MoPubStaticNativeAdRenderer} with {@link
  * com.mopub.nativeads.ViewBinder} to customize your ad view with your own layout. However, if you
  * wish to programmatically create or manage your ad view, you can implement {@code MoPubAdRenderer}
  * directly.
  *
  * @param <T> The ad payload type.
  */
-public interface MoPubAdRenderer<T> {
+public interface MoPubAdRenderer<T extends BaseNativeAd> {
     /**
      * Creates a new view to be used as an ad.
      *
      * This method is called when you call {@link com.mopub.nativeads.MoPubStreamAdPlacer#getAdView}
      * and the convertView is null. You must return a valid view.
      *
-     * @param context The context. Useful for creating a view.
+     * @param activity The activity. Useful for creating a view.
      * @param parent The parent that the view will eventually be attached to. You might use the
      * parent to determine layout parameters, but should return the view without attaching it to the
      * parent.
      * @return A new ad view.
      */
     @NonNull
-    View createAdView(@NonNull Context context, @Nullable ViewGroup parent);
+    View createAdView(@NonNull Activity activity, @Nullable ViewGroup parent);
 
     /**
      * Renders a view created by {@link #createAdView} by filling it with ad data.
@@ -39,4 +39,12 @@
      * @param ad The ad data that should be bound to the view.
      */
     void renderAdView(@NonNull View view, @NonNull T ad);
+
+    /**
+     * Determines if this renderer supports the type of native ad passed in.
+     *
+     * @param nativeAd The native ad to render.
+     * @return True if the renderer can render the native ad and false if it cannot.
+     */
+    boolean supports(@NonNull BaseNativeAd nativeAd);
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
index 6c71875d..47f19090 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
@@ -1,12 +1,14 @@
 package com.mopub.nativeads;
 
+import android.app.Activity;
 import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.view.View;
 
-import com.mopub.common.event.ErrorEvent;
-import com.mopub.common.event.MoPubEvents;
+import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.nativeads.NativeImageHelper.ImageListener;
 
 import org.json.JSONArray;
 import org.json.JSONException;
@@ -20,14 +22,14 @@
 import java.util.Map;
 import java.util.Set;
 
-import static com.mopub.common.util.Numbers.parseDouble;
 import static com.mopub.common.DataKeys.JSON_BODY_KEY;
-import static com.mopub.nativeads.NativeResponse.Parameter;
+import static com.mopub.common.util.Numbers.parseDouble;
+import static com.mopub.nativeads.NativeImageHelper.preCacheImages;
 
 public class MoPubCustomEventNative extends CustomEventNative {
 
     @Override
-    protected void loadNativeAd(@NonNull final Context context,
+    protected void loadNativeAd(@NonNull final Activity activity,
             @NonNull final CustomEventNativeListener customEventNativeListener,
             @NonNull final Map<String, Object> localExtras,
             @NonNull final Map<String, String> serverExtras) {
@@ -35,32 +37,88 @@ protected void loadNativeAd(@NonNull final Context context,
         Object json = localExtras.get(JSON_BODY_KEY);
         // null or non-JSONObjects should not be passed in localExtras as JSON_BODY_KEY
         if (!(json instanceof JSONObject)) {
-            customEventNativeListener.onNativeAdFailed(NativeErrorCode.INVALID_JSON);
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.INVALID_RESPONSE);
             return;
         }
 
-        final MoPubForwardingNativeAd moPubForwardingNativeAd =
-                new MoPubForwardingNativeAd(context.getApplicationContext(),
+        final MoPubStaticNativeAd moPubStaticNativeAd =
+                new MoPubStaticNativeAd(activity,
                         (JSONObject) json,
+                        new ImpressionTracker(activity),
+                        new NativeClickHandler(activity),
                         customEventNativeListener);
 
         try {
-            moPubForwardingNativeAd.loadAd();
+            moPubStaticNativeAd.loadAd();
         } catch (IllegalArgumentException e) {
             customEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
         }
     }
 
-    static class MoPubForwardingNativeAd extends BaseForwardingNativeAd {
+    static class MoPubStaticNativeAd extends StaticNativeAd {
+        enum Parameter {
+            IMPRESSION_TRACKER("imptracker", true),
+            CLICK_TRACKER("clktracker", true),
+
+            TITLE("title", false),
+            TEXT("text", false),
+            MAIN_IMAGE("mainimage", false),
+            ICON_IMAGE("iconimage", false),
+
+            CLICK_DESTINATION("clk", false),
+            FALLBACK("fallback", false),
+            CALL_TO_ACTION("ctatext", false),
+            STAR_RATING("starrating", false);
+
+            @NonNull final String name;
+            final boolean required;
+
+            Parameter(@NonNull final String name, final boolean required) {
+                this.name = name;
+                this.required = required;
+            }
+
+            @Nullable
+            static Parameter from(@NonNull final String name) {
+                for (final Parameter parameter : values()) {
+                    if (parameter.name.equals(name)) {
+                        return parameter;
+                    }
+                }
+
+                return null;
+            }
+
+            @NonNull
+            @VisibleForTesting
+            static final Set<String> requiredKeys = new HashSet<String>();
+            static {
+                for (final Parameter parameter : values()) {
+                    if (parameter.required) {
+                        requiredKeys.add(parameter.name);
+                    }
+                }
+            }
+        }
+
+        @VisibleForTesting
+        static final String PRIVACY_INFORMATION_CLICKTHROUGH_URL = "https://www.mopub.com/optout";
+
         @NonNull private final Context mContext;
         @NonNull private final CustomEventNativeListener mCustomEventNativeListener;
         @NonNull private final JSONObject mJsonObject;
+        @NonNull private final ImpressionTracker mImpressionTracker;
+        @NonNull private final NativeClickHandler mNativeClickHandler;
 
-        MoPubForwardingNativeAd(@NonNull final Context context,
+        MoPubStaticNativeAd(@NonNull final Context context,
                 @NonNull final JSONObject jsonBody,
+                @NonNull final ImpressionTracker impressionTracker,
+                @NonNull final NativeClickHandler nativeClickHandler,
                 @NonNull final CustomEventNativeListener customEventNativeListener) {
             mJsonObject = jsonBody;
-            mContext = context;
+            mContext = context.getApplicationContext();
+            mImpressionTracker = impressionTracker;
+            mNativeClickHandler = nativeClickHandler;
             mCustomEventNativeListener = customEventNativeListener;
         }
 
@@ -84,11 +142,12 @@ void loadAd() throws IllegalArgumentException {
                     addExtra(key, mJsonObject.opt(key));
                 }
             }
+            setPrivacyInformationIconClickThroughUrl(PRIVACY_INFORMATION_CLICKTHROUGH_URL);
 
             preCacheImages(mContext, getAllImageUrls(), new ImageListener() {
                 @Override
                 public void onImagesCached() {
-                    mCustomEventNativeListener.onNativeAdLoaded(MoPubForwardingNativeAd.this);
+                    mCustomEventNativeListener.onNativeAdLoaded(MoPubStaticNativeAd.this);
                 }
 
                 @Override
@@ -121,11 +180,12 @@ private void addInstanceVariable(@NonNull final Parameter key,
                     case IMPRESSION_TRACKER:
                         addImpressionTrackers(value);
                         break;
-                    case CLICK_TRACKER:
-                        break;
                     case CLICK_DESTINATION:
                         setClickDestinationUrl((String) value);
                         break;
+                    case CLICK_TRACKER:
+                        parseClickTrackers(value);
+                        break;
                     case CALL_TO_ACTION:
                         setCallToAction((String) value);
                         break;
@@ -151,19 +211,11 @@ private void addInstanceVariable(@NonNull final Parameter key,
             }
         }
 
-        private void addImpressionTrackers(final Object impressionTrackers) throws ClassCastException {
-            if (!(impressionTrackers instanceof JSONArray)) {
-                throw new ClassCastException("Expected impression trackers of type JSONArray.");
-            }
-
-            final JSONArray trackers = (JSONArray) impressionTrackers;
-            for (int i = 0; i < trackers.length(); i++) {
-                try {
-                    addImpressionTracker(trackers.getString(i));
-                } catch (JSONException e) {
-                    // This will only occur if we access a non-existent index in JSONArray.
-                    MoPubLog.d("Unable to parse impression trackers.");
-                }
+        private void parseClickTrackers(@NonNull final Object clickTrackers) {
+            if (clickTrackers instanceof JSONArray) {
+                addClickTrackers(clickTrackers);
+            } else {
+                addClickTracker((String) clickTrackers);
             }
         }
 
@@ -196,5 +248,35 @@ private boolean isImageKey(@Nullable final String name) {
             imageUrls.addAll(getExtrasImageUrls());
             return imageUrls;
         }
+
+        // Lifecycle Handlers
+        @Override
+        public void prepare(@NonNull final View view) {
+            mImpressionTracker.addView(view, this);
+            mNativeClickHandler.setOnClickListener(view, this);
+        }
+
+        @Override
+        public void clear(@NonNull final View view) {
+            mImpressionTracker.removeView(view);
+            mNativeClickHandler.clearOnClickListener(view);
+        }
+
+        @Override
+        public void destroy() {
+            mImpressionTracker.destroy();
+        }
+
+        // Event Handlers
+        @Override
+        public void recordImpression(@NonNull final View view) {
+            notifyAdImpressed();
+        }
+
+        @Override
+        public void handleClick(@Nullable final View view) {
+            notifyAdClicked();
+            mNativeClickHandler.openClickDestinationUrl(getClickDestinationUrl(), view);
+        }
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
new file mode 100644
index 00000000..7a439195
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
@@ -0,0 +1,936 @@
+package com.mopub.nativeads;
+
+import android.annotation.TargetApi;
+import android.app.Activity;
+import android.content.Context;
+import android.graphics.SurfaceTexture;
+import android.media.AudioManager;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.view.TextureView;
+import android.view.View;
+
+import com.mopub.common.DataKeys;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.event.BaseEvent;
+import com.mopub.common.event.Event;
+import com.mopub.common.event.EventDetails;
+import com.mopub.common.event.MoPubEvents;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Utils;
+import com.mopub.mobileads.MraidVideoPlayerActivity;
+import com.mopub.mobileads.VastManager;
+import com.mopub.mobileads.VastTracker;
+import com.mopub.mobileads.VastVideoConfig;
+import com.mopub.mobileads.VideoViewabilityTracker;
+import com.mopub.mobileads.factories.VastManagerFactory;
+import com.mopub.nativeads.NativeVideoController.NativeVideoProgressRunnable;
+import com.mopub.network.TrackingRequest;
+
+import org.json.JSONArray;
+import org.json.JSONObject;
+
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+import java.util.Set;
+
+import static com.mopub.common.DataKeys.EVENT_DETAILS;
+import static com.mopub.common.DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT;
+import static com.mopub.common.DataKeys.IMPRESSION_VISIBLE_MS;
+import static com.mopub.common.DataKeys.JSON_BODY_KEY;
+import static com.mopub.common.DataKeys.MAX_BUFFER_MS;
+import static com.mopub.common.DataKeys.PAUSE_VISIBLE_PERCENT;
+import static com.mopub.common.DataKeys.PLAY_VISIBLE_PERCENT;
+import static com.mopub.nativeads.NativeImageHelper.preCacheImages;
+import static com.mopub.nativeads.NativeVideoController.VisibilityTrackingEvent;
+
+@TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+public class MoPubCustomEventVideoNative extends CustomEventNative {
+
+    @Override
+    protected void loadNativeAd(@NonNull final Activity activity,
+            @NonNull final CustomEventNativeListener customEventNativeListener,
+            @NonNull final Map<String, Object> localExtras,
+            @NonNull final Map<String, String> serverExtras) {
+        final Object json = localExtras.get(JSON_BODY_KEY);
+        // null or non-JSONObjects should not be passed in localExtras as JSON_BODY_KEY
+        if (!(json instanceof JSONObject)) {
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.INVALID_RESPONSE);
+            return;
+        }
+
+        final Object eventDetailsObject = localExtras.get(EVENT_DETAILS);
+        final EventDetails eventDetails = eventDetailsObject instanceof EventDetails ?
+                (EventDetails) eventDetailsObject : null;
+
+        final VideoResponseHeaders videoResponseHeaders = new VideoResponseHeaders(serverExtras);
+        if (!videoResponseHeaders.hasValidHeaders()) {
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.INVALID_RESPONSE);
+            return;
+        }
+
+        final Object clickTrackingUrlFromHeaderObject =
+                localExtras.get(DataKeys.CLICK_TRACKING_URL_KEY);
+        // Ensure click tracking url is a non-empty String
+        if (!(clickTrackingUrlFromHeaderObject instanceof String) ||
+                TextUtils.isEmpty((String) clickTrackingUrlFromHeaderObject)) {
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
+            return;
+        }
+
+        final String clickTrackingUrlFromHeader = (String) clickTrackingUrlFromHeaderObject;
+        final MoPubVideoNativeAd videoNativeAd = new MoPubVideoNativeAd(activity, (JSONObject) json,
+                customEventNativeListener, videoResponseHeaders, eventDetails,
+                clickTrackingUrlFromHeader);
+        try {
+            videoNativeAd.loadAd();
+        } catch (IllegalArgumentException e) {
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
+        }
+    }
+
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+    public static class MoPubVideoNativeAd extends VideoNativeAd
+            implements VastManager.VastManagerListener, NativeVideoProgressRunnable.ProgressListener,
+            AudioManager.OnAudioFocusChangeListener {
+
+        enum Parameter {
+            IMPRESSION_TRACKER("imptracker", true),
+            CLICK_TRACKER("clktracker", true),
+            TITLE("title", false),
+            TEXT("text", false),
+            IMAGE_URL("mainimage", false),
+            ICON_URL("iconimage", false),
+            CLICK_DESTINATION("clk", false),
+            FALLBACK("fallback", false),
+            CALL_TO_ACTION("ctatext", false),
+            VAST_VIDEO("video", false);
+
+            @NonNull final String mName;
+            final boolean mRequired;
+
+            Parameter(@NonNull final String name, final boolean required) {
+                Preconditions.checkNotNull(name);
+                mName = name;
+                mRequired = required;
+            }
+
+            @Nullable
+            static Parameter from(@NonNull final String name) {
+                Preconditions.checkNotNull(name);
+                for (final Parameter parameter : values()) {
+                    if (parameter.mName.equals(name)) {
+                        return parameter;
+                    }
+                }
+
+                return null;
+            }
+
+            @NonNull
+            @VisibleForTesting
+            static final Set<String> requiredKeys = new HashSet<String>();
+            static {
+                for (final Parameter parameter : values()) {
+                    if (parameter.mRequired) {
+                        requiredKeys.add(parameter.mName);
+                    }
+                }
+            }
+        }
+
+        public enum VideoState {
+            CREATED, LOADING, BUFFERING, PAUSED, PLAYING, PLAYING_MUTED, ENDED, FAILED_LOAD
+        }
+
+        static final String PRIVACY_INFORMATION_CLICKTHROUGH_URL = "https://www.mopub.com/optout/";
+
+        @NonNull private final Context mContext;
+        @NonNull private final JSONObject mJsonObject;
+        @NonNull private VideoState mVideoState;
+        @NonNull private final VisibilityTracker mVideoVisibleTracking;
+        @NonNull private final String mMoPubClickTrackingUrl;
+        @NonNull private final CustomEventNativeListener mCustomEventNativeListener;
+        @NonNull private final VideoResponseHeaders mVideoResponseHeaders;
+        @NonNull private final NativeVideoControllerFactory mNativeVideoControllerFactory;
+        @Nullable private NativeVideoController mNativeVideoController;
+
+        // We need to hold a reference to the VastManager because internal VAST classes
+        // hold only weak refs to this.
+        @NonNull private final VastManager mVastManager;
+        @Nullable VastVideoConfig mVastVideoConfig;
+        @Nullable private MediaLayout mMediaLayout;
+        @Nullable private View mRootView;
+        @Nullable private final EventDetails mEventDetails;
+
+        private final long mId;
+        private boolean mNeedsSeek;
+        private boolean mNeedsPrepare;
+        private boolean mPauseCanBeTracked = false;
+        private boolean mResumeCanBeTracked = false;
+
+        // These variables influence video state.
+        private int mLatestVideoControllerState;
+        private boolean mError;
+        private boolean mLatestVisibility;
+        private boolean mMuted;
+        private boolean mEnded;
+
+        public MoPubVideoNativeAd(
+                @NonNull final Activity activity,
+                @NonNull final JSONObject jsonObject,
+                @NonNull final CustomEventNativeListener customEventNativeListener,
+                @NonNull final VideoResponseHeaders videoResponseHeaders,
+                @Nullable final EventDetails eventDetails,
+                @NonNull final String clickTrackingUrl) {
+            this(activity, jsonObject, customEventNativeListener, videoResponseHeaders,
+                    new VisibilityTracker(activity), new NativeVideoControllerFactory(),
+                    eventDetails, clickTrackingUrl, VastManagerFactory.create(activity.getApplicationContext(), false));
+        }
+
+        @VisibleForTesting
+        MoPubVideoNativeAd(
+                @NonNull final Activity activity,
+                @NonNull final JSONObject jsonObject,
+                @NonNull final CustomEventNativeListener customEventNativeListener,
+                @NonNull final VideoResponseHeaders videoResponseHeaders,
+                @NonNull final VisibilityTracker visibilityTracker,
+                @NonNull final NativeVideoControllerFactory nativeVideoControllerFactory,
+                @Nullable final EventDetails eventDetails,
+                @NonNull final String clickTrackingUrl,
+                @NonNull final VastManager vastManager) {
+            Preconditions.checkNotNull(activity);
+            Preconditions.checkNotNull(jsonObject);
+            Preconditions.checkNotNull(customEventNativeListener);
+            Preconditions.checkNotNull(videoResponseHeaders);
+            Preconditions.checkNotNull(visibilityTracker);
+            Preconditions.checkNotNull(nativeVideoControllerFactory);
+            Preconditions.checkNotNull(clickTrackingUrl);
+            Preconditions.checkNotNull(vastManager);
+
+            mContext = activity.getApplicationContext();
+            mJsonObject = jsonObject;
+            mCustomEventNativeListener = customEventNativeListener;
+            mVideoResponseHeaders = videoResponseHeaders;
+
+            mNativeVideoControllerFactory = nativeVideoControllerFactory;
+            mMoPubClickTrackingUrl = clickTrackingUrl;
+
+            mEventDetails = eventDetails;
+
+            mId = Utils.generateUniqueId();
+            mNeedsSeek = true;
+            mVideoState = VideoState.CREATED;
+
+            mNeedsPrepare = true;
+            mLatestVideoControllerState = NativeVideoController.STATE_IDLE;
+            mMuted = true;
+            mVideoVisibleTracking = visibilityTracker;
+            mVideoVisibleTracking.setVisibilityTrackerListener(new VisibilityTracker
+                    .VisibilityTrackerListener() {
+                @Override
+                public void onVisibilityChanged(final List<View> visibleViews,
+                        final List<View> invisibleViews) {
+                    if (!visibleViews.isEmpty() && !mLatestVisibility) { // State transition
+                        mLatestVisibility = true;
+                        maybeChangeState();
+                    } else if (!invisibleViews.isEmpty() && mLatestVisibility) { // state transition
+                        mLatestVisibility = false;
+                        maybeChangeState();
+                    }
+                }
+            });
+            mVastManager = vastManager;
+        }
+
+        void loadAd() throws IllegalArgumentException {
+            if (!containsRequiredKeys(mJsonObject)) {
+                throw new IllegalArgumentException("JSONObject did not contain required keys.");
+            }
+
+            final Iterator<String> keys = mJsonObject.keys();
+            while (keys.hasNext()) {
+                final String key = keys.next();
+                final Parameter parameter = Parameter.from(key);
+
+                if (parameter != null) {
+                    try {
+                        addInstanceVariable(parameter, mJsonObject.opt(key));
+                    } catch (ClassCastException e) {
+                        throw new IllegalArgumentException("JSONObject key (" + key
+                                + ") contained unexpected value.");
+                    }
+                } else {
+                    addExtra(key, mJsonObject.opt(key));
+                }
+            }
+            setPrivacyInformationIconClickThroughUrl(PRIVACY_INFORMATION_CLICKTHROUGH_URL);
+
+            preCacheImages(mContext, getAllImageUrls(), new NativeImageHelper.ImageListener() {
+                @Override
+                public void onImagesCached() {
+                    mVastManager.prepareVastVideoConfiguration(getVastVideo(),
+                            MoPubVideoNativeAd.this,
+                            mEventDetails == null ? null : mEventDetails.getDspCreativeId(),
+                            mContext);
+                }
+
+                @Override
+                public void onImagesFailedToCache(final NativeErrorCode errorCode) {
+                    mCustomEventNativeListener.onNativeAdFailed(errorCode);
+                }
+            });
+        }
+
+        @Override
+        public void onVastVideoConfigurationPrepared(@Nullable VastVideoConfig vastVideoConfig) {
+            if (vastVideoConfig == null) {
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.INVALID_RESPONSE);
+                return;
+            }
+
+            final List<NativeVideoController.VisibilityTrackingEvent> visibilityTrackingEvents =
+                    new ArrayList<VisibilityTrackingEvent>();
+
+            // Custom visibility tracking event from http response headers
+            final VisibilityTrackingEvent visibilityTrackingEvent = new VisibilityTrackingEvent();
+            visibilityTrackingEvent.strategy = new HeaderVisibilityStrategy(this);
+            visibilityTrackingEvent.minimumPercentageVisible =
+                    mVideoResponseHeaders.getImpressionMinVisiblePercent();
+            visibilityTrackingEvent.totalRequiredPlayTimeMs =
+                    mVideoResponseHeaders.getImpressionVisibleMs();
+            visibilityTrackingEvents.add(visibilityTrackingEvent);
+
+            // Visibility tracking event from http response Vast payload
+            mVastVideoConfig = vastVideoConfig;
+            final VideoViewabilityTracker vastVideoViewabilityTracker =
+                    mVastVideoConfig.getVideoViewabilityTracker();
+            if (vastVideoViewabilityTracker != null) {
+                final VisibilityTrackingEvent vastVisibilityTrackingEvent =
+                        new VisibilityTrackingEvent();
+                vastVisibilityTrackingEvent.strategy =
+                        new PayloadVisibilityStrategy(mContext,
+                                vastVideoViewabilityTracker.getTrackingUrl());
+                vastVisibilityTrackingEvent.minimumPercentageVisible =
+                        vastVideoViewabilityTracker.getPercentViewable();
+                vastVisibilityTrackingEvent.totalRequiredPlayTimeMs =
+                        vastVideoViewabilityTracker.getViewablePlaytimeMS();
+                visibilityTrackingEvents.add(vastVisibilityTrackingEvent);
+            }
+
+            Set<String> clickTrackers = new HashSet<String>();
+            clickTrackers.add(mMoPubClickTrackingUrl);
+            clickTrackers.addAll(getClickTrackers());
+
+            final ArrayList<VastTracker> vastClickTrackers = new ArrayList<VastTracker>();
+            for (String clickTrackingUrl : clickTrackers) {
+                vastClickTrackers.add(new VastTracker(clickTrackingUrl, false));
+            }
+            mVastVideoConfig.addClickTrackers(vastClickTrackers);
+
+            // Always use click destination URL from JSON "clk" value instead of from VAST document
+            mVastVideoConfig.setClickThroughUrl(getClickDestinationUrl());
+
+            mNativeVideoController = mNativeVideoControllerFactory.createForId(
+                    mId, mContext, visibilityTrackingEvents, mVastVideoConfig, mEventDetails);
+
+            mCustomEventNativeListener.onNativeAdLoaded(this);
+        }
+
+        private boolean containsRequiredKeys(@NonNull final JSONObject jsonObject) {
+            Preconditions.checkNotNull(jsonObject);
+
+            final Set<String> keys = new HashSet<String>();
+            final Iterator<String> jsonKeys = jsonObject.keys();
+            while (jsonKeys.hasNext()) {
+                keys.add(jsonKeys.next());
+            }
+
+            return keys.containsAll(Parameter.requiredKeys);
+        }
+
+        private void addInstanceVariable(@NonNull final Parameter key,
+                @Nullable final Object value) throws ClassCastException {
+            Preconditions.checkNotNull(key);
+            Preconditions.checkNotNull(value);
+
+            try {
+                switch (key) {
+                    case IMPRESSION_TRACKER:
+                        addImpressionTrackers(value);
+                        break;
+                    case TITLE:
+                        setTitle((String) value);
+                        break;
+                    case TEXT:
+                        setText((String) value);
+                        break;
+                    case IMAGE_URL:
+                        setMainImageUrl((String) value);
+                        break;
+                    case ICON_URL:
+                        setIconImageUrl((String) value);
+                        break;
+                    case CLICK_DESTINATION:
+                        setClickDestinationUrl((String) value);
+                        break;
+                    case CLICK_TRACKER:
+                        parseClickTrackers(value);
+                        break;
+                    case CALL_TO_ACTION:
+                        setCallToAction((String) value);
+                        break;
+                    case VAST_VIDEO:
+                        setVastVideo((String) value);
+                        break;
+                    default:
+                        MoPubLog.d("Unable to add JSON key to internal mapping: " + key.mName);
+                        break;
+                }
+            } catch (ClassCastException e) {
+                if (!key.mRequired) {
+                    MoPubLog.d("Ignoring class cast exception for optional key: " + key.mName);
+                } else {
+                    throw e;
+                }
+            }
+        }
+
+        private void parseClickTrackers(@NonNull final Object clickTrackers) {
+            if (clickTrackers instanceof JSONArray) {
+                addClickTrackers(clickTrackers);
+            } else {
+                addClickTracker((String) clickTrackers);
+            }
+        }
+
+        @Override
+        public void render(@NonNull MediaLayout mediaLayout) {
+            Preconditions.checkNotNull(mediaLayout);
+
+            mVideoVisibleTracking.addView(mRootView,
+                    mediaLayout,
+                    mVideoResponseHeaders.getPlayVisiblePercent(),
+                    mVideoResponseHeaders.getPauseVisiblePercent());
+
+            mMediaLayout = mediaLayout;
+            mMediaLayout.initForVideo();
+
+            mMediaLayout.setSurfaceTextureListener(new TextureView.SurfaceTextureListener() {
+                @Override
+                public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int
+                        height) {
+
+                    mNativeVideoController.setListener(MoPubVideoNativeAd.this);
+                    mNativeVideoController.setOnAudioFocusChangeListener(MoPubVideoNativeAd.this);
+                    mNativeVideoController.setProgressListener(MoPubVideoNativeAd.this);
+                    mNativeVideoController.setTextureView(mMediaLayout.getTextureView());
+                    mMediaLayout.resetProgress();
+
+                    // If we're returning to an ended video, make a note of that so we don't flash
+                    // a bunch of UI changes while we prepare the data.
+                    final long duration = mNativeVideoController.getDuration();
+                    final long currentPosition = mNativeVideoController.getCurrentPosition();
+                    if (mLatestVideoControllerState == NativeVideoController.STATE_ENDED
+                        || (duration > 0 && duration - currentPosition < NativeVideoController.RESUME_FINISHED_THRESHOLD)) {
+                        mEnded = true;
+                    }
+
+                    if (mNeedsPrepare) {
+                        mNeedsPrepare = false;
+                        mNativeVideoController.prepare(MoPubVideoNativeAd.this);
+                    }
+
+                    mNeedsSeek = true;
+                    maybeChangeState();
+                }
+
+                @Override
+                public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width,
+                        int height) { }
+
+                @Override
+                public boolean onSurfaceTextureDestroyed(final SurfaceTexture surface) {
+                    mNeedsPrepare = true;
+                    mNativeVideoController.release(MoPubVideoNativeAd.this);
+                    applyState(VideoState.PAUSED);
+                    return true;
+                }
+
+                @Override
+                public void onSurfaceTextureUpdated(SurfaceTexture surface) { }
+            });
+
+            mMediaLayout.setPlayButtonClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    mMediaLayout.resetProgress();
+                    mNativeVideoController.seekTo(0);
+                    mEnded = false;
+                    mNeedsSeek = false;
+                }
+            });
+
+            mMediaLayout.setMuteControlClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(final View v) {
+                    mMuted = !mMuted;
+                    maybeChangeState();
+                }
+            });
+
+            mMediaLayout.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(final View v) {
+                    prepareToLeaveView();
+                    mNativeVideoController.triggerImpressionTrackers();
+                    MraidVideoPlayerActivity.startNativeVideo(mContext, mId, mVastVideoConfig);
+                }
+            });
+
+            if (mNativeVideoController.getPlaybackState() == NativeVideoController.STATE_CLEARED) {
+                mNativeVideoController.prepare(this);
+            }
+
+            applyState(VideoState.PAUSED);
+        }
+
+        // Lifecycle Handlers
+        @Override
+        public void prepare(@NonNull final View view) {
+            Preconditions.checkNotNull(view);
+            mRootView = view;
+            mRootView.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    prepareToLeaveView();
+                    // No need to call notifyAdClicked since handleCtaClick does clickTracking
+                    mNativeVideoController.triggerImpressionTrackers();
+                    mNativeVideoController.handleCtaClick(mContext);
+                }
+            });
+        }
+
+        @Override
+        public void clear(@NonNull final View view) {
+            Preconditions.checkNotNull(view);
+            mNativeVideoController.clear();
+            cleanUpMediaLayout();
+        }
+
+        @Override
+        public void destroy() {
+            cleanUpMediaLayout();
+            mNativeVideoController.setPlayWhenReady(false);
+            mNativeVideoController.release(this);
+            NativeVideoController.remove(mId);
+            mVideoVisibleTracking.destroy();
+        }
+
+        @Override
+        public void onStateChanged(final boolean playWhenReady, final int playbackState) {
+            mLatestVideoControllerState = playbackState;
+            maybeChangeState();
+        }
+
+        @Override
+        public void onError(final Exception e) {
+            MoPubLog.w("Error playing back video.", e);
+            mError = true;
+            maybeChangeState();
+        }
+
+        @Override
+        public void updateProgress(final int progressTenthPercent) {
+            mMediaLayout.updateProgress(progressTenthPercent);
+        }
+
+        @Override
+        public void onAudioFocusChange(int focusChange) {
+            if (focusChange == AudioManager.AUDIOFOCUS_LOSS
+                    || focusChange == AudioManager.AUDIOFOCUS_LOSS_TRANSIENT) {
+                // Mute the video
+                mMuted = true;
+                maybeChangeState();
+            } else if (focusChange == AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK) {
+                // Lower the volume
+                mNativeVideoController.setAudioVolume(0.3f);
+            } else if (focusChange == AudioManager.AUDIOFOCUS_GAIN) {
+                // Resume playback
+                mNativeVideoController.setAudioVolume(1.0f);
+                maybeChangeState();
+            }
+        }
+
+        private void cleanUpMediaLayout() {
+            // When clearing, we also clear medialayout references so if we're rendered again
+            // with the same view, we reset the video state correctly.
+            if (mMediaLayout != null) {
+                mMediaLayout.setMode(MediaLayout.Mode.IMAGE);
+                mMediaLayout.setSurfaceTextureListener(null);
+                mMediaLayout.setPlayButtonClickListener(null);
+                mMediaLayout.setMuteControlClickListener(null);
+                mMediaLayout.setOnClickListener(null);
+                mVideoVisibleTracking.removeView(mMediaLayout);
+                mMediaLayout = null;
+            }
+        }
+
+        private void prepareToLeaveView() {
+            mNeedsSeek = true;
+            mNeedsPrepare = true;
+
+            // Clean up any references to this class when storing the NativeVideoController
+            // in a static location and starting a new activity
+            mNativeVideoController.setListener(null);
+            mNativeVideoController.setOnAudioFocusChangeListener(null);
+            mNativeVideoController.setProgressListener(null);
+            mNativeVideoController.clear();
+
+            applyState(VideoState.PAUSED, true);
+        }
+
+        private void maybeChangeState() {
+            VideoState newState = mVideoState;
+
+            if (mError) {
+                newState = VideoState.FAILED_LOAD;
+            } else if (mEnded) {
+                newState = VideoState.ENDED;
+            } else {
+                if (mLatestVideoControllerState == NativeVideoController.STATE_PREPARING
+                        || mLatestVideoControllerState == NativeVideoController.STATE_IDLE) {
+                    newState = VideoState.LOADING;
+                } else if (mLatestVideoControllerState == NativeVideoController.STATE_BUFFERING) {
+                    newState = VideoState.BUFFERING;
+                } else if (mLatestVideoControllerState == NativeVideoController.STATE_ENDED) {
+                    mEnded = true;
+                    newState = VideoState.ENDED;
+                } else if (mLatestVideoControllerState == NativeVideoController.STATE_READY) {
+                    if (mLatestVisibility) {
+                        newState = mMuted ? VideoState.PLAYING_MUTED : VideoState.PLAYING;
+                    } else {
+                        newState = VideoState.PAUSED;
+                    }
+                }
+            }
+
+            applyState(newState);
+        }
+
+        @VisibleForTesting
+        void applyState(@NonNull final VideoState videoState) {
+            applyState(videoState, false);
+        }
+
+        @VisibleForTesting
+        void applyState(@NonNull final VideoState videoState, boolean transitionToFullScreen) {
+            Preconditions.checkNotNull(videoState);
+
+            // Ignore the state change if video player is not ready to take state changes.
+            if (mVastVideoConfig == null || mNativeVideoController == null || mMediaLayout == null) {
+                return;
+            }
+
+            // Check and set mVideoState so any changes we make to exo state don't
+            // trigger a duplicate run of this.
+            if (mVideoState == videoState) {
+                return;
+            }
+            VideoState previousState = mVideoState;
+            mVideoState = videoState;
+
+            switch (videoState) {
+                case FAILED_LOAD:
+                    mVastVideoConfig.handleError(mContext, null, 0);
+                    mNativeVideoController.setAppAudioEnabled(false);
+                    mMediaLayout.setMode(MediaLayout.Mode.IMAGE);
+                    // Only log the failed to play event when the video has not started
+                    if (previousState != VideoState.PLAYING && previousState != VideoState.PLAYING_MUTED) {
+                        MoPubEvents.log(Event.createEventFromDetails(
+                                BaseEvent.Name.ERROR_FAILED_TO_PLAY,
+                                BaseEvent.Category.NATIVE_VIDEO,
+                                BaseEvent.SamplingRate.NATIVE_VIDEO,
+                                mEventDetails));
+                    }
+                    break;
+                case CREATED:
+                case LOADING:
+                    mNativeVideoController.setPlayWhenReady(true);
+                    mMediaLayout.setMode(MediaLayout.Mode.LOADING);
+                    break;
+                case BUFFERING:
+                    mNativeVideoController.setPlayWhenReady(true);
+                    mMediaLayout.setMode(MediaLayout.Mode.BUFFERING);
+                    break;
+                case PAUSED:
+                    if (transitionToFullScreen) {
+                        // Prevents firing resume trackers when we return from full-screen.
+                        mResumeCanBeTracked = false;
+                    }
+
+                    if (!transitionToFullScreen) {
+                        mNativeVideoController.setAppAudioEnabled(false);
+                        if (mPauseCanBeTracked) {
+                            TrackingRequest.makeVastTrackingHttpRequest(
+                                    mVastVideoConfig.getPauseTrackers(),
+                                    null, // VastErrorCode
+                                    (int) mNativeVideoController.getCurrentPosition(),
+                                    null, // Asset URI
+                                    mContext);
+                            mPauseCanBeTracked = false;
+                            mResumeCanBeTracked = true;
+                        }
+                    }
+                    mNativeVideoController.setPlayWhenReady(false);
+                    mMediaLayout.setMode(MediaLayout.Mode.PAUSED);
+                    break;
+                case PLAYING:
+                    handleResumeTrackersAndSeek(previousState);
+
+                    mNativeVideoController.setPlayWhenReady(true);
+                    mNativeVideoController.setAudioEnabled(true);
+                    mNativeVideoController.setAppAudioEnabled(true);
+                    mMediaLayout.setMode(MediaLayout.Mode.PLAYING);
+                    mMediaLayout.setMuteState(MediaLayout.MuteState.UNMUTED);
+                    break;
+                case PLAYING_MUTED:
+                    handleResumeTrackersAndSeek(previousState);
+
+                    mNativeVideoController.setPlayWhenReady(true);
+                    mNativeVideoController.setAudioEnabled(false);
+                    mNativeVideoController.setAppAudioEnabled(false);
+                    mMediaLayout.setMode(MediaLayout.Mode.PLAYING);
+                    mMediaLayout.setMuteState(MediaLayout.MuteState.MUTED);
+                    break;
+                case ENDED:
+                    if (mNativeVideoController.hasFinalFrame()) {
+                        mMediaLayout.setMainImageDrawable(mNativeVideoController.getFinalFrame());
+                    }
+                    mPauseCanBeTracked = false;
+                    mResumeCanBeTracked = false;
+                    mVastVideoConfig.handleComplete(mContext, 0);
+                    mNativeVideoController.setAppAudioEnabled(false);
+                    mMediaLayout.setMode(MediaLayout.Mode.FINISHED);
+                    mMediaLayout.updateProgress(1000);
+                    break;
+            }
+        }
+
+        private void handleResumeTrackersAndSeek(VideoState previousState) {
+            if (mResumeCanBeTracked
+                    && previousState != VideoState.PLAYING
+                    && previousState != VideoState.PLAYING_MUTED) {  // If we've played before, fire resume trackers.
+                TrackingRequest.makeVastTrackingHttpRequest(
+                        mVastVideoConfig.getResumeTrackers(),
+                        null, // VastErrorCode
+                        (int) mNativeVideoController.getCurrentPosition(),
+                        null, // Asset URI
+                        mContext
+                );
+                mResumeCanBeTracked = false;
+            }
+
+            mPauseCanBeTracked = true;
+
+            // We force a seek here to get keyframe rendering in ExtractorSampleSource.
+            if (mNeedsSeek) {
+                mNeedsSeek = false;
+                mNativeVideoController.seekTo(mNativeVideoController.getCurrentPosition());
+            }
+        }
+
+
+        private boolean isImageKey(@Nullable final String name) {
+            return name != null && name.toLowerCase(Locale.US).endsWith("image");
+        }
+
+        @NonNull
+        private List<String> getExtrasImageUrls() {
+            final List<String> extrasBitmapUrls = new ArrayList<String>(getExtras().size());
+            for (final Map.Entry<String, Object> entry : getExtras().entrySet()) {
+                if (isImageKey(entry.getKey()) && entry.getValue() instanceof String) {
+                    extrasBitmapUrls.add((String) entry.getValue());
+                }
+            }
+
+            return extrasBitmapUrls;
+        }
+
+        @NonNull
+        private List<String> getAllImageUrls() {
+            final List<String> imageUrls = new ArrayList<String>();
+            if (getMainImageUrl() != null) {
+                imageUrls.add(getMainImageUrl());
+            }
+            if (getIconImageUrl() != null) {
+                imageUrls.add(getIconImageUrl());
+            }
+
+            imageUrls.addAll(getExtrasImageUrls());
+            return imageUrls;
+        }
+
+        @Deprecated
+        @VisibleForTesting
+        boolean needsPrepare() {
+            return mNeedsPrepare;
+        }
+
+        @Deprecated
+        @VisibleForTesting
+        boolean hasEnded() {
+            return mEnded;
+        }
+
+        @Deprecated
+        @VisibleForTesting
+        boolean needsSeek() {
+            return mNeedsSeek;
+        }
+
+        @Deprecated
+        @VisibleForTesting
+        boolean isMuted() {
+            return mMuted;
+        }
+
+        @Deprecated
+        @VisibleForTesting
+        long getId() {
+            return mId;
+        }
+
+        @Deprecated
+        @VisibleForTesting
+        VideoState getVideoState() {
+            return mVideoState;
+        }
+
+        @Deprecated
+        @VisibleForTesting
+        void setLatestVisibility(boolean latestVisibility) {
+            mLatestVisibility = latestVisibility;
+        }
+
+        @Deprecated
+        @VisibleForTesting
+        void setMuted(boolean muted) {
+            mMuted = muted;
+        }
+
+        @Deprecated
+        @VisibleForTesting
+        MediaLayout getMediaLayout() {
+            return mMediaLayout;
+        }
+    }
+
+    @VisibleForTesting
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+    static class HeaderVisibilityStrategy implements VisibilityTrackingEvent.OnTrackedStrategy {
+        @NonNull private final WeakReference<MoPubVideoNativeAd> mMoPubVideoNativeAd;
+
+        HeaderVisibilityStrategy(@NonNull final MoPubVideoNativeAd moPubVideoNativeAd) {
+            mMoPubVideoNativeAd = new WeakReference<MoPubVideoNativeAd>(moPubVideoNativeAd);
+        }
+
+        @Override
+        public void execute() {
+            final MoPubVideoNativeAd moPubVideoNativeAd = mMoPubVideoNativeAd.get();
+            if (moPubVideoNativeAd != null) {
+                moPubVideoNativeAd.notifyAdImpressed();
+            }
+        }
+    }
+
+    @VisibleForTesting
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+    static class PayloadVisibilityStrategy implements VisibilityTrackingEvent.OnTrackedStrategy {
+        @NonNull private final Context mContext;
+        @NonNull private final String mUrl;
+
+        PayloadVisibilityStrategy(@NonNull final Context context, @NonNull final String url) {
+            mContext = context.getApplicationContext();
+            mUrl = url;
+        }
+
+        @Override
+        public void execute() {
+            TrackingRequest.makeTrackingHttpRequest(mUrl, mContext);
+        }
+    }
+
+    /**
+     * Created purely for the purpose of mocking to ease testing.
+     */
+    @VisibleForTesting
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+    static class NativeVideoControllerFactory {
+        public NativeVideoController createForId(final long id,
+                @NonNull final Context context,
+                @NonNull final List<VisibilityTrackingEvent> visibilityTrackingEvents,
+                @NonNull final VastVideoConfig vastVideoConfig,
+                @Nullable final EventDetails eventDetails) {
+            return NativeVideoController.createForId(id, context, visibilityTrackingEvents,
+                    vastVideoConfig, eventDetails);
+        }
+    }
+
+    @VisibleForTesting
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+    static class VideoResponseHeaders {
+        private boolean mHeadersAreValid;
+        private int mPlayVisiblePercent;
+        private int mPauseVisiblePercent;
+        private int mImpressionMinVisiblePercent;
+        private int mImpressionVisibleMs;
+        private int mMaxBufferMs;
+
+        VideoResponseHeaders(@NonNull final Map<String, String> serverExtras) {
+            try {
+                mPlayVisiblePercent = Integer.parseInt(serverExtras.get(PLAY_VISIBLE_PERCENT));
+                mPauseVisiblePercent = Integer.parseInt(serverExtras.get(PAUSE_VISIBLE_PERCENT));
+                mImpressionMinVisiblePercent =
+                        Integer.parseInt(serverExtras.get(IMPRESSION_MIN_VISIBLE_PERCENT));
+                mImpressionVisibleMs = Integer.parseInt(serverExtras.get(IMPRESSION_VISIBLE_MS));
+                mMaxBufferMs = Integer.parseInt(serverExtras.get(MAX_BUFFER_MS));
+                mHeadersAreValid = true;
+            } catch (NumberFormatException e) {
+                mHeadersAreValid = false;
+            }
+        }
+
+        boolean hasValidHeaders() {
+            return mHeadersAreValid;
+        }
+
+        int getPlayVisiblePercent() {
+            return mPlayVisiblePercent;
+        }
+
+        int getPauseVisiblePercent() {
+            return mPauseVisiblePercent;
+        }
+
+        int getImpressionMinVisiblePercent() {
+            return mImpressionMinVisiblePercent;
+        }
+
+        int getImpressionVisibleMs() {
+            return mImpressionVisibleMs;
+        }
+
+        int getMaxBufferMs() {
+            return mMaxBufferMs;
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
index 04123976..bcc9ccc3 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
@@ -1,9 +1,8 @@
 package com.mopub.nativeads;
 
-import android.content.Context;
+import android.app.Activity;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
-import android.view.View;
 
 import com.mopub.common.AdFormat;
 import com.mopub.common.Constants;
@@ -29,91 +28,65 @@
 import static com.mopub.nativeads.CustomEventNative.CustomEventNativeListener;
 import static com.mopub.nativeads.NativeErrorCode.CONNECTION_ERROR;
 import static com.mopub.nativeads.NativeErrorCode.EMPTY_AD_RESPONSE;
-import static com.mopub.nativeads.NativeErrorCode.INVALID_JSON;
 import static com.mopub.nativeads.NativeErrorCode.INVALID_REQUEST_URL;
+import static com.mopub.nativeads.NativeErrorCode.INVALID_RESPONSE;
+import static com.mopub.nativeads.NativeErrorCode.NATIVE_RENDERER_CONFIGURATION_ERROR;
 import static com.mopub.nativeads.NativeErrorCode.SERVER_ERROR_RESPONSE_CODE;
 import static com.mopub.nativeads.NativeErrorCode.UNSPECIFIED;
 
 public class MoPubNative {
 
     public interface MoPubNativeNetworkListener {
-        public void onNativeLoad(final NativeResponse nativeResponse);
-        public void onNativeFail(final NativeErrorCode errorCode);
+        void onNativeLoad(final NativeAd nativeAd);
+        void onNativeFail(final NativeErrorCode errorCode);
     }
 
-    static final MoPubNativeNetworkListener EMPTY_NETWORK_LISTENER = new
-            MoPubNativeNetworkListener() {
+    static final MoPubNativeNetworkListener EMPTY_NETWORK_LISTENER =
+            new MoPubNativeNetworkListener() {
         @Override
-        public void onNativeLoad(@NonNull final NativeResponse nativeResponse) {
+        public void onNativeLoad(@NonNull final NativeAd nativeAd) {
             // If this listener is invoked, it means that MoPubNative instance has been destroyed
-            // so destroy any leftover incoming NativeResponses
-            nativeResponse.destroy();
+            // so destroy any leftover incoming NativeAds
+            nativeAd.destroy();
         }
         @Override
         public void onNativeFail(final NativeErrorCode errorCode) {
         }
     };
 
-    static final MoPubNativeEventListener EMPTY_EVENT_LISTENER = new
-            MoPubNativeEventListener() {
-        @Override
-        public void onNativeImpression(@Nullable final View view) {
-        }
-        @Override
-        public void onNativeClick(@Nullable final View view) {
-        }
-    };
-
-    public interface MoPubNativeEventListener {
-        public void onNativeImpression(final View view);
-        public void onNativeClick(final View view);
-    }
-
-    /**
-     * @deprecated As of release 2.4, use {@link MoPubNativeEventListener} and
-     * {@link MoPubNativeNetworkListener} instead.
-     */
-    @Deprecated
-    public interface MoPubNativeListener extends MoPubNativeNetworkListener, MoPubNativeEventListener {
-    }
-
-    // must be an activity context since 3rd party networks need it
-    @NonNull private final WeakReference<Context> mContext;
+    // must be an activity since 3rd party networks need it
+    @NonNull private final WeakReference<Activity> mActivity;
     @NonNull private final String mAdUnitId;
     @NonNull private MoPubNativeNetworkListener mMoPubNativeNetworkListener;
-    @NonNull private MoPubNativeEventListener mMoPubNativeEventListener;
 
     // For small sets TreeMap, takes up less memory than HashMap
     @NonNull private Map<String, Object> mLocalExtras = new TreeMap<String, Object>();
     @NonNull private final AdRequest.Listener mVolleyListener;
     @Nullable private AdRequest mNativeRequest;
+    @NonNull AdRendererRegistry mAdRendererRegistry;
 
-    /**
-     * @deprecated As of release 2.4, use {@link MoPubNative(Context, String,
-     * MoPubNativeNetworkListener)} and {@link #setNativeEventListener(MoPubNativeEventListener)}
-     * instead.
-     */
-    @Deprecated
-    public MoPubNative(@NonNull final Context context,
+    public MoPubNative(@NonNull final Activity activity,
             @NonNull final String adUnitId,
-            @NonNull final MoPubNativeListener moPubNativeListener) {
-        this(context, adUnitId, (MoPubNativeNetworkListener) moPubNativeListener);
-        setNativeEventListener(moPubNativeListener);
+            @NonNull final MoPubNativeNetworkListener moPubNativeNetworkListener) {
+        this(activity, adUnitId, new AdRendererRegistry(), moPubNativeNetworkListener);
     }
 
-    public MoPubNative(@NonNull final Context context,
-                @NonNull final String adUnitId,
-                @NonNull final MoPubNativeNetworkListener moPubNativeNetworkListener) {
-        Preconditions.checkNotNull(context, "Context may not be null.");
+    @VisibleForTesting
+    public MoPubNative(@NonNull final Activity activity,
+            @NonNull final String adUnitId,
+            @NonNull AdRendererRegistry adRendererRegistry,
+            @NonNull final MoPubNativeNetworkListener moPubNativeNetworkListener) {
+        Preconditions.checkNotNull(activity, "Activity may not be null.");
         Preconditions.checkNotNull(adUnitId, "AdUnitId may not be null.");
+        Preconditions.checkNotNull(adRendererRegistry, "AdRendererRegistry may not be null.");
         Preconditions.checkNotNull(moPubNativeNetworkListener, "MoPubNativeNetworkListener may not be null.");
 
-        ManifestUtils.checkNativeActivitiesDeclared(context);
+        ManifestUtils.checkNativeActivitiesDeclared(activity);
 
-        mContext = new WeakReference<Context>(context);
+        mActivity = new WeakReference<Activity>(activity);
         mAdUnitId = adUnitId;
         mMoPubNativeNetworkListener = moPubNativeNetworkListener;
-        mMoPubNativeEventListener = EMPTY_EVENT_LISTENER;
+        mAdRendererRegistry = adRendererRegistry;
         mVolleyListener = new AdRequest.Listener() {
             @Override
             public void onSuccess(@NonNull final AdResponse response) {
@@ -127,22 +100,25 @@ public void onErrorResponse(@NonNull final VolleyError volleyError) {
         };
 
         // warm up cache for google play services info
-        fetchAdvertisingInfoAsync(context, null);
+        fetchAdvertisingInfoAsync(activity, null);
     }
 
-    public void setNativeEventListener(@Nullable final MoPubNativeEventListener nativeEventListener) {
-        mMoPubNativeEventListener = (nativeEventListener == null)
-                ? EMPTY_EVENT_LISTENER : nativeEventListener;
+    /**
+     * Registers an ad renderer for rendering a specific native ad format.
+     * Note that if multiple ad renderers support a specific native ad format, the first
+     * one registered will be used.
+     */
+    public void registerAdRenderer(MoPubAdRenderer moPubAdRenderer) {
+        mAdRendererRegistry.registerAdRenderer(moPubAdRenderer);
     }
 
     public void destroy() {
-        mContext.clear();
+        mActivity.clear();
         if (mNativeRequest != null) {
             mNativeRequest.cancel();
             mNativeRequest = null;
         }
         mMoPubNativeNetworkListener = EMPTY_NETWORK_LISTENER;
-        mMoPubNativeEventListener = EMPTY_EVENT_LISTENER;
     }
 
     public void setLocalExtras(@Nullable final Map<String, Object> localExtras) {
@@ -163,12 +139,12 @@ public void makeRequest(@Nullable final RequestParameters requestParameters) {
 
     public void makeRequest(@Nullable final RequestParameters requestParameters,
             @Nullable Integer sequenceNumber) {
-        final Context context = getContextOrDestroy();
-        if (context == null) {
+        final Activity activity = getActivityOrDestroy();
+        if (activity == null) {
             return;
         }
 
-        if (!DeviceUtils.isNetworkAvailable(context)) {
+        if (!DeviceUtils.isNetworkAvailable(activity)) {
             mMoPubNativeNetworkListener.onNativeFail(CONNECTION_ERROR);
             return;
         }
@@ -179,12 +155,12 @@ public void makeRequest(@Nullable final RequestParameters requestParameters,
     private void loadNativeAd(
             @Nullable final RequestParameters requestParameters,
             @Nullable final Integer sequenceNumber) {
-        final Context context = getContextOrDestroy();
-        if (context == null) {
+        final Activity activity = getActivityOrDestroy();
+        if (activity == null) {
             return;
         }
 
-        final NativeUrlGenerator generator = new NativeUrlGenerator(context)
+        final NativeUrlGenerator generator = new NativeUrlGenerator(activity)
                 .withAdUnitId(mAdUnitId)
                 .withRequest(requestParameters);
 
@@ -202,8 +178,8 @@ private void loadNativeAd(
     }
 
     void requestNativeAd(@Nullable final String endpointUrl) {
-        final Context context = getContextOrDestroy();
-        if (context == null) {
+        final Activity activity = getActivityOrDestroy();
+        if (activity == null) {
             return;
         }
 
@@ -212,42 +188,49 @@ void requestNativeAd(@Nullable final String endpointUrl) {
             return;
         }
 
-        mNativeRequest = new AdRequest(endpointUrl, AdFormat.NATIVE, mAdUnitId, context, mVolleyListener);
-        RequestQueue requestQueue = Networking.getRequestQueue(context);
+        mNativeRequest = new AdRequest(endpointUrl, AdFormat.NATIVE, mAdUnitId, activity, mVolleyListener);
+        RequestQueue requestQueue = Networking.getRequestQueue(activity);
         requestQueue.add(mNativeRequest);
     }
 
     private void onAdLoad(@NonNull final AdResponse response) {
-        final Context context = getContextOrDestroy();
-        if (context == null) {
+        final Activity activity = getActivityOrDestroy();
+        if (activity == null) {
             return;
         }
         final CustomEventNativeListener customEventNativeListener =
                 new CustomEventNativeListener() {
                     @Override
-                    public void onNativeAdLoaded(@NonNull final NativeAdInterface nativeAd) {
-                        final Context context = getContextOrDestroy();
-                        if (context == null) {
+                    public void onNativeAdLoaded(@NonNull final BaseNativeAd nativeAd) {
+                        final Activity activity = getActivityOrDestroy();
+                        if (activity == null) {
+                            return;
+                        }
+
+                        MoPubAdRenderer renderer = mAdRendererRegistry.getRendererForAd(nativeAd);
+                        if (renderer == null) {
+                            onNativeAdFailed(NATIVE_RENDERER_CONFIGURATION_ERROR);
                             return;
                         }
-                        mMoPubNativeNetworkListener.onNativeLoad(new NativeResponse(context,
-                                response.getImpressionTrackingUrl(),
-                                response.getClickTrackingUrl(),
-                                mAdUnitId,
-                                nativeAd,
-                                mMoPubNativeEventListener));
+
+                        mMoPubNativeNetworkListener.onNativeLoad(new NativeAd(activity,
+                                        response.getImpressionTrackingUrl(),
+                                        response.getClickTrackingUrl(),
+                                        mAdUnitId,
+                                        nativeAd,
+                                        renderer)
+                        );
                     }
 
                     @Override
                     public void onNativeAdFailed(final NativeErrorCode errorCode) {
+                        MoPubLog.v(String.format("Native Ad failed to load with error: %s.", errorCode));
                         requestNativeAd(response.getFailoverUrl());
                     }
                 };
 
-
-
         CustomEventNativeAdapter.loadNativeAd(
-                context,
+                activity,
                 mLocalExtras,
                 response,
                 customEventNativeListener
@@ -261,10 +244,10 @@ void onAdError(@NonNull final VolleyError volleyError) {
             MoPubNetworkError error = (MoPubNetworkError) volleyError;
             switch (error.getReason()) {
                 case BAD_BODY:
-                    mMoPubNativeNetworkListener.onNativeFail(INVALID_JSON);
+                    mMoPubNativeNetworkListener.onNativeFail(INVALID_RESPONSE);
                     return;
                 case BAD_HEADER_DATA:
-                    mMoPubNativeNetworkListener.onNativeFail(INVALID_JSON);
+                    mMoPubNativeNetworkListener.onNativeFail(INVALID_RESPONSE);
                     return;
                 case WARMING_UP:
                     // Used for the sample app to signal a toast.
@@ -285,7 +268,7 @@ void onAdError(@NonNull final VolleyError volleyError) {
             NetworkResponse response = volleyError.networkResponse;
             if (response != null && response.statusCode >= 500 && response.statusCode < 600) {
                 mMoPubNativeNetworkListener.onNativeFail(SERVER_ERROR_RESPONSE_CODE);
-            } else if (response == null && !DeviceUtils.isNetworkAvailable(mContext.get())) {
+            } else if (response == null && !DeviceUtils.isNetworkAvailable(mActivity.get())) {
                 MoPubLog.c(String.valueOf(MoPubErrorCode.NO_CONNECTION.toString()));
                 mMoPubNativeNetworkListener.onNativeFail(CONNECTION_ERROR);
             } else {
@@ -294,27 +277,20 @@ void onAdError(@NonNull final VolleyError volleyError) {
         }
     }
 
-    Context getContextOrDestroy() {
-        final Context context = mContext.get();
-        if (context == null) {
+    Activity getActivityOrDestroy() {
+        final Activity activity = mActivity.get();
+        if (activity == null) {
             destroy();
-            MoPubLog.d("Weak reference to Activity Context in MoPubNative became null. This instance" +
+            MoPubLog.d("Weak reference to Activity in MoPubNative became null. This instance" +
                     " of MoPubNative is destroyed and No more requests will be processed.");
         }
-        return context;
+        return activity;
     }
 
-    @NonNull
     @VisibleForTesting
     @Deprecated
+    @NonNull
     MoPubNativeNetworkListener getMoPubNativeNetworkListener() {
         return mMoPubNativeNetworkListener;
     }
-
-    @NonNull
-    @VisibleForTesting
-    @Deprecated
-    MoPubNativeEventListener getMoPubNativeEventListener() {
-        return mMoPubNativeEventListener;
-    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdPositioning.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdPositioning.java
index d3e1b6c9..4d92b43f 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdPositioning.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdPositioning.java
@@ -134,49 +134,4 @@ public static MoPubClientPositioning clientPositioning() {
     public static MoPubServerPositioning serverPositioning() {
         return new MoPubServerPositioning();
     }
-
-    /**
-     * Creates and returns a {@link MoPubNativeAdPositioning.Builder}.
-     *
-     * @return A new builder.
-     * @deprecated We recommend using {@link #serverPositioning()} and specifying positioning in
-     * the MoPub UI. If you still want to hard-code positioning information in your app,
-     * use {@link #clientPositioning} instead of this builder.
-     */
-    @NonNull
-    @Deprecated
-    public static Builder newBuilder() {
-        return new Builder();
-    }
-
-    /**
-     * A Builder class for the ad positioning.
-     */
-    @Deprecated
-    public static final class Builder extends MoPubClientPositioning {
-        @NonNull
-        @Override
-        public Builder addFixedPosition(final int position) {
-            super.addFixedPosition(position);
-            return this;
-        }
-
-        @NonNull
-        @Override
-        public Builder enableRepeatingPositions(final int interval) {
-            super.enableRepeatingPositions(interval);
-            return this;
-        }
-
-        /**
-         * Creates and returns a new immutable positioning object.
-         *
-         * @return A new positioning object.
-         */
-        @NonNull
-        @Deprecated
-        public MoPubClientPositioning build() {
-            return this;
-        }
-    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdRenderer.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdRenderer.java
deleted file mode 100644
index e48869ef..00000000
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdRenderer.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package com.mopub.nativeads;
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-
-import com.mopub.common.VisibleForTesting;
-
-import java.util.WeakHashMap;
-
-import static android.view.View.VISIBLE;
-
-/**
- * An implementation of {@link com.mopub.nativeads.MoPubAdRenderer} for rendering native ads.
- */
-public class MoPubNativeAdRenderer implements MoPubAdRenderer<NativeResponse> {
-    @NonNull private final ViewBinder mViewBinder;
-
-    // This is used instead of View.setTag, which causes a memory leak in 2.3
-    // and earlier: https://code.google.com/p/android/issues/detail?id=18273
-    @VisibleForTesting @NonNull final WeakHashMap<View, NativeViewHolder> mViewHolderMap;
-
-    /**
-     * Constructs a native ad renderer with a view binder.
-     *
-     * @param viewBinder The view binder to use when inflating and rendering an ad.
-     */
-    public MoPubNativeAdRenderer(@NonNull final ViewBinder viewBinder) {
-        mViewBinder = viewBinder;
-        mViewHolderMap = new WeakHashMap<View, NativeViewHolder>();
-    }
-
-    @Override
-    @NonNull
-    public View createAdView(@NonNull final Context context, @Nullable final ViewGroup parent) {
-        return LayoutInflater
-                .from(context)
-                .inflate(mViewBinder.layoutId, parent, false);
-    }
-
-    @Override
-    public void renderAdView(@NonNull final View view,
-            @NonNull final NativeResponse nativeResponse) {
-        NativeViewHolder nativeViewHolder = mViewHolderMap.get(view);
-        if (nativeViewHolder == null) {
-            nativeViewHolder = NativeViewHolder.fromViewBinder(view, mViewBinder);
-            mViewHolderMap.put(view, nativeViewHolder);
-        }
-
-        nativeViewHolder.update(nativeResponse);
-        nativeViewHolder.updateExtras(nativeResponse, mViewBinder);
-        nativeViewHolder.setViewVisibility(VISIBLE);
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
index df999462..21d2e3d2 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
@@ -1,6 +1,6 @@
 package com.mopub.nativeads;
 
-import android.content.Context;
+import android.app.Activity;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.support.v7.widget.LinearLayoutManager;
@@ -39,23 +39,23 @@
     @NonNull private ContentChangeStrategy mStrategy = INSERT_AT_END;
     @Nullable private MoPubNativeAdLoadedListener mAdLoadedListener;
 
-    public MoPubRecyclerAdapter(@NonNull Context context,
+    public MoPubRecyclerAdapter(@NonNull Activity activity,
             @NonNull RecyclerView.Adapter originalAdapter) {
-        this(context, originalAdapter, MoPubNativeAdPositioning.serverPositioning());
+        this(activity, originalAdapter, MoPubNativeAdPositioning.serverPositioning());
     }
 
-    public MoPubRecyclerAdapter(@NonNull Context context,
+    public MoPubRecyclerAdapter(@NonNull Activity activity,
             @NonNull RecyclerView.Adapter originalAdapter,
             @NonNull MoPubServerPositioning adPositioning) {
-        this(new MoPubStreamAdPlacer(context, adPositioning), originalAdapter,
-                new VisibilityTracker(context));
+        this(new MoPubStreamAdPlacer(activity, adPositioning), originalAdapter,
+                new VisibilityTracker(activity));
     }
 
-    public MoPubRecyclerAdapter(@NonNull Context context,
+    public MoPubRecyclerAdapter(@NonNull Activity activity,
             @NonNull RecyclerView.Adapter originalAdapter,
             @NonNull MoPubClientPositioning adPositioning) {
-        this(new MoPubStreamAdPlacer(context, adPositioning), originalAdapter,
-                new VisibilityTracker(context));
+        this(new MoPubStreamAdPlacer(activity, adPositioning), originalAdapter,
+                new VisibilityTracker(activity));
     }
 
     @VisibleForTesting
@@ -186,10 +186,14 @@ public void setAdLoadedListener(@Nullable final MoPubNativeAdLoadedListener list
     }
 
     /**
-     * Registers a view binder for rendering "static" native ads with images.
+     * Registers an ad renderer for rendering a specific native ad format. Note that if multiple ad
+     * renderers support a specific native ad format, the first one registered will be used.
      */
-    public void registerViewBinder(@NonNull ViewBinder viewBinder) {
-        mStreamAdPlacer.registerAdRenderer(new MoPubNativeAdRenderer(viewBinder), NATIVE_AD_VIEW_TYPE_BASE + 1);
+    public void registerAdRenderer(@NonNull MoPubAdRenderer adRenderer) {
+        if (!Preconditions.NoThrow.checkNotNull(adRenderer, "Cannot register a null adRenderer")) {
+            return;
+        }
+        mStreamAdPlacer.registerAdRenderer(adRenderer);
     }
 
     /**
@@ -394,13 +398,14 @@ public int getItemCount() {
     public RecyclerView.ViewHolder onCreateViewHolder(final ViewGroup parent, final int viewType) {
         if (viewType >= NATIVE_AD_VIEW_TYPE_BASE && viewType <= NATIVE_AD_VIEW_TYPE_BASE + mStreamAdPlacer.getAdViewTypeCount()) {
             // Create the view and a view holder.
-            final MoPubAdRenderer adRenderer = mStreamAdPlacer.getAdRendererForViewType(viewType);
+            final MoPubAdRenderer adRenderer = mStreamAdPlacer.getAdRendererForViewType(viewType - NATIVE_AD_VIEW_TYPE_BASE);
             if (adRenderer == null) {
                 MoPubLog.w("No view binder was registered for ads in MoPubRecyclerAdapter.");
                 // This will cause a null pointer exception.
                 return null;
             }
-            return new MoPubRecyclerViewHolder(adRenderer.createAdView(parent.getContext(), parent));
+            return new MoPubRecyclerViewHolder(
+                    adRenderer.createAdView((Activity) parent.getContext(), parent));
         }
 
         return mOriginalAdapter.onCreateViewHolder(parent, viewType);
@@ -408,9 +413,9 @@ public int getItemCount() {
 
     @Override
     public void onBindViewHolder(final RecyclerView.ViewHolder holder, final int position) {
-        Object adData = mStreamAdPlacer.getAdData(position);
-        if (adData != null) {
-            mStreamAdPlacer.bindAdView((NativeAdData) adData, holder.itemView);
+        Object adResponse = mStreamAdPlacer.getAdData(position);
+        if (adResponse != null) {
+            mStreamAdPlacer.bindAdView((NativeAd) adResponse, holder.itemView);
             return;
         }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStaticNativeAdRenderer.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStaticNativeAdRenderer.java
new file mode 100644
index 00000000..819d8d8f
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStaticNativeAdRenderer.java
@@ -0,0 +1,90 @@
+package com.mopub.nativeads;
+
+import android.app.Activity;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+
+import java.util.WeakHashMap;
+
+import static android.view.View.VISIBLE;
+
+/**
+ * An implementation of {@link com.mopub.nativeads.MoPubAdRenderer} for rendering native ads.
+ */
+public class MoPubStaticNativeAdRenderer implements MoPubAdRenderer<StaticNativeAd> {
+    @NonNull private final ViewBinder mViewBinder;
+
+    // This is used instead of View.setTag, which causes a memory leak in 2.3
+    // and earlier: https://code.google.com/p/android/issues/detail?id=18273
+    @VisibleForTesting @NonNull final WeakHashMap<View, StaticNativeViewHolder> mViewHolderMap;
+
+    /**
+     * Constructs a native ad renderer with a view binder.
+     *
+     * @param viewBinder The view binder to use when inflating and rendering an ad.
+     */
+    public MoPubStaticNativeAdRenderer(@NonNull final ViewBinder viewBinder) {
+        mViewBinder = viewBinder;
+        mViewHolderMap = new WeakHashMap<View, StaticNativeViewHolder>();
+    }
+
+    @Override
+    @NonNull
+    public View createAdView(@NonNull final Activity activity, @Nullable final ViewGroup parent) {
+        return LayoutInflater
+                .from(activity)
+                .inflate(mViewBinder.layoutId, parent, false);
+    }
+
+    @Override
+    public void renderAdView(@NonNull final View view,
+            @NonNull final StaticNativeAd staticNativeAd) {
+        StaticNativeViewHolder staticNativeViewHolder = mViewHolderMap.get(view);
+        if (staticNativeViewHolder == null) {
+            staticNativeViewHolder = StaticNativeViewHolder.fromViewBinder(view, mViewBinder);
+            mViewHolderMap.put(view, staticNativeViewHolder);
+        }
+
+        update(staticNativeViewHolder, staticNativeAd);
+        NativeRendererHelper.updateExtras(staticNativeViewHolder.mainView,
+                mViewBinder.extras,
+                staticNativeAd.getExtras());
+        setViewVisibility(staticNativeViewHolder, VISIBLE);
+    }
+
+    @Override
+    public boolean supports(@NonNull final BaseNativeAd nativeAd) {
+        Preconditions.checkNotNull(nativeAd);
+        return nativeAd instanceof StaticNativeAd;
+    }
+
+    private void update(@NonNull final StaticNativeViewHolder staticNativeViewHolder,
+            @NonNull final StaticNativeAd staticNativeAd) {
+        NativeRendererHelper.addTextView(staticNativeViewHolder.titleView,
+                staticNativeAd.getTitle());
+        NativeRendererHelper.addTextView(staticNativeViewHolder.textView, staticNativeAd.getText());
+        NativeRendererHelper.addTextView(staticNativeViewHolder.callToActionView,
+                staticNativeAd.getCallToAction());
+        NativeImageHelper.loadImageView(staticNativeAd.getMainImageUrl(),
+                staticNativeViewHolder.mainImageView);
+        NativeImageHelper.loadImageView(staticNativeAd.getIconImageUrl(),
+                staticNativeViewHolder.iconImageView);
+        NativeRendererHelper.addPrivacyInformationIcon(
+                staticNativeViewHolder.privacyInformationIconImageView,
+                staticNativeAd.getPrivacyInformationIconImageUrl(),
+                staticNativeAd.getPrivacyInformationIconClickThroughUrl());
+    }
+
+    private void setViewVisibility(@NonNull final StaticNativeViewHolder staticNativeViewHolder,
+            final int visibility) {
+        if (staticNativeViewHolder.mainView != null) {
+            staticNativeViewHolder.mainView.setVisibility(visibility);
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
index eeec32ee..2aacb163 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
@@ -1,5 +1,6 @@
 package com.mopub.nativeads;
 
+import android.app.Activity;
 import android.content.Context;
 import android.os.Handler;
 import android.support.annotation.NonNull;
@@ -50,15 +51,14 @@ public void onAdRemoved(final int position) {
                 }
             };
 
-    @NonNull private final Context mContext;
+    @NonNull private final Activity mActivity;
     @NonNull private final Handler mPlacementHandler;
     @NonNull private final Runnable mPlacementRunnable;
     @NonNull private final PositioningSource mPositioningSource;
     @NonNull private final NativeAdSource mAdSource;
-    @NonNull private final ImpressionTracker mImpressionTracker;
 
-    @NonNull private final HashMap<NativeResponse, WeakReference<View>> mViewMap;
-    @NonNull private final WeakHashMap<View, NativeResponse> mNativeResponseMap;
+    @NonNull private final HashMap<NativeAd, WeakReference<View>> mViewMap;
+    @NonNull private final WeakHashMap<View, NativeAd> mNativeAdMap;
 
     private boolean mHasReceivedPositions;
     @Nullable private PlacementData mPendingPlacementData;
@@ -66,8 +66,6 @@ public void onAdRemoved(final int position) {
     private boolean mHasPlacedAds;
     @NonNull private PlacementData mPlacementData;
 
-    private int adViewType = DEFAULT_AD_VIEW_TYPE;
-    @Nullable private MoPubAdRenderer mAdRenderer;
     @Nullable private String mAdUnitId;
 
     @NonNull private MoPubNativeAdLoadedListener mAdLoadedListener =
@@ -82,7 +80,7 @@ public void onAdRemoved(final int position) {
 
     private int mItemCount;
     // A buffer around the visible range where we'll place ads if possible.
-    private static final int RANGE_BUFFER = 10;
+    private static final int RANGE_BUFFER = 6;
     private boolean mNeedsPlacement;
 
     /**
@@ -92,65 +90,55 @@ public void onAdRemoved(final int position) {
      * wish to hard-code positions in your app, see {@link MoPubStreamAdPlacer(Context,
      * MoPubClientPositioning)}.
      *
-     * @param context The activity context.
+     * @param activity The activity.
      */
-    public MoPubStreamAdPlacer(@NonNull final Context context) {
+    public MoPubStreamAdPlacer(@NonNull final Activity activity) {
         // MoPubClientPositioning is mutable, so we must take care not to hold a
         // reference to it that might be subsequently modified by the caller.
-        this(context, MoPubNativeAdPositioning.serverPositioning());
+        this(activity, MoPubNativeAdPositioning.serverPositioning());
     }
 
     /**
      * Creates a new MoPubStreamAdPlacer object, using server positioning.
      *
-     * @param context The activity context.
+     * @param activity The activity.
      * @param adPositioning A positioning object for specifying where ads will be placed in your
      * stream. See {@link MoPubNativeAdPositioning#serverPositioning()}.
      */
-    public MoPubStreamAdPlacer(@NonNull final Context context,
+    public MoPubStreamAdPlacer(@NonNull final Activity activity,
             @NonNull final MoPubServerPositioning adPositioning) {
-        this(context,
-                new NativeAdSource(),
-                new ImpressionTracker(context),
-                new ServerPositioningSource(context));
+        this(activity, new NativeAdSource(), new ServerPositioningSource(activity));
     }
 
     /**
      * Creates a new MoPubStreamAdPlacer object, using client positioning.
      *
-     * @param context The activity context.
+     * @param activity The activity.
      * @param adPositioning A positioning object for specifying where ads will be placed in your
      * stream. See {@link MoPubNativeAdPositioning#clientPositioning()}.
      */
-    public MoPubStreamAdPlacer(@NonNull final Context context,
+    public MoPubStreamAdPlacer(@NonNull final Activity activity,
             @NonNull final MoPubClientPositioning adPositioning) {
         // MoPubClientPositioning is mutable, so we must take care not to hold a
         // reference to it that might be subsequently modified by the caller.
-        this(context,
-                new NativeAdSource(),
-                new ImpressionTracker(context),
-                new ClientPositioningSource(adPositioning));
+        this(activity, new NativeAdSource(), new ClientPositioningSource(adPositioning));
     }
 
     @VisibleForTesting
-    MoPubStreamAdPlacer(@NonNull final Context context,
+    MoPubStreamAdPlacer(@NonNull final Activity activity,
             @NonNull final NativeAdSource adSource,
-            @NonNull final ImpressionTracker impressionTracker,
             @NonNull final PositioningSource positioningSource) {
-        Preconditions.checkNotNull(context, "context is not allowed to be null");
+        Preconditions.checkNotNull(activity, "activity is not allowed to be null");
         Preconditions.checkNotNull(adSource, "adSource is not allowed to be null");
-        Preconditions.checkNotNull(impressionTracker, "impressionTracker is not allowed to be " +
-                "null");
         Preconditions.checkNotNull(positioningSource, "positioningSource is not allowed to be " +
                 "null");
 
-        mContext = context;
-        mImpressionTracker = impressionTracker;
+        mActivity = activity;
         mPositioningSource = positioningSource;
         mAdSource = adSource;
         mPlacementData = PlacementData.empty();
 
-        mNativeResponseMap = new WeakHashMap<>();
+        mNativeAdMap = new WeakHashMap<>();
         mViewMap = new HashMap<>();
 
         mPlacementHandler = new Handler();
@@ -170,33 +158,26 @@ public void run() {
     }
 
     /**
-     * Registers an ad renderer to use when displaying ads in your stream.
+     * Registers an ad renderer for rendering a specific native ad format in your stream.
+     * Note that if multiple ad renderers support a specific native ad format, the first
+     * one registered will be used.
      *
      * This renderer will automatically create and render your view when you call {@link
-     * #getAdView}. If you register a second renderer, it will replace the first, although this
-     * behavior is subject to change in a future SDK version.
+     * #getAdView}.
      *
      * @param adRenderer The ad renderer.
      */
     public void registerAdRenderer(@NonNull final MoPubAdRenderer adRenderer) {
-        registerAdRenderer(adRenderer, -1);
-    }
-
-    public void registerAdRenderer(@NonNull final MoPubAdRenderer adRenderer, int viewType) {
         if (!NoThrow.checkNotNull(adRenderer, "Cannot register a null adRenderer")) {
             return;
         }
-        adViewType = viewType;
-        mAdRenderer = adRenderer;
+
+        mAdSource.registerAdRenderer(adRenderer);
     }
 
     @Nullable
     public MoPubAdRenderer getAdRendererForViewType(int viewType) {
-        if (viewType == adViewType) {
-            return mAdRenderer;
-        }
-
-        return null;
+        return mAdSource.getAdRendererForViewType(viewType);
     }
 
     /**
@@ -247,8 +228,9 @@ public void loadAds(@NonNull final String adUnitId,
             return;
         }
 
-        if (mAdRenderer == null) {
-            MoPubLog.w("You must call registerAdRenderer before loading ads");
+        if (mAdSource.getAdRendererCount() == 0) {
+            MoPubLog.w("You must register at least 1 ad renderer by calling registerAdRenderer " +
+                    "before loading ads");
             return;
         }
 
@@ -279,7 +261,7 @@ public void onAdsAvailable() {
             }
         });
 
-        mAdSource.loadAds(mContext, adUnitId, requestParameters);
+        mAdSource.loadAds(mActivity, adUnitId, requestParameters);
     }
 
     @VisibleForTesting
@@ -384,7 +366,6 @@ public void clearAds() {
     public void destroy() {
         mPlacementHandler.removeMessages(0);
         mAdSource.clear();
-        mImpressionTracker.destroy();
         mPlacementData.clearAds();
     }
 
@@ -407,7 +388,7 @@ public Object getAdData(final int position) {
      * Gets the ad at the given position, or {@code null} if there is no ad at the given position.
      *
      * This method will attempt to reuse the convertView if it is not {@code null}, and will
-     * otherwise create it. See {@link MoPubAdRenderer#createAdView(Context, ViewGroup)}.
+     * otherwise create it. See {@link MoPubAdRenderer#createAdView(Activity, ViewGroup)}.
      *
      * @param position The position to place an ad into.
      * @param convertView A recycled view into which to render data, or {@code null}.
@@ -417,35 +398,33 @@ public Object getAdData(final int position) {
     @Nullable
     public View getAdView(final int position, @Nullable final View convertView,
             @Nullable final ViewGroup parent) {
-        final NativeAdData adData = mPlacementData.getPlacedAd(position);
-        if (adData == null) {
+        final NativeAd nativeAd = mPlacementData.getPlacedAd(position);
+        if (nativeAd == null) {
             return null;
         }
 
         final View view = (convertView != null) ?
-                convertView : adData.getAdRenderer().createAdView(mContext, parent);
-        bindAdView(adData, view);
+                convertView : nativeAd.createAdView(mActivity, parent);
+        bindAdView(nativeAd, view);
         return view;
     }
 
     /**
      * Given an ad and a view, attaches the ad data to the view and prepares the ad for display.
-     * @param adData the ad to bind.
+     * @param nativeAd the ad to bind.
      * @param adView the view to bind it to.
      */
-    public void bindAdView(@NonNull NativeAdData adData, @NonNull View adView) {
-        NativeResponse nativeResponse = adData.getAd();
-        WeakReference<View> mappedViewRef = mViewMap.get(nativeResponse);
+    public void bindAdView(@NonNull NativeAd nativeAd, @NonNull View adView) {
+        WeakReference<View> mappedViewRef = mViewMap.get(nativeAd);
         View mappedView = null;
         if (mappedViewRef != null) {
             mappedView = mappedViewRef.get();
         }
         if (!adView.equals(mappedView)) {
-            clearNativeResponse(mappedView);
-            clearNativeResponse(adView);
-            prepareNativeResponse(nativeResponse, adView);
-            //noinspection unchecked
-            adData.getAdRenderer().renderAdView(adView, nativeResponse);
+            clearNativeAd(mappedView);
+            clearNativeAd(adView);
+            prepareNativeAd(nativeAd, adView);
+            nativeAd.renderAdView(adView);
         }
     }
 
@@ -498,7 +477,7 @@ public int removeAdsInRange(int originalStartPosition, int originalEndPosition)
      * @see #getAdViewType
      */
     public int getAdViewTypeCount() {
-        return 1;
+        return mAdSource.getAdRendererCount();
     }
 
     /**
@@ -515,7 +494,12 @@ public int getAdViewTypeCount() {
      * @return The ad view type.
      */
     public int getAdViewType(final int position) {
-        return isAd(position) ? 1 : CONTENT_VIEW_TYPE;
+        NativeAd nativeAd = mPlacementData.getPlacedAd(position);
+        if (nativeAd == null) {
+            return CONTENT_VIEW_TYPE;
+        }
+
+        return mAdSource.getViewTypeForAd(nativeAd);
     }
 
     /**
@@ -706,54 +690,40 @@ private boolean tryPlaceAdsInRange(final int start, final int end) {
      * @return false if there is no ad available to be placed.
      */
     private boolean tryPlaceAd(final int position) {
-        final NativeResponse adResponse = mAdSource.dequeueAd();
-        if (adResponse == null) {
+        final NativeAd nativeAd = mAdSource.dequeueAd();
+        if (nativeAd == null) {
             return false;
         }
 
-        final NativeAdData adData = createAdData(adResponse);
-        mPlacementData.placeAd(position, adData);
+        mPlacementData.placeAd(position, nativeAd);
         mItemCount++;
 
         mAdLoadedListener.onAdLoaded(position);
         return true;
     }
 
-    @NonNull
-    private NativeAdData createAdData(@NonNull final NativeResponse adResponse) {
-        Preconditions.checkNotNull(mAdUnitId);
-        Preconditions.checkNotNull(mAdRenderer);
-
-        //noinspection ConstantConditions
-        return new NativeAdData(mAdUnitId, mAdRenderer, adResponse);
-    }
-
     /**
-     * Clears any native response click trackers and impression tracking are set up for this view.
+     * Clears any {@link NativeAd} click trackers and impression tracking are set up for this view.
      */
-    private void clearNativeResponse(@Nullable final View view) {
+    private void clearNativeAd(@Nullable final View view) {
         if (view == null) {
             return;
         }
-        mImpressionTracker.removeView(view);
-        final NativeResponse lastNativeResponse = mNativeResponseMap.get(view);
-        if (lastNativeResponse != null) {
-            lastNativeResponse.clear(view);
-            mNativeResponseMap.remove(view);
-            mViewMap.remove(lastNativeResponse);
+        final NativeAd lastNativeAd = mNativeAdMap.get(view);
+        if (lastNativeAd != null) {
+            lastNativeAd.clear(view);
+            mNativeAdMap.remove(view);
+            mViewMap.remove(lastNativeAd);
         }
     }
 
     /**
-     * Prepares a view and nativeresponse for display by attaching click handlers
+     * Prepares a view and {@link NativeAd} for display by attaching click handlers
      * and setting up impression tracking.
      */
-    private void prepareNativeResponse(@NonNull final NativeResponse nativeResponse, @NonNull final View view) {
-        mViewMap.put(nativeResponse, new WeakReference<View>(view));
-        mNativeResponseMap.put(view, nativeResponse);
-        if (!nativeResponse.isOverridingImpressionTracker()) {
-            mImpressionTracker.addView(view, nativeResponse);
-        }
-        nativeResponse.prepare(view);
+    private void prepareNativeAd(@NonNull final NativeAd nativeAd, @NonNull final View view) {
+        mViewMap.put(nativeAd, new WeakReference<View>(view));
+        mNativeAdMap.put(view, nativeAd);
+        nativeAd.prepare(view);
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubVideoNativeAdRenderer.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubVideoNativeAdRenderer.java
new file mode 100644
index 00000000..a4a3da39
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubVideoNativeAdRenderer.java
@@ -0,0 +1,93 @@
+package com.mopub.nativeads;
+
+import android.app.Activity;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+
+import java.util.WeakHashMap;
+
+import static android.view.View.VISIBLE;
+
+public class MoPubVideoNativeAdRenderer implements MoPubAdRenderer<VideoNativeAd> {
+    @NonNull private final MediaViewBinder mMediaViewBinder;
+
+    // This is used instead of View.setTag, which causes a memory leak in 2.3
+    // and earlier: https://code.google.com/p/android/issues/detail?id=18273
+    @VisibleForTesting
+    @NonNull final WeakHashMap<View, MediaViewHolder> mMediaViewHolderMap;
+
+    /**
+     * Constructs a native ad renderer with a view binder.
+     *
+     * @param mediaViewBinder The view binder to use when inflating and rendering an ad.
+     */
+    public MoPubVideoNativeAdRenderer(@NonNull final MediaViewBinder mediaViewBinder) {
+        mMediaViewBinder = mediaViewBinder;
+        mMediaViewHolderMap = new WeakHashMap<View, MediaViewHolder>();
+    }
+
+    @Override
+    @NonNull
+    public View createAdView(@NonNull final Activity activity, @Nullable final ViewGroup parent) {
+        return LayoutInflater
+                .from(activity)
+                .inflate(mMediaViewBinder.layoutId, parent, false);
+    }
+
+    @Override
+    public void renderAdView(@NonNull final View view,
+            @NonNull final VideoNativeAd videoNativeAd) {
+        MediaViewHolder mediaViewHolder = mMediaViewHolderMap.get(view);
+        if (mediaViewHolder == null) {
+            mediaViewHolder = MediaViewHolder.fromViewBinder(view, mMediaViewBinder);
+            mMediaViewHolderMap.put(view, mediaViewHolder);
+        }
+
+        update(mediaViewHolder, videoNativeAd);
+        NativeRendererHelper.updateExtras(mediaViewHolder.mainView, mMediaViewBinder.extras, videoNativeAd.getExtras());
+        setViewVisibility(mediaViewHolder, VISIBLE);
+
+        MediaLayout mediaLayout = (MediaLayout) view.findViewById(mMediaViewBinder.mediaLayoutId);
+        videoNativeAd.render(mediaLayout);
+    }
+
+    @Override
+    public boolean supports(@NonNull final BaseNativeAd nativeAd) {
+        Preconditions.checkNotNull(nativeAd);
+        return nativeAd instanceof VideoNativeAd;
+    }
+
+    private void update(@NonNull final MediaViewHolder mediaViewHolder,
+            @NonNull final VideoNativeAd videoNativeAd) {
+        NativeRendererHelper.addTextView(mediaViewHolder.titleView,
+                videoNativeAd.getTitle());
+        NativeRendererHelper.addTextView(mediaViewHolder.textView, videoNativeAd.getText());
+        NativeRendererHelper.addCtaButton(mediaViewHolder.callToActionView,
+                mediaViewHolder.mainView, videoNativeAd.getCallToAction()
+        );
+        if (mediaViewHolder.mediaLayout != null) {
+            NativeImageHelper.loadImageView(videoNativeAd.getMainImageUrl(),
+                    mediaViewHolder.mediaLayout.getMainImageView());
+        }
+        NativeImageHelper.loadImageView(videoNativeAd.getIconImageUrl(),
+                mediaViewHolder.iconImageView);
+        NativeRendererHelper.addPrivacyInformationIcon(
+                mediaViewHolder.privacyInformationIconImageView,
+                videoNativeAd.getPrivacyInformationIconImageUrl(),
+                videoNativeAd.getPrivacyInformationIconClickThroughUrl());
+    }
+
+    private void setViewVisibility(@NonNull final MediaViewHolder mediaViewHolder,
+            final int visibility) {
+        if (mediaViewHolder.mainView != null) {
+            mediaViewHolder.mainView.setVisibility(visibility);
+        }
+    }
+}
+
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAd.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAd.java
new file mode 100644
index 00000000..08124786
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAd.java
@@ -0,0 +1,220 @@
+package com.mopub.nativeads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.mopub.common.VisibleForTesting;
+import com.mopub.nativeads.MoPubCustomEventNative.MoPubStaticNativeAd;
+import com.mopub.nativeads.MoPubCustomEventVideoNative.MoPubVideoNativeAd;
+import com.mopub.network.AdResponse;
+import com.mopub.network.TrackingRequest;
+
+import java.util.HashSet;
+import java.util.Set;
+
+import static com.mopub.nativeads.BaseNativeAd.NativeEventListener;
+
+/**
+ * This class represents a native ad instance returned from the MoPub Ad Server, MoPub Exchange, or
+ * a mediated native ad network. This class can be used to create and render a {@link View} that
+ * displays a native ad, tracking impressions and clicks for it.
+ *
+ * Using {@link MoPubStreamAdPlacer}, you can automatically have {@link NativeAd}s rendered into
+ * {@link View}s and inserted into your app's content stream without manipulating this class
+ * directly.
+ *
+ * In general you should get instances of {@link NativeAd} from {@link MoPubNative} instances in its
+ * {@link MoPubNative.MoPubNativeNetworkListener#onAdLoad(AdResponse)} callback
+ * and should not construct them directly.
+ *
+ * When you have a {@link NativeAd} instance and wish to show a view you should:
+ *
+ * 1. Call {@link #createAdView(Activity, ViewGroup)} to inflate a {@link View} that can show this ad.
+ * 2. Call {@link #renderAdView(View)} with a compatible {@link View} to render the ad data into the view.
+ * 3. Just before the ad is shown to the user, call {@link #prepare(View)}.
+ * 4. When the ad view is no longer shown to the user, call {@link #clear(View)}. You can later
+ *    call {@link #prepare(View)} again if the ad will be shown to users.
+ * 5. When the ad will never be shown again, call {@link #destroy()}.
+ */
+public class NativeAd {
+
+    /**
+     * Listen for MoPub specific click and impression events
+     */
+    public interface MoPubNativeEventListener {
+        void onImpression(final View view);
+        void onClick(final View view);
+    }
+
+    @NonNull private final Context mContext;
+    @NonNull private final BaseNativeAd mBaseNativeAd;
+    @NonNull private final MoPubAdRenderer mMoPubAdRenderer;
+    @NonNull private final Set<String> mImpressionTrackers;
+    @NonNull private final Set<String> mClickTrackers;
+    @NonNull private final String mAdUnitId;
+    @Nullable private MoPubNativeEventListener mMoPubNativeEventListener;
+
+    private boolean mRecordedImpression;
+    private boolean mIsClicked;
+    private boolean mIsDestroyed;
+
+    public NativeAd(@NonNull final Context context,
+            @NonNull final String moPubImpressionTrackerUrl,
+            @NonNull final String moPubClickTrackerUrl,
+            @NonNull final String adUnitId,
+            @NonNull final BaseNativeAd baseNativeAd,
+            @NonNull final MoPubAdRenderer moPubAdRenderer) {
+        mContext = context.getApplicationContext();
+
+        mAdUnitId = adUnitId;
+
+        mImpressionTrackers = new HashSet<String>();
+        mImpressionTrackers.add(moPubImpressionTrackerUrl);
+        mImpressionTrackers.addAll(baseNativeAd.getImpressionTrackers());
+
+        mClickTrackers = new HashSet<String>();
+        mClickTrackers.add(moPubClickTrackerUrl);
+        mClickTrackers.addAll(baseNativeAd.getClickTrackers());
+
+        mBaseNativeAd = baseNativeAd;
+        mBaseNativeAd.setNativeEventListener(new NativeEventListener() {
+            @Override
+            public void onAdImpressed() {
+                recordImpression(null);
+            }
+
+            @Override
+            public void onAdClicked() {
+                handleClick(null);
+            }
+        });
+
+        mMoPubAdRenderer = moPubAdRenderer;
+    }
+
+    @Override
+    public String toString() {
+        final StringBuilder stringBuilder = new StringBuilder("\n");
+        stringBuilder.append("impressionTrackers").append(":").append(mImpressionTrackers).append("\n");
+        stringBuilder.append("clickTrackers").append(":").append(mClickTrackers).append("\n");
+        stringBuilder.append("recordedImpression").append(":").append(mRecordedImpression).append("\n");
+        stringBuilder.append("isClicked").append(":").append(mIsClicked).append("\n");
+        stringBuilder.append("isDestroyed").append(":").append(mIsDestroyed).append("\n");
+        return stringBuilder.toString();
+    }
+
+    public void setMoPubNativeEventListener(@Nullable final MoPubNativeEventListener moPubNativeEventListener) {
+        mMoPubNativeEventListener = moPubNativeEventListener;
+    }
+
+    @NonNull
+    public String getAdUnitId() {
+        return mAdUnitId;
+    }
+
+    public boolean isDestroyed() {
+        return mIsDestroyed;
+    }
+
+    /**
+     * Returns the {@link BaseNativeAd} object for this {@link NativeAd}. This object is created by
+     * a {@link CustomEventNative} subclass after a successful ad request and is specific to the ad
+     * source. If it comes from the MoPub Exchange or is a directly-served ad it will be of the type
+     * {@link MoPubStaticNativeAd} or {@link MoPubVideoNativeAd}. If it is returned by a mediated ad
+     * network it may have another type.
+     */
+    @NonNull
+    public BaseNativeAd getBaseNativeAd() {
+        return mBaseNativeAd;
+    }
+
+    @NonNull
+    public View createAdView(@NonNull final Activity activity, @Nullable final ViewGroup parent) {
+        return mMoPubAdRenderer.createAdView(activity, parent);
+    }
+
+    public void renderAdView(View view) {
+        //noinspection unchecked
+        mMoPubAdRenderer.renderAdView(view, mBaseNativeAd);
+    }
+
+    @NonNull
+    public MoPubAdRenderer getMoPubAdRenderer() {
+        return mMoPubAdRenderer;
+    }
+
+    // Lifecycle Handlers
+
+    /**
+     * Prepares the {@link NativeAd} to be seen on screen. You should call this method after calling
+     * {@link #renderAdView(View)} with the same {@link View} and before the ad is shown on-screen.
+     * This method is commonly used to initialize impression tracking and other state associated
+     * with the {@link View}.
+     */
+    public void prepare(@NonNull final View view) {
+        if (mIsDestroyed) {
+            return;
+        }
+
+        mBaseNativeAd.prepare(view);
+    }
+
+    /**
+     * Clears {@link NativeAd} state associated with this {@link View}. Call this when the {@link NativeAd} is no
+     * longer seen by a user. If you would like to render a different {@link NativeAd} into the same View,
+     * you must call this method first.
+     */
+    public void clear(@NonNull final View view) {
+        if (mIsDestroyed) {
+            return;
+        }
+
+        mBaseNativeAd.clear(view);
+    }
+
+    /**
+     * Cleans up all {@link NativeAd} state. Call this method when the {@link NativeAd} will never be shown to a
+     * user again.
+     */
+    public void destroy() {
+        if (mIsDestroyed) {
+            return;
+        }
+
+        mBaseNativeAd.destroy();
+        mIsDestroyed = true;
+    }
+
+    // Event Handlers
+    @VisibleForTesting
+    void recordImpression(@Nullable final View view) {
+        if (mRecordedImpression || mIsDestroyed) {
+            return;
+        }
+
+        TrackingRequest.makeTrackingHttpRequest(mImpressionTrackers, mContext);
+        if (mMoPubNativeEventListener != null) {
+            mMoPubNativeEventListener.onImpression(view);
+        }
+
+        mRecordedImpression = true;
+    }
+
+    @VisibleForTesting
+    void handleClick(@Nullable final View view) {
+        if (mIsClicked || mIsDestroyed) {
+            return;
+        }
+
+        TrackingRequest.makeTrackingHttpRequest(mClickTrackers, mContext);
+        if (mMoPubNativeEventListener != null) {
+            mMoPubNativeEventListener.onClick(view);
+        }
+
+        mIsClicked = true;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdData.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdData.java
index 1f110083..8ecc0be3 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdData.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdData.java
@@ -8,11 +8,11 @@
 class NativeAdData {
     @NonNull private final String adUnitId;
     @NonNull private final MoPubAdRenderer adRenderer;
-    @NonNull private final NativeResponse adResponse;
+    @NonNull private final NativeAd adResponse;
 
     NativeAdData(@NonNull final String adUnitId,
             @NonNull final MoPubAdRenderer adRenderer,
-            @NonNull final NativeResponse adResponse) {
+            @NonNull final NativeAd adResponse) {
         this.adUnitId = adUnitId;
         this.adRenderer = adRenderer;
         this.adResponse = adResponse;
@@ -29,7 +29,7 @@ MoPubAdRenderer getAdRenderer() {
     }
 
     @NonNull
-    NativeResponse getAd() {
+    NativeAd getAd() {
         return adResponse;
     }
 }
\ No newline at end of file
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdInterface.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdInterface.java
deleted file mode 100644
index 2b52e576..00000000
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdInterface.java
+++ /dev/null
@@ -1,62 +0,0 @@
-package com.mopub.nativeads;
-
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.view.View;
-
-import java.util.Map;
-import java.util.Set;
-
-import static com.mopub.nativeads.BaseForwardingNativeAd.NativeEventListener;
-
-interface NativeAdInterface {
-    // Getters
-    @Nullable
-    String getMainImageUrl();
-
-    @Nullable
-    String getIconImageUrl();
-
-    @Nullable
-    String getClickDestinationUrl();
-
-    @Nullable
-    String getCallToAction();
-
-    @Nullable
-    String getTitle();
-
-    @Nullable
-    String getText();
-
-    @Nullable
-    Double getStarRating();
-
-    @NonNull
-    Set<String> getImpressionTrackers();
-
-    int getImpressionMinPercentageViewed();
-
-    int getImpressionMinTimeViewed();
-
-    boolean isOverridingClickTracker();
-
-    boolean isOverridingImpressionTracker();
-
-    // Extras Getters
-    @Nullable
-    Object getExtra(final String key);
-
-    @NonNull
-    Map<String, Object> getExtras();
-
-    // Setters
-    void setNativeEventListener(@Nullable final NativeEventListener nativeEventListener);
-
-    // Event Handlers
-    void prepare(@NonNull final View view);
-    void recordImpression();
-    void handleClick(@Nullable final View view);
-    void clear(@NonNull final View view);
-    void destroy();
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdSource.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdSource.java
index 6e6a4fd8..7d2b43be 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdSource.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdSource.java
@@ -1,6 +1,6 @@
 package com.mopub.nativeads;
 
-import android.content.Context;
+import android.app.Activity;
 import android.os.Handler;
 import android.os.SystemClock;
 import android.support.annotation.NonNull;
@@ -30,13 +30,16 @@
  * This class is not thread safe and should only be called from the UI thread.
  */
 class NativeAdSource {
-    private static final int CACHE_LIMIT = 3;
+    /**
+     * Number of ads to cache
+     */
+    private static final int CACHE_LIMIT = 1;
+
     private static final int EXPIRATION_TIME_MILLISECONDS = 15 * 60 * 1000; // 15 minutes
-    private static final int DEFAULT_RETRY_TIME_MILLISECONDS = 1000; // 1 second
     private static final int MAXIMUM_RETRY_TIME_MILLISECONDS = 5 * 60 * 1000; // 5 minutes.
-    private static final double EXPONENTIAL_BACKOFF_FACTOR = 2.0;
+    @VisibleForTesting static final int[] RETRY_TIME_ARRAY_MILLISECONDS = new int[]{1000, 3000, 5000, 25000, 60000, MAXIMUM_RETRY_TIME_MILLISECONDS};
 
-    @NonNull private final List<TimestampWrapper<NativeResponse>> mNativeAdCache;
+    @NonNull private final List<TimestampWrapper<NativeAd>> mNativeAdCache;
     @NonNull private final Handler mReplenishCacheHandler;
     @NonNull private final Runnable mReplenishCacheRunnable;
     @NonNull private final MoPubNativeNetworkListener mMoPubNativeNetworkListener;
@@ -44,7 +47,7 @@
     @VisibleForTesting boolean mRequestInFlight;
     @VisibleForTesting boolean mRetryInFlight;
     @VisibleForTesting int mSequenceNumber;
-    @VisibleForTesting int mRetryTimeMilliseconds;
+    @VisibleForTesting int mCurrentRetries;
 
     @Nullable private AdSourceListener mAdSourceListener;
 
@@ -52,6 +55,8 @@
     @Nullable private RequestParameters mRequestParameters;
     @Nullable private MoPubNative mMoPubNative;
 
+    @NonNull private final AdRendererRegistry mAdRendererRegistry;
+
     /**
      * A listener for when ads are available for dequeueing.
      */
@@ -63,12 +68,15 @@
     }
 
     NativeAdSource() {
-        this(new ArrayList<TimestampWrapper<NativeResponse>>(CACHE_LIMIT), new Handler());
+        this(new ArrayList<TimestampWrapper<NativeAd>>(CACHE_LIMIT),
+                new Handler(),
+                new AdRendererRegistry());
     }
 
     @VisibleForTesting
-    NativeAdSource(@NonNull final List<TimestampWrapper<NativeResponse>> nativeAdCache,
-            @NonNull final Handler replenishCacheHandler) {
+    NativeAdSource(@NonNull final List<TimestampWrapper<NativeAd>> nativeAdCache,
+            @NonNull final Handler replenishCacheHandler,
+            @NonNull AdRendererRegistry adRendererRegistry) {
         mNativeAdCache = nativeAdCache;
         mReplenishCacheHandler = replenishCacheHandler;
         mReplenishCacheRunnable = new Runnable() {
@@ -79,10 +87,12 @@ public void run() {
             }
         };
 
+        mAdRendererRegistry = adRendererRegistry;
+
         // Construct native URL and start filling the cache
         mMoPubNativeNetworkListener = new MoPubNativeNetworkListener() {
             @Override
-            public void onNativeLoad(@NonNull final NativeResponse nativeResponse) {
+            public void onNativeLoad(@NonNull final NativeAd nativeAd) {
                 // This can be null if the ad source was cleared as the AsyncTask is posting
                 // back to the UI handler. Drop this response.
                 if (mMoPubNative == null) {
@@ -93,7 +103,7 @@ public void onNativeLoad(@NonNull final NativeResponse nativeResponse) {
                 mSequenceNumber++;
                 resetRetryTime();
 
-                mNativeAdCache.add(new TimestampWrapper<NativeResponse>(nativeResponse));
+                mNativeAdCache.add(new TimestampWrapper<NativeAd>(nativeAd));
                 if (mNativeAdCache.size() == 1 && mAdSourceListener != null) {
                     mAdSourceListener.onAdsAvailable();
                 }
@@ -106,21 +116,46 @@ public void onNativeFail(final NativeErrorCode errorCode) {
                 // Reset the retry time for the next time we dequeue.
                 mRequestInFlight = false;
 
-                // Stopping requests after the max retry time prevents us from using battery when
+                // Stopping requests after the max retry count prevents us from using battery when
                 // the user is not interacting with the stream, eg. the app is backgrounded.
-                if (mRetryTimeMilliseconds >= MAXIMUM_RETRY_TIME_MILLISECONDS) {
+                if (mCurrentRetries >= RETRY_TIME_ARRAY_MILLISECONDS.length - 1) {
                     resetRetryTime();
                     return;
                 }
 
                 updateRetryTime();
                 mRetryInFlight = true;
-                mReplenishCacheHandler.postDelayed(mReplenishCacheRunnable, mRetryTimeMilliseconds);
+                mReplenishCacheHandler.postDelayed(mReplenishCacheRunnable, getRetryTime());
             }
         };
 
         mSequenceNumber = 0;
-        mRetryTimeMilliseconds = DEFAULT_RETRY_TIME_MILLISECONDS;
+        resetRetryTime();
+    }
+
+    int getAdRendererCount() {
+        return mAdRendererRegistry.getAdRendererCount();
+    }
+
+    public int getViewTypeForAd(@NonNull final NativeAd nativeAd) {
+        return mAdRendererRegistry.getViewTypeForAd(nativeAd);
+    }
+
+    /**
+     * Registers an ad renderer for rendering a specific native ad format.
+     * Note that if multiple ad renderers support a specific native ad format, the first
+     * one registered will be used.
+     */
+    void registerAdRenderer(@NonNull final MoPubAdRenderer moPubNativeAdRenderer) {
+        mAdRendererRegistry.registerAdRenderer(moPubNativeAdRenderer);
+        if (mMoPubNative != null) {
+            mMoPubNative.registerAdRenderer(moPubNativeAdRenderer);
+        }
+    }
+
+    @Nullable
+    public MoPubAdRenderer getAdRendererForViewType(final int viewType) {
+        return mAdRendererRegistry.getRendererForViewType(viewType);
     }
 
     /**
@@ -131,10 +166,10 @@ void setAdSourceListener(@Nullable final AdSourceListener adSourceListener) {
         mAdSourceListener = adSourceListener;
     }
 
-    void loadAds(@NonNull final Context context,
+    void loadAds(@NonNull final Activity activity,
             @NonNull final String adUnitId,
             final RequestParameters requestParameters) {
-        loadAds(requestParameters, new MoPubNative(context, adUnitId, mMoPubNativeNetworkListener));
+        loadAds(requestParameters, new MoPubNative(activity, adUnitId, mMoPubNativeNetworkListener));
     }
 
     @VisibleForTesting
@@ -142,6 +177,10 @@ void loadAds(final RequestParameters requestParameters,
              final MoPubNative moPubNative) {
         clear();
 
+        for (MoPubAdRenderer renderer : mAdRendererRegistry.getRendererIterable()) {
+            moPubNative.registerAdRenderer(renderer);
+        }
+
         mRequestParameters = requestParameters;
         mMoPubNative = moPubNative;
 
@@ -160,7 +199,7 @@ void clear() {
 
         mRequestParameters = null;
 
-        for (final TimestampWrapper<NativeResponse> timestampWrapper : mNativeAdCache) {
+        for (final TimestampWrapper<NativeAd> timestampWrapper : mNativeAdCache) {
             timestampWrapper.mInstance.destroy();
         }
         mNativeAdCache.clear();
@@ -182,7 +221,7 @@ void clear() {
      * @return Ad ad item that should be rendered into a view.
      */
     @Nullable
-    NativeResponse dequeueAd() {
+    NativeAd dequeueAd() {
         final long now = SystemClock.uptimeMillis();
 
         // Starting an ad request takes several millis. Post for performance reasons.
@@ -192,7 +231,7 @@ NativeResponse dequeueAd() {
 
         // Dequeue the first ad that hasn't expired.
         while (!mNativeAdCache.isEmpty()) {
-            TimestampWrapper<NativeResponse> responseWrapper = mNativeAdCache.remove(0);
+            TimestampWrapper<NativeAd> responseWrapper = mNativeAdCache.remove(0);
 
             if (now - responseWrapper.mCreatedTimestamp < EXPIRATION_TIME_MILLISECONDS) {
                 return responseWrapper.mInstance;
@@ -203,16 +242,22 @@ NativeResponse dequeueAd() {
 
     @VisibleForTesting
     void updateRetryTime() {
-        // Backoff time calculations
-        mRetryTimeMilliseconds = (int) (mRetryTimeMilliseconds * EXPONENTIAL_BACKOFF_FACTOR);
-        if (mRetryTimeMilliseconds > MAXIMUM_RETRY_TIME_MILLISECONDS) {
-            mRetryTimeMilliseconds = MAXIMUM_RETRY_TIME_MILLISECONDS;
+        if (mCurrentRetries < RETRY_TIME_ARRAY_MILLISECONDS.length - 1) {
+            mCurrentRetries++;
         }
     }
 
     @VisibleForTesting
     void resetRetryTime() {
-        mRetryTimeMilliseconds = DEFAULT_RETRY_TIME_MILLISECONDS;
+        mCurrentRetries = 0;
+    }
+
+    @VisibleForTesting
+    int getRetryTime() {
+        if (mCurrentRetries >= RETRY_TIME_ARRAY_MILLISECONDS.length) {
+            mCurrentRetries = RETRY_TIME_ARRAY_MILLISECONDS.length - 1;
+        }
+        return RETRY_TIME_ARRAY_MILLISECONDS[mCurrentRetries];
     }
 
     /**
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
index 2f1c838c..b600d00d 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
@@ -1,5 +1,6 @@
 package com.mopub.nativeads;
 
+import android.app.Activity;
 import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
@@ -13,7 +14,7 @@
 import java.util.WeakHashMap;
 
 /**
- * @deprecated As of release 2.4, use {@link com.mopub.nativeads.MoPubNativeAdRenderer} instead
+ * @deprecated As of release 2.4, use {@link MoPubStaticNativeAdRenderer} instead
  */
 @Deprecated
 class NativeAdViewHelper {
@@ -26,78 +27,60 @@ private NativeAdViewHelper() {
         AD
     }
 
-    // Because the impression tracker requires tracking drawing views,
-    // each context requires a separate impression tracker. To avoid leaking, keep weak references.
-    @VisibleForTesting
-    static final WeakHashMap<Context, ImpressionTracker> sImpressionTrackerMap =
-            new WeakHashMap<Context, ImpressionTracker>();
-
-    // Used to keep track of the last NativeResponse a view was associated with in order to clean
-    // up its state before associating with a new NativeResponse
-    static private final WeakHashMap<View, NativeResponse> sNativeResponseMap =
-            new WeakHashMap<View, NativeResponse>();
+    /**
+     * Used to keep track of the last {@link NativeAd} a view was associated with in order to clean
+     * up its state before associating with a new {@link NativeAd}
+     */
+    static private final WeakHashMap<View, NativeAd> sNativeAdMap =
+            new WeakHashMap<View, NativeAd>();
 
     @Deprecated
     @NonNull
     static View getAdView(@Nullable View convertView,
             @Nullable final ViewGroup parent,
-            @NonNull final Context context,
-            @Nullable final NativeResponse nativeResponse,
+            @NonNull final Activity activity,
+            @Nullable final NativeAd nativeAd,
             @Nullable final ViewBinder viewBinder) {
 
         Preconditions.NoThrow.checkNotNull(viewBinder, "ViewBinder is null.");
 
         if (convertView != null) {
-            clearNativeResponse(context, convertView);
+            clearNativeAd(activity, convertView);
         }
 
-        if (nativeResponse == null || nativeResponse.isDestroyed() || viewBinder == null) {
-            MoPubLog.d("nativeResponse or viewBinder null or invalid. Returning empty view");
+        if (nativeAd == null || nativeAd.isDestroyed() || viewBinder == null) {
+            MoPubLog.d("NativeAd or viewBinder null or invalid. Returning empty view");
             // Only create a view if one hasn't been created already
             if (convertView == null || !ViewType.EMPTY.equals(convertView.getTag())) {
-                convertView = new View(context);
+                convertView = new View(activity);
                 convertView.setTag(ViewType.EMPTY);
                 convertView.setVisibility(View.GONE);
             }
         } else {
-            final MoPubNativeAdRenderer moPubNativeAdRenderer = new MoPubNativeAdRenderer(viewBinder);
             // Only create a view if one hasn't been created already
             if (convertView == null || !ViewType.AD.equals(convertView.getTag())) {
-                convertView = moPubNativeAdRenderer.createAdView(context, parent);
+                convertView = nativeAd.createAdView(activity, parent);
                 convertView.setTag(ViewType.AD);
             }
-            prepareNativeResponse(context, convertView, nativeResponse);
-            moPubNativeAdRenderer.renderAdView(convertView, nativeResponse);
+            prepareNativeAd(activity, convertView, nativeAd);
+            nativeAd.renderAdView(convertView);
         }
 
         return convertView;
     }
 
-    private static void clearNativeResponse(@NonNull final Context context,
+    private static void clearNativeAd(@NonNull final Context context,
             @NonNull final View view) {
-        getImpressionTracker(context).removeView(view);
-        final NativeResponse nativeResponse = sNativeResponseMap.get(view);
-        if (nativeResponse != null) {
-            nativeResponse.clear(view);
+        final NativeAd nativeAd = sNativeAdMap.get(view);
+        if (nativeAd != null) {
+            nativeAd.clear(view);
         }
     }
 
-    private static void prepareNativeResponse(@NonNull final Context context,
+    private static void prepareNativeAd(@NonNull final Context context,
             @NonNull final View view,
-            @NonNull final NativeResponse nativeResponse) {
-        sNativeResponseMap.put(view, nativeResponse);
-        if (!nativeResponse.isOverridingImpressionTracker()) {
-            getImpressionTracker(context).addView(view, nativeResponse);
-        }
-        nativeResponse.prepare(view);
-    }
-
-    private static ImpressionTracker getImpressionTracker(@NonNull final Context context) {
-        ImpressionTracker impressionTracker = sImpressionTrackerMap.get(context);
-        if (impressionTracker == null) {
-            impressionTracker = new ImpressionTracker(context);
-            sImpressionTrackerMap.put(context, impressionTracker);
-        }
-        return impressionTracker;
+            @NonNull final NativeAd nativeAd) {
+        sNativeAdMap.put(view, nativeAd);
+        nativeAd.prepare(view);
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeClickHandler.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeClickHandler.java
new file mode 100644
index 00000000..045f7ebe
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeClickHandler.java
@@ -0,0 +1,161 @@
+package com.mopub.nativeads;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.ViewGroup;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.UrlAction;
+import com.mopub.common.UrlHandler;
+import com.mopub.common.VisibleForTesting;
+
+/**
+ * A collection of methods to help with detecting clicks, and handling click destination urls
+ * for native ads.
+ */
+public class NativeClickHandler {
+    @NonNull private final Context mContext;
+    @Nullable private final String mDspCreativeId;
+
+    private boolean mClickInProgress;
+
+    public NativeClickHandler(@NonNull final Context context) {
+        this(context, null);
+    }
+
+    public NativeClickHandler(@NonNull final Context context, @Nullable final String dspCreativeId) {
+        Preconditions.checkNotNull(context);
+        mContext = context.getApplicationContext();
+        mDspCreativeId = dspCreativeId;
+    }
+
+    /**
+     * Sets the on click listener on all views in the native ad view hierarchy to invoke
+     * {@link ClickInterface#handleClick(View)} when a view in the view hierarchy is clicked.
+     *
+     * @param view The top view of the native ad view hierarchy
+     * @param clickInterface The native ad implementing the click interface
+     */
+    public void setOnClickListener(@NonNull final View view,
+            @NonNull final ClickInterface clickInterface) {
+        if (!Preconditions.NoThrow.checkNotNull(view, "Cannot set click listener on a null view")) {
+            return;
+        }
+        if (!Preconditions.NoThrow.checkNotNull(clickInterface,
+                "Cannot set click listener with a null ClickInterface")) {
+            return;
+        }
+
+        setOnClickListener(view, new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                clickInterface.handleClick(v);
+            }
+        });
+    }
+
+    /**
+     * Uses recursion in order to set the on click listener on all views in the view hierarchy.
+     * This is necessary since certain views, such as a button, will not forward the click event
+     * to their parent.
+     *
+     * @param view The top view of the native ad view hierarchy
+     * @param onClickListener The click listener to be invoked on click
+     */
+    private void setOnClickListener(@NonNull final View view,
+            @Nullable final OnClickListener onClickListener) {
+        view.setOnClickListener(onClickListener);
+        if ((view instanceof ViewGroup)) {
+            ViewGroup viewGroup = (ViewGroup)view;
+            for (int i = 0; i < viewGroup.getChildCount(); i++) {
+                setOnClickListener(viewGroup.getChildAt(i), onClickListener);
+            }
+        }
+    }
+
+    /**
+     * Clears the on click listener from all views in the the native ad view hierarchy.
+     *
+     * @param view The top view of the native ad view hierarchy.
+     */
+    public void clearOnClickListener(@NonNull final View view) {
+        if (!Preconditions.NoThrow.checkNotNull(view, "Cannot clear click listener from a null view")) {
+            return;
+        }
+
+        setOnClickListener(view, (OnClickListener) null);
+    }
+
+    /**
+     * Handles resolving and opening the click destination url. A spinning progress view is shown
+     * while the click destination is being resolved.
+     *
+     * @param clickDestinationUrl The click destination url
+     * @param view The view on which to display the spinning progress view
+     */
+    public void openClickDestinationUrl(@NonNull final String clickDestinationUrl,
+            @Nullable final View view) {
+        openClickDestinationUrl(clickDestinationUrl, view, new SpinningProgressView(mContext));
+    }
+
+    @VisibleForTesting
+    void openClickDestinationUrl(@NonNull final String clickDestinationUrl,
+            @Nullable final View view,
+            @NonNull final SpinningProgressView spinningProgressView) {
+        // Use NoThrow here because the clickDestinationUrl will be passed in
+        // by third party custom event writers
+        if (!Preconditions.NoThrow.checkNotNull(clickDestinationUrl,
+                "Cannot open a null click destination url")) {
+            return;
+        }
+        Preconditions.checkNotNull(spinningProgressView);
+
+        if (mClickInProgress) {
+            return;
+        }
+        mClickInProgress = true;
+
+        if (view != null) {
+            spinningProgressView.addToRoot(view);
+        }
+
+        UrlHandler.Builder builder = new UrlHandler.Builder();
+        if (!TextUtils.isEmpty(mDspCreativeId)) {
+            builder.withDspCreativeId(mDspCreativeId);
+        }
+        builder.withSupportedUrlActions(
+                UrlAction.IGNORE_ABOUT_SCHEME,
+                UrlAction.OPEN_NATIVE_BROWSER,
+                UrlAction.OPEN_APP_MARKET,
+                UrlAction.OPEN_IN_APP_BROWSER,
+                UrlAction.HANDLE_SHARE_TWEET,
+                UrlAction.FOLLOW_DEEP_LINK_WITH_FALLBACK,
+                UrlAction.FOLLOW_DEEP_LINK)
+                .withResultActions(new UrlHandler.ResultActions() {
+                    @Override
+                    public void urlHandlingSucceeded(@NonNull String url,
+                            @NonNull UrlAction urlAction) {
+                        removeSpinningProgressView();
+                        mClickInProgress = false;
+                    }
+
+                    @Override
+                    public void urlHandlingFailed(@NonNull String url,
+                            @NonNull UrlAction lastFailedUrlAction) {
+                        removeSpinningProgressView();
+                        mClickInProgress = false;
+                    }
+
+                    private void removeSpinningProgressView() {
+                        if (view != null) {
+                            spinningProgressView.removeFromRoot();
+                        }
+                    }
+                })
+                .build().handleUrl(mContext, clickDestinationUrl);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeErrorCode.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeErrorCode.java
index 0dd85382..ff8ad9fd 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeErrorCode.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeErrorCode.java
@@ -4,7 +4,7 @@
 
 public enum NativeErrorCode {
     EMPTY_AD_RESPONSE("Server returned empty response."),
-    INVALID_JSON("Unable to parse JSON response from server."),
+    INVALID_RESPONSE("Unable to parse response from server."),
     IMAGE_DOWNLOAD_FAILURE("Unable to download images associated with ad."),
     INVALID_REQUEST_URL("Invalid request url."),
     UNEXPECTED_RESPONSE_CODE("Received unexpected response code from server."),
@@ -17,8 +17,9 @@
     NETWORK_NO_FILL("Third-party network failed to provide an ad."),
     NETWORK_INVALID_STATE("Third-party network failed due to invalid internal state."),
 
-    NATIVE_ADAPTER_CONFIGURATION_ERROR("Custom Event Native was configured incorrectly."),
-    NATIVE_ADAPTER_NOT_FOUND("Unable to find Custom Event Native.");
+    NATIVE_RENDERER_CONFIGURATION_ERROR("A required renderer was not registered for the CustomEventNative."),
+    NATIVE_ADAPTER_CONFIGURATION_ERROR("CustomEventNative was configured incorrectly."),
+    NATIVE_ADAPTER_NOT_FOUND("Unable to find CustomEventNative.");
 
     private final String message;
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
new file mode 100644
index 00000000..91ea4256
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
@@ -0,0 +1,434 @@
+package com.mopub.nativeads;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.content.res.Configuration;
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.ColorFilter;
+import android.graphics.Paint;
+import android.graphics.RectF;
+import android.graphics.SurfaceTexture;
+import android.graphics.drawable.Drawable;
+import android.graphics.drawable.GradientDrawable;
+import android.graphics.drawable.GradientDrawable.Orientation;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.view.TextureView;
+import android.view.TextureView.SurfaceTextureListener;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.ProgressBar;
+import android.widget.RelativeLayout;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.util.Dips;
+import com.mopub.common.util.Drawables;
+import com.mopub.common.util.Utils;
+import com.mopub.mobileads.VastVideoProgressBarWidget;
+import com.mopub.mobileads.resource.CloseButtonDrawable;
+import com.mopub.mobileads.resource.CtaButtonDrawable;
+import com.mopub.mobileads.resource.DrawableConstants;
+import com.mopub.mobileads.resource.DrawableConstants.GradientStrip;
+
+@TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+public class NativeFullScreenVideoView extends RelativeLayout {
+
+    public enum Mode { LOADING, PLAYING, PAUSED, FINISHED }
+
+    @VisibleForTesting @NonNull Mode mMode;
+    private int mOrientation;
+
+    // Views
+    @NonNull private final ImageView mCachedVideoFrameView;
+    @NonNull private final TextureView mVideoTexture;
+    @NonNull private final ProgressBar mLoadingSpinner;
+    @NonNull private final ImageView mBottomGradient;
+    @NonNull private final ImageView mTopGradient;
+    @NonNull private final VastVideoProgressBarWidget mVideoProgress;
+    @NonNull private final View mOverlay;
+    @NonNull private final ImageView mPlayButton;
+    @NonNull private final ImageView mPrivacyInformationIcon;
+    @NonNull private final ImageView mCtaButton;
+    @NonNull private final ImageView mCloseControl;
+
+    // Measurements
+    @VisibleForTesting final int mCtaWidthPx;
+    @VisibleForTesting final int mCtaHeightPx;
+    @VisibleForTesting final int mCtaMarginPx;
+    @VisibleForTesting final int mCloseControlSizePx;
+    @VisibleForTesting final int mClosePaddingPx;
+    @VisibleForTesting final int mPrivacyInformationIconSizePx;
+    @VisibleForTesting final int mPlayControlSizePx;
+    @VisibleForTesting final int mGradientStripHeightPx;
+
+    public NativeFullScreenVideoView(@NonNull final Context context, int orientation, @Nullable String ctaText) {
+        this(context, orientation, ctaText,
+                new ImageView(context),
+                new TextureView(context), new ProgressBar(context), new ImageView(context),
+                new ImageView(context), new VastVideoProgressBarWidget(context), new View(context),
+                new ImageView(context), new ImageView(context), new ImageView(context),
+                new ImageView(context));
+    }
+
+    @VisibleForTesting
+    NativeFullScreenVideoView(@NonNull final Context context, int orientation,
+            @Nullable final String ctaText,
+            @NonNull final ImageView cachedImageView,
+            @NonNull final TextureView videoTexture,
+            @NonNull final ProgressBar loadingSpinner, @NonNull final ImageView bottomGradient,
+            @NonNull final ImageView topGradient,
+            @NonNull final VastVideoProgressBarWidget videoProgress, @NonNull final View overlay,
+            @NonNull final ImageView playButton, @NonNull final ImageView privacyInformationIcon,
+            @NonNull final ImageView ctaButton, @NonNull final ImageView closeControl) {
+        super(context);
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(cachedImageView);
+        Preconditions.checkNotNull(videoTexture);
+        Preconditions.checkNotNull(loadingSpinner);
+        Preconditions.checkNotNull(bottomGradient);
+        Preconditions.checkNotNull(topGradient);
+        Preconditions.checkNotNull(videoProgress);
+        Preconditions.checkNotNull(overlay);
+        Preconditions.checkNotNull(playButton);
+        Preconditions.checkNotNull(privacyInformationIcon);
+        Preconditions.checkNotNull(ctaButton);
+        Preconditions.checkNotNull(closeControl);
+
+        mOrientation = orientation;
+        mMode = Mode.LOADING;
+
+        mCtaWidthPx = Dips.asIntPixels(200, context);
+        mCtaHeightPx = Dips.asIntPixels(42, context);
+        mCtaMarginPx = Dips.asIntPixels(10, context);
+        mCloseControlSizePx = Dips.asIntPixels(50, context);
+        mClosePaddingPx = Dips.asIntPixels(8, context);
+        mPrivacyInformationIconSizePx = Dips.asIntPixels(44, context);
+        mPlayControlSizePx = Dips.asIntPixels(50, context);
+        mGradientStripHeightPx = Dips.asIntPixels(45, context);
+
+        // Instantiate and initialize the views.
+        final RelativeLayout.LayoutParams videoTextureLayoutParams =
+                new RelativeLayout.LayoutParams(LayoutParams.MATCH_PARENT,
+                        LayoutParams.MATCH_PARENT);
+        videoTextureLayoutParams.addRule(CENTER_IN_PARENT);
+
+        mVideoTexture = videoTexture;
+        mVideoTexture.setId((int) Utils.generateUniqueId());
+        mVideoTexture.setLayoutParams(videoTextureLayoutParams);
+        addView(mVideoTexture);
+
+        mCachedVideoFrameView = cachedImageView;
+        mCachedVideoFrameView.setId((int) Utils.generateUniqueId());
+        mCachedVideoFrameView.setLayoutParams(videoTextureLayoutParams);
+        mCachedVideoFrameView.setBackgroundColor(Color.TRANSPARENT);
+        addView(mCachedVideoFrameView);
+
+        RelativeLayout.LayoutParams spinnerParams =
+                new RelativeLayout.LayoutParams(mPlayControlSizePx, mPlayControlSizePx);
+        spinnerParams.addRule(RelativeLayout.CENTER_IN_PARENT);
+        mLoadingSpinner = loadingSpinner;
+        mLoadingSpinner.setId((int) Utils.generateUniqueId());
+        mLoadingSpinner.setBackground(new LoadingBackground(context));
+        mLoadingSpinner.setLayoutParams(spinnerParams);
+        mLoadingSpinner.setIndeterminate(true);
+        addView(mLoadingSpinner);
+
+        RelativeLayout.LayoutParams bottomGradientParams = new RelativeLayout.LayoutParams(
+                RelativeLayout.LayoutParams.MATCH_PARENT, mGradientStripHeightPx);
+        bottomGradientParams.addRule(RelativeLayout.ALIGN_BOTTOM, mVideoTexture.getId());
+        mBottomGradient = bottomGradient;
+        mBottomGradient.setId((int) Utils.generateUniqueId());
+        mBottomGradient.setLayoutParams(bottomGradientParams);
+        final GradientDrawable bottomGradientDrawable = new GradientDrawable(Orientation.BOTTOM_TOP,
+                new int[] {GradientStrip.START_COLOR, GradientStrip.END_COLOR});
+        mBottomGradient.setImageDrawable(bottomGradientDrawable);
+        addView(mBottomGradient);
+
+        RelativeLayout.LayoutParams topGradientParams = new RelativeLayout.LayoutParams(
+                RelativeLayout.LayoutParams.MATCH_PARENT, mGradientStripHeightPx);
+        topGradientParams.addRule(RelativeLayout.ALIGN_PARENT_TOP);
+        mTopGradient = topGradient;
+        mTopGradient.setId((int) Utils.generateUniqueId());
+        mTopGradient.setLayoutParams(topGradientParams);
+        final GradientDrawable topGradientDrawable = new GradientDrawable(Orientation.TOP_BOTTOM,
+                new int[] {GradientStrip.START_COLOR, GradientStrip.END_COLOR});
+        mTopGradient.setImageDrawable(topGradientDrawable);
+        addView(mTopGradient);
+
+        mVideoProgress = videoProgress;
+        mVideoProgress.setId((int) Utils.generateUniqueId());
+        mVideoProgress.setAnchorId(mVideoTexture.getId());
+        mVideoProgress.calibrateAndMakeVisible(1000, 0);
+        addView(mVideoProgress);
+
+        final RelativeLayout.LayoutParams overlayParams =
+                new LayoutParams(LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
+        overlayParams.addRule(RelativeLayout.CENTER_IN_PARENT);
+        mOverlay = overlay;
+        mOverlay.setId((int) Utils.generateUniqueId());
+        mOverlay.setLayoutParams(overlayParams);
+        mOverlay.setBackgroundColor(DrawableConstants.TRANSPARENT_GRAY);
+        addView(mOverlay);
+
+        RelativeLayout.LayoutParams playButtonParams =
+                new RelativeLayout.LayoutParams(mPlayControlSizePx, mPlayControlSizePx);
+        playButtonParams.addRule(RelativeLayout.CENTER_IN_PARENT);
+        mPlayButton = playButton;
+        mPlayButton.setId((int) Utils.generateUniqueId());
+        mPlayButton.setLayoutParams(playButtonParams);
+        mPlayButton.setImageDrawable(Drawables.NATIVE_PLAY.createDrawable(context));
+        addView(mPlayButton);
+
+        mPrivacyInformationIcon = privacyInformationIcon;
+        mPrivacyInformationIcon.setId((int) Utils.generateUniqueId());
+        mPrivacyInformationIcon.setImageDrawable(
+                Drawables.NATIVE_PRIVACY_INFORMATION_ICON.createDrawable(context));
+        mPrivacyInformationIcon.setPadding(mClosePaddingPx, mClosePaddingPx, mClosePaddingPx * 2,
+                mClosePaddingPx * 2);
+        addView(mPrivacyInformationIcon);
+
+        CtaButtonDrawable ctaDrawable = new CtaButtonDrawable(context);
+        if (!TextUtils.isEmpty(ctaText)) {
+            ctaDrawable.setCtaText(ctaText);
+        }
+        mCtaButton = ctaButton;
+        mCtaButton.setId((int) Utils.generateUniqueId());
+        mCtaButton.setImageDrawable(ctaDrawable);
+        addView(mCtaButton);
+
+        mCloseControl = closeControl;
+        mCloseControl.setId((int) Utils.generateUniqueId());
+        mCloseControl.setImageDrawable(new CloseButtonDrawable());
+        mCloseControl.setPadding(mClosePaddingPx * 3, mClosePaddingPx, mClosePaddingPx, mClosePaddingPx * 3);
+        addView(mCloseControl);
+
+        updateViewState();
+    }
+
+    public void resetProgress() {
+        mVideoProgress.reset();
+    }
+
+    public void setMode(@NonNull final Mode mode) {
+        Preconditions.checkNotNull(mode);
+        if (mMode == mode) {
+            return;
+        }
+
+        mMode = mode;
+        updateViewState();
+    }
+
+    @NonNull
+    public TextureView getTextureView() {
+        return mVideoTexture;
+    }
+
+    public void setOrientation(final int orientation) {
+        if (mOrientation == orientation) {
+            return;
+        }
+        mOrientation = orientation;
+        updateViewState();
+    }
+
+    public void setSurfaceTextureListener(
+            @Nullable final SurfaceTextureListener surfaceTextureListener) {
+        mVideoTexture.setSurfaceTextureListener(surfaceTextureListener);
+
+        SurfaceTexture surfaceTexture = mVideoTexture.getSurfaceTexture();
+        if (surfaceTexture != null && surfaceTextureListener != null) {
+            surfaceTextureListener.onSurfaceTextureAvailable(
+                    surfaceTexture, mVideoTexture.getWidth(), mVideoTexture.getHeight());
+        }
+    }
+
+    public void setCloseControlListener(@Nullable OnClickListener closeControlListener) {
+        mCloseControl.setOnClickListener(closeControlListener);
+    }
+
+    public void setPrivacyInformationClickListener(
+            @Nullable OnClickListener privacyInformationListener) {
+        mPrivacyInformationIcon.setOnClickListener(privacyInformationListener);
+    }
+
+    public void setCtaClickListener(@Nullable OnClickListener ctaListener) {
+        mCtaButton.setOnClickListener(ctaListener);
+    }
+
+    public void setPlayControlClickListener(@Nullable OnClickListener playControlListener) {
+        mPlayButton.setOnClickListener(playControlListener);
+        mOverlay.setOnClickListener(playControlListener);
+    }
+
+    public void updateProgress(final int progressPercentage) {
+        mVideoProgress.updateProgress(progressPercentage);
+    }
+
+    public void setCachedVideoFrame(@Nullable Bitmap cachedVideoFrame) {
+        mCachedVideoFrameView.setImageBitmap(cachedVideoFrame);
+    }
+
+    private void updateViewState() {
+        switch (mMode) {
+            case LOADING:
+                setCachedImageVisibility(VISIBLE);
+                setLoadingSpinnerVisibility(VISIBLE);
+                setVideoProgressVisibility(INVISIBLE);
+                setPlayButtonVisibility(INVISIBLE);
+                break;
+            case PLAYING:
+                setCachedImageVisibility(INVISIBLE);
+                setLoadingSpinnerVisibility(INVISIBLE);
+                setVideoProgressVisibility(VISIBLE);
+                setPlayButtonVisibility(INVISIBLE);
+                break;
+            case PAUSED:
+                setCachedImageVisibility(INVISIBLE);
+                setLoadingSpinnerVisibility(INVISIBLE);
+                setVideoProgressVisibility(VISIBLE);
+                setPlayButtonVisibility(VISIBLE);
+                break;
+            case FINISHED:
+                setCachedImageVisibility(VISIBLE);
+                setLoadingSpinnerVisibility(INVISIBLE);
+                setVideoProgressVisibility(INVISIBLE);
+                setPlayButtonVisibility(VISIBLE);
+                break;
+            default:
+                break;
+        }
+
+        updateVideoTextureLayout();
+        updateControlLayouts();
+    }
+
+    private void setCachedImageVisibility(final int visibility) {
+        mCachedVideoFrameView.setVisibility(visibility);
+    }
+
+    private void setLoadingSpinnerVisibility(final int visibility) {
+        mLoadingSpinner.setVisibility(visibility);
+    }
+
+    private void setVideoProgressVisibility(final int visibility) {
+        mVideoProgress.setVisibility(visibility);
+    }
+
+    private void setPlayButtonVisibility(final int visibility) {
+        mPlayButton.setVisibility(visibility);
+        mOverlay.setVisibility(visibility);
+    }
+
+    private void updateVideoTextureLayout() {
+        final Configuration configuration = getContext().getResources().getConfiguration();
+        ViewGroup.LayoutParams layoutParams = mVideoTexture.getLayoutParams();
+        int newWidth = Dips.dipsToIntPixels((float) configuration.screenWidthDp, getContext());
+        if (newWidth != layoutParams.width) {
+            layoutParams.width = newWidth;
+        }
+        int newHeight = Dips.dipsToIntPixels((float) configuration.screenWidthDp * 9 / 16, getContext());
+        if (newHeight != layoutParams.height) {
+            layoutParams.height = newHeight;
+        }
+    }
+
+    private void updateControlLayouts() {
+        final RelativeLayout.LayoutParams ctaParams =
+                new RelativeLayout.LayoutParams(mCtaWidthPx, mCtaHeightPx);
+        ctaParams.setMargins(mCtaMarginPx, mCtaMarginPx, mCtaMarginPx, mCtaMarginPx);
+        final RelativeLayout.LayoutParams privacyInformationIconParams =
+                new RelativeLayout.LayoutParams(mPrivacyInformationIconSizePx,
+                        mPrivacyInformationIconSizePx);
+        final RelativeLayout.LayoutParams closeParams =
+                new RelativeLayout.LayoutParams(mCloseControlSizePx, mCloseControlSizePx);
+
+
+        switch (mOrientation) {
+            case Configuration.ORIENTATION_PORTRAIT:
+                ctaParams.addRule(RelativeLayout.BELOW, mVideoTexture.getId());
+                ctaParams.addRule(RelativeLayout.CENTER_HORIZONTAL);
+
+                privacyInformationIconParams.addRule(RelativeLayout.ALIGN_PARENT_TOP);
+                privacyInformationIconParams.addRule(RelativeLayout.ALIGN_PARENT_LEFT);
+
+                closeParams.addRule(RelativeLayout.ALIGN_PARENT_TOP);
+                closeParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
+                break;
+            case Configuration.ORIENTATION_LANDSCAPE:
+                ctaParams.addRule(RelativeLayout.ABOVE, mVideoProgress.getId());
+                ctaParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
+
+                privacyInformationIconParams.addRule(RelativeLayout.ALIGN_TOP, mVideoTexture.getId());
+                privacyInformationIconParams.addRule(RelativeLayout.ALIGN_LEFT, mVideoTexture.getId());
+
+                closeParams.addRule(RelativeLayout.ALIGN_TOP, mVideoTexture.getId());
+                closeParams.addRule(RelativeLayout.ALIGN_RIGHT, mVideoTexture.getId());
+                break;
+            default:
+                // Do nothing.
+                break;
+        }
+
+        mCtaButton.setLayoutParams(ctaParams);
+        mPrivacyInformationIcon.setLayoutParams(privacyInformationIconParams);
+        mCloseControl.setLayoutParams(closeParams);
+    }
+
+    @VisibleForTesting
+    static class LoadingBackground extends Drawable {
+        @NonNull private final RectF mButtonRect;
+        @NonNull private final Paint mPaint;
+        @VisibleForTesting final int mCornerRadiusPx;
+
+        LoadingBackground(@NonNull final Context context) {
+            this(context, new RectF(), new Paint());
+        }
+
+        LoadingBackground(@NonNull final Context context,
+                @NonNull final RectF rectF,
+                @NonNull final Paint paint) {
+            Preconditions.checkNotNull(context);
+            Preconditions.checkNotNull(rectF);
+            Preconditions.checkNotNull(paint);
+
+            mButtonRect = rectF;
+            mPaint = paint;
+            mPaint.setColor(Color.BLACK);
+            mPaint.setAlpha(128);
+            mPaint.setAntiAlias(true);
+            mCornerRadiusPx = Dips.asIntPixels(5, context);
+        }
+
+        @Override
+        public void draw(Canvas canvas) {
+            mButtonRect.set(getBounds());
+
+            // Rounded rectangle background fill
+            canvas.drawRoundRect(mButtonRect, mCornerRadiusPx, mCornerRadiusPx, mPaint);
+        }
+
+        @Override
+        public void setAlpha(int alpha) { }
+
+        @Override
+        public void setColorFilter(ColorFilter cf) { }
+
+        @Override
+        public int getOpacity() {
+            return 0;
+        }
+    };
+
+    @Deprecated
+    @VisibleForTesting
+    ImageView getCtaButton() {
+        return mCtaButton;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeImageHelper.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeImageHelper.java
new file mode 100644
index 00000000..c01a329b
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeImageHelper.java
@@ -0,0 +1,122 @@
+package com.mopub.nativeads;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.widget.ImageView;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.nativeads.CustomEventNative.CustomEventNativeListener;
+import com.mopub.network.Networking;
+import com.mopub.volley.VolleyError;
+import com.mopub.volley.toolbox.ImageLoader;
+
+import java.util.List;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
+
+/**
+ * Collection of helper methods to assist with image downloading and displaying
+ */
+public class NativeImageHelper {
+
+    public interface ImageListener {
+        /**
+         * Called when images are successfully cached. If you haven't already called {@link
+         * CustomEventNativeListener#onNativeAdLoaded}, you should typically do so now.
+         */
+        void onImagesCached();
+
+        /**
+         * Called when images failed to cache. You should typically call {@link
+         * CustomEventNativeListener#onNativeAdFailed} from this callback.
+         *
+         * @param errorCode An enum value with the relevant error message.
+         */
+        void onImagesFailedToCache(NativeErrorCode errorCode);
+    }
+
+    /**
+     * Pre caches the given set of image urls. We recommend using this method to warm the image
+     * cache before calling {@link CustomEventNativeListener#onNativeAdLoaded}. Doing so will
+     * force images to cache before displaying the ad.
+     */
+    public static void preCacheImages(@NonNull final Context context,
+            @NonNull final List<String> imageUrls,
+            @NonNull final ImageListener imageListener) {
+        final ImageLoader imageLoader = Networking.getImageLoader(context);
+        // These Atomics are only accessed on the main thread.
+        // We use Atomics here so we can change their values while keeping a reference for the inner class.
+        final AtomicInteger imageCounter = new AtomicInteger(imageUrls.size());
+        final AtomicBoolean anyFailures = new AtomicBoolean(false);
+        ImageLoader.ImageListener volleyImageListener = new ImageLoader.ImageListener() {
+            @Override
+            public void onResponse(final ImageLoader.ImageContainer imageContainer, final boolean isImmediate) {
+                // Image Loader returns a "default" response immediately. We want to ignore this
+                // unless the image is already cached.
+                if (imageContainer.getBitmap() != null) {
+                    final int count = imageCounter.decrementAndGet();
+                    if (count == 0 && !anyFailures.get()) {
+                        imageListener.onImagesCached();
+                    }
+                }
+            }
+
+            @Override
+            public void onErrorResponse(final VolleyError volleyError) {
+                MoPubLog.d("Failed to download a native ads image:", volleyError);
+                boolean anyPreviousErrors = anyFailures.getAndSet(true);
+                imageCounter.decrementAndGet();
+                if (!anyPreviousErrors) {
+                    imageListener.onImagesFailedToCache(NativeErrorCode.IMAGE_DOWNLOAD_FAILURE);
+                }
+            }
+        };
+
+        for (String url : imageUrls) {
+            if (TextUtils.isEmpty(url)) {
+                anyFailures.set(true);
+                imageListener.onImagesFailedToCache(NativeErrorCode.IMAGE_DOWNLOAD_FAILURE);
+                return;
+            }
+            imageLoader.get(url, volleyImageListener);
+        }
+    }
+
+    /**
+     * Helper method that takes an image url and loads the image into an image view.
+     *
+     * @param url The image url
+     * @param imageView The image view into which to load the image
+     */
+    public static void loadImageView(@Nullable final String url, @Nullable final ImageView imageView) {
+        if (!Preconditions.NoThrow.checkNotNull(imageView, "Cannot load image into null ImageView")) {
+            return;
+        }
+
+        if (!Preconditions.NoThrow.checkNotNull(url, "Cannot load image with null url")) {
+            imageView.setImageDrawable(null);
+            return;
+        }
+
+        final ImageLoader mImageLoader = Networking.getImageLoader(imageView.getContext());
+        mImageLoader.get(url, new ImageLoader.ImageListener() {
+            @Override
+            public void onResponse(final ImageLoader.ImageContainer imageContainer,
+                    final boolean isImmediate) {
+                if (!isImmediate) {
+                    MoPubLog.d("Image was not loaded immediately into your ad view. You should call preCacheImages as part of your custom event loading process.");
+                }
+                imageView.setImageBitmap(imageContainer.getBitmap());
+            }
+
+            @Override
+            public void onErrorResponse(final VolleyError volleyError) {
+                MoPubLog.d("Failed to load image.", volleyError);
+                imageView.setImageDrawable(null);
+            }
+        });
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeRendererHelper.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeRendererHelper.java
new file mode 100644
index 00000000..53c1f451
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeRendererHelper.java
@@ -0,0 +1,141 @@
+package com.mopub.nativeads;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import com.mopub.common.UrlAction;
+import com.mopub.common.UrlHandler;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Drawables;
+
+import java.util.Map;
+
+/**
+ * A set of helper methods for Native Ad Rendering
+ */
+public class NativeRendererHelper {
+    public static void addTextView(@Nullable final TextView textView,
+            @Nullable final String contents) {
+        if (textView == null) {
+            MoPubLog.d("Attempted to add text (" + contents + ") to null TextView.");
+            return;
+        }
+
+        // Clear previous value
+        textView.setText(null);
+
+        if (contents == null) {
+            MoPubLog.d("Attempted to set TextView contents to null.");
+        } else {
+            textView.setText(contents);
+        }
+    }
+
+    /**
+     * Fills in the Privacy Information Icon with the specified image url and attaches a click
+     * listener for the clickthrough url.
+     *
+     * @param privacyInformationIconImageView   The image view of where the icon is supposed to be
+     *                                          placed. If this is null, this method does nothing.
+     * @param privacyInformationImageUrl        The image url. If this is null, the default MoPub
+     *                                          icon is used.
+     * @param privacyInformationClickthroughUrl The clickthrough url for the privacy information
+     *                                          icon. If this is null, the icon will be cleared.
+     */
+    public static void addPrivacyInformationIcon(final ImageView privacyInformationIconImageView,
+            final String privacyInformationImageUrl,
+            final String privacyInformationClickthroughUrl) {
+        if (privacyInformationIconImageView == null) {
+            return;
+        }
+        if (privacyInformationClickthroughUrl == null) {
+            privacyInformationIconImageView.setImageDrawable(null);
+            privacyInformationIconImageView.setOnClickListener(null);
+            privacyInformationIconImageView.setVisibility(View.INVISIBLE);
+            return;
+        }
+
+        final Context context = privacyInformationIconImageView.getContext();
+        if (context == null) {
+            return;
+        }
+
+        if (privacyInformationImageUrl == null) {
+            privacyInformationIconImageView.setImageDrawable(
+                    Drawables.NATIVE_PRIVACY_INFORMATION_ICON.createDrawable(context));
+        } else {
+            NativeImageHelper.loadImageView(privacyInformationImageUrl,
+                    privacyInformationIconImageView);
+        }
+
+        privacyInformationIconImageView.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(final View v) {
+                new UrlHandler.Builder()
+                        .withSupportedUrlActions(
+                                UrlAction.IGNORE_ABOUT_SCHEME,
+                                UrlAction.OPEN_NATIVE_BROWSER,
+                                UrlAction.OPEN_IN_APP_BROWSER,
+                                UrlAction.HANDLE_SHARE_TWEET,
+                                UrlAction.FOLLOW_DEEP_LINK_WITH_FALLBACK,
+                                UrlAction.FOLLOW_DEEP_LINK)
+                        .build().handleUrl(context, privacyInformationClickthroughUrl);
+            }
+        });
+        privacyInformationIconImageView.setVisibility(View.VISIBLE);
+    }
+
+    public static void addCtaButton(@Nullable final TextView ctaTextView,
+            @Nullable final View rootView, @Nullable final String contents) {
+        addTextView(ctaTextView, contents);
+
+        if (ctaTextView == null || rootView == null) {
+            return;
+        }
+
+        // Defer click to rootView's onClickListener, which should also fire click and
+        // impression trackers as needed.
+        ctaTextView.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(final View v) {
+                rootView.performClick();
+            }
+        });
+    }
+
+    public static void updateExtras(@Nullable final View mainView,
+            @NonNull final Map<String, Integer> extrasIds,
+            @NonNull final Map<String, Object> extras) {
+        if (mainView == null) {
+            MoPubLog.w("Attempted to bind extras on a null main view.");
+            return;
+        }
+
+        for (final String key : extrasIds.keySet()) {
+            final int resourceId = extrasIds.get(key);
+            final View view = mainView.findViewById(resourceId);
+            final Object content = extras.get(key);
+
+            if (view instanceof ImageView) {
+                // Clear previous image
+                ((ImageView) view).setImageDrawable(null);
+                final Object object = extras.get(key);
+                if (object != null && object instanceof String) {
+                    NativeImageHelper.loadImageView((String) object, (ImageView) view);
+                }
+            } else if (view instanceof TextView) {
+                // Clear previous text value
+                ((TextView) view).setText(null);
+                if (content instanceof String) {
+                    NativeRendererHelper.addTextView((TextView) view, (String) content);
+                }
+            } else {
+                MoPubLog.d("View bound to " + key + " should be an instance of TextView or ImageView.");
+            }
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java
deleted file mode 100644
index 9191d354..00000000
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java
+++ /dev/null
@@ -1,435 +0,0 @@
-package com.mopub.nativeads;
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ImageView;
-
-import com.mopub.common.Preconditions;
-import com.mopub.common.UrlAction;
-import com.mopub.common.UrlHandler;
-import com.mopub.common.VisibleForTesting;
-import com.mopub.common.event.BaseEvent;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.nativeads.MoPubNative.MoPubNativeEventListener;
-import com.mopub.network.Networking;
-import com.mopub.network.TrackingRequest;
-import com.mopub.volley.VolleyError;
-import com.mopub.volley.toolbox.ImageLoader;
-
-import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
-import static android.view.View.OnClickListener;
-import static com.mopub.nativeads.BaseForwardingNativeAd.NativeEventListener;
-import static com.mopub.nativeads.NativeResponse.Parameter.CALL_TO_ACTION;
-import static com.mopub.nativeads.NativeResponse.Parameter.CLICK_DESTINATION;
-import static com.mopub.nativeads.NativeResponse.Parameter.CLICK_TRACKER;
-import static com.mopub.nativeads.NativeResponse.Parameter.ICON_IMAGE;
-import static com.mopub.nativeads.NativeResponse.Parameter.IMPRESSION_TRACKER;
-import static com.mopub.nativeads.NativeResponse.Parameter.MAIN_IMAGE;
-import static com.mopub.nativeads.NativeResponse.Parameter.STAR_RATING;
-import static com.mopub.nativeads.NativeResponse.Parameter.TEXT;
-import static com.mopub.nativeads.NativeResponse.Parameter.TITLE;
-
-public class NativeResponse {
-    enum Parameter {
-        IMPRESSION_TRACKER("imptracker", true),
-        CLICK_TRACKER("clktracker", true),
-
-        TITLE("title", false),
-        TEXT("text", false),
-        MAIN_IMAGE("mainimage", false),
-        ICON_IMAGE("iconimage", false),
-
-        CLICK_DESTINATION("clk", false),
-        FALLBACK("fallback", false),
-        CALL_TO_ACTION("ctatext", false),
-        STAR_RATING("starrating", false);
-
-        @NonNull final String name;
-        final boolean required;
-
-        Parameter(@NonNull final String name, boolean required) {
-            this.name = name;
-            this.required = required;
-        }
-
-        @Nullable
-        static Parameter from(@NonNull final String name) {
-            for (final Parameter parameter : values()) {
-                if (parameter.name.equals(name)) {
-                    return parameter;
-                }
-            }
-
-            return null;
-        }
-
-        @NonNull
-        @VisibleForTesting
-        static final Set<String> requiredKeys = new HashSet<String>();
-        static {
-            for (final Parameter parameter : values()) {
-                if (parameter.required) {
-                    requiredKeys.add(parameter.name);
-                }
-            }
-        }
-    }
-
-    @NonNull private final Context mContext;
-    @NonNull private final ImageLoader mImageLoader;
-    @NonNull private MoPubNativeEventListener mMoPubNativeEventListener;
-    @NonNull private final NativeAdInterface mNativeAd;
-
-    // Impression and click trackers for the MoPub adserver
-    @NonNull private final Set<String> mMoPubImpressionTrackers;
-    @NonNull private final String mMoPubClickTracker;
-    @NonNull private final String mAdUnitId;
-
-    private boolean mRecordedImpression;
-    private boolean mIsClicked;
-    private boolean mIsDestroyed;
-
-    public NativeResponse(@NonNull final Context context,
-            @NonNull final String impressionUrl,
-            @NonNull final String clickUrl,
-            @NonNull final String adUnitId,
-            @NonNull final NativeAdInterface nativeAd,
-            @NonNull final MoPubNativeEventListener moPubNativeEventListener) {
-        mContext = context.getApplicationContext();
-        mAdUnitId = adUnitId;
-        mMoPubNativeEventListener = moPubNativeEventListener;
-        mNativeAd = nativeAd;
-        mNativeAd.setNativeEventListener(new NativeEventListener() {
-            @Override
-            public void onAdImpressed() {
-                recordImpression(null);
-            }
-
-            @Override
-            public void onAdClicked() {
-                handleClick(null);
-            }
-        });
-
-        mMoPubImpressionTrackers = new HashSet<String>();
-        mMoPubImpressionTrackers.add(impressionUrl);
-        mMoPubClickTracker = clickUrl;
-        mImageLoader = Networking.getImageLoader(context);
-    }
-
-    @Override
-    public String toString() {
-        final StringBuilder stringBuilder = new StringBuilder("\n");
-
-        stringBuilder.append(TITLE.name).append(":").append(getTitle()).append("\n");
-        stringBuilder.append(TEXT.name).append(":").append(getText()).append("\n");
-        stringBuilder.append(ICON_IMAGE.name).append(":").append(getIconImageUrl()).append("\n");
-        stringBuilder.append(MAIN_IMAGE.name).append(":").append(getMainImageUrl()).append("\n");
-        stringBuilder.append(STAR_RATING.name).append(":").append(getStarRating()).append("\n");
-        stringBuilder.append(IMPRESSION_TRACKER.name).append(":").append(getImpressionTrackers()).append("\n");
-        stringBuilder.append(CLICK_TRACKER.name).append(":").append(mMoPubClickTracker).append("\n");
-        stringBuilder.append(CLICK_DESTINATION.name).append(":").append(getClickDestinationUrl()).append("\n");
-        stringBuilder.append(CALL_TO_ACTION.name).append(":").append(getCallToAction()).append("\n");
-        stringBuilder.append("recordedImpression").append(":").append(mRecordedImpression).append("\n");
-        stringBuilder.append("extras").append(":").append(getExtras());
-
-        return stringBuilder.toString();
-    }
-
-   @NonNull
-   public String getAdUnitId() {
-       return mAdUnitId;
-   }
-
-    // Interface Methods
-    // Getters
-    @Nullable
-    public String getMainImageUrl() {
-        return mNativeAd.getMainImageUrl();
-    }
-
-    @Nullable
-    public String getIconImageUrl() {
-        return mNativeAd.getIconImageUrl();
-    }
-
-    @Nullable
-    public String getClickDestinationUrl() {
-        return mNativeAd.getClickDestinationUrl();
-    }
-
-    @Nullable
-    public String getCallToAction() {
-        return mNativeAd.getCallToAction();
-    }
-
-    @Nullable
-    public String getTitle() {
-        return mNativeAd.getTitle();
-    }
-
-    @Nullable
-    public String getText() {
-        return mNativeAd.getText();
-    }
-
-    @NonNull
-    public List<String> getImpressionTrackers() {
-        final Set<String> allImpressionTrackers = new HashSet<String>();
-        allImpressionTrackers.addAll(mMoPubImpressionTrackers);
-        allImpressionTrackers.addAll(mNativeAd.getImpressionTrackers());
-        return new ArrayList<String>(allImpressionTrackers);
-    }
-
-    @NonNull
-    public String getClickTracker() {
-        return mMoPubClickTracker;
-    }
-
-    @Nullable
-    public Double getStarRating() {
-        return mNativeAd.getStarRating();
-    }
-
-    public int getImpressionMinTimeViewed() {
-        return mNativeAd.getImpressionMinTimeViewed();
-    }
-
-    public int getImpressionMinPercentageViewed() {
-        return mNativeAd.getImpressionMinPercentageViewed();
-    }
-
-    // Extras Getters
-    @Nullable
-    public Object getExtra(final String key) {
-        return mNativeAd.getExtra(key);
-    }
-
-    @NonNull
-    public Map<String, Object> getExtras() {
-        return mNativeAd.getExtras();
-    }
-
-    public boolean isOverridingImpressionTracker() {
-        return mNativeAd.isOverridingImpressionTracker();
-    }
-
-    public boolean isOverridingClickTracker() {
-        return mNativeAd.isOverridingClickTracker();
-    }
-
-    // Event Handlers
-    public void prepare(@NonNull final View view) {
-        if (isDestroyed()) {
-            return;
-        }
-
-        if (!isOverridingClickTracker()) {
-            setOnClickListener(view, new NativeViewClickListener());
-        }
-
-        mNativeAd.prepare(view);
-    }
-
-    public void recordImpression(@Nullable final View view) {
-        if (getRecordedImpression() || isDestroyed()) {
-            return;
-        }
-
-        for (final String impressionTracker : getImpressionTrackers()) {
-            TrackingRequest.makeTrackingHttpRequest(
-                    impressionTracker, mContext, BaseEvent.Name.IMPRESSION_REQUEST);
-        }
-
-        mNativeAd.recordImpression();
-        mRecordedImpression = true;
-
-        mMoPubNativeEventListener.onNativeImpression(view);
-    }
-
-    public void handleClick(@Nullable final View view) {
-        handleClick(view, new SpinningProgressView(mContext));
-    }
-
-    @VisibleForTesting
-    void handleClick(@Nullable final View view,
-            @NonNull final SpinningProgressView spinningProgressView) {
-        Preconditions.checkNotNull(spinningProgressView);
-
-        if (isDestroyed()) {
-            return;
-        }
-
-        if (!isClicked()) {
-            TrackingRequest.makeTrackingHttpRequest(
-                    mMoPubClickTracker, mContext, BaseEvent.Name.CLICK_REQUEST);
-        }
-
-        openClickDestinationUrl(view, spinningProgressView);
-        mNativeAd.handleClick(view);
-        mIsClicked = true;
-
-        mMoPubNativeEventListener.onNativeClick(view);
-    }
-
-    public void clear(@NonNull final View view) {
-        setOnClickListener(view, null);
-
-        mNativeAd.clear(view);
-    }
-
-    public void destroy() {
-        if (isDestroyed()) {
-            return;
-        }
-
-        mMoPubNativeEventListener = MoPubNative.EMPTY_EVENT_LISTENER;
-
-        mNativeAd.destroy();
-        mIsDestroyed = true;
-    }
-
-    // Non Interface Public Methods
-    public void loadMainImage(@Nullable final ImageView imageView) {
-        loadImageView(getMainImageUrl(), imageView);
-    }
-
-    public void loadIconImage(@Nullable final ImageView imageView) {
-        loadImageView(getIconImageUrl(), imageView);
-    }
-
-    public void loadExtrasImage(final String key, final ImageView imageView) {
-        final Object object = getExtra(key);
-        if (object != null && object instanceof String) {
-            loadImageView((String) object, imageView);
-        }
-    }
-
-    public boolean getRecordedImpression() {
-        return mRecordedImpression;
-    }
-
-    public boolean isClicked() {
-        return mIsClicked;
-    }
-
-    public boolean isDestroyed() {
-        return mIsDestroyed;
-    }
-
-    // Helpers
-    private void loadImageView(@Nullable final String url, @Nullable final ImageView imageView) {
-        if (imageView == null) {
-            return;
-        }
-
-        if (url == null) {
-            imageView.setImageDrawable(null);
-        } else {
-            mImageLoader.get(url, new ImageLoader.ImageListener() {
-                @Override
-                public void onResponse(final ImageLoader.ImageContainer imageContainer,
-                        final boolean isImmediate) {
-                    if (!isImmediate) {
-                        MoPubLog.d("Image was not loaded immediately into your ad view. You should call preCacheImages as part of your custom event loading process.");
-                    }
-                    imageView.setImageBitmap(imageContainer.getBitmap());
-                }
-
-                @Override
-                public void onErrorResponse(final VolleyError volleyError) {
-                    MoPubLog.d("Failed to load image.", volleyError);
-                    imageView.setImageDrawable(null);
-                }
-            });
-        }
-    }
-
-    private void openClickDestinationUrl(@Nullable final View view,
-            @NonNull final SpinningProgressView spinningProgressView) {
-        Preconditions.checkNotNull(spinningProgressView);
-
-        if (getClickDestinationUrl() == null) {
-            return;
-        }
-
-        if (view != null) {
-            spinningProgressView.addToRoot(view);
-        }
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(
-                        UrlAction.IGNORE_ABOUT_SCHEME,
-                        UrlAction.OPEN_NATIVE_BROWSER,
-                        UrlAction.OPEN_APP_MARKET,
-                        UrlAction.OPEN_IN_APP_BROWSER,
-                        UrlAction.HANDLE_SHARE_TWEET,
-                        UrlAction.FOLLOW_DEEP_LINK_WITH_FALLBACK,
-                        UrlAction.FOLLOW_DEEP_LINK)
-                .withResultActions(new UrlHandler.ResultActions() {
-                    @Override
-                    public void urlHandlingSucceeded(@NonNull String url,
-                            @NonNull UrlAction urlAction) {
-                        removeSpinningProgressView();
-                    }
-
-                    @Override
-                    public void urlHandlingFailed(@NonNull String url,
-                            @NonNull UrlAction lastFailedUrlAction) {
-                        removeSpinningProgressView();
-                    }
-
-                    private void removeSpinningProgressView() {
-                        if (view != null) {
-                            spinningProgressView.removeFromRoot();
-                        }
-                    }
-                })
-                .build().handleUrl(mContext, getClickDestinationUrl());
-    }
-
-    private void setOnClickListener(@NonNull final View view,
-            @Nullable final OnClickListener onClickListener) {
-        view.setOnClickListener(onClickListener);
-        if ((view instanceof ViewGroup)) {
-            ViewGroup viewGroup = (ViewGroup)view;
-            for (int i = 0; i < viewGroup.getChildCount(); i++)
-                setOnClickListener(viewGroup.getChildAt(i), onClickListener);
-        }
-    }
-
-    @VisibleForTesting
-    class NativeViewClickListener implements OnClickListener {
-        @Override
-        public void onClick(@NonNull final View view) {
-            handleClick(view);
-        }
-    }
-
-    @Nullable
-    @Deprecated
-    public String getSubtitle() {
-        return mNativeAd.getText();
-    }
-
-    @NonNull
-    @VisibleForTesting
-    @Deprecated
-    MoPubNativeEventListener getMoPubNativeEventListener() {
-        return mMoPubNativeEventListener;
-    }
-
-    @VisibleForTesting
-    @Deprecated
-    void setRecordedImpression(final boolean recordedImpression) {
-        mRecordedImpression = recordedImpression;
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeVideoController.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeVideoController.java
new file mode 100644
index 00000000..876e2c30
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeVideoController.java
@@ -0,0 +1,626 @@
+package com.mopub.nativeads;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
+import android.media.AudioManager;
+import android.media.AudioManager.OnAudioFocusChangeListener;
+import android.media.MediaCodec;
+import android.net.Uri;
+import android.os.Build;
+import android.os.Handler;
+import android.os.Looper;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.Surface;
+import android.view.TextureView;
+
+import com.google.android.exoplayer.ExoPlaybackException;
+import com.google.android.exoplayer.ExoPlayer;
+import com.google.android.exoplayer.MediaCodecAudioTrackRenderer;
+import com.google.android.exoplayer.MediaCodecSelector;
+import com.google.android.exoplayer.MediaCodecVideoTrackRenderer;
+import com.google.android.exoplayer.extractor.Extractor;
+import com.google.android.exoplayer.extractor.ExtractorSampleSource;
+import com.google.android.exoplayer.extractor.mp4.Mp4Extractor;
+import com.google.android.exoplayer.upstream.Allocator;
+import com.google.android.exoplayer.upstream.DataSource;
+import com.google.android.exoplayer.upstream.DefaultAllocator;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.event.BaseEvent;
+import com.mopub.common.event.Event;
+import com.mopub.common.event.EventDetails;
+import com.mopub.common.event.MoPubEvents;
+import com.mopub.mobileads.RepeatingHandlerRunnable;
+import com.mopub.mobileads.VastTracker;
+import com.mopub.mobileads.VastVideoConfig;
+import com.mopub.nativeads.NativeVideoController.NativeVideoProgressRunnable.ProgressListener;
+import com.mopub.nativeads.VisibilityTracker.VisibilityChecker;
+import com.mopub.network.TrackingRequest;
+
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Wrapper class around the {@link ExoPlayer} to provide a nice interface into the player along
+ * with some helper methods. This class is not thread safe.
+ */
+@TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+public class NativeVideoController implements ExoPlayer.Listener,OnAudioFocusChangeListener {
+
+    public interface Listener {
+        void onStateChanged(boolean playWhenReady, int playbackState);
+        void onError(Exception e);
+    }
+
+    @NonNull private final static Map<Long, NativeVideoController> sManagerMap =
+            new HashMap<Long, NativeVideoController>(4);
+
+    public static final int STATE_READY = ExoPlayer.STATE_READY;
+    public static final int STATE_BUFFERING = ExoPlayer.STATE_BUFFERING;
+    public static final int STATE_IDLE = ExoPlayer.STATE_IDLE;
+    public static final int STATE_PREPARING = ExoPlayer.STATE_PREPARING;
+    public static final int STATE_ENDED = ExoPlayer.STATE_ENDED;
+    public static final int STATE_CLEARED = ExoPlayer.STATE_ENDED + 1;
+
+    public static final long RESUME_FINISHED_THRESHOLD = 750L;
+
+    private static final int BUFFER_SEGMENT_SIZE = 64 * 1024; // 64 kB
+    private static final int BUFFER_SEGMENT_COUNT = 32; // 64 kB * 32 ~= 2 MB
+
+    @NonNull private final Context mContext;
+    @NonNull private final Handler mHandler;
+    @NonNull private final ExoPlayerFactory mExoPlayerFactory;
+    @NonNull private VastVideoConfig mVastVideoConfig;
+    @NonNull private NativeVideoProgressRunnable mNativeVideoProgressRunnable;
+    @NonNull private AudioManager mAudioManager;
+
+    @Nullable private Listener mListener;
+    @Nullable private OnAudioFocusChangeListener mOnAudioFocusChangeListener;
+    @Nullable private Surface mSurface;
+    @Nullable private TextureView mTextureView;
+    @Nullable private WeakReference<Object> mOwnerRef;
+    @Nullable private volatile ExoPlayer mExoPlayer;
+    @Nullable private BitmapDrawable mFinalFrame;
+    @Nullable private MediaCodecAudioTrackRenderer mAudioTrackRenderer;
+    @Nullable private MediaCodecVideoTrackRenderer mVideoTrackRenderer;
+    @Nullable private EventDetails mEventDetails;
+
+    private boolean mPlayWhenReady;
+    private boolean mAudioEnabled;
+    private boolean mAppAudioEnabled;
+    private int mPreviousExoPlayerState = ExoPlayer.STATE_IDLE;
+    private boolean mExoPlayerStateStartedFromIdle = true;
+
+    /**
+     * Create a new {@link NativeVideoController} for this id with the given parameters.
+     * Any existing entry with the same id is removed.
+     *
+     * @param id the unique id of the native video ad
+     * @return an initialized {@link NativeVideoController}
+     */
+    @NonNull
+    public static NativeVideoController createForId(final long id,
+            @NonNull final Context context,
+            @NonNull final List<VisibilityTrackingEvent> visibilityTrackingEvents,
+            @NonNull final VastVideoConfig vastVideoConfig,
+            @Nullable final EventDetails eventDetails) {
+        NativeVideoController nvc = new NativeVideoController(context, visibilityTrackingEvents,
+                vastVideoConfig, eventDetails);
+        sManagerMap.put(id, nvc);
+        return nvc;
+    }
+
+    @NonNull
+    @VisibleForTesting
+    public static NativeVideoController createForId(final long id,
+            @NonNull final Context context,
+            @NonNull final VastVideoConfig vastVideoConfig,
+            @NonNull final NativeVideoProgressRunnable nativeVideoProgressRunnable,
+            @NonNull final ExoPlayerFactory exoPlayerFactory,
+            @Nullable final EventDetails eventDetails,
+            @NonNull final AudioManager audioManager) {
+        NativeVideoController nvc = new NativeVideoController(context, vastVideoConfig,
+                nativeVideoProgressRunnable, exoPlayerFactory, eventDetails, audioManager);
+        sManagerMap.put(id, nvc);
+        return nvc;
+    }
+
+    @VisibleForTesting
+    static void setForId(final long id,
+            @NonNull final NativeVideoController nativeVideoController) {
+        sManagerMap.put(id, nativeVideoController);
+    }
+
+    @Nullable
+    public static NativeVideoController getForId(final long id) {
+        return sManagerMap.get(id);
+    }
+
+    @Nullable
+    public static NativeVideoController remove(final long id) {
+        return sManagerMap.remove(id);
+    }
+
+    private NativeVideoController(@NonNull final Context context,
+            @NonNull final List<VisibilityTrackingEvent> visibilityTrackingEvents,
+            @NonNull final VastVideoConfig vastVideoConfig,
+            @Nullable final EventDetails eventDetails) {
+        this(context, vastVideoConfig,
+                new NativeVideoProgressRunnable(context,
+                        new Handler(Looper.getMainLooper()),
+                        visibilityTrackingEvents,
+                        vastVideoConfig),
+                new ExoPlayerFactory(),
+                eventDetails, 
+                (AudioManager) context.getSystemService(Context.AUDIO_SERVICE));
+    }
+
+    private NativeVideoController(@NonNull final Context context,
+            @NonNull final VastVideoConfig vastVideoConfig,
+            @NonNull final NativeVideoProgressRunnable nativeVideoProgressRunnable,
+            @NonNull final ExoPlayerFactory exoPlayerFactory,
+            @Nullable final EventDetails eventDetails,
+            @NonNull final AudioManager audioManager) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(vastVideoConfig);
+        Preconditions.checkNotNull(exoPlayerFactory);
+        Preconditions.checkNotNull(audioManager);
+
+        mContext = context.getApplicationContext();
+        mHandler = new Handler(Looper.getMainLooper());
+        mVastVideoConfig = vastVideoConfig;
+        mNativeVideoProgressRunnable = nativeVideoProgressRunnable;
+        mExoPlayerFactory = exoPlayerFactory;
+        mEventDetails = eventDetails;
+        mAudioManager = audioManager;
+    }
+
+    public void setListener(@Nullable final Listener listener) {
+        mListener = listener;
+    }
+
+    public void setProgressListener(@Nullable final ProgressListener progressListener) {
+        mNativeVideoProgressRunnable.setProgressListener(progressListener);
+    }
+
+    public void setOnAudioFocusChangeListener(@Nullable final OnAudioFocusChangeListener onAudioFocusChangeListener) {
+        mOnAudioFocusChangeListener = onAudioFocusChangeListener;
+    }
+
+    public void setPlayWhenReady(final boolean playWhenReady) {
+        if (mPlayWhenReady == playWhenReady) {
+            return;
+        }
+
+        mPlayWhenReady = playWhenReady;
+        setExoPlayWhenReady();
+    }
+
+    public int getPlaybackState() {
+        if (mExoPlayer == null) {
+            return STATE_CLEARED;
+        }
+
+        return mExoPlayer.getPlaybackState();
+    }
+
+    public void setAudioEnabled(final boolean audioEnabled) {
+        mAudioEnabled = audioEnabled;
+        setExoAudio();
+    }
+
+    public void setAppAudioEnabled(final boolean audioEnabled) {
+        if (mAppAudioEnabled == audioEnabled) {
+            return;
+        }
+        mAppAudioEnabled = audioEnabled;
+
+        if (mAppAudioEnabled) {
+            mAudioManager.requestAudioFocus(this,
+                    AudioManager.STREAM_MUSIC,
+                    // Request permanent focus.
+                    AudioManager.AUDIOFOCUS_GAIN);
+        } else {
+            mAudioManager.abandonAudioFocus(this);
+        }
+    }
+
+    public void setAudioVolume(final float volume) {
+        if (!mAudioEnabled) {
+            return;
+        }
+
+        setExoAudio(volume);
+    }
+
+    @Override
+    public void onAudioFocusChange(int focusChange) {
+        if (mOnAudioFocusChangeListener == null) {
+            return;
+        }
+
+        mOnAudioFocusChangeListener.onAudioFocusChange(focusChange);
+    }
+
+    public void setTextureView(@NonNull final TextureView textureView) {
+        Preconditions.checkNotNull(textureView);
+
+        mSurface = new Surface(textureView.getSurfaceTexture());
+        mTextureView = textureView;
+        mNativeVideoProgressRunnable.setTextureView(mTextureView);
+        setExoSurface(mSurface);
+    }
+
+    /**
+     * This method is called to prepare the controller for playback. Calling this method will
+     * initiate video download.
+     */
+    public void prepare(@NonNull final Object owner) {
+        Preconditions.checkNotNull(owner);
+
+        mOwnerRef = new WeakReference<Object>(owner);
+        clearExistingPlayer();
+        preparePlayer();
+        setExoSurface(mSurface);
+    }
+
+    /**
+     * The controller will stop rendering to its surfacetexture when this method is called.
+     */
+    public void clear() {
+        setPlayWhenReady(false);
+        mSurface = null;
+        clearExistingPlayer();
+    }
+
+    /**
+     * Releases video player resources. After calling this, you must call prepare() again.
+     */
+    public void release(@NonNull final Object owner) {
+        Preconditions.checkNotNull(owner);
+
+        final Object object = mOwnerRef == null ? null : mOwnerRef.get();
+        if (object == owner) {
+            clearExistingPlayer();
+        }
+    }
+
+    @Override
+    public void onPlayerStateChanged(final boolean playWhenReady, final int newState) {
+        if (newState == STATE_ENDED && mFinalFrame == null) {
+            mFinalFrame = new BitmapDrawable(mContext.getResources(), mTextureView.getBitmap());
+            mNativeVideoProgressRunnable.requestStop();
+        }
+
+        if (mPreviousExoPlayerState == ExoPlayer.STATE_READY && newState == ExoPlayer.STATE_BUFFERING) {
+            MoPubEvents.log(Event.createEventFromDetails(
+                    BaseEvent.Name.DOWNLOAD_BUFFERING,
+                    BaseEvent.Category.NATIVE_VIDEO,
+                    BaseEvent.SamplingRate.NATIVE_VIDEO,
+                    mEventDetails));
+        }
+
+        if (mExoPlayerStateStartedFromIdle &&
+                mPreviousExoPlayerState == ExoPlayer.STATE_BUFFERING &&
+                newState == ExoPlayer.STATE_READY) {
+            MoPubEvents.log(Event.createEventFromDetails(
+                    BaseEvent.Name.DOWNLOAD_VIDEO_READY,
+                    BaseEvent.Category.NATIVE_VIDEO,
+                    BaseEvent.SamplingRate.NATIVE_VIDEO,
+                    mEventDetails));
+        }
+
+        mPreviousExoPlayerState = newState;
+        if (newState == ExoPlayer.STATE_READY) {
+            mExoPlayerStateStartedFromIdle = false;
+        } else if (newState == ExoPlayer.STATE_IDLE) {
+            mExoPlayerStateStartedFromIdle = true;
+        }
+
+        if (mListener != null) {
+            mListener.onStateChanged(playWhenReady, newState);
+        }
+    }
+
+    public void seekTo(final long ms) {
+        if (mExoPlayer == null) {
+            return;
+        }
+
+        mExoPlayer.seekTo(ms);
+        mNativeVideoProgressRunnable.seekTo(ms);
+    }
+
+    public long getCurrentPosition() {
+        return mNativeVideoProgressRunnable.getCurrentPosition();
+    }
+
+    public long getDuration() {
+        return mNativeVideoProgressRunnable.getDuration();
+    }
+
+    @Override
+    public void onPlayWhenReadyCommitted() {}
+
+    @Override
+    public void onPlayerError(ExoPlaybackException e) {
+        if (mListener == null) {
+            return;
+        }
+
+        MoPubEvents.log(Event.createEventFromDetails(
+                BaseEvent.Name.ERROR_DURING_PLAYBACK,
+                BaseEvent.Category.NATIVE_VIDEO,
+                BaseEvent.SamplingRate.NATIVE_VIDEO,
+                mEventDetails));
+
+        mListener.onError(e);
+        mNativeVideoProgressRunnable.requestStop();
+    }
+
+    /**
+     * Handles forwarding the user to the specified click through url. Also, fires all unfired
+     * impression trackers (which should already have been handled in the transition from in-stream
+     * to full-screen. See
+     * {@link com.mopub.nativeads.MoPubCustomEventVideoNative.MoPubVideoNativeAd#render(MediaLayout)}
+     */
+    public void handleCtaClick(@NonNull final Context context) {
+        triggerImpressionTrackers();
+        mVastVideoConfig.handleClickWithoutResult(context, 0);
+    }
+
+    public boolean hasFinalFrame() {
+        return mFinalFrame != null;
+    }
+
+    @Nullable
+    public Drawable getFinalFrame() {
+        return mFinalFrame;
+    }
+
+    void triggerImpressionTrackers() {
+        mNativeVideoProgressRunnable.checkImpressionTrackers(true);
+    }
+
+    private void clearExistingPlayer() {
+        if (mExoPlayer == null) {
+            return;
+        }
+
+        setExoSurface(null);
+        mExoPlayer.stop();
+        mExoPlayer.release();
+        mExoPlayer = null;
+        mNativeVideoProgressRunnable.stop();
+        mNativeVideoProgressRunnable.setExoPlayer(null);
+    }
+
+    private void preparePlayer() {
+        if (mExoPlayer == null) {
+            mExoPlayer = mExoPlayerFactory.newInstance(2, 1000, 5000);
+            mNativeVideoProgressRunnable.setExoPlayer(mExoPlayer);
+            mExoPlayer.addListener(this);
+
+            // Set up data sources
+            final Allocator allocator = new DefaultAllocator(BUFFER_SEGMENT_SIZE);
+            final Extractor extractor = new Mp4Extractor();
+
+            final DataSource httpSource = new HttpDiskCompositeDataSource(mContext, "exo_demo",
+                    mEventDetails);
+
+            final String videoUrl = mVastVideoConfig.getNetworkMediaFileUrl();
+
+            final ExtractorSampleSource sampleSource = new ExtractorSampleSource(Uri.parse(videoUrl),
+                    httpSource, allocator, BUFFER_SEGMENT_SIZE * BUFFER_SEGMENT_COUNT, extractor);
+            mVideoTrackRenderer = new MediaCodecVideoTrackRenderer(mContext, sampleSource,
+                    MediaCodecSelector.DEFAULT,
+                    MediaCodec.VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING, 0, mHandler, null,
+                    10);
+            mAudioTrackRenderer = new MediaCodecAudioTrackRenderer(sampleSource,
+                    MediaCodecSelector.DEFAULT);
+            mExoPlayer.prepare(mAudioTrackRenderer, mVideoTrackRenderer);
+            mNativeVideoProgressRunnable.startRepeating(50);
+        }
+
+        setExoAudio();
+        setExoPlayWhenReady();
+    }
+
+    private void setExoPlayWhenReady() {
+        if (mExoPlayer == null) {
+            return;
+        }
+
+        mExoPlayer.setPlayWhenReady(mPlayWhenReady);
+    }
+
+    private void setExoAudio() {
+        setExoAudio(mAudioEnabled ? 1.0f : 0.0f);
+    }
+
+    private void setExoAudio(final float volume) {
+        Preconditions.checkArgument(volume >= 0.0f && volume <= 1.0f);
+        if (mExoPlayer == null) {
+            return;
+        }
+
+        mExoPlayer.sendMessage(
+                mAudioTrackRenderer, MediaCodecAudioTrackRenderer.MSG_SET_VOLUME, volume);
+    }
+
+    private void setExoSurface(@Nullable final Surface surface) {
+        if (mExoPlayer == null) {
+            return;
+        }
+
+        mExoPlayer.sendMessage(
+                mVideoTrackRenderer, MediaCodecVideoTrackRenderer.MSG_SET_SURFACE, surface);
+    }
+
+    /**
+     * Created purely for the purpose of mocking to ease testing.
+     */
+    @VisibleForTesting
+    static class ExoPlayerFactory {
+        public ExoPlayer newInstance(int rendererCount, int minBufferMs, int minRebufferMs) {
+            return ExoPlayer.Factory.newInstance(rendererCount, minBufferMs, minRebufferMs);
+        }
+    }
+
+    static class VisibilityTrackingEvent {
+        interface OnTrackedStrategy {
+            void execute();
+        }
+
+        OnTrackedStrategy strategy;
+        int minimumPercentageVisible;
+        int totalRequiredPlayTimeMs;
+        int totalQualifiedPlayCounter;
+        boolean isTracked;
+    }
+
+    static class NativeVideoProgressRunnable extends RepeatingHandlerRunnable {
+        public interface ProgressListener {
+            /**
+             * Should send a number from 0 to 1000.
+             *
+             * @param progressTenthPercent tenth of a percentage of video progress
+             */
+            void updateProgress(int progressTenthPercent);
+        }
+
+        @NonNull private final Context mContext;
+        @NonNull private final VisibilityChecker mVisibilityChecker;
+        @NonNull private final List<VisibilityTrackingEvent> mVisibilityTrackingEvents;
+        @NonNull private final VastVideoConfig mVastVideoConfig;
+        @Nullable private ExoPlayer mExoPlayer;
+        @Nullable private TextureView mTextureView;
+        @Nullable private ProgressListener mProgressListener;
+        private long mCurrentPosition;
+        private long mDuration;
+        private boolean mStopRequested;
+
+        NativeVideoProgressRunnable(@NonNull final Context context,
+                @NonNull final Handler handler,
+                @NonNull final List<VisibilityTrackingEvent> visibilityTrackingEvents,
+                @NonNull final VastVideoConfig vastVideoConfig) {
+            this(context, handler, visibilityTrackingEvents, new VisibilityChecker(),
+                    vastVideoConfig);
+        }
+
+        @VisibleForTesting
+        NativeVideoProgressRunnable(@NonNull final Context context,
+                @NonNull final Handler handler,
+                @NonNull final List<VisibilityTrackingEvent> visibilityTrackingEvents,
+                @NonNull final VisibilityChecker visibilityChecker,
+                @NonNull final VastVideoConfig vastVideoConfig) {
+            super(handler);
+            Preconditions.checkNotNull(context);
+            Preconditions.checkNotNull(handler);
+            Preconditions.checkNotNull(visibilityTrackingEvents);
+            Preconditions.checkNotNull(vastVideoConfig);
+
+            mContext = context.getApplicationContext();
+            mVisibilityTrackingEvents = visibilityTrackingEvents;
+            mVisibilityChecker = visibilityChecker;
+            mVastVideoConfig = vastVideoConfig;
+            mDuration = -1L; // Initialized to -1 so we can distinguish between "never started" and a zero-length video.
+            mStopRequested = false;
+        }
+
+        void setExoPlayer(@Nullable final ExoPlayer exoPlayer) {
+            mExoPlayer = exoPlayer;
+        }
+
+        void setTextureView(@Nullable final TextureView textureView) {
+            mTextureView = textureView;
+        }
+
+        void setProgressListener(@Nullable final ProgressListener progressListener) {
+            mProgressListener = progressListener;
+        }
+
+        void seekTo(long currentPosition) {
+            mCurrentPosition = currentPosition;
+        }
+
+        long getCurrentPosition() {
+            return mCurrentPosition;
+        }
+
+        long getDuration() {
+            return mDuration;
+        }
+
+        void requestStop() {
+            mStopRequested = true;
+        }
+
+        void checkImpressionTrackers(final boolean forceTrigger) {
+            int trackedCount = 0;
+            for (VisibilityTrackingEvent event : mVisibilityTrackingEvents) {
+                if (event.isTracked) {
+                    trackedCount++;
+                    continue;
+                }
+                if (forceTrigger || mVisibilityChecker.isVisible(mTextureView, mTextureView,
+                        event.minimumPercentageVisible)) {
+                    event.totalQualifiedPlayCounter += mUpdateIntervalMillis;
+                    if (forceTrigger ||
+                            event.totalQualifiedPlayCounter >= event.totalRequiredPlayTimeMs) {
+                        event.strategy.execute();
+                        event.isTracked = true;
+                        trackedCount++;
+                    }
+                }
+            }
+            if (trackedCount == mVisibilityTrackingEvents.size() && mStopRequested) {
+                stop();
+            }
+        }
+
+        @Override
+        public void doWork() {
+            if (mExoPlayer == null || !mExoPlayer.getPlayWhenReady()) {
+                return;
+            }
+
+            mCurrentPosition = mExoPlayer.getCurrentPosition();
+            mDuration = mExoPlayer.getDuration();
+
+            checkImpressionTrackers(false);
+
+            if (mProgressListener != null) {
+                float tenthsOfPercentPlayed = ((float) mCurrentPosition / mDuration) * 1000;
+                mProgressListener.updateProgress((int) tenthsOfPercentPlayed);
+            }
+
+            final List<VastTracker> trackers =
+                    mVastVideoConfig.getUntriggeredTrackersBefore(
+                            (int) mCurrentPosition, (int) mDuration);
+            if (!trackers.isEmpty()) {
+                final List<String> trackingUrls = new ArrayList<String>();
+                for (VastTracker tracker : trackers) {
+                    if (tracker.isTracked()) {
+                        continue;
+                    }
+                    trackingUrls.add(tracker.getTrackingUrl());
+                    tracker.setTracked();
+                }
+                TrackingRequest.makeTrackingHttpRequest(trackingUrls, mContext);
+            }
+        }
+
+        @Deprecated
+        @VisibleForTesting
+        void setUpdateIntervalMillis(final long updateIntervalMillis) {
+            mUpdateIntervalMillis = updateIntervalMillis;
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeVideoViewController.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
new file mode 100644
index 00000000..99e7c58e
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
@@ -0,0 +1,330 @@
+package com.mopub.nativeads;
+
+import android.annotation.TargetApi;
+import android.app.Activity;
+import android.content.Context;
+import android.content.res.Configuration;
+import android.graphics.Bitmap;
+import android.graphics.SurfaceTexture;
+import android.media.AudioManager;
+import android.os.Build;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.TextureView;
+import android.view.View;
+import android.view.ViewGroup.LayoutParams;
+import android.widget.VideoView;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.UrlAction;
+import com.mopub.common.UrlHandler;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.mobileads.BaseVideoViewController;
+import com.mopub.mobileads.VastVideoConfig;
+import com.mopub.nativeads.MoPubCustomEventVideoNative.MoPubVideoNativeAd;
+import com.mopub.nativeads.NativeFullScreenVideoView.Mode;
+import com.mopub.nativeads.NativeVideoController.NativeVideoProgressRunnable;
+
+@TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+public class NativeVideoViewController extends BaseVideoViewController implements TextureView
+        .SurfaceTextureListener, NativeVideoController.Listener,
+        AudioManager.OnAudioFocusChangeListener {
+
+    enum VideoState { NONE, LOADING, BUFFERING, PAUSED, PLAYING, ENDED, FAILED_LOAD }
+
+    @NonNull public static final String NATIVE_VIDEO_ID = "native_video_id";
+    @NonNull public static final String NATIVE_VAST_VIDEO_CONFIG = "native_vast_video_config";
+
+    @NonNull private VideoState mVideoState;
+    @NonNull private VastVideoConfig mVastVideoConfig;
+    @NonNull private final NativeFullScreenVideoView mFullScreenVideoView;
+    @NonNull private final NativeVideoController mNativeVideoController;
+    @Nullable private Bitmap mCachedVideoFrame;
+    /*
+     * This state variable prevents the view from flickering when NativeVideoController state
+     * changes but the video has already finished playing.
+     */
+    private boolean mEnded;
+    private boolean mError;
+    private int mLatestVideoControllerState;
+
+    public NativeVideoViewController(@NonNull final Context context,
+            @NonNull final Bundle intentExtras,
+            @NonNull final Bundle savedInstanceState,
+            @NonNull final BaseVideoViewControllerListener baseVideoViewControllerListener) {
+        this(context, intentExtras, savedInstanceState, baseVideoViewControllerListener,
+                new NativeFullScreenVideoView(context,
+                        context.getResources().getConfiguration().orientation,
+                        ((VastVideoConfig) intentExtras.get(NATIVE_VAST_VIDEO_CONFIG))
+                                .getCustomCtaText()));
+    }
+
+    @VisibleForTesting
+    NativeVideoViewController(@NonNull final Context context,
+            @NonNull final Bundle intentExtras,
+            @NonNull final Bundle savedInstanceState,
+            @NonNull final BaseVideoViewControllerListener baseVideoViewControllerListener,
+            @NonNull final NativeFullScreenVideoView fullScreenVideoView) {
+        super(context, null, baseVideoViewControllerListener);
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(intentExtras);
+        Preconditions.checkNotNull(baseVideoViewControllerListener);
+        Preconditions.checkNotNull(fullScreenVideoView);
+
+        mVideoState = VideoState.NONE;
+        mVastVideoConfig = ((VastVideoConfig) intentExtras.get(NATIVE_VAST_VIDEO_CONFIG));
+        mFullScreenVideoView = fullScreenVideoView;
+        final long videoId = (long) intentExtras.get(NATIVE_VIDEO_ID);
+        mNativeVideoController = NativeVideoController.getForId(videoId);
+
+        // Variables being checked below may be null but if they are it indicates
+        // a serious error in setting up this activity and we should detect it
+        // as soon as possible
+        Preconditions.checkNotNull(mVastVideoConfig);
+        Preconditions.checkNotNull(mNativeVideoController);
+    }
+
+    @Override
+    protected VideoView getVideoView() {
+        return null;
+    }
+
+    @Override
+    protected void onCreate() {
+        mFullScreenVideoView.setSurfaceTextureListener(this);
+        mFullScreenVideoView.setMode(Mode.LOADING);
+        mFullScreenVideoView.setPlayControlClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (mEnded) {
+                    mEnded = false;
+                    mFullScreenVideoView.resetProgress();
+                    mNativeVideoController.seekTo(0);
+                }
+                applyState(VideoState.PLAYING);
+            }
+        });
+
+        mFullScreenVideoView.setCloseControlListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                applyState(VideoState.PAUSED, true);
+                getBaseVideoViewControllerListener().onFinish();
+            }
+        });
+
+        mFullScreenVideoView.setCtaClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                mNativeVideoController.setPlayWhenReady(false);
+                mCachedVideoFrame = mFullScreenVideoView.getTextureView().getBitmap();
+                mNativeVideoController.handleCtaClick((Activity) getContext());
+            }
+        });
+
+        mFullScreenVideoView.setPrivacyInformationClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                mNativeVideoController.setPlayWhenReady(false);
+                mCachedVideoFrame = mFullScreenVideoView.getTextureView().getBitmap();
+                new UrlHandler.Builder().withSupportedUrlActions(UrlAction.OPEN_IN_APP_BROWSER)
+                        .build().handleUrl(getContext(),
+                        MoPubVideoNativeAd.PRIVACY_INFORMATION_CLICKTHROUGH_URL);
+            }
+        });
+
+        final LayoutParams adViewLayout =
+                new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
+        mFullScreenVideoView.setLayoutParams(adViewLayout);
+        getBaseVideoViewControllerListener().onSetContentView(mFullScreenVideoView);
+
+        mNativeVideoController.setProgressListener(new NativeVideoProgressRunnable
+                .ProgressListener() {
+
+            @Override
+            public void updateProgress(final int progressTenthPercent) {
+                mFullScreenVideoView.updateProgress(progressTenthPercent);
+            }
+        });
+    }
+
+    @Override
+    protected void onResume() {
+        if (mCachedVideoFrame != null) {
+            mFullScreenVideoView.setCachedVideoFrame(mCachedVideoFrame);
+        }
+        mNativeVideoController.prepare(this);
+        mNativeVideoController.setListener(this);
+        mNativeVideoController.setOnAudioFocusChangeListener(this);
+    }
+
+    @Override
+    protected void onPause() { }
+
+    @Override
+    protected void onDestroy() { }
+
+    @Override
+    protected void onSaveInstanceState(@NonNull final Bundle outState) { }
+
+    @Override
+    protected void onConfigurationChanged(final Configuration configuration) {
+        mFullScreenVideoView.setOrientation(configuration.orientation);
+    }
+
+    @Override
+    protected void onBackPressed() {
+        applyState(VideoState.PAUSED, true);
+    }
+
+    @Override
+    public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) {
+        mNativeVideoController.setTextureView(mFullScreenVideoView.getTextureView());
+
+        if (!mEnded) {
+            mNativeVideoController.seekTo(mNativeVideoController.getCurrentPosition());
+        }
+        mNativeVideoController.setPlayWhenReady(!mEnded);
+        long currentPosition = mNativeVideoController.getCurrentPosition();
+        long duration = mNativeVideoController.getDuration();
+        long remaining = duration - currentPosition;
+        if (remaining < NativeVideoController.RESUME_FINISHED_THRESHOLD) {
+            mEnded = true;
+            maybeChangeState();
+        }
+    }
+
+    @Override
+    public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) { }
+
+    @Override
+    public boolean onSurfaceTextureDestroyed(final SurfaceTexture surface) {
+        mNativeVideoController.release(this);
+        applyState(VideoState.PAUSED);
+        return true;
+    }
+
+    @Override
+    public void onSurfaceTextureUpdated(SurfaceTexture surface) { }
+
+    @Override
+    public void onStateChanged(final boolean playWhenReady, final int playbackState) {
+        mLatestVideoControllerState = playbackState;
+        maybeChangeState();
+    }
+
+    @Override
+    public void onError(final Exception e) {
+        MoPubLog.w("Error playing back video.", e);
+        mError = true;
+        maybeChangeState();
+    }
+
+    @Override
+    public void onAudioFocusChange(int focusChange) {
+        if (focusChange == AudioManager.AUDIOFOCUS_LOSS
+                || focusChange == AudioManager.AUDIOFOCUS_LOSS_TRANSIENT) {
+            // Pause Video
+            applyState(VideoState.PAUSED);
+        } else if (focusChange == AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK) {
+            // Lower the volume
+            mNativeVideoController.setAudioVolume(0.3f);
+        } else if (focusChange == AudioManager.AUDIOFOCUS_GAIN) {
+            // Resume playback
+            mNativeVideoController.setAudioVolume(1.0f);
+            maybeChangeState();
+        }
+    }
+
+    private void maybeChangeState() {
+        VideoState newState = mVideoState;
+
+        if (mError) {
+            newState = VideoState.FAILED_LOAD;
+        } else if (mEnded) {
+            newState = VideoState.ENDED;
+        } else {
+            if (mLatestVideoControllerState == NativeVideoController.STATE_PREPARING
+                    || mLatestVideoControllerState == NativeVideoController.STATE_IDLE) {
+                newState = VideoState.LOADING;
+            } else if (mLatestVideoControllerState == NativeVideoController.STATE_BUFFERING) {
+                newState = VideoState.BUFFERING;
+            } else if (mLatestVideoControllerState == NativeVideoController.STATE_READY) {
+                newState = VideoState.PLAYING;
+            } else if (mLatestVideoControllerState == NativeVideoController.STATE_ENDED
+                    || mLatestVideoControllerState == NativeVideoController.STATE_CLEARED){
+                newState = VideoState.ENDED;
+            }
+        }
+
+        applyState(newState);
+    }
+
+
+    @VisibleForTesting
+    void applyState(@NonNull final VideoState videoState) {
+        applyState(videoState, false);
+    }
+
+    @VisibleForTesting
+    void applyState(@NonNull final VideoState videoState, boolean transitionToInline) {
+        Preconditions.checkNotNull(videoState);
+        if (mVideoState == videoState) {
+            return;
+        }
+
+        switch (videoState) {
+            case FAILED_LOAD:
+                // Spin endlessly for an error state
+                mNativeVideoController.setPlayWhenReady(false);
+                mNativeVideoController.setAudioEnabled(false);
+                mNativeVideoController.setAppAudioEnabled(false);
+                mFullScreenVideoView.setMode(Mode.LOADING);
+                mVastVideoConfig.handleError(getContext(), null, 0);
+                break;
+            case LOADING:
+            case BUFFERING:
+                mNativeVideoController.setPlayWhenReady(true);
+                mFullScreenVideoView.setMode(Mode.LOADING);
+                break;
+            case PLAYING:
+                mNativeVideoController.setPlayWhenReady(true);
+                mNativeVideoController.setAudioEnabled(true);
+                mNativeVideoController.setAppAudioEnabled(true);
+                mFullScreenVideoView.setMode(Mode.PLAYING);
+                break;
+            case PAUSED:
+                if (!transitionToInline) {
+                    mNativeVideoController.setAppAudioEnabled(false);
+                }
+                mNativeVideoController.setPlayWhenReady(false);
+                mFullScreenVideoView.setMode(Mode.PAUSED);
+                break;
+            case ENDED:
+                mEnded = true;
+                mNativeVideoController.setAppAudioEnabled(false);
+                mFullScreenVideoView.updateProgress(1000);
+                mFullScreenVideoView.setMode(Mode.FINISHED);
+                mVastVideoConfig.handleComplete(getContext(), 0);
+                break;
+            default:
+                // nothing
+        }
+
+        mVideoState = videoState;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    NativeFullScreenVideoView getNativeFullScreenVideoView() {
+        return mFullScreenVideoView;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    VideoState getVideoState() {
+        return mVideoState;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeViewHolder.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeViewHolder.java
deleted file mode 100644
index c6d09ca5..00000000
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeViewHolder.java
+++ /dev/null
@@ -1,100 +0,0 @@
-package com.mopub.nativeads;
-
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.view.View;
-import android.widget.ImageView;
-import android.widget.TextView;
-
-import com.mopub.common.VisibleForTesting;
-import com.mopub.common.logging.MoPubLog;
-
-class NativeViewHolder {
-    @Nullable View mainView;
-    @Nullable TextView titleView;
-    @Nullable TextView textView;
-    @Nullable TextView callToActionView;
-    @Nullable ImageView mainImageView;
-    @Nullable ImageView iconImageView;
-
-    @VisibleForTesting
-    static final NativeViewHolder EMPTY_VIEW_HOLDER = new NativeViewHolder();
-
-    // Use fromViewBinder instead of a constructor
-    private NativeViewHolder() {}
-
-    @NonNull
-    static NativeViewHolder fromViewBinder(@NonNull final View view,
-            @NonNull final ViewBinder viewBinder) {
-        final NativeViewHolder nativeViewHolder = new NativeViewHolder();
-        nativeViewHolder.mainView = view;
-        try {
-            nativeViewHolder.titleView = (TextView) view.findViewById(viewBinder.titleId);
-            nativeViewHolder.textView = (TextView) view.findViewById(viewBinder.textId);
-            nativeViewHolder.callToActionView = (TextView) view.findViewById(viewBinder.callToActionId);
-            nativeViewHolder.mainImageView = (ImageView) view.findViewById(viewBinder.mainImageId);
-            nativeViewHolder.iconImageView = (ImageView) view.findViewById(viewBinder.iconImageId);
-            return nativeViewHolder;
-        } catch (ClassCastException exception) {
-            MoPubLog.w("Could not cast from id in ViewBinder to expected View type", exception);
-            return EMPTY_VIEW_HOLDER;
-        }
-    }
-
-    void update(@NonNull final NativeResponse nativeResponse) {
-        addTextView(titleView, nativeResponse.getTitle());
-        addTextView(textView, nativeResponse.getText());
-        addTextView(callToActionView, nativeResponse.getCallToAction());
-        nativeResponse.loadMainImage(mainImageView);
-        nativeResponse.loadIconImage(iconImageView);
-    }
-
-    void updateExtras(@NonNull final NativeResponse nativeResponse,
-                      @NonNull final ViewBinder viewBinder) {
-        if (mainView == null) {
-            MoPubLog.w("Attempted to bind extras on a null main view.");
-            return;
-        }
-        for (final String key : viewBinder.extras.keySet()) {
-            final int resourceId = viewBinder.extras.get(key);
-            final View view = mainView.findViewById(resourceId);
-            final Object content = nativeResponse.getExtra(key);
-
-            if (view instanceof ImageView) {
-                // Clear previous image
-                ((ImageView) view).setImageDrawable(null);
-                nativeResponse.loadExtrasImage(key, (ImageView) view);
-            } else if (view instanceof TextView) {
-                // Clear previous text value
-                ((TextView) view).setText(null);
-                if (content instanceof String) {
-                    addTextView((TextView) view, (String) content);
-                }
-            } else {
-                MoPubLog.d("View bound to " + key + " should be an instance of TextView or ImageView.");
-            }
-        }
-    }
-
-    private void addTextView(@Nullable final TextView textView, @Nullable final String contents) {
-        if (textView == null) {
-            MoPubLog.d("Attempted to add text (" + contents + ") to null TextView.");
-            return;
-        }
-
-        // Clear previous value
-        textView.setText(null);
-
-        if (contents == null) {
-            MoPubLog.d("Attempted to set TextView contents to null.");
-        } else {
-            textView.setText(contents);
-        }
-    }
-
-    public void setViewVisibility(final int visibility) {
-        if (mainView != null) {
-            mainView.setVisibility(visibility);
-        }
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/PlacementData.java b/mopub-sdk/src/main/java/com/mopub/nativeads/PlacementData.java
index bba220d6..d8ba46c6 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/PlacementData.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/PlacementData.java
@@ -135,7 +135,7 @@
     private int mDesiredCount = 0;
     @NonNull private final int[] mOriginalAdPositions = new int[MAX_ADS];
     @NonNull private final int[] mAdjustedAdPositions = new int[MAX_ADS];
-    @NonNull private final NativeAdData[] mAdDataObjects = new NativeAdData[MAX_ADS];
+    @NonNull private final NativeAd[] mNativeAds = new NativeAd[MAX_ADS];
     private int mPlacedCount = 0;
 
     /**
@@ -214,7 +214,7 @@ int previousInsertionPosition(final int position) {
     /**
      * Sets ad data at the given position.
      */
-    void placeAd(final int adjustedPosition, final NativeAdData adData) {
+    void placeAd(final int adjustedPosition, final NativeAd nativeAd) {
         // See if this is a insertion ad
         final int desiredIndex = binarySearchFirstEquals(
                 mDesiredInsertionPositions, mDesiredCount, adjustedPosition);
@@ -234,11 +234,11 @@ void placeAd(final int adjustedPosition, final NativeAdData adData) {
                     mOriginalAdPositions, placeIndex + 1, num);
             System.arraycopy(mAdjustedAdPositions, placeIndex,
                     mAdjustedAdPositions, placeIndex + 1, num);
-            System.arraycopy(mAdDataObjects, placeIndex, mAdDataObjects, placeIndex + 1, num);
+            System.arraycopy(mNativeAds, placeIndex, mNativeAds, placeIndex + 1, num);
         }
         mOriginalAdPositions[placeIndex] = originalPosition;
         mAdjustedAdPositions[placeIndex] = adjustedPosition;
-        mAdDataObjects[placeIndex] = adData;
+        mNativeAds[placeIndex] = nativeAd;
         mPlacedCount++;
 
         // Remove desired index
@@ -271,12 +271,12 @@ boolean isPlacedAd(final int position) {
      * no ad at this position.
      */
     @Nullable
-    NativeAdData getPlacedAd(final int position) {
+    NativeAd getPlacedAd(final int position) {
         final int index = binarySearch(mAdjustedAdPositions, 0, mPlacedCount, position);
         if (index < 0) {
             return null;
         }
-        return mAdDataObjects[index];
+        return mNativeAds[index];
     }
 
     /**
@@ -361,15 +361,15 @@ int clearAdsInRange(final int adjustedStartRange, final int adjustedEndRange) {
                 clearAdjustedPositions[clearCount] = adjustedPosition - clearCount;
 
                 // Destroying and nulling out the ad objects to avoids a memory leak.
-                mAdDataObjects[i].getAd().destroy();
-                mAdDataObjects[i] = null;
+                mNativeAds[i].destroy();
+                mNativeAds[i] = null;
                 clearCount++;
             } else if (clearCount > 0) {
                 // The position is not in the range; shift it by the number of cleared ads.
                 int newIndex = i - clearCount;
                 mOriginalAdPositions[newIndex] = originalPosition;
                 mAdjustedAdPositions[newIndex] = adjustedPosition - clearCount;
-                mAdDataObjects[newIndex] = mAdDataObjects[i];
+                mNativeAds[newIndex] = mNativeAds[i];
             }
         }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/StaticNativeAd.java b/mopub-sdk/src/main/java/com/mopub/nativeads/StaticNativeAd.java
new file mode 100644
index 00000000..e306e1fe
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/StaticNativeAd.java
@@ -0,0 +1,267 @@
+package com.mopub.nativeads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.View;
+
+import com.mopub.common.Preconditions.NoThrow;
+import com.mopub.common.logging.MoPubLog;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * This the base class for implementations of the static native ad format.
+ */
+public abstract class StaticNativeAd extends BaseNativeAd implements ImpressionInterface, ClickInterface {
+    private static final int IMPRESSION_MIN_PERCENTAGE_VIEWED = 50;
+
+    static final double MIN_STAR_RATING = 0;
+    static final double MAX_STAR_RATING = 5;
+
+    // Basic fields
+    @Nullable private String mMainImageUrl;
+    @Nullable private String mIconImageUrl;
+    @Nullable private String mClickDestinationUrl;
+    @Nullable private String mCallToAction;
+    @Nullable private String mTitle;
+    @Nullable private String mText;
+    @Nullable private Double mStarRating;
+    @Nullable private String mPrivacyInformationIconClickThroughUrl;
+    @Nullable private String mPrivacyInformationIconImageUrl;
+
+    // Impression logistics
+    private boolean mImpressionRecorded;
+    private int mImpressionMinTimeViewed;
+
+    // Extras
+    @NonNull private final Map<String, Object> mExtras;
+
+    public StaticNativeAd() {
+        mImpressionMinTimeViewed = 1000;
+
+        mExtras = new HashMap<String, Object>();
+    }
+
+    // Getters
+    /**
+     * Returns the String corresponding to the ad's title.
+     */
+    @Nullable
+    final public String getTitle() {
+        return mTitle;
+    }
+
+    /**
+     * Returns the String corresponding to the ad's body text.
+     */
+    @Nullable
+    final public String getText() {
+        return mText;
+    }
+    /**
+     * Returns the String url corresponding to the ad's main image.
+     */
+    @Nullable
+    final public String getMainImageUrl() {
+        return mMainImageUrl;
+    }
+
+    /**
+     * Returns the String url corresponding to the ad's icon image.
+     */
+    @Nullable
+    final public String getIconImageUrl() {
+        return mIconImageUrl;
+    }
+
+    /**
+     * Returns the Call To Action String (i.e. "Download" or "Learn More") associated with this ad.
+     */
+    @Nullable
+    final public String getCallToAction() {
+        return mCallToAction;
+    }
+
+    /**
+     * For app install ads, this returns the associated star rating (on a 5 star scale) for the
+     * advertised app. Note that this method may return null if the star rating was either never set
+     * or invalid.
+     */
+    @Nullable
+    final public Double getStarRating() {
+        return mStarRating;
+    }
+
+    /**
+     * Returns the Privacy Information click through url. No Privacy Information Icon will be shown
+     * unless this is set to something non-null using {@link #setPrivacyInformationIconClickThroughUrl(String)}.
+     *
+     * @return String representing the Privacy Information Icon click through url, or {@code null}
+     * if not set.
+     */
+    @Nullable
+    final public String getPrivacyInformationIconClickThroughUrl() {
+        return mPrivacyInformationIconClickThroughUrl;
+    }
+
+    /**
+     * Returns the Privacy Information image url.
+     *
+     * @return String representing the Privacy Information Icon image url, or {@code null} if not
+     * set.
+     */
+    @Nullable
+    public String getPrivacyInformationIconImageUrl() {
+        return mPrivacyInformationIconImageUrl;
+    }
+
+    // Extras Getters
+    /**
+     * Given a particular String key, return the associated Object value from the ad's extras map.
+     * See {@link StaticNativeAd#getExtras()} for more information.
+     */
+    @Nullable
+    final public Object getExtra(@NonNull final String key) {
+        if (!NoThrow.checkNotNull(key, "getExtra key is not allowed to be null")) {
+            return null;
+        }
+        return mExtras.get(key);
+    }
+
+    /**
+     * Returns a copy of the extras map, reflecting additional ad content not reflected in any
+     * of the above hardcoded setters. This is particularly useful for passing down custom fields
+     * with MoPub's direct-sold native ads or from mediated networks that pass back additional
+     * fields.
+     */
+    @NonNull
+    final public Map<String, Object> getExtras() {
+        return new HashMap<String, Object>(mExtras);
+    }
+
+    /**
+     * Returns the String url that the device will attempt to resolve when the ad is clicked.
+     */
+    @Nullable
+    final public String getClickDestinationUrl() {
+        return mClickDestinationUrl;
+    }
+
+    final public void setMainImageUrl(@Nullable final String mainImageUrl) {
+        mMainImageUrl = mainImageUrl;
+    }
+
+    final public void setIconImageUrl(@Nullable final String iconImageUrl) {
+        mIconImageUrl = iconImageUrl;
+    }
+
+    final public void setClickDestinationUrl(@Nullable final String clickDestinationUrl) {
+        mClickDestinationUrl = clickDestinationUrl;
+    }
+
+    final public void setCallToAction(@Nullable final String callToAction) {
+        mCallToAction = callToAction;
+    }
+
+    final public void setTitle(@Nullable final String title) {
+        mTitle = title;
+    }
+
+    final public void setText(@Nullable final String text) {
+        mText = text;
+    }
+
+    final public void setStarRating(@Nullable final Double starRating) {
+        if (starRating == null) {
+            mStarRating = null;
+        } else if (starRating >= MIN_STAR_RATING && starRating <= MAX_STAR_RATING) {
+            mStarRating = starRating;
+        } else {
+            MoPubLog.d("Ignoring attempt to set invalid star rating (" + starRating + "). Must be "
+                    + "between " + MIN_STAR_RATING + " and " + MAX_STAR_RATING + ".");
+        }
+    }
+
+    final public void setPrivacyInformationIconClickThroughUrl(
+            @Nullable final String privacyInformationIconClickThroughUrl) {
+        mPrivacyInformationIconClickThroughUrl = privacyInformationIconClickThroughUrl;
+    }
+
+    final public void setPrivacyInformationIconImageUrl(
+            @Nullable String privacyInformationIconImageUrl) {
+        mPrivacyInformationIconImageUrl = privacyInformationIconImageUrl;
+    }
+
+    final public void addExtra(@NonNull final String key, @Nullable final Object value) {
+        if (!NoThrow.checkNotNull(key, "addExtra key is not allowed to be null")) {
+            return;
+        }
+        mExtras.put(key, value);
+    }
+
+    final public void setImpressionMinTimeViewed(final int impressionMinTimeViewed) {
+        if (impressionMinTimeViewed >= 0) {
+            mImpressionMinTimeViewed = impressionMinTimeViewed;
+        }
+    }
+
+    // Lifecycle Handlers
+    @Override
+    public void prepare(@NonNull final View view) { }
+
+    @Override
+    public void clear(@NonNull final View view) { }
+
+    @Override
+    public void destroy() { }
+
+    // Event Handlers
+    /**
+     * Your {@link StaticNativeAd} subclass should implement this method if the network requires the developer
+     * to explicitly record an impression of a view rendered to screen.
+     *
+     * This method is optional.
+     */
+    @Override
+    public void recordImpression(@NonNull final View view) { }
+
+    /**
+     * Returns the minimum viewable percentage of the ad that must be onscreen for it to be
+     * considered visible. See {@link StaticNativeAd#getImpressionMinTimeViewed()} for
+     * additional impression tracking considerations.
+     */
+    @Override
+    final public int getImpressionMinPercentageViewed() {
+        return IMPRESSION_MIN_PERCENTAGE_VIEWED;
+    }
+
+    /**
+     * Returns the minimum amount of time (in milliseconds) the ad that must be onscreen before an
+     * impression is recorded. See {@link StaticNativeAd#getImpressionMinPercentageViewed()}
+     * for additional impression tracking considerations.
+     */
+    @Override
+    final public int getImpressionMinTimeViewed() {
+        return mImpressionMinTimeViewed;
+    }
+
+    @Override
+    final public boolean isImpressionRecorded() {
+        return mImpressionRecorded;
+    }
+
+    @Override
+    final public void setImpressionRecorded() {
+        mImpressionRecorded = true;
+    }
+
+    /**
+     * Your {@link StaticNativeAd} subclass should implement this method if the network requires the developer
+     * to explicitly handle click events of views rendered to screen.
+     *
+     * This method is optional.
+     */
+    @Override
+    public void handleClick(@NonNull final View view) { }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/StaticNativeViewHolder.java b/mopub-sdk/src/main/java/com/mopub/nativeads/StaticNativeViewHolder.java
new file mode 100644
index 00000000..2a5f538b
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/StaticNativeViewHolder.java
@@ -0,0 +1,49 @@
+package com.mopub.nativeads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+
+class StaticNativeViewHolder {
+    @Nullable View mainView;
+    @Nullable TextView titleView;
+    @Nullable TextView textView;
+    @Nullable TextView callToActionView;
+    @Nullable ImageView mainImageView;
+    @Nullable ImageView iconImageView;
+    @Nullable ImageView privacyInformationIconImageView;
+
+    @VisibleForTesting
+    static final StaticNativeViewHolder EMPTY_VIEW_HOLDER = new StaticNativeViewHolder();
+
+    // Use fromViewBinder instead of a constructor
+    private StaticNativeViewHolder() {}
+
+    @NonNull
+    static StaticNativeViewHolder fromViewBinder(@NonNull final View view,
+            @NonNull final ViewBinder viewBinder) {
+        final StaticNativeViewHolder staticNativeViewHolder = new StaticNativeViewHolder();
+        staticNativeViewHolder.mainView = view;
+        try {
+            staticNativeViewHolder.titleView = (TextView) view.findViewById(viewBinder.titleId);
+            staticNativeViewHolder.textView = (TextView) view.findViewById(viewBinder.textId);
+            staticNativeViewHolder.callToActionView =
+                    (TextView) view.findViewById(viewBinder.callToActionId);
+            staticNativeViewHolder.mainImageView =
+                    (ImageView) view.findViewById(viewBinder.mainImageId);
+            staticNativeViewHolder.iconImageView =
+                    (ImageView) view.findViewById(viewBinder.iconImageId);
+            staticNativeViewHolder.privacyInformationIconImageView =
+                    (ImageView) view.findViewById(viewBinder.privacyInformationIconImageId);
+            return staticNativeViewHolder;
+        } catch (ClassCastException exception) {
+            MoPubLog.w("Could not cast from id in ViewBinder to expected View type", exception);
+            return EMPTY_VIEW_HOLDER;
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/VideoNativeAd.java b/mopub-sdk/src/main/java/com/mopub/nativeads/VideoNativeAd.java
new file mode 100644
index 00000000..71f3fa9a
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/VideoNativeAd.java
@@ -0,0 +1,162 @@
+package com.mopub.nativeads;
+
+import android.annotation.TargetApi;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.View;
+
+import com.mopub.common.Preconditions;
+
+import java.util.HashMap;
+import java.util.Map;
+
+@TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+public abstract class VideoNativeAd extends BaseNativeAd implements NativeVideoController.Listener {
+
+    // Basic fields
+    @Nullable private String mMainImageUrl;
+    @Nullable private String mIconImageUrl;
+    @Nullable private String mClickDestinationUrl;
+    @Nullable private String mCallToAction;
+    @Nullable private String mTitle;
+    @Nullable private String mText;
+    @Nullable private String mPrivacyInformationIconClickThroughUrl;
+    @Nullable private String mPrivacyInformationIconImageUrl;
+    @Nullable private String mVastVideo;
+
+    // Extras
+    @NonNull
+    private final Map<String, Object> mExtras;
+
+    public VideoNativeAd() {
+        mExtras = new HashMap<String, Object>();
+    }
+
+    // Getters
+    @Nullable
+    public String getTitle() {
+        return mTitle;
+    }
+
+    @Nullable
+    public String getText() {
+        return mText;
+    }
+
+    @Nullable
+    public String getMainImageUrl() {
+        return mMainImageUrl;
+    }
+
+    @Nullable
+    public String getIconImageUrl() {
+        return mIconImageUrl;
+    }
+
+    @Nullable
+    public String getClickDestinationUrl() {
+        return mClickDestinationUrl;
+    }
+
+    @Nullable
+    public String getVastVideo() {
+        return mVastVideo;
+    }
+
+    @Nullable
+    public String getCallToAction() {
+        return mCallToAction;
+    }
+
+    @Nullable
+    public String getPrivacyInformationIconClickThroughUrl() {
+        return mPrivacyInformationIconClickThroughUrl;
+    }
+
+    /**
+     * Returns the Privacy Information image url.
+     *
+     * @return String representing the Privacy Information Icon image url, or {@code null} if not
+     * set.
+     */
+    @Nullable
+    public String getPrivacyInformationIconImageUrl() {
+        return mPrivacyInformationIconImageUrl;
+    }
+
+    /**
+     * Given a particular String key, return the associated Object value from the ad's extras
+     * map. See {@link VideoNativeAd#getExtras()} for more information.
+     */
+    @Nullable
+    final public Object getExtra(@NonNull final String key) {
+        if (!Preconditions.NoThrow.checkNotNull(key, "getExtra key is not allowed to be null")) {
+            return null;
+        }
+        return mExtras.get(key);
+    }
+
+    final public Map<String, Object> getExtras() {
+        return mExtras;
+    }
+
+    // Setters
+    public void setTitle(@Nullable String title) {
+        mTitle = title;
+    }
+
+    public void setText(@Nullable String text) {
+        mText = text;
+    }
+
+    public void setMainImageUrl(@Nullable String mainImageUrl) {
+        mMainImageUrl = mainImageUrl;
+    }
+
+    public void setIconImageUrl(@Nullable String iconImageUrl) {
+        mIconImageUrl = iconImageUrl;
+    }
+
+    public void setClickDestinationUrl(@Nullable String clickDestinationUrl) {
+        mClickDestinationUrl = clickDestinationUrl;
+    }
+
+    public void setVastVideo(String vastVideo) {
+        mVastVideo = vastVideo;
+    }
+
+    public void setCallToAction(@Nullable String callToAction) {
+        mCallToAction = callToAction;
+    }
+
+    public void setPrivacyInformationIconClickThroughUrl(
+            @Nullable String privacyInformationIconClickThroughUrl) {
+        mPrivacyInformationIconClickThroughUrl = privacyInformationIconClickThroughUrl;
+    }
+
+    public void setPrivacyInformationIconImageUrl(
+            @Nullable String privacyInformationIconImageUrl) {
+        mPrivacyInformationIconImageUrl = privacyInformationIconImageUrl;
+    }
+
+    final public void addExtra(@NonNull final String key, @Nullable final Object value) {
+        if (!Preconditions.NoThrow.checkNotNull(key, "addExtra key is not allowed to be null")) {
+            return;
+        }
+        mExtras.put(key, value);
+    }
+
+    // Lifecycle Handlers
+    @Override
+    public void prepare(@NonNull final View view) { }
+
+    @Override
+    public void clear(@NonNull final View view) { }
+
+    @Override
+    public void destroy() { }
+
+    // Render
+    public void render(@NonNull MediaLayout mediaLayout) { }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ViewBinder.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ViewBinder.java
index 0fe30f84..9350f0e7 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ViewBinder.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ViewBinder.java
@@ -14,6 +14,7 @@
         private int callToActionId;
         private int mainImageId;
         private int iconImageId;
+        private int privacyInformationIconImageId;
         @NonNull private Map<String, Integer> extras = Collections.emptyMap();
 
         public Builder(final int layoutId) {
@@ -40,8 +41,8 @@ public final Builder callToActionId(final int callToActionId) {
         }
 
         @NonNull
-        public final Builder mainImageId(final int mainImageId) {
-            this.mainImageId = mainImageId;
+        public final Builder mainImageId(final int mediaLayoutId) {
+            this.mainImageId = mediaLayoutId;
             return this;
         }
 
@@ -51,6 +52,12 @@ public final Builder iconImageId(final int iconImageId) {
             return this;
         }
 
+        @NonNull
+        public final Builder privacyInformationIconImageId(final int privacyInformationIconImageId) {
+            this.privacyInformationIconImageId = privacyInformationIconImageId;
+            return this;
+        }
+
         @NonNull
         public final Builder addExtras(final Map<String, Integer> resourceIds) {
             this.extras = new HashMap<String, Integer>(resourceIds);
@@ -75,6 +82,7 @@ public final ViewBinder build() {
     final int callToActionId;
     final int mainImageId;
     final int iconImageId;
+    final int privacyInformationIconImageId;
     @NonNull final Map<String, Integer> extras;
 
     private ViewBinder(@NonNull final Builder builder) {
@@ -84,6 +92,7 @@ private ViewBinder(@NonNull final Builder builder) {
         this.callToActionId = builder.callToActionId;
         this.mainImageId = builder.mainImageId;
         this.iconImageId = builder.iconImageId;
+        this.privacyInformationIconImageId = builder.privacyInformationIconImageId;
         this.extras = builder.extras;
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/VisibilityTracker.java b/mopub-sdk/src/main/java/com/mopub/nativeads/VisibilityTracker.java
index b98a4481..7732643d 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/VisibilityTracker.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/VisibilityTracker.java
@@ -1,7 +1,6 @@
 package com.mopub.nativeads;
 
 import android.app.Activity;
-import android.content.Context;
 import android.graphics.Rect;
 import android.os.Handler;
 import android.os.SystemClock;
@@ -41,7 +40,7 @@
     private long mAccessCounter = 0;
 
     // Listener that passes all visible and invisible views when a visibility check occurs
-    static interface VisibilityTrackerListener {
+    interface VisibilityTrackerListener {
         void onVisibilityChanged(List<View> visibleViews, List<View> invisibleViews);
     }
 
@@ -50,7 +49,10 @@
 
     static class TrackingInfo {
         int mMinViewablePercent;
+        // Must be less than mMinVisiblePercent
+        int mMaxInvisiblePercent;
         long mAccessOrder;
+        View mRootView;
     }
 
     // Views that are being tracked, mapped to the min viewable percentage
@@ -71,15 +73,15 @@
     // Whether the visibility runnable is scheduled
     private boolean mIsVisibilityScheduled;
 
-    public VisibilityTracker(@NonNull final Context context) {
-        this(context,
+    public VisibilityTracker(@NonNull final Activity activity) {
+        this(activity,
                 new WeakHashMap<View, TrackingInfo>(10),
                 new VisibilityChecker(),
                 new Handler());
     }
 
     @VisibleForTesting
-    VisibilityTracker(@NonNull final Context context,
+    VisibilityTracker(@NonNull final Activity activity,
             @NonNull final Map<View, TrackingInfo> trackedViews,
             @NonNull final VisibilityChecker visibilityChecker,
             @NonNull final Handler visibilityHandler) {
@@ -89,7 +91,7 @@ public VisibilityTracker(@NonNull final Context context) {
         mVisibilityRunnable = new VisibilityRunnable();
         mTrimmedViews = new ArrayList<View>(NUM_ACCESSES_BEFORE_TRIMMING);
 
-        final View rootView = ((Activity) context).getWindow().getDecorView();
+        final View rootView = activity.getWindow().getDecorView();
         mRootView = new WeakReference<View>(rootView);
         final ViewTreeObserver viewTreeObserver = rootView.getViewTreeObserver();
         if (!viewTreeObserver.isAlive()) {
@@ -116,6 +118,14 @@ void setVisibilityTrackerListener(
      * Tracks the given view for visibility.
      */
     void addView(@NonNull final View view, final int minPercentageViewed) {
+        addView(view, view, minPercentageViewed);
+    }
+
+    void addView(@NonNull View rootView, @NonNull final View view, final int minPercentageViewed) {
+      addView(rootView, view, minPercentageViewed, minPercentageViewed);
+    }
+
+    void addView(@NonNull View rootView, @NonNull final View view, final int minVisiblePercentageViewed, final int maxInvisiblePercentageViewed) {
         // Find the view if already tracked
         TrackingInfo trackingInfo = mTrackedViews.get(view);
         if (trackingInfo == null) {
@@ -123,7 +133,12 @@ void addView(@NonNull final View view, final int minPercentageViewed) {
             mTrackedViews.put(view, trackingInfo);
             scheduleVisibilityCheck();
         }
-        trackingInfo.mMinViewablePercent = minPercentageViewed;
+
+        int maxInvisiblePercent = Math.min(maxInvisiblePercentageViewed, minVisiblePercentageViewed);
+
+        trackingInfo.mRootView = rootView;
+        trackingInfo.mMinViewablePercent = minVisiblePercentageViewed;
+        trackingInfo.mMaxInvisiblePercent = maxInvisiblePercent;
         trackingInfo.mAccessOrder = mAccessCounter;
 
         // Trim the number of tracked views to a reasonable number
@@ -207,10 +222,12 @@ public void run() {
             for (final Map.Entry<View, TrackingInfo> entry : mTrackedViews.entrySet()) {
                 final View view = entry.getKey();
                 final int minPercentageViewed = entry.getValue().mMinViewablePercent;
+                final int maxInvisiblePercent = entry.getValue().mMaxInvisiblePercent;
+                final View rootView = entry.getValue().mRootView;
 
-                if (mVisibilityChecker.isVisible(view, minPercentageViewed)) {
+                if (mVisibilityChecker.isVisible(rootView, view, minPercentageViewed)) {
                     mVisibleViews.add(view);
-                } else {
+                } else if (!mVisibilityChecker.isVisible(rootView, view, maxInvisiblePercent)){
                     mInvisibleViews.add(view);
                 }
             }
@@ -239,14 +256,14 @@ boolean hasRequiredTimeElapsed(final long startTimeMillis, final int minTimeView
         /**
          * Whether the view is at least certain % visible
          */
-        boolean isVisible(@Nullable final View view, final int minPercentageViewed) {
+        boolean isVisible(@Nullable final View rootView, @Nullable final View view, final int minPercentageViewed) {
             // ListView & GridView both call detachFromParent() for views that can be recycled for
             // new data. This is one of the rare instances where a view will have a null parent for
             // an extended period of time and will not be the main window.
             // view.getGlobalVisibleRect() doesn't check that case, so if the view has visibility
-            // of View.VISIBLE but has no parent it is likely in the recycle bin of a
+            // of View.VISIBLE but it's group has no parent it is likely in the recycle bin of a
             // ListView / GridView and not on screen.
-            if (view == null || view.getVisibility() != View.VISIBLE || view.getParent() == null) {
+            if (view == null || view.getVisibility() != View.VISIBLE || rootView.getParent() == null) {
                 return false;
             }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/network/AdRequest.java b/mopub-sdk/src/main/java/com/mopub/network/AdRequest.java
index 53fdbc30..2118eaa2 100644
--- a/mopub-sdk/src/main/java/com/mopub/network/AdRequest.java
+++ b/mopub-sdk/src/main/java/com/mopub/network/AdRequest.java
@@ -3,6 +3,7 @@
 import android.content.Context;
 import android.location.Location;
 import android.net.Uri;
+import android.os.Build;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
@@ -10,12 +11,14 @@
 import com.mopub.common.AdFormat;
 import com.mopub.common.AdType;
 import com.mopub.common.DataKeys;
+import com.mopub.common.FullAdType;
 import com.mopub.common.LocationService;
 import com.mopub.common.MoPub;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.event.BaseEvent;
 import com.mopub.common.event.Event;
+import com.mopub.common.event.EventDetails;
 import com.mopub.common.event.MoPubEvents;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Json;
@@ -38,6 +41,7 @@
 import static com.mopub.network.HeaderUtils.extractBooleanHeader;
 import static com.mopub.network.HeaderUtils.extractHeader;
 import static com.mopub.network.HeaderUtils.extractIntegerHeader;
+import static com.mopub.network.HeaderUtils.extractPercentHeaderString;
 
 public class AdRequest extends Request<AdResponse> {
 
@@ -47,7 +51,7 @@
     @NonNull private final Context mContext;
 
     public interface Listener extends Response.ErrorListener {
-        public void onSuccess(AdResponse response);
+        void onSuccess(AdResponse response);
     }
 
     public AdRequest(@NonNull final String url,
@@ -123,7 +127,8 @@ public Listener getListener() {
 
         // In the case of a CLEAR response, the REFRESH_TIME header must still be respected. Ensure
         // that it is parsed and passed along to the MoPubNetworkError.
-        final Integer refreshTimeSeconds = extractIntegerHeader(headers, ResponseHeader.REFRESH_TIME);
+        final Integer refreshTimeSeconds = extractIntegerHeader(headers,
+                ResponseHeader.REFRESH_TIME);
         final Integer refreshTimeMilliseconds = refreshTimeSeconds == null
                 ? null
                 : refreshTimeSeconds * 1000;
@@ -141,11 +146,17 @@ public Listener getListener() {
             );
         }
 
-        builder.setNetworkType(extractHeader(headers, ResponseHeader.NETWORK_TYPE));
+        String dspCreativeId = extractHeader(headers, ResponseHeader.DSP_CREATIVE_ID);
+        builder.setDspCreativeId(dspCreativeId);
+
+        String networkType = extractHeader(headers, ResponseHeader.NETWORK_TYPE);
+        builder.setNetworkType(networkType);
 
         String redirectUrl = extractHeader(headers, ResponseHeader.REDIRECT_URL);
         builder.setRedirectUrl(redirectUrl);
 
+        // X-Clickthrough is parsed into the AdResponse as the click tracker
+        // Used by AdViewController, Rewarded Video, Native Adapter, MoPubNative
         String clickTrackingUrl = extractHeader(headers, ResponseHeader.CLICK_TRACKING_URL);
         builder.setClickTrackingUrl(clickTrackingUrl);
 
@@ -160,8 +171,9 @@ public Listener getListener() {
         boolean isScrollable = extractBooleanHeader(headers, ResponseHeader.SCROLLABLE, false);
         builder.setScrollable(isScrollable);
 
-        builder.setDimensions(extractIntegerHeader(headers, ResponseHeader.WIDTH),
-                extractIntegerHeader(headers, ResponseHeader.HEIGHT));
+        Integer width = extractIntegerHeader(headers, ResponseHeader.WIDTH);
+        Integer height = extractIntegerHeader(headers, ResponseHeader.HEIGHT);
+        builder.setDimensions(width, height);
 
         Integer adTimeoutDelaySeconds = extractIntegerHeader(headers, ResponseHeader.AD_TIMEOUT);
         builder.setAdTimeoutDelayMilliseconds(
@@ -172,7 +184,7 @@ public Listener getListener() {
         // Response Body encoding / decoding
         String responseBody = parseStringBody(networkResponse);
         builder.setResponseBody(responseBody);
-        if (AdType.NATIVE.equals(adTypeString)) {
+        if (AdType.STATIC_NATIVE.equals(adTypeString) || AdType.VIDEO_NATIVE.equals(adTypeString)) {
             try {
                 builder.setJsonBody(new JSONObject(responseBody));
             } catch (JSONException e) {
@@ -194,27 +206,78 @@ public Listener getListener() {
         if (TextUtils.isEmpty(customEventData)) {
             customEventData = extractHeader(headers, ResponseHeader.NATIVE_PARAMS);
         }
+
+        final Map<String, String> serverExtras;
         try {
-            builder.setServerExtras(Json.jsonStringToMap(customEventData));
+            serverExtras = Json.jsonStringToMap(customEventData);
         } catch (JSONException e) {
             return Response.error(
                     new MoPubNetworkError("Failed to decode server extras for custom event data.",
                             e, MoPubNetworkError.Reason.BAD_HEADER_DATA));
         }
 
-        // Some MoPub-specific custom events get their serverExtras from the response itself:
+        if (redirectUrl != null) {
+            serverExtras.put(DataKeys.REDIRECT_URL_KEY, redirectUrl);
+        }
+        if (clickTrackingUrl != null) {
+            // X-Clickthrough parsed into serverExtras
+            // Used by Banner, Interstitial
+            serverExtras.put(DataKeys.CLICKTHROUGH_URL_KEY, clickTrackingUrl);
+        }
         if (eventDataIsInResponseBody(adTypeString, fullAdTypeString)) {
-            Map<String, String> eventDataMap = new TreeMap<String, String>();
-            eventDataMap.put(DataKeys.HTML_RESPONSE_BODY_KEY, responseBody);
-            eventDataMap.put(DataKeys.SCROLLABLE_KEY, Boolean.toString(isScrollable));
-            eventDataMap.put(DataKeys.CREATIVE_ORIENTATION_KEY, extractHeader(headers, ResponseHeader.ORIENTATION));
-            if (redirectUrl != null) {
-                eventDataMap.put(DataKeys.REDIRECT_URL_KEY, redirectUrl);
-            }
-            if (clickTrackingUrl != null) {
-                eventDataMap.put(DataKeys.CLICKTHROUGH_URL_KEY, clickTrackingUrl);
+            // Some MoPub-specific custom events get their serverExtras from the response itself:
+            serverExtras.put(DataKeys.HTML_RESPONSE_BODY_KEY, responseBody);
+            serverExtras.put(DataKeys.SCROLLABLE_KEY, Boolean.toString(isScrollable));
+            serverExtras.put(DataKeys.CREATIVE_ORIENTATION_KEY, extractHeader(headers, ResponseHeader.ORIENTATION));
+        }
+        if (AdType.VIDEO_NATIVE.equals(adTypeString)) {
+            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
+                return Response.error(new MoPubNetworkError("Native Video ads are only supported" +
+                        " for Android API Level 16 (JellyBean) and above.",
+                        MoPubNetworkError.Reason.UNSPECIFIED));
+
             }
-            builder.setServerExtras(eventDataMap);
+            serverExtras.put(DataKeys.PLAY_VISIBLE_PERCENT,
+                    extractPercentHeaderString(headers, ResponseHeader.PLAY_VISIBLE_PERCENT));
+            serverExtras.put(DataKeys.PAUSE_VISIBLE_PERCENT,
+                    extractPercentHeaderString(headers, ResponseHeader.PAUSE_VISIBLE_PERCENT));
+            serverExtras.put(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT,
+                    extractPercentHeaderString(headers,
+                            ResponseHeader.IMPRESSION_MIN_VISIBLE_PERCENT));
+            serverExtras.put(DataKeys.IMPRESSION_VISIBLE_MS, extractHeader(headers,
+                    ResponseHeader.IMPRESSION_VISIBLE_MS));
+            serverExtras.put(DataKeys.MAX_BUFFER_MS, extractHeader(headers,
+                    ResponseHeader.MAX_BUFFER_MS));
+
+            builder.setEventDetails(new EventDetails.Builder()
+                            .adUnitId(mAdUnitId)
+                            .adType(adTypeString)
+                            .adNetworkType(networkType)
+                            .adWidthPx(width)
+                            .adHeightPx(height)
+                            .dspCreativeId(dspCreativeId)
+                            .geoLatitude(location == null ? null : location.getLatitude())
+                            .geoLongitude(location == null ? null : location.getLongitude())
+                            .geoAccuracy(location == null ? null : location.getAccuracy())
+                            .performanceDurationMs(networkResponse.networkTimeMs)
+                            .requestId(requestId)
+                            .requestStatusCode(networkResponse.statusCode)
+                            .requestUri(getUrl())
+                            .build()
+            );
+        }
+        builder.setServerExtras(serverExtras);
+
+        if (AdType.REWARDED_VIDEO.equals(adTypeString) || AdType.CUSTOM.equals(adTypeString)) {
+            final String rewardedVideoCurrencyName = extractHeader(headers,
+                    ResponseHeader.REWARDED_VIDEO_CURRENCY_NAME);
+            final String rewardedVideoCurrencyAmount = extractHeader(headers,
+                    ResponseHeader.REWARDED_VIDEO_CURRENCY_AMOUNT);
+            final String rewardedVideoCompletionUrl = extractHeader(headers,
+                    ResponseHeader.REWARDED_VIDEO_COMPLETION_URL);
+            builder.setRewardedVideoCurrencyName(rewardedVideoCurrencyName);
+            builder.setRewardedVideoCurrencyAmount(rewardedVideoCurrencyAmount);
+            builder.setRewardedVideoCompletionUrl(rewardedVideoCompletionUrl);
         }
 
         AdResponse adResponse = builder.build();
@@ -226,8 +289,9 @@ public Listener getListener() {
 
     private boolean eventDataIsInResponseBody(@Nullable String adType,
             @Nullable String fullAdType) {
-        return "mraid".equals(adType) || "html".equals(adType) ||
-                ("interstitial".equals(adType) && "vast".equals(fullAdType));
+        return AdType.MRAID.equals(adType) || AdType.HTML.equals(adType) ||
+                (AdType.INTERSTITIAL.equals(adType) && FullAdType.VAST.equals(fullAdType)) ||
+                (AdType.REWARDED_VIDEO.equals(adType) && FullAdType.VAST.equals(fullAdType));
     }
 
     // Based on Volley's StringResponse class.
@@ -274,7 +338,7 @@ void logScribeEvent(@NonNull AdResponse adResponse, @NonNull NetworkResponse net
                 new Event.Builder(BaseEvent.Name.AD_REQUEST, BaseEvent.Category.REQUESTS,
                         BaseEvent.SamplingRate.AD_REQUEST.getSamplingRate())
                         .withAdUnitId(mAdUnitId)
-                        .withAdCreativeId(adResponse.getDspCreativeId())
+                        .withDspCreativeId(adResponse.getDspCreativeId())
                         .withAdType(adResponse.getAdType())
                         .withAdNetworkType(adResponse.getNetworkType())
                         .withAdWidthPx(adResponse.getWidth() != null
diff --git a/mopub-sdk/src/main/java/com/mopub/network/AdResponse.java b/mopub-sdk/src/main/java/com/mopub/network/AdResponse.java
index 8c7bc330..29b29c71 100644
--- a/mopub-sdk/src/main/java/com/mopub/network/AdResponse.java
+++ b/mopub-sdk/src/main/java/com/mopub/network/AdResponse.java
@@ -3,6 +3,7 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
+import com.mopub.common.event.EventDetails;
 import com.mopub.common.util.DateAndTime;
 
 import org.json.JSONObject;
@@ -25,6 +26,13 @@
     @Nullable
     private final String mNetworkType;
 
+    @Nullable
+    private final String mRewardedVideoCurrencyName;
+    @Nullable
+    private final String mRewardedVideoCurrencyAmount;
+    @Nullable
+    private final String mRewardedVideoCompletionUrl;
+
     @Nullable
     private final String mRedirectUrl;
     @Nullable
@@ -54,6 +62,9 @@
     @Nullable
     private final JSONObject mJsonBody;
 
+    @Nullable
+    private final EventDetails mEventDetails;
+
     @Nullable
     private final String mCustomEventClassName;
     @NonNull
@@ -67,6 +78,11 @@ private AdResponse(@NonNull Builder builder) {
         mAdUnitId = builder.adUnitId;
         mFullAdType = builder.fullAdType;
         mNetworkType = builder.networkType;
+
+        mRewardedVideoCurrencyName = builder.rewardedVideoCurrencyName;
+        mRewardedVideoCurrencyAmount = builder.rewardedVideoCurrencyAmount;
+        mRewardedVideoCompletionUrl = builder.rewardedVideoCompletionUrl;
+
         mRedirectUrl = builder.redirectUrl;
         mClickTrackingUrl = builder.clickTrackingUrl;
         mImpressionTrackingUrl = builder.impressionTrackingUrl;
@@ -80,6 +96,7 @@ private AdResponse(@NonNull Builder builder) {
         mScrollable = builder.scrollable;
         mResponseBody = builder.responseBody;
         mJsonBody = builder.jsonBody;
+        mEventDetails = builder.eventDetails;
         mCustomEventClassName = builder.customEventClassName;
         mServerExtras = builder.serverExtras;
         mTimestamp = DateAndTime.now().getTime();
@@ -94,6 +111,11 @@ public JSONObject getJsonBody() {
         return mJsonBody;
     }
 
+    @Nullable
+    public EventDetails getEventDetails() {
+        return mEventDetails;
+    }
+
     @Nullable
     public String getStringBody() {
         return mResponseBody;
@@ -119,6 +141,21 @@ public String getNetworkType() {
         return mNetworkType;
     }
 
+    @Nullable
+    public String getRewardedVideoCurrencyName() {
+        return mRewardedVideoCurrencyName;
+    }
+
+    @Nullable
+    public String getRewardedVideoCurrencyAmount() {
+        return mRewardedVideoCurrencyAmount;
+    }
+
+    @Nullable
+    public String getRewardedVideoCompletionUrl() {
+        return mRewardedVideoCompletionUrl;
+    }
+
     @Nullable
     public String getRedirectUrl() {
         return mRedirectUrl;
@@ -203,6 +240,7 @@ public Builder toBuilder() {
                 .setScrollable(mScrollable)
                 .setResponseBody(mResponseBody)
                 .setJsonBody(mJsonBody)
+                .setEventDetails(mEventDetails)
                 .setCustomEventClassName(mCustomEventClassName)
                 .setServerExtras(mServerExtras);
     }
@@ -213,6 +251,10 @@ public Builder toBuilder() {
         private String fullAdType;
         private String networkType;
 
+        private String rewardedVideoCurrencyName;
+        private String rewardedVideoCurrencyAmount;
+        private String rewardedVideoCompletionUrl;
+
         private String redirectUrl;
         private String clickTrackingUrl;
         private String impressionTrackingUrl;
@@ -230,6 +272,8 @@ public Builder toBuilder() {
         private String responseBody;
         private JSONObject jsonBody;
 
+        private EventDetails eventDetails;
+
         private String customEventClassName;
         private Map<String, String> serverExtras = new TreeMap<String, String>();
 
@@ -253,6 +297,24 @@ public Builder setNetworkType(@Nullable final String networkType) {
             return this;
         }
 
+        public Builder setRewardedVideoCurrencyName(
+                @Nullable final String rewardedVideoCurrencyName) {
+            this.rewardedVideoCurrencyName = rewardedVideoCurrencyName;
+            return this;
+        }
+
+        public Builder setRewardedVideoCurrencyAmount(
+                @Nullable final String rewardedVideoCurrencyAmount) {
+            this.rewardedVideoCurrencyAmount = rewardedVideoCurrencyAmount;
+            return this;
+        }
+
+        public Builder setRewardedVideoCompletionUrl(
+                @Nullable final String rewardedVideoCompletionUrl) {
+            this.rewardedVideoCompletionUrl = rewardedVideoCompletionUrl;
+            return this;
+        }
+
         public Builder setRedirectUrl(@Nullable final String redirectUrl) {
             this.redirectUrl = redirectUrl;
             return this;
@@ -315,6 +377,11 @@ public Builder setJsonBody(@Nullable final JSONObject jsonBody) {
             return this;
         }
 
+        public Builder setEventDetails(@Nullable final EventDetails eventDetails) {
+            this.eventDetails = eventDetails;
+            return this;
+        }
+
         public Builder setCustomEventClassName(@Nullable final String customEventClassName) {
             this.customEventClassName = customEventClassName;
             return this;
diff --git a/mopub-sdk/src/main/java/com/mopub/network/HeaderUtils.java b/mopub-sdk/src/main/java/com/mopub/network/HeaderUtils.java
index 27eb863f..3010a77e 100644
--- a/mopub-sdk/src/main/java/com/mopub/network/HeaderUtils.java
+++ b/mopub-sdk/src/main/java/com/mopub/network/HeaderUtils.java
@@ -25,6 +25,18 @@ public static boolean extractBooleanHeader(Map<String, String> headers, Response
         return formatBooleanHeader(extractHeader(headers, responseHeader), defaultValue);
     }
 
+    public static Integer extractPercentHeader(Map<String, String> headers, ResponseHeader responseHeader) {
+        return formatPercentHeader(extractHeader(headers, responseHeader));
+    }
+
+    @Nullable
+    public static String extractPercentHeaderString(Map<String, String> headers,
+            ResponseHeader responseHeader) {
+        Integer percentHeaderValue = extractPercentHeader(headers, responseHeader);
+        return percentHeaderValue != null ? percentHeaderValue.toString() : null;
+    }
+
+
     public static String extractHeader(HttpResponse response, ResponseHeader responseHeader) {
         Header header = response.getFirstHeader(responseHeader.getKey());
         return header != null ? header.getValue() : null;
@@ -66,4 +78,19 @@ private static Integer formatIntHeader(String headerValue) {
             return null;
         }
     }
+
+    @Nullable
+    private static Integer formatPercentHeader(@Nullable String headerValue) {
+        if (headerValue == null) {
+            return null;
+        }
+
+        final Integer percentValue = formatIntHeader(headerValue.replace("%", ""));
+
+        if (percentValue == null || percentValue < 0 || percentValue > 100) {
+            return null;
+        }
+
+        return percentValue;
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/network/Networking.java b/mopub-sdk/src/main/java/com/mopub/network/Networking.java
index e820a0a5..e55db850 100644
--- a/mopub-sdk/src/main/java/com/mopub/network/Networking.java
+++ b/mopub-sdk/src/main/java/com/mopub/network/Networking.java
@@ -32,12 +32,12 @@
     private static final String DEFAULT_USER_AGENT = System.getProperty("http.agent");
 
     // These are volatile so that double-checked locking works.
-    // See http://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Java
+    // See https://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Java
     // for more information.
     private volatile static MoPubRequestQueue sRequestQueue;
     private volatile static String sUserAgent;
     private volatile static MaxWidthImageLoader sMaxWidthImageLoader;
-    public static boolean sUseHttps = false;
+    private static boolean sUseHttps = false;
 
     @Nullable
     public static MoPubRequestQueue getRequestQueue() {
@@ -129,7 +129,11 @@ public static String getUserAgent(@NonNull Context context) {
                 if (userAgent == null) {
                     // As of Android 4.4, WebViews may only be instantiated on the UI thread
                     if (Looper.myLooper() == Looper.getMainLooper()) {
-                        userAgent = new WebView(context).getSettings().getUserAgentString();
+                        try {
+                            userAgent = new WebView(context).getSettings().getUserAgentString();
+                        } catch (Exception e) {
+                            userAgent = DEFAULT_USER_AGENT;
+                        }
                     } else {
                         // In the exceptional case where we can't access the WebView user agent,
                         // fall back to the System-specific user agent.
@@ -190,4 +194,23 @@ public static void useHttps(boolean useHttps) {
     public static boolean useHttps() {
         return sUseHttps;
     }
+
+    /**
+     * Retrieve the scheme that should be used based on {@link #useHttps()}.
+     *
+     * @return "https" if {@link #useHttps()} is true; "http" otherwise.
+     */
+    public static String getScheme() {
+        return useHttps() ? Constants.HTTPS : Constants.HTTP;
+    }
+
+    /**
+     * DSPs are currently not ready for full https creatives. When we flip the switch to go full
+     * https, this should just return {@link #getScheme()}.
+     *
+     * @return "http"
+     */
+    public static String getBaseUrlScheme() {
+        return Constants.HTTP;
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/network/ScribeRequest.java b/mopub-sdk/src/main/java/com/mopub/network/ScribeRequest.java
index f04bcdf0..50cfc29a 100644
--- a/mopub-sdk/src/main/java/com/mopub/network/ScribeRequest.java
+++ b/mopub-sdk/src/main/java/com/mopub/network/ScribeRequest.java
@@ -23,11 +23,11 @@
 public class ScribeRequest extends Request<Void> {
 
     public interface Listener extends Response.ErrorListener {
-        public void onResponse();
+        void onResponse();
     }
 
     public interface ScribeRequestFactory extends RequestManager.RequestFactory {
-        public ScribeRequest createRequest(ScribeRequest.Listener listener);
+        ScribeRequest createRequest(ScribeRequest.Listener listener);
     }
 
     @NonNull private final List<BaseEvent> mEvents;
diff --git a/mopub-sdk/src/main/java/com/mopub/network/TrackingRequest.java b/mopub-sdk/src/main/java/com/mopub/network/TrackingRequest.java
index e2e93b04..f806a0a9 100644
--- a/mopub-sdk/src/main/java/com/mopub/network/TrackingRequest.java
+++ b/mopub-sdk/src/main/java/com/mopub/network/TrackingRequest.java
@@ -26,7 +26,7 @@
 public class TrackingRequest extends Request<Void> {
 
     public interface Listener extends Response.ErrorListener {
-        public void onResponse(@NonNull String url);
+        void onResponse(@NonNull String url);
     }
 
     @Nullable private final TrackingRequest.Listener mListener;
@@ -93,17 +93,6 @@ public static void makeVastTrackingHttpRequest(
         );
     }
 
-    public static void makeTrackingHttpRequest(@Nullable final Iterable<String> urls,
-            @Nullable final Context context) {
-        makeTrackingHttpRequest(urls, context, null, null);
-    }
-
-    public static void makeTrackingHttpRequest(@Nullable final Iterable<String> urls,
-            @Nullable final Context context,
-            final BaseEvent.Name name) {
-        makeTrackingHttpRequest(urls, context, null, name);
-    }
-
     public static void makeTrackingHttpRequest(@Nullable final Iterable<String> urls,
             @Nullable final Context context,
             @Nullable final Listener listener,
@@ -163,4 +152,15 @@ public static void makeTrackingHttpRequest(@Nullable final String url,
             makeTrackingHttpRequest(Arrays.asList(url), context, listener, name);
         }
     }
+
+    public static void makeTrackingHttpRequest(@Nullable final Iterable<String> urls,
+            @Nullable final Context context) {
+        makeTrackingHttpRequest(urls, context, null, null);
+    }
+
+    public static void makeTrackingHttpRequest(@Nullable final Iterable<String> urls,
+            @Nullable final Context context,
+            final BaseEvent.Name name) {
+        makeTrackingHttpRequest(urls, context, null, name);
+    }
 }
diff --git a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
new file mode 100644
index 00000000..d946d6cb
--- /dev/null
+++ b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
@@ -0,0 +1,3 @@
+fabric-identifier=com.mopub.sdk.android:mopub
+fabric-version=4.7.1+kit
+fabric-build-type=source
diff --git a/mopub-sdk/src/test/java/com/mopub/TestSdkHelper.java b/mopub-sdk/src/test/java/com/mopub/TestSdkHelper.java
new file mode 100644
index 00000000..0f91d2e6
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/TestSdkHelper.java
@@ -0,0 +1,23 @@
+package com.mopub;
+
+import android.os.Build;
+
+import org.robolectric.util.ReflectionHelpers;
+
+public class TestSdkHelper {
+
+    /**
+     * Sets the SDK level using reflection. Must only be used in tests, in situations where
+     * Robolectric does not support a given level. Only sets SDK level for one test.
+     * If you need this value to apply to the whole class, take care to set this in {@code #setUp}.
+     *
+     * Be careful when setting this value before calling Robolectric code, as it can interfere with
+     * some Robolectric behaviors (like attempting to call older API methods that do not
+     * exist in the android.jar you are executing against.)
+     *
+     */
+    public static void setReportedSdkLevel(final int sdkLevel) {
+        ReflectionHelpers.setStaticField(Build.VERSION.class, "SDK_INT", sdkLevel);
+    }
+
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/AdReportTest.java b/mopub-sdk/src/test/java/com/mopub/common/AdReportTest.java
index 6bdefe59..75d415c2 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/AdReportTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/AdReportTest.java
@@ -4,12 +4,14 @@
 
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.test.support.TestDateAndTime;
+import com.mopub.mobileads.BuildConfig;
 import com.mopub.network.AdResponse;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
+import org.robolectric.annotation.Config;
 
 import java.text.SimpleDateFormat;
 import java.util.Date;
@@ -19,6 +21,7 @@
 import static org.mockito.Mockito.stub;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class AdReportTest {
 
     public AdReport subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java b/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java
index 08917adb..46823d17 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java
@@ -8,11 +8,14 @@
 import android.webkit.WebView;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
+import org.robolectric.RuntimeEnvironment;
+import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.anyString;
@@ -24,6 +27,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class BrowserWebViewClientTest {
 
     private final WebView MOOT_WEB_VIEW = null;
@@ -49,7 +53,7 @@ public void setUp() {
 
     @Test
     public void shouldOverrideUrlLoading_withHTTPUrl_shouldReturnTrue_shouldLoadUrl() {
-        final String url = "http://twitter.com";
+        final String url = "https://twitter.com";
 
         assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, url)).isTrue();
         verify(mockWebView).loadUrl(url);
@@ -128,8 +132,8 @@ public void shouldOverrideUrlLoading_withDeeplinkPlusUrl_withFailedPrimaryUrl_wi
 
     @Test
     public void shouldOverrideUrlLoading_withDeeplinkPlusUrl_withEncodedQueryString_shouldReturnTrue_shouldFinish() {
-        final String primaryUrl = "ebay://launch?nav=home&referrer=http%3A%2F%2Frover.ebay.com%2Frover%2F1%2F711-212056-53654-1%2F4%3Fmpt%3Dcache_buster%26ff6%3Dclick_id%26ff7%3Difa%26ff9%3Dsegment_name%26ff18%3Dcreative_name%26siteid%3D0%26ipn%3Dadmain2%26placement%3D418737%26ck%3D23932_main%26mpvc%3D";
-        final String fallbackUrl = "http://ebay.com";
+        final String primaryUrl = "ebay://launch?nav=home&referrer=https%3A%2F%2Frover.ebay.com%2Frover%2F1%2F711-212056-53654-1%2F4%3Fmpt%3Dcache_buster%26ff6%3Dclick_id%26ff7%3Difa%26ff9%3Dsegment_name%26ff18%3Dcreative_name%26siteid%3D0%26ipn%3Dadmain2%26placement%3D418737%26ck%3D23932_main%26mpvc%3D";
+        final String fallbackUrl = "https://ebay.com";
         final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
                 + "&fallbackUrl=" + Uri.encode(fallbackUrl);
 
@@ -165,7 +169,7 @@ public void shouldOverrideUrlLoading_withoutMatchingSupporedUrl_shouldReturnFals
     }
 
     private void makeDeeplinkResolvable(String deeplink) {
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW,
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW,
                 Uri.parse(deeplink)), new ResolveInfo());
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java b/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java
index ce7282a3..28019855 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java
@@ -3,6 +3,7 @@
 import android.app.Activity;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -10,6 +11,7 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 
 import java.io.ByteArrayInputStream;
 import java.io.File;
@@ -26,6 +28,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class CacheServiceTest {
 
     private Activity context;
@@ -39,7 +42,7 @@
     @Before
     public void setUp() throws Exception {
         context = Robolectric.buildActivity(Activity.class).create().get();
-        key1 = "http://www.mopub.com/";
+        key1 = "https://www.mopub.com/";
         data1 = "image_data_1";
 
         semaphore = new Semaphore(0);
diff --git a/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java b/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java
index ba6fcd75..31f38117 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java
@@ -5,20 +5,22 @@
 import android.telephony.TelephonyManager;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
+import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
 
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
 import static org.fest.assertions.api.Assertions.assertThat;
-import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
-@Config(shadows = {MoPubShadowTelephonyManager.class})
+@Config(constants = BuildConfig.class,
+        shadows = {MoPubShadowTelephonyManager.class})
 public class ClientMetadataTest {
 
     public Activity activityContext;
@@ -27,9 +29,9 @@
     @Before
     public void setUp() throws Exception {
         activityContext = Robolectric.buildActivity(Activity.class).create().get();
-        shadowOf(activityContext).grantPermissions(ACCESS_NETWORK_STATE);
+        Shadows.shadowOf(activityContext).grantPermissions(ACCESS_NETWORK_STATE);
         shadowTelephonyManager = (MoPubShadowTelephonyManager)
-                shadowOf((TelephonyManager) activityContext.getSystemService(Context.TELEPHONY_SERVICE));
+                Shadows.shadowOf((TelephonyManager) activityContext.getSystemService(Context.TELEPHONY_SERVICE));
     }
 
     // This has to be first or the singleton will be initialized by an earlier test. We should
diff --git a/mopub-sdk/src/test/java/com/mopub/common/CloseableLayoutTest.java b/mopub-sdk/src/test/java/com/mopub/common/CloseableLayoutTest.java
index 5c5f35e1..5ebd9c47 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/CloseableLayoutTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/CloseableLayoutTest.java
@@ -10,18 +10,21 @@
 import com.mopub.common.CloseableLayout.ClosePosition;
 import com.mopub.common.CloseableLayout.OnCloseListener;
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class CloseableLayoutTest {
     private CloseableLayout subject;
 
@@ -142,7 +145,7 @@ public void onInterceptTouchEvent_closeRegionDown_shouldReturnTrue() {
         subject.onTouchEvent(closeRegionUp);
         assertThat(subject.isClosePressed()).isTrue();
 
-        Robolectric.getUiThreadScheduler().advanceToLastPostedRunnable();
+        Robolectric.getForegroundThreadScheduler().advanceToLastPostedRunnable();
         assertThat(subject.isClosePressed()).isFalse();
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/DoubleTimeTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/common/DoubleTimeTrackerTest.java
new file mode 100644
index 00000000..ac6fcc64
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/DoubleTimeTrackerTest.java
@@ -0,0 +1,68 @@
+package com.mopub.common;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.annotation.Config;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class DoubleTimeTrackerTest {
+
+    @Mock DoubleTimeTracker.Clock mockClock;
+    DoubleTimeTracker subject;
+
+    @Before
+    public void setUp() throws Exception {
+        subject = new DoubleTimeTracker(mockClock);
+
+        when(mockClock.elapsedRealTime()).thenReturn(100L, 200L, 300L, 400L, 500L, 600L);
+    }
+
+    @Test
+    public void whenStartThenGetInterval_shouldReturn100() throws Exception {
+        subject.start();
+        assertThat(subject.getInterval()).isEqualTo(100d);
+    }
+
+    @Test
+    public void whenPauseBeforeStart_shouldReturn0() throws Exception {
+        subject.pause();
+        assertThat(subject.getInterval()).isEqualTo(0d);
+    }
+
+    @Test
+    public void whenStartPauseStart_thenGetInterval_shouldReturn200() throws Exception {
+        subject.start();
+        subject.pause();
+        subject.start();
+
+        assertThat(subject.getInterval()).isEqualTo(200d);
+    }
+
+    @Test
+    public void whenStartPauseStartPause_thenGetInterval_shouldReturn200() throws Exception {
+        subject.start();
+        subject.pause();
+        subject.start();
+        subject.pause();
+
+        assertThat(subject.getInterval()).isEqualTo(200d);
+    }
+
+    @Test
+    public void whenMultipleStart_shouldNotAffectInterval_shouldReturn100() throws Exception {
+        subject.start();
+        subject.start();
+        subject.start();
+
+        assertThat(subject.getInterval()).isEqualTo(100d);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/DownloadResponseTest.java b/mopub-sdk/src/test/java/com/mopub/common/DownloadResponseTest.java
index b0de5153..93256457 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/DownloadResponseTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/DownloadResponseTest.java
@@ -2,12 +2,14 @@
 
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.ResponseHeader;
+import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 
 import org.apache.http.HttpResponse;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
 
 import java.util.Locale;
 
@@ -19,6 +21,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class DownloadResponseTest {
 
     DownloadResponse subject;
@@ -28,8 +31,8 @@
     public void setup() throws Exception {
         testHttpResponse = new TestHttpResponseWithHeaders(200, "abcde".getBytes());
         testHttpResponse.addHeader(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "testCustomEvent");
-        testHttpResponse.addHeader(ResponseHeader.CLICK_TRACKING_URL.getKey().toLowerCase(Locale.US), "http://example.com/");
-        testHttpResponse.addHeader(ResponseHeader.FAIL_URL.getKey().toUpperCase(Locale.US), "http://mopub.com/");
+        testHttpResponse.addHeader(ResponseHeader.CLICK_TRACKING_URL.getKey().toLowerCase(Locale.US), "https://example.com/");
+        testHttpResponse.addHeader(ResponseHeader.FAIL_URL.getKey().toUpperCase(Locale.US), "https://mopub.com/");
         subject = new DownloadResponse(testHttpResponse);
     }
 
@@ -62,8 +65,8 @@ public void testGetContentLength() throws Exception {
     @Test
     public void testGetFirstHeader_caseInsensitive() throws Exception {
         assertEquals("testCustomEvent", subject.getFirstHeader(ResponseHeader.CUSTOM_EVENT_NAME));
-        assertEquals("http://example.com/", subject.getFirstHeader(ResponseHeader.CLICK_TRACKING_URL));
-        assertEquals("http://mopub.com/", subject.getFirstHeader(ResponseHeader.FAIL_URL));
+        assertEquals("https://example.com/", subject.getFirstHeader(ResponseHeader.CLICK_TRACKING_URL));
+        assertEquals("https://mopub.com/", subject.getFirstHeader(ResponseHeader.FAIL_URL));
         assertNull(subject.getFirstHeader(ResponseHeader.CUSTOM_EVENT_DATA));
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/DownloadTaskTest.java b/mopub-sdk/src/test/java/com/mopub/common/DownloadTaskTest.java
deleted file mode 100644
index bbe1b484..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/DownloadTaskTest.java
+++ /dev/null
@@ -1,126 +0,0 @@
-package com.mopub.common;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.ResponseHeader;
-import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
-
-import org.apache.http.client.methods.HttpGet;
-import org.apache.http.client.methods.HttpUriRequest;
-import org.junit.Before;
-import org.junit.Ignore;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Captor;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.tester.org.apache.http.FakeHttpLayer;
-
-import static junit.framework.Assert.fail;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class DownloadTaskTest {
-
-    @Mock private DownloadTask.DownloadTaskListener mockDownloadTaskListener;
-    @Captor private ArgumentCaptor<DownloadResponse> responseCaptor;
-
-    private DownloadTask mDownloadTask;
-    private HttpGet httpGet;
-    private String mTestResponse;
-    private FakeHttpLayer mFakeHttpLayer;
-    private TestHttpResponseWithHeaders mTestHttpResponseWithHeaders;
-
-    @Before
-    public void setUp() {
-        mDownloadTask = new DownloadTask(mockDownloadTaskListener);
-        try {
-            httpGet = new HttpGet("http://www.mopub.com/");
-        } catch (IllegalArgumentException e) {
-            fail("Could not initialize HttpGet in test");
-        }
-
-        mTestResponse = "TEST RESPONSE";
-        mTestHttpResponseWithHeaders = new TestHttpResponseWithHeaders(200, mTestResponse);
-        mTestHttpResponseWithHeaders.addHeader(ResponseHeader.IMPRESSION_URL.getKey(), "moPubImpressionTrackerUrl");
-        mTestHttpResponseWithHeaders.addHeader(ResponseHeader.CLICK_TRACKING_URL.getKey(), "moPubClickTrackerUrl");
-
-        mFakeHttpLayer = Robolectric.getFakeHttpLayer();
-    }
-
-    @Test
-    public void whenDownloadTaskAndHttpClientCompleteSuccessfully_shouldReturn200HttpResponse() {
-        mFakeHttpLayer.addPendingHttpResponse(mTestHttpResponseWithHeaders);
-        mDownloadTask.execute(httpGet);
-
-        verify(mockDownloadTaskListener).onComplete(eq(httpGet.getURI().toString()), responseCaptor.capture());
-        DownloadResponse response = responseCaptor.getValue();
-        assertThat(response.getStatusCode()).isEqualTo(200);
-        assertThat(response.getFirstHeader(ResponseHeader.IMPRESSION_URL)).isEqualTo("moPubImpressionTrackerUrl");
-        assertThat(response.getFirstHeader(ResponseHeader.CLICK_TRACKING_URL)).isEqualTo("moPubClickTrackerUrl");
-        assertThat(HttpResponses.asResponseString(response)).isEqualTo(mTestResponse);
-    }
-
-    @Test
-    public void whenDownloadTaskCompletesSuccessfullyAndHttpClientTimesOut_shouldReturn599HttpResponse() {
-        mFakeHttpLayer.addPendingHttpResponse(599, "");
-        mDownloadTask.execute(httpGet);
-
-        verify(mockDownloadTaskListener).onComplete(eq(httpGet.getURI().toString()),
-                responseCaptor.capture());
-        DownloadResponse response = responseCaptor.getValue();
-        assertThat(response.getStatusCode()).isEqualTo(599);
-        assertThat(HttpResponses.asResponseString(response)).isEqualTo("");
-    }
-
-    @Test
-    public void whenDownloadTaskIsCancelledBeforeExecute_shouldNotCallOnComplete() {
-        mFakeHttpLayer.addPendingHttpResponse(200, mTestResponse);
-        mDownloadTask.cancel(true);
-        mDownloadTask.execute(httpGet);
-
-        verify(mockDownloadTaskListener, never()).onComplete(
-                any(String.class), any(DownloadResponse.class));
-    }
-
-    @Ignore("pending")
-    @Test
-    public void whenHttpUriRequestThrowsIOException_shouldCancelTaskAndReturnNullHttpResponse() {
-        // need a way to force HttpUriRequest to throw on execute
-    }
-
-    @Test
-    public void whenHttpUriRequestIsNull_shouldReturnNullHttpReponseAndNullUrl() {
-        mDownloadTask.execute((HttpUriRequest) null);
-        verify(mockDownloadTaskListener).onComplete(null, null);
-    }
-
-    @Test
-    public void whenHttpUriRequestIsNullArray_shouldReturnNullHttpReponseAndNullUrl() {
-        mDownloadTask.execute((HttpUriRequest[]) null);
-        verify(mockDownloadTaskListener).onComplete(null, null);
-    }
-
-    @Test
-    public void whenHttpUriRequestIsArray_shouldOnlyReturnFirstResponse() {
-        mFakeHttpLayer.addPendingHttpResponse(200, mTestResponse);
-        mFakeHttpLayer.addPendingHttpResponse(500, "");
-        mDownloadTask.execute(httpGet, new HttpGet("http://www.twitter.com/"));
-
-        verify(mockDownloadTaskListener).onComplete(eq(httpGet.getURI().toString()),
-                responseCaptor.capture());
-        DownloadResponse response = responseCaptor.getValue();
-
-        assertThat(response.getStatusCode()).isEqualTo(200);
-        assertThat(HttpResponses.asResponseString(response)).isEqualTo(mTestResponse);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void constructor_withNullListener_shouldThrowIllegalArgumentException() {
-        new DownloadTask(null);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java b/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
index 25ce4ba3..a54830ea 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
@@ -7,12 +7,15 @@
 import com.mopub.common.factories.MethodBuilderFactory;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
+import com.mopub.mobileads.BuildConfig;
 
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowLooper;
 
 import java.util.concurrent.Semaphore;
 
@@ -25,6 +28,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class GpsHelperTest {
     private MethodBuilder methodBuilder;
     private Activity context;
@@ -293,8 +297,8 @@ static public void populateAndVerifyClientMetadata(Context context, TestAdInfo a
     }
 
     private void safeAcquireSemaphore() throws Exception {
-        Robolectric.runBackgroundTasks();
-        Robolectric.runUiThreadTasks();
+        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
+        ShadowLooper.runUiThreadTasks();
         semaphore.acquire();
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/HttpClientTest.java b/mopub-sdk/src/test/java/com/mopub/common/HttpClientTest.java
deleted file mode 100644
index 497bbbbb..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/HttpClientTest.java
+++ /dev/null
@@ -1,145 +0,0 @@
-package com.mopub.common;
-
-import android.app.Activity;
-import android.webkit.WebView;
-
-import com.mopub.common.util.ResponseHeader;
-import com.mopub.network.Networking;
-
-import org.apache.http.HttpRequest;
-import org.apache.http.client.methods.HttpGet;
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.tester.org.apache.http.RequestMatcher;
-import org.robolectric.tester.org.apache.http.TestHttpResponse;
-
-import static com.mopub.common.HttpClient.initializeHttpGet;
-import static com.mopub.common.HttpClient.urlEncode;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(RobolectricTestRunner.class)
-public class HttpClientTest {
-    static final String url = "http://www.mopub.com";
-    private Activity context;
-    private String userAgent;
-
-    @Before
-    public void setup() {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        userAgent = new WebView(context).getSettings().getUserAgentString();
-
-        Robolectric.addHttpResponseRule(new RequestMatcher() {
-            @Override
-            public boolean matches(HttpRequest request) {
-                return true;
-            }
-        }, new TestHttpResponse(200, "body"));
-
-        Robolectric.getBackgroundScheduler().pause();
-        Robolectric.clearPendingHttpResponses();
-    }
-
-    @After
-    public void tearDown() throws Exception {
-        Robolectric.getBackgroundScheduler().reset();
-        Robolectric.clearPendingHttpResponses();
-    }
-
-    @Test
-    public void initializeHttpGet_shouldReturnHttpGetWithWebViewUserAgent() throws Exception {
-        Networking.setUserAgentForTesting(null);
-        HttpGet httpGet = initializeHttpGet(url, context);
-
-        assertThat(httpGet.getURI().toURL().toString()).isEqualTo(url);
-        assertThat(httpGet.getFirstHeader(ResponseHeader.USER_AGENT.getKey()).getValue()).isEqualTo(
-                userAgent);
-    }
-
-    @Test
-    public void initializeHttpGet_withNullContext_shouldUseCachedUserAgent() throws Exception {
-        Networking.setUserAgentForTesting("cached");
-        HttpGet httpGet = initializeHttpGet("http://www.mopub.com/");
-        assertThat(httpGet.getFirstHeader(ResponseHeader.USER_AGENT.getKey()).getValue()).isEqualTo(
-                "cached");
-    }
-
-    @Test
-    public void initializeHttpGet_shouldProperlyEncodeUrl() throws Exception {
-        HttpGet httpGet = initializeHttpGet("http://host:80/doc|search?q=green robots#over 6\"");
-        assertThat(httpGet.getURI().toString())
-                .isEqualTo("http://host:80/doc%7Csearch?q=green%20robots#over%206%22");
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void initializeHttpGet_withImproperlyEncodedUrl_shouldThrowIllegalArgumentException() throws Exception {
-        initializeHttpGet("http://user:passwrd@host:80/doc%7ZZZC");
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void initializeHttpGet_withMalformedUrl_shouldThrowIllegalArgumentException() throws Exception {
-        initializeHttpGet("bad://host:80/doc|search?q=green robots#over 6\"");
-    }
-
-    @Test
-    public void urlEncode_shouldProperlyEncodeUrls() throws Exception {
-        // Example url borrowed from: http://developer.android.com/reference/java/net/URI.html
-        assertThat(urlEncode("http://user:passwrd@host:80/doc|search?q=green robots#over 6\""))
-                .isEqualTo("http://user:passwrd@host:80/doc%7Csearch?q=green%20robots#over%206%22");
-
-        assertThat(urlEncode("http://www.example.com/?key=value\"\"&key2=value2?"))
-                .isEqualTo("http://www.example.com/?key=value%22%22&key2=value2?");
-
-        assertThat(urlEncode("http://user:passwrd@host:80/doc?q=green#robots"))
-                .isEqualTo("http://user:passwrd@host:80/doc?q=green#robots");
-
-        assertThat(urlEncode("http://rtr.innovid.com/r1.5460f51c393410.96367393;cb=[timestamp]"))
-                .isEqualTo("http://rtr.innovid.com/r1.5460f51c393410.96367393;cb=%5Btimestamp%5D");
-    }
-
-    @Test
-    public void urlEncode_withProperlyEncodedUrl_shouldReturnUrlWithSameEncoding() throws Exception {
-        assertThat(urlEncode("http://user:passwrd@host:80/doc%7Csearch?q=green%20robots#over%206%22"))
-                .isEqualTo("http://user:passwrd@host:80/doc%7Csearch?q=green%20robots#over%206%22");
-
-        assertThat(urlEncode("https://www.mywebsite.com%2Fd+ocs%2Fenglish%2Fsite%2Fmybook.do%3Fkey%3Dvalue%3B%23fragment"))
-                .isEqualTo(
-                        "https://www.mywebsite.com%2Fd+ocs%2Fenglish%2Fsite%2Fmybook.do%3Fkey%3Dvalue%3B%23fragment");
-    }
-
-    @Test(expected = Exception.class)
-    public void urlEncode_withImproperlyEncodedUrl_shouldThowException() throws Exception {
-        urlEncode("http://user:passwrd@host:80/doc%7ZZZC");
-    }
-
-
-    @Test(expected = Exception.class)
-    public void urlEncode_withImproperlyEncodedUrlScheme_shouldThowException() throws Exception {
-        // From: http://developer.android.com/reference/java/net/URI.html
-        // A URI's host, port and scheme are not eligible for encoding and must not contain illegal characters.
-        urlEncode("https%3A%2F%2Fwww.mywebsite.com%2Fdocs%2Fenglish%2Fsite%2Fmybook.do%3Fkey%3Dvalue%3B%23fragment");
-    }
-
-    @Test(expected = Exception.class)
-    public void urlEncode_withMalformedUrl_shouldThrowException() throws Exception {
-        urlEncode("derp://www.mopub.com/");
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void initializeHttpGet_withNullUrl_shouldThrowNullPointerException() throws Exception {
-        initializeHttpGet(null, context);
-    }
-
-    @Test
-    public void initializeHttpGet_withNullContext_shouldPopulateUserAgentHeaderWithCachedValue() throws Exception {
-        Networking.setUserAgentForTesting("cached");
-        HttpGet httpGet = initializeHttpGet(url, null);
-
-        assertThat(httpGet.getURI().toURL().toString()).isEqualTo(url);
-        assertThat(httpGet.getFirstHeader(ResponseHeader.USER_AGENT.getKey()).getValue()).isEqualTo(
-                "cached");
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/HttpResponsesTest.java b/mopub-sdk/src/test/java/com/mopub/common/HttpResponsesTest.java
index 814bcf55..0d8ee5d9 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/HttpResponsesTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/HttpResponsesTest.java
@@ -8,11 +8,11 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Shadows;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
-import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(RobolectricTestRunner.class)
 public class HttpResponsesTest {
@@ -33,7 +33,7 @@ public void asBitmap_shouldReturnBitmap() throws Exception {
 
         assertThat(bitmap).isNotNull();
         assertThat(bitmap).isInstanceOf(Bitmap.class);
-        assertThat(shadowOf(bitmap).getCreatedFromBytes()).isEqualTo(imageData.getBytes());
+        assertThat(Shadows.shadowOf(bitmap).getCreatedFromBytes()).isEqualTo(imageData.getBytes());
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/common/LocationServiceTest.java b/mopub-sdk/src/test/java/com/mopub/common/LocationServiceTest.java
new file mode 100644
index 00000000..70c7ec4b
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/LocationServiceTest.java
@@ -0,0 +1,261 @@
+package com.mopub.common;
+
+import android.app.Activity;
+import android.content.Context;
+import android.location.Location;
+import android.location.LocationManager;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+import org.robolectric.RuntimeEnvironment;
+import org.robolectric.Shadows;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowLocationManager;
+
+import static android.Manifest.permission.ACCESS_COARSE_LOCATION;
+import static android.Manifest.permission.ACCESS_FINE_LOCATION;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.robolectric.Shadows.shadowOf;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class LocationServiceTest {
+    private Activity activity;
+    private Location networkLocation;
+    private Location gpsLocation;
+    private ShadowLocationManager shadowLocationManager;
+
+    @Before
+    public void setUp() {
+        activity = Robolectric.buildActivity(Activity.class).create().get();
+
+        networkLocation = new Location("networkLocation");
+        networkLocation.setLatitude(3.1415926535);
+        networkLocation.setLongitude(-27.18281828459);
+        networkLocation.setAccuracy(10);
+        networkLocation.setTime(100);
+
+        gpsLocation = new Location("gpsLocation");
+        gpsLocation.setLatitude(-1.23456789);
+        gpsLocation.setLongitude(98.7654321);
+        gpsLocation.setAccuracy(1000);
+        gpsLocation.setTime(200);
+
+        shadowLocationManager = shadowOf(
+                (LocationManager) RuntimeEnvironment.application.getSystemService(Context.LOCATION_SERVICE));
+        shadowLocationManager.setLastKnownLocation(LocationManager.NETWORK_PROVIDER, networkLocation);
+        shadowLocationManager.setLastKnownLocation(LocationManager.GPS_PROVIDER, gpsLocation);
+    }
+
+    @Test
+    public void getLastKnownLocation_withFinePermission_shouldReturnMoreRecentLocation() {
+        Shadows.shadowOf(activity).grantPermissions(ACCESS_FINE_LOCATION);
+
+        final Location result =
+                LocationService.getLastKnownLocation(activity, 10, MoPub.LocationAwareness.NORMAL);
+
+        // gpsLocation has a more recent timestamp than networkLocation
+        assertThat(result).isEqualTo(gpsLocation);
+    }
+
+    @Test
+    public void getLastKnownLocation_withFinePermission_withLocationAwarenessTruncated_shouldTruncateLocationLatLon() {
+        Shadows.shadowOf(activity).grantPermissions(ACCESS_FINE_LOCATION);
+
+        final Location result =
+                LocationService.getLastKnownLocation(activity, 2, MoPub.LocationAwareness.TRUNCATED);
+
+        // expected more recent gpsLocation, truncated
+        assertThat(result.getLatitude()).isEqualTo(-1.23);
+        assertThat(result.getLongitude()).isEqualTo(98.77);
+        // accuracy should be unchanged
+        assertThat(result.getAccuracy()).isEqualTo(1000);
+    }
+
+    @Test
+    public void getLastKnownLocation_withOnlyCoarsePermission_shouldReturnNetworkLocation() {
+        Shadows.shadowOf(activity).grantPermissions(ACCESS_COARSE_LOCATION);
+
+        final Location result =
+                LocationService.getLastKnownLocation(activity, 10, MoPub.LocationAwareness.NORMAL);
+
+        // only has coarse location access, expected networkLocation
+        assertThat(result).isEqualTo(networkLocation);
+    }
+
+    @Test
+    public void getLastKnownLocation_withOnlyCoarsePermission_withLocationAwarenessTruncated_shouldTruncateLocationLatLon() {
+        Shadows.shadowOf(activity).grantPermissions(ACCESS_COARSE_LOCATION);
+
+        final Location result =
+                LocationService.getLastKnownLocation(activity, 2, MoPub.LocationAwareness.TRUNCATED);
+
+        // expected networkLocation, truncated
+        assertThat(result.getLatitude()).isEqualTo(3.14);
+        assertThat(result.getLongitude()).isEqualTo(-27.18);
+        // accuracy should be unchanged
+        assertThat(result.getAccuracy()).isEqualTo(10);
+    }
+
+    @Test
+    public void getLastKnownLocation_withNoLocationPermissions_shouldReturnNull() {
+        final Location result =
+                LocationService.getLastKnownLocation(activity, 10, MoPub.LocationAwareness.NORMAL);
+
+        assertThat(result).isNull();
+    }
+
+    @Test
+    public void getLastKnownLocation_withLocationAwarenessDisabled_shouldReturnNull() {
+        Shadows.shadowOf(activity).grantPermissions(ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION);
+
+        final Location result =
+                LocationService.getLastKnownLocation(activity, 10, MoPub.LocationAwareness.DISABLED);
+
+        assertThat(result).isNull();
+    }
+
+    @Test
+    public void getLocationFromProvider_withNetworkProvider_withCoarsePermission_shouldReturnNetworkLocation() {
+        Shadows.shadowOf(activity).grantPermissions(ACCESS_COARSE_LOCATION);
+
+        final Location result = LocationService.getLocationFromProvider(activity,
+                LocationService.ValidLocationProvider.NETWORK);
+
+        assertThat(result).isEqualTo(networkLocation);
+    }
+
+    @Test
+    public void getLocationFromProvider_withNetworkProvider_withFinePermission_shouldReturnNetworkLocation() {
+        Shadows.shadowOf(activity).grantPermissions(ACCESS_FINE_LOCATION);
+
+        final Location result = LocationService.getLocationFromProvider(activity,
+                LocationService.ValidLocationProvider.NETWORK);
+
+        assertThat(result).isEqualTo(networkLocation);
+    }
+
+    @Test
+    public void getLocationFromProvider_withNetworkProvider_withNoPermissions_shouldReturnNull() {
+        final Location result = LocationService.getLocationFromProvider(activity,
+                LocationService.ValidLocationProvider.NETWORK);
+
+        assertThat(result).isNull();
+    }
+
+    @Test
+    public void getLocationFromProvider_withGpsProvider_withCoarsePermission_shouldReturnNull() {
+        Shadows.shadowOf(activity).grantPermissions(ACCESS_COARSE_LOCATION);
+
+        final Location result = LocationService.getLocationFromProvider(activity,
+                LocationService.ValidLocationProvider.GPS);
+
+        assertThat(result).isNull();
+    }
+
+    @Test
+    public void getLocationFromProvider_withGpsProvider_withFinePermission_shouldReturnGpsLocation() {
+        Shadows.shadowOf(activity).grantPermissions(ACCESS_FINE_LOCATION);
+
+        final Location result = LocationService.getLocationFromProvider(activity,
+                LocationService.ValidLocationProvider.GPS);
+
+        assertThat(result).isEqualTo(gpsLocation);
+    }
+
+    @Test
+    public void getLocationFromProvider_withGpsProvider_withNoPermissions_shouldReturnNull() {
+        final Location result = LocationService.getLocationFromProvider(activity,
+                LocationService.ValidLocationProvider.GPS);
+
+        assertThat(result).isNull();
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void getLocationFromProvider_withNullContext_shouldThrowNPE() {
+        Shadows.shadowOf(activity).grantPermissions(ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION);
+
+        LocationService.getLocationFromProvider(null, LocationService.ValidLocationProvider.GPS);
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void getLocationFromProvider_withNullProvider_shouldThrowNPE() {
+        Shadows.shadowOf(activity).grantPermissions(ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION);
+
+        LocationService.getLocationFromProvider(activity, null);
+    }
+
+    @Test
+    public void getMostRecentValidLocation_shouldReturnMoreRecentLocation() {
+        assertThat(LocationService.getMostRecentValidLocation(networkLocation, gpsLocation))
+                .isEqualTo(gpsLocation);
+    }
+
+    @Test
+    public void getMostRecentValidLocation_withFirstLocationValid_withSecondLocationNull_shouldReturnFirstLocation() {
+        assertThat(LocationService.getMostRecentValidLocation(networkLocation, null))
+                .isEqualTo(networkLocation);
+    }
+
+    @Test
+    public void getMostRecentValidLocation_withSecondLocationValid_withFirstLocationNull_shouldReturnSecondLocation() {
+        assertThat(LocationService.getMostRecentValidLocation(null, gpsLocation))
+                .isEqualTo(gpsLocation);
+    }
+
+    @Test
+    public void getMostRecentValidLocation_withBothLocationsNull_shouldReturnNull() {
+        assertThat(LocationService.getMostRecentValidLocation(null, null)).isNull();
+    }
+
+    @Test
+    public void truncateLocationLatLon_shouldRoundLatitudeAndLongitude() {
+        LocationService.truncateLocationLatLon(networkLocation, 4);
+
+        assertThat(networkLocation.getLatitude()).isEqualTo(3.1416);
+        assertThat(networkLocation.getLongitude()).isEqualTo(-27.1828);
+        // accuracy should be unchanged
+        assertThat(networkLocation.getAccuracy()).isEqualTo(10);
+    }
+
+    @Test
+    public void truncateLocationLatLon_withZeroPrecision_shouldRemoveFractionalPortion() {
+        LocationService.truncateLocationLatLon(networkLocation, 0);
+
+        assertThat(networkLocation.getLatitude()).isEqualTo(3);
+        assertThat(networkLocation.getLongitude()).isEqualTo(-27);
+        assertThat(networkLocation.getAccuracy()).isEqualTo(10);
+    }
+
+    @Test
+    public void truncateLocationLatLon_withPrecisionLongerThanProvidedDecimalPoints_shouldNotChangeLocation() {
+        LocationService.truncateLocationLatLon(gpsLocation, 100);
+
+        assertThat(gpsLocation.getLatitude()).isEqualTo(-1.23456789);
+        assertThat(gpsLocation.getLongitude()).isEqualTo(98.7654321);
+        assertThat(gpsLocation.getAccuracy()).isEqualTo(1000);
+    }
+
+    @Test
+    public void truncateLocationLatLon_withNullLocation_shouldNotChangeLocation() {
+        LocationService.truncateLocationLatLon(null, 1);
+
+        assertThat(gpsLocation.getLatitude()).isEqualTo(-1.23456789);
+        assertThat(gpsLocation.getLongitude()).isEqualTo(98.7654321);
+        assertThat(gpsLocation.getAccuracy()).isEqualTo(1000);
+    }
+
+    @Test
+    public void truncateLocationLatLon_withNegativePrecision_shouldNotChangeLocation() {
+        LocationService.truncateLocationLatLon(gpsLocation, -1);
+
+        assertThat(gpsLocation.getLatitude()).isEqualTo(-1.23456789);
+        assertThat(gpsLocation.getLongitude()).isEqualTo(98.7654321);
+        assertThat(gpsLocation.getAccuracy()).isEqualTo(1000);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/MoPubBrowserTest.java b/mopub-sdk/src/test/java/com/mopub/common/MoPubBrowserTest.java
index 41e8f54c..7ecf4ae8 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/MoPubBrowserTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/MoPubBrowserTest.java
@@ -6,17 +6,20 @@
 import android.webkit.WebView;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class MoPubBrowserTest {
 
     private MoPubBrowser subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/MoPubHttpUrlConnectionTest.java b/mopub-sdk/src/test/java/com/mopub/common/MoPubHttpUrlConnectionTest.java
new file mode 100644
index 00000000..869a0d60
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/MoPubHttpUrlConnectionTest.java
@@ -0,0 +1,120 @@
+package com.mopub.common;
+
+import android.app.Activity;
+import android.content.Context;
+import android.webkit.WebView;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
+import com.mopub.network.Networking;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import java.net.HttpURLConnection;
+import java.net.MalformedURLException;
+import java.util.List;
+
+import static com.mopub.common.MoPubHttpUrlConnection.urlEncode;
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class MoPubHttpUrlConnectionTest {
+    private static final String url = "https://www.mopub.com";
+    private String userAgent;
+
+    @Before
+    public void setUp() throws Exception {
+        Context context = Robolectric.buildActivity(Activity.class).create().get();
+        userAgent = new WebView(context).getSettings().getUserAgentString();
+        Networking.setUserAgentForTesting(userAgent);
+    }
+
+    @Test
+    public void getHttpUrlConnection_shouldReturnHttpUrlConnectionWithUserAgent() throws Exception {
+        HttpURLConnection urlConnection = MoPubHttpUrlConnection.getHttpUrlConnection(url);
+
+        List<String> userAgentHeaders = urlConnection.getRequestProperties().get("User-Agent");
+        assertThat(userAgentHeaders).containsExactly(userAgent);
+    }
+
+    @Test
+    public void getHttpUrlConnection_shouldSetConnectAndReadTimeoutTo10Seconds() throws Exception {
+        HttpURLConnection urlConnection = MoPubHttpUrlConnection.getHttpUrlConnection(url);
+
+        assertThat(urlConnection.getConnectTimeout()).isEqualTo(10000);
+        assertThat(urlConnection.getReadTimeout()).isEqualTo(10000);
+    }
+
+    @Test
+    public void getHttpUrlConnection_shouldProperlyEncodeUrl() throws Exception {
+        HttpURLConnection urlConnection = MoPubHttpUrlConnection.getHttpUrlConnection(
+                "https://host:80/doc|search?q=green robots#over 6\"");
+
+        assertThat(urlConnection.getURL().toString())
+                .isEqualTo("https://host:80/doc%7Csearch?q=green%20robots#over%206%22");
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void getHttpUrlConnection_withImproperlyEncodedUrl_shouldThrowIllegalArgumentException() throws Exception {
+        MoPubHttpUrlConnection.getHttpUrlConnection("https://user:passwrd@host:80/doc%7ZZZC");
+    }
+
+    @Test(expected = MalformedURLException.class)
+    public void getHttpUrlConnection_withMalformedUrl_shouldThrowMalformedUrlException() throws Exception {
+        MoPubHttpUrlConnection.getHttpUrlConnection("bad://host:80/doc|search?q=green robots#over 6\"");
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void getHttpUrlConnection_withNullUrl_shouldThrowNullPointerException() throws Exception {
+        MoPubHttpUrlConnection.getHttpUrlConnection(null);
+    }
+
+    @Test
+    public void urlEncode_shouldProperlyEncodeUrls() throws Exception {
+        // Example url borrowed from: https://developer.android.com/reference/java/net/URI.html
+        assertThat(urlEncode("https://user:passwrd@host:80/doc|search?q=green robots#over 6\""))
+                .isEqualTo("https://user:passwrd@host:80/doc%7Csearch?q=green%20robots#over%206%22");
+
+        assertThat(urlEncode("https://www.example.com/?key=value\"\"&key2=value2?"))
+                .isEqualTo("https://www.example.com/?key=value%22%22&key2=value2?");
+
+        assertThat(urlEncode("https://user:passwrd@host:80/doc?q=green#robots"))
+                .isEqualTo("https://user:passwrd@host:80/doc?q=green#robots");
+
+        assertThat(urlEncode("https://rtr.innovid.com/r1.5460f51c393410.96367393;cb=[timestamp]"))
+                .isEqualTo("https://rtr.innovid.com/r1.5460f51c393410.96367393;cb=%5Btimestamp%5D");
+    }
+
+    @Test
+    public void urlEncode_withProperlyEncodedUrl_shouldReturnUrlWithSameEncoding() throws Exception {
+        assertThat(urlEncode("https://user:passwrd@host:80/doc%7Csearch?q=green%20robots#over%206%22"))
+                .isEqualTo("https://user:passwrd@host:80/doc%7Csearch?q=green%20robots#over%206%22");
+
+        assertThat(urlEncode("https://www.mywebsite.com%2Fd+ocs%2Fenglish%2Fsite%2Fmybook.do%3Fkey%3Dvalue%3B%23fragment"))
+                .isEqualTo(
+                        "https://www.mywebsite.com%2Fd+ocs%2Fenglish%2Fsite%2Fmybook.do%3Fkey%3Dvalue%3B%23fragment");
+    }
+
+    @Test(expected = Exception.class)
+    public void urlEncode_withImproperlyEncodedUrl_shouldThowException() throws Exception {
+        urlEncode("https://user:passwrd@host:80/doc%7ZZZC");
+    }
+
+
+    @Test(expected = Exception.class)
+    public void urlEncode_withImproperlyEncodedUrlScheme_shouldThowException() throws Exception {
+        // From: https://developer.android.com/reference/java/net/URI.html
+        // A URI's host, port and scheme are not eligible for encoding and must not contain illegal characters.
+        urlEncode("https%3A%2F%2Fwww.mywebsite.com%2Fdocs%2Fenglish%2Fsite%2Fmybook.do%3Fkey%3Dvalue%3B%23fragment");
+    }
+
+    @Test(expected = Exception.class)
+    public void urlEncode_withMalformedUrl_shouldThrowException() throws Exception {
+        urlEncode("derp://www.mopub.com/");
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java b/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java
new file mode 100644
index 00000000..bde01702
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java
@@ -0,0 +1,133 @@
+package com.mopub.common;
+
+import android.net.Uri;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import static com.mopub.common.UrlAction.HANDLE_MOPUB_SCHEME;
+import static com.mopub.common.UrlAction.IGNORE_ABOUT_SCHEME;
+import static com.mopub.common.UrlAction.HANDLE_PHONE_SCHEME;
+import static com.mopub.common.UrlAction.OPEN_NATIVE_BROWSER;
+import static com.mopub.common.UrlAction.OPEN_APP_MARKET;
+import static com.mopub.common.UrlAction.OPEN_IN_APP_BROWSER;
+import static com.mopub.common.UrlAction.HANDLE_SHARE_TWEET;
+import static com.mopub.common.UrlAction.FOLLOW_DEEP_LINK_WITH_FALLBACK;
+import static com.mopub.common.UrlAction.FOLLOW_DEEP_LINK;
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class UrlActionTest {
+
+    @Test
+    public void handleMopubScheme_shouldBeCaseInsensitive() throws Exception {
+        assertUrlActionMatching(HANDLE_MOPUB_SCHEME, "mopub:", true);
+        assertUrlActionMatching(HANDLE_MOPUB_SCHEME, "MoPuB:", true);
+    }
+
+    @Test
+    public void ignoreAboutScheme_shouldBeCaseInsensitive() throws Exception {
+        assertUrlActionMatching(IGNORE_ABOUT_SCHEME, "about:", true);
+        assertUrlActionMatching(IGNORE_ABOUT_SCHEME, "AbOuT:", true);
+    }
+
+    @Test
+    public void handlePhoneScheme_shouldBeCaseInsensitive() throws Exception {
+        assertUrlActionMatching(HANDLE_PHONE_SCHEME, "tel:", true);
+        assertUrlActionMatching(HANDLE_PHONE_SCHEME, "TeL:", true);
+        assertUrlActionMatching(HANDLE_PHONE_SCHEME, "voicemail:", true);
+        assertUrlActionMatching(HANDLE_PHONE_SCHEME, "VoIcEmAiL:", true);
+        assertUrlActionMatching(HANDLE_PHONE_SCHEME, "sms:", true);
+        assertUrlActionMatching(HANDLE_PHONE_SCHEME, "SmS:", true);
+        assertUrlActionMatching(HANDLE_PHONE_SCHEME, "mailto:", true);
+        assertUrlActionMatching(HANDLE_PHONE_SCHEME, "MaIlTo:", true);
+        assertUrlActionMatching(HANDLE_PHONE_SCHEME, "geo:", true);
+        assertUrlActionMatching(HANDLE_PHONE_SCHEME, "GeO:", true);
+        assertUrlActionMatching(HANDLE_PHONE_SCHEME, "google.streetview:", true);
+        assertUrlActionMatching(HANDLE_PHONE_SCHEME, "GoOgLe.StReEtViEw:", true);
+                
+    }
+
+    @Test
+    public void openNativeBrowser_shouldBeCaseInsensitive() throws Exception {
+        assertUrlActionMatching(OPEN_NATIVE_BROWSER, "mopubnativebrowser:", true);
+        assertUrlActionMatching(OPEN_NATIVE_BROWSER, "MoPuBnAtIvEbRoWsEr:", true);
+    }
+
+    @Test
+    public void openAppMarket_shouldBeCaseInsensitive() throws Exception {
+        assertUrlActionMatching(OPEN_APP_MARKET, "https://play.google.com", true);
+        assertUrlActionMatching(OPEN_APP_MARKET, "https://PlAy.GoOgLe.CoM", true);
+        assertUrlActionMatching(OPEN_APP_MARKET, "https://market.android.com", true);
+        assertUrlActionMatching(OPEN_APP_MARKET, "https://MaRkEt.AnDrOiD.CoM", true);
+        assertUrlActionMatching(OPEN_APP_MARKET, "market:", true);
+        assertUrlActionMatching(OPEN_APP_MARKET, "MaRkEt:", true);
+        assertUrlActionMatching(OPEN_APP_MARKET, "play.google.com/", true);
+        assertUrlActionMatching(OPEN_APP_MARKET, "PlAy.GoOgLe.CoM/", true);
+        assertUrlActionMatching(OPEN_APP_MARKET, "market.android.com/", true);
+        assertUrlActionMatching(OPEN_APP_MARKET, "MaRkEt.AnDrOiD.CoM/", true);
+    }
+
+    @Test
+    public void openInAppBrowser_shouldBeCaseInsensitive() throws Exception {
+        assertUrlActionMatching(OPEN_IN_APP_BROWSER, "http:", true);
+        assertUrlActionMatching(OPEN_IN_APP_BROWSER, "HtTp:", true);
+        assertUrlActionMatching(OPEN_IN_APP_BROWSER, "https:", true);
+        assertUrlActionMatching(OPEN_IN_APP_BROWSER, "HtTpS:", true);
+    }
+
+    @Test
+    public void handleShareTweet_shouldBeCaseInsensitive() throws Exception {
+        assertUrlActionMatching(HANDLE_SHARE_TWEET, "mopubshare://tweet", true);
+        assertUrlActionMatching(HANDLE_SHARE_TWEET, "MoPuBsHaRe://tweet", true);
+        assertUrlActionMatching(HANDLE_SHARE_TWEET, "mopubshare://TwEeT", true);
+    }
+
+    @Test
+    public void followDeepLinkWithFallback_shouldBeCaseInsensitive() throws Exception {
+        assertUrlActionMatching(FOLLOW_DEEP_LINK_WITH_FALLBACK, "deeplink+:", true);
+        assertUrlActionMatching(FOLLOW_DEEP_LINK_WITH_FALLBACK, "DeEpLiNk+:", true);
+    }
+
+    @Test
+    public void followDeepLink_shouldBeCaseInsensitive() throws Exception {
+        assertUrlActionMatching(FOLLOW_DEEP_LINK, "myapp://", true);
+        assertUrlActionMatching(FOLLOW_DEEP_LINK, "MyApP://", true);
+        assertUrlActionMatching(FOLLOW_DEEP_LINK, "myapp://myview", true);
+        assertUrlActionMatching(FOLLOW_DEEP_LINK, "myapp://MyView", true);
+    }
+
+    @Test
+    public void followDeepLink_withEmptyScheme_shouldNotMatch() throws Exception {
+        assertUrlActionMatching(FOLLOW_DEEP_LINK, "://myview", false);
+    }
+
+    @Test
+    public void followDeepLink_withEmptyHost_shouldMatch() throws Exception {
+        assertUrlActionMatching(FOLLOW_DEEP_LINK, "myapp://", true);
+    }
+
+    @Test
+    public void followDeepLink_withIntentScheme_withEmptyHost_shouldMatch() throws Exception {
+        assertUrlActionMatching(FOLLOW_DEEP_LINK, "intent://", true);
+        assertUrlActionMatching(FOLLOW_DEEP_LINK, "InTeNt://", true);
+    }
+
+    @Test
+    public void followDeepLink_withIntentScheme_withHost_shouldMatch() throws Exception {
+        assertUrlActionMatching(FOLLOW_DEEP_LINK, "intent://host", true);
+        assertUrlActionMatching(FOLLOW_DEEP_LINK, "InTeNt://HoSt", true);
+    }
+
+    private void assertUrlActionMatching(@NonNull final UrlAction action,
+            @Nullable final String url, final boolean shouldMatch) {
+        assertThat(action.shouldTryHandlingUrl(Uri.parse(url))).isEqualTo(shouldMatch);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
index d70faa57..66ccbdd2 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
@@ -8,14 +8,21 @@
 import android.support.annotation.NonNull;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 import com.mopub.network.MoPubRequestQueue;
 import com.mopub.network.Networking;
 
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
+import org.robolectric.RuntimeEnvironment;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowApplication;
+
+import java.net.URISyntaxException;
 
 import static com.mopub.common.UrlAction.FOLLOW_DEEP_LINK;
 import static com.mopub.common.UrlAction.FOLLOW_DEEP_LINK_WITH_FALLBACK;
@@ -35,6 +42,7 @@
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class UrlHandlerTest {
     private Context context;
     @Mock private UrlHandler.ResultActions mockResultActions;
@@ -44,11 +52,18 @@
     @Before
     public void setUp() throws Exception {
         context = Robolectric.buildActivity(Activity.class).create().get().getApplicationContext();
+
+        // This url will be attempted when and intent:// url is not resolvable AND the app package
+        // is missing (see Intents.launchApplicationIntent). In this case, we want the url to be
+        // resolvable so the tests behave as a real device and actually attempt to open it.
+        // This discrepancy between devices and test environment/emulators is was led to the
+        // regression of ADF-2291.
+        makeDeeplinkResolvable("market://details?id=null");
     }
 
     @Test
     public void urlHandler_withoutMoPubBrowser_shouldCallOnClickSuccessButNotStartActivity() {
-        final String url = "http://www.mopub.com/";
+        final String url = "https://www.mopub.com/";
 
         new UrlHandler.Builder()
                 .withSupportedUrlActions(OPEN_IN_APP_BROWSER)
@@ -59,7 +74,7 @@ public void urlHandler_withoutMoPubBrowser_shouldCallOnClickSuccessButNotStartAc
 
         verify(mockResultActions).urlHandlingSucceeded(url, OPEN_IN_APP_BROWSER);
         verifyNoMoreCallbacks();
-        final Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
+        final Intent startedActivity = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(startedActivity).isNull();
     }
 
@@ -76,6 +91,19 @@ public void urlHandler_withMatchingMoPubSchemeFinishLoad_shouldCallOnFinishLoad(
         verifyNoMoreCallbacks();
     }
 
+    @Test
+    public void urlHandler_withMatchingMoPubSchemeUppercasedFinishLoad_shouldCallOnFinishLoad() {
+        final String url = "mopub://FiNiShLoAd";
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(HANDLE_MOPUB_SCHEME)
+                .withResultActions(mockResultActions)
+                .withMoPubSchemeListener(mockMoPubSchemeListener)
+                .build().handleResolvedUrl(context, url, true, null);
+
+        verify(mockMoPubSchemeListener).onFinishLoad();
+        verifyNoMoreCallbacks();
+    }
+
     @Test
     public void urlHandler_withMatchingMoPubSchemeClose_shouldCallOnClose() {
         final String url = "mopub://close";
@@ -89,6 +117,19 @@ public void urlHandler_withMatchingMoPubSchemeClose_shouldCallOnClose() {
         verifyNoMoreCallbacks();
     }
 
+    @Test
+    public void urlHandler_withMatchingMoPubSchemeUppercasedClose_shouldCallOnClose() {
+        final String url = "mopub://ClOsE";
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(HANDLE_MOPUB_SCHEME)
+                .withResultActions(mockResultActions)
+                .withMoPubSchemeListener(mockMoPubSchemeListener)
+                .build().handleResolvedUrl(context, url, true, null);
+
+        verify(mockMoPubSchemeListener).onClose();
+        verifyNoMoreCallbacks();
+    }
+
     @Test
     public void urlHandler_withMatchingMoPubSchemeFailLoad_shouldCallOnFailLoad() {
         final String url = "mopub://failLoad";
@@ -102,6 +143,19 @@ public void urlHandler_withMatchingMoPubSchemeFailLoad_shouldCallOnFailLoad() {
         verifyNoMoreCallbacks();
     }
 
+    @Test
+    public void urlHandler_withMatchingMoPubSchemeUppercasedFailLoad_shouldCallOnFailLoad() {
+        final String url = "mopub://FaIlLoAd";
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(HANDLE_MOPUB_SCHEME)
+                .withResultActions(mockResultActions)
+                .withMoPubSchemeListener(mockMoPubSchemeListener)
+                .build().handleResolvedUrl(context, url, true, null);
+
+        verify(mockMoPubSchemeListener).onFailLoad();
+        verifyNoMoreCallbacks();
+    }
+
     @Test
     public void urlHandler_withMatchingAboutSchemeUrl_shouldIgnoreClick() {
         final String url = "about:blank";
@@ -159,14 +213,14 @@ public void urlHandler_withMatchingPhoneSchemeUrl_shouldStartActivity() {
                 .withMoPubSchemeListener(mockMoPubSchemeListener)
                 .build().handleResolvedUrl(context, url, true, null);
 
-        final Intent startedActivity = Robolectric.getShadowApplication().peekNextStartedActivity();
+        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
         assertThat(startedActivity.getAction()).isEqualTo(Intent.ACTION_VIEW);
         assertThat(startedActivity.getData()).isEqualTo(Uri.parse(url));
     }
 
     @Test
     public void urlHandler_withValidNativeBrowserUrl_shouldCallOnClickSuccess_shouldStartActivity() {
-        final String urlToLoad = "http://www.mopub.com/";
+        final String urlToLoad = "https://www.mopub.com/";
         final String url = "mopubnativebrowser://navigate?url=" + urlToLoad;
 
         new UrlHandler.Builder()
@@ -178,14 +232,14 @@ public void urlHandler_withValidNativeBrowserUrl_shouldCallOnClickSuccess_should
 
         verify(mockResultActions).urlHandlingSucceeded(url, OPEN_NATIVE_BROWSER);
         verifyNoMoreCallbacks();
-        final Intent startedActivity = Robolectric.getShadowApplication().peekNextStartedActivity();
+        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
         assertThat(startedActivity.getAction()).isEqualTo(Intent.ACTION_VIEW);
         assertThat(startedActivity.getData()).isEqualTo(Uri.parse(urlToLoad));
     }
 
     @Test
     public void urlHandler_withMatchingInAppBrowserHttpUrl_shouldCallOnClickSuccess_shouldStartActivity() {
-        final String url = "http://some_url";
+        final String url = "https://some_url";
 
         new UrlHandler.Builder()
                 .withSupportedUrlActions(IGNORE_ABOUT_SCHEME, HANDLE_MOPUB_SCHEME, FOLLOW_DEEP_LINK,
@@ -196,7 +250,7 @@ public void urlHandler_withMatchingInAppBrowserHttpUrl_shouldCallOnClickSuccess_
 
         verify(mockResultActions).urlHandlingSucceeded(url, OPEN_IN_APP_BROWSER);
         verifyNoMoreCallbacks();
-        final Intent startedActivity = Robolectric.getShadowApplication().peekNextStartedActivity();
+        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
         assertThat(startedActivity.getComponent().getClassName())
                 .isEqualTo(MoPubBrowser.class.getName());
         assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(url);
@@ -215,7 +269,7 @@ public void urlHandler_withMatchingInAppBrowserHttpsUrl_shouldCallOnClickSuccess
 
         verify(mockResultActions).urlHandlingSucceeded(url, OPEN_IN_APP_BROWSER);
         verifyNoMoreCallbacks();
-        final Intent startedActivity = Robolectric.getShadowApplication().peekNextStartedActivity();
+        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
         assertThat(startedActivity.getComponent().getClassName())
                 .isEqualTo(MoPubBrowser.class.getName());
         assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(url);
@@ -232,7 +286,7 @@ public void urlHandler_withMatchingShareUrl_shouldCallOnClickSuccess_shouldStart
 
         verify(mockResultActions).urlHandlingSucceeded(shareTweetUrl, HANDLE_SHARE_TWEET);
         verifyNoMoreCallbacks();
-        final Intent startedActivity = Robolectric.getShadowApplication().peekNextStartedActivity();
+        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
         assertThat(startedActivity.getAction()).isEqualTo(Intent.ACTION_CHOOSER);
     }
 
@@ -249,11 +303,30 @@ public void urlHandler_withMatchingDeepLinkUrl_shouldCallOnClickSuccess_shouldSt
 
         verify(mockResultActions).urlHandlingSucceeded(deepLinkUrl, FOLLOW_DEEP_LINK);
         verifyNoMoreCallbacks();
-        final Intent startedActivity = Robolectric.getShadowApplication().peekNextStartedActivity();
+        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
         assertThat(startedActivity.getAction()).isEqualTo(Intent.ACTION_VIEW);
         assertThat(startedActivity.getData()).isEqualTo(Uri.parse(deepLinkUrl));
     }
 
+    @Test
+    public void urlHandler_withMatchingIntentUrl_shouldCallOnClickSuccess_shouldStartActivity() throws URISyntaxException {
+        final String appPackage = "com.google.zxing.client.android";
+        final String intentUrl = "intent://scan/#Intent;scheme=zxing;package=" + appPackage
+                + ";end";
+        makeIntentUrlResolvable(intentUrl);
+
+        new UrlHandler.Builder()
+                .withSupportedUrlActions(FOLLOW_DEEP_LINK)
+                .withResultActions(mockResultActions)
+                .withMoPubSchemeListener(mockMoPubSchemeListener)
+                .build().handleResolvedUrl(context, intentUrl, true, null);
+
+        verify(mockResultActions).urlHandlingSucceeded(intentUrl, FOLLOW_DEEP_LINK);
+        verifyNoMoreCallbacks();
+        final Intent startedActivity = ShadowApplication.getInstance().getNextStartedActivity();
+        assertThat(startedActivity.getAction()).isEqualTo(Intent.ACTION_VIEW);
+    }
+
     @Test
     public void urlHandler_withMatchingDeeplinkPlus_shouldCallOnClickSuccess_shouldStartActivity() {
         final String primaryUrl = "twitter://timeline";
@@ -267,7 +340,7 @@ public void urlHandler_withMatchingDeeplinkPlus_shouldCallOnClickSuccess_shouldS
 
         verify(mockResultActions).urlHandlingSucceeded(deeplinkPlusUrl, FOLLOW_DEEP_LINK_WITH_FALLBACK);
         verifyNoMoreCallbacks();
-        final Intent startedActivity = Robolectric.getShadowApplication().peekNextStartedActivity();
+        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
         assertThat(startedActivity.getAction()).isEqualTo(Intent.ACTION_VIEW);
         assertThat(startedActivity.getData()).isEqualTo(Uri.parse(primaryUrl));
     }
@@ -275,7 +348,7 @@ public void urlHandler_withMatchingDeeplinkPlus_shouldCallOnClickSuccess_shouldS
     @Test
     public void urlHandler_withMatchingUnresolvableDeeplinkPlus_withResolvableFallback_shouldResolveRedirects_shouldCallOnClickSuccess_shouldStartActivity() {
         final String primaryUrl = "missingApp://somePath";
-        final String fallbackUrl = "http://www.twitter.com";
+        final String fallbackUrl = "https://www.twitter.com";
         final String fallbackUrlAfterRedirects = "https://twitter.com/";
         final String deeplinkPlusUrl = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
                 + "&fallbackUrl=" + Uri.encode(fallbackUrl);
@@ -285,11 +358,11 @@ public void urlHandler_withMatchingUnresolvableDeeplinkPlus_withResolvableFallba
                 .withResultActions(mockResultActions)
                 .build().handleUrl(context, deeplinkPlusUrl);
 
-        Robolectric.runBackgroundTasks();
+        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
         verify(mockResultActions).urlHandlingSucceeded(fallbackUrlAfterRedirects,
                 OPEN_IN_APP_BROWSER);
         verifyNoMoreCallbacks();
-        final Intent startedActivity = Robolectric.getShadowApplication().peekNextStartedActivity();
+        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
         assertThat(startedActivity.getComponent().getClassName())
                 .isEqualTo(MoPubBrowser.class.getName());
         assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY))
@@ -315,10 +388,10 @@ public void urlHandler_withMatchingUnresolvableDeeplinkPlus_withUnresolvableFall
     @Test
     public void urlHandler_withDeeplinkPlus_shouldTriggerPrimaryTracker() {
         final String primaryUrl = "twitter://timeline";
-        final String primaryTracker = "http://ads.twitter.com/tracking?pubId=1234&userId=5678";
-        final String fallbackUrl = "http://twitter.com";
+        final String primaryTracker = "https://ads.twitter.com/tracking?pubId=1234&userId=5678";
+        final String fallbackUrl = "https://twitter.com";
         final String fallbackTracker =
-                "http://ads.twitter.com/fallbackTracking?pubId=1234&userId=5678";
+                "https://ads.twitter.com/fallbackTracking?pubId=1234&userId=5678";
         final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
                 + "&primaryTrackingUrl=" + Uri.encode(primaryTracker)
                 + "&fallbackUrl=" + Uri.encode(fallbackUrl)
@@ -337,8 +410,8 @@ public void urlHandler_withDeeplinkPlus_shouldTriggerPrimaryTracker() {
     @Test
     public void urlHandler_withDeeplinkPlus_shouldTriggerMultiplePrimaryTrackers() {
         final String primaryUrl = "twitter://timeline";
-        final String primaryTracker1 = "http://ads.twitter.com/tracking?pubId=1234&userId=5678";
-        final String primaryTracker2 = "http://ads.mopub.com/tracking?pubId=4321&userId=8765";
+        final String primaryTracker1 = "https://ads.twitter.com/tracking?pubId=1234&userId=5678";
+        final String primaryTracker2 = "https://ads.mopub.com/tracking?pubId=4321&userId=8765";
         final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
                 + "&primaryTrackingUrl=" + Uri.encode(primaryTracker1)
                 + "&primaryTrackingUrl=" + Uri.encode(primaryTracker2);
@@ -356,10 +429,10 @@ public void urlHandler_withDeeplinkPlus_shouldTriggerMultiplePrimaryTrackers() {
     @Test
     public void urlHandler_withDeeplinkPlus_withResolvableFallback_shouldTriggerFallbackTracker() {
         final String primaryUrl = "missingApp://somePath";
-        final String fallbackUrl = "http://twitter.com";
-        final String primaryTracker = "http://ads.twitter.com/tracking?pubId=1234&userId=5678";
+        final String fallbackUrl = "https://twitter.com";
+        final String primaryTracker = "https://ads.twitter.com/tracking?pubId=1234&userId=5678";
         final String fallbackTracker =
-                "http://ads.twitter.com/fallbackTracking?pubId=1234&userId=5678";
+                "https://ads.twitter.com/fallbackTracking?pubId=1234&userId=5678";
         final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
                 + "&primaryTrackingUrl=" + Uri.encode(primaryTracker)
                 + "&fallbackUrl=" + Uri.encode(fallbackUrl)
@@ -377,9 +450,9 @@ public void urlHandler_withDeeplinkPlus_withResolvableFallback_shouldTriggerFall
     @Test
     public void urlHandler_withDeeplinkPlus_withResolvableFallback_shouldTriggerMultiplePrimaryTrackers() {
         final String primaryUrl = "missingApp://somePath";
-        final String fallbackUrl = "http://twitter.com";
-        final String fallbackTracker1 = "http://ads.twitter.com/tracking?pubId=1234&userId=5678";
-        final String fallbackTracker2 = "http://ads.mopub.com/tracking?pubId=4321&userId=8765";
+        final String fallbackUrl = "https://twitter.com";
+        final String fallbackTracker1 = "https://ads.twitter.com/tracking?pubId=1234&userId=5678";
+        final String fallbackTracker2 = "https://ads.mopub.com/tracking?pubId=4321&userId=8765";
         final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
                 + "&fallbackUrl=" + Uri.encode(fallbackUrl)
                 + "&fallbackTrackingUrl=" + Uri.encode(fallbackTracker1)
@@ -394,20 +467,6 @@ public void urlHandler_withDeeplinkPlus_withResolvableFallback_shouldTriggerMult
         verify(mockRequestQueue).add(argThat(isUrl(fallbackTracker2)));
     }
 
-    @Test
-    public void urlHandler_withUppercasedDeeplinkPlus_shouldBeHandled() {
-        final String primaryUrl = "twitter://timeline";
-        final String url = "DeEpLiNk+://navigate?primaryUrl=" + Uri.encode(primaryUrl);
-        makeDeeplinkResolvable(primaryUrl);
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK)
-                .withResultActions(mockResultActions)
-                .build().handleResolvedUrl(context, url, true, null);
-
-        verify(mockResultActions).urlHandlingSucceeded(url, FOLLOW_DEEP_LINK_WITH_FALLBACK);
-    }
-
     @Test
     public void urlHandler_withdDeeplinkPlus_withUppercasedNavigate_shouldBeHandled() {
         final String primaryUrl = "twitter://timeline";
@@ -879,11 +938,16 @@ private void verifyNoMoreCallbacks() {
     }
 
     private void verifyNoStartedActivity() {
-        assertThat(Robolectric.getShadowApplication().peekNextStartedActivity()).isNull();
+        assertThat(ShadowApplication.getInstance().peekNextStartedActivity()).isNull();
     }
 
     private void makeDeeplinkResolvable(String deeplink) {
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW,
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW,
                 Uri.parse(deeplink)), new ResolveInfo());
     }
+
+    private void makeIntentUrlResolvable(String intentUrl) throws URISyntaxException {
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(
+                Intent.parseUri(intentUrl, Intent.URI_INTENT_SCHEME), new ResolveInfo());
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/UrlResolutionTaskTest.java b/mopub-sdk/src/test/java/com/mopub/common/UrlResolutionTaskTest.java
new file mode 100644
index 00000000..df0626ea
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/UrlResolutionTaskTest.java
@@ -0,0 +1,145 @@
+package com.mopub.common;
+
+import android.support.annotation.Nullable;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.annotation.Config;
+
+import java.io.IOException;
+import java.net.HttpURLConnection;
+import java.net.URISyntaxException;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class UrlResolutionTaskTest {
+    private final String BASE_URL =  "https://a.example.com/b/c/d?e=f";
+    @Mock private HttpURLConnection mockHttpUrlConnection;
+
+    @Test
+    public void resolveRedirectLocation_withAbsoluteRedirect_shouldReturnAbsolutePath() throws Exception {
+        setupMockHttpUrlConnection(302, "https://www.abc.com");
+
+        assertThat(UrlResolutionTask.resolveRedirectLocation(BASE_URL, mockHttpUrlConnection))
+                .isEqualTo("https://www.abc.com");
+    }
+
+    @Test
+    public void resolveRedirectLocation_withRelativeRedirect_shouldReplaceFileWithRelativePath() throws Exception {
+        setupMockHttpUrlConnection(302, "foo/bar");
+
+        assertThat(UrlResolutionTask.resolveRedirectLocation(BASE_URL, mockHttpUrlConnection))
+                .isEqualTo("https://a.example.com/b/c/foo/bar");
+    }
+
+    @Test
+    public void resolveRedirectLocation_withRelativeFromRootRedirect_shouldReturnAmendedPathFromRoot() throws Exception {
+        setupMockHttpUrlConnection(302, "/foo/bar");
+
+        assertThat(UrlResolutionTask.resolveRedirectLocation(BASE_URL, mockHttpUrlConnection))
+                .isEqualTo("https://a.example.com/foo/bar");
+    }
+
+    @Test
+    public void resolveRedirectLocation_withRelativeFromOneLevelUpRedirect_shouldReturnAmendedPathFromOneLevelUp() throws Exception {
+        setupMockHttpUrlConnection(302, "../foo/bar");
+
+        assertThat(UrlResolutionTask.resolveRedirectLocation(BASE_URL, mockHttpUrlConnection))
+                .isEqualTo("https://a.example.com/b/foo/bar");
+    }
+
+    @Test
+    public void resolveRedirectLocation_withRelativeAndQueryParamsRedirect_shouldReturnAmendedPathWithQueryParams() throws Exception {
+        setupMockHttpUrlConnection(302, "../foo/bar?x=y");
+
+        assertThat(UrlResolutionTask.resolveRedirectLocation(BASE_URL, mockHttpUrlConnection))
+                .isEqualTo("https://a.example.com/b/foo/bar?x=y");
+    }
+
+    @Test
+    public void resolveRedirectLocation_withRedirectWithoutScheme_shouldCompleteTheScheme() throws Exception {
+        setupMockHttpUrlConnection(302, "//foo.example.com/bar");
+
+        assertThat(UrlResolutionTask.resolveRedirectLocation(BASE_URL, mockHttpUrlConnection))
+                .isEqualTo("https://foo.example.com/bar");
+    }
+
+    @Test
+    public void resolveRedirectLocation_withRedirectDifferentScheme_shouldReturnRedirectScheme() throws Exception {
+        setupMockHttpUrlConnection(302, "https://a.example.com/b/c/d?e=f");
+
+        assertThat(UrlResolutionTask.resolveRedirectLocation(BASE_URL, mockHttpUrlConnection))
+                .isEqualTo("https://a.example.com/b/c/d?e=f");
+    }
+
+    @Test
+    public void resolveRedirectLocation_withOnlyQueryParamsRedirect_shouldReturnAmendedPathWithQueryParams() throws Exception {
+        setupMockHttpUrlConnection(302, "?x=y");
+
+        assertThat(UrlResolutionTask.resolveRedirectLocation(BASE_URL, mockHttpUrlConnection))
+                .isEqualTo("https://a.example.com/b/c/?x=y");
+    }
+
+    @Test
+    public void resolveRedirectLocation_withOnlyFragmentRedirect_shouldReturnAmendedPathWithFragment() throws Exception {
+        setupMockHttpUrlConnection(302, "#x");
+
+        assertThat(UrlResolutionTask.resolveRedirectLocation(BASE_URL, mockHttpUrlConnection))
+                .isEqualTo("https://a.example.com/b/c/d?e=f#x");
+    }
+
+    @Test
+    public void resolveRedirectLocation_withDotRedirect_shouldStripFile() throws Exception {
+        setupMockHttpUrlConnection(302, ".");
+
+        assertThat(UrlResolutionTask.resolveRedirectLocation(BASE_URL, mockHttpUrlConnection))
+                .isEqualTo("https://a.example.com/b/c/");
+    }
+
+    @Test
+    public void resolveRedirectLocation_withResponseCode301_shouldResolvePath() throws Exception {
+        setupMockHttpUrlConnection(301, "https://www.abc.com");
+
+        assertThat(UrlResolutionTask.resolveRedirectLocation(BASE_URL, mockHttpUrlConnection))
+                .isEqualTo("https://www.abc.com");
+    }
+
+    @Test
+    public void resolveRedirectLocation_withResponseCode200_shouldReturnNull() throws Exception {
+        setupMockHttpUrlConnection(200, "https://www.abc.com");
+
+        assertThat(UrlResolutionTask.resolveRedirectLocation(BASE_URL, mockHttpUrlConnection))
+                .isNull();
+    }
+
+    @Test
+    public void resolveRedirectLocation_withoutLocation_shouldReturnNull() throws Exception {
+        setupMockHttpUrlConnection(200, null);
+
+        assertThat(UrlResolutionTask.resolveRedirectLocation(BASE_URL, mockHttpUrlConnection))
+                .isNull();
+    }
+
+    @Test(expected = URISyntaxException.class)
+    public void resolveRedirectLocation_withInvalidUrl_shouldThrowURISyntaxException() throws Exception {
+        setupMockHttpUrlConnection(301, "https://a.example.com/b c/d");
+
+        UrlResolutionTask.resolveRedirectLocation(BASE_URL, mockHttpUrlConnection);
+    }
+
+    private void setupMockHttpUrlConnection(final int responseCode,
+            @Nullable final String absolutePathUrl) throws IOException {
+        mockHttpUrlConnection = mock(HttpURLConnection.class);
+        when(mockHttpUrlConnection.getResponseCode()).thenReturn(responseCode);
+        when(mockHttpUrlConnection.getHeaderField("Location")).thenReturn(absolutePathUrl);
+    }
+
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/BaseEventTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/BaseEventTest.java
index 55a087f4..a5c0d99f 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/event/BaseEventTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/event/BaseEventTest.java
@@ -2,17 +2,20 @@
 
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
+import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class BaseEventTest {
 
     private BaseEvent subject;
@@ -55,7 +58,7 @@ public void setUp() {
                 .withPerformanceDurationMs(100.0)
                 .withRequestId("b550796074da4559a27c5072dcba2b27")
                 .withRequestStatusCode(200)
-                .withRequestUri("http://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca")
+                .withRequestUri("https://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca")
                 .withRequestRetries(0)
                 .build();
     }
@@ -137,7 +140,7 @@ public void constructor_shouldCorrectlyAssignFieldsFromBuilder() throws Exceptio
         assertThat(subject.getPerformanceDurationMs()).isEqualTo(100.0);
         assertThat(subject.getRequestId()).isEqualTo("b550796074da4559a27c5072dcba2b27");
         assertThat(subject.getRequestStatusCode()).isEqualTo(200);
-        assertThat(subject.getRequestUri()).isEqualTo("http://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca");
+        assertThat(subject.getRequestUri()).isEqualTo("https://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca");
         assertThat(subject.getRequestRetries()).isEqualTo(0);
         assertThat(subject.getSamplingRate()).isEqualTo(0.10000123);
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/ErrorEventTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/ErrorEventTest.java
index 05cd07f6..957552b1 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/event/ErrorEventTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/event/ErrorEventTest.java
@@ -1,14 +1,17 @@
 package com.mopub.common.event;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class ErrorEventTest {
 
     private ErrorEvent subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/EventDispatcherTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/EventDispatcherTest.java
index 1c32fd16..9b3fef29 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/event/EventDispatcherTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/event/EventDispatcherTest.java
@@ -6,11 +6,13 @@
 import android.os.Message;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
+import org.robolectric.annotation.Config;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -23,6 +25,7 @@
 
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class EventDispatcherTest {
 
     private EventDispatcher subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/EventSamplerTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/EventSamplerTest.java
index d6494a11..b4b2d15e 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/event/EventSamplerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/event/EventSamplerTest.java
@@ -1,11 +1,14 @@
 package com.mopub.common.event;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
+import org.mockito.stubbing.OngoingStubbing;
+import org.robolectric.annotation.Config;
 
 import java.util.Random;
 
@@ -13,6 +16,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class EventSamplerTest {
 
     private EventSampler subject;
@@ -42,4 +46,44 @@ public void sample_withRandomNumberGreaterOrEqualTo10Percent_shouldReturnFalse()
 
         assertThat(result).isFalse();
     }
+
+    @Test
+    public void sample_withSameRequestId_shouldReturnSameValueRegardlessOfSampleRate() throws Exception {
+        when(mockRandom.nextDouble()).thenReturn(0.09).thenReturn(0.999);
+        when(mockBaseEvent.getRequestId()).thenReturn("rid");
+
+        boolean firstResult = subject.sample(mockBaseEvent);
+        assertThat(firstResult).isTrue();
+
+        boolean secondResult = subject.sample(mockBaseEvent);
+        assertThat(secondResult).isTrue();
+    }
+
+    @Test
+    public void sample_withDifferentRequestId_shouldReturnResultBasedOnSampleRate() throws Exception {
+        when(mockRandom.nextDouble()).thenReturn(0.09).thenReturn(0.999);
+        when(mockBaseEvent.getRequestId()).thenReturn("rid1").thenReturn("rid2");
+
+        boolean firstResult = subject.sample(mockBaseEvent);
+        assertThat(firstResult).isTrue();
+
+        boolean secondResult = subject.sample(mockBaseEvent);
+        assertThat(secondResult).isFalse();
+    }
+
+    @Test
+    public void sample_withTooManyEvents_shouldHoldAMaximumNumberOfRequestIds() {
+        when(mockRandom.nextDouble()).thenReturn(0.001);
+        OngoingStubbing<String> ongoingStubbing = when(mockBaseEvent.getRequestId()).thenReturn(
+                "rid0");
+        for (int i = 1; i < EventSampler.MAX_SIZE * 3; i++) {
+            ongoingStubbing = ongoingStubbing.thenReturn("rid" + i);
+        }
+
+        for (int i = 0; i < EventSampler.MAX_SIZE * 3; i++) {
+            subject.sample(mockBaseEvent);
+        }
+
+        assertThat(subject.getCacheSize()).isEqualTo(EventSampler.MAX_SIZE);
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/EventSerializerTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/EventSerializerTest.java
index 22a6bebc..34d030ba 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/event/EventSerializerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/event/EventSerializerTest.java
@@ -1,9 +1,11 @@
 package com.mopub.common.event;
 
 import android.app.Activity;
+import android.content.Context;
 
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 
 import org.json.JSONArray;
 import org.json.JSONObject;
@@ -12,6 +14,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 
 import java.util.ArrayList;
 
@@ -19,10 +22,10 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class EventSerializerTest {
 
     private EventSerializer subject;
-    private Activity context;
 
     @Mock private Event mockEvent;
     @Mock private ErrorEvent mockErrorEvent;
@@ -32,7 +35,7 @@ public void setUp() {
         subject = new EventSerializer();
 
         // initialize client meta data with context
-        context = Robolectric.buildActivity(Activity.class).create().get();
+        Context context = Robolectric.buildActivity(Activity.class).create().get();
         ClientMetadata.getInstance(context);
 
         populateBaseEventFields(mockEvent);
@@ -112,6 +115,7 @@ private void populateBaseEventFields(BaseEvent mockBaseEvent) {
         when(mockBaseEvent.getAdNetworkType()).thenReturn("admob");
         when(mockBaseEvent.getAdWidthPx()).thenReturn(320.0);
         when(mockBaseEvent.getAdHeightPx()).thenReturn(50.0);
+        when(mockBaseEvent.getDspCreativeId()).thenReturn("jack!fake234");
         when(mockBaseEvent.getAppPlatform()).thenReturn(BaseEvent.AppPlatform.ANDROID);
         when(mockBaseEvent.getAppName()).thenReturn("MoPub Sample App");
         when(mockBaseEvent.getAppPackageName()).thenReturn("com.mopub.simpleadsdemo");
@@ -138,7 +142,7 @@ private void populateBaseEventFields(BaseEvent mockBaseEvent) {
         when(mockBaseEvent.getNetworkSimIsoCountryCode()).thenReturn("US");
         when(mockBaseEvent.getRequestId()).thenReturn("b550796074da4559a27c5072dcba2b27");
         when(mockBaseEvent.getRequestStatusCode()).thenReturn(200);
-        when(mockBaseEvent.getRequestUri()).thenReturn("http://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca");
+        when(mockBaseEvent.getRequestUri()).thenReturn("https://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca");
         when(mockBaseEvent.getRequestRetries()).thenReturn(0);
         when(mockBaseEvent.getTimestampUtcMs()).thenReturn(1416447053472L);
     }
@@ -162,6 +166,7 @@ private void validateBaseEventFields(JSONObject jsonObject) throws Exception {
         assertThat(jsonObject.getString("ad_network_type")).isEqualTo("admob");
         assertThat(jsonObject.getDouble("ad_width_px")).isEqualTo(320.0);
         assertThat(jsonObject.getDouble("ad_height_px")).isEqualTo(50.0);
+        assertThat(jsonObject.getString("dsp_creative_id")).isEqualTo("jack!fake234");
 
         // App Details
         assertThat(jsonObject.getInt("app_platform")).isEqualTo(2);
@@ -201,7 +206,7 @@ private void validateBaseEventFields(JSONObject jsonObject) throws Exception {
         // Request Details
         assertThat(jsonObject.getString("req_id")).isEqualTo("b550796074da4559a27c5072dcba2b27");
         assertThat(jsonObject.getInt("req_status_code")).isEqualTo(200);
-        assertThat(jsonObject.getString("req_uri")).isEqualTo("http://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca");
+        assertThat(jsonObject.getString("req_uri")).isEqualTo("https://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca");
         assertThat(jsonObject.getInt("req_retries")).isEqualTo(0);
 
         // Timestamp Details
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/EventTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/EventTest.java
index 6a3e58f2..3384f75e 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/event/EventTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/event/EventTest.java
@@ -1,14 +1,17 @@
 package com.mopub.common.event;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class EventTest {
 
     private Event subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/MoPubEventsTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/MoPubEventsTest.java
index d555f34e..2bf68573 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/event/MoPubEventsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/event/MoPubEventsTest.java
@@ -1,10 +1,12 @@
 package com.mopub.common.event;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
 
 import java.util.ArrayList;
 
@@ -14,6 +16,7 @@
 
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class MoPubEventsTest {
 
     @Before
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/ScribeEventRecorderTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/ScribeEventRecorderTest.java
index 5681be25..7305cc7b 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/event/ScribeEventRecorderTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/event/ScribeEventRecorderTest.java
@@ -3,6 +3,7 @@
 import android.os.Handler;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 import com.mopub.network.ScribeBackoffPolicy;
 import com.mopub.network.ScribeRequest;
 import com.mopub.network.ScribeRequestManager;
@@ -13,6 +14,7 @@
 import org.mockito.Mock;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
+import org.robolectric.annotation.Config;
 
 import java.util.List;
 import java.util.Queue;
@@ -28,6 +30,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class ScribeEventRecorderTest {
 
     private ScribeEventRecorder subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java b/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
index 7c03ac03..9f3cf277 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
@@ -3,12 +3,14 @@
 import com.mopub.common.CacheService;
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.MoPub;
+import com.mopub.common.MoPubHttpUrlConnection;
 import com.mopub.common.event.EventDispatcher;
 import com.mopub.common.event.MoPubEvents;
 import com.mopub.common.factories.MethodBuilderFactory;
 import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.DateAndTime;
 import com.mopub.common.util.test.support.ShadowAsyncTasks;
+import com.mopub.common.util.test.support.ShadowMoPubHttpUrlConnection;
 import com.mopub.common.util.test.support.TestDateAndTime;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
 import com.mopub.mobileads.factories.AdViewControllerFactory;
@@ -18,11 +20,9 @@
 import com.mopub.mobileads.factories.CustomEventInterstitialFactory;
 import com.mopub.mobileads.factories.HtmlBannerWebViewFactory;
 import com.mopub.mobileads.factories.HtmlInterstitialWebViewFactory;
-import com.mopub.mobileads.factories.HttpClientFactory;
 import com.mopub.mobileads.factories.MoPubViewFactory;
 import com.mopub.mobileads.factories.MraidControllerFactory;
 import com.mopub.mobileads.factories.VastManagerFactory;
-import com.mopub.mobileads.factories.VastVideoDownloadTaskFactory;
 import com.mopub.mobileads.test.support.TestAdViewControllerFactory;
 import com.mopub.mobileads.test.support.TestCustomEventBannerAdapterFactory;
 import com.mopub.mobileads.test.support.TestCustomEventBannerFactory;
@@ -30,42 +30,37 @@
 import com.mopub.mobileads.test.support.TestCustomEventInterstitialFactory;
 import com.mopub.mobileads.test.support.TestHtmlBannerWebViewFactory;
 import com.mopub.mobileads.test.support.TestHtmlInterstitialWebViewFactory;
-import com.mopub.mobileads.test.support.TestHttpClientFactory;
 import com.mopub.mobileads.test.support.TestMoPubViewFactory;
 import com.mopub.mobileads.test.support.TestMraidControllerFactory;
 import com.mopub.mobileads.test.support.TestVastManagerFactory;
-import com.mopub.mobileads.test.support.TestVastVideoDownloadTaskFactory;
 import com.mopub.nativeads.factories.CustomEventNativeFactory;
 import com.mopub.nativeads.test.support.TestCustomEventNativeFactory;
 
 import org.junit.runners.model.InitializationError;
 import org.mockito.MockitoAnnotations;
 import org.robolectric.DefaultTestLifecycle;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RobolectricGradleTestRunner;
 import org.robolectric.TestLifecycle;
-import org.robolectric.bytecode.ClassInfo;
-import org.robolectric.bytecode.Setup;
-import org.robolectric.util.RobolectricBackgroundExecutorService;
+import org.robolectric.internal.bytecode.InstrumentationConfiguration;
+import org.robolectric.util.concurrent.RoboExecutorService;
 
 import static com.mopub.common.MoPub.LocationAwareness;
 import static org.mockito.Mockito.mock;
 
-public class SdkTestRunner extends RobolectricTestRunner {
+public class SdkTestRunner extends RobolectricGradleTestRunner {
 
     public SdkTestRunner(Class<?> testClass) throws InitializationError {
         super(testClass);
     }
 
     @Override
-    public Setup createSetup() {
-        return new Setup() {
-            @Override
-            public boolean shouldInstrument(ClassInfo classInfo) {
-                return classInfo.getName().equals(AsyncTasks.class.getName())
-                        || super.shouldInstrument(classInfo);
-            }
-        };
+    public InstrumentationConfiguration createClassLoaderConfig() {
+        InstrumentationConfiguration.Builder builder = InstrumentationConfiguration.newBuilder();
+        builder.addInstrumentedClass(AsyncTasks.class.getName());
+        builder.addInstrumentedClass(MoPubHttpUrlConnection.class.getName());
+        // To mitigate: https://github.com/robolectric/robolectric/issues/2129
+        builder.addInstrumentedPackage("org.xyz.testMp");
+        return builder.build();
     }
 
     @Override
@@ -78,7 +73,6 @@ public boolean shouldInstrument(ClassInfo classInfo) {
         public void prepareTest(Object test) {
             ClientMetadata.clearForTesting();
 
-            HttpClientFactory.setInstance(new TestHttpClientFactory());
             DateAndTime.setInstance(new TestDateAndTime());
             CustomEventBannerFactory.setInstance(new TestCustomEventBannerFactory());
             CustomEventInterstitialFactory.setInstance(new TestCustomEventInterstitialFactory());
@@ -89,21 +83,20 @@ public void prepareTest(Object test) {
             HtmlInterstitialWebViewFactory.setInstance(new TestHtmlInterstitialWebViewFactory());
             AdViewControllerFactory.setInstance(new TestAdViewControllerFactory());
             VastManagerFactory.setInstance(new TestVastManagerFactory());
-            VastVideoDownloadTaskFactory.setInstance(new TestVastVideoDownloadTaskFactory());
             MethodBuilderFactory.setInstance(new TestMethodBuilderFactory());
             CustomEventNativeFactory.setInstance(new TestCustomEventNativeFactory());
             MraidControllerFactory.setInstance(new TestMraidControllerFactory());
 
             ShadowAsyncTasks.reset();
+            ShadowMoPubHttpUrlConnection.reset();
             MoPubEvents.setEventDispatcher(mock(EventDispatcher.class));
             MoPub.setLocationAwareness(LocationAwareness.NORMAL);
             MoPub.setLocationPrecision(6);
 
             MockitoAnnotations.initMocks(test);
 
-            AsyncTasks.setExecutor(new RobolectricBackgroundExecutorService());
+            AsyncTasks.setExecutor(new RoboExecutorService());
             CacheService.clearAndNullCaches();
-            Robolectric.getFakeHttpLayer().clearPendingHttpResponses();
         }
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java
index 2bfebb20..63212fdb 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java
@@ -1,18 +1,19 @@
 package com.mopub.common.util;
 
+import android.annotation.TargetApi;
 import android.os.AsyncTask;
 import android.os.Build.VERSION_CODES;
 import android.os.Handler;
 import android.os.Looper;
 
+import com.mopub.TestSdkHelper;
 import com.mopub.mobileads.test.support.ThreadUtils;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowLooper;
 
 import java.util.concurrent.Executor;
 
@@ -37,25 +38,28 @@ protected Void doInBackground(String... strings) {
         });
     }
 
-    @Config(reportSdk = VERSION_CODES.GINGERBREAD_MR1)
     @Test
     public void safeExecuteOnExecutor_beforeHoneycomb_shouldCallExecuteWithParams() throws Exception {
+        TestSdkHelper.setReportedSdkLevel(VERSION_CODES.GINGERBREAD_MR1);
         AsyncTasks.safeExecuteOnExecutor(asyncTask, "hello");
 
         verify(asyncTask).execute(eq("hello"));
     }
 
-    @Config(reportSdk = VERSION_CODES.GINGERBREAD_MR1)
+
     @Test
     public void safeExecutorOnExecutor_beforeHoneycomb_withNullParam_shouldCallExecute() throws Exception {
+        TestSdkHelper.setReportedSdkLevel(VERSION_CODES.GINGERBREAD_MR1);
+
         AsyncTasks.safeExecuteOnExecutor(asyncTask, (String) null);
 
         verify(asyncTask).execute(eq((String) null));
     }
 
-    @Config(reportSdk = VERSION_CODES.GINGERBREAD_MR1)
+
     @Test
     public void safeExecutorOnExecutor_beforeHoneycomb_withNullAsyncTask_shouldThrowIllegalArgumentException() throws Exception {
+        TestSdkHelper.setReportedSdkLevel(VERSION_CODES.GINGERBREAD_MR1);
         try {
             AsyncTasks.safeExecuteOnExecutor(null, "hello");
             fail("Should have thrown NullPointerException");
@@ -64,31 +68,36 @@ public void safeExecutorOnExecutor_beforeHoneycomb_withNullAsyncTask_shouldThrow
         }
     }
 
-    @Config(reportSdk = VERSION_CODES.GINGERBREAD_MR1)
+
     @Test
     public void safeExecutorOnExecutor_beforeHoneycomb_runningOnABackgroundThread_shouldThrowIllegalStateException() throws Exception {
+        TestSdkHelper.setReportedSdkLevel(VERSION_CODES.GINGERBREAD_MR1);
         ensureFastFailWhenTaskIsRunOnBackgroundThread();
     }
 
-    @Config(reportSdk = VERSION_CODES.HONEYCOMB)
+
+    @TargetApi(VERSION_CODES.HONEYCOMB)
     @Test
     public void safeExecuteOnExecutor_atLeastHoneycomb_shouldCallExecuteWithParamsWithExecutor() throws Exception {
+        TestSdkHelper.setReportedSdkLevel(VERSION_CODES.HONEYCOMB);
         AsyncTasks.safeExecuteOnExecutor(asyncTask, "goodbye");
 
         verify(asyncTask).executeOnExecutor(any(Executor.class), eq("goodbye"));
     }
 
-    @Config(reportSdk = VERSION_CODES.HONEYCOMB)
+    @TargetApi(VERSION_CODES.HONEYCOMB)
     @Test
     public void safeExecutorOnExecutor_atLeastHoneycomb_withNullParam_shouldCallExecuteWithParamsWithExecutor() throws Exception {
+        TestSdkHelper.setReportedSdkLevel(VERSION_CODES.HONEYCOMB);
         AsyncTasks.safeExecuteOnExecutor(asyncTask, (String) null);
 
         verify(asyncTask).executeOnExecutor(any(Executor.class), eq((String) null));
     }
 
-    @Config(reportSdk = VERSION_CODES.HONEYCOMB)
+
     @Test
     public void safeExecutorOnExecutor_atLeastHoneycomb_withNullAsyncTask_shouldThrowIllegalArgumentException() throws Exception {
+        TestSdkHelper.setReportedSdkLevel(VERSION_CODES.HONEYCOMB);
         try {
             AsyncTasks.safeExecuteOnExecutor(null, "hello");
             fail("Should have thrown NullPointerException");
@@ -97,9 +106,10 @@ public void safeExecutorOnExecutor_atLeastHoneycomb_withNullAsyncTask_shouldThro
         }
     }
 
-    @Config(reportSdk = VERSION_CODES.HONEYCOMB)
+
     @Test
     public void safeExecutorOnExecutor_atLeastHoneycomb_runningOnABackgroundThread_shouldThrowIllegalStateException() throws Exception {
+        TestSdkHelper.setReportedSdkLevel(VERSION_CODES.HONEYCOMB);
         ensureFastFailWhenTaskIsRunOnBackgroundThread();
     }
 
@@ -124,6 +134,6 @@ public void run() {
         }).start();
 
         ThreadUtils.pause(10);
-        Robolectric.runUiThreadTasks();
+        ShadowLooper.runUiThreadTasks();
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/DeviceUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/DeviceUtilsTest.java
index 4a7bf40a..18932043 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/DeviceUtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/DeviceUtilsTest.java
@@ -1,5 +1,6 @@
 package com.mopub.common.util;
 
+import android.Manifest;
 import android.app.Activity;
 import android.content.pm.ActivityInfo;
 import android.content.res.Configuration;
@@ -8,16 +9,20 @@
 
 import com.mopub.common.CreativeOrientation;
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 import com.mopub.nativeads.test.support.MoPubShadowDisplay;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
+import org.robolectric.Shadows;
+import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class DeviceUtilsTest {
 
     private Activity testActivity;
@@ -132,4 +137,28 @@ public void lockOrientation_toPortraitWhenLandscape_shouldBeLandscape() {
         DeviceUtils.lockOrientation(testActivity, CreativeOrientation.PORTRAIT);
         assertThat(testActivity.getRequestedOrientation()).isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
     }
+
+    @Test
+    public void isPermissionGranted_withPermissionGranted_shouldReturnTrue() {
+        Shadows.shadowOf(testActivity).grantPermissions(Manifest.permission.ACCESS_FINE_LOCATION);
+
+        assertThat(DeviceUtils.isPermissionGranted(testActivity, Manifest.permission.ACCESS_FINE_LOCATION)).isTrue();
+    }
+
+    @Test
+    public void isPermissionGranted_withPermissionNotGranted_shouldReturnFalse() {
+        Shadows.shadowOf(testActivity).grantPermissions(Manifest.permission.ACCESS_COARSE_LOCATION);
+
+        assertThat(DeviceUtils.isPermissionGranted(testActivity, Manifest.permission.ACCESS_FINE_LOCATION)).isFalse();
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void isPermissionGranted_withNullContext_shouldThrowNPE() {
+        DeviceUtils.isPermissionGranted(null, Manifest.permission.INTERNET);
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void isPermissionGranted_withNullPermission_shouldThrowNPE() {
+        DeviceUtils.isPermissionGranted(testActivity, null);
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/DipsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/DipsTest.java
index c0d46973..283038e0 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/DipsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/DipsTest.java
@@ -5,16 +5,19 @@
 import android.util.DisplayMetrics;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
+import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class DipsTest {
 
     @Mock private Activity activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/FilesTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/FilesTest.java
index 0b65e22e..cffb7ace 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/FilesTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/FilesTest.java
@@ -6,6 +6,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
 
 import java.io.File;
@@ -24,7 +25,7 @@
 
     @Before
     public void setup() throws Exception {
-        activity = new Activity();
+        activity = Robolectric.buildActivity(Activity.class).create().get();
 
         expectedDirectoryPath = activity.getFilesDir() + File.separator + "testDirectory";
         expectedFilePath = activity.getFilesDir() + File.separator + "test.txt";
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java
index 94aa1180..159d9b32 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java
@@ -17,6 +17,8 @@
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
+import org.robolectric.shadows.ShadowApplication;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -42,7 +44,7 @@ public void setUp() {
     public void startActivity_withActivityContext_shouldStartActivityWithNoNewFlags() throws IntentNotResolvableException {
         Intents.startActivity(activityContext, new Intent());
 
-        final Intent intent = Robolectric.getShadowApplication().peekNextStartedActivity();
+        final Intent intent = ShadowApplication.getInstance().peekNextStartedActivity();
         assertThat(Utils.bitMaskContainsFlag(intent.getFlags(), FLAG_ACTIVITY_NEW_TASK)).isFalse();
     }
 
@@ -121,27 +123,27 @@ public void deviceCanHandleIntent_whenActivityCanNotResolveIntent_shouldReturnFa
     public void intentForNativeBrowserScheme_shouldProperlyHandleEncodedUrls() throws UrlParseException {
         Intent intent;
 
-        intent = Intents.intentForNativeBrowserScheme(Uri.parse("mopubnativebrowser://navigate?url=http%3A%2F%2Fwww.example.com"));
+        intent = Intents.intentForNativeBrowserScheme(Uri.parse("mopubnativebrowser://navigate?url=https%3A%2F%2Fwww.example.com"));
         assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
-        assertThat(intent.getDataString()).isEqualTo("http://www.example.com");
+        assertThat(intent.getDataString()).isEqualTo("https://www.example.com");
 
-        intent = Intents.intentForNativeBrowserScheme(Uri.parse("mopubnativebrowser://navigate?url=http://www.example.com/?query=1&two=2"));
+        intent = Intents.intentForNativeBrowserScheme(Uri.parse("mopubnativebrowser://navigate?url=https://www.example.com/?query=1&two=2"));
         assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
-        assertThat(intent.getDataString()).isEqualTo("http://www.example.com/?query=1");
+        assertThat(intent.getDataString()).isEqualTo("https://www.example.com/?query=1");
 
-        intent = Intents.intentForNativeBrowserScheme(Uri.parse("mopubnativebrowser://navigate?url=http%3A%2F%2Fwww.example.com%2F%3Fquery%3D1%26two%3D2"));
+        intent = Intents.intentForNativeBrowserScheme(Uri.parse("mopubnativebrowser://navigate?url=https%3A%2F%2Fwww.example.com%2F%3Fquery%3D1%26two%3D2"));
         assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
-        assertThat(intent.getDataString()).isEqualTo("http://www.example.com/?query=1&two=2");
+        assertThat(intent.getDataString()).isEqualTo("https://www.example.com/?query=1&two=2");
     }
 
     @Test(expected = UrlParseException.class)
     public void intentForNativeBrowserScheme_whenNotMoPubNativeBrowser_shouldThrowException() throws UrlParseException {
-        Intents.intentForNativeBrowserScheme(Uri.parse("mailto://navigate?url=http://www.example.com"));
+        Intents.intentForNativeBrowserScheme(Uri.parse("mailto://navigate?url=https://www.example.com"));
     }
 
     @Test(expected = UrlParseException.class)
     public void intentForNativeBrowserScheme_whenNotNavigate_shouldThrowException() throws UrlParseException {
-        Intents.intentForNativeBrowserScheme(Uri.parse("mopubnativebrowser://getout?url=http://www.example.com"));
+        Intents.intentForNativeBrowserScheme(Uri.parse("mopubnativebrowser://getout?url=https://www.example.com"));
     }
 
     @Test(expected = UrlParseException.class)
@@ -193,13 +195,55 @@ public void intentForShareTweetScheme_whenTweetIdParameterIsEmpty_shouldThrowExc
 
     @Test
     public void launchIntentForUserClick_shouldStartActivity() throws Exception {
-        Context context = Robolectric.buildActivity(Activity.class).create().get()
-                .getApplicationContext();
         Intent intent = mock(Intent.class);
 
-        Intents.launchIntentForUserClick(context, intent, null);
-        final Intent startedActivity = Robolectric.getShadowApplication().peekNextStartedActivity();
+        Intents.launchIntentForUserClick(applicationContext, intent, null);
+        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
 
         assertThat(startedActivity).isNotNull();
     }
+
+    @Test
+    public void launchApplicationUrl_withResolvableUrl_shouldOpenActivity() throws Exception {
+        final String url = "url_to_installed_app";
+        makeUrlResolvable(url);
+
+        Intents.launchApplicationUrl(activityContext, Uri.parse(url));
+        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
+
+        assertThat(startedActivity).isNotNull();
+    }
+
+    @Test(expected = IntentNotResolvableException.class)
+    public void launchApplicationUrl_withUnresolvableUrl_shouldThrowIntentNotResolvableException() throws Exception {
+        final String url = "url_to_installed_app";
+
+        Intents.launchApplicationUrl(activityContext, Uri.parse(url));
+        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
+
+        assertThat(startedActivity).isNull();
+    }
+
+    @Test
+    public void getPlayStoreUri_shouldBuildUriFromIntentPackage() throws Exception {
+        final Intent intent = new Intent();
+        final String appPackage = "com.mopub.test";
+        intent.setPackage(appPackage);
+
+        assertThat(Intents.getPlayStoreUri(intent).toString()).isEqualTo("market://details?id="
+                + appPackage);
+    }
+
+    @Test
+    public void getPlayStoreUri_shouldNotBlowUpWithEmptyPackage() throws Exception {
+        final Intent intent = new Intent();
+
+        assertThat(Intents.getPlayStoreUri(intent).toString())
+                .isEqualTo("market://details?id=null");
+    }
+
+    private void makeUrlResolvable(String url) {
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(
+                new Intent(Intent.ACTION_VIEW, Uri.parse(url)), new ResolveInfo());
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/JsonTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/JsonTest.java
index 8636e84e..3c4bbd4f 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/JsonTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/JsonTest.java
@@ -1,10 +1,12 @@
 package com.mopub.common.util;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -12,6 +14,7 @@
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class JsonTest {
     private Map<String,String> expectedMap;
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
index 9bfa41ec..8db4a294 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
@@ -9,6 +9,7 @@
 import android.content.pm.ResolveInfo;
 import android.os.Build;
 
+import com.mopub.TestSdkHelper;
 import com.mopub.common.MoPubBrowser;
 import com.mopub.mobileads.MoPubActivity;
 import com.mopub.mobileads.MraidActivity;
@@ -23,7 +24,7 @@
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.shadows.ShadowLog;
 import org.robolectric.shadows.ShadowToast;
 
@@ -93,10 +94,10 @@ public void checkNativeSdkActivitiesDeclared_shouldIncludeOneActivityDeclaration
 
     @Test
     public void displayWarningForMissingActivities_withAllActivitiesDeclared_shouldNotShowLogOrToast() throws Exception {
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MraidActivity.class), mockResolveInfo);
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubBrowser.class), mockResolveInfo);
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidActivity.class), mockResolveInfo);
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubBrowser.class), mockResolveInfo);
 
         ShadowLog.setupLogging();
         setDebugMode(true);
@@ -109,9 +110,9 @@ public void displayWarningForMissingActivities_withAllActivitiesDeclared_shouldN
 
     @Test
      public void displayWarningForMissingActivities_withOneMissingActivity_shouldLogOnlyThatOne() throws Exception {
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MraidActivity.class), mockResolveInfo);
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidActivity.class), mockResolveInfo);
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
         // Here, we leave out MoPubBrowser on purpose
 
         ShadowLog.setupLogging();
@@ -173,10 +174,10 @@ public void displayWarningForMisconfiguredActivities_withAllActivitiesConfigured
         when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_SCREEN_SIZE))).thenReturn(true);
         ManifestUtils.setFlagCheckUtil(mockActivitiyConfigCheck);
 
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MraidActivity.class), mockResolveInfo);
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubBrowser.class), mockResolveInfo);
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidActivity.class), mockResolveInfo);
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubBrowser.class), mockResolveInfo);
 
         ShadowLog.setupLogging();
         setDebugMode(true);
@@ -206,10 +207,10 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
         when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_SCREEN_SIZE))).thenReturn(true);
         ManifestUtils.setFlagCheckUtil(mockActivitiyConfigCheck);
 
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MraidActivity.class), mockResolveInfo);
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubBrowser.class), mockResolveInfo);
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidActivity.class), mockResolveInfo);
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubBrowser.class), mockResolveInfo);
 
         ShadowLog.setupLogging();
 
@@ -237,7 +238,7 @@ public void displayWarningForMisconfiguredActivities_withOneMisconfiguredActivit
         when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_SCREEN_SIZE))).thenReturn(false);
         ManifestUtils.setFlagCheckUtil(mockActivitiyConfigCheck);
 
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
 
         ShadowLog.setupLogging();
 
@@ -249,17 +250,18 @@ public void displayWarningForMisconfiguredActivities_withOneMisconfiguredActivit
     }
 
     @SuppressWarnings("unchecked")
-    @Config(reportSdk = Build.VERSION_CODES.HONEYCOMB_MR1)
+
     @TargetApi(13)
     @Test
     public void displayWarningForMisconfiguredActivities_withMissingScreenSize_withApiLessThan13_shouldNotLogOrShowToast() throws Exception {
+        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.HONEYCOMB);
         ManifestUtils.FlagCheckUtil mockActivitiyConfigCheck = mock(ManifestUtils.FlagCheckUtil.class);
         when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_KEYBOARD_HIDDEN))).thenReturn(true);
         when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_ORIENTATION))).thenReturn(true);
         when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_SCREEN_SIZE))).thenReturn(false);
         ManifestUtils.setFlagCheckUtil(mockActivitiyConfigCheck);
 
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
 
         ShadowLog.setupLogging();
         setDebugMode(true);
@@ -285,7 +287,7 @@ public void displayWarningForMisconfiguredActivities_withMissingScreenSize_withT
         when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_SCREEN_SIZE))).thenReturn(false);
         ManifestUtils.setFlagCheckUtil(mockActivitiyConfigCheck);
 
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
 
         ShadowLog.setupLogging();
         setDebugMode(true);
@@ -306,7 +308,7 @@ public void displayWarningForMisconfiguredActivities_withMisconfiguredActivities
         when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_SCREEN_SIZE))).thenReturn(false);
         ManifestUtils.setFlagCheckUtil(mockActivitiyConfigCheck);
 
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
 
         setDebugMode(true);
 
@@ -327,7 +329,7 @@ public void displayWarningForMisconfiguredActivities_withMisconfiguredActivities
         when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_SCREEN_SIZE))).thenReturn(false);
         ManifestUtils.setFlagCheckUtil(mockActivitiyConfigCheck);
 
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
 
         setDebugMode(false);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/UtilsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/UtilsTest.java
index 384e40b8..0bb01118 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/UtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/UtilsTest.java
@@ -1,9 +1,11 @@
 package com.mopub.common.util;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
 
 import java.util.HashSet;
 import java.util.Set;
@@ -11,6 +13,7 @@
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class UtilsTest {
     @Test
     public void generateUniqueId_withMultipleInvocations_shouldReturnUniqueValues() throws Exception {
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/VersionCodeTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/VersionCodeTest.java
index c42a0681..2dcaa3fd 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/VersionCodeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/VersionCodeTest.java
@@ -4,8 +4,8 @@
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.util.ReflectionHelpers;
 
 import static com.mopub.common.util.VersionCode.BASE;
 import static com.mopub.common.util.VersionCode.CUR_DEVELOPMENT;
@@ -19,19 +19,19 @@
 public class VersionCodeTest {
     @Test
     public void currentApiLevel_shouldReflectActualApiLevel() throws Exception {
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", 4);
+        ReflectionHelpers.setStaticField(Build.VERSION.class, "SDK_INT", 4);
         assertThat(VersionCode.currentApiLevel()).isEqualTo(DONUT);
 
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", 8);
+        ReflectionHelpers.setStaticField(Build.VERSION.class, "SDK_INT", 8);
         assertThat(VersionCode.currentApiLevel()).isEqualTo(FROYO);
 
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", 14);
+        ReflectionHelpers.setStaticField(Build.VERSION.class, "SDK_INT", 14);
         assertThat(VersionCode.currentApiLevel()).isEqualTo(ICE_CREAM_SANDWICH);
     }
 
     @Test
     public void currentApiLevel_whenUnknownApiLevel_shouldReturnCurDevelopment() throws Exception {
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", 900);
+        ReflectionHelpers.setStaticField(Build.VERSION.class, "SDK_INT", 900);
         assertThat(VersionCode.currentApiLevel()).isEqualTo(CUR_DEVELOPMENT);
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/VisibilityTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/VisibilityTest.java
index 0aa6f25d..81810ae6 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/VisibilityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/VisibilityTest.java
@@ -3,13 +3,16 @@
 import android.view.View;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class VisibilityTest {
     @Test
     public void isScreenVisible_shouldOnlyReturnTrueForViewVisible() throws Exception {
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowMoPubHttpUrlConnection.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowMoPubHttpUrlConnection.java
new file mode 100644
index 00000000..7ae73832
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowMoPubHttpUrlConnection.java
@@ -0,0 +1,79 @@
+package com.mopub.common.util.test.support;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.MoPubHttpUrlConnection;
+
+import org.robolectric.annotation.Implementation;
+import org.robolectric.annotation.Implements;
+
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.util.ArrayDeque;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Queue;
+
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+@Implements(MoPubHttpUrlConnection.class)
+public abstract class ShadowMoPubHttpUrlConnection extends HttpURLConnection {
+    private static String sLatestRequestUrl;
+    private static final Queue<HttpURLConnection> sPendingUrlConnections =
+            new ArrayDeque<HttpURLConnection>();
+
+    private ShadowMoPubHttpUrlConnection(URL url) {
+        super(url);
+    }
+
+    public static void reset() {
+        sPendingUrlConnections.clear();
+    }
+
+    @Implementation
+    @Nullable
+    public static HttpURLConnection getHttpUrlConnection(@NonNull final String url)
+            throws IOException {
+        sLatestRequestUrl = url;
+
+        return sPendingUrlConnections.poll();
+    }
+
+    public static void addPendingResponse(final int statusCode, @NonNull final String response)
+            throws IOException {
+        addPendingResponse(statusCode, response, new HashMap<String, List<String>>());
+    }
+
+    public static void addPendingResponse(final int statusCode, @NonNull final String response,
+            @NonNull final Map<String, List<String>> headers) throws IOException {
+        final byte[] bytes = response.getBytes();
+        HttpURLConnection mockUrlConnection = mock(HttpURLConnection.class);
+
+        when(mockUrlConnection.getInputStream()).thenReturn(
+                new ByteArrayInputStream(bytes));
+        when(mockUrlConnection.getContentLength()).thenReturn(bytes.length);
+        when(mockUrlConnection.getResponseCode()).thenReturn(statusCode);
+        when(mockUrlConnection.getHeaderFields()).thenReturn(headers);
+
+        for (final Map.Entry<String, List<String>> entry : headers.entrySet()) {
+            when(mockUrlConnection.getHeaderField(entry.getKey())).thenReturn(entry.getValue().get(0));
+        }
+
+        sPendingUrlConnections.add(mockUrlConnection);
+    }
+
+    @NonNull
+    public static Queue getPendingUrlConnections() {
+        return sPendingUrlConnections;
+    }
+
+    @Nullable
+    public static String getLatestRequestUrl() {
+        return sLatestRequestUrl;
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertGestureListenerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertGestureListenerTest.java
index 09ae4f1d..cd34ddc2 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertGestureListenerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertGestureListenerTest.java
@@ -12,6 +12,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
+import org.robolectric.annotation.Config;
 
 import static com.mopub.mobileads.AdAlertGestureListener.ZigZagState.FAILED;
 import static com.mopub.mobileads.AdAlertGestureListener.ZigZagState.FINISHED;
@@ -22,6 +23,7 @@
 import static org.mockito.Mockito.stub;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class AdAlertGestureListenerTest {
     @Mock
     private View mockView;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
index d199d9f8..da4c0bb0 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
@@ -18,6 +18,8 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowApplication;
 
 import java.io.File;
 import java.io.FileOutputStream;
@@ -35,6 +37,7 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class AdAlertReporterTest {
     private final static String EMAIL_ADDRESS = "creative-review@mopub.com";
     private AdAlertReporter subject;
@@ -193,7 +196,7 @@ public void send_shouldCreateEmailChooserIntent() throws Exception {
         subject = new AdAlertReporter(Robolectric.buildActivity(Activity.class).create().get(), mockView, mockAdReport);
         subject.send();
 
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(intent.getAction()).isEqualTo(Intent.ACTION_CHOOSER);
         assertThat(intent.getStringExtra(Intent.EXTRA_TITLE)).isEqualTo("Send Email...");
         assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoaderTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoaderTest.java
deleted file mode 100644
index 8f8639da..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoaderTest.java
+++ /dev/null
@@ -1,140 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.network.AdResponse;
-
-import org.fest.assertions.core.Condition;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.anyMapOf;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.verifyZeroInteractions;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-public class AdLoaderTest {
-
-    @Mock
-    private AdViewController adViewController;
-    @Mock
-    private MoPubView moPubView;
-    private AdResponse adResponse;
-    private Map<String, String> serverExtras;
-
-    @Before
-    public void setup() {
-        adResponse = new AdResponse.Builder()
-                .setResponseBody("<html></html>")
-                .setClickTrackingUrl("clickthrough")
-                .setRedirectUrl("redirect")
-                .setScrollable(false)
-                .build();
-        serverExtras = new HashMap<String, String>();
-        serverExtras.put("test", "hi");
-        when(adViewController.getMoPubView()).thenReturn(moPubView);
-    }
-
-    @Test
-    public void fromAdResponse_whenCustomEvent_shouldCreateAdLoadTask() throws Exception {
-        adResponse = adResponse.toBuilder()
-                .setAdType("custom")
-                .setCustomEventClassName("custom event name")
-                .setServerExtras(serverExtras)
-                .build();
-
-
-        AdLoader.CustomEventAdLoader customEventTask = (AdLoader.CustomEventAdLoader) AdLoader.fromAdResponse(adResponse, adViewController);
-        assertThat(customEventTask).isNotNull();
-        assertThat(customEventTask.getServerExtras()).isEqualTo(serverExtras);
-    }
-
-
-    @Test
-    public void fromAdResponse_whenHtml_shouldBeModernAdLoadTask() {
-        adResponse = adResponse.toBuilder()
-                .setAdType("html")
-                .setCustomEventClassName("com.mopub.mobileads.HtmlBanner")
-                .setServerExtras(serverExtras)
-                .build();
-
-        AdLoader.CustomEventAdLoader customEventTask = (AdLoader.CustomEventAdLoader) AdLoader.fromAdResponse(adResponse, adViewController);
-        assertThat(customEventTask).isNotNull();
-        assertThat(customEventTask.getServerExtras()).has(new Condition<Map<String, String>>() {
-            @Override
-            public boolean matches(final Map<String, String> stringStringMap) {
-                return stringStringMap.containsKey("test");
-            }
-        });
-    }
-
-    @Test
-    public void fromAdResponse_whenCustomMethod_shouldReturnNull() {
-        adResponse = adResponse.toBuilder()
-                .setCustomEventClassName(null)
-                .build();
-
-        assertThat(AdLoader.fromAdResponse(adResponse, adViewController)).isNull();
-    }
-
-    @Test
-    public void load_shouldCallAdViewController() {
-        adResponse = adResponse.toBuilder()
-                .setAdType("custom")
-                .setCustomEventClassName("custom event name")
-                .setServerExtras(serverExtras)
-                .build();
-
-
-        AdLoader.CustomEventAdLoader customEventTask = (AdLoader.CustomEventAdLoader) AdLoader.fromAdResponse(adResponse, adViewController);
-
-        customEventTask.load();
-        verify(adViewController).getMoPubView();
-        verify(moPubView).loadCustomEvent(eq("custom event name"), anyMapOf(String.class, String.class));
-    }
-
-    @Test
-    public void load_controllerDestroyed_shouldDoNothing() {
-        when(adViewController.isDestroyed()).thenReturn(true);
-
-        adResponse = adResponse.toBuilder()
-                .setAdType("custom")
-                .setCustomEventClassName("custom event name")
-                .setServerExtras(serverExtras)
-                .build();
-
-
-        AdLoader.CustomEventAdLoader customEventTask = (AdLoader.CustomEventAdLoader) AdLoader.fromAdResponse(adResponse, adViewController);
-
-        customEventTask.load();
-        verify(adViewController).isDestroyed();
-        verifyNoMoreInteractions(adViewController);
-        verifyZeroInteractions(moPubView);
-    }
-
-    @Test
-    public void load_withNullMoPubView_shouldDoNothing() throws Exception {
-        when(adViewController.getMoPubView()).thenReturn(null);
-
-        adResponse = adResponse.toBuilder()
-                .setAdType("custom")
-                .setCustomEventClassName("custom event name")
-                .setServerExtras(serverExtras)
-                .build();
-
-        AdLoader.CustomEventAdLoader customEventTask = (AdLoader.CustomEventAdLoader) AdLoader.fromAdResponse(adResponse, adViewController);
-
-        customEventTask.load();
-
-        verify(adViewController).getMoPubView();
-        verifyZeroInteractions(moPubView);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdRequestStatusMappingTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdRequestStatusMappingTest.java
index b82dcbe8..bc66ea83 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdRequestStatusMappingTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdRequestStatusMappingTest.java
@@ -5,10 +5,12 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class AdRequestStatusMappingTest {
     private AdRequestStatusMapping subject;
     private String key1;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
index 2d782a64..64071c25 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
@@ -12,6 +12,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 
 import java.util.HashMap;
 
@@ -20,6 +21,7 @@
 import static org.mockito.Mockito.stub;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class AdTypeTranslatorTest {
     private String customEventName;
     private MoPubView moPubView;
@@ -118,7 +120,7 @@ public void getCustomEventName_whenNameNotInHeaders_shouldBeNull() {
 
     @Test
     public void getCustomEventName_withNativeFormat_shouldBeMoPubNative() {
-        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.NATIVE, AdType.NATIVE, null, headers);
+        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.NATIVE, AdType.STATIC_NATIVE, null, headers);
 
         assertThat(customEventName).isEqualTo("com.mopub.nativeads.MoPubCustomEventNative");
     }
@@ -129,4 +131,12 @@ public void getCustomEventName_whenInvalidAdTypeAndInvalidFullAdType_shouldRetur
                 headers);
         assertThat(customEventName).isNull();
     }
+
+    @Test
+    public void getCustomEventName_withRewardedVideoFormat_shouldBeMoPubRewardedVideo() {
+        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.REWARDED_VIDEO,
+                AdType.REWARDED_VIDEO, null, headers);
+
+        assertThat(customEventName).isEqualTo("com.mopub.mobileads.MoPubRewardedVideo");
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
index aad6cc28..9728aa1b 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
@@ -30,12 +30,19 @@
 import org.mockito.ArgumentCaptor;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
+import org.robolectric.RuntimeEnvironment;
+import org.robolectric.Shadows;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowLooper;
 
 import java.util.Collections;
+import java.util.Map;
 
 import static com.mopub.common.VolleyRequestMatcher.isUrl;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyMap;
+import static org.mockito.Matchers.anyString;
 import static org.mockito.Matchers.argThat;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
@@ -46,19 +53,18 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyZeroInteractions;
 import static org.mockito.Mockito.when;
-import static org.robolectric.Robolectric.shadowOf;
+
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class AdViewControllerTest {
 
     private static final int[] HTML_ERROR_CODES = new int[]{400, 401, 402, 403, 404, 405, 407, 408,
             409, 410, 411, 412, 413, 414, 415, 416, 417, 500, 501, 502, 503, 504, 505};
 
     private AdViewController subject;
-    @Mock
-    private MoPubView mockMoPubView;
-    @Mock
-    private MoPubRequestQueue mockRequestQueue;
+    @Mock private MoPubView mockMoPubView;
+    @Mock private MoPubRequestQueue mockRequestQueue;
     private Reflection.MethodBuilder methodBuilder;
 
     private AdResponse response;
@@ -67,7 +73,7 @@
     @Before
     public void setup() {
         activity = Robolectric.buildActivity(Activity.class).create().get();
-        shadowOf(activity).grantPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE);
+        Shadows.shadowOf(activity).grantPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE);
 
         when(mockMoPubView.getAdFormat()).thenReturn(AdFormat.BANNER);
         when(mockMoPubView.getContext()).thenReturn(activity);
@@ -106,25 +112,25 @@ public void cleanup_shouldNotHoldViewOrUrlGenerator() {
 
     @Test
     public void adDidFail_shouldScheduleRefreshTimer_shouldCallMoPubViewAdFailed() throws Exception {
-        Robolectric.pauseMainLooper();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+        ShadowLooper.pauseMainLooper();
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
 
         subject.adDidFail(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
 
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
         verify(mockMoPubView).adFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
     }
 
     @Test
     public void adDidFail_withNullMoPubView_shouldNotScheduleRefreshTimer_shouldNotCallMoPubViewAdFailed() throws Exception {
-        Robolectric.pauseMainLooper();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+        ShadowLooper.pauseMainLooper();
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
 
         // This sets the MoPubView to null
         subject.cleanup();
         subject.adDidFail(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
 
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
         verify(mockMoPubView, never()).adFailed(any(MoPubErrorCode.class));
     }
 
@@ -133,40 +139,40 @@ public void adDidFail_withNullMoPubView_shouldNotScheduleRefreshTimer_shouldNotC
     public void scheduleRefreshTimer_shouldNotScheduleIfRefreshTimeIsNull() throws Exception {
         response = response.toBuilder().setRefreshTimeMilliseconds(null).build();
         subject.onAdLoadSuccess(response);
-        Robolectric.pauseMainLooper();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+        ShadowLooper.pauseMainLooper();
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
 
         subject.scheduleRefreshTimerIfEnabled();
 
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
     }
 
     @Test
     public void scheduleRefreshTimer_shouldNotScheduleIfRefreshTimeIsZero() {
         response = response.toBuilder().setRefreshTimeMilliseconds(0).build();
         subject.onAdLoadSuccess(response);
-        Robolectric.pauseMainLooper();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+        ShadowLooper.pauseMainLooper();
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
 
         subject.scheduleRefreshTimerIfEnabled();
 
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
     }
 
     @Test
     public void scheduleRefreshTimerIfEnabled_shouldCancelOldRefreshAndScheduleANewOne() throws Exception {
         response = response.toBuilder().setRefreshTimeMilliseconds(30).build();
         subject.onAdLoadSuccess(response);
-        Robolectric.pauseMainLooper();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+        ShadowLooper.pauseMainLooper();
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
 
         subject.scheduleRefreshTimerIfEnabled();
 
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
 
         subject.scheduleRefreshTimerIfEnabled();
 
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
     }
 
     @Test
@@ -174,29 +180,29 @@ public void scheduleRefreshTimer_shouldNotScheduleRefreshIfAutorefreshIsOff() th
         response = response.toBuilder().setRefreshTimeMilliseconds(30).build();
         subject.onAdLoadSuccess(response);
 
-        Robolectric.pauseMainLooper();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+        ShadowLooper.pauseMainLooper();
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
 
         subject.forceSetAutorefreshEnabled(false);
 
         subject.scheduleRefreshTimerIfEnabled();
 
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
     }
 
     @Test
     public void scheduleRefreshTimer_whenAdViewControllerNotConfiguredByResponse_shouldHaveDefaultRefreshTime() throws Exception {
-        Robolectric.pauseMainLooper();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+        ShadowLooper.pauseMainLooper();
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
 
         subject.scheduleRefreshTimerIfEnabled();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
 
-        Robolectric.idleMainLooper(AdViewController.DEFAULT_REFRESH_TIME_MILLISECONDS - 1);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+        ShadowLooper.idleMainLooper(AdViewController.DEFAULT_REFRESH_TIME_MILLISECONDS - 1);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
 
-        Robolectric.idleMainLooper(1);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+        ShadowLooper.idleMainLooper(1);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
     }
 
     @Test
@@ -260,14 +266,14 @@ public void enablingAutoRefresh_withoutCallingLoadAd_shouldNotScheduleNewRefresh
     public void disablingAutoRefresh_shouldCancelRefreshTimers() throws Exception {
         response = response.toBuilder().setRefreshTimeMilliseconds(30).build();
         subject.onAdLoadSuccess(response);
-        Robolectric.pauseMainLooper();
+        ShadowLooper.pauseMainLooper();
 
         subject.loadAd();
         subject.forceSetAutorefreshEnabled(true);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
 
         subject.forceSetAutorefreshEnabled(false);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
     }
 
     @Test
@@ -308,8 +314,9 @@ public void fetchAd_withNullMoPubView_shouldNotMakeRequest() throws Exception {
 
     @Test
     public void loadAd_shouldNotLoadWithoutConnectivity() throws Exception {
-        ConnectivityManager connectivityManager = (ConnectivityManager) Robolectric.application.getSystemService(Context.CONNECTIVITY_SERVICE);
-        shadowOf(connectivityManager.getActiveNetworkInfo()).setConnectionStatus(false);
+        ConnectivityManager connectivityManager = (ConnectivityManager) RuntimeEnvironment.application.getSystemService(Context.CONNECTIVITY_SERVICE);
+        Shadows.shadowOf(connectivityManager.getActiveNetworkInfo()).setConnectionStatus(false);
+        subject.setAdUnitId("adunit");
 
         subject.loadAd();
         verifyZeroInteractions(mockRequestQueue);
@@ -324,7 +331,7 @@ public void loadAd_shouldNotLoadUrlIfAdUnitIdIsNull() throws Exception {
 
     @Test
     public void loadNonJavascript_shouldFetchAd() throws Exception {
-        String url = "http://www.guy.com";
+        String url = "https://www.guy.com";
         subject.loadNonJavascript(url);
 
         verify(mockRequestQueue).add(argThat(isUrl(url)));
@@ -332,7 +339,7 @@ public void loadNonJavascript_shouldFetchAd() throws Exception {
 
     @Test
     public void loadNonJavascript_whenAlreadyLoading_shouldNotFetchAd() throws Exception {
-        String url = "http://www.guy.com";
+        String url = "https://www.guy.com";
         subject.loadNonJavascript(url);
         reset(mockRequestQueue);
         subject.loadNonJavascript(url);
@@ -348,7 +355,7 @@ public void loadNonJavascript_shouldAcceptNullParameter() throws Exception {
 
     @Test
     public void reload_shouldReuseOldUrl() throws Exception {
-        String url = "http://www.guy.com";
+        String url = "https://www.guy.com";
         subject.loadNonJavascript(url);
         subject.setNotLoading();
         reset(mockRequestQueue);
@@ -394,7 +401,7 @@ public void run() {
             }
         }).start();
         ThreadUtils.pause(100);
-        Robolectric.runUiThreadTasks();
+        ShadowLooper.runUiThreadTasks();
 
         verify(mockMoPubView).removeAllViews();
         ArgumentCaptor<FrameLayout.LayoutParams> layoutParamsCaptor = ArgumentCaptor.forClass(FrameLayout.LayoutParams.class);
@@ -420,7 +427,7 @@ public void run() {
             }
         }).start();
         ThreadUtils.pause(10);
-        Robolectric.runUiThreadTasks();
+        ShadowLooper.runUiThreadTasks();
 
         verify(mockMoPubView, never()).removeAllViews();
         verify(mockMoPubView, never()).addView(any(View.class), any(FrameLayout.LayoutParams.class));
@@ -566,6 +573,32 @@ public void onAdLoadError_withInvalidServerResponse_shouldReturnErrorCodeServerE
         verify(mockMoPubView, times(HTML_ERROR_CODES.length)).adFailed(MoPubErrorCode.SERVER_ERROR);
     }
 
+    @Test
+    public void loadCustomEvent_shouldCallMoPubViewLoadCustomEvent() throws Exception {
+        Map serverExtras = mock(Map.class);
+        String customEventClassName = "customEventClassName";
+        subject.loadCustomEvent(mockMoPubView, customEventClassName, serverExtras);
+
+        verify(mockMoPubView).loadCustomEvent(customEventClassName, serverExtras);
+    }
+
+    @Test
+    public void loadCustomEvent_withNullMoPubView_shouldNotCallMoPubViewLoadCustomEvent() throws Exception {
+        Map serverExtras = mock(Map.class);
+        String customEventClassName = "customEventClassName";
+        subject.loadCustomEvent(null, customEventClassName, serverExtras);
+
+        verify(mockMoPubView, never()).loadCustomEvent(anyString(), anyMap());
+    }
+
+    @Test
+    public void loadCustomEvent_withNullCustomEventClassName_shouldCallMoPubViewLoadCustomEvent() throws Exception {
+        Map serverExtras = mock(Map.class);
+        subject.loadCustomEvent(mockMoPubView, null, serverExtras);
+
+        verify(mockMoPubView).loadCustomEvent(null, serverExtras);
+    }
+
     @Test
     public void getErrorCodeFromVolleyError_whenNoConnection_shouldReturnErrorCodeNoConnection() {
         final VolleyError noConnectionError = new NoConnectionError();
@@ -582,7 +615,7 @@ public void getErrorCodeFromVolleyError_whenNoConnection_shouldReturnErrorCodeNo
     public void getErrorCodeFromVolleyError_withNullResponse_whenConnectionValid_shouldReturnErrorCodeUnspecified() {
         final VolleyError noConnectionError = new NoConnectionError();
 
-        shadowOf(activity).grantPermissions(Manifest.permission.INTERNET);
+        Shadows.shadowOf(activity).grantPermissions(Manifest.permission.INTERNET);
         final MoPubErrorCode errorCode = AdViewController.getErrorCodeFromVolleyError(
                 noConnectionError, activity);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java
index 18e64903..d1d56c5c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java
@@ -6,6 +6,7 @@
 import android.view.View;
 import android.view.ViewGroup;
 
+import com.mopub.TestSdkHelper;
 import com.mopub.common.AdReport;
 import com.mopub.common.test.support.SdkTestRunner;
 
@@ -14,6 +15,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
+import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowWebView;
 
@@ -22,9 +24,9 @@
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
-import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class BaseHtmlWebViewTest {
 
     @Mock
@@ -32,29 +34,30 @@
     private BaseHtmlWebView subject;
     private MotionEvent touchDown;
     private MotionEvent touchUp;
+    private Activity testActivity;
 
     @Before
     public void setUp() throws Exception {
-        subject = new BaseHtmlWebView(Robolectric.buildActivity(Activity.class).create().get(), mockAdReport);
+        testActivity = Robolectric.buildActivity(Activity.class).create().get();
+        subject = new BaseHtmlWebView(testActivity, mockAdReport);
 
         touchDown = createMotionEvent(MotionEvent.ACTION_DOWN);
         touchUp = createMotionEvent(MotionEvent.ACTION_UP);
     }
 
-    @Config(reportSdk = VERSION_CODES.JELLY_BEAN_MR2)
+    @Config(sdk = VERSION_CODES.JELLY_BEAN_MR2)
     @Test
     public void pluginState_atLeastJellybeanMr2_shouldDefaultToOff_shouldNeverBeEnabled()  {
-        subject = new BaseHtmlWebView(Robolectric.buildActivity(Activity.class).create().get(), mockAdReport);
         assertThat(subject.getSettings().getPluginState()).isEqualTo(PluginState.OFF);
 
         subject.enablePlugins(true);
         assertThat(subject.getSettings().getPluginState()).isEqualTo(PluginState.OFF);
     }
 
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void pluginState_atLeastIcsButBelowJellybeanMr2_shouldDefaultToOn_shouldAllowToggling() {
-        subject = new BaseHtmlWebView(Robolectric.buildActivity(Activity.class).create().get(), mockAdReport);
+        TestSdkHelper.setReportedSdkLevel(VERSION_CODES.ICE_CREAM_SANDWICH);
+        subject = new BaseHtmlWebView(testActivity, mockAdReport);
         assertThat(subject.getSettings().getPluginState()).isEqualTo(PluginState.ON);
 
         subject.enablePlugins(false);
@@ -64,10 +67,11 @@ public void pluginState_atLeastIcsButBelowJellybeanMr2_shouldDefaultToOn_shouldA
         assertThat(subject.getSettings().getPluginState()).isEqualTo(PluginState.ON);
     }
 
-    @Config(reportSdk = VERSION_CODES.GINGERBREAD_MR1)
     @Test
     public void pluginState_beforeIcs_shouldDefaultToOff_shouldAllowToggling() {
-        subject = new BaseHtmlWebView(Robolectric.buildActivity(Activity.class).create().get(), mockAdReport);
+        TestSdkHelper.setReportedSdkLevel(VERSION_CODES.GINGERBREAD_MR1);
+
+        subject = new BaseHtmlWebView(testActivity, mockAdReport);
         assertThat(subject.getSettings().getPluginState()).isEqualTo(PluginState.OFF);
 
         subject.enablePlugins(true);
@@ -80,10 +84,10 @@ public void pluginState_beforeIcs_shouldDefaultToOff_shouldAllowToggling() {
     @Test
     public void init_shouldSetWebViewScrollability() throws Exception {
         subject.init(false);
-        assertThat(shadowOf(subject).getOnTouchListener()).isNotNull();
+        assertThat(Shadows.shadowOf(subject).getOnTouchListener()).isNotNull();
 
         subject.init(true);
-        assertThat(shadowOf(subject).getOnTouchListener()).isNotNull();
+        assertThat(Shadows.shadowOf(subject).getOnTouchListener()).isNotNull();
     }
 
     @Test
@@ -97,7 +101,7 @@ public void loadUrl_whenUrlIsJavascript_shouldCallSuperLoadUrl() throws Exceptio
         String javascriptUrl = "javascript:function() {alert(\"guy\")};";
         subject.loadUrl(javascriptUrl);
 
-        assertThat(shadowOf(subject).getLastLoadedUrl()).isEqualTo(javascriptUrl);
+        assertThat(Shadows.shadowOf(subject).getLastLoadedUrl()).isEqualTo(javascriptUrl);
     }
 
     @Test
@@ -105,7 +109,7 @@ public void loadHtmlResponse_shouldCallLoadDataWithBaseURL() throws Exception {
         String htmlResponse = "some random html response";
         subject.loadHtmlResponse(htmlResponse);
 
-        ShadowWebView.LoadDataWithBaseURL lastLoadData = shadowOf(subject).getLastLoadDataWithBaseURL();
+        ShadowWebView.LoadDataWithBaseURL lastLoadData = Shadows.shadowOf(subject).getLastLoadDataWithBaseURL();
         assertThat(lastLoadData.baseUrl).isEqualTo("http://ads.mopub.com/");
         assertThat(lastLoadData.data).isEqualTo(htmlResponse);
         assertThat(lastLoadData.mimeType).isEqualTo("text/html");
@@ -118,7 +122,7 @@ public void sendTouchEvent_withScrollingDisabled_shouldSetUserClicked() throws E
         assertThat(subject.wasClicked()).isFalse();
 
         subject.initializeOnTouchListener(false);
-        View.OnTouchListener onTouchListener = shadowOf(subject).getOnTouchListener();
+        View.OnTouchListener onTouchListener = Shadows.shadowOf(subject).getOnTouchListener();
 
         onTouchListener.onTouch(subject, touchUp);
         assertThat(subject.wasClicked()).isTrue();
@@ -129,7 +133,7 @@ public void sendTouchEvent_withScrollingEnabled_shouldSetUserClicked() throws Ex
         assertThat(subject.wasClicked()).isFalse();
 
         subject.initializeOnTouchListener(true);
-        View.OnTouchListener onTouchListener = shadowOf(subject).getOnTouchListener();
+        View.OnTouchListener onTouchListener = Shadows.shadowOf(subject).getOnTouchListener();
 
         onTouchListener.onTouch(subject, touchUp);
         assertThat(subject.wasClicked()).isTrue();
@@ -138,7 +142,7 @@ public void sendTouchEvent_withScrollingEnabled_shouldSetUserClicked() throws Ex
     @Test
     public void sendTouchEvent_withScrollingDisabled_withLotsOfRandomMotionEvents_shouldEventuallySetUserClicked() throws Exception {
         subject.initializeOnTouchListener(false);
-        View.OnTouchListener onTouchListener = shadowOf(subject).getOnTouchListener();
+        View.OnTouchListener onTouchListener = Shadows.shadowOf(subject).getOnTouchListener();
 
         onTouchListener.onTouch(subject, touchDown);
         assertThat(subject.wasClicked()).isFalse();
@@ -161,7 +165,7 @@ public void sendTouchEvent_withScrollingDisabled_withLotsOfRandomMotionEvents_sh
     @Test
     public void sendTouchEvent_withScrollingEnabled_withLotsOfRandomMotionEvents_shouldEventuallySetUserClicked() throws Exception {
         subject.initializeOnTouchListener(true);
-        View.OnTouchListener onTouchListener = shadowOf(subject).getOnTouchListener();
+        View.OnTouchListener onTouchListener = Shadows.shadowOf(subject).getOnTouchListener();
 
         onTouchListener.onTouch(subject, touchDown);
         assertThat(subject.wasClicked()).isFalse();
@@ -184,7 +188,7 @@ public void sendTouchEvent_withScrollingEnabled_withLotsOfRandomMotionEvents_sho
     @Test
     public void onResetClicked_shouldonResetClicked() throws Exception {
         subject.initializeOnTouchListener(false);
-        View.OnTouchListener onTouchListener = shadowOf(subject).getOnTouchListener();
+        View.OnTouchListener onTouchListener = Shadows.shadowOf(subject).getOnTouchListener();
 
         onTouchListener.onTouch(subject, touchDown);
         onTouchListener.onTouch(subject, touchUp);
@@ -207,7 +211,7 @@ public void onResetClicked_whenTouchStateIsUnset_shouldKeepTouchStateUnset() thr
     public void setWebViewScrollingEnabled_whenScrollableIsTrue_onTouchListenerShouldAlwaysReturnFalse() throws Exception {
         subject.initializeOnTouchListener(true);
 
-        View.OnTouchListener onTouchListener = shadowOf(subject).getOnTouchListener();
+        View.OnTouchListener onTouchListener = Shadows.shadowOf(subject).getOnTouchListener();
         // ACTION_DOWN is guaranteed to be run before ACTION_MOVE
         onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_DOWN));
         boolean shouldConsumeTouch = onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_MOVE));
@@ -219,7 +223,7 @@ public void setWebViewScrollingEnabled_whenScrollableIsTrue_onTouchListenerShoul
     public void setWebViewScrollingEnabled_whenScrollableIsFalse_whenActionMove_onTouchListenerShouldReturnTrue() throws Exception {
         subject.initializeOnTouchListener(false);
 
-        View.OnTouchListener onTouchListener = shadowOf(subject).getOnTouchListener();
+        View.OnTouchListener onTouchListener = Shadows.shadowOf(subject).getOnTouchListener();
         boolean shouldConsumeTouch = onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_MOVE));
 
         assertThat(shouldConsumeTouch).isTrue();
@@ -229,7 +233,7 @@ public void setWebViewScrollingEnabled_whenScrollableIsFalse_whenActionMove_onTo
     public void setWebViewScrollingEnabled_whenScrollableIsFalse_whenMotionEventIsNotActionMove_onTouchListenerShouldReturnFalse() throws Exception {
         subject.initializeOnTouchListener(false);
 
-        View.OnTouchListener onTouchListener = shadowOf(subject).getOnTouchListener();
+        View.OnTouchListener onTouchListener = Shadows.shadowOf(subject).getOnTouchListener();
 
         boolean shouldConsumeTouch = onTouchListener.onTouch(subject, touchUp);
         assertThat(shouldConsumeTouch).isFalse();
@@ -244,7 +248,7 @@ public void setWebViewScrollingEnabled_whenScrollableIsFalse_whenMotionEventIsNo
     @Test
     public void destroy_shouldRemoveSelfFromParent() throws Exception {
         ViewGroup parentView = mock(ViewGroup.class);
-        ShadowWebView shadow = shadowOf(subject);
+        ShadowWebView shadow = Shadows.shadowOf(subject);
         shadow.setMyParent(parentView);
 
         subject.destroy();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
index f5eefa09..4dc63c99 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
@@ -13,11 +13,13 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class BaseInterstitialActivityTest {
     private BaseInterstitialActivity subject;
     private long broadcastIdentifier;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivityTest.java
index 940f9f07..d7f57390 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivityTest.java
@@ -1,7 +1,9 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
+import android.content.Context;
 import android.content.Intent;
+import android.media.AudioManager;
 
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Utils;
@@ -10,6 +12,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowApplication;
 
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static com.mopub.mobileads.BaseVideoPlayerActivity.VIDEO_URL;
@@ -17,11 +21,16 @@
 import static com.mopub.mobileads.BaseVideoPlayerActivity.startVast;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.mockito.Mockito.when;
 import static org.mockito.Mockito.withSettings;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class BaseVideoPlayerActivityTest {
-    private static final String MRAID_VIDEO_URL = "http://mraidVideo";
+    private static final String MRAID_VIDEO_URL = "https://mraidVideo";
 
     private long testBroadcastIdentifier;
     private VastVideoConfig mVastVideoConfig;
@@ -40,14 +49,29 @@ public void startMraid_shouldStartMraidVideoPlayerActivity() throws Exception {
 
     @Test
     public void startVast_shouldStartMraidVideoPlayerActivity() throws Exception {
-        startVast(Robolectric.buildActivity(Activity.class).create().get(), mVastVideoConfig, testBroadcastIdentifier);
-        assertVastVideoPlayerActivityStarted(MraidVideoPlayerActivity.class, mVastVideoConfig, testBroadcastIdentifier);
+        startVast(Robolectric.buildActivity(Activity.class).create().get(), mVastVideoConfig,
+                testBroadcastIdentifier);
+        assertVastVideoPlayerActivityStarted(MraidVideoPlayerActivity.class, mVastVideoConfig,
+                testBroadcastIdentifier);
+    }
+
+    @Test
+    public void onDestroy_shouldReleaseAudioFocus() throws Exception {
+        BaseVideoPlayerActivity subject = spy(
+                Robolectric.buildActivity(BaseVideoPlayerActivity.class).create().get());
+        AudioManager mockAudioManager = mock(AudioManager.class);
+        when(subject.getSystemService(Context.AUDIO_SERVICE)).thenReturn(mockAudioManager);
+
+        subject.onDestroy();
+
+        verify(mockAudioManager).abandonAudioFocus(null);
+        verifyNoMoreInteractions(mockAudioManager);
     }
 
     static void assertVastVideoPlayerActivityStarted(final Class clazz,
             final VastVideoConfig vastVideoConfig,
             final long broadcastIdentifier) {
-        final Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
+        final Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
         assertIntentAndBroadcastIdentifierAreCorrect(intent, clazz, broadcastIdentifier);
 
         final VastVideoConfig expectedVastVideoConfig =
@@ -56,7 +80,7 @@ static void assertVastVideoPlayerActivityStarted(final Class clazz,
     }
 
     public static void assertMraidVideoPlayerActivityStarted(final Class clazz, final String url) {
-        final Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
+        final Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
         assertIntentAndBroadcastIdentifierAreCorrect(intent, clazz, null);
 
         assertThat(intent.getStringExtra(VIDEO_URL)).isEqualTo(url);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java
index d9415f2d..89eb1187 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java
@@ -12,16 +12,18 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
+import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
+import org.robolectric.fakes.RoboWebSettings;
 import org.robolectric.shadows.ShadowWebView;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
-import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class BaseWebViewTest {
     private Activity context;
     private BaseWebView subject;
@@ -31,7 +33,7 @@ public void setup() {
         context = Robolectric.buildActivity(Activity.class).create().get();
     }
 
-    @Config(reportSdk = VERSION_CODES.JELLY_BEAN_MR1)
+    @Config(sdk = VERSION_CODES.JELLY_BEAN_MR1)
     @Test
     public void beforeJellyBeanMr1_shouldDisablePluginsByDefault() throws Exception {
         subject = new BaseWebView(context);
@@ -43,7 +45,34 @@ public void beforeJellyBeanMr1_shouldDisablePluginsByDefault() throws Exception
         assertThat(webSettings.getPluginState()).isEqualTo(WebSettings.PluginState.ON);
     }
 
-    @Config(reportSdk = VERSION_CODES.JELLY_BEAN_MR2)
+    @Test
+    public void allPlatforms_shouldDisableFileAccess() {
+        subject = new BaseWebView(context);
+
+        final WebSettings webSettings = subject.getSettings();
+        assertThat(webSettings.getAllowFileAccess()).isEqualTo(false);
+    }
+
+    @Config(sdk = VERSION_CODES.JELLY_BEAN) // Robo doesn't go earlier than this.
+    @Test
+    public void atLeastHoneyComb_shouldDisableContentAccess() {
+        subject = new BaseWebView(context);
+
+        final WebSettings webSettings = subject.getSettings();
+        assertThat(webSettings.getAllowContentAccess()).isEqualTo(false);
+    }
+
+    @Config(sdk = VERSION_CODES.JELLY_BEAN)
+    @Test
+    public void atLeastJellybean_shouldDisableAccessFromFileUrls() {
+        subject = new BaseWebView(context);
+
+        final WebSettings webSettings = subject.getSettings();
+        assertThat(webSettings.getAllowFileAccessFromFileURLs()).isEqualTo(false);
+        assertThat(webSettings.getAllowUniversalAccessFromFileURLs()).isEqualTo(false);
+    }
+
+    @Config(sdk = VERSION_CODES.JELLY_BEAN_MR2)
     @Test
     public void atLeastJellybeanMr2_shouldPass() throws Exception {
         subject = new BaseWebView(context);
@@ -53,11 +82,24 @@ public void atLeastJellybeanMr2_shouldPass() throws Exception {
         // pass
     }
 
+    @Test
+    public void enableJavascriptCaching_enablesJavascriptDomStorageAndAppCache() {
+        subject = new BaseWebView(context);
+        final RoboWebSettings settings = (RoboWebSettings) subject.getSettings();
+
+        subject.enableJavascriptCaching();
+
+        assertThat(settings.getJavaScriptEnabled()).isTrue();
+        assertThat(settings.getDomStorageEnabled()).isTrue();
+        assertThat(settings.getAppCacheEnabled()).isTrue();
+        assertThat(settings.getAppCachePath()).isEqualTo(context.getCacheDir().getAbsolutePath());
+    }
+
     @Test
     public void destroy_shouldRemoveSelfFromParent_beforeCallingDestroy() throws Exception {
         subject = new BaseWebView(context);
         ViewGroup parent = mock(ViewGroup.class);
-        ShadowWebView shadow = shadowOf(subject);
+        ShadowWebView shadow = Shadows.shadowOf(subject);
         shadow.setMyParent(parent);
 
         subject.destroy();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventAdLoaderTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventAdLoaderTest.java
deleted file mode 100644
index c3dbf03d..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventAdLoaderTest.java
+++ /dev/null
@@ -1,83 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class CustomEventAdLoaderTest {
-
-    private AdViewController adViewController;
-    private AdLoader.CustomEventAdLoader subject;
-    private String customEventName;
-    private Map<String, String> serverExtras;
-    private MoPubView moPubView;
-
-    @Before
-    public void setup() {
-        moPubView = mock(MoPubView.class);
-        adViewController = mock(AdViewController.class);
-        stub(adViewController.getMoPubView()).toReturn(moPubView);
-        customEventName = "testCustomEvent";
-        serverExtras = new HashMap<String, String>();
-        subject = new AdLoader.CustomEventAdLoader(adViewController,
-                customEventName, serverExtras);
-    }
-
-    @Test
-    public void execute_shouldCallLoadCustomEvent() throws Exception {
-        subject.load();
-
-        verify(adViewController).setNotLoading();
-        verify(moPubView).loadCustomEvent(eq(customEventName), eq(serverExtras));
-    }
-
-    @Test
-    public void execute_whenAdViewControllerIsNull_shouldDoNothing() throws Exception {
-        subject = new AdLoader.CustomEventAdLoader(null, customEventName, serverExtras);
-
-        subject.load();
-        // pass
-    }
-
-    @Test
-    public void execute_whenAdViewControllerIsDestroyed_shouldDoNothing() throws Exception {
-        stub(adViewController.isDestroyed()).toReturn(true);
-
-        subject.load();
-
-        verify(adViewController, never()).setNotLoading();
-        verify(moPubView, never()).loadCustomEvent(eq(customEventName), eq(serverExtras));
-    }
-
-    @Test
-    public void execute_whenCustomEventIsNull_shouldDoNothing() {
-        subject = new AdLoader.CustomEventAdLoader(adViewController, null, serverExtras);
-
-        subject.load();
-
-        verify(adViewController, never()).setNotLoading();
-        verify(moPubView, never()).loadCustomEvent((String) eq(null), eq(serverExtras));
-    }
-
-    @Test
-    public void execute_whenParamsMapIsNull_shouldLoadNullParamsMap() throws Exception {
-        subject = new AdLoader.CustomEventAdLoader(adViewController, customEventName, null);
-
-        subject.load();
-
-        verify(adViewController).setNotLoading();
-        verify(moPubView).loadCustomEvent(eq(customEventName), (Map<String, String>) eq(null));
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
index ed91f90b..1dd64a58 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
@@ -17,6 +17,8 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowLooper;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -36,6 +38,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class CustomEventBannerAdapterTest {
     private CustomEventBannerAdapter subject;
     @Mock
@@ -86,11 +89,11 @@ public void constructor_shouldPopulateLocalExtrasWithAdWidthAndHeight() throws E
     public void timeout_shouldSignalFailureAndInvalidateWithDefaultDelay() throws Exception {
         subject.loadAd();
 
-        Robolectric.idleMainLooper(CustomEventBannerAdapter.DEFAULT_BANNER_TIMEOUT_DELAY - 1);
+        ShadowLooper.idleMainLooper(CustomEventBannerAdapter.DEFAULT_BANNER_TIMEOUT_DELAY - 1);
         verify(moPubView, never()).loadFailUrl(eq(NETWORK_TIMEOUT));
         assertThat(subject.isInvalidated()).isFalse();
 
-        Robolectric.idleMainLooper(1);
+        ShadowLooper.idleMainLooper(1);
         verify(moPubView).loadFailUrl(eq(NETWORK_TIMEOUT));
         assertThat(subject.isInvalidated()).isTrue();
     }
@@ -101,11 +104,11 @@ public void timeout_withNegativeAdTimeoutDelay_shouldSignalFailureAndInvalidateW
 
         subject.loadAd();
 
-        Robolectric.idleMainLooper(CustomEventBannerAdapter.DEFAULT_BANNER_TIMEOUT_DELAY - 1);
+        ShadowLooper.idleMainLooper(CustomEventBannerAdapter.DEFAULT_BANNER_TIMEOUT_DELAY - 1);
         verify(moPubView, never()).loadFailUrl(eq(NETWORK_TIMEOUT));
         assertThat(subject.isInvalidated()).isFalse();
 
-        Robolectric.idleMainLooper(1);
+        ShadowLooper.idleMainLooper(1);
         verify(moPubView).loadFailUrl(eq(NETWORK_TIMEOUT));
         assertThat(subject.isInvalidated()).isTrue();
     }
@@ -116,11 +119,11 @@ public void timeout_withNonNullAdTimeoutDelay_shouldSignalFailureAndInvalidateWi
 
         subject.loadAd();
 
-        Robolectric.idleMainLooper(77000 - 1);
+        ShadowLooper.idleMainLooper(77000 - 1);
         verify(moPubView, never()).loadFailUrl(eq(NETWORK_TIMEOUT));
         assertThat(subject.isInvalidated()).isFalse();
 
-        Robolectric.idleMainLooper(1);
+        ShadowLooper.idleMainLooper(1);
         verify(moPubView).loadFailUrl(eq(NETWORK_TIMEOUT));
         assertThat(subject.isInvalidated()).isTrue();
     }
@@ -163,37 +166,38 @@ public void loadAd_shouldPropagateServerExtrasToLoadBanner() throws Exception {
 
     @Test
     public void loadAd_shouldScheduleTimeout_bannerLoadedAndFailed_shouldCancelTimeout() throws Exception {
-        Robolectric.pauseMainLooper();
+        ShadowLooper.pauseMainLooper();
 
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
 
         subject.loadAd();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
 
         subject.onBannerLoaded(null);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
 
         subject.loadAd();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
 
         subject.onBannerFailed(null);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
     }
 
     @Test
     public void loadAd_shouldScheduleTimeoutRunnableBeforeCallingLoadBanner() throws Exception {
-        Robolectric.pauseMainLooper();
+        ShadowLooper.pauseMainLooper();
 
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
 
         Answer assertTimeoutRunnableHasStarted = new Answer() {
             @Override
             public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
-                assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+                assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
                 return null;
             }
         };
 
+        // noinspection unchecked
         doAnswer(assertTimeoutRunnableHasStarted)
                 .when(banner)
                 .loadBanner(
@@ -209,18 +213,19 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
 
     @Test
     public void loadAd_whenCallingOnBannerFailed_shouldCancelExistingTimeoutRunnable() throws Exception {
-        Robolectric.pauseMainLooper();
+        ShadowLooper.pauseMainLooper();
 
         Answer justCallOnBannerFailed = new Answer() {
             @Override
             public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
-                assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+                assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
                 subject.onBannerFailed(null);
-                assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+                assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
                 return null;
             }
         };
 
+        // noinspection unchecked
         doAnswer(justCallOnBannerFailed)
                 .when(banner)
                 .loadBanner(
@@ -230,9 +235,9 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
                         any(Map.class)
                 );
 
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
         subject.loadAd();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
     }
 
     @Test
@@ -314,6 +319,7 @@ public void invalidate_shouldCauseLoadAdToDoNothing() throws Exception {
 
         subject.loadAd();
 
+        // noinspection unchecked
         verify(banner, never()).loadBanner(
                 any(Context.class),
                 any(CustomEventBannerListener.class),
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
index 3649c405..e5934618 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
@@ -15,6 +15,8 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowLooper;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -35,6 +37,7 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class CustomEventInterstitialAdapterTest {
     private static long BROADCAST_IDENTIFER = 123;
     private CustomEventInterstitialAdapter subject;
@@ -87,11 +90,11 @@ public void constructor_withInvalidClassName_shouldCallOnCustomEventInterstitial
     @Test
     public void timeout_shouldSignalFailureAndInvalidateWithDefaultDelay() throws Exception {
         subject.loadInterstitial();
-        Robolectric.idleMainLooper(CustomEventInterstitialAdapter.DEFAULT_INTERSTITIAL_TIMEOUT_DELAY - 1);
+        ShadowLooper.idleMainLooper(CustomEventInterstitialAdapter.DEFAULT_INTERSTITIAL_TIMEOUT_DELAY - 1);
         verify(interstitialAdapterListener, never()).onCustomEventInterstitialFailed(eq(NETWORK_TIMEOUT));
         assertThat(subject.isInvalidated()).isFalse();
 
-        Robolectric.idleMainLooper(1);
+        ShadowLooper.idleMainLooper(1);
         verify(interstitialAdapterListener).onCustomEventInterstitialFailed(eq(NETWORK_TIMEOUT));
         assertThat(subject.isInvalidated()).isTrue();
     }
@@ -101,11 +104,11 @@ public void timeout_withNegativeAdTimeoutDelay_shouldSignalFailureAndInvalidateW
         stub(mockMoPubInterstitial.getAdTimeoutDelay()).toReturn(-1);
 
         subject.loadInterstitial();
-        Robolectric.idleMainLooper(CustomEventInterstitialAdapter.DEFAULT_INTERSTITIAL_TIMEOUT_DELAY - 1);
+        ShadowLooper.idleMainLooper(CustomEventInterstitialAdapter.DEFAULT_INTERSTITIAL_TIMEOUT_DELAY - 1);
         verify(interstitialAdapterListener, never()).onCustomEventInterstitialFailed(eq(NETWORK_TIMEOUT));
         assertThat(subject.isInvalidated()).isFalse();
 
-        Robolectric.idleMainLooper(1);
+        ShadowLooper.idleMainLooper(1);
         verify(interstitialAdapterListener).onCustomEventInterstitialFailed(eq(NETWORK_TIMEOUT));
         assertThat(subject.isInvalidated()).isTrue();
     }
@@ -115,11 +118,11 @@ public void timeout_withNonNullAdTimeoutDelay_shouldSignalFailureAndInvalidateWi
         stub(mockMoPubInterstitial.getAdTimeoutDelay()).toReturn(77);
 
         subject.loadInterstitial();
-        Robolectric.idleMainLooper(77000 - 1);
+        ShadowLooper.idleMainLooper(77000 - 1);
         verify(interstitialAdapterListener, never()).onCustomEventInterstitialFailed(eq(NETWORK_TIMEOUT));
         assertThat(subject.isInvalidated()).isFalse();
 
-        Robolectric.idleMainLooper(1);
+        ShadowLooper.idleMainLooper(1);
         verify(interstitialAdapterListener).onCustomEventInterstitialFailed(eq(NETWORK_TIMEOUT));
         assertThat(subject.isInvalidated()).isTrue();
     }
@@ -162,37 +165,38 @@ public void loadInterstitial_shouldPropagateServerExtrasToInterstitial() throws
 
     @Test
     public void loadInterstitial_shouldScheduleTimeout_interstitialLoadedAndFailed_shouldCancelTimeout() throws Exception {
-        Robolectric.pauseMainLooper();
+        ShadowLooper.pauseMainLooper();
 
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
 
         subject.loadInterstitial();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
 
         subject.onInterstitialLoaded();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
 
         subject.loadInterstitial();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
 
         subject.onInterstitialFailed(null);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
     }
 
     @Test
     public void loadInterstitial_shouldScheduleTimeoutRunnableBeforeCallingLoadInterstitial() throws Exception {
-        Robolectric.pauseMainLooper();
+        ShadowLooper.pauseMainLooper();
 
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
 
         Answer assertTimeoutRunnableHasStarted = new Answer() {
             @Override
             public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
-                assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+                assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
                 return null;
             }
         };
 
+        // noinspection unchecked
         doAnswer(assertTimeoutRunnableHasStarted)
                 .when(interstitial)
                 .loadInterstitial(
@@ -207,18 +211,19 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
 
     @Test
     public void loadInterstitial_whenCallingOnInterstitialFailed_shouldCancelExistingTimeoutRunnable() throws Exception {
-        Robolectric.pauseMainLooper();
+        ShadowLooper.pauseMainLooper();
 
         Answer justCallOnInterstitialFailed = new Answer() {
             @Override
             public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
-                assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+                assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
                 subject.onInterstitialFailed(null);
-                assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+                assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
                 return null;
             }
         };
 
+        // noinspection unchecked
         doAnswer(justCallOnInterstitialFailed)
                 .when(interstitial)
                 .loadInterstitial(
@@ -228,9 +233,9 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
                         any(Map.class)
                 );
 
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
         subject.loadInterstitial();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
     }
 
     @Test
@@ -295,6 +300,7 @@ public void invalidate_shouldCauseLoadInterstitialToDoNothing() throws Exception
 
         subject.loadInterstitial();
 
+        // noinspection unchecked
         verify(interstitial, never()).loadInterstitial(
                 any(Context.class),
                 any(CustomEventInterstitialListener.class),
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
index e028844b..d5bb4ec5 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
@@ -14,7 +14,8 @@
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.shadows.ShadowLocalBroadcastManager;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.support.v4.ShadowLocalBroadcastManager;
 
 import java.util.HashMap;
 import java.util.Iterator;
@@ -26,7 +27,6 @@
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.getHtmlInterstitialIntentFilter;
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialAdListener;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
@@ -36,6 +36,7 @@
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class EventForwardingBroadcastReceiverTest {
 
     private CustomEventInterstitialListener customEventInterstitialListener;
@@ -97,7 +98,7 @@ public void constructor_shouldSetIntentFilter() throws Exception {
                 ACTION_INTERSTITIAL_CLICK
         );
 
-        final IntentFilter intentFilter = EventForwardingBroadcastReceiver.getHtmlInterstitialIntentFilter();
+        final IntentFilter intentFilter = subject.getIntentFilter();
         final Iterator<String> actionIterator = intentFilter.actionsIterator();
 
         assertThat(intentFilter.countActions()).isEqualTo(4);
@@ -172,7 +173,7 @@ public void onReceiver_whenCustomEventInterstitialListenerIsNull_shouldNotBlowUp
 
     @Test
     public void register_shouldEnableReceivingBroadcasts() throws Exception {
-        subject.register(context);
+        subject.register(subject, context);
         Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, broadcastIdentifier);
         ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
 
@@ -181,9 +182,9 @@ public void register_shouldEnableReceivingBroadcasts() throws Exception {
 
     @Test
     public void unregister_shouldDisableReceivingBroadcasts() throws Exception {
-        subject.register(context);
+        subject.register(subject, context);
 
-        subject.unregister();
+        subject.unregister(subject);
         Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, broadcastIdentifier);
         ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
 
@@ -192,18 +193,18 @@ public void unregister_shouldDisableReceivingBroadcasts() throws Exception {
 
     @Test
     public void unregister_whenNotRegistered_shouldNotBlowUp() throws Exception {
-        subject.unregister();
+        subject.unregister(subject);
 
         // pass
     }
 
     @Test
     public void unregister_shouldNotLeakTheContext() throws Exception {
-        subject.register(context);
-        subject.unregister();
+        subject.register(subject, context);
+        subject.unregister(subject);
 
-        LocalBroadcastManager.getInstance(context).registerReceiver(subject, getHtmlInterstitialIntentFilter());
-        subject.unregister();
+        LocalBroadcastManager.getInstance(context).registerReceiver(subject, subject.getIntentFilter());
+        subject.unregister(subject);
 
         // Unregister shouldn't know the context any more and so should not have worked
         Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, broadcastIdentifier);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
index 4b7f81c9..2fdd7a26 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
@@ -13,6 +13,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
+import org.robolectric.annotation.Config;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -31,6 +32,7 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class HtmlBannerTest {
 
     private HtmlBanner subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerWebViewTest.java
index aea2d409..dc2a4ce6 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerWebViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerWebViewTest.java
@@ -11,6 +11,8 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
+import org.robolectric.Shadows;
+import org.robolectric.annotation.Config;
 
 import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
@@ -18,9 +20,9 @@
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
-import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class HtmlBannerWebViewTest {
     private HtmlBannerWebView subject;
     @Mock
@@ -28,6 +30,7 @@
     private CustomEventBannerListener customEventBannerListener;
     private String clickthroughUrl;
     private String redirectUrl;
+    private String dspCreativeId;
 
     @Before
     public void setup() throws Exception {
@@ -36,12 +39,13 @@ public void setup() throws Exception {
         customEventBannerListener = mock(CustomEventBannerListener.class);
         clickthroughUrl = "clickthroughUrl";
         redirectUrl = "redirectUrl";
+        dspCreativeId = "dspCreativeId";
     }
 
     @Test
     public void init_shouldSetupWebViewClient() throws Exception {
-        subject.init(customEventBannerListener, false, clickthroughUrl, redirectUrl);
-        WebViewClient webViewClient = shadowOf(subject).getWebViewClient();
+        subject.init(customEventBannerListener, false, clickthroughUrl, redirectUrl, dspCreativeId);
+        WebViewClient webViewClient = Shadows.shadowOf(subject).getWebViewClient();
         assertThat(webViewClient).isNotNull();
         assertThat(webViewClient).isInstanceOf(HtmlWebViewClient.class);
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
index 19d7184e..df8821fe 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
@@ -10,21 +10,22 @@
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.shadows.ShadowLocalBroadcastManager;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowApplication;
+import org.robolectric.shadows.support.v4.ShadowLocalBroadcastManager;
 
 import java.util.HashMap;
 import java.util.Map;
 
-import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static com.mopub.common.DataKeys.CLICKTHROUGH_URL_KEY;
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.common.DataKeys.REDIRECT_URL_KEY;
 import static com.mopub.common.DataKeys.SCROLLABLE_KEY;
+import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.anyString;
@@ -33,6 +34,7 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class HtmlInterstitialTest extends ResponseBodyInterstitialTest {
     private CustomEventInterstitialListener customEventInterstitialListener;
     private Activity context;
@@ -85,7 +87,7 @@ public void showInterstitial_withMinimumExtras_shouldStartMoPubActivityWithDefau
         subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
         subject.showInterstitial();
 
-        Intent nextStartedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent nextStartedActivity = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(nextStartedActivity.getStringExtra(HTML_RESPONSE_BODY_KEY)).isEqualTo(expectedResponse);
         assertThat(nextStartedActivity.getBooleanExtra(SCROLLABLE_KEY, false)).isFalse();
         assertThat(nextStartedActivity.getStringExtra(REDIRECT_URL_KEY)).isNull();
@@ -103,7 +105,7 @@ public void showInterstitial_shouldStartMoPubActivityWithAllExtras() throws Exce
         subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
         subject.showInterstitial();
 
-        Intent nextStartedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent nextStartedActivity = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(nextStartedActivity.getStringExtra(HTML_RESPONSE_BODY_KEY)).isEqualTo(expectedResponse);
         assertThat(nextStartedActivity.getBooleanExtra(SCROLLABLE_KEY, false)).isTrue();
         assertThat(nextStartedActivity.getStringExtra(REDIRECT_URL_KEY)).isEqualTo("redirectUrl");
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java
index 4d1763d8..2a73c7d3 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java
@@ -11,6 +11,8 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
+import org.robolectric.Shadows;
+import org.robolectric.annotation.Config;
 
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.mobileads.HtmlInterstitialWebView.HtmlInterstitialWebViewListener;
@@ -19,9 +21,9 @@
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
-import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class HtmlInterstitialWebViewTest {
 
     @Mock AdReport mockAdReport;
@@ -30,6 +32,7 @@
     private String clickthroughUrl;
     private boolean isScrollable;
     private String redirectUrl;
+    private String dspCreativeId;
 
     @Before
     public void setUp() throws Exception {
@@ -39,12 +42,13 @@ public void setUp() throws Exception {
         isScrollable = false;
         clickthroughUrl = "clickthroughUrl";
         redirectUrl = "redirectUrl";
+        dspCreativeId = "dspCreativeId";
     }
 
     @Test
     public void init_shouldSetupWebViewClient() throws Exception {
-        subject.init(customEventInterstitialListener, false, clickthroughUrl, redirectUrl);
-        WebViewClient webViewClient = shadowOf(subject).getWebViewClient();
+        subject.init(customEventInterstitialListener, false, clickthroughUrl, redirectUrl, dspCreativeId);
+        WebViewClient webViewClient = Shadows.shadowOf(subject).getWebViewClient();
         assertThat(webViewClient).isNotNull();
         assertThat(webViewClient).isInstanceOf(HtmlWebViewClient.class);
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
index d2db93fd..ddc9feb7 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
@@ -16,6 +16,9 @@
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
 import org.robolectric.Robolectric;
+import org.robolectric.RuntimeEnvironment;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowApplication;
 
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 import static org.fest.assertions.api.Assertions.assertThat;
@@ -30,9 +33,10 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class HtmlWebViewClientTest {
 
-    private static final String CLICKTHROUGH_URL = "http://clickthrough";
+    private static final String CLICKTHROUGH_URL = "https://clickthrough";
 
     private HtmlWebViewClient subject;
     private HtmlWebViewListener htmlWebViewListener;
@@ -46,7 +50,8 @@ public void setUp() throws Exception {
         context = Robolectric.buildActivity(Activity.class).create().get().getApplicationContext();
         when(htmlWebView.getContext()).thenReturn(context);
         when(htmlWebView.wasClicked()).thenReturn(true);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, CLICKTHROUGH_URL, "redirect");
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, CLICKTHROUGH_URL,
+                "redirect", "dsp_creative_id");
     }
 
     @Test
@@ -87,14 +92,14 @@ public void shouldOverrideUrlLoading_withPhoneIntent_shouldStartDefaultIntent()
     public void shouldOverrideUrlLoading_withCustomApplicationIntent_withUserClick_andCanHandleCustomIntent_shouldTryToLaunchCustomIntent() throws Exception {
         String customUrl = "myintent://something";
         stub(htmlWebView.wasClicked()).toReturn(true);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW, Uri.parse(customUrl)), new ResolveInfo());
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW, Uri.parse(customUrl)), new ResolveInfo());
 
         boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, customUrl);
 
         assertThat(didOverrideUrl).isTrue();
         verify(htmlWebViewListener).onClicked();
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(intent).isNotNull();
     }
 
@@ -102,152 +107,153 @@ public void shouldOverrideUrlLoading_withCustomApplicationIntent_withUserClick_a
     public void shouldOverrideUrlLoading_withCustomApplicationIntent_withoutUserClick_shouldNotTryToLaunchIntent() throws Exception {
         String customUrl = "myintent://something";
         stub(htmlWebView.wasClicked()).toReturn(false);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
 
         boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, customUrl);
 
         assertThat(didOverrideUrl).isTrue();
         verify(htmlWebViewListener, never()).onClicked();
         verify(htmlWebView, never()).onResetUserClick();
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
+        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
     }
 
     @Test
     public void shouldOverrideUrlLoading_withCustomApplicationIntent_withUserClick_butCanNotHandleCustomIntent_shouldFailSilently() throws Exception {
         String customUrl = "myintent://something";
         stub(htmlWebView.wasClicked()).toReturn(true);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
 
         boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, customUrl);
 
         assertThat(didOverrideUrl).isTrue();
         verify(htmlWebViewListener, never()).onClicked();
         verify(htmlWebView, never()).onResetUserClick();
-        Intent startedIntent = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent startedIntent = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(startedIntent).isNull();
     }
 
     @Test
     public void shouldOverrideUrlLoading_withHttpUrl_withUserClick_shouldOpenBrowser() throws Exception {
         stub(htmlWebView.wasClicked()).toReturn(true);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
-        String validUrl = "http://www.mopub.com";
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, "dsp_creative_id");
+        String validUrl = "https://www.mopub.com";
         boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, validUrl);
 
         assertThat(didOverrideUrl).isTrue();
         verify(htmlWebViewListener).onClicked();
 
-        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent startedActivity = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(startedActivity.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser");
         assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(validUrl);
+        assertThat(startedActivity.getStringExtra(MoPubBrowser.DSP_CREATIVE_ID)).isEqualTo("dsp_creative_id");
         assertThat(startedActivity.getData()).isNull();
     }
 
     @Test
     public void shouldOverrideUrlLoading_withHttpUrl_withoutUserClick_shouldNotOpenBrowser() throws Exception {
         stub(htmlWebView.wasClicked()).toReturn(false);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
-        String validUrl = "http://www.mopub.com";
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
+        String validUrl = "https://www.mopub.com";
         boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, validUrl);
 
         assertThat(didOverrideUrl).isTrue();
         verify(htmlWebViewListener, never()).onClicked();
         verify(htmlWebView, never()).onResetUserClick();
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
+        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
     }
 
     @Test
     public void shouldOverrideUrlLoading_withClickTrackingRedirect_withUserClick_shouldNotChangeUrl() throws Exception {
-        String validUrl = "http://www.mopub.com";
+        String validUrl = "https://www.mopub.com";
         stub(htmlWebView.wasClicked()).toReturn(true);
 
         subject.shouldOverrideUrlLoading(htmlWebView, validUrl);
 
-        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent startedActivity = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(validUrl);
     }
 
     @Test
     public void shouldOverrideUrlLoading_withClickTrackingRedirect_withoutUserClick_shouldChangeUrl() throws Exception {
-        String validUrl = "http://www.mopub.com";
+        String validUrl = "https://www.mopub.com";
         stub(htmlWebView.wasClicked()).toReturn(false);
 
         subject.shouldOverrideUrlLoading(htmlWebView, validUrl);
 
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
+        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
     }
 
     @Test
     public void shouldOverrideUrlLoading_withEmptyUrl_withUserClick_shouldFailSilently() throws Exception {
         stub(htmlWebView.wasClicked()).toReturn(true);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
 
         subject.shouldOverrideUrlLoading(htmlWebView, "");
 
-        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent startedActivity = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(startedActivity).isNull();
     }
 
     @Test
     public void shouldOverrideUrlLoading_withEmptyUrl_withoutUserClick_shouldLoadAboutBlank() throws Exception {
         stub(htmlWebView.wasClicked()).toReturn(false);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
 
         subject.shouldOverrideUrlLoading(htmlWebView, "");
 
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
+        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
     }
 
     @Test
     public void shouldOverrideUrlLoading_withNativeBrowserScheme_withUserClick_shouldStartIntentWithActionView() throws Exception {
         stub(htmlWebView.wasClicked()).toReturn(true);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
 
         boolean shouldOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView,
-                "mopubnativebrowser://navigate?url=http%3A%2F%2Fwww.mopub.com");
+                "mopubnativebrowser://navigate?url=https%3A%2F%2Fwww.mopub.com");
 
         assertThat(shouldOverrideUrl).isTrue();
         verify(htmlWebViewListener).onClicked();
         verify(htmlWebView).onResetUserClick();
-        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent startedActivity = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(startedActivity.getAction()).isEqualTo("android.intent.action.VIEW");
-        assertThat(startedActivity.getData().toString()).isEqualTo("http://www.mopub.com");
+        assertThat(startedActivity.getData().toString()).isEqualTo("https://www.mopub.com");
     }
 
     @Test
     public void shouldOverrideUrlLoading_withNativeBrowserScheme_withoutUserClick_shouldStartIntentWithActionView() throws Exception {
         stub(htmlWebView.wasClicked()).toReturn(false);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
 
         boolean shouldOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView,
-                "mopubnativebrowser://navigate?url=http%3A%2F%2Fwww.mopub.com");
+                "mopubnativebrowser://navigate?url=https%3A%2F%2Fwww.mopub.com");
 
         assertThat(shouldOverrideUrl).isTrue();
         verify(htmlWebViewListener, never()).onClicked();
         verify(htmlWebView, never()).onResetUserClick();
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
+        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
     }
 
     @Test
     public void shouldOverrideUrlLoading_withNativeBrowserScheme_butOpaqueUri_withUserClick_shouldNotBeHandledByNativeBrowser() throws Exception {
         stub(htmlWebView.wasClicked()).toReturn(true);
-        String opaqueNativeBrowserUriString = "mopubnativebrowser:navigate?url=http%3A%2F%2Fwww.mopub.com";
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
+        String opaqueNativeBrowserUriString = "mopubnativebrowser:navigate?url=https%3A%2F%2Fwww.mopub.com";
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
 
         boolean shouldOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, opaqueNativeBrowserUriString);
 
         assertThat(shouldOverrideUrl).isTrue();
         verify(htmlWebViewListener, never()).onClicked();
         verify(htmlWebView, never()).onResetUserClick();
-        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent startedActivity = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(startedActivity).isNull();
     }
 
     @Test
     public void shouldOverrideUrlLoading_withNativeBrowserScheme_butOpaqueUri_withoutUserClick_shouldNotLoad() throws Exception {
         stub(htmlWebView.wasClicked()).toReturn(false);
-        String opaqueNativeBrowserUriString = "mopubnativebrowser:navigate?url=http%3A%2F%2Fwww.mopub.com";
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
+        String opaqueNativeBrowserUriString = "mopubnativebrowser:navigate?url=https%3A%2F%2Fwww.mopub.com";
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
 
         boolean shouldOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, opaqueNativeBrowserUriString);
 
@@ -255,18 +261,18 @@ public void shouldOverrideUrlLoading_withNativeBrowserScheme_butOpaqueUri_withou
         verify(htmlWebViewListener, never()).onClicked();
         verify(htmlWebView, never()).onResetUserClick();
 
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
+        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
     }
 
     @Test
     public void shouldOverrideUrlLoading_withNativeBrowserScheme_withInvalidHostSchemeUrl_withUserClick_shouldFailSilently() throws Exception {
         stub(htmlWebView.wasClicked()).toReturn(true);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
 
         boolean shouldOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, "something://blah?url=invalid");
 
         assertThat(shouldOverrideUrl).isTrue();
-        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent startedActivity = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(startedActivity).isNull();
 
         verify(htmlWebViewListener, never()).onClicked();
@@ -276,23 +282,23 @@ public void shouldOverrideUrlLoading_withNativeBrowserScheme_withInvalidHostSche
     @Test
     public void shouldOverrideUrlLoading_withNativeBrowserScheme_withInvalidHostSchemeUrl_withoutUserClick_shouldNotInvokeNativeBrowser() throws Exception {
         stub(htmlWebView.wasClicked()).toReturn(false);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
 
         boolean shouldOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, "something://blah?url=invalid");
 
         assertThat(shouldOverrideUrl).isTrue();
         verify(htmlWebViewListener, never()).onClicked();
         verify(htmlWebView, never()).onResetUserClick();
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
+        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
     }
 
     @Test
     public void shouldOverrideUrlLoading_withAboutBlankUrl_shouldFailSilently() {
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
 
         subject.shouldOverrideUrlLoading(htmlWebView, "about:blank");
 
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
+        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
         verify(htmlWebViewListener, never()).onClicked();
         verify(htmlWebView, never()).onResetUserClick();
     }
@@ -324,7 +330,7 @@ public void shouldOverrideUrlLoading_withPhoneScheme_withoutUserClick_shouldDoNo
 
     @Test
     public void shouldOverrideUrlLoading_withMarketUrl_withoutUserClick_shouldDoNothing() throws Exception {
-        assertNothingHappensWithoutClick("http://play.google.com/");
+        assertNothingHappensWithoutClick("https://play.google.com/");
     }
 
     @Test
@@ -334,7 +340,7 @@ public void shouldOverrideUrlLoading_withNativeBrowserUrl_withoutUserClick_shoul
 
     @Test
     public void shouldOverrideUrlLoading_withInAppBrowserUrl_withoutUserClick_shouldDoNothing() throws Exception {
-        assertNothingHappensWithoutClick("http://twitter.com");
+        assertNothingHappensWithoutClick("https://twitter.com");
     }
 
     @Test
@@ -346,14 +352,15 @@ public void shouldOverrideUrlLoading_withDeepLinkUrl_withoutUserClick_shouldDoNo
     public void onPageStarted_whenLoadedUrlStartsWithRedirect_withUserClick_shouldOpenInBrowser() throws Exception {
         String url = "redirectUrlToLoad";
         stub(htmlWebView.wasClicked()).toReturn(true);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, "redirect");
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, "redirect", "dsp_creative_id");
         WebView view = mock(WebView.class);
         subject.onPageStarted(view, url, null);
 
         verify(view).stopLoading();
 
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(intent.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(url);
+        assertThat(intent.getStringExtra(MoPubBrowser.DSP_CREATIVE_ID)).isEqualTo("dsp_creative_id");
         assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
         assertThat(intent.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser");
     }
@@ -362,13 +369,13 @@ public void onPageStarted_whenLoadedUrlStartsWithRedirect_withUserClick_shouldOp
     public void onPageStarted_whenLoadedUrlStartsWithRedirect_withoutUserClick_shouldOpenInBrowser() throws Exception {
         String url = "redirectUrlToLoad";
         stub(htmlWebView.wasClicked()).toReturn(false);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, "redirect");
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, "redirect", "dsp_creative_id");
         WebView view = mock(WebView.class);
         subject.onPageStarted(view, url, null);
 
         verify(view).stopLoading();
 
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
+        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
     }
 
     @Test
@@ -380,7 +387,7 @@ public void onPageStarted_whenLoadedUrlStartsWithRedirectAndHasClickthrough_with
 
         verify(view).stopLoading();
 
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(intent.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(url);
         assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
         assertThat(intent.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser");
@@ -395,7 +402,7 @@ public void onPageStarted_whenLoadedUrlStartsWithRedirectAndHasClickthrough_with
 
         verify(view).stopLoading();
 
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
+        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
     }
 
     @Test
@@ -410,7 +417,7 @@ public void onPageStarted_whenLoadedUrlStartsWithRedirectAndHasClickthrough_with
                 .doNothing()
                 .when(mockContext).startActivity(any(Intent.class));
 
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, CLICKTHROUGH_URL, "redirect");
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, CLICKTHROUGH_URL, "redirect", "dsp_creative_id");
         subject.onPageStarted(htmlWebView, url, null);
 
         ArgumentCaptor<Intent> intentArgumentCaptor = ArgumentCaptor.forClass(Intent.class);
@@ -429,7 +436,7 @@ public void onPageStarted_whenLoadedUrlDoesntStartWithRedirect_shouldDoNothing()
 
         verify(view, never()).stopLoading();
 
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
+        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
     }
 
     private void assertPhoneUrlStartedCorrectIntent(String url) {
@@ -437,7 +444,7 @@ private void assertPhoneUrlStartedCorrectIntent(String url) {
 
         stub(htmlWebView.wasClicked()).toReturn(true);
         didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, url);
-        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent startedActivity = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(startedActivity.getAction()).isEqualTo(Intent.ACTION_VIEW);
         assertThat(startedActivity.getData().toString()).isEqualTo(url);
         assertThat(didOverrideUrl).isTrue();
@@ -448,7 +455,7 @@ private void assertPhoneUrlStartedCorrectIntent(String url) {
 
         stub(htmlWebView.wasClicked()).toReturn(false);
         didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, url);
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
+        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
         assertThat(didOverrideUrl).isTrue();
         verify(htmlWebViewListener, never()).onClicked();
         verify(htmlWebView, never()).onResetUserClick();
@@ -463,7 +470,7 @@ private void assertNothingHappensWithoutClick(final String url) {
 
         verify(htmlWebViewListener, never()).onClicked();
         verify(htmlWebView, never()).onResetUserClick();
-        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent startedActivity = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(startedActivity).isNull();
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
index 4dd42595..14308b95 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
@@ -21,7 +21,11 @@
 import org.mockito.ArgumentCaptor;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.shadows.ShadowLocalBroadcastManager;
+import org.robolectric.annotation.Config;
+import org.robolectric.internal.ShadowExtractor;
+import org.robolectric.shadows.ShadowActivity;
+import org.robolectric.shadows.ShadowApplication;
+import org.robolectric.shadows.support.v4.ShadowLocalBroadcastManager;
 import org.robolectric.util.ActivityController;
 
 import static com.mopub.common.DataKeys.CLICKTHROUGH_URL_KEY;
@@ -34,7 +38,6 @@
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.getHtmlInterstitialIntentFilter;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 import static org.fest.assertions.api.Assertions.assertThat;
@@ -45,15 +48,15 @@
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
-import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class MoPubActivityTest {
     private static final String EXPECTED_HTML_DATA = "htmlData";
     private static final boolean EXPECTED_IS_SCROLLABLE = true;
     @Mock private AdReport mockAdReport;
     private static final String EXPECTED_REDIRECT_URL = "redirectUrl";
-    private static final String EXPECTED_CLICKTHROUGH_URL = "http://expected_url";
+    private static final String EXPECTED_CLICKTHROUGH_URL = "https://expected_url";
     private static final CreativeOrientation EXPECTED_ORIENTATION = CreativeOrientation.PORTRAIT;
 
     @Mock private BroadcastReceiver broadcastReceiver;
@@ -77,7 +80,9 @@ public void setUp() throws Exception {
 
         final ActivityController<MoPubActivity> subjectController = Robolectric.buildActivity(MoPubActivity.class).withIntent(moPubActivityIntent);
         subject = subjectController.get();
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
+        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver,
+                new EventForwardingBroadcastReceiver(customEventInterstitialListener,
+                        testBroadcastIdentifier).getIntentFilter());
         subjectController.create();
 
         customEventInterstitialListener = mock(CustomEventInterstitialListener.class);
@@ -99,6 +104,14 @@ public void preRenderHtml_shouldPreloadTheHtml() throws Exception {
         verify(htmlInterstitialWebView).loadHtmlResponse(htmlData);
     }
 
+    @Test
+    public void preRenderHtml_shouldEnableJavascriptCachingForDummyWebView() {
+        MoPubActivity.preRenderHtml(subject, mockAdReport, customEventInterstitialListener,
+                "html_data");
+
+        verify(htmlInterstitialWebView).enableJavascriptCaching();
+    }
+
     @Test
     public void preRenderHtml_shouldHaveAWebViewClientThatForwardsFinishLoad() throws Exception {
         MoPubActivity.preRenderHtml(subject, mockAdReport, customEventInterstitialListener, null);
@@ -181,7 +194,7 @@ public void onDestroy_shouldFireJavascriptWebviewDidClose() throws Exception {
     public void start_shouldStartMoPubActivityWithCorrectParameters() throws Exception {
         MoPubActivity.start(subject, "expectedResponse", mockAdReport, true, "redirectUrl", "clickthroughUrl", CreativeOrientation.PORTRAIT, testBroadcastIdentifier);
 
-        Intent nextStartedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent nextStartedActivity = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(nextStartedActivity.getStringExtra(HTML_RESPONSE_BODY_KEY)).isEqualTo("expectedResponse");
         assertThat(nextStartedActivity.getBooleanExtra(SCROLLABLE_KEY, false)).isTrue();
         assertThat(nextStartedActivity.getStringExtra(REDIRECT_URL_KEY)).isEqualTo("redirectUrl");
@@ -208,7 +221,9 @@ public void getAdView_shouldCreateHtmlInterstitialWebViewAndLoadResponse() throw
     public void getAdView_shouldSetUpForBroadcastingClicks() throws Exception {
         subject.getAdView();
         BroadcastReceiver broadcastReceiver = mock(BroadcastReceiver.class);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
+        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver,
+                new EventForwardingBroadcastReceiver(customEventInterstitialListener,
+                        testBroadcastIdentifier).getIntentFilter());
 
         TestHtmlInterstitialWebViewFactory.getLatestListener().onInterstitialClicked();
 
@@ -222,7 +237,9 @@ public void getAdView_shouldSetUpForBroadcastingClicks() throws Exception {
     public void getAdView_shouldSetUpForBroadcastingFail() throws Exception {
         subject.getAdView();
         BroadcastReceiver broadcastReceiver = mock(BroadcastReceiver.class);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
+        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver,
+                new EventForwardingBroadcastReceiver(customEventInterstitialListener,
+                        testBroadcastIdentifier).getIntentFilter());
 
         TestHtmlInterstitialWebViewFactory.getLatestListener().onInterstitialFailed(UNSPECIFIED);
 
@@ -231,7 +248,7 @@ public void getAdView_shouldSetUpForBroadcastingFail() throws Exception {
         Intent intent = intentCaptor.getValue();
         assertThat(intent.getAction()).isEqualTo(ACTION_INTERSTITIAL_FAIL);
 
-        assertThat(shadowOf(subject).isFinishing()).isTrue();
+        assertThat(subject.isFinishing()).isTrue();
     }
 
     @Test
@@ -251,7 +268,7 @@ public void broadcastingInterstitialListener_onInterstitialFailed_shouldBroadcas
         broadcastingInterstitialListener.onInterstitialFailed(null);
 
         verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
-        assertThat(shadowOf(subject).isFinishing()).isTrue();
+        assertThat(((ShadowActivity) ShadowExtractor.extract(subject)).isFinishing()).isTrue();
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java
index 6052109a..8e0af80a 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java
@@ -6,7 +6,6 @@
 import com.mopub.network.MoPubRequestQueue;
 import com.mopub.network.Networking;
 import com.mopub.network.TrackingRequest;
-import com.mopub.volley.RequestQueue;
 import com.mopub.volley.VolleyError;
 
 import org.junit.Before;
@@ -15,6 +14,7 @@
 import org.mockito.ArgumentCaptor;
 import org.mockito.Captor;
 import org.mockito.Mock;
+import org.robolectric.annotation.Config;
 
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.never;
@@ -22,6 +22,7 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class MoPubConversionTrackerTest {
     private MoPubConversionTracker subject;
     private Activity context;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
index 67e4752b..2c0b3f95 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
@@ -2,8 +2,6 @@
 
 import android.app.Activity;
 
-import com.mopub.common.LocationService;
-import com.mopub.common.MoPub;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestAdViewControllerFactory;
 import com.mopub.mobileads.test.support.TestCustomEventInterstitialAdapterFactory;
@@ -13,6 +11,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 
 import java.math.BigDecimal;
 import java.util.HashMap;
@@ -31,6 +30,7 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class MoPubInterstitialTest {
 
     private static final String KEYWORDS_VALUE = "expected_keywords";
@@ -105,13 +105,6 @@ public void getInterstitialAdListenerTest() throws Exception {
         assertThat(subject.getInterstitialAdListener()).isSameAs(interstitialAdListener);
     }
 
-    @Test
-    public void setLocationAwarenss_shouldChangeGlobalSetting() {
-        assertThat(MoPub.getLocationAwareness()).isEqualTo(MoPub.LocationAwareness.NORMAL);
-        subject.setLocationAwareness(LocationService.LocationAwareness.DISABLED);
-        assertThat(MoPub.getLocationAwareness()).isEqualTo(MoPub.LocationAwareness.DISABLED);
-    }
-
     @Test
     public void getTestingTest() throws Exception {
         subject.setInterstitialView(interstitialView);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
index 9ffe543d..e23063a6 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
@@ -1,6 +1,7 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
+import android.net.Uri;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
@@ -12,28 +13,37 @@
 import com.mopub.network.AdResponse;
 import com.mopub.network.MoPubRequestQueue;
 import com.mopub.network.Networking;
+import com.mopub.volley.Request;
 import com.mopub.volley.VolleyError;
 
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.ArgumentMatcher;
 import org.mockito.Mock;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowLooper;
 
 import java.util.Map;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyString;
+import static org.mockito.Matchers.argThat;
 import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class
         MoPubRewardedVideoManagerTest {
 
@@ -67,7 +77,35 @@ public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {
     @After
     public void tearDown() {
         // Unpause the main looper in case a test terminated while the looper was paused.
-        Robolectric.unPauseMainLooper();
+        ShadowLooper.unPauseMainLooper();
+    }
+
+    @Test
+    public void loadVideo_withRequestParameters_shouldGenerateUrlWithKeywords() {
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", new MoPubRewardedVideoManager.RequestParameters("nonsense;garbage;keywords"));
+
+        verify(mockRequestQueue).add(argThat(new RequestUrlContains(Uri.encode("nonsense;garbage;keywords"))));
+
+        // Finish the request
+        requestListener.onErrorResponse(new VolleyError("end test"));
+    }
+
+    @Test
+    public void loadVideo_withCustomerIdInRequestParameters_shouldSetCustomerId() {
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", new MoPubRewardedVideoManager.RequestParameters("keywords", null, "testCustomerId"));
+
+        assertThat(MoPubRewardedVideoManager.getRewardedVideoData().getCustomerId()).isEqualTo("testCustomerId");
+
+        // Finish the request
+        requestListener.onErrorResponse(new VolleyError("end test"));
     }
 
     @Test
@@ -82,18 +120,19 @@ public void callbackMethods_withNullListener_shouldNotError() {
 
         // Robolectric executes its handlers immediately, so if we want the async behavior we see
         // in an actual app we have to pause the main looper until we're done successfully loading the ad.
-        Robolectric.pauseMainLooper();
+        ShadowLooper.pauseMainLooper();
 
-        MoPubRewardedVideoManager.loadVideo("testAdUnit");
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
         // Triggers a call to MoPubRewardedVideoManager.onRewardedVideoLoadSuccess
         requestListener.onSuccess(testResponse);
 
-        Robolectric.unPauseMainLooper();
+        ShadowLooper.unPauseMainLooper();
 
         MoPubRewardedVideoManager.onRewardedVideoClicked(TestCustomEvent.class, "id!");
         MoPubRewardedVideoManager.onRewardedVideoStarted(TestCustomEvent.class, "id!");
         MoPubRewardedVideoManager.onRewardedVideoClosed(TestCustomEvent.class, "id!");
-        MoPubRewardedVideoManager.onRewardedVideoCompleted(TestCustomEvent.class, "id!", MoPubReward.success("test", 111));
+        MoPubRewardedVideoManager.onRewardedVideoCompleted(TestCustomEvent.class, "id!",
+                MoPubReward.success("test", 111));
 
         // The test passed because none of the above calls thew an exception even though the listener is null.
     }
@@ -108,7 +147,7 @@ public void onAdSuccess_noActivityFound_shouldNotCallFailUrl() {
                 .build();
 
         MoPubRewardedVideoManager.updateActivity(null);
-        MoPubRewardedVideoManager.loadVideo("testAdUnit");
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
         requestListener.onSuccess(testResponse);
 
         verify(mockRequestQueue).add(any(AdRequest.class));
@@ -125,11 +164,12 @@ public void onAdSuccess_noCEFound_shouldCallFailCallback() throws Exception {
                 .setCustomEventClassName("doesn't_Exist")
                 .build();
 
-        MoPubRewardedVideoManager.loadVideo("testAdUnit");
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
 
         requestListener.onSuccess(testResponse);
 
-        verify(mockVideoListener).onRewardedVideoLoadFailure(eq("testAdUnit"), eq(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR));
+        verify(mockVideoListener).onRewardedVideoLoadFailure(eq("testAdUnit"),
+                eq(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR));
         verifyNoMoreInteractions(mockVideoListener);
     }
 
@@ -141,7 +181,7 @@ public void onAdSuccess_noCEFound_shouldLoadFailUrl() {
                 .setFailoverUrl("fail.url")
                 .build();
 
-        MoPubRewardedVideoManager.loadVideo("testAdUnit");
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
 
         assertThat(request.getUrl()).contains("testAdUnit");
         requestListener.onSuccess(testResponse);
@@ -153,24 +193,94 @@ public void onAdSuccess_noCEFound_shouldLoadFailUrl() {
     @Test
     public void onAdSuccess_shouldInstantiateCustomEvent_andLoad() {
         AdResponse testResponse = new AdResponse.Builder()
-                .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setCustomEventClassName(
+                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
                 .setAdType(AdType.CUSTOM)
                 .build();
 
         // Robolectric executes its handlers immediately, so if we want the async behavior we see
         // in an actual app we have to pause the main looper until we're done successfully loading the ad.
-        Robolectric.pauseMainLooper();
+        ShadowLooper.pauseMainLooper();
 
-        MoPubRewardedVideoManager.loadVideo("testAdUnit");
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
         requestListener.onSuccess(testResponse);
 
-        Robolectric.unPauseMainLooper();
+        ShadowLooper.unPauseMainLooper();
 
         assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
         verify(mockVideoListener).onRewardedVideoLoadSuccess(eq("testAdUnit"));
         verifyNoMoreInteractions(mockVideoListener);
     }
 
+    @Test
+    public void onAdSuccess_withCustomEventAlreadyLoaded_shouldInvalidateOldCustomEvent() throws Exception {
+        final CustomEventRewardedVideo mockCustomEvent = mock(CustomEventRewardedVideo.class);
+        MoPubRewardedVideoManager.getRewardedVideoData().updateAdUnitCustomEventMapping(
+                "testAdUnit", mockCustomEvent, null, "id!");
+
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName(
+                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setAdType(AdType.CUSTOM)
+                .build();
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        // Load the first custom event
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
+
+        ShadowLooper.unPauseMainLooper();
+
+        // Verify the first custom event
+        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
+        verify(mockVideoListener).onRewardedVideoLoadSuccess(eq("testAdUnit"));
+        verifyNoMoreInteractions(mockVideoListener);
+        reset(mockVideoListener);
+
+        ShadowLooper.pauseMainLooper();
+
+        // Load the second custom event
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
+
+        ShadowLooper.unPauseMainLooper();
+
+        // Verify the second custom event was loaded
+        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
+        verify(mockVideoListener).onRewardedVideoLoadSuccess(eq("testAdUnit"));
+        verifyNoMoreInteractions(mockVideoListener);
+
+        // Verify that the first custom event was invalidated
+        verify(mockCustomEvent).onInvalidate();
+        verifyNoMoreInteractions(mockCustomEvent);
+    }
+
+    @Test
+    public void onAdSuccess_shouldUpdateAdUnitRewardMapping() throws Exception {
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName(
+                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setAdType(AdType.CUSTOM)
+                .setRewardedVideoCurrencyName("currency_name")
+                .setRewardedVideoCurrencyAmount("123")
+                .build();
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
+
+        MoPubReward moPubReward =
+                MoPubRewardedVideoManager.getRewardedVideoData().getMoPubReward("testAdUnit");
+        assertThat(moPubReward.getAmount()).isEqualTo(123);
+        assertThat(moPubReward.getLabel()).isEqualTo("currency_name");
+    }
+
     @Test
     public void playVideo_shouldSetHasVideoFalse() {
         AdResponse testResponse = new AdResponse.Builder()
@@ -180,12 +290,12 @@ public void playVideo_shouldSetHasVideoFalse() {
 
         // Robolectric executes its handlers immediately, so if we want the async behavior we see
         // in an actual app we have to pause the main looper until we're done successfully loading the ad.
-        Robolectric.pauseMainLooper();
+        ShadowLooper.pauseMainLooper();
 
-        MoPubRewardedVideoManager.loadVideo("testAdUnit");
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
         requestListener.onSuccess(testResponse);
 
-        Robolectric.unPauseMainLooper();
+        ShadowLooper.unPauseMainLooper();
 
         assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
         MoPubRewardedVideoManager.showVideo("testAdUnit");
@@ -195,6 +305,7 @@ public void playVideo_shouldSetHasVideoFalse() {
     }
     
     @Test
+    @Ignore("Flaky")
     public void playVideo_whenNotHasVideo_shouldFail() {
         AdResponse testResponse = new AdResponse.Builder()
                 .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$NoVideoCustomEvent")
@@ -203,12 +314,12 @@ public void playVideo_whenNotHasVideo_shouldFail() {
 
         // Robolectric executes its handlers immediately, so if we want the async behavior we see
         // in an actual app we have to pause the main looper until we're done successfully loading the ad.
-        Robolectric.pauseMainLooper();
+        ShadowLooper.pauseMainLooper();
 
-        MoPubRewardedVideoManager.loadVideo("testAdUnit");
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
         requestListener.onSuccess(testResponse);
 
-        Robolectric.unPauseMainLooper();
+        ShadowLooper.unPauseMainLooper();
 
         verify(mockVideoListener).onRewardedVideoLoadFailure(eq("testAdUnit"), eq(MoPubErrorCode.NETWORK_NO_FILL));
 
@@ -217,11 +328,39 @@ public void playVideo_whenNotHasVideo_shouldFail() {
         verify(mockVideoListener).onRewardedVideoLoadFailure(eq("testAdUnit"), eq(MoPubErrorCode.VIDEO_NOT_AVAILABLE));
     }
 
+    @Test
+    @Ignore("Flaky")
+    public void playVideo_shouldUpdateLastShownCustomEventRewardMapping() throws Exception {
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName(
+                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setAdType(AdType.CUSTOM)
+                .setRewardedVideoCurrencyName("currency_name")
+                .setRewardedVideoCurrencyAmount("123")
+                .build();
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        requestListener.onSuccess(testResponse);
+
+        ShadowLooper.unPauseMainLooper();
+
+        MoPubRewardedVideoManager.showVideo("testAdUnit");
+
+        MoPubReward moPubReward =
+                MoPubRewardedVideoManager.getRewardedVideoData().getLastShownMoPubReward(TestCustomEvent.class);
+        assertThat(moPubReward.getAmount()).isEqualTo(123);
+        assertThat(moPubReward.getLabel()).isEqualTo("currency_name");
+    }
+
     @Test
     public void onAdFailure_shouldCallFailCallback() {
         VolleyError e = new VolleyError("testError!");
 
-        MoPubRewardedVideoManager.loadVideo("testAdUnit");
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
 
         assertThat(request.getUrl()).contains("testAdUnit");
         requestListener.onErrorResponse(e);
@@ -229,6 +368,26 @@ public void onAdFailure_shouldCallFailCallback() {
         verifyNoMoreInteractions(mockVideoListener);
     }
 
+    @Test
+    public void chooseReward_shouldReturnMoPubRewardOverNetworkReward() throws Exception {
+        MoPubReward moPubReward = MoPubReward.success("mopub_reward", 123);
+        MoPubReward networkReward = MoPubReward.success("network_reward", 456);
+
+        MoPubReward chosenReward =
+                MoPubRewardedVideoManager.chooseReward(moPubReward, networkReward);
+        assertThat(chosenReward).isEqualTo(moPubReward);
+    }
+
+    @Test
+    public void chooseReward_withNetworkRewardNotSuccessful_shouldReturnNetworkReward() throws Exception {
+        MoPubReward moPubReward = MoPubReward.success("mopub_reward", 123);
+        MoPubReward networkReward = MoPubReward.failure();
+
+        MoPubReward chosenReward =
+                MoPubRewardedVideoManager.chooseReward(moPubReward, networkReward);
+        assertThat(chosenReward).isEqualTo(networkReward);
+    }
+
     public static class TestCustomEvent extends CustomEventRewardedVideo {
         protected boolean mPlayable = false;
 
@@ -291,4 +450,19 @@ protected void loadWithSdkInitialized(@NonNull final Activity activity,
             MoPubRewardedVideoManager.onRewardedVideoLoadFailure(NoVideoCustomEvent.class, "id!", MoPubErrorCode.NETWORK_NO_FILL);
         }
     }
+
+    private static class RequestUrlContains extends ArgumentMatcher<Request> {
+
+        private final String mMustContain;
+
+        RequestUrlContains(String stringToFind) {
+            mMustContain = stringToFind;
+        }
+
+        @Override
+        public boolean matches(final Object argument) {
+            return argument instanceof Request
+                    && ((Request) argument).getUrl().contains(mMustContain);
+        }
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java
new file mode 100644
index 00000000..5d64984d
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java
@@ -0,0 +1,205 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+
+import com.mopub.common.DataKeys;
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.TreeMap;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.mockito.Mockito.verifyZeroInteractions;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class MoPubRewardedVideoTest {
+
+    private Activity activity;
+    private MoPubRewardedVideo subject;
+
+    @Mock private RewardedVastVideoInterstitial mockRewardedVastVideoInterstitial;
+
+    @Before
+    public void setup() {
+        activity = Robolectric.buildActivity(Activity.class).create().get();
+        MoPubRewardedVideoManager.init(activity);
+
+        subject = new MoPubRewardedVideo();
+    }
+
+    @Test
+    public void onInvalidate_withVastVideoInterstitial_shouldInvalidateVastVideoInterstitial() {
+        subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
+
+        subject.onInvalidate();
+
+        verify(mockRewardedVastVideoInterstitial).onInvalidate();
+        verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
+    }
+
+    @Test
+    public void onInvalidate_withNullVastVideoInterstitial_shouldNotInvalidateVastVideoInterstitial() {
+        subject.onInvalidate();
+
+        verifyZeroInteractions(mockRewardedVastVideoInterstitial);
+    }
+
+    @Test
+    public void loadWithSdkInitialized_withLocalExtrasIncomplete_shouldLoadVastVideoInterstitial() throws Exception {
+        subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
+        subject.loadWithSdkInitialized(activity, new TreeMap<String, Object>(),
+                new HashMap<String, String>());
+
+        verify(mockRewardedVastVideoInterstitial).loadInterstitial(eq(activity), any(
+                        CustomEventInterstitial.CustomEventInterstitialListener.class),
+                eq(new TreeMap<String, Object>()),
+                eq(new HashMap<String, String>()));
+        verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
+        assertThat(subject.getRewardedVideoCurrencyName()).isEqualTo("");
+        assertThat(subject.getRewardedVideoCurrencyAmount()).isEqualTo(0);
+    }
+
+    @Test
+    public void loadWithSdkInitialized_withRewardedVideoCurrencyNameIncorrectType_shouldLoadVastVideoInterstitial_shouldSetCurrencyNameToEmptyString() throws Exception {
+        subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
+        final Map<String, Object> localExtras = new TreeMap<String, Object>();
+        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_NAME_KEY, new Object());
+        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_AMOUNT_STRING_KEY, "10");
+
+        subject.loadWithSdkInitialized(activity, localExtras, new HashMap<String, String>());
+
+        verify(mockRewardedVastVideoInterstitial).loadInterstitial(eq(activity), any(
+                        CustomEventInterstitial.CustomEventInterstitialListener.class),
+                eq(localExtras),
+                eq(new HashMap<String, String>()));
+        verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
+        assertThat(subject.getRewardedVideoCurrencyName()).isEqualTo("");
+        assertThat(subject.getRewardedVideoCurrencyAmount()).isEqualTo(10);
+    }
+
+    @Test
+    public void loadWithSdkInitialized_withRewardedVideoCurrencyAmountIncorrectType_shouldLoadVastVideoInterstitial_shouldSetCurrencyAmountToZero() throws Exception {
+        subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
+        final Map<String, Object> localExtras = new TreeMap<String, Object>();
+        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_NAME_KEY, "currencyName");
+        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_AMOUNT_STRING_KEY, new Object());
+
+        subject.loadWithSdkInitialized(activity, localExtras, new HashMap<String, String>());
+
+        verify(mockRewardedVastVideoInterstitial).loadInterstitial(eq(activity), any(
+                        CustomEventInterstitial.CustomEventInterstitialListener.class),
+                eq(localExtras),
+                eq(new HashMap<String, String>()));
+        verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
+        assertThat(subject.getRewardedVideoCurrencyName()).isEqualTo("currencyName");
+        assertThat(subject.getRewardedVideoCurrencyAmount()).isEqualTo(0);
+    }
+
+    @Test
+    public void loadWithSdkInitialized_withRewardedVideoCurrencyAmountNotInteger_shouldLoadVastVideoInterstitial_shouldSetCurrencyAmountToZero() throws Exception {
+        subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
+        final Map<String, Object> localExtras = new TreeMap<String, Object>();
+        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_NAME_KEY, "currencyName");
+        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_AMOUNT_STRING_KEY, "foo");
+
+        subject.loadWithSdkInitialized(activity, localExtras, new HashMap<String, String>());
+
+        verify(mockRewardedVastVideoInterstitial).loadInterstitial(eq(activity), any(
+                        CustomEventInterstitial.CustomEventInterstitialListener.class),
+                eq(localExtras),
+                eq(new HashMap<String, String>()));
+        verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
+        assertThat(subject.getRewardedVideoCurrencyName()).isEqualTo("currencyName");
+        assertThat(subject.getRewardedVideoCurrencyAmount()).isEqualTo(0);
+    }
+
+    @Test
+    public void loadWithSdkInitialized_withRewardedVideoCurrencyAmountNegative_shouldLoadVastVideoInterstitial_shouldSetCurrencyAmountToZero() throws Exception {
+        subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
+        final Map<String, Object> localExtras = new TreeMap<String, Object>();
+        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_NAME_KEY, "currencyName");
+        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_AMOUNT_STRING_KEY, "-42");
+
+        subject.loadWithSdkInitialized(activity, localExtras, new HashMap<String, String>());
+
+        verify(mockRewardedVastVideoInterstitial).loadInterstitial(eq(activity), any(
+                        CustomEventInterstitial.CustomEventInterstitialListener.class),
+                eq(localExtras),
+                eq(new HashMap<String, String>()));
+        verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
+        assertThat(subject.getRewardedVideoCurrencyName()).isEqualTo("currencyName");
+        assertThat(subject.getRewardedVideoCurrencyAmount()).isEqualTo(0);
+    }
+
+    @Test
+    public void loadWithSdkInitialized_withCorrectLocalExtras_shouldLoadVastVideoInterstitial() throws Exception {
+        subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
+        final Map<String, Object> localExtras = new TreeMap<String, Object>();
+        final Map<String, String> serverExtras = new HashMap<String, String>();
+        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_NAME_KEY, "currencyName");
+        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_AMOUNT_STRING_KEY, "10");
+
+        subject.loadWithSdkInitialized(activity, localExtras, serverExtras);
+
+        verify(mockRewardedVastVideoInterstitial).loadInterstitial(eq(activity),
+                any(CustomEventInterstitial.CustomEventInterstitialListener.class), eq(localExtras),
+                eq(serverExtras));
+        verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
+        assertThat(subject.getRewardedVideoCurrencyName()).isEqualTo("currencyName");
+        assertThat(subject.getRewardedVideoCurrencyAmount()).isEqualTo(10);
+    }
+
+    @Test
+    public void loadWithSdkInitialized_withEmptyCurrencyName_withNegativeCurrencyAmount_shouldLoadVastVideoInterstitial_shouldNotChangeCurrencyName_shouldSetCurrencyAmountToZero() throws Exception {
+        // We pass whatever was sent to this custom event to the app as long as it exists, but
+        // if the currency value is negative, set it to 0
+        subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
+        final Map<String, Object> localExtras = new TreeMap<String, Object>();
+        final Map<String, String> serverExtras = new HashMap<String, String>();
+        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_NAME_KEY, "");
+        localExtras.put(DataKeys.REWARDED_VIDEO_CURRENCY_AMOUNT_STRING_KEY, "-10");
+
+        subject.loadWithSdkInitialized(activity, localExtras, serverExtras);
+
+        verify(mockRewardedVastVideoInterstitial).loadInterstitial(eq(activity),
+                any(CustomEventInterstitial.CustomEventInterstitialListener.class), eq(localExtras),
+                eq(serverExtras));
+        verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
+        assertThat(subject.getRewardedVideoCurrencyName()).isEqualTo("");
+        assertThat(subject.getRewardedVideoCurrencyAmount()).isEqualTo(0);
+    }
+
+    @Test
+    public void showVideo_withVideoLoaded_shouldShowVastVideoInterstitial() {
+        subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
+        subject.setIsLoaded(true);
+
+        subject.showVideo();
+
+        verify(mockRewardedVastVideoInterstitial).showInterstitial();
+        verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
+    }
+
+    @Test
+    public void showVideo_withVideoNotLoaded_shouldDoNothing() {
+        subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
+        subject.setIsLoaded(false);
+
+        subject.showVideo();
+
+        verifyZeroInteractions(mockRewardedVastVideoInterstitial);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubShadowMediaPlayer.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubShadowMediaPlayer.java
new file mode 100644
index 00000000..eb0820e6
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubShadowMediaPlayer.java
@@ -0,0 +1,25 @@
+package com.mopub.mobileads;
+
+import android.media.MediaPlayer;
+
+import org.robolectric.annotation.Implements;
+import org.robolectric.shadows.ShadowMediaPlayer;
+import org.robolectric.shadows.util.DataSource;
+
+/**
+ */
+@Implements(MediaPlayer.class)
+public class MoPubShadowMediaPlayer extends ShadowMediaPlayer {
+
+    /*
+     * Override to avoid the "no setup extension" that Robo 3.0 ShadowMediaPlayer gives you.
+     */
+    @Override
+    public void doSetDataSource(final DataSource dataSource) {
+        MediaInfo stubMediaInfo = new MediaInfo(123, 123);
+        if (getMediaInfo(dataSource) == null) {
+            addMediaInfo(dataSource, stubMediaInfo);
+        }
+        super.doSetDataSource(dataSource);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
index 4bab198e..16fd1507 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
@@ -5,8 +5,6 @@
 import android.content.Intent;
 import android.view.View;
 
-import com.mopub.common.LocationService;
-import com.mopub.common.MoPub;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestAdViewControllerFactory;
 import com.mopub.mobileads.test.support.TestCustomEventBannerAdapterFactory;
@@ -15,6 +13,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowApplication;
 
 import java.util.HashMap;
@@ -29,6 +28,7 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class MoPubViewTest {
     private MoPubView subject;
     private Map<String,String> paramsMap = new HashMap<String, String>();
@@ -191,15 +191,8 @@ public void loadCustomEvent_whenParamsMapIsNull_shouldCallLoadFailUrl() throws E
         verify(customEventBannerAdapter, never()).loadAd();
     }
 
-    @Test
-    public void setLocationAwarenss_shouldChangeGlobalSetting() {
-        assertThat(MoPub.getLocationAwareness()).isEqualTo(MoPub.LocationAwareness.NORMAL);
-        subject.setLocationAwareness(LocationService.LocationAwareness.DISABLED);
-        assertThat(MoPub.getLocationAwareness()).isEqualTo(MoPub.LocationAwareness.DISABLED);
-    }
-
     private void broadcastIntent(final Intent intent) {
-        final List<ShadowApplication.Wrapper> wrappers = Robolectric.getShadowApplication().getRegisteredReceivers();
+        final List<ShadowApplication.Wrapper> wrappers = ShadowApplication.getInstance().getRegisteredReceivers();
 
         for (final ShadowApplication.Wrapper wrapper : wrappers) {
             wrapper.broadcastReceiver.onReceive(context, intent);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
index 84737b46..dc0602f1 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
@@ -1,5 +1,6 @@
 package com.mopub.mobileads;
 
+import android.app.Activity;
 import android.content.BroadcastReceiver;
 import android.content.ComponentName;
 import android.content.Context;
@@ -25,8 +26,9 @@
 import org.mockito.ArgumentCaptor;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
+import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowLocalBroadcastManager;
+import org.robolectric.shadows.support.v4.ShadowLocalBroadcastManager;
 import org.robolectric.util.ActivityController;
 
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
@@ -34,7 +36,6 @@
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.getHtmlInterstitialIntentFilter;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
@@ -42,50 +43,70 @@
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
-import static org.robolectric.Robolectric.shadowOf;
+
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class MraidActivityTest {
     static final String EXPECTED_SOURCE = "expected source";
+    static final String HTML_DATA = "html_data";
 
-    @Mock MraidWebView mraidWebView;
+    @Mock MraidWebView mockMraidWebView;
     @Mock MraidBridge mraidBridge;
     @Mock MraidController mraidController;
     @Mock CustomEventInterstitial.CustomEventInterstitialListener
             customEventInterstitialListener;
     @Mock BroadcastReceiver broadcastReceiver;
 
+    Context context;
+
+    // These fields are relics of a previous version of this class (all tests using them have since
+    // been deprecated).
+    MraidActivity subject;
+    ActivityController<MraidActivity> activityController;
+
     long testBroadcastIdentifier = 2222;
 
-    ActivityController<TestMraidActivity> activityController;
-    TestMraidActivity subject;
+    @Before
+    public void setUp() throws Exception {
+        context = Robolectric.buildActivity(Activity.class).create().get();
+    }
 
-    // Make a concrete version of the abstract class for testing purposes.
-    private static class TestMraidActivity extends MraidActivity {
-        View mraidWebView;
+    @Test
+    public void preRenderHtml_shouldEnableJavascriptCachingForDummyWebView() {
+        MraidActivity.preRenderHtml(customEventInterstitialListener, HTML_DATA, mockMraidWebView);
 
-        @Override
-        public View getAdView() {
-            return mraidWebView;
-        }
+        verify(mockMraidWebView).enableJavascriptCaching();
     }
 
-    @Before
-    public void setUp() throws Exception {
-        activityController = Robolectric.buildActivity(TestMraidActivity.class).start();
-        subject = activityController.get();
-        subject.mraidWebView = mraidWebView;
-        activityController.create();
+    @Test
+    public void preRenderHtml_shouldDisablePluginsForDummyWebView() {
+        MraidActivity.preRenderHtml(customEventInterstitialListener, HTML_DATA, mockMraidWebView);
+
+        verify(mockMraidWebView).enablePlugins(false);
+    }
+
+    @Test
+    public void preRenderHtml_shouldLoadHtml() {
+        MraidActivity.preRenderHtml(customEventInterstitialListener, HTML_DATA, mockMraidWebView);
+
+        verify(mockMraidWebView).loadDataWithBaseURL(
+                "http://ads.mopub.com/",
+                HTML_DATA,
+                "text/html",
+                "UTF-8",
+                null
+        );
     }
 
     @Ignore("Mraid 2.0")
     @Test
-    public void preRenderHtml_shouldDisablePluginsSetListenersAndLoadHtml() throws Exception {
+    public void preRenderHtml_shouldSetWebViewClient() throws Exception {
         MraidActivity.preRenderHtml(subject, customEventInterstitialListener, "3:27");
 
-        verify(mraidWebView).enablePlugins(eq(false));
+        verify(mockMraidWebView).enablePlugins(eq(false));
         verify(mraidController).setMraidListener(any(MraidListener.class));
-        verify(mraidWebView).setWebViewClient(any(WebViewClient.class));
+        verify(mockMraidWebView).setWebViewClient(any(WebViewClient.class));
         verify(mraidBridge).setContentHtml(eq("3:27"));
     }
 
@@ -123,7 +144,7 @@ public void preRenderHtml_whenWebViewClientShouldOverrideUrlLoading_shouldReturn
         MraidActivity.preRenderHtml(subject, customEventInterstitialListener, "");
 
         ArgumentCaptor<WebViewClient> webViewClientArgumentCaptor = ArgumentCaptor.forClass(WebViewClient.class);
-        verify(mraidWebView).setWebViewClient(webViewClientArgumentCaptor.capture());
+        verify(mockMraidWebView).setWebViewClient(webViewClientArgumentCaptor.capture());
         WebViewClient webViewClient = webViewClientArgumentCaptor.getValue();
 
         boolean consumeUrlLoading = webViewClient.shouldOverrideUrlLoading(null, null);
@@ -140,7 +161,7 @@ public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialLoaded_
         MraidActivity.preRenderHtml(subject, customEventInterstitialListener, "");
 
         ArgumentCaptor<WebViewClient> webViewClientArgumentCaptor = ArgumentCaptor.forClass(WebViewClient.class);
-        verify(mraidWebView).setWebViewClient(webViewClientArgumentCaptor.capture());
+        verify(mockMraidWebView).setWebViewClient(webViewClientArgumentCaptor.capture());
         WebViewClient webViewClient = webViewClientArgumentCaptor.getValue();
 
         webViewClient.onPageFinished(null, null);
@@ -161,7 +182,7 @@ public void onCreate_shouldSetContentView() throws Exception {
     public void onCreate_shouldSetupAnMraidView() throws Exception {
         subject.onCreate(null);
 
-        assertThat(getContentView().getChildAt(0)).isSameAs(mraidWebView);
+        assertThat(getContentView().getChildAt(0)).isSameAs(mockMraidWebView);
         verify(mraidController).setMraidListener(any(MraidListener.class));
 
         verify(mraidBridge).setContentHtml(EXPECTED_SOURCE);
@@ -174,30 +195,30 @@ public void onCreate_shouldSetLayoutOfMraidView() throws Exception {
 
         ArgumentCaptor<FrameLayout.LayoutParams> captor = ArgumentCaptor.forClass(
                 FrameLayout.LayoutParams.class);
-        verify(mraidWebView).setLayoutParams(captor.capture());
+        verify(mockMraidWebView).setLayoutParams(captor.capture());
         FrameLayout.LayoutParams actualLayoutParams = captor.getValue();
 
         assertThat(actualLayoutParams.width).isEqualTo(FrameLayout.LayoutParams.MATCH_PARENT);
         assertThat(actualLayoutParams.height).isEqualTo(FrameLayout.LayoutParams.MATCH_PARENT);
     }
 
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Config(sdk = VERSION_CODES.ICE_CREAM_SANDWICH)
     @Ignore("Mraid 2.0")
     @Test
     public void onCreate_atLeastIcs_shouldSetHardwareAcceleratedFlag() throws Exception {
         subject.onCreate(null);
 
-        boolean hardwareAccelerated = shadowOf(subject.getWindow()).getFlag(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
+        boolean hardwareAccelerated = Shadows.shadowOf(subject.getWindow()).getFlag(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
         assertThat(hardwareAccelerated).isTrue();
     }
 
-    @Config(reportSdk = VERSION_CODES.HONEYCOMB_MR2)
+    @Config(sdk = VERSION_CODES.HONEYCOMB_MR2)
     @Ignore("Mraid 2.0")
     @Test
     public void onCreate_beforeIcs_shouldNotSetHardwareAcceleratedFlag() throws Exception {
         subject.onCreate(null);
 
-        boolean hardwareAccelerated = shadowOf(subject.getWindow()).getFlag(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
+        boolean hardwareAccelerated = Shadows.shadowOf(subject.getWindow()).getFlag(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
         assertThat(hardwareAccelerated).isFalse();
     }
 
@@ -206,23 +227,24 @@ public void onCreate_beforeIcs_shouldNotSetHardwareAcceleratedFlag() throws Exce
     public void onDestroy_DestroyMraidView() throws Exception {
         Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, subject.getBroadcastIdentifier());
         ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver,
-                getHtmlInterstitialIntentFilter());
+                new EventForwardingBroadcastReceiver(customEventInterstitialListener,
+                        testBroadcastIdentifier).getIntentFilter());
 
         subject.onDestroy();
 
         verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
-        verify(mraidWebView).destroy();
+        verify(mockMraidWebView).destroy();
         assertThat(getContentView().getChildCount()).isEqualTo(0);
     }
 
     @Ignore("Mraid 2.0")
     @Test
     public void getAdView_shouldSetupOnReadyListener() throws Exception {
-        reset(mraidWebView);
+        reset(mockMraidWebView);
         ArgumentCaptor<MraidListener> captor = ArgumentCaptor.forClass(MraidListener.class);
         View actualAdView = subject.getAdView();
 
-        assertThat(actualAdView).isSameAs(mraidWebView);
+        assertThat(actualAdView).isSameAs(mockMraidWebView);
         verify(mraidController).setMraidListener(captor.capture());
 
         subject.hideInterstitialCloseButton();
@@ -232,33 +254,33 @@ public void getAdView_shouldSetupOnReadyListener() throws Exception {
     @Ignore("Mraid 2.0")
     @Test
     public void baseMraidListenerOnReady_shouldFireJavascriptWebViewDidAppear() throws Exception {
-        reset(mraidWebView);
+        reset(mockMraidWebView);
         ArgumentCaptor<MraidListener> captor = ArgumentCaptor.forClass(MraidListener.class);
         View actualAdView = subject.getAdView();
 
-        assertThat(actualAdView).isSameAs(mraidWebView);
+        assertThat(actualAdView).isSameAs(mockMraidWebView);
         verify(mraidController).setMraidListener(captor.capture());
 
         MraidListener baseMraidListener = captor.getValue();
         baseMraidListener.onLoaded(null);
 
-        verify(mraidWebView).loadUrl(eq("javascript:webviewDidAppear();"));
+        verify(mockMraidWebView).loadUrl(eq("javascript:webviewDidAppear();"));
     }
 
     @Ignore("Mraid 2.0")
     @Test
     public void baseMraidListenerOnClose_shouldFireJavascriptWebViewDidClose() throws Exception {
-        reset(mraidWebView);
+        reset(mockMraidWebView);
         ArgumentCaptor<MraidListener> captor = ArgumentCaptor.forClass(MraidListener.class);
         View actualAdView = subject.getAdView();
 
-        assertThat(actualAdView).isSameAs(mraidWebView);
+        assertThat(actualAdView).isSameAs(mockMraidWebView);
         verify(mraidController).setMraidListener(captor.capture());
 
         MraidListener baseMraidListener = captor.getValue();
         baseMraidListener.onClose();
 
-        verify(mraidWebView).loadUrl(eq("javascript:webviewDidClose();"));
+        verify(mockMraidWebView).loadUrl(eq("javascript:webviewDidClose();"));
     }
 
     @Ignore("Mraid 2.0")
@@ -266,14 +288,15 @@ public void baseMraidListenerOnClose_shouldFireJavascriptWebViewDidClose() throw
     public void baseMraidListenerOnOpen_shouldBroadcastClickEvent() throws Exception {
         Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_CLICK, testBroadcastIdentifier);
         ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver,
-                getHtmlInterstitialIntentFilter());
+                new EventForwardingBroadcastReceiver(customEventInterstitialListener,
+                        testBroadcastIdentifier).getIntentFilter());
 
-        reset(mraidWebView);
+        reset(mockMraidWebView);
 
         ArgumentCaptor<MraidListener> captor = ArgumentCaptor.forClass(MraidListener.class);
         View actualAdView = subject.getAdView();
 
-        assertThat(actualAdView).isSameAs(mraidWebView);
+        assertThat(actualAdView).isSameAs(mockMraidWebView);
         verify(mraidController).setMraidListener(captor.capture());
 
         MraidListener baseMraidListener = captor.getValue();
@@ -285,11 +308,11 @@ public void baseMraidListenerOnOpen_shouldBroadcastClickEvent() throws Exception
     @Ignore("Mraid 2.0")
     @Test
     public void getAdView_shouldSetupOnCloseListener() throws Exception {
-        reset(mraidWebView);
+        reset(mockMraidWebView);
         ArgumentCaptor<MraidListener> captor = ArgumentCaptor.forClass(MraidListener.class);
         View actualAdView = subject.getAdView();
 
-        assertThat(actualAdView).isSameAs(mraidWebView);
+        assertThat(actualAdView).isSameAs(mockMraidWebView);
         verify(mraidController).setMraidListener(captor.capture());
 
         captor.getValue().onClose();
@@ -302,16 +325,16 @@ public void getAdView_shouldSetupOnCloseListener() throws Exception {
     public void onPause_shouldOnPauseMraidView() throws Exception {
         activityController.pause();
 
-        verify(mraidWebView).onPause();
+        verify(mockMraidWebView).onPause();
     }
 
     @Ignore("Mraid 2.0")
     @Test
     public void onResume_shouldResumeMraidView() throws Exception {
         subject.onCreate(null);
-        Robolectric.shadowOf(subject).pauseAndThenResume();
+        Shadows.shadowOf(subject).pauseAndThenResume();
 
-        verify(mraidWebView).onResume();
+        verify(mockMraidWebView).onResume();
     }
 
     private Intent createMraidActivityIntent(String expectedSource) {
@@ -328,7 +351,9 @@ private Intent createMraidActivityIntent(String expectedSource) {
     @Test
     public void onCreate_shouldBroadcastInterstitialShow() throws Exception {
         Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, testBroadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
+        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver,
+                new EventForwardingBroadcastReceiver(customEventInterstitialListener,
+                        testBroadcastIdentifier).getIntentFilter());
 
         verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
     }
@@ -337,7 +362,9 @@ public void onCreate_shouldBroadcastInterstitialShow() throws Exception {
     @Test
     public void onDestroy_shouldBroadcastInterstitialDismiss() throws Exception {
         Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, testBroadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
+        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver,
+                new EventForwardingBroadcastReceiver(customEventInterstitialListener,
+                        testBroadcastIdentifier).getIntentFilter());
 
         subject.onDestroy();
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
index 9a3e3090..ef88b18d 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
@@ -17,6 +17,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
+import org.robolectric.Shadows;
+import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowActivity;
 
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
@@ -24,9 +26,9 @@
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
-import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class MraidVideoPlayerActivityTest {
     private static final String VAST = "vast";
     private static final String MRAID = "mraid";
@@ -118,7 +120,7 @@ public void onSetContentView_shouldActuallySetContentView() throws Exception {
 
         subject.onSetContentView(expectedView);
 
-        assertThat(shadowOf(subject).getContentView()).isEqualTo(expectedView);
+        assertThat(Shadows.shadowOf(subject).getContentView()).isEqualTo(expectedView);
     }
 
     @Test
@@ -148,7 +150,7 @@ public void onStartActivityForResult_shouldStartAnActivityWithRelevantRequestCod
 
         subject.onStartActivityForResult(MoPubBrowser.class, 100, expectedExtras);
 
-        final ShadowActivity.IntentForResult intentForResult = shadowOf(subject).getNextStartedActivityForResult();
+        final ShadowActivity.IntentForResult intentForResult = Shadows.shadowOf(subject).getNextStartedActivityForResult();
 
         assertThat(intentForResult.intent.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser");
         assertThat(intentForResult.intent.getExtras()).isEqualTo(expectedExtras);
@@ -161,7 +163,7 @@ public void onStartActivityForResult_withNullClass_shouldNotStartAnActivity() th
 
         subject.onStartActivityForResult(null, 100, new Bundle());
 
-        final ShadowActivity.IntentForResult intentForResult = shadowOf(subject).getNextStartedActivityForResult();
+        final ShadowActivity.IntentForResult intentForResult = Shadows.shadowOf(subject).getNextStartedActivityForResult();
         assertThat(intentForResult).isNull();
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RepeatingHandlerRunnableTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RepeatingHandlerRunnableTest.java
index 3c51f6f7..e6314478 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RepeatingHandlerRunnableTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RepeatingHandlerRunnableTest.java
@@ -9,6 +9,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
+import org.robolectric.annotation.Config;
 
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.reset;
@@ -16,6 +17,7 @@
 import static org.mockito.Mockito.verifyZeroInteractions;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class RepeatingHandlerRunnableTest {
 
     @Mock Handler mockHandler;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVastVideoInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVastVideoInterstitialTest.java
new file mode 100644
index 00000000..9e840b27
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVastVideoInterstitialTest.java
@@ -0,0 +1,77 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+
+import com.mopub.common.AdReport;
+import com.mopub.common.DataKeys;
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import static com.mopub.common.DataKeys.AD_REPORT_KEY;
+import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class RewardedVastVideoInterstitialTest {
+
+    private Context context;
+    private RewardedVastVideoInterstitial.CustomEventRewardedVideoInterstitialListener customEventRewardedVideoInterstitialListener;
+    private Map<String, Object> localExtras;
+    private Map<String, String> serverExtras;
+    private RewardedVastVideoInterstitial subject;
+
+    @Mock AdReport mockAdReport;
+
+    @Before
+    public void setUp() throws Exception {
+        subject = new RewardedVastVideoInterstitial();
+
+        final String expectedResponse = "<VAST>hello</VAST>";
+
+        context = Robolectric.buildActivity(Activity.class).create().get();
+        customEventRewardedVideoInterstitialListener = mock(
+                RewardedVastVideoInterstitial.CustomEventRewardedVideoInterstitialListener.class);
+        localExtras = new HashMap<String, Object>();
+        serverExtras = new HashMap<String, String>();
+        serverExtras.put(DataKeys.HTML_RESPONSE_BODY_KEY, expectedResponse);
+
+        final long broadcastIdentifier = 2222;
+        localExtras.put(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
+        when(mockAdReport.getDspCreativeId()).thenReturn("dsp_creative_id");
+        localExtras.put(AD_REPORT_KEY, mockAdReport);
+    }
+
+    @Test
+    public void loadInterstitial_withCustomEventRewardedVideoInterstitialListener_shouldRegisterRewardedVideoBroadcastReceiver() {
+        subject.loadInterstitial(context, customEventRewardedVideoInterstitialListener, localExtras,
+                serverExtras);
+
+        assertThat(subject.getRewardedVideoBroadcastReceiver()).isNotNull();
+    }
+
+    @Test
+    public void onVastVideoConfigurationPrepared_withProperVastConfig_shouldSetRewardedVideoFlag() {
+        subject.loadInterstitial(context, customEventRewardedVideoInterstitialListener, localExtras,
+                serverExtras);
+        final VastVideoConfig mockVastVideoConfig = mock(VastVideoConfig.class);
+
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+
+        verify(mockVastVideoConfig).setIsRewardedVideo(true);
+    }
+
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoBroadcastReceiverTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoBroadcastReceiverTest.java
new file mode 100644
index 00000000..64b328a4
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoBroadcastReceiverTest.java
@@ -0,0 +1,67 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.content.IntentFilter;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.fest.util.Sets;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import java.util.Iterator;
+import java.util.Set;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class RewardedVideoBroadcastReceiverTest {
+
+    private RewardedVastVideoInterstitial.CustomEventRewardedVideoInterstitialListener customEventRewardedVideoInterstitialListener;
+    private RewardedVideoBroadcastReceiver subject;
+    private Activity context;
+    private long broadcastIdentifier;
+
+    @Before
+    public void setUp() throws Exception {
+        customEventRewardedVideoInterstitialListener = mock(
+                RewardedVastVideoInterstitial.CustomEventRewardedVideoInterstitialListener.class);
+        broadcastIdentifier = 123456L;
+        subject = new RewardedVideoBroadcastReceiver(customEventRewardedVideoInterstitialListener,
+                broadcastIdentifier);
+        context = new Activity();
+    }
+
+    @Test
+    public void constructor_shouldSetIntentFilter() throws Exception {
+        Set<String> expectedActions = Sets.newLinkedHashSet(
+                RewardedVideoBroadcastReceiver.ACTION_REWARDED_VIDEO_COMPLETE
+        );
+
+        final IntentFilter intentFilter = subject.getIntentFilter();
+        final Iterator<String> actionIterator = intentFilter.actionsIterator();
+
+        assertThat(intentFilter.countActions()).isEqualTo(1);
+        while (actionIterator.hasNext()) {
+            assertThat(expectedActions.contains(actionIterator.next()));
+        }
+    }
+
+    @Test
+    public void onReceive_withActionRewardedVideoComplete_shouldNotifyListener() {
+        final Intent rewardedVideoCompleteIntent = new Intent();
+        rewardedVideoCompleteIntent.setAction(
+                RewardedVideoBroadcastReceiver.ACTION_REWARDED_VIDEO_COMPLETE);
+        rewardedVideoCompleteIntent.putExtra("broadcastIdentifier", broadcastIdentifier);
+
+        subject.onReceive(context, rewardedVideoCompleteIntent);
+
+        verify(customEventRewardedVideoInterstitialListener).onVideoComplete();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandlerTest.java
new file mode 100644
index 00000000..d73f8bd8
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandlerTest.java
@@ -0,0 +1,185 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.net.Uri;
+import android.os.Handler;
+
+import com.mopub.common.MoPub;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.network.MoPubRequestQueue;
+import com.mopub.network.Networking;
+import com.mopub.volley.NetworkResponse;
+import com.mopub.volley.VolleyError;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import static com.mopub.common.VolleyRequestMatcher.isUrl;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.argThat;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyZeroInteractions;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class RewardedVideoCompletionRequestHandlerTest {
+    @Mock
+    private MoPubRequestQueue mockRequestQueue;
+    private Context context;
+    private String url;
+
+    @Before
+    public void setup() {
+        context = Robolectric.buildActivity(Activity.class).create().get();
+        url = "testUrl";
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+    }
+
+    @Test
+    public void makeRewardedVideoCompletionRequest_shouldAddMacros_shouldMakeVideoCompletionRequest() throws Exception {
+        RewardedVideoCompletionRequestHandler.makeRewardedVideoCompletionRequest(context, url,
+                "customer id");
+
+        verify(mockRequestQueue).add(argThat(isUrl(
+                "testUrl&customer_id=customer%20id&nv=" +
+                        Uri.encode(MoPub.SDK_VERSION) + "&v=" +
+                        MoPubRewardedVideoManager.API_VERSION)));
+    }
+
+    @Test
+    public void getTimeout_shouldReturnCorrectTimeoutBasedOnRetry() {
+        final int maxTimeout = RewardedVideoCompletionRequestHandler.RETRY_TIMES[RewardedVideoCompletionRequestHandler.RETRY_TIMES.length - 1];
+
+        assertThat(RewardedVideoCompletionRequestHandler.getTimeout(-1)).isEqualTo(maxTimeout);
+
+        assertThat(RewardedVideoCompletionRequestHandler.getTimeout(0)).isEqualTo(
+                RewardedVideoCompletionRequestHandler.RETRY_TIMES[0]);
+
+        assertThat(RewardedVideoCompletionRequestHandler.getTimeout(1)).isEqualTo(
+                RewardedVideoCompletionRequestHandler.RETRY_TIMES[1]);
+
+        assertThat(RewardedVideoCompletionRequestHandler.getTimeout(1234567)).isEqualTo(
+                maxTimeout);
+    }
+
+    @Test
+    public void retryTimes_shouldAllBeGreaterThanRequestTimeoutDelay() {
+        for (int retryTime : RewardedVideoCompletionRequestHandler.RETRY_TIMES) {
+            assertThat(
+                    retryTime - RewardedVideoCompletionRequestHandler.REQUEST_TIMEOUT_DELAY)
+                    .isGreaterThanOrEqualTo(0);
+        }
+    }
+
+    @Test
+    public void onErrorResponse_shouldSetShouldStopToTrueWhenResponseNot500To599() {
+        RewardedVideoCompletionRequestHandler subject =
+                new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+
+        assertThat(subject.getShouldStop()).isEqualTo(false);
+
+        subject.onErrorResponse(new VolleyError(new NetworkResponse(500, null, null, true)));
+        assertThat(subject.getShouldStop()).isEqualTo(false);
+
+        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject.onErrorResponse(new VolleyError(new NetworkResponse(501, null, null, true)));
+        assertThat(subject.getShouldStop()).isEqualTo(false);
+
+        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject.onErrorResponse(new VolleyError(new NetworkResponse(599, null, null, true)));
+        assertThat(subject.getShouldStop()).isEqualTo(false);
+
+        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject.onErrorResponse(new VolleyError(new NetworkResponse(200, null, null, true)));
+        assertThat(subject.getShouldStop()).isEqualTo(true);
+
+        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject.onErrorResponse(new VolleyError(new NetworkResponse(499, null, null, true)));
+        assertThat(subject.getShouldStop()).isEqualTo(true);
+
+        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject.onErrorResponse(new VolleyError(new NetworkResponse(600, null, null, true)));
+        assertThat(subject.getShouldStop()).isEqualTo(true);
+    }
+
+    @Test
+    public void onResponse_shouldSetShouldStopToTrueWhenResponseNot500To599() {
+        RewardedVideoCompletionRequestHandler subject =
+                new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+
+        assertThat(subject.getShouldStop()).isEqualTo(false);
+
+        subject.onResponse(500);
+        assertThat(subject.getShouldStop()).isEqualTo(false);
+
+        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject.onResponse(501);
+        assertThat(subject.getShouldStop()).isEqualTo(false);
+
+        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject.onResponse(599);
+        assertThat(subject.getShouldStop()).isEqualTo(false);
+
+        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject.onResponse(200);
+        assertThat(subject.getShouldStop()).isEqualTo(true);
+
+        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject.onResponse(499);
+        assertThat(subject.getShouldStop()).isEqualTo(true);
+
+        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
+        subject.onResponse(600);
+        assertThat(subject.getShouldStop()).isEqualTo(true);
+    }
+
+    @Test
+    public void makeRewardedVideoCompletionRequest_shouldRetry() {
+        Handler mockHandler = mock(Handler.class);
+        RewardedVideoCompletionRequestHandler subject =
+                new RewardedVideoCompletionRequestHandler(context, "url", "customer_id",
+                        mockHandler);
+
+        subject.makeRewardedVideoCompletionRequest();
+
+        assertThat(subject.getRetryCount()).isEqualTo(1);
+        verify(mockHandler).postDelayed(any(Runnable.class),
+                eq((long) RewardedVideoCompletionRequestHandler.RETRY_TIMES[0]));
+    }
+
+    @Test
+    public void makeRewardedVideoCompletionRequest_shouldNotRetryIfShouldStopIsSetToTrue() {
+        Handler mockHandler = mock(Handler.class);
+        RewardedVideoCompletionRequestHandler subject =
+                new RewardedVideoCompletionRequestHandler(context, "url", "customer_id",
+                        mockHandler);
+        // This should set shouldStop to true.
+        subject.onResponse(200);
+
+        subject.makeRewardedVideoCompletionRequest();
+
+        assertThat(subject.getShouldStop()).isTrue();
+        verifyZeroInteractions(mockHandler);
+    }
+
+    @Test
+    public void makeRewardedVideoCompletionRequest_shouldNotRetryIfMaxRetriesReached() {
+        Handler mockHandler = mock(Handler.class);
+        RewardedVideoCompletionRequestHandler subject =
+                new RewardedVideoCompletionRequestHandler(context, "url", "customer_id",
+                        mockHandler);
+        subject.setRetryCount(RewardedVideoCompletionRequestHandler.MAX_RETRIES);
+
+        subject.makeRewardedVideoCompletionRequest();
+
+        verifyZeroInteractions(mockHandler);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoDataTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoDataTest.java
new file mode 100644
index 00000000..512ac0e7
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoDataTest.java
@@ -0,0 +1,73 @@
+package com.mopub.mobileads;
+
+import com.mopub.common.MoPubReward;
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class RewardedVideoDataTest {
+
+    private RewardedVideoData subject;
+
+    @Before
+    public void setup() {
+        subject = new RewardedVideoData();
+    }
+
+    @Test
+    public void updateAdUnitRewardMapping_shouldMapAdUnitIdToReward() throws Exception {
+        subject.updateAdUnitRewardMapping("mopub_id", "currency_name", "123");
+        MoPubReward moPubReward = subject.getMoPubReward("mopub_id");
+        assertThat(moPubReward.getLabel()).isEqualTo("currency_name");
+        assertThat(moPubReward.getAmount()).isEqualTo(123);
+    }
+
+    @Test
+    public void updateAdUnitRewardMapping_withNullCurrencyName_shouldRemoveExistingAdUnitMapping_shouldNotMapAdUnitIdToReward() throws Exception {
+        // Insert initial value to be removed with next call
+        subject.updateAdUnitRewardMapping("mopub_id", "currency_name", "123");
+        MoPubReward moPubReward = subject.getMoPubReward("mopub_id");
+        assertThat(moPubReward.getLabel()).isEqualTo("currency_name");
+        assertThat(moPubReward.getAmount()).isEqualTo(123);
+
+        subject.updateAdUnitRewardMapping("mopub_id", null, "123");
+        assertThat(subject.getMoPubReward("mopub_id")).isNull();
+    }
+
+    @Test
+    public void updateAdUnitRewardMapping_withNullCurrencyName_shouldNotMapAdUnitIdToReward() throws Exception {
+        // Insert initial value to be removed with next call
+        subject.updateAdUnitRewardMapping("mopub_id", "currency_name", "123");
+        MoPubReward moPubReward = subject.getMoPubReward("mopub_id");
+        assertThat(moPubReward.getLabel()).isEqualTo("currency_name");
+        assertThat(moPubReward.getAmount()).isEqualTo(123);
+
+        subject.updateAdUnitRewardMapping("mopub_id", null, "123");
+        assertThat(subject.getMoPubReward("mopub_id")).isNull();
+    }
+
+    @Test
+    public void updateAdUnitRewardMapping_withNullCurrencyAmount_shouldNotMapAdUnitIdToReward() throws Exception {
+        subject.updateAdUnitRewardMapping("mopub_id", "currency_name", null);
+        assertThat(subject.getMoPubReward("mopub_id")).isNull();
+    }
+
+    @Test
+    public void updateAdUnitRewardMapping_withNonNumberCurrencyAmount_shouldNotMapAdUnitIdToReward() throws Exception {
+        subject.updateAdUnitRewardMapping("mopub_id", "currency_name", "abc");
+        assertThat(subject.getMoPubReward("mopub_id")).isNull();
+    }
+
+    @Test
+    public void updateAdUnitRewardMapping_withCurrencyAmountLessThanZero_shouldNotMapAdUnitIdToReward() throws Exception {
+        subject.updateAdUnitRewardMapping("mopub_id", "currency_name", "-1");
+        assertThat(subject.getMoPubReward("mopub_id")).isNull();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastAdXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastAdXmlManagerTest.java
index 0b20146d..b7cd5153 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastAdXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastAdXmlManagerTest.java
@@ -5,12 +5,14 @@
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
 import org.w3c.dom.Node;
 
 import static com.mopub.mobileads.test.support.VastUtils.createNode;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class VastAdXmlManagerTest {
 
     private VastAdXmlManager subject;
@@ -20,12 +22,12 @@ public void getInLineXmlManager_shouldReturnInLineXmlManager() throws Exception
         String adXml = "<Ad id=\"223626102\">" +
                 "    <InLine>" +
                 "          <Impression id=\"DART\">" +
-                "                 <![CDATA[http://impression/m/inline]]>" +
+                "                 <![CDATA[https://impression/m/inline]]>" +
                 "          </Impression>" +
                 "    </InLine>" +
                 "    <Wrapper>" +
                 "          <Impression id=\"DART\">" +
-                "                 <![CDATA[http://impression/m/wrapper]]>" +
+                "                 <![CDATA[https://impression/m/wrapper]]>" +
                 "          </Impression>" +
                 "    </Wrapper>" +
                 "</Ad>";
@@ -35,7 +37,7 @@ public void getInLineXmlManager_shouldReturnInLineXmlManager() throws Exception
 
         VastInLineXmlManager vastInLineXmlManager = subject.getInLineXmlManager();
         assertThat(VastUtils.vastTrackersToStrings(vastInLineXmlManager.getImpressionTrackers()))
-                .containsOnly("http://impression/m/inline");
+                .containsOnly("https://impression/m/inline");
     }
 
     @Test
@@ -43,17 +45,17 @@ public void getInLineXmlManager_withMultipleInLineNodes_shouldReturnFirstInLineX
         String adXml = "<Ad id=\"223626102\">" +
                 "    <InLine>" +
                 "          <Impression id=\"DART\">" +
-                "                 <![CDATA[http://impression/m/inlineOne]]>" +
+                "                 <![CDATA[https://impression/m/inlineOne]]>" +
                 "          </Impression>" +
                 "    </InLine>" +
                 "    <InLine>" +
                 "          <Impression id=\"DART\">" +
-                "                 <![CDATA[http://impression/m/inlineTwo]]>" +
+                "                 <![CDATA[https://impression/m/inlineTwo]]>" +
                 "          </Impression>" +
                 "    </InLine>" +
                 "    <Wrapper>" +
                 "          <Impression id=\"DART\">" +
-                "                 <![CDATA[http://impression/m/wrapper]]>" +
+                "                 <![CDATA[https://impression/m/wrapper]]>" +
                 "          </Impression>" +
                 "    </Wrapper>" +
                 "</Ad>";
@@ -63,7 +65,7 @@ public void getInLineXmlManager_withMultipleInLineNodes_shouldReturnFirstInLineX
 
         VastInLineXmlManager vastInLineXmlManager = subject.getInLineXmlManager();
         assertThat(VastUtils.vastTrackersToStrings(vastInLineXmlManager.getImpressionTrackers()))
-                .containsOnly("http://impression/m/inlineOne");
+                .containsOnly("https://impression/m/inlineOne");
     }
 
     @Test
@@ -71,7 +73,7 @@ public void getInLineXmlManager_withNoInLineNodes_shouldReturnNull() throws Exce
         String adXml = "<Ad id=\"223626102\">" +
                 "    <Wrapper>" +
                 "          <Impression id=\"DART\">" +
-                "                 <![CDATA[http://impression/m/wrapper]]>" +
+                "                 <![CDATA[https://impression/m/wrapper]]>" +
                 "          </Impression>" +
                 "    </Wrapper>" +
                 "</Ad>";
@@ -87,12 +89,12 @@ public void getWrapperXmlManager_shouldReturnWrapperXmlManager() throws Exceptio
         String adXml = "<Ad id=\"223626102\">" +
                 "    <InLine>" +
                 "          <Impression id=\"DART\">" +
-                "                 <![CDATA[http://impression/m/inline]]>" +
+                "                 <![CDATA[https://impression/m/inline]]>" +
                 "          </Impression>" +
                 "    </InLine>" +
                 "    <Wrapper>" +
                 "          <Impression id=\"DART\">" +
-                "                 <![CDATA[http://impression/m/wrapper]]>" +
+                "                 <![CDATA[https://impression/m/wrapper]]>" +
                 "          </Impression>" +
                 "    </Wrapper>" +
                 "</Ad>";
@@ -102,7 +104,7 @@ public void getWrapperXmlManager_shouldReturnWrapperXmlManager() throws Exceptio
 
         VastWrapperXmlManager vastWrapperXmlManager = subject.getWrapperXmlManager();
         assertThat(VastUtils.vastTrackersToStrings(vastWrapperXmlManager.getImpressionTrackers()))
-                .containsOnly("http://impression/m/wrapper");
+                .containsOnly("https://impression/m/wrapper");
     }
 
     @Test
@@ -110,17 +112,17 @@ public void getWrapperXmlManager_withMultipleWrapperNodes_shouldReturnFirstWrapp
         String adXml = "<Ad id=\"223626102\">" +
                 "    <InLine>" +
                 "          <Impression id=\"DART\">" +
-                "                 <![CDATA[http://impression/m/inlineOne]]>" +
+                "                 <![CDATA[https://impression/m/inlineOne]]>" +
                 "          </Impression>" +
                 "    </InLine>" +
                 "    <Wrapper>" +
                 "          <Impression id=\"DART\">" +
-                "                 <![CDATA[http://impression/m/wrapperOne]]>" +
+                "                 <![CDATA[https://impression/m/wrapperOne]]>" +
                 "          </Impression>" +
                 "    </Wrapper>" +
                 "    <Wrapper>" +
                 "          <Impression id=\"DART\">" +
-                "                 <![CDATA[http://impression/m/wrapperTwo]]>" +
+                "                 <![CDATA[https://impression/m/wrapperTwo]]>" +
                 "          </Impression>" +
                 "    </Wrapper>" +
                 "</Ad>";
@@ -130,7 +132,7 @@ public void getWrapperXmlManager_withMultipleWrapperNodes_shouldReturnFirstWrapp
 
         VastWrapperXmlManager vastWrapperXmlManager = subject.getWrapperXmlManager();
         assertThat(VastUtils.vastTrackersToStrings(vastWrapperXmlManager.getImpressionTrackers()))
-                .containsOnly("http://impression/m/wrapperOne");
+                .containsOnly("https://impression/m/wrapperOne");
     }
 
     @Test
@@ -138,7 +140,7 @@ public void getWrapperXmlManager_withNoWrapperNodes_shouldReturnNull() throws Ex
         String adXml = "<Ad id=\"223626102\">" +
                 "    <InLine>" +
                 "          <Impression id=\"DART\">" +
-                "                 <![CDATA[http://impression/m/inline]]>" +
+                "                 <![CDATA[https://impression/m/inline]]>" +
                 "          </Impression>" +
                 "    </InLine>" +
                 "</Ad>";
@@ -154,12 +156,12 @@ public void getSequence_shouldReturnSequence() throws Exception {
         String adXml = "<Ad id=\"223626102\" sequence=\"42\">" +
                 "    <InLine>" +
                 "        <Impression id=\"DART\">" +
-                "            <![CDATA[http://impression/m/inline]]>" +
+                "            <![CDATA[https://impression/m/inline]]>" +
                 "        </Impression>" +
                 "    </InLine>" +
                 "    <Wrapper>" +
                 "        <Impression id=\"DART\">" +
-                "            <![CDATA[http://impression/m/wrapper]]>" +
+                "            <![CDATA[https://impression/m/wrapper]]>" +
                 "        </Impression>" +
                 "    </Wrapper>" +
                 "</Ad>";
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManagerTest.java
index 143b211a..559db818 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManagerTest.java
@@ -5,6 +5,7 @@
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
 import org.w3c.dom.Node;
 
 import java.util.List;
@@ -13,25 +14,25 @@
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class VastBaseInLineWrapperXmlManagerTest {
-
     private VastBaseInLineWrapperXmlManager subject;
 
     @Test
     public void getImpressionTrackers_shouldReturnImpressionTrackers() throws Exception {
         String inLineXml = "<InLine>" +
                 "          <Impression id=\"DART\">" +
-                "                 <![CDATA[http://impression/m/inlineOne]]>" +
+                "                 <![CDATA[https://impression/m/inlineOne]]>" +
                 "          </Impression>" +
                 "          <Impression id=\"DART\">" +
-                "                 <![CDATA[http://impression/m/inlineTwo]]>" +
+                "                 <![CDATA[https://impression/m/inlineTwo]]>" +
                 "          </Impression>" +
                 "          <Creatives>" +
                 "                 <Creative>" +
                 "                       <Linear>" +
                 "                           <TrackingEvents>" +
                 "                               <Tracking event=\"close\">" +
-                "                                   <![CDATA[http://tracking/m/close]]>" +
+                "                                   <![CDATA[https://tracking/m/close]]>" +
                 "                               </Tracking>" +
                 "                           </TrackingEvents>" +
                 "                       </Linear>" +
@@ -43,7 +44,7 @@ public void getImpressionTrackers_shouldReturnImpressionTrackers() throws Except
         subject = new VastInLineXmlManager(inLineNode);
 
         assertThat(VastUtils.vastTrackersToStrings(subject.getImpressionTrackers()))
-                .containsOnly("http://impression/m/inlineOne", "http://impression/m/inlineTwo");
+                .containsOnly("https://impression/m/inlineOne", "https://impression/m/inlineTwo");
     }
 
     @Test
@@ -61,17 +62,17 @@ public void getImpressionTrackers_withNoImpressionTrackers_shouldReturnEmptyList
     public void getLinearXmlManagers_shouldReturnLinearXmlManagers() throws Exception {
         String inLineXml = "<InLine>" +
                 "          <Impression id=\"DART\">" +
-                "                 <![CDATA[http://impression/m/inlineOne]]>" +
+                "                 <![CDATA[https://impression/m/inlineOne]]>" +
                 "          </Impression>" +
                 "          <Impression id=\"DART\">" +
-                "                 <![CDATA[http://impression/m/inlineTwo]]>" +
+                "                 <![CDATA[https://impression/m/inlineTwo]]>" +
                 "          </Impression>" +
                 "          <Creatives>" +
                 "                 <Creative>" +
                 "                       <Linear>" +
                 "                           <TrackingEvents>" +
                 "                               <Tracking event=\"close\">" +
-                "                                   <![CDATA[http://tracking/m/closeOne]]>" +
+                "                                   <![CDATA[https://tracking/m/closeOne]]>" +
                 "                               </Tracking>" +
                 "                           </TrackingEvents>" +
                 "                       </Linear>" +
@@ -79,7 +80,7 @@ public void getLinearXmlManagers_shouldReturnLinearXmlManagers() throws Exceptio
                 "                       <Linear>" +
                 "                           <TrackingEvents>" +
                 "                               <Tracking event=\"close\">" +
-                "                                   <![CDATA[http://tracking/m/ignored]]>" +
+                "                                   <![CDATA[https://tracking/m/ignored]]>" +
                 "                               </Tracking>" +
                 "                           </TrackingEvents>" +
                 "                       </Linear>" +
@@ -92,7 +93,7 @@ public void getLinearXmlManagers_shouldReturnLinearXmlManagers() throws Exceptio
                 "                       <Linear>" +
                 "                           <TrackingEvents>" +
                 "                               <Tracking event=\"close\">" +
-                "                                   <![CDATA[http://tracking/m/closeTwo]]>" +
+                "                                   <![CDATA[https://tracking/m/closeTwo]]>" +
                 "                               </Tracking>" +
                 "                           </TrackingEvents>" +
                 "                       </Linear>" +
@@ -106,26 +107,26 @@ public void getLinearXmlManagers_shouldReturnLinearXmlManagers() throws Exceptio
         List<VastLinearXmlManager> linearXmlManagers = subject.getLinearXmlManagers();
         assertThat(linearXmlManagers).hasSize(2);
         assertThat(VastUtils.vastTrackersToStrings(linearXmlManagers.get(0).getVideoCloseTrackers()))
-                .containsOnly("http://tracking/m/closeOne");
+                .containsOnly("https://tracking/m/closeOne");
         assertThat(VastUtils.vastTrackersToStrings(linearXmlManagers.get(1).getVideoCloseTrackers()))
-                .containsOnly("http://tracking/m/closeTwo");
+                .containsOnly("https://tracking/m/closeTwo");
     }
 
     @Test
     public void getLinearXmlManagers_withNoLinearNodes_shouldReturnEmptyList() throws Exception {
         String inLineXml = "<InLine>" +
                 "          <Impression id=\"DART\">" +
-                "                 <![CDATA[http://impression/m/inlineOne]]>" +
+                "                 <![CDATA[https://impression/m/inlineOne]]>" +
                 "          </Impression>" +
                 "          <Impression id=\"DART\">" +
-                "                 <![CDATA[http://impression/m/inlineTwo]]>" +
+                "                 <![CDATA[https://impression/m/inlineTwo]]>" +
                 "          </Impression>" +
                 "          <Creatives>" +
                 "                 <Creative>" +
                 "                       <NonLinearAds>" +
                 "                           <TrackingEvents>" +
                 "                               <Tracking event=\"close\">" +
-                "                                   <![CDATA[http://tracking/m/close]]>" +
+                "                                   <![CDATA[https://tracking/m/close]]>" +
                 "                               </Tracking>" +
                 "                           </TrackingEvents>" +
                 "                       </NonLinearAds>" +
@@ -143,16 +144,16 @@ public void getLinearXmlManagers_withNoLinearNodes_shouldReturnEmptyList() throw
     public void getLinearXmlManagers_withNoCreativeNodes_shouldReturnEmptyList() throws Exception {
         String inLineXml = "<InLine>" +
                 "          <Impression id=\"DART\">" +
-                "                 <![CDATA[http://impression/m/inlineOne]]>" +
+                "                 <![CDATA[https://impression/m/inlineOne]]>" +
                 "          </Impression>" +
                 "          <Impression id=\"DART\">" +
-                "                 <![CDATA[http://impression/m/inlineTwo]]>" +
+                "                 <![CDATA[https://impression/m/inlineTwo]]>" +
                 "          </Impression>" +
                 "          <Creatives>" +
                 "                       <Linear>" +
                 "                           <TrackingEvents>" +
                 "                               <Tracking event=\"close\">" +
-                "                                   <![CDATA[http://tracking/m/closeTwo]]>" +
+                "                                   <![CDATA[https://tracking/m/closeTwo]]>" +
                 "                               </Tracking>" +
                 "                           </TrackingEvents>" +
                 "                       </Linear>" +
@@ -169,16 +170,16 @@ public void getLinearXmlManagers_withNoCreativeNodes_shouldReturnEmptyList() thr
     public void getLinearXmlManagers_withNoCreativesNodes_shouldReturnEmptyList() throws Exception {
         String inLineXml = "<InLine>" +
                 "          <Impression id=\"DART\">" +
-                "                 <![CDATA[http://impression/m/inlineOne]]>" +
+                "                 <![CDATA[https://impression/m/inlineOne]]>" +
                 "          </Impression>" +
                 "          <Impression id=\"DART\">" +
-                "                 <![CDATA[http://impression/m/inlineTwo]]>" +
+                "                 <![CDATA[https://impression/m/inlineTwo]]>" +
                 "          </Impression>" +
                 "                 <Creative>" +
                 "                       <Linear>" +
                 "                           <TrackingEvents>" +
                 "                               <Tracking event=\"close\">" +
-                "                                   <![CDATA[http://tracking/m/closeTwo]]>" +
+                "                                   <![CDATA[https://tracking/m/closeTwo]]>" +
                 "                               </Tracking>" +
                 "                           </TrackingEvents>" +
                 "                       </Linear>" +
@@ -195,17 +196,17 @@ public void getLinearXmlManagers_withNoCreativesNodes_shouldReturnEmptyList() th
     public void getCompanionAdXmlManagers_shouldReturnCompanionAdXmlManagers() throws Exception {
         String inLineXml = "<InLine>" +
                 "          <Impression id=\"DART\">" +
-                "                 <![CDATA[http://impression/m/inlineOne]]>" +
+                "                 <![CDATA[https://impression/m/inlineOne]]>" +
                 "          </Impression>" +
                 "          <Impression id=\"DART\">" +
-                "                 <![CDATA[http://impression/m/inlineTwo]]>" +
+                "                 <![CDATA[https://impression/m/inlineTwo]]>" +
                 "          </Impression>" +
                 "          <Creatives>" +
                 "                 <Creative>" +
                 "                       <NonLinearAds>" +
                 "                           <TrackingEvents>" +
                 "                               <Tracking event=\"close\">" +
-                "                                   <![CDATA[http://tracking/m/closeOne]]>" +
+                "                                   <![CDATA[https://tracking/m/closeOne]]>" +
                 "                               </Tracking>" +
                 "                           </TrackingEvents>" +
                 "                       </NonLinearAds>" +
@@ -215,20 +216,20 @@ public void getCompanionAdXmlManagers_shouldReturnCompanionAdXmlManagers() throw
                 "                         <Companion>" +
                 "                             <TrackingEvents>" +
                 "                                 <Tracking event=\"creativeView\">" +
-                "                                     <![CDATA[http://tracking/m/closeTwo]]>" +
+                "                                     <![CDATA[https://tracking/m/closeTwo]]>" +
                 "                                 </Tracking>" +
                 "                             </TrackingEvents>" +
                 "                             <CompanionClickTracking>" +
-                "                                 <![CDATA[http://clicktrackingOne]]>" +
+                "                                 <![CDATA[https://clicktrackingOne]]>" +
                 "                             </CompanionClickTracking>" +
                 "                         </Companion>"+
                 "                         <Companion>" +
                 "                             <CompanionClickTracking>" +
-                "                                 <![CDATA[http://clicktrackingTwo]]>" +
+                "                                 <![CDATA[https://clicktrackingTwo]]>" +
                 "                             </CompanionClickTracking>" +
                 "                             <TrackingEvents>" +
                 "                                 <Tracking event=\"creativeView\">" +
-                "                                     <![CDATA[http://tracking/m/closeThree]]>" +
+                "                                     <![CDATA[https://tracking/m/closeThree]]>" +
                 "                                 </Tracking>" +
                 "                             </TrackingEvents>" +
                 "                         </Companion>"+
@@ -242,9 +243,9 @@ public void getCompanionAdXmlManagers_shouldReturnCompanionAdXmlManagers() throw
 
         assertThat(subject.getCompanionAdXmlManagers()).hasSize(2);
         assertThat(VastUtils.vastTrackersToStrings(subject.getCompanionAdXmlManagers().get(0).getClickTrackers()))
-                .containsOnly("http://clicktrackingOne");
+                .containsOnly("https://clicktrackingOne");
         assertThat(VastUtils.vastTrackersToStrings(subject.getCompanionAdXmlManagers().get(1).getClickTrackers()))
-                .containsOnly("http://clicktrackingTwo");
+                .containsOnly("https://clicktrackingTwo");
     }
 
     @Test
@@ -274,7 +275,7 @@ public void getCompanionAdXmlManagers_withNoCompanionAdsNodes_shouldReturnEmptyL
                 "                         <Companion>" +
                 "                             <TrackingEvents>" +
                 "                                 <Tracking event=\"creativeView\">" +
-                "                                     <![CDATA[http://tracking/m/closeThree]]>" +
+                "                                     <![CDATA[https://tracking/m/closeThree]]>" +
                 "                                 </Tracking>" +
                 "                             </TrackingEvents>" +
                 "                         </Companion>"+
@@ -296,7 +297,7 @@ public void getCompanionAdXmlManagers_withNoCreativeNodes_shouldReturnEmptyList(
                 "                         <Companion>" +
                 "                             <TrackingEvents>" +
                 "                                 <Tracking event=\"creativeView\">" +
-                "                                     <![CDATA[http://tracking/m/closeThree]]>" +
+                "                                     <![CDATA[https://tracking/m/closeThree]]>" +
                 "                                 </Tracking>" +
                 "                             </TrackingEvents>" +
                 "                         </Companion>"+
@@ -318,7 +319,7 @@ public void getCompanionAdXmlManagers_withNoCreativesNodes_shouldReturnEmptyList
                 "                         <Companion>" +
                 "                             <TrackingEvents>" +
                 "                                 <Tracking event=\"creativeView\">" +
-                "                                     <![CDATA[http://tracking/m/closeThree]]>" +
+                "                                     <![CDATA[https://tracking/m/closeThree]]>" +
                 "                                 </Tracking>" +
                 "                             </TrackingEvents>" +
                 "                         </Companion>"+
@@ -331,4 +332,63 @@ public void getCompanionAdXmlManagers_withNoCreativesNodes_shouldReturnEmptyList
 
         assertThat(subject.getLinearXmlManagers()).isEmpty();
     }
+
+    @Test
+    public void getVastExtensionsXmlManager_shouldReturnExtensions() throws Exception {
+        String inLineXml = "<InLine>" +
+                "               <Extensions>" +
+                "                   <Extension>Extension 1</Extension>" +
+                "                   <Extension>Extension 2</Extension>" +
+                "               </Extensions>" +
+                "           </InLine>";
+
+        Node inLineNode = createNode(inLineXml);
+        subject = new VastInLineXmlManager(inLineNode);
+
+        assertThat(subject.getVastExtensionParentXmlManager()).isNotNull();
+        assertThat(subject.getVastExtensionParentXmlManager().getVastExtensionXmlManagers())
+                .hasSize(2);
+    }
+
+    @Test
+    public void getVastExtensionParentXmlManager_withMultipleParentExtensions_shouldReturnFirstParentExtensionOnly() throws Exception {
+        String inLineXml = "<InLine>" +
+                "               <Extensions>" +
+                "                   <Extension>Extension 1</Extension>" +
+                "               </Extensions>" +
+                "               <Extensions>" +
+                "                   <Extension>Extension 2</Extension>" +
+                "                   <Extension>Extension 3</Extension>" +
+                "               </Extensions>" +
+                "           </InLine>";
+
+        Node inLineNode = createNode(inLineXml);
+        subject = new VastInLineXmlManager(inLineNode);
+
+        assertThat(subject.getVastExtensionParentXmlManager()).isNotNull();
+        assertThat(subject.getVastExtensionParentXmlManager().getVastExtensionXmlManagers())
+                .hasSize(1);
+    }
+
+    @Test
+    public void getVastExtensionParentXmlManager_withoutExtensions_shouldReturnNull() throws Exception {
+        String inLineXml = "<InLine>" +
+                "                 <Creative>" +
+                "                     <CompanionAds>" +
+                "                         <Companion>" +
+                "                             <TrackingEvents>" +
+                "                                 <Tracking event=\"creativeView\">" +
+                "                                     <![CDATA[https://tracking/m/closeThree]]>" +
+                "                                 </Tracking>" +
+                "                             </TrackingEvents>" +
+                "                         </Companion>"+
+                "                     </CompanionAds>" +
+                "                 </Creative>" +
+                "           </InLine>";
+
+        Node inLineNode = createNode(inLineXml);
+        subject = new VastInLineXmlManager(inLineNode);
+
+        assertThat(subject.getVastExtensionParentXmlManager()).isNull();
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigTest.java
index ffbe32f0..8ff23e7a 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigTest.java
@@ -16,6 +16,8 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowApplication;
 
 import static com.mopub.common.VolleyRequestMatcher.isUrl;
 import static org.fest.assertions.api.Assertions.assertThat;
@@ -24,9 +26,10 @@
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class VastCompanionAdConfigTest {
 
-    private static final String RESOLVED_CLICKTHROUGH_URL = "http://www.mopub.com/";
+    private static final String RESOLVED_CLICKTHROUGH_URL = "https://www.mopub.com/";
     private static final String CLICKTHROUGH_URL = "deeplink+://navigate?" +
             "&primaryUrl=bogus%3A%2F%2Furl" +
             "&fallbackUrl=" + Uri.encode(RESOLVED_CLICKTHROUGH_URL);
@@ -73,7 +76,7 @@ public void handleImpression_shouldTrackImpression() throws Exception {
 
     @Test
     public void handleClick_shouldNotTrackClick() throws Exception {
-        subject.handleClick(context, 1, null);
+        subject.handleClick(context, 1, null, "dsp_creative_id");
 
         verifyNoMoreInteractions(mockRequestQueue);
     }
@@ -81,14 +84,16 @@ public void handleClick_shouldNotTrackClick() throws Exception {
 
     @Test
     public void handleClick_shouldOpenMoPubBrowser() throws Exception {
-        subject.handleClick(context, 1, null);
+        subject.handleClick(context, 1, null, "dsp_creative_id");
 
-        Robolectric.runBackgroundTasks();
-        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
+        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
+        Intent startedActivity = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(startedActivity.getComponent().getClassName())
                 .isEqualTo("com.mopub.common.MoPubBrowser");
         assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY))
                 .isEqualTo(RESOLVED_CLICKTHROUGH_URL);
+        assertThat(startedActivity.getStringExtra(MoPubBrowser.DSP_CREATIVE_ID))
+                .isEqualTo("dsp_creative_id");
         assertThat(startedActivity.getData()).isNull();
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigXmlManagerTest.java
index a199dbf9..a738a601 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigXmlManagerTest.java
@@ -6,12 +6,14 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
 import org.w3c.dom.Node;
 
 import static com.mopub.mobileads.test.support.VastUtils.createNode;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class VastCompanionAdConfigXmlManagerTest {
 
     private VastCompanionAdXmlManager subject;
@@ -20,19 +22,19 @@
     @Before
     public void setup() throws Exception {
         String companionXml = "<Companion id=\"valid\" height=\"250\" width=\"300\">" +
-                "    <StaticResource creativeType=\"image/png\">http://pngimage</StaticResource>" +
+                "    <StaticResource creativeType=\"image/png\">https://pngimage</StaticResource>" +
                 "    <TrackingEvents>" +
-                "        <Tracking event=\"creativeView\">http://tracking/creativeView1</Tracking>" +
-                "        <Tracking event=\"creativeView\">http://tracking/creativeView2</Tracking>" +
-                "        <Tracking event=\"creativeView\">http://tracking/creativeView3</Tracking>" +
+                "        <Tracking event=\"creativeView\">https://tracking/creativeView1</Tracking>" +
+                "        <Tracking event=\"creativeView\">https://tracking/creativeView2</Tracking>" +
+                "        <Tracking event=\"creativeView\">https://tracking/creativeView3</Tracking>" +
                 "    </TrackingEvents>" +
-                "    <CompanionClickThrough>http://clickthrough</CompanionClickThrough>" +
-                "    <CompanionClickThrough>http://second_clickthrough</CompanionClickThrough>" +
+                "    <CompanionClickThrough>https://clickthrough</CompanionClickThrough>" +
+                "    <CompanionClickThrough>https://second_clickthrough</CompanionClickThrough>" +
                 "    <CompanionClickTracking>" +
-                "        <![CDATA[http://clicktrackingOne]]>" +
+                "        <![CDATA[https://clicktrackingOne]]>" +
                 "    </CompanionClickTracking>" +
                 "    <CompanionClickTracking>" +
-                "        <![CDATA[http://clicktrackingTwo]]>" +
+                "        <![CDATA[https://clicktrackingTwo]]>" +
                 "    </CompanionClickTracking>" +
                 "    <RandomUnusedTag>This_is_unused</RandomUnusedTag>" +
                 "</Companion>";
@@ -76,19 +78,19 @@ public void getHeight_withNoHeightAttribute_shouldReturnNull() throws Exception
     @Test
     public void getResourceXmlManager_shouldReturnVastResourceXmlManager() throws Exception {
         VastResourceXmlManager resourceXmlManager = subject.getResourceXmlManager();
-        assertThat(resourceXmlManager.getStaticResource()).isEqualTo("http://pngimage");
+        assertThat(resourceXmlManager.getStaticResource()).isEqualTo("https://pngimage");
         assertThat(resourceXmlManager.getStaticResourceType()).isEqualTo("image/png");
     }
 
     @Test
     public void getClickThroughUrl_shouldReturnFirstStringUrl() {
-        assertThat(subject.getClickThroughUrl()).isEqualTo("http://clickthrough");
+        assertThat(subject.getClickThroughUrl()).isEqualTo("https://clickthrough");
     }
 
     @Test
     public void getClickTrackers_shouldReturnAllUrls() {
         assertThat(VastUtils.vastTrackersToStrings(subject.getClickTrackers()))
-                .containsOnly("http://clicktrackingOne",
-                        "http://clicktrackingTwo");
+                .containsOnly("https://clicktrackingOne",
+                        "https://clicktrackingTwo");
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionParentXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionParentXmlManagerTest.java
new file mode 100644
index 00000000..74faa3ab
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionParentXmlManagerTest.java
@@ -0,0 +1,40 @@
+package com.mopub.mobileads;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import static com.mopub.mobileads.test.support.VastUtils.createNode;
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class VastExtensionParentXmlManagerTest {
+    private VastExtensionParentXmlManager subject;
+
+    @Test
+    public void getVastExtensionXmlManagers_shouldReturnExtensionManagers() throws Exception {
+        String parentExtensionXml = "<Extensions>" +
+                "                       <Extension>Extension 1</Extension>" +
+                "                       <Extension>Extension 2</Extension>" +
+                "                    </Extensions>";
+
+        subject = new VastExtensionParentXmlManager(createNode(parentExtensionXml));
+
+        assertThat(subject.getVastExtensionXmlManagers()).isNotNull();
+        assertThat(subject.getVastExtensionXmlManagers()).hasSize(2);
+    }
+
+    @Test
+    public void getVastExtensionXmlManagers_withoutExtensions_shouldReturnEmptyList() throws Exception {
+        String parentExtensionXml = "<Extensions></Extensions>";
+
+        subject = new VastExtensionParentXmlManager(createNode(parentExtensionXml));
+
+        assertThat(subject.getVastExtensionXmlManagers()).isNotNull();
+        assertThat(subject.getVastExtensionXmlManagers()).isEmpty();
+    }
+
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionXmlManagerTest.java
new file mode 100644
index 00000000..395b2ee6
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionXmlManagerTest.java
@@ -0,0 +1,100 @@
+package com.mopub.mobileads;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import static com.mopub.mobileads.test.support.VastUtils.createNode;
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class VastExtensionXmlManagerTest {
+    private VastExtensionXmlManager subject;
+
+    @Test
+    public void getType_shouldReturnExtensionType() throws Exception {
+        String extensionXml = "<Extension type=\"MyExtensionType\"></Extension>";
+
+        subject = new VastExtensionXmlManager(createNode(extensionXml));
+
+        assertThat(subject.getType()).isEqualTo("MyExtensionType");
+    }
+
+    @Test
+    public void getVideoViewabilityTracker_shouldReturnVideoViewabilityTracker() throws Exception {
+        String extensionXml = "<Extension type=\"MoPub\">" +
+                "                  <MoPubViewabilityTracker" +
+                "                          viewablePlaytime=\"2.5\"" +
+                "                          percentViewable=\"50%\">" +
+                "                      <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
+                "                  </MoPubViewabilityTracker>" +
+                "              </Extension>";
+
+        subject = new VastExtensionXmlManager(createNode(extensionXml));
+        VideoViewabilityTracker tracker = subject.getVideoViewabilityTracker();
+
+        assertThat(tracker).isNotNull();
+        assertThat(tracker.getViewablePlaytimeMS()).isEqualTo(2500);
+        assertThat(tracker.getPercentViewable()).isEqualTo(50);
+        assertThat(tracker.getTrackingUrl()).isEqualTo("https://ad.server.com/impression/dot.gif");
+    }
+
+    @Test
+    public void getVideoViewabilityTracker_withoutViewabilityTracker_shouldReturnNull() throws Exception {
+        String extensionXml = "<Extension type=\"MoPub\"></Extension>";
+
+        subject = new VastExtensionXmlManager(createNode(extensionXml));
+        VideoViewabilityTracker tracker = subject.getVideoViewabilityTracker();
+
+        assertThat(tracker).isNull();
+    }
+
+    @Test
+    public void getVideoViewabilityTracker_withoutVieweablePlaytime_shouldReturnNull() throws Exception {
+        String extensionXml = "<Extension type=\"MoPub\">" +
+                "                  <MoPubViewabilityTracker" +
+                "                          percentViewable=\"50%\">" +
+                "                      <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
+                "                  </MoPubViewabilityTracker>" +
+                "              </Extension>";
+
+        subject = new VastExtensionXmlManager(createNode(extensionXml));
+        VideoViewabilityTracker tracker = subject.getVideoViewabilityTracker();
+
+        assertThat(tracker).isNull();
+    }
+
+    @Test
+    public void getVideoViewabilityTracker_withoutPercentViewable_shouldReturnNull() throws Exception {
+        String extensionXml = "<Extension type=\"MoPub\">" +
+                "                  <MoPubViewabilityTracker" +
+                "                          viewablePlaytime=\"2.5\">" +
+                "                      <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
+                "                  </MoPubViewabilityTracker>" +
+                "              </Extension>";
+
+        subject = new VastExtensionXmlManager(createNode(extensionXml));
+        VideoViewabilityTracker tracker = subject.getVideoViewabilityTracker();
+
+        assertThat(tracker).isNull();
+    }
+
+    @Test
+    public void getVideoViewabilityTracker_withoutTrackerUrl_shouldReturnNull() throws Exception {
+        String extensionXml = "<Extension type=\"MoPub\">" +
+                "                  <MoPubViewabilityTracker" +
+                "                          viewablePlaytime=\"2.5\"" +
+                "                          percentViewable=\"50%\">" +
+                "                  </MoPubViewabilityTracker>" +
+                "              </Extension>";
+
+        subject = new VastExtensionXmlManager(createNode(extensionXml));
+        VideoViewabilityTracker tracker = subject.getVideoViewabilityTracker();
+
+        assertThat(tracker).isNull();
+    }
+
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigTest.java
index 7833472d..3a636ccb 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigTest.java
@@ -15,6 +15,8 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowApplication;
 
 import static com.mopub.common.VolleyRequestMatcher.isUrl;
 import static org.fest.assertions.api.Assertions.assertThat;
@@ -23,11 +25,13 @@
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class VastIconConfigTest {
 
     private VastIconConfig subject;
     private Context context;
     @Mock private MoPubRequestQueue mockRequestQueue;
+    private String dspCreativeId;
 
     @Before
     public void setup() {
@@ -35,10 +39,11 @@ public void setup() {
                 new VastResource("resource", VastResource.Type.STATIC_RESOURCE, VastResource
                         .CreativeType.IMAGE, 123, 456),
                 VastUtils.stringsToVastTrackers("clickTrackerOne", "clickTrackerTwo"),
-                "http://www.mopub.com/",
+                "https://www.mopub.com/",
                 VastUtils.stringsToVastTrackers("viewTrackerOne", "viewTrackerTwo")
         );
         context = Robolectric.buildActivity(Activity.class).create().get();
+        dspCreativeId = "dspCreativeId";
         Networking.setRequestQueueForTesting(mockRequestQueue);
     }
 
@@ -54,7 +59,7 @@ public void constructor_shouldSetParamsCorrectly() throws Exception {
                 .isEqualTo(VastResource.CreativeType.IMAGE);
         assertThat(VastUtils.vastTrackersToStrings(subject.getClickTrackingUris()))
                 .containsOnly("clickTrackerOne", "clickTrackerTwo");
-        assertThat(subject.getClickThroughUri()).isEqualTo("http://www.mopub.com/");
+        assertThat(subject.getClickThroughUri()).isEqualTo("https://www.mopub.com/");
         assertThat(VastUtils.vastTrackersToStrings(subject.getViewTrackingUris()))
                 .containsOnly("viewTrackerOne", "viewTrackerTwo");
     }
@@ -82,7 +87,7 @@ public void handleImpression_shouldTrackImpression() throws Exception {
 
     @Test
     public void handleClick_shouldNotTrackClick() throws Exception {
-        subject.handleClick(context, null);
+        subject.handleClick(context, null, dspCreativeId);
 
         verifyNoMoreInteractions(mockRequestQueue);
     }
@@ -90,14 +95,16 @@ public void handleClick_shouldNotTrackClick() throws Exception {
 
     @Test
     public void handleClick_shouldOpenMoPubBrowser() throws Exception {
-        subject.handleClick(context, null);
+        subject.handleClick(context, null, dspCreativeId);
 
-        Robolectric.runBackgroundTasks();
-        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
+        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
+        Intent startedActivity = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(startedActivity.getComponent().getClassName())
                 .isEqualTo("com.mopub.common.MoPubBrowser");
         assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY))
-                .isEqualTo("http://www.mopub.com/");
+                .isEqualTo("https://www.mopub.com/");
+        assertThat(startedActivity.getStringExtra(MoPubBrowser.DSP_CREATIVE_ID))
+                .isEqualTo("dspCreativeId");
         assertThat(startedActivity.getData()).isNull();
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigXmlManagerTest.java
index e0e501ab..1789c222 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigXmlManagerTest.java
@@ -6,12 +6,14 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
 import org.w3c.dom.Node;
 
 import static com.mopub.mobileads.test.support.VastUtils.createNode;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class VastIconConfigXmlManagerTest {
 
     private VastIconXmlManager subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java
index 57d5625e..c16f52b6 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java
@@ -6,6 +6,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
 import org.w3c.dom.Node;
 
 import java.util.List;
@@ -14,6 +15,7 @@
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class VastLinearXmlManagerTest {
 
     private VastLinearXmlManager subject;
@@ -26,167 +28,167 @@ public void setup() throws Exception {
                 "<TrackingEvents>" +
                 "    <Tracking event=\"creativeView\">" +
                 "        <![CDATA[" +
-                "        http://creativeView/one" +
+                "        https://creativeView/one" +
                 "        ]]>" +
                 "    </Tracking>" +
                 "    <Tracking event=\"creativeView\">" +
                 "        <![CDATA[" +
-                "        http://creativeView/two" +
+                "        https://creativeView/two" +
                 "        ]]>" +
                 "    </Tracking>" +
                 "    <Tracking event=\"start\">" +
                 "        <![CDATA[" +
-                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
                 "        ]]>" +
                 "    </Tracking>" +
                 "    <Tracking event=\"progress\" offset=\"13%\">" +
                 "        <![CDATA[" +
-                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
                 "        ]]>" +
                 "    </Tracking>" +
                 "    <Tracking event=\"progress\" offset=\"01:01:10.300\">" +
                 "        <![CDATA[" +
-                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
                 "        ]]>" +
                 "    </Tracking>" +
                 // Invalid tracking due to ambiguous offset.
                 "    <Tracking event=\"progress\" offset=\"01:01\">" +
                 "        <![CDATA[" +
-                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
                 "        ]]>" +
                 "    </Tracking>" +
                 // Invalid tracking due to a too-high percentage offset.
                 "    <Tracking event=\"progress\" offset=\"113%\">" +
                 "        <![CDATA[" +
-                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
                 "        ]]>" +
                 "    </Tracking>" +
                 // Invalid tracking due to a negative percentage offset.
                 "    <Tracking event=\"progress\" offset=\"-113%\">" +
                 "        <![CDATA[" +
-                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
                 "        ]]>" +
                 "    </Tracking>" +
                 // Invalid tracking due to a non-number offset
                 "    <Tracking event=\"progress\" offset=\"ten seconds\">" +
                 "        <![CDATA[" +
-                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
                 "        ]]>" +
                 "    </Tracking>" +
                 "    <Tracking event=\"midpoint\">" +
                 "        <![CDATA[" +
-                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;" +
+                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;" +
                 "        ]]>" +
                 "    </Tracking>" +
                 "    <Tracking event=\"midpoint\">" +
                 "        <![CDATA[" +
-                "        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?" +
+                "        https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?" +
                 "        ]]>" +
                 "    </Tracking>" +
                 "    <Tracking event=\"firstQuartile\">" +
                 "        <![CDATA[" +
-                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;" +
+                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;" +
                 "        ]]>" +
                 "    </Tracking>" +
                 "    <Tracking event=\"firstQuartile\">" +
                 "        <![CDATA[" +
-                "        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?" +
+                "        https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?" +
                 "        ]]>" +
                 "    </Tracking>" +
                 "    <Tracking event=\"thirdQuartile\">" +
                 "        <![CDATA[" +
-                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;" +
+                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;" +
                 "        ]]>" +
                 "    </Tracking>" +
                 "    <Tracking event=\"thirdQuartile\">" +
                 "        <![CDATA[" +
-                "        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?" +
+                "        https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?" +
                 "        ]]>" +
                 "    </Tracking>" +
                 "    <Tracking event=\"complete\">" +
                 "        <![CDATA[" +
-                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=13;ecn1=1;etm1=0;" +
+                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=13;ecn1=1;etm1=0;" +
                 "        ]]>" +
                 "    </Tracking>" +
                 "    <Tracking event=\"complete\">" +
                 "        <![CDATA[" +
-                "        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.5;sz=1x1;ord=2922389?" +
+                "        https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.5;sz=1x1;ord=2922389?" +
                 "        ]]>" +
                 "    </Tracking>" +
                 "    <Tracking event=\"close\">" +
                 "        <![CDATA[" +
-                "        http://www.mopub.com/close?q=ignatius" +
+                "        https://www.mopub.com/close?q=ignatius" +
                 "        ]]>" +
                 "    </Tracking>" +
                 "    <Tracking event=\"close\">" +
                 "        <![CDATA[" +
-                "        http://www.mopub.com/close?q=j3" +
+                "        https://www.mopub.com/close?q=j3" +
                 "        ]]>" +
                 "    </Tracking>" +
                 "    <Tracking event=\"closeLinear\">" +
                 "        <![CDATA[" +
-                "        http://www.mopub.com/closeLinear" +
+                "        https://www.mopub.com/closeLinear" +
                 "        ]]>" +
                 "    </Tracking>" +
                 "    <Tracking event=\"skip\">" +
                 "        <![CDATA[" +
-                "        http://www.mopub.com/skip?q=ignatius" +
+                "        https://www.mopub.com/skip?q=ignatius" +
                 "        ]]>" +
                 "    </Tracking>" +
                 "    <Tracking event=\"skip\">" +
                 "        <![CDATA[" +
-                "        http://www.mopub.com/skip?q=j3" +
+                "        https://www.mopub.com/skip?q=j3" +
                 "        ]]>" +
                 "    </Tracking>" +
                 "    <Tracking event=\"mute\">" +
                 "        <![CDATA[" +
-                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=16;ecn1=1;etm1=0;" +
+                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=16;ecn1=1;etm1=0;" +
                 "        ]]>" +
                 "    </Tracking>" +
                 "    <Tracking event=\"pause\">" +
                 "        <![CDATA[" +
-                "        http://www.mopub.com/pause?num=1" +
+                "        https://www.mopub.com/pause?num=1" +
                 "        ]]>" +
                 "    </Tracking>" +
                 "    <Tracking event=\"pause\">" +
                 "        <![CDATA[" +
-                "        http://www.mopub.com/pause?num=2" +
+                "        https://www.mopub.com/pause?num=2" +
                 "        ]]>" +
                 "    </Tracking>" +
                 "    <Tracking event=\"resume\">" +
                 "        <![CDATA[" +
-                "        http://www.mopub.com/resume?num=1" +
+                "        https://www.mopub.com/resume?num=1" +
                 "        ]]>" +
                 "    </Tracking>" +
                 "    <Tracking event=\"resume\">" +
                 "        <![CDATA[" +
-                "        http://www.mopub.com/resume?num=2" +
+                "        https://www.mopub.com/resume?num=2" +
                 "        ]]>" +
                 "    </Tracking>" +
                 "    <Tracking event=\"fullscreen\">" +
                 "        <![CDATA[" +
-                "        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=19;ecn1=1;etm1=0;" +
+                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=19;ecn1=1;etm1=0;" +
                 "        ]]>" +
                 "    </Tracking>" +
                 "    <Tracking event=\"fullscreen\">" +
                 "        <![CDATA[" +
-                "        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.6;sz=1x1;ord=2922389?" +
+                "        https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.6;sz=1x1;ord=2922389?" +
                 "        ]]>" +
                 "    </Tracking>" +
                 "</TrackingEvents>" +
                 "<AdParameters/>" +
                 "<VideoClicks>" +
                 "    <ClickThrough>" +
-                "        <![CDATA[ http://www.google.com/support/richmedia ]]>" +
+                "        <![CDATA[ https://www.google.com/support/richmedia ]]>" +
                 "    </ClickThrough>" +
                 "    <ClickTracking id=\"DART\">" +
                 "        <![CDATA[" +
-                "        http://ad.doubleclick.net/click%3Bh%3Dv8/3e1b/3/0/%2a/z%3B223626102%3B0-0%3B0%3B47414672%3B255-0/0%3B30477563/30495440/1%3B%3B%7Eaopt%3D0/0/ff/0%3B%7Esscs%3D%3fhttp://s0.2mdn.net/dot.gif" +
+                "        https://ad.doubleclick.net/click%3Bh%3Dv8/3e1b/3/0/%2a/z%3B223626102%3B0-0%3B0%3B47414672%3B255-0/0%3B30477563/30495440/1%3B%3B%7Eaopt%3D0/0/ff/0%3B%7Esscs%3D%3fhttp://s0.2mdn.net/dot.gif" +
                 "        ]]>" +
                 "    </ClickTracking>" +
                 "    <ClickTracking id=\"ThirdParty\">" +
                 "        <![CDATA[" +
-                "        http://ad.doubleclick.net/clk;212442087;33815766;i?http://www.google.com/support/richmedia" +
+                "        https://ad.doubleclick.net/clk;212442087;33815766;i?https://www.google.com/support/richmedia" +
                 "        ]]>" +
                 "    </ClickTracking>" +
                 "</VideoClicks>" +
@@ -194,13 +196,13 @@ public void setup() throws Exception {
                 "    <MediaFile id=\"1\" delivery=\"progressive\" type=\"video/quicktime\" bitrate=\"457\"" +
                 "               width=\"300\" height=\"225\">" +
                 "        <![CDATA[" +
-                "        http://s3.amazonaws.com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
+                "        https://s3.amazonaws.com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
                 "        ]]>" +
                 "    </MediaFile>" +
                 "    <MediaFile id=\"2\" delivery=\"progressive\" type=\"video/quicktime\" bitrate=\"457\"" +
                 "               width=\"300\" height=\"225\">" +
                 "        <![CDATA[" +
-                "        http://s3.amazonaws.com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny_2.mp4" +
+                "        https://s3.amazonaws.com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny_2.mp4" +
                 "        ]]>" +
                 "    </MediaFile>" +
                 "</MediaFiles>" +
@@ -234,31 +236,31 @@ public void getFractionalTrackers_shouldReturnCorrectValues() {
 
         VastFractionalProgressTracker tracker0 = trackers.get(0);
         assertThat(tracker0.trackingFraction()).isEqualTo(0.13f);
-        assertThat(tracker0.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+        assertThat(tracker0.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
 
         VastFractionalProgressTracker tracker1 = trackers.get(1);
         assertThat(tracker1.trackingFraction()).isEqualTo(0.25f);
-        assertThat(tracker1.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;");
+        assertThat(tracker1.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;");
 
         VastFractionalProgressTracker tracker2 = trackers.get(2);
         assertThat(tracker2.trackingFraction()).isEqualTo(0.25f);
-        assertThat(tracker2.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?");
+        assertThat(tracker2.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?");
 
         VastFractionalProgressTracker tracker3 = trackers.get(3);
         assertThat(tracker3.trackingFraction()).isEqualTo(0.5f);
-        assertThat(tracker3.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;");
+        assertThat(tracker3.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;");
 
         VastFractionalProgressTracker tracker4 = trackers.get(4);
         assertThat(tracker4.trackingFraction()).isEqualTo(0.5f);
-        assertThat(tracker4.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?");
+        assertThat(tracker4.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?");
 
         VastFractionalProgressTracker tracker5 = trackers.get(5);
         assertThat(tracker5.trackingFraction()).isEqualTo(0.75f);
-        assertThat(tracker5.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;");
+        assertThat(tracker5.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;");
 
         VastFractionalProgressTracker tracker6 = trackers.get(6);
         assertThat(tracker6.trackingFraction()).isEqualTo(0.75f);
-        assertThat(tracker6.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?");
+        assertThat(tracker6.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?");
     }
 
     @Test
@@ -270,19 +272,19 @@ public void getAbsoluteProgressTrackers_shouldReturnCorrectValues() {
 
         VastAbsoluteProgressTracker tracker0 = trackers.get(0);
         assertThat(tracker0.getTrackingMilliseconds()).isEqualTo(0);
-        assertThat(tracker0.getTrackingUrl()).isEqualTo("http://creativeView/one");
+        assertThat(tracker0.getTrackingUrl()).isEqualTo("https://creativeView/one");
 
         VastAbsoluteProgressTracker tracker1 = trackers.get(1);
         assertThat(tracker1.getTrackingMilliseconds()).isEqualTo(0);
-        assertThat(tracker1.getTrackingUrl()).isEqualTo("http://creativeView/two");
+        assertThat(tracker1.getTrackingUrl()).isEqualTo("https://creativeView/two");
 
         VastAbsoluteProgressTracker tracker2 = trackers.get(2);
         assertThat(tracker2.getTrackingMilliseconds()).isEqualTo(2000);
-        assertThat(tracker2.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+        assertThat(tracker2.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
 
         VastAbsoluteProgressTracker tracker3 = trackers.get(3);
         assertThat(tracker3.getTrackingMilliseconds()).isEqualTo(3670300);
-        assertThat(tracker3.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;" +
+        assertThat(tracker3.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;" +
                 "src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;" +
                 "rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
     }
@@ -291,17 +293,17 @@ public void getAbsoluteProgressTrackers_shouldReturnCorrectValues() {
     public void getVideoCompleteTrackers_shouldReturnTheCorrectValue() {
         subject = new VastLinearXmlManager(linearNode);
         assertThat(VastUtils.vastTrackersToStrings(subject.getVideoCompleteTrackers()))
-                .containsOnly("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=13;ecn1=1;etm1=0;",
-                        "http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.5;sz=1x1;ord=2922389?");
+                .containsOnly("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=13;ecn1=1;etm1=0;",
+                        "https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.5;sz=1x1;ord=2922389?");
     }
 
     @Test
     public void getVideoCloseTrackers_shouldReturnTheCorrectValue() {
         subject = new VastLinearXmlManager(linearNode);
         assertThat(VastUtils.vastTrackersToStrings(subject.getVideoCloseTrackers()))
-                .containsOnly("http://www.mopub.com/close?q=ignatius",
-                        "http://www.mopub.com/close?q=j3",
-                        "http://www.mopub.com/closeLinear");
+                .containsOnly("https://www.mopub.com/close?q=ignatius",
+                        "https://www.mopub.com/close?q=j3",
+                        "https://www.mopub.com/closeLinear");
     }
 
     @Test
@@ -311,8 +313,8 @@ public void getPauseTrackers_shouldReturnRepeatableVastTrackers() {
             assertThat(vastTracker.isRepeatable());
         }
         assertThat(VastUtils.vastTrackersToStrings(subject.getPauseTrackers()))
-                .containsOnly("http://www.mopub.com/pause?num=1",
-                        "http://www.mopub.com/pause?num=2");
+                .containsOnly("https://www.mopub.com/pause?num=1",
+                        "https://www.mopub.com/pause?num=2");
     }
 
     @Test
@@ -322,16 +324,16 @@ public void getResumeTrackers_shouldReturnRepeatableVastTrackers() {
             assertThat(vastTracker.isRepeatable());
         }
         assertThat(VastUtils.vastTrackersToStrings(subject.getResumeTrackers()))
-                .containsOnly("http://www.mopub.com/resume?num=1",
-                        "http://www.mopub.com/resume?num=2");
+                .containsOnly("https://www.mopub.com/resume?num=1",
+                        "https://www.mopub.com/resume?num=2");
     }
 
     @Test
     public void getVideoSkipTrackers_shouldReturnTheCorrectValue() {
         subject = new VastLinearXmlManager(linearNode);
         assertThat(VastUtils.vastTrackersToStrings(subject.getVideoSkipTrackers()))
-                .containsOnly("http://www.mopub.com/skip?q=ignatius",
-                        "http://www.mopub.com/skip?q=j3");
+                .containsOnly("https://www.mopub.com/skip?q=ignatius",
+                        "https://www.mopub.com/skip?q=j3");
     }
 
     @Test
@@ -339,18 +341,18 @@ public void getClickThroughUrl_shouldReturnTheCorrectValue() {
         subject = new VastLinearXmlManager(linearNode);
         String url = subject.getClickThroughUrl();
 
-        assertThat(url).isEqualTo("http://www.google.com/support/richmedia");
+        assertThat(url).isEqualTo("https://www.google.com/support/richmedia");
     }
 
     @Test
     public void getClickTrackers_shouldReturnTheCorrectValue() {
         subject = new VastLinearXmlManager(linearNode);
         assertThat(VastUtils.vastTrackersToStrings(subject.getClickTrackers()))
-                .containsOnly("http://ad.doubleclick" +
+                .containsOnly("https://ad.doubleclick" +
                                 ".net/click%3Bh%3Dv8/3e1b/3/0/%2a/z%3B223626102%3B0-0%3B0" +
                                 "%3B47414672%3B255-0/0%3B30477563/30495440/1%3B%3B%7Eaopt%3D0/0" +
                                 "/ff/0%3B%7Esscs%3D%3fhttp://s0.2mdn.net/dot.gif",
-                        "http://ad.doubleclick.net/clk;212442087;33815766;i?http://www.google" +
+                        "https://ad.doubleclick.net/clk;212442087;33815766;i?https://www.google" +
                                 ".com/support/richmedia");
     }
 
@@ -391,9 +393,9 @@ public void getMediaXmlManagers_shouldReturnMediaXmlManagers() {
 
         assertThat(mediaXmlManagers.size()).isEqualTo(2);
 
-        assertThat(mediaXmlManagers.get(0).getMediaUrl()).isEqualTo("http://s3.amazonaws" +
+        assertThat(mediaXmlManagers.get(0).getMediaUrl()).isEqualTo("https://s3.amazonaws" +
                 ".com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4");
-        assertThat(mediaXmlManagers.get(1).getMediaUrl()).isEqualTo("http://s3.amazonaws" +
+        assertThat(mediaXmlManagers.get(1).getMediaUrl()).isEqualTo("https://s3.amazonaws" +
                 ".com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny_2.mp4");
     }
 
@@ -417,7 +419,7 @@ public void getMediaXmlManagers_withNoMediaFilesNode_shouldReturnEmptyList() thr
                 "    <MediaFile id=\"1\" delivery=\"progressive\" type=\"video/quicktime\" bitrate=\"457\"" +
                 "               width=\"300\" height=\"225\">" +
                 "        <![CDATA[" +
-                "        http://s3.amazonaws.com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
+                "        https://s3.amazonaws.com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
                 "        ]]>" +
                 "    </MediaFile>" +
                 "</Linear>";
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastMacroHelperTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastMacroHelperTest.java
index 89005ec6..9b1cb0ae 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastMacroHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastMacroHelperTest.java
@@ -7,6 +7,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
 
 import java.util.Arrays;
 import java.util.Collections;
@@ -14,6 +15,7 @@
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class VastMacroHelperTest {
 
     private static final String ERROR_CODE = "errorcode";
@@ -27,7 +29,7 @@
     @Before
     @SuppressWarnings("unchecked")
     public void setup() {
-        defaultUri = "http://www.derp.com/herp?errorcode=[ERRORCODE]&contentplayhead=[CONTENTPLAYHEAD]&asseturi=[ASSETURI]&cachebusting=[CACHEBUSTING]";
+        defaultUri = "https://www.derp.com/herp?errorcode=[ERRORCODE]&contentplayhead=[CONTENTPLAYHEAD]&asseturi=[ASSETURI]&cachebusting=[CACHEBUSTING]";
         // Suppressing unchecked cast to List<String> with Collections#singletonList(Object)
         subject = new VastMacroHelper(Collections.singletonList(defaultUri));
     }
@@ -35,7 +37,7 @@ public void setup() {
     @Test
     public void constructor_shouldSetCacheBusting() throws Exception {
         assertThat(subject.getUris()).containsOnly(
-                "http://www.derp.com/herp?errorcode=&contentplayhead=&asseturi=&cachebusting=" +
+                "https://www.derp.com/herp?errorcode=&contentplayhead=&asseturi=&cachebusting=" +
                         getAndCheckCachebusting(subject.getUris().get(0)));
     }
 
@@ -60,32 +62,32 @@ public void constructor_shouldCreateRandomCacheBustingValues() throws Exception
     public void withErrorCode_shouldSetErrorCode() throws Exception {
         subject.withErrorCode(VastErrorCode.XML_PARSING_ERROR);
         assertThat(subject.getUris()).containsOnly(
-                "http://www.derp.com/herp?errorcode=100&contentplayhead=&asseturi=&cachebusting=" +
+                "https://www.derp.com/herp?errorcode=100&contentplayhead=&asseturi=&cachebusting=" +
                         getAndCheckCachebusting(subject.getUris().get(0)));
 
         subject.withErrorCode(VastErrorCode.WRAPPER_TIMEOUT);
         assertThat(subject.getUris()).containsOnly(
-                "http://www.derp.com/herp?errorcode=301&contentplayhead=&asseturi=&cachebusting=" +
+                "https://www.derp.com/herp?errorcode=301&contentplayhead=&asseturi=&cachebusting=" +
                         getAndCheckCachebusting(subject.getUris().get(0)));
 
         subject.withErrorCode(VastErrorCode.NO_ADS_VAST_RESPONSE);
         assertThat(subject.getUris()).containsOnly(
-                "http://www.derp.com/herp?errorcode=303&contentplayhead=&asseturi=&cachebusting=" +
+                "https://www.derp.com/herp?errorcode=303&contentplayhead=&asseturi=&cachebusting=" +
                         getAndCheckCachebusting(subject.getUris().get(0)));
 
         subject.withErrorCode(VastErrorCode.GENERAL_LINEAR_AD_ERROR);
         assertThat(subject.getUris()).containsOnly(
-                "http://www.derp.com/herp?errorcode=400&contentplayhead=&asseturi=&cachebusting=" +
+                "https://www.derp.com/herp?errorcode=400&contentplayhead=&asseturi=&cachebusting=" +
                         getAndCheckCachebusting(subject.getUris().get(0)));
 
         subject.withErrorCode(VastErrorCode.GENERAL_COMPANION_AD_ERROR);
         assertThat(subject.getUris()).containsOnly(
-                "http://www.derp.com/herp?errorcode=600&contentplayhead=&asseturi=&cachebusting=" +
+                "https://www.derp.com/herp?errorcode=600&contentplayhead=&asseturi=&cachebusting=" +
                         getAndCheckCachebusting(subject.getUris().get(0)));
 
         subject.withErrorCode(VastErrorCode.UNDEFINED_ERROR);
         assertThat(subject.getUris()).containsOnly(
-                "http://www.derp.com/herp?errorcode=900&contentplayhead=&asseturi=&cachebusting=" +
+                "https://www.derp.com/herp?errorcode=900&contentplayhead=&asseturi=&cachebusting=" +
                         getAndCheckCachebusting(subject.getUris().get(0)));
     }
 
@@ -93,70 +95,70 @@ public void withErrorCode_shouldSetErrorCode() throws Exception {
     public void withContentPlayHead_shouldFormatTime_shouldSetContentPlayHead() throws Exception {
         subject.withContentPlayHead(3600000);
         assertThat(subject.getUris()).containsOnly(
-                "http://www.derp.com/herp?errorcode=&contentplayhead=01:00:00.000&asseturi=&cachebusting=" +
+                "https://www.derp.com/herp?errorcode=&contentplayhead=01:00:00.000&asseturi=&cachebusting=" +
                         getAndCheckCachebusting(subject.getUris().get(0)));
 
         subject.withContentPlayHead(360000000);
         assertThat(subject.getUris()).containsOnly(
-                "http://www.derp.com/herp?errorcode=&contentplayhead=100:00:00.000&asseturi=&cachebusting=" +
+                "https://www.derp.com/herp?errorcode=&contentplayhead=100:00:00.000&asseturi=&cachebusting=" +
                         getAndCheckCachebusting(subject.getUris().get(0)));
 
         subject.withContentPlayHead(3599999);
         assertThat(subject.getUris()).containsOnly(
-                "http://www.derp.com/herp?errorcode=&contentplayhead=00:59:59.999&asseturi=&cachebusting=" +
+                "https://www.derp.com/herp?errorcode=&contentplayhead=00:59:59.999&asseturi=&cachebusting=" +
                         getAndCheckCachebusting(subject.getUris().get(0)));
 
         subject.withContentPlayHead(59999);
         assertThat(subject.getUris()).containsOnly(
-                "http://www.derp.com/herp?errorcode=&contentplayhead=00:00:59.999&asseturi=&cachebusting=" +
+                "https://www.derp.com/herp?errorcode=&contentplayhead=00:00:59.999&asseturi=&cachebusting=" +
                         getAndCheckCachebusting(subject.getUris().get(0)));
 
         subject.withContentPlayHead(999);
         assertThat(subject.getUris()).containsOnly(
-                "http://www.derp.com/herp?errorcode=&contentplayhead=00:00:00.999&asseturi=&cachebusting=" +
+                "https://www.derp.com/herp?errorcode=&contentplayhead=00:00:00.999&asseturi=&cachebusting=" +
                         getAndCheckCachebusting(subject.getUris().get(0)));
 
         subject.withContentPlayHead(45296789);
         assertThat(subject.getUris()).containsOnly(
-                "http://www.derp.com/herp?errorcode=&contentplayhead=12:34:56.789&asseturi=&cachebusting=" +
+                "https://www.derp.com/herp?errorcode=&contentplayhead=12:34:56.789&asseturi=&cachebusting=" +
                         getAndCheckCachebusting(subject.getUris().get(0)));
     }
 
     @Test
     public void withAssetUri_shouldSetAssetUri() throws Exception {
-        final String expectedAssetUri = "http://thisIsAnAsset.Uri";
+        final String expectedAssetUri = "https://thisIsAnAsset.Uri";
         subject.withAssetUri(expectedAssetUri);
 
         assertThat(subject.getUris()).containsOnly(
-                "http://www.derp.com/herp?errorcode=&contentplayhead=&asseturi=http%3A%2F%2FthisIsAnAsset.Uri&cachebusting=" +
+                "https://www.derp.com/herp?errorcode=&contentplayhead=&asseturi=https%3A%2F%2FthisIsAnAsset.Uri&cachebusting=" +
                         getAndCheckCachebusting(subject.getUris().get(0)));
     }
 
     @Test
     @SuppressWarnings("unchecked")
     public void withManyMacros_shouldReplaceAllOfThem() throws Exception {
-        final String multiUrl = "http://www.someurl.com/dosomething?[ERRORCODE][ERRORCODE][CONTENTPLAYHEAD][ERRORCODE][ASSETURI][CONTENTPLAYHEAD][ERRORCODE]";
+        final String multiUrl = "https://www.someurl.com/dosomething?[ERRORCODE][ERRORCODE][CONTENTPLAYHEAD][ERRORCODE][ASSETURI][CONTENTPLAYHEAD][ERRORCODE]";
         subject = new VastMacroHelper(Collections.singletonList(multiUrl))
                 .withAssetUri("asset")
                 .withContentPlayHead(100000)
                 .withErrorCode(VastErrorCode.UNDEFINED_ERROR);
 
         assertThat(subject.getUris()).containsOnly(
-                "http://www.someurl.com/dosomething?90090000:01:40.000900asset00:01:40.000900");
+                "https://www.someurl.com/dosomething?90090000:01:40.000900asset00:01:40.000900");
     }
 
     @Test
     @SuppressWarnings("unchecked")
     public void withSpecialCharactersInAsseturi_shouldUrlEncode() {
-        final String specialUrl = "http://www.someurl.com/somedirectory/somemethod?errorcode=[ERRORCODE]&asseturi=[ASSETURI]";
+        final String specialUrl = "https://www.someurl.com/somedirectory/somemethod?errorcode=[ERRORCODE]&asseturi=[ASSETURI]";
         subject = new VastMacroHelper(Collections.singletonList(specialUrl))
                 .withErrorCode(VastErrorCode.UNDEFINED_ERROR)
                 .withAssetUri(
-                        "http://aaddss.mmooppuubb.ccoomm:123/method?args=one~`!@#$%^&*()_+-[]{}|:,.<>/");
+                        "https://aaddss.mmooppuubb.ccoomm:123/method?args=one~`!@#$%^&*()_+-[]{}|:,.<>/");
 
         assertThat(subject.getUris()).containsOnly(
-                "http://www.someurl.com/somedirectory/somemethod?errorcode=900&asseturi=" +
-                        "http%3A%2F%2Faaddss.mmooppuubb.ccoomm%3A123%2Fmethod%3Fargs%3Done" +
+                "https://www.someurl.com/somedirectory/somemethod?errorcode=900&asseturi=" +
+                        "https%3A%2F%2Faaddss.mmooppuubb.ccoomm%3A123%2Fmethod%3Fargs%3Done" +
                         "%7E%60%21%40%23%24%25%5E%26*%28%29_%2B-%5B%5D%7B%7D%7C%3A%2C.%3C%3E%2F");
     }
 
@@ -174,11 +176,11 @@ public void withManyUrls_shouldReturnListOfUrls() {
 
         assertThat(subject.getUris().size()).isEqualTo(3);
         assertThat(subject.getUris().get(0)).isEqualTo(
-                "http://www.derp.com/herp?errorcode=900&contentplayhead=00:00:00.500&asseturi=https%3A%2F%2Fa.ss.et");
+                "https://www.derp.com/herp?errorcode=900&contentplayhead=00:00:00.500&asseturi=https%3A%2F%2Fa.ss.et");
         assertThat(subject.getUris().get(1)).isEqualTo(
-                "http://www.derp.com/herp?errorcode=900&contentplayhead=00:00:00.500&asseturi=https%3A%2F%2Fa.ss.et&asset2=https%3A%2F%2Fa.ss.et");
+                "https://www.derp.com/herp?errorcode=900&contentplayhead=00:00:00.500&asseturi=https%3A%2F%2Fa.ss.et&asset2=https%3A%2F%2Fa.ss.et");
         assertThat(subject.getUris().get(2)).isEqualTo(
-                "http://www.derp.com/herp?errorcode=900&contentplayhead=00:00:00.500&asseturi=https%3A%2F%2Fa.ss.et&cph2=00:00:00.500");
+                "https://www.derp.com/herp?errorcode=900&contentplayhead=00:00:00.500&asseturi=https%3A%2F%2Fa.ss.et&cph2=00:00:00.500");
     }
 
     @Test
@@ -205,7 +207,7 @@ public void withDeeplink_shouldNotAttemptToReformat() {
     @Test
     @SuppressWarnings("unchecked")
     public void withNormalUri_shouldReturnUnchangedUri() {
-        final String normalUri = "http://www.thisisanormal.uri/with?some=query";
+        final String normalUri = "https://www.thisisanormal.uri/with?some=query";
         subject = new VastMacroHelper(Collections.singletonList(normalUri));
 
         assertThat(subject.getUris()).containsOnly(normalUri);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java
index 357e0ec7..d53c7cc3 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java
@@ -5,15 +5,18 @@
 import com.mopub.common.CacheService;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.DeviceUtils;
+import com.mopub.common.util.test.support.ShadowMoPubHttpUrlConnection;
 import com.mopub.mobileads.test.support.VastUtils;
 
+import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
-import org.robolectric.tester.org.apache.http.FakeHttpLayer;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowLooper;
 
 import java.util.concurrent.Semaphore;
 
@@ -25,26 +28,26 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class, shadows = {ShadowMoPubHttpUrlConnection.class})
 public class VastManagerTest {
     static final String EXTENSIONS_SNIPPET_PLACEHOLDER = "<![CDATA[EXTENSIONS_SNIPPET]]>";
-    static final String TEST_VAST_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>http://dsp.x-team.staging.mopub.com/xml</VASTAdTagURI><Impression>http://myTrackingURL/wrapper/impression1</Impression><Impression>http://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>http://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>http://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>http://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='progress' offset='00:00:03.100'>http://myTrackingURL/wrapper/progress</Tracking><Tracking event='firstQuartile'>http://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>http://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>http://myTrackingURL/wrapper/complete</Tracking><Tracking event='close'>http://myTrackingURL/wrapper/close</Tracking><Tracking event='skip'>http://myTrackingURL/wrapper/skip</Tracking><Tracking event='mute'>http://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>http://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>http://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>http://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>http://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>http://myTrackingURL/wrapper/click</ClickTracking></VideoClicks></Linear></Creative><Creative AdID=\"601364-Companion\"> <CompanionAds><Companion width=\"9000\"></Companion> </CompanionAds></Creative></Creatives><![CDATA[EXTENSIONS_SNIPPET]]><Error><![CDATA[http://wrapperErrorTracker]]></Error></Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>http://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>http://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
-    static final String TEST_NESTED_VAST_XML_STRING = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><VAST version='2.0'><Ad id='57722'><InLine><AdSystem version='1.0'>Tapad</AdSystem><AdTitle><![CDATA[PKW6T_LIV_DSN_Audience_TAPAD_3rd Party Audience Targeting_Action Movi]]></AdTitle><Description/><Impression><![CDATA[http://rtb-test.dev.tapad.com:8080/creative/imp.png?ts=1374099035457&svid=1&creative_id=30731&ctx_type=InApp&ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&liverail_cp=1]]></Impression><Creatives><Creative sequence='1' id='57722'><Linear><TrackingEvents><Tracking event='close'>http://myTrackingURL/wrapper/nested_close</Tracking><Tracking event='skip'>http://myTrackingURL/wrapper/nested_skip</Tracking></TrackingEvents><Duration>00:00:15</Duration><VideoClicks><ClickThrough><![CDATA[http://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com]]></ClickThrough></VideoClicks><MediaFiles><MediaFile delivery='progressive' bitrate='416' width='800' height='480' type='video/mp4'><![CDATA[https://s3.amazonaws.com/mopub-vast/tapad-video.mp4]]></MediaFile><MediaFile delivery='progressive' bitrate='416' width='300' height='250' type='video/mp4'><![CDATA[https://s3.amazonaws.com/mopub-vast/tapad-video1.mp4]]></MediaFile></MediaFiles></Linear></Creative><Creative AdID=\"601364-Companion\"><CompanionAds><Companion id=\"valid\" height=\"250\" width=\"300\"><StaticResource creativeType=\"image/jpeg\">http://demo.tremormedia.com/proddev/vast/Blistex1.jpg</StaticResource><TrackingEvents><Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking><Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking></TrackingEvents><CompanionClickThrough>http://www.tremormedia.com</CompanionClickThrough><CompanionClickTracking><![CDATA[http://companionClickTracking1]]></CompanionClickTracking><CompanionClickTracking><![CDATA[http://companionClickTracking2]]></CompanionClickTracking></Companion></CompanionAds></Creative></Creatives><![CDATA[EXTENSIONS_SNIPPET]]><Error><![CDATA[http://inLineErrorTracker]]></Error></InLine></Ad></VAST>";
-    static final String TEST_VAST_BAD_NEST_URL_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>http://dsp.x-team.staging.mopub.com/xml\"$|||</VASTAdTagURI><Impression>http://myTrackingURL/wrapper/impression1</Impression><Impression>http://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>http://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>http://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>http://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='firstQuartile'>http://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>http://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>http://myTrackingURL/wrapper/complete</Tracking><Tracking event='mute'>http://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>http://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>http://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>http://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>http://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>http://myTrackingURL/wrapper/click</ClickTracking></VideoClicks></Linear></Creative></Creatives></Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>http://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>http://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
+    static final String TEST_VAST_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>https://dsp.x-team.staging.mopub.com/xml</VASTAdTagURI><Impression>https://myTrackingURL/wrapper/impression1</Impression><Impression>https://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>https://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>https://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>https://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='progress' offset='00:00:03.100'>https://myTrackingURL/wrapper/progress</Tracking><Tracking event='firstQuartile'>https://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>https://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>https://myTrackingURL/wrapper/complete</Tracking><Tracking event='close'>https://myTrackingURL/wrapper/close</Tracking><Tracking event='skip'>https://myTrackingURL/wrapper/skip</Tracking><Tracking event='mute'>https://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>https://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>https://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>https://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>https://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>https://myTrackingURL/wrapper/click</ClickTracking></VideoClicks></Linear></Creative><Creative AdID=\"601364-Companion\"> <CompanionAds><Companion width=\"9000\"></Companion> </CompanionAds></Creative></Creatives><![CDATA[EXTENSIONS_SNIPPET]]><Error><![CDATA[https://wrapperErrorTracker]]></Error></Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>https://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>https://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
+    static final String TEST_NESTED_VAST_XML_STRING = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><VAST version='2.0'><Ad id='57722'><InLine><AdSystem version='1.0'>Tapad</AdSystem><AdTitle><![CDATA[PKW6T_LIV_DSN_Audience_TAPAD_3rd Party Audience Targeting_Action Movi]]></AdTitle><Description/><Impression><![CDATA[https://rtb-test.dev.tapad.com:8080/creative/imp.png?ts=1374099035457&svid=1&creative_id=30731&ctx_type=InApp&ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&liverail_cp=1]]></Impression><Creatives><Creative sequence='1' id='57722'><Linear><TrackingEvents><Tracking event='close'>https://myTrackingURL/wrapper/nested_close</Tracking><Tracking event='skip'>https://myTrackingURL/wrapper/nested_skip</Tracking></TrackingEvents><Duration>00:00:15</Duration><VideoClicks><ClickThrough><![CDATA[https://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=https%3A%2F%2Ftapad.com]]></ClickThrough></VideoClicks><MediaFiles><MediaFile delivery='progressive' bitrate='416' width='800' height='480' type='video/mp4'><![CDATA[https://s3.amazonaws.com/mopub-vast/tapad-video.mp4]]></MediaFile><MediaFile delivery='progressive' bitrate='416' width='300' height='250' type='video/mp4'><![CDATA[https://s3.amazonaws.com/mopub-vast/tapad-video1.mp4]]></MediaFile></MediaFiles></Linear></Creative><Creative AdID=\"601364-Companion\"><CompanionAds><Companion id=\"valid\" height=\"250\" width=\"300\"><StaticResource creativeType=\"image/jpeg\">https://demo.tremormedia.com/proddev/vast/Blistex1.jpg</StaticResource><TrackingEvents><Tracking event=\"creativeView\">https://myTrackingURL/firstCompanionCreativeView</Tracking><Tracking event=\"creativeView\">https://myTrackingURL/secondCompanionCreativeView</Tracking></TrackingEvents><CompanionClickThrough>https://www.tremormedia.com</CompanionClickThrough><CompanionClickTracking><![CDATA[https://companionClickTracking1]]></CompanionClickTracking><CompanionClickTracking><![CDATA[https://companionClickTracking2]]></CompanionClickTracking></Companion></CompanionAds></Creative></Creatives><![CDATA[EXTENSIONS_SNIPPET]]><Error><![CDATA[https://inLineErrorTracker]]></Error></InLine></Ad></VAST>";
+    static final String TEST_VAST_BAD_NEST_URL_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>https://dsp.x-team.staging.mopub.com/xml\"$|||</VASTAdTagURI><Impression>https://myTrackingURL/wrapper/impression1</Impression><Impression>https://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>https://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>https://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>https://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='firstQuartile'>https://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>https://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>https://myTrackingURL/wrapper/complete</Tracking><Tracking event='mute'>https://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>https://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>https://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>https://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>https://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>https://myTrackingURL/wrapper/click</ClickTracking></VideoClicks></Linear></Creative></Creatives></Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>https://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>https://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
 
     private VastManager subject;
-    private FakeHttpLayer mFakeHttpLayer;
     private VastManagerListener vastManagerListener;
     private Activity context;
     private VastVideoConfig mVastVideoConfig;
     private Semaphore semaphore;
+    private String dspCreativeId;
 
     @Before
     public void setup() {
         context = Robolectric.buildActivity(Activity.class).create().get();
         CacheService.initializeDiskCache(context);
-        subject = new VastManager(context);
-        mFakeHttpLayer = Robolectric.getFakeHttpLayer();
-
+        subject = new VastManager(context, true);
+        dspCreativeId = "dspCreativeId";
         semaphore = new Semaphore(0);
         vastManagerListener = mock(VastManagerListener.class);
         doAnswer(new Answer() {
@@ -58,19 +61,24 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
         }).when(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
     }
 
+    @After
+    public void tearDown() {
+        CacheService.clearAndNullCaches();
+    }
+
     private void prepareVastVideoConfiguration() {
-        subject.prepareVastVideoConfiguration(TEST_VAST_XML_STRING, vastManagerListener, context);
+        subject.prepareVastVideoConfiguration(TEST_VAST_XML_STRING, vastManagerListener, dspCreativeId, context);
 
-        Robolectric.runBackgroundTasks();
-        Robolectric.runUiThreadTasks();
+        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
+        ShadowLooper.runUiThreadTasks();
     }
 
     @Test
     public void prepareVastVideoConfiguration_shouldNotifyTheListenerAndContainTheCorrectVastValues() throws Exception {
         // Vast redirect responses
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING);
         // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
 
         prepareVastVideoConfiguration();
         semaphore.acquire();
@@ -81,7 +89,7 @@ public void prepareVastVideoConfiguration_shouldNotifyTheListenerAndContainTheCo
         final String expectedFilePathDiskCache = CacheService.getFilePathDiskCache(mVastVideoConfig.getNetworkMediaFileUrl());
         assertThat(mVastVideoConfig.getDiskMediaFileUrl()).isEqualTo(expectedFilePathDiskCache);
 
-        assertThat(mVastVideoConfig.getClickThroughUrl()).isEqualTo("http://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com");
+        assertThat(mVastVideoConfig.getClickThroughUrl()).isEqualTo("https://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=https%3A%2F%2Ftapad.com");
         assertThat(mVastVideoConfig.getImpressionTrackers().size()).isEqualTo(5);
 
         // Verify quartile trackers
@@ -112,26 +120,26 @@ public void prepareVastVideoConfiguration_shouldNotifyTheListenerAndContainTheCo
         assertThat(vastCompanionAdConfig.getWidth()).isEqualTo(300);
         assertThat(vastCompanionAdConfig.getHeight()).isEqualTo(250);
         assertThat(vastCompanionAdConfig.getVastResource().getResource())
-                .isEqualTo("http://demo.tremormedia.com/proddev/vast/Blistex1.jpg");
+                .isEqualTo("https://demo.tremormedia.com/proddev/vast/Blistex1.jpg");
         assertThat(vastCompanionAdConfig.getVastResource().getType())
                 .isEqualTo(VastResource.Type.STATIC_RESOURCE);
         assertThat(vastCompanionAdConfig.getVastResource().getCreativeType())
                 .isEqualTo(VastResource.CreativeType.IMAGE);
-        assertThat(vastCompanionAdConfig.getClickThroughUrl()).isEqualTo("http://www.tremormedia.com");
+        assertThat(vastCompanionAdConfig.getClickThroughUrl()).isEqualTo("https://www.tremormedia.com");
 
         assertThat(VastUtils.vastTrackersToStrings(vastCompanionAdConfig.getClickTrackers()))
-                .containsOnly("http://companionClickTracking1",
-                        "http://companionClickTracking2");
+                .containsOnly("https://companionClickTracking1",
+                        "https://companionClickTracking2");
     }
 
     @Test
     public void prepareVastVideoConfiguration_shouldHandleMultipleRedirects() throws Exception {
         // Vast redirect responses
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_VAST_XML_STRING);
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_VAST_XML_STRING);
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_VAST_XML_STRING);
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_VAST_XML_STRING);
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING);
         // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
 
         prepareVastVideoConfiguration();
         semaphore.acquire();
@@ -143,7 +151,7 @@ public void prepareVastVideoConfiguration_shouldHandleMultipleRedirects() throws
         final String expectedFilePathDiskCache = CacheService.getFilePathDiskCache(mVastVideoConfig.getNetworkMediaFileUrl());
         assertThat(mVastVideoConfig.getDiskMediaFileUrl()).isEqualTo(expectedFilePathDiskCache);
 
-        assertThat(mVastVideoConfig.getClickThroughUrl()).isEqualTo("http://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com");
+        assertThat(mVastVideoConfig.getClickThroughUrl()).isEqualTo("https://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=https%3A%2F%2Ftapad.com");
         assertThat(mVastVideoConfig.getImpressionTrackers().size()).isEqualTo(13);
 
         assertThat(mVastVideoConfig.getAbsoluteTrackers().size()).isEqualTo(9);
@@ -180,23 +188,23 @@ public void prepareVastVideoConfiguration_shouldHandleMultipleRedirects() throws
         assertThat(vastCompanionAdConfig.getWidth()).isEqualTo(300);
         assertThat(vastCompanionAdConfig.getHeight()).isEqualTo(250);
         assertThat(vastCompanionAdConfig.getVastResource().getResource())
-                .isEqualTo("http://demo.tremormedia.com/proddev/vast/Blistex1.jpg");
+                .isEqualTo("https://demo.tremormedia.com/proddev/vast/Blistex1.jpg");
         assertThat(vastCompanionAdConfig.getVastResource().getType())
                 .isEqualTo(VastResource.Type.STATIC_RESOURCE);
         assertThat(vastCompanionAdConfig.getVastResource().getCreativeType())
                 .isEqualTo(VastResource.CreativeType.IMAGE);
-        assertThat(vastCompanionAdConfig.getClickThroughUrl()).isEqualTo("http://www.tremormedia.com");
+        assertThat(vastCompanionAdConfig.getClickThroughUrl()).isEqualTo("https://www.tremormedia.com");
         assertThat(VastUtils.vastTrackersToStrings(vastCompanionAdConfig.getClickTrackers()))
-                .containsOnly("http://companionClickTracking1",
-                        "http://companionClickTracking2");
+                .containsOnly("https://companionClickTracking1",
+                        "https://companionClickTracking2");
     }
 
     @Test
     public void prepareVastVideoConfiguration_shouldReturnCorrectVastValuesWhenAVastRedirectFails() throws Exception {
         // Vast redirect response
-        mFakeHttpLayer.addPendingHttpResponse(404, "");
+        ShadowMoPubHttpUrlConnection.addPendingResponse(404, "");
         // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
 
         prepareVastVideoConfiguration();
         semaphore.acquire();
@@ -208,9 +216,9 @@ public void prepareVastVideoConfiguration_shouldReturnCorrectVastValuesWhenAVast
     @Test
     public void prepareVastVideoConfiguration_withNoExtensions_shouldContainTheCorrectDefaultExtensionValues() throws Exception {
         // Vast redirect response to XML without VAST extensions
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING);
         // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
 
         prepareVastVideoConfiguration();
         semaphore.acquire();
@@ -225,9 +233,9 @@ public void prepareVastVideoConfiguration_withNoExtensions_shouldContainTheCorre
     @Test
     public void prepareVastVideoConfiguration_withExtensionsUnderWrapper_shouldContainTheCorrectCustomExtensionValues() throws Exception {
         // Vast redirect response to XML without extensions
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING);
         // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
 
         // Add extensions under Wrapper element in TEST_VAST_XML_STRING
         subject.prepareVastVideoConfiguration(
@@ -236,40 +244,41 @@ public void prepareVastVideoConfiguration_withExtensionsUnderWrapper_shouldConta
                             "<Extension type=\"MoPub\">" +
                                 "<MoPubCtaText>custom CTA text</MoPubCtaText>" +
                                 "<MoPubSkipText>skip</MoPubSkipText>" +
-                                "<MoPubCloseIcon>http://ton.twitter.com/exchange-media/images/v4/star_icon_3x.png</MoPubCloseIcon>" +
+                                "<MoPubCloseIcon>https://ton.twitter.com/exchange-media/images/v4/star_icon_3x.png</MoPubCloseIcon>" +
                                 "<MoPubForceOrientation>device</MoPubForceOrientation>" +
                             "</Extension>" +
                         "</Extensions>"),
                 vastManagerListener,
+                dspCreativeId,
                 context);
 
-        Robolectric.runBackgroundTasks();
-        Robolectric.runUiThreadTasks();
+        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
+        ShadowLooper.runUiThreadTasks();
         semaphore.acquire();
         verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
 
         // Verify custom extensions
         assertThat(mVastVideoConfig.getCustomCtaText()).isEqualTo("custom CTA text");
         assertThat(mVastVideoConfig.getCustomSkipText()).isEqualTo("skip");
-        assertThat(mVastVideoConfig.getCustomCloseIconUrl()).isEqualTo("http://ton.twitter.com/exchange-media/images/v4/star_icon_3x.png");
+        assertThat(mVastVideoConfig.getCustomCloseIconUrl()).isEqualTo("https://ton.twitter.com/exchange-media/images/v4/star_icon_3x.png");
         assertThat(mVastVideoConfig.getCustomForceOrientation()).isEqualTo(DeviceUtils.ForceOrientation.DEVICE_ORIENTATION);
     }
 
     @Test
     public void prepareVastVideoConfiguration_withExtensionsUnderInline_shouldContainTheCorrectCustomExtensionValues() throws Exception {
         // Vast redirect response to XML with extensions under Inline element
-        mFakeHttpLayer.addPendingHttpResponse(200,
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200,
                 TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
                         "<Extensions>" +
-                            "<Extension type=\"MoPub\">" +
+                                "<Extension type=\"MoPub\">" +
                                 "<MoPubCtaText>custom CTA text</MoPubCtaText>" +
                                 "<MoPubSkipText>skip</MoPubSkipText>" +
-                                "<MoPubCloseIcon>http://ton.twitter.com/exchange-media/images/v4/star_icon_3x.png</MoPubCloseIcon>" +
+                                "<MoPubCloseIcon>https://ton.twitter.com/exchange-media/images/v4/star_icon_3x.png</MoPubCloseIcon>" +
                                 "<MoPubForceOrientation>device</MoPubForceOrientation>" +
-                            "</Extension>" +
-                        "</Extensions>"));
+                                "</Extension>" +
+                                "</Extensions>"));
         // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
 
         prepareVastVideoConfiguration();
         semaphore.acquire();
@@ -279,25 +288,25 @@ public void prepareVastVideoConfiguration_withExtensionsUnderInline_shouldContai
         // Verify custom extensions
         assertThat(mVastVideoConfig.getCustomCtaText()).isEqualTo("custom CTA text");
         assertThat(mVastVideoConfig.getCustomSkipText()).isEqualTo("skip");
-        assertThat(mVastVideoConfig.getCustomCloseIconUrl()).isEqualTo("http://ton.twitter.com/exchange-media/images/v4/star_icon_3x.png");
+        assertThat(mVastVideoConfig.getCustomCloseIconUrl()).isEqualTo("https://ton.twitter.com/exchange-media/images/v4/star_icon_3x.png");
         assertThat(mVastVideoConfig.getCustomForceOrientation()).isEqualTo(DeviceUtils.ForceOrientation.DEVICE_ORIENTATION);
     }
 
     @Test
     public void prepareVastVideoConfiguration_withExtensionsUnderBothWrapperAndInline_shouldContainLastParsedCustomExtensionValues() throws Exception {
         // Vast redirect response to XML with extensions under Inline element in TEST_NESTED_VAST_XML_STRING, will be parsed last
-        mFakeHttpLayer.addPendingHttpResponse(200,
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200,
                 TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
                         "<Extensions>" +
-                            "<Extension type=\"MoPub\">" +
+                                "<Extension type=\"MoPub\">" +
                                 "<MoPubCtaText>CTA 2</MoPubCtaText>" +
                                 "<MoPubSkipText>skip 2</MoPubSkipText>" +
-                                "<MoPubCloseIcon>http://ton.twitter.com/exchange-media/images/v4/star_icon_3x_2.png</MoPubCloseIcon>" +
+                                "<MoPubCloseIcon>https://ton.twitter.com/exchange-media/images/v4/star_icon_3x_2.png</MoPubCloseIcon>" +
                                 "<MoPubForceOrientation>landscape</MoPubForceOrientation>" +
-                            "</Extension>" +
-                        "</Extensions>"));
+                                "</Extension>" +
+                                "</Extensions>"));
         // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
 
         // Also add extensions under Wrapper element in TEST_VAST_XML_STRING
         subject.prepareVastVideoConfiguration(
@@ -306,15 +315,16 @@ public void prepareVastVideoConfiguration_withExtensionsUnderBothWrapperAndInlin
                             "<Extension type=\"MoPub\">" +
                                 "<MoPubCtaText>CTA 1</MoPubCtaText>" +
                                 "<MoPubSkipText>skip 1</MoPubSkipText>" +
-                                "<MoPubCloseIcon>http://ton.twitter.com/exchange-media/images/v4/star_icon_3x_1.png</MoPubCloseIcon>" +
+                                "<MoPubCloseIcon>https://ton.twitter.com/exchange-media/images/v4/star_icon_3x_1.png</MoPubCloseIcon>" +
                                 "<MoPubForceOrientation>device orientation</MoPubForceOrientation>" +
                             "</Extension>" +
                         "</Extensions>"),
                 vastManagerListener,
+                dspCreativeId,
                 context);
 
-        Robolectric.runBackgroundTasks();
-        Robolectric.runUiThreadTasks();
+        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
+        ShadowLooper.runUiThreadTasks();
         semaphore.acquire();
 
         verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
@@ -322,22 +332,22 @@ public void prepareVastVideoConfiguration_withExtensionsUnderBothWrapperAndInlin
         // Verify custom extension values are the ones last parsed in TEST_NESTED_VAST_XML_STRING
         assertThat(mVastVideoConfig.getCustomCtaText()).isEqualTo("CTA 2");
         assertThat(mVastVideoConfig.getCustomSkipText()).isEqualTo("skip 2");
-        assertThat(mVastVideoConfig.getCustomCloseIconUrl()).isEqualTo("http://ton.twitter.com/exchange-media/images/v4/star_icon_3x_2.png");
+        assertThat(mVastVideoConfig.getCustomCloseIconUrl()).isEqualTo("https://ton.twitter.com/exchange-media/images/v4/star_icon_3x_2.png");
         assertThat(mVastVideoConfig.getCustomForceOrientation()).isEqualTo(DeviceUtils.ForceOrientation.FORCE_LANDSCAPE);
     }
 
     @Test
     public void prepareVastVideoConfiguration_withCustomCtaTextAsSingleSpace_shouldReturnEmptyString() throws Exception {
         // Vast redirect response
-        mFakeHttpLayer.addPendingHttpResponse(200,
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200,
                 TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
                         "<Extensions>" +
-                            "<Extension type=\"MoPub\">" +
+                                "<Extension type=\"MoPub\">" +
                                 "<MoPubCtaText> </MoPubCtaText>" +     // single space, i.e. no text
-                            "</Extension>" +
-                        "</Extensions>"));
+                                "</Extension>" +
+                                "</Extensions>"));
         // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
 
         prepareVastVideoConfiguration();
         semaphore.acquire();
@@ -349,15 +359,15 @@ public void prepareVastVideoConfiguration_withCustomCtaTextAsSingleSpace_shouldR
     @Test
     public void prepareVastVideoConfiguration_withCustomCtaTextLongerThan15Chars_shouldReturnNull() throws Exception {
         // Vast redirect response
-        mFakeHttpLayer.addPendingHttpResponse(200,
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200,
                 TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
                         "<Extensions>" +
-                            "<Extension type=\"MoPub\">" +
+                                "<Extension type=\"MoPub\">" +
                                 "<MoPubCtaText>1234567890123456</MoPubCtaText>" +     // 16 chars
-                            "</Extension>" +
-                        "</Extensions>"));
+                                "</Extension>" +
+                                "</Extensions>"));
         // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
 
         prepareVastVideoConfiguration();
         semaphore.acquire();
@@ -369,15 +379,15 @@ public void prepareVastVideoConfiguration_withCustomCtaTextLongerThan15Chars_sho
     @Test
     public void prepareVastVideoConfiguration_withCustomSkipTextLongerThan8Chars_shouldReturnNull() throws Exception {
         // Vast redirect response
-        mFakeHttpLayer.addPendingHttpResponse(200,
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200,
                 TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
                         "<Extensions>" +
-                            "<Extension type=\"MoPub\">" +
+                                "<Extension type=\"MoPub\">" +
                                 "<MoPubSkipText>123456789</MoPubSkipText>" +     // 9 chars
-                            "</Extension>" +
-                        "</Extensions>"));
+                                "</Extension>" +
+                                "</Extensions>"));
         // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
 
         prepareVastVideoConfiguration();
         semaphore.acquire();
@@ -389,15 +399,15 @@ public void prepareVastVideoConfiguration_withCustomSkipTextLongerThan8Chars_sho
     @Test
     public void prepareVastVideoConfiguration_withInvalidCustomForceOrientation_shouldReturnDefaultForceLandscapeOrientation() throws Exception {
         // Vast redirect response
-        mFakeHttpLayer.addPendingHttpResponse(200,
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200,
                 TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
                         "<Extensions>" +
-                            "<Extension type=\"MoPub\">" +
+                                "<Extension type=\"MoPub\">" +
                                 "<MoPubForceOrientation>abcd</MoPubForceOrientation>" +   // invalid value
-                            "</Extension>" +
-                        "</Extensions>"));
+                                "</Extension>" +
+                                "</Extensions>"));
         // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
 
         prepareVastVideoConfiguration();
         semaphore.acquire();
@@ -409,15 +419,15 @@ public void prepareVastVideoConfiguration_withInvalidCustomForceOrientation_shou
     @Test
     public void prepareVastVideoConfiguration_withCustomForceOrientationInMixedCaseAndUntrimmed_shouldReturnCustomForceOrientation() throws Exception {
         // Vast redirect response
-        mFakeHttpLayer.addPendingHttpResponse(200,
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200,
                 TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
                         "<Extensions>" +
-                            "<Extension type=\"MoPub\">" +
+                                "<Extension type=\"MoPub\">" +
                                 "<MoPubForceOrientation> PortRAIT  </MoPubForceOrientation>" +
-                            "</Extension>" +
-                        "</Extensions>"));
+                                "</Extension>" +
+                                "</Extensions>"));
         // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
 
         prepareVastVideoConfiguration();
         semaphore.acquire();
@@ -429,9 +439,9 @@ public void prepareVastVideoConfiguration_withCustomForceOrientationInMixedCaseA
     @Test
     public void prepareVastVideoConfiguration_withValidPercentSkipOffset_shouldReturnCorrectValue() throws Exception {
         // Vast redirect response
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset='25%'>"));
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset='25%'>"));
         // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
 
         prepareVastVideoConfiguration();
         semaphore.acquire();
@@ -445,9 +455,9 @@ public void prepareVastVideoConfiguration_withValidPercentSkipOffset_shouldRetur
     @Test
     public void prepareVastVideoConfiguration_withValidAbsoluteSkipOffset_shouldReturnCorrectValue() throws Exception {
         // Vast redirect response
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset='  00:03:14 '>"));
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset='  00:03:14 '>"));
         // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
 
         prepareVastVideoConfiguration();
         semaphore.acquire();
@@ -460,9 +470,9 @@ public void prepareVastVideoConfiguration_withValidAbsoluteSkipOffset_shouldRetu
     @Test
     public void prepareVastVideoConfiguration_withValidAbsoluteSkipOffsetWithExtraSpace_shouldReturnCorrectTrimmedValue() throws Exception {
         // Vast redirect response
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset='  00:03:14.159 '>"));
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset='  00:03:14.159 '>"));
         // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
 
         prepareVastVideoConfiguration();
         semaphore.acquire();
@@ -475,18 +485,19 @@ public void prepareVastVideoConfiguration_withValidAbsoluteSkipOffsetWithExtraSp
     @Test
     public void prepareVastVideoConfiguration_withSkipOffsets_shouldReturnLastParsedValue() throws Exception {
         // Vast redirect response with skipoffset in percent format
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset='25%'>"));
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset='25%'>"));
         // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
 
         // Also add a skipoffset in absolute format
         subject.prepareVastVideoConfiguration(
                 TEST_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset='00:03:14'>"),
                 vastManagerListener,
+                dspCreativeId,
                 context);
 
-        Robolectric.runBackgroundTasks();
-        Robolectric.runUiThreadTasks();
+        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
+        ShadowLooper.runUiThreadTasks();
         semaphore.acquire();
 
         verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
@@ -498,9 +509,9 @@ public void prepareVastVideoConfiguration_withSkipOffsets_shouldReturnLastParsed
     @Test
     public void prepareVastVideoConfiguration_withEmptySkipOffset_shouldReturnNull() throws Exception {
         // Vast redirect response
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset=' '>"));
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset=' '>"));
         // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
 
         prepareVastVideoConfiguration();
         semaphore.acquire();
@@ -513,10 +524,10 @@ public void prepareVastVideoConfiguration_withEmptySkipOffset_shouldReturnNull()
     @Test
     public void prepareVastVideoConfiguration_withNoMediaUrlInXml_shouldReturnNull() throws Exception {
         subject.prepareVastVideoConfiguration(TEST_VAST_BAD_NEST_URL_XML_STRING,
-                vastManagerListener, context);
+                vastManagerListener, dspCreativeId, context);
 
-        Robolectric.runBackgroundTasks();
-        Robolectric.runUiThreadTasks();
+        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
+        ShadowLooper.runUiThreadTasks();
         semaphore.acquire();
 
         verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
@@ -525,10 +536,10 @@ public void prepareVastVideoConfiguration_withNoMediaUrlInXml_shouldReturnNull()
 
     @Test
     public void prepareVastVideoConfiguration_withNullXml_shouldReturnNull() throws Exception {
-        subject.prepareVastVideoConfiguration(null, vastManagerListener, context);
+        subject.prepareVastVideoConfiguration(null, vastManagerListener, dspCreativeId, context);
 
-        Robolectric.runBackgroundTasks();
-        Robolectric.runUiThreadTasks();
+        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
+        ShadowLooper.runUiThreadTasks();
         semaphore.acquire();
 
         verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
@@ -537,10 +548,10 @@ public void prepareVastVideoConfiguration_withNullXml_shouldReturnNull() throws
 
     @Test
     public void prepareVastVideoConfiguration_withEmptyXml_shouldReturnNull() throws Exception {
-        subject.prepareVastVideoConfiguration("", vastManagerListener, context);
+        subject.prepareVastVideoConfiguration("", vastManagerListener, dspCreativeId, context);
 
-        Robolectric.runBackgroundTasks();
-        Robolectric.runUiThreadTasks();
+        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
+        ShadowLooper.runUiThreadTasks();
         semaphore.acquire();
 
         verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
@@ -549,14 +560,14 @@ public void prepareVastVideoConfiguration_withEmptyXml_shouldReturnNull() throws
 
     @Test
     public void prepareVastVideoConfiguration_withVideoInDiskCache_shouldNotDownloadVideo() throws Exception {
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING);
 
         CacheService.putToDiskCache("https://s3.amazonaws.com/mopub-vast/tapad-video.mp4", "video_data".getBytes());
 
         prepareVastVideoConfiguration();
         semaphore.acquire();
 
-        assertThat(mFakeHttpLayer.getSentHttpRequestInfos().size()).isEqualTo(1);
+        assertThat(ShadowMoPubHttpUrlConnection.getLatestRequestUrl()).isNotNull();
         verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
         assertThat(mVastVideoConfig.getDiskMediaFileUrl())
                 .isEqualTo(CacheService.getFilePathDiskCache("https://s3.amazonaws.com/mopub-vast/tapad-video.mp4"));
@@ -564,7 +575,8 @@ public void prepareVastVideoConfiguration_withVideoInDiskCache_shouldNotDownload
 
     @Test
     public void prepareVastVideoConfiguration_withUninitializedDiskCache_shouldReturnNull() throws Exception {
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
+        CacheService.clearAndNullCaches();
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING);
 
         prepareVastVideoConfiguration();
         semaphore.acquire();
@@ -575,16 +587,16 @@ public void prepareVastVideoConfiguration_withUninitializedDiskCache_shouldRetur
 
     @Test
     public void cancel_shouldCancelBackgroundProcessingAndNotNotifyListenerWithNull() throws Exception {
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING);
 
-        Robolectric.getBackgroundScheduler().pause();
+        Robolectric.getBackgroundThreadScheduler().pause();
 
-        subject.prepareVastVideoConfiguration(TEST_VAST_XML_STRING, vastManagerListener, context);
+        subject.prepareVastVideoConfiguration(TEST_VAST_XML_STRING, vastManagerListener, dspCreativeId, context);
 
         subject.cancel();
 
-        Robolectric.runBackgroundTasks();
-        Robolectric.runUiThreadTasks();
+        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
+        ShadowLooper.runUiThreadTasks();
         semaphore.acquire();
 
         verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastMediaXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastMediaXmlManagerTest.java
index 729b2ace..e1effa81 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastMediaXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastMediaXmlManagerTest.java
@@ -5,12 +5,14 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
 import org.w3c.dom.Node;
 
 import static com.mopub.mobileads.test.support.VastUtils.createNode;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class VastMediaXmlManagerTest {
 
     private VastMediaXmlManager subject;
@@ -22,7 +24,7 @@ public void setup() throws Exception {
                 "bitrate=\"457\"" +
                 "               width=\"300\" height=\"225\">" +
                 "        <![CDATA[" +
-                "        http://s3.amazonaws.com/uploads.hipchat" +
+                "        https://s3.amazonaws.com/uploads.hipchat" +
                 ".com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
                 "        ]]>" +
                 "</MediaFile>";
@@ -41,7 +43,7 @@ public void getWidth_withNoWidthAttribute_shouldReturnNull() throws Exception {
         String mediaXml = "<MediaFile id=\"1\" delivery=\"progressive\" type=\"video/quicktime\" " +
                 "bitrate=\"457\" height=\"225\">" +
                 "        <![CDATA[" +
-                "        http://s3.amazonaws.com/uploads.hipchat" +
+                "        https://s3.amazonaws.com/uploads.hipchat" +
                 ".com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
                 "        ]]>" +
                 "</MediaFile>";
@@ -62,7 +64,7 @@ public void getHeight_withNoHeightAttribute_shouldReturnNull() throws Exception
         String mediaXml = "<MediaFile id=\"1\" delivery=\"progressive\" type=\"video/quicktime\" " +
                 "bitrate=\"457\" width=\"300\">" +
                 "        <![CDATA[" +
-                "        http://s3.amazonaws.com/uploads.hipchat" +
+                "        https://s3.amazonaws.com/uploads.hipchat" +
                 ".com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
                 "        ]]>" +
                 "</MediaFile>";
@@ -83,7 +85,7 @@ public void getType_withNoTypeAttribute_shouldReturnNull() throws Exception {
         String mediaXml = "<MediaFile id=\"1\" delivery=\"progressive\" " +
                 "bitrate=\"457\" width=\"300\" height=\"225\">" +
                 "        <![CDATA[" +
-                "        http://s3.amazonaws.com/uploads.hipchat" +
+                "        https://s3.amazonaws.com/uploads.hipchat" +
                 ".com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
                 "        ]]>" +
                 "</MediaFile>";
@@ -96,7 +98,7 @@ public void getType_withNoTypeAttribute_shouldReturnNull() throws Exception {
 
     @Test
     public void getMediaUrl_shouldReturnMediaFileUrl() {
-        assertThat(subject.getMediaUrl()).isEqualTo("http://s3.amazonaws.com/uploads.hipchat" +
+        assertThat(subject.getMediaUrl()).isEqualTo("https://s3.amazonaws.com/uploads.hipchat" +
                 ".com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4");
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceTest.java
index 322a98a6..01fcbe31 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceTest.java
@@ -6,12 +6,14 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
+import org.robolectric.annotation.Config;
 
 import static com.mopub.mobileads.VastResource.fromVastResourceXmlManager;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class VastResourceTest {
 
     private VastResource subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceXmlManagerTest.java
index 78f08b22..fab514c3 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceXmlManagerTest.java
@@ -5,12 +5,14 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
 import org.w3c.dom.Node;
 
 import static com.mopub.mobileads.test.support.VastUtils.createNode;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class VastResourceXmlManagerTest {
 
     private VastResourceXmlManager subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTaskTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTaskTest.java
index b711a3de..59262336 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTaskTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTaskTest.java
@@ -6,6 +6,7 @@
 import android.os.Build;
 import android.widget.ImageView;
 
+import com.mopub.TestSdkHelper;
 import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.Before;
@@ -22,9 +23,11 @@
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class VastVideoBlurLastVideoFrameTaskTest {
     @Mock private MediaMetadataRetriever mockMediaMetadataRetriever;
     @Mock private ImageView mockBlurredLastVideoFrameImageView;
@@ -46,17 +49,23 @@ public void setUp() throws Exception {
                 mockBlurredLastVideoFrameImageView, videoDuration);
     }
 
-    @Config(reportSdk = Build.VERSION_CODES.GINGERBREAD)
     @Test
     public void doInBackground_beforeGingerbreadMr1_shouldReturnFalse() throws Exception {
+        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.GINGERBREAD);
         assertThat(subject.doInBackground(videoPath)).isFalse();
+        verifyNoMoreInteractions(mockMediaMetadataRetriever);
         assertThat(subject.getBlurredLastVideoFrame()).isNull();
     }
 
-    @Config(reportSdk = Build.VERSION_CODES.GINGERBREAD_MR1)
+    @TargetApi(Build.VERSION_CODES.GINGERBREAD_MR1)
     @Test
-    public void doInBackground_atLeastGingerbreadMr1_shouldReturnTrue() throws Exception {
+    public void doInBackground_atLeastGingerbreadMr1_shouldSetVideoPath_shouldUseVideoDurationMinusOffset_shouldReturnTrue() throws Exception {
+        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.GINGERBREAD_MR1);
         assertThat(subject.doInBackground(videoPath)).isTrue();
+        verify(mockMediaMetadataRetriever).setDataSource(videoPath);
+        verify(mockMediaMetadataRetriever).getFrameAtTime(9800000,
+                MediaMetadataRetriever.OPTION_CLOSEST);
+        verifyNoMoreInteractions(mockMediaMetadataRetriever);
         assertThat(subject.getBlurredLastVideoFrame()).isEqualTo(mockBitmap);
     }
 
@@ -77,7 +86,7 @@ public void doInBackground_whenGetLastFrameReturnsNull_shouldReturnFalse() throw
         assertThat(subject.doInBackground(videoPath)).isFalse();
         assertThat(subject.getBlurredLastVideoFrame()).isNull();
     }
-    
+
     @Test
     public void doInBackground_whenVideoPathIsNull_shouldReturnFalse() throws Exception {
         assertThat(subject.doInBackground((String) null)).isFalse();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCloseButtonWidgetTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCloseButtonWidgetTest.java
index c7c825c1..91b85528 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCloseButtonWidgetTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCloseButtonWidgetTest.java
@@ -21,6 +21,7 @@
 import org.mockito.Captor;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
@@ -31,6 +32,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class VastVideoCloseButtonWidgetTest {
     private Context context;
     private VastVideoCloseButtonWidget subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoConfigTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoConfigTest.java
index b41ec047..9d38dd63 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoConfigTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoConfigTest.java
@@ -12,6 +12,8 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowApplication;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -25,6 +27,7 @@
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class VastVideoConfigTest {
 
     @Mock MoPubRequestQueue mockRequestQueue;
@@ -144,50 +147,70 @@ public void getUntriggeredTrackersBefore_shouldReturnAllTrackersSorted() throws
     }
 
     @Test
-    public void handleClick_withNullClickThroughUrl_shouldNotOpenNewActivity() throws Exception {
-        subject.handleClick(activity, 1234, 1);
+    public void handleClickForResult_withNullClickThroughUrl_shouldNotOpenNewActivity() throws Exception {
+        subject.handleClickForResult(activity, 1234, 1);
 
-        Robolectric.getUiThreadScheduler().unPause();
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
+        Robolectric.getForegroundThreadScheduler().unPause();
+        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
     }
 
     @Test
-    public void handleClick_withMoPubNativeBrowserClickThroughUrl_shouldOpenExternalBrowser_shouldMakeTrackingHttpRequest() throws Exception {
+    public void handleClickForResult_withMoPubNativeBrowserClickThroughUrl_shouldOpenExternalBrowser_shouldMakeTrackingHttpRequest() throws Exception {
         subject.setClickThroughUrl(
-                "mopubnativebrowser://navigate?url=http%3A%2F%2Fwww.mopub.com%2F");
+                "mopubnativebrowser://navigate?url=https%3A%2F%2Fwww.mopub.com%2F");
         subject.addClickTrackers(
-                Arrays.asList(new VastTracker("http://trackerone+content=[CONTENTPLAYHEAD]"),
-                        new VastTracker("http://trackertwo+error=[ERRORCODE]&asset=[ASSETURI]")));
+                Arrays.asList(new VastTracker("https://trackerone+content=[CONTENTPLAYHEAD]"),
+                        new VastTracker("https://trackertwo+error=[ERRORCODE]&asset=[ASSETURI]")));
 
-        subject.handleClick(activity, 2345, 1234);
+        subject.handleClickForResult(activity, 2345, 1234);
 
-        Robolectric.getUiThreadScheduler().unPause();
-        Robolectric.runBackgroundTasks();
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(intent.getDataString()).isEqualTo("http://www.mopub.com/");
+        Robolectric.getForegroundThreadScheduler().unPause();
+        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
+        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
+        assertThat(intent.getDataString()).isEqualTo("https://www.mopub.com/");
         assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
-        verify(mockRequestQueue).add(argThat(isUrl("http://trackerone+content=00:00:02.345")));
-        verify(mockRequestQueue).add(argThat(isUrl("http://trackertwo+error=&asset=video_url")));
+        verify(mockRequestQueue).add(argThat(isUrl("https://trackerone+content=00:00:02.345")));
+        verify(mockRequestQueue).add(argThat(isUrl("https://trackertwo+error=&asset=video_url")));
         verifyNoMoreInteractions(mockRequestQueue);
     }
 
     @Test
-    public void handleClick_withMalformedMoPubNativeBrowserClickThroughUrl_shouldNotOpenANewActivity() throws Exception {
+    public void handleClickWithoutResult_shouldOpenExternalBrowser_shouldMakeTrackingHttpRequest() throws Exception {
+        subject.setClickThroughUrl(
+                "mopubnativebrowser://navigate?url=https%3A%2F%2Fwww.mopub.com%2F");
+        subject.addClickTrackers(
+                Arrays.asList(new VastTracker("https://trackerone+content=[CONTENTPLAYHEAD]"),
+                        new VastTracker("https://trackertwo+error=[ERRORCODE]&asset=[ASSETURI]")));
+
+        subject.handleClickWithoutResult(activity.getApplicationContext(), 2345);
+
+        Robolectric.getForegroundThreadScheduler().unPause();
+        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
+        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
+        assertThat(intent.getDataString()).isEqualTo("https://www.mopub.com/");
+        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
+        verify(mockRequestQueue).add(argThat(isUrl("https://trackerone+content=00:00:02.345")));
+        verify(mockRequestQueue).add(argThat(isUrl("https://trackertwo+error=&asset=video_url")));
+        verifyNoMoreInteractions(mockRequestQueue);
+    }
+
+    @Test
+    public void handleClickForResult_withMalformedMoPubNativeBrowserClickThroughUrl_shouldNotOpenANewActivity() throws Exception {
         // url2 is an invalid query parameter
         subject.setClickThroughUrl(
-                "mopubnativebrowser://navigate?url2=http%3A%2F%2Fwww.mopub.com%2F");
+                "mopubnativebrowser://navigate?url2=https%3A%2F%2Fwww.mopub.com%2F");
 
-        subject.handleClick(activity, 3456, 1);
+        subject.handleClickForResult(activity, 3456, 1);
 
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
+        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
     }
 
     @Test
-    public void handleClick_withAboutBlankClickThroughUrl_shouldFailSilently() throws Exception {
+    public void handleClickForResult_withAboutBlankClickThroughUrl_shouldFailSilently() throws Exception {
         subject.setClickThroughUrl("about:blank");
 
-        subject.handleClick(activity, 4567, 1);
+        subject.handleClickForResult(activity, 4567, 1);
 
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
+        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCtaButtonWidgetTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCtaButtonWidgetTest.java
index 988d36b1..2943bfea 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCtaButtonWidgetTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCtaButtonWidgetTest.java
@@ -11,10 +11,12 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class VastVideoCtaButtonWidgetTest {
     private Context context;
     private VastVideoCtaButtonWidget subject;
@@ -164,6 +166,18 @@ public void notifyVideoComplete_withCompanionAdAndOrientationUndefined_shouldBeG
         assertThat(subject.getLayoutParams()).isNull();
     }
 
+    @Test
+    public void notifyVideoComplete_withCompanionAd_withSocialActions_shouldBeVisible() throws Exception {
+        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_UNDEFINED;
+        subject = new VastVideoCtaButtonWidget(context, 0, true, true);
+        subject.setHasSocialActions(true);
+        subject.setVisibility(View.VISIBLE);
+
+        subject.notifyVideoComplete();
+
+        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
+    }
+
     // Video is complete, no companion ad, has clickthrough url, CTA button already visible
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoDownloadTaskTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoDownloadTaskTest.java
deleted file mode 100644
index 9fdafe8d..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoDownloadTaskTest.java
+++ /dev/null
@@ -1,142 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-
-import com.mopub.common.CacheService;
-import com.mopub.common.CacheServiceTest;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-import org.robolectric.tester.org.apache.http.TestHttpResponse;
-
-import java.util.Random;
-import java.util.concurrent.Semaphore;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.anyBoolean;
-import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class VastVideoDownloadTaskTest {
-    private VastVideoDownloadTask.VastVideoDownloadTaskListener mVastVideoDownloadTaskListener;
-    private VastVideoDownloadTask subject;
-    private String videoUrl;
-    private TestHttpResponseWithHeaders response;
-    private Semaphore semaphore;
-
-    @Before
-    public void setUp() throws Exception {
-        Activity context = new Activity();
-        CacheService.initializeDiskCache(context);
-
-        videoUrl = "http://www.video.com";
-        response = new TestHttpResponseWithHeaders(200, "responseBody");
-        Robolectric.addPendingHttpResponse(response);
-
-        semaphore = new Semaphore(0);
-        mVastVideoDownloadTaskListener = mock(VastVideoDownloadTask.VastVideoDownloadTaskListener.class);
-        doAnswer(new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
-                semaphore.release();
-                return null;
-            }
-        }).when(mVastVideoDownloadTaskListener).onComplete(anyBoolean());
-
-        subject = new VastVideoDownloadTask(mVastVideoDownloadTaskListener);
-    }
-
-    @Test
-    public void execute_shouldAddToCacheAndSignalDownloadSuccess() throws Exception {
-        subject.execute(videoUrl);
-
-        semaphore.acquire();
-        verify(mVastVideoDownloadTaskListener).onComplete(true);
-
-        final byte[] data = CacheService.getFromDiskCache(videoUrl);
-        assertThat(data).isEqualTo("responseBody".getBytes());
-    }
-
-    @Test
-    public void execute_withMultipleUrls_shouldParseTheFirstOne() throws Exception {
-        String ignoredUrl = "ignored";
-        subject.execute(videoUrl, ignoredUrl);
-
-        semaphore.acquire();
-        verify(mVastVideoDownloadTaskListener).onComplete(true);
-
-        assertThat(CacheService.getFromDiskCache(videoUrl)).isEqualTo("responseBody".getBytes());
-        assertThat(CacheService.getFromDiskCache(ignoredUrl)).isNull();
-    }
-
-    @Test
-    public void execute_whenUrlArrayIsNull_shouldSignalDownloadFailed() throws Exception {
-        subject.execute((String) null);
-
-        semaphore.acquire();
-        verify(mVastVideoDownloadTaskListener).onComplete(false);
-    }
-
-    @Test
-    public void execute_whenUrlArrayIsEmpty_shouldSignalDownloadFailed() throws Exception {
-        subject.execute(new String[0]);
-
-        semaphore.acquire();
-        verify(mVastVideoDownloadTaskListener).onComplete(false);
-    }
-
-    @Test
-    public void execute_whenFirstElementOfUrlArrayIsNull_shouldSignalDownloadFailed() throws Exception {
-        subject.execute(null, "ignored");
-
-        semaphore.acquire();
-        verify(mVastVideoDownloadTaskListener).onComplete(false);
-    }
-
-    @Test
-    public void execute_whenDiskCacheIsNotInitialized_shouldNotPutDataInCacheAndShouldSignalDownloadFailed() throws Exception {
-        CacheService.clearAndNullCaches();
-        CacheServiceTest.assertDiskCacheIsUninitialized();
-        subject.execute(videoUrl);
-
-        semaphore.acquire();
-        CacheServiceTest.assertDiskCacheIsUninitialized();
-        verify(mVastVideoDownloadTaskListener).onComplete(false);
-    }
-
-    @Test
-    public void execute_whenResponseContentLengthIsLargerThan25MiB_shouldNotPutDataInCacheAndShouldSignalDownloadFailed() throws Exception {
-        Robolectric.clearPendingHttpResponses();
-        final String randomString = createRandomString(25 * 1024 * 1024 + 1);
-        Robolectric.addPendingHttpResponse(new TestHttpResponse(200, randomString));
-        subject.execute(videoUrl);
-
-        semaphore.acquire();
-        CacheServiceTest.assertDiskCacheIsEmpty();
-        verify(mVastVideoDownloadTaskListener).onComplete(false);
-    }
-
-    @Test
-    public void onPostExecute_whenOnDownloadCompleteListenerIsNull_shouldNotBlowUp() throws Exception {
-        subject = new VastVideoDownloadTask(null);
-
-        subject.onPostExecute(true);
-        subject.onPostExecute(false);
-
-        // pass
-    }
-
-    private static String createRandomString(int size) {
-        byte[] buffer = new byte[size];
-        new Random().nextBytes(buffer);
-        return new String(buffer);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoGradientStripWidgetTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoGradientStripWidgetTest.java
index f4b3c240..5d397b97 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoGradientStripWidgetTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoGradientStripWidgetTest.java
@@ -14,10 +14,12 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class VastVideoGradientStripWidgetTest {
     private Context context;
     private VastVideoGradientStripWidget subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
index 4a17ff8c..30c32d09 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
@@ -4,25 +4,28 @@
 import android.content.Context;
 import android.content.Intent;
 
+import com.mopub.common.AdReport;
 import com.mopub.common.CacheServiceTest;
 import com.mopub.common.DataKeys;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 import com.mopub.mobileads.test.support.TestVastManagerFactory;
-import com.mopub.mobileads.test.support.TestVastVideoDownloadTaskFactory;
 import com.mopub.mobileads.test.support.VastUtils;
 
-import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.shadows.ShadowLocalBroadcastManager;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.httpclient.FakeHttp;
+import org.robolectric.shadows.support.v4.ShadowLocalBroadcastManager;
 
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.Map;
 
+import static com.mopub.common.DataKeys.AD_REPORT_KEY;
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
@@ -37,11 +40,12 @@
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 import static org.mockito.Mockito.withSettings;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class VastVideoInterstitialTest extends ResponseBodyInterstitialTest {
     private Context context;
     private CustomEventInterstitialListener customEventInterstitialListener;
@@ -51,19 +55,19 @@
     private String expectedResponse;
     private VastManager vastManager;
     private String videoUrl;
-    private VastVideoDownloadTask vastVideoDownloadTask;
     private long broadcastIdentifier;
 
+    @Mock AdReport mockAdReport;
+
     @Before
     public void setUp() throws Exception {
         subject = new VastVideoInterstitial();
 
-        vastVideoDownloadTask = TestVastVideoDownloadTaskFactory.getSingletonMock();
         vastManager = TestVastManagerFactory.getSingletonMock();
         expectedResponse = "<VAST>hello</VAST>";
-        videoUrl = "http://www.video.com";
+        videoUrl = "https://www.video.com";
 
-        context = new Activity();
+        context = Robolectric.buildActivity(Activity.class).create().get();
         customEventInterstitialListener = mock(CustomEventInterstitialListener.class);
         localExtras = new HashMap<String, Object>();
         serverExtras = new HashMap<String, String>();
@@ -73,11 +77,8 @@ public void setUp() throws Exception {
 
         broadcastIdentifier = 2222;
         localExtras.put(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
-    }
-
-    @After
-    public void tearDown() throws Exception {
-        reset(vastVideoDownloadTask);
+        when(mockAdReport.getDspCreativeId()).thenReturn("dsp_creative_id");
+        localExtras.put(AD_REPORT_KEY, mockAdReport);
     }
 
     @Test
@@ -89,19 +90,20 @@ public void preRenderHtml_whenCreatingVideoCache_butItHasInitializationErrors_sh
         verify(customEventInterstitialListener).onInterstitialFailed(
                 eq(MoPubErrorCode.VIDEO_CACHE_ERROR));
         verify(vastManager, never()).prepareVastVideoConfiguration(anyString(),
-                any(VastManagerListener.class), any(Context.class));
+                any(VastManagerListener.class), any(String.class), any(Context.class));
     }
 
     @Test
     public void loadInterstitial_shouldParseHtmlResponseBodyServerExtra() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
+        subject.loadInterstitial(context, customEventInterstitialListener, localExtras,
+                serverExtras);
 
         assertThat(((VastVideoInterstitial) subject).getVastResponse()).isEqualTo(expectedResponse);
     }
 
     @Test
     public void loadInterstitial_shouldInitializeDiskCache() throws Exception {
-        Robolectric.addPendingHttpResponse(response);
+        FakeHttp.addPendingHttpResponse(response);
 
         CacheServiceTest.assertDiskCacheIsUninitialized();
         subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
@@ -113,7 +115,7 @@ public void loadInterstitial_shouldCreateVastManagerAndProcessVast() throws Exce
         subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
 
         verify(vastManager).prepareVastVideoConfiguration(eq(expectedResponse),
-                eq((VastVideoInterstitial) subject), eq(context));
+                eq((VastVideoInterstitial) subject), eq("dsp_creative_id"), eq(context));
     }
 
     @Test
@@ -124,7 +126,7 @@ public void loadInterstitial_whenServerExtrasDoesNotContainResponse_shouldSignal
 
         verify(customEventInterstitialListener).onInterstitialFailed(NETWORK_INVALID_STATE);
         verify(vastManager, never()).prepareVastVideoConfiguration(anyString(),
-                any(VastManagerListener.class), any(Context.class));
+                any(VastManagerListener.class), any(String.class), any(Context.class));
     }
 
     @Test
@@ -168,6 +170,7 @@ public void showInterstitial_shouldStartVideoPlayerActivityWithAllValidTrackers(
                 vastVideoConfig,
                 broadcastIdentifier
                 );
+        assertThat(vastVideoConfig.isRewardedVideo()).isFalse();
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoProgressBarWidgetTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoProgressBarWidgetTest.java
index 9b857699..d214c516 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoProgressBarWidgetTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoProgressBarWidgetTest.java
@@ -11,6 +11,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.never;
@@ -19,6 +20,7 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class VastVideoProgressBarWidgetTest {
     private Context context;
     private VastVideoProgressBarWidget subject;
@@ -27,7 +29,8 @@
     @Before
     public void setUp() throws Exception {
         context = Robolectric.buildActivity(Activity.class).create().get();
-        subject = new VastVideoProgressBarWidget(context, 0);
+        subject = new VastVideoProgressBarWidget(context);
+        subject.setAnchorId(0);
         progressBarDrawableSpy = spy(subject.getImageViewDrawable());
         subject.setImageViewDrawable(progressBarDrawableSpy);
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoRadialCountdownWidgetTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoRadialCountdownWidgetTest.java
index 841f5c0d..e92e60c9 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoRadialCountdownWidgetTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoRadialCountdownWidgetTest.java
@@ -7,12 +7,11 @@
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.resource.RadialCountdownDrawable;
 
-import junit.framework.TestCase;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.anyInt;
@@ -22,6 +21,7 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class VastVideoRadialCountdownWidgetTest {
     private Context context;
     private VastVideoRadialCountdownWidget subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
index 773e6e1b..f7cfbc63 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
@@ -21,6 +21,7 @@
 import android.widget.ImageView;
 import android.widget.VideoView;
 
+import com.mopub.TestSdkHelper;
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.DeviceUtils.ForceOrientation;
@@ -40,34 +41,41 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
+import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
+import org.robolectric.internal.ShadowExtractor;
+import org.robolectric.shadows.ShadowApplication;
 import org.robolectric.shadows.ShadowImageView;
-import org.robolectric.shadows.ShadowLocalBroadcastManager;
 import org.robolectric.shadows.ShadowRelativeLayout;
 import org.robolectric.shadows.ShadowTextView;
 import org.robolectric.shadows.ShadowVideoView;
-import org.robolectric.tester.org.apache.http.RequestMatcher;
-import org.robolectric.tester.org.apache.http.TestHttpResponse;
+import org.robolectric.shadows.httpclient.FakeHttp;
+import org.robolectric.shadows.httpclient.RequestMatcher;
+import org.robolectric.shadows.httpclient.TestHttpResponse;
+import org.robolectric.shadows.support.v4.ShadowLocalBroadcastManager;
 
 import java.io.File;
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
 
 import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
 import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
 import static com.mopub.common.VolleyRequestMatcher.isUrl;
-import static com.mopub.common.util.ResponseHeader.USER_AGENT;
 import static com.mopub.mobileads.BaseVideoViewController.BaseVideoViewControllerListener;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.getHtmlInterstitialIntentFilter;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static com.mopub.mobileads.VastVideoViewController.CURRENT_POSITION;
 import static com.mopub.mobileads.VastVideoViewController.DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON;
 import static com.mopub.mobileads.VastVideoViewController.MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON;
 import static com.mopub.mobileads.VastVideoViewController.RESUMED_VAST_CONFIG;
 import static com.mopub.mobileads.VastVideoViewController.VAST_VIDEO_CONFIG;
+import static com.mopub.mobileads.VastXmlManagerAggregator.ADS_BY_AD_SLOT_ID;
+import static com.mopub.mobileads.VastXmlManagerAggregator.SOCIAL_ACTIONS_AD_SLOT_ID;
 import static com.mopub.volley.toolbox.ImageLoader.ImageListener;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
@@ -86,11 +94,9 @@
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 import static org.mockito.Mockito.verifyZeroInteractions;
 import static org.mockito.Mockito.when;
-import static org.robolectric.Robolectric.shadowOf;
-import static org.robolectric.Robolectric.shadowOf_;
 
 @RunWith(SdkTestRunner.class)
-@Config(shadows = {ShadowVastVideoView.class})
+@Config(constants = BuildConfig.class, shadows = {ShadowVastVideoView.class})
 public class VastVideoViewControllerTest {
     public static final int NETWORK_DELAY = 100;
 
@@ -98,11 +104,11 @@
     private static final String COMPANION_CLICK_TRACKING_URL_1 = "companion_click_tracking_url_1";
     private static final String COMPANION_CLICK_TRACKING_URL_2 = "companion_click_tracking_url_2";
     private static final String COMPANION_CLICK_TRACKING_URL_3 = "companion_click_tracking_url_3";
-    private static final String COMPANION_CLICK_DESTINATION_URL = "http://companion_click_destination_url";
+    private static final String COMPANION_CLICK_DESTINATION_URL = "https://companion_click_destination_url";
     private static final String COMPANION_CREATIVE_VIEW_URL_1 = "companion_creative_view_url_1";
     private static final String COMPANION_CREATIVE_VIEW_URL_2 = "companion_creative_view_url_2";
     private static final String COMPANION_CREATIVE_VIEW_URL_3 = "companion_creative_view_url_3";
-    private static final String RESOLVED_CLICKTHROUGH_URL = "http://www.mopub.com/";
+    private static final String RESOLVED_CLICKTHROUGH_URL = "https://www.mopub.com/";
     private static final String CLICKTHROUGH_URL = "deeplink+://navigate?" +
             "&primaryUrl=bogus%3A%2F%2Furl" +
             "&fallbackUrl=" + Uri.encode(RESOLVED_CLICKTHROUGH_URL);
@@ -145,6 +151,7 @@ public void setUp() throws Exception {
         VastVideoConfig vastVideoConfig = new VastVideoConfig();
         vastVideoConfig.setNetworkMediaFileUrl("video_url");
         vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.setDspCreativeId("dsp_creative_id");
         vastVideoConfig.addAbsoluteTrackers(
                 Arrays.asList(new VastAbsoluteProgressTracker("start" + MACRO_TAGS, 2000)));
         vastVideoConfig.addFractionalTrackers(
@@ -200,33 +207,45 @@ public void setUp() throws Exception {
         when(mMockVastIconConfig.getVastResource()).thenReturn(vastResource);
         vastVideoConfig.setVastIconConfig(mMockVastIconConfig);
 
+
+        final ArrayList<VastTracker> vastTrackers = new ArrayList<>();
+        VastCompanionAdConfig socialActionsCompanionAd =
+                new VastCompanionAdConfig(65, 20, vastResource, "", vastTrackers, vastTrackers);
+        Map<String, VastCompanionAdConfig> socialActionsCompanionAds =
+                new HashMap<String, VastCompanionAdConfig>();
+        socialActionsCompanionAds.put(ADS_BY_AD_SLOT_ID, socialActionsCompanionAd);
+        socialActionsCompanionAds.put(SOCIAL_ACTIONS_AD_SLOT_ID, socialActionsCompanionAd);
+        vastVideoConfig.setSocialActionsCompanionAds(socialActionsCompanionAds);
+
         when(mockMediaMetadataRetriever.getFrameAtTime(anyLong(), anyInt())).thenReturn(mockBitmap);
 
         bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         expectedBrowserRequestCode = 1;
 
-        Robolectric.getUiThreadScheduler().pause();
-        Robolectric.getBackgroundScheduler().pause();
-        Robolectric.clearPendingHttpResponses();
+        Robolectric.getForegroundThreadScheduler().pause();
+        Robolectric.getBackgroundThreadScheduler().pause();
+        FakeHttp.clearPendingHttpResponses();
 
         // Used to give responses to Vast Download Tasks.
-        Robolectric.addHttpResponseRule(new RequestMatcher() {
+        FakeHttp.addHttpResponseRule(new RequestMatcher() {
             @Override
             public boolean matches(HttpRequest request) {
                 return true;
             }
         }, new TestHttpResponse(200, "body"));
 
-        ShadowLocalBroadcastManager.getInstance(context).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
+        ShadowLocalBroadcastManager.getInstance(context).registerReceiver(broadcastReceiver,
+                new EventForwardingBroadcastReceiver(null,
+                testBroadcastIdentifier).getIntentFilter());
 
         expectedUserAgent = new WebView(context).getSettings().getUserAgentString();
     }
 
     @After
     public void tearDown() throws Exception {
-        Robolectric.getUiThreadScheduler().reset();
-        Robolectric.getBackgroundScheduler().reset();
+        Robolectric.getForegroundThreadScheduler().reset();
+        Robolectric.getBackgroundThreadScheduler().reset();
 
         ShadowLocalBroadcastManager.getInstance(context).unregisterReceiver(broadcastReceiver);
     }
@@ -238,7 +257,7 @@ public void constructor_shouldAddCtaButtonWidgetToLayoutAndSetInvisibleWithOnTou
         VastVideoCtaButtonWidget ctaButtonWidget = subject.getCtaButtonWidget();
         assertThat(ctaButtonWidget.getParent()).isEqualTo(subject.getLayout());
         assertThat(ctaButtonWidget.getVisibility()).isEqualTo(View.INVISIBLE);
-        ShadowImageView ctaButtonWidgetShadow = shadowOf(ctaButtonWidget);
+        ShadowImageView ctaButtonWidgetShadow = Shadows.shadowOf(ctaButtonWidget);
         assertThat(ctaButtonWidgetShadow.getOnTouchListener()).isNotNull();
         assertThat(ctaButtonWidgetShadow.getOnTouchListener()).isEqualTo(
                 getShadowVideoView().getOnTouchListener());
@@ -251,7 +270,7 @@ public void constructor_shouldAddProgressBarWidgetToLayoutAndSetInvisibleWithNoL
         VastVideoProgressBarWidget progressBarWidget = subject.getProgressBarWidget();
         assertThat(progressBarWidget.getParent()).isEqualTo(subject.getLayout());
         assertThat(progressBarWidget.getVisibility()).isEqualTo(View.INVISIBLE);
-        ShadowImageView progressBarWidgetShadow = shadowOf(progressBarWidget);
+        ShadowImageView progressBarWidgetShadow = Shadows.shadowOf(progressBarWidget);
         assertThat(progressBarWidgetShadow.getOnTouchListener()).isNull();
     }
 
@@ -262,10 +281,42 @@ public void constructor_shouldAddRadialCountdownWidgetToLayoutAndSetInvisibleWit
         VastVideoRadialCountdownWidget radialCountdownWidget = subject.getRadialCountdownWidget();
         assertThat(radialCountdownWidget.getParent()).isEqualTo(subject.getLayout());
         assertThat(radialCountdownWidget.getVisibility()).isEqualTo(View.INVISIBLE);
-        ShadowImageView radialCountdownWidgetShadow = shadowOf(radialCountdownWidget);
+        ShadowImageView radialCountdownWidgetShadow = Shadows.shadowOf(radialCountdownWidget);
         assertThat(radialCountdownWidgetShadow.getOnTouchListener()).isNull();
     }
 
+    @Test
+    public void constructor_shouldAddIconViewToLayoutAndSetInvisibleWithWebViewClickListener() throws Exception {
+        initializeSubject();
+
+        View iconView = subject.getIconView();
+        assertThat(iconView.getParent()).isEqualTo(subject.getLayout());
+        assertThat(iconView.getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(((VastWebView)iconView).getVastWebViewClickListener()).isNotNull();
+    }
+
+    @Test
+    public void constructor_withAdsByCompanion_shouldAddAdsByViewToLayout() throws Exception {
+        initializeSubject();
+
+        View adsByView = subject.createAdsByView((Activity) context);
+        assertThat(adsByView.getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(subject.getHasSocialActions()).isTrue();
+        assertThat(subject.getCtaButtonWidget().getHasSocialActions()).isTrue();
+        assertThat(((VastWebView) adsByView).getVastWebViewClickListener()).isNotNull();
+    }
+
+    @Test
+    public void constructor_withSocialActionsCompanion_shouldAddSocialActionsViewToLayout() throws Exception {
+        initializeSubject();
+
+        View socialActionsView = subject.getSocialActionsView();
+        assertThat(socialActionsView.getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(subject.getHasSocialActions()).isTrue();
+        assertThat(subject.getCtaButtonWidget().getHasSocialActions()).isTrue();
+        assertThat(((VastWebView) socialActionsView).getVastWebViewClickListener()).isNotNull();
+    }
+
     @Test
     public void constructor_shouldAddCloseButtonWidgetToLayoutAndSetToGoneWithOnTouchListeners() throws Exception {
         initializeSubject();
@@ -274,13 +325,13 @@ public void constructor_shouldAddCloseButtonWidgetToLayoutAndSetToGoneWithOnTouc
         assertThat(closeButtonWidget.getParent()).isEqualTo(subject.getLayout());
         assertThat(closeButtonWidget.getVisibility()).isEqualTo(View.GONE);
 
-        ShadowRelativeLayout closeButtonWidgetShadow = (ShadowRelativeLayout) shadowOf(closeButtonWidget);
+        ShadowRelativeLayout closeButtonWidgetShadow = (ShadowRelativeLayout) Shadows.shadowOf(closeButtonWidget);
         assertThat(closeButtonWidgetShadow.getOnTouchListener()).isNull();
 
-        ShadowImageView closeButtonImageViewShadow = shadowOf(closeButtonWidget.getImageView());
+        ShadowImageView closeButtonImageViewShadow = Shadows.shadowOf(closeButtonWidget.getImageView());
         assertThat(closeButtonImageViewShadow.getOnTouchListener()).isNotNull();
 
-        ShadowTextView closeButtonTextViewShadow = shadowOf(closeButtonWidget.getTextView());
+        ShadowTextView closeButtonTextViewShadow = Shadows.shadowOf(closeButtonWidget.getTextView());
         assertThat(closeButtonTextViewShadow.getOnTouchListener()).isNotNull();
     }
 
@@ -291,7 +342,7 @@ public void constructor_shouldAddTopGradientStripWidgetToLayoutWithNoListeners()
         VastVideoGradientStripWidget topGradientStripWidget = subject.getTopGradientStripWidget();
         assertThat(topGradientStripWidget.getParent()).isEqualTo(subject.getLayout());
 
-        ShadowImageView topGradientStripWidgetShadow = shadowOf(topGradientStripWidget);
+        ShadowImageView topGradientStripWidgetShadow = Shadows.shadowOf(topGradientStripWidget);
         assertThat(topGradientStripWidgetShadow.getOnTouchListener()).isNull();
     }
 
@@ -302,7 +353,7 @@ public void constructor_shouldAddBottomGradientStripWidgetToLayoutWithNoListener
         VastVideoGradientStripWidget bottomGradientStripWidget = subject.getBottomGradientStripWidget();
         assertThat(bottomGradientStripWidget.getParent()).isEqualTo(subject.getLayout());
 
-        ShadowImageView bottomGradientStripWidgetShadow = shadowOf(bottomGradientStripWidget);
+        ShadowImageView bottomGradientStripWidgetShadow = Shadows.shadowOf(bottomGradientStripWidget);
         assertThat(bottomGradientStripWidgetShadow.getOnTouchListener()).isNull();
     }
 
@@ -313,14 +364,14 @@ public void constructor_shouldAddBlurredLastVideoFrameWidgetToLayoutAndSetInvisi
         ImageView blurredLastVideoFrameImageView = subject.getBlurredLastVideoFrameImageView();
         assertThat(blurredLastVideoFrameImageView.getParent()).isEqualTo(subject.getLayout());
         assertThat(blurredLastVideoFrameImageView.getVisibility()).isEqualTo(View.INVISIBLE);
-        ShadowImageView blurredLastVideoFrameImageViewShadow = shadowOf(blurredLastVideoFrameImageView);
+        ShadowImageView blurredLastVideoFrameImageViewShadow = Shadows.shadowOf(blurredLastVideoFrameImageView);
         assertThat(blurredLastVideoFrameImageViewShadow.getOnTouchListener()).isNull();
     }
 
     @Test
     public void constructor_shouldSetVideoListenersAndVideoPath() throws Exception {
         initializeSubject();
-        ShadowVideoView videoView = shadowOf(subject.getVideoView());
+        ShadowVideoView videoView = Shadows.shadowOf(subject.getVideoView());
 
         assertThat(videoView.getOnCompletionListener()).isNotNull();
         assertThat(videoView.getOnErrorListener()).isNotNull();
@@ -439,13 +490,13 @@ public void constructor_whenCustomCloseIconSpecified_shouldUseCustomCloseIcon()
         VastVideoConfig vastVideoConfig = new VastVideoConfig();
         vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
         vastVideoConfig.setCustomCloseIconUrl(
-                "http://ton.twitter.com/exchange-media/images/v4/star_icon_3x_1.png");
+                "https://ton.twitter.com/exchange-media/images/v4/star_icon_3x_1.png");
         bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
 
         initializeSubject();
 
         verify(mockImageLoader).get(
-                eq("http://ton.twitter.com/exchange-media/images/v4/star_icon_3x_1.png"),
+                eq("https://ton.twitter.com/exchange-media/images/v4/star_icon_3x_1.png"),
                 any(ImageListener.class));
     }
 
@@ -504,7 +555,7 @@ public void onCreate_shouldBroadcastInterstitialShow() throws Exception {
 
         initializeSubject();
 
-        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getForegroundThreadScheduler().unPause();
         subject.onCreate();
         verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
     }
@@ -579,7 +630,7 @@ public void VastWebView_onVastWebViewClick_shouldCallVastCompanionAdHandleClick(
                 vastCompanionAdConfig, View.INVISIBLE);
 
         view.getVastWebViewClickListener().onVastWebViewClick();
-        verify(vastCompanionAdConfig).handleClick(any(Context.class), eq(1), anyString());
+        verify(vastCompanionAdConfig).handleClick(any(Context.class), eq(1), anyString(), eq("dsp_creative_id"));
     }
 
     @Test
@@ -618,7 +669,7 @@ public void onDestroy_shouldBroadcastInterstitialDismiss() throws Exception {
         initializeSubject();
 
         subject.onDestroy();
-        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getForegroundThreadScheduler().unPause();
 
         verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
     }
@@ -627,7 +678,8 @@ public void onDestroy_shouldBroadcastInterstitialDismiss() throws Exception {
     public void onDestroy_withBlurLastVideoFrameTaskStillRunning_shouldCancelTask() throws Exception {
         initializeSubject();
 
-        VastVideoBlurLastVideoFrameTask mockBlurLastVideoFrameTask = mock(VastVideoBlurLastVideoFrameTask.class);
+        VastVideoBlurLastVideoFrameTask mockBlurLastVideoFrameTask = mock(
+                VastVideoBlurLastVideoFrameTask.class);
         when(mockBlurLastVideoFrameTask.getStatus()).thenReturn(AsyncTask.Status.RUNNING);
         subject.getVastVideoView().setBlurLastVideoFrameTask(mockBlurLastVideoFrameTask);
 
@@ -716,11 +768,11 @@ public void onTouch_withTouchUp_whenVideoLessThan16Seconds_andClickBeforeEnd_sho
 
         getShadowVideoView().getOnPreparedListener().onPrepared(null);
 
-        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getForegroundThreadScheduler().unPause();
 
         getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
 
-        Intent nextStartedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent nextStartedActivity = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(nextStartedActivity).isNull();
     }
 
@@ -733,12 +785,12 @@ public void onTouch_withTouchUp_whenVideoLessThan16Seconds_andClickAfterEnd_shou
 
         getShadowVideoView().getOnPreparedListener().onPrepared(null);
 
-        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getForegroundThreadScheduler().unPause();
 
         getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
 
-        Robolectric.runBackgroundTasks();
-        final Intent startedActivity = Robolectric.getShadowApplication().peekNextStartedActivity();
+        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
+        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
         assertThat(startedActivity.getComponent().getClassName())
                 .isEqualTo(MoPubBrowser.class.getName());
         assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(
@@ -756,11 +808,11 @@ public void onTouch_withTouchUp_whenVideoLongerThan16Seconds_andClickBefore5Seco
 
         getShadowVideoView().getOnPreparedListener().onPrepared(null);
 
-        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getForegroundThreadScheduler().unPause();
 
         getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
 
-        Intent nextStartedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent nextStartedActivity = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(nextStartedActivity).isNull();
     }
 
@@ -773,12 +825,12 @@ public void onTouch_withTouchUp_whenVideoLongerThan16Seconds_andClickAfter5Secon
 
         getShadowVideoView().getOnPreparedListener().onPrepared(null);
 
-        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getForegroundThreadScheduler().unPause();
 
         getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
 
-        Robolectric.runBackgroundTasks();
-        final Intent startedActivity = Robolectric.getShadowApplication().peekNextStartedActivity();
+        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
+        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
         assertThat(startedActivity.getComponent().getClassName())
                 .isEqualTo(MoPubBrowser.class.getName());
         assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(
@@ -825,7 +877,7 @@ public void onTouch_whenCloseButtonNotVisible_shouldNotPingClickThroughTrackers(
         subject.setCloseButtonVisible(false);
 
         getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
-        assertThat(Robolectric.httpRequestWasMade()).isFalse();
+        assertThat(FakeHttp.httpRequestWasMade()).isFalse();
     }
 
     @Test
@@ -1033,7 +1085,7 @@ public void onPrepared_whenSkipOffsetIsZero_shouldSetShowCloseButtonDelayToZero(
     }
 
     @Test
-    public void onPrepared_whenSkipOffsetIsLongerThanDurationForShortVideo_shouldNotSetShowCloseButtonDelay() throws Exception {
+    public void onPrepared_whenSkipOffsetIsLongerThanDurationForShortVideo_shouldSetShowCloseButtonDelay() throws Exception {
         VastVideoConfig vastVideoConfig = new VastVideoConfig();
         vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
         vastVideoConfig.setSkipOffset("00:00:11");   // 11s
@@ -1046,11 +1098,11 @@ public void onPrepared_whenSkipOffsetIsLongerThanDurationForShortVideo_shouldNot
         getShadowVideoView().getOnPreparedListener().onPrepared(null);
 
         assertThat(subject.getShowCloseButtonDelay()).isEqualTo(10 * 1000);
-        assertThat(subject.getHasSkipOffset()).isFalse();
+        assertThat(subject.getHasSkipOffset()).isTrue();
     }
 
     @Test
-    public void onPrepared_whenSkipOffsetIsLongerThanDurationForLongVideo_shouldNotSetShowCloseButtonDelay() throws Exception {
+    public void onPrepared_whenSkipOffsetIsLongerThanDurationForLongVideo_shouldSetShowCloseButtonDelay() throws Exception {
         VastVideoConfig vastVideoConfig = new VastVideoConfig();
         vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
         vastVideoConfig.setSkipOffset("00:00:21");   // 21s
@@ -1062,8 +1114,41 @@ public void onPrepared_whenSkipOffsetIsLongerThanDurationForLongVideo_shouldNotS
 
         getShadowVideoView().getOnPreparedListener().onPrepared(null);
 
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(
-                DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
+        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(20 * 1000);
+        assertThat(subject.getHasSkipOffset()).isTrue();
+    }
+
+    @Test
+    public void onPrepared_whenSkipOffset100Percent_shouldSetShowCloseButtonDelayToVideoDuration() throws Exception {
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.setSkipOffset("100%");   // 20000 ms
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
+
+        initializeSubject();
+        spyOnVideoView();
+        setVideoViewParams(0, 20000);    // 20s: long video
+
+        getShadowVideoView().getOnPreparedListener().onPrepared(null);
+
+        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(20000);
+        assertThat(subject.getHasSkipOffset()).isTrue();
+    }
+
+    @Test
+    public void onPrepared_whenSkipOffsetGreaterThan100Percent_shouldSetShowCloseButtonDelayToDefault() throws Exception {
+        VastVideoConfig vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
+        vastVideoConfig.setSkipOffset("101%");   // 20200 ms
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
+
+        initializeSubject();
+        spyOnVideoView();
+        setVideoViewParams(0, 20000);    // 20s: long video
+
+        getShadowVideoView().getOnPreparedListener().onPrepared(null);
+
+        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
         assertThat(subject.getHasSkipOffset()).isFalse();
     }
 
@@ -1113,9 +1198,10 @@ public void onPrepared_shouldCalibrateAndMakeVisibleProgressBarWidget() throws E
         verify(progressBarWidgetSpy).calibrateAndMakeVisible(10000, 5000);
     }
 
-    @Config(reportSdk = VERSION_CODES.GINGERBREAD)
     @Test
     public void onPrepared_beforeGingerbreadMr1_shouldNotSetBlurredLastVideoFrame() throws Exception {
+
+        TestSdkHelper.setReportedSdkLevel(VERSION_CODES.GINGERBREAD);
         VastVideoConfig vastVideoConfig = new VastVideoConfig();
         vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
         bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
@@ -1123,19 +1209,19 @@ public void onPrepared_beforeGingerbreadMr1_shouldNotSetBlurredLastVideoFrame()
         initializeSubject();
 
         getShadowVideoView().getOnPreparedListener().onPrepared(null);
-        Robolectric.getBackgroundScheduler().unPause();
-        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getBackgroundThreadScheduler().unPause();
+        Robolectric.getForegroundThreadScheduler().unPause();
         Thread.sleep(NETWORK_DELAY);
 
         assertThat(subject.getBlurredLastVideoFrameImageView().getDrawable()).isNull();
 
-        ShadowImageView imageView = shadowOf(subject.getBlurredLastVideoFrameImageView());
+        ShadowImageView imageView = Shadows.shadowOf(subject.getBlurredLastVideoFrameImageView());
         assertThat(imageView.getOnTouchListener()).isNull();
     }
 
-    @Config(reportSdk = VERSION_CODES.GINGERBREAD_MR1)
     @Test
     public void onPrepared_atLeastGingerbreadMr1_shouldSetBlurredLastVideoFrame() throws Exception {
+        TestSdkHelper.setReportedSdkLevel(VERSION_CODES.GINGERBREAD_MR1);
         VastVideoConfig vastVideoConfig = new VastVideoConfig();
         vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
         bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
@@ -1143,8 +1229,8 @@ public void onPrepared_atLeastGingerbreadMr1_shouldSetBlurredLastVideoFrame() th
         initializeSubject();
 
         getShadowVideoView().getOnPreparedListener().onPrepared(null);
-        Robolectric.getBackgroundScheduler().unPause();
-        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getBackgroundThreadScheduler().unPause();
+        Robolectric.getForegroundThreadScheduler().unPause();
         Thread.sleep(NETWORK_DELAY);
 
         final ImageView blurredLastVideoFrameImageView = subject.getBlurredLastVideoFrameImageView();
@@ -1152,7 +1238,7 @@ public void onPrepared_atLeastGingerbreadMr1_shouldSetBlurredLastVideoFrame() th
         assertThat(
                 ((BitmapDrawable) blurredLastVideoFrameImageView.getDrawable()).getBitmap()).isNotNull();
 
-        ShadowImageView imageView = shadowOf(subject.getBlurredLastVideoFrameImageView());
+        ShadowImageView imageView = Shadows.shadowOf(subject.getBlurredLastVideoFrameImageView());
         assertThat(imageView.getOnTouchListener()).isNull();
     }
 
@@ -1262,6 +1348,10 @@ public void onCompletion_shouldStopProgressCheckerAndCountdown() throws Exceptio
 
     @Test
     public void onCompletion_whenCompanionAdAvailable_shouldShowCompanionAdAndHideBlurredLastVideoFrame() throws Exception {
+        final VastVideoConfig vastVideoConfig =
+                (VastVideoConfig) bundle.getSerializable(VAST_VIDEO_CONFIG);
+        vastVideoConfig.setSocialActionsCompanionAds(new HashMap<String, VastCompanionAdConfig>());
+        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
         initializeSubject();
 
         final View companionView = subject.getLandscapeCompanionAdView();
@@ -1272,8 +1362,8 @@ public void onCompletion_whenCompanionAdAvailable_shouldShowCompanionAdAndHideBl
         assertThat(blurredLastVideoFrameImageView.getVisibility()).isEqualTo(View.INVISIBLE);
 
         getShadowVideoView().getOnPreparedListener().onPrepared(null);
-        Robolectric.getBackgroundScheduler().unPause();
-        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getBackgroundThreadScheduler().unPause();
+        Robolectric.getForegroundThreadScheduler().unPause();
         Thread.sleep(NETWORK_DELAY);
 
         getShadowVideoView().getOnCompletionListener().onCompletion(null);
@@ -1292,8 +1382,8 @@ public void onCompletion_whenCompanionAdAvailable_shouldOnlyShowTopGradientStrip
         final VastVideoGradientStripWidget bottomGradientStripWidget = subject.getBottomGradientStripWidget();
 
         getShadowVideoView().getOnPreparedListener().onPrepared(null);
-        Robolectric.getBackgroundScheduler().unPause();
-        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getBackgroundThreadScheduler().unPause();
+        Robolectric.getForegroundThreadScheduler().unPause();
         Thread.sleep(NETWORK_DELAY);
 
         getShadowVideoView().getOnCompletionListener().onCompletion(null);
@@ -1319,8 +1409,8 @@ public void onCompletion_whenCompanionAdNotAvailable_shouldHideCompanionAdAndSho
         assertThat(blurredLastVideoFrameImageView.getVisibility()).isEqualTo(View.INVISIBLE);
 
         getShadowVideoView().getOnPreparedListener().onPrepared(null);
-        Robolectric.getBackgroundScheduler().unPause();
-        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getBackgroundThreadScheduler().unPause();
+        Robolectric.getForegroundThreadScheduler().unPause();
         Thread.sleep(NETWORK_DELAY);
 
         getShadowVideoView().getOnCompletionListener().onCompletion(null);
@@ -1347,8 +1437,8 @@ public void onCompletion_whenCompanionAdNotAvailable_shouldHideBothGradientStrip
         final VastVideoGradientStripWidget bottomGradientStripWidget = subject.getBottomGradientStripWidget();
 
         getShadowVideoView().getOnPreparedListener().onPrepared(null);
-        Robolectric.getBackgroundScheduler().unPause();
-        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getBackgroundThreadScheduler().unPause();
+        Robolectric.getForegroundThreadScheduler().unPause();
         Thread.sleep(NETWORK_DELAY);
 
         getShadowVideoView().getOnCompletionListener().onCompletion(null);
@@ -1403,6 +1493,30 @@ public void onCompletion_whenCompanionAdNotAvailableAndBlurredLastVideoFrameNotP
         assertThat(bottomGradientStripWidget.getVisibility()).isEqualTo(View.GONE);
     }
 
+    @Test
+    public void onCompletion_withSocialActions_shouldShowCompanionAdAndShowBlurredLastVideoFrame() throws Exception {
+        initializeSubject();
+
+        final View companionView = subject.getLandscapeCompanionAdView();
+        final ImageView blurredLastVideoFrameImageView = subject.getBlurredLastVideoFrameImageView();
+
+        assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(companionView.getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(blurredLastVideoFrameImageView.getVisibility()).isEqualTo(View.INVISIBLE);
+
+        getShadowVideoView().getOnPreparedListener().onPrepared(null);
+        Robolectric.getBackgroundThreadScheduler().unPause();
+        Robolectric.getForegroundThreadScheduler().unPause();
+        Thread.sleep(NETWORK_DELAY);
+
+        getShadowVideoView().getOnCompletionListener().onCompletion(null);
+
+        assertThat(subject.getVastVideoView().getBlurLastVideoFrameTask()).isNotNull();
+        assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(companionView.getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(blurredLastVideoFrameImageView.getVisibility()).isEqualTo(View.VISIBLE);
+    }
+
     @Test
     public void onError_shouldFireVideoErrorAndReturnFalse() throws Exception {
         initializeSubject();
@@ -1410,7 +1524,7 @@ public void onError_shouldFireVideoErrorAndReturnFalse() throws Exception {
         Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_FAIL, testBroadcastIdentifier);
 
         boolean result = getShadowVideoView().getOnErrorListener().onError(null, 0, 0);
-        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getForegroundThreadScheduler().unPause();
 
         assertThat(result).isFalse();
         verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
@@ -1431,12 +1545,17 @@ public void onError_shouldStopProgressChecker() throws Exception {
         verify(spyCountdownRunnable).stop();
     }
 
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
+
     @Test
+    @Config(shadows = {MoPubShadowMediaPlayer.class})
     public void onError_withVideoFilePermissionErrorBelowJellyBean_shouldRetryPlayingTheVideo() throws Exception {
+        TestSdkHelper.setReportedSdkLevel(VERSION_CODES.ICE_CREAM_SANDWICH);
+
         File file = new File("disk_video_path");
         file.createNewFile();
 
+        // ShadowMediaPlayer setup needed to
+
         initializeSubject();
 
         assertThat(getShadowVideoView().getCurrentVideoState()).isEqualTo(-1);
@@ -1444,6 +1563,9 @@ public void onError_withVideoFilePermissionErrorBelowJellyBean_shouldRetryPlayin
         assertThat(subject.getVastVideoView().getVideoRetries()).isEqualTo(0);
         getShadowVideoView().getOnErrorListener().onError(new MediaPlayer(), 1, Integer.MIN_VALUE);
 
+        // Robo 3.0 introduces a requirement that ShadowMediaPlayer be set up with MediaInfo for a data source.
+        // Because we generate a file descriptor datasource at runtime, we can't set it up easily in this test.
+
         assertThat(getShadowVideoView().isPlaying()).isTrue();
         assertThat(subject.getVastVideoView().getVideoRetries()).isEqualTo(1);
 
@@ -1513,7 +1635,7 @@ public void videoRunnablesRun_shouldFireOffAllProgressTrackers() throws Exceptio
         subject.onResume();
 
         // this runs the videoProgressChecker and countdown runnable
-        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getForegroundThreadScheduler().unPause();
 
         verify(mockRequestQueue).add(
                 argThat(isUrl("first?errorcode=&asseturi=video_url&contentplayhead=00:00:09.002")));
@@ -1534,11 +1656,12 @@ public void videoRunnablesRun_whenDurationIsInvalid_shouldNotMakeAnyNetworkCalls
         setVideoViewParams(0, 100);
 
         subject.onResume();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(2);
+        Robolectric.getForegroundThreadScheduler().runOneTask();
+        Robolectric.getForegroundThreadScheduler().runOneTask();
 
-        Robolectric.getUiThreadScheduler().runTasks(2);
         // make sure the repeated task hasn't run yet
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(2);
         verifyZeroInteractions(mockRequestQueue);
     }
 
@@ -1555,18 +1678,20 @@ public void videoRunnablesRun_whenCurrentTimeLessThanTwoSeconds_shouldNotFireSta
         setVideoViewParams(1999, 100000);
         subject.onResume();
 
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(2);
 
-        Robolectric.getUiThreadScheduler().runTasks(2);
+        Robolectric.getForegroundThreadScheduler().runOneTask();
+        Robolectric.getForegroundThreadScheduler().runOneTask();
         // make sure the repeated task hasn't run yet
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(2);
 
         // Since it has not yet been a second, we expect that the start tracker has not been fired
         verifyZeroInteractions(mockRequestQueue);
 
         // run checker another time
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2);
-        Robolectric.getUiThreadScheduler().runTasks(2);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(2);
+        Robolectric.getForegroundThreadScheduler().runOneTask();
+        Robolectric.getForegroundThreadScheduler().runOneTask();
 
         verifyZeroInteractions(mockRequestQueue);
     }
@@ -1586,16 +1711,17 @@ public void videoRunnablesRun_whenCurrentTimeGreaterThanTwoSeconds_shouldFireSta
         spyOnVideoView();
         setVideoViewParams(2000, 100000);
         subject.onResume();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(2);
 
-        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getForegroundThreadScheduler().unPause();
 
         verify(mockRequestQueue).add(
                 argThat(isUrl("start?errorcode=&asseturi=video_url&contentplayhead=00:00:02.000")));
 
         // run checker another time
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2);
-        Robolectric.getUiThreadScheduler().runTasks(2);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(2);
+        Robolectric.getForegroundThreadScheduler().runOneTask();
+        Robolectric.getForegroundThreadScheduler().runOneTask();
 
         verifyNoMoreInteractions(mockRequestQueue);
     }
@@ -1616,15 +1742,16 @@ public void videoRunnablesRun_whenProgressIsPastFirstQuartile_shouldOnlyPingFirs
         setVideoViewParams(26, 100);
         subject.onResume();
 
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(2);
 
-        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getForegroundThreadScheduler().unPause();
 
         verify(mockRequestQueue).add(
                 argThat(isUrl("first?errorcode=&asseturi=video_url&contentplayhead=00:00:00.026")));
 
         // run checker another time
-        Robolectric.getUiThreadScheduler().runTasks(2);
+        Robolectric.getForegroundThreadScheduler().runOneTask();
+        Robolectric.getForegroundThreadScheduler().runOneTask();
 
         verifyNoMoreInteractions(mockRequestQueue);
     }
@@ -1646,16 +1773,17 @@ public void videoRunnablesRun_whenProgressIsPastMidQuartile_shouldPingFirstQuart
         setVideoViewParams(51, 100);
 
         subject.onResume();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(2);
 
-        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getForegroundThreadScheduler().unPause();
 
         verify(mockRequestQueue).add(
                 argThat(isUrl("first?errorcode=&asseturi=video_url&contentplayhead=00:00:00.051")));
         verify(mockRequestQueue).add(argThat(isUrl(
                 "second?errorcode=&asseturi=video_url&contentplayhead=00:00:00.051")));
 
-        Robolectric.getUiThreadScheduler().runTasks(2);
+        Robolectric.getForegroundThreadScheduler().runOneTask();
+        Robolectric.getForegroundThreadScheduler().runOneTask();
 
         verifyNoMoreInteractions(mockRequestQueue);
     }
@@ -1678,9 +1806,9 @@ public void videoRunnablesRun_whenProgressIsPastThirdQuartile_shouldPingFirstQua
         setVideoViewParams(76, 100);
 
         subject.onResume();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(2);
 
-        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getForegroundThreadScheduler().unPause();
 
         verify(mockRequestQueue).add(
                 argThat(isUrl("first?errorcode=&asseturi=video_url&contentplayhead=00:00:00.076")));
@@ -1689,7 +1817,8 @@ public void videoRunnablesRun_whenProgressIsPastThirdQuartile_shouldPingFirstQua
         verify(mockRequestQueue).add(
                 argThat(isUrl("third?errorcode=&asseturi=video_url&contentplayhead=00:00:00.076")));
 
-        Robolectric.getUiThreadScheduler().runTasks(2);
+        Robolectric.getForegroundThreadScheduler().runOneTask();
+        Robolectric.getForegroundThreadScheduler().runOneTask();
 
         verifyNoMoreInteractions(mockRequestQueue);
     }
@@ -1741,9 +1870,9 @@ public void videoRunnablesRun_asVideoPlays_shouldPingAllThreeTrackersIndividuall
 
     private void seekToAndAssertRequestsMade(int position, String... trackingUrls) {
         when(spyVideoView.getCurrentPosition()).thenReturn(position);
+        Robolectric.getForegroundThreadScheduler().advanceToLastPostedRunnable();
 
         for (String url : trackingUrls) {
-            Robolectric.getUiThreadScheduler().unPause();
             verify(mockRequestQueue).add(argThat(isUrl(url)));
         }
     }
@@ -1757,7 +1886,7 @@ public void videoRunnablesRun_whenCurrentPositionIsGreaterThanShowCloseButtonDel
         subject.onResume();
 
         assertThat(subject.isShowCloseButtonEventFired()).isFalse();
-        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getForegroundThreadScheduler().unPause();
 
         assertThat(subject.isShowCloseButtonEventFired()).isTrue();
     }
@@ -1781,7 +1910,7 @@ public void videoRunnablesRun_whenCurrentPositionIsGreaterThanSkipOffset_shouldS
         assertThat(subject.getHasSkipOffset()).isTrue();
 
         assertThat(subject.isShowCloseButtonEventFired()).isFalse();
-        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getForegroundThreadScheduler().unPause();
 
         assertThat(subject.isShowCloseButtonEventFired()).isTrue();
     }
@@ -1804,7 +1933,7 @@ public void videoRunnablesRun_whenCurrentPositionIsLessThanSkipOffset_shouldNotS
         assertThat(subject.getHasSkipOffset()).isTrue();
 
         assertThat(subject.isShowCloseButtonEventFired()).isFalse();
-        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getForegroundThreadScheduler().unPause();
 
         assertThat(subject.isShowCloseButtonEventFired()).isFalse();
     }
@@ -2023,7 +2152,7 @@ public void onClickCloseButtonImageView_whenCloseButtonIsVisible_shouldFireClose
         // We don't have direct access to the CloseButtonWidget icon's close event, so we manually
         // invoke its onTouchListener's onTouch callback with a fake MotionEvent.ACTION_UP action.
         View.OnTouchListener closeButtonImageViewOnTouchListener =
-                shadowOf(subject.getCloseButtonWidget().getImageView()).getOnTouchListener();
+                Shadows.shadowOf(subject.getCloseButtonWidget().getImageView()).getOnTouchListener();
         closeButtonImageViewOnTouchListener.onTouch(null, GestureUtils.createActionUp(0, 0));
 
         verify(mockRequestQueue).add(
@@ -2046,7 +2175,7 @@ public void onClickCloseButtonTextView_whenCloseButtonIsVisible_shouldFireCloseT
         // We don't have direct access to the CloseButtonWidget text's close event, so we manually
         // invoke its onTouchListener's onTouch callback with a fake MotionEvent.ACTION_UP action.
         View.OnTouchListener closeButtonTextViewOnTouchListener =
-                shadowOf(subject.getCloseButtonWidget().getTextView()).getOnTouchListener();
+                Shadows.shadowOf(subject.getCloseButtonWidget().getTextView()).getOnTouchListener();
         closeButtonTextViewOnTouchListener.onTouch(null, GestureUtils.createActionUp(0, 0));
 
         verify(mockRequestQueue).add(
@@ -2097,7 +2226,7 @@ public void VastWebView_onVastWebViewClick_shouldCallVastIconHandleClick() throw
         VastWebView view = (VastWebView) subject.createIconView(context, vastIconConfig, View.INVISIBLE);
 
         view.getVastWebViewClickListener().onVastWebViewClick();
-        verify(vastIconConfig).handleClick(any(Context.class), anyString());
+        verify(vastIconConfig).handleClick(any(Context.class), anyString(), eq("dsp_creative_id"));
     }
 
     @Test
@@ -2139,13 +2268,14 @@ public void handleIconDisplay_withCurrentPositionGreaterThanOffsetPlusDuration_s
     }
 
     @Test
-    public void makeInteractable_shouldHideCountdownWidgetAndShowCtaAndCloseButtonWidgets() throws Exception {
+    public void makeInteractable_shouldHideCountdownWidgetAndShowCtaAndCloseButtonWidgetsAndShowSocialActions() throws Exception {
         initializeSubject();
 
         subject.makeVideoInteractable();
 
         assertThat(subject.getRadialCountdownWidget().getVisibility()).isEqualTo(View.GONE);
         assertThat(subject.getCloseButtonWidget().getVisibility()).isEqualTo(View.VISIBLE);
+        assertThat(subject.getSocialActionsView().getVisibility()).isEqualTo(View.VISIBLE);
     }
 
     private void initializeSubject() throws IllegalAccessException {
@@ -2177,27 +2307,6 @@ private void setVideoViewParams(int currentPosition, int duration) throws Illega
     }
 
     private ShadowVastVideoView getShadowVideoView() {
-        return (ShadowVastVideoView) shadowOf_(subject.getVastVideoView());
-    }
-
-    public static void assertHttpRequestsMade(final String userAgent, final String... urls) {
-        final int numberOfReceivedHttpRequests = Robolectric.getFakeHttpLayer().getSentHttpRequestInfos().size();
-        assertThat(numberOfReceivedHttpRequests).isEqualTo(urls.length);
-
-        for (final String url : urls) {
-            assertThat(Robolectric.httpRequestWasMade(url)).isTrue();
-        }
-
-        if (userAgent != null) {
-            while (true) {
-                final HttpRequest httpRequest = Robolectric.getNextSentHttpRequest();
-                if (httpRequest == null) {
-                    break;
-                }
-
-                assertThat(httpRequest.getFirstHeader(USER_AGENT.getKey()).getValue())
-                        .isEqualTo(userAgent);
-            }
-        }
+        return (ShadowVastVideoView) ShadowExtractor.extract(subject.getVastVideoView());
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewCountdownRunnableTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewCountdownRunnableTest.java
index 7b17304c..fd69364c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewCountdownRunnableTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewCountdownRunnableTest.java
@@ -8,12 +8,14 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
+import org.robolectric.annotation.Config;
 
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class VastVideoViewCountdownRunnableTest {
 
     @Mock VastVideoViewController mockVideoViewController;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewProgressRunnableTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewProgressRunnableTest.java
index 1f5eabdb..4097331e 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewProgressRunnableTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewProgressRunnableTest.java
@@ -14,6 +14,7 @@
 import org.mockito.ArgumentCaptor;
 import org.mockito.Captor;
 import org.mockito.Mock;
+import org.robolectric.annotation.Config;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -26,6 +27,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class VastVideoViewProgressRunnableTest {
     @Mock VastVideoViewController mockVastVideoViewController;
     @Mock Context mockContext;
@@ -47,8 +49,8 @@ public void setup() {
     @Test
     public void doWork_whenTrackersReturned_shouldMakeTrackingRequests() {
         List<VastTracker> testTrackers = new ArrayList<VastTracker>();
-        testTrackers.add(new VastAbsoluteProgressTracker("http://example.com/", 1999));
-        testTrackers.add(new VastAbsoluteProgressTracker("http://example1.com/", 2000));
+        testTrackers.add(new VastAbsoluteProgressTracker("https://example.com/", 1999));
+        testTrackers.add(new VastAbsoluteProgressTracker("https://example1.com/", 2000));
 
         when(mockVideoConfig.getUntriggeredTrackersBefore(eq(3000), eq(4000)))
                 .thenReturn(testTrackers);
@@ -70,8 +72,8 @@ public void doWork_whenTrackersReturned_shouldMakeTrackingRequests() {
         verify(mockRequestQueue, times(2)).add(requestCaptor.capture());
         final List<TrackingRequest> allValues = requestCaptor.getAllValues();
         assertThat(allValues).hasSize(2);
-        assertThat(allValues.get(0).getUrl()).isEqualTo("http://example.com/");
-        assertThat(allValues.get(1).getUrl()).isEqualTo("http://example1.com/");
+        assertThat(allValues.get(0).getUrl()).isEqualTo("https://example.com/");
+        assertThat(allValues.get(1).getUrl()).isEqualTo("https://example1.com/");
 
         verifyNoMoreInteractions(mockVastVideoViewController, mockRequestQueue);
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewTest.java
index 064b8b78..0842ecda 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewTest.java
@@ -9,6 +9,7 @@
 import android.os.AsyncTask;
 import android.os.Build;
 
+import com.mopub.TestSdkHelper;
 import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.Before;
@@ -30,6 +31,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class VastVideoViewTest {
 
     @Mock private MediaMetadataRetriever mockMediaMetadataRetriever;
@@ -84,10 +86,10 @@ public void onDestroy_withBlurLastVideoFrameTaskFinished_shouldNotCancelTask() t
         verify(mockBlurLastVideoFrameTask, never()).cancel(anyBoolean());
     }
 
-
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
     @Test
+    @Config(shadows = {MoPubShadowMediaPlayer.class})
     public void retryMediaPlayer_withVideoFilePermissionErrorAndBelowJellyBean_shouldReturnTrue() throws Exception {
+        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1);
         File file = new File("disk_video_path");
         file.createNewFile();
 
@@ -99,9 +101,10 @@ public void retryMediaPlayer_withVideoFilePermissionErrorAndBelowJellyBean_shoul
         file.delete();
     }
 
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
     @Test
+    @Config(shadows = {MoPubShadowMediaPlayer.class})
     public void retryMediaPlayer_shouldNotRunMoreThanOnce() throws Exception {
+        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1);
         File file = new File("disk_video_path");
         file.createNewFile();
 
@@ -117,9 +120,10 @@ public void retryMediaPlayer_shouldNotRunMoreThanOnce() throws Exception {
         file.delete();
     }
 
-    @Config(reportSdk = Build.VERSION_CODES.JELLY_BEAN)
+    @Config(sdk= Build.VERSION_CODES.JELLY_BEAN)
     @Test
     public void retryMediaPlayer_withAndroidVersionAboveJellyBean_shouldReturnFalse() throws Exception {
+        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.JELLY_BEAN);
         File file = new File("disk_video_path");
         file.createNewFile();
 
@@ -131,9 +135,9 @@ public void retryMediaPlayer_withAndroidVersionAboveJellyBean_shouldReturnFalse(
         file.delete();
     }
 
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void retryMediaPlayer_withOtherVideoError_shouldReturnFalse() throws Exception {
+        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.ICE_CREAM_SANDWICH);
         File file = new File("disk_video_path");
         file.createNewFile();
 
@@ -145,9 +149,9 @@ public void retryMediaPlayer_withOtherVideoError_shouldReturnFalse() throws Exce
         file.delete();
     }
 
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void retryMediaPlayer_withExceptionThrown_shouldReturnFalseAndIncrementRetryCount() throws Exception {
+        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.ICE_CREAM_SANDWICH);
         File file = new File("disk_video_path");
         if (file.exists()) {
             assertThat(file.delete()).isTrue();
@@ -159,9 +163,11 @@ public void retryMediaPlayer_withExceptionThrown_shouldReturnFalseAndIncrementRe
         assertThat(subject.getVideoRetries()).isEqualTo(1);
     }
 
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
     @Test
+    @Config(shadows = {MoPubShadowMediaPlayer.class})
     public void onResume_shouldResetVideoRetryCountToZero() throws Exception {
+        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1);
+
         File file = new File("disk_video_path");
         file.createNewFile();
 
@@ -175,17 +181,17 @@ public void onResume_shouldResetVideoRetryCountToZero() throws Exception {
         file.delete();
     }
 
-    @Config(reportSdk = Build.VERSION_CODES.GINGERBREAD)
     @Test
     public void createMediaMetadataRetriever_beforeGingerbreadMr1_shouldReturnNull() throws Exception {
+        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.GINGERBREAD);
         MediaMetadataRetriever mediaMetadataRetriever = subject.createMediaMetadataRetriever();
 
         assertThat(mediaMetadataRetriever).isNull();
     }
 
-    @Config(reportSdk = Build.VERSION_CODES.GINGERBREAD_MR1)
     @Test
     public void createMediaMetadataRetriever_atLeastGingerbreadMr1_shouldReturnNewMediaMetadataRetriever() throws Exception {
+        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.GINGERBREAD_MR1);
         MediaMetadataRetriever mediaMetadataRetriever = subject.createMediaMetadataRetriever();
 
         assertThat(mediaMetadataRetriever).isNotNull();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastWebViewTest.java
index 3ee435f1..c103d26d 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastWebViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastWebViewTest.java
@@ -7,6 +7,7 @@
 import android.webkit.WebSettings;
 import android.webkit.WebView;
 
+import com.mopub.TestSdkHelper;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.GestureUtils;
 import com.mopub.mobileads.test.support.VastUtils;
@@ -16,15 +17,16 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
+import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowWebView;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.verify;
-import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class VastWebViewTest {
 
     private VastWebView subject;
@@ -41,11 +43,11 @@ public void setup() {
 
     @Test
     public void constructor_shouldSetOnTouchListener() throws Exception {
-        assertThat(Robolectric.shadowOf(subject).getOnTouchListener())
+        assertThat(Shadows.shadowOf(subject).getOnTouchListener())
                 .isInstanceOf(VastWebView.VastWebViewOnTouchListener.class);
     }
 
-    @Config(reportSdk = Build.VERSION_CODES.JELLY_BEAN_MR2)
+    @Config(sdk = Build.VERSION_CODES.JELLY_BEAN_MR2)
     @Test
     public void pluginState_atLeastJellybeanMr2_shouldDefaultToOff_shouldNeverBeEnabled()  {
         subject = new VastWebView(Robolectric.buildActivity(Activity.class).create().get());
@@ -55,10 +57,10 @@ public void pluginState_atLeastJellybeanMr2_shouldDefaultToOff_shouldNeverBeEnab
         assertThat(subject.getSettings().getPluginState()).isEqualTo(WebSettings.PluginState.OFF);
     }
 
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void pluginState_atLeastIcsButBelowJellybeanMr2_shouldDefaultToOn_shouldAllowToggling() {
-        subject = new VastWebView(Robolectric.buildActivity(Activity.class).create().get());
+        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.ICE_CREAM_SANDWICH);
+        subject = new VastWebView(context);
         assertThat(subject.getSettings().getPluginState()).isEqualTo(WebSettings.PluginState.ON);
 
         subject.enablePlugins(false);
@@ -68,10 +70,10 @@ public void pluginState_atLeastIcsButBelowJellybeanMr2_shouldDefaultToOn_shouldA
         assertThat(subject.getSettings().getPluginState()).isEqualTo(WebSettings.PluginState.ON);
     }
 
-    @Config(reportSdk = Build.VERSION_CODES.GINGERBREAD_MR1)
     @Test
     public void pluginState_beforeIcs_shouldDefaultToOff_shouldAllowToggling() {
-        subject = new VastWebView(Robolectric.buildActivity(Activity.class).create().get());
+        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.GINGERBREAD_MR1);
+        subject = new VastWebView(context);
         assertThat(subject.getSettings().getPluginState()).isEqualTo(WebSettings.PluginState.OFF);
 
         subject.enablePlugins(true);
@@ -87,7 +89,7 @@ public void loadData_shouldCallLoadDataWithBaseURL() throws Exception {
         subject.loadData(data);
 
         ShadowWebView.LoadDataWithBaseURL lastLoadData
-                = shadowOf(subject).getLastLoadDataWithBaseURL();
+                = Shadows.shadowOf(subject).getLastLoadDataWithBaseURL();
         assertThat(lastLoadData.baseUrl).isEqualTo("http://ads.mopub.com/");
         assertThat(lastLoadData.data).isEqualTo(data);
         assertThat(lastLoadData.mimeType).isEqualTo("text/html");
@@ -97,7 +99,7 @@ public void loadData_shouldCallLoadDataWithBaseURL() throws Exception {
 
     @Test
     public void VastWebViewOnTouchListener_withActionDown_withActionUp_shouldCallOnVastWebViewClick() throws Exception {
-        View.OnTouchListener onTouchListener = shadowOf(subject).getOnTouchListener();
+        View.OnTouchListener onTouchListener = Shadows.shadowOf(subject).getOnTouchListener();
         onTouchListener.onTouch(subject, GestureUtils.createActionDown(0, 0));
         onTouchListener.onTouch(subject, GestureUtils.createActionUp(0, 0));
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastWrapperXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastWrapperXmlManagerTest.java
index 2d8d1aa4..0475625f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastWrapperXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastWrapperXmlManagerTest.java
@@ -4,12 +4,14 @@
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
 import org.w3c.dom.Node;
 
 import static com.mopub.mobileads.test.support.VastUtils.createNode;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class VastWrapperXmlManagerTest {
 
     private VastWrapperXmlManager subject;
@@ -18,22 +20,22 @@
     public void getVastAdTagURI_shouldReturnStringURI() throws Exception {
         String wrapperXml = "<Wrapper>" +
                 "    <Impression id=\"DART\">" +
-                "        <![CDATA[http://impression/m/wrapperOne]]>" +
+                "        <![CDATA[https://impression/m/wrapperOne]]>" +
                 "    </Impression>" +
-                "    <VASTAdTagURI>http://redirecturl/xml</VASTAdTagURI>" +
+                "    <VASTAdTagURI>https://redirecturl/xml</VASTAdTagURI>" +
                 "</Wrapper>";
 
         Node wrapperNode = createNode(wrapperXml);
         subject = new VastWrapperXmlManager(wrapperNode);
 
-        assertThat(subject.getVastAdTagURI()).isEqualTo("http://redirecturl/xml");
+        assertThat(subject.getVastAdTagURI()).isEqualTo("https://redirecturl/xml");
     }
 
     @Test
     public void getVastAdTagURI_withNoVastAdTagURI_shouldReturnNull() throws Exception {
         String wrapperXml = "<Wrapper>" +
                 "    <Impression id=\"DART\">" +
-                "        <![CDATA[http://impression/m/wrapperOne]]>" +
+                "        <![CDATA[https://impression/m/wrapperOne]]>" +
                 "    </Impression>" +
                 "</Wrapper>";
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerAggregatorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerAggregatorTest.java
index e74a94cc..5b7e6444 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerAggregatorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerAggregatorTest.java
@@ -7,8 +7,8 @@
 import android.view.Display;
 import android.view.WindowManager;
 
-import com.mopub.common.HttpClient;
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.test.support.ShadowMoPubHttpUrlConnection;
 import com.mopub.mobileads.test.support.VastUtils;
 import com.mopub.network.MoPubRequestQueue;
 import com.mopub.network.Networking;
@@ -20,11 +20,12 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
-import org.robolectric.tester.org.apache.http.FakeHttpLayer;
+import org.robolectric.annotation.Config;
 
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
+import java.util.Map;
 import java.util.concurrent.Semaphore;
 
 import static com.mopub.common.VolleyRequestMatcher.isUrl;
@@ -39,11 +40,12 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class, shadows = {ShadowMoPubHttpUrlConnection.class})
 public class VastXmlManagerAggregatorTest {
     static final String TEST_VAST_XML_STRING = "<VAST version='2.0'>" +
             "    <Ad id='empty'>" +
             "        <InLine>" +
-            "            <Impression><![CDATA[http:emptyimpression]]></Impression>" +
+            "            <Impression><![CDATA[https:emptyimpression]]></Impression>" +
             "            <Creatives>" +
             "                <Creative>" +
             "                    <Linear>" +
@@ -52,37 +54,37 @@
             "                    </Linear>" +
             "                </Creative>" +
             "            </Creatives>" +
-            "            <Error><![CDATA[http://neverCallThisError]]></Error>" +
+            "            <Error><![CDATA[https://neverCallThisError]]></Error>" +
             "        </InLine>" +
             "    </Ad>" +
             "    <Ad id='62833' sequence='1'>" +
             "        <Wrapper>" +
             "            <AdSystem>Tapad</AdSystem>" +
-            "            <VASTAdTagURI>http://dsp.x-team.staging.mopub.com/xml</VASTAdTagURI>" +
-            "            <Impression>http://myTrackingURL/wrapper/impression1</Impression>" +
-            "            <Impression>http://myTrackingURL/wrapper/impression2</Impression>" +
+            "            <VASTAdTagURI>https://dsp.x-team.staging.mopub.com/xml</VASTAdTagURI>" +
+            "            <Impression>https://myTrackingURL/wrapper/impression1</Impression>" +
+            "            <Impression>https://myTrackingURL/wrapper/impression2</Impression>" +
             "            <Creatives>" +
             "                <Creative AdID='62833'>" +
             "                    <Linear>" +
             "                        <TrackingEvents>" +
-            "                            <Tracking event='creativeView'>http://myTrackingURL/wrapper/creativeView</Tracking>" +
-            "                            <Tracking event='start'>http://myTrackingURL/wrapper/start</Tracking>" +
-            "                            <Tracking event='midpoint'>http://myTrackingURL/wrapper/midpoint</Tracking>" +
-            "                            <Tracking event='firstQuartile'>http://myTrackingURL/wrapper/firstQuartile</Tracking>" +
-            "                            <Tracking event='thirdQuartile'>http://myTrackingURL/wrapper/thirdQuartile</Tracking>" +
-            "                            <Tracking event='complete'>http://myTrackingURL/wrapper/complete</Tracking>" +
-            "                            <Tracking event='mute'>http://myTrackingURL/wrapper/mute</Tracking>" +
-            "                            <Tracking event='unmute'>http://myTrackingURL/wrapper/unmute</Tracking>" +
-            "                            <Tracking event='pause'>http://myTrackingURL/wrapper/pause</Tracking>" +
-            "                            <Tracking event='resume'>http://myTrackingURL/wrapper/resume</Tracking>" +
-            "                            <Tracking event='fullscreen'>http://myTrackingURL/wrapper/fullscreen</Tracking>" +
+            "                            <Tracking event='creativeView'>https://myTrackingURL/wrapper/creativeView</Tracking>" +
+            "                            <Tracking event='start'>https://myTrackingURL/wrapper/start</Tracking>" +
+            "                            <Tracking event='midpoint'>https://myTrackingURL/wrapper/midpoint</Tracking>" +
+            "                            <Tracking event='firstQuartile'>https://myTrackingURL/wrapper/firstQuartile</Tracking>" +
+            "                            <Tracking event='thirdQuartile'>https://myTrackingURL/wrapper/thirdQuartile</Tracking>" +
+            "                            <Tracking event='complete'>https://myTrackingURL/wrapper/complete</Tracking>" +
+            "                            <Tracking event='mute'>https://myTrackingURL/wrapper/mute</Tracking>" +
+            "                            <Tracking event='unmute'>https://myTrackingURL/wrapper/unmute</Tracking>" +
+            "                            <Tracking event='pause'>https://myTrackingURL/wrapper/pause</Tracking>" +
+            "                            <Tracking event='resume'>https://myTrackingURL/wrapper/resume</Tracking>" +
+            "                            <Tracking event='fullscreen'>https://myTrackingURL/wrapper/fullscreen</Tracking>" +
             "                        </TrackingEvents>" +
             "                        <VideoClicks>" +
-            "                            <ClickTracking>http://myTrackingURL/wrapper/click</ClickTracking>" +
+            "                            <ClickTracking>https://myTrackingURL/wrapper/click</ClickTracking>" +
             "                        </VideoClicks>" +
             "                        <MediaFiles>" +
             "                            <MediaFile delivery='progressive' bitrate='416' width='300' height='250' type='video/mp4'>" +
-            "                                <![CDATA[http://videosInWrappersShouldNeverBePlayed]]>" +
+            "                                <![CDATA[https://videosInWrappersShouldNeverBePlayed]]>" +
             "                            </MediaFile>" +
             "                        </MediaFiles>" +
             "                    </Linear>" +
@@ -91,34 +93,43 @@
             "                    <CompanionAds>" +
             "                        <Companion id=\"wrappercompanion\" height=\"250\" width=\"456\">" +
             "                            <StaticResource creativeType=\"image/jpeg\">" +
-            "                                http://wrapperCompanionAdStaticResource" +
+            "                                https://wrapperCompanionAdStaticResource" +
             "                            </StaticResource>" +
             "                            <TrackingEvents>" +
-            "                                <Tracking event=\"creativeView\">http://firstWrapperCompanionCreativeView</Tracking>" +
-            "                                <Tracking event=\"creativeView\">http://secondWrapperCompanionCreativeView</Tracking>" +
+            "                                <Tracking event=\"creativeView\">https://firstWrapperCompanionCreativeView</Tracking>" +
+            "                                <Tracking event=\"creativeView\">https://secondWrapperCompanionCreativeView</Tracking>" +
             "                            </TrackingEvents>" +
-            "                            <CompanionClickThrough>http://wrapperCompanionClickThrough</CompanionClickThrough>" +
-            "                            <CompanionClickTracking><![CDATA[http://wrapperCompanionClickTracking]]></CompanionClickTracking>" +
+            "                            <CompanionClickThrough>https://wrapperCompanionClickThrough</CompanionClickThrough>" +
+            "                            <CompanionClickTracking><![CDATA[https://wrapperCompanionClickTracking]]></CompanionClickTracking>" +
             "                        </Companion> " +
             "                        <Companion id=\"noresource\" height=\"250\" width=\"456\">" +
             "                            <TrackingEvents>" +
-            "                                <Tracking event=\"creativeView\">http://firstNoResourceWrapperCompanionCreativeView</Tracking>" +
-            "                                <Tracking event=\"creativeView\">http://secondNoResourceWrapperCompanionCreativeView</Tracking>" +
+            "                                <Tracking event=\"creativeView\">https://firstNoResourceWrapperCompanionCreativeView</Tracking>" +
+            "                                <Tracking event=\"creativeView\">https://secondNoResourceWrapperCompanionCreativeView</Tracking>" +
             "                            </TrackingEvents>" +
-            "                            <CompanionClickThrough>http://noResourceWrapperCompanionClickThrough</CompanionClickThrough>" +
-            "                            <CompanionClickTracking><![CDATA[http://noResourceWrapperCompanionClickTracking1]]></CompanionClickTracking>" +
+            "                            <CompanionClickThrough>https://noResourceWrapperCompanionClickThrough</CompanionClickThrough>" +
+            "                            <CompanionClickTracking><![CDATA[https://noResourceWrapperCompanionClickTracking1]]></CompanionClickTracking>" +
             "                        </Companion> " +
             "                    </CompanionAds>" +
             "                </Creative>" +
             "            </Creatives>" +
-            "            <Error><![CDATA[http://wrapperErrorOne?errorcode=[ERRORCODE]]]></Error>" +
-            "            <Error><![CDATA[http://wrapperErrorTwo?errorcode=[ERRORCODE]]]></Error>" +
+            "            <Extensions>" +
+            "                <Extension type=\"MoPub\">" +
+            "                    <MoPubViewabilityTracker" +
+            "                            viewablePlaytime=\"2.5\"" +
+            "                            percentViewable=\"50%\">" +
+            "                        <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
+            "                    </MoPubViewabilityTracker>" +
+            "                </Extension>" +
+            "            </Extensions>" +
+            "            <Error><![CDATA[https://wrapperErrorOne?errorcode=[ERRORCODE]]]></Error>" +
+            "            <Error><![CDATA[https://wrapperErrorTwo?errorcode=[ERRORCODE]]]></Error>" +
             "        </Wrapper>" +
             "    </Ad>" +
             "</VAST>" +
             "<MP_TRACKING_URLS>" +
-            "    <MP_TRACKING_URL>http://www.mopub.com/imp1</MP_TRACKING_URL>" +
-            "    <MP_TRACKING_URL>http://www.mopub.com/imp2</MP_TRACKING_URL>" +
+            "    <MP_TRACKING_URL>https://www.mopub.com/imp1</MP_TRACKING_URL>" +
+            "    <MP_TRACKING_URL>https://www.mopub.com/imp2</MP_TRACKING_URL>" +
             "</MP_TRACKING_URLS>";
 
     static final String TEST_NESTED_VAST_XML_STRING = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
@@ -128,7 +139,7 @@
             "            <AdSystem version='1.0'>Tapad</AdSystem>" +
             "            <AdTitle><![CDATA[PKW6T_LIV_DSN_Audience_TAPAD_3rd Party Audience Targeting_Action Movi]]></AdTitle>" +
             "            <Description/>" +
-            "            <Impression><![CDATA[http://rtb-test.dev.tapad.com:8080/creative/imp.png?ts=1374099035457&svid=1&creative_id=30731&ctx_type=InApp&ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&liverail_cp=1]]></Impression>" +
+            "            <Impression><![CDATA[https://rtb-test.dev.tapad.com:8080/creative/imp.png?ts=1374099035457&svid=1&creative_id=30731&ctx_type=InApp&ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&liverail_cp=1]]></Impression>" +
             "            <Creatives>" +
             "                <Creative sequence='1' id='57722'>" +
             "                    <Linear>" +
@@ -160,7 +171,7 @@
             "                        </Icons>" +
             "                        <Duration>00:00:15</Duration>" +
             "                        <VideoClicks>" +
-            "                            <ClickThrough><![CDATA[http://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com]]></ClickThrough>" +
+            "                            <ClickThrough><![CDATA[https://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=https%3A%2F%2Ftapad.com]]></ClickThrough>" +
             "                        </VideoClicks>" +
             "                        <MediaFiles>" +
             "                            <MediaFile delivery='progressive' bitrate='416' width='800' height='480' type='video/mp4'>" +
@@ -173,21 +184,63 @@
             "                    <CompanionAds>" +
             "                        <Companion id=\"valid\" height=\"250\" width=\"300\">" +
             "                            <StaticResource creativeType=\"image/jpeg\">" +
-            "                                http://demo.tremormedia.com/proddev/vast/Blistex1.jpg" +
+            "                                https://demo.tremormedia.com/proddev/vast/Blistex1.jpg" +
             "                            </StaticResource>" +
             "                            <TrackingEvents>" +
-            "                                <Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking>" +
-            "                                <Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking>" +
+            "                                <Tracking event=\"creativeView\">https://myTrackingURL/firstCompanionCreativeView</Tracking>" +
+            "                                <Tracking event=\"creativeView\">https://myTrackingURL/secondCompanionCreativeView</Tracking>" +
             "                            </TrackingEvents>" +
-            "                            <CompanionClickThrough>http://www.tremormedia.com</CompanionClickThrough>" +
-            "                            <CompanionClickTracking><![CDATA[http://companionClickTracking1]]></CompanionClickTracking>" +
-            "                            <CompanionClickTracking><![CDATA[http://companionClickTracking2]]></CompanionClickTracking>" +
+            "                            <CompanionClickThrough>https://www.tremormedia.com</CompanionClickThrough>" +
+            "                            <CompanionClickTracking><![CDATA[https://companionClickTracking1]]></CompanionClickTracking>" +
+            "                            <CompanionClickTracking><![CDATA[https://companionClickTracking2]]></CompanionClickTracking>" +
+            "                        </Companion>" +
+            "                        <Companion id=\"valid\" height=\"10000\" width=\"10000\">" +
+            "                            <HTMLResource>" +
+            "                                <![CDATA[" +
+            "                                    <link rel=\"stylesheet\" href=\"https://ton.twimg.com/exchange-media/staging/video_companions_style-29c86cb8e4193a6c4da8.css\">" +
+            "                                    <div class=\"tweet_wrapper\">" +
+            "                                    <div class=\"tweet\">" +
+            "                                    <img class=\"icon\" src=\"https://pbs.twimg.com/profile_images/641346383606235136/XLhN-zvk_reasonably_small.jpg\"/>" +
+            "                                    <span class=\"title\">Frappuccino</span>" +
+            "                                    <span id=\"tweet_text\" class=\"tweet-text\">" +
+            "                                    " +
+            "                                    The best use of your Frappuccino cup is to hold your Frappuccino. The second best is to hold your terrarium. \uD83C\uDF35☀️" +
+            "                                    </span>" +
+            "                                    </div>" +
+            "                                    </div>" +
+            "                                ]]>" +
+            "                            </HTMLResource>" +
+            "                            <TrackingEvents>" +
+            "                                <Tracking event=\"creativeView\">https://myTrackingURL/firstCompanionCreativeView</Tracking>" +
+            "                            </TrackingEvents>" +
+            "                            <CompanionClickThrough>https://frappucinoCompanion.com</CompanionClickThrough>" +
+            "                        </Companion>" +
+            "                        <Companion height=\"30\" width=\"65\" adSlotID=\"adsBy\">" +
+            "                            <HTMLResource>" +
+            "                                <![CDATA[" +
+            "                                    <link rel=\"stylesheet\" href=\"https://ton.twimg.com/exchange-media/staging/video_companions_style-29c86cb8e4193a6c4da8.css\">" +
+            "                                    <div class=\"ads-by-twitter\">" +
+            "                                    Ads by <div class=\"larry\"></div>" +
+            "                                    </div>" +
+            "                                ]]>" +
+            "                            </HTMLResource>" +
+            "                        </Companion>" +
+            "                        <Companion height=\"22\" width=\"130\" adSlotID=\"socialActions\">" +
+            "                            <HTMLResource>" +
+            "                                <![CDATA[" +
+            "                                    <link rel=\"stylesheet\" href=\"https://ton.twimg.com/exchange-media/staging/video_companions_style-29c86cb8e4193a6c4da8.css\">" +
+            "                                    <div class=\"social-actions\">" +
+            "                                    <a href=\"mopubshare://tweet?screen_name=frappuccino&tweet_id=590877845037056000\" class=\"retweet-button\"><div class=\"icon\"></div>310&nbsp;</a>" +
+            "                                    <a href=\"twitter://intent/favorite?id=590877845037056000\" class=\"like-button\"><div class=\"icon\"></div>1118&nbsp;</a>" +
+            "                                    </div>" +
+            "                                ]]>" +
+            "                            </HTMLResource>" +
             "                        </Companion>" +
             "                    </CompanionAds>" +
             "                </Creative>" +
             "            </Creatives>" +
-            "            <Error><![CDATA[http://nestedInLineErrorOne]]></Error>" +
-            "            <Error><![CDATA[http://nestedInLineErrorTwo]]></Error>" +
+            "            <Error><![CDATA[https://nestedInLineErrorOne]]></Error>" +
+            "            <Error><![CDATA[https://nestedInLineErrorTwo]]></Error>" +
             "        </InLine>" +
             "    </Ad>" +
             "</VAST>";
@@ -199,13 +252,13 @@
             "            <AdSystem version='1.0'>Tapad</AdSystem>" +
             "            <AdTitle><![CDATA[PKW6T_LIV_DSN_Audience_TAPAD_3rd Party Audience Targeting_Action Movi]]></AdTitle>" +
             "            <Description/>" +
-            "            <Impression><![CDATA[http://rtb-test.dev.tapad.com:8080/creative/imp.png?ts=1374099035457&svid=1&creative_id=30731&ctx_type=InApp&ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&liverail_cp=1]]></Impression>" +
+            "            <Impression><![CDATA[https://rtb-test.dev.tapad.com:8080/creative/imp.png?ts=1374099035457&svid=1&creative_id=30731&ctx_type=InApp&ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&liverail_cp=1]]></Impression>" +
             "            <Creatives>" +
             "                <Creative sequence='1' id='57722'>" +
             "                    <Linear>" +
             "                        <Duration>00:00:15</Duration>" +
             "                        <VideoClicks>" +
-            "                            <ClickThrough><![CDATA[http://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com]]></ClickThrough>" +
+            "                            <ClickThrough><![CDATA[https://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=https%3A%2F%2Ftapad.com]]></ClickThrough>" +
             "                        </VideoClicks>" +
             "                        <MediaFiles>" +
             "                            <MediaFile delivery='progressive' bitrate='416' width='800' height='480' type='video/mp4'>" +
@@ -215,14 +268,23 @@
             "                    </Linear>" +
             "                </Creative>" +
             "            </Creatives>" +
+            "            <Extensions>" +
+            "                <Extension type=\"MoPub\">" +
+            "                    <MoPubViewabilityTracker" +
+            "                            viewablePlaytime=\"3.5\"" +
+            "                            percentViewable=\"70%\">" +
+            "                        <![CDATA[https://ad.server.com/impression/dot.png]]>" +
+            "                    </MoPubViewabilityTracker>" +
+            "                </Extension>" +
+            "            </Extensions>" +
             "        </InLine>" +
             "    </Ad>" +
             "</VAST>";
 
-    static final String TEST_VAST_BAD_NEST_URL_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>http://dsp.x-team.staging.mopub.com/xml\"$|||</VASTAdTagURI><Impression>http://myTrackingURL/wrapper/impression1</Impression><Impression>http://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>http://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>http://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>http://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='firstQuartile'>http://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>http://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>http://myTrackingURL/wrapper/complete</Tracking><Tracking event='mute'>http://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>http://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>http://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>http://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>http://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>http://myTrackingURL/wrapper/click</ClickTracking></VideoClicks></Linear></Creative></Creatives><Error>![CDATA[http://badNestedError]]</Error]</Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>http://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>http://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
+    static final String TEST_VAST_BAD_NEST_URL_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>https://dsp.x-team.staging.mopub.com/xml\"$|||</VASTAdTagURI><Impression>https://myTrackingURL/wrapper/impression1</Impression><Impression>https://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>https://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>https://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>https://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='firstQuartile'>https://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>https://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>https://myTrackingURL/wrapper/complete</Tracking><Tracking event='mute'>https://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>https://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>https://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>https://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>https://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>https://myTrackingURL/wrapper/click</ClickTracking></VideoClicks></Linear></Creative></Creatives><Error>![CDATA[https://badNestedError]]</Error]</Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>https://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>https://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
 
     static final String TEST_JUST_ERROR_XML_STRING = "<VAST version='3.0'>" +
-            "<Error><![CDATA[http://justErrorTracking?errorcode=[ERRORCODE]]]></Error>" +
+            "<Error><![CDATA[https://justErrorTracking?errorcode=[ERRORCODE]]]></Error>" +
             "</VAST>";
 
     static final String TEST_INVALID_VAST_XML_STRING = "<VAST version='fail'>" +
@@ -234,13 +296,13 @@
     static final String TEST_VAST_WITH_NEGATIVE_SEQUENCE_NUMBER_XML_STRING = "<VAST version='3.0'>" +
             "    <Ad id='sequenceTooHigh' sequence='42'>" +
             "        <InLine>" +
-            "            <Impression><![CDATA[http:sequenceTooHighImp]]></Impression>" +
+            "            <Impression><![CDATA[https:sequenceTooHighImp]]></Impression>" +
             "            <Creatives>" +
             "                <Creative>" +
             "                    <Linear>" +
             "                        <MediaFiles>" +
             "                            <MediaFile delivery='progressive' bitrate='416' width='300' height='250' type='video/mp4'>" +
-            "                                <![CDATA[http://sequenceTooHighVideo]]>" +
+            "                                <![CDATA[https://sequenceTooHighVideo]]>" +
             "                            </MediaFile>" +
             "                        </MediaFiles>" +
             "                    </Linear>" +
@@ -250,13 +312,13 @@
             "    </Ad>" +
             "    <Ad id='negativeSequence' sequence='-2'>" +
             "        <InLine>" +
-            "            <Impression><![CDATA[http://negativeSequence]]></Impression>" +
+            "            <Impression><![CDATA[https://negativeSequence]]></Impression>" +
             "            <Creatives>" +
             "                <Creative>" +
             "                    <Linear>" +
             "                        <MediaFiles>" +
             "                            <MediaFile delivery='progressive' bitrate='416' width='300' height='250' type='video/mp4'>" +
-            "                                <![CDATA[http://negativeSequence]]>" +
+            "                                <![CDATA[https://negativeSequence]]>" +
             "                            </MediaFile>" +
             "                        </MediaFiles>" +
             "                    </Linear>" +
@@ -267,7 +329,6 @@
             "</VAST>";
 
     private Activity context;
-    private FakeHttpLayer mFakeHttpLayer;
     private Semaphore semaphore;
     private VastXmlManagerAggregatorListener vastXmlManagerAggregatorListener;
     private VastXmlManagerAggregator subject;
@@ -279,7 +340,6 @@
     @Before
     public void setup() {
         context = Robolectric.buildActivity(Activity.class).create().get();
-        mFakeHttpLayer = Robolectric.getFakeHttpLayer();
 
         Networking.setRequestQueueForTesting(mockRequestQueue);
 
@@ -309,10 +369,10 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
 
     @Test
     public void doInBackground_shouldNotFollowRedirectsOnceTheLimitHasBeenReached() throws Exception {
-        for(int i = 0; i < VastXmlManagerAggregator.MAX_TIMES_TO_FOLLOW_VAST_REDIRECT; i++) {
-            mFakeHttpLayer.addPendingHttpResponse(200, TEST_VAST_XML_STRING);
+        for (int i = 0; i < VastXmlManagerAggregator.MAX_TIMES_TO_FOLLOW_VAST_REDIRECT; i++) {
+            ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_VAST_XML_STRING);
         }
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING);
 
         subject.execute(TEST_VAST_XML_STRING);
         semaphore.acquire();
@@ -322,17 +382,17 @@ public void doInBackground_shouldNotFollowRedirectsOnceTheLimitHasBeenReached()
 
     @Test
     public void doInBackground_shouldFollowMaxRedirectsMinusOne() throws Exception {
-        for(int i = 0; i < VastXmlManagerAggregator.MAX_TIMES_TO_FOLLOW_VAST_REDIRECT - 1; i++) {
-            mFakeHttpLayer.addPendingHttpResponse(200, TEST_VAST_XML_STRING);
+        for (int i = 0; i < VastXmlManagerAggregator.MAX_TIMES_TO_FOLLOW_VAST_REDIRECT - 1; i++) {
+            ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_VAST_XML_STRING);
         }
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING);
 
         subject.execute(TEST_VAST_XML_STRING);
         semaphore.acquire();
 
         assertThat(mVastVideoConfig.getNetworkMediaFileUrl()).isEqualTo("https://s3" +
                 ".amazonaws.com/mopub-vast/tapad-video.mp4");
-        assertThat(mVastVideoConfig.getClickThroughUrl()).isEqualTo("http://rtb-test.dev" +
+        assertThat(mVastVideoConfig.getClickThroughUrl()).isEqualTo("https://rtb-test.dev" +
                 ".tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMj" +
                 "AwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTN" +
                 "BMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxh" +
@@ -341,7 +401,7 @@ public void doInBackground_shouldFollowMaxRedirectsMinusOne() throws Exception {
                 "E2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzM" +
                 "wMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlk" +
                 "PUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3" +
-                "D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad." +
+                "D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=https%3A%2F%2Ftapad." +
                 "com");
         assertThat(mVastVideoConfig.getImpressionTrackers().size()).isEqualTo(4 *
                 VastXmlManagerAggregator.MAX_TIMES_TO_FOLLOW_VAST_REDIRECT + 1);
@@ -496,7 +556,7 @@ public void getBestMediaFileUrl_withInvalidMediaTypeAndNullMediaType_shouldRetur
     @Test
     public void getBestCompanionAd_shouldReturnCompanionAd() throws Exception {
         final VastCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(
-                300, 250, "image_url", "image/jpeg", null, null);
+                300, 250, "image_url", "image/jpeg", null, null, null);
 
         final VastCompanionAdConfig bestCompanionAd =
                 subject.getBestCompanionAd(Arrays.asList(companionXmlManager),
@@ -507,7 +567,7 @@ public void getBestCompanionAd_shouldReturnCompanionAd() throws Exception {
     @Test
     public void getBestCompanionAd_withInvalidVastResource_shouldReturnNull() throws Exception {
         final VastCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(
-                300, 250, "image_url", "image/INVALID", null, null);
+                300, 250, "image_url", "image/INVALID", null, null, null);
 
         final VastCompanionAdConfig bestCompanionAd =
                 subject.getBestCompanionAd(Arrays.asList(companionXmlManager),
@@ -518,7 +578,7 @@ public void getBestCompanionAd_withInvalidVastResource_shouldReturnNull() throws
     @Test
     public void getBestCompanionAd_withNullDimension_shouldReturnNull() throws Exception {
         final VastCompanionAdXmlManager companionXmlManager =
-                initializeCompanionXmlManagerMock(null, 250, "image_url", "image/png", null, null);
+                initializeCompanionXmlManagerMock(null, 250, "image_url", "image/png", null, null, null);
 
         final VastCompanionAdConfig bestCompanionAd = subject.getBestCompanionAd(
                 Arrays.asList(companionXmlManager),
@@ -529,7 +589,7 @@ public void getBestCompanionAd_withNullDimension_shouldReturnNull() throws Excep
     @Test
     public void getBestCompanionAd_withWidthTooSmall_shouldReturnNull() throws Exception {
         final VastCompanionAdXmlManager companionXmlManager =
-                initializeCompanionXmlManagerMock(299, 250, "image_url", "image/png", null, null);
+                initializeCompanionXmlManagerMock(299, 250, "image_url", "image/png", null, null, null);
 
         final VastCompanionAdConfig bestCompanionAd = subject.getBestCompanionAd(
                 Arrays.asList(companionXmlManager),
@@ -540,7 +600,7 @@ public void getBestCompanionAd_withWidthTooSmall_shouldReturnNull() throws Excep
     @Test
     public void getBestCompanionAd_withHeightTooSmall_shouldReturnNull() throws Exception {
         final VastCompanionAdXmlManager companionXmlManager =
-                initializeCompanionXmlManagerMock(300, 249, "image_url", "image/png", null, null);
+                initializeCompanionXmlManagerMock(300, 249, "image_url", "image/png", null, null, null);
 
         final VastCompanionAdConfig bestCompanionAd = subject.getBestCompanionAd(
                 Arrays.asList(companionXmlManager),
@@ -557,10 +617,10 @@ public void getBestCompanionAd_withSameAspectRatios_shouldReturnCompanionAdWithA
 
         // Triple screen size
         final VastCompanionAdXmlManager companionXmlManager1 =
-                initializeCompanionXmlManagerMock(2400, 1440, "image_url1", "image/png", null, null);
+                initializeCompanionXmlManagerMock(2400, 1440, "image_url1", "image/png", null, null, null);
         // Double screen size
         final VastCompanionAdXmlManager companionXmlManager2 =
-                initializeCompanionXmlManagerMock(1600, 960, "image_url2", "image/bmp", null, null);
+                initializeCompanionXmlManagerMock(1600, 960, "image_url2", "image/bmp", null, null, null);
 
         VastCompanionAdConfig bestCompanionAd = subject.getBestCompanionAd(
                 Arrays.asList(companionXmlManager1, companionXmlManager2),
@@ -577,10 +637,10 @@ public void getBestCompanionAd_withSameAspectRatios_shouldReturnCompanionAdWithA
 
         // Triple screen size
         final VastCompanionAdXmlManager companionXmlManager1 =
-                initializeCompanionXmlManagerMock(2400, 1440, "image_url1", "image/png", null, null);
+                initializeCompanionXmlManagerMock(2400, 1440, "image_url1", "image/png", null, null, null);
         // Half screen size
         final VastCompanionAdXmlManager companionXmlManager2 =
-                initializeCompanionXmlManagerMock(400, 250, "image_url2", "image/bmp", null, null);
+                initializeCompanionXmlManagerMock(400, 250, "image_url2", "image/bmp", null, null, null);
 
         VastCompanionAdConfig bestCompanionAd = subject.getBestCompanionAd(
                 Arrays.asList(companionXmlManager1, companionXmlManager2),
@@ -597,10 +657,10 @@ public void getBestCompanionAd_withSameArea_shouldReturnLandscapeCompanionAdWith
 
         // Landscape
         final VastCompanionAdXmlManager companionXmlManager1 =
-                initializeCompanionXmlManagerMock(400, 250, "image_url1", "image/png", null, null);
+                initializeCompanionXmlManagerMock(400, 250, "image_url1", "image/png", null, null, null);
         // Portrait
         final VastCompanionAdXmlManager companionXmlManager2 =
-                initializeCompanionXmlManagerMock(250, 400, "image_url2", "image/bmp", null, null);
+                initializeCompanionXmlManagerMock(250, 400, "image_url2", "image/bmp", null, null, null);
 
         VastCompanionAdConfig bestCompanionAd = subject.getBestCompanionAd(
                 Arrays.asList(companionXmlManager1, companionXmlManager2),
@@ -617,10 +677,10 @@ public void getBestCompanionAd_withSameArea_shouldReturnPortraitCompanionAdWithA
 
         // Landscape
         final VastCompanionAdXmlManager companionXmlManager1 =
-                initializeCompanionXmlManagerMock(400, 300, "image_url1", "image/png", null, null);
+                initializeCompanionXmlManagerMock(400, 300, "image_url1", "image/png", null, null, null);
         // Portrait
         final VastCompanionAdXmlManager companionXmlManager2 =
-                initializeCompanionXmlManagerMock(300, 400, "image_url2", "image/bmp", null, null);
+                initializeCompanionXmlManagerMock(300, 400, "image_url2", "image/bmp", null, null, null);
 
         VastCompanionAdConfig bestCompanionAd = subject.getBestCompanionAd(
                 Arrays.asList(companionXmlManager1, companionXmlManager2),
@@ -633,13 +693,13 @@ public void getBestCompanionAd_withAllThreeResourceTypes_shouldReturnStaticResou
         // Static Resource
         final VastCompanionAdXmlManager companionXmlManager1 =
                 initializeCompanionXmlManagerMock(400, 250, "StaticResource", "image/png", null,
-                        null);
+                        null, null);
         // HTML Resource
         final VastCompanionAdXmlManager companionXmlManager2 =
-                initializeCompanionXmlManagerMock(250, 400, null, null, null, "HTMLResource");
+                initializeCompanionXmlManagerMock(250, 400, null, null, null, "HTMLResource", null);
         // IFrame Resource
         final VastCompanionAdXmlManager companionXmlManager3 =
-                initializeCompanionXmlManagerMock(250, 400, null, null, "IFrameResource", null);
+                initializeCompanionXmlManagerMock(250, 400, null, null, "IFrameResource", null, null);
 
         VastCompanionAdConfig bestCompanionAd = subject.getBestCompanionAd(
                 Arrays.asList(companionXmlManager3, companionXmlManager2, companionXmlManager1),
@@ -651,10 +711,10 @@ public void getBestCompanionAd_withAllThreeResourceTypes_shouldReturnStaticResou
     public void getBestCompanionAd_withHTMLAndStaticResourceTypes_shouldReturnStaticResourceType() throws Exception {
         // Static Resource
         final VastCompanionAdXmlManager companionXmlManager1 =
-                initializeCompanionXmlManagerMock(400, 250, "StaticResource", "image/png", null, null);
+                initializeCompanionXmlManagerMock(400, 250, "StaticResource", "image/png", null, null, null);
         // HTML Resource
         final VastCompanionAdXmlManager companionXmlManager2 =
-                initializeCompanionXmlManagerMock(250, 400, null, null, null, "HTMLResource");
+                initializeCompanionXmlManagerMock(250, 400, null, null, null, "HTMLResource", null);
 
         VastCompanionAdConfig bestCompanionAd = subject.getBestCompanionAd(
                 Arrays.asList(companionXmlManager2, companionXmlManager1),
@@ -666,9 +726,9 @@ public void getBestCompanionAd_withHTMLAndStaticResourceTypes_shouldReturnStatic
     public void getBestCompanionAd_withInvalidStaticResource_withValidHtmlResource_shouldReturnHtmlResource() throws Exception {
         final VastCompanionAdXmlManager companionXmlManager1 =
                 initializeCompanionXmlManagerMock(400, 250, "StaticResource", "INVALID",
-                        "IFrameResource", null);
+                        "IFrameResource", null, null);
         final VastCompanionAdXmlManager companionXmlManager2 =
-                initializeCompanionXmlManagerMock(300, 400, null, null, null, "HTMLResource");
+                initializeCompanionXmlManagerMock(300, 400, null, null, null, "HTMLResource", null);
 
         VastCompanionAdConfig bestCompanionAd = subject.getBestCompanionAd(
                 Arrays.asList(companionXmlManager2, companionXmlManager1),
@@ -686,9 +746,9 @@ public void getBestCompanionAd_withCompanionAdTooSmall_shouldReturnCompanionAdWi
         // 305 x 305 is both fewer pixels (screen area) and a worse aspect ratio. It still should be
         // chosen because 240 is not wide enough to be considered for a companion ad
         final VastCompanionAdXmlManager companionXmlManager1 =
-                initializeCompanionXmlManagerMock(305, 305, "image_url1", "image/png", null, null);
+                initializeCompanionXmlManagerMock(305, 305, "image_url1", "image/png", null, null, null);
         final VastCompanionAdXmlManager companionXmlManager2 =
-                initializeCompanionXmlManagerMock(240, 400, "image_url2", "image/bmp", null, null);
+                initializeCompanionXmlManagerMock(240, 400, "image_url2", "image/bmp", null, null, null);
 
         VastCompanionAdConfig bestCompanionAd = subject.getBestCompanionAd(
                 Arrays.asList(companionXmlManager1, companionXmlManager2),
@@ -697,73 +757,493 @@ public void getBestCompanionAd_withCompanionAdTooSmall_shouldReturnCompanionAdWi
     }
 
     @Test
-    public void getScaledDimensions_withWidthLargerThanScreen_shouldScaleWidthAndHeight() throws Exception {
+    public void getSocialActionsCompanionAds_shouldReturnSocialActionsCompanionAds() throws Exception {
+        final VastCompanionAdXmlManager adsByXmlManager =
+                initializeCompanionXmlManagerMock(65, 20, null, "HTMLResource", null,
+                        "<p>Ads by</p>", "adsBy");
+        final VastCompanionAdXmlManager socialActionsXmlManager =
+                initializeCompanionXmlManagerMock(130, 30, null, "HTMLResource", null,
+                        "<p>Retweet Like</p>", "socialActions");
+
+        final Map<String, VastCompanionAdConfig> socialActionsCompanionAds =
+                subject.getSocialActionsCompanionAds(
+                        Arrays.asList(adsByXmlManager, socialActionsXmlManager));
+        final VastCompanionAdConfig adsByVastConfig = socialActionsCompanionAds.get("adsBy");
+        final VastCompanionAdConfig socialActionsVastConfig = socialActionsCompanionAds
+                .get("socialActions");
+
+        assertThat(adsByVastConfig.getWidth()).isEqualTo(65);
+        assertThat(adsByVastConfig.getHeight()).isEqualTo(20);
+        assertThat(adsByVastConfig.getVastResource().getResource()).isEqualTo("<p>Ads by</p>");
+        assertThat(socialActionsVastConfig.getWidth()).isEqualTo(130);
+        assertThat(socialActionsVastConfig.getHeight()).isEqualTo(30);
+        assertThat(socialActionsVastConfig.getVastResource().getResource())
+                .isEqualTo("<p>Retweet Like</p>");
+    }
+
+    @Test
+    public void getSocialActionsCompanionAds_withoutSocialActions_shouldNotReturnSocialActionsCompanionAds() throws Exception {
+        final VastCompanionAdXmlManager adsByXmlManager =
+                initializeCompanionXmlManagerMock(65, 20, null, "HTMLResource", null,
+                        "<p>Ads by</p>", "NOTadsBy");
+        final VastCompanionAdXmlManager socialActionsXmlManager =
+                initializeCompanionXmlManagerMock(130, 30, null, "HTMLResource", null,
+                        "<p>Retweet Like</p>", "NOTsocialActions");
+
+        final Map<String, VastCompanionAdConfig> socialActionsCompanionAds =
+                subject.getSocialActionsCompanionAds(
+                        Arrays.asList(adsByXmlManager, socialActionsXmlManager));
+
+        assertThat(socialActionsCompanionAds.size()).isEqualTo(0);
+    }
+
+    @Test
+    public void getSocialActionsCompanionAds_withoutHTMLResource_shouldNotReturnSocialActionsCompanionAds() throws Exception {
+        final VastCompanionAdXmlManager adsByXmlManager =
+                initializeCompanionXmlManagerMock(65, 20, null, "HTMLResource", null, null,
+                        "adsBy");
+        final VastCompanionAdXmlManager socialActionsXmlManager =
+                initializeCompanionXmlManagerMock(130, 30, null, "HTMLResource", null,
+                        null, "socialActions");
+
+        final Map<String, VastCompanionAdConfig> socialActionsCompanionAds =
+                subject.getSocialActionsCompanionAds(
+                        Arrays.asList(adsByXmlManager, socialActionsXmlManager));
+        final VastCompanionAdConfig adsByVastConfig = socialActionsCompanionAds.get("adsBy");
+        final VastCompanionAdConfig socialActionsVastConfig = socialActionsCompanionAds
+                .get("socialActions");
+
+        assertThat(socialActionsCompanionAds.size()).isEqualTo(0);
+    }
+
+    @Test
+    public void getSocialActionsCompanionAds_whenTooWide_shouldNotReturnSocialActionsCompanionAds() throws Exception {
+        final VastCompanionAdXmlManager adsByXmlManager =
+                initializeCompanionXmlManagerMock(76, 20, null, "HTMLResource", null,
+                        "<p>Ads by</p>", "adsBy");
+        final VastCompanionAdXmlManager socialActionsXmlManager =
+                initializeCompanionXmlManagerMock(151, 30, null, "HTMLResource", null,
+                        "<p>Retweet Like</p>", "socialActions");
+
+        final Map<String, VastCompanionAdConfig> socialActionsCompanionAds =
+                subject.getSocialActionsCompanionAds(
+                        Arrays.asList(adsByXmlManager, socialActionsXmlManager));
+
+        assertThat(socialActionsCompanionAds.size()).isEqualTo(0);
+    }
+
+    @Test
+    public void getSocialActionsCompanionAds_whenTooTall_shouldNotReturnSocialActionsCompanionAds() throws Exception {
+        final VastCompanionAdXmlManager adsByXmlManager =
+                initializeCompanionXmlManagerMock(65, 51, null, "HTMLResource", null,
+                        "<p>Ads by</p>", "adsBy");
+        final VastCompanionAdXmlManager socialActionsXmlManager =
+                initializeCompanionXmlManagerMock(130, 51, null, "HTMLResource", null,
+                        "<p>Retweet Like</p>", "socialActions");
+
+        final Map<String, VastCompanionAdConfig> socialActionsCompanionAds =
+                subject.getSocialActionsCompanionAds(
+                        Arrays.asList(adsByXmlManager, socialActionsXmlManager));
+
+        assertThat(socialActionsCompanionAds.size()).isEqualTo(0);
+    }
+
+    @Test
+    public void evaluateVastXmlManager_withSocialActions_shouldKeepSocialActionsFromInLineAndNotOverwriteFromWrapper() throws Exception {
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING);
+        VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(
+                TEST_VAST_XML_STRING, new ArrayList<VastTracker>());
+
+        VastCompanionAdConfig adsByCompanionAd = vastVideoConfig.getSocialActionsCompanionAds()
+                .get(VastXmlManagerAggregator.ADS_BY_AD_SLOT_ID);
+        assertThat(adsByCompanionAd.getVastResource().getType())
+                .isEqualTo(VastResource.Type.HTML_RESOURCE);
+        assertThat(adsByCompanionAd.getVastResource().getResource().trim())
+                .isEqualTo(
+                        "<link rel=\"stylesheet\" href=\"https://ton.twimg.com/exchange-media/staging/video_companions_style-29c86cb8e4193a6c4da8.css\">" +
+                                "                                    <div class=\"ads-by-twitter\">" +
+                                "                                    Ads by <div class=\"larry\"></div>" +
+                                "                                    </div>");
+        VastCompanionAdConfig socialActionsCompanionAd = vastVideoConfig
+                .getSocialActionsCompanionAds()
+                .get(VastXmlManagerAggregator.SOCIAL_ACTIONS_AD_SLOT_ID);
+        assertThat(socialActionsCompanionAd.getVastResource()
+                .getType()).isEqualTo(VastResource.Type.HTML_RESOURCE);
+        assertThat(socialActionsCompanionAd.getVastResource().getResource().trim())
+        .isEqualTo("<link rel=\"stylesheet\" href=\"https://ton.twimg.com/exchange-media/staging/video_companions_style-29c86cb8e4193a6c4da8.css\">" +
+                "                                    <div class=\"social-actions\">" +
+                "                                    <a href=\"mopubshare://tweet?screen_name=frappuccino&tweet_id=590877845037056000\" class=\"retweet-button\"><div class=\"icon\"></div>310&nbsp;</a>" +
+                "                                    <a href=\"twitter://intent/favorite?id=590877845037056000\" class=\"like-button\"><div class=\"icon\"></div>1118&nbsp;</a>" +
+                "                                    </div>");
+    }
+
+    @Test
+    public void
+    getScaledDimensions_withStaticResource_withWidthLargerThanScreen_shouldScaleWidthAndHeight() throws Exception {
         // Default screen width is 480, height is 800
         final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
         assertThat(display.getWidth()).isEqualTo(480);
         assertThat(display.getHeight()).isEqualTo(800);
 
         // Width and height are evaluated in landscape
-        Point point = subject.getScaledDimensions(1600, 400);
+        Point landscapePoint = subject.getScaledDimensions(1600, 400,
+                VastResource.Type.STATIC_RESOURCE,
+                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
+        assertThat(landscapePoint.x).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(landscapePoint.y).isEqualTo(200 - VastVideoViewController.WEBVIEW_PADDING);
 
-        assertThat(point.x).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
-        assertThat(point.y).isEqualTo(200 - VastVideoViewController.WEBVIEW_PADDING);
+        // Width and height are evaluated in portrait
+        Point portraitPoint = subject.getScaledDimensions(960, 600,
+                VastResource.Type.STATIC_RESOURCE,
+                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
+        assertThat(portraitPoint.x).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(portraitPoint.y).isEqualTo(300 - VastVideoViewController.WEBVIEW_PADDING);
     }
 
     @Test
-    public void getScaledDimensions_withHeightLargerThanScreen_shouldScaleWidthAndHeight() throws Exception {
+    public void getScaledDimensions_withStaticResource_withHeightLargerThanScreen_shouldScaleWidthAndHeight() throws Exception {
         // Default screen width is 480, height is 800
         final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
         assertThat(display.getWidth()).isEqualTo(480);
         assertThat(display.getHeight()).isEqualTo(800);
 
         // Width and height are evaluated in landscape
-        Point point = subject.getScaledDimensions(400, 960);
+        Point landscapePoint = subject.getScaledDimensions(400, 960,
+                VastResource.Type.STATIC_RESOURCE,
+                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
+        assertThat(landscapePoint.x).isEqualTo(200 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(landscapePoint.y).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
 
-        assertThat(point.x).isEqualTo(200 - VastVideoViewController.WEBVIEW_PADDING);
-        assertThat(point.y).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
+        // Width and height are evaluated in portrait
+        Point portraitPoint = subject.getScaledDimensions(400, 1600,
+                VastResource.Type.STATIC_RESOURCE,
+                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
+        assertThat(portraitPoint.x).isEqualTo(200 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(portraitPoint.y).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
     }
 
     @Test
-    public void getScaledDimensions_withWidthAndHeightSmallerThanScreen_shouldNotScaleWidthAndHeight() throws Exception {
+    public void getScaledDimensions_withStaticResource_withWidthAndHeightEqualToScreen_shouldNotScaleWidthAndHeight() throws Exception {
         // Default screen width is 480, height is 800
         final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
         assertThat(display.getWidth()).isEqualTo(480);
         assertThat(display.getHeight()).isEqualTo(800);
 
         // Width and height are evaluated in landscape
-        Point point = subject.getScaledDimensions(800, 480);
+        Point landscapePoint = subject.getScaledDimensions(
+                800 - VastVideoViewController.WEBVIEW_PADDING,
+                480 - VastVideoViewController.WEBVIEW_PADDING,
+                VastResource.Type.STATIC_RESOURCE,
+                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
+        assertThat(landscapePoint.x).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(landscapePoint.y).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
+
+        // Width and height are evaluated in portrait
+        Point portraitPoint = subject.getScaledDimensions(
+                480 - VastVideoViewController.WEBVIEW_PADDING,
+                800 - VastVideoViewController.WEBVIEW_PADDING,
+                VastResource.Type.STATIC_RESOURCE,
+                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
+        assertThat(portraitPoint.x).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(portraitPoint.y).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
+    }
+
+    @Test
+    public void getScaledDimensions_withStaticResource_withWidthAdjustedToLessThanZero_shouldNotScaleWidthAndHeight() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(
+                Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Width and height are evaluated in landscape
+        Point landscapePoint = subject.getScaledDimensions(1600, 2,
+                VastResource.Type.STATIC_RESOURCE,
+                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
+        assertThat(landscapePoint.x).isEqualTo(1600);
+        assertThat(landscapePoint.y).isEqualTo(2);
 
-        assertThat(point.x).isEqualTo(800);
-        assertThat(point.y).isEqualTo(480);
+        // Width and height are evaluated in portrait
+        Point portraitPoint = subject.getScaledDimensions(1600, 2,
+                VastResource.Type.STATIC_RESOURCE,
+                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
+        assertThat(portraitPoint.x).isEqualTo(1600);
+        assertThat(portraitPoint.y).isEqualTo(2);
+    }
+
+    @Test
+    public void getScaledDimensions_withStaticResource_withHeightAdjustedToLessThanZero_shouldNotScaleWidthAndHeight() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Width and height are evaluated in landscape
+        Point landscapePoint = subject.getScaledDimensions(2, 960,
+                VastResource.Type.STATIC_RESOURCE,
+                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
+        assertThat(landscapePoint.x).isEqualTo(2);
+        assertThat(landscapePoint.y).isEqualTo(960);
+
+        // Width and height are evaluated in portrait
+        Point portraitPoint = subject.getScaledDimensions(2, 960,
+                VastResource.Type.STATIC_RESOURCE,
+                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
+        assertThat(portraitPoint.x).isEqualTo(2);
+        assertThat(portraitPoint.y).isEqualTo(960);
+    }
+
+    @Test
+    public void getScaledDimensions_withHTMLResource_withWidthLargerThanScreen_shouldScaleWidthAndHeight()
+            throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Width and height are evaluated in landscape
+        Point landscapePoint = subject.getScaledDimensions(1600, 400,
+                VastResource.Type.HTML_RESOURCE,
+                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
+        assertThat(landscapePoint.x).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(landscapePoint.y).isEqualTo(400 - VastVideoViewController.WEBVIEW_PADDING);
+
+        // Width and height are evaluated in portrait
+        Point portraitPoint = subject.getScaledDimensions(960, 600,
+                VastResource.Type.HTML_RESOURCE,
+                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
+        assertThat(portraitPoint.x).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(portraitPoint.y).isEqualTo(600 - VastVideoViewController.WEBVIEW_PADDING);
     }
 
     @Test
-    public void getScaledDimensions_withWidthAdjustedToLessThanZero_shouldNotScaleWidthAndHeight() throws Exception {
+    public void getScaledDimensions_withHTMLResource_withHeightLargerThanScreen_shouldScaleWidthAndHeight() throws Exception {
         // Default screen width is 480, height is 800
         final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
         assertThat(display.getWidth()).isEqualTo(480);
         assertThat(display.getHeight()).isEqualTo(800);
 
         // Width and height are evaluated in landscape
-        Point point = subject.getScaledDimensions(1600, 2);
+        Point landscapePoint = subject.getScaledDimensions(400, 960,
+                VastResource.Type.HTML_RESOURCE,
+                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
+        assertThat(landscapePoint.x).isEqualTo(400 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(landscapePoint.y).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
 
-        assertThat(point.x).isEqualTo(1600);
-        assertThat(point.y).isEqualTo(2);
+        // Width and height are evaluated in portrait
+        Point portraitPoint = subject.getScaledDimensions(400, 1600,
+                VastResource.Type.HTML_RESOURCE,
+                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
+        assertThat(portraitPoint.x).isEqualTo(400 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(portraitPoint.y).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
     }
 
     @Test
-    public void getScaledDimensions_withHeightAdjustedToLessThanZero_shouldNotScaleWidthAndHeight() throws Exception {
+    public void getScaledDimensions_withHTMLResource_withWidthAdjustedToLessThanZero_shouldNotScaleWidthAndHeight() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(
+                Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Width and height are evaluated in landscape
+        Point landscapePoint = subject.getScaledDimensions(1600, 2,
+                VastResource.Type.HTML_RESOURCE,
+                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
+        assertThat(landscapePoint.x).isEqualTo(1600);
+        assertThat(landscapePoint.y).isEqualTo(2);
+
+        // Width and height are evaluated in portrait
+        Point portraitPoint = subject.getScaledDimensions(1600, 2,
+                VastResource.Type.HTML_RESOURCE,
+                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
+        assertThat(portraitPoint.x).isEqualTo(1600);
+        assertThat(portraitPoint.y).isEqualTo(2);
+    }
+
+    @Test
+    public void getScaledDimensions_withHTMLResource_withHeightAdjustedToLessThanZero_shouldNotScaleWidthAndHeight() throws Exception {
         // Default screen width is 480, height is 800
         final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
         assertThat(display.getWidth()).isEqualTo(480);
         assertThat(display.getHeight()).isEqualTo(800);
 
         // Width and height are evaluated in landscape
-        Point point = subject.getScaledDimensions(2, 960);
+        Point landscapePoint = subject.getScaledDimensions(2, 960,
+                VastResource.Type.HTML_RESOURCE,
+                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
+        assertThat(landscapePoint.x).isEqualTo(2);
+        assertThat(landscapePoint.y).isEqualTo(960);
 
-        assertThat(point.x).isEqualTo(2);
-        assertThat(point.y).isEqualTo(960);
+        // Width and height are evaluated in portrait
+        Point portraitPoint = subject.getScaledDimensions(2, 960,
+                VastResource.Type.HTML_RESOURCE,
+                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
+        assertThat(portraitPoint.x).isEqualTo(2);
+        assertThat(portraitPoint.y).isEqualTo(960);
+    }
+
+    @Test
+    public void getScaledDimensions_withHTMLResource_withWidthAndHeightEqualToScreen_shouldNotScaleWidthAndHeight() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Width and height are evaluated in landscape
+        Point landscapePoint = subject.getScaledDimensions(
+                800 - VastVideoViewController.WEBVIEW_PADDING,
+                480 - VastVideoViewController.WEBVIEW_PADDING,
+                VastResource.Type.HTML_RESOURCE,
+                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
+        assertThat(landscapePoint.x).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(landscapePoint.y).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
+
+        // Width and height are evaluated in portrait
+        Point portraitPoint = subject.getScaledDimensions(
+                480 - VastVideoViewController.WEBVIEW_PADDING,
+                800 - VastVideoViewController.WEBVIEW_PADDING,
+                VastResource.Type.HTML_RESOURCE,
+                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
+        assertThat(portraitPoint.x).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(portraitPoint.y).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
+    }
+
+    @Test
+    public void getScaledDimensions_withHTMLResource_withWidthAndHeightLargerThanScreen_shouldScaleWidthAndHeight() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Width and height are evaluated in landscape
+        Point landscapePoint = subject.getScaledDimensions(5000, 5000,
+                VastResource.Type.HTML_RESOURCE,
+                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
+        assertThat(landscapePoint.x).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(landscapePoint.y).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
+
+        // Width and height are evaluated in portrait
+        Point portraitPoint = subject.getScaledDimensions(1337, 4200,
+                VastResource.Type.HTML_RESOURCE,
+                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
+        assertThat(portraitPoint.x).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(portraitPoint.y).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
+    }
+
+    @Test
+    public void getScaledDimensions_withIFrameResource_withWidthLargerThanScreen_shouldScaleWidthAndHeight() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Width and height are evaluated in landscape
+        Point landscapePoint = subject.getScaledDimensions(1600, 400,
+                VastResource.Type.IFRAME_RESOURCE,
+                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
+        assertThat(landscapePoint.x).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(landscapePoint.y).isEqualTo(200 - VastVideoViewController.WEBVIEW_PADDING);
+
+        // Width and height are evaluated in portrait
+        Point portraitPoint = subject.getScaledDimensions(960, 600,
+                VastResource.Type.IFRAME_RESOURCE,
+                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
+        assertThat(portraitPoint.x).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(portraitPoint.y).isEqualTo(300 - VastVideoViewController.WEBVIEW_PADDING);
+    }
+
+    @Test
+    public void getScaledDimensions_withIFrameResource_withHeightLargerThanScreen_shouldScaleWidthAndHeight() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Width and height are evaluated in landscape
+        Point landscapePoint = subject.getScaledDimensions(400, 960,
+                VastResource.Type.IFRAME_RESOURCE,
+                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
+        assertThat(landscapePoint.x).isEqualTo(200 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(landscapePoint.y).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
+
+        // Width and height are evaluated in portrait
+        Point portraitPoint = subject.getScaledDimensions(400, 1600,
+                VastResource.Type.IFRAME_RESOURCE,
+                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
+        assertThat(portraitPoint.x).isEqualTo(200 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(portraitPoint.y).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
+    }
+
+    @Test
+    public void getScaledDimensions_withIFrameResource_withWidthAndHeightEqualToScreen_shouldNotScaleWidthAndHeight() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Width and height are evaluated in landscape
+        Point landscapePoint = subject.getScaledDimensions(
+                800 - VastVideoViewController.WEBVIEW_PADDING,
+                480 - VastVideoViewController.WEBVIEW_PADDING,
+                VastResource.Type.IFRAME_RESOURCE,
+                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
+        assertThat(landscapePoint.x).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(landscapePoint.y).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
+
+        // Width and height are evaluated in portrait
+        Point portraitPoint = subject.getScaledDimensions(
+                480 - VastVideoViewController.WEBVIEW_PADDING,
+                800 - VastVideoViewController.WEBVIEW_PADDING,
+                VastResource.Type.IFRAME_RESOURCE,
+                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
+        assertThat(portraitPoint.x).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(portraitPoint.y).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
+    }
+
+    @Test
+    public void getScaledDimensions_withIFrameResource_withWidthAdjustedToLessThanZero_shouldNotScaleWidthAndHeight() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(
+                Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Width and height are evaluated in landscape
+        Point landscapePoint = subject.getScaledDimensions(1600, 2,
+                VastResource.Type.IFRAME_RESOURCE,
+                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
+        assertThat(landscapePoint.x).isEqualTo(1600);
+        assertThat(landscapePoint.y).isEqualTo(2);
+
+        // Width and height are evaluated in portrait
+        Point portraitPoint = subject.getScaledDimensions(1600, 2,
+                VastResource.Type.IFRAME_RESOURCE,
+                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
+        assertThat(portraitPoint.x).isEqualTo(1600);
+        assertThat(portraitPoint.y).isEqualTo(2);
+    }
+
+    @Test
+    public void getScaledDimensions_withIFrameResource_withHeightAdjustedToLessThanZero_shouldNotScaleWidthAndHeight() throws Exception {
+        // Default screen width is 480, height is 800
+        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
+        assertThat(display.getWidth()).isEqualTo(480);
+        assertThat(display.getHeight()).isEqualTo(800);
+
+        // Width and height are evaluated in landscape
+        Point landscapePoint = subject.getScaledDimensions(2, 960,
+                VastResource.Type.IFRAME_RESOURCE,
+                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
+        assertThat(landscapePoint.x).isEqualTo(2);
+        assertThat(landscapePoint.y).isEqualTo(960);
+
+        // Width and height are evaluated in portrait
+        Point portraitPoint = subject.getScaledDimensions(2, 960,
+                VastResource.Type.IFRAME_RESOURCE,
+                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
+        assertThat(portraitPoint.x).isEqualTo(2);
+        assertThat(portraitPoint.y).isEqualTo(960);
     }
 
     @Test
@@ -919,10 +1399,10 @@ public void getBestIcon_withInvalidStaticResource_withValidHtmlResource_shouldRe
     @Test
     public void evaluateVastXmlManager_withStandardInline_shouldReturnValidVastVideoConfiguration() {
         VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(
-                TEST_NESTED_VAST_XML_STRING, HttpClient.getHttpClient(), new ArrayList<VastTracker>());
+                TEST_NESTED_VAST_XML_STRING, new ArrayList<VastTracker>());
 
         assertThat(VastUtils.vastTrackersToStrings(vastVideoConfig.getImpressionTrackers()))
-                .containsOnly("http://rtb-test.dev.tapad.com:8080/creative/imp" +
+                .containsOnly("https://rtb-test.dev.tapad.com:8080/creative/imp" +
                         ".png?ts=1374099035457&svid=1&creative_id=30731&ctx_type=InApp&ta_pinfo" +
                         "=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&liverail_cp=1");
         assertThat(vastVideoConfig.getFractionalTrackers()).isEmpty();
@@ -934,13 +1414,13 @@ public void evaluateVastXmlManager_withStandardInline_shouldReturnValidVastVideo
         assertThat(vastVideoConfig.getSkipTrackers()).isEmpty();
         assertThat(vastVideoConfig.getClickTrackers()).isEmpty();
         assertThat(vastVideoConfig.getClickThroughUrl()).isEqualTo(
-                "http://rtb-test.dev.tapad" +
-                        ".com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com");
+                "https://rtb-test.dev.tapad" +
+                        ".com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=https%3A%2F%2Ftapad.com");
         assertThat(vastVideoConfig.getNetworkMediaFileUrl()).isEqualTo(
                 "https://s3.amazonaws.com/mopub-vast/tapad-video.mp4");
         assertThat(vastVideoConfig.getSkipOffsetString()).isNull();
         assertThat(VastUtils.vastTrackersToStrings(vastVideoConfig.getErrorTrackers()))
-                .containsOnly("http://nestedInLineErrorOne", "http://nestedInLineErrorTwo");
+                .containsOnly("https://nestedInLineErrorOne", "https://nestedInLineErrorTwo");
 
         VastCompanionAdConfig[] companionAds = new VastCompanionAdConfig[2];
         companionAds[0] = vastVideoConfig.getVastCompanionAd(
@@ -951,18 +1431,18 @@ public void evaluateVastXmlManager_withStandardInline_shouldReturnValidVastVideo
             assertThat(companionAd.getWidth()).isEqualTo(300);
             assertThat(companionAd.getHeight()).isEqualTo(250);
             assertThat(companionAd.getVastResource().getResource())
-                    .isEqualTo("http://demo.tremormedia.com/proddev/vast/Blistex1.jpg");
+                    .isEqualTo("https://demo.tremormedia.com/proddev/vast/Blistex1.jpg");
             assertThat(companionAd.getVastResource().getType())
                     .isEqualTo(VastResource.Type.STATIC_RESOURCE);
             assertThat(companionAd.getVastResource().getCreativeType())
                     .isEqualTo(VastResource.CreativeType.IMAGE);
-            assertThat(companionAd.getClickThroughUrl()).isEqualTo("http://www.tremormedia.com");
+            assertThat(companionAd.getClickThroughUrl()).isEqualTo("https://www.tremormedia.com");
             assertThat(VastUtils.vastTrackersToStrings(companionAd.getClickTrackers()))
-                    .containsOnly("http://companionClickTracking1",
-                            "http://companionClickTracking2");
+                    .containsOnly("https://companionClickTracking1",
+                            "https://companionClickTracking2");
             assertThat(VastUtils.vastTrackersToStrings(companionAd.getCreativeViewTrackers()))
-                    .containsExactly("http://myTrackingURL/firstCompanionCreativeView",
-                            "http://myTrackingURL/secondCompanionCreativeView");
+                    .containsExactly("https://myTrackingURL/firstCompanionCreativeView",
+                            "https://myTrackingURL/secondCompanionCreativeView");
         }
 
         VastIconConfig vastIconConfig = vastVideoConfig.getVastIconConfig();
@@ -981,64 +1461,64 @@ public void evaluateVastXmlManager_withStandardInline_shouldReturnValidVastVideo
     }
 
     @Test
-    public void evaluateVastXmlManager_withAWrapperToAnInline_shouldReturnValidVastVideoConfiguration() {
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
+    public void evaluateVastXmlManager_withAWrapperToAnInline_shouldReturnValidVastVideoConfiguration() throws Exception {
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING);
         VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(
-                TEST_VAST_XML_STRING, HttpClient.getHttpClient(), new ArrayList<VastTracker>());
+                TEST_VAST_XML_STRING, new ArrayList<VastTracker>());
 
         assertThat(VastUtils.vastTrackersToStrings(vastVideoConfig.getImpressionTrackers()))
                 .containsOnly(
-                        "http://rtb-test.dev.tapad.com:8080/creative/imp" +
+                        "https://rtb-test.dev.tapad.com:8080/creative/imp" +
                                 ".png?ts=1374099035457&svid=1&creative_id=30731&ctx_type=InApp" +
                                 "&ta_pinfo" +
                                 "=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&liverail_cp=1",
-                        "http://myTrackingURL/wrapper/impression1",
-                        "http://myTrackingURL/wrapper/impression2",
-                        "http://www.mopub.com/imp1",
-                        "http://www.mopub.com/imp2");
+                        "https://myTrackingURL/wrapper/impression1",
+                        "https://myTrackingURL/wrapper/impression2",
+                        "https://www.mopub.com/imp1",
+                        "https://www.mopub.com/imp2");
 
         assertThat(vastVideoConfig.getFractionalTrackers()).hasSize(3);
         assertThat(
                 vastVideoConfig.getFractionalTrackers().get(0)).isEqualsToByComparingFields(
-                new VastFractionalProgressTracker("http://myTrackingURL/wrapper/firstQuartile",
+                new VastFractionalProgressTracker("https://myTrackingURL/wrapper/firstQuartile",
                         0.25f));
         assertThat(
                 vastVideoConfig.getFractionalTrackers().get(1)).isEqualsToByComparingFields(
-                new VastFractionalProgressTracker("http://myTrackingURL/wrapper/midpoint",
+                new VastFractionalProgressTracker("https://myTrackingURL/wrapper/midpoint",
                         0.5f));
         assertThat(
                 vastVideoConfig.getFractionalTrackers().get(2)).isEqualsToByComparingFields(
-                new VastFractionalProgressTracker("http://myTrackingURL/wrapper/thirdQuartile",
+                new VastFractionalProgressTracker("https://myTrackingURL/wrapper/thirdQuartile",
                         0.75f));
 
         assertThat(vastVideoConfig.getAbsoluteTrackers().size()).isEqualTo(2);
         assertThat(vastVideoConfig.getAbsoluteTrackers().get(0)).isEqualsToByComparingFields(
-                new VastAbsoluteProgressTracker("http://myTrackingURL/wrapper/creativeView", 0));
+                new VastAbsoluteProgressTracker("https://myTrackingURL/wrapper/creativeView", 0));
         assertThat(vastVideoConfig.getAbsoluteTrackers().get(1)).isEqualsToByComparingFields(
-                new VastAbsoluteProgressTracker("http://myTrackingURL/wrapper/start", 2000));
+                new VastAbsoluteProgressTracker("https://myTrackingURL/wrapper/start", 2000));
 
         assertThat(VastUtils.vastTrackersToStrings(vastVideoConfig.getPauseTrackers()))
-                .containsOnly("http://myTrackingURL/wrapper/pause");
+                .containsOnly("https://myTrackingURL/wrapper/pause");
         assertThat(VastUtils.vastTrackersToStrings(vastVideoConfig.getResumeTrackers()))
-                .containsOnly("http://myTrackingURL/wrapper/resume");
+                .containsOnly("https://myTrackingURL/wrapper/resume");
         assertThat(VastUtils.vastTrackersToStrings(vastVideoConfig.getCompleteTrackers()))
-                .containsOnly("http://myTrackingURL/wrapper/complete");
+                .containsOnly("https://myTrackingURL/wrapper/complete");
         assertThat(VastUtils.vastTrackersToStrings(vastVideoConfig.getErrorTrackers()))
                 .containsExactly(
-                        "http://wrapperErrorOne?errorcode=[ERRORCODE]",
-                        "http://wrapperErrorTwo?errorcode=[ERRORCODE]",
-                        "http://nestedInLineErrorOne",
-                        "http://nestedInLineErrorTwo");
+                        "https://wrapperErrorOne?errorcode=[ERRORCODE]",
+                        "https://wrapperErrorTwo?errorcode=[ERRORCODE]",
+                        "https://nestedInLineErrorOne",
+                        "https://nestedInLineErrorTwo");
 
         assertThat(vastVideoConfig.getCloseTrackers()).isEmpty();
         assertThat(vastVideoConfig.getSkipTrackers()).isEmpty();
 
         assertThat(VastUtils.vastTrackersToStrings(vastVideoConfig.getClickTrackers()))
-                .containsOnly("http://myTrackingURL/wrapper/click");
+                .containsOnly("https://myTrackingURL/wrapper/click");
 
         assertThat(vastVideoConfig.getClickThroughUrl()).isEqualTo(
-                "http://rtb-test.dev.tapad" +
-                        ".com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com");
+                "https://rtb-test.dev.tapad" +
+                        ".com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=https%3A%2F%2Ftapad.com");
         assertThat(vastVideoConfig.getNetworkMediaFileUrl()).isEqualTo(
                 "https://s3.amazonaws.com/mopub-vast/tapad-video.mp4");
         assertThat(vastVideoConfig.getSkipOffsetString()).isNull();
@@ -1052,21 +1532,21 @@ public void evaluateVastXmlManager_withAWrapperToAnInline_shouldReturnValidVastV
             assertThat(companionAd.getWidth()).isEqualTo(300);
             assertThat(companionAd.getHeight()).isEqualTo(250);
             assertThat(companionAd.getVastResource().getResource())
-                    .isEqualTo("http://demo.tremormedia.com/proddev/vast/Blistex1.jpg");
+                    .isEqualTo("https://demo.tremormedia.com/proddev/vast/Blistex1.jpg");
             assertThat(companionAd.getVastResource().getType())
                     .isEqualTo(VastResource.Type.STATIC_RESOURCE);
             assertThat(companionAd.getVastResource().getCreativeType())
                     .isEqualTo(VastResource.CreativeType.IMAGE);
-            assertThat(companionAd.getClickThroughUrl()).isEqualTo("http://www.tremormedia.com");
+            assertThat(companionAd.getClickThroughUrl()).isEqualTo("https://www.tremormedia.com");
             assertThat(VastUtils.vastTrackersToStrings(companionAd.getClickTrackers()))
-                    .containsOnly("http://companionClickTracking1",
-                            "http://companionClickTracking2",
-                            "http://noResourceWrapperCompanionClickTracking1");
+                    .containsOnly("https://companionClickTracking1",
+                            "https://companionClickTracking2",
+                            "https://noResourceWrapperCompanionClickTracking1");
             assertThat(VastUtils.vastTrackersToStrings(companionAd.getCreativeViewTrackers()))
-                    .containsExactly("http://myTrackingURL/firstCompanionCreativeView",
-                            "http://myTrackingURL/secondCompanionCreativeView",
-                            "http://firstNoResourceWrapperCompanionCreativeView",
-                            "http://secondNoResourceWrapperCompanionCreativeView");
+                    .containsExactly("https://myTrackingURL/firstCompanionCreativeView",
+                            "https://myTrackingURL/secondCompanionCreativeView",
+                            "https://firstNoResourceWrapperCompanionCreativeView",
+                            "https://secondNoResourceWrapperCompanionCreativeView");
         }
 
         VastIconConfig vastIconConfig = vastVideoConfig.getVastIconConfig();
@@ -1087,17 +1567,18 @@ public void evaluateVastXmlManager_withAWrapperToAnInline_shouldReturnValidVastV
     @Test
     public void evaluateVastXmlManager_withInvalidXml_shouldReturnNullVastVideoConfiguration() {
         VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(
-                TEST_VAST_BAD_NEST_URL_XML_STRING, HttpClient.getHttpClient(),
+                TEST_VAST_BAD_NEST_URL_XML_STRING,
                 new ArrayList<VastTracker>());
 
         assertThat(vastVideoConfig).isNull();
     }
 
     @Test
-    public void evaluateVastXmlManager_withRedirectHavingNoCompanionAd_shouldReturnVastVideoConfigurationWithCompanionAdOfWrapper() {
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_NO_COMPANION_VAST_XML_STRING);
+    public void evaluateVastXmlManager_withRedirectHavingNoCompanionAd_shouldReturnVastVideoConfigurationWithCompanionAdOfWrapper() throws Exception {
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200,
+                TEST_NESTED_NO_COMPANION_VAST_XML_STRING);
         VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(
-                TEST_VAST_XML_STRING, HttpClient.getHttpClient(), new ArrayList<VastTracker>());
+                TEST_VAST_XML_STRING, new ArrayList<VastTracker>());
 
         VastCompanionAdConfig[] companionAds = new VastCompanionAdConfig[2];
         companionAds[0] = vastVideoConfig.getVastCompanionAd(
@@ -1107,28 +1588,64 @@ public void evaluateVastXmlManager_withRedirectHavingNoCompanionAd_shouldReturnV
         for (VastCompanionAdConfig companionAd : companionAds) {
             assertThat(companionAd.getWidth()).isEqualTo(456);
             assertThat(companionAd.getHeight()).isEqualTo(250);
-            assertThat(companionAd.getVastResource().getResource()).isEqualTo("http" +
+            assertThat(companionAd.getVastResource().getResource()).isEqualTo("https" +
                     "://wrapperCompanionAdStaticResource");
             assertThat(companionAd.getClickThroughUrl()).isEqualTo(
-                    "http://wrapperCompanionClickThrough");
+                    "https://wrapperCompanionClickThrough");
             assertThat(VastUtils.vastTrackersToStrings(companionAd.getClickTrackers()))
-                    .containsOnly("http://wrapperCompanionClickTracking");
+                    .containsOnly("https://wrapperCompanionClickTracking");
             assertThat(VastUtils.vastTrackersToStrings(companionAd.getCreativeViewTrackers()))
-                    .containsExactly("http://firstWrapperCompanionCreativeView",
-                            "http://secondWrapperCompanionCreativeView");
+                    .containsExactly("https://firstWrapperCompanionCreativeView",
+                            "https://secondWrapperCompanionCreativeView");
         }
     }
 
     @Test
     public void evaluateVastXmlManager_withSequenceNumbers_shouldReturnVastVideoConfigurationWithNegativeSequenceNumber() {
         VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(
-                TEST_VAST_WITH_NEGATIVE_SEQUENCE_NUMBER_XML_STRING, HttpClient.getHttpClient(),
+                TEST_VAST_WITH_NEGATIVE_SEQUENCE_NUMBER_XML_STRING,
                 new ArrayList<VastTracker>());
 
         assertThat(vastVideoConfig.getNetworkMediaFileUrl()).isEqualTo(
-                "http://negativeSequence");
+                "https://negativeSequence");
         assertThat(VastUtils.vastTrackersToStrings(vastVideoConfig.getImpressionTrackers()))
-                .containsOnly("http://negativeSequence");
+                .containsOnly("https://negativeSequence");
+    }
+
+    @Test
+    public void evaluateVastXmlManager_withVideoViewabilityTrackerInLine_shouldReturnVastVideoConfigurationWithVideoViewabilityTracker() {
+        VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(
+                TEST_NESTED_NO_COMPANION_VAST_XML_STRING, new ArrayList<VastTracker>());
+
+        VideoViewabilityTracker tracker = vastVideoConfig.getVideoViewabilityTracker();
+        assertThat(tracker.getPercentViewable()).isEqualTo(70);
+        assertThat(tracker.getViewablePlaytimeMS()).isEqualTo(3500);
+        assertThat(tracker.getTrackingUrl()).isEqualTo("https://ad.server.com/impression/dot.png");
+    }
+
+    @Test
+    public void evaluateVastXmlManager_withVideoViewabilityTrackerInWrapper_shouldReturnVastVideoConfigurationWithVideoViewabilityTracker() throws Exception {
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING);
+        VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(TEST_VAST_XML_STRING,
+                new ArrayList<VastTracker>());
+
+        VideoViewabilityTracker tracker = vastVideoConfig.getVideoViewabilityTracker();
+        assertThat(tracker.getPercentViewable()).isEqualTo(50);
+        assertThat(tracker.getViewablePlaytimeMS()).isEqualTo(2500);
+        assertThat(tracker.getTrackingUrl()).isEqualTo("https://ad.server.com/impression/dot.gif");
+    }
+
+    @Test
+    public void evaluateVastXmlManager_withVideoViewabilityTrackerBothInWrapperAndInLine_shouldReturnVastVideoConfigurationWithVideoViewabilityTrackerFromInLine() throws Exception {
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200,
+                TEST_NESTED_NO_COMPANION_VAST_XML_STRING);
+        VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(TEST_VAST_XML_STRING,
+                new ArrayList<VastTracker>());
+
+        VideoViewabilityTracker tracker = vastVideoConfig.getVideoViewabilityTracker();
+        assertThat(tracker.getPercentViewable()).isEqualTo(70);
+        assertThat(tracker.getViewablePlaytimeMS()).isEqualTo(3500);
+        assertThat(tracker.getTrackingUrl()).isEqualTo("https://ad.server.com/impression/dot.png");
     }
 
     @Test
@@ -1174,55 +1691,55 @@ public void isValidSequenceNumber_withTwo_shouldReturnFalse() {
     @Test
     public void evaluateVastXmlManager_withJustError_shouldReturnNullVastVideoConfiguration_shouldFireErrorTracker() {
         VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(
-                TEST_JUST_ERROR_XML_STRING, HttpClient.getHttpClient(),
+                TEST_JUST_ERROR_XML_STRING,
                 new ArrayList<VastTracker>());
 
         assertThat(vastVideoConfig).isNull();
-        verify(mockRequestQueue).add(argThat(isUrl("http://justErrorTracking?errorcode=900")));
+        verify(mockRequestQueue).add(argThat(isUrl("https://justErrorTracking?errorcode=900")));
         verifyNoMoreInteractions(mockRequestQueue);
     }
 
     @Test
-    public void evaluateVastXmlManager_withWrapperToJustError_shouldReturnNullVastVideoConfiguration_shouldFireErrorTrackers() {
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_JUST_ERROR_XML_STRING);
+    public void evaluateVastXmlManager_withWrapperToJustError_shouldReturnNullVastVideoConfiguration_shouldFireErrorTrackers() throws Exception {
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_JUST_ERROR_XML_STRING);
         VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(
-                TEST_VAST_XML_STRING, HttpClient.getHttpClient(), new ArrayList<VastTracker>());
+                TEST_VAST_XML_STRING, new ArrayList<VastTracker>());
 
         assertThat(vastVideoConfig).isNull();
-        verify(mockRequestQueue).add(argThat(isUrl("http://justErrorTracking?errorcode=303")));
+        verify(mockRequestQueue).add(argThat(isUrl("https://justErrorTracking?errorcode=303")));
         verifyNoMoreInteractions(mockRequestQueue);
     }
 
     @Test
-    public void evaluateVastXmlManager_withWrapperToVastXmlError_shouldReturnNullVastVideoConfiguration_shouldFireErrorTracker() {
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_INVALID_VAST_XML_STRING);
+    public void evaluateVastXmlManager_withWrapperToVastXmlError_shouldReturnNullVastVideoConfiguration_shouldFireErrorTracker() throws Exception {
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_INVALID_VAST_XML_STRING);
         VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(
-                TEST_VAST_XML_STRING, HttpClient.getHttpClient(), new ArrayList<VastTracker>());
+                TEST_VAST_XML_STRING, new ArrayList<VastTracker>());
 
         assertThat(vastVideoConfig).isNull();
         verifyNoMoreInteractions(mockRequestQueue);
     }
 
     @Test
-    public void evaluateVastXmlManager_withWrapperToInvalidXml_shouldReturnNullVastVideoConfiguration_shouldFireErrorTracker() {
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_INVALID_XML_STRING);
+    public void evaluateVastXmlManager_withWrapperToInvalidXml_shouldReturnNullVastVideoConfiguration_shouldFireErrorTracker() throws Exception {
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_INVALID_XML_STRING);
         VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(
-                TEST_VAST_XML_STRING, HttpClient.getHttpClient(), new ArrayList<VastTracker>());
+                TEST_VAST_XML_STRING, new ArrayList<VastTracker>());
 
         assertThat(vastVideoConfig).isNull();
-        verify(mockRequestQueue).add(argThat(isUrl("http://wrapperErrorOne?errorcode=100")));
-        verify(mockRequestQueue).add(argThat(isUrl("http://wrapperErrorTwo?errorcode=100")));
+        verify(mockRequestQueue).add(argThat(isUrl("https://wrapperErrorOne?errorcode=100")));
+        verify(mockRequestQueue).add(argThat(isUrl("https://wrapperErrorTwo?errorcode=100")));
         verifyNoMoreInteractions(mockRequestQueue);
     }
 
     @Test
     public void evaluateVastXmlManager_withWrapperToNoHttpResponse_shouldReturnNullVastVideoConfiguration_shouldFireErrorTracker() {
         VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(
-                TEST_VAST_XML_STRING, HttpClient.getHttpClient(), new ArrayList<VastTracker>());
+                TEST_VAST_XML_STRING, new ArrayList<VastTracker>());
 
         assertThat(vastVideoConfig).isNull();
-        verify(mockRequestQueue).add(argThat(isUrl("http://wrapperErrorOne?errorcode=301")));
-        verify(mockRequestQueue).add(argThat(isUrl("http://wrapperErrorTwo?errorcode=301")));
+        verify(mockRequestQueue).add(argThat(isUrl("https://wrapperErrorOne?errorcode=301")));
+        verify(mockRequestQueue).add(argThat(isUrl("https://wrapperErrorTwo?errorcode=301")));
         verifyNoMoreInteractions(mockRequestQueue);
     }
 
@@ -1245,10 +1762,12 @@ private VastCompanionAdXmlManager initializeCompanionXmlManagerMock(
             final String staticResource,
             final String staticResourceType,
             final String iFrameResource,
-            final String htmlResource) {
+            final String htmlResource,
+            final String adSlotId) {
         VastCompanionAdXmlManager companionXmlManager = mock(VastCompanionAdXmlManager.class);
         when(companionXmlManager.getWidth()).thenReturn(width);
         when(companionXmlManager.getHeight()).thenReturn(height);
+        when(companionXmlManager.getAdSlotId()).thenReturn(adSlotId);
 
         VastResourceXmlManager mockResourceXmlManager = initializeVastResourceXmlManagerMock(
                 staticResource,
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java
index b056537f..3f2a1ddd 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java
@@ -7,6 +7,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
 import org.xml.sax.SAXException;
 
 import java.io.IOException;
@@ -17,9 +18,10 @@
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class VastXmlManagerTest {
     private static final String XML_HEADER_TAG = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
-    private static final String TEST_VAST_XML_STRING = "<VAST xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" version=\"2.0\" xsi:noNamespaceSchemaLocation=\"vast.xsd\">" +
+    private static final String TEST_VAST_XML_STRING = "<VAST xmlns:xsi=\"https://www.w3.org/2001/XMLSchema-instance\" version=\"2.0\" xsi:noNamespaceSchemaLocation=\"vast.xsd\">" +
             "            <Ad id=\"223626102\">" +
             "                <InLine>" +
             "                    <AdSystem version=\"2.0\">DART_DFA</AdSystem>" +
@@ -28,12 +30,12 @@
             "                    <Survey/>" +
             "                    <Impression id=\"DART\">" +
             "                        <![CDATA[" +
-            "                        http://ad.doubleclick.net/imp;v7;x;223626102;0-0;0;47414672;0/0;30477563/30495440/1;;~aopt=0/0/ff/0;~cs=j%3fhttp://s0.2mdn.net/dot.gif" +
+            "                        https://ad.doubleclick.net/imp;v7;x;223626102;0-0;0;47414672;0/0;30477563/30495440/1;;~aopt=0/0/ff/0;~cs=j%3fhttp://s0.2mdn.net/dot.gif" +
             "                        ]]>" +
             "                    </Impression>" +
             "                    <Impression id=\"ThirdParty\">" +
             "                        <![CDATA[" +
-            "                        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145;sz=1x1;ord=2922389?" +
+            "                        https://ad.doubleclick.net/ad/N270.Process_Other/B3473145;sz=1x1;ord=2922389?" +
             "                        ]]>" +
             "                    </Impression>" +
             "                    <Creatives>" +
@@ -43,137 +45,137 @@
             "                                <TrackingEvents>" +
             "                                    <Tracking event=\"start\">" +
             "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
             "                                        ]]>" +
             "                                    </Tracking>" +
             "                                    <Tracking event=\"progress\" offset=\"13%\">" +
             "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
             "                                        ]]>" +
             "                                    </Tracking>" +
             "                                    <Tracking event=\"progress\" offset=\"01:01:10.300\">" +
             "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
             "                                        ]]>" +
             "                                    </Tracking>" +
             // Invalid tracking due to ambiguous offset.
             "                                    <Tracking event=\"progress\" offset=\"01:01\">" +
             "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
             "                                        ]]>" +
             "                                    </Tracking>" +
             // Invalid tracking due to a too-high percentage offset.
             "                                    <Tracking event=\"progress\" offset=\"113%\">" +
             "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
             "                                        ]]>" +
             "                                    </Tracking>" +
             // Invalid tracking due to a negative percentage offset.
             "                                    <Tracking event=\"progress\" offset=\"-113%\">" +
             "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
             "                                        ]]>" +
             "                                    </Tracking>" +
             // Invalid tracking due to a non-number offset
             "                                    <Tracking event=\"progress\" offset=\"ten seconds\">" +
             "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
+            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
             "                                        ]]>" +
             "                                    </Tracking>" +
             "                                    <Tracking event=\"midpoint\">" +
             "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;" +
+            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;" +
             "                                        ]]>" +
             "                                    </Tracking>" +
             "                                    <Tracking event=\"midpoint\">" +
             "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?" +
+            "                                        https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?" +
             "                                        ]]>" +
             "                                    </Tracking>" +
             "                                    <Tracking event=\"firstQuartile\">" +
             "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;" +
+            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;" +
             "                                        ]]>" +
             "                                    </Tracking>" +
             "                                    <Tracking event=\"firstQuartile\">" +
             "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?" +
+            "                                        https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?" +
             "                                        ]]>" +
             "                                    </Tracking>" +
             "                                    <Tracking event=\"thirdQuartile\">" +
             "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;" +
+            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;" +
             "                                        ]]>" +
             "                                    </Tracking>" +
             "                                    <Tracking event=\"thirdQuartile\">" +
             "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?" +
+            "                                        https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?" +
             "                                        ]]>" +
             "                                    </Tracking>" +
             "                                    <Tracking event=\"complete\">" +
             "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=13;ecn1=1;etm1=0;" +
+            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=13;ecn1=1;etm1=0;" +
             "                                        ]]>" +
             "                                    </Tracking>" +
             "                                    <Tracking event=\"complete\">" +
             "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.5;sz=1x1;ord=2922389?" +
+            "                                        https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.5;sz=1x1;ord=2922389?" +
             "                                        ]]>" +
             "                                    </Tracking>" +
             "                                    <Tracking event=\"close\">" +
             "                                        <![CDATA[" +
-            "                                        http://www.mopub.com/close?q=ignatius" +
+            "                                        https://www.mopub.com/close?q=ignatius" +
             "                                        ]]>" +
             "                                    </Tracking>" +
             "                                    <Tracking event=\"close\">" +
             "                                        <![CDATA[" +
-            "                                        http://www.mopub.com/close?q=j3" +
+            "                                        https://www.mopub.com/close?q=j3" +
             "                                        ]]>" +
             "                                    </Tracking>" +
             "                                    <Tracking event=\"skip\">" +
             "                                        <![CDATA[" +
-            "                                        http://www.mopub.com/skip?q=ignatius" +
+            "                                        https://www.mopub.com/skip?q=ignatius" +
             "                                        ]]>" +
             "                                    </Tracking>" +
             "                                    <Tracking event=\"skip\">" +
             "                                        <![CDATA[" +
-            "                                        http://www.mopub.com/skip?q=j3" +
+            "                                        https://www.mopub.com/skip?q=j3" +
             "                                        ]]>" +
             "                                    </Tracking>" +
             "                                    <Tracking event=\"mute\">" +
             "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=16;ecn1=1;etm1=0;" +
+            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=16;ecn1=1;etm1=0;" +
             "                                        ]]>" +
             "                                    </Tracking>" +
             "                                    <Tracking event=\"pause\">" +
             "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=15;ecn1=1;etm1=0;" +
+            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=15;ecn1=1;etm1=0;" +
             "                                        ]]>" +
             "                                    </Tracking>" +
             "                                    <Tracking event=\"fullscreen\">" +
             "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=19;ecn1=1;etm1=0;" +
+            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=19;ecn1=1;etm1=0;" +
             "                                        ]]>" +
             "                                    </Tracking>" +
             "                                    <Tracking event=\"fullscreen\">" +
             "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.6;sz=1x1;ord=2922389?" +
+            "                                        https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.6;sz=1x1;ord=2922389?" +
             "                                        ]]>" +
             "                                    </Tracking>" +
             "                                </TrackingEvents>" +
             "                                <AdParameters/>" +
             "                                <VideoClicks>" +
             "                                    <ClickThrough>" +
-            "                                        <![CDATA[ http://www.google.com/support/richmedia ]]>" +
+            "                                        <![CDATA[ https://www.google.com/support/richmedia ]]>" +
             "                                    </ClickThrough>" +
             "                                    <ClickTracking id=\"DART\">" +
             "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/click%3Bh%3Dv8/3e1b/3/0/%2a/z%3B223626102%3B0-0%3B0%3B47414672%3B255-0/0%3B30477563/30495440/1%3B%3B%7Eaopt%3D0/0/ff/0%3B%7Esscs%3D%3fhttp://s0.2mdn.net/dot.gif" +
+            "                                        https://ad.doubleclick.net/click%3Bh%3Dv8/3e1b/3/0/%2a/z%3B223626102%3B0-0%3B0%3B47414672%3B255-0/0%3B30477563/30495440/1%3B%3B%7Eaopt%3D0/0/ff/0%3B%7Esscs%3D%3fhttp://s0.2mdn.net/dot.gif" +
             "                                        ]]>" +
             "                                    </ClickTracking>" +
             "                                    <ClickTracking id=\"ThirdParty\">" +
             "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/clk;212442087;33815766;i?http://www.google.com/support/richmedia" +
+            "                                        https://ad.doubleclick.net/clk;212442087;33815766;i?https://www.google.com/support/richmedia" +
             "                                        ]]>" +
             "                                    </ClickTracking>" +
             "                                </VideoClicks>" +
@@ -181,7 +183,7 @@
             "                                    <MediaFile id=\"1\" delivery=\"progressive\" type=\"video/quicktime\" bitrate=\"457\"" +
             "                                               width=\"300\" height=\"225\">" +
             "                                        <![CDATA[" +
-            "                                        http://s3.amazonaws.com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
+            "                                        https://s3.amazonaws.com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
             "                                        ]]>" +
             "                                    </MediaFile>" +
             "                                </MediaFiles>" +
@@ -216,92 +218,92 @@
             "                        <Creative AdID=\"601364-Companion\">" +
             "                            <CompanionAds>" +
             "                               <Companion height=\"90\" width=\"728\">" +
-            "                                   <StaticResource creativeType=\"image/jpeg\">http://demo.tremormedia.com/proddev/vast/728x90_banner1.jpg</StaticResource>" +
-            "                                   <CompanionClickThrough>http://www.tremormedia.com</CompanionClickThrough>" +
+            "                                   <StaticResource creativeType=\"image/jpeg\">https://demo.tremormedia.com/proddev/vast/728x90_banner1.jpg</StaticResource>" +
+            "                                   <CompanionClickThrough>https://www.tremormedia.com</CompanionClickThrough>" +
             "                                   <BADTrackingEvents>" +
-            "                                       <Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking>" +
-            "                                       <Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking>" +
+            "                                       <Tracking event=\"creativeView\">https://myTrackingURL/firstCompanionCreativeView</Tracking>" +
+            "                                       <Tracking event=\"creativeView\">https://myTrackingURL/secondCompanionCreativeView</Tracking>" +
             "                                   </BADTrackingEvents>" +
             "                               </Companion>" +
             "                               <Companion id=\"valid\" height=\"250\" width=\"300\">" +
-            "                                   <StaticResource creativeType=\"image/png\">http://demo.tremormedia.com/proddev/vast/Blistex1.png</StaticResource>" +
+            "                                   <StaticResource creativeType=\"image/png\">https://demo.tremormedia.com/proddev/vast/Blistex1.png</StaticResource>" +
             "                                   <TrackingEvents>" +
-            "                                       <Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking>" +
-            "                                       <Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking>" +
+            "                                       <Tracking event=\"creativeView\">https://myTrackingURL/firstCompanionCreativeView</Tracking>" +
+            "                                       <Tracking event=\"creativeView\">https://myTrackingURL/secondCompanionCreativeView</Tracking>" +
             "                                   </TrackingEvents>" +
-            "                                   <CompanionClickThrough>http://www.tremormedia.com</CompanionClickThrough>" +
-            "                                   <CompanionClickTracking><![CDATA[http://companionClickTracking1]]></CompanionClickTracking>" +
+            "                                   <CompanionClickThrough>https://www.tremormedia.com</CompanionClickThrough>" +
+            "                                   <CompanionClickTracking><![CDATA[https://companionClickTracking1]]></CompanionClickTracking>" +
             "                               </Companion>" +
             "                               <Companion height=\"789\" width=\"456\">" +
             "                                   <StaticResource creativeType=\"image/bmp\">" +
             "                                       <![CDATA[" +
-            "                                           http://cdn.liverail.com/adasset/229/7969/300x250.bmp" +
+            "                                           https://cdn.liverail.com/adasset/229/7969/300x250.bmp" +
             "                                       ]]>" +
             "                                   </StaticResource>" +
             "                                   <TrackingEvents>" +
             "                                       <Tracking event=\"creativeView\">" +
             "                                           <![CDATA[" +
-            "                                               http://trackingUrl1.com/" +
+            "                                               https://trackingUrl1.com/" +
             "                                           ]]>" +
             "                                       </Tracking>" +
             "                                   </TrackingEvents>" +
             "                                   <CompanionClickThrough>" +
             "                                       <![CDATA[" +
-            "                                           http://clickThroughUrl1.com/" +
+            "                                           https://clickThroughUrl1.com/" +
             "                                       ]]>" +
             "                                   </CompanionClickThrough>" +
-            "                                   <CompanionClickTracking><![CDATA[http://companionClickTracking2]]></CompanionClickTracking>" +
+            "                                   <CompanionClickTracking><![CDATA[https://companionClickTracking2]]></CompanionClickTracking>" +
             "                               </Companion>" +
             "                               <Companion height=\"789\" width=\"1011\">" +
             "                                   <StaticResource creativeType=\"image/gif\">" +
             "                                       <![CDATA[" +
-            "                                           http://cdn.liverail.com/adasset/229/7969/300x250.gif" +
+            "                                           https://cdn.liverail.com/adasset/229/7969/300x250.gif" +
             "                                       ]]>" +
             "                                   </StaticResource>" +
             "                                   <CompanionClickThrough>" +
             "                                       <![CDATA[" +
-            "                                           http://clickThroughUrl2.com/" +
+            "                                           https://clickThroughUrl2.com/" +
             "                                       ]]>" +
             "                                   </CompanionClickThrough>" +
-            "                                   <CompanionClickTracking><![CDATA[http://companionClickTracking3]]></CompanionClickTracking>" +
+            "                                   <CompanionClickTracking><![CDATA[https://companionClickTracking3]]></CompanionClickTracking>" +
             "                               </Companion>" +
             "                               <Companion width=\"300\" height=\"60\">" +
             "                                   <StaticResource creativeType=\"application/x-shockwave-flash\">" +
             "                                       <![CDATA[" +
-            "                                           http://cdn.liverail.com/adasset4/1331/229/7969/5122396e510b80db6b5ef4013ddabe90.swf" +
+            "                                           https://cdn.liverail.com/adasset4/1331/229/7969/5122396e510b80db6b5ef4013ddabe90.swf" +
             "                                       ]]>" +
             "                                   </StaticResource>" +
             "                                   <TrackingEvents>" +
             "                                       <Tracking event=\"creativeView\">" +
             "                                           <![CDATA[" +
-            "                                               http://trackingUrl2.com/" +
+            "                                               https://trackingUrl2.com/" +
             "                                           ]]>" +
             "                                       </Tracking>" +
             "                                   </TrackingEvents>" +
             "                                   <CompanionClickThrough>" +
             "                                       <![CDATA[" +
-            "                                           http://clickThroughUrl3.com/" +
+            "                                           https://clickThroughUrl3.com/" +
             "                                       ]]>" +
             "                                   </CompanionClickThrough>" +
-            "                                   <CompanionClickTracking><![CDATA[http://companionClickTracking4]]></CompanionClickTracking>" +
+            "                                   <CompanionClickTracking><![CDATA[https://companionClickTracking4]]></CompanionClickTracking>" +
             "                               </Companion>" +
             "                               <Companion id=\"valid\" height=\"249\" width=\"299\">" +
-            "                                   <BADStaticResource creativeType=\"image/jpeg\">http://demo.tremormedia.com/proddev/vast/Blistex1.jpg</BADStaticResource>" +
+            "                                   <BADStaticResource creativeType=\"image/jpeg\">https://demo.tremormedia.com/proddev/vast/Blistex1.jpg</BADStaticResource>" +
             "                                   <TrackingEvents>" +
-            "                                           <Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking>" +
-            "                                           <Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking>" +
-            "                                           <BADTracking event=\"creativeView\">http://myTrackingURL/thirdCompanionCreativeView</BADTracking>" +
-            "                                           <Tracking BADevent=\"creativeView\">http://myTrackingURL/fourthCompanionCreativeView</Tracking>" +
-            "                                           <Tracking event=\"BADcreativeView\">http://myTrackingURL/fifthCompanionCreativeView</Tracking>" +
+            "                                           <Tracking event=\"creativeView\">https://myTrackingURL/firstCompanionCreativeView</Tracking>" +
+            "                                           <Tracking event=\"creativeView\">https://myTrackingURL/secondCompanionCreativeView</Tracking>" +
+            "                                           <BADTracking event=\"creativeView\">https://myTrackingURL/thirdCompanionCreativeView</BADTracking>" +
+            "                                           <Tracking BADevent=\"creativeView\">https://myTrackingURL/fourthCompanionCreativeView</Tracking>" +
+            "                                           <Tracking event=\"BADcreativeView\">https://myTrackingURL/fifthCompanionCreativeView</Tracking>" +
             "                                   </TrackingEvents>" +
-            "                                   <BADCompanionClickThrough>http://www.tremormedia.com</BADCompanionClickThrough>" +
-            "                                   <BADCompanionClickTracking><![CDATA[http://companionClickTracking5]]></BADCompanionClickTracking>" +
+            "                                   <BADCompanionClickThrough>https://www.tremormedia.com</BADCompanionClickThrough>" +
+            "                                   <BADCompanionClickTracking><![CDATA[https://companionClickTracking5]]></BADCompanionClickTracking>" +
             "                               </Companion>" +
             "                               <Companion width=\"9000\">" +
             "                                   <TrackingEvents>" +
             "                                       <ThisWillNotBeFound>" +
-            "                                           <Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking>" +
-            "                                           <Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking>" +
+            "                                           <Tracking event=\"creativeView\">https://myTrackingURL/firstCompanionCreativeView</Tracking>" +
+            "                                           <Tracking event=\"creativeView\">https://myTrackingURL/secondCompanionCreativeView</Tracking>" +
             "                                       </ThisWillNotBeFound>" +
             "                                   </TrackingEvents>" +
             "                               </Companion>" +
@@ -325,23 +327,30 @@
             "                        <Extension type=\"MoPub\">" +
             "                           <MoPubCtaText>custom CTA text</MoPubCtaText>" +
             "                           <MoPubSkipText>skip</MoPubSkipText>" +
-            "                           <MoPubCloseIcon>http://ton.twitter.com/exchange-media/images/v4/star_icon_3x.png</MoPubCloseIcon>" +
+            "                           <MoPubCloseIcon>https://ton.twitter.com/exchange-media/images/v4/star_icon_3x.png</MoPubCloseIcon>" +
             "                           <MoPubForceOrientation>device</MoPubForceOrientation>" +
+            "                           <MoPubViewabilityTracker" +
+"                                           viewablePlaytime=\"2.5\"" +
+            "                               percentViewable=\"50%\">" +
+            "                               <![CDATA[" +
+            "                                   https://ad.server.com/impression/dot.gif" +
+            "                               ]]>" +
+            "                           </MoPubViewabilityTracker>" +
             "                        </Extension>" +
             "                    </Extensions>" +
             "                </InLine>" +
             "                <Wrapper>" +
             "                   <AdSystem>Acudeo Compatible</AdSystem>" +
-            "                   <VASTAdTagURI>http://0.dsp.dev1.mopub.com/xml</VASTAdTagURI>" +
-            "                   <Impression>http://myTrackingURL/wrapper/impression</Impression>" +
+            "                   <VASTAdTagURI>https://0.dsp.dev1.mopub.com/xml</VASTAdTagURI>" +
+            "                   <Impression>https://myTrackingURL/wrapper/impression</Impression>" +
             "                   <Creatives>" +
             "                   </Creatives>" +
             "                </Wrapper>" +
             "            </Ad>" +
             "        </VAST>" +
             "<MP_TRACKING_URLS>" +
-            "   <MP_TRACKING_URL>http://www.mopub.com/imp1</MP_TRACKING_URL>" +
-            "   <MP_TRACKING_URL>http://www.mopub.com/imp2</MP_TRACKING_URL>" +
+            "   <MP_TRACKING_URL>https://www.mopub.com/imp1</MP_TRACKING_URL>" +
+            "   <MP_TRACKING_URL>https://www.mopub.com/imp2</MP_TRACKING_URL>" +
             "</MP_TRACKING_URLS>";
 
     private VastXmlManager mXmlManager;
@@ -423,7 +432,7 @@ public void parseVastXml_withMalformedNodes_shouldNotCauseProblems() {
 
     @Test
     public void getAdXmlManagers_shouldReturnAllAdXmlManagers() throws Exception {
-        String vastXml = "<VAST xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" version=\"2.0\" xsi:noNamespaceSchemaLocation=\"vast.xsd\">" +
+        String vastXml = "<VAST xmlns:xsi=\"https://www.w3.org/2001/XMLSchema-instance\" version=\"2.0\" xsi:noNamespaceSchemaLocation=\"vast.xsd\">" +
                 "    <Ad id=\"12345678\">" +
                 "        <InLine></InLine>" +
                 "    </Ad>" +
@@ -446,7 +455,7 @@ public void getAdXmlManagers_shouldReturnAllAdXmlManagers() throws Exception {
     @Test
     public void getMoPubImpressionTrackers_shouldReturnTheCorrectValue() {
         assertThat(VastUtils.vastTrackersToStrings(mXmlManager.getMoPubImpressionTrackers()))
-                .containsOnly("http://www.mopub.com/imp1", "http://www.mopub.com/imp2");
+                .containsOnly("https://www.mopub.com/imp1", "https://www.mopub.com/imp2");
     }
 
     @Test
@@ -467,7 +476,7 @@ public void getCustomSkipText_shouldReturnTheCorrectValue() {
     public void getCustomCloseIconUrl_shouldReturnTheCorrectValue() {
         String customCloseIconUrl = mXmlManager.getCustomCloseIconUrl();
 
-        assertThat(customCloseIconUrl).isEqualTo("http://ton.twitter" +
+        assertThat(customCloseIconUrl).isEqualTo("https://ton.twitter" +
                 ".com/exchange-media/images/v4/star_icon_3x.png");
     }
 
@@ -486,17 +495,17 @@ public void getCustomForceOrientation_shouldReturnTheCorrectValue() {
     public void getVastAdTagURI_withWrapperXmlManager_shouldReturnTheCorrectValue() {
         String url = mXmlManager.getAdXmlManagers().get(0).getWrapperXmlManager().getVastAdTagURI();
 
-        assertThat(url).isEqualTo("http://0.dsp.dev1.mopub.com/xml");
+        assertThat(url).isEqualTo("https://0.dsp.dev1.mopub.com/xml");
     }
 
     @Test
     public void getImpressionTrackers_withInLineXmlManager_shouldReturnTheCorrectValue() {
         assertThat(VastUtils.vastTrackersToStrings(mXmlManager.getAdXmlManagers().get(0)
                 .getInLineXmlManager().getImpressionTrackers()))
-                .containsOnly("http://ad.doubleclick.net/imp;v7;x;223626102;0-0;0;47414672;0/0;" +
+                .containsOnly("https://ad.doubleclick.net/imp;v7;x;223626102;0-0;0;47414672;0/0;" +
                                 "30477563/30495440/1;;~aopt=0/0/ff/0;~cs=j%3fhttp://s0.2mdn" +
                                 ".net/dot.gif",
-                        "http://ad.doubleclick.net/ad/N270.Process_Other/B3473145;sz=1x1;ord=2922389?");
+                        "https://ad.doubleclick.net/ad/N270.Process_Other/B3473145;sz=1x1;ord=2922389?");
     }
 
     @Test
@@ -510,9 +519,9 @@ public void getCompanionAdXmlManagers_withInLineXmlManager_shouldReturnListOfPop
         assertThat(imageCompanionAdXmlManagers.get(0).getResourceXmlManager().getStaticResourceType())
                 .isEqualTo("image/jpeg");
         assertThat(imageCompanionAdXmlManagers.get(0).getResourceXmlManager().getStaticResource())
-                .isEqualTo("http://demo.tremormedia.com/proddev/vast/728x90_banner1.jpg");
+                .isEqualTo("https://demo.tremormedia.com/proddev/vast/728x90_banner1.jpg");
         assertThat(imageCompanionAdXmlManagers.get(0).getClickThroughUrl()).isEqualTo(
-                "http://www.tremormedia.com");
+                "https://www.tremormedia.com");
         assertThat(imageCompanionAdXmlManagers.get(0).getClickTrackers()).isEmpty();
 
         assertThat(imageCompanionAdXmlManagers.get(1).getWidth()).isEqualTo(300);
@@ -520,35 +529,35 @@ public void getCompanionAdXmlManagers_withInLineXmlManager_shouldReturnListOfPop
         assertThat(imageCompanionAdXmlManagers.get(1).getResourceXmlManager().getStaticResourceType())
                 .isEqualTo("image/png");
         assertThat(imageCompanionAdXmlManagers.get(1).getResourceXmlManager().getStaticResource())
-                .isEqualTo("http://demo.tremormedia.com/proddev/vast/Blistex1.png");
+                .isEqualTo("https://demo.tremormedia.com/proddev/vast/Blistex1.png");
         assertThat(imageCompanionAdXmlManagers.get(1).getClickThroughUrl()).isEqualTo(
-                "http://www.tremormedia.com");
+                "https://www.tremormedia.com");
         assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(1)
-                .getClickTrackers())).containsOnly("http://companionClickTracking1");
+                .getClickTrackers())).containsOnly("https://companionClickTracking1");
 
         assertThat(imageCompanionAdXmlManagers.get(2).getWidth()).isEqualTo(456);
         assertThat(imageCompanionAdXmlManagers.get(2).getHeight()).isEqualTo(789);
         assertThat(imageCompanionAdXmlManagers.get(2).getResourceXmlManager().getStaticResourceType())
                 .isEqualTo("image/bmp");
         assertThat(imageCompanionAdXmlManagers.get(2).getResourceXmlManager().getStaticResource())
-                .isEqualTo("http://cdn.liverail.com/adasset/229/7969/300x250.bmp");
+                .isEqualTo("https://cdn.liverail.com/adasset/229/7969/300x250.bmp");
         assertThat(imageCompanionAdXmlManagers.get(2).getClickThroughUrl())
-                .isEqualTo("http://clickThroughUrl1.com/");
+                .isEqualTo("https://clickThroughUrl1.com/");
         assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(2)
-                .getClickTrackers())).containsOnly("http://companionClickTracking2");
+                .getClickTrackers())).containsOnly("https://companionClickTracking2");
         assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(2)
-                .getCompanionCreativeViewTrackers())).containsOnly("http://trackingUrl1.com/");
+                .getCompanionCreativeViewTrackers())).containsOnly("https://trackingUrl1.com/");
 
         assertThat(imageCompanionAdXmlManagers.get(3).getWidth()).isEqualTo(1011);
         assertThat(imageCompanionAdXmlManagers.get(3).getHeight()).isEqualTo(789);
         assertThat(imageCompanionAdXmlManagers.get(3).getResourceXmlManager().getStaticResourceType())
                 .isEqualTo("image/gif");
         assertThat(imageCompanionAdXmlManagers.get(3).getResourceXmlManager().getStaticResource())
-                .isEqualTo("http://cdn.liverail.com/adasset/229/7969/300x250.gif");
+                .isEqualTo("https://cdn.liverail.com/adasset/229/7969/300x250.gif");
         assertThat(imageCompanionAdXmlManagers.get(3).getClickThroughUrl()).isEqualTo(
-                "http://clickThroughUrl2.com/");
+                "https://clickThroughUrl2.com/");
         assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(3)
-                .getClickTrackers())).containsOnly("http://companionClickTracking3");
+                .getClickTrackers())).containsOnly("https://companionClickTracking3");
         assertThat(imageCompanionAdXmlManagers.get(3).getCompanionCreativeViewTrackers()).isEmpty();
 
         assertThat(imageCompanionAdXmlManagers.get(4).getWidth()).isEqualTo(300);
@@ -557,13 +566,13 @@ public void getCompanionAdXmlManagers_withInLineXmlManager_shouldReturnListOfPop
                 .isEqualTo("application/x-shockwave-flash");
         assertThat(imageCompanionAdXmlManagers.get(4).getResourceXmlManager().getStaticResource())
                 .isEqualTo(
-                        "http://cdn.liverail.com/adasset4/1331/229/7969/5122396e510b80db6b5ef4013ddabe90.swf");
+                        "https://cdn.liverail.com/adasset4/1331/229/7969/5122396e510b80db6b5ef4013ddabe90.swf");
         assertThat(imageCompanionAdXmlManagers.get(4).getClickThroughUrl()).isEqualTo(
-                "http://clickThroughUrl3.com/");
+                "https://clickThroughUrl3.com/");
         assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(4)
-                .getClickTrackers())).containsOnly("http://companionClickTracking4");
+                .getClickTrackers())).containsOnly("https://companionClickTracking4");
         assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(4)
-                .getCompanionCreativeViewTrackers())).containsOnly("http://trackingUrl2.com/");
+                .getCompanionCreativeViewTrackers())).containsOnly("https://trackingUrl2.com/");
 
         assertThat(imageCompanionAdXmlManagers.get(5).getWidth()).isEqualTo(299);
         assertThat(imageCompanionAdXmlManagers.get(5).getHeight()).isEqualTo(249);
@@ -573,8 +582,8 @@ public void getCompanionAdXmlManagers_withInLineXmlManager_shouldReturnListOfPop
         assertThat(imageCompanionAdXmlManagers.get(5).getClickTrackers()).isEmpty();
         assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(5)
                 .getCompanionCreativeViewTrackers()))
-                .containsOnly("http://myTrackingURL/firstCompanionCreativeView",
-                        "http://myTrackingURL/secondCompanionCreativeView");
+                .containsOnly("https://myTrackingURL/firstCompanionCreativeView",
+                        "https://myTrackingURL/secondCompanionCreativeView");
 
         assertThat(imageCompanionAdXmlManagers.get(6).getWidth()).isEqualTo(9000);
         assertThat(imageCompanionAdXmlManagers.get(6).getHeight()).isNull();
@@ -594,11 +603,11 @@ public void getAbsoluteProgressTrackers_withLinearXmlManager_shouldReturnCorrect
 
         VastAbsoluteProgressTracker tracker0 = trackers.get(0);
         assertThat(tracker0.getTrackingMilliseconds()).isEqualTo(2000);
-        assertThat(tracker0.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+        assertThat(tracker0.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
 
         VastAbsoluteProgressTracker tracker1 = trackers.get(1);
         assertThat(tracker1.getTrackingMilliseconds()).isEqualTo(3670300);
-        assertThat(tracker1.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;" +
+        assertThat(tracker1.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;" +
                 "src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;" +
                 "rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
     }
@@ -612,40 +621,40 @@ public void getFractionalTrackers_withLinearXmlManager_shouldReturnCorrectValues
 
         VastFractionalProgressTracker tracker0 = trackers.get(0);
         assertThat(tracker0.trackingFraction()).isEqualTo(0.13f);
-        assertThat(tracker0.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
+        assertThat(tracker0.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
 
         VastFractionalProgressTracker tracker1 = trackers.get(1);
         assertThat(tracker1.trackingFraction()).isEqualTo(0.25f);
-        assertThat(tracker1.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;");
+        assertThat(tracker1.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;");
 
         VastFractionalProgressTracker tracker2 = trackers.get(2);
         assertThat(tracker2.trackingFraction()).isEqualTo(0.25f);
-        assertThat(tracker2.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?");
+        assertThat(tracker2.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?");
 
         VastFractionalProgressTracker tracker3 = trackers.get(3);
         assertThat(tracker3.trackingFraction()).isEqualTo(0.5f);
-        assertThat(tracker3.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;");
+        assertThat(tracker3.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;");
 
         VastFractionalProgressTracker tracker4 = trackers.get(4);
         assertThat(tracker4.trackingFraction()).isEqualTo(0.5f);
-        assertThat(tracker4.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?");
+        assertThat(tracker4.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?");
 
         VastFractionalProgressTracker tracker5 = trackers.get(5);
         assertThat(tracker5.trackingFraction()).isEqualTo(0.75f);
-        assertThat(tracker5.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;");
+        assertThat(tracker5.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;");
 
         VastFractionalProgressTracker tracker6 = trackers.get(6);
         assertThat(tracker6.trackingFraction()).isEqualTo(0.75f);
-        assertThat(tracker6.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?");
+        assertThat(tracker6.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?");
     }
 
     @Test
     public void getVideoCompleteTrackers_withLinearXmlManager_shouldReturnTheCorrectValue() {
         assertThat(VastUtils.vastTrackersToStrings(mXmlManager.getAdXmlManagers().get(0).getInLineXmlManager().getLinearXmlManagers().get(0).getVideoCompleteTrackers()))
-                .containsOnly("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;" +
+                .containsOnly("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;" +
                                 "pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;" +
                                 "timestamp=2922389;eid1=13;ecn1=1;etm1=0;",
-                        "http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.5;sz=1x1;" +
+                        "https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.5;sz=1x1;" +
                                 "ord=2922389?");
     }
 
@@ -653,16 +662,16 @@ public void getVideoCompleteTrackers_withLinearXmlManager_shouldReturnTheCorrect
     public void getVideoCloseTrackers_withLinearXmlManager_shouldReturnTheCorrectValue() {
         assertThat(VastUtils.vastTrackersToStrings(mXmlManager.getAdXmlManagers().get(0)
                 .getInLineXmlManager().getLinearXmlManagers().get(0).getVideoCloseTrackers()))
-                .containsOnly("http://www.mopub.com/close?q=ignatius",
-                        "http://www.mopub.com/close?q=j3");
+                .containsOnly("https://www.mopub.com/close?q=ignatius",
+                        "https://www.mopub.com/close?q=j3");
     }
 
     @Test
     public void getVideoSkipTrackers_withLinearXmlManager_shouldReturnTheCorrectValue() {
         assertThat(VastUtils.vastTrackersToStrings(mXmlManager.getAdXmlManagers().get(0)
                 .getInLineXmlManager().getLinearXmlManagers().get(0).getVideoSkipTrackers()))
-                .containsOnly("http://www.mopub.com/skip?q=ignatius",
-                        "http://www.mopub.com/skip?q=j3");
+                .containsOnly("https://www.mopub.com/skip?q=ignatius",
+                        "https://www.mopub.com/skip?q=j3");
     }
 
     @Test
@@ -670,14 +679,14 @@ public void getClickThroughUrl_withLinearXmlManager_shouldReturnTheCorrectValue(
         String url = mXmlManager.getAdXmlManagers().get(0)
                 .getInLineXmlManager().getLinearXmlManagers().get(0).getClickThroughUrl();
 
-        assertThat(url).isEqualTo("http://www.google.com/support/richmedia");
+        assertThat(url).isEqualTo("https://www.google.com/support/richmedia");
     }
 
     @Test
     public void getClickTrackers_withLinearXmlManager_shouldReturnTheCorrectValue() {
         assertThat(VastUtils.vastTrackersToStrings(mXmlManager.getAdXmlManagers().get(0).getInLineXmlManager().getLinearXmlManagers().get(0).getClickTrackers()))
-                .containsOnly("http://ad.doubleclick.net/click%3Bh%3Dv8/3e1b/3/0/%2a/z%3B223626102%3B0-0%3B0%3B47414672%3B255-0/0%3B30477563/30495440/1%3B%3B%7Eaopt%3D0/0/ff/0%3B%7Esscs%3D%3fhttp://s0.2mdn.net/dot.gif",
-                        "http://ad.doubleclick.net/clk;212442087;33815766;i?http://www.google.com/support/richmedia");
+                .containsOnly("https://ad.doubleclick.net/click%3Bh%3Dv8/3e1b/3/0/%2a/z%3B223626102%3B0-0%3B0%3B47414672%3B255-0/0%3B30477563/30495440/1%3B%3B%7Eaopt%3D0/0/ff/0%3B%7Esscs%3D%3fhttp://s0.2mdn.net/dot.gif",
+                        "https://ad.doubleclick.net/clk;212442087;33815766;i?https://www.google.com/support/richmedia");
     }
 
     @Test
@@ -693,7 +702,7 @@ public void getMediaFileUrl_withMediaXmlManager_shouldReturnTheCorrectValue() {
         String url = mXmlManager.getAdXmlManagers().get(0).getInLineXmlManager()
                 .getLinearXmlManagers().get(0).getMediaXmlManagers().get(0).getMediaUrl();
 
-        assertThat(url).isEqualTo("http://s3.amazonaws.com/uploads.hipchat" +
+        assertThat(url).isEqualTo("https://s3.amazonaws.com/uploads.hipchat" +
                 ".com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4");
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VideoDownloaderTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VideoDownloaderTest.java
new file mode 100644
index 00000000..7b3ce325
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VideoDownloaderTest.java
@@ -0,0 +1,261 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+
+import com.mopub.common.CacheService;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.test.support.ShadowAsyncTasks;
+import com.mopub.common.util.test.support.ShadowMoPubHttpUrlConnection;
+import com.mopub.mobileads.VideoDownloader.VideoDownloaderListener;
+import com.mopub.mobileads.VideoDownloader.VideoDownloaderTask;
+
+import org.fest.util.Arrays;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import java.lang.ref.WeakReference;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.anyBoolean;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class, shadows = {ShadowAsyncTasks.class, ShadowMoPubHttpUrlConnection.class})
+public class VideoDownloaderTest {
+    @Mock VideoDownloaderListener mockListener;
+    private final static String expectedUrl1 = "https://video_url";
+    private final static String expectedUrl2 = "https://video_url2";
+
+    @Before
+    public void setUp() {
+        Context context = Robolectric.buildActivity(Activity.class).create().get();
+        CacheService.initialize(context);
+    }
+
+    @After
+    public void tearDown() {
+        VideoDownloader.clearDownloaderTasks();
+        CacheService.clearAndNullCaches();
+    }
+
+    @Test
+    public void cache_shouldExecuteVideoDownloaderTask() {
+        VideoDownloader.cache(expectedUrl1, mockListener);
+
+        assertThat(ShadowAsyncTasks.wasCalled()).isTrue();
+        assertThat(ShadowAsyncTasks.getLatestAsyncTask()).isInstanceOf(VideoDownloaderTask.class);
+        assertThat(ShadowAsyncTasks.getLatestParams()).hasSize(1);
+        assertThat(ShadowAsyncTasks.getLatestParams().contains(expectedUrl1)).isTrue();
+
+        // In the success case, the listener will not be modified until after the AsyncTask is
+        // actually executed
+        verify(mockListener, never()).onComplete(anyBoolean());
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void cache_withNullListener_shouldThrowNullPointerException() {
+        VideoDownloader.cache(expectedUrl1, null);
+    }
+
+    @Test
+    public void cache_withNullUrl_shouldCallOnCompleteFalse_shouldNotExecuteAsyncTask() {
+        VideoDownloader.cache(null, mockListener);
+
+        verify(mockListener).onComplete(false);
+        assertThat(ShadowAsyncTasks.wasCalled()).isFalse();
+    }
+
+    @Test
+    public void cache_shouldAddVideoDownloaderTaskToStaticCollection() {
+        assertThat(VideoDownloader.getDownloaderTasks()).isEmpty();
+
+        VideoDownloader.cache(expectedUrl1, mockListener);
+
+        VideoDownloaderTask expectedTask =
+                (VideoDownloaderTask) ShadowAsyncTasks.getLatestAsyncTask();
+
+        assertThat(VideoDownloader.getDownloaderTasks()).hasSize(1);
+        assertThat(VideoDownloader.getDownloaderTasks().pop().get()).isEqualTo(expectedTask);
+    }
+
+    @Test
+    public void cache_shouldAddMultipleVideoDownloaderTasksToStaticCollection() {
+        VideoDownloader.cache(expectedUrl1, mockListener);
+        VideoDownloaderTask expectedTask1 =
+                (VideoDownloaderTask) ShadowAsyncTasks.getLatestAsyncTask();
+
+        VideoDownloader.cache(expectedUrl2, mockListener);
+        VideoDownloaderTask expectedTask2 =
+                (VideoDownloaderTask) ShadowAsyncTasks.getLatestAsyncTask();
+
+        assertThat(VideoDownloader.getDownloaderTasks()).hasSize(2);
+        assertThat(VideoDownloader.getDownloaderTasks().pop().get()).isEqualTo(expectedTask1);
+        assertThat(VideoDownloader.getDownloaderTasks().pop().get()).isEqualTo(expectedTask2);
+    }
+
+    @Test
+    public void cancelAllDownloaderTasks_shouldCancelAllTasksAndRemoveFromStaticCollection() {
+        final VideoDownloaderTask task1 = mock(VideoDownloaderTask.class);
+        final VideoDownloaderTask task2 = mock(VideoDownloaderTask.class);
+        VideoDownloader.getDownloaderTasks().add(new WeakReference<VideoDownloaderTask>(task1));
+        VideoDownloader.getDownloaderTasks().add(new WeakReference<VideoDownloaderTask>(task2));
+
+        VideoDownloader.cancelAllDownloaderTasks();
+
+        verify(task1).cancel(true);
+        verify(task2).cancel(true);
+        assertThat(VideoDownloader.getDownloaderTasks()).isEmpty();
+    }
+
+    @Test
+    public void cancelLastDownloaderTasks_shouldCancelTasksAndRemoveFromStaticCollection() {
+        final VideoDownloaderTask task1 = mock(VideoDownloaderTask.class);
+        final VideoDownloaderTask task2 = mock(VideoDownloaderTask.class);
+        VideoDownloader.getDownloaderTasks().add(new WeakReference<VideoDownloaderTask>(task1));
+        VideoDownloader.getDownloaderTasks().add(new WeakReference<VideoDownloaderTask>(task2));
+
+        VideoDownloader.cancelLastDownloadTask();
+
+        verify(task1, never()).cancel(anyBoolean());
+        verify(task2).cancel(true);
+        assertThat(VideoDownloader.getDownloaderTasks()).hasSize(1);
+        assertThat(VideoDownloader.getDownloaderTasks().pop().get()).isEqualTo(task1);
+    }
+
+    @Test
+    public void doInBackground_shouldReturnTrue_shouldUpdateCache() throws Exception {
+        String expectedResponse = "response";
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, expectedResponse);
+        final VideoDownloaderTask videoDownloaderTask = new VideoDownloaderTask(mockListener);
+
+        final Boolean result = videoDownloaderTask.doInBackground(expectedUrl1);
+
+        assertThat(result).isTrue();
+        assertThat(CacheService.getDiskLruCache().size()).isEqualTo(expectedResponse.length());
+        assertThat(CacheService.getFromDiskCache(expectedUrl1)).isEqualTo(expectedResponse.getBytes());
+    }
+
+    @Test
+    public void doInBackground_withNullArguments_shouldReturnFalse_shouldNotUpdateCache() throws Exception {
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "response");
+        final VideoDownloaderTask videoDownloaderTask = new VideoDownloaderTask(mockListener);
+
+        final Boolean result = videoDownloaderTask.doInBackground((String) null);
+
+        assertThat(result).isFalse();
+        assertThat(CacheService.getDiskLruCache().size()).isEqualTo(0);
+    }
+
+    @Test
+    public void doInBackground_withEmptyArrayArguments_shouldReturnFalse_shouldNotUpdateCache() throws Exception {
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "response");
+        final VideoDownloaderTask videoDownloaderTask = new VideoDownloaderTask(mockListener);
+
+        final Boolean result = videoDownloaderTask.doInBackground(Arrays.<String>array());
+
+        assertThat(result).isFalse();
+        assertThat(CacheService.getDiskLruCache().size()).isEqualTo(0);
+    }
+
+    @Test
+    public void doInBackground_withArrayStartingWithNull_shouldReturnFalse_shouldNotUpdateCache() throws Exception {
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "response");
+        final VideoDownloaderTask videoDownloaderTask = new VideoDownloaderTask(mockListener);
+
+        final String[] parameters = {null};
+        final Boolean result = videoDownloaderTask.doInBackground(parameters);
+
+        assertThat(result).isFalse();
+        assertThat(CacheService.getDiskLruCache().size()).isEqualTo(0);
+    }
+
+    @Test
+    public void doInBackground_withStatusCodeLessThan200_shouldReturnFalse_shouldNotUpdateCache() throws Exception {
+        ShadowMoPubHttpUrlConnection.addPendingResponse(199, "response");
+        VideoDownloaderTask videoDownloaderTask = new VideoDownloaderTask(mockListener);
+
+        final Boolean result = videoDownloaderTask.doInBackground(expectedUrl1);
+
+        assertThat(result).isFalse();
+        assertThat(CacheService.getDiskLruCache().size()).isEqualTo(0);
+    }
+
+    @Test
+    public void doInBackground_withStatusCodeGreaterThan299_shouldReturnFalse_shouldNotUpdateCache() throws Exception {
+        ShadowMoPubHttpUrlConnection.addPendingResponse(300, "response");
+        VideoDownloaderTask videoDownloaderTask = new VideoDownloaderTask(mockListener);
+
+        final Boolean result = videoDownloaderTask.doInBackground(expectedUrl1);
+
+        assertThat(result).isFalse();
+        assertThat(CacheService.getDiskLruCache().size()).isEqualTo(0);
+    }
+
+    @Test
+    public void doInBackground_withResponseGreaterThan25Mb_shouldReturnFalse_shouldNotUpdateCache() throws Exception {
+        String longString = createLongString(25 * 1024 * 1024 + 1);
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, longString);
+        VideoDownloaderTask videoDownloaderTask = new VideoDownloaderTask(mockListener);
+
+        final Boolean result = videoDownloaderTask.doInBackground(expectedUrl1);
+
+        assertThat(result).isFalse();
+        assertThat(CacheService.getDiskLruCache().size()).isEqualTo(0);
+    }
+
+    @Test
+    public void onPostExecute_withSuccessTrue_shouldCallOnCompleteTrue_shouldRemoveDownloadTaskFromQueue() {
+        VideoDownloaderTask videoDownloaderTask = new VideoDownloaderTask(mockListener);
+        assertThat(VideoDownloader.getDownloaderTasks()).hasSize(1);
+
+        videoDownloaderTask.onPostExecute(true);
+
+        verify(mockListener).onComplete(true);
+        assertThat(VideoDownloader.getDownloaderTasks()).hasSize(0);
+    }
+
+    @Test
+    public void onPostExecute_withSuccessFalse_shouldCallOnCompleteFalse_shouldRemoveDownloadTaskFromQueue() {
+        VideoDownloaderTask videoDownloaderTask = new VideoDownloaderTask(mockListener);
+        assertThat(VideoDownloader.getDownloaderTasks()).hasSize(1);
+
+        videoDownloaderTask.onPostExecute(false);
+
+        verify(mockListener).onComplete(false);
+        assertThat(VideoDownloader.getDownloaderTasks()).hasSize(0);
+    }
+
+    @Test
+    public void onPostExecute_withSuccessNull_shouldCallOnCompleteFalse_shouldRemoveDownloadTaskFromQueue() {
+        VideoDownloaderTask videoDownloaderTask = new VideoDownloaderTask(mockListener);
+        assertThat(VideoDownloader.getDownloaderTasks()).hasSize(1);
+
+        videoDownloaderTask.onPostExecute(null);
+
+        verify(mockListener).onComplete(false);
+        assertThat(VideoDownloader.getDownloaderTasks()).hasSize(0);
+    }
+
+    @Test
+    public void cancelledTask_shouldCallOnCompleteFalse_shouldRemoveDownloadTaskFromQueue() {
+        VideoDownloaderTask videoDownloaderTask = new VideoDownloaderTask(mockListener);
+        assertThat(VideoDownloader.getDownloaderTasks()).hasSize(1);
+
+        videoDownloaderTask.cancel(true);
+
+        verify(mockListener).onComplete(false);
+        assertThat(VideoDownloader.getDownloaderTasks()).hasSize(0);
+    }
+
+    private static String createLongString(int size) {
+        return new String(new char[size]).replace("\0", "*");
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VideoViewabilityTrackerXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VideoViewabilityTrackerXmlManagerTest.java
new file mode 100644
index 00000000..0a7acd72
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VideoViewabilityTrackerXmlManagerTest.java
@@ -0,0 +1,236 @@
+package com.mopub.mobileads;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import static com.mopub.mobileads.test.support.VastUtils.createNode;
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class VideoViewabilityTrackerXmlManagerTest {
+    private VideoViewabilityTrackerXmlManager subject;
+
+    @Test
+    public void getViewablePlaytimeMS_shouldParseHourFormat() throws Exception {
+        String videoViewabilityXml = "<MoPubViewabilityTracker" +
+                "                             viewablePlaytime=\"01:01:01.001\"" +
+                "                             percentViewable=\"50%\">" +
+                "                         <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
+                "                     </MoPubViewabilityTracker>";
+
+        subject = new VideoViewabilityTrackerXmlManager(createNode(videoViewabilityXml));
+
+        assertThat(subject.getViewablePlaytimeMS()).isEqualTo(3661001);
+    }
+
+    @Test
+    public void getViewablePlaytimeMS_shouldParseSecondsFormat() throws Exception {
+        String videoViewabilityXml = "<MoPubViewabilityTracker" +
+                "                             viewablePlaytime=\"01.001\"" +
+                "                             percentViewable=\"50%\">" +
+                "                         <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
+                "                     </MoPubViewabilityTracker>";
+
+        subject = new VideoViewabilityTrackerXmlManager(createNode(videoViewabilityXml));
+
+        assertThat(subject.getViewablePlaytimeMS()).isEqualTo(1001);
+    }
+
+    @Test
+    public void getViewablePlaytimeMS_shouldParseIntegerFormat() throws Exception {
+        String videoViewabilityXml = "<MoPubViewabilityTracker" +
+                "                             viewablePlaytime=\"2\"" +
+                "                             percentViewable=\"50%\">" +
+                "                         <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
+                "                     </MoPubViewabilityTracker>";
+
+        subject = new VideoViewabilityTrackerXmlManager(createNode(videoViewabilityXml));
+
+        assertThat(subject.getViewablePlaytimeMS()).isEqualTo(2000);
+    }
+
+    @Test
+    public void getViewablePlaytimeMS_withoutViewablePlaytimeMS_shouldReturnNull() throws Exception {
+        String videoViewabilityXml = "<MoPubViewabilityTracker" +
+                "                             percentViewable=\"50%\">" +
+                "                         <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
+                "                     </MoPubViewabilityTracker>";
+
+        subject = new VideoViewabilityTrackerXmlManager(createNode(videoViewabilityXml));
+
+        assertThat(subject.getViewablePlaytimeMS()).isNull();
+    }
+
+    @Test
+    public void getViewablePlaytimeMS_withNegativeInteger_shouldReturnNull() throws Exception {
+        String videoViewabilityXml = "<MoPubViewabilityTracker" +
+                "                             viewablePlaytime=\"-1\"" +
+                "                             percentViewable=\"50%\">" +
+                "                         <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
+                "                     </MoPubViewabilityTracker>";
+
+        subject = new VideoViewabilityTrackerXmlManager(createNode(videoViewabilityXml));
+
+        assertThat(subject.getViewablePlaytimeMS()).isNull();
+    }
+
+    @Test
+    public void getViewablePlaytimeMS_withInvalidHourFormat_shouldReturnNull() throws Exception {
+        String videoViewabilityXml = "<MoPubViewabilityTracker" +
+                "                             viewablePlaytime=\"a01:01:01.001\"" +
+                "                             percentViewable=\"50%\">" +
+                "                         <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
+                "                     </MoPubViewabilityTracker>";
+
+        subject = new VideoViewabilityTrackerXmlManager(createNode(videoViewabilityXml));
+
+        assertThat(subject.getViewablePlaytimeMS()).isNull();
+    }
+
+    @Test
+    public void getViewablePlaytimeMS_withInvalidSecondsFormat_shouldReturnNull() throws Exception {
+        String videoViewabilityXml = "<MoPubViewabilityTracker" +
+                "                             viewablePlaytime=\"a01.001\"" +
+                "                             percentViewable=\"50%\">" +
+                "                         <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
+                "                     </MoPubViewabilityTracker>";
+
+        subject = new VideoViewabilityTrackerXmlManager(createNode(videoViewabilityXml));
+
+        assertThat(subject.getViewablePlaytimeMS()).isNull();
+    }
+
+    @Test
+    public void getViewablePlaytimeMS_withInvalidViewablePlaytimeMS_shouldReturnNull() throws Exception {
+        String videoViewabilityXml = "<MoPubViewabilityTracker" +
+                "                             viewablePlaytime=\"1234!@#$%^*(asdf\"" +
+                "                             percentViewable=\"50%\">" +
+                "                         <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
+                "                     </MoPubViewabilityTracker>";
+
+        subject = new VideoViewabilityTrackerXmlManager(createNode(videoViewabilityXml));
+
+        assertThat(subject.getViewablePlaytimeMS()).isNull();
+    }
+
+    @Test
+    public void getPercentViewable_shouldParseWithPercentSign() throws Exception {
+        String videoViewabilityXml = "<MoPubViewabilityTracker" +
+                "                             viewablePlaytime=\"1\"" +
+                "                             percentViewable=\"25%\">" +
+                "                         <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
+                "                     </MoPubViewabilityTracker>";
+
+        subject = new VideoViewabilityTrackerXmlManager(createNode(videoViewabilityXml));
+
+        assertThat(subject.getPercentViewable()).isEqualTo(25);
+    }
+
+    @Test
+    public void getPercentViewable_shouldParseWithoutPercentSign() throws Exception {
+        String videoViewabilityXml = "<MoPubViewabilityTracker" +
+                "                             viewablePlaytime=\"1\"" +
+                "                             percentViewable=\"25\">" +
+                "                         <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
+                "                     </MoPubViewabilityTracker>";
+
+        subject = new VideoViewabilityTrackerXmlManager(createNode(videoViewabilityXml));
+
+        assertThat(subject.getPercentViewable()).isEqualTo(25);
+    }
+
+    @Test
+    public void getPercentViewable_shouldTruncateFloats() throws Exception {
+        String videoViewabilityXml = "<MoPubViewabilityTracker" +
+                "                             viewablePlaytime=\"1\"" +
+                "                             percentViewable=\"25.9\">" +
+                "                         <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
+                "                     </MoPubViewabilityTracker>";
+
+        subject = new VideoViewabilityTrackerXmlManager(createNode(videoViewabilityXml));
+
+        assertThat(subject.getPercentViewable()).isEqualTo(25);
+    }
+
+    @Test
+    public void getPercentViewable_withoutPercentViewable_shouldReturnNull() throws Exception {
+        String videoViewabilityXml = "<MoPubViewabilityTracker" +
+                "                             viewablePlaytime=\"1\">" +
+                "                         <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
+                "                     </MoPubViewabilityTracker>";
+
+        subject = new VideoViewabilityTrackerXmlManager(createNode(videoViewabilityXml));
+
+        assertThat(subject.getPercentViewable()).isNull();
+    }
+
+    @Test
+    public void getPercentViewable_withNegativeInteger_shouldReturnNull() throws Exception {
+        String videoViewabilityXml = "<MoPubViewabilityTracker" +
+                "                             viewablePlaytime=\"1\"" +
+                "                             percentViewable=\"-25\">" +
+                "                         <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
+                "                     </MoPubViewabilityTracker>";
+
+        subject = new VideoViewabilityTrackerXmlManager(createNode(videoViewabilityXml));
+
+        assertThat(subject.getPercentViewable()).isNull();
+    }
+
+    @Test
+    public void getPercentViewable_withIntegerGreaterThan100_shouldReturnNull() throws Exception {
+        String videoViewabilityXml = "<MoPubViewabilityTracker" +
+                "                             viewablePlaytime=\"1\"" +
+                "                             percentViewable=\"101\">" +
+                "                         <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
+                "                     </MoPubViewabilityTracker>";
+
+        subject = new VideoViewabilityTrackerXmlManager(createNode(videoViewabilityXml));
+
+        assertThat(subject.getPercentViewable()).isNull();
+    }
+
+    @Test
+    public void getPercentViewable_withInvalidPercentViewable_shouldReturnNull() throws Exception {
+        String videoViewabilityXml = "<MoPubViewabilityTracker" +
+                "                             viewablePlaytime=\"1\"" +
+                "                             percentViewable=\"1234!@#$%^*(asdf\">" +
+                "                         <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
+                "                     </MoPubViewabilityTracker>";
+
+        subject = new VideoViewabilityTrackerXmlManager(createNode(videoViewabilityXml));
+
+        assertThat(subject.getPercentViewable()).isNull();
+    }
+
+    @Test
+    public void getVideoViewabilityTrackerUrl_shouldReturnVideoViewabilityTrackerUrl() throws Exception {
+        String videoViewabilityXml = "<MoPubViewabilityTracker" +
+                "                             viewablePlaytime=\"2\"" +
+                "                             percentViewable=\"50%\">" +
+                "                         <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
+                "                     </MoPubViewabilityTracker>";
+
+        subject = new VideoViewabilityTrackerXmlManager(createNode(videoViewabilityXml));
+
+        assertThat(subject.getVideoViewabilityTrackerUrl())
+                .isEqualTo("https://ad.server.com/impression/dot.gif");
+    }
+
+    @Test
+    public void getVideoViewabilityTrackerUrl_withoutTrackerUrl_shouldReturnEmptyString() throws Exception {
+        String videoViewabilityXml = "<MoPubViewabilityTracker" +
+                "                             viewablePlaytime=\"2\"" +
+                "                             percentViewable=\"50%\">" +
+                "                     </MoPubViewabilityTracker>";
+
+        subject = new VideoViewabilityTrackerXmlManager(createNode(videoViewabilityXml));
+
+        assertThat(subject.getVideoViewabilityTrackerUrl()).isEmpty();
+    }
+
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/ViewGestureDetectorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/ViewGestureDetectorTest.java
index 0c0935ef..feb326a2 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/ViewGestureDetectorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/ViewGestureDetectorTest.java
@@ -11,6 +11,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
+import org.robolectric.Shadows;
+import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowGestureDetector;
 
 import static com.mopub.mobileads.ViewGestureDetector.UserClickListener;
@@ -19,9 +21,10 @@
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.stub;
 import static org.mockito.Mockito.verify;
-import static org.robolectric.Robolectric.shadowOf;
+
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class ViewGestureDetectorTest {
     private Activity context;
     private ViewGestureDetector subject;
@@ -46,7 +49,7 @@ public void setUp() throws Exception {
     public void constructor_shouldDisableLongPressAndSetGestureListener() throws Exception {
         subject = new ViewGestureDetector(context, view, mockAdReport);
 
-        ShadowGestureDetector shadowGestureDetector = shadowOf(subject);
+        ShadowGestureDetector shadowGestureDetector = Shadows.shadowOf(subject);
 
         assertThat(subject.isLongpressEnabled()).isFalse();
         assertThat(shadowGestureDetector.getListener()).isNotNull();
@@ -84,18 +87,20 @@ public void onTouchEvent_whenActionDown_shouldForwardOnTouchEvent() throws Excep
 
         subject.sendTouchEvent(expectedMotionEvent);
 
-        MotionEvent actualMotionEvent = shadowOf(subject).getOnTouchEventMotionEvent();
+        MotionEvent actualMotionEvent = Shadows.shadowOf(subject).getOnTouchEventMotionEvent();
 
         assertThat(actualMotionEvent).isEqualTo(expectedMotionEvent);
     }
 
     @Test
     public void onTouchEvent_whenActionMoveWithinView_shouldForwardOnTouchEvent() throws Exception {
-        MotionEvent expectedMotionEvent = createActionMove(160);
+        MotionEvent downEvent = createMotionEvent(MotionEvent.ACTION_DOWN);
+        subject.sendTouchEvent(downEvent);
 
+        MotionEvent expectedMotionEvent = createActionMove(160);
         subject.sendTouchEvent(expectedMotionEvent);
 
-        MotionEvent actualMotionEvent = shadowOf(subject).getOnTouchEventMotionEvent();
+        MotionEvent actualMotionEvent = Shadows.shadowOf(subject).getOnTouchEventMotionEvent();
 
         assertThat(actualMotionEvent).isEqualTo(expectedMotionEvent);
         verify(adAlertGestureListener, never()).reset();
@@ -105,7 +110,7 @@ public void onTouchEvent_whenActionMoveWithinView_shouldForwardOnTouchEvent() th
     public void sendTouchEvent_whenReceiveTouchEventOutsideOfViewInXDirection_shouldResetAlertState() throws Exception {
         subject.sendTouchEvent(createActionMove(350));
 
-        MotionEvent actualMotionEvent = shadowOf(subject).getOnTouchEventMotionEvent();
+        MotionEvent actualMotionEvent = Shadows.shadowOf(subject).getOnTouchEventMotionEvent();
 
         assertThat(actualMotionEvent).isNull();
         verify(adAlertGestureListener).reset();
@@ -116,7 +121,7 @@ public void sendTouchEvent_whenReceiveTouchEventOutsideOfViewInYDirection_should
         MotionEvent verticalMotion = MotionEvent.obtain(0, 0, MotionEvent.ACTION_MOVE, 160, 200, 0);
         subject.sendTouchEvent(verticalMotion);
 
-        MotionEvent actualMotionEvent = shadowOf(subject).getOnTouchEventMotionEvent();
+        MotionEvent actualMotionEvent = Shadows.shadowOf(subject).getOnTouchEventMotionEvent();
 
         assertThat(actualMotionEvent).isNull();
         verify(adAlertGestureListener).reset();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
index 529c4a44..af013817 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
@@ -28,7 +28,6 @@
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
 import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
 import com.mopub.mraid.MraidNativeCommandHandler;
-import com.mopub.network.Networking;
 import com.mopub.network.PlayServicesUrlRewriter;
 
 import org.junit.After;
@@ -38,11 +37,15 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
+import org.robolectric.RuntimeEnvironment;
+import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowConnectivityManager;
 import org.robolectric.shadows.ShadowLocationManager;
 import org.robolectric.shadows.ShadowNetworkInfo;
 
+import static android.Manifest.permission.ACCESS_COARSE_LOCATION;
+import static android.Manifest.permission.ACCESS_FINE_LOCATION;
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
 import static android.net.ConnectivityManager.TYPE_DUMMY;
 import static android.net.ConnectivityManager.TYPE_ETHERNET;
@@ -61,11 +64,9 @@
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.when;
-import static org.robolectric.Robolectric.application;
-import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
-@Config(shadows = {MoPubShadowTelephonyManager.class})
+@Config(constants = BuildConfig.class, shadows = {MoPubShadowTelephonyManager.class})
 public class WebViewAdUrlGeneratorTest {
 
     private static final String TEST_UDID = "20b013c721c";
@@ -84,7 +85,9 @@
     @Before
     public void setup() {
         context = spy(Robolectric.buildActivity(Activity.class).create().get());
-        shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
+        Shadows.shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
+        Shadows.shadowOf(context).grantPermissions(ACCESS_FINE_LOCATION);
+        Shadows.shadowOf(context).grantPermissions(ACCESS_COARSE_LOCATION);
 
         // Set the expected screen dimensions to arbitrary numbers
         final Resources spyResources = spy(context.getResources());
@@ -118,13 +121,12 @@ public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {
 
         subject = new WebViewAdUrlGenerator(context,
                 new MraidNativeCommandHandler().isStorePictureSupported(context));
-        Settings.Secure.putString(application.getContentResolver(), Settings.Secure.ANDROID_ID, TEST_UDID);
+        Settings.Secure.putString(RuntimeEnvironment.application.getContentResolver(), Settings.Secure.ANDROID_ID, TEST_UDID);
         expectedUdid = "sha%3A" + Utils.sha1(TEST_UDID);
-        configuration = application.getResources().getConfiguration();
-        shadowTelephonyManager = (MoPubShadowTelephonyManager) shadowOf((TelephonyManager) application.getSystemService(Context.TELEPHONY_SERVICE));
-        shadowConnectivityManager = shadowOf((ConnectivityManager) application.getSystemService(Context.CONNECTIVITY_SERVICE));
+        configuration = RuntimeEnvironment.application.getResources().getConfiguration();
+        shadowTelephonyManager = (MoPubShadowTelephonyManager) Shadows.shadowOf((TelephonyManager) RuntimeEnvironment.application.getSystemService(Context.TELEPHONY_SERVICE));
+        shadowConnectivityManager = Shadows.shadowOf((ConnectivityManager) RuntimeEnvironment.application.getSystemService(Context.CONNECTIVITY_SERVICE));
         methodBuilder = TestMethodBuilderFactory.getSingletonMock();
-        Networking.useHttps(false);
     }
 
     @After
@@ -143,9 +145,8 @@ public void generateAdUrl_shouldIncludeMinimumFields() throws Exception {
 
     @Test
     public void generateAdUrl_withHttpsScheme() throws Exception {
-        Networking.useHttps(true);
         String adUrl = generateMinimumUrlString();
-        assertThat(adUrl).startsWith("https://");
+        assertThat(adUrl).startsWith("http://");
     }
 
     @Test
@@ -332,7 +333,7 @@ public void generateAdUrl_shouldSetNetworkType() throws Exception {
     public void generateAdUrl_whenNoNetworkPermission_shouldGenerateUnknownNetworkType() throws Exception {
         AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
 
-        shadowOf(context).denyPermissions(ACCESS_NETWORK_STATE);
+        Shadows.shadowOf(context).denyPermissions(ACCESS_NETWORK_STATE);
         shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_MOBILE));
 
         String adUrl = generateMinimumUrlString();
@@ -380,8 +381,8 @@ public void generateAdUrl_whenLocationServiceGpsProviderHasMostRecentLocation_sh
 
         // Mock out the LocationManager's last known location to be more recent than the
         // developer-supplied location.
-        ShadowLocationManager shadowLocationManager = Robolectric.shadowOf(
-                (LocationManager) application.getSystemService(Context.LOCATION_SERVICE));
+        ShadowLocationManager shadowLocationManager = Shadows.shadowOf(
+                (LocationManager) RuntimeEnvironment.application.getSystemService(Context.LOCATION_SERVICE));
         Location locationFromSdk = new Location("");
         locationFromSdk.setLatitude(37);
         locationFromSdk.setLongitude(-122);
@@ -396,6 +397,91 @@ public void generateAdUrl_whenLocationServiceGpsProviderHasMostRecentLocation_sh
         assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEqualTo("1");
     }
 
+    @Test
+    public void generateAdUrl_whenLocationServiceGpsProviderHasMostRecentLocation_WithFineLocationPermissionOnly_shouldUseLocationServiceValue() {
+        Shadows.shadowOf(context).denyPermissions(ACCESS_COARSE_LOCATION);
+
+        Location locationFromDeveloper = new Location("");
+        locationFromDeveloper.setLatitude(42);
+        locationFromDeveloper.setLongitude(-42);
+        locationFromDeveloper.setAccuracy(3.5f);
+        locationFromDeveloper.setTime(1000);
+
+        // Mock out the LocationManager's last known location to be more recent than the
+        // developer-supplied location.
+        ShadowLocationManager shadowLocationManager = Shadows.shadowOf(
+                (LocationManager) RuntimeEnvironment.application.getSystemService(Context.LOCATION_SERVICE));
+        Location locationFromSdk = new Location("");
+        locationFromSdk.setLatitude(37);
+        locationFromSdk.setLongitude(-122);
+        locationFromSdk.setAccuracy(5.0f);
+        locationFromSdk.setTime(2000);
+        shadowLocationManager.setLastKnownLocation(LocationManager.GPS_PROVIDER, locationFromSdk);
+
+        String adUrl = subject.withLocation(locationFromDeveloper)
+                .generateUrlString("ads.mopub.com");
+        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isEqualTo("37.0,-122.0");
+        assertThat(getParameterFromRequestUrl(adUrl, "lla")).isEqualTo("5");
+        assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEqualTo("1");
+    }
+
+    @Test
+    public void generateAdUrl_whenLocationServiceGpsProviderHasMostRecentLocation_WithCoarseLocationPermissionOnly_shouldUseDeveloperSuppliedLocation() {
+        Shadows.shadowOf(context).denyPermissions(ACCESS_FINE_LOCATION);
+
+        Location locationFromDeveloper = new Location("");
+        locationFromDeveloper.setLatitude(42);
+        locationFromDeveloper.setLongitude(-42);
+        locationFromDeveloper.setAccuracy(3.5f);
+        locationFromDeveloper.setTime(1000);
+
+        // Mock out the LocationManager's last known location to be more recent than the
+        // developer-supplied location.
+        ShadowLocationManager shadowLocationManager = Shadows.shadowOf(
+                (LocationManager) RuntimeEnvironment.application.getSystemService(Context.LOCATION_SERVICE));
+        Location locationFromSdk = new Location("");
+        locationFromSdk.setLatitude(37);
+        locationFromSdk.setLongitude(-122);
+        locationFromSdk.setAccuracy(5.0f);
+        locationFromSdk.setTime(2000);
+        shadowLocationManager.setLastKnownLocation(LocationManager.GPS_PROVIDER, locationFromSdk);
+
+        String adUrl = subject.withLocation(locationFromDeveloper)
+                .generateUrlString("ads.mopub.com");
+        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isEqualTo("42.0,-42.0");
+        assertThat(getParameterFromRequestUrl(adUrl, "lla")).isEqualTo("3");
+        assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEmpty();
+    }
+
+    @Test
+    public void generateAdUrl_whenLocationServiceGpsProviderHasMostRecentLocation_WithNoLocationPermission_shouldUseDeveloperSuppliedLocation() {
+        Shadows.shadowOf(context).denyPermissions(ACCESS_FINE_LOCATION);
+        Shadows.shadowOf(context).denyPermissions(ACCESS_COARSE_LOCATION);
+
+        Location locationFromDeveloper = new Location("");
+        locationFromDeveloper.setLatitude(42);
+        locationFromDeveloper.setLongitude(-42);
+        locationFromDeveloper.setAccuracy(3.5f);
+        locationFromDeveloper.setTime(1000);
+
+        // Mock out the LocationManager's last known location to be more recent than the
+        // developer-supplied location.
+        ShadowLocationManager shadowLocationManager = Shadows.shadowOf(
+                (LocationManager) RuntimeEnvironment.application.getSystemService(Context.LOCATION_SERVICE));
+        Location locationFromSdk = new Location("");
+        locationFromSdk.setLatitude(37);
+        locationFromSdk.setLongitude(-122);
+        locationFromSdk.setAccuracy(5.0f);
+        locationFromSdk.setTime(2000);
+        shadowLocationManager.setLastKnownLocation(LocationManager.GPS_PROVIDER, locationFromSdk);
+
+        String adUrl = subject.withLocation(locationFromDeveloper)
+                .generateUrlString("ads.mopub.com");
+        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isEqualTo("42.0,-42.0");
+        assertThat(getParameterFromRequestUrl(adUrl, "lla")).isEqualTo("3");
+        assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEmpty();
+    }
+
     @Test
     public void generateAdUrl_whenDeveloperSuppliesMoreRecentLocationThanLocationService_shouldUseDeveloperSuppliedLocation() {
         Location locationFromDeveloper = new Location("");
@@ -404,8 +490,8 @@ public void generateAdUrl_whenDeveloperSuppliesMoreRecentLocationThanLocationSer
         locationFromDeveloper.setAccuracy(3.5f);
         locationFromDeveloper.setTime(1000);
 
-        ShadowLocationManager shadowLocationManager = Robolectric.shadowOf(
-                (LocationManager) application.getSystemService(Context.LOCATION_SERVICE));
+        ShadowLocationManager shadowLocationManager = Shadows.shadowOf(
+                (LocationManager) RuntimeEnvironment.application.getSystemService(Context.LOCATION_SERVICE));
 
         // Mock out the LocationManager's last known location to be older than the
         // developer-supplied location.
@@ -433,8 +519,8 @@ public void generateAdUrl_whenLocationServiceNetworkProviderHasMostRecentLocatio
 
         // Mock out the LocationManager's last known location to be more recent than the
         // developer-supplied location.
-        ShadowLocationManager shadowLocationManager = Robolectric.shadowOf(
-                (LocationManager) application.getSystemService(Context.LOCATION_SERVICE));
+        ShadowLocationManager shadowLocationManager = Shadows.shadowOf(
+                (LocationManager) RuntimeEnvironment.application.getSystemService(Context.LOCATION_SERVICE));
         Location locationFromSdk = new Location("");
         locationFromSdk.setLatitude(38);
         locationFromSdk.setLongitude(-123);
@@ -450,6 +536,94 @@ public void generateAdUrl_whenLocationServiceNetworkProviderHasMostRecentLocatio
         assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEqualTo("1");
     }
 
+    @Test
+    public void generateAdUrl_whenLocationServiceNetworkProviderHasMostRecentLocation_WithFineLocationPermissionOnly_shouldUseLocationServiceValue() {
+        Shadows.shadowOf(context).denyPermissions(ACCESS_COARSE_LOCATION);
+
+        Location locationFromDeveloper = new Location("");
+        locationFromDeveloper.setLatitude(42);
+        locationFromDeveloper.setLongitude(-42);
+        locationFromDeveloper.setAccuracy(3.5f);
+        locationFromDeveloper.setTime(1000);
+
+        // Mock out the LocationManager's last known location to be more recent than the
+        // developer-supplied location.
+        ShadowLocationManager shadowLocationManager = Shadows.shadowOf(
+                (LocationManager) RuntimeEnvironment.application.getSystemService(Context.LOCATION_SERVICE));
+        Location locationFromSdk = new Location("");
+        locationFromSdk.setLatitude(38);
+        locationFromSdk.setLongitude(-123);
+        locationFromSdk.setAccuracy(5.0f);
+        locationFromSdk.setTime(2000);
+        shadowLocationManager.setLastKnownLocation(LocationManager.NETWORK_PROVIDER,
+                locationFromSdk);
+
+        String adUrl = subject.withLocation(locationFromDeveloper)
+                .generateUrlString("ads.mopub.com");
+        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isEqualTo("38.0,-123.0");
+        assertThat(getParameterFromRequestUrl(adUrl, "lla")).isEqualTo("5");
+        assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEqualTo("1");
+    }
+
+    @Test
+    public void generateAdUrl_whenLocationServiceNetworkProviderHasMostRecentLocation_WithCoarseLocationPermissionOnly_shouldUseLocationServiceValue() {
+        Shadows.shadowOf(context).denyPermissions(ACCESS_FINE_LOCATION);
+
+        Location locationFromDeveloper = new Location("");
+        locationFromDeveloper.setLatitude(42);
+        locationFromDeveloper.setLongitude(-42);
+        locationFromDeveloper.setAccuracy(3.5f);
+        locationFromDeveloper.setTime(1000);
+
+        // Mock out the LocationManager's last known location to be more recent than the
+        // developer-supplied location.
+        ShadowLocationManager shadowLocationManager = Shadows.shadowOf(
+                (LocationManager) RuntimeEnvironment.application.getSystemService(Context.LOCATION_SERVICE));
+        Location locationFromSdk = new Location("");
+        locationFromSdk.setLatitude(38);
+        locationFromSdk.setLongitude(-123);
+        locationFromSdk.setAccuracy(5.0f);
+        locationFromSdk.setTime(2000);
+        shadowLocationManager.setLastKnownLocation(LocationManager.NETWORK_PROVIDER,
+                locationFromSdk);
+
+        String adUrl = subject.withLocation(locationFromDeveloper)
+                .generateUrlString("ads.mopub.com");
+        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isEqualTo("38.0,-123.0");
+        assertThat(getParameterFromRequestUrl(adUrl, "lla")).isEqualTo("5");
+        assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEqualTo("1");
+    }
+
+    @Test
+    public void generateAdUrl_whenLocationServiceNetworkProviderHasMostRecentLocation_WithNoLocationPermission_shouldUseDeveloperSuppliedLocation() {
+        Shadows.shadowOf(context).denyPermissions(ACCESS_FINE_LOCATION);
+        Shadows.shadowOf(context).denyPermissions(ACCESS_COARSE_LOCATION);
+
+        Location locationFromDeveloper = new Location("");
+        locationFromDeveloper.setLatitude(42);
+        locationFromDeveloper.setLongitude(-42);
+        locationFromDeveloper.setAccuracy(3.5f);
+        locationFromDeveloper.setTime(1000);
+
+        // Mock out the LocationManager's last known location to be more recent than the
+        // developer-supplied location.
+        ShadowLocationManager shadowLocationManager = Shadows.shadowOf(
+                (LocationManager) RuntimeEnvironment.application.getSystemService(Context.LOCATION_SERVICE));
+        Location locationFromSdk = new Location("");
+        locationFromSdk.setLatitude(38);
+        locationFromSdk.setLongitude(-123);
+        locationFromSdk.setAccuracy(5.0f);
+        locationFromSdk.setTime(2000);
+        shadowLocationManager.setLastKnownLocation(LocationManager.NETWORK_PROVIDER,
+                locationFromSdk);
+
+        String adUrl = subject.withLocation(locationFromDeveloper)
+                .generateUrlString("ads.mopub.com");
+        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isEqualTo("42.0,-42.0");
+        assertThat(getParameterFromRequestUrl(adUrl, "lla")).isEqualTo("3");
+        assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEmpty();
+    }
+
     @Test
     public void generateAdUrl_withNullPackageName_withEmptyPackageName_shouldNotIncludeBundleKey() {
         when(context.getPackageName()).thenReturn(null).thenReturn("");
@@ -480,8 +654,8 @@ public void disableLocationCollection_whenLocationServiceHasMostRecentLocation_s
         MoPub.setLocationAwareness(MoPub.LocationAwareness.DISABLED);
 
         // Mock out the LocationManager's last known location.
-        ShadowLocationManager shadowLocationManager = Robolectric.shadowOf(
-                (LocationManager) application.getSystemService(Context.LOCATION_SERVICE));
+        ShadowLocationManager shadowLocationManager = Shadows.shadowOf(
+                (LocationManager) RuntimeEnvironment.application.getSystemService(Context.LOCATION_SERVICE));
         Location locationFromSdk = new Location("");
         locationFromSdk.setLatitude(37);
         locationFromSdk.setLongitude(-122);
@@ -537,7 +711,7 @@ public String build() {
             return "http://ads.mopub.com/m/ad" +
                     "?v=6" +
                     paramIfNotEmpty("id", adUnitId) +
-                    "&nv=" + MoPub.SDK_VERSION +
+                    "&nv=" + Uri.encode(MoPub.SDK_VERSION) +
                     "&dn=" + Build.MANUFACTURER +
                     "%2C" + Build.MODEL +
                     "%2C" + Build.PRODUCT +
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventBannerFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventBannerFactoryTest.java
index 771f97c1..388ae73f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventBannerFactoryTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventBannerFactoryTest.java
@@ -2,17 +2,20 @@
 
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.AdTypeTranslator;
+import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.CustomEventBanner;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
 
 import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.HTML_BANNER;
 import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.MRAID_BANNER;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class CustomEventBannerFactoryTest {
 
     private CustomEventBannerFactory subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventInterstitialFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventInterstitialFactoryTest.java
index 81146585..86ca874d 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventInterstitialFactoryTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventInterstitialFactoryTest.java
@@ -2,17 +2,20 @@
 
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.AdTypeTranslator;
+import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.CustomEventInterstitial;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
 
 import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.HTML_INTERSTITIAL;
 import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.MRAID_INTERSTITIAL;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class CustomEventInterstitialFactoryTest {
 
     private CustomEventInterstitialFactory subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpClientFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpClientFactory.java
deleted file mode 100644
index 2a364a19..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpClientFactory.java
+++ /dev/null
@@ -1,14 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import com.mopub.mobileads.factories.HttpClientFactory;
-
-import org.apache.http.impl.client.DefaultHttpClient;
-
-public class TestHttpClientFactory extends HttpClientFactory {
-    private DefaultHttpClient instance = new DefaultHttpClient();
-
-    @Override
-    protected DefaultHttpClient internalCreate(int timeout) {
-        return instance;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpResponseWithHeaders.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpResponseWithHeaders.java
index 1a7fde20..8c3229b5 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpResponseWithHeaders.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpResponseWithHeaders.java
@@ -2,7 +2,7 @@
 
 import org.apache.http.Header;
 import org.apache.http.message.BasicHeader;
-import org.robolectric.tester.org.apache.http.TestHttpResponse;
+import org.robolectric.shadows.httpclient.TestHttpResponse;
 
 import java.util.HashMap;
 import java.util.Map;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastManagerFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastManagerFactory.java
index d2e60e1b..9ccbb2c9 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastManagerFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastManagerFactory.java
@@ -19,7 +19,7 @@ private static TestVastManagerFactory getTestFactory() {
     }
 
     @Override
-    public VastManager internalCreate(final Context context) {
+    public VastManager internalCreate(final Context context, final boolean preCacheVideo) {
         return getTestFactory().mockVastManager;
     }
 }
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastVideoDownloadTaskFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastVideoDownloadTaskFactory.java
deleted file mode 100644
index fb9b24f7..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastVideoDownloadTaskFactory.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import com.mopub.mobileads.VastVideoDownloadTask;
-import com.mopub.mobileads.factories.VastVideoDownloadTaskFactory;
-
-import static org.mockito.Mockito.mock;
-
-public class TestVastVideoDownloadTaskFactory extends VastVideoDownloadTaskFactory {
-    private static VastVideoDownloadTask singletonMock = mock(VastVideoDownloadTask.class);
-
-    public static VastVideoDownloadTask getSingletonMock() {
-        return singletonMock;
-    }
-
-    @Override
-    protected VastVideoDownloadTask internalCreate(VastVideoDownloadTask.VastVideoDownloadTaskListener vastVideoDownloadTaskListener) {
-        return singletonMock;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpClientsTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpClientsTest.java
deleted file mode 100644
index b2bbbb3b..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpClientsTest.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package com.mopub.mobileads.util;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.ThreadUtils;
-import org.apache.http.client.HttpClient;
-import org.apache.http.conn.ClientConnectionManager;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class HttpClientsTest {
-
-    public static final int HTTP_CLIENT_SHUTDOWN_TIME = 100;
-    private HttpClient httpClient;
-    private ClientConnectionManager clientConnectionManager;
-
-    @Before
-    public void setUp() throws Exception {
-        httpClient = mock(HttpClient.class);
-        clientConnectionManager = mock(ClientConnectionManager.class);
-        stub(httpClient.getConnectionManager()).toReturn(clientConnectionManager);
-    }
-
-    @Test
-    public void safeShutdown_shouldShutdownHttpClient() throws Exception {
-        HttpClients.safeShutdown(httpClient);
-
-        ThreadUtils.pause(HTTP_CLIENT_SHUTDOWN_TIME);
-
-        verify(clientConnectionManager).shutdown();
-    }
-
-    @Test
-    public void safeShutdown_withNullHttpClient_shouldNotBlowUp() throws Exception {
-        HttpClients.safeShutdown(null);
-
-        ThreadUtils.pause(HTTP_CLIENT_SHUTDOWN_TIME);
-
-        verify(clientConnectionManager, never()).shutdown();
-    }
-
-    @Test
-    public void safeShutdown_withNullConnectionManager_shouldNotBlowUp() throws Exception {
-        stub(httpClient.getConnectionManager()).toReturn(null);
-        HttpClients.safeShutdown(httpClient);
-
-        ThreadUtils.pause(HTTP_CLIENT_SHUTDOWN_TIME);
-
-        verify(clientConnectionManager, never()).shutdown();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/WebViewsTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/WebViewsTest.java
index 712eef93..08372f7f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/WebViewsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/util/WebViewsTest.java
@@ -5,15 +5,18 @@
 import android.webkit.WebView;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class WebViewsTest {
 
     @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1)
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/XmlUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/XmlUtilsTest.java
index 426819d4..61ac31e0 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/XmlUtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/util/XmlUtilsTest.java
@@ -1,10 +1,12 @@
 package com.mopub.mobileads.util;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
 import org.w3c.dom.Document;
 import org.w3c.dom.Node;
 import org.xml.sax.InputSource;
@@ -24,11 +26,12 @@
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class XmlUtilsTest {
 
     // From Microsoft's sample xml documents page: https://msdn.microsoft.com/en-us/library/bb387026.aspx
     private String testXml = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" +
-            "<aw:PurchaseOrders xmlns:aw=\"http://www.adventure-works.com\">\n" +
+            "<aw:PurchaseOrders xmlns:aw=\"https://www.adventure-works.com\">\n" +
             "  <aw:PurchaseOrder aw:PurchaseOrderNumber=\"99503\" aw:OrderDate=\"1999-10-20\">\n" +
             "    <aw:Address aw:Type=\"Shipping\">\n" +
             "      <aw:Name>Ellen Adams</aw:Name>\n" +
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java
index 79d601c8..7a3ba220 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java
@@ -5,6 +5,7 @@
 import android.view.View;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.test.support.TestMraidControllerFactory;
 import com.mopub.mraid.MraidController.MraidListener;
 
@@ -13,6 +14,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
 import org.mockito.Mock;
+import org.robolectric.annotation.Config;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -25,6 +27,7 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class MraidBannerTest {
     private static final String INPUT_HTML_DATA = "%3Chtml%3E%3C%2Fhtml%3E";
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java
index 7ecdaadb..03d09d1a 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java
@@ -11,6 +11,7 @@
 import com.mopub.common.AdReport;
 import com.mopub.common.Constants;
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 import com.mopub.mraid.MraidBridge.MraidBridgeListener;
 import com.mopub.mraid.MraidBridge.MraidWebView;
 import com.mopub.mraid.MraidNativeCommandHandler.MraidCommandFailureListener;
@@ -24,6 +25,7 @@
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowApplication;
 
 import java.net.URI;
 import java.util.HashMap;
@@ -44,6 +46,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class MraidBridgeTest {
     @Mock MraidNativeCommandHandler mockNativeCommandHandler;
     @Mock MraidBridgeListener mockBridgeListener;
@@ -69,7 +72,7 @@ public void setUp() {
     }
 
     @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
-    @Config(reportSdk = Build.VERSION_CODES.JELLY_BEAN_MR1, emulateSdk = Build.VERSION_CODES.JELLY_BEAN_MR1)
+    @Config(sdk = Build.VERSION_CODES.JELLY_BEAN_MR1)
     @Test
     public void attachView_atLeastJellyBeanMr1_withInterstitial_shouldAutoPlayVideo() {
         when(mockInterstitialWebView.getSettings()).thenReturn(mockWebSettings);
@@ -80,7 +83,7 @@ public void attachView_atLeastJellyBeanMr1_withInterstitial_shouldAutoPlayVideo(
     }
 
     @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
-    @Config(reportSdk = Build.VERSION_CODES.JELLY_BEAN_MR1, emulateSdk = Build.VERSION_CODES.JELLY_BEAN_MR1)
+    @Config(sdk = Build.VERSION_CODES.JELLY_BEAN_MR1)
     @Test
     public void attachView_atLeastJellyBeanMr1_withInline_shouldNotAutoPlayVideo() {
         when(mockBannerWebView.getSettings()).thenReturn(mockWebSettings);
@@ -91,7 +94,7 @@ public void attachView_atLeastJellyBeanMr1_withInline_shouldNotAutoPlayVideo() {
     }
 
     @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
-    @Config(reportSdk = Build.VERSION_CODES.JELLY_BEAN, emulateSdk = Build.VERSION_CODES.JELLY_BEAN)
+    @Config(sdk = Build.VERSION_CODES.JELLY_BEAN)
     @Test
     public void attachView_belowJellyBeanMr1_withInterstitial_shouldNotAutoPlayVideo() {
         when(mockInterstitialWebView.getSettings()).thenReturn(mockWebSettings);
@@ -105,7 +108,7 @@ public void attachView_belowJellyBeanMr1_withInterstitial_shouldNotAutoPlayVideo
     }
 
     @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
-    @Config(reportSdk = Build.VERSION_CODES.JELLY_BEAN, emulateSdk = Build.VERSION_CODES.JELLY_BEAN)
+    @Config(sdk = Build.VERSION_CODES.JELLY_BEAN)
     @Test
     public void attachView_belowJellyBeanMr1_withInline_shouldNotAutoPlayVideo() {
         when(mockBannerWebView.getSettings()).thenReturn(mockWebSettings);
@@ -219,7 +222,7 @@ public void handleShouldOverrideUrl_smsUrl_clicked_shouldStartActivity() {
 
         boolean result = subjectBanner.handleShouldOverrideUrl("sms://123456789");
 
-        Intent startedIntent = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent startedIntent = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(startedIntent).isNotNull();
         assertThat(startedIntent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
         assertThat(startedIntent.getComponent()).isNull();
@@ -229,7 +232,7 @@ public void handleShouldOverrideUrl_smsUrl_clicked_shouldStartActivity() {
     @Test
     public void handleShouldOverrideUrl_normalUrl_shouldReturnFalse() {
         attachWebViews();
-        boolean result = subjectBanner.handleShouldOverrideUrl("http://www.mopub.com");
+        boolean result = subjectBanner.handleShouldOverrideUrl("https://www.mopub.com");
 
         assertThat(result).isFalse();
     }
@@ -242,7 +245,7 @@ public void runCommand_requiresClick_notClicked_shouldThrowException()
         subjectBanner.attachView(mockBannerWebView);
         subjectBanner.setClicked(false);
         Map<String, String> params = new HashMap<String, String>();
-        params.put("uri", "http://valid-url");
+        params.put("uri", "https://valid-url");
 
         subjectBanner.runCommand(MraidJavascriptCommand.PLAY_VIDEO, params);
     }
@@ -252,7 +255,7 @@ public void runCommand_requiresClick_clicked_shouldNotThrowException()
         attachWebViews();
         subjectBanner.setClicked(true);
         Map<String, String> params = new HashMap<String, String>();
-        params.put("uri", "http://valid-url");
+        params.put("uri", "https://valid-url");
 
         subjectBanner.runCommand(MraidJavascriptCommand.PLAY_VIDEO, params);
     }
@@ -263,7 +266,7 @@ public void runCommand_interstitial_requiresClick_notClicked_shouldThrowExceptio
         attachWebViews();
         subjectInterstitial.setClicked(false);
         Map<String, String> params = new HashMap<String, String>();
-        params.put("uri", "http://valid-url");
+        params.put("uri", "https://valid-url");
 
         subjectInterstitial.runCommand(MraidJavascriptCommand.OPEN, params);
     }
@@ -274,7 +277,7 @@ public void runCommand_interstitial_requiresClick_clicked_shouldNotThrowExceptio
         attachWebViews();
         subjectInterstitial.setClicked(true);
         Map<String, String> params = new HashMap<String, String>();
-        params.put("url", "http://valid-url");
+        params.put("url", "https://valid-url");
 
         subjectInterstitial.runCommand(MraidJavascriptCommand.OPEN, params);
     }
@@ -309,7 +312,7 @@ public void runCommand_expand_withUrl_shouldCallListener()
         attachWebViews();
         subjectBanner.setClicked(true);
         Map<String, String> params = new HashMap<String, String>();
-        params.put("url", "http://valid-url");
+        params.put("url", "https://valid-url");
         params.put("shouldUseCustomClose", "true");
 
         subjectBanner.runCommand(MraidJavascriptCommand.EXPAND, params);
@@ -317,7 +320,7 @@ public void runCommand_expand_withUrl_shouldCallListener()
         ArgumentCaptor<URI> uriCaptor = ArgumentCaptor.forClass(URI.class);
         verify(mockBridgeListener).onExpand(
                 uriCaptor.capture(), eq(true));
-        assertThat(uriCaptor.getValue().toString()).isEqualTo("http://valid-url");
+        assertThat(uriCaptor.getValue().toString()).isEqualTo("https://valid-url");
     }
 
     @Test
@@ -326,13 +329,13 @@ public void runCommand_playVideo_shouldCallListener()
         attachWebViews();
         subjectBanner.setClicked(true);
         Map<String, String> params = new HashMap<String, String>();
-        params.put("uri", "http://valid-url");
+        params.put("uri", "https://valid-url");
 
         subjectBanner.runCommand(MraidJavascriptCommand.PLAY_VIDEO, params);
 
         ArgumentCaptor<URI> uriCaptor = ArgumentCaptor.forClass(URI.class);
         verify(mockBridgeListener).onPlayVideo(uriCaptor.capture());
-        assertThat(uriCaptor.getValue().toString()).isEqualTo("http://valid-url");
+        assertThat(uriCaptor.getValue().toString()).isEqualTo("https://valid-url");
     }
 
     @Test
@@ -341,11 +344,11 @@ public void runCommand_storePicture_shouldCallListener()
         attachWebViews();
         subjectBanner.setClicked(true);
         Map<String, String> params = new HashMap<String, String>();
-        params.put("uri", "http://valid-url");
+        params.put("uri", "https://valid-url");
 
         subjectBanner.runCommand(MraidJavascriptCommand.STORE_PICTURE, params);
 
-        verify(mockNativeCommandHandler).storePicture(any(Context.class), eq("http://valid-url"),
+        verify(mockNativeCommandHandler).storePicture(any(Context.class), eq("https://valid-url"),
                 any(MraidCommandFailureListener.class));
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
index be20f706..f824e000 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
@@ -11,11 +11,13 @@
 import android.view.View;
 import android.widget.FrameLayout;
 
+import com.mopub.TestSdkHelper;
 import com.mopub.common.AdReport;
 import com.mopub.common.CloseableLayout.ClosePosition;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Utils;
 import com.mopub.mobileads.BaseVideoPlayerActivityTest;
+import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.MraidVideoPlayerActivity;
 import com.mopub.mraid.MraidBridge.MraidBridgeListener;
 import com.mopub.mraid.MraidBridge.MraidWebView;
@@ -35,7 +37,9 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowApplication;
 
 import java.net.URI;
 
@@ -54,6 +58,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class MraidControllerTest {
     private long broadcastIdentifier = 123;
     @Mock private AdReport mockAdReport;
@@ -74,7 +79,7 @@
 
     @Before
     public void setUp() {
-        Robolectric.setDisplayMetricsDensity(1.0f);
+        ShadowApplication.setDisplayMetricsDensity(1.0f);
 
         activity = spy(Robolectric.buildActivity(Activity.class).create().get());
         activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
@@ -383,11 +388,11 @@ public void handleExpand_withTwoPartUrl_shouldAttachTwoPartBridge_shouldCallOnEx
         // Move to DEFAULT state
         subject.handlePageLoad();
 
-        subject.handleExpand(URI.create("http://two-part-url"), false);
+        subject.handleExpand(URI.create("https://two-part-url"), false);
 
         verify(mockTwoPartBridge).setMraidBridgeListener(any(MraidBridgeListener.class));
         verify(mockTwoPartBridge).attachView(any(MraidWebView.class));
-        verify(mockTwoPartBridge).setContentUrl(URI.create("http://two-part-url").toString());
+        verify(mockTwoPartBridge).setContentUrl(URI.create("https://two-part-url").toString());
 
         assertThat(subject.getExpandedAdContainer().getChildCount()).isEqualTo(2);
         assertThat(subject.getAdContainer().getChildCount()).isEqualTo(1);
@@ -420,7 +425,7 @@ public void handleClose_fromExpandedState_shouldMoveWebViewToOriginalContainer_s
     @Test
     public void handleClose_fromTwoPartExpandedState_shouldDetachTwoPartBridge_shouldMoveWebViewToOriginalContainer_shouldNotFireOnClose()
             throws MraidCommandException {
-        URI uri = URI.create("http://two-part-url");
+        URI uri = URI.create("https://two-part-url");
 
         // Move to two part EXPANDED state
         subject.handlePageLoad();
@@ -453,9 +458,9 @@ public void handleClose_fromDefaultState_shouldHideAdContainer_shouldCallOnClose
 
     @Test
     public void handleShowVideo_shouldStartVideoPlayerActivity() {
-        subject.handleShowVideo("http://video");
+        subject.handleShowVideo("https://video");
         BaseVideoPlayerActivityTest.assertMraidVideoPlayerActivityStarted(
-                MraidVideoPlayerActivity.class, "http://video");
+                MraidVideoPlayerActivity.class, "https://video");
     }
 
     @Test
@@ -483,7 +488,7 @@ public void handleCustomClose_shouldCallCustomCloseChangedListener() {
     public void handleOpen_withMoPubNativeBrowserUrl_shouldOpenExternalBrowser() {
         subject.handleOpen("mopubnativebrowser://navigate?url=https%3A%2F%2Fwww.example.com");
 
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(intent.getDataString()).isEqualTo("https://www.example.com");
         assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
     }
@@ -493,18 +498,18 @@ public void handleOpen_withMalformedMoPubNativeBrowserUrl_shouldNotStartNewActiv
         // invalid host parameter 'nav'
         subject.handleOpen("mopubnativebrowser://nav?url=https%3A%2F%2Fwww.example.com");
 
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
+        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
     }
 
     @Test
     public void handleOpen_withApplicationUrl_shouldStartNewIntent() {
         String applicationUrl = "amzn://blah";
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW, Uri
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW, Uri
                 .parse(applicationUrl)), new ResolveInfo());
 
         subject.handleOpen(applicationUrl);
 
-        Intent startedIntent = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent startedIntent = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(startedIntent).isNotNull();
         // Since we are not using an Activity context, we should have FLAG_ACTIVITY_NEW_TASK
         assertThat(Utils.bitMaskContainsFlag(startedIntent.getFlags(),
@@ -516,12 +521,12 @@ public void handleOpen_withApplicationUrl_shouldStartNewIntent() {
 
     @Test
     public void handleOpen_withHttpApplicationUrl_shouldStartMoPubBrowser() {
-        String applicationUrl = "http://www.mopub.com/";
+        String applicationUrl = "https://www.mopub.com/";
 
         subject.handleOpen(applicationUrl);
 
-        Robolectric.runBackgroundTasks();
-        Intent startedIntent = Robolectric.getShadowApplication().getNextStartedActivity();
+        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
+        Intent startedIntent = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(startedIntent).isNotNull();
         // Since we are not using an Activity context, we should have FLAG_ACTIVITY_NEW_TASK
         assertThat(Utils.bitMaskContainsFlag(startedIntent.getFlags(),
@@ -539,7 +544,7 @@ public void handleOpen_withApplicationUrlThatCantBeHandled_shouldDefaultToMoPubB
 
         subject.handleOpen(applicationUrl);
 
-        Intent startedIntent = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent startedIntent = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(startedIntent).isNull();
 
         verify(mockMraidListener).onOpen();
@@ -551,7 +556,7 @@ public void handleOpen_withAboutBlankUrl_shouldFailSilently() {
 
         subject.handleOpen(url);
 
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
+        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
     }
 
     @Test
@@ -680,11 +685,11 @@ public void handleSetOrientationProperties_withForcedOrientation_withMissingConf
         assertThat(subject.getForceOrientation()).isEqualTo(MraidOrientation.NONE);
     }
 
-    @Config(reportSdk = Build.VERSION_CODES.HONEYCOMB_MR1)
     @Test
     public void handleSetOrientationProperties_beforeHoneycombMr2_withMissingConfigChangeScreenSize_shouldUpdateProperties() throws Exception {
         setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
                 ActivityInfo.CONFIG_ORIENTATION);
+        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.HONEYCOMB_MR1);
 
         subject.handleSetOrientationProperties(false, MraidOrientation.LANDSCAPE);
 
@@ -692,11 +697,11 @@ public void handleSetOrientationProperties_beforeHoneycombMr2_withMissingConfigC
         assertThat(subject.getForceOrientation()).isEqualTo(MraidOrientation.LANDSCAPE);
     }
 
-    @Config(reportSdk = Build.VERSION_CODES.HONEYCOMB_MR2)
     @Test
     public void handleSetOrientationProperties_atLeastHoneycombMr2_withMissingConfigChangeScreenSize_shouldThrowMraidCommandException() throws Exception {
         setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
                 ActivityInfo.CONFIG_ORIENTATION);
+        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.HONEYCOMB_MR2);
 
         try {
             subject.handleSetOrientationProperties(false, MraidOrientation.LANDSCAPE);
@@ -970,7 +975,7 @@ public void destroy_withExpandedState_shouldSetMraidWebViewsToNull()
         // Necessary to set up the webview before expanding. Also moves the state to DEFAULT.
         subject.handlePageLoad();
         assertThat(subject.getViewState()).isEqualTo(ViewState.DEFAULT);
-        subject.handleExpand(URI.create("http://two-part-url"), false);
+        subject.handleExpand(URI.create("https://two-part-url"), false);
 
         assertThat(subject.getMraidWebView()).isNotNull();
         assertThat(subject.getTwoPartWebView()).isNotNull();
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java
index 5424e6f2..3d38b27f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java
@@ -1,10 +1,10 @@
 package com.mopub.mraid;
 
 import android.app.Activity;
-import android.content.Context;
 import android.content.Intent;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.ResponseBodyInterstitialTest;
 
 import org.junit.Before;
@@ -13,26 +13,28 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
+import org.robolectric.Shadows;
+import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowActivity;
-import org.robolectric.shadows.ShadowLocalBroadcastManager;
+import org.robolectric.shadows.support.v4.ShadowLocalBroadcastManager;
 
 import java.util.HashMap;
 import java.util.Map;
 
+import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
+import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
-import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
-import static org.robolectric.Robolectric.shadowOf_;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class MraidInterstitialTest extends ResponseBodyInterstitialTest {
     private static final String EXPECTED_HTML_DATA = "<html></html>";
     private long broadcastIdentifier;
@@ -41,7 +43,7 @@
 
     private Map<String, Object> localExtras;
     private Map<String, String> serverExtras;
-    private Context context;
+    private Activity context;
 
     @Before
     public void setUp() throws Exception {
@@ -105,7 +107,7 @@ public void showInterstitial_shouldStartActivityWithIntent() throws Exception {
                 serverExtras);
         subject.showInterstitial();
 
-        ShadowActivity shadowActivity = shadowOf_(context);
+        ShadowActivity shadowActivity = Shadows.shadowOf(context);
         Intent intent = shadowActivity.getNextStartedActivityForResult().intent;
 
         assertThat(intent.getComponent().getClassName())
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java
index 533d66b3..e8ee9387 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java
@@ -11,20 +11,26 @@
 import android.os.Build;
 import android.os.Environment;
 import android.provider.CalendarContract;
+import android.support.annotation.NonNull;
+import android.util.Pair;
 import android.view.View;
 import android.view.WindowManager;
 import android.widget.LinearLayout;
 
+import com.mopub.TestSdkHelper;
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.test.support.ShadowAsyncTasks;
+import com.mopub.common.util.test.support.ShadowMoPubHttpUrlConnection;
+import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.test.support.FileUtils;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
-import com.mopub.mobileads.test.support.ThreadUtils;
+import com.mopub.mraid.MraidNativeCommandHandler.DownloadImageAsyncTask;
+import com.mopub.mraid.MraidNativeCommandHandler.DownloadImageAsyncTask.DownloadImageAsyncTaskListener;
 import com.mopub.mraid.MraidNativeCommandHandler.MraidCommandFailureListener;
 
-import org.apache.http.HttpResponse;
-import org.apache.http.client.methods.HttpUriRequest;
 import org.hamcrest.BaseMatcher;
 import org.hamcrest.Description;
+import org.junit.After;
 import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Test;
@@ -33,21 +39,25 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
+import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowAlertDialog;
+import org.robolectric.shadows.ShadowApplication;
 import org.robolectric.shadows.ShadowEnvironment;
 import org.robolectric.shadows.ShadowLog;
 import org.robolectric.shadows.ShadowToast;
 
 import java.io.File;
-import java.net.URI;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
+import java.util.TreeMap;
 
 import static android.content.DialogInterface.BUTTON_NEGATIVE;
 import static android.content.DialogInterface.BUTTON_POSITIVE;
+import static android.os.Environment.MEDIA_MOUNTED;
 import static com.mopub.mraid.MraidNativeCommandHandler.ANDROID_CALENDAR_CONTENT_TYPE;
+import static com.mopub.mraid.MraidNativeCommandHandler.MIME_TYPE_HEADER;
 import static java.io.File.separator;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
@@ -59,18 +69,19 @@
 import static org.mockito.Mockito.stub;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
-import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class, shadows = {ShadowAsyncTasks.class, ShadowMoPubHttpUrlConnection.class})
 public class MraidNativeCommandHandlerTest {
     private static final String IMAGE_URI_VALUE = "file://tmp/expectedFile.jpg";
+    private static final String REMOTE_IMAGE_URL = "https://www.mopub.com/expectedFile.jpg";
     private static final int TIME_TO_PAUSE_FOR_NETWORK = 300;
     private static final String FAKE_IMAGE_DATA = "imageFileData";
     //XXX: Robolectric or JUNIT doesn't support the correct suffix ZZZZZ in the parse pattern, so replacing xx:xx with xxxx for time.
     private static final String CALENDAR_START_TIME = "2013-08-14T20:00:00-0000";
 
-
-    @Mock MraidCommandFailureListener mraidCommandFailureListener;
+    @Mock MraidCommandFailureListener mockMraidCommandFailureListener;
+    @Mock DownloadImageAsyncTaskListener mockDownloadImageAsyncTaskListener;
     private MraidNativeCommandHandler subject;
     private Context context;
     private Map<String, String> params;
@@ -80,7 +91,6 @@
     private File fileWithoutExtension;
     private TestHttpResponseWithHeaders response;
 
-
     @Before
     public void setUp() throws Exception {
         subject = new MraidNativeCommandHandler();
@@ -90,17 +100,23 @@ public void setUp() throws Exception {
         expectedFile = new File(Environment.getExternalStorageDirectory(), "Pictures" + separator + "expectedFile.jpg");
         pictureDirectory = new File(Environment.getExternalStorageDirectory(), "Pictures");
         fileWithoutExtension = new File(pictureDirectory, "file");
+
+        // Mount external storage and grant necessary permissions
+        ShadowEnvironment.setExternalStorageState(MEDIA_MOUNTED);
+        ShadowApplication.getInstance().grantPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE);
+    }
+
+    @After
+    public void tearDown() {
+        ShadowToast.reset();
     }
 
-    @Ignore("Mraid 2.0")
     @Test
     public void showUserDownloadImageAlert_withActivityContext_shouldDisplayAlertDialog() throws Exception {
-        response = new TestHttpResponseWithHeaders(200, FAKE_IMAGE_DATA);
-
-        subject.storePicture(context, IMAGE_URI_VALUE, mraidCommandFailureListener);
+        subject.storePicture(context, IMAGE_URI_VALUE, mockMraidCommandFailureListener);
 
         AlertDialog alertDialog = ShadowAlertDialog.getLatestAlertDialog();
-        ShadowAlertDialog shadowAlertDialog = shadowOf(alertDialog);
+        ShadowAlertDialog shadowAlertDialog = Shadows.shadowOf(alertDialog);
 
         assertThat(alertDialog.isShowing());
 
@@ -112,96 +128,165 @@ public void showUserDownloadImageAlert_withActivityContext_shouldDisplayAlertDia
         assertThat(alertDialog.getButton(BUTTON_NEGATIVE)).isNotNull();
     }
 
-    @Ignore("Mraid 2.0")
     @Test
-    public void showUserDownloadImageAlert_whenOkayClicked_shouldDownloadImage() throws Exception {
-        response = new TestHttpResponseWithHeaders(200, FAKE_IMAGE_DATA);
-        Robolectric.addPendingHttpResponse(response);
+    public void showUserDownloadImageAlert_withAppContext_shouldToastAndStartDownloadImageAsyncTask() throws Exception {
+        assertThat(ShadowToast.shownToastCount()).isEqualTo(0);
 
-        subject.storePicture(context, IMAGE_URI_VALUE, mraidCommandFailureListener);
+        subject.storePicture(context.getApplicationContext(), IMAGE_URI_VALUE, mockMraidCommandFailureListener);
 
-        ShadowAlertDialog.getLatestAlertDialog().getButton(BUTTON_POSITIVE).performClick();
-        ThreadUtils.pause(TIME_TO_PAUSE_FOR_NETWORK);
+        assertThat(ShadowToast.shownToastCount()).isEqualTo(1);
+        assertThat(ShadowToast.getTextOfLatestToast()).isEqualTo("Downloading image to Picture gallery...");
 
-        assertThat(expectedFile.exists()).isTrue();
-        assertThat(expectedFile.length()).isEqualTo(FAKE_IMAGE_DATA.length());
+        assertThat(ShadowAsyncTasks.wasCalled()).isTrue();
+        assertThat(ShadowAsyncTasks.getLatestAsyncTask()).isInstanceOf(DownloadImageAsyncTask.class);
+        final List<?> latestParams = ShadowAsyncTasks.getLatestParams();
+        assertThat(latestParams).hasSize(1);
+        assertThat(latestParams.get(0)).isEqualTo(IMAGE_URI_VALUE);
+    }
+
+    @Test(expected = MraidCommandException.class)
+    public void showUserDownloadImageAlert_whenStorePictureNotSupported_shouldThrowMraidCommandException() throws Exception {
+        ShadowApplication.getInstance().denyPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE);
+
+        subject.storePicture(context, IMAGE_URI_VALUE, mockMraidCommandFailureListener);
     }
 
-    @Ignore("Mraid 2.0")
     @Test
-    public void showUserDownloadImageAlert_whenCancelClicked_shouldDismissDialog() throws Exception {
-        response = new TestHttpResponseWithHeaders(200, FAKE_IMAGE_DATA);
+    public void showUserDownloadImageAlert_whenOkayClicked_shouldStartDownloadImageAsyncTask() throws Exception {
+        subject.storePicture(context, IMAGE_URI_VALUE, mockMraidCommandFailureListener);
 
-        subject.storePicture(context, IMAGE_URI_VALUE, mraidCommandFailureListener);
+        ShadowAlertDialog.getLatestAlertDialog().getButton(BUTTON_POSITIVE).performClick();
+
+        assertThat(ShadowAsyncTasks.wasCalled()).isTrue();
+        assertThat(ShadowAsyncTasks.getLatestAsyncTask()).isInstanceOf(DownloadImageAsyncTask.class);
+        final List<?> latestParams = ShadowAsyncTasks.getLatestParams();
+        assertThat(latestParams).hasSize(1);
+        assertThat(latestParams.get(0)).isEqualTo(IMAGE_URI_VALUE);
+    }
+
+    @Test
+    public void showUserDownloadImageAlert_whenCancelClicked_shouldDismissDialog_shouldNotStartDownloadImageAsyncTask() throws Exception {
+        subject.storePicture(context, IMAGE_URI_VALUE, mockMraidCommandFailureListener);
 
         AlertDialog alertDialog = ShadowAlertDialog.getLatestAlertDialog();
-        ShadowAlertDialog shadowAlertDialog = shadowOf(alertDialog);
+        ShadowAlertDialog shadowAlertDialog = Shadows.shadowOf(alertDialog);
 
         alertDialog.getButton(BUTTON_NEGATIVE).performClick();
         assertThat(shadowAlertDialog.hasBeenDismissed()).isTrue();
+        assertThat(ShadowAsyncTasks.wasCalled()).isFalse();
+    }
 
-        assertThat(expectedFile.exists()).isFalse();
-        assertThat(expectedFile.length()).isEqualTo(0);
+    @Test
+    public void downloadImageAsyncTask_doInBackground_shouldReturnTrueAndCreateFile() throws Exception {
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, FAKE_IMAGE_DATA,
+                createHeaders(new Pair<String, String>("Content-Type", "image/jpg")));
+
+        final DownloadImageAsyncTask downloadImageAsyncTask =
+                new DownloadImageAsyncTask(context, mockDownloadImageAsyncTaskListener);
+
+        final Boolean result =
+                downloadImageAsyncTask.doInBackground(new String[]{REMOTE_IMAGE_URL});
+
+        assertThat(result).isTrue();
+        assertThat(expectedFile.exists()).isTrue();
+        assertThat(expectedFile.length()).isEqualTo(FAKE_IMAGE_DATA.length());
     }
 
-    @Ignore("MRAID 2.0")
     @Test
-    public void showUserDownloadImageAlert_withAppContext_shouldToastAndDownloadImage() throws Exception {
-        response = new TestHttpResponseWithHeaders(200, FAKE_IMAGE_DATA);
-        Robolectric.addPendingHttpResponse(response);
+    public void downloadImageAsyncTask_doInBackground_withLocationHeaderSet_shouldUseLocationHeaderAsFilename() throws Exception {
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, FAKE_IMAGE_DATA,
+                createHeaders(
+                        new Pair<String, String>("Content-Type", "image/jpg"),
+                        new Pair<String, String>("Location", "https://www.newhost.com/images/blah/file.wow")
+                )
+        );
 
-        assertThat(ShadowToast.shownToastCount()).isEqualTo(0);
+        final DownloadImageAsyncTask downloadImageAsyncTask =
+                new DownloadImageAsyncTask(context, mockDownloadImageAsyncTaskListener);
+        final Boolean result =
+                downloadImageAsyncTask.doInBackground(new String[]{REMOTE_IMAGE_URL});
 
-        subject.storePicture(context.getApplicationContext(), IMAGE_URI_VALUE, mraidCommandFailureListener);
-        ThreadUtils.pause(TIME_TO_PAUSE_FOR_NETWORK);
+        expectedFile = new File(Environment.getExternalStorageDirectory(), "Pictures" + separator + "file.wow.jpg");
 
-        assertThat(ShadowToast.shownToastCount()).isEqualTo(1);
-        assertThat(ShadowToast.getTextOfLatestToast()).isEqualTo("Downloading image to Picture gallery...");
+        assertThat(result).isTrue();
+        assertThat(expectedFile.exists()).isTrue();
+        assertThat(expectedFile.length()).isEqualTo(FAKE_IMAGE_DATA.length());
+    }
+
+    @Test
+    public void downloadImageAsyncTask_doInBackground_withMissingMimeTypeHeaders_shouldUseDefaultFilename() throws Exception {
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, FAKE_IMAGE_DATA);
 
-        Robolectric.runUiThreadTasks();
+        final DownloadImageAsyncTask downloadImageAsyncTask =
+                new DownloadImageAsyncTask(context, mockDownloadImageAsyncTaskListener);
+        final Boolean result =
+                downloadImageAsyncTask.doInBackground(new String[]{REMOTE_IMAGE_URL});
 
+        assertThat(result).isTrue();
         assertThat(expectedFile.exists()).isTrue();
         assertThat(expectedFile.length()).isEqualTo(FAKE_IMAGE_DATA.length());
     }
 
-    @Ignore("MRAID 2.0")
     @Test
-    public void showUserDownloadImageAlert_withAppContext_whenDownloadImageFails_shouldDisplayFailureToastAndNotDownloadImage() throws Exception {
-        response = new TestHttpResponseWithHeaders(200, FAKE_IMAGE_DATA);
-        Robolectric.addPendingHttpResponse(response);
+    public void downloadImageAsyncTask_doInBackground_withNullArray_shouldReturnFalseAndNotCreateFile() throws Exception {
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, FAKE_IMAGE_DATA,
+                createHeaders(new Pair<String, String>("Content-Type", "image/jpg")));
 
-        assertThat(ShadowToast.shownToastCount()).isEqualTo(0);
+        final DownloadImageAsyncTask downloadImageAsyncTask =
+                new DownloadImageAsyncTask(context, mockDownloadImageAsyncTaskListener);
 
-        subject.storePicture(context, "this is an invalid image url and cannot be downloaded", mraidCommandFailureListener);
-        ThreadUtils.pause(TIME_TO_PAUSE_FOR_NETWORK);
+        final Boolean result =
+                downloadImageAsyncTask.doInBackground(null);
 
-        assertThat(ShadowToast.shownToastCount()).isEqualTo(1);
-        assertThat(ShadowToast.getTextOfLatestToast()).isEqualTo("Downloading image to Picture gallery...");
+        assertThat(result).isFalse();
+        assertThat(expectedFile.exists()).isFalse();
+    }
+
+    @Test
+    public void downloadImageAsyncTask_doInBackground_withEmptyArray_shouldReturnFalseAndNotCreateFile() throws Exception {
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, FAKE_IMAGE_DATA,
+                createHeaders(new Pair<String, String>("Content-Type", "image/jpg")));
 
-        Robolectric.runUiThreadTasks();
+        final DownloadImageAsyncTask downloadImageAsyncTask =
+                new DownloadImageAsyncTask(context, mockDownloadImageAsyncTaskListener);
 
-        assertThat(ShadowToast.shownToastCount()).isEqualTo(2);
-        assertThat(ShadowToast.getTextOfLatestToast()).isEqualTo("Image failed to download.");
+        final Boolean result =
+                downloadImageAsyncTask.doInBackground(new String[]{});
 
+        assertThat(result).isFalse();
         assertThat(expectedFile.exists()).isFalse();
-        assertThat(expectedFile.length()).isEqualTo(0);
     }
 
-    @Ignore("Mraid 2.0")
     @Test
-    public void showUserDownloadImageAlert_whenStorePictureNotSupported_shouldFireErrorEvent_andNotToastNorAlertDialog() throws Exception {
-        Robolectric.getShadowApplication().denyPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE);
+    public void downloadImageAsyncTask_doInBackground_withArrayContainingNull_shouldReturnFalseAndNotCreateFile() throws Exception {
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, FAKE_IMAGE_DATA,
+                createHeaders(new Pair<String, String>("Content-Type", "image/jpg")));
+
+        final DownloadImageAsyncTask downloadImageAsyncTask =
+                new DownloadImageAsyncTask(context, mockDownloadImageAsyncTaskListener);
 
-        subject.storePicture(context, "http://image.jpg", mraidCommandFailureListener);
+        final Boolean result =
+                downloadImageAsyncTask.doInBackground(new String[]{null});
+
+        assertThat(result).isFalse();
+        assertThat(expectedFile.exists()).isFalse();
+    }
 
+    @Test
+    public void downloadImage_withFailedImageDownload_shouldToastErrorMessageAndNotifyOnFailure() {
         assertThat(ShadowToast.shownToastCount()).isEqualTo(0);
-        assertThat(ShadowAlertDialog.getLatestAlertDialog()).isNull();
-        verify(mraidCommandFailureListener).onFailure(any(MraidCommandException.class));
+        subject.downloadImage(context.getApplicationContext(), IMAGE_URI_VALUE, mockMraidCommandFailureListener);
+
+        DownloadImageAsyncTask latestAsyncTask = (DownloadImageAsyncTask) ShadowAsyncTasks.getLatestAsyncTask();
+        latestAsyncTask.getListener().onFailure();
+
+        assertThat(ShadowToast.shownToastCount()).isEqualTo(1);
+        assertThat(ShadowToast.getTextOfLatestToast()).isEqualTo("Image failed to download.");
+        verify(mockMraidCommandFailureListener).onFailure(any(MraidCommandException.class));
     }
 
-    @Ignore("Mraid 2.0")
     @Test
-    public void showUserDownloadImageAlert_withMimeTypeAndNoFileExtension_shouldSavePictureWithMimeType() throws Exception {
+    public void downloadImage_withMimeTypeAndNoFileExtension_shouldSavePictureWithMimeType() throws Exception {
         String fileNameWithNoExtension = "https://www.somewhere.com/images/blah/file";
 
         assertThatMimeTypeWasAddedCorrectly(
@@ -211,9 +296,8 @@ public void showUserDownloadImageAlert_withMimeTypeAndNoFileExtension_shouldSave
                 ".jpg");
     }
 
-    @Ignore("Mraid 2.0")
     @Test
-    public void showUserDownloadImageAlert_withMultipleContentTypesAndNoFileExtension_shouldSavePictureWithMimeType() throws Exception {
+    public void downloadImage_withMultipleContentTypesAndNoFileExtension_shouldSavePictureWithMimeType() throws Exception {
         String fileNameWithNoExtension = "https://www.somewhere.com/images/blah/file";
 
         assertThatMimeTypeWasAddedCorrectly(
@@ -223,9 +307,8 @@ public void showUserDownloadImageAlert_withMultipleContentTypesAndNoFileExtensio
                 ".png");
     }
 
-    @Ignore("Mraid 2.0")
     @Test
-    public void showUserDownloadImageAlert_withMimeTypeAndFileExtension_shouldSavePictureWithFileExtension() throws Exception {
+    public void downloadImage_withMimeTypeAndFileExtension_shouldSavePictureWithFileExtension() throws Exception {
         String fileNameWithExtension = "https://www.somewhere.com/images/blah/file.extension";
 
         assertThatMimeTypeWasAddedCorrectly(
@@ -238,26 +321,16 @@ public void showUserDownloadImageAlert_withMimeTypeAndFileExtension_shouldSavePi
     }
 
     @Ignore("Mraid 2.0")
-    @Test
-    public void showUserDownloadImageAlert_withHttpUri_shouldRequestPictureFromNetwork() throws Exception {
-        response = new TestHttpResponseWithHeaders(200, "OK");
-        downloadImageForPendingResponse("https://www.google.com/images/srpr/logo4w.png", response);
-
-        HttpUriRequest latestRequest = (HttpUriRequest) Robolectric.getLatestSentHttpRequest();
-        assertThat(latestRequest.getURI()).isEqualTo(URI.create("https://www.google.com/images/srpr/logo4w.png"));
-    }
-
-    @Ignore("Mraid 2.0")
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Config(sdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withMinimumValidParams_atLeastICS_shouldCreateEventIntent() throws Exception {
         setupCalendarParams();
 
         subject.createCalendarEvent(context, params);
 
-        verify(mraidCommandFailureListener, never()).onFailure(any(MraidCommandException.class));
+        verify(mockMraidCommandFailureListener, never()).onFailure(any(MraidCommandException.class));
 
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
 
         assertThat(intent.getType()).isEqualTo(ANDROID_CALENDAR_CONTENT_TYPE);
         assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
@@ -266,7 +339,7 @@ public void createCalendarEvent_withMinimumValidParams_atLeastICS_shouldCreateEv
     }
 
     @Ignore("Mraid 2.0")
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Config(sdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withoutSecondsOnStartDate_atLeastICS_shouldCreateEventIntent() throws Exception {
         setupCalendarParams();
@@ -274,9 +347,9 @@ public void createCalendarEvent_withoutSecondsOnStartDate_atLeastICS_shouldCreat
 
         subject.createCalendarEvent(context, params);
 
-        verify(mraidCommandFailureListener, never()).onFailure(any(MraidCommandException.class));
+        verify(mockMraidCommandFailureListener, never()).onFailure(any(MraidCommandException.class));
 
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
 
         assertThat(intent.getType()).isEqualTo(ANDROID_CALENDAR_CONTENT_TYPE);
         assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
@@ -285,7 +358,7 @@ public void createCalendarEvent_withoutSecondsOnStartDate_atLeastICS_shouldCreat
     }
 
     @Ignore("Mraid 2.0")
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Config(sdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withDailyRecurrence_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -293,14 +366,14 @@ public void createCalendarEvent_withDailyRecurrence_shouldCreateCalendarIntent()
 
         subject.createCalendarEvent(context, params);
 
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(intent.getType()).isEqualTo(ANDROID_CALENDAR_CONTENT_TYPE);
         assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
         assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=DAILY;");
     }
 
     @Ignore("Mraid 2.0")
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Config(sdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withDailyRecurrence_withInterval_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -309,12 +382,12 @@ public void createCalendarEvent_withDailyRecurrence_withInterval_shouldCreateCal
 
         subject.createCalendarEvent(context, params);
 
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=DAILY;INTERVAL=2;");
     }
 
     @Ignore("Mraid 2.0")
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Config(sdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withWeeklyRecurrence_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -322,12 +395,12 @@ public void createCalendarEvent_withWeeklyRecurrence_shouldCreateCalendarIntent(
 
         subject.createCalendarEvent(context, params);
 
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=WEEKLY;");
     }
 
     @Ignore("Mraid 2.0")
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Config(sdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withWeeklyRecurrence_withInterval_withOutWeekday_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -336,12 +409,12 @@ public void createCalendarEvent_withWeeklyRecurrence_withInterval_withOutWeekday
 
         subject.createCalendarEvent(context, params);
 
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=WEEKLY;INTERVAL=7;");
     }
 
     @Ignore("Mraid 2.0")
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Config(sdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withWeeklyRecurrence_onAllWeekDays_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -350,12 +423,12 @@ public void createCalendarEvent_withWeeklyRecurrence_onAllWeekDays_shouldCreateC
 
         subject.createCalendarEvent(context, params);
 
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=WEEKLY;BYDAY=SU,MO,TU,WE,TH,FR,SA;");
     }
 
     @Ignore("Mraid 2.0")
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Config(sdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withWeeklyRecurrence_onDuplicateWeekDays_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -364,12 +437,12 @@ public void createCalendarEvent_withWeeklyRecurrence_onDuplicateWeekDays_shouldC
 
         subject.createCalendarEvent(context, params);
 
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=WEEKLY;BYDAY=WE,TU,SU;");
     }
 
     @Ignore("Mraid 2.0")
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Config(sdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withWeeklyRecurrence_withInterval_withWeekDay_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -379,12 +452,12 @@ public void createCalendarEvent_withWeeklyRecurrence_withInterval_withWeekDay_sh
 
         subject.createCalendarEvent(context, params);
 
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=WEEKLY;INTERVAL=1;BYDAY=MO;");
     }
 
     @Ignore("Mraid 2.0")
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Config(sdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withDailyRecurrence_withWeeklyRecurrence_withMonthlyOccurence_shouldCreateDailyCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -396,12 +469,12 @@ public void createCalendarEvent_withDailyRecurrence_withWeeklyRecurrence_withMon
 
         subject.createCalendarEvent(context, params);
 
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=DAILY;INTERVAL=2;");
     }
 
     @Ignore("Mraid 2.0")
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Config(sdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withMonthlyRecurrence_withOutInterval_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -409,12 +482,12 @@ public void createCalendarEvent_withMonthlyRecurrence_withOutInterval_shouldCrea
 
         subject.createCalendarEvent(context, params);
 
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=MONTHLY;");
     }
 
     @Ignore("Mraid 2.0")
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Config(sdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withMonthlyRecurrence_withInterval_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -423,12 +496,12 @@ public void createCalendarEvent_withMonthlyRecurrence_withInterval_shouldCreateC
 
         subject.createCalendarEvent(context, params);
 
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=MONTHLY;INTERVAL=2;");
     }
 
     @Ignore("Mraid 2.0")
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Config(sdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withMonthlyRecurrence_withOutInterval_withDaysOfMonth_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -437,7 +510,7 @@ public void createCalendarEvent_withMonthlyRecurrence_withOutInterval_withDaysOf
 
         subject.createCalendarEvent(context, params);
 
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=MONTHLY;BYMONTHDAY=2,-15;");
     }
 
@@ -450,7 +523,7 @@ public void createCalendarEvent_withMonthlyRecurrence_withInvalidDaysOfMonth_sho
 
         subject.createCalendarEvent(context, params);
 
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
 
         assertThat(intent).isNull();
         assertThat(ShadowLog.getLogs().size()).isEqualTo(1);
@@ -465,19 +538,19 @@ public void createCalendarEvent_withWeeklyRecurrence_withInvalidDaysOfWeek_shoul
 
         subject.createCalendarEvent(context, params);
 
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
 
         assertThat(intent).isNull();
         assertThat(ShadowLog.getLogs().size()).isEqualTo(1);
     }
 
     @Ignore("Mraid 2.0")
-    @Config(reportSdk = Build.VERSION_CODES.HONEYCOMB_MR2)
+    @Config(sdk = Build.VERSION_CODES.HONEYCOMB_MR2)
     @Test
     public void createCalendarEvent_beforeIcs_shouldFireErrorEvent() throws Exception {
         subject.createCalendarEvent(context, params);
 
-        verify(mraidCommandFailureListener).onFailure(any(MraidCommandException.class));
+        verify(mockMraidCommandFailureListener).onFailure(any(MraidCommandException.class));
     }
 
     @Ignore("Mraid 2.0")
@@ -488,7 +561,7 @@ public void createCalendarEvent_withInvalidDate_shouldFireErrorEvent() throws Ex
 
         subject.createCalendarEvent(context, params);
 
-        verify(mraidCommandFailureListener).onFailure(any(MraidCommandException.class));
+        verify(mockMraidCommandFailureListener).onFailure(any(MraidCommandException.class));
     }
 
     @Ignore("Mraid 2.0")
@@ -499,7 +572,7 @@ public void createCalendarEvent_withMissingParameters_shouldFireErrorEvent() thr
 
         subject.createCalendarEvent(context, params);
 
-        verify(mraidCommandFailureListener).onFailure(any(MraidCommandException.class));
+        verify(mockMraidCommandFailureListener).onFailure(any(MraidCommandException.class));
     }
 
     @Ignore("Mraid 2.0")
@@ -510,11 +583,11 @@ public void createCalendarEvent_withNullDate_shouldFireErrorEvent() throws Excep
 
         subject.createCalendarEvent(context, params);
 
-        verify(mraidCommandFailureListener).onFailure(any(MraidCommandException.class));
+        verify(mockMraidCommandFailureListener).onFailure(any(MraidCommandException.class));
     }
 
     @Ignore("Mraid 2.0")
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Config(sdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void
     createCalendarEvent_withValidParamsAllExceptRecurrence_atLeastICS_shouldCreateEventIntent() throws Exception {
@@ -526,7 +599,7 @@ public void createCalendarEvent_withNullDate_shouldFireErrorEvent() throws Excep
 
         subject.createCalendarEvent(context, params);
 
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
+        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
 
         assertThat(intent.getType()).isEqualTo(ANDROID_CALENDAR_CONTENT_TYPE);
         assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
@@ -568,7 +641,7 @@ public void isSmsAvailable_whenCanNotAcceptIntent_shouldReturnFalse() throws Exc
 
     @Test
     public void isStorePictureAvailable_whenPermissionDeclaredAndMediaMounted_shouldReturnTrue() throws Exception {
-        Robolectric.getShadowApplication().grantPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE);
+        ShadowApplication.getInstance().grantPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE);
         ShadowEnvironment.setExternalStorageState(Environment.MEDIA_MOUNTED);
 
         assertThat(subject.isStorePictureSupported(context)).isTrue();
@@ -576,7 +649,7 @@ public void isStorePictureAvailable_whenPermissionDeclaredAndMediaMounted_should
 
     @Test
     public void isStorePictureAvailable_whenPermissionDenied_shouldReturnFalse() throws Exception {
-        Robolectric.getShadowApplication().denyPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE);
+        ShadowApplication.getInstance().denyPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE);
         ShadowEnvironment.setExternalStorageState(Environment.MEDIA_MOUNTED);
 
         assertThat(subject.isStorePictureSupported(context)).isFalse();
@@ -584,30 +657,30 @@ public void isStorePictureAvailable_whenPermissionDenied_shouldReturnFalse() thr
 
     @Test
     public void isStorePictureAvailable_whenMediaUnmounted_shouldReturnFalse() throws Exception {
-        Robolectric.getShadowApplication().grantPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE);
+        ShadowApplication.getInstance().grantPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE);
         ShadowEnvironment.setExternalStorageState(Environment.MEDIA_UNMOUNTED);
 
         assertThat(subject.isStorePictureSupported(context)).isFalse();
     }
 
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void isCalendarAvailable_atLeastIcs_shouldReturnTrue() throws Exception {
+        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.ICE_CREAM_SANDWICH);
         context = createMockContextWithSpecificIntentData(null, null, ANDROID_CALENDAR_CONTENT_TYPE, "android.intent.action.INSERT");
         assertThat(subject.isCalendarAvailable(context)).isTrue();
     }
 
-    @Config(reportSdk = Build.VERSION_CODES.HONEYCOMB_MR2)
     @Test
     public void isCalendarAvailable_beforeIcs_shouldReturnFalse() throws Exception {
+        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.HONEYCOMB_MR2);
         context = createMockContextWithSpecificIntentData(null, null, ANDROID_CALENDAR_CONTENT_TYPE, "android.intent.action.INSERT");
         assertThat(subject.isCalendarAvailable(context)).isFalse();
     }
 
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void isCalendarAvailable_atLeastIcs_butCanNotAcceptIntent_shouldReturnFalse() throws
             Exception {
+        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.ICE_CREAM_SANDWICH);
         context = createMockContextWithSpecificIntentData(null, null, "vnd.android.cursor.item/NOPE", "android.intent.action.INSERT");
         assertThat(subject.isCalendarAvailable(context)).isFalse();
     }
@@ -637,13 +710,14 @@ public void isInlineVideoAvailable_whenViewsAreHardwareAccelerated_whenWindowIsN
         assertThat(subject.isInlineVideoAvailable(activity, mockView)).isFalse();
     }
 
-    @Config(reportSdk = Build.VERSION_CODES.HONEYCOMB)
     @TargetApi(11)
     @Test
     public void isInlineVideoAvailable_whenViewsAreHardwareAccelerated_whenWindowIsHardwareAccelerated_whenApiLevelIsLessThanHoneycombMR1_shouldReturnFalse() throws Exception {
         Activity activity = Robolectric.buildActivity(Activity.class).create().get();
         activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
 
+        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.HONEYCOMB);
+
         View mockView = mock(View.class);
         when(mockView.isHardwareAccelerated()).thenReturn(true);
         when(mockView.getLayerType()).thenReturn(View.LAYER_TYPE_HARDWARE);
@@ -739,22 +813,34 @@ public void describeTo(Description description) {
         return context;
     }
 
-    private void downloadImageForPendingResponse(String uri, HttpResponse response) throws Exception {
-        Robolectric.addPendingHttpResponse(response);
+    private Map<String, List<String>> createHeaders(@NonNull final Pair<String, String>... pairs) {
+        final TreeMap<String, List<String>> headers = new TreeMap<String, List<String>>();
+        for (final Pair<String, String> pair : pairs) {
+            String key = pair.first;
+            String value = pair.second;
 
-        subject.storePicture(context, uri, mraidCommandFailureListener);
+            if (!headers.containsKey(key)) {
+                headers.put(key, new ArrayList<String>());
+            }
+            headers.get(key).add(value);
+        }
 
-        ThreadUtils.pause(TIME_TO_PAUSE_FOR_NETWORK);
+        return headers;
     }
 
     private void assertThatMimeTypeWasAddedCorrectly(String originalFileName, String contentType,
             String expectedFileName, String expectedExtension) throws Exception {
         expectedFile = new File(pictureDirectory, expectedFileName);
-        response = new TestHttpResponseWithHeaders(200, FAKE_IMAGE_DATA);
-        response.addHeader(MraidNativeCommandHandler.MIME_TYPE_HEADER, contentType);
 
-        downloadImageForPendingResponse(originalFileName, response);
+        ShadowMoPubHttpUrlConnection.addPendingResponse(200, FAKE_IMAGE_DATA,
+                createHeaders(new Pair<String, String>(MIME_TYPE_HEADER, contentType)));
+
+        final DownloadImageAsyncTask downloadImageAsyncTask =
+                new DownloadImageAsyncTask(context, mockDownloadImageAsyncTaskListener);
+        final Boolean result =
+                downloadImageAsyncTask.doInBackground(new String[]{originalFileName});
 
+        assertThat(result).isTrue();
         assertThat(expectedFile.exists()).isTrue();
         assertThat(expectedFile.getName()).endsWith(expectedExtension);
         assertThat(fileWithoutExtension.exists()).isFalse();
@@ -765,13 +851,13 @@ private void setupCalendarParams() {
         Context mockContext = createMockContextWithSpecificIntentData(null,
                 null, ANDROID_CALENDAR_CONTENT_TYPE, "android.intent.action.INSERT");
 
-        //but a mock context does't know how to startActivity(), so we stub it to use ShadowContext for starting activity
+        //but a mock context doesn't know how to startActivity(), so we stub it to use ShadowContext for starting activity
         doAnswer(new Answer<Void>() {
             public Void answer(InvocationOnMock invocation) throws Throwable {
                 if (!(invocation.getArguments()[0] instanceof Intent)) {
                     throw new ClassCastException("For some reason you are not passing the calendar intent properly");
                 }
-                Context shadowContext = Robolectric.getShadowApplication().getApplicationContext();
+                Context shadowContext = ShadowApplication.getInstance().getApplicationContext();
                 shadowContext.startActivity((Intent) invocation.getArguments()[0]);
                 return null;
             }
@@ -780,4 +866,4 @@ public Void answer(InvocationOnMock invocation) throws Throwable {
         params.put("description", "Some Event");
         params.put("start", CALENDAR_START_TIME);
     }
-}
\ No newline at end of file
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java
index 1ffe7e85..b46389de 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java
@@ -6,6 +6,7 @@
 import android.widget.ImageButton;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.EventForwardingBroadcastReceiver;
 
 import org.apache.http.HttpRequest;
@@ -14,23 +15,25 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.shadows.ShadowLocalBroadcastManager;
+import org.robolectric.Shadows;
+import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowVideoView;
-import org.robolectric.tester.org.apache.http.RequestMatcher;
-import org.robolectric.tester.org.apache.http.TestHttpResponse;
+import org.robolectric.shadows.httpclient.FakeHttp;
+import org.robolectric.shadows.httpclient.RequestMatcher;
+import org.robolectric.shadows.httpclient.TestHttpResponse;
+import org.robolectric.shadows.support.v4.ShadowLocalBroadcastManager;
 
 import static android.view.View.GONE;
 import static android.view.View.VISIBLE;
 import static com.mopub.mobileads.BaseVideoPlayerActivity.VIDEO_URL;
 import static com.mopub.mobileads.BaseVideoViewController.BaseVideoViewControllerListener;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.getHtmlInterstitialIntentFilter;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
-import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class MraidVideoViewControllerTest {
     private Context context;
     private Bundle bundle;
@@ -44,26 +47,27 @@ public void setUp() throws Exception {
         bundle = new Bundle();
         baseVideoViewControllerListener = mock(BaseVideoViewControllerListener.class);
 
-        bundle.putString(VIDEO_URL, "http://video_url");
+        bundle.putString(VIDEO_URL, "https://video_url");
 
-        Robolectric.getUiThreadScheduler().pause();
-        Robolectric.getBackgroundScheduler().pause();
+        Robolectric.getForegroundThreadScheduler().pause();
+        Robolectric.getBackgroundThreadScheduler().pause();
 
-        Robolectric.addHttpResponseRule(new RequestMatcher() {
+        FakeHttp.addHttpResponseRule(new RequestMatcher() {
             @Override
             public boolean matches(HttpRequest request) {
                 return true;
             }
         }, new TestHttpResponse(200, "body"));
 
-        ShadowLocalBroadcastManager.getInstance(context).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
+        ShadowLocalBroadcastManager.getInstance(context).registerReceiver(broadcastReceiver,
+                new EventForwardingBroadcastReceiver(null, 0).getIntentFilter());
     }
 
     @After
     public void tearDown() throws Exception {
-        Robolectric.getUiThreadScheduler().reset();
-        Robolectric.getBackgroundScheduler().reset();
-        Robolectric.clearPendingHttpResponses();
+        Robolectric.getForegroundThreadScheduler().reset();
+        Robolectric.getBackgroundThreadScheduler().reset();
+        FakeHttp.clearPendingHttpResponses();
 
         ShadowLocalBroadcastManager.getInstance(context).unregisterReceiver(broadcastReceiver);
     }
@@ -71,12 +75,12 @@ public void tearDown() throws Exception {
     @Test
     public void constructor_shouldSetListenersAndVideoPath() throws Exception {
         initializeSubject();
-        ShadowVideoView shadowSubject = shadowOf(subject.getVideoView());
+        ShadowVideoView shadowSubject = Shadows.shadowOf(subject.getVideoView());
 
         assertThat(shadowSubject.getOnCompletionListener()).isNotNull();
         assertThat(shadowSubject.getOnErrorListener()).isNotNull();
 
-        assertThat(shadowSubject.getVideoPath()).isEqualTo("http://video_url");
+        assertThat(shadowSubject.getVideoPath()).isEqualTo("https://video_url");
         assertThat(subject.getVideoView().hasFocus()).isTrue();
     }
     
@@ -88,7 +92,7 @@ public void onCreate_shouldCreateAndHideCloseButton() throws Exception {
         ImageButton closeButton = getCloseButton();
 
         assertThat(closeButton).isNotNull();
-        assertThat(shadowOf(closeButton).getOnClickListener()).isNotNull();
+        assertThat(Shadows.shadowOf(closeButton).getOnClickListener()).isNotNull();
         assertThat(closeButton.getVisibility()).isEqualTo(GONE);
     }
 
@@ -157,7 +161,7 @@ private void initializeSubject() {
     }
 
     private ShadowVideoView getShadowVideoView() {
-        return shadowOf(subject.getVideoView());
+        return Shadows.shadowOf(subject.getVideoView());
     }
 
     ImageButton getCloseButton() {
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/AdRendererRegistryTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/AdRendererRegistryTest.java
new file mode 100644
index 00000000..aa358452
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/AdRendererRegistryTest.java
@@ -0,0 +1,97 @@
+package com.mopub.nativeads;
+
+import android.app.Activity;
+import android.content.Context;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class AdRendererRegistryTest {
+
+    private AdRendererRegistry subject;
+    private NativeAd mNativeAd;
+    private Context context;
+
+    @Mock
+    MoPubStaticNativeAdRenderer mockRenderer;
+    @Mock
+    BaseNativeAd mockNativeAd;
+
+    @Before
+    public void setUp() {
+        context = Robolectric.buildActivity(Activity.class).create().get();
+        subject = new AdRendererRegistry();
+        mNativeAd = new NativeAd(context, "impression", "click", "adunit",
+                mock(BaseNativeAd.class), mockRenderer);
+        when(mockRenderer.supports(mockNativeAd)).thenReturn(true);
+    }
+
+    @Test
+    public void registerAdRenderer_shouldAddRendererToRegistry() {
+        subject.registerAdRenderer(mockRenderer);
+        assertThat(subject.getRendererIterable()).containsOnly(mockRenderer);
+    }
+
+    @Test
+    public void getRendererCount_shouldReturnCount() {
+        subject.registerAdRenderer(mockRenderer);
+        assertThat(subject.getAdRendererCount()).isEqualTo(1);
+    }
+
+    @Test
+    public void getViewTypeForAd_() {
+        subject.registerAdRenderer(mockRenderer);
+        assertThat(subject.getAdRendererCount()).isEqualTo(1);
+    }
+
+    @Test
+    public void getViewTypeForAd_shouldReturnIndexPlusOneOfMatchedRenderer() {
+        subject.registerAdRenderer(mock(MoPubStaticNativeAdRenderer.class));
+        subject.registerAdRenderer(mockRenderer);
+
+        assertThat(subject.getViewTypeForAd(mNativeAd)).isEqualTo(2);
+    }
+
+    @Test
+    public void getViewTypeForAd_withNoMatchingRednerer_shouldReturn0() {
+        subject.registerAdRenderer(mock(MoPubStaticNativeAdRenderer.class));
+
+        assertThat(subject.getViewTypeForAd(mNativeAd)).isEqualTo(0);
+    }
+
+    @Test
+    public void getRendererForAd_shouldReturnRendererSupportingNativeAd() {
+        subject.registerAdRenderer(mockRenderer);
+        subject.registerAdRenderer(mock(MoPubStaticNativeAdRenderer.class));
+
+        assertThat(subject.getRendererForAd(mockNativeAd)).isEqualTo(mockRenderer);
+    }
+
+    @Test
+    public void getRendererForAd_withNoSupportingRenderer_shouldReturnNull() {
+        subject.registerAdRenderer(mock(MoPubStaticNativeAdRenderer.class));
+
+        assertThat(subject.getRendererForAd(mockNativeAd)).isEqualTo(null);
+    }
+
+    @Test
+    public void getRendererForViewType_shouldReturnRendererSupportingNativeAd() {
+    }
+
+    @Test
+    public void getRendererForViewType_withNoSupportingRenderer_shouldReturnNull() {
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java
index a2f85dbd..a9b49fa1 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java
@@ -4,16 +4,19 @@
 import android.content.Context;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class AdapterHelperTest {
     private AdapterHelper subject;
     private Activity context;
@@ -37,9 +40,8 @@ public void constructor_whenPassedAnApplicationContext_shouldThrowIllegalArgumen
     @Test
     public void getAdView_withNullActivityContext_shouldReturnEmptyViewWithApplicationContext() {
         subject.clearActivityContext();
-        Context viewContext = subject.getAdView(null, null, mock(NativeResponse.class),
-                mock(ViewBinder.class),
-                null).getContext();
+        Context viewContext = subject.getAdView(null, null, mock(NativeAd.class),
+                mock(ViewBinder.class)).getContext();
         assertThat(viewContext).isEqualTo(context.getApplication());
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/BaseNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/BaseNativeAdTest.java
new file mode 100644
index 00000000..a697fbb0
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/BaseNativeAdTest.java
@@ -0,0 +1,69 @@
+package com.mopub.nativeads;
+
+import android.support.annotation.NonNull;
+import android.view.View;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
+import com.mopub.nativeads.BaseNativeAd.NativeEventListener;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.annotation.Config;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class BaseNativeAdTest {
+
+    private BaseNativeAd subject;
+    @Mock NativeEventListener mockEventListener;
+
+    @Before
+    public void setUp() {
+        subject = new BaseNativeAd() {
+            @Override
+            public void prepare(@NonNull View view) { }
+
+            @Override
+            public void clear(@NonNull View view) { }
+
+            @Override
+            public void destroy() { }
+        };
+    }
+
+    @Test
+    public void notifyAdImpressed_withListenerSet_shouldCallOnAdImpressed() {
+        subject.setNativeEventListener(mockEventListener);
+        subject.notifyAdImpressed();
+
+        verify(mockEventListener).onAdImpressed();
+    }
+
+    @Test
+    public void notifyAdImpressed_withoutListenerSet_shouldNotCallOnAdImpressed() {
+        subject.notifyAdImpressed();
+
+        verifyNoMoreInteractions(mockEventListener);
+    }
+
+    @Test
+    public void notifyAdClicked_withListenerSet_shouldCallOnAdClicked() {
+        subject.setNativeEventListener(mockEventListener);
+        subject.notifyAdClicked();
+
+        verify(mockEventListener).onAdClicked();
+    }
+
+    @Test
+    public void notifyAdClicked_withoutListenerSet_shouldNotCallOnAdClicked() {
+        subject.notifyAdClicked();
+
+        verifyNoMoreInteractions(mockEventListener);
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/CustomEventNativeAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/CustomEventNativeAdapterTest.java
index 6a067014..c11abba5 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/CustomEventNativeAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/CustomEventNativeAdapterTest.java
@@ -3,15 +3,19 @@
 import android.app.Activity;
 
 import com.mopub.common.AdType;
+import com.mopub.common.DataKeys;
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 import com.mopub.nativeads.test.support.TestCustomEventNativeFactory;
 import com.mopub.network.AdResponse;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
 
 import java.util.HashMap;
+import java.util.Map;
 
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
@@ -20,6 +24,7 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class CustomEventNativeAdapterTest {
 
     private Activity context;
@@ -38,8 +43,9 @@ public void setUp() throws Exception {
         serverExtras.put("key", "value");
 
         testAdResponse = new AdResponse.Builder()
-                .setAdType(AdType.NATIVE)
+                .setAdType(AdType.STATIC_NATIVE)
                 .setCustomEventClassName("com.mopub.nativeads.MoPubCustomEventNative")
+                .setClickTrackingUrl("clicktrackingurl")
                 .setResponseBody("body")
                 .setServerExtras(serverExtras)
                 .build();
@@ -51,10 +57,12 @@ public void setUp() throws Exception {
 
     @Test
     public void loadNativeAd_withValidInput_shouldCallLoadNativeAdOnTheCustomEvent() throws Exception {
+        Map<String, Object> expectedLocalExtras = new HashMap<String, Object>();
+        expectedLocalExtras.put(DataKeys.CLICK_TRACKING_URL_KEY, "clicktrackingurl");
         CustomEventNativeAdapter.loadNativeAd(context, localExtras, testAdResponse, mCustomEventNativeListener);
-        verify(mCustomEventNative).loadNativeAd(context, mCustomEventNativeListener, localExtras, serverExtras);
+        verify(mCustomEventNative).loadNativeAd(context, mCustomEventNativeListener, expectedLocalExtras, serverExtras);
         verify(mCustomEventNativeListener, never()).onNativeAdFailed(any(NativeErrorCode.class));
-        verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(NativeAdInterface.class));
+        verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(BaseNativeAd.class));
     }
 
     @Test
@@ -65,7 +73,7 @@ public void loadNativeAd_withInvalidClassName_shouldNotifyListenerOfOnNativeAdFa
 
         CustomEventNativeAdapter.loadNativeAd(context, localExtras, testAdResponse, mCustomEventNativeListener);
         verify(mCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_NOT_FOUND);
-        verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(NativeAdInterface.class));
+        verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(BaseNativeAd.class));
         verify(mCustomEventNative, never()).loadNativeAd(context, mCustomEventNativeListener, localExtras, serverExtras);
     }
 
@@ -78,6 +86,6 @@ public void loadNativeAd_withInvalidCustomEventNativeData_shouldNotAddToServerEx
         CustomEventNativeAdapter.loadNativeAd(context, localExtras, testAdResponse, mCustomEventNativeListener);
         verify(mCustomEventNative).loadNativeAd(eq(context), eq(mCustomEventNativeListener), eq(localExtras), eq(new HashMap<String, String>()));
         verify(mCustomEventNativeListener, never()).onNativeAdFailed(any(NativeErrorCode.class));
-        verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(NativeAdInterface.class));
+        verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(BaseNativeAd.class));
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/HttpDiskCompositeDataSourceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/HttpDiskCompositeDataSourceTest.java
new file mode 100644
index 00000000..a369b0ef
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/HttpDiskCompositeDataSourceTest.java
@@ -0,0 +1,493 @@
+package com.mopub.nativeads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.net.Uri;
+
+import com.google.android.exoplayer.upstream.DataSpec;
+import com.google.android.exoplayer.upstream.HttpDataSource;
+import com.mopub.common.CacheService;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import java.util.Arrays;
+import java.util.Random;
+import java.util.TreeSet;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyInt;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Matchers.refEq;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.mockito.Mockito.verifyZeroInteractions;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class HttpDiskCompositeDataSourceTest {
+
+    private static final int BASE_SEED = 1234567890;
+    @Mock HttpDataSource mockHttpDataSource;
+    private HttpDiskCompositeDataSource subject;
+    private DataSpec dataSpec;
+    private Uri uri;
+
+
+    @Before
+    public void setUp() throws Exception {
+        Context context = Robolectric.buildActivity(Activity.class).create().get();
+        CacheService.initialize(context);
+        subject = new HttpDiskCompositeDataSource(context, "userAgent", null, mockHttpDataSource);
+        uri = new Uri.Builder().scheme("https").path("www.someurl").build();
+        dataSpec = new DataSpec(uri, 0, -1, null);
+    }
+
+    @After
+    public void tearDown() throws Exception {
+        CacheService.clearAndNullCaches();
+    }
+
+    @Test
+    public void open_withNullDataSpecUri_shouldReturnLengthUnbounded() throws Exception {
+        DataSpec dataSpecWithNullUri = new DataSpec(null);
+
+        final long result = subject.open(dataSpecWithNullUri);
+
+        assertThat(result).isEqualTo(HttpDiskCompositeDataSource.LENGTH_UNBOUNDED);
+        verifyZeroInteractions(mockHttpDataSource);
+    }
+
+    @Test
+    public void open_withNoCachedData_shouldOpenHttpDataSource() throws Exception {
+        when(mockHttpDataSource.open(any(DataSpec.class))).thenReturn(200000L);
+
+        long result = subject.open(dataSpec);
+
+        assertThat(result).isEqualTo(200000L);
+        verify(mockHttpDataSource).open(refEq(dataSpec));
+        verifyNoMoreInteractions(mockHttpDataSource);
+    }
+
+    @Test
+    public void open_withAllDataCached_shouldNotOpenHttpDataSource() throws Exception {
+        // When the entire file is cached, there's no need to open the network.
+        when(mockHttpDataSource.open(any(DataSpec.class))).thenReturn(100000L);
+        byte[] data = generateRandomByteArray(100000, 0);
+        byte[] expectedFileSize = "100000".getBytes();
+        byte[] intervals = "[\"{start : 0, length : 100000}\"]".getBytes();
+        CacheService.putToDiskCache("0" + uri.toString(), data);
+        CacheService.putToDiskCache(
+                HttpDiskCompositeDataSource.EXPECTED_FILE_SIZE_KEY_PREFIX + uri.toString(),
+                expectedFileSize);
+        CacheService.putToDiskCache(
+                HttpDiskCompositeDataSource.INTERVALS_KEY_PREFIX + uri.toString(), intervals);
+
+        long result = subject.open(dataSpec);
+
+        assertThat(result).isEqualTo(100000);
+        verifyZeroInteractions(mockHttpDataSource);
+    }
+
+    @Test
+    public void open_withSomeDataCached_shouldOpenHttpDataSourceAtAppropriateStartPoint() throws Exception {
+        // The idea behind this test is that we think we have the first 33333 bytes and need to ask
+        // the network for byte 33333 and onward.
+        when(mockHttpDataSource.open(any(DataSpec.class))).thenReturn(100000L);
+        byte[] data = generateRandomByteArray(100000, 0);
+        byte[] expectedFileSize = "100000".getBytes();
+        byte[] intervals = "[\"{start : 0, length : 33333}\"]".getBytes();
+        CacheService.putToDiskCache("0" + uri.toString(), data);
+        CacheService.putToDiskCache(
+                HttpDiskCompositeDataSource.EXPECTED_FILE_SIZE_KEY_PREFIX + uri.toString(),
+                expectedFileSize);
+        CacheService.putToDiskCache(
+                HttpDiskCompositeDataSource.INTERVALS_KEY_PREFIX + uri.toString(), intervals);
+
+        long result = subject.open(dataSpec);
+
+        assertThat(result).isEqualTo(100000);
+        DataSpec expectedDataSpec = new DataSpec(dataSpec.uri, 33333, -1, null);
+        // Using refEq because equals() is just the Java default, and they're not the same object.
+        verify(mockHttpDataSource).open(refEq(expectedDataSpec));
+    }
+
+    @Test
+    public void read_with2048ExpectedBytes_shouldFillBufferWith2048Bytes_shouldReturnNumberOfBytesRead2048() throws Exception {
+        // This is the case where we're reading from a cache that has all the necessary bytes
+        byte[] data = generateRandomByteArray(100000, 0);
+        byte[] expectedFileSize = "100000".getBytes();
+        byte[] intervals = "[\"{start : 0, length : 100000}\"]".getBytes();
+        // Pretend we have all the bytes in the cache, complete with the expected file size and
+        // a valid intervals set.
+        CacheService.putToDiskCache("0" + uri.toString(), data);
+        CacheService.putToDiskCache(
+                HttpDiskCompositeDataSource.EXPECTED_FILE_SIZE_KEY_PREFIX + uri.toString(),
+                expectedFileSize);
+        CacheService.putToDiskCache(
+                HttpDiskCompositeDataSource.INTERVALS_KEY_PREFIX + uri.toString(), intervals);
+        byte[] readBuffer = new byte[2048];
+
+        subject.open(dataSpec);
+        int bytesRead = subject.read(readBuffer, 0, 2048);
+
+        // Verify that all 2048 bytes are expected and that the return value of read() is 2048
+        assertThat(bytesRead).isEqualTo(2048);
+        byte[] expectedData = new byte[2048];
+        System.arraycopy(data, 0, expectedData, 0, 2048);
+        assertThat(readBuffer).isEqualTo(expectedData);
+        verifyZeroInteractions(mockHttpDataSource);
+    }
+
+    @Test
+    public void read_withAllDataCached_whenReadingAcrossSegmentBoundaries_shouldReturnAllBytes() throws Exception {
+        // This is the case where we're reading from a cache that has all the necessary bytes, but
+        // some of it is in the next block. We need to finish reading from the current block, set
+        // up reading from the next block, and then do it.
+        byte[] data1 = generateRandomByteArray(HttpDiskCompositeDataSource.BLOCK_SIZE, 0);
+        byte[] data2 = generateRandomByteArray(HttpDiskCompositeDataSource.BLOCK_SIZE, 1);
+        String expectedFileLengthString = String.valueOf(
+                2 * HttpDiskCompositeDataSource.BLOCK_SIZE);
+        byte[] intervals = ("[\"{start : 0, length : " + expectedFileLengthString + "}\"]").getBytes();
+        CacheService.putToDiskCache("0" + uri.toString(), data1);
+        CacheService.putToDiskCache("1" + uri.toString(), data2);
+        CacheService.putToDiskCache(
+                HttpDiskCompositeDataSource.EXPECTED_FILE_SIZE_KEY_PREFIX + uri.toString(),
+                expectedFileLengthString.getBytes());
+        CacheService.putToDiskCache(
+                HttpDiskCompositeDataSource.INTERVALS_KEY_PREFIX + uri.toString(), intervals);
+        // Expect to read the last 1337 bytes from the first block and the rest from the second block
+        DataSpec modifiedDataSpec = new DataSpec(dataSpec.uri,
+                HttpDiskCompositeDataSource.BLOCK_SIZE - 1337, -1, null);
+        byte[] readBuffer = new byte[4096];
+
+        subject.open(modifiedDataSpec);
+        int bytesRead = subject.read(readBuffer, 0, 4096);
+
+        assertThat(bytesRead).isEqualTo(4096);
+        byte[] expectedBytes = new byte[4096];
+        System.arraycopy(data1, HttpDiskCompositeDataSource.BLOCK_SIZE - 1337, expectedBytes, 0,
+                1337);
+        System.arraycopy(data2, 0, expectedBytes, 1337, 4096 - 1337);
+        assertThat(readBuffer).isEqualTo(expectedBytes);
+        verifyZeroInteractions(mockHttpDataSource);
+    }
+
+    @Test
+    public void read_withEmptyCache_shouldReadBytesFromNetwork() throws Exception {
+        // Sets up an empty cache and read directly from the network
+        final byte[] bytesFromNetwork = generateRandomByteArray(2048, 0);
+        when(mockHttpDataSource.open(any(DataSpec.class))).thenReturn(100000L);
+        setUpMockHttpDataSourceToReturnBytesFromNetwork(bytesFromNetwork, mockHttpDataSource);
+        byte[] readBuffer = new byte[2048];
+
+        subject.open(dataSpec);
+        int bytesRead = subject.read(readBuffer, 0, 2048);
+
+        assertThat(bytesRead).isEqualTo(2048);
+        assertThat(readBuffer).isEqualTo(bytesFromNetwork);
+        verify(mockHttpDataSource).open(refEq(dataSpec));
+        verify(mockHttpDataSource).read(any(byte[].class), eq(0), eq(2048));
+        verifyNoMoreInteractions(mockHttpDataSource);
+    }
+
+    @Test
+    public void read_withSomeDataInCache_shouldReadRestOfBytesFromNetwork() throws Exception {
+        // This is the case where there is some data in the cache, and we run out of cached data.
+        // The rest of the bytes are from the network.
+        final byte[] bytesFromNetwork = generateRandomByteArray(2048, 0);
+        when(mockHttpDataSource.open(any(DataSpec.class))).thenReturn(100000L);
+        setUpMockHttpDataSourceToReturnBytesFromNetwork(bytesFromNetwork, mockHttpDataSource);
+        byte[] data = generateRandomByteArray(2048, 1);
+        byte[] segment0 = new byte[HttpDiskCompositeDataSource.BLOCK_SIZE];
+        byte[] expectedFileSize = "100000".getBytes();
+        byte[] intervals = ("[\"{start : 0, length : 2048}\"]").getBytes();
+        // So we have the first 2048 bytes in the cache
+        System.arraycopy(data, 0, segment0, 0, 2048);
+        CacheService.putToDiskCache("0" + uri.toString(), segment0);
+        CacheService.putToDiskCache(
+                HttpDiskCompositeDataSource.EXPECTED_FILE_SIZE_KEY_PREFIX + uri.toString(),
+                expectedFileSize);
+        CacheService.putToDiskCache(
+                HttpDiskCompositeDataSource.INTERVALS_KEY_PREFIX + uri.toString(), intervals);
+        // However, we want to read 4096 bytes (We have to go to the network for the rest).
+        byte[] readBuffer = new byte[4096];
+
+        subject.open(dataSpec);
+        int bytesRead = subject.read(readBuffer, 0, 4096);
+
+        // Make sure that the bytes read have both the first 2048 bytes from the cache and the 2048
+        // bytes from the network.
+        assertThat(bytesRead).isEqualTo(4096);
+        byte[] expectedBytes = new byte[4096];
+        System.arraycopy(data, 0, expectedBytes, 0, 2048);
+        System.arraycopy(bytesFromNetwork, 0, expectedBytes, 2048, 2048);
+        assertThat(readBuffer).isEqualTo(expectedBytes);
+        DataSpec modifiedDataSpec = new DataSpec(dataSpec.uri, 2048, -1, null);
+        verify(mockHttpDataSource).open(refEq(modifiedDataSpec));
+        // Verify that we stored the bytes from network starting from index 2048 for 2048 bytes
+        verify(mockHttpDataSource).read(any(byte[].class), eq(2048), eq(2048));
+        verifyNoMoreInteractions(mockHttpDataSource);
+    }
+
+    @Test
+    public void read_withSomeDataInCacheBeforeBlockBoundary_whenApproachingBlockBoundary_shouldReadBytesFromDisk_shouldReadBytesFromNetwork_shouldSetUpNextBlock() throws Exception {
+        // This is the situation where the cache ends 1024 bytes before the second block boundary.
+        // We need to read the first 1024 bytes from the cache, read the next 3072 bytes, store
+        // the first 1024 bytes in the current block, close it out, flush it, set up the next block,
+        // and store the next 2048 bytes into that block.
+        final byte[] bytesFromNetwork = generateRandomByteArray(3072, 0);
+        when(mockHttpDataSource.open(any(DataSpec.class))).thenReturn(
+                (long) (HttpDiskCompositeDataSource.BLOCK_SIZE * 4));
+        setUpMockHttpDataSourceToReturnBytesFromNetwork(bytesFromNetwork, mockHttpDataSource);
+        byte[] data = generateRandomByteArray(HttpDiskCompositeDataSource.BLOCK_SIZE, 1);
+        byte[] expectedFileSize = String.valueOf(
+                HttpDiskCompositeDataSource.BLOCK_SIZE * 4).getBytes();
+        // Typical access patterns of video is to request for the first 44 bytes, the last 3886
+        // bytes, and then start at byte 44 and request till the end of the video. We are pretending
+        // that we did that, and stopped 1024 bytes before the end of the 2nd block.
+        byte[] intervals = ("[\"{start : 0, length : 44}\", \"{start : " +
+                (HttpDiskCompositeDataSource.BLOCK_SIZE * 4 - 3886) +
+                ", length : 3886}\", \"{start : 44, length : " +
+                (HttpDiskCompositeDataSource.BLOCK_SIZE * 2 - 1024 - 44) + "}\"]")
+                .getBytes();
+        CacheService.putToDiskCache("1" + uri.toString(), data);
+        CacheService.putToDiskCache(
+                HttpDiskCompositeDataSource.EXPECTED_FILE_SIZE_KEY_PREFIX + uri.toString(),
+                expectedFileSize);
+        CacheService.putToDiskCache(
+                HttpDiskCompositeDataSource.INTERVALS_KEY_PREFIX + uri.toString(), intervals);
+        byte[] readBuffer = new byte[4096];
+        dataSpec = new DataSpec(dataSpec.uri, 2 * HttpDiskCompositeDataSource.BLOCK_SIZE - 2048, -1,
+                dataSpec.key, dataSpec.flags);
+
+        subject.open(dataSpec);
+        int bytesRead = subject.read(readBuffer, 0, 4096);
+
+        assertThat(bytesRead).isEqualTo(4096);
+        byte[] expectedBytes = new byte[4096];
+        System.arraycopy(data, HttpDiskCompositeDataSource.BLOCK_SIZE - 2048, expectedBytes, 0,
+                1024);
+        System.arraycopy(bytesFromNetwork, 0, expectedBytes, 1024, 3072);
+        assertThat(readBuffer).isEqualTo(expectedBytes);
+        DataSpec modifiedDataSpec = new DataSpec(dataSpec.uri,
+                2 * HttpDiskCompositeDataSource.BLOCK_SIZE - 1024, -1, null);
+        verify(mockHttpDataSource).open(refEq(modifiedDataSpec));
+        verify(mockHttpDataSource).read(any(byte[].class), eq(1024), eq(3072));
+        // Also verify that the 2nd block was written to disk correctly.
+        byte[] expectedBlock = new byte[HttpDiskCompositeDataSource.BLOCK_SIZE];
+        System.arraycopy(data, 0, expectedBlock, 0, HttpDiskCompositeDataSource.BLOCK_SIZE - 1024);
+        System.arraycopy(bytesFromNetwork, 0, expectedBlock,
+                HttpDiskCompositeDataSource.BLOCK_SIZE - 1024, 1024);
+        assertThat(CacheService.getFromDiskCache("1" + uri.toString())).isEqualTo(
+                expectedBlock);
+    }
+
+    @Test
+    public void close_withoutFirstCallingOpen_shouldNotWriteToDisk() throws Exception {
+        subject.close();
+
+        assertThat(CacheService.containsKeyDiskCache("0" + uri.toString())).isFalse();
+        assertThat(CacheService.containsKeyDiskCache(
+                HttpDiskCompositeDataSource.EXPECTED_FILE_SIZE_KEY_PREFIX + uri.toString())).isFalse();
+        assertThat(CacheService.containsKeyDiskCache(
+                HttpDiskCompositeDataSource.INTERVALS_KEY_PREFIX + uri.toString())).isFalse();
+    }
+
+    @Test
+    public void close_withCurrentActiveBlock_shouldWriteToDisk() throws Exception {
+        // Verifying that close() actually writes the current data to disk
+        final byte[] bytesFromNetwork = generateRandomByteArray(1000, 0);
+        when(mockHttpDataSource.open(any(DataSpec.class))).thenReturn(5000L);
+        setUpMockHttpDataSourceToReturnBytesFromNetwork(bytesFromNetwork, mockHttpDataSource);
+        byte[] readBuffer = new byte[1000];
+
+        subject.open(dataSpec);
+        subject.read(readBuffer, 0, 1000);
+        subject.close();
+
+        assertThat(readBuffer).isEqualTo(bytesFromNetwork);
+        byte[] expectedBlock = new byte[HttpDiskCompositeDataSource.BLOCK_SIZE];
+        System.arraycopy(bytesFromNetwork, 0, expectedBlock, 0, 1000);
+        assertThat(CacheService.getFromDiskCache("0" + uri.toString())).isEqualTo(expectedBlock);
+        assertThat(CacheService.getFromDiskCache(
+                HttpDiskCompositeDataSource.EXPECTED_FILE_SIZE_KEY_PREFIX + uri.toString())).isEqualTo(
+                "5000".getBytes());
+        assertThat(CacheService.getFromDiskCache(
+                HttpDiskCompositeDataSource.INTERVALS_KEY_PREFIX + uri.toString())).isEqualTo(
+                "[\"{start : 0, length : 1000}\"]".getBytes());
+    }
+
+    @Test
+    public void addNewInterval_shouldAddNewIntervalToIntervals() {
+        IntInterval interval = new IntInterval(5, 42);
+        TreeSet<IntInterval> intervalList = new TreeSet<IntInterval>();
+
+        HttpDiskCompositeDataSource.addNewInterval(intervalList, 5, 42);
+
+        assertThat(intervalList).containsOnly(interval);
+    }
+
+    @Test
+    public void addNewInterval_withExistingInterval_shouldNotAddNewInterval() {
+        IntInterval interval1 = new IntInterval(5, 42);
+        IntInterval interval2 = new IntInterval(500, 200);
+        TreeSet<IntInterval> intervalList = new TreeSet<IntInterval>();
+        intervalList.add(interval1);
+        intervalList.add(interval2);
+
+        HttpDiskCompositeDataSource.addNewInterval(intervalList, 5, 42);
+
+        assertThat(intervalList).containsOnly(interval1, interval2);
+    }
+
+    @Test
+    public void addNewInterval_withExistingIntervalInParts_shouldNotAddNewInterval() {
+        // The union of these two intervals is 5 with a length of 45 (ie. from 5 to 50).
+        // An interval from 7 to 50 (start at 7, length 43) should not be added to the interval set.
+        IntInterval interval1 = new IntInterval(10, 40);
+        IntInterval interval2 = new IntInterval(5, 20);
+        TreeSet<IntInterval> intervalList = new TreeSet<IntInterval>();
+        intervalList.add(interval1);
+        intervalList.add(interval2);
+
+        HttpDiskCompositeDataSource.addNewInterval(intervalList, 7, 43);
+
+        assertThat(intervalList).containsOnly(interval1, interval2);
+    }
+
+    @Test
+    public void addNewInterval_withNonExistingIntervals_shouldAddNewInterval() {
+        // The existing intervals here are from 10 to 100 and 150 to 250. 7 to 50 is not part of
+        // that, even though the first interval already has part of that covered, 7 to 9 is not
+        // covered by anything, so this interval should be added.
+        IntInterval interval1 = new IntInterval(10, 90);
+        IntInterval interval2 = new IntInterval(150, 100);
+        TreeSet<IntInterval> intervalList = new TreeSet<IntInterval>();
+        intervalList.add(interval1);
+        intervalList.add(interval2);
+
+        HttpDiskCompositeDataSource.addNewInterval(intervalList, 7, 43);
+
+        assertThat(intervalList).containsExactly(new IntInterval(7, 43), interval1, interval2);
+    }
+
+    @Test
+    public void getFirstContiguousPointAfter_withNoIntervals_shouldReturnInput() {
+        TreeSet<IntInterval> intervalList = new TreeSet<IntInterval>();
+        int startPoint = 12345;
+
+        int firstContiguousPointAfterStartPoint = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(
+                startPoint, intervalList);
+
+        assertThat(firstContiguousPointAfterStartPoint).isEqualTo(startPoint);
+    }
+
+    @Test
+    @SuppressWarnings("unchecked")
+    public void getFirstContiguousPointAfter_withMultipleConnectedAndDisconnectedIntervals_shouldReturnFirstContiguousPointAfterStartPoint() {
+        IntInterval[] intervalArray = new IntInterval[8];
+
+        // Goes from 500 to 1250
+        intervalArray[0] = new IntInterval(500, 200);
+        intervalArray[1] = new IntInterval(700, 300);
+        intervalArray[2] = new IntInterval(1000, 250);
+
+        // Separate section that goes from 2000 to 3000
+        intervalArray[3] = new IntInterval(2000, 1000);
+
+        // Goes from 3500 to 4500 but with various sections that overlap
+        intervalArray[4] = new IntInterval(3500, 750);
+        intervalArray[5] = new IntInterval(4000, 100);
+        intervalArray[6] = new IntInterval(4050, 200);
+        intervalArray[7] = new IntInterval(3999, 501);
+
+        TreeSet<IntInterval> intervalList = new TreeSet(Arrays.asList(intervalArray));
+
+        // Before the first section
+        int result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(499, intervalList);
+        assertThat(result).isEqualTo(499);
+
+        // At the start of the first section
+        result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(500, intervalList);
+        assertThat(result).isEqualTo(1250);
+
+        // In the first section
+        result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(567, intervalList);
+        assertThat(result).isEqualTo(1250);
+
+        // Between the first section and the second section
+        result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(1337, intervalList);
+        assertThat(result).isEqualTo(1337);
+
+        // In the second section
+        result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(2222, intervalList);
+        assertThat(result).isEqualTo(3000);
+
+        // Between the second section and the third section
+        result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(3232, intervalList);
+        assertThat(result).isEqualTo(3232);
+
+        // At the start of the third section
+        result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(3500, intervalList);
+        assertThat(result).isEqualTo(4500);
+
+        // In the third section
+        result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(3789, intervalList);
+        assertThat(result).isEqualTo(4500);
+
+        // After the third section
+        result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(4501, intervalList);
+        assertThat(result).isEqualTo(4501);
+    }
+
+    /**
+     * Creates a byte array and fills it with random data. Use the seed offset to generate
+     * subsequent random byte arrays that are not the same random byte array.
+     *
+     * @param length     How many bytes in the byte array
+     * @param seedOffset Offsets the seed so that different, random byte arrays can be created
+     * @return byte array of specified length filled with random bytes\
+     */
+    private byte[] generateRandomByteArray(int length, int seedOffset) {
+        byte[] byteArray = new byte[length];
+        new Random(BASE_SEED + seedOffset).nextBytes(byteArray);
+        return byteArray;
+    }
+
+    /**
+     * Sets up the mock http data source to return the specified bytes when queried.
+     *
+     * @param bytesFromNetwork   The bytes to write to the buffer.
+     * @param mockHttpDataSource The mock object that does this.
+     * @throws HttpDataSource.HttpDataSourceException This should never happen since this is a
+     *                                                mock.
+     */
+    private static void setUpMockHttpDataSourceToReturnBytesFromNetwork(
+            final byte[] bytesFromNetwork,
+            final HttpDataSource mockHttpDataSource) throws HttpDataSource.HttpDataSourceException {
+        when(mockHttpDataSource.read(any(byte[].class), anyInt(), anyInt())).thenAnswer(
+                new Answer<Long>() {
+                    @Override
+                    public Long answer(final InvocationOnMock invocation) throws Throwable {
+                        final Object[] args = invocation.getArguments();
+                        final byte[] byteBuffer = (byte[]) args[0];
+                        final Integer offset = (Integer) args[1];
+                        final Integer length = (Integer) args[2];
+                        System.arraycopy(bytesFromNetwork, 0, byteBuffer, offset, length);
+                        return (long) length;
+                    }
+                });
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackerTest.java
index 0bba4e12..6df8b430 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackerTest.java
@@ -4,6 +4,7 @@
 import android.view.View;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 
 import org.fest.util.Lists;
 import org.junit.Before;
@@ -11,11 +12,11 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowSystemClock;
 
 import java.util.HashMap;
 
-import static com.mopub.nativeads.MoPubNative.MoPubNativeListener;
 import static com.mopub.nativeads.VisibilityTracker.VisibilityChecker;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
@@ -26,15 +27,15 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class ImpressionTrackerTest {
     private ImpressionTracker subject;
-    private TimestampWrapper<NativeResponse> timeStampWrapper;
-    private HashMap<View, NativeResponse> trackedViews;
-    private HashMap<View, TimestampWrapper<NativeResponse>> pollingViews;
+    private TimestampWrapper<ImpressionInterface> timeStampWrapper;
+    private HashMap<View, ImpressionInterface> trackedViews;
+    private HashMap<View, TimestampWrapper<ImpressionInterface>> pollingViews;
 
-    @Mock private NativeResponse nativeResponse;
-    @Mock private NativeResponse nativeResponse2;
-    @Mock private MoPubNativeListener moPubNativeListener;
+    @Mock private ImpressionInterface impressionInterface;
+    @Mock private ImpressionInterface impressionInterface2;
     @Mock private VisibilityTracker visibilityTracker;
     @Mock private Handler handler;
     @Mock private View view;
@@ -45,18 +46,18 @@ public void setUp() {
         view = VisibilityTrackerTest.createViewMock(View.VISIBLE, 100, 100, 100, 100, true, true);
         view2 = VisibilityTrackerTest.createViewMock(View.VISIBLE, 100, 100, 100, 100, true, true);
 
-        pollingViews = new HashMap<View, TimestampWrapper<NativeResponse>>(10);
-        trackedViews = new HashMap<View, NativeResponse>(10);
+        pollingViews = new HashMap<View, TimestampWrapper<ImpressionInterface>>(10);
+        trackedViews = new HashMap<View, ImpressionInterface>(10);
         final VisibilityChecker visibilityChecker = new VisibilityChecker();
         subject = new ImpressionTracker(trackedViews, pollingViews, visibilityChecker,
                 visibilityTracker, handler);
 
-        timeStampWrapper = new TimestampWrapper<NativeResponse>(nativeResponse);
+        timeStampWrapper = new TimestampWrapper<ImpressionInterface>(impressionInterface);
 
-        when(nativeResponse.getImpressionMinPercentageViewed()).thenReturn(50);
-        when(nativeResponse.getImpressionMinTimeViewed()).thenReturn(1000);
-        when(nativeResponse2.getImpressionMinPercentageViewed()).thenReturn(50);
-        when(nativeResponse2.getImpressionMinTimeViewed()).thenReturn(1000);
+        when(impressionInterface.getImpressionMinPercentageViewed()).thenReturn(50);
+        when(impressionInterface.getImpressionMinTimeViewed()).thenReturn(1000);
+        when(impressionInterface2.getImpressionMinPercentageViewed()).thenReturn(50);
+        when(impressionInterface2.getImpressionMinTimeViewed()).thenReturn(1000);
 
         // XXX We need this to ensure that our SystemClock starts
         ShadowSystemClock.uptimeMillis();
@@ -64,99 +65,89 @@ public void setUp() {
 
     @Test
     public void addView_shouldAddViewToTrackedViews_shouldAddViewToVisibilityTracker() {
-        subject.addView(view, nativeResponse);
+        subject.addView(view, impressionInterface);
 
         assertThat(trackedViews).hasSize(1);
-        assertThat(trackedViews.get(view)).isEqualTo(nativeResponse);
-        verify(visibilityTracker).addView(view, nativeResponse.getImpressionMinPercentageViewed());
+        assertThat(trackedViews.get(view)).isEqualTo(impressionInterface);
+        verify(visibilityTracker).addView(view, impressionInterface
+                .getImpressionMinPercentageViewed());
     }
 
     @Test
     public void addView_withRecordedImpression_shouldNotAddView() {
-        when(nativeResponse.getRecordedImpression()).thenReturn(true);
+        when(impressionInterface.isImpressionRecorded()).thenReturn(true);
 
-        subject.addView(view, nativeResponse);
+        subject.addView(view, impressionInterface);
 
         assertThat(trackedViews).hasSize(0);
         verify(visibilityTracker, never())
-                .addView(view, nativeResponse.getImpressionMinPercentageViewed());
+                .addView(view, impressionInterface.getImpressionMinPercentageViewed());
     }
 
     @Test
-    public void addView_withDestroyedNativeResponse_shouldNotAddView() {
-        when(nativeResponse.isDestroyed()).thenReturn(true);
-
-        subject.addView(view, nativeResponse);
-
-        assertThat(trackedViews).isEmpty();
-        verify(visibilityTracker, never())
-                .addView(view, nativeResponse.getImpressionMinPercentageViewed());
-    }
-
-    @Test
-    public void addView_withDifferentNativeResponse_shouldRemoveFromPollingViews() {
-        subject.addView(view, nativeResponse);
+    public void addView_withDifferentImpressionInterface_shouldRemoveFromPollingViews() {
+        subject.addView(view, impressionInterface);
 
         assertThat(trackedViews).hasSize(1);
-        assertThat(trackedViews.get(view)).isEqualTo(nativeResponse);
-        verify(visibilityTracker).addView(view, nativeResponse.getImpressionMinPercentageViewed());
+        assertThat(trackedViews.get(view)).isEqualTo(impressionInterface);
+        verify(visibilityTracker).addView(view, impressionInterface.getImpressionMinPercentageViewed());
 
         pollingViews.put(view, timeStampWrapper);
 
-        subject.addView(view, nativeResponse2);
+        subject.addView(view, impressionInterface2);
 
         assertThat(trackedViews).hasSize(1);
-        assertThat(trackedViews.get(view)).isEqualTo(nativeResponse2);
+        assertThat(trackedViews.get(view)).isEqualTo(impressionInterface2);
         assertThat(pollingViews).isEmpty();
         verify(visibilityTracker, times(2))
-                .addView(view, nativeResponse.getImpressionMinPercentageViewed());
+                .addView(view, impressionInterface.getImpressionMinPercentageViewed());
     }
 
     @Test
-    public void addView_withDifferentAlreadyImpressedNativeResponse_shouldRemoveFromPollingViews_shouldNotTrack() {
-        when(nativeResponse2.getRecordedImpression()).thenReturn(true);
+    public void addView_withDifferentAlreadyImpressedImpressionInterface_shouldRemoveFromPollingViews_shouldNotTrack() {
+        when(impressionInterface2.isImpressionRecorded()).thenReturn(true);
 
-        subject.addView(view, nativeResponse);
+        subject.addView(view, impressionInterface);
 
         assertThat(trackedViews).hasSize(1);
-        assertThat(trackedViews.get(view)).isEqualTo(nativeResponse);
-        verify(visibilityTracker).addView(view, nativeResponse.getImpressionMinPercentageViewed());
+        assertThat(trackedViews.get(view)).isEqualTo(impressionInterface);
+        verify(visibilityTracker).addView(view, impressionInterface.getImpressionMinPercentageViewed());
 
         pollingViews.put(view, timeStampWrapper);
 
-        subject.addView(view, nativeResponse2);
+        subject.addView(view, impressionInterface2);
 
         assertThat(trackedViews).hasSize(0);
         assertThat(trackedViews.get(view)).isNull();
         assertThat(pollingViews).isEmpty();
-        verify(visibilityTracker).addView(view, nativeResponse.getImpressionMinPercentageViewed());
+        verify(visibilityTracker).addView(view, impressionInterface.getImpressionMinPercentageViewed());
     }
 
     @Test
-    public void addView_withSameNativeResponse_shouldNotAddView() {
-        subject.addView(view, nativeResponse);
+    public void addView_withSameImpressionInterface_shouldNotAddView() {
+        subject.addView(view, impressionInterface);
 
         assertThat(trackedViews).hasSize(1);
-        assertThat(trackedViews.get(view)).isEqualTo(nativeResponse);
-        verify(visibilityTracker).addView(view, nativeResponse.getImpressionMinPercentageViewed());
+        assertThat(trackedViews.get(view)).isEqualTo(impressionInterface);
+        verify(visibilityTracker).addView(view, impressionInterface.getImpressionMinPercentageViewed());
 
         pollingViews.put(view, timeStampWrapper);
 
-        subject.addView(view, nativeResponse);
+        subject.addView(view, impressionInterface);
 
         assertThat(trackedViews).hasSize(1);
-        assertThat(trackedViews.get(view)).isEqualTo(nativeResponse);
+        assertThat(trackedViews.get(view)).isEqualTo(impressionInterface);
         assertThat(pollingViews.keySet()).containsOnly(view);
 
         // Still only one call
-        verify(visibilityTracker).addView(view, nativeResponse.getImpressionMinPercentageViewed());
+        verify(visibilityTracker).addView(view, impressionInterface.getImpressionMinPercentageViewed());
     }
 
     @Test
     public void removeView_shouldRemoveViewFromViewTrackedViews_shouldRemoveViewFromPollingMap_shouldRemoveViewFromVisibilityTracker() {
-        trackedViews.put(view, nativeResponse);
-        pollingViews.put(view, new TimestampWrapper<NativeResponse>(nativeResponse));
-        visibilityTracker.addView(view, nativeResponse.getImpressionMinPercentageViewed());
+        trackedViews.put(view, impressionInterface);
+        pollingViews.put(view, new TimestampWrapper<ImpressionInterface>(impressionInterface));
+        visibilityTracker.addView(view, impressionInterface.getImpressionMinPercentageViewed());
 
         subject.removeView(view);
 
@@ -167,12 +158,12 @@ public void removeView_shouldRemoveViewFromViewTrackedViews_shouldRemoveViewFrom
 
     @Test
     public void clear_shouldClearViewTrackedViews_shouldClearPollingViews_shouldClearVisibilityTracker_shouldClearPollHandler() {
-        trackedViews.put(view, nativeResponse);
-        trackedViews.put(view2, nativeResponse);
+        trackedViews.put(view, impressionInterface);
+        trackedViews.put(view2, impressionInterface);
         pollingViews.put(view, timeStampWrapper);
         pollingViews.put(view2, timeStampWrapper);
-        visibilityTracker.addView(view, nativeResponse.getImpressionMinPercentageViewed());
-        visibilityTracker.addView(view2, nativeResponse.getImpressionMinPercentageViewed());
+        visibilityTracker.addView(view, impressionInterface.getImpressionMinPercentageViewed());
+        visibilityTracker.addView(view2, impressionInterface.getImpressionMinPercentageViewed());
 
         subject.clear();
 
@@ -184,12 +175,12 @@ public void clear_shouldClearViewTrackedViews_shouldClearPollingViews_shouldClea
     
     @Test
     public void destroy_shouldCallClear_shouldDestroyVisibilityTracker_shouldSetVisibilityTrackerListenerToNull() throws Exception {
-        trackedViews.put(view, nativeResponse);
-        trackedViews.put(view2, nativeResponse);
+        trackedViews.put(view, impressionInterface);
+        trackedViews.put(view2, impressionInterface);
         pollingViews.put(view, timeStampWrapper);
         pollingViews.put(view2, timeStampWrapper);
-        visibilityTracker.addView(view, nativeResponse.getImpressionMinPercentageViewed());
-        visibilityTracker.addView(view2, nativeResponse.getImpressionMinPercentageViewed());
+        visibilityTracker.addView(view, impressionInterface.getImpressionMinPercentageViewed());
+        visibilityTracker.addView(view2, impressionInterface.getImpressionMinPercentageViewed());
         assertThat(subject.getVisibilityTrackerListener()).isNotNull();
 
         subject.destroy();
@@ -224,7 +215,7 @@ public void scheduleNextPoll_withMessages_shouldNotPostDelayedThePollingRunnable
 
     @Test
     public void visibilityTrackerListener_onVisibilityChanged_withVisibleViews_shouldAddViewToPollingViews_shouldScheduleNextPoll() {
-        subject.addView(view, nativeResponse);
+        subject.addView(view, impressionInterface);
 
         assertThat(pollingViews).isEmpty();
 
@@ -237,7 +228,7 @@ public void visibilityTrackerListener_onVisibilityChanged_withVisibleViews_shoul
 
     @Test
     public void visibilityTrackerListener_onVisibilityChanged_withVisibleViews_shouldRemoveViewFromPollingViews() {
-        subject.addView(view, nativeResponse);
+        subject.addView(view, impressionInterface);
         subject.getVisibilityTrackerListener()
                 .onVisibilityChanged(Lists.newArrayList(view), Lists.<View>newArrayList());
 
@@ -259,10 +250,10 @@ public void pollingRunnableRun_whenLessThanOneSecondHasElapsed_shouldNotTrackImp
         pollingViews.put(view, timeStampWrapper);
 
         // We progress 999 milliseconds
-        Robolectric.getUiThreadScheduler().advanceBy(5555 + 999);
+        Robolectric.getForegroundThreadScheduler().advanceTo(5555 + 999);
         subject.new PollingRunnable().run();
 
-        verify(nativeResponse, never()).recordImpression(view);
+        verify(impressionInterface, never()).recordImpression(view);
 
         assertThat(pollingViews.keySet()).containsOnly(view);
         verify(handler).postDelayed(any(ImpressionTracker.PollingRunnable.class), eq((long) 250));
@@ -275,10 +266,10 @@ public void pollingRunnableRun_whenMoreThanOneSecondHasElapsed_shouldTrackImpres
         pollingViews.put(view, timeStampWrapper);
 
         // We progress 1000 milliseconds
-        Robolectric.getUiThreadScheduler().advanceBy(5555 + 1000);
+        Robolectric.getForegroundThreadScheduler().advanceTo(5555 + 1000);
         subject.new PollingRunnable().run();
 
-        verify(nativeResponse).recordImpression(view);
+        verify(impressionInterface).recordImpression(view);
 
         assertThat(pollingViews).isEmpty();
         verify(handler, never())
@@ -290,16 +281,16 @@ public void pollingRunnableRun_whenWrapperIsNull_shouldThrowNPE() {
         pollingViews.put(view, null);
         subject.new PollingRunnable().run();
 
-        verify(nativeResponse, never()).recordImpression(view);
+        verify(impressionInterface, never()).recordImpression(view);
     }
 
     @Test(expected = NullPointerException.class)
-    public void pollingRunnableRun_whenNativeResponseIsNull_shouldThrowNPE() {
+    public void pollingRunnableRun_whenImpressionInterfaceIsNull_shouldThrowNPE() {
         // This doesn't normally happen; perhaps we're being overly defensive
-        pollingViews.put(view, new TimestampWrapper<NativeResponse>(null));
+        pollingViews.put(view, new TimestampWrapper<ImpressionInterface>(null));
 
         subject.new PollingRunnable().run();
 
-        verify(nativeResponse, never()).recordImpression(view);
+        verify(impressionInterface, never()).recordImpression(view);
     }
 }
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MediaLayoutTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MediaLayoutTest.java
new file mode 100644
index 00000000..9573d1f8
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MediaLayoutTest.java
@@ -0,0 +1,93 @@
+package com.mopub.nativeads;
+
+import android.annotation.SuppressLint;
+import android.content.Context;
+import android.view.View.MeasureSpec;
+import android.view.ViewGroup;
+import android.widget.RelativeLayout;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowApplication;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class MediaLayoutTest {
+
+    MediaLayout spySubject;
+    Context context;
+
+    @Before
+    public void setup() {
+        context = ShadowApplication.getInstance().getApplicationContext();
+        spySubject = spy(new MediaLayout(context));
+        spySubject.setLayoutParams(new RelativeLayout.LayoutParams(300, 300));
+        when(spySubject.getMeasuredHeight()).thenReturn(300);
+        when(spySubject.getMeasuredWidth()).thenReturn(300);
+    }
+
+    @Test
+    @SuppressLint("WrongCall") // onMeasure should not ordinarily be called in application code
+    public void onMeasure_exactWidth_flexibleHeight_shouldBe16By9() {
+        int widthMeasureSpec = MeasureSpec.makeMeasureSpec(500, MeasureSpec.EXACTLY);
+        int heightMeasureSpec = MeasureSpec.makeMeasureSpec(500, MeasureSpec.AT_MOST);
+
+        spySubject.onMeasure(widthMeasureSpec, heightMeasureSpec);
+
+        final ViewGroup.LayoutParams params = spySubject.getLayoutParams();
+
+        assertThat(params.width).isEqualTo(500);
+        assertThat(params.height).isEqualTo((int)(500 * 9f / 16));
+    }
+
+    @Test
+    @SuppressLint("WrongCall") // onMeasure should not ordinarily be called in application code
+    public void onMeasure_flexibleWidth_flexibleHeight_shouldBe16By9() {
+        int widthMeasureSpec = MeasureSpec.makeMeasureSpec(500, MeasureSpec.AT_MOST);
+        int heightMeasureSpec = MeasureSpec.makeMeasureSpec(500, MeasureSpec.AT_MOST);
+
+        spySubject.onMeasure(widthMeasureSpec, heightMeasureSpec);
+
+        final ViewGroup.LayoutParams params = spySubject.getLayoutParams();
+
+        assertThat(params.width).isEqualTo(300);
+        assertThat(params.height).isEqualTo((int)(300 * 9f / 16));
+    }
+
+    @Test
+    @SuppressLint("WrongCall") // onMeasure should not ordinarily be called in application code
+    public void onMeasure_flexibleWidth_ExactHeight_shouldBe16By9() {
+        int widthMeasureSpec = MeasureSpec.makeMeasureSpec(700, MeasureSpec.AT_MOST);
+        int heightMeasureSpec = MeasureSpec.makeMeasureSpec(150, MeasureSpec.EXACTLY);
+
+        spySubject.onMeasure(widthMeasureSpec, heightMeasureSpec);
+
+        final ViewGroup.LayoutParams params = spySubject.getLayoutParams();
+
+        assertThat(params.height).isEqualTo(150);
+        assertThat(params.width).isEqualTo((int)(150 * 16f / 9));
+    }
+
+    @Test
+    @SuppressLint("WrongCall")
+    public void onMeasure_exactWidth_exactHeight_heightShouldBeSmaller() {
+        int widthMeasureSpec = MeasureSpec.makeMeasureSpec(500, MeasureSpec.EXACTLY);
+        int heightMeasureSpec = MeasureSpec.makeMeasureSpec(500, MeasureSpec.EXACTLY);
+
+        spySubject.onMeasure(widthMeasureSpec, heightMeasureSpec);
+
+        final ViewGroup.LayoutParams params = spySubject.getLayoutParams();
+
+        assertThat(params.width).isEqualTo(500);
+        assertThat(params.height).isEqualTo((int)(500 * 9f / 16));
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java
index 06f1c83d..7e91e7db 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java
@@ -12,6 +12,7 @@
 import android.widget.ListView;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -21,6 +22,7 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
@@ -33,6 +35,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class MoPubAdAdapterTest {
     private static final int AD_POSITION = 1;
 
@@ -186,23 +189,6 @@ public void registerAdRenderer_withNull_shouldNotCallAdPlacer() {
         verify(mockStreamAdPlacer, never()).registerAdRenderer(any(MoPubAdRenderer.class));
     }
 
-    @Test
-    public void registerViewBinder_shouldCallAdPlacer() {
-        subject.registerViewBinder(mockViewBinder);
-
-        final ArgumentCaptor<MoPubAdRenderer> rendererCaptor = new ArgumentCaptor<MoPubAdRenderer>();
-        verify(mockStreamAdPlacer).registerAdRenderer(rendererCaptor.capture());
-        MoPubAdRenderer renderer = rendererCaptor.getValue();
-        assertThat(renderer).isExactlyInstanceOf(MoPubNativeAdRenderer.class);
-    }
-
-    @Test
-    public void registerViewBinder_withNull_shouldNotCallAdPlacer() {
-        subject.registerViewBinder(null);
-
-        verify(mockStreamAdPlacer, never()).registerAdRenderer(any(MoPubAdRenderer.class));
-    }
-
     @Test
     public void setAdLoadedListener_handleAdLoaded_shouldCallCallback_shouldCallObserver() {
         subject.setAdLoadedListener(mockAdLoadedListener);
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubClientPositioningTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubClientPositioningTest.java
index 1f117225..7339313b 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubClientPositioningTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubClientPositioningTest.java
@@ -2,17 +2,20 @@
 
 import com.mopub.common.Preconditions.NoThrow;
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
 
 import org.fest.util.Lists;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
 
 import static com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning.NO_REPEAT;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class MoPubClientPositioningTest {
 
     private MoPubClientPositioning subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
index 361e8fce..a4273408 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
@@ -4,37 +4,41 @@
 
 import com.mopub.common.DataKeys;
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
+import com.mopub.nativeads.MoPubCustomEventNative.MoPubStaticNativeAd;
 
 import org.json.JSONArray;
 import org.json.JSONObject;
-import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 
 import java.util.HashMap;
 
 import static com.mopub.nativeads.CustomEventNative.CustomEventNativeListener;
 import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class MoPubCustomEventNativeTest {
 
     private MoPubCustomEventNative subject;
     private Activity context;
     private HashMap<String, Object> localExtras;
-    private CustomEventNativeListener mCustomEventNativeListener;
     private HashMap<String, String> serverExtras;
     private JSONObject fakeJsonObject;
 
+    @Mock private CustomEventNativeListener mockCustomEventNativeListener;
+
     @Before
     public void setUp() throws Exception {
         subject = new MoPubCustomEventNative();
-        context = new Activity();
+        context = Robolectric.buildActivity(Activity.class).create().get();
 
         localExtras = new HashMap<String, Object>();
         serverExtras = new HashMap<String, String>();
@@ -47,21 +51,15 @@ public void setUp() throws Exception {
         fakeJsonObject.put("extraimage", "extraimageurl");
 
         localExtras.put(DataKeys.JSON_BODY_KEY, fakeJsonObject);
-
-        mCustomEventNativeListener = mock(CustomEventNativeListener.class);
-    }
-
-    @After
-    public void tearDown() throws Exception {
-        reset(mCustomEventNativeListener);
     }
 
     @Test
-    public void loadNativeAd_withNullResponseBody_shouldNotifyListenerOfOnNativeAdFailed() throws Exception {
+    public void loadNativeAd_withNullResponseBody_shouldNotifyListenerOfOnNativeAdFailed() {
         localExtras.remove(DataKeys.JSON_BODY_KEY);
 
-        subject.loadNativeAd(context, mCustomEventNativeListener, localExtras, serverExtras);
-        verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(MoPubCustomEventNative.MoPubForwardingNativeAd.class));
-        verify(mCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.INVALID_JSON);
+        subject.loadNativeAd(context, mockCustomEventNativeListener, localExtras, serverExtras);
+        verify(mockCustomEventNativeListener, never())
+                .onNativeAdLoaded(any(MoPubStaticNativeAd.class));
+        verify(mockCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.INVALID_RESPONSE);
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventVideoNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventVideoNativeTest.java
new file mode 100644
index 00000000..535d0992
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventVideoNativeTest.java
@@ -0,0 +1,181 @@
+package com.mopub.nativeads;
+
+import android.annotation.TargetApi;
+import android.app.Activity;
+import android.os.Build;
+
+import com.mopub.common.DataKeys;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
+import com.mopub.nativeads.MoPubCustomEventVideoNative.VideoResponseHeaders;
+import com.mopub.network.MaxWidthImageLoader;
+import com.mopub.network.Networking;
+
+import org.json.JSONArray;
+import org.json.JSONObject;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import java.util.HashMap;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+@TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class MoPubCustomEventVideoNativeTest {
+
+    private MoPubCustomEventVideoNative subject;
+    private Activity context;
+    private HashMap<String, Object> localExtras;
+    private HashMap<String, String> serverExtras;
+    private JSONObject jsonObject;
+
+    @Mock private CustomEventNative.CustomEventNativeListener mockCustomEventNativeListener;
+
+    @Before
+    public void setUp() throws Exception {
+        subject = new MoPubCustomEventVideoNative();
+        context = Robolectric.buildActivity(Activity.class).create().get();
+
+        localExtras = new HashMap<String, Object>();
+        jsonObject = new JSONObject();
+        jsonObject.put("imptracker", new JSONArray("[\"url1\", \"url2\"]"));
+        jsonObject.put("clktracker", "expected clicktracker");
+        jsonObject.put("mainimage", "mainimageurl");
+        jsonObject.put("iconimage", "iconimageurl");
+        jsonObject.put("extraimage", "extraimageurl");
+        localExtras.put(DataKeys.JSON_BODY_KEY, jsonObject);
+        localExtras.put(DataKeys.CLICK_TRACKING_URL_KEY, "clicktrackingurl");
+
+        serverExtras = new HashMap<String, String>();
+        serverExtras.put("Play-Visible-Percent", "10");
+        serverExtras.put("Pause-Visible-Percent", "5");
+        serverExtras.put("Impression-Min-Visible-Percent", "15");
+        serverExtras.put("Impression-Visible-Ms", "100");
+        serverExtras.put("Max-Buffer-Ms", "20");
+
+    }
+
+    @After
+    public void tearDown() {
+        Networking.setImageLoaderForTesting(null);
+    }
+
+    @Test
+    public void loadNativeAd_withJsonNotInstanceOfJSONObject_shouldNotifyListenerOnNativeAdFailed() {
+        localExtras.put("com_mopub_native_json", "");
+        subject.loadNativeAd(context, mockCustomEventNativeListener, localExtras, serverExtras);
+
+        verify(mockCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.INVALID_RESPONSE);
+        verify(mockCustomEventNativeListener, never()).onNativeAdLoaded(any(BaseNativeAd.class));
+    }
+
+    @Test
+    public void loadNativeAd_withInvalidHeaders_shouldNotifyListenerOnNativeAdFailed() {
+        serverExtras.put("Play-Visible-Percent", "not_a_number");
+        subject.loadNativeAd(context, mockCustomEventNativeListener, localExtras, serverExtras);
+
+        verify(mockCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.INVALID_RESPONSE);
+        verify(mockCustomEventNativeListener, never()).onNativeAdLoaded(any(BaseNativeAd.class));
+    }
+
+    @Test
+    public void loadNativeAd_withMissingRequiredKeys_shouldNotifyListenerOnNativeAdFailed() {
+        jsonObject.remove("imptracker");
+        subject.loadNativeAd(context, mockCustomEventNativeListener, localExtras, serverExtras);
+        verify(mockCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
+
+        reset(mockCustomEventNativeListener);
+        jsonObject.remove("clktracker");
+        subject.loadNativeAd(context, mockCustomEventNativeListener, localExtras, serverExtras);
+        verify(mockCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
+        verify(mockCustomEventNativeListener, never()).onNativeAdLoaded(any(BaseNativeAd.class));
+    }
+
+    @Test
+    public void loadNativeAd_withMissingClickTracker_shouldNotifyListenerOnNativeAdFailed() {
+        localExtras.remove(DataKeys.CLICK_TRACKING_URL_KEY);
+        subject.loadNativeAd(context, mockCustomEventNativeListener, localExtras, serverExtras);
+        verify(mockCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
+        verify(mockCustomEventNativeListener, never()).onNativeAdLoaded(any(BaseNativeAd.class));
+    }
+
+    @Test
+    public void loadNativeAd_withNullClickTracker_shouldNotifyListenerOnNativeAdFailed() {
+        localExtras.put(DataKeys.CLICK_TRACKING_URL_KEY, null);
+        subject.loadNativeAd(context, mockCustomEventNativeListener, localExtras, serverExtras);
+        verify(mockCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
+        verify(mockCustomEventNativeListener, never()).onNativeAdLoaded(any(BaseNativeAd.class));
+    }
+
+    @Test
+    public void loadNativeAd_withEmptyClickTracker_shouldNotifyListenerOnNativeAdFailed() {
+        localExtras.put(DataKeys.CLICK_TRACKING_URL_KEY, "");
+        subject.loadNativeAd(context, mockCustomEventNativeListener, localExtras, serverExtras);
+        verify(mockCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
+        verify(mockCustomEventNativeListener, never()).onNativeAdLoaded(any(BaseNativeAd.class));
+    }
+
+    @Test
+    public void loadNativeAd_withAllRequirementsMet_shouldNotNotifyListenerFailed_shouldNotThrowException() {
+        Networking.setImageLoaderForTesting(mock(MaxWidthImageLoader.class));
+        subject.loadNativeAd(context, mockCustomEventNativeListener, localExtras, serverExtras);
+
+        verifyNoMoreInteractions(mockCustomEventNativeListener);
+    }
+
+    @Test
+    public void VideoResponseHeaders_constructor_withValidNumberString_shouldInitializeVariablesCorrectly() {
+        VideoResponseHeaders videoResponseHeaders = new VideoResponseHeaders(serverExtras);
+
+        assertThat(videoResponseHeaders.hasValidHeaders()).isTrue();
+        assertThat(videoResponseHeaders.getPlayVisiblePercent()).isEqualTo(10);
+        assertThat(videoResponseHeaders.getPauseVisiblePercent()).isEqualTo(5);
+        assertThat(videoResponseHeaders.getImpressionMinVisiblePercent()).isEqualTo(15);
+        assertThat(videoResponseHeaders.getImpressionVisibleMs()).isEqualTo(100);
+        assertThat(videoResponseHeaders.getMaxBufferMs()).isEqualTo(20);
+    }
+
+    @Test
+    public void VideoResponseHeaders_constructor_withInvalidNumberString_shouldSetHeadersAreValidToFalse() {
+        serverExtras.put("Play-Visible-Percent", "not_a_number");
+        VideoResponseHeaders videoResponseHeaders = new VideoResponseHeaders(serverExtras);
+        assertThat(videoResponseHeaders.hasValidHeaders()).isFalse();
+
+        serverExtras.put("Play-Visible-Percent", "10");
+        serverExtras.put("Pause-Visible-Percent", "not_a_number");
+        videoResponseHeaders = new VideoResponseHeaders(serverExtras);
+        assertThat(videoResponseHeaders.hasValidHeaders()).isFalse();
+
+        serverExtras.put("Pause-Visible-Percent", "5");
+        serverExtras.put("Impression-Min-Visible-Percent", "not_a_number");
+        videoResponseHeaders = new VideoResponseHeaders(serverExtras);
+        assertThat(videoResponseHeaders.hasValidHeaders()).isFalse();
+
+        serverExtras.put("Impression-Min-Visible-Percent", "15");
+        serverExtras.put("Impression-Visible-Ms", "not_a_number");
+        videoResponseHeaders = new VideoResponseHeaders(serverExtras);
+        assertThat(videoResponseHeaders.hasValidHeaders()).isFalse();
+
+        serverExtras.put("Impression-Visible-Ms", "100");
+        serverExtras.put("Max-Buffer-Ms", "not_a_number");
+        videoResponseHeaders = new VideoResponseHeaders(serverExtras);
+        assertThat(videoResponseHeaders.hasValidHeaders()).isFalse();
+
+        serverExtras.put("Max-Buffer-Ms", "20");
+        videoResponseHeaders = new VideoResponseHeaders(serverExtras);
+        assertThat(videoResponseHeaders.hasValidHeaders()).isTrue();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeAdRendererTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeAdRendererTest.java
deleted file mode 100644
index 70a139c0..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeAdRendererTest.java
+++ /dev/null
@@ -1,173 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.view.ViewGroup;
-import android.widget.Button;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
-import android.widget.RelativeLayout;
-import android.widget.TextView;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.Utils;
-
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.rules.ExpectedException;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-
-@RunWith(SdkTestRunner.class)
-public class MoPubNativeAdRendererTest {
-    private MoPubNativeAdRenderer subject;
-    private RelativeLayout relativeLayout;
-    private ViewGroup viewGroup;
-    private NativeResponse nativeResponse;
-    private ViewBinder viewBinder;
-    private TextView titleView;
-    private TextView textView;
-    private TextView callToActionView;
-    private ImageView mainImageView;
-    private ImageView iconImageView;
-    private ImageView badView;
-
-    @Before
-    public void setUp() throws Exception {
-        Activity context = Robolectric.buildActivity(Activity.class).create().get();
-        relativeLayout = new RelativeLayout(context);
-        relativeLayout.setId((int) Utils.generateUniqueId());
-        viewGroup = new LinearLayout(context);
-
-        BaseForwardingNativeAd baseForwardingNativeAd = new BaseForwardingNativeAd() {};
-        baseForwardingNativeAd.setTitle("test title");
-        baseForwardingNativeAd.setText("test text");
-        baseForwardingNativeAd.setCallToAction("test call to action");
-        baseForwardingNativeAd.setClickDestinationUrl("destinationUrl");
-
-        nativeResponse = new NativeResponse(context,
-                "impressionTrackerUrl",
-                "clickTrackerUrl",
-                "test ID", baseForwardingNativeAd,
-                mock(MoPubNative.MoPubNativeListener.class));
-
-        titleView = new TextView(context);
-        titleView.setId((int) Utils.generateUniqueId());
-        textView = new TextView(context);
-        textView.setId((int) Utils.generateUniqueId());
-        callToActionView = new Button(context);
-        callToActionView.setId((int) Utils.generateUniqueId());
-        mainImageView = new ImageView(context);
-        mainImageView.setId((int) Utils.generateUniqueId());
-        iconImageView = new ImageView(context);
-        iconImageView.setId((int) Utils.generateUniqueId());
-        badView = new ImageView(context);
-        badView.setId((int) Utils.generateUniqueId());
-
-        relativeLayout.addView(titleView);
-        relativeLayout.addView(textView);
-        relativeLayout.addView(callToActionView);
-        relativeLayout.addView(mainImageView);
-        relativeLayout.addView(iconImageView);
-        relativeLayout.addView(badView);
-
-        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
-                .titleId(titleView.getId())
-                .textId(textView.getId())
-                .callToActionId(callToActionView.getId())
-                .mainImageId(mainImageView.getId())
-                .iconImageId(iconImageView.getId())
-                .build();
-
-        subject = new MoPubNativeAdRenderer(viewBinder);
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void createAdView_withNullContext_shouldThrowNPE() {
-        subject.createAdView(null, viewGroup);
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void renderAdView_withNullView_shouldThrowNPE() {
-        subject.renderAdView(null, nativeResponse);
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void renderAdView_withNullNativeResponse_shouldThrowNPE() {
-        subject.renderAdView(relativeLayout, null);
-    }
-
-    @Rule public ExpectedException exception = ExpectedException.none();
-
-    @Test
-    public void renderAdView_withNullViewBinder_shouldThrowNPE() {
-        subject = new MoPubNativeAdRenderer(null);
-
-        exception.expect(NullPointerException.class);
-        subject.renderAdView(relativeLayout, nativeResponse);
-    }
-
-    @Test
-    public void renderAdView_shouldReturnPopulatedView() {
-        subject.renderAdView(relativeLayout, nativeResponse);
-
-        assertThat(((TextView)relativeLayout.findViewById(titleView.getId())).getText()).isEqualTo("test title");
-        assertThat(((TextView)relativeLayout.findViewById(textView.getId())).getText()).isEqualTo(
-                "test text");
-        assertThat(((TextView)relativeLayout.findViewById(callToActionView.getId())).getText()).isEqualTo("test call to action");
-
-        // not testing images due to testing complexity
-    }
-
-    @Test
-    public void renderAdView_withFailedViewBinder_shouldReturnEmptyViews() {
-        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
-                .titleId(titleView.getId())
-                .textId(badView.getId())
-                .callToActionId(callToActionView.getId())
-                .mainImageId(mainImageView.getId())
-                .iconImageId(iconImageView.getId())
-                .build();
-
-        subject = new MoPubNativeAdRenderer(viewBinder);
-        subject.renderAdView(relativeLayout, nativeResponse);
-
-        assertThat(((TextView)relativeLayout.findViewById(titleView.getId())).getText())
-                .isEqualTo("");
-        assertThat(((TextView)relativeLayout.findViewById(textView.getId())).getText())
-                .isEqualTo("");
-        assertThat(((TextView)relativeLayout.findViewById(callToActionView.getId())).getText())
-                .isEqualTo("");
-    }
-
-    @Test
-    public void renderAdView_withNoViewHolder_shouldCreateNativeViewHolder() {
-        subject.renderAdView(relativeLayout, nativeResponse);
-
-        NativeViewHolder expectedViewHolder = NativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
-        NativeViewHolder viewHolder = subject.mViewHolderMap.get(relativeLayout);
-        compareNativeViewHolders(expectedViewHolder, viewHolder);
-    }
-
-    @Test
-    public void getOrCreateNativeViewHolder_withViewHolder_shouldNotReCreateNativeViewHolder() {
-        subject.renderAdView(relativeLayout, nativeResponse);
-        NativeViewHolder expectedViewHolder = subject.mViewHolderMap.get(relativeLayout);
-        subject.renderAdView(relativeLayout, nativeResponse);
-
-        NativeViewHolder viewHolder = subject.mViewHolderMap.get(relativeLayout);
-        assertThat(viewHolder).isEqualTo(expectedViewHolder);
-    }
-
-    static private void compareNativeViewHolders(final NativeViewHolder actualViewHolder,
-            final NativeViewHolder expectedViewHolder) {
-        assertThat(actualViewHolder.titleView).isEqualTo(expectedViewHolder.titleView);
-        assertThat(actualViewHolder.textView).isEqualTo(expectedViewHolder.textView);
-        assertThat(actualViewHolder.callToActionView).isEqualTo(expectedViewHolder.callToActionView);
-        assertThat(actualViewHolder.mainImageView).isEqualTo(expectedViewHolder.mainImageView);
-        assertThat(actualViewHolder.iconImageView).isEqualTo(expectedViewHolder.iconImageView);
-    }
-}
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
index a29e19ee..a156332a 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
@@ -6,8 +6,8 @@
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.test.support.ShadowAsyncTasks;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
+import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.MoPubErrorCode;
-import com.mopub.nativeads.MoPubNative.MoPubNativeEventListener;
 import com.mopub.nativeads.MoPubNative.MoPubNativeNetworkListener;
 import com.mopub.network.MoPubNetworkError;
 import com.mopub.network.MoPubRequestQueue;
@@ -24,19 +24,18 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
+import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLog;
 
 import java.net.MalformedURLException;
 import java.util.List;
-import java.util.concurrent.Semaphore;
 import java.util.logging.Level;
 
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
 import static android.Manifest.permission.INTERNET;
 import static com.mopub.common.VolleyRequestMatcher.isUrl;
 import static com.mopub.common.util.Reflection.MethodBuilder;
-import static com.mopub.nativeads.MoPubNative.EMPTY_EVENT_LISTENER;
 import static com.mopub.nativeads.MoPubNative.EMPTY_NETWORK_LISTENER;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
@@ -46,32 +45,28 @@
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
-import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
-@Config(shadows = {ShadowAsyncTasks.class})
+@Config(constants = BuildConfig.class, shadows = {ShadowAsyncTasks.class})
 public class MoPubNativeTest {
     private MoPubNative subject;
     private MethodBuilder methodBuilder;
     private Activity context;
-    private Semaphore semaphore;
     private static final String adUnitId = "test_adunit_id";
 
-    @Mock private MoPubNativeEventListener mockEventListener;
-
     @Mock private MoPubNativeNetworkListener mockNetworkListener;
     @Mock private MoPubRequestQueue mockRequestQueue;
-
+    @Mock private AdRendererRegistry mockAdRendererRegistry;
+    @Mock private MoPubStaticNativeAdRenderer mockRenderer;
 
     @Before
     public void setup() {
         context = Robolectric.buildActivity(Activity.class).create().get();
-        shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
-        shadowOf(context).grantPermissions(INTERNET);
-        subject = new MoPubNative(context, adUnitId, mockNetworkListener);
+        Shadows.shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
+        Shadows.shadowOf(context).grantPermissions(INTERNET);
+        subject = new MoPubNative(context, adUnitId, mockAdRendererRegistry, mockNetworkListener);
         methodBuilder = TestMethodBuilderFactory.getSingletonMock();
         Networking.setRequestQueueForTesting(mockRequestQueue);
-        semaphore = new Semaphore(0);
     }
 
     @After
@@ -80,46 +75,39 @@ public void tearDown() {
     }
 
     @Test
-    public void destroy_shouldSetListenersToEmptyAndClearContext() {
-        assertThat(subject.getContextOrDestroy()).isSameAs(context);
-        assertThat(subject.getMoPubNativeNetworkListener()).isSameAs(mockNetworkListener);
-        subject.setNativeEventListener(mockEventListener);
-        assertThat(subject.getMoPubNativeEventListener()).isSameAs(mockEventListener);
-
-        subject.destroy();
+    public void registerAdRenderer_shouldCallAdRednererRegistryRegisterAdRenderer() throws Exception {
+        subject.registerAdRenderer(mockRenderer);
 
-        assertThat(subject.getContextOrDestroy()).isNull();
-        assertThat(subject.getMoPubNativeNetworkListener()).isSameAs(EMPTY_NETWORK_LISTENER);
-        assertThat(subject.getMoPubNativeEventListener()).isSameAs(EMPTY_EVENT_LISTENER);
+        verify(mockAdRendererRegistry).registerAdRenderer(mockRenderer);
     }
 
     @Test
-    public void setNativeEventListener_shouldSetListener() {
+    public void destroy_shouldSetListenersToEmptyAndClearContext() {
+        assertThat(subject.getActivityOrDestroy()).isSameAs(context);
         assertThat(subject.getMoPubNativeNetworkListener()).isSameAs(mockNetworkListener);
-        subject.setNativeEventListener(mockEventListener);
-        assertThat(subject.getMoPubNativeEventListener()).isSameAs(mockEventListener);
 
-        subject.setNativeEventListener(null);
-        assertThat(subject.getMoPubNativeEventListener()).isSameAs(EMPTY_EVENT_LISTENER);
+        subject.destroy();
+
+        assertThat(subject.getActivityOrDestroy()).isNull();
+        assertThat(subject.getMoPubNativeNetworkListener()).isSameAs(EMPTY_NETWORK_LISTENER);
     }
 
     @Test
     public void loadNativeAd_shouldReturnFast() {
-        Robolectric.getUiThreadScheduler().pause();
+        Robolectric.getForegroundThreadScheduler().pause();
 
         subject.destroy();
         subject.makeRequest();
 
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
     }
 
     @Test
     public void requestNativeAd_shouldFireNetworkRequest() {
-
-        subject.requestNativeAd("http://www.mopub.com");
+        subject.requestNativeAd("https://www.mopub.com");
 
         verify(mockNetworkListener, never()).onNativeFail(any(NativeErrorCode.class));
-        verify(mockRequestQueue).add(argThat(isUrl("http://www.mopub.com")));
+        verify(mockRequestQueue).add(argThat(isUrl("https://www.mopub.com")));
     }
 
     @Test
@@ -140,7 +128,7 @@ public Void answer(final InvocationOnMock invocationOnMock) throws Throwable {
 
     @Test
     public void requestNativeAd_withNullUrl_shouldFireNativeFail() {
-        Robolectric.getUiThreadScheduler().pause();
+        Robolectric.getForegroundThreadScheduler().pause();
 
         subject.requestNativeAd(null);
 
@@ -152,7 +140,7 @@ public void requestNativeAd_withNullUrl_shouldFireNativeFail() {
     public void onAdError_shouldNotifyListener() {
         subject.onAdError(new MoPubNetworkError(MoPubNetworkError.Reason.BAD_BODY));
 
-        verify(mockNetworkListener).onNativeFail(eq(NativeErrorCode.INVALID_JSON));
+        verify(mockNetworkListener).onNativeFail(eq(NativeErrorCode.INVALID_RESPONSE));
     }
 
     @Test
@@ -179,7 +167,7 @@ public void onAdError_withVolleyErrorWarmingUp_shouldLogMoPubErrorCodeWarmup_sho
     @Test
     public void onAdError_withNoConnection_shouldLogMoPubErrorCodeNoConnection_shouldNotifyListener() {
         MoPubLog.setSdkHandlerLevel(Level.ALL);
-        shadowOf(context).denyPermissions(INTERNET);
+        Shadows.shadowOf(context).denyPermissions(INTERNET);
 
         subject.onAdError(new NoConnectionError());
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubRecyclerAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubRecyclerAdapterTest.java
index 5bf340ed..444dd1f9 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubRecyclerAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubRecyclerAdapterTest.java
@@ -1,5 +1,6 @@
 package com.mopub.nativeads;
 
+import android.app.Activity;
 import android.content.Context;
 import android.support.v7.widget.LinearLayoutManager;
 import android.support.v7.widget.RecyclerView;
@@ -7,6 +8,7 @@
 import android.view.ViewGroup;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -15,6 +17,7 @@
 import org.mockito.Mock;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
+import org.robolectric.annotation.Config;
 
 import java.util.HashSet;
 import java.util.Set;
@@ -25,7 +28,6 @@
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
@@ -37,14 +39,17 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class MoPubRecyclerAdapterTest {
     private static final int AD_POSITION_1 = 1;
     private static final int AD_POSITION_7 = 7;
 
     @Mock MoPubStreamAdPlacer mockStreamAdPlacer;
     @Mock VisibilityTracker mockVisibilityTracker;
-    @Mock NativeAdData mockNativeAdData;
-    @Mock NativeAdData mockNativeAdData2;
+    @Mock
+    NativeAd mMockNativeAd;
+    @Mock
+    NativeAd mMockNativeAd2;
     @Mock MoPubAdRenderer mockAdRenderer;
     @Mock ViewGroup mockParent;
     @Mock View mockAdView;
@@ -73,11 +78,12 @@ public void setUp() throws Exception {
 
         // Mock some simple adjustment behavior for tests. This is creating an ad placer that
         // emulates a content item followed by an ad item, then another content item.
-        when(mockStreamAdPlacer.getAdData(AD_POSITION_1)).thenReturn(mockNativeAdData);
-        when(mockStreamAdPlacer.getAdData(AD_POSITION_7)).thenReturn(mockNativeAdData2);
+        when(mockStreamAdPlacer.getAdData(AD_POSITION_1)).thenReturn(mMockNativeAd);
+        when(mockStreamAdPlacer.getAdData(AD_POSITION_7)).thenReturn(mMockNativeAd2);
         when(mockStreamAdPlacer.getAdRendererForViewType(MoPubRecyclerAdapter.NATIVE_AD_VIEW_TYPE_BASE))
                 .thenReturn(mockAdRenderer);
-        when(mockAdRenderer.createAdView(any(Context.class), any(ViewGroup.class))).thenReturn(mockAdView);
+        when(mockAdRenderer.createAdView(any(Activity.class), any(ViewGroup.class)))
+                .thenReturn(mockAdView);
 
         when(mockStreamAdPlacer.isAd(anyInt())).thenAnswer(new Answer<Boolean>() {
             @Override
@@ -209,22 +215,23 @@ public void computeScrollOffset_withCannotScroll_shouldReturnZero() {
     }
 
     @Test
-    public void registerViewBinder_shouldCallRegisterAdRendererOnStreamAdPlacer() {
-        subject.registerViewBinder(new ViewBinder.Builder(1).build());
+    public void registerAdRenderer_shouldCallRegisterAdRendererOnStreamAdPlacer() {
+        subject.registerAdRenderer(new MoPubStaticNativeAdRenderer(new ViewBinder.Builder(1).build()));
 
         final ArgumentCaptor<MoPubAdRenderer> rendererCaptor = ArgumentCaptor.forClass(MoPubAdRenderer.class);
-        verify(mockStreamAdPlacer).registerAdRenderer(rendererCaptor.capture(), eq(-55));
+        verify(mockStreamAdPlacer).registerAdRenderer(rendererCaptor.capture());
         MoPubAdRenderer renderer = rendererCaptor.getValue();
-        assertThat(renderer).isExactlyInstanceOf(MoPubNativeAdRenderer.class);
+        assertThat(renderer).isExactlyInstanceOf(MoPubStaticNativeAdRenderer.class);
     }
 
     @Test
     public void onCreateViewHolder_whenAdType_shouldInflateAdView() {
+        when(mockStreamAdPlacer.getAdRendererForViewType(0)).thenReturn(mockAdRenderer);
         final RecyclerView.ViewHolder result = subject.onCreateViewHolder(mockParent, MoPubRecyclerAdapter.NATIVE_AD_VIEW_TYPE_BASE);
 
         assertThat(result).isExactlyInstanceOf(MoPubRecyclerViewHolder.class);
 
-        verify(mockStreamAdPlacer).getAdRendererForViewType(MoPubRecyclerAdapter.NATIVE_AD_VIEW_TYPE_BASE);
+        verify(mockStreamAdPlacer).getAdRendererForViewType(0);
         verifyZeroInteractions(originalAdapter);
     }
 
@@ -242,7 +249,7 @@ public void onCreateViewHolder_whenNotAdType_shouldCallOriginalAdapter() {
     public void onBindViewHolder_whenAdPosition_shouldGetAndBindAdData() {
         subject.onBindViewHolder(spyViewHolder, AD_POSITION_1);
 
-        verify(mockStreamAdPlacer).bindAdView(mockNativeAdData, mockAdView);
+        verify(mockStreamAdPlacer).bindAdView(mMockNativeAd, mockAdView);
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdRendererTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdRendererTest.java
new file mode 100644
index 00000000..a7bae9ed
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdRendererTest.java
@@ -0,0 +1,195 @@
+package com.mopub.nativeads;
+
+import android.graphics.Bitmap;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.Utils;
+import com.mopub.mobileads.BuildConfig;
+import com.mopub.nativeads.MoPubCustomEventNative.MoPubStaticNativeAd;
+import com.mopub.network.MaxWidthImageLoader;
+import com.mopub.network.MoPubRequestQueue;
+import com.mopub.network.Networking;
+import com.mopub.volley.toolbox.ImageLoader;
+
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.ExpectedException;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.annotation.Config;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.anyString;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class MoPubStaticNativeAdRendererTest {
+    private MoPubStaticNativeAdRenderer subject;
+    private StaticNativeAd mStaticNativeAd;
+    @Mock private RelativeLayout relativeLayout;
+    @Mock private ViewGroup viewGroup;
+    private ViewBinder viewBinder;
+    @Mock private TextView titleView;
+    @Mock private TextView textView;
+    @Mock private TextView callToActionView;
+    @Mock private ImageView mainImageView;
+    @Mock private ImageView iconImageView;
+    @Mock private ImageView privacyInformationIconImageView;
+    @Mock private ImageView badView;
+    @Mock private MoPubRequestQueue mockRequestQueue;
+    @Mock private MaxWidthImageLoader mockImageLoader;
+    @Mock private ImageLoader.ImageContainer mockImageContainer;
+
+    @Before
+    public void setUp() throws Exception {
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+        Networking.setImageLoaderForTesting(mockImageLoader);
+        stub(mockImageContainer.getBitmap()).toReturn(mock(Bitmap.class));
+
+        when(relativeLayout.getId()).thenReturn((int) Utils.generateUniqueId());
+
+        mStaticNativeAd = new StaticNativeAd() {};
+        mStaticNativeAd.setTitle("test title");
+        mStaticNativeAd.setText("test text");
+        mStaticNativeAd.setCallToAction("test call to action");
+        mStaticNativeAd.setClickDestinationUrl("destinationUrl");
+        mStaticNativeAd.setMainImageUrl("testUrl");
+        mStaticNativeAd.setIconImageUrl("testUrl");
+
+        setViewIdInLayout(titleView, relativeLayout);
+        setViewIdInLayout(textView, relativeLayout);
+        setViewIdInLayout(callToActionView, relativeLayout);
+        setViewIdInLayout(mainImageView, relativeLayout);
+        setViewIdInLayout(iconImageView, relativeLayout);
+        setViewIdInLayout(privacyInformationIconImageView, relativeLayout);
+        setViewIdInLayout(badView, relativeLayout);
+
+        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
+                .titleId(titleView.getId())
+                .textId(textView.getId())
+                .callToActionId(callToActionView.getId())
+                .mainImageId(mainImageView.getId())
+                .iconImageId(iconImageView.getId())
+                .privacyInformationIconImageId(privacyInformationIconImageView.getId())
+                .build();
+
+        subject = new MoPubStaticNativeAdRenderer(viewBinder);
+    }
+
+    private void setViewIdInLayout(View mockView, RelativeLayout mockLayout) {
+        int id = (int) Utils.generateUniqueId();
+        when(mockView.getId()).thenReturn(id);
+        when(relativeLayout.findViewById(eq(id))).thenReturn(mockView);
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void createAdView_withNullContext_shouldThrowNPE() {
+        subject.createAdView(null, viewGroup);
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void renderAdView_withNullView_shouldThrowNPE() {
+        subject.renderAdView(null, mStaticNativeAd);
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void renderAdView_withNullNativeAd_shouldThrowNPE() {
+        subject.renderAdView(relativeLayout, null);
+    }
+
+    @Rule public ExpectedException exception = ExpectedException.none();
+
+    @Test
+    public void renderAdView_withNullViewBinder_shouldThrowNPE() {
+        subject = new MoPubStaticNativeAdRenderer(null);
+
+        exception.expect(NullPointerException.class);
+        subject.renderAdView(relativeLayout, mStaticNativeAd);
+    }
+
+    @Test
+    public void renderAdView_shouldReturnPopulatedView() {
+        subject.renderAdView(relativeLayout, mStaticNativeAd);
+
+        verify(titleView).setText(eq("test title"));
+        verify(textView).setText(eq("test text"));
+        verify(callToActionView).setText(eq("test call to action"));
+
+        // not testing images due to testing complexity
+    }
+
+    @Test
+    public void renderAdView_withFailedViewBinder_shouldNotWriteViews() {
+        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
+                .titleId(titleView.getId())
+                .textId(badView.getId())
+                .callToActionId(callToActionView.getId())
+                .mainImageId(mainImageView.getId())
+                .iconImageId(iconImageView.getId())
+                .build();
+
+        subject = new MoPubStaticNativeAdRenderer(viewBinder);
+        subject.renderAdView(relativeLayout, mStaticNativeAd);
+
+        verify(titleView, never()).setText(anyString());
+        verify(textView, never()).setText(anyString());
+        verify(callToActionView, never()).setText(anyString());
+        verify(mainImageView, times(2)).getId();
+        verifyNoMoreInteractions(mainImageView);
+        verify(iconImageView, times(2)).getId();
+        verifyNoMoreInteractions(iconImageView);
+    }
+
+    @Test
+    public void renderAdView_withNoViewHolder_shouldCreateNativeViewHolder() {
+        subject.renderAdView(relativeLayout, mStaticNativeAd);
+
+        StaticNativeViewHolder expectedViewHolder = StaticNativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
+        StaticNativeViewHolder viewHolder = subject.mViewHolderMap.get(relativeLayout);
+        compareNativeViewHolders(expectedViewHolder, viewHolder);
+    }
+
+    @Test
+    public void getOrCreateNativeViewHolder_withViewHolder_shouldNotReCreateNativeViewHolder() {
+        subject.renderAdView(relativeLayout, mStaticNativeAd);
+        StaticNativeViewHolder expectedViewHolder = subject.mViewHolderMap.get(relativeLayout);
+        subject.renderAdView(relativeLayout, mStaticNativeAd);
+
+        StaticNativeViewHolder viewHolder = subject.mViewHolderMap.get(relativeLayout);
+        assertThat(viewHolder).isEqualTo(expectedViewHolder);
+    }
+
+    static private void compareNativeViewHolders(final StaticNativeViewHolder actualViewHolder,
+            final StaticNativeViewHolder expectedViewHolder) {
+        assertThat(actualViewHolder.titleView).isEqualTo(expectedViewHolder.titleView);
+        assertThat(actualViewHolder.textView).isEqualTo(expectedViewHolder.textView);
+        assertThat(actualViewHolder.callToActionView).isEqualTo(expectedViewHolder.callToActionView);
+        assertThat(actualViewHolder.mainImageView).isEqualTo(expectedViewHolder.mainImageView);
+        assertThat(actualViewHolder.iconImageView).isEqualTo(expectedViewHolder.iconImageView);
+        assertThat(actualViewHolder.privacyInformationIconImageView).isEqualTo(
+                expectedViewHolder.privacyInformationIconImageView);
+    }
+
+    @Test
+    public void supports_withCorrectInstanceOfBaseNativeAd_shouldReturnTrue() throws Exception {
+        assertThat(subject.supports(new StaticNativeAd() {})).isTrue();
+        assertThat(subject.supports(mock(MoPubStaticNativeAd.class))).isTrue();
+        assertThat(subject.supports(mock(BaseNativeAd.class))).isFalse();
+        assertThat(subject.supports(mock(MoPubCustomEventVideoNative.MoPubVideoNativeAd.class)))
+                .isFalse();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubForwardingNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdTest.java
similarity index 62%
rename from mopub-sdk/src/test/java/com/mopub/nativeads/MoPubForwardingNativeAdTest.java
rename to mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdTest.java
index 668842d0..63b43fc0 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubForwardingNativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdTest.java
@@ -2,8 +2,13 @@
 
 import android.app.Activity;
 import android.graphics.Bitmap;
+import android.view.View;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
+import com.mopub.nativeads.BaseNativeAd.NativeEventListener;
+import com.mopub.nativeads.CustomEventNative.CustomEventNativeListener;
+import com.mopub.nativeads.MoPubCustomEventNative.MoPubStaticNativeAd;
 import com.mopub.nativeads.test.support.MoPubShadowBitmap;
 import com.mopub.nativeads.test.support.MoPubShadowDisplay;
 import com.mopub.network.MaxWidthImageLoader;
@@ -13,6 +18,7 @@
 import com.mopub.volley.toolbox.ImageLoader;
 
 import org.json.JSONArray;
+import org.json.JSONException;
 import org.json.JSONObject;
 import org.junit.Before;
 import org.junit.Test;
@@ -20,6 +26,7 @@
 import org.mockito.Mock;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
+import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 
 import java.util.ArrayList;
@@ -27,9 +34,9 @@
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 
-import static com.mopub.nativeads.NativeResponse.Parameter;
-import static com.mopub.nativeads.NativeResponse.Parameter.requiredKeys;
+import static com.mopub.nativeads.MoPubCustomEventNative.MoPubStaticNativeAd.Parameter;
 import static com.mopub.volley.toolbox.ImageLoader.ImageListener;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.fest.assertions.api.Assertions.fail;
@@ -43,62 +50,67 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(shadows={MoPubShadowBitmap.class, MoPubShadowDisplay.class})
-public class MoPubForwardingNativeAdTest {
+@Config(constants = BuildConfig.class, shadows={MoPubShadowBitmap.class, MoPubShadowDisplay.class})
+public class MoPubStaticNativeAdTest {
 
+    private MoPubStaticNativeAd subject;
     private JSONObject fakeJsonObject;
-    private MoPubCustomEventNative.MoPubForwardingNativeAd subject;
     private Activity context;
 
-    @Mock
-    private CustomEventNative.CustomEventNativeListener mockCustomEventNativeListener;
-    @Mock
-    private MoPubRequestQueue mockRequestQueue;
-    @Mock
-    private MaxWidthImageLoader mockImageLoader;
-    @Mock
-    private ImageLoader.ImageContainer mockImageContainer;
+    @Mock private View mockView;
+    @Mock private ImpressionTracker mockImpressionTracker;
+    @Mock private NativeClickHandler mMockNativeClickHandler;
+    @Mock private CustomEventNativeListener mockCustomEventNativeListener;
+    @Mock private NativeEventListener mockNativeEventListener;
+    @Mock private MoPubRequestQueue mockRequestQueue;
+    @Mock private MaxWidthImageLoader mockImageLoader;
+    @Mock private ImageLoader.ImageContainer mockImageContainer;
 
     @Before
     public void setUp() throws Exception {
-        context = new Activity();
+        context = Robolectric.buildActivity(Activity.class).create().get();
         fakeJsonObject = new JSONObject();
         fakeJsonObject.put("imptracker", new JSONArray("[\"url1\", \"url2\"]"));
         fakeJsonObject.put("clktracker", "expected clicktracker");
+        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
+                mMockNativeClickHandler, mockCustomEventNativeListener);
+        subject.setNativeEventListener(mockNativeEventListener);
+
         Networking.setRequestQueueForTesting(mockRequestQueue);
         Networking.setImageLoaderForTesting(mockImageLoader);
         stub(mockImageContainer.getBitmap()).toReturn(mock(Bitmap.class));
     }
 
     @Test
-    public void parameter_requiredKeys_shouldOnlyContainTheRequiredKeys() throws Exception {
+    public void Parameter_requiredKeys_shouldOnlyContainTheRequiredKeys() {
         final HashSet<String> expectedKeys = new HashSet<String>();
         expectedKeys.add("imptracker");
         expectedKeys.add("clktracker");
 
-        assertThat(requiredKeys).isEqualTo(expectedKeys);
+        assertThat(Parameter.requiredKeys).isEqualTo(expectedKeys);
     }
 
     @Test
-    public void parameter_fromString_shouldReturnParameterOnMatch() throws Exception {
+    public void Parameter_fromString_shouldReturnParameterOnMatch() {
         final Parameter parameter = Parameter.from("title");
 
         assertThat(parameter).isEqualTo(Parameter.TITLE);
     }
 
     @Test
-    public void parameter_fromString_shouldReturnNullOnIllegalKey() throws Exception {
+    public void Parameter_fromString_shouldReturnNullOnIllegalKey() {
         final Parameter parameter = Parameter.from("random gibberish");
 
         assertThat(parameter).isNull();
     }
 
     @Test
-    public void loadAd_whenMissingRequiredKeys_shouldThrowIllegalArgumentException() throws Exception {
+    public void loadAd_whenMissingRequiredKeys_shouldThrowIllegalArgumentException() {
         fakeJsonObject.remove("imptracker");
 
         try {
-            subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
+            subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
+                    mMockNativeClickHandler, mockCustomEventNativeListener);
             subject.loadAd();
             fail("Expected IllegalArgumentException");
         } catch (IllegalArgumentException e) {
@@ -111,7 +123,8 @@ public void loadAd_whenRequiredKeyOfWrongType_shouldThrowIllegalArgumentExceptio
         fakeJsonObject.put("imptracker", 12345);
 
         try {
-            subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
+            subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
+                    mMockNativeClickHandler, mockCustomEventNativeListener);
             subject.loadAd();
             fail("Expected IllegalArgumentException");
         } catch (IllegalArgumentException e) {
@@ -120,8 +133,7 @@ public void loadAd_whenRequiredKeyOfWrongType_shouldThrowIllegalArgumentExceptio
     }
 
     @Test
-    public void loadAd_shouldSetRequiredExpectedFields() throws Exception {
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
+    public void loadAd_shouldSetRequiredExpectedFields() {
         subject.loadAd();
         assertThat(subject.getImpressionTrackers()).containsOnly("url1", "url2");
     }
@@ -139,7 +151,8 @@ public void loadAd_shouldSetOptionalExpectedFields() throws Exception {
         fakeJsonObject.put("ctatext", "expected ctatext");
         fakeJsonObject.put("starrating", 5.0);
 
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
+        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
+                mMockNativeClickHandler, mockCustomEventNativeListener);
         subject.loadAd();
 
         assertThat(subject.getTitle()).isEqualTo("expected title");
@@ -149,7 +162,6 @@ public void loadAd_shouldSetOptionalExpectedFields() throws Exception {
 
         assertThat(subject.getClickDestinationUrl()).isEqualTo("expected clk");
 
-//        assertThat(subject.getFallback()).isEqualTo("expected fallback");
         assertThat(subject.getImpressionTrackers()).containsOnly("url1", "url2");
         assertThat(subject.getCallToAction()).isEqualTo("expected ctatext");
         assertThat(subject.getStarRating()).isEqualTo(5.0);
@@ -159,7 +171,8 @@ public void loadAd_shouldSetOptionalExpectedFields() throws Exception {
     public void loadAd_withIntegerStarRating_shouldSetStarRating() throws Exception {
         fakeJsonObject.put("starrating", 3);
 
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
+        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
+                mMockNativeClickHandler, mockCustomEventNativeListener);
         subject.loadAd();
 
         assertThat(subject.getStarRating()).isEqualTo(3.0);
@@ -169,7 +182,8 @@ public void loadAd_withIntegerStarRating_shouldSetStarRating() throws Exception
     public void loadAd_withStringStarRating_shouldSetStarRating() throws Exception {
         fakeJsonObject.put("starrating", "2.3");
 
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
+        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
+                mMockNativeClickHandler, mockCustomEventNativeListener);
         subject.loadAd();
 
         assertThat(subject.getStarRating()).isEqualTo(2.3);
@@ -179,7 +193,8 @@ public void loadAd_withStringStarRating_shouldSetStarRating() throws Exception {
     public void loadAd_withInvalidStringStarRating_shouldNotSetStarRating() throws Exception {
         fakeJsonObject.put("starrating", "this is not a number");
 
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
+        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
+                mMockNativeClickHandler, mockCustomEventNativeListener);
         subject.loadAd();
 
         assertThat(subject.getStarRating()).isNull();
@@ -189,7 +204,8 @@ public void loadAd_withInvalidStringStarRating_shouldNotSetStarRating() throws E
     public void loadAd_withInvalidlyTypedStarRating_shouldNotSetStarRating() throws Exception {
         fakeJsonObject.put("starrating", new Activity());
 
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
+        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
+                mMockNativeClickHandler, mockCustomEventNativeListener);
         subject.loadAd();
 
         assertThat(subject.getStarRating()).isNull();
@@ -207,7 +223,8 @@ public void loadAd_whenImpressionTrackersContainsNonStrings_willCoerceToString()
         impressionTrackers.put(2.12);
         fakeJsonObject.put("imptracker", impressionTrackers);
 
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
+        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
+                mMockNativeClickHandler, mockCustomEventNativeListener);
         subject.loadAd();
 
         assertThat(subject.getImpressionTrackers()).containsOnly("url1", "null", "2.12");
@@ -228,7 +245,8 @@ public void loadAd_shouldSetExtraFields() throws Exception {
         fakeJsonObject.put("key3", new JSONArray(array));
         fakeJsonObject.put("key4", new JSONObject(map));
 
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
+        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
+                mMockNativeClickHandler, mockCustomEventNativeListener);
         subject.loadAd();
 
         assertThat(subject.getExtra("key1")).isEqualTo("yay json");
@@ -253,7 +271,8 @@ public Void answer(final InvocationOnMock invocationOnMock) throws Throwable {
                     }
                 });
 
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
+        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
+                mMockNativeClickHandler, mockCustomEventNativeListener);
         subject.loadAd();
 
         verify(mockImageLoader).get(eq("mainimageurl"), any(ImageListener.class));
@@ -280,13 +299,39 @@ public Void answer(final InvocationOnMock invocationOnMock) throws Throwable {
                     }
                 });
 
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
+        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
+                mMockNativeClickHandler, mockCustomEventNativeListener);
         subject.loadAd();
 
         verify(mockCustomEventNativeListener, never()).onNativeAdLoaded(subject);
         verify(mockCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.IMAGE_DOWNLOAD_FAILURE);
     }
 
+    @Test
+    public void loadAd_shouldParseSingleClickTracker() {
+        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
+                mMockNativeClickHandler, mockCustomEventNativeListener);
+        subject.loadAd();
+
+        final Set<String> clickTrackers = subject.getClickTrackers();
+        assertThat(clickTrackers.size()).isEqualTo(1);
+        assertThat(clickTrackers.contains("expected clicktracker")).isTrue();
+    }
+
+    @Test
+    public void loadAd_shouldParseMultipleClickTrackers() throws Exception {
+        fakeJsonObject.remove("clktracker");
+        fakeJsonObject.put("clktracker", new JSONArray("[\"clicktracker1\",\"clicktracker2\"]"));
+        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
+                mMockNativeClickHandler, mockCustomEventNativeListener);
+        subject.loadAd();
+
+        final Set<String> clickTrackers = subject.getClickTrackers();
+        assertThat(clickTrackers.size()).isEqualTo(2);
+        assertThat(clickTrackers.contains("clicktracker1")).isTrue();
+        assertThat(clickTrackers.contains("clicktracker2")).isTrue();
+    }
+
     @Test
     public void getExtrasImageUrls_whenExtrasContainsImages_shouldReturnImageUrls() throws Exception {
         // getExtrasImageUrls requires the key to end with a case-insensitive "image" to be counted as an image
@@ -295,7 +340,9 @@ public void getExtrasImageUrls_whenExtrasContainsImages_shouldReturnImageUrls()
         fakeJsonObject.put("otherIMAGE", "image_url_2");
         fakeJsonObject.put("more filler", "ignored");
         fakeJsonObject.put("lastimage", "image_url_3");
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
+
+        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
+                mMockNativeClickHandler, mockCustomEventNativeListener);
         subject.loadAd();
 
         assertThat(subject.getExtrasImageUrls()).containsOnly("image_url_1", "image_url_2", "image_url_3");
@@ -308,7 +355,9 @@ public void getExtrasImageUrls_whenExtrasDoesNotContainImageKeys_shouldReturnEmp
         fakeJsonObject.put("imageAtFront", "ignored");
         fakeJsonObject.put("middle_image_in_key", "ignored");
         fakeJsonObject.put("other", "ignored");
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
+
+        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
+                mMockNativeClickHandler, mockCustomEventNativeListener);
         subject.loadAd();
 
         assertThat(subject.getExtrasImageUrls()).isEmpty();
@@ -319,7 +368,9 @@ public void getAllImageUrls_withExtraImagesAndMainAndIconImages_shouldReturnAllU
         fakeJsonObject.put("mainimage", "mainImageUrl");
         fakeJsonObject.put("iconimage", "iconImageUrl");
         fakeJsonObject.put("extraimage", "extraImageUrl");
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
+
+        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
+                mMockNativeClickHandler, mockCustomEventNativeListener);
         subject.loadAd();
 
         assertThat(subject.getAllImageUrls()).containsOnly(
@@ -333,9 +384,51 @@ public void getAllImageUrls_withExtraImagesAndMainAndIconImages_shouldReturnAllU
     public void getAllImageUrls_withOnlyExtrasImages_shouldNotIncludeMainOrIconImages() throws Exception {
         fakeJsonObject.put("extra1_image", "expected extra1_image");
         fakeJsonObject.put("extra2_image", "expected extra2_image");
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
+
+        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
+                mMockNativeClickHandler, mockCustomEventNativeListener);
         subject.loadAd();
 
         assertThat(subject.getAllImageUrls()).containsOnly("expected extra1_image", "expected extra2_image");
     }
+
+    @Test
+    public void prepare_shouldAddViewToImpressionTracker_shouldSetOnClickListener() {
+        subject.prepare(mockView);
+
+        verify(mockImpressionTracker).addView(mockView, subject);
+        verify(mMockNativeClickHandler).setOnClickListener(mockView, subject);
+    }
+
+    @Test
+    public void clear_shouldRemoveViewFromImpressionTracker_shouldClearOnClickListener() {
+        subject.clear(mockView);
+
+        verify(mockImpressionTracker).removeView(mockView);
+        verify(mMockNativeClickHandler).clearOnClickListener(mockView);
+    }
+
+    @Test
+    public void destroy_shouldDestroyImpressionTracker() {
+        subject.destroy();
+
+        verify(mockImpressionTracker).destroy();
+    }
+
+    @Test
+    public void recordImpression_shouldNotifyAdImpressed_shouldTrackImpression() throws Exception {
+        subject.addImpressionTrackers(new JSONArray("[\"impressionUrl\"]"));
+        subject.recordImpression(mockView);
+
+        verify(mockNativeEventListener).onAdImpressed();
+    }
+
+    @Test
+    public void handleClick_shouldNotifyAdClicked_shouldOpenClickDestinationUrl() {
+        subject.setClickDestinationUrl("clickDestinationUrl");
+        subject.handleClick(mockView);
+
+        verify(mockNativeEventListener).onAdClicked();
+        verify(mMockNativeClickHandler).openClickDestinationUrl("clickDestinationUrl", mockView);
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStreamAdPlacerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStreamAdPlacerTest.java
index 2e772506..92e3c62d 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStreamAdPlacerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStreamAdPlacerTest.java
@@ -1,11 +1,11 @@
 package com.mopub.nativeads;
 
 import android.app.Activity;
-import android.content.Context;
 import android.view.View;
 import android.view.ViewGroup;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
 import com.mopub.nativeads.PositioningSource.PositioningListener;
 
@@ -16,6 +16,7 @@
 import org.mockito.ArgumentCaptor;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -32,8 +33,9 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class MoPubStreamAdPlacerTest {
-    private Context context;
+    private Activity activity;
 
     MoPubClientPositioning positioning;
 
@@ -42,25 +44,24 @@
     @Mock
     NativeAdSource mockAdSource;
     @Mock
-    MoPubNativeAdRenderer mockAdRenderer;
+    MoPubStaticNativeAdRenderer mockAdRenderer;
     @Mock
     MoPubNativeAdLoadedListener mockAdLoadedListener;
     @Mock
     ImpressionTracker mockImpressionTracker;
 
     @Mock(answer = Answers.RETURNS_DEEP_STUBS)
-    NativeResponse stubNativeResponse;
+    NativeAd mStubNativeAd;
 
     private MoPubStreamAdPlacer subject;
 
     @Before
     public void setup() {
-        context = Robolectric.buildActivity(Activity.class).create().get();
+        activity = Robolectric.buildActivity(Activity.class).create().get();
         positioning = MoPubNativeAdPositioning.clientPositioning()
                 .enableRepeatingPositions(2);
 
-        subject = new MoPubStreamAdPlacer(
-                context, mockAdSource, mockImpressionTracker, mockPositioningSource);
+        subject = new MoPubStreamAdPlacer(activity, mockAdSource, mockPositioningSource);
         subject.registerAdRenderer(mockAdRenderer);
         subject.setAdLoadedListener(mockAdLoadedListener);
     }
@@ -78,7 +79,7 @@ public void isAd_loadPositions_withoutLoadingAds_hasNoAds() {
 
     @Test
     public void isAd_loadAds_withoutLoadingPositions_hasNoAds() {
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
         subject.handleAdsAvailable();
         subject.setItemCount(4);
         checkAdPositions();
@@ -86,7 +87,7 @@ public void isAd_loadAds_withoutLoadingPositions_hasNoAds() {
 
     @Test
     public void isAd_loadAds_thenLoadPositions_hasAds() {
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
         subject.registerAdRenderer(mockAdRenderer);
         subject.loadAds("test-ad-unit-id");
 
@@ -98,7 +99,7 @@ public void isAd_loadAds_thenLoadPositions_hasAds() {
 
     @Test
     public void isAd_loadPositions_thenLoadAds_hasAds() {
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
         subject.registerAdRenderer(mockAdRenderer);
         subject.loadAds("test-ad-unit-id");
 
@@ -108,6 +109,12 @@ public void isAd_loadPositions_thenLoadAds_hasAds() {
         checkAdPositions(1, 3, 5);
     }
 
+    @Test
+    public void getAdViewTypeCount_shouldAdSourceCallGetAdRendererCount() throws Exception {
+        subject.getAdViewTypeCount();
+        verify(mockAdSource).getAdRendererCount();
+    }
+
     @Test
     public void getOriginalPosition_adjustsPositions() {
         assertThat(subject.getOriginalPosition(0)).isEqualTo(0);
@@ -116,7 +123,7 @@ public void getOriginalPosition_adjustsPositions() {
         assertThat(subject.getOriginalPosition(3)).isEqualTo(3);
         assertThat(subject.getOriginalPosition(4)).isEqualTo(4);
 
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
         subject.registerAdRenderer(mockAdRenderer);
         subject.loadAds("test-ad-unit-id");
         subject.handlePositioningLoad(positioning);
@@ -143,7 +150,7 @@ public void getAdjustedPosition_adjustsPositions() {
         assertThat(subject.getAdjustedPosition(3)).isEqualTo(3);
         assertThat(subject.getAdjustedPosition(4)).isEqualTo(4);
 
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
         subject.registerAdRenderer(mockAdRenderer);
         subject.loadAds("test-ad-unit-id");
         subject.handlePositioningLoad(positioning);
@@ -170,7 +177,7 @@ public void getOriginalCount_adjustsPositions() {
         assertThat(subject.getOriginalCount(3)).isEqualTo(3);
         assertThat(subject.getOriginalCount(4)).isEqualTo(4);
 
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
         subject.registerAdRenderer(mockAdRenderer);
         subject.loadAds("test-ad-unit-id");
         subject.handlePositioningLoad(positioning);
@@ -197,7 +204,7 @@ public void getAdjustedCount_adjustsPositions() {
         assertThat(subject.getAdjustedCount(3)).isEqualTo(3);
         assertThat(subject.getAdjustedCount(4)).isEqualTo(4);
 
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
         subject.registerAdRenderer(mockAdRenderer);
         subject.loadAds("test-ad-unit-id");
         subject.handlePositioningLoad(positioning);
@@ -218,7 +225,7 @@ public void getAdjustedCount_adjustsPositions() {
 
     @Test
     public void placeAds_shouldCallListener() {
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
         subject.registerAdRenderer(mockAdRenderer);
         subject.loadAds("test-ad-unit-id");
         subject.handlePositioningLoad(positioning);
@@ -237,16 +244,16 @@ public void placeAds_shouldCallListener() {
 
     @Test
     public void placeAdsInRange_shouldPlaceAfter() {
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
         subject.registerAdRenderer(mockAdRenderer);
         subject.loadAds("test-ad-unit-id");
         subject.handlePositioningLoad(positioning);
         subject.handleAdsAvailable();
 
-        Robolectric.getUiThreadScheduler().pause();
+        Robolectric.getForegroundThreadScheduler().pause();
         subject.setItemCount(100);
         subject.placeAdsInRange(50, 50);
-        Robolectric.getUiThreadScheduler().advanceToLastPostedRunnable();
+        Robolectric.getForegroundThreadScheduler().advanceToLastPostedRunnable();
 
         assertThat(subject.isAd(48)).isFalse();
         assertThat(subject.isAd(49)).isFalse();
@@ -259,16 +266,16 @@ public void placeAdsInRange_shouldPlaceAfter() {
 
     @Test
     public void placeAdsInRange_shouldCallListener() {
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
         subject.registerAdRenderer(mockAdRenderer);
         subject.loadAds("test-ad-unit-id");
         subject.handlePositioningLoad(positioning);
         subject.handleAdsAvailable();
 
-        Robolectric.getUiThreadScheduler().pause();
+        Robolectric.getForegroundThreadScheduler().pause();
         subject.setItemCount(100);
         subject.placeAdsInRange(50, 54);
-        Robolectric.getUiThreadScheduler().advanceToLastPostedRunnable();
+        Robolectric.getForegroundThreadScheduler().advanceToLastPostedRunnable();
 
         verify(mockAdLoadedListener).onAdLoaded(50);
         verify(mockAdLoadedListener, never()).onAdLoaded(51);
@@ -281,16 +288,16 @@ public void placeAdsInRange_shouldCallListener() {
 
     @Test
     public void placeAdsInRange_aboveItemCount_shouldNotInsert() {
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
         subject.registerAdRenderer(mockAdRenderer);
         subject.loadAds("test-ad-unit-id");
         subject.handlePositioningLoad(positioning);
         subject.handleAdsAvailable();
 
-        Robolectric.getUiThreadScheduler().pause();
+        Robolectric.getForegroundThreadScheduler().pause();
         subject.setItemCount(0);
         subject.placeAdsInRange(50, 54);
-        Robolectric.getUiThreadScheduler().advanceToLastPostedRunnable();
+        Robolectric.getForegroundThreadScheduler().advanceToLastPostedRunnable();
 
         verify(mockAdLoadedListener, never()).onAdLoaded(50);
     }
@@ -302,7 +309,7 @@ public void getAdView_withNoAds_returnsNull() {
 
     @Test
     public void loadAds_shouldClearAds_afterFirstAdLoads() {
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
         subject.registerAdRenderer(mockAdRenderer);
         subject.loadAds("test-ad-unit-id");
         subject.handlePositioningLoad(positioning);
@@ -330,7 +337,9 @@ public void loadAds_withFailingPositioningSource_shouldNotLoadAds() {
                 ArgumentCaptor.forClass(PositioningListener.class);
 
         subject.registerAdRenderer(mockAdRenderer);
+        when(mockAdSource.getAdRendererCount()).thenReturn(1);
         subject.loadAds("test-ad-unit-id");
+
         verify(mockPositioningSource).loadPositions(
                 eq("test-ad-unit-id"), listenerCaptor.capture());
         listenerCaptor.getValue().onFailed();
@@ -338,11 +347,10 @@ public void loadAds_withFailingPositioningSource_shouldNotLoadAds() {
     }
 
     @Test
-    public void destroy_shouldClearAdSource_shouldDestroyImpressionTracker_shouldDestroyResponse() {
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+    public void destroy_shouldClearAdSource_shouldDestroyImpressionTracker_shouldDestroyNativeAd() {
+        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
 
-        subject = new MoPubStreamAdPlacer(context,
-                mockAdSource, mockImpressionTracker, mockPositioningSource);
+        subject = new MoPubStreamAdPlacer(activity, mockAdSource, mockPositioningSource);
         subject.registerAdRenderer(mockAdRenderer);
         subject.loadAds("test-ad-unit-id");
         subject.handlePositioningLoad(positioning);
@@ -352,16 +360,14 @@ public void destroy_shouldClearAdSource_shouldDestroyImpressionTracker_shouldDes
         subject.destroy();
 
         verify(mockAdSource).clear();
-        verify(mockImpressionTracker).destroy();
-        verify(stubNativeResponse).destroy();
+        verify(mStubNativeAd).destroy();
     }
 
     @Test
     public void getAdView_withNullConvertView_callsRenderer_addsToImpressionTracker() {
-        View view = new View(context);
-        when(mockAdRenderer.createAdView(any(Context.class), any(ViewGroup.class)))
-                .thenReturn(view);
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        View view = new View(activity);
+        when(mStubNativeAd.createAdView(any(Activity.class), any(ViewGroup.class))).thenReturn(view);
+        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
         subject.registerAdRenderer(mockAdRenderer);
         subject.loadAds("test-ad-unit-id");
         subject.handlePositioningLoad(positioning);
@@ -369,15 +375,15 @@ public void getAdView_withNullConvertView_callsRenderer_addsToImpressionTracker(
         subject.setItemCount(100);
 
         assertThat(subject.getAdView(1, null, null)).isEqualTo(view);
-        verify(mockAdRenderer).createAdView(any(Context.class), any(ViewGroup.class));
-        verify(mockAdRenderer).renderAdView(view, stubNativeResponse);
-        verify(mockImpressionTracker).addView(view, stubNativeResponse);
+
+        verify(mStubNativeAd).createAdView(eq(activity), any(ViewGroup.class));
+        verify(mStubNativeAd).renderAdView(view);
     }
 
     @Test
-    public void getAdView_withConvertView_callsRenderer_addsToImpressionTracker() {
-        View convertView = new View(context);
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+    public void getAdView_withConvertView_shouldCallRenderer() {
+        View convertView = new View(activity);
+        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
         subject.registerAdRenderer(mockAdRenderer);
         subject.loadAds("test-ad-unit-id");
         subject.handlePositioningLoad(positioning);
@@ -385,16 +391,15 @@ public void getAdView_withConvertView_callsRenderer_addsToImpressionTracker() {
         subject.setItemCount(4);
 
         assertThat(subject.getAdView(1, convertView, null)).isEqualTo(convertView);
-        verify(mockAdRenderer, never()).createAdView(any(Context.class), any(ViewGroup.class));
-        verify(mockAdRenderer).renderAdView(convertView, stubNativeResponse);
-        verify(mockImpressionTracker).addView(convertView, stubNativeResponse);
+        verify(mStubNativeAd, never()).createAdView(any(Activity.class), any(ViewGroup.class));
+        verify(mStubNativeAd).renderAdView(convertView);
     }
 
     @Test
-    public void getAdView_shouldRemoveViewFromImpressionTracker_shouldClearPreviousNativeResponse() throws Exception {
-        NativeResponse mockNativeResponse = mock(NativeResponse.class);
+    public void getAdView_shouldClearPreviousNativeAd() throws Exception {
+        NativeAd mockNativeAd = mock(NativeAd.class);
         View mockView = mock(View.class);
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse, mockNativeResponse, stubNativeResponse);
+        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd, mockNativeAd, mStubNativeAd);
         subject.registerAdRenderer(mockAdRenderer);
         subject.loadAds("test-ad-unit-id");
         subject.handlePositioningLoad(positioning);
@@ -402,59 +407,36 @@ public void getAdView_shouldRemoveViewFromImpressionTracker_shouldClearPreviousN
         subject.setItemCount(100);
 
         subject.getAdView(1, mockView, null);
-        verify(mockImpressionTracker).removeView(mockView);
 
-        // Second call should clear the first NativeResponse
+        // Second call should clear the first NativeAd
         subject.getAdView(3, mockView, null);
-        verify(mockImpressionTracker, times(2)).removeView(mockView);
-        verify(stubNativeResponse).clear(mockView);
+        verify(mStubNativeAd).clear(mockView);
 
-        // Third call should clear the second NativeResponse
+        // Third call should clear the second NativeAd
         subject.getAdView(5, mockView, null);
-        verify(mockImpressionTracker, times(3)).removeView(mockView);
-        verify(mockNativeResponse).clear(mockView);
-    }
-
-    @Test
-    public void getAdView_withNetworkImpressionTracker_shouldNotAddViewToImpressionTracker_shouldPrepareNativeResponse() throws Exception {
-        View mockView = mock(View.class);
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        subject.handlePositioningLoad(positioning);
-        subject.handleAdsAvailable();
-        subject.setItemCount(100);
-
-        when(stubNativeResponse.isOverridingImpressionTracker()).thenReturn(true);
-        subject.getAdView(1, mockView, null);
-
-        verify(mockImpressionTracker, never()).addView(any(View.class), any(NativeResponse.class));
-        verify(stubNativeResponse).prepare(mockView);
+        verify(mockNativeAd).clear(mockView);
     }
 
     @Test
-    public void getAdView_withoutNetworkImpressionTracker_shouldAddViewToImpressionTracker_shouldPrepareNativeResponse() throws Exception {
+    public void getAdView_shouldPrepareNativeAd() throws Exception {
         View mockView = mock(View.class);
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
         subject.registerAdRenderer(mockAdRenderer);
         subject.loadAds("test-ad-unit-id");
         subject.handlePositioningLoad(positioning);
         subject.handleAdsAvailable();
         subject.setItemCount(100);
 
-        when(stubNativeResponse.isOverridingImpressionTracker()).thenReturn(false);
         subject.getAdView(1, mockView, null);
 
-        verify(mockImpressionTracker).addView(mockView, stubNativeResponse);
-        verify(stubNativeResponse).prepare(mockView);
+        verify(mStubNativeAd).prepare(mockView);
     }
 
     @Test
-    public void destroy_shouldClearAdSource_shouldDestroyImpressionTracker_shouldResetPlacementData() {
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+    public void destroy_shouldClearAdSource_shouldResetPlacementData() {
+        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
 
-        subject = new MoPubStreamAdPlacer(context,
-                mockAdSource, mockImpressionTracker, mockPositioningSource);
+        subject = new MoPubStreamAdPlacer(activity, mockAdSource, mockPositioningSource);
         subject.registerAdRenderer(mockAdRenderer);
         subject.loadAds("test-ad-unit-id");
         subject.handlePositioningLoad(positioning);
@@ -464,13 +446,12 @@ public void destroy_shouldClearAdSource_shouldDestroyImpressionTracker_shouldRes
         subject.destroy();
 
         verify(mockAdSource).clear();
-        verify(mockImpressionTracker).destroy();
-        verify(stubNativeResponse).destroy();
+        verify(mStubNativeAd).destroy();
     }
 
     @Test
     public void modifyClientPositioning_afterConstructingAdPlacer_shouldNotModifyAdPositions() {
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
         subject.registerAdRenderer(mockAdRenderer);
         subject.loadAds("test-ad-unit-id");
         subject.handlePositioningLoad(positioning);
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdRendererTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdRendererTest.java
new file mode 100644
index 00000000..02f53e1f
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdRendererTest.java
@@ -0,0 +1,215 @@
+package com.mopub.nativeads;
+
+import android.graphics.Bitmap;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.Utils;
+import com.mopub.mobileads.BuildConfig;
+import com.mopub.network.MaxWidthImageLoader;
+import com.mopub.network.MoPubRequestQueue;
+import com.mopub.network.Networking;
+import com.mopub.volley.toolbox.ImageLoader;
+
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.ExpectedException;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.annotation.Config;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.anyString;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class MoPubVideoNativeAdRendererTest {
+    private MoPubVideoNativeAdRenderer subject;
+    private VideoNativeAd videoNativeAd;
+    @Mock private RelativeLayout relativeLayout;
+    @Mock private ViewGroup viewGroup;
+    private MediaViewBinder mediaViewBinder;
+    @Mock private TextView titleView;
+    @Mock private TextView textView;
+    @Mock private TextView callToActionView;
+    @Mock private MediaLayout mediaLayoutView;
+    @Mock private ImageView iconImageView;
+    @Mock private ImageView privacyInformationIconImageView;
+    @Mock private ImageView badView;
+    @Mock private MoPubRequestQueue mockRequestQueue;
+    @Mock private MaxWidthImageLoader mockImageLoader;
+    @Mock private ImageLoader.ImageContainer mockImageContainer;
+
+    @Before
+    public void setUp() throws Exception {
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+        Networking.setImageLoaderForTesting(mockImageLoader);
+        stub(mockImageContainer.getBitmap()).toReturn(mock(Bitmap.class));
+
+        when(relativeLayout.getId()).thenReturn((int) Utils.generateUniqueId());
+
+        videoNativeAd = new VideoNativeAd() {
+
+            @Override
+            public void onStateChanged(final boolean playWhenReady, final int playbackState) {
+            }
+
+            @Override
+            public void onError(final Exception e) {
+            }
+        };
+        videoNativeAd.setTitle("test title");
+        videoNativeAd.setText("test text");
+        videoNativeAd.setCallToAction("test call to action");
+        videoNativeAd.setClickDestinationUrl("destinationUrl");
+        videoNativeAd.setMainImageUrl("testUrl");
+        videoNativeAd.setIconImageUrl("testUrl");
+        videoNativeAd.setVastVideo("test video");
+
+        setViewIdInLayout(titleView, relativeLayout);
+        setViewIdInLayout(textView, relativeLayout);
+        setViewIdInLayout(callToActionView, relativeLayout);
+        setViewIdInLayout(mediaLayoutView, relativeLayout);
+        setViewIdInLayout(iconImageView, relativeLayout);
+        setViewIdInLayout(privacyInformationIconImageView, relativeLayout);
+        setViewIdInLayout(badView, relativeLayout);
+
+        mediaViewBinder = new MediaViewBinder.Builder(relativeLayout.getId())
+                .titleId(titleView.getId())
+                .textId(textView.getId())
+                .callToActionId(callToActionView.getId())
+                .mediaLayoutId(mediaLayoutView.getId())
+                .iconImageId(iconImageView.getId())
+                .privacyInformationIconImageId(privacyInformationIconImageView.getId())
+                .build();
+
+        subject = new MoPubVideoNativeAdRenderer(mediaViewBinder);
+    }
+
+    private void setViewIdInLayout(View mockView, RelativeLayout mockLayout) {
+        int id = (int) Utils.generateUniqueId();
+        when(mockView.getId()).thenReturn(id);
+        when(mockLayout.findViewById(eq(id))).thenReturn(mockView);
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void createAdView_withNullContext_shouldThrowNPE() {
+        subject.createAdView(null, viewGroup);
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void renderAdView_withNullView_shouldThrowNPE() {
+        subject.renderAdView(null, videoNativeAd);
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void renderAdView_withNullNativeAd_shouldThrowNPE() {
+        subject.renderAdView(relativeLayout, null);
+    }
+
+    @Rule public ExpectedException exception = ExpectedException.none();
+
+    @Test
+    public void renderAdView_withNullViewBinder_shouldThrowNPE() {
+        subject = new MoPubVideoNativeAdRenderer(null);
+
+        exception.expect(NullPointerException.class);
+        subject.renderAdView(relativeLayout, videoNativeAd);
+    }
+
+    @Test
+    public void renderAdView_shouldReturnPopulatedView() {
+        subject.renderAdView(relativeLayout, videoNativeAd);
+
+        verify(titleView).setText(eq("test title"));
+        verify(textView).setText(eq("test text"));
+        verify(callToActionView).setText(eq("test call to action"));
+
+        // not testing images due to testing complexity
+    }
+
+    @Test
+    public void renderAdView_withFailedViewBinder_shouldNotWriteViews() {
+        mediaViewBinder = new MediaViewBinder.Builder(relativeLayout.getId())
+                .titleId(titleView.getId())
+                .textId(badView.getId())
+                .callToActionId(callToActionView.getId())
+                .mediaLayoutId(mediaLayoutView.getId())
+                .iconImageId(iconImageView.getId())
+                .build();
+
+        subject = new MoPubVideoNativeAdRenderer(mediaViewBinder);
+        subject.renderAdView(relativeLayout, videoNativeAd);
+
+        verify(titleView, never()).setText(anyString());
+        verify(textView, never()).setText(anyString());
+        verify(callToActionView, never()).setText(anyString());
+        verify(mediaLayoutView, times(2)).getId();
+        verifyNoMoreInteractions(mediaLayoutView);
+        verify(iconImageView, times(2)).getId();
+        verifyNoMoreInteractions(iconImageView);
+    }
+
+    @Test
+    public void renderAdView_withNoViewHolder_shouldCreateNativeViewHolder() {
+        subject.renderAdView(relativeLayout, videoNativeAd);
+
+        MediaViewHolder expectedViewHolder = MediaViewHolder.fromViewBinder
+                (relativeLayout,
+                mediaViewBinder);
+        MediaViewHolder viewHolder = subject.mMediaViewHolderMap.get(relativeLayout);
+        compareNativeViewHolders(expectedViewHolder, viewHolder);
+    }
+
+    @Test
+    public void getOrCreateNativeViewHolder_withViewHolder_shouldNotReCreateNativeViewHolder() {
+        subject.renderAdView(relativeLayout, videoNativeAd);
+        MediaViewHolder expectedViewHolder = subject.mMediaViewHolderMap.get(relativeLayout);
+        subject.renderAdView(relativeLayout, videoNativeAd);
+
+        MediaViewHolder viewHolder = subject.mMediaViewHolderMap.get(relativeLayout);
+        assertThat(viewHolder).isEqualTo(expectedViewHolder);
+    }
+
+    static private void compareNativeViewHolders(final MediaViewHolder actualViewHolder,
+            final MediaViewHolder expectedViewHolder) {
+        assertThat(actualViewHolder.titleView).isEqualTo(expectedViewHolder.titleView);
+        assertThat(actualViewHolder.textView).isEqualTo(expectedViewHolder.textView);
+        assertThat(actualViewHolder.callToActionView).isEqualTo(expectedViewHolder.callToActionView);
+        assertThat(actualViewHolder.mediaLayout).isEqualTo(expectedViewHolder.mediaLayout);
+        assertThat(actualViewHolder.iconImageView).isEqualTo(expectedViewHolder.iconImageView);
+        assertThat(actualViewHolder.privacyInformationIconImageView).isEqualTo(
+                expectedViewHolder.privacyInformationIconImageView);
+    }
+
+    @Test
+    public void supports_withCorrectInstanceOfBaseNativeAd_shouldReturnTrue() throws Exception {
+        assertThat(subject.supports(new VideoNativeAd() {
+            @Override
+            public void onStateChanged(final boolean playWhenReady, final int playbackState) {
+            }
+
+            @Override
+            public void onError(final Exception e) {
+            }
+        })).isTrue();
+        assertThat(subject.supports(
+                mock(MoPubCustomEventVideoNative.MoPubVideoNativeAd.class))).isTrue();
+        assertThat(subject.supports(mock(BaseNativeAd.class))).isFalse();
+        assertThat(subject.supports(mock(MoPubCustomEventNative.MoPubStaticNativeAd.class)))
+                .isFalse();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
new file mode 100644
index 00000000..eea82131
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
@@ -0,0 +1,922 @@
+package com.mopub.nativeads;
+
+import android.annotation.TargetApi;
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.graphics.Bitmap;
+import android.graphics.SurfaceTexture;
+import android.graphics.drawable.Drawable;
+import android.media.AudioManager;
+import android.os.Build;
+import android.view.TextureView;
+import android.view.TextureView.SurfaceTextureListener;
+import android.view.View;
+
+import com.mopub.common.event.EventDetails;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BaseVideoPlayerActivity;
+import com.mopub.mobileads.BuildConfig;
+import com.mopub.mobileads.MraidVideoPlayerActivity;
+import com.mopub.mobileads.VastManager;
+import com.mopub.mobileads.VastTracker;
+import com.mopub.mobileads.VastVideoConfig;
+import com.mopub.mobileads.VideoViewabilityTracker;
+import com.mopub.nativeads.BaseNativeAd.NativeEventListener;
+import com.mopub.nativeads.CustomEventNative.CustomEventNativeListener;
+import com.mopub.nativeads.MoPubCustomEventVideoNative.HeaderVisibilityStrategy;
+import com.mopub.nativeads.MoPubCustomEventVideoNative.MoPubVideoNativeAd;
+import com.mopub.nativeads.MoPubCustomEventVideoNative.MoPubVideoNativeAd.VideoState;
+import com.mopub.nativeads.MoPubCustomEventVideoNative.NativeVideoControllerFactory;
+import com.mopub.nativeads.MoPubCustomEventVideoNative.PayloadVisibilityStrategy;
+import com.mopub.nativeads.MoPubCustomEventVideoNative.VideoResponseHeaders;
+import com.mopub.nativeads.NativeVideoController.VisibilityTrackingEvent;
+import com.mopub.network.MaxWidthImageLoader;
+import com.mopub.network.MoPubRequestQueue;
+import com.mopub.network.Networking;
+import com.mopub.volley.toolbox.ImageLoader;
+import com.mopub.volley.toolbox.ImageLoader.ImageListener;
+
+import org.json.JSONArray;
+import org.json.JSONObject;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Mock;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowApplication;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import static com.mopub.common.VolleyRequestMatcher.isUrl;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyBoolean;
+import static org.mockito.Matchers.anyInt;
+import static org.mockito.Matchers.anyString;
+import static org.mockito.Matchers.argThat;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
+@TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class MoPubVideoNativeAdTest {
+
+    private MoPubVideoNativeAd subject;
+    private Activity activity;
+    private JSONObject jsonObject;
+    private Map<String, String> serverExtras;
+    private VideoResponseHeaders videoResponseHeaders;
+
+    @Mock private CustomEventNativeListener mockCustomEventNativeListener;
+    @Mock private VastVideoConfig mockVastVideoConfig;
+    @Mock private MaxWidthImageLoader mockImageLoader;
+    @Mock private ImageLoader.ImageContainer mockImageContainer;
+    @Mock private NativeVideoController mockNativeVideoController;
+    @Mock private VisibilityTracker mockVisibilityTracker;
+    @Mock private NativeVideoControllerFactory mockNativeVideoControllerFactory;
+    @Mock private MediaLayout mockMediaLayout;
+    @Mock private View mockRootView;
+    @Mock private SurfaceTexture mockSurfaceTexture;
+    @Mock private TextureView mockTextureView;
+    @Mock private Drawable mockDrawable;
+    @Mock private MoPubRequestQueue mockRequestQueue;
+    @Mock private NativeEventListener mockNativeEventListener;
+    @Mock private VastManager mockVastManager;
+
+    @Before
+    public void setUp() throws Exception {
+        activity = Robolectric.buildActivity(Activity.class).create().get();
+
+        jsonObject = new JSONObject();
+        jsonObject.put("imptracker", new JSONArray("[\"url1\", \"url2\"]"));
+        jsonObject.put("clktracker", "json click tracker");
+        jsonObject.put("title", "title");
+        jsonObject.put("text", "text");
+        jsonObject.put("mainimage", "mainimageurl");
+        jsonObject.put("iconimage", "iconimageurl");
+        jsonObject.put("clk", "clk");
+        jsonObject.put("fallback", "fallback");
+        jsonObject.put("ctatext", "ctatext");
+        jsonObject.put("video", "video");
+        jsonObject.put("extraimage", "extraimageurl");
+
+        serverExtras = new HashMap<String, String>();
+        serverExtras.put("Play-Visible-Percent", "10");
+        serverExtras.put("Pause-Visible-Percent", "5");
+        serverExtras.put("Impression-Min-Visible-Percent", "15");
+        serverExtras.put("Impression-Visible-Ms", "100");
+        serverExtras.put("Max-Buffer-Ms", "20");
+        videoResponseHeaders = new VideoResponseHeaders(serverExtras);
+
+        when(mockVastVideoConfig.getVideoViewabilityTracker())
+                .thenReturn(new VideoViewabilityTracker(98, 76, "viewabilityTracker"));
+
+        subject = new MoPubVideoNativeAd(
+                activity, jsonObject, mockCustomEventNativeListener, videoResponseHeaders,
+                mockVisibilityTracker, mockNativeVideoControllerFactory, null,
+                "header click tracker", mockVastManager);
+        subject.setNativeEventListener(mockNativeEventListener);
+        // noinspection unchecked
+        when(mockNativeVideoControllerFactory
+                .createForId(anyInt(), any(Context.class), any(List.class), eq(mockVastVideoConfig),
+                        any(EventDetails.class)))
+                .thenReturn(mockNativeVideoController);
+
+        when(mockImageLoader.get(anyString(), any(ImageListener.class)))
+                .then(new Answer<Void>() {
+                    @Override
+                    public Void answer(final InvocationOnMock invocationOnMock) throws Throwable {
+                        ImageListener listener = ((ImageListener) invocationOnMock.getArguments()[1]);
+                        listener.onResponse(mockImageContainer, false);
+                        return null;
+                    }
+                });
+        when(mockMediaLayout.getTextureView()).thenReturn(mockTextureView);
+
+        stub(mockImageContainer.getBitmap()).toReturn(mock(Bitmap.class));
+        Networking.setImageLoaderForTesting(mockImageLoader);
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+    }
+
+    @After
+    public void tearDown() {
+        Networking.setImageLoaderForTesting(null);
+        Networking.setRequestQueueForTesting(null);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void loadAd_withoutImpTrackerRequiredKey_shouldThrowIllegalArgumentException() {
+        jsonObject.remove("imptracker");
+        subject.loadAd();
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void loadAd_withoutClkTrackerRequiredKey_shouldThrowIllegalArgumentException() {
+        jsonObject.remove("clktracker");
+        subject.loadAd();
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void loadAd_withInvalidValueForRequiredKey_shouldThrowIllegalArgumentException() throws Exception {
+        jsonObject.put("imptracker", 123);
+        subject.loadAd();
+    }
+
+    @Test
+    public void loadAd_withInvalidValueForOptionalKey_shouldNotThrowExcpetion() throws Exception {
+        jsonObject.put("title", 123);
+        subject.loadAd();
+    }
+
+    @Test
+    public void loadAd_shouldInitializeAssetValues() {
+        subject.loadAd();
+
+        assertThat(subject.getImpressionTrackers()).containsOnly("url1", "url2");
+        assertThat(subject.getTitle()).isEqualTo("title");
+        assertThat(subject.getText()).isEqualTo("text");
+        assertThat(subject.getMainImageUrl()).isEqualTo("mainimageurl");
+        assertThat(subject.getIconImageUrl()).isEqualTo("iconimageurl");
+        assertThat(subject.getClickDestinationUrl()).isEqualTo("clk");
+        assertThat(subject.getCallToAction()).isEqualTo("ctatext");
+        assertThat(subject.getPrivacyInformationIconClickThroughUrl()).isEqualTo(
+                "https://www.mopub.com/optout/");
+        assertThat(subject.getVastVideo()).isEqualTo("video");
+        assertThat(subject.getExtra("extraimage")).isEqualTo("extraimageurl");
+        assertThat(subject.getExtras()).hasSize(1);
+    }
+
+    @Test
+    public void loadAd_shouldPrecacheImages_andLoadVastXml() {
+        subject.loadAd();
+
+        verify(mockImageLoader).get(eq("mainimageurl"), any(ImageListener.class));
+        verify(mockImageLoader).get(eq("iconimageurl"), any(ImageListener.class));
+        verify(mockImageLoader).get(eq("extraimageurl"), any(ImageListener.class));
+        verify(mockVastManager).prepareVastVideoConfiguration(eq("video"),
+                any(VastManager.VastManagerListener.class), anyString(), any(Context.class));
+    }
+
+    @Test
+    public void onVastVideoConfigurationPrepared_withNullVastVideoConfig_shouldNotifyListenerFailed() {
+        subject.onVastVideoConfigurationPrepared(null);
+        verify(mockCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.INVALID_RESPONSE);
+    }
+
+    @SuppressWarnings("unchecked")
+    @Test
+    public void onVastVideoConfigurationPrepared_shouldConstructNativeVideoController_shouldNotifyListenerOfAdLoaded() {
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+
+        ArgumentCaptor<List> argumentCaptor = ArgumentCaptor.forClass(List.class);
+        verify(mockNativeVideoControllerFactory).createForId(anyInt(),
+                eq(activity.getApplicationContext()),
+                argumentCaptor.capture(),
+                eq(mockVastVideoConfig),
+                any(EventDetails.class));
+
+        List<VisibilityTrackingEvent> visibilityTrackingEvents = (List<VisibilityTrackingEvent>) argumentCaptor.getValue();
+        assertThat(visibilityTrackingEvents.get(0).strategy).isInstanceOf(HeaderVisibilityStrategy.class);
+        assertThat(visibilityTrackingEvents.get(0).minimumPercentageVisible).isEqualTo(15);
+        assertThat(visibilityTrackingEvents.get(0).totalRequiredPlayTimeMs).isEqualTo(100);
+
+        assertThat(visibilityTrackingEvents.get(1).strategy).isInstanceOf(PayloadVisibilityStrategy.class);
+        assertThat(visibilityTrackingEvents.get(1).minimumPercentageVisible).isEqualTo(76);
+        assertThat(visibilityTrackingEvents.get(1).totalRequiredPlayTimeMs).isEqualTo(98);
+
+        verify(mockVastVideoConfig).addClickTrackers(any(List.class));
+        verify(mockVastVideoConfig).setClickThroughUrl("clk");
+        verify(mockCustomEventNativeListener).onNativeAdLoaded(subject);
+    }
+
+    @SuppressWarnings("unchecked")
+    @Test
+    public void onVastVideoConfigurationPrepared_shouldMergeHeaderAndJsonClickTrackers() {
+        final ArgumentCaptor<List> argumentCaptor = ArgumentCaptor.forClass(List.class);
+
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+
+        verify(mockVastVideoConfig).addClickTrackers(argumentCaptor.capture());
+        final List<VastTracker> actualClickTrackers = (List<VastTracker>) argumentCaptor.getValue();
+        assertThat(actualClickTrackers.size()).isEqualTo(2);
+        final VastTracker headerClickTracker = actualClickTrackers.get(0);
+        final VastTracker jsonClickTracker = actualClickTrackers.get(1);
+        assertThat(headerClickTracker.getTrackingUrl()).isEqualTo("header click tracker");
+        assertThat(headerClickTracker.isRepeatable()).isFalse();
+        assertThat(jsonClickTracker.getTrackingUrl()).isEqualTo("json click tracker");
+        assertThat(jsonClickTracker.isRepeatable()).isFalse();
+    }
+
+    @SuppressWarnings("unchecked")
+    @Test
+    public void onVastVideoConfigurationPrepared_shouldDedupeHeaderAndJsonClickTrackers() throws Exception {
+        jsonObject.remove("clktracker");
+        jsonObject.put("clktracker", "header click tracker");
+        final ArgumentCaptor<List> argumentCaptor = ArgumentCaptor.forClass(List.class);
+
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+
+        verify(mockVastVideoConfig).addClickTrackers(argumentCaptor.capture());
+        final List<VastTracker> actualClickTrackers = (List<VastTracker>) argumentCaptor.getValue();
+        assertThat(actualClickTrackers.size()).isEqualTo(1);
+        final VastTracker clickTracker = actualClickTrackers.get(0);
+        assertThat(clickTracker.getTrackingUrl()).isEqualTo("header click tracker");
+        assertThat(clickTracker.isRepeatable()).isFalse();
+    }
+
+    @SuppressWarnings("unchecked")
+    @Test
+    public void onVastVideoConfigurationPrepared_shouldAcceptJsonArrayClickTrackers() throws Exception {
+        jsonObject.remove("clktracker");
+        jsonObject.put("clktracker",
+                new JSONArray("[\"json click tracker 1\", \"json click tracker 2\"]"));
+        final ArgumentCaptor<List> argumentCaptor = ArgumentCaptor.forClass(List.class);
+
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+
+        verify(mockVastVideoConfig).addClickTrackers(argumentCaptor.capture());
+        final List<VastTracker> actualClickTrackers = (List<VastTracker>) argumentCaptor.getValue();
+        assertThat(actualClickTrackers.size()).isEqualTo(3);
+        final VastTracker jsonClickTracker1 = actualClickTrackers.get(0);
+        final VastTracker jsonClickTracker2 = actualClickTrackers.get(1);
+        final VastTracker headerClickTracker = actualClickTrackers.get(2);
+        assertThat(jsonClickTracker1.getTrackingUrl()).isEqualTo("json click tracker 1");
+        assertThat(jsonClickTracker1.isRepeatable()).isFalse();
+        assertThat(jsonClickTracker2.getTrackingUrl()).isEqualTo("json click tracker 2");
+        assertThat(jsonClickTracker2.isRepeatable()).isFalse();
+        assertThat(headerClickTracker.getTrackingUrl()).isEqualTo("header click tracker");
+        assertThat(headerClickTracker.isRepeatable()).isFalse();
+    }
+
+    @SuppressWarnings("unchecked")
+    @Test
+    public void onVastVideoConfigurationPrepared_shouldDedupeJsonArrayClickTrackers() throws Exception {
+        jsonObject.remove("clktracker");
+        jsonObject.put("clktracker",
+                new JSONArray("[\"json click tracker\", \"header click tracker\"]"));
+        final ArgumentCaptor<List> argumentCaptor = ArgumentCaptor.forClass(List.class);
+
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+
+        verify(mockVastVideoConfig).addClickTrackers(argumentCaptor.capture());
+        final List<VastTracker> actualClickTrackers = (List<VastTracker>) argumentCaptor.getValue();
+        assertThat(actualClickTrackers.size()).isEqualTo(2);
+        final VastTracker headerClickTracker = actualClickTrackers.get(0);
+        final VastTracker jsonClickTracker = actualClickTrackers.get(1);
+        assertThat(headerClickTracker.getTrackingUrl()).isEqualTo("header click tracker");
+        assertThat(headerClickTracker.isRepeatable()).isFalse();
+        assertThat(jsonClickTracker.getTrackingUrl()).isEqualTo("json click tracker");
+        assertThat(jsonClickTracker.isRepeatable()).isFalse();
+    }
+
+    @Test
+    public void render_shouldAddViewToVisibilityTracker() {
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+        subject.prepare(mockRootView);
+        subject.render(mockMediaLayout);
+
+        verify(mockVisibilityTracker).addView(mockRootView, mockMediaLayout, 10, 5);
+    }
+
+    @Test
+    public void render_shouldSetupMediaLayout() {
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+        subject.prepare(mockRootView);
+        subject.render(mockMediaLayout);
+
+        verify(mockMediaLayout).setSurfaceTextureListener(any(SurfaceTextureListener.class));
+        verify(mockMediaLayout).setPlayButtonClickListener(any(View.OnClickListener.class));
+        verify(mockMediaLayout).setMuteControlClickListener(any(View.OnClickListener.class));
+        verify(mockMediaLayout).setOnClickListener(any(View.OnClickListener.class));
+    }
+
+    @Test
+    public void render_shouldApplyStatePaused() {
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+        subject.prepare(mockRootView);
+        subject.render(mockMediaLayout);
+
+        verify(mockMediaLayout).setMode(MediaLayout.Mode.PAUSED);
+    }
+
+    @Test
+    public void render_withPlaybackStateCleared_shouldPrepareNativeVideoController() {
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+        subject.prepare(mockRootView);
+        when(mockNativeVideoController.getPlaybackState()).thenReturn(NativeVideoController
+                .STATE_CLEARED);
+        subject.render(mockMediaLayout);
+
+        verify(mockNativeVideoController).prepare(subject);
+    }
+
+    @Test
+    public void MediaLayout_surfaceTextureListener_onSurfaceTextureAvailable_shouldSetupNativeVideoController_shouldResetMediaLayoutProgress() {
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+        subject.prepare(mockRootView);
+        subject.render(mockMediaLayout);
+
+        ArgumentCaptor<SurfaceTextureListener> argumentCaptor =
+                ArgumentCaptor.forClass(SurfaceTextureListener.class);
+        verify(mockMediaLayout).setSurfaceTextureListener(argumentCaptor.capture());
+        SurfaceTextureListener surfaceTextureListener = argumentCaptor.getValue();
+
+        surfaceTextureListener.onSurfaceTextureAvailable(mockSurfaceTexture, 0, 0);
+
+        verify(mockNativeVideoController).setListener(subject);
+        verify(mockNativeVideoController).setOnAudioFocusChangeListener(subject);
+        verify(mockNativeVideoController).setProgressListener(subject);
+        verify(mockNativeVideoController).setTextureView(mockMediaLayout.getTextureView());
+        verify(mockMediaLayout).resetProgress();
+    }
+
+    @Test
+    public void MediaLayout_surfaceTextureListener_onSurfaceTextureAvailable_withCurrentPositionWithinThreshhold_withStateEnded_shouldSetFinalFrameAsMainImage() {
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+        subject.prepare(mockRootView);
+        subject.render(mockMediaLayout);
+
+        ArgumentCaptor<SurfaceTextureListener> argumentCaptor =
+                ArgumentCaptor.forClass(SurfaceTextureListener.class);
+        verify(mockMediaLayout).setSurfaceTextureListener(argumentCaptor.capture());
+        SurfaceTextureListener surfaceTextureListener = argumentCaptor.getValue();
+
+        when(mockNativeVideoController.getPlaybackState())
+                .thenReturn(NativeVideoController.STATE_ENDED);
+        when(mockNativeVideoController.getCurrentPosition()).thenReturn(9L);
+        when(mockNativeVideoController.getDuration()).thenReturn(10L);
+        when(mockNativeVideoController.hasFinalFrame()).thenReturn(true);
+        when(mockNativeVideoController.getFinalFrame()).thenReturn(mockDrawable);
+
+        surfaceTextureListener.onSurfaceTextureAvailable(mockSurfaceTexture, 0, 0);
+
+        verify(mockMediaLayout).setMainImageDrawable(mockNativeVideoController.getFinalFrame());
+    }
+
+    @Test
+    public void MediaLayout_surfaceTextureListener_onSurfaceTextureAvailable_withNeedsPrepare_shouldPrepareNativeVideoController() {
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+        subject.render(mockMediaLayout);
+
+        ArgumentCaptor<SurfaceTextureListener> argumentCaptor =
+                ArgumentCaptor.forClass(SurfaceTextureListener.class);
+        verify(mockMediaLayout).setSurfaceTextureListener(argumentCaptor.capture());
+        SurfaceTextureListener surfaceTextureListener = argumentCaptor.getValue();
+
+        surfaceTextureListener.onSurfaceTextureAvailable(mockSurfaceTexture, 0, 0);
+
+        verify(mockNativeVideoController).prepare(subject);
+    }
+
+    @Test
+    public void MediaLayout_surfaceTextureListener_onSurfaceTextureDestroyed_shouldSetNeedsPrepareTrue_shouldReleaseMoPubNativeVideoAd_shouldApplyStatePaused() {
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+        subject.prepare(mockRootView);
+        subject.render(mockMediaLayout);
+
+        ArgumentCaptor<SurfaceTextureListener> argumentCaptor =
+                ArgumentCaptor.forClass(SurfaceTextureListener.class);
+        verify(mockMediaLayout).setSurfaceTextureListener(argumentCaptor.capture());
+        SurfaceTextureListener surfaceTextureListener = argumentCaptor.getValue();
+
+        surfaceTextureListener.onSurfaceTextureDestroyed(mockSurfaceTexture);
+
+        assertThat(subject.needsPrepare()).isTrue();
+        verify(mockNativeVideoController).release(subject);
+        verify(mockMediaLayout).setMode(MediaLayout.Mode.PAUSED);
+    }
+
+    @Test
+    public void MediaLayout_playButtonClickListener_shouldResetMediaLayoutProgress_shouldSeekTo0_shouldSetEndedFalse_shouldSetNeedsSeekFalse() {
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+        subject.prepare(mockRootView);
+        subject.render(mockMediaLayout);
+
+        ArgumentCaptor<View.OnClickListener> argumentCaptor =
+                ArgumentCaptor.forClass(View.OnClickListener.class);
+        verify(mockMediaLayout).setPlayButtonClickListener(argumentCaptor.capture());
+
+        View.OnClickListener onClickListener = argumentCaptor.getValue();
+        onClickListener.onClick(null);
+
+        verify(mockMediaLayout).resetProgress();
+        verify(mockNativeVideoController).seekTo(0);
+        assertThat(subject.hasEnded()).isEqualTo(false);
+        assertThat(subject.needsSeek()).isEqualTo(false);
+    }
+
+    @Test
+    public void MediaLayout_muteButtonClickListener_withStateReady_shouldToggleMutedState() {
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+        subject.prepare(mockRootView);
+        subject.render(mockMediaLayout);
+
+        ArgumentCaptor<View.OnClickListener> argumentCaptor =
+                ArgumentCaptor.forClass(View.OnClickListener.class);
+        verify(mockMediaLayout).setMuteControlClickListener(argumentCaptor.capture());
+
+        View.OnClickListener onClickListener = argumentCaptor.getValue();
+        onClickListener.onClick(null);
+        assertThat(subject.isMuted()).isFalse();
+
+        onClickListener.onClick(null);
+        assertThat(subject.isMuted()).isTrue();
+    }
+
+    @Test
+    public void MediaLayout_clickListener_shouldPrepareToLeaveView_shouldTriggerImpressionTracker_shouldNotDisableAppAudio_shouldStartFullScreenVideoActivity() {
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+        subject.prepare(mockRootView);
+        subject.render(mockMediaLayout);
+
+        ArgumentCaptor<View.OnClickListener> argumentCaptor =
+                ArgumentCaptor.forClass(View.OnClickListener.class);
+        verify(mockMediaLayout).setOnClickListener(argumentCaptor.capture());
+
+        reset(mockNativeVideoController);
+        View.OnClickListener onClickListener = argumentCaptor.getValue();
+        onClickListener.onClick(null);
+
+        assertThat(subject.needsSeek()).isTrue();
+        assertThat(subject.needsPrepare()).isTrue();
+        assertThat(subject.needsPrepare()).isTrue();
+        verify(mockNativeVideoController).setListener(null);
+        verify(mockNativeVideoController).setOnAudioFocusChangeListener(null);
+        verify(mockNativeVideoController).setProgressListener(null);
+        verify(mockNativeVideoController).clear();
+        verify(mockNativeVideoController).triggerImpressionTrackers();
+        verify(mockMediaLayout).setMode(MediaLayout.Mode.PAUSED);
+        verify(mockNativeVideoController, never()).setAppAudioEnabled(anyBoolean());
+
+        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
+        assertThat(startedActivity.getComponent().getClassName())
+                .isEqualTo(MraidVideoPlayerActivity.class.getName());
+        assertThat(startedActivity.getStringExtra(BaseVideoPlayerActivity.VIDEO_CLASS_EXTRAS_KEY))
+                .isEqualTo("native");
+        assertThat(startedActivity.getLongExtra(NativeVideoViewController.NATIVE_VIDEO_ID, 0L))
+                .isGreaterThan(0L);
+        assertThat(startedActivity.getSerializableExtra(NativeVideoViewController
+                .NATIVE_VAST_VIDEO_CONFIG))
+                .isEqualTo(mockVastVideoConfig);
+    }
+
+    @Test
+    public void prepare_shouldSetOnClickListenerOnView() {
+        subject.prepare(mockRootView);
+        verify(mockRootView).setOnClickListener(any(View.OnClickListener.class));
+    }
+
+    @Test
+    public void RootView_onClickListener_onClick_shouldPrepareToLeaveView_shouldNotDisableAppAudio_shouldNotNotifyAdClicked_shouldTriggerImpressionTrackers_shouldshouldHandleCtaClick() {
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+        subject.prepare(mockRootView);
+        subject.render(mockMediaLayout);
+
+        ArgumentCaptor<View.OnClickListener> argumentCaptor =
+                ArgumentCaptor.forClass(View.OnClickListener.class);
+        verify(mockRootView).setOnClickListener(argumentCaptor.capture());
+
+        View.OnClickListener onClickListener = argumentCaptor.getValue();
+        reset(mockNativeVideoController);
+        onClickListener.onClick(null);
+
+        assertThat(subject.needsSeek()).isTrue();
+        assertThat(subject.needsPrepare()).isTrue();
+        assertThat(subject.needsPrepare()).isTrue();
+        verify(mockNativeVideoController).setListener(null);
+        verify(mockNativeVideoController).setOnAudioFocusChangeListener(null);
+        verify(mockNativeVideoController).setProgressListener(null);
+        verify(mockNativeVideoController).clear();
+        verify(mockMediaLayout).setMode(MediaLayout.Mode.PAUSED);
+        verify(mockNativeVideoController).handleCtaClick(activity.getApplicationContext());
+        verify(mockNativeEventListener, never()).onAdClicked();
+        verify(mockNativeVideoController).triggerImpressionTrackers();
+        verify(mockNativeVideoController, never()).setAppAudioEnabled(anyBoolean());
+    }
+
+    @Test
+    public void clear_shouldClearNativeVideoController_shouldSetMediaLayoutModeImage_shouldSetMediaLayoutNull_shouldSetMediaLayoutListenersToNull_shouldRemoveMediaLayoutFromVisibilityTracker() {
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+        subject.prepare(mockRootView);
+        subject.render(mockMediaLayout);
+        subject.clear(mockRootView);
+
+        verify(mockNativeVideoController).clear();
+        verify(mockMediaLayout).setMode(MediaLayout.Mode.IMAGE);
+        verify(mockMediaLayout).setSurfaceTextureListener(null);
+        verify(mockMediaLayout).setPlayButtonClickListener(null);
+        verify(mockMediaLayout).setMuteControlClickListener(null);
+        verify(mockMediaLayout).setOnClickListener(null);
+        verify(mockVisibilityTracker).removeView(mockMediaLayout);
+        assertThat(subject.getMediaLayout()).isNull();
+    }
+
+    @Test
+    public void destroy_shouldSetPlayWhenReadyFalse_shouldReleaseNativeVideoController_shouldRemoveNativeVideoController_shouldDestroyVisibilityTracker() {
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+        subject.prepare(mockRootView);
+        subject.render(mockMediaLayout);
+
+        reset(mockNativeVideoController);
+        subject.destroy();
+
+        verify(mockMediaLayout).setMode(MediaLayout.Mode.IMAGE);
+        verify(mockMediaLayout).setSurfaceTextureListener(null);
+        verify(mockMediaLayout).setPlayButtonClickListener(null);
+        verify(mockMediaLayout).setMuteControlClickListener(null);
+        verify(mockMediaLayout).setOnClickListener(null);
+        verify(mockVisibilityTracker).removeView(mockMediaLayout);
+
+        assertThat(subject.getMediaLayout()).isNull();
+        verify(mockNativeVideoController).setPlayWhenReady(false);
+        verify(mockNativeVideoController).release(subject);
+        assertThat(NativeVideoController.getForId(subject.getId())).isNull();
+        verify(mockVisibilityTracker).destroy();
+    }
+
+    @Test
+    public void onStateChanged_shouldAppropriatelySetVideoState() {
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+        subject.prepare(mockRootView);
+        subject.render(mockMediaLayout);
+
+        subject.onStateChanged(true, NativeVideoController.STATE_PREPARING);
+        assertThat(subject.getVideoState()).isEqualTo(VideoState.LOADING);
+
+        subject.onStateChanged(true, NativeVideoController.STATE_IDLE);
+        assertThat(subject.getVideoState()).isEqualTo(VideoState.LOADING);
+
+        subject.onStateChanged(true, NativeVideoController.STATE_BUFFERING);
+        assertThat(subject.getVideoState()).isEqualTo(VideoState.BUFFERING);
+
+        subject.onStateChanged(true, NativeVideoController.STATE_READY);
+        assertThat(subject.getVideoState()).isEqualTo(VideoState.PAUSED);
+
+        subject.setLatestVisibility(true);
+        subject.onStateChanged(true, NativeVideoController.STATE_READY);
+        assertThat(subject.getVideoState()).isEqualTo(VideoState.PLAYING_MUTED);
+
+        subject.setMuted(false);
+        subject.onStateChanged(true, NativeVideoController.STATE_READY);
+        assertThat(subject.getVideoState()).isEqualTo(VideoState.PLAYING);
+
+        subject.onStateChanged(true, NativeVideoController.STATE_ENDED);
+        assertThat(subject.getVideoState()).isEqualTo(VideoState.ENDED);
+        assertThat(subject.hasEnded()).isTrue();
+    }
+
+    @Test
+    public void onError_shouldSetVideoStateError() {
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+        subject.prepare(mockRootView);
+        subject.render(mockMediaLayout);
+
+        subject.onError(new Exception());
+
+        assertThat(subject.getVideoState()).isEqualTo(VideoState.FAILED_LOAD);
+    }
+
+    @Test
+    public void updateProgress_shouldUpdateMediaLayoutProgress() {
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+        subject.prepare(mockRootView);
+        subject.render(mockMediaLayout);
+
+        subject.updateProgress(312);
+
+        verify(mockMediaLayout).updateProgress(312);
+    }
+
+    @Test
+    public void onAudioFocusChange_withFocusChangeAudioFocusLossOrAudioFocusLossTransient_shouldMuteTheVideo() throws Exception {
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+        subject.prepare(mockRootView);
+        subject.render(mockMediaLayout);
+
+        subject.setMuted(false);
+        subject.onAudioFocusChange(AudioManager.AUDIOFOCUS_LOSS);
+
+        assertThat(subject.isMuted()).isTrue();
+
+        subject.setMuted(false);
+        subject.onAudioFocusChange(AudioManager.AUDIOFOCUS_LOSS_TRANSIENT);
+
+        assertThat(subject.isMuted()).isTrue();
+    }
+
+    @Test
+    public void onAudioFocusChange_withFocusChangeAudioFocusLossTransientCanDuck_shouldLowerVolume() throws Exception {
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+        subject.prepare(mockRootView);
+        subject.render(mockMediaLayout);
+
+        subject.onAudioFocusChange(AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK);
+
+        verify(mockNativeVideoController).setAudioVolume(0.3f);
+    }
+
+    @Test
+    public void onAudioFocusChange_withFocusChangeAudioFocusGain_shouldRaiseVolume() throws Exception {
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+        subject.prepare(mockRootView);
+        subject.render(mockMediaLayout);
+
+        subject.onAudioFocusChange(AudioManager.AUDIOFOCUS_GAIN);
+
+        verify(mockNativeVideoController).setAudioVolume(1.0f);
+    }
+
+    @Test
+    public void applyState_shouldHandleError_shouldSetAppAudioEnabledFalse_shouldSetMediaLayoutModeImage() {
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+        subject.prepare(mockRootView);
+        subject.render(mockMediaLayout);
+
+        reset(mockNativeVideoController);
+        subject.applyState(VideoState.FAILED_LOAD);
+
+        verify(mockVastVideoConfig).handleError(activity.getApplicationContext(), null, 0);
+        verify(mockNativeVideoController).setAppAudioEnabled(false);
+        verify(mockMediaLayout).setMode(MediaLayout.Mode.IMAGE);
+    }
+
+    @Test
+    public void applyState_withVideoStateCreatedOrLoading_shouldSetPlayWhenReadyTrue_shouldSetMediaLayoutModeLoading() {
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+        subject.prepare(mockRootView);
+        subject.render(mockMediaLayout);
+
+        subject.applyState(VideoState.CREATED);
+
+        verify(mockNativeVideoController).setPlayWhenReady(true);
+        verify(mockMediaLayout).setMode(MediaLayout.Mode.LOADING);
+
+        reset(mockNativeVideoController);
+        reset(mockMediaLayout);
+        subject.applyState(VideoState.LOADING);
+
+        verify(mockNativeVideoController).setPlayWhenReady(true);
+        verify(mockMediaLayout).setMode(MediaLayout.Mode.LOADING);
+    }
+
+    @Test
+    public void applyState_withVideoStateBuffering_shouldSetPlayWhenReadyTrue_shouldSetMediaLayoutModeBuffering() {
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+        subject.prepare(mockRootView);
+        subject.render(mockMediaLayout);
+
+        subject.applyState(VideoState.BUFFERING);
+
+        verify(mockNativeVideoController).setPlayWhenReady(true);
+        verify(mockMediaLayout).setMode(MediaLayout.Mode.BUFFERING);
+    }
+
+    @Test
+    public void applyState_withVideoStatePaused_withTransitionToFullScreenFalse_shouldSetAppAudioEnabledFalse_shouldSetPlayWhenReadyFalse_shouldSetMediaLayoutModePaused() {
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+        subject.prepare(mockRootView);
+        subject.render(mockMediaLayout);
+
+        subject.applyState(VideoState.PAUSED);
+
+        verify(mockNativeVideoController).setAppAudioEnabled(false);
+        verify(mockNativeVideoController).setPlayWhenReady(false);
+        verify(mockMediaLayout).setMode(MediaLayout.Mode.PAUSED);
+    }
+
+    @Test
+    public void applyState_withVideoStatePlaying_shouldSetPlayWhenReadyTrue_shouldSetAudioEnabledTrue_shouldSetAppAudioEnabledTrue_shouldSetMediaLayoutModePlaying_shouldSetMuteStateUnmuted() {
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+        subject.prepare(mockRootView);
+        subject.render(mockMediaLayout);
+
+        reset(mockNativeVideoController);
+        subject.applyState(VideoState.PLAYING);
+
+        verify(mockNativeVideoController).setPlayWhenReady(true);
+        verify(mockNativeVideoController).setAudioEnabled(true);
+        verify(mockNativeVideoController).setAppAudioEnabled(true);
+        verify(mockMediaLayout).setMode(MediaLayout.Mode.PLAYING);
+        verify(mockMediaLayout).setMuteState(MediaLayout.MuteState.UNMUTED);
+    }
+
+    @Test
+    public void applyState_withVideoStatePlaying_withNeedsSeek_shouldSeekToCurrentPosition() {
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+        subject.prepare(mockRootView);
+        subject.render(mockMediaLayout);
+
+        assertThat(subject.needsSeek()).isTrue();
+        when(mockNativeVideoController.getCurrentPosition()).thenReturn(543L);
+        subject.applyState(VideoState.PLAYING);
+
+        verify(mockNativeVideoController).seekTo(mockNativeVideoController.getCurrentPosition());
+    }
+
+    @Test
+    public void applyState_withVideoStatePlayingMuted_shouldSetPlayWhenReadyTrue_shouldSetAudioEnabledFalse_shouldSetAppAudioEnabledTrue_shouldSetMediaLayoutModePlaying_shouldSetMuteStateMuted() {
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+        subject.prepare(mockRootView);
+        subject.render(mockMediaLayout);
+
+        reset(mockNativeVideoController);
+        subject.applyState(VideoState.PLAYING_MUTED);
+
+        verify(mockNativeVideoController).setPlayWhenReady(true);
+        verify(mockNativeVideoController).setAudioEnabled(false);
+        verify(mockNativeVideoController).setAppAudioEnabled(false);
+        verify(mockMediaLayout).setMode(MediaLayout.Mode.PLAYING);
+        verify(mockMediaLayout).setMuteState(MediaLayout.MuteState.MUTED);
+    }
+
+    @Test
+    public void applyState_withVideoStatePlayingMuted_withNeedsSeek_shouldSeekToCurrentPosition() {
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+        subject.prepare(mockRootView);
+        subject.render(mockMediaLayout);
+
+        assertThat(subject.needsSeek()).isTrue();
+        when(mockNativeVideoController.getCurrentPosition()).thenReturn(543L);
+        subject.applyState(VideoState.PLAYING_MUTED);
+
+        verify(mockNativeVideoController).seekTo(mockNativeVideoController.getCurrentPosition());
+    }
+
+    @Test
+    public void applyState_withVideoStatePlayingEnded_shouldHandleComplete_shouldSetAppAudioEnabledTrue_shouldSetMediaLayoutModeFinished_shouldUpdateMediaLayoutProgress1000() {
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+        subject.prepare(mockRootView);
+        subject.render(mockMediaLayout);
+
+        reset(mockNativeVideoController);
+        subject.applyState(VideoState.ENDED);
+
+        verify(mockVastVideoConfig).handleComplete(activity.getApplicationContext(), 0);
+        verify(mockNativeVideoController).setAppAudioEnabled(false);
+        verify(mockMediaLayout).setMode(MediaLayout.Mode.FINISHED);
+        verify(mockMediaLayout).updateProgress(1000);
+
+        verify(mockMediaLayout, never()).setMainImageDrawable(any(Drawable.class));
+    }
+
+    @Test
+    public void applyState_withVideoStatePlayingEnded_withFinalFrame_shouldSetMainImageDrawableOfMediaLayout() {
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+        subject.prepare(mockRootView);
+        subject.render(mockMediaLayout);
+
+        when(mockNativeVideoController.hasFinalFrame()).thenReturn(true);
+        when(mockNativeVideoController.getFinalFrame()).thenReturn(mockDrawable);
+        subject.applyState(VideoState.ENDED);
+
+        verify(mockMediaLayout).setMainImageDrawable(mockNativeVideoController.getFinalFrame());
+    }
+
+    @Test
+    public void applyState_withVideoStatePause_afterVideoStatePlayingMuted_shouldFirePauseTrackers() {
+        final ArrayList<VastTracker> testList = new ArrayList<VastTracker>();
+        testList.add(new VastTracker("testUrl", true));
+
+        when(mockVastVideoConfig.getPauseTrackers()).thenReturn(testList);
+
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+        subject.prepare(mockRootView);
+        subject.render(mockMediaLayout);
+
+        subject.applyState(VideoState.PLAYING_MUTED);
+        subject.applyState(VideoState.PAUSED);
+
+        verify(mockVastVideoConfig).getPauseTrackers();
+        verify(mockRequestQueue).add(argThat(isUrl("testUrl")));
+    }
+
+    @Test
+    public void applyState_withVideoStatePlayingMuted_afterPaused_afterPlaying_shouldFireResumeTrackers() {
+        final ArrayList<VastTracker> testList = new ArrayList<VastTracker>();
+        testList.add(new VastTracker("testResumeUrl", true));
+
+        when(mockVastVideoConfig.getResumeTrackers()).thenReturn(testList);
+
+        subject.loadAd();
+        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
+        subject.prepare(mockRootView);
+        subject.render(mockMediaLayout);
+
+        subject.applyState(VideoState.PLAYING_MUTED);
+        subject.applyState(VideoState.PAUSED);
+        subject.applyState(VideoState.BUFFERING);
+        subject.applyState(VideoState.PLAYING_MUTED);
+
+        verify(mockVastVideoConfig).getPauseTrackers();
+        verify(mockRequestQueue).add(argThat(isUrl("testResumeUrl")));
+    }
+
+    @Test
+    public void HeaderVisibilityStrategy_execute_shouldNotifyAdImpressed() throws Exception {
+        HeaderVisibilityStrategy headerVisibilityStrategy
+                = new HeaderVisibilityStrategy(subject);
+        headerVisibilityStrategy.execute();
+
+        verify(mockNativeEventListener).onAdImpressed();
+    }
+
+    @Test
+    public void PayloadVisibilityStrategy_execute_shouldMakeTrackingRequest() throws Exception {
+        PayloadVisibilityStrategy payloadVisibilityStrategy
+                = new PayloadVisibilityStrategy(activity, "payloadUrl");
+        payloadVisibilityStrategy.execute();
+
+        verify(mockRequestQueue).add(argThat(isUrl("payloadUrl")));
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdSourceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdSourceTest.java
index 13873d0c..6946d3af 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdSourceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdSourceTest.java
@@ -4,11 +4,13 @@
 import android.os.SystemClock;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
+import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowSystemClock;
 
 import java.util.ArrayList;
@@ -21,40 +23,87 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class NativeAdSourceTest {
     private NativeAdSource subject;
-    private ArrayList<TimestampWrapper<NativeResponse>> nativeAdCache;
+    private ArrayList<TimestampWrapper<NativeAd>> nativeAdCache;
     private RequestParameters requestParameters;
     private int defaultRetryTime;
     private int maxRetryTime;
+    private int maxRetries;
 
     @Mock private AdSourceListener mockAdSourceListener;
     @Mock private MoPubNative mockMoPubNative;
-    @Mock private NativeResponse mockNativeResponse;
+    @Mock private NativeAd mMockNativeAd;
     @Mock private Handler mockReplenishCacheHandler;
+    @Mock private AdRendererRegistry mockAdRendererRegistry;
+    @Mock private MoPubStaticNativeAdRenderer mockRenderer;
 
     @Before
     public void setUp() {
-        nativeAdCache = new ArrayList<TimestampWrapper<NativeResponse>>(2);
-        subject = new NativeAdSource(nativeAdCache, mockReplenishCacheHandler);
+        nativeAdCache = new ArrayList<TimestampWrapper<NativeAd>>(2);
+        subject = new NativeAdSource(nativeAdCache, mockReplenishCacheHandler, mockAdRendererRegistry);
         subject.setAdSourceListener(mockAdSourceListener);
 
         requestParameters = new RequestParameters.Builder().build();
 
         defaultRetryTime = 1000;
         maxRetryTime = 5*60*1000;
+        maxRetries = 5;
 
         // XXX We need this to ensure that our SystemClock starts
         ShadowSystemClock.uptimeMillis();
+
+        ArrayList<MoPubAdRenderer> moPubAdRenderers = new ArrayList<MoPubAdRenderer>();
+        moPubAdRenderers.add(mockRenderer);
+        when(mockAdRendererRegistry.getRendererIterable()).thenReturn(moPubAdRenderers);
     }
 
     @Test
     public void constructor_shouldInitializeCorrectly() {
         assertThat(subject.mRequestInFlight).isFalse();
         assertThat(subject.mSequenceNumber).isEqualTo(0);
-        assertThat(subject.mRetryTimeMilliseconds).isEqualTo(defaultRetryTime);
+        assertThat(subject.getRetryTime()).isEqualTo(defaultRetryTime);
+    }
+
+    @Test
+    public void getAdRendererCount_shouldCallAdRendererRegistryGetAdRendererCount() throws Exception {
+        when(mockAdRendererRegistry.getAdRendererCount()).thenReturn(123);
+
+        assertThat(subject.getAdRendererCount()).isEqualTo(123);
+
+        verify(mockAdRendererRegistry).getAdRendererCount();
+    }
+
+    @Test
+    public void getViewTypeForAd_shouldCallAdRendererRegistryGetViewTypeForAd() throws Exception {
+        NativeAd nativeAd = mock(NativeAd.class);
+        when(mockAdRendererRegistry.getViewTypeForAd(nativeAd)).thenReturn(123);
+
+        assertThat(subject.getViewTypeForAd(nativeAd)).isEqualTo(123);
+
+        verify(mockAdRendererRegistry).getViewTypeForAd(nativeAd);
+    }
+
+    @Test
+    public void registerAdRenderer_shouldRegisterAdRendererWithRegistryAndMoPubNative() throws Exception {
+        subject.setMoPubNative(mockMoPubNative);
+        subject.registerAdRenderer(mockRenderer);
+
+        verify(mockAdRendererRegistry).registerAdRenderer(mockRenderer);
+        verify(mockMoPubNative).registerAdRenderer(mockRenderer);
+    }
+
+    @Test
+    public void getAdRendererForViewType_shouldCallAdRendererRegistryGetRendererForViewType() throws Exception {
+        when(mockAdRendererRegistry.getRendererForViewType(123)).thenReturn(mockRenderer);
+
+        assertThat(subject.getAdRendererForViewType(123)).isEqualTo(mockRenderer);
+
+        verify(mockAdRendererRegistry).getRendererForViewType(123);
     }
 
     @Test
@@ -64,15 +113,22 @@ public void loadAds_shouldReplenishCache() {
         verify(mockMoPubNative).makeRequest(requestParameters, 0);
     }
 
+    @Test
+    public void loadAds_shouldReregisterAdRenderersWithNewMoPubNative() throws Exception {
+        subject.loadAds(mock(RequestParameters.class), mockMoPubNative);
+
+        verify(mockMoPubNative).registerAdRenderer(mockRenderer);
+    }
+
     @Test
     public void loadAds_shouldClearNativeAdSource() {
         subject.setMoPubNative(mockMoPubNative);
-        TimestampWrapper<NativeResponse> timestampWrapper =
-                new TimestampWrapper<NativeResponse>(mock(NativeResponse.class));
+        TimestampWrapper<NativeAd> timestampWrapper =
+                new TimestampWrapper<NativeAd>(mock(NativeAd.class));
         nativeAdCache.add(timestampWrapper);
         subject.mRequestInFlight = true;
         subject.mSequenceNumber = 5;
-        subject.mRetryTimeMilliseconds = maxRetryTime;
+        subject.mCurrentRetries = maxRetries;
 
         subject.loadAds(requestParameters, mockMoPubNative);
 
@@ -81,7 +137,8 @@ public void loadAds_shouldClearNativeAdSource() {
         verify(mockMoPubNative).destroy();
         verify(mockReplenishCacheHandler).removeMessages(0);
         assertThat(subject.mSequenceNumber).isEqualTo(0);
-        assertThat(subject.mRetryTimeMilliseconds).isEqualTo(defaultRetryTime);
+        assertThat(subject.mCurrentRetries).isEqualTo(0);
+        assertThat(subject.getRetryTime()).isEqualTo(defaultRetryTime);
 
         // new request has been kicked off
         assertThat(subject.mRequestInFlight).isTrue();
@@ -99,11 +156,11 @@ public void loadAds_shouldDestroyPreviousMoPubNativeInstance() {
     @Test
     public void clear_shouldDestroyMoPubNative_shouldClearNativeAdCache_shouldRemovePollHandlerMessages_shouldResetSequenceNumber_shouldResetRequestInFlight_shouldResetRetryTime() {
         subject.setMoPubNative(mockMoPubNative);
-        TimestampWrapper<NativeResponse> timestampWrapper = new TimestampWrapper<NativeResponse>(mock(NativeResponse.class));
+        TimestampWrapper<NativeAd> timestampWrapper = new TimestampWrapper<NativeAd>(mock(NativeAd.class));
         nativeAdCache.add(timestampWrapper);
         subject.mRequestInFlight = true;
         subject.mSequenceNumber = 5;
-        subject.mRetryTimeMilliseconds = maxRetryTime;
+        subject.mCurrentRetries = maxRetries;
 
         subject.clear();
 
@@ -113,24 +170,24 @@ public void clear_shouldDestroyMoPubNative_shouldClearNativeAdCache_shouldRemove
         verify(mockReplenishCacheHandler).removeMessages(0);
         assertThat(subject.mRequestInFlight).isFalse();
         assertThat(subject.mSequenceNumber).isEqualTo(0);
-        assertThat(subject.mRetryTimeMilliseconds).isEqualTo(defaultRetryTime);
+        assertThat(subject.getRetryTime()).isEqualTo(defaultRetryTime);
     }
 
     @Test
-    public void dequeueAd_withNonStaleResponse_shouldReturnNativeResponse() {
+    public void dequeueAd_withNonStaleAd_shouldReturnNativeAd() {
         subject.setMoPubNative(mockMoPubNative);
-        nativeAdCache.add(new TimestampWrapper<NativeResponse>(mockNativeResponse));
+        nativeAdCache.add(new TimestampWrapper<NativeAd>(mMockNativeAd));
 
-        assertThat(subject.dequeueAd()).isEqualTo(mockNativeResponse);
+        assertThat(subject.dequeueAd()).isEqualTo(mMockNativeAd);
         assertThat(nativeAdCache).isEmpty();
     }
 
     @Test
-    public void dequeueAd_withStaleResponse_shouldReturnNativeResponse() {
+    public void dequeueAd_withStaleAd_shouldReturnNativeAd() {
         subject.setMoPubNative(mockMoPubNative);
 
-        TimestampWrapper<NativeResponse> timestampWrapper = new TimestampWrapper<NativeResponse>(
-                mockNativeResponse);
+        TimestampWrapper<NativeAd> timestampWrapper = new TimestampWrapper<NativeAd>(
+                mMockNativeAd);
         timestampWrapper.mCreatedTimestamp = SystemClock.uptimeMillis() - (15*60*1000+1);
         nativeAdCache.add(timestampWrapper);
 
@@ -142,9 +199,9 @@ public void dequeueAd_withStaleResponse_shouldReturnNativeResponse() {
     public void dequeueAd_noRequestInFlight_shouldReplenishCache() {
         subject.setMoPubNative(mockMoPubNative);
 
-        nativeAdCache.add(new TimestampWrapper<NativeResponse>(mockNativeResponse));
+        nativeAdCache.add(new TimestampWrapper<NativeAd>(mMockNativeAd));
 
-        assertThat(subject.dequeueAd()).isEqualTo(mockNativeResponse);
+        assertThat(subject.dequeueAd()).isEqualTo(mMockNativeAd);
 
         assertThat(nativeAdCache).isEmpty();
         verify(mockReplenishCacheHandler).post(any(Runnable.class));
@@ -154,10 +211,10 @@ public void dequeueAd_noRequestInFlight_shouldReplenishCache() {
     public void dequeueAd_requestInFlight_shouldNotReplenishCache() {
         subject.setMoPubNative(mockMoPubNative);
 
-        nativeAdCache.add(new TimestampWrapper<NativeResponse>(mockNativeResponse));
+        nativeAdCache.add(new TimestampWrapper<NativeAd>(mMockNativeAd));
 
         subject.mRequestInFlight = true;
-        assertThat(subject.dequeueAd()).isEqualTo(mockNativeResponse);
+        assertThat(subject.dequeueAd()).isEqualTo(mMockNativeAd);
 
         assertThat(nativeAdCache).isEmpty();
         verify(mockReplenishCacheHandler, never()).post(any(Runnable.class));
@@ -166,27 +223,27 @@ public void dequeueAd_requestInFlight_shouldNotReplenishCache() {
     @Test
     public void updateRetryTime_shouldUpdateRetryTimeUntilAt10Minutes() {
         int retryTime = 0;
-        while (subject.mRetryTimeMilliseconds < maxRetryTime) {
+        while (subject.mCurrentRetries < maxRetries) {
             subject.updateRetryTime();
-            retryTime = subject.mRetryTimeMilliseconds;
+            retryTime = subject.getRetryTime();
         }
 
         assertThat(retryTime).isEqualTo(maxRetryTime);
 
         // assert it won't change anymore
         subject.updateRetryTime();
-        assertThat(retryTime).isEqualTo(subject.mRetryTimeMilliseconds);
+        assertThat(retryTime).isEqualTo(subject.getRetryTime());
     }
 
     @Test
     public void resetRetryTime_shouldSetRetryTimeTo1Second() {
-        assertThat(subject.mRetryTimeMilliseconds).isEqualTo(defaultRetryTime);
+        assertThat(subject.getRetryTime()).isEqualTo(defaultRetryTime);
 
         subject.updateRetryTime();
-        assertThat(subject.mRetryTimeMilliseconds).isGreaterThan(defaultRetryTime);
+        assertThat(subject.getRetryTime()).isGreaterThan(defaultRetryTime);
 
         subject.resetRetryTime();
-        assertThat(subject.mRetryTimeMilliseconds).isEqualTo(defaultRetryTime);
+        assertThat(subject.getRetryTime()).isEqualTo(defaultRetryTime);
     }
 
     @Test
@@ -210,6 +267,7 @@ public void replenishCache_withRequestInFlight_shouldNotLoadNativeAd() {
         assertThat(subject.mRequestInFlight).isTrue();
     }
 
+    @SuppressWarnings("unchecked")
     @Test
     public void replenishCache_withCacheSizeAtLimit_shouldNotLoadNativeAd() {
         // Default cache size may change in the future and this test will have to be updated
@@ -228,10 +286,10 @@ public void replenishCache_withCacheSizeAtLimit_shouldNotLoadNativeAd() {
     @Test
     public void moPubNativeNetworkListener_onNativeLoad_shouldAddToCache() {
         subject.setMoPubNative(mockMoPubNative);
-        subject.getMoPubNativeNetworkListener().onNativeLoad(mockNativeResponse);
+        subject.getMoPubNativeNetworkListener().onNativeLoad(mMockNativeAd);
 
         assertThat(nativeAdCache).hasSize(1);
-        assertThat(nativeAdCache.get(0).mInstance).isEqualTo(mockNativeResponse);
+        assertThat(nativeAdCache.get(0).mInstance).isEqualTo(mMockNativeAd);
     }
 
     @Test
@@ -239,7 +297,7 @@ public void moPubNativeNetworkListener_onNativeLoad_withEmptyCache_shouldCallOnA
         subject.setMoPubNative(mockMoPubNative);
 
         assertThat(nativeAdCache).isEmpty();
-        subject.getMoPubNativeNetworkListener().onNativeLoad(mockNativeResponse);
+        subject.getMoPubNativeNetworkListener().onNativeLoad(mMockNativeAd);
 
         assertThat(nativeAdCache).hasSize(1);
         verify(mockAdSourceListener).onAdsAvailable();
@@ -250,7 +308,7 @@ public void moPubNativeNetworkListener_onNativeLoad_withNonEmptyCache_shouldNotC
         subject.setMoPubNative(mockMoPubNative);
 
         nativeAdCache.add(mock(TimestampWrapper.class));
-        subject.getMoPubNativeNetworkListener().onNativeLoad(mockNativeResponse);
+        subject.getMoPubNativeNetworkListener().onNativeLoad(mMockNativeAd);
 
         assertThat(nativeAdCache).hasSize(2);
         verify(mockAdSourceListener, never()).onAdsAvailable();
@@ -260,15 +318,16 @@ public void moPubNativeNetworkListener_onNativeLoad_withNonEmptyCache_shouldNotC
     public void moPubNativeNetworkListener_onNativeLoad_shouldIncrementSequenceNumber_shouldResetRetryTime() {
         subject.setMoPubNative(mockMoPubNative);
 
-        subject.mRetryTimeMilliseconds = maxRetryTime;
+        subject.mCurrentRetries = maxRetries;
         subject.mSequenceNumber = 5;
 
-        subject.getMoPubNativeNetworkListener().onNativeLoad(mockNativeResponse);
+        subject.getMoPubNativeNetworkListener().onNativeLoad(mMockNativeAd);
 
-        assertThat(subject.mRetryTimeMilliseconds).isEqualTo(defaultRetryTime);
+        assertThat(subject.getRetryTime()).isEqualTo(defaultRetryTime);
         assertThat(subject.mSequenceNumber).isEqualTo(6);
     }
 
+    @SuppressWarnings("unchecked")
     @Test
     public void moPubNativeNetworkListener_onNativeLoad_withFullCache_shouldResetRequestInFlight() {
         subject.setMoPubNative(mockMoPubNative);
@@ -280,48 +339,46 @@ public void moPubNativeNetworkListener_onNativeLoad_withFullCache_shouldResetReq
         nativeAdCache.add(mock(TimestampWrapper.class));
         nativeAdCache.add(mock(TimestampWrapper.class));
 
-        subject.getMoPubNativeNetworkListener().onNativeLoad(mockNativeResponse);
+        subject.getMoPubNativeNetworkListener().onNativeLoad(mMockNativeAd);
 
         assertThat(subject.mRequestInFlight).isEqualTo(false);
     }
 
     @Test
-    public void moPubNativeNetworkListener_onNativeLoad_withNonFullCache_shouldReplenishCache() {
+    public void moPubNativeNetworkListener_onNativeLoad_withCacheFilled_shouldNotReplenishCache() {
         subject.setMoPubNative(mockMoPubNative);
 
         subject.mRequestInFlight = true;
 
-        subject.getMoPubNativeNetworkListener().onNativeLoad(mockNativeResponse);
+        subject.getMoPubNativeNetworkListener().onNativeLoad(mMockNativeAd);
 
-        assertThat(subject.mRequestInFlight).isEqualTo(true);
-        verify(mockMoPubNative).makeRequest(any(RequestParameters.class), eq(1));
+        assertThat(subject.mRequestInFlight).isEqualTo(false);
     }
 
     @Test
     public void
     moPubNativeNetworkListener_onNativeFail_shouldResetInFlight_shouldUpdateRetryTime_shouldPostDelayedRunnable() {
         subject.mRequestInFlight = true;
-        subject.mRetryTimeMilliseconds = defaultRetryTime;
 
         subject.getMoPubNativeNetworkListener().onNativeFail(NativeErrorCode.UNSPECIFIED);
 
         assertThat(subject.mRequestInFlight).isEqualTo(false);
         assertThat(subject.mRetryInFlight).isEqualTo(true);
-        assertThat(subject.mRetryTimeMilliseconds).isGreaterThan(defaultRetryTime);
-        verify(mockReplenishCacheHandler).postDelayed(any(Runnable.class), eq((long)subject.mRetryTimeMilliseconds));
+        assertThat(subject.getRetryTime()).isGreaterThan(defaultRetryTime);
+        verify(mockReplenishCacheHandler).postDelayed(any(Runnable.class), eq((long)subject.getRetryTime()));
     }
 
     @Test
     public void
     moPubNativeNetworkListener_onNativeFail_maxRetryTime_shouldResetInflight_shouldResetRetryTime_shouldNotPostDelayedRunnable() {
         subject.mRequestInFlight = true;
-        subject.mRetryTimeMilliseconds = maxRetryTime;
+        subject.mCurrentRetries = maxRetries;
 
         subject.getMoPubNativeNetworkListener().onNativeFail(NativeErrorCode.UNSPECIFIED);
 
         assertThat(subject.mRequestInFlight).isEqualTo(false);
         assertThat(subject.mRetryInFlight).isEqualTo(false);
-        assertThat(subject.mRetryTimeMilliseconds).isEqualTo(defaultRetryTime);
+        assertThat(subject.getRetryTime()).isEqualTo(defaultRetryTime);
         verify(mockReplenishCacheHandler, never()).postDelayed(any(Runnable.class), anyLong());
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdTest.java
new file mode 100644
index 00000000..bb12a011
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdTest.java
@@ -0,0 +1,204 @@
+package com.mopub.nativeads;
+
+import android.app.Activity;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
+import com.mopub.nativeads.BaseNativeAd.NativeEventListener;
+import com.mopub.network.MoPubRequestQueue;
+import com.mopub.network.Networking;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import java.util.HashSet;
+import java.util.Set;
+
+import static com.mopub.common.VolleyRequestMatcher.isUrl;
+import static com.mopub.nativeads.NativeAd.MoPubNativeEventListener;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.argThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyZeroInteractions;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class NativeAdTest {
+
+    private NativeAd subject;
+    private Activity activity;
+
+    @Mock private View mockView;
+    @Mock private ViewGroup mockParent;
+    @Mock private MoPubStaticNativeAdRenderer mockRenderer;
+    @Mock private MoPubRequestQueue mockRequestQueue;
+    @Mock private MoPubNativeEventListener mockEventListener;
+    @Mock private BaseNativeAd mockBaseNativeAd;
+
+    @Before
+    public void setUp() {
+        activity = Robolectric.buildActivity(Activity.class).create().get();
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+
+        Set<String> impUrls = new HashSet<String>();
+        impUrls.add("impUrl");
+        when(mockBaseNativeAd.getImpressionTrackers()).thenReturn(impUrls);
+
+        Set<String> clkUrls = new HashSet<String>();
+        clkUrls.add("clkUrl");
+        when(mockBaseNativeAd.getClickTrackers()).thenReturn(clkUrls);
+
+        subject = new NativeAd(activity,
+                "moPubImpressionTrackerUrl",
+                "moPubClickTrackerUrl",
+                "adunit_id",
+                mockBaseNativeAd,
+                mockRenderer
+        );
+        subject.setMoPubNativeEventListener(mockEventListener);
+    }
+
+    @Test
+    public void constructor_shouldSetNativeEventListener() {
+        reset(mockBaseNativeAd);
+        subject = new NativeAd(activity, "moPubImpressionTrackerUrl", "moPubClickTrackerUrl",
+                "adunit_id", mockBaseNativeAd, mockRenderer);
+        verify(mockBaseNativeAd).setNativeEventListener(any(NativeEventListener.class));
+    }
+
+    @Test
+    public void constructor_shouldMergeMoPubClickTrackerWithBaseNativeAdClickTrackers() {
+        reset(mockRequestQueue);
+        subject = new NativeAd(activity, "", "moPubClickTrackerUrl", "", mockBaseNativeAd,
+                mockRenderer);
+
+        subject.handleClick(null);
+
+        verify(mockRequestQueue).add(argThat(isUrl("moPubClickTrackerUrl")));
+        verify(mockRequestQueue).add(argThat(isUrl("clkUrl")));
+    }
+
+    @Test
+    public void getAdUnitId_shouldReturnAdUnitId() {
+        assertThat(subject.getAdUnitId()).isEqualTo("adunit_id");
+    }
+
+    @Test
+    public void isDestroyed_withNativeAdDestroyed_shouldReturnTrue() {
+        assertThat(subject.isDestroyed()).isFalse();
+
+        subject.destroy();
+
+        assertThat(subject.isDestroyed()).isTrue();
+    }
+
+    @Test
+    public void createAdView_shouldCallCreateAdViewOnRenderer() {
+        View newView = mock(View.class);
+        when(mockRenderer.createAdView(activity, mockParent))
+                .thenReturn(newView);
+
+        View view = subject.createAdView(activity, mockParent);
+
+        verify(mockRenderer).createAdView(activity, mockParent);
+        assertThat(view).isEqualTo(newView);
+    }
+
+    @Test
+    public void renderAdView_shouldCallRenderAdViewOnRenderer() {
+        subject.createAdView(activity, mockParent);
+
+        verify(mockRenderer).createAdView(activity, mockParent);
+    }
+
+    @Test
+    public void prepare_shouldCallPrepareOnBaseNativeAd() {
+        subject.prepare(mockView);
+
+        verify(mockBaseNativeAd).prepare(mockView);
+    }
+
+    @Test
+    public void prepare_whenDestroyed_shouldReturnFast() {
+        subject.destroy();
+        subject.prepare(mockView);
+
+        verify(mockBaseNativeAd, never()).prepare(mockView);
+    }
+
+    @Test
+    public void clear_shouldCallClearOnBaseNativeAd() {
+        subject.clear(mockView);
+        verify(mockBaseNativeAd).clear(mockView);
+    }
+
+    @Test
+    public void destroy_shouldCallIntoBaseNativeAdOnce() {
+        subject.destroy();
+        verify(mockBaseNativeAd).destroy();
+
+        reset(mockBaseNativeAd);
+
+        subject.destroy();
+        verifyZeroInteractions(mockBaseNativeAd);
+    }
+
+    @Test
+    public void recordImpression_shouldRecordImpressionsOnce() {
+        subject.recordImpression(mockView);
+        verify(mockRequestQueue).add(argThat(isUrl("moPubImpressionTrackerUrl")));
+        verify(mockRequestQueue).add(argThat(isUrl("impUrl")));
+        verify(mockEventListener).onImpression(mockView);
+
+        // reset state
+        reset(mockRequestQueue);
+
+        // verify impression tracking doesn't fire again
+        subject.recordImpression(mockView);
+        verifyZeroInteractions(mockRequestQueue);
+        verifyZeroInteractions(mockEventListener);
+    }
+
+    @Test
+    public void recordImpression_whenDestroyed_shouldReturnFast() {
+        subject.destroy();
+        subject.recordImpression(mockView);
+        verifyZeroInteractions(mockRequestQueue);
+        verifyZeroInteractions(mockEventListener);
+    }
+
+    @Test
+    public void handleClick_shouldTrackClicksOnce() {
+        subject.handleClick(mockView);
+        verify(mockRequestQueue).add(argThat(isUrl("moPubClickTrackerUrl")));
+        verify(mockRequestQueue).add(argThat(isUrl("clkUrl")));
+        verify(mockEventListener).onClick(mockView);
+
+        // reset state
+        reset(mockRequestQueue);
+
+        // verify click tracking doesn't fire again
+        subject.handleClick(mockView);
+        verifyZeroInteractions(mockRequestQueue);
+        verifyZeroInteractions(mockEventListener);
+    }
+
+    @Test
+    public void handleClick_whenDestroyed_shouldReturnFast() {
+        subject.destroy();
+        subject.handleClick(mockView);
+        verifyZeroInteractions(mockRequestQueue);
+        verifyZeroInteractions(mockEventListener);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
index 2443a4d4..62b74958 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
@@ -3,139 +3,85 @@
 import android.app.Activity;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.Button;
-import android.widget.LinearLayout;
-import android.widget.RelativeLayout;
-import android.widget.TextView;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.Utils;
+import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class NativeAdViewHelperTest {
-    private Activity context;
-    private RelativeLayout relativeLayout;
-    private ViewGroup viewGroup;
-    private BaseForwardingNativeAd mNativeAd;
-    private ViewBinder viewBinder;
-    private TextView titleView;
-    private TextView textView;
-    private TextView callToActionView;
-
-    @Mock private NativeResponse mockNativeResponse1;
-    @Mock private NativeResponse mockNativeResponse2;
-    @Mock private ImpressionTracker mockImpressionTracker;
+    private Activity activity;
+    @Mock private View mockView;
+    @Mock private ViewGroup mockViewGroup;
+    @Mock private ViewBinder mockViewBinder;
+    @Mock private NativeAd mMockNativeAd1;
+    @Mock private NativeAd mMockNativeAd2;
 
     @Before
     public void setUp() throws Exception {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        relativeLayout = new RelativeLayout(context);
-        relativeLayout.setId((int) Utils.generateUniqueId());
-        viewGroup = new LinearLayout(context);
-
-        mNativeAd = new BaseForwardingNativeAd() {};
-        mNativeAd.setTitle("test title");
-        mNativeAd.setText("test text");
-        mNativeAd.setCallToAction("test call to action");
-
-        titleView = new TextView(context);
-        titleView.setId((int) Utils.generateUniqueId());
-        textView = new TextView(context);
-        textView.setId((int) Utils.generateUniqueId());
-        callToActionView = new Button(context);
-        callToActionView.setId((int) Utils.generateUniqueId());
-
-        relativeLayout.addView(titleView);
-        relativeLayout.addView(textView);
-        relativeLayout.addView(callToActionView);
-        relativeLayout.setTag(NativeAdViewHelper.ViewType.AD);
-
-        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
-                .titleId(titleView.getId())
-                .textId(textView.getId())
-                .callToActionId(callToActionView.getId())
-                .build();
-
-        when(mockNativeResponse1.isDestroyed()).thenReturn(false);
-        when(mockNativeResponse2.isDestroyed()).thenReturn(false);
+        activity = Robolectric.buildActivity(Activity.class).create().get();
+        when(mMockNativeAd1.createAdView(any(Activity.class), any(ViewGroup.class)))
+                .thenReturn(mockView);
+        when(mMockNativeAd2.createAdView(any(Activity.class), any(ViewGroup.class)))
+                .thenReturn(mockView);
+        when(mMockNativeAd1.isDestroyed()).thenReturn(false);
+        when(mMockNativeAd2.isDestroyed()).thenReturn(false);
     }
 
     @Test
-    public void getAdView_shouldReturnPopulatedView() throws Exception {
-        when(mockNativeResponse1.getTitle()).thenReturn("test title");
-        when(mockNativeResponse1.getText()).thenReturn("test text");
-        when(mockNativeResponse1.getCallToAction()).thenReturn("test call to action");
+    public void getAdView_shouldRenderView() throws Exception {
+        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1,
+                mockViewBinder);
 
-        View view = NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse1, viewBinder);
-
-        assertThat(((TextView)view.findViewById(titleView.getId())).getText()).isEqualTo("test title");
-        assertThat(((TextView)view.findViewById(textView.getId())).getText()).isEqualTo("test text");
-        assertThat(((TextView)view.findViewById(callToActionView.getId())).getText()).isEqualTo("test call to action");
-        assertThat(view.getTag()).isEqualTo(NativeAdViewHelper.ViewType.AD);
-
-        // not testing images due to testing complexity
+        verify(mMockNativeAd1).createAdView(activity, mockViewGroup);
+        verify(mMockNativeAd1).renderAdView(mockView);
     }
 
     @Test
-    public void getAdView_withDestroyedNativeResponse_shouldReturnEmptyAndGoneConvertView() throws Exception {
-        when(mockNativeResponse1.isDestroyed()).thenReturn(true);
-        View view = NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse1, viewBinder);
+    public void getAdView_withDestroyedNativeAd_shouldReturnEmptyAndGoneConvertView() throws Exception {
+        when(mMockNativeAd1.isDestroyed()).thenReturn(true);
+
+        View view = NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1,
+                mockViewBinder);
 
-        assertThat(view).isNotEqualTo(relativeLayout);
+        assertThat(view).isNotEqualTo(mockView);
         assertThat(view.getTag()).isEqualTo(NativeAdViewHelper.ViewType.EMPTY);
         assertThat(view.getVisibility()).isEqualTo(View.GONE);
     }
 
     @Test
-    public void getAdView_shouldRemoveViewFromImpressionTracker_shouldClearPreviousNativeResponse() throws Exception {
-        NativeAdViewHelper.sImpressionTrackerMap.put(context, mockImpressionTracker);
-
-        NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse1, viewBinder);
-        verify(mockImpressionTracker).removeView(relativeLayout);
-
-        // Second call should clear the first NativeResponse
-        NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse2, viewBinder);
-        verify(mockImpressionTracker, times(2)).removeView(relativeLayout);
-        verify(mockNativeResponse1).clear(relativeLayout);
-
-        // Third call should clear the second NativeResponse
-        NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse1, viewBinder);
-        verify(mockImpressionTracker, times(3)).removeView(relativeLayout);
-        verify(mockNativeResponse2).clear(relativeLayout);
-    }
-
-    @Test
-    public void getAdView_withNetworkImpressionTracker_shouldNotAddViewToImpressionTracker_shouldPrepareNativeResponse() throws Exception {
-        NativeAdViewHelper.sImpressionTrackerMap.put(context, mockImpressionTracker);
-        when(mockNativeResponse1.isOverridingImpressionTracker()).thenReturn(true);
-
-        NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse1, viewBinder);
-
-        verify(mockImpressionTracker, never()).addView(any(View.class), any(NativeResponse.class));
-        verify(mockNativeResponse1).prepare(relativeLayout);
+    public void getAdView_shouldClearPreviousNativeAd() throws Exception {
+        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1,
+                mockViewBinder);
+
+        // Second call should clear the first NativeAd
+        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd2,
+                mockViewBinder);
+        verify(mMockNativeAd1).clear(mockView);
+
+        // Third call should clear the second NativeAd
+        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1,
+                mockViewBinder);
+        verify(mMockNativeAd2).clear(mockView);
     }
 
     @Test
-    public void getAdView_withoutNetworkImpressionTracker_shouldAddViewToImpressionTracker_shouldPrepareNativeResponse() throws Exception {
-        NativeAdViewHelper.sImpressionTrackerMap.put(context, mockImpressionTracker);
-        when(mockNativeResponse1.isOverridingImpressionTracker()).thenReturn(false);
-
-        NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse1, viewBinder);
+    public void getAdView_shouldPrepareNativeAd() throws Exception {
+        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1,
+                mockViewBinder);
 
-        verify(mockImpressionTracker).addView(relativeLayout, mockNativeResponse1);
-        verify(mockNativeResponse1).prepare(relativeLayout);
+        verify(mMockNativeAd1).prepare(mockView);
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeClickHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeClickHandlerTest.java
new file mode 100644
index 00000000..b1574b84
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeClickHandlerTest.java
@@ -0,0 +1,139 @@
+package com.mopub.nativeads;
+
+import android.annotation.TargetApi;
+import android.app.Activity;
+import android.os.Build;
+import android.view.View;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.Utils;
+import com.mopub.mobileads.BuildConfig;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowApplication;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class NativeClickHandlerTest {
+
+    private NativeClickHandler subject;
+    private Activity context;
+
+    private TextView titleView;
+    private RelativeLayout relativeLayout;
+    private RelativeLayout relativeLayout2;
+
+    @Mock private View mockView;
+    @Mock private ClickInterface mockClickInterface;
+    @Mock private SpinningProgressView mockSpinningProgressView;
+
+    @Before
+    public void setUp() {
+        context = Robolectric.buildActivity(Activity.class).create().get();
+        subject = new NativeClickHandler(context);
+
+        titleView = new TextView(context);
+        titleView.setId((int) Utils.generateUniqueId());
+
+        relativeLayout = new RelativeLayout(context);
+        relativeLayout.setId((int) Utils.generateUniqueId());
+        relativeLayout.addView(titleView);
+
+        relativeLayout2 = new RelativeLayout(context);
+        relativeLayout2.setId((int) Utils.generateUniqueId());
+        relativeLayout2.addView(relativeLayout);
+    }
+
+    @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
+    @Test
+    public void setOnClickListener_shouldSetClickListenerOnViewHierarchy() {
+        subject.setOnClickListener(relativeLayout2, mockClickInterface);
+
+        titleView.callOnClick();
+        relativeLayout.callOnClick();
+        relativeLayout2.callOnClick();
+
+        verify(mockClickInterface).handleClick(titleView);
+        verify(mockClickInterface).handleClick(relativeLayout);
+        verify(mockClickInterface).handleClick(relativeLayout2);
+    }
+
+    @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
+    @Test
+    public void clearOnClickListener_shouldClearClickListenerFromViewHierarchy() throws Exception {
+        subject.setOnClickListener(relativeLayout2, mockClickInterface);
+        subject.clearOnClickListener(relativeLayout2);
+
+        assertThat(titleView.hasOnClickListeners()).isFalse();
+        assertThat(relativeLayout.hasOnClickListeners()).isFalse();
+        assertThat(relativeLayout2.hasOnClickListeners()).isFalse();
+    }
+
+    @Test
+    public void handleClick_shouldShowSpinner_shouldRemoveSpinner_WhenSucceeded() {
+        Robolectric.getBackgroundThreadScheduler().pause();
+
+        subject.openClickDestinationUrl("https://www.mopub.com", mockView, mockSpinningProgressView);
+
+        verify(mockSpinningProgressView).addToRoot(mockView);
+
+        Robolectric.getBackgroundThreadScheduler().unPause();
+        verify(mockSpinningProgressView).removeFromRoot();
+    }
+
+    @Test
+    public void handleClick_shouldShowSpinner_shouldRemoveSpinner_WhenFailed() {
+        Robolectric.getBackgroundThreadScheduler().pause();
+
+        subject.openClickDestinationUrl("", mockView, mockSpinningProgressView);
+
+        verify(mockSpinningProgressView).addToRoot(mockView);
+        Robolectric.getBackgroundThreadScheduler().unPause();
+        verify(mockSpinningProgressView).removeFromRoot();
+    }
+
+    @Test
+    public void handleClick_shouldShowSpinnerOnceWhileClickIsResolving() {
+        Robolectric.getBackgroundThreadScheduler().pause();
+
+        subject.openClickDestinationUrl("https://www.mopub.com", mockView, mockSpinningProgressView);
+        subject.openClickDestinationUrl("https://www.mopub.com", mockView, mockSpinningProgressView);
+
+        // only is called once
+        verify(mockSpinningProgressView).addToRoot(mockView);
+
+        Robolectric.getBackgroundThreadScheduler().unPause();
+        verify(mockSpinningProgressView).removeFromRoot();
+    }
+
+    @Test
+    public void handleClick_withNullClickDestinationUrl_shouldNotThrowNPE_shouldDoNothing() throws Exception {
+        subject.openClickDestinationUrl(null, mockView, mockSpinningProgressView);
+
+        verifyNoMoreInteractions(mockSpinningProgressView);
+        assertThat(ShadowApplication.getInstance().peekNextStartedActivity()).isNull();
+    }
+
+    @Test
+    public void handleClick_withNullView_shouldNotShowSpinner() {
+        Robolectric.getBackgroundThreadScheduler().pause();
+
+        subject.openClickDestinationUrl("https://www.mopub.com", null, mockSpinningProgressView);
+
+        verify(mockSpinningProgressView, never()).addToRoot(mockView);
+        Robolectric.getBackgroundThreadScheduler().unPause();
+        verify(mockSpinningProgressView, never()).removeFromRoot();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeFullScreenVideoViewTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeFullScreenVideoViewTest.java
new file mode 100644
index 00000000..bb40db82
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeFullScreenVideoViewTest.java
@@ -0,0 +1,503 @@
+package com.mopub.nativeads;
+
+import android.annotation.TargetApi;
+import android.app.Activity;
+import android.content.Context;
+import android.content.res.Configuration;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.RectF;
+import android.graphics.SurfaceTexture;
+import android.graphics.drawable.GradientDrawable;
+import android.os.Build;
+import android.view.TextureView;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.ProgressBar;
+import android.widget.RelativeLayout;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.Dips;
+import com.mopub.common.util.Drawables;
+import com.mopub.mobileads.BuildConfig;
+import com.mopub.mobileads.VastVideoProgressBarWidget;
+import com.mopub.mobileads.resource.CloseButtonDrawable;
+import com.mopub.mobileads.resource.CtaButtonDrawable;
+import com.mopub.nativeads.NativeFullScreenVideoView.LoadingBackground;
+import com.mopub.nativeads.NativeFullScreenVideoView.Mode;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.Shadows;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowConfiguration;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyInt;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
+@TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class NativeFullScreenVideoViewTest {
+
+    private NativeFullScreenVideoView subject;
+    private Context context;
+
+    private final int screenWidthDp = 410;
+    private final int screenHeightDp = 730;
+    private int videoWidthLandscapePx;
+    private int videoHeightLandscapePx;
+    private int videoWidthPortraitPx;
+    private int videoHeightPortraitPx;
+
+    private TextureView spyVideoTexture;
+    private ImageView spyCachedImage;
+    private ProgressBar spyLoadingSpinner;
+    private ImageView spyBottomGradient;
+    private ImageView spyTopGradient;
+    private VastVideoProgressBarWidget spyVideoProgress;
+    private View spyOverlay;
+    private ImageView spyPlayButton;
+    private ImageView spyPrivacyInformationIcon;
+    private ImageView spyCtaButton;
+    private ImageView spyCloseControl;
+
+    @Mock TextureView.SurfaceTextureListener mockSurfaceTextureListener;
+    @Mock SurfaceTexture mockSurfaceTexture;
+    @Mock RectF mockRectF;
+    @Mock Paint mockPaint;
+    private ShadowConfiguration shadowConfiguration;
+
+    @Before
+    public void setUp() {
+        context = Robolectric.buildActivity(Activity.class).create().get();
+
+        shadowConfiguration = Shadows.shadowOf(context.getResources().getConfiguration());
+        Configuration configuration = new Configuration();
+        configuration.screenWidthDp = screenWidthDp;
+        configuration.screenHeightDp = screenHeightDp;
+        shadowConfiguration.setTo(configuration);
+
+        videoWidthLandscapePx = Dips.dipsToIntPixels((float) screenWidthDp, context);
+        videoHeightLandscapePx = Dips.dipsToIntPixels((float) screenWidthDp * 9 / 16, context);
+        videoWidthPortraitPx = Dips.dipsToIntPixels((float) screenHeightDp, context);
+        videoHeightPortraitPx = Dips.dipsToIntPixels((float) screenHeightDp * 9 / 16, context);
+
+        spyCachedImage = spy(new ImageView(context));
+        spyVideoTexture = spy(new TextureView(context));
+        spyLoadingSpinner = spy(new ProgressBar(context));
+        spyBottomGradient = spy(new ImageView(context));
+        spyTopGradient = spy(new ImageView(context));
+        spyVideoProgress = spy(new VastVideoProgressBarWidget(context));
+        spyOverlay = spy(new View(context));
+        spyPlayButton = spy(new ImageView(context));
+        spyPrivacyInformationIcon = spy(new ImageView(context));
+        spyCtaButton = spy(new ImageView(context));
+        spyCloseControl = spy(new ImageView(context));
+
+        subject = new NativeFullScreenVideoView(context, Configuration.ORIENTATION_LANDSCAPE, "Learn More",
+                spyCachedImage,
+                spyVideoTexture, spyLoadingSpinner, spyBottomGradient, spyTopGradient,
+                spyVideoProgress, spyOverlay, spyPlayButton, spyPrivacyInformationIcon, spyCtaButton,
+                spyCloseControl);
+
+    }
+
+    @Test
+    public void constructor_shouldInitializeModeToLoading() throws Exception {
+        assertThat(subject.mMode).isEqualTo(Mode.LOADING);
+    }
+
+    @Test
+    public void constructor_shouldSetMeasurementsCorrectly() throws Exception {
+        assertThat(subject.mCtaWidthPx).isEqualTo(200);
+        assertThat(subject.mCtaHeightPx).isEqualTo(42);
+        assertThat(subject.mCtaMarginPx).isEqualTo(10);
+        assertThat(subject.mCloseControlSizePx).isEqualTo(50);
+        assertThat(subject.mClosePaddingPx).isEqualTo(8);
+        assertThat(subject.mPrivacyInformationIconSizePx).isEqualTo(44);
+        assertThat(subject.mPlayControlSizePx).isEqualTo(50);
+        assertThat(subject.mGradientStripHeightPx).isEqualTo(45);
+    }
+
+    @Test
+    public void constructor_shouldAddVideoTextureToLayout_shouldSetWidthAndHeight() throws Exception {
+        assertThat(subject.findViewById(spyVideoTexture.getId())).isEqualTo(spyVideoTexture);
+
+        RelativeLayout.LayoutParams layoutParams =
+                (RelativeLayout.LayoutParams) spyVideoTexture.getLayoutParams();
+        assertThat(layoutParams.width).isEqualTo(videoWidthLandscapePx);
+        assertThat(layoutParams.height).isEqualTo(videoHeightLandscapePx);
+        assertThat(layoutParams.getRules()[RelativeLayout.CENTER_IN_PARENT])
+                .isEqualTo(RelativeLayout.TRUE);
+    }
+
+    @Test
+    public void constructor_shouldAddLoadingSpinnerToLayout() throws Exception {
+        assertThat(subject.findViewById(spyLoadingSpinner.getId())).isEqualTo(spyLoadingSpinner);
+        assertThat(spyLoadingSpinner.isIndeterminate()).isTrue();
+        assertThat(spyLoadingSpinner.getParent()).isEqualTo(subject);
+
+        RelativeLayout.LayoutParams layoutParams =
+                (RelativeLayout.LayoutParams) spyLoadingSpinner.getLayoutParams();
+        assertThat(layoutParams.width).isEqualTo(subject.mPlayControlSizePx);
+        assertThat(layoutParams.height).isEqualTo(subject.mPlayControlSizePx);
+        assertThat(layoutParams.getRules()[RelativeLayout.CENTER_IN_PARENT])
+                .isEqualTo(RelativeLayout.TRUE);
+    }
+
+    @Test
+    public void constructor_shouldAddBottomGradientToLayout() throws Exception {
+        assertThat(subject.findViewById(spyBottomGradient.getId())).isEqualTo(spyBottomGradient);
+        GradientDrawable gradientDrawable = (GradientDrawable) spyBottomGradient.getDrawable();
+        assertThat(gradientDrawable.getOrientation())
+                .isEqualTo(GradientDrawable.Orientation.BOTTOM_TOP);
+        assertThat(spyBottomGradient.getParent()).isEqualTo(subject);
+
+        RelativeLayout.LayoutParams layoutParams =
+                (RelativeLayout.LayoutParams) spyBottomGradient.getLayoutParams();
+        assertThat(layoutParams.width).isEqualTo(RelativeLayout.LayoutParams.MATCH_PARENT);
+        assertThat(layoutParams.height).isEqualTo(subject.mGradientStripHeightPx);
+        assertThat(layoutParams.getRules()[RelativeLayout.ALIGN_BOTTOM])
+                .isEqualTo(spyVideoTexture.getId());
+    }
+
+    @Test
+    public void constructor_shouldAddTopGradientToLayout() throws Exception {
+        assertThat(subject.findViewById(spyTopGradient.getId())).isEqualTo(spyTopGradient);
+        GradientDrawable gradientDrawable = (GradientDrawable) spyTopGradient.getDrawable();
+        assertThat(gradientDrawable.getOrientation())
+                .isEqualTo(GradientDrawable.Orientation.TOP_BOTTOM);
+        assertThat(spyTopGradient.getParent()).isEqualTo(subject);
+
+        RelativeLayout.LayoutParams layoutParams =
+                (RelativeLayout.LayoutParams) spyTopGradient.getLayoutParams();
+        assertThat(layoutParams.width).isEqualTo(RelativeLayout.LayoutParams.MATCH_PARENT);
+        assertThat(layoutParams.height).isEqualTo(subject.mGradientStripHeightPx);
+        assertThat(layoutParams.getRules()[RelativeLayout.ALIGN_PARENT_TOP])
+                .isEqualTo(RelativeLayout.TRUE);
+    }
+
+    @Test
+    public void constructor_shouldAddVideoProgressToLayout() throws Exception {
+        assertThat(subject.findViewById(spyVideoProgress.getId())).isEqualTo(spyVideoProgress);
+        verify(spyVideoProgress).setAnchorId(spyVideoTexture.getId());
+        verify(spyVideoProgress).calibrateAndMakeVisible(1000, 0);
+    }
+
+    @Test
+    public void constructor_shouldAddOverlayToLayout() throws Exception {
+        assertThat(subject.findViewById(spyOverlay.getId())).isEqualTo(spyOverlay);
+        verify(spyOverlay).setBackgroundColor(0x88000000);
+
+        RelativeLayout.LayoutParams layoutParams =
+                (RelativeLayout.LayoutParams) spyOverlay.getLayoutParams();
+        assertThat(layoutParams.width).isEqualTo(RelativeLayout.LayoutParams.MATCH_PARENT);
+        assertThat(layoutParams.height).isEqualTo(RelativeLayout.LayoutParams.MATCH_PARENT);
+        assertThat(layoutParams.getRules()[RelativeLayout.CENTER_IN_PARENT])
+                .isEqualTo(RelativeLayout.TRUE);
+    }
+
+    @Test
+    public void constructor_shouldAddPlayButtonToLayout() throws Exception {
+        assertThat(subject.findViewById(spyOverlay.getId())).isEqualTo(spyOverlay);
+        verify(spyOverlay).setBackgroundColor(0x88000000);
+
+        RelativeLayout.LayoutParams layoutParams =
+                (RelativeLayout.LayoutParams) spyOverlay.getLayoutParams();
+        assertThat(layoutParams.width).isEqualTo(RelativeLayout.LayoutParams.MATCH_PARENT);
+        assertThat(layoutParams.height).isEqualTo(RelativeLayout.LayoutParams.MATCH_PARENT);
+        assertThat(layoutParams.getRules()[RelativeLayout.CENTER_IN_PARENT])
+                .isEqualTo(RelativeLayout.TRUE);
+    }
+
+    @Test
+    public void constructor_shouldAddPrivacyInformationIconToLayout() throws Exception {
+        assertThat(subject.findViewById(spyPrivacyInformationIcon.getId())).isEqualTo(
+                spyPrivacyInformationIcon);
+        verify(spyPrivacyInformationIcon).setImageDrawable(
+                Drawables.NATIVE_PRIVACY_INFORMATION_ICON.createDrawable(context));
+        assertThat(spyPrivacyInformationIcon.getPaddingLeft()).isEqualTo(subject.mClosePaddingPx);
+        assertThat(spyPrivacyInformationIcon.getPaddingTop()).isEqualTo(subject.mClosePaddingPx);
+        assertThat(spyPrivacyInformationIcon.getPaddingRight()).isEqualTo(
+                subject.mClosePaddingPx * 2);
+        assertThat(spyPrivacyInformationIcon.getPaddingBottom()).isEqualTo(
+                subject.mClosePaddingPx * 2);
+
+        RelativeLayout.LayoutParams layoutParams =
+                (RelativeLayout.LayoutParams) spyPrivacyInformationIcon.getLayoutParams();
+        assertThat(layoutParams.width).isEqualTo(subject.mPrivacyInformationIconSizePx);
+        assertThat(layoutParams.height).isEqualTo(subject.mPrivacyInformationIconSizePx);
+        assertThat(layoutParams.getRules()[RelativeLayout.ALIGN_TOP])
+                .isEqualTo(spyVideoTexture.getId());
+        assertThat(layoutParams.getRules()[RelativeLayout.ALIGN_LEFT])
+                .isEqualTo(spyVideoTexture.getId());
+    }
+
+    @Test
+    public void constructor_shouldAddCtaButtonToLayout() throws Exception {
+        assertThat(subject.findViewById(spyCtaButton.getId())).isEqualTo(spyCtaButton);
+        CtaButtonDrawable ctaButtonDrawable = (CtaButtonDrawable) spyCtaButton.getDrawable();
+        assertThat(ctaButtonDrawable.getCtaText()).isEqualTo("Learn More");
+
+        RelativeLayout.LayoutParams layoutParams =
+                (RelativeLayout.LayoutParams) spyCtaButton.getLayoutParams();
+        assertThat(layoutParams.leftMargin).isEqualTo(subject.mCtaMarginPx);
+        assertThat(layoutParams.topMargin).isEqualTo(subject.mCtaMarginPx);
+        assertThat(layoutParams.rightMargin).isEqualTo(subject.mCtaMarginPx);
+        assertThat(layoutParams.bottomMargin).isEqualTo(subject.mCtaMarginPx);
+        assertThat(layoutParams.width).isEqualTo(subject.mCtaWidthPx);
+        assertThat(layoutParams.height).isEqualTo(subject.mCtaHeightPx);
+        assertThat(layoutParams.getRules()[RelativeLayout.ABOVE])
+                .isEqualTo(spyVideoProgress.getId());
+        assertThat(layoutParams.getRules()[RelativeLayout.ALIGN_PARENT_RIGHT])
+                .isEqualTo(RelativeLayout.TRUE);
+    }
+
+    @Test
+    public void constructor_shouldAddCloseControlToLayout() throws Exception {
+        assertThat(subject.findViewById(spyCloseControl.getId())).isEqualTo(spyCloseControl);
+        verify(spyCloseControl).setImageDrawable(any(CloseButtonDrawable.class));
+        assertThat(spyCloseControl.getPaddingLeft()).isEqualTo(subject.mClosePaddingPx * 3);
+        assertThat(spyCloseControl.getPaddingTop()).isEqualTo(subject.mClosePaddingPx);
+        assertThat(spyCloseControl.getPaddingRight()).isEqualTo(subject.mClosePaddingPx);
+        assertThat(spyCloseControl.getPaddingBottom()).isEqualTo(subject.mClosePaddingPx * 3);
+
+                RelativeLayout.LayoutParams layoutParams =
+                        (RelativeLayout.LayoutParams) spyCloseControl.getLayoutParams();
+        assertThat(layoutParams.width).isEqualTo(subject.mCloseControlSizePx);
+        assertThat(layoutParams.height).isEqualTo(subject.mCloseControlSizePx);
+        assertThat(layoutParams.getRules()[RelativeLayout.ALIGN_TOP])
+                .isEqualTo(spyVideoTexture.getId());
+        assertThat(layoutParams.getRules()[RelativeLayout.ALIGN_RIGHT])
+                .isEqualTo(spyVideoTexture.getId());
+    }
+
+    @Test
+    public void resetProgress_shouldCallVideoProgressReset() throws Exception {
+        subject.resetProgress();
+        verify(spyVideoProgress).reset();
+    }
+
+    @Test
+    public void setMode_withModeLoading_shouldUpdateVisibilityAppropriately() throws Exception {
+        // We init in loading state, so we need to get out of loading.
+        subject.setMode(Mode.PAUSED);
+        // Reset our spies.
+        reset(spyVideoTexture, spyLoadingSpinner, spyBottomGradient, spyTopGradient,
+                spyVideoProgress, spyOverlay, spyPlayButton, spyPrivacyInformationIcon, spyCtaButton,
+                spyCloseControl);
+        subject.setMode(Mode.LOADING);
+        verify(spyLoadingSpinner).setVisibility(View.VISIBLE);
+        verify(spyVideoProgress).setVisibility(View.INVISIBLE);
+        verify(spyPlayButton).setVisibility(View.INVISIBLE);
+        verify(spyOverlay).setVisibility(View.INVISIBLE);
+    }
+
+    @Test
+    public void setMode_withModePlaying_shouldUpdateVisibilityAppropriately() throws Exception {
+        // Reset our spies because the constructor calls updateViewState
+        reset(spyVideoTexture, spyLoadingSpinner, spyBottomGradient, spyTopGradient,
+                spyVideoProgress, spyOverlay, spyPlayButton, spyPrivacyInformationIcon, spyCtaButton,
+                spyCloseControl);
+        subject.setMode(Mode.PLAYING);
+        verify(spyLoadingSpinner).setVisibility(View.INVISIBLE);
+        verify(spyVideoProgress).setVisibility(View.VISIBLE);
+        verify(spyPlayButton).setVisibility(View.INVISIBLE);
+        verify(spyOverlay).setVisibility(View.INVISIBLE);
+    }
+
+    @Test
+    public void setMode_withModePaused_shouldUpdateVisibilityAppropriately() throws Exception {
+        // Reset our spies because the constructor calls updateViewState
+        reset(spyVideoTexture, spyLoadingSpinner, spyBottomGradient, spyTopGradient,
+                spyVideoProgress, spyOverlay, spyPlayButton, spyPrivacyInformationIcon, spyCtaButton,
+                spyCloseControl);
+        subject.setMode(Mode.PAUSED);
+        verify(spyLoadingSpinner).setVisibility(View.INVISIBLE);
+        verify(spyVideoProgress).setVisibility(View.VISIBLE);
+        verify(spyPlayButton).setVisibility(View.VISIBLE);
+        verify(spyOverlay).setVisibility(View.VISIBLE);
+    }
+
+    @Test
+    public void setMode_withModeFinished_shouldUpdateVisibilityAppropriately() throws Exception {
+        // Reset our spies because the constructor calls updateViewState
+        reset(spyVideoTexture, spyLoadingSpinner, spyBottomGradient, spyTopGradient,
+                spyVideoProgress, spyOverlay, spyPlayButton, spyPrivacyInformationIcon, spyCtaButton,
+                spyCloseControl);
+        subject.setMode(Mode.FINISHED);
+        verify(spyLoadingSpinner).setVisibility(View.INVISIBLE);
+        verify(spyVideoProgress).setVisibility(View.INVISIBLE);
+        verify(spyPlayButton).setVisibility(View.VISIBLE);
+        verify(spyOverlay).setVisibility(View.VISIBLE);
+    }
+
+    @Test
+    public void setOrientation_withLandscape_shouldSetWidthAndHeightOfVideoTextureAppropriately() throws Exception {
+        Configuration configuration = new Configuration();
+        configuration.screenWidthDp = screenWidthDp;
+        configuration.screenHeightDp = screenHeightDp;
+        shadowConfiguration.setTo(configuration);
+
+        subject.setOrientation(Configuration.ORIENTATION_LANDSCAPE);
+
+        RelativeLayout.LayoutParams layoutParams =
+                (RelativeLayout.LayoutParams) spyVideoTexture.getLayoutParams();
+        assertThat(layoutParams.width).isEqualTo(videoWidthLandscapePx);
+        assertThat(layoutParams.height).isEqualTo(videoHeightLandscapePx);
+        assertThat(layoutParams.getRules()[RelativeLayout.CENTER_IN_PARENT])
+                .isEqualTo(RelativeLayout.TRUE);
+    }
+
+    @Test
+    public void setOrientation_withPortrait_shouldSetWidthAndHeightOfVideoTextureAppropriately() throws Exception {
+        Configuration configuration = new Configuration();
+        configuration.screenWidthDp = screenHeightDp;
+        configuration.screenHeightDp = screenWidthDp;
+        shadowConfiguration.setTo(configuration);
+
+        subject.setOrientation(Configuration.ORIENTATION_PORTRAIT);
+
+        RelativeLayout.LayoutParams layoutParams =
+                (RelativeLayout.LayoutParams) spyVideoTexture.getLayoutParams();
+        assertThat(layoutParams.width).isEqualTo(videoWidthPortraitPx);
+        assertThat(layoutParams.height).isEqualTo(videoHeightPortraitPx);
+        assertThat(layoutParams.getRules()[RelativeLayout.CENTER_IN_PARENT])
+                .isEqualTo(RelativeLayout.TRUE);
+    }
+
+    @Test
+    public void setOrientation_withLandscape_shouldSetControlLayoutsAppropriately() throws Exception {
+        subject.setOrientation(Configuration.ORIENTATION_LANDSCAPE);
+
+        RelativeLayout.LayoutParams layoutParams =
+                (RelativeLayout.LayoutParams) spyPrivacyInformationIcon.getLayoutParams();
+        assertThat(layoutParams.width).isEqualTo(subject.mPrivacyInformationIconSizePx);
+        assertThat(layoutParams.height).isEqualTo(subject.mPrivacyInformationIconSizePx);
+        assertThat(layoutParams.getRules()[RelativeLayout.ALIGN_TOP])
+                .isEqualTo(spyVideoTexture.getId());
+        assertThat(layoutParams.getRules()[RelativeLayout.ALIGN_LEFT])
+                .isEqualTo(spyVideoTexture.getId());
+
+        assertThat(subject.findViewById(spyCtaButton.getId())).isEqualTo(spyCtaButton);
+        CtaButtonDrawable ctaButtonDrawable = (CtaButtonDrawable) spyCtaButton.getDrawable();
+        assertThat(ctaButtonDrawable.getCtaText()).isEqualTo("Learn More");
+
+        layoutParams = (RelativeLayout.LayoutParams) spyCtaButton.getLayoutParams();
+        assertThat(layoutParams.leftMargin).isEqualTo(subject.mCtaMarginPx);
+        assertThat(layoutParams.topMargin).isEqualTo(subject.mCtaMarginPx);
+        assertThat(layoutParams.rightMargin).isEqualTo(subject.mCtaMarginPx);
+        assertThat(layoutParams.bottomMargin).isEqualTo(subject.mCtaMarginPx);
+        assertThat(layoutParams.width).isEqualTo(subject.mCtaWidthPx);
+        assertThat(layoutParams.height).isEqualTo(subject.mCtaHeightPx);
+        assertThat(layoutParams.getRules()[RelativeLayout.ABOVE])
+                .isEqualTo(spyVideoProgress.getId());
+        assertThat(layoutParams.getRules()[RelativeLayout.ALIGN_PARENT_RIGHT])
+                .isEqualTo(RelativeLayout.TRUE);
+
+        layoutParams = (RelativeLayout.LayoutParams) spyCloseControl.getLayoutParams();
+        assertThat(layoutParams.width).isEqualTo(subject.mCloseControlSizePx);
+        assertThat(layoutParams.height).isEqualTo(subject.mCloseControlSizePx);
+        assertThat(layoutParams.getRules()[RelativeLayout.ALIGN_TOP])
+                .isEqualTo(spyVideoTexture.getId());
+        assertThat(layoutParams.getRules()[RelativeLayout.ALIGN_RIGHT])
+                .isEqualTo(spyVideoTexture.getId());
+    }
+
+    @Test
+    public void setOrientation_withPortrait_shouldSetControlLayoutsAppropriately() throws Exception {
+        subject.setOrientation(Configuration.ORIENTATION_PORTRAIT);
+
+        RelativeLayout.LayoutParams layoutParams =
+                (RelativeLayout.LayoutParams) spyPrivacyInformationIcon.getLayoutParams();
+        assertThat(layoutParams.width).isEqualTo(subject.mPrivacyInformationIconSizePx);
+        assertThat(layoutParams.height).isEqualTo(subject.mPrivacyInformationIconSizePx);
+        assertThat(layoutParams.getRules()[RelativeLayout.ALIGN_PARENT_TOP])
+                .isEqualTo(RelativeLayout.TRUE);
+        assertThat(layoutParams.getRules()[RelativeLayout.ALIGN_PARENT_LEFT])
+                .isEqualTo(RelativeLayout.TRUE);
+
+        layoutParams = (RelativeLayout.LayoutParams) spyCtaButton.getLayoutParams();
+        assertThat(layoutParams.leftMargin).isEqualTo(subject.mCtaMarginPx);
+        assertThat(layoutParams.topMargin).isEqualTo(subject.mCtaMarginPx);
+        assertThat(layoutParams.rightMargin).isEqualTo(subject.mCtaMarginPx);
+        assertThat(layoutParams.bottomMargin).isEqualTo(subject.mCtaMarginPx);
+        assertThat(layoutParams.width).isEqualTo(subject.mCtaWidthPx);
+        assertThat(layoutParams.height).isEqualTo(subject.mCtaHeightPx);
+        assertThat(layoutParams.getRules()[RelativeLayout.BELOW])
+                .isEqualTo(spyVideoTexture.getId());
+        assertThat(layoutParams.getRules()[RelativeLayout.CENTER_HORIZONTAL])
+                .isEqualTo(RelativeLayout.TRUE);
+
+        layoutParams = (RelativeLayout.LayoutParams) spyCloseControl.getLayoutParams();
+        assertThat(layoutParams.width).isEqualTo(subject.mCloseControlSizePx);
+        assertThat(layoutParams.height).isEqualTo(subject.mCloseControlSizePx);
+        assertThat(layoutParams.getRules()[RelativeLayout.ALIGN_PARENT_TOP])
+                .isEqualTo(RelativeLayout.TRUE);
+        assertThat(layoutParams.getRules()[RelativeLayout.ALIGN_PARENT_RIGHT])
+                .isEqualTo(RelativeLayout.TRUE);
+    }
+
+    @Test
+    public void setSurfaceTextureListener_withNullSurfaceTexture_shouldSetSurfaceTexture_shouldNotCallListener() throws Exception {
+        when(spyVideoTexture.getSurfaceTexture()).thenReturn(null);
+
+        subject.setSurfaceTextureListener(mockSurfaceTextureListener);
+
+        verify(spyVideoTexture).setSurfaceTextureListener(mockSurfaceTextureListener);
+        verify(mockSurfaceTextureListener, never()).
+                onSurfaceTextureAvailable(any(SurfaceTexture.class), anyInt(), anyInt());
+    }
+
+    @Test
+    public void setSurfaceTextureListener_withNonNullSurfaceTexture_shouldSetSurfaceTexture_shouldCallListener() throws Exception {
+        when(spyVideoTexture.getSurfaceTexture()).thenReturn(mockSurfaceTexture);
+        when(spyVideoTexture.getWidth()).thenReturn(videoWidthLandscapePx);
+        when(spyVideoTexture.getHeight()).thenReturn(videoHeightLandscapePx);
+
+        subject.setSurfaceTextureListener(mockSurfaceTextureListener);
+
+        verify(spyVideoTexture).setSurfaceTextureListener(mockSurfaceTextureListener);
+        verify(mockSurfaceTextureListener).
+                onSurfaceTextureAvailable(mockSurfaceTexture, videoWidthLandscapePx,
+                        videoHeightLandscapePx);
+    }
+
+    @Test
+    public void updateProgress_shouldUpdateVideoProgress() throws Exception {
+        subject.updateProgress(100);
+        verify(spyVideoProgress).updateProgress(100);
+    }
+
+    @Test
+    public void LoadingBackground_constructor_shouldInitializePaint() throws Exception {
+        new LoadingBackground(context, mockRectF, mockPaint);
+
+        verify(mockPaint).setColor(Color.BLACK);
+        verify(mockPaint).setAlpha(128);
+        verify(mockPaint).setAntiAlias(true);
+    }
+
+    @Test
+    public void LoadingBackground_constructor_shouldInitializeMeasurements() throws Exception {
+        LoadingBackground loadingBackground = new LoadingBackground(context, mockRectF, mockPaint);
+
+        assertThat(loadingBackground.mCornerRadiusPx).isEqualTo(5);
+    }
+
+    @Test
+    public void LoadingBackground_getOpacity_shouldReturn0() throws Exception {
+        assertThat(new LoadingBackground(context, mockRectF, mockPaint).getOpacity())
+                .isEqualTo(0);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java
deleted file mode 100644
index 0bbde894..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java
+++ /dev/null
@@ -1,376 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.support.annotation.NonNull;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.Button;
-import android.widget.LinearLayout;
-import android.widget.RelativeLayout;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.Utils;
-import com.mopub.network.MoPubRequestQueue;
-import com.mopub.network.Networking;
-import com.mopub.volley.Request;
-
-import org.junit.Before;
-import org.junit.Ignore;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-
-import java.util.List;
-import java.util.Map;
-
-import static com.mopub.nativeads.MoPubNative.EMPTY_EVENT_LISTENER;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyZeroInteractions;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-public class NativeResponseTest {
-
-    private NativeResponse subject;
-    private BaseForwardingNativeAd mNativeAd;
-    private Activity context;
-    private ViewGroup view;
-    private MoPubNative.MoPubNativeListener moPubNativeListener;
-    private NativeResponse subjectWMockBaseNativeAd;
-    private NativeAdInterface mMockNativeAd;
-    private boolean baseNativeAdRecordedImpression;
-    private boolean baseNativeAdIsClicked;
-    @Mock
-    private MoPubRequestQueue mockRequestQueue;
-    private SpinningProgressView mockSpinningProgressView;
-
-
-    @Before
-    public void setUp() throws Exception {
-        setupWithClickUrl("clickDestinationUrl");
-    }
-
-    private void setupWithClickUrl(String clickUrl) {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        mNativeAd = new BaseForwardingNativeAd() {
-            @Override
-            public void recordImpression() {
-                baseNativeAdRecordedImpression = true;
-            }
-
-            @Override
-            public void handleClick(@NonNull final View view) {
-                baseNativeAdIsClicked = true;
-            }
-        };
-        mNativeAd.setTitle("title");
-        mNativeAd.setText("text");
-        mNativeAd.setMainImageUrl("mainImageUrl");
-        mNativeAd.setIconImageUrl("iconImageUrl");
-        mNativeAd.setClickDestinationUrl(clickUrl);
-        mNativeAd.setCallToAction("callToAction");
-        mNativeAd.addExtra("extra", "extraValue");
-        mNativeAd.addExtra("extraImage", "extraImageUrl");
-        mNativeAd.addImpressionTracker("impressionUrl");
-        mNativeAd.setImpressionMinTimeViewed(500);
-
-        view = new LinearLayout(context);
-
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-
-        moPubNativeListener = mock(MoPubNative.MoPubNativeListener.class);
-
-        subject = new NativeResponse(context,
-                "moPubImpressionTrackerUrl",
-                "moPubClickTrackerUrl",
-                "adunit_id", mNativeAd, moPubNativeListener);
-
-        mMockNativeAd = mock(NativeAdInterface.class);
-        subjectWMockBaseNativeAd = new NativeResponse(context,
-                "moPubImpressionTrackerUrl",
-                "moPubClickTrackerUrl",
-                "adunit_id", mMockNativeAd, moPubNativeListener);
-
-        mockSpinningProgressView = mock(SpinningProgressView.class);
-    }
-
-    @Test
-    public void constructor_shouldSetNativeEventListenerOnNativeAdInterface() {
-        reset(mMockNativeAd);
-        subject = new NativeResponse(context, "moPubImpressionTrackerUrl", "moPubClickTrackerUrl",
-                "adunit_id", mMockNativeAd, moPubNativeListener);
-        verify(mMockNativeAd).setNativeEventListener(any(BaseForwardingNativeAd.NativeEventListener.class));
-    }
-
-    @Test
-    public void getTitle_shouldReturnTitleFromBaseNativeAd() {
-        assertThat(subject.getTitle()).isEqualTo("title");
-    }
-
-    @Test
-    public void getTitle_shouldReturnTextFromBaseNativeAd() {
-        assertThat(subject.getText()).isEqualTo("text");
-    }
-
-    @Test
-    public void getMainImageUrl_shouldReturnMainImageUrlFromBaseNativeAd() {
-        assertThat(subject.getMainImageUrl()).isEqualTo("mainImageUrl");
-    }
-
-    @Test
-    public void getIconImageUrl_shouldReturnIconImageUrlFromBaseNativeAd() {
-        assertThat(subject.getIconImageUrl()).isEqualTo("iconImageUrl");
-    }
-
-    @Test
-    public void getClickDestinationUrl_shouldReturnClickDestinationUrlFromBaseNativeAd() {
-        assertThat(subject.getClickDestinationUrl()).isEqualTo("clickDestinationUrl");
-    }
-
-    @Test
-    public void getCallToAction_shouldReturnCallToActionFromBaseNativeAd() {
-        assertThat(subject.getCallToAction()).isEqualTo("callToAction");
-    }
-
-    @Test
-    public void getExtra_shouldReturnExtraFromBaseNativeAd() {
-        assertThat(subject.getExtra("extra")).isEqualTo("extraValue");
-    }
-
-    @Test
-    public void getExtras_shouldReturnCopyOfExtrasMapFromBaseNativeAd() {
-        final Map<String, Object> extras = subject.getExtras();
-        assertThat(extras.size()).isEqualTo(2);
-        assertThat(extras.get("extra")).isEqualTo("extraValue");
-        assertThat(extras.get("extraImage")).isEqualTo("extraImageUrl");
-        assertThat(extras).isNotSameAs(mNativeAd.getExtras());
-    }
-
-    @Test
-    public void getImpressionTrackers_shouldReturnImpressionTrackersFromMoPubAndFromBaseNativeAd() {
-        final List<String> impressionTrackers = subject.getImpressionTrackers();
-        assertThat(impressionTrackers).containsOnly("moPubImpressionTrackerUrl", "impressionUrl");
-    }
-
-    @Test
-    public void getImpressionMinTimeViewed_shouldReturnImpressionMinTimeViewedFromBaseNativeAd() {
-        assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(500);
-    }
-
-    @Test
-    public void getImpressionMinPercentageViewed_shouldReturnImpressionMinPercentageViewedFromBaseNativeAd() {
-        assertThat(subject.getImpressionMinPercentageViewed()).isEqualTo(50);
-    }
-
-    @Test
-    public void getClickTracker_shouldReturnMoPubClickTracker() {
-        assertThat(subject.getClickTracker()).isEqualTo("moPubClickTrackerUrl");
-    }
-
-    @Test
-    public void prepare_shouldCallPrepareOnBaseNativeAd() {
-        subjectWMockBaseNativeAd.prepare(view);
-        verify(mMockNativeAd).prepare(view);
-    }
-
-    @Test
-    public void prepare_whenDestroyed_shouldReturnFast() {
-        subjectWMockBaseNativeAd.destroy();
-        subjectWMockBaseNativeAd.prepare(view);
-        verify(mMockNativeAd, never()).prepare(view);
-    }
-    
-    @Test
-    public void prepare_withOverridingeClickTracker_shouldNotSetOnClickListener() throws Exception {
-        when(mMockNativeAd.isOverridingClickTracker()).thenReturn(true);
-        View view = mock(View.class);
-        subjectWMockBaseNativeAd.prepare(view);
-        verify(view, never()).setOnClickListener(any(NativeResponse.NativeViewClickListener.class));
-    }
-
-    @Test
-    public void prepare_withoutOverridingClickTracker_shouldSetOnClickListener() throws Exception {
-        when(mMockNativeAd.isOverridingClickTracker()).thenReturn(false);
-        View view = mock(View.class);
-        subjectWMockBaseNativeAd.prepare(view);
-        verify(view).setOnClickListener(any(NativeResponse.NativeViewClickListener.class));
-    }
-
-    @Test
-    public void prepare_shouldAttachClickListenersToViewTree() {
-        RelativeLayout relativeLayout = new RelativeLayout(context);
-        Button callToActionView = new Button(context);
-        callToActionView.setId((int) Utils.generateUniqueId());
-        relativeLayout.addView(callToActionView);
-
-        assertThat(relativeLayout.performClick()).isFalse();
-        assertThat(callToActionView.performClick()).isFalse();
-
-        subject.prepare(relativeLayout);
-
-        assertThat(relativeLayout.performClick()).isTrue();
-        assertThat(callToActionView.performClick()).isTrue();
-    }
-
-    @Test
-    public void recordImpression_shouldRecordImpressionsAndCallIntoBaseNativeAdAndNotifyListenerIdempotently() {
-        assertThat(subject.getRecordedImpression()).isFalse();
-
-        subject.recordImpression(view);
-
-        assertThat(subject.getRecordedImpression()).isTrue();
-
-        assertThat(baseNativeAdRecordedImpression).isTrue();
-        verify(moPubNativeListener).onNativeImpression(view);
-        // There are two impression trackers here.
-        verify(mockRequestQueue, times(2)).add(any(Request.class));
-
-        // reset state
-        baseNativeAdRecordedImpression = false;
-        reset(moPubNativeListener);
-        reset(mockRequestQueue);
-
-        // verify impression tracking doesn't fire again
-        subject.recordImpression(view);
-        assertThat(subject.getRecordedImpression()).isTrue();
-        assertThat(baseNativeAdRecordedImpression).isFalse();
-        verify(moPubNativeListener, never()).onNativeImpression(view);
-        verify(mockRequestQueue, never()).add(any(Request.class));
-    }
-
-    @Test
-    public void recordImpression_whenDestroyed_shouldReturnFast() {
-        subject.destroy();
-        subject.recordImpression(view);
-        assertThat(subject.getRecordedImpression()).isFalse();
-        assertThat(baseNativeAdRecordedImpression).isFalse();
-        verify(moPubNativeListener, never()).onNativeImpression(view);
-        verify(mockRequestQueue, never()).add(any(Request.class));
-    }
-
-    @Test
-    public void handleClick_withNoBaseNativeAdClickDestinationUrl_shouldRecordClickAndCallIntoBaseNativeAdAndNotifyListener() {
-        assertThat(subject.isClicked()).isFalse();
-
-        subject.handleClick(view);
-
-        assertThat(subject.isClicked()).isTrue();
-
-        assertThat(baseNativeAdIsClicked).isTrue();
-        verify(moPubNativeListener).onNativeClick(view);
-        verify(mockRequestQueue).add(any(Request.class));
-
-        // reset state
-        baseNativeAdIsClicked = false;
-        reset(moPubNativeListener);
-        reset(mockRequestQueue);
-
-        // second time, tracking does not fire
-        subject.handleClick(view);
-        assertThat(subject.isClicked()).isTrue();
-        assertThat(baseNativeAdRecordedImpression).isFalse();
-        verify(moPubNativeListener).onNativeClick(view);
-        verifyZeroInteractions(mockRequestQueue);
-    }
-
-    @Ignore("pending")
-    @Test
-    public void handleClick_withBaseNativeAdClickDestinationUrl_shouldRecordClickAndCallIntoBaseNativeAdAndOpenClickDestinationAndNotifyListener() {
-        // Really difficult to test url resolution since it doesn't use the apache http client
-    }
-
-    @Test
-    public void handleClick_shouldShowSpinner_shouldRemoveSpinner_WhenSucceeded() {
-        setupWithClickUrl("http://www.mopub.com");
-
-        Robolectric.getBackgroundScheduler().pause();
-
-        subject.handleClick(view, mockSpinningProgressView);
-
-        verify(mockSpinningProgressView).addToRoot(view);
-        Robolectric.getBackgroundScheduler().unPause();
-        verify(mockSpinningProgressView).removeFromRoot();
-    }
-
-    @Test
-    public void handleClick_shouldShowSpinner_shouldRemoveSpinner_WhenFailed() {
-        setupWithClickUrl("");
-
-        Robolectric.getBackgroundScheduler().pause();
-
-        subject.handleClick(view, mockSpinningProgressView);
-
-        verify(mockSpinningProgressView).addToRoot(view);
-        Robolectric.getBackgroundScheduler().unPause();
-        verify(mockSpinningProgressView).removeFromRoot();
-    }
-
-    @Test
-    public void handleClick_withNullView_shouldNotShowSpinner() {
-        setupWithClickUrl("http://www.mopub.com");
-
-        Robolectric.getBackgroundScheduler().pause();
-
-        subject.handleClick(null, mockSpinningProgressView);
-
-        verify(mockSpinningProgressView, never()).addToRoot(view);
-        Robolectric.getBackgroundScheduler().unPause();
-        verify(mockSpinningProgressView, never()).removeFromRoot();
-    }
-
-    @Test
-    public void handleClick_whenDestroyed_shouldReturnFast() {
-        subject.destroy();
-        subject.handleClick(view);
-        assertThat(subject.isClicked()).isFalse();
-        assertThat(baseNativeAdIsClicked).isFalse();
-        verify(moPubNativeListener, never()).onNativeClick(view);
-        verifyZeroInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void destroy_shouldCallIntoBaseNativeAd() {
-        subjectWMockBaseNativeAd.destroy();
-        assertThat(subjectWMockBaseNativeAd.isDestroyed()).isTrue();
-        verify(mMockNativeAd).destroy();
-
-        reset(mMockNativeAd);
-
-        subjectWMockBaseNativeAd.destroy();
-        verify(mMockNativeAd, never()).destroy();
-    }
-
-    @Test
-    public void destroy_shouldSetMoPubNativeEventListenerToEmptyMoPubNativeListener() {
-        assertThat(subjectWMockBaseNativeAd.getMoPubNativeEventListener()).isSameAs(moPubNativeListener);
-
-        subjectWMockBaseNativeAd.destroy();
-
-        assertThat(subjectWMockBaseNativeAd.getMoPubNativeEventListener()).isSameAs(EMPTY_EVENT_LISTENER);
-    }
-
-    // NativeViewClickListener tests
-    @Test
-    public void NativeViewClickListener_onClick_shouldQueueClickTrackerAndUrlResolutionTasks() {
-        subject = mock(NativeResponse.class);
-        NativeResponse.NativeViewClickListener nativeViewClickListener = subject.new NativeViewClickListener();
-
-        View view = new View(context);
-        nativeViewClickListener.onClick(view);
-        verify(subject).handleClick(view);
-    }
-
-    @Ignore("pending")
-    @Test
-    public void loadExtrasImage_shouldAsyncLoadImages() {
-        // no easy way to test this since nothing can be mocked
-        // also not a critical test since it directly calls another service
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
index 724736a8..b7f167b6 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
@@ -18,7 +18,6 @@
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
-import com.mopub.network.Networking;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -26,6 +25,8 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
+import org.robolectric.RuntimeEnvironment;
+import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLocationManager;
 
@@ -34,6 +35,7 @@
 import java.util.EnumSet;
 import java.util.List;
 
+import static android.Manifest.permission.ACCESS_FINE_LOCATION;
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
@@ -41,11 +43,9 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.when;
-import static org.robolectric.Robolectric.application;
-import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
-@Config(shadows = {MoPubShadowTelephonyManager.class})
+@Config(constants = BuildConfig.class, shadows = {MoPubShadowTelephonyManager.class})
 public class NativeUrlGeneratorTest {
     public static final String AD_UNIT_ID = "1234";
     private static final int TEST_SCREEN_WIDTH = 999;
@@ -57,12 +57,12 @@
 
     @Before
     public void setup() {
-        Networking.useHttps(false);
         context = spy(Robolectric.buildActivity(Activity.class).create().get());
-        shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
+        Shadows.shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
+        Shadows.shadowOf(context).grantPermissions(ACCESS_FINE_LOCATION);
         when(context.getPackageName()).thenReturn("testBundle");
         shadowTelephonyManager = (MoPubShadowTelephonyManager)
-                shadowOf((TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE));
+                Shadows.shadowOf((TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE));
 
         // Set the expected screen dimensions to arbitrary numbers
         final Resources spyResources = spy(context.getResources());
@@ -191,8 +191,8 @@ public void generateUrlString_whenLocationServiceGpsProviderHasMostRecentLocatio
 
         // Mock out the LocationManager's last known location to be more recent than the
         // developer-supplied location.
-        ShadowLocationManager shadowLocationManager = Robolectric.shadowOf(
-                (LocationManager) application.getSystemService(Context.LOCATION_SERVICE));
+        ShadowLocationManager shadowLocationManager = Shadows.shadowOf(
+                (LocationManager) RuntimeEnvironment.application.getSystemService(Context.LOCATION_SERVICE));
         Location locationFromSdk = new Location("");
         locationFromSdk.setLatitude(37);
         locationFromSdk.setLongitude(-122);
@@ -222,8 +222,8 @@ public void generateUrlString_whenDeveloperSuppliesMoreRecentLocationThanLocatio
         locationFromDeveloper.setAccuracy(3.5f);
         locationFromDeveloper.setTime(System.currentTimeMillis() - 777777);
 
-        ShadowLocationManager shadowLocationManager = Robolectric.shadowOf(
-                (LocationManager) application.getSystemService(Context.LOCATION_SERVICE));
+        ShadowLocationManager shadowLocationManager = Shadows.shadowOf(
+                (LocationManager) RuntimeEnvironment.application.getSystemService(Context.LOCATION_SERVICE));
 
         // Mock out the LocationManager's last known location to be older than the
         // developer-supplied location.
@@ -258,8 +258,8 @@ public void generateUrlString_whenLocationServiceNetworkProviderHasMostRecentLoc
 
         // Mock out the LocationManager's last known location to be more recent than the
         // developer-supplied location.
-        ShadowLocationManager shadowLocationManager = Robolectric.shadowOf(
-                (LocationManager) application.getSystemService(Context.LOCATION_SERVICE));
+        ShadowLocationManager shadowLocationManager = Shadows.shadowOf(
+                (LocationManager) RuntimeEnvironment.application.getSystemService(Context.LOCATION_SERVICE));
         Location locationFromSdk = new Location("");
         locationFromSdk.setLatitude(38);
         locationFromSdk.setLongitude(-123);
@@ -290,7 +290,7 @@ public void generateUrlString_withOnlyAdUnitSet_shouldReturnMinimumUrl() {
         assertThat(adUrl).isEqualTo(
                 "http://ads.mopub.com/m/ad?id=" +
                         AD_UNIT_ID +
-                        "&nsv=" + MoPub.SDK_VERSION + 
+                        "&nsv=" + Uri.encode(MoPub.SDK_VERSION) +
                         "&dn=unknown%2Cunknown%2Cunknown" +
                         "&bundle=testBundle" +
                         "&z=-0700" +
@@ -329,8 +329,8 @@ public void disableLocationCollection_whenLocationServiceHasMostRecentLocation_s
         subject = new NativeUrlGenerator(context);
 
         // Mock out the LocationManager's last known location.
-        ShadowLocationManager shadowLocationManager = Robolectric.shadowOf(
-                (LocationManager) application.getSystemService(Context.LOCATION_SERVICE));
+        ShadowLocationManager shadowLocationManager = Shadows.shadowOf(
+                (LocationManager) RuntimeEnvironment.application.getSystemService(Context.LOCATION_SERVICE));
         Location locationFromSdk = new Location("");
         locationFromSdk.setLatitude(37);
         locationFromSdk.setLongitude(-122);
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoControllerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoControllerTest.java
new file mode 100644
index 00000000..c31c2167
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoControllerTest.java
@@ -0,0 +1,784 @@
+package com.mopub.nativeads;
+
+import android.annotation.TargetApi;
+import android.app.Activity;
+import android.graphics.Bitmap;
+import android.graphics.SurfaceTexture;
+import android.graphics.drawable.BitmapDrawable;
+import android.media.AudioManager;
+import android.os.Build;
+import android.os.Handler;
+import android.view.Surface;
+import android.view.TextureView;
+
+import com.google.android.exoplayer.ExoPlaybackException;
+import com.google.android.exoplayer.ExoPlayer;
+import com.google.android.exoplayer.MediaCodecAudioTrackRenderer;
+import com.google.android.exoplayer.MediaCodecVideoTrackRenderer;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
+import com.mopub.mobileads.VastTracker;
+import com.mopub.mobileads.VastVideoConfig;
+import com.mopub.nativeads.NativeVideoController.ExoPlayerFactory;
+import com.mopub.nativeads.NativeVideoController.Listener;
+import com.mopub.nativeads.NativeVideoController.NativeVideoProgressRunnable;
+import com.mopub.nativeads.NativeVideoController.NativeVideoProgressRunnable.ProgressListener;
+import com.mopub.nativeads.NativeVideoController.VisibilityTrackingEvent;
+import com.mopub.nativeads.VisibilityTracker.VisibilityChecker;
+import com.mopub.network.MoPubRequestQueue;
+import com.mopub.network.Networking;
+import com.mopub.network.TrackingRequest;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.Mockito;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+import org.robolectric.util.ReflectionHelpers;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static com.mopub.common.VolleyRequestMatcher.isUrl;
+import static com.mopub.nativeads.NativeVideoController.STATE_BUFFERING;
+import static com.mopub.nativeads.NativeVideoController.STATE_CLEARED;
+import static com.mopub.nativeads.NativeVideoController.STATE_ENDED;
+import static com.mopub.nativeads.NativeVideoController.STATE_IDLE;
+import static com.mopub.nativeads.NativeVideoController.STATE_PREPARING;
+import static com.mopub.nativeads.NativeVideoController.STATE_READY;
+import static com.mopub.nativeads.NativeVideoController.createForId;
+import static com.mopub.nativeads.NativeVideoController.getForId;
+import static com.mopub.nativeads.NativeVideoController.remove;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyInt;
+import static org.mockito.Matchers.argThat;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.mockito.Mockito.when;
+
+@TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class NativeVideoControllerTest {
+
+    private NativeVideoController subject;
+    private Activity activity;
+    private ArrayList<VisibilityTrackingEvent> visibilityTrackingEvents;
+    private VastVideoConfig vastVideoConfig;
+    private NativeVideoProgressRunnable nativeVideoProgressRunnable;
+    private NativeVideoProgressRunnable spyNativeVideoProgressRunnable;
+    @Mock private ExoPlayer mockExoPlayer;
+    @Mock private NativeVideoProgressRunnable mockNativeVideoProgressRunnable;
+    @Mock private TextureView mockTextureView;
+    @Mock private SurfaceTexture mockSurfaceTexture;
+    @Mock private Listener mockListener;
+    @Mock private ProgressListener mockProgressListener;
+    @Mock private VastVideoConfig mockVastVideoConfig;
+    @Mock private Handler mockHandler;
+    @Mock private VisibilityChecker mockVisibilityChecker;
+    @Mock private MoPubRequestQueue mockRequestQueue;
+    @Mock private AudioManager mockAudioManager;
+
+    @Before
+    public void setUp() {
+        activity = Robolectric.buildActivity(Activity.class).create().get();
+        ReflectionHelpers.setStaticField(
+                Build.VERSION.class, "SDK_INT", Build.VERSION_CODES.JELLY_BEAN);
+        visibilityTrackingEvents = new ArrayList<VisibilityTrackingEvent>();
+
+        VisibilityTrackingEvent visibilityTrackingEvent = new VisibilityTrackingEvent();
+        visibilityTrackingEvent.minimumPercentageVisible = 10;
+        visibilityTrackingEvent.totalRequiredPlayTimeMs = 10;
+        visibilityTrackingEvent.strategy = new VisibilityTrackingEvent.OnTrackedStrategy() {
+            @Override
+            public void execute() {
+                TrackingRequest.makeTrackingHttpRequest("trackingUrl1", activity);
+            }
+        };
+
+        VisibilityTrackingEvent visibilityTrackingEvent2 = new VisibilityTrackingEvent();
+        visibilityTrackingEvent2.minimumPercentageVisible = 20;
+        visibilityTrackingEvent2.totalRequiredPlayTimeMs = 20;
+        visibilityTrackingEvent2.strategy = new VisibilityTrackingEvent.OnTrackedStrategy() {
+            @Override
+            public void execute() {
+                TrackingRequest.makeTrackingHttpRequest("trackingUrl2", activity);
+            }
+        };
+
+        VisibilityTrackingEvent visibilityTrackingEvent3 = new VisibilityTrackingEvent();
+        visibilityTrackingEvent3.minimumPercentageVisible = 30;
+        visibilityTrackingEvent3.totalRequiredPlayTimeMs = 30;
+        visibilityTrackingEvent3.strategy = new VisibilityTrackingEvent.OnTrackedStrategy() {
+            @Override
+            public void execute() {
+                TrackingRequest.makeTrackingHttpRequest("trackingUrl3", activity);
+            }
+        };
+        visibilityTrackingEvent3.isTracked = true;
+
+        VisibilityTrackingEvent visibilityTrackingEvent4 = new VisibilityTrackingEvent();
+        visibilityTrackingEvent4.minimumPercentageVisible = 9;
+        visibilityTrackingEvent4.totalRequiredPlayTimeMs = 9;
+        visibilityTrackingEvent4.strategy = new VisibilityTrackingEvent.OnTrackedStrategy() {
+            @Override
+            public void execute() {
+                TrackingRequest.makeTrackingHttpRequest("trackingUrl4", activity);
+            }
+        };
+
+        visibilityTrackingEvents.add(visibilityTrackingEvent);
+        visibilityTrackingEvents.add(visibilityTrackingEvent2);
+        visibilityTrackingEvents.add(visibilityTrackingEvent3);
+        visibilityTrackingEvents.add(visibilityTrackingEvent4);
+
+        vastVideoConfig = new VastVideoConfig();
+        vastVideoConfig.setNetworkMediaFileUrl("networkMediaFileUrl");
+
+        when(mockTextureView.getSurfaceTexture()).thenReturn(mockSurfaceTexture);
+
+        subject = createForId(123,
+                activity,
+                vastVideoConfig,
+                mockNativeVideoProgressRunnable,
+                new ExoPlayerFactory() {
+                    @Override
+                    public ExoPlayer newInstance(int rendererCount, int minBufferMs,
+                            int minRebufferMs) {
+                        return mockExoPlayer;
+                    }
+                },
+                null,
+                mockAudioManager);
+
+        nativeVideoProgressRunnable = new NativeVideoProgressRunnable(activity,
+                mockHandler,
+                visibilityTrackingEvents,
+                mockVisibilityChecker,
+                mockVastVideoConfig);
+        nativeVideoProgressRunnable.setTextureView(mockTextureView);
+        nativeVideoProgressRunnable.setExoPlayer(mockExoPlayer);
+        nativeVideoProgressRunnable.setProgressListener(mockProgressListener);
+        spyNativeVideoProgressRunnable = Mockito.spy(nativeVideoProgressRunnable);
+
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+    }
+
+    @Test
+    public void createForId_shouldAddNativeVideoControllerToMap_shouldReturnNativeVideoController() {
+        NativeVideoController nativeVideoController =
+                createForId(123, activity, visibilityTrackingEvents, vastVideoConfig, null);
+        assertThat(nativeVideoController).isEqualTo(getForId(123));
+    }
+
+    @Test
+    public void remove_shouldRemoveNativeVideoControllerFromMap() {
+        NativeVideoController nativeVideoController =
+                createForId(123, activity, visibilityTrackingEvents, vastVideoConfig, null);
+        assertThat(nativeVideoController).isEqualTo(getForId(123));
+        remove(123);
+        assertThat(getForId(123)).isNull();
+    }
+
+    @Test
+    public void setPlayWhenReady_shouldUpdatePlayWhenReady() {
+        subject.prepare(this);
+        subject.setPlayWhenReady(true);
+
+        verify(mockExoPlayer).setPlayWhenReady(true);
+    }
+
+    @Test
+    public void setPlayWhenReady_withPlayBackStateReady_withPlayWhenReadyTrue_shouldSetPlayeWhenReadyOnExoPlayer() {
+        subject.prepare(this);
+        reset(mockNativeVideoProgressRunnable);
+
+        when(mockExoPlayer.getPlaybackState()).thenReturn(STATE_READY);
+        when(mockExoPlayer.getPlayWhenReady()).thenReturn(true);
+        subject.setPlayWhenReady(true);
+
+        verify(mockExoPlayer).setPlayWhenReady(true);
+    }
+
+    @Test
+    public void getPlaybackState_withNullExoPlayer_shouldReturnStateCleared() {
+        assertThat(subject.getPlaybackState()).isEqualTo(STATE_CLEARED);
+    }
+
+
+    @Test
+    public void getPlaybackState_withNonNullExoPlayer_shouldReturnExoPlayerState() {
+        subject.prepare(this);
+
+        when(mockExoPlayer.getPlaybackState()).thenReturn(STATE_BUFFERING);
+        assertThat(subject.getPlaybackState()).isEqualTo(STATE_BUFFERING);
+    }
+
+    @Test
+    public void setAudioEnabled_withTrue_shouldSetVolumeOnExoPlayer() {
+        subject.prepare(this);
+        subject.setAudioEnabled(true);
+
+        verify(mockExoPlayer).sendMessage(
+                any(MediaCodecAudioTrackRenderer.class),
+                eq(MediaCodecAudioTrackRenderer.MSG_SET_VOLUME),
+                eq(1.0f));
+    }
+
+    @Test
+    public void setAudioEnabled_withFalse_shouldDisableVolumeOnExoPlayer() {
+        subject.prepare(this);
+        // initialize the subject to true so that the next call with false will run
+        subject.setAudioEnabled(true);
+        reset(mockExoPlayer);
+
+        subject.setAudioEnabled(false);
+
+        verify(mockExoPlayer).sendMessage(
+                any(MediaCodecAudioTrackRenderer.class),
+                eq(MediaCodecAudioTrackRenderer.MSG_SET_VOLUME),
+                eq(0.0f));
+    }
+
+    @Test
+    public void setAppAudioEnabled_withTrue_shouldRequestAudioFocus() throws Exception {
+        subject.setAppAudioEnabled(true);
+
+        verify(mockAudioManager).requestAudioFocus(
+                subject, AudioManager.STREAM_MUSIC, AudioManager.AUDIOFOCUS_GAIN);
+        verify(mockAudioManager, never()).abandonAudioFocus(subject);
+    }
+
+    @Test
+    public void setAppAudioEnabled_withFalse_shouldAbandonAudioFocus() throws Exception {
+        subject.setAppAudioEnabled(true);
+        subject.setAppAudioEnabled(false);
+
+        verify(mockAudioManager).abandonAudioFocus(subject);
+    }
+
+    @Test
+    public void setAudioVolume_withAudioEnabled_shouldSetExoPlayerVolume() throws Exception {
+        subject.prepare(this);
+        subject.setAudioEnabled(true);
+
+        subject.setAudioVolume(0.3f);
+
+        verify(mockExoPlayer).sendMessage(
+                any(MediaCodecAudioTrackRenderer.class),
+                eq(MediaCodecAudioTrackRenderer.MSG_SET_VOLUME),
+                eq(0.3f));
+    }
+
+    @Test
+    public void setAudioVolume_withAudioDisabled_shouldDoNothing() throws Exception {
+        subject.prepare(this);
+
+        subject.setAudioVolume(0.3f);
+
+        verify(mockExoPlayer, never()).sendMessage(
+                any(MediaCodecAudioTrackRenderer.class),
+                eq(MediaCodecAudioTrackRenderer.MSG_SET_VOLUME),
+                eq(0.3f));
+    }
+
+    @Test
+    public void setTextureView_shouldSetTextureViewOnVideoProgressRunnable_shouldSetExoSurface() {
+        subject.prepare(this);
+        reset(mockExoPlayer);
+
+        subject.setTextureView(mockTextureView);
+
+        verify(mockNativeVideoProgressRunnable).setTextureView(mockTextureView);
+        verify(mockExoPlayer).sendMessage(any(MediaCodecVideoTrackRenderer.class),
+                eq(MediaCodecVideoTrackRenderer.MSG_SET_SURFACE),
+                any(Surface.class));
+    }
+
+    @Test
+    public void prepare_shouldClearExistingPlayer() {
+        // setup an initial player
+        subject.prepare(this);
+        subject.setTextureView(mockTextureView);
+
+        reset(mockExoPlayer);
+        reset(mockNativeVideoProgressRunnable);
+        // This will clear the previous player
+        subject.prepare(this);
+
+        verify(mockExoPlayer).sendMessage(any(MediaCodecVideoTrackRenderer.class),
+                eq(MediaCodecVideoTrackRenderer.MSG_SET_SURFACE), eq(null));
+        verify(mockExoPlayer).stop();
+        verify(mockExoPlayer).release();
+        verify(mockNativeVideoProgressRunnable).stop();
+        verify(mockNativeVideoProgressRunnable).setExoPlayer(null);
+    }
+
+    @Test
+    public void prepare_shouldPreparePlayer() {
+        ExoPlayerFactory mockExoPlayerFactory = mock(ExoPlayerFactory.class);
+        when(mockExoPlayerFactory.newInstance(2, 1000, 5000)).thenReturn(mockExoPlayer);
+        subject = createForId(123,
+                activity,
+                vastVideoConfig,
+                mockNativeVideoProgressRunnable,
+                mockExoPlayerFactory,
+                null,
+                mockAudioManager);
+        subject.prepare(this);
+
+        verify(mockExoPlayerFactory).newInstance(2, 1000, 5000);
+        verify(mockNativeVideoProgressRunnable).setExoPlayer(mockExoPlayer);
+        verify(mockNativeVideoProgressRunnable).startRepeating(50);
+        verify(mockExoPlayer).addListener(subject);
+        verify(mockExoPlayer).prepare(any(MediaCodecAudioTrackRenderer.class),
+                any(MediaCodecVideoTrackRenderer.class));
+
+        // set audio
+        verify(mockExoPlayer).sendMessage(
+                any(MediaCodecAudioTrackRenderer.class),
+                eq(MediaCodecAudioTrackRenderer.MSG_SET_VOLUME),
+                eq(0.0f));
+
+        // play when ready
+        verify(mockExoPlayer).setPlayWhenReady(false);
+
+        // set surface
+        verify(mockExoPlayer).sendMessage(any(MediaCodecVideoTrackRenderer.class),
+                eq(MediaCodecVideoTrackRenderer.MSG_SET_SURFACE),
+                eq(null));
+    }
+
+    @Test
+    public void clear_shouldSetPlayWhenReadyFalse_shouldClearExistingPlayer() {
+        // initialize to true so we can set to false
+        subject.setPlayWhenReady(true);
+        subject.prepare(this);
+
+        reset(mockExoPlayer);
+        reset(mockNativeVideoProgressRunnable);
+        subject.clear();
+
+        verify(mockExoPlayer).setPlayWhenReady(false);
+
+        // clear exo player
+        verify(mockExoPlayer).sendMessage(any(MediaCodecVideoTrackRenderer.class),
+                eq(MediaCodecVideoTrackRenderer.MSG_SET_SURFACE), eq(null));
+        verify(mockExoPlayer).stop();
+        verify(mockExoPlayer).release();
+        verify(mockNativeVideoProgressRunnable).setExoPlayer(null);
+    }
+
+    @Test
+    public void release_withMatchingOwner_shouldClearExistingPlayer() {
+        subject.prepare(this);
+
+        reset(mockExoPlayer);
+        reset(mockNativeVideoProgressRunnable);
+        subject.release(this);
+
+        // clear exo player
+        verify(mockExoPlayer).sendMessage(any(MediaCodecVideoTrackRenderer.class),
+                eq(MediaCodecVideoTrackRenderer.MSG_SET_SURFACE), eq(null));
+        verify(mockExoPlayer).stop();
+        verify(mockExoPlayer).release();
+        verify(mockNativeVideoProgressRunnable).setExoPlayer(null);
+    }
+
+    @Test
+    public void release_withMismatchingOwner_shouldNotClearExistingPlayer() {
+        subject.prepare(this);
+
+        reset(mockExoPlayer);
+        reset(mockNativeVideoProgressRunnable);
+        // can be any object as long as its not 'this'
+        subject.release(mockExoPlayer);
+
+        verifyNoMoreInteractions(mockExoPlayer);
+        verifyNoMoreInteractions(mockNativeVideoProgressRunnable);
+    }
+
+    @Test
+    public void onPlayerStateChanged_withStateEnded_shouldSetFinalFrame_shouldRequestProgressRunnableToStop() {
+        subject.setTextureView(mockTextureView);
+        subject.prepare(this);
+
+        reset(mockExoPlayer);
+        reset(mockNativeVideoProgressRunnable);
+        Bitmap mockBitmap = mock(Bitmap.class);
+        when(mockTextureView.getBitmap()).thenReturn(mockBitmap);
+        subject.onPlayerStateChanged(true, STATE_ENDED);
+
+        assertThat(subject.hasFinalFrame()).isTrue();
+        assertThat(subject.getFinalFrame()).isNotNull();
+        assertThat(((BitmapDrawable) subject.getFinalFrame()).getBitmap()).isEqualTo(mockBitmap);
+        verify(mockNativeVideoProgressRunnable).requestStop();
+    }
+
+    @Test
+    public void onPlayerStateChanged_withNonNullListener_shouldNotifyListener() {
+        subject.prepare(this);
+        subject.setListener(mockListener);
+
+        subject.onPlayerStateChanged(true, STATE_IDLE);
+
+        verify(mockListener).onStateChanged(true, STATE_IDLE);
+    }
+
+    @Test
+    public void seekTo_shouldCallExoPlayerSeekTo_shouldCallProgressRunnableSeekTo() {
+        subject.prepare(this);
+        subject.seekTo(321);
+
+        verify(mockExoPlayer).seekTo(321);
+        verify(mockNativeVideoProgressRunnable).seekTo(321);
+    }
+
+    @Test
+    public void getCurrentPosition_shouldReturnProgressRunnableCurrentPosition() {
+        when(mockNativeVideoProgressRunnable.getCurrentPosition()).thenReturn(456L);
+        assertThat(subject.getCurrentPosition()).isEqualTo(456L);
+        verify(mockNativeVideoProgressRunnable).getCurrentPosition();
+    }
+
+    @Test
+    public void getDuration_shouldReturnProgressRunnableDuration() {
+        when(mockNativeVideoProgressRunnable.getDuration()).thenReturn(234L);
+        assertThat(subject.getDuration()).isEqualTo(234L);
+        verify(mockNativeVideoProgressRunnable).getDuration();
+    }
+
+    @Test
+    public void onPlayerError_shouldNotifyListener_shouldRequestProgressRunnableToStop() {
+        ExoPlaybackException exoPlaybackException = new ExoPlaybackException("exception");
+        subject.setListener(mockListener);
+        subject.onPlayerError(exoPlaybackException);
+
+        verify(mockListener).onError(exoPlaybackException);
+        verify(mockNativeVideoProgressRunnable).requestStop();
+    }
+
+    @Test
+    public void handleCtaClick_shouldInvokeVastVideoConfigHandleClick() {
+        subject = createForId(123,
+                activity,
+                mockVastVideoConfig,
+                mockNativeVideoProgressRunnable,
+                new ExoPlayerFactory() {
+                    @Override
+                    public ExoPlayer newInstance(int rendererCount, int minBufferMs,
+                            int minRebufferMs) {
+                        return mockExoPlayer;
+                    }
+                },
+                null,
+                mockAudioManager);
+
+        subject.handleCtaClick(activity);
+
+        verify(mockVastVideoConfig).handleClickWithoutResult(activity, 0);
+    }
+
+
+    @Test
+    public void NativeVideoProgressRunnable_doWork_shouldTrackEventsWithMinimumPercentVisibleWithMinimumTimePlayed() {
+        when(mockExoPlayer.getCurrentPosition()).thenReturn(10L);
+        when(mockExoPlayer.getDuration()).thenReturn(25L);
+        when(mockExoPlayer.getPlayWhenReady()).thenReturn(true);
+        when(mockVisibilityChecker.isVisible(mockTextureView, mockTextureView, 10)).thenReturn(true);
+        when(mockVisibilityChecker.isVisible(mockTextureView, mockTextureView, 20)).thenReturn(false);
+
+        nativeVideoProgressRunnable.setUpdateIntervalMillis(10);
+        nativeVideoProgressRunnable.doWork();
+
+        verify(mockRequestQueue).add(argThat(isUrl("trackingUrl1")));
+        assertThat(visibilityTrackingEvents.get(0).isTracked).isTrue();
+        assertThat(visibilityTrackingEvents.get(1).isTracked).isFalse();
+
+        // should not track same request twice
+        reset(mockRequestQueue);
+        nativeVideoProgressRunnable.doWork();
+
+        verifyNoMoreInteractions(mockRequestQueue);
+    }
+
+    @Test
+    public void NativeVideoProgressRunnable_doWork_shouldUpdateProgressListenerWithPercentagePlayed() {
+        when(mockExoPlayer.getCurrentPosition()).thenReturn(10L);
+        when(mockExoPlayer.getDuration()).thenReturn(25L);
+        when(mockExoPlayer.getPlayWhenReady()).thenReturn(true);
+
+        nativeVideoProgressRunnable.doWork();
+
+        verify(mockProgressListener).updateProgress((int) (((float) 10L / 25L) * 1000));
+    }
+
+    @Test
+    public void NativeVideoProgressRunnable_doWork_shouldFireUntriggeredTrackersFromVastVideoConfig() {
+        when(mockExoPlayer.getCurrentPosition()).thenReturn(10L);
+        when(mockExoPlayer.getDuration()).thenReturn(25L);
+        when(mockExoPlayer.getPlayWhenReady()).thenReturn(true);
+
+        VastTracker vastTracker = new VastTracker("vastTrackingUrl");
+        List<VastTracker> vastTrackers = new ArrayList<VastTracker>();
+        vastTrackers.add(vastTracker);
+        when(mockVastVideoConfig.getUntriggeredTrackersBefore(10, 25)).thenReturn(vastTrackers);
+
+        nativeVideoProgressRunnable.doWork();
+
+        verify(mockRequestQueue).add(argThat(isUrl("vastTrackingUrl")));
+        assertThat(vastTracker.isTracked()).isTrue();
+
+        reset(mockRequestQueue);
+        nativeVideoProgressRunnable.doWork();
+
+        verifyNoMoreInteractions(mockRequestQueue);
+    }
+
+    @Test
+    public void NativeVideoProgressRunnable_doWork_withNullExoPlayer_shouldReturnFast() {
+        when(mockExoPlayer.getCurrentPosition()).thenReturn(10L);
+        when(mockExoPlayer.getDuration()).thenReturn(25L);
+        when(mockExoPlayer.getPlayWhenReady()).thenReturn(true);
+
+        VastTracker vastTracker = new VastTracker("vastTrackingUrl");
+        List<VastTracker> vastTrackers = new ArrayList<VastTracker>();
+        vastTrackers.add(vastTracker);
+        when(mockVastVideoConfig.getUntriggeredTrackersBefore(10, 25)).thenReturn(vastTrackers);
+        nativeVideoProgressRunnable.setUpdateIntervalMillis(10);
+
+        nativeVideoProgressRunnable.setExoPlayer(null);
+        nativeVideoProgressRunnable.doWork();
+
+        assertThat(visibilityTrackingEvents.get(0).isTracked).isFalse();
+        assertThat(visibilityTrackingEvents.get(1).isTracked).isFalse();
+        assertThat(vastTracker.isTracked()).isFalse();
+        verifyNoMoreInteractions(mockVisibilityChecker);
+        verifyNoMoreInteractions(mockVastVideoConfig);
+        verifyNoMoreInteractions(mockRequestQueue);
+        verifyNoMoreInteractions(mockProgressListener);
+    }
+
+    @Test
+    public void NativeVideoProgressRunnable_doWork_withExoPlayerGetPlayWhenReadyFalse_shouldReturnFast() {
+        when(mockExoPlayer.getCurrentPosition()).thenReturn(10L);
+        when(mockExoPlayer.getDuration()).thenReturn(25L);
+        when(mockExoPlayer.getPlayWhenReady()).thenReturn(false);
+
+        VastTracker vastTracker = new VastTracker("vastTrackingUrl");
+        List<VastTracker> vastTrackers = new ArrayList<VastTracker>();
+        vastTrackers.add(vastTracker);
+        when(mockVastVideoConfig.getUntriggeredTrackersBefore(10, 25)).thenReturn(vastTrackers);
+        nativeVideoProgressRunnable.setUpdateIntervalMillis(10);
+
+        nativeVideoProgressRunnable.doWork();
+
+        assertThat(visibilityTrackingEvents.get(0).isTracked).isFalse();
+        assertThat(visibilityTrackingEvents.get(1).isTracked).isFalse();
+        assertThat(vastTracker.isTracked()).isFalse();
+        verifyNoMoreInteractions(mockVisibilityChecker);
+        verifyNoMoreInteractions(mockVastVideoConfig);
+        verifyNoMoreInteractions(mockRequestQueue);
+        verifyNoMoreInteractions(mockProgressListener);
+    }
+
+    @Test
+    public void NativeVideoProgressRunnable_checkImpressionTrackers_withForceTriggerFalse_shouldOnlyTriggerNotTrackedEvents_shouldNotStopRunnable() {
+        when(mockExoPlayer.getCurrentPosition()).thenReturn(50L);
+        when(mockExoPlayer.getDuration()).thenReturn(50L);
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), anyInt()))
+                .thenReturn(true);
+        spyNativeVideoProgressRunnable.setUpdateIntervalMillis(50);
+
+        spyNativeVideoProgressRunnable.checkImpressionTrackers(/* forceTrigger = */ false);
+
+        assertThat(visibilityTrackingEvents.get(0).isTracked).isTrue();
+        assertThat(visibilityTrackingEvents.get(1).isTracked).isTrue();
+        assertThat(visibilityTrackingEvents.get(2).isTracked).isTrue();
+        verify(mockRequestQueue).add(argThat(isUrl("trackingUrl1")));
+        verify(mockRequestQueue).add(argThat(isUrl("trackingUrl2")));
+        verify(mockRequestQueue, never()).add(argThat(isUrl("trackingUrl3")));
+        verify(spyNativeVideoProgressRunnable,never()).stop();
+    }
+
+    @Test
+    public void NativeVideoProgressRunnable_checkImpressionTrackers_withForceTriggerFalse_withStopRequested_shouldOnlyTriggerNotTrackedEvents_shouldStopRunnable() {
+        // Enough time has passed for all impressions to trigger organically
+        when(mockExoPlayer.getCurrentPosition()).thenReturn(50L);
+        when(mockExoPlayer.getDuration()).thenReturn(50L);
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), anyInt()))
+                .thenReturn(true);
+        spyNativeVideoProgressRunnable.setUpdateIntervalMillis(50);
+        spyNativeVideoProgressRunnable.requestStop();
+
+        spyNativeVideoProgressRunnable.checkImpressionTrackers(/* forceTrigger = */ false);
+
+        assertThat(visibilityTrackingEvents.get(0).isTracked).isTrue();
+        assertThat(visibilityTrackingEvents.get(1).isTracked).isTrue();
+        assertThat(visibilityTrackingEvents.get(2).isTracked).isTrue();
+        verify(mockRequestQueue).add(argThat(isUrl("trackingUrl1")));
+        verify(mockRequestQueue).add(argThat(isUrl("trackingUrl2")));
+        verify(mockRequestQueue, never()).add(argThat(isUrl("trackingUrl3")));
+        verify(spyNativeVideoProgressRunnable).stop();
+    }
+
+    @Test
+    public void NativeVideoProgressRunnable_checkImpressionTrackers_withForceTriggerTrue_shouldOnlyTriggerNotTrackedEvents_shouldNotStopRunnable() {
+        // Not enough time has passed for impressions to trigger organically, but all of them will
+        // be triggered because forceTrigger is true
+        when(mockExoPlayer.getCurrentPosition()).thenReturn(5L);
+        when(mockExoPlayer.getDuration()).thenReturn(50L);
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), anyInt()))
+                .thenReturn(true);
+        spyNativeVideoProgressRunnable.setUpdateIntervalMillis(50);
+
+        spyNativeVideoProgressRunnable.checkImpressionTrackers(/* forceTrigger = */ true);
+
+        assertThat(visibilityTrackingEvents.get(0).isTracked).isTrue();
+        assertThat(visibilityTrackingEvents.get(1).isTracked).isTrue();
+        assertThat(visibilityTrackingEvents.get(2).isTracked).isTrue();
+        verify(mockRequestQueue).add(argThat(isUrl("trackingUrl1")));
+        verify(mockRequestQueue).add(argThat(isUrl("trackingUrl2")));
+        verify(mockRequestQueue, never()).add(argThat(isUrl("trackingUrl3")));
+        verify(spyNativeVideoProgressRunnable, never()).stop();
+    }
+
+    @Test
+    public void NativeVideoProgressRunnable_checkImpressionTrackers_withForceTriggerTrue_withStopRequested_shouldOnlyTriggerNotTrackedEvents_shouldStopRunnable() {
+        when(mockExoPlayer.getCurrentPosition()).thenReturn(50L);
+        when(mockExoPlayer.getDuration()).thenReturn(50L);
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), anyInt()))
+                .thenReturn(true);
+        spyNativeVideoProgressRunnable.setUpdateIntervalMillis(50);
+        spyNativeVideoProgressRunnable.requestStop();
+
+        spyNativeVideoProgressRunnable.checkImpressionTrackers(/* forceTrigger = */ true);
+
+        assertThat(visibilityTrackingEvents.get(0).isTracked).isTrue();
+        assertThat(visibilityTrackingEvents.get(1).isTracked).isTrue();
+        assertThat(visibilityTrackingEvents.get(2).isTracked).isTrue();
+        verify(mockRequestQueue).add(argThat(isUrl("trackingUrl1")));
+        verify(mockRequestQueue).add(argThat(isUrl("trackingUrl2")));
+        verify(mockRequestQueue, never()).add(argThat(isUrl("trackingUrl3")));
+        verify(spyNativeVideoProgressRunnable).stop();
+    }
+
+    @Test
+    public void NativeVideoProgressRunnable_checkImpressionTrackers_withForceTriggerFalse_withStopRequested_shouldOnlyTriggerVisibleAndPlayedEvents_shouldNotStopRunnable() {
+        when(mockExoPlayer.getCurrentPosition()).thenReturn(10L);
+        when(mockExoPlayer.getDuration()).thenReturn(10L);
+
+        // visible: checks whether the minimum percentage visible is met
+        // played: checks whether the required playtime is met
+        // track: whether the impression should be organically triggered
+
+        // trackingUrl1: visible & played = track
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(10)))
+                .thenReturn(true);
+        // trackingUrl2: visible & !played = !track
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(20)))
+                .thenReturn(true);
+        // trackingUrl3: already tracked = !track
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(30)))
+                .thenReturn(true);
+        // trackingUrl4: !visible & played = !track
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(9)))
+                .thenReturn(false);
+        spyNativeVideoProgressRunnable.setUpdateIntervalMillis(10);
+        spyNativeVideoProgressRunnable.requestStop();
+
+        spyNativeVideoProgressRunnable.checkImpressionTrackers(/* forceTrigger = */ false);
+
+        assertThat(visibilityTrackingEvents.get(0).isTracked).isTrue();
+        assertThat(visibilityTrackingEvents.get(1).isTracked).isFalse();
+        assertThat(visibilityTrackingEvents.get(2).isTracked).isTrue();
+        assertThat(visibilityTrackingEvents.get(3).isTracked).isFalse();
+        verify(mockRequestQueue).add(argThat(isUrl("trackingUrl1")));
+        verify(mockRequestQueue, never()).add(argThat(isUrl("trackingUrl2")));
+        verify(mockRequestQueue, never()).add(argThat(isUrl("trackingUrl3")));
+        verify(mockRequestQueue, never()).add(argThat(isUrl("trackingUrl4")));
+        verify(spyNativeVideoProgressRunnable, never()).stop();
+    }
+
+    @Test
+    public void NativeVideoProgressRunnable_checkImpressionTrackers_withForceTriggerTrue_shouldTriggerAllUntrackedEvents_shouldNotStopRunnable() {
+        when(mockExoPlayer.getCurrentPosition()).thenReturn(10L);
+        when(mockExoPlayer.getDuration()).thenReturn(10L);
+
+        // visible: checks whether the minimum percentage visible is met
+        // played: checks whether the required playtime is met
+        // track: whether the impression should be organically triggered
+
+        // trackingUrl1: visible & played = track
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(10)))
+                .thenReturn(true);
+        // trackingUrl2: visible & !played = !track
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(20)))
+                .thenReturn(true);
+        // trackingUrl3: already tracked = !track
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(30)))
+                .thenReturn(true);
+        // trackingUrl4: !visible & played = !track
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(9)))
+                .thenReturn(false);
+        spyNativeVideoProgressRunnable.setUpdateIntervalMillis(10);
+
+        spyNativeVideoProgressRunnable.checkImpressionTrackers(/* forceTrigger = */ true);
+
+        // Because forceTrigger was true, tracking of all impressions is forced
+        assertThat(visibilityTrackingEvents.get(0).isTracked).isTrue();
+        assertThat(visibilityTrackingEvents.get(1).isTracked).isTrue();
+        assertThat(visibilityTrackingEvents.get(2).isTracked).isTrue();
+        assertThat(visibilityTrackingEvents.get(3).isTracked).isTrue();
+        verify(mockRequestQueue).add(argThat(isUrl("trackingUrl1")));
+        verify(mockRequestQueue).add(argThat(isUrl("trackingUrl2")));
+        verify(mockRequestQueue, never()).add(argThat(isUrl("trackingUrl3")));
+        verify(mockRequestQueue).add(argThat(isUrl("trackingUrl4")));
+        verify(spyNativeVideoProgressRunnable, never()).stop();
+    }
+
+    @Test
+    public void NativeVideoProgressRunnable_checkImpressionTrackers_withForceTriggerTrue_withStopRequested_shouldTriggerAllUntrackedEvents_shouldStopRunnable() {
+        when(mockExoPlayer.getCurrentPosition()).thenReturn(10L);
+        when(mockExoPlayer.getDuration()).thenReturn(10L);
+
+        // visible: checks whether the minimum percentage visible is met
+        // played: checks whether the required playtime is met
+        // track: whether the impression should be organically triggered
+
+        // trackingUrl1: visible & played = track
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(10)))
+                .thenReturn(true);
+        // trackingUrl2: visible & !played = !track
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(20)))
+                .thenReturn(true);
+        // trackingUrl3: already tracked = !track
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(30)))
+                .thenReturn(true);
+        // trackingUrl4: !visible & played = !track
+        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(9)))
+                .thenReturn(false);
+        spyNativeVideoProgressRunnable.setUpdateIntervalMillis(10);
+        spyNativeVideoProgressRunnable.requestStop();
+
+        spyNativeVideoProgressRunnable.checkImpressionTrackers(/* forceTrigger = */ true);
+
+        // Because forceTrigger was true, tracking of all impressions is forced
+        assertThat(visibilityTrackingEvents.get(0).isTracked).isTrue();
+        assertThat(visibilityTrackingEvents.get(1).isTracked).isTrue();
+        assertThat(visibilityTrackingEvents.get(2).isTracked).isTrue();
+        assertThat(visibilityTrackingEvents.get(3).isTracked).isTrue();
+        verify(mockRequestQueue).add(argThat(isUrl("trackingUrl1")));
+        verify(mockRequestQueue).add(argThat(isUrl("trackingUrl2")));
+        verify(mockRequestQueue, never()).add(argThat(isUrl("trackingUrl3")));
+        verify(mockRequestQueue).add(argThat(isUrl("trackingUrl4")));
+        verify(spyNativeVideoProgressRunnable).stop();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java
new file mode 100644
index 00000000..79307f38
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java
@@ -0,0 +1,361 @@
+package com.mopub.nativeads;
+
+import android.annotation.TargetApi;
+import android.app.Activity;
+import android.content.Intent;
+import android.content.res.Configuration;
+import android.graphics.Bitmap;
+import android.media.AudioManager;
+import android.os.Build;
+import android.os.Bundle;
+import android.view.TextureView;
+import android.view.View;
+import android.view.ViewGroup.LayoutParams;
+
+import com.mopub.common.MoPubBrowser;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BaseVideoViewController.BaseVideoViewControllerListener;
+import com.mopub.mobileads.BuildConfig;
+import com.mopub.mobileads.VastVideoConfig;
+import com.mopub.mobileads.resource.CtaButtonDrawable;
+import com.mopub.nativeads.MoPubCustomEventVideoNative.MoPubVideoNativeAd;
+import com.mopub.nativeads.NativeFullScreenVideoView.Mode;
+import com.mopub.nativeads.NativeVideoController.NativeVideoProgressRunnable.ProgressListener;
+import com.mopub.nativeads.NativeVideoViewController.VideoState;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowApplication;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.mockito.Mockito.when;
+
+@TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class NativeVideoViewControllerTest {
+
+    private NativeVideoViewController subject;
+    private Activity activity;
+    private Bundle intentExtras;
+
+    @Mock private BaseVideoViewControllerListener mockBaseVideoViewControllerListener;
+    @Mock private NativeFullScreenVideoView mockFullScreenVideoView;
+    @Mock private NativeVideoController mockVideoController;
+    @Mock private VastVideoConfig mockVastVideoConfig;
+    @Mock private TextureView mockTextureView;
+    @Mock private Bitmap mockBitmap;
+
+    @Before
+    public void setUp() {
+        activity = Robolectric.buildActivity(Activity.class).create().get();
+
+        intentExtras = new Bundle();
+        intentExtras.putLong(NativeVideoViewController.NATIVE_VIDEO_ID, 123);
+        NativeVideoController.setForId(123, mockVideoController);
+
+        when(mockVastVideoConfig.getCustomCtaText()).thenReturn("Learn More");
+        when(mockFullScreenVideoView.getTextureView()).thenReturn(mockTextureView);
+        when(mockTextureView.getBitmap()).thenReturn(mockBitmap);
+        intentExtras.putSerializable(NativeVideoViewController.NATIVE_VAST_VIDEO_CONFIG, mockVastVideoConfig);
+
+        subject = new NativeVideoViewController(activity, intentExtras, null,
+                mockBaseVideoViewControllerListener, mockFullScreenVideoView);
+    }
+
+    @After
+    public void tearDown() {
+        NativeVideoController.remove(123);
+    }
+
+    @Test
+    public void constructor_shouldSetCtaText() {
+        subject = new NativeVideoViewController(activity, intentExtras, null,
+                mockBaseVideoViewControllerListener);
+        CtaButtonDrawable ctaButtonDrawable =
+                (CtaButtonDrawable) subject.getNativeFullScreenVideoView().getCtaButton()
+                        .getDrawable();
+
+        assertThat(ctaButtonDrawable.getCtaText()).isEqualTo("Learn More");
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void constructor_withNullNativeVideoController_shouldThrowNPE() {
+        NativeVideoController.remove(123);
+        subject = new NativeVideoViewController(activity, intentExtras, null,
+                mockBaseVideoViewControllerListener, mockFullScreenVideoView);
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void onCreate_withNullNativeVideoController_shouldThrowNPE() {
+        intentExtras.remove(NativeVideoViewController.NATIVE_VAST_VIDEO_CONFIG);
+        subject = new NativeVideoViewController(activity, intentExtras, null,
+                mockBaseVideoViewControllerListener, mockFullScreenVideoView);
+    }
+
+    @Test
+    public void onCreate_shouldSetupVideoView() {
+        subject.onCreate();
+
+        verify(mockFullScreenVideoView).setSurfaceTextureListener(subject);
+        verify(mockFullScreenVideoView).setMode(Mode.LOADING);
+        verify(mockFullScreenVideoView).setPlayControlClickListener(any(View.OnClickListener.class));
+        verify(mockFullScreenVideoView).setCloseControlListener(any(View.OnClickListener.class));
+        verify(mockFullScreenVideoView).setCtaClickListener(any(View.OnClickListener.class));
+        verify(mockFullScreenVideoView).setPrivacyInformationClickListener(
+                any(View.OnClickListener.class));
+        verify(mockFullScreenVideoView).setLayoutParams(any(LayoutParams.class));
+        verify(mockBaseVideoViewControllerListener).onSetContentView(mockFullScreenVideoView);
+        verify(mockBaseVideoViewControllerListener, never()).onFinish();
+    }
+
+    @Test
+    public void onCreate_shouldSetupNativeVideoController() {
+        subject.onCreate();
+
+        verify(mockVideoController).setProgressListener(any(ProgressListener.class));
+    }
+
+    @Test
+    public void NativeFullScreenVideoView_playControlClickListener_withVideoEnded_shouldResetFullScreenVideoProgress_shouldSeekTo0_shouldApplyPlaying() {
+        ArgumentCaptor<View.OnClickListener> captor = ArgumentCaptor.forClass(View.OnClickListener.class);
+
+        subject.onCreate();
+        subject.applyState(VideoState.ENDED);
+
+        verify(mockFullScreenVideoView).setPlayControlClickListener(captor.capture());
+        captor.getValue().onClick(null);
+
+        verify(mockFullScreenVideoView).resetProgress();
+        verify(mockVideoController).seekTo(0);
+        assertThat(subject.getVideoState()).isEqualTo(VideoState.PLAYING);
+        verify(mockBaseVideoViewControllerListener, never()).onFinish();
+    }
+
+    @Test
+    public void NativeFullScreenVideoView_closeControlClickListener_shouldSetStatePaused_shouldNotDisableAppAudio_shouldFinishActivity() {
+        ArgumentCaptor<View.OnClickListener> captor = ArgumentCaptor.forClass(View.OnClickListener.class);
+
+        subject.onCreate();
+
+        verify(mockFullScreenVideoView).setCloseControlListener(captor.capture());
+        captor.getValue().onClick(null);
+
+        assertThat(subject.getVideoState()).isEqualTo(VideoState.PAUSED);
+        verify(mockVideoController, never()).setAppAudioEnabled(false);
+        verify(mockBaseVideoViewControllerListener).onFinish();
+    }
+
+    @Test
+    public void NativeFullScreenVideoView_ctaClickListener_shouldSetPlayWhenReadyToFalse_shouldHandleCtaClick() {
+        ArgumentCaptor<View.OnClickListener> captor = ArgumentCaptor.forClass(View.OnClickListener.class);
+        subject.onCreate();
+
+        verify(mockFullScreenVideoView).setCtaClickListener(captor.capture());
+        captor.getValue().onClick(null);
+
+        verify(mockVideoController).setPlayWhenReady(false);
+        verify(mockVideoController).handleCtaClick(activity);
+        verify(mockBaseVideoViewControllerListener, never()).onFinish();
+    }
+
+    @Test
+    public void NativeFullScreenVideoView_privacyInformationIconClickListener_shouldSetPlayWhenReadyToFalse_shouldOpenInAppBrowser() {
+        ArgumentCaptor<View.OnClickListener> captor = ArgumentCaptor.forClass(View.OnClickListener.class);
+
+        subject.onCreate();
+
+        verify(mockFullScreenVideoView).setPrivacyInformationClickListener(captor.capture());
+        captor.getValue().onClick(null);
+
+        verify(mockVideoController).setPlayWhenReady(false);
+
+        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
+        assertThat(startedActivity.getComponent().getClassName())
+                .isEqualTo(MoPubBrowser.class.getName());
+        assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY))
+                .isEqualTo(MoPubVideoNativeAd.PRIVACY_INFORMATION_CLICKTHROUGH_URL);
+        verify(mockBaseVideoViewControllerListener, never()).onFinish();
+    }
+
+    @Test
+    public void NativeVideoController_progressListener_shouldUpdateFullScreenVideoProgress() {
+        ArgumentCaptor<ProgressListener> captor = ArgumentCaptor.forClass(ProgressListener.class);
+
+        subject.onCreate();
+
+        verify(mockVideoController).setProgressListener(captor.capture());
+        captor.getValue().updateProgress(10);
+
+        verify(mockFullScreenVideoView).updateProgress(10);
+        verify(mockBaseVideoViewControllerListener, never()).onFinish();
+    }
+
+    @Test
+    public void onResume_shouldPrepareNativeVideoController_shouldSetListeners() {
+        subject.onResume();
+
+        verify(mockVideoController).prepare(subject);
+        verify(mockVideoController).setListener(subject);
+        verify(mockVideoController).setOnAudioFocusChangeListener(subject);
+        verifyNoMoreInteractions(mockBaseVideoViewControllerListener);
+    }
+
+    @Test
+    public void onConfigurationChanged_shouldSetOrientationOfFullScreenVideoView() {
+        Configuration configuration = new Configuration();
+        configuration.orientation = Configuration.ORIENTATION_LANDSCAPE;
+        subject.onConfigurationChanged(configuration);
+
+        verify(mockFullScreenVideoView).setOrientation(Configuration.ORIENTATION_LANDSCAPE);
+        verifyNoMoreInteractions(mockBaseVideoViewControllerListener);
+    }
+
+    @Test
+    public void onBackPressed_shouldApplyStatePaused_shouldNotDisableAppAudio() throws Exception {
+        subject.onBackPressed();
+
+        assertThat(subject.getVideoState()).isEqualTo(VideoState.PAUSED);
+        verify(mockVideoController, never()).setAppAudioEnabled(false);
+    }
+
+    @Test
+    public void onSurfaceTexutureAvailable_shouldSetTextureView_shouldSeekToLastPosition_shouldSetPlayWhenReadyTrue() {
+        TextureView textureView = mock(TextureView.class);
+        when(mockFullScreenVideoView.getTextureView()).thenReturn(textureView);
+        when(mockVideoController.getCurrentPosition()).thenReturn(321L);
+
+        subject.onSurfaceTextureAvailable(null, 0, 0);
+
+        verify(mockVideoController).setTextureView(textureView);
+        verify(mockVideoController).seekTo(321L);
+        verify(mockVideoController).setPlayWhenReady(true);
+        verifyNoMoreInteractions(mockBaseVideoViewControllerListener);
+    }
+
+    @Test
+    public void onSurfaceTextureDestroyed_shouldReleaseVideoController_shouldApplyStatePaused() {
+        subject.onSurfaceTextureDestroyed(null);
+
+        verify(mockVideoController).release(subject);
+        assertThat(subject.getVideoState()).isEqualTo(VideoState.PAUSED);
+        verifyNoMoreInteractions(mockBaseVideoViewControllerListener);
+    }
+
+    @Test
+    public void onStateChanged_shouldAppropriatelySetVideoState() {
+        subject.onStateChanged(true, NativeVideoController.STATE_PREPARING);
+        assertThat(subject.getVideoState()).isEqualTo(VideoState.LOADING);
+
+        subject.onStateChanged(true, NativeVideoController.STATE_IDLE);
+        assertThat(subject.getVideoState()).isEqualTo(VideoState.LOADING);
+
+        subject.onStateChanged(true, NativeVideoController.STATE_BUFFERING);
+        assertThat(subject.getVideoState()).isEqualTo(VideoState.BUFFERING);
+
+        subject.onStateChanged(true, NativeVideoController.STATE_READY);
+        assertThat(subject.getVideoState()).isEqualTo(VideoState.PLAYING);
+
+        subject.onStateChanged(true, NativeVideoController.STATE_ENDED);
+        assertThat(subject.getVideoState()).isEqualTo(VideoState.ENDED);
+
+        subject.onStateChanged(true, NativeVideoController.STATE_CLEARED);
+        assertThat(subject.getVideoState()).isEqualTo(VideoState.ENDED);
+        verifyNoMoreInteractions(mockBaseVideoViewControllerListener);
+    }
+
+    @Test
+    public void onError_shouldAppropriatelySetVideoState() {
+        subject.onError(new Exception());
+        assertThat(subject.getVideoState()).isEqualTo(VideoState.FAILED_LOAD);
+        verifyNoMoreInteractions(mockBaseVideoViewControllerListener);
+    }
+
+    @Test
+    public void onAudioFocusChange_withFocusChangeAudioFocusLossOrAudioFocusLossTransient_shouldPauseVideo() throws Exception {
+        subject.onAudioFocusChange(AudioManager.AUDIOFOCUS_LOSS);
+
+        assertThat(subject.getVideoState()).isEqualTo(VideoState.PAUSED);
+    }
+
+    @Test
+    public void onAudioFocusChange_withFocusChangeAudioFocusLossTransientCanDuck_shouldLowerVolume() throws Exception {
+        subject.onAudioFocusChange(AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK);
+
+        verify(mockVideoController).setAudioVolume(0.3f);
+    }
+
+    @Test
+    public void onAudioFocusChange_withFocusChangeAudioFocusGain_shouldRaiseVolume() throws Exception {
+        subject.onAudioFocusChange(AudioManager.AUDIOFOCUS_GAIN);
+
+        verify(mockVideoController).setAudioVolume(1.0f);
+    }
+
+    @Test
+    public void applyState_withVideoStateFailedLoad_shouldSetPlayWhenReadyFalse_shouldSetAudioEnabledFalse_shouldSetAppAudioEnabledFalse_shouldSetModeLoading_shouldHandleError() {
+        subject.applyState(VideoState.FAILED_LOAD);
+        verify(mockVideoController).setPlayWhenReady(false);
+        verify(mockVideoController).setAudioEnabled(false);
+        verify(mockVideoController).setAppAudioEnabled(false);
+        verify(mockFullScreenVideoView).setMode(Mode.LOADING);
+        verify(mockVastVideoConfig).handleError(activity, null, 0);
+        verifyNoMoreInteractions(mockBaseVideoViewControllerListener);
+    }
+
+    @Test
+    public void applyState_withVideoStateLoadingOrBuffering_shouldSetPlayWhenReadyTrue_shouldSetModeLoading() {
+        subject.applyState(VideoState.LOADING);
+        verify(mockVideoController).setPlayWhenReady(true);
+        verify(mockFullScreenVideoView).setMode(Mode.LOADING);
+
+        reset(mockVideoController);
+        reset(mockFullScreenVideoView);
+
+        subject.applyState(VideoState.BUFFERING);
+        verify(mockVideoController).setPlayWhenReady(true);
+        verify(mockFullScreenVideoView).setMode(Mode.LOADING);
+        verifyNoMoreInteractions(mockBaseVideoViewControllerListener);
+    }
+
+    @Test
+    public void applyState_withVideoStatePlaying_shouldSetPlayWhenReadyTrue_shouldSetAudioEnabled_shouldSetAppAudioEnabled_shouldSetModePlaying() {
+        subject.applyState(VideoState.PLAYING);
+        verify(mockVideoController).setPlayWhenReady(true);
+        verify(mockVideoController).setAudioEnabled(true);
+        verify(mockVideoController).setAppAudioEnabled(true);
+        verify(mockFullScreenVideoView).setMode(Mode.PLAYING);
+        verifyNoMoreInteractions(mockBaseVideoViewControllerListener);
+    }
+
+    @Test
+    public void applyState_withVideoStatePaused_shouldSetAppAudioEnabledFalse_shouldSetPlayWhenReadyFalse_shouldSetModePaused() {
+        subject.applyState(VideoState.PAUSED);
+        verify(mockVideoController).setAppAudioEnabled(false);
+        verify(mockVideoController).setPlayWhenReady(false);
+        verify(mockFullScreenVideoView).setMode(Mode.PAUSED);
+        verifyNoMoreInteractions(mockBaseVideoViewControllerListener);
+    }
+
+    @Test
+    public void applyState_withVideoStateEnded_shuoldSetAppAudioEnabledFalse_shouldUpdateProgress_shouldSetModeFinished() {
+        subject.applyState(VideoState.ENDED);
+        verify(mockVideoController).setAppAudioEnabled(false);
+        verify(mockFullScreenVideoView).updateProgress(1000);
+        verify(mockFullScreenVideoView).setMode(Mode.FINISHED);
+        verify(mockVastVideoConfig).handleComplete(activity, 0);
+        verifyNoMoreInteractions(mockBaseVideoViewControllerListener);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeViewHolderTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeViewHolderTest.java
deleted file mode 100644
index 2ff97828..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeViewHolderTest.java
+++ /dev/null
@@ -1,390 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.graphics.drawable.BitmapDrawable;
-import android.view.ViewGroup;
-import android.widget.Button;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
-import android.widget.RelativeLayout;
-import android.widget.TextView;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.Utils;
-import com.mopub.network.MaxWidthImageLoader;
-import com.mopub.network.MoPubRequestQueue;
-import com.mopub.network.Networking;
-import com.mopub.volley.toolbox.ImageLoader;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Captor;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class NativeViewHolderTest {
-    private Context context;
-    private RelativeLayout relativeLayout;
-    private ViewGroup viewGroup;
-    private NativeResponse nativeResponse;
-    private ViewBinder viewBinder;
-    private MoPubNative.MoPubNativeListener mopubNativeListener;
-    private TextView titleView;
-    private TextView textView;
-    private TextView callToActionView;
-    private ImageView mainImageView;
-    private ImageView iconImageView;
-    private TextView extrasTextView;
-    private ImageView extrasImageView;
-    private ImageView extrasImageView2;
-    private String mainImageUrl;
-    private String iconImageUrl;
-    private String mainImageData;
-    private String iconImageData;
-    private Bitmap iconImage;
-    private Bitmap mainImage;
-    private String extrasImageData;
-    private String extrasImageData2;
-    private Bitmap extrasImage2;
-    private Bitmap extrasImage;
-
-    private static final String IMPRESSION_URL = "http://example.com";
-    private static final String CLICK_URL = "http://test.com";
-    private static final String AD_UNIT_ID = "http://blah.org";
-
-    @Mock
-    private MoPubRequestQueue mockRequestQueue;
-    @Mock
-    private MaxWidthImageLoader mockImageLoader;
-    @Mock
-    private ImageLoader.ImageContainer mockImageContainer;
-    @Mock
-    private Bitmap mockBitmap;
-
-    @Captor
-    private ArgumentCaptor<ImageLoader.ImageListener> mainImageCaptor;
-    @Captor
-    private ArgumentCaptor<ImageLoader.ImageListener> iconImageCaptor;
-
-
-    @Before
-    public void setUp() throws Exception {
-
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-        Networking.setImageLoaderForTesting(mockImageLoader);
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        relativeLayout = new RelativeLayout(context);
-        relativeLayout.setId((int) Utils.generateUniqueId());
-        viewGroup = new LinearLayout(context);
-
-        // Fields in the web ui
-        titleView = new TextView(context);
-        titleView.setId((int) Utils.generateUniqueId());
-        textView = new TextView(context);
-        textView.setId((int) Utils.generateUniqueId());
-        callToActionView = new Button(context);
-        callToActionView.setId((int) Utils.generateUniqueId());
-        mainImageView = new ImageView(context);
-        mainImageView.setId((int) Utils.generateUniqueId());
-        iconImageView = new ImageView(context);
-        iconImageView.setId((int) Utils.generateUniqueId());
-
-        // Extras
-        extrasTextView = new TextView(context);
-        extrasTextView.setId((int) Utils.generateUniqueId());
-        extrasImageView = new ImageView(context);
-        extrasImageView.setId((int) Utils.generateUniqueId());
-        extrasImageView2 = new ImageView(context);
-        extrasImageView2.setId((int) Utils.generateUniqueId());
-
-        relativeLayout.addView(titleView);
-        relativeLayout.addView(textView);
-        relativeLayout.addView(callToActionView);
-        relativeLayout.addView(mainImageView);
-        relativeLayout.addView(iconImageView);
-        relativeLayout.addView(extrasTextView);
-        relativeLayout.addView(extrasImageView);
-        relativeLayout.addView(extrasImageView2);
-
-        mainImageUrl = "mainimageurl";
-        iconImageUrl = "iconimageurl";
-        mainImageData = "mainimagedata";
-        iconImageData = "iconimagedata";
-        extrasImageData = "extrasimagedata";
-        extrasImageData2 = "extrasimagedata2";
-        iconImage = BitmapFactory.decodeByteArray(iconImageData.getBytes(), 0, iconImageData.getBytes().length);
-        mainImage = BitmapFactory.decodeByteArray(mainImageData.getBytes(), 0, mainImageData.getBytes().length);
-        extrasImage = BitmapFactory.decodeByteArray(extrasImageData.getBytes(), 0, extrasImageData.getBytes().length);
-        extrasImage2 = BitmapFactory.decodeByteArray(extrasImageData2.getBytes(), 0, extrasImageData2.getBytes().length);
-    }
-
-    @Test
-    public void fromViewBinder_shouldPopulateClassFields() throws Exception {
-        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
-                .titleId(titleView.getId())
-                .textId(textView.getId())
-                .callToActionId(callToActionView.getId())
-                .mainImageId(mainImageView.getId())
-                .iconImageId(iconImageView.getId())
-                .build();
-
-        NativeViewHolder nativeViewHolder =
-                NativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
-
-        assertThat(nativeViewHolder.titleView).isEqualTo(titleView);
-        assertThat(nativeViewHolder.textView).isEqualTo(textView);
-        assertThat(nativeViewHolder.callToActionView).isEqualTo(callToActionView);
-        assertThat(nativeViewHolder.mainImageView).isEqualTo(mainImageView);
-        assertThat(nativeViewHolder.iconImageView).isEqualTo(iconImageView);
-    }
-
-    @Test
-    public void fromViewBinder_withSubsetOfFields_shouldLeaveOtherFieldsNull() throws Exception {
-        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
-                .titleId(titleView.getId())
-                .iconImageId(iconImageView.getId())
-                .build();
-
-        NativeViewHolder nativeViewHolder =
-                NativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
-
-        assertThat(nativeViewHolder.titleView).isEqualTo(titleView);
-        assertThat(nativeViewHolder.textView).isNull();
-        assertThat(nativeViewHolder.callToActionView).isNull();
-        assertThat(nativeViewHolder.mainImageView).isNull();
-        assertThat(nativeViewHolder.iconImageView).isEqualTo(iconImageView);
-    }
-
-    @Test
-    public void fromViewBinder_withNonExistantIds_shouldLeaveFieldsNull() throws Exception {
-        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
-                .titleId((int) Utils.generateUniqueId())
-                .textId((int) Utils.generateUniqueId())
-                .callToActionId((int) Utils.generateUniqueId())
-                .mainImageId((int) Utils.generateUniqueId())
-                .iconImageId((int) Utils.generateUniqueId())
-                .build();
-
-        NativeViewHolder nativeViewHolder =
-                NativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
-
-        assertThat(nativeViewHolder.titleView).isNull();
-        assertThat(nativeViewHolder.textView).isNull();
-        assertThat(nativeViewHolder.callToActionView).isNull();
-        assertThat(nativeViewHolder.mainImageView).isNull();
-        assertThat(nativeViewHolder.iconImageView).isNull();
-    }
-
-    @Test
-    public void update_shouldAddValuesToViews() throws Exception {
-        // Setup for cache state for image gets
-
-        BaseForwardingNativeAd nativeAd = new BaseForwardingNativeAd() {};
-        nativeAd.setTitle("titletext");
-        nativeAd.setText("texttext");
-        nativeAd.setMainImageUrl("mainimageurl");
-        nativeAd.setIconImageUrl("iconimageurl");
-        nativeAd.setCallToAction("cta");
-
-        nativeResponse = new NativeResponse(context,
-                IMPRESSION_URL, CLICK_URL, AD_UNIT_ID, nativeAd, null);
-
-        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
-                .titleId(titleView.getId())
-                .textId(textView.getId())
-                .callToActionId(callToActionView.getId())
-                .mainImageId(mainImageView.getId())
-                .iconImageId(iconImageView.getId())
-                .build();
-
-        NativeViewHolder nativeViewHolder =
-                NativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
-
-        nativeViewHolder.update(nativeResponse);
-
-        assertThat(titleView.getText()).isEqualTo("titletext");
-        assertThat(textView.getText()).isEqualTo("texttext");
-        assertThat(callToActionView.getText()).isEqualTo("cta");
-        verify(mockImageLoader).get(eq("mainimageurl"), mainImageCaptor.capture());
-        verify(mockImageLoader).get(eq("iconimageurl"), iconImageCaptor.capture());
-
-        stub(mockImageContainer.getBitmap()).toReturn(mockBitmap);
-        mainImageCaptor.getValue().onResponse(mockImageContainer, true);
-        iconImageCaptor.getValue().onResponse(mockImageContainer, true);
-
-        assertThat(((BitmapDrawable) mainImageView.getDrawable()).getBitmap()).isEqualTo(mockBitmap);
-        assertThat(((BitmapDrawable) iconImageView.getDrawable()).getBitmap()).isEqualTo(mockBitmap);
-    }
-
-    @Test
-    public void update_withMissingNativeResponseFields_shouldClearPreviousValues() throws Exception {
-        // Set previous values that should be cleared
-        titleView.setText("previoustitletext");
-        textView.setText("previoustexttext");
-        callToActionView.setText("previousctatext");
-        mainImageView.setImageBitmap(BitmapFactory.decodeByteArray("previousmainimagedata".getBytes(), 0, "previousmainimagedata".getBytes().length));
-        iconImageView.setImageBitmap(BitmapFactory.decodeByteArray("previousiconimagedata".getBytes(), 0, "previousiconimagedata".getBytes().length));
-
-        // Only required fields in native response
-        nativeResponse = new NativeResponse(context,
-                IMPRESSION_URL, CLICK_URL, AD_UNIT_ID, mock(BaseForwardingNativeAd.class), null);
-
-        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
-                .titleId(titleView.getId())
-                .textId(textView.getId())
-                .callToActionId(callToActionView.getId())
-                .mainImageId(mainImageView.getId())
-                .iconImageId(iconImageView.getId())
-                .build();
-
-        NativeViewHolder nativeViewHolder =
-                NativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
-
-        nativeViewHolder.update(nativeResponse);
-
-        assertThat(titleView.getText()).isEqualTo("");
-        assertThat(textView.getText()).isEqualTo("");
-        assertThat(callToActionView.getText()).isEqualTo("");
-        assertThat(mainImageView.getDrawable()).isNull();
-        assertThat(iconImageView.getDrawable()).isNull();
-    }
-
-    @Test
-    public void update_withDifferentViewBinder_shouldNotClearPreviousValues() throws Exception {
-        // Set previous values that should be cleared
-        titleView.setText("previoustitletext");
-        textView.setText("previoustexttext");
-
-        BaseForwardingNativeAd nativeAd = new BaseForwardingNativeAd() {};
-        nativeAd.setCallToAction("cta");
-
-        nativeResponse = new NativeResponse(context,
-                IMPRESSION_URL, CLICK_URL, AD_UNIT_ID, nativeAd, null);
-
-        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
-                .callToActionId(callToActionView.getId())
-                .build();
-
-        NativeViewHolder nativeViewHolder =
-                NativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
-
-        nativeViewHolder.update(nativeResponse);
-
-        assertThat(titleView.getText()).isEqualTo("previoustitletext");
-        assertThat(textView.getText()).isEqualTo("previoustexttext");
-        assertThat(callToActionView.getText()).isEqualTo("cta");
-    }
-
-    @Test
-    public void updateExtras_shouldAddValuesToViews() throws Exception {
-        // Setup for cache state for image gets
-
-        BaseForwardingNativeAd nativeAd = new BaseForwardingNativeAd() {};
-        nativeAd.addExtra("extrastext", "extrastexttext");
-        nativeAd.addExtra("extrasimage", "extrasimageurl");
-        nativeAd.addExtra("extrasimage2", "extrasimageurl2");
-
-        nativeResponse = new NativeResponse(context,
-                IMPRESSION_URL, CLICK_URL, AD_UNIT_ID, nativeAd, null);
-
-        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
-                .addExtra("extrastext", extrasTextView.getId())
-                .addExtra("extrasimage", extrasImageView.getId())
-                .addExtra("extrasimage2", extrasImageView2.getId())
-                .build();
-
-        NativeViewHolder nativeViewHolder =
-                NativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
-
-        nativeViewHolder.updateExtras(nativeResponse, viewBinder);
-
-        assertThat(extrasTextView.getText()).isEqualTo("extrastexttext");
-
-        verify(mockImageLoader).get(eq("extrasimageurl"), mainImageCaptor.capture());
-        verify(mockImageLoader).get(eq("extrasimageurl2"), iconImageCaptor.capture());
-
-        stub(mockImageContainer.getBitmap()).toReturn(mockBitmap);
-        mainImageCaptor.getValue().onResponse(mockImageContainer, true);
-        iconImageCaptor.getValue().onResponse(mockImageContainer, true);
-
-        assertThat(((BitmapDrawable) extrasImageView.getDrawable()).getBitmap()).isEqualTo(mockBitmap);
-        assertThat(((BitmapDrawable) extrasImageView2.getDrawable()).getBitmap()).isEqualTo(mockBitmap);
-    }
-
-    @Test
-    public void updateExtras_withMissingExtrasValues_shouldClearPreviousValues() throws Exception {
-        extrasTextView.setText("previousextrastext");
-        extrasImageView.setImageBitmap(BitmapFactory.decodeByteArray("previousextrasimagedata".getBytes(), 0, "previousextrasimagedata".getBytes().length));
-        extrasImageView2.setImageBitmap(BitmapFactory.decodeByteArray("previousextrasimagedata2".getBytes(), 0, "previousextrasimagedata2".getBytes().length));
-
-        nativeResponse = new NativeResponse(context,
-                IMPRESSION_URL, CLICK_URL, AD_UNIT_ID, new BaseForwardingNativeAd(){}, null);
-
-        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
-                .addExtra("extrastext", extrasTextView.getId())
-                .addExtra("extrasimage", extrasImageView.getId())
-                .addExtra("extrasimage2", extrasImageView2.getId())
-                .build();
-
-        NativeViewHolder nativeViewHolder =
-                NativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
-
-        assertThat(extrasTextView.getText()).isEqualTo("previousextrastext");
-
-        nativeViewHolder.updateExtras(nativeResponse, viewBinder);
-
-        assertThat(extrasTextView.getText()).isEqualTo("");
-        assertThat(extrasImageView.getDrawable()).isNull();
-        assertThat(extrasImageView2.getDrawable()).isNull();
-    }
-
-    @Test
-    public void updateExtras_withMismatchingViewTypes_shouldSetTextViewToImageUrlAndSetExtrasImageViewToNull() throws Exception {
-        BaseForwardingNativeAd nativeAd = new BaseForwardingNativeAd() {};
-        nativeAd.addExtra("extrastext", "extrastexttext");
-        nativeAd.addExtra("extrasimage", "extrasimageurl");
-
-        nativeResponse = new NativeResponse(context,
-                IMPRESSION_URL, CLICK_URL, AD_UNIT_ID, nativeAd, null);
-
-        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
-                .addExtra("extrastext", extrasImageView.getId())
-                .addExtra("extrasimage", extrasTextView.getId())
-                .build();
-
-        NativeViewHolder nativeViewHolder =
-                NativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
-
-        assertThat(extrasTextView.getText()).isEqualTo("");
-        assertThat(extrasImageView.getDrawable()).isNull();
-
-        nativeViewHolder.updateExtras(nativeResponse, viewBinder);
-
-        // Volley's imageloader will set this to a bitmapdrawable with no bitmap
-        assertThat(extrasTextView.getText()).isEqualTo("extrasimageurl");
-        assertThat(extrasImageView.getDrawable()).isNull();
-    }
-
-    public void fromViewBinder_withMixedViewTypes_shouldReturnEmptyViewHolder() throws Exception {
-        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
-                .titleId(mainImageView.getId())
-                .textId(textView.getId())
-                .build();
-
-        NativeViewHolder nativeViewHolder =
-                NativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
-        assertThat(nativeViewHolder).isEqualTo(NativeViewHolder.EMPTY_VIEW_HOLDER);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/PlacementDataTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/PlacementDataTest.java
index bcab2a25..633d1c2b 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/PlacementDataTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/PlacementDataTest.java
@@ -3,6 +3,7 @@
 package com.mopub.nativeads;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -18,9 +19,9 @@
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class PlacementDataTest {
     private PlacementData noAds;
     private PlacementData adAt0;
@@ -31,14 +32,10 @@
     private PlacementData adsRepeating;
     private PlacementData adsAt15repeating;
 
-    @Mock private NativeAdData mockNativeAdData;
-    @Mock private NativeAdData mockNativeAdData2;
-    @Mock private NativeAdData mockNativeAdData3;
-    @Mock private NativeAdData mockNativeAdData4;
-    @Mock private NativeResponse mockNativeResponse;
-    @Mock private NativeResponse mockNativeResponse2;
-    @Mock private NativeResponse mockNativeResponse3;
-    @Mock private NativeResponse mockNativeResponse4;
+    @Mock private NativeAd mMockNativeAd;
+    @Mock private NativeAd mMockNativeAd2;
+    @Mock private NativeAd mMockNativeAd3;
+    @Mock private NativeAd mMockNativeAd4;
 
     @Before
     public void setup() {
@@ -64,11 +61,6 @@ public void setup() {
                 .addFixedPosition(2)
                 .addFixedPosition(3)
                 .addFixedPosition(4));
-
-        when(mockNativeAdData.getAd()).thenReturn(mockNativeResponse);
-        when(mockNativeAdData2.getAd()).thenReturn(mockNativeResponse2);
-        when(mockNativeAdData3.getAd()).thenReturn(mockNativeResponse3);
-        when(mockNativeAdData4.getAd()).thenReturn(mockNativeResponse4);
     }
 
     @Test
@@ -287,15 +279,15 @@ public void placeAds_inOrder_shouldUpdatePositions() {
         checkInsertionPositions(10, adsAt15repeating, 1, 4, 6, 8, 10);
         checkPlacedPositions(20, adsAt15repeating);
 
-        adsAt15repeating.placeAd(1, mockNativeAdData);
+        adsAt15repeating.placeAd(1, mMockNativeAd);
         checkInsertionPositions(10, adsAt15repeating, 5, 7, 9);
         checkPlacedPositions(20, adsAt15repeating, 1);
 
-        adsAt15repeating.placeAd(5, mockNativeAdData);
+        adsAt15repeating.placeAd(5, mMockNativeAd);
         checkInsertionPositions(10, adsAt15repeating, 8, 10);
         checkPlacedPositions(20, adsAt15repeating, 1, 5);
 
-        adsAt15repeating.placeAd(8, mockNativeAdData);
+        adsAt15repeating.placeAd(8, mMockNativeAd);
         checkInsertionPositions(10, adsAt15repeating);
         checkPlacedPositions(20, adsAt15repeating, 1, 5, 8);
     }
@@ -305,24 +297,24 @@ public void placeAds_outOfOrder_shouldUpdatePositions() {
         checkInsertionPositions(10, adsAt15repeating, 1, 4, 6, 8, 10);
         checkPlacedPositions(20, adsAt15repeating);
 
-        adsAt15repeating.placeAd(6, mockNativeAdData);
+        adsAt15repeating.placeAd(6, mMockNativeAd);
         checkInsertionPositions(10, adsAt15repeating, 1, 4, 9);
         checkPlacedPositions(20, adsAt15repeating, 6);
 
-        adsAt15repeating.placeAd(4, mockNativeAdData);
+        adsAt15repeating.placeAd(4, mMockNativeAd);
         checkInsertionPositions(10, adsAt15repeating, 1, 10);
         checkPlacedPositions(20, adsAt15repeating, 4, 7);
 
-        adsAt15repeating.placeAd(1, mockNativeAdData);
+        adsAt15repeating.placeAd(1, mMockNativeAd);
         checkInsertionPositions(10, adsAt15repeating);
         checkPlacedPositions(20, adsAt15repeating, 1, 5, 8);
     }
 
     @Test
     public void placedAds_getOriginalPositionAndCount() {
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-        adsAt15repeating.placeAd(5, mockNativeAdData);
-        adsAt15repeating.placeAd(8, mockNativeAdData);
+        adsAt15repeating.placeAd(1, mMockNativeAd);
+        adsAt15repeating.placeAd(5, mMockNativeAd);
+        adsAt15repeating.placeAd(8, mMockNativeAd);
 
         assertThat(adsAt15repeating.getOriginalPosition(0)).isEqualTo(0);
         assertThat(adsAt15repeating.getOriginalPosition(1)).isEqualTo(NOT_FOUND);
@@ -343,9 +335,9 @@ public void placedAds_getOriginalPositionAndCount() {
 
     @Test
     public void placedAds_getAdjustedPositionAndCount() {
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-        adsAt15repeating.placeAd(5, mockNativeAdData);
-        adsAt15repeating.placeAd(8, mockNativeAdData);
+        adsAt15repeating.placeAd(1, mMockNativeAd);
+        adsAt15repeating.placeAd(5, mMockNativeAd);
+        adsAt15repeating.placeAd(8, mMockNativeAd);
 
         assertThat(adsAt15repeating.getAdjustedPosition(0)).isEqualTo(0);
         // Ad here
@@ -370,122 +362,122 @@ public void placedAds_getAdjustedPositionAndCount() {
     @Test
     public void placeAdsClumped_shouldPlaceAdsInOrder() {
         int nextPosition = adsAt1234.nextInsertionPosition(0);
-        adsAt1234.placeAd(nextPosition, mockNativeAdData);
+        adsAt1234.placeAd(nextPosition, mMockNativeAd);
 
         nextPosition = adsAt1234.nextInsertionPosition(nextPosition);
-        adsAt1234.placeAd(nextPosition, mockNativeAdData2);
+        adsAt1234.placeAd(nextPosition, mMockNativeAd2);
 
         nextPosition = adsAt1234.nextInsertionPosition(nextPosition);
-        adsAt1234.placeAd(nextPosition, mockNativeAdData3);
+        adsAt1234.placeAd(nextPosition, mMockNativeAd3);
 
         nextPosition = adsAt1234.nextInsertionPosition(nextPosition);
-        adsAt1234.placeAd(nextPosition, mockNativeAdData4);
+        adsAt1234.placeAd(nextPosition, mMockNativeAd4);
 
         nextPosition = adsAt1234.nextInsertionPosition(nextPosition);
         assertThat(nextPosition).isEqualTo(NOT_FOUND);
 
         assertThat(adsAt1234.isPlacedAd(0)).isFalse();
-        assertThat(adsAt1234.getPlacedAd(1)).isEqualTo(mockNativeAdData);
-        assertThat(adsAt1234.getPlacedAd(2)).isEqualTo(mockNativeAdData2);
-        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mockNativeAdData3);
-        assertThat(adsAt1234.getPlacedAd(4)).isEqualTo(mockNativeAdData4);
+        assertThat(adsAt1234.getPlacedAd(1)).isEqualTo(mMockNativeAd);
+        assertThat(adsAt1234.getPlacedAd(2)).isEqualTo(mMockNativeAd2);
+        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mMockNativeAd3);
+        assertThat(adsAt1234.getPlacedAd(4)).isEqualTo(mMockNativeAd4);
         assertThat(adsAt1234.isPlacedAd(5)).isFalse();
     }
 
     @Test
     public void placeAdsClumped_thenRemoveContentBeforeClumpedAds_shouldShiftAds() {
-        adsAt1234.placeAd(1, mockNativeAdData);
-        adsAt1234.placeAd(2, mockNativeAdData2);
-        adsAt1234.placeAd(3, mockNativeAdData3);
-        adsAt1234.placeAd(4, mockNativeAdData4);
+        adsAt1234.placeAd(1, mMockNativeAd);
+        adsAt1234.placeAd(2, mMockNativeAd2);
+        adsAt1234.placeAd(3, mMockNativeAd3);
+        adsAt1234.placeAd(4, mMockNativeAd4);
 
         adsAt1234.removeItem(0);
-        assertThat(adsAt1234.getPlacedAd(0)).isEqualTo(mockNativeAdData);
-        assertThat(adsAt1234.getPlacedAd(1)).isEqualTo(mockNativeAdData2);
-        assertThat(adsAt1234.getPlacedAd(2)).isEqualTo(mockNativeAdData3);
-        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mockNativeAdData4);
+        assertThat(adsAt1234.getPlacedAd(0)).isEqualTo(mMockNativeAd);
+        assertThat(adsAt1234.getPlacedAd(1)).isEqualTo(mMockNativeAd2);
+        assertThat(adsAt1234.getPlacedAd(2)).isEqualTo(mMockNativeAd3);
+        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mMockNativeAd4);
         assertThat(adsAt1234.isPlacedAd(4)).isFalse();
 
         adsAt1234.removeItem(0);
-        assertThat(adsAt1234.getPlacedAd(0)).isEqualTo(mockNativeAdData);
-        assertThat(adsAt1234.getPlacedAd(1)).isEqualTo(mockNativeAdData2);
-        assertThat(adsAt1234.getPlacedAd(2)).isEqualTo(mockNativeAdData3);
-        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mockNativeAdData4);
+        assertThat(adsAt1234.getPlacedAd(0)).isEqualTo(mMockNativeAd);
+        assertThat(adsAt1234.getPlacedAd(1)).isEqualTo(mMockNativeAd2);
+        assertThat(adsAt1234.getPlacedAd(2)).isEqualTo(mMockNativeAd3);
+        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mMockNativeAd4);
         assertThat(adsAt1234.isPlacedAd(4)).isFalse();
     }
 
     @Test
     public void placeAdsClumped_thenRemoveContentAfterClumpedAds_shouldNotShiftAds() {
-        adsAt1234.placeAd(1, mockNativeAdData);
-        adsAt1234.placeAd(2, mockNativeAdData2);
-        adsAt1234.placeAd(3, mockNativeAdData3);
-        adsAt1234.placeAd(4, mockNativeAdData4);
+        adsAt1234.placeAd(1, mMockNativeAd);
+        adsAt1234.placeAd(2, mMockNativeAd2);
+        adsAt1234.placeAd(3, mMockNativeAd3);
+        adsAt1234.placeAd(4, mMockNativeAd4);
 
         adsAt1234.removeItem(1);
         assertThat(adsAt1234.isPlacedAd(0)).isFalse();
-        assertThat(adsAt1234.getPlacedAd(1)).isEqualTo(mockNativeAdData);
-        assertThat(adsAt1234.getPlacedAd(2)).isEqualTo(mockNativeAdData2);
-        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mockNativeAdData3);
-        assertThat(adsAt1234.getPlacedAd(4)).isEqualTo(mockNativeAdData4);
+        assertThat(adsAt1234.getPlacedAd(1)).isEqualTo(mMockNativeAd);
+        assertThat(adsAt1234.getPlacedAd(2)).isEqualTo(mMockNativeAd2);
+        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mMockNativeAd3);
+        assertThat(adsAt1234.getPlacedAd(4)).isEqualTo(mMockNativeAd4);
         assertThat(adsAt1234.isPlacedAd(5)).isFalse();
 
         adsAt1234.removeItem(2);
         assertThat(adsAt1234.isPlacedAd(0)).isFalse();
-        assertThat(adsAt1234.getPlacedAd(1)).isEqualTo(mockNativeAdData);
-        assertThat(adsAt1234.getPlacedAd(2)).isEqualTo(mockNativeAdData2);
-        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mockNativeAdData3);
-        assertThat(adsAt1234.getPlacedAd(4)).isEqualTo(mockNativeAdData4);
+        assertThat(adsAt1234.getPlacedAd(1)).isEqualTo(mMockNativeAd);
+        assertThat(adsAt1234.getPlacedAd(2)).isEqualTo(mMockNativeAd2);
+        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mMockNativeAd3);
+        assertThat(adsAt1234.getPlacedAd(4)).isEqualTo(mMockNativeAd4);
         assertThat(adsAt1234.isPlacedAd(5)).isFalse();
     }
 
     @Test
     public void placeAdsClumped_thenInsertContentBeforeClumpedAds_shouldShiftAds() {
-        adsAt1234.placeAd(1, mockNativeAdData);
-        adsAt1234.placeAd(2, mockNativeAdData2);
-        adsAt1234.placeAd(3, mockNativeAdData3);
-        adsAt1234.placeAd(4, mockNativeAdData4);
+        adsAt1234.placeAd(1, mMockNativeAd);
+        adsAt1234.placeAd(2, mMockNativeAd2);
+        adsAt1234.placeAd(3, mMockNativeAd3);
+        adsAt1234.placeAd(4, mMockNativeAd4);
 
         adsAt1234.insertItem(1);
         assertThat(adsAt1234.isPlacedAd(0)).isFalse();
         assertThat(adsAt1234.isPlacedAd(1)).isFalse();
-        assertThat(adsAt1234.getPlacedAd(2)).isEqualTo(mockNativeAdData);
-        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mockNativeAdData2);
-        assertThat(adsAt1234.getPlacedAd(4)).isEqualTo(mockNativeAdData3);
-        assertThat(adsAt1234.getPlacedAd(5)).isEqualTo(mockNativeAdData4);
+        assertThat(adsAt1234.getPlacedAd(2)).isEqualTo(mMockNativeAd);
+        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mMockNativeAd2);
+        assertThat(adsAt1234.getPlacedAd(4)).isEqualTo(mMockNativeAd3);
+        assertThat(adsAt1234.getPlacedAd(5)).isEqualTo(mMockNativeAd4);
         assertThat(adsAt1234.isPlacedAd(6)).isFalse();
 
         adsAt1234.insertItem(0);
         assertThat(adsAt1234.isPlacedAd(0)).isFalse();
         assertThat(adsAt1234.isPlacedAd(1)).isFalse();
         assertThat(adsAt1234.isPlacedAd(2)).isFalse();
-        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mockNativeAdData);
-        assertThat(adsAt1234.getPlacedAd(4)).isEqualTo(mockNativeAdData2);
-        assertThat(adsAt1234.getPlacedAd(5)).isEqualTo(mockNativeAdData3);
-        assertThat(adsAt1234.getPlacedAd(6)).isEqualTo(mockNativeAdData4);
+        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mMockNativeAd);
+        assertThat(adsAt1234.getPlacedAd(4)).isEqualTo(mMockNativeAd2);
+        assertThat(adsAt1234.getPlacedAd(5)).isEqualTo(mMockNativeAd3);
+        assertThat(adsAt1234.getPlacedAd(6)).isEqualTo(mMockNativeAd4);
         assertThat(adsAt1234.isPlacedAd(7)).isFalse();
     }
 
     @Test
     public void placeAdsClumped_thenInsertContentAfterClumpedAds_shouldNotShiftAds() {
-        adsAt1234.placeAd(1, mockNativeAdData);
-        adsAt1234.placeAd(2, mockNativeAdData2);
-        adsAt1234.placeAd(3, mockNativeAdData3);
-        adsAt1234.placeAd(4, mockNativeAdData4);
+        adsAt1234.placeAd(1, mMockNativeAd);
+        adsAt1234.placeAd(2, mMockNativeAd2);
+        adsAt1234.placeAd(3, mMockNativeAd3);
+        adsAt1234.placeAd(4, mMockNativeAd4);
 
         adsAt1234.insertItem(2);
         assertThat(adsAt1234.isPlacedAd(0)).isFalse();
-        assertThat(adsAt1234.getPlacedAd(1)).isEqualTo(mockNativeAdData);
-        assertThat(adsAt1234.getPlacedAd(2)).isEqualTo(mockNativeAdData2);
-        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mockNativeAdData3);
-        assertThat(adsAt1234.getPlacedAd(4)).isEqualTo(mockNativeAdData4);
+        assertThat(adsAt1234.getPlacedAd(1)).isEqualTo(mMockNativeAd);
+        assertThat(adsAt1234.getPlacedAd(2)).isEqualTo(mMockNativeAd2);
+        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mMockNativeAd3);
+        assertThat(adsAt1234.getPlacedAd(4)).isEqualTo(mMockNativeAd4);
         assertThat(adsAt1234.isPlacedAd(5)).isFalse();
 
         adsAt1234.removeItem(3);
         assertThat(adsAt1234.isPlacedAd(0)).isFalse();
-        assertThat(adsAt1234.getPlacedAd(1)).isEqualTo(mockNativeAdData);
-        assertThat(adsAt1234.getPlacedAd(2)).isEqualTo(mockNativeAdData2);
-        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mockNativeAdData3);
-        assertThat(adsAt1234.getPlacedAd(4)).isEqualTo(mockNativeAdData4);
+        assertThat(adsAt1234.getPlacedAd(1)).isEqualTo(mMockNativeAd);
+        assertThat(adsAt1234.getPlacedAd(2)).isEqualTo(mMockNativeAd2);
+        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mMockNativeAd3);
+        assertThat(adsAt1234.getPlacedAd(4)).isEqualTo(mMockNativeAd4);
         assertThat(adsAt1234.isPlacedAd(5)).isFalse();
     }
 
@@ -499,9 +491,9 @@ public void placedAds_thenClearEmptyRange_doesNothing() {
         checkPlacedPositions(15, adsAt15repeating);
         checkInsertionPositions(15, adsAt15repeating, 1, 4, 6, 8, 10, 12, 14);
 
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-        adsAt15repeating.placeAd(5, mockNativeAdData);
-        adsAt15repeating.placeAd(8, mockNativeAdData);
+        adsAt15repeating.placeAd(1, mMockNativeAd);
+        adsAt15repeating.placeAd(5, mMockNativeAd);
+        adsAt15repeating.placeAd(8, mMockNativeAd);
         checkPlacedPositions(15, adsAt15repeating, 1, 5, 8);
         checkInsertionPositions(15, adsAt15repeating, 11, 13, 15);
 
@@ -515,9 +507,9 @@ public void placedAds_thenClearAll_shouldResetInsertionPositions() {
         checkPlacedPositions(15, adsAt15repeating);
         checkInsertionPositions(15, adsAt15repeating, 1, 4, 6, 8, 10, 12, 14);
 
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-        adsAt15repeating.placeAd(5, mockNativeAdData);
-        adsAt15repeating.placeAd(8, mockNativeAdData);
+        adsAt15repeating.placeAd(1, mMockNativeAd);
+        adsAt15repeating.placeAd(5, mMockNativeAd);
+        adsAt15repeating.placeAd(8, mMockNativeAd);
         checkPlacedPositions(15, adsAt15repeating, 1, 5, 8);
         checkInsertionPositions(15, adsAt15repeating, 11, 13, 15);
 
@@ -531,9 +523,9 @@ public void placedAds_thenClearRange_inOrder_shouldResetInsertionPositions() {
         checkPlacedPositions(15, adsAt15repeating);
         checkInsertionPositions(15, adsAt15repeating, 1, 4, 6, 8, 10, 12, 14);
 
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-        adsAt15repeating.placeAd(5, mockNativeAdData);
-        adsAt15repeating.placeAd(8, mockNativeAdData);
+        adsAt15repeating.placeAd(1, mMockNativeAd);
+        adsAt15repeating.placeAd(5, mMockNativeAd);
+        adsAt15repeating.placeAd(8, mMockNativeAd);
         checkPlacedPositions(15, adsAt15repeating, 1, 5, 8);
         checkInsertionPositions(15, adsAt15repeating, 11, 13, 15);
 
@@ -555,9 +547,9 @@ public void placedAds_thenClearRange_descending_shouldResetInsertionPositions()
         checkPlacedPositions(15, adsAt15repeating);
         checkInsertionPositions(15, adsAt15repeating, 1, 4, 6, 8, 10, 12, 14);
 
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-        adsAt15repeating.placeAd(5, mockNativeAdData);
-        adsAt15repeating.placeAd(8, mockNativeAdData);
+        adsAt15repeating.placeAd(1, mMockNativeAd);
+        adsAt15repeating.placeAd(5, mMockNativeAd);
+        adsAt15repeating.placeAd(8, mMockNativeAd);
         checkPlacedPositions(15, adsAt15repeating, 1, 5, 8);
         checkInsertionPositions(15, adsAt15repeating, 11, 13, 15);
 
@@ -579,9 +571,9 @@ public void placedAds_thenClearRange_multiple_shouldResetInsertionPositions() {
         checkPlacedPositions(15, adsAt15repeating);
         checkInsertionPositions(15, adsAt15repeating, 1, 4, 6, 8, 10, 12, 14);
 
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-        adsAt15repeating.placeAd(5, mockNativeAdData);
-        adsAt15repeating.placeAd(8, mockNativeAdData);
+        adsAt15repeating.placeAd(1, mMockNativeAd);
+        adsAt15repeating.placeAd(5, mMockNativeAd);
+        adsAt15repeating.placeAd(8, mMockNativeAd);
         checkPlacedPositions(15, adsAt15repeating, 1, 5, 8);
         checkInsertionPositions(15, adsAt15repeating, 11, 13, 15);
 
@@ -599,9 +591,9 @@ public void placedAds_thenClearRange_descending_multiple_shouldResetInsertionPos
         checkPlacedPositions(15, adsAt15repeating);
         checkInsertionPositions(15, adsAt15repeating, 1, 4, 6, 8, 10, 12, 14);
 
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-        adsAt15repeating.placeAd(5, mockNativeAdData);
-        adsAt15repeating.placeAd(8, mockNativeAdData);
+        adsAt15repeating.placeAd(1, mMockNativeAd);
+        adsAt15repeating.placeAd(5, mMockNativeAd);
+        adsAt15repeating.placeAd(8, mMockNativeAd);
         checkPlacedPositions(15, adsAt15repeating, 1, 5, 8);
         checkInsertionPositions(15, adsAt15repeating, 11, 13, 15);
 
@@ -616,21 +608,21 @@ public void placedAds_thenClearRange_descending_multiple_shouldResetInsertionPos
 
     @Test
     public void placeAds_thenClear_shouldCallDestroy() {
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-        adsAt15repeating.placeAd(5, mockNativeAdData2);
-        adsAt15repeating.placeAd(8, mockNativeAdData3);
+        adsAt15repeating.placeAd(1, mMockNativeAd);
+        adsAt15repeating.placeAd(5, mMockNativeAd2);
+        adsAt15repeating.placeAd(8, mMockNativeAd3);
 
         adsAt15repeating.clearAdsInRange(5, 10);
-        verify(mockNativeResponse, never()).destroy();
-        verify(mockNativeResponse2).destroy();
-        verify(mockNativeResponse3).destroy();
+        verify(mMockNativeAd, never()).destroy();
+        verify(mMockNativeAd2).destroy();
+        verify(mMockNativeAd3).destroy();
     }
 
     @Test
     public void insertItems_afterPlacing() {
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-        adsAt15repeating.placeAd(5, mockNativeAdData);
-        adsAt15repeating.placeAd(8, mockNativeAdData);
+        adsAt15repeating.placeAd(1, mMockNativeAd);
+        adsAt15repeating.placeAd(5, mMockNativeAd);
+        adsAt15repeating.placeAd(8, mMockNativeAd);
 
         adsAt15repeating.insertItem(1);
         adsAt15repeating.insertItem(4);
@@ -651,9 +643,9 @@ public void insertItems_beforePlacing() {
 
     @Test
     public void removeThenInsertItem_atZero_shouldBeAtZero() {
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-        adsAt15repeating.placeAd(5, mockNativeAdData);
-        adsAt15repeating.placeAd(8, mockNativeAdData);
+        adsAt15repeating.placeAd(1, mMockNativeAd);
+        adsAt15repeating.placeAd(5, mMockNativeAd);
+        adsAt15repeating.placeAd(8, mMockNativeAd);
 
         adsAt15repeating.removeItem(0);
         checkPlacedPositions(20, adsAt15repeating, 0, 4, 7);
@@ -666,18 +658,18 @@ public void removeThenInsertItem_atZero_shouldBeAtZero() {
 
     @Test
     public void placeThenInsertThenPlace() {
-        adsAt15repeating.placeAd(4, mockNativeAdData);
+        adsAt15repeating.placeAd(4, mMockNativeAd);
         adsAt15repeating.insertItem(4);
-        adsAt15repeating.placeAd(1, mockNativeAdData);
+        adsAt15repeating.placeAd(1, mMockNativeAd);
 
         checkPlacedPositions(20, adsAt15repeating, 1, 6);
     }
 
     @Test
     public void removeItems_afterPlacing() {
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-        adsAt15repeating.placeAd(5, mockNativeAdData);
-        adsAt15repeating.placeAd(8, mockNativeAdData);
+        adsAt15repeating.placeAd(1, mMockNativeAd);
+        adsAt15repeating.placeAd(5, mMockNativeAd);
+        adsAt15repeating.placeAd(8, mMockNativeAd);
 
         checkPlacedPositions(20, adsAt15repeating, 1, 5, 8);
 
@@ -697,9 +689,9 @@ public void removeItems_afterPlacing() {
 
     @Test
     public void removeItemsBetweenAds_thenInsert_shouldClumpAds() {
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-        adsAt15repeating.placeAd(5, mockNativeAdData);
-        adsAt15repeating.placeAd(8, mockNativeAdData);
+        adsAt15repeating.placeAd(1, mMockNativeAd);
+        adsAt15repeating.placeAd(5, mMockNativeAd);
+        adsAt15repeating.placeAd(8, mMockNativeAd);
 
         adsAt15repeating.removeItem(4);
         adsAt15repeating.removeItem(4);
@@ -727,9 +719,9 @@ public void removeItems_beforePlacing() {
 
     @Test
     public void removeItem_withClumpedAdsBeforeIt_shouldCorrectlyRemoveItem() throws Exception {
-        adsRepeating.placeAd(2, mockNativeAdData);
-        adsRepeating.placeAd(5, mockNativeAdData);
-        adsRepeating.placeAd(8, mockNativeAdData);
+        adsRepeating.placeAd(2, mMockNativeAd);
+        adsRepeating.placeAd(5, mMockNativeAd);
+        adsRepeating.placeAd(8, mMockNativeAd);
 
         checkPlacedPositions(20, adsRepeating, 2, 5, 8);
         assertThat(adsRepeating.getAdjustedCount(7)).isEqualTo(10);
@@ -751,9 +743,9 @@ public void removeItem_withClumpedAdsBeforeIt_shouldCorrectlyRemoveItem() throws
 
     @Test
     public void removeItems_afterClumpedAds_shouldStayClumped() {
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-        adsAt15repeating.placeAd(5, mockNativeAdData);
-        adsAt15repeating.placeAd(8, mockNativeAdData);
+        adsAt15repeating.placeAd(1, mMockNativeAd);
+        adsAt15repeating.placeAd(5, mMockNativeAd);
+        adsAt15repeating.placeAd(8, mMockNativeAd);
 
         adsAt15repeating.removeItem(4);
         adsAt15repeating.removeItem(4);
@@ -772,9 +764,9 @@ public void removeItems_afterClumpedAds_shouldStayClumped() {
 
     @Test
     public void moveItems_afterPlacing() {
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-        adsAt15repeating.placeAd(5, mockNativeAdData);
-        adsAt15repeating.placeAd(8, mockNativeAdData);
+        adsAt15repeating.placeAd(1, mMockNativeAd);
+        adsAt15repeating.placeAd(5, mMockNativeAd);
+        adsAt15repeating.placeAd(8, mMockNativeAd);
 
         assertThat(adsAt15repeating.getAdjustedPosition(4)).isEqualTo(6);
         assertThat(adsAt15repeating.getAdjustedPosition(5)).isEqualTo(7);
@@ -789,19 +781,15 @@ public void moveItems_afterPlacing() {
 
     @Test
     public void clearAll_shouldCallDestroyOnAdData_shouldResetPositions() {
-        when(mockNativeAdData.getAd()).thenReturn(mockNativeResponse);
-        when(mockNativeAdData2.getAd()).thenReturn(mockNativeResponse2);
-        when(mockNativeAdData3.getAd()).thenReturn(mockNativeResponse3);
-
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-        adsAt15repeating.placeAd(5, mockNativeAdData2);
-        adsAt15repeating.placeAd(8, mockNativeAdData3);
+        adsAt15repeating.placeAd(1, mMockNativeAd);
+        adsAt15repeating.placeAd(5, mMockNativeAd2);
+        adsAt15repeating.placeAd(8, mMockNativeAd3);
 
         adsAt15repeating.clearAds();
 
-        verify(mockNativeResponse).destroy();
-        verify(mockNativeResponse2).destroy();
-        verify(mockNativeResponse3).destroy();
+        verify(mMockNativeAd).destroy();
+        verify(mMockNativeAd2).destroy();
+        verify(mMockNativeAd3).destroy();
 
         // Should reset to original positions
         checkInsertionPositions(10, adsAt15repeating, 1, 4, 6, 8, 10);
@@ -826,7 +814,7 @@ void checkPlacedPositions(int maxValue, PlacementData placementData, Integer...
         for (int i = 0; i < maxValue; i++) {
             if (placementData.isPlacedAd(i)) {
                 actual.add(i);
-                assertThat(placementData.getPlacedAd(i)).isEqualTo(mockNativeAdData);
+                assertThat(placementData.getPlacedAd(i)).isEqualTo(mMockNativeAd);
             } else {
                 assertThat(placementData.getPlacedAd(i)).isNull();
             }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/PositioningRequestTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/PositioningRequestTest.java
index c67dd6cf..5f42e4ac 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/PositioningRequestTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/PositioningRequestTest.java
@@ -1,6 +1,7 @@
 package com.mopub.nativeads;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 import com.mopub.network.MoPubNetworkError;
 import com.mopub.volley.NetworkResponse;
 import com.mopub.volley.Response;
@@ -11,6 +12,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
+import org.robolectric.annotation.Config;
 
 import java.util.TreeMap;
 
@@ -18,9 +20,10 @@
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class PositioningRequestTest {
 
-    String url = "http://example.com";
+    String url = "https://example.com";
     @Mock
     Response.Listener<MoPubNativeAdPositioning.MoPubClientPositioning> mockListener;
     @Mock
@@ -141,4 +144,4 @@ private void checkException(String json, String expectedMessage) throws Exceptio
         }
         fail("Should have received an exception");
     }
-}
\ No newline at end of file
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
index 824a39bc..b33c03ff 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
@@ -3,12 +3,12 @@
 import android.app.Activity;
 import android.content.Context;
 import android.content.pm.PackageManager;
-import android.os.Build.VERSION_CODES;
 
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.DownloadResponse;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.MoPubErrorCode;
 import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
 import com.mopub.nativeads.PositioningSource.PositioningListener;
@@ -44,6 +44,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class ServerPositioningSourceTest {
     @Mock PositioningListener mockPositioningListener;
     @Captor ArgumentCaptor<PositioningRequest> positionRequestCaptor;
@@ -65,8 +66,6 @@ public void setUp() {
         Activity activity = Robolectric.buildActivity(Activity.class).create().get();
         spyActivity = spy(activity);
 
-
-
         subject = new ServerPositioningSource(spyActivity);
         setupClientMetadata();
         Networking.setRequestQueueForTesting(mockRequestQueue);
@@ -146,22 +145,21 @@ public void loadPositions_thenComplete_withValidResponse_shouldCallOnLoadListene
         verify(mockPositioningListener).onLoad(eq(response));
     }
 
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void loadPositions_thenComplete_withErrorResponse_shouldRetry() throws Exception {
         subject.loadPositions("test_ad_unit", mockPositioningListener);
 
         verify(mockRequestQueue).add(positionRequestCaptor.capture());
         reset(mockRequestQueue);
+
         // We get VolleyErrors for invalid JSON, 404s, 5xx, and {"error": "WARMING_UP"}
         positionRequestCaptor.getValue().deliverError(new VolleyError("Some test error"));
 
-        Robolectric.getUiThreadScheduler().advanceToLastPostedRunnable();
+        Robolectric.getForegroundThreadScheduler().advanceToLastPostedRunnable();
         verify(mockRequestQueue).add(any(Request.class));
     }
 
 
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void loadPositions_withPendingRetry_shouldNotRetry() {
         subject.loadPositions("test_ad_unit", mockPositioningListener);
@@ -171,7 +169,7 @@ public void loadPositions_withPendingRetry_shouldNotRetry() {
         positionRequestCaptor.getValue().deliverError(new VolleyError("testError"));
 
         subject.loadPositions("test_ad_unit", mockPositioningListener);
-        Robolectric.getUiThreadScheduler().advanceToLastPostedRunnable();
+        Robolectric.getForegroundThreadScheduler().advanceToLastPostedRunnable();
         // If a retry happened, we'd have two here.
         verify(mockRequestQueue).add(any(Request.class));
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/BaseForwardingNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeAdTest.java
similarity index 56%
rename from mopub-sdk/src/test/java/com/mopub/nativeads/BaseForwardingNativeAdTest.java
rename to mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeAdTest.java
index d9d5a191..22a34c85 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/BaseForwardingNativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeAdTest.java
@@ -1,29 +1,59 @@
 package com.mopub.nativeads;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-public class BaseForwardingNativeAdTest {
+@Config(constants = BuildConfig.class)
+public class StaticNativeAdTest {
 
-    private BaseForwardingNativeAd subject;
+    private StaticNativeAd subject;
 
     @Before
     public void setUp() throws Exception {
-        subject = new BaseForwardingNativeAd() {};
+        subject = new StaticNativeAd() {};
+
+        subject.setTitle("title");
+        subject.setText("text");
+        subject.setMainImageUrl("mainImageUrl");
+        subject.setIconImageUrl("iconImageUrl");
+        subject.setClickDestinationUrl("clickDestinationUrl");
+        subject.setCallToAction("callToAction");
+        subject.setStarRating(5.0);
+        subject.setPrivacyInformationIconClickThroughUrl("privacyInformationIconClickThroughUrl");
+        subject.setPrivacyInformationIconImageUrl("privacyInformationIconImageUrl");
+        subject.addExtra("extra", "extraValue");
+        subject.addExtra("extraImage", "extraImageUrl");
+        subject.addImpressionTracker("impressionUrl");
+        subject.setImpressionMinTimeViewed(500);
     }
 
     @Test
-    public void constructor_shouldInitializeMembers() throws Exception {
+    public void getters_shouldReturnCorrectValues() throws Exception {
+        assertThat(subject.getTitle()).isEqualTo("title");
+        assertThat(subject.getText()).isEqualTo("text");
+        assertThat(subject.getMainImageUrl()).isEqualTo("mainImageUrl");
+        assertThat(subject.getIconImageUrl()).isEqualTo("iconImageUrl");
+        assertThat(subject.getClickDestinationUrl()).isEqualTo("clickDestinationUrl");
+        assertThat(subject.getCallToAction()).isEqualTo("callToAction");
+        assertThat(subject.getStarRating()).isEqualTo(5.0);
+        assertThat(subject.getPrivacyInformationIconClickThroughUrl()).isEqualTo(
+                "privacyInformationIconClickThroughUrl");
+        assertThat(subject.getPrivacyInformationIconImageUrl()).isEqualTo
+                ("privacyInformationIconImageUrl");
+        assertThat(subject.getExtra("extra")).isEqualTo("extraValue");
+        assertThat(subject.getExtra("extraImage")).isEqualTo("extraImageUrl");
+        assertThat(subject.getExtras()).hasSize(2);
+        assertThat(subject.getImpressionTrackers()).containsOnly("impressionUrl");
+        assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(500);
         assertThat(subject.getImpressionMinPercentageViewed()).isEqualTo(50);
-        assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(1000);
-        assertThat(subject.getImpressionTrackers()).isEmpty();
-        assertThat(subject.getExtras()).isEmpty();
     }
 
     @Test
@@ -91,4 +121,13 @@ public void setStarRating_withValuesOutsideOfValidRange_shouldNotSetStarRating()
         subject.setStarRating(-0.001);
         assertThat(subject.getStarRating()).isEqualTo(initialStarRating);
     }
+
+    @Test
+    public void isImpressionRecorded_withRecordedImpression_shouldReturnTrue() throws Exception {
+        assertThat(subject.isImpressionRecorded()).isFalse();
+
+        subject.setImpressionRecorded();
+
+        assertThat(subject.isImpressionRecorded()).isTrue();
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeViewHolderTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeViewHolderTest.java
new file mode 100644
index 00000000..349dcf82
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeViewHolderTest.java
@@ -0,0 +1,157 @@
+package com.mopub.nativeads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.widget.Button;
+import android.widget.ImageView;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.Utils;
+import com.mopub.mobileads.BuildConfig;
+import com.mopub.network.MaxWidthImageLoader;
+import com.mopub.network.MoPubRequestQueue;
+import com.mopub.network.Networking;
+import com.mopub.volley.toolbox.ImageLoader;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Captor;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class StaticNativeViewHolderTest {
+    private Context context;
+    private RelativeLayout relativeLayout;
+    private ViewBinder viewBinder;
+    private TextView titleView;
+    private TextView textView;
+    private TextView callToActionView;
+    private ImageView mainImageView;
+    private ImageView iconImageView;
+    private TextView extrasTextView;
+    private ImageView extrasImageView;
+    private ImageView extrasImageView2;
+    private ImageView privacyInformationIconImageView;
+
+    @Mock private MoPubRequestQueue mockRequestQueue;
+    @Mock private MaxWidthImageLoader mockImageLoader;
+    @Mock private ImageLoader.ImageContainer mockImageContainer;
+    @Mock private Bitmap mockBitmap;
+
+    @Captor private ArgumentCaptor<ImageLoader.ImageListener> mainImageCaptor;
+    @Captor private ArgumentCaptor<ImageLoader.ImageListener> iconImageCaptor;
+
+    @Before
+    public void setUp() throws Exception {
+
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+        Networking.setImageLoaderForTesting(mockImageLoader);
+        context = Robolectric.buildActivity(Activity.class).create().get();
+        relativeLayout = new RelativeLayout(context);
+        relativeLayout.setId((int) Utils.generateUniqueId());
+
+        // Fields in the web ui
+        titleView = new TextView(context);
+        titleView.setId((int) Utils.generateUniqueId());
+        textView = new TextView(context);
+        textView.setId((int) Utils.generateUniqueId());
+        callToActionView = new Button(context);
+        callToActionView.setId((int) Utils.generateUniqueId());
+        mainImageView = new ImageView(context);
+        mainImageView.setId((int) Utils.generateUniqueId());
+        iconImageView = new ImageView(context);
+        iconImageView.setId((int) Utils.generateUniqueId());
+        privacyInformationIconImageView = new ImageView(context);
+        privacyInformationIconImageView.setId((int) Utils.generateUniqueId());
+
+        // Extras
+        extrasTextView = new TextView(context);
+        extrasTextView.setId((int) Utils.generateUniqueId());
+        extrasImageView = new ImageView(context);
+        extrasImageView.setId((int) Utils.generateUniqueId());
+        extrasImageView2 = new ImageView(context);
+        extrasImageView2.setId((int) Utils.generateUniqueId());
+
+        relativeLayout.addView(titleView);
+        relativeLayout.addView(textView);
+        relativeLayout.addView(callToActionView);
+        relativeLayout.addView(mainImageView);
+        relativeLayout.addView(iconImageView);
+        relativeLayout.addView(extrasTextView);
+        relativeLayout.addView(extrasImageView);
+        relativeLayout.addView(extrasImageView2);
+        relativeLayout.addView(privacyInformationIconImageView);
+    }
+
+    @Test
+    public void fromViewBinder_shouldPopulateClassFields() throws Exception {
+        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
+                .titleId(titleView.getId())
+                .textId(textView.getId())
+                .callToActionId(callToActionView.getId())
+                .mainImageId(mainImageView.getId())
+                .iconImageId(iconImageView.getId())
+                .privacyInformationIconImageId(privacyInformationIconImageView.getId())
+                .build();
+
+        StaticNativeViewHolder staticNativeViewHolder =
+                StaticNativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
+
+        assertThat(staticNativeViewHolder.titleView).isEqualTo(titleView);
+        assertThat(staticNativeViewHolder.textView).isEqualTo(textView);
+        assertThat(staticNativeViewHolder.callToActionView).isEqualTo(callToActionView);
+        assertThat(staticNativeViewHolder.mainImageView).isEqualTo(mainImageView);
+        assertThat(staticNativeViewHolder.iconImageView).isEqualTo(iconImageView);
+        assertThat(staticNativeViewHolder.privacyInformationIconImageView).isEqualTo(
+                privacyInformationIconImageView);
+    }
+
+    @Test
+    public void fromViewBinder_withSubsetOfFields_shouldLeaveOtherFieldsNull() throws Exception {
+        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
+                .titleId(titleView.getId())
+                .iconImageId(iconImageView.getId())
+                .build();
+
+        StaticNativeViewHolder staticNativeViewHolder =
+                StaticNativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
+
+        assertThat(staticNativeViewHolder.titleView).isEqualTo(titleView);
+        assertThat(staticNativeViewHolder.textView).isNull();
+        assertThat(staticNativeViewHolder.callToActionView).isNull();
+        assertThat(staticNativeViewHolder.mainImageView).isNull();
+        assertThat(staticNativeViewHolder.iconImageView).isEqualTo(iconImageView);
+        assertThat(staticNativeViewHolder.privacyInformationIconImageView).isNull();
+    }
+
+    @Test
+    public void fromViewBinder_withNonExistantIds_shouldLeaveFieldsNull() throws Exception {
+        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
+                .titleId((int) Utils.generateUniqueId())
+                .textId((int) Utils.generateUniqueId())
+                .callToActionId((int) Utils.generateUniqueId())
+                .mainImageId((int) Utils.generateUniqueId())
+                .iconImageId((int) Utils.generateUniqueId())
+                .build();
+
+        StaticNativeViewHolder staticNativeViewHolder =
+                StaticNativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
+
+        assertThat(staticNativeViewHolder.titleView).isNull();
+        assertThat(staticNativeViewHolder.textView).isNull();
+        assertThat(staticNativeViewHolder.callToActionView).isNull();
+        assertThat(staticNativeViewHolder.mainImageView).isNull();
+        assertThat(staticNativeViewHolder.iconImageView).isNull();
+        assertThat(staticNativeViewHolder.privacyInformationIconImageView).isNull();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/VideoNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/VideoNativeAdTest.java
new file mode 100644
index 00000000..8c271a6d
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/VideoNativeAdTest.java
@@ -0,0 +1,64 @@
+package com.mopub.nativeads;
+
+import android.annotation.TargetApi;
+import android.os.Build;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class VideoNativeAdTest {
+
+    private VideoNativeAd subject;
+
+    @Before
+    public void setUp() {
+        subject = new VideoNativeAd() {
+            @Override
+            public void onStateChanged(boolean playWhenReady, int playbackState) { }
+
+            @Override
+            public void onError(Exception e) { }
+        };
+
+        subject.setTitle("title");
+        subject.setText("text");
+        subject.setMainImageUrl("mainImageUrl");
+        subject.setIconImageUrl("iconImageUrl");
+        subject.setClickDestinationUrl("clickDestinationUrl");
+        subject.setVastVideo("vastVideo");
+        subject.setCallToAction("callToAction");
+        subject.setPrivacyInformationIconClickThroughUrl("privacyInformationIconClickThroughUrl");
+        subject.setPrivacyInformationIconImageUrl("privacyInformationIconImageUrl");
+        subject.addExtra("extra", "extraValue");
+        subject.addExtra("extraImage", "extraImageUrl");
+        subject.addImpressionTracker("impressionUrl");
+    }
+
+    @Test
+    public void getters_shouldReturnCorrectValues() {
+        assertThat(subject.getTitle()).isEqualTo("title");
+        assertThat(subject.getText()).isEqualTo("text");
+        assertThat(subject.getMainImageUrl()).isEqualTo("mainImageUrl");
+        assertThat(subject.getIconImageUrl()).isEqualTo("iconImageUrl");
+        assertThat(subject.getClickDestinationUrl()).isEqualTo("clickDestinationUrl");
+        assertThat(subject.getCallToAction()).isEqualTo("callToAction");
+        assertThat(subject.getPrivacyInformationIconClickThroughUrl()).isEqualTo(
+                "privacyInformationIconClickThroughUrl");
+        assertThat(subject.getPrivacyInformationIconImageUrl()).isEqualTo
+                ("privacyInformationIconImageUrl");
+        assertThat(subject.getExtra("extra")).isEqualTo("extraValue");
+        assertThat(subject.getExtra("extraImage")).isEqualTo("extraImageUrl");
+        assertThat(subject.getExtras()).hasSize(2);
+        assertThat(subject.getImpressionTrackers()).containsOnly("impressionUrl");
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
index bee7ae9e..4431db2d 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
@@ -10,6 +10,7 @@
 import android.view.Window;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 import com.mopub.nativeads.VisibilityTracker.TrackingInfo;
 
 import org.fest.util.Lists;
@@ -21,6 +22,7 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowSystemClock;
 
 import java.util.ArrayList;
@@ -40,6 +42,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class VisibilityTrackerTest {
     private static final int MIN_PERCENTAGE_VIEWED = 50;
 
@@ -196,6 +199,7 @@ public void visibilityRunnable_run_withNonVisibleView_shouldCallOnNonVisibleCall
 
         ArgumentCaptor<List> visibleCaptor = ArgumentCaptor.forClass(List.class);
         ArgumentCaptor<List> invisibleCaptor = ArgumentCaptor.forClass(List.class);
+        // noinspection unchecked
         verify(visibilityTrackerListener).onVisibilityChanged(visibleCaptor.capture(),
                 invisibleCaptor.capture());
         assertThat(visibleCaptor.getValue().size()).isEqualTo(0);
@@ -217,63 +221,63 @@ public void hasRequiredTimeElapsed_withElapsedTimeLessThanMinTimeViewed_shouldRe
     @Test
     public void isMostlyVisible_whenParentIsNull_shouldReturnFalse() throws Exception {
         view = createViewMock(View.VISIBLE, 100, 100, 100, 100, false, true);
-        assertThat(visibilityChecker.isVisible(view, MIN_PERCENTAGE_VIEWED)).isFalse();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
     }
 
     @Test
     public void isMostlyVisible_whenViewIsOffScreen_shouldReturnFalse() throws Exception {
         view = createViewMock(View.VISIBLE, 100, 100, 100, 100, true, false);
-        assertThat(visibilityChecker.isVisible(view, MIN_PERCENTAGE_VIEWED)).isFalse();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
     }
 
     @Test
     public void isMostlyVisible_whenViewIsEntirelyOnScreen_shouldReturnTrue() throws Exception {
         view = createViewMock(View.VISIBLE, 100, 100, 100, 100, true, true);
 
-        assertThat(visibilityChecker.isVisible(view, MIN_PERCENTAGE_VIEWED)).isTrue();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isTrue();
     }
 
     @Test
     public void isMostlyVisible_whenViewIs50PercentVisible_shouldReturnTrue() throws Exception {
         view = createViewMock(View.VISIBLE, 50, 100, 100, 100, true, true);
 
-        assertThat(visibilityChecker.isVisible(view, MIN_PERCENTAGE_VIEWED)).isTrue();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isTrue();
     }
 
     @Test
     public void isMostlyVisible_whenViewIs49PercentVisible_shouldReturnFalse() throws Exception {
         view = createViewMock(View.VISIBLE, 49, 100, 100, 100, true, true);
 
-        assertThat(visibilityChecker.isVisible(view, MIN_PERCENTAGE_VIEWED)).isFalse();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
     }
 
     @Test
     public void isMostlyVisible_whenVisibleAreaIsZero_shouldReturnFalse() throws Exception {
         view = createViewMock(View.VISIBLE, 0, 0, 100, 100, true, true);
 
-        assertThat(visibilityChecker.isVisible(view, MIN_PERCENTAGE_VIEWED)).isFalse();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
     }
 
     @Test
     public void isMostlyVisible_whenViewIsInvisibleOrGone_shouldReturnFalse() throws Exception {
         View view = createViewMock(View.INVISIBLE, 100, 100, 100, 100, true, true);
-        assertThat(visibilityChecker.isVisible(view, MIN_PERCENTAGE_VIEWED)).isFalse();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
 
         reset(view);
         view = createViewMock(View.GONE, 100, 100, 100, 100, true, true);
-        assertThat(visibilityChecker.isVisible(view, MIN_PERCENTAGE_VIEWED)).isFalse();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
     }
 
     @Test
     public void isMostlyVisible_whenViewHasZeroWidthAndHeight_shouldReturnFalse() throws Exception {
         view = createViewMock(View.VISIBLE, 100, 100, 0, 0, true, true);
 
-        assertThat(visibilityChecker.isVisible(view, MIN_PERCENTAGE_VIEWED)).isFalse();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
     }
 
     @Test
     public void isMostlyVisible_whenViewIsNull_shouldReturnFalse() throws Exception {
-        assertThat(visibilityChecker.isVisible(null, MIN_PERCENTAGE_VIEWED)).isFalse();
+        assertThat(visibilityChecker.isVisible(null, null, MIN_PERCENTAGE_VIEWED)).isFalse();
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java
index 3a46eb1e..56f0bc59 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java
@@ -1,16 +1,27 @@
 package com.mopub.nativeads.factories;
 
+import com.mopub.mobileads.BuildConfig;
 import com.mopub.nativeads.CustomEventNative;
 
+import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 
-@RunWith(RobolectricTestRunner.class)
+
+@Config(constants = BuildConfig.class)
+@RunWith(RobolectricGradleTestRunner.class)
 public class CustomEventNativeFactoryTest {
+
+    @Before
+    public void setUp() {
+        CustomEventNativeFactory.setInstance(new CustomEventNativeFactory());
+    }
+
     @Test
     public void create_withValidClassName_shouldCreateClass() throws Exception {
         assertCustomEventClassCreated("com.mopub.nativeads.MoPubCustomEventNative");
diff --git a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java b/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
index d7bd6f3b..4c3c70e8 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
@@ -2,7 +2,9 @@
 
 import android.app.Activity;
 import android.location.Location;
+import android.os.Build;
 
+import com.mopub.TestSdkHelper;
 import com.mopub.common.AdFormat;
 import com.mopub.common.AdType;
 import com.mopub.common.DataKeys;
@@ -11,6 +13,7 @@
 import com.mopub.common.event.MoPubEvents;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.ResponseHeader;
+import com.mopub.mobileads.BuildConfig;
 import com.mopub.volley.NetworkResponse;
 import com.mopub.volley.Response;
 
@@ -23,6 +26,7 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 
 import java.nio.charset.Charset;
 import java.util.Collections;
@@ -40,6 +44,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class AdRequestTest {
 
     @Mock private AdRequest.Listener mockListener;
@@ -63,6 +68,11 @@ public void setup() {
         defaultHeaders.put(ResponseHeader.IMPRESSION_URL.getKey(), "impression");
         defaultHeaders.put(ResponseHeader.FAIL_URL.getKey(), "fail_url");
         defaultHeaders.put(ResponseHeader.REFRESH_TIME.getKey(), "30");
+        defaultHeaders.put(ResponseHeader.PLAY_VISIBLE_PERCENT.getKey(), "50%");
+        defaultHeaders.put(ResponseHeader.PAUSE_VISIBLE_PERCENT.getKey(), "25");
+        defaultHeaders.put(ResponseHeader.IMPRESSION_MIN_VISIBLE_PERCENT.getKey(), "33%");
+        defaultHeaders.put(ResponseHeader.IMPRESSION_VISIBLE_MS.getKey(), "2000");
+        defaultHeaders.put(ResponseHeader.MAX_BUFFER_MS.getKey(), "1000");
 
         MoPubEvents.setEventDispatcher(mockEventDispatcher);
     }
@@ -97,9 +107,13 @@ public void parseNetworkResponse_withStringBody_shouldLogScribeEvent() throws Ex
     }
 
     @Test
-    public void parseNetworkResponse_withServerExtrasInResponseBody_shouldSucceed() throws Exception {
+    public void parseNetworkResponse_withServerExtrasInResponseBody_shouldSucceed_shouldCombineServerExtras() throws Exception {
         defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.HTML);
         defaultHeaders.put(ResponseHeader.FULL_AD_TYPE.getKey(), "anything");
+        defaultHeaders.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "class name");
+        defaultHeaders.put(ResponseHeader.CUSTOM_EVENT_DATA.getKey(),
+                "{customEventKey1: value1, customEventKey2: value2}");
+
         NetworkResponse testResponse =
                 new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
         final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
@@ -111,11 +125,14 @@ public void parseNetworkResponse_withServerExtrasInResponseBody_shouldSucceed()
         assertThat(serverExtras.get(DataKeys.SCROLLABLE_KEY)).isEqualToIgnoringCase("false");
         assertThat(serverExtras.get(DataKeys.REDIRECT_URL_KEY)).isEqualToIgnoringCase("redirect");
         assertThat(serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY)).isEqualToIgnoringCase("click_tracking");
+
+        assertThat(serverExtras.get("customEventKey1")).isEqualTo("value1");
+        assertThat(serverExtras.get("customEventKey2")).isEqualTo("value2");
     }
 
     @Test
     public void parseNetworkResponse_nonJsonStringBodyForNative_jsonParseShouldFail() {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.NATIVE);
+        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.STATIC_NATIVE);
         NetworkResponse testResponse =
                 new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
 
@@ -128,7 +145,7 @@ public void parseNetworkResponse_nonJsonStringBodyForNative_jsonParseShouldFail(
 
     @Test
     public void parseNetworkResponse_nonJsonStringBodyForNative_shouldNotLogScribeEvent() {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.NATIVE);
+        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.STATIC_NATIVE);
         NetworkResponse testResponse =
                 new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
 
@@ -137,9 +154,96 @@ public void parseNetworkResponse_nonJsonStringBodyForNative_shouldNotLogScribeEv
         verify(mockEventDispatcher, never()).dispatch(any(BaseEvent.class));
     }
 
+    @Test
+    @Config(sdk = Build.VERSION_CODES.JELLY_BEAN)
+    public void parseNetworkResponse_forNativeVideo_shouldSucceed() throws Exception {
+        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.VIDEO_NATIVE);
+        NetworkResponse testResponse = new NetworkResponse(200,
+                "{\"abc\": \"def\"}".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+
+        // Check the server extras
+        final Map<String, String> serverExtras = response.result.getServerExtras();
+        assertThat(serverExtras).isNotNull();
+        assertThat(serverExtras).isNotEmpty();
+        assertThat(serverExtras.get(DataKeys.PLAY_VISIBLE_PERCENT)).isEqualTo("50");
+        assertThat(serverExtras.get(DataKeys.PAUSE_VISIBLE_PERCENT)).isEqualTo("25");
+        assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT)).isEqualTo("33");
+        assertThat(serverExtras.get(DataKeys.IMPRESSION_VISIBLE_MS)).isEqualTo("2000");
+        assertThat(serverExtras.get(DataKeys.MAX_BUFFER_MS)).isEqualTo("1000");
+    }
+
+    @Test
+    @Config(sdk = Build.VERSION_CODES.JELLY_BEAN)
+    public void parseNetworkResponse_forNativeVideo_shouldCombineServerExtrasAndEventData() throws Exception {
+        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.VIDEO_NATIVE);
+        defaultHeaders.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "class name");
+        defaultHeaders.put(ResponseHeader.CUSTOM_EVENT_DATA.getKey(),
+                "{customEventKey1: value1, customEventKey2: value2}");
+        NetworkResponse testResponse = new NetworkResponse(200,
+                "{\"abc\": \"def\"}".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+
+        // Check the server extras
+        final Map<String, String> serverExtras = response.result.getServerExtras();
+        assertThat(serverExtras).isNotNull();
+        assertThat(serverExtras).isNotEmpty();
+
+        assertThat(serverExtras.get(DataKeys.PLAY_VISIBLE_PERCENT)).isEqualTo("50");
+        assertThat(serverExtras.get(DataKeys.PAUSE_VISIBLE_PERCENT)).isEqualTo("25");
+        assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT)).isEqualTo("33");
+        assertThat(serverExtras.get(DataKeys.IMPRESSION_VISIBLE_MS)).isEqualTo("2000");
+        assertThat(serverExtras.get(DataKeys.MAX_BUFFER_MS)).isEqualTo("1000");
+
+        assertThat(serverExtras.get("customEventKey1")).isEqualTo("value1");
+        assertThat(serverExtras.get("customEventKey2")).isEqualTo("value2");
+    }
+
+    @Test
+    public void parseNetworkResponse_forNativeVideo_onAPILevelBefore16_shouldError() throws Exception {
+        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1);
+
+        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.VIDEO_NATIVE);
+        NetworkResponse testResponse = new NetworkResponse(200,
+                "{\"abc\": \"def\"}".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+
+        assertThat(response.error).isNotNull();
+        assertThat(response.error).isInstanceOf(MoPubNetworkError.class);
+        assertThat(((MoPubNetworkError) response.error).getReason())
+                .isEqualTo(MoPubNetworkError.Reason.UNSPECIFIED);
+    }
+
+    @Test
+    @Config(sdk = Build.VERSION_CODES.JELLY_BEAN)
+    public void parseNetworkResponse_forNativeVideo_withInvalidValues_shouldSucceed_shouldParseNull() throws Exception {
+        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.VIDEO_NATIVE);
+        defaultHeaders.put(ResponseHeader.PLAY_VISIBLE_PERCENT.getKey(), "-1");
+        defaultHeaders.put(ResponseHeader.PAUSE_VISIBLE_PERCENT.getKey(), "101%");
+        defaultHeaders.put(ResponseHeader.IMPRESSION_MIN_VISIBLE_PERCENT.getKey(), "XX%");
+        NetworkResponse testResponse = new NetworkResponse(200,
+                "{\"abc\": \"def\"}".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+
+        // Check the server extras
+        final Map<String, String> serverExtras = response.result.getServerExtras();
+        assertThat(serverExtras).isNotNull();
+        assertThat(serverExtras).isNotEmpty();
+        assertThat(serverExtras.get(DataKeys.PLAY_VISIBLE_PERCENT)).isNull();
+        assertThat(serverExtras.get(DataKeys.PAUSE_VISIBLE_PERCENT)).isNull();
+        assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT)).isNull();
+        assertThat(serverExtras.get(DataKeys.IMPRESSION_VISIBLE_MS)).isEqualTo("2000");
+        assertThat(serverExtras.get(DataKeys.MAX_BUFFER_MS)).isEqualTo("1000");
+    }
+
+
     @Test
     public void parseNetworkResponse_withWarmupHeaderTrue_shouldError() {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.NATIVE);
+        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.STATIC_NATIVE);
         defaultHeaders.put(ResponseHeader.WARMUP.getKey(), "1");
         NetworkResponse testResponse =
                 new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
@@ -152,7 +256,7 @@ public void parseNetworkResponse_withWarmupHeaderTrue_shouldError() {
 
     @Test
     public void parseNetworkResponse_withWarmupHeaderTrue_shouldNotLogScribeEvent() {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.NATIVE);
+        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.STATIC_NATIVE);
         defaultHeaders.put(ResponseHeader.WARMUP.getKey(), "1");
         NetworkResponse testResponse =
                 new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
@@ -226,7 +330,7 @@ public void parseNetworkResponse_withClearAdType_shouldLogScribeEvent() {
 
     @Test
     public void parseNetworkResponse_withBadJSON_shouldReturnError() {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.NATIVE);
+        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.STATIC_NATIVE);
         NetworkResponse badNativeNetworkResponse = new NetworkResponse(200,
                 "{[abc}".getBytes(Charset.defaultCharset()),
                 defaultHeaders, false);
@@ -238,6 +342,25 @@ public void parseNetworkResponse_withBadJSON_shouldReturnError() {
         assertThat(response.error.getCause()).isExactlyInstanceOf(JSONException.class);
     }
 
+    @Test
+    public void parseNetworkResponse_forRewardedVideo_shouldSucceed() {
+        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.REWARDED_VIDEO);
+        defaultHeaders.put(ResponseHeader.REWARDED_VIDEO_CURRENCY_NAME.getKey(), "currencyName");
+        defaultHeaders.put(ResponseHeader.REWARDED_VIDEO_CURRENCY_AMOUNT.getKey(), "25");
+        defaultHeaders.put(ResponseHeader.REWARDED_VIDEO_COMPLETION_URL.getKey(),
+                "http://completionUrl");
+        NetworkResponse testResponse = new NetworkResponse(200,
+                "{\"abc\": \"def\"}".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+
+        assertThat(response.result.getAdType()).isEqualTo(AdType.REWARDED_VIDEO);
+        assertThat(response.result.getRewardedVideoCurrencyName()).isEqualTo("currencyName");
+        assertThat(response.result.getRewardedVideoCurrencyAmount()).isEqualTo("25");
+        assertThat(response.result.getRewardedVideoCompletionUrl()).isEqualTo(
+                "http://completionUrl");
+    }
+
     @Test
     public void deliverResponse_shouldCallListenerOnSuccess() throws Exception {
         subject.deliverResponse(mockAdResponse);
@@ -246,7 +369,7 @@ public void deliverResponse_shouldCallListenerOnSuccess() throws Exception {
 
     @Test
     public void getRequestId_shouldParseAndReturnRequestIdFromFailUrl() throws Exception {
-        String requestId = subject.getRequestId("http://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca&exclude=043fde1fe2f9470c9aa67fec262a0596&request_id=7fd6dd3bf1c84f87876b4740c1dd7baa&fail=1");
+        String requestId = subject.getRequestId("https://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca&exclude=043fde1fe2f9470c9aa67fec262a0596&request_id=7fd6dd3bf1c84f87876b4740c1dd7baa&fail=1");
 
         assertThat(requestId).isEqualTo("7fd6dd3bf1c84f87876b4740c1dd7baa");
     }
@@ -258,7 +381,7 @@ public void getRequestId_withNullFailUrl_shouldReturnNull() throws Exception {
 
     @Test
     public void getRequestId_withUrlWithNoRequestIdParam_shouldReturnNull() throws Exception {
-        assertThat(subject.getRequestId("http://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca")).isNull();
+        assertThat(subject.getRequestId("https://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca")).isNull();
     }
 
     @Test
@@ -343,7 +466,7 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
                 assertThat(baseEvent.getCategory()).isEqualTo(BaseEvent.Category.REQUESTS);
                 assertThat(baseEvent.getSamplingRate()).isEqualTo(0.1);
                 assertThat(baseEvent.getAdUnitId()).isEqualTo(adUnitId);
-                assertThat(baseEvent.getAdCreativeId()).isEqualTo("dsp_creative_id");
+                assertThat(baseEvent.getDspCreativeId()).isEqualTo("dsp_creative_id");
                 assertThat(baseEvent.getAdType()).isEqualTo("html");
                 assertThat(baseEvent.getAdNetworkType()).isEqualTo("network_type");
                 assertThat(baseEvent.getAdWidthPx()).isEqualTo(320);
diff --git a/mopub-sdk/src/test/java/com/mopub/network/HeaderUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/network/HeaderUtilsTest.java
index f91576ec..5fbf65b7 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/HeaderUtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/HeaderUtilsTest.java
@@ -1,17 +1,20 @@
 package com.mopub.network;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
 
 import static com.mopub.common.util.ResponseHeader.AD_TIMEOUT;
 import static com.mopub.common.util.ResponseHeader.SCROLLABLE;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class HeaderUtilsTest {
     private TestHttpResponseWithHeaders response;
 
diff --git a/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java b/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java
index 441ed4c2..8af5748e 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java
@@ -7,6 +7,7 @@
 import com.mopub.common.Constants;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.DeviceUtils;
+import com.mopub.mobileads.BuildConfig;
 import com.mopub.volley.Cache;
 import com.mopub.volley.Network;
 import com.mopub.volley.Request;
@@ -22,6 +23,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 
 import java.io.File;
 
@@ -32,6 +34,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class MoPubRequestQueueTest {
 
     private MoPubRequestQueue subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java b/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java
index 625c8a8c..de48343a 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java
@@ -3,6 +3,7 @@
 import android.app.Activity;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 
 import org.junit.After;
 import org.junit.Before;
@@ -10,12 +11,14 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 
 import java.util.concurrent.Semaphore;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class NetworkingTest {
     private Activity context;
     static volatile String sUserAgent;
diff --git a/mopub-sdk/src/test/java/com/mopub/network/PlayServicesUrlRewriterTest.java b/mopub-sdk/src/test/java/com/mopub/network/PlayServicesUrlRewriterTest.java
index a5225b99..042df01a 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/PlayServicesUrlRewriterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/PlayServicesUrlRewriterTest.java
@@ -8,11 +8,13 @@
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Reflection;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
+import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
@@ -20,6 +22,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class PlayServicesUrlRewriterTest {
 
     private Reflection.MethodBuilder methodBuilder;
@@ -46,8 +49,8 @@ public void rewriteUrl_whenPlayServicesPresent_shouldUsePlayServicesValue() thro
                 adInfo.LIMIT_AD_TRACKING_ENABLED
         );
 
-        assertThat(subject.rewriteUrl("http://ads.mopub.com/m/ad?ad_id=abcece&udid=mp_tmpl_advertising_id&dnt=mp_tmpl_do_not_track"))
-                .isEqualToIgnoringCase("http://ads.mopub.com/m/ad?ad_id=abcece&udid=ifa%3A38400000-8cf0-11bd-b23e-10b96e40000d&dnt=1");
+        assertThat(subject.rewriteUrl("https://ads.mopub.com/m/ad?ad_id=abcece&udid=mp_tmpl_advertising_id&dnt=mp_tmpl_do_not_track"))
+                .isEqualToIgnoringCase("https://ads.mopub.com/m/ad?ad_id=abcece&udid=ifa%3A38400000-8cf0-11bd-b23e-10b96e40000d&dnt=1");
     }
 
     @Test
@@ -57,12 +60,12 @@ public void rewriteUrl_whenPlayServicesNotPresent_shouldUseDeviceValue() throws
         // return error code so it fails
         when(methodBuilder.execute()).thenReturn(GpsHelper.GOOGLE_PLAY_SUCCESS_CODE + 1);
 
-        assertThat(subject.rewriteUrl("http://ads.mopub.com/m/ad?ad_id=abcece&udid=mp_tmpl_advertising_id&dnt=mp_tmpl_do_not_track"))
-                .isEqualToIgnoringCase("http://ads.mopub.com/m/ad?ad_id=abcece&udid=sha%3AtestDeviceId&dnt=0");
+        assertThat(subject.rewriteUrl("https://ads.mopub.com/m/ad?ad_id=abcece&udid=mp_tmpl_advertising_id&dnt=mp_tmpl_do_not_track"))
+                .isEqualToIgnoringCase("https://ads.mopub.com/m/ad?ad_id=abcece&udid=sha%3AtestDeviceId&dnt=0");
     }
 
     @Test
     public void rewriteUrl_noTemplates_shouldReturnIdentical() throws Exception {
-        assertThat(subject.rewriteUrl("http://ads.mopub.com/m/ad")).isEqualTo("http://ads.mopub.com/m/ad");
+        assertThat(subject.rewriteUrl("https://ads.mopub.com/m/ad")).isEqualTo("https://ads.mopub.com/m/ad");
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/network/RequestManagerTest.java b/mopub-sdk/src/test/java/com/mopub/network/RequestManagerTest.java
index 8cadcfaf..a9a52e2c 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/RequestManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/RequestManagerTest.java
@@ -3,12 +3,14 @@
 import android.os.Looper;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 import com.mopub.volley.Request;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
+import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
@@ -20,6 +22,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class RequestManagerTest {
 
     private ScribeRequestManager subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/network/ScribeBackoffPolicyTest.java b/mopub-sdk/src/test/java/com/mopub/network/ScribeBackoffPolicyTest.java
index 56a07c86..794121a1 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/ScribeBackoffPolicyTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/ScribeBackoffPolicyTest.java
@@ -1,6 +1,7 @@
 package com.mopub.network;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 import com.mopub.volley.NetworkResponse;
 import com.mopub.volley.NoConnectionError;
 import com.mopub.volley.VolleyError;
@@ -8,11 +9,13 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.fest.assertions.api.Assertions.fail;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class ScribeBackoffPolicyTest {
 
     private ScribeBackoffPolicy subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/network/ScribeRequestManagerTest.java b/mopub-sdk/src/test/java/com/mopub/network/ScribeRequestManagerTest.java
index 854b26a8..7fc1b530 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/ScribeRequestManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/ScribeRequestManagerTest.java
@@ -3,6 +3,7 @@
 import android.os.Looper;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 import com.mopub.volley.NoConnectionError;
 import com.mopub.volley.Request;
 import com.mopub.volley.VolleyError;
@@ -11,6 +12,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
+import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.doThrow;
@@ -20,6 +22,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class ScribeRequestManagerTest {
 
     private ScribeRequestManager subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/network/ScribeRequestTest.java b/mopub-sdk/src/test/java/com/mopub/network/ScribeRequestTest.java
index 7bf2d5bb..3af7d466 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/ScribeRequestTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/ScribeRequestTest.java
@@ -5,6 +5,7 @@
 import com.mopub.common.event.BaseEvent;
 import com.mopub.common.event.EventSerializer;
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 import com.mopub.volley.DefaultRetryPolicy;
 import com.mopub.volley.NetworkResponse;
 import com.mopub.volley.Response;
@@ -15,6 +16,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 
 import java.nio.charset.Charset;
 import java.util.HashMap;
@@ -27,6 +29,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class ScribeRequestTest {
 
     private ScribeRequest subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/network/TrackingRequestTest.java b/mopub-sdk/src/test/java/com/mopub/network/TrackingRequestTest.java
index 1ae6f03f..62838f9e 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/TrackingRequestTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/TrackingRequestTest.java
@@ -4,6 +4,7 @@
 import android.content.Context;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.VastErrorCode;
 import com.mopub.mobileads.VastTracker;
 
@@ -12,18 +13,19 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
 
 import java.util.Arrays;
 
 import static com.mopub.common.VolleyRequestMatcher.isUrl;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.argThat;
-import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 @RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
 public class TrackingRequestTest {
 
     @Mock
diff --git a/mopub-sdk/src/test/resources/org.robolectric.Config.properties b/mopub-sdk/src/test/resources/robolectric.properties
similarity index 92%
rename from mopub-sdk/src/test/resources/org.robolectric.Config.properties
rename to mopub-sdk/src/test/resources/robolectric.properties
index 973e581e..dbe9f738 100644
--- a/mopub-sdk/src/test/resources/org.robolectric.Config.properties
+++ b/mopub-sdk/src/test/resources/robolectric.properties
@@ -1,2 +1,2 @@
-emulateSdk=18
+sdk=21
 shadows=com.mopub.nativeads.test.support.MoPubShadowDisplay,com.mopub.nativeads.test.support.MoPubShadowBitmap,com.mopub.mobileads.test.support.ShadowVastVideoView
diff --git a/robotium-sample/AndroidManifest.xml b/robotium-sample/AndroidManifest.xml
deleted file mode 100644
index c4277cd0..00000000
--- a/robotium-sample/AndroidManifest.xml
+++ /dev/null
@@ -1,33 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-      package="com.mopub.mobileads.robotium"
-      android:versionCode="1"
-      android:versionName="1.0">
-    <uses-sdk
-        android:minSdkVersion="9"
-        android:targetSdkVersion="19"/>
-
-    <uses-permission android:name="android.permission.INTERNET" />
-    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
-    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
-    
-    <application android:label="Cool Activity">
-	    <activity android:name=".RobotiumTestSupportActivity"
-	            android:label="Cool Activity" android:theme="@android:style/Theme.NoTitleBar" >
-	        <intent-filter>
-	            <action android:name="android.intent.action.MAIN" />
-	            <category android:name="android.intent.category.LAUNCHER" />
-	        </intent-filter>
-	    </activity>
-
-        <activity android:name="com.mopub.mobileads.MoPubActivity"
-                android:configChanges="keyboardHidden|orientation"/>
-        <activity android:name="com.mopub.mobileads.MraidActivity"
-                android:configChanges="keyboardHidden|orientation"/>
-        <activity android:name="com.mopub.common.MoPubBrowser"
-                android:configChanges="keyboardHidden|orientation"/>
-        <activity android:name="com.mopub.mobileads.MraidVideoPlayerActivity"
-                android:configChanges="keyboardHidden|orientation"/>
-    </application>
-
-</manifest>
diff --git a/robotium-sample/pom.xml b/robotium-sample/pom.xml
deleted file mode 100644
index 468cbf9b..00000000
--- a/robotium-sample/pom.xml
+++ /dev/null
@@ -1,115 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-    <modelVersion>4.0.0</modelVersion>
-
-    <parent>
-        <groupId>com.mopub.mobileads</groupId>
-        <artifactId>mopub-android</artifactId>
-        <version>1.0</version>
-    </parent>
-
-    <artifactId>robotium-sample</artifactId>
-    <version>1.0.0-SNAPSHOT</version>
-    <packaging>apk</packaging>
-    <name>MoPub Robotium Sample</name>
-    <description>Sample application that can be exercised by Robotium.</description>
-
-    <dependencies>
-
-        <!--main-->
-        <dependency>
-            <groupId>com.mopub.mobileads</groupId>
-            <artifactId>mopub-sdk</artifactId>
-            <version>1.0.0-SNAPSHOT</version>
-            <type>aar</type>
-        </dependency>
-
-
-        <!--test-->
-
-        <dependency>
-            <groupId>com.squareup</groupId>
-            <artifactId>fest-android</artifactId>
-            <version>1.0.1</version>
-            <scope>test</scope>
-        </dependency>
-
-        <!-- this needs to come above fest-reflect or we pick up the wrong org.fest.util.Strings -->
-        <dependency>
-            <groupId>org.easytesting</groupId>
-            <artifactId>fest-assert-core</artifactId>
-            <version>2.0M9</version>
-            <scope>test</scope>
-        </dependency>
-
-        <dependency>
-            <groupId>org.easytesting</groupId>
-            <artifactId>fest-reflect</artifactId>
-            <version>1.4</version>
-            <scope>test</scope>
-        </dependency>
-
-        <dependency>
-            <groupId>junit</groupId>
-            <artifactId>junit</artifactId>
-            <version>4.8.2</version>
-            <scope>test</scope>
-        </dependency>
-
-        <dependency>
-            <groupId>org.mockito</groupId>
-            <artifactId>mockito-core</artifactId>
-            <version>1.9.5</version>
-            <scope>test</scope>
-        </dependency>
-
-        <!--android -->
-        <dependency>
-            <groupId>com.google.android</groupId>
-            <artifactId>android</artifactId>
-            <version>4.4.2</version>
-            <scope>provided</scope>
-        </dependency>
-    </dependencies>
-
-    <build>
-        <finalName>${project.artifactId}</finalName>
-
-        <plugins>
-            <plugin>
-                <artifactId>maven-compiler-plugin</artifactId>
-                <version>2.3.2</version>
-                <configuration>
-                    <source>1.6</source>
-                    <target>1.6</target>
-                </configuration>
-            </plugin>
-            <plugin>
-                <groupId>com.simpligility.maven.plugins</groupId>
-                <artifactId>android-maven-plugin</artifactId>
-                <version>4.2.0</version>
-                <configuration>
-                    <androidManifestFile>AndroidManifest.xml</androidManifestFile>
-                    <resourceDirectory>res</resourceDirectory>
-                    <sdk>
-                        <!-- platform or api level (api level 4 = platform 1.6)-->
-                        <platform>22</platform>
-                    </sdk>
-                    <undeployBeforeDeploy>true</undeployBeforeDeploy>
-                </configuration>
-                <extensions>true</extensions>
-            </plugin>
-            <plugin>
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-surefire-plugin</artifactId>
-                <version>2.6</version>
-                <configuration>
-                    <excludes>
-                        <exclude>**/Test*.java</exclude>
-                    </excludes>
-                </configuration>
-            </plugin>
-        </plugins>
-    </build>
-</project>
diff --git a/robotium-sample/res/layout/main.xml b/robotium-sample/res/layout/main.xml
deleted file mode 100644
index f8b562bf..00000000
--- a/robotium-sample/res/layout/main.xml
+++ /dev/null
@@ -1,60 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:orientation="vertical"
-              android:layout_width="fill_parent"
-              android:layout_height="fill_parent">
-
-    <EditText
-            android:id="@+id/banner_adunit_id_field"
-            android:hint="Enter banner adunit ID"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            >
-    </EditText>
-
-    <Button
-            android:id="@+id/banner_load_button"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_marginLeft="10dp"
-            android:layout_marginTop="20dp"
-            android:text="Load Banner"
-            >
-    </Button>
-
-    <com.mopub.mobileads.MoPubView
-            android:id="@+id/mopubview"
-            android:layout_width="320dp"
-            android:layout_height="50dp"
-            >
-    </com.mopub.mobileads.MoPubView>
-
-    <EditText
-            android:id="@+id/interstitial_adunit_id_field"
-            android:hint="Enter interstitial adunit ID"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            >
-    </EditText>
-
-    <Button
-            android:id="@+id/interstitial_load_button"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_marginLeft="10dp"
-            android:layout_marginTop="20dp"
-            android:text="Load Interstitial"
-            >
-    </Button>
-
-    <Button
-            android:id="@+id/interstitial_show_button"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_marginLeft="10dp"
-            android:layout_marginTop="20dp"
-            android:text="Show Interstitial"
-            >
-    </Button>
-
-</LinearLayout>
diff --git a/robotium-sample/src/main/java/com/mopub/mobileads/robotium/RobotiumTestSupportActivity.java b/robotium-sample/src/main/java/com/mopub/mobileads/robotium/RobotiumTestSupportActivity.java
deleted file mode 100644
index 217d8db8..00000000
--- a/robotium-sample/src/main/java/com/mopub/mobileads/robotium/RobotiumTestSupportActivity.java
+++ /dev/null
@@ -1,76 +0,0 @@
-package com.mopub.mobileads.robotium;
-
-import android.app.Activity;
-import android.os.Bundle;
-import android.view.View;
-import android.widget.Button;
-import android.widget.EditText;
-
-import com.mopub.mobileads.MoPubInterstitial;
-import com.mopub.mobileads.MoPubView;
-
-import static com.mopub.mobileads.MoPubInterstitial.InterstitialAdListener;
-
-public class RobotiumTestSupportActivity extends Activity {
-
-    private MoPubView moPubView;
-    private String bannerAdUnitId;
-    private EditText bannerEditText;
-    private InterstitialAdListener interstitialListener;
-    private EditText interstitialEditText;
-    private MoPubInterstitial moPubInterstitial;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.main);
-
-        moPubView = (MoPubView) findViewById(R.id.mopubview);
-        bannerEditText = (EditText) findViewById(R.id.banner_adunit_id_field);
-        interstitialEditText = (EditText) findViewById(R.id.interstitial_adunit_id_field);
-
-        // Banners
-        Button loadBannerButton = (Button) findViewById(R.id.banner_load_button);
-        loadBannerButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                bannerAdUnitId = bannerEditText.getText().toString();
-                moPubView.setAdUnitId(bannerAdUnitId);
-                moPubView.loadAd();
-            }
-        });
-
-        // Interstitials
-        Button loadInterstitialButton = (Button) findViewById(R.id.interstitial_load_button);
-        loadInterstitialButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                String interstitialAdUnitId = interstitialEditText.getText().toString();
-                moPubInterstitial = new MoPubInterstitial(RobotiumTestSupportActivity.this, interstitialAdUnitId);
-                moPubInterstitial.setInterstitialAdListener(interstitialListener);
-                moPubInterstitial.load();
-            }
-        });
-
-        Button showInterstitialButton = (Button) findViewById(R.id.interstitial_show_button);
-        showInterstitialButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                if (moPubInterstitial != null && moPubInterstitial.isReady()) {
-                    moPubInterstitial.show();
-                }
-            }
-        });
-    }
-
-    @Override
-    protected void onDestroy() {
-        if (moPubView != null) moPubView.destroy();
-        if (moPubInterstitial != null) moPubInterstitial.destroy();
-        super.onDestroy();
-    }
-
-    public void setInterstitialListener(InterstitialAdListener interstitialListener) {
-        this.interstitialListener = interstitialListener;
-    }
-}
diff --git a/robotium-tests/AndroidManifest.xml b/robotium-tests/AndroidManifest.xml
deleted file mode 100644
index 43a6b6d4..00000000
--- a/robotium-tests/AndroidManifest.xml
+++ /dev/null
@@ -1,18 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-		package="com.mopub.mobileads.test"
-		android:versionCode="1"
-		android:versionName="1.0">
-    <uses-sdk
-        android:minSdkVersion="9"
-        android:targetSdkVersion="19"/>
-
-    <instrumentation android:targetPackage="com.mopub.mobileads.robotium" android:name="android.test.InstrumentationTestRunner" />
-
-    <application android:label="Cool Activity Test">
-        <uses-library android:name="android.test.runner" />
-
-        <meta-data android:name="com.google.android.gms.version"
-                   android:value="@integer/google_play_services_version" />
-    </application>
-</manifest>
diff --git a/robotium-tests/pom.xml b/robotium-tests/pom.xml
deleted file mode 100644
index 99a113ce..00000000
--- a/robotium-tests/pom.xml
+++ /dev/null
@@ -1,81 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-    <modelVersion>4.0.0</modelVersion>
-
-    <parent>
-        <groupId>com.mopub.mobileads</groupId>
-        <artifactId>mopub-android</artifactId>
-        <version>1.0</version>
-    </parent>
-
-    <artifactId>robotium-tests</artifactId>
-    <version>1.0.0-SNAPSHOT</version>
-    <packaging>apk</packaging>
-    <name>MoPub Robotium Tests</name>
-    <description>Robotium tests for the sample application.</description>
-
-    <dependencies>
-
-        <!--main-->
-        <dependency>
-            <groupId>com.mopub.mobileads</groupId>
-            <artifactId>robotium-sample</artifactId>
-            <version>1.0.0-SNAPSHOT</version>
-            <scope>provided</scope>
-        </dependency>
-
-        <dependency>
-            <groupId>com.google.android.gms</groupId>
-            <artifactId>play-services-ads</artifactId>
-            <version>7.0.0</version>
-            <type>aar</type>
-        </dependency>
-
-        <!--test-->
-
-        <dependency>
-            <groupId>com.jayway.android.robotium</groupId>
-            <artifactId>robotium-solo</artifactId>
-            <version>5.0.1</version>
-        </dependency>
-
-        <!--android -->
-        <dependency>
-            <groupId>com.google.android</groupId>
-            <artifactId>android</artifactId>
-            <version>4.4.2</version>
-            <scope>provided</scope>
-        </dependency>
-    </dependencies>
-
-    <build>
-        <finalName>${project.artifactId}</finalName>
-
-        <plugins>
-            <plugin>
-                <artifactId>maven-compiler-plugin</artifactId>
-                <version>2.3.2</version>
-                <configuration>
-                    <source>1.6</source>
-                    <target>1.6</target>
-                </configuration>
-            </plugin>
-            <plugin>
-                <groupId>com.simpligility.maven.plugins</groupId>
-                <artifactId>android-maven-plugin</artifactId>
-                <version>4.2.0</version>
-                <configuration>
-                    <androidManifestFile>AndroidManifest.xml</androidManifestFile>
-                    <resourceDirectory>res</resourceDirectory>
-                    <sdk>
-                        <!-- platform or api level (api level 4 = platform 1.6)-->
-                        <platform>22</platform>
-                    </sdk>
-                    <undeployBeforeDeploy>true</undeployBeforeDeploy>
-                </configuration>
-                <extensions>true</extensions>
-            </plugin>
-        </plugins>
-    </build>
-</project>
diff --git a/robotium-tests/src/main/java/com/mopub/mobileads/test/RobotiumTestSupportActivityTest.java b/robotium-tests/src/main/java/com/mopub/mobileads/test/RobotiumTestSupportActivityTest.java
deleted file mode 100644
index fdf5c296..00000000
--- a/robotium-tests/src/main/java/com/mopub/mobileads/test/RobotiumTestSupportActivityTest.java
+++ /dev/null
@@ -1,223 +0,0 @@
-package com.mopub.mobileads.test;
-
-import android.test.ActivityInstrumentationTestCase2;
-import android.widget.Button;
-import android.widget.EditText;
-
-import com.mopub.common.MoPubBrowser;
-import com.mopub.mobileads.MoPubActivity;
-import com.mopub.mobileads.MoPubErrorCode;
-import com.mopub.mobileads.MoPubInterstitial;
-import com.mopub.mobileads.MoPubView;
-import com.mopub.mobileads.robotium.R;
-import com.mopub.mobileads.robotium.RobotiumTestSupportActivity;
-import com.robotium.solo.Solo;
-
-import static com.mopub.mobileads.MoPubInterstitial.InterstitialAdListener;
-
-public class RobotiumTestSupportActivityTest extends ActivityInstrumentationTestCase2<RobotiumTestSupportActivity>{
-    private static final long NETWORK_SLEEP_TIME = 8000;
-    private static final String BANNER_AD_UNIT_ID = "agltb3B1Yi1pbmNyDAsSBFNpdGUY8fgRDA";
-    private static final String INTERSTITIAL_AD_UNIT_ID = "agltb3B1Yi1pbmNyDAsSBFNpdGUY6tERDA";
-
-    private Solo solo;
-    private EditText bannerEditText;
-    private EditText interstitialEditText;
-    private Button bannerLoadButton;
-    private Button interstitialLoadButton;
-    private Button interstitialShowButton;
-    private MoPubView banner;
-
-    public RobotiumTestSupportActivityTest() {
-        super(RobotiumTestSupportActivity.class);
-    }
-
-    @Override
-    public void setUp() throws Exception {
-        super.setUp();
-        solo = new Solo(getInstrumentation(), getActivity());
-
-        bannerEditText = (EditText) solo.getView(R.id.banner_adunit_id_field);
-        interstitialEditText = (EditText) solo.getView(R.id.interstitial_adunit_id_field);
-
-        bannerLoadButton = (Button) solo.getView(R.id.banner_load_button);
-        interstitialLoadButton = (Button) solo.getView(R.id.interstitial_load_button);
-        interstitialShowButton = (Button) solo.getView(R.id.interstitial_show_button);
-
-        banner = (MoPubView) solo.getView(R.id.mopubview);
-    }
-
-    @Override
-    public void tearDown() throws Exception {
-        solo.finishOpenedActivities();
-        super.tearDown();
-    }
-
-    public void testMoPubBannerLoadAndClick() throws Exception {
-        enterBannerAdUnitId();
-        TestBannerAdListener listener = new TestBannerAdListener();
-        banner.setBannerAdListener(listener);
-
-        solo.clickOnView(bannerLoadButton);
-        Thread.sleep(NETWORK_SLEEP_TIME);
-        assertTrue("Banner was not loaded.", listener.bannerWasLoaded());
-
-        solo.clickOnView(banner);
-        Thread.sleep(NETWORK_SLEEP_TIME);
-        assertTrue("Banner was not clicked.", listener.bannerWasClicked());
-
-        solo.assertCurrentActivity("expected a MoPubBrowser", MoPubBrowser.class);
-    }
-
-    public void testMoPubInterstitialLoadShowAndClick() throws Exception {
-        enterInterstitialAdUnitId();
-        TestInterstitialAdListener listener = new TestInterstitialAdListener();
-        ((RobotiumTestSupportActivity) solo.getCurrentActivity()).setInterstitialListener(listener);
-
-        solo.clickOnView(interstitialLoadButton);
-        Thread.sleep(NETWORK_SLEEP_TIME);
-        assertTrue("Interstitial was not loaded.", listener.interstitialWasLoaded());
-
-        solo.clickOnView(interstitialShowButton);
-        Thread.sleep(NETWORK_SLEEP_TIME);
-        assertTrue("Interstitial was not shown.", listener.interstitialWasShown());
-        solo.assertCurrentActivity("expected MoPubActivity", MoPubActivity.class);
-
-        solo.clickOnView(solo.getCurrentActivity().findViewById(android.R.id.content));
-        Thread.sleep(NETWORK_SLEEP_TIME);
-        solo.assertCurrentActivity("expected MoPubBrowser", MoPubBrowser.class);
-    }
-
-    public void testMoPubInterstitialLoadShowAndDismissWithCloseButton() throws Exception {
-        enterInterstitialAdUnitId();
-        TestInterstitialAdListener listener = new TestInterstitialAdListener();
-        ((RobotiumTestSupportActivity) solo.getCurrentActivity()).setInterstitialListener(listener);
-
-        solo.clickOnView(interstitialLoadButton);
-        Thread.sleep(NETWORK_SLEEP_TIME);
-
-        solo.clickOnView(interstitialShowButton);
-        Thread.sleep(NETWORK_SLEEP_TIME);
-
-        solo.clickOnImageButton(0);
-        Thread.sleep(500);
-        assertTrue("Interstitial was not dismissed.", listener.interstitialWasDismissed());
-    }
-
-    public void testMoPubInterstitialLoadShowAndDismissWithBackButton() throws Exception {
-        enterInterstitialAdUnitId();
-        TestInterstitialAdListener listener = new TestInterstitialAdListener();
-        ((RobotiumTestSupportActivity) solo.getCurrentActivity()).setInterstitialListener(listener);
-
-        solo.clickOnView(interstitialLoadButton);
-        Thread.sleep(NETWORK_SLEEP_TIME);
-
-        solo.clickOnView(interstitialShowButton);
-        Thread.sleep(NETWORK_SLEEP_TIME);
-
-        solo.goBack();
-        assertTrue("Interstitial was not dismissed.", listener.interstitialWasDismissed());
-    }
-
-    private void enterBannerAdUnitId() {
-        solo.enterText(bannerEditText, BANNER_AD_UNIT_ID);
-    }
-
-    private void enterInterstitialAdUnitId() {
-        solo.enterText(interstitialEditText, INTERSTITIAL_AD_UNIT_ID);
-    }
-
-    private static class TestBannerAdListener implements MoPubView.BannerAdListener {
-        private boolean bannerWasLoaded;
-        private boolean bannerWasClicked;
-
-        private boolean bannerWasLoaded() {
-            return bannerWasLoaded;
-        }
-
-        private boolean bannerWasClicked() {
-            return bannerWasClicked;
-        }
-
-        @Override
-        public void onBannerLoaded(MoPubView banner) {
-            bannerWasLoaded = true;
-        }
-
-        @Override
-        public void onBannerFailed(MoPubView banner, MoPubErrorCode errorCode) {
-        }
-
-        @Override
-        public void onBannerClicked(MoPubView banner) {
-            bannerWasClicked = true;
-        }
-
-        @Override
-        public void onBannerExpanded(MoPubView banner) {
-        }
-
-        @Override
-        public void onBannerCollapsed(MoPubView banner) {
-        }
-
-        void reset() {
-            bannerWasLoaded = false;
-            bannerWasClicked = false;
-        }
-    }
-
-    private static class TestInterstitialAdListener implements InterstitialAdListener {
-        private boolean interstitialWasLoaded;
-        private boolean interstitialWasShown;
-        private boolean interstitialWasDismissed;
-        private boolean interstitialWasClicked;
-
-        private boolean interstitialWasLoaded() {
-            return interstitialWasLoaded;
-        }
-
-        private boolean interstitialWasShown() {
-            return interstitialWasShown;
-        }
-
-        private boolean isInterstitialWasClicked() {
-            return interstitialWasClicked;
-        }
-
-        public boolean interstitialWasDismissed() {
-            return interstitialWasDismissed;
-        }
-
-        @Override
-        public void onInterstitialLoaded(MoPubInterstitial interstitial) {
-            interstitialWasLoaded = true;
-        }
-
-        @Override
-        public void onInterstitialFailed(MoPubInterstitial interstitial, MoPubErrorCode errorCode) {
-        }
-
-        @Override
-        public void onInterstitialShown(MoPubInterstitial interstitial) {
-            interstitialWasShown = true;
-        }
-
-        @Override
-        public void onInterstitialClicked(MoPubInterstitial interstitial) {
-            interstitialWasClicked = true;
-        }
-
-        @Override
-        public void onInterstitialDismissed(MoPubInterstitial interstitial) {
-            interstitialWasDismissed = true;
-        }
-
-        void reset() {
-            interstitialWasLoaded = false;
-            interstitialWasShown = false;
-            interstitialWasClicked = false;
-            interstitialWasDismissed = false;
-        }
-    }
-}
