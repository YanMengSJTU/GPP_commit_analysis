diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
index 8a198b8a..32a21005 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
@@ -1,6 +1,10 @@
 package com.mopub.nativeads;
 
+
 import android.content.Context;
+import android.os.Handler;
+import android.os.Looper;
+import android.os.Message;
 import android.support.annotation.NonNull;
 
 import com.mopub.common.DataKeys;
@@ -9,11 +13,21 @@
 import com.mopub.nativeads.factories.CustomEventNativeFactory;
 import com.mopub.network.AdResponse;
 
+import java.lang.ref.WeakReference;
 import java.util.Map;
+import java.util.WeakHashMap;
+
 
 final class CustomEventNativeAdapter {
     private CustomEventNativeAdapter() {}
 
+    private static final int MESSAGE_TIMEOUT = 738;
+    private static final int TIMEOUT = 10000;
+    private static Handler handler = new Handler(Looper.getMainLooper(),new HandlerCallback());
+    private static Map<ListenerWrapper,CustomEventNative> runningEvents = new WeakHashMap<>();
+
+
+
     public static void loadNativeAd(@NonNull final Context context,
             @NonNull final Map<String, Object> localExtras,
             @NonNull final AdResponse adResponse,
@@ -43,16 +57,72 @@ public static void loadNativeAd(@NonNull final Context context,
 
         // Custom event classes can be developed by any third party and may not be tested.
         // We catch all exceptions here to prevent crashes from untested code.
+
+        ListenerWrapper wrapper = new ListenerWrapper(customEventNativeListener);
+        Message message = Message.obtain();
+        message.what=MESSAGE_TIMEOUT;
+        message.obj = new WeakReference<>(wrapper);
+        runningEvents.put(wrapper,customEventNative);
+        handler.sendMessageDelayed(message,TIMEOUT);
+
         try {
             customEventNative.loadNativeAd(
                     context,
-                    customEventNativeListener,
+                    wrapper,
                     localExtras,
                     adResponse.getServerExtras()
             );
         } catch (Exception e) {
             MoPubLog.w("Loading custom event native threw an error.", e);
-            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_NOT_FOUND);
+            wrapper.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_NOT_FOUND);
+        }
+    }
+
+    private static class ListenerWrapper implements CustomEventNative.CustomEventNativeListener{
+        private CustomEventNative.CustomEventNativeListener listener;
+
+        public ListenerWrapper(CustomEventNative.CustomEventNativeListener listener) {
+            this.listener = listener;
+        }
+
+        @Override
+        public void onNativeAdLoaded(BaseNativeAd nativeAd) {
+            if (runningEvents.containsKey(this)){
+                listener.onNativeAdLoaded(nativeAd);
+                runningEvents.remove(this);
+            }
+        }
+
+        @Override
+        public void onNativeAdFailed(NativeErrorCode errorCode) {
+            if (runningEvents.containsKey(this)){
+                listener.onNativeAdFailed(errorCode);
+                runningEvents.remove(this);
+            }
+        }
+
+        private void cancelEvent(){
+            if (runningEvents.containsKey(this)){
+                listener.onNativeAdFailed(NativeErrorCode.NETWORK_TIMEOUT);
+                runningEvents.remove(this);
+            }
+        }
+    }
+
+    private static class HandlerCallback implements Handler.Callback{
+        @Override
+        public boolean handleMessage(Message msg) {
+            if (msg.what == MESSAGE_TIMEOUT){
+                if (msg.obj instanceof WeakReference) {
+                    WeakReference<ListenerWrapper> reference = (WeakReference<ListenerWrapper>) msg.obj;
+	                ListenerWrapper wrapper = reference.get();
+	                if (wrapper != null) {
+		                wrapper.cancelEvent();
+	                }
+                }
+                return true;
+            }
+            return false;
         }
     }
 }
