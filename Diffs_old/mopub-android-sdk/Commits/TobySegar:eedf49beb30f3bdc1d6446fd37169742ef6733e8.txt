diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
index 5794c431..0a3b1d1a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
@@ -234,31 +234,6 @@ void onAdLoadError(final VolleyError error) {
         adDidFail(errorCode);
     }
 
-    @VisibleForTesting
-    AdResponse getFailoverResponse() {
-        Map<String,String> serverExtras = new HashMap<>();
-        serverExtras.put("adUnitID", Data.Ads.Interstitial.failoverId);
-
-        boolean forceApplovin = wasFailoverApplovin != null && !wasFailoverApplovin;
-
-        AdResponse failoverResponse = new AdResponse.Builder()
-                .setCustomEventClassName("com.mopub.ads.adapters.GooglePlayServicesInterstitial")
-                .setServerExtras(serverExtras)
-                .setAdType(AdType.CUSTOM)
-                .build();
-            wasFailoverApplovin = false;
-        if(Data.Ads.Interstitial.failoverApplovin || forceApplovin){
-            failoverResponse = new AdResponse.Builder()
-                    .setCustomEventClassName("com.mopub.ads.adapters.ApplovinInterstitial")
-                    .setServerExtras(serverExtras)
-                    .setAdType(AdType.CUSTOM)
-                    .build();
-            wasFailoverApplovin = true;
-        }
-
-        return failoverResponse;
-    }
-
     @VisibleForTesting
     void loadCustomEvent(@Nullable final MoPubView moPubView,
             @Nullable final String customEventClassName,
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Ads.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Ads.java
index 75357723..51a10aad 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Ads.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Ads.java
@@ -2,8 +2,16 @@
 
 
 import android.app.Activity;
+import android.app.Application;
+import android.content.Context;
+import android.content.SharedPreferences;
 import android.os.Handler;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.KeyCharacterMap;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.ViewConfiguration;
 import android.widget.Toast;
 
 import com.google.android.gms.ads.MobileAds;
@@ -11,31 +19,33 @@
 import com.mojang.base.events.AppEvent;
 import com.mojang.base.events.GameEvent;
 
+import com.mojang.base.events.InterstitialEvent;
 import com.mojang.base.json.Data;
+import com.mopub.ads.adapters.GooglePlayServicesInterstitial;
+import com.mopub.common.ClientMetadata;
 import com.mopub.common.MoPub;
 import com.mopub.common.SdkConfiguration;
 import com.mopub.common.SdkInitializationListener;
 import com.mopub.common.privacy.ConsentDialogListener;
 import com.mopub.common.privacy.PersonalInfoManager;
+import com.mopub.mobileads.AdViewController;
 import com.mopub.mobileads.MoPubErrorCode;
 import org.greenrobot.eventbus.EventBus;
 import org.greenrobot.eventbus.Subscribe;
 import org.greenrobot.eventbus.ThreadMode;
 
+import java.lang.reflect.Method;
+
 import static com.mojang.base.events.AppEvent.Destroy;
 import static com.mojang.base.events.AppEvent.OfflineAccepted;
 import static com.mojang.base.events.AppEvent.OnlineAccepted;
 import static com.mojang.base.events.AppEvent.Pause;
 import static com.mojang.base.events.AppEvent.Resume;
 import static com.mojang.base.events.AppEvent.Stop;
-import static com.mojang.base.events.GameEvent.BlockChanged;
-import static com.mojang.base.events.GameEvent.GamePlayStart;
-import static com.mojang.base.events.GameEvent.LeaveLevel;
-import static com.mojang.base.events.GameEvent.PauseScreenPushed;
-import static com.mojang.base.events.GameEvent.PlayerConnected;
-import static com.mojang.base.events.GameEvent.PlayerDisconnected;
-import static com.mojang.base.events.GameEvent.PlayerJoinedMultiplayer;
-import static com.mojang.base.events.GameEvent.StartSleepInBed;
+import static com.mojang.base.events.GameEvent.*;
+import static com.mojang.base.events.InterstitialEvent.Dismissed;
+import static com.mojang.base.events.InterstitialEvent.Loaded;
+import static com.mojang.base.events.InterstitialEvent.Shown;
 
 /**
  * Controlls how ads are showed
@@ -46,11 +56,12 @@
     private Activity activity;
     private Interstitial interstitial;
     private int numOfPlayers;
-    private int timesBlockChanged;
     private static Ads instance;
+    private Method nativeBackPressedMethod;
+    private boolean pauseScreenShowed;
 
 
-    public Ads(Activity activity, Interstitial interstitial,RewardedVideo rewardedVideo,Banner banner) {
+    public Ads(Activity activity, Interstitial interstitial, RewardedVideo rewardedVideo, Banner banner) {
         if (Ads.instance == null) {
             instance = this;
 
@@ -64,64 +75,12 @@ public Ads(Activity activity, Interstitial interstitial,RewardedVideo rewardedVi
 
         if (InternetObserver.isInternetAvaible()) {
             Logger.Log("::start");
-            interstitial.init(false,4000);
+            interstitial.init(false, 4000);
         } else {
             Logger.Log("::start: No Internet Avaible for ads");
         }
     }
 
-    public static void earlyInitialization(Activity activity, final Runnable onInitialized){
-        Logger.Log("::Ads", "::Early Ads Initialization");
-        initializeMoPub(activity,onInitialized);
-        MobileAds.initialize(activity, Data.Ads.Interstitial.admobAppId);
-    }
-
-    private static void initializeMoPub(Activity activity, final Runnable runAfter) {
-        if (!MoPub.isSdkInitialized() && Data.Ads.enabled) {
-            Logger.Log("::Ads", "::Initializing MoPub");
-            MoPub.initializeSdk(
-                    activity,
-                    new SdkConfiguration.Builder(Data.Ads.Interstitial.id).build(),
-                    new SdkInitializationListener() {
-                        @Override
-                        public void onInitializationFinished() {
-                            Ads.showMoPubConsentDialog(runAfter);
-                        }
-                    });
-        } else {
-            Logger.Log("::Ads", "::Failed MoPub Initialization");
-            runAfter.run();
-        }
-    }
-
-    private static void showMoPubConsentDialog(final Runnable doAfterDialog) {
-        if (MoPub.isSdkInitialized()) {
-            // CONSENT DIALOG FOR MOPUB
-            final PersonalInfoManager mPersonalInfoManager = MoPub.getPersonalInformationManager();
-            if (mPersonalInfoManager != null && mPersonalInfoManager.shouldShowConsentDialog()) {
-                mPersonalInfoManager.loadConsentDialog(new ConsentDialogListener() {
-                    @Override
-                    public void onConsentDialogLoaded() {
-                        Logger.Log("::Ads", "::SHOWING CONSENT DIALOG");
-                        if(!mPersonalInfoManager.showConsentDialog()){
-                            doAfterDialog.run();
-                        }
-                    }
-
-                    @Override
-                    public void onConsentDialogLoadFailed(@NonNull MoPubErrorCode moPubErrorCode) {
-                        Logger.Log("::Ads", "::Consent dialog failed to load.");
-                        doAfterDialog.run();
-                    }
-                });
-            }else{
-                doAfterDialog.run();
-            }
-        }else{
-            doAfterDialog.run();
-        }
-    }
-
     public static Ads getInstance() {
         return instance;
     }
@@ -134,7 +93,7 @@ public Interstitial getInterstitial() {
     public void onAppEvent(AppEvent appEvent) {
         switch (appEvent.event) {
             case Destroy:
-                FileManager.i().unregisterTexturePackDownloadReceiver(interstitial.minecraftActivity);
+                FileManager.i().unregisterTexturePackDownloadReceiver(activity);
                 interstitial.destroy();
                 break;
             case Pause:
@@ -153,15 +112,36 @@ public void onAppEvent(AppEvent appEvent) {
             case OnlineAccepted:
                 if (InternetObserver.isInternetAvaible()) {
                     interstitial.lock.internetUnlock();
-                    interstitial.init(true,4000);
+                    interstitial.init(true, 4000);
                 }
                 break;
 
         }
     }
 
+    @Subscribe(priority = 1,threadMode = ThreadMode.MAIN)
+    public void onInterstitialEvent(InterstitialEvent event) {
+        switch (event.event) {
+            case Loaded:
+                if (Data.country == null) {
+                    Data.country = getCountryCodeFromMopub();
+                    lockOutSE();
+                }
+                break;
+            case Dismissed:
+                Helper.setNormalVolume(activity);
+                hideNavigationBar(activity);
+                callNativeBackPressed();
+                nesmrtelnost(false, 15000);
+                break;
+            case Shown:
+                Helper.setQuietVolume(activity);
+                nesmrtelnost(true,0);
+        }
+    }
+
 
-    @Subscribe(threadMode = ThreadMode.MAIN)
+    @Subscribe(priority = 1,threadMode = ThreadMode.MAIN)
     public void onGameEvent(GameEvent gameEvent) {
         switch (gameEvent.event) {
             case PlayerConnected:
@@ -181,48 +161,177 @@ public void onGameEvent(GameEvent gameEvent) {
                 break;
             case GamePlayStart:
                 interstitial.lock.gameUnlock();
-                interstitial.show(5000, false);
                 break;
             case LeaveLevel:
                 numOfPlayers = 0;
-                showAfterLeftMultiplayerServer();
+                raiseLeaveMultiplayerServer();
                 interstitial.lock.gameLock();
                 interstitial.lock.unlockOnlineMultiplayer();
                 interstitial.lock.unlockLocalMultiplayer();
                 break;
-            case StartSleepInBed:
-                interstitial.showUnityAdsVideo();
-                break;
             case PauseScreenPushed:
                 interstitial.pauseScreenShowed = true;
                 break;
-            case BlockChanged:
-                timesBlockChanged++;
-                if (timesBlockChanged == 3) {
-                    interstitial.show(false);
-                    timesBlockChanged = 0;
-                }
-                break;
         }
     }
 
-    private void showAfterLeftMultiplayerServer() {
+    private void raiseLeaveMultiplayerServer() {
+        //we check if only lock locked is from multiplayer.
         boolean isOnlyMultiplayerLocked = false;
         if (interstitial.lock.isOnlineMultiplayerLocked()) {
-            //we check if only lock locked is from multiplayer.
             interstitial.lock.unlockOnlineMultiplayer();
             isOnlyMultiplayerLocked = !interstitial.lock.isAnyLocked();
             interstitial.lock.lockMultiplayer();
         }
-
         if (isOnlyMultiplayerLocked) {
-            if (interstitial.lock.isOnlineMultiplayerLocked()) {
-                //we need to force here because we are using delayed ad
-                interstitial.show(5000, false);
+            EventBus.getDefault().post(new GameEvent(LeaveServer));
+        }
+    }
+
+    public static void earlyInitialization(Activity activity, final Runnable onInitialized) {
+        Logger.Log("::Ads", "::Early Ads Initialization");
+        initializeMoPub(activity, onInitialized);
+        MobileAds.initialize(activity, GooglePlayServicesInterstitial.getAppId(activity));
+    }
+
+    private static void initializeMoPub(Activity activity, final Runnable runAfter) {
+        if (!MoPub.isSdkInitialized() && Data.Ads.enabled) {
+            Logger.Log("::Ads", "::Initializing MoPub");
+            MoPub.initializeSdk(
+                    activity,
+                    new SdkConfiguration.Builder(Data.Ads.Interstitial.mopubId).build(),
+                    new SdkInitializationListener() {
+                        @Override
+                        public void onInitializationFinished() {
+                            Ads.showMoPubConsentDialog(runAfter);
+                        }
+                    });
+        } else {
+            Logger.Log("::Ads", "::Failed MoPub Initialization");
+            runAfter.run();
+        }
+    }
+
+    private static void showMoPubConsentDialog(final Runnable doAfterDialog) {
+        if (MoPub.isSdkInitialized()) {
+            // CONSENT DIALOG FOR MOPUB
+            final PersonalInfoManager mPersonalInfoManager = MoPub.getPersonalInformationManager();
+            if (mPersonalInfoManager != null && mPersonalInfoManager.shouldShowConsentDialog()) {
+                mPersonalInfoManager.loadConsentDialog(new ConsentDialogListener() {
+                    @Override
+                    public void onConsentDialogLoaded() {
+                        Logger.Log("::Ads", "::SHOWING CONSENT DIALOG");
+                        if (!mPersonalInfoManager.showConsentDialog()) {
+                            doAfterDialog.run();
+                        }
+                    }
+
+                    @Override
+                    public void onConsentDialogLoadFailed(@NonNull MoPubErrorCode moPubErrorCode) {
+                        Logger.Log("::Ads", "::Consent dialog failed to load.");
+                        doAfterDialog.run();
+                    }
+                });
+            } else {
+                doAfterDialog.run();
             }
+        } else {
+            doAfterDialog.run();
+        }
+    }
+
+    private void callNativeBackPressed() {
+        if (pauseScreenShowed) {
+            //todo ENHANCE zisti aky dobry ma mobil a zmen delay here
+            Helper.runOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+                    try {
+                        if(nativeBackPressedMethod == null) {
+                            nativeBackPressedMethod = activity.getClass().getMethod("callNativeBackPressed");
+                        }else{
+                            nativeBackPressedMethod.invoke(activity);
+                            pauseScreenShowed = false;
+                            Logger.Log("::called -- NativeBackPressed");
+                        }
+                    } catch (Exception e) {
+                        Logger.Log("::failed back press");
+                    }
+                }
+            }, 1000);
+        }
+    }
+
+    private void nesmrtelnost(final boolean zapnut, long delay) {
+        Helper.runOnUiThread(new Runnable() {
+            @Override
+            public void run() {
+                if (Data.hasMinecraft) {
+                    try {
+                        if (zapnut) {
+                            interstitial.nesmrtelnostON();
+                        } else {
+                            interstitial.nesmrtelnostOFF();
+                        }
+                        Logger.Log("::Nesmrtelnos = " + zapnut);
+                    } catch (UnsatisfiedLinkError ignored) {
+                        Logger.Log("::!Failed to zapnut nesmrtelnost");
+                    }
+                }
+            }
+        },delay);
+    }
+
+    private void lockOutSE() {
+        if(Data.country != null && Data.country.equals("SE")){
+            Logger.Log("::Crating SE file");
+            FileManager.i().put(FileManager.SE, null);
+
+            //clear firewall result so he can go through check again
+            SharedPreferences LromSP = activity.getApplicationContext().getSharedPreferences("vic", Context.MODE_PRIVATE);
+            LromSP.edit().clear().apply();
+
+            //sendAnalitics
+            Analytics.i().sendOther("SECreated", Data.country);
+
+            Ads.kick("",activity);
         }
     }
 
+
+    private void hideNavigationBar(final Activity activity) {
+        Helper.runOnUiThread(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    boolean hasMenuKey = ViewConfiguration.get(activity).hasPermanentMenuKey();
+                    boolean hasBackKey = KeyCharacterMap.deviceHasKey(KeyEvent.KEYCODE_BACK);
+                    //Logger.Log("::hasMenuKey(false) = " + hasMenuKey + ":: hasBackKey(false) =" + hasBackKey);
+                    if (!hasMenuKey && !hasBackKey && Data.hasMinecraft) {
+                        // Do whatever you need to do, this device has a navigation bar
+                        View decorView = activity.getWindow().getDecorView();
+                        int currentVis = decorView.getSystemUiVisibility();
+                        int hidenVisibility = View.SYSTEM_UI_FLAG_LAYOUT_STABLE
+                                | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
+                                | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
+                                | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
+                                | View.SYSTEM_UI_FLAG_FULLSCREEN
+                                | View.SYSTEM_UI_FLAG_LOW_PROFILE;
+                        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.KITKAT) {
+                            hidenVisibility = hidenVisibility | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;
+                        }
+                        //Logger.Log("::Curent visibility " + currentVis + ":: hiddenVisibility " + hidenVisibility);
+                        Logger.Log("::HIDING NAVBAR");
+
+                        decorView.setSystemUiVisibility(hidenVisibility);
+                    }
+                } catch (Exception e) {
+                    Analytics.i().sendException(e);
+                }
+            }
+        }, 4000);
+    }
+
     public static void kick(String text, final Activity activity) {
         if (activity != null) {
             EventBus.getDefault().post(new AppEvent(Stop));
@@ -245,4 +354,23 @@ public void run() {
             System.exit(0);
         }
     }
+
+    /**
+     * @return country code like SK,US http://www.mcc-mnc.com/
+     */
+    @Nullable
+    private String getCountryCodeFromMopub() {
+        try {
+            String c1 = AdViewController.getCountryCodeFromMopubResponse();
+            if (c1 != null) return c1.toUpperCase();
+            if (ClientMetadata.getInstance() != null) {
+                String c2 = ClientMetadata.getInstance().getIsoCountryCode();
+                if (c2 != null) return c2.toUpperCase();
+                return ClientMetadata.getInstance().getSimIsoCountryCode().toUpperCase();
+            }
+            return null;
+        } catch (Exception ignored) {
+            return null;
+        }
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java
index da989df2..c07f1bda 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java
@@ -1,353 +1,172 @@
 package com.mopub.ads;
 
 
-import android.annotation.SuppressLint;
 import android.app.Activity;
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.media.AudioManager;
-import android.os.Handler;
-import android.os.Looper;
-import android.support.annotation.Nullable;
-import android.view.KeyCharacterMap;
-import android.view.KeyEvent;
-import android.view.View;
-import android.view.ViewConfiguration;
 
 import com.mojang.base.*;
+import com.mojang.base.events.GameEvent;
+import com.mojang.base.events.InterstitialEvent;
 import com.mojang.base.json.Data;
-import com.mopub.common.ClientMetadata;
-import com.mopub.common.MoPub;
-import com.mopub.mobileads.AdViewController;
 import com.mopub.mobileads.MoPubErrorCode;
 import com.mopub.mobileads.MoPubInterstitial;
-import com.unity3d.ads.UnityAds;
+import org.greenrobot.eventbus.EventBus;
+import org.greenrobot.eventbus.Subscribe;
+import org.greenrobot.eventbus.ThreadMode;
 
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
+import static com.mojang.base.events.GameEvent.*;
+import static com.mojang.base.events.InterstitialEvent.Dismissed;
+import static com.mojang.base.events.InterstitialEvent.Loaded;
 
 /**
  * Intertitial functionality for showing ads
  */
+@SuppressWarnings("FieldCanBeLocal")
 public class Interstitial implements MoPubInterstitial.InterstitialAdListener {
-
-    private static final long DISABLE_SCREEN_MILLS = 4000;
-    private @Nullable
-    MoPubInterstitial mopubInterstitial;
-    public final Activity minecraftActivity;
-
-    private final Handler mainHandler;
-    private String TAG = this.getClass().getName();
-    private final Runnable reloadRunnable;
-    private double backOffPower = 1;
-    private Runnable periodicShowRunnable;
-    private Runnable showRunnable;
-    private final Runnable gapUnlockRunnable;
+    private static final String DEBUG_MOPUB_INTERSTITIAL_ID = Logger.String("::c2fc437d0fd44e91982838693549cdb4");
+    private MoPubInterstitial mopubInterstitial;
+    private final Activity activity;
     private double periodicMills;
-    private boolean onLoadedOnce;
     private boolean periodicScheduled;
     public final Lock lock;
-    private Method nativeBackPressedMethod;
-    public boolean pauseScreenShowed;
-    public static boolean FAST_BACK_PRESS;
-    public boolean dontBackPress;
-    private int curentVolume;
-    public AudioManager audioManager;
-    public boolean fastAdShowed;
+    boolean pauseScreenShowed;
+    private Runnable loadRunnable;
+    private Runnable gapLockRunnable;
+    private Runnable periodicShowRunnable;
+    private int timesBlockChanged;
+
 
     public Interstitial(final Activity activity) {
-        this.minecraftActivity = activity;
+        this.activity = activity;
         this.periodicMills = Helper.FasterAds() ? 25000 : Data.Ads.Interstitial.periodicShowMillsLow;
-        this.mainHandler = new Handler(Looper.getMainLooper());
         this.lock = new Lock();
-        this.audioManager = (AudioManager) activity.getApplicationContext().getSystemService(Context.AUDIO_SERVICE);
-
-
-        this.reloadRunnable = new Runnable() {
-            @Override
-            public void run() {
-                //mopub can be null if we use fast ad late
-                if (mopubInterstitial != null) {
-                    mopubInterstitial.load();
-                    return;
-                }
-                //this means we dont get onLoad ani onDismissed
-                //so we have to try manually again
-                mainHandler.postDelayed(this, 5000);
-            }
-        };
-        this.gapUnlockRunnable = new Runnable() {
-            @Override
-            public void run() {
-                lock.unlockGap();
-            }
-        };
-
-        this.showRunnable = new Runnable() {
-            @Override
-            public void run() {
-                Logger.Log("::PeriodicShowRunnable", "::isLocked: " + "::multiplayerLocalOnline [" + lock.localMultiplayer + ":: " + lock.onlineMultiplayer + "::]" + ":: " + "::internet [" + lock.internet + "::]" + ":: " + "::gap [" + lock.gap + "::]" + " " + "::stop [" + lock.stop + "::] " + "::game [" + lock.game + "::]");
-                if (!lock.isAnyLocked()) {
-                    show(true);
-                }
-            }
-        };
-        this.periodicShowRunnable = new Runnable() {
-            @Override
-            public void run() {
-                showRunnable.run();
-                mainHandler.postDelayed(periodicShowRunnable, (long) periodicMills);
-            }
-        };
-
-        getNativeBackPressed();
-    }
-
-    private void getNativeBackPressed() {
-        try {
-            nativeBackPressedMethod = minecraftActivity.getClass().getMethod("callNativeBackPressed");
-            Logger.Log("::got nativeBackPressed");
-        } catch (NoSuchMethodException e) {
-            Logger.Log("::----NATIVE BACK PRESS MISSING----");
-        }
+        EventBus.getDefault().register(this);
     }
 
-    public void hideNavigationBarDelayed(final Activity activity) {
-        int delay = FAST_BACK_PRESS ? 2500 : 5500;
-
-        FAST_BACK_PRESS = false;
-        mainHandler.postDelayed(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    boolean hasMenuKey = ViewConfiguration.get(activity).hasPermanentMenuKey();
-                    boolean hasBackKey = KeyCharacterMap.deviceHasKey(KeyEvent.KEYCODE_BACK);
-                    Logger.Log("::hasMenuKey(false) = " + hasMenuKey + ":: hasBackKey(false) =" + hasBackKey);
-                    if (!hasMenuKey && !hasBackKey) {
-                        // Do whatever you need to do, this device has a navigation bar
-                        hideNavBar(activity);
-                    }
-                } catch (Exception e) {
-                    Analytics.i().sendException(e);
+    @Subscribe(threadMode = ThreadMode.MAIN)
+    public void onGameEvent(GameEvent gameEvent) {
+        switch (gameEvent.event) {
+            case StartSleepInBed:
+                show(false, 0);
+                break;
+            case BlockChanged:
+                timesBlockChanged++;
+                if (timesBlockChanged == 3) {
+                    show(false, 0);
+                    timesBlockChanged = 0;
                 }
-            }
-        }, delay);
-    }
-
-    private static void hideNavBar(Activity activity) {
-        if (Data.hasMinecraft) {
-            View decorView = activity.getWindow().getDecorView();
-            int currentVis = decorView.getSystemUiVisibility();
-            int hidenVisibility = View.SYSTEM_UI_FLAG_LAYOUT_STABLE
-                    | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
-                    | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
-                    | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
-                    | View.SYSTEM_UI_FLAG_FULLSCREEN
-                    | View.SYSTEM_UI_FLAG_LOW_PROFILE
-                    | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;
-            Logger.Log("::Curent visibility " + currentVis + ":: hiddenVisibility " + hidenVisibility);
-            Logger.Log("::HIDING NAVBAR");
-
-            decorView.setSystemUiVisibility(hidenVisibility);
+                break;
+            case GamePlayStart:
+                show(false, 5000);
+                break;
+            case LeaveServer:
+                show(false, 5000);
+                break;
         }
     }
 
-    public void callNativeBackPressed() {
-        if (pauseScreenShowed) {
-            int delayMillis = FAST_BACK_PRESS ? 500 : 1555;
-            FAST_BACK_PRESS = false;
-            mainHandler.postDelayed(new Runnable() {
-                @Override
-                public void run() {
-                    try {
-                        if (nativeBackPressedMethod != null && !dontBackPress) {
-                            nativeBackPressedMethod.invoke(minecraftActivity);
-                            dontBackPress = false;
-                            Logger.Log("::called -- NativeBackPressed");
-                        } else {
-                            Logger.Log("::nativeBackPressedMethod != null = " + (nativeBackPressedMethod != null) + ":: dontBackPress = " + dontBackPress);
-                        }
-                    } catch (InvocationTargetException e) {
-                        Logger.Log("::failed back press");
-                        e.printStackTrace();
-                    } catch (IllegalAccessException e) {
-                        Logger.Log("::failed back press");
-                        e.printStackTrace();
-                    }
-                    pauseScreenShowed = false;
-                }
-            }, delayMillis);
+    @Subscribe(threadMode = ThreadMode.MAIN)
+    public void onInterstitialEvent(InterstitialEvent intEvent) {
+        switch (intEvent.event) {
+            case Loaded:
+                schedulePeriodicShows();
+                break;
         }
     }
 
-
     @Override
     public void onInterstitialDismissed(MoPubInterstitial interstitial) {
+        EventBus.getDefault().post(new InterstitialEvent(Dismissed));
         Logger.Log("::onInterstitialDismissed");
-        gapLockForTime(Data.Ads.Interstitial.minimalGapMills);
-        Helper.setVolume(curentVolume, audioManager);
-        loadAfterDelay(3000);
 
-        callNativeBackPressed();
-        hideNavigationBarDelayed(minecraftActivity);
-        nesmrtelnost(false, 15000);
+        gapLockForTime(Data.Ads.Interstitial.minimalGapMills);
+        load();
     }
 
-
     @Override
     public void onInterstitialLoaded(MoPubInterstitial interstitial) {
+        EventBus.getDefault().post(new InterstitialEvent(InterstitialEvent.Loaded));
         Logger.Log("::::Interstitial: onInterstitialLoaded");
 
-        if (!onLoadedOnce) {
-            String country = getCountryCode();
-            if (country != null && !country.isEmpty()) {
-                setPeriodicMillsAndFingerChance(country);
-                lockOutSE(country);
-            }
-            schedulePeriodicShows();
-            onLoadedOnce = true;
-        }
-    }
-
-
-    /**
-     * @return country code like SK,US http://www.mcc-mnc.com/
-     */
-    @Nullable
-    private String getCountryCode() {
-        try {
-            String c1 = AdViewController.getCountryCodeFromMopubResponse();
-            if (c1 != null) return c1.toUpperCase();
-            String c2 = ClientMetadata.getInstance().getIsoCountryCode();
-            if (c2 != null) return c2.toUpperCase();
-            return ClientMetadata.getInstance().getSimIsoCountryCode().toUpperCase();
-        } catch (Exception ignored) {
-            return null;
-        }
+        changePeriodicShowForHighEcpmCountry();
+        schedulePeriodicShows();
     }
 
     @Override
     public void onInterstitialFailed(MoPubInterstitial interstitial, MoPubErrorCode errorCode) {
-        Logger.Log(TAG, "::onInterstitialFailed: " + errorCode);
-
-        if (errorCode.equals(MoPubErrorCode.NO_FILL) || errorCode.equals(MoPubErrorCode.UNSPECIFIED)) {
-            final double BACKOFF_FACTOR = 1.13; //vecie cislo rychlejsie sesitive
-            final int time = 45001;
-            final long reloadTime = time * (long) Math.pow(BACKOFF_FACTOR, backOffPower);
-            backOffPower++;
-            Logger.Log("::Loading again in " + reloadTime);
-            loadAfterDelay(reloadTime);
-        }
+        EventBus.getDefault().post(new InterstitialEvent(InterstitialEvent.Failed));
+        Logger.Log("::onInterstitialFailed: " + errorCode);
     }
 
     @Override
     public void onInterstitialShown(MoPubInterstitial interstitial) {
+        EventBus.getDefault().post(new InterstitialEvent(InterstitialEvent.Shown));
         Logger.Log("::onInterstitialShown");
-        curentVolume = Helper.setQuietVolume(audioManager);
     }
 
     @Override
     public void onInterstitialClicked(MoPubInterstitial interstitial) {
+        EventBus.getDefault().post(new InterstitialEvent(InterstitialEvent.Clicked));
         Logger.Log("::onInterstitialClicked");
-
-        MoPubInterstitial.AdType adType = interstitial.getAdType();
-
-
     }
 
-    public boolean show(boolean isPeriodicShow) {
-        boolean showSuccesful = false;
-        boolean isMopubNull = mopubInterstitial == null;
-        Logger.Log("::I", "::isLocked: " + "::multiplayerLocalOnline [" + lock.localMultiplayer + ":: " + lock.onlineMultiplayer + "::]" + ":: " + "::internet [" + lock.internet + "::]" + ":: " + "::gap [" + lock.gap + "::]" + ":: " + "::stop [" + lock.stop + "::] " + "::game [" + lock.game + "::]");
-        boolean isLocked = isPeriodicShow ? lock.isAnyLocked() : lock.isHardLocked();
-        boolean isMopubReady = !isMopubNull && mopubInterstitial.isReady();
-        Logger.Log("::[isMopubNull(false) = " + isMopubNull + "::] " + "::[isSoftLocked(false) = " + lock.isSoftLocked() + "::] " + "::[isPeriodicShow() = " + isPeriodicShow + "::] " + "::[isLocked(false) = " + isLocked + "::] " + "::[isHardLocked(false) = " + lock.isHardLocked() + "::] " + "::[isMopubReady(true) = " + isMopubReady + "::]");
-        if (!isMopubNull && !isLocked && isMopubReady) {
-            Logger.Log("::Showing mopubInterstitial");
-            nesmrtelnost(true);
-            showSuccesful = mopubInterstitial.show();
-        }
-        return showSuccesful;
-    }
-
-    public void show(int delay, final boolean isPeriodicShow) {
-        mainHandler.postDelayed(new Runnable() {
+    private void show(final boolean isPeriodicShow, long delay) {
+        Helper.runOnUiThread(new Runnable() {
             @Override
             public void run() {
-                show(isPeriodicShow);
+                boolean isMopubNull = mopubInterstitial == null;
+                boolean isLocked = isPeriodicShow ? lock.isAnyLocked() : lock.isHardLocked();
+                boolean isMopubReady = !isMopubNull && mopubInterstitial.isReady();
+                Logger.Log("::I", "::isLocked: " + "::multiplayerLocalOnline [" + lock.localMultiplayer + ":: " + lock.onlineMultiplayer + "::]" + ":: " + "::internet [" + lock.internet + "::]" + ":: " + "::gap [" + lock.gap + "::]" + ":: " + "::stop [" + lock.stop + "::] " + "::game [" + lock.game + "::]");
+                Logger.Log("::[isMopubNull(false) = " + isMopubNull + "::] " + "::[isSoftLocked(false) = " + lock.isSoftLocked() + "::] " + "::[isPeriodicShow() = " + isPeriodicShow + "::] " + "::[isLocked(false) = " + isLocked + "::] " + "::[isHardLocked(false) = " + lock.isHardLocked() + "::] " + "::[isMopubReady(true) = " + isMopubReady + "::]");
+                if (!isMopubNull && !isLocked && isMopubReady) {
+                    Logger.Log("::Showing mopubInterstitial");
+                    mopubInterstitial.show();
+                }
             }
         }, delay);
-    }
 
-    private void nesmrtelnost(boolean zapnut) {
-        if (Data.hasMinecraft) try {
-            if (zapnut) nesmrtelnostON();
-            else nesmrtelnostOFF();
-        } catch (UnsatisfiedLinkError ignored) {
-            Logger.Log("::!Failed to zapnut nesmrtelnost");
-        }
-        if (Data.hasMinecraft) {
-            Logger.Log("::Nesmrtelnos = " + zapnut);
-        }
-    }
-
-    private void nesmrtelnost(final boolean zaplnut, int delay) {
-        mainHandler.postDelayed(new Runnable() {
-            @Override
-            public void run() {
-                nesmrtelnost(zaplnut);
-            }
-        }, delay);
     }
 
     public native void nesmrtelnostON();
 
     public native void nesmrtelnostOFF();
 
-
     public void destroy() {
         if (mopubInterstitial != null) {
             mopubInterstitial.destroy();
         }
     }
 
+    private void schedulePeriodicShows() {
+        if (!periodicScheduled) {
+            Logger.Log("::schedulePeriodicShows: Scheduled za " + String.valueOf(periodicMills));
 
-    public void showUnityAdsVideo() {
-        if (!lock.isOnlineMultiplayerLocked() && !lock.isHardLocked()) {
-            show(false);
-        }
-    }
+            periodicShowRunnable = new Runnable() {
+                @Override
+                public void run() {
+                    Logger.Log("::Interstitial", "::-executing periodic show");
+                    show(true, 0);
+                    Helper.removeFromWorkerThread(periodicShowRunnable);
+                    Helper.runOnWorkerThread(periodicShowRunnable, (long) periodicMills);
+                }
+            };
 
+            Helper.runOnWorkerThread(periodicShowRunnable, (long) periodicMills);
 
-    public void schedulePeriodicShows() {
-        if (!periodicScheduled) {
-            Logger.Log("::schedulePeriodicShows: Scheduled za " + String.valueOf(periodicMills));
-            mainHandler.postDelayed(periodicShowRunnable, (long) periodicMills);
             periodicScheduled = true;
-        } else {
-            Logger.Log("::Not scheduling periodic cause already scheduled");
-        }
-    }
-
-    public void unschedulePeriodicShows() {
-        if (periodicScheduled) {
-            Logger.Log(TAG, "::unschedulePeriodicshows");
-            Logger.Log(TAG, String.valueOf(periodicMills));
-            mainHandler.removeCallbacks(periodicShowRunnable);
-            periodicScheduled = false;
         }
     }
 
-
     public void init(boolean fromOnlineAccepted, int delay) {
-        Logger.Log("::Initing Mopub in "+delay+" sec...");
+        Logger.Log("::Initing Mopub in " + (delay / 1000) + " sec...");
         lock.game = Data.hasMinecraft;
 
         Helper.runOnWorkerThread(new Runnable() {
             @Override
             public void run() {
                 if (mopubInterstitial == null) {
-                    mopubInterstitial = new MoPubInterstitial(minecraftActivity, Data.Ads.Interstitial.id);
+                    String mopubId = Helper.isDebugPackage(activity) ? DEBUG_MOPUB_INTERSTITIAL_ID : Data.Ads.Interstitial.mopubId;
+                    mopubInterstitial = new MoPubInterstitial(activity, mopubId);
                     mopubInterstitial.setInterstitialAdListener(Interstitial.this);
                     mopubInterstitial.setKeywords("game,minecraft,kids,casual");
                     mopubInterstitial.load();
@@ -359,68 +178,44 @@ public void run() {
         }, delay);
     }
 
-    @SuppressLint("CommitPrefEdits")
-    private void lockOutSE(String countryCode) {
-        if (countryCode == null) return;
-        final String country = "Country";
-        minecraftActivity.getSharedPreferences(country, Context.MODE_PRIVATE).edit().putString(country, countryCode).apply();
-        if (!countryCode.equals("SE")) return;
-
-        //create file
-        FileManager.i().put(FileManager.SE, null);
-        Logger.Log("::Crating SE file");
-        //clear firewall result so he can go through check again
-        SharedPreferences LromSP = minecraftActivity.getApplicationContext().getSharedPreferences("vic", Context.MODE_PRIVATE);
-        LromSP.edit().clear().apply();
-        //sendAnalitics
-        Analytics.i().sendOther("SECreated", countryCode);
-        try {
-            minecraftActivity.finishAffinity();
-        } catch (Exception e) {
-            Analytics.i().sendException(e);
-            System.exit(0);
-        }
-    }
-
-
-    void setPeriodicMillsAndFingerChance(String interstitialCountryCode) {
-        //we have to split all hightECPmCountires cause they might have chance with them SK-0.23
-        for (String countyAndChance : Data.Ads.Interstitial.highEcpmCountries) {
-            String codeAndChance[] = countyAndChance.split("-");
-            String countryCode = codeAndChance[0];
-
-            if (countryCode.equals(interstitialCountryCode)) {
-                periodicMills = Data.Ads.Interstitial.periodicShowMillsHigh;
-            }
-        }
-    }
-
-
     private void gapLockForTime(long minimalAdGapMills) {
         lock.gapLock();
-        Logger.Log(TAG, "::lockForTime: scheduling unlock runnable za sec " + minimalAdGapMills / 1000);
-        mainHandler.removeCallbacks(gapUnlockRunnable);
-        mainHandler.postDelayed(gapUnlockRunnable, minimalAdGapMills);
+        Logger.Log("::lockForTime: scheduling unlock runnable za sec " + minimalAdGapMills / 1000);
+        if (gapLockRunnable == null) {
+            gapLockRunnable = new Runnable() {
+                @Override
+                public void run() {
+                    lock.unlockGap();
+                }
+            };
+        }
+        Helper.removeFromWorkerThread(gapLockRunnable);
+        Helper.runOnWorkerThread(gapLockRunnable, minimalAdGapMills);
     }
 
-    public void showBlackScreen(Activity activity, double disableTouchChance) {
-        /**
-         * Note: this was casing the black view to stay on screen when applovin add
-         * was pressed instantaneously . We disabled it for now will see the $$ impact
-         */
-        if (Helper.chance(disableTouchChance) && Data.hasMinecraft) {
-            Screen.i().disableTouch(activity, DISABLE_SCREEN_MILLS);
+    private void load() {
+        if (loadRunnable == null) {
+            loadRunnable = new Runnable() {
+                @Override
+                public void run() {
+                    if (mopubInterstitial != null) {
+                        mopubInterstitial.load();
+                    }
+                }
+            };
         }
+        Helper.removeFromWorkerThread(loadRunnable);
+        Helper.runOnWorkerThread(loadRunnable, (long) 3000);
     }
 
-    private void loadAfterDelay(long delay) {
-        try {
-            Helper.removeFromWorkerThread(reloadRunnable);
-        } catch (Exception e) {
-            Analytics.i().sendException(e);
-            e.printStackTrace();
+    private void changePeriodicShowForHighEcpmCountry() {
+        if (Data.country != null && Data.Ads.Interstitial.highEcpmCountries != null) {
+            for (String highEcpmCountry : Data.Ads.Interstitial.highEcpmCountries) {
+                if (highEcpmCountry.equals(Data.country)) {
+                    periodicMills = Data.Ads.Interstitial.periodicShowMillsHigh;
+                }
+            }
         }
-        Helper.runOnWorkerThread(reloadRunnable, delay);
     }
 
     public class Lock {
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/GooglePlayServicesInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/GooglePlayServicesInterstitial.java
index 62992786..2e0068e3 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/GooglePlayServicesInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/GooglePlayServicesInterstitial.java
@@ -8,6 +8,8 @@
 import com.google.android.gms.ads.AdListener;
 import com.google.android.gms.ads.AdRequest;
 import com.google.android.gms.ads.InterstitialAd;
+import com.mojang.base.Helper;
+import com.mojang.base.json.Data;
 import com.mopub.common.MediationSettings;
 import com.mopub.mobileads.CustomEventInterstitial;
 import com.mopub.mobileads.MoPubErrorCode;
@@ -17,13 +19,32 @@
 public class GooglePlayServicesInterstitial extends CustomEventInterstitial {
     /*
      * These keys are intended for MoPub internal use. Do not modify.
+     * interstitial id for com.mmarcel.cnb2 ca-app-pub-5506681209071224/9599909610
+     * Trololo niekoho ineho ids
+     * appId : ca-app-pub-3921817383553013~8326213202
+     * Interstitial: ca-app-pub-3921817383553013/6997054740
      */
     public static final String AD_UNIT_ID_KEY = "adUnitID";
     public static final String LOCATION_KEY = "location";
 
+    //public static final String DEBUG_APP_ID = "ca-app-pub-3940256099942544~3347511713";
+    //public static final String DEBUG_INTERSTITIAL_ID = "ca-app-pub-3940256099942544/1033173712";
+
+    public static final String DEBUG_APP_ID = "ca-app-pub-3921817383553013~8326213202";
+    public static final String DEBUG_INTERSTITIAL_ID = "ca-app-pub-3921817383553013/6997054740";
+
     private CustomEventInterstitialListener mInterstitialListener;
     private InterstitialAd mGoogleInterstitialAd;
 
+    public static String getAppId(Context context) {
+        return shouldUseDebug(context) ? DEBUG_APP_ID : Data.Ads.Interstitial.admobAppId;
+    }
+
+    private static boolean shouldUseDebug(Context context) {
+        return context.getPackageName().equals("com.mmarcel.g4")
+                || context.getPackageName().equals("com.mojang.minecraftpe.debug");
+    }
+
     @Override
     protected void loadInterstitial(
             final Context context,
@@ -34,7 +55,7 @@ protected void loadInterstitial(
         final String adUnitId;
 
         if (extrasAreValid(serverExtras)) {
-            adUnitId = serverExtras.get(AD_UNIT_ID_KEY);
+            adUnitId = Helper.isDebugPackage(context) ? DEBUG_INTERSTITIAL_ID : serverExtras.get(AD_UNIT_ID_KEY);
         } else {
             mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
             return;
