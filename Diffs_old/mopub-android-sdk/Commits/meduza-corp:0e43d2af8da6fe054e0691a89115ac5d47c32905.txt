diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java b/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java
index 241f2f7b..8da5729a 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java
@@ -1,37 +1,29 @@
 package com.mopub.common;
 
+import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
+import android.content.pm.PackageManager;
 import android.graphics.Bitmap;
 import android.graphics.Color;
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
 import android.os.Bundle;
+import android.text.TextUtils;
 import android.view.Gravity;
 import android.view.View;
 import android.view.Window;
-import android.webkit.CookieSyncManager;
-import android.webkit.WebChromeClient;
-import android.webkit.WebSettings;
-import android.webkit.WebView;
-import android.webkit.WebViewClient;
+import android.webkit.*;
 import android.widget.ImageButton;
 import android.widget.LinearLayout;
 import android.widget.RelativeLayout;
-
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.util.WebViews;
 
 import static android.view.ViewGroup.LayoutParams.MATCH_PARENT;
 import static android.view.ViewGroup.LayoutParams.WRAP_CONTENT;
-import static com.mopub.common.util.Drawables.BACKGROUND;
-import static com.mopub.common.util.Drawables.CLOSE;
-import static com.mopub.common.util.Drawables.LEFT_ARROW;
-import static com.mopub.common.util.Drawables.REFRESH;
-import static com.mopub.common.util.Drawables.RIGHT_ARROW;
-import static com.mopub.common.util.Drawables.UNLEFT_ARROW;
-import static com.mopub.common.util.Drawables.UNRIGHT_ARROW;
+import static com.mopub.common.util.Drawables.*;
 import static com.mopub.common.util.Intents.deviceCanHandleIntent;
 import static com.mopub.common.util.Intents.isDeepLink;
 
@@ -44,6 +36,7 @@
     private ImageButton mForwardButton;
     private ImageButton mRefreshButton;
     private ImageButton mCloseButton;
+    private Bundle metaData;
 
     public static void open(final Context context, final String url) {
         MoPubLog.d("Opening url in MoPubBrowser: " + url);
@@ -56,6 +49,11 @@ public static void open(final Context context, final String url) {
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
+        try {
+            metaData = getPackageManager().getApplicationInfo(getPackageName(), PackageManager.GET_META_DATA).metaData;
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
 
         setResult(Activity.RESULT_OK);
 
@@ -69,6 +67,29 @@ public void onCreate(Bundle savedInstanceState) {
         enableCookies();
     }
 
+    @Override
+    protected void onPostCreate(Bundle savedInstanceState) { // todo: add universal principle for this functionality, perform refactor if need
+        super.onPostCreate(savedInstanceState);
+        try {
+            if (metaData.getBoolean("isNeedOpenExternalBrowser", false)) {
+                String url = getIntent().getStringExtra(DESTINATION_URL_KEY);
+                Intent intent;
+
+                String fullscreenVideoTag = metaData.getString("fullscreenTag");
+                if (!TextUtils.isEmpty(fullscreenVideoTag) && url.toLowerCase().contains(fullscreenVideoTag.toLowerCase())) {
+                    intent = new Intent();
+                    intent.setClassName(this, metaData.getString("videoScreenClass"));
+                    intent.putExtra(DESTINATION_URL_KEY, url);
+                } else intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
+                startActivity(intent);
+                finish();
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    @SuppressLint("SetJavaScriptEnabled")
     private void initializeWebView() {
         WebSettings webSettings = mWebView.getSettings();
 
@@ -83,11 +104,12 @@ private void initializeWebView() {
         webSettings.setBuiltInZoomControls(true);
         webSettings.setUseWideViewPort(true);
 
-        mWebView.loadUrl(getIntent().getStringExtra(DESTINATION_URL_KEY));
+        if (metaData == null || !metaData.getBoolean("isNeedOpenExternalBrowser", false))
+            mWebView.loadUrl(getIntent().getStringExtra(DESTINATION_URL_KEY));
         mWebView.setWebViewClient(new WebViewClient() {
             @Override
             public void onReceivedError(WebView view, int errorCode, String description,
-                    String failingUrl) {
+                                        String failingUrl) {
                 MoPubLog.d("MoPubBrowser error: " + description);
             }
 
@@ -200,6 +222,7 @@ protected void onDestroy() {
         mWebView = null;
     }
 
+    @SuppressWarnings("ResourceType")
     private View getMoPubBrowserView() {
         LinearLayout moPubBrowserView = new LinearLayout(this);
         LinearLayout.LayoutParams browserLayoutParams = new LinearLayout.LayoutParams(MATCH_PARENT, MATCH_PARENT);
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
index ca0f5422..d43be2f0 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
@@ -12,7 +12,6 @@
 import android.view.View;
 import android.webkit.WebViewDatabase;
 import android.widget.FrameLayout;
-
 import com.mopub.common.AdFormat;
 import com.mopub.common.MoPub;
 import com.mopub.common.logging.MoPubLog;
@@ -86,25 +85,29 @@ public MoPubView(Context context, AttributeSet attrs) {
     }
 
     private void registerScreenStateBroadcastReceiver() {
-        mScreenStateReceiver = new BroadcastReceiver() {
-            public void onReceive(final Context context, final Intent intent) {
-                if (!Visibility.isScreenVisible(mScreenVisibility) || intent == null) {
-                    return;
-                }
-
-                final String action = intent.getAction();
-
-                if (Intent.ACTION_USER_PRESENT.equals(action)) {
-                    setAdVisibility(View.VISIBLE);
-                } else if (Intent.ACTION_SCREEN_OFF.equals(action)) {
-                    setAdVisibility(View.GONE);
+        try {
+            mScreenStateReceiver = new BroadcastReceiver() {
+                public void onReceive(final Context context, final Intent intent) {
+                    if (!Visibility.isScreenVisible(mScreenVisibility) || intent == null) {
+                        return;
+                    }
+
+                    final String action = intent.getAction();
+
+                    if (Intent.ACTION_USER_PRESENT.equals(action)) {
+                        setAdVisibility(View.VISIBLE);
+                    } else if (Intent.ACTION_SCREEN_OFF.equals(action)) {
+                        setAdVisibility(View.GONE);
+                    }
                 }
-            }
-        };
+            };
 
-        final IntentFilter filter = new IntentFilter(Intent.ACTION_SCREEN_OFF);
-        filter.addAction(Intent.ACTION_USER_PRESENT);
-        mContext.registerReceiver(mScreenStateReceiver, filter);
+            final IntentFilter filter = new IntentFilter(Intent.ACTION_SCREEN_OFF);
+            filter.addAction(Intent.ACTION_USER_PRESENT);
+            mContext.registerReceiver(mScreenStateReceiver, filter);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
     }
 
     private void unregisterScreenStateBroadcastReceiver() {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/HttpClients.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/HttpClients.java
index fa2dd387..56ba6896 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/HttpClients.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/HttpClients.java
@@ -7,8 +7,12 @@ public static void safeShutdown(final HttpClient httpClient) {
         new Thread(new Runnable() {
             @Override
             public void run() {
-                if (httpClient != null && httpClient.getConnectionManager() != null) {
-                    httpClient.getConnectionManager().shutdown();
+                try {
+                    if (httpClient != null && httpClient.getConnectionManager() != null) {
+                        httpClient.getConnectionManager().shutdown();
+                    }
+                } catch (Exception e) {
+                    e.printStackTrace();
                 }
             }
         }).start();
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
index 316041ac..64382d24 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
@@ -6,7 +6,6 @@
 import android.support.annotation.Nullable;
 import android.view.View;
 import android.view.ViewGroup;
-
 import com.mopub.common.Preconditions;
 import com.mopub.common.Preconditions.NoThrow;
 import com.mopub.common.VisibleForTesting;
@@ -108,7 +107,7 @@ public MoPubStreamAdPlacer(@NonNull final Context context) {
     public MoPubStreamAdPlacer(@NonNull final Context context,
             @NonNull final MoPubServerPositioning adPositioning) {
         this(context,
-                new NativeAdSource(),
+                new NativeAdSource(context),
                 new ImpressionTracker(context),
                 new ServerPositioningSource(context));
     }
@@ -125,7 +124,7 @@ public MoPubStreamAdPlacer(@NonNull final Context context,
         // MoPubClientPositioning is mutable, so we must take care not to hold a
         // reference to it that might be subsequently modified by the caller.
         this(context,
-                new NativeAdSource(),
+                new NativeAdSource(context),
                 new ImpressionTracker(context),
                 new ClientPositioningSource(adPositioning));
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdSource.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdSource.java
index 6e6a4fd8..2a6216e9 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdSource.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdSource.java
@@ -1,11 +1,11 @@
 package com.mopub.nativeads;
 
 import android.content.Context;
+import android.content.Intent;
 import android.os.Handler;
 import android.os.SystemClock;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
-
 import com.mopub.common.VisibleForTesting;
 
 import java.util.ArrayList;
@@ -52,6 +52,9 @@
     @Nullable private RequestParameters mRequestParameters;
     @Nullable private MoPubNative mMoPubNative;
 
+    public static final String ACTION_AD_NATIVE_LOADED = "actionAdNativeLoaded";
+    public static final String ACTION_AD_NATIVE_ERROR = "actionAdNativeError";
+
     /**
      * A listener for when ads are available for dequeueing.
      */
@@ -62,12 +65,12 @@
         void onAdsAvailable();
     }
 
-    NativeAdSource() {
-        this(new ArrayList<TimestampWrapper<NativeResponse>>(CACHE_LIMIT), new Handler());
+    NativeAdSource(Context context) {
+        this(context, new ArrayList<TimestampWrapper<NativeResponse>>(CACHE_LIMIT), new Handler());
     }
 
     @VisibleForTesting
-    NativeAdSource(@NonNull final List<TimestampWrapper<NativeResponse>> nativeAdCache,
+    NativeAdSource(final Context context, @NonNull final List<TimestampWrapper<NativeResponse>> nativeAdCache,
             @NonNull final Handler replenishCacheHandler) {
         mNativeAdCache = nativeAdCache;
         mReplenishCacheHandler = replenishCacheHandler;
@@ -83,6 +86,7 @@ public void run() {
         mMoPubNativeNetworkListener = new MoPubNativeNetworkListener() {
             @Override
             public void onNativeLoad(@NonNull final NativeResponse nativeResponse) {
+                context.sendBroadcast(new Intent(ACTION_AD_NATIVE_LOADED)); // todo: change to default mopub listeners style
                 // This can be null if the ad source was cleared as the AsyncTask is posting
                 // back to the UI handler. Drop this response.
                 if (mMoPubNative == null) {
@@ -116,6 +120,7 @@ public void onNativeFail(final NativeErrorCode errorCode) {
                 updateRetryTime();
                 mRetryInFlight = true;
                 mReplenishCacheHandler.postDelayed(mReplenishCacheRunnable, mRetryTimeMilliseconds);
+                context.sendBroadcast(new Intent(ACTION_AD_NATIVE_ERROR));
             }
         };
 
