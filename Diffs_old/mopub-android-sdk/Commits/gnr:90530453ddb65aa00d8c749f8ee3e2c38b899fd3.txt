diff --git a/mopub-sdk/src/test/java/com/mopub/common/AdReportTest.java b/mopub-sdk/src/test/java/com/mopub/common/AdReportTest.java
deleted file mode 100644
index 6bdefe59..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/AdReportTest.java
+++ /dev/null
@@ -1,104 +0,0 @@
-package com.mopub.common;
-
-import android.os.Build;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.test.support.TestDateAndTime;
-import com.mopub.network.AdResponse;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import java.util.Locale;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.stub;
-
-@RunWith(SdkTestRunner.class)
-public class AdReportTest {
-
-    public AdReport subject;
-    @Mock
-    ClientMetadata mockClientMetadata;
-    @Mock
-    AdResponse mockAdResponse;
-    private Date now;
-
-    @Before
-    public void setup() {
-        now = new Date();
-        TestDateAndTime.getInstance().setNow(now);
-    }
-
-    @Test
-    public void testToString_shouldProperlyConstructParametersTextFile() throws Exception {
-        String expectedParameters =
-                "sdk_version : 1.15.2.2\n" +
-                        "creative_id : \n" +
-                        "platform_version : "+ Integer.toString(Build.VERSION.SDK_INT) +"\n" +
-                        "device_model : android\n" +
-                        "ad_unit_id : testAdUnit\n" +
-                        "device_locale : en_US\n" +
-                        "device_id : UDID\n" +
-                        "network_type : unknown\n" +
-                        "platform : android\n" +
-                        "timestamp : " + getCurrentDateTime() + "\n" +
-                        "ad_type : interstitial\n" +
-                        "ad_size : {480, 320}\n";
-
-        stub(mockClientMetadata.getSdkVersion()).toReturn("1.15.2.2");
-        stub(mockAdResponse.getDspCreativeId()).toReturn("");
-        stub(mockClientMetadata.getDeviceModel()).toReturn("android");
-        stub(mockClientMetadata.getDeviceLocale()).toReturn(Locale.US);
-        stub(mockClientMetadata.getDeviceId()).toReturn("UDID");
-        stub(mockAdResponse.getNetworkType()).toReturn("unknown");
-
-        stub(mockAdResponse.getTimestamp()).toReturn(now.getTime());
-        stub(mockAdResponse.getAdType()).toReturn("interstitial");
-        stub(mockAdResponse.getWidth()).toReturn(480);
-        stub(mockAdResponse.getHeight()).toReturn(320);
-
-        subject = new AdReport("testAdUnit", mockClientMetadata, mockAdResponse);
-        assertThat(subject.toString()).isEqualTo(expectedParameters);
-    }
-
-    @Test
-    public void constructor_shouldHandleInvalidAdConfigurationValues() throws Exception {
-        String expectedParameters =
-                "sdk_version : null\n" +
-                        "creative_id : null\n" +
-                        "platform_version : "+ Integer.toString(Build.VERSION.SDK_INT) +"\n" +
-                        "device_model : null\n" +
-                        "ad_unit_id : testAdUnit\n" +
-                        "device_locale : null\n" +
-                        "device_id : null\n" +
-                        "network_type : null\n" +
-                        "platform : android\n" +
-                        "timestamp : null" + "\n" +
-                        "ad_type : null\n" +
-                        "ad_size : {0, 0}\n";
-
-        stub(mockClientMetadata.getSdkVersion()).toReturn(null);
-        stub(mockAdResponse.getDspCreativeId()).toReturn(null);
-        stub(mockClientMetadata.getDeviceLocale()).toReturn(null);
-        stub(mockClientMetadata.getDeviceId()).toReturn(null);
-        stub(mockAdResponse.getNetworkType()).toReturn(null);
-
-        stub(mockAdResponse.getTimestamp()).toReturn(-1L);
-        stub(mockAdResponse.getAdType()).toReturn(null);
-        stub(mockAdResponse.getWidth()).toReturn(null);
-        stub(mockAdResponse.getHeight()).toReturn(null);
-
-        subject = new AdReport("testAdUnit", mockClientMetadata, mockAdResponse);
-        assertThat(subject.toString()).isEqualTo(expectedParameters);
-    }
-
-    private String getCurrentDateTime() {
-        SimpleDateFormat dateFormat = new SimpleDateFormat("M/d/yy hh:mm:ss a z", Locale.US);
-        return dateFormat.format(now);
-    }
-}
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java b/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java
deleted file mode 100644
index 025cd79d..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java
+++ /dev/null
@@ -1,157 +0,0 @@
-package com.mopub.common;
-
-import android.app.Activity;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-
-import java.io.ByteArrayInputStream;
-import java.io.File;
-import java.io.InputStream;
-import java.util.concurrent.Semaphore;
-
-import static com.mopub.common.CacheService.DiskLruCacheGetListener;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.spy;
-
-@RunWith(SdkTestRunner.class)
-public class CacheServiceTest {
-
-    private Activity context;
-    private String key1;
-    private String data1;
-    private String getKey;
-    private byte[] getBytes;
-    private DiskLruCacheGetListener diskCacheGetListener;
-    private Semaphore semaphore;
-
-    @Before
-    public void setUp() throws Exception {
-        context = new Activity();
-        key1 = "http://www.mopub.com/";
-        data1 = "image_data_1";
-
-        semaphore = new Semaphore(0);
-        diskCacheGetListener = mock(DiskLruCacheGetListener.class);
-        doAnswer(new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
-                Object[] args = invocationOnMock.getArguments();
-                CacheServiceTest.this.getKey = (String)args[0];
-                CacheServiceTest.this.getBytes = (byte[])args[1];
-                semaphore.release();
-                return null;
-            }
-        }).when(diskCacheGetListener).onComplete(anyString(), any(byte[].class));
-    }
-
-    @Test
-    public void initializeCache_withValidContext_shouldCreateNewCachesIdempotently() throws Exception {
-        assertThat(CacheService.getDiskLruCache()).isNull();
-
-        CacheService.initialize(context);
-        DiskLruCache diskLruCache = CacheService.getDiskLruCache();
-        assertThat(diskLruCache).isNotNull();
-
-        CacheService.initialize(context);
-        assertThat(diskLruCache).isEqualTo(CacheService.getDiskLruCache());
-    }
-    
-    @Test
-    public void getDiskLruCacheDirectory_shouldReturnValidCacheDirectory() throws Exception {
-        File file = CacheService.getDiskCacheDirectory(context);
-        String expectedPath = context.getCacheDir().toString() + "/mopub-cache";
-        assertThat(file.getAbsolutePath()).isEqualTo(expectedPath);
-    }
-
-    @Test
-    public void diskLruCacheGet_whenPopulated_shouldReturnValue() throws Exception {
-        CacheService.initialize(context);
-        CacheService.putToDiskCache(key1, data1.getBytes());
-        assertThat(CacheService.getFromDiskCache(key1)).isEqualTo(data1.getBytes());
-    }
-
-    @Test
-    public void diskLruCacheGet_whenEmpty_shouldReturnNull() throws Exception {
-        CacheService.initialize(context);
-        assertCachesAreEmpty();
-        assertThat(CacheService.getFromDiskCache(key1)).isNull();
-    }
-
-    @Test
-    public void diskLruCacheAsyncGet_whenPopulated_shouldReturnValue() throws Exception {
-        CacheService.initialize(context);
-        assertCachesAreEmpty();
-        CacheService.putToDiskCache(key1, data1.getBytes());
-        CacheService.getFromDiskCacheAsync(key1, diskCacheGetListener);
-        semaphore.acquire();
-        assertThat(getKey).isEqualTo(key1);
-        assertThat(getBytes).isEqualTo(data1.getBytes());
-    }
-
-    @Test
-    public void diskLruCacheAsyncGet_whenEmpty_shouldReturnNull() throws Exception {
-        CacheService.initialize(context);
-        CacheService.getFromDiskCacheAsync(key1, diskCacheGetListener);
-        semaphore.acquire();
-        assertThat(getKey).isEqualTo(key1);
-        assertThat(getBytes).isNull();
-    }
-
-    @Test
-    public void diskLruCachePut_withEmptyStringKey_shouldPutCorrectly() throws Exception {
-        // this works because an empty string sha1 hashes to a valid key
-        CacheService.initialize(context);
-        CacheService.putToDiskCache("", data1.getBytes());
-        assertThat(CacheService.getFromDiskCache("")).isEqualTo(data1.getBytes());
-    }
-
-    @Test
-    public void diskLruCachePut_withNullKey_shouldNotPut() throws Exception {
-        // null value produces empty string key which is invalid for disk lru cache
-        CacheService.initialize(context);
-        assertCachesAreEmpty();
-        CacheService.putToDiskCache(null, data1.getBytes());
-        assertCachesAreEmpty();
-    }
-
-    @Test
-    public void createValidDiskLruCacheKey_withNullValue_shouldReturnEmptyString() throws Exception {
-        CacheService.initialize(context);
-        assertThat(CacheService.createValidDiskCacheKey(null)).isEqualTo("");
-    }
-
-    @Test
-    public void diskLruCacheAsyncPut_whenEmpty_shouldReturnNull() throws Exception {
-        CacheService.initialize(context);
-        CacheService.putToDiskCacheAsync(key1, data1.getBytes());
-        Thread.sleep(500);
-        assertThat(CacheService.getFromDiskCache(key1)).isEqualTo(data1.getBytes());
-    }
-
-    private static InputStream getInputStreamFromString(final String string) {
-        return spy(new ByteArrayInputStream(string.getBytes()));
-    }
-
-    public static void assertDiskCacheIsUninitialized() {
-        assertThat(CacheService.getDiskLruCache()).isNull();
-    }
-
-    public static void assertDiskCacheIsEmpty() {
-        assertThat(CacheService.getDiskLruCache()).isNotNull();
-        assertThat(CacheService.getDiskLruCache().size()).isEqualTo(0);
-    }
-
-    public static void assertCachesAreEmpty() {
-        assertDiskCacheIsEmpty();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java b/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java
deleted file mode 100644
index ba6fcd75..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java
+++ /dev/null
@@ -1,72 +0,0 @@
-package com.mopub.common;
-
-import android.app.Activity;
-import android.content.Context;
-import android.telephony.TelephonyManager;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import static android.Manifest.permission.ACCESS_NETWORK_STATE;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(SdkTestRunner.class)
-@Config(shadows = {MoPubShadowTelephonyManager.class})
-public class ClientMetadataTest {
-
-    public Activity activityContext;
-    private MoPubShadowTelephonyManager shadowTelephonyManager;
-
-    @Before
-    public void setUp() throws Exception {
-        activityContext = Robolectric.buildActivity(Activity.class).create().get();
-        shadowOf(activityContext).grantPermissions(ACCESS_NETWORK_STATE);
-        shadowTelephonyManager = (MoPubShadowTelephonyManager)
-                shadowOf((TelephonyManager) activityContext.getSystemService(Context.TELEPHONY_SERVICE));
-    }
-
-    // This has to be first or the singleton will be initialized by an earlier test. We should
-    // destroy the application between tests to get around this.
-    @Test
-    public void getWithoutContext_shouldReturnNull() {
-        final ClientMetadata clientMetadata = ClientMetadata.getInstance();
-        assertThat(clientMetadata).isNull();
-    }
-
-    @Test
-    public void getWithContext_shouldReturnInstance() {
-        final ClientMetadata clientMetadata = ClientMetadata.getInstance(activityContext);
-        assertThat(clientMetadata).isNotNull();
-    }
-
-    @Test
-    public void getWithoutContextAfterInit_shouldReturnInstance() {
-        ClientMetadata.getInstance(activityContext);
-        final ClientMetadata clientMetadata = ClientMetadata.getInstance();
-        assertThat(clientMetadata).isNotNull();
-    }
-
-    @Test
-    public void testCachedData_shouldBeAvailable() {
-        shadowTelephonyManager.setNetworkOperatorName("testNetworkOperatorName");
-        shadowTelephonyManager.setNetworkOperator("testNetworkOperator");
-        shadowTelephonyManager.setNetworkCountryIso("1");
-        shadowTelephonyManager.setSimCountryIso("1");
-
-        final ClientMetadata clientMetadata = ClientMetadata.getInstance(activityContext);
-        // Telephony manager data.
-        assertThat(clientMetadata.getNetworkOperatorForUrl()).isEqualTo("testNetworkOperator");
-        assertThat(clientMetadata.getNetworkOperatorName()).isEqualTo("testNetworkOperatorName");
-        assertThat(clientMetadata.getIsoCountryCode()).isEqualTo("1");
-
-        // Other cached data.
-        assertThat(clientMetadata.getDeviceId()).isNotNull().isNotEmpty();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/CloseableLayoutTest.java b/mopub-sdk/src/test/java/com/mopub/common/CloseableLayoutTest.java
deleted file mode 100644
index 998801ee..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/CloseableLayoutTest.java
+++ /dev/null
@@ -1,222 +0,0 @@
-package com.mopub.common;
-
-import android.annotation.TargetApi;
-import android.app.Activity;
-import android.graphics.Canvas;
-import android.graphics.Rect;
-import android.os.Build.VERSION_CODES;
-import android.view.MotionEvent;
-
-import com.mopub.common.CloseableLayout.ClosePosition;
-import com.mopub.common.CloseableLayout.OnCloseListener;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class CloseableLayoutTest {
-    private CloseableLayout subject;
-
-    @Mock private OnCloseListener mockCloseListener;
-    @Mock private Canvas mockCanvas;
-
-    private MotionEvent closeRegionDown;
-    private MotionEvent closeRegionUp;
-    private MotionEvent closeRegionCancel;
-    private MotionEvent contentRegionDown;
-    private MotionEvent contentRegionUp;
-    private MotionEvent contentRegionCancel;
-
-    @Before
-    public void setup() {
-        Activity activity = Robolectric.buildActivity(Activity.class).create().get();
-        subject = new CloseableLayout(activity);
-        subject.setClosePosition(ClosePosition.TOP_RIGHT);
-
-        // Fake the close bounds, which allows us to set up close regions
-        subject.setCloseBounds(new Rect(100, 10, 110, 20));
-        closeRegionDown = MotionEvent.obtain(
-                100, 200, MotionEvent.ACTION_DOWN, 100, 10, 0);
-        closeRegionUp = MotionEvent.obtain(
-                100, 200, MotionEvent.ACTION_UP, 100, 10, 0);
-        closeRegionCancel = MotionEvent.obtain(
-                100, 200, MotionEvent.ACTION_CANCEL, 100, 10, 0);
-        contentRegionDown = MotionEvent.obtain(
-                100, 200, MotionEvent.ACTION_DOWN, 0, 0, 0);
-        contentRegionUp = MotionEvent.obtain(
-                100, 200, MotionEvent.ACTION_UP, 0, 0, 0);
-        contentRegionCancel = MotionEvent.obtain(
-                100, 200, MotionEvent.ACTION_CANCEL, 0, 0, 0);
-    }
-
-    @Test
-    public void setOnCloseListener_thenTouchCloseRegion_shouldCallOnClick() {
-        subject.setOnCloseListener(mockCloseListener);
-        subject.onTouchEvent(closeRegionDown);
-        subject.onTouchEvent(closeRegionUp);
-
-        verify(mockCloseListener).onClose();
-    }
-
-    @Test
-    public void setOnCloseListener_thenTouchContentRegion_shouldNotCallCloseListener() {
-        subject.setOnCloseListener(mockCloseListener);
-        subject.onTouchEvent(contentRegionDown);
-        subject.onTouchEvent(contentRegionUp);
-
-        verify(mockCloseListener, never()).onClose();
-    }
-
-    @Test
-    public void setCloseVisible_shouldToggleCloseDrawable() {
-        subject.setCloseVisible(false);
-        assertThat(subject.isCloseVisible()).isFalse();
-
-        subject.setCloseVisible(true);
-        assertThat(subject.isCloseVisible()).isTrue();
-    }
-
-    // setLeft, setTop, setRight, and setBottom, are not available before honeycomb. This
-    // annotation just supresses a warning.
-    @TargetApi(VERSION_CODES.HONEYCOMB)
-    @Test
-    public void draw_shouldUpdateCloseBounds() {
-        subject.setLeft(0);
-        subject.setTop(0);
-        subject.setRight(100);
-        subject.setBottom(200);
-        subject.onSizeChanged(100, 200, 0, 0);
-
-        int expectedTop = 0;
-        int expectedLeft = (int) (100 - CloseableLayout.CLOSE_REGION_SIZE_DP);
-
-        subject.draw(mockCanvas);
-        Rect closeBounds = subject.getCloseBounds();
-        assertThat(closeBounds.top).isEqualTo(expectedTop);
-        assertThat(closeBounds.bottom).isEqualTo(
-                (int) (expectedTop + CloseableLayout.CLOSE_REGION_SIZE_DP));
-        assertThat(closeBounds.left).isEqualTo(expectedLeft);
-        assertThat(closeBounds.right).isEqualTo(
-                (int) (expectedLeft + CloseableLayout.CLOSE_REGION_SIZE_DP));
-    }
-
-    @Test
-    public void draw_withoutCloseBoundsChanged_shouldNotUpdateCloseBounds() {
-        subject.draw(mockCanvas);
-        Rect originalCloseBounds = subject.getCloseBounds();
-
-        subject.setCloseBounds(new Rect(40, 41, 42, 43));
-        subject.setCloseBoundChanged(false);
-        subject.draw(mockCanvas);
-
-        assertThat(subject.getCloseBounds()).isEqualTo(originalCloseBounds);
-    }
-
-    @Test
-    public void onInterceptTouchEvent_closeRegionDown_shouldReturnTrue() {
-        boolean intercepted = subject.onInterceptTouchEvent(closeRegionDown);
-        assertThat(intercepted).isTrue();
-    }
-
-    @Test public void onInterceptTouchEvent_contentRegionDown_returnsTrue() {
-        boolean intercepted = subject.onInterceptTouchEvent(contentRegionDown);
-        assertThat(intercepted).isFalse();
-    }
-
-    @Test
-    public void
-    onTouchEvent_closeRegionDown_thenCloseRegionUp_shouldTogglePressedStateAfterDelay() {
-        assertThat(subject.isClosePressed()).isFalse();
-
-        subject.onTouchEvent(closeRegionDown);
-        assertThat(subject.isClosePressed()).isTrue();
-
-        subject.onTouchEvent(closeRegionUp);
-        assertThat(subject.isClosePressed()).isTrue();
-
-        Robolectric.getUiThreadScheduler().advanceToLastPostedRunnable();
-        assertThat(subject.isClosePressed()).isFalse();
-    }
-
-    @Test
-    public void onTouchEvent_closeRegionDown_thenCloseRegionCancel_shouldTogglePressedState() {
-        subject.onTouchEvent(closeRegionDown);
-        subject.onTouchEvent(closeRegionCancel);
-        assertThat(subject.isClosePressed()).isFalse();
-    }
-
-    @Test
-    public void onTouchEvent_closeRegionDown_thenContentRegionCancel_shouldTogglePressedState() {
-        subject.onTouchEvent(closeRegionDown);
-        subject.onTouchEvent(contentRegionCancel);
-        assertThat(subject.isClosePressed()).isFalse();
-    }
-
-    @Test
-    public void pointInCloseBounds_noSlop_shouldReturnValidValues() {
-        Rect bounds = new Rect();
-        bounds.left = 10;
-        bounds.right = 20;
-        bounds.top = 100;
-        bounds.bottom = 200;
-        subject.setCloseBounds(bounds);
-
-        assertThat(subject.pointInCloseBounds(9, 99, 0)).isFalse();
-        assertThat(subject.pointInCloseBounds(9, 100, 0)).isFalse();
-        assertThat(subject.pointInCloseBounds(9, 199, 0)).isFalse();
-        assertThat(subject.pointInCloseBounds(9, 200, 0)).isFalse();
-        assertThat(subject.pointInCloseBounds(10, 99, 0)).isFalse();
-        assertThat(subject.pointInCloseBounds(10, 100, 0)).isTrue();
-        assertThat(subject.pointInCloseBounds(10, 199, 0)).isTrue();
-        assertThat(subject.pointInCloseBounds(10, 200, 0)).isFalse();
-
-        assertThat(subject.pointInCloseBounds(19, 99, 0)).isFalse();
-        assertThat(subject.pointInCloseBounds(19, 100, 0)).isTrue();
-        assertThat(subject.pointInCloseBounds(19, 199, 0)).isTrue();
-        assertThat(subject.pointInCloseBounds(19, 200, 0)).isFalse();
-        assertThat(subject.pointInCloseBounds(20, 99, 0)).isFalse();
-        assertThat(subject.pointInCloseBounds(20, 100, 0)).isFalse();
-        assertThat(subject.pointInCloseBounds(20, 199, 0)).isFalse();
-        assertThat(subject.pointInCloseBounds(20, 200, 0)).isFalse();
-
-    }
-
-    @Test
-    public void pointInCloseBounds_slop_shouldReturnValidValues() {
-        int slop = 3;
-
-        // Same as above, but adjust given 3 px slop
-        Rect bounds = new Rect();
-        bounds.left = 13;
-        bounds.right = 17;
-        bounds.top = 103;
-        bounds.bottom = 197;
-        subject.setCloseBounds(bounds);
-
-        assertThat(subject.pointInCloseBounds(9, 99, slop)).isFalse();
-        assertThat(subject.pointInCloseBounds(9, 100, slop)).isFalse();
-        assertThat(subject.pointInCloseBounds(9, 199, slop)).isFalse();
-        assertThat(subject.pointInCloseBounds(9, 200, slop)).isFalse();
-        assertThat(subject.pointInCloseBounds(10, 99, slop)).isFalse();
-        assertThat(subject.pointInCloseBounds(10, 100, slop)).isTrue();
-        assertThat(subject.pointInCloseBounds(10, 199, slop)).isTrue();
-        assertThat(subject.pointInCloseBounds(10, 200, slop)).isFalse();
-
-        assertThat(subject.pointInCloseBounds(19, 99, slop)).isFalse();
-        assertThat(subject.pointInCloseBounds(19, 100, slop)).isTrue();
-        assertThat(subject.pointInCloseBounds(19, 199, slop)).isTrue();
-        assertThat(subject.pointInCloseBounds(19, 200, slop)).isFalse();
-        assertThat(subject.pointInCloseBounds(20, 99, slop)).isFalse();
-        assertThat(subject.pointInCloseBounds(20, 100, slop)).isFalse();
-        assertThat(subject.pointInCloseBounds(20, 199, slop)).isFalse();
-        assertThat(subject.pointInCloseBounds(20, 200, slop)).isFalse();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/DownloadResponseTest.java b/mopub-sdk/src/test/java/com/mopub/common/DownloadResponseTest.java
deleted file mode 100644
index b0de5153..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/DownloadResponseTest.java
+++ /dev/null
@@ -1,69 +0,0 @@
-package com.mopub.common;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.ResponseHeader;
-import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
-
-import org.apache.http.HttpResponse;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import java.util.Locale;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.junit.Assert.assertArrayEquals;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-public class DownloadResponseTest {
-
-    DownloadResponse subject;
-    TestHttpResponseWithHeaders testHttpResponse;
-
-    @Before
-    public void setup() throws Exception {
-        testHttpResponse = new TestHttpResponseWithHeaders(200, "abcde".getBytes());
-        testHttpResponse.addHeader(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "testCustomEvent");
-        testHttpResponse.addHeader(ResponseHeader.CLICK_TRACKING_URL.getKey().toLowerCase(Locale.US), "http://example.com/");
-        testHttpResponse.addHeader(ResponseHeader.FAIL_URL.getKey().toUpperCase(Locale.US), "http://mopub.com/");
-        subject = new DownloadResponse(testHttpResponse);
-    }
-
-    @Test
-    public void constructor_withNullHttpEntity_shouldNotThrowNullPointerException() throws Exception {
-        HttpResponse mockHttpResponse = mock(HttpResponse.class);
-        when(mockHttpResponse.getEntity()).thenReturn(null);
-        when(mockHttpResponse.getStatusLine()).thenReturn(testHttpResponse.new TestStatusLine());
-
-        DownloadResponse downloadResponse = new DownloadResponse(mockHttpResponse);
-        assertThat(downloadResponse.getContentLength()).isEqualTo(0);
-        assertThat(downloadResponse.getByteArray()).isEmpty();
-    }
-
-    @Test
-    public void testGetByteArray() throws Exception {
-        assertArrayEquals("abcde".getBytes(), subject.getByteArray());
-    }
-
-    @Test
-    public void testGetStatusCode() throws Exception {
-        assertEquals(200, subject.getStatusCode());
-    }
-
-    @Test
-    public void testGetContentLength() throws Exception {
-        assertEquals("abcde".getBytes().length, subject.getContentLength());
-    }
-
-    @Test
-    public void testGetFirstHeader_caseInsensitive() throws Exception {
-        assertEquals("testCustomEvent", subject.getFirstHeader(ResponseHeader.CUSTOM_EVENT_NAME));
-        assertEquals("http://example.com/", subject.getFirstHeader(ResponseHeader.CLICK_TRACKING_URL));
-        assertEquals("http://mopub.com/", subject.getFirstHeader(ResponseHeader.FAIL_URL));
-        assertNull(subject.getFirstHeader(ResponseHeader.CUSTOM_EVENT_DATA));
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/DownloadTaskTest.java b/mopub-sdk/src/test/java/com/mopub/common/DownloadTaskTest.java
deleted file mode 100644
index bbe1b484..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/DownloadTaskTest.java
+++ /dev/null
@@ -1,126 +0,0 @@
-package com.mopub.common;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.ResponseHeader;
-import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
-
-import org.apache.http.client.methods.HttpGet;
-import org.apache.http.client.methods.HttpUriRequest;
-import org.junit.Before;
-import org.junit.Ignore;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Captor;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.tester.org.apache.http.FakeHttpLayer;
-
-import static junit.framework.Assert.fail;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class DownloadTaskTest {
-
-    @Mock private DownloadTask.DownloadTaskListener mockDownloadTaskListener;
-    @Captor private ArgumentCaptor<DownloadResponse> responseCaptor;
-
-    private DownloadTask mDownloadTask;
-    private HttpGet httpGet;
-    private String mTestResponse;
-    private FakeHttpLayer mFakeHttpLayer;
-    private TestHttpResponseWithHeaders mTestHttpResponseWithHeaders;
-
-    @Before
-    public void setUp() {
-        mDownloadTask = new DownloadTask(mockDownloadTaskListener);
-        try {
-            httpGet = new HttpGet("http://www.mopub.com/");
-        } catch (IllegalArgumentException e) {
-            fail("Could not initialize HttpGet in test");
-        }
-
-        mTestResponse = "TEST RESPONSE";
-        mTestHttpResponseWithHeaders = new TestHttpResponseWithHeaders(200, mTestResponse);
-        mTestHttpResponseWithHeaders.addHeader(ResponseHeader.IMPRESSION_URL.getKey(), "moPubImpressionTrackerUrl");
-        mTestHttpResponseWithHeaders.addHeader(ResponseHeader.CLICK_TRACKING_URL.getKey(), "moPubClickTrackerUrl");
-
-        mFakeHttpLayer = Robolectric.getFakeHttpLayer();
-    }
-
-    @Test
-    public void whenDownloadTaskAndHttpClientCompleteSuccessfully_shouldReturn200HttpResponse() {
-        mFakeHttpLayer.addPendingHttpResponse(mTestHttpResponseWithHeaders);
-        mDownloadTask.execute(httpGet);
-
-        verify(mockDownloadTaskListener).onComplete(eq(httpGet.getURI().toString()), responseCaptor.capture());
-        DownloadResponse response = responseCaptor.getValue();
-        assertThat(response.getStatusCode()).isEqualTo(200);
-        assertThat(response.getFirstHeader(ResponseHeader.IMPRESSION_URL)).isEqualTo("moPubImpressionTrackerUrl");
-        assertThat(response.getFirstHeader(ResponseHeader.CLICK_TRACKING_URL)).isEqualTo("moPubClickTrackerUrl");
-        assertThat(HttpResponses.asResponseString(response)).isEqualTo(mTestResponse);
-    }
-
-    @Test
-    public void whenDownloadTaskCompletesSuccessfullyAndHttpClientTimesOut_shouldReturn599HttpResponse() {
-        mFakeHttpLayer.addPendingHttpResponse(599, "");
-        mDownloadTask.execute(httpGet);
-
-        verify(mockDownloadTaskListener).onComplete(eq(httpGet.getURI().toString()),
-                responseCaptor.capture());
-        DownloadResponse response = responseCaptor.getValue();
-        assertThat(response.getStatusCode()).isEqualTo(599);
-        assertThat(HttpResponses.asResponseString(response)).isEqualTo("");
-    }
-
-    @Test
-    public void whenDownloadTaskIsCancelledBeforeExecute_shouldNotCallOnComplete() {
-        mFakeHttpLayer.addPendingHttpResponse(200, mTestResponse);
-        mDownloadTask.cancel(true);
-        mDownloadTask.execute(httpGet);
-
-        verify(mockDownloadTaskListener, never()).onComplete(
-                any(String.class), any(DownloadResponse.class));
-    }
-
-    @Ignore("pending")
-    @Test
-    public void whenHttpUriRequestThrowsIOException_shouldCancelTaskAndReturnNullHttpResponse() {
-        // need a way to force HttpUriRequest to throw on execute
-    }
-
-    @Test
-    public void whenHttpUriRequestIsNull_shouldReturnNullHttpReponseAndNullUrl() {
-        mDownloadTask.execute((HttpUriRequest) null);
-        verify(mockDownloadTaskListener).onComplete(null, null);
-    }
-
-    @Test
-    public void whenHttpUriRequestIsNullArray_shouldReturnNullHttpReponseAndNullUrl() {
-        mDownloadTask.execute((HttpUriRequest[]) null);
-        verify(mockDownloadTaskListener).onComplete(null, null);
-    }
-
-    @Test
-    public void whenHttpUriRequestIsArray_shouldOnlyReturnFirstResponse() {
-        mFakeHttpLayer.addPendingHttpResponse(200, mTestResponse);
-        mFakeHttpLayer.addPendingHttpResponse(500, "");
-        mDownloadTask.execute(httpGet, new HttpGet("http://www.twitter.com/"));
-
-        verify(mockDownloadTaskListener).onComplete(eq(httpGet.getURI().toString()),
-                responseCaptor.capture());
-        DownloadResponse response = responseCaptor.getValue();
-
-        assertThat(response.getStatusCode()).isEqualTo(200);
-        assertThat(HttpResponses.asResponseString(response)).isEqualTo(mTestResponse);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void constructor_withNullListener_shouldThrowIllegalArgumentException() {
-        new DownloadTask(null);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java b/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
deleted file mode 100644
index f5b8a175..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
+++ /dev/null
@@ -1,312 +0,0 @@
-package com.mopub.common;
-
-import android.app.Activity;
-import android.content.Context;
-import android.os.Looper;
-
-import com.mopub.common.factories.MethodBuilderFactory;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.test.support.TestMethodBuilderFactory;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-
-import java.util.concurrent.Semaphore;
-
-import static com.mopub.common.util.Reflection.MethodBuilder;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-public class GpsHelperTest {
-    private MethodBuilder methodBuilder;
-    private Activity context;
-    private TestAdInfo adInfo;
-    private Semaphore semaphore;
-    private GpsHelper.GpsHelperListener semaphoreGpsHelperListener;
-    private Looper gpsHelperListenerCallbackLooper;
-
-    // This class emulates the AdInfo class returned from the Google Play Services
-    // AdvertisingIdClient.getAdvertisingIdInfo method; need to implement getters for reflection calls
-    public static final class TestAdInfo {
-        public static final String ADVERTISING_ID = "38400000-8cf0-11bd-b23e-10b96e40000d";
-        public static final boolean LIMIT_AD_TRACKING_ENABLED = true;
-
-        public String mAdId = ADVERTISING_ID;
-        public boolean mLimitAdTrackingEnabled = LIMIT_AD_TRACKING_ENABLED;
-
-        public String getId() {
-            return mAdId;
-        }
-
-        public boolean isLimitAdTrackingEnabled() {
-            return mLimitAdTrackingEnabled;
-        }
-    }
-
-    @Before
-    public void setup() {
-    	context = new Activity();
-        adInfo = new TestAdInfo();
-
-        methodBuilder = TestMethodBuilderFactory.getSingletonMock();
-        when(methodBuilder.setStatic(any(Class.class))).thenReturn(methodBuilder);
-        when(methodBuilder.addParam(any(Class.class), any())).thenReturn(methodBuilder);
-
-        semaphore = new Semaphore(0);
-        semaphoreGpsHelperListener = new GpsHelper.GpsHelperListener() {
-            @Override
-            public void onFetchAdInfoCompleted() {
-                gpsHelperListenerCallbackLooper = Looper.myLooper();
-                semaphore.release();
-            }
-        };
-    }
-
-    @After
-    public void tearDown() throws Exception {
-        reset(methodBuilder);
-    }
-
-    @Test
-    public void isPlayServicesAvailable_whenGooglePlayServicesIsLinked_shouldReturnTrue() throws Exception {
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenReturn(GpsHelper.GOOGLE_PLAY_SUCCESS_CODE);
-        assertThat(GpsHelper.isPlayServicesAvailable(context)).isTrue();
-    }
-
-    @Test
-    public void isPlayServicesAvailable_whenGooglePlayServicesReturnsNonSuccessCode_shouldReturnFalse() throws Exception {
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenReturn(GpsHelper.GOOGLE_PLAY_SUCCESS_CODE + 1);
-        assertThat(GpsHelper.isPlayServicesAvailable(context)).isFalse();
-    }
-
-    @Test
-    public void isPlayServicesAvailable_whenGooglePlayServicesReturnsNull_shouldReturnFalse() throws Exception {
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenReturn(null);
-        assertThat(GpsHelper.isPlayServicesAvailable(context)).isFalse();
-    }
-
-    @Test
-    public void isPlayServicesAvailable_whenGooglePlayServicesIsNotLinked_shouldReturnFalse() throws Exception {
-        assertThat(GpsHelper.isPlayServicesAvailable(context)).isFalse();
-    }
-
-    @Test
-    public void fetchAdvertisingInfoAsync_whenGooglePlayServicesIsLinked_shouldInvokeCallbackOnMainLooper() throws Exception {
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenReturn(
-                adInfo,
-                adInfo.mAdId,
-                adInfo.mLimitAdTrackingEnabled
-        );
-
-        GpsHelper.fetchAdvertisingInfoAsync(context, semaphoreGpsHelperListener);
-        safeAcquireSemaphore();
-        assertThat(gpsHelperListenerCallbackLooper).isEqualTo(Looper.getMainLooper());
-    }
-
-    @Test
-    public void fetchAdvertisingInfoAsync_whenGooglePlayServicesIsLinked_shouldPopulateClientMetadata() throws Exception {
-        verifyCleanClientMetadata(context);
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenReturn(
-                GpsHelper.GOOGLE_PLAY_SUCCESS_CODE,
-                adInfo,
-                adInfo.mAdId,
-                adInfo.mLimitAdTrackingEnabled
-        );
-
-        GpsHelper.fetchAdvertisingInfoAsync(context, semaphoreGpsHelperListener);
-        safeAcquireSemaphore();
-        verifyClientMetadata(context, adInfo);
-    }
-
-    @Test
-    public void fetchAdvertisingInfoAsync_whenReflectedMethodCallThrows_shouldNotPopulateClientMetadata() throws Exception {
-        verifyCleanClientMetadata(context);
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenThrow(new Exception());
-
-        GpsHelper.fetchAdvertisingInfoAsync(context, semaphoreGpsHelperListener);
-        safeAcquireSemaphore();
-        verifyCleanClientMetadata(context);
-    }
-
-    @Test
-    public void fetchAdvertisingInfoAsync_whenReflectedMethodCallReturnsNull_shouldNotPopulateClientMetadata() throws Exception {
-        verifyCleanClientMetadata(context);
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenReturn(null);
-
-        GpsHelper.fetchAdvertisingInfoAsync(context, semaphoreGpsHelperListener);
-        safeAcquireSemaphore();
-        verifyCleanClientMetadata(context);
-    }
-
-    @Test
-    public void fetchAdvertisingInfoAsync_whenGooglePlayServicesIsLinkedAndClientMetadataIsClean_shouldPopulateClientMetadata() throws Exception {
-        verifyCleanClientMetadata(context);
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenReturn(
-                GpsHelper.GOOGLE_PLAY_SUCCESS_CODE,
-                adInfo,
-                adInfo.mAdId,
-                adInfo.mLimitAdTrackingEnabled
-        );
-
-        GpsHelper.fetchAdvertisingInfoAsync(context, semaphoreGpsHelperListener);
-        safeAcquireSemaphore();
-        verifyClientMetadata(context, adInfo);
-    }
-
-    @Test
-    public void fetchAdvertisingInfoAsync_whenGooglePlayServicesLinkedAndClientMetadataIsPopulated_shouldRePopulateClientMetadata() throws Exception {
-        verifyCleanClientMetadata(context);
-        populateAndVerifyClientMetadata(context, adInfo);
-        adInfo.mLimitAdTrackingEnabled = false;
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenReturn(
-                GpsHelper.GOOGLE_PLAY_SUCCESS_CODE,
-                adInfo,
-                adInfo.mAdId,
-                adInfo.mLimitAdTrackingEnabled
-        );
-
-        GpsHelper.fetchAdvertisingInfoAsync(context, semaphoreGpsHelperListener);
-        safeAcquireSemaphore();
-        verifyClientMetadata(context, adInfo);
-    }
-
-    @Test
-    public void fetchAdvertisingInfoAsync_whenGooglePlayServicesIsNotLinked_shouldNotPopulateClientMetadata() throws Exception {
-        verifyCleanClientMetadata(context);
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenReturn(
-                GpsHelper.GOOGLE_PLAY_SUCCESS_CODE + 1
-        );
-
-        GpsHelper.fetchAdvertisingInfoAsync(context, semaphoreGpsHelperListener);
-        safeAcquireSemaphore();
-        verifyCleanClientMetadata(context);
-    }
-
-    @Test
-    public void isClientMetadataPopulated_whenContainsAdvertisingIdKeyAndIsLimitAdTrackingEnabledKey_shouldReturnTrue() throws Exception {
-        verifyCleanClientMetadata(context);
-        populateAndVerifyClientMetadata(context, adInfo);
-        assertThat(GpsHelper.isClientMetadataPopulated(context)).isTrue();
-    }
-
-    @Test
-    public void isClientMetadataPopulated_whenClean_shouldReturnFalse() throws Exception {
-        verifyCleanClientMetadata(context);
-        assertThat(GpsHelper.isClientMetadataPopulated(context)).isFalse();
-    }
-
-    @Test
-    public void updateClientMetadata_whenPassingInValidAdInfoObject_shouldUpdateClientMetadata() throws Exception {
-        // Use the real MethodBuilderFactory for this test, not the mock one
-        // Most mocks are set by default in SdkTestRunner setup
-        MethodBuilderFactory.setInstance(new MethodBuilderFactory());
-        verifyCleanClientMetadata(context);
-        GpsHelper.updateClientMetadata(context, adInfo);
-        verifyClientMetadata(context, adInfo);
-    }
-
-    @Test
-    public void reflectedGetIsLimitAdTrackingEnabled_whenIsLimitAdTrackingEnabledIsSet_shouldReturnIsLimitAdTrackingEnabled() throws Exception {
-        MethodBuilderFactory.setInstance(new MethodBuilderFactory());
-        assertThat(GpsHelper.reflectedIsLimitAdTrackingEnabled(adInfo, false)).isEqualTo(adInfo.LIMIT_AD_TRACKING_ENABLED);
-    }
-
-    @Test
-    public void reflectedGetIsLimitAdTrackingEnabled_whenReflectedMethodCallThrows_shouldReturnDefaultValue() throws Exception {
-        when(methodBuilder.execute()).thenThrow(new Exception());
-        assertThat(GpsHelper.reflectedIsLimitAdTrackingEnabled(new Object(), false)).isFalse();
-        verify(methodBuilder).execute();
-        assertThat(GpsHelper.reflectedIsLimitAdTrackingEnabled(new Object(), true)).isTrue();
-        verify(methodBuilder, times(2)).execute();
-    }
-
-    @Test
-    public void reflectedGetIsLimitAdTrackingEnabled_whenReflectedMethodCallReturnsNull_shouldReturnDefaultValue() throws Exception {
-        when(methodBuilder.execute()).thenReturn(null);
-        assertThat(GpsHelper.reflectedIsLimitAdTrackingEnabled(new Object(), false)).isFalse();
-        verify(methodBuilder).execute();
-        assertThat(GpsHelper.reflectedIsLimitAdTrackingEnabled(new Object(), true)).isTrue();
-        verify(methodBuilder, times(2)).execute();
-    }
-
-    @Test
-    public void reflectedGetAdvertisingId_whenAdvertisingIdIsSet_shouldReturnAdvertisingId() throws Exception {
-        MethodBuilderFactory.setInstance(new MethodBuilderFactory());
-        assertThat(GpsHelper.reflectedGetAdvertisingId(adInfo, null)).isEqualTo(adInfo.ADVERTISING_ID);
-    }
-
-    @Test
-    public void reflectedGetAdvertisingId_whenReflectedMethodCallThrows_shouldReturnDefaultValue() throws Exception {
-        when(methodBuilder.execute()).thenThrow(new Exception());
-        assertThat(GpsHelper.reflectedGetAdvertisingId(new Object(), null)).isNull();
-        verify(methodBuilder).execute();
-        String defaultAdId = "TEST_DEFAULT";
-        assertThat(GpsHelper.reflectedGetAdvertisingId(new Object(), defaultAdId)).isEqualTo(defaultAdId);
-        verify(methodBuilder, times(2)).execute();
-    }
-
-    @Test
-    public void isLimitAdTrackingEnabled_whenGooglePlayServicesIsLinkedAndLimitAdTrackingIsCached_shouldReturnLimitAdTracking() throws Exception {
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenReturn(GpsHelper.GOOGLE_PLAY_SUCCESS_CODE);
-        SharedPreferencesHelper.getSharedPreferences(context)
-                .edit()
-                .putBoolean(GpsHelper.IS_LIMIT_AD_TRACKING_ENABLED_KEY, adInfo.LIMIT_AD_TRACKING_ENABLED)
-                .commit();
-        assertThat(GpsHelper.isLimitAdTrackingEnabled(context)).isEqualTo(adInfo.LIMIT_AD_TRACKING_ENABLED);
-    }
-
-    @Test
-    public void isLimitAdTrackingEnabled_whenGooglePlayServicesIsLinkedAndAdInfoIsNotCached_shouldReturnFalse() throws Exception {
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenReturn(GpsHelper.GOOGLE_PLAY_SUCCESS_CODE);
-        assertThat(GpsHelper.isLimitAdTrackingEnabled(context)).isFalse();
-    }
-
-    @Test
-    public void isLimitAdTrackingEnabled_whenGooglePlayServicesIsNotLinked_shouldReturnFalse() throws Exception {
-        assertThat(GpsHelper.isLimitAdTrackingEnabled(context)).isFalse();
-    }
-
-    static public void populateAndVerifyClientMetadata(Context context, TestAdInfo adInfo) {
-        ClientMetadata clientMetadata = ClientMetadata.getInstance(context);
-        clientMetadata.setAdvertisingInfo(adInfo.getId(), adInfo.isLimitAdTrackingEnabled());
-        verifyClientMetadata(context, adInfo);
-    }
-
-    private void safeAcquireSemaphore() throws Exception {
-        Robolectric.runBackgroundTasks();
-        Robolectric.runUiThreadTasks();
-        semaphore.acquire();
-    }
-
-    static public void verifyClientMetadata(Context context, TestAdInfo adInfo) {
-        ClientMetadata clientMetadata = ClientMetadata.getInstance(context);
-        assertThat(clientMetadata.getDeviceId()).isEqualTo("ifa:" + adInfo.getId());
-        assertThat(clientMetadata.isDoNotTrackSet()).isEqualTo(adInfo.isLimitAdTrackingEnabled());
-    }
-
-    static public void verifyCleanClientMetadata(Context context) {
-        ClientMetadata clientMetadata = ClientMetadata.getInstance(context);
-        assertThat(clientMetadata.isAdvertisingInfoSet()).isFalse();
-    }
-}
-
diff --git a/mopub-sdk/src/test/java/com/mopub/common/HttpClientTest.java b/mopub-sdk/src/test/java/com/mopub/common/HttpClientTest.java
deleted file mode 100644
index c00f14fb..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/HttpClientTest.java
+++ /dev/null
@@ -1,154 +0,0 @@
-package com.mopub.common;
-
-import android.app.Activity;
-import android.webkit.WebView;
-
-import com.mopub.common.util.ResponseHeader;
-
-import org.apache.http.HttpRequest;
-import org.apache.http.client.methods.HttpGet;
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.tester.org.apache.http.RequestMatcher;
-import org.robolectric.tester.org.apache.http.TestHttpResponse;
-
-import static com.mopub.common.HttpClient.getWebViewUserAgent;
-import static com.mopub.common.HttpClient.initializeHttpGet;
-import static com.mopub.common.HttpClient.urlEncode;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(RobolectricTestRunner.class)
-public class HttpClientTest {
-    static final String url = "http://www.mopub.com";
-    private Activity context;
-    private String userAgent;
-
-    @Before
-    public void setup() {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        userAgent = new WebView(context).getSettings().getUserAgentString();
-
-        Robolectric.addHttpResponseRule(new RequestMatcher() {
-            @Override
-            public boolean matches(HttpRequest request) {
-                return true;
-            }
-        }, new TestHttpResponse(200, "body"));
-
-        HttpClient.setWebViewUserAgent(null);
-        Robolectric.getBackgroundScheduler().pause();
-        Robolectric.clearPendingHttpResponses();
-    }
-
-    @After
-    public void tearDown() throws Exception {
-        HttpClient.setWebViewUserAgent(null);
-        Robolectric.getBackgroundScheduler().reset();
-        Robolectric.clearPendingHttpResponses();
-    }
-
-    @Test
-    public void initializeHttpGet_shouldReturnHttpGetWithWebViewUserAgent() throws Exception {
-        HttpGet httpGet = initializeHttpGet(url, context);
-
-        assertThat(httpGet.getURI().toURL().toString()).isEqualTo(url);
-        assertThat(httpGet.getFirstHeader(ResponseHeader.USER_AGENT.getKey()).getValue()).isEqualTo(userAgent);
-    }
-
-    @Test
-    public void initializeHttpGet_shouldPopulateStaticWebViewUserAgent() throws Exception {
-        assertThat(HttpClient.getWebViewUserAgent()).isNull();
-
-        HttpGet httpGet = initializeHttpGet(url, context);
-
-        assertThat(HttpClient.getWebViewUserAgent()).isEqualTo(userAgent);
-    }
-
-    @Test
-    public void initializeHttpGet_withNullContext_shouldNotSetUserAgent() throws Exception {
-        HttpGet httpGet = initializeHttpGet("http://www.mopub.com/");
-        assertThat(httpGet.getFirstHeader(ResponseHeader.USER_AGENT.getKey())).isNull();
-    }
-
-    @Test
-    public void initializeHttpGet_shouldProperlyEncodeUrl() throws Exception {
-        HttpGet httpGet = initializeHttpGet("http://host:80/doc|search?q=green robots#over 6\"");
-        assertThat(httpGet.getURI().toString())
-                .isEqualTo("http://host:80/doc%7Csearch?q=green%20robots#over%206%22");
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void initializeHttpGet_withImproperlyEncodedUrl_shouldThrowIllegalArgumentException() throws Exception {
-        initializeHttpGet("http://user:passwrd@host:80/doc%7ZZZC");
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void initializeHttpGet_withMalformedUrl_shouldThrowIllegalArgumentException() throws Exception {
-        initializeHttpGet("bad://host:80/doc|search?q=green robots#over 6\"");
-    }
-
-    @Test
-    public void urlEncode_shouldProperlyEncodeUrls() throws Exception {
-        // Example url borrowed from: http://developer.android.com/reference/java/net/URI.html
-        assertThat(urlEncode("http://user:passwrd@host:80/doc|search?q=green robots#over 6\""))
-                .isEqualTo("http://user:passwrd@host:80/doc%7Csearch?q=green%20robots#over%206%22");
-
-        assertThat(urlEncode("http://www.example.com/?key=value\"\"&key2=value2?"))
-                .isEqualTo("http://www.example.com/?key=value%22%22&key2=value2?");
-
-        assertThat(urlEncode("http://user:passwrd@host:80/doc?q=green#robots"))
-                .isEqualTo("http://user:passwrd@host:80/doc?q=green#robots");
-
-        assertThat(urlEncode("http://rtr.innovid.com/r1.5460f51c393410.96367393;cb=[timestamp]"))
-                .isEqualTo("http://rtr.innovid.com/r1.5460f51c393410.96367393;cb=%5Btimestamp%5D");
-    }
-
-    @Test
-    public void urlEncode_withProperlyEncodedUrl_shouldReturnUrlWithSameEncoding() throws Exception {
-        assertThat(urlEncode("http://user:passwrd@host:80/doc%7Csearch?q=green%20robots#over%206%22"))
-                .isEqualTo("http://user:passwrd@host:80/doc%7Csearch?q=green%20robots#over%206%22");
-
-        assertThat(urlEncode("https://www.mywebsite.com%2Fd+ocs%2Fenglish%2Fsite%2Fmybook.do%3Fkey%3Dvalue%3B%23fragment"))
-                .isEqualTo("https://www.mywebsite.com%2Fd+ocs%2Fenglish%2Fsite%2Fmybook.do%3Fkey%3Dvalue%3B%23fragment");
-    }
-
-    @Test(expected = Exception.class)
-    public void urlEncode_withImproperlyEncodedUrl_shouldThowException() throws Exception {
-        urlEncode("http://user:passwrd@host:80/doc%7ZZZC");
-    }
-
-
-    @Test(expected = Exception.class)
-    public void urlEncode_withImproperlyEncodedUrlScheme_shouldThowException() throws Exception {
-        // From: http://developer.android.com/reference/java/net/URI.html
-        // A URI's host, port and scheme are not eligible for encoding and must not contain illegal characters.
-        urlEncode("https%3A%2F%2Fwww.mywebsite.com%2Fdocs%2Fenglish%2Fsite%2Fmybook.do%3Fkey%3Dvalue%3B%23fragment");
-    }
-
-    @Test(expected = Exception.class)
-    public void urlEncode_withMalformedUrl_shouldThrowException() throws Exception {
-        urlEncode("derp://www.mopub.com/");
-    }
-
-    @Test
-    public void getWebViewUserAgent_whenUserAgentNotSet_shouldReturnDefault() {
-        assertThat(getWebViewUserAgent("test")).isEqualTo("test");
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void initializeHttpGet_withNullUrl_shouldThrowNullPointerException() throws Exception {
-        initializeHttpGet(null, context);
-    }
-
-    @Test
-    public void initializeHttpGet_withNullContext_shouldNotPopulateUserAgentHeader() throws Exception {
-        HttpGet httpGet = initializeHttpGet(url, null);
-
-        assertThat(httpGet.getURI().toURL().toString()).isEqualTo(url);
-        assertThat(httpGet.getFirstHeader(ResponseHeader.USER_AGENT.getKey())).isNull();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/HttpResponsesTest.java b/mopub-sdk/src/test/java/com/mopub/common/HttpResponsesTest.java
deleted file mode 100644
index 814bcf55..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/HttpResponsesTest.java
+++ /dev/null
@@ -1,138 +0,0 @@
-package com.mopub.common;
-
-import android.graphics.Bitmap;
-
-import org.json.JSONArray;
-import org.json.JSONObject;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(RobolectricTestRunner.class)
-public class HttpResponsesTest {
-
-    private DownloadResponse downloadResponse1;
-
-    @Before
-    public void setUp() throws Exception {
-        downloadResponse1 = mock(DownloadResponse.class);
-    }
-
-    @Test
-    public void asBitmap_shouldReturnBitmap() throws Exception {
-        String imageData = "fake_bitmap_data";
-        when(downloadResponse1.getByteArray()).thenReturn(imageData.getBytes());
-
-        final Bitmap bitmap = HttpResponses.asBitmap(downloadResponse1);
-
-        assertThat(bitmap).isNotNull();
-        assertThat(bitmap).isInstanceOf(Bitmap.class);
-        assertThat(shadowOf(bitmap).getCreatedFromBytes()).isEqualTo(imageData.getBytes());
-    }
-
-    @Test
-    public void asJsonObject_withEmptyJsonString_shouldReturnEmptyJsonObjectAndCloseStream() throws Exception {
-        String jsonData = "{}";
-        when(downloadResponse1.getByteArray()).thenReturn(jsonData.getBytes());
-
-        final JSONObject expectedJsonObject = new JSONObject();
-
-        final JSONObject actualJsonObject = HttpResponses.asJsonObject(downloadResponse1);
-
-        assertThat(actualJsonObject).isEqualsToByComparingFields(expectedJsonObject);
-    }
-
-    @Test
-    public void asJsonObject_withShallowJsonString_shouldReturnPopulatedJsonObjectAndCloseStream() throws Exception {
-        String jsonData = "{\"key1\":\"value1\",\"key2\":\"2\",\"key3\":\"null\"}";
-        when(downloadResponse1.getByteArray()).thenReturn(jsonData.getBytes());
-
-        JSONObject expectedJsonObject = new JSONObject();
-        expectedJsonObject.put("key1", "value1");
-        expectedJsonObject.put("key2", 2);
-        expectedJsonObject.put("key3", JSONObject.NULL);
-
-        final JSONObject actualJsonObject = HttpResponses.asJsonObject(downloadResponse1);
-
-        assertThat(actualJsonObject).isEqualsToByComparingFields(expectedJsonObject);
-    }
-
-    @Test
-    public void asJsonObject_withDeepJsonString_shouldReturnPopulatedJsonObjectAndCloseStream() throws Exception {
-        String jsonData = "{\"key1\":\"value1\",\"key2\":[\"a\",\"b\"]}";
-        when(downloadResponse1.getByteArray()).thenReturn(jsonData.getBytes());
-
-        JSONObject expectedJsonObject = new JSONObject();
-        expectedJsonObject.put("key1", "value1");
-        final JSONArray jsonArray = new JSONArray();
-        jsonArray.put("a");
-        jsonArray.put("b");
-        expectedJsonObject.put("key2", jsonArray);
-
-        final JSONObject actualJsonObject = HttpResponses.asJsonObject(downloadResponse1);
-
-        assertThat(actualJsonObject).isEqualsToByComparingFields(expectedJsonObject);
-    }
-
-    @Test
-    public void asJsonObject_withMalformedJsonString_shouldReturnNullAndCloseStream() throws Exception {
-        String jsonData = "{whoops, forgot closing brace";
-        when(downloadResponse1.getByteArray()).thenReturn(jsonData.getBytes());
-
-        final JSONObject jsonObject = HttpResponses.asJsonObject(downloadResponse1);
-
-        assertThat(jsonObject).isNull();
-    }
-
-    @Test
-    public void asJsonObject_asResponseStringReturnsNull_shouldReturnNull() throws Exception {
-        when(downloadResponse1.getByteArray()).thenReturn(null);
-        assertThat(HttpResponses.asJsonObject(downloadResponse1)).isNull();
-    }
-
-    @Test
-    public void asJsonObject_withNullResponse_shouldReturnNull() throws Exception {
-        final JSONObject jsonObject = HttpResponses.asJsonObject(null);
-
-        assertThat(jsonObject).isNull();
-    }
-
-    @Test
-    public void asResponseString_withMultipleLines_shouldReturnResponseAndCloseStream() throws Exception {
-        String responseData = "1\n2\n3\n4";
-        when(downloadResponse1.getByteArray()).thenReturn(responseData.getBytes());
-
-        final String responseString = HttpResponses.asResponseString(downloadResponse1);
-
-        assertThat(responseString).isEqualTo(responseData);
-    }
-
-    @Test
-    public void asResponseString_shouldReturnResponseAndCloseStream() throws Exception {
-        String responseData = "response_string";
-        when(downloadResponse1.getByteArray()).thenReturn(responseData.getBytes());
-
-        final String responseString = HttpResponses.asResponseString(downloadResponse1);
-
-        assertThat(responseString).isEqualTo(responseData);
-    }
-
-    @Test
-    public void asResponseString_newStringThrowsException_shouldReturnNull() throws Exception {
-        when(downloadResponse1.getByteArray()).thenReturn(null);
-        assertThat(HttpResponses.asResponseString(downloadResponse1)).isNull();
-    }
-
-    @Test
-    public void asResponseString_withNullResponse_shouldReturnNull() throws Exception {
-        final String responseString = HttpResponses.asResponseString(null);
-
-        assertThat(responseString).isNull();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/MoPubBrowserTest.java b/mopub-sdk/src/test/java/com/mopub/common/MoPubBrowserTest.java
deleted file mode 100644
index b28038c6..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/MoPubBrowserTest.java
+++ /dev/null
@@ -1,71 +0,0 @@
-package com.mopub.common;
-
-import android.annotation.TargetApi;
-import android.os.Build;
-import android.webkit.CookieSyncManager;
-import android.webkit.WebView;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class MoPubBrowserTest {
-
-    private MoPubBrowser subject;
-    private WebView mockWebView;
-
-    @Before
-    public void setUp() {
-        subject = new MoPubBrowser();
-        CookieSyncManager.createInstance(subject);
-
-        mockWebView = mock(WebView.class);
-        subject.setWebView(mockWebView);
-    }
-
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1)
-    @Test
-    public void onPause_withIsFinishingTrue_shouldStopLoading_shouldLoadBlankUrl_shouldPauseWebView() throws Exception {
-        // We have to manually call #onPause here after #finish since the activity is not being managed by Android
-        // Even if the activity was being managed by Android we would likely have to call onPause since the test would
-        // complete before the UI thread had a chance to invoke the lifecycle events
-        subject.finish();
-        subject.onPause();
-
-        verify(mockWebView).stopLoading();
-        verify(mockWebView).loadUrl("");
-        verify(mockWebView).onPause();
-    }
-
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1)
-    @Test
-    public void onPause_withIsFinishingFalse_shouldPauseWebView() throws Exception {
-        subject.onPause();
-
-        verify(mockWebView, never()).stopLoading();
-        verify(mockWebView, never()).loadUrl("");
-        verify(mockWebView).onPause();
-    }
-
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1)
-    @Test
-    public void onResume_shouldResumeWebView() throws Exception {
-        subject.onResume();
-
-        verify(mockWebView).onResume();
-    }
-
-    @Test
-    public void onDestroy_shouldDestroyWebView() throws Exception {
-        subject.onDestroy();
-
-        verify(mockWebView).destroy();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/PreconditionsTest.java b/mopub-sdk/src/test/java/com/mopub/common/PreconditionsTest.java
deleted file mode 100644
index 2e021297..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/PreconditionsTest.java
+++ /dev/null
@@ -1,308 +0,0 @@
-package com.mopub.common;
-
-
-import com.mopub.common.Preconditions.NoThrow;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.fail;
-
-@RunWith(RobolectricTestRunner.class)
-public class PreconditionsTest {
-
-    @Before
-    public void setUp() {
-        NoThrow.setStrictMode(false);
-    }
-    
-    @Test
-    public void checkArgument_success_shouldNotThrow() {
-        Preconditions.checkArgument(true);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void checkArgument_failure_shouldThrowIllegalArgumentException() {
-        Preconditions.checkArgument(false);
-    }
-
-    @Test
-    public void checkArgument_failure_withMessage_shouldThrowIllegalArgumentException() {
-        try {
-            Preconditions.checkArgument(false, "message");
-            fail("no exception thrown");
-        } catch (IllegalArgumentException exception) {
-            assertThat(exception.getMessage()).isEqualTo("message");
-        }
-    }
-
-    @Test
-    public void checkArgument_failure_withNullMessage_shouldThrowIllegalArgumentException() {
-        try {
-            Preconditions.checkArgument(false, null);
-            fail("no exception thrown");
-        } catch (IllegalArgumentException exception) {
-            assertThat(exception.getMessage()).isEqualTo("null");
-        }
-    }
-
-    @Test
-    public void checkArgument_failure_withComplexMessage_shouldThrowIllegalArgumentException() {
-        try {
-            Preconditions.checkArgument(false, "I %s fail", "should");
-            fail("no exception thrown");
-        } catch (IllegalArgumentException exception) {
-            assertThat(exception.getMessage()).isEqualTo("I should fail");
-        }
-    }
-
-    @Test
-    public void checkState_success_shouldNotThrow() {
-        Preconditions.checkArgument(true);
-    }
-
-    @Test(expected = IllegalStateException.class)
-    public void checkState_failure_shouldThrowIllegalStateException() {
-        Preconditions.checkState(false);
-    }
-
-    @Test
-    public void checkState_failure_withMessage_shouldThrowIllegalStateException() {
-        try {
-            Preconditions.checkState(false, "message");
-            fail("no exception thrown");
-        } catch (IllegalStateException exception) {
-            assertThat(exception.getMessage()).isEqualTo("message");
-        }
-    }
-
-    @Test
-    public void checkState_failure_withNullMessage_shouldThrowIllegalStateException() {
-        try {
-            Preconditions.checkState(false, null);
-            fail("no exception thrown");
-        } catch (IllegalStateException exception) {
-            assertThat(exception.getMessage()).isEqualTo("null");
-        }
-    }
-
-    @Test
-    public void checkState_failure_withComplexMessage_shouldThrowIllegalStateException() {
-        try {
-            Preconditions.checkState(false, "I %s fail", "should");
-            fail("no exception thrown");
-        } catch (IllegalStateException exception) {
-            assertThat(exception.getMessage()).isEqualTo("I should fail");
-        }
-    }
-
-    @Test
-    public void checkNotNull_success_shouldNotThrow() {
-        Preconditions.checkNotNull(new Object());
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void checkNotNull_failure_shouldThrowNullPointerException() {
-        Preconditions.checkNotNull(null);
-    }
-
-    @Test
-    public void checkNotNull_failure_withMessage_shouldThrowNullPointerException() {
-        try {
-            Preconditions.checkNotNull(null, "message");
-            fail("no exception thrown");
-        } catch (NullPointerException exception) {
-            assertThat(exception.getMessage()).isEqualTo("message");
-        }
-    }
-
-    @Test
-    public void checkNotNull_failure_withNullMessage_shouldThrowNullPointerException() {
-        try {
-            Preconditions.checkNotNull(null, null);
-            fail("no exception thrown");
-        } catch (NullPointerException exception) {
-            assertThat(exception.getMessage()).isEqualTo("null");
-        }
-    }
-
-    @Test
-    public void checkNotNull_failure_withComplexMessage_shouldThrowNullPointerException() {
-        try {
-            Preconditions.checkNotNull(null, "I %s fail", "should");
-            fail("no exception thrown");
-        } catch (NullPointerException exception) {
-            assertThat(exception.getMessage()).isEqualTo("I should fail");
-        }
-    }
-
-    @Test
-    public void checkUiThread_success_shouldNotThrow() {
-        Preconditions.checkUiThread();
-    }
-
-    @Test
-    public void noThrow_checkArgument_success_shouldReturnTrue() {
-        assertThat(NoThrow.checkArgument(true)).isTrue();
-    }
-
-    @Test
-    public void noThrow_checkArgument_failure_shouldReturnFalse() {
-        assertThat(NoThrow.checkArgument(false)).isFalse();
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void noThrow_strictMode_checkArgument_failure_shouldThrowIllegalArgumentException() {
-        NoThrow.setStrictMode(true);
-        NoThrow.checkArgument(false);
-    }
-
-    @Test
-    public void noThrow_strictMode_checkArgument_failure_withMessage_shouldThrowIllegalArgumentException() {
-        NoThrow.setStrictMode(true);
-        try {
-            NoThrow.checkArgument(false, "message");
-            fail("no exception thrown");
-        } catch (IllegalArgumentException exception) {
-            assertThat(exception.getMessage()).isEqualTo("message");
-        }
-    }
-
-    @Test
-    public void noThrow_strictMode_checkArgument_failure_withNullMessage_shouldThrowIllegalArgumentException() {
-        NoThrow.setStrictMode(true);
-        try {
-            NoThrow.checkArgument(false, null);
-            fail("no exception thrown");
-        } catch (IllegalArgumentException exception) {
-            assertThat(exception.getMessage()).isEqualTo("null");
-        }
-    }
-
-    @Test
-    public void noThrow_strictMode_checkArgument_failure_withComplexMessage_shouldThrowIllegalArgumentException() {
-        NoThrow.setStrictMode(true);
-        try {
-            NoThrow.checkArgument(false, "I %s fail", "should");
-            fail("no exception thrown");
-        } catch (IllegalArgumentException exception) {
-            assertThat(exception.getMessage()).isEqualTo("I should fail");
-        }
-    }
-
-    @Test
-    public void noThrow_checkState_success_shouldReturnTrue() {
-        assertThat(NoThrow.checkArgument(true)).isTrue();
-    }
-
-    @Test
-    public void noThrow_checkState_failure_shouldReturnFalse() {
-        assertThat(NoThrow.checkState(false)).isFalse();
-    }
-
-    @Test(expected = IllegalStateException.class)
-    public void noThrow_strictMode_checkState_failure_shouldThrowIllegalStateException() {
-        NoThrow.setStrictMode(true);
-        NoThrow.checkState(false);
-    }
-
-    @Test
-    public void noThrow_strictMode_checkState_failure_withMessage_shouldThrowIllegalStateException() {
-        NoThrow.setStrictMode(true);
-        try {
-            NoThrow.checkState(false, "message");
-            fail("no exception thrown");
-        } catch (IllegalStateException exception) {
-            assertThat(exception.getMessage()).isEqualTo("message");
-        }
-    }
-
-    @Test
-    public void noThrow_strictMode_checkState_failure_withNullMessage_shouldThrowIllegalStateException() {
-        NoThrow.setStrictMode(true);
-        try {
-            NoThrow.checkState(false, null);
-            fail("no exception thrown");
-        } catch (IllegalStateException exception) {
-            assertThat(exception.getMessage()).isEqualTo("null");
-        }
-    }
-
-    @Test
-    public void noThrow_strictMode_checkState_failure_withComplexMessage_shouldThrowIllegalStateException() {
-        NoThrow.setStrictMode(true);
-        try {
-            NoThrow.checkState(false, "I %s fail", "should");
-            fail("no exception thrown");
-        } catch (IllegalStateException exception) {
-            assertThat(exception.getMessage()).isEqualTo("I should fail");
-        }
-    }
-
-    @Test
-    public void noThrow_checkNotNull_success_shouldReturnTrue() {
-        assertThat(NoThrow.checkNotNull(new Object())).isTrue();
-    }
-
-    @Test
-    public void noThrow_checkNotNull_failure_shouldReturnFalse() {
-        assertThat(NoThrow.checkNotNull(null)).isFalse();
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void noThrow_strictMode_checkNotNull_failure_shouldThrowNullPointerException() {
-        NoThrow.setStrictMode(true);
-        NoThrow.checkNotNull(null);
-    }
-
-    @Test
-    public void noThrow_strictMode_checkNotNull_failure_withMessage_shouldThrowNullPointerException() {
-        NoThrow.setStrictMode(true);
-        try {
-            NoThrow.checkNotNull(null, "message");
-            fail("no exception thrown");
-        } catch (NullPointerException exception) {
-            assertThat(exception.getMessage()).isEqualTo("message");
-        }
-    }
-
-    @Test
-    public void noThrow_strictMode_checkNotNull_failure_withNullMessage_shouldThrowNullPointerException() {
-        NoThrow.setStrictMode(true);
-        try {
-            NoThrow.checkNotNull(null, null);
-            fail("no exception thrown");
-        } catch (NullPointerException exception) {
-            assertThat(exception.getMessage()).isEqualTo("null");
-        }
-    }
-
-    @Test
-    public void noThrow_strictMode_checkNotNull_failure_withComplexMessage_shouldThrowNullPointerException() {
-        NoThrow.setStrictMode(true);
-        try {
-            NoThrow.checkNotNull(null, "I %s fail", "should");
-            fail("no exception thrown");
-        } catch (NullPointerException exception) {
-            assertThat(exception.getMessage()).isEqualTo("I should fail");
-        }
-    }
-
-    @Test
-    public void noThrow_checkUiThread_success_shouldReturnTrue() {
-        assertThat(NoThrow.checkUiThread()).isTrue();
-    }
-
-    @Test
-    public void checkArgument_failure_withInvalidMessage_shouldThrowIllegalArgumentException() {
-        try {
-            Preconditions.checkArgument(false, "messages: ", "message1", "message2");
-            fail("no exception thrown");
-        } catch (IllegalArgumentException exception) {
-            assertThat(exception.getMessage()).isEqualTo("messages: ");
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/VolleyRequestMatcher.java b/mopub-sdk/src/test/java/com/mopub/common/VolleyRequestMatcher.java
deleted file mode 100644
index 8afeb57d..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/VolleyRequestMatcher.java
+++ /dev/null
@@ -1,33 +0,0 @@
-package com.mopub.common;
-
-import android.support.annotation.Nullable;
-
-import com.mopub.volley.Request;
-
-import org.mockito.ArgumentMatcher;
-
-/**
- * A Mockito Request Matcher, used in tests to allow verifying that Volley Requests match a given
- * url.
- *
- * "verify(mock).add(argThat(VolleyRequestMatcher.isUrl("testUrl")));"
- */
-public class VolleyRequestMatcher extends ArgumentMatcher<Request> {
-
-     @Nullable private final String mUrl;
-
-     private VolleyRequestMatcher(@Nullable final String url) {
-         mUrl = url;
-     }
-
-     public static VolleyRequestMatcher isUrl(@Nullable String url) {
-         return new VolleyRequestMatcher(url);
-     }
-
-     @Override
-     public boolean matches(final Object that) {
-         return that instanceof Request
-                 && ((this.mUrl == null && ((Request) that).getUrl() == null)
-                    || ((Request) that).getUrl().equals(mUrl));
-     }
- }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/BaseEventTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/BaseEventTest.java
deleted file mode 100644
index 55a087f4..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/event/BaseEventTest.java
+++ /dev/null
@@ -1,244 +0,0 @@
-package com.mopub.common.event;
-
-import com.mopub.common.ClientMetadata;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-public class BaseEventTest {
-
-    private BaseEvent subject;
-    @Mock private ClientMetadata mockClientMetaData;
-
-    @Before
-    public void setUp() {
-        when(mockClientMetaData.getSdkVersion()).thenReturn("sdk_version");
-        when(mockClientMetaData.getAppName()).thenReturn("app_name");
-        when(mockClientMetaData.getAppPackageName()).thenReturn("app_package_name");
-        when(mockClientMetaData.getAppVersion()).thenReturn("app_version");
-        when(mockClientMetaData.getDeviceId()).thenReturn("client_device_id");
-        when(mockClientMetaData.isDoNotTrackSet()).thenReturn(true);
-        when(mockClientMetaData.getDeviceManufacturer()).thenReturn("device_manufacturer");
-        when(mockClientMetaData.getDeviceModel()).thenReturn("device_model");
-        when(mockClientMetaData.getDeviceProduct()).thenReturn("device_product");
-        when(mockClientMetaData.getDeviceOsVersion()).thenReturn("device_os_version");
-        when(mockClientMetaData.getDeviceScreenWidthDip()).thenReturn(1337);
-        when(mockClientMetaData.getDeviceScreenHeightDip()).thenReturn(70707);
-        when(mockClientMetaData.getActiveNetworkType()).thenReturn(ClientMetadata.MoPubNetworkType.WIFI);
-        when(mockClientMetaData.getNetworkOperator()).thenReturn("network_operator");
-        when(mockClientMetaData.getNetworkOperatorName()).thenReturn("network_operator_name");
-        when(mockClientMetaData.getIsoCountryCode()).thenReturn("network_iso_country_code");
-        when(mockClientMetaData.getSimOperator()).thenReturn("network_sim_operator");
-        when(mockClientMetaData.getSimOperatorName()).thenReturn("network_sim_operator_name");
-        when(mockClientMetaData.getSimIsoCountryCode()).thenReturn("network_sim_iso_country_code");
-        ClientMetadata.setInstance(mockClientMetaData);
-
-        subject = new Event.Builder(BaseEvent.Name.AD_REQUEST, BaseEvent.Category.REQUESTS, 0.10000123)
-                .withSdkProduct(BaseEvent.SdkProduct.NATIVE)
-                .withAdUnitId("8cf00598d3664adaaeccd800e46afaca")
-                .withAdCreativeId("3c2b887e2c2a4cd0ae6a925440a62f0d")
-                .withAdType("html")
-                .withAdNetworkType("admob")
-                .withAdWidthPx(320.0)
-                .withAdHeightPx(50.0)
-                .withGeoLat(37.7833)
-                .withGeoLon(-122.4183333)
-                .withGeoAccuracy(10.0)
-                .withPerformanceDurationMs(100.0)
-                .withRequestId("b550796074da4559a27c5072dcba2b27")
-                .withRequestStatusCode(200)
-                .withRequestUri("http://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca")
-                .withRequestRetries(0)
-                .build();
-    }
-
-    @After
-    public void tearDown() {
-        ClientMetadata.setInstance(null);
-    }
-
-    @Test
-    public void ScribeCategory_shouldHaveExpectedValues() throws Exception {
-        // We're testing this since our backend data definitions depend on these values matching
-        assertThat(BaseEvent.ScribeCategory.EXCHANGE_CLIENT_EVENT.getCategory())
-                .isEqualTo("exchange_client_event");
-        assertThat(BaseEvent.ScribeCategory.EXCHANGE_CLIENT_ERROR.getCategory())
-                .isEqualTo("exchange_client_error");
-    }
-
-    @Test
-    public void SdkProduct_shouldHaveExpectedValues() throws Exception {
-        // We're testing this since our backend data definitions depend on these values matching
-        assertThat(BaseEvent.SdkProduct.NONE.getType())
-                .isEqualTo(0);
-        assertThat(BaseEvent.SdkProduct.WEB_VIEW.getType())
-                .isEqualTo(1);
-        assertThat(BaseEvent.SdkProduct.NATIVE.getType())
-                .isEqualTo(2);
-    }
-
-    @Test
-    public void AppPlatform_shouldHaveExpectedValues() throws Exception {
-        // We're testing this since our backend data definitions depend on these values matching
-        assertThat(BaseEvent.AppPlatform.NONE.getType())
-                .isEqualTo(0);
-        assertThat(BaseEvent.AppPlatform.IOS.getType())
-                .isEqualTo(1);
-        assertThat(BaseEvent.AppPlatform.ANDROID.getType())
-                .isEqualTo(2);
-        assertThat(BaseEvent.AppPlatform.MOBILE_WEB.getType())
-                .isEqualTo(3);
-    }
-
-    @Test
-    public void Name_shouldHaveExpectedValues() throws Exception {
-        // We're testing this since our backend data definitions depend on these values matching
-        assertThat(BaseEvent.Name.AD_REQUEST.getName())
-                .isEqualTo("ad_request");
-        assertThat(BaseEvent.Name.IMPRESSION_REQUEST.getName())
-                .isEqualTo("impression_request");
-        assertThat(BaseEvent.Name.CLICK_REQUEST.getName())
-                .isEqualTo("click_request");
-    }
-
-    @Test
-    public void Category_shouldHaveExpectedValues() throws Exception {
-        // We're testing this since our backend data definitions depend on these values matching
-        assertThat(BaseEvent.Category.REQUESTS.getCategory())
-                .isEqualTo("requests");
-    }
-
-    @Test
-    public void SamplingRate_shouldHaveExpectedValues() throws Exception {
-        // We're testing this since our backend data definitions depend on these values matching
-        assertThat(BaseEvent.SamplingRate.AD_REQUEST.getSamplingRate()).isEqualTo(0.1);
-    }
-
-    @Test
-    public void constructor_shouldCorrectlyAssignFieldsFromBuilder() throws Exception {
-        assertThat(subject.getSdkProduct()).isEqualTo(BaseEvent.SdkProduct.NATIVE);
-        assertThat(subject.getAdUnitId()).isEqualTo("8cf00598d3664adaaeccd800e46afaca");
-        assertThat(subject.getAdCreativeId()).isEqualTo("3c2b887e2c2a4cd0ae6a925440a62f0d");
-        assertThat(subject.getAdType()).isEqualTo("html");
-        assertThat(subject.getAdNetworkType()).isEqualTo("admob");
-        assertThat(subject.getAdWidthPx()).isEqualTo(320.0);
-        assertThat(subject.getAdHeightPx()).isEqualTo(50.0);
-        assertThat(subject.getGeoLat()).isEqualTo(37.7833);
-        assertThat(subject.getGeoLon()).isEqualTo(-122.4183333);
-        assertThat(subject.getGeoAccuracy()).isEqualTo(10.0);
-        assertThat(subject.getPerformanceDurationMs()).isEqualTo(100.0);
-        assertThat(subject.getRequestId()).isEqualTo("b550796074da4559a27c5072dcba2b27");
-        assertThat(subject.getRequestStatusCode()).isEqualTo(200);
-        assertThat(subject.getRequestUri()).isEqualTo("http://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca");
-        assertThat(subject.getRequestRetries()).isEqualTo(0);
-        assertThat(subject.getSamplingRate()).isEqualTo(0.10000123);
-    }
-
-    @Test
-    public void getSdkVersion_shouldReturnClientMetaDataSdkVersion() throws Exception {
-        assertThat(subject.getSdkVersion()).isEqualTo("sdk_version");
-    }
-
-    @Test
-    public void getAppName_shouldReturnClientMetaDataAppName() throws Exception {
-        assertThat(subject.getAppName()).isEqualTo("app_name");
-    }
-
-    @Test
-    public void getAppPackageName_shouldReturnClientMetaDataAppPackageName() throws Exception {
-        assertThat(subject.getAppPackageName()).isEqualTo("app_package_name");
-    }
-
-    @Test
-    public void getAppVersion_shouldReturnClientMetaDataAppVersion() throws Exception {
-        assertThat(subject.getAppVersion()).isEqualTo("app_version");
-    }
-
-    @Test
-    public void getClientAdvertisingId_shouldReturnClientMetaDataDeviceId() throws Exception {
-        assertThat(subject.getClientAdvertisingId()).isEqualTo("client_device_id");
-    }
-
-    @Test
-    public void getObfuscatedClientAdvertisingId_shouldReturnObfuscatedDeviceId() throws Exception {
-        assertThat(subject.getObfuscatedClientAdvertisingId()).isEqualTo("ifa:XXXX");
-    }
-
-    @Test
-    public void getClientDoNotTrack_shouldReturnClientMetaDataDoNotTrack() throws Exception {
-        assertThat(subject.getClientDoNotTrack()).isEqualTo(true);
-    }
-
-    @Test
-    public void getDeviceManufacturer_shouldReturnClientMetaDataDeviceManufacturer() throws Exception {
-        assertThat(subject.getDeviceManufacturer()).isEqualTo("device_manufacturer");
-    }
-
-    @Test
-    public void getDeviceModel_shouldReturnClientMetaDataDeviceModel() throws Exception {
-        assertThat(subject.getDeviceModel()).isEqualTo("device_model");
-    }
-
-    @Test
-    public void getDeviceProduct_shouldReturnClientMetaDataDeviceProduct() throws Exception {
-        assertThat(subject.getDeviceProduct()).isEqualTo("device_product");
-    }
-
-    @Test
-    public void getDeviceOsVersion_shouldReturnClientMetaDataDeviceOsVersion() throws Exception {
-        assertThat(subject.getDeviceOsVersion()).isEqualTo("device_os_version");
-    }
-
-    @Test
-    public void getDeviceScreenWidthDip_shouldReturnClientMetaDataDeviceScreenWidthDip() throws Exception {
-        assertThat(subject.getDeviceScreenWidthDip()).isEqualTo(1337);
-    }
-
-    @Test
-    public void getDeviceScreenHeightDip_shouldReturnClientMetaDataDeviceScreenHeightDip() throws Exception {
-        assertThat(subject.getDeviceScreenHeightDip()).isEqualTo(70707);
-    }
-
-    @Test
-    public void getNetworkType_shouldReturnClientMetaDataActiveNetworkType() throws Exception {
-        assertThat(subject.getNetworkType()).isEqualTo(ClientMetadata.MoPubNetworkType.WIFI);
-    }
-
-    @Test
-    public void getNetworkOperatorCode_shouldReturnClientMetaDataNetworkOperator() throws Exception {
-        assertThat(subject.getNetworkOperatorCode()).isEqualTo("network_operator");
-    }
-
-    @Test
-    public void getNetworkOperatorName_shouldReturnClientMetaDataNetworkOperatorName() throws Exception {
-        assertThat(subject.getNetworkOperatorName()).isEqualTo("network_operator_name");
-    }
-
-    @Test
-    public void getNetworkIsoCountryCode_shouldReturnClientMetaDataNetworkIsoCountryCode() throws Exception {
-        assertThat(subject.getNetworkIsoCountryCode()).isEqualTo("network_iso_country_code");
-    }
-
-    @Test
-    public void getNetworkSimCode_shouldReturnClientMetaDataNetworkSimOperator() throws Exception {
-        assertThat(subject.getNetworkSimCode()).isEqualTo("network_sim_operator");
-    }
-
-    @Test
-    public void getNetworkSimOperatorName_shouldReturnClientMetaDataNetworkSimOperatorName() throws Exception {
-        assertThat(subject.getNetworkSimOperatorName()).isEqualTo("network_sim_operator_name");
-    }
-
-    @Test
-    public void getNetworkSimIsoCountryCode_shouldReturnClientMetaDataNetworkSimIsoCountryCode() throws Exception {
-        assertThat(subject.getNetworkSimIsoCountryCode()).isEqualTo("network_sim_iso_country_code");
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/ErrorEventTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/ErrorEventTest.java
deleted file mode 100644
index 05cd07f6..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/event/ErrorEventTest.java
+++ /dev/null
@@ -1,74 +0,0 @@
-package com.mopub.common.event;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-public class ErrorEventTest {
-
-    private ErrorEvent subject;
-
-    @Before
-    public void setUp() {
-        subject = new ErrorEvent.Builder(BaseEvent.Name.AD_REQUEST, BaseEvent.Category.REQUESTS, 0.10000123)
-                .withErrorExceptionClassName("error_exception_class_name")
-                .withErrorMessage("error_message")
-                .withErrorStackTrace("error_stack_trace")
-                .withErrorFileName("error_file_name")
-                .withErrorClassName("error_class_name")
-                .withErrorMethodName("error_method_name")
-                .withErrorLineNumber(123)
-                .build();
-    }
-
-    @Test
-    public void constructor_shouldCorrectlyAssignFieldsFromBuilder() throws Exception {
-        assertThat(subject.getName()).isEqualTo(BaseEvent.Name.AD_REQUEST);
-        assertThat(subject.getCategory()).isEqualTo(BaseEvent.Category.REQUESTS);
-        assertThat(subject.getSamplingRate()).isEqualTo(0.10000123);
-        assertThat(subject.getScribeCategory()).isEqualTo(BaseEvent.ScribeCategory.EXCHANGE_CLIENT_ERROR);
-        assertThat(subject.getErrorExceptionClassName()).isEqualTo("error_exception_class_name");
-        assertThat(subject.getErrorMessage()).isEqualTo("error_message");
-        assertThat(subject.getErrorStackTrace()).isEqualTo("error_stack_trace");
-        assertThat(subject.getErrorFileName()).isEqualTo("error_file_name");
-        assertThat(subject.getErrorClassName()).isEqualTo("error_class_name");
-        assertThat(subject.getErrorMethodName()).isEqualTo("error_method_name");
-        assertThat(subject.getErrorLineNumber()).isEqualTo(123);
-    }
-
-    @Test
-    public void builder_withException_shouldCorrectlyPopulateErrorFields() throws Exception {
-        Exception exception;
-        try {
-            throw new ClassCastException("bad cast");
-        } catch (Exception e)  {
-            exception = e;
-        }
-
-        subject = new ErrorEvent.Builder(BaseEvent.Name.AD_REQUEST, BaseEvent.Category.REQUESTS, 0.10000123)
-                .withException(exception)
-                .build();
-
-        assertThat(subject.getName()).isEqualTo(BaseEvent.Name.AD_REQUEST);
-        assertThat(subject.getCategory()).isEqualTo(BaseEvent.Category.REQUESTS);
-        assertThat(subject.getScribeCategory()).isEqualTo(BaseEvent.ScribeCategory.EXCHANGE_CLIENT_ERROR);
-        assertThat(subject.getErrorExceptionClassName()).isEqualTo("java.lang.ClassCastException");
-        assertThat(subject.getErrorMessage()).isEqualTo("bad cast");
-
-        // We can't reliably check the stack trace since it changes from one run to another
-//        assertThat(subject.getErrorStackTrace()).isEqualTo();
-
-        assertThat(subject.getErrorFileName()).isEqualTo("ErrorEventTest.java");
-        assertThat(subject.getErrorClassName()).isEqualTo("com.mopub.common.event.ErrorEventTest");
-        assertThat(subject.getErrorMethodName()).isEqualTo("builder_withException_shouldCorrectlyPopulateErrorFields");
-
-        // Ideally we check the actual line number here, but since this file is continuously
-        // changing, it makes the test brittle to do so
-        assertThat(subject.getErrorLineNumber()).isNotNull();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/EventDispatcherTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/EventDispatcherTest.java
deleted file mode 100644
index 1c32fd16..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/event/EventDispatcherTest.java
+++ /dev/null
@@ -1,64 +0,0 @@
-package com.mopub.common.event;
-
-import android.app.Activity;
-import android.os.HandlerThread;
-import android.os.Looper;
-import android.os.Message;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-
-
-@RunWith(SdkTestRunner.class)
-public class EventDispatcherTest {
-
-    private EventDispatcher subject;
-    private List<EventRecorder> recorders;
-    @Mock private EventRecorder mockEventRecorder1;
-    @Mock private EventRecorder mockEventRecorder2;
-    @Mock private HandlerThread mockHandlerThread;
-
-    @Before
-    public void setUp() {
-        recorders = new ArrayList<EventRecorder>();
-        recorders.add(mockEventRecorder1);
-        recorders.add(mockEventRecorder2);
-    }
-
-    @Test
-    public void handler_handleMessage_shouldCallRecordOnAllRecorders() throws Exception {
-        Message message = new Message();
-        message.obj = mock(Event.class);
-
-        subject = new EventDispatcher(recorders, Looper.getMainLooper());
-        subject.getHandlerCallback().handleMessage(message);
-
-        verify(mockEventRecorder1).record(eq((Event) message.obj));
-        verify(mockEventRecorder2).record(eq((Event) message.obj));
-    }
-
-    @Test
-    public void handler_handleMessage_withNonBaseEventTypeMessageShouldNotRecordOnAnyRecorders() throws Exception {
-        Message message = new Message();
-        message.obj = mock(Activity.class);
-
-        subject = new EventDispatcher(recorders, Looper.getMainLooper());
-        subject.getHandlerCallback().handleMessage(message);
-
-        verify(mockEventRecorder1, never()).record(any(BaseEvent.class));
-        verify(mockEventRecorder2, never()).record(any(BaseEvent.class));
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/EventSamplerTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/EventSamplerTest.java
deleted file mode 100644
index d6494a11..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/event/EventSamplerTest.java
+++ /dev/null
@@ -1,45 +0,0 @@
-package com.mopub.common.event;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-
-import java.util.Random;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-public class EventSamplerTest {
-
-    private EventSampler subject;
-    @Mock Random mockRandom;
-    @Mock BaseEvent mockBaseEvent;
-
-    @Before
-    public void setUp() {
-        subject = new EventSampler(mockRandom);
-        when(mockBaseEvent.getSamplingRate()).thenReturn(0.10);
-    }
-
-    @Test
-    public void sample_withRandomNumberLessThan10Percent_shouldReturnTrue() throws Exception {
-        when(mockRandom.nextDouble()).thenReturn(0.09);
-
-        boolean result = subject.sample(mockBaseEvent);
-
-        assertThat(result).isTrue();
-    }
-
-    @Test
-    public void sample_withRandomNumberGreaterOrEqualTo10Percent_shouldReturnFalse() throws Exception {
-        when(mockRandom.nextDouble()).thenReturn(0.10);
-
-        boolean result = subject.sample(mockBaseEvent);
-
-        assertThat(result).isFalse();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/EventSerializerTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/EventSerializerTest.java
deleted file mode 100644
index 22a6bebc..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/event/EventSerializerTest.java
+++ /dev/null
@@ -1,211 +0,0 @@
-package com.mopub.common.event;
-
-import android.app.Activity;
-
-import com.mopub.common.ClientMetadata;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.json.JSONArray;
-import org.json.JSONObject;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-
-import java.util.ArrayList;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-public class EventSerializerTest {
-
-    private EventSerializer subject;
-    private Activity context;
-
-    @Mock private Event mockEvent;
-    @Mock private ErrorEvent mockErrorEvent;
-
-    @Before
-    public void setUp() {
-        subject = new EventSerializer();
-
-        // initialize client meta data with context
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        ClientMetadata.getInstance(context);
-
-        populateBaseEventFields(mockEvent);
-        populateBaseEventFields(mockErrorEvent);
-
-        when(mockErrorEvent.getErrorExceptionClassName()).thenReturn("error_exception_class_name");
-        when(mockErrorEvent.getErrorMessage()).thenReturn("error_message");
-        when(mockErrorEvent.getErrorStackTrace()).thenReturn("error_stack_trace");
-        when(mockErrorEvent.getErrorFileName()).thenReturn("error_file_name");
-        when(mockErrorEvent.getErrorClassName()).thenReturn("error_class_name");
-        when(mockErrorEvent.getErrorMethodName()).thenReturn("error_method_name");
-        when(mockErrorEvent.getErrorLineNumber()).thenReturn(123);
-    }
-
-    @Test
-    public void serializeAsJson_withAllEventFieldsPopulated_shouldCorrectJsonRepresentation() throws Exception {
-        ArrayList<BaseEvent> events = new ArrayList<BaseEvent>();
-        events.add(mockEvent);
-        JSONArray jsonArray = subject.serializeAsJson(events);
-        assertThat(jsonArray.length()).isEqualTo(1);
-
-        JSONObject jsonObject = jsonArray.getJSONObject(0);
-        validateBaseEventFields(jsonObject);
-    }
-
-    @Test
-    public void serializeAsJson_withAllErrorEventFieldsPopulated_shouldCorrectJsonRepresentation() throws Exception {
-        ArrayList<BaseEvent> events = new ArrayList<BaseEvent>();
-        events.add(mockErrorEvent);
-        JSONArray jsonArray = subject.serializeAsJson(events);
-        assertThat(jsonArray.length()).isEqualTo(1);
-
-        JSONObject jsonObject = jsonArray.getJSONObject(0);
-        validateBaseEventFields(jsonObject);
-
-        assertThat(jsonObject.getString("error_exception_class_name")).isEqualTo("error_exception_class_name");
-        assertThat(jsonObject.getString("error_message")).isEqualTo("error_message");
-        assertThat(jsonObject.getString("error_stack_trace")).isEqualTo("error_stack_trace");
-        assertThat(jsonObject.getString("error_file_name")).isEqualTo("error_file_name");
-        assertThat(jsonObject.getString("error_class_name")).isEqualTo("error_class_name");
-        assertThat(jsonObject.getString("error_method_name")).isEqualTo("error_method_name");
-        assertThat(jsonObject.getInt("error_line_number")).isEqualTo(123);
-    }
-
-    @Test
-    public void serializeAsJson_shouldReturnJsonArrayOfEvents() throws Exception {
-        when(mockEvent.getName()).thenReturn(BaseEvent.Name.AD_REQUEST);
-        when(mockEvent.getCategory()).thenReturn(BaseEvent.Category.REQUESTS);
-        when(mockErrorEvent.getName()).thenReturn(BaseEvent.Name.IMPRESSION_REQUEST);
-        when(mockErrorEvent.getCategory()).thenReturn(BaseEvent.Category.REQUESTS);
-
-        ArrayList<BaseEvent> events = new ArrayList<BaseEvent>();
-        events.add(mockEvent);
-        events.add(mockErrorEvent);
-
-        JSONArray jsonArray = subject.serializeAsJson(events);
-        assertThat(jsonArray.length()).isEqualTo(2);
-
-        JSONObject jsonObject1 = jsonArray.getJSONObject(0);
-        assertThat(jsonObject1.getString("name")).isEqualTo(BaseEvent.Name.AD_REQUEST.getName());
-        assertThat(jsonObject1.getString("name_category")).isEqualTo("requests");
-
-        JSONObject jsonObject2 = jsonArray.getJSONObject(1);
-        assertThat(jsonObject2.getString("name")).isEqualTo("impression_request");
-        assertThat(jsonObject2.getString("name_category")).isEqualTo("requests");
-    }
-
-    private void populateBaseEventFields(BaseEvent mockBaseEvent) {
-        when(mockBaseEvent.getScribeCategory()).thenReturn(BaseEvent.ScribeCategory.EXCHANGE_CLIENT_EVENT);
-        when(mockBaseEvent.getName()).thenReturn(BaseEvent.Name.AD_REQUEST);
-        when(mockBaseEvent.getCategory()).thenReturn(BaseEvent.Category.REQUESTS);
-        when(mockBaseEvent.getSdkProduct()).thenReturn(BaseEvent.SdkProduct.NATIVE);
-        when(mockBaseEvent.getSdkVersion()).thenReturn("3.5.0");
-        when(mockBaseEvent.getAdUnitId()).thenReturn("8cf00598d3664adaaeccd800e46afaca");
-        when(mockBaseEvent.getAdCreativeId()).thenReturn("3c2b887e2c2a4cd0ae6a925440a62f0d");
-        when(mockBaseEvent.getAdType()).thenReturn("html");
-        when(mockBaseEvent.getAdNetworkType()).thenReturn("admob");
-        when(mockBaseEvent.getAdWidthPx()).thenReturn(320.0);
-        when(mockBaseEvent.getAdHeightPx()).thenReturn(50.0);
-        when(mockBaseEvent.getAppPlatform()).thenReturn(BaseEvent.AppPlatform.ANDROID);
-        when(mockBaseEvent.getAppName()).thenReturn("MoPub Sample App");
-        when(mockBaseEvent.getAppPackageName()).thenReturn("com.mopub.simpleadsdemo");
-        when(mockBaseEvent.getAppVersion()).thenReturn("1.0");
-        when(mockBaseEvent.getObfuscatedClientAdvertisingId()).thenCallRealMethod();
-        when(mockBaseEvent.getClientAdvertisingId()).thenReturn("38400000-8cf0-11bd-b23e-10b96e40000d");
-        when(mockBaseEvent.getClientDoNotTrack()).thenReturn(false);
-        when(mockBaseEvent.getDeviceManufacturer()).thenReturn("LGE");
-        when(mockBaseEvent.getDeviceModel()).thenReturn("Nexus 5");
-        when(mockBaseEvent.getDeviceProduct()).thenReturn("hammerhead");
-        when(mockBaseEvent.getDeviceOsVersion()).thenReturn("5.0");
-        when(mockBaseEvent.getDeviceScreenWidthDip()).thenReturn(1080);
-        when(mockBaseEvent.getDeviceScreenHeightDip()).thenReturn(1920);
-        when(mockBaseEvent.getGeoLat()).thenReturn(37.7833);
-        when(mockBaseEvent.getGeoLon()).thenReturn(-122.4183333);
-        when(mockBaseEvent.getGeoAccuracy()).thenReturn(10.0);
-        when(mockBaseEvent.getPerformanceDurationMs()).thenReturn(100.0);
-        when(mockBaseEvent.getNetworkType()).thenReturn(ClientMetadata.MoPubNetworkType.WIFI);
-        when(mockBaseEvent.getNetworkOperatorCode()).thenReturn("310410");
-        when(mockBaseEvent.getNetworkOperatorName()).thenReturn("AT&T");
-        when(mockBaseEvent.getNetworkIsoCountryCode()).thenReturn("US");
-        when(mockBaseEvent.getNetworkSimCode()).thenReturn("network_sim_code");
-        when(mockBaseEvent.getNetworkSimOperatorName()).thenReturn("network_operator_name");
-        when(mockBaseEvent.getNetworkSimIsoCountryCode()).thenReturn("US");
-        when(mockBaseEvent.getRequestId()).thenReturn("b550796074da4559a27c5072dcba2b27");
-        when(mockBaseEvent.getRequestStatusCode()).thenReturn(200);
-        when(mockBaseEvent.getRequestUri()).thenReturn("http://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca");
-        when(mockBaseEvent.getRequestRetries()).thenReturn(0);
-        when(mockBaseEvent.getTimestampUtcMs()).thenReturn(1416447053472L);
-    }
-
-    private void validateBaseEventFields(JSONObject jsonObject) throws Exception {
-        assertThat(jsonObject.getString("_category_")).isEqualTo("exchange_client_event");
-        assertThat(jsonObject.getLong("ts")).isEqualTo(1416447053472L);
-
-        // Name Details
-        assertThat(jsonObject.getString("name")).isEqualTo(BaseEvent.Name.AD_REQUEST.getName());
-        assertThat(jsonObject.getString("name_category")).isEqualTo(BaseEvent.Category.REQUESTS.getCategory());
-
-        // SDK Details
-        assertThat(jsonObject.getInt("sdk_product")).isEqualTo(BaseEvent.SdkProduct.NATIVE.getType());
-        assertThat(jsonObject.getString("sdk_version")).isEqualTo("3.5.0");
-
-        // Ad Details
-        assertThat(jsonObject.getString("ad_unit_id")).isEqualTo("8cf00598d3664adaaeccd800e46afaca");
-        assertThat(jsonObject.getString("ad_creative_id")).isEqualTo("3c2b887e2c2a4cd0ae6a925440a62f0d");
-        assertThat(jsonObject.getString("ad_type")).isEqualTo("html");
-        assertThat(jsonObject.getString("ad_network_type")).isEqualTo("admob");
-        assertThat(jsonObject.getDouble("ad_width_px")).isEqualTo(320.0);
-        assertThat(jsonObject.getDouble("ad_height_px")).isEqualTo(50.0);
-
-        // App Details
-        assertThat(jsonObject.getInt("app_platform")).isEqualTo(2);
-        assertThat(jsonObject.getString("app_name")).isEqualTo("MoPub Sample App");
-        assertThat(jsonObject.getString("app_package_name")).isEqualTo("com.mopub.simpleadsdemo");
-        assertThat(jsonObject.getString("app_version")).isEqualTo("1.0");
-
-        // Client Details
-        assertThat(jsonObject.getString("client_advertising_id")).isEqualTo("ifa:XXXX");
-        assertThat(jsonObject.getBoolean("client_do_not_track")).isEqualTo(false);
-
-        // Device Details
-        assertThat(jsonObject.getString("device_manufacturer")).isEqualTo("LGE");
-        assertThat(jsonObject.getString("device_model")).isEqualTo("Nexus 5");
-        assertThat(jsonObject.getString("device_product")).isEqualTo("hammerhead");
-        assertThat(jsonObject.getString("device_os_version")).isEqualTo("5.0");
-        assertThat(jsonObject.getInt("device_screen_width_px")).isEqualTo(1080);
-        assertThat(jsonObject.getInt("device_screen_height_px")).isEqualTo(1920);
-
-        // Geo Details
-        assertThat(jsonObject.getDouble("geo_lat")).isEqualTo(37.7833);
-        assertThat(jsonObject.getDouble("geo_lon")).isEqualTo(-122.4183333);
-        assertThat(jsonObject.getDouble("geo_accuracy_radius_meters")).isEqualTo(10.0);
-
-        // Performance Details
-        assertThat(jsonObject.getDouble("perf_duration_ms")).isEqualTo(100.0);
-
-        // Network Details
-        assertThat(jsonObject.getInt("network_type")).isEqualTo(ClientMetadata.MoPubNetworkType.WIFI.getId());
-        assertThat(jsonObject.getString("network_operator_code")).isEqualTo("310410");
-        assertThat(jsonObject.getString("network_operator_name")).isEqualTo("AT&T");
-        assertThat(jsonObject.getString("network_iso_country_code")).isEqualTo("US");
-        assertThat(jsonObject.getString("network_sim_code")).isEqualTo("network_sim_code");
-        assertThat(jsonObject.getString("network_sim_operator_name")).isEqualTo("network_operator_name");
-        assertThat(jsonObject.getString("network_sim_iso_country_code")).isEqualTo("US");
-
-        // Request Details
-        assertThat(jsonObject.getString("req_id")).isEqualTo("b550796074da4559a27c5072dcba2b27");
-        assertThat(jsonObject.getInt("req_status_code")).isEqualTo(200);
-        assertThat(jsonObject.getString("req_uri")).isEqualTo("http://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca");
-        assertThat(jsonObject.getInt("req_retries")).isEqualTo(0);
-
-        // Timestamp Details
-        assertThat(jsonObject.getLong("timestamp_client")).isEqualTo(1416447053472L);
-    }
-}
-
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/EventTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/EventTest.java
deleted file mode 100644
index 6a3e58f2..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/event/EventTest.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package com.mopub.common.event;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-public class EventTest {
-
-    private Event subject;
-
-    @Before
-    public void setUp() {
-        subject = new Event.Builder(BaseEvent.Name.AD_REQUEST, BaseEvent.Category.REQUESTS, 0.10000123).build();
-    }
-
-    @Test
-    public void constructor_shouldCorrectlyAssignScribeCategoryFromBuilder() {
-        assertThat(subject.getName()).isEqualTo(BaseEvent.Name.AD_REQUEST);
-        assertThat(subject.getCategory()).isEqualTo(BaseEvent.Category.REQUESTS);
-        assertThat(subject.getSamplingRate()).isEqualTo(0.10000123);
-        assertThat(subject.getScribeCategory()).isEqualTo(BaseEvent.ScribeCategory.EXCHANGE_CLIENT_EVENT);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/MoPubEventsTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/MoPubEventsTest.java
deleted file mode 100644
index d555f34e..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/event/MoPubEventsTest.java
+++ /dev/null
@@ -1,51 +0,0 @@
-package com.mopub.common.event;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import java.util.ArrayList;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-
-
-@RunWith(SdkTestRunner.class)
-public class MoPubEventsTest {
-
-    @Before
-    public void setUp() {
-        MoPubEvents.setEventDispatcher(null);
-    }
-
-    @Test
-    public void getDispatcher_shouldReturnSingletonEventDispatcherWithScribeEventRecorder() throws Exception {
-        EventDispatcher eventDispatcher = MoPubEvents.getDispatcher();
-        EventDispatcher eventDispatcher2 = MoPubEvents.getDispatcher();
-
-        assertThat(eventDispatcher).isEqualTo(eventDispatcher2);
-
-        Iterable<EventRecorder> eventRecorderIterable = eventDispatcher.getEventRecorders();
-        ArrayList<EventRecorder> eventRecorders = new ArrayList<EventRecorder>();
-        for (EventRecorder recorder : eventRecorderIterable) {
-            eventRecorders.add(recorder);
-        }
-
-        assertThat(eventRecorders.size()).isEqualTo(1);
-        assertThat(eventRecorders.get(0)).isInstanceOf(ScribeEventRecorder.class);
-    }
-
-    @Test
-    public void log_shouldDispatchEvent() throws Exception {
-        EventDispatcher mockEventDispatcher = mock(EventDispatcher.class);
-        MoPubEvents.setEventDispatcher(mockEventDispatcher);
-
-        Event mockEvent = mock(Event.class);
-        MoPubEvents.log(mockEvent);
-
-        verify(mockEventDispatcher).dispatch(mockEvent);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/ScribeEventRecorderTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/ScribeEventRecorderTest.java
deleted file mode 100644
index 5681be25..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/event/ScribeEventRecorderTest.java
+++ /dev/null
@@ -1,210 +0,0 @@
-package com.mopub.common.event;
-
-import android.os.Handler;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.network.ScribeBackoffPolicy;
-import com.mopub.network.ScribeRequest;
-import com.mopub.network.ScribeRequestManager;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-
-import java.util.List;
-import java.util.Queue;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyLong;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-public class ScribeEventRecorderTest {
-
-    private ScribeEventRecorder subject;
-    @Mock private EventSampler mockEventSampler;
-    @Mock private Queue<BaseEvent> mockQueue;
-    @Mock private EventSerializer mockEventSerializer;
-    @Mock private ScribeRequestManager mockScribeRequestManager;
-    @Mock private Handler mockHandler;
-    @Mock private Event mockEvent;
-
-    @Before
-    public void setUp() {
-        subject = new ScribeEventRecorder(
-                mockEventSampler,
-                mockQueue,
-                mockEventSerializer,
-                mockScribeRequestManager,
-                mockHandler
-        );
-
-        when(mockEventSampler.sample(any(Event.class))).thenReturn(true);
-    }
-
-    @Test
-    public void record_shouldSampleEvent() throws Exception {
-        subject.record(mockEvent);
-        verify(mockEventSampler).sample(mockEvent);
-    }
-
-    @Test
-    public void record_withQueueSizeBelowSendThreshold_shouldQueueEvent_shouldNotSendEvents_shouldScheduleNextPoll() throws Exception {
-        when(mockQueue.size()).thenReturn(99);
-
-        subject.record(mockEvent);
-
-        verify(mockQueue).add(mockEvent);
-        verify(mockScribeRequestManager, never()).makeRequest(any(ScribeRequest.ScribeRequestFactory.class), any(ScribeBackoffPolicy.class));
-        verify(mockHandler).postDelayed(any(ScribeEventRecorder.PollingRunnable.class), eq(Long.valueOf(120000)));
-    }
-
-    @Test
-    public void record_withQueueSizeAtSendThreshold_shouldQueueEvent_shouldSendEvents_shouldScheduleNextPoll() throws Exception {
-        when(mockQueue.size()).thenReturn(100);
-        when(mockQueue.peek()).thenReturn(mockEvent);
-        when(mockQueue.poll()).thenReturn(mockEvent);
-
-        subject.record(mockEvent);
-
-        verify(mockQueue).add(mockEvent);
-        verify(mockScribeRequestManager).makeRequest(any(ScribeRequest.ScribeRequestFactory.class), any(ScribeBackoffPolicy.class));
-        verify(mockHandler).postDelayed(any(ScribeEventRecorder.PollingRunnable.class), eq(Long.valueOf(120000)));
-    }
-
-    @Test
-    public void record_withQueueSizeAtQueueLimit_shouldNotQueueEvent_shouldNotSendEvents_shouldNotScheduleNextPoll() throws Exception {
-        when(mockQueue.size()).thenReturn(500);
-
-        subject.record(mockEvent);
-
-        verify(mockQueue, never()).add(mockEvent);
-        verify(mockScribeRequestManager, never()).makeRequest(any(ScribeRequest.ScribeRequestFactory.class), any(ScribeBackoffPolicy.class));
-        verify(mockHandler, never()).postDelayed(any(ScribeEventRecorder.PollingRunnable.class), anyLong());
-    }
-
-    @Test
-    public void sendEvents_shouldDequeueEvents_shouldAddRequestToScribeRequestManager() throws Exception {
-        when(mockQueue.size()).thenReturn(1);
-        when(mockQueue.peek()).thenReturn(mockEvent).thenReturn(null);
-        when(mockQueue.poll()).thenReturn(mockEvent).thenReturn(null);
-        doAnswer(new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocation) throws Throwable {
-                ScribeRequest scribeRequest = ((ScribeRequest.ScribeRequestFactory) invocation.getArguments()[0]).createRequest(null);
-                assertThat(scribeRequest.getUrl()).isEqualTo("https://analytics.mopub.com/i/jot/exchange_client_event");
-                assertThat(scribeRequest.getEvents()).containsOnly(mockEvent);
-                return null;
-            }
-        }).when(mockScribeRequestManager).makeRequest(any(ScribeRequest.ScribeRequestFactory.class), any(ScribeBackoffPolicy.class));
-
-        subject.sendEvents();
-
-        verify(mockQueue, times(2)).peek();
-        verify(mockQueue, times(1)).poll();
-        verify(mockScribeRequestManager).makeRequest(any(ScribeRequest.ScribeRequestFactory.class), any(ScribeBackoffPolicy.class));
-    }
-
-    @Test
-    public void sendEvents_withRequestInFlightShouldReturnFast() throws Exception {
-        when(mockScribeRequestManager.isAtCapacity()).thenReturn(true);
-
-        subject.sendEvents();
-
-        verify(mockQueue, never()).poll();
-        verify(mockScribeRequestManager, never()).makeRequest(any(ScribeRequest.ScribeRequestFactory.class), any(ScribeBackoffPolicy.class));
-    }
-    
-    @Test
-    public void dequeEvents_withQueueSizeGreaterThanEventSendThreshhold_shouldDequeueUpToEventSendThreshhold() throws Exception {
-        when(mockQueue.size()).thenReturn(101);
-        when(mockQueue.peek()).thenReturn(mockEvent);
-        when(mockQueue.poll()).thenReturn(mockEvent);
-
-        List<BaseEvent> events = subject.dequeueEvents();
-
-        verify(mockQueue, times(101)).peek();
-        verify(mockQueue, times(100)).poll();
-        assertThat(events.size()).isEqualTo(100);
-    }
-
-    @Test
-    public void dequeEvents_withQueueSizeLessThanEventSendThreshhold_shouldDequeueQueueSize() throws Exception {
-        when(mockQueue.size()).thenReturn(99);
-
-        when(mockQueue.peek()).thenAnswer(new Answer<BaseEvent>() {
-            int i;
-            @Override
-            public BaseEvent answer(InvocationOnMock invocation) throws Throwable {
-                return i++ < 99 ? mockEvent : null;
-            }
-        });
-
-        when(mockQueue.poll()).thenAnswer(new Answer<BaseEvent>() {
-            int i;
-            @Override
-            public BaseEvent answer(InvocationOnMock invocation) throws Throwable {
-                return i++ < 99 ? mockEvent : null;
-            }
-        });
-
-        List<BaseEvent> events = subject.dequeueEvents();
-
-        verify(mockQueue, times(100)).peek();
-        verify(mockQueue, times(99)).poll();
-        assertThat(events.size()).isEqualTo(99);
-    }
-
-    @Test
-    public void scheduleNextPoll_shouldPostDelayedPollingRunnable() throws Exception {
-        when(mockHandler.hasMessages(0)).thenReturn(false);
-        when(mockQueue.isEmpty()).thenReturn(false);
-
-        subject.scheduleNextPoll();
-
-        verify(mockHandler).postDelayed(any(ScribeEventRecorder.PollingRunnable.class), eq(Long.valueOf(120000)));
-    }
-
-    @Test
-    public void scheduleNextPoll_withPollScheduled_shouldNotPostDelayedPollingRunnable() throws Exception {
-        when(mockHandler.hasMessages(0)).thenReturn(true);
-        when(mockQueue.isEmpty()).thenReturn(false);
-
-        subject.scheduleNextPoll();
-
-        verify(mockHandler, never()).postDelayed(any(ScribeEventRecorder.PollingRunnable.class), anyLong());
-    }
-
-    @Test
-    public void scheduleNextPoll_withEmptyRequestQueue_shouldNotPostDelayedPollingRunnable() throws Exception {
-        when(mockHandler.hasMessages(0)).thenReturn(false);
-        when(mockQueue.isEmpty()).thenReturn(true);
-
-        subject.scheduleNextPoll();
-
-        verify(mockHandler, never()).postDelayed(any(ScribeEventRecorder.PollingRunnable.class), anyLong());
-    }
-
-    @Test
-    public void PollingRunnable_run_shouldSendEvents_shouldScheduleNextPoll() throws Exception {
-        when(mockQueue.size()).thenReturn(100);
-        when(mockQueue.peek()).thenReturn(mockEvent);
-        when(mockQueue.poll()).thenReturn(mockEvent);
-
-        ScribeEventRecorder.PollingRunnable pollingRunnable = subject.new PollingRunnable();
-        pollingRunnable.run();
-
-        verify(mockScribeRequestManager).makeRequest(any(ScribeRequest.ScribeRequestFactory.class), any(ScribeBackoffPolicy.class));
-        verify(mockHandler).postDelayed(any(ScribeEventRecorder.PollingRunnable.class), eq(Long.valueOf(120000)));
-    }
-}
-
diff --git a/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java b/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
deleted file mode 100644
index 7c03ac03..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
+++ /dev/null
@@ -1,109 +0,0 @@
-package com.mopub.common.test.support;
-
-import com.mopub.common.CacheService;
-import com.mopub.common.ClientMetadata;
-import com.mopub.common.MoPub;
-import com.mopub.common.event.EventDispatcher;
-import com.mopub.common.event.MoPubEvents;
-import com.mopub.common.factories.MethodBuilderFactory;
-import com.mopub.common.util.AsyncTasks;
-import com.mopub.common.util.DateAndTime;
-import com.mopub.common.util.test.support.ShadowAsyncTasks;
-import com.mopub.common.util.test.support.TestDateAndTime;
-import com.mopub.common.util.test.support.TestMethodBuilderFactory;
-import com.mopub.mobileads.factories.AdViewControllerFactory;
-import com.mopub.mobileads.factories.CustomEventBannerAdapterFactory;
-import com.mopub.mobileads.factories.CustomEventBannerFactory;
-import com.mopub.mobileads.factories.CustomEventInterstitialAdapterFactory;
-import com.mopub.mobileads.factories.CustomEventInterstitialFactory;
-import com.mopub.mobileads.factories.HtmlBannerWebViewFactory;
-import com.mopub.mobileads.factories.HtmlInterstitialWebViewFactory;
-import com.mopub.mobileads.factories.HttpClientFactory;
-import com.mopub.mobileads.factories.MoPubViewFactory;
-import com.mopub.mobileads.factories.MraidControllerFactory;
-import com.mopub.mobileads.factories.VastManagerFactory;
-import com.mopub.mobileads.factories.VastVideoDownloadTaskFactory;
-import com.mopub.mobileads.test.support.TestAdViewControllerFactory;
-import com.mopub.mobileads.test.support.TestCustomEventBannerAdapterFactory;
-import com.mopub.mobileads.test.support.TestCustomEventBannerFactory;
-import com.mopub.mobileads.test.support.TestCustomEventInterstitialAdapterFactory;
-import com.mopub.mobileads.test.support.TestCustomEventInterstitialFactory;
-import com.mopub.mobileads.test.support.TestHtmlBannerWebViewFactory;
-import com.mopub.mobileads.test.support.TestHtmlInterstitialWebViewFactory;
-import com.mopub.mobileads.test.support.TestHttpClientFactory;
-import com.mopub.mobileads.test.support.TestMoPubViewFactory;
-import com.mopub.mobileads.test.support.TestMraidControllerFactory;
-import com.mopub.mobileads.test.support.TestVastManagerFactory;
-import com.mopub.mobileads.test.support.TestVastVideoDownloadTaskFactory;
-import com.mopub.nativeads.factories.CustomEventNativeFactory;
-import com.mopub.nativeads.test.support.TestCustomEventNativeFactory;
-
-import org.junit.runners.model.InitializationError;
-import org.mockito.MockitoAnnotations;
-import org.robolectric.DefaultTestLifecycle;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.TestLifecycle;
-import org.robolectric.bytecode.ClassInfo;
-import org.robolectric.bytecode.Setup;
-import org.robolectric.util.RobolectricBackgroundExecutorService;
-
-import static com.mopub.common.MoPub.LocationAwareness;
-import static org.mockito.Mockito.mock;
-
-public class SdkTestRunner extends RobolectricTestRunner {
-
-    public SdkTestRunner(Class<?> testClass) throws InitializationError {
-        super(testClass);
-    }
-
-    @Override
-    public Setup createSetup() {
-        return new Setup() {
-            @Override
-            public boolean shouldInstrument(ClassInfo classInfo) {
-                return classInfo.getName().equals(AsyncTasks.class.getName())
-                        || super.shouldInstrument(classInfo);
-            }
-        };
-    }
-
-    @Override
-    protected Class<? extends TestLifecycle> getTestLifecycleClass() {
-        return TestLifeCycleWithInjection.class;
-    }
-
-    public static class TestLifeCycleWithInjection extends DefaultTestLifecycle {
-        @Override
-        public void prepareTest(Object test) {
-            ClientMetadata.clearForTesting();
-
-            HttpClientFactory.setInstance(new TestHttpClientFactory());
-            DateAndTime.setInstance(new TestDateAndTime());
-            CustomEventBannerFactory.setInstance(new TestCustomEventBannerFactory());
-            CustomEventInterstitialFactory.setInstance(new TestCustomEventInterstitialFactory());
-            CustomEventBannerAdapterFactory.setInstance(new TestCustomEventBannerAdapterFactory());
-            MoPubViewFactory.setInstance(new TestMoPubViewFactory());
-            CustomEventInterstitialAdapterFactory.setInstance(new TestCustomEventInterstitialAdapterFactory());
-            HtmlBannerWebViewFactory.setInstance(new TestHtmlBannerWebViewFactory());
-            HtmlInterstitialWebViewFactory.setInstance(new TestHtmlInterstitialWebViewFactory());
-            AdViewControllerFactory.setInstance(new TestAdViewControllerFactory());
-            VastManagerFactory.setInstance(new TestVastManagerFactory());
-            VastVideoDownloadTaskFactory.setInstance(new TestVastVideoDownloadTaskFactory());
-            MethodBuilderFactory.setInstance(new TestMethodBuilderFactory());
-            CustomEventNativeFactory.setInstance(new TestCustomEventNativeFactory());
-            MraidControllerFactory.setInstance(new TestMraidControllerFactory());
-
-            ShadowAsyncTasks.reset();
-            MoPubEvents.setEventDispatcher(mock(EventDispatcher.class));
-            MoPub.setLocationAwareness(LocationAwareness.NORMAL);
-            MoPub.setLocationPrecision(6);
-
-            MockitoAnnotations.initMocks(test);
-
-            AsyncTasks.setExecutor(new RobolectricBackgroundExecutorService());
-            CacheService.clearAndNullCaches();
-            Robolectric.getFakeHttpLayer().clearPendingHttpResponses();
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java
deleted file mode 100644
index 2bfebb20..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java
+++ /dev/null
@@ -1,129 +0,0 @@
-package com.mopub.common.util;
-
-import android.os.AsyncTask;
-import android.os.Build.VERSION_CODES;
-import android.os.Handler;
-import android.os.Looper;
-
-import com.mopub.mobileads.test.support.ThreadUtils;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
-
-import java.util.concurrent.Executor;
-
-import static junit.framework.Assert.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.verify;
-
-@RunWith(RobolectricTestRunner.class)
-public class AsyncTasksTest {
-
-    private AsyncTask<String, ?, ?> asyncTask;
-
-    @Before
-    public void setUp() throws Exception {
-        asyncTask = spy(new AsyncTask<String, Void, Void>() {
-            @Override
-            protected Void doInBackground(String... strings) {
-                return null;
-            }
-        });
-    }
-
-    @Config(reportSdk = VERSION_CODES.GINGERBREAD_MR1)
-    @Test
-    public void safeExecuteOnExecutor_beforeHoneycomb_shouldCallExecuteWithParams() throws Exception {
-        AsyncTasks.safeExecuteOnExecutor(asyncTask, "hello");
-
-        verify(asyncTask).execute(eq("hello"));
-    }
-
-    @Config(reportSdk = VERSION_CODES.GINGERBREAD_MR1)
-    @Test
-    public void safeExecutorOnExecutor_beforeHoneycomb_withNullParam_shouldCallExecute() throws Exception {
-        AsyncTasks.safeExecuteOnExecutor(asyncTask, (String) null);
-
-        verify(asyncTask).execute(eq((String) null));
-    }
-
-    @Config(reportSdk = VERSION_CODES.GINGERBREAD_MR1)
-    @Test
-    public void safeExecutorOnExecutor_beforeHoneycomb_withNullAsyncTask_shouldThrowIllegalArgumentException() throws Exception {
-        try {
-            AsyncTasks.safeExecuteOnExecutor(null, "hello");
-            fail("Should have thrown NullPointerException");
-        } catch (NullPointerException exception) {
-            // pass
-        }
-    }
-
-    @Config(reportSdk = VERSION_CODES.GINGERBREAD_MR1)
-    @Test
-    public void safeExecutorOnExecutor_beforeHoneycomb_runningOnABackgroundThread_shouldThrowIllegalStateException() throws Exception {
-        ensureFastFailWhenTaskIsRunOnBackgroundThread();
-    }
-
-    @Config(reportSdk = VERSION_CODES.HONEYCOMB)
-    @Test
-    public void safeExecuteOnExecutor_atLeastHoneycomb_shouldCallExecuteWithParamsWithExecutor() throws Exception {
-        AsyncTasks.safeExecuteOnExecutor(asyncTask, "goodbye");
-
-        verify(asyncTask).executeOnExecutor(any(Executor.class), eq("goodbye"));
-    }
-
-    @Config(reportSdk = VERSION_CODES.HONEYCOMB)
-    @Test
-    public void safeExecutorOnExecutor_atLeastHoneycomb_withNullParam_shouldCallExecuteWithParamsWithExecutor() throws Exception {
-        AsyncTasks.safeExecuteOnExecutor(asyncTask, (String) null);
-
-        verify(asyncTask).executeOnExecutor(any(Executor.class), eq((String) null));
-    }
-
-    @Config(reportSdk = VERSION_CODES.HONEYCOMB)
-    @Test
-    public void safeExecutorOnExecutor_atLeastHoneycomb_withNullAsyncTask_shouldThrowIllegalArgumentException() throws Exception {
-        try {
-            AsyncTasks.safeExecuteOnExecutor(null, "hello");
-            fail("Should have thrown NullPointerException");
-        } catch (NullPointerException exception) {
-            // pass
-        }
-    }
-
-    @Config(reportSdk = VERSION_CODES.HONEYCOMB)
-    @Test
-    public void safeExecutorOnExecutor_atLeastHoneycomb_runningOnABackgroundThread_shouldThrowIllegalStateException() throws Exception {
-        ensureFastFailWhenTaskIsRunOnBackgroundThread();
-    }
-
-    private void ensureFastFailWhenTaskIsRunOnBackgroundThread() {
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    AsyncTasks.safeExecuteOnExecutor(asyncTask, "hello");
-
-                    Handler handler = new Handler(Looper.getMainLooper());
-                    handler.post(new Runnable() {
-                        @Override
-                        public void run() {
-                            fail("Should have thrown IllegalStateException");
-                        }
-                    });
-                } catch (IllegalStateException exception) {
-                    // pass
-                }
-            }
-        }).start();
-
-        ThreadUtils.pause(10);
-        Robolectric.runUiThreadTasks();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/DipsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/DipsTest.java
deleted file mode 100644
index c0d46973..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/DipsTest.java
+++ /dev/null
@@ -1,42 +0,0 @@
-package com.mopub.common.util;
-
-import android.app.Activity;
-import android.content.res.Resources;
-import android.util.DisplayMetrics;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-public class DipsTest {
-
-    @Mock private Activity activity;
-    @Mock private Resources resources;
-
-    @Before
-    public void setUp() {
-        DisplayMetrics displayMetrics = new DisplayMetrics();
-        displayMetrics.widthPixels = 480;
-        displayMetrics.heightPixels = 800;
-        displayMetrics.density = 2;
-        when(activity.getResources()).thenReturn(resources);
-        when(resources.getDisplayMetrics()).thenReturn(displayMetrics);
-    }
-
-    @Test
-    public void screenWidthAsIntDips_shouldReturnTheWidthAsDips() throws Exception {
-        assertThat(Dips.screenWidthAsIntDips(activity)).isEqualTo(240);
-    }
-
-    @Test
-    public void screenHeightAsIntDips_shouldReturnTheHeightAsDips() throws Exception {
-        assertThat(Dips.screenHeightAsIntDips(activity)).isEqualTo(400);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/DrawablesTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/DrawablesTest.java
deleted file mode 100644
index 3c8af8cd..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/DrawablesTest.java
+++ /dev/null
@@ -1,24 +0,0 @@
-package com.mopub.common.util;
-
-import android.app.Activity;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(RobolectricTestRunner.class)
-public class DrawablesTest {
-    @Test
-    public void createDrawable_shouldNotCacheDrawables() throws Exception {
-        assertThat(Drawables.BACKGROUND.createDrawable(new Activity()))
-                .isNotSameAs(Drawables.BACKGROUND.createDrawable(new Activity()));
-    }
-
-    @Test
-    public void getBitmap_shouldCacheBitmap() throws Exception {
-        assertThat(Drawables.BACKGROUND.getBitmap())
-                .isSameAs(Drawables.BACKGROUND.getBitmap());
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/FilesTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/FilesTest.java
deleted file mode 100644
index 0b65e22e..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/FilesTest.java
+++ /dev/null
@@ -1,131 +0,0 @@
-package com.mopub.common.util;
-
-import android.app.Activity;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.File;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
-
-@RunWith(RobolectricTestRunner.class)
-public class FilesTest {
-
-    private Activity activity;
-    private String expectedDirectoryPath;
-    private File expectedDirectory;
-    private String expectedFilePath;
-
-    @Before
-    public void setup() throws Exception {
-        activity = new Activity();
-
-        expectedDirectoryPath = activity.getFilesDir() + File.separator + "testDirectory";
-        expectedFilePath = activity.getFilesDir() + File.separator + "test.txt";
-    }
-
-    @After
-    public void tearDown() throws Exception {
-        new File(expectedDirectoryPath).delete();
-    }
-
-    @Test
-    public void createDirectory_shouldReturnNewDirectory() throws Exception {
-        File directory = Files.createDirectory(expectedDirectoryPath);
-
-        assertThat(directory.exists()).isTrue();
-        assertThat(directory.isDirectory()).isTrue();
-    }
-
-    @Test
-    public void createDirectory_whenDirectoryAlreadyExists_shouldReturnTheDirectory() throws Exception {
-        expectedDirectory = new File(expectedDirectoryPath);
-        expectedDirectory.mkdirs();
-
-        assertThat(expectedDirectory.exists()).isTrue();
-        assertThat(expectedDirectory.isDirectory()).isTrue();
-
-        File directory = Files.createDirectory(expectedDirectoryPath);
-
-        assertThat(directory.exists()).isTrue();
-        assertThat(directory.isDirectory()).isTrue();
-    }
-
-    @Test
-    public void createDirectory_whenFileAlreadyExistsButIsNotADirectory_shouldReturnNull() throws Exception {
-        File file = new File(expectedFilePath);
-        file.createNewFile();
-
-        assertThat(file.exists()).isTrue();
-        assertThat(file.isDirectory()).isFalse();
-
-        File directory = Files.createDirectory(expectedFilePath);
-
-        assertThat(directory).isNull();
-
-        file.delete();
-    }
-
-    @Test
-    public void createDirectory_whenAbsolutePathIsNull_shouldReturnNull() throws Exception {
-        File directory = Files.createDirectory(null);
-
-        assertThat(directory).isNull();
-    }
-
-    @Test
-    public void createDirectory_withExternalStoragePath_withoutRelevantPermission_shouldReturnNullAndNotThrowException() throws Exception {
-        String filePath = activity.getExternalCacheDir() + File.separator + "testFile.txt";
-        File file = new File(filePath);
-
-        Files.createDirectory(filePath);
-
-        // pass
-
-        file.delete();
-    }
-
-    @Test
-    public void intLength_whenFileHasLengthLessThanMaxInt_shouldReturnThatLength() throws Exception {
-        File file = mock(File.class);
-        stub(file.length()).toReturn(1234L);
-
-        int length = Files.intLength(file);
-
-        assertThat(length).isEqualTo(1234);
-    }
-
-    @Test
-    public void intLength_whenFileHasLengthGreaterThanMaxInt_shouldReturnMaxInt() throws Exception {
-        File file = mock(File.class);
-        stub(file.length()).toReturn(Integer.MAX_VALUE + 100L);
-
-        int length = Files.intLength(file);
-
-        assertThat(length).isEqualTo(Integer.MAX_VALUE);
-    }
-
-    @Test
-    public void intLength_whenFileDoesNotExist_shouldReturnZero() throws Exception {
-        File file = new File(expectedFilePath);
-
-        assertThat(file.exists()).isFalse();
-
-        int length = Files.intLength(file);
-
-        assertThat(length).isEqualTo(0);
-    }
-
-    @Test
-    public void intLength_whenFileIsNull_shouldReturnZero() throws Exception {
-        int length = Files.intLength(null);
-
-        assertThat(length).isEqualTo(0);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java
deleted file mode 100644
index ee879eae..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java
+++ /dev/null
@@ -1,151 +0,0 @@
-package com.mopub.common.util;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.PackageManager;
-import android.content.pm.ResolveInfo;
-import android.net.Uri;
-import android.os.Bundle;
-
-import com.mopub.common.MoPubBrowser;
-import com.mopub.exceptions.IntentNotResolvableException;
-import com.mopub.exceptions.UrlParseException;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
-
-@RunWith(RobolectricTestRunner.class)
-public class IntentsTest {
-    private Activity activityContext;
-    private Context applicationContext;
-
-    @Before
-    public void setUp() {
-        activityContext = Robolectric.buildActivity(Activity.class).create().get();
-        applicationContext = activityContext.getApplicationContext();
-    }
-
-    @Test
-    public void startActivity_withActivityContext_shouldStartActivityWithNoNewFlags() throws IntentNotResolvableException {
-        Intents.startActivity(activityContext, new Intent());
-
-        final Intent intent = Robolectric.getShadowApplication().peekNextStartedActivity();
-        assertThat(Utils.bitMaskContainsFlag(intent.getFlags(), FLAG_ACTIVITY_NEW_TASK)).isFalse();
-    }
-
-    @Test
-    public void getStartActivityIntent_withActivityContext_shouldReturnIntentWithoutNewTaskFlag() throws Exception {
-        Context context = new Activity();
-
-        final Intent intent = Intents.getStartActivityIntent(context, MoPubBrowser.class, null);
-
-        assertThat(intent.getComponent().getClassName()).isEqualTo(MoPubBrowser.class.getName());
-        assertThat(Utils.bitMaskContainsFlag(intent.getFlags(), FLAG_ACTIVITY_NEW_TASK)).isFalse();
-        assertThat(intent.getExtras()).isNull();
-    }
-
-    @Test
-    public void getStartActivityIntent_withApplicationContext_shouldReturnIntentWithNewTaskFlag() throws Exception {
-        Context context = new Activity().getApplicationContext();
-
-        final Intent intent = Intents.getStartActivityIntent(context, MoPubBrowser.class, null);
-
-        assertThat(intent.getComponent().getClassName()).isEqualTo(MoPubBrowser.class.getName());
-        assertThat(Utils.bitMaskContainsFlag(intent.getFlags(), FLAG_ACTIVITY_NEW_TASK)).isTrue();
-        assertThat(intent.getExtras()).isNull();
-    }
-
-    @Test
-    public void getStartActivityIntent_withBundle_shouldReturnIntentWithExtras() throws Exception {
-        Context context = new Activity();
-        Bundle bundle = new Bundle();
-        bundle.putString("arbitrary key", "even more arbitrary value");
-
-        final Intent intent = Intents.getStartActivityIntent(context, MoPubBrowser.class, bundle);
-
-        assertThat(intent.getComponent().getClassName()).isEqualTo(MoPubBrowser.class.getName());
-        assertThat(Utils.bitMaskContainsFlag(intent.getFlags(), FLAG_ACTIVITY_NEW_TASK)).isFalse();
-        assertThat(intent.getExtras()).isEqualTo(bundle);
-    }
-
-    @Test
-    public void deviceCanHandleIntent_whenActivityCanResolveIntent_shouldReturnTrue() throws Exception {
-        Context context = mock(Context.class);
-        PackageManager packageManager = mock(PackageManager.class);
-
-        List<ResolveInfo> resolveInfos = new ArrayList<ResolveInfo>();
-        resolveInfos.add(new ResolveInfo());
-
-        stub(context.getPackageManager()).toReturn(packageManager);
-        Intent specificIntent = new Intent();
-        specificIntent.setData(Uri.parse("specificIntent:"));
-
-        stub(packageManager.queryIntentActivities(eq(specificIntent), eq(0))).toReturn(resolveInfos);
-
-        assertThat(Intents.deviceCanHandleIntent(context, specificIntent)).isTrue();
-    }
-
-    @Test
-    public void deviceCanHandleIntent_whenActivityCanNotResolveIntent_shouldReturnFalse() throws Exception {
-        Context context = mock(Context.class);
-        PackageManager packageManager = mock(PackageManager.class);
-
-        List<ResolveInfo> resolveInfos = new ArrayList<ResolveInfo>();
-        resolveInfos.add(new ResolveInfo());
-
-        stub(context.getPackageManager()).toReturn(packageManager);
-        Intent specificIntent = new Intent();
-        specificIntent.setData(Uri.parse("specificIntent:"));
-
-        Intent otherIntent = new Intent();
-        otherIntent.setData(Uri.parse("other:"));
-        stub(packageManager.queryIntentActivities(eq(specificIntent), eq(0))).toReturn(resolveInfos);
-
-        assertThat(Intents.deviceCanHandleIntent(context, otherIntent)).isFalse();
-    }
-
-    @Test
-    public void intentForNativeBrowserScheme_shouldProperlyHandleEncodedUrls() throws UrlParseException {
-        Intent intent;
-
-        intent = Intents.intentForNativeBrowserScheme("mopubnativebrowser://navigate?url=http%3A%2F%2Fwww.example.com");
-        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
-        assertThat(intent.getDataString()).isEqualTo("http://www.example.com");
-
-        intent = Intents.intentForNativeBrowserScheme("mopubnativebrowser://navigate?url=http://www.example.com/?query=1&two=2");
-        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
-        assertThat(intent.getDataString()).isEqualTo("http://www.example.com/?query=1");
-
-        intent = Intents.intentForNativeBrowserScheme("mopubnativebrowser://navigate?url=http%3A%2F%2Fwww.example.com%2F%3Fquery%3D1%26two%3D2");
-        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
-        assertThat(intent.getDataString()).isEqualTo("http://www.example.com/?query=1&two=2");
-    }
-
-    @Test(expected = UrlParseException.class)
-    public void intentForNativeBrowserScheme_whenNotMoPubNativeBrowser_shouldThrowException() throws UrlParseException {
-        Intents.intentForNativeBrowserScheme("mailto://navigate?url=http://www.example.com");
-    }
-
-    @Test(expected = UrlParseException.class)
-    public void intentForNativeBrowserScheme_whenNotNavigate_shouldThrowException() throws UrlParseException {
-        Intents.intentForNativeBrowserScheme("mopubnativebrowser://getout?url=http://www.example.com");
-    }
-
-    @Test(expected = UrlParseException.class)
-    public void intentForNativeBrowserScheme_whenUrlParameterMissing_shouldThrowException() throws UrlParseException {
-        Intents.intentForNativeBrowserScheme("mopubnativebrowser://navigate");
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/JsonTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/JsonTest.java
deleted file mode 100644
index 8636e84e..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/JsonTest.java
+++ /dev/null
@@ -1,155 +0,0 @@
-package com.mopub.common.util;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-public class JsonTest {
-    private Map<String,String> expectedMap;
-
-    @Before
-    public void setUp() throws Exception {
-        expectedMap = new HashMap<String, String>();
-    }
-
-    @Test
-    public void jsonStringToMap_shouldParseJson() throws Exception {
-        expectedMap.put("key", "value");
-        expectedMap.put("other_key", "other_value");
-
-        String json = "{\"key\":\"value\",\"other_key\":\"other_value\"}";
-        Map<String, String> map = Json.jsonStringToMap(json);
-        assertThat(map).isEqualTo(expectedMap);
-    }
-
-    @Test
-    public void jsonStringToMap_whenStringIsNull_shouldReturnEmptyMap() throws Exception {
-        Map<String, String> map = Json.jsonStringToMap(null);
-        assertThat(map).isEqualTo(expectedMap);
-    }
-
-    @Test
-    public void jsonStringToMap_whenStringIsEmpty_shouldReturnEmptyMap() throws Exception {
-        Map<String, String> map = Json.jsonStringToMap("");
-        assertThat(map).isEqualTo(expectedMap);
-    }
-
-    @Test
-    public void mapToJsonString_followedByJsonStringToMap_shouldReturnSameMap() throws Exception {
-        Map<String, String> inputMap = new HashMap<String, String>();
-        inputMap.put("key", "value");
-        inputMap.put("other_key", "other_value");
-
-        Map<String, String> outputMap = Json.jsonStringToMap(Json.mapToJsonString(inputMap));
-        assertThat(outputMap).isEqualTo(inputMap);
-    }
-
-    @Test
-    public void mapToJsonString_shouldReturnValidMap() throws Exception {
-        Map<String, String> map = new HashMap<String, String>();
-        map.put("key", "value");
-
-        String expectedJson = "{\"key\":\"value\"}";
-        String actualJson = Json.mapToJsonString(map);
-        assertThat(actualJson).isEqualTo(expectedJson);
-    }
-
-    @Test
-    public void mapToJsonString_whenMapIsEmpty_shouldReturnEmptyJson() throws Exception {
-        String expectedJson = "{}";
-        assertThat(Json.mapToJsonString(new HashMap<String, String>())).isEqualTo(expectedJson);
-    }
-
-    @Test
-    public void mapToJsonString_whenMapIsNull_shouldReturnEmptyJson() throws Exception {
-        String expectedJson = "{}";
-        assertThat(Json.mapToJsonString(null)).isEqualTo(expectedJson);
-    }
-
-    @Test
-    public void jsonArrayToStringArray_withMultipleValidParameters_shouldReturnCorrespondingStringArray() throws Exception {
-        String jsonString = "[\"hi\",\"dog\",\"goat\"]";
-
-        String[] expected = {"hi", "dog", "goat"};
-
-        assertThat(Json.jsonArrayToStringArray(jsonString)).isEqualTo(expected);
-    }
-
-    @Test
-    public void jsonArrayToStringArray_withMultipleValidParameters_withSingleQuotes_shouldReturnCorrespondingStringArray() throws Exception {
-        String jsonString = "['hi','dog','goat']";
-
-        String[] expected = {"hi", "dog", "goat"};
-
-        assertThat(Json.jsonArrayToStringArray(jsonString)).isEqualTo(expected);
-    }
-
-    @Test
-    public void jsonArrayToStringArray_withMultipleValidParameters_withNoQuotes_shouldReturnCorrespondingStringArray() throws Exception {
-        String jsonString = "[hi,dog,goat]";
-
-        String[] expected = {"hi", "dog", "goat"};
-
-        assertThat(Json.jsonArrayToStringArray(jsonString)).isEqualTo(expected);
-    }
-
-    @Test
-    public void jsonArrayToStringArray_withNullInput_shouldReturnEmptyStringArray() throws Exception {
-        String[] result = Json.jsonArrayToStringArray(null);
-
-        assertThat(result).isNotNull();
-        assertThat(result).isEmpty();
-    }
-
-    @Test
-    public void jsonArrayToStringArray_withEmptyJsonArray_shouldReturnEmptyStringArray() throws Exception {
-        String[] result = Json.jsonArrayToStringArray("[]");
-
-        assertThat(result).isNotNull();
-        assertThat(result).isEmpty();
-    }
-
-    @Test
-    public void jsonArrayToStringArray_withEmptyString_shouldReturnEmptyStringArray() throws Exception {
-        String[] result = Json.jsonArrayToStringArray("");
-
-        assertThat(result).isNotNull();
-        assertThat(result).isEmpty();
-    }
-
-    @Test
-    public void jsonArrayToStringArray_withMalformedMalicousString_shouldReturnEmptyStringArray() throws Exception {
-        String[] result = Json.jsonArrayToStringArray("} die");
-
-        assertThat(result).isNotNull();
-        assertThat(result).isEmpty();
-    }
-
-    @Test
-    public void jsonArrayToStringArray_whenMalformed_shouldReturnEmptyStringArray() throws Exception {
-        String jsonString = "[cool,guy,crew";
-
-        String[] result = Json.jsonArrayToStringArray(jsonString);
-
-        assertThat(result).isNotNull();
-        assertThat(result).isEmpty();
-    }
-
-    @Test
-    public void jsonArrayToStringArray_withLotsOfEmptySpace_shouldReturnStringArrayWithoutSpaces() throws Exception {
-        String jsonString = "        [    \"  hi\",\"do g\",\"goat  \"]";
-        String[] expected = {"  hi", "do g", "goat  "};
-
-        String[] result = Json.jsonArrayToStringArray(jsonString);
-
-        assertThat(result).isEqualTo(expected);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
deleted file mode 100644
index 99a9c3f8..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
+++ /dev/null
@@ -1,397 +0,0 @@
-package com.mopub.common.util;
-
-import android.annotation.TargetApi;
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.ActivityInfo;
-import android.content.pm.ApplicationInfo;
-import android.content.pm.ResolveInfo;
-import android.os.Build;
-
-import com.mopub.common.MoPubBrowser;
-import com.mopub.mobileads.MoPubActivity;
-import com.mopub.mobileads.MraidActivity;
-import com.mopub.mobileads.MraidVideoPlayerActivity;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowLog;
-import org.robolectric.shadows.ShadowToast;
-
-import java.util.List;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.when;
-
-@RunWith(RobolectricTestRunner.class)
-public class ManifestUtilsTest {
-    private Context context;
-    private List<Class<? extends Activity>> requiredWebViewSdkActivities;
-    private List<Class<? extends Activity>> requiredNativeSdkActivities;
-
-    @Mock private ResolveInfo mockResolveInfo;
-
-    @Before
-    public void setUp() throws Exception {
-        context = spy(new Activity());
-
-        requiredWebViewSdkActivities = ManifestUtils.getRequiredWebViewSdkActivities();
-        requiredNativeSdkActivities = ManifestUtils.getRequiredNativeSdkActivities();
-
-        setDebugMode(false);
-    }
-
-    @After
-    public void tearDown() throws Exception {
-        setDebugMode(false);
-        // This may have been set to a mock during testing. Reset this class back to normal
-        ManifestUtils.setFlagCheckUtil(new ManifestUtils.FlagCheckUtil());
-    }
-
-    @Test
-    public void checkWebViewSdkActivitiesDeclared_shouldIncludeFourActivityDeclarations() throws Exception {
-        ShadowLog.setupLogging();
-
-        ManifestUtils.checkWebViewActivitiesDeclared(context);
-
-        assertLogIncludes(
-                "com.mopub.mobileads.MoPubActivity",
-                "com.mopub.mobileads.MraidActivity",
-                "com.mopub.mobileads.MraidVideoPlayerActivity",
-                "com.mopub.common.MoPubBrowser"
-        );
-    }
-
-    @Test
-    public void checkNativeSdkActivitiesDeclared_shouldIncludeOneActivityDeclaration() throws Exception {
-        ShadowLog.setupLogging();
-
-        ManifestUtils.checkNativeActivitiesDeclared(context);
-
-        assertLogIncludes("com.mopub.common.MoPubBrowser");
-        assertLogDoesntInclude(
-                "com.mopub.mobileads.MoPubActivity",
-                "com.mopub.mobileads.MraidActivity",
-                "com.mopub.mobileads.MraidVideoPlayerActivity"
-        );
-    }
-
-    @Test
-    public void displayWarningForMissingActivities_withAllActivitiesDeclared_shouldNotShowLogOrToast() throws Exception {
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MraidActivity.class), mockResolveInfo);
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubBrowser.class), mockResolveInfo);
-
-        ShadowLog.setupLogging();
-        setDebugMode(true);
-
-        ManifestUtils.displayWarningForMissingActivities(context, requiredWebViewSdkActivities);
-
-        assertThat(ShadowToast.getLatestToast()).isNull();
-        assertThat(ShadowLog.getLogs()).isEmpty();
-    }
-
-    @Test
-     public void displayWarningForMissingActivities_withOneMissingActivity_shouldLogOnlyThatOne() throws Exception {
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MraidActivity.class), mockResolveInfo);
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
-        // Here, we leave out MoPubBrowser on purpose
-
-        ShadowLog.setupLogging();
-
-        ManifestUtils.displayWarningForMissingActivities(context, requiredWebViewSdkActivities);
-
-        assertLogIncludes("com.mopub.common.MoPubBrowser");
-        assertLogDoesntInclude(
-                "com.mopub.mobileads.MoPubActivity",
-                "com.mopub.mobileads.MraidActivity",
-                "com.mopub.mobileads.MraidVideoPlayerActivity"
-        );
-    }
-
-    @Test
-    public void displayWarningForMissingActivities_withAllMissingActivities_shouldLogMessage() throws Exception {
-        setDebugMode(true);
-        ShadowLog.setupLogging();
-
-        ManifestUtils.displayWarningForMissingActivities(context, requiredWebViewSdkActivities);
-
-        final List<ShadowLog.LogItem> logs = ShadowLog.getLogs();
-
-        assertLogIncludes(
-                "com.mopub.mobileads.MoPubActivity",
-                "com.mopub.mobileads.MraidActivity",
-                "com.mopub.mobileads.MraidVideoPlayerActivity",
-                "com.mopub.common.MoPubBrowser"
-        );
-    }
-
-    @Test
-    public void displayWarningForMissingActivities_withMissingActivities_withDebugTrue_shouldShowToast() throws Exception {
-        setDebugMode(true);
-
-        ManifestUtils.displayWarningForMissingActivities(context, requiredWebViewSdkActivities);
-
-        assertThat(ShadowToast.getLatestToast()).isNotNull();
-        final String toastText = ShadowToast.getTextOfLatestToast();
-        assertThat(toastText).isEqualTo("ERROR: YOUR MOPUB INTEGRATION IS INCOMPLETE.\nCheck logcat and update your AndroidManifest.xml with the correct activities and configuration.");
-    }
-
-    @Test
-    public void displayWarningForMissingActivities_withMissingActivities_withDebugFalse_shouldNotShowToast() throws Exception {
-        setDebugMode(false);
-
-        ManifestUtils.displayWarningForMissingActivities(context, requiredWebViewSdkActivities);
-
-        assertThat(ShadowToast.getLatestToast()).isNull();
-    }
-
-    @SuppressWarnings("unchecked")
-    @TargetApi(13)
-    @Test
-    public void displayWarningForMisconfiguredActivities_withAllActivitiesConfigured_shouldNotLogOrShowToast() throws Exception {
-        ManifestUtils.FlagCheckUtil mockActivitiyConfigCheck = mock(ManifestUtils.FlagCheckUtil.class);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_KEYBOARD_HIDDEN))).thenReturn(true);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_ORIENTATION))).thenReturn(true);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_SCREEN_SIZE))).thenReturn(true);
-        ManifestUtils.setFlagCheckUtil(mockActivitiyConfigCheck);
-
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MraidActivity.class), mockResolveInfo);
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubBrowser.class), mockResolveInfo);
-
-        ShadowLog.setupLogging();
-        setDebugMode(true);
-
-        ManifestUtils.displayWarningForMisconfiguredActivities(context, requiredWebViewSdkActivities);
-
-        assertThat(ShadowToast.getLatestToast()).isNull();
-        assertThat(ShadowLog.getLogs()).isEmpty();
-    }
-
-    @SuppressWarnings("unchecked")
-    @TargetApi(13)
-    @Test
-    public void displayWarningForMisconfiguredActivities_withOneMisconfiguredActivity_shouldLogOnlyThatOne() throws Exception {
-        ManifestUtils.FlagCheckUtil mockActivitiyConfigCheck = mock(ManifestUtils.FlagCheckUtil.class);
-
-        // Misconfigure the first activity; only return false if the activity is MoPubActivity
-        doAnswer(new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
-                Object[] args = invocationOnMock.getArguments();
-                return MoPubActivity.class != args[0];
-            }
-        }).when(mockActivitiyConfigCheck).hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_KEYBOARD_HIDDEN));
-
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_ORIENTATION))).thenReturn(true);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_SCREEN_SIZE))).thenReturn(true);
-        ManifestUtils.setFlagCheckUtil(mockActivitiyConfigCheck);
-
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MraidActivity.class), mockResolveInfo);
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubBrowser.class), mockResolveInfo);
-
-        ShadowLog.setupLogging();
-
-        ManifestUtils.displayWarningForMisconfiguredActivities(context, requiredWebViewSdkActivities);
-
-        assertLogIncludes("com.mopub.mobileads.MoPubActivity");
-        assertLogIncludes("The android:configChanges param for activity " + MoPubActivity.class.getName() + " must include keyboardHidden.");
-        assertLogDoesntInclude(
-                "com.mopub.mobileads.MraidActivity",
-                "com.mopub.mobileads.MraidVideoPlayerActivity",
-                "com.mopub.common.MoPubBrowser"
-        );
-        assertLogDoesntInclude("The android:configChanges param for activity " + MoPubActivity.class.getName() + " must include orientation.");
-        assertLogDoesntInclude("The android:configChanges param for activity " + MoPubActivity.class.getName() + " must include screenSize.");
-    }
-
-    @SuppressWarnings("unchecked")
-    @TargetApi(13)
-    @Test
-    public void displayWarningForMisconfiguredActivities_withOneMisconfiguredActivity_withMissingAllConfigChangesValues_shouldLogAllConfigChangesValues() throws Exception {
-        ManifestUtils.FlagCheckUtil mockActivitiyConfigCheck = mock(ManifestUtils.FlagCheckUtil.class);
-
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_KEYBOARD_HIDDEN))).thenReturn(false);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_ORIENTATION))).thenReturn(false);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_SCREEN_SIZE))).thenReturn(false);
-        ManifestUtils.setFlagCheckUtil(mockActivitiyConfigCheck);
-
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
-
-        ShadowLog.setupLogging();
-
-        ManifestUtils.displayWarningForMisconfiguredActivities(context, requiredWebViewSdkActivities);
-
-        assertLogIncludes("The android:configChanges param for activity " + MoPubActivity.class.getName() + " must include keyboardHidden.");
-        assertLogIncludes("The android:configChanges param for activity " + MoPubActivity.class.getName() + " must include orientation.");
-        assertLogIncludes("The android:configChanges param for activity " + MoPubActivity.class.getName() + " must include screenSize.");
-    }
-
-    @SuppressWarnings("unchecked")
-    @Config(reportSdk = Build.VERSION_CODES.HONEYCOMB_MR1)
-    @TargetApi(13)
-    @Test
-    public void displayWarningForMisconfiguredActivities_withMissingScreenSize_withApiLessThan13_shouldNotLogOrShowToast() throws Exception {
-        ManifestUtils.FlagCheckUtil mockActivitiyConfigCheck = mock(ManifestUtils.FlagCheckUtil.class);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_KEYBOARD_HIDDEN))).thenReturn(true);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_ORIENTATION))).thenReturn(true);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_SCREEN_SIZE))).thenReturn(false);
-        ManifestUtils.setFlagCheckUtil(mockActivitiyConfigCheck);
-
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
-
-        ShadowLog.setupLogging();
-        setDebugMode(true);
-
-        ManifestUtils.displayWarningForMisconfiguredActivities(context, requiredWebViewSdkActivities);
-
-        assertThat(ShadowToast.getLatestToast()).isNull();
-        assertThat(ShadowLog.getLogs()).isEmpty();
-    }
-
-    @SuppressWarnings("unchecked")
-    @TargetApi(13)
-    @Test
-    public void displayWarningForMisconfiguredActivities_withMissingScreenSize_withTargetApiLessThan13_shouldNotLogOrShowToast() throws Exception {
-        // Set target API to < 13
-        ApplicationInfo applicationInfo = context.getApplicationInfo();
-        applicationInfo.targetSdkVersion = Build.VERSION_CODES.HONEYCOMB_MR1;
-        when(context.getApplicationInfo()).thenReturn(applicationInfo);
-
-        ManifestUtils.FlagCheckUtil mockActivitiyConfigCheck = mock(ManifestUtils.FlagCheckUtil.class);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_KEYBOARD_HIDDEN))).thenReturn(true);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_ORIENTATION))).thenReturn(true);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_SCREEN_SIZE))).thenReturn(false);
-        ManifestUtils.setFlagCheckUtil(mockActivitiyConfigCheck);
-
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
-
-        ShadowLog.setupLogging();
-        setDebugMode(true);
-
-        ManifestUtils.displayWarningForMisconfiguredActivities(context, requiredWebViewSdkActivities);
-
-        assertThat(ShadowToast.getLatestToast()).isNull();
-        assertThat(ShadowLog.getLogs()).isEmpty();
-    }
-
-    @SuppressWarnings("unchecked")
-    @TargetApi(13)
-    @Test
-    public void displayWarningForMisconfiguredActivities_withMisconfiguredActivities_withDebugTrue_shouldShowToast() throws Exception {
-        ManifestUtils.FlagCheckUtil mockActivitiyConfigCheck = mock(ManifestUtils.FlagCheckUtil.class);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_KEYBOARD_HIDDEN))).thenReturn(false);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_ORIENTATION))).thenReturn(false);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_SCREEN_SIZE))).thenReturn(false);
-        ManifestUtils.setFlagCheckUtil(mockActivitiyConfigCheck);
-
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
-
-        setDebugMode(true);
-
-        ManifestUtils.displayWarningForMisconfiguredActivities(context, requiredWebViewSdkActivities);
-
-        assertThat(ShadowToast.getLatestToast()).isNotNull();
-        final String toastText = ShadowToast.getTextOfLatestToast();
-        assertThat(toastText).isEqualTo("ERROR: YOUR MOPUB INTEGRATION IS INCOMPLETE.\nCheck logcat and update your AndroidManifest.xml with the correct activities and configuration.");
-    }
-
-    @SuppressWarnings("unchecked")
-    @TargetApi(13)
-    @Test
-    public void displayWarningForMisconfiguredActivities_withMisconfiguredActivities_withDebugFalse_shouldNotShowToast() throws Exception {
-        ManifestUtils.FlagCheckUtil mockActivitiyConfigCheck = mock(ManifestUtils.FlagCheckUtil.class);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_KEYBOARD_HIDDEN))).thenReturn(false);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_ORIENTATION))).thenReturn(false);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_SCREEN_SIZE))).thenReturn(false);
-        ManifestUtils.setFlagCheckUtil(mockActivitiyConfigCheck);
-
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
-
-        setDebugMode(false);
-
-        ManifestUtils.displayWarningForMissingActivities(context, requiredWebViewSdkActivities);
-
-        assertThat(ShadowToast.getLatestToast()).isNull();
-    }
-
-    @Test
-    public void isDebuggable_whenApplicationIsDebuggable_shouldReturnTrue() throws Exception {
-        setDebugMode(true);
-
-        assertThat(ManifestUtils.isDebuggable(context)).isTrue();
-    }
-
-    @Test
-    public void isDebuggable_whenApplicationIsNotDebuggable_shouldReturnFalse() throws Exception {
-        setDebugMode(false);
-
-        assertThat(ManifestUtils.isDebuggable(context)).isFalse();
-    }
-
-    @SuppressWarnings("unchecked")
-    @Test
-    public void getRequiredWebViewSdkActivities_shouldIncludeRequiredActivities() throws Exception {
-        assertThat(requiredWebViewSdkActivities).containsOnly(
-                MoPubActivity.class,
-                MraidActivity.class,
-                MraidVideoPlayerActivity.class,
-                MoPubBrowser.class
-        );
-    }
-
-    @SuppressWarnings("unchecked")
-    @Test
-    public void getRequiredNativeSdkActivities_shouldIncludeRequiredActivities() throws Exception {
-        assertThat(requiredNativeSdkActivities).containsOnly(
-                MoPubBrowser.class
-        );
-    }
-
-    private void setDebugMode(boolean enabled) {
-        final ApplicationInfo applicationInfo = context.getApplicationInfo();
-
-        if (enabled) {
-            applicationInfo.flags |= ApplicationInfo.FLAG_DEBUGGABLE;
-        } else {
-            applicationInfo.flags &= ~ApplicationInfo.FLAG_DEBUGGABLE;
-        }
-
-        when(context.getApplicationInfo()).thenReturn(applicationInfo);
-    }
-
-    private void assertLogIncludes(final String... messages) {
-        final String logText = ShadowLog.getLogs().get(0).msg;
-        for (final String message : messages) {
-            assertThat(logText).containsOnlyOnce(message);
-        }
-    }
-
-    private void assertLogDoesntInclude(final String... messages) {
-        final String logText = ShadowLog.getLogs().get(0).msg;
-        for (final String message : messages) {
-            assertThat(logText).doesNotContain(message);
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/NumbersTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/NumbersTest.java
deleted file mode 100644
index 93d8fb1f..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/NumbersTest.java
+++ /dev/null
@@ -1,59 +0,0 @@
-package com.mopub.common.util;
-
-import android.app.Activity;
-
-import org.junit.Test;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.fail;
-import static org.mockito.Mockito.mock;
-
-public class NumbersTest {
-    @Test
-    public void parseDouble_withNumberValue_shouldReturnDouble() throws Exception {
-        int anInt = 2;
-        assertThat(Numbers.parseDouble(anInt)).isEqualTo(anInt);
-
-        double aDouble = 2.1;
-        assertThat(Numbers.parseDouble(aDouble)).isEqualTo(aDouble);
-
-        float aFloat = 2.2f;
-        assertThat(Numbers.parseDouble(aFloat)).isEqualTo(aFloat);
-
-        double nan = Double.NaN;
-        assertThat(Numbers.parseDouble(nan)).isEqualTo(nan);
-    }
-
-    @Test
-    public void parseDouble_withStringValue_shouldReturnDouble() throws Exception {
-        assertThat(Numbers.parseDouble("0.01")).isEqualTo(0.01);
-        assertThat(Numbers.parseDouble("-1015")).isEqualTo(-1015);
-    }
-
-    @Test
-    public void parseDouble_withInvalidStringValue_shouldThrowClassCastException() throws Exception {
-        try {
-            Numbers.parseDouble("dog");
-            fail("Expected ClassCastException");
-        } catch (ClassCastException e) {
-            // pass
-        }
-
-        try {
-            Numbers.parseDouble("123a");
-            fail("Expected ClassCastException");
-        } catch (ClassCastException e) {
-            // pass
-        }
-    }
-
-    @Test
-    public void parseDouble_withInvalidObjectType_shouldThrowClassCastException() throws Exception {
-        try {
-            Numbers.parseDouble(mock(Activity.class));
-            fail("Expected ClassCastException");
-        } catch (ClassCastException e) {
-            // pass
-        }
-    }
-}
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java
deleted file mode 100644
index bf0ddd79..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java
+++ /dev/null
@@ -1,160 +0,0 @@
-package com.mopub.common.util;
-
-import android.app.Activity;
-import android.view.View;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static com.mopub.common.util.Reflection.MethodBuilder;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.fail;
-
-
-@RunWith(RobolectricTestRunner.class)
-public class ReflectionTest {
-    private Activity activity;
-    private View view;
-    private String string;
-    private MethodBuilder methodBuilder;
-
-    @Before
-    public void setup(){
-        activity = new Activity();
-        view = new View(activity);
-        string = "goat";
-    }
-
-    @Test
-    public void execute_withCorrectVoidMethodThatHasNoParameters_shouldPass() throws Exception {
-        methodBuilder = new MethodBuilder(activity, "finish");
-
-        methodBuilder.execute();
-
-        // pass
-    }
-
-    @Test
-    public void execute_withCorrectNonVoidMethodThatHasNoParameters_shouldPass() throws Exception {
-        methodBuilder = new MethodBuilder(string, "length");
-
-        int result = (Integer)methodBuilder.execute();
-
-        assertThat(result).isEqualTo(4);
-    }
-
-    @Test
-    public void execute_withCorrectVoidMethodThatHasParameters_shouldPass() throws Exception {
-        methodBuilder = new MethodBuilder(view, "buildDrawingCache");
-        methodBuilder.addParam(boolean.class, true);
-
-        methodBuilder.execute();
-
-        // pass
-    }
-
-    @Test
-    public void execute_withCorrectNonVoidMethodThatHasParameters_shouldPass() throws Exception {
-        methodBuilder = new MethodBuilder(string, "charAt");
-        methodBuilder.addParam(int.class, 2);
-
-        Object result = methodBuilder.execute();
-
-        assertThat(result).isEqualTo('a');
-    }
-
-    @Test
-    public void execute_withNoSuchMethod_shouldThrowException() throws Exception {
-        methodBuilder = new MethodBuilder(activity, "noSuchMethod");
-
-        try {
-            methodBuilder.execute();
-            fail("Should fail because method did not exist");
-        } catch (Exception e) {
-            // pass
-        }
-    }
-
-    @Test
-    public void execute_withCorrectVoidMethodThatHasParameters_withMissingParameters_shouldThrowException() throws Exception {
-        methodBuilder = new MethodBuilder(activity, "finishActivity");
-        // forget to add int requestCode parameter
-
-        try {
-            methodBuilder.execute();
-            fail("Should fail because we did not supply all the parameters");
-        } catch (Exception e) {
-            // pass
-        }
-    }
-
-    @Test
-    public void execute_withExistingMethodButIncorrectParameterTypes_shouldThrowException() throws Exception {
-        methodBuilder = new MethodBuilder(string, "concat");
-        methodBuilder.addParam(Object.class, "other");
-
-        try {
-            methodBuilder.execute();
-            fail("Should fail because there is no string.concat(Object) method");
-        } catch (Exception e) {
-            // pass
-        }
-    }
-
-    @Test
-    public void execute_withExistingMethodButSubclassedParameter_shouldPass() throws Exception {
-        methodBuilder = new MethodBuilder(string, "equals");
-        methodBuilder.addParam(Object.class, "cheese");
-
-        boolean result = (Boolean) methodBuilder.execute();
-
-        assertThat(result).isFalse();
-    }
-
-    @Test
-    public void execute_withCorrectMethodThatHasParameters_withIncorrectOrderingOfParameters_shouldThrowException() throws Exception {
-        methodBuilder = new MethodBuilder(string, "indexOf");
-        methodBuilder.addParam(int.class, 2);
-        methodBuilder.addParam(String.class, "g");
-
-        try {
-            methodBuilder.execute();
-            fail("Should fail because we expected string.indexOf(String, int) instead of string.indexOf(int, String)");
-        } catch (Exception e) {
-            // pass
-        }
-    }
-
-    @Test
-    public void execute_withNullInstanceOnInstanceMethod_shouldThrowException() throws Exception {
-        methodBuilder = new MethodBuilder(null, "length");
-
-        try {
-            methodBuilder.execute();
-            fail("Should fail because we are giving a null instance");
-        } catch (Exception e) {
-            // pass
-        }
-    }
-
-    @Test
-    public void execute_withStaticMethod_shouldPass() throws Exception {
-        methodBuilder = new MethodBuilder(null, "valueOf").setStatic(String.class).addParam(int.class, 20);
-
-        assertThat(methodBuilder.execute()).isEqualTo("20");
-    }
-
-    @Test
-    public void execute_withAccessibility_shouldRunPrivateMethods() throws Exception {
-        methodBuilder = new MethodBuilder(string, "indexOfSupplementary");
-        methodBuilder.addParam(int.class, (int)'a');
-        methodBuilder.addParam(int.class, 0);
-        methodBuilder.setAccessible();
-
-        int result = (Integer) methodBuilder.execute();
-
-        assertThat(result).isEqualTo(-1);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/StreamsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/StreamsTest.java
deleted file mode 100644
index 495e44e6..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/StreamsTest.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package com.mopub.common.util;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.ByteArrayInputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.fail;
-
-@RunWith(RobolectricTestRunner.class)
-public class StreamsTest {
-    @Test
-    public void copyStream_shouldCopyContentsOfOneStreamToAnother() throws Exception {
-        File inFile = new File("etc/expectedFile.jpg");
-        FileInputStream in = new FileInputStream(inFile);
-        File tempFile = File.createTempFile("foo", "bar");
-        FileOutputStream out = new FileOutputStream(tempFile);
-
-        Streams.copyContent(in, out);
-
-        assertThat(inFile.length()).isEqualTo(tempFile.length());
-    }
-
-    @Test
-    public void copyStream_withMaxBytes_belowThreshold_shouldCopyContentsOfOneStreamToAnother() throws Exception {
-        File inFile = new File("etc/expectedFile.jpg");
-        FileInputStream in = new FileInputStream(inFile);
-        File tempFile = File.createTempFile("foo", "bar");
-        FileOutputStream out = new FileOutputStream(tempFile);
-
-        Streams.copyContent(in, out, 1000000);
-
-        assertThat(inFile.length()).isEqualTo(tempFile.length());
-    }
-
-    @Test
-    public void copyStream_withMaxBytes_aboveThreshold_shouldThrowIOException() throws Exception {
-        InputStream in = new ByteArrayInputStream("this is a pretty long stream".getBytes());
-
-        File tempFile = File.createTempFile("foo", "bar");
-        FileOutputStream out = new FileOutputStream(tempFile);
-
-        try {
-            Streams.copyContent(in, out, 10);
-            fail("Expected IOException.");
-        } catch (IOException e) {
-            // pass
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/UtilsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/UtilsTest.java
deleted file mode 100644
index 384e40b8..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/UtilsTest.java
+++ /dev/null
@@ -1,27 +0,0 @@
-package com.mopub.common.util;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import java.util.HashSet;
-import java.util.Set;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-public class UtilsTest {
-    @Test
-    public void generateUniqueId_withMultipleInvocations_shouldReturnUniqueValues() throws Exception {
-        final int expectedIdCount = 100;
-
-        Set<Long> ids = new HashSet<Long>(expectedIdCount);
-        for (int i = 0; i < expectedIdCount; i++) {
-            final long id = Utils.generateUniqueId();
-            ids.add(id);
-        }
-
-        assertThat(ids).hasSize(expectedIdCount);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/VersionCodeTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/VersionCodeTest.java
deleted file mode 100644
index c42a0681..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/VersionCodeTest.java
+++ /dev/null
@@ -1,58 +0,0 @@
-package com.mopub.common.util;
-
-import android.os.Build;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-
-import static com.mopub.common.util.VersionCode.BASE;
-import static com.mopub.common.util.VersionCode.CUR_DEVELOPMENT;
-import static com.mopub.common.util.VersionCode.DONUT;
-import static com.mopub.common.util.VersionCode.FROYO;
-import static com.mopub.common.util.VersionCode.ICE_CREAM_SANDWICH;
-import static com.mopub.common.util.VersionCode.JELLY_BEAN;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(RobolectricTestRunner.class)
-public class VersionCodeTest {
-    @Test
-    public void currentApiLevel_shouldReflectActualApiLevel() throws Exception {
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", 4);
-        assertThat(VersionCode.currentApiLevel()).isEqualTo(DONUT);
-
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", 8);
-        assertThat(VersionCode.currentApiLevel()).isEqualTo(FROYO);
-
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", 14);
-        assertThat(VersionCode.currentApiLevel()).isEqualTo(ICE_CREAM_SANDWICH);
-    }
-
-    @Test
-    public void currentApiLevel_whenUnknownApiLevel_shouldReturnCurDevelopment() throws Exception {
-        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", 900);
-        assertThat(VersionCode.currentApiLevel()).isEqualTo(CUR_DEVELOPMENT);
-    }
-
-    @Test
-    public void isAtMost_shouldCompareVersions() throws Exception {
-        assertThat(ICE_CREAM_SANDWICH.isAtMost(BASE)).isFalse();
-        assertThat(ICE_CREAM_SANDWICH.isAtMost(JELLY_BEAN)).isTrue();
-        assertThat(ICE_CREAM_SANDWICH.isAtMost(ICE_CREAM_SANDWICH)).isTrue();
-    }
-
-    @Test
-    public void isAtLeast_shouldCompareVersions() throws Exception {
-        assertThat(ICE_CREAM_SANDWICH.isAtLeast(BASE)).isTrue();
-        assertThat(ICE_CREAM_SANDWICH.isAtLeast(JELLY_BEAN)).isFalse();
-        assertThat(ICE_CREAM_SANDWICH.isAtLeast(ICE_CREAM_SANDWICH)).isTrue();
-    }
-
-    @Test
-    public void isBelow_shouldCompareVersions() throws Exception {
-        assertThat(ICE_CREAM_SANDWICH.isBelow(BASE)).isFalse();
-        assertThat(ICE_CREAM_SANDWICH.isBelow(JELLY_BEAN)).isTrue();
-        assertThat(ICE_CREAM_SANDWICH.isBelow(ICE_CREAM_SANDWICH)).isFalse();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/ViewsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/ViewsTest.java
deleted file mode 100644
index 7f09ebcc..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/ViewsTest.java
+++ /dev/null
@@ -1,74 +0,0 @@
-package com.mopub.common.util;
-
-import android.app.Activity;
-import android.content.Context;
-import android.view.View;
-import android.widget.RelativeLayout;
-import android.widget.TextView;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(RobolectricTestRunner.class)
-public class ViewsTest {
-    private Context context;
-    private View subject;
-    private RelativeLayout parent;
-
-    @Before
-    public void setup() {
-        context = new Activity();
-        subject = new View(context);
-        parent = new RelativeLayout(context);
-    }
-
-    @Test
-    public void removeFromParent_shouldRemoveViewFromParent() throws Exception {
-        assertThat(parent.getChildCount()).isEqualTo(0);
-
-        parent.addView(subject);
-        assertThat(parent.getChildCount()).isEqualTo(1);
-        assertThat(subject.getParent()).isEqualTo(parent);
-
-        Views.removeFromParent(subject);
-
-        assertThat(parent.getChildCount()).isEqualTo(0);
-        assertThat(subject.getParent()).isNull();
-    }
-
-    @Test
-    public void removeFromParent_withMultipleChildren_shouldRemoveCorrectChild() throws Exception {
-        parent.addView(new TextView(context));
-
-        assertThat(parent.getChildCount()).isEqualTo(1);
-
-        parent.addView(subject);
-
-        assertThat(parent.getChildCount()).isEqualTo(2);
-
-        Views.removeFromParent(subject);
-        assertThat(parent.getChildCount()).isEqualTo(1);
-
-        assertThat(parent.getChildAt(0)).isInstanceOf(TextView.class);
-    }
-
-    @Test
-    public void removeFromParent_whenViewIsNull_shouldPass() throws Exception {
-        Views.removeFromParent(null);
-
-        // pass
-    }
-
-    @Test
-    public void removeFromParent_whenViewsParentIsNull_shouldPass() throws Exception {
-        assertThat(subject.getParent()).isNull();
-
-        Views.removeFromParent(subject);
-
-        // pass
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/VisibilityTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/VisibilityTest.java
deleted file mode 100644
index 0aa6f25d..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/VisibilityTest.java
+++ /dev/null
@@ -1,41 +0,0 @@
-package com.mopub.common.util;
-
-import android.view.View;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-public class VisibilityTest {
-    @Test
-    public void isScreenVisible_shouldOnlyReturnTrueForViewVisible() throws Exception {
-        assertThat(Visibility.isScreenVisible(View.VISIBLE)).isTrue();
-        assertThat(Visibility.isScreenVisible(View.INVISIBLE)).isFalse();
-        assertThat(Visibility.isScreenVisible(View.GONE)).isFalse();
-    }
-    
-    @Test
-    public void hasScreenVisibilityChanged_withIdenticalArguments_shouldReturnFalse() throws Exception {
-        assertThat(Visibility.hasScreenVisibilityChanged(View.VISIBLE, View.VISIBLE)).isFalse();
-        assertThat(Visibility.hasScreenVisibilityChanged(View.INVISIBLE, View.INVISIBLE)).isFalse();
-        assertThat(Visibility.hasScreenVisibilityChanged(View.GONE, View.GONE)).isFalse();
-    }
-
-    @Test
-    public void hasScreenVisibilityChanged_withTwoNonVisibleArguments_shouldReturnFalse() throws Exception {
-        assertThat(Visibility.hasScreenVisibilityChanged(View.INVISIBLE, View.GONE)).isFalse();
-        assertThat(Visibility.hasScreenVisibilityChanged(View.GONE, View.INVISIBLE)).isFalse();
-    }
-
-    @Test
-    public void hasScreenVisibilityChanged_withDifferentVisibilities_shouldReturnTrue() throws Exception {
-        assertThat(Visibility.hasScreenVisibilityChanged(View.VISIBLE, View.GONE)).isTrue();
-        assertThat(Visibility.hasScreenVisibilityChanged(View.GONE, View.VISIBLE)).isTrue();
-        assertThat(Visibility.hasScreenVisibilityChanged(View.VISIBLE, View.INVISIBLE)).isTrue();
-        assertThat(Visibility.hasScreenVisibilityChanged(View.INVISIBLE, View.VISIBLE)).isTrue();
-    }
-}
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowAsyncTasks.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowAsyncTasks.java
deleted file mode 100644
index 585c5323..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowAsyncTasks.java
+++ /dev/null
@@ -1,44 +0,0 @@
-package com.mopub.common.util.test.support;
-
-import android.os.AsyncTask;
-
-import com.mopub.common.util.AsyncTasks;
-
-import org.robolectric.annotation.Implementation;
-import org.robolectric.annotation.Implements;
-
-import java.util.Arrays;
-import java.util.List;
-
-@Implements(value = AsyncTasks.class, callThroughByDefault = false)
-public class ShadowAsyncTasks {
-    private static boolean sWasCalled;
-    private static AsyncTask<?, ?, ?> sAsyncTask;
-    private static List<?> sParams;
-
-    @Implementation
-    public static <P> void safeExecuteOnExecutor(AsyncTask<P, ?, ?> asyncTask, P... params)
-            throws IllegalArgumentException, IllegalStateException {
-        sWasCalled = true;
-        sAsyncTask = asyncTask;
-        sParams = Arrays.asList(params);
-    }
-
-    public static boolean wasCalled() {
-        return sWasCalled;
-    }
-
-    public static AsyncTask<?, ?, ?> getLatestAsyncTask() {
-        return sAsyncTask;
-    }
-
-    public static List<?> getLatestParams() {
-        return sParams;
-    }
-
-    public static void reset() {
-        sWasCalled = false;
-        sAsyncTask = null;
-        sParams = null;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestDateAndTime.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestDateAndTime.java
deleted file mode 100644
index 154d12d3..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestDateAndTime.java
+++ /dev/null
@@ -1,33 +0,0 @@
-package com.mopub.common.util.test.support;
-
-import com.mopub.common.util.DateAndTime;
-
-import java.util.Date;
-import java.util.TimeZone;
-
-public class TestDateAndTime extends DateAndTime {
-    private TimeZone timeZone = TimeZone.getTimeZone("GMT-7");
-    private Date now = new Date(1365553573L);
-
-    public static TestDateAndTime getInstance() {
-        return (TestDateAndTime) instance;
-    }
-
-    public void setNow(Date now) {
-        this.now = now;
-    }
-
-    public void setTimeZone(TimeZone timeZone) {
-        this.timeZone = timeZone;
-    }
-
-    @Override
-    public TimeZone internalLocalTimeZone() {
-        return timeZone;
-    }
-
-    @Override
-    public Date internalNow() {
-        return now;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestMethodBuilderFactory.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestMethodBuilderFactory.java
deleted file mode 100644
index 49d11389..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestMethodBuilderFactory.java
+++ /dev/null
@@ -1,24 +0,0 @@
-package com.mopub.common.util.test.support;
-
-import com.mopub.common.factories.MethodBuilderFactory;
-
-import static com.mopub.common.util.Reflection.MethodBuilder;
-import static org.mockito.Mockito.mock;
-
-public class TestMethodBuilderFactory extends MethodBuilderFactory {
-    private MethodBuilder mockMethodBuilder = mock(MethodBuilder.class);
-
-    public static MethodBuilder getSingletonMock() {
-        return getTestFactory().mockMethodBuilder;
-    }
-
-    private static TestMethodBuilderFactory getTestFactory() {
-        return ((TestMethodBuilderFactory) MethodBuilderFactory.instance);
-    }
-
-    @Override
-    public MethodBuilder internalCreate(Object object, String methodName) {
-        return mockMethodBuilder;
-    }
-}
-
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertGestureListenerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertGestureListenerTest.java
deleted file mode 100644
index 09ae4f1d..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertGestureListenerTest.java
+++ /dev/null
@@ -1,374 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.view.MotionEvent;
-import android.view.View;
-
-import com.mopub.common.AdReport;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.GestureUtils;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-
-import static com.mopub.mobileads.AdAlertGestureListener.ZigZagState.FAILED;
-import static com.mopub.mobileads.AdAlertGestureListener.ZigZagState.FINISHED;
-import static com.mopub.mobileads.AdAlertGestureListener.ZigZagState.GOING_LEFT;
-import static com.mopub.mobileads.AdAlertGestureListener.ZigZagState.GOING_RIGHT;
-import static com.mopub.mobileads.AdAlertGestureListener.ZigZagState.UNSET;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.stub;
-
-@RunWith(SdkTestRunner.class)
-public class AdAlertGestureListenerTest {
-    @Mock
-    private View mockView;
-    @Mock
-    private AdReport mockAdReport;
-    private AdAlertGestureListener subject;
-    private float threshold;
-    private static final float INITIAL_X = 20;
-    private static final float INITIAL_Y = 50;
-    private float savedX;
-    private float savedY;
-    private MotionEvent actionDown;
-    @Mock
-    private Context mockContext;
-
-    @Before
-    public void setup() {
-        stub(mockView.getContext()).toReturn(mockContext);
-
-        subject = new AdAlertGestureListener(mockView, mockAdReport);
-
-        savedX = INITIAL_X;
-        savedY = INITIAL_Y;
-        actionDown = GestureUtils.createActionDown(INITIAL_X, INITIAL_Y);
-
-        threshold = subject.getMinimumDipsInZigZag();
-    }
-
-    @Test
-    public void constructor_shouldSetThresholdToOneThirdOfViewsWidth() throws Exception {
-        stub(mockView.getWidth()).toReturn(150);
-        subject = new AdAlertGestureListener(mockView, mockAdReport);
-        assertThat(subject.getMinimumDipsInZigZag()).isEqualTo(50);
-    }
-
-    @Test
-    public void constructor_whenViewWidthIsWiderThanThreeTimesMaxThreshold_shouldSetThresholdTo100() throws Exception {
-        stub(mockView.getWidth()).toReturn(500);
-        subject = new AdAlertGestureListener(mockView, mockAdReport);
-        assertThat(subject.getMinimumDipsInZigZag()).isEqualTo(100);
-    }
-
-    @Test
-    public void constructor_whenViewWidthIs0_shouldSetThresholdTo100() throws Exception {
-        stub(mockView.getWidth()).toReturn(0);
-        subject = new AdAlertGestureListener(mockView, mockAdReport);
-        assertThat(subject.getMinimumDipsInZigZag()).isEqualTo(100);
-    }
-
-    @Test
-    public void shouldDefaultToNoZigZagsCompletedAnd100DipsInZigZag() throws Exception {
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(0);
-        assertThat(subject.getMinimumDipsInZigZag()).isEqualTo(100);
-        assertZigZagState(UNSET);
-    }
-
-    @Test
-    public void onScroll_withInitialRightMovement_shouldSetStateToGoingRight() throws Exception {
-        simulateScroll(INITIAL_X);
-        assertZigZagState(UNSET);
-
-        simulateScroll(INITIAL_X + 1);
-        assertZigZagState(GOING_RIGHT);
-    }
-
-    @Test
-    public void onScroll_withInitialLeftThenRightMovement_whenRightMovementPassesInitialX_shouldSetStateToGoingRight() throws Exception {
-        simulateScroll(INITIAL_X);
-        assertZigZagState(UNSET);
-
-        simulateScroll(INITIAL_X - 10);
-        assertZigZagState(UNSET);
-
-        simulateScroll(INITIAL_X - 5);
-        assertZigZagState(UNSET);
-
-        simulateScroll(INITIAL_X + 1);
-        assertZigZagState(GOING_RIGHT);
-    }
-
-    @Test
-    public void onScroll_withInitialLeftThenRightMovement_BeforeZigCompletes_MovesOutOfUpperYBounds_shouldSetStateToFailed() throws Exception {
-        simulateScroll(INITIAL_X);
-        assertZigZagState(UNSET);
-
-        simulateScroll(INITIAL_X + 10);
-        assertZigZagState(GOING_RIGHT);
-
-        simulateScroll(savedX, INITIAL_Y + 49);
-        assertZigZagState(GOING_RIGHT);
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(0);
-
-        simulateScroll(savedX, INITIAL_Y + 102);
-        assertZigZagState(FAILED);
-    }
-
-    @Test
-    public void onScroll_withInitialLeftThenRightMovement_BeforeZigCompletes_MovesOutOfLowerYBounds_shouldSetStateToFailed() throws Exception {
-        simulateScroll(INITIAL_X);
-        assertZigZagState(UNSET);
-
-        simulateScroll(INITIAL_X + 10);
-        assertZigZagState(GOING_RIGHT);
-
-        simulateScroll(savedX, INITIAL_Y - 49);
-        assertZigZagState(GOING_RIGHT);
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(0);
-
-        simulateScroll(savedX, INITIAL_Y - 101);
-        assertZigZagState(FAILED);
-    }
-
-    @Test
-    public void onScroll_withZigZagZigZagZigZagZig_BeforeNextZagCompletes_MovesOutOfUpperYBounds_shouldSetStateToFailed() throws Exception {
-        performZigZag();
-        performZigZag();
-        performZigZag();
-        performZig();
-
-        simulateScroll(savedX, INITIAL_Y + 49);
-        assertZigZagState(GOING_RIGHT);
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(3);
-
-        simulateScroll(savedX, INITIAL_Y + 101);
-        assertZigZagState(FAILED);
-    }
-
-    @Test
-    public void onScroll_withZigZagZigZagZigZagZig_BeforeNextZagCompletes_MovesOutOfLowerYBounds_shouldSetStateToFailed() throws Exception {
-        performZigZag();
-        performZigZag();
-        performZigZag();
-        performZig();
-
-        simulateScroll(savedX - 1, INITIAL_Y - 49);
-        assertZigZagState(GOING_LEFT);
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(3);
-
-        simulateScroll(savedX, INITIAL_Y - 101);
-        assertZigZagState(FAILED);
-    }
-
-    @Test
-    public void onScroll_withStateFailed_withAnyMotion_shouldStayFailed() throws Exception {
-        simulateScroll(savedX, INITIAL_Y + 49);
-        simulateScroll(savedX, INITIAL_Y + 101);
-        assertZigZagState(FAILED);
-
-        performZigZag();
-        assertZigZagState(FAILED);
-
-        performZig();
-        assertZigZagState(FAILED);
-
-        performZag();
-        assertZigZagState(FAILED);
-    }
-
-    @Test
-    public void onScroll_whenGoingRightPastThreshold_thenGoingLeft_shouldSetStateToGoingLeft() throws Exception {
-        simulateScroll(INITIAL_X);
-        simulateScroll(INITIAL_X + threshold);
-        simulateScroll(INITIAL_X + threshold + 2);
-        assertZigZagState(GOING_RIGHT);
-
-        simulateScroll(INITIAL_X + threshold - 1);
-        assertZigZagState(GOING_LEFT);
-    }
-
-    @Test
-    public void onScroll_withCompleteZigZag_shouldSetStateToGoingLeftAndNumberOfZigZagsIs1() throws Exception {
-        performZig();
-        assertZigZagState(GOING_RIGHT);
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(0);
-
-        performZag();
-        assertZigZagState(GOING_LEFT);
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(1);
-    }
-
-    @Test
-    public void onScroll_withZig_butBeforeZagIsComplete_shouldKeepStateGoingLeftButNotIncrementZigZags() throws Exception {
-        performZig();
-        assertZigZagState(GOING_RIGHT);
-
-        simulateScroll(INITIAL_X + threshold - 5);
-        assertZigZagState(GOING_LEFT);
-
-        // we turn back prematurely
-        simulateScroll(INITIAL_X + threshold);
-        assertZigZagState(GOING_LEFT);
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(0);
-    }
-
-    @Test
-    public void onScroll_withZigZagZig_butTurningLeftBeforeSecondZigIsComplete_shouldKeepStateGoingRightButNotReachRightThreshold() throws Exception {
-        performZigZag();
-        assertZigZagState(GOING_LEFT);
-
-        simulateScroll(INITIAL_X + 10);
-        assertZigZagState(GOING_RIGHT);
-        simulateScroll(INITIAL_X);
-        assertZigZagState(GOING_RIGHT);
-    }
-
-    @Test
-    public void checkReportAd_withZigZagThreeTimes_shouldNotAlertFlagAndSetStateToUnset() throws Exception {
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(1);
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(2);
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(3);
-
-        subject.finishGestureDetection();
-
-        assertThat(subject.getAdAlertReporter()).isNull();
-        assertZigZagState(UNSET);
-    }
-
-    @Test
-    public void onScroll_withFourZigZags_shouldSetStateToFinished() throws Exception {
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(1);
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(2);
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(3);
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(4);
-
-        assertZigZagState(FINISHED);
-    }
-
-    @Test
-    public void checkReportAd_withZigZagFourTimes_shouldAlertFlagAndSetStateToUnset() throws Exception {
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(1);
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(2);
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(3);
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(4);
-
-        subject.finishGestureDetection();
-
-        assertThat(subject.getAdAlertReporter()).isNotNull();
-        assertZigZagState(UNSET);
-    }
-
-    @Test
-    public void checkReportAd_withZigZagTenTimes_shouldAlertFlag_andNotIncrementZigZagCount_andSetStateToFinished() throws Exception {
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(1);
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(2);
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(3);
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(4);
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(4);
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(4);
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(4);
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(4);
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(4);
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(4);
-
-        subject.finishGestureDetection();
-
-        assertThat(subject.getAdAlertReporter()).isNotNull();
-        assertZigZagState(UNSET);
-    }
-
-    @Test
-    public void reset_shouldResetStateAndZigZagCount() throws Exception {
-        performZigZag();
-        performZig();
-
-        subject.reset();
-
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(0);
-        assertZigZagState(UNSET);
-    }
-
-    private void simulateScroll(float endX) {
-        simulateScroll(endX, savedY);
-    }
-
-    private void simulateScroll(float endX, float endY) {
-        final float stepSizeX = Math.signum(endX - savedX) * 0.5f;
-        final float stepSizeY = Math.signum(endY - savedY) * 0.5f;
-        float x = savedX;
-        float y = savedY;
-
-        if (areEqual(savedX, endX)) {
-            subject.onScroll(actionDown, GestureUtils.createActionMove(x, y), 0, 0);
-        } else if (savedX < endX) {
-            for (; x < endX; x += stepSizeX) {
-                subject.onScroll(actionDown, GestureUtils.createActionMove(x, y), 0, 0);
-            }
-        } else if (savedX > endX) {
-            for (; x > endX; x += stepSizeX) {
-                subject.onScroll(actionDown, GestureUtils.createActionMove(x, y), 0, 0);
-            }
-        }
-
-        if (areEqual(savedY, endY)) {
-            subject.onScroll(actionDown, GestureUtils.createActionMove(x, y), 0, 0);
-        } else if (savedY < endY) {
-            for (; y < endY; y += stepSizeY) {
-                subject.onScroll(actionDown, GestureUtils.createActionMove(x, y), 0, 0);
-            }
-        } else if (savedY > endY) {
-            for (; y > endY; y += stepSizeY) {
-                subject.onScroll(actionDown, GestureUtils.createActionMove(x, y), 0, 0);
-            }
-        }
-
-        savedX = endX;
-        savedY = endY;
-    }
-
-    private void performZig() {
-        simulateScroll(savedX + threshold + 1);
-    }
-
-    private void performZag() {
-        simulateScroll(savedX - threshold - 1);
-    }
-
-    private void performZigZag() {
-        performZig();
-        performZag();
-    }
-
-    private boolean areEqual(float a, float b) {
-        return (Math.abs(a - b) < 0.01f);
-    }
-
-    private void assertZigZagState(AdAlertGestureListener.ZigZagState state) {
-        assertThat(subject.getCurrentZigZagState()).isEqualTo(state);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
deleted file mode 100644
index 89cf32d8..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
+++ /dev/null
@@ -1,250 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.graphics.Bitmap;
-import android.net.Uri;
-import android.view.View;
-import android.widget.TextView;
-
-import com.mopub.common.AdReport;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.test.support.TestDateAndTime;
-
-import org.junit.Before;
-import org.junit.Ignore;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-
-import java.io.File;
-import java.io.FileOutputStream;
-import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.Date;
-import java.util.Locale;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class AdAlertReporterTest {
-    private final static String EMAIL_ADDRESS = "creative-review@mopub.com";
-    private AdAlertReporter subject;
-    @Mock
-    private AdReport mockAdReport;
-    @Mock
-    private Context mockContext;
-    @Mock
-    private View mockView;
-    private Intent emailIntent;
-    private Bitmap bitmap;
-    private ArrayList<Uri> emailAttachments;
-    private Date now;
-
-    @Before
-    public void setup() {
-        bitmap = Bitmap.createBitmap(10, 10, Bitmap.Config.ARGB_8888);
-
-        stub(mockView.getRootView()).toReturn(mockView);
-        stub(mockView.getDrawingCache()).toReturn(bitmap);
-
-        now = new Date();
-        TestDateAndTime.getInstance().setNow(now);
-    }
-
-    @Test
-    public void constructor_shouldCreateSendToIntentWithEmailAddress() throws Exception {
-        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
-        emailIntent = subject.getEmailIntent();
-
-        assertThat(emailIntent.getAction()).isEqualTo(Intent.ACTION_SEND_MULTIPLE);
-        assertThat(emailIntent.getType()).isEqualTo("plain/text");
-        assertThat(emailIntent.getDataString()).isEqualTo("mailto:");
-        assertThat(emailIntent.getStringArrayExtra(Intent.EXTRA_EMAIL)[0]).isEqualTo(EMAIL_ADDRESS);
-    }
-
-    @Test
-    public void constructor_shouldCreateIntentWithDatestampInSubject() throws Exception {
-        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
-        emailIntent = subject.getEmailIntent();
-
-        String emailSubject = emailIntent.getStringExtra(Intent.EXTRA_SUBJECT);
-        String subjectParts[] = emailSubject.split(" - ");
-
-        String title = subjectParts[0];
-        assertThat(title).isEqualTo("New creative violation report");
-
-        String dateTimeString = subjectParts[1];
-        SimpleDateFormat dateFormat = new SimpleDateFormat("M/d/yy hh:mm:ss a z", Locale.US);
-
-        Date date = dateFormat.parse(dateTimeString);
-
-        assertThat(date.getTime() - now.getTime()).isLessThan(10000);
-    }
-
-    @Test
-    public void constructor_shouldCreateIntentWithImageStringAndParametersAndResponseInBody() throws Exception {
-        TextView textView = mock(TextView.class);
-        Bitmap sampleBitmap = Bitmap.createBitmap(10, 10, Bitmap.Config.ALPHA_8);
-        stub(textView.getDrawingCache()).toReturn(sampleBitmap);
-        stub(mockView.getRootView()).toReturn(textView);
-
-        stub(mockAdReport.toString()).toReturn("Ad Report data - this is a long list of newlined params.");
-        stub(mockAdReport.getResponseString()).toReturn("Test ad string.");
-        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
-
-        emailIntent = subject.getEmailIntent();
-        String emailSubject = emailIntent.getStringExtra(Intent.EXTRA_TEXT);
-        String bodyParts[] = emailSubject.split("\n=================\n");
-        String parameters = bodyParts[0];
-        String response = bodyParts[1];
-        String imageString = bodyParts[2];
-
-        assertThat(bodyParts.length).isEqualTo(3);
-        //this string is the JPEG encoded version
-        assertThat(parameters).isEqualTo(subject.getParameters());
-        assertThat(response).isEqualTo(subject.getResponse());
-        assertThat(imageString).isEqualTo("Qml0bWFwICgxMCB4IDEwKSBjcmVhdGVkIGZyb20gQml0bWFwIG9iamVjdCBjb21wcmVzc2VkIGFz\nIEpQRUcgd2l0aCBxdWFsaXR5IDI1\n");
-    }
-
-    @Test
-    public void constructor_shouldAddBitmapToAttachmentArray() throws Exception {
-        stub(mockContext.getFilesDir()).toReturn(new File("filesDir"));
-        stub(mockContext.openFileOutput(any(String.class), any(int.class))).toReturn(mock(FileOutputStream.class));
-        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
-
-        emailAttachments = subject.getEmailAttachments();
-        Uri fileUri = Uri.fromFile(new File("filesDir/mp_adalert_screenshot.png"));
-
-        assertThat(emailAttachments).contains(fileUri);
-    }
-
-    @Test
-    public void constructor_shouldAddParametersTextFileToAttachmentArray() throws Exception {
-        stub(mockContext.getFilesDir()).toReturn(new File("filesDir"));
-        stub(mockContext.openFileOutput(any(String.class), any(int.class))).toReturn(mock(FileOutputStream.class));
-        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
-
-        emailAttachments = subject.getEmailAttachments();
-        Uri fileUri = Uri.fromFile(new File("filesDir/mp_adalert_parameters.txt"));
-
-        assertThat(emailAttachments).contains(fileUri);
-    }
-
-    @Test
-    public void constructor_whenAdReportIsNull_shouldReturnEmptyString() throws Exception {
-        subject = new AdAlertReporter(mockContext, mockView, null);
-
-        assertThat(subject.getParameters()).isEmpty();
-        assertThat(subject.getResponse()).isEmpty();
-    }
-
-    @Test
-    public void constructor_shouldSetCorrectResponseString() throws Exception {
-        String expectedResponse = "response";
-
-        stub(mockAdReport.getResponseString()).toReturn(expectedResponse);
-        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
-
-        assertThat(subject.getResponse()).isEqualTo(expectedResponse);
-    }
-
-    @Test
-    public void constructor_shouldAddMarkupTextFileToAttachmentArray() throws Exception {
-        stub(mockAdReport.getResponseString()).toReturn("anything!");
-        stub(mockContext.getFilesDir()).toReturn(new File("filesDir"));
-        stub(mockContext.openFileOutput(any(String.class), any(int.class))).toReturn(mock(FileOutputStream.class));
-        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
-
-        emailAttachments = subject.getEmailAttachments();
-        Uri fileUri = Uri.fromFile(new File("filesDir/mp_adalert_markup.html"));
-
-        assertThat(emailAttachments).contains(fileUri);
-    }
-
-    @Test
-    public void send_shouldAddAttachmentsToIntent() throws Exception {
-        stub(mockContext.getFilesDir()).toReturn(new File("filesDir"));
-        stub(mockContext.openFileOutput(any(String.class), any(int.class))).toReturn(mock(FileOutputStream.class));
-        stub(mockAdReport.getResponseString()).toReturn("anything!");
-        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
-        subject.send();
-
-        emailIntent = subject.getEmailIntent();
-        ArrayList<Uri> attachments = emailIntent.getParcelableArrayListExtra(Intent.EXTRA_STREAM);
-
-        assertThat(attachments.size()).isEqualTo(3);
-        assertThat(attachments).contains(Uri.fromFile(new File("filesDir/mp_adalert_screenshot.png")));
-        assertThat(attachments).contains(Uri.fromFile(new File("filesDir/mp_adalert_parameters.txt")));
-        assertThat(attachments).contains(Uri.fromFile(new File("filesDir/mp_adalert_markup.html")));
-    }
-
-    @Test
-    public void send_shouldCreateEmailChooserIntent() throws Exception {
-
-        subject = new AdAlertReporter(Robolectric.buildActivity(Activity.class).create().get(), mockView, mockAdReport);
-        subject.send();
-
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_CHOOSER);
-        assertThat(intent.getStringExtra(Intent.EXTRA_TITLE)).isEqualTo("Send Email...");
-        assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-    }
-
-    @Ignore("pending")
-    @Test
-    public void getScreenshot_whenIsDrawingCacheEnabled_shouldKeepDrawingCacheEnabled() throws Exception {
-        reset(mockView);
-        stub(mockView.getRootView()).toReturn(mockView);
-        stub(mockView.isDrawingCacheEnabled()).toReturn(true);
-
-        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
-
-        verify(mockView, never()).setDrawingCacheEnabled(false);
-    }
-
-    @Ignore("pending")
-    @Test
-    public void getScreenshot_whenIsDrawingCacheDisabled_shouldKeepDrawingCacheDisabled() throws Exception {
-        reset(mockView);
-        stub(mockView.getRootView()).toReturn(mockView);
-        stub(mockView.isDrawingCacheEnabled()).toReturn(false);
-
-        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
-
-        verify(mockView).setDrawingCacheEnabled(false);
-    }
-
-    @Test
-    public void getScreenshot_whenViewIsNull_shouldPass() throws Exception {
-        subject = new AdAlertReporter(mockContext, null, mockAdReport);
-
-        // pass
-    }
-
-    @Test
-    public void getScreenshot_whenRootViewIsNull_shouldPass() throws Exception {
-        stub(mockView.getRootView()).toReturn(null);
-
-        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
-
-        // pass
-    }
-
-    @Test
-    public void getScreenshot_whenRootViewDrawingCacheIsNull_shouldPass() throws Exception {
-        stub(mockView.getDrawingCache()).toReturn(null);
-
-        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
-
-        // pass
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoaderTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoaderTest.java
deleted file mode 100644
index 8f8639da..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoaderTest.java
+++ /dev/null
@@ -1,140 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.network.AdResponse;
-
-import org.fest.assertions.core.Condition;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.anyMapOf;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.verifyZeroInteractions;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-public class AdLoaderTest {
-
-    @Mock
-    private AdViewController adViewController;
-    @Mock
-    private MoPubView moPubView;
-    private AdResponse adResponse;
-    private Map<String, String> serverExtras;
-
-    @Before
-    public void setup() {
-        adResponse = new AdResponse.Builder()
-                .setResponseBody("<html></html>")
-                .setClickTrackingUrl("clickthrough")
-                .setRedirectUrl("redirect")
-                .setScrollable(false)
-                .build();
-        serverExtras = new HashMap<String, String>();
-        serverExtras.put("test", "hi");
-        when(adViewController.getMoPubView()).thenReturn(moPubView);
-    }
-
-    @Test
-    public void fromAdResponse_whenCustomEvent_shouldCreateAdLoadTask() throws Exception {
-        adResponse = adResponse.toBuilder()
-                .setAdType("custom")
-                .setCustomEventClassName("custom event name")
-                .setServerExtras(serverExtras)
-                .build();
-
-
-        AdLoader.CustomEventAdLoader customEventTask = (AdLoader.CustomEventAdLoader) AdLoader.fromAdResponse(adResponse, adViewController);
-        assertThat(customEventTask).isNotNull();
-        assertThat(customEventTask.getServerExtras()).isEqualTo(serverExtras);
-    }
-
-
-    @Test
-    public void fromAdResponse_whenHtml_shouldBeModernAdLoadTask() {
-        adResponse = adResponse.toBuilder()
-                .setAdType("html")
-                .setCustomEventClassName("com.mopub.mobileads.HtmlBanner")
-                .setServerExtras(serverExtras)
-                .build();
-
-        AdLoader.CustomEventAdLoader customEventTask = (AdLoader.CustomEventAdLoader) AdLoader.fromAdResponse(adResponse, adViewController);
-        assertThat(customEventTask).isNotNull();
-        assertThat(customEventTask.getServerExtras()).has(new Condition<Map<String, String>>() {
-            @Override
-            public boolean matches(final Map<String, String> stringStringMap) {
-                return stringStringMap.containsKey("test");
-            }
-        });
-    }
-
-    @Test
-    public void fromAdResponse_whenCustomMethod_shouldReturnNull() {
-        adResponse = adResponse.toBuilder()
-                .setCustomEventClassName(null)
-                .build();
-
-        assertThat(AdLoader.fromAdResponse(adResponse, adViewController)).isNull();
-    }
-
-    @Test
-    public void load_shouldCallAdViewController() {
-        adResponse = adResponse.toBuilder()
-                .setAdType("custom")
-                .setCustomEventClassName("custom event name")
-                .setServerExtras(serverExtras)
-                .build();
-
-
-        AdLoader.CustomEventAdLoader customEventTask = (AdLoader.CustomEventAdLoader) AdLoader.fromAdResponse(adResponse, adViewController);
-
-        customEventTask.load();
-        verify(adViewController).getMoPubView();
-        verify(moPubView).loadCustomEvent(eq("custom event name"), anyMapOf(String.class, String.class));
-    }
-
-    @Test
-    public void load_controllerDestroyed_shouldDoNothing() {
-        when(adViewController.isDestroyed()).thenReturn(true);
-
-        adResponse = adResponse.toBuilder()
-                .setAdType("custom")
-                .setCustomEventClassName("custom event name")
-                .setServerExtras(serverExtras)
-                .build();
-
-
-        AdLoader.CustomEventAdLoader customEventTask = (AdLoader.CustomEventAdLoader) AdLoader.fromAdResponse(adResponse, adViewController);
-
-        customEventTask.load();
-        verify(adViewController).isDestroyed();
-        verifyNoMoreInteractions(adViewController);
-        verifyZeroInteractions(moPubView);
-    }
-
-    @Test
-    public void load_withNullMoPubView_shouldDoNothing() throws Exception {
-        when(adViewController.getMoPubView()).thenReturn(null);
-
-        adResponse = adResponse.toBuilder()
-                .setAdType("custom")
-                .setCustomEventClassName("custom event name")
-                .setServerExtras(serverExtras)
-                .build();
-
-        AdLoader.CustomEventAdLoader customEventTask = (AdLoader.CustomEventAdLoader) AdLoader.fromAdResponse(adResponse, adViewController);
-
-        customEventTask.load();
-
-        verify(adViewController).getMoPubView();
-        verifyZeroInteractions(moPubView);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdRequestStatusMappingTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdRequestStatusMappingTest.java
deleted file mode 100644
index b82dcbe8..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdRequestStatusMappingTest.java
+++ /dev/null
@@ -1,127 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-public class AdRequestStatusMappingTest {
-    private AdRequestStatusMapping subject;
-    private String key1;
-
-    @Before
-    public void setUp() {
-        subject = new AdRequestStatusMapping();
-        key1 = "adUnitId1";
-    }
-
-    @Test
-    public void markFail_shouldNullOutAllValues() {
-        subject.markFail(key1);
-
-        assertThat(subject.getFailoverUrl(key1)).isNull();
-        assertThat(subject.getImpressionTrackerUrlString(key1)).isNull();
-        assertThat(subject.getClickTrackerUrlString(key1)).isNull();
-
-        assertThat(subject.canPlay(key1)).isFalse();
-        assertThat(subject.isLoading(key1)).isFalse();
-    }
-
-    @Test
-    public void markLoading_shouldNotUpdateUrls_shouldSetIsLoadingTrue() {
-        subject.markLoading(key1);
-
-        assertThat(subject.getFailoverUrl(key1)).isNull();
-        assertThat(subject.getImpressionTrackerUrlString(key1)).isNull();
-        assertThat(subject.getClickTrackerUrlString(key1)).isNull();
-
-        assertThat(subject.canPlay(key1)).isFalse();
-        assertThat(subject.isLoading(key1)).isTrue();
-    }
-
-    @Test
-    public void markLoaded_shouldUpdateUrls_shouldSetCanPlayTrue() {
-        subject.markLoaded(key1, "fail", "imp", "click");
-
-        assertThat(subject.getFailoverUrl(key1)).isEqualTo("fail");
-        assertThat(subject.getImpressionTrackerUrlString(key1)).isEqualTo("imp");
-        assertThat(subject.getClickTrackerUrlString(key1)).isEqualTo("click");
-
-        assertThat(subject.canPlay(key1)).isTrue();
-        assertThat(subject.isLoading(key1)).isFalse();
-    }
-
-    @Test
-    public void markLoaded_withNullValues_shouldUpdateUrls_shouldSetCanPlayTrue() {
-        subject.markLoaded(key1, null, null, null);
-
-        assertThat(subject.getFailoverUrl(key1)).isNull();
-        assertThat(subject.getImpressionTrackerUrlString(key1)).isNull();
-        assertThat(subject.getClickTrackerUrlString(key1)).isNull();
-
-        assertThat(subject.canPlay(key1)).isTrue();
-        assertThat(subject.isLoading(key1)).isFalse();
-    }
-
-    @Test
-    public void markPlayed_afterLoaded_shouldKeepExistingUrls_shouldSetCanPlayFalse() {
-        subject.markLoaded(key1, "fail", "imp", "click");
-        subject.markPlayed(key1);
-
-        assertThat(subject.getFailoverUrl(key1)).isEqualTo("fail");
-        assertThat(subject.getImpressionTrackerUrlString(key1)).isEqualTo("imp");
-        assertThat(subject.getClickTrackerUrlString(key1)).isEqualTo("click");
-
-        assertThat(subject.canPlay(key1)).isFalse();
-        assertThat(subject.isLoading(key1)).isFalse();
-    }
-
-    @Test
-    public void markPlayed_beforeLoaded_shouldSetUrlsNull_shouldSetCanPlayFalse() {
-        subject.markPlayed(key1);
-
-        assertThat(subject.getFailoverUrl(key1)).isNull();
-        assertThat(subject.getImpressionTrackerUrlString(key1)).isNull();
-        assertThat(subject.getClickTrackerUrlString(key1)).isNull();
-
-        assertThat(subject.canPlay(key1)).isFalse();
-        assertThat(subject.isLoading(key1)).isFalse();
-    }
-
-    @Test
-    public void clearImpression_shouldResetImpressionUrl() {
-        subject.markLoaded(key1, "fail", "imp", "click");
-        subject.clearImpressionUrl(key1);
-
-        assertThat(subject.getFailoverUrl(key1)).isEqualTo("fail");
-        assertThat(subject.getImpressionTrackerUrlString(key1)).isNull();
-        assertThat(subject.getClickTrackerUrlString(key1)).isEqualTo("click");
-    }
-
-    @Test
-    public void clearclick_shouldResetClickurl() {
-        subject.markLoaded(key1, "fail", "imp", "click");
-        subject.clearClickUrl(key1);
-
-        assertThat(subject.getFailoverUrl(key1)).isEqualTo("fail");
-        assertThat(subject.getImpressionTrackerUrlString(key1)).isEqualTo("imp");
-        assertThat(subject.getClickTrackerUrlString(key1)).isNull();
-    }
-
-    @Test
-    public void allAccessors_withInvalidKey_shouldReturnDefaultsAndNotThrowExceptions() {
-        assertThat(subject.getFailoverUrl(key1)).isNull();
-        assertThat(subject.getImpressionTrackerUrlString(key1)).isNull();
-        assertThat(subject.getClickTrackerUrlString(key1)).isNull();
-
-        assertThat(subject.canPlay(key1)).isFalse();
-        assertThat(subject.isLoading(key1)).isFalse();
-
-        subject.clearImpressionUrl(key1);
-        subject.clearClickUrl(key1);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
deleted file mode 100644
index 1461d2c8..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
+++ /dev/null
@@ -1,132 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-
-import com.mopub.common.AdFormat;
-import com.mopub.common.AdType;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.ResponseHeader;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import java.util.HashMap;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
-
-@RunWith(SdkTestRunner.class)
-public class AdTypeTranslatorTest {
-    private String customEventName;
-    private MoPubView moPubView;
-    private MoPubInterstitial.MoPubInterstitialView moPubInterstitialView;
-    private Context context;
-    HashMap<String, String> headers;
-
-    @Before
-    public void setUp() throws Exception {
-        moPubView = mock(MoPubView.class);
-        moPubInterstitialView = mock(MoPubInterstitial.MoPubInterstitialView.class);
-
-        context = new Activity();
-        stub(moPubView.getContext()).toReturn(context);
-        stub(moPubInterstitialView.getContext()).toReturn(context);
-
-        headers = new HashMap<String, String>();
-    }
-
-    @Test
-    public void getCustomEventName_shouldBeGoogleBanner() {
-        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.BANNER, "admob_native", null, headers);
-
-        assertThat(customEventName).isEqualTo("com.mopub.mobileads.GooglePlayServicesBanner");
-    }
-
-    @Test
-    public void getCustomEventName_shouldBeGoogleInterstitial() {
-        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.BANNER, "interstitial", "admob_full", headers);
-
-        assertThat(customEventName).isEqualTo("com.mopub.mobileads.GooglePlayServicesInterstitial");
-    }
-
-    @Test
-    public void getCustomEventName_shouldBeMillenialBanner() {
-        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.BANNER, "millennial_native", null, headers);
-
-        assertThat(customEventName).isEqualTo("com.mopub.mobileads.MillennialBanner");
-    }
-
-    @Test
-    public void getCustomEventName_shouldBeMillennialIntersitial() {
-        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.INTERSTITIAL, "interstitial", "millennial_full", headers);
-
-        assertThat(customEventName).isEqualTo("com.mopub.mobileads.MillennialInterstitial");
-    }
-
-    @Test
-    public void getCustomEventName_shouldBeMraidBanner() {
-        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.BANNER, AdType.MRAID, null, headers);
-
-        assertThat(customEventName).isEqualTo("com.mopub.mraid.MraidBanner");
-    }
-
-    @Test
-    public void getCustomEventName_shouldBeMraidInterstitial() {
-        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.INTERSTITIAL, AdType.MRAID, null, headers);
-
-        assertThat(customEventName).isEqualTo("com.mopub.mraid.MraidInterstitial");
-    }
-
-    @Test
-    public void getCustomEventName_shouldBeHtmlBanner() {
-        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.BANNER, "html", null, headers);
-
-        assertThat(customEventName).isEqualTo("com.mopub.mobileads.HtmlBanner");
-    }
-
-    @Test
-    public void getCustomEventName_shouldBeHtmlInterstitial() {
-        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.INTERSTITIAL, "html", null, headers);
-
-        assertThat(customEventName).isEqualTo("com.mopub.mobileads.HtmlInterstitial");
-    }
-
-    @Test
-    public void getCustomEventName_shouldBeVastInterstitial() {
-        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.INTERSTITIAL, "interstitial", "vast", headers);
-
-        assertThat(customEventName).isEqualTo("com.mopub.mobileads.VastVideoInterstitial");
-    }
-
-    @Test
-    public void getCustomEventName_shouldBeCustomClassName() {
-        headers.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "com.example.CustomClass");
-        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.BANNER, AdType.CUSTOM, null, headers);
-
-        assertThat(customEventName).isEqualTo("com.example.CustomClass");
-    }
-
-    @Test
-    public void getCustomEventName_whenNameNotInHeaders_shouldBeNull() {
-        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.BANNER, AdType.CUSTOM, null, headers);
-
-        assertThat(customEventName).isNull();
-    }
-
-    @Test
-    public void getCustomEventName_withNativeFormat_shouldBeMoPubNative() {
-        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.NATIVE, AdType.NATIVE, null, headers);
-
-        assertThat(customEventName).isEqualTo("com.mopub.nativeads.MoPubCustomEventNative");
-    }
-
-    @Test
-    public void getCustomEventName_whenInvalidAdTypeAndInvalidFullAdType_shouldReturnNull() {
-        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.BANNER, "garbage", "garbage",
-                headers);
-        assertThat(customEventName).isNull();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
deleted file mode 100644
index 1a7e4d27..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
+++ /dev/null
@@ -1,482 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.net.ConnectivityManager;
-import android.view.Gravity;
-import android.view.View;
-import android.widget.FrameLayout;
-
-import com.mopub.common.AdFormat;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.Reflection;
-import com.mopub.common.util.test.support.TestMethodBuilderFactory;
-import com.mopub.mobileads.test.support.ThreadUtils;
-import com.mopub.network.AdRequest;
-import com.mopub.network.AdResponse;
-import com.mopub.network.MoPubNetworkError;
-import com.mopub.network.MoPubRequestQueue;
-import com.mopub.network.Networking;
-import com.mopub.volley.Request;
-import com.mopub.volley.VolleyError;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-
-import edu.emory.mathcs.backport.java.util.Collections;
-
-import static com.mopub.common.VolleyRequestMatcher.isUrl;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.argThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyZeroInteractions;
-import static org.mockito.Mockito.when;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(SdkTestRunner.class)
-public class AdViewControllerTest {
-    private AdViewController subject;
-    @Mock
-    private MoPubView mockMoPubView;
-    @Mock
-    private MoPubRequestQueue mockRequestQueue;
-    private Reflection.MethodBuilder methodBuilder;
-    
-    private AdResponse response;
-
-    @Before
-    public void setup() {
-        Activity context = Robolectric.buildActivity(Activity.class).create().get();
-        shadowOf(context).grantPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE);
-
-        when(mockMoPubView.getAdFormat()).thenReturn(AdFormat.BANNER);
-        when(mockMoPubView.getContext()).thenReturn(context);
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-
-        subject = new AdViewController(context, mockMoPubView);
-
-        methodBuilder = TestMethodBuilderFactory.getSingletonMock();
-        reset(methodBuilder);
-        response = new AdResponse.Builder()
-                .setCustomEventClassName("customEvent")
-                .setClickTrackingUrl("clickUrl")
-                .setImpressionTrackingUrl("impressionUrl")
-                .setRedirectUrl("redirectUrl")
-                .setScrollable(false)
-                .setDimensions(320, 50)
-                .setAdType("html")
-                .setFailoverUrl("failUrl")
-                .setResponseBody("testResponseBody")
-                .setServerExtras(Collections.<String, String>emptyMap())
-                .build();
-    }
-
-    @After
-    public void tearDown() throws Exception {
-        reset(methodBuilder);
-    }
-
-    @Test
-    public void cleanup_shouldNotHoldViewOrUrlGenerator() {
-        subject.cleanup();
-
-        assertThat(subject.getMoPubView()).isNull();
-        assertThat(subject.generateAdUrl()).isNull();
-    }
-    
-    @Test
-    public void adDidFail_shouldScheduleRefreshTimer_shouldCallMoPubViewAdFailed() throws Exception {
-        Robolectric.pauseMainLooper();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-
-        subject.adDidFail(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-        verify(mockMoPubView).adFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-    }
-
-    @Test
-    public void adDidFail_withNullMoPubView_shouldNotScheduleRefreshTimer_shouldNotCallMoPubViewAdFailed() throws Exception {
-        Robolectric.pauseMainLooper();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-
-        // This sets the MoPubView to null
-        subject.cleanup();
-        subject.adDidFail(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-        verify(mockMoPubView, never()).adFailed(any(MoPubErrorCode.class));
-    }
-    
-
-    @Test
-    public void scheduleRefreshTimer_shouldNotScheduleIfRefreshTimeIsNull() throws Exception {
-        response = response.toBuilder().setRefreshTimeMilliseconds(null).build();
-        subject.onAdLoadSuccess(response);
-        Robolectric.pauseMainLooper();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-
-        subject.scheduleRefreshTimerIfEnabled();
-
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-    }
-
-    @Test
-    public void scheduleRefreshTimer_shouldNotScheduleIfRefreshTimeIsZero() {
-        response = response.toBuilder().setRefreshTimeMilliseconds(0).build();
-        subject.onAdLoadSuccess(response);
-        Robolectric.pauseMainLooper();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-
-        subject.scheduleRefreshTimerIfEnabled();
-
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-    }
-
-    @Test
-    public void scheduleRefreshTimerIfEnabled_shouldCancelOldRefreshAndScheduleANewOne() throws Exception {
-        response = response.toBuilder().setRefreshTimeMilliseconds(30).build();
-        subject.onAdLoadSuccess(response);
-        Robolectric.pauseMainLooper();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-
-        subject.scheduleRefreshTimerIfEnabled();
-
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-
-        subject.scheduleRefreshTimerIfEnabled();
-
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-    }
-
-    @Test
-    public void scheduleRefreshTimer_shouldNotScheduleRefreshIfAutorefreshIsOff() throws Exception {
-        response = response.toBuilder().setRefreshTimeMilliseconds(30).build();
-        subject.onAdLoadSuccess(response);
-
-        Robolectric.pauseMainLooper();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-
-        subject.forceSetAutorefreshEnabled(false);
-
-        subject.scheduleRefreshTimerIfEnabled();
-
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-    }
-
-    @Test
-    public void scheduleRefreshTimer_whenAdViewControllerNotConfiguredByResponse_shouldHaveDefaultRefreshTime() throws Exception {
-        Robolectric.pauseMainLooper();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-
-        subject.scheduleRefreshTimerIfEnabled();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-
-        Robolectric.idleMainLooper(AdViewController.DEFAULT_REFRESH_TIME_MILLISECONDS - 1);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-
-        Robolectric.idleMainLooper(1);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-    }
-
-    @Test
-    public void forceSetAutoRefreshEnabled_shouldSetAutoRefreshSetting() throws Exception {
-        assertThat(subject.getAutorefreshEnabled()).isTrue();
-
-        subject.forceSetAutorefreshEnabled(false);
-        assertThat(subject.getAutorefreshEnabled()).isFalse();
-
-        subject.forceSetAutorefreshEnabled(true);
-        assertThat(subject.getAutorefreshEnabled()).isTrue();
-    }
-
-    @Test
-    public void pauseRefresh_shouldDisableAutorefresh() throws Exception {
-        assertThat(subject.getAutorefreshEnabled()).isTrue();
-
-        subject.pauseRefresh();
-        assertThat(subject.getAutorefreshEnabled()).isFalse();
-    }
-
-    @Test
-    public void unpauseRefresh_afterUnpauseRefresh_shouldEnableRefresh() throws Exception {
-        subject.pauseRefresh();
-
-        subject.unpauseRefresh();
-        assertThat(subject.getAutorefreshEnabled()).isTrue();
-    }
-
-    @Test
-    public void pauseAndUnpauseRefresh_withRefreshForceDisabled_shouldAlwaysHaveRefreshFalse() throws Exception {
-        subject.forceSetAutorefreshEnabled(false);
-        assertThat(subject.getAutorefreshEnabled()).isFalse();
-
-        subject.pauseRefresh();
-        assertThat(subject.getAutorefreshEnabled()).isFalse();
-
-        subject.unpauseRefresh();
-        assertThat(subject.getAutorefreshEnabled()).isFalse();
-    }
-
-    @Test
-    public void enablingAutoRefresh_afterLoadAd_shouldScheduleNewRefreshTimer() throws Exception {
-
-        final AdViewController adViewControllerSpy = spy(subject);
-
-        adViewControllerSpy.loadAd();
-        adViewControllerSpy.forceSetAutorefreshEnabled(true);
-        verify(adViewControllerSpy).scheduleRefreshTimerIfEnabled();
-    }
-
-    @Test
-    public void enablingAutoRefresh_withoutCallingLoadAd_shouldNotScheduleNewRefreshTimer() throws Exception {
-        final AdViewController adViewControllerSpy = spy(subject);
-
-        adViewControllerSpy.forceSetAutorefreshEnabled(true);
-        verify(adViewControllerSpy, never()).scheduleRefreshTimerIfEnabled();
-    }
-
-    @Test
-    public void disablingAutoRefresh_shouldCancelRefreshTimers() throws Exception {
-        response = response.toBuilder().setRefreshTimeMilliseconds(30).build();
-        subject.onAdLoadSuccess(response);
-        Robolectric.pauseMainLooper();
-
-        subject.loadAd();
-        subject.forceSetAutorefreshEnabled(true);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-
-        subject.forceSetAutorefreshEnabled(false);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-    }
-
-    @Test
-    public void trackImpression_shouldAddToRequestQueue() throws Exception {
-        subject.onAdLoadSuccess(response);
-        subject.trackImpression();
-
-        verify(mockRequestQueue).add(argThat(isUrl("impressionUrl")));
-    }
-
-    @Test
-    public void trackImpression_noAdResponse_shouldNotAddToQueue() {
-        subject.trackImpression();
-
-        verifyZeroInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void registerClick_shouldHttpGetTheClickthroughUrl() throws Exception {
-        subject.onAdLoadSuccess(response);
-
-        subject.registerClick();
-        verify(mockRequestQueue).add(argThat(isUrl("clickUrl")));
-    }
-
-    @Test
-    public void registerClick_NoAdResponse_shouldNotAddToQueue() {
-        subject.registerClick();
-        verifyZeroInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void fetchAd_withNullMoPubView_shouldNotMakeRequest() throws Exception {
-        subject.cleanup();
-        subject.fetchAd("adUrl");
-        verify(mockRequestQueue, never()).add(any(AdRequest.class));
-    }
-
-    @Test
-    public void loadAd_shouldNotLoadWithoutConnectivity() throws Exception {
-        ConnectivityManager connectivityManager = (ConnectivityManager) Robolectric.application.getSystemService(Context.CONNECTIVITY_SERVICE);
-        shadowOf(connectivityManager.getActiveNetworkInfo()).setConnectionStatus(false);
-
-        subject.loadAd();
-        verifyZeroInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void loadAd_shouldNotLoadUrlIfAdUnitIdIsNull() throws Exception {
-        subject.loadAd();
-
-        verifyZeroInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void loadNonJavascript_shouldFetchAd() throws Exception {
-        String url = "http://www.guy.com";
-        subject.loadNonJavascript(url);
-
-        verify(mockRequestQueue).add(argThat(isUrl(url)));
-    }
-
-    @Test
-    public void loadNonJavascript_whenAlreadyLoading_shouldNotFetchAd() throws Exception {
-        String url = "http://www.guy.com";
-        subject.loadNonJavascript(url);
-        reset(mockRequestQueue);
-        subject.loadNonJavascript(url);
-
-        verify(mockRequestQueue, never()).add(any(Request.class));
-    }
-
-    @Test
-    public void loadNonJavascript_shouldAcceptNullParameter() throws Exception {
-        subject.loadNonJavascript(null);
-        // pass
-    }
-
-    @Test
-    public void reload_shouldReuseOldUrl() throws Exception {
-        String url = "http://www.guy.com";
-        subject.loadNonJavascript(url);
-        subject.setNotLoading();
-        reset(mockRequestQueue);
-        subject.reload();
-
-        verify(mockRequestQueue).add(argThat(isUrl(url)));
-    }
-
-    @Test
-    public void loadFailUrl_shouldLoadFailUrl() throws Exception {
-        subject.onAdLoadSuccess(response);
-        subject.loadFailUrl(MoPubErrorCode.INTERNAL_ERROR);
-
-        verify(mockRequestQueue).add(argThat(isUrl("failUrl")));
-        verify(mockMoPubView, never()).adFailed(any(MoPubErrorCode.class));
-    }
-
-    @Test
-    public void loadFailUrl_shouldAcceptNullErrorCode() throws Exception {
-        subject.loadFailUrl(null);
-        // pass
-    }
-
-    @Test
-    public void loadFailUrl_whenFailUrlIsNull_shouldCallAdDidFail() throws Exception {
-        response.toBuilder().setFailoverUrl(null).build();
-        subject.loadFailUrl(MoPubErrorCode.INTERNAL_ERROR);
-
-        verify(mockMoPubView).adFailed(eq(MoPubErrorCode.NO_FILL));
-        verifyZeroInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void setAdContentView_whenCalledFromWrongUiThread_shouldStillSetContentView() throws Exception {
-        final View view = mock(View.class);
-        AdViewController.setShouldHonorServerDimensions(view);
-        subject.onAdLoadSuccess(response);
-
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-                subject.setAdContentView(view);
-            }
-        }).start();
-        ThreadUtils.pause(100);
-        Robolectric.runUiThreadTasks();
-
-        verify(mockMoPubView).removeAllViews();
-        ArgumentCaptor<FrameLayout.LayoutParams> layoutParamsCaptor = ArgumentCaptor.forClass(FrameLayout.LayoutParams.class);
-        verify(mockMoPubView).addView(eq(view), layoutParamsCaptor.capture());
-        FrameLayout.LayoutParams layoutParams = layoutParamsCaptor.getValue();
-
-        assertThat(layoutParams.width).isEqualTo(320);
-        assertThat(layoutParams.height).isEqualTo(50);
-        assertThat(layoutParams.gravity).isEqualTo(Gravity.CENTER);
-    }
-
-    @Test
-    public void setAdContentView_whenCalledAfterCleanUp_shouldNotRemoveViewsAndAddView() throws Exception {
-        final View view = mock(View.class);
-        AdViewController.setShouldHonorServerDimensions(view);
-        subject.onAdLoadSuccess(response);
-
-        subject.cleanup();
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-                subject.setAdContentView(view);
-            }
-        }).start();
-        ThreadUtils.pause(10);
-        Robolectric.runUiThreadTasks();
-
-        verify(mockMoPubView, never()).removeAllViews();
-        verify(mockMoPubView, never()).addView(any(View.class), any(FrameLayout.LayoutParams.class));
-    }
-
-    @Test
-    public void setAdContentView_whenHonorServerDimensionsAndHasDimensions_shouldSizeAndCenterView() throws Exception {
-        View view = mock(View.class);
-        AdViewController.setShouldHonorServerDimensions(view);
-        subject.onAdLoadSuccess(response);
-
-        subject.setAdContentView(view);
-
-        verify(mockMoPubView).removeAllViews();
-        ArgumentCaptor<FrameLayout.LayoutParams> layoutParamsCaptor = ArgumentCaptor.forClass(FrameLayout.LayoutParams.class);
-        verify(mockMoPubView).addView(eq(view), layoutParamsCaptor.capture());
-        FrameLayout.LayoutParams layoutParams = layoutParamsCaptor.getValue();
-
-        assertThat(layoutParams.width).isEqualTo(320);
-        assertThat(layoutParams.height).isEqualTo(50);
-        assertThat(layoutParams.gravity).isEqualTo(Gravity.CENTER);
-    }
-
-    @Test
-    public void setAdContentView_whenHonorServerDimensionsAndDoesntHaveDimensions_shouldWrapAndCenterView() throws Exception {
-        response = response.toBuilder().setDimensions(null, null).build();
-        View view = mock(View.class);
-        AdViewController.setShouldHonorServerDimensions(view);
-        subject.onAdLoadSuccess(response);
-
-        subject.setAdContentView(view);
-
-        verify(mockMoPubView).removeAllViews();
-        ArgumentCaptor<FrameLayout.LayoutParams> layoutParamsCaptor = ArgumentCaptor.forClass(FrameLayout.LayoutParams.class);
-        verify(mockMoPubView).addView(eq(view), layoutParamsCaptor.capture());
-        FrameLayout.LayoutParams layoutParams = layoutParamsCaptor.getValue();
-
-        assertThat(layoutParams.width).isEqualTo(FrameLayout.LayoutParams.WRAP_CONTENT);
-        assertThat(layoutParams.height).isEqualTo(FrameLayout.LayoutParams.WRAP_CONTENT);
-        assertThat(layoutParams.gravity).isEqualTo(Gravity.CENTER);
-    }
-
-    @Test
-    public void setAdContentView_whenNotServerDimensions_shouldWrapAndCenterView() throws Exception {
-        subject.onAdLoadSuccess(response);
-        View view = mock(View.class);
-
-        subject.setAdContentView(view);
-
-        verify(mockMoPubView).removeAllViews();
-        ArgumentCaptor<FrameLayout.LayoutParams> layoutParamsCaptor = ArgumentCaptor.forClass(FrameLayout.LayoutParams.class);
-        verify(mockMoPubView).addView(eq(view), layoutParamsCaptor.capture());
-        FrameLayout.LayoutParams layoutParams = layoutParamsCaptor.getValue();
-
-        assertThat(layoutParams.width).isEqualTo(FrameLayout.LayoutParams.WRAP_CONTENT);
-        assertThat(layoutParams.height).isEqualTo(FrameLayout.LayoutParams.WRAP_CONTENT);
-        assertThat(layoutParams.gravity).isEqualTo(Gravity.CENTER);
-    }
-
-    @Test
-    public void onAdLoadError_withErrorReasonWarmingUp_shouldReturnErrorCodeWarmup_shouldCallMoPubViewAdFailed() {
-        final VolleyError expectedInternalError = new MoPubNetworkError(MoPubNetworkError.Reason.WARMING_UP);
-
-        subject.onAdLoadError(expectedInternalError);
-
-        verify(mockMoPubView).adFailed(MoPubErrorCode.WARMUP);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java
deleted file mode 100644
index 18e64903..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java
+++ /dev/null
@@ -1,259 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.os.Build.VERSION_CODES;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.ViewGroup;
-
-import com.mopub.common.AdReport;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowWebView;
-
-import static android.webkit.WebSettings.PluginState;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(SdkTestRunner.class)
-public class BaseHtmlWebViewTest {
-
-    @Mock
-    AdReport mockAdReport;
-    private BaseHtmlWebView subject;
-    private MotionEvent touchDown;
-    private MotionEvent touchUp;
-
-    @Before
-    public void setUp() throws Exception {
-        subject = new BaseHtmlWebView(Robolectric.buildActivity(Activity.class).create().get(), mockAdReport);
-
-        touchDown = createMotionEvent(MotionEvent.ACTION_DOWN);
-        touchUp = createMotionEvent(MotionEvent.ACTION_UP);
-    }
-
-    @Config(reportSdk = VERSION_CODES.JELLY_BEAN_MR2)
-    @Test
-    public void pluginState_atLeastJellybeanMr2_shouldDefaultToOff_shouldNeverBeEnabled()  {
-        subject = new BaseHtmlWebView(Robolectric.buildActivity(Activity.class).create().get(), mockAdReport);
-        assertThat(subject.getSettings().getPluginState()).isEqualTo(PluginState.OFF);
-
-        subject.enablePlugins(true);
-        assertThat(subject.getSettings().getPluginState()).isEqualTo(PluginState.OFF);
-    }
-
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
-    @Test
-    public void pluginState_atLeastIcsButBelowJellybeanMr2_shouldDefaultToOn_shouldAllowToggling() {
-        subject = new BaseHtmlWebView(Robolectric.buildActivity(Activity.class).create().get(), mockAdReport);
-        assertThat(subject.getSettings().getPluginState()).isEqualTo(PluginState.ON);
-
-        subject.enablePlugins(false);
-        assertThat(subject.getSettings().getPluginState()).isEqualTo(PluginState.OFF);
-
-        subject.enablePlugins(true);
-        assertThat(subject.getSettings().getPluginState()).isEqualTo(PluginState.ON);
-    }
-
-    @Config(reportSdk = VERSION_CODES.GINGERBREAD_MR1)
-    @Test
-    public void pluginState_beforeIcs_shouldDefaultToOff_shouldAllowToggling() {
-        subject = new BaseHtmlWebView(Robolectric.buildActivity(Activity.class).create().get(), mockAdReport);
-        assertThat(subject.getSettings().getPluginState()).isEqualTo(PluginState.OFF);
-
-        subject.enablePlugins(true);
-        assertThat(subject.getSettings().getPluginState()).isEqualTo(PluginState.ON);
-
-        subject.enablePlugins(false);
-        assertThat(subject.getSettings().getPluginState()).isEqualTo(PluginState.OFF);
-    }
-
-    @Test
-    public void init_shouldSetWebViewScrollability() throws Exception {
-        subject.init(false);
-        assertThat(shadowOf(subject).getOnTouchListener()).isNotNull();
-
-        subject.init(true);
-        assertThat(shadowOf(subject).getOnTouchListener()).isNotNull();
-    }
-
-    @Test
-    public void loadUrl_shouldAcceptNullParameter() throws Exception {
-        subject.loadUrl(null);
-        // pass
-    }
-
-    @Test
-    public void loadUrl_whenUrlIsJavascript_shouldCallSuperLoadUrl() throws Exception {
-        String javascriptUrl = "javascript:function() {alert(\"guy\")};";
-        subject.loadUrl(javascriptUrl);
-
-        assertThat(shadowOf(subject).getLastLoadedUrl()).isEqualTo(javascriptUrl);
-    }
-
-    @Test
-    public void loadHtmlResponse_shouldCallLoadDataWithBaseURL() throws Exception {
-        String htmlResponse = "some random html response";
-        subject.loadHtmlResponse(htmlResponse);
-
-        ShadowWebView.LoadDataWithBaseURL lastLoadData = shadowOf(subject).getLastLoadDataWithBaseURL();
-        assertThat(lastLoadData.baseUrl).isEqualTo("http://ads.mopub.com/");
-        assertThat(lastLoadData.data).isEqualTo(htmlResponse);
-        assertThat(lastLoadData.mimeType).isEqualTo("text/html");
-        assertThat(lastLoadData.encoding).isEqualTo("utf-8");
-        assertThat(lastLoadData.historyUrl).isNull();
-    }
-
-    @Test
-    public void sendTouchEvent_withScrollingDisabled_shouldSetUserClicked() throws Exception {
-        assertThat(subject.wasClicked()).isFalse();
-
-        subject.initializeOnTouchListener(false);
-        View.OnTouchListener onTouchListener = shadowOf(subject).getOnTouchListener();
-
-        onTouchListener.onTouch(subject, touchUp);
-        assertThat(subject.wasClicked()).isTrue();
-    }
-
-    @Test
-    public void sendTouchEvent_withScrollingEnabled_shouldSetUserClicked() throws Exception {
-        assertThat(subject.wasClicked()).isFalse();
-
-        subject.initializeOnTouchListener(true);
-        View.OnTouchListener onTouchListener = shadowOf(subject).getOnTouchListener();
-
-        onTouchListener.onTouch(subject, touchUp);
-        assertThat(subject.wasClicked()).isTrue();
-    }
-
-    @Test
-    public void sendTouchEvent_withScrollingDisabled_withLotsOfRandomMotionEvents_shouldEventuallySetUserClicked() throws Exception {
-        subject.initializeOnTouchListener(false);
-        View.OnTouchListener onTouchListener = shadowOf(subject).getOnTouchListener();
-
-        onTouchListener.onTouch(subject, touchDown);
-        assertThat(subject.wasClicked()).isFalse();
-        onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_CANCEL));
-        assertThat(subject.wasClicked()).isFalse();
-        onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_MOVE));
-        assertThat(subject.wasClicked()).isFalse();
-
-        onTouchListener.onTouch(subject, touchUp);
-        assertThat(subject.wasClicked()).isTrue();
-
-        onTouchListener.onTouch(subject, touchDown);
-        assertThat(subject.wasClicked()).isTrue();
-        onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_CANCEL));
-        assertThat(subject.wasClicked()).isTrue();
-        onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_MOVE));
-        assertThat(subject.wasClicked()).isTrue();
-    }
-
-    @Test
-    public void sendTouchEvent_withScrollingEnabled_withLotsOfRandomMotionEvents_shouldEventuallySetUserClicked() throws Exception {
-        subject.initializeOnTouchListener(true);
-        View.OnTouchListener onTouchListener = shadowOf(subject).getOnTouchListener();
-
-        onTouchListener.onTouch(subject, touchDown);
-        assertThat(subject.wasClicked()).isFalse();
-        onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_CANCEL));
-        assertThat(subject.wasClicked()).isFalse();
-        onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_MOVE));
-        assertThat(subject.wasClicked()).isFalse();
-
-        onTouchListener.onTouch(subject, touchUp);
-        assertThat(subject.wasClicked()).isTrue();
-
-        onTouchListener.onTouch(subject, touchDown);
-        assertThat(subject.wasClicked()).isTrue();
-        onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_CANCEL));
-        assertThat(subject.wasClicked()).isTrue();
-        onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_MOVE));
-        assertThat(subject.wasClicked()).isTrue();
-    }
-
-    @Test
-    public void onResetClicked_shouldonResetClicked() throws Exception {
-        subject.initializeOnTouchListener(false);
-        View.OnTouchListener onTouchListener = shadowOf(subject).getOnTouchListener();
-
-        onTouchListener.onTouch(subject, touchDown);
-        onTouchListener.onTouch(subject, touchUp);
-        assertThat(subject.wasClicked()).isTrue();
-
-        subject.onResetUserClick();
-        assertThat(subject.wasClicked()).isFalse();
-    }
-
-    @Test
-    public void onResetClicked_whenTouchStateIsUnset_shouldKeepTouchStateUnset() throws Exception {
-        subject.initializeOnTouchListener(false);
-        assertThat(subject.wasClicked()).isFalse();
-
-        subject.onResetUserClick();
-        assertThat(subject.wasClicked()).isFalse();
-    }
-
-    @Test
-    public void setWebViewScrollingEnabled_whenScrollableIsTrue_onTouchListenerShouldAlwaysReturnFalse() throws Exception {
-        subject.initializeOnTouchListener(true);
-
-        View.OnTouchListener onTouchListener = shadowOf(subject).getOnTouchListener();
-        // ACTION_DOWN is guaranteed to be run before ACTION_MOVE
-        onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_DOWN));
-        boolean shouldConsumeTouch = onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_MOVE));
-
-        assertThat(shouldConsumeTouch).isFalse();
-    }
-
-    @Test
-    public void setWebViewScrollingEnabled_whenScrollableIsFalse_whenActionMove_onTouchListenerShouldReturnTrue() throws Exception {
-        subject.initializeOnTouchListener(false);
-
-        View.OnTouchListener onTouchListener = shadowOf(subject).getOnTouchListener();
-        boolean shouldConsumeTouch = onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_MOVE));
-
-        assertThat(shouldConsumeTouch).isTrue();
-    }
-
-    @Test
-    public void setWebViewScrollingEnabled_whenScrollableIsFalse_whenMotionEventIsNotActionMove_onTouchListenerShouldReturnFalse() throws Exception {
-        subject.initializeOnTouchListener(false);
-
-        View.OnTouchListener onTouchListener = shadowOf(subject).getOnTouchListener();
-
-        boolean shouldConsumeTouch = onTouchListener.onTouch(subject, touchUp);
-        assertThat(shouldConsumeTouch).isFalse();
-
-        shouldConsumeTouch = onTouchListener.onTouch(subject, touchDown);
-        assertThat(shouldConsumeTouch).isFalse();
-
-        shouldConsumeTouch = onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_CANCEL));
-        assertThat(shouldConsumeTouch).isFalse();
-    }
-
-    @Test
-    public void destroy_shouldRemoveSelfFromParent() throws Exception {
-        ViewGroup parentView = mock(ViewGroup.class);
-        ShadowWebView shadow = shadowOf(subject);
-        shadow.setMyParent(parentView);
-
-        subject.destroy();
-
-        verify(parentView).removeView(eq(subject));
-        assertThat(shadow.wasDestroyCalled());
-    }
-    
-    private static MotionEvent createMotionEvent(int action) {
-        return MotionEvent.obtain(0, 0, action, 0, 0, 0);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
deleted file mode 100644
index 0154afd5..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
+++ /dev/null
@@ -1,96 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.FrameLayout;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-
-import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.stub;
-
-@RunWith(SdkTestRunner.class)
-public class BaseInterstitialActivityTest {
-    private BaseInterstitialActivity subject;
-    private long broadcastIdentifier;
-
-    // Make a concrete version of the abstract class for testing purposes.
-    private static class TestInterstitialActivity extends BaseInterstitialActivity {
-        View view;
-
-        @Override
-        public View getAdView() {
-            if (view == null) {
-                view = new View(this);
-            }
-            return view;
-        }
-    }
-
-    @Before
-    public void setup() {
-        broadcastIdentifier = 2222;
-    }
-
-    @Test
-    public void onCreate_shouldCreateView() throws Exception {
-        subject = Robolectric.buildActivity(TestInterstitialActivity.class).create().get();
-        View adView = getContentView(subject).getChildAt(0);
-
-        assertThat(adView).isNotNull();
-    }
-
-    @Test
-    public void onDestroy_shouldCleanUpContentView() throws Exception {
-        subject = Robolectric.buildActivity(
-                TestInterstitialActivity.class).create().destroy().get();
-
-        assertThat(getContentView(subject).getChildCount()).isEqualTo(0);
-    }
-
-    @Test
-    public void getBroadcastIdentifier_shouldReturnBroadcastIdFromIntent() throws Exception {
-        Context context = Robolectric.buildActivity(Activity.class).create().get();
-        Intent intent = new Intent(context, TestInterstitialActivity.class);
-        intent.putExtra(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
-
-        subject = Robolectric.buildActivity(TestInterstitialActivity.class)
-                .withIntent(intent)
-                .create().get();
-        assertThat(subject.getBroadcastIdentifier()).isEqualTo(2222L);
-    }
-
-    @Test
-    public void getBroadcastIdentifier_withMissingBroadCastId_shouldReturnNull() throws Exception {
-        Context context = Robolectric.buildActivity(Activity.class).create().get();
-        Intent intent = new Intent(context, TestInterstitialActivity.class);
-        // This intent is missing a broadcastidentifier extra.
-
-        subject = Robolectric.buildActivity(TestInterstitialActivity.class)
-                .withIntent(intent)
-                .create().get();
-
-        assertThat(subject.getBroadcastIdentifier()).isNull();
-    }
-
-    protected FrameLayout getContentView(BaseInterstitialActivity subject) {
-        return (FrameLayout) ((ViewGroup) subject.findViewById(android.R.id.content)).getChildAt(0);
-    }
-
-    protected void resetMockedView(View view) {
-        reset(view);
-        stub(view.getLayoutParams()).toReturn(
-                new FrameLayout.LayoutParams(FrameLayout.LayoutParams.WRAP_CONTENT,
-                        FrameLayout.LayoutParams.WRAP_CONTENT));
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivityTest.java
deleted file mode 100644
index bd7a88b1..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivityTest.java
+++ /dev/null
@@ -1,77 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Intent;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.Utils;
-import com.mopub.mobileads.util.vast.VastVideoConfiguration;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-
-import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
-import static com.mopub.mobileads.BaseVideoPlayerActivity.VIDEO_URL;
-import static com.mopub.mobileads.BaseVideoPlayerActivity.startMraid;
-import static com.mopub.mobileads.BaseVideoPlayerActivity.startVast;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.withSettings;
-
-@RunWith(SdkTestRunner.class)
-public class BaseVideoPlayerActivityTest {
-    private static final String MRAID_VIDEO_URL = "http://mraidVideo";
-
-    private long testBroadcastIdentifier;
-    private VastVideoConfiguration vastVideoConfiguration;
-
-    @Before
-    public void setup() throws Exception {
-        vastVideoConfiguration = mock(VastVideoConfiguration.class, withSettings().serializable());
-        testBroadcastIdentifier = 1234;
-    }
-
-    @Test
-    public void startMraid_shouldStartMraidVideoPlayerActivity() throws Exception {
-        startMraid(new Activity(), MRAID_VIDEO_URL);
-        assertMraidVideoPlayerActivityStarted(MraidVideoPlayerActivity.class, MRAID_VIDEO_URL);
-    }
-
-    @Test
-    public void startVast_shouldStartMraidVideoPlayerActivity() throws Exception {
-        startVast(new Activity(), vastVideoConfiguration, testBroadcastIdentifier);
-        assertVastVideoPlayerActivityStarted(MraidVideoPlayerActivity.class, vastVideoConfiguration, testBroadcastIdentifier);
-    }
-
-    static void assertVastVideoPlayerActivityStarted(final Class clazz,
-            final VastVideoConfiguration vastVideoConfiguration,
-            final long broadcastIdentifier) {
-        final Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertIntentAndBroadcastIdentifierAreCorrect(intent, clazz, broadcastIdentifier);
-
-        final VastVideoConfiguration expectedVastVideoConfiguration =
-                (VastVideoConfiguration) intent.getSerializableExtra(VastVideoViewController.VAST_VIDEO_CONFIGURATION);
-        assertThat(expectedVastVideoConfiguration).isEqualsToByComparingFields(vastVideoConfiguration);
-    }
-
-    public static void assertMraidVideoPlayerActivityStarted(final Class clazz, final String url) {
-        final Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertIntentAndBroadcastIdentifierAreCorrect(intent, clazz, null);
-
-        assertThat(intent.getStringExtra(VIDEO_URL)).isEqualTo(url);
-    }
-
-    static void assertIntentAndBroadcastIdentifierAreCorrect(final Intent intent,
-            final Class clazz,
-            final Long expectedBroadcastId) {
-        assertThat(intent.getComponent().getClassName()).isEqualTo(clazz.getCanonicalName());
-        assertThat(Utils.bitMaskContainsFlag(intent.getFlags(), Intent.FLAG_ACTIVITY_NEW_TASK)).isTrue();
-
-        if (expectedBroadcastId != null) {
-            final long actualBroadcastId = (Long) intent.getSerializableExtra(BROADCAST_IDENTIFIER_KEY);
-            assertThat(actualBroadcastId).isEqualTo(expectedBroadcastId);
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java
deleted file mode 100644
index 4865c737..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java
+++ /dev/null
@@ -1,78 +0,0 @@
-package com.mopub.mobileads;
-
-
-import android.app.Activity;
-import android.os.Build.VERSION_CODES;
-import android.view.ViewGroup;
-import android.webkit.WebSettings;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowWebView;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(SdkTestRunner.class)
-public class BaseWebViewTest {
-    private Activity context;
-    private BaseWebView subject;
-
-    @Before
-    public void setup() {
-        context = new Activity();
-    }
-
-    @Config(reportSdk = VERSION_CODES.JELLY_BEAN_MR1)
-    @Test
-    public void beforeJellyBeanMr1_shouldDisablePluginsByDefault() throws Exception {
-        subject = new BaseWebView(context);
-
-        WebSettings webSettings = subject.getSettings();
-        assertThat(webSettings.getPluginState()).isEqualTo(WebSettings.PluginState.OFF);
-
-        subject.enablePlugins(true);
-        assertThat(webSettings.getPluginState()).isEqualTo(WebSettings.PluginState.ON);
-    }
-
-    @Config(reportSdk = VERSION_CODES.JELLY_BEAN_MR2)
-    @Test
-    public void atLeastJellybeanMr2_shouldPass() throws Exception {
-        subject = new BaseWebView(context);
-
-        subject.enablePlugins(true);
-
-        // pass
-    }
-
-    @Test
-    public void destroy_shouldRemoveSelfFromParent_beforeCallingDestroy() throws Exception {
-        subject = new BaseWebView(context);
-        ViewGroup parent = mock(ViewGroup.class);
-        ShadowWebView shadow = shadowOf(subject);
-        shadow.setMyParent(parent);
-
-        subject.destroy();
-
-        verify(parent).removeView(eq(subject));
-        assertThat(shadow.wasDestroyCalled()).isTrue();
-    }
-
-    @Test
-    public void destroy_shouldSetTheCorrectStateVariable() {
-        subject = new BaseWebView(context);
-
-        assertThat(subject.mIsDestroyed).isFalse();
-
-        subject.destroy();
-
-        assertThat(subject.mIsDestroyed).isTrue();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventAdLoaderTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventAdLoaderTest.java
deleted file mode 100644
index c3dbf03d..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventAdLoaderTest.java
+++ /dev/null
@@ -1,83 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class CustomEventAdLoaderTest {
-
-    private AdViewController adViewController;
-    private AdLoader.CustomEventAdLoader subject;
-    private String customEventName;
-    private Map<String, String> serverExtras;
-    private MoPubView moPubView;
-
-    @Before
-    public void setup() {
-        moPubView = mock(MoPubView.class);
-        adViewController = mock(AdViewController.class);
-        stub(adViewController.getMoPubView()).toReturn(moPubView);
-        customEventName = "testCustomEvent";
-        serverExtras = new HashMap<String, String>();
-        subject = new AdLoader.CustomEventAdLoader(adViewController,
-                customEventName, serverExtras);
-    }
-
-    @Test
-    public void execute_shouldCallLoadCustomEvent() throws Exception {
-        subject.load();
-
-        verify(adViewController).setNotLoading();
-        verify(moPubView).loadCustomEvent(eq(customEventName), eq(serverExtras));
-    }
-
-    @Test
-    public void execute_whenAdViewControllerIsNull_shouldDoNothing() throws Exception {
-        subject = new AdLoader.CustomEventAdLoader(null, customEventName, serverExtras);
-
-        subject.load();
-        // pass
-    }
-
-    @Test
-    public void execute_whenAdViewControllerIsDestroyed_shouldDoNothing() throws Exception {
-        stub(adViewController.isDestroyed()).toReturn(true);
-
-        subject.load();
-
-        verify(adViewController, never()).setNotLoading();
-        verify(moPubView, never()).loadCustomEvent(eq(customEventName), eq(serverExtras));
-    }
-
-    @Test
-    public void execute_whenCustomEventIsNull_shouldDoNothing() {
-        subject = new AdLoader.CustomEventAdLoader(adViewController, null, serverExtras);
-
-        subject.load();
-
-        verify(adViewController, never()).setNotLoading();
-        verify(moPubView, never()).loadCustomEvent((String) eq(null), eq(serverExtras));
-    }
-
-    @Test
-    public void execute_whenParamsMapIsNull_shouldLoadNullParamsMap() throws Exception {
-        subject = new AdLoader.CustomEventAdLoader(adViewController, customEventName, null);
-
-        subject.load();
-
-        verify(adViewController).setNotLoading();
-        verify(moPubView).loadCustomEvent(eq(customEventName), (Map<String, String>) eq(null));
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
deleted file mode 100644
index 884ac9a0..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
+++ /dev/null
@@ -1,344 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.location.Location;
-import android.view.View;
-
-import com.mopub.common.AdReport;
-import com.mopub.common.DataKeys;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.factories.CustomEventBannerFactory;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
-import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_TIMEOUT;
-import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-public class CustomEventBannerAdapterTest {
-    private CustomEventBannerAdapter subject;
-    @Mock
-    private MoPubView moPubView;
-    @Mock
-    private AdReport mockAdReport;
-    private static final String CLASS_NAME = "arbitrary_banner_adapter_class_name";
-    private static final long BROADCAST_IDENTIFIER = 123;
-    private Map<String, String> serverExtras;
-    private CustomEventBanner banner;
-    private Map<String,Object> localExtras;
-    private Map<String,Object> expectedLocalExtras;
-    private HashMap<String,String> expectedServerExtras;
-
-    @Before
-    public void setUp() throws Exception {
-
-        when(moPubView.getAdTimeoutDelay()).thenReturn(null);
-        when(moPubView.getAdWidth()).thenReturn(320);
-        when(moPubView.getAdHeight()).thenReturn(50);
-
-        localExtras = new HashMap<String, Object>();
-        when(moPubView.getLocalExtras()).thenReturn(localExtras);
-
-        serverExtras = new HashMap<String, String>();
-        serverExtras.put("key", "value");
-        serverExtras.put("another_key", "another_value");
-        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, serverExtras, BROADCAST_IDENTIFIER, mockAdReport);
-
-        expectedLocalExtras = new HashMap<String, Object>();
-        expectedLocalExtras.put(DataKeys.AD_REPORT_KEY, mockAdReport);
-        expectedLocalExtras.put("broadcastIdentifier", BROADCAST_IDENTIFIER);
-        expectedLocalExtras.put(DataKeys.AD_WIDTH, 320);
-        expectedLocalExtras.put(DataKeys.AD_HEIGHT, 50);
-
-        expectedServerExtras = new HashMap<String, String>();
-
-        banner = CustomEventBannerFactory.create(CLASS_NAME);
-    }
-
-    @Test
-    public void constructor_shouldPopulateLocalExtrasWithAdWidthAndHeight() throws Exception {
-        assertThat(localExtras.get("com_mopub_ad_width")).isEqualTo(320);
-        assertThat(localExtras.get("com_mopub_ad_height")).isEqualTo(50);
-    }
-
-    @Test
-    public void timeout_shouldSignalFailureAndInvalidateWithDefaultDelay() throws Exception {
-        subject.loadAd();
-
-        Robolectric.idleMainLooper(CustomEventBannerAdapter.DEFAULT_BANNER_TIMEOUT_DELAY - 1);
-        verify(moPubView, never()).loadFailUrl(eq(NETWORK_TIMEOUT));
-        assertThat(subject.isInvalidated()).isFalse();
-
-        Robolectric.idleMainLooper(1);
-        verify(moPubView).loadFailUrl(eq(NETWORK_TIMEOUT));
-        assertThat(subject.isInvalidated()).isTrue();
-    }
-
-    @Test
-    public void timeout_withNegativeAdTimeoutDelay_shouldSignalFailureAndInvalidateWithDefaultDelay() throws Exception {
-        when(moPubView.getAdTimeoutDelay()).thenReturn(-1);
-
-        subject.loadAd();
-
-        Robolectric.idleMainLooper(CustomEventBannerAdapter.DEFAULT_BANNER_TIMEOUT_DELAY - 1);
-        verify(moPubView, never()).loadFailUrl(eq(NETWORK_TIMEOUT));
-        assertThat(subject.isInvalidated()).isFalse();
-
-        Robolectric.idleMainLooper(1);
-        verify(moPubView).loadFailUrl(eq(NETWORK_TIMEOUT));
-        assertThat(subject.isInvalidated()).isTrue();
-    }
-
-    @Test
-    public void timeout_withNonNullAdTimeoutDelay_shouldSignalFailureAndInvalidateWithCustomDelay() throws Exception {
-       when(moPubView.getAdTimeoutDelay()).thenReturn(77);
-
-        subject.loadAd();
-
-        Robolectric.idleMainLooper(77000 - 1);
-        verify(moPubView, never()).loadFailUrl(eq(NETWORK_TIMEOUT));
-        assertThat(subject.isInvalidated()).isFalse();
-
-        Robolectric.idleMainLooper(1);
-        verify(moPubView).loadFailUrl(eq(NETWORK_TIMEOUT));
-        assertThat(subject.isInvalidated()).isTrue();
-    }
-
-
-    @Test
-    public void loadAd_shouldPropagateLocationInLocalExtras() throws Exception {
-        Location expectedLocation = new Location("");
-        expectedLocation.setLongitude(10.0);
-        expectedLocation.setLongitude(20.1);
-
-        when(moPubView.getLocation()).thenReturn(expectedLocation);
-        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, new HashMap<String, String>(), BROADCAST_IDENTIFIER, mockAdReport);
-        subject.loadAd();
-
-        expectedLocalExtras.put("location", moPubView.getLocation());
-
-        verify(banner).loadBanner(
-                any(Context.class),
-                eq(subject),
-                eq(expectedLocalExtras),
-                eq(expectedServerExtras)
-        );
-    }
-
-    @Test
-    public void loadAd_shouldPropagateServerExtrasToLoadBanner() throws Exception {
-        subject.loadAd();
-
-        expectedServerExtras.put("key", "value");
-        expectedServerExtras.put("another_key", "another_value");
-
-        verify(banner).loadBanner(
-                any(Context.class),
-                eq(subject),
-                eq(expectedLocalExtras),
-                eq(expectedServerExtras)
-        );
-    }
-
-    @Test
-    public void loadAd_shouldScheduleTimeout_bannerLoadedAndFailed_shouldCancelTimeout() throws Exception {
-        Robolectric.pauseMainLooper();
-
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-
-        subject.loadAd();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-
-        subject.onBannerLoaded(null);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-
-        subject.loadAd();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-
-        subject.onBannerFailed(null);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-    }
-
-    @Test
-    public void loadAd_shouldScheduleTimeoutRunnableBeforeCallingLoadBanner() throws Exception {
-        Robolectric.pauseMainLooper();
-
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-
-        Answer assertTimeoutRunnableHasStarted = new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
-                assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-                return null;
-            }
-        };
-
-        doAnswer(assertTimeoutRunnableHasStarted)
-                .when(banner)
-                .loadBanner(
-                        any(Context.class),
-                        any(CustomEventBannerListener.class),
-                        any(Map.class),
-                        any(Map.class)
-                );
-
-        subject.loadAd();
-    }
-
-
-    @Test
-    public void loadAd_whenCallingOnBannerFailed_shouldCancelExistingTimeoutRunnable() throws Exception {
-        Robolectric.pauseMainLooper();
-
-        Answer justCallOnBannerFailed = new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
-                assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-                subject.onBannerFailed(null);
-                assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-                return null;
-            }
-        };
-
-        doAnswer(justCallOnBannerFailed)
-                .when(banner)
-                .loadBanner(
-                        any(Context.class),
-                        any(CustomEventBannerListener.class),
-                        any(Map.class),
-                        any(Map.class)
-                );
-
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-        subject.loadAd();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-    }
-
-    @Test
-    public void onBannerLoaded_shouldSignalMoPubView() throws Exception {
-        View view = new View(new Activity());
-        subject.onBannerLoaded(view);
-
-        verify(moPubView).nativeAdLoaded();
-        verify(moPubView).setAdContentView(eq(view));
-        verify(moPubView).trackNativeImpression();
-    }
-
-    @Test
-    public void onBannerLoaded_whenViewIsHtmlBannerWebView_shouldNotTrackImpression() throws Exception {
-        View mockHtmlBannerWebView = mock(HtmlBannerWebView.class);
-        subject.onBannerLoaded(mockHtmlBannerWebView);
-
-        verify(moPubView).nativeAdLoaded();
-        verify(moPubView).setAdContentView(eq(mockHtmlBannerWebView));
-        verify(moPubView, never()).trackNativeImpression();
-    }
-
-    @Test
-    public void onBannerFailed_shouldLoadFailUrl() throws Exception {
-        subject.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
-
-        verify(moPubView).loadFailUrl(eq(ADAPTER_CONFIGURATION_ERROR));
-    }
-
-    @Test
-    public void onBannerFailed_whenErrorCodeIsNull_shouldPassUnspecifiedError() throws Exception {
-        subject.onBannerFailed(null);
-
-        verify(moPubView).loadFailUrl(eq(UNSPECIFIED));
-    }
-
-    @Test
-    public void onBannerExpanded_shouldPauseRefreshAndCallAdPresentOverlay() throws Exception {
-        subject.onBannerExpanded();
-
-        verify(moPubView).setAutorefreshEnabled(eq(false));
-        verify(moPubView).adPresentedOverlay();
-    }
-
-    @Test
-    public void onBannerCollapsed_shouldRestoreRefreshSettingAndCallAdClosed() throws Exception {
-        when(moPubView.getAutorefreshEnabled()).thenReturn(true);
-        subject.onBannerExpanded();
-        reset(moPubView);
-        subject.onBannerCollapsed();
-        verify(moPubView).setAutorefreshEnabled(eq(true));
-        verify(moPubView).adClosed();
-
-        when(moPubView.getAutorefreshEnabled()).thenReturn(false);
-        subject.onBannerExpanded();
-        reset(moPubView);
-        subject.onBannerCollapsed();
-        verify(moPubView).setAutorefreshEnabled(eq(false));
-        verify(moPubView).adClosed();
-    }
-
-    @Test
-    public void onBannerClicked_shouldRegisterClick() throws Exception {
-        subject.onBannerClicked();
-
-        verify(moPubView).registerClick();
-    }
-
-    @Test
-    public void onLeaveApplication_shouldRegisterClick() throws Exception {
-        subject.onLeaveApplication();
-
-        verify(moPubView).registerClick();
-    }
-
-    @Test
-    public void invalidate_shouldCauseLoadAdToDoNothing() throws Exception {
-        subject.invalidate();
-
-        subject.loadAd();
-
-        verify(banner, never()).loadBanner(
-                any(Context.class),
-                any(CustomEventBannerListener.class),
-                any(Map.class),
-                any(Map.class)
-        );
-    }
-
-    @Test
-    public void invalidate_shouldCauseBannerListenerMethodsToDoNothing() throws Exception {
-        subject.invalidate();
-
-        subject.onBannerLoaded(null);
-        subject.onBannerFailed(null);
-        subject.onBannerExpanded();
-        subject.onBannerCollapsed();
-        subject.onBannerClicked();
-        subject.onLeaveApplication();
-
-        verify(moPubView, never()).nativeAdLoaded();
-        verify(moPubView, never()).setAdContentView(any(View.class));
-        verify(moPubView, never()).trackNativeImpression();
-        verify(moPubView, never()).loadFailUrl(any(MoPubErrorCode.class));
-        verify(moPubView, never()).setAutorefreshEnabled(any(boolean.class));
-        verify(moPubView, never()).adClosed();
-        verify(moPubView, never()).registerClick();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
deleted file mode 100644
index 3649c405..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
+++ /dev/null
@@ -1,332 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.location.Location;
-
-import com.mopub.common.AdReport;
-import com.mopub.common.DataKeys;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.factories.CustomEventInterstitialFactory;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-
-import java.util.HashMap;
-import java.util.Map;
-import java.util.TreeMap;
-
-import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
-import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_TIMEOUT;
-import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class CustomEventInterstitialAdapterTest {
-    private static long BROADCAST_IDENTIFER = 123;
-    private CustomEventInterstitialAdapter subject;
-    @Mock
-    private MoPubInterstitial mockMoPubInterstitial;
-    private CustomEventInterstitial interstitial;
-    private Map<String, Object> expectedLocalExtras;
-    private HashMap<String, String> expectedServerExtras;
-    @Mock
-    private AdViewController mockAdViewController;
-    @Mock
-    private AdReport mockAdReport;
-    private MoPubInterstitial.MoPubInterstitialView moPubInterstitialView;
-    private static final String CLASS_NAME = "arbitrary_interstitial_adapter_class_name";
-    private Map<String, String> serverExtras;
-    private CustomEventInterstitialAdapter.CustomEventInterstitialAdapterListener interstitialAdapterListener;
-
-    @Before
-    public void setUp() throws Exception {
-
-        stub(mockMoPubInterstitial.getAdTimeoutDelay()).toReturn(null);
-        moPubInterstitialView = mock(MoPubInterstitial.MoPubInterstitialView.class);
-        stub(moPubInterstitialView.getAdViewController()).toReturn(mockAdViewController);
-        stub(mockAdViewController.getAdReport()).toReturn(mockAdReport);
-        stub(mockMoPubInterstitial.getMoPubInterstitialView()).toReturn(moPubInterstitialView);
-
-        serverExtras = new HashMap<String, String>();
-        serverExtras.put("key", "value");
-
-        subject = new CustomEventInterstitialAdapter(mockMoPubInterstitial, CLASS_NAME, serverExtras, BROADCAST_IDENTIFER, mockAdViewController.getAdReport());
-
-        expectedLocalExtras = new HashMap<String, Object>();
-        expectedServerExtras = new HashMap<String, String>();
-
-        interstitial = CustomEventInterstitialFactory.create(CLASS_NAME);
-
-        interstitialAdapterListener = mock(CustomEventInterstitialAdapter.CustomEventInterstitialAdapterListener.class);
-        subject.setAdapterListener(interstitialAdapterListener);
-    }
-
-    @Test
-    public void constructor_withInvalidClassName_shouldCallOnCustomEventInterstitialFailed() throws Exception {
-        // Remove testing mock and use the real thing
-        CustomEventInterstitialFactory.setInstance(new CustomEventInterstitialFactory());
-
-        new CustomEventInterstitialAdapter(mockMoPubInterstitial, "bad_class_name_11i234jb", new TreeMap<String, String>(), BROADCAST_IDENTIFER, mockAdViewController.getAdReport());
-        verify(mockMoPubInterstitial).onCustomEventInterstitialFailed(ADAPTER_NOT_FOUND);
-    }
-
-    @Test
-    public void timeout_shouldSignalFailureAndInvalidateWithDefaultDelay() throws Exception {
-        subject.loadInterstitial();
-        Robolectric.idleMainLooper(CustomEventInterstitialAdapter.DEFAULT_INTERSTITIAL_TIMEOUT_DELAY - 1);
-        verify(interstitialAdapterListener, never()).onCustomEventInterstitialFailed(eq(NETWORK_TIMEOUT));
-        assertThat(subject.isInvalidated()).isFalse();
-
-        Robolectric.idleMainLooper(1);
-        verify(interstitialAdapterListener).onCustomEventInterstitialFailed(eq(NETWORK_TIMEOUT));
-        assertThat(subject.isInvalidated()).isTrue();
-    }
-
-    @Test
-    public void timeout_withNegativeAdTimeoutDelay_shouldSignalFailureAndInvalidateWithDefaultDelay() throws Exception {
-        stub(mockMoPubInterstitial.getAdTimeoutDelay()).toReturn(-1);
-
-        subject.loadInterstitial();
-        Robolectric.idleMainLooper(CustomEventInterstitialAdapter.DEFAULT_INTERSTITIAL_TIMEOUT_DELAY - 1);
-        verify(interstitialAdapterListener, never()).onCustomEventInterstitialFailed(eq(NETWORK_TIMEOUT));
-        assertThat(subject.isInvalidated()).isFalse();
-
-        Robolectric.idleMainLooper(1);
-        verify(interstitialAdapterListener).onCustomEventInterstitialFailed(eq(NETWORK_TIMEOUT));
-        assertThat(subject.isInvalidated()).isTrue();
-    }
-
-    @Test
-    public void timeout_withNonNullAdTimeoutDelay_shouldSignalFailureAndInvalidateWithCustomDelay() throws Exception {
-        stub(mockMoPubInterstitial.getAdTimeoutDelay()).toReturn(77);
-
-        subject.loadInterstitial();
-        Robolectric.idleMainLooper(77000 - 1);
-        verify(interstitialAdapterListener, never()).onCustomEventInterstitialFailed(eq(NETWORK_TIMEOUT));
-        assertThat(subject.isInvalidated()).isFalse();
-
-        Robolectric.idleMainLooper(1);
-        verify(interstitialAdapterListener).onCustomEventInterstitialFailed(eq(NETWORK_TIMEOUT));
-        assertThat(subject.isInvalidated()).isTrue();
-    }
-
-    @Test
-    public void loadInterstitial_shouldPropagateLocationInLocalExtras() throws Exception {
-        Location expectedLocation = new Location("");
-        expectedLocation.setLongitude(10.0);
-        expectedLocation.setLongitude(20.1);
-        stub(mockMoPubInterstitial.getLocation()).toReturn(expectedLocation);
-        subject = new CustomEventInterstitialAdapter(mockMoPubInterstitial, CLASS_NAME, new HashMap<String, String>(), BROADCAST_IDENTIFER, mockAdViewController.getAdReport());
-        subject.loadInterstitial();
-
-        expectedLocalExtras.put("broadcastIdentifier", BROADCAST_IDENTIFER);
-        expectedLocalExtras.put(DataKeys.AD_REPORT_KEY, mockAdReport);
-        expectedLocalExtras.put("location", mockMoPubInterstitial.getLocation());
-
-        verify(interstitial).loadInterstitial(
-                any(Context.class),
-                eq(subject),
-                eq(expectedLocalExtras),
-                eq(expectedServerExtras)
-        );
-    }
-
-    @Test
-    public void loadInterstitial_shouldPropagateServerExtrasToInterstitial() throws Exception {
-        subject.loadInterstitial();
-        expectedLocalExtras.put("broadcastIdentifier", BROADCAST_IDENTIFER);
-        expectedLocalExtras.put(DataKeys.AD_REPORT_KEY, mockAdReport);
-        expectedServerExtras.put("key", "value");
-
-        verify(interstitial).loadInterstitial(
-                any(Context.class),
-                eq(subject),
-                eq(expectedLocalExtras),
-                eq(expectedServerExtras)
-        );
-    }
-
-    @Test
-    public void loadInterstitial_shouldScheduleTimeout_interstitialLoadedAndFailed_shouldCancelTimeout() throws Exception {
-        Robolectric.pauseMainLooper();
-
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-
-        subject.loadInterstitial();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-
-        subject.onInterstitialLoaded();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-
-        subject.loadInterstitial();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-
-        subject.onInterstitialFailed(null);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-    }
-
-    @Test
-    public void loadInterstitial_shouldScheduleTimeoutRunnableBeforeCallingLoadInterstitial() throws Exception {
-        Robolectric.pauseMainLooper();
-
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-
-        Answer assertTimeoutRunnableHasStarted = new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
-                assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-                return null;
-            }
-        };
-
-        doAnswer(assertTimeoutRunnableHasStarted)
-                .when(interstitial)
-                .loadInterstitial(
-                        any(Context.class),
-                        any(CustomEventInterstitialListener.class),
-                        any(Map.class),
-                        any(Map.class)
-                );
-
-        subject.loadInterstitial();
-    }
-
-    @Test
-    public void loadInterstitial_whenCallingOnInterstitialFailed_shouldCancelExistingTimeoutRunnable() throws Exception {
-        Robolectric.pauseMainLooper();
-
-        Answer justCallOnInterstitialFailed = new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
-                assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-                subject.onInterstitialFailed(null);
-                assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-                return null;
-            }
-        };
-
-        doAnswer(justCallOnInterstitialFailed)
-                .when(interstitial)
-                .loadInterstitial(
-                        any(Context.class),
-                        any(CustomEventInterstitialListener.class),
-                        any(Map.class),
-                        any(Map.class)
-                );
-
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-        subject.loadInterstitial();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-    }
-
-    @Test
-    public void showInterstitial_shouldCallCustomEventInterstitialShowInterstitial() throws Exception {
-        subject.showInterstitial();
-
-        verify(interstitial).showInterstitial();
-    }
-
-    @Test
-    public void onInterstitialLoaded_shouldSignalAdapterListener() throws Exception {
-        subject.onInterstitialLoaded();
-
-        verify(interstitialAdapterListener).onCustomEventInterstitialLoaded();
-    }
-
-    @Test
-    public void onInterstitialFailed_shouldLoadFailUrl() throws Exception {
-        subject.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
-
-        verify(interstitialAdapterListener).onCustomEventInterstitialFailed(eq(ADAPTER_CONFIGURATION_ERROR));
-    }
-
-    @Test
-    public void onInterstitialFailed_whenErrorCodeIsNull_shouldPassUnspecifiedError() throws Exception {
-        subject.onInterstitialFailed(null);
-
-        verify(interstitialAdapterListener).onCustomEventInterstitialFailed(eq(UNSPECIFIED));
-    }
-
-    @Test
-    public void onInterstitialShown_shouldSignalAdapterListener() throws Exception {
-        subject.onInterstitialShown();
-
-        verify(interstitialAdapterListener).onCustomEventInterstitialShown();
-    }
-
-    @Test
-    public void onInterstitialClicked_shouldSignalAdapterListener() throws Exception {
-        subject.onInterstitialClicked();
-
-        verify(interstitialAdapterListener).onCustomEventInterstitialClicked();
-    }
-
-    @Test
-    public void onLeaveApplication_shouldSignalAdapterListener() throws Exception {
-        subject.onLeaveApplication();
-
-        verify(interstitialAdapterListener).onCustomEventInterstitialClicked();
-    }
-
-    @Test
-    public void onInterstitialDismissed_shouldSignalAdapterListener() throws Exception {
-        subject.onInterstitialDismissed();
-
-        verify(interstitialAdapterListener).onCustomEventInterstitialDismissed();
-    }
-
-    @Test
-    public void invalidate_shouldCauseLoadInterstitialToDoNothing() throws Exception {
-        subject.invalidate();
-
-        subject.loadInterstitial();
-
-        verify(interstitial, never()).loadInterstitial(
-                any(Context.class),
-                any(CustomEventInterstitialListener.class),
-                any(Map.class),
-                any(Map.class)
-        );
-    }
-
-    @Test
-    public void invalidate_shouldCauseShowInterstitialToDoNothing() throws Exception {
-        subject.invalidate();
-
-        subject.showInterstitial();
-
-        verify(interstitial, never()).showInterstitial();
-    }
-
-    @Test
-    public void invalidate_shouldCauseInterstitialListenerMethodsToDoNothing() throws Exception {
-        subject.invalidate();
-
-        subject.onInterstitialLoaded();
-        subject.onInterstitialFailed(null);
-        subject.onInterstitialShown();
-        subject.onInterstitialClicked();
-        subject.onLeaveApplication();
-        subject.onInterstitialDismissed();
-
-        verify(interstitialAdapterListener, never()).onCustomEventInterstitialLoaded();
-        verify(interstitialAdapterListener, never()).onCustomEventInterstitialFailed(any(MoPubErrorCode.class));
-        verify(interstitialAdapterListener, never()).onCustomEventInterstitialShown();
-        verify(interstitialAdapterListener, never()).onCustomEventInterstitialClicked();
-        verify(interstitialAdapterListener, never()).onCustomEventInterstitialDismissed();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
deleted file mode 100644
index e028844b..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
+++ /dev/null
@@ -1,219 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.support.v4.content.LocalBroadcastManager;
-
-import com.mopub.common.DataKeys;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.factories.CustomEventInterstitialAdapterFactory;
-
-import org.fest.util.Sets;
-import org.junit.Before;
-import org.junit.Ignore;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.shadows.ShadowLocalBroadcastManager;
-
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Map;
-import java.util.Set;
-
-import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.getHtmlInterstitialIntentFilter;
-import static com.mopub.mobileads.MoPubInterstitial.InterstitialAdListener;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-
-@RunWith(SdkTestRunner.class)
-public class EventForwardingBroadcastReceiverTest {
-
-    private CustomEventInterstitialListener customEventInterstitialListener;
-    private EventForwardingBroadcastReceiver subject;
-    private Activity context;
-    private int broadcastIdentifier;
-
-    @Before
-    public void setUp() throws Exception {
-        customEventInterstitialListener = mock(CustomEventInterstitialListener.class);
-        broadcastIdentifier = 27027027;
-        subject = new EventForwardingBroadcastReceiver(customEventInterstitialListener, broadcastIdentifier);
-        context = new Activity();
-    }
-
-    @Ignore("Difficult with the number of test factories and mocking involved.")
-    @Test
-    public void twoDifferentInterstitials_shouldNotHearEachOthersBroadcasts() throws Exception {
-        final MoPubInterstitial interstitialA = new MoPubInterstitial(context, "adunitid");
-        final InterstitialAdListener listenerA = mock(InterstitialAdListener.class);
-        interstitialA.setInterstitialAdListener(listenerA);
-
-        final MoPubInterstitial interstitialB = new MoPubInterstitial(context, "adunitid");
-        final InterstitialAdListener listenerB = mock(InterstitialAdListener.class);
-        interstitialB.setInterstitialAdListener(listenerB);
-
-        Map<String, String> serverExtras = new HashMap<String, String>();
-        serverExtras.put(DataKeys.HTML_RESPONSE_BODY_KEY, "response");
-        final CustomEventInterstitialAdapter customEventInterstitialAdapter =
-                CustomEventInterstitialAdapterFactory.create(
-                        interstitialA,
-                        "com.mopub.mobileads.HtmlInterstitial",
-                        serverExtras, broadcastIdentifier, null);
-
-
-        customEventInterstitialAdapter.loadInterstitial();
-        verify(listenerA).onInterstitialLoaded(interstitialA);
-        verify(listenerB, never()).onInterstitialLoaded(any(MoPubInterstitial.class));
-
-        interstitialA.onCustomEventInterstitialShown();
-        verify(listenerA).onInterstitialLoaded(interstitialA);
-        verify(listenerB, never()).onInterstitialShown(any(MoPubInterstitial.class));
-
-        interstitialA.onCustomEventInterstitialClicked();
-        verify(listenerA).onInterstitialClicked(interstitialA);
-        verify(listenerB, never()).onInterstitialClicked(any(MoPubInterstitial.class));
-
-        interstitialA.onCustomEventInterstitialDismissed();
-        verify(listenerA).onInterstitialDismissed(interstitialA);
-        verify(listenerB, never()).onInterstitialDismissed(any(MoPubInterstitial.class));
-    }
-
-    @Test
-    public void constructor_shouldSetIntentFilter() throws Exception {
-        Set<String> expectedActions = Sets.newLinkedHashSet(
-                ACTION_INTERSTITIAL_FAIL,
-                ACTION_INTERSTITIAL_SHOW,
-                ACTION_INTERSTITIAL_DISMISS,
-                ACTION_INTERSTITIAL_CLICK
-        );
-
-        final IntentFilter intentFilter = EventForwardingBroadcastReceiver.getHtmlInterstitialIntentFilter();
-        final Iterator<String> actionIterator = intentFilter.actionsIterator();
-
-        assertThat(intentFilter.countActions()).isEqualTo(4);
-        while (actionIterator.hasNext()) {
-            assertThat(expectedActions.contains(actionIterator.next()));
-        }
-    }
-
-    @Test
-    public void onReceive_whenActionInterstitialFail_shouldNotifyListener() throws Exception {
-        Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_CLICK, broadcastIdentifier);
-
-        subject.onReceive(context, intent);
-
-        verify(customEventInterstitialListener).onInterstitialClicked();
-    }
-
-    @Test
-    public void onReceive_whenActionInterstitialShow_shouldNotifyListener() throws Exception {
-        Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, broadcastIdentifier);
-
-        subject.onReceive(context, intent);
-
-        verify(customEventInterstitialListener).onInterstitialShown();
-    }
-
-
-    @Test
-    public void onReceive_whenActionInterstitialDismiss_shouldNotifyListener() throws Exception {
-        Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, broadcastIdentifier);
-
-        subject.onReceive(context, intent);
-
-        verify(customEventInterstitialListener).onInterstitialDismissed();
-    }
-
-    @Test
-    public void onReceive_whenActionInterstitialClick_shouldNotifyListener() throws Exception {
-        Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_CLICK, broadcastIdentifier);
-
-        subject.onReceive(context, intent);
-
-        verify(customEventInterstitialListener).onInterstitialClicked();
-    }
-
-    @Test
-    public void onReceive_withIncorrectBroadcastIdentifier_shouldDoNothing() throws Exception {
-        long incorrectBroadcastIdentifier = broadcastIdentifier + 1;
-
-        Intent fail = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_FAIL, incorrectBroadcastIdentifier);
-        Intent show = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, incorrectBroadcastIdentifier);
-        Intent click = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_CLICK, incorrectBroadcastIdentifier);
-        Intent dismiss = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, incorrectBroadcastIdentifier);
-
-        subject.onReceive(context, fail);
-        subject.onReceive(context, show);
-        subject.onReceive(context, click);
-        subject.onReceive(context, dismiss);
-
-        verifyNoMoreInteractions(customEventInterstitialListener);
-    }
-
-    @Test
-    public void onReceiver_whenCustomEventInterstitialListenerIsNull_shouldNotBlowUp() throws Exception {
-        Intent intent = new Intent(ACTION_INTERSTITIAL_SHOW);
-
-        subject = new EventForwardingBroadcastReceiver(null, broadcastIdentifier);
-        subject.onReceive(context, intent);
-
-        // pass
-    }
-
-    @Test
-    public void register_shouldEnableReceivingBroadcasts() throws Exception {
-        subject.register(context);
-        Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, broadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener).onInterstitialShown();
-    }
-
-    @Test
-    public void unregister_shouldDisableReceivingBroadcasts() throws Exception {
-        subject.register(context);
-
-        subject.unregister();
-        Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, broadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener, never()).onInterstitialShown();
-    }
-
-    @Test
-    public void unregister_whenNotRegistered_shouldNotBlowUp() throws Exception {
-        subject.unregister();
-
-        // pass
-    }
-
-    @Test
-    public void unregister_shouldNotLeakTheContext() throws Exception {
-        subject.register(context);
-        subject.unregister();
-
-        LocalBroadcastManager.getInstance(context).registerReceiver(subject, getHtmlInterstitialIntentFilter());
-        subject.unregister();
-
-        // Unregister shouldn't know the context any more and so should not have worked
-        Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, broadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-        verify(customEventInterstitialListener).onInterstitialShown();
-    }
-
-    public static Intent getIntentForActionAndIdentifier(final String action, final long broadcastIdentifier) {
-        final Intent intent = new Intent(action);
-        intent.putExtra("broadcastIdentifier", broadcastIdentifier);
-        return intent;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
deleted file mode 100644
index 4b7f81c9..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
+++ /dev/null
@@ -1,123 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.view.Gravity;
-import android.widget.FrameLayout;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.TestHtmlBannerWebViewFactory;
-import com.mopub.mobileads.test.support.TestMoPubViewFactory;
-import com.mopub.network.AdResponse;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.mopub.common.DataKeys.CLICKTHROUGH_URL_KEY;
-import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.common.DataKeys.REDIRECT_URL_KEY;
-import static com.mopub.common.DataKeys.SCROLLABLE_KEY;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class HtmlBannerTest {
-
-    private HtmlBanner subject;
-    private HtmlBannerWebView htmlBannerWebView;
-    private CustomEventBanner.CustomEventBannerListener customEventBannerListener;
-    private Map<String, Object> localExtras;
-    private Map<String, String> serverExtras;
-    private Activity context;
-    private String responseBody;
-
-    @Before
-    public void setup() {
-        subject = new HtmlBanner();
-        htmlBannerWebView = TestHtmlBannerWebViewFactory.getSingletonMock();
-        customEventBannerListener = mock(CustomEventBanner.CustomEventBannerListener.class);
-        context = new Activity();
-        localExtras = new HashMap<String, Object>();
-        serverExtras = new HashMap<String, String>();
-        responseBody = "expected response body";
-        serverExtras.put(HTML_RESPONSE_BODY_KEY, responseBody);
-        serverExtras.put(SCROLLABLE_KEY, "false");
-    }
-
-    @Test
-    public void loadBanner_shouldPopulateTheHtmlWebViewWithHtml() throws Exception {
-        subject.loadBanner(context, customEventBannerListener, localExtras, serverExtras);
-
-        assertThat(TestHtmlBannerWebViewFactory.getLatestListener()).isSameAs(customEventBannerListener);
-        assertThat(TestHtmlBannerWebViewFactory.getLatestIsScrollable()).isFalse();
-        assertThat(TestHtmlBannerWebViewFactory.getLatestRedirectUrl()).isNull();
-        assertThat(TestHtmlBannerWebViewFactory.getLatestClickthroughUrl()).isNull();
-        verify(htmlBannerWebView).loadHtmlResponse(responseBody);
-    }
-
-    @Test
-    public void loadBanner_whenNoHtmlResponse_shouldNotifyBannerFailed() throws Exception {
-        serverExtras.remove(HTML_RESPONSE_BODY_KEY);
-        subject.loadBanner(context, customEventBannerListener, localExtras, serverExtras);
-
-        verify(customEventBannerListener).onBannerFailed(eq(NETWORK_INVALID_STATE));
-        assertThat(TestHtmlBannerWebViewFactory.getLatestListener()).isNull();
-        assertThat(TestHtmlBannerWebViewFactory.getLatestIsScrollable()).isFalse();
-        assertThat(TestHtmlBannerWebViewFactory.getLatestRedirectUrl()).isNull();
-        assertThat(TestHtmlBannerWebViewFactory.getLatestClickthroughUrl()).isNull();
-        verify(htmlBannerWebView, never()).loadHtmlResponse(anyString());
-    }
-
-    @Test
-    public void loadBanner_shouldPassParametersThrough() throws Exception {
-        serverExtras.put(SCROLLABLE_KEY, "true");
-        serverExtras.put(REDIRECT_URL_KEY, "redirectUrl");
-        serverExtras.put(CLICKTHROUGH_URL_KEY, "clickthroughUrl");
-        subject.loadBanner(context, customEventBannerListener, localExtras, serverExtras);
-
-        assertThat(TestHtmlBannerWebViewFactory.getLatestListener()).isSameAs(customEventBannerListener);
-        assertThat(TestHtmlBannerWebViewFactory.getLatestIsScrollable()).isTrue();
-        assertThat(TestHtmlBannerWebViewFactory.getLatestRedirectUrl()).isEqualTo("redirectUrl");
-        assertThat(TestHtmlBannerWebViewFactory.getLatestClickthroughUrl()).isEqualTo("clickthroughUrl");
-        verify(htmlBannerWebView).loadHtmlResponse(responseBody);
-    }
-
-    @Test
-    public void onInvalidate_shouldDestroyTheHtmlWebView() throws Exception {
-        subject.loadBanner(context, customEventBannerListener, localExtras, serverExtras);
-        subject.onInvalidate();
-
-        verify(htmlBannerWebView).destroy();
-    }
-
-    @Test
-    public void loadBanner_shouldCauseServerDimensionsToBeHonoredWhenLayingOutView() throws Exception {
-        subject.loadBanner(context, customEventBannerListener, localExtras, serverExtras);
-        MoPubView moPubView = TestMoPubViewFactory.getSingletonMock();
-        stub(moPubView.getContext()).toReturn(context);
-        AdViewController adViewController = new AdViewController(context, moPubView);
-
-
-        AdResponse adResponse = new AdResponse.Builder().setDimensions(320, 50).build();
-        adViewController.onAdLoadSuccess(adResponse);
-
-        adViewController.setAdContentView(htmlBannerWebView);
-        ArgumentCaptor<FrameLayout.LayoutParams> layoutParamsCaptor = ArgumentCaptor.forClass(FrameLayout.LayoutParams.class);
-        verify(moPubView).addView(eq(htmlBannerWebView), layoutParamsCaptor.capture());
-        FrameLayout.LayoutParams layoutParams = layoutParamsCaptor.getValue();
-
-        assertThat(layoutParams.width).isEqualTo(320);
-        assertThat(layoutParams.height).isEqualTo(50);
-        assertThat(layoutParams.gravity).isEqualTo(Gravity.CENTER);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerWebViewTest.java
deleted file mode 100644
index aea2d409..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerWebViewTest.java
+++ /dev/null
@@ -1,65 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.webkit.WebViewClient;
-
-import com.mopub.common.AdReport;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-
-import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(SdkTestRunner.class)
-public class HtmlBannerWebViewTest {
-    private HtmlBannerWebView subject;
-    @Mock
-    private AdReport mockAdReport;
-    private CustomEventBannerListener customEventBannerListener;
-    private String clickthroughUrl;
-    private String redirectUrl;
-
-    @Before
-    public void setup() throws Exception {
-        subject = new HtmlBannerWebView(Robolectric.buildActivity(Activity.class).create().get(),
-                mockAdReport);
-        customEventBannerListener = mock(CustomEventBannerListener.class);
-        clickthroughUrl = "clickthroughUrl";
-        redirectUrl = "redirectUrl";
-    }
-
-    @Test
-    public void init_shouldSetupWebViewClient() throws Exception {
-        subject.init(customEventBannerListener, false, clickthroughUrl, redirectUrl);
-        WebViewClient webViewClient = shadowOf(subject).getWebViewClient();
-        assertThat(webViewClient).isNotNull();
-        assertThat(webViewClient).isInstanceOf(HtmlWebViewClient.class);
-    }
-
-    @Test
-    public void htmlBannerWebViewListener_shouldForwardCalls() throws Exception {
-        HtmlBannerWebView.HtmlBannerWebViewListener listenerSubject = new HtmlBannerWebView.HtmlBannerWebViewListener(customEventBannerListener);
-
-        listenerSubject.onClicked();
-        verify(customEventBannerListener).onBannerClicked();
-
-        listenerSubject.onLoaded(subject);
-        verify(customEventBannerListener).onBannerLoaded(eq(subject));
-
-        listenerSubject.onCollapsed();
-        verify(customEventBannerListener).onBannerCollapsed();
-
-        listenerSubject.onFailed(NETWORK_INVALID_STATE);
-        verify(customEventBannerListener).onBannerFailed(eq(NETWORK_INVALID_STATE));
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
deleted file mode 100644
index 19d7184e..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
+++ /dev/null
@@ -1,146 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Intent;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.TestHtmlInterstitialWebViewFactory;
-
-import org.junit.Before;
-import org.junit.Ignore;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.shadows.ShadowLocalBroadcastManager;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
-import static com.mopub.common.DataKeys.CLICKTHROUGH_URL_KEY;
-import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.common.DataKeys.REDIRECT_URL_KEY;
-import static com.mopub.common.DataKeys.SCROLLABLE_KEY;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class HtmlInterstitialTest extends ResponseBodyInterstitialTest {
-    private CustomEventInterstitialListener customEventInterstitialListener;
-    private Activity context;
-    private Map<String,Object> localExtras;
-    private Map<String,String> serverExtras;
-    private HtmlInterstitialWebView htmlInterstitialWebView;
-    private String expectedResponse;
-    private long broadcastIdentifier;
-
-    @Before
-    public void setUp() throws Exception {
-        subject = new HtmlInterstitial();
-
-        expectedResponse = "this is the response";
-        htmlInterstitialWebView = TestHtmlInterstitialWebViewFactory.getSingletonMock();
-        context = new Activity();
-        customEventInterstitialListener = mock(CustomEventInterstitialListener.class);
-        localExtras = new HashMap<String, Object>();
-        serverExtras = new HashMap<String, String>();
-        serverExtras.put(HTML_RESPONSE_BODY_KEY, expectedResponse);
-
-        broadcastIdentifier = 2222;
-        localExtras.put(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
-    }
-
-    @Ignore("pending")
-    @Test
-    public void loadInterstitial_shouldNotifyCustomEventInterstitialListenerOnLoaded() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-
-//        verify(customEventInterstitialListener).onInterstitialLoaded();
-    }
-
-    @Test
-    public void loadInterstitial_whenNoHtmlResponsePassedIn_shouldCallLoadFailUrl() throws Exception {
-        serverExtras.remove(HTML_RESPONSE_BODY_KEY);
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestListener()).isNull();
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestIsScrollable()).isFalse();
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestRedirectUrl()).isNull();
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestClickthroughUrl()).isNull();
-        verify(customEventInterstitialListener).onInterstitialFailed(NETWORK_INVALID_STATE);
-        verify(htmlInterstitialWebView, never()).loadHtmlResponse(anyString());
-    }
-
-
-    @Test
-    public void showInterstitial_withMinimumExtras_shouldStartMoPubActivityWithDefaults() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-        subject.showInterstitial();
-
-        Intent nextStartedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(nextStartedActivity.getStringExtra(HTML_RESPONSE_BODY_KEY)).isEqualTo(expectedResponse);
-        assertThat(nextStartedActivity.getBooleanExtra(SCROLLABLE_KEY, false)).isFalse();
-        assertThat(nextStartedActivity.getStringExtra(REDIRECT_URL_KEY)).isNull();
-        assertThat(nextStartedActivity.getStringExtra(CLICKTHROUGH_URL_KEY)).isNull();
-        assertThat(nextStartedActivity.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(nextStartedActivity.getComponent().getClassName()).isEqualTo("com.mopub.mobileads.MoPubActivity");
-    }
-
-    @Test
-    public void showInterstitial_shouldStartMoPubActivityWithAllExtras() throws Exception {
-        serverExtras.put(SCROLLABLE_KEY, "true");
-        serverExtras.put(REDIRECT_URL_KEY, "redirectUrl");
-        serverExtras.put(CLICKTHROUGH_URL_KEY, "clickthroughUrl");
-
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-        subject.showInterstitial();
-
-        Intent nextStartedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(nextStartedActivity.getStringExtra(HTML_RESPONSE_BODY_KEY)).isEqualTo(expectedResponse);
-        assertThat(nextStartedActivity.getBooleanExtra(SCROLLABLE_KEY, false)).isTrue();
-        assertThat(nextStartedActivity.getStringExtra(REDIRECT_URL_KEY)).isEqualTo("redirectUrl");
-        assertThat(nextStartedActivity.getStringExtra(CLICKTHROUGH_URL_KEY)).isEqualTo("clickthroughUrl");
-        assertThat(nextStartedActivity.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(nextStartedActivity.getComponent().getClassName()).isEqualTo("com.mopub.mobileads.MoPubActivity");
-    }
-
-    @Test
-    public void loadInterstitial_shouldConnectListenerToBroadcastReceiver() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-
-        Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, broadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener).onInterstitialShown();
-
-        intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, broadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener).onInterstitialDismissed();
-    }
-
-    @Test
-    public void onInvalidate_shouldDisconnectListenerToBroadcastReceiver() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-        subject.onInvalidate();
-
-        Intent intent;
-        intent = new Intent(ACTION_INTERSTITIAL_SHOW);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener, never()).onInterstitialShown();
-
-        intent = new Intent(ACTION_INTERSTITIAL_DISMISS);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener, never()).onInterstitialDismissed();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java
deleted file mode 100644
index 4d1763d8..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java
+++ /dev/null
@@ -1,64 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.webkit.WebViewClient;
-
-import com.mopub.common.AdReport;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-
-import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static com.mopub.mobileads.HtmlInterstitialWebView.HtmlInterstitialWebViewListener;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(SdkTestRunner.class)
-public class HtmlInterstitialWebViewTest {
-
-    @Mock AdReport mockAdReport;
-    private HtmlInterstitialWebView subject;
-    private CustomEventInterstitialListener customEventInterstitialListener;
-    private String clickthroughUrl;
-    private boolean isScrollable;
-    private String redirectUrl;
-
-    @Before
-    public void setUp() throws Exception {
-        subject = new HtmlInterstitialWebView(Robolectric.buildActivity(Activity.class).create().get(),
-                mockAdReport);
-        customEventInterstitialListener = mock(CustomEventInterstitialListener.class);
-        isScrollable = false;
-        clickthroughUrl = "clickthroughUrl";
-        redirectUrl = "redirectUrl";
-    }
-
-    @Test
-    public void init_shouldSetupWebViewClient() throws Exception {
-        subject.init(customEventInterstitialListener, false, clickthroughUrl, redirectUrl);
-        WebViewClient webViewClient = shadowOf(subject).getWebViewClient();
-        assertThat(webViewClient).isNotNull();
-        assertThat(webViewClient).isInstanceOf(HtmlWebViewClient.class);
-    }
-
-    @Test
-    public void htmlBannerWebViewListener_shouldForwardCalls() throws Exception {
-        HtmlInterstitialWebViewListener listenerSubject = new HtmlInterstitialWebViewListener(customEventInterstitialListener);
-
-        listenerSubject.onLoaded(subject);
-
-        listenerSubject.onFailed(NETWORK_INVALID_STATE);
-        verify(customEventInterstitialListener).onInterstitialFailed(eq(NETWORK_INVALID_STATE));
-
-        listenerSubject.onClicked();
-        verify(customEventInterstitialListener).onInterstitialClicked();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
deleted file mode 100644
index 69e8a19b..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
+++ /dev/null
@@ -1,500 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.ActivityNotFoundException;
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.ResolveInfo;
-import android.net.Uri;
-import android.webkit.WebView;
-
-import com.mopub.common.MoPubBrowser;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.robolectric.Robolectric;
-
-import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.any;
-import static org.mockito.Mockito.doThrow;
-import static org.mockito.Mockito.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-public class HtmlWebViewClientTest {
-
-    private HtmlWebViewClient subject;
-    private HtmlWebViewListener htmlWebViewListener;
-    private BaseHtmlWebView htmlWebView;
-    private Context context;
-
-    @Before
-    public void setUp() throws Exception {
-        htmlWebViewListener = mock(HtmlWebViewListener.class);
-        htmlWebView = mock(BaseHtmlWebView.class);
-        context = Robolectric.buildActivity(Activity.class).create().get().getApplicationContext();
-        when(htmlWebView.getContext()).thenReturn(context);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, "clickthrough", "redirect");
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withMoPubFinishLoad_shouldCallAdDidLoad() throws Exception {
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, "mopub://finishLoad");
-
-        assertThat(didOverrideUrl).isTrue();
-        verify(htmlWebViewListener).onLoaded(eq(htmlWebView));
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withMoPubClose_shouldCallAdDidClose() throws Exception {
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, "mopub://close");
-
-        assertThat(didOverrideUrl).isTrue();
-        verify(htmlWebViewListener).onCollapsed();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withMoPubFailLoad_shouldCallLoadFailUrl() throws Exception {
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, "mopub://failLoad");
-
-        assertThat(didOverrideUrl).isTrue();
-        verify(htmlWebViewListener).onFailed(UNSPECIFIED);
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withMoPubCustom_withUserClick_shouldStartCustomIntent() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(true);
-
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, "mopub://custom?fnc=myFnc&data=myData");
-
-        assertThat(didOverrideUrl).isTrue();
-        verify(htmlWebViewListener).onClicked();
-        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(startedActivity).isNotNull();
-        assertThat(startedActivity.getAction()).isEqualTo("myFnc");
-        assertThat(startedActivity.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(startedActivity.getStringExtra(HtmlBannerWebView.EXTRA_AD_CLICK_DATA)).isEqualTo("myData");
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withMoPubCustom_withoutUserClick_shouldNotStartActivity() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(false);
-
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, "mopub://custom?fnc=myFnc&data=myData");
-
-        assertThat(didOverrideUrl).isTrue();
-        verify(htmlWebViewListener, never()).onClicked();
-        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(startedActivity).isNull();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withMoPubCustomAndNullData_withUserClick_shouldStartCustomIntent() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(true);
-
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, "mopub://custom?fnc=myFnc");
-
-        assertThat(didOverrideUrl).isTrue();
-        verify(htmlWebViewListener).onClicked();
-        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(startedActivity).isNotNull();
-        assertThat(startedActivity.getAction()).isEqualTo("myFnc");
-        assertThat(startedActivity.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(startedActivity.getStringExtra(HtmlBannerWebView.EXTRA_AD_CLICK_DATA)).isNull();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withMoPubCustomAndNullData_withoutUserClick_shouldNotStartCustomIntent() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(false);
-
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, "mopub://custom?fnc=myFnc");
-
-        assertThat(didOverrideUrl).isTrue();
-        verify(htmlWebViewListener, never()).onClicked();
-        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(startedActivity).isNull();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withPhoneIntent_shouldStartDefaultIntent() throws Exception {
-        assertPhoneUrlStartedCorrectIntent("tel:");
-        assertPhoneUrlStartedCorrectIntent("voicemail:");
-        assertPhoneUrlStartedCorrectIntent("sms:");
-        assertPhoneUrlStartedCorrectIntent("mailto:");
-        assertPhoneUrlStartedCorrectIntent("geo:");
-        assertPhoneUrlStartedCorrectIntent("google.streetview:");
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withCustomApplicationIntent_withUserClick_andCanHandleCustomIntent_shouldTryToLaunchCustomIntent() throws Exception {
-        String customUrl = "myintent://something";
-        stub(htmlWebView.wasClicked()).toReturn(true);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW, Uri.parse(customUrl)), new ResolveInfo());
-
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, customUrl);
-
-        assertThat(didOverrideUrl).isTrue();
-        verify(htmlWebViewListener).onClicked();
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(intent).isNotNull();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withCustomApplicationIntent_withoutUserClick_shouldNotTryToLaunchIntent() throws Exception {
-        String customUrl = "myintent://something";
-        stub(htmlWebView.wasClicked()).toReturn(false);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
-
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, customUrl);
-
-        assertThat(didOverrideUrl).isTrue();
-        verify(htmlWebViewListener, never()).onClicked();
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withCustomApplicationIntent_withUserClick_butCanNotHandleCustomIntent_shouldDefaultToMoPubBrowser() throws Exception {
-        String customUrl = "myintent://something";
-        stub(htmlWebView.wasClicked()).toReturn(true);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
-
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, customUrl);
-
-        assertThat(didOverrideUrl).isTrue();
-        verify(htmlWebViewListener).onClicked();
-        Intent startedIntent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(startedIntent).isNotNull();
-        assertThat(startedIntent.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser");
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withHttpUrl_withUserClick_shouldOpenBrowser() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(true);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
-        String validUrl = "http://www.mopub.com";
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, validUrl);
-
-        assertThat(didOverrideUrl).isTrue();
-        verify(htmlWebViewListener).onClicked();
-
-        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(startedActivity.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser");
-        assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(validUrl);
-        assertThat(startedActivity.getData()).isNull();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withHttpUrl_withoutUserClick_shouldNotOpenBrowser() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(false);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
-        String validUrl = "http://www.mopub.com";
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, validUrl);
-
-        assertThat(didOverrideUrl).isTrue();
-        verify(htmlWebViewListener, never()).onClicked();
-
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withClickTrackingRedirect_withUserClick_shouldNotChangeUrl() throws Exception {
-        String validUrl = "http://www.mopub.com";
-        stub(htmlWebView.wasClicked()).toReturn(true);
-
-        subject.shouldOverrideUrlLoading(htmlWebView, validUrl);
-
-        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(validUrl);
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withClickTrackingRedirect_withoutUserClick_shouldChangeUrl() throws Exception {
-        String validUrl = "http://www.mopub.com";
-        stub(htmlWebView.wasClicked()).toReturn(false);
-
-        subject.shouldOverrideUrlLoading(htmlWebView, validUrl);
-
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withEmptyUrl_withUserClick_shouldLoadAboutBlank() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(true);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
-
-        subject.shouldOverrideUrlLoading(htmlWebView, "");
-
-        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(startedActivity.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser");
-        assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo("about:blank");
-        assertThat(startedActivity.getData()).isNull();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withEmptyUrl_withoutUserClick_shouldLoadAboutBlank() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(false);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
-
-        subject.shouldOverrideUrlLoading(htmlWebView, "");
-
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withNativeBrowserScheme_withUserClick_shouldStartIntentWithActionView() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(true);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
-
-        boolean shouldOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView,
-                "mopubnativebrowser://navigate?url=http%3A%2F%2Fwww.mopub.com");
-
-        assertThat(shouldOverrideUrl).isTrue();
-        verify(htmlWebViewListener).onClicked();
-        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(startedActivity.getAction()).isEqualTo("android.intent.action.VIEW");
-        assertThat(startedActivity.getData().toString()).isEqualTo("http://www.mopub.com");
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withNativeBrowserScheme_withoutUserClick_shouldStartIntentWithActionView() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(false);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
-
-        boolean shouldOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView,
-                "mopubnativebrowser://navigate?url=http%3A%2F%2Fwww.mopub.com");
-
-        assertThat(shouldOverrideUrl).isTrue();
-        verify(htmlWebViewListener, never()).onClicked();
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withNativeBrowserScheme_butOpaqueUri_withUserClick_shouldNotBeHandledByNativeBrowser() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(true);
-        String opaqueNativeBrowserUriString = "mopubnativebrowser:navigate?url=http%3A%2F%2Fwww.mopub.com";
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
-
-        boolean shouldOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, opaqueNativeBrowserUriString);
-
-        assertThat(shouldOverrideUrl).isTrue();
-        verify(htmlWebViewListener).onClicked();
-        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(startedActivity.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser");
-        assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(opaqueNativeBrowserUriString);
-        assertThat(startedActivity.getData()).isNull();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withNativeBrowserScheme_butOpaqueUri_withoutUserClick_shouldNotLoad() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(false);
-        String opaqueNativeBrowserUriString = "mopubnativebrowser:navigate?url=http%3A%2F%2Fwww.mopub.com";
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
-
-        boolean shouldOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, opaqueNativeBrowserUriString);
-
-        assertThat(shouldOverrideUrl).isTrue();
-        verify(htmlWebViewListener, never()).onClicked();
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withNativeBrowserScheme_withInvalidHostSchemeUrl_withUserClick_shouldNotInvokeNativeBrowser() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(true);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
-
-        boolean shouldOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, "something://blah?url=invalid");
-
-        assertThat(shouldOverrideUrl).isTrue();
-        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(startedActivity.getAction()).isNotEqualTo("android.intent.action.VIEW");
-        verify(htmlWebViewListener).onClicked();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withNativeBrowserScheme_withInvalidHostSchemeUrl_withoutUserClick_shouldNotInvokeNativeBrowser() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(false);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
-
-        boolean shouldOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, "something://blah?url=invalid");
-
-        assertThat(shouldOverrideUrl).isTrue();
-        verify(htmlWebViewListener, never()).onClicked();
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
-    }
-
-    @Test
-    public void onPageStarted_whenLoadedUrlStartsWithRedirect_withUserClick_shouldOpenInBrowser() throws Exception {
-        String url = "redirectUrlToLoad";
-        stub(htmlWebView.wasClicked()).toReturn(true);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, "redirect");
-        WebView view = mock(WebView.class);
-        subject.onPageStarted(view, url, null);
-
-        verify(view).stopLoading();
-
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(intent.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(url);
-        assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(intent.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser");
-    }
-
-    @Test
-    public void onPageStarted_whenLoadedUrlStartsWithRedirect_withoutUserClick_shouldOpenInBrowser() throws Exception {
-        String url = "redirectUrlToLoad";
-        stub(htmlWebView.wasClicked()).toReturn(false);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, "redirect");
-        WebView view = mock(WebView.class);
-        subject.onPageStarted(view, url, null);
-
-        verify(view).stopLoading();
-
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
-    }
-
-    @Test
-    public void onPageStarted_whenLoadedUrlStartsWithRedirectAndHasClickthrough_withUserClick_shouldNotChangeUrl_shouldOpenInBrowser() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(true);
-        String url = "redirectUrlToLoad";
-        WebView view = mock(WebView.class);
-        subject.onPageStarted(view, url, null);
-
-        verify(view).stopLoading();
-
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(intent.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(url);
-        assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(intent.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser");
-    }
-
-    @Test
-    public void onPageStarted_whenLoadedUrlStartsWithRedirectAndHasClickthrough_withoutUserClick_shouldNotOpenInBrowser() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(false);
-        String url = "redirectUrlToLoad";
-        WebView view = mock(WebView.class);
-        subject.onPageStarted(view, url, null);
-
-        verify(view).stopLoading();
-
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
-    }
-
-    @Test
-    public void onPageStarted_whenLoadedUrlStartsWithRedirectAndHasClickthrough_withUserClick_whenMoPubBrowserCannotHandleIntent_shouldOpenInNativeBrowser() throws Exception {
-        Context mockContext = mock(Context.class);
-        stub(htmlWebView.wasClicked()).toReturn(true);
-        stub(htmlWebView.getContext()).toReturn(mockContext);
-        String url = "redirectUrlToLoad";
-
-        // We only want startActivity() to throw an exception the first time we call it.
-        doThrow(new ActivityNotFoundException())
-                .doNothing()
-                .when(mockContext).startActivity(any(Intent.class));
-
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, "clickthrough", "redirect");
-        subject.onPageStarted(htmlWebView, url, null);
-
-        ArgumentCaptor<Intent> intentArgumentCaptor = ArgumentCaptor.forClass(Intent.class);
-        verify(mockContext, times(2)).startActivity(intentArgumentCaptor.capture());
-
-        Intent intent = intentArgumentCaptor.getAllValues().get(1);
-        assertThat(intent.getAction()).isEqualTo("android.intent.action.VIEW");
-        assertThat(intent.getData().toString()).isEqualTo("about:blank");
-        assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        verify(htmlWebViewListener, times(1)).onClicked();
-    }
-
-    @Test
-    public void onPageStarted_whenLoadedUrlDoesntStartWithRedirect_shouldDoNothing() throws Exception {
-        WebView view = mock(WebView.class);
-        subject.onPageStarted(view, "this doesn't start with redirect", null);
-
-        verify(view, never()).stopLoading();
-
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
-    }
-
-    @Test
-    public void launchIntentForUserClick_shouldStartActivityAndResetClickStatusAndReturnTrue() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(true);
-        Context context = mock(Context.class);
-        Intent intent = mock(Intent.class);
-
-        boolean result = subject.launchIntentForUserClick(context, intent, null);
-
-        verify(context).startActivity(eq(intent));
-        verify(htmlWebView).onResetUserClick();
-        assertThat(result).isTrue();
-    }
-
-    @Test
-    public void launchIntentForUserClick_whenUserHasNotClicked_shouldNotStartActivityAndReturnFalse() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(false);
-        Context context = mock(Context.class);
-        Intent intent = mock(Intent.class);
-
-        boolean result = subject.launchIntentForUserClick(context, intent, null);
-
-        verify(context, never()).startActivity(any(Intent.class));
-        verify(htmlWebView, never()).onResetUserClick();
-        assertThat(result).isFalse();
-    }
-
-    @Test
-    public void launchIntentForUserClick_whenNoMatchingActivity_shouldNotStartActivityAndReturnFalse() throws Exception {
-        Context context = mock(Context.class);
-        Intent intent = mock(Intent.class);
-
-        stub(htmlWebView.wasClicked()).toReturn(true);
-        doThrow(new ActivityNotFoundException()).when(context).startActivity(any(Intent.class));
-
-        boolean result = subject.launchIntentForUserClick(context, intent, null);
-
-        verify(htmlWebView, never()).onResetUserClick();
-        assertThat(result).isFalse();
-
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
-    }
-
-    @Test
-    public void launchIntentForUserClick_whenContextIsNull_shouldNotStartActivityAndReturnFalse() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(true);
-        Intent intent = new Intent();
-
-        boolean result = subject.launchIntentForUserClick(null, intent, null);
-
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
-        verify(htmlWebView, never()).onResetUserClick();
-        assertThat(result).isFalse();
-    }
-
-    private void assertPhoneUrlStartedCorrectIntent(String url) {
-        boolean didOverrideUrl;
-
-        stub(htmlWebView.wasClicked()).toReturn(true);
-        didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, url);
-        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(startedActivity.getAction()).isEqualTo(Intent.ACTION_VIEW);
-        assertThat(startedActivity.getData().toString()).isEqualTo(url);
-        assertThat(didOverrideUrl).isTrue();
-        verify(htmlWebViewListener).onClicked();
-        reset(htmlWebViewListener);
-
-        stub(htmlWebView.wasClicked()).toReturn(false);
-        didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, url);
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
-        assertThat(didOverrideUrl).isTrue();
-        verify(htmlWebViewListener, never()).onClicked();
-        reset(htmlWebViewListener);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
deleted file mode 100644
index 78c49a34..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
+++ /dev/null
@@ -1,282 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.view.View;
-import android.view.ViewGroup;
-import android.webkit.WebViewClient;
-import android.widget.FrameLayout;
-
-import com.mopub.common.AdReport;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.TestHtmlInterstitialWebViewFactory;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.shadows.ShadowLocalBroadcastManager;
-
-import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.getHtmlInterstitialIntentFilter;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
-import static com.mopub.common.DataKeys.CLICKTHROUGH_URL_KEY;
-import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.common.DataKeys.REDIRECT_URL_KEY;
-import static com.mopub.common.DataKeys.SCROLLABLE_KEY;
-import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(SdkTestRunner.class)
-public class MoPubActivityTest {
-    private static final String EXPECTED_HTML_DATA = "htmlData";
-    private static final boolean EXPECTED_IS_SCROLLABLE = true;
-    @Mock private AdReport mockAdReport;
-    private static final String EXPECTED_REDIRECT_URL = "redirectUrl";
-    private static final String EXPECTED_CLICKTHROUGH_URL = "http://expected_url";
-
-    @Mock private BroadcastReceiver broadcastReceiver;
-    private long testBroadcastIdentifier = 2222;
-
-    private HtmlInterstitialWebView htmlInterstitialWebView;
-    private CustomEventInterstitialListener customEventInterstitialListener;
-
-    private MoPubActivity subject;
-
-    @Before
-    public void setUp() throws Exception {
-        htmlInterstitialWebView = TestHtmlInterstitialWebViewFactory.getSingletonMock();
-        resetMockedView(htmlInterstitialWebView);
-
-        Context context = Robolectric.buildActivity(Activity.class).create().get();
-        Intent moPubActivityIntent = MoPubActivity.createIntent(context,
-                EXPECTED_HTML_DATA, mockAdReport, EXPECTED_IS_SCROLLABLE,
-                EXPECTED_REDIRECT_URL,
-                EXPECTED_CLICKTHROUGH_URL, testBroadcastIdentifier);
-
-        subject = Robolectric.buildActivity(MoPubActivity.class).withIntent(moPubActivityIntent).create().get();
-        customEventInterstitialListener = mock(CustomEventInterstitialListener.class);
-
-        resetMockedView(htmlInterstitialWebView);
-    }
-
-    @Test
-    public void preRenderHtml_shouldPreloadTheHtml() throws Exception {
-        String htmlData = "this is nonsense";
-        MoPubActivity.preRenderHtml(subject, mockAdReport, customEventInterstitialListener, htmlData);
-
-        verify(htmlInterstitialWebView).enablePlugins(eq(false));
-        verify(htmlInterstitialWebView).loadHtmlResponse(htmlData);
-    }
-
-    @Test
-    public void preRenderHtml_shouldHaveAWebViewClientThatForwardsFinishLoad() throws Exception {
-        MoPubActivity.preRenderHtml(subject, mockAdReport, customEventInterstitialListener, null);
-
-        ArgumentCaptor<WebViewClient> webViewClientCaptor = ArgumentCaptor.forClass(WebViewClient.class);
-        verify(htmlInterstitialWebView).setWebViewClient(webViewClientCaptor.capture());
-        WebViewClient webViewClient = webViewClientCaptor.getValue();
-
-        webViewClient.shouldOverrideUrlLoading(null, "mopub://finishLoad");
-
-        verify(customEventInterstitialListener).onInterstitialLoaded();
-        verify(customEventInterstitialListener, never()).onInterstitialFailed(any(MoPubErrorCode.class));
-    }
-
-    @Test
-    public void preRenderHtml_shouldHaveAWebViewClientThatForwardsFailLoad() throws Exception {
-        MoPubActivity.preRenderHtml(subject, mockAdReport, customEventInterstitialListener, null);
-
-        ArgumentCaptor<WebViewClient> webViewClientCaptor = ArgumentCaptor.forClass(WebViewClient.class);
-        verify(htmlInterstitialWebView).setWebViewClient(webViewClientCaptor.capture());
-        WebViewClient webViewClient = webViewClientCaptor.getValue();
-
-        webViewClient.shouldOverrideUrlLoading(null, "mopub://failLoad");
-
-        verify(customEventInterstitialListener, never()).onInterstitialLoaded();
-        verify(customEventInterstitialListener).onInterstitialFailed(any(MoPubErrorCode.class));
-    }
-
-    @Test
-    public void onCreate_shouldSetContentView() throws Exception {
-        subject.onCreate(null);
-
-        assertThat(getContentView().getChildCount()).isEqualTo(1);
-    }
-
-    @Test
-    public void onCreate_shouldLayoutWebView() throws Exception {
-        subject.onCreate(null);
-
-        ArgumentCaptor<FrameLayout.LayoutParams> captor = ArgumentCaptor.forClass(FrameLayout.LayoutParams.class);
-        verify(htmlInterstitialWebView).setLayoutParams(captor.capture());
-        FrameLayout.LayoutParams actualLayoutParams = captor.getValue();
-
-        assertThat(actualLayoutParams.width).isEqualTo(FrameLayout.LayoutParams.MATCH_PARENT);
-        assertThat(actualLayoutParams.height).isEqualTo(FrameLayout.LayoutParams.MATCH_PARENT);
-    }
-
-    @Test
-    public void getAdView_shouldReturnPopulatedHtmlWebView() throws Exception {
-        View adView = subject.getAdView();
-
-        assertThat(adView).isSameAs(htmlInterstitialWebView);
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestListener()).isNotNull();
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestIsScrollable()).isEqualTo(EXPECTED_IS_SCROLLABLE);
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestClickthroughUrl()).isEqualTo(EXPECTED_CLICKTHROUGH_URL);
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestRedirectUrl()).isEqualTo(EXPECTED_REDIRECT_URL);
-        verify(htmlInterstitialWebView).loadHtmlResponse(EXPECTED_HTML_DATA);
-    }
-
-    @Test
-    public void onDestroy_shouldDestroyMoPubView() throws Exception {
-        subject.onCreate(null);
-        subject.onDestroy();
-
-        verify(htmlInterstitialWebView).destroy();
-        assertThat(getContentView().getChildCount()).isEqualTo(0);
-    }
-
-    @Test
-    public void onDestroy_shouldFireJavascriptWebviewDidClose() throws Exception {
-        subject.onCreate(null);
-        subject.onDestroy();
-
-        verify(htmlInterstitialWebView).loadUrl(eq("javascript:webviewDidClose();"));
-    }
-
-    @Test
-    public void start_shouldStartMoPubActivityWithCorrectParameters() throws Exception {
-        MoPubActivity.start(subject, "expectedResponse", mockAdReport, true, "redirectUrl", "clickthroughUrl", testBroadcastIdentifier);
-
-        Intent nextStartedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(nextStartedActivity.getStringExtra(HTML_RESPONSE_BODY_KEY)).isEqualTo("expectedResponse");
-        assertThat(nextStartedActivity.getBooleanExtra(SCROLLABLE_KEY, false)).isTrue();
-        assertThat(nextStartedActivity.getStringExtra(REDIRECT_URL_KEY)).isEqualTo("redirectUrl");
-        assertThat(nextStartedActivity.getStringExtra(CLICKTHROUGH_URL_KEY)).isEqualTo("clickthroughUrl");
-        assertThat(nextStartedActivity.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(nextStartedActivity.getComponent().getClassName()).isEqualTo("com.mopub.mobileads.MoPubActivity");
-    }
-
-    @Test
-    public void getAdView_shouldCreateHtmlInterstitialWebViewAndLoadResponse() throws Exception {
-        subject.getAdView();
-
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestListener()).isNotNull();
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestIsScrollable()).isEqualTo(EXPECTED_IS_SCROLLABLE);
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestRedirectUrl()).isEqualTo(EXPECTED_REDIRECT_URL);
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestClickthroughUrl()).isEqualTo(EXPECTED_CLICKTHROUGH_URL);
-        verify(htmlInterstitialWebView).loadHtmlResponse(EXPECTED_HTML_DATA);
-    }
-
-    @Test
-    public void getAdView_shouldSetUpForBroadcastingClicks() throws Exception {
-        subject.getAdView();
-        BroadcastReceiver broadcastReceiver = mock(BroadcastReceiver.class);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
-
-        TestHtmlInterstitialWebViewFactory.getLatestListener().onInterstitialClicked();
-
-        ArgumentCaptor<Intent> intentCaptor = ArgumentCaptor.forClass(Intent.class);
-        verify(broadcastReceiver).onReceive(any(Context.class), intentCaptor.capture());
-        Intent intent = intentCaptor.getValue();
-        assertThat(intent.getAction()).isEqualTo(ACTION_INTERSTITIAL_CLICK);
-    }
-
-    @Test
-    public void getAdView_shouldSetUpForBroadcastingFail() throws Exception {
-        subject.getAdView();
-        BroadcastReceiver broadcastReceiver = mock(BroadcastReceiver.class);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
-
-        TestHtmlInterstitialWebViewFactory.getLatestListener().onInterstitialFailed(UNSPECIFIED);
-
-        ArgumentCaptor<Intent> intentCaptor = ArgumentCaptor.forClass(Intent.class);
-        verify(broadcastReceiver).onReceive(any(Context.class), intentCaptor.capture());
-        Intent intent = intentCaptor.getValue();
-        assertThat(intent.getAction()).isEqualTo(ACTION_INTERSTITIAL_FAIL);
-
-        assertThat(shadowOf(subject).isFinishing()).isTrue();
-    }
-
-    @Test
-    public void broadcastingInterstitialListener_onInterstitialLoaded_shouldCallJavascriptWebViewDidAppear() throws Exception {
-        MoPubActivity.BroadcastingInterstitialListener broadcastingInterstitialListener = ((MoPubActivity) subject).new BroadcastingInterstitialListener();
-
-        broadcastingInterstitialListener.onInterstitialLoaded();
-
-        verify(htmlInterstitialWebView).loadUrl(eq("javascript:webviewDidAppear();"));
-    }
-
-    @Test
-    public void broadcastingInterstitialListener_onInterstitialFailed_shouldBroadcastFailAndFinish() throws Exception {
-        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_FAIL, testBroadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
-
-        MoPubActivity.BroadcastingInterstitialListener broadcastingInterstitialListener = ((MoPubActivity) subject).new BroadcastingInterstitialListener();
-        broadcastingInterstitialListener.onInterstitialFailed(null);
-
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
-        assertThat(shadowOf(subject).isFinishing()).isTrue();
-    }
-
-    @Test
-    public void broadcastingInterstitialListener_onInterstitialClicked_shouldBroadcastClick() throws Exception {
-        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_CLICK, testBroadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
-
-        MoPubActivity.BroadcastingInterstitialListener broadcastingInterstitialListener = ((MoPubActivity) subject).new BroadcastingInterstitialListener();
-        broadcastingInterstitialListener.onInterstitialClicked();
-
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
-    }
-
-    @Test
-    public void onCreate_shouldBroadcastInterstitialShow() throws Exception {
-        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, testBroadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
-
-        subject.onCreate(null);
-
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
-    }
-
-    @Test
-    public void onDestroy_shouldBroadcastInterstitialDismiss() throws Exception {
-        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, testBroadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
-
-        subject.onCreate(null);
-        subject.onDestroy();
-
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
-    }
-
-    private FrameLayout getContentView() {
-        return (FrameLayout) ((ViewGroup) subject.findViewById(android.R.id.content)).getChildAt(0);
-    }
-
-    protected void resetMockedView(View view) {
-        reset(view);
-        when(view.getLayoutParams()).thenReturn(
-                new FrameLayout.LayoutParams(FrameLayout.LayoutParams.WRAP_CONTENT,
-                        FrameLayout.LayoutParams.WRAP_CONTENT));
-    }
-}
-
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java
deleted file mode 100644
index 6052109a..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java
+++ /dev/null
@@ -1,68 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.network.MoPubRequestQueue;
-import com.mopub.network.Networking;
-import com.mopub.network.TrackingRequest;
-import com.mopub.volley.RequestQueue;
-import com.mopub.volley.VolleyError;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Captor;
-import org.mockito.Mock;
-
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class MoPubConversionTrackerTest {
-    private MoPubConversionTracker subject;
-    private Activity context;
-    @Mock
-    MoPubRequestQueue mockRequestQueue;
-    @Captor
-    ArgumentCaptor<TrackingRequest> requestCaptor;
-
-    private String expectedUdid;
-    private boolean dnt = false;
-    private static final String TEST_UDID = "20b013c721c";
-
-    @Before
-    public void setUp() throws Exception {
-        subject = new MoPubConversionTracker();
-        context = new Activity();
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-    }
-
-    @Test
-    public void reportAppOpen_Twice_shouldCallOnlyOnce() {
-        subject.reportAppOpen(context);
-        verify(mockRequestQueue).add(requestCaptor.capture());
-
-        reset(mockRequestQueue);
-        requestCaptor.getValue().deliverResponse(null);
-
-        subject.reportAppOpen(context);
-        verify(mockRequestQueue, never()).add(any(TrackingRequest.class));
-    }
-
-    @Test
-    public void reportAppOpen_fails_shouldCallAgain() {
-        subject.reportAppOpen(context);
-        verify(mockRequestQueue).add(requestCaptor.capture());
-
-        reset(mockRequestQueue);
-        requestCaptor.getValue().deliverError(new VolleyError());
-
-        subject.reportAppOpen(context);
-        verify(mockRequestQueue).add(any(TrackingRequest.class));
-    }
-}
-
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
deleted file mode 100644
index f1ae01ae..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
+++ /dev/null
@@ -1,362 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-
-import com.mopub.common.LocationService;
-import com.mopub.common.MoPub;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.TestAdViewControllerFactory;
-import com.mopub.mobileads.test.support.TestCustomEventInterstitialAdapterFactory;
-
-import org.junit.Before;
-import org.junit.Ignore;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import java.math.BigDecimal;
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_DATA;
-import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
-import static com.mopub.mobileads.MoPubErrorCode.CANCELLED;
-import static com.mopub.mobileads.MoPubErrorCode.INTERNAL_ERROR;
-import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class MoPubInterstitialTest {
-
-    private static final String KEYWORDS_VALUE = "expected_keywords";
-    private static final String AD_UNIT_ID_VALUE = "expected_adunitid";
-    private static final String SOURCE_VALUE = "expected_source";
-    private static final String CLICKTHROUGH_URL_VALUE = "expected_clickthrough_url";
-    private Activity activity;
-    private MoPubInterstitial subject;
-    private Map<String, String> serverExtras;
-    private CustomEventInterstitialAdapter customEventInterstitialAdapter;
-    private MoPubInterstitial.InterstitialAdListener interstitialAdListener;
-    private MoPubInterstitial.MoPubInterstitialView interstitialView;
-    private AdViewController adViewController;
-    private String customEventClassName;
-
-    @Before
-    public void setUp() throws Exception {
-        activity = new Activity();
-        subject = new MoPubInterstitial(activity, AD_UNIT_ID_VALUE);
-        interstitialAdListener = mock(MoPubInterstitial.InterstitialAdListener.class);
-        subject.setInterstitialAdListener(interstitialAdListener);
-
-        interstitialView = mock(MoPubInterstitial.MoPubInterstitialView.class);
-
-        customEventClassName = "class name";
-        serverExtras = new HashMap<String, String>();
-        serverExtras.put("testExtra", "class data");
-
-        customEventInterstitialAdapter = TestCustomEventInterstitialAdapterFactory.getSingletonMock();
-        reset(customEventInterstitialAdapter);
-        adViewController = TestAdViewControllerFactory.getSingletonMock();
-    }
-
-    @Test
-    public void forceRefresh_shouldResetInterstitialViewAndMarkNotDestroyed() throws Exception {
-        subject.setInterstitialView(interstitialView);
-        subject.onCustomEventInterstitialLoaded();
-        subject.forceRefresh();
-
-        assertThat(subject.isReady()).isFalse();
-        assertThat(subject.isDestroyed()).isFalse();
-        verify(interstitialView).forceRefresh();
-    }
-
-    @Test
-    public void setKeywordsTest() throws Exception {
-        subject.setInterstitialView(interstitialView);
-        String keywords = "these_are_keywords";
-
-        subject.setKeywords(keywords);
-        verify(interstitialView).setKeywords(eq(keywords));
-    }
-    @Test
-    public void getKeywordsTest() throws Exception {
-        subject.setInterstitialView(interstitialView);
-
-        subject.getKeywords();
-        verify(interstitialView).getKeywords();
-    }
-
-    @Test
-    public void setTestingTest() throws Exception {
-        subject.setInterstitialView(interstitialView);
-        subject.setTesting(true);
-        verify(interstitialView).setTesting(eq(true));
-    }
-
-    @Test
-    public void getInterstitialAdListenerTest() throws Exception {
-        interstitialAdListener = mock(MoPubInterstitial.InterstitialAdListener.class);
-        subject.setInterstitialAdListener(interstitialAdListener);
-        assertThat(subject.getInterstitialAdListener()).isSameAs(interstitialAdListener);
-    }
-
-    @Test
-    public void setLocationAwarenss_shouldChangeGlobalSetting() {
-        assertThat(MoPub.getLocationAwareness()).isEqualTo(MoPub.LocationAwareness.NORMAL);
-        subject.setLocationAwareness(LocationService.LocationAwareness.DISABLED);
-        assertThat(MoPub.getLocationAwareness()).isEqualTo(MoPub.LocationAwareness.DISABLED);
-    }
-
-    @Test
-    public void getTestingTest() throws Exception {
-        subject.setInterstitialView(interstitialView);
-        subject.getTesting();
-        verify(interstitialView).getTesting();
-    }
-
-    @Test
-    public void setLocalExtrasTest() throws Exception {
-        subject.setInterstitialView(interstitialView);
-
-        Map<String,Object> localExtras = new HashMap<String, Object>();
-        localExtras.put("guy", new Activity());
-        localExtras.put("other guy", new BigDecimal(27f));
-
-        subject.setLocalExtras(localExtras);
-        verify(interstitialView).setLocalExtras(eq(localExtras));
-    }
-
-    @Test
-    public void loadCustomEvent_shouldCreateAndLoadCustomEventInterstitialAdapter() throws Exception {
-        MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = subject.new MoPubInterstitialView(activity);
-        moPubInterstitialView.loadCustomEvent(customEventClassName, serverExtras);
-
-        assertThat(TestCustomEventInterstitialAdapterFactory.getLatestMoPubInterstitial()).isSameAs(subject);
-        assertThat(TestCustomEventInterstitialAdapterFactory.getLatestClassName()).isEqualTo("class name");
-        assertThat(TestCustomEventInterstitialAdapterFactory.getLatestServerExtras().get("testExtra")).isEqualTo("class data");
-    }
-
-    @Test
-    public void onCustomEventInterstitialLoaded_shouldNotifyListener() throws Exception {
-        subject.setInterstitialView(interstitialView);
-
-        subject.onCustomEventInterstitialLoaded();
-        verify(interstitialAdListener).onInterstitialLoaded(eq(subject));
-
-        verify(interstitialView, never()).trackImpression();
-    }
-
-    @Test
-    public void onCustomEventInterstitialLoaded_whenInterstitialAdListenerIsNull_shouldNotNotifyListenerOrTrackImpression() throws Exception {
-        subject.setInterstitialView(interstitialView);
-        subject.setInterstitialAdListener(null);
-
-        subject.onCustomEventInterstitialLoaded();
-
-        verify(interstitialView, never()).trackImpression();
-        verify(interstitialAdListener, never()).onInterstitialLoaded(eq(subject));
-    }
-
-    @Test
-    public void onCustomEventInterstitialFailed_shouldLoadFailUrl() throws Exception {
-        subject.setInterstitialView(interstitialView);
-
-        subject.onCustomEventInterstitialFailed(INTERNAL_ERROR);
-
-        verify(interstitialView).loadFailUrl(INTERNAL_ERROR);
-    }
-
-    @Test
-    public void onCustomEventInterstitialShown_shouldTrackImpressionAndNotifyListener() throws Exception {
-        subject.setInterstitialView(interstitialView);
-        subject.onCustomEventInterstitialShown();
-
-        verify(interstitialView).trackImpression();
-        verify(interstitialAdListener).onInterstitialShown(eq(subject));
-    }
-
-    @Test
-    public void onCustomEventInterstitialShown_whenInterstitialAdListenerIsNull_shouldNotNotifyListener() throws Exception {
-        subject.setInterstitialAdListener(null);
-        subject.onCustomEventInterstitialShown();
-        verify(interstitialAdListener, never()).onInterstitialShown(eq(subject));
-    }
-
-    @Test
-    public void onCustomEventInterstitialClicked_shouldRegisterClickAndNotifyListener() throws Exception {
-        subject.setInterstitialView(interstitialView);
-
-        subject.onCustomEventInterstitialClicked();
-
-        verify(interstitialView).registerClick();
-        verify(interstitialAdListener).onInterstitialClicked(eq(subject));
-    }
-
-    @Test
-    public void onCustomEventInterstitialClicked_whenInterstitialAdListenerIsNull_shouldNotNotifyListener() throws Exception {
-        subject.setInterstitialAdListener(null);
-
-        subject.onCustomEventInterstitialClicked();
-
-        verify(interstitialAdListener, never()).onInterstitialClicked(eq(subject));
-    }
-
-    @Test
-    public void onCustomEventInterstitialDismissed_shouldNotifyListener() throws Exception {
-        subject.onCustomEventInterstitialDismissed();
-
-        verify(interstitialAdListener).onInterstitialDismissed(eq(subject));
-    }
-
-    @Test
-    public void onCustomEventInterstitialDismissed_whenInterstitialAdListenerIsNull_shouldNotNotifyListener() throws Exception {
-        subject.setInterstitialAdListener(null);
-        subject.onCustomEventInterstitialDismissed();
-        verify(interstitialAdListener, never()).onInterstitialDismissed(eq(subject));
-    }
-
-    @Test
-    public void destroy_shouldPreventOnCustomEventInterstitialLoadedNotification() throws Exception {
-        subject.destroy();
-
-        subject.onCustomEventInterstitialLoaded();
-
-        verify(interstitialAdListener, never()).onInterstitialLoaded(eq(subject));
-    }
-
-    @Test
-    public void destroy_shouldPreventOnCustomEventInterstitialFailedNotification() throws Exception {
-        subject.setInterstitialView(interstitialView);
-        subject.destroy();
-
-        subject.onCustomEventInterstitialFailed(UNSPECIFIED);
-
-        verify(interstitialView, never()).loadFailUrl(UNSPECIFIED);
-    }
-
-    @Test
-    public void destroy_shouldPreventOnCustomEventInterstitialClickedFromRegisteringClick() throws Exception {
-        subject.setInterstitialView(interstitialView);
-        subject.destroy();
-
-        subject.onCustomEventInterstitialClicked();
-
-        verify(interstitialView, never()).registerClick();
-    }
-
-    @Test
-    public void destroy_shouldPreventOnCustomEventShownNotification() throws Exception {
-        subject.destroy();
-
-        subject.onCustomEventInterstitialShown();
-
-        verify(interstitialAdListener, never()).onInterstitialShown(eq(subject));
-    }
-
-    @Test
-    public void destroy_shouldPreventOnCustomEventInterstitialDismissedNotification() throws Exception {
-        subject.destroy();
-
-        subject.onCustomEventInterstitialDismissed();
-
-        verify(interstitialAdListener, never()).onInterstitialDismissed(eq(subject));
-    }
-
-    @Test
-    public void newlyCreated_shouldNotBeReadyAndNotShow() throws Exception {
-        assertShowsCustomEventInterstitial(false);
-    }
-
-    @Test
-    public void loadingCustomEventInterstitial_shouldBecomeReadyToShowCustomEventAd() throws Exception {
-        subject.onCustomEventInterstitialLoaded();
-
-        assertShowsCustomEventInterstitial(true);
-    }
-
-    @Ignore("pending")
-    @Test
-    public void dismissingHtmlInterstitial_shouldNotBecomeReadyToShowHtmlAd() throws Exception {
-//        EventForwardingBroadcastReceiver broadcastReceiver = new EventForwardingBroadcastReceiver(subject.mInterstitialAdListener);
-//
-//        subject.onCustomEventInterstitialLoaded();
-//        broadcastReceiver.onHtmlInterstitialDismissed();
-//
-//        assertShowsCustomEventInterstitial(false);
-    }
-
-    @Test
-    public void failingCustomEventInterstitial_shouldNotBecomeReadyToShowCustomEventAd() throws Exception {
-        subject.onCustomEventInterstitialLoaded();
-        subject.onCustomEventInterstitialFailed(CANCELLED);
-
-        assertShowsCustomEventInterstitial(false);
-    }
-
-    @Test
-    public void dismissingCustomEventInterstitial_shouldNotBecomeReadyToShowCustomEventAd() throws Exception {
-        subject.onCustomEventInterstitialLoaded();
-        subject.onCustomEventInterstitialDismissed();
-
-        assertShowsCustomEventInterstitial(false);
-    }
-
-    @Test
-    public void loadCustomEvent_shouldInitializeCustomEventInterstitialAdapter() throws Exception {
-        MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = subject.new MoPubInterstitialView(activity);
-
-        serverExtras.put("testExtra", "data");
-        moPubInterstitialView.loadCustomEvent("name", serverExtras);
-
-        assertThat(TestCustomEventInterstitialAdapterFactory.getLatestMoPubInterstitial()).isEqualTo(subject);
-        assertThat(TestCustomEventInterstitialAdapterFactory.getLatestClassName()).isEqualTo("name");
-        assertThat(TestCustomEventInterstitialAdapterFactory.getLatestServerExtras().get("testExtra")).isEqualTo("data");
-
-        verify(customEventInterstitialAdapter).setAdapterListener(eq(subject));
-        verify(customEventInterstitialAdapter).loadInterstitial();
-    }
-
-    @Test
-    public void loadCustomEvent_whenParamsMapIsNull_shouldCallLoadFailUrl() throws Exception {
-        MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = subject.new MoPubInterstitialView(activity);
-
-        moPubInterstitialView.loadCustomEvent(null, null);
-
-        verify(adViewController).loadFailUrl(eq(ADAPTER_NOT_FOUND));
-        verify(customEventInterstitialAdapter, never()).invalidate();
-        verify(customEventInterstitialAdapter, never()).loadInterstitial();
-    }
-
-    @Test
-    public void adFailed_shouldNotifyInterstitialAdListener() throws Exception {
-        MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = subject.new MoPubInterstitialView(activity);
-        moPubInterstitialView.adFailed(CANCELLED);
-
-        verify(interstitialAdListener).onInterstitialFailed(eq(subject), eq(CANCELLED));
-    }
-
-    private void loadCustomEvent() {
-        MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = subject.new MoPubInterstitialView(activity);
-
-        serverExtras.put(CUSTOM_EVENT_DATA.getKey(), "data");
-        moPubInterstitialView.loadCustomEvent("name", serverExtras);
-    }
-
-    private void assertShowsCustomEventInterstitial(boolean shouldBeReady) {
-        MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = subject.new MoPubInterstitialView(activity);
-        moPubInterstitialView.loadCustomEvent(customEventClassName, serverExtras);
-
-        assertThat(subject.isReady()).isEqualTo(shouldBeReady);
-        assertThat(subject.show()).isEqualTo(shouldBeReady);
-
-        if (shouldBeReady) {
-            verify(customEventInterstitialAdapter).showInterstitial();
-        } else {
-            verify(customEventInterstitialAdapter, never()).showInterstitial();
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
deleted file mode 100644
index e661758d..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
+++ /dev/null
@@ -1,213 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import com.mopub.common.AdType;
-import com.mopub.common.LifecycleListener;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.network.AdRequest;
-import com.mopub.network.AdResponse;
-import com.mopub.network.MoPubRequestQueue;
-import com.mopub.network.Networking;
-import com.mopub.volley.RequestQueue;
-import com.mopub.volley.VolleyError;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-
-import java.util.Map;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-public class MoPubRewardedVideoManagerTest {
-
-    @Mock
-    MoPubRequestQueue mockRequestQueue;
-    @Mock
-    MoPubRewardedVideoListener mockVideoListener;
-
-    AdRequest.Listener requestListener;
-    private AdRequest request;
-    private boolean mLoaded;
-
-    @Before
-    public void setup() {
-        MoPubRewardedVideoManager.init(Robolectric.buildActivity(Activity.class).create().get());
-        MoPubRewardedVideoManager.setVideoListener(mockVideoListener);
-
-        when(mockRequestQueue.add(any(AdRequest.class))).then(new Answer<Object>() {
-            @Override
-            public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {
-                request = ((AdRequest) invocationOnMock.getArguments()[0]);
-                requestListener = request.getListener();
-                return null;
-            }
-        });
-
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-    }
-
-    @Test
-    public void onAdSuccess_noCEFound_shouldCallFailCallback() throws Exception {
-        AdResponse testResponse = new AdResponse.Builder()
-                .setAdType(AdType.CUSTOM)
-                .setCustomEventClassName("doesn't_Exist")
-                .build();
-
-        MoPubRewardedVideoManager.loadVideo("testAdUnit");
-
-        requestListener.onSuccess(testResponse);
-
-        verify(mockVideoListener).onRewardedVideoLoadFailure(eq("testAdUnit"), eq(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR));
-        verifyNoMoreInteractions(mockVideoListener);
-    }
-
-    @Test
-    public void onAdSuccess_noCEFound_shouldLoadFailUrl() {
-        AdResponse testResponse = new AdResponse.Builder()
-                .setAdType(AdType.CUSTOM)
-                .setCustomEventClassName("doesn't_Exist")
-                .setFailoverUrl("fail.url")
-                .build();
-
-
-
-        MoPubRewardedVideoManager.loadVideo("testAdUnit");
-
-        assertThat(request.getUrl()).contains("testAdUnit");
-        requestListener.onSuccess(testResponse);
-        assertThat(request.getUrl()).isEqualTo("fail.url");
-        // Clear up the static state :(
-        requestListener.onErrorResponse(new VolleyError("reset"));
-    }
-
-    @Test
-    public void onAdSuccess_shouldInstantiateCustomEvent_andLoad() {
-        AdResponse testResponse = new AdResponse.Builder()
-                .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
-                .setAdType(AdType.CUSTOM)
-                .build();
-
-        MoPubRewardedVideoManager.loadVideo("testAdUnit");
-
-        requestListener.onSuccess(testResponse);
-        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
-    }
-
-    @Test
-    public void playVideo_shouldSetHasVideoFalse() {
-        AdResponse testResponse = new AdResponse.Builder()
-                .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
-                .setAdType(AdType.CUSTOM)
-                .build();
-
-        MoPubRewardedVideoManager.loadVideo("testAdUnit");
-
-        requestListener.onSuccess(testResponse);
-        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
-        MoPubRewardedVideoManager.showVideo("testAdUnit");
-        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isFalse();
-    }
-    
-    @Test
-    public void playVideo_whenNotHasVideo_shouldFail() {
-        AdResponse testResponse = new AdResponse.Builder()
-                .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$NoVideoCustomEvent")
-                .setAdType(AdType.CUSTOM)
-                .build();
-
-        MoPubRewardedVideoManager.loadVideo("testAdUnit");
-
-        requestListener.onSuccess(testResponse);
-        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isFalse();
-        MoPubRewardedVideoManager.showVideo("testAdUnit");
-        verify(mockVideoListener).onRewardedVideoLoadFailure(eq("testAdUnit"), eq(MoPubErrorCode.VIDEO_NOT_AVAILABLE));
-    }
-
-    @Test
-    public void onAdFailure_shouldCallFailCallback() {
-        VolleyError e = new VolleyError("testError!");
-
-        MoPubRewardedVideoManager.loadVideo("testAdUnit");
-
-        assertThat(request.getUrl()).contains("testAdUnit");
-        requestListener.onErrorResponse(e);
-        verify(mockVideoListener).onRewardedVideoLoadFailure(anyString(), any(MoPubErrorCode.class));
-        verifyNoMoreInteractions(mockVideoListener);
-    }
-
-    public static class TestCustomEvent extends CustomEventRewardedVideo {
-        protected boolean mPlayable = false;
-
-        @Nullable
-        @Override
-        protected CustomEventRewardedVideoListener getVideoListenerForSdk() {
-            return null;
-        }
-
-        @Nullable
-        @Override
-        protected LifecycleListener getLifecycleListener() {
-            return null;
-        }
-
-        @NonNull
-        @Override
-        protected String getAdNetworkId() {
-            return "id!";
-        }
-
-        @Override
-        protected void onInvalidate() {
-            mPlayable = false;
-        }
-
-        @Override
-        protected boolean checkAndInitializeSdk(@NonNull final Activity launcherActivity,
-                @NonNull final Map<String, Object> localExtras,
-                @NonNull final Map<String, String> serverExtras) throws Exception {
-            return false;
-        }
-
-        @Override
-        protected void loadWithSdkInitialized(@NonNull final Activity activity,
-                @NonNull final Map<String, Object> localExtras,
-                @NonNull final Map<String, String> serverExtras) throws Exception {
-            // Do nothing because robolectric handlers execute immediately.
-            mPlayable = true;
-        }
-
-        @Override
-        protected boolean hasVideoAvailable() {
-            return mPlayable;
-        }
-
-        @Override
-        protected void showVideo() {
-            MoPubRewardedVideoManager.onRewardedVideoStarted(TestCustomEvent.class, "id!");
-        }
-    }
-
-    public static class NoVideoCustomEvent extends TestCustomEvent {
-        @Override
-        protected void loadWithSdkInitialized(@NonNull final Activity activity,
-                @NonNull final Map<String, Object> localExtras,
-                @NonNull final Map<String, String> serverExtras) throws Exception {
-            mPlayable = false;
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
deleted file mode 100644
index cffcf3dc..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
+++ /dev/null
@@ -1,208 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.view.View;
-
-import com.mopub.common.LocationService;
-import com.mopub.common.MoPub;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.TestAdViewControllerFactory;
-import com.mopub.mobileads.test.support.TestCustomEventBannerAdapterFactory;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.shadows.ShadowApplication;
-
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class MoPubViewTest {
-    private MoPubView subject;
-    private Map<String,String> paramsMap = new HashMap<String, String>();
-    private CustomEventBannerAdapter customEventBannerAdapter;
-    private AdViewController adViewController;
-    private Context context;
-
-    @Before
-    public void setup() {
-        context = new Activity();
-        subject = new MoPubView(context);
-        customEventBannerAdapter = TestCustomEventBannerAdapterFactory.getSingletonMock();
-        reset(customEventBannerAdapter);
-        adViewController = TestAdViewControllerFactory.getSingletonMock();
-    }
-
-    @Test
-    public void screenStateBroadcastReceiver_withActionUserPresent_shouldUnpauseRefresh() throws Exception {
-        broadcastIntent(new Intent(Intent.ACTION_USER_PRESENT));
-
-        verify(adViewController).unpauseRefresh();
-    }
-
-    @Test
-    public void screenStateBroadcastReceiver_withActionScreenOff_shouldPauseRefersh() throws Exception {
-        broadcastIntent(new Intent(Intent.ACTION_SCREEN_OFF));
-
-        verify(adViewController).pauseRefresh();
-    }
-
-    @Test
-    public void screenStateBroadcastReceiver_withNullIntent_shouldDoNothing() throws Exception {
-        broadcastIntent(null);
-
-        verify(adViewController, never()).pauseRefresh();
-        verify(adViewController, never()).unpauseRefresh();
-    }
-
-    @Test
-    public void screenStateBroadcastReceiver_withRandomIntent_shouldDoNothing() throws Exception {
-        broadcastIntent(new Intent(Intent.ACTION_BATTERY_LOW));
-
-        verify(adViewController, never()).pauseRefresh();
-        verify(adViewController, never()).unpauseRefresh();
-    }
-
-    @Test
-    public void screenStateBroadcastReceiver_whenAdInBackground_shouldDoNothing() throws Exception {
-        subject.onWindowVisibilityChanged(View.INVISIBLE);
-        reset(adViewController);
-
-        broadcastIntent(new Intent(Intent.ACTION_USER_PRESENT));
-        verify(adViewController, never()).unpauseRefresh();
-
-        broadcastIntent(new Intent(Intent.ACTION_SCREEN_OFF));
-        verify(adViewController, never()).pauseRefresh();
-    }
-
-    @Test
-    public void screenStateBroadcastReceiver_afterOnDestroy_shouldDoNothing() throws Exception {
-        subject.destroy();
-
-        broadcastIntent(new Intent(Intent.ACTION_USER_PRESENT));
-        verify(adViewController, never()).unpauseRefresh();
-
-        broadcastIntent(new Intent(Intent.ACTION_SCREEN_OFF));
-        verify(adViewController, never()).pauseRefresh();
-    }
-
-    @Test
-    public void onWindowVisibilityChanged_fromVisibleToInvisible_shouldPauseRefresh() throws Exception {
-        // Default visibility is View.VISIBLE
-        subject.onWindowVisibilityChanged(View.INVISIBLE);
-
-        verify(adViewController).pauseRefresh();
-        verify(adViewController, never()).unpauseRefresh();
-    }
-
-
-    @Test
-    public void onWindowVisibilityChanged_fromInvisibleToVisible_shouldUnpauseRefresh() throws Exception {
-        subject.onWindowVisibilityChanged(View.INVISIBLE);
-        reset(adViewController);
-
-        subject.onWindowVisibilityChanged(View.VISIBLE);
-
-        verify(adViewController, never()).pauseRefresh();
-        verify(adViewController).unpauseRefresh();
-    }
-
-    @Test
-    public void onWindowVisibilityChanged_fromVisibleToVisible_shouldDoNothing() throws Exception {
-        // Default visibility is View.VISIBLE
-        subject.onWindowVisibilityChanged(View.VISIBLE);
-
-        verify(adViewController, never()).pauseRefresh();
-        verify(adViewController, never()).unpauseRefresh();
-    }
-
-    @Test
-    public void onWindowVisibilityChanged_fromInvisibleToGone_shouldDoNothing() throws Exception {
-        subject.onWindowVisibilityChanged(View.INVISIBLE);
-        reset(adViewController);
-
-        subject.onWindowVisibilityChanged(View.GONE);
-
-        verify(adViewController, never()).pauseRefresh();
-        verify(adViewController, never()).unpauseRefresh();
-    }
-
-    @Test
-    public void onWindowVisibilityChanged_fromGoneToInvisible_shouldDoNothing() throws Exception {
-        subject.onWindowVisibilityChanged(View.GONE);
-        reset(adViewController);
-
-        subject.onWindowVisibilityChanged(View.INVISIBLE);
-
-        verify(adViewController, never()).pauseRefresh();
-        verify(adViewController, never()).unpauseRefresh();
-    }
-
-    @Test
-    public void setAutorefreshEnabled_withRefreshTrue_shouldForwardToAdViewController() throws Exception {
-        subject.setAutorefreshEnabled(true);
-
-        verify(adViewController).forceSetAutorefreshEnabled(true);
-    }
-
-    @Test
-    public void setAutorefreshEnabled_withRefreshFalse_shouldForwardToAdViewController() throws Exception {
-        subject.setAutorefreshEnabled(false);
-
-        verify(adViewController).forceSetAutorefreshEnabled(false);
-    }
-    
-    @Test
-    public void nativeAdLoaded_shouldScheduleRefreshTimer() throws Exception {
-        subject.nativeAdLoaded();
-
-        verify(adViewController).scheduleRefreshTimerIfEnabled();
-    }
-
-    @Test
-    public void loadCustomEvent_shouldInitializeCustomEventBannerAdapter() throws Exception {
-        subject.loadCustomEvent("name", paramsMap);
-
-        assertThat(TestCustomEventBannerAdapterFactory.getLatestMoPubView()).isEqualTo(subject);
-        assertThat(TestCustomEventBannerAdapterFactory.getLatestClassName()).isEqualTo("name");
-        assertThat(TestCustomEventBannerAdapterFactory.getLatestClassData()).isEqualTo(paramsMap);
-
-        verify(customEventBannerAdapter).loadAd();
-    }
-
-    @Test
-    public void loadCustomEvent_whenParamsMapIsNull_shouldCallLoadFailUrl() throws Exception {
-        subject.loadCustomEvent(null, null);
-
-        verify(adViewController).loadFailUrl(eq(ADAPTER_NOT_FOUND));
-        verify(customEventBannerAdapter, never()).invalidate();
-        verify(customEventBannerAdapter, never()).loadAd();
-    }
-
-    @Test
-    public void setLocationAwarenss_shouldChangeGlobalSetting() {
-        assertThat(MoPub.getLocationAwareness()).isEqualTo(MoPub.LocationAwareness.NORMAL);
-        subject.setLocationAwareness(LocationService.LocationAwareness.DISABLED);
-        assertThat(MoPub.getLocationAwareness()).isEqualTo(MoPub.LocationAwareness.DISABLED);
-    }
-
-    private void broadcastIntent(final Intent intent) {
-        final List<ShadowApplication.Wrapper> wrappers = Robolectric.getShadowApplication().getRegisteredReceivers();
-
-        for (final ShadowApplication.Wrapper wrapper : wrappers) {
-            wrapper.broadcastReceiver.onReceive(context, intent);
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
deleted file mode 100644
index 26c495aa..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
+++ /dev/null
@@ -1,347 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.BroadcastReceiver;
-import android.content.ComponentName;
-import android.content.Context;
-import android.content.Intent;
-import android.os.Build.VERSION_CODES;
-import android.view.View;
-import android.view.ViewGroup;
-import android.view.WindowManager;
-import android.webkit.WebViewClient;
-import android.widget.FrameLayout;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mraid.MraidBridge;
-import com.mopub.mraid.MraidBridge.MraidWebView;
-import com.mopub.mraid.MraidController;
-import com.mopub.mraid.MraidController.MraidListener;
-
-import org.fest.assertions.api.ANDROID;
-import org.junit.Before;
-import org.junit.Ignore;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowLocalBroadcastManager;
-
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.getHtmlInterstitialIntentFilter;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
-import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(SdkTestRunner.class)
-public class MraidActivityTest {
-    static final String EXPECTED_SOURCE = "expected source";
-
-    @Mock MraidWebView mraidWebView;
-    @Mock MraidBridge mraidBridge;
-    @Mock MraidController mraidController;
-    @Mock CustomEventInterstitial.CustomEventInterstitialListener
-            customEventInterstitialListener;
-    @Mock BroadcastReceiver broadcastReceiver;
-
-    long testBroadcastIdentifier = 2222;
-
-    TestMraidActivity subject;
-
-    // Make a concrete version of the abstract class for testing purposes.
-    private static class TestMraidActivity extends MraidActivity {
-        View mraidWebView;
-
-        @Override
-        public View getAdView() {
-            return mraidWebView;
-        }
-    }
-
-    @Before
-    public void setUp() throws Exception {
-        subject = Robolectric.buildActivity(TestMraidActivity.class).get();
-        subject.mraidWebView = mraidWebView;
-        Robolectric.shadowOf(subject).callOnCreate(null);
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void preRenderHtml_shouldDisablePluginsSetListenersAndLoadHtml() throws Exception {
-        MraidActivity.preRenderHtml(subject, customEventInterstitialListener, "3:27");
-
-        verify(mraidWebView).enablePlugins(eq(false));
-        verify(mraidController).setMraidListener(any(MraidListener.class));
-        verify(mraidWebView).setWebViewClient(any(WebViewClient.class));
-        verify(mraidBridge).setContentHtml(eq("3:27"));
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialLoaded_whenMraidListenerOnReady() throws Exception {
-        MraidActivity.preRenderHtml(subject, customEventInterstitialListener, "");
-
-        ArgumentCaptor<MraidListener> mraidListenerArgumentCaptorr = ArgumentCaptor.forClass(MraidListener.class);
-        verify(mraidController).setMraidListener(mraidListenerArgumentCaptorr.capture());
-        MraidListener mraidListener = mraidListenerArgumentCaptorr.getValue();
-
-        mraidListener.onLoaded(null);
-
-        verify(customEventInterstitialListener).onInterstitialLoaded();
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialFailed_whenMraidListenerOnFailure() throws Exception {
-        MraidActivity.preRenderHtml(subject, customEventInterstitialListener, "");
-
-        ArgumentCaptor<MraidListener> mraidListenerArgumentCaptorr = ArgumentCaptor.forClass(MraidListener.class);
-        verify(mraidController).setMraidListener(mraidListenerArgumentCaptorr.capture());
-        MraidListener mraidListener = mraidListenerArgumentCaptorr.getValue();
-
-        mraidListener.onFailedToLoad();
-
-        verify(customEventInterstitialListener).onInterstitialFailed(null);
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void preRenderHtml_whenWebViewClientShouldOverrideUrlLoading_shouldReturnTrue() throws Exception {
-        MraidActivity.preRenderHtml(subject, customEventInterstitialListener, "");
-
-        ArgumentCaptor<WebViewClient> webViewClientArgumentCaptor = ArgumentCaptor.forClass(WebViewClient.class);
-        verify(mraidWebView).setWebViewClient(webViewClientArgumentCaptor.capture());
-        WebViewClient webViewClient = webViewClientArgumentCaptor.getValue();
-
-        boolean consumeUrlLoading = webViewClient.shouldOverrideUrlLoading(null, null);
-
-        assertThat(consumeUrlLoading).isTrue();
-        verify(customEventInterstitialListener, never()).onInterstitialLoaded();
-        verify(customEventInterstitialListener, never()).onInterstitialFailed(
-                any(MoPubErrorCode.class));
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialLoaded_whenWebViewClientOnPageFinished() throws Exception {
-        MraidActivity.preRenderHtml(subject, customEventInterstitialListener, "");
-
-        ArgumentCaptor<WebViewClient> webViewClientArgumentCaptor = ArgumentCaptor.forClass(WebViewClient.class);
-        verify(mraidWebView).setWebViewClient(webViewClientArgumentCaptor.capture());
-        WebViewClient webViewClient = webViewClientArgumentCaptor.getValue();
-
-        webViewClient.onPageFinished(null, null);
-
-        verify(customEventInterstitialListener).onInterstitialLoaded();
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void onCreate_shouldSetContentView() throws Exception {
-        subject.onCreate(null);
-
-        assertThat(getContentView().getChildCount()).isEqualTo(1);
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void onCreate_shouldSetupAnMraidView() throws Exception {
-        subject.onCreate(null);
-
-        assertThat(getContentView().getChildAt(0)).isSameAs(mraidWebView);
-        verify(mraidController).setMraidListener(any(MraidListener.class));
-
-        verify(mraidBridge).setContentHtml(EXPECTED_SOURCE);
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void onCreate_shouldSetLayoutOfMraidView() throws Exception {
-        subject.onCreate(null);
-
-        ArgumentCaptor<FrameLayout.LayoutParams> captor = ArgumentCaptor.forClass(
-                FrameLayout.LayoutParams.class);
-        verify(mraidWebView).setLayoutParams(captor.capture());
-        FrameLayout.LayoutParams actualLayoutParams = captor.getValue();
-
-        assertThat(actualLayoutParams.width).isEqualTo(FrameLayout.LayoutParams.MATCH_PARENT);
-        assertThat(actualLayoutParams.height).isEqualTo(FrameLayout.LayoutParams.MATCH_PARENT);
-    }
-
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
-    @Ignore("Mraid 2.0")
-    @Test
-    public void onCreate_atLeastIcs_shouldSetHardwareAcceleratedFlag() throws Exception {
-        subject.onCreate(null);
-
-        boolean hardwareAccelerated = shadowOf(subject.getWindow()).getFlag(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
-        assertThat(hardwareAccelerated).isTrue();
-    }
-
-    @Config(reportSdk = VERSION_CODES.HONEYCOMB_MR2)
-    @Ignore("Mraid 2.0")
-    @Test
-    public void onCreate_beforeIcs_shouldNotSetHardwareAcceleratedFlag() throws Exception {
-        subject.onCreate(null);
-
-        boolean hardwareAccelerated = shadowOf(subject.getWindow()).getFlag(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
-        assertThat(hardwareAccelerated).isFalse();
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void onDestroy_DestroyMraidView() throws Exception {
-        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, subject.getBroadcastIdentifier());
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver,
-                getHtmlInterstitialIntentFilter());
-
-        subject.onDestroy();
-
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
-        verify(mraidWebView).destroy();
-        assertThat(getContentView().getChildCount()).isEqualTo(0);
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void getAdView_shouldSetupOnReadyListener() throws Exception {
-        reset(mraidWebView);
-        ArgumentCaptor<MraidListener> captor = ArgumentCaptor.forClass(MraidListener.class);
-        View actualAdView = subject.getAdView();
-
-        assertThat(actualAdView).isSameAs(mraidWebView);
-        verify(mraidController).setMraidListener(captor.capture());
-
-        subject.hideInterstitialCloseButton();
-        captor.getValue().onLoaded(null);
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void baseMraidListenerOnReady_shouldFireJavascriptWebViewDidAppear() throws Exception {
-        reset(mraidWebView);
-        ArgumentCaptor<MraidListener> captor = ArgumentCaptor.forClass(MraidListener.class);
-        View actualAdView = subject.getAdView();
-
-        assertThat(actualAdView).isSameAs(mraidWebView);
-        verify(mraidController).setMraidListener(captor.capture());
-
-        MraidListener baseMraidListener = captor.getValue();
-        baseMraidListener.onLoaded(null);
-
-        verify(mraidWebView).loadUrl(eq("javascript:webviewDidAppear();"));
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void baseMraidListenerOnClose_shouldFireJavascriptWebViewDidClose() throws Exception {
-        reset(mraidWebView);
-        ArgumentCaptor<MraidListener> captor = ArgumentCaptor.forClass(MraidListener.class);
-        View actualAdView = subject.getAdView();
-
-        assertThat(actualAdView).isSameAs(mraidWebView);
-        verify(mraidController).setMraidListener(captor.capture());
-
-        MraidListener baseMraidListener = captor.getValue();
-        baseMraidListener.onClose();
-
-        verify(mraidWebView).loadUrl(eq("javascript:webviewDidClose();"));
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void baseMraidListenerOnOpen_shouldBroadcastClickEvent() throws Exception {
-        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_CLICK, testBroadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver,
-                getHtmlInterstitialIntentFilter());
-
-        reset(mraidWebView);
-
-        ArgumentCaptor<MraidListener> captor = ArgumentCaptor.forClass(MraidListener.class);
-        View actualAdView = subject.getAdView();
-
-        assertThat(actualAdView).isSameAs(mraidWebView);
-        verify(mraidController).setMraidListener(captor.capture());
-
-        MraidListener baseMraidListener = captor.getValue();
-        baseMraidListener.onOpen();
-
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void getAdView_shouldSetupOnCloseListener() throws Exception {
-        reset(mraidWebView);
-        ArgumentCaptor<MraidListener> captor = ArgumentCaptor.forClass(MraidListener.class);
-        View actualAdView = subject.getAdView();
-
-        assertThat(actualAdView).isSameAs(mraidWebView);
-        verify(mraidController).setMraidListener(captor.capture());
-
-        captor.getValue().onClose();
-
-        ANDROID.assertThat(subject).isFinishing();
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void onPause_shouldOnPauseMraidView() throws Exception {
-        Robolectric.shadowOf(subject).callOnPause();
-
-        verify(mraidWebView).onPause();
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void onResume_shouldResumeMraidView() throws Exception {
-        subject.onCreate(null);
-        Robolectric.shadowOf(subject).pauseAndThenResume();
-
-        verify(mraidWebView).onResume();
-    }
-
-    private Intent createMraidActivityIntent(String expectedSource) {
-        Intent mraidActivityIntent = new Intent();
-        mraidActivityIntent.setComponent(new ComponentName("", ""));
-        mraidActivityIntent.putExtra(HTML_RESPONSE_BODY_KEY, expectedSource);
-
-        mraidActivityIntent.putExtra(BROADCAST_IDENTIFIER_KEY, testBroadcastIdentifier);
-
-        return mraidActivityIntent;
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void onCreate_shouldBroadcastInterstitialShow() throws Exception {
-        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, testBroadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
-
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void onDestroy_shouldBroadcastInterstitialDismiss() throws Exception {
-        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, testBroadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
-
-        subject.onDestroy();
-
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
-    }
-
-    private FrameLayout getContentView() {
-        return (FrameLayout) ((ViewGroup) subject.findViewById(android.R.id.content)).getChildAt(0);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
deleted file mode 100644
index 05bc9bc7..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
+++ /dev/null
@@ -1,195 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.ActivityInfo;
-import android.os.Bundle;
-import android.view.View;
-import android.widget.ImageView;
-
-import com.mopub.common.MoPubBrowser;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.util.vast.VastVideoConfiguration;
-import com.mopub.mraid.MraidVideoViewController;
-
-import org.junit.Before;
-import org.junit.Ignore;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.shadows.ShadowActivity;
-
-import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(SdkTestRunner.class)
-public class MraidVideoPlayerActivityTest {
-    private static final String VAST = "vast";
-    private static final String MRAID = "mraid";
-
-    private MraidVideoPlayerActivity subject;
-    private long testBroadcastIdentifier;
-    private Intent intent;
-    private Context context;
-    private BaseVideoViewController baseVideoViewController;
-
-    @Before
-    public void setup() {
-        context = new Activity();
-        intent = new Intent(context, MraidVideoPlayerActivity.class);
-
-        testBroadcastIdentifier = 1001;
-        intent.putExtra(BROADCAST_IDENTIFIER_KEY, testBroadcastIdentifier);
-        baseVideoViewController = mock(BaseVideoViewController.class);
-    }
-
-    @Test
-    public void onCreate_withVastExtraKey_shouldUseVastVideoViewController() throws Exception {
-        initializeSubjectForVast();
-
-        assertThat(subject.getBaseVideoViewController()).isInstanceOf(VastVideoViewController.class);
-    }
-
-    @Test
-    public void onCreate_withMraidExtraKey_shouldUseMraidVideoViewController() throws Exception {
-        initializeSubjectForMraid();
-
-        assertThat(subject.getBaseVideoViewController()).isInstanceOf(MraidVideoViewController.class);
-    }
-
-    @Ignore("pending: this is currently impossible to write")
-    @Test
-    public void onCreate_shouldForwardOnCreateToViewController() throws Exception {
-        initializeSubjectWithMockViewController();
-
-    }
-
-    @Test
-    public void onPause_shouldForwardOnPauseToViewController() throws Exception {
-        initializeSubjectWithMockViewController();
-
-        subject.onPause();
-
-        verify(baseVideoViewController).onPause();
-    }
-
-    @Test
-    public void onResume_shouldForwardOnResumeToViewController() throws Exception {
-        initializeSubjectWithMockViewController();
-
-        subject.onResume();
-
-        verify(baseVideoViewController).onResume();
-    }
-
-    @Test
-    public void onDestroy_shouldForwardOnDestroyToViewController() throws Exception {
-        initializeSubjectWithMockViewController();
-
-        subject.onDestroy();
-
-        verify(baseVideoViewController).onDestroy();
-    }
-
-    @Test
-    public void onActivityResult_shouldForwardOnActivityResultToViewController() throws Exception {
-        initializeSubjectWithMockViewController();
-
-        int expectedRequestCode = -100;
-        int expectedResultCode = 200;
-        Intent expectedData = new Intent("arbitrary_data");
-        subject.onActivityResult(expectedRequestCode, expectedResultCode, expectedData);
-
-        verify(baseVideoViewController).onActivityResult(
-                eq(expectedRequestCode),
-                eq(expectedResultCode),
-                eq(expectedData)
-        );
-    }
-
-    @Test
-    public void onSetContentView_shouldActuallySetContentView() throws Exception {
-        initializeSubjectWithMockViewController();
-        final View expectedView = new ImageView(context);
-
-        subject.onSetContentView(expectedView);
-
-        assertThat(shadowOf(subject).getContentView()).isEqualTo(expectedView);
-    }
-
-    @Test
-    public void onSetRequestedOrientation_shouldActuallySetRequestedOrientation() throws Exception {
-        initializeSubjectWithMockViewController();
-
-        subject.onSetRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR);
-
-        assertThat(subject.getRequestedOrientation()).isEqualTo(ActivityInfo.SCREEN_ORIENTATION_SENSOR);
-    }
-
-    @Test
-    public void onFinish_shouldActuallyCallFinish() throws Exception {
-        initializeSubjectWithMockViewController();
-
-        subject.onFinish();
-
-        assertThat(subject.isFinishing());
-    }
-
-    @Test
-    public void onStartActivityForResult_shouldStartAnActivityWithRelevantRequestCodeAndExtras() throws Exception {
-        initializeSubjectWithMockViewController();
-
-        final Bundle expectedExtras = new Bundle();
-        expectedExtras.putString("hello", "goodbye");
-
-        subject.onStartActivityForResult(MoPubBrowser.class, 100, expectedExtras);
-
-        final ShadowActivity.IntentForResult intentForResult = shadowOf(subject).getNextStartedActivityForResult();
-
-        assertThat(intentForResult.intent.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser");
-        assertThat(intentForResult.intent.getExtras()).isEqualTo(expectedExtras);
-        assertThat(intentForResult.requestCode).isEqualTo(100);
-    }
-
-    @Test
-    public void onStartActivityForResult_withNullClass_shouldNotStartAnActivity() throws Exception {
-        initializeSubjectWithMockViewController();
-
-        subject.onStartActivityForResult(null, 100, new Bundle());
-
-        final ShadowActivity.IntentForResult intentForResult = shadowOf(subject).getNextStartedActivityForResult();
-        assertThat(intentForResult).isNull();
-    }
-
-    private void initializeSubjectForMraid() {
-        intent.putExtra(BaseVideoPlayerActivity.VIDEO_CLASS_EXTRAS_KEY, "mraid");
-
-        subject = Robolectric.buildActivity(MraidVideoPlayerActivity.class)
-                .withIntent(intent)
-                .create()
-                .get();
-    }
-
-    private void initializeSubjectForVast() {
-        intent.putExtra(BaseVideoPlayerActivity.VIDEO_CLASS_EXTRAS_KEY, "vast");
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("video_path");
-        intent.putExtra(VastVideoViewController.VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
-
-        subject = Robolectric.buildActivity(MraidVideoPlayerActivity.class)
-                .withIntent(intent)
-                .create()
-                .get();
-    }
-
-    private void initializeSubjectWithMockViewController() {
-        initializeSubjectForMraid();
-
-        subject.setBaseVideoViewController(baseVideoViewController);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/ResponseBodyInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/ResponseBodyInterstitialTest.java
deleted file mode 100644
index e5832e88..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/ResponseBodyInterstitialTest.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package com.mopub.mobileads;
-
-import org.junit.Ignore;
-import org.junit.Test;
-
-@Ignore
-public class ResponseBodyInterstitialTest {
-    protected ResponseBodyInterstitial subject;
-
-    @Test
-    public void onInvalidate_beforeLoadInterstitialIsCalled_shouldNotBlowUp() throws Exception {
-        // Have not called subject.loadInterstitial()
-
-        subject.onInvalidate();
-
-        // pass
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoDownloadTaskTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoDownloadTaskTest.java
deleted file mode 100644
index dd69502f..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoDownloadTaskTest.java
+++ /dev/null
@@ -1,135 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-
-import com.mopub.common.CacheService;
-import com.mopub.common.CacheServiceTest;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-import org.robolectric.tester.org.apache.http.TestHttpResponse;
-
-import java.util.Random;
-import java.util.concurrent.Semaphore;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.anyBoolean;
-import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class VastVideoDownloadTaskTest {
-    private VastVideoDownloadTask.VastVideoDownloadTaskListener mVastVideoDownloadTaskListener;
-    private VastVideoDownloadTask subject;
-    private String videoUrl;
-    private TestHttpResponseWithHeaders response;
-    private Semaphore semaphore;
-
-    @Before
-    public void setUp() throws Exception {
-        Activity context = new Activity();
-        CacheService.initializeDiskCache(context);
-
-        videoUrl = "http://www.video.com";
-        response = new TestHttpResponseWithHeaders(200, "responseBody");
-        Robolectric.addPendingHttpResponse(response);
-
-        semaphore = new Semaphore(0);
-        mVastVideoDownloadTaskListener = mock(VastVideoDownloadTask.VastVideoDownloadTaskListener.class);
-        doAnswer(new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
-                semaphore.release();
-                return null;
-            }
-        }).when(mVastVideoDownloadTaskListener).onComplete(anyBoolean());
-
-        subject = new VastVideoDownloadTask(mVastVideoDownloadTaskListener);
-    }
-
-    @Test
-    public void execute_shouldAddToCacheAndSignalDownloadSuccess() throws Exception {
-        subject.execute(videoUrl);
-
-        semaphore.acquire();
-        verify(mVastVideoDownloadTaskListener).onComplete(true);
-
-        final byte[] data = CacheService.getFromDiskCache(videoUrl);
-        assertThat(data).isEqualTo("responseBody".getBytes());
-    }
-
-    @Test
-    public void execute_withMultipleUrls_shouldParseTheFirstOne() throws Exception {
-        String ignoredUrl = "ignored";
-        subject.execute(videoUrl, ignoredUrl);
-
-        semaphore.acquire();
-        verify(mVastVideoDownloadTaskListener).onComplete(true);
-
-        assertThat(CacheService.getFromDiskCache(videoUrl)).isEqualTo("responseBody".getBytes());
-        assertThat(CacheService.getFromDiskCache(ignoredUrl)).isNull();
-    }
-
-    @Test
-    public void execute_whenUrlArrayIsNull_shouldSignalDownloadFailed() throws Exception {
-        subject.execute((String) null);
-
-        semaphore.acquire();
-        verify(mVastVideoDownloadTaskListener).onComplete(false);
-    }
-
-    @Test
-    public void execute_whenFirstElementOfUrlArrayIsNull_shouldSignalDownloadFailed() throws Exception {
-        subject.execute(null, "ignored");
-
-        semaphore.acquire();
-        verify(mVastVideoDownloadTaskListener).onComplete(false);
-    }
-
-    @Test
-    public void execute_whenDiskCacheIsNotInitialized_shouldNotPutDataInCacheAndShouldSignalDownloadFailed() throws Exception {
-        CacheService.clearAndNullCaches();
-        CacheServiceTest.assertDiskCacheIsUninitialized();
-        subject.execute(videoUrl);
-
-        semaphore.acquire();
-        CacheServiceTest.assertDiskCacheIsUninitialized();
-        verify(mVastVideoDownloadTaskListener).onComplete(false);
-    }
-
-    @Test
-    public void execute_whenResponseContentLengthIsLargerThan25MiB_shouldNotPutDataInCacheAndShouldSignalDownloadFailed() throws Exception {
-        Robolectric.clearPendingHttpResponses();
-        final String randomString = createRandomString(25 * 1024 * 1024 + 1);
-        Robolectric.addPendingHttpResponse(new TestHttpResponse(200, randomString));
-        subject.execute(videoUrl);
-
-        semaphore.acquire();
-        CacheServiceTest.assertDiskCacheIsEmpty();
-        verify(mVastVideoDownloadTaskListener).onComplete(false);
-    }
-
-    @Test
-    public void onPostExecute_whenOnDownloadCompleteListenerIsNull_shouldNotBlowUp() throws Exception {
-        subject = new VastVideoDownloadTask(null);
-
-        subject.onPostExecute(true);
-        subject.onPostExecute(false);
-
-        // pass
-    }
-
-    private static String createRandomString(int size) {
-        byte[] buffer = new byte[size];
-        new Random().nextBytes(buffer);
-        return new String(buffer);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
deleted file mode 100644
index 9c9ad74e..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
+++ /dev/null
@@ -1,220 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-
-import com.mopub.common.CacheServiceTest;
-import com.mopub.common.DataKeys;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
-import com.mopub.mobileads.test.support.TestVastManagerFactory;
-import com.mopub.mobileads.test.support.TestVastVideoDownloadTaskFactory;
-import com.mopub.mobileads.util.vast.VastCompanionAd;
-import com.mopub.mobileads.util.vast.VastManager;
-import com.mopub.mobileads.util.vast.VastVideoConfiguration;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.shadows.ShadowLocalBroadcastManager;
-
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
-import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
-import static com.mopub.mobileads.util.vast.VastManager.VastManagerListener;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.withSettings;
-
-@RunWith(SdkTestRunner.class)
-public class VastVideoInterstitialTest extends ResponseBodyInterstitialTest {
-    private Context context;
-    private CustomEventInterstitialListener customEventInterstitialListener;
-    private Map<String, Object> localExtras;
-    private Map<String, String> serverExtras;
-    private TestHttpResponseWithHeaders response;
-    private String expectedResponse;
-    private VastManager vastManager;
-    private String videoUrl;
-    private VastVideoDownloadTask vastVideoDownloadTask;
-    private long broadcastIdentifier;
-
-    @Before
-    public void setUp() throws Exception {
-        subject = new VastVideoInterstitial();
-
-        vastVideoDownloadTask = TestVastVideoDownloadTaskFactory.getSingletonMock();
-        vastManager = TestVastManagerFactory.getSingletonMock();
-        expectedResponse = "<VAST>hello</VAST>";
-        videoUrl = "http://www.video.com";
-
-        context = new Activity();
-        customEventInterstitialListener = mock(CustomEventInterstitialListener.class);
-        localExtras = new HashMap<String, Object>();
-        serverExtras = new HashMap<String, String>();
-        serverExtras.put(DataKeys.HTML_RESPONSE_BODY_KEY, expectedResponse);
-
-        response = new TestHttpResponseWithHeaders(200, expectedResponse);
-
-        broadcastIdentifier = 2222;
-        localExtras.put(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
-    }
-
-    @After
-    public void tearDown() throws Exception {
-        reset(vastVideoDownloadTask);
-    }
-
-    @Test
-    public void preRenderHtml_whenCreatingVideoCache_butItHasInitializationErrors_shouldSignalOnInterstitialFailedOnError() throws Exception {
-        // context is null when loadInterstitial is not called, which causes DiskLruCache to not be created
-
-        subject.preRenderHtml(customEventInterstitialListener);
-
-        verify(customEventInterstitialListener).onInterstitialFailed(eq(MoPubErrorCode.VIDEO_CACHE_ERROR));
-        verify(vastManager, never()).prepareVastVideoConfiguration(anyString(), any(VastManagerListener.class));
-    }
-
-    @Test
-    public void loadInterstitial_shouldParseHtmlResponseBodyServerExtra() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-
-        assertThat(((VastVideoInterstitial) subject).getVastResponse()).isEqualTo(expectedResponse);
-    }
-
-    @Test
-    public void loadInterstitial_shouldInitializeDiskCache() throws Exception {
-        Robolectric.addPendingHttpResponse(response);
-
-        CacheServiceTest.assertDiskCacheIsUninitialized();
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-        CacheServiceTest.assertDiskCacheIsEmpty();
-    }
-
-    @Test
-    public void loadInterstitial_shouldCreateVastManagerAndProcessVast() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-
-        verify(vastManager).prepareVastVideoConfiguration(eq(expectedResponse), eq((VastVideoInterstitial) subject));
-    }
-
-    @Test
-    public void loadInterstitial_whenServerExtrasDoesNotContainResponse_shouldSignalOnInterstitialFailed() throws Exception {
-        serverExtras.remove(HTML_RESPONSE_BODY_KEY);
-
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-
-        verify(customEventInterstitialListener).onInterstitialFailed(NETWORK_INVALID_STATE);
-        verify(vastManager, never()).prepareVastVideoConfiguration(anyString(), any(VastManagerListener.class));
-    }
-
-    @Test
-    public void loadInterstitial_shouldConnectListenerToBroadcastReceiver() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-
-        Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, broadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener).onInterstitialShown();
-
-        intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, broadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener).onInterstitialDismissed();
-    }
-
-    @Test
-    public void showInterstitial_shouldStartVideoPlayerActivityWithAllValidTrackers() throws Exception {
-        VastCompanionAd vastCompanionAd = mock(VastCompanionAd.class, withSettings().serializable());
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setNetworkMediaFileUrl(videoUrl);
-        vastVideoConfiguration.addAbsoluteTrackers(Arrays.asList(new VastAbsoluteProgressTracker("start", 2000)));
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("first", 0.25f),
-                new VastFractionalProgressTracker("mid", 0.5f),
-                new VastFractionalProgressTracker("third", 0.75f)));
-        vastVideoConfiguration.addCompleteTrackers(Arrays.asList("complete"));
-        vastVideoConfiguration.addImpressionTrackers(Arrays.asList("imp"));
-        vastVideoConfiguration.setClickThroughUrl("clickThrough");
-        vastVideoConfiguration.addClickTrackers(Arrays.asList("click"));
-        vastVideoConfiguration.setVastCompanionAd(vastCompanionAd);
-
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-        ((VastVideoInterstitial) subject).onVastVideoConfigurationPrepared(vastVideoConfiguration);
-
-        subject.showInterstitial();
-        BaseVideoPlayerActivityTest.assertVastVideoPlayerActivityStarted(
-                MraidVideoPlayerActivity.class,
-                vastVideoConfiguration,
-                broadcastIdentifier
-                );
-    }
-
-    @Test
-    public void onInvalidate_shouldCancelVastManager() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-        subject.onInvalidate();
-
-        verify(vastManager).cancel();
-    }
-
-    @Test
-    public void onInvalidate_whenVastManagerIsNull_shouldNotBlowUp() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-
-        ((VastVideoInterstitial) subject).setVastManager(null);
-
-        subject.onInvalidate();
-
-        // pass
-    }
-
-    @Test
-    public void onInvalidate_shouldDisconnectListenerToBroadcastReceiver() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-        subject.onInvalidate();
-
-        Intent intent;
-        intent = new Intent(ACTION_INTERSTITIAL_SHOW);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener, never()).onInterstitialShown();
-
-        intent = new Intent(ACTION_INTERSTITIAL_DISMISS);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener, never()).onInterstitialDismissed();
-    }
-
-    @Test
-    public void onVastVideoConfigurationPrepared_withVastVideoConfiguration_shouldSignalOnInterstitialLoaded() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-        ((VastVideoInterstitial) subject).onVastVideoConfigurationPrepared(mock(VastVideoConfiguration.class));
-
-        verify(customEventInterstitialListener).onInterstitialLoaded();
-    }
-
-    @Test
-    public void onVastVideoConfigurationPrepared_withNullVastVideoConfiguration_shouldSignalOnInterstitialFailed() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-        ((VastVideoInterstitial) subject).onVastVideoConfigurationPrepared(null);
-
-        verify(customEventInterstitialListener).onInterstitialFailed(MoPubErrorCode.VIDEO_DOWNLOAD_ERROR);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoToolbarTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoToolbarTest.java
deleted file mode 100644
index a65a21a5..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoToolbarTest.java
+++ /dev/null
@@ -1,209 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.view.View;
-import android.widget.TextView;
-
-import com.mopub.mobileads.resource.TextDrawable;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.verify;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(SdkTestRunner.class)
-public class VastVideoToolbarTest {
-    private Context context;
-    private VastVideoToolbar subject;
-    private View.OnTouchListener onTouchListener;
-
-    @Before
-    public void setUp() throws Exception {
-        context = new Activity();
-        subject = new VastVideoToolbar(context);
-
-        onTouchListener = mock(View.OnTouchListener.class);
-    }
-
-    @Test
-    public void constructor_shouldSetOnTouchListenerThatConsumesAllTouchEvents() throws Exception {
-        final View.OnTouchListener onTouchListener = shadowOf(subject).getOnTouchListener();
-
-        assertThat(onTouchListener).isNotNull();
-        assertThat(onTouchListener.onTouch(null, null)).isTrue();
-    }
-
-    @Test
-    public void constructor_shouldAddWidgetsToToolbar() throws Exception {
-        assertThat(subject.getChildCount()).isEqualTo(4);
-
-        assertThat(subject.getDurationWidget().getParent()).isEqualTo(subject);
-        assertThat(subject.getLearnMoreWidget().getParent()).isEqualTo(subject);
-        assertThat(subject.getCountdownWidget().getParent()).isEqualTo(subject);
-        assertThat(subject.getCloseButtonWidget().getParent()).isEqualTo(subject);
-    }
-
-    @Test
-    public void constructor_shouldOnlyStartWithDurationWidgetsVisible() throws Exception {
-        assertThat(subject.getDurationWidget().getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(subject.getLearnMoreWidget().getVisibility()).isEqualTo(View.INVISIBLE);
-        assertThat(subject.getCountdownWidget().getVisibility()).isEqualTo(View.INVISIBLE);
-        assertThat(subject.getCloseButtonWidget().getVisibility()).isEqualTo(View.GONE);
-    }
-
-    @Test
-    public void makeInteractable_shouldHideCountdownWidgetAndShowLearnMoreAndCloseButtonWidgets() throws Exception {
-        subject.makeInteractable();
-
-        assertThat(subject.getDurationWidget().getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(subject.getLearnMoreWidget().getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(subject.getCountdownWidget().getVisibility()).isEqualTo(View.GONE);
-        assertThat(subject.getCloseButtonWidget().getVisibility()).isEqualTo(View.VISIBLE);
-    }
-
-    @Test
-    public void setCloseButtonOnTouchListener_shouldPropagateToCloseButtonWidget() throws Exception {
-        subject.setCloseButtonOnTouchListener(onTouchListener);
-
-        assertThat(shadowOf(subject.getCloseButtonWidget()).getOnTouchListener()).isEqualTo(onTouchListener);
-    }
-
-    @Test
-    public void setLearnButtonOnTouchListener_shouldPropagateToLearnButtonWidget() throws Exception {
-        subject.setLearnMoreButtonOnTouchListener(onTouchListener);
-
-        assertThat(shadowOf(subject.getLearnMoreWidget()).getOnTouchListener()).isEqualTo(onTouchListener);
-    }
-
-    @Test
-    public void convertMillisecondsToSecondsRoundedUp_shouldReturnLongMillisecondsAsRoundedUpLongSeconds() throws Exception {
-        assertThat(subject.convertMillisecondsToSecondsRoundedUp(0)).isEqualTo(0);
-
-        assertThat(subject.convertMillisecondsToSecondsRoundedUp(1)).isEqualTo(1);
-        assertThat(subject.convertMillisecondsToSecondsRoundedUp(999)).isEqualTo(1);
-        assertThat(subject.convertMillisecondsToSecondsRoundedUp(1000)).isEqualTo(1);
-
-        assertThat(subject.convertMillisecondsToSecondsRoundedUp(1001)).isEqualTo(2);
-        assertThat(subject.convertMillisecondsToSecondsRoundedUp(100000)).isEqualTo(100);
-    }
-
-    @Test
-    public void formatTime_shouldReturnLongMillisecondsAsFormattedString() {
-        assertThat(subject.formatTime(-8999)).isEqualTo("-8 seconds");
-        assertThat(subject.formatTime(-9000)).isEqualTo("-9 seconds");
-        assertThat(subject.formatTime(-9001)).isEqualTo("-9 seconds");
-        assertThat(subject.formatTime(0)).isEqualTo("0 seconds");
-
-        assertThat(subject.formatTime(1)).isEqualTo("1 second");
-        assertThat(subject.formatTime(1000)).isEqualTo("1 second");
-        assertThat(subject.formatTime(1005)).isEqualTo("2 seconds");
-
-        assertThat(subject.formatTime(59999)).isEqualTo("60 seconds");
-        assertThat(subject.formatTime(60000)).isEqualTo("60 seconds");
-        assertThat(subject.formatTime(60001)).isEqualTo("61 seconds");
-        assertThat(subject.formatTime(853437)).isEqualTo("854 seconds");
-
-        assertThat(subject.formatTime(3599999)).isEqualTo("3600 seconds");
-        assertThat(subject.formatTime(3600000)).isEqualTo("3600 seconds");
-        assertThat(subject.formatTime(3600001)).isEqualTo("3601 seconds");
-        assertThat(subject.formatTime(3660001)).isEqualTo("3661 seconds");
-        assertThat(subject.formatTime(65784693)).isEqualTo("65785 seconds");
-    }
-
-    @Test
-    public void updateCountdownWidget_shouldUpdateTextDrawablesDisplayNumber() throws Exception {
-        final TextDrawable countdownImageSpy = spy(subject.getCountdownWidget().getImageViewDrawable());
-        subject.getCountdownWidget().setImageViewDrawable(countdownImageSpy);
-
-        subject.updateCountdownWidget(1002);
-
-        verify(countdownImageSpy).updateText("2");
-    }
-
-    @Test
-    public void updateCountdownWidget_shouldHideCloseButtonAndShowCountdown() throws Exception {
-        subject.getCloseButtonWidget().setVisibility(View.INVISIBLE);
-        subject.getCountdownWidget().setVisibility(View.INVISIBLE);
-
-        subject.updateCountdownWidget(1);
-
-        assertThat(subject.getCloseButtonWidget().getVisibility()).isEqualTo(View.GONE);
-        assertThat(subject.getCountdownWidget().getVisibility()).isEqualTo(View.VISIBLE);
-    }
-
-    @Test
-    public void updateCountdownWidget_whenRemainingTimeIsNegative_shouldNotModifyWidgetVisibility() throws Exception {
-        subject.getCloseButtonWidget().setVisibility(View.INVISIBLE);
-        subject.getCountdownWidget().setVisibility(View.INVISIBLE);
-
-        subject.updateCountdownWidget(-1);
-
-        assertThat(subject.getCloseButtonWidget().getVisibility()).isEqualTo(View.INVISIBLE);
-        assertThat(subject.getCountdownWidget().getVisibility()).isEqualTo(View.INVISIBLE);
-    }
-
-    @Test
-    public void updateDurationWidget_shouldShowWhenVideoEnds() throws Exception {
-        final TextView durationWidgetTextView = getDurationWidgetTextView();
-
-        assertThat(durationWidgetTextView.getText()).isEqualTo("");
-
-        subject.updateDurationWidget(100000);
-
-        assertThat(durationWidgetTextView.getText()).isEqualTo("Ends in 100 seconds");
-
-        subject.updateDurationWidget(99000);
-
-        assertThat(durationWidgetTextView.getText()).isEqualTo("Ends in 99 seconds");
-    }
-
-    @Test
-    public void updateDurationWidget_whenBelowThresholdForHidingVideoDuration_shouldShowThanksForWatching() throws Exception {
-        final TextView durationWidgetTextView = getDurationWidgetTextView();
-
-        assertThat(durationWidgetTextView.getText()).isEqualTo("");
-
-        subject.updateDurationWidget(50000);
-
-        assertThat(durationWidgetTextView.getText()).isEqualTo("Ends in 50 seconds");
-
-        // 200ms of remaining video is the cut off for switching to "Thanks for watching"
-        subject.updateDurationWidget(200);
-
-        assertThat(durationWidgetTextView.getText()).isEqualTo("Ends in 1 second");
-
-        subject.updateDurationWidget(199);
-
-        assertThat(durationWidgetTextView.getText()).isEqualTo("Thanks for watching");
-    }
-
-    @Test
-    public void updateDurationWidget_whenRemainingTimeIsNegative_shouldDoNothing() throws Exception {
-        final TextView durationWidgetTextView = getDurationWidgetTextView();
-
-        assertThat(durationWidgetTextView.getText()).isEqualTo("");
-
-        subject.updateDurationWidget(-1);
-
-        assertThat(durationWidgetTextView.getText()).isEqualTo("");
-    }
-
-    private TextView getDurationWidgetTextView() {
-        final ToolbarWidget durationWidget = subject.getDurationWidget();
-        final int childCount = durationWidget.getChildCount();
-        for (int i = 0; i < childCount; i++) {
-            final View child = durationWidget.getChildAt(i);
-            if (child instanceof TextView) {
-                return (TextView) child;
-            }
-        }
-        return null;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
deleted file mode 100644
index dc60b849..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
+++ /dev/null
@@ -1,1212 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.graphics.Color;
-import android.graphics.drawable.BitmapDrawable;
-import android.graphics.drawable.GradientDrawable;
-import android.graphics.drawable.LayerDrawable;
-import android.media.MediaPlayer;
-import android.os.Build.VERSION_CODES;
-import android.os.Bundle;
-import android.view.View;
-import android.view.ViewGroup;
-import android.webkit.WebView;
-import android.widget.ImageView;
-import android.widget.VideoView;
-
-import com.mopub.common.MoPubBrowser;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.Dips;
-import com.mopub.common.util.Drawables;
-import com.mopub.mobileads.test.support.GestureUtils;
-import com.mopub.mobileads.util.vast.VastCompanionAd;
-import com.mopub.mobileads.util.vast.VastVideoConfiguration;
-import com.mopub.network.MoPubRequestQueue;
-import com.mopub.network.Networking;
-
-import org.apache.http.HttpRequest;
-import org.apache.maven.artifact.ant.shaded.ReflectionUtils;
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Ignore;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowLocalBroadcastManager;
-import org.robolectric.shadows.ShadowVideoView;
-import org.robolectric.tester.org.apache.http.RequestMatcher;
-import org.robolectric.tester.org.apache.http.TestHttpResponse;
-
-import java.io.File;
-import java.util.ArrayList;
-import java.util.Arrays;
-
-import static android.view.ViewGroup.LayoutParams.MATCH_PARENT;
-import static com.mopub.common.MoPubBrowser.DESTINATION_URL_KEY;
-import static com.mopub.common.VolleyRequestMatcher.isUrl;
-import static com.mopub.common.util.ResponseHeader.USER_AGENT;
-import static com.mopub.mobileads.BaseVideoViewController.BaseVideoViewControllerListener;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.getHtmlInterstitialIntentFilter;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
-import static com.mopub.mobileads.VastVideoViewController.DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON;
-import static com.mopub.mobileads.VastVideoViewController.MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON;
-import static com.mopub.mobileads.VastVideoViewController.VAST_VIDEO_CONFIGURATION;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.junit.Assert.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.argThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.verifyZeroInteractions;
-import static org.robolectric.Robolectric.shadowOf;
-
-@Config(manifest = Config.NONE)
-@RunWith(SdkTestRunner.class)
-public class VastVideoViewControllerTest {
-    public static final int NETWORK_DELAY = 100;
-
-    private Context context;
-    private Bundle bundle;
-    private long testBroadcastIdentifier;
-    private VastVideoViewController subject;
-    private BaseVideoViewControllerListener baseVideoViewControllerListener;
-    private EventForwardingBroadcastReceiver broadcastReceiver;
-    private int expectedBrowserRequestCode;
-    private String expectedUserAgent;
-
-    @Mock
-    MoPubRequestQueue mockRequestQueue;
-    @Mock
-    private MediaPlayer mockMediaPlayer;
-
-    @Before
-    public void setUp() throws Exception {
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-        context = new Activity();
-        bundle = new Bundle();
-        testBroadcastIdentifier = 1111;
-        broadcastReceiver = mock(EventForwardingBroadcastReceiver.class);
-        baseVideoViewControllerListener = mock(BaseVideoViewControllerListener.class);
-
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setNetworkMediaFileUrl("video_url");
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addAbsoluteTrackers(Arrays.asList(new VastAbsoluteProgressTracker("start", 2000)));
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("first", 0.25f),
-                new VastFractionalProgressTracker("mid", 0.5f), new VastFractionalProgressTracker("third", 0.75f)));
-        vastVideoConfiguration.addCompleteTrackers(Arrays.asList("complete"));
-        vastVideoConfiguration.addCloseTrackers(Arrays.asList("close"));
-        vastVideoConfiguration.addImpressionTrackers(Arrays.asList("imp"));
-        vastVideoConfiguration.setClickThroughUrl("clickThrough");
-        vastVideoConfiguration.addClickTrackers(Arrays.asList("click_1", "click_2"));
-
-        VastCompanionAd vastCompanionAd = new VastCompanionAd(
-                300,
-                250,
-                "companion_image_url",
-                "companion_click_destination_url",
-                new ArrayList<String>(Arrays.asList("companion_click_tracking_url_1", "companion_click_tracking_url_2"))
-        );
-        vastVideoConfiguration.setVastCompanionAd(vastCompanionAd);
-
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
-
-        expectedBrowserRequestCode = 1;
-
-        Robolectric.getUiThreadScheduler().pause();
-        Robolectric.getBackgroundScheduler().pause();
-        Robolectric.clearPendingHttpResponses();
-
-        // Used to give responses to Vast Download Tasks.
-        Robolectric.addHttpResponseRule(new RequestMatcher() {
-            @Override
-            public boolean matches(HttpRequest request) {
-                return true;
-            }
-        }, new TestHttpResponse(200, "body"));
-
-        ShadowLocalBroadcastManager.getInstance(context).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
-
-        expectedUserAgent = new WebView(context).getSettings().getUserAgentString();
-    }
-
-    @After
-    public void tearDown() throws Exception {
-        Robolectric.getUiThreadScheduler().reset();
-        Robolectric.getBackgroundScheduler().reset();
-
-        ShadowLocalBroadcastManager.getInstance(context).unregisterReceiver(broadcastReceiver);
-    }
-
-    @Test
-    public void constructor_shouldAddVastVideoToolbarToLayout() throws Exception {
-        initializeSubject();
-
-        VastVideoToolbar vastVideoToolbar = getVastVideoToolbar();
-        final ViewGroup.LayoutParams layoutParams = vastVideoToolbar.getLayoutParams();
-
-        assertThat(vastVideoToolbar.getParent()).isEqualTo(subject.getLayout());
-        assertThat(vastVideoToolbar.getVisibility()).isEqualTo(View.VISIBLE);
-
-        assertThat(layoutParams.width).isEqualTo(MATCH_PARENT);
-        assertThat(layoutParams.height).isEqualTo(Dips.dipsToIntPixels(44, context));
-    }
-
-    @Test
-    public void constructor_shouldSetVideoListenersAndVideoPath() throws Exception {
-        initializeSubject();
-        ShadowVideoView videoView = shadowOf(subject.getVideoView());
-
-        assertThat(videoView.getOnCompletionListener()).isNotNull();
-        assertThat(videoView.getOnErrorListener()).isNotNull();
-        assertThat(videoView.getOnTouchListener()).isNotNull();
-        assertThat(videoView.getOnPreparedListener()).isNotNull();
-
-        assertThat(videoView.getVideoPath()).isEqualTo("disk_video_path");
-        assertThat(subject.getVideoView().hasFocus()).isTrue();
-    }
-
-    @Test
-    public void constructor_shouldNotChangeCloseButtonDelay() throws Exception {
-        initializeSubject();
-
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
-    }
-
-    @Test
-    public void constructor_shouldAddThatchedBackgroundWithGradientToLayout() throws Exception {
-        initializeSubject();
-        ViewGroup viewGroup = subject.getLayout();
-        LayerDrawable layerDrawable = (LayerDrawable) viewGroup.getBackground();
-        assertThat(layerDrawable.getDrawable(0)).isEqualTo(Drawables.THATCHED_BACKGROUND.createDrawable(
-                context));
-        assertThat(layerDrawable.getDrawable(1)).isEqualTo(
-                new GradientDrawable(
-                        GradientDrawable.Orientation.TOP_BOTTOM,
-                        new int[]{Color.argb(0, 0, 0, 0), Color.argb(255, 0, 0, 0)})
-        );
-    }
-
-    @Test
-    public void constructor_withMissingVastVideoConfiguration_shouldThrowIllegalStateException() throws Exception {
-        bundle.clear();
-        try {
-            initializeSubject();
-            fail("VastVideoViewController didn't throw IllegalStateException");
-        } catch (IllegalStateException e) {
-            // pass
-        }
-    }
-
-    @Test
-    public void constructor_withNullVastVideoConfigurationDiskMediaFileUrl_shouldThrowIllegalStateException() throws Exception {
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, new VastVideoConfiguration());
-        try {
-            initializeSubject();
-            fail("VastVideoViewController didn't throw IllegalStateException");
-        } catch (IllegalStateException e) {
-            // pass
-        }
-    }
-
-    @Test
-    public void onCreate_withCompanionAd_shouldDownloadCompanionAd() throws Exception {
-        initializeSubject();
-
-        final ImageView imageView = subject.getCompanionAdImageView();
-        assertThat(imageView.getDrawable()).isNull();
-
-        subject.onCreate();
-        Robolectric.getBackgroundScheduler().unPause();
-        Robolectric.getUiThreadScheduler().unPause();
-        Thread.sleep(NETWORK_DELAY);
-
-        assertThat(shadowOf(((BitmapDrawable) imageView.getDrawable()).getBitmap()).getCreatedFromBytes()).isEqualTo("body".getBytes());
-    }
-
-    @Test
-    public void onCreate_shouldFireImpressionTracker() throws Exception {
-        initializeSubject();
-
-        subject.onCreate();
-        verify(mockRequestQueue).add(argThat(isUrl("imp")));
-    }
-
-    @Test
-    public void onCreate_shouldBroadcastInterstitialShow() throws Exception {
-        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, testBroadcastIdentifier);
-
-        initializeSubject();
-
-        Robolectric.getUiThreadScheduler().unPause();
-        subject.onCreate();
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
-    }
-
-    @Test
-    public void onComplete_withNullDownloadResponse_shouldNotSetCompanionAdImageBitmap() throws Exception {
-        initializeSubject();
-
-        final ImageView imageView = subject.getCompanionAdImageView();
-        assertThat(imageView.getDrawable()).isNull();
-
-        subject.onComplete("url", null);
-
-        assertThat(imageView.getDrawable()).isNull();
-    }
-
-    @Test
-    public void onClick_withCompanionAd_shouldFireCompanionAdClickTrackersAndStartMoPubBrowser() throws Exception {
-        initializeSubject();
-
-        final ImageView imageView = subject.getCompanionAdImageView();
-        assertThat(imageView.performClick()).isFalse();
-        subject.onCreate();
-
-        Robolectric.getBackgroundScheduler().unPause();
-        Robolectric.getUiThreadScheduler().unPause();
-        Thread.sleep(NETWORK_DELAY);
-
-        assertThat(imageView.performClick()).isTrue();
-
-        // This request is still made by the older http stack.
-        assertHttpRequestsMade(expectedUserAgent, "companion_image_url");
-
-        verify(mockRequestQueue).add(argThat(isUrl("companion_click_tracking_url_1")));
-        verify(mockRequestQueue).add(argThat(isUrl("companion_click_tracking_url_2")));
-
-        ArgumentCaptor<Bundle> bundleCaptor = ArgumentCaptor.forClass(Bundle.class);
-        verify(baseVideoViewControllerListener).onStartActivityForResult(
-                eq(MoPubBrowser.class),
-                eq(expectedBrowserRequestCode),
-                bundleCaptor.capture()
-        );
-
-        assertThat(bundleCaptor.getValue().get(DESTINATION_URL_KEY)).isEqualTo("companion_click_destination_url");
-    }
-
-    @Test
-    public void onDestroy_shouldBroadcastInterstitialDismiss() throws Exception {
-        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, testBroadcastIdentifier);
-
-        initializeSubject();
-
-        subject.onDestroy();
-        Robolectric.getUiThreadScheduler().unPause();
-
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
-    }
-
-    @Test
-    public void onActivityResult_shouldCallFinish() throws Exception {
-        final int expectedResultCode = Activity.RESULT_OK;
-
-        initializeSubject();
-
-        subject.onActivityResult(expectedBrowserRequestCode, expectedResultCode, null);
-
-        verify(baseVideoViewControllerListener).onFinish();
-    }
-
-    @Test
-    public void onActivityResult_withIncorrectRequestCode_shouldNotCallFinish() throws Exception {
-        final int incorrectRequestCode = 1000;
-        final int expectedResultCode = Activity.RESULT_OK;
-
-        initializeSubject();
-
-        subject.onActivityResult(incorrectRequestCode, expectedResultCode, null);
-
-        verify(baseVideoViewControllerListener, never()).onFinish();
-    }
-
-    @Test
-    public void onActivityResult_withIncorrectResultCode_shouldNotCallFinish() throws Exception {
-        final int incorrectResultCode = Activity.RESULT_CANCELED;
-
-        initializeSubject();
-
-        subject.onActivityResult(expectedBrowserRequestCode, incorrectResultCode, null);
-
-        verify(baseVideoViewControllerListener, never()).onFinish();
-    }
-
-    @Test
-    public void onTouch_withTouchUp_whenVideoLessThan16Seconds_andClickBeforeEnd_shouldDoNothing() throws Exception {
-        stub(mockMediaPlayer.getDuration()).toReturn(15999);
-        stub(mockMediaPlayer.getCurrentPosition()).toReturn(15990);
-
-        initializeSubject();
-        setMockMediaPlayer(mockMediaPlayer);
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-
-        Robolectric.getUiThreadScheduler().unPause();
-
-        getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
-
-        Intent nextStartedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(nextStartedActivity).isNull();
-    }
-
-    @Test
-    public void onTouch_withTouchUp_whenVideoLessThan16Seconds_andClickAfterEnd_shouldStartMoPubBrowser() throws Exception {
-        stub(mockMediaPlayer.getDuration()).toReturn(15999);
-        stub(mockMediaPlayer.getCurrentPosition()).toReturn(15999);
-
-        initializeSubject();
-        subject.onResume();
-
-        setMockMediaPlayer(mockMediaPlayer);
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-
-        Robolectric.getUiThreadScheduler().unPause();
-
-        getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
-
-        ArgumentCaptor<Bundle> bundleCaptor = ArgumentCaptor.forClass(Bundle.class);
-        verify(baseVideoViewControllerListener).onStartActivityForResult(
-                eq(MoPubBrowser.class),
-                eq(expectedBrowserRequestCode),
-                bundleCaptor.capture()
-        );
-
-        assertThat(bundleCaptor.getValue().get(DESTINATION_URL_KEY)).isEqualTo("clickThrough");
-    }
-
-    @Test
-    public void onTouch_withTouchUp_whenVideoLongerThan16Seconds_andClickBefore5Seconds_shouldDoNothing() throws Exception {
-        stub(mockMediaPlayer.getDuration()).toReturn(100000);
-        stub(mockMediaPlayer.getCurrentPosition()).toReturn(4999);
-
-        initializeSubject();
-        subject.onResume();
-
-        setMockMediaPlayer(mockMediaPlayer);
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-
-        Robolectric.getUiThreadScheduler().unPause();
-
-        getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
-
-        Intent nextStartedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(nextStartedActivity).isNull();
-    }
-
-    @Test
-    public void onTouch_withTouchUp_whenVideoLongerThan16Seconds_andClickAfter5Seconds_shouldStartMoPubBrowser() throws Exception {
-        stub(mockMediaPlayer.getDuration()).toReturn(100000);
-        stub(mockMediaPlayer.getCurrentPosition()).toReturn(5001);
-
-        initializeSubject();
-        subject.onResume();
-
-        setMockMediaPlayer(mockMediaPlayer);
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-
-        Robolectric.getUiThreadScheduler().unPause();
-
-        getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
-
-        ArgumentCaptor<Bundle> bundleCaptor = ArgumentCaptor.forClass(Bundle.class);
-        verify(baseVideoViewControllerListener).onStartActivityForResult(
-                eq(MoPubBrowser.class),
-                eq(expectedBrowserRequestCode),
-                bundleCaptor.capture()
-        );
-
-        assertThat(bundleCaptor.getValue().get(DESTINATION_URL_KEY)).isEqualTo("clickThrough");
-    }
-
-    @Test
-    public void onTouch_whenCloseButtonVisible_shouldPingClickThroughTrackers() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addClickTrackers(Arrays.asList("click_1", "click_2"));
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
-
-        initializeSubject();
-
-        subject.setCloseButtonVisible(true);
-
-        getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
-        verify(mockRequestQueue).add(argThat(isUrl("click_1")));
-        verify(mockRequestQueue).add(argThat(isUrl("click_2")));
-    }
-
-    @Test
-    public void onTouch_whenCloseButtonNotVisible_shouldNotPingClickThroughTrackers() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addClickTrackers(Arrays.asList("click_1", "click_2"));
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
-
-        initializeSubject();
-
-        subject.setCloseButtonVisible(false);
-
-        getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
-        assertThat(Robolectric.httpRequestWasMade()).isFalse();
-    }
-
-    @Test
-    public void onTouch_withNullBaseVideoViewListener_andActionTouchUp_shouldReturnTrueAndNotBlowUp() throws Exception {
-        subject = new VastVideoViewController(context, bundle, testBroadcastIdentifier, null);
-
-        boolean result = getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
-
-        // pass
-
-        assertThat(result).isTrue();
-    }
-
-    @Test
-    public void onTouch_withActionTouchDown_shouldConsumeMotionEvent() throws Exception {
-        initializeSubject();
-
-        boolean result = getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionDown(0, 0));
-
-        assertThat(result).isTrue();
-    }
-
-    @Test
-    public void onPrepared_whenDurationIsLessThanMaxVideoDurationForCloseButton_shouldSetShowCloseButtonDelayToDuration() throws Exception {
-        initializeSubject();
-
-        stub(mockMediaPlayer.getDuration()).toReturn(1000);
-        setMockMediaPlayer(mockMediaPlayer);
-
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(1000);
-    }
-
-    @Test
-    public void onPrepared_whenDurationIsGreaterThanMaxVideoDurationForCloseButton_shouldNotSetShowCloseButtonDelay() throws Exception {
-        initializeSubject();
-
-        stub(mockMediaPlayer.getDuration()).toReturn(MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON + 1);
-        setMockMediaPlayer(mockMediaPlayer);
-
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
-    }
-
-    @Test
-    public void onCompletion_shouldMarkVideoAsFinished() throws Exception {
-        initializeSubject();
-
-        getShadowVideoView().getOnCompletionListener().onCompletion(null);
-
-        assertThat(subject.isVideoFinishedPlaying()).isTrue();
-    }
-
-    @Test
-    public void onCompletion_whenAllTrackersTracked_whenNoPlaybackErrors_shouldPingCompletionTrackersOnlyOnce() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        VastAbsoluteProgressTracker testTracker = new VastAbsoluteProgressTracker("testUrl", 123);
-        vastVideoConfiguration.addAbsoluteTrackers(Arrays.asList(testTracker));
-        vastVideoConfiguration.addCompleteTrackers(Arrays.asList("complete_1", "complete_2"));
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
-
-        initializeSubject();
-        testTracker.setTracked();
-
-        getShadowVideoView().getOnCompletionListener().onCompletion(null);
-        verify(mockRequestQueue).add(argThat(isUrl("complete_1")));
-        verify(mockRequestQueue).add(argThat(isUrl("complete_2")));
-
-        // Completion trackers should still only be hit once
-        getShadowVideoView().getOnCompletionListener().onCompletion(null);
-        verify(mockRequestQueue).add(argThat(isUrl("complete_1")));
-        verify(mockRequestQueue).add(argThat(isUrl("complete_2")));
-    }
-
-    @Test
-    public void onCompletion_whenSomeTrackersRemain_shouldNotPingCompletionTrackers() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addCompleteTrackers(Arrays.asList("complete_1", "complete_2"));
-        VastAbsoluteProgressTracker testTracker = new VastAbsoluteProgressTracker("testUrl", 123);
-        // Never track the testTracker, so completion trackers should not be fired.
-        vastVideoConfiguration.addAbsoluteTrackers(Arrays.asList(testTracker));
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
-
-        initializeSubject();
-
-        getShadowVideoView().getOnCompletionListener().onCompletion(null);
-        verify(mockRequestQueue, never()).add(argThat(isUrl("complete_1")));
-        verify(mockRequestQueue, never()).add(argThat(isUrl("complete_2")));
-    }
-
-    @Test
-    public void onCompletion_whenPlaybackError_shouldNotPingCompletionTrackers() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addCompleteTrackers(Arrays.asList("complete_1", "complete_2"));
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
-
-        initializeSubject();
-        subject.setVideoError();
-
-        getShadowVideoView().getOnCompletionListener().onCompletion(null);
-        verify(mockRequestQueue, never()).add(argThat(isUrl("complete_1")));
-        verify(mockRequestQueue, never()).add(argThat(isUrl("complete_2")));
-    }
-
-    @Test
-    public void onCompletion_shouldPreventOnResumeFromStartingVideo() throws Exception {
-        initializeSubject();
-
-        getShadowVideoView().getOnCompletionListener().onCompletion(null);
-
-        subject.onResume();
-
-        assertThat(getShadowVideoView().isPlaying()).isFalse();
-    }
-
-    @Test
-    public void onCompletion_shouldStopProgressChecker() throws Exception {
-        initializeSubject();
-        subject.onResume();
-
-        assertThat(subject.getIsVideoProgressShouldBeChecked()).isTrue();
-
-        getShadowVideoView().getOnCompletionListener().onCompletion(null);
-
-        assertThat(subject.getIsVideoProgressShouldBeChecked()).isFalse();
-    }
-
-    @Test
-    public void onCompletion_shouldDisplayCompanionAdIfAvailable() throws Exception {
-        initializeSubject();
-        subject.onCreate();
-
-        Robolectric.getBackgroundScheduler().unPause();
-        Robolectric.getUiThreadScheduler().unPause();
-        Thread.sleep(NETWORK_DELAY);
-
-        final ImageView imageView = subject.getCompanionAdImageView();
-
-        assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(imageView.getVisibility()).isEqualTo(View.INVISIBLE);
-
-        getShadowVideoView().getOnCompletionListener().onCompletion(null);
-
-        assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.GONE);
-        assertThat(imageView.getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(shadowOf(((BitmapDrawable) imageView.getDrawable()).getBitmap()).getCreatedFromBytes()).isEqualTo("body".getBytes());
-    }
-
-    @Test
-    public void onCompletion_shouldShowThatchedBackground() throws Exception {
-        initializeSubject();
-
-        final ImageView imageView = subject.getCompanionAdImageView();
-
-        assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(imageView.getVisibility()).isEqualTo(View.INVISIBLE);
-
-        getShadowVideoView().getOnCompletionListener().onCompletion(null);
-
-        assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.GONE);
-        assertThat(imageView.getVisibility()).isEqualTo(View.INVISIBLE);
-    }
-
-    @Test
-    public void onError_shouldFireVideoErrorAndReturnFalse() throws Exception {
-        initializeSubject();
-
-        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_FAIL, testBroadcastIdentifier);
-
-        boolean result = getShadowVideoView().getOnErrorListener().onError(null, 0, 0);
-        Robolectric.getUiThreadScheduler().unPause();
-
-        assertThat(result).isFalse();
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
-        assertThat(subject.getVideoError()).isTrue();
-    }
-
-    @Test
-    public void onError_shouldStopProgressChecker() throws Exception {
-        initializeSubject();
-        subject.onResume();
-
-        assertThat(subject.getIsVideoProgressShouldBeChecked()).isTrue();
-
-        getShadowVideoView().getOnErrorListener().onError(null, 0, 0);
-
-        assertThat(subject.getIsVideoProgressShouldBeChecked()).isFalse();
-    }
-
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
-    @Test
-    public void onError_withVideoFilePermissionErrorBelowJellyBean_shouldRetryPlayingTheVideo() throws Exception {
-        File file = new File("disk_video_path");
-        file.createNewFile();
-
-        initializeSubject();
-
-        assertThat(getShadowVideoView().getCurrentVideoState()).isEqualTo(-1);
-
-        assertThat(subject.getVideoRetries()).isEqualTo(0);
-        getShadowVideoView().getOnErrorListener().onError(new MediaPlayer(), 1, Integer.MIN_VALUE);
-
-        assertThat(getShadowVideoView().isPlaying()).isTrue();
-        assertThat(subject.getVideoRetries()).isEqualTo(1);
-
-        file.delete();
-    }
-
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
-    @Test
-    public void retryMediaPlayer_withVideoFilePermissionErrorAndBelowJellyBean_shouldReturnTrue() throws Exception {
-        File file = new File("disk_video_path");
-        file.createNewFile();
-
-        initializeSubject();
-
-        assertThat(subject.getVideoRetries()).isEqualTo(0);
-        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 1, Integer.MIN_VALUE)).isTrue();
-        assertThat(subject.getVideoRetries()).isEqualTo(1);
-
-        file.delete();
-    }
-
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
-    @Test
-    public void retryMediaPlayer_shouldNotRunMoreThanOnce() throws Exception {
-        File file = new File("disk_video_path");
-        file.createNewFile();
-
-        initializeSubject();
-
-        assertThat(subject.getVideoRetries()).isEqualTo(0);
-        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 1, Integer.MIN_VALUE)).isTrue();
-        assertThat(subject.getVideoRetries()).isEqualTo(1);
-
-        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 1, Integer.MIN_VALUE)).isFalse();
-        assertThat(subject.getVideoRetries()).isEqualTo(1);
-
-        file.delete();
-    }
-
-    @Config(reportSdk = VERSION_CODES.JELLY_BEAN)
-    @Test
-    public void retryMediaPlayer_withAndroidVersionAboveJellyBean_shouldReturnFalse() throws Exception {
-        File file = new File("disk_video_path");
-        file.createNewFile();
-
-        initializeSubject();
-
-        assertThat(subject.getVideoRetries()).isEqualTo(0);
-        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 1, Integer.MIN_VALUE)).isFalse();
-        assertThat(subject.getVideoRetries()).isEqualTo(0);
-
-        file.delete();
-    }
-
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
-    @Test
-    public void retryMediaPlayer_withOtherVideoError_shouldReturnFalse() throws Exception {
-        File file = new File("disk_video_path");
-        file.createNewFile();
-
-        initializeSubject();
-
-        assertThat(subject.getVideoRetries()).isEqualTo(0);
-        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 2, Integer.MIN_VALUE)).isFalse();
-        assertThat(subject.getVideoRetries()).isEqualTo(0);
-
-        file.delete();
-    }
-
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
-    @Test
-    public void retryMediaPlayer_withExceptionThrown_shouldReturnFalseAndIncrementRetryCount() throws Exception {
-        File file = new File("disk_video_path");
-        if (file.exists()){
-            assertThat(file.delete()).isTrue();
-        }
-
-        initializeSubject();
-
-        assertThat(subject.getVideoRetries()).isEqualTo(0);
-        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 1, Integer.MIN_VALUE)).isFalse();
-        assertThat(subject.getVideoRetries()).isEqualTo(1);
-    }
-
-    @Test
-    public void handleClick_shouldMakeRequestsToClickTrackingUrls() {
-        initializeSubject();
-        subject.handleClick(Arrays.asList("clicktracker1", "clicktracker2"), "clickthrough");
-
-        verify(mockRequestQueue).add(argThat(isUrl("clicktracker1")));
-        verify(mockRequestQueue).add(argThat(isUrl("clicktracker2")));
-    }
-
-    @Test
-    public void handleClick_withNullClickTrackers_shouldNotThrowAnException() {
-        initializeSubject();
-        subject.handleClick(null, "clickthrough");
-
-        // pass
-    }
-
-    @Test
-    public void handleClick_withNullClickThroughUrl_shouldNotBroadcastClickOrOpenNewActivity() {
-        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_CLICK, testBroadcastIdentifier);
-
-        initializeSubject();
-        subject.handleClick(Arrays.asList("clicktracker"), null);
-
-        Robolectric.getUiThreadScheduler().unPause();
-        verify(broadcastReceiver, never()).onReceive(any(Context.class), eq(expectedIntent));
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
-    }
-
-    @Test
-    public void handleClick_withMoPubNativeBrowserClickThroughUrl_shouldOpenExternalBrowser() {
-        initializeSubject();
-
-        subject.handleClick(Arrays.asList("clicktracker"),
-                "mopubnativebrowser://navigate?url=http%3A%2F%2Fwww.mopub.com");
-
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(intent.getDataString()).isEqualTo("http://www.mopub.com");
-        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
-    }
-
-    @Test
-    public void handleClick_withMalformedMoPubNativeBrowserClickThroughUrl_shouldNotOpenANewActivity() {
-        initializeSubject();
-
-        // url2 is an invalid query parameter
-        subject.handleClick(Arrays.asList("clicktracker"),
-                "mopubnativebrowser://navigate?url2=http%3A%2F%2Fwww.mopub.com");
-
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
-    }
-
-    @Test
-    public void videoProgressCheckerRunnableRun_shouldFireOffAllProgressTrackers() throws Exception {
-        stub(mockMediaPlayer.getDuration()).toReturn(9002);
-        stub(mockMediaPlayer.getCurrentPosition()).toReturn(9002);
-
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("first", 0.25f),
-                new VastFractionalProgressTracker("second", 0.5f),
-                new VastFractionalProgressTracker("third", 0.75f)));
-
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
-
-        initializeSubject();
-        subject.onResume();
-        setMockMediaPlayer(mockMediaPlayer);
-
-        // this runs the videoProgressChecker
-        Robolectric.getUiThreadScheduler().unPause();
-
-        verify(mockRequestQueue).add(argThat(isUrl("first")));
-        verify(mockRequestQueue).add(argThat(isUrl("second")));
-        verify(mockRequestQueue).add(argThat(isUrl("third")));
-    }
-
-    @Test
-    public void videoProgressCheckerRunnableRun_whenDurationIsInvalid_shouldNotMakeAnyNetworkCalls() throws Exception {
-        stub(mockMediaPlayer.getDuration()).toReturn(0);
-        stub(mockMediaPlayer.getCurrentPosition()).toReturn(100);
-
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
-
-        initializeSubject();
-        setMockMediaPlayer(mockMediaPlayer);
-        subject.onResume();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-
-        Robolectric.getUiThreadScheduler().runOneTask();
-        // make sure the repeated task hasn't run yet
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-        verifyZeroInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void videoProgressCheckerRunnableRun_whenCurrentTimeLessThanTwoSeconds_shouldNotFireStartTracker() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addAbsoluteTrackers(Arrays.asList(new VastAbsoluteProgressTracker("start", 2000)));
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
-
-        stub(mockMediaPlayer.getDuration()).toReturn(100000);
-        stub(mockMediaPlayer.getCurrentPosition()).toReturn(1999);
-
-        initializeSubject();
-        subject.onResume();
-        setMockMediaPlayer(mockMediaPlayer);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-
-        Robolectric.getUiThreadScheduler().runOneTask();
-        // make sure the repeated task hasn't run yet
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-
-        // Since it has not yet been a second, we expect that the start tracker has not been fired
-        verifyZeroInteractions(mockRequestQueue);
-
-        // run checker another time
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-        Robolectric.getUiThreadScheduler().runOneTask();
-
-        verifyZeroInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void videoProgressCheckerRunnableRun_whenCurrentTimeGreaterThanTwoSeconds_shouldFireStartTracker() throws Exception {
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addAbsoluteTrackers(Arrays.asList(new VastAbsoluteProgressTracker("start", 2000)));
-        vastVideoConfiguration.addAbsoluteTrackers(Arrays.asList(new VastAbsoluteProgressTracker("later", 3000)));
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
-
-        stub(mockMediaPlayer.getDuration()).toReturn(100000);
-        stub(mockMediaPlayer.getCurrentPosition()).toReturn(2000);
-
-        initializeSubject();
-        subject.onResume();
-        setMockMediaPlayer(mockMediaPlayer);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-
-        Robolectric.getUiThreadScheduler().unPause();
-
-        verify(mockRequestQueue).add(argThat(isUrl("start")));
-
-        // run checker another time
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-        Robolectric.getUiThreadScheduler().runOneTask();
-
-        verifyNoMoreInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void videoProgressCheckerRunnableRun_whenProgressIsPastFirstQuartile_shouldOnlyPingFirstQuartileTrackersOnce() throws Exception {
-        stub(mockMediaPlayer.getDuration()).toReturn(100);
-        stub(mockMediaPlayer.getCurrentPosition()).toReturn(26);
-
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("first", 0.25f)));
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("don't call", 0.28f)));
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
-
-        initializeSubject();
-        subject.onResume();
-        setMockMediaPlayer(mockMediaPlayer);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-
-        Robolectric.getUiThreadScheduler().unPause();
-
-        verify(mockRequestQueue).add(argThat(isUrl("first")));
-
-        // run checker another time
-        Robolectric.getUiThreadScheduler().runOneTask();
-
-        verifyNoMoreInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void videoProgressCheckerRunnableRun_whenProgressIsPastMidQuartile_shouldPingFirstQuartileTrackers_andMidQuartileTrackersBothOnlyOnce() throws Exception {
-        stub(mockMediaPlayer.getDuration()).toReturn(100);
-        stub(mockMediaPlayer.getCurrentPosition()).toReturn(51);
-
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("first", 0.25f)));
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("second", 0.5f)));
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
-
-        initializeSubject();
-        subject.onResume();
-        setMockMediaPlayer(mockMediaPlayer);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-
-        Robolectric.getUiThreadScheduler().unPause();
-
-        verify(mockRequestQueue).add(argThat(isUrl("first")));
-        verify(mockRequestQueue).add(argThat(isUrl("second")));
-
-        Robolectric.getUiThreadScheduler().runOneTask();
-
-        verifyNoMoreInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void videoProgressCheckerRunnableRun_whenProgressIsPastThirdQuartile_shouldPingFirstQuartileTrackers_andMidQuartileTrackers_andThirdQuartileTrackersAllOnlyOnce() throws Exception {
-        stub(mockMediaPlayer.getDuration()).toReturn(100);
-        stub(mockMediaPlayer.getCurrentPosition()).toReturn(76);
-
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("first", 0.25f)));
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("second", 0.5f)));
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("third", 0.75f)));
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
-
-        initializeSubject();
-        subject.onResume();
-        setMockMediaPlayer(mockMediaPlayer);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-
-        Robolectric.getUiThreadScheduler().unPause();
-
-        verify(mockRequestQueue).add(argThat(isUrl("first")));
-        verify(mockRequestQueue).add(argThat(isUrl("second")));
-        verify(mockRequestQueue).add(argThat(isUrl("third")));
-
-        Robolectric.getUiThreadScheduler().runOneTask();
-
-        verifyNoMoreInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void videoProgressCheckerRunnableRun_asVideoPlays_shouldPingAllThreeTrackersIndividuallyOnce() throws Exception {
-        stub(mockMediaPlayer.getDuration()).toReturn(100);
-
-        VastVideoConfiguration vastVideoConfiguration = new VastVideoConfiguration();
-        vastVideoConfiguration.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("first", 0.25f)));
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("second", 0.5f)));
-        vastVideoConfiguration.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("third", 0.75f)));
-        bundle.putSerializable(VAST_VIDEO_CONFIGURATION, vastVideoConfiguration);
-
-        initializeSubject();
-        subject.onResume();
-        setMockMediaPlayer(mockMediaPlayer);
-
-        // before any trackers are fired
-        fastForwardMediaPlayerAndAssertRequestMade(1);
-
-        fastForwardMediaPlayerAndAssertRequestMade(24);
-
-        // after it hits first tracker
-        fastForwardMediaPlayerAndAssertRequestMade(26, "first");
-
-        // before mid quartile is hit
-        fastForwardMediaPlayerAndAssertRequestMade(49);
-
-        // after it hits mid trackers
-        fastForwardMediaPlayerAndAssertRequestMade(51, "second");
-
-        // before third quartile is hit
-        fastForwardMediaPlayerAndAssertRequestMade(74);
-
-        // after third quartile is hit
-        fastForwardMediaPlayerAndAssertRequestMade(76, "third");
-
-        // way after third quartile is hit
-        fastForwardMediaPlayerAndAssertRequestMade(99);
-    }
-
-    @Test
-    public void videoProgressCheckerRunnableRun_whenCurrentPositionIsGreaterThanShowCloseButtonDelay_shouldShowCloseButton() throws Exception {
-        stub(mockMediaPlayer.getDuration()).toReturn(5002);
-        stub(mockMediaPlayer.getCurrentPosition()).toReturn(5001);
-
-        initializeSubject();
-        subject.onResume();
-        setMockMediaPlayer(mockMediaPlayer);
-
-        assertThat(subject.isShowCloseButtonEventFired()).isFalse();
-        Robolectric.getUiThreadScheduler().unPause();
-
-        assertThat(subject.isShowCloseButtonEventFired()).isTrue();
-    }
-
-    @Test
-    public void onPause_shouldStopProgressChecker() throws Exception {
-        initializeSubject();
-
-        subject.onResume();
-        assertThat(subject.getIsVideoProgressShouldBeChecked()).isTrue();
-
-        subject.onPause();
-        assertThat(subject.getIsVideoProgressShouldBeChecked()).isFalse();
-
-        subject.onPause();
-        assertThat(subject.getIsVideoProgressShouldBeChecked()).isFalse();
-    }
-
-    @Test
-    public void onResume_shouldStartVideoProgressCheckerOnce() throws Exception {
-        initializeSubject();
-
-        subject.onResume();
-        assertThat(subject.getIsVideoProgressShouldBeChecked()).isTrue();
-
-        subject.onPause();
-        assertThat(subject.getIsVideoProgressShouldBeChecked()).isFalse();
-
-        subject.onResume();
-        assertThat(subject.getIsVideoProgressShouldBeChecked()).isTrue();
-
-        subject.onResume();
-        assertThat(subject.getIsVideoProgressShouldBeChecked()).isTrue();
-    }
-
-    @Test
-    public void onResume_shouldSetVideoViewStateToStarted() throws Exception {
-        initializeSubject();
-
-        subject.onResume();
-
-        assertThat(getShadowVideoView().getCurrentVideoState()).isEqualTo(ShadowVideoView.START);
-        assertThat(getShadowVideoView().getPrevVideoState()).isNotEqualTo(ShadowVideoView.START);
-    }
-
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
-    @Test
-    public void onResume_shouldResetVideoRetryCountToZero() throws Exception {
-        File file = new File("disk_video_path");
-        file.createNewFile();
-
-        initializeSubject();
-
-        assertThat(subject.retryMediaPlayer(new MediaPlayer(), 1, Integer.MIN_VALUE)).isTrue();
-        assertThat(subject.getVideoRetries()).isEqualTo(1);
-
-        subject.onResume();
-        assertThat(subject.getVideoRetries()).isEqualTo(0);
-
-        file.delete();
-    }
-
-    @Ignore("pending")
-    @Test
-    public void onResume_shouldSeekToPrePausedPosition() throws Exception {
-        stub(mockMediaPlayer.getDuration()).toReturn(10000);
-        stub(mockMediaPlayer.getCurrentPosition()).toReturn(7000);
-
-        initializeSubject();
-        setMockMediaPlayer(mockMediaPlayer);
-        final VideoView videoView = spy(subject.getVideoView());
-
-        subject.onPause();
-
-        stub(mockMediaPlayer.getCurrentPosition()).toReturn(1000);
-
-        subject.onResume();
-        verify(videoView).seekTo(eq(7000));
-    }
-
-    @Test
-    public void backButtonEnabled_shouldDefaultToFalse() throws Exception {
-        initializeSubject();
-
-        assertThat(subject.backButtonEnabled()).isFalse();
-    }
-
-    @Test
-    public void backButtonEnabled_whenCloseButtonIsVisible_shouldReturnTrue() throws Exception {
-        initializeSubject();
-
-        subject.setCloseButtonVisible(true);
-
-        assertThat(subject.backButtonEnabled()).isTrue();
-    }
-
-    @Test
-    public void onClickCloseButton_whenCloseButtonIsVisible_shouldFireCloseTrackers() {
-        initializeSubject();
-
-        subject.setCloseButtonVisible(true);
-
-        // We don't have direct access to the CloseButtonWidget's close event, so we manually
-        // invoke its onTouchListener's onTouch callback with a fake MotionEvent.ACTION_UP action.
-        View.OnTouchListener closeButtonOnTouchListener =
-                shadowOf(getVastVideoToolbar().getCloseButtonWidget()).getOnTouchListener();
-        closeButtonOnTouchListener.onTouch(null, GestureUtils.createActionUp(0, 0));
-
-        verify(mockRequestQueue).add(argThat(isUrl("close")));
-    }
-
-    private void initializeSubject() {
-        subject = new VastVideoViewController(context, bundle, testBroadcastIdentifier, baseVideoViewControllerListener);
-    }
-
-    private void setMockMediaPlayer(final MediaPlayer mockMediaPlayer) throws IllegalAccessException {
-        final VideoView videoView = subject.getVideoView();
-        ReflectionUtils.setVariableValueInObject(videoView, "mMediaPlayer", mockMediaPlayer);
-
-        int state = (Integer) ReflectionUtils.getValueIncludingSuperclasses("STATE_PLAYING", videoView);
-
-        ReflectionUtils.setVariableValueInObject(videoView, "mCurrentState", state);
-    }
-
-    private void fastForwardMediaPlayerAndAssertRequestMade(int time, String... urls) throws Exception {
-        stub(mockMediaPlayer.getCurrentPosition()).toReturn(time);
-        Robolectric.getUiThreadScheduler().unPause();
-        Robolectric.getBackgroundScheduler().unPause();
-        Thread.sleep(NETWORK_DELAY);
-
-        for (String url : urls) {
-            verify(mockRequestQueue).add(argThat(isUrl(url)));
-        }
-
-        Robolectric.getFakeHttpLayer().clearRequestInfos();
-    }
-
-    private VastVideoToolbar getVastVideoToolbar() {
-        final ViewGroup layout = subject.getLayout();
-
-        for (int i = 0; i < layout.getChildCount(); i++) {
-            final View child = layout.getChildAt(i);
-            if (child instanceof VastVideoToolbar) {
-                return (VastVideoToolbar) child;
-            }
-        }
-
-        fail("Unable to find VastVideoToolbar in view hierarchy.");
-        return null;
-    }
-
-    private ShadowVideoView getShadowVideoView() {
-        return shadowOf(subject.getVideoView());
-    }
-
-    public static void assertHttpRequestsMade(final String userAgent, final String... urls) {
-        final int numberOfReceivedHttpRequests = Robolectric.getFakeHttpLayer().getSentHttpRequestInfos().size();
-        assertThat(numberOfReceivedHttpRequests).isEqualTo(urls.length);
-
-        for (final String url : urls) {
-            assertThat(Robolectric.httpRequestWasMade(url)).isTrue();
-        }
-
-        if (userAgent != null) {
-            while (true) {
-                final HttpRequest httpRequest = Robolectric.getNextSentHttpRequest();
-                if (httpRequest == null) {
-                    break;
-                }
-
-                assertThat(httpRequest.getFirstHeader(USER_AGENT.getKey()).getValue())
-                        .isEqualTo(userAgent);
-            }
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/ViewGestureDetectorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/ViewGestureDetectorTest.java
deleted file mode 100644
index 0c0935ef..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/ViewGestureDetectorTest.java
+++ /dev/null
@@ -1,139 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.view.MotionEvent;
-import android.view.View;
-
-import com.mopub.common.AdReport;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.shadows.ShadowGestureDetector;
-
-import static com.mopub.mobileads.ViewGestureDetector.UserClickListener;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.verify;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(SdkTestRunner.class)
-public class ViewGestureDetectorTest {
-    private Activity context;
-    private ViewGestureDetector subject;
-    private AdAlertGestureListener adAlertGestureListener;
-    private View view;
-    @Mock AdReport mockAdReport;
-
-    @Before
-    public void setUp() throws Exception {
-        context = new Activity();
-        view = mock(View.class);
-        stub(view.getWidth()).toReturn(320);
-        stub(view.getHeight()).toReturn(50);
-
-        adAlertGestureListener = mock(AdAlertGestureListener.class);
-
-        subject = new ViewGestureDetector(context, view, mockAdReport);
-        subject.setAdAlertGestureListener(adAlertGestureListener);
-    }
-
-    @Test
-    public void constructor_shouldDisableLongPressAndSetGestureListener() throws Exception {
-        subject = new ViewGestureDetector(context, view, mockAdReport);
-
-        ShadowGestureDetector shadowGestureDetector = shadowOf(subject);
-
-        assertThat(subject.isLongpressEnabled()).isFalse();
-        assertThat(shadowGestureDetector.getListener()).isNotNull();
-        assertThat(shadowGestureDetector.getListener()).isInstanceOf(AdAlertGestureListener.class);
-    }
-
-    @Test
-    public void onTouchEvent_whenActionUpAndClickListener_shouldNotifyClickListenerAndCheckReportAd() throws Exception {
-        MotionEvent expectedMotionEvent = createMotionEvent(MotionEvent.ACTION_UP);
-
-        UserClickListener userClickListener = mock(UserClickListener.class);
-        subject.setUserClickListener(userClickListener);
-
-        subject.sendTouchEvent(expectedMotionEvent);
-
-        verify(userClickListener).onUserClick();
-        verify(adAlertGestureListener).finishGestureDetection();
-    }
-
-    @Test
-    public void onTouchEvent_whenActionUpButNoClickListener_shouldNotNotifyClickListenerAndCheckReportAd() throws Exception {
-        MotionEvent expectedMotionEvent = createMotionEvent(MotionEvent.ACTION_UP);
-
-        UserClickListener userClickListener = mock(UserClickListener.class);
-
-        subject.sendTouchEvent(expectedMotionEvent);
-
-        verify(userClickListener, never()).onUserClick();
-        verify(adAlertGestureListener).finishGestureDetection();
-    }
-
-    @Test
-    public void onTouchEvent_whenActionDown_shouldForwardOnTouchEvent() throws Exception {
-        MotionEvent expectedMotionEvent = createMotionEvent(MotionEvent.ACTION_DOWN);
-
-        subject.sendTouchEvent(expectedMotionEvent);
-
-        MotionEvent actualMotionEvent = shadowOf(subject).getOnTouchEventMotionEvent();
-
-        assertThat(actualMotionEvent).isEqualTo(expectedMotionEvent);
-    }
-
-    @Test
-    public void onTouchEvent_whenActionMoveWithinView_shouldForwardOnTouchEvent() throws Exception {
-        MotionEvent expectedMotionEvent = createActionMove(160);
-
-        subject.sendTouchEvent(expectedMotionEvent);
-
-        MotionEvent actualMotionEvent = shadowOf(subject).getOnTouchEventMotionEvent();
-
-        assertThat(actualMotionEvent).isEqualTo(expectedMotionEvent);
-        verify(adAlertGestureListener, never()).reset();
-    }
-
-    @Test
-    public void sendTouchEvent_whenReceiveTouchEventOutsideOfViewInXDirection_shouldResetAlertState() throws Exception {
-        subject.sendTouchEvent(createActionMove(350));
-
-        MotionEvent actualMotionEvent = shadowOf(subject).getOnTouchEventMotionEvent();
-
-        assertThat(actualMotionEvent).isNull();
-        verify(adAlertGestureListener).reset();
-    }
-
-    @Test
-    public void sendTouchEvent_whenReceiveTouchEventOutsideOfViewInYDirection_shouldResetAlertState() throws Exception {
-        MotionEvent verticalMotion = MotionEvent.obtain(0, 0, MotionEvent.ACTION_MOVE, 160, 200, 0);
-        subject.sendTouchEvent(verticalMotion);
-
-        MotionEvent actualMotionEvent = shadowOf(subject).getOnTouchEventMotionEvent();
-
-        assertThat(actualMotionEvent).isNull();
-        verify(adAlertGestureListener).reset();
-    }
-
-    @Test
-    public void resetAdFlaggingGesture_shouldNotifyAdAlertGestureListenerOfReset() throws Exception {
-        subject.resetAdFlaggingGesture();
-
-        verify(adAlertGestureListener).reset();
-    }
-
-    private MotionEvent createActionMove(float x) {
-        return MotionEvent.obtain(0, 0, MotionEvent.ACTION_MOVE, x, 0, 0);
-    }
-
-    private MotionEvent createMotionEvent(int action) {
-        return MotionEvent.obtain(0, 0, action, 0, 0, 0);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
deleted file mode 100644
index 84196d37..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
+++ /dev/null
@@ -1,563 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.res.Configuration;
-import android.location.Location;
-import android.location.LocationManager;
-import android.net.ConnectivityManager;
-import android.net.NetworkInfo;
-import android.net.Uri;
-import android.os.Build;
-import android.provider.Settings;
-import android.telephony.TelephonyManager;
-import android.text.TextUtils;
-
-import com.mopub.common.ClientMetadata;
-import com.mopub.common.GpsHelper;
-import com.mopub.common.GpsHelperTest;
-import com.mopub.common.MoPub;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.Reflection.MethodBuilder;
-import com.mopub.common.util.Utils;
-import com.mopub.common.util.test.support.TestMethodBuilderFactory;
-import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
-import com.mopub.mraid.MraidNativeCommandHandler;
-import com.mopub.network.Networking;
-import com.mopub.network.PlayServicesUrlRewriter;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowConnectivityManager;
-import org.robolectric.shadows.ShadowLocationManager;
-import org.robolectric.shadows.ShadowNetworkInfo;
-
-import static android.Manifest.permission.ACCESS_NETWORK_STATE;
-import static android.net.ConnectivityManager.TYPE_DUMMY;
-import static android.net.ConnectivityManager.TYPE_ETHERNET;
-import static android.net.ConnectivityManager.TYPE_MOBILE;
-import static android.net.ConnectivityManager.TYPE_MOBILE_DUN;
-import static android.net.ConnectivityManager.TYPE_MOBILE_HIPRI;
-import static android.net.ConnectivityManager.TYPE_MOBILE_MMS;
-import static android.net.ConnectivityManager.TYPE_MOBILE_SUPL;
-import static android.net.ConnectivityManager.TYPE_WIFI;
-import static android.telephony.TelephonyManager.NETWORK_TYPE_UNKNOWN;
-import static com.mopub.common.ClientMetadata.MoPubNetworkType;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.when;
-import static org.robolectric.Robolectric.application;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(SdkTestRunner.class)
-@Config(shadows = {MoPubShadowTelephonyManager.class})
-public class WebViewAdUrlGeneratorTest {
-
-    private WebViewAdUrlGenerator subject;
-    private static final String TEST_UDID = "20b013c721c";
-    private String expectedUdid;
-    private Configuration configuration;
-    private MoPubShadowTelephonyManager shadowTelephonyManager;
-    private ShadowConnectivityManager shadowConnectivityManager;
-    private Activity context;
-    private MethodBuilder methodBuilder;
-
-    @Before
-    public void setup() {
-        context = new Activity();
-        shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
-        subject = new WebViewAdUrlGenerator(context,
-                new MraidNativeCommandHandler().isStorePictureSupported(context));
-        Settings.Secure.putString(application.getContentResolver(), Settings.Secure.ANDROID_ID, TEST_UDID);
-        expectedUdid = "sha%3A" + Utils.sha1(TEST_UDID);
-        configuration = application.getResources().getConfiguration();
-        shadowTelephonyManager = (MoPubShadowTelephonyManager) shadowOf((TelephonyManager) application.getSystemService(Context.TELEPHONY_SERVICE));
-        shadowConnectivityManager = shadowOf((ConnectivityManager) application.getSystemService(Context.CONNECTIVITY_SERVICE));
-        methodBuilder = TestMethodBuilderFactory.getSingletonMock();
-        Networking.useHttps(false);
-    }
-
-    @After
-    public void tearDown() throws Exception {
-        reset(methodBuilder);
-    }
-
-    @Test
-    public void generateAdUrl_shouldIncludeMinimumFields() throws Exception {
-        String expectedAdUrl = new AdUrlBuilder(expectedUdid).build();
-
-        String adUrl = generateMinimumUrlString();
-
-        assertThat(adUrl).isEqualTo(expectedAdUrl);
-    }
-
-    @Test
-    public void generateAdUrl_withHttpsScheme() throws Exception {
-        Networking.useHttps(true);
-        String adUrl = generateMinimumUrlString();
-        assertThat(adUrl).startsWith("https://");
-    }
-
-    @Test
-    public void generateAdUrl_shouldRunMultipleTimes() throws Exception {
-        String expectedAdUrl = new AdUrlBuilder(expectedUdid).build();
-
-        String adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(expectedAdUrl);
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(expectedAdUrl);
-    }
-
-    @Test
-    public void generateAdUrl_shouldIncludeAllFields() throws Exception {
-        final String expectedAdUrl = new AdUrlBuilder(expectedUdid)
-                .withAdUnitId("adUnitId")
-                .withQuery("key%3Avalue")
-                .withLatLon("20.1%2C30.0", "1")
-                .withMcc("123")
-                .withMnc("456")
-                .withCountryIso("expected%20country")
-                .withCarrierName("expected%20carrier")
-                .withExternalStoragePermission(false)
-                .build();
-
-        shadowTelephonyManager.setNetworkOperator("123456");
-        shadowTelephonyManager.setNetworkCountryIso("expected country");
-        shadowTelephonyManager.setNetworkOperatorName("expected carrier");
-
-        Location location = new Location("");
-        location.setLatitude(20.1);
-        location.setLongitude(30.0);
-        location.setAccuracy(1.23f); // should get rounded to "1"
-
-        String adUrl = subject
-                .withAdUnitId("adUnitId")
-                .withKeywords("key:value")
-                .withLocation(location)
-                .generateUrlString("ads.mopub.com");
-
-        assertThat(adUrl).isEqualTo(expectedAdUrl);
-    }
-
-    @Test
-    public void generateAdUrl_shouldRecognizeOrientation() throws Exception {
-        configuration.orientation = Configuration.ORIENTATION_LANDSCAPE;
-        assertThat(generateMinimumUrlString()).contains("&o=l");
-        configuration.orientation = Configuration.ORIENTATION_PORTRAIT;
-        assertThat(generateMinimumUrlString()).contains("&o=p");
-        configuration.orientation = Configuration.ORIENTATION_SQUARE;
-        assertThat(generateMinimumUrlString()).contains("&o=s");
-    }
-
-    @Test
-    public void generateAdUrl_shouldHandleFunkyNetworkOperatorCodes() throws Exception {
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
-
-        shadowTelephonyManager.setNetworkOperator("123456");
-        String adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withMcc("123").withMnc("456").build());
-
-        ClientMetadata.clearForTesting();
-        shadowTelephonyManager.setNetworkOperator("12345");
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withMcc("123").withMnc("45").build());
-
-        ClientMetadata.clearForTesting();
-        shadowTelephonyManager.setNetworkOperator("1234");
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withMcc("123").withMnc("4").build());
-
-        ClientMetadata.clearForTesting();
-        shadowTelephonyManager.setNetworkOperator("123");
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withMcc("123").withMnc("").build());
-
-        ClientMetadata.clearForTesting();
-        shadowTelephonyManager.setNetworkOperator("12");
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withMcc("12").withMnc("").build());
-    }
-
-    @Test
-    public void generateAdUrl_needsAndDoesNotHaveReadPhoneState_shouldNotContainOperatorName() {
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
-
-        shadowTelephonyManager.setNeedsReadPhoneState(true);
-        shadowTelephonyManager.setReadPhoneStatePermission(false);
-
-        String adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withCarrierName("").build());
-    }
-
-    @Test
-    public void generateAdUrl_needsAndHasReadPhoneState_shouldContainOperatorName() {
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
-
-        shadowTelephonyManager.setNeedsReadPhoneState(true);
-        shadowTelephonyManager.setReadPhoneStatePermission(true);
-        shadowTelephonyManager.setNetworkOperatorName("TEST_NAME");
-
-        String adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withCarrierName("TEST_NAME").build());
-    }
-
-    @Test
-    public void generateAdUrl_doesNotNeedReadPhoneState_shouldContainOperatorName() {
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
-
-        shadowTelephonyManager.setNeedsReadPhoneState(false);
-        shadowTelephonyManager.setReadPhoneStatePermission(false);
-        shadowTelephonyManager.setNetworkOperatorName("TEST_NAME");
-
-        String adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withCarrierName("TEST_NAME").build());
-    }
-
-    @Test
-    public void generateAdurl_whenOnCDMA_shouldGetOwnerStringFromSimCard() throws Exception {
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
-        shadowTelephonyManager.setPhoneType(TelephonyManager.PHONE_TYPE_CDMA);
-        shadowTelephonyManager.setSimState(TelephonyManager.SIM_STATE_READY);
-        shadowTelephonyManager.setNetworkOperator("123456");
-        shadowTelephonyManager.setSimOperator("789012");
-        String adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withMcc("789").withMnc("012").build());
-    }
-
-    @Test
-    public void generateAdurl_whenSimNotReady_shouldDefaultToNetworkOperator() throws Exception {
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
-        shadowTelephonyManager.setPhoneType(TelephonyManager.PHONE_TYPE_CDMA);
-        shadowTelephonyManager.setSimState(TelephonyManager.SIM_STATE_ABSENT);
-        shadowTelephonyManager.setNetworkOperator("123456");
-        shadowTelephonyManager.setSimOperator("789012");
-        String adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withMcc("123").withMnc("456").build());
-    }
-
-    @Test
-    public void generateAdUrl_shouldSetNetworkType() throws Exception {
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
-        String adUrl;
-
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_DUMMY));
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.UNKNOWN).build());
-
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_ETHERNET));
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.ETHERNET).build());
-
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_WIFI));
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.WIFI).build());
-
-        // bunch of random mobile types just to make life more interesting
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_MOBILE));
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.MOBILE).build());
-
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_MOBILE_DUN));
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.MOBILE).build());
-
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_MOBILE_HIPRI));
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.MOBILE).build());
-
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_MOBILE_MMS));
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.MOBILE).build());
-
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_MOBILE_SUPL));
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.MOBILE).build());
-    }
-
-    @Test
-    public void generateAdUrl_whenNoNetworkPermission_shouldGenerateUnknownNetworkType() throws Exception {
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
-
-        shadowOf(context).denyPermissions(ACCESS_NETWORK_STATE);
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_MOBILE));
-
-        String adUrl = generateMinimumUrlString();
-
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.UNKNOWN).build());
-    }
-
-    @Test
-    public void generateAdUrl_shouldTolerateNullActiveNetwork() throws Exception {
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
-        shadowConnectivityManager.setActiveNetworkInfo(null);
-
-        String adUrl = generateMinimumUrlString();
-
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.UNKNOWN).build());
-    }
-
-
-
-    @Test
-    public void generateAdUrl_whenGooglePlayServicesIsLinkedAndAdInfoIsCached_shouldUseAdInfoParams() throws Exception {
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.setStatic(any(Class.class))).thenReturn(methodBuilder);
-        when(methodBuilder.addParam(any(Class.class), any())).thenReturn(methodBuilder);
-        when(methodBuilder.execute()).thenReturn(GpsHelper.GOOGLE_PLAY_SUCCESS_CODE);
-
-        GpsHelperTest.TestAdInfo adInfo = new GpsHelperTest.TestAdInfo();
-        final ClientMetadata clientMetadata = ClientMetadata.getInstance(context);
-        clientMetadata.setAdvertisingInfo(adInfo.mAdId, adInfo.mLimitAdTrackingEnabled);
-
-        expectedUdid = "ifa%3A" + adInfo.ADVERTISING_ID;
-        String expectedAdUrl = new AdUrlBuilder(expectedUdid)
-                .withDnt(adInfo.LIMIT_AD_TRACKING_ENABLED)
-                .build();
-        assertThat(generateMinimumUrlString()).isEqualTo(expectedAdUrl);
-    }
-
-    @Test
-    public void generateAdUrl_whenLocationServiceGpsProviderHasMostRecentLocation_shouldUseLocationServiceValue() {
-        Location locationFromDeveloper = new Location("");
-        locationFromDeveloper.setLatitude(42);
-        locationFromDeveloper.setLongitude(-42);
-        locationFromDeveloper.setAccuracy(3.5f);
-        locationFromDeveloper.setTime(1000);
-
-        // Mock out the LocationManager's last known location to be more recent than the
-        // developer-supplied location.
-        ShadowLocationManager shadowLocationManager = Robolectric.shadowOf(
-                (LocationManager) application.getSystemService(Context.LOCATION_SERVICE));
-        Location locationFromSdk = new Location("");
-        locationFromSdk.setLatitude(37);
-        locationFromSdk.setLongitude(-122);
-        locationFromSdk.setAccuracy(5.0f);
-        locationFromSdk.setTime(2000);
-        shadowLocationManager.setLastKnownLocation(LocationManager.GPS_PROVIDER, locationFromSdk);
-
-        String adUrl = subject.withLocation(locationFromDeveloper)
-                .generateUrlString("ads.mopub.com");
-        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isEqualTo("37.0,-122.0");
-        assertThat(getParameterFromRequestUrl(adUrl, "lla")).isEqualTo("5");
-        assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEqualTo("1");
-    }
-
-    @Test
-    public void generateAdUrl_whenDeveloperSuppliesMoreRecentLocationThanLocationService_shouldUseDeveloperSuppliedLocation() {
-        Location locationFromDeveloper = new Location("");
-        locationFromDeveloper.setLatitude(42);
-        locationFromDeveloper.setLongitude(-42);
-        locationFromDeveloper.setAccuracy(3.5f);
-        locationFromDeveloper.setTime(1000);
-
-        ShadowLocationManager shadowLocationManager = Robolectric.shadowOf(
-                (LocationManager) application.getSystemService(Context.LOCATION_SERVICE));
-
-        // Mock out the LocationManager's last known location to be older than the
-        // developer-supplied location.
-        Location olderLocation = new Location("");
-        olderLocation.setLatitude(40);
-        olderLocation.setLongitude(-105);
-        olderLocation.setAccuracy(8.0f);
-        olderLocation.setTime(500);
-        shadowLocationManager.setLastKnownLocation(LocationManager.GPS_PROVIDER, olderLocation);
-
-        String adUrl = subject.withLocation(locationFromDeveloper)
-                .generateUrlString("ads.mopub.com");
-        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isEqualTo("42.0,-42.0");
-        assertThat(getParameterFromRequestUrl(adUrl, "lla")).isEqualTo("3");
-        assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEmpty();
-    }
-
-    @Test
-    public void generateAdUrl_whenLocationServiceNetworkProviderHasMostRecentLocation_shouldUseLocationServiceValue() {
-        Location locationFromDeveloper = new Location("");
-        locationFromDeveloper.setLatitude(42);
-        locationFromDeveloper.setLongitude(-42);
-        locationFromDeveloper.setAccuracy(3.5f);
-        locationFromDeveloper.setTime(1000);
-
-        // Mock out the LocationManager's last known location to be more recent than the
-        // developer-supplied location.
-        ShadowLocationManager shadowLocationManager = Robolectric.shadowOf(
-                (LocationManager) application.getSystemService(Context.LOCATION_SERVICE));
-        Location locationFromSdk = new Location("");
-        locationFromSdk.setLatitude(38);
-        locationFromSdk.setLongitude(-123);
-        locationFromSdk.setAccuracy(5.0f);
-        locationFromSdk.setTime(2000);
-        shadowLocationManager.setLastKnownLocation(LocationManager.NETWORK_PROVIDER,
-                locationFromSdk);
-
-        String adUrl = subject.withLocation(locationFromDeveloper)
-                .generateUrlString("ads.mopub.com");
-        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isEqualTo("38.0,-123.0");
-        assertThat(getParameterFromRequestUrl(adUrl, "lla")).isEqualTo("5");
-        assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEqualTo("1");
-    }
-
-    @Test
-    public void enableLocationTracking_shouldIncludeLocationInUrl() {
-        MoPub.setLocationAwareness(MoPub.LocationAwareness.NORMAL);
-        String adUrl = generateMinimumUrlString();
-        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isNotNull();
-    }
-
-    @Test
-    public void disableLocationCollection_shouldNotIncludeLocationInUrl() {
-        MoPub.setLocationAwareness(MoPub.LocationAwareness.DISABLED);
-        String adUrl = generateMinimumUrlString();
-        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isNullOrEmpty();
-    }
-
-    @Test
-    public void disableLocationCollection_whenLocationServiceHasMostRecentLocation_shouldNotIncludeLocationInUrl() {
-        MoPub.setLocationAwareness(MoPub.LocationAwareness.DISABLED);
-
-        // Mock out the LocationManager's last known location.
-        ShadowLocationManager shadowLocationManager = Robolectric.shadowOf(
-                (LocationManager) application.getSystemService(Context.LOCATION_SERVICE));
-        Location locationFromSdk = new Location("");
-        locationFromSdk.setLatitude(37);
-        locationFromSdk.setLongitude(-122);
-        locationFromSdk.setAccuracy(5.0f);
-        locationFromSdk.setTime(2000);
-        shadowLocationManager.setLastKnownLocation(LocationManager.GPS_PROVIDER, locationFromSdk);
-
-        String adUrl = generateMinimumUrlString();
-        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isNullOrEmpty();
-    }
-
-    private String getParameterFromRequestUrl(String requestString, String key) {
-        Uri requestUri = Uri.parse(requestString);
-        String parameter = requestUri.getQueryParameter(key);
-
-        if (TextUtils.isEmpty(parameter)) {
-            return "";
-        }
-
-        return parameter;
-    }
-
-    private NetworkInfo createNetworkInfo(int type) {
-        return ShadowNetworkInfo.newInstance(null,
-                type,
-                NETWORK_TYPE_UNKNOWN, true, true);
-    }
-
-    private String generateMinimumUrlString() {
-        return subject.generateUrlString("ads.mopub.com");
-    }
-
-    private static class AdUrlBuilder {
-        private String expectedUdid;
-        private String adUnitId = "";
-        private String query = "";
-        private String latLon = "";
-        private String locationAccuracy = "";
-        private String mnc = "";
-        private String mcc = "";
-        private String countryIso = "";
-        private String carrierName = "";
-        private String dnt = "";
-        private MoPubNetworkType networkType = MoPubNetworkType.MOBILE;
-        private int externalStoragePermission;
-
-        public AdUrlBuilder(String expectedUdid) {
-            this.expectedUdid = expectedUdid;
-        }
-
-        public String build() {
-            return "http://ads.mopub.com/m/ad" +
-                    "?v=6" +
-                    paramIfNotEmpty("id", adUnitId) +
-                    "&nv=" + MoPub.SDK_VERSION +
-                    "&dn=" + Build.MANUFACTURER +
-                    "%2C" + Build.MODEL +
-                    "%2C" + Build.PRODUCT +
-
-                    paramIfNotEmpty("q", query) +
-                    (TextUtils.isEmpty(latLon) ? "" : "&ll=" + latLon + "&lla=" + locationAccuracy) +
-                    "&z=-0700" +
-                    "&o=u" +
-                    "&sc_a=1.0" +
-                    "&mr=1" +
-                    paramIfNotEmpty("mcc", mcc) +
-                    paramIfNotEmpty("mnc", mnc) +
-                    paramIfNotEmpty("iso", countryIso) +
-                    paramIfNotEmpty("cn", carrierName) +
-                    "&ct=" + networkType +
-                    "&av=1.0" +
-                    "&android_perms_ext_storage=" + externalStoragePermission +
-                    "&udid=" + PlayServicesUrlRewriter.UDID_TEMPLATE +
-                    "&dnt=" + PlayServicesUrlRewriter.DO_NOT_TRACK_TEMPLATE;
-
-        }
-
-        public AdUrlBuilder withAdUnitId(String adUnitId) {
-            this.adUnitId = adUnitId;
-            return this;
-        }
-
-        public AdUrlBuilder withQuery(String query) {
-            this.query = query;
-            return this;
-        }
-
-        public AdUrlBuilder withLatLon(String latLon, String locationAccuracy) {
-            this.latLon = latLon;
-            this.locationAccuracy = locationAccuracy;
-            return this;
-        }
-
-        public AdUrlBuilder withMcc(String mcc) {
-            this.mcc = mcc;
-            return this;
-        }
-
-        public AdUrlBuilder withMnc(String mnc) {
-            this.mnc = mnc;
-            return this;
-        }
-
-        public AdUrlBuilder withCountryIso(String countryIso) {
-            this.countryIso = countryIso;
-            return this;
-        }
-
-        public AdUrlBuilder withCarrierName(String carrierName) {
-            this.carrierName = carrierName;
-            return this;
-        }
-
-        public AdUrlBuilder withNetworkType(MoPubNetworkType networkType) {
-            this.networkType = networkType;
-            return this;
-        }
-
-        public AdUrlBuilder withExternalStoragePermission(boolean enabled) {
-            this.externalStoragePermission = enabled ? 1 : 0;
-            return this;
-        }
-
-        public AdUrlBuilder withDnt(boolean dnt) {
-            if (dnt) {
-                this.dnt = "1";
-            }
-            return this;
-        }
-
-        private String paramIfNotEmpty(String key, String value) {
-            if (TextUtils.isEmpty(value)) {
-                return "";
-            } else {
-                return "&" + key + "=" + value;
-            }
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventBannerFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventBannerFactoryTest.java
deleted file mode 100644
index 771f97c1..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventBannerFactoryTest.java
+++ /dev/null
@@ -1,35 +0,0 @@
-package com.mopub.mobileads.factories;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.AdTypeTranslator;
-import com.mopub.mobileads.CustomEventBanner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.HTML_BANNER;
-import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.MRAID_BANNER;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-public class CustomEventBannerFactoryTest {
-
-    private CustomEventBannerFactory subject;
-
-    @Before
-    public void setup() {
-        subject = new CustomEventBannerFactory();
-    }
-
-    @Test
-    public void create_shouldCreateBanners() throws Exception {
-        assertCustomEventClassCreated(MRAID_BANNER);
-        assertCustomEventClassCreated(HTML_BANNER);
-    }
-
-    private void assertCustomEventClassCreated(AdTypeTranslator.CustomEventType customEventType) throws Exception {
-        CustomEventBanner customEventBanner = subject.internalCreate(customEventType.toString());
-        assertThat(customEventBanner.getClass().getName()).isEqualTo(customEventType.toString());
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventInterstitialFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventInterstitialFactoryTest.java
deleted file mode 100644
index 81146585..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventInterstitialFactoryTest.java
+++ /dev/null
@@ -1,35 +0,0 @@
-package com.mopub.mobileads.factories;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.AdTypeTranslator;
-import com.mopub.mobileads.CustomEventInterstitial;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.HTML_INTERSTITIAL;
-import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.MRAID_INTERSTITIAL;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-public class CustomEventInterstitialFactoryTest {
-
-    private CustomEventInterstitialFactory subject;
-
-    @Before
-    public void setup() {
-        subject = new CustomEventInterstitialFactory();
-    }
-
-    @Test
-    public void create_shouldCreateInterstitials() throws Exception {
-        assertCustomEventClassCreated(MRAID_INTERSTITIAL);
-        assertCustomEventClassCreated(HTML_INTERSTITIAL);
-    }
-
-    private void assertCustomEventClassCreated(AdTypeTranslator.CustomEventType customEventType) throws Exception {
-        CustomEventInterstitial customEventInterstitial = subject.internalCreate(customEventType.toString());
-        assertThat(customEventInterstitial.getClass().getName()).isEqualTo(customEventType.toString());
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/FileUtils.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/FileUtils.java
deleted file mode 100644
index ddaab4e5..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/FileUtils.java
+++ /dev/null
@@ -1,17 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import com.mopub.common.util.Streams;
-
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-
-// note: keep this in test/support folder. this is not intended to be of Utility usage
-public class FileUtils {
-    public static void copyFile(String sourceFile, String destinationFile) {
-        try {
-            Streams.copyContent(new FileInputStream(sourceFile), new FileOutputStream(destinationFile));
-        } catch (Exception e) {
-            throw new RuntimeException(e);
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/GestureUtils.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/GestureUtils.java
deleted file mode 100644
index eeee2c93..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/GestureUtils.java
+++ /dev/null
@@ -1,17 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import android.view.MotionEvent;
-
-public class GestureUtils {
-    public static MotionEvent createActionMove(float x, float y) {
-        return MotionEvent.obtain(0, 0, MotionEvent.ACTION_MOVE, x, y, 0);
-    }
-
-    public static MotionEvent createActionDown(float x, float y) {
-        return MotionEvent.obtain(0, 0, MotionEvent.ACTION_DOWN, x, y, 0);
-    }
-
-    public static MotionEvent createActionUp(float x, float y) {
-        return MotionEvent.obtain(0, 0, MotionEvent.ACTION_UP, x, y, 0);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/JsonUtils.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/JsonUtils.java
deleted file mode 100644
index dae3c5f6..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/JsonUtils.java
+++ /dev/null
@@ -1,40 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import com.mopub.common.util.Json;
-
-import java.util.Collections;
-import java.util.Map;
-import java.util.Set;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.fail;
-
-public class JsonUtils {
-    // Assert that two shallow jsonStrings representing <String,String> maps are equal
-    public static void assertJsonStringMapsEqual(String a, String b) {
-        Map<String, String> mapA = Collections.emptyMap();
-        Map<String, String> mapB = Collections.emptyMap();
-
-        try {
-            mapA = Json.jsonStringToMap(a);
-        } catch (Exception e) {
-            fail("Unable to turn json into map: " + a);
-        }
-
-        try {
-            mapB = Json.jsonStringToMap(b);
-        } catch (Exception e) {
-            fail("Unable to turn json into map: " + b);
-        }
-
-        assertThat(mapA.size()).isEqualTo(mapB.size());
-
-        Set<String> keysA = mapA.keySet();
-        Set<String> keysB = mapB.keySet();
-        assertThat(keysA).isEqualTo(keysB);
-
-        for (final String key : keysA) {
-            assertThat(mapA.get(key)).isEqualTo(mapB.get(key));
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/MoPubShadowTelephonyManager.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/MoPubShadowTelephonyManager.java
deleted file mode 100644
index 7a4256e5..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/MoPubShadowTelephonyManager.java
+++ /dev/null
@@ -1,41 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import android.telephony.TelephonyManager;
-
-import org.robolectric.annotation.Implements;
-import org.robolectric.shadows.ShadowTelephonyManager;
-
-@Implements(TelephonyManager.class)
-public class MoPubShadowTelephonyManager extends ShadowTelephonyManager {
-
-    private boolean mNeedsReadPhoneState;
-    private boolean mHasReadPhoneState;
-
-    public MoPubShadowTelephonyManager() {
-        mNeedsReadPhoneState = false;
-        mHasReadPhoneState = false;
-    }
-
-    /**
-     * Some Lenovo & other phones require READ_PHONE_STATE on getNetworkOperatorName().
-     */
-    public void setNeedsReadPhoneState(boolean needsReadPhoneState) {
-        mNeedsReadPhoneState = needsReadPhoneState;
-    }
-
-    @Override
-    public void setReadPhoneStatePermission(final boolean readPhoneStatePermission) {
-        // Robolectric hides its checkReadPhoneState method so we need to hack our own.
-        mHasReadPhoneState = readPhoneStatePermission;
-        super.setReadPhoneStatePermission(readPhoneStatePermission);
-    }
-
-    @Override
-    public String getNetworkOperatorName() {
-        if (!mNeedsReadPhoneState || mHasReadPhoneState) {
-            return super.getNetworkOperatorName();
-        } else {
-            throw new SecurityException("READ_PHONE_STATE is required.");
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdViewControllerFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdViewControllerFactory.java
deleted file mode 100644
index 6ca5f842..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdViewControllerFactory.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import android.content.Context;
-
-import com.mopub.mobileads.AdViewController;
-import com.mopub.mobileads.MoPubView;
-import com.mopub.mobileads.factories.AdViewControllerFactory;
-
-import static org.mockito.Mockito.mock;
-
-public class TestAdViewControllerFactory extends AdViewControllerFactory {
-    private AdViewController mockAdViewController = mock(AdViewController.class);
-
-    public static AdViewController getSingletonMock() {
-        return getTestFactory().mockAdViewController;
-    }
-
-    private static TestAdViewControllerFactory getTestFactory() {
-        return ((TestAdViewControllerFactory) instance);
-    }
-
-    @Override
-    protected AdViewController internalCreate(Context context, MoPubView moPubView) {
-        return mockAdViewController;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerAdapterFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerAdapterFactory.java
deleted file mode 100644
index b6301488..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerAdapterFactory.java
+++ /dev/null
@@ -1,51 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import android.support.annotation.NonNull;
-
-import com.mopub.common.AdReport;
-import com.mopub.mobileads.CustomEventBannerAdapter;
-import com.mopub.mobileads.MoPubView;
-import com.mopub.mobileads.factories.CustomEventBannerAdapterFactory;
-
-import java.util.Map;
-
-import static org.mockito.Mockito.mock;
-
-public class TestCustomEventBannerAdapterFactory extends CustomEventBannerAdapterFactory {
-    private CustomEventBannerAdapter mockCustomEventBannerAdapter = mock(CustomEventBannerAdapter.class);
-    private MoPubView moPubView;
-    private String className;
-    private Map<String, String> classData;
-
-    public static CustomEventBannerAdapter getSingletonMock() {
-        return getTestFactory().mockCustomEventBannerAdapter;
-    }
-
-    private static TestCustomEventBannerAdapterFactory getTestFactory() {
-        return ((TestCustomEventBannerAdapterFactory) instance);
-    }
-
-    @Override
-    protected CustomEventBannerAdapter internalCreate(@NonNull final MoPubView moPubView,
-            @NonNull final String className,
-            @NonNull final Map<String, String> serverExtras,
-            final long broadcastIdentifier,
-            @NonNull final AdReport adReport) {
-        this.moPubView = moPubView;
-        this.className = className;
-        this.classData = serverExtras;
-        return mockCustomEventBannerAdapter;
-    }
-
-    public static MoPubView getLatestMoPubView() {
-        return getTestFactory().moPubView;
-    }
-
-    public static String getLatestClassName() {
-        return getTestFactory().className;
-    }
-
-    public static Map<String, String> getLatestClassData() {
-        return getTestFactory().classData;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerFactory.java
deleted file mode 100644
index ec88b419..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerFactory.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import com.mopub.mobileads.CustomEventBanner;
-import com.mopub.mobileads.factories.CustomEventBannerFactory;
-
-import static org.mockito.Mockito.mock;
-
-public class TestCustomEventBannerFactory extends CustomEventBannerFactory{
-    private CustomEventBanner instance = mock(CustomEventBanner.class);
-
-    @Override
-    protected CustomEventBanner internalCreate(String className) {
-        return instance;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialAdapterFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialAdapterFactory.java
deleted file mode 100644
index a392ad53..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialAdapterFactory.java
+++ /dev/null
@@ -1,45 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import com.mopub.common.AdReport;
-import com.mopub.mobileads.CustomEventInterstitialAdapter;
-import com.mopub.mobileads.MoPubInterstitial;
-import com.mopub.mobileads.factories.CustomEventInterstitialAdapterFactory;
-
-import java.util.Map;
-
-import static org.mockito.Mockito.mock;
-
-public class TestCustomEventInterstitialAdapterFactory extends CustomEventInterstitialAdapterFactory{
-    private CustomEventInterstitialAdapter mockCustomEventInterstitalAdapter = mock(CustomEventInterstitialAdapter.class);
-    private MoPubInterstitial latestMoPubInterstitial;
-    private String latestClassName;
-    private Map<String, String> latestClassData;
-
-    public static CustomEventInterstitialAdapter getSingletonMock() {
-        return getTestFactory().mockCustomEventInterstitalAdapter;
-    }
-
-    private static TestCustomEventInterstitialAdapterFactory getTestFactory() {
-        return ((TestCustomEventInterstitialAdapterFactory)instance);
-    }
-
-    public static MoPubInterstitial getLatestMoPubInterstitial() {
-        return getTestFactory().latestMoPubInterstitial;
-    }
-
-    public static String getLatestClassName() {
-        return getTestFactory().latestClassName;
-    }
-
-    public static Map<String, String> getLatestServerExtras() {
-        return getTestFactory().latestClassData;
-    }
-
-    @Override
-    protected CustomEventInterstitialAdapter internalCreate(MoPubInterstitial moPubInterstitial, String className, Map<String, String> serverExtras, long broadcastIdentifier, AdReport adReport) {
-        latestMoPubInterstitial = moPubInterstitial;
-        latestClassName = className;
-        latestClassData = serverExtras;
-        return mockCustomEventInterstitalAdapter;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialFactory.java
deleted file mode 100644
index 2ca47147..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialFactory.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import com.mopub.mobileads.CustomEventInterstitial;
-import com.mopub.mobileads.factories.CustomEventInterstitialFactory;
-
-import static org.mockito.Mockito.mock;
-
-public class TestCustomEventInterstitialFactory extends CustomEventInterstitialFactory {
-    private CustomEventInterstitial instance = mock(CustomEventInterstitial.class);
-
-    @Override
-    protected CustomEventInterstitial internalCreate(String className) {
-        return instance;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlBannerWebViewFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlBannerWebViewFactory.java
deleted file mode 100644
index 84c91fc5..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlBannerWebViewFactory.java
+++ /dev/null
@@ -1,71 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import android.content.Context;
-import android.webkit.WebSettings;
-
-import com.mopub.common.AdReport;
-import com.mopub.mobileads.HtmlBannerWebView;
-import com.mopub.mobileads.factories.HtmlBannerWebViewFactory;
-
-import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
-
-public class TestHtmlBannerWebViewFactory extends HtmlBannerWebViewFactory {
-    private HtmlBannerWebView mockHtmlBannerWebView = mock(HtmlBannerWebView.class);
-    private CustomEventBannerListener latestListener;
-    private boolean latestIsScrollable;
-    private String latestRedirectUrl;
-    private String latestClickthroughUrl;
-    private AdReport latestAdReport;
-
-    public TestHtmlBannerWebViewFactory() {
-        WebSettings webSettings = mock(WebSettings.class);
-        stub(mockHtmlBannerWebView.getSettings()).toReturn(webSettings);
-        stub(webSettings.getUserAgentString()).toReturn("Mozilla/5.0 (Linux; U; Android 4.0.3; ko-kr; LG-L160L Build/IML74K) AppleWebkit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30");
-    }
-
-    public static HtmlBannerWebView getSingletonMock() {
-        return getTestFactory().mockHtmlBannerWebView;
-    }
-
-    private static TestHtmlBannerWebViewFactory getTestFactory() {
-        return (TestHtmlBannerWebViewFactory) instance;
-    }
-
-    @Override
-    public HtmlBannerWebView internalCreate(
-            Context context,
-            AdReport adReport,
-            CustomEventBannerListener customEventBannerListener,
-            boolean isScrollable,
-            String redirectUrl,
-            String clickthroughUrl) {
-        latestListener = customEventBannerListener;
-        latestIsScrollable = isScrollable;
-        latestRedirectUrl = redirectUrl;
-        latestClickthroughUrl = clickthroughUrl;
-        latestAdReport = adReport;
-        return mockHtmlBannerWebView;
-    }
-
-    public static CustomEventBannerListener getLatestListener() {
-        return getTestFactory().latestListener;
-    }
-
-    public static boolean getLatestIsScrollable() {
-        return getTestFactory().latestIsScrollable;
-    }
-
-    public static String getLatestRedirectUrl() {
-        return getTestFactory().latestRedirectUrl;
-    }
-
-    public static String getLatestClickthroughUrl() {
-        return getTestFactory().latestClickthroughUrl;
-    }
-
-    public static AdReport getLatestAdReport() {
-        return getTestFactory().latestAdReport;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlInterstitialWebViewFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlInterstitialWebViewFactory.java
deleted file mode 100644
index c9dc4c47..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlInterstitialWebViewFactory.java
+++ /dev/null
@@ -1,51 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import android.content.Context;
-
-import com.mopub.common.AdReport;
-import com.mopub.mobileads.HtmlInterstitialWebView;
-import com.mopub.mobileads.factories.HtmlInterstitialWebViewFactory;
-
-import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static org.mockito.Mockito.mock;
-
-public class TestHtmlInterstitialWebViewFactory extends HtmlInterstitialWebViewFactory {
-    private HtmlInterstitialWebView mockHtmlInterstitialWebView = mock(HtmlInterstitialWebView.class);
-
-    private CustomEventInterstitialListener latestListener;
-    private boolean latestIsScrollable;
-    private String latestRedirectUrl;
-    private String latestClickthroughUrl;
-
-    public static HtmlInterstitialWebView getSingletonMock() {
-        return getTestFactory().mockHtmlInterstitialWebView;
-    }
-
-    private static TestHtmlInterstitialWebViewFactory getTestFactory() {
-        return (TestHtmlInterstitialWebViewFactory) instance;
-    }
-
-    @Override
-    public HtmlInterstitialWebView internalCreate(Context context, AdReport adReport, CustomEventInterstitialListener customEventInterstitialListener, boolean isScrollable, String redirectUrl, String clickthroughUrl) {
-        latestListener = customEventInterstitialListener;
-        latestIsScrollable = isScrollable;
-        latestRedirectUrl = redirectUrl;
-        latestClickthroughUrl = clickthroughUrl;
-        return getTestFactory().mockHtmlInterstitialWebView;
-    }
-
-    public static CustomEventInterstitialListener getLatestListener() {
-        return getTestFactory().latestListener;
-    }
-
-    public static boolean getLatestIsScrollable() {
-        return getTestFactory().latestIsScrollable;
-    }
-    public static String getLatestRedirectUrl() {
-        return getTestFactory().latestRedirectUrl;
-    }
-
-    public static String getLatestClickthroughUrl() {
-        return getTestFactory().latestClickthroughUrl;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpClientFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpClientFactory.java
deleted file mode 100644
index 2a364a19..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpClientFactory.java
+++ /dev/null
@@ -1,14 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import com.mopub.mobileads.factories.HttpClientFactory;
-
-import org.apache.http.impl.client.DefaultHttpClient;
-
-public class TestHttpClientFactory extends HttpClientFactory {
-    private DefaultHttpClient instance = new DefaultHttpClient();
-
-    @Override
-    protected DefaultHttpClient internalCreate(int timeout) {
-        return instance;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpResponseWithHeaders.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpResponseWithHeaders.java
deleted file mode 100644
index 1a7fde20..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpResponseWithHeaders.java
+++ /dev/null
@@ -1,37 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import org.apache.http.Header;
-import org.apache.http.message.BasicHeader;
-import org.robolectric.tester.org.apache.http.TestHttpResponse;
-
-import java.util.HashMap;
-import java.util.Map;
-
-public class TestHttpResponseWithHeaders extends TestHttpResponse {
-    private Map<String, Header> headers;
-
-    public TestHttpResponseWithHeaders(int statusCode, String responseBody) {
-        super(statusCode, responseBody);
-        headers = new HashMap<String, Header>();
-    }
-
-    public TestHttpResponseWithHeaders(int statusCode, byte[] responseBody) {
-        super(statusCode, responseBody);
-        headers = new HashMap<String, Header>();
-    }
-
-    @Override
-    public void addHeader(String name, String value) {
-        headers.put(name, new BasicHeader(name, value));
-    }
-
-    @Override
-    public Header getFirstHeader(String name) {
-        return headers.get(name);
-    }
-
-    @Override
-    public Header[] getAllHeaders() {
-        return headers.values().toArray(new Header[headers.size()]);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMoPubViewFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMoPubViewFactory.java
deleted file mode 100644
index 971b61b2..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMoPubViewFactory.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import android.content.Context;
-
-import com.mopub.mobileads.MoPubView;
-import com.mopub.mobileads.factories.MoPubViewFactory;
-
-import static org.mockito.Mockito.mock;
-
-public class TestMoPubViewFactory extends MoPubViewFactory {
-    private final MoPubView mockMoPubView = mock(MoPubView.class);
-
-    public static MoPubView getSingletonMock() {
-        return getTestFactory().mockMoPubView;
-    }
-
-    private static TestMoPubViewFactory getTestFactory() {
-        return (TestMoPubViewFactory) instance;
-    }
-
-    @Override
-    protected MoPubView internalCreate(Context context) {
-        return mockMoPubView;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMraidControllerFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMraidControllerFactory.java
deleted file mode 100644
index 511499fe..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMraidControllerFactory.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-
-import com.mopub.common.AdReport;
-import com.mopub.mobileads.factories.MraidControllerFactory;
-import com.mopub.mraid.MraidController;
-import com.mopub.mraid.PlacementType;
-
-import static org.mockito.Mockito.mock;
-
-public class TestMraidControllerFactory extends MraidControllerFactory {
-    private MraidController mockMraidController = mock(MraidController.class);
-
-    public static MraidController getSingletonMock() {
-        return getTestFactory().mockMraidController;
-    }
-
-    private static TestMraidControllerFactory getTestFactory() {
-        return ((TestMraidControllerFactory) MraidControllerFactory.instance);
-    }
-
-    @Override
-    protected MraidController internalCreate(@NonNull final Context context,
-            @NonNull AdReport adReport,
-            @NonNull final PlacementType placementType) {
-        return mockMraidController;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastManagerFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastManagerFactory.java
deleted file mode 100644
index 8e9afc9c..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastManagerFactory.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import android.content.Context;
-
-import com.mopub.mobileads.factories.VastManagerFactory;
-import com.mopub.mobileads.util.vast.VastManager;
-
-import static org.mockito.Mockito.mock;
-
-public class TestVastManagerFactory extends VastManagerFactory {
-    private VastManager mockVastManager = mock(VastManager.class);
-
-    public static VastManager getSingletonMock() {
-        return getTestFactory().mockVastManager;
-    }
-
-    private static TestVastManagerFactory getTestFactory() {
-        return (TestVastManagerFactory) instance;
-    }
-
-    @Override
-    public VastManager internalCreate(final Context context) {
-        return getTestFactory().mockVastManager;
-    }
-}
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastVideoDownloadTaskFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastVideoDownloadTaskFactory.java
deleted file mode 100644
index fb9b24f7..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastVideoDownloadTaskFactory.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import com.mopub.mobileads.VastVideoDownloadTask;
-import com.mopub.mobileads.factories.VastVideoDownloadTaskFactory;
-
-import static org.mockito.Mockito.mock;
-
-public class TestVastVideoDownloadTaskFactory extends VastVideoDownloadTaskFactory {
-    private static VastVideoDownloadTask singletonMock = mock(VastVideoDownloadTask.class);
-
-    public static VastVideoDownloadTask getSingletonMock() {
-        return singletonMock;
-    }
-
-    @Override
-    protected VastVideoDownloadTask internalCreate(VastVideoDownloadTask.VastVideoDownloadTaskListener vastVideoDownloadTaskListener) {
-        return singletonMock;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ThreadUtils.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ThreadUtils.java
deleted file mode 100644
index 5d143b2f..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ThreadUtils.java
+++ /dev/null
@@ -1,14 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-// note: keep this in test/support folder. this is not intended to be of Utility usage
-public class ThreadUtils {
-    public static final long NETWORK_DELAY = 500;
-
-    public static void pause(long millis){
-        try {
-            Thread.sleep(millis);
-        } catch (InterruptedException ie){
-            // Ignore interrupts on this Thread.
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpClientsTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpClientsTest.java
deleted file mode 100644
index b2bbbb3b..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpClientsTest.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package com.mopub.mobileads.util;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.ThreadUtils;
-import org.apache.http.client.HttpClient;
-import org.apache.http.conn.ClientConnectionManager;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class HttpClientsTest {
-
-    public static final int HTTP_CLIENT_SHUTDOWN_TIME = 100;
-    private HttpClient httpClient;
-    private ClientConnectionManager clientConnectionManager;
-
-    @Before
-    public void setUp() throws Exception {
-        httpClient = mock(HttpClient.class);
-        clientConnectionManager = mock(ClientConnectionManager.class);
-        stub(httpClient.getConnectionManager()).toReturn(clientConnectionManager);
-    }
-
-    @Test
-    public void safeShutdown_shouldShutdownHttpClient() throws Exception {
-        HttpClients.safeShutdown(httpClient);
-
-        ThreadUtils.pause(HTTP_CLIENT_SHUTDOWN_TIME);
-
-        verify(clientConnectionManager).shutdown();
-    }
-
-    @Test
-    public void safeShutdown_withNullHttpClient_shouldNotBlowUp() throws Exception {
-        HttpClients.safeShutdown(null);
-
-        ThreadUtils.pause(HTTP_CLIENT_SHUTDOWN_TIME);
-
-        verify(clientConnectionManager, never()).shutdown();
-    }
-
-    @Test
-    public void safeShutdown_withNullConnectionManager_shouldNotBlowUp() throws Exception {
-        stub(httpClient.getConnectionManager()).toReturn(null);
-        HttpClients.safeShutdown(httpClient);
-
-        ThreadUtils.pause(HTTP_CLIENT_SHUTDOWN_TIME);
-
-        verify(clientConnectionManager, never()).shutdown();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/WebViewsTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/WebViewsTest.java
deleted file mode 100644
index 712eef93..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/WebViewsTest.java
+++ /dev/null
@@ -1,42 +0,0 @@
-package com.mopub.mobileads.util;
-
-import android.annotation.TargetApi;
-import android.os.Build;
-import android.webkit.WebView;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class WebViewsTest {
-
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1)
-    @Test
-    public void pause_withIsFinishingTrue_shouldStopLoading_shouldLoadBlankUrl_shouldPauseWebView() throws Exception {
-        WebView mockWebView = mock(WebView.class);
-
-        WebViews.onPause(mockWebView, true);
-
-        verify(mockWebView).stopLoading();
-        verify(mockWebView).loadUrl("");
-        verify(mockWebView).onPause();
-    }
-
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1)
-    @Test
-    public void pause_withIsFinishingFalse_shouldPauseWebView() throws Exception {
-        WebView mockWebView = mock(WebView.class);
-
-        WebViews.onPause(mockWebView, false);
-
-        verify(mockWebView, never()).stopLoading();
-        verify(mockWebView, never()).loadUrl("");
-        verify(mockWebView).onPause();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastManagerTest.java
deleted file mode 100644
index ecd17888..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastManagerTest.java
+++ /dev/null
@@ -1,583 +0,0 @@
-package com.mopub.mobileads.util.vast;
-
-import android.app.Activity;
-import android.content.Context;
-import android.view.Display;
-import android.view.WindowManager;
-
-import com.mopub.common.CacheService;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-import org.robolectric.tester.org.apache.http.FakeHttpLayer;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.concurrent.Semaphore;
-
-import static com.mopub.mobileads.util.vast.VastManager.VastManagerListener;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@Config(manifest = Config.NONE)
-@RunWith(SdkTestRunner.class)
-public class VastManagerTest {
-    static final String TEST_VAST_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>http://dsp.x-team.staging.mopub.com/xml</VASTAdTagURI><Impression>http://myTrackingURL/wrapper/impression1</Impression><Impression>http://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>http://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>http://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>http://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='firstQuartile'>http://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>http://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>http://myTrackingURL/wrapper/complete</Tracking><Tracking event='close'>http://myTrackingURL/wrapper/close</Tracking><Tracking event='mute'>http://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>http://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>http://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>http://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>http://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>http://myTrackingURL/wrapper/click</ClickTracking></VideoClicks><MediaFiles><MediaFile delivery='progressive' bitrate='416' width='300' height='250' type='video/mp4'><![CDATA[https://s3.amazonaws.com/mopub-vast/tapad-video1.mp4]]></MediaFile></MediaFiles></Linear></Creative><Creative AdID=\"601364-Companion\"> <CompanionAds><Companion width=\"9000\"></Companion> </CompanionAds></Creative></Creatives></Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>http://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>http://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
-    static final String TEST_NESTED_VAST_XML_STRING = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><VAST version='2.0'><Ad id='57722'><InLine><AdSystem version='1.0'>Tapad</AdSystem><AdTitle><![CDATA[PKW6T_LIV_DSN_Audience_TAPAD_3rd Party Audience Targeting_Action Movi]]></AdTitle><Description/><Impression><![CDATA[http://rtb-test.dev.tapad.com:8080/creative/imp.png?ts=1374099035457&svid=1&creative_id=30731&ctx_type=InApp&ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&liverail_cp=1]]></Impression><Creatives><Creative sequence='1' id='57722'><Linear><TrackingEvents><Tracking event='close'>http://myTrackingURL/wrapper/nested_close</Tracking></TrackingEvents><Duration>00:00:15</Duration><VideoClicks><ClickThrough><![CDATA[http://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com]]></ClickThrough></VideoClicks><MediaFiles><MediaFile delivery='progressive' bitrate='416' width='800' height='480' type='video/mp4'><![CDATA[https://s3.amazonaws.com/mopub-vast/tapad-video.mp4]]></MediaFile></MediaFiles></Linear></Creative><Creative AdID=\"601364-Companion\"><CompanionAds><Companion id=\"valid\" height=\"250\" width=\"300\"><StaticResource creativeType=\"image/jpeg\">http://demo.tremormedia.com/proddev/vast/Blistex1.jpg</StaticResource><TrackingEvents><Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking><Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking></TrackingEvents><CompanionClickThrough>http://www.tremormedia.com</CompanionClickThrough></Companion></CompanionAds></Creative></Creatives></InLine></Ad></VAST>";
-    static final String TEST_VAST_BAD_NEST_URL_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>http://dsp.x-team.staging.mopub.com/xml\"$|||</VASTAdTagURI><Impression>http://myTrackingURL/wrapper/impression1</Impression><Impression>http://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>http://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>http://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>http://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='firstQuartile'>http://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>http://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>http://myTrackingURL/wrapper/complete</Tracking><Tracking event='mute'>http://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>http://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>http://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>http://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>http://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>http://myTrackingURL/wrapper/click</ClickTracking></VideoClicks></Linear></Creative></Creatives></Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>http://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>http://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
-
-    private VastManager subject;
-    private FakeHttpLayer mFakeHttpLayer;
-    private VastManagerListener vastManagerListener;
-    private Activity context;
-    private VastVideoConfiguration vastVideoConfiguration;
-    private Semaphore semaphore;
-
-    @Before
-    public void setup() {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        CacheService.initializeDiskCache(context);
-        subject = new VastManager(context);
-        mFakeHttpLayer = Robolectric.getFakeHttpLayer();
-
-        semaphore = new Semaphore(0);
-        vastManagerListener = mock(VastManagerListener.class);
-        doAnswer(new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
-                Object[] args = invocationOnMock.getArguments();
-                VastManagerTest.this.vastVideoConfiguration = (VastVideoConfiguration) args[0];
-                semaphore.release();
-                return null;
-            }
-        }).when(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfiguration.class));
-    }
-
-    private void prepareVastVideoConfiguration() {
-        subject.prepareVastVideoConfiguration(TEST_VAST_XML_STRING, vastManagerListener);
-
-        Robolectric.runBackgroundTasks();
-        Robolectric.runUiThreadTasks();
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_shouldNotifyTheListenerAndContainTheCorrectVastValues() throws Exception {
-        // Vast redirect responses
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
-        // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfiguration.class));
-
-        assertThat(vastVideoConfiguration.getNetworkMediaFileUrl()).isEqualTo("https://s3.amazonaws.com/mopub-vast/tapad-video.mp4");
-
-        final String expectedFilePathDiskCache = CacheService.getFilePathDiskCache(vastVideoConfiguration.getNetworkMediaFileUrl());
-        assertThat(vastVideoConfiguration.getDiskMediaFileUrl()).isEqualTo(expectedFilePathDiskCache);
-
-        assertThat(vastVideoConfiguration.getClickThroughUrl()).isEqualTo("http://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com");
-        assertThat(vastVideoConfiguration.getImpressionTrackers().size()).isEqualTo(5);
-
-        // Verify quartile trackers
-        assertThat(vastVideoConfiguration.getFractionalTrackers().size()).isEqualTo(3);
-        assertThat(vastVideoConfiguration.getFractionalTrackers().get(0).trackingFraction()).isEqualTo(0.25f);
-        assertThat(vastVideoConfiguration.getFractionalTrackers().get(1).trackingFraction()).isEqualTo(0.5f);
-        assertThat(vastVideoConfiguration.getFractionalTrackers().get(2).trackingFraction()).isEqualTo(0.75f);
-
-        // Verify start tracker.
-        assertThat(vastVideoConfiguration.getAbsoluteTrackers().size()).isEqualTo(1);
-        assertThat(vastVideoConfiguration.getAbsoluteTrackers().get(0).getTrackingMilliseconds()).isEqualTo(2000);
-
-        assertThat(vastVideoConfiguration.getCompleteTrackers().size()).isEqualTo(1);
-
-        // We specifically added a close tracker to the nested vast test case here, explaining why
-        // there are two expected trackers here.
-        assertThat(vastVideoConfiguration.getCloseTrackers().size()).isEqualTo(2);
-        assertThat(vastVideoConfiguration.getClickTrackers().size()).isEqualTo(1);
-
-        final VastCompanionAd vastCompanionAd = vastVideoConfiguration.getVastCompanionAd();
-        assertThat(vastCompanionAd.getWidth()).isEqualTo(300);
-        assertThat(vastCompanionAd.getHeight()).isEqualTo(250);
-        assertThat(vastCompanionAd.getImageUrl()).isEqualTo("http://demo.tremormedia.com/proddev/vast/Blistex1.jpg");
-        assertThat(vastCompanionAd.getClickThroughUrl()).isEqualTo("http://www.tremormedia.com");
-        assertThat(vastCompanionAd.getClickTrackers())
-                .containsOnly("http://myTrackingURL/firstCompanionCreativeView", "http://myTrackingURL/secondCompanionCreativeView");
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_shouldHandleMultipleRedirects() throws Exception {
-        // Vast redirect responses
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_VAST_XML_STRING);
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_VAST_XML_STRING);
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
-        // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfiguration.class));
-
-        // at this point it should have 3 sets of data from TEST_VAST_XML_STRING and one set from TEST_NESTED_VAST_XML_STRING
-        assertThat(vastVideoConfiguration.getNetworkMediaFileUrl()).isEqualTo("https://s3.amazonaws.com/mopub-vast/tapad-video.mp4");
-        final String expectedFilePathDiskCache = CacheService.getFilePathDiskCache(vastVideoConfiguration.getNetworkMediaFileUrl());
-        assertThat(vastVideoConfiguration.getDiskMediaFileUrl()).isEqualTo(expectedFilePathDiskCache);
-
-        assertThat(vastVideoConfiguration.getClickThroughUrl()).isEqualTo("http://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com");
-        assertThat(vastVideoConfiguration.getImpressionTrackers().size()).isEqualTo(13);
-
-        assertThat(vastVideoConfiguration.getAbsoluteTrackers().size()).isEqualTo(3);
-        assertThat(vastVideoConfiguration.getAbsoluteTrackers().get(0).getTrackingMilliseconds()).isEqualTo(2000);
-        assertThat(vastVideoConfiguration.getAbsoluteTrackers().get(1).getTrackingMilliseconds()).isEqualTo(2000);
-        assertThat(vastVideoConfiguration.getAbsoluteTrackers().get(2).getTrackingMilliseconds()).isEqualTo(2000);
-
-        assertThat(vastVideoConfiguration.getFractionalTrackers().size()).isEqualTo(9);
-        assertThat(vastVideoConfiguration.getFractionalTrackers().get(0).trackingFraction()).isEqualTo(0.25f);
-        assertThat(vastVideoConfiguration.getFractionalTrackers().get(1).trackingFraction()).isEqualTo(0.5f);
-        assertThat(vastVideoConfiguration.getFractionalTrackers().get(2).trackingFraction()).isEqualTo(0.75f);
-        assertThat(vastVideoConfiguration.getFractionalTrackers().get(3).trackingFraction()).isEqualTo(0.25f);
-        assertThat(vastVideoConfiguration.getFractionalTrackers().get(4).trackingFraction()).isEqualTo(0.5f);
-        assertThat(vastVideoConfiguration.getFractionalTrackers().get(5).trackingFraction()).isEqualTo(0.75f);
-        assertThat(vastVideoConfiguration.getFractionalTrackers().get(6).trackingFraction()).isEqualTo(0.25f);
-        assertThat(vastVideoConfiguration.getFractionalTrackers().get(7).trackingFraction()).isEqualTo(0.5f);
-        assertThat(vastVideoConfiguration.getFractionalTrackers().get(8).trackingFraction()).isEqualTo(0.75f);
-
-        assertThat(vastVideoConfiguration.getCompleteTrackers().size()).isEqualTo(3);
-        assertThat(vastVideoConfiguration.getCloseTrackers().size()).isEqualTo(4);
-        assertThat(vastVideoConfiguration.getClickTrackers().size()).isEqualTo(3);
-
-        final VastCompanionAd vastCompanionAd = vastVideoConfiguration.getVastCompanionAd();
-        assertThat(vastCompanionAd.getWidth()).isEqualTo(300);
-        assertThat(vastCompanionAd.getHeight()).isEqualTo(250);
-        assertThat(vastCompanionAd.getImageUrl()).isEqualTo("http://demo.tremormedia.com/proddev/vast/Blistex1.jpg");
-        assertThat(vastCompanionAd.getClickThroughUrl()).isEqualTo("http://www.tremormedia.com");
-        assertThat(vastCompanionAd.getClickTrackers())
-                .containsOnly("http://myTrackingURL/firstCompanionCreativeView", "http://myTrackingURL/secondCompanionCreativeView");
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_shouldReturnCorrectVastValuesWhenAVastRedirectFails() throws Exception {
-        // Vast redirect response
-        mFakeHttpLayer.addPendingHttpResponse(404, "");
-        // Video download response
-        mFakeHttpLayer.addPendingHttpResponse(200, "video_data");
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfiguration.class));
-
-        assertThat(vastVideoConfiguration.getNetworkMediaFileUrl()).isEqualTo("https://s3.amazonaws.com/mopub-vast/tapad-video1.mp4");
-
-        final String expectedFilePathDiskCache = CacheService.getFilePathDiskCache(vastVideoConfiguration.getNetworkMediaFileUrl());
-        assertThat(vastVideoConfiguration.getDiskMediaFileUrl()).isEqualTo(expectedFilePathDiskCache);
-
-        assertThat(vastVideoConfiguration.getClickThroughUrl()).isEqualTo(null);
-        assertThat(vastVideoConfiguration.getImpressionTrackers().size()).isEqualTo(4);
-        assertThat(vastVideoConfiguration.getFractionalTrackers().size()).isEqualTo(3);
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withNoMediaUrlInXml_shouldReturnNull() throws Exception {
-        subject.prepareVastVideoConfiguration(TEST_VAST_BAD_NEST_URL_XML_STRING, vastManagerListener);
-
-        Robolectric.runBackgroundTasks();
-        Robolectric.runUiThreadTasks();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
-        assertThat(vastVideoConfiguration).isEqualTo(null);
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withNullXml_shouldReturnNull() throws Exception {
-        subject.prepareVastVideoConfiguration(null, vastManagerListener);
-
-        Robolectric.runBackgroundTasks();
-        Robolectric.runUiThreadTasks();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
-        assertThat(vastVideoConfiguration).isEqualTo(null);
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withEmptyXml_shouldReturnNull() throws Exception {
-        subject.prepareVastVideoConfiguration("", vastManagerListener);
-
-        Robolectric.runBackgroundTasks();
-        Robolectric.runUiThreadTasks();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
-        assertThat(vastVideoConfiguration).isEqualTo(null);
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withVideoInDiskCache_shouldNotDownloadVideo() throws Exception {
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
-
-        CacheService.putToDiskCache("https://s3.amazonaws.com/mopub-vast/tapad-video.mp4", "video_data".getBytes());
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-
-        assertThat(mFakeHttpLayer.getSentHttpRequestInfos().size()).isEqualTo(1);
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfiguration.class));
-        assertThat(vastVideoConfiguration.getDiskMediaFileUrl())
-                .isEqualTo(CacheService.getFilePathDiskCache("https://s3.amazonaws.com/mopub-vast/tapad-video.mp4"));
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withUninitializedDiskCache_shouldReturnNull() throws Exception {
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
-        assertThat(vastVideoConfiguration).isEqualTo(null);
-    }
-
-    @Test
-    public void cancel_shouldCancelBackgroundProcessingAndNotNotifyListenerWithNull() throws Exception {
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
-
-        Robolectric.getBackgroundScheduler().pause();
-
-        subject.prepareVastVideoConfiguration(TEST_VAST_XML_STRING, vastManagerListener);
-
-        subject.cancel();
-
-        Robolectric.runBackgroundTasks();
-        Robolectric.runUiThreadTasks();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
-        assertThat(vastVideoConfiguration).isEqualTo(null);
-    }
-
-    @Test
-    public void getBestMediaFileUrl_shouldReturnMediaFileUrl() throws Exception {
-        final VastXmlManager.MediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(300, 250, "video/mp4", "video_url");
-
-        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
-        assertThat(bestMediaFileUrl).isEqualTo("video_url");
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withNullMediaType_shouldReturnNull() throws Exception {
-        final VastXmlManager.MediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(300, 250, null, "video_url");
-
-        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
-        assertThat(bestMediaFileUrl).isNull();
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withIncompatibleMediaType_shouldReturnNull() throws Exception {
-        final VastXmlManager.MediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(300, 250, "video/rubbish", "video_url");
-
-        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
-        assertThat(bestMediaFileUrl).isNull();
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withNullMediaUrl_shouldReturnNull() throws Exception {
-        final VastXmlManager.MediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(300, 250, "video/mp4", null);
-
-        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
-        assertThat(bestMediaFileUrl).isNull();
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withNullDimension_shouldReturnMediaFileUrl() throws Exception {
-        final VastXmlManager.MediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(null, 250, "video/mp4", "video_url");
-
-        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
-        assertThat(bestMediaFileUrl).isEqualTo("video_url");
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withZeroDimension_shouldReturnMediaFileUrl() throws Exception {
-        final VastXmlManager.MediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(0, 250, "video/mp4", "video_url");
-
-        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
-        assertThat(bestMediaFileUrl).isEqualTo("video_url");
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withNegativeDimension_shouldReturnMediaFileUrl() throws Exception {
-        final VastXmlManager.MediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(-1, 250, "video/mp4", "video_url");
-
-        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
-        assertThat(bestMediaFileUrl).isEqualTo("video_url");
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withSameAspectRatios_shouldReturnUrlWithAreaCloserToScreenArea1() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Triple screen size
-        final VastXmlManager.MediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(2400, 1440, "video/mp4", "video_url1");
-        // Double screen size
-        final VastXmlManager.MediaXmlManager mediaXmlManager2 = initializeMediaXmlManagerMock(1600, 960, "video/mp4", "video_url2");
-
-        String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager1, mediaXmlManager2));
-        assertThat(bestMediaFileUrl).isEqualTo("video_url2");
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withSameAspectRatios_shouldReturnUrlWithAreaCloserToScreenArea2() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Triple screen size
-        final VastXmlManager.MediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(2400, 1440, "video/mp4", "video_url1");
-        // Half screen size
-        final VastXmlManager.MediaXmlManager mediaXmlManager2 = initializeMediaXmlManagerMock(400, 240, "video/mp4", "video_url2");
-
-        String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager1, mediaXmlManager2));
-        assertThat(bestMediaFileUrl).isEqualTo("video_url2");
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withSameArea_shouldReturnUrlWithAspectRatioCloserToScreenAspectRatio() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Landscape
-        final VastXmlManager.MediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(400, 240, "video/mp4", "video_url1");
-        // Portrait
-        final VastXmlManager.MediaXmlManager mediaXmlManager2 = initializeMediaXmlManagerMock(240, 400, "video/mp4", "video_url2");
-
-        String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager1, mediaXmlManager2));
-        assertThat(bestMediaFileUrl).isEqualTo("video_url1");
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withInvalidMediaTypeAndNullDimension_shouldReturnUrlWithNullDimension() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Invalid media type
-        final VastXmlManager.MediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(800, 480, "video/invalid", "video_url1");
-        // Null dimension
-        final VastXmlManager.MediaXmlManager mediaXmlManager2 = initializeMediaXmlManagerMock(null, null, "video/mp4", "video_url2");
-
-        String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager1, mediaXmlManager2));
-        assertThat(bestMediaFileUrl).isEqualTo("video_url2");
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withInvalidMediaTypeAndNullMediaType_shouldReturnNull() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        final VastXmlManager.MediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(800, 480, "video/invalid", "video_url1");
-        final VastXmlManager.MediaXmlManager mediaXmlManager2 = initializeMediaXmlManagerMock(800, 480, null, "video_url2");
-
-        String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager1, mediaXmlManager2));
-        assertThat(bestMediaFileUrl).isNull();
-    }
-
-    @Test
-    public void getBestCompanionAd_shouldReturnCompanionAd() throws Exception {
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(300, 250, "image/jpeg", "image_url");
-
-        final VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager));
-        assertCompanionAdsAreEqual(companionXmlManager, bestCompanionAd);
-    }
-
-    @Test
-    public void getBestCompanionAd_withNullMediaType_shouldReturnNull() throws Exception {
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(300, 250, null, "image_url");
-
-        final VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager));
-        assertThat(bestCompanionAd).isNull();
-    }
-
-    @Test
-    public void getBestCompanionAd_withIncompatibleMediaType_shouldReturnNull() throws Exception {
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(300, 250, "image/rubbish", "image_url");
-
-        final VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager));
-        assertThat(bestCompanionAd).isNull();
-    }
-
-    @Test
-    public void getBestCompanionAd_withNullImageUrl_shouldReturnNull() throws Exception {
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(300, 250, "image/png", null);
-
-        final VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager));
-        assertThat(bestCompanionAd).isNull();
-    }
-
-    @Test
-    public void getBestCompanionAd_withNullDimension_shouldReturnCompanionAd() throws Exception {
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(null, 250, "image/png", "image_url");
-
-        final VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager));
-        assertCompanionAdsAreEqual(companionXmlManager, bestCompanionAd);
-    }
-
-    @Test
-    public void getBestCompanionAd_withZeroDimension_shouldReturnMediaFileUrl() throws Exception {
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(0, 250, "image/png", "image_url");
-
-        final VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager));
-        assertCompanionAdsAreEqual(companionXmlManager, bestCompanionAd);
-    }
-
-    @Test
-    public void getBestCompanionAd_withNegativeDimension_shouldReturnMediaFileUrl() throws Exception {
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(-300, 250, "image/png", "image_url");
-
-        final VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager));
-        assertCompanionAdsAreEqual(companionXmlManager, bestCompanionAd);
-    }
-
-    @Test
-    public void getBestCompanionAd_withSameAspectRatios_shouldReturnCompanionAdWithAreaCloserToScreenArea1() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Triple screen size
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager1 = initializeCompanionXmlManagerMock(2400, 1440, "image/png", "image_url1");
-        // Double screen size
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager2 = initializeCompanionXmlManagerMock(1600, 960, "image/bmp", "image_url2");
-
-        VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager1, companionXmlManager2));
-        assertCompanionAdsAreEqual(companionXmlManager2, bestCompanionAd);
-    }
-
-    @Test
-    public void getBestCompanionAd_withSameAspectRatios_shouldReturnCompanionAdWithAreaCloserToScreenArea2() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Triple screen size
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager1 = initializeCompanionXmlManagerMock(2400, 1440, "image/png", "image_url1");
-        // Half screen size
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager2 = initializeCompanionXmlManagerMock(400, 240, "image/bmp", "image_url2");
-
-        VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager1, companionXmlManager2));
-        assertCompanionAdsAreEqual(companionXmlManager2, bestCompanionAd);
-    }
-
-    @Test
-    public void getBestCompanionAd_withSameArea_shouldReturnCompanionAdWithAspectRatioCloserToScreenAspectRatio() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Landscape
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager1 = initializeCompanionXmlManagerMock(400, 240, "image/png", "image_url1");
-        // Portrait
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager2 = initializeCompanionXmlManagerMock(240, 400, "image/bmp", "image_url2");
-
-        VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager1, companionXmlManager2));
-        assertCompanionAdsAreEqual(companionXmlManager1, bestCompanionAd);
-    }
-
-    @Test
-    public void getBestCompanionAd_withInvalidMediaTypeAndNullDimension_shouldReturnCompanionAdWithNullDimension() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager1 = initializeCompanionXmlManagerMock(800, 480, "image/invalid", "image_url1");
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager2 = initializeCompanionXmlManagerMock(null, null, "image/bmp", "image_url2");
-
-        VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager1, companionXmlManager2));
-        assertCompanionAdsAreEqual(companionXmlManager2, bestCompanionAd);
-    }
-
-    @Test
-    public void getBestCompanionAdithInvalidMediaTypeAndNullMediaType_shouldReturnNull() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager1 = initializeCompanionXmlManagerMock(800, 480, "image/invalid", "image_url1");
-        final VastXmlManager.ImageCompanionAdXmlManager companionXmlManager2 = initializeCompanionXmlManagerMock(800, 480, null, "image_url2");
-
-        VastCompanionAd bestCompanionAd = subject.getBestCompanionAd(Arrays.asList(companionXmlManager1, companionXmlManager2));
-        assertThat(bestCompanionAd).isEqualTo(null);
-    }
-
-    private VastXmlManager.MediaXmlManager initializeMediaXmlManagerMock(
-            final Integer width,
-            final Integer height,
-            final String type,
-            final String mediaUrl) {
-        VastXmlManager.MediaXmlManager mediaXmlManager = mock(VastXmlManager.MediaXmlManager.class);
-        when(mediaXmlManager.getWidth()).thenReturn(width);
-        when(mediaXmlManager.getHeight()).thenReturn(height);
-        when(mediaXmlManager.getType()).thenReturn(type);
-        when(mediaXmlManager.getMediaUrl()).thenReturn(mediaUrl);
-        return mediaXmlManager;
-    }
-
-    private VastXmlManager.ImageCompanionAdXmlManager initializeCompanionXmlManagerMock(
-            final Integer width,
-            final Integer height,
-            final String type,
-            final String imageUrl) {
-        VastXmlManager.ImageCompanionAdXmlManager companionXmlManager = mock(VastXmlManager.ImageCompanionAdXmlManager.class);
-        when(companionXmlManager.getWidth()).thenReturn(width);
-        when(companionXmlManager.getHeight()).thenReturn(height);
-        when(companionXmlManager.getType()).thenReturn(type);
-        when(companionXmlManager.getImageUrl()).thenReturn(imageUrl);
-        return companionXmlManager;
-    }
-
-    private void assertCompanionAdsAreEqual(
-            final VastXmlManager.ImageCompanionAdXmlManager imageCompanionAdXmlManager,
-            final VastCompanionAd vastCompanionAd) {
-        final VastCompanionAd vastCompanionAd1 = new VastCompanionAd(
-                imageCompanionAdXmlManager.getWidth(),
-                imageCompanionAdXmlManager.getHeight(),
-                imageCompanionAdXmlManager.getImageUrl(),
-                imageCompanionAdXmlManager.getClickThroughUrl(),
-                new ArrayList<String>(imageCompanionAdXmlManager.getClickTrackers())
-        );
-        assertCompanionAdsAreEqual(vastCompanionAd, vastCompanionAd1);
-    }
-
-    private void assertCompanionAdsAreEqual(
-            final VastCompanionAd vastCompanionAd1,
-            final VastCompanionAd vastCompanionAd2) {
-        assertThat(vastCompanionAd1.getWidth()).isEqualTo(vastCompanionAd2.getWidth());
-        assertThat(vastCompanionAd1.getHeight()).isEqualTo(vastCompanionAd2.getHeight());
-        assertThat(vastCompanionAd1.getImageUrl()).isEqualTo(vastCompanionAd2.getImageUrl());
-        assertThat(vastCompanionAd1.getClickThroughUrl()).isEqualTo(vastCompanionAd2.getClickThroughUrl());
-        assertThat(vastCompanionAd1.getClickTrackers()).isEqualTo(vastCompanionAd2.getClickTrackers());
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastXmlManagerAggregatorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastXmlManagerAggregatorTest.java
deleted file mode 100644
index bcdb76eb..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastXmlManagerAggregatorTest.java
+++ /dev/null
@@ -1,71 +0,0 @@
-package com.mopub.mobileads.util.vast;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-import org.robolectric.tester.org.apache.http.FakeHttpLayer;
-
-import java.util.List;
-import java.util.concurrent.Semaphore;
-
-import static com.mopub.mobileads.util.vast.VastXmlManagerAggregator.VastXmlManagerAggregatorListener;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.anyListOf;
-import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.mock;
-
-@RunWith(SdkTestRunner.class)
-public class VastXmlManagerAggregatorTest {
-    static final String TEST_VAST_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>http://dsp.x-team.staging.mopub.com/xml</VASTAdTagURI><Impression>http://myTrackingURL/wrapper/impression1</Impression><Impression>http://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>http://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>http://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>http://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='firstQuartile'>http://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>http://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>http://myTrackingURL/wrapper/complete</Tracking><Tracking event='mute'>http://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>http://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>http://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>http://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>http://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>http://myTrackingURL/wrapper/click</ClickTracking></VideoClicks><MediaFiles><MediaFile delivery='progressive' bitrate='416' width='300' height='250' type='video/mp4'><![CDATA[https://s3.amazonaws.com/mopub-vast/tapad-video1.mp4]]></MediaFile></MediaFiles></Linear></Creative><Creative AdID=\"601364-Companion\"> <CompanionAds><Companion width=\"9000\"></Companion> </CompanionAds></Creative></Creatives></Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>http://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>http://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
-    static final String TEST_NESTED_VAST_XML_STRING = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><VAST version='2.0'><Ad id='57722'><InLine><AdSystem version='1.0'>Tapad</AdSystem><AdTitle><![CDATA[PKW6T_LIV_DSN_Audience_TAPAD_3rd Party Audience Targeting_Action Movi]]></AdTitle><Description/><Impression><![CDATA[http://rtb-test.dev.tapad.com:8080/creative/imp.png?ts=1374099035457&svid=1&creative_id=30731&ctx_type=InApp&ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&liverail_cp=1]]></Impression><Creatives><Creative sequence='1' id='57722'><Linear><Duration>00:00:15</Duration><VideoClicks><ClickThrough><![CDATA[http://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com]]></ClickThrough></VideoClicks><MediaFiles><MediaFile delivery='progressive' bitrate='416' width='800' height='480' type='video/mp4'><![CDATA[https://s3.amazonaws.com/mopub-vast/tapad-video.mp4]]></MediaFile></MediaFiles></Linear></Creative><Creative AdID=\"601364-Companion\"><CompanionAds><Companion id=\"valid\" height=\"250\" width=\"300\"><StaticResource creativeType=\"image/jpeg\">http://demo.tremormedia.com/proddev/vast/Blistex1.jpg</StaticResource><TrackingEvents><Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking><Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking></TrackingEvents><CompanionClickThrough>http://www.tremormedia.com</CompanionClickThrough></Companion></CompanionAds></Creative></Creatives></InLine></Ad></VAST>";
-    static final String TEST_VAST_BAD_NEST_URL_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>http://dsp.x-team.staging.mopub.com/xml\"$|||</VASTAdTagURI><Impression>http://myTrackingURL/wrapper/impression1</Impression><Impression>http://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>http://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>http://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>http://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='firstQuartile'>http://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>http://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>http://myTrackingURL/wrapper/complete</Tracking><Tracking event='mute'>http://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>http://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>http://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>http://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>http://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>http://myTrackingURL/wrapper/click</ClickTracking></VideoClicks></Linear></Creative></Creatives></Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>http://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>http://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
-
-    private FakeHttpLayer mFakeHttpLayer;
-    private Semaphore semaphore;
-    private VastXmlManagerAggregatorListener vastXmlManagerAggregatorListener;
-    private VastXmlManagerAggregator subject;
-    private List<VastXmlManager> vastXmlManagers;
-
-    @Before
-    public void setup() {
-        mFakeHttpLayer = Robolectric.getFakeHttpLayer();
-
-        semaphore = new Semaphore(0);
-        vastXmlManagerAggregatorListener = mock(VastXmlManagerAggregatorListener.class);
-        doAnswer(new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
-                Object[] args = invocationOnMock.getArguments();
-                VastXmlManagerAggregatorTest.this.vastXmlManagers = (List<VastXmlManager>) args[0];
-                semaphore.release();
-                return null;
-            }
-        }).when(vastXmlManagerAggregatorListener).onAggregationComplete(anyListOf(VastXmlManager.class));
-
-        subject = new VastXmlManagerAggregator(vastXmlManagerAggregatorListener);
-    }
-
-    // NOTE most of the functionality of this class is tested through VastManagerTest
-    // through integration tests
-
-    @Test
-    public void processVast_shouldNotFollowRedirectsOnceTheLimitHasBeenReached() throws Exception {
-        mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
-
-        subject.setTimesFollowedVastRedirect(VastXmlManagerAggregator.MAX_TIMES_TO_FOLLOW_VAST_REDIRECT);
-        subject.execute(TEST_VAST_XML_STRING);
-        semaphore.acquire();
-
-        assertThat(vastXmlManagers.size()).isEqualTo(1);
-        assertThat(vastXmlManagers.get(0).getMediaFileUrl()).isEqualTo("https://s3.amazonaws.com/mopub-vast/tapad-video1.mp4");
-        assertThat(vastXmlManagers.get(0).getClickThroughUrl()).isEqualTo(null);
-        assertThat(vastXmlManagers.get(0).getImpressionTrackers().size()).isEqualTo(4);
-        assertThat(vastXmlManagers.get(0).getFractionalProgressTrackers().size()).isEqualTo(3);
-    }
-
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastXmlManagerTest.java
deleted file mode 100644
index 315db90a..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastXmlManagerTest.java
+++ /dev/null
@@ -1,556 +0,0 @@
-package com.mopub.mobileads.util.vast;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.VastAbsoluteProgressTracker;
-import com.mopub.mobileads.VastFractionalProgressTracker;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.xml.sax.SAXException;
-
-import java.io.IOException;
-import java.util.List;
-
-import javax.xml.parsers.ParserConfigurationException;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-public class VastXmlManagerTest {
-    private static final String XML_HEADER_TAG = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
-    private static final String TEST_VAST_XML_STRING = "<VAST xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" version=\"2.0\" xsi:noNamespaceSchemaLocation=\"vast.xsd\">" +
-            "            <Ad id=\"223626102\">" +
-            "                <InLine>" +
-            "                    <AdSystem version=\"2.0\">DART_DFA</AdSystem>" +
-            "                    <AdTitle>In-Stream Video</AdTitle>" +
-            "                    <Description>A test creative with a description.</Description>" +
-            "                    <Survey/>" +
-            "                    <Impression id=\"DART\">" +
-            "                        <![CDATA[" +
-            "                        http://ad.doubleclick.net/imp;v7;x;223626102;0-0;0;47414672;0/0;30477563/30495440/1;;~aopt=0/0/ff/0;~cs=j%3fhttp://s0.2mdn.net/dot.gif" +
-            "                        ]]>" +
-            "                    </Impression>" +
-            "                    <Impression id=\"ThirdParty\">" +
-            "                        <![CDATA[" +
-            "                        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145;sz=1x1;ord=2922389?" +
-            "                        ]]>" +
-            "                    </Impression>" +
-            "                    <VASTAdTagURI><![CDATA[ http://0.dsp.dev1.mopub.com/xml ]]></VASTAdTagURI>" +
-            "                    <Creatives>" +
-            "                        <Creative sequence=\"1\" AdID=\"\">" +
-            "                            <Linear>" +
-            "                                <Duration>00:00:58</Duration>" +
-            "                                <TrackingEvents>" +
-            "                                    <Tracking event=\"start\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"progress\" offset=\"13%\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"progress\" offset=\"01:01:10.300\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            // Invalid tracking due to ambiguous offset.
-            "                                    <Tracking event=\"progress\" offset=\"01:01\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            // Invalid tracking due to a too-high percentage offset.
-            "                                    <Tracking event=\"progress\" offset=\"113%\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            // Invalid tracking due to a negative percentage offset.
-            "                                    <Tracking event=\"progress\" offset=\"-113%\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            // Invalid tracking due to a non-number offset
-            "                                    <Tracking event=\"progress\" offset=\"ten seconds\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"midpoint\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"midpoint\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"firstQuartile\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"firstQuartile\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"thirdQuartile\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"thirdQuartile\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"complete\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=13;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"complete\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.5;sz=1x1;ord=2922389?" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"close\">" +
-            "                                        <![CDATA[" +
-            "                                        http://www.mopub.com/search?q=ignatius" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"close\">" +
-            "                                        <![CDATA[" +
-            "                                        http://www.mopub.com/search?q=j3" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"mute\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=16;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"pause\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=15;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"fullscreen\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=19;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"fullscreen\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.6;sz=1x1;ord=2922389?" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                </TrackingEvents>" +
-            "                                <AdParameters/>" +
-            "                                <VideoClicks>" +
-            "                                    <ClickThrough>" +
-            "                                        <![CDATA[ http://www.google.com/support/richmedia ]]>" +
-            "                                    </ClickThrough>" +
-            "                                    <ClickTracking id=\"DART\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/click%3Bh%3Dv8/3e1b/3/0/%2a/z%3B223626102%3B0-0%3B0%3B47414672%3B255-0/0%3B30477563/30495440/1%3B%3B%7Eaopt%3D0/0/ff/0%3B%7Esscs%3D%3fhttp://s0.2mdn.net/dot.gif" +
-            "                                        ]]>" +
-            "                                    </ClickTracking>" +
-            "                                    <ClickTracking id=\"ThirdParty\">" +
-            "                                        <![CDATA[" +
-            "                                        http://ad.doubleclick.net/clk;212442087;33815766;i?http://www.google.com/support/richmedia" +
-            "                                        ]]>" +
-            "                                    </ClickTracking>" +
-            "                                </VideoClicks>" +
-            "                                <MediaFiles>" +
-            "                                    <MediaFile id=\"1\" delivery=\"progressive\" type=\"video/quicktime\" bitrate=\"457\"" +
-            "                                               width=\"300\" height=\"225\">" +
-            "                                        <![CDATA[" +
-            "                                        http://s3.amazonaws.com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
-            "                                        ]]>" +
-            "                                    </MediaFile>" +
-            "                                </MediaFiles>" +
-            "                            </Linear>" +
-            "                        </Creative>" +
-            "                        <Creative AdID=\"601364-Companion\">" +
-            "                            <CompanionAds>" +
-            "                               <Companion height=\"90\" width=\"728\">" +
-            "                                   <StaticResource creativeType=\"image/jpeg\">http://demo.tremormedia.com/proddev/vast/728x90_banner1.jpg</StaticResource>" +
-            "                                   <CompanionClickThrough>http://www.tremormedia.com</CompanionClickThrough>" +
-            "                                   <BADTrackingEvents>" +
-            "                                       <Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking>" +
-            "                                       <Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking>" +
-            "                                   </BADTrackingEvents>" +
-            "                               </Companion>" +
-            "                               <Companion id=\"valid\" height=\"250\" width=\"300\">" +
-            "                                   <StaticResource creativeType=\"image/png\">http://demo.tremormedia.com/proddev/vast/Blistex1.png</StaticResource>" +
-            "                                   <TrackingEvents>" +
-            "                                       <Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking>" +
-            "                                       <Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking>" +
-            "                                   </TrackingEvents>" +
-            "                                   <CompanionClickThrough>http://www.tremormedia.com</CompanionClickThrough>" +
-            "                               </Companion>" +
-            "                               <Companion height=\"789\" width=\"456\">" +
-            "                                   <StaticResource creativeType=\"image/bmp\">" +
-            "                                       <![CDATA[" +
-            "                                           http://cdn.liverail.com/adasset/229/7969/300x250.bmp" +
-            "                                       ]]>" +
-            "                                   </StaticResource>" +
-            "                                   <TrackingEvents>" +
-            "                                       <Tracking event=\"creativeView\">" +
-            "                                           <![CDATA[" +
-            "                                               http://trackingUrl1.com/" +
-            "                                           ]]>" +
-            "                                       </Tracking>" +
-            "                                   </TrackingEvents>" +
-            "                                   <CompanionClickThrough>" +
-            "                                       <![CDATA[" +
-            "                                           http://clickThroughUrl1.com/" +
-            "                                       ]]>" +
-            "                                   </CompanionClickThrough>" +
-            "                               </Companion>" +
-            "                               <Companion height=\"789\" width=\"1011\">" +
-            "                                   <StaticResource creativeType=\"image/gif\">" +
-            "                                       <![CDATA[" +
-            "                                           http://cdn.liverail.com/adasset/229/7969/300x250.gif" +
-            "                                       ]]>" +
-            "                                   </StaticResource>" +
-            "                                   <CompanionClickThrough>" +
-            "                                       <![CDATA[" +
-            "                                           http://clickThroughUrl2.com/" +
-            "                                       ]]>" +
-            "                                   </CompanionClickThrough>" +
-            "                               </Companion>" +
-            "                               <Companion width=\"300\" height=\"60\">" +
-            "                                   <StaticResource creativeType=\"application/x-shockwave-flash\">" +
-            "                                       <![CDATA[" +
-            "                                           http://cdn.liverail.com/adasset4/1331/229/7969/5122396e510b80db6b5ef4013ddabe90.swf" +
-            "                                       ]]>" +
-            "                                   </StaticResource>" +
-            "                                   <TrackingEvents>" +
-            "                                       <Tracking event=\"creativeView\">" +
-            "                                           <![CDATA[" +
-            "                                               http://trackingUrl2.com/" +
-            "                                           ]]>" +
-            "                                       </Tracking>" +
-            "                                   </TrackingEvents>" +
-            "                                   <CompanionClickThrough>" +
-            "                                       <![CDATA[" +
-            "                                           http://clickThroughUrl3.com/" +
-            "                                       ]]>" +
-            "                                   </CompanionClickThrough>" +
-            "                               </Companion>" +
-            "                               <Companion id=\"valid\" height=\"249\" width=\"299\">" +
-            "                                   <BADStaticResource creativeType=\"image/jpeg\">http://demo.tremormedia.com/proddev/vast/Blistex1.jpg</BADStaticResource>" +
-            "                                   <TrackingEvents>" +
-            "                                           <Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking>" +
-            "                                           <Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking>" +
-            "                                           <BADTracking event=\"creativeView\">http://myTrackingURL/thirdCompanionCreativeView</BADTracking>" +
-            "                                           <Tracking BADevent=\"creativeView\">http://myTrackingURL/fourthCompanionCreativeView</Tracking>" +
-            "                                           <Tracking event=\"BADcreativeView\">http://myTrackingURL/fifthCompanionCreativeView</Tracking>" +
-            "                                   </TrackingEvents>" +
-            "                                   <BADCompanionClickThrough>http://www.tremormedia.com</BADCompanionClickThrough>" +
-            "                               </Companion>" +
-            "                               <Companion width=\"9000\">" +
-            "                                   <TrackingEvents>" +
-            "                                       <ThisWillNotBeFound>" +
-            "                                           <Tracking event=\"creativeView\">http://myTrackingURL/firstCompanionCreativeView</Tracking>" +
-            "                                           <Tracking event=\"creativeView\">http://myTrackingURL/secondCompanionCreativeView</Tracking>" +
-            "                                       </ThisWillNotBeFound>" +
-            "                                   </TrackingEvents>" +
-            "                               </Companion>" +
-            "                               <BADCompanion>" +
-            "                               </BADCompanion>" +
-            "                            </CompanionAds>" +
-            "                        </Creative>" +
-            "                    </Creatives>" +
-            "                    <Extensions>" +
-            "                        <Extension type=\"DART\">" +
-            "                            <AdServingData>" +
-            "                                <DeliveryData>" +
-            "                                    <GeoData>" +
-            "                                        <![CDATA[" +
-            "                                        ct=US&st=CA&ac=415&zp=94103&bw=4&dma=197&city=13358" +
-            "                                        ]]>" +
-            "                                    </GeoData>" +
-            "                                </DeliveryData>" +
-            "                            </AdServingData>" +
-            "                        </Extension>" +
-            "                    </Extensions>" +
-            "                </InLine>" +
-            "            </Ad>" +
-            "        </VAST>" +
-            "<MP_TRACKING_URLS>" +
-            "   <MP_TRACKING_URL>http://www.mopub.com/imp1</MP_TRACKING_URL>" +
-            "   <MP_TRACKING_URL>http://www.mopub.com/imp2</MP_TRACKING_URL>" +
-            "</MP_TRACKING_URLS>";
-
-    private VastXmlManager mXmlManager;
-    private boolean mExceptionRaised;
-
-    @Before
-    public void setup() {
-        mXmlManager = new VastXmlManager();
-        mExceptionRaised = false;
-
-        try {
-            mXmlManager.parseVastXml(TEST_VAST_XML_STRING);
-        } catch (ParserConfigurationException e) {
-            e.printStackTrace();
-            mExceptionRaised = true;
-        } catch (IOException e) {
-            e.printStackTrace();
-            mExceptionRaised = true;
-        } catch (SAXException e) {
-            e.printStackTrace();
-            mExceptionRaised = true;
-        }
-    }
-
-    @Test
-    public void parseVastXml_shouldNotRaiseAnExceptionProcessingValidXml() {
-        assertThat(mExceptionRaised).isEqualTo(false);
-    }
-
-    @Test
-    public void parseVastXml_shouldNotRaiseAnExceptionProcessingXmlWithXmlHeaderTag() throws ParserConfigurationException, IOException, SAXException {
-        String xmlString = XML_HEADER_TAG + TEST_VAST_XML_STRING;
-
-        mXmlManager = new VastXmlManager();
-        mXmlManager.parseVastXml(xmlString);
-    }
-
-    @Test
-    public void getImpressionTrackers_shouldReturnTheCorrectValue() {
-        List<String> trackers = mXmlManager.getImpressionTrackers();
-
-        assertThat(trackers.size()).isEqualTo(4);
-
-        String tracker1 = trackers.get(0);
-        String tracker2 = trackers.get(1);
-        String tracker3 = trackers.get(2);
-        String tracker4 = trackers.get(3);
-
-        assertThat(tracker1).isEqualTo("http://ad.doubleclick.net/imp;v7;x;223626102;0-0;0;47414672;0/0;30477563/30495440/1;;~aopt=0/0/ff/0;~cs=j%3fhttp://s0.2mdn.net/dot.gif");
-        assertThat(tracker2).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145;sz=1x1;ord=2922389?");
-        assertThat(tracker3).isEqualTo("http://www.mopub.com/imp1");
-        assertThat(tracker4).isEqualTo("http://www.mopub.com/imp2");
-    }
-
-    @Test
-    public void getAbsoluteTrackers_shouldReturnCorrectValues() {
-        List<VastAbsoluteProgressTracker> trackers = mXmlManager.getAbsoluteProgressTrackers();
-
-        assertThat(trackers.size()).isEqualTo(2);
-
-        VastAbsoluteProgressTracker tracker0 = trackers.get(0);
-        assertThat(tracker0.getTrackingMilliseconds()).isEqualTo(2000);
-        assertThat(tracker0.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
-
-        VastAbsoluteProgressTracker tracker1 = trackers.get(1);
-        assertThat(tracker1.getTrackingMilliseconds()).isEqualTo(3670300);
-        assertThat(tracker1.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
-    }
-
-    @Test
-    public void getFractionalTrackers_shouldReturnCorrectValues() {
-        List<VastFractionalProgressTracker> trackers = mXmlManager.getFractionalProgressTrackers();
-
-        assertThat(trackers.size()).isEqualTo(7);
-
-        VastFractionalProgressTracker tracker0 = trackers.get(0);
-        assertThat(tracker0.trackingFraction()).isEqualTo(0.13f);
-        assertThat(tracker0.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
-
-        VastFractionalProgressTracker tracker1 = trackers.get(1);
-        assertThat(tracker1.trackingFraction()).isEqualTo(0.25f);
-        assertThat(tracker1.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;");
-
-        VastFractionalProgressTracker tracker2 = trackers.get(2);
-        assertThat(tracker2.trackingFraction()).isEqualTo(0.25f);
-        assertThat(tracker2.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?");
-
-        VastFractionalProgressTracker tracker3 = trackers.get(3);
-        assertThat(tracker3.trackingFraction()).isEqualTo(0.5f);
-        assertThat(tracker3.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;");
-
-        VastFractionalProgressTracker tracker4 = trackers.get(4);
-        assertThat(tracker4.trackingFraction()).isEqualTo(0.5f);
-        assertThat(tracker4.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?");
-
-        VastFractionalProgressTracker tracker5 = trackers.get(5);
-        assertThat(tracker5.trackingFraction()).isEqualTo(0.75f);
-        assertThat(tracker5.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;");
-
-        VastFractionalProgressTracker tracker6 = trackers.get(6);
-        assertThat(tracker6.trackingFraction()).isEqualTo(0.75f);
-        assertThat(tracker6.getTrackingUrl()).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?");
-    }
-
-    @Test
-    public void getVideoCompleteTrackers_shouldReturnTheCorrectValue() {
-        List<String> trackers = mXmlManager.getVideoCompleteTrackers();
-
-        assertThat(trackers.size()).isEqualTo(2);
-
-        String tracker1 = trackers.get(0);
-        String tracker2 = trackers.get(1);
-
-        assertThat(tracker1).isEqualTo("http://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=13;ecn1=1;etm1=0;");
-        assertThat(tracker2).isEqualTo("http://ad.doubleclick.net/ad/N270.Process_Other/B3473145.5;sz=1x1;ord=2922389?");
-    }
-
-    @Test
-    public void getVideoCloseTrackers_shouldReturnTheCorrectValue() {
-        List<String> trackers = mXmlManager.getVideoCloseTrackers();
-
-        assertThat(trackers.size()).isEqualTo(2);
-
-        String tracker1 = trackers.get(0);
-        String tracker2 = trackers.get(1);
-
-        assertThat(tracker1).isEqualTo("http://www.mopub.com/search?q=ignatius");
-        assertThat(tracker2).isEqualTo("http://www.mopub.com/search?q=j3");
-    }
-
-    @Test
-    public void getClickThroughUrl_shouldReturnTheCorrectValue() {
-        String url = mXmlManager.getClickThroughUrl();
-
-        assertThat(url).isEqualTo("http://www.google.com/support/richmedia");
-    }
-
-    @Test
-    public void getClickTrackers_shouldReturnTheCorrectValue() {
-        List<String> trackers = mXmlManager.getClickTrackers();
-
-        assertThat(trackers.size()).isEqualTo(2);
-
-        String tracker1 = trackers.get(0);
-        String tracker2 = trackers.get(1);
-
-        assertThat(tracker1).isEqualTo("http://ad.doubleclick.net/click%3Bh%3Dv8/3e1b/3/0/%2a/z%3B223626102%3B0-0%3B0%3B47414672%3B255-0/0%3B30477563/30495440/1%3B%3B%7Eaopt%3D0/0/ff/0%3B%7Esscs%3D%3fhttp://s0.2mdn.net/dot.gif");
-        assertThat(tracker2).isEqualTo("http://ad.doubleclick.net/clk;212442087;33815766;i?http://www.google.com/support/richmedia");
-    }
-
-    @Test
-    public void getCompanionAdXmlManagers_shouldReturnListOfPopulatedCompanionAdXmlManagers() throws Exception {
-        List<VastXmlManager.ImageCompanionAdXmlManager> imageCompanionAdXmlManagers = mXmlManager.getCompanionAdXmlManagers();
-        assertThat(imageCompanionAdXmlManagers.size()).isEqualTo(7);
-
-        assertThat(imageCompanionAdXmlManagers.get(0).getWidth()).isEqualTo(728);
-        assertThat(imageCompanionAdXmlManagers.get(0).getHeight()).isEqualTo(90);
-        assertThat(imageCompanionAdXmlManagers.get(0).getType()).isEqualTo("image/jpeg");
-        assertThat(imageCompanionAdXmlManagers.get(0).getImageUrl()).isEqualTo("http://demo.tremormedia.com/proddev/vast/728x90_banner1.jpg");
-        assertThat(imageCompanionAdXmlManagers.get(0).getClickThroughUrl()).isEqualTo("http://www.tremormedia.com");
-        assertThat(imageCompanionAdXmlManagers.get(0).getClickTrackers()).isEmpty();
-
-        assertThat(imageCompanionAdXmlManagers.get(1).getWidth()).isEqualTo(300);
-        assertThat(imageCompanionAdXmlManagers.get(1).getHeight()).isEqualTo(250);
-        assertThat(imageCompanionAdXmlManagers.get(1).getType()).isEqualTo("image/png");
-        assertThat(imageCompanionAdXmlManagers.get(1).getImageUrl()).isEqualTo("http://demo.tremormedia.com/proddev/vast/Blistex1.png");
-        assertThat(imageCompanionAdXmlManagers.get(1).getClickThroughUrl()).isEqualTo("http://www.tremormedia.com");
-        assertThat(imageCompanionAdXmlManagers.get(1).getClickTrackers())
-                .containsOnly("http://myTrackingURL/firstCompanionCreativeView", "http://myTrackingURL/secondCompanionCreativeView");
-
-        assertThat(imageCompanionAdXmlManagers.get(2).getWidth()).isEqualTo(456);
-        assertThat(imageCompanionAdXmlManagers.get(2).getHeight()).isEqualTo(789);
-        assertThat(imageCompanionAdXmlManagers.get(2).getType()).isEqualTo("image/bmp");
-        assertThat(imageCompanionAdXmlManagers.get(2).getImageUrl()).isEqualTo("http://cdn.liverail.com/adasset/229/7969/300x250.bmp");
-        assertThat(imageCompanionAdXmlManagers.get(2).getClickThroughUrl()).isEqualTo("http://clickThroughUrl1.com/");
-        assertThat(imageCompanionAdXmlManagers.get(2).getClickTrackers()).containsOnly("http://trackingUrl1.com/");
-
-        assertThat(imageCompanionAdXmlManagers.get(3).getWidth()).isEqualTo(1011);
-        assertThat(imageCompanionAdXmlManagers.get(3).getHeight()).isEqualTo(789);
-        assertThat(imageCompanionAdXmlManagers.get(3).getType()).isEqualTo("image/gif");
-        assertThat(imageCompanionAdXmlManagers.get(3).getImageUrl()).isEqualTo("http://cdn.liverail.com/adasset/229/7969/300x250.gif");
-        assertThat(imageCompanionAdXmlManagers.get(3).getClickThroughUrl()).isEqualTo("http://clickThroughUrl2.com/");
-        assertThat(imageCompanionAdXmlManagers.get(3).getClickTrackers()).isEmpty();
-
-        assertThat(imageCompanionAdXmlManagers.get(4).getWidth()).isEqualTo(300);
-        assertThat(imageCompanionAdXmlManagers.get(4).getHeight()).isEqualTo(60);
-        assertThat(imageCompanionAdXmlManagers.get(4).getType()).isEqualTo("application/x-shockwave-flash");
-        assertThat(imageCompanionAdXmlManagers.get(4).getImageUrl()).isEqualTo("http://cdn.liverail.com/adasset4/1331/229/7969/5122396e510b80db6b5ef4013ddabe90.swf");
-        assertThat(imageCompanionAdXmlManagers.get(4).getClickThroughUrl()).isEqualTo("http://clickThroughUrl3.com/");
-        assertThat(imageCompanionAdXmlManagers.get(4).getClickTrackers()).containsOnly("http://trackingUrl2.com/");
-
-        assertThat(imageCompanionAdXmlManagers.get(5).getWidth()).isEqualTo(299);
-        assertThat(imageCompanionAdXmlManagers.get(5).getHeight()).isEqualTo(249);
-        assertThat(imageCompanionAdXmlManagers.get(5).getType()).isNull();
-        assertThat(imageCompanionAdXmlManagers.get(5).getImageUrl()).isNull();
-        assertThat(imageCompanionAdXmlManagers.get(5).getClickThroughUrl()).isNull();
-        assertThat(imageCompanionAdXmlManagers.get(5).getClickTrackers())
-                .containsOnly("http://myTrackingURL/firstCompanionCreativeView", "http://myTrackingURL/secondCompanionCreativeView");
-
-        assertThat(imageCompanionAdXmlManagers.get(6).getWidth()).isEqualTo(9000);
-        assertThat(imageCompanionAdXmlManagers.get(6).getHeight()).isNull();
-        assertThat(imageCompanionAdXmlManagers.get(6).getType()).isNull();
-        assertThat(imageCompanionAdXmlManagers.get(6).getImageUrl()).isNull();
-        assertThat(imageCompanionAdXmlManagers.get(6).getClickThroughUrl()).isNull();
-        assertThat(imageCompanionAdXmlManagers.get(6).getClickTrackers()).isEmpty();
-    }
-
-    @Test
-    public void getMediaFileUrl_shouldReturnTheCorrectValue() {
-        String url = mXmlManager.getMediaFileUrl();
-
-        assertThat(url).isEqualTo("http://s3.amazonaws.com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4");
-    }
-
-    @Test
-    public void getVastAdTagURI_shouldReturnTheCorrectValue() {
-        String url = mXmlManager.getVastAdTagURI();
-
-        assertThat(url).isEqualTo("http://0.dsp.dev1.mopub.com/xml");
-    }
-
-    @Test
-    public void parsingMalformedXml_shouldNotCauseProblems() {
-        String badXml = "<im>going<<<to||***crash></,>CDATA[]YOUR_FACE";
-
-        VastXmlManager badManager = new VastXmlManager();
-
-        try {
-            badManager.parseVastXml(badXml);
-        } catch (ParserConfigurationException e) {
-            e.printStackTrace();
-        } catch (IOException e) {
-            e.printStackTrace();
-        } catch (SAXException e) {
-            e.printStackTrace();
-        }
-
-        assertThat(badManager.getImpressionTrackers().size()).isEqualTo(0);
-    }
-
-    @Test
-    public void parsingVastWithMalformedNodes_shouldNotCauseProblems() {
-        String badXml = "<VAST><Impression id=\"DART\"></Impression><Tracking event=\"start\"><![CDATA[ good ]]><ExtraNode><![CDATA[ bad ]]></ExtraNode></Tracking></VAST>";
-
-        VastXmlManager badManager = new VastXmlManager();
-
-        try {
-            badManager.parseVastXml(badXml);
-        } catch (ParserConfigurationException e) {
-            e.printStackTrace();
-        } catch (IOException e) {
-            e.printStackTrace();
-        } catch (SAXException e) {
-            e.printStackTrace();
-        }
-
-        assertThat(badManager.getMediaFileUrl()).isEqualTo(null);
-        assertThat(badManager.getFractionalProgressTrackers().size()).isEqualTo(0);
-        assertThat(badManager.getImpressionTrackers().size()).isEqualTo(0);
-
-        List<VastAbsoluteProgressTracker> startTrackers = badManager.getAbsoluteProgressTrackers();
-        assertThat(startTrackers.size()).isEqualTo(1);
-        assertThat(startTrackers.get(0).getTrackingUrl()).isEqualTo("good");
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/XmlUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/XmlUtilsTest.java
deleted file mode 100644
index 2e3d06da..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/XmlUtilsTest.java
+++ /dev/null
@@ -1,211 +0,0 @@
-package com.mopub.mobileads.util.vast;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-import org.w3c.dom.Document;
-import org.w3c.dom.Node;
-import org.xml.sax.InputSource;
-
-import java.io.StringReader;
-import java.text.DateFormat;
-import java.text.ParseException;
-import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.Date;
-import java.util.List;
-import java.util.Locale;
-
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@Config(manifest = Config.NONE)
-@RunWith(SdkTestRunner.class)
-public class XmlUtilsTest {
-
-    // From Microsoft's sample xml documents page: https://msdn.microsoft.com/en-us/library/bb387026.aspx
-    private String testXml = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" +
-            "<aw:PurchaseOrders xmlns:aw=\"http://www.adventure-works.com\">\n" +
-            "  <aw:PurchaseOrder aw:PurchaseOrderNumber=\"99503\" aw:OrderDate=\"1999-10-20\">\n" +
-            "    <aw:Address aw:Type=\"Shipping\">\n" +
-            "      <aw:Name>Ellen Adams</aw:Name>\n" +
-            "      <aw:Street>123 Maple Street</aw:Street>\n" +
-            "      <aw:City>Mill Valley</aw:City>\n" +
-            "      <aw:State>CA</aw:State>\n" +
-            "      <aw:Zip>10999</aw:Zip>\n" +
-            "      <aw:Country>USA</aw:Country>\n" +
-            "    </aw:Address>\n" +
-            "    <aw:Address aw:Type=\"Billing\">\n" +
-            "      <aw:Name>Tai Yee</aw:Name>\n" +
-            "      <aw:Street>8 Oak Avenue</aw:Street>\n" +
-            "      <aw:City>Old Town</aw:City>\n" +
-            "      <aw:State>PA</aw:State>\n" +
-            "      <aw:Zip>95819</aw:Zip>\n" +
-            "      <aw:Country>USA</aw:Country>\n" +
-            "    </aw:Address>\n" +
-            "    <aw:DeliveryNotes>Please leave packages in shed by driveway.</aw:DeliveryNotes>\n" +
-            "    <aw:Items>\n" +
-            "      <aw:Item aw:PartNumber=\"898-AZ\">\n" +
-            "        <aw:ProductName>Lawnmower</aw:ProductName>\n" +
-            "        <aw:Quantity>1</aw:Quantity>\n" +
-            "        <aw:USPrice>148.95</aw:USPrice>\n" +
-            "        <aw:Comment>Confirm this is electric</aw:Comment>\n" +
-            "      </aw:Item>\n" +
-            "      <aw:Item aw:PartNumber=\"926-AA\">\n" +
-            "        <aw:ProductName>Baby Monitor</aw:ProductName>\n" +
-            "        <aw:Quantity>2</aw:Quantity>\n" +
-            "        <aw:USPrice>39.98</aw:USPrice>\n" +
-            "        <aw:ShipDate>1999-05-21</aw:ShipDate>\n" +
-            "      </aw:Item>\n" +
-            "    </aw:Items>\n" +
-            "  </aw:PurchaseOrder>\n" +
-            "  <aw:PurchaseOrder aw:PurchaseOrderNumber=\"99505\" aw:OrderDate=\"1999-10-22\">\n" +
-            "    <aw:Address aw:Type=\"Shipping\">\n" +
-            "      <aw:Name>Cristian Osorio</aw:Name>\n" +
-            "      <aw:Street>456 Main Street</aw:Street>\n" +
-            "      <aw:City>Buffalo</aw:City>\n" +
-            "      <aw:State>NY</aw:State>\n" +
-            "      <aw:Zip>98112</aw:Zip>\n" +
-            "      <aw:Country>USA</aw:Country>\n" +
-            "    </aw:Address>\n" +
-            "    <aw:Address aw:Type=\"Billing\">\n" +
-            "      <aw:Name>Cristian Osorio</aw:Name>\n" +
-            "      <aw:Street>456 Main Street</aw:Street>\n" +
-            "      <aw:City>Buffalo</aw:City>\n" +
-            "      <aw:State>NY</aw:State>\n" +
-            "      <aw:Zip>98112</aw:Zip>\n" +
-            "      <aw:Country>USA</aw:Country>\n" +
-            "    </aw:Address>\n" +
-            "    <aw:DeliveryNotes>Please notify me before shipping.</aw:DeliveryNotes>\n" +
-            "    <aw:Items>\n" +
-            "      <aw:Item aw:PartNumber=\"456-NM\">\n" +
-            "        <aw:ProductName>Power Supply</aw:ProductName>\n" +
-            "        <aw:Quantity>1</aw:Quantity>\n" +
-            "        <aw:USPrice>45.99</aw:USPrice>\n" +
-            "      </aw:Item>\n" +
-            "    </aw:Items>\n" +
-            "  </aw:PurchaseOrder>\n" +
-            "  <aw:PurchaseOrder aw:PurchaseOrderNumber=\"99504\" aw:OrderDate=\"1999-10-22\">\n" +
-            "    <aw:Address aw:Type=\"Shipping\">\n" +
-            "      <aw:Name>Jessica Arnold</aw:Name>\n" +
-            "      <aw:Street>4055 Madison Ave</aw:Street>\n" +
-            "      <aw:City>Seattle</aw:City>\n" +
-            "      <aw:State>WA</aw:State>\n" +
-            "      <aw:Zip>98112</aw:Zip>\n" +
-            "      <aw:Country>USA</aw:Country>\n" +
-            "    </aw:Address>\n" +
-            "    <aw:Address aw:Type=\"Billing\">\n" +
-            "      <aw:Name>Jessica Arnold</aw:Name>\n" +
-            "      <aw:Street>4055 Madison Ave</aw:Street>\n" +
-            "      <aw:City>Buffalo</aw:City>\n" +
-            "      <aw:State>NY</aw:State>\n" +
-            "      <aw:Zip>98112</aw:Zip>\n" +
-            "      <aw:Country>USA</aw:Country>\n" +
-            "    </aw:Address>\n" +
-            "    <aw:Items>\n" +
-            "      <aw:Item aw:PartNumber=\"898-AZ\">\n" +
-            "        <aw:ProductName>Computer Keyboard</aw:ProductName>\n" +
-            "        <aw:Quantity>1</aw:Quantity>\n" +
-            "        <aw:USPrice>29.99</aw:USPrice>\n" +
-            "        <aw:Comment>this thing breaks all the time</aw:Comment>\n" +
-            "      </aw:Item>\n" +
-            "      <aw:Item aw:PartNumber=\"898-AM\">\n" +
-            "        <aw:ProductName>Wireless Mouse</aw:ProductName>\n" +
-            "        <aw:Quantity>1</aw:Quantity>\n" +
-            "        <aw:USPrice>14.99</aw:USPrice>\n" +
-            "      </aw:Item>\n" +
-            "    </aw:Items>\n" +
-            "  </aw:PurchaseOrder>\n" +
-            "</aw:PurchaseOrders>";
-    private Document testDoc;
-    private Node purchaseOrderNode;
-
-
-    @Before
-    public void setUp() throws Exception {
-        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
-        documentBuilderFactory.setCoalescing(true);
-        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
-        testDoc = documentBuilder.parse(new InputSource(new StringReader(testXml)));
-        purchaseOrderNode = testDoc.getFirstChild();
-    }
-
-    @Test
-    public void getFirstMatchingNode_shouldReturnValue() {
-        Node resultNode = XmlUtils.getFirstMatchingChildNode(purchaseOrderNode, "aw:PurchaseOrder");
-        assertThat(resultNode).isNotNull();
-    }
-
-    @Test
-    public void getFirstMatchingChildNode_shouldFindNode() throws Exception {
-        ArrayList<String> testList = new ArrayList<String>();
-        testList.add("1999-10-22");
-        Node resultNode = XmlUtils.getFirstMatchingChildNode(purchaseOrderNode, "aw:PurchaseOrder", "aw:OrderDate", testList);
-        assertThat(resultNode).isNotNull();
-        assertThat(resultNode.getNodeName()).isEqualTo("aw:PurchaseOrder");
-        assertThat(resultNode.getAttributes().getNamedItem("aw:OrderDate").getNodeValue()).isEqualTo("1999-10-22");
-    }
-
-    @Test
-    public void getFirstMatchingChildNode_withUnmatchedAttribute_shouldNotFindNode() throws Exception {
-        ArrayList<String> testList = new ArrayList<String>();
-        testList.add("1999-10-");
-        Node resultNode = XmlUtils.getFirstMatchingChildNode(purchaseOrderNode, "aw:PurchaseOrder", "aw:OrderDate", testList);
-        assertThat(resultNode).isNull();
-    }
-
-    @Test
-    public void getMatchingChildNodes_withNullAttributeValues_shouldReturnMultiple() throws Exception {
-        List<Node> results = XmlUtils.getMatchingChildNodes(purchaseOrderNode, "aw:PurchaseOrder", "aw:OrderDate", null);
-        assertThat(results.size()).isEqualTo(3);
-    }
-
-    @Test
-    public void getMatchingChildNodes_withEmptyAttributeValues_shouldReturnNone() {
-        List<Node> results = XmlUtils.getMatchingChildNodes(purchaseOrderNode, "aw:PurchaseOrder", "aw:OrderDate", new ArrayList<String>());
-        assertThat(results).isEmpty();
-    }
-
-    @Test
-    public void testGetListFromDocument() throws Exception {
-        // Get all the "aw:PurchaseOrder" nodes. If any of them have an "aw:OrderDate" attribute, extract a Date.
-        List<Date> orderDates = XmlUtils.getListFromDocument(testDoc, "aw:PurchaseOrder", "aw:OrderDate", null, new XmlUtils.NodeProcessor<Date>() {
-            DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd", Locale.US);
-
-            @Override
-            public Date process(final Node node) {
-                try {
-                    return formatter.parse(node.getAttributes().getNamedItem("aw:OrderDate").getNodeValue());
-                } catch (ParseException e) {
-                    return null;
-                }
-            }
-        });
-
-        assertThat(orderDates.size()).isEqualTo(3);
-        assertThat(orderDates.get(0).getYear()).isEqualTo(99);
-        assertThat(orderDates.get(0).getMonth()).isEqualTo(9);
-        assertThat(orderDates.get(0).getDate()).isEqualTo(20);
-
-        assertThat(orderDates.get(1).getYear()).isEqualTo(99);
-        assertThat(orderDates.get(1).getMonth()).isEqualTo(9);
-        assertThat(orderDates.get(1).getDate()).isEqualTo(22);
-
-        assertThat(orderDates.get(2).getYear()).isEqualTo(99);
-        assertThat(orderDates.get(2).getMonth()).isEqualTo(9);
-        assertThat(orderDates.get(2).getDate()).isEqualTo(22);
-    }
-
-    @Test
-    public void testGetStringDataAsList_shouldFindDeepNested() throws Exception {
-        final List<String> strings = XmlUtils.getStringDataAsList(testDoc, "aw:Comment", null, null);
-        assertThat(strings.size()).isEqualTo(2);
-        assertThat(strings.get(0)).isEqualTo("Confirm this is electric");
-        assertThat(strings.get(1)).isEqualTo("this thing breaks all the time");
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java
deleted file mode 100644
index 79d601c8..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java
+++ /dev/null
@@ -1,117 +0,0 @@
-package com.mopub.mraid;
-
-import android.app.Activity;
-import android.content.Context;
-import android.view.View;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.TestMraidControllerFactory;
-import com.mopub.mraid.MraidController.MraidListener;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Mock;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
-import static com.mopub.mobileads.MoPubErrorCode.MRAID_LOAD_ERROR;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class MraidBannerTest {
-    private static final String INPUT_HTML_DATA = "%3Chtml%3E%3C%2Fhtml%3E";
-
-    MraidController mockMraidController;
-    @Mock CustomEventBannerListener mockBannerListener;
-
-    private Context context;
-    private Map<String, Object> localExtras;
-    private Map<String, String> serverExtras;
-
-    private MraidBanner subject;
-
-    @Before
-    public void setUp() {
-        subject = new MraidBanner();
-        mockMraidController = TestMraidControllerFactory.getSingletonMock();
-
-        context = new Activity();
-        localExtras = new HashMap<String, Object>();
-        localExtras.put("broadcastIdentifier", 123L);
-        serverExtras = new HashMap<String, String>();
-        serverExtras.put(HTML_RESPONSE_BODY_KEY, INPUT_HTML_DATA);
-    }
-
-    @Test
-    public void loadBanner_whenExtrasAreMalformed_shouldNotifyBannerListenerFailureAndReturn() {
-        serverExtras.remove(HTML_RESPONSE_BODY_KEY);
-
-        subject.loadBanner(context, mockBannerListener, localExtras, serverExtras);
-
-        verify(mockBannerListener).onBannerFailed(eq(MRAID_LOAD_ERROR));
-    }
-
-    @Test
-    public void invalidate_shouldDestroyMraidController() {
-        subject.loadBanner(context, mockBannerListener, localExtras, serverExtras);
-        subject.onInvalidate();
-
-        verify(mockMraidController).destroy();
-    }
-
-    @Test
-    public void bannerMraidListener_onReady_shouldNotifyBannerLoaded() {
-        MraidListener mraidListener = captureMraidListener();
-        mraidListener.onLoaded(null);
-
-        verify(mockBannerListener).onBannerLoaded(any(View.class));
-    }
-
-    @Test
-    public void bannerMraidListener_onFailure_shouldNotifyBannerFailed() {
-        MraidListener mraidListener = captureMraidListener();
-        mraidListener.onFailedToLoad();
-
-        verify(mockBannerListener).onBannerFailed(eq(MRAID_LOAD_ERROR));
-    }
-
-    @Test
-    public void bannerMraidListener_onExpand_shouldNotifyBannerExpandedAndClicked() {
-        MraidListener mraidListener = captureMraidListener();
-        mraidListener.onExpand();
-
-        verify(mockBannerListener).onBannerExpanded();
-        verify(mockBannerListener).onBannerClicked();
-    }
-
-    @Test
-    public void bannerMraidListener_onOpen_shouldNotifyBannerClicked() {
-        MraidListener mraidListener = captureMraidListener();
-        mraidListener.onOpen();
-
-        verify(mockBannerListener).onBannerClicked();
-    }
-
-    @Test
-    public void bannerMraidListener_onClose_shouldNotifyBannerCollapsed() {
-        MraidListener mraidListener = captureMraidListener();
-        mraidListener.onClose();
-
-        verify(mockBannerListener).onBannerCollapsed();
-    }
-
-    private MraidListener captureMraidListener() {
-        subject.loadBanner(context, mockBannerListener, localExtras, serverExtras);
-        ArgumentCaptor<MraidListener> listenerCaptor = ArgumentCaptor.forClass(MraidListener.class);
-        verify(mockMraidController).setMraidListener(listenerCaptor.capture());
-
-        return listenerCaptor.getValue();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java
deleted file mode 100644
index de6f3239..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java
+++ /dev/null
@@ -1,290 +0,0 @@
-package com.mopub.mraid;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.webkit.WebViewClient;
-
-import com.mopub.common.AdReport;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mraid.MraidBridge.MraidBridgeListener;
-import com.mopub.mraid.MraidBridge.MraidWebView;
-import com.mopub.mraid.MraidNativeCommandHandler.MraidCommandFailureListener;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Answers;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Captor;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-
-import java.net.URI;
-import java.util.HashMap;
-import java.util.Map;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyMapOf;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Matchers.startsWith;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-public class MraidBridgeTest {
-    @Mock MraidNativeCommandHandler mockNativeCommandHandler;
-    @Mock MraidBridgeListener mockBridgeListener;
-    @Mock AdReport mockAdReport;
-    @Mock(answer = Answers.RETURNS_DEEP_STUBS) MraidWebView mockBannerWebView;
-    @Mock(answer = Answers.RETURNS_DEEP_STUBS) MraidWebView mockInterstitialWebView;
-    @Captor ArgumentCaptor<WebViewClient> bannerWebViewClientCaptor;
-
-    private Activity activity;
-    private MraidBridge subjectBanner;
-    private MraidBridge subjectInterstitial;
-
-    @Before
-    public void setUp() {
-        activity = Robolectric.buildActivity(Activity.class).create().get();
-
-        subjectBanner = new MraidBridge(mockAdReport, PlacementType.INLINE, mockNativeCommandHandler);
-        subjectBanner.setMraidBridgeListener(mockBridgeListener);
-        subjectBanner.attachView(mockBannerWebView);
-
-        subjectInterstitial = new MraidBridge(mockAdReport, PlacementType.INTERSTITIAL, mockNativeCommandHandler);
-        subjectInterstitial.setMraidBridgeListener(mockBridgeListener);
-        subjectInterstitial.attachView(mockInterstitialWebView);
-
-        verify(mockBannerWebView).setWebViewClient(bannerWebViewClientCaptor.capture());
-        reset(mockBannerWebView);
-    }
-
-    @Test
-    public void attachView_thenDetach_shouldSetMRaidWebView_thenShouldClear() {
-        assertThat(subjectBanner.getMraidWebView()).isEqualTo(mockBannerWebView);
-
-        subjectBanner.detach();
-        assertThat(subjectBanner.getMraidWebView()).isNull();
-    }
-
-    @Test
-    public void attachView_thenOnPageFinished_shouldFireReady() {
-        bannerWebViewClientCaptor.getValue().onPageFinished(mockBannerWebView, "fake://url");
-
-        verify(mockBridgeListener).onPageLoaded();
-    }
-
-    @Test
-    public void attachView_thenOnPageFinished_twice_shouldNotFireReadySecondTime() {
-        bannerWebViewClientCaptor.getValue().onPageFinished(mockBannerWebView, "fake://url");
-        bannerWebViewClientCaptor.getValue().onPageFinished(mockBannerWebView, "fake://url2");
-
-        verify(mockBridgeListener, times(1)).onPageLoaded();
-    }
-
-    @Test
-    public void attachView_thenSetContentHtml_shouldCallLoadDataWithBaseURL() {
-        subjectBanner.setContentHtml("test-html");
-
-        verify(mockBannerWebView).loadDataWithBaseURL(
-                null, "test-html", "text/html", "UTF-8", null);
-    }
-
-    @Test
-    public void handleShouldOverrideUrl_invalidUrl_shouldFireErrorEvent() {
-        boolean result = subjectBanner.handleShouldOverrideUrl("bad bad bad");
-
-        verify(mockBannerWebView).loadUrl(startsWith(
-                "javascript:window.mraidbridge.notifyErrorEvent"));
-        assertThat(result).isTrue();
-    }
-
-    @Test
-    public void handleShouldOverrideUrl_mopubNonFailLoadUrl_shouldNeverLoadUrl_shouldReturnTrue() {
-        boolean result = subjectBanner.handleShouldOverrideUrl("mopub://special-mopub-command");
-
-        verify(mockBannerWebView, never()).loadUrl(anyString());
-        assertThat(result).isTrue();
-    }
-
-    @Test
-    public void handleShouldOverrideUrl_mopubFailLoadUrl_whenBanner_shouldNotifyListenerOfOnPageFailedToLoad_shouldReturnTrue() {
-        boolean result = subjectBanner.handleShouldOverrideUrl("mopub://failLoad");
-
-        verify(mockBridgeListener).onPageFailedToLoad();
-        verify(mockBannerWebView, never()).loadUrl(anyString());
-        assertThat(result).isTrue();
-    }
-
-    @Test
-    public void handleShouldOverrideUrl_mopubFailLoadUrl_whenInterstitial_shouldNotNotifyListenerOfOnPageFailedToLoad_shouldReturnTrue() {
-        boolean result = subjectInterstitial.handleShouldOverrideUrl("mopub://failLoad");
-
-        verify(mockBridgeListener, never()).onPageFailedToLoad();
-        verify(mockBannerWebView, never()).loadUrl(anyString());
-        assertThat(result).isTrue();
-    }
-
-    @Test
-    public void handleShouldOverrideUrl_mraidUrl_invalid_shouldFireErrorEvent_shouldReturnTrue() {
-        boolean result = subjectBanner.handleShouldOverrideUrl("mraid://bad-command");
-
-        verify(mockBannerWebView).loadUrl(startsWith(
-                "javascript:window.mraidbridge.notifyErrorEvent"));
-        assertThat(result).isTrue();
-    }
-
-    @Test
-    public void handleShouldOverrideUrl_smsUrl_notClicked_shouldReturnFalse() {
-        boolean result = subjectBanner.handleShouldOverrideUrl("sms://123456789");
-
-        assertThat(result).isFalse();
-    }
-
-    @Test
-    public void handleShouldOverrideUrl_smsUrl_clicked_shouldStartActivity() {
-        subjectBanner.setClicked(true);
-        reset(mockBannerWebView);
-        when(mockBannerWebView.getContext()).thenReturn(activity);
-
-        boolean result = subjectBanner.handleShouldOverrideUrl("sms://123456789");
-
-        Intent startedIntent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(startedIntent).isNotNull();
-        assertThat(startedIntent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(startedIntent.getComponent()).isNull();
-        assertThat(result).isTrue();
-    }
-
-    @Test
-    public void handleShouldOverrideUrl_normalUrl_shouldReturnFalse() {
-        boolean result = subjectBanner.handleShouldOverrideUrl("http://www.mopub.com");
-
-        assertThat(result).isFalse();
-    }
-
-    @Test(expected = MraidCommandException.class)
-    public void runCommand_requiresClick_notClicked_shouldThrowException()
-            throws MraidCommandException {
-        subjectBanner = new MraidBridge(mockAdReport, PlacementType.INLINE);
-        subjectBanner.attachView(mockBannerWebView);
-        subjectBanner.setClicked(false);
-        Map<String, String> params = new HashMap<String, String>();
-        params.put("uri", "http://valid-url");
-
-        subjectBanner.runCommand(MraidJavascriptCommand.PLAY_VIDEO, params);
-    }
-
-    public void runCommand_requiresClick_clicked_shouldNotThrowException()
-            throws MraidCommandException {
-        subjectBanner.setClicked(true);
-        Map<String, String> params = new HashMap<String, String>();
-        params.put("uri", "http://valid-url");
-
-        subjectBanner.runCommand(MraidJavascriptCommand.PLAY_VIDEO, params);
-    }
-
-    @Test(expected = MraidCommandException.class)
-    public void runCommand_interstitial_requiresClick_notClicked_shouldThrowException()
-            throws MraidCommandException {
-        subjectInterstitial.setClicked(false);
-        Map<String, String> params = new HashMap<String, String>();
-        params.put("uri", "http://valid-url");
-
-        subjectInterstitial.runCommand(MraidJavascriptCommand.OPEN, params);
-    }
-
-    @Test
-    public void runCommand_interstitial_requiresClick_clicked_shouldNotThrowException()
-            throws MraidCommandException {
-        subjectInterstitial.setClicked(true);
-        Map<String, String> params = new HashMap<String, String>();
-        params.put("url", "http://valid-url");
-
-        subjectInterstitial.runCommand(MraidJavascriptCommand.OPEN, params);
-    }
-
-    @Test
-    public void runCommand_close_shouldCallListener()
-            throws MraidCommandException {
-        Map<String, String> params = new HashMap<String, String>();
-        
-        subjectBanner.runCommand(MraidJavascriptCommand.CLOSE, params);
-
-        verify(mockBridgeListener).onClose();
-    }
-
-    @Test
-    public void runCommand_expand_shouldCallListener()
-            throws MraidCommandException {
-        subjectBanner.setClicked(true);
-        Map<String, String> params = new HashMap<String, String>();
-        params.put("shouldUseCustomClose", "true");
-
-        subjectBanner.runCommand(MraidJavascriptCommand.EXPAND, params);
-
-        verify(mockBridgeListener).onExpand(null, true);
-    }
-
-    @Test
-    public void runCommand_expand_withUrl_shouldCallListener()
-            throws MraidCommandException {
-        subjectBanner.setClicked(true);
-        Map<String, String> params = new HashMap<String, String>();
-        params.put("url", "http://valid-url");
-        params.put("shouldUseCustomClose", "true");
-
-        subjectBanner.runCommand(MraidJavascriptCommand.EXPAND, params);
-
-        ArgumentCaptor<URI> uriCaptor = ArgumentCaptor.forClass(URI.class);
-        verify(mockBridgeListener).onExpand(
-                uriCaptor.capture(), eq(true));
-        assertThat(uriCaptor.getValue().toString()).isEqualTo("http://valid-url");
-    }
-
-    @Test
-    public void runCommand_playVideo_shouldCallListener()
-            throws MraidCommandException {
-        subjectBanner.setClicked(true);
-        Map<String, String> params = new HashMap<String, String>();
-        params.put("uri", "http://valid-url");
-
-        subjectBanner.runCommand(MraidJavascriptCommand.PLAY_VIDEO, params);
-
-        ArgumentCaptor<URI> uriCaptor = ArgumentCaptor.forClass(URI.class);
-        verify(mockBridgeListener).onPlayVideo(uriCaptor.capture());
-        assertThat(uriCaptor.getValue().toString()).isEqualTo("http://valid-url");
-    }
-
-    @Test
-    public void runCommand_storePicture_shouldCallListener()
-            throws MraidCommandException {
-        subjectBanner.setClicked(true);
-        Map<String, String> params = new HashMap<String, String>();
-        params.put("uri", "http://valid-url");
-
-        subjectBanner.runCommand(MraidJavascriptCommand.STORE_PICTURE, params);
-
-        verify(mockNativeCommandHandler).storePicture(any(Context.class), eq("http://valid-url"),
-                any(MraidCommandFailureListener.class));
-    }
-
-    @Test
-    public void runCommand_createCalendarEvent_shouldCallListener()
-            throws MraidCommandException {
-        subjectBanner.setClicked(true);
-        Map<String, String> params = new HashMap<String, String>();
-        params.put("eventName", "Dinner at my house");
-
-        subjectBanner.runCommand(MraidJavascriptCommand.CREATE_CALENDAR_EVENT, params);
-
-        verify(mockNativeCommandHandler).createCalendarEvent(any(Context.class),
-                anyMapOf(String.class, String.class));
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
deleted file mode 100644
index a2292adb..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
+++ /dev/null
@@ -1,1039 +0,0 @@
-package com.mopub.mraid;
-
-import android.app.Activity;
-import android.content.ComponentName;
-import android.content.Intent;
-import android.content.pm.ActivityInfo;
-import android.content.pm.PackageManager;
-import android.content.pm.ResolveInfo;
-import android.net.Uri;
-import android.os.Build;
-import android.view.View;
-import android.widget.FrameLayout;
-
-import com.mopub.common.AdReport;
-import com.mopub.common.CloseableLayout.ClosePosition;
-import com.mopub.common.MoPubBrowser;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.Utils;
-import com.mopub.mobileads.BaseVideoPlayerActivityTest;
-import com.mopub.mobileads.MraidVideoPlayerActivity;
-import com.mopub.mraid.MraidBridge.MraidBridgeListener;
-import com.mopub.mraid.MraidBridge.MraidWebView;
-import com.mopub.mraid.MraidController.MraidListener;
-import com.mopub.mraid.MraidController.OrientationBroadcastReceiver;
-import com.mopub.mraid.MraidController.ScreenMetricsWaiter;
-import com.mopub.mraid.MraidController.ScreenMetricsWaiter.WaitRequest;
-import com.mopub.mraid.MraidController.UseCustomCloseListener;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Captor;
-import org.mockito.Mock;
-import org.mockito.Mockito;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import java.net.URI;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyBoolean;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-public class MraidControllerTest {
-    private long broadcastIdentifier = 123;
-    @Mock private AdReport mockAdReport;
-    @Mock private MraidBridge mockBridge;
-    @Mock private MraidBridge mockTwoPartBridge;
-    @Mock private ScreenMetricsWaiter mockScreenMetricsWaiter;
-    @Mock private WaitRequest mockWaitRequest;
-    @Mock private MraidListener mockMraidListener;
-    @Mock private UseCustomCloseListener mockUseCustomCloseListener;
-    @Mock private OrientationBroadcastReceiver mockOrientationBroadcastReceiver;
-    @Captor private ArgumentCaptor<MraidBridgeListener> bridgeListenerCaptor;
-    @Captor private ArgumentCaptor<MraidBridgeListener> twoPartBridgeListenerCaptor;
-
-    private Activity activity;
-    private FrameLayout rootView;
-
-    private MraidController subject;
-
-    @Before
-    public void setUp() {
-        Robolectric.setDisplayMetricsDensity(1.0f);
-
-        activity = spy(Robolectric.buildActivity(Activity.class).create().get());
-        activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-
-        rootView = new FrameLayout(activity);
-        when(mockBridge.isVisible()).thenReturn(true);
-
-        // By default, immediately fulfill a screen metrics wait request. Individual tests can
-        // reset this, if desired.
-        when(mockScreenMetricsWaiter.waitFor(Mockito.<View>anyVararg()))
-                .thenReturn(mockWaitRequest);
-        doAnswer(new Answer<Void>() {
-            @Override
-            public Void answer(final InvocationOnMock invocation) throws Throwable {
-                Runnable runnable = (Runnable) invocation.getArguments()[0];
-                runnable.run();
-                return null;
-            }
-        }).when(mockWaitRequest).start(any(Runnable.class));
-
-        subject = new MraidController(
-                activity, mockAdReport, PlacementType.INLINE,
-                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
-        subject.setMraidListener(mockMraidListener);
-        subject.setOrientationBroadcastReceiver(mockOrientationBroadcastReceiver);
-        subject.setRootView(rootView);
-        subject.loadContent("fake_html_data");
-
-        verify(mockBridge).setMraidBridgeListener(bridgeListenerCaptor.capture());
-        verify(mockTwoPartBridge).setMraidBridgeListener(twoPartBridgeListenerCaptor.capture());
-    }
-
-    @Test
-    public void constructor_shouldSetStateToLoading() {
-        ViewState state = subject.getViewState();
-
-        assertThat(state).isEqualTo(ViewState.LOADING);
-    }
-
-    @Test
-    public void bridgeOnReady_shouldSetStateToDefault_shouldCallListener() {
-        bridgeListenerCaptor.getValue().onPageLoaded();
-
-        ViewState state = subject.getViewState();
-
-        assertThat(state).isEqualTo(ViewState.DEFAULT);
-        verify(mockMraidListener).onLoaded(any(View.class));
-    }
-
-    @Test
-    public void handlePageLoad_shouldNotifyBridgeOfVisibilityPlacementScreenSizeAndSupports() {
-        when(mockBridge.isVisible()).thenReturn(true);
-
-        subject.handlePageLoad();
-
-        verify(mockBridge).notifyViewability(true);
-        verify(mockBridge).notifyPlacementType(PlacementType.INLINE);
-        verify(mockBridge).notifyScreenMetrics(any(MraidScreenMetrics.class));
-
-        // The actual values here are supplied by the Mraids class, which has separate tests.
-        verify(mockBridge).notifySupports(false, false, false, false, false);
-    }
-
-    @Test
-    public void handlePageLoad_shouldCancelLastRequest() {
-        subject.handlePageLoad();
-
-        verify(mockScreenMetricsWaiter).cancelLastRequest();
-    }
-
-    @Test
-    public void handlePageLoad_thenDestroy_shouldCancelLastRequest() {
-        subject.handlePageLoad();
-        subject.destroy();
-
-        verify(mockScreenMetricsWaiter, times(2)).cancelLastRequest();
-    }
-
-    @Test
-    public void onPageFailedToLoad_shouldNotifyListener() {
-        bridgeListenerCaptor.getValue().onPageFailedToLoad();
-
-        verify(mockMraidListener).onFailedToLoad();
-    }
-
-    @Test
-    public void onPageFailedToLoad_withTwoPartBridge_shouldNotNotifyListener() {
-        twoPartBridgeListenerCaptor.getValue().onPageFailedToLoad();
-
-        verify(mockMraidListener, never()).onFailedToLoad();
-    }
-
-    @Test
-    public void bridgeOnVisibilityChanged_withTwoPartBridgeAttached_shouldNotNotifyVisibility() {
-        when(mockTwoPartBridge.isAttached()).thenReturn(true);
-
-        bridgeListenerCaptor.getValue().onVisibilityChanged(true);
-        bridgeListenerCaptor.getValue().onVisibilityChanged(false);
-
-        verify(mockBridge, never()).notifyViewability(anyBoolean());
-        verify(mockTwoPartBridge, never()).notifyViewability(anyBoolean());
-    }
-
-    @Test
-    public void handleResize_shouldBeIgnoredWhenLoadingOrHidden() throws MraidCommandException {
-        subject.setViewStateForTesting(ViewState.LOADING);
-        subject.handleResize(100, 200, 0, 0, ClosePosition.TOP_RIGHT, true);
-        assertThat(subject.getViewState()).isEqualTo(ViewState.LOADING);
-
-        subject.setViewStateForTesting(ViewState.HIDDEN);
-        subject.handleResize(100, 200, 0, 0, ClosePosition.TOP_RIGHT, true);
-        assertThat(subject.getViewState()).isEqualTo(ViewState.HIDDEN);
-    }
-
-    @Test(expected = MraidCommandException.class)
-    public void handleResize_shouldThrowExceptionWhenExpanded() throws MraidCommandException {
-        subject.setViewStateForTesting(ViewState.EXPANDED);
-        subject.handleResize(100, 200, 0, 0, ClosePosition.TOP_RIGHT, true);
-    }
-
-    @Test(expected = MraidCommandException.class)
-    public void handleResize_shouldThrowExceptionForInterstitial() throws MraidCommandException {
-        MraidListener listener = mock(MraidListener.class);
-        subject = new MraidController(activity, mockAdReport, PlacementType.INTERSTITIAL,
-                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
-        subject.setMraidListener(listener);
-        subject.setRootView(rootView);
-
-        // Move to DEFAULT state
-        subject.loadContent("fake_html_data");
-        subject.handlePageLoad();
-
-        subject.handleResize(100, 200, 0, 0, ClosePosition.TOP_RIGHT, true);
-    }
-
-    @Test
-    public void handleResize_shouldMoveWebViewToResizedContainer_shouldSetResizedState()
-            throws MraidCommandException {
-        // Move to DEFAULT state
-        subject.handlePageLoad();
-        subject.setRootViewSize(100, 100);
-
-        subject.handleResize(100, 100, 0, 0, ClosePosition.TOP_RIGHT, true);
-        assertThat(subject.getExpandedAdContainer().getChildCount()).isEqualTo(2);
-        assertThat(subject.getAdContainer().getChildCount()).isEqualTo(0);
-        assertThat(subject.getViewState()).isEqualTo(ViewState.RESIZED);
-    }
-
-    @Test
-    public void handleResize_noAllowOffscreen_smallView_shouldResize()
-            throws MraidCommandException {
-        // Move to DEFAULT state
-        subject.handlePageLoad();
-        subject.setRootViewSize(100, 100);
-
-        subject.handleResize(50, 50, 0, 0, ClosePosition.TOP_RIGHT, /* allowOffscreen */ false);
-        assertThat(subject.getViewState()).isEqualTo(ViewState.RESIZED);
-    }
-
-    @Test(expected = MraidCommandException.class)
-    public void handleResize_noAllowOffscreen_largeView_shouldThrowException()
-            throws MraidCommandException {
-        // Move to DEFAULT state
-        subject.handlePageLoad();
-        subject.setRootViewSize(100, 100);
-
-        subject.handleResize(101, 101, 0, 0, ClosePosition.TOP_RIGHT, /* allowOffscreen */ false);
-    }
-
-    @Test(expected = MraidCommandException.class)
-    public void handleResize_allowOffscreen_largeView_closeButtonTopRight_shouldThrowException()
-            throws MraidCommandException {
-        // Move to DEFAULT state
-        subject.handlePageLoad();
-        subject.setRootViewSize(100, 100);
-
-        subject.handleResize(150, 150, 0, 0, ClosePosition.TOP_RIGHT, /* allowOffscreen */ true);
-    }
-
-    @Test
-    public void handleResize_allowOffscreen_closeButtonTopLeft_shouldNotThrowException()
-            throws MraidCommandException {
-        // Move to DEFAULT state
-        subject.handlePageLoad();
-        subject.setRootViewSize(100, 100);
-
-        subject.handleResize(150, 150, 0, 0, ClosePosition.TOP_LEFT, /* allowOffscreen */ true);
-        assertThat(subject.getViewState()).isEqualTo(ViewState.RESIZED);
-    }
-
-    @Test(expected = MraidCommandException.class)
-    public void handleResize_allowOffscreen_largeOffset_closeButtonBottomRight_shouldThrowException()
-            throws MraidCommandException {
-        // Move to DEFAULT state
-        subject.handlePageLoad();
-        subject.setRootViewSize(100, 1000);
-
-        // Throws an exception because the close button overlaps the edge
-        subject.handleResize(100, 100, 25, 25, ClosePosition.BOTTOM_RIGHT, /* allowOffscreen */
-                true);
-    }
-
-    @Test
-    public void handleResize_allowOffscreen_largeOffset_closeButtonBottomLeft_shouldNotThrowException()
-            throws MraidCommandException {
-        // Move to DEFAULT state
-        subject.handlePageLoad();
-        subject.setRootViewSize(100, 1000);
-
-        subject.handleResize(100, 100, 25, 25, ClosePosition.BOTTOM_LEFT, /* allowOffscreen */
-                true);
-        assertThat(subject.getViewState()).isEqualTo(ViewState.RESIZED);
-    }
-
-    @Test(expected = MraidCommandException.class)
-    public void handleResize_heightSmallerThan50Dips_shouldFail() throws MraidCommandException {
-        subject.handlePageLoad();
-        subject.setRootViewSize(100, 100);
-        subject.handleResize(100, 49, 25, 25, ClosePosition.BOTTOM_LEFT, /* allowOffscreen */
-                false);
-    }
-
-    @Test(expected = MraidCommandException.class)
-    public void handleResize_widthSmallerThan50Dips_shouldFail() throws MraidCommandException {
-        subject.handlePageLoad();
-        subject.setRootViewSize(100, 100);
-        subject.handleResize(49, 100, 25, 25, ClosePosition.BOTTOM_LEFT, /* allowOffscreen */
-                false);
-    }
-
-    @Test
-    public void handleClose_fromResizedState_shouldMoveWebViewToOriginalContainer_shouldNotFireOnClose()
-            throws MraidCommandException {
-        // Move to RESIZED state
-        subject.handlePageLoad();
-        subject.setRootViewSize(100, 100);
-        subject.handleResize(100, 100, 0, 0, ClosePosition.TOP_RIGHT, false);
-
-        subject.handleClose();
-
-        assertThat(subject.getExpandedAdContainer().getChildCount()).isEqualTo(1);
-        assertThat(subject.getAdContainer().getChildCount()).isEqualTo(1);
-        assertThat(subject.getViewState()).isEqualTo(ViewState.DEFAULT);
-        verify(mockMraidListener, never()).onClose();
-    }
-
-    @Test(expected = MraidCommandException.class)
-    public void handleExpand_afterDestroy_shouldThrowException() throws MraidCommandException {
-        subject.destroy();
-        subject.handleExpand(null, false);
-    }
-
-    @Test
-    public void handleExpand_shouldBeIgnoredForInterstitial() throws MraidCommandException {
-        MraidListener listener = mock(MraidListener.class);
-        subject = new MraidController(activity, mockAdReport, PlacementType.INTERSTITIAL,
-                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
-        subject.setMraidListener(listener);
-        subject.setRootView(rootView);
-
-        // Move to DEFAULT state
-        subject.loadContent("fake_html_data");
-        subject.handlePageLoad();
-
-        subject.handleExpand(null, false);
-
-        assertThat(subject.getViewState()).isEqualTo(ViewState.DEFAULT);
-        verify(listener, never()).onExpand();
-    }
-
-    @Test
-    public void handleExpand_shouldBeIgnoredWhenLoadingHiddenOrExpanded()
-            throws MraidCommandException {
-        subject.setViewStateForTesting(ViewState.LOADING);
-        subject.handleExpand(null, false);
-        assertThat(subject.getViewState()).isEqualTo(ViewState.LOADING);
-        verify(mockMraidListener, never()).onExpand();
-
-        subject.setViewStateForTesting(ViewState.HIDDEN);
-        subject.handleExpand(null, false);
-        assertThat(subject.getViewState()).isEqualTo(ViewState.HIDDEN);
-        verify(mockMraidListener, never()).onExpand();
-
-        subject.setViewStateForTesting(ViewState.EXPANDED);
-        subject.handleExpand(null, false);
-        assertThat(subject.getViewState()).isEqualTo(ViewState.EXPANDED);
-        verify(mockMraidListener, never()).onExpand();
-    }
-
-    @Test
-    public void handleExpand_withNoUrl_shouldMoveWebViewToExpandedContainer_shouldCallOnExpand()
-            throws MraidCommandException {
-        // Move to DEFAULT state
-        subject.handlePageLoad();
-
-        subject.handleExpand(null, false);
-
-        assertThat(subject.getExpandedAdContainer().getChildCount()).isEqualTo(2);
-        assertThat(subject.getAdContainer().getChildCount()).isEqualTo(0);
-        verify(mockMraidListener).onExpand();
-    }
-
-    @Test
-    public void handleExpand_withTwoPartUrl_shouldAttachTwoPartBridge_shouldCallOnExpand()
-            throws MraidCommandException {
-        // Move to DEFAULT state
-        subject.handlePageLoad();
-
-        subject.handleExpand(URI.create("http://two-part-url"), false);
-
-        verify(mockTwoPartBridge).setMraidBridgeListener(any(MraidBridgeListener.class));
-        verify(mockTwoPartBridge).attachView(any(MraidWebView.class));
-        verify(mockTwoPartBridge).setContentUrl(URI.create("http://two-part-url").toString());
-
-        assertThat(subject.getExpandedAdContainer().getChildCount()).isEqualTo(2);
-        assertThat(subject.getAdContainer().getChildCount()).isEqualTo(1);
-        verify(mockMraidListener).onExpand();
-        assertThat(subject.getViewState()).isEqualTo(ViewState.EXPANDED);
-    }
-
-    @Test
-    public void handleClose_afterDestroy_shouldNotFireOnClose() {
-        subject.destroy();
-        subject.handleClose();
-
-        verify(mockMraidListener, never()).onClose();
-    }
-
-    @Test
-    public void handleClose_fromExpandedState_shouldMoveWebViewToOriginalContainer_shouldNotFireOnClose() throws MraidCommandException {
-        // Move to EXPANDED state
-        subject.handlePageLoad();
-        subject.handleExpand(null, false);
-
-        subject.handleClose();
-
-        assertThat(subject.getExpandedAdContainer().getChildCount()).isEqualTo(1);
-        assertThat(subject.getAdContainer().getChildCount()).isEqualTo(1);
-        assertThat(subject.getViewState()).isEqualTo(ViewState.DEFAULT);
-        verify(mockMraidListener, never()).onClose();
-    }
-
-    @Test
-    public void handleClose_fromTwoPartExpandedState_shouldDetachTwoPartBridge_shouldMoveWebViewToOriginalContainer_shouldNotFireOnClose()
-            throws MraidCommandException {
-        URI uri = URI.create("http://two-part-url");
-
-        // Move to two part EXPANDED state
-        subject.handlePageLoad();
-        subject.handleExpand(uri, false);
-        when(mockTwoPartBridge.isAttached()).thenReturn(true);
-
-        subject.handleClose();
-
-        verify(mockTwoPartBridge).detach();
-        assertThat(subject.getExpandedAdContainer().getChildCount()).isEqualTo(1);
-        assertThat(subject.getAdContainer().getChildCount()).isEqualTo(1);
-        assertThat(subject.getViewState()).isEqualTo(ViewState.DEFAULT);
-
-        verify(mockMraidListener, never()).onClose();
-    }
-
-    @Test
-    public void handleClose_fromDefaultState_shouldHideAdContainer_shouldCallOnClose() {
-        // Move to DEFAULT state
-        subject.handlePageLoad();
-        assertThat(subject.getViewState()).isEqualTo(ViewState.DEFAULT);
-
-        subject.handleClose();
-
-        assertThat(subject.getAdContainer().getVisibility()).isEqualTo(View.INVISIBLE);
-        assertThat(subject.getViewState()).isEqualTo(ViewState.HIDDEN);
-
-        verify(mockMraidListener).onClose();
-    }
-
-    @Test
-    public void handleShowVideo_shouldStartVideoPlayerActivity() {
-        subject.handleShowVideo("http://video");
-        BaseVideoPlayerActivityTest.assertMraidVideoPlayerActivityStarted(
-                MraidVideoPlayerActivity.class, "http://video");
-    }
-
-    @Test
-    public void handleCustomClose_shouldUpdateExpandedContainer() {
-        subject.handleCustomClose(true);
-        assertThat(subject.getExpandedAdContainer().isCloseVisible()).isFalse();
-
-        subject.handleCustomClose(false);
-        assertThat(subject.getExpandedAdContainer().isCloseVisible()).isTrue();
-    }
-
-    @Test
-    public void handleCustomClose_shouldCallCustomCloseChangedListener() {
-        subject.setUseCustomCloseListener(mockUseCustomCloseListener);
-
-        subject.handleCustomClose(true);
-        verify(mockUseCustomCloseListener).useCustomCloseChanged(true);
-
-        reset(mockUseCustomCloseListener);
-        subject.handleCustomClose(false);
-        verify(mockUseCustomCloseListener).useCustomCloseChanged(false);
-    }
-
-    @Test
-    public void handleOpen_withMoPubNativeBrowserUrl_shouldOpenExternalBrowser() {
-        subject.handleOpen("mopubnativebrowser://navigate?url=https%3A%2F%2Fwww.example.com");
-
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(intent.getDataString()).isEqualTo("https://www.example.com");
-        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
-    }
-
-    @Test
-    public void handleOpen_withMalformedMoPubNativeBrowserUrl_shouldNotStartNewActivity() {
-        // invalid host parameter 'nav'
-        subject.handleOpen("mopubnativebrowser://nav?url=https%3A%2F%2Fwww.example.com");
-
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
-    }
-
-    @Test
-    public void handleOpen_withApplicationUrl_shouldStartNewIntent() {
-        String applicationUrl = "amzn://blah";
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW, Uri
-                .parse(applicationUrl)), new ResolveInfo());
-
-        subject.handleOpen(applicationUrl);
-
-        Intent startedIntent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(startedIntent).isNotNull();
-        // Since we are not using an Activity context, we should have FLAG_ACTIVITY_NEW_TASK
-        assertThat(Utils.bitMaskContainsFlag(startedIntent.getFlags(),
-                Intent.FLAG_ACTIVITY_NEW_TASK)).isTrue();
-        assertThat(startedIntent.getComponent()).isNull();
-
-        verify(mockMraidListener).onOpen();
-    }
-
-    @Test
-    public void handleOpen_withHttpApplicationUrl_shouldStartMoPubBrowser() {
-        String applicationUrl = "http://blah";
-
-        subject.handleOpen(applicationUrl);
-
-        Intent startedIntent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(startedIntent).isNotNull();
-        // Since we are not using an Activity context, we should have FLAG_ACTIVITY_NEW_TASK
-        assertThat(Utils.bitMaskContainsFlag(startedIntent.getFlags(),
-                Intent.FLAG_ACTIVITY_NEW_TASK)).isTrue();
-        assertThat(startedIntent.getComponent().getClassName())
-                .isEqualTo("com.mopub.common.MoPubBrowser");
-
-        verify(mockMraidListener).onOpen();
-    }
-
-    @Test
-    public void handleOpen_withApplicationUrlThatCantBeHandled_shouldDefaultToMoPubBrowser()
-            throws Exception {
-        String applicationUrl = "canthandleme://blah";
-
-        subject.handleOpen(applicationUrl);
-
-        Intent startedIntent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(startedIntent).isNotNull();
-        // Since we are not using an Activity context, we should have FLAG_ACTIVITY_NEW_TASK
-        assertThat(Utils.bitMaskContainsFlag(startedIntent.getFlags(),
-                Intent.FLAG_ACTIVITY_NEW_TASK)).isTrue();
-        assertThat(startedIntent.getComponent().getClassName())
-                .isEqualTo("com.mopub.common.MoPubBrowser");
-        assertThat(startedIntent.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY))
-                .isEqualTo(applicationUrl);
-
-        verify(mockMraidListener).onOpen();
-    }
-
-    @Test
-    public void orientationBroadcastReceiver_whenUnregistered_shouldIgnoreOnReceive() {
-        Intent intent = mock(Intent.class);
-        when(intent.getAction()).thenReturn("some bogus action which we hope never to see");
-
-        MraidController.OrientationBroadcastReceiver receiver =
-                subject.new OrientationBroadcastReceiver();
-        receiver.register(activity);
-        receiver.unregister();
-        receiver.onReceive(activity, intent);
-
-        verify(intent, never()).getAction();
-    }
-
-    @Test
-    public void orientationProperties_shouldDefaultToAllowChangeTrueAndForceOrientationNone() {
-        // These are the default values provided by the MRAID spec
-        assertThat(subject.getAllowOrientationChange()).isTrue();
-        assertThat(subject.getForceOrientation()).isEqualTo(MraidOrientation.NONE);
-    }
-
-    @Test
-    public void handleSetOrientationProperties_withForcedOrientation_shouldUpdateProperties() throws MraidCommandException, PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        subject.handleSetOrientationProperties(false, MraidOrientation.LANDSCAPE);
-
-        assertThat(subject.getAllowOrientationChange()).isFalse();
-        assertThat(subject.getForceOrientation()).isEqualTo(MraidOrientation.LANDSCAPE);
-    }
-
-    @Test
-    public void handleSetOrientationProperties_withOrientationNone_withApplicationContext_shouldUpdateProperties() throws MraidCommandException, PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        subject = new MraidController(
-                activity.getApplicationContext(), mockAdReport, PlacementType.INLINE,
-                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
-
-        subject.handleSetOrientationProperties(false, MraidOrientation.NONE);
-
-        assertThat(subject.getAllowOrientationChange()).isFalse();
-        assertThat(subject.getForceOrientation()).isEqualTo(MraidOrientation.NONE);
-    }
-
-    @Test
-    public void handleSetOrientationProperties_withForcedOrientation_withApplicationContext_shouldThrowMraidCommandExceptionAndNotUpdateProperties() throws PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        subject = new MraidController(
-                activity.getApplicationContext(), mockAdReport, PlacementType.INLINE,
-                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
-
-        try {
-            subject.handleSetOrientationProperties(false, MraidOrientation.LANDSCAPE);
-            fail("Expected MraidCommandException");
-        } catch (MraidCommandException e) {
-            // pass
-        }
-
-        assertThat(subject.getAllowOrientationChange()).isTrue();
-        assertThat(subject.getForceOrientation()).isEqualTo(MraidOrientation.NONE);
-    }
-
-    @Test
-    public void handleSetOrientationProperties_withActivityInfoNotFound_shouldThrowMraidCommandException() throws PackageManager.NameNotFoundException {
-        setMockActivityInfo(false, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        try {
-            subject.handleSetOrientationProperties(false, MraidOrientation.LANDSCAPE);
-            fail("Expected MraidCommandException");
-        } catch (MraidCommandException e) {
-            // pass
-        }
-
-        assertThat(subject.getAllowOrientationChange()).isTrue();
-        assertThat(subject.getForceOrientation()).isEqualTo(MraidOrientation.NONE);
-    }
-
-    @Test
-    public void handleSetOrientationProperties_whenTryingToSetToOrientationDeclaredInManifest_shouldUpdateProperties() throws Exception {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_PORTRAIT,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        subject.handleSetOrientationProperties(true, MraidOrientation.PORTRAIT);
-
-        assertThat(subject.getAllowOrientationChange()).isTrue();
-        assertThat(subject.getForceOrientation()).isEqualTo(MraidOrientation.PORTRAIT);
-    }
-
-    @Test
-    public void handleSetOrientationProperties_whenTryingToSetToOrientationDifferentFromManifest_shouldThrowMraidCommandException() throws Exception {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_PORTRAIT,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        try {
-            subject.handleSetOrientationProperties(true, MraidOrientation.LANDSCAPE);
-            fail("Expected MraidCommandException");
-        } catch (MraidCommandException e) {
-            // pass
-        }
-
-        assertThat(subject.getAllowOrientationChange()).isTrue();
-        assertThat(subject.getForceOrientation()).isEqualTo(MraidOrientation.NONE);
-    }
-
-    @Test
-    public void handleSetOrientationProperties_withForcedOrientation_withMissingConfigChangeOrientation_shouldThrowMraidCommandException() throws Exception {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                /* missing CONFIG_ORIENTATION */ ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        try {
-            subject.handleSetOrientationProperties(true, MraidOrientation.PORTRAIT);
-            fail("Expected MraidCommandException");
-        } catch (MraidCommandException e) {
-            // pass
-        }
-
-        assertThat(subject.getAllowOrientationChange()).isTrue();
-        assertThat(subject.getForceOrientation()).isEqualTo(MraidOrientation.NONE);
-    }
-
-    @Config(reportSdk = Build.VERSION_CODES.HONEYCOMB_MR1)
-    @Test
-    public void handleSetOrientationProperties_beforeHoneycombMr2_withMissingConfigChangeScreenSize_shouldUpdateProperties() throws Exception {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION);
-
-        subject.handleSetOrientationProperties(false, MraidOrientation.LANDSCAPE);
-
-        assertThat(subject.getAllowOrientationChange()).isFalse();
-        assertThat(subject.getForceOrientation()).isEqualTo(MraidOrientation.LANDSCAPE);
-    }
-
-    @Config(reportSdk = Build.VERSION_CODES.HONEYCOMB_MR2)
-    @Test
-    public void handleSetOrientationProperties_atLeastHoneycombMr2_withMissingConfigChangeScreenSize_shouldThrowMraidCommandException() throws Exception {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION);
-
-        try {
-            subject.handleSetOrientationProperties(false, MraidOrientation.LANDSCAPE);
-            fail("Expected MraidCommandException");
-        } catch (MraidCommandException e) {
-            // pass
-        }
-
-        assertThat(subject.getAllowOrientationChange()).isTrue();
-        assertThat(subject.getForceOrientation()).isEqualTo(MraidOrientation.NONE);
-    }
-
-    @Test
-    public void handleSetOrientationProperties_forExpandedBanner_shouldImmediatelyChangeScreenOrientation() throws MraidCommandException, PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        subject.handlePageLoad();
-        subject.handleExpand(null, false);
-
-        subject.handleSetOrientationProperties(true, MraidOrientation.LANDSCAPE);
-
-        assertThat(activity.getRequestedOrientation()).isEqualTo(ActivityInfo
-                .SCREEN_ORIENTATION_LANDSCAPE);
-    }
-
-    @Test
-    public void handleSetOrientationProperties_forExpandedBanner_beforeExpandIsCalled_shouldChangeScreenOrientationUponExpand() throws MraidCommandException, PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        subject.handlePageLoad();
-        subject.handleSetOrientationProperties(true, MraidOrientation.LANDSCAPE);
-
-        assertThat(activity.getRequestedOrientation()).isEqualTo(ActivityInfo
-                .SCREEN_ORIENTATION_PORTRAIT);
-
-        subject.handleExpand(null, false);
-
-        assertThat(activity.getRequestedOrientation()).isEqualTo(ActivityInfo
-                .SCREEN_ORIENTATION_LANDSCAPE);
-    }
-
-    @Test
-    public void handleSetOrientationProperties_forDefaultBanner_shouldNotChangeScreenOrientation() throws MraidCommandException, PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        subject.handlePageLoad();
-        // don't expand the banner
-
-        subject.handleSetOrientationProperties(true, MraidOrientation.LANDSCAPE);
-
-        assertThat(activity.getRequestedOrientation()).isEqualTo(ActivityInfo
-                .SCREEN_ORIENTATION_PORTRAIT);
-    }
-
-    @Test
-    public void handleSetOrientationProperties_forInterstitial_shouldChangeScreenOrientation() throws MraidCommandException, PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        subject = new MraidController(
-                activity, mockAdReport, PlacementType.INTERSTITIAL,
-                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
-
-        assertThat(activity.getRequestedOrientation()).isEqualTo(ActivityInfo
-                .SCREEN_ORIENTATION_PORTRAIT);
-
-        subject.handlePageLoad();
-        subject.handleSetOrientationProperties(true, MraidOrientation.LANDSCAPE);
-
-        assertThat(activity.getRequestedOrientation()).isEqualTo(ActivityInfo
-                .SCREEN_ORIENTATION_LANDSCAPE);
-    }
-
-    @Test
-    public void shouldAllowForceOrientation_withNoneOrientation_shouldReturnTrue() throws PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        final boolean result = subject.shouldAllowForceOrientation(MraidOrientation.NONE);
-
-        assertThat(result).isTrue();
-    }
-
-    @Test
-    public void shouldAllowForceOrientation_withApplicationContext_shouldReturnFalse() throws PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        subject = new MraidController(
-                activity.getApplicationContext(), mockAdReport, PlacementType.INLINE,
-                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
-
-        final boolean result = subject.shouldAllowForceOrientation(MraidOrientation.PORTRAIT);
-
-        assertThat(result).isFalse();
-    }
-
-    @Test(expected = MraidCommandException.class)
-    public void lockOrientation_withApplicationContext_shouldThrowMraidCommandException() throws MraidCommandException, PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        subject = new MraidController(
-                activity.getApplicationContext(), mockAdReport, PlacementType.INLINE,
-                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
-
-        subject.lockOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
-    }
-
-    @Test
-    public void lockOrientation_withActivityContext_shouldInitializeOriginalActivityOrientationAndCallActivitySetOrientation() throws MraidCommandException, PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        assertThat(subject.getOriginalActivityOrientation()).isNull();
-        assertThat(activity.getRequestedOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-
-        subject.lockOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-
-        assertThat(subject.getOriginalActivityOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-        assertThat(activity.getRequestedOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-    }
-
-    @Test
-    public void lockOrientation_subsequentTimes_shouldNotModifyOriginalActivityOrientation() throws MraidCommandException, PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        subject.lockOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-
-        assertThat(subject.getOriginalActivityOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-
-        subject.lockOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
-
-        assertThat(subject.getOriginalActivityOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-    }
-
-    @Test
-    public void applyOrientation_withLockedOrientation_withForceOrientationNone_withAllowOrientationChangeTrue_shouldResetOrientation() throws MraidCommandException, PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        assertThat(activity.getRequestedOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-
-        subject.lockOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
-
-        assertThat(activity.getRequestedOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
-
-        subject.handleSetOrientationProperties(true, MraidOrientation.NONE);
-        subject.applyOrientation();
-
-        assertThat(activity.getRequestedOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-    }
-
-    @Test
-    public void applyOrientation_withNoLockedOrientation_withForceOrientationNone_withAllowOrientationChangeTrue_shouldDoNothing() throws MraidCommandException, PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        assertThat(activity.getRequestedOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-
-        subject.handleSetOrientationProperties(true, MraidOrientation.NONE);
-        subject.applyOrientation();
-
-        assertThat(activity.getRequestedOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-    }
-
-    @Test
-    public void applyOrientation_withForcedOrientationTrue_shouldSetRequestedOrientationToForcedOrienation() throws MraidCommandException, PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        subject.handleSetOrientationProperties(true, MraidOrientation.LANDSCAPE);
-        subject.applyOrientation();
-
-        assertThat(activity.getRequestedOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
-    }
-
-    @Test
-    public void applyOrientation_withForcedOrientationFalse_shouldSetRequestedOrientationToForcedOrienation() throws MraidCommandException, PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        subject.handleSetOrientationProperties(false, MraidOrientation.LANDSCAPE);
-        subject.applyOrientation();
-
-        assertThat(activity.getRequestedOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
-    }
-
-    @Test
-    public void unapplyOrientation_withALockedOrientation_shouldReturnToOriginalOrientationAndResetOriginalActivityOrientation() throws MraidCommandException, PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        assertThat(subject.getOriginalActivityOrientation()).isNull();
-        assertThat(activity.getRequestedOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-
-        subject.lockOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
-
-        assertThat(subject.getOriginalActivityOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-        assertThat(activity.getRequestedOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
-
-        subject.unApplyOrientation();
-
-        assertThat(subject.getOriginalActivityOrientation()).isNull();
-        assertThat(activity.getRequestedOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-    }
-
-    @Test
-    public void unapplyOrientation_withoutLockedOrientation_shouldNotChangeRequestedOrientation()
-            throws PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        assertThat(subject.getOriginalActivityOrientation()).isNull();
-        assertThat(activity.getRequestedOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-
-        subject.unApplyOrientation();
-
-        assertThat(subject.getOriginalActivityOrientation()).isNull();
-        assertThat(activity.getRequestedOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-    }
-
-    @Test
-    public void destroy_shouldCancelLastMetricsRequest_shouldUnregisterBroadcastReceiver_shouldDetachAllBridges() {
-        subject.destroy();
-
-        verify(mockScreenMetricsWaiter).cancelLastRequest();
-        verify(mockOrientationBroadcastReceiver).unregister();
-        verify(mockBridge).detach();
-        verify(mockTwoPartBridge).detach();
-    }
-
-    @Test
-    public void destroy_withDefaultState_shouldSetMraidWebViewsToNull() {
-        subject.setViewStateForTesting(ViewState.DEFAULT);
-        assertThat(subject.getMraidWebView()).isNotNull();
-        // The two-part WebView is null by default
-        assertThat(subject.getTwoPartWebView()).isNull();
-
-        subject.destroy();
-
-        assertThat(subject.getMraidWebView()).isNull();
-        assertThat(subject.getTwoPartWebView()).isNull();
-    }
-
-    @Test
-    public void destroy_withExpandedState_shouldSetMraidWebViewsToNull()
-            throws MraidCommandException {
-        // Necessary to set up the webview before expanding. Also moves the state to DEFAULT.
-        subject.handlePageLoad();
-        assertThat(subject.getViewState()).isEqualTo(ViewState.DEFAULT);
-        subject.handleExpand(URI.create("http://two-part-url"), false);
-
-        assertThat(subject.getMraidWebView()).isNotNull();
-        assertThat(subject.getTwoPartWebView()).isNotNull();
-
-        subject.destroy();
-
-        assertThat(subject.getMraidWebView()).isNull();
-        assertThat(subject.getTwoPartWebView()).isNull();
-    }
-
-    @Test
-    public void destroy_afterDestroy_shouldNotThrowAnException() {
-        subject.destroy();
-        subject.destroy();
-
-        assertThat(subject.getMraidWebView()).isNull();
-        assertThat(subject.getTwoPartWebView()).isNull();
-    }
-
-    @Test
-    public void destroy_fromExpandedState_shouldRemoveCloseableAdContainerFromContentView()
-            throws MraidCommandException {
-        subject.handlePageLoad();
-        subject.handleExpand(null, false);
-
-        assertThat(rootView.getChildCount()).isEqualTo(1);
-
-        subject.destroy();
-
-        assertThat(rootView.getChildCount()).isEqualTo(0);
-    }
-
-    @Test
-    public void destroy_fromResizedState_shouldRemoveCloseableAdContainerFromContentView()
-            throws MraidCommandException {
-        subject.handlePageLoad();
-        subject.setRootViewSize(100, 100);
-        subject.handleResize(100, 100, 0, 0, ClosePosition.TOP_RIGHT, true);
-
-        assertThat(rootView.getChildCount()).isEqualTo(1);
-
-        subject.destroy();
-
-        assertThat(rootView.getChildCount()).isEqualTo(0);
-    }
-
-    private void setMockActivityInfo(final boolean activityInfoFound, int screenOrientation,
-            int configChanges) throws PackageManager.NameNotFoundException {
-        final ActivityInfo mockActivityInfo = mock(ActivityInfo.class);
-
-        mockActivityInfo.screenOrientation = screenOrientation;
-        mockActivityInfo.configChanges = configChanges;
-
-        final PackageManager mockPackageManager = mock(PackageManager.class);
-        doAnswer(new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
-                if (!activityInfoFound) {
-                    throw new PackageManager.NameNotFoundException("");
-                }
-
-                return mockActivityInfo;
-            }
-        }).when(mockPackageManager).getActivityInfo(any(ComponentName.class), anyInt());
-
-        when(activity.getPackageManager()).thenReturn(mockPackageManager);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java
deleted file mode 100644
index 5424e6f2..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java
+++ /dev/null
@@ -1,134 +0,0 @@
-package com.mopub.mraid;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.ResponseBodyInterstitialTest;
-
-import org.junit.Before;
-import org.junit.Ignore;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.shadows.ShadowActivity;
-import org.robolectric.shadows.ShadowLocalBroadcastManager;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
-import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-import static org.robolectric.Robolectric.shadowOf_;
-
-@RunWith(SdkTestRunner.class)
-public class MraidInterstitialTest extends ResponseBodyInterstitialTest {
-    private static final String EXPECTED_HTML_DATA = "<html></html>";
-    private long broadcastIdentifier;
-
-    @Mock CustomEventInterstitialListener customEventInterstitialListener;
-
-    private Map<String, Object> localExtras;
-    private Map<String, String> serverExtras;
-    private Context context;
-
-    @Before
-    public void setUp() throws Exception {
-        broadcastIdentifier = 2222;
-
-        localExtras = new HashMap<String, Object>();
-        serverExtras = new HashMap<String, String>();
-        serverExtras.put(HTML_RESPONSE_BODY_KEY, EXPECTED_HTML_DATA);
-        localExtras.put(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
-
-        context = Robolectric.buildActivity(Activity.class).create().get();
-
-        subject = new MraidInterstitial();
-    }
-
-    @Test
-    public void loadInterstitial_withMalformedServerExtras_shouldNotifyInterstitialFailed()
-            throws Exception {
-        serverExtras.remove(HTML_RESPONSE_BODY_KEY);
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras,
-                serverExtras);
-
-        verify(customEventInterstitialListener).onInterstitialFailed(NETWORK_INVALID_STATE);
-        verify(customEventInterstitialListener, never()).onInterstitialLoaded();
-    }
-
-    @Ignore
-    @Test
-    public void loadInterstitial_shouldNotifyInterstitialLoaded() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras,
-                serverExtras);
-
-        verify(customEventInterstitialListener).onInterstitialLoaded();
-    }
-
-    @Test
-    public void loadInterstitial_shouldConnectListenerToBroadcastReceiver() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras,
-                serverExtras);
-
-        Intent intent =
-                getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, broadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener).onInterstitialShown();
-
-        intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_CLICK, broadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener).onInterstitialClicked();
-
-        intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, broadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener).onInterstitialDismissed();
-    }
-
-    @Test
-    public void showInterstitial_shouldStartActivityWithIntent() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras,
-                serverExtras);
-        subject.showInterstitial();
-
-        ShadowActivity shadowActivity = shadowOf_(context);
-        Intent intent = shadowActivity.getNextStartedActivityForResult().intent;
-
-        assertThat(intent.getComponent().getClassName())
-                .isEqualTo("com.mopub.mobileads.MraidActivity");
-        assertThat(intent.getExtras().get(HTML_RESPONSE_BODY_KEY)).isEqualTo(EXPECTED_HTML_DATA);
-        assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-    }
-
-    @Test
-    public void onInvalidate_shouldDisconnectListenerToBroadcastReceiver() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras,
-                serverExtras);
-        subject.onInvalidate();
-
-        Intent intent;
-        intent = new Intent(ACTION_INTERSTITIAL_SHOW);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener, never()).onInterstitialShown();
-
-        intent = new Intent(ACTION_INTERSTITIAL_DISMISS);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener, never()).onInterstitialDismissed();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java
deleted file mode 100644
index 533d66b3..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java
+++ /dev/null
@@ -1,783 +0,0 @@
-package com.mopub.mraid;
-
-import android.Manifest;
-import android.annotation.TargetApi;
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.PackageManager;
-import android.content.pm.ResolveInfo;
-import android.os.Build;
-import android.os.Environment;
-import android.provider.CalendarContract;
-import android.view.View;
-import android.view.WindowManager;
-import android.widget.LinearLayout;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.FileUtils;
-import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
-import com.mopub.mobileads.test.support.ThreadUtils;
-import com.mopub.mraid.MraidNativeCommandHandler.MraidCommandFailureListener;
-
-import org.apache.http.HttpResponse;
-import org.apache.http.client.methods.HttpUriRequest;
-import org.hamcrest.BaseMatcher;
-import org.hamcrest.Description;
-import org.junit.Before;
-import org.junit.Ignore;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowAlertDialog;
-import org.robolectric.shadows.ShadowEnvironment;
-import org.robolectric.shadows.ShadowLog;
-import org.robolectric.shadows.ShadowToast;
-
-import java.io.File;
-import java.net.URI;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-
-import static android.content.DialogInterface.BUTTON_NEGATIVE;
-import static android.content.DialogInterface.BUTTON_POSITIVE;
-import static com.mopub.mraid.MraidNativeCommandHandler.ANDROID_CALENDAR_CONTENT_TYPE;
-import static java.io.File.separator;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.argThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(SdkTestRunner.class)
-public class MraidNativeCommandHandlerTest {
-    private static final String IMAGE_URI_VALUE = "file://tmp/expectedFile.jpg";
-    private static final int TIME_TO_PAUSE_FOR_NETWORK = 300;
-    private static final String FAKE_IMAGE_DATA = "imageFileData";
-    //XXX: Robolectric or JUNIT doesn't support the correct suffix ZZZZZ in the parse pattern, so replacing xx:xx with xxxx for time.
-    private static final String CALENDAR_START_TIME = "2013-08-14T20:00:00-0000";
-
-
-    @Mock MraidCommandFailureListener mraidCommandFailureListener;
-    private MraidNativeCommandHandler subject;
-    private Context context;
-    private Map<String, String> params;
-
-    private File expectedFile;
-    private File pictureDirectory;
-    private File fileWithoutExtension;
-    private TestHttpResponseWithHeaders response;
-
-
-    @Before
-    public void setUp() throws Exception {
-        subject = new MraidNativeCommandHandler();
-        context = Robolectric.buildActivity(Activity.class).create().get();
-
-        FileUtils.copyFile("etc/expectedFile.jpg", "/tmp/expectedFile.jpg");
-        expectedFile = new File(Environment.getExternalStorageDirectory(), "Pictures" + separator + "expectedFile.jpg");
-        pictureDirectory = new File(Environment.getExternalStorageDirectory(), "Pictures");
-        fileWithoutExtension = new File(pictureDirectory, "file");
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void showUserDownloadImageAlert_withActivityContext_shouldDisplayAlertDialog() throws Exception {
-        response = new TestHttpResponseWithHeaders(200, FAKE_IMAGE_DATA);
-
-        subject.storePicture(context, IMAGE_URI_VALUE, mraidCommandFailureListener);
-
-        AlertDialog alertDialog = ShadowAlertDialog.getLatestAlertDialog();
-        ShadowAlertDialog shadowAlertDialog = shadowOf(alertDialog);
-
-        assertThat(alertDialog.isShowing());
-
-        assertThat(shadowAlertDialog.getTitle()).isEqualTo("Save Image");
-        assertThat(shadowAlertDialog.getMessage()).isEqualTo("Download image to Picture gallery?");
-        assertThat(shadowAlertDialog.isCancelable()).isTrue();
-
-        assertThat(alertDialog.getButton(BUTTON_POSITIVE).hasOnClickListeners());
-        assertThat(alertDialog.getButton(BUTTON_NEGATIVE)).isNotNull();
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void showUserDownloadImageAlert_whenOkayClicked_shouldDownloadImage() throws Exception {
-        response = new TestHttpResponseWithHeaders(200, FAKE_IMAGE_DATA);
-        Robolectric.addPendingHttpResponse(response);
-
-        subject.storePicture(context, IMAGE_URI_VALUE, mraidCommandFailureListener);
-
-        ShadowAlertDialog.getLatestAlertDialog().getButton(BUTTON_POSITIVE).performClick();
-        ThreadUtils.pause(TIME_TO_PAUSE_FOR_NETWORK);
-
-        assertThat(expectedFile.exists()).isTrue();
-        assertThat(expectedFile.length()).isEqualTo(FAKE_IMAGE_DATA.length());
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void showUserDownloadImageAlert_whenCancelClicked_shouldDismissDialog() throws Exception {
-        response = new TestHttpResponseWithHeaders(200, FAKE_IMAGE_DATA);
-
-        subject.storePicture(context, IMAGE_URI_VALUE, mraidCommandFailureListener);
-
-        AlertDialog alertDialog = ShadowAlertDialog.getLatestAlertDialog();
-        ShadowAlertDialog shadowAlertDialog = shadowOf(alertDialog);
-
-        alertDialog.getButton(BUTTON_NEGATIVE).performClick();
-        assertThat(shadowAlertDialog.hasBeenDismissed()).isTrue();
-
-        assertThat(expectedFile.exists()).isFalse();
-        assertThat(expectedFile.length()).isEqualTo(0);
-    }
-
-    @Ignore("MRAID 2.0")
-    @Test
-    public void showUserDownloadImageAlert_withAppContext_shouldToastAndDownloadImage() throws Exception {
-        response = new TestHttpResponseWithHeaders(200, FAKE_IMAGE_DATA);
-        Robolectric.addPendingHttpResponse(response);
-
-        assertThat(ShadowToast.shownToastCount()).isEqualTo(0);
-
-        subject.storePicture(context.getApplicationContext(), IMAGE_URI_VALUE, mraidCommandFailureListener);
-        ThreadUtils.pause(TIME_TO_PAUSE_FOR_NETWORK);
-
-        assertThat(ShadowToast.shownToastCount()).isEqualTo(1);
-        assertThat(ShadowToast.getTextOfLatestToast()).isEqualTo("Downloading image to Picture gallery...");
-
-        Robolectric.runUiThreadTasks();
-
-        assertThat(expectedFile.exists()).isTrue();
-        assertThat(expectedFile.length()).isEqualTo(FAKE_IMAGE_DATA.length());
-    }
-
-    @Ignore("MRAID 2.0")
-    @Test
-    public void showUserDownloadImageAlert_withAppContext_whenDownloadImageFails_shouldDisplayFailureToastAndNotDownloadImage() throws Exception {
-        response = new TestHttpResponseWithHeaders(200, FAKE_IMAGE_DATA);
-        Robolectric.addPendingHttpResponse(response);
-
-        assertThat(ShadowToast.shownToastCount()).isEqualTo(0);
-
-        subject.storePicture(context, "this is an invalid image url and cannot be downloaded", mraidCommandFailureListener);
-        ThreadUtils.pause(TIME_TO_PAUSE_FOR_NETWORK);
-
-        assertThat(ShadowToast.shownToastCount()).isEqualTo(1);
-        assertThat(ShadowToast.getTextOfLatestToast()).isEqualTo("Downloading image to Picture gallery...");
-
-        Robolectric.runUiThreadTasks();
-
-        assertThat(ShadowToast.shownToastCount()).isEqualTo(2);
-        assertThat(ShadowToast.getTextOfLatestToast()).isEqualTo("Image failed to download.");
-
-        assertThat(expectedFile.exists()).isFalse();
-        assertThat(expectedFile.length()).isEqualTo(0);
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void showUserDownloadImageAlert_whenStorePictureNotSupported_shouldFireErrorEvent_andNotToastNorAlertDialog() throws Exception {
-        Robolectric.getShadowApplication().denyPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE);
-
-        subject.storePicture(context, "http://image.jpg", mraidCommandFailureListener);
-
-        assertThat(ShadowToast.shownToastCount()).isEqualTo(0);
-        assertThat(ShadowAlertDialog.getLatestAlertDialog()).isNull();
-        verify(mraidCommandFailureListener).onFailure(any(MraidCommandException.class));
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void showUserDownloadImageAlert_withMimeTypeAndNoFileExtension_shouldSavePictureWithMimeType() throws Exception {
-        String fileNameWithNoExtension = "https://www.somewhere.com/images/blah/file";
-
-        assertThatMimeTypeWasAddedCorrectly(
-                fileNameWithNoExtension,
-                "image/jpg",
-                "file.jpg",
-                ".jpg");
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void showUserDownloadImageAlert_withMultipleContentTypesAndNoFileExtension_shouldSavePictureWithMimeType() throws Exception {
-        String fileNameWithNoExtension = "https://www.somewhere.com/images/blah/file";
-
-        assertThatMimeTypeWasAddedCorrectly(
-                fileNameWithNoExtension,
-                "text/html; image/png",
-                "file.png",
-                ".png");
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void showUserDownloadImageAlert_withMimeTypeAndFileExtension_shouldSavePictureWithFileExtension() throws Exception {
-        String fileNameWithExtension = "https://www.somewhere.com/images/blah/file.extension";
-
-        assertThatMimeTypeWasAddedCorrectly(
-                fileNameWithExtension,
-                "image/extension",
-                "file.extension",
-                ".extension");
-
-        assertThat((expectedFile.getName()).endsWith(".extension.extension")).isFalse();
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void showUserDownloadImageAlert_withHttpUri_shouldRequestPictureFromNetwork() throws Exception {
-        response = new TestHttpResponseWithHeaders(200, "OK");
-        downloadImageForPendingResponse("https://www.google.com/images/srpr/logo4w.png", response);
-
-        HttpUriRequest latestRequest = (HttpUriRequest) Robolectric.getLatestSentHttpRequest();
-        assertThat(latestRequest.getURI()).isEqualTo(URI.create("https://www.google.com/images/srpr/logo4w.png"));
-    }
-
-    @Ignore("Mraid 2.0")
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
-    @Test
-    public void createCalendarEvent_withMinimumValidParams_atLeastICS_shouldCreateEventIntent() throws Exception {
-        setupCalendarParams();
-
-        subject.createCalendarEvent(context, params);
-
-        verify(mraidCommandFailureListener, never()).onFailure(any(MraidCommandException.class));
-
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-
-        assertThat(intent.getType()).isEqualTo(ANDROID_CALENDAR_CONTENT_TYPE);
-        assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(intent.getStringExtra(CalendarContract.Events.TITLE)).isNotNull();
-        assertThat(intent.getLongExtra(CalendarContract.EXTRA_EVENT_BEGIN_TIME, -1)).isNotEqualTo(-1);
-    }
-
-    @Ignore("Mraid 2.0")
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
-    @Test
-    public void createCalendarEvent_withoutSecondsOnStartDate_atLeastICS_shouldCreateEventIntent() throws Exception {
-        setupCalendarParams();
-        params.put("start", "2012-12-21T00:00-0500");
-
-        subject.createCalendarEvent(context, params);
-
-        verify(mraidCommandFailureListener, never()).onFailure(any(MraidCommandException.class));
-
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-
-        assertThat(intent.getType()).isEqualTo(ANDROID_CALENDAR_CONTENT_TYPE);
-        assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(intent.getStringExtra(CalendarContract.Events.TITLE)).isNotNull();
-        assertThat(intent.getLongExtra(CalendarContract.EXTRA_EVENT_BEGIN_TIME, -1)).isNotEqualTo(-1);
-    }
-
-    @Ignore("Mraid 2.0")
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
-    @Test
-    public void createCalendarEvent_withDailyRecurrence_shouldCreateCalendarIntent() throws Exception {
-        setupCalendarParams();
-        params.put("frequency", "daily");
-
-        subject.createCalendarEvent(context, params);
-
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(intent.getType()).isEqualTo(ANDROID_CALENDAR_CONTENT_TYPE);
-        assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=DAILY;");
-    }
-
-    @Ignore("Mraid 2.0")
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
-    @Test
-    public void createCalendarEvent_withDailyRecurrence_withInterval_shouldCreateCalendarIntent() throws Exception {
-        setupCalendarParams();
-        params.put("frequency", "daily");
-        params.put("interval", "2");
-
-        subject.createCalendarEvent(context, params);
-
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=DAILY;INTERVAL=2;");
-    }
-
-    @Ignore("Mraid 2.0")
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
-    @Test
-    public void createCalendarEvent_withWeeklyRecurrence_shouldCreateCalendarIntent() throws Exception {
-        setupCalendarParams();
-        params.put("frequency", "weekly");
-
-        subject.createCalendarEvent(context, params);
-
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=WEEKLY;");
-    }
-
-    @Ignore("Mraid 2.0")
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
-    @Test
-    public void createCalendarEvent_withWeeklyRecurrence_withInterval_withOutWeekday_shouldCreateCalendarIntent() throws Exception {
-        setupCalendarParams();
-        params.put("frequency", "weekly");
-        params.put("interval", "7");
-
-        subject.createCalendarEvent(context, params);
-
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=WEEKLY;INTERVAL=7;");
-    }
-
-    @Ignore("Mraid 2.0")
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
-    @Test
-    public void createCalendarEvent_withWeeklyRecurrence_onAllWeekDays_shouldCreateCalendarIntent() throws Exception {
-        setupCalendarParams();
-        params.put("frequency", "weekly");
-        params.put("daysInWeek", "0,1,2,3,4,5,6");
-
-        subject.createCalendarEvent(context, params);
-
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=WEEKLY;BYDAY=SU,MO,TU,WE,TH,FR,SA;");
-    }
-
-    @Ignore("Mraid 2.0")
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
-    @Test
-    public void createCalendarEvent_withWeeklyRecurrence_onDuplicateWeekDays_shouldCreateCalendarIntent() throws Exception {
-        setupCalendarParams();
-        params.put("frequency", "weekly");
-        params.put("daysInWeek", "3,2,3,3,7,0");
-
-        subject.createCalendarEvent(context, params);
-
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=WEEKLY;BYDAY=WE,TU,SU;");
-    }
-
-    @Ignore("Mraid 2.0")
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
-    @Test
-    public void createCalendarEvent_withWeeklyRecurrence_withInterval_withWeekDay_shouldCreateCalendarIntent() throws Exception {
-        setupCalendarParams();
-        params.put("frequency", "weekly");
-        params.put("interval", "1");
-        params.put("daysInWeek", "1");
-
-        subject.createCalendarEvent(context, params);
-
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=WEEKLY;INTERVAL=1;BYDAY=MO;");
-    }
-
-    @Ignore("Mraid 2.0")
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
-    @Test
-    public void createCalendarEvent_withDailyRecurrence_withWeeklyRecurrence_withMonthlyOccurence_shouldCreateDailyCalendarIntent() throws Exception {
-        setupCalendarParams();
-        params.put("frequency", "daily");
-        params.put("frequency", "daily");
-        params.put("frequency", "daily");
-        params.put("interval", "2");
-        params.put("daysInWeek", "1");
-
-        subject.createCalendarEvent(context, params);
-
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=DAILY;INTERVAL=2;");
-    }
-
-    @Ignore("Mraid 2.0")
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
-    @Test
-    public void createCalendarEvent_withMonthlyRecurrence_withOutInterval_shouldCreateCalendarIntent() throws Exception {
-        setupCalendarParams();
-        params.put("frequency", "monthly");
-
-        subject.createCalendarEvent(context, params);
-
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=MONTHLY;");
-    }
-
-    @Ignore("Mraid 2.0")
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
-    @Test
-    public void createCalendarEvent_withMonthlyRecurrence_withInterval_shouldCreateCalendarIntent() throws Exception {
-        setupCalendarParams();
-        params.put("frequency", "monthly");
-        params.put("interval", "2");
-
-        subject.createCalendarEvent(context, params);
-
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=MONTHLY;INTERVAL=2;");
-    }
-
-    @Ignore("Mraid 2.0")
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
-    @Test
-    public void createCalendarEvent_withMonthlyRecurrence_withOutInterval_withDaysOfMonth_shouldCreateCalendarIntent() throws Exception {
-        setupCalendarParams();
-        params.put("frequency", "monthly");
-        params.put("daysInMonth", "2,-15");
-
-        subject.createCalendarEvent(context, params);
-
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=MONTHLY;BYMONTHDAY=2,-15;");
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void createCalendarEvent_withMonthlyRecurrence_withInvalidDaysOfMonth_shouldNotCreateCalendarIntent() throws Exception {
-        setupCalendarParams();
-        params.put("frequency", "monthly");
-        params.put("daysInMonth", "55");
-
-        subject.createCalendarEvent(context, params);
-
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-
-        assertThat(intent).isNull();
-        assertThat(ShadowLog.getLogs().size()).isEqualTo(1);
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void createCalendarEvent_withWeeklyRecurrence_withInvalidDaysOfWeek_shouldNotCreateCalendarIntent() throws Exception {
-        setupCalendarParams();
-        params.put("frequency", "weekly");
-        params.put("daysInWeek", "-1,20");
-
-        subject.createCalendarEvent(context, params);
-
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-
-        assertThat(intent).isNull();
-        assertThat(ShadowLog.getLogs().size()).isEqualTo(1);
-    }
-
-    @Ignore("Mraid 2.0")
-    @Config(reportSdk = Build.VERSION_CODES.HONEYCOMB_MR2)
-    @Test
-    public void createCalendarEvent_beforeIcs_shouldFireErrorEvent() throws Exception {
-        subject.createCalendarEvent(context, params);
-
-        verify(mraidCommandFailureListener).onFailure(any(MraidCommandException.class));
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void createCalendarEvent_withInvalidDate_shouldFireErrorEvent() throws Exception {
-        params.put("start", "2013-08-14T09:00.-08:00");
-        params.put("description", "Some Event");
-
-        subject.createCalendarEvent(context, params);
-
-        verify(mraidCommandFailureListener).onFailure(any(MraidCommandException.class));
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void createCalendarEvent_withMissingParameters_shouldFireErrorEvent() throws Exception {
-        //it needs a start time
-        params.put("description", "Some Event");
-
-        subject.createCalendarEvent(context, params);
-
-        verify(mraidCommandFailureListener).onFailure(any(MraidCommandException.class));
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void createCalendarEvent_withNullDate_shouldFireErrorEvent() throws Exception {
-        params.put("start", null);
-        params.put("description", "Some Event");
-
-        subject.createCalendarEvent(context, params);
-
-        verify(mraidCommandFailureListener).onFailure(any(MraidCommandException.class));
-    }
-
-    @Ignore("Mraid 2.0")
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
-    @Test
-    public void
-    createCalendarEvent_withValidParamsAllExceptRecurrence_atLeastICS_shouldCreateEventIntent() throws Exception {
-        setupCalendarParams();
-        params.put("location", "my house");
-        params.put("end", "2013-08-14T22:01:01-0000");
-        params.put("summary", "some description actually");
-        params.put("transparency", "transparent");
-
-        subject.createCalendarEvent(context, params);
-
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-
-        assertThat(intent.getType()).isEqualTo(ANDROID_CALENDAR_CONTENT_TYPE);
-        assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(intent.getStringExtra(CalendarContract.Events.TITLE)).isNotNull();
-        assertThat(intent.getStringExtra(CalendarContract.Events.DESCRIPTION)).isNotNull();
-        assertThat(intent.getStringExtra(CalendarContract.Events.EVENT_LOCATION)).isNotNull();
-        assertThat(intent.getLongExtra(CalendarContract.EXTRA_EVENT_BEGIN_TIME, -1)).isNotEqualTo(-1);
-        assertThat(intent.getLongExtra(CalendarContract.EXTRA_EVENT_END_TIME, -1)).isNotEqualTo(-1);
-        assertThat(intent.getIntExtra(CalendarContract.Events.AVAILABILITY, -1)).isEqualTo(CalendarContract.Events.AVAILABILITY_FREE);
-    }
-
-    @Test
-    public void isTelAvailable_whenCanAcceptIntent_shouldReturnTrue() throws Exception {
-        context = createMockContextWithSpecificIntentData("tel", null, null, "android.intent.action.DIAL");
-
-        assertThat(subject.isTelAvailable(context)).isTrue();
-    }
-
-    @Test
-    public void isTelAvailable_whenCanNotAcceptIntent_shouldReturnFalse() throws Exception {
-        context = createMockContextWithSpecificIntentData("", null, null, "android.intent.action.DIAL");
-
-        assertThat(subject.isTelAvailable(context)).isFalse();
-    }
-
-    @Test
-    public void isSmsAvailable_whenCanAcceptIntent_shouldReturnTrue() throws Exception {
-        context = createMockContextWithSpecificIntentData("sms", null, null, "android.intent.action.VIEW");
-
-        assertThat(subject.isSmsAvailable(context)).isTrue();
-    }
-
-    @Test
-    public void isSmsAvailable_whenCanNotAcceptIntent_shouldReturnFalse() throws Exception {
-        context = createMockContextWithSpecificIntentData("", null, null, "android.intent.action.VIEW");
-
-        assertThat(subject.isSmsAvailable(context)).isFalse();
-    }
-
-    @Test
-    public void isStorePictureAvailable_whenPermissionDeclaredAndMediaMounted_shouldReturnTrue() throws Exception {
-        Robolectric.getShadowApplication().grantPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE);
-        ShadowEnvironment.setExternalStorageState(Environment.MEDIA_MOUNTED);
-
-        assertThat(subject.isStorePictureSupported(context)).isTrue();
-    }
-
-    @Test
-    public void isStorePictureAvailable_whenPermissionDenied_shouldReturnFalse() throws Exception {
-        Robolectric.getShadowApplication().denyPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE);
-        ShadowEnvironment.setExternalStorageState(Environment.MEDIA_MOUNTED);
-
-        assertThat(subject.isStorePictureSupported(context)).isFalse();
-    }
-
-    @Test
-    public void isStorePictureAvailable_whenMediaUnmounted_shouldReturnFalse() throws Exception {
-        Robolectric.getShadowApplication().grantPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE);
-        ShadowEnvironment.setExternalStorageState(Environment.MEDIA_UNMOUNTED);
-
-        assertThat(subject.isStorePictureSupported(context)).isFalse();
-    }
-
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
-    @Test
-    public void isCalendarAvailable_atLeastIcs_shouldReturnTrue() throws Exception {
-        context = createMockContextWithSpecificIntentData(null, null, ANDROID_CALENDAR_CONTENT_TYPE, "android.intent.action.INSERT");
-        assertThat(subject.isCalendarAvailable(context)).isTrue();
-    }
-
-    @Config(reportSdk = Build.VERSION_CODES.HONEYCOMB_MR2)
-    @Test
-    public void isCalendarAvailable_beforeIcs_shouldReturnFalse() throws Exception {
-        context = createMockContextWithSpecificIntentData(null, null, ANDROID_CALENDAR_CONTENT_TYPE, "android.intent.action.INSERT");
-        assertThat(subject.isCalendarAvailable(context)).isFalse();
-    }
-
-    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
-    @Test
-    public void isCalendarAvailable_atLeastIcs_butCanNotAcceptIntent_shouldReturnFalse() throws
-            Exception {
-        context = createMockContextWithSpecificIntentData(null, null, "vnd.android.cursor.item/NOPE", "android.intent.action.INSERT");
-        assertThat(subject.isCalendarAvailable(context)).isFalse();
-    }
-
-    @TargetApi(11)
-    @Test
-    public void isInlineVideoAvailable_whenViewsAreHardwareAccelerated_whenWindowIsHardwareAccelerated_whenApiLevelIsAtLeastHoneycombMR1_shouldReturnTrue() throws Exception {
-        Activity activity = Robolectric.buildActivity(Activity.class).create().get();
-        activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
-
-        View mockView = mock(View.class);
-        when(mockView.isHardwareAccelerated()).thenReturn(true);
-        when(mockView.getLayerType()).thenReturn(View.LAYER_TYPE_HARDWARE);
-
-        assertThat(subject.isInlineVideoAvailable(activity, mockView)).isTrue();
-    }
-
-    @TargetApi(11)
-    @Test
-    public void isInlineVideoAvailable_whenViewsAreHardwareAccelerated_whenWindowIsNotHardwareAccelerated_whenApiLevelIsAtLeastHoneycombMR1_shouldReturnFalse() throws Exception {
-        Activity activity = Robolectric.buildActivity(Activity.class).create().get();
-
-        View mockView = mock(View.class);
-        when(mockView.isHardwareAccelerated()).thenReturn(true);
-        when(mockView.getLayerType()).thenReturn(View.LAYER_TYPE_HARDWARE);
-
-        assertThat(subject.isInlineVideoAvailable(activity, mockView)).isFalse();
-    }
-
-    @Config(reportSdk = Build.VERSION_CODES.HONEYCOMB)
-    @TargetApi(11)
-    @Test
-    public void isInlineVideoAvailable_whenViewsAreHardwareAccelerated_whenWindowIsHardwareAccelerated_whenApiLevelIsLessThanHoneycombMR1_shouldReturnFalse() throws Exception {
-        Activity activity = Robolectric.buildActivity(Activity.class).create().get();
-        activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
-
-        View mockView = mock(View.class);
-        when(mockView.isHardwareAccelerated()).thenReturn(true);
-        when(mockView.getLayerType()).thenReturn(View.LAYER_TYPE_HARDWARE);
-
-        assertThat(subject.isInlineVideoAvailable(activity, mockView)).isFalse();
-    }
-
-    @TargetApi(11)
-    @Test
-    public void isInlineVideoAvailable_whenViewsAreNotHardwareAccelerated_whenWindowIsHardwareAccelerated_whenApiLevelIsAtLeastHoneycombMR1_shouldReturnFalse() throws Exception {
-        Activity activity = Robolectric.buildActivity(Activity.class).create().get();
-        activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
-
-        View mockView = mock(View.class);
-        when(mockView.isHardwareAccelerated()).thenReturn(false);
-        when(mockView.getLayerType()).thenReturn(View.LAYER_TYPE_HARDWARE);
-
-        assertThat(subject.isInlineVideoAvailable(activity, mockView)).isFalse();
-    }
-
-    @TargetApi(11)
-    @Test
-    public void isInlineVideoAvailable_whenViewParentIsNotHardwareAccelerated_whenWindowIsHardwareAccelerated_whenApiLevelIsAtLeastHoneycombMR1_shouldReturnFalse() throws Exception {
-        Activity activity = Robolectric.buildActivity(Activity.class).create().get();
-        activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
-
-        // ViewParent
-        LinearLayout mockLinearLayout = mock(LinearLayout.class);
-        when(mockLinearLayout.isHardwareAccelerated()).thenReturn(false);
-        when(mockLinearLayout.getLayerType()).thenReturn(View.LAYER_TYPE_HARDWARE);
-
-        // View
-        View mockView = mock(View.class);
-        when(mockView.isHardwareAccelerated()).thenReturn(true);
-        when(mockView.getLayerType()).thenReturn(View.LAYER_TYPE_HARDWARE);
-        when(mockView.getParent()).thenReturn(mockLinearLayout);
-
-        assertThat(subject.isInlineVideoAvailable(activity, mockView)).isFalse();
-    }
-
-    private static Context createMockContextWithSpecificIntentData(final String scheme, final String componentName, final String type, final String action) {
-        Context context = mock(Context.class);
-        PackageManager packageManager = mock(PackageManager.class);
-
-        List<ResolveInfo> resolveInfos = new ArrayList<ResolveInfo>();
-        resolveInfos.add(new ResolveInfo());
-
-        stub(context.getPackageManager()).toReturn(packageManager);
-
-        BaseMatcher intentWithSpecificData = new BaseMatcher() {
-            // check that the specific intent has the special data, i.e. "tel:", or a component name, or string type, based on a particular data
-
-            @Override
-            public boolean matches(Object item) {
-                if (item != null && item instanceof Intent ){
-                    boolean result = action != null || type != null || componentName != null || scheme != null;
-                    if (action != null) {
-                        if (((Intent) item).getAction() != null) {
-                            result = result && action.equals(((Intent) item).getAction());
-                        }
-                    }
-
-                    if (type != null) {
-                        if (((Intent) item).getType() != null) {
-                            result = result && type.equals(((Intent) item).getType());
-                        }
-                    }
-
-                    if (componentName != null) {
-                        if (((Intent) item).getComponent() != null) {
-                            result = result && componentName.equals(((Intent) item).getComponent().getClassName());
-                        }
-                    }
-
-                    if (scheme != null) {
-                        if (((Intent) item).getData() != null) {
-                            result = result && scheme.equals(((Intent) item).getData().getScheme());
-                        }
-                    }
-                    return result;
-                }
-                return false;
-            }
-
-            @Override
-            public void describeTo(Description description) {
-
-            }
-        };
-
-        // It is okay to query with specific intent or nothing, because by default, none of the query would normally any resolveInfo anyways
-        stub(packageManager.queryIntentActivities((Intent) argThat(intentWithSpecificData), eq(0))).toReturn(resolveInfos);
-        return context;
-    }
-
-    private void downloadImageForPendingResponse(String uri, HttpResponse response) throws Exception {
-        Robolectric.addPendingHttpResponse(response);
-
-        subject.storePicture(context, uri, mraidCommandFailureListener);
-
-        ThreadUtils.pause(TIME_TO_PAUSE_FOR_NETWORK);
-    }
-
-    private void assertThatMimeTypeWasAddedCorrectly(String originalFileName, String contentType,
-            String expectedFileName, String expectedExtension) throws Exception {
-        expectedFile = new File(pictureDirectory, expectedFileName);
-        response = new TestHttpResponseWithHeaders(200, FAKE_IMAGE_DATA);
-        response.addHeader(MraidNativeCommandHandler.MIME_TYPE_HEADER, contentType);
-
-        downloadImageForPendingResponse(originalFileName, response);
-
-        assertThat(expectedFile.exists()).isTrue();
-        assertThat(expectedFile.getName()).endsWith(expectedExtension);
-        assertThat(fileWithoutExtension.exists()).isFalse();
-    }
-
-    private void setupCalendarParams() {
-        //we need mock Context so that we can validate that isCalendarAvailable() is true
-        Context mockContext = createMockContextWithSpecificIntentData(null,
-                null, ANDROID_CALENDAR_CONTENT_TYPE, "android.intent.action.INSERT");
-
-        //but a mock context does't know how to startActivity(), so we stub it to use ShadowContext for starting activity
-        doAnswer(new Answer<Void>() {
-            public Void answer(InvocationOnMock invocation) throws Throwable {
-                if (!(invocation.getArguments()[0] instanceof Intent)) {
-                    throw new ClassCastException("For some reason you are not passing the calendar intent properly");
-                }
-                Context shadowContext = Robolectric.getShadowApplication().getApplicationContext();
-                shadowContext.startActivity((Intent) invocation.getArguments()[0]);
-                return null;
-            }
-        }).when(mockContext).startActivity(any(Intent.class));
-
-        params.put("description", "Some Event");
-        params.put("start", CALENDAR_START_TIME);
-    }
-}
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java
deleted file mode 100644
index fb0620b4..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java
+++ /dev/null
@@ -1,173 +0,0 @@
-package com.mopub.mraid;
-
-import android.app.Activity;
-import android.content.Context;
-import android.os.Bundle;
-import android.widget.ImageButton;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.EventForwardingBroadcastReceiver;
-
-import org.apache.http.HttpRequest;
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.shadows.ShadowImageButton;
-import org.robolectric.shadows.ShadowLocalBroadcastManager;
-import org.robolectric.shadows.ShadowVideoView;
-import org.robolectric.tester.org.apache.http.RequestMatcher;
-import org.robolectric.tester.org.apache.http.TestHttpResponse;
-
-import static android.view.View.GONE;
-import static android.view.View.VISIBLE;
-import static com.mopub.mobileads.BaseVideoPlayerActivity.VIDEO_URL;
-import static com.mopub.mobileads.BaseVideoViewController.BaseVideoViewControllerListener;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.getHtmlInterstitialIntentFilter;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(SdkTestRunner.class)
-public class MraidVideoViewControllerTest {
-    private Context context;
-    private Bundle bundle;
-    private MraidVideoViewController subject;
-    private BaseVideoViewControllerListener baseVideoViewControllerListener;
-    private EventForwardingBroadcastReceiver broadcastReceiver;
-
-    @Before
-    public void setUp() throws Exception {
-        context = new Activity();
-        bundle = new Bundle();
-        baseVideoViewControllerListener = mock(BaseVideoViewControllerListener.class);
-
-        bundle.putString(VIDEO_URL, "http://video_url");
-
-        Robolectric.getUiThreadScheduler().pause();
-        Robolectric.getBackgroundScheduler().pause();
-
-        Robolectric.addHttpResponseRule(new RequestMatcher() {
-            @Override
-            public boolean matches(HttpRequest request) {
-                return true;
-            }
-        }, new TestHttpResponse(200, "body"));
-
-        ShadowLocalBroadcastManager.getInstance(context).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
-    }
-
-    @After
-    public void tearDown() throws Exception {
-        Robolectric.getUiThreadScheduler().reset();
-        Robolectric.getBackgroundScheduler().reset();
-        Robolectric.clearPendingHttpResponses();
-
-        ShadowLocalBroadcastManager.getInstance(context).unregisterReceiver(broadcastReceiver);
-    }
-
-    @Test
-    public void constructor_shouldSetListenersAndVideoPath() throws Exception {
-        initializeSubject();
-        ShadowVideoView shadowSubject = shadowOf(subject.getVideoView());
-
-        assertThat(shadowSubject.getOnCompletionListener()).isNotNull();
-        assertThat(shadowSubject.getOnErrorListener()).isNotNull();
-
-        assertThat(shadowSubject.getVideoPath()).isEqualTo("http://video_url");
-        assertThat(subject.getVideoView().hasFocus()).isTrue();
-    }
-    
-    @Test
-    public void onCreate_shouldCreateAndHideCloseButton() throws Exception {
-        initializeSubject();
-        subject.onCreate();
-
-        ImageButton closeButton = getCloseButton();
-
-        assertThat(closeButton).isNotNull();
-        assertThat(getShadowImageButton(closeButton).getOnClickListener()).isNotNull();
-        assertThat(closeButton.getVisibility()).isEqualTo(GONE);
-    }
-
-    @Test
-    public void backButtonEnabled_shouldReturnTrue() throws Exception {
-        initializeSubject();
-
-        assertThat(subject.backButtonEnabled()).isTrue();
-    }
-
-    @Test
-    public void closeButton_onClick_shouldCallBaseVideoControllerListenerOnFinish() throws Exception {
-        initializeSubject();
-        subject.onCreate();
-
-        ImageButton closeButton = getCloseButton();
-
-        getShadowImageButton(closeButton).getOnClickListener().onClick(null);
-        verify(baseVideoViewControllerListener).onFinish();
-    }
-
-    @Test
-    public void onCompletionListener_shouldCallBaseVideoViewControllerListenerOnFinish() throws Exception {
-        initializeSubject();
-        subject.onCreate();
-
-        getShadowVideoView().getOnCompletionListener().onCompletion(null);
-
-        verify(baseVideoViewControllerListener).onFinish();
-    }
-
-    @Test
-    public void onCompletionListener_shouldShowCloseButton() throws Exception {
-        initializeSubject();
-        subject.onCreate();
-
-        getShadowVideoView().getOnCompletionListener().onCompletion(null);
-
-        assertThat(getCloseButton().getVisibility()).isEqualTo(VISIBLE);
-    }
-
-    @Test
-    public void onCompletionListener_withNullBaseVideoViewControllerListener_shouldNotCallOnFinish() throws Exception {
-    }
-
-    @Test
-    public void onErrorListener_shouldReturnFalseAndNotCallBaseVideoControllerListenerOnFinish() throws Exception {
-        initializeSubject();
-        subject.onCreate();
-
-        assertThat(getShadowVideoView().getOnErrorListener().onError(null, 0, 0)).isEqualTo(false);
-
-        verify(baseVideoViewControllerListener, never()).onFinish();
-    }
-
-    @Test
-    public void onErrorListener_shouldShowCloseButton() throws Exception {
-        initializeSubject();
-        subject.onCreate();
-
-        assertThat(getShadowVideoView().getOnErrorListener().onError(null, 0, 0)).isEqualTo(false);
-
-        assertThat(getCloseButton().getVisibility()).isEqualTo(VISIBLE);
-    }
-
-    private void initializeSubject() {
-        subject = new MraidVideoViewController(context, bundle, baseVideoViewControllerListener);
-    }
-
-    private ShadowVideoView getShadowVideoView() {
-        return shadowOf(subject.getVideoView());
-    }
-
-    ImageButton getCloseButton() {
-        return (ImageButton) subject.getLayout().getChildAt(1);
-    }
-
-    private ShadowImageButton getShadowImageButton(ImageButton imageButton) {
-        return (ShadowImageButton) shadowOf(imageButton);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java
deleted file mode 100644
index c8199d78..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java
+++ /dev/null
@@ -1,195 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.content.Context;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-
-@RunWith(SdkTestRunner.class)
-public class AdapterHelperTest {
-    private AdapterHelper subject;
-    private Activity context;
-    private int contentRowCount;
-    private int start;
-    private int interval;
-
-    @Before
-    public void setUp() {
-        context = new Activity();
-        start = 1;
-        interval = 2;
-        subject = new AdapterHelper(context, start, interval);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void constructor_whenPassedAnApplicationContext_shouldThrowIllegalArgumentException() {
-        new AdapterHelper(context.getApplicationContext(), start, interval);
-    }
-
-    @Test
-    public void getAdView_withNullActivityContext_shouldReturnEmptyViewWithApplicationContext() {
-        subject.clearActivityContext();
-        Context viewContext = subject.getAdView(null, null, mock(NativeResponse.class),
-                mock(ViewBinder.class),
-                null).getContext();
-        assertThat(viewContext).isEqualTo(context.getApplication());
-    }
-
-    @Test
-    public void adapterHelper_withContentRowCountOf10_shouldCalculateCorrectly() {
-        contentRowCount = 10;
-
-        start = 0;
-        interval = 2;
-        subject = new AdapterHelper(context, start, interval);
-
-//      acacacacacacacacacac
-        assertThat(subject.shiftedCount(contentRowCount)).isEqualTo(20);
-        validateRows(20, start, interval);
-        assertThat(subject.shiftedPosition(1)).isEqualTo(0);
-        assertThat(subject.shiftedPosition(3)).isEqualTo(1);
-        assertThat(subject.shiftedPosition(5)).isEqualTo(2);
-        assertThat(subject.shiftedPosition(7)).isEqualTo(3);
-        assertThat(subject.shiftedPosition(9)).isEqualTo(4);
-        assertThat(subject.shiftedPosition(11)).isEqualTo(5);
-        assertThat(subject.shiftedPosition(13)).isEqualTo(6);
-        assertThat(subject.shiftedPosition(15)).isEqualTo(7);
-        assertThat(subject.shiftedPosition(17)).isEqualTo(8);
-        assertThat(subject.shiftedPosition(19)).isEqualTo(9);
-
-        start = 0;
-        interval = 6;
-        subject = new AdapterHelper(context, start, interval);
-
-//      acccccaccccc
-        assertThat(subject.shiftedCount(contentRowCount)).isEqualTo(12);
-        validateRows(12, start, interval);
-        assertThat(subject.shiftedPosition(1)).isEqualTo(0);
-        assertThat(subject.shiftedPosition(2)).isEqualTo(1);
-        assertThat(subject.shiftedPosition(3)).isEqualTo(2);
-        assertThat(subject.shiftedPosition(4)).isEqualTo(3);
-        assertThat(subject.shiftedPosition(5)).isEqualTo(4);
-        assertThat(subject.shiftedPosition(7)).isEqualTo(5);
-        assertThat(subject.shiftedPosition(8)).isEqualTo(6);
-        assertThat(subject.shiftedPosition(9)).isEqualTo(7);
-        assertThat(subject.shiftedPosition(10)).isEqualTo(8);
-        assertThat(subject.shiftedPosition(11)).isEqualTo(9);
-
-        start = 0;
-        interval = 11;
-        subject = new AdapterHelper(context, start, interval);
-
-//      acccccccccc
-        assertThat(subject.shiftedCount(contentRowCount)).isEqualTo(11);
-        validateRows(11, start, interval);
-        assertThat(subject.shiftedPosition(1)).isEqualTo(0);
-        assertThat(subject.shiftedPosition(5)).isEqualTo(4);
-        assertThat(subject.shiftedPosition(10)).isEqualTo(9);
-
-        start = 0;
-        interval = 4;
-        subject = new AdapterHelper(context, start, interval);
-
-//      acccacccacccac
-        assertThat(subject.shiftedCount(contentRowCount)).isEqualTo(14);
-        validateRows(14, start, interval);
-
-        start = 5;
-        interval = 6;
-        subject = new AdapterHelper(context, start, interval);
-
-//      cccccaccccc
-        assertThat(subject.shiftedCount(contentRowCount)).isEqualTo(11);
-        validateRows(11, start, interval);
-        assertThat(subject.shiftedPosition(4)).isEqualTo(4);
-        assertThat(subject.shiftedPosition(6)).isEqualTo(5);
-        assertThat(subject.shiftedPosition(10)).isEqualTo(9);
-
-        start = 5;
-        interval = 5;
-        subject = new AdapterHelper(context, start, interval);
-
-//      cccccaccccac
-        assertThat(subject.shiftedCount(contentRowCount)).isEqualTo(12);
-        validateRows(12, start, interval);
-        assertThat(subject.shiftedPosition(6)).isEqualTo(5);
-        assertThat(subject.shiftedPosition(11)).isEqualTo(9);
-
-        start = 3;
-        interval = 4;
-        subject = new AdapterHelper(context, start, interval);
-
-//      cccacccacccac
-        assertThat(subject.shiftedCount(contentRowCount)).isEqualTo(13);
-        validateRows(13, start, interval);
-        assertThat(subject.shiftedPosition(0)).isEqualTo(0);
-        assertThat(subject.shiftedPosition(2)).isEqualTo(2);
-        assertThat(subject.shiftedPosition(12)).isEqualTo(9);
-
-        start = 10;
-        interval = 100;
-        subject = new AdapterHelper(context, start, interval);
-
-//      cccccccccc
-        assertThat(subject.shiftedCount(contentRowCount)).isEqualTo(10);
-        validateRows(10, start, interval);
-        assertThat(subject.shiftedPosition(3)).isEqualTo(3);
-        assertThat(subject.shiftedPosition(7)).isEqualTo(7);
-        assertThat(subject.shiftedPosition(9)).isEqualTo(9);
-
-        start = 0;
-        interval = 10;
-        subject = new AdapterHelper(context, start, interval);
-
-//      acccccccccac
-        assertThat(subject.shiftedCount(contentRowCount)).isEqualTo(12);
-        validateRows(12, start, interval);
-        assertThat(subject.shiftedPosition(1)).isEqualTo(0);
-        assertThat(subject.shiftedPosition(9)).isEqualTo(8);
-        assertThat(subject.shiftedPosition(11)).isEqualTo(9);
-    }
-
-    @Test
-    public void adapterHelper_withContentRowCountOf1_shouldCalculateCorrectly() {
-        contentRowCount = 1;
-        start = 0;
-        interval = 2;
-        subject = new AdapterHelper(context, start, interval);
-
-//      ac
-        assertThat(subject.shiftedCount(contentRowCount)).isEqualTo(2);
-        validateRows(2, start, interval);
-        assertThat(subject.shiftedPosition(1)).isEqualTo(0);
-
-        // We can still query for large numbers since the calculation assumes an infinite list
-        assertThat(subject.shiftedPosition(1001)).isEqualTo(500);
-
-        start = 1;
-        interval = 2;
-        subject = new AdapterHelper(context, start, interval);
-
-//      c
-        assertThat(subject.shiftedCount(contentRowCount)).isEqualTo(1);
-        validateRows(1, start, interval);
-        assertThat(subject.shiftedPosition(0)).isEqualTo(0);
-    }
-
-    private void validateRows(int totalRows, int start, int interval) {
-        for (int i = 0; i < totalRows; ++i) {
-            if (i == start) {
-                assertThat(subject.isAdPosition(i)).isTrue();
-            } else if (i > start && ((i - start) % (interval) == 0)) {
-                assertThat(subject.isAdPosition(i)).isTrue();
-            } else {
-                assertThat(subject.isAdPosition(i)).isFalse();
-            }
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/BaseForwardingNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/BaseForwardingNativeAdTest.java
deleted file mode 100644
index d9d5a191..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/BaseForwardingNativeAdTest.java
+++ /dev/null
@@ -1,94 +0,0 @@
-package com.mopub.nativeads;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-public class BaseForwardingNativeAdTest {
-
-    private BaseForwardingNativeAd subject;
-
-    @Before
-    public void setUp() throws Exception {
-        subject = new BaseForwardingNativeAd() {};
-    }
-
-    @Test
-    public void constructor_shouldInitializeMembers() throws Exception {
-        assertThat(subject.getImpressionMinPercentageViewed()).isEqualTo(50);
-        assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(1000);
-        assertThat(subject.getImpressionTrackers()).isEmpty();
-        assertThat(subject.getExtras()).isEmpty();
-    }
-
-    @Test
-    public void setImpressionMinTimeViewed_whenTimeIsGreaterThan0_shouldSetTime() throws Exception {
-        subject.setImpressionMinTimeViewed(250);
-        assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(250);
-    }
-
-    @Test
-    public void setImpressionMinTimeViewed_whenTimeIsLessThan0_shouldNotSetTime() throws Exception {
-        subject.setImpressionMinTimeViewed(250);
-        assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(250);
-
-        subject.setImpressionMinTimeViewed(-1);
-        assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(250);
-    }
-
-    @Test
-    public void setStarRating_withinValidRange_shouldSetStarRating() throws Exception {
-        subject.setStarRating(0.0);
-        assertThat(subject.getStarRating()).isEqualTo(0.0);
-
-        subject.setStarRating(5.0);
-        assertThat(subject.getStarRating()).isEqualTo(5.0);
-
-        subject.setStarRating(2.5);
-        assertThat(subject.getStarRating()).isEqualTo(2.5);
-    }
-
-    @Test
-    public void setStarRating_withNull_shouldSetStarRatingToNull() throws Exception {
-        // Setting star rating to 0 before each case, so we can detect when it gets set to null
-        final double initialStarRating = 0.0;
-
-        subject.setStarRating(initialStarRating);
-        subject.setStarRating(null);
-        assertThat(subject.getStarRating()).isEqualTo(null);
-    }
-
-    @Test
-    public void setStarRating_withNanOrInf_shouldNotSetStarRating() throws Exception {
-        // First, set star rating to a valid value
-        final double initialStarRating = 3.75;
-        subject.setStarRating(initialStarRating);
-
-        subject.setStarRating(Double.NaN);
-        assertThat(subject.getStarRating()).isEqualTo(initialStarRating);
-
-        subject.setStarRating(Double.POSITIVE_INFINITY);
-        assertThat(subject.getStarRating()).isEqualTo(initialStarRating);
-
-        subject.setStarRating(Double.NEGATIVE_INFINITY);
-        assertThat(subject.getStarRating()).isEqualTo(initialStarRating);
-    }
-
-    @Test
-    public void setStarRating_withValuesOutsideOfValidRange_shouldNotSetStarRating() throws Exception {
-        // First, set star rating to a valid value
-        final double initialStarRating = 4.9;
-        subject.setStarRating(initialStarRating);
-
-        subject.setStarRating(5.0001);
-        assertThat(subject.getStarRating()).isEqualTo(initialStarRating);
-
-        subject.setStarRating(-0.001);
-        assertThat(subject.getStarRating()).isEqualTo(initialStarRating);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ClickDestinationResolutionListenerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ClickDestinationResolutionListenerTest.java
deleted file mode 100644
index 42b94285..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ClickDestinationResolutionListenerTest.java
+++ /dev/null
@@ -1,135 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.content.pm.ResolveInfo;
-import android.net.Uri;
-
-import com.mopub.common.MoPubBrowser;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.robolectric.Robolectric;
-
-import java.util.Iterator;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-public class ClickDestinationResolutionListenerTest {
-
-    private Activity context;
-    private Iterator mockIterator;
-    private SpinningProgressView mockSpinningProgressView;
-    private ClickDestinationResolutionListener subject;
-
-    @Before
-    public void setUp() throws Exception {
-        context = spy(Robolectric.buildActivity(Activity.class).create().get());
-        when(context.getApplicationContext()).thenReturn(context);
-        mockIterator = mock(Iterator.class);
-        mockSpinningProgressView = mock(SpinningProgressView.class);
-
-        subject = new ClickDestinationResolutionListener(context, mockIterator,
-                mockSpinningProgressView);
-    }
-
-    @Test
-    public void onSuccess_withMoPubNativeBrowserUrl_shouldOpenExternalBrowserAndHideProgressView() {
-        subject.onSuccess("mopubnativebrowser://navigate?url=https%3A%2F%2Fwww.example.com");
-
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(intent.getDataString()).isEqualTo("https://www.example.com");
-        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
-        verify(mockSpinningProgressView).removeFromRoot();
-    }
-
-    @Test
-    public void onSuccess_withMalformedMoPubNativeBrowserUrl_shouldHideProgressViewButNotOpenExternalBrowser() {
-        // url2 is the wrong query parameter
-        subject.onSuccess("mopubnativebrowser://navigate?url2=https%3A%2F%2Fwww.example.com");
-
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
-        verify(mockSpinningProgressView).removeFromRoot();
-    }
-
-    @Test
-    public void onSuccess_withDeepLinkThatIsResolvable_shouldStartActionViewIntent_shouldRemoveSpinningProgressView() {
-        String deepLinkUrl = "appscheme://host";
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW,
-                Uri.parse(deepLinkUrl)), new ResolveInfo());
-
-        subject.onSuccess(deepLinkUrl);
-
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
-        assertThat(intent.getDataString()).isEqualTo("appscheme://host");
-        verify(mockSpinningProgressView).removeFromRoot();
-    }
-
-    @Test
-    public void onSuccess_withDeepLinkThatIsUnresolvable_shouldNotStartNewIntent_shouldRemoveSpinningProgressView() {
-        String deepLinkUrl = "appscheme://host";
-        // don't add any relevant ResolveInfos to the Robolectric packageManager
-
-        subject.onSuccess(deepLinkUrl);
-
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
-        verify(mockSpinningProgressView).removeFromRoot();
-    }
-
-    @Test
-    public void onSuccess_withAppStoreUrl_shouldStartAppStoreIntent_shouldRemoveSpinningProgressView() {
-        String appStoreUrl = "play.google.com";
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW,
-                Uri.parse(appStoreUrl)), new ResolveInfo());
-
-        subject.onSuccess(appStoreUrl);
-
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
-        assertThat(intent.getDataString()).isEqualTo("play.google.com");
-        verify(mockSpinningProgressView).removeFromRoot();
-    }
-
-    @Test
-    public void onSuccess_withHttpUrl_showOpenInMoPubBrowser_shouldRemoveSpinningProgressViewFromRoot() {
-        String httpUrl = "http://www.dotcom.com";
-
-        subject.onSuccess(httpUrl);
-
-        ArgumentCaptor<Intent> intentCaptor = ArgumentCaptor.forClass(Intent.class);
-        verify(context).startActivity(intentCaptor.capture());
-
-        Intent intent = intentCaptor.getValue();
-
-        assertThat(intent.getComponent().getPackageName()).isEqualTo("com.mopub.mobileads");
-        assertThat(intent.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser");
-        assertThat(intent.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(httpUrl);
-        verify(mockSpinningProgressView).removeFromRoot();
-    }
-
-    @Test
-    public void onSuccess_withHttpsUrl_showOpenInMoPubBrowser_shouldRemoveSpinningProgressViewFromRoot() {
-        String httpsUrl = "https://www.comdot.com";
-
-        subject.onSuccess(httpsUrl);
-
-        ArgumentCaptor<Intent> intentCaptor = ArgumentCaptor.forClass(Intent.class);
-        verify(context).startActivity(intentCaptor.capture());
-
-        Intent intent = intentCaptor.getValue();
-
-        assertThat(intent.getComponent().getPackageName()).isEqualTo("com.mopub.mobileads");
-        assertThat(intent.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser");
-        assertThat(intent.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(httpsUrl);
-        verify(mockSpinningProgressView).removeFromRoot();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/CustomEventNativeAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/CustomEventNativeAdapterTest.java
deleted file mode 100644
index 6a067014..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/CustomEventNativeAdapterTest.java
+++ /dev/null
@@ -1,83 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-
-import com.mopub.common.AdType;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.nativeads.test.support.TestCustomEventNativeFactory;
-import com.mopub.network.AdResponse;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import java.util.HashMap;
-
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class CustomEventNativeAdapterTest {
-
-    private Activity context;
-    private HashMap<String, Object> localExtras;
-    private CustomEventNative.CustomEventNativeListener mCustomEventNativeListener;
-    private CustomEventNative mCustomEventNative;
-    private HashMap<String, String> serverExtras;
-    private AdResponse testAdResponse;
-
-    @Before
-    public void setUp() throws Exception {
-        context = new Activity();
-
-        localExtras = new HashMap<String, Object>();
-        serverExtras = new HashMap<String, String>();
-        serverExtras.put("key", "value");
-
-        testAdResponse = new AdResponse.Builder()
-                .setAdType(AdType.NATIVE)
-                .setCustomEventClassName("com.mopub.nativeads.MoPubCustomEventNative")
-                .setResponseBody("body")
-                .setServerExtras(serverExtras)
-                .build();
-
-        mCustomEventNativeListener = mock(CustomEventNative.CustomEventNativeListener.class);
-
-        mCustomEventNative = TestCustomEventNativeFactory.getSingletonMock();
-    }
-
-    @Test
-    public void loadNativeAd_withValidInput_shouldCallLoadNativeAdOnTheCustomEvent() throws Exception {
-        CustomEventNativeAdapter.loadNativeAd(context, localExtras, testAdResponse, mCustomEventNativeListener);
-        verify(mCustomEventNative).loadNativeAd(context, mCustomEventNativeListener, localExtras, serverExtras);
-        verify(mCustomEventNativeListener, never()).onNativeAdFailed(any(NativeErrorCode.class));
-        verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(NativeAdInterface.class));
-    }
-
-    @Test
-    public void loadNativeAd_withInvalidClassName_shouldNotifyListenerOfOnNativeAdFailedAndReturn() throws Exception {
-        testAdResponse = testAdResponse.toBuilder()
-                .setCustomEventClassName("com.mopub.baaad.invalidinvalid123143")
-                .build();
-
-        CustomEventNativeAdapter.loadNativeAd(context, localExtras, testAdResponse, mCustomEventNativeListener);
-        verify(mCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_NOT_FOUND);
-        verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(NativeAdInterface.class));
-        verify(mCustomEventNative, never()).loadNativeAd(context, mCustomEventNativeListener, localExtras, serverExtras);
-    }
-
-    @Test
-    public void loadNativeAd_withInvalidCustomEventNativeData_shouldNotAddToServerExtras() throws Exception {
-        testAdResponse = testAdResponse.toBuilder()
-                .setServerExtras(null)
-                .build();
-
-        CustomEventNativeAdapter.loadNativeAd(context, localExtras, testAdResponse, mCustomEventNativeListener);
-        verify(mCustomEventNative).loadNativeAd(eq(context), eq(mCustomEventNativeListener), eq(localExtras), eq(new HashMap<String, String>()));
-        verify(mCustomEventNativeListener, never()).onNativeAdFailed(any(NativeErrorCode.class));
-        verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(NativeAdInterface.class));
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackerTest.java
deleted file mode 100644
index 0bba4e12..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackerTest.java
+++ /dev/null
@@ -1,305 +0,0 @@
-package com.mopub.nativeads;
-
-import android.os.Handler;
-import android.view.View;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.fest.util.Lists;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.shadows.ShadowSystemClock;
-
-import java.util.HashMap;
-
-import static com.mopub.nativeads.MoPubNative.MoPubNativeListener;
-import static com.mopub.nativeads.VisibilityTracker.VisibilityChecker;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-public class ImpressionTrackerTest {
-    private ImpressionTracker subject;
-    private TimestampWrapper<NativeResponse> timeStampWrapper;
-    private HashMap<View, NativeResponse> trackedViews;
-    private HashMap<View, TimestampWrapper<NativeResponse>> pollingViews;
-
-    @Mock private NativeResponse nativeResponse;
-    @Mock private NativeResponse nativeResponse2;
-    @Mock private MoPubNativeListener moPubNativeListener;
-    @Mock private VisibilityTracker visibilityTracker;
-    @Mock private Handler handler;
-    @Mock private View view;
-    @Mock private View view2;
-
-    @Before
-    public void setUp() {
-        view = VisibilityTrackerTest.createViewMock(View.VISIBLE, 100, 100, 100, 100, true, true);
-        view2 = VisibilityTrackerTest.createViewMock(View.VISIBLE, 100, 100, 100, 100, true, true);
-
-        pollingViews = new HashMap<View, TimestampWrapper<NativeResponse>>(10);
-        trackedViews = new HashMap<View, NativeResponse>(10);
-        final VisibilityChecker visibilityChecker = new VisibilityChecker();
-        subject = new ImpressionTracker(trackedViews, pollingViews, visibilityChecker,
-                visibilityTracker, handler);
-
-        timeStampWrapper = new TimestampWrapper<NativeResponse>(nativeResponse);
-
-        when(nativeResponse.getImpressionMinPercentageViewed()).thenReturn(50);
-        when(nativeResponse.getImpressionMinTimeViewed()).thenReturn(1000);
-        when(nativeResponse2.getImpressionMinPercentageViewed()).thenReturn(50);
-        when(nativeResponse2.getImpressionMinTimeViewed()).thenReturn(1000);
-
-        // XXX We need this to ensure that our SystemClock starts
-        ShadowSystemClock.uptimeMillis();
-    }
-
-    @Test
-    public void addView_shouldAddViewToTrackedViews_shouldAddViewToVisibilityTracker() {
-        subject.addView(view, nativeResponse);
-
-        assertThat(trackedViews).hasSize(1);
-        assertThat(trackedViews.get(view)).isEqualTo(nativeResponse);
-        verify(visibilityTracker).addView(view, nativeResponse.getImpressionMinPercentageViewed());
-    }
-
-    @Test
-    public void addView_withRecordedImpression_shouldNotAddView() {
-        when(nativeResponse.getRecordedImpression()).thenReturn(true);
-
-        subject.addView(view, nativeResponse);
-
-        assertThat(trackedViews).hasSize(0);
-        verify(visibilityTracker, never())
-                .addView(view, nativeResponse.getImpressionMinPercentageViewed());
-    }
-
-    @Test
-    public void addView_withDestroyedNativeResponse_shouldNotAddView() {
-        when(nativeResponse.isDestroyed()).thenReturn(true);
-
-        subject.addView(view, nativeResponse);
-
-        assertThat(trackedViews).isEmpty();
-        verify(visibilityTracker, never())
-                .addView(view, nativeResponse.getImpressionMinPercentageViewed());
-    }
-
-    @Test
-    public void addView_withDifferentNativeResponse_shouldRemoveFromPollingViews() {
-        subject.addView(view, nativeResponse);
-
-        assertThat(trackedViews).hasSize(1);
-        assertThat(trackedViews.get(view)).isEqualTo(nativeResponse);
-        verify(visibilityTracker).addView(view, nativeResponse.getImpressionMinPercentageViewed());
-
-        pollingViews.put(view, timeStampWrapper);
-
-        subject.addView(view, nativeResponse2);
-
-        assertThat(trackedViews).hasSize(1);
-        assertThat(trackedViews.get(view)).isEqualTo(nativeResponse2);
-        assertThat(pollingViews).isEmpty();
-        verify(visibilityTracker, times(2))
-                .addView(view, nativeResponse.getImpressionMinPercentageViewed());
-    }
-
-    @Test
-    public void addView_withDifferentAlreadyImpressedNativeResponse_shouldRemoveFromPollingViews_shouldNotTrack() {
-        when(nativeResponse2.getRecordedImpression()).thenReturn(true);
-
-        subject.addView(view, nativeResponse);
-
-        assertThat(trackedViews).hasSize(1);
-        assertThat(trackedViews.get(view)).isEqualTo(nativeResponse);
-        verify(visibilityTracker).addView(view, nativeResponse.getImpressionMinPercentageViewed());
-
-        pollingViews.put(view, timeStampWrapper);
-
-        subject.addView(view, nativeResponse2);
-
-        assertThat(trackedViews).hasSize(0);
-        assertThat(trackedViews.get(view)).isNull();
-        assertThat(pollingViews).isEmpty();
-        verify(visibilityTracker).addView(view, nativeResponse.getImpressionMinPercentageViewed());
-    }
-
-    @Test
-    public void addView_withSameNativeResponse_shouldNotAddView() {
-        subject.addView(view, nativeResponse);
-
-        assertThat(trackedViews).hasSize(1);
-        assertThat(trackedViews.get(view)).isEqualTo(nativeResponse);
-        verify(visibilityTracker).addView(view, nativeResponse.getImpressionMinPercentageViewed());
-
-        pollingViews.put(view, timeStampWrapper);
-
-        subject.addView(view, nativeResponse);
-
-        assertThat(trackedViews).hasSize(1);
-        assertThat(trackedViews.get(view)).isEqualTo(nativeResponse);
-        assertThat(pollingViews.keySet()).containsOnly(view);
-
-        // Still only one call
-        verify(visibilityTracker).addView(view, nativeResponse.getImpressionMinPercentageViewed());
-    }
-
-    @Test
-    public void removeView_shouldRemoveViewFromViewTrackedViews_shouldRemoveViewFromPollingMap_shouldRemoveViewFromVisibilityTracker() {
-        trackedViews.put(view, nativeResponse);
-        pollingViews.put(view, new TimestampWrapper<NativeResponse>(nativeResponse));
-        visibilityTracker.addView(view, nativeResponse.getImpressionMinPercentageViewed());
-
-        subject.removeView(view);
-
-        assertThat(trackedViews).isEmpty();
-        assertThat(pollingViews).isEmpty();
-        verify(visibilityTracker).removeView(view);
-    }
-
-    @Test
-    public void clear_shouldClearViewTrackedViews_shouldClearPollingViews_shouldClearVisibilityTracker_shouldClearPollHandler() {
-        trackedViews.put(view, nativeResponse);
-        trackedViews.put(view2, nativeResponse);
-        pollingViews.put(view, timeStampWrapper);
-        pollingViews.put(view2, timeStampWrapper);
-        visibilityTracker.addView(view, nativeResponse.getImpressionMinPercentageViewed());
-        visibilityTracker.addView(view2, nativeResponse.getImpressionMinPercentageViewed());
-
-        subject.clear();
-
-        assertThat(trackedViews).isEmpty();
-        assertThat(pollingViews).isEmpty();
-        verify(visibilityTracker).clear();
-        verify(handler).removeMessages(0);
-    }
-    
-    @Test
-    public void destroy_shouldCallClear_shouldDestroyVisibilityTracker_shouldSetVisibilityTrackerListenerToNull() throws Exception {
-        trackedViews.put(view, nativeResponse);
-        trackedViews.put(view2, nativeResponse);
-        pollingViews.put(view, timeStampWrapper);
-        pollingViews.put(view2, timeStampWrapper);
-        visibilityTracker.addView(view, nativeResponse.getImpressionMinPercentageViewed());
-        visibilityTracker.addView(view2, nativeResponse.getImpressionMinPercentageViewed());
-        assertThat(subject.getVisibilityTrackerListener()).isNotNull();
-
-        subject.destroy();
-
-        assertThat(trackedViews).isEmpty();
-        assertThat(pollingViews).isEmpty();
-        verify(visibilityTracker).clear();
-        verify(handler).removeMessages(0);
-
-        verify(visibilityTracker).destroy();
-        assertThat(subject.getVisibilityTrackerListener()).isNull();
-    }
-
-    @Test
-    public void scheduleNextPoll_shouldPostDelayedThePollingRunnable() {
-        when(handler.hasMessages(0)).thenReturn(false);
-
-        subject.scheduleNextPoll();
-
-        verify(handler).postDelayed(any(ImpressionTracker.PollingRunnable.class), eq((long) 250));
-    }
-
-    @Test
-    public void scheduleNextPoll_withMessages_shouldNotPostDelayedThePollingRunnable() {
-        when(handler.hasMessages(0)).thenReturn(true);
-
-        subject.scheduleNextPoll();
-
-        verify(handler, never())
-                .postDelayed(any(ImpressionTracker.PollingRunnable.class), eq((long) 250));
-    }
-
-    @Test
-    public void visibilityTrackerListener_onVisibilityChanged_withVisibleViews_shouldAddViewToPollingViews_shouldScheduleNextPoll() {
-        subject.addView(view, nativeResponse);
-
-        assertThat(pollingViews).isEmpty();
-
-        subject.getVisibilityTrackerListener()
-                .onVisibilityChanged(Lists.newArrayList(view), Lists.<View>newArrayList());
-
-        assertThat(pollingViews.keySet()).containsOnly(view);
-        verify(handler).postDelayed(any(ImpressionTracker.PollingRunnable.class), eq((long) 250));
-    }
-
-    @Test
-    public void visibilityTrackerListener_onVisibilityChanged_withVisibleViews_shouldRemoveViewFromPollingViews() {
-        subject.addView(view, nativeResponse);
-        subject.getVisibilityTrackerListener()
-                .onVisibilityChanged(Lists.newArrayList(view), Lists.<View>newArrayList());
-
-
-        assertThat(trackedViews.keySet()).containsOnly(view);
-        assertThat(pollingViews.keySet()).containsOnly(view);
-
-        subject.getVisibilityTrackerListener()
-                .onVisibilityChanged(Lists.<View>newArrayList(), Lists.newArrayList(view));
-
-        assertThat(trackedViews.keySet()).containsOnly(view);
-        assertThat(pollingViews).isEmpty();
-    }
-
-    @Test
-    public void pollingRunnableRun_whenLessThanOneSecondHasElapsed_shouldNotTrackImpression_shouldScheduleNextPoll() {
-        // Force the last viewed timestamp to be a known value
-        timeStampWrapper.mCreatedTimestamp = 5555;
-        pollingViews.put(view, timeStampWrapper);
-
-        // We progress 999 milliseconds
-        Robolectric.getUiThreadScheduler().advanceBy(5555 + 999);
-        subject.new PollingRunnable().run();
-
-        verify(nativeResponse, never()).recordImpression(view);
-
-        assertThat(pollingViews.keySet()).containsOnly(view);
-        verify(handler).postDelayed(any(ImpressionTracker.PollingRunnable.class), eq((long) 250));
-    }
-
-    @Test
-    public void pollingRunnableRun_whenMoreThanOneSecondHasElapsed_shouldTrackImpression_shouldNotScheduleNextPoll() {
-        // Force the last viewed timestamp to be a known value
-        timeStampWrapper.mCreatedTimestamp = 5555;
-        pollingViews.put(view, timeStampWrapper);
-
-        // We progress 1000 milliseconds
-        Robolectric.getUiThreadScheduler().advanceBy(5555 + 1000);
-        subject.new PollingRunnable().run();
-
-        verify(nativeResponse).recordImpression(view);
-
-        assertThat(pollingViews).isEmpty();
-        verify(handler, never())
-                .postDelayed(any(ImpressionTracker.PollingRunnable.class), eq((long) 250));
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void pollingRunnableRun_whenWrapperIsNull_shouldThrowNPE() {
-        pollingViews.put(view, null);
-        subject.new PollingRunnable().run();
-
-        verify(nativeResponse, never()).recordImpression(view);
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void pollingRunnableRun_whenNativeResponseIsNull_shouldThrowNPE() {
-        // This doesn't normally happen; perhaps we're being overly defensive
-        pollingViews.put(view, new TimestampWrapper<NativeResponse>(null));
-
-        subject.new PollingRunnable().run();
-
-        verify(nativeResponse, never()).recordImpression(view);
-    }
-}
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java
deleted file mode 100644
index 34fc4be5..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java
+++ /dev/null
@@ -1,528 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.database.DataSetObserver;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.AdapterView;
-import android.widget.AdapterView.OnItemClickListener;
-import android.widget.AdapterView.OnItemLongClickListener;
-import android.widget.AdapterView.OnItemSelectedListener;
-import android.widget.ArrayAdapter;
-import android.widget.ListView;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Mock;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@Config(manifest=Config.NONE)
-@RunWith(SdkTestRunner.class)
-public class MoPubAdAdapterTest {
-    private static final int AD_POSITION = 1;
-
-    @Mock
-    private MoPubStreamAdPlacer mockStreamAdPlacer;
-    @Mock
-    private NativeAdData mockNativeAdData;
-    @Mock
-    private View mockAdView;
-    @Mock
-    private VisibilityTracker mockVisibilityTracker;
-    @Mock
-    private MoPubNativeAdLoadedListener mockAdLoadedListener;
-    @Mock
-    private DataSetObserver mockDataSetObserver;
-    @Mock
-    private RequestParameters mockRequestParameters;
-    @Mock
-    private MoPubAdRenderer mockAdRenderer;
-    @Mock
-    private ListView mockListView;
-    @Mock
-    private OnItemClickListener mockOnItemClickListener;
-    @Mock
-    private OnItemLongClickListener mockOnItemLongClickListener;
-    @Mock
-    private OnItemSelectedListener mockOnItemSelectedListener;
-    @Mock
-    private View mockItemView;
-
-    private long originalItemId = 0;
-    private boolean originalHasStableIds = false;
-
-    private int originalItemViewType = 0;
-    private int originalViewTypeCount = 1;
-    private boolean originalItemsAreEnabled = false;
-    private ArrayAdapter<String> originalAdapter;
-    private MoPubAdAdapter subject;
-
-    @Before
-    public void setup() {
-        // Set up original adapter with 2 items
-        Activity activity = Robolectric.buildActivity(Activity.class).create().get();
-        originalAdapter = new ArrayAdapter<String>(activity, android.R.layout.simple_list_item_1) {
-            @Override
-            public boolean isEnabled(final int position) {
-                return originalItemsAreEnabled;
-            }
-
-            @Override
-            public long getItemId(final int position) {
-                return originalItemId;
-            }
-
-            @Override
-            public boolean hasStableIds() {
-                return originalHasStableIds;
-            }
-
-            @Override
-            public int getItemViewType(final int position) {
-                return originalItemViewType;
-            }
-
-            @Override
-            public int getViewTypeCount() {
-                return originalViewTypeCount;
-            }
-        };
-        originalAdapter.add("ITEM 1");
-        originalAdapter.add("ITEM 2");
-
-        subject = new MoPubAdAdapter(mockStreamAdPlacer, originalAdapter, mockVisibilityTracker);
-
-        // Reset because the constructor interacts with the stream ad placer, and we don't want
-        // to worry about verifying those changes in tests.
-        reset(mockStreamAdPlacer);
-
-        // Mock some simple adjustment behavior for tests. This is creating an ad placer that
-        // emulates a content item followed by an ad item, then another content item.
-        when(mockStreamAdPlacer.getAdData(AD_POSITION)).thenReturn(mockNativeAdData);
-        when(mockStreamAdPlacer.getAdView(eq(AD_POSITION), any(View.class), any(ViewGroup.class))).thenReturn(mockAdView);
-        when(mockStreamAdPlacer.isAd(anyInt())).thenAnswer(new Answer<Boolean>() {
-            @Override
-            public Boolean answer(final InvocationOnMock invocation) throws Throwable {
-                int position = (Integer)invocation.getArguments()[0];
-                return position == AD_POSITION;
-            }
-        });
-        when(mockStreamAdPlacer.getOriginalPosition(anyInt())).thenAnswer(new Answer<Integer>() {
-            @Override
-            public Integer answer(final InvocationOnMock invocation) throws Throwable {
-                int originalPosition = (Integer)invocation.getArguments()[0];
-                return originalPosition < AD_POSITION ? originalPosition : originalPosition - 1;
-            }
-        });
-        when(mockStreamAdPlacer.getAdViewType(anyInt())).thenAnswer(new Answer<Integer>() {
-            @Override
-            public Integer answer(final InvocationOnMock invocation) throws Throwable {
-                int originalPosition = (Integer)invocation.getArguments()[0];
-                return originalPosition == AD_POSITION ? 1 : MoPubStreamAdPlacer.CONTENT_VIEW_TYPE;
-            }
-        });
-        when(mockStreamAdPlacer.getAdjustedPosition(anyInt())).thenAnswer(new Answer<Integer>() {
-            @Override
-            public Integer answer(final InvocationOnMock invocation) throws Throwable {
-                int originalPosition = (Integer)invocation.getArguments()[0];
-                return originalPosition < AD_POSITION ? originalPosition : originalPosition + 1;
-            }
-        });
-        when(mockStreamAdPlacer.getAdjustedCount(anyInt())).thenAnswer(new Answer<Integer>() {
-            @Override
-            public Integer answer(final InvocationOnMock invocation) throws Throwable {
-                int originalCount = (Integer)invocation.getArguments()[0];
-                return originalCount < AD_POSITION ? originalCount : originalCount + 1;
-            }
-        });
-    }
-
-    @Test
-    public void originalAdapterChange_shouldNotifyDataSetChanged() {
-        subject.registerDataSetObserver(mockDataSetObserver);
-
-        originalAdapter.notifyDataSetChanged();
-
-        verify(mockDataSetObserver).onChanged();
-    }
-
-    @Test
-    public void originalAdapterInvalidated_shouldNotifyDataSetInvalidated() {
-        subject.registerDataSetObserver(mockDataSetObserver);
-
-        originalAdapter.notifyDataSetInvalidated();
-
-        verify(mockDataSetObserver).onInvalidated();
-    }
-
-    @Test
-    public void registerAdRenderer_shouldCallRegisterAdRendererOnAdPlacer() {
-        subject.registerAdRenderer(mockAdRenderer);
-
-        verify(mockStreamAdPlacer).registerAdRenderer(mockAdRenderer);
-    }
-
-    @Test
-    public void registerAdRenderer_withNull_shouldNotCallAdPlacer() {
-        subject.registerAdRenderer(null);
-
-        verify(mockStreamAdPlacer, never()).registerAdRenderer(any(MoPubAdRenderer.class));
-    }
-
-
-    @Test
-    public void setAdLoadedListener_handleAdLoaded_shouldCallCallback_shouldCallObserver() {
-        subject.setAdLoadedListener(mockAdLoadedListener);
-        subject.registerDataSetObserver(mockDataSetObserver);
-
-        subject.handleAdLoaded(8);
-
-        verify(mockAdLoadedListener).onAdLoaded(8);
-        verify(mockDataSetObserver).onChanged();
-    }
-
-    @Test
-    public void setAdLoadedListener_handleAdRemoved_shouldCallCallback_shouldCallObserver() {
-        subject.setAdLoadedListener(mockAdLoadedListener);
-        subject.registerDataSetObserver(mockDataSetObserver);
-
-        subject.handleAdRemoved(10);
-
-        verify(mockAdLoadedListener).onAdRemoved(10);
-        verify(mockDataSetObserver).onChanged();
-    }
-
-    @Test
-    public void loadAds_shouldCallLoadAdsOnAdPlacer() {
-        subject.loadAds("AD_UNIT_ID");
-
-        verify(mockStreamAdPlacer).loadAds("AD_UNIT_ID");
-
-        subject.loadAds("AD_UNIT_ID", mockRequestParameters);
-
-        verify(mockStreamAdPlacer).loadAds("AD_UNIT_ID", mockRequestParameters);
-    }
-
-    @Test
-    public void isAd_shouldCallIsAdOnAdPlacer() {
-        boolean isAd = subject.isAd(AD_POSITION);
-
-        assertThat(isAd).isTrue();
-
-        isAd = subject.isAd(AD_POSITION + 1);
-
-        assertThat(isAd).isFalse();
-
-        verify(mockStreamAdPlacer, times(2)).isAd(anyInt());
-    }
-
-    @Test
-    public void clearAds_shouldCallClearAdsOnAdPlacer() {
-        subject.clearAds();
-
-        verify(mockStreamAdPlacer).clearAds();
-    }
-
-    @Test
-    public void destroy_shouldDestroyStreamAdPlacer_shouldDestroyVisibilityTracker() {
-        subject.destroy();
-
-        verify(mockStreamAdPlacer).destroy();
-        verify(mockVisibilityTracker).destroy();
-    }
-
-    @Test
-    public void isEnabled_adPosition_shouldReturnTrue() {
-        boolean isEnabled = subject.isEnabled(AD_POSITION);
-
-        assertThat(isEnabled).isTrue();
-    }
-
-    @Test
-    public void isEnabled_withNonAdPosition_shouldUseOriginalAdapter() {
-        originalItemsAreEnabled = false;
-        boolean isEnabled = subject.isEnabled(AD_POSITION + 1);
-
-        assertThat(isEnabled).isFalse();
-
-        originalItemsAreEnabled = true;
-        isEnabled = subject.isEnabled(AD_POSITION + 1);
-
-        assertThat(isEnabled).isTrue();
-    }
-
-    @Test
-    public void getItem_withAdPosition_shouldReturnAd_shouldGetAdDataOnCallAdPlacer() {
-        Object actualItem = subject.getItem(AD_POSITION);
-
-        assertThat(actualItem).isEqualTo(mockNativeAdData);
-
-        verify(mockStreamAdPlacer).getAdData(AD_POSITION);
-    }
-
-    @Test
-    public void getItem_withNonAdPosition_shouldCallGetOriginalPositionOnAdPlacer() {
-        Object actualItem = subject.getItem(AD_POSITION + 1);
-
-        assertThat(actualItem).isNotEqualTo(mockNativeAdData);
-
-        verify(mockStreamAdPlacer).getOriginalPosition(AD_POSITION + 1);
-    }
-
-    @Test
-    public void getCount_shouldCallGetAdjustedCountOnAdPlacer() {
-        int actualCount = subject.getCount();
-
-        assertThat(actualCount).isEqualTo(3);
-
-        verify(mockStreamAdPlacer).getAdjustedCount(anyInt());
-    }
-
-    @Test
-    public void getItemId_withAdPosition_shouldBeNegative() {
-        long itemId = subject.getItemId(AD_POSITION);
-
-        assertThat(itemId).isLessThan(0);
-    }
-
-    @Test
-    public void getItemId_withNonAdPosition_shouldUseOriginalAdapterId() {
-        originalItemId = 42;
-        long itemId = subject.getItemId(AD_POSITION + 1);
-
-        assertThat(itemId).isEqualTo(42);
-    }
-
-    @Test
-    public void hasStableIds_shouldUseOriginalAdapterValue() {
-        originalHasStableIds = false;
-        boolean hasStableIds = subject.hasStableIds();
-
-        assertThat(hasStableIds).isFalse();
-
-        originalHasStableIds = true;
-        hasStableIds = subject.hasStableIds();
-
-        assertThat(hasStableIds).isTrue();
-    }
-
-    @Test
-    public void getView_withAdPosition_shouldReturnAdView_shouldTrackVisibility() {
-        View view = subject.getView(AD_POSITION, null, null);
-
-        assertThat(view).isEqualTo(mockAdView);
-
-        verify(mockVisibilityTracker).addView(eq(mockAdView), anyInt());
-    }
-
-    @Test
-    public void getView_withNonAdPosition_shouldOriginalAdapterView_shouldTrackVisibility() {
-        View view = subject.getView(AD_POSITION + 1, null, null);
-
-        assertThat(view).isNotEqualTo(mockAdView);
-
-        verify(mockVisibilityTracker).addView(any(View.class), anyInt());
-    }
-
-    @Test
-    public void getItemViewType_withAdPosition_shouldReturnOneGreaterThanViewType() {
-        originalItemViewType = 0;
-
-        int itemViewType = subject.getItemViewType(AD_POSITION);
-        assertThat(itemViewType).isEqualTo(originalItemViewType + 1);
-    }
-
-    @Test
-    public void getItemViewType_withNonAdPosition_shouldUseOriginalAdapterId() {
-        originalItemViewType = 0;
-
-        int itemViewType = subject.getItemViewType(AD_POSITION + 1);
-        assertThat(itemViewType).isEqualTo(originalItemViewType);
-    }
-
-    @Test
-    public void getViewTypeCount_shouldReturnOriginalViewTypeCountPlusOne() {
-        originalViewTypeCount = 1;
-
-        int viewTypeCount = subject.getViewTypeCount();
-        assertThat(viewTypeCount).isEqualTo(1);
-
-        originalViewTypeCount = 2;
-
-        viewTypeCount = subject.getViewTypeCount();
-        assertThat(viewTypeCount).isEqualTo(2);
-    }
-
-    @Test
-    public void isEmpty_shouldUseOriginalAdapterValue() {
-        boolean isEmpty = subject.isEmpty();
-
-        assertThat(isEmpty).isFalse();
-
-        originalAdapter.clear();
-
-        isEmpty = subject.isEmpty();
-
-        assertThat(isEmpty).isTrue();
-    }
-
-    @Test
-    public void getOriginalPosition_shouldCallStreamAdPlacer() {
-        subject.getOriginalPosition(5);
-
-        verify(mockStreamAdPlacer).getOriginalPosition(5);
-    }
-
-    @Test
-    public void getAdjustedPosition_shouldCallStreamAdPlacer() {
-        subject.getAdjustedPosition(5);
-
-        verify(mockStreamAdPlacer).getAdjustedPosition(5);
-    }
-
-    @Test
-    public void insertItem_shouldCallInsertItemOnStreamAdPlacer() {
-        subject.insertItem(5);
-
-        verify(mockStreamAdPlacer).insertItem(5);
-    }
-
-    @Test
-    public void removeItem_shouldCallRemoveItemOnStreamAdPlacer() {
-        subject.removeItem(5);
-
-        verify(mockStreamAdPlacer).removeItem(5);
-    }
-
-    @Test
-    public void setOnItemClickListener_withAdPosition_shouldNotCallListener() {
-        subject.setOnClickListener(mockListView, mockOnItemClickListener);
-
-        ArgumentCaptor<OnItemClickListener> listenerCaptor =
-                ArgumentCaptor.forClass(OnItemClickListener.class);
-        verify(mockListView).setOnItemClickListener(listenerCaptor.capture());
-
-        OnItemClickListener listener = listenerCaptor.getValue();
-        listener.onItemClick(mockListView, mockItemView, AD_POSITION, 0);
-
-        verify(mockOnItemClickListener, never()).onItemClick(
-                any(AdapterView.class), any(View.class), anyInt(), anyInt());
-    }
-
-    @Test
-    public void setOnItemClickListener_withNonAdPosition_shouldCallListener() {
-        subject.setOnClickListener(mockListView, mockOnItemClickListener);
-
-        ArgumentCaptor<OnItemClickListener> listenerCaptor =
-                ArgumentCaptor.forClass(OnItemClickListener.class);
-        verify(mockListView).setOnItemClickListener(listenerCaptor.capture());
-
-        OnItemClickListener listener = listenerCaptor.getValue();
-        listener.onItemClick(mockListView, mockItemView, AD_POSITION + 1, 0);
-
-        verify(mockOnItemClickListener).onItemClick(
-                mockListView, mockItemView, AD_POSITION, 0);
-    }
-
-    @Test
-    public void setOnItemLongClickListener_withAdPosition_shouldNotCallListener() {
-        subject.setOnItemLongClickListener(mockListView, mockOnItemLongClickListener);
-
-        ArgumentCaptor<OnItemLongClickListener> listenerCaptor =
-                ArgumentCaptor.forClass(OnItemLongClickListener.class);
-        verify(mockListView).setOnItemLongClickListener(listenerCaptor.capture());
-
-        OnItemLongClickListener listener = listenerCaptor.getValue();
-        listener.onItemLongClick(mockListView, mockItemView, AD_POSITION, 0);
-
-        verify(mockOnItemLongClickListener, never()).onItemLongClick(
-                any(AdapterView.class), any(View.class), anyInt(), anyInt());
-    }
-
-    @Test
-    public void setOnItemLongClickListener_withNonAdPosition_shouldCallListener() {
-        subject.setOnItemLongClickListener(mockListView, mockOnItemLongClickListener);
-
-        ArgumentCaptor<OnItemLongClickListener> listenerCaptor =
-                ArgumentCaptor.forClass(OnItemLongClickListener.class);
-        verify(mockListView).setOnItemLongClickListener(listenerCaptor.capture());
-
-        OnItemLongClickListener listener = listenerCaptor.getValue();
-        listener.onItemLongClick(mockListView, mockItemView, AD_POSITION + 1, 0);
-
-        verify(mockOnItemLongClickListener).onItemLongClick(
-                mockListView, mockItemView, AD_POSITION, 0);
-    }
-
-    @Test
-    public void setOnItemSelectedListener_withAdPosition_shouldNotCallListener() {
-        subject.setOnItemSelectedListener(mockListView, mockOnItemSelectedListener);
-
-        ArgumentCaptor<OnItemSelectedListener> listenerCaptor =
-                ArgumentCaptor.forClass(OnItemSelectedListener.class);
-        verify(mockListView).setOnItemSelectedListener(listenerCaptor.capture());
-
-        OnItemSelectedListener listener = listenerCaptor.getValue();
-        listener.onItemSelected(mockListView, mockItemView, AD_POSITION, 0);
-
-        verify(mockOnItemSelectedListener, never()).onItemSelected(
-                any(AdapterView.class), any(View.class), anyInt(), anyInt());
-    }
-
-    @Test
-    public void setOnItemSelectedListener_withNonAdPosition_shouldCallListener() {
-        subject.setOnItemSelectedListener(mockListView, mockOnItemSelectedListener);
-
-        ArgumentCaptor<OnItemSelectedListener> listenerCaptor =
-                ArgumentCaptor.forClass(OnItemSelectedListener.class);
-        verify(mockListView).setOnItemSelectedListener(listenerCaptor.capture());
-
-        OnItemSelectedListener listener = listenerCaptor.getValue();
-        listener.onItemSelected(mockListView, mockItemView, AD_POSITION + 1, 0);
-
-        verify(mockOnItemSelectedListener).onItemSelected(
-                mockListView, mockItemView, AD_POSITION, 0);
-    }
-
-    @Test
-    public void setSelection_shouldCallSetSelectionOnListView() {
-        subject.setSelection(mockListView, AD_POSITION);
-
-        // Since the original position is the ad position, the adjusted position is 1 higher
-        verify(mockListView).setSelection(AD_POSITION + 1);
-    }
-
-    @Test
-    public void smoothScrollToPosition_shouldCallSmooethScrollToPositionOnListView() {
-        subject.smoothScrollToPosition(mockListView, AD_POSITION);
-
-        // Since the original position is the ad position, the adjusted position is 1 higher
-        verify(mockListView).smoothScrollToPosition(AD_POSITION + 1);
-    }
-
-    @Test
-    public void refreshAds_shouldLoadAdsOnAdPlacer() {
-        when(mockListView.getAdapter()).thenReturn(subject);
-
-        subject.refreshAds(mockListView, "AD_UNIT_ID", mockRequestParameters);
-
-        verify(mockStreamAdPlacer).loadAds("AD_UNIT_ID", mockRequestParameters);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubClientPositioningTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubClientPositioningTest.java
deleted file mode 100644
index cce90d4e..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubClientPositioningTest.java
+++ /dev/null
@@ -1,91 +0,0 @@
-package com.mopub.nativeads;
-
-import com.mopub.common.Preconditions.NoThrow;
-import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.fest.util.Lists;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import static com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning.NO_REPEAT;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@Config(manifest=Config.NONE)
-@RunWith(SdkTestRunner.class)
-public class MoPubClientPositioningTest {
-
-    private MoPubClientPositioning subject;
-
-    @Before
-    public void setup() {
-        subject = MoPubNativeAdPositioning.clientPositioning();
-    }
-
-    @Test
-    public void addFixedPositionsOutOfOrder_shouldBeSorted() {
-        subject.addFixedPosition(27);
-        subject.addFixedPosition(31);
-        subject.addFixedPosition(17);
-        subject.addFixedPosition(7);
-        subject.addFixedPosition(56);
-
-        assertThat(subject.getFixedPositions())
-                .isEqualTo(Lists.newArrayList(7, 17, 27, 31, 56));
-    }
-
-    @Test
-    public void setRepeatingEnabled_shouldHaveRightInterval() {
-        subject.addFixedPosition(10);
-        subject.enableRepeatingPositions(5);
-
-        assertThat(subject.getRepeatingInterval()).isEqualTo(5);
-        assertThat(subject.getFixedPositions()).isEqualTo(Lists.newArrayList(10));
-    }
-
-    @Test
-    public void setNoRepeat_shouldReturnNoRepeat() {
-        subject.enableRepeatingPositions(5);
-        subject.enableRepeatingPositions(NO_REPEAT);
-
-        assertThat(subject.getRepeatingInterval()).isEqualTo(NO_REPEAT);
-    }
-
-    @Test
-    public void setFixedPositionTwice_shouldReturnOnlyOne() {
-        subject.addFixedPosition(7);
-        subject.addFixedPosition(7);
-
-        assertThat(subject.getFixedPositions().size()).isEqualTo(1);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void setInvalidFixedPosition_strictMode_shouldThrow() {
-        NoThrow.setStrictMode(true);
-        subject.addFixedPosition(-3);
-    }
-
-    @Test
-    public void setInvalidFixedPosition_releaseMode_shouldNotAddPosition() {
-        NoThrow.setStrictMode(false);
-        subject.addFixedPosition(-3);
-
-        assertThat(subject.getFixedPositions().size()).isEqualTo(0);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void setInvalidRepeatingInterval_strictMode_shouldThrow() {
-        NoThrow.setStrictMode(true);
-        subject.enableRepeatingPositions(1);
-    }
-
-    @Test
-    public void setInvalidRepeatingInterval_releaseMode_shouldClearRepeatingInterval() {
-        NoThrow.setStrictMode(false);
-        subject.enableRepeatingPositions(0);
-
-        assertThat(subject.getRepeatingInterval()).isEqualTo(NO_REPEAT);
-    }
-}
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
deleted file mode 100644
index 361e8fce..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
+++ /dev/null
@@ -1,67 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-
-import com.mopub.common.DataKeys;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.json.JSONArray;
-import org.json.JSONObject;
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import java.util.HashMap;
-
-import static com.mopub.nativeads.CustomEventNative.CustomEventNativeListener;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class MoPubCustomEventNativeTest {
-
-    private MoPubCustomEventNative subject;
-    private Activity context;
-    private HashMap<String, Object> localExtras;
-    private CustomEventNativeListener mCustomEventNativeListener;
-    private HashMap<String, String> serverExtras;
-    private JSONObject fakeJsonObject;
-
-    @Before
-    public void setUp() throws Exception {
-        subject = new MoPubCustomEventNative();
-        context = new Activity();
-
-        localExtras = new HashMap<String, Object>();
-        serverExtras = new HashMap<String, String>();
-
-        fakeJsonObject = new JSONObject();
-        fakeJsonObject.put("imptracker", new JSONArray("[\"url1\", \"url2\"]"));
-        fakeJsonObject.put("clktracker", "expected clicktracker");
-        fakeJsonObject.put("mainimage", "mainimageurl");
-        fakeJsonObject.put("iconimage", "iconimageurl");
-        fakeJsonObject.put("extraimage", "extraimageurl");
-
-        localExtras.put(DataKeys.JSON_BODY_KEY, fakeJsonObject);
-
-        mCustomEventNativeListener = mock(CustomEventNativeListener.class);
-    }
-
-    @After
-    public void tearDown() throws Exception {
-        reset(mCustomEventNativeListener);
-    }
-
-    @Test
-    public void loadNativeAd_withNullResponseBody_shouldNotifyListenerOfOnNativeAdFailed() throws Exception {
-        localExtras.remove(DataKeys.JSON_BODY_KEY);
-
-        subject.loadNativeAd(context, mCustomEventNativeListener, localExtras, serverExtras);
-        verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(MoPubCustomEventNative.MoPubForwardingNativeAd.class));
-        verify(mCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.INVALID_JSON);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubForwardingNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubForwardingNativeAdTest.java
deleted file mode 100644
index 668842d0..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubForwardingNativeAdTest.java
+++ /dev/null
@@ -1,341 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.graphics.Bitmap;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.nativeads.test.support.MoPubShadowBitmap;
-import com.mopub.nativeads.test.support.MoPubShadowDisplay;
-import com.mopub.network.MaxWidthImageLoader;
-import com.mopub.network.MoPubRequestQueue;
-import com.mopub.network.Networking;
-import com.mopub.volley.VolleyError;
-import com.mopub.volley.toolbox.ImageLoader;
-
-import org.json.JSONArray;
-import org.json.JSONObject;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.annotation.Config;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-
-import static com.mopub.nativeads.NativeResponse.Parameter;
-import static com.mopub.nativeads.NativeResponse.Parameter.requiredKeys;
-import static com.mopub.volley.toolbox.ImageLoader.ImageListener;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(shadows={MoPubShadowBitmap.class, MoPubShadowDisplay.class})
-public class MoPubForwardingNativeAdTest {
-
-    private JSONObject fakeJsonObject;
-    private MoPubCustomEventNative.MoPubForwardingNativeAd subject;
-    private Activity context;
-
-    @Mock
-    private CustomEventNative.CustomEventNativeListener mockCustomEventNativeListener;
-    @Mock
-    private MoPubRequestQueue mockRequestQueue;
-    @Mock
-    private MaxWidthImageLoader mockImageLoader;
-    @Mock
-    private ImageLoader.ImageContainer mockImageContainer;
-
-    @Before
-    public void setUp() throws Exception {
-        context = new Activity();
-        fakeJsonObject = new JSONObject();
-        fakeJsonObject.put("imptracker", new JSONArray("[\"url1\", \"url2\"]"));
-        fakeJsonObject.put("clktracker", "expected clicktracker");
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-        Networking.setImageLoaderForTesting(mockImageLoader);
-        stub(mockImageContainer.getBitmap()).toReturn(mock(Bitmap.class));
-    }
-
-    @Test
-    public void parameter_requiredKeys_shouldOnlyContainTheRequiredKeys() throws Exception {
-        final HashSet<String> expectedKeys = new HashSet<String>();
-        expectedKeys.add("imptracker");
-        expectedKeys.add("clktracker");
-
-        assertThat(requiredKeys).isEqualTo(expectedKeys);
-    }
-
-    @Test
-    public void parameter_fromString_shouldReturnParameterOnMatch() throws Exception {
-        final Parameter parameter = Parameter.from("title");
-
-        assertThat(parameter).isEqualTo(Parameter.TITLE);
-    }
-
-    @Test
-    public void parameter_fromString_shouldReturnNullOnIllegalKey() throws Exception {
-        final Parameter parameter = Parameter.from("random gibberish");
-
-        assertThat(parameter).isNull();
-    }
-
-    @Test
-    public void loadAd_whenMissingRequiredKeys_shouldThrowIllegalArgumentException() throws Exception {
-        fakeJsonObject.remove("imptracker");
-
-        try {
-            subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
-            subject.loadAd();
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            // pass
-        }
-    }
-
-    @Test
-    public void loadAd_whenRequiredKeyOfWrongType_shouldThrowIllegalArgumentException() throws Exception {
-        fakeJsonObject.put("imptracker", 12345);
-
-        try {
-            subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
-            subject.loadAd();
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            // pass
-        }
-    }
-
-    @Test
-    public void loadAd_shouldSetRequiredExpectedFields() throws Exception {
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
-        subject.loadAd();
-        assertThat(subject.getImpressionTrackers()).containsOnly("url1", "url2");
-    }
-
-    @Test
-    public void loadAd_shouldSetOptionalExpectedFields() throws Exception {
-        fakeJsonObject.put("title", "expected title");
-        fakeJsonObject.put("text", "expected text");
-        fakeJsonObject.put("mainimage", "expected mainimage");
-        fakeJsonObject.put("iconimage", "expected iconimage");
-
-        fakeJsonObject.put("clk", "expected clk");
-
-        fakeJsonObject.put("fallback", "expected fallback");
-        fakeJsonObject.put("ctatext", "expected ctatext");
-        fakeJsonObject.put("starrating", 5.0);
-
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        assertThat(subject.getTitle()).isEqualTo("expected title");
-        assertThat(subject.getText()).isEqualTo("expected text");
-        assertThat(subject.getMainImageUrl()).isEqualTo("expected mainimage");
-        assertThat(subject.getIconImageUrl()).isEqualTo("expected iconimage");
-
-        assertThat(subject.getClickDestinationUrl()).isEqualTo("expected clk");
-
-//        assertThat(subject.getFallback()).isEqualTo("expected fallback");
-        assertThat(subject.getImpressionTrackers()).containsOnly("url1", "url2");
-        assertThat(subject.getCallToAction()).isEqualTo("expected ctatext");
-        assertThat(subject.getStarRating()).isEqualTo(5.0);
-    }
-
-    @Test
-    public void loadAd_withIntegerStarRating_shouldSetStarRating() throws Exception {
-        fakeJsonObject.put("starrating", 3);
-
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        assertThat(subject.getStarRating()).isEqualTo(3.0);
-    }
-
-    @Test
-    public void loadAd_withStringStarRating_shouldSetStarRating() throws Exception {
-        fakeJsonObject.put("starrating", "2.3");
-
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        assertThat(subject.getStarRating()).isEqualTo(2.3);
-    }
-
-    @Test
-    public void loadAd_withInvalidStringStarRating_shouldNotSetStarRating() throws Exception {
-        fakeJsonObject.put("starrating", "this is not a number");
-
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        assertThat(subject.getStarRating()).isNull();
-    }
-
-    @Test
-    public void loadAd_withInvalidlyTypedStarRating_shouldNotSetStarRating() throws Exception {
-        fakeJsonObject.put("starrating", new Activity());
-
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        assertThat(subject.getStarRating()).isNull();
-    }
-
-    @Test
-    public void loadAd_whenImpressionTrackersContainsNonStrings_willCoerceToString() throws Exception {
-        /**
-         * At this level of abstraction, we don't actually care that these Strings resolve to valid
-         * URLs. We just want to ensure that loadAd does not throw an exception.
-         */
-        final JSONArray impressionTrackers = new JSONArray();
-        impressionTrackers.put("url1");
-        impressionTrackers.put(JSONObject.NULL);
-        impressionTrackers.put(2.12);
-        fakeJsonObject.put("imptracker", impressionTrackers);
-
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        assertThat(subject.getImpressionTrackers()).containsOnly("url1", "null", "2.12");
-    }
-
-    @Test
-    public void loadAd_shouldSetExtraFields() throws Exception {
-        List<Object> array = new ArrayList<Object>();
-        array.add("index1");
-        array.add(-10);
-
-        Map<String, Object> map = new HashMap<String, Object>();
-        map.put("one", "a");
-        map.put("two", "b");
-
-        fakeJsonObject.put("key1", "yay json");
-        fakeJsonObject.put("key2", 5);
-        fakeJsonObject.put("key3", new JSONArray(array));
-        fakeJsonObject.put("key4", new JSONObject(map));
-
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        assertThat(subject.getExtra("key1")).isEqualTo("yay json");
-        assertThat(subject.getExtra("key2")).isEqualTo(5);
-        assertThat((JSONArray) subject.getExtra("key3")).isEqualsToByComparingFields(new JSONArray(array));
-        assertThat((JSONObject) subject.getExtra("key4")).isEqualsToByComparingFields(new JSONObject(map));
-    }
-
-    @Test
-    public void loadAd_shouldDownloadImages_shouldNotifyListenerOfOnNativeAdLoaded() throws Exception {
-        fakeJsonObject.put("mainimage", "mainimageurl");
-        fakeJsonObject.put("iconimage", "iconimageurl");
-        fakeJsonObject.put("extraimage", "extraimageurl");
-
-        when(mockImageLoader.get(anyString(), any(ImageListener.class)))
-                .then(new Answer<Void>() {
-                    @Override
-                    public Void answer(final InvocationOnMock invocationOnMock) throws Throwable {
-                        ImageListener listener = ((ImageListener) invocationOnMock.getArguments()[1]);
-                        listener.onResponse(mockImageContainer, false);
-                        return null;
-                    }
-                });
-
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        verify(mockImageLoader).get(eq("mainimageurl"), any(ImageListener.class));
-        verify(mockImageLoader).get(eq("iconimageurl"), any(ImageListener.class));
-        verify(mockImageLoader).get(eq("extraimageurl"), any(ImageListener.class));
-
-        verify(mockCustomEventNativeListener).onNativeAdLoaded(subject);
-        verify(mockCustomEventNativeListener, never()).onNativeAdFailed(any(NativeErrorCode.class));
-    }
-
-    @Test
-    public void loadAd_withFailedImageDownload_shouldNotDownloadImages_shouldNotifyListenerOfOnNativeAdFailed() throws Exception {
-        fakeJsonObject.put("mainimage", "mainimageurl");
-        fakeJsonObject.put("iconimage", "iconimageurl");
-        fakeJsonObject.put("extraimage", "extraimageurl");
-
-        when(mockImageLoader.get(anyString(), any(ImageListener.class)))
-                .then(new Answer<Void>() {
-                    @Override
-                    public Void answer(final InvocationOnMock invocationOnMock) throws Throwable {
-                        ImageListener listener = ((ImageListener) invocationOnMock.getArguments()[1]);
-                        listener.onErrorResponse(new VolleyError());
-                        return null;
-                    }
-                });
-
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        verify(mockCustomEventNativeListener, never()).onNativeAdLoaded(subject);
-        verify(mockCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.IMAGE_DOWNLOAD_FAILURE);
-    }
-
-    @Test
-    public void getExtrasImageUrls_whenExtrasContainsImages_shouldReturnImageUrls() throws Exception {
-        // getExtrasImageUrls requires the key to end with a case-insensitive "image" to be counted as an image
-        fakeJsonObject.put("test_image", "image_url_1");
-        fakeJsonObject.put("filler", "ignored");
-        fakeJsonObject.put("otherIMAGE", "image_url_2");
-        fakeJsonObject.put("more filler", "ignored");
-        fakeJsonObject.put("lastimage", "image_url_3");
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        assertThat(subject.getExtrasImageUrls()).containsOnly("image_url_1", "image_url_2", "image_url_3");
-    }
-
-
-    @Test
-    public void getExtrasImageUrls_whenExtrasDoesNotContainImageKeys_shouldReturnEmptyList() throws Exception {
-        // getExtrasImageUrls requires the key to end with a case-insensitive "image" to be counted as an image
-        fakeJsonObject.put("imageAtFront", "ignored");
-        fakeJsonObject.put("middle_image_in_key", "ignored");
-        fakeJsonObject.put("other", "ignored");
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        assertThat(subject.getExtrasImageUrls()).isEmpty();
-    }
-
-    @Test
-    public void getAllImageUrls_withExtraImagesAndMainAndIconImages_shouldReturnAllUrls() throws Exception {
-        fakeJsonObject.put("mainimage", "mainImageUrl");
-        fakeJsonObject.put("iconimage", "iconImageUrl");
-        fakeJsonObject.put("extraimage", "extraImageUrl");
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        assertThat(subject.getAllImageUrls()).containsOnly(
-                "mainImageUrl",
-                "iconImageUrl",
-                "extraImageUrl"
-        );
-    }
-
-    @Test
-    public void getAllImageUrls_withOnlyExtrasImages_shouldNotIncludeMainOrIconImages() throws Exception {
-        fakeJsonObject.put("extra1_image", "expected extra1_image");
-        fakeJsonObject.put("extra2_image", "expected extra2_image");
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        assertThat(subject.getAllImageUrls()).containsOnly("expected extra1_image", "expected extra2_image");
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeAdRendererTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeAdRendererTest.java
deleted file mode 100644
index ff855e7e..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeAdRendererTest.java
+++ /dev/null
@@ -1,171 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.view.ViewGroup;
-import android.widget.Button;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
-import android.widget.RelativeLayout;
-import android.widget.TextView;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.Utils;
-
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.rules.ExpectedException;
-import org.junit.runner.RunWith;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-
-@RunWith(SdkTestRunner.class)
-public class MoPubNativeAdRendererTest {
-    private MoPubNativeAdRenderer subject;
-    private Activity context;
-    private RelativeLayout relativeLayout;
-    private ViewGroup viewGroup;
-    private NativeResponse nativeResponse;
-    private BaseForwardingNativeAd mNativeAd;
-    private ViewBinder viewBinder;
-    private TextView titleView;
-    private TextView textView;
-    private TextView callToActionView;
-    private ImageView mainImageView;
-    private ImageView iconImageView;
-    private ImageView badView;
-
-    @Before
-    public void setUp() throws Exception {
-        context = new Activity();
-        relativeLayout = new RelativeLayout(context);
-        relativeLayout.setId((int) Utils.generateUniqueId());
-        viewGroup = new LinearLayout(context);
-
-        mNativeAd = new BaseForwardingNativeAd() {};
-        mNativeAd.setTitle("test title");
-        mNativeAd.setText("test text");
-        mNativeAd.setCallToAction("test call to action");
-        mNativeAd.setClickDestinationUrl("destinationUrl");
-
-        nativeResponse = new NativeResponse(context,
-                "impressionTrackerUrl",
-                "clickTrackerUrl",
-                "test ID", mNativeAd,
-                mock(MoPubNative.MoPubNativeListener.class));
-
-        titleView = new TextView(context);
-        titleView.setId((int) Utils.generateUniqueId());
-        textView = new TextView(context);
-        textView.setId((int) Utils.generateUniqueId());
-        callToActionView = new Button(context);
-        callToActionView.setId((int) Utils.generateUniqueId());
-        mainImageView = new ImageView(context);
-        mainImageView.setId((int) Utils.generateUniqueId());
-        iconImageView = new ImageView(context);
-        iconImageView.setId((int) Utils.generateUniqueId());
-        badView = new ImageView(context);
-        badView.setId((int) Utils.generateUniqueId());
-
-        relativeLayout.addView(titleView);
-        relativeLayout.addView(textView);
-        relativeLayout.addView(callToActionView);
-        relativeLayout.addView(mainImageView);
-        relativeLayout.addView(iconImageView);
-        relativeLayout.addView(badView);
-
-        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
-                .titleId(titleView.getId())
-                .textId(textView.getId())
-                .callToActionId(callToActionView.getId())
-                .mainImageId(mainImageView.getId())
-                .iconImageId(iconImageView.getId())
-                .build();
-
-        subject = new MoPubNativeAdRenderer(viewBinder);
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void createAdView_withNullContext_shouldThrowNPE() {
-        subject.createAdView(null, viewGroup);
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void renderAdView_withNullView_shouldThrowNPE() {
-        subject.renderAdView(null, nativeResponse);
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void renderAdView_withNullNativeResponse_shouldThrowNPE() {
-        subject.renderAdView(relativeLayout, null);
-    }
-
-    @Rule public ExpectedException exception = ExpectedException.none();
-    public void renderAdView_withNullViewBinder_shouldThrowNPE() {
-        subject = new MoPubNativeAdRenderer(null);
-
-        exception.expect(NullPointerException.class);
-        subject.renderAdView(relativeLayout, nativeResponse);
-    }
-
-    @Test
-    public void renderAdView_shouldReturnPopulatedView() {
-        subject.renderAdView(relativeLayout, nativeResponse);
-
-        assertThat(((TextView)relativeLayout.findViewById(titleView.getId())).getText()).isEqualTo("test title");
-        assertThat(((TextView)relativeLayout.findViewById(textView.getId())).getText()).isEqualTo(
-                "test text");
-        assertThat(((TextView)relativeLayout.findViewById(callToActionView.getId())).getText()).isEqualTo("test call to action");
-
-        // not testing images due to testing complexity
-    }
-
-    public void renderAdView_withFailedViewBinder_shouldReturnEmptyViews() {
-        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
-                .titleId(titleView.getId())
-                .textId(badView.getId())
-                .callToActionId(callToActionView.getId())
-                .mainImageId(mainImageView.getId())
-                .iconImageId(iconImageView.getId())
-                .build();
-
-        subject = new MoPubNativeAdRenderer(viewBinder);
-        subject.renderAdView(relativeLayout, nativeResponse);
-
-        assertThat(((TextView)relativeLayout.findViewById(titleView.getId())).getText())
-                .isEqualTo("");
-        assertThat(((TextView)relativeLayout.findViewById(textView.getId())).getText())
-                .isEqualTo("");
-        assertThat(((TextView)relativeLayout.findViewById(callToActionView.getId())).getText())
-                .isEqualTo("");
-    }
-
-    @Test
-    public void renderAdView_withNoViewHolder_shouldCreateNativeViewHolder() {
-        subject.renderAdView(relativeLayout, nativeResponse);
-
-        NativeViewHolder expectedViewHolder = NativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
-        NativeViewHolder viewHolder = subject.mViewHolderMap.get(relativeLayout);
-        compareNativeViewHolders(expectedViewHolder, viewHolder);
-    }
-
-    @Test
-    public void getOrCreateNativeViewHolder_withViewHolder_shouldNotReCreateNativeViewHolder() {
-        subject.renderAdView(relativeLayout, nativeResponse);
-        NativeViewHolder expectedViewHolder = subject.mViewHolderMap.get(relativeLayout);
-        subject.renderAdView(relativeLayout, nativeResponse);
-
-        NativeViewHolder viewHolder = subject.mViewHolderMap.get(relativeLayout);
-        assertThat(viewHolder).isEqualTo(expectedViewHolder);
-    }
-
-    static private void compareNativeViewHolders(final NativeViewHolder actualViewHolder,
-            final NativeViewHolder expectedViewHolder) {
-        assertThat(actualViewHolder.titleView).isEqualTo(expectedViewHolder.titleView);
-        assertThat(actualViewHolder.textView).isEqualTo(expectedViewHolder.textView);
-        assertThat(actualViewHolder.callToActionView).isEqualTo(expectedViewHolder.callToActionView);
-        assertThat(actualViewHolder.mainImageView).isEqualTo(expectedViewHolder.mainImageView);
-        assertThat(actualViewHolder.iconImageView).isEqualTo(expectedViewHolder.iconImageView);
-    }
-}
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
deleted file mode 100644
index 693b3387..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
+++ /dev/null
@@ -1,177 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.test.support.ShadowAsyncTasks;
-import com.mopub.common.util.test.support.TestMethodBuilderFactory;
-import com.mopub.mobileads.MoPubErrorCode;
-import com.mopub.nativeads.MoPubNative.MoPubNativeEventListener;
-import com.mopub.nativeads.MoPubNative.MoPubNativeNetworkListener;
-import com.mopub.network.MoPubNetworkError;
-import com.mopub.network.MoPubRequestQueue;
-import com.mopub.network.Networking;
-import com.mopub.volley.Request;
-import com.mopub.volley.VolleyError;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowLog;
-
-import java.net.MalformedURLException;
-import java.util.List;
-import java.util.concurrent.Semaphore;
-import java.util.logging.Level;
-import java.util.logging.LogManager;
-
-import static android.Manifest.permission.ACCESS_NETWORK_STATE;
-import static android.Manifest.permission.INTERNET;
-import static com.mopub.common.VolleyRequestMatcher.isUrl;
-import static com.mopub.common.util.Reflection.MethodBuilder;
-import static com.mopub.nativeads.MoPubNative.EMPTY_EVENT_LISTENER;
-import static com.mopub.nativeads.MoPubNative.EMPTY_NETWORK_LISTENER;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.argThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(SdkTestRunner.class)
-@Config(shadows = {ShadowAsyncTasks.class})
-public class MoPubNativeTest {
-    private MoPubNative subject;
-    private MethodBuilder methodBuilder;
-    private Activity context;
-    private Semaphore semaphore;
-    private static final String adUnitId = "test_adunit_id";
-
-    @Mock private MoPubNativeEventListener mockEventListener;
-
-    @Mock private MoPubNativeNetworkListener mockNetworkListener;
-    @Mock private MoPubRequestQueue mockRequestQueue;
-
-
-    @Before
-    public void setup() {
-        context = new Activity();
-        shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
-        shadowOf(context).grantPermissions(INTERNET);
-        subject = new MoPubNative(context, adUnitId, mockNetworkListener);
-        methodBuilder = TestMethodBuilderFactory.getSingletonMock();
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-        semaphore = new Semaphore(0);
-    }
-
-    @After
-    public void tearDown() {
-        reset(methodBuilder);
-    }
-
-    @Test
-    public void destroy_shouldSetListenersToEmptyAndClearContext() {
-        assertThat(subject.getContextOrDestroy()).isSameAs(context);
-        assertThat(subject.getMoPubNativeNetworkListener()).isSameAs(mockNetworkListener);
-        subject.setNativeEventListener(mockEventListener);
-        assertThat(subject.getMoPubNativeEventListener()).isSameAs(mockEventListener);
-
-        subject.destroy();
-
-        assertThat(subject.getContextOrDestroy()).isNull();
-        assertThat(subject.getMoPubNativeNetworkListener()).isSameAs(EMPTY_NETWORK_LISTENER);
-        assertThat(subject.getMoPubNativeEventListener()).isSameAs(EMPTY_EVENT_LISTENER);
-    }
-
-    @Test
-    public void setNativeEventListener_shouldSetListener() {
-        assertThat(subject.getMoPubNativeNetworkListener()).isSameAs(mockNetworkListener);
-        subject.setNativeEventListener(mockEventListener);
-        assertThat(subject.getMoPubNativeEventListener()).isSameAs(mockEventListener);
-
-        subject.setNativeEventListener(null);
-        assertThat(subject.getMoPubNativeEventListener()).isSameAs(EMPTY_EVENT_LISTENER);
-    }
-
-    @Test
-    public void loadNativeAd_shouldReturnFast() {
-        Robolectric.getUiThreadScheduler().pause();
-
-        subject.destroy();
-        subject.makeRequest();
-
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-    }
-
-    @Test
-    public void requestNativeAd_shouldFireNetworkRequest() {
-
-        subject.requestNativeAd("http://www.mopub.com");
-
-        verify(mockNetworkListener, never()).onNativeFail(any(NativeErrorCode.class));
-        verify(mockRequestQueue).add(argThat(isUrl("http://www.mopub.com")));
-    }
-
-    @Test
-    public void requestNativeAd_whenReqeustQueueDeliversUnknownError_shouldFireNativeFail() {
-
-        when(mockRequestQueue.add(any(Request.class)))
-                .then(new Answer<Void>() {
-                    @Override
-                    public Void answer(final InvocationOnMock invocationOnMock) throws Throwable {
-                        ((Request) invocationOnMock.getArguments()[0]).deliverError(new VolleyError(new MalformedURLException()));
-                        return null;
-                    }
-                });
-        subject.requestNativeAd("//\\//\\::::");
-
-        verify(mockNetworkListener).onNativeFail(any(NativeErrorCode.class));
-    }
-
-    @Test
-    public void requestNativeAd_withNullUrl_shouldFireNativeFail() {
-        Robolectric.getUiThreadScheduler().pause();
-
-        subject.requestNativeAd(null);
-
-        verify(mockNetworkListener).onNativeFail(any(NativeErrorCode.class));
-        verify(mockRequestQueue, never()).add(any(Request.class));
-    }
-
-    @Test
-    public void onAdError_shouldNotifyListener() {
-        subject.onAdError(new MoPubNetworkError(MoPubNetworkError.Reason.BAD_BODY));
-
-        verify(mockNetworkListener).onNativeFail(eq(NativeErrorCode.INVALID_JSON));
-    }
-
-    @Test
-    public void onAdError_whenNotMoPubError_shouldNotifyListener() {
-        subject.onAdError(new VolleyError("generic"));
-
-        verify(mockNetworkListener).onNativeFail(eq(NativeErrorCode.UNSPECIFIED));
-    }
-
-    @Test
-    public void onAdError_withVolleyErrorWarmingUp_shouldLogMoPubErrorCodeWarmup_shouldNotifyListener() {
-        LogManager.getLogManager().getLogger("com.mopub").setLevel(Level.ALL);
-
-        subject.onAdError(new MoPubNetworkError(MoPubNetworkError.Reason.WARMING_UP));
-
-        final List<ShadowLog.LogItem> allLogMessages = ShadowLog.getLogs();
-        final ShadowLog.LogItem latestLogMessage = allLogMessages.get(allLogMessages.size() - 1);
-
-        // All log messages end with a newline character.
-        assertThat(latestLogMessage.msg.trim()).isEqualTo(MoPubErrorCode.WARMUP.toString());
-        verify(mockNetworkListener).onNativeFail(eq(NativeErrorCode.EMPTY_AD_RESPONSE));
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStreamAdPlacerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStreamAdPlacerTest.java
deleted file mode 100644
index ac6f2be1..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStreamAdPlacerTest.java
+++ /dev/null
@@ -1,498 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.view.View;
-import android.view.ViewGroup;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
-import com.mopub.nativeads.PositioningSource.PositioningListener;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Answers;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-public class MoPubStreamAdPlacerTest {
-    private Context context;
-
-    MoPubClientPositioning positioning;
-
-    @Mock
-    PositioningSource mockPositioningSource;
-    @Mock
-    NativeAdSource mockAdSource;
-    @Mock
-    MoPubNativeAdRenderer mockAdRenderer;
-    @Mock
-    MoPubNativeAdLoadedListener mockAdLoadedListener;
-    @Mock
-    ImpressionTracker mockImpressionTracker;
-
-    @Mock(answer = Answers.RETURNS_DEEP_STUBS)
-    NativeResponse stubNativeResponse;
-
-    private MoPubStreamAdPlacer subject;
-
-    @Before
-    public void setup() {
-        context = new Activity();
-        positioning = MoPubNativeAdPositioning.clientPositioning()
-                .enableRepeatingPositions(2);
-
-        subject = new MoPubStreamAdPlacer(
-                context, mockAdSource, mockImpressionTracker, mockPositioningSource);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.setAdLoadedListener(mockAdLoadedListener);
-    }
-
-    @Test
-    public void isAd_initialState_hasNoAds() {
-        checkAdPositions();
-    }
-
-    @Test
-    public void isAd_loadPositions_withoutLoadingAds_hasNoAds() {
-        subject.handlePositioningLoad(positioning);
-        checkAdPositions();
-    }
-
-    @Test
-    public void isAd_loadAds_withoutLoadingPositions_hasNoAds() {
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
-        subject.handleAdsAvailable();
-        subject.setItemCount(4);
-        checkAdPositions();
-    }
-
-    @Test
-    public void isAd_loadAds_thenLoadPositions_hasAds() {
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-
-        subject.handleAdsAvailable();
-        subject.handlePositioningLoad(positioning);
-        subject.setItemCount(4);
-        checkAdPositions(1, 3, 5);
-    }
-
-    @Test
-    public void isAd_loadPositions_thenLoadAds_hasAds() {
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-
-        subject.handlePositioningLoad(positioning);
-        subject.handleAdsAvailable();
-        subject.setItemCount(4);
-        checkAdPositions(1, 3, 5);
-    }
-
-    @Test
-    public void getOriginalPosition_adjustsPositions() {
-        assertThat(subject.getOriginalPosition(0)).isEqualTo(0);
-        assertThat(subject.getOriginalPosition(1)).isEqualTo(1);
-        assertThat(subject.getOriginalPosition(2)).isEqualTo(2);
-        assertThat(subject.getOriginalPosition(3)).isEqualTo(3);
-        assertThat(subject.getOriginalPosition(4)).isEqualTo(4);
-
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        subject.handlePositioningLoad(positioning);
-        subject.handleAdsAvailable();
-        subject.setItemCount(4);
-
-        assertThat(subject.getOriginalPosition(0)).isEqualTo(0);
-        assertThat(subject.getOriginalPosition(1)).isEqualTo(PlacementData.NOT_FOUND);
-        assertThat(subject.getOriginalPosition(2)).isEqualTo(1);
-        assertThat(subject.getOriginalPosition(3)).isEqualTo(PlacementData.NOT_FOUND);
-        assertThat(subject.getOriginalPosition(4)).isEqualTo(2);
-        assertThat(subject.getOriginalPosition(5)).isEqualTo(PlacementData.NOT_FOUND);
-        assertThat(subject.getOriginalPosition(6)).isEqualTo(3);
-        assertThat(subject.getOriginalPosition(7)).isEqualTo(4);
-        assertThat(subject.getOriginalPosition(8)).isEqualTo(5);
-        assertThat(subject.getOriginalPosition(9)).isEqualTo(6);
-    }
-
-    @Test
-    public void getAdjustedPosition_adjustsPositions() {
-        assertThat(subject.getAdjustedPosition(0)).isEqualTo(0);
-        assertThat(subject.getAdjustedPosition(1)).isEqualTo(1);
-        assertThat(subject.getAdjustedPosition(2)).isEqualTo(2);
-        assertThat(subject.getAdjustedPosition(3)).isEqualTo(3);
-        assertThat(subject.getAdjustedPosition(4)).isEqualTo(4);
-
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        subject.handlePositioningLoad(positioning);
-        subject.handleAdsAvailable();
-        subject.setItemCount(4);
-
-        assertThat(subject.getAdjustedPosition(0)).isEqualTo(0);
-        assertThat(subject.getAdjustedPosition(1)).isEqualTo(2);
-        assertThat(subject.getAdjustedPosition(2)).isEqualTo(4);
-        assertThat(subject.getAdjustedPosition(3)).isEqualTo(6);
-        assertThat(subject.getAdjustedPosition(4)).isEqualTo(7);
-        assertThat(subject.getAdjustedPosition(5)).isEqualTo(8);
-        assertThat(subject.getAdjustedPosition(6)).isEqualTo(9);
-        assertThat(subject.getAdjustedPosition(7)).isEqualTo(10);
-        assertThat(subject.getAdjustedPosition(8)).isEqualTo(11);
-        assertThat(subject.getAdjustedPosition(9)).isEqualTo(12);
-    }
-
-    @Test
-    public void getOriginalCount_adjustsPositions() {
-        assertThat(subject.getOriginalCount(0)).isEqualTo(0);
-        assertThat(subject.getOriginalCount(1)).isEqualTo(1);
-        assertThat(subject.getOriginalCount(2)).isEqualTo(2);
-        assertThat(subject.getOriginalCount(3)).isEqualTo(3);
-        assertThat(subject.getOriginalCount(4)).isEqualTo(4);
-
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        subject.handlePositioningLoad(positioning);
-        subject.handleAdsAvailable();
-        subject.setItemCount(4);
-
-        assertThat(subject.getOriginalCount(0)).isEqualTo(0);
-        assertThat(subject.getOriginalCount(1)).isEqualTo(1);
-        assertThat(subject.getOriginalCount(2)).isEqualTo(PlacementData.NOT_FOUND);
-        assertThat(subject.getOriginalCount(3)).isEqualTo(2);
-        assertThat(subject.getOriginalCount(4)).isEqualTo(PlacementData.NOT_FOUND);
-        assertThat(subject.getOriginalCount(5)).isEqualTo(3);
-        assertThat(subject.getOriginalCount(6)).isEqualTo(PlacementData.NOT_FOUND);
-        assertThat(subject.getOriginalCount(7)).isEqualTo(4);
-        assertThat(subject.getOriginalCount(8)).isEqualTo(5);
-        assertThat(subject.getOriginalCount(9)).isEqualTo(6);
-    }
-
-    @Test
-    public void getAdjustedCount_adjustsPositions() {
-        assertThat(subject.getAdjustedCount(0)).isEqualTo(0);
-        assertThat(subject.getAdjustedCount(1)).isEqualTo(1);
-        assertThat(subject.getAdjustedCount(2)).isEqualTo(2);
-        assertThat(subject.getAdjustedCount(3)).isEqualTo(3);
-        assertThat(subject.getAdjustedCount(4)).isEqualTo(4);
-
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        subject.handlePositioningLoad(positioning);
-        subject.handleAdsAvailable();
-        subject.setItemCount(4);
-
-        assertThat(subject.getAdjustedCount(0)).isEqualTo(0);
-        assertThat(subject.getAdjustedCount(1)).isEqualTo(1);
-        assertThat(subject.getAdjustedCount(2)).isEqualTo(3);
-        assertThat(subject.getAdjustedCount(3)).isEqualTo(5);
-        assertThat(subject.getAdjustedCount(4)).isEqualTo(7);
-        assertThat(subject.getAdjustedCount(5)).isEqualTo(8);
-        assertThat(subject.getAdjustedCount(6)).isEqualTo(9);
-        assertThat(subject.getAdjustedCount(7)).isEqualTo(10);
-        assertThat(subject.getAdjustedCount(8)).isEqualTo(11);
-        assertThat(subject.getAdjustedCount(9)).isEqualTo(12);
-    }
-
-    @Test
-    public void placeAds_shouldCallListener() {
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        subject.handlePositioningLoad(positioning);
-        subject.handleAdsAvailable();
-        subject.setItemCount(4);
-
-        verify(mockAdLoadedListener, never()).onAdLoaded(0);
-        verify(mockAdLoadedListener).onAdLoaded(1);
-        verify(mockAdLoadedListener, never()).onAdLoaded(2);
-        verify(mockAdLoadedListener).onAdLoaded(3);
-        verify(mockAdLoadedListener, never()).onAdLoaded(4);
-        verify(mockAdLoadedListener).onAdLoaded(5);
-        verify(mockAdLoadedListener, never()).onAdLoaded(6);
-        verify(mockAdLoadedListener, never()).onAdLoaded(7);
-    }
-
-    @Test
-    public void placeAdsInRange_shouldPlaceAfter() {
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        subject.handlePositioningLoad(positioning);
-        subject.handleAdsAvailable();
-
-        Robolectric.getUiThreadScheduler().pause();
-        subject.setItemCount(100);
-        subject.placeAdsInRange(50, 50);
-        Robolectric.getUiThreadScheduler().advanceToLastPostedRunnable();
-
-        assertThat(subject.isAd(48)).isFalse();
-        assertThat(subject.isAd(49)).isFalse();
-        assertThat(subject.isAd(50)).isTrue();
-        assertThat(subject.isAd(51)).isFalse();
-        assertThat(subject.isAd(52)).isTrue();
-        assertThat(subject.isAd(53)).isFalse();
-        assertThat(subject.isAd(54)).isTrue();
-    }
-
-    @Test
-    public void placeAdsInRange_shouldCallListener() {
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        subject.handlePositioningLoad(positioning);
-        subject.handleAdsAvailable();
-
-        Robolectric.getUiThreadScheduler().pause();
-        subject.setItemCount(100);
-        subject.placeAdsInRange(50, 54);
-        Robolectric.getUiThreadScheduler().advanceToLastPostedRunnable();
-
-        verify(mockAdLoadedListener).onAdLoaded(50);
-        verify(mockAdLoadedListener, never()).onAdLoaded(51);
-        verify(mockAdLoadedListener).onAdLoaded(52);
-        verify(mockAdLoadedListener, never()).onAdLoaded(53);
-        verify(mockAdLoadedListener).onAdLoaded(54);
-        verify(mockAdLoadedListener, never()).onAdLoaded(55);
-        verify(mockAdLoadedListener).onAdLoaded(56);
-    }
-
-    @Test
-    public void placeAdsInRange_aboveItemCount_shouldNotInsert() {
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        subject.handlePositioningLoad(positioning);
-        subject.handleAdsAvailable();
-
-        Robolectric.getUiThreadScheduler().pause();
-        subject.setItemCount(0);
-        subject.placeAdsInRange(50, 54);
-        Robolectric.getUiThreadScheduler().advanceToLastPostedRunnable();
-
-        verify(mockAdLoadedListener, never()).onAdLoaded(50);
-    }
-
-    @Test
-    public void getAdView_withNoAds_returnsNull() {
-        assertThat(subject.getAdView(1, null, null)).isNull();
-    }
-
-    @Test
-    public void loadAds_shouldClearAds_afterFirstAdLoads() {
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        subject.handlePositioningLoad(positioning);
-        subject.handleAdsAvailable();
-        subject.setItemCount(2);
-        subject.placeAdsInRange(0, 1);
-
-        subject.loadAds("test-ad-unit-id");
-
-        // Ad should still exist until a new ad is available
-        checkAdPositions(1);
-        verify(mockAdLoadedListener, never()).onAdRemoved(anyInt());
-
-        // Once an ad is available, it should be immediately removed and replaced
-        subject.handleAdsAvailable();
-        subject.handlePositioningLoad(positioning);
-        verify(mockAdLoadedListener).onAdRemoved(1);
-        verify(mockAdLoadedListener, times(2)).onAdLoaded(1);
-        checkAdPositions(1);
-    }
-
-    @Test
-    public void loadAds_withFailingPositioningSource_shouldNotLoadAds() {
-        ArgumentCaptor<PositioningListener> listenerCaptor =
-                ArgumentCaptor.forClass(PositioningListener.class);
-
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        verify(mockPositioningSource).loadPositions(
-                eq("test-ad-unit-id"), listenerCaptor.capture());
-        listenerCaptor.getValue().onFailed();
-        verify(mockAdLoadedListener, never()).onAdLoaded(anyInt());
-    }
-
-    @Test
-    public void destroy_shouldClearAdSource_shouldDestroyImpressionTracker_shouldDestroyResponse() {
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
-
-        subject = new MoPubStreamAdPlacer(context,
-                mockAdSource, mockImpressionTracker, mockPositioningSource);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        subject.handlePositioningLoad(positioning);
-        subject.handleAdsAvailable();
-        subject.setItemCount(2);  // Places 1 ad
-
-        subject.destroy();
-
-        verify(mockAdSource).clear();
-        verify(mockImpressionTracker).destroy();
-        verify(stubNativeResponse).destroy();
-    }
-
-    @Test
-    public void getAdView_withNullConvertView_callsRenderer_addsToImpressionTracker() {
-        View view = new View(context);
-        when(mockAdRenderer.createAdView(any(Context.class), any(ViewGroup.class)))
-                .thenReturn(view);
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        subject.handlePositioningLoad(positioning);
-        subject.handleAdsAvailable();
-        subject.setItemCount(100);
-
-        assertThat(subject.getAdView(1, null, null)).isEqualTo(view);
-        verify(mockAdRenderer).createAdView(any(Context.class), any(ViewGroup.class));
-        verify(mockAdRenderer).renderAdView(view, stubNativeResponse);
-        verify(mockImpressionTracker).addView(view, stubNativeResponse);
-    }
-
-    @Test
-    public void getAdView_withConvertView_callsRenderer_addsToImpressionTracker() {
-        View convertView = new View(context);
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        subject.handlePositioningLoad(positioning);
-        subject.handleAdsAvailable();
-        subject.setItemCount(4);
-
-        assertThat(subject.getAdView(1, convertView, null)).isEqualTo(convertView);
-        verify(mockAdRenderer, never()).createAdView(any(Context.class), any(ViewGroup.class));
-        verify(mockAdRenderer).renderAdView(convertView, stubNativeResponse);
-        verify(mockImpressionTracker).addView(convertView, stubNativeResponse);
-    }
-
-    @Test
-    public void getAdView_shouldRemoveViewFromImpressionTracker_shouldClearPreviousNativeResponse() throws Exception {
-        NativeResponse mockNativeResponse = mock(NativeResponse.class);
-        View mockView = mock(View.class);
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse, mockNativeResponse, stubNativeResponse);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        subject.handlePositioningLoad(positioning);
-        subject.handleAdsAvailable();
-        subject.setItemCount(100);
-
-        subject.getAdView(1, mockView, null);
-        verify(mockImpressionTracker).removeView(mockView);
-
-        // Second call should clear the first NativeResponse
-        subject.getAdView(3, mockView, null);
-        verify(mockImpressionTracker, times(2)).removeView(mockView);
-        verify(stubNativeResponse).clear(mockView);
-
-        // Third call should clear the second NativeResponse
-        subject.getAdView(5, mockView, null);
-        verify(mockImpressionTracker, times(3)).removeView(mockView);
-        verify(mockNativeResponse).clear(mockView);
-    }
-
-    @Test
-    public void getAdView_withNetworkImpressionTracker_shouldNotAddViewToImpressionTracker_shouldPrepareNativeResponse() throws Exception {
-        View mockView = mock(View.class);
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        subject.handlePositioningLoad(positioning);
-        subject.handleAdsAvailable();
-        subject.setItemCount(100);
-
-        when(stubNativeResponse.isOverridingImpressionTracker()).thenReturn(true);
-        subject.getAdView(1, mockView, null);
-
-        verify(mockImpressionTracker, never()).addView(any(View.class), any(NativeResponse.class));
-        verify(stubNativeResponse).prepare(mockView);
-    }
-
-    @Test
-    public void getAdView_withoutNetworkImpressionTracker_shouldAddViewToImpressionTracker_shouldPrepareNativeResponse() throws Exception {
-        View mockView = mock(View.class);
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        subject.handlePositioningLoad(positioning);
-        subject.handleAdsAvailable();
-        subject.setItemCount(100);
-
-        when(stubNativeResponse.isOverridingImpressionTracker()).thenReturn(false);
-        subject.getAdView(1, mockView, null);
-
-        verify(mockImpressionTracker).addView(mockView, stubNativeResponse);
-        verify(stubNativeResponse).prepare(mockView);
-    }
-
-    @Test
-    public void destroy_shouldClearAdSource_shouldDestroyImpressionTracker_shouldResetPlacementData() {
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
-
-        subject = new MoPubStreamAdPlacer(context,
-                mockAdSource, mockImpressionTracker, mockPositioningSource);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        subject.handlePositioningLoad(positioning);
-        subject.handleAdsAvailable();
-        subject.setItemCount(2);  // Places 1 ad
-
-        subject.destroy();
-
-        verify(mockAdSource).clear();
-        verify(mockImpressionTracker).destroy();
-        verify(stubNativeResponse).destroy();
-    }
-
-    @Test
-    public void modifyClientPositioning_afterConstructingAdPlacer_shouldNotModifyAdPositions() {
-        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        subject.handlePositioningLoad(positioning);
-        positioning.enableRepeatingPositions(5);
-
-        subject.handleAdsAvailable();
-        subject.setItemCount(4);
-        checkAdPositions(1, 3, 5);
-    }
-
-    void checkAdPositions(Integer... positions) {
-        List<Integer> expected = Arrays.asList(positions);
-        List<Integer> actual = new ArrayList<Integer>();
-        for (int i = 0; i < 20; i++) {
-            if (subject.isAd(i)) {
-                actual.add(i);
-                assertThat(subject.getAdData(i)).isNotNull();
-            } else {
-                assertThat(subject.getAdData(i)).isNull();
-            }
-        }
-
-        assertThat(actual).isEqualTo(expected);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdSourceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdSourceTest.java
deleted file mode 100644
index 13873d0c..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdSourceTest.java
+++ /dev/null
@@ -1,327 +0,0 @@
-package com.mopub.nativeads;
-
-import android.os.Handler;
-import android.os.SystemClock;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.shadows.ShadowSystemClock;
-
-import java.util.ArrayList;
-
-import static com.mopub.nativeads.NativeAdSource.AdSourceListener;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyLong;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class NativeAdSourceTest {
-    private NativeAdSource subject;
-    private ArrayList<TimestampWrapper<NativeResponse>> nativeAdCache;
-    private RequestParameters requestParameters;
-    private int defaultRetryTime;
-    private int maxRetryTime;
-
-    @Mock private AdSourceListener mockAdSourceListener;
-    @Mock private MoPubNative mockMoPubNative;
-    @Mock private NativeResponse mockNativeResponse;
-    @Mock private Handler mockReplenishCacheHandler;
-
-    @Before
-    public void setUp() {
-        nativeAdCache = new ArrayList<TimestampWrapper<NativeResponse>>(2);
-        subject = new NativeAdSource(nativeAdCache, mockReplenishCacheHandler);
-        subject.setAdSourceListener(mockAdSourceListener);
-
-        requestParameters = new RequestParameters.Builder().build();
-
-        defaultRetryTime = 1000;
-        maxRetryTime = 5*60*1000;
-
-        // XXX We need this to ensure that our SystemClock starts
-        ShadowSystemClock.uptimeMillis();
-    }
-
-    @Test
-    public void constructor_shouldInitializeCorrectly() {
-        assertThat(subject.mRequestInFlight).isFalse();
-        assertThat(subject.mSequenceNumber).isEqualTo(0);
-        assertThat(subject.mRetryTimeMilliseconds).isEqualTo(defaultRetryTime);
-    }
-
-    @Test
-    public void loadAds_shouldReplenishCache() {
-        subject.loadAds(requestParameters, mockMoPubNative);
-        assertThat(subject.mRequestInFlight).isTrue();
-        verify(mockMoPubNative).makeRequest(requestParameters, 0);
-    }
-
-    @Test
-    public void loadAds_shouldClearNativeAdSource() {
-        subject.setMoPubNative(mockMoPubNative);
-        TimestampWrapper<NativeResponse> timestampWrapper =
-                new TimestampWrapper<NativeResponse>(mock(NativeResponse.class));
-        nativeAdCache.add(timestampWrapper);
-        subject.mRequestInFlight = true;
-        subject.mSequenceNumber = 5;
-        subject.mRetryTimeMilliseconds = maxRetryTime;
-
-        subject.loadAds(requestParameters, mockMoPubNative);
-
-        verify(timestampWrapper.mInstance).destroy();
-        assertThat(nativeAdCache).isEmpty();
-        verify(mockMoPubNative).destroy();
-        verify(mockReplenishCacheHandler).removeMessages(0);
-        assertThat(subject.mSequenceNumber).isEqualTo(0);
-        assertThat(subject.mRetryTimeMilliseconds).isEqualTo(defaultRetryTime);
-
-        // new request has been kicked off
-        assertThat(subject.mRequestInFlight).isTrue();
-    }
-
-    @Test
-    public void loadAds_shouldDestroyPreviousMoPubNativeInstance() {
-        subject.loadAds(requestParameters, mockMoPubNative);
-        verify(mockMoPubNative, never()).destroy();
-
-        subject.loadAds(requestParameters, mockMoPubNative);
-        verify(mockMoPubNative).destroy();
-    }
-
-    @Test
-    public void clear_shouldDestroyMoPubNative_shouldClearNativeAdCache_shouldRemovePollHandlerMessages_shouldResetSequenceNumber_shouldResetRequestInFlight_shouldResetRetryTime() {
-        subject.setMoPubNative(mockMoPubNative);
-        TimestampWrapper<NativeResponse> timestampWrapper = new TimestampWrapper<NativeResponse>(mock(NativeResponse.class));
-        nativeAdCache.add(timestampWrapper);
-        subject.mRequestInFlight = true;
-        subject.mSequenceNumber = 5;
-        subject.mRetryTimeMilliseconds = maxRetryTime;
-
-        subject.clear();
-
-        verify(timestampWrapper.mInstance).destroy();
-        assertThat(nativeAdCache).isEmpty();
-        verify(mockMoPubNative).destroy();
-        verify(mockReplenishCacheHandler).removeMessages(0);
-        assertThat(subject.mRequestInFlight).isFalse();
-        assertThat(subject.mSequenceNumber).isEqualTo(0);
-        assertThat(subject.mRetryTimeMilliseconds).isEqualTo(defaultRetryTime);
-    }
-
-    @Test
-    public void dequeueAd_withNonStaleResponse_shouldReturnNativeResponse() {
-        subject.setMoPubNative(mockMoPubNative);
-        nativeAdCache.add(new TimestampWrapper<NativeResponse>(mockNativeResponse));
-
-        assertThat(subject.dequeueAd()).isEqualTo(mockNativeResponse);
-        assertThat(nativeAdCache).isEmpty();
-    }
-
-    @Test
-    public void dequeueAd_withStaleResponse_shouldReturnNativeResponse() {
-        subject.setMoPubNative(mockMoPubNative);
-
-        TimestampWrapper<NativeResponse> timestampWrapper = new TimestampWrapper<NativeResponse>(
-                mockNativeResponse);
-        timestampWrapper.mCreatedTimestamp = SystemClock.uptimeMillis() - (15*60*1000+1);
-        nativeAdCache.add(timestampWrapper);
-
-        assertThat(subject.dequeueAd()).isNull();
-        assertThat(nativeAdCache).isEmpty();
-    }
-
-    @Test
-    public void dequeueAd_noRequestInFlight_shouldReplenishCache() {
-        subject.setMoPubNative(mockMoPubNative);
-
-        nativeAdCache.add(new TimestampWrapper<NativeResponse>(mockNativeResponse));
-
-        assertThat(subject.dequeueAd()).isEqualTo(mockNativeResponse);
-
-        assertThat(nativeAdCache).isEmpty();
-        verify(mockReplenishCacheHandler).post(any(Runnable.class));
-    }
-
-    @Test
-    public void dequeueAd_requestInFlight_shouldNotReplenishCache() {
-        subject.setMoPubNative(mockMoPubNative);
-
-        nativeAdCache.add(new TimestampWrapper<NativeResponse>(mockNativeResponse));
-
-        subject.mRequestInFlight = true;
-        assertThat(subject.dequeueAd()).isEqualTo(mockNativeResponse);
-
-        assertThat(nativeAdCache).isEmpty();
-        verify(mockReplenishCacheHandler, never()).post(any(Runnable.class));
-    }
-
-    @Test
-    public void updateRetryTime_shouldUpdateRetryTimeUntilAt10Minutes() {
-        int retryTime = 0;
-        while (subject.mRetryTimeMilliseconds < maxRetryTime) {
-            subject.updateRetryTime();
-            retryTime = subject.mRetryTimeMilliseconds;
-        }
-
-        assertThat(retryTime).isEqualTo(maxRetryTime);
-
-        // assert it won't change anymore
-        subject.updateRetryTime();
-        assertThat(retryTime).isEqualTo(subject.mRetryTimeMilliseconds);
-    }
-
-    @Test
-    public void resetRetryTime_shouldSetRetryTimeTo1Second() {
-        assertThat(subject.mRetryTimeMilliseconds).isEqualTo(defaultRetryTime);
-
-        subject.updateRetryTime();
-        assertThat(subject.mRetryTimeMilliseconds).isGreaterThan(defaultRetryTime);
-
-        subject.resetRetryTime();
-        assertThat(subject.mRetryTimeMilliseconds).isEqualTo(defaultRetryTime);
-    }
-
-    @Test
-    public void replenishCache_shouldLoadNativeAd_shouldMarkRequestInFlight() {
-        subject.setMoPubNative(mockMoPubNative);
-
-        subject.replenishCache();
-
-        verify(mockMoPubNative).makeRequest(any(RequestParameters.class), eq(0));
-        assertThat(subject.mRequestInFlight).isTrue();
-    }
-
-    @Test
-    public void replenishCache_withRequestInFlight_shouldNotLoadNativeAd() {
-        subject.mRequestInFlight = true;
-        subject.setMoPubNative(mockMoPubNative);
-
-        subject.replenishCache();
-
-        verify(mockMoPubNative, never()).makeRequest(requestParameters, 0);
-        assertThat(subject.mRequestInFlight).isTrue();
-    }
-
-    @Test
-    public void replenishCache_withCacheSizeAtLimit_shouldNotLoadNativeAd() {
-        // Default cache size may change in the future and this test will have to be updated
-        nativeAdCache.add(mock(TimestampWrapper.class));
-        nativeAdCache.add(mock(TimestampWrapper.class));
-        nativeAdCache.add(mock(TimestampWrapper.class));
-
-        subject.setMoPubNative(mockMoPubNative);
-
-        subject.replenishCache();
-
-        verify(mockMoPubNative, never()).makeRequest(any(RequestParameters.class), any(Integer.class));
-        assertThat(subject.mRequestInFlight).isFalse();
-    }
-
-    @Test
-    public void moPubNativeNetworkListener_onNativeLoad_shouldAddToCache() {
-        subject.setMoPubNative(mockMoPubNative);
-        subject.getMoPubNativeNetworkListener().onNativeLoad(mockNativeResponse);
-
-        assertThat(nativeAdCache).hasSize(1);
-        assertThat(nativeAdCache.get(0).mInstance).isEqualTo(mockNativeResponse);
-    }
-
-    @Test
-    public void moPubNativeNetworkListener_onNativeLoad_withEmptyCache_shouldCallOnAdsAvailable() {
-        subject.setMoPubNative(mockMoPubNative);
-
-        assertThat(nativeAdCache).isEmpty();
-        subject.getMoPubNativeNetworkListener().onNativeLoad(mockNativeResponse);
-
-        assertThat(nativeAdCache).hasSize(1);
-        verify(mockAdSourceListener).onAdsAvailable();
-    }
-
-    @Test
-    public void moPubNativeNetworkListener_onNativeLoad_withNonEmptyCache_shouldNotCallOnAdsAvailable() {
-        subject.setMoPubNative(mockMoPubNative);
-
-        nativeAdCache.add(mock(TimestampWrapper.class));
-        subject.getMoPubNativeNetworkListener().onNativeLoad(mockNativeResponse);
-
-        assertThat(nativeAdCache).hasSize(2);
-        verify(mockAdSourceListener, never()).onAdsAvailable();
-    }
-
-    @Test
-    public void moPubNativeNetworkListener_onNativeLoad_shouldIncrementSequenceNumber_shouldResetRetryTime() {
-        subject.setMoPubNative(mockMoPubNative);
-
-        subject.mRetryTimeMilliseconds = maxRetryTime;
-        subject.mSequenceNumber = 5;
-
-        subject.getMoPubNativeNetworkListener().onNativeLoad(mockNativeResponse);
-
-        assertThat(subject.mRetryTimeMilliseconds).isEqualTo(defaultRetryTime);
-        assertThat(subject.mSequenceNumber).isEqualTo(6);
-    }
-
-    @Test
-    public void moPubNativeNetworkListener_onNativeLoad_withFullCache_shouldResetRequestInFlight() {
-        subject.setMoPubNative(mockMoPubNative);
-
-        subject.mRequestInFlight = true;
-
-        // fill cache
-        nativeAdCache.add(mock(TimestampWrapper.class));
-        nativeAdCache.add(mock(TimestampWrapper.class));
-        nativeAdCache.add(mock(TimestampWrapper.class));
-
-        subject.getMoPubNativeNetworkListener().onNativeLoad(mockNativeResponse);
-
-        assertThat(subject.mRequestInFlight).isEqualTo(false);
-    }
-
-    @Test
-    public void moPubNativeNetworkListener_onNativeLoad_withNonFullCache_shouldReplenishCache() {
-        subject.setMoPubNative(mockMoPubNative);
-
-        subject.mRequestInFlight = true;
-
-        subject.getMoPubNativeNetworkListener().onNativeLoad(mockNativeResponse);
-
-        assertThat(subject.mRequestInFlight).isEqualTo(true);
-        verify(mockMoPubNative).makeRequest(any(RequestParameters.class), eq(1));
-    }
-
-    @Test
-    public void
-    moPubNativeNetworkListener_onNativeFail_shouldResetInFlight_shouldUpdateRetryTime_shouldPostDelayedRunnable() {
-        subject.mRequestInFlight = true;
-        subject.mRetryTimeMilliseconds = defaultRetryTime;
-
-        subject.getMoPubNativeNetworkListener().onNativeFail(NativeErrorCode.UNSPECIFIED);
-
-        assertThat(subject.mRequestInFlight).isEqualTo(false);
-        assertThat(subject.mRetryInFlight).isEqualTo(true);
-        assertThat(subject.mRetryTimeMilliseconds).isGreaterThan(defaultRetryTime);
-        verify(mockReplenishCacheHandler).postDelayed(any(Runnable.class), eq((long)subject.mRetryTimeMilliseconds));
-    }
-
-    @Test
-    public void
-    moPubNativeNetworkListener_onNativeFail_maxRetryTime_shouldResetInflight_shouldResetRetryTime_shouldNotPostDelayedRunnable() {
-        subject.mRequestInFlight = true;
-        subject.mRetryTimeMilliseconds = maxRetryTime;
-
-        subject.getMoPubNativeNetworkListener().onNativeFail(NativeErrorCode.UNSPECIFIED);
-
-        assertThat(subject.mRequestInFlight).isEqualTo(false);
-        assertThat(subject.mRetryInFlight).isEqualTo(false);
-        assertThat(subject.mRetryTimeMilliseconds).isEqualTo(defaultRetryTime);
-        verify(mockReplenishCacheHandler, never()).postDelayed(any(Runnable.class), anyLong());
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
deleted file mode 100644
index d9b1ad7c..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
+++ /dev/null
@@ -1,137 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.Button;
-import android.widget.LinearLayout;
-import android.widget.RelativeLayout;
-import android.widget.TextView;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.Utils;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-public class NativeAdViewHelperTest {
-    private Activity context;
-    private RelativeLayout relativeLayout;
-    private ViewGroup viewGroup;
-    private BaseForwardingNativeAd mNativeAd;
-    private ViewBinder viewBinder;
-    private TextView titleView;
-    private TextView textView;
-    private TextView callToActionView;
-
-    @Mock private NativeResponse mockNativeResponse1;
-    @Mock private NativeResponse mockNativeResponse2;
-    @Mock private ImpressionTracker mockImpressionTracker;
-
-    @Before
-    public void setUp() throws Exception {
-        context = new Activity();
-        relativeLayout = new RelativeLayout(context);
-        relativeLayout.setId((int) Utils.generateUniqueId());
-        viewGroup = new LinearLayout(context);
-
-        mNativeAd = new BaseForwardingNativeAd() {};
-        mNativeAd.setTitle("test title");
-        mNativeAd.setText("test text");
-        mNativeAd.setCallToAction("test call to action");
-
-        titleView = new TextView(context);
-        titleView.setId((int) Utils.generateUniqueId());
-        textView = new TextView(context);
-        textView.setId((int) Utils.generateUniqueId());
-        callToActionView = new Button(context);
-        callToActionView.setId((int) Utils.generateUniqueId());
-
-        relativeLayout.addView(titleView);
-        relativeLayout.addView(textView);
-        relativeLayout.addView(callToActionView);
-
-        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
-                .titleId(titleView.getId())
-                .textId(textView.getId())
-                .callToActionId(callToActionView.getId())
-                .build();
-
-        when(mockNativeResponse1.isDestroyed()).thenReturn(false);
-        when(mockNativeResponse2.isDestroyed()).thenReturn(false);
-    }
-
-    @Test
-    public void getAdView_shouldReturnPopulatedView() throws Exception {
-        when(mockNativeResponse1.getTitle()).thenReturn("test title");
-        when(mockNativeResponse1.getText()).thenReturn("test text");
-        when(mockNativeResponse1.getCallToAction()).thenReturn("test call to action");
-
-        View view = NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse1, viewBinder);
-
-        assertThat(((TextView)view.findViewById(titleView.getId())).getText()).isEqualTo("test title");
-        assertThat(((TextView)view.findViewById(textView.getId())).getText()).isEqualTo("test text");
-        assertThat(((TextView)view.findViewById(callToActionView.getId())).getText()).isEqualTo("test call to action");
-
-        // not testing images due to testing complexity
-    }
-
-    @Test
-    public void getAdView_withDestroyedNativeResponse_shouldReturnGONEConvertView() throws Exception {
-        when(mockNativeResponse1.isDestroyed()).thenReturn(true);
-        View view = NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse1, viewBinder);
-
-        assertThat(view).isEqualTo(relativeLayout);
-        assertThat(view.getVisibility()).isEqualTo(View.GONE);
-    }
-    
-    @Test
-    public void getAdView_shouldRemoveViewFromImpressionTracker_shouldClearPreviousNativeResponse() throws Exception {
-        NativeAdViewHelper.sImpressionTrackerMap.put(context, mockImpressionTracker);
-
-        NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse1, viewBinder);
-        verify(mockImpressionTracker).removeView(relativeLayout);
-
-        // Second call should clear the first NativeResponse
-        NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse2, viewBinder);
-        verify(mockImpressionTracker, times(2)).removeView(relativeLayout);
-        verify(mockNativeResponse1).clear(relativeLayout);
-
-        // Third call should clear the second NativeResponse
-        NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse1, viewBinder);
-        verify(mockImpressionTracker, times(3)).removeView(relativeLayout);
-        verify(mockNativeResponse2).clear(relativeLayout);
-    }
-
-    @Test
-    public void getAdView_withNetworkImpressionTracker_shouldNotAddViewToImpressionTracker_shouldPrepareNativeResponse() throws Exception {
-        NativeAdViewHelper.sImpressionTrackerMap.put(context, mockImpressionTracker);
-        when(mockNativeResponse1.isOverridingImpressionTracker()).thenReturn(true);
-
-        NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse1, viewBinder);
-
-        verify(mockImpressionTracker, never()).addView(any(View.class), any(NativeResponse.class));
-        verify(mockNativeResponse1).prepare(relativeLayout);
-    }
-
-    @Test
-    public void getAdView_withoutNetworkImpressionTracker_shouldAddViewToImpressionTracker_shouldPrepareNativeResponse() throws Exception {
-        NativeAdViewHelper.sImpressionTrackerMap.put(context, mockImpressionTracker);
-        when(mockNativeResponse1.isOverridingImpressionTracker()).thenReturn(false);
-
-        NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse1, viewBinder);
-
-        verify(mockImpressionTracker).addView(relativeLayout, mockNativeResponse1);
-        verify(mockNativeResponse1).prepare(relativeLayout);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java
deleted file mode 100644
index af562b2c..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java
+++ /dev/null
@@ -1,330 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.support.annotation.NonNull;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.Button;
-import android.widget.LinearLayout;
-import android.widget.RelativeLayout;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.Utils;
-import com.mopub.network.MoPubRequestQueue;
-import com.mopub.network.Networking;
-import com.mopub.volley.Request;
-import com.mopub.volley.RequestQueue;
-
-import org.junit.Before;
-import org.junit.Ignore;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-
-import java.util.List;
-import java.util.Map;
-
-import static com.mopub.nativeads.MoPubNative.EMPTY_EVENT_LISTENER;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyZeroInteractions;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-public class NativeResponseTest {
-
-    private NativeResponse subject;
-    private BaseForwardingNativeAd mNativeAd;
-    private Activity context;
-    private ViewGroup view;
-    private MoPubNative.MoPubNativeListener moPubNativeListener;
-    private NativeResponse subjectWMockBaseNativeAd;
-    private NativeAdInterface mMockNativeAd;
-    private boolean baseNativeAdRecordedImpression;
-    private boolean baseNativeAdIsClicked;
-    @Mock
-    private MoPubRequestQueue mockRequestQueue;
-
-
-    @Before
-    public void setUp() throws Exception {
-        context = new Activity();
-        mNativeAd = new BaseForwardingNativeAd() {
-            @Override
-            public void recordImpression() {
-                baseNativeAdRecordedImpression = true;
-            }
-
-            @Override
-            public void handleClick(@NonNull final View view) {
-                baseNativeAdIsClicked = true;
-            }
-        };
-        mNativeAd.setTitle("title");
-        mNativeAd.setText("text");
-        mNativeAd.setMainImageUrl("mainImageUrl");
-        mNativeAd.setIconImageUrl("iconImageUrl");
-        mNativeAd.setClickDestinationUrl("clickDestinationUrl");
-        mNativeAd.setCallToAction("callToAction");
-        mNativeAd.addExtra("extra", "extraValue");
-        mNativeAd.addExtra("extraImage", "extraImageUrl");
-        mNativeAd.addImpressionTracker("impressionUrl");
-        mNativeAd.setImpressionMinTimeViewed(500);
-
-        view = new LinearLayout(context);
-
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-
-        moPubNativeListener = mock(MoPubNative.MoPubNativeListener.class);
-
-        subject = new NativeResponse(context,
-                "moPubImpressionTrackerUrl",
-                "moPubClickTrackerUrl",
-                "adunit_id", mNativeAd, moPubNativeListener);
-
-        mMockNativeAd = mock(NativeAdInterface.class);
-        subjectWMockBaseNativeAd = new NativeResponse(context,
-                "moPubImpressionTrackerUrl",
-                "moPubClickTrackerUrl",
-                "adunit_id", mMockNativeAd, moPubNativeListener);
-    }
-
-    @Test
-    public void constructor_shouldSetNativeEventListenerOnNativeAdInterface() {
-        reset(mMockNativeAd);
-        subject = new NativeResponse(context, "moPubImpressionTrackerUrl", "moPubClickTrackerUrl",
-                "adunit_id", mMockNativeAd, moPubNativeListener);
-        verify(mMockNativeAd).setNativeEventListener(any(BaseForwardingNativeAd.NativeEventListener.class));
-    }
-
-    @Test
-    public void getTitle_shouldReturnTitleFromBaseNativeAd() {
-        assertThat(subject.getTitle()).isEqualTo("title");
-    }
-
-    @Test
-    public void getTitle_shouldReturnTextFromBaseNativeAd() {
-        assertThat(subject.getText()).isEqualTo("text");
-    }
-
-    @Test
-    public void getMainImageUrl_shouldReturnMainImageUrlFromBaseNativeAd() {
-        assertThat(subject.getMainImageUrl()).isEqualTo("mainImageUrl");
-    }
-
-    @Test
-    public void getIconImageUrl_shouldReturnIconImageUrlFromBaseNativeAd() {
-        assertThat(subject.getIconImageUrl()).isEqualTo("iconImageUrl");
-    }
-
-    @Test
-    public void getClickDestinationUrl_shouldReturnClickDestinationUrlFromBaseNativeAd() {
-        assertThat(subject.getClickDestinationUrl()).isEqualTo("clickDestinationUrl");
-    }
-
-    @Test
-    public void getCallToAction_shouldReturnCallToActionFromBaseNativeAd() {
-        assertThat(subject.getCallToAction()).isEqualTo("callToAction");
-    }
-
-    @Test
-    public void getExtra_shouldReturnExtraFromBaseNativeAd() {
-        assertThat(subject.getExtra("extra")).isEqualTo("extraValue");
-    }
-
-    @Test
-    public void getExtras_shouldReturnCopyOfExtrasMapFromBaseNativeAd() {
-        final Map<String, Object> extras = subject.getExtras();
-        assertThat(extras.size()).isEqualTo(2);
-        assertThat(extras.get("extra")).isEqualTo("extraValue");
-        assertThat(extras.get("extraImage")).isEqualTo("extraImageUrl");
-        assertThat(extras).isNotSameAs(mNativeAd.getExtras());
-    }
-
-    @Test
-    public void getImpressionTrackers_shouldReturnImpressionTrackersFromMoPubAndFromBaseNativeAd() {
-        final List<String> impressionTrackers = subject.getImpressionTrackers();
-        assertThat(impressionTrackers).containsOnly("moPubImpressionTrackerUrl", "impressionUrl");
-    }
-
-    @Test
-    public void getImpressionMinTimeViewed_shouldReturnImpressionMinTimeViewedFromBaseNativeAd() {
-        assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(500);
-    }
-
-    @Test
-    public void getImpressionMinPercentageViewed_shouldReturnImpressionMinPercentageViewedFromBaseNativeAd() {
-        assertThat(subject.getImpressionMinPercentageViewed()).isEqualTo(50);
-    }
-
-    @Test
-    public void getClickTracker_shouldReturnMoPubClickTracker() {
-        assertThat(subject.getClickTracker()).isEqualTo("moPubClickTrackerUrl");
-    }
-
-    @Test
-    public void prepare_shouldCallPrepareOnBaseNativeAd() {
-        subjectWMockBaseNativeAd.prepare(view);
-        verify(mMockNativeAd).prepare(view);
-    }
-
-    @Test
-    public void prepare_whenDestroyed_shouldReturnFast() {
-        subjectWMockBaseNativeAd.destroy();
-        subjectWMockBaseNativeAd.prepare(view);
-        verify(mMockNativeAd, never()).prepare(view);
-    }
-    
-    @Test
-    public void prepare_withOverridingeClickTracker_shouldNotSetOnClickListener() throws Exception {
-        when(mMockNativeAd.isOverridingClickTracker()).thenReturn(true);
-        View view = mock(View.class);
-        subjectWMockBaseNativeAd.prepare(view);
-        verify(view, never()).setOnClickListener(any(NativeResponse.NativeViewClickListener.class));
-    }
-
-    @Test
-    public void prepare_withoutOverridingClickTracker_shouldSetOnClickListener() throws Exception {
-        when(mMockNativeAd.isOverridingClickTracker()).thenReturn(false);
-        View view = mock(View.class);
-        subjectWMockBaseNativeAd.prepare(view);
-        verify(view).setOnClickListener(any(NativeResponse.NativeViewClickListener.class));
-    }
-
-    @Test
-    public void prepare_shouldAttachClickListenersToViewTree() {
-        RelativeLayout relativeLayout = new RelativeLayout(context);
-        Button callToActionView = new Button(context);
-        callToActionView.setId((int) Utils.generateUniqueId());
-        relativeLayout.addView(callToActionView);
-
-        assertThat(relativeLayout.performClick()).isFalse();
-        assertThat(callToActionView.performClick()).isFalse();
-
-        subject.prepare(relativeLayout);
-
-        assertThat(relativeLayout.performClick()).isTrue();
-        assertThat(callToActionView.performClick()).isTrue();
-    }
-
-    @Test
-    public void recordImpression_shouldRecordImpressionsAndCallIntoBaseNativeAdAndNotifyListenerIdempotently() {
-        assertThat(subject.getRecordedImpression()).isFalse();
-
-        subject.recordImpression(view);
-
-        assertThat(subject.getRecordedImpression()).isTrue();
-
-        assertThat(baseNativeAdRecordedImpression).isTrue();
-        verify(moPubNativeListener).onNativeImpression(view);
-        // There are two impression trackers here.
-        verify(mockRequestQueue, times(2)).add(any(Request.class));
-
-        // reset state
-        baseNativeAdRecordedImpression = false;
-        reset(moPubNativeListener);
-        reset(mockRequestQueue);
-
-        // verify impression tracking doesn't fire again
-        subject.recordImpression(view);
-        assertThat(subject.getRecordedImpression()).isTrue();
-        assertThat(baseNativeAdRecordedImpression).isFalse();
-        verify(moPubNativeListener, never()).onNativeImpression(view);
-        verify(mockRequestQueue, never()).add(any(Request.class));
-    }
-
-    @Test
-    public void recordImpression_whenDestroyed_shouldReturnFast() {
-        subject.destroy();
-        subject.recordImpression(view);
-        assertThat(subject.getRecordedImpression()).isFalse();
-        assertThat(baseNativeAdRecordedImpression).isFalse();
-        verify(moPubNativeListener, never()).onNativeImpression(view);
-        verify(mockRequestQueue, never()).add(any(Request.class));
-    }
-
-    @Test
-    public void handleClick_withNoBaseNativeAdClickDestinationUrl_shouldRecordClickAndCallIntoBaseNativeAdAndNotifyListener() {
-        assertThat(subject.isClicked()).isFalse();
-
-        subject.handleClick(view);
-
-        assertThat(subject.isClicked()).isTrue();
-
-        assertThat(baseNativeAdIsClicked).isTrue();
-        verify(moPubNativeListener).onNativeClick(view);
-        verify(mockRequestQueue).add(any(Request.class));
-
-        // reset state
-        baseNativeAdIsClicked = false;
-        reset(moPubNativeListener);
-        reset(mockRequestQueue);
-
-        // second time, tracking does not fire
-        subject.handleClick(view);
-        assertThat(subject.isClicked()).isTrue();
-        assertThat(baseNativeAdRecordedImpression).isFalse();
-        verify(moPubNativeListener).onNativeClick(view);
-        verifyZeroInteractions(mockRequestQueue);
-    }
-
-    @Ignore("pending")
-    @Test
-    public void handleClick_withBaseNativeAdClickDestinationUrl_shouldRecordClickAndCallIntoBaseNativeAdAndOpenClickDestinationAndNotifyListener() {
-        // Really difficult to test url resolution since it doesn't use the apache http client
-    }
-
-    @Test
-    public void handleClick_whenDestroyed_shouldReturnFast() {
-        subject.destroy();
-        subject.handleClick(view);
-        assertThat(subject.isClicked()).isFalse();
-        assertThat(baseNativeAdIsClicked).isFalse();
-        verify(moPubNativeListener, never()).onNativeClick(view);
-        verifyZeroInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void destroy_shouldCallIntoBaseNativeAd() {
-        subjectWMockBaseNativeAd.destroy();
-        assertThat(subjectWMockBaseNativeAd.isDestroyed()).isTrue();
-        verify(mMockNativeAd).destroy();
-
-        reset(mMockNativeAd);
-
-        subjectWMockBaseNativeAd.destroy();
-        verify(mMockNativeAd, never()).destroy();
-    }
-
-    @Test
-    public void destroy_shouldSetMoPubNativeEventListenerToEmptyMoPubNativeListener() {
-        assertThat(subjectWMockBaseNativeAd.getMoPubNativeEventListener()).isSameAs(moPubNativeListener);
-
-        subjectWMockBaseNativeAd.destroy();
-
-        assertThat(subjectWMockBaseNativeAd.getMoPubNativeEventListener()).isSameAs(EMPTY_EVENT_LISTENER);
-    }
-
-    // NativeViewClickListener tests
-    @Test
-    public void NativeViewClickListener_onClick_shouldQueueClickTrackerAndUrlResolutionTasks() {
-        subject = mock(NativeResponse.class);
-        NativeResponse.NativeViewClickListener nativeViewClickListener = subject.new NativeViewClickListener();
-
-        View view = new View(context);
-        nativeViewClickListener.onClick(view);
-        verify(subject).handleClick(view);
-    }
-
-    @Ignore("pending")
-    @Test
-    public void loadExtrasImage_shouldAsyncLoadImages() {
-        // no easy way to test this since nothing can be mocked
-        // also not a critical test since it directly calls another service
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
deleted file mode 100644
index 7d7f96bb..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
+++ /dev/null
@@ -1,297 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.location.Location;
-import android.location.LocationManager;
-import android.net.Uri;
-import android.telephony.TelephonyManager;
-import android.text.TextUtils;
-
-import com.mopub.common.MoPub;
-import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowLocationManager;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.EnumSet;
-import java.util.List;
-
-import static android.Manifest.permission.ACCESS_NETWORK_STATE;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.robolectric.Robolectric.application;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(SdkTestRunner.class)
-@Config(shadows = {MoPubShadowTelephonyManager.class})
-public class NativeUrlGeneratorTest {
-    public static final String AD_UNIT_ID = "1234";
-    private Activity context;
-    private NativeUrlGenerator subject;
-    private MoPubShadowTelephonyManager shadowTelephonyManager;
-
-    @Before
-    public void setup() {
-        context = new Activity();
-        shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
-        shadowTelephonyManager = (MoPubShadowTelephonyManager)
-                shadowOf((TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE));
-    }
-
-    @Test
-    public void generateNativeAdUrl_shouldIncludeDesiredAssetIfSet() throws Exception {
-        EnumSet<RequestParameters.NativeAdAsset> assetsSet = EnumSet.of(RequestParameters.NativeAdAsset.TITLE);
-        RequestParameters requestParameters = new RequestParameters.Builder().desiredAssets(assetsSet).build();
-
-        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID).withRequest(requestParameters);
-
-        String requestString = generateMinimumUrlString();
-        List<String> desiredAssets = getDesiredAssetsListFromRequestUrlString(requestString);
-
-        assertThat(desiredAssets.size()).isEqualTo(1);
-        assertThat(desiredAssets).contains("title");
-    }
-
-    @Test
-    public void generateNativeAdUrl_shouldIncludeDesiredAssetsIfSet() throws Exception {
-        EnumSet<RequestParameters.NativeAdAsset> assetsSet = EnumSet.of(RequestParameters.NativeAdAsset.TITLE, RequestParameters.NativeAdAsset.TEXT, RequestParameters.NativeAdAsset.ICON_IMAGE);
-        RequestParameters requestParameters = new RequestParameters.Builder().desiredAssets(assetsSet).build();
-
-        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID).withRequest(requestParameters);
-
-        String requestString = generateMinimumUrlString();
-        List<String> desiredAssets = getDesiredAssetsListFromRequestUrlString(requestString);
-
-        assertThat(desiredAssets.size()).isEqualTo(3);
-        assertThat(desiredAssets).contains("title", "text", "iconimage");
-    }
-
-    @Test
-    public void generateNativeAdUrl_shouldNotIncludeDesiredAssetsIfNotSet() throws Exception {
-        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
-
-        String requestString = generateMinimumUrlString();
-        List<String> desiredAssets = getDesiredAssetsListFromRequestUrlString(requestString);
-
-        assertThat(desiredAssets.size()).isEqualTo(0);
-    }
-
-    @Test
-    public void generateNativeAdUrl_shouldNotIncludeDesiredAssetsIfNoAssetsAreSet() throws Exception {
-        EnumSet<RequestParameters.NativeAdAsset> assetsSet = EnumSet.noneOf(RequestParameters.NativeAdAsset.class);
-        RequestParameters requestParameters = new RequestParameters.Builder().desiredAssets(assetsSet).build();
-
-        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID).withRequest(requestParameters);
-
-        String requestString = generateMinimumUrlString();
-        List<String> desiredAssets = getDesiredAssetsListFromRequestUrlString(requestString);
-
-        assertThat(desiredAssets.size()).isEqualTo(0);
-    }
-
-    @Test
-    public void generateNativeAdUrl_needsButDoesNotHaveReadPhoneState_shouldNotContainOperatorName() {
-        shadowTelephonyManager.setNeedsReadPhoneState(true);
-        shadowTelephonyManager.setReadPhoneStatePermission(false);
-        shadowTelephonyManager.setNetworkOperatorName("TEST_CARRIER");
-
-        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
-        String requestString = generateMinimumUrlString();
-
-        assertThat(getNetworkOperatorNameFromRequestUrl(requestString)).isNullOrEmpty();
-    }
-    
-    @Test
-    public void generateNativeAdUrl_needsAndHasReadPhoneState_shouldContainOperatorName() {
-        shadowTelephonyManager.setNeedsReadPhoneState(true);
-        shadowTelephonyManager.setReadPhoneStatePermission(true);
-        shadowTelephonyManager.setNetworkOperatorName("TEST_CARRIER");
-
-        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
-        String requestString = generateMinimumUrlString();
-
-        assertThat(getNetworkOperatorNameFromRequestUrl(requestString)).isEqualTo("TEST_CARRIER");
-    }
-
-    @Test
-    public void generateNativeAdUrl_doesNotNeedReadPhoneState_shouldContainOperatorName() {
-        shadowTelephonyManager.setNeedsReadPhoneState(false);
-        shadowTelephonyManager.setReadPhoneStatePermission(false);
-        shadowTelephonyManager.setNetworkOperatorName("TEST_CARRIER");
-
-        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
-        String requestString = generateMinimumUrlString();
-
-        assertThat(getNetworkOperatorNameFromRequestUrl(requestString)).isEqualTo("TEST_CARRIER");
-    }
-
-    @Test
-    public void generateAdUrl_whenLocationServiceGpsProviderHasMostRecentLocation_shouldUseLocationServiceValue() {
-        Location locationFromDeveloper = new Location("");
-        locationFromDeveloper.setLatitude(42);
-        locationFromDeveloper.setLongitude(-42);
-        locationFromDeveloper.setAccuracy(3.5f);
-        locationFromDeveloper.setTime(1000);
-
-        // Mock out the LocationManager's last known location to be more recent than the
-        // developer-supplied location.
-        ShadowLocationManager shadowLocationManager = Robolectric.shadowOf(
-                (LocationManager) application.getSystemService(Context.LOCATION_SERVICE));
-        Location locationFromSdk = new Location("");
-        locationFromSdk.setLatitude(37);
-        locationFromSdk.setLongitude(-122);
-        locationFromSdk.setAccuracy(5.0f);
-        locationFromSdk.setTime(2000);
-        shadowLocationManager.setLastKnownLocation(LocationManager.GPS_PROVIDER, locationFromSdk);
-
-        RequestParameters requestParameters = new RequestParameters.Builder()
-                .location(locationFromDeveloper)
-                .build();
-        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
-        String adUrl = subject.withRequest(requestParameters)
-                .generateUrlString("ads.mopub.com");
-        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isEqualTo("37.0,-122.0");
-        assertThat(getParameterFromRequestUrl(adUrl, "lla")).isEqualTo("5");
-        assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEqualTo("1");
-    }
-
-    @Test
-    public void generateAdUrl_whenDeveloperSuppliesMoreRecentLocationThanLocationService_shouldUseDeveloperSuppliedLocation() {
-        Location locationFromDeveloper = new Location("");
-        locationFromDeveloper.setLatitude(42);
-        locationFromDeveloper.setLongitude(-42);
-        locationFromDeveloper.setAccuracy(3.5f);
-        locationFromDeveloper.setTime(1000);
-
-        ShadowLocationManager shadowLocationManager = Robolectric.shadowOf(
-                (LocationManager) application.getSystemService(Context.LOCATION_SERVICE));
-
-        // Mock out the LocationManager's last known location to be older than the
-        // developer-supplied location.
-        Location olderLocation = new Location("");
-        olderLocation.setLatitude(40);
-        olderLocation.setLongitude(-105);
-        olderLocation.setAccuracy(8.0f);
-        olderLocation.setTime(500);
-        shadowLocationManager.setLastKnownLocation(LocationManager.GPS_PROVIDER, olderLocation);
-
-        RequestParameters requestParameters = new RequestParameters.Builder()
-                .location(locationFromDeveloper)
-                .build();
-        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
-        String adUrl = subject.withRequest(requestParameters)
-                .generateUrlString("ads.mopub.com");
-        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isEqualTo("42.0,-42.0");
-        assertThat(getParameterFromRequestUrl(adUrl, "lla")).isEqualTo("3");
-        assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEmpty();
-    }
-
-    @Test
-    public void generateAdUrl_whenLocationServiceNetworkProviderHasMostRecentLocation_shouldUseLocationServiceValue() {
-        Location locationFromDeveloper = new Location("");
-        locationFromDeveloper.setLatitude(42);
-        locationFromDeveloper.setLongitude(-42);
-        locationFromDeveloper.setAccuracy(3.5f);
-        locationFromDeveloper.setTime(1000);
-
-        // Mock out the LocationManager's last known location to be more recent than the
-        // developer-supplied location.
-        ShadowLocationManager shadowLocationManager = Robolectric.shadowOf(
-                (LocationManager) application.getSystemService(Context.LOCATION_SERVICE));
-        Location locationFromSdk = new Location("");
-        locationFromSdk.setLatitude(38);
-        locationFromSdk.setLongitude(-123);
-        locationFromSdk.setAccuracy(5.0f);
-        locationFromSdk.setTime(2000);
-        shadowLocationManager.setLastKnownLocation(LocationManager.NETWORK_PROVIDER,
-                locationFromSdk);
-
-        RequestParameters requestParameters = new RequestParameters.Builder()
-                .location(locationFromDeveloper)
-                .build();
-        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
-        String adUrl = subject.withRequest(requestParameters)
-                .generateUrlString("ads.mopub.com");
-        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isEqualTo("38.0,-123.0");
-        assertThat(getParameterFromRequestUrl(adUrl, "lla")).isEqualTo("5");
-        assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEqualTo("1");
-    }
-
-    @Test
-    public void enableLocation_shouldIncludeLocationInUrl() {
-        MoPub.setLocationAwareness(MoPub.LocationAwareness.NORMAL);
-        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
-
-        String requestString = generateMinimumUrlString();
-        assertThat(getParameterFromRequestUrl(requestString, "ll")).isNotNull();
-    }
-
-    @Test
-    public void disableLocation_shouldNotIncludeLocationInUrl() {
-        MoPub.setLocationAwareness(MoPub.LocationAwareness.DISABLED);
-        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
-
-        String requestString = generateMinimumUrlString();
-        assertThat(getParameterFromRequestUrl(requestString, "ll")).isNullOrEmpty();
-    }
-
-    @Test
-    public void disableLocationCollection_whenLocationServiceHasMostRecentLocation_shouldNotIncludeLocationInUrl() {
-        MoPub.setLocationAwareness(MoPub.LocationAwareness.DISABLED);
-        subject = new NativeUrlGenerator(context);
-
-        // Mock out the LocationManager's last known location.
-        ShadowLocationManager shadowLocationManager = Robolectric.shadowOf(
-                (LocationManager) application.getSystemService(Context.LOCATION_SERVICE));
-        Location locationFromSdk = new Location("");
-        locationFromSdk.setLatitude(37);
-        locationFromSdk.setLongitude(-122);
-        locationFromSdk.setAccuracy(5.0f);
-        locationFromSdk.setTime(2000);
-        shadowLocationManager.setLastKnownLocation(LocationManager.GPS_PROVIDER, locationFromSdk);
-
-        String requestString = generateMinimumUrlString();
-        assertThat(getParameterFromRequestUrl(requestString, "ll")).isNullOrEmpty();
-    }
-
-    private List<String> getDesiredAssetsListFromRequestUrlString(String requestString) {
-        Uri requestUri = Uri.parse(requestString);
-
-        String desiredAssetsString = requestUri.getQueryParameter("assets");
-        return (desiredAssetsString == null) ? new ArrayList<String>() : Arrays.asList(desiredAssetsString.split(","));
-    }
-
-    private String getNetworkOperatorNameFromRequestUrl(String requestString) {
-        Uri requestUri = Uri.parse(requestString);
-
-        String networkOperatorName = requestUri.getQueryParameter("cn");
-
-        if (TextUtils.isEmpty(networkOperatorName)) {
-            return "";
-        }
-
-        return networkOperatorName;
-    }
-
-    private String getParameterFromRequestUrl(String requestString, String key) {
-        Uri requestUri = Uri.parse(requestString);
-        String parameter = requestUri.getQueryParameter(key);
-
-        if (TextUtils.isEmpty(parameter)) {
-            return "";
-        }
-
-        return parameter;
-    }
-
-    private String generateMinimumUrlString() {
-        return subject.generateUrlString("ads.mopub.com");
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeViewHolderTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeViewHolderTest.java
deleted file mode 100644
index 1be4c674..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeViewHolderTest.java
+++ /dev/null
@@ -1,390 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.graphics.drawable.BitmapDrawable;
-import android.view.ViewGroup;
-import android.widget.Button;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
-import android.widget.RelativeLayout;
-import android.widget.TextView;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.Utils;
-import com.mopub.network.MaxWidthImageLoader;
-import com.mopub.network.MoPubRequestQueue;
-import com.mopub.network.Networking;
-import com.mopub.volley.RequestQueue;
-import com.mopub.volley.toolbox.ImageLoader;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Captor;
-import org.mockito.Mock;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class NativeViewHolderTest {
-    private Context context;
-    private RelativeLayout relativeLayout;
-    private ViewGroup viewGroup;
-    private NativeResponse nativeResponse;
-    private ViewBinder viewBinder;
-    private MoPubNative.MoPubNativeListener mopubNativeListener;
-    private TextView titleView;
-    private TextView textView;
-    private TextView callToActionView;
-    private ImageView mainImageView;
-    private ImageView iconImageView;
-    private TextView extrasTextView;
-    private ImageView extrasImageView;
-    private ImageView extrasImageView2;
-    private String mainImageUrl;
-    private String iconImageUrl;
-    private String mainImageData;
-    private String iconImageData;
-    private Bitmap iconImage;
-    private Bitmap mainImage;
-    private String extrasImageData;
-    private String extrasImageData2;
-    private Bitmap extrasImage2;
-    private Bitmap extrasImage;
-
-    private static final String IMPRESSION_URL = "http://example.com";
-    private static final String CLICK_URL = "http://test.com";
-    private static final String AD_UNIT_ID = "http://blah.org";
-
-    @Mock
-    private MoPubRequestQueue mockRequestQueue;
-    @Mock
-    private MaxWidthImageLoader mockImageLoader;
-    @Mock
-    private ImageLoader.ImageContainer mockImageContainer;
-    @Mock
-    private Bitmap mockBitmap;
-
-    @Captor
-    private ArgumentCaptor<ImageLoader.ImageListener> mainImageCaptor;
-    @Captor
-    private ArgumentCaptor<ImageLoader.ImageListener> iconImageCaptor;
-
-
-    @Before
-    public void setUp() throws Exception {
-
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-        Networking.setImageLoaderForTesting(mockImageLoader);
-        context = new Activity();
-        relativeLayout = new RelativeLayout(context);
-        relativeLayout.setId((int) Utils.generateUniqueId());
-        viewGroup = new LinearLayout(context);
-
-        // Fields in the web ui
-        titleView = new TextView(context);
-        titleView.setId((int) Utils.generateUniqueId());
-        textView = new TextView(context);
-        textView.setId((int) Utils.generateUniqueId());
-        callToActionView = new Button(context);
-        callToActionView.setId((int) Utils.generateUniqueId());
-        mainImageView = new ImageView(context);
-        mainImageView.setId((int) Utils.generateUniqueId());
-        iconImageView = new ImageView(context);
-        iconImageView.setId((int) Utils.generateUniqueId());
-
-        // Extras
-        extrasTextView = new TextView(context);
-        extrasTextView.setId((int) Utils.generateUniqueId());
-        extrasImageView = new ImageView(context);
-        extrasImageView.setId((int) Utils.generateUniqueId());
-        extrasImageView2 = new ImageView(context);
-        extrasImageView2.setId((int) Utils.generateUniqueId());
-
-        relativeLayout.addView(titleView);
-        relativeLayout.addView(textView);
-        relativeLayout.addView(callToActionView);
-        relativeLayout.addView(mainImageView);
-        relativeLayout.addView(iconImageView);
-        relativeLayout.addView(extrasTextView);
-        relativeLayout.addView(extrasImageView);
-        relativeLayout.addView(extrasImageView2);
-
-        mainImageUrl = "mainimageurl";
-        iconImageUrl = "iconimageurl";
-        mainImageData = "mainimagedata";
-        iconImageData = "iconimagedata";
-        extrasImageData = "extrasimagedata";
-        extrasImageData2 = "extrasimagedata2";
-        iconImage = BitmapFactory.decodeByteArray(iconImageData.getBytes(), 0, iconImageData.getBytes().length);
-        mainImage = BitmapFactory.decodeByteArray(mainImageData.getBytes(), 0, mainImageData.getBytes().length);
-        extrasImage = BitmapFactory.decodeByteArray(extrasImageData.getBytes(), 0, extrasImageData.getBytes().length);
-        extrasImage2 = BitmapFactory.decodeByteArray(extrasImageData2.getBytes(), 0, extrasImageData2.getBytes().length);
-    }
-
-    @Test
-    public void fromViewBinder_shouldPopulateClassFields() throws Exception {
-        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
-                .titleId(titleView.getId())
-                .textId(textView.getId())
-                .callToActionId(callToActionView.getId())
-                .mainImageId(mainImageView.getId())
-                .iconImageId(iconImageView.getId())
-                .build();
-
-        NativeViewHolder nativeViewHolder =
-                NativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
-
-        assertThat(nativeViewHolder.titleView).isEqualTo(titleView);
-        assertThat(nativeViewHolder.textView).isEqualTo(textView);
-        assertThat(nativeViewHolder.callToActionView).isEqualTo(callToActionView);
-        assertThat(nativeViewHolder.mainImageView).isEqualTo(mainImageView);
-        assertThat(nativeViewHolder.iconImageView).isEqualTo(iconImageView);
-    }
-
-    @Test
-    public void fromViewBinder_withSubsetOfFields_shouldLeaveOtherFieldsNull() throws Exception {
-        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
-                .titleId(titleView.getId())
-                .iconImageId(iconImageView.getId())
-                .build();
-
-        NativeViewHolder nativeViewHolder =
-                NativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
-
-        assertThat(nativeViewHolder.titleView).isEqualTo(titleView);
-        assertThat(nativeViewHolder.textView).isNull();
-        assertThat(nativeViewHolder.callToActionView).isNull();
-        assertThat(nativeViewHolder.mainImageView).isNull();
-        assertThat(nativeViewHolder.iconImageView).isEqualTo(iconImageView);
-    }
-
-    @Test
-    public void fromViewBinder_withNonExistantIds_shouldLeaveFieldsNull() throws Exception {
-        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
-                .titleId((int) Utils.generateUniqueId())
-                .textId((int) Utils.generateUniqueId())
-                .callToActionId((int) Utils.generateUniqueId())
-                .mainImageId((int) Utils.generateUniqueId())
-                .iconImageId((int) Utils.generateUniqueId())
-                .build();
-
-        NativeViewHolder nativeViewHolder =
-                NativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
-
-        assertThat(nativeViewHolder.titleView).isNull();
-        assertThat(nativeViewHolder.textView).isNull();
-        assertThat(nativeViewHolder.callToActionView).isNull();
-        assertThat(nativeViewHolder.mainImageView).isNull();
-        assertThat(nativeViewHolder.iconImageView).isNull();
-    }
-
-    @Test
-    public void update_shouldAddValuesToViews() throws Exception {
-        // Setup for cache state for image gets
-
-        BaseForwardingNativeAd nativeAd = new BaseForwardingNativeAd() {};
-        nativeAd.setTitle("titletext");
-        nativeAd.setText("texttext");
-        nativeAd.setMainImageUrl("mainimageurl");
-        nativeAd.setIconImageUrl("iconimageurl");
-        nativeAd.setCallToAction("cta");
-
-        nativeResponse = new NativeResponse(context,
-                IMPRESSION_URL, CLICK_URL, AD_UNIT_ID, nativeAd, null);
-
-        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
-                .titleId(titleView.getId())
-                .textId(textView.getId())
-                .callToActionId(callToActionView.getId())
-                .mainImageId(mainImageView.getId())
-                .iconImageId(iconImageView.getId())
-                .build();
-
-        NativeViewHolder nativeViewHolder =
-                NativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
-
-        nativeViewHolder.update(nativeResponse);
-
-        assertThat(titleView.getText()).isEqualTo("titletext");
-        assertThat(textView.getText()).isEqualTo("texttext");
-        assertThat(callToActionView.getText()).isEqualTo("cta");
-        verify(mockImageLoader).get(eq("mainimageurl"), mainImageCaptor.capture());
-        verify(mockImageLoader).get(eq("iconimageurl"), iconImageCaptor.capture());
-
-        stub(mockImageContainer.getBitmap()).toReturn(mockBitmap);
-        mainImageCaptor.getValue().onResponse(mockImageContainer, true);
-        iconImageCaptor.getValue().onResponse(mockImageContainer, true);
-
-        assertThat(((BitmapDrawable) mainImageView.getDrawable()).getBitmap()).isEqualTo(mockBitmap);
-        assertThat(((BitmapDrawable) iconImageView.getDrawable()).getBitmap()).isEqualTo(mockBitmap);
-    }
-
-    @Test
-    public void update_withMissingNativeResponseFields_shouldClearPreviousValues() throws Exception {
-        // Set previous values that should be cleared
-        titleView.setText("previoustitletext");
-        textView.setText("previoustexttext");
-        callToActionView.setText("previousctatext");
-        mainImageView.setImageBitmap(BitmapFactory.decodeByteArray("previousmainimagedata".getBytes(), 0, "previousmainimagedata".getBytes().length));
-        iconImageView.setImageBitmap(BitmapFactory.decodeByteArray("previousiconimagedata".getBytes(), 0, "previousiconimagedata".getBytes().length));
-
-        // Only required fields in native response
-        nativeResponse = new NativeResponse(context,
-                IMPRESSION_URL, CLICK_URL, AD_UNIT_ID, mock(BaseForwardingNativeAd.class), null);
-
-        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
-                .titleId(titleView.getId())
-                .textId(textView.getId())
-                .callToActionId(callToActionView.getId())
-                .mainImageId(mainImageView.getId())
-                .iconImageId(iconImageView.getId())
-                .build();
-
-        NativeViewHolder nativeViewHolder =
-                NativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
-
-        nativeViewHolder.update(nativeResponse);
-
-        assertThat(titleView.getText()).isEqualTo("");
-        assertThat(textView.getText()).isEqualTo("");
-        assertThat(callToActionView.getText()).isEqualTo("");
-        assertThat(mainImageView.getDrawable()).isNull();
-        assertThat(iconImageView.getDrawable()).isNull();
-    }
-
-    @Test
-    public void update_withDifferentViewBinder_shouldNotClearPreviousValues() throws Exception {
-        // Set previous values that should be cleared
-        titleView.setText("previoustitletext");
-        textView.setText("previoustexttext");
-
-        BaseForwardingNativeAd nativeAd = new BaseForwardingNativeAd() {};
-        nativeAd.setCallToAction("cta");
-
-        nativeResponse = new NativeResponse(context,
-                IMPRESSION_URL, CLICK_URL, AD_UNIT_ID, nativeAd, null);
-
-        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
-                .callToActionId(callToActionView.getId())
-                .build();
-
-        NativeViewHolder nativeViewHolder =
-                NativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
-
-        nativeViewHolder.update(nativeResponse);
-
-        assertThat(titleView.getText()).isEqualTo("previoustitletext");
-        assertThat(textView.getText()).isEqualTo("previoustexttext");
-        assertThat(callToActionView.getText()).isEqualTo("cta");
-    }
-
-    @Test
-    public void updateExtras_shouldAddValuesToViews() throws Exception {
-        // Setup for cache state for image gets
-
-        BaseForwardingNativeAd nativeAd = new BaseForwardingNativeAd() {};
-        nativeAd.addExtra("extrastext", "extrastexttext");
-        nativeAd.addExtra("extrasimage", "extrasimageurl");
-        nativeAd.addExtra("extrasimage2", "extrasimageurl2");
-
-        nativeResponse = new NativeResponse(context,
-                IMPRESSION_URL, CLICK_URL, AD_UNIT_ID, nativeAd, null);
-
-        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
-                .addExtra("extrastext", extrasTextView.getId())
-                .addExtra("extrasimage", extrasImageView.getId())
-                .addExtra("extrasimage2", extrasImageView2.getId())
-                .build();
-
-        NativeViewHolder nativeViewHolder =
-                NativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
-
-        nativeViewHolder.updateExtras(relativeLayout, nativeResponse, viewBinder);
-
-        assertThat(extrasTextView.getText()).isEqualTo("extrastexttext");
-
-        verify(mockImageLoader).get(eq("extrasimageurl"), mainImageCaptor.capture());
-        verify(mockImageLoader).get(eq("extrasimageurl2"), iconImageCaptor.capture());
-
-        stub(mockImageContainer.getBitmap()).toReturn(mockBitmap);
-        mainImageCaptor.getValue().onResponse(mockImageContainer, true);
-        iconImageCaptor.getValue().onResponse(mockImageContainer, true);
-
-        assertThat(((BitmapDrawable) extrasImageView.getDrawable()).getBitmap()).isEqualTo(mockBitmap);
-        assertThat(((BitmapDrawable) extrasImageView2.getDrawable()).getBitmap()).isEqualTo(mockBitmap);
-    }
-
-    @Test
-    public void updateExtras_withMissingExtrasValues_shouldClearPreviousValues() throws Exception {
-        extrasTextView.setText("previousextrastext");
-        extrasImageView.setImageBitmap(BitmapFactory.decodeByteArray("previousextrasimagedata".getBytes(), 0, "previousextrasimagedata".getBytes().length));
-        extrasImageView2.setImageBitmap(BitmapFactory.decodeByteArray("previousextrasimagedata2".getBytes(), 0, "previousextrasimagedata2".getBytes().length));
-
-        nativeResponse = new NativeResponse(context,
-                IMPRESSION_URL, CLICK_URL, AD_UNIT_ID, new BaseForwardingNativeAd(){}, null);
-
-        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
-                .addExtra("extrastext", extrasTextView.getId())
-                .addExtra("extrasimage", extrasImageView.getId())
-                .addExtra("extrasimage2", extrasImageView2.getId())
-                .build();
-
-        NativeViewHolder nativeViewHolder =
-                NativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
-
-        assertThat(extrasTextView.getText()).isEqualTo("previousextrastext");
-
-        nativeViewHolder.updateExtras(relativeLayout, nativeResponse, viewBinder);
-
-        assertThat(extrasTextView.getText()).isEqualTo("");
-        assertThat(extrasImageView.getDrawable()).isNull();
-        assertThat(extrasImageView2.getDrawable()).isNull();
-    }
-
-    @Test
-    public void updateExtras_withMismatchingViewTypes_shouldSetTextViewToImageUrlAndSetExtrasImageViewToNull() throws Exception {
-        BaseForwardingNativeAd nativeAd = new BaseForwardingNativeAd() {};
-        nativeAd.addExtra("extrastext", "extrastexttext");
-        nativeAd.addExtra("extrasimage", "extrasimageurl");
-
-        nativeResponse = new NativeResponse(context,
-                IMPRESSION_URL, CLICK_URL, AD_UNIT_ID, nativeAd, null);
-
-        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
-                .addExtra("extrastext", extrasImageView.getId())
-                .addExtra("extrasimage", extrasTextView.getId())
-                .build();
-
-        NativeViewHolder nativeViewHolder =
-                NativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
-
-        assertThat(extrasTextView.getText()).isEqualTo("");
-        assertThat(extrasImageView.getDrawable()).isNull();
-
-        nativeViewHolder.updateExtras(relativeLayout, nativeResponse, viewBinder);
-
-        // Volley's imageloader will set this to a bitmapdrawable with no bitmap
-        assertThat(extrasTextView.getText()).isEqualTo("extrasimageurl");
-        assertThat(extrasImageView.getDrawable()).isNull();
-    }
-
-    public void fromViewBinder_withMixedViewTypes_shouldReturnEmptyViewHolder() throws Exception {
-        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
-                .titleId(mainImageView.getId())
-                .textId(textView.getId())
-                .build();
-
-        NativeViewHolder nativeViewHolder =
-                NativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
-        assertThat(nativeViewHolder).isEqualTo(NativeViewHolder.EMPTY_VIEW_HOLDER);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/PlacementDataTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/PlacementDataTest.java
deleted file mode 100644
index 75de2550..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/PlacementDataTest.java
+++ /dev/null
@@ -1,845 +0,0 @@
-
-
-package com.mopub.nativeads;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.annotation.Config;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-import static com.mopub.nativeads.PlacementData.NOT_FOUND;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@Config(manifest=Config.NONE)
-@RunWith(SdkTestRunner.class)
-public class PlacementDataTest {
-    private PlacementData noAds;
-    private PlacementData adAt0;
-    private PlacementData adAt1;
-    private PlacementData adsAt01;
-    private PlacementData adsAt1234;
-    private PlacementData adsAt14;
-    private PlacementData adsRepeating;
-    private PlacementData adsAt15repeating;
-
-    @Mock private NativeAdData mockNativeAdData;
-    @Mock private NativeAdData mockNativeAdData2;
-    @Mock private NativeAdData mockNativeAdData3;
-    @Mock private NativeAdData mockNativeAdData4;
-    @Mock private NativeResponse mockNativeResponse;
-    @Mock private NativeResponse mockNativeResponse2;
-    @Mock private NativeResponse mockNativeResponse3;
-    @Mock private NativeResponse mockNativeResponse4;
-
-    @Before
-    public void setup() {
-        noAds = PlacementData.fromAdPositioning(MoPubNativeAdPositioning.clientPositioning());
-        adAt0 = PlacementData.fromAdPositioning(MoPubNativeAdPositioning.clientPositioning()
-                .addFixedPosition(0));
-        adAt1 = PlacementData.fromAdPositioning(MoPubNativeAdPositioning.clientPositioning()
-                .addFixedPosition(1));
-        adsAt01 = PlacementData.fromAdPositioning(MoPubNativeAdPositioning.clientPositioning()
-                .addFixedPosition(0)
-                .addFixedPosition(1));
-        adsAt14 = PlacementData.fromAdPositioning(MoPubNativeAdPositioning.clientPositioning()
-                .addFixedPosition(1)
-                .addFixedPosition(4));
-        adsRepeating = PlacementData.fromAdPositioning(MoPubNativeAdPositioning.clientPositioning()
-                .enableRepeatingPositions(3));
-        adsAt15repeating = PlacementData.fromAdPositioning(MoPubNativeAdPositioning.clientPositioning()
-                .addFixedPosition(1)
-                .addFixedPosition(5)
-                .enableRepeatingPositions(3));
-        adsAt1234 = PlacementData.fromAdPositioning(MoPubNativeAdPositioning.clientPositioning()
-                .addFixedPosition(1)
-                .addFixedPosition(2)
-                .addFixedPosition(3)
-                .addFixedPosition(4));
-
-        when(mockNativeAdData.getAd()).thenReturn(mockNativeResponse);
-        when(mockNativeAdData2.getAd()).thenReturn(mockNativeResponse2);
-        when(mockNativeAdData3.getAd()).thenReturn(mockNativeResponse3);
-        when(mockNativeAdData4.getAd()).thenReturn(mockNativeResponse4);
-    }
-
-    @Test
-    public void initialState_isDesired() {
-        assertThat(noAds.shouldPlaceAd(0)).isFalse();
-        assertThat(noAds.shouldPlaceAd(1)).isFalse();
-        assertThat(noAds.shouldPlaceAd(2)).isFalse();
-        assertThat(noAds.shouldPlaceAd(3)).isFalse();
-        assertThat(noAds.shouldPlaceAd(4)).isFalse();
-
-        assertThat(adAt0.shouldPlaceAd(0)).isTrue();
-        assertThat(adAt0.shouldPlaceAd(1)).isFalse();
-        assertThat(adAt0.shouldPlaceAd(2)).isFalse();
-        assertThat(adAt0.shouldPlaceAd(3)).isFalse();
-        assertThat(adAt0.shouldPlaceAd(4)).isFalse();
-
-        assertThat(adAt1.shouldPlaceAd(0)).isFalse();
-        assertThat(adAt1.shouldPlaceAd(1)).isTrue();
-        assertThat(adAt1.shouldPlaceAd(2)).isFalse();
-        assertThat(adAt1.shouldPlaceAd(3)).isFalse();
-        assertThat(adAt1.shouldPlaceAd(4)).isFalse();
-
-        assertThat(adsAt01.shouldPlaceAd(0)).isTrue();
-        assertThat(adsAt01.shouldPlaceAd(1)).isFalse();
-        assertThat(adsAt01.shouldPlaceAd(2)).isFalse();
-        assertThat(adsAt01.shouldPlaceAd(3)).isFalse();
-        assertThat(adsAt01.shouldPlaceAd(4)).isFalse();
-
-        assertThat(adsAt14.shouldPlaceAd(0)).isFalse();
-        assertThat(adsAt14.shouldPlaceAd(1)).isTrue();
-        assertThat(adsAt14.shouldPlaceAd(2)).isFalse();
-        assertThat(adsAt14.shouldPlaceAd(3)).isTrue();
-        assertThat(adsAt14.shouldPlaceAd(4)).isFalse();
-
-        assertThat(adsRepeating.shouldPlaceAd(0)).isFalse();
-        assertThat(adsRepeating.shouldPlaceAd(1)).isFalse();
-        assertThat(adsRepeating.shouldPlaceAd(2)).isTrue();
-        assertThat(adsRepeating.shouldPlaceAd(3)).isFalse();
-        assertThat(adsRepeating.shouldPlaceAd(4)).isTrue();
-        assertThat(adsRepeating.shouldPlaceAd(5)).isFalse();
-        assertThat(adsRepeating.shouldPlaceAd(6)).isTrue();
-
-        assertThat(adsAt15repeating.shouldPlaceAd(0)).isFalse();
-        assertThat(adsAt15repeating.shouldPlaceAd(1)).isTrue();
-        assertThat(adsAt15repeating.shouldPlaceAd(2)).isFalse();
-        assertThat(adsAt15repeating.shouldPlaceAd(3)).isFalse();
-        assertThat(adsAt15repeating.shouldPlaceAd(4)).isTrue();
-        assertThat(adsAt15repeating.shouldPlaceAd(5)).isFalse();
-        assertThat(adsAt15repeating.shouldPlaceAd(6)).isTrue();
-        assertThat(adsAt15repeating.shouldPlaceAd(7)).isFalse();
-        assertThat(adsAt15repeating.shouldPlaceAd(8)).isTrue();
-
-        assertThat(adsAt1234.shouldPlaceAd(0)).isFalse();
-        assertThat(adsAt1234.shouldPlaceAd(1)).isTrue();
-        assertThat(adsAt1234.shouldPlaceAd(2)).isFalse();
-        assertThat(adsAt1234.shouldPlaceAd(3)).isFalse();
-    }
-
-    @Test
-    public void initialState_nextInsertionPosition() {
-        assertThat(noAds.nextInsertionPosition(0)).isEqualTo(NOT_FOUND);
-        assertThat(noAds.nextInsertionPosition(1)).isEqualTo(NOT_FOUND);
-
-        assertThat(adAt0.nextInsertionPosition(0)).isEqualTo(NOT_FOUND);
-        assertThat(adAt0.nextInsertionPosition(1)).isEqualTo(NOT_FOUND);
-
-        assertThat(adAt1.nextInsertionPosition(0)).isEqualTo(1);
-        assertThat(adAt1.nextInsertionPosition(1)).isEqualTo(NOT_FOUND);
-        assertThat(adAt1.nextInsertionPosition(2)).isEqualTo(NOT_FOUND);
-
-        assertThat(adsAt01.nextInsertionPosition(0)).isEqualTo(NOT_FOUND);
-        assertThat(adsAt01.nextInsertionPosition(1)).isEqualTo(NOT_FOUND);
-        assertThat(adsAt01.nextInsertionPosition(2)).isEqualTo(NOT_FOUND);
-
-        assertThat(adsAt14.nextInsertionPosition(0)).isEqualTo(1);
-        assertThat(adsAt14.nextInsertionPosition(1)).isEqualTo(3);
-        assertThat(adsAt14.nextInsertionPosition(2)).isEqualTo(3);
-        assertThat(adsAt14.nextInsertionPosition(3)).isEqualTo(NOT_FOUND);
-        assertThat(adsAt14.nextInsertionPosition(4)).isEqualTo(NOT_FOUND);
-
-        assertThat(adsRepeating.nextInsertionPosition(0)).isEqualTo(2);
-        assertThat(adsRepeating.nextInsertionPosition(1)).isEqualTo(2);
-        assertThat(adsRepeating.nextInsertionPosition(2)).isEqualTo(4);
-        assertThat(adsRepeating.nextInsertionPosition(3)).isEqualTo(4);
-        assertThat(adsRepeating.nextInsertionPosition(4)).isEqualTo(6);
-        assertThat(adsRepeating.nextInsertionPosition(5)).isEqualTo(6);
-        assertThat(adsRepeating.nextInsertionPosition(6)).isEqualTo(8);
-
-        assertThat(adsAt15repeating.nextInsertionPosition(0)).isEqualTo(1);
-        assertThat(adsAt15repeating.nextInsertionPosition(1)).isEqualTo(4);
-        assertThat(adsAt15repeating.nextInsertionPosition(2)).isEqualTo(4);
-        assertThat(adsAt15repeating.nextInsertionPosition(3)).isEqualTo(4);
-        assertThat(adsAt15repeating.nextInsertionPosition(4)).isEqualTo(6);
-        assertThat(adsAt15repeating.nextInsertionPosition(5)).isEqualTo(6);
-        assertThat(adsAt15repeating.nextInsertionPosition(6)).isEqualTo(8);
-        assertThat(adsAt15repeating.nextInsertionPosition(7)).isEqualTo(8);
-        assertThat(adsAt15repeating.nextInsertionPosition(8)).isEqualTo(10);
-
-        assertThat(adsAt1234.nextInsertionPosition(0)).isEqualTo(1);
-        assertThat(adsAt1234.nextInsertionPosition(1)).isEqualTo(NOT_FOUND);
-        assertThat(adsAt1234.nextInsertionPosition(2)).isEqualTo(NOT_FOUND);
-        assertThat(adsAt1234.nextInsertionPosition(3)).isEqualTo(NOT_FOUND);
-        assertThat(adsAt1234.nextInsertionPosition(4)).isEqualTo(NOT_FOUND);
-        assertThat(adsAt1234.nextInsertionPosition(5)).isEqualTo(NOT_FOUND);
-    }
-
-    @Test
-    public void initialState_prevInsertionPosition() {
-        assertThat(noAds.previousInsertionPosition(0)).isEqualTo(NOT_FOUND);
-        assertThat(noAds.previousInsertionPosition(1)).isEqualTo(NOT_FOUND);
-
-        assertThat(adAt0.previousInsertionPosition(0)).isEqualTo(NOT_FOUND);
-        assertThat(adAt0.previousInsertionPosition(1)).isEqualTo(0);
-        assertThat(adAt0.previousInsertionPosition(2)).isEqualTo(0);
-
-        assertThat(adAt1.previousInsertionPosition(0)).isEqualTo(NOT_FOUND);
-        assertThat(adAt1.previousInsertionPosition(1)).isEqualTo(NOT_FOUND);
-        assertThat(adAt1.previousInsertionPosition(2)).isEqualTo(1);
-        assertThat(adAt1.previousInsertionPosition(3)).isEqualTo(1);
-
-        assertThat(adsAt01.previousInsertionPosition(0)).isEqualTo(NOT_FOUND);
-        assertThat(adsAt01.previousInsertionPosition(1)).isEqualTo(0);
-        assertThat(adsAt01.previousInsertionPosition(2)).isEqualTo(0);
-        assertThat(adsAt01.previousInsertionPosition(3)).isEqualTo(0);
-
-        assertThat(adsAt14.previousInsertionPosition(0)).isEqualTo(NOT_FOUND);
-        assertThat(adsAt14.previousInsertionPosition(1)).isEqualTo(NOT_FOUND);
-        assertThat(adsAt14.previousInsertionPosition(2)).isEqualTo(1);
-        assertThat(adsAt14.previousInsertionPosition(3)).isEqualTo(1);
-        assertThat(adsAt14.previousInsertionPosition(4)).isEqualTo(3);
-        assertThat(adsAt14.previousInsertionPosition(5)).isEqualTo(3);
-
-        assertThat(adsRepeating.previousInsertionPosition(0)).isEqualTo(NOT_FOUND);
-        assertThat(adsRepeating.previousInsertionPosition(1)).isEqualTo(NOT_FOUND);
-        assertThat(adsRepeating.previousInsertionPosition(2)).isEqualTo(NOT_FOUND);
-        assertThat(adsRepeating.previousInsertionPosition(3)).isEqualTo(2);
-        assertThat(adsRepeating.previousInsertionPosition(4)).isEqualTo(2);
-        assertThat(adsRepeating.previousInsertionPosition(5)).isEqualTo(4);
-        assertThat(adsRepeating.previousInsertionPosition(6)).isEqualTo(4);
-        assertThat(adsRepeating.previousInsertionPosition(7)).isEqualTo(6);
-
-        assertThat(adsAt15repeating.previousInsertionPosition(0)).isEqualTo(NOT_FOUND);
-        assertThat(adsAt15repeating.previousInsertionPosition(1)).isEqualTo(NOT_FOUND);
-        assertThat(adsAt15repeating.previousInsertionPosition(2)).isEqualTo(1);
-        assertThat(adsAt15repeating.previousInsertionPosition(3)).isEqualTo(1);
-        assertThat(adsAt15repeating.previousInsertionPosition(4)).isEqualTo(1);
-        assertThat(adsAt15repeating.previousInsertionPosition(5)).isEqualTo(4);
-        assertThat(adsAt15repeating.previousInsertionPosition(6)).isEqualTo(4);
-        assertThat(adsAt15repeating.previousInsertionPosition(7)).isEqualTo(6);
-        assertThat(adsAt15repeating.previousInsertionPosition(8)).isEqualTo(6);
-        assertThat(adsAt15repeating.previousInsertionPosition(9)).isEqualTo(8);
-
-        assertThat(adsAt1234.previousInsertionPosition(0)).isEqualTo(NOT_FOUND);
-        assertThat(adsAt1234.previousInsertionPosition(1)).isEqualTo(NOT_FOUND);
-        assertThat(adsAt1234.previousInsertionPosition(2)).isEqualTo(1);
-        assertThat(adsAt1234.previousInsertionPosition(3)).isEqualTo(1);
-    }
-
-    @Test
-    public void initialState_isPlacedAd() {
-        assertThat(adsAt15repeating.isPlacedAd(0)).isFalse();
-        assertThat(adsAt15repeating.isPlacedAd(1)).isFalse();
-        assertThat(adsAt15repeating.isPlacedAd(10)).isFalse();
-        assertThat(adsAt15repeating.isPlacedAd(1000)).isFalse();
-
-        assertThat(noAds.isPlacedAd(0)).isFalse();
-        assertThat(noAds.isPlacedAd(1000)).isFalse();
-    }
-
-    @Test
-    public void initialState_getOriginalPosition() {
-        assertThat(adsAt15repeating.getOriginalPosition(0)).isEqualTo(0);
-        assertThat(adsAt15repeating.getOriginalPosition(1)).isEqualTo(1);
-        assertThat(adsAt15repeating.getOriginalPosition(10)).isEqualTo(10);
-        assertThat(adsAt15repeating.getOriginalPosition(1000)).isEqualTo(1000);
-
-        assertThat(noAds.getOriginalPosition(0)).isEqualTo(0);
-        assertThat(noAds.getOriginalPosition(1000)).isEqualTo(1000);
-    }
-
-    @Test
-    public void initialState_getOriginalCount() {
-        assertThat(adsAt15repeating.getOriginalCount(0)).isEqualTo(0);
-        assertThat(adsAt15repeating.getOriginalCount(1)).isEqualTo(1);
-        assertThat(adsAt15repeating.getOriginalCount(10)).isEqualTo(10);
-        assertThat(adsAt15repeating.getOriginalCount(1000)).isEqualTo(1000);
-
-        assertThat(noAds.getOriginalCount(0)).isEqualTo(0);
-        assertThat(noAds.getOriginalCount(1000)).isEqualTo(1000);
-    }
-
-    @Test
-    public void initialState_getAdjustedPosition() {
-        assertThat(adsAt15repeating.getAdjustedPosition(0)).isEqualTo(0);
-        assertThat(adsAt15repeating.getAdjustedPosition(1)).isEqualTo(1);
-        assertThat(adsAt15repeating.getAdjustedPosition(10)).isEqualTo(10);
-        assertThat(adsAt15repeating.getAdjustedPosition(1000)).isEqualTo(1000);
-
-        assertThat(noAds.getAdjustedPosition(0)).isEqualTo(0);
-        assertThat(noAds.getAdjustedPosition(1000)).isEqualTo(1000);
-    }
-
-    @Test
-    public void initialState_getAdjustedCount() {
-        assertThat(adsAt15repeating.getAdjustedCount(0)).isEqualTo(0);
-        assertThat(adsAt15repeating.getAdjustedCount(1)).isEqualTo(1);
-        assertThat(adsAt15repeating.getAdjustedCount(10)).isEqualTo(10);
-        assertThat(adsAt15repeating.getAdjustedCount(1000)).isEqualTo(1000);
-
-        assertThat(noAds.getAdjustedCount(0)).isEqualTo(0);
-        assertThat(noAds.getAdjustedCount(1000)).isEqualTo(1000);
-    }
-
-    @Test
-    public void placeAds_inOrder_shouldUpdatePositions() {
-        checkInsertionPositions(10, adsAt15repeating, 1, 4, 6, 8, 10);
-        checkPlacedPositions(20, adsAt15repeating);
-
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-        checkInsertionPositions(10, adsAt15repeating, 5, 7, 9);
-        checkPlacedPositions(20, adsAt15repeating, 1);
-
-        adsAt15repeating.placeAd(5, mockNativeAdData);
-        checkInsertionPositions(10, adsAt15repeating, 8, 10);
-        checkPlacedPositions(20, adsAt15repeating, 1, 5);
-
-        adsAt15repeating.placeAd(8, mockNativeAdData);
-        checkInsertionPositions(10, adsAt15repeating);
-        checkPlacedPositions(20, adsAt15repeating, 1, 5, 8);
-    }
-
-    @Test
-    public void placeAds_outOfOrder_shouldUpdatePositions() {
-        checkInsertionPositions(10, adsAt15repeating, 1, 4, 6, 8, 10);
-        checkPlacedPositions(20, adsAt15repeating);
-
-        adsAt15repeating.placeAd(6, mockNativeAdData);
-        checkInsertionPositions(10, adsAt15repeating, 1, 4, 9);
-        checkPlacedPositions(20, adsAt15repeating, 6);
-
-        adsAt15repeating.placeAd(4, mockNativeAdData);
-        checkInsertionPositions(10, adsAt15repeating, 1, 10);
-        checkPlacedPositions(20, adsAt15repeating, 4, 7);
-
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-        checkInsertionPositions(10, adsAt15repeating);
-        checkPlacedPositions(20, adsAt15repeating, 1, 5, 8);
-    }
-
-    @Test
-    public void placedAds_getOriginalPositionAndCount() {
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-        adsAt15repeating.placeAd(5, mockNativeAdData);
-        adsAt15repeating.placeAd(8, mockNativeAdData);
-
-        assertThat(adsAt15repeating.getOriginalPosition(0)).isEqualTo(0);
-        assertThat(adsAt15repeating.getOriginalPosition(1)).isEqualTo(NOT_FOUND);
-        assertThat(adsAt15repeating.getOriginalPosition(2)).isEqualTo(1);
-        assertThat(adsAt15repeating.getOriginalPosition(3)).isEqualTo(2);
-        assertThat(adsAt15repeating.getOriginalPosition(4)).isEqualTo(3);
-        assertThat(adsAt15repeating.getOriginalPosition(5)).isEqualTo(NOT_FOUND);
-        assertThat(adsAt15repeating.getOriginalPosition(6)).isEqualTo(4);
-        assertThat(adsAt15repeating.getOriginalPosition(7)).isEqualTo(5);
-        assertThat(adsAt15repeating.getOriginalPosition(8)).isEqualTo(NOT_FOUND);
-        assertThat(adsAt15repeating.getOriginalPosition(9)).isEqualTo(6);
-        assertThat(adsAt15repeating.getOriginalPosition(10)).isEqualTo(7);
-
-        assertThat(adsAt15repeating.getOriginalCount(0)).isEqualTo(0);
-        assertThat(adsAt15repeating.getOriginalCount(10)).isEqualTo(7);
-        assertThat(adsAt15repeating.getOriginalCount(20)).isEqualTo(17);
-    }
-
-    @Test
-    public void placedAds_getAdjustedPositionAndCount() {
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-        adsAt15repeating.placeAd(5, mockNativeAdData);
-        adsAt15repeating.placeAd(8, mockNativeAdData);
-
-        assertThat(adsAt15repeating.getAdjustedPosition(0)).isEqualTo(0);
-        // Ad here
-        assertThat(adsAt15repeating.getAdjustedPosition(1)).isEqualTo(2);
-        assertThat(adsAt15repeating.getAdjustedPosition(2)).isEqualTo(3);
-        assertThat(adsAt15repeating.getAdjustedPosition(3)).isEqualTo(4);
-        // Ad here
-        assertThat(adsAt15repeating.getAdjustedPosition(4)).isEqualTo(6);
-        assertThat(adsAt15repeating.getAdjustedPosition(5)).isEqualTo(7);
-        // Ad here
-        assertThat(adsAt15repeating.getAdjustedPosition(6)).isEqualTo(9);
-        assertThat(adsAt15repeating.getAdjustedPosition(7)).isEqualTo(10);
-        assertThat(adsAt15repeating.getAdjustedPosition(8)).isEqualTo(11);
-        assertThat(adsAt15repeating.getAdjustedPosition(9)).isEqualTo(12);
-        assertThat(adsAt15repeating.getAdjustedPosition(10)).isEqualTo(13);
-
-        assertThat(adsAt15repeating.getAdjustedCount(0)).isEqualTo(0);
-        assertThat(adsAt15repeating.getAdjustedCount(10)).isEqualTo(13);
-        assertThat(adsAt15repeating.getAdjustedCount(20)).isEqualTo(23);
-    }
-
-    @Test
-    public void placeAdsClumped_shouldPlaceAdsInOrder() {
-        int nextPosition = adsAt1234.nextInsertionPosition(0);
-        adsAt1234.placeAd(nextPosition, mockNativeAdData);
-
-        nextPosition = adsAt1234.nextInsertionPosition(nextPosition);
-        adsAt1234.placeAd(nextPosition, mockNativeAdData2);
-
-        nextPosition = adsAt1234.nextInsertionPosition(nextPosition);
-        adsAt1234.placeAd(nextPosition, mockNativeAdData3);
-
-        nextPosition = adsAt1234.nextInsertionPosition(nextPosition);
-        adsAt1234.placeAd(nextPosition, mockNativeAdData4);
-
-        nextPosition = adsAt1234.nextInsertionPosition(nextPosition);
-        assertThat(nextPosition).isEqualTo(NOT_FOUND);
-
-        assertThat(adsAt1234.isPlacedAd(0)).isFalse();
-        assertThat(adsAt1234.getPlacedAd(1)).isEqualTo(mockNativeAdData);
-        assertThat(adsAt1234.getPlacedAd(2)).isEqualTo(mockNativeAdData2);
-        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mockNativeAdData3);
-        assertThat(adsAt1234.getPlacedAd(4)).isEqualTo(mockNativeAdData4);
-        assertThat(adsAt1234.isPlacedAd(5)).isFalse();
-    }
-
-    @Test
-    public void placeAdsClumped_thenRemoveContentBeforeClumpedAds_shouldShiftAds() {
-        adsAt1234.placeAd(1, mockNativeAdData);
-        adsAt1234.placeAd(2, mockNativeAdData2);
-        adsAt1234.placeAd(3, mockNativeAdData3);
-        adsAt1234.placeAd(4, mockNativeAdData4);
-
-        adsAt1234.removeItem(0);
-        assertThat(adsAt1234.getPlacedAd(0)).isEqualTo(mockNativeAdData);
-        assertThat(adsAt1234.getPlacedAd(1)).isEqualTo(mockNativeAdData2);
-        assertThat(adsAt1234.getPlacedAd(2)).isEqualTo(mockNativeAdData3);
-        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mockNativeAdData4);
-        assertThat(adsAt1234.isPlacedAd(4)).isFalse();
-
-        adsAt1234.removeItem(0);
-        assertThat(adsAt1234.getPlacedAd(0)).isEqualTo(mockNativeAdData);
-        assertThat(adsAt1234.getPlacedAd(1)).isEqualTo(mockNativeAdData2);
-        assertThat(adsAt1234.getPlacedAd(2)).isEqualTo(mockNativeAdData3);
-        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mockNativeAdData4);
-        assertThat(adsAt1234.isPlacedAd(4)).isFalse();
-    }
-
-    @Test
-    public void placeAdsClumped_thenRemoveContentAfterClumpedAds_shouldNotShiftAds() {
-        adsAt1234.placeAd(1, mockNativeAdData);
-        adsAt1234.placeAd(2, mockNativeAdData2);
-        adsAt1234.placeAd(3, mockNativeAdData3);
-        adsAt1234.placeAd(4, mockNativeAdData4);
-
-        adsAt1234.removeItem(1);
-        assertThat(adsAt1234.isPlacedAd(0)).isFalse();
-        assertThat(adsAt1234.getPlacedAd(1)).isEqualTo(mockNativeAdData);
-        assertThat(adsAt1234.getPlacedAd(2)).isEqualTo(mockNativeAdData2);
-        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mockNativeAdData3);
-        assertThat(adsAt1234.getPlacedAd(4)).isEqualTo(mockNativeAdData4);
-        assertThat(adsAt1234.isPlacedAd(5)).isFalse();
-
-        adsAt1234.removeItem(2);
-        assertThat(adsAt1234.isPlacedAd(0)).isFalse();
-        assertThat(adsAt1234.getPlacedAd(1)).isEqualTo(mockNativeAdData);
-        assertThat(adsAt1234.getPlacedAd(2)).isEqualTo(mockNativeAdData2);
-        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mockNativeAdData3);
-        assertThat(adsAt1234.getPlacedAd(4)).isEqualTo(mockNativeAdData4);
-        assertThat(adsAt1234.isPlacedAd(5)).isFalse();
-    }
-
-    @Test
-    public void placeAdsClumped_thenInsertContentBeforeClumpedAds_shouldShiftAds() {
-        adsAt1234.placeAd(1, mockNativeAdData);
-        adsAt1234.placeAd(2, mockNativeAdData2);
-        adsAt1234.placeAd(3, mockNativeAdData3);
-        adsAt1234.placeAd(4, mockNativeAdData4);
-
-        adsAt1234.insertItem(1);
-        assertThat(adsAt1234.isPlacedAd(0)).isFalse();
-        assertThat(adsAt1234.isPlacedAd(1)).isFalse();
-        assertThat(adsAt1234.getPlacedAd(2)).isEqualTo(mockNativeAdData);
-        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mockNativeAdData2);
-        assertThat(adsAt1234.getPlacedAd(4)).isEqualTo(mockNativeAdData3);
-        assertThat(adsAt1234.getPlacedAd(5)).isEqualTo(mockNativeAdData4);
-        assertThat(adsAt1234.isPlacedAd(6)).isFalse();
-
-        adsAt1234.insertItem(0);
-        assertThat(adsAt1234.isPlacedAd(0)).isFalse();
-        assertThat(adsAt1234.isPlacedAd(1)).isFalse();
-        assertThat(adsAt1234.isPlacedAd(2)).isFalse();
-        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mockNativeAdData);
-        assertThat(adsAt1234.getPlacedAd(4)).isEqualTo(mockNativeAdData2);
-        assertThat(adsAt1234.getPlacedAd(5)).isEqualTo(mockNativeAdData3);
-        assertThat(adsAt1234.getPlacedAd(6)).isEqualTo(mockNativeAdData4);
-        assertThat(adsAt1234.isPlacedAd(7)).isFalse();
-    }
-
-    @Test
-    public void placeAdsClumped_thenInsertContentAfterClumpedAds_shouldNotShiftAds() {
-        adsAt1234.placeAd(1, mockNativeAdData);
-        adsAt1234.placeAd(2, mockNativeAdData2);
-        adsAt1234.placeAd(3, mockNativeAdData3);
-        adsAt1234.placeAd(4, mockNativeAdData4);
-
-        adsAt1234.insertItem(2);
-        assertThat(adsAt1234.isPlacedAd(0)).isFalse();
-        assertThat(adsAt1234.getPlacedAd(1)).isEqualTo(mockNativeAdData);
-        assertThat(adsAt1234.getPlacedAd(2)).isEqualTo(mockNativeAdData2);
-        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mockNativeAdData3);
-        assertThat(adsAt1234.getPlacedAd(4)).isEqualTo(mockNativeAdData4);
-        assertThat(adsAt1234.isPlacedAd(5)).isFalse();
-
-        adsAt1234.removeItem(3);
-        assertThat(adsAt1234.isPlacedAd(0)).isFalse();
-        assertThat(adsAt1234.getPlacedAd(1)).isEqualTo(mockNativeAdData);
-        assertThat(adsAt1234.getPlacedAd(2)).isEqualTo(mockNativeAdData2);
-        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mockNativeAdData3);
-        assertThat(adsAt1234.getPlacedAd(4)).isEqualTo(mockNativeAdData4);
-        assertThat(adsAt1234.isPlacedAd(5)).isFalse();
-    }
-
-    @Test
-    public void placedAds_thenClearEmptyRange_doesNothing() {
-        checkPlacedPositions(15, adsAt15repeating);
-        checkPlacedPositions(15, adsAt15repeating);
-        checkInsertionPositions(15, adsAt15repeating, 1, 4, 6, 8, 10, 12, 14);
-
-        adsAt15repeating.clearAdsInRange(0, 0);
-        checkPlacedPositions(15, adsAt15repeating);
-        checkInsertionPositions(15, adsAt15repeating, 1, 4, 6, 8, 10, 12, 14);
-
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-        adsAt15repeating.placeAd(5, mockNativeAdData);
-        adsAt15repeating.placeAd(8, mockNativeAdData);
-        checkPlacedPositions(15, adsAt15repeating, 1, 5, 8);
-        checkInsertionPositions(15, adsAt15repeating, 11, 13, 15);
-
-        adsAt15repeating.clearAdsInRange(4, 4);
-        checkPlacedPositions(15, adsAt15repeating, 1, 5, 8);
-        checkInsertionPositions(15, adsAt15repeating, 11, 13, 15);
-    }
-
-    @Test
-    public void placedAds_thenClearAll_shouldResetInsertionPositions() {
-        checkPlacedPositions(15, adsAt15repeating);
-        checkInsertionPositions(15, adsAt15repeating, 1, 4, 6, 8, 10, 12, 14);
-
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-        adsAt15repeating.placeAd(5, mockNativeAdData);
-        adsAt15repeating.placeAd(8, mockNativeAdData);
-        checkPlacedPositions(15, adsAt15repeating, 1, 5, 8);
-        checkInsertionPositions(15, adsAt15repeating, 11, 13, 15);
-
-        adsAt15repeating.clearAdsInRange(1, 10);
-        checkPlacedPositions(15, adsAt15repeating);
-        checkInsertionPositions(15, adsAt15repeating, 1, 4, 6, 8, 10, 12, 14);
-    }
-
-    @Test
-    public void placedAds_thenClearRange_inOrder_shouldResetInsertionPositions() {
-        checkPlacedPositions(15, adsAt15repeating);
-        checkInsertionPositions(15, adsAt15repeating, 1, 4, 6, 8, 10, 12, 14);
-
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-        adsAt15repeating.placeAd(5, mockNativeAdData);
-        adsAt15repeating.placeAd(8, mockNativeAdData);
-        checkPlacedPositions(15, adsAt15repeating, 1, 5, 8);
-        checkInsertionPositions(15, adsAt15repeating, 11, 13, 15);
-
-        adsAt15repeating.clearAdsInRange(1, 2);
-        checkPlacedPositions(15, adsAt15repeating, 4, 7);
-        checkInsertionPositions(15, adsAt15repeating, 1, 10, 12, 14);
-
-        adsAt15repeating.clearAdsInRange(4, 5);
-        checkPlacedPositions(15, adsAt15repeating, 6);
-        checkInsertionPositions(15, adsAt15repeating, 1, 4, 9, 11, 13, 15);
-
-        adsAt15repeating.clearAdsInRange(6, 7);
-        checkPlacedPositions(15, adsAt15repeating);
-        checkInsertionPositions(15, adsAt15repeating, 1, 4, 6, 8, 10, 12, 14);
-    }
-
-    @Test
-    public void placedAds_thenClearRange_descending_shouldResetInsertionPositions() {
-        checkPlacedPositions(15, adsAt15repeating);
-        checkInsertionPositions(15, adsAt15repeating, 1, 4, 6, 8, 10, 12, 14);
-
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-        adsAt15repeating.placeAd(5, mockNativeAdData);
-        adsAt15repeating.placeAd(8, mockNativeAdData);
-        checkPlacedPositions(15, adsAt15repeating, 1, 5, 8);
-        checkInsertionPositions(15, adsAt15repeating, 11, 13, 15);
-
-        adsAt15repeating.clearAdsInRange(8, 9);
-        checkPlacedPositions(15, adsAt15repeating, 1, 5);
-        checkInsertionPositions(15, adsAt15repeating, 8, 10, 12, 14);
-
-        adsAt15repeating.clearAdsInRange(5, 6);
-        checkPlacedPositions(15, adsAt15repeating, 1);
-        checkInsertionPositions(15, adsAt15repeating, 5, 7, 9, 11, 13, 15);
-
-        adsAt15repeating.clearAdsInRange(1, 2);
-        checkPlacedPositions(15, adsAt15repeating);
-        checkInsertionPositions(15, adsAt15repeating, 1, 4, 6, 8, 10, 12, 14);
-    }
-
-    @Test
-    public void placedAds_thenClearRange_multiple_shouldResetInsertionPositions() {
-        checkPlacedPositions(15, adsAt15repeating);
-        checkInsertionPositions(15, adsAt15repeating, 1, 4, 6, 8, 10, 12, 14);
-
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-        adsAt15repeating.placeAd(5, mockNativeAdData);
-        adsAt15repeating.placeAd(8, mockNativeAdData);
-        checkPlacedPositions(15, adsAt15repeating, 1, 5, 8);
-        checkInsertionPositions(15, adsAt15repeating, 11, 13, 15);
-
-        adsAt15repeating.clearAdsInRange(1, 6);
-        checkPlacedPositions(15, adsAt15repeating, 6);
-        checkInsertionPositions(15, adsAt15repeating, 1, 4, 9, 11, 13, 15);
-
-        adsAt15repeating.clearAdsInRange(5, 10);
-        checkPlacedPositions(15, adsAt15repeating);
-        checkInsertionPositions(15, adsAt15repeating, 1, 4, 6, 8, 10, 12, 14);
-    }
-
-    @Test
-    public void placedAds_thenClearRange_descending_multiple_shouldResetInsertionPositions() {
-        checkPlacedPositions(15, adsAt15repeating);
-        checkInsertionPositions(15, adsAt15repeating, 1, 4, 6, 8, 10, 12, 14);
-
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-        adsAt15repeating.placeAd(5, mockNativeAdData);
-        adsAt15repeating.placeAd(8, mockNativeAdData);
-        checkPlacedPositions(15, adsAt15repeating, 1, 5, 8);
-        checkInsertionPositions(15, adsAt15repeating, 11, 13, 15);
-
-        adsAt15repeating.clearAdsInRange(5, 9);
-        checkPlacedPositions(15, adsAt15repeating, 1);
-        checkInsertionPositions(15, adsAt15repeating, 5, 7, 9, 11, 13, 15);
-
-        adsAt15repeating.clearAdsInRange(1, 5);
-        checkPlacedPositions(15, adsAt15repeating);
-        checkInsertionPositions(15, adsAt15repeating, 1, 4, 6, 8, 10, 12, 14);
-    }
-
-    @Test
-    public void placeAds_thenClear_shouldCallDestroy() {
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-        adsAt15repeating.placeAd(5, mockNativeAdData2);
-        adsAt15repeating.placeAd(8, mockNativeAdData3);
-
-        adsAt15repeating.clearAdsInRange(5, 10);
-        verify(mockNativeResponse, never()).destroy();
-        verify(mockNativeResponse2).destroy();
-        verify(mockNativeResponse3).destroy();
-    }
-
-    @Test
-    public void insertItems_afterPlacing() {
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-        adsAt15repeating.placeAd(5, mockNativeAdData);
-        adsAt15repeating.placeAd(8, mockNativeAdData);
-
-        adsAt15repeating.insertItem(1);
-        adsAt15repeating.insertItem(4);
-        adsAt15repeating.insertItem(12);
-
-        checkPlacedPositions(20, adsAt15repeating, 2, 7, 10);
-    }
-
-    @Test
-    public void insertItems_beforePlacing() {
-        checkInsertionPositions(7, adsAt15repeating, 1, 4, 6);
-
-        adsAt15repeating.insertItem(4);
-        adsAt15repeating.insertItem(7);
-
-        checkInsertionPositions(9, adsAt15repeating, 1, 5, 8);
-    }
-
-    @Test
-    public void removeThenInsertItem_atZero_shouldBeAtZero() {
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-        adsAt15repeating.placeAd(5, mockNativeAdData);
-        adsAt15repeating.placeAd(8, mockNativeAdData);
-
-        adsAt15repeating.removeItem(0);
-        checkPlacedPositions(20, adsAt15repeating, 0, 4, 7);
-        checkInsertionPositions(16, adsAt15repeating, 10, 12, 14, 16);
-
-        adsAt15repeating.insertItem(0);
-        checkPlacedPositions(20, adsAt15repeating, 1, 5, 8);
-        checkInsertionPositions(16, adsAt15repeating, 11, 13, 15);
-    }
-
-    @Test
-    public void placeThenInsertThenPlace() {
-        adsAt15repeating.placeAd(4, mockNativeAdData);
-        adsAt15repeating.insertItem(4);
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-
-        checkPlacedPositions(20, adsAt15repeating, 1, 6);
-    }
-
-    @Test
-    public void removeItems_afterPlacing() {
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-        adsAt15repeating.placeAd(5, mockNativeAdData);
-        adsAt15repeating.placeAd(8, mockNativeAdData);
-
-        checkPlacedPositions(20, adsAt15repeating, 1, 5, 8);
-
-        adsAt15repeating.removeItem(3);
-        adsAt15repeating.removeItem(5);
-
-        checkPlacedPositions(20, adsAt15repeating, 1, 4, 7);
-
-        // Check the adjusted positions.
-        assertThat(adsAt15repeating.getAdjustedPosition(0)).isEqualTo(0);
-        assertThat(adsAt15repeating.getAdjustedPosition(1)).isEqualTo(2);
-        assertThat(adsAt15repeating.getAdjustedPosition(2)).isEqualTo(3);
-        assertThat(adsAt15repeating.getAdjustedPosition(3)).isEqualTo(5);
-        assertThat(adsAt15repeating.getAdjustedPosition(4)).isEqualTo(6);
-        assertThat(adsAt15repeating.getAdjustedPosition(5)).isEqualTo(8);
-    }
-
-    @Test
-    public void removeItemsBetweenAds_thenInsert_shouldClumpAds() {
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-        adsAt15repeating.placeAd(5, mockNativeAdData);
-        adsAt15repeating.placeAd(8, mockNativeAdData);
-
-        adsAt15repeating.removeItem(4);
-        adsAt15repeating.removeItem(4);
-
-        checkPlacedPositions(20, adsAt15repeating, 1, 5, 6);
-
-        adsAt15repeating.insertItem(5);
-
-        checkPlacedPositions(20, adsAt15repeating, 1, 5, 6);
-
-        adsAt15repeating.insertItem(4);
-
-        checkPlacedPositions(20, adsAt15repeating, 1, 6, 7);
-    }
-
-    @Test
-    public void removeItems_beforePlacing() {
-        checkInsertionPositions(7, adsAt15repeating, 1, 4, 6);
-
-        adsAt15repeating.removeItem(4);
-
-        // Check insertion positions.
-        checkInsertionPositions(7, adsAt15repeating, 1, 4, 5, 7);
-    }
-
-    @Test
-    public void removeItem_withClumpedAdsBeforeIt_shouldCorrectlyRemoveItem() throws Exception {
-        adsRepeating.placeAd(2, mockNativeAdData);
-        adsRepeating.placeAd(5, mockNativeAdData);
-        adsRepeating.placeAd(8, mockNativeAdData);
-
-        checkPlacedPositions(20, adsRepeating, 2, 5, 8);
-        assertThat(adsRepeating.getAdjustedCount(7)).isEqualTo(10);
-
-        // Removing from the head will cause ads to pile up
-        adsRepeating.removeItem(0);
-        adsRepeating.removeItem(0);
-        adsRepeating.removeItem(0);
-        adsRepeating.removeItem(0);
-        adsRepeating.removeItem(0);
-        adsRepeating.removeItem(0);
-
-        checkPlacedPositions(20, adsRepeating, 0, 1, 2);
-
-        adsRepeating.removeItem(0);
-
-        checkPlacedPositions(20, adsRepeating, 0, 1, 2);
-    }
-
-    @Test
-    public void removeItems_afterClumpedAds_shouldStayClumped() {
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-        adsAt15repeating.placeAd(5, mockNativeAdData);
-        adsAt15repeating.placeAd(8, mockNativeAdData);
-
-        adsAt15repeating.removeItem(4);
-        adsAt15repeating.removeItem(4);
-
-        checkPlacedPositions(20, adsAt15repeating, 1, 5, 6);
-
-        // Shouldn't move any ads.
-        adsAt15repeating.removeItem(4);
-
-        checkPlacedPositions(20, adsAt15repeating, 1, 5, 6);
-
-        adsAt15repeating.removeItem(3);
-
-        checkPlacedPositions(20, adsAt15repeating, 1, 4, 5);
-    }
-
-    @Test
-    public void moveItems_afterPlacing() {
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-        adsAt15repeating.placeAd(5, mockNativeAdData);
-        adsAt15repeating.placeAd(8, mockNativeAdData);
-
-        assertThat(adsAt15repeating.getAdjustedPosition(4)).isEqualTo(6);
-        assertThat(adsAt15repeating.getAdjustedPosition(5)).isEqualTo(7);
-
-        adsAt15repeating.moveItem(4, 2);
-
-        checkPlacedPositions(20, adsAt15repeating, 1, 6, 8);
-
-        assertThat(adsAt15repeating.getAdjustedPosition(4)).isEqualTo(5);
-        assertThat(adsAt15repeating.getAdjustedPosition(5)).isEqualTo(7);
-    }
-
-    @Test
-    public void clearAll_shouldCallDestroyOnAdData_shouldResetPositions() {
-        when(mockNativeAdData.getAd()).thenReturn(mockNativeResponse);
-        when(mockNativeAdData2.getAd()).thenReturn(mockNativeResponse2);
-        when(mockNativeAdData3.getAd()).thenReturn(mockNativeResponse3);
-
-        adsAt15repeating.placeAd(1, mockNativeAdData);
-        adsAt15repeating.placeAd(5, mockNativeAdData2);
-        adsAt15repeating.placeAd(8, mockNativeAdData3);
-
-        adsAt15repeating.clearAds();
-
-        verify(mockNativeResponse).destroy();
-        verify(mockNativeResponse2).destroy();
-        verify(mockNativeResponse3).destroy();
-
-        // Should reset to original positions
-        checkInsertionPositions(10, adsAt15repeating, 1, 4, 6, 8, 10);
-        checkPlacedPositions(20, adsAt15repeating);
-    }
-
-    void checkInsertionPositions(int maxValue, PlacementData placementData, Integer... positions) {
-        List<Integer> expected = Arrays.asList(positions);
-        List<Integer> actual = new ArrayList<Integer>();
-        for (int i = 0; i <= maxValue; i++) {
-            if (placementData.shouldPlaceAd(i)) {
-                actual.add(i);
-            }
-        }
-
-        assertThat(actual).isEqualTo(expected);
-    }
-
-    void checkPlacedPositions(int maxValue, PlacementData placementData, Integer... positions) {
-        List<Integer> expected = Arrays.asList(positions);
-        List<Integer> actual = new ArrayList<Integer>();
-        for (int i = 0; i < maxValue; i++) {
-            if (placementData.isPlacedAd(i)) {
-                actual.add(i);
-                assertThat(placementData.getPlacedAd(i)).isEqualTo(mockNativeAdData);
-            } else {
-                assertThat(placementData.getPlacedAd(i)).isNull();
-            }
-        }
-
-        assertThat(actual).isEqualTo(expected);
-
-        // Also check getPlacedAdPositions
-        List<Integer> actualFromAdPositions = new ArrayList<Integer>();
-        for (Integer position : placementData.getPlacedAdPositions()) {
-            actualFromAdPositions.add(position);
-        }
-        assertThat(actualFromAdPositions).isEqualTo(expected);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/PositioningRequestTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/PositioningRequestTest.java
deleted file mode 100644
index c67dd6cf..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/PositioningRequestTest.java
+++ /dev/null
@@ -1,144 +0,0 @@
-package com.mopub.nativeads;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.network.MoPubNetworkError;
-import com.mopub.volley.NetworkResponse;
-import com.mopub.volley.Response;
-import com.mopub.volley.VolleyError;
-
-import org.json.JSONException;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-
-import java.util.TreeMap;
-
-import static junit.framework.Assert.fail;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-public class PositioningRequestTest {
-
-    String url = "http://example.com";
-    @Mock
-    Response.Listener<MoPubNativeAdPositioning.MoPubClientPositioning> mockListener;
-    @Mock
-    Response.ErrorListener mockErrorListener;
-
-    NetworkResponse mockNetworkResponse;
-    PositioningRequest subject;
-
-    @Before
-    public void setup() {
-        subject = new PositioningRequest(url, mockListener, mockErrorListener);
-    }
-
-    @Test
-    public void parseNetworkResponse_shouldReturnPositioning() {
-        mockNetworkResponse = new NetworkResponse(200, "{fixed: []}".getBytes(), new TreeMap<String, String>(), false);
-        assertThat(subject.parseNetworkResponse(mockNetworkResponse).result)
-                .isExactlyInstanceOf(MoPubNativeAdPositioning.MoPubClientPositioning.class);
-    }
-    
-    @Test
-    public void parseNetworkResponse_shouldReturnError() {
-        mockNetworkResponse = new NetworkResponse(200, "garbage".getBytes(), new TreeMap<String, String>(), false);
-        assertThat(subject.parseNetworkResponse(mockNetworkResponse).error)
-                .isExactlyInstanceOf(VolleyError.class);
-    }
-    
-    @Test
-    public void parseJson_noFixedPositions_shouldReturnEmptyPositioning() throws Exception {
-        MoPubNativeAdPositioning.MoPubClientPositioning positioning = subject.parseJson(
-                "{fixed: []}");
-        assertThat(positioning.getFixedPositions()).isEmpty();
-        assertThat(positioning.getRepeatingInterval()).isEqualTo(MoPubNativeAdPositioning.MoPubClientPositioning.NO_REPEAT);
-    }
-
-    @Test
-    public void parseJson_oneFixedPosition_shouldReturnValidPositioning() throws Exception {
-        MoPubNativeAdPositioning.MoPubClientPositioning positioning = subject.parseJson(
-                "{fixed: [{position: 2}]}");
-        assertThat(positioning.getFixedPositions()).containsOnly(2);
-        assertThat(positioning.getRepeatingInterval()).isEqualTo(MoPubNativeAdPositioning.MoPubClientPositioning.NO_REPEAT);
-    }
-
-    @Test
-    public void parseJson_twoFixedPositions_shouldReturnValidPositioning() throws Exception {
-        MoPubNativeAdPositioning.MoPubClientPositioning positioning = subject.parseJson(
-                "{fixed: [{position: 1}, {position: 8}]}");
-        assertThat(positioning.getFixedPositions()).containsExactly(1, 8);
-        assertThat(positioning.getRepeatingInterval()).isEqualTo(MoPubNativeAdPositioning.MoPubClientPositioning.NO_REPEAT);
-    }
-
-    @Test
-    public void parseJson_twoFixedPositions_shouldIgnoreNonZeroSection() throws Exception {
-        MoPubNativeAdPositioning.MoPubClientPositioning positioning = subject.parseJson(
-                "{fixed: [{section: 0, position: 5}, {section: 1, position: 8}]}");
-        assertThat(positioning.getFixedPositions()).containsOnly(5);
-        assertThat(positioning.getRepeatingInterval()).isEqualTo(MoPubNativeAdPositioning.MoPubClientPositioning.NO_REPEAT);
-    }
-
-    @Test
-    public void parseJson_invalidFixedPosition_shouldThrowException() throws Exception {
-        // Must have either fixed or repeating positions.
-        checkException("", "Empty response");
-        checkException("{}", "Must contain fixed or repeating positions");
-        checkException("{\"error\":\"WARMING_UP\"}", "WARMING_UP");
-
-        // Position is required.
-        checkException("{fixed: [{}]}", "JSONObject[\"position\"] not found.");
-        checkException("{fixed: [{section: 0}]}", "JSONObject[\"position\"] not found.");
-
-        // Section is optional, but if it exists must be > 0
-        checkException("{fixed: [{section: -1, position: 8}]}", "Invalid section -1 in JSON response");
-
-        // Positions must be between [0 and 2 ^ 16).
-        checkException("{fixed: [{position: -1}]}", "Invalid position -1 in JSON response");
-        checkException("{fixed: [{position: 1}, {position: -8}]}",
-                "Invalid position -8 in JSON response");
-        checkException("{fixed: [{position: 1}, {position: 66000}]}",
-                "Invalid position 66000 in JSON response");
-    }
-
-    @Test
-    public void parseJson_repeatingInterval_shouldReturnValidPositioning() throws Exception {
-        MoPubNativeAdPositioning.MoPubClientPositioning positioning = subject.parseJson(
-                "{repeating: {interval: 2}}");
-        assertThat(positioning.getFixedPositions()).isEmpty();
-        assertThat(positioning.getRepeatingInterval()).isEqualTo(2);
-    }
-
-    @Test
-    public void parseJson_invalidRepeating_shouldThrowException() throws Exception {
-        checkException("{repeating: }", "Missing value at character 12");
-        checkException("{repeating: {}}", "JSONObject[\"interval\"] not found.");
-
-        // Intervals must be between [2 and 2 ^ 16).
-        checkException("{repeating: {interval: -1}}", "Invalid interval -1 in JSON response");
-        checkException("{repeating: {interval: 0}}", "Invalid interval 0 in JSON response");
-        checkException("{repeating: {interval: 1}}", "Invalid interval 1 in JSON response");
-        checkException("{repeating: {interval: 66000}}",
-                "Invalid interval 66000 in JSON response");
-    }
-
-    @Test
-    public void parseJson_fixedAndRepeating_shouldReturnValidPositioning() throws Exception {
-        MoPubNativeAdPositioning.MoPubClientPositioning positioning = subject.parseJson(
-                "{fixed: [{position: 0}, {position: 1}], repeating: {interval: 2}}");
-        assertThat(positioning.getFixedPositions()).containsExactly(0, 1);
-        assertThat(positioning.getRepeatingInterval()).isEqualTo(2);
-    }
-
-    private void checkException(String json, String expectedMessage) throws Exception {
-        try {
-            subject.parseJson(json);
-        } catch (JSONException e) {
-            return;
-        } catch (MoPubNetworkError e) {
-            return;
-        }
-        fail("Should have received an exception");
-    }
-}
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
deleted file mode 100644
index 515985c1..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
+++ /dev/null
@@ -1,149 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.os.Build.VERSION_CODES;
-
-import com.mopub.common.DownloadResponse;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
-import com.mopub.nativeads.PositioningSource.PositioningListener;
-import com.mopub.network.MoPubRequestQueue;
-import com.mopub.network.Networking;
-import com.mopub.volley.Request;
-import com.mopub.volley.RequestQueue;
-import com.mopub.volley.VolleyError;
-
-import org.apache.http.HttpStatus;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Captor;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-public class ServerPositioningSourceTest {
-    @Mock PositioningListener mockPositioningListener;
-    @Captor ArgumentCaptor<PositioningRequest> positionRequestCaptor;
-    @Mock DownloadResponse mockValidResponse;
-    @Mock DownloadResponse mockNotFoundResponse;
-    @Mock DownloadResponse mockInvalidJsonResponse;
-    @Mock DownloadResponse mockWarmingUpJsonResponse;
-
-    @Mock
-    MoPubRequestQueue mockRequestQueue;
-
-    @Captor ArgumentCaptor<MoPubClientPositioning> positioningCaptor;
-
-    ServerPositioningSource subject;
-
-    @Before
-    public void setUp() {
-        Activity activity = Robolectric.buildActivity(Activity.class).create().get();
-        subject = new ServerPositioningSource(activity);
-
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-
-        when(mockValidResponse.getStatusCode()).thenReturn(HttpStatus.SC_OK);
-        when(mockValidResponse.getByteArray()).thenReturn("{fixed: []}".getBytes());
-
-        when(mockInvalidJsonResponse.getStatusCode()).thenReturn(HttpStatus.SC_OK);
-        when(mockInvalidJsonResponse.getByteArray()).thenReturn("blah blah".getBytes());
-
-        when(mockWarmingUpJsonResponse.getStatusCode()).thenReturn(HttpStatus.SC_OK);
-        when(mockWarmingUpJsonResponse.getByteArray()).thenReturn(
-                "{\"error\":\"WARMING_UP\"}".getBytes());
-
-        when(mockNotFoundResponse.getStatusCode()).thenReturn(HttpStatus.SC_NOT_FOUND);
-    }
-
-    @Test
-    public void loadPositions_shouldAddToRequestQueue() {
-        subject.loadPositions("test_ad_unit", mockPositioningListener);
-        verify(mockRequestQueue).add(any(Request.class));
-    }
-
-    @Test
-    public void loadPositionsTwice_shouldCancelPreviousRequest_shouldNotCallListener() {
-        subject.loadPositions("test_ad_unit", mockPositioningListener);
-        subject.loadPositions("test_ad_unit", mockPositioningListener);
-        verify(mockRequestQueue, times(2)).add(any(Request.class));
-
-        verify(mockPositioningListener, never()).onFailed();
-        verify(mockPositioningListener, never()).onLoad(any(MoPubClientPositioning.class));
-    }
-
-    @Test
-    public void loadPositionsTwice_afterSuccess_shouldNotCancelPreviousRequest() {
-        subject.loadPositions("test_ad_unit", mockPositioningListener);
-        verify(mockRequestQueue).add(positionRequestCaptor.capture());
-        reset(mockRequestQueue);
-
-        subject.loadPositions("test_ad_unit", mockPositioningListener);
-        verify(mockRequestQueue).add(any(Request.class));
-    }
-
-    @Test
-    public void loadPositions_thenComplete_withValidResponse_shouldCallOnLoadListener() {
-        subject.loadPositions("test_ad_unit", mockPositioningListener);
-
-        verify(mockRequestQueue).add(positionRequestCaptor.capture());
-
-        final PositioningRequest value = positionRequestCaptor.getValue();
-        final MoPubClientPositioning response = new MoPubClientPositioning().enableRepeatingPositions(3);
-        value.deliverResponse(response);
-
-        verify(mockPositioningListener).onLoad(eq(response));
-    }
-
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
-    @Test
-    public void loadPositions_thenComplete_withErrorResponse_shouldRetry() throws Exception {
-        subject.loadPositions("test_ad_unit", mockPositioningListener);
-
-        verify(mockRequestQueue).add(positionRequestCaptor.capture());
-        reset(mockRequestQueue);
-        // We get VolleyErrors for invalid JSON, 404s, 5xx, and {"error": "WARMING_UP"}
-        positionRequestCaptor.getValue().deliverError(new VolleyError("Some test error"));
-
-        Robolectric.getUiThreadScheduler().advanceToLastPostedRunnable();
-        verify(mockRequestQueue).add(any(Request.class));
-    }
-
-
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
-    @Test
-    public void loadPositions_withPendingRetry_shouldNotRetry() {
-        subject.loadPositions("test_ad_unit", mockPositioningListener);
-
-        verify(mockRequestQueue).add(positionRequestCaptor.capture());
-        reset(mockRequestQueue);
-        positionRequestCaptor.getValue().deliverError(new VolleyError("testError"));
-
-        subject.loadPositions("test_ad_unit", mockPositioningListener);
-        Robolectric.getUiThreadScheduler().advanceToLastPostedRunnable();
-        // If a retry happened, we'd have two here.
-        verify(mockRequestQueue).add(any(Request.class));
-    }
-
-    @Test
-    public void loadPositions_thenFailAfterMaxRetryTime_shouldCallFailureHandler() {
-        ServerPositioningSource.MAXIMUM_RETRY_TIME_MILLISECONDS = 999;
-
-        subject.loadPositions("test_ad_unit", mockPositioningListener);
-
-        verify(mockRequestQueue).add(positionRequestCaptor.capture());
-        positionRequestCaptor.getValue().deliverError(new VolleyError("test error"));
-        verify(mockPositioningListener).onFailed();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
deleted file mode 100644
index 488c1ae7..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
+++ /dev/null
@@ -1,338 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.graphics.Rect;
-import android.os.Handler;
-import android.os.SystemClock;
-import android.view.View;
-import android.view.ViewParent;
-import android.view.ViewTreeObserver;
-import android.view.Window;
-
-import com.mopub.nativeads.VisibilityTracker.TrackingInfo;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.fest.util.Lists;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Mock;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.shadows.ShadowSystemClock;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-import java.util.WeakHashMap;
-
-import static android.view.ViewTreeObserver.OnPreDrawListener;
-import static com.mopub.nativeads.VisibilityTracker.VisibilityChecker;
-import static com.mopub.nativeads.VisibilityTracker.VisibilityTrackerListener;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-public class VisibilityTrackerTest {
-    private static final int MIN_PERCENTAGE_VIEWED = 50;
-
-    private Activity activity;
-    private VisibilityTracker subject;
-    private Map<View, TrackingInfo> trackedViews;
-    private VisibilityChecker visibilityChecker;
-
-    @Mock private VisibilityTrackerListener visibilityTrackerListener;
-    @Mock private View view;
-    @Mock private View view2;
-    @Mock private Handler visibilityHandler;
-
-    @Before
-    public void setUp() throws Exception {
-        trackedViews = new WeakHashMap<View, TrackingInfo>();
-        visibilityChecker = new VisibilityChecker();
-        activity = new Activity();
-        view = createViewMock(View.VISIBLE, 100, 100, 100, 100, true, true);
-        view2 = createViewMock(View.VISIBLE, 100, 100, 100, 100, true, true);
-
-        // Add a proxy listener to that makes a safe copy of the listener args.
-        VisibilityTrackerListener proxyListener = new VisibilityTrackerListener() {
-            @Override
-            public void onVisibilityChanged(List<View> visibleViews, List<View> invisibleViews) {
-                ArrayList<View> safeVisibleViews = new ArrayList<View>(visibleViews);
-                ArrayList<View> safeInVisibleViews = new ArrayList<View>(invisibleViews);
-                visibilityTrackerListener.onVisibilityChanged(safeVisibleViews, safeInVisibleViews);
-            }
-        };
-        subject = new VisibilityTracker(activity, trackedViews, visibilityChecker, visibilityHandler);
-        subject.setVisibilityTrackerListener(proxyListener);
-
-        // XXX We need this to ensure that our SystemClock starts
-        ShadowSystemClock.uptimeMillis();
-    }
-
-    @Test
-    public void constructor_shouldSetOnPreDrawListenerForDecorView() throws Exception {
-        Activity activity1 = mock(Activity.class);
-        Window window = mock(Window.class);
-        View decorView = mock(View.class);
-        ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
-
-        when(activity1.getWindow()).thenReturn(window);
-        when(window.getDecorView()).thenReturn(decorView);
-        when(decorView.getViewTreeObserver()).thenReturn(viewTreeObserver);
-        when(viewTreeObserver.isAlive()).thenReturn(true);
-
-        subject = new VisibilityTracker(activity1, trackedViews, visibilityChecker, visibilityHandler);
-        assertThat(subject.mRootView.get()).isEqualTo(decorView);
-        assertThat(subject.mOnPreDrawListener).isNotNull();
-        verify(viewTreeObserver).addOnPreDrawListener(subject.mOnPreDrawListener);
-    }
-
-    @Test
-    public void constructor_withNonAliveViewTreeObserver_shouldNotSetOnPreDrawListenerForDecorView() throws Exception {
-        Activity activity1 = mock(Activity.class);
-        Window window = mock(Window.class);
-        View decorView = mock(View.class);
-        ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
-
-        when(activity1.getWindow()).thenReturn(window);
-        when(window.getDecorView()).thenReturn(decorView);
-        when(decorView.getViewTreeObserver()).thenReturn(viewTreeObserver);
-        when(viewTreeObserver.isAlive()).thenReturn(false);
-
-        subject = new VisibilityTracker(activity1, trackedViews, visibilityChecker, visibilityHandler);
-        assertThat(subject.mRootView.get()).isEqualTo(decorView);
-        assertThat(subject.mOnPreDrawListener).isNull();
-        verify(viewTreeObserver, never()).addOnPreDrawListener(subject.mOnPreDrawListener);
-    }
-
-    @Test
-    public void addView_withVisibleView_shouldAddVisibleViewToTrackedViews() throws Exception {
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
-
-        assertThat(trackedViews).hasSize(1);
-    }
-
-    @Test(expected = AssertionError.class)
-    public void addView_whenViewIsNull_shouldThrowNPE() throws Exception {
-        subject.addView(null, MIN_PERCENTAGE_VIEWED);
-
-        assertThat(trackedViews).isEmpty();
-    }
-
-    @Test
-    public void removeView_shouldRemoveFromTrackedViews() throws Exception {
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
-
-        assertThat(trackedViews).hasSize(1);
-        assertThat(trackedViews).containsKey(view);
-
-        subject.removeView(view);
-
-        assertThat(trackedViews).isEmpty();
-    }
-
-    @Test
-    public void clear_shouldRemoveAllViewsFromTrackedViews_shouldRemoveMessagesFromVisibilityHandler_shouldResetIsVisibilityScheduled() throws Exception {
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
-        subject.addView(view2, MIN_PERCENTAGE_VIEWED);
-        assertThat(trackedViews).hasSize(2);
-
-        subject.clear();
-
-        assertThat(trackedViews).isEmpty();
-        verify(visibilityHandler).removeMessages(0);
-    }
-
-    @Test
-    public void destroy_shouldCallClear_shouldRemoveListenerFromDecorView() throws Exception {
-        Activity activity1 = mock(Activity.class);
-        Window window = mock(Window.class);
-        View decorView = mock(View.class);
-        ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
-
-        when(activity1.getWindow()).thenReturn(window);
-        when(window.getDecorView()).thenReturn(decorView);
-        when(decorView.getViewTreeObserver()).thenReturn(viewTreeObserver);
-        when(viewTreeObserver.isAlive()).thenReturn(true);
-
-        subject = new VisibilityTracker(activity1, trackedViews, visibilityChecker, visibilityHandler);
-
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
-        subject.addView(view2, MIN_PERCENTAGE_VIEWED);
-        assertThat(trackedViews).hasSize(2);
-
-        subject.destroy();
-
-        assertThat(trackedViews).isEmpty();
-        verify(visibilityHandler).removeMessages(0);
-        verify(viewTreeObserver).removeOnPreDrawListener(any(OnPreDrawListener.class));
-        assertThat(subject.mOnPreDrawListener).isNull();
-    }
-
-    @Test
-    public void visibilityRunnable_run_withVisibleView_shouldCallOnVisibleCallback() throws Exception {
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
-
-        subject.new VisibilityRunnable().run();
-
-        verify(visibilityTrackerListener).onVisibilityChanged(
-                Lists.newArrayList(view), Lists.<View>newArrayList());
-    }
-
-    @Test
-    public void visibilityRunnable_run_withNonVisibleView_shouldCallOnNonVisibleCallback() throws Exception {
-        when(view.getVisibility()).thenReturn(View.INVISIBLE);
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
-
-        subject.new VisibilityRunnable().run();
-
-        ArgumentCaptor<List> visibleCaptor = ArgumentCaptor.forClass(List.class);
-        ArgumentCaptor<List> invisibleCaptor = ArgumentCaptor.forClass(List.class);
-        verify(visibilityTrackerListener).onVisibilityChanged(visibleCaptor.capture(),
-                invisibleCaptor.capture());
-        assertThat(visibleCaptor.getValue().size()).isEqualTo(0);
-        assertThat(invisibleCaptor.getValue().size()).isEqualTo(1);
-    }
-
-    // VisibilityChecker tests
-
-    @Test
-    public void hasRequiredTimeElapsed_withElapsedTimeGreaterThanMinTimeViewed_shouldReturnTrue() throws Exception {
-        assertThat(visibilityChecker.hasRequiredTimeElapsed(SystemClock.uptimeMillis() - 501, 500)).isTrue();
-    }
-
-    @Test
-    public void hasRequiredTimeElapsed_withElapsedTimeLessThanMinTimeViewed_shouldReturnFalse() throws Exception {
-        assertThat(visibilityChecker.hasRequiredTimeElapsed(SystemClock.uptimeMillis() - 499, 500)).isFalse();
-    }
-
-    @Test
-    public void isMostlyVisible_whenParentIsNull_shouldReturnFalse() throws Exception {
-        view = createViewMock(View.VISIBLE, 100, 100, 100, 100, false, true);
-        assertThat(visibilityChecker.isVisible(view, MIN_PERCENTAGE_VIEWED)).isFalse();
-    }
-
-    @Test
-    public void isMostlyVisible_whenViewIsOffScreen_shouldReturnFalse() throws Exception {
-        view = createViewMock(View.VISIBLE, 100, 100, 100, 100, true, false);
-        assertThat(visibilityChecker.isVisible(view, MIN_PERCENTAGE_VIEWED)).isFalse();
-    }
-
-    @Test
-    public void isMostlyVisible_whenViewIsEntirelyOnScreen_shouldReturnTrue() throws Exception {
-        view = createViewMock(View.VISIBLE, 100, 100, 100, 100, true, true);
-
-        assertThat(visibilityChecker.isVisible(view, MIN_PERCENTAGE_VIEWED)).isTrue();
-    }
-
-    @Test
-    public void isMostlyVisible_whenViewIs50PercentVisible_shouldReturnTrue() throws Exception {
-        view = createViewMock(View.VISIBLE, 50, 100, 100, 100, true, true);
-
-        assertThat(visibilityChecker.isVisible(view, MIN_PERCENTAGE_VIEWED)).isTrue();
-    }
-
-    @Test
-    public void isMostlyVisible_whenViewIs49PercentVisible_shouldReturnFalse() throws Exception {
-        view = createViewMock(View.VISIBLE, 49, 100, 100, 100, true, true);
-
-        assertThat(visibilityChecker.isVisible(view, MIN_PERCENTAGE_VIEWED)).isFalse();
-    }
-
-    @Test
-    public void isMostlyVisible_whenVisibleAreaIsZero_shouldReturnFalse() throws Exception {
-        view = createViewMock(View.VISIBLE, 0, 0, 100, 100, true, true);
-
-        assertThat(visibilityChecker.isVisible(view, MIN_PERCENTAGE_VIEWED)).isFalse();
-    }
-
-    @Test
-    public void isMostlyVisible_whenViewIsInvisibleOrGone_shouldReturnFalse() throws Exception {
-        View view = createViewMock(View.INVISIBLE, 100, 100, 100, 100, true, true);
-        assertThat(visibilityChecker.isVisible(view, MIN_PERCENTAGE_VIEWED)).isFalse();
-
-        reset(view);
-        view = createViewMock(View.GONE, 100, 100, 100, 100, true, true);
-        assertThat(visibilityChecker.isVisible(view, MIN_PERCENTAGE_VIEWED)).isFalse();
-    }
-
-    @Test
-    public void isMostlyVisible_whenViewHasZeroWidthAndHeight_shouldReturnFalse() throws Exception {
-        view = createViewMock(View.VISIBLE, 100, 100, 0, 0, true, true);
-
-        assertThat(visibilityChecker.isVisible(view, MIN_PERCENTAGE_VIEWED)).isFalse();
-    }
-
-    @Test
-    public void isMostlyVisible_whenViewIsNull_shouldReturnFalse() throws Exception {
-        assertThat(visibilityChecker.isVisible(null, MIN_PERCENTAGE_VIEWED)).isFalse();
-    }
-
-    @Test
-    public void addView_shouldClearViewAfterNumAccesses() {
-        // Access 1 time
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
-        assertThat(trackedViews).hasSize(1);
-
-        // Access 2-49 times
-        for (int i = 0; i < VisibilityTracker.NUM_ACCESSES_BEFORE_TRIMMING - 2; ++i) {
-            subject.addView(view2, MIN_PERCENTAGE_VIEWED);
-        }
-        assertThat(trackedViews).hasSize(2);
-
-        // 50th time
-        subject.addView(view2, MIN_PERCENTAGE_VIEWED);
-        assertThat(trackedViews).hasSize(2);
-
-        // 51-99
-        for (int i = 0; i < VisibilityTracker.NUM_ACCESSES_BEFORE_TRIMMING - 1; ++i) {
-            subject.addView(view2, MIN_PERCENTAGE_VIEWED);
-        }
-        assertThat(trackedViews).hasSize(2);
-
-        // 100
-        subject.addView(view2, MIN_PERCENTAGE_VIEWED);
-        assertThat(trackedViews).hasSize(1);
-    }
-
-    static View createViewMock(final int visibility,
-            final int visibleWidth,
-            final int visibleHeight,
-            final int viewWidth,
-            final int viewHeight,
-            final boolean isParentSet,
-            final boolean isOnScreen) {
-        View view = mock(View.class);
-        when(view.getContext()).thenReturn(new Activity());
-        when(view.getVisibility()).thenReturn(visibility);
-
-        when(view.getGlobalVisibleRect(any(Rect.class)))
-                .thenAnswer(new Answer<Boolean>() {
-                    @Override
-                    public Boolean answer(InvocationOnMock invocationOnMock) throws Throwable {
-                        Object[] args = invocationOnMock.getArguments();
-                        Rect rect = (Rect) args[0];
-                        rect.set(0, 0, visibleWidth, visibleHeight);
-                        return isOnScreen;
-                    }
-                });
-
-        when(view.getWidth()).thenReturn(viewWidth);
-        when(view.getHeight()).thenReturn(viewHeight);
-
-        if (isParentSet) {
-            when(view.getParent()).thenReturn(mock(ViewParent.class));
-        }
-
-        when(view.getViewTreeObserver()).thenCallRealMethod();
-
-        return view;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java
deleted file mode 100644
index 3a46eb1e..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java
+++ /dev/null
@@ -1,38 +0,0 @@
-package com.mopub.nativeads.factories;
-
-import com.mopub.nativeads.CustomEventNative;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.junit.Assert.fail;
-
-@RunWith(RobolectricTestRunner.class)
-public class CustomEventNativeFactoryTest {
-    @Test
-    public void create_withValidClassName_shouldCreateClass() throws Exception {
-        assertCustomEventClassCreated("com.mopub.nativeads.MoPubCustomEventNative");
-    }
-
-    @Test
-    public void create_withInvalidClassName_shouldThrowException() throws Exception {
-        try {
-            CustomEventNativeFactory.create("com.mopub.nativeads.inVaLiDClassssssName1231232131");
-            fail("CustomEventNativeFactory did not throw exception on create");
-        } catch (Exception e) {
-            // pass
-        }
-    }
-
-    @Test
-    public void create_withNullClassName_shouldReturnMoPubCustomEventNativeClass() throws Exception {
-        assertThat(CustomEventNativeFactory.create(null).getClass().getName()).isEqualTo("com.mopub.nativeads.MoPubCustomEventNative");
-    }
-
-    private void assertCustomEventClassCreated(final String className) throws Exception {
-        final CustomEventNative customEventNative = CustomEventNativeFactory.create(className);
-        assertThat(customEventNative.getClass().getName()).isEqualTo(className);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/MoPubShadowBitmap.java b/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/MoPubShadowBitmap.java
deleted file mode 100644
index 614254fc..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/MoPubShadowBitmap.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package com.mopub.nativeads.test.support;
-
-import android.graphics.Bitmap;
-
-import org.robolectric.annotation.Implements;
-import org.robolectric.shadows.ShadowBitmap;
-
-// XXX the config for a newly created ShadowBitmap is never set so we need to set it ourselves
-// https://github.com/robolectric/robolectric/issues/876
-@Implements(Bitmap.class)
-public class MoPubShadowBitmap extends ShadowBitmap {
-
-    public MoPubShadowBitmap() {
-        // can also be some other config value
-        setConfig(Bitmap.Config.ARGB_8888);
-    }
-}
-
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/MoPubShadowDisplay.java b/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/MoPubShadowDisplay.java
deleted file mode 100644
index 9b38d956..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/MoPubShadowDisplay.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.mopub.nativeads.test.support;
-
-import android.graphics.Point;
-import android.view.Display;
-
-import org.robolectric.annotation.Implements;
-import org.robolectric.shadows.ShadowDisplay;
-
-/* Our old version of Robolectric doesn't have the newer Display.class methods implemented. */
-@Implements(Display.class)
-public class MoPubShadowDisplay extends ShadowDisplay {
-
-    public void getSize(Point size) {
-        size.set(getWidth(), getHeight());
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/TestCustomEventNativeFactory.java b/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/TestCustomEventNativeFactory.java
deleted file mode 100644
index f8122bb9..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/TestCustomEventNativeFactory.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package com.mopub.nativeads.test.support;
-
-import android.support.annotation.NonNull;
-
-import com.mopub.nativeads.CustomEventNative;
-import com.mopub.nativeads.factories.CustomEventNativeFactory;
-
-import static org.mockito.Mockito.mock;
-
-public class TestCustomEventNativeFactory extends CustomEventNativeFactory {
-    private CustomEventNative instance = mock(CustomEventNative.class);
-
-    public static CustomEventNative getSingletonMock() {
-        return getTestFactory().instance;
-    }
-
-    private static TestCustomEventNativeFactory getTestFactory() {
-        return ((TestCustomEventNativeFactory) CustomEventNativeFactory.instance);
-    }
-
-    @Override
-    protected CustomEventNative internalCreate(@NonNull final Class<? extends CustomEventNative> nativeClass) {
-        return instance;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java b/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
deleted file mode 100644
index 3e5ed266..00000000
--- a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
+++ /dev/null
@@ -1,268 +0,0 @@
-package com.mopub.network;
-
-import android.app.Activity;
-import android.location.Location;
-
-import com.mopub.common.AdFormat;
-import com.mopub.common.AdType;
-import com.mopub.common.AdUrlGenerator;
-import com.mopub.common.DataKeys;
-import com.mopub.common.event.BaseEvent;
-import com.mopub.common.event.EventDispatcher;
-import com.mopub.common.event.MoPubEvents;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.ResponseHeader;
-import com.mopub.volley.NetworkResponse;
-import com.mopub.volley.Response;
-
-import org.json.JSONException;
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-
-import java.nio.charset.Charset;
-import java.util.HashMap;
-import java.util.Map;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-public class AdRequestTest {
-
-    @Mock private AdRequest.Listener mockListener;
-    @Mock private AdResponse mockAdResponse;
-    @Mock private EventDispatcher mockEventDispatcher;
-
-    private AdRequest subject;
-    private HashMap<String, String> defaultHeaders;
-    private Activity activity;
-    private String adUnitId;
-
-    @Before
-    public void setup() {
-        activity = Robolectric.buildActivity(Activity.class).create().get();
-        adUnitId = "testAdUnitId";
-        subject = new AdRequest("testUrl", AdFormat.NATIVE, adUnitId, activity, mockListener);
-        defaultHeaders = new HashMap<String, String>();
-        defaultHeaders.put(ResponseHeader.SCROLLABLE.getKey(), "0");
-        defaultHeaders.put(ResponseHeader.REDIRECT_URL.getKey(), "redirect");
-        defaultHeaders.put(ResponseHeader.CLICK_TRACKING_URL.getKey(), "click_tracking");
-        defaultHeaders.put(ResponseHeader.IMPRESSION_URL.getKey(), "impression");
-        defaultHeaders.put(ResponseHeader.FAIL_URL.getKey(), "fail_url");
-        defaultHeaders.put(ResponseHeader.REFRESH_TIME.getKey(), "30");
-
-        MoPubEvents.setEventDispatcher(mockEventDispatcher);
-    }
-
-    @After
-    public void teardown() {
-        MoPubEvents.setEventDispatcher(null);
-    }
-
-    @Test
-    public void parseNetworkResponse_stringBody_shouldSucceed() throws Exception {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.HTML);
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-
-        assertThat(response.result).isNotNull();
-        assertThat(response.result.getStringBody()).isEqualTo("abc");
-    }
-
-    @Test
-    public void parseNetworkResponse_withStringBody_shouldLogScribeEvent() throws Exception {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.HTML);
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-
-        subject.parseNetworkResponse(testResponse);
-
-        verify(mockEventDispatcher).dispatch(any(BaseEvent.class));
-    }
-
-    @Test
-    public void parseNetworkResponse_withServerExtrasInResponseBody_shouldSucceed() throws Exception {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.HTML);
-        defaultHeaders.put(ResponseHeader.FULL_AD_TYPE.getKey(), "anything");
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-
-        // Check the server extras
-        final Map<String, String> serverExtras = response.result.getServerExtras();
-        assertThat(serverExtras).isNotNull();
-        assertThat(serverExtras).isNotEmpty();
-        assertThat(serverExtras.get(DataKeys.SCROLLABLE_KEY)).isEqualToIgnoringCase("false");
-        assertThat(serverExtras.get(DataKeys.REDIRECT_URL_KEY)).isEqualToIgnoringCase("redirect");
-        assertThat(serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY)).isEqualToIgnoringCase("click_tracking");
-    }
-
-    @Test
-    public void parseNetworkResponse_nonJsonStringBodyForNative_jsonParseShouldFail() {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.NATIVE);
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-
-        assertThat(response.error).isNotNull();
-        assertThat(response.error).isExactlyInstanceOf(MoPubNetworkError.class);
-        assertThat(((MoPubNetworkError) response.error).getReason()).isEqualTo(MoPubNetworkError.Reason.BAD_BODY);
-    }
-
-    @Test
-    public void parseNetworkResponse_nonJsonStringBodyForNative_shouldNotLogScribeEvent() {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.NATIVE);
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-
-        subject.parseNetworkResponse(testResponse);
-
-        verify(mockEventDispatcher, never()).dispatch(any(BaseEvent.class));
-    }
-
-    @Test
-    public void parseNetworkResponse_withWarmupHeaderTrue_shouldError() {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.NATIVE);
-        defaultHeaders.put(ResponseHeader.WARMUP.getKey(), "1");
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-
-        assertThat(response.error).isNotNull();
-        assertThat(response.error).isInstanceOf(MoPubNetworkError.class);
-        assertThat(((MoPubNetworkError) response.error).getReason()).isEqualTo(MoPubNetworkError.Reason.WARMING_UP);
-    }
-
-    @Test
-    public void parseNetworkResponse_withWarmupHeaderTrue_shouldNotLogScribeEvent() {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.NATIVE);
-        defaultHeaders.put(ResponseHeader.WARMUP.getKey(), "1");
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-
-        subject.parseNetworkResponse(testResponse);
-
-        verify(mockEventDispatcher, never()).dispatch(any(BaseEvent.class));
-    }
-
-    @Test
-    public void parseNetworkResponse_withClearAdType_shouldError() {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.CLEAR);
-
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-
-        assertThat(response.error).isNotNull();
-        assertThat(response.error).isInstanceOf(MoPubNetworkError.class);
-        assertThat(((MoPubNetworkError) response.error).getReason()).isEqualTo(MoPubNetworkError.Reason.NO_FILL);
-    }
-
-    @Test
-    public void parseNetworkResponse_withClearAdType_shouldLogScribeEvent() {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.CLEAR);
-
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-        subject.parseNetworkResponse(testResponse);
-
-        verify(mockEventDispatcher).dispatch(any(BaseEvent.class));
-    }
-
-    @Test
-    public void parseNetworkResponse_withBadJSON_shouldReturnError() {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.NATIVE);
-        NetworkResponse badNativeNetworkResponse = new NetworkResponse(200,
-                "{[abc}".getBytes(Charset.defaultCharset()),
-                defaultHeaders, false);
-        subject = new AdRequest("testUrl", AdFormat.NATIVE, "testAdUnitId", activity, mockListener);
-
-        final Response<AdResponse> response = subject.parseNetworkResponse(badNativeNetworkResponse);
-
-        assertThat(response.error).isNotNull();
-        assertThat(response.error.getCause()).isExactlyInstanceOf(JSONException.class);
-    }
-
-    @Test
-    public void deliverResponse_shouldCallListenerOnSuccess() throws Exception {
-        subject.deliverResponse(mockAdResponse);
-        verify(mockListener).onSuccess(mockAdResponse);
-    }
-
-    @Test
-    public void getRequestId_shouldParseAndReturnRequestIdFromFailUrl() throws Exception {
-        String requestId = subject.getRequestId("http://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca&exclude=043fde1fe2f9470c9aa67fec262a0596&request_id=7fd6dd3bf1c84f87876b4740c1dd7baa&fail=1");
-
-        assertThat(requestId).isEqualTo("7fd6dd3bf1c84f87876b4740c1dd7baa");
-    }
-
-    @Test
-    public void getRequestId_withNullFailUrl_shouldReturnNull() throws Exception {
-        assertThat(subject.getRequestId(null)).isNull();
-    }
-
-    @Test
-    public void getRequestId_withUrlWithNoRequestIdParam_shouldReturnNull() throws Exception {
-        assertThat(subject.getRequestId("http://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca")).isNull();
-    }
-
-    @Test
-    public void logScribeEvent_shouldLogEvent() throws Exception {
-        AdResponse mockAdResponse = mock(AdResponse.class);
-        when(mockAdResponse.getDspCreativeId()).thenReturn("dsp_creative_id");
-        when(mockAdResponse.getAdType()).thenReturn("html");
-        when(mockAdResponse.getNetworkType()).thenReturn("network_type");
-        when(mockAdResponse.getWidth()).thenReturn(320);
-        when(mockAdResponse.getHeight()).thenReturn(50);
-        when(mockAdResponse.getRequestId()).thenReturn("ac298c522b0e412b85ff81e4b9b51f03");
-
-        NetworkResponse networkResponse = new NetworkResponse(200, null, null, false, 300);
-
-        Location mockLocation = mock(Location.class);
-        when(mockLocation.getLatitude()).thenReturn(37.7833);
-        when(mockLocation.getLongitude()).thenReturn(-122.4167);
-        when(mockLocation.getAccuracy()).thenReturn((float) 2000.0);
-
-        doAnswer(new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocation) throws Throwable {
-                Object[] args = invocation.getArguments();
-                BaseEvent baseEvent = (BaseEvent) args[0];
-                assertThat(baseEvent.getName()).isEqualTo(BaseEvent.Name.AD_REQUEST);
-                assertThat(baseEvent.getCategory()).isEqualTo(BaseEvent.Category.REQUESTS);
-                assertThat(baseEvent.getSamplingRate()).isEqualTo(0.1);
-                assertThat(baseEvent.getAdUnitId()).isEqualTo(adUnitId);
-                assertThat(baseEvent.getAdCreativeId()).isEqualTo("dsp_creative_id");
-                assertThat(baseEvent.getAdType()).isEqualTo("html");
-                assertThat(baseEvent.getAdNetworkType()).isEqualTo("network_type");
-                assertThat(baseEvent.getAdWidthPx()).isEqualTo(320);
-                assertThat(baseEvent.getAdHeightPx()).isEqualTo(50);
-                assertThat(baseEvent.getGeoLat()).isEqualTo(37.7833);
-                assertThat(baseEvent.getGeoLon()).isEqualTo(-122.4167);
-                assertThat(baseEvent.getGeoAccuracy()).isEqualTo(2000.0);
-                assertThat(baseEvent.getPerformanceDurationMs()).isEqualTo(300);
-                assertThat(baseEvent.getRequestId()).isEqualTo("ac298c522b0e412b85ff81e4b9b51f03");
-                assertThat(baseEvent.getRequestStatusCode()).isEqualTo(200);
-                assertThat(baseEvent.getRequestUri()).isEqualTo("testUrl");
-                return null;
-            }
-        }).when(mockEventDispatcher).dispatch(any(BaseEvent.class));
-
-        subject.logScribeEvent(mockAdResponse, networkResponse, mockLocation);
-
-        verify(mockEventDispatcher).dispatch(any(BaseEvent.class));
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/network/HeaderUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/network/HeaderUtilsTest.java
deleted file mode 100644
index f91576ec..00000000
--- a/mopub-sdk/src/test/java/com/mopub/network/HeaderUtilsTest.java
+++ /dev/null
@@ -1,93 +0,0 @@
-package com.mopub.network;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import static com.mopub.common.util.ResponseHeader.AD_TIMEOUT;
-import static com.mopub.common.util.ResponseHeader.SCROLLABLE;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-public class HeaderUtilsTest {
-    private TestHttpResponseWithHeaders response;
-
-    @Before
-    public void setup() {
-        response = new TestHttpResponseWithHeaders(200, "all is well");
-    }
-
-    @Test
-    public void extractBooleanHeader_whenValueIsZero_shouldReturnFalse() throws Exception {
-        response.addHeader(SCROLLABLE.getKey(), "0");
-        assertThat(HeaderUtils.extractBooleanHeader(response, SCROLLABLE, false)).isFalse();
-
-        response.addHeader(SCROLLABLE.getKey(), "0");
-        assertThat(HeaderUtils.extractBooleanHeader(response, SCROLLABLE, true)).isFalse();
-    }
-
-    @Test
-    public void extractBooleanHeader_whenValueIsOne_shouldReturnTrue() throws Exception {
-        response.addHeader(SCROLLABLE.getKey(), "1");
-        assertThat(HeaderUtils.extractBooleanHeader(response, SCROLLABLE, false)).isTrue();
-
-        response.addHeader(SCROLLABLE.getKey(), "1");
-        assertThat(HeaderUtils.extractBooleanHeader(response, SCROLLABLE, true)).isTrue();
-    }
-
-    @Test
-    public void extractBooleanHeader_shouldReturnDefaultValue() throws Exception {
-        // no header added to response
-
-        assertThat(HeaderUtils.extractBooleanHeader(response, SCROLLABLE, false)).isFalse();
-        assertThat(HeaderUtils.extractBooleanHeader(response, SCROLLABLE, true)).isTrue();
-    }
-
-    @Test
-    public void extractIntegerHeader_shouldReturnIntegerValue() throws Exception {
-        response.addHeader(AD_TIMEOUT.getKey(), "10");
-        assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(10);
-
-        response.addHeader(AD_TIMEOUT.getKey(), "0");
-        assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(0);
-
-        response.addHeader(AD_TIMEOUT.getKey(), "-2");
-        assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(-2);
-    }
-
-    @Test
-    public void extractIntegerHeader_withDoubleValue_shouldTruncateValue() throws Exception {
-        response.addHeader(AD_TIMEOUT.getKey(), "3.14");
-        assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(3);
-
-        response.addHeader(AD_TIMEOUT.getKey(), "-3.14");
-        assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(-3);
-    }
-
-    @Test
-    public void extractIntegerHeader_whenNoHeaderPresent_shouldReturnNull() throws Exception {
-        // no header added to response
-        assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isNull();
-
-        response.addHeader(AD_TIMEOUT.getKey(), null);
-        assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isNull();
-    }
-
-    @Test
-    public void extractIntegerHeader_withNonsenseStringValue_shouldReturnNull() throws Exception {
-        response.addHeader(AD_TIMEOUT.getKey(), "llama!!guy");
-        assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isNull();
-    }
-
-    @Test
-    public void extractIntHeader_withInvalidHeader_shouldUseDefaultValue() throws Exception {
-        response.addHeader(AD_TIMEOUT.getKey(), "5");
-        assertThat(HeaderUtils.extractIntHeader(response, AD_TIMEOUT, 10)).isEqualTo(5);
-
-        response.addHeader(AD_TIMEOUT.getKey(), "five!");
-        assertThat(HeaderUtils.extractIntHeader(response, AD_TIMEOUT, 10)).isEqualTo(10);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java b/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java
deleted file mode 100644
index 441ed4c2..00000000
--- a/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java
+++ /dev/null
@@ -1,203 +0,0 @@
-package com.mopub.network;
-
-import android.app.Activity;
-import android.os.Handler;
-
-import com.mopub.common.ClientMetadata;
-import com.mopub.common.Constants;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.DeviceUtils;
-import com.mopub.volley.Cache;
-import com.mopub.volley.Network;
-import com.mopub.volley.Request;
-import com.mopub.volley.RequestQueue;
-import com.mopub.volley.toolbox.BasicNetwork;
-import com.mopub.volley.toolbox.DiskBasedCache;
-import com.mopub.volley.toolbox.HttpStack;
-import com.mopub.volley.toolbox.HurlStack;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-
-import java.io.File;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-public class MoPubRequestQueueTest {
-
-    private MoPubRequestQueue subject;
-    private MoPubRequestQueue.DelayedRequestHelper delayedRequestHelper;
-    @Mock private ScribeRequest mockScribeRequest;
-    @Mock private MoPubRequestQueue.DelayedRequestHelper mockDelayedRequestHelper;
-    @Mock private Handler mockHandler;
-
-    @Before
-    public void setUp() {
-        // NOTE: It's possible to start a new test with a queue set from a previous test suite
-        // Make sure we get a fresh one
-        Networking.setRequestQueueForTesting(null);
-
-        Activity activity = Robolectric.buildActivity(Activity.class).create().get();
-
-        // Construct our dependencies & build the object
-        final ClientMetadata clientMetadata = ClientMetadata.getInstance(activity);
-        final HurlStack.UrlRewriter urlRewriter = new PlayServicesUrlRewriter(clientMetadata.getDeviceId(), activity);
-        // No Custom SSL Factory
-
-        final String userAgent = Networking.getUserAgent(activity.getApplicationContext());
-        HttpStack httpStack = new RequestQueueHttpStack(userAgent, urlRewriter);
-
-        Network network = new BasicNetwork(httpStack);
-        File volleyCacheDir = new File(activity.getCacheDir().getPath() + File.separator
-                + Networking.CACHE_DIRECTORY_NAME);
-        Cache cache = new DiskBasedCache(volleyCacheDir, (int) DeviceUtils.diskCacheSizeBytes(volleyCacheDir, Constants.TEN_MB));
-        subject = new MoPubRequestQueue(cache, network);
-        subject.start();
-
-        delayedRequestHelper = subject.new DelayedRequestHelper(mockScribeRequest, 100, mockHandler);
-    }
-
-    @After
-    public void tearDown() {
-        // NOTE: Make sure that we clear the queue after the last test in the test suite runs so
-        // that the next test suite starts fresh
-        Networking.setRequestQueueForTesting(null);
-    }
-
-    @Test
-    public void addDelayedRequest_shouldStartDelayedRequestHelper_shouldPutRequestInMap() throws Exception {
-        subject.addDelayedRequest(mockScribeRequest, mockDelayedRequestHelper);
-
-        verify(mockDelayedRequestHelper).start();
-        assertThat(subject.getDelayedRequests().get(mockScribeRequest)).isEqualTo(mockDelayedRequestHelper);
-        assertThat(subject.getDelayedRequests().entrySet()).hasSize(1);
-    }
-
-    @Test
-    public void addDelayedRequest_shouldCancelPreexistingRequest() throws Exception {
-        subject.addDelayedRequest(mockScribeRequest, mockDelayedRequestHelper);
-
-        verify(mockDelayedRequestHelper, never()).cancel();
-        verify(mockScribeRequest, never()).cancel();
-
-        subject.addDelayedRequest(mockScribeRequest, mockDelayedRequestHelper);
-
-        verify(mockDelayedRequestHelper).cancel();
-        verify(mockScribeRequest).cancel();
-    }
-
-    @Test
-    public void addDelayedRequest_withUniqueRequest_shouldNotCancelOtherRequests() throws Exception {
-        ScribeRequest mockScribeRequest2 = mock(ScribeRequest.class);
-        MoPubRequestQueue.DelayedRequestHelper mockDelayedRequestHelper2 = mock(MoPubRequestQueue.DelayedRequestHelper.class);
-        subject.addDelayedRequest(mockScribeRequest, mockDelayedRequestHelper);
-        subject.addDelayedRequest(mockScribeRequest2, mockDelayedRequestHelper2);
-
-        verify(mockDelayedRequestHelper, never()).cancel();
-        verify(mockScribeRequest, never()).cancel();
-
-        verify(mockDelayedRequestHelper2).start();
-        assertThat(subject.getDelayedRequests().get(mockScribeRequest)).isEqualTo(mockDelayedRequestHelper);
-        assertThat(subject.getDelayedRequests().get(mockScribeRequest2)).isEqualTo(mockDelayedRequestHelper2);
-        assertThat(subject.getDelayedRequests().entrySet()).hasSize(2);
-    }
-
-    @Test
-    public void cancelAll_shouldCancelAllRequestsInTheDelayedRequestMapThatPassTheFilter() throws Exception {
-        ScribeRequest mockScribeRequest2 = mock(ScribeRequest.class);
-        MoPubRequestQueue.DelayedRequestHelper mockDelayedRequestHelper2 = mock(MoPubRequestQueue.DelayedRequestHelper.class);
-        subject.addDelayedRequest(mockScribeRequest, mockDelayedRequestHelper);
-        subject.addDelayedRequest(mockScribeRequest2, mockDelayedRequestHelper2);
-
-
-        subject.cancelAll(new RequestQueue.RequestFilter() {
-            @Override
-            public boolean apply(Request<?> request) {
-                return request == mockScribeRequest;
-            }
-        });
-
-        verify(mockDelayedRequestHelper).cancel();
-        verify(mockScribeRequest).cancel();
-
-        verify(mockDelayedRequestHelper2, never()).cancel();
-        verify(mockScribeRequest2, never()).cancel();
-
-        assertThat(subject.getDelayedRequests().entrySet()).hasSize(1);
-        assertThat(subject.getDelayedRequests().get(mockScribeRequest2)).isEqualTo(mockDelayedRequestHelper2);
-    }
-
-    @Test
-    public void cancelAll_shouldCancelAllRequestsWithMatchingObjectTag() throws Exception {
-        ScribeRequest mockScribeRequest2 = mock(ScribeRequest.class);
-        MoPubRequestQueue.DelayedRequestHelper mockDelayedRequestHelper2 = mock(MoPubRequestQueue.DelayedRequestHelper.class);
-        subject.addDelayedRequest(mockScribeRequest, mockDelayedRequestHelper);
-        subject.addDelayedRequest(mockScribeRequest2, mockDelayedRequestHelper2);
-
-        when(mockScribeRequest.getTag()).thenReturn(1);
-        when(mockScribeRequest2.getTag()).thenReturn(2);
-
-        subject.cancelAll(1);
-
-        verify(mockDelayedRequestHelper).cancel();
-        verify(mockScribeRequest).cancel();
-
-        verify(mockDelayedRequestHelper2, never()).cancel();
-        verify(mockScribeRequest2, never()).cancel();
-
-        assertThat(subject.getDelayedRequests().entrySet()).hasSize(1);
-        assertThat(subject.getDelayedRequests().get(mockScribeRequest2)).isEqualTo(mockDelayedRequestHelper2);
-    }
-
-    @Test
-    public void cancel_shouldCancelMatchingRequest() throws Exception {
-        ScribeRequest mockScribeRequest2 = mock(ScribeRequest.class);
-        MoPubRequestQueue.DelayedRequestHelper mockDelayedRequestHelper2 = mock(MoPubRequestQueue.DelayedRequestHelper.class);
-        subject.addDelayedRequest(mockScribeRequest, mockDelayedRequestHelper);
-        subject.addDelayedRequest(mockScribeRequest2, mockDelayedRequestHelper2);
-
-        subject.cancel(mockScribeRequest);
-
-        verify(mockDelayedRequestHelper).cancel();
-        verify(mockScribeRequest).cancel();
-
-        verify(mockDelayedRequestHelper2, never()).cancel();
-        verify(mockScribeRequest2, never()).cancel();
-
-        assertThat(subject.getDelayedRequests().entrySet()).hasSize(1);
-        assertThat(subject.getDelayedRequests().get(mockScribeRequest2)).isEqualTo(mockDelayedRequestHelper2);
-    }
-    
-    @Test
-    public void DelayedRequestHelper_start_shouldPostDelayedRunnable() throws Exception {
-        delayedRequestHelper.start();
-        verify(mockHandler).postDelayed(delayedRequestHelper.mDelayedRunnable, 100);
-    }
-
-    @Test
-    public void DelayedRequestHelper_cancel_shouldCancelDelayedRunnable() throws Exception {
-        delayedRequestHelper.cancel();
-        verify(mockHandler).removeCallbacks(delayedRequestHelper.mDelayedRunnable);
-    }
-
-    @Test
-    public void DelayedRequestHelper_Runnable_run_shouldRemoveRequestFromDelayedRequestsMap_shouldAddRequestToQueue() throws Exception {
-        subject.addDelayedRequest(mockScribeRequest, 100);
-        assertThat(subject.getDelayedRequests().entrySet().size()).isEqualTo(1);
-        MoPubRequestQueue.DelayedRequestHelper delayedRequestHelper = subject.getDelayedRequests().get(mockScribeRequest);
-
-        delayedRequestHelper.mDelayedRunnable.run();
-
-        assertThat(subject.getDelayedRequests().entrySet()).isEmpty();
-        verify(mockScribeRequest).setRequestQueue(subject);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java b/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java
deleted file mode 100644
index 2013dcde..00000000
--- a/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java
+++ /dev/null
@@ -1,69 +0,0 @@
-package com.mopub.network;
-
-import android.app.Activity;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-
-import java.util.concurrent.Semaphore;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-public class NetworkingTest {
-    private Activity context;
-    static String sUserAgent;
-
-    @Before
-    public void setUp() {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-    }
-
-    @After
-    public void tearDown() {
-        Networking.clearForTesting();
-        sUserAgent = null;
-    }
-
-    @Test
-    public void getUserAgent_usesCachedUserAgent() {
-        Networking.setUserAgentForTesting("some cached user agent");
-        String userAgent = Networking.getUserAgent(context);
-
-        assertThat(userAgent).isEqualTo("some cached user agent");
-    }
-
-    @Test
-    public void getUserAgent_fromMainThread_shouldIncludeAndroid() throws InterruptedException {
-        context.runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                String userAgent = Networking.getUserAgent(context);
-                assertThat(userAgent).containsIgnoringCase("android");
-            }
-        });
-    }
-
-    @Test
-    public void getUserAgent_fromBackgroundThread_shouldIncludeAndroid() throws InterruptedException {
-        System.setProperty("http.agent", "system level user agent");
-
-        final Semaphore semaphore = new Semaphore(0);
-
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-                sUserAgent = Networking.getUserAgent(context);
-                semaphore.release();
-            }
-        }).start();
-
-        semaphore.acquire();
-        assertThat(sUserAgent).isEqualTo("system level user agent");
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/network/PlayServicesUrlRewriterTest.java b/mopub-sdk/src/test/java/com/mopub/network/PlayServicesUrlRewriterTest.java
deleted file mode 100644
index a5225b99..00000000
--- a/mopub-sdk/src/test/java/com/mopub/network/PlayServicesUrlRewriterTest.java
+++ /dev/null
@@ -1,68 +0,0 @@
-package com.mopub.network;
-
-import android.app.Activity;
-import android.content.Context;
-
-import com.mopub.common.GpsHelper;
-import com.mopub.common.GpsHelperTest;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.Reflection;
-import com.mopub.common.util.test.support.TestMethodBuilderFactory;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-public class PlayServicesUrlRewriterTest {
-
-    private Reflection.MethodBuilder methodBuilder;
-    private PlayServicesUrlRewriter subject;
-
-    @Before
-    public void setUp() throws Exception {
-        Context context = Robolectric.buildActivity(Activity.class).create().get();
-        GpsHelper.setClassNamesForTesting();
-        methodBuilder = TestMethodBuilderFactory.getSingletonMock();
-        reset(methodBuilder);
-        subject = new PlayServicesUrlRewriter("sha:testDeviceID", context);
-    }
-
-    @Test
-    public void rewriteUrl_whenPlayServicesPresent_shouldUsePlayServicesValue() throws Exception {
-        GpsHelperTest.TestAdInfo adInfo = new GpsHelperTest.TestAdInfo();
-        when(methodBuilder.setStatic(any(Class.class))).thenReturn(methodBuilder);
-        when(methodBuilder.addParam(any(Class.class), any())).thenReturn(methodBuilder);
-        when(methodBuilder.execute()).thenReturn(
-                GpsHelper.GOOGLE_PLAY_SUCCESS_CODE,
-                adInfo,
-                adInfo.ADVERTISING_ID,
-                adInfo.LIMIT_AD_TRACKING_ENABLED
-        );
-
-        assertThat(subject.rewriteUrl("http://ads.mopub.com/m/ad?ad_id=abcece&udid=mp_tmpl_advertising_id&dnt=mp_tmpl_do_not_track"))
-                .isEqualToIgnoringCase("http://ads.mopub.com/m/ad?ad_id=abcece&udid=ifa%3A38400000-8cf0-11bd-b23e-10b96e40000d&dnt=1");
-    }
-
-    @Test
-    public void rewriteUrl_whenPlayServicesNotPresent_shouldUseDeviceValue() throws Exception {
-        when(methodBuilder.setStatic(any(Class.class))).thenReturn(methodBuilder);
-        when(methodBuilder.addParam(any(Class.class), any())).thenReturn(methodBuilder);
-        // return error code so it fails
-        when(methodBuilder.execute()).thenReturn(GpsHelper.GOOGLE_PLAY_SUCCESS_CODE + 1);
-
-        assertThat(subject.rewriteUrl("http://ads.mopub.com/m/ad?ad_id=abcece&udid=mp_tmpl_advertising_id&dnt=mp_tmpl_do_not_track"))
-                .isEqualToIgnoringCase("http://ads.mopub.com/m/ad?ad_id=abcece&udid=sha%3AtestDeviceId&dnt=0");
-    }
-
-    @Test
-    public void rewriteUrl_noTemplates_shouldReturnIdentical() throws Exception {
-        assertThat(subject.rewriteUrl("http://ads.mopub.com/m/ad")).isEqualTo("http://ads.mopub.com/m/ad");
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/network/RequestManagerTest.java b/mopub-sdk/src/test/java/com/mopub/network/RequestManagerTest.java
deleted file mode 100644
index 8cadcfaf..00000000
--- a/mopub-sdk/src/test/java/com/mopub/network/RequestManagerTest.java
+++ /dev/null
@@ -1,138 +0,0 @@
-package com.mopub.network;
-
-import android.os.Looper;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.volley.Request;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-public class RequestManagerTest {
-
-    private ScribeRequestManager subject;
-    @Mock private ScribeRequest.ScribeRequestFactory mockScribeRequestFactory;
-    @Mock private ScribeBackoffPolicy mockScribeBackoffPolicy;
-    @Mock private ScribeRequest mockScribeRequest;
-    @Mock private MoPubRequestQueue mockRequestQueue;
-
-    @Before
-    public void setUp() {
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-
-        subject = new ScribeRequestManager(Looper.getMainLooper());
-        when(mockScribeRequestFactory.createRequest(subject)).thenReturn(mockScribeRequest);
-    }
-
-    @Test
-    public void makeRequest_shouldAddRequestToQueue() throws Exception {
-        subject.makeRequest(mockScribeRequestFactory, mockScribeBackoffPolicy);
-
-        verify(mockRequestQueue).add(mockScribeRequest);
-    }
-
-
-    @Test
-    public void makeRequest_shouldCancelTheCurrentRequest() throws Exception {
-        subject.makeRequest(mockScribeRequestFactory, mockScribeBackoffPolicy);
-        Request<?> request = subject.getCurrentRequest();
-
-        subject.makeRequest(mockScribeRequestFactory, mockScribeBackoffPolicy);
-
-        verify(mockRequestQueue).cancel(request);
-    }
-
-    @Test
-    public void cancelRequest_shouldCancelRequestInQueue_shouldClearRequest() throws Exception {
-        subject.makeRequest(mockScribeRequestFactory, mockScribeBackoffPolicy);
-        subject.cancelRequest();
-
-        verify(mockRequestQueue).cancel(mockScribeRequest);
-        assertThat(subject.getCurrentRequest()).isNull();
-    }
-
-    @Test
-    public void cancelRequest_withNullRequestQueue_shouldOnlyClearCurrentRequest() throws Exception {
-        Networking.setRequestQueueForTesting(null);
-
-        subject.makeRequest(mockScribeRequestFactory, mockScribeBackoffPolicy);
-        subject.cancelRequest();
-
-        verify(mockRequestQueue, never()).cancel(mockScribeRequest);
-        assertThat(subject.getCurrentRequest()).isNull();
-    }
-
-    @Test
-    public void cancelRequest_withNullCurrentRequest_shouldOnlyClearCurrentRequest() throws Exception {
-        subject.cancelRequest();
-
-        verify(mockRequestQueue, never()).cancel(mockScribeRequest);
-        assertThat(subject.getCurrentRequest()).isNull();
-    }
-
-    @Test
-    public void makeRequestInternal_shouldAddNewRequestToQueue() throws Exception {
-        subject.makeRequest(mockScribeRequestFactory, mockScribeBackoffPolicy);
-        reset(mockRequestQueue);
-
-        ScribeRequest previousRequest = (ScribeRequest) subject.getCurrentRequest();
-        ScribeRequest nextRequest = mock(ScribeRequest.class);
-        when(mockScribeRequestFactory.createRequest(subject)).thenReturn(nextRequest);
-
-        subject.makeRequestInternal();
-
-        verify(mockRequestQueue).add(nextRequest);
-        verify(mockRequestQueue, never()).addDelayedRequest(any(Request.class), anyInt());
-        assertThat(previousRequest).isNotEqualTo(nextRequest);
-    }
-
-    @Test
-    public void makeRequestInternal_withRetryCountGreaterThan0_shouldAddNewDelayedRequestToQueue() throws Exception {
-        when(mockScribeBackoffPolicy.getRetryCount()).thenReturn(1);
-        when(mockScribeBackoffPolicy.getBackoffMs()).thenReturn(100);
-        subject.makeRequest(mockScribeRequestFactory, mockScribeBackoffPolicy);
-        reset(mockRequestQueue);
-
-        ScribeRequest previousRequest = (ScribeRequest) subject.getCurrentRequest();
-        ScribeRequest nextRequest = mock(ScribeRequest.class);
-        when(mockScribeRequestFactory.createRequest(subject)).thenReturn(nextRequest);
-
-        subject.makeRequestInternal();
-
-        verify(mockRequestQueue).addDelayedRequest(nextRequest, 100);
-        verify(mockRequestQueue, never()).add(any(Request.class));
-        assertThat(previousRequest).isNotEqualTo(nextRequest);
-    }
-
-    @Test
-    public void makeRequestInternal_withNullRequestQueue_shouldClearCurrentRequest_shouldNotAddRequestToQueue() throws Exception {
-        Networking.setRequestQueueForTesting(null);
-
-        subject.makeRequest(mockScribeRequestFactory, mockScribeBackoffPolicy);
-
-        verify(mockRequestQueue, never()).add(any(Request.class));
-        verify(mockRequestQueue, never()).addDelayedRequest(any(Request.class), anyInt());
-        assertThat(subject.getCurrentRequest()).isNull();
-    }
-
-    @Test
-    public void clearRequest_shouldSetCurrentRequestToNull() throws Exception {
-        subject.makeRequest(mockScribeRequestFactory, mockScribeBackoffPolicy);
-        assertThat(subject.getCurrentRequest()).isNotNull();
-        subject.clearRequest();
-        assertThat(subject.getCurrentRequest()).isNull();
-    }
-}
-
diff --git a/mopub-sdk/src/test/java/com/mopub/network/ScribeBackoffPolicyTest.java b/mopub-sdk/src/test/java/com/mopub/network/ScribeBackoffPolicyTest.java
deleted file mode 100644
index 56a07c86..00000000
--- a/mopub-sdk/src/test/java/com/mopub/network/ScribeBackoffPolicyTest.java
+++ /dev/null
@@ -1,129 +0,0 @@
-package com.mopub.network;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.volley.NetworkResponse;
-import com.mopub.volley.NoConnectionError;
-import com.mopub.volley.VolleyError;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.fail;
-
-@RunWith(SdkTestRunner.class)
-public class ScribeBackoffPolicyTest {
-
-    private ScribeBackoffPolicy subject;
-
-    @Before
-    public void setUp() {
-        subject = new ScribeBackoffPolicy();
-    }
-
-    @Test
-    public void backoff_with503Error_shouldUpdateBackoffTime() throws Exception {
-        NetworkResponse networkResponse = new NetworkResponse(503, null, null, false);
-        VolleyError volleyError = new VolleyError(networkResponse);
-
-        assertThat(subject.getBackoffMs()).isEqualTo(0);
-        assertThat(subject.getRetryCount()).isEqualTo(0);
-
-        subject.backoff(volleyError);
-
-        assertThat(subject.getBackoffMs()).isEqualTo(60000);
-        assertThat(subject.getRetryCount()).isEqualTo(1);
-    }
-
-    @Test
-    public void backoff_with504Error_shouldUpdateBackoffTime() throws Exception {
-        NetworkResponse networkResponse = new NetworkResponse(504, null, null, false);
-        VolleyError volleyError = new VolleyError(networkResponse);
-
-        assertThat(subject.getBackoffMs()).isEqualTo(0);
-        assertThat(subject.getRetryCount()).isEqualTo(0);
-
-        subject.backoff(volleyError);
-
-        assertThat(subject.getBackoffMs()).isEqualTo(60000);
-        assertThat(subject.getRetryCount()).isEqualTo(1);
-    }
-
-    @Test
-    public void backoff_withNoConnectionError_shouldUpdateBackoffTime() throws Exception {
-        VolleyError volleyError = new NoConnectionError();
-
-        assertThat(subject.getBackoffMs()).isEqualTo(0);
-        assertThat(subject.getRetryCount()).isEqualTo(0);
-
-        subject.backoff(volleyError);
-
-        assertThat(subject.getBackoffMs()).isEqualTo(60000);
-        assertThat(subject.getRetryCount()).isEqualTo(1);
-    }
-
-    @Test(expected = VolleyError.class)
-    public void backoff_withOtherErrorType_shouldRethrowException() throws Exception {
-        NetworkResponse networkResponse = new NetworkResponse(500, null, null, false);
-        VolleyError volleyError = new VolleyError(networkResponse);
-
-        subject.backoff(volleyError);
-    }
-
-    @Test
-    public void backoff_shouldUpdateBackoffTime5TimesMax() throws Exception {
-        VolleyError volleyError = new NoConnectionError();
-
-        assertThat(subject.getBackoffMs()).isEqualTo(0);
-        assertThat(subject.getRetryCount()).isEqualTo(0);
-        assertThat(subject.hasAttemptRemaining()).isTrue();
-
-        subject.backoff(volleyError);
-
-        assertThat(subject.getBackoffMs()).isEqualTo(60000);
-        assertThat(subject.getRetryCount()).isEqualTo(1);
-        assertThat(subject.hasAttemptRemaining()).isTrue();
-
-        subject.backoff(volleyError);
-
-        assertThat(subject.getBackoffMs()).isEqualTo(120000);
-        assertThat(subject.getRetryCount()).isEqualTo(2);
-        assertThat(subject.hasAttemptRemaining()).isTrue();
-
-        subject.backoff(volleyError);
-
-        assertThat(subject.getBackoffMs()).isEqualTo(240000);
-        assertThat(subject.getRetryCount()).isEqualTo(3);
-        assertThat(subject.hasAttemptRemaining()).isTrue();
-
-        subject.backoff(volleyError);
-
-        assertThat(subject.getBackoffMs()).isEqualTo(480000);
-        assertThat(subject.getRetryCount()).isEqualTo(4);
-        assertThat(subject.hasAttemptRemaining()).isTrue();
-
-        subject.backoff(volleyError);
-
-        assertThat(subject.getBackoffMs()).isEqualTo(960000);
-        assertThat(subject.getRetryCount()).isEqualTo(5);
-        assertThat(subject.hasAttemptRemaining()).isFalse();
-    }
-
-    @Test(expected = NoConnectionError.class)
-    public void backoff_withNoAttemptsRemaining_shouldRethrowVolleyException() throws Exception {
-        VolleyError volleyError = new NoConnectionError();
-
-        try {
-            subject.backoff(volleyError);
-            subject.backoff(volleyError);
-            subject.backoff(volleyError);
-            subject.backoff(volleyError);
-            subject.backoff(volleyError);
-        } catch (Exception e) {
-            fail("Exception should not be thrown from above backoffs.");
-        }
-
-        subject.backoff(volleyError);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/network/ScribeRequestManagerTest.java b/mopub-sdk/src/test/java/com/mopub/network/ScribeRequestManagerTest.java
deleted file mode 100644
index 854b26a8..00000000
--- a/mopub-sdk/src/test/java/com/mopub/network/ScribeRequestManagerTest.java
+++ /dev/null
@@ -1,77 +0,0 @@
-package com.mopub.network;
-
-import android.os.Looper;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.volley.NoConnectionError;
-import com.mopub.volley.Request;
-import com.mopub.volley.VolleyError;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.doThrow;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-public class ScribeRequestManagerTest {
-
-    private ScribeRequestManager subject;
-    @Mock private ScribeRequest.ScribeRequestFactory mockScribeRequestFactory;
-    @Mock private ScribeBackoffPolicy mockScribeBackoffPolicy;
-    @Mock private ScribeRequest mockScribeRequest;
-    @Mock private MoPubRequestQueue mockRequestQueue;
-
-    @Before
-    public void setUp() {
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-
-        subject = new ScribeRequestManager(Looper.getMainLooper());
-        when(mockScribeRequestFactory.createRequest(subject)).thenReturn(mockScribeRequest);
-        subject.makeRequest(mockScribeRequestFactory, mockScribeBackoffPolicy);
-    }
-
-    @Test
-    public void createRequest_shouldCreateNewScribeRequest() throws Exception {
-        Request request = subject.createRequest();
-        assertThat(request).isEqualTo(mockScribeRequest);
-    }
-
-    @Test
-    public void onResponse_shouldClearRequest() throws Exception {
-        subject.onResponse();
-        assertThat(subject.getCurrentRequest()).isNull();
-    }
-
-    @Test
-    public void onErrorResponse_withBackoffApplied_shouldCallBackoff_shouldMakeDelayedRequest() throws Exception {
-        when(mockScribeBackoffPolicy.getRetryCount()).thenReturn(1);
-        when(mockScribeBackoffPolicy.getBackoffMs()).thenReturn(100);
-
-        VolleyError volleyError = new NoConnectionError();
-        subject.onErrorResponse(volleyError);
-
-        verify(mockScribeBackoffPolicy).backoff(volleyError);
-        verify(mockRequestQueue).addDelayedRequest(mockScribeRequest, 100);
-    }
-
-    @Test
-    public void onErrorResponse_withBackoffNotApplied_shouldClearRequest() throws Exception {
-        reset(mockRequestQueue);
-
-        VolleyError volleyError = new NoConnectionError();
-        doThrow(new VolleyError()).when(mockScribeBackoffPolicy).backoff(volleyError);
-
-        subject.onErrorResponse(volleyError);
-
-        verify(mockScribeBackoffPolicy).backoff(volleyError);
-        verify(mockRequestQueue, never()).add(mockScribeRequest);
-        assertThat(subject.getCurrentRequest()).isNull();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/network/ScribeRequestTest.java b/mopub-sdk/src/test/java/com/mopub/network/ScribeRequestTest.java
deleted file mode 100644
index 7bf2d5bb..00000000
--- a/mopub-sdk/src/test/java/com/mopub/network/ScribeRequestTest.java
+++ /dev/null
@@ -1,83 +0,0 @@
-package com.mopub.network;
-
-import android.app.Activity;
-
-import com.mopub.common.event.BaseEvent;
-import com.mopub.common.event.EventSerializer;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.volley.DefaultRetryPolicy;
-import com.mopub.volley.NetworkResponse;
-import com.mopub.volley.Response;
-
-import org.json.JSONArray;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-
-import java.nio.charset.Charset;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-public class ScribeRequestTest {
-
-    private ScribeRequest subject;
-    @Mock private List<BaseEvent> mockEvents;
-    @Mock private EventSerializer mockEventSerializer;
-    @Mock private ScribeRequest.Listener mockListener;
-
-    @Before
-    public void setUp() {
-        Activity activity = Robolectric.buildActivity(Activity.class).create().get();
-        Networking.getRequestQueue(activity);
-
-        subject = new ScribeRequest("url", mockEvents, mockEventSerializer, mockListener);
-    }
-
-    @Test
-    public void constructor_shouldSetShouldCacheToFalse() throws Exception {
-        assertThat(subject.shouldCache()).isFalse();
-    }
-
-    @Test
-    public void constructor_shouldSetRetryPolicyToDefaultRetryPolicy() throws Exception {
-        assertThat(subject.getRetryPolicy()).isExactlyInstanceOf(DefaultRetryPolicy.class);
-    }
-
-    @Test
-    public void getParams_returnJsonSerializedEventsInMap() throws Exception {
-        JSONArray mockJsonArray = mock(JSONArray.class);
-        when(mockJsonArray.toString()).thenReturn("jsonArrayToString");
-        when(mockEventSerializer.serializeAsJson(mockEvents)).thenReturn(mockJsonArray);
-
-        Map<String, String> params = subject.getParams();
-
-        verify(mockEventSerializer).serializeAsJson(mockEvents);
-        assertThat(params.keySet().size()).isEqualTo(1);
-        assertThat(params.get("log")).isEqualTo("jsonArrayToString");
-    }
-    
-    @Test
-    public void parseNetworkResponse_shouldReturnSuccessResponse() throws Exception {
-        NetworkResponse networkResponse = new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), new HashMap<String, String>(), false);
-
-        Response<Void> response = subject.parseNetworkResponse(networkResponse);
-
-        assertThat(response.isSuccess()).isTrue();
-    }
-
-    @Test
-    public void deliverResponse_shouldNotifyListener() throws Exception {
-        subject.deliverResponse(null);
-
-        verify(mockListener).onResponse();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/network/TrackingRequestTest.java b/mopub-sdk/src/test/java/com/mopub/network/TrackingRequestTest.java
deleted file mode 100644
index eb601572..00000000
--- a/mopub-sdk/src/test/java/com/mopub/network/TrackingRequestTest.java
+++ /dev/null
@@ -1,54 +0,0 @@
-package com.mopub.network;
-
-import android.app.Activity;
-import android.content.Context;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class TrackingRequestTest {
-
-    @Mock
-    private MoPubRequestQueue mockRequestQueue;
-    private Context context;
-    private String url;
-
-
-    @Before
-    public void setup() {
-        context = (Context) Robolectric.buildActivity(Activity.class).create().get();
-        url = "testUrl";
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-    }
-
-    @Test
-    public void makeTrackingHttpRequest_shouldMakeTrackingHttpRequestWithWebViewUserAgent() throws Exception {
-        TrackingRequest.makeTrackingHttpRequest(url, context);
-
-        verify(mockRequestQueue).add(any(TrackingRequest.class));
-    }
-
-    @Test
-    public void makeTrackingHttpRequest_withNullUrl_shouldNotMakeTrackingHttpRequest() throws Exception {
-        TrackingRequest.makeTrackingHttpRequest((String) null, context);
-
-        verify(mockRequestQueue, never()).add(any(TrackingRequest.class));
-    }
-
-    @Test
-    public void makeTrackingHttpRequest_withNullContext_shouldNotMakeTrackingHttpRequest() throws Exception {
-        TrackingRequest.makeTrackingHttpRequest(url, null);
-
-        verify(mockRequestQueue, never()).add(any(TrackingRequest.class));
-    }
-}
diff --git a/mopub-sdk/src/test/resources/org.robolectric.Config.properties b/mopub-sdk/src/test/resources/org.robolectric.Config.properties
deleted file mode 100644
index dd670b09..00000000
--- a/mopub-sdk/src/test/resources/org.robolectric.Config.properties
+++ /dev/null
@@ -1 +0,0 @@
-shadows=com.mopub.nativeads.test.support.MoPubShadowDisplay,com.mopub.nativeads.test.support.MoPubShadowBitmap
\ No newline at end of file
