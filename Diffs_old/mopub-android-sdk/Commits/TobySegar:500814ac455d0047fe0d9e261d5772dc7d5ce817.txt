diff --git a/extras/src/com/mopub/nativeads/MillennialNative.java b/extras/src/com/mopub/nativeads/MillennialNative.java
index 29411d97..5055e47d 100644
--- a/extras/src/com/mopub/nativeads/MillennialNative.java
+++ b/extras/src/com/mopub/nativeads/MillennialNative.java
@@ -1,18 +1,16 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
 import android.content.Context;
-import android.os.Build;
-import android.os.Handler;
-import android.os.Looper;
 import android.util.Log;
 import android.view.View;
 
 import com.millennialmedia.AppInfo;
+import com.millennialmedia.CreativeInfo;
 import com.millennialmedia.MMException;
+import com.millennialmedia.MMLog;
 import com.millennialmedia.MMSDK;
 import com.millennialmedia.NativeAd;
-import com.millennialmedia.internal.ActivityListenerManager;
+import com.mopub.mobileads.MillennialUtils;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -21,181 +19,168 @@
 import static com.mopub.nativeads.NativeImageHelper.preCacheImages;
 
 /**
- * Compatible with version 6.3 of the Millennial Media SDK.
+ * Compatible with version 6.6 of the Millennial Media SDK.
  */
 
 public class MillennialNative extends CustomEventNative {
-    public static final String DCN_KEY = "dcn";
-    public static final String APID_KEY = "adUnitID";
+    private static final String DCN_KEY = "dcn";
+    private static final String APID_KEY = "adUnitID";
     private final static String TAG = MillennialNative.class.getSimpleName();
-    private static final Handler UI_THREAD_HANDLER = new Handler(Looper.getMainLooper());
 
-    @Override
-    protected void loadNativeAd(final Context context,
-            final CustomEventNativeListener customEventNativeListener,
-            Map<String, Object> localExtras,
-            Map<String, String> serverExtras) {
-        String placementId;
-        String siteId;
-        if (!initializeSDK(context)) {
-            Log.e(TAG, "Unable to initialize MMSDK");
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
-                }
-            });
-            return;
+    MillennialStaticNativeAd staticNativeAd;
+
+    public CreativeInfo getCreativeInfo() {
+
+        if (staticNativeAd == null) {
+            return null;
         }
 
-        if (extrasAreValid(serverExtras)) {
-            placementId = serverExtras.get(APID_KEY);
-            siteId = serverExtras.get(DCN_KEY);
-        } else {
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
-                }
-            });
+        return staticNativeAd.getCreativeInfo();
+    }
+
+
+    @Override
+    protected void loadNativeAd(final Context context, final CustomEventNativeListener customEventNativeListener,
+                                Map<String, Object> localExtras, Map<String, String> serverExtras) {
+
+        if (!MillennialUtils.initSdk(context)) {
+            Log.e(TAG, "MM SDK must be initialized with an Activity or Application context.");
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
             return;
         }
 
-        try {
-            AppInfo ai = new AppInfo().setMediator("mopubsdk");
-            if (siteId != null && siteId.length() > 0) {
-                ai = ai.setSiteId(siteId);
-            } else {
-                ai = ai.setSiteId(null);
-            }
+        String placementId = serverExtras.get(APID_KEY);
+        String siteId = serverExtras.get(DCN_KEY);
+
+        if (MillennialUtils.isEmpty(placementId)) {
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
 
-            try {
-                MMSDK.setAppInfo(ai);
-            } catch (MMException e) {
-                Log.e(TAG, "MM SDK is not initialized", e);
-            }
-        } catch (IllegalStateException e) {
-            Log.w(TAG, "App info error", e);
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
-                }
-            });
             return;
         }
 
+        AppInfo ai = new AppInfo().setMediator("mopubsdk").setSiteId(siteId);
+
         try {
+            MMSDK.setAppInfo(ai);
+
             NativeAd nativeAd = NativeAd.createInstance(placementId, NativeAd.NATIVE_TYPE_INLINE);
-            final MillennialStaticNativeAd millennialStaticNativeAd =
-                    new MillennialStaticNativeAd(context,
-                            nativeAd,
-                            new ImpressionTracker(context),
-                            new NativeClickHandler(context),
-                            customEventNativeListener);
-            millennialStaticNativeAd.loadAd();
+            staticNativeAd = new MillennialStaticNativeAd(context, nativeAd, new ImpressionTracker(context),
+                    new NativeClickHandler(context), customEventNativeListener);
+
+            staticNativeAd.loadAd();
+
         } catch (MMException e) {
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
-                }
-            });
+            Log.e(TAG, "An exception occurred loading a native ad from MM SDK", e);
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
         }
     }
 
-    private boolean extrasAreValid(final Map<String, String> serverExtras) {
-        String placementId = serverExtras.get(APID_KEY);
-        return (serverExtras.containsKey(APID_KEY) &&
-                placementId != null && placementId.length() > 0);
-    }
-
 
     static class MillennialStaticNativeAd extends StaticNativeAd implements NativeAd.NativeListener {
-        private final Context mContext;
-        private NativeAd mNativeAd;
-        private final ImpressionTracker mImpressionTracker;
-        private final NativeClickHandler mNativeClickHandler;
-        private final CustomEventNativeListener mListener;
-        private final MillennialStaticNativeAd mMillennialStaticNativeAd;
-
-        public MillennialStaticNativeAd(final Context context,
-                final NativeAd nativeAd,
-                final ImpressionTracker impressionTracker,
-                final NativeClickHandler nativeClickHandler,
-                final CustomEventNativeListener customEventNativeListener) {
-            mContext = context.getApplicationContext();
-            mNativeAd = nativeAd;
-            mImpressionTracker = impressionTracker;
-            mNativeClickHandler = nativeClickHandler;
-            mListener = customEventNativeListener;
-            mMillennialStaticNativeAd = this;
+
+        private final Context context;
+        private NativeAd nativeAd;
+        private final ImpressionTracker impressionTracker;
+        private final NativeClickHandler nativeClickHandler;
+        private final CustomEventNativeListener listener;
+
+
+        public MillennialStaticNativeAd(final Context context, final NativeAd nativeAd,
+                                        final ImpressionTracker impressionTracker, final NativeClickHandler nativeClickHandler,
+                                        final CustomEventNativeListener customEventNativeListener) {
+
+            this.context = context.getApplicationContext();
+            this.nativeAd = nativeAd;
+            this.impressionTracker = impressionTracker;
+            this.nativeClickHandler = nativeClickHandler;
+            listener = customEventNativeListener;
 
             nativeAd.setListener(this);
         }
 
-        void loadAd() {
+
+        void loadAd() throws MMException {
+
             Log.d(TAG, "Millennial native ad loading.");
-            try {
-                mNativeAd.load(mContext, null);
-            } catch (MMException e) {
-                Log.w(TAG, "Configuration error", e);
-                UI_THREAD_HANDLER.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        mListener.onNativeAdFailed(NativeErrorCode
-                                .NATIVE_ADAPTER_CONFIGURATION_ERROR);
-                    }
-                });
+
+            nativeAd.load(context, null);
+        }
+
+
+        CreativeInfo getCreativeInfo() {
+
+            if (nativeAd == null) {
+                return null;
             }
+
+            return nativeAd.getCreativeInfo();
         }
 
+
         // Lifecycle Handlers
         @Override
         public void prepare(final View view) {
             // Must access these methods directly to get impressions to fire.
-            mNativeAd.getIconImage();
-            mNativeAd.getDisclaimer();
-            mImpressionTracker.addView(view, this);
-            mNativeClickHandler.setOnClickListener(view, this);
+            nativeAd.getIconImage();
+            nativeAd.getDisclaimer();
+            impressionTracker.addView(view, this);
+            nativeClickHandler.setOnClickListener(view, this);
         }
 
+
         @Override
         public void clear(final View view) {
-            mImpressionTracker.removeView(view);
-            mNativeClickHandler.clearOnClickListener(view);
+
+            impressionTracker.removeView(view);
+            nativeClickHandler.clearOnClickListener(view);
         }
 
+
         @Override
         public void destroy() {
-            mImpressionTracker.destroy();
-            mNativeAd.setListener(null);
-            mNativeAd = null;
+
+            impressionTracker.destroy();
+            nativeAd.destroy();
+            nativeAd = null;
         }
 
+
         // Event Handlers
         @Override
         public void recordImpression(final View view) {
+
             notifyAdImpressed();
+
             try {
-                mNativeAd.fireImpression();
+                nativeAd.fireImpression();
                 Log.d(TAG, "Millennial native ad impression recorded.");
-            } catch (MMException m) {
-                Log.e(TAG, "Error tracking Millennial native ad impression", m);
+            } catch (MMException e) {
+                Log.e(TAG, "Error tracking Millennial native ad impression", e);
             }
         }
 
+
         @Override
         public void handleClick(final View view) {
+
             notifyAdClicked();
-            mNativeClickHandler.openClickDestinationUrl(getClickDestinationUrl(), view);
-            mNativeAd.fireCallToActionClicked();
+
+            nativeClickHandler.openClickDestinationUrl(getClickDestinationUrl(), view);
+            nativeAd.fireCallToActionClicked();
             Log.d(TAG, "Millennial native ad clicked.");
         }
 
-        // MM'S Native mListener
+
+        // MM'S Native listener
         @Override
         public void onLoaded(NativeAd nativeAd) {
+
+            CreativeInfo creativeInfo = getCreativeInfo();
+            if ((creativeInfo != null) && MMLog.isDebugEnabled()) {
+
+                MMLog.d(TAG, "Native Creative Info: " + creativeInfo);
+            }
+
             // Set assets
             String iconImageUrl = nativeAd.getImageUrl(NativeAd.ComponentName.ICON_IMAGE, 1);
             String mainImageUrl = nativeAd.getImageUrl(NativeAd.ComponentName.MAIN_IMAGE, 1);
@@ -206,13 +191,12 @@ public void onLoaded(NativeAd nativeAd) {
 
             final String clickDestinationUrl = nativeAd.getCallToActionUrl();
             if (clickDestinationUrl == null) {
-                UI_THREAD_HANDLER.post(new Runnable() {
+                MillennialUtils.postOnUiThread(new Runnable() {
                     @Override
                     public void run() {
-                        Log.d(TAG,
-                                "Millennial native ad encountered null destination url. Failing over.");
-                        mListener.onNativeAdFailed(
-                                NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
+
+                        Log.d(TAG, "Millennial native ad encountered null destination url.");
+                        listener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
                     }
                 });
                 return;
@@ -230,20 +214,23 @@ public void run() {
                 urls.add(mainImageUrl);
             }
 
-            UI_THREAD_HANDLER.post(new Runnable() {
+            addExtra("disclaimer", nativeAd.getDisclaimer().getText());
+
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
                     // This has to be run on the main thread:
-                    preCacheImages(mContext, urls, new NativeImageHelper.ImageListener() {
+                    preCacheImages(context, urls, new NativeImageHelper.ImageListener() {
                         @Override
                         public void onImagesCached() {
-                            mListener.onNativeAdLoaded(mMillennialStaticNativeAd);
+                            listener.onNativeAdLoaded(MillennialStaticNativeAd.this);
                             Log.d(TAG, "Millennial native ad loaded.");
                         }
 
+
                         @Override
                         public void onImagesFailedToCache(NativeErrorCode errorCode) {
-                            mListener.onNativeAdFailed(errorCode);
+                            listener.onNativeAdFailed(errorCode);
                         }
                     });
 
@@ -251,8 +238,10 @@ public void onImagesFailedToCache(NativeErrorCode errorCode) {
             });
         }
 
+
         @Override
         public void onLoadFailed(NativeAd nativeAd, NativeAd.NativeErrorStatus nativeErrorStatus) {
+
             final NativeErrorCode error;
             switch (nativeErrorStatus.getErrorCode()) {
                 case NativeAd.NativeErrorStatus.LOAD_TIMED_OUT:
@@ -278,52 +267,37 @@ public void onLoadFailed(NativeAd nativeAd, NativeAd.NativeErrorStatus nativeErr
                 default:
                     error = NativeErrorCode.NETWORK_NO_FILL;
             }
-            UI_THREAD_HANDLER.post(new Runnable() {
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mListener.onNativeAdFailed(error);
+
+                    listener.onNativeAdFailed(error);
                 }
             });
             Log.i(TAG, "Millennial native ad failed: " + nativeErrorStatus.getDescription());
         }
 
+
         @Override
         public void onClicked(NativeAd nativeAd, NativeAd.ComponentName componentName, int i) {
+
             Log.d(TAG, "Millennial native ad click tracker fired.");
         }
 
+
         @Override
         public void onAdLeftApplication(NativeAd nativeAd) {
+
             Log.d(TAG, "Millennial native ad has left the application.");
 
         }
 
+
         @Override
         public void onExpired(NativeAd nativeAd) {
+
             Log.d(TAG, "Millennial native ad has expired!");
         }
 
     }
-
-    private boolean initializeSDK(Context context) {
-        try {
-            if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
-                if (!MMSDK.isInitialized()) {
-                    try {
-                        MMSDK.initialize((Activity) context, ActivityListenerManager.LifecycleState.RESUMED);
-                    } catch (Exception e) {
-                        Log.e(TAG, "Error initializing MMSDK", e);
-                        return false;
-                    }
-                }
-            } else {
-                Log.e(TAG, "MMSDK minimum supported API is 16");
-                return false;
-            }
-            return true;
-        } catch (Exception e) {
-            Log.e(TAG, "Error initializing MMSDK", e);
-            return false;
-        }
-    }
 }
