diff --git a/extras/src/com/mopub/mobileads/IronSourceInterstitial.java b/extras/src/com/mopub/mobileads/IronSourceInterstitial.java
index 15ef1c44..9485fc28 100644
--- a/extras/src/com/mopub/mobileads/IronSourceInterstitial.java
+++ b/extras/src/com/mopub/mobileads/IronSourceInterstitial.java
@@ -1,256 +1,293 @@
-package com.mopub.mobileads;
+    package com.mopub.mobileads;
 
-import android.app.Activity;
-import android.content.Context;
-import android.os.Handler;
-import android.os.Looper;
-import android.text.TextUtils;
-import android.util.Log;
+    import android.app.Activity;
+    import android.content.Context;
+    import android.os.Handler;
+    import android.os.Looper;
+    import android.text.TextUtils;
+    import android.util.Log;
 
-import com.ironsource.mediationsdk.IronSource;
-import com.ironsource.mediationsdk.config.ConfigFile;
-import com.ironsource.mediationsdk.logger.IronSourceError;
-import com.ironsource.mediationsdk.sdk.InterstitialListener;
-import com.mopub.common.MoPub;
+    import com.ironsource.mediationsdk.IronSource;
+    import com.ironsource.mediationsdk.config.ConfigFile;
+    import com.ironsource.mediationsdk.logger.IronSourceError;
+    import com.ironsource.mediationsdk.sdk.ISDemandOnlyInterstitialListener;
+    import com.mopub.common.MoPub;
 
-import java.util.Arrays;
-import java.util.Map;
+    import java.util.Arrays;
+    import java.util.Map;
 
-public class IronSourceInterstitial extends CustomEventInterstitial implements InterstitialListener {
+    public class IronSourceInterstitial extends CustomEventInterstitial implements ISDemandOnlyInterstitialListener {
 
-    private static final String TAG = "MoPub";
+        /**
+         * private vars
+         */
 
-    private static final String ADAPTER_VERSION = "2.5.3";
-    private static final String ADAPTER_NAME = "Mopub";
+        private static final String TAG = IronSourceInterstitial.class.getSimpleName();
 
-    private static CustomEventInterstitialListener mMoPubListener;
-    private static int initState;
-    private static boolean isTestEnabled;
+        // Configuration keys
+        private static final String APPLICATION_KEY = "applicationKey";
+        private static final String APP_KEY = "appKey";
+        private static final String TEST_ENABLED_KEY = "isTestEnabled";
+        private static final String PLACEMENT_KEY = "placementName";
+        private static final String INSTANCE_ID_KEY = "instanceId";
 
-    /**
-     * This is the placement name used inside ironSource SDK
-     */
-    private String placementName = null;
+        private static final String MEDIATION_TYPE = "mopub" ;
 
-    private static final int INIT_NOT_STARTED = 0;
-    private static final int INIT_PENDING = 1;
-    private static final int INIT_SUCCEEDED = 2;
+        // This is the instance id used inside ironSource SDK
+        private String mInstanceId = null;
 
-    private static Handler sHandler;
+        // This is the placement name used inside ironSource SDK
+        private String mPlacementName = null;
 
-    // Mopub API Start
+        static CustomEventInterstitialListener mMoPubListener;
 
-    @Override
-    protected void loadInterstitial(Context context, CustomEventInterstitialListener customEventInterstitialListener, Map<String, Object> map0, Map<String, String> serverExtras) {
+        private static Handler sHandler;
 
-        try {
-            mMoPubListener = customEventInterstitialListener;
-            sHandler = new Handler(Looper.getMainLooper());
+        private static boolean mInitInterstitialSuccessfully;
+        private boolean mIsTestEnabled;
 
-            if (context instanceof Activity) {
-                //Set the Interstitial Listener
-                String applicationKey = "";
-                if (serverExtras != null) {
-                    if (serverExtras.get("applicationKey") != null) {
-                        applicationKey = serverExtras.get("applicationKey");
-                    } else if (serverExtras.get("appKey") != null) {
-                        //try appKey if applicationKey doesn't exists (fallback)
-                        applicationKey = serverExtras.get("appKey");
-                    }
+        /**
+         * Activity Lifecycle Helper Methods
+         **/
 
-                    if (serverExtras.get("isTestEnabled") != null) {
-                        isTestEnabled = Boolean.valueOf(serverExtras.get("isTestEnabled"));
-                    }
+        public static void onActivityPaused(Activity activity) {
 
-                    if (serverExtras.get("placementName") != null) {
-                        placementName = serverExtras.get("placementName");
-                    }
+            IronSource.onPause(activity);
+        }
 
-                    onLog("server extras: " + Arrays.toString(serverExtras.entrySet().toArray()));
+        public static void onActivityResumed(Activity activity) {
 
+            IronSource.onResume(activity);
+        }
+
+        /**
+         *  Mopub API
+         */
+
+        @Override
+        protected void loadInterstitial(Context context, CustomEventInterstitialListener customEventInterstitialListener, Map<String, Object> map0, Map<String, String> serverExtras) {
+
+            try {
+                mMoPubListener = customEventInterstitialListener;
+                sHandler = new Handler(Looper.getMainLooper());
+
+                if (!(context instanceof Activity)) {
+                    // Context not an Activity context, log the reason for failure and fail the
+                    // initialization.
+                    onLog("loadInterstitial must be called on an Activity context");
+                    sendMoPubInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
+                    return;
                 }
-                if (!TextUtils.isEmpty(applicationKey)) {
-                    initISIronSourceSDK(((Activity) context), applicationKey);
-                    //Load ad unit
-                    if (initState == INIT_SUCCEEDED) {
-                        loadISIronSourceSDK();
-                    }
-                }
-            } else {
-                onLog("loadInterstitial must be called on an Activity context");
+
+                 //Set the Interstitial Listener
+                 String applicationKey = "";
+                 mInstanceId = "0";
+                 if (serverExtras != null) {
+
+                     if (serverExtras.get(APPLICATION_KEY) != null) {
+                         applicationKey = serverExtras.get(APPLICATION_KEY);
+
+                     } else if (serverExtras.get(APP_KEY) != null) {
+                         //try appKey if applicationKey doesn't exists (fallback)
+                         applicationKey = serverExtras.get(APP_KEY);
+                     }
+
+                     if (serverExtras.get(TEST_ENABLED_KEY) != null) {
+                         mIsTestEnabled = Boolean.valueOf(serverExtras.get(TEST_ENABLED_KEY));
+                     }
+
+                     if (serverExtras.get(PLACEMENT_KEY) != null) {
+                         mPlacementName = serverExtras.get(PLACEMENT_KEY);
+                     }
+
+                     if (serverExtras.get(INSTANCE_ID_KEY) != null) {
+                         mInstanceId = serverExtras.get(INSTANCE_ID_KEY);
+                     }
+
+                     onLog("server extras: " + Arrays.toString(serverExtras.entrySet().toArray()));
+                 }
+
+                 if (!TextUtils.isEmpty(applicationKey)) {
+                     initIronSourceSDK(((Activity) context), applicationKey);
+                     //Load ad unit
+                     if (mInitInterstitialSuccessfully) {
+                         loadInterstitial();
+                     }
+                 } else {
+                     onLog("Initialization Failed, make sure that 'applicationKey' server parameter is added");
+                     sendMoPubInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
+                 }
+
+            } catch (Exception e) {
+                onLog(e.toString());
                 sendMoPubInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
             }
-        } catch (Exception e) {
-            onLog(e.toString());
-            sendMoPubInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
         }
-    }
 
-    @Override
-    protected void showInterstitial() {
-        onLog("showInterstitial " + placementName);
-        try {
-            if (IronSource.isInterstitialReady()) {
-                if (TextUtils.isEmpty(placementName)) {
-                    IronSource.showInterstitial();
+        @Override
+        protected void showInterstitial() {
+            onLog("showInterstitial " + mPlacementName);
+            try {
+                if (IronSource.isISDemandOnlyInterstitialReady(mInstanceId)) {
+                    if (TextUtils.isEmpty(mPlacementName)) {
+                        IronSource.showISDemandOnlyInterstitial(mInstanceId);
+                    } else {
+                        IronSource.showISDemandOnlyInterstitial(mInstanceId,mPlacementName);
+                    }
                 } else {
-                    IronSource.showInterstitial(placementName);
+                    sendMoPubInterstitialFailed(MoPubErrorCode.NO_FILL);
                 }
-            } else {
-                sendMoPubInterstitialFailed(MoPubErrorCode.NO_FILL);
+            } catch (Exception e) {
+                onLog(e.toString());
+                sendMoPubInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
             }
-        } catch (Exception e) {
-            onLog(e.toString());
-            sendMoPubInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
         }
-    }
-
-    @Override
-    protected void onInvalidate() {
-        onLog("onInvalidate");
-        mMoPubListener = null;
-    }
 
-    // Mopub API Finish //
+        @Override
+        protected void onInvalidate() {
+            onLog("onInvalidate");
+            mMoPubListener = null;
+        }
 
-    private void sendMoPubInterstitialFailed(final MoPubErrorCode errorCode) {
-        sHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                if (mMoPubListener != null) {
-                    mMoPubListener.onInterstitialFailed(errorCode);
-                }
+        /**
+         * Class Helper Methods
+         **/
+
+        private void initIronSourceSDK(Activity activity, String appKey) {
+            if (!mInitInterstitialSuccessfully) {
+                onLog("initInterstitial - IronSourceInterstitial");
+                IronSource.setISDemandOnlyInterstitialListener(this);
+                IronSource.setMediationType(MEDIATION_TYPE);
+                IronSource.initISDemandOnly(activity, appKey, IronSource.AD_UNIT.INTERSTITIAL);
+                mInitInterstitialSuccessfully = true;
             }
-        });
-    }
+        }
 
-    private synchronized void initISIronSourceSDK(Activity activity, String appKey) {
-        if (initState == INIT_NOT_STARTED) {
-            onLog("initInterstitial - IronSourceInterstitial");
-            initState = INIT_PENDING;
-            IronSource.setInterstitialListener(this);
-            ConfigFile.getConfigFile()
-                    .setPluginData(ADAPTER_NAME, ADAPTER_VERSION, MoPub.SDK_VERSION);
-            IronSource.setMediationType("mopub");
-            IronSource.init(activity, appKey, IronSource.AD_UNIT.INTERSTITIAL, IronSource.AD_UNIT.REWARDED_VIDEO);
-            initState = INIT_SUCCEEDED;
+        private void loadInterstitial() {
+            if (IronSource.isISDemandOnlyInterstitialReady(mInstanceId)) {
+                onInterstitialAdReady(mInstanceId);
+            } else {
+                onLog("loadInterstitial");
+                IronSource.loadISDemandOnlyInterstitial(mInstanceId);
+            }
         }
-    }
 
-    private void loadISIronSourceSDK() {
-        if (IronSource.isInterstitialReady()) {
-            onInterstitialAdReady();
-        } else {
-            onLog("loadInterstitial");
-            IronSource.loadInterstitial();
+        private void onLog(String message) {
+            if (mIsTestEnabled) {
+                Log.d(TAG, message);
+            }
         }
-    }
 
-    /**
-     * Activity Lifecycle Helper Methods
-     **/
-    public static void onActivityPaused(Activity activity) {
-        IronSource.onPause(activity);
-    }
+        private void sendMoPubInterstitialFailed(final MoPubErrorCode errorCode) {
+            sHandler.post(new Runnable() {
+                @Override
+                public void run() {
+                    if (mMoPubListener != null) {
+                        mMoPubListener.onInterstitialFailed(errorCode);
+                    }
+                }
+            });
+        }
 
-    public static void onActivityResumed(Activity activity) {
-        IronSource.onResume(activity);
-    }
+        private MoPubErrorCode getMoPubErrorMessage(IronSourceError ironSourceError) {
+            if (ironSourceError == null) {
+                return MoPubErrorCode.INTERNAL_ERROR;
+            }
+            switch (ironSourceError.getErrorCode()) {
+                case IronSourceError.ERROR_CODE_NO_CONFIGURATION_AVAILABLE:
+                case IronSourceError.ERROR_CODE_KEY_NOT_SET:
+                case IronSourceError.ERROR_CODE_INVALID_KEY_VALUE:
+                case IronSourceError.ERROR_CODE_INIT_FAILED:
+                    return MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+                case IronSourceError.ERROR_CODE_USING_CACHED_CONFIGURATION:
+                    return MoPubErrorCode.VIDEO_CACHE_ERROR;
+                case IronSourceError.ERROR_CODE_NO_ADS_TO_SHOW:
+                    return MoPubErrorCode.NETWORK_NO_FILL;
+                case IronSourceError.ERROR_CODE_GENERIC:
+                    return MoPubErrorCode.INTERNAL_ERROR;
+                case IronSourceError.ERROR_NO_INTERNET_CONNECTION:
+                    return MoPubErrorCode.NO_CONNECTION;
+                default:
+                    return MoPubErrorCode.NETWORK_TIMEOUT;
+            }
+        }
 
-    @Override
-    public void onInterstitialAdReady() {
-        onLog("onInterstitialAdReady");
-        sHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                if (mMoPubListener != null) {
-                    mMoPubListener.onInterstitialLoaded();
+        /**
+         * IronSource Interstitial Listener
+         **/
+
+        @Override
+        public void onInterstitialAdReady(String instanceId) {
+            onLog("onInterstitialAdReady");
+            if (!mInstanceId.equals(instanceId))
+                return;
+
+            sHandler.post(new Runnable() {
+                @Override
+                public void run() {
+                    if (mMoPubListener != null) {
+                        mMoPubListener.onInterstitialLoaded();
+                    }
                 }
-            }
-        });
-    }
+            });
+        }
 
-    @Override
-    public void onInterstitialAdLoadFailed(IronSourceError ironSourceError) {
-        onLog("onInterstitialAdLoadFailed:" + ironSourceError.getErrorMessage());
-        sendMoPubInterstitialFailed(getMoPubErrorMessage(ironSourceError));
-    }
+        @Override
+        public void onInterstitialAdLoadFailed(String instanceId, IronSourceError ironSourceError) {
+            onLog("onInterstitialAdLoadFailed:" + ironSourceError.getErrorMessage());
+            if (!mInstanceId.equals(instanceId))
+                return;
 
-    private MoPubErrorCode getMoPubErrorMessage(IronSourceError ironSourceError) {
-        if (ironSourceError == null) {
-            return MoPubErrorCode.INTERNAL_ERROR;
-        }
-        switch (ironSourceError.getErrorCode()) {
-            case IronSourceError.ERROR_CODE_NO_CONFIGURATION_AVAILABLE:
-            case IronSourceError.ERROR_CODE_KEY_NOT_SET:
-            case IronSourceError.ERROR_CODE_INVALID_KEY_VALUE:
-            case IronSourceError.ERROR_CODE_INIT_FAILED:
-                return MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
-            case IronSourceError.ERROR_CODE_USING_CACHED_CONFIGURATION:
-                return MoPubErrorCode.VIDEO_CACHE_ERROR;
-            case IronSourceError.ERROR_CODE_NO_ADS_TO_SHOW:
-                return MoPubErrorCode.NETWORK_NO_FILL;
-            case IronSourceError.ERROR_CODE_GENERIC:
-                return MoPubErrorCode.INTERNAL_ERROR;
-            case IronSourceError.ERROR_NO_INTERNET_CONNECTION:
-                return MoPubErrorCode.NO_CONNECTION;
-            default:
-                return MoPubErrorCode.NETWORK_TIMEOUT;
+            sendMoPubInterstitialFailed(getMoPubErrorMessage(ironSourceError));
         }
-    }
 
-    @Override
-    public void onInterstitialAdOpened() {
-        onLog("onInterstitialAdOpened");
-        sHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                if (mMoPubListener != null) {
-                    mMoPubListener.onInterstitialShown();
+        @Override
+        public void onInterstitialAdOpened(String instanceId) {
+            onLog("onInterstitialAdOpened");
+            sHandler.post(new Runnable() {
+                @Override
+                public void run() {
+                    if (mMoPubListener != null) {
+                        mMoPubListener.onInterstitialShown();
+                    }
                 }
-            }
-        });
-    }
+            });
+        }
 
-    @Override
-    public void onInterstitialAdClosed() {
-        onLog("onInterstitialAdClosed");
-        sHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                if (mMoPubListener != null) {
-                    mMoPubListener.onInterstitialDismissed();
+        @Override
+        public void onInterstitialAdClosed(String instanceId) {
+            onLog("onInterstitialAdClosed");
+            sHandler.post(new Runnable() {
+                @Override
+                public void run() {
+                    if (mMoPubListener != null) {
+                        mMoPubListener.onInterstitialDismissed();
+                    }
                 }
-            }
-        });
-    }
+            });
+        }
 
-    @Override
-    public void onInterstitialAdShowSucceeded() {
-        // not in use in Mopub mediation (we use the onInterstitialAdOpened for saying that the ad was shown)
-    }
+        @Override
+        public void onInterstitialAdShowSucceeded(String instanceId) {
+            // not in use in Mopub mediation (we use the onInterstitialAdOpened for saying that the ad was shown)
+        }
 
-    @Override
-    public void onInterstitialAdShowFailed(IronSourceError ironSourceError) {
-        onLog("onInterstitialAdShowFailed:" + ironSourceError.getErrorMessage());
-        // do nothing
-    }
+        @Override
+        public void onInterstitialAdShowFailed(String instanceId, IronSourceError ironSourceError) {
+            onLog("onInterstitialAdShowFailed:" + ironSourceError.getErrorMessage());
+            // do nothing
+        }
 
-    @Override
-    public void onInterstitialAdClicked() {
-        sHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                if (mMoPubListener != null) {
-                    mMoPubListener.onInterstitialClicked();
+        @Override
+        public void onInterstitialAdClicked(String instanceId) {
+            sHandler.post(new Runnable() {
+                @Override
+                public void run() {
+                    if (mMoPubListener != null) {
+                        mMoPubListener.onInterstitialClicked();
+                    }
                 }
-            }
-        });
-    }
-
-    private static void onLog(String message) {
-        if (isTestEnabled) {
-            Log.d(TAG, message);
+            });
         }
+
     }
-}
\ No newline at end of file
diff --git a/extras/src/com/mopub/mobileads/IronSourceRewardedVideo.java b/extras/src/com/mopub/mobileads/IronSourceRewardedVideo.java
index 44824a12..8767341c 100644
--- a/extras/src/com/mopub/mobileads/IronSourceRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/IronSourceRewardedVideo.java
@@ -7,12 +7,11 @@
 import android.util.Log;
 
 import com.ironsource.mediationsdk.IronSource;
-import com.ironsource.mediationsdk.config.ConfigFile;
+
 import com.ironsource.mediationsdk.logger.IronSourceError;
 import com.ironsource.mediationsdk.model.Placement;
-import com.ironsource.mediationsdk.sdk.RewardedVideoListener;
+import com.ironsource.mediationsdk.sdk.ISDemandOnlyRewardedVideoListener;
 import com.mopub.common.LifecycleListener;
-import com.mopub.common.MoPub;
 import com.mopub.common.MoPubReward;
 
 import java.util.Arrays;
@@ -25,60 +24,50 @@
 import static com.mopub.mobileads.MoPubRewardedVideoManager.onRewardedVideoPlaybackError;
 import static com.mopub.mobileads.MoPubRewardedVideoManager.onRewardedVideoStarted;
 
-public class IronSourceRewardedVideo extends CustomEventRewardedVideo {
+public class IronSourceRewardedVideo extends CustomEventRewardedVideo implements ISDemandOnlyRewardedVideoListener {
 
     /**
      * private vars
      */
-    private static final String TAG = "MoPub";
+    private static final String TAG = IronSourceRewardedVideo.class.getSimpleName();
 
-    private static final String ADAPTER_VERSION = "2.5.3";
-    private static final String ADAPTER_NAME = "Mopub";
     private static final String IRON_SOURCE_AD_NETWORK_ID = "ironsrc_id";
 
-    private String applicationKey;
-    private String placementName;
-    private boolean isTestEnabled;
+    // Configuration keys
+    private static final String APPLICATION_KEY  = "applicationKey";
+    private static final String APP_KEY          = "appKey";
+    private static final String TEST_ENABLED_KEY = "isTestEnabled";
+    private static final String PLACEMENT_KEY    = "placementName";
+    private static final String INSTANCE_ID_KEY  = "instanceId";
+
+    private static final String MEDIATION_TYPE   = "mopub" ;
+
+    // This is the instance id used inside ironSource SDK
+    private String mInstanceId = null;
+
+    // This is the placement name used inside ironSource SDK
+    private String mPlacementName = null;
 
-    private static IronSourceRewardedVideoListener sIronSrcRvListener;
+    private static boolean mInitRewardedVideoSuccessfully;
+    private boolean mIsTestEnabled;
 
     private int rewardAmount;
     private String rewardName;
-    private static boolean isSDKRVInitSuccess;
 
-    IronSourceRewardedVideo() {
-        sIronSrcRvListener = new IronSourceRewardedVideoListener();
-    }
+    /**
+     *  Mopub API
+     */
 
     @Nullable
     @Override
     protected LifecycleListener getLifecycleListener() {
-        return null;
-    }
 
-    @Override
-    protected boolean hasVideoAvailable() {
-        return IronSource.isRewardedVideoAvailable();
+        return null;
     }
 
     @Override
-    protected void showVideo() {
-        if (TextUtils.isEmpty(placementName)) {
-            IronSource.showRewardedVideo();
-        } else {
-            IronSource.showRewardedVideo(placementName);
-        }
-    }
-
-    /**
-     * Activity Lifecycle Helper Methods
-     **/
-    public static void onActivityPaused(Activity activity) {
-        IronSource.onPause(activity);
-    }
+    protected void onInvalidate() {
 
-    public static void onActivityResumed(Activity activity) {
-        IronSource.onResume(activity);
     }
 
     @NonNull
@@ -88,139 +77,101 @@ protected String getAdNetworkId() {
     }
 
     @Override
-    protected void onInvalidate() {
-
-    }
-
-    @Override
-    protected boolean isReady() {
-        return IronSource.isRewardedVideoAvailable();
-    }
+    protected boolean checkAndInitializeSdk(@NonNull Activity launcherActivity, @NonNull Map<String, Object> localExtras, @NonNull Map<String, String> serverExtras) throws Exception {
 
-    @Override
-    protected void show() {
-        if (TextUtils.isEmpty(placementName)) {
-            IronSource.showRewardedVideo();
-        } else {
-            IronSource.showRewardedVideo(placementName);
+        String applicationKey = "";
+        mInstanceId = "0";
+        if (serverExtras.get(APPLICATION_KEY) != null) {
+            applicationKey = serverExtras.get(APPLICATION_KEY);
+        } else if (serverExtras.get(APP_KEY) != null) {
+            //try appKey if applicationKey doesn't exists (fallback)
+            applicationKey = serverExtras.get(APP_KEY);
         }
-    }
 
-    @Override
-    protected boolean checkAndInitializeSdk(@NonNull Activity launcherActivity, @NonNull Map<String, Object> localExtras, @NonNull Map<String, String> serverExtras) throws Exception {
-        if (serverExtras.get("applicationKey") != null) {
-            applicationKey = serverExtras.get("applicationKey");
-        } else if (serverExtras.get("appKey") != null) {
-            //try appKey if applicationKey doesn't exists (fallback)
-            applicationKey = serverExtras.get("appKey");
+        if (serverExtras.get(PLACEMENT_KEY) != null) {
+            mPlacementName = serverExtras.get(PLACEMENT_KEY);
         }
 
-        if (serverExtras.get("placementName") != null) {
-            placementName = serverExtras.get("placementName");
+        if (serverExtras.get(TEST_ENABLED_KEY) != null) {
+            mIsTestEnabled = Boolean.valueOf(serverExtras.get(TEST_ENABLED_KEY));
         }
-        if (serverExtras.get("isTestEnabled") != null) {
-            isTestEnabled = Boolean.valueOf(serverExtras.get("isTestEnabled"));
+
+        if (serverExtras.get(INSTANCE_ID_KEY) != null) {
+            mInstanceId = serverExtras.get(INSTANCE_ID_KEY);
         }
 
         onLog("server extras: " + Arrays.toString(serverExtras.entrySet().toArray()));
 
-        IronSource.setRewardedVideoListener(sIronSrcRvListener);
-        initIronSourceSDK(launcherActivity);
+        initIronSourceSDK(launcherActivity, applicationKey);
 
         return true;
 
     }
 
-    private void initIronSourceSDK(Activity activity) {
-        if (!isSDKRVInitSuccess) {
-            ConfigFile.getConfigFile()
-                    .setPluginData(ADAPTER_NAME, ADAPTER_VERSION, MoPub.SDK_VERSION);
-            IronSource.setMediationType("mopub");
-            IronSource.init(activity, applicationKey, IronSource.AD_UNIT.REWARDED_VIDEO, IronSource.AD_UNIT.INTERSTITIAL);
-            isSDKRVInitSuccess = true;
-        }
-    }
-
     @Override
     protected void loadWithSdkInitialized(@NonNull Activity activity, @NonNull Map<String, Object> localExtras, @NonNull Map<String, String> serverExtras) throws Exception {
-        if (IronSource.isRewardedVideoAvailable()) {
+        if (IronSource.isISDemandOnlyRewardedVideoAvailable(mInstanceId)) {
             onRewardedVideoLoadSuccess(IronSourceRewardedVideo.class, IRON_SOURCE_AD_NETWORK_ID);
         }
     }
 
-    //**************************** IronSource RewardedVideoListener Start *******************************
+    @Override
+    protected boolean hasVideoAvailable() {
+        return IronSource.isISDemandOnlyRewardedVideoAvailable(mInstanceId);
+    }
 
-    private class IronSourceRewardedVideoListener implements RewardedVideoListener {
+    @Override
+    protected boolean isReady() {
+        return IronSource.isISDemandOnlyRewardedVideoAvailable(mInstanceId);
+    }
 
-        //Invoked when the RewardedVideo ad view has opened.
-        @Override
-        public void onRewardedVideoAdOpened() {
-            onLog("onRewardedVideoAdOpened");
-            onRewardedVideoStarted(IronSourceRewardedVideo.class, IRON_SOURCE_AD_NETWORK_ID);
+    @Override
+    protected void showVideo() {
+        if (TextUtils.isEmpty(mPlacementName)) {
+            IronSource.showISDemandOnlyRewardedVideo(mInstanceId);
+        } else {
+            IronSource.showISDemandOnlyRewardedVideo(mInstanceId,mPlacementName);
         }
+    }
 
-        //Invoked when the user is about to return to the application after closing the RewardedVideo ad.
-        @Override
-        public void onRewardedVideoAdClosed() {
-            onLog("onRewardedVideoAdClosed, rewardName: " + rewardName + " rewardAmount: " + rewardAmount);
-            onRewardedVideoClosed(IronSourceRewardedVideo.class, IRON_SOURCE_AD_NETWORK_ID);
-
+    @Override
+    protected void show() {
+        if (TextUtils.isEmpty(mPlacementName)) {
+            IronSource.showISDemandOnlyRewardedVideo(mInstanceId);
+        } else {
+            IronSource.showISDemandOnlyRewardedVideo(mInstanceId,mPlacementName);
         }
+    }
 
-        //Invoked when there is a change in the ad availability status.
-        @Override
-        public void onRewardedVideoAvailabilityChanged(boolean available) {
-            if (available) {
-                onRewardedVideoLoadSuccess(IronSourceRewardedVideo.class, IRON_SOURCE_AD_NETWORK_ID);
-                onLog("onRewardedVideoLoadSuccess");
-            } else {
-                onRewardedVideoLoadFailure(IronSourceRewardedVideo.class, IRON_SOURCE_AD_NETWORK_ID, MoPubErrorCode.NETWORK_NO_FILL);
-                onLog("onRewardedVideoLoadFailure");
-            }
-            onLog("onVideoAvailabilityChanged");
-        }
+    /**
+     * Activity Lifecycle Helper Methods
+     **/
+    public static void onActivityPaused(Activity activity) {
 
-        //Invoked when the video ad starts playing. (Available for: AdColony, Vungle, AppLovin, UnityAds)
-        @Override
-        public void onRewardedVideoAdStarted() {
-            onLog("onVideoStart");
-        }
+        IronSource.onPause(activity);
+    }
 
-        //Invoked when the video ad finishes playing. (Available for: AdColony, Flurry, Vungle, AppLovin, UnityAds)
-        @Override
-        public void onRewardedVideoAdEnded() {
-            onLog("onVideoEnd");
-        }
+    public static void onActivityResumed(Activity activity) {
 
-        //Invoked when the user completed the video and should be rewarded.
-        @Override
-        public void onRewardedVideoAdRewarded(Placement placement) {
-            //Placement can return null if the placementName is not valid.
-            if (placement != null) {
-                rewardName = placement.getRewardName();
-                rewardAmount = placement.getRewardAmount();
-                MoPubReward reward = MoPubReward.success(rewardName, rewardAmount);
-                onRewardedVideoCompleted(IronSourceRewardedVideo.class, IRON_SOURCE_AD_NETWORK_ID, reward);
-            }
-            onLog("onRewardedVideoAdRewarded");
-        }
+        IronSource.onResume(activity);
+    }
 
-        //Invoked when an Ad failed to display.
-        @Override
-        public void onRewardedVideoAdShowFailed(IronSourceError ironSourceError) {
-            onLog("onRewardedVideoShowFail");
+    /**
+     * Class Helper Methods
+     **/
 
-            onRewardedVideoPlaybackError(IronSourceRewardedVideo.class,
-                    IRON_SOURCE_AD_NETWORK_ID,
-                    getMoPubErrorMessage(ironSourceError));
+    private void initIronSourceSDK(Activity activity, String appKey) {
+        if (!mInitRewardedVideoSuccessfully) {
+            onLog("init RewardedVideo");
+            IronSource.setISDemandOnlyRewardedVideoListener(this);
+            IronSource.setMediationType(MEDIATION_TYPE);
+            IronSource.initISDemandOnly(activity, appKey, IronSource.AD_UNIT.REWARDED_VIDEO);
+            mInitRewardedVideoSuccessfully = true;
         }
-
     }
 
-    //**************************** IronSource RewardedVideoListener End *******************************
-
     private void onLog(String message) {
-        if (isTestEnabled) {
+        if (mIsTestEnabled) {
             Log.d(TAG, message);
         }
     }
@@ -229,22 +180,95 @@ private MoPubErrorCode getMoPubErrorMessage(IronSourceError ironSourceError) {
         if (ironSourceError == null) {
             return MoPubErrorCode.INTERNAL_ERROR;
         }
+
         switch (ironSourceError.getErrorCode()) {
             case IronSourceError.ERROR_CODE_NO_CONFIGURATION_AVAILABLE:
             case IronSourceError.ERROR_CODE_KEY_NOT_SET:
             case IronSourceError.ERROR_CODE_INVALID_KEY_VALUE:
             case IronSourceError.ERROR_CODE_INIT_FAILED:
                 return MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+
             case IronSourceError.ERROR_CODE_USING_CACHED_CONFIGURATION:
                 return MoPubErrorCode.VIDEO_CACHE_ERROR;
+
             case IronSourceError.ERROR_CODE_NO_ADS_TO_SHOW:
                 return MoPubErrorCode.NETWORK_NO_FILL;
+
             case IronSourceError.ERROR_CODE_GENERIC:
                 return MoPubErrorCode.INTERNAL_ERROR;
+
             case IronSourceError.ERROR_NO_INTERNET_CONNECTION:
                 return MoPubErrorCode.NO_CONNECTION;
+
             default:
                 return MoPubErrorCode.NETWORK_TIMEOUT;
         }
     }
+
+    /**
+     * IronSource RewardedVideo Listener
+     **/
+
+    //Invoked when there is a change in the ad availability status.
+    @Override
+    public void onRewardedVideoAvailabilityChanged(String instanceId, boolean available) {
+        onLog("onRewardedVideoAvailabilityChanged");
+
+        //We handle callbacks only for
+        if (!mInstanceId.equals(instanceId))
+            return;
+
+        if (available) {
+            onRewardedVideoLoadSuccess(IronSourceRewardedVideo.class, IRON_SOURCE_AD_NETWORK_ID);
+            onLog("onRewardedVideoLoadSuccess");
+        } else {
+            onRewardedVideoLoadFailure(IronSourceRewardedVideo.class, IRON_SOURCE_AD_NETWORK_ID, MoPubErrorCode.NETWORK_NO_FILL);
+            onLog("onRewardedVideoLoadFailure");
+        }
+        onLog("onVideoAvailabilityChanged");
+    }
+
+    //Invoked when the RewardedVideo ad view has opened.
+    @Override
+    public void onRewardedVideoAdOpened(String instanceId) {
+        onLog("onRewardedVideoAdOpened");
+        onRewardedVideoStarted(IronSourceRewardedVideo.class, IRON_SOURCE_AD_NETWORK_ID);
+    }
+
+    //Invoked when the user is about to return to the application after closing the RewardedVideo ad.
+    @Override
+    public void onRewardedVideoAdClosed(String instanceId) {
+        onLog("onRewardedVideoAdClosed, rewardName: " + rewardName + " rewardAmount: " + rewardAmount);
+        onRewardedVideoClosed(IronSourceRewardedVideo.class, IRON_SOURCE_AD_NETWORK_ID);
+
+    }
+
+    //Invoked when the user completed the video and should be rewarded.
+    @Override
+    public void onRewardedVideoAdRewarded(String instanceId, Placement placement) {
+        //Placement can return null if the placementName is not valid.
+        if (placement != null) {
+            rewardName = placement.getRewardName();
+            rewardAmount = placement.getRewardAmount();
+            MoPubReward reward = MoPubReward.success(rewardName, rewardAmount);
+            onRewardedVideoCompleted(IronSourceRewardedVideo.class, IRON_SOURCE_AD_NETWORK_ID, reward);
+        }
+        onLog("onRewardedVideoAdRewarded");
+    }
+
+    //Invoked when an Ad failed to display.
+    @Override
+    public void onRewardedVideoAdShowFailed(String instanceId, IronSourceError ironSourceError) {
+        onLog("onRewardedVideoShowFail");
+
+        onRewardedVideoPlaybackError(IronSourceRewardedVideo.class,
+                IRON_SOURCE_AD_NETWORK_ID,
+                getMoPubErrorMessage(ironSourceError));
+    }
+
+    //Invoked when the video ad was clicked by the user.
+    @Override
+    public void onRewardedVideoAdClicked(String instanceId, Placement placement) {
+        onLog("onRewardedVideoAdClicked");
+    }
 }
