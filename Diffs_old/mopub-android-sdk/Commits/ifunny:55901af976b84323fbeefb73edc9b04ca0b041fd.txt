diff --git a/CHANGELOG.md b/CHANGELOG.md
index 63873ff7..1a7eb766 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,18 @@
+## Version 4.20.0 (February 20, 2018)
+- Upgraded Gradle dependency to 4.3.1.
+- Upgraded Moat dependency to 2.4.1. This fixes the AAPT2 manifest merge error.
+- Fixed a viewability bug for video ads where ViewGroups were not being properly added to the list of known obstructions.
+- We are formally separating network adapters from our MoPub SDK. This is to enable an independent release cadence resulting in faster updates and certification cycles. New mediation location is accessible [here](https://github.com/mopub/mopub-android-mediation).  
+We have also added an additional tool, making it easy for publishers to get up and running with the mediation integration. Check out https://developers.mopub.com/docs/mediation/integrate/ and integration instructions at https://developers.mopub.com/docs/android/integrating-networks/.
+- Bug fixes.
+
+## Version 4.19.0 (December 11, 2017)
+- Updated Facebook Audience Network adapters to 4.26.1.
+- Updated Flurry adapters to 8.1.0.
+- Updated Millennial rewarded ads adapters to 6.6.1.
+- Fixed a potential crash for native video ads when attempting to blur the last video frame.
+- Fixed a duplicate on loaded callback for some rewarded ads.
+
 ## Version 4.18.0 (November 1, 2017)
 - Updated the SDK compile version to 26. Android API 26 artifacts live in the new Google maven repository `maven { url 'https://maven.google.com' }`. See [this article](https://developer.android.com/about/versions/oreo/android-8.0-migration.html) for more information about using Android API 26.
 - Fixed MoPub in-app browser's back and forward button icons.
diff --git a/Jenkinsfile b/Jenkinsfile
new file mode 100644
index 00000000..6b5523bc
--- /dev/null
+++ b/Jenkinsfile
@@ -0,0 +1,22 @@
+#!/usr/bin/env groovy
+pipeline {
+    agent any
+    environment {
+        ANDROID_HOME = '/Users/jenkins/Library/Android/sdk'
+    }
+    stages {
+        stage('Build') {
+            steps {
+                sh './gradlew clean build'
+            }
+        }
+    }
+    post {
+        success {
+            slackSend color: 'GREEN', message: "<${env.BUILD_URL}|${env.JOB_NAME} #${env.BUILD_NUMBER}> has succeeded."
+        }
+        failure {
+            slackSend color: 'RED', message: "Attention @here <${env.BUILD_URL}|${env.JOB_NAME} #${env.BUILD_NUMBER}> has failed."
+        }
+    }
+}
diff --git a/README.md b/README.md
index c98dd9bc..e866608d 100644
--- a/README.md
+++ b/README.md
@@ -39,7 +39,7 @@ The MoPub SDK is available via:
     }
 
     dependencies {
-        compile('com.mopub:mopub-sdk:4.18.0@aar') {
+        implementation('com.mopub:mopub-sdk:4.20.0@aar') {
             transitive = true
         }
     }
@@ -61,27 +61,27 @@ The MoPub SDK is available via:
         // ... other project dependencies
 
         // For banners
-        compile('com.mopub:mopub-sdk-banner:4.18.0@aar') {
+        implementation('com.mopub:mopub-sdk-banner:4.20.0@aar') {
             transitive = true
         }
         
         // For interstitials
-        compile('com.mopub:mopub-sdk-interstitial:4.18.0@aar') {
+        implementation('com.mopub:mopub-sdk-interstitial:4.20.0@aar') {
             transitive = true
         }
 
         // For rewarded videos. This will automatically also include interstitials
-        compile('com.mopub:mopub-sdk-rewardedvideo:4.18.0@aar') {
+        implementation('com.mopub:mopub-sdk-rewardedvideo:4.20.0@aar') {
             transitive = true
         }
 
         // For native static (images).
-        compile('com.mopub:mopub-sdk-native-static:4.18.0@aar') {
+        implementation('com.mopub:mopub-sdk-native-static:4.20.0@aar') {
             transitive = true
         }
 
         // For native video. This will automatically also include native static
-        compile('com.mopub:mopub-sdk-native-video:4.18.0@aar') {
+        implementation('com.mopub:mopub-sdk-native-video:4.20.0@aar') {
             transitive = true
         }
     }
@@ -109,24 +109,20 @@ The MoPub SDK is available via:
 ## New in this Version
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for a complete list of additions, fixes, and enhancements in the latest release.
 
-- Updated the SDK compile version to 26. Android API 26 artifacts live in the new Google maven repository `maven { url 'https://maven.google.com' }`. See [this article](https://developer.android.com/about/versions/oreo/android-8.0-migration.html) for more information about using Android API 26.
-- Fixed MoPub in-app browser's back and forward button icons.
-- Updated AdMob adapters to 11.4.0.
-- Updated Chartboost adapters to 7.0.1.
-- Updated Facebook Audience Network adapters to 4.26.0.
-- Updated Millennial to 6.6.1.
-- Updated TapJoy adapters to 11.11.0.
-- Updated Unity Ads adapters to 2.1.1.
-- Updated Vungle adapters to 5.3.0.
+- Upgraded Gradle dependency to 4.3.1.
+- Upgraded Moat dependency to 2.4.1. This fixes the AAPT2 manifest merge error.
+- Fixed a viewability bug for video ads where ViewGroups were not being properly added to the list of known obstructions.
+- We are formally separating network adapters from our MoPub SDK. This is to enable an independent release cadence resulting in faster updates and certification cycles. New mediation location is accessible [here](https://github.com/mopub/mopub-android-mediation).  
+We have also added an additional tool, making it easy for publishers to get up and running with the mediation integration. Check out https://developers.mopub.com/docs/mediation/integrate/ and integration instructions at https://developers.mopub.com/docs/android/integrating-networks/.
 
 ## Requirements
 
 - Android 4.1 (API Version 16) and up (**Updated in 4.12.0**)
-- android-support-v4.jar, r23 (**Updated in 4.4.0**)
-- android-support-annotations.jar, r23 (**Updated in 4.4.0**)
-- android-support-v7-recyclerview.jar, r23 (**Updated in 4.4.0**)
+- android-support-v4.jar, r26 (**Updated in 4.18.0**)
+- android-support-annotations.jar, r26 (**Updated in 4.18.0**)
+- android-support-v7-recyclerview.jar, r26 (**Updated in 4.18.0**)
 - MoPub Volley Library (mopub-volley-1.1.0.jar - available on JCenter) (**Updated in 3.6.0**)
-- **Recommended** Google Play Services 9.4.0
+- **Recommended** Google Play Services 11.4.0
 
 ## <a name="upgradeRepositoryViewability"></a>Upgrading from 4.15.0 and Prior
 In 4.16.0, dependencies were added to viewability libraries provided by AVID and Moat. Apps upgrading from previous versions must add
@@ -140,7 +136,7 @@ Normally, to add the MoPub SDK to your app via JCenter, your `build.gradle` woul
 
 ```	
 dependencies {
-    compile('com.mopub:mopub-sdk:4.18.0@aar') {
+    implementation('com.mopub:mopub-sdk:4.20.0@aar') {
         transitive = true
     }
 }
@@ -149,7 +145,7 @@ Update to the following to exclude one or both viewability vendors:
 
 ```
 dependencies {
-    compile('com.mopub:mopub-sdk:4.18.0@aar') {
+    implementation('com.mopub:mopub-sdk:4.20.0@aar') {
         transitive = true
         exclude module: 'libAvid-mopub' // To exclude AVID
         exclude module: 'moat-mobile-app-kit' // To exclude Moat
diff --git a/build.gradle b/build.gradle
index ea8cdb55..23ef17bd 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,14 +1,16 @@
 buildscript {
-	repositories {
-		jcenter()
-	}
+    repositories {
+        mavenCentral()
+        jcenter()
+        google()
+    }
 
-	dependencies {
-		classpath 'com.android.tools.build:gradle:3.0.1'
-		classpath 'com.novoda:bintray-release:0.4.0'
-	}
+    dependencies {
+        classpath 'com.android.tools.build:gradle:3.0.1'
+        classpath 'com.novoda:bintray-release:0.7.0'
+    }
 }
 
 task wrapper(type: Wrapper) {
-	gradleVersion = '4.2.1'
+    gradleVersion = '4.3.1'
 }
diff --git a/extras/README.md b/extras/README.md
new file mode 100644
index 00000000..dae4df22
--- /dev/null
+++ b/extras/README.md
@@ -0,0 +1,5 @@
+# MoPub Android SDK
+
+We are formally separating network adapters from our MoPub SDK. This is to enable an independent release cadence resulting in faster updates and certification cycles. New mediation location is accessible [here](https://github.com/mopub/mopub-android-mediation).  
+
+We have also added an additional tool, making it easy for publishers to get up and running with the mediation integration. Check out https://developers.mopub.com/docs/mediation/integrate/ and integration instructions at https://developers.mopub.com/docs/android/integrating-networks/.
diff --git a/extras/src/com/mopub/simpleadsdemo/GreystripeBanner.java b/extras/src/com/mopub/simpleadsdemo/GreystripeBanner.java
deleted file mode 100644
index 07311691..00000000
--- a/extras/src/com/mopub/simpleadsdemo/GreystripeBanner.java
+++ /dev/null
@@ -1,106 +0,0 @@
-package com.mopub.simpleadsdemo;
-
-import android.content.Context;
-import android.util.Log;
-
-import com.greystripe.sdk.AdPosition;
-import com.greystripe.sdk.GSAd;
-import com.greystripe.sdk.GSAdErrorCode;
-import com.greystripe.sdk.GSAdListener;
-import com.greystripe.sdk.GSMobileBannerAdView;
-import com.mopub.mobileads.CustomEventBanner;
-import com.mopub.mobileads.MoPubErrorCode;
-
-import java.util.Map;
-
-/*
- * Tested with Greystripe SDK 2.4.0.
- */
-class GreystripeBanner extends CustomEventBanner implements GSAdListener {
-
-    private static final String DEFAULT_GREYSTRIPE_APP_ID = "YOUR_GREYSTRIPE_APP_ID";
-
-    /*
-     * These keys are intended for MoPub internal use. Do not modify.
-     */
-    public static final String APP_ID_KEY = "GUID";
-
-    private CustomEventBannerListener mBannerListener;
-    private GSMobileBannerAdView mGreystripeAd;
-
-    /*
-     * Abstract methods from CustomEventBanner
-     */
-    @Override
-    protected void loadBanner(final Context context,
-                              final CustomEventBannerListener bannerListener,
-                              final Map<String, Object> localExtras,
-                              final Map<String, String> serverExtras) {
-        mBannerListener = bannerListener;
-
-        String greystripeAppId = DEFAULT_GREYSTRIPE_APP_ID;
-        if (extrasAreValid(serverExtras)) {
-            greystripeAppId = serverExtras.get(APP_ID_KEY);
-        }
-
-        mGreystripeAd = new GSMobileBannerAdView(context, greystripeAppId);
-        mGreystripeAd.addListener(this);
-
-        mGreystripeAd.refresh();
-    }
-
-    private boolean extrasAreValid(Map<String, String> extras) {
-        return extras.containsKey(APP_ID_KEY);
-    }
-
-    @Override
-    protected void onInvalidate() {
-        mGreystripeAd.removeListener(this);
-    }
-
-    /*
-     * GSAdListener implementation
-     */
-    @Override
-    public void onAdClickthrough(final GSAd greystripeAd) {
-        Log.d("MoPub", "Greystripe banner ad clicked.");
-        mBannerListener.onBannerClicked();
-    }
-
-    @Override
-    public void onAdDismissal(final GSAd greystripeAd) {
-        Log.d("MoPub", "Greystripe banner ad modal dismissed.");
-    }
-
-    @Override
-    public void onFailedToFetchAd(final GSAd greystripeAd, final GSAdErrorCode errorCode) {
-        Log.d("MoPub", "Greystripe banner ad failed to load.");
-        mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_NO_FILL);
-    }
-
-    @Override
-    public void onFetchedAd(final GSAd greystripeAd) {
-        if (mGreystripeAd != null && mGreystripeAd.isAdReady()) {
-            Log.d("MoPub", "Greystripe banner ad loaded successfully. Showing ad...");
-            mBannerListener.onBannerLoaded(mGreystripeAd);
-        } else {
-            mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-        }
-    }
-
-    @Override
-    public void onAdCollapse(final GSAd greystripeAd) {
-        Log.d("MoPub", "Greystripe banner ad collapsed.");
-        mBannerListener.onBannerCollapsed();
-    }
-
-    @Override
-    public void onAdExpansion(final GSAd greystripeAd) {
-        Log.d("MoPub", "Greystripe banner ad expanded.");
-        mBannerListener.onBannerExpanded();
-    }
-
-    @Override
-    public void onAdResize(final GSAd gsAd, final AdPosition adPosition) {
-    }
-}
diff --git a/extras/src/com/mopub/simpleadsdemo/GreystripeInterstitial.java b/extras/src/com/mopub/simpleadsdemo/GreystripeInterstitial.java
deleted file mode 100644
index 6540db04..00000000
--- a/extras/src/com/mopub/simpleadsdemo/GreystripeInterstitial.java
+++ /dev/null
@@ -1,122 +0,0 @@
-package com.mopub.simpleadsdemo;
-
-import android.content.Context;
-import android.util.Log;
-
-import com.greystripe.sdk.AdPosition;
-import com.greystripe.sdk.GSAd;
-import com.greystripe.sdk.GSAdErrorCode;
-import com.greystripe.sdk.GSAdListener;
-import com.greystripe.sdk.GSFullscreenAd;
-import com.mopub.mobileads.CustomEventInterstitial;
-import com.mopub.mobileads.MoPubErrorCode;
-
-import java.util.Map;
-
-/*
- * Tested with Greystripe SDK 2.4.0.
- */
-class GreystripeInterstitial extends CustomEventInterstitial implements GSAdListener {
-
-    private static final String DEFAULT_GREYSTRIPE_APP_ID = "YOUR_GREYSTRIPE_APP_ID";
-
-    /*
-     * These keys are intended for MoPub internal use. Do not modify.
-     */
-    public static final String APP_ID_KEY = "GUID";
-
-    private CustomEventInterstitialListener mInterstitialListener;
-    private GSFullscreenAd mGreystripeAd;
-
-    /*
-     * Abstract methods from CustomEventInterstitial
-     */
-    @Override
-    protected void loadInterstitial(final Context context,
-                                    final CustomEventInterstitialListener interstitialListener,
-                                    final Map<String, Object> localExtras,
-                                    final Map<String, String> serverExtras) {
-        mInterstitialListener = interstitialListener;
-
-        String greystripeAppId = DEFAULT_GREYSTRIPE_APP_ID;
-        if (extrasAreValid(serverExtras)) {
-            greystripeAppId = serverExtras.get(APP_ID_KEY);
-        }
-
-        mGreystripeAd = new GSFullscreenAd(context, greystripeAppId);
-        mGreystripeAd.addListener(this);
-
-        mGreystripeAd.fetch();
-    }
-
-    private static boolean extrasAreValid(Map<String, String> extras) {
-        return extras.containsKey(APP_ID_KEY);
-    }
-
-    @Override
-    protected void showInterstitial() {
-        if (!mGreystripeAd.isAdReady()) {
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-            return;
-        }
-
-        Log.d("MoPub", "Showing Greystripe interstitial ad.");
-        mGreystripeAd.display();
-        mInterstitialListener.onInterstitialShown();
-    }
-
-    @Override
-    protected void onInvalidate() {
-        mGreystripeAd.removeListener(this);
-    }
-
-    /*
-     * GSAdListener implementation
-     */
-    @Override
-    public void onAdClickthrough(final GSAd greystripeAd) {
-        Log.d("MoPub", "Greystripe interstitial ad clicked.");
-        mInterstitialListener.onInterstitialClicked();
-
-        /*
-         * XXX: When a Greystripe interstitial is dismissed as a result of a user click, the
-         * onAdDismissal callback does not get fired. This call ensures that the custom event
-         * listener is informed of all dismissals.
-         */
-        mInterstitialListener.onInterstitialDismissed();
-    }
-
-    @Override
-    public void onAdDismissal(final GSAd greystripeAd) {
-        Log.d("MoPub", "Greystripe interstitial ad dismissed.");
-        mInterstitialListener.onInterstitialDismissed();
-    }
-
-    @Override
-    public void onFailedToFetchAd(final GSAd greystripeAd, final GSAdErrorCode errorCode) {
-        Log.d("MoPub", "Greystripe interstitial ad failed to load.");
-        mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
-    }
-
-    @Override
-    public void onFetchedAd(final GSAd greystripeAd) {
-        if (mGreystripeAd != null && mGreystripeAd.isAdReady()) {
-            Log.d("MoPub", "Greysripe interstitial ad loaded successfully.");
-            mInterstitialListener.onInterstitialLoaded();
-        } else {
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-        }
-    }
-
-    @Override
-    public void onAdCollapse(final GSAd greystripeAd) {
-    }
-
-    @Override
-    public void onAdExpansion(final GSAd greystripeAd) {
-    }
-
-    @Override
-    public void onAdResize(final GSAd gsAd, final AdPosition adPosition) {
-    }
-}
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 8b60e124..3e785403 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Tue Sep 06 11:08:36 PDT 2016
+#Mon Nov 13 15:46:01 PST 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-3.3-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.3.1-all.zip
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index d452e64f..93dfd86c 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -1,11 +1,10 @@
 <?xml version="1.0" encoding="utf-8"?>
-<manifest
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.mopub.simpleadsdemo"
-    android:versionCode="56"
-    android:versionName="4.18.0">
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+      package="com.mopub.simpleadsdemo"
+      android:versionCode="58"
+      android:versionName="4.20.0">
     <uses-sdk android:minSdkVersion="16"
-              android:targetSdkVersion="24"/>
+              android:targetSdkVersion="26"/>
 
     <uses-permission android:name="android.permission.INTERNET" />
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
@@ -18,11 +17,19 @@
                  android:networkSecurityConfig="@xml/network_security_config">
 	    <activity android:name="com.mopub.simpleadsdemo.MoPubSampleActivity"
 	            android:label="@string/app_name"
+                android:launchMode="singleInstance"
                 android:configChanges="orientation|screenSize">
 	        <intent-filter>
 	            <action android:name="android.intent.action.MAIN" />
 	            <category android:name="android.intent.category.LAUNCHER" />
 	        </intent-filter>
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+                <category android:name="android.intent.category.BROWSABLE" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <data android:scheme="mopub"
+                      android:host="load" />
+            </intent-filter>
 	    </activity>
         <activity android:name="com.mopub.mobileads.MoPubActivity"
                 android:configChanges="keyboardHidden|orientation|screenSize"/>
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index c36d3811..4ef3b197 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -1,5 +1,4 @@
 repositories {
-    mavenCentral()
     jcenter()
     flatDir {
         dirs '../libs'
@@ -12,7 +11,7 @@ apply plugin: 'com.android.application'
 
 project.group = 'com.mopub'
 project.description = '''MoPub Sample App'''
-project.version = '4.18.0'
+project.version = '4.20.0'
 
 android {
     compileSdkVersion 26
@@ -20,7 +19,7 @@ android {
     lintOptions { abortOnError false }
 
     defaultConfig {
-        versionCode 56
+        versionCode 58
         versionName version
         minSdkVersion 16
         targetSdkVersion 26
@@ -59,7 +58,10 @@ android {
 
 dependencies {
     implementation 'com.android.support:support-v4:26.1.0'
-    implementation 'com.google.android.gms:play-services-ads:9.4.0'
+    implementation 'com.google.android.gms:play-services-ads:11.4.0'
+    implementation 'com.google.android.gms:play-services-base:11.4.0'
     implementation 'com.android.support:recyclerview-v7:26.1.0'
-    api project(':mopub-sdk')
+    implementation project(':mopub-sdk')
+    implementation('com.mopub:libAvid-mopub:3.6.4')
+    implementation 'com.moat.analytics.mobile.mpub:moat-mobile-app-kit:2.1.0'
 }
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java
index f4ee63c9..c92575b3 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java
@@ -44,6 +44,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
         layoutParams.height = getHeight();
         mMoPubView.setLayoutParams(layoutParams);
 
+        views.mKeywordsField.setText(getArguments().getString(MoPubListFragment.KEYWORDS_KEY, ""));
         hideSoftKeyboard(views.mKeywordsField);
 
         final String adUnitId = mMoPubSampleAdUnit.getAdUnitId();
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java
index dbe77011..3a1b987b 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java
@@ -4,7 +4,9 @@
 import android.content.Context;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
+import android.support.annotation.NonNull;
 
+import com.mopub.common.Preconditions;
 import com.mopub.common.logging.MoPubLog;
 
 import java.util.ArrayList;
@@ -53,7 +55,10 @@ MoPubSampleAdUnit createSampleAdUnit(final MoPubSampleAdUnit sampleAdUnit) {
     }
 
     private MoPubSampleAdUnit createSampleAdUnit(final MoPubSampleAdUnit sampleAdUnit,
-                                                 final boolean isUserGenerated) {
+            final boolean isUserGenerated) {
+        deleteAllAdUnitsWithAdUnitIdAndAdType(sampleAdUnit.getAdUnitId(),
+                sampleAdUnit.getFragmentClassName());
+
         final ContentValues values = new ContentValues();
         final int userGenerated = isUserGenerated ? 1 : 0;
         values.put(COLUMN_AD_UNIT_ID, sampleAdUnit.getAdUnitId());
@@ -85,6 +90,20 @@ void deleteSampleAdUnit(final MoPubSampleAdUnit adConfiguration) {
         database.close();
     }
 
+    private void deleteAllAdUnitsWithAdUnitIdAndAdType(@NonNull final String adUnitId,
+            @NonNull final String adType) {
+        Preconditions.checkNotNull(adUnitId);
+        Preconditions.checkNotNull(adType);
+
+        final SQLiteDatabase database = mDatabaseHelper.getWritableDatabase();
+        final int numDeletedRows = database.delete(TABLE_AD_CONFIGURATIONS,
+                COLUMN_AD_UNIT_ID + " = '" + adUnitId +
+                "' AND " + COLUMN_USER_GENERATED + " = 1 AND " +
+                COLUMN_AD_TYPE + " = '" + adType + "'", null);
+        MoPubLog.d(numDeletedRows + " rows deleted with adUnitId: " + adUnitId);
+        database.close();
+    }
+
     List<MoPubSampleAdUnit> getAllAdUnits() {
         final List<MoPubSampleAdUnit> adConfigurations = new ArrayList<>();
         SQLiteDatabase database = mDatabaseHelper.getReadableDatabase();
@@ -94,7 +113,9 @@ void deleteSampleAdUnit(final MoPubSampleAdUnit adConfiguration) {
 
         while (!cursor.isAfterLast()) {
             final MoPubSampleAdUnit adConfiguration = cursorToAdConfiguration(cursor);
-            adConfigurations.add(adConfiguration);
+            if (adConfiguration != null) {
+                adConfigurations.add(adConfiguration);
+            }
             cursor.moveToNext();
         }
 
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java
index f27ab6bb..fec98dd9 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java
@@ -25,6 +25,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
                 MoPubSampleAdUnit.fromBundle(getArguments());
         final View view = inflater.inflate(R.layout.interstitial_detail_fragment, container, false);
         final DetailFragmentViewHolder views = DetailFragmentViewHolder.fromView(view);
+        views.mKeywordsField.setText(getArguments().getString(MoPubListFragment.KEYWORDS_KEY, ""));
         hideSoftKeyboard(views.mKeywordsField);
 
         final String adUnitId = adConfiguration.getAdUnitId();
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java
index d655656c..ce6d1e79 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java
@@ -3,11 +3,15 @@
 import android.app.AlertDialog;
 import android.app.Dialog;
 import android.content.DialogInterface;
+import android.net.Uri;
 import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.support.v4.app.DialogFragment;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentTransaction;
 import android.support.v4.app.ListFragment;
+import android.text.TextUtils;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -20,12 +24,14 @@
 import android.widget.Toast;
 
 import com.mopub.common.MoPub;
+import com.mopub.common.Preconditions;
 import com.mopub.common.logging.MoPubLog;
 
 import java.util.ArrayList;
 import java.util.List;
 
 import static com.mopub.simpleadsdemo.MoPubSampleAdUnit.AdType;
+import static com.mopub.simpleadsdemo.Utils.logToast;
 
 
 interface TrashCanClickListener {
@@ -33,6 +39,12 @@
 }
 
 public class MoPubListFragment extends ListFragment implements TrashCanClickListener {
+
+    private static final String AD_UNIT_ID_KEY = "adUnitId";
+    private static final String FORMAT_KEY = "format";
+    static final String KEYWORDS_KEY = "keywords";
+    private static final String NAME_KEY = "name";
+
     private MoPubSampleListAdapter mAdapter;
     private AdUnitDataSource mAdUnitDataSource;
 
@@ -44,6 +56,33 @@ public void onCreate(Bundle savedInstanceState) {
         initializeAdapter();
     }
 
+    void addAdUnitViaDeeplink(@Nullable final Uri deeplinkData) {
+        if (deeplinkData == null) {
+            return;
+        }
+
+        final String adUnitId = deeplinkData.getQueryParameter(AD_UNIT_ID_KEY);
+        try {
+            Utils.validateAdUnitId(adUnitId);
+        } catch (IllegalArgumentException e) {
+            logToast(getContext(), "Ignoring invalid ad unit: " + adUnitId);
+            return;
+        }
+
+        final String format = deeplinkData.getQueryParameter(FORMAT_KEY);
+        final AdType adType = AdType.fromDeeplinkString(format);
+        if (adType == null) {
+            logToast(getContext(), "Ignoring invalid ad format: " + format);
+            return;
+        }
+
+        final String name = deeplinkData.getQueryParameter(NAME_KEY);
+        final MoPubSampleAdUnit adUnit = new MoPubSampleAdUnit.Builder(adUnitId,
+                adType).description(name == null ? "" : name).build();
+        final MoPubSampleAdUnit newAdUnit = addAdUnit(adUnit);
+        enterAdFragment(newAdUnit, deeplinkData.getQueryParameter(KEYWORDS_KEY));
+    }
+
     @Override
     public View onCreateView(final LayoutInflater inflater, final ViewGroup container, final Bundle savedInstanceState) {
         final View view = inflater.inflate(R.layout.ad_unit_list_fragment, container, false);
@@ -67,6 +106,15 @@ public void onListItemClick(ListView listView, View view, int position, long id)
 
         final MoPubSampleAdUnit adConfiguration = mAdapter.getItem(position);
 
+        if (adConfiguration != null) {
+            enterAdFragment(adConfiguration, null);
+        }
+    }
+
+    private void enterAdFragment(@NonNull final MoPubSampleAdUnit adConfiguration,
+            @Nullable final String keywords) {
+        Preconditions.checkNotNull(adConfiguration);
+
         final FragmentTransaction fragmentTransaction =
                 getActivity().getSupportFragmentManager().beginTransaction();
 
@@ -83,7 +131,15 @@ public void onListItemClick(ListView listView, View view, int position, long id)
             return;
         }
 
-        fragment.setArguments(adConfiguration.toBundle());
+        final Bundle bundle = adConfiguration.toBundle();
+        if (!TextUtils.isEmpty(keywords)) {
+            bundle.putString(KEYWORDS_KEY, keywords);
+        }
+        fragment.setArguments(bundle);
+
+        if (getFragmentManager().getBackStackEntryCount() > 0) {
+            getFragmentManager().popBackStack();
+        }
 
         fragmentTransaction
                 .replace(R.id.fragment_container, fragment)
@@ -130,10 +186,28 @@ public void onPause() {
         super.onPause();
     }
 
-    void addAdUnit(final MoPubSampleAdUnit moPubSampleAdUnit) {
-        MoPubSampleAdUnit createdAdUnit = mAdUnitDataSource.createSampleAdUnit(moPubSampleAdUnit);
+    @NonNull
+    MoPubSampleAdUnit addAdUnit(@NonNull final MoPubSampleAdUnit moPubSampleAdUnit) {
+        Preconditions.checkNotNull(moPubSampleAdUnit);
+
+        final MoPubSampleAdUnit createdAdUnit =
+                mAdUnitDataSource.createSampleAdUnit(moPubSampleAdUnit);
+
+        for (int i = 0; i < mAdapter.getCount(); i++) {
+            final MoPubSampleAdUnit currentAdUnit = mAdapter.getItem(i);
+            if (currentAdUnit != null &&
+                    moPubSampleAdUnit.getAdUnitId().equals(currentAdUnit.getAdUnitId()) &&
+                    moPubSampleAdUnit.getFragmentClassName().equals(
+                            currentAdUnit.getFragmentClassName()) &&
+                    currentAdUnit.isUserDefined()) {
+                mAdapter.remove(currentAdUnit);
+                logToast(getContext(), moPubSampleAdUnit.getAdUnitId() + " replaced.");
+                break;
+            }
+        }
         mAdapter.add(createdAdUnit);
         mAdapter.sort(MoPubSampleAdUnit.COMPARATOR);
+        return createdAdUnit;
     }
 
     void deleteAdUnit(final MoPubSampleAdUnit moPubSampleAdUnit) {
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java
index fc175ea0..a40e9dfb 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java
@@ -1,11 +1,12 @@
 package com.mopub.simpleadsdemo;
 
 import android.annotation.TargetApi;
+import android.content.Intent;
 import android.os.Build;
 import android.os.Bundle;
+import android.support.annotation.NonNull;
 import android.support.v4.app.ActivityCompat;
 import android.support.v4.app.FragmentActivity;
-import android.support.v4.app.FragmentManager;
 import android.webkit.WebView;
 
 import com.mopub.common.MoPub;
@@ -37,6 +38,9 @@ private static void setWebDebugging() {
         }
     }
 
+    private MoPubListFragment mMoPubListFragment;
+    private Intent mDeeplinkIntent;
+
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -63,17 +67,35 @@ protected void onCreate(Bundle savedInstanceState) {
         MoPub.setLocationAwareness(MoPub.LocationAwareness.TRUNCATED);
         MoPub.setLocationPrecision(4);
 
-        if (findViewById(R.id.fragment_container) != null) {
-            final MoPubListFragment listFragment = new MoPubListFragment();
-            listFragment.setArguments(getIntent().getExtras());
-            FragmentManager fragmentManager = getSupportFragmentManager();
-            fragmentManager.beginTransaction()
-                    .add(R.id.fragment_container, listFragment)
-                    .commit();
-        }
+        createMoPubListFragment(getIntent());
 
         // Intercepts all logs including Level.FINEST so we can show a toast
         // that is not normally user-facing. This is only used for native ads.
         LoggingUtils.enableCanaryLogging(this);
     }
+
+    private void createMoPubListFragment(@NonNull final Intent intent) {
+        if (findViewById(R.id.fragment_container) != null) {
+            mMoPubListFragment = new MoPubListFragment();
+            mMoPubListFragment.setArguments(intent.getExtras());
+            getSupportFragmentManager().beginTransaction()
+                    .replace(R.id.fragment_container, mMoPubListFragment).commit();
+
+            mDeeplinkIntent = intent;
+        }
+    }
+
+    @Override
+    public void onNewIntent(@NonNull final Intent intent) {
+        mDeeplinkIntent = intent;
+    }
+
+    @Override
+    public void onPostResume() {
+        super.onPostResume();
+        if (mMoPubListFragment != null && mDeeplinkIntent != null) {
+            mMoPubListFragment.addAdUnitViaDeeplink(mDeeplinkIntent.getData());
+            mDeeplinkIntent = null;
+        }
+    }
 }
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
index f6573175..ea3bb0d3 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
@@ -2,9 +2,11 @@
 
 import android.os.Bundle;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.support.v4.app.Fragment;
 
 import java.util.Comparator;
+import java.util.Locale;
 
 class MoPubSampleAdUnit implements Comparable<MoPubSampleAdUnit> {
 
@@ -51,6 +53,35 @@ static AdType fromFragmentClassName(final String fragmentClassName) {
 
             return null;
         }
+
+        @Nullable
+        static AdType fromDeeplinkString(@Nullable final String adType) {
+            if (adType == null) {
+                return null;
+            }
+            switch (adType.toLowerCase(Locale.US)) {
+                case "banner":
+                    return BANNER;
+                case "interstitial":
+                    return INTERSTITIAL;
+                case "mrect":
+                    return MRECT;
+                case "leaderboard":
+                    return LEADERBOARD;
+                case "skyscraper":
+                    return SKYSCRAPER;
+                case "rewarded":
+                    return REWARDED_VIDEO;
+                case "native":
+                    return LIST_VIEW;
+                case "nativetableplacer":
+                    return RECYCLER_VIEW;
+                case "nativecollectionplacer":
+                    return CUSTOM_NATIVE;
+                default:
+                    return null;
+            }
+        }
     }
 
     static final Comparator<MoPubSampleAdUnit> COMPARATOR =
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java
index b7141689..b62f18c5 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java
@@ -69,6 +69,7 @@ public void onClick(View view) {
         final String adUnitId = mAdConfiguration.getAdUnitId();
         views.mDescriptionView.setText(mAdConfiguration.getDescription());
         views.mAdUnitIdView.setText(adUnitId);
+        views.mKeywordsField.setText(getArguments().getString(MoPubListFragment.KEYWORDS_KEY, ""));
         mViewPager = (ViewPager) view.findViewById(R.id.gallery_pager);
 
         // Set up a renderer for a static native ad.
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java
index b0e6cc5e..6616d4e3 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java
@@ -64,6 +64,7 @@ public void onClick(View view) {
         final String adUnitId = mAdConfiguration.getAdUnitId();
         views.mDescriptionView.setText(mAdConfiguration.getDescription());
         views.mAdUnitIdView.setText(adUnitId);
+        views.mKeywordsField.setText(getArguments().getString(MoPubListFragment.KEYWORDS_KEY, ""));
 
         final ArrayAdapter<String> adapter = new ArrayAdapter<String>(getActivity(),
                 android.R.layout.simple_list_item_1);
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java
index 472a5648..f9b9d095 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java
@@ -80,6 +80,7 @@ public void onClick(final View v) {
         final String adUnitId = mAdConfiguration.getAdUnitId();
         viewHolder.mDescriptionView.setText(mAdConfiguration.getDescription());
         viewHolder.mAdUnitIdView.setText(adUnitId);
+        viewHolder.mKeywordsField.setText(getArguments().getString(MoPubListFragment.KEYWORDS_KEY, ""));
 
         final RecyclerView.Adapter originalAdapter = new DemoRecyclerAdapter();
 
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
index 09dd3818..8f66f3d2 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
@@ -50,6 +50,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
                 MoPubSampleAdUnit.fromBundle(getArguments());
         final View view = inflater.inflate(R.layout.interstitial_detail_fragment, container, false);
         final DetailFragmentViewHolder views = DetailFragmentViewHolder.fromView(view);
+        views.mKeywordsField.setText(getArguments().getString(MoPubListFragment.KEYWORDS_KEY, ""));
         hideSoftKeyboard(views.mKeywordsField);
 
         if (!sRewardedVideoInitialized) {
diff --git a/mopub-sample/src/test/resources/robolectric.properties b/mopub-sample/src/test/resources/com/mopub/robolectric.properties
similarity index 100%
rename from mopub-sample/src/test/resources/robolectric.properties
rename to mopub-sample/src/test/resources/com/mopub/robolectric.properties
diff --git a/mopub-sdk/build.gradle b/mopub-sdk/build.gradle
index fb7e8194..ca18f0b2 100644
--- a/mopub-sdk/build.gradle
+++ b/mopub-sdk/build.gradle
@@ -1,28 +1,31 @@
 apply from: 'shared-build.gradle'
 
-repositories {
-	jcenter()
-}
-
 dependencies {
-	implementation project(':mopub-sdk:mopub-sdk-base')
-	implementation project(':mopub-sdk:mopub-sdk-banner')
-	implementation project(':mopub-sdk:mopub-sdk-interstitial')
-	implementation project(':mopub-sdk:mopub-sdk-rewardedvideo')
-	implementation project(':mopub-sdk:mopub-sdk-native-static')
-	implementation project(':mopub-sdk:mopub-sdk-native-video')
-	implementation project(':moat-mobile-app-kit')
+    api project(':mopub-sdk:mopub-sdk-base')
+    api project(':mopub-sdk:mopub-sdk-banner')
+    api project(':mopub-sdk:mopub-sdk-interstitial')
+    api project(':mopub-sdk:mopub-sdk-rewardedvideo')
+    api project(':mopub-sdk:mopub-sdk-native-static')
+    api project(':mopub-sdk:mopub-sdk-native-video')
+
+    testImplementation 'junit:junit:4.12'
+    testImplementation 'org.robolectric:robolectric:3.5.1'
+    testImplementation 'org.robolectric:shadows-support-v4:3.3.2'
+    testImplementation 'org.robolectric:shadows-httpclient:3.5.1'
+    testImplementation 'com.squareup:fest-android:1.0.7'
+    testImplementation 'org.mockito:mockito-core:1.9.5'
+    testImplementation 'org.powermock:powermock-module-junit4:1.6.5'
+    testImplementation 'org.powermock:powermock-module-junit4-rule:1.6.5'
+    testImplementation 'org.powermock:powermock-api-mockito:1.6.5'
+    testImplementation 'org.powermock:powermock-classloading-xstream:1.6.5'
+}
 
-	testCompile 'junit:junit:4.10'
-	testCompile 'org.robolectric:robolectric:3.0'
-	testCompile 'org.robolectric:shadows-support-v4:3.0'
-	testCompile 'org.robolectric:shadows-httpclient:3.0'
-	testCompile 'com.squareup:fest-android:1.0.7'
-	testCompile 'org.mockito:mockito-core:1.9.5'
-	testCompile 'org.powermock:powermock-module-junit4:1.6.5'
-	testCompile 'org.powermock:powermock-module-junit4-rule:1.6.5'
-	testCompile 'org.powermock:powermock-api-mockito:1.6.5'
-	testCompile 'org.powermock:powermock-classloading-xstream:1.6.5'
+android {
+    testOptions {
+        unitTests {
+            includeAndroidResources = true
+        }
+    }
 }
 
 project.description = 'MoPub Android SDK'
diff --git a/mopub-sdk/mopub-sdk-banner/build.gradle b/mopub-sdk/mopub-sdk-banner/build.gradle
index 835631d1..fa5fc77d 100644
--- a/mopub-sdk/mopub-sdk-banner/build.gradle
+++ b/mopub-sdk/mopub-sdk-banner/build.gradle
@@ -1,12 +1,7 @@
 apply from: '../shared-build.gradle'
 
-repositories {
-	jcenter()
-
-}
-
 dependencies {
-	api project(':mopub-sdk:mopub-sdk-base')
+    api project(':mopub-sdk:mopub-sdk-base')
 }
 
 project.description = 'MoPub Android SDK - Banner'
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/BannerVisibilityTracker.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/BannerVisibilityTracker.java
new file mode 100644
index 00000000..7649a506
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/BannerVisibilityTracker.java
@@ -0,0 +1,294 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.graphics.Rect;
+import android.os.Handler;
+import android.os.SystemClock;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.View;
+import android.view.ViewTreeObserver;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Dips;
+import com.mopub.common.util.Views;
+
+import java.lang.ref.WeakReference;
+
+import static android.view.ViewTreeObserver.OnPreDrawListener;
+
+/**
+ * Tracks banner views to determine when they become visible, where visibility is determined by
+ * whether a minimum number of dips have been visible for a minimum duration, where both values are
+ * configured by the AdServer via headers.
+ */
+class BannerVisibilityTracker {
+    // Time interval to use for throttling visibility checks.
+    private static final int VISIBILITY_THROTTLE_MILLIS = 100;
+
+    /**
+     * Callback when visibility conditions are satisfied.
+     */
+    interface BannerVisibilityTrackerListener {
+        void onVisibilityChanged();
+    }
+
+    @NonNull @VisibleForTesting final OnPreDrawListener mOnPreDrawListener;
+    @NonNull @VisibleForTesting WeakReference<ViewTreeObserver> mWeakViewTreeObserver;
+
+    /**
+     * Banner view that is being tracked.
+     */
+    @NonNull private final View mTrackedView;
+
+    /**
+     * Root view of banner view being tracked.
+     */
+    @NonNull private final View mRootView;
+
+    /**
+     * Object to check actual visibility.
+     */
+    @NonNull private final BannerVisibilityChecker mVisibilityChecker;
+
+    /**
+     * Callback listener.
+     */
+    @Nullable private BannerVisibilityTrackerListener mBannerVisibilityTrackerListener;
+
+    /**
+     * Runnable to run on each visibility loop.
+     */
+    @NonNull private final BannerVisibilityRunnable mVisibilityRunnable;
+
+    /**
+     * Handler for visibility.
+     */
+    @NonNull private final Handler mVisibilityHandler;
+
+    /**
+     * Whether the visibility runnable is scheduled.
+     */
+    private boolean mIsVisibilityScheduled;
+
+    /**
+     * Whether the imp tracker has been fired already.
+     */
+    private boolean mIsImpTrackerFired;
+
+    @VisibleForTesting
+    public BannerVisibilityTracker(@NonNull final Context context,
+            @NonNull final View rootView,
+            @NonNull final View trackedView,
+            final int minVisibleDips,
+            final int minVisibleMillis) {
+        Preconditions.checkNotNull(rootView);
+        Preconditions.checkNotNull(trackedView);
+
+        mRootView = rootView;
+        mTrackedView = trackedView;
+
+        mVisibilityChecker = new BannerVisibilityChecker(minVisibleDips, minVisibleMillis);
+        mVisibilityHandler = new Handler();
+        mVisibilityRunnable = new BannerVisibilityRunnable();
+
+        mOnPreDrawListener = new OnPreDrawListener() {
+            @Override
+            public boolean onPreDraw() {
+                scheduleVisibilityCheck();
+                return true;
+            }
+        };
+
+        mWeakViewTreeObserver = new WeakReference<ViewTreeObserver>(null);
+        setViewTreeObserver(context, mTrackedView);
+    }
+
+    private void setViewTreeObserver(@Nullable final Context context, @Nullable final View view) {
+        final ViewTreeObserver originalViewTreeObserver = mWeakViewTreeObserver.get();
+        if (originalViewTreeObserver != null && originalViewTreeObserver.isAlive()) {
+            return;
+        }
+
+        final View rootView = Views.getTopmostView(context, view);
+        if (rootView == null) {
+            MoPubLog.d("Unable to set Visibility Tracker due to no available root view.");
+            return;
+        }
+
+        final ViewTreeObserver viewTreeObserver = rootView.getViewTreeObserver();
+        if (!viewTreeObserver.isAlive()) {
+            MoPubLog.w("Visibility Tracker was unable to track views because the"
+                    + " root view tree observer was not alive");
+            return;
+        }
+
+        mWeakViewTreeObserver = new WeakReference<>(viewTreeObserver);
+        viewTreeObserver.addOnPreDrawListener(mOnPreDrawListener);
+    }
+
+    @Nullable
+    @Deprecated
+    @VisibleForTesting
+    BannerVisibilityTrackerListener getBannerVisibilityTrackerListener() {
+        return mBannerVisibilityTrackerListener;
+    }
+
+    void setBannerVisibilityTrackerListener(
+            @Nullable final BannerVisibilityTrackerListener bannerVisibilityTrackerListener) {
+        mBannerVisibilityTrackerListener = bannerVisibilityTrackerListener;
+    }
+
+    /**
+     * Destroy the visibility tracker, preventing it from future use.
+     */
+    void destroy() {
+        mVisibilityHandler.removeMessages(0);
+        mIsVisibilityScheduled = false;
+        final ViewTreeObserver viewTreeObserver = mWeakViewTreeObserver.get();
+        if (viewTreeObserver != null && viewTreeObserver.isAlive()) {
+            viewTreeObserver.removeOnPreDrawListener(mOnPreDrawListener);
+        }
+        mWeakViewTreeObserver.clear();
+        mBannerVisibilityTrackerListener = null;
+    }
+
+    void scheduleVisibilityCheck() {
+        // Tracking this directly instead of calling hasMessages directly because we measured that
+        // this led to slightly better performance.
+        if (mIsVisibilityScheduled) {
+            return;
+        }
+
+        mIsVisibilityScheduled = true;
+        mVisibilityHandler.postDelayed(mVisibilityRunnable, VISIBILITY_THROTTLE_MILLIS);
+    }
+
+    @NonNull
+    @Deprecated
+    @VisibleForTesting
+    BannerVisibilityChecker getBannerVisibilityChecker() {
+        return mVisibilityChecker;
+    }
+
+    @NonNull
+    @Deprecated
+    @VisibleForTesting
+    Handler getVisibilityHandler() {
+        return mVisibilityHandler;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    boolean isVisibilityScheduled() {
+        return mIsVisibilityScheduled;
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    boolean isImpTrackerFired() {
+        return mIsImpTrackerFired;
+    }
+
+    class BannerVisibilityRunnable implements Runnable {
+        @Override
+        public void run() {
+            if (mIsImpTrackerFired) {
+                return;
+            }
+
+            mIsVisibilityScheduled = false;
+
+            // If the view meets the dips count requirement for visibility, then also check the
+            // duration requirement for visibility.
+            if (mVisibilityChecker.isVisible(mRootView, mTrackedView)) {
+                // Start the timer for duration requirement if it hasn't already.
+                if (!mVisibilityChecker.hasBeenVisibleYet()) {
+                    mVisibilityChecker.setStartTimeMillis();
+                }
+
+                if (mVisibilityChecker.hasRequiredTimeElapsed()) {
+                    if (mBannerVisibilityTrackerListener != null) {
+                        mBannerVisibilityTrackerListener.onVisibilityChanged();
+                        mIsImpTrackerFired = true;
+                    }
+                }
+            }
+
+            // If visibility requirements are not met, check again later.
+            if (!mIsImpTrackerFired) {
+                scheduleVisibilityCheck();
+            }
+        }
+    }
+
+    static class BannerVisibilityChecker {
+        private int mMinVisibleDips;
+        private int mMinVisibleMillis;
+        private long mStartTimeMillis = Long.MIN_VALUE;
+
+        // A rect to use for hit testing. Create this once to avoid excess garbage collection
+        private final Rect mClipRect = new Rect();
+
+        BannerVisibilityChecker(final int minVisibleDips, final int minVisibleMillis) {
+            mMinVisibleDips = minVisibleDips;
+            mMinVisibleMillis = minVisibleMillis;
+        }
+
+        boolean hasBeenVisibleYet() {
+            return mStartTimeMillis != Long.MIN_VALUE;
+        }
+
+        void setStartTimeMillis() {
+            mStartTimeMillis = SystemClock.uptimeMillis();
+        }
+
+        /**
+         * Whether the visible time has elapsed from the start time.
+         */
+        boolean hasRequiredTimeElapsed() {
+            if (!hasBeenVisibleYet()) {
+                return false;
+            }
+
+            return SystemClock.uptimeMillis() - mStartTimeMillis >= mMinVisibleMillis;
+        }
+
+        /**
+         * Whether the visible dips count requirement is met.
+         */
+        boolean isVisible(@Nullable final View rootView, @Nullable final View view) {
+            // ListView & GridView both call detachFromParent() for views that can be recycled for
+            // new data. This is one of the rare instances where a view will have a null parent for
+            // an extended period of time and will not be the main window.
+            // view.getGlobalVisibleRect() doesn't check that case, so if the view has visibility
+            // of View.VISIBLE but its group has no parent it is likely in the recycle bin of a
+            // ListView / GridView and not on screen.
+            if (view == null || view.getVisibility() != View.VISIBLE || rootView.getParent() == null) {
+                return false;
+            }
+
+            // If either width or height is non-positive, the view cannot be visible.
+            if (view.getWidth() <= 0 || view.getHeight() <= 0) {
+                return false;
+            }
+
+            // View completely clipped by its parents
+            if (!view.getGlobalVisibleRect(mClipRect)) {
+                return false;
+            }
+
+            // Calculate area of view not clipped by any of its parents
+            final int widthInDips = Dips.pixelsToIntDips((float) mClipRect.width(),
+                    view.getContext());
+            final int heightInDips = Dips.pixelsToIntDips((float) mClipRect.height(),
+                    view.getContext());
+            final long visibleViewAreaInDips = (long) (widthInDips * heightInDips);
+
+            return visibleViewAreaInDips >= mMinVisibleDips;
+        }
+    }
+}
+
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBanner.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBanner.java
index ae9c0e45..51210bfa 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBanner.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBanner.java
@@ -62,7 +62,13 @@ protected void onResume(){
     public boolean isInvalidated() {
         return isInvalidated;
     }
-    
+
+    /*
+     * Fire MPX impression trackers and 3rd-party impression trackers from JS.
+     */
+    protected void trackMpxAndThirdPartyImpressions() {
+    }
+
     public interface CustomEventBannerListener {
         /*
          * Your custom event subclass must call this method when it successfully loads an ad and
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
index a15c7c9b..3c7ac11e 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
@@ -4,11 +4,14 @@
 import android.os.Handler;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.text.TextUtils;
 import android.view.View;
 
 import com.mopub.common.AdReport;
 import com.mopub.common.Constants;
+import com.mopub.common.DataKeys;
 import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.ReflectionTarget;
 import com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
@@ -21,6 +24,7 @@
 import static com.mopub.common.DataKeys.AD_HEIGHT;
 import static com.mopub.common.DataKeys.AD_REPORT_KEY;
 import static com.mopub.common.DataKeys.AD_WIDTH;
+import static com.mopub.common.DataKeys.BANNER_IMPRESSION_PIXEL_COUNT_ENABLED;
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_TIMEOUT;
@@ -39,6 +43,11 @@
 	private final Runnable mTimeout;
 	private boolean mStoredAutorefresh;
 	
+	private int mImpressionMinVisibleDips = Integer.MIN_VALUE;
+	private int mImpressionMinVisibleMs = Integer.MIN_VALUE;
+	private boolean mIsVisibilityImpressionTrackingEnabled = false;
+	@Nullable private BannerVisibilityTracker mVisibilityTracker;
+	
 	public CustomEventBannerAdapter(@NonNull MoPubView moPubView, Context context,
 	                                @NonNull String className,
 	                                @NonNull Map<String, String> serverExtras,
@@ -67,6 +76,9 @@ public void run() {
 		// Attempt to load the JSON extras into mServerExtras.
 		mServerExtras = new TreeMap<String, String>(serverExtras);
 		
+		// Parse banner impression tracking headers to determine if we are in visibility experiment
+		parseBannerImpressionTrackingHeaders();
+		
 		mLocalExtras = mMoPubView.getLocalExtras();
 		if (mMoPubView.getLocation() != null) {
 			mLocalExtras.put("location", mMoPubView.getLocation());
@@ -75,6 +87,7 @@ public void run() {
 		mLocalExtras.put(AD_REPORT_KEY, adReport);
 		mLocalExtras.put(AD_WIDTH, mMoPubView.getAdWidth());
 		mLocalExtras.put(AD_HEIGHT, mMoPubView.getAdHeight());
+		mLocalExtras.put(BANNER_IMPRESSION_PIXEL_COUNT_ENABLED, mIsVisibilityImpressionTrackingEnabled);
 	}
 	
 	@ReflectionTarget
@@ -106,6 +119,13 @@ void invalidate() {
 				MoPubLog.d("Invalidating a custom event banner threw an exception", e);
 			}
 		}
+		if (mVisibilityTracker != null) {
+			try {
+				mVisibilityTracker.destroy();
+			} catch (Exception e) {
+				MoPubLog.d("Destroying a banner visibility tracker threw an exception", e);
+			}
+		}
 		mContext = null;
 		mCustomEventBanner = null;
 		mLocalExtras = null;
@@ -113,6 +133,31 @@ void invalidate() {
 		mInvalidated = true;
 	}
 	
+	@Deprecated
+	@VisibleForTesting
+	int getImpressionMinVisibleDips() {
+		return mImpressionMinVisibleDips;
+	}
+	
+	@Deprecated
+	@VisibleForTesting
+	int getImpressionMinVisibleMs() {
+		return mImpressionMinVisibleMs;
+	}
+	
+	@Deprecated
+	@VisibleForTesting
+	boolean isVisibilityImpressionTrackingEnabled() {
+		return mIsVisibilityImpressionTrackingEnabled;
+	}
+	
+	@Nullable
+	@Deprecated
+	@VisibleForTesting
+	BannerVisibilityTracker getVisibilityTracker() {
+		return mVisibilityTracker;
+	}
+	
 	@ReflectionTarget
 	void stop() {
 		if (mCustomEventBanner != null) {
@@ -170,6 +215,33 @@ private int getTimeoutDelayMilliseconds() {
 		return DEFAULT_BANNER_TIMEOUT_DELAY;
 	}
 	
+	private void parseBannerImpressionTrackingHeaders() {
+		final String impressionMinVisibleDipsString =
+				mServerExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS);
+		final String impressionMinVisibleMsString =
+				mServerExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS);
+		
+		if (!TextUtils.isEmpty(impressionMinVisibleDipsString)
+				&& !TextUtils.isEmpty(impressionMinVisibleMsString)) {
+			try {
+				mImpressionMinVisibleDips = Integer.parseInt(impressionMinVisibleDipsString);
+			} catch (NumberFormatException e) {
+				MoPubLog.d("Cannot parse integer from header "
+						+ DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS);
+			}
+			
+			try {
+				mImpressionMinVisibleMs = Integer.parseInt(impressionMinVisibleMsString);
+			} catch (NumberFormatException e) {
+				MoPubLog.d("Cannot parse integer from header "
+						+ DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS);
+			}
+			
+			if (mImpressionMinVisibleDips > 0 && mImpressionMinVisibleMs >= 0) {
+				mIsVisibilityImpressionTrackingEnabled = true;
+			}
+		}
+	}
 	
 	/*
 	 * CustomEventBanner.Listener implementation
@@ -183,11 +255,37 @@ public void onBannerLoaded(final View bannerView, @Nullable final AdCreativeIdBu
 		cancelTimeout();
 		
 		if (mMoPubView != null) {
-			mMoPubView.setAdContentView(bannerView);
-			mMoPubView.setAdCreativeId(adCreativeIdBundle);
 			mMoPubView.nativeAdLoaded();
-			if (!(bannerView instanceof HtmlBannerWebView)) {
-				mMoPubView.trackNativeImpression();
+			
+			// If visibility impression tracking is enabled for banners, fire all impression
+			// tracking URLs (AdServer, MPX, 3rd-party) for both HTML and MRAID banner types when
+			// visibility conditions are met.
+			//
+			// Else, retain old behavior of firing AdServer impression tracking URL if and only if
+			// banner is not HTML.
+			if (mIsVisibilityImpressionTrackingEnabled) {
+				// Set up visibility tracker and listener if in experiment
+				mVisibilityTracker = new BannerVisibilityTracker(mContext, mMoPubView, bannerView,
+						mImpressionMinVisibleDips, mImpressionMinVisibleMs);
+				mVisibilityTracker.setBannerVisibilityTrackerListener(
+						new BannerVisibilityTracker.BannerVisibilityTrackerListener() {
+							@Override
+							public void onVisibilityChanged() {
+								mMoPubView.trackNativeImpression();
+								if (mCustomEventBanner != null) {
+									mCustomEventBanner.trackMpxAndThirdPartyImpressions();
+								}
+							}
+						});
+			}
+			
+			mMoPubView.setAdContentView(bannerView);
+			
+			// Old behavior
+			if (!mIsVisibilityImpressionTrackingEnabled) {
+				if (!(bannerView instanceof HtmlBannerWebView)) {
+					mMoPubView.trackNativeImpression();
+				}
 			}
 		}
 	}
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java
index 10164e4e..259e3ee1 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java
@@ -7,18 +7,24 @@
 import com.mopub.common.AdReport;
 import com.mopub.common.DataKeys;
 import com.mopub.common.ExternalViewabilitySessionManager;
+import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.factories.HtmlBannerWebViewFactory;
 
+import java.lang.ref.WeakReference;
 import java.util.Map;
 
 import static com.mopub.common.DataKeys.AD_REPORT_KEY;
+import static com.mopub.common.DataKeys.BANNER_IMPRESSION_PIXEL_COUNT_ENABLED;
+import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
 import static com.mopub.mobileads.MoPubErrorCode.INTERNAL_ERROR;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 
 public class HtmlBanner extends CustomEventBanner {
-    private HtmlBannerWebView mHtmlBannerWebView;
+    @Nullable private HtmlBannerWebView mHtmlBannerWebView;
     @Nullable private ExternalViewabilitySessionManager mExternalViewabilitySessionManager;
+    private boolean mBannerImpressionPixelCountEnabled = false;
+    @Nullable private WeakReference<Activity> mWeakActivity;
 
     @Override
     protected void loadBanner(
@@ -26,6 +32,11 @@ protected void loadBanner(
             CustomEventBannerListener customEventBannerListener,
             Map<String, Object> localExtras,
             Map<String, String> serverExtras) {
+        final Object bannerImpressionPixelCountEnabledObject = localExtras.get(
+                BANNER_IMPRESSION_PIXEL_COUNT_ENABLED);
+        if (bannerImpressionPixelCountEnabledObject instanceof Boolean) {
+            mBannerImpressionPixelCountEnabled = (boolean) bannerImpressionPixelCountEnabledObject;
+        }
 
         String htmlData;
         String redirectUrl;
@@ -37,6 +48,7 @@ protected void loadBanner(
             redirectUrl = serverExtras.get(DataKeys.REDIRECT_URL_KEY);
             clickthroughUrl = serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY);
             isScrollable = Boolean.valueOf(serverExtras.get(DataKeys.SCROLLABLE_KEY));
+
             try {
                 adReport = (AdReport) localExtras.get(AD_REPORT_KEY);
             } catch (ClassCastException e) {
@@ -52,10 +64,15 @@ protected void loadBanner(
         mHtmlBannerWebView = HtmlBannerWebViewFactory.create(context, adReport, customEventBannerListener, isScrollable, redirectUrl, clickthroughUrl);
         AdViewController.setShouldHonorServerDimensions(mHtmlBannerWebView);
 
+        // We only measure viewability when we have an activity context. This sets up a delayed
+        // viewability session if we have the new pixel-counting banner impression tracking enabled.
+        // Otherwise, set up a regular display session.
         if (context instanceof Activity) {
             final Activity activity = (Activity) context;
+            mWeakActivity = new WeakReference<Activity>(activity);
             mExternalViewabilitySessionManager = new ExternalViewabilitySessionManager(activity);
-            mExternalViewabilitySessionManager.createDisplaySession(activity, mHtmlBannerWebView);
+            mExternalViewabilitySessionManager.createDisplaySession(activity, mHtmlBannerWebView,
+                    mBannerImpressionPixelCountEnabled);
         } else {
             MoPubLog.d("Unable to start viewability session for HTML banner: Context provided was not an Activity.");
         }
@@ -94,7 +111,35 @@ protected void onStop() {
         mHtmlBannerWebView.setWebViewClient(null);
     }
 
+    @Override
+    protected void trackMpxAndThirdPartyImpressions() {
+        if (mHtmlBannerWebView == null) {
+            return;
+        }
+
+        mHtmlBannerWebView.loadUrl(WEB_VIEW_DID_APPEAR.getUrl());
+
+        // mExternalViewabilitySessionManager is usually only null if the original Context given
+        // to loadBanner() was not an Activity Context. We don't need to start the deferred
+        // viewability tracker since it wasn't created, and if it was, and the activity reference
+        // was lost, something bad has happened, so we should drop the request.
+        if (mBannerImpressionPixelCountEnabled && mExternalViewabilitySessionManager != null &&
+                mWeakActivity != null) {
+            final Activity activity = mWeakActivity.get();
+            if (activity != null) {
+                mExternalViewabilitySessionManager.startDeferredDisplaySession(activity);
+            } else {
+                MoPubLog.d("Lost the activity for deferred Viewability tracking. Dropping session.");
+            }
+        }
+    }
+
     private boolean extrasAreValid(Map<String, String> serverExtras) {
         return serverExtras.containsKey(DataKeys.HTML_RESPONSE_BODY_KEY);
     }
+
+    @VisibleForTesting
+    boolean isBannerImpressionPixelCountEnabled() {
+        return mBannerImpressionPixelCountEnabled;
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java
index 9c0c92c9..f7be2625 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java
@@ -1,6 +1,7 @@
 package com.mopub.mobileads.factories;
 
 import android.content.Context;
+import android.support.annotation.NonNull;
 
 import com.mopub.common.AdReport;
 import com.mopub.mobileads.HtmlBannerWebView;
@@ -10,6 +11,7 @@
 public class HtmlBannerWebViewFactory {
     protected static HtmlBannerWebViewFactory instance = new HtmlBannerWebViewFactory();
 
+    @NonNull
     public static HtmlBannerWebView create(
             Context context,
             AdReport adReport,
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java
index 6527bba6..63bcd711 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java
@@ -1,5 +1,6 @@
 package com.mopub.mraid;
 
+import android.app.Activity;
 import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
@@ -19,7 +20,9 @@
 import java.util.Map;
 
 import static com.mopub.common.DataKeys.AD_REPORT_KEY;
+import static com.mopub.common.DataKeys.BANNER_IMPRESSION_PIXEL_COUNT_ENABLED;
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
 import static com.mopub.mobileads.MoPubErrorCode.MRAID_LOAD_ERROR;
 
 class MraidBanner extends CustomEventBanner {
@@ -27,6 +30,7 @@
     @Nullable private CustomEventBannerListener mBannerListener;
     @Nullable private MraidWebViewDebugListener mDebugListener;
     @Nullable private ExternalViewabilitySessionManager mExternalViewabilitySessionManager;
+    private boolean mBannerImpressionPixelCountEnabled = false;
 
     @Override
     protected void loadBanner(@NonNull final Context context,
@@ -43,6 +47,12 @@ protected void loadBanner(@NonNull final Context context,
             return;
         }
 
+        final Object bannerImpressionPixelCountEnabledObject = localExtras.get(
+                BANNER_IMPRESSION_PIXEL_COUNT_ENABLED);
+        if (bannerImpressionPixelCountEnabledObject instanceof Boolean) {
+            mBannerImpressionPixelCountEnabled = (boolean) bannerImpressionPixelCountEnabledObject;
+        }
+
         final AdReport adReport;
         try {
             adReport = (AdReport) localExtras.get(AD_REPORT_KEY);
@@ -99,23 +109,53 @@ public void onDirectClick() {
             public void onReady(final @NonNull MraidBridge.MraidWebView webView,
                     final @Nullable ExternalViewabilitySessionManager viewabilityManager) {
                 webView.getSettings().setJavaScriptEnabled(true);
-                mExternalViewabilitySessionManager = new ExternalViewabilitySessionManager(context);
-                mExternalViewabilitySessionManager.createDisplaySession(context, webView);
+
+                // We only measure viewability when we have an activity context. This sets up a delayed
+                // viewability session if we have the new pixel-counting banner impression tracking enabled.
+                // Otherwise, set up a regular display session.
+                if (context instanceof Activity) {
+                    mExternalViewabilitySessionManager = new ExternalViewabilitySessionManager(
+                            context);
+                    mExternalViewabilitySessionManager.createDisplaySession(context, webView,
+                            mBannerImpressionPixelCountEnabled);
+                }
             }
         });
     }
 
     @Override
     protected void onInvalidate() {
-        super.onInvalidate();
+	    super.onInvalidate();
+        if (mExternalViewabilitySessionManager != null) {
+            mExternalViewabilitySessionManager.endDisplaySession();
+            mExternalViewabilitySessionManager = null;
+        }
         if (mMraidController != null) {
             mMraidController.setMraidListener(null);
             mMraidController.destroy();
         }
+    }
 
-        if (mExternalViewabilitySessionManager != null) {
-            mExternalViewabilitySessionManager.endDisplaySession();
-            mExternalViewabilitySessionManager = null;
+    @Override
+    protected void trackMpxAndThirdPartyImpressions() {
+        if (mMraidController == null) {
+            return;
+        }
+
+        mMraidController.loadJavascript(WEB_VIEW_DID_APPEAR.getJavascript());
+
+        // mExternalViewabilitySessionManager is usually only null if the original Context given
+        // to mMraidController was not an Activity Context. We don't need to start the deferred
+        // viewability tracker since it wasn't created, and if it was, and the activity reference
+        // was lost, something bad has happened, so we should drop the request.
+        if (mBannerImpressionPixelCountEnabled &&
+                mExternalViewabilitySessionManager != null) {
+            final Activity activity = mMraidController.getWeakActivity().get();
+            if (activity != null) {
+                mExternalViewabilitySessionManager.startDeferredDisplaySession(activity);
+            } else {
+                MoPubLog.d("Lost the activity for deferred Viewability tracking. Dropping session.");
+            }
         }
     }
 
@@ -130,4 +170,9 @@ public void setDebugListener(@Nullable MraidWebViewDebugListener debugListener)
             mMraidController.setDebugListener(debugListener);
         }
     }
+
+    @VisibleForTesting
+    boolean isBannerImpressionPixelCountEnabled() {
+        return mBannerImpressionPixelCountEnabled;
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-base/build.gradle b/mopub-sdk/mopub-sdk-base/build.gradle
index 422057a2..a5a17752 100644
--- a/mopub-sdk/mopub-sdk-base/build.gradle
+++ b/mopub-sdk/mopub-sdk-base/build.gradle
@@ -1,24 +1,23 @@
 apply from: '../shared-build.gradle'
 
 repositories {
-	flatDir {
-		dirs './libs'
-	}
-
+    flatDir {
+        dirs './libs'
+    }
+    maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
 }
 
 dependencies {
-	api 'com.mopub.volley:mopub-volley:1.1.0'
-
-	def avidEnabled = project.hasProperty("mopub.avidEnabled") ? project.getProperty("mopub.avidEnabled").toBoolean() : true
-	if (avidEnabled) {
-		implementation('com.mopub:libAvid-mopub:3.6.4')
-	}
-	def moatEnabled = project.hasProperty("mopub.moatEnabled") ? project.getProperty("mopub.moatEnabled").toBoolean() : true
-	if (moatEnabled) {
-		implementation project(':moat-mobile-app-kit')
+    api 'com.mopub.volley:mopub-volley:1.1.0'
 
-	}
+    def avidEnabled = project.hasProperty("mopub.avidEnabled") ? project.getProperty("mopub.avidEnabled").toBoolean() : true
+    if (avidEnabled) {
+        compile('com.mopub:libAvid-mopub:3.6.4')
+    }
+    def moatEnabled = project.hasProperty("mopub.moatEnabled") ? project.getProperty("mopub.moatEnabled").toBoolean() : true
+    if (moatEnabled) {
+        compile 'com.moat.analytics.mobile.mpub:moat-mobile-app-kit:2.4.1'
+    }
 }
 
 project.description = 'MoPub Android SDK - Base'
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AvidViewabilitySession.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AvidViewabilitySession.java
index 2a65e249..4583112e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AvidViewabilitySession.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AvidViewabilitySession.java
@@ -301,8 +301,8 @@ public Boolean createVideoSession(@NonNull final Activity activity, @NonNull fin
 
     @Override
     @Nullable
-    public Boolean registerVideoObstructions(@NonNull final List<View> views) {
-        Preconditions.checkNotNull(views);
+    public Boolean registerVideoObstruction(@NonNull final View view) {
+        Preconditions.checkNotNull(view);
 
         if (!isEnabled()) {
             return null;
@@ -314,16 +314,12 @@ public Boolean registerVideoObstructions(@NonNull final List<View> views) {
         }
 
         try {
-            for (final View view : views) {
-                if (view != null) {
-                    // Pre-reflection code:
-                    // mAvidVideoAdSession.registerFriendlyObstruction(view);
+            // Pre-reflection code:
+            // mAvidVideoAdSession.registerFriendlyObstruction(view);
 
-                    new Reflection.MethodBuilder(mAvidVideoAdSession, "registerFriendlyObstruction")
-                            .addParam(View.class, view)
-                            .execute();
-                }
-            }
+            new Reflection.MethodBuilder(mAvidVideoAdSession, "registerFriendlyObstruction")
+                    .addParam(View.class, view)
+                    .execute();
 
             return true;
         } catch (Exception e) {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BrowserWebViewClient.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BrowserWebViewClient.java
index e7fc2d0c..66de7413 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BrowserWebViewClient.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BrowserWebViewClient.java
@@ -8,7 +8,6 @@
 import android.webkit.WebViewClient;
 
 import com.mopub.common.logging.MoPubLog;
-import com.mopub.exceptions.IntentNotResolvableException;
 
 import java.util.EnumSet;
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java
index be2193a9..f4b0e73d 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java
@@ -17,9 +17,15 @@
     public static final String AD_WIDTH = "com_mopub_ad_width";
     public static final String AD_HEIGHT = "com_mopub_ad_height";
 
+    // Banner imp tracking fields
+    public static final String BANNER_IMPRESSION_MIN_VISIBLE_DIPS = "Banner-Impression-Min-Pixels";
+    public static final String BANNER_IMPRESSION_MIN_VISIBLE_MS = "Banner-Impression-Min-Ms";
+    public static final String BANNER_IMPRESSION_PIXEL_COUNT_ENABLED = "Banner-Impression-Pixel-Count-Enabled";
+
     // Native fields
     public static final String IMPRESSION_MIN_VISIBLE_PERCENT = "Impression-Min-Visible-Percent";
     public static final String IMPRESSION_VISIBLE_MS = "Impression-Visible-Ms";
+    public static final String IMPRESSION_MIN_VISIBLE_PX = "Impression-Min-Visible-Px";
 
     // Native Video fields
     public static final String PLAY_VISIBLE_PERCENT = "Play-Visible-Percent";
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySession.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySession.java
index 258836f5..36423f9e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySession.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySession.java
@@ -36,7 +36,7 @@
     @Nullable Boolean createVideoSession(@NonNull final Activity activity, @NonNull final View view,
             @NonNull final Set<String> buyerResources,
             @NonNull final Map<String, String> videoViewabilityTrackers);
-    @Nullable Boolean registerVideoObstructions(@NonNull final List<View> views);
+    @Nullable Boolean registerVideoObstruction(@NonNull final View view);
     @Nullable Boolean onVideoPrepared(@NonNull final View playerView, final int duration);
     @Nullable Boolean recordVideoEvent(@NonNull final VideoEvent event, final int playheadMillis);
     @Nullable Boolean endVideoSession();
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySessionManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySessionManager.java
index 439a96d3..cf24e521 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySessionManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySessionManager.java
@@ -11,7 +11,6 @@
 import com.mopub.mobileads.VastVideoConfig;
 
 import java.util.HashSet;
-import java.util.List;
 import java.util.Locale;
 import java.util.Set;
 
@@ -194,13 +193,13 @@ public void createVideoSession(@NonNull final Activity activity, @NonNull final
     /**
      * Prevents friendly obstructions from affecting viewability scores.
      *
-     * @param views Views in the same Window and a higher z-index as the video playing.
+     * @param view View in the same Window and a higher z-index as the video playing.
      */
-    public void registerVideoObstructions(@NonNull final List<View> views) {
-        Preconditions.checkNotNull(views);
+    public void registerVideoObstruction(@NonNull View view) {
+        Preconditions.checkNotNull(view);
 
         for (final ExternalViewabilitySession session : mViewabilitySessions) {
-            final Boolean successful = session.registerVideoObstructions(views);
+            final Boolean successful = session.registerVideoObstruction(view);
             logEvent(session, "register friendly obstruction", successful, true);
         }
     }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
index c154a387..7a3c6152 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
@@ -13,7 +13,7 @@
 import static com.mopub.common.ExternalViewabilitySessionManager.ViewabilityVendor;
 
 public class MoPub {
-    public static final String SDK_VERSION = "4.18.0";
+    public static final String SDK_VERSION = "4.20.0";
 
     public enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
index 59865d44..1f9d2d27 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
@@ -3,6 +3,7 @@
 import android.app.Activity;
 import android.graphics.Color;
 import android.graphics.drawable.Drawable;
+import android.os.Build;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.view.Gravity;
@@ -24,12 +25,12 @@
 
 import static android.view.ViewGroup.LayoutParams.MATCH_PARENT;
 import static android.view.ViewGroup.LayoutParams.WRAP_CONTENT;
-import static com.mopub.common.event.BaseEvent.*;
+import static com.mopub.common.event.BaseEvent.Category;
+import static com.mopub.common.event.BaseEvent.Name;
+import static com.mopub.common.event.BaseEvent.SamplingRate;
 import static com.mopub.common.util.Drawables.BACKGROUND;
 import static com.mopub.common.util.Drawables.CLOSE;
-import static com.mopub.common.util.Drawables.LEFT_ARROW;
 import static com.mopub.common.util.Drawables.REFRESH;
-import static com.mopub.common.util.Drawables.RIGHT_ARROW;
 import static com.mopub.common.util.Drawables.UNLEFT_ARROW;
 import static com.mopub.common.util.Drawables.UNRIGHT_ARROW;
 
@@ -48,6 +49,8 @@
     private DoubleTimeTracker dwellTimeTracker;
     private String mDspCreativeId;
 
+    private boolean mProgressBarAvailable;
+
     @NonNull
     public ImageButton getBackButton() {
         return mBackButton;
@@ -79,8 +82,10 @@ public void onCreate(Bundle savedInstanceState) {
 
         setResult(Activity.RESULT_OK);
 
-        getWindow().requestFeature(Window.FEATURE_PROGRESS);
-        getWindow().setFeatureInt(Window.FEATURE_PROGRESS, Window.PROGRESS_VISIBILITY_ON);
+        mProgressBarAvailable = getWindow().requestFeature(Window.FEATURE_PROGRESS);
+        if (mProgressBarAvailable) {
+            getWindow().setFeatureInt(Window.FEATURE_PROGRESS, Window.PROGRESS_VISIBILITY_ON);
+        }
 
         setContentView(getMoPubBrowserView());
 
@@ -96,7 +101,7 @@ private void initializeWebView() {
 
         webSettings.setJavaScriptEnabled(true);
 
-        /**
+        /*
          * Pinch to zoom is apparently not enabled by default on all devices, so
          * declare zoom support explicitly.
          * https://stackoverflow.com/questions/5125851/enable-disable-zoom-in-android-webview
@@ -110,16 +115,6 @@ private void initializeWebView() {
         mWebView.loadUrl(getIntent().getStringExtra(DESTINATION_URL_KEY));
 
         mWebView.setWebViewClient(new BrowserWebViewClient(this));
-
-        mWebView.setWebChromeClient(new WebChromeClient() {
-            public void onProgressChanged(WebView webView, int progress) {
-                setTitle("Loading...");
-                setProgress(progress * 100);
-                if (progress == 100) {
-                    setTitle(webView.getUrl());
-                }
-            }
-        });
     }
 
     private void initializeButtons() {
@@ -165,6 +160,7 @@ private void enableCookies() {
     protected void onPause() {
         super.onPause();
         CookieSyncManager.getInstance().stopSync();
+        mWebView.setWebChromeClient(null);
         WebViews.onPause(mWebView, isFinishing());
         // Pause dwell time counting.
         dwellTimeTracker.pause();
@@ -174,6 +170,20 @@ protected void onPause() {
     protected void onResume() {
         super.onResume();
         CookieSyncManager.getInstance().startSync();
+        mWebView.setWebChromeClient(new WebChromeClient() {
+            public void onProgressChanged(WebView webView, int progress) {
+                if (progress == 100) {
+                    setTitle(webView.getUrl());
+                } else {
+                    setTitle("Loading...");
+                }
+
+                if (mProgressBarAvailable && Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {
+                    setProgress(progress * 100);
+                }
+            }
+        });
+
         mWebView.onResume();
 
         dwellTimeTracker.start();
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoatViewabilitySession.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoatViewabilitySession.java
index 8a3b6e9e..24450868 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoatViewabilitySession.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoatViewabilitySession.java
@@ -107,6 +107,7 @@ public Boolean initialize(@NonNull final Context context) {
         // Pre-reflection code:
         // final MoatOptions options = new MoatOptions();
         // options.disableAdIdCollection = true;
+        // options.disableLocationServices = true;
         // MoatAnalytics.getInstance().start(options, application);
 
         try {
@@ -116,6 +117,9 @@ public Boolean initialize(@NonNull final Context context) {
             moatOptions.getClass().getField("disableAdIdCollection")
                     .setBoolean(moatOptions, true);
 
+            moatOptions.getClass().getField("disableLocationServices")
+                    .setBoolean(moatOptions, true);
+
             Object moatAnalytics = new Reflection.MethodBuilder(null, "getInstance")
                     .setStatic(MOAT_ANALYTICS_PATH)
                     .execute();
@@ -285,8 +289,8 @@ public Boolean createVideoSession(@NonNull final Activity activity, @NonNull fin
 
     @Override
     @Nullable
-    public Boolean registerVideoObstructions(@NonNull final List<View> views) {
-        Preconditions.checkNotNull(views);
+    public Boolean registerVideoObstruction(@NonNull final View view) {
+        Preconditions.checkNotNull(view);
 
         if (!isEnabled()) {
             return null;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
index 47416072..250f6faa 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
@@ -72,11 +72,13 @@ protected String doInBackground(@Nullable String... urls) {
 				redirectCount++;
 			}
 
-		} catch (IOException e) {
-			return null;
-		} catch (URISyntaxException e) {
-			return null;
-		}
+        } catch (IOException e) {
+            return null;
+        } catch (URISyntaxException e) {
+            return null;
+        } catch (NullPointerException e) {
+            return null;
+        }
 
 		return previousUrl;
 	}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java
index 0eac6314..fb527fef 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java
@@ -1,6 +1,5 @@
 package com.mopub.common.logging;
 
-import android.annotation.SuppressLint;
 import android.support.annotation.NonNull;
 import android.util.Log;
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ImageUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ImageUtils.java
index deb8928b..15177acd 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ImageUtils.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ImageUtils.java
@@ -1,10 +1,7 @@
 package com.mopub.common.util;
 
 import android.graphics.Bitmap;
-import android.os.Build;
 import android.support.annotation.NonNull;
-import android.widget.ImageView;
-
 
 public class ImageUtils {
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/JavaScriptWebViewCallbacks.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/JavaScriptWebViewCallbacks.java
new file mode 100644
index 00000000..143dc2e7
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/JavaScriptWebViewCallbacks.java
@@ -0,0 +1,22 @@
+package com.mopub.common.util;
+
+public enum JavaScriptWebViewCallbacks {
+    // The ad server appends these functions to the MRAID javascript to help with third party
+    // impression tracking.
+    WEB_VIEW_DID_APPEAR("webviewDidAppear();"),
+    WEB_VIEW_DID_CLOSE("webviewDidClose();");
+
+    private String mJavascript;
+    
+    JavaScriptWebViewCallbacks(String javascript) {
+        mJavascript = javascript;
+    }
+
+    public String getJavascript() {
+        return mJavascript;
+    }
+
+    public String getUrl() {
+        return "javascript:" + mJavascript;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
index 9c45e515..ad909dbe 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
@@ -27,9 +27,14 @@
     ACCEPT_LANGUAGE("Accept-Language"),
     BROWSER_AGENT("X-Browser-Agent"),
 
+    // Banner impression tracking fields
+    BANNER_IMPRESSION_MIN_VISIBLE_DIPS("X-Banner-Impression-Min-Pixels"),
+    BANNER_IMPRESSION_MIN_VISIBLE_MS("X-Banner-Impression-Min-Ms"),
+
     // Native fields
     IMPRESSION_MIN_VISIBLE_PERCENT("X-Impression-Min-Visible-Percent"),
     IMPRESSION_VISIBLE_MS("X-Impression-Visible-Ms"),
+    IMPRESSION_MIN_VISIBLE_PX("X-Native-Impression-Min-Px"),
 
     // Native Video fields
     PLAY_VISIBLE_PERCENT("X-Play-Visible-Percent"),
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Streams.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Streams.java
index 0572a7cf..fabe6469 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Streams.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Streams.java
@@ -1,5 +1,7 @@
 package com.mopub.common.util;
 
+import com.mopub.common.logging.MoPubLog;
+
 import java.io.Closeable;
 import java.io.IOException;
 import java.io.InputStream;
@@ -60,8 +62,9 @@ public static void closeStream(Closeable stream) {
 
         try {
             stream.close();
-        } catch (IOException e) {
+        } catch (Exception e) {
             // Unable to close the stream
+            MoPubLog.d("Unable to close stream. Ignoring.");
         }
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
index 2c178121..fac9157f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
@@ -256,21 +256,21 @@ private void internalLoadAd() {
 		loadNonJavascript(adUrl);
 	}
 
-	void loadNonJavascript(String url) {
-		if (url == null) {
-			return;
-		}
-
-		if (!url.startsWith("javascript:")) {
-			MoPubLog.d("Loading url: " + url);
-		}
-
-		if (mIsLoading) {
-			if (!TextUtils.isEmpty(mAdUnitId)) {  // This shouldn't be able to happen?
-				MoPubLog.i("Already loading an ad for " + mAdUnitId + ", wait to finish.");
-			}
-			return;
-		}
+    void loadNonJavascript(@Nullable final String url) {
+        if (url == null) {
+            return;
+        }
+
+        if (!url.startsWith("javascript:")) {
+            MoPubLog.d("Loading url: " + url);
+        }
+
+        if (mIsLoading) {
+            if (!TextUtils.isEmpty(mAdUnitId)) {  // This shouldn't be able to happen?
+                MoPubLog.i("Already loading an ad for " + mAdUnitId + ", wait to finish.");
+            }
+            return;
+        }
 
 		mUrl = url;
 		mIsLoading = true;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
index 6bc577f0..9e31439a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
@@ -13,12 +13,13 @@
 import android.widget.VideoView;
 
 import com.mopub.common.IntentActions;
+import com.mopub.common.Preconditions;
 import com.mopub.common.logging.MoPubLog;
 
 public abstract class BaseVideoViewController {
     private final Context mContext;
     private final RelativeLayout mLayout;
-    private final BaseVideoViewControllerListener mBaseVideoViewControllerListener;
+    @NonNull private final BaseVideoViewControllerListener mBaseVideoViewControllerListener;
     @Nullable private Long mBroadcastIdentifier;
 
     public interface BaseVideoViewControllerListener {
@@ -30,7 +31,11 @@ void onStartActivityForResult(final Class<? extends Activity> clazz,
                 final Bundle extras);
     }
 
-    protected BaseVideoViewController(final Context context, @Nullable final Long broadcastIdentifier, final BaseVideoViewControllerListener baseVideoViewControllerListener) {
+    protected BaseVideoViewController(final Context context,
+            @Nullable final Long broadcastIdentifier,
+            @NonNull final BaseVideoViewControllerListener baseVideoViewControllerListener) {
+        Preconditions.checkNotNull(baseVideoViewControllerListener);
+
         mContext = context;
         mBroadcastIdentifier = broadcastIdentifier;
         mBaseVideoViewControllerListener = baseVideoViewControllerListener;
@@ -61,6 +66,7 @@ void onActivityResult(final int requestCode, final int resultCode, final Intent
         // By default, the activity result is ignored
     }
 
+    @NonNull
     protected BaseVideoViewControllerListener getBaseVideoViewControllerListener() {
         return mBaseVideoViewControllerListener;
     }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
index eda4eea5..743c4d69 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
@@ -4,11 +4,9 @@
 import android.graphics.Bitmap;
 import android.net.Uri;
 import android.support.annotation.NonNull;
-import android.webkit.WebSettings;
 import android.webkit.WebView;
 import android.webkit.WebViewClient;
 
-import com.mopub.common.Preconditions;
 import com.mopub.common.UrlAction;
 import com.mopub.common.UrlHandler;
 import com.mopub.common.logging.MoPubLog;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
index b8b80b39..b45c5289 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
@@ -9,7 +9,6 @@
 import android.text.TextUtils;
 import android.util.AttributeSet;
 import android.view.View;
-import android.webkit.WebViewDatabase;
 import android.widget.FrameLayout;
 
 import com.mopub.common.AdFormat;
@@ -77,25 +76,6 @@ public MoPubView(Context context, AttributeSet attrs) {
         setVerticalScrollBarEnabled(false);
 	    setPauseOnVisibilityChange(true);
 
-        try {
-            // There is a rare bug in Froyo/2.2 where creation of a WebView causes a
-            // NullPointerException. (https://code.google.com/p/android/issues/detail?id=10789)
-            // It happens when the WebView can't access the local file store to make a cache file.
-            // Here, we'll work around it by trying to create a file store and then just go inert
-            // if it's not accessible.
-            if (WebViewDatabase.getInstance(context) == null) {
-                MoPubLog.e("Disabling MoPub. Local cache file is inaccessible so MoPub will " +
-                        "fail if we try to create a WebView. Details of this Android bug found at:" +
-                        "https://code.google.com/p/android/issues/detail?id=10789");
-                return;
-            }
-        } catch (Exception e) {
-            // If anything goes wrong here, it's most likely due to not having a WebView at all.
-            // This happens when Android updates WebView.
-            MoPubLog.e("Disabling MoPub due to no WebView, or it's being updated", e);
-            return;
-        }
-
         mAdViewController = AdViewControllerFactory.create(context, this);
     }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoatBuyerTagXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoatBuyerTagXmlManager.java
index 5472c971..18a3a137 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoatBuyerTagXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoatBuyerTagXmlManager.java
@@ -6,7 +6,6 @@
 import com.mopub.common.Preconditions;
 import com.mopub.mobileads.util.XmlUtils;
 
-import org.w3c.dom.Element;
 import org.w3c.dom.Node;
 
 import java.util.HashSet;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java
index dcbcbba9..dbf37d7f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java
@@ -3,7 +3,6 @@
 import android.graphics.Bitmap;
 import android.media.MediaMetadataRetriever;
 import android.os.AsyncTask;
-import android.os.Build;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.widget.ImageView;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoView.java
index d4f9949d..a34b447b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoView.java
@@ -3,7 +3,6 @@
 import android.content.Context;
 import android.media.MediaMetadataRetriever;
 import android.os.AsyncTask;
-import android.os.Build;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.widget.ImageView;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java
index 128282f9..50148a2c 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java
@@ -172,6 +172,7 @@ public boolean onTouch(View view, MotionEvent motionEvent) {
         mExternalViewabilitySessionManager = new ExternalViewabilitySessionManager(activity);
         mExternalViewabilitySessionManager.createVideoSession(activity, mVideoView,
                 mVastVideoConfig);
+        mExternalViewabilitySessionManager.registerVideoObstruction(mBlurredLastVideoFrameImageView);
 
         // Companion ad view, set to invisible initially to have it be drawn to calculate size
         mLandscapeCompanionAdView = createCompanionAdView(activity,
@@ -221,10 +222,6 @@ public void onGlobalLayout() {
         // Always add last to layout since it must be visible above all other views
         addCloseButtonWidget(activity, View.GONE);
 
-        mExternalViewabilitySessionManager.registerVideoObstructions(Arrays.asList(
-                mTopGradientStripWidget, mProgressBarWidget, mBottomGradientStripWidget,
-                mRadialCountdownWidget, mCtaButtonWidget, mSocialActionsView, mCloseButtonWidget));
-
         Handler mainHandler = new Handler(Looper.getMainLooper());
         mProgressCheckerRunnable = new VastVideoViewProgressRunnable(this, mVastVideoConfig,
                 mainHandler);
@@ -504,6 +501,7 @@ private void addTopGradientStripWidget(@NonNull final Context context) {
                 RelativeLayout.ALIGN_TOP,
                 getLayout().getId());
         getLayout().addView(mTopGradientStripWidget);
+        mExternalViewabilitySessionManager.registerVideoObstruction(mTopGradientStripWidget);
     }
 
     private void addBottomGradientStripWidget(@NonNull final Context context) {
@@ -517,6 +515,7 @@ private void addBottomGradientStripWidget(@NonNull final Context context) {
                 RelativeLayout.ABOVE,
                 mProgressBarWidget.getId());
         getLayout().addView(mBottomGradientStripWidget);
+        mExternalViewabilitySessionManager.registerVideoObstruction(mBottomGradientStripWidget);
     }
 
     private void addProgressBarWidget(@NonNull final Context context, int initialVisibility) {
@@ -524,12 +523,14 @@ private void addProgressBarWidget(@NonNull final Context context, int initialVis
         mProgressBarWidget.setAnchorId(mVideoView.getId());
         mProgressBarWidget.setVisibility(initialVisibility);
         getLayout().addView(mProgressBarWidget);
+        mExternalViewabilitySessionManager.registerVideoObstruction(mProgressBarWidget);
     }
 
     private void addRadialCountdownWidget(@NonNull final Context context, int initialVisibility) {
         mRadialCountdownWidget = new VastVideoRadialCountdownWidget(context);
         mRadialCountdownWidget.setVisibility(initialVisibility);
         getLayout().addView(mRadialCountdownWidget);
+        mExternalViewabilitySessionManager.registerVideoObstruction(mRadialCountdownWidget);
     }
 
     private void addCtaButtonWidget(@NonNull final Context context) {
@@ -541,6 +542,7 @@ private void addCtaButtonWidget(@NonNull final Context context) {
                 hasClickthroughUrl);
 
         getLayout().addView(mCtaButtonWidget);
+        mExternalViewabilitySessionManager.registerVideoObstruction(mCtaButtonWidget);
 
         mCtaButtonWidget.setOnTouchListener(mClickThroughListener);
 
@@ -556,6 +558,7 @@ private void addCloseButtonWidget(@NonNull final Context context, int initialVis
         mCloseButtonWidget.setVisibility(initialVisibility);
 
         getLayout().addView(mCloseButtonWidget);
+        mExternalViewabilitySessionManager.registerVideoObstruction(mCloseButtonWidget);
 
         final View.OnTouchListener closeOnTouchListener = new View.OnTouchListener() {
             @Override
@@ -632,6 +635,7 @@ View createCompanionAdView(@NonNull final Context context,
                         RelativeLayout.LayoutParams.MATCH_PARENT,
                         RelativeLayout.LayoutParams.MATCH_PARENT);
         getLayout().addView(relativeLayout, layoutParams);
+        mExternalViewabilitySessionManager.registerVideoObstruction(relativeLayout);
 
         VastWebView companionView = createCompanionVastWebView(context, vastCompanionAdConfig);
 
@@ -644,6 +648,8 @@ View createCompanionAdView(@NonNull final Context context,
         companionAdLayout.addRule(RelativeLayout.CENTER_IN_PARENT, RelativeLayout.TRUE);
 
         relativeLayout.addView(companionView, companionAdLayout);
+        mExternalViewabilitySessionManager.registerVideoObstruction(companionView);
+
         return companionView;
     }
 
@@ -695,9 +701,12 @@ View createSocialActionsView(@NonNull final Context context,
                 new RelativeLayout.LayoutParams(
                         RelativeLayout.LayoutParams.WRAP_CONTENT,
                         RelativeLayout.LayoutParams.WRAP_CONTENT);
+
         relativeLayout.addView(companionView, layoutParams);
+        mExternalViewabilitySessionManager.registerVideoObstruction(companionView);
 
         getLayout().addView(relativeLayout, companionAdLayout);
+        mExternalViewabilitySessionManager.registerVideoObstruction(relativeLayout);
 
         companionView.setVisibility(initialVisibility);
         return companionView;
@@ -753,6 +762,7 @@ public boolean shouldOverrideUrlLoading(WebView view, String url) {
         layoutParams.setMargins(leftMargin, topMargin, 0, 0);
 
         getLayout().addView(iconView, layoutParams);
+        mExternalViewabilitySessionManager.registerVideoObstruction(iconView);
 
         return iconView;
     }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java
index 0bf3c15a..a7028079 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java
@@ -8,9 +8,6 @@
 
 import org.w3c.dom.Node;
 
-import java.util.ArrayList;
-import java.util.List;
-
 /**
  * This XML manager handles Wrapper nodes. Wrappers redirect to other VAST documents (which may
  * in turn redirect to more wrappers). Wrappers can also contain impression trackers,
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
index 0cdb4fa7..123f33e3 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
@@ -1,7 +1,6 @@
 package com.mopub.mobileads.resource;
 
 import android.graphics.Canvas;
-import android.graphics.Color;
 import android.graphics.Paint;
 
 public class CloseButtonDrawable extends BaseWidgetDrawable {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
index f1b25964..c7539dd5 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
@@ -1113,6 +1113,11 @@ public Context getContext() {
         return mContext;
     }
 
+    @NonNull
+    WeakReference<Activity> getWeakActivity() {
+        return mWeakActivity;
+    }
+
     @VisibleForTesting
     void handleSetOrientationProperties(final boolean allowOrientationChange,
             final MraidOrientation forceOrientation) throws MraidCommandException {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
index 45287b98..bd4ba50e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
@@ -243,6 +243,8 @@ public Listener getListener() {
                     ResponseHeader.IMPRESSION_MIN_VISIBLE_PERCENT);
             final String impressionVisibleMS = extractHeader(headers,
                     ResponseHeader.IMPRESSION_VISIBLE_MS);
+            final String impressionMinVisiblePx = extractHeader(headers,
+                    ResponseHeader.IMPRESSION_MIN_VISIBLE_PX);
             if (!TextUtils.isEmpty(impressionMinVisiblePercent)) {
                 serverExtras.put(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT,
                         impressionMinVisiblePercent);
@@ -250,6 +252,9 @@ public Listener getListener() {
             if (!TextUtils.isEmpty(impressionVisibleMS)) {
                 serverExtras.put(DataKeys.IMPRESSION_VISIBLE_MS, impressionVisibleMS);
             }
+            if (!TextUtils.isEmpty(impressionMinVisiblePx)) {
+                serverExtras.put(DataKeys.IMPRESSION_MIN_VISIBLE_PX, impressionMinVisiblePx);
+            }
         }
         if (AdType.VIDEO_NATIVE.equals(adTypeString)) {
             serverExtras.put(DataKeys.PLAY_VISIBLE_PERCENT,
@@ -289,6 +294,14 @@ public Listener getListener() {
                     extractHeader(headers, ResponseHeader.VIDEO_VIEWABILITY_TRACKERS));
         }
 
+        // Banner imp tracking
+        if (AdFormat.BANNER.equals(mAdFormat)) {
+            serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS,
+                    extractHeader(headers, ResponseHeader.BANNER_IMPRESSION_MIN_VISIBLE_MS));
+            serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS,
+                    extractHeader(headers, ResponseHeader.BANNER_IMPRESSION_MIN_VISIBLE_DIPS));
+        }
+
         // Disable viewability vendors, if any
         final String disabledViewabilityVendors = extractHeader(headers,
                 ResponseHeader.DISABLE_VIEWABILITY);
diff --git a/mopub-sdk/mopub-sdk-interstitial/build.gradle b/mopub-sdk/mopub-sdk-interstitial/build.gradle
index 666dff55..9cddd85f 100644
--- a/mopub-sdk/mopub-sdk-interstitial/build.gradle
+++ b/mopub-sdk/mopub-sdk-interstitial/build.gradle
@@ -1,7 +1,7 @@
 apply from: '../shared-build.gradle'
 
 dependencies {
-    implementation project(':mopub-sdk:mopub-sdk-base')
+    api project(':mopub-sdk:mopub-sdk-base')
 }
 
 project.description = 'MoPub Android SDK - Interstitial'
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
index f5208bb0..3e4f0c17 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
@@ -18,27 +18,6 @@
 
 abstract class BaseInterstitialActivity extends Activity {
     @Nullable protected AdReport mAdReport;
-
-    enum JavaScriptWebViewCallbacks {
-        // The ad server appends these functions to the MRAID javascript to help with third party
-        // impression tracking.
-        WEB_VIEW_DID_APPEAR("webviewDidAppear();"),
-        WEB_VIEW_DID_CLOSE("webviewDidClose();");
-
-        private String mJavascript;
-        private JavaScriptWebViewCallbacks(String javascript) {
-            mJavascript = javascript;
-        }
-
-        protected String getJavascript() {
-            return mJavascript;
-        }
-
-        protected String getUrl() {
-            return "javascript:" + mJavascript;
-        }
-    }
-
     @Nullable private CloseableLayout mCloseableLayout;
     @Nullable private Long mBroadcastIdentifier;
 
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java
index 886624a9..d5f51e1f 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java
@@ -31,8 +31,8 @@
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
-import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
+import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
+import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
 import static com.mopub.mobileads.HtmlWebViewClient.MOPUB_FAIL_LOAD;
@@ -167,14 +167,14 @@ protected void onCreate(Bundle savedInstanceState) {
 
     @Override
     protected void onDestroy() {
-        if (mHtmlInterstitialWebView != null) {
-            mHtmlInterstitialWebView.loadUrl(WEB_VIEW_DID_CLOSE.getUrl());
-            mHtmlInterstitialWebView.destroy();
-        }
         if (mExternalViewabilitySessionManager != null) {
             mExternalViewabilitySessionManager.endDisplaySession();
             mExternalViewabilitySessionManager = null;
         }
+        if (mHtmlInterstitialWebView != null) {
+            mHtmlInterstitialWebView.loadUrl(WEB_VIEW_DID_CLOSE.getUrl());
+            mHtmlInterstitialWebView.destroy();
+        }
         broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_DISMISS);
         super.onDestroy();
     }
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
index bb9b44c4..15b100df 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
@@ -34,8 +34,8 @@
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
-import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
+import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
+import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
 import static com.mopub.mobileads.HtmlWebViewClient.MOPUB_FAIL_LOAD;
 
@@ -240,6 +240,10 @@ protected void onResume() {
 
     @Override
     protected void onDestroy() {
+        if (mExternalViewabilitySessionManager != null) {
+            mExternalViewabilitySessionManager.endDisplaySession();
+            mExternalViewabilitySessionManager = null;
+        }
         if (mMraidController != null) {
             mMraidController.destroy();
         }
diff --git a/mopub-sdk/mopub-sdk-native-static/build.gradle b/mopub-sdk/mopub-sdk-native-static/build.gradle
index b75f43ee..976ae603 100644
--- a/mopub-sdk/mopub-sdk-native-static/build.gradle
+++ b/mopub-sdk/mopub-sdk-native-static/build.gradle
@@ -1,8 +1,8 @@
 apply from: '../shared-build.gradle'
 
 dependencies {
-    implementation project(':mopub-sdk:mopub-sdk-base')
-    implementation 'com.android.support:recyclerview-v7:26.1.0'
+    api project(':mopub-sdk:mopub-sdk-base')
+    api 'com.android.support:recyclerview-v7:26.1.0'
 }
 
 project.description = 'MoPub Android SDK - Native Static'
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionInterface.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionInterface.java
index 6f84021f..6931c414 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionInterface.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionInterface.java
@@ -8,6 +8,7 @@
  */
 public interface ImpressionInterface {
     int getImpressionMinPercentageViewed();
+    Integer getImpressionMinVisiblePx();
     int getImpressionMinTimeViewed();
     void recordImpression(View view);
     boolean isImpressionRecorded();
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionTracker.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionTracker.java
index d7775eab..d4989636 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionTracker.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionTracker.java
@@ -117,7 +117,8 @@ public void addView(final View view, @NonNull final ImpressionInterface impressi
         }
 
         mTrackedViews.put(view, impressionInterface);
-        mVisibilityTracker.addView(view, impressionInterface.getImpressionMinPercentageViewed());
+        mVisibilityTracker.addView(view, impressionInterface.getImpressionMinPercentageViewed(),
+                impressionInterface.getImpressionMinVisiblePx());
     }
 
     public void removeView(final View view) {
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
index 99a99688..5a0b2641 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
@@ -352,7 +352,7 @@ public View getView(final int position, final View view, final ViewGroup viewGro
                     mStreamAdPlacer.getOriginalPosition(position), view, viewGroup);
         }
         mViewPositionMap.put(resultView, position);
-        mVisibilityTracker.addView(resultView, 0);
+        mVisibilityTracker.addView(resultView, 0, null);
 
         return resultView;
     }
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
index 68f01f84..f300c7a5 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
@@ -71,6 +71,36 @@ protected void loadNativeAd(@NonNull final Context context,
             }
         }
 
+        if (serverExtras.containsKey(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT)) {
+            try {
+                moPubStaticNativeAd.setImpressionMinPercentageViewed(Integer.parseInt(
+                        serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT)));
+            } catch (final NumberFormatException e) {
+                MoPubLog.d("Unable to format min visible percent: " +
+                        serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT));
+            }
+        }
+
+        if (serverExtras.containsKey(DataKeys.IMPRESSION_VISIBLE_MS)) {
+            try {
+                moPubStaticNativeAd.setImpressionMinTimeViewed(
+                        Integer.parseInt(serverExtras.get(DataKeys.IMPRESSION_VISIBLE_MS)));
+            } catch (final NumberFormatException e) {
+                MoPubLog.d("Unable to format min time: " +
+                        serverExtras.get(DataKeys.IMPRESSION_VISIBLE_MS));
+            }
+        }
+
+        if (serverExtras.containsKey(DataKeys.IMPRESSION_MIN_VISIBLE_PX)) {
+            try {
+                moPubStaticNativeAd.setImpressionMinVisiblePx(Integer.parseInt(
+                        serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PX)));
+            } catch (final NumberFormatException e) {
+                MoPubLog.d("Unable to format min visible px: " +
+                        serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PX));
+            }
+        }
+
         try {
             moPubStaticNativeAd.loadAd();
         } catch (IllegalArgumentException e) {
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
index 5c887cb4..3e4583ce 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
@@ -326,7 +326,6 @@ public void refreshAds(@NonNull String adUnitId,
             loadAds(adUnitId, requestParameters);
         } else {
             MoPubLog.w("This LayoutManager can't be refreshed.");
-            return;
         }
     }
 
@@ -430,7 +429,7 @@ public void onBindViewHolder(final RecyclerView.ViewHolder holder, final int pos
         }
 
         mViewPositionMap.put(holder.itemView, position);
-        mVisibilityTracker.addView(holder.itemView, 0);
+        mVisibilityTracker.addView(holder.itemView, 0, null);
 
         //noinspection unchecked
         mOriginalAdapter.onBindViewHolder(holder, mStreamAdPlacer.getOriginalPosition(position));
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/SpinningProgressView.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/SpinningProgressView.java
index 9fa5d9ff..ff220440 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/SpinningProgressView.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/SpinningProgressView.java
@@ -3,7 +3,6 @@
 import android.content.Context;
 import android.graphics.Color;
 import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
 import android.view.Gravity;
 import android.view.View;
 import android.view.ViewGroup;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeAd.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeAd.java
index 692dbbe4..8a40809b 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeAd.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeAd.java
@@ -33,11 +33,13 @@
 
     // Impression logistics
     private boolean mImpressionRecorded;
+    private Integer mImpressionMinVisiblePx;
 
     // Extras
     @NonNull private final Map<String, Object> mExtras;
 
     public StaticNativeAd() {
+        mImpressionMinVisiblePx = null;
         mExtras = new HashMap<String, Object>();
     }
 
@@ -217,6 +219,21 @@ final public void setImpressionMinTimeViewed(final int impressionMinTimeViewed)
     final public void setImpressionMinPercentageViewed(final int impressionMinPercentageViewed) {
     
     }
+	
+	/**
+	 * Sets the minimum number of pixels of the ad to be on screen before impression trackers are
+	 * fired. This must be an Integer greater than 0.
+	 *
+	 * @param impressionMinVisiblePx Number of pixels of an ad (ignored if negative or 0).
+	 */
+	final public void setImpressionMinVisiblePx(@Nullable final Integer impressionMinVisiblePx) {
+		if (impressionMinVisiblePx != null && impressionMinVisiblePx > 0) {
+			mImpressionMinVisiblePx = impressionMinVisiblePx;
+		} else {
+			MoPubLog.d("Ignoring null or non-positive impressionMinVisiblePx: " +
+					impressionMinVisiblePx);
+		}
+	}
 
     // Lifecycle Handlers
     @Override
@@ -258,6 +275,17 @@ final public int getImpressionMinTimeViewed() {
         return DEFAULT_IMPRESSION_MIN_TIME_VIEWED_MS;
     }
 
+    /**
+     * Returns the minimum viewable number of pixels of the ad that must be onscreen for it to be
+     * considered visible. This value, if present and positive will override the min percentage.
+     * See {@link StaticNativeAd#getImpressionMinTimeViewed()} for additional impression
+     * tracking considerations.
+     */
+    @Override
+    final public Integer getImpressionMinVisiblePx() {
+        return mImpressionMinVisiblePx;
+    }
+
     @Override
     final public boolean isImpressionRecorded() {
         return mImpressionRecorded;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TaskManager.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TaskManager.java
index a13163c7..4b9df9ee 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TaskManager.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TaskManager.java
@@ -1,10 +1,8 @@
 package com.mopub.nativeads;
 
 import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
 
 import com.mopub.common.Preconditions;
-import com.mopub.common.Preconditions.NoThrow;
 
 import java.util.Collections;
 import java.util.HashMap;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/VisibilityTracker.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/VisibilityTracker.java
index 7453d2c4..424e97d0 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/VisibilityTracker.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/VisibilityTracker.java
@@ -54,6 +54,12 @@
         int mMaxInvisiblePercent;
         long mAccessOrder;
         View mRootView;
+
+        /**
+         * If this number is set, then use this as the minimum amount of the view seen before it is
+         * considered visible. This is in real pixels.
+         */
+        @Nullable Integer mMinVisiblePx;
     }
 
     // Views that are being tracked, mapped to the min viewable percentage
@@ -135,15 +141,19 @@ void setVisibilityTrackerListener(
     /**
      * Tracks the given view for visibility.
      */
-    void addView(@NonNull final View view, final int minPercentageViewed) {
-        addView(view, view, minPercentageViewed);
+    void addView(@NonNull final View view, final int minPercentageViewed,
+            @Nullable final Integer minVisiblePx) {
+        addView(view, view, minPercentageViewed, minVisiblePx);
     }
 
-    void addView(@NonNull View rootView, @NonNull final View view, final int minPercentageViewed) {
-      addView(rootView, view, minPercentageViewed, minPercentageViewed);
+    void addView(@NonNull View rootView, @NonNull final View view, final int minPercentageViewed,
+            @Nullable final Integer minVisiblePx) {
+        addView(rootView, view, minPercentageViewed, minPercentageViewed, minVisiblePx);
     }
 
-    void addView(@NonNull View rootView, @NonNull final View view, final int minVisiblePercentageViewed, final int maxInvisiblePercentageViewed) {
+    void addView(@NonNull View rootView, @NonNull final View view,
+            final int minVisiblePercentageViewed, final int maxInvisiblePercentageViewed,
+            @Nullable final Integer minVisiblePx) {
         setViewTreeObserver(view.getContext(), view);
 
         // Find the view if already tracked
@@ -160,6 +170,7 @@ void addView(@NonNull View rootView, @NonNull final View view, final int minVisi
         trackingInfo.mMinViewablePercent = minVisiblePercentageViewed;
         trackingInfo.mMaxInvisiblePercent = maxInvisiblePercent;
         trackingInfo.mAccessOrder = mAccessCounter;
+        trackingInfo.mMinVisiblePx = minVisiblePx;
 
         // Trim the number of tracked views to a reasonable number
         mAccessCounter++;
@@ -240,11 +251,14 @@ public void run() {
                 final View view = entry.getKey();
                 final int minPercentageViewed = entry.getValue().mMinViewablePercent;
                 final int maxInvisiblePercent = entry.getValue().mMaxInvisiblePercent;
+                final Integer minVisiblePx = entry.getValue().mMinVisiblePx;
                 final View rootView = entry.getValue().mRootView;
 
-                if (mVisibilityChecker.isVisible(rootView, view, minPercentageViewed)) {
+                if (mVisibilityChecker.isVisible(rootView, view, minPercentageViewed,
+                        minVisiblePx)) {
                     mVisibleViews.add(view);
-                } else if (!mVisibilityChecker.isVisible(rootView, view, maxInvisiblePercent)){
+                } else if (!mVisibilityChecker.isVisible(rootView, view, maxInvisiblePercent,
+                        null)) {
                     mInvisibleViews.add(view);
                 }
             }
@@ -271,9 +285,11 @@ boolean hasRequiredTimeElapsed(final long startTimeMillis, final int minTimeView
         }
 
         /**
-         * Whether the view is at least certain % visible
+         * Whether the view is at least certain amount visible. If the min pixel amount is set,
+         * use that. Otherwise, use the min percentage visible.
          */
-        boolean isVisible(@Nullable final View rootView, @Nullable final View view, final int minPercentageViewed) {
+        boolean isVisible(@Nullable final View rootView, @Nullable final View view,
+                final int minPercentageViewed, @Nullable final Integer minVisiblePx) {
             // ListView & GridView both call detachFromParent() for views that can be recycled for
             // new data. This is one of the rare instances where a view will have a null parent for
             // an extended period of time and will not be the main window.
@@ -297,6 +313,10 @@ boolean isVisible(@Nullable final View rootView, @Nullable final View view, fina
                 return false;
             }
 
+            if (minVisiblePx != null && minVisiblePx > 0) {
+                return visibleViewArea >= minVisiblePx;
+            }
+
             return 100 * visibleViewArea >= minPercentageViewed * totalViewArea;
         }
     }
diff --git a/mopub-sdk/mopub-sdk-native-video/build.gradle b/mopub-sdk/mopub-sdk-native-video/build.gradle
index 6cf62803..4dedd224 100644
--- a/mopub-sdk/mopub-sdk-native-video/build.gradle
+++ b/mopub-sdk/mopub-sdk-native-video/build.gradle
@@ -1,8 +1,8 @@
 apply from: '../shared-build.gradle'
 
 dependencies {
-    implementation project(':mopub-sdk:mopub-sdk-native-static')
-    implementation 'com.google.android.exoplayer:exoplayer:r2.4.4'
+    api project(':mopub-sdk:mopub-sdk-native-static')
+    api 'com.google.android.exoplayer:exoplayer:r2.4.4'
 }
 
 project.description = 'MoPub Android SDK - Native Video'
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
index dc9cefcb..ac405b11 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
@@ -42,6 +42,7 @@
 
 import static com.mopub.common.DataKeys.EVENT_DETAILS;
 import static com.mopub.common.DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT;
+import static com.mopub.common.DataKeys.IMPRESSION_MIN_VISIBLE_PX;
 import static com.mopub.common.DataKeys.IMPRESSION_VISIBLE_MS;
 import static com.mopub.common.DataKeys.JSON_BODY_KEY;
 import static com.mopub.common.DataKeys.MAX_BUFFER_MS;
@@ -305,6 +306,8 @@ public void onVastVideoConfigurationPrepared(@Nullable VastVideoConfig vastVideo
             visibilityTrackingEvent.totalRequiredPlayTimeMs =
                     mVideoResponseHeaders.getImpressionVisibleMs();
             visibilityTrackingEvents.add(visibilityTrackingEvent);
+            visibilityTrackingEvent.minimumVisiblePx =
+                    mVideoResponseHeaders.getImpressionVisiblePx();
 
             // VAST impression trackers
             for (final VastTracker vastTracker : vastVideoConfig.getImpressionTrackers()) {
@@ -317,6 +320,8 @@ public void onVastVideoConfigurationPrepared(@Nullable VastVideoConfig vastVideo
                 vastImpressionTrackingEvent.totalRequiredPlayTimeMs =
                         mVideoResponseHeaders.getImpressionVisibleMs();
                 visibilityTrackingEvents.add(vastImpressionTrackingEvent);
+                vastImpressionTrackingEvent.minimumVisiblePx =
+                        mVideoResponseHeaders.getImpressionVisiblePx();
             }
 
             // Visibility tracking event from http response Vast payload
@@ -435,7 +440,8 @@ public void render(@NonNull MediaLayout mediaLayout) {
             mVideoVisibleTracking.addView(mRootView,
                     mediaLayout,
                     mVideoResponseHeaders.getPlayVisiblePercent(),
-                    mVideoResponseHeaders.getPauseVisiblePercent());
+                    mVideoResponseHeaders.getPauseVisiblePercent(),
+                    mVideoResponseHeaders.getImpressionVisiblePx());
 
             mMediaLayout = mediaLayout;
             mMediaLayout.initForVideo();
@@ -905,14 +911,13 @@ public NativeVideoController createForId(final long id,
         private int mImpressionMinVisiblePercent;
         private int mImpressionVisibleMs;
         private int mMaxBufferMs;
+        private Integer mImpressionVisiblePx;
         private JSONObject mVideoTrackers;
 
         VideoResponseHeaders(@NonNull final Map<String, String> serverExtras) {
             try {
                 mPlayVisiblePercent = Integer.parseInt(serverExtras.get(PLAY_VISIBLE_PERCENT));
                 mPauseVisiblePercent = Integer.parseInt(serverExtras.get(PAUSE_VISIBLE_PERCENT));
-                mImpressionMinVisiblePercent =
-                        Integer.parseInt(serverExtras.get(IMPRESSION_MIN_VISIBLE_PERCENT));
                 mImpressionVisibleMs = Integer.parseInt(serverExtras.get(IMPRESSION_VISIBLE_MS));
                 mMaxBufferMs = Integer.parseInt(serverExtras.get(MAX_BUFFER_MS));
                 mHeadersAreValid = true;
@@ -920,6 +925,25 @@ public NativeVideoController createForId(final long id,
                 mHeadersAreValid = false;
             }
 
+            final String impressionVisiblePxString = serverExtras.get(IMPRESSION_MIN_VISIBLE_PX);
+            if (!TextUtils.isEmpty(impressionVisiblePxString)) {
+                try {
+                    mImpressionVisiblePx = Integer.parseInt(impressionVisiblePxString);
+                } catch (NumberFormatException e) {
+                    MoPubLog.d("Unable to parse impression min visible px from server extras.");
+                }
+            }
+            try {
+                mImpressionMinVisiblePercent =
+                        Integer.parseInt(serverExtras.get(IMPRESSION_MIN_VISIBLE_PERCENT));
+            } catch (NumberFormatException e) {
+                MoPubLog.d("Unable to parse impression min visible percent from server extras.");
+                if (mImpressionVisiblePx == null || mImpressionVisiblePx < 0) {
+                    mHeadersAreValid = false;
+                }
+            }
+
+
             final String videoTrackers = serverExtras.get(VIDEO_TRACKERS_KEY);
             if (TextUtils.isEmpty(videoTrackers)) {
                 return;
@@ -957,6 +981,11 @@ int getMaxBufferMs() {
             return mMaxBufferMs;
         }
 
+        @Nullable
+        Integer getImpressionVisiblePx() {
+            return mImpressionVisiblePx;
+        }
+
         JSONObject getVideoTrackers() {
             return mVideoTrackers;
         }
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
index 0b7c6d0b..eb3a94ff 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
@@ -422,7 +422,7 @@ public void setColorFilter(ColorFilter cf) { }
         public int getOpacity() {
             return PixelFormat.UNKNOWN;
         }
-    };
+    }
 
     @Deprecated
     @VisibleForTesting
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java
index 94f66ef7..d2e8f3e0 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java
@@ -42,6 +42,7 @@
 import com.mopub.common.event.Event;
 import com.mopub.common.event.EventDetails;
 import com.mopub.common.event.MoPubEvents;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.RepeatingHandlerRunnable;
 import com.mopub.mobileads.VastTracker;
 import com.mopub.mobileads.VastVideoConfig;
@@ -310,6 +311,11 @@ public void onLoadingChanged(boolean isLoading) {}
     @Override
     public void onPlayerStateChanged(final boolean playWhenReady, final int newState) {
         if (newState == STATE_ENDED && mFinalFrame == null) {
+            if (mExoPlayer == null || mSurface == null || mTextureView == null) {
+                MoPubLog.w("onPlayerStateChanged called afer view has been recycled.");
+                return;
+            }
+
             mFinalFrame = new BitmapDrawable(mContext.getResources(), mTextureView.getBitmap());
             mNativeVideoProgressRunnable.requestStop();
         }
@@ -520,6 +526,7 @@ public ExoPlayer newInstance(@NonNull final Renderer[] renderers,
         int totalRequiredPlayTimeMs;
         int totalQualifiedPlayCounter;
         boolean isTracked;
+        Integer minimumVisiblePx;
     }
 
     static class NativeVideoProgressRunnable extends RepeatingHandlerRunnable {
@@ -607,7 +614,7 @@ void checkImpressionTrackers(final boolean forceTrigger) {
                     continue;
                 }
                 if (forceTrigger || mVisibilityChecker.isVisible(mTextureView, mTextureView,
-                        event.minimumPercentageVisible)) {
+                        event.minimumPercentageVisible, event.minimumVisiblePx)) {
                     event.totalQualifiedPlayCounter += mUpdateIntervalMillis;
                     if (forceTrigger ||
                             event.totalQualifiedPlayCounter >= event.totalRequiredPlayTimeMs) {
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/build.gradle b/mopub-sdk/mopub-sdk-rewardedvideo/build.gradle
index 4f500360..c9fdc4fa 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/build.gradle
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/build.gradle
@@ -1,7 +1,7 @@
 apply from: '../shared-build.gradle'
 
 dependencies {
-    implementation project(':mopub-sdk:mopub-sdk-interstitial')
+    api project(':mopub-sdk:mopub-sdk-interstitial')
 }
 
 project.description = 'MoPub Android SDK - Rewarded Video'
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedAd.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedAd.java
index 62dd02db..7298bf8c 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedAd.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedAd.java
@@ -25,6 +25,7 @@
     private boolean mIsLoaded;
     @Nullable private String mRewardedAdCurrencyName;
     private int mRewardedAdCurrencyAmount;
+    @Nullable protected String mAdUnitId;
 
     @Nullable
     @Override
@@ -84,6 +85,13 @@ protected void loadWithSdkInitialized(@NonNull final Activity activity,
                             MoPubReward.DEFAULT_REWARD_AMOUNT);
             mRewardedAdCurrencyAmount = MoPubReward.DEFAULT_REWARD_AMOUNT;
         }
+
+        final Object adUnitId = localExtras.get(DataKeys.AD_UNIT_ID_KEY);
+        if (adUnitId instanceof String) {
+            mAdUnitId = (String) adUnitId;
+        } else {
+            MoPubLog.d("Unable to set ad unit for rewarded ad.");
+        }
     }
 
     @Override
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedPlayable.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedPlayable.java
index 6af773a2..963ec1cb 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedPlayable.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedPlayable.java
@@ -16,7 +16,7 @@
  */
 public class MoPubRewardedPlayable extends MoPubRewardedAd {
 
-    @NonNull private static final String MOPUB_REWARDED_PLAYABLE_ID = "mopub_rewarded_playable_id";
+    @NonNull static final String MOPUB_REWARDED_PLAYABLE_ID = "mopub_rewarded_playable_id";
     @Nullable private RewardedMraidInterstitial mRewardedMraidInterstitial;
 
     public MoPubRewardedPlayable() {
@@ -40,7 +40,7 @@ protected void loadWithSdkInitialized(@NonNull final Activity activity,
     @NonNull
     @Override
     protected String getAdNetworkId() {
-        return MOPUB_REWARDED_PLAYABLE_ID;
+        return mAdUnitId != null ? mAdUnitId : MOPUB_REWARDED_PLAYABLE_ID;
     }
 
     @Override
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java
index e85a0e92..ca70f8b3 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java
@@ -15,7 +15,7 @@
  */
 public class MoPubRewardedVideo extends MoPubRewardedAd {
 
-    @NonNull private static final String MOPUB_REWARDED_VIDEO_ID = "mopub_rewarded_video_id";
+    @NonNull static final String MOPUB_REWARDED_VIDEO_ID = "mopub_rewarded_video_id";
 
     @Nullable private RewardedVastVideoInterstitial mRewardedVastVideoInterstitial;
 
@@ -26,7 +26,7 @@ public MoPubRewardedVideo() {
     @NonNull
     @Override
     protected String getAdNetworkId() {
-        return MOPUB_REWARDED_VIDEO_ID;
+        return mAdUnitId != null ?  mAdUnitId : MOPUB_REWARDED_VIDEO_ID;
     }
 
     @Override
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
index c7228b7c..73b1d9ed 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
@@ -594,10 +594,11 @@ public void run() {
                         "Updating init settings for custom event %s with params %s",
                         customEventClassName, serverExtrasJsonString));
 
+                // https://github.com/robolectric/robolectric/issues/3641
                 sCustomEventSharedPrefs
                         .edit()
                         .putString(customEventClassName, serverExtrasJsonString)
-                        .apply();
+                        .commit();
             }
 
             // Load custom event
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidActivity.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidActivity.java
index a5bf95a0..5855cc69 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidActivity.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidActivity.java
@@ -26,8 +26,8 @@
 import static com.mopub.common.DataKeys.SHOULD_REWARD_ON_CLICK_KEY;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
-import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
-import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
+import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
+import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
 
 public class RewardedMraidActivity extends MraidActivity {
diff --git a/mopub-sdk/publisher.gradle b/mopub-sdk/publisher.gradle
index 2744493a..1fd54c43 100644
--- a/mopub-sdk/publisher.gradle
+++ b/mopub-sdk/publisher.gradle
@@ -23,7 +23,7 @@ android.libraryVariants.all { variant ->
 
     task.dependsOn variant.javaCompile
     task.from variant.javaCompile.destinationDir
-    artifacts.add('archives', task);
+    artifacts.add('archives', task)
 }
 
 android.libraryVariants.all { variant ->
@@ -31,8 +31,8 @@ android.libraryVariants.all { variant ->
         title = project.ext.displayName
         description "Generates Javadoc for $variant.name."
         source = variant.javaCompile.source
-        classpath += files(variant.javaCompile.classpath.files, project.android.getBootClasspath())
-        classpath += project.configurations.compile
+        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
+        classpath += configurations.compile
 
         options {
             links "http://docs.oracle.com/javase/7/docs/api/"
diff --git a/mopub-sdk/shared-build.gradle b/mopub-sdk/shared-build.gradle
index 8d98f254..80a83534 100644
--- a/mopub-sdk/shared-build.gradle
+++ b/mopub-sdk/shared-build.gradle
@@ -1,16 +1,17 @@
 apply plugin: 'com.android.library'
 
 repositories {
-	mavenCentral()
-	jcenter()
-	flatDir {
-		dirs project(':mopub-sdk').file('../libs')
-	}
-	maven { url 'https://maven.google.com' }
+    mavenCentral()
+    jcenter()
+    flatDir {
+        dirs project(':mopub-sdk').file('../libs')
+    }
+    maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
+    maven { url 'https://maven.google.com' }
 }
 
 project.group = 'com.mopub'
-project.version = '4.18.0'
+project.version = '4.20.0'
 
 android {
 	compileSdkVersion 26
@@ -18,13 +19,13 @@ android {
 	lintOptions { abortOnError false }
 	useLibrary 'org.apache.http.legacy'
 
-	defaultConfig {
-		versionCode 56
-		versionName version
-		minSdkVersion 16
-		targetSdkVersion 26
-		consumerProguardFiles '../proguard.txt'
-	}
+    defaultConfig {
+        versionCode 58
+        versionName version
+        minSdkVersion 16
+        targetSdkVersion 26
+        consumerProguardFiles project(':mopub-sdk').file('proguard.txt')
+    }
 
 	sourceSets {
 		main {
@@ -48,13 +49,13 @@ android {
 			// connected tests instead.
 			returnDefaultValues = true
 
-			// Test JVM settings since we have a lot of classes loaded.
-			all {
-				jvmArgs '-XX:MaxPermSize=4096m', '-Xmx8192m', '-noverify'
-				forkEvery 200
-			}
-		}
-	}
+            // Test JVM settings since we have a lot of classes loaded.
+            all {
+                jvmArgs '-XX:MaxPermSize=4096m', '-Xmx8192m', '-noverify'
+                forkEvery 200
+            }
+        }
+    }
 
 	buildTypes {
 		release {
@@ -75,6 +76,6 @@ android {
 }
 
 dependencies {
-	implementation 'com.android.support:support-v4:26.1.0'
-	implementation 'com.android.support:support-annotations:26.1.0'
+    api 'com.android.support:support-v4:26.1.0'
+    api 'com.android.support:support-annotations:26.1.0'
 }
diff --git a/mopub-sdk/src/main/AndroidManifest.xml b/mopub-sdk/src/main/AndroidManifest.xml
index 144e231e..438e00cd 100644
--- a/mopub-sdk/src/main/AndroidManifest.xml
+++ b/mopub-sdk/src/main/AndroidManifest.xml
@@ -5,7 +5,7 @@
     android:versionName="1.0">
     <uses-sdk
         android:minSdkVersion="9"
-        android:targetSdkVersion="23"/>
+        android:targetSdkVersion="26"/>
     <application/>
 </manifest>
 
diff --git a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
index 6b29df7a..636753a9 100644
--- a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
+++ b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
@@ -1,3 +1,3 @@
 fabric-identifier=com.mopub.sdk.android:mopub
-fabric-version=4.18.0+kit
+fabric-version=4.20.0+kit
 fabric-build-type=source
diff --git a/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java b/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java
index 27a9597a..791acaac 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java
@@ -10,6 +10,7 @@
 import com.mopub.mobileads.MoPubRewardedVideoManager;
 import com.mopub.mobileads.MoPubRewardedVideos;
 
+import org.junit.After;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -58,6 +59,11 @@ public void setup() {
         MoPub.resetBrowserAgent();
     }
 
+    @After
+    public void tearDown() {
+        MoPub.resetBrowserAgent();
+    }
+
     @Test
     public void setBrowserAgent_withDefaultValue_shouldNotChangeBrowserAgent_shouldSetOverriddenFlag() {
         MoPub.setBrowserAgent(BrowserAgent.IN_APP);
diff --git a/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java b/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java
index dadf0efa..0331d892 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java
@@ -8,6 +8,7 @@
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
 
+import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -33,6 +34,11 @@ public void setUp() {
         MoPub.resetBrowserAgent();
     }
 
+    @After
+    public void tearDown() {
+        MoPub.resetBrowserAgent();
+    }
+
     @Test
     public void handleMopubScheme_shouldBeCaseInsensitive() throws Exception {
         assertUrlActionMatching(HANDLE_MOPUB_SCHEME, "mopub:", true);
diff --git a/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java b/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
index 7a5f2917..4eb764b4 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
@@ -3,14 +3,12 @@
 import com.mopub.common.CacheService;
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.MoPub;
-import com.mopub.common.MoPubHttpUrlConnection;
 import com.mopub.common.Preconditions;
 import com.mopub.common.event.EventDispatcher;
 import com.mopub.common.event.MoPubEvents;
 import com.mopub.common.factories.MethodBuilderFactory;
 import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.DateAndTime;
-import com.mopub.common.util.Reflection;
 import com.mopub.common.util.test.support.ShadowAsyncTasks;
 import com.mopub.common.util.test.support.ShadowMoPubHttpUrlConnection;
 import com.mopub.common.util.test.support.ShadowReflection;
@@ -42,35 +40,19 @@
 import org.junit.runners.model.InitializationError;
 import org.mockito.MockitoAnnotations;
 import org.robolectric.DefaultTestLifecycle;
-import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.TestLifecycle;
-import org.robolectric.annotation.Config;
-import org.robolectric.internal.bytecode.InstrumentationConfiguration;
-import org.robolectric.manifest.AndroidManifest;
-import org.robolectric.res.FileFsFile;
-import org.robolectric.res.FsFile;
-import org.robolectric.util.concurrent.RoboExecutorService;
+import org.robolectric.android.util.concurrent.RoboExecutorService;
 
 import static com.mopub.common.MoPub.LocationAwareness;
 import static org.mockito.Mockito.mock;
 
-public class SdkTestRunner extends RobolectricGradleTestRunner {
+public class SdkTestRunner extends RobolectricTestRunner {
 
     public SdkTestRunner(Class<?> testClass) throws InitializationError {
         super(testClass);
     }
 
-    @Override
-    public InstrumentationConfiguration createClassLoaderConfig() {
-        InstrumentationConfiguration.Builder builder = InstrumentationConfiguration.newBuilder();
-        builder.addInstrumentedClass(AsyncTasks.class.getName());
-        builder.addInstrumentedClass(MoPubHttpUrlConnection.class.getName());
-        builder.addInstrumentedClass(Reflection.class.getName());
-        // To mitigate: https://github.com/robolectric/robolectric/issues/2129
-        builder.addInstrumentedPackage("org.xyz.testMp");
-        return builder.build();
-    }
-
     @Override
     protected Class<? extends TestLifecycle> getTestLifecycleClass() {
         return TestLifeCycleWithInjection.class;
@@ -112,26 +94,4 @@ public void prepareTest(Object test) {
             CacheService.clearAndNullCaches();
         }
     }
-
-    // custom AppManifest logic adapted from:
-    // https://gist.github.com/venator85/282df3677af9ecac56e5e4b91471cd8f
-    @Override
-    protected AndroidManifest getAppManifest(Config config) {
-        final AndroidManifest appManifest = super.getAppManifest(config);
-
-        if (appManifest.getAndroidManifestFile().exists()) {
-            return appManifest;
-        }
-
-        final FsFile androidManifestFile = FileFsFile.from(getModuleRootPath(config),
-                appManifest.getAndroidManifestFile().getPath()
-                        .replace("manifests/full", "manifests/aapt"));
-        return new AndroidManifest(androidManifestFile, appManifest.getResDirectory(),
-                appManifest.getAssetsDirectory());
-    }
-
-    private String getModuleRootPath(Config config) {
-        final String moduleRoot = config.constants().getResource("").toString().replace("file:", "");
-        return moduleRoot.substring(0, moduleRoot.indexOf("/build"));
-    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java
index dd4a3ea5..52737211 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java
@@ -11,15 +11,15 @@
 import com.mopub.common.MoPub;
 import com.mopub.common.MoPub.BrowserAgent;
 import com.mopub.common.MoPubBrowser;
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.exceptions.IntentNotResolvableException;
 import com.mopub.exceptions.UrlParseException;
 
+import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.shadows.ShadowApplication;
 
 import java.util.ArrayList;
@@ -30,8 +30,9 @@
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.stub;
+import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(SdkTestRunner.class)
 public class IntentsTest {
     private Activity activityContext;
     private Context applicationContext;
@@ -43,6 +44,11 @@ public void setUp() {
         MoPub.resetBrowserAgent();
     }
 
+    @After
+    public void tearDown() {
+        MoPub.resetBrowserAgent();
+    }
+
     @Test
     public void startActivity_withActivityContext_shouldStartActivityWithNoNewFlags() throws IntentNotResolvableException {
         Intents.startActivity(activityContext, new Intent());
@@ -53,7 +59,7 @@ public void startActivity_withActivityContext_shouldStartActivityWithNoNewFlags(
 
     @Test
     public void getStartActivityIntent_withActivityContext_shouldReturnIntentWithoutNewTaskFlag() throws Exception {
-        Context context = new Activity();
+        Context context = Robolectric.buildActivity(Activity.class).create().get();
 
         final Intent intent = Intents.getStartActivityIntent(context, MoPubBrowser.class, null);
 
@@ -64,7 +70,8 @@ public void getStartActivityIntent_withActivityContext_shouldReturnIntentWithout
 
     @Test
     public void getStartActivityIntent_withApplicationContext_shouldReturnIntentWithNewTaskFlag() throws Exception {
-        Context context = new Activity().getApplicationContext();
+        Context context = Robolectric.buildActivity(Activity.class)
+                .create().get().getApplicationContext();
 
         final Intent intent = Intents.getStartActivityIntent(context, MoPubBrowser.class, null);
 
@@ -75,7 +82,7 @@ public void getStartActivityIntent_withApplicationContext_shouldReturnIntentWith
 
     @Test
     public void getStartActivityIntent_withBundle_shouldReturnIntentWithExtras() throws Exception {
-        Context context = new Activity();
+        Context context = Robolectric.buildActivity(Activity.class).create().get();
         Bundle bundle = new Bundle();
         bundle.putString("arbitrary key", "even more arbitrary value");
 
@@ -83,7 +90,8 @@ public void getStartActivityIntent_withBundle_shouldReturnIntentWithExtras() thr
 
         assertThat(intent.getComponent().getClassName()).isEqualTo(MoPubBrowser.class.getName());
         assertThat(Utils.bitMaskContainsFlag(intent.getFlags(), FLAG_ACTIVITY_NEW_TASK)).isFalse();
-        assertThat(intent.getExtras()).isEqualTo(bundle);
+        assertThat(intent.getExtras().size()).isEqualTo(1);
+        assertThat(intent.getExtras().get("arbitrary key")).isEqualTo("even more arbitrary value");
     }
 
     @Test
@@ -293,7 +301,7 @@ public void getPlayStoreUri_shouldNotBlowUpWithEmptyPackage() throws Exception {
     }
 
     private void makeUrlResolvable(String url) {
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(
+        shadowOf(activityContext.getPackageManager()).addResolveInfoForIntent(
                 new Intent(Intent.ACTION_VIEW, Uri.parse(url)), new ResolveInfo());
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java
index a2971b0f..651f0990 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java
@@ -8,7 +8,8 @@
 import org.robolectric.annotation.Implements;
 import org.robolectric.util.ReflectionHelpers;
 
-import static org.robolectric.internal.Shadow.directlyOn;
+import static org.robolectric.shadow.api.Shadow.directlyOn;
+
 
 @Implements(Reflection.class)
 public class ShadowReflection {
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BannerVisibilityTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BannerVisibilityTrackerTest.java
new file mode 100644
index 00000000..0fc42a7f
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BannerVisibilityTrackerTest.java
@@ -0,0 +1,310 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.graphics.Rect;
+import android.os.Handler;
+import android.view.View;
+import android.view.ViewParent;
+import android.view.ViewTreeObserver;
+import android.view.Window;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowSystemClock;
+
+import static android.view.ViewTreeObserver.OnPreDrawListener;
+import static com.mopub.mobileads.BannerVisibilityTracker.BannerVisibilityChecker;
+import static com.mopub.mobileads.BannerVisibilityTracker.BannerVisibilityTrackerListener;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyInt;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class BannerVisibilityTrackerTest {
+    private static final int MIN_VISIBLE_DIPS = 1;
+    private static final int MIN_VISIBLE_MILLIS = 0;
+
+    private Activity activity;
+    private BannerVisibilityTracker subject;
+    private BannerVisibilityChecker visibilityChecker;
+    private Handler visibilityHandler;
+
+    private View mockView;
+    @Mock
+    private BannerVisibilityTrackerListener visibilityTrackerListener;
+
+    @Before
+    public void setUp() throws Exception {
+        activity = Robolectric.buildActivity(Activity.class).create().get();
+        mockView = createViewMock(View.VISIBLE, 100, 100, 100, 100, true, true);
+        subject = new BannerVisibilityTracker(activity, mockView, mockView, MIN_VISIBLE_DIPS, MIN_VISIBLE_MILLIS);
+
+        subject.setBannerVisibilityTrackerListener(visibilityTrackerListener);
+
+        visibilityChecker = subject.getBannerVisibilityChecker();
+        visibilityHandler = subject.getVisibilityHandler();
+
+        // XXX We need this to ensure that our SystemClock starts
+        ShadowSystemClock.uptimeMillis();
+    }
+
+    @Test
+    public void constructor_shouldSetOnPreDrawListenerForDecorView() throws Exception {
+        Activity spyActivity = spy(Robolectric.buildActivity(Activity.class).create().get());
+        Window window = mock(Window.class);
+        View decorView = mock(View.class);
+        ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
+
+        when(spyActivity.getWindow()).thenReturn(window);
+        when(window.getDecorView()).thenReturn(decorView);
+        when(decorView.findViewById(anyInt())).thenReturn(decorView);
+        when(decorView.getViewTreeObserver()).thenReturn(viewTreeObserver);
+        when(viewTreeObserver.isAlive()).thenReturn(true);
+
+        subject = new BannerVisibilityTracker(spyActivity, mockView, mockView, MIN_VISIBLE_DIPS, MIN_VISIBLE_MILLIS);
+        assertThat(subject.mOnPreDrawListener).isNotNull();
+        verify(viewTreeObserver).addOnPreDrawListener(subject.mOnPreDrawListener);
+        assertThat(subject.mWeakViewTreeObserver.get()).isEqualTo(viewTreeObserver);
+    }
+
+    @Test
+    public void constructor_withNonAliveViewTreeObserver_shouldNotSetOnPreDrawListenerForDecorView() throws Exception {
+        Activity mockActivity = mock(Activity.class);
+        Window window = mock(Window.class);
+        View decorView = mock(View.class);
+        ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
+
+        when(mockActivity.getWindow()).thenReturn(window);
+        when(window.getDecorView()).thenReturn(decorView);
+        when(decorView.getViewTreeObserver()).thenReturn(viewTreeObserver);
+        when(viewTreeObserver.isAlive()).thenReturn(false);
+
+        subject = new BannerVisibilityTracker(mockActivity, mockView, mockView, MIN_VISIBLE_DIPS, MIN_VISIBLE_MILLIS);
+        verify(viewTreeObserver, never()).addOnPreDrawListener(subject.mOnPreDrawListener);
+        assertThat(subject.mWeakViewTreeObserver.get()).isNull();
+    }
+
+    @Test
+    public void constructor_withApplicationContext_shouldNotSetOnPreDrawListener() {
+        subject = new BannerVisibilityTracker(activity.getApplicationContext(), mockView, mockView, MIN_VISIBLE_DIPS, MIN_VISIBLE_MILLIS);
+
+        assertThat(subject.mWeakViewTreeObserver.get()).isNull();
+    }
+
+    @Test
+    public void constructor_withViewTreeObserverNotSet_shouldSetViewTreeObserver() {
+        ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
+        View rootView = mock(View.class);
+
+        when(mockView.getContext()).thenReturn(activity.getApplicationContext());
+        when(mockView.getRootView()).thenReturn(rootView);
+        when(rootView.getViewTreeObserver()).thenReturn(viewTreeObserver);
+        when(viewTreeObserver.isAlive()).thenReturn(true);
+
+        subject = new BannerVisibilityTracker(activity.getApplicationContext(), rootView, mockView, MIN_VISIBLE_DIPS, MIN_VISIBLE_MILLIS);
+        assertThat(subject.mWeakViewTreeObserver.get()).isEqualTo(viewTreeObserver);
+    }
+
+    @Test
+    public void destroy_shouldRemoveListenerFromDecorView() throws Exception {
+        Activity spyActivity = spy(Robolectric.buildActivity(Activity.class).create().get());
+        Window window = mock(Window.class);
+        View decorView = mock(View.class);
+        ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
+
+        when(spyActivity.getWindow()).thenReturn(window);
+        when(window.getDecorView()).thenReturn(decorView);
+        when(decorView.findViewById(anyInt())).thenReturn(decorView);
+        when(decorView.getViewTreeObserver()).thenReturn(viewTreeObserver);
+        when(viewTreeObserver.isAlive()).thenReturn(true);
+
+        subject = new BannerVisibilityTracker(spyActivity, mockView, mockView, MIN_VISIBLE_DIPS, MIN_VISIBLE_MILLIS);
+        subject.destroy();
+
+        assertThat(visibilityHandler.hasMessages(0)).isFalse();
+        assertThat(subject.isVisibilityScheduled()).isFalse();
+        verify(viewTreeObserver).removeOnPreDrawListener(any(OnPreDrawListener.class));
+        assertThat(subject.mWeakViewTreeObserver.get()).isNull();
+        assertThat(subject.getBannerVisibilityTrackerListener()).isNull();
+    }
+
+    // BannerVisibilityRunnable Tests
+    @Test
+    public void visibilityRunnable_run_withViewVisibleForAtLeastMinDuration_shouldCallOnVisibilityChangedCallback_shouldMarkImpTrackerAsFired_shouldNotScheduleVisibilityCheck() throws Exception {
+        subject.new BannerVisibilityRunnable().run();
+
+        verify(visibilityTrackerListener).onVisibilityChanged();
+        assertThat(subject.isImpTrackerFired()).isTrue();
+        assertThat(subject.isVisibilityScheduled()).isFalse();
+    }
+
+    @Test
+    public void visibilityRunnable_run_withViewNotVisible_shouldNotCallOnVisibilityChangedCallback_shouldNotMarkImpTrackerAsFired_shouldScheduleVisibilityCheck() throws Exception {
+        when(mockView.getVisibility()).thenReturn(View.INVISIBLE);
+
+        subject.new BannerVisibilityRunnable().run();
+
+        verify(visibilityTrackerListener, never()).onVisibilityChanged();
+        assertThat(subject.isImpTrackerFired()).isFalse();
+        assertThat(subject.isVisibilityScheduled()).isTrue();
+    }
+
+    @Test
+    public void visibilityRunnable_run_witViewVisibleForLessThanMinDuration_shouldNotCallOnVisibilityChangedCallback_shouldNotMarkImpTrackerAsFired_shouldScheduleVisibilityCheck() throws Exception {
+        subject = new BannerVisibilityTracker(activity, mockView, mockView, 1, 1000);
+        subject.new BannerVisibilityRunnable().run();
+
+        verify(visibilityTrackerListener, never()).onVisibilityChanged();
+        assertThat(subject.isImpTrackerFired()).isFalse();
+        assertThat(subject.isVisibilityScheduled()).isTrue();
+    }
+
+    // BannerVisibilityChecker Tests
+    @Test
+    public void hasRequiredTimeElapsed_withStartTimeNotSetYet_shouldReturnFalse() throws Exception {
+        assertThat(visibilityChecker.hasRequiredTimeElapsed()).isFalse();
+    }
+
+    @Test
+    public void hasRequiredTimeElapsed_withStartTimeSet_withElapsedTimeGreaterThanMinTimeViewed_shouldReturnTrue() throws Exception {
+        visibilityChecker.setStartTimeMillis();
+
+        // minVisibleMillis is 0 ms as defined by constant MIN_VISIBLE_MILLIS
+        assertThat(visibilityChecker.hasRequiredTimeElapsed()).isTrue();
+    }
+
+    @Test
+    public void hasRequiredTimeElapsed_withStartTimeSet_withElapsedTimeLessThanMinTimeViewed_shouldReturnFalse() throws Exception {
+        subject = new BannerVisibilityTracker(activity, mockView, mockView, 1, 1000);
+        visibilityChecker = subject.getBannerVisibilityChecker();
+        visibilityChecker.setStartTimeMillis();
+
+        // minVisibleMillis is 1 sec, should return false since we are checking immediately before 1 sec elapses
+        assertThat(visibilityChecker.hasRequiredTimeElapsed()).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenParentIsNull_shouldReturnFalse() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 100, 100, 100, 100, false, true);
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenViewIsOffScreen_shouldReturnFalse() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 100, 100, 100, 100, true, false);
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenViewIsEntirelyOnScreen_shouldReturnTrue() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 100, 100, 100, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isTrue();
+    }
+
+    @Test
+    public void isVisible_whenViewHasMoreVisibleDipsThanMinVisibleDips_shouldReturnTrue() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 1, 2, 100, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isTrue();
+    }
+
+    @Test
+    public void isVisible_whenViewHasExactlyMinVisibleDips_shouldReturnTrue() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 1, 1, 100, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isTrue();
+    }
+
+    @Test
+    public void isVisible_whenViewHasLessVisibleDipsThanMinVisibleDips_shouldReturnFalse() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 0, 1, 100, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenVisibleAreaIsZero_shouldReturnFalse() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 0, 0, 100, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenViewIsInvisibleOrGone_shouldReturnFalse() throws Exception {
+        View view = createViewMock(View.INVISIBLE, 100, 100, 100, 100, true, true);
+        assertThat(visibilityChecker.isVisible(view, view)).isFalse();
+
+        reset(view);
+        view = createViewMock(View.GONE, 100, 100, 100, 100, true, true);
+        assertThat(visibilityChecker.isVisible(view, view)).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenViewHasZeroWidth_shouldReturnFalse() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 100, 100, 0, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenViewHasZeroHeight_shouldReturnFalse() throws Exception {
+        mockView = createViewMock(View.VISIBLE, 100, 100, 100, 0, true, true);
+
+        assertThat(visibilityChecker.isVisible(mockView, mockView)).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenViewIsNull_shouldReturnFalse() throws Exception {
+        assertThat(visibilityChecker.isVisible(null, null)).isFalse();
+    }
+
+    View createViewMock(final int visibility,
+            final int visibleWidth,
+            final int visibleHeight,
+            final int viewWidth,
+            final int viewHeight,
+            final boolean isParentSet,
+            final boolean isOnScreen) {
+        View view = mock(View.class);
+        when(view.getContext()).thenReturn(activity);
+        when(view.getVisibility()).thenReturn(visibility);
+
+        when(view.getGlobalVisibleRect(any(Rect.class)))
+                .thenAnswer(new Answer<Boolean>() {
+                    @Override
+                    public Boolean answer(InvocationOnMock invocationOnMock) throws Throwable {
+                        Object[] args = invocationOnMock.getArguments();
+                        Rect rect = (Rect) args[0];
+                        rect.set(0, 0, visibleWidth, visibleHeight);
+                        return isOnScreen;
+                    }
+                });
+
+        when(view.getWidth()).thenReturn(viewWidth);
+        when(view.getHeight()).thenReturn(viewHeight);
+
+        if (isParentSet) {
+            when(view.getParent()).thenReturn(mock(ViewParent.class));
+        }
+
+        when(view.getViewTreeObserver()).thenCallRealMethod();
+
+        return view;
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
new file mode 100644
index 00000000..5a5fff27
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
@@ -0,0 +1,85 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.view.View;
+import android.widget.FrameLayout;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class BaseInterstitialActivityTest {
+    private BaseInterstitialActivity subject;
+    private long broadcastIdentifier;
+
+    // Make a concrete version of the abstract class for testing purposes.
+    private static class TestInterstitialActivity extends BaseInterstitialActivity {
+        View view;
+
+        @Override
+        public View getAdView() {
+            if (view == null) {
+                view = new View(this);
+            }
+            return view;
+        }
+    }
+
+    @Before
+    public void setup() {
+        broadcastIdentifier = 2222;
+    }
+
+    @Test
+    public void onCreate_shouldCreateView() throws Exception {
+        subject = Robolectric.buildActivity(TestInterstitialActivity.class).create().get();
+        View adView = getContentView(subject).getChildAt(0);
+
+        assertThat(adView).isNotNull();
+    }
+
+    @Test
+    public void onDestroy_shouldCleanUpContentView() throws Exception {
+        subject = Robolectric.buildActivity(TestInterstitialActivity.class).create().destroy().get();
+
+        assertThat(getContentView(subject).getChildCount()).isEqualTo(0);
+    }
+
+    @Test
+    public void getBroadcastIdentifier_shouldReturnBroadcastIdFromIntent() throws Exception {
+        Context context = Robolectric.buildActivity(Activity.class).create().get();
+        Intent intent = new Intent(context, TestInterstitialActivity.class);
+        intent.putExtra(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
+
+        subject = Robolectric.buildActivity(TestInterstitialActivity.class, intent)
+                .create().get();
+        assertThat(subject.getBroadcastIdentifier()).isEqualTo(2222L);
+    }
+
+    @Test
+    public void getBroadcastIdentifier_withMissingBroadCastId_shouldReturnNull() throws Exception {
+        Context context = Robolectric.buildActivity(Activity.class).create().get();
+        Intent intent = new Intent(context, TestInterstitialActivity.class);
+        // This intent is missing a broadcastidentifier extra.
+
+        subject = Robolectric.buildActivity(TestInterstitialActivity.class, intent)
+                .create().get();
+
+        assertThat(subject.getBroadcastIdentifier()).isNull();
+    }
+
+    protected FrameLayout getContentView(BaseInterstitialActivity subject) {
+        return subject.getCloseableLayout();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
index e5f40f61..9f190751 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
@@ -14,6 +14,7 @@
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.support.v4.ShadowLocalBroadcastManager;
 
@@ -22,11 +23,11 @@
 import java.util.Map;
 import java.util.Set;
 
-import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialAdListener;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
@@ -49,7 +50,7 @@ public void setUp() throws Exception {
         customEventInterstitialListener = mock(CustomEventInterstitialListener.class);
         broadcastIdentifier = 27027027;
         subject = new EventForwardingBroadcastReceiver(customEventInterstitialListener, broadcastIdentifier);
-        context = new Activity();
+        context = Robolectric.buildActivity(Activity.class).create().get();
     }
 
     @Ignore("Difficult with the number of test factories and mocking involved.")
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
index d641f19c..851b090d 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
@@ -10,6 +10,7 @@
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowApplication;
 import org.robolectric.shadows.support.v4.ShadowLocalBroadcastManager;
@@ -22,9 +23,9 @@
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.common.DataKeys.REDIRECT_URL_KEY;
 import static com.mopub.common.DataKeys.SCROLLABLE_KEY;
-import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 import static org.fest.assertions.api.Assertions.assertThat;
@@ -50,7 +51,7 @@ public void setUp() throws Exception {
 
         expectedResponse = "this is the response";
         htmlInterstitialWebView = TestHtmlInterstitialWebViewFactory.getSingletonMock();
-        context = new Activity();
+        context = Robolectric.buildActivity(Activity.class).create().get();
         customEventInterstitialListener = mock(CustomEventInterstitialListener.class);
         localExtras = new HashMap<String, Object>();
         serverExtras = new HashMap<String, String>();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/IntentIsEqual.java b/mopub-sdk/src/test/java/com/mopub/mobileads/IntentIsEqual.java
new file mode 100644
index 00000000..318911ba
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/IntentIsEqual.java
@@ -0,0 +1,65 @@
+package com.mopub.mobileads;
+
+import android.content.Intent;
+
+import org.hamcrest.BaseMatcher;
+import org.hamcrest.Description;
+
+/**
+ * Matcher to compare Intents by components of the Intent.
+ */
+public class IntentIsEqual extends BaseMatcher<Intent> {
+
+    private Intent intent;
+
+    public IntentIsEqual(final Intent intent) {
+        this.intent = intent;
+    }
+
+    @Override
+    public boolean matches(final Object item) {
+        if (!(item instanceof Intent)) {
+            return false;
+        }
+        Intent otherIntent = (Intent) item;
+        if (intent.getExtras() == null && otherIntent.getExtras() != null) {
+            return false;
+        } else if (intent.getExtras() != null && otherIntent.getExtras() == null) {
+            return false;
+        } else if (intent.getExtras() != null && otherIntent.getExtras() != null) {
+            if (intent.getExtras().size() != otherIntent.getExtras().size()) {
+                return false;
+            }
+            for(String key : intent.getExtras().keySet()) {
+                if (!intent.getExtras().get(key).equals(otherIntent.getExtras().get(key))) {
+                    return false;
+                }
+            }
+        }
+
+        if (intent.getAction() != null && !intent.getAction().equals(otherIntent.getAction())) {
+            return false;
+        } else if (intent.getAction() == null && otherIntent.getAction() != null) {
+            return false;
+        }
+
+        if (intent.getComponent() != null && !intent.getComponent().equals(otherIntent.getComponent())) {
+            return false;
+        } else if (intent.getComponent() == null && otherIntent.getComponent() != null) {
+            return false;
+        }
+
+        if (intent.getData() != null && !intent.getData().equals(otherIntent.getData())) {
+            return false;
+        } else if (intent.getData() == null && otherIntent.getData() != null) {
+            return false;
+        }
+
+        return true;
+    }
+
+    @Override
+    public void describeTo(final Description description) {
+        description.appendText(intent.toString() + " extras: " + intent.getExtras());
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
index b4422c18..d2b0381c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
@@ -21,27 +21,28 @@
 import org.mockito.ArgumentCaptor;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
+import org.robolectric.android.controller.ActivityController;
 import org.robolectric.annotation.Config;
-import org.robolectric.internal.ShadowExtractor;
+import org.robolectric.shadow.api.Shadow;
 import org.robolectric.shadows.ShadowActivity;
 import org.robolectric.shadows.ShadowApplication;
 import org.robolectric.shadows.support.v4.ShadowLocalBroadcastManager;
-import org.robolectric.util.ActivityController;
 
 import static com.mopub.common.DataKeys.CLICKTHROUGH_URL_KEY;
 import static com.mopub.common.DataKeys.CREATIVE_ORIENTATION_KEY;
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.common.DataKeys.REDIRECT_URL_KEY;
 import static com.mopub.common.DataKeys.SCROLLABLE_KEY;
-import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.argThat;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
@@ -79,7 +80,8 @@ public void setUp() throws Exception {
                 EXPECTED_REDIRECT_URL,
                 EXPECTED_CLICKTHROUGH_URL, EXPECTED_ORIENTATION, testBroadcastIdentifier);
 
-        final ActivityController<MoPubActivity> subjectController = Robolectric.buildActivity(MoPubActivity.class).withIntent(moPubActivityIntent);
+        final ActivityController<MoPubActivity> subjectController = Robolectric.buildActivity(
+                MoPubActivity.class, moPubActivityIntent);
         subject = subjectController.get();
         ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver,
                 new EventForwardingBroadcastReceiver(customEventInterstitialListener,
@@ -264,8 +266,8 @@ public void broadcastingInterstitialListener_onInterstitialFailed_shouldBroadcas
         MoPubActivity.BroadcastingInterstitialListener broadcastingInterstitialListener = ((MoPubActivity) subject).new BroadcastingInterstitialListener();
         broadcastingInterstitialListener.onInterstitialFailed(null);
 
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
-        assertThat(((ShadowActivity) ShadowExtractor.extract(subject)).isFinishing()).isTrue();
+        verify(broadcastReceiver).onReceive(any(Context.class), argThat(new IntentIsEqual(expectedIntent)));
+        assertThat(((ShadowActivity) Shadow.extract(subject)).isFinishing()).isTrue();
     }
 
     @Test
@@ -275,14 +277,14 @@ public void broadcastingInterstitialListener_onInterstitialClicked_shouldBroadca
         MoPubActivity.BroadcastingInterstitialListener broadcastingInterstitialListener = ((MoPubActivity) subject).new BroadcastingInterstitialListener();
         broadcastingInterstitialListener.onInterstitialClicked();
 
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
+        verify(broadcastReceiver).onReceive(any(Context.class), argThat(new IntentIsEqual(expectedIntent)));
     }
 
     @Test
     public void onCreate_shouldBroadcastInterstitialShow() throws Exception {
         Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, testBroadcastIdentifier);
 
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
+        verify(broadcastReceiver).onReceive(any(Context.class), argThat(new IntentIsEqual(expectedIntent)));
     }
 
     @Test
@@ -291,7 +293,7 @@ public void onDestroy_shouldBroadcastInterstitialDismiss() throws Exception {
 
         subject.onDestroy();
 
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
+        verify(broadcastReceiver).onReceive(any(Context.class), argThat(new IntentIsEqual(expectedIntent)));
     }
 
     private FrameLayout getContentView() {
@@ -304,5 +306,6 @@ protected void resetMockedView(View view) {
                 new FrameLayout.LayoutParams(FrameLayout.LayoutParams.WRAP_CONTENT,
                         FrameLayout.LayoutParams.WRAP_CONTENT));
     }
+
 }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
index a0f28b9a..44a7051d 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
@@ -90,6 +90,10 @@
     public void setup() {
         mActivity = Robolectric.buildActivity(Activity.class).create().get();
         MoPubRewardedVideoManager.init(mActivity);
+        // The fact that next call fixes issues in multiple tests proves that Robolectric doesn't
+        // teardown singletons properly between tests.
+        MoPubRewardedVideoManager.updateActivity(mActivity);
+
         MoPubRewardedVideoManager.setVideoListener(mockVideoListener);
 
         mTestCustomEventSharedPrefs = SharedPreferencesHelper.getSharedPreferences(
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java
index ecb80584..bfeb5d34 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java
@@ -15,7 +15,6 @@
 
 import java.util.HashMap;
 import java.util.Map;
-import java.util.TreeMap;
 
 import static com.mopub.common.Constants.FOUR_HOURS_MILLIS;
 import static com.mopub.mobileads.MoPubErrorCode.EXPIRED;
@@ -67,12 +66,12 @@ public void onInvalidate_withNullVastVideoInterstitial_shouldNotInvalidateVastVi
     @Test
     public void loadWithSdkInitialized_withLocalExtrasIncomplete_shouldLoadVastVideoInterstitial() throws Exception {
         subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
-        subject.loadWithSdkInitialized(activity, new TreeMap<String, Object>(),
+        subject.loadWithSdkInitialized(activity, new HashMap<String, Object>(),
                 new HashMap<String, String>());
 
         verify(mockRewardedVastVideoInterstitial).loadInterstitial(eq(activity), any(
                         CustomEventInterstitial.CustomEventInterstitialListener.class),
-                eq(new TreeMap<String, Object>()),
+                eq(new HashMap<String, Object>()),
                 eq(new HashMap<String, String>()));
         verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
         assertThat(subject.getRewardedAdCurrencyName()).isEqualTo("");
@@ -82,7 +81,7 @@ public void loadWithSdkInitialized_withLocalExtrasIncomplete_shouldLoadVastVideo
     @Test
     public void loadWithSdkInitialized_withRewardedVideoCurrencyNameIncorrectType_shouldLoadVastVideoInterstitial_shouldSetCurrencyNameToEmptyString() throws Exception {
         subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
-        final Map<String, Object> localExtras = new TreeMap<String, Object>();
+        final Map<String, Object> localExtras = new HashMap<String, Object>();
         localExtras.put(DataKeys.REWARDED_AD_CURRENCY_NAME_KEY, new Object());
         localExtras.put(DataKeys.REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY, "10");
 
@@ -100,7 +99,7 @@ public void loadWithSdkInitialized_withRewardedVideoCurrencyNameIncorrectType_sh
     @Test
     public void loadWithSdkInitialized_withRewardedVideoCurrencyAmountIncorrectType_shouldLoadVastVideoInterstitial_shouldSetCurrencyAmountToZero() throws Exception {
         subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
-        final Map<String, Object> localExtras = new TreeMap<String, Object>();
+        final Map<String, Object> localExtras = new HashMap<String, Object>();
         localExtras.put(DataKeys.REWARDED_AD_CURRENCY_NAME_KEY, "currencyName");
         localExtras.put(DataKeys.REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY, new Object());
 
@@ -118,7 +117,7 @@ public void loadWithSdkInitialized_withRewardedVideoCurrencyAmountIncorrectType_
     @Test
     public void loadWithSdkInitialized_withRewardedVideoCurrencyAmountNotInteger_shouldLoadVastVideoInterstitial_shouldSetCurrencyAmountToZero() throws Exception {
         subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
-        final Map<String, Object> localExtras = new TreeMap<String, Object>();
+        final Map<String, Object> localExtras = new HashMap<String, Object>();
         localExtras.put(DataKeys.REWARDED_AD_CURRENCY_NAME_KEY, "currencyName");
         localExtras.put(DataKeys.REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY, "foo");
 
@@ -136,7 +135,7 @@ public void loadWithSdkInitialized_withRewardedVideoCurrencyAmountNotInteger_sho
     @Test
     public void loadWithSdkInitialized_withRewardedVideoCurrencyAmountNegative_shouldLoadVastVideoInterstitial_shouldSetCurrencyAmountToZero() throws Exception {
         subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
-        final Map<String, Object> localExtras = new TreeMap<String, Object>();
+        final Map<String, Object> localExtras = new HashMap<String, Object>();
         localExtras.put(DataKeys.REWARDED_AD_CURRENCY_NAME_KEY, "currencyName");
         localExtras.put(DataKeys.REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY, "-42");
 
@@ -154,7 +153,7 @@ public void loadWithSdkInitialized_withRewardedVideoCurrencyAmountNegative_shoul
     @Test
     public void loadWithSdkInitialized_withCorrectLocalExtras_shouldLoadVastVideoInterstitial() throws Exception {
         subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
-        final Map<String, Object> localExtras = new TreeMap<String, Object>();
+        final Map<String, Object> localExtras = new HashMap<String, Object>();
         final Map<String, String> serverExtras = new HashMap<String, String>();
         localExtras.put(DataKeys.REWARDED_AD_CURRENCY_NAME_KEY, "currencyName");
         localExtras.put(DataKeys.REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY, "10");
@@ -174,7 +173,7 @@ public void loadWithSdkInitialized_withEmptyCurrencyName_withNegativeCurrencyAmo
         // We pass whatever was sent to this custom event to the app as long as it exists, but
         // if the currency value is negative, set it to 0
         subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
-        final Map<String, Object> localExtras = new TreeMap<String, Object>();
+        final Map<String, Object> localExtras = new HashMap<String, Object>();
         final Map<String, String> serverExtras = new HashMap<String, String>();
         localExtras.put(DataKeys.REWARDED_AD_CURRENCY_NAME_KEY, "");
         localExtras.put(DataKeys.REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY, "-10");
@@ -189,6 +188,24 @@ public void loadWithSdkInitialized_withEmptyCurrencyName_withNegativeCurrencyAmo
         assertThat(subject.getRewardedAdCurrencyAmount()).isEqualTo(0);
     }
 
+    @Test
+    public void loadWithSdkInitialized_withAdUnitId_shouldSetAdNetworkId() throws Exception {
+        final Map<String, Object> localExtras = new HashMap<String, Object>();
+        localExtras.put(DataKeys.AD_UNIT_ID_KEY, "adUnit");
+
+        subject.loadWithSdkInitialized(activity, localExtras, new HashMap<String, String>());
+
+        assertThat(subject.getAdNetworkId()).isEqualTo("adUnit");
+    }
+
+    @Test
+    public void loadWithSdkInitialized_withNoAdUnitId_shouldUseDefaultAdNetworkId() throws Exception {
+        subject.loadWithSdkInitialized(activity, new HashMap<String, Object>(),
+                new HashMap<String, String>());
+
+        assertThat(subject.getAdNetworkId()).isEqualTo(MoPubRewardedVideo.MOPUB_REWARDED_VIDEO_ID);
+    }
+
     @Test
     public void show_withVideoLoaded_shouldShowVastVideoInterstitial() {
         subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewCacheServiceTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewCacheServiceTest.java
index 89651a0a..02e3b6d9 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewCacheServiceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewCacheServiceTest.java
@@ -1,6 +1,5 @@
 package com.mopub.mobileads;
 
-import android.app.Activity;
 import android.os.Handler;
 
 import com.mopub.common.ExternalViewabilitySessionManager;
@@ -10,7 +9,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 
 import java.util.Map;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
index bc9f2129..f373be7b 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
@@ -353,7 +353,7 @@ public void render_shouldAddViewToVisibilityTracker() {
         subject.prepare(mockRootView);
         subject.render(mockMediaLayout);
 
-        verify(mockVisibilityTracker).addView(mockRootView, mockMediaLayout, 10, 5);
+        verify(mockVisibilityTracker).addView(mockRootView, mockMediaLayout, 10, 5, null);
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
index 2c6be2a7..4a903940 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
@@ -47,6 +47,7 @@
 @Config(constants = BuildConfig.class)
 public class VisibilityTrackerTest {
     private static final int MIN_PERCENTAGE_VIEWED = 50;
+    private static final Integer DEFAULT_MIN_VISIBLE_PX = 1;
 
     private Activity activity;
     private VisibilityTracker subject;
@@ -128,7 +129,7 @@ public void constructor_withApplicationContext_shouldNotSetOnPreDrawListener() {
 
     @Test
     public void addView_withVisibleView_shouldAddVisibleViewToTrackedViews() throws Exception {
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
+        subject.addView(view, MIN_PERCENTAGE_VIEWED, null);
 
         assertThat(trackedViews).hasSize(1);
     }
@@ -145,21 +146,21 @@ public void addView_withViewTreeObserverNotSet_shouldSetViewTreeObserver() {
 
         subject = new VisibilityTracker(activity.getApplicationContext(), trackedViews,
                 visibilityChecker, visibilityHandler);
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
+        subject.addView(view, MIN_PERCENTAGE_VIEWED, null);
 
         assertThat(subject.mWeakViewTreeObserver.get()).isEqualTo(viewTreeObserver);
     }
 
     @Test(expected = NullPointerException.class)
     public void addView_whenViewIsNull_shouldThrowNPE() throws Exception {
-        subject.addView(null, MIN_PERCENTAGE_VIEWED);
+        subject.addView(null, MIN_PERCENTAGE_VIEWED, null);
 
         assertThat(trackedViews).isEmpty();
     }
 
     @Test
     public void removeView_shouldRemoveFromTrackedViews() throws Exception {
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
+        subject.addView(view, MIN_PERCENTAGE_VIEWED, null);
 
         assertThat(trackedViews).hasSize(1);
         assertThat(trackedViews).containsKey(view);
@@ -171,8 +172,8 @@ public void removeView_shouldRemoveFromTrackedViews() throws Exception {
 
     @Test
     public void clear_shouldRemoveAllViewsFromTrackedViews_shouldRemoveMessagesFromVisibilityHandler_shouldResetIsVisibilityScheduled() throws Exception {
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
-        subject.addView(view2, MIN_PERCENTAGE_VIEWED);
+        subject.addView(view, MIN_PERCENTAGE_VIEWED, null);
+        subject.addView(view2, MIN_PERCENTAGE_VIEWED, null);
         assertThat(trackedViews).hasSize(2);
 
         subject.clear();
@@ -196,8 +197,8 @@ public void destroy_shouldCallClear_shouldRemoveListenerFromDecorView() throws E
 
         subject = new VisibilityTracker(activity1, trackedViews, visibilityChecker, visibilityHandler);
 
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
-        subject.addView(view2, MIN_PERCENTAGE_VIEWED);
+        subject.addView(view, MIN_PERCENTAGE_VIEWED, null);
+        subject.addView(view2, MIN_PERCENTAGE_VIEWED, null);
         assertThat(trackedViews).hasSize(2);
 
         subject.destroy();
@@ -210,7 +211,7 @@ public void destroy_shouldCallClear_shouldRemoveListenerFromDecorView() throws E
 
     @Test
     public void visibilityRunnable_run_withVisibleView_shouldCallOnVisibleCallback() throws Exception {
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
+        subject.addView(view, MIN_PERCENTAGE_VIEWED, null);
 
         subject.new VisibilityRunnable().run();
 
@@ -221,7 +222,7 @@ public void visibilityRunnable_run_withVisibleView_shouldCallOnVisibleCallback()
     @Test
     public void visibilityRunnable_run_withNonVisibleView_shouldCallOnNonVisibleCallback() throws Exception {
         when(view.getVisibility()).thenReturn(View.INVISIBLE);
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
+        subject.addView(view, MIN_PERCENTAGE_VIEWED, null);
 
         subject.new VisibilityRunnable().run();
 
@@ -249,89 +250,121 @@ public void hasRequiredTimeElapsed_withElapsedTimeLessThanMinTimeViewed_shouldRe
     @Test
     public void isMostlyVisible_whenParentIsNull_shouldReturnFalse() throws Exception {
         view = createViewMock(View.VISIBLE, 100, 100, 100, 100, false, true);
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED, null)).isFalse();
     }
 
     @Test
     public void isMostlyVisible_whenViewIsOffScreen_shouldReturnFalse() throws Exception {
         view = createViewMock(View.VISIBLE, 100, 100, 100, 100, true, false);
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED, null)).isFalse();
     }
 
     @Test
     public void isMostlyVisible_whenViewIsEntirelyOnScreen_shouldReturnTrue() throws Exception {
         view = createViewMock(View.VISIBLE, 100, 100, 100, 100, true, true);
 
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isTrue();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED, null)).isTrue();
     }
 
     @Test
     public void isMostlyVisible_whenViewIs50PercentVisible_shouldReturnTrue() throws Exception {
         view = createViewMock(View.VISIBLE, 50, 100, 100, 100, true, true);
 
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isTrue();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED, null)).isTrue();
     }
 
     @Test
     public void isMostlyVisible_whenViewIs49PercentVisible_shouldReturnFalse() throws Exception {
         view = createViewMock(View.VISIBLE, 49, 100, 100, 100, true, true);
 
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED, null)).isFalse();
     }
 
     @Test
     public void isMostlyVisible_whenVisibleAreaIsZero_shouldReturnFalse() throws Exception {
         view = createViewMock(View.VISIBLE, 0, 0, 100, 100, true, true);
 
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED, null)).isFalse();
     }
 
     @Test
     public void isMostlyVisible_whenViewIsInvisibleOrGone_shouldReturnFalse() throws Exception {
         View view = createViewMock(View.INVISIBLE, 100, 100, 100, 100, true, true);
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED, null)).isFalse();
 
         reset(view);
         view = createViewMock(View.GONE, 100, 100, 100, 100, true, true);
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED, null)).isFalse();
     }
 
     @Test
     public void isMostlyVisible_whenViewHasZeroWidthAndHeight_shouldReturnFalse() throws Exception {
         view = createViewMock(View.VISIBLE, 100, 100, 0, 0, true, true);
 
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED, null)).isFalse();
     }
 
     @Test
     public void isMostlyVisible_whenViewIsNull_shouldReturnFalse() throws Exception {
-        assertThat(visibilityChecker.isVisible(null, null, MIN_PERCENTAGE_VIEWED)).isFalse();
+        assertThat(visibilityChecker.isVisible(null, null, MIN_PERCENTAGE_VIEWED, null)).isFalse();
+    }
+
+    @Test
+    public void isMostlyVisible_whenVisibleAreaIsCheckedByPixel_shouldReturnTrue() throws Exception {
+        view = createViewMock(View.VISIBLE, 90, 90, 100, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED,
+                DEFAULT_MIN_VISIBLE_PX)).isTrue();
+    }
+
+    @Test
+    public void isVisible_whenVisibleAreaIsCheckedByPixel_withExactlyOnePixelVisible_shouldReturnTrue() throws Exception {
+        view = createViewMock(View.VISIBLE, 1, 1, 100, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED,
+                DEFAULT_MIN_VISIBLE_PX)).isTrue();
+    }
+
+    @Test
+    public void isVisible_whenVisibleAreaIsCheckedByPixel_withLargeNonDefaultMinimumPixel_shouldReturnFalse() throws Exception {
+        view = createViewMock(View.VISIBLE, 3, 3, 100, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED,
+                25)).isFalse();
+    }
+
+    @Test
+    public void isVisible_whenVisibleAreaIsCheckedByPixel_withSmallNonDefaultMinimumPixel_shouldReturnTrue() throws Exception {
+        view = createViewMock(View.VISIBLE, 3, 3, 100, 100, true, true);
+
+        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED,
+                5)).isTrue();
     }
 
     @Test
     public void addView_shouldClearViewAfterNumAccesses() {
         // Access 1 time
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
+        subject.addView(view, MIN_PERCENTAGE_VIEWED, null);
         assertThat(trackedViews).hasSize(1);
 
         // Access 2-49 times
         for (int i = 0; i < VisibilityTracker.NUM_ACCESSES_BEFORE_TRIMMING - 2; ++i) {
-            subject.addView(view2, MIN_PERCENTAGE_VIEWED);
+            subject.addView(view2, MIN_PERCENTAGE_VIEWED, null);
         }
         assertThat(trackedViews).hasSize(2);
 
         // 50th time
-        subject.addView(view2, MIN_PERCENTAGE_VIEWED);
+        subject.addView(view2, MIN_PERCENTAGE_VIEWED, null);
         assertThat(trackedViews).hasSize(2);
 
         // 51-99
         for (int i = 0; i < VisibilityTracker.NUM_ACCESSES_BEFORE_TRIMMING - 1; ++i) {
-            subject.addView(view2, MIN_PERCENTAGE_VIEWED);
+            subject.addView(view2, MIN_PERCENTAGE_VIEWED, null);
         }
         assertThat(trackedViews).hasSize(2);
 
         // 100
-        subject.addView(view2, MIN_PERCENTAGE_VIEWED);
+        subject.addView(view2, MIN_PERCENTAGE_VIEWED, null);
         assertThat(trackedViews).hasSize(1);
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java b/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
index 2d5a13f1..80aa77fc 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
@@ -6,6 +6,7 @@
 import com.mopub.common.AdFormat;
 import com.mopub.common.AdType;
 import com.mopub.common.DataKeys;
+import com.mopub.common.MoPub;
 import com.mopub.common.MoPub.BrowserAgent;
 import com.mopub.common.event.BaseEvent;
 import com.mopub.common.event.EventDispatcher;
@@ -71,6 +72,7 @@ public void setup() {
         defaultHeaders.put(ResponseHeader.PAUSE_VISIBLE_PERCENT.getKey(), "25");
         defaultHeaders.put(ResponseHeader.IMPRESSION_MIN_VISIBLE_PERCENT.getKey(), "33%");
         defaultHeaders.put(ResponseHeader.IMPRESSION_VISIBLE_MS.getKey(), "2000");
+        defaultHeaders.put(ResponseHeader.IMPRESSION_MIN_VISIBLE_PX.getKey(), "1");
         defaultHeaders.put(ResponseHeader.MAX_BUFFER_MS.getKey(), "1000");
 
         MoPubEvents.setEventDispatcher(mockEventDispatcher);
@@ -81,6 +83,7 @@ public void teardown() {
         // Reset our locale for other tests.
         Locale.setDefault(Locale.US);
         MoPubEvents.setEventDispatcher(null);
+        MoPub.resetBrowserAgent();
     }
 
     @Test
@@ -169,6 +172,7 @@ public void parseNetworkResponse_forNativeVideo_shouldSucceed() throws Exception
         assertThat(serverExtras.get(DataKeys.PAUSE_VISIBLE_PERCENT)).isEqualTo("25");
         assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT)).isEqualTo("33");
         assertThat(serverExtras.get(DataKeys.IMPRESSION_VISIBLE_MS)).isEqualTo("2000");
+        assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PX)).isEqualTo("1");
         assertThat(serverExtras.get(DataKeys.MAX_BUFFER_MS)).isEqualTo("1000");
     }
 
@@ -186,6 +190,7 @@ public void parseNetworkResponse_forNativeStatic_shouldSucceed() throws Exceptio
         assertThat(serverExtras).isNotEmpty();
         assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT)).isEqualTo("33");
         assertThat(serverExtras.get(DataKeys.IMPRESSION_VISIBLE_MS)).isEqualTo("2000");
+        assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PX)).isEqualTo("1");
     }
 
     @Test
@@ -208,6 +213,7 @@ public void parseNetworkResponse_forNativeVideo_shouldCombineServerExtrasAndEven
         assertThat(serverExtras.get(DataKeys.PAUSE_VISIBLE_PERCENT)).isEqualTo("25");
         assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT)).isEqualTo("33");
         assertThat(serverExtras.get(DataKeys.IMPRESSION_VISIBLE_MS)).isEqualTo("2000");
+        assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PX)).isEqualTo("1");
         assertThat(serverExtras.get(DataKeys.MAX_BUFFER_MS)).isEqualTo("1000");
 
         assertThat(serverExtras.get("customEventKey1")).isEqualTo("value1");
@@ -219,6 +225,7 @@ public void parseNetworkResponse_forNativeVideo_withInvalidValues_shouldSucceed_
         defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.VIDEO_NATIVE);
         defaultHeaders.put(ResponseHeader.PLAY_VISIBLE_PERCENT.getKey(), "-1");
         defaultHeaders.put(ResponseHeader.PAUSE_VISIBLE_PERCENT.getKey(), "101%");
+        defaultHeaders.put(ResponseHeader.IMPRESSION_MIN_VISIBLE_PX.getKey(), "bob");
         defaultHeaders.put(ResponseHeader.IMPRESSION_MIN_VISIBLE_PERCENT.getKey(), "XX%");
         NetworkResponse testResponse = new NetworkResponse(200,
                 "{\"abc\": \"def\"}".getBytes(Charset.defaultCharset()), defaultHeaders, false);
@@ -233,6 +240,7 @@ public void parseNetworkResponse_forNativeVideo_withInvalidValues_shouldSucceed_
         assertThat(serverExtras.get(DataKeys.PAUSE_VISIBLE_PERCENT)).isNull();
         assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT)).isNull();
         assertThat(serverExtras.get(DataKeys.IMPRESSION_VISIBLE_MS)).isEqualTo("2000");
+        assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PX)).isEqualTo("bob");
         assertThat(serverExtras.get(DataKeys.MAX_BUFFER_MS)).isEqualTo("1000");
     }
 
@@ -415,6 +423,73 @@ public void parseNetworkResponse_withUndefinedBrowserAgent_shouldDefaultToInApp(
         assertThat(response.result.getBrowserAgent()).isEqualTo(BrowserAgent.IN_APP);
     }
 
+    @Test
+    public void parseNetworkResponse_forBannerAdFormat_withoutImpTrackingHeaders_shouldSucceed() {
+        subject = new AdRequest("testUrl", AdFormat.BANNER, "testAdUnitId", activity, mockListener);
+
+        NetworkResponse testResponse =
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+
+        assertThat(response.result).isNotNull();
+        assertThat(response.result.getStringBody()).isEqualTo("abc");
+
+        // Check the server extras
+        final Map<String, String> serverExtras = response.result.getServerExtras();
+        assertThat(serverExtras).isNotNull();
+        assertThat(serverExtras).isNotEmpty();
+        assertThat(serverExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS)).isNull();
+        assertThat(serverExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS)).isNull();
+    }
+
+    @Test
+    public void parseNetworkResponse_forBannerAdFormat_withImpTrackingHeaders_shouldSucceed_shouldStoreHeadersInServerExtras() {
+        defaultHeaders.put(ResponseHeader.BANNER_IMPRESSION_MIN_VISIBLE_DIPS.getKey(), "1");
+        defaultHeaders.put(ResponseHeader.BANNER_IMPRESSION_MIN_VISIBLE_MS.getKey(), "0");
+
+        subject = new AdRequest("testUrl", AdFormat.BANNER, "testAdUnitId", activity, mockListener);
+
+        NetworkResponse testResponse =
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+
+        assertThat(response.result).isNotNull();
+        assertThat(response.result.getStringBody()).isEqualTo("abc");
+
+        // Check the server extras
+        final Map<String, String> serverExtras = response.result.getServerExtras();
+        assertThat(serverExtras).isNotNull();
+        assertThat(serverExtras).isNotEmpty();
+        assertThat(serverExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS)).isEqualTo("1");
+        assertThat(serverExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS)).isEqualTo("0");
+    }
+
+    @Test
+    public void parseNetworkResponse_forNonBannerAdFormat_withImpTrackingHeaders_shouldSucceed_shouldIgnoreHeaders() {
+        defaultHeaders.put(ResponseHeader.BANNER_IMPRESSION_MIN_VISIBLE_DIPS.getKey(), "1");
+        defaultHeaders.put(ResponseHeader.BANNER_IMPRESSION_MIN_VISIBLE_MS.getKey(), "0");
+
+        // Non-banner AdFormat
+        subject = new AdRequest("testUrl", AdFormat.INTERSTITIAL, "testAdUnitId", activity, mockListener);
+
+        NetworkResponse testResponse =
+                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
+
+        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
+
+        assertThat(response.result).isNotNull();
+        assertThat(response.result.getStringBody()).isEqualTo("abc");
+
+        // Check the server extras
+        final Map<String, String> serverExtras = response.result.getServerExtras();
+        assertThat(serverExtras).isNotNull();
+        assertThat(serverExtras).isNotEmpty();
+        assertThat(serverExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS)).isNull();
+        assertThat(serverExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS)).isNull();
+    }
+
     @Test
     public void deliverResponse_shouldCallListenerOnSuccess() throws Exception {
         subject.deliverResponse(mockAdResponse);
diff --git a/mopub-sdk/src/test/java/com/mopub/network/CustomSSLSocketFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/network/CustomSSLSocketFactoryTest.java
index 01ba66f4..0395851f 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/CustomSSLSocketFactoryTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/CustomSSLSocketFactoryTest.java
@@ -9,6 +9,7 @@
 import com.mopub.TestSdkHelper;
 import com.mopub.mobileads.BuildConfig;
 
+import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -45,6 +46,7 @@
     private CustomSSLSocketFactory subject;
     private SSLCertificateSocketFactory mockSSLCertificateSocketFactory;
     private SSLSocketWithSetHostname mockSSLSocket;
+    private int previousSdkVersion;
 
     @SuppressLint("SSLCertificateSocketFactoryCreateSocket")
     @Before
@@ -59,6 +61,12 @@ public void setUp() throws Exception {
                 mockInetAddress);
         subject = CustomSSLSocketFactory.getDefault(0);
         subject.setCertificateSocketFactory(mockSSLCertificateSocketFactory);
+        previousSdkVersion = Build.VERSION.SDK_INT;
+    }
+
+    @After
+    public void tearDown() {
+        TestSdkHelper.setReportedSdkLevel(previousSdkVersion);
     }
 
     @Test
@@ -71,6 +79,11 @@ public void createSocket_withSocketParam_withAutoCloseTrue_shouldCloseOriginalSo
         subject.createSocket(mockSocket, "hostname", 443, true);
 
         verify(mockSocket).close();
+        verify(mockSSLSocket).getSupportedProtocols();
+        verify(mockSSLSocket).setEnabledProtocols(any(String[].class));
+        verify(mockSSLSocket).startHandshake();
+        verify(mockSSLSocket).getSession();
+        verify(mockSSLSocket).setHostname(any(String.class));
         verifyNoMoreInteractions(mockSocket);
     }
 
diff --git a/mopub-sdk/src/test/resources/robolectric.properties b/mopub-sdk/src/test/resources/com/mopub/robolectric.properties
similarity index 82%
rename from mopub-sdk/src/test/resources/robolectric.properties
rename to mopub-sdk/src/test/resources/com/mopub/robolectric.properties
index f339de43..d6c29dbf 100644
--- a/mopub-sdk/src/test/resources/robolectric.properties
+++ b/mopub-sdk/src/test/resources/com/mopub/robolectric.properties
@@ -1,3 +1,2 @@
-sdk=21
+sdk=26
 shadows=com.mopub.nativeads.test.support.MoPubShadowDisplay,com.mopub.nativeads.test.support.MoPubShadowBitmap,com.mopub.mobileads.test.support.ShadowVastVideoView,com.mopub.common.util.test.support.ShadowReflection
-manifest=src/main/AndroidManifest.xml
