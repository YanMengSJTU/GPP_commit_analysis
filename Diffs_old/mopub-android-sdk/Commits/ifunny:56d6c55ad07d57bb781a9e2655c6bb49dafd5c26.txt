diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdResponse.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdResponse.java
index 4469fd16..16ad5aac 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdResponse.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdResponse.java
@@ -4,6 +4,7 @@
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
+import com.mopub.common.DataKeys;
 import com.mopub.common.event.EventDetails;
 import com.mopub.common.util.DateAndTime;
 
@@ -12,6 +13,8 @@
 import java.io.Serializable;
 import java.util.Map;
 import java.util.TreeMap;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 public class AdResponse implements Serializable {
     private static final long serialVersionUID = 1L;
@@ -110,13 +113,33 @@ private AdResponse(@NonNull Builder builder) {
         mServerExtras = builder.serverExtras;
         mTimestamp = DateAndTime.now().getTime();
 
-        tierName = mServerExtras.get(TIER_NAME);
-        String stringOffset = mServerExtras.get(MARKER_OFFSET);
-	    try {
-		    markerOffset = TextUtils.isEmpty(stringOffset) ? null : Integer.valueOf(stringOffset);
-	    } catch (NumberFormatException e) {
-		    markerOffset = null;
-	    }
+        if (mServerExtras.containsKey(DataKeys.HTML_RESPONSE_BODY_KEY)) {
+            String data = mServerExtras.get(DataKeys.HTML_RESPONSE_BODY_KEY);
+
+            tierName = getFirstMatchedGroup(data, "\"funcorp_tier_name\"=\"(.+)\"");
+            String stringOffset = getFirstMatchedGroup(data, "\"funcorp_tier_marker_offset\"=\"(\\d+)\"");
+            markerOffset = stringToInt(stringOffset);
+        }
+        else {
+            tierName = mServerExtras.get(TIER_NAME);
+            String stringOffset = mServerExtras.get(MARKER_OFFSET);
+            markerOffset = stringToInt(stringOffset);
+        }
+    }
+
+    private String getFirstMatchedGroup(String data, String regex) {
+        Pattern pattern = Pattern.compile(regex);
+        Matcher matcher = pattern.matcher(data);
+
+        return matcher.groupCount() > 0 ? matcher.group(1) : "";
+    }
+
+    private Integer stringToInt(String number) {
+        try {
+            return TextUtils.isEmpty(number) ? null : Integer.valueOf(number);
+        } catch (NumberFormatException e) {
+            return null;
+        }
     }
 
     public boolean hasJson() {
