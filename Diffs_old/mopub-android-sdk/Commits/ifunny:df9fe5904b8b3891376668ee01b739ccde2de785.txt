diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
index 2ad9e830..9aaaf06a 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
@@ -379,6 +379,14 @@ public boolean isAdLoaded(int position) {
 		return mPlacementData.isAdLoaded(position);
 	}
 
+	public boolean isAdLoadedByIndex(int index) {
+		return mPlacementData.isAdLoadedByIndex(index);
+	}
+
+	public int getAdIndex(int position) {
+		return mPlacementData.getAdIndex(position);
+	}
+
 	/**
 	 * Inserts ads that should appear in the given range.
 	 * <p/>
@@ -464,6 +472,11 @@ public NativeAdData getAdData(final int position) {
 		return mPlacementData.getPlacedAd(position);
 	}
 
+	@Nullable
+	public NativeAdData getAdDataByIndex(final int index) {
+		return mPlacementData.getPlacedAdByIndex(index);
+	}
+
 	/**
 	 * Gets the ad at the given position, or {@code null} if there is no ad at the given position.
 	 * <p/>
@@ -511,8 +524,7 @@ public void bindAdView(@NonNull NativeAdData adData, @NonNull View adView) {
 		}
 	}
 
-	public void clearAdView(int position, View adView) {
-		final NativeAdData adData = mPlacementData.getPlacedAd(position);
+	public void clearAdView(NativeAdData adData, View adView) {
 		if (adData == null) {
 			return;
 		}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/PlacementData.java b/mopub-sdk/src/main/java/com/mopub/nativeads/PlacementData.java
index 6cc9e1a8..98335f1e 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/PlacementData.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/PlacementData.java
@@ -193,7 +193,7 @@ boolean shouldPlaceAd(final int position) {
      */
     int nextInsertionPosition(final int position) {
         final int index = binarySearchGreaterThan(
-                mDesiredInsertionPositions, mDesiredCount, position);
+		        mDesiredInsertionPositions, mDesiredCount, position);
         if (index == mDesiredCount) {
             return NOT_FOUND;
         }
@@ -206,7 +206,7 @@ int nextInsertionPosition(final int position) {
      */
     int previousInsertionPosition(final int position) {
         final int index = binarySearchFirstEquals(
-                mDesiredInsertionPositions,  mDesiredCount, position);
+		        mDesiredInsertionPositions, mDesiredCount, position);
         if (index == 0) {
             return NOT_FOUND;
         }
@@ -275,12 +275,16 @@ boolean isPlacedAd(final int position) {
 
     boolean isAdLoaded(final int position) {
         final int index = binarySearch(mAdjustedAdPositions, 0, mPlacedCount, position);
-        if (index >=0){
-            return !stackedPositions.contains(index);
-        }
-        return false;
+        return index >=0;
     }
 
+	boolean isAdLoadedByIndex(final int index){
+		if (index >=0){
+			return getPlacedCount()>index;
+		}
+		return false;
+	}
+
 	int getStackedCount(){
 		return stackedPositions.size();
 	}
@@ -299,12 +303,17 @@ int placeInStack(final NativeAdData adData){
     @Nullable
     NativeAdData getPlacedAd(final int position) {
         final int index = binarySearch(mAdjustedAdPositions, 0, mPlacedCount, position);
-        if (index < 0) {
-            return null;
-        }
-        return mAdDataObjects[index];
+        return getPlacedAdByIndex(index);
     }
 
+	@Nullable
+	NativeAdData getPlacedAdByIndex(final int index) {
+		if (index < 0) {
+			return null;
+		}
+		return mAdDataObjects[index];
+	}
+
     /**
      * Returns all placed ad positions. This method allocates new memory on every invocation. Do
      * not call it from performance critical code.
@@ -351,6 +360,11 @@ int getAdjustedPosition(final int originalPosition) {
         return originalPosition + index;
     }
 
+    int getAdIndex(final int adjustedPosition){
+        final int index = binarySearch(mAdjustedAdPositions, 0, mPlacedCount, adjustedPosition);
+	    return index;
+    }
+
     int getPlacedCount(){
         return mPlacedCount;
     }
