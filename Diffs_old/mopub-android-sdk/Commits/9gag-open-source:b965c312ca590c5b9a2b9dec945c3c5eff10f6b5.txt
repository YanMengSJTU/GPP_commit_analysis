diff --git a/build.gradle b/build.gradle
index a0f73c01..0e79d1f1 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5,11 +5,11 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.1.3'
-        classpath 'com.novoda:bintray-release:0.3.4'
+        classpath 'com.android.tools.build:gradle:2.2.3'
+        classpath 'com.novoda:bintray-release:0.4.0'
     }
 }
 
 task wrapper(type: Wrapper) {
-    gradleVersion = '2.10'
+    gradleVersion = '2.14.1'
 }
diff --git a/gradle.properties b/gradle.properties
index 2cef46c6..eaeb203b 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,2 +1,2 @@
-org.gradle.jvmargs=-Xmx8192m -XX:MaxPermSize=2048m
+org.gradle.jvmargs=-Xmx1280m -XX:MaxPermSize=512m
 org.gradle.daemon=false
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 65b9ee77..b7ca902f 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -3,4 +3,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-bin.zip
diff --git a/mopub-sdk/build.gradle b/mopub-sdk/build.gradle
index dc087560..b834267e 100644
--- a/mopub-sdk/build.gradle
+++ b/mopub-sdk/build.gradle
@@ -2,26 +2,26 @@ apply from: 'shared-build.gradle'
 
 dependencies {
     compile project(':mopub-sdk:mopub-sdk-base')
-    compile project(':mopub-sdk:mopub-sdk-banner')
-    compile project(':mopub-sdk:mopub-sdk-interstitial')
-    compile project(':mopub-sdk:mopub-sdk-rewardedvideo')
+    //compile project(':mopub-sdk:mopub-sdk-banner')
+    //compile project(':mopub-sdk:mopub-sdk-interstitial')
+    //compile project(':mopub-sdk:mopub-sdk-rewardedvideo')
     compile project(':mopub-sdk:mopub-sdk-native-static')
-    compile project(':mopub-sdk:mopub-sdk-native-video')
+    //compile project(':mopub-sdk:mopub-sdk-native-video')
 
-    testCompile 'junit:junit:4.10'
-    testCompile 'org.robolectric:robolectric:3.0'
-    testCompile 'org.robolectric:shadows-support-v4:3.0'
-    testCompile 'org.robolectric:shadows-httpclient:3.0'
+    testCompile 'junit:junit:4.12'
+    testCompile 'org.robolectric:robolectric:3.2.2'
+    testCompile 'org.robolectric:shadows-support-v4:3.2.2'
+    testCompile 'org.robolectric:shadows-httpclient:3.2.2'
     testCompile 'com.squareup:fest-android:1.0.7'
-    testCompile 'org.mockito:mockito-core:1.9.5'
-    testCompile 'org.powermock:powermock-module-junit4:1.6.5'
-    testCompile 'org.powermock:powermock-module-junit4-rule:1.6.5'
-    testCompile 'org.powermock:powermock-api-mockito:1.6.5'
-    testCompile 'org.powermock:powermock-classloading-xstream:1.6.5'
+    testCompile 'org.mockito:mockito-core:1.10.19'
+    testCompile 'org.powermock:powermock-module-junit4:1.6.6'
+    testCompile 'org.powermock:powermock-module-junit4-rule:1.6.6'
+    testCompile 'org.powermock:powermock-api-mockito:1.6.6'
+    testCompile 'org.powermock:powermock-classloading-xstream:1.6.6'
 }
 
 project.description = 'MoPub Android SDK'
 project.ext.displayName = 'MoPub Android SDK'
 project.ext.projectName = 'mopub-sdk'
 project.ext.uploadName = 'mopub-android-sdk'
-apply from: 'publisher.gradle'
+//apply from: 'publisher.gradle'
diff --git a/mopub-sdk/gradle/wrapper/gradle-wrapper.properties b/mopub-sdk/gradle/wrapper/gradle-wrapper.properties
index 6faa4eab..cb208166 100644
--- a/mopub-sdk/gradle/wrapper/gradle-wrapper.properties
+++ b/mopub-sdk/gradle/wrapper/gradle-wrapper.properties
@@ -3,4 +3,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-bin.zip
diff --git a/mopub-sdk/mopub-sdk-base/build.gradle b/mopub-sdk/mopub-sdk-base/build.gradle
index 2ced0308..4ace1ac1 100644
--- a/mopub-sdk/mopub-sdk-base/build.gradle
+++ b/mopub-sdk/mopub-sdk-base/build.gradle
@@ -8,4 +8,4 @@ project.description = 'MoPub Android SDK - Base'
 project.ext.displayName = 'MoPub Android SDK - Base'
 project.ext.projectName = 'mopub-sdk-base'
 project.ext.uploadName = 'mopub-android-sdk-base'
-apply from: '../publisher.gradle'
+//apply from: '../publisher.gradle'
diff --git a/mopub-sdk/mopub-sdk-native-static/build.gradle b/mopub-sdk/mopub-sdk-native-static/build.gradle
index 26111f70..bbb5e1ed 100644
--- a/mopub-sdk/mopub-sdk-native-static/build.gradle
+++ b/mopub-sdk/mopub-sdk-native-static/build.gradle
@@ -2,11 +2,12 @@ apply from: '../shared-build.gradle'
 
 dependencies {
     compile project(':mopub-sdk:mopub-sdk-base')
-    compile 'com.android.support:recyclerview-v7:23.1.1'
+    compile 'com.android.support:recyclerview-v7:25.2.0'
+    compile 'com.facebook.fresco:fresco:1.1.0'
 }
 
 project.description = 'MoPub Android SDK - Native Static'
 project.ext.displayName = 'MoPub Android SDK - Native Static'
 project.ext.projectName = 'mopub-sdk-native-static'
 project.ext.uploadName = 'mopub-android-sdk-native-static'
-apply from: '../publisher.gradle'
+//apply from: '../publisher.gradle'
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/FrescoImageHelper.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/FrescoImageHelper.java
new file mode 100644
index 00000000..1eacd8e8
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/FrescoImageHelper.java
@@ -0,0 +1,104 @@
+package com.mopub.nativeads;
+
+import java.util.List;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import android.net.Uri;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.facebook.common.executors.UiThreadImmediateExecutorService;
+import com.facebook.datasource.DataSource;
+import com.facebook.datasource.DataSubscriber;
+import com.facebook.drawee.backends.pipeline.Fresco;
+import com.facebook.drawee.controller.AbstractDraweeControllerBuilder;
+import com.facebook.drawee.view.SimpleDraweeView;
+import com.facebook.imagepipeline.common.ResizeOptions;
+import com.facebook.imagepipeline.request.ImageRequestBuilder;
+import com.mopub.common.Preconditions;
+import com.mopub.common.logging.MoPubLog;
+
+/**
+ * Created by raymond on 13/2/2017.
+ */
+public class FrescoImageHelper {
+
+    private static ResizeOptions sResizeOptions = new ResizeOptions(640, 480);
+
+
+    public static void loadImageView(@Nullable final String url, @Nullable final SimpleDraweeView imageView) {
+        if (!Preconditions.NoThrow.checkNotNull(imageView, "Cannot load image into null SimpleDraweeView")) {
+            return;
+        }
+
+        if (!Preconditions.NoThrow.checkNotNull(url, "Cannot load image with null url")) {
+            imageView.setImageDrawable(null);
+            return;
+        }
+
+        ImageRequestBuilder imageRequestBuilder = ImageRequestBuilder.newBuilderWithSource(Uri.parse(url)).setResizeOptions(sResizeOptions);
+
+        AbstractDraweeControllerBuilder draweeControllerBuilder = Fresco.newDraweeControllerBuilder().setOldController(imageView.getController()).setImageRequest(imageRequestBuilder.build());
+
+        imageView.setController(draweeControllerBuilder.build());
+    }
+
+    /**
+     * @param imageUrls
+     * @param imageListener
+     */
+    public static void preCacheImages(@NonNull final List<String> imageUrls,
+                                      @NonNull final NativeImageHelper.ImageListener imageListener) {
+
+        final AtomicInteger imageCounter = new AtomicInteger(imageUrls.size());
+        final AtomicBoolean anyFailures = new AtomicBoolean(false);
+
+        DataSubscriber DS = new DataSubscriber() {
+            @Override
+            public void onNewResult(DataSource dataSource) {
+
+            }
+
+            @Override
+            public void onFailure(DataSource dataSource) {
+                MoPubLog.d("Failed to download a native ads image:", dataSource.getFailureCause());
+                boolean anyPreviousErrors = anyFailures.getAndSet(true);
+                imageCounter.decrementAndGet();
+                if (!anyPreviousErrors) {
+                    imageListener.onImagesFailedToCache(NativeErrorCode.IMAGE_DOWNLOAD_FAILURE);
+                }
+            }
+
+            @Override
+            public void onCancellation(DataSource dataSource) {
+
+            }
+
+            @Override
+            public void onProgressUpdate(DataSource dataSource) {
+                if (dataSource.getProgress() >= 1) {
+                    final int count = imageCounter.decrementAndGet();
+                    if (count == 0 && !anyFailures.get()) {
+                        imageListener.onImagesCached();
+                    }
+                }
+            }
+        };
+
+        for (int i = 0; i < imageUrls.size(); i++) {
+            String url = imageUrls.get(i);
+            if (TextUtils.isEmpty(url)) {
+                anyFailures.set(true);
+                imageListener.onImagesFailedToCache(NativeErrorCode.IMAGE_DOWNLOAD_FAILURE);
+                return;
+            }
+            ImageRequestBuilder builder = ImageRequestBuilder.newBuilderWithSource(Uri.parse(url))
+                .setResizeOptions(sResizeOptions)
+                ;
+            Fresco.getImagePipeline().prefetchToDiskCache(builder.build(), null)
+                .subscribe(DS, UiThreadImmediateExecutorService.getInstance());
+        }
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
index 9d31f0d3..f583c3c1 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
@@ -1,24 +1,23 @@
 package com.mopub.nativeads;
 
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+import java.util.Set;
+
 import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.view.View;
 
-import com.mopub.common.VisibleForTesting;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.nativeads.NativeImageHelper.ImageListener;
-
 import org.json.JSONArray;
 import org.json.JSONObject;
 
-import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-import java.util.Set;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
 
 import static com.mopub.common.DataKeys.JSON_BODY_KEY;
 import static com.mopub.common.util.Numbers.parseDouble;
@@ -142,17 +141,7 @@ void loadAd() throws IllegalArgumentException {
             }
             setPrivacyInformationIconClickThroughUrl(PRIVACY_INFORMATION_CLICKTHROUGH_URL);
 
-            preCacheImages(mContext, getAllImageUrls(), new ImageListener() {
-                @Override
-                public void onImagesCached() {
-                    mCustomEventNativeListener.onNativeAdLoaded(MoPubStaticNativeAd.this);
-                }
-
-                @Override
-                public void onImagesFailedToCache(final NativeErrorCode errorCode) {
-                    mCustomEventNativeListener.onNativeAdFailed(errorCode);
-                }
-            });
+            preCacheImages(mCustomEventNativeListener, this, getAllImageUrls());
         }
 
         private boolean containsRequiredKeys(@NonNull final JSONObject jsonObject) {
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeImageHelper.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeImageHelper.java
index c01a329b..45087c0a 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeImageHelper.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeImageHelper.java
@@ -1,5 +1,9 @@
 package com.mopub.nativeads;
 
+import java.util.List;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
+
 import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
@@ -13,10 +17,6 @@
 import com.mopub.volley.VolleyError;
 import com.mopub.volley.toolbox.ImageLoader;
 
-import java.util.List;
-import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.concurrent.atomic.AtomicInteger;
-
 /**
  * Collection of helper methods to assist with image downloading and displaying
  */
@@ -38,6 +38,20 @@
         void onImagesFailedToCache(NativeErrorCode errorCode);
     }
 
+    public static void preCacheImages(@Nullable final CustomEventNative.CustomEventNativeListener customEventNativeListener, final StaticNativeAd ad, final List<String> imageUrls) {
+        FrescoImageHelper.preCacheImages(imageUrls, new NativeImageHelper.ImageListener() {
+            @Override
+            public void onImagesCached() {
+                if (customEventNativeListener != null) customEventNativeListener.onNativeAdLoaded(ad);
+            }
+
+            @Override
+            public void onImagesFailedToCache(final NativeErrorCode errorCode) {
+                if (customEventNativeListener != null) customEventNativeListener.onNativeAdFailed(errorCode);
+            }
+        });
+    }
+
     /**
      * Pre caches the given set of image urls. We recommend using this method to warm the image
      * cache before calling {@link CustomEventNativeListener#onNativeAdLoaded}. Doing so will
diff --git a/mopub-sdk/shared-build.gradle b/mopub-sdk/shared-build.gradle
index 21382d5d..6bb53f61 100644
--- a/mopub-sdk/shared-build.gradle
+++ b/mopub-sdk/shared-build.gradle
@@ -12,8 +12,8 @@ project.group = 'com.mopub'
 project.version = '4.12.0'
 
 android {
-    compileSdkVersion 23
-    buildToolsVersion '23.0.2'
+    compileSdkVersion 25
+    buildToolsVersion '25.0.2'
     lintOptions { abortOnError false }
     useLibrary 'org.apache.http.legacy'
 
@@ -21,7 +21,7 @@ android {
         versionCode 49
         versionName version
         minSdkVersion 16
-        targetSdkVersion 23
+        targetSdkVersion 25
         consumerProguardFiles project(':mopub-sdk').file('proguard.txt')
     }
 
@@ -46,12 +46,6 @@ android {
             // If these tests *require* platform APIs we may want to make them
             // connected tests instead.
             returnDefaultValues = true
-
-            // Test JVM settings since we have a lot of classes loaded.
-            all {
-                jvmArgs '-XX:MaxPermSize=4096m', '-Xmx8192m'
-                forkEvery 200
-            }
         }
     }
 
@@ -74,6 +68,6 @@ android {
 }
 
 dependencies {
-    compile 'com.android.support:support-v4:23.1.1'
-    compile 'com.android.support:support-annotations:23.1.1'
+    compile 'com.android.support:support-v4:25.2.0'
+    compile 'com.android.support:support-annotations:25.2.0'
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/TestSdkHelper.java b/mopub-sdk/src/test/java/com/mopub/TestSdkHelper.java
deleted file mode 100644
index 0f91d2e6..00000000
--- a/mopub-sdk/src/test/java/com/mopub/TestSdkHelper.java
+++ /dev/null
@@ -1,23 +0,0 @@
-package com.mopub;
-
-import android.os.Build;
-
-import org.robolectric.util.ReflectionHelpers;
-
-public class TestSdkHelper {
-
-    /**
-     * Sets the SDK level using reflection. Must only be used in tests, in situations where
-     * Robolectric does not support a given level. Only sets SDK level for one test.
-     * If you need this value to apply to the whole class, take care to set this in {@code #setUp}.
-     *
-     * Be careful when setting this value before calling Robolectric code, as it can interfere with
-     * some Robolectric behaviors (like attempting to call older API methods that do not
-     * exist in the android.jar you are executing against.)
-     *
-     */
-    public static void setReportedSdkLevel(final int sdkLevel) {
-        ReflectionHelpers.setStaticField(Build.VERSION.class, "SDK_INT", sdkLevel);
-    }
-
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/AdReportTest.java b/mopub-sdk/src/test/java/com/mopub/common/AdReportTest.java
deleted file mode 100644
index 75d415c2..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/AdReportTest.java
+++ /dev/null
@@ -1,107 +0,0 @@
-package com.mopub.common;
-
-import android.os.Build;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.test.support.TestDateAndTime;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.network.AdResponse;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.annotation.Config;
-
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import java.util.Locale;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.stub;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class AdReportTest {
-
-    public AdReport subject;
-    @Mock
-    ClientMetadata mockClientMetadata;
-    @Mock
-    AdResponse mockAdResponse;
-    private Date now;
-
-    @Before
-    public void setup() {
-        now = new Date();
-        TestDateAndTime.getInstance().setNow(now);
-    }
-
-    @Test
-    public void testToString_shouldProperlyConstructParametersTextFile() throws Exception {
-        String expectedParameters =
-                "sdk_version : 1.15.2.2\n" +
-                        "creative_id : \n" +
-                        "platform_version : "+ Integer.toString(Build.VERSION.SDK_INT) +"\n" +
-                        "device_model : android\n" +
-                        "ad_unit_id : testAdUnit\n" +
-                        "device_locale : en_US\n" +
-                        "device_id : UDID\n" +
-                        "network_type : unknown\n" +
-                        "platform : android\n" +
-                        "timestamp : " + getCurrentDateTime() + "\n" +
-                        "ad_type : interstitial\n" +
-                        "ad_size : {480, 320}\n";
-
-        stub(mockClientMetadata.getSdkVersion()).toReturn("1.15.2.2");
-        stub(mockAdResponse.getDspCreativeId()).toReturn("");
-        stub(mockClientMetadata.getDeviceModel()).toReturn("android");
-        stub(mockClientMetadata.getDeviceLocale()).toReturn(Locale.US);
-        stub(mockClientMetadata.getDeviceId()).toReturn("UDID");
-        stub(mockAdResponse.getNetworkType()).toReturn("unknown");
-
-        stub(mockAdResponse.getTimestamp()).toReturn(now.getTime());
-        stub(mockAdResponse.getAdType()).toReturn("interstitial");
-        stub(mockAdResponse.getWidth()).toReturn(480);
-        stub(mockAdResponse.getHeight()).toReturn(320);
-
-        subject = new AdReport("testAdUnit", mockClientMetadata, mockAdResponse);
-        assertThat(subject.toString()).isEqualTo(expectedParameters);
-    }
-
-    @Test
-    public void constructor_shouldHandleInvalidAdConfigurationValues() throws Exception {
-        String expectedParameters =
-                "sdk_version : null\n" +
-                        "creative_id : null\n" +
-                        "platform_version : "+ Integer.toString(Build.VERSION.SDK_INT) +"\n" +
-                        "device_model : null\n" +
-                        "ad_unit_id : testAdUnit\n" +
-                        "device_locale : null\n" +
-                        "device_id : null\n" +
-                        "network_type : null\n" +
-                        "platform : android\n" +
-                        "timestamp : null" + "\n" +
-                        "ad_type : null\n" +
-                        "ad_size : {0, 0}\n";
-
-        stub(mockClientMetadata.getSdkVersion()).toReturn(null);
-        stub(mockAdResponse.getDspCreativeId()).toReturn(null);
-        stub(mockClientMetadata.getDeviceLocale()).toReturn(null);
-        stub(mockClientMetadata.getDeviceId()).toReturn(null);
-        stub(mockAdResponse.getNetworkType()).toReturn(null);
-
-        stub(mockAdResponse.getTimestamp()).toReturn(-1L);
-        stub(mockAdResponse.getAdType()).toReturn(null);
-        stub(mockAdResponse.getWidth()).toReturn(null);
-        stub(mockAdResponse.getHeight()).toReturn(null);
-
-        subject = new AdReport("testAdUnit", mockClientMetadata, mockAdResponse);
-        assertThat(subject.toString()).isEqualTo(expectedParameters);
-    }
-
-    private String getCurrentDateTime() {
-        SimpleDateFormat dateFormat = new SimpleDateFormat("M/d/yy hh:mm:ss a z", Locale.US);
-        return dateFormat.format(now);
-    }
-}
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java b/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java
deleted file mode 100644
index c3d5625b..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java
+++ /dev/null
@@ -1,177 +0,0 @@
-package com.mopub.common;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.ResolveInfo;
-import android.net.Uri;
-import android.webkit.WebView;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.network.Networking;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Mockito.doCallRealMethod;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class BrowserWebViewClientTest {
-
-    private final WebView MOOT_WEB_VIEW = null;
-
-    private BrowserWebViewClient subject;
-    private Context context;
-    private MoPubBrowser mockMoPubBrowser;
-    private WebView mockWebView;
-
-    @Before
-    public void setUp() {
-        mockMoPubBrowser = mock(MoPubBrowser.class);
-        context = Robolectric.buildActivity(Activity.class).create().get().getApplicationContext();
-        mockWebView = mock(WebView.class);
-
-        doCallRealMethod().when(mockMoPubBrowser).setWebView(mockWebView);
-        doCallRealMethod().when(mockMoPubBrowser).getWebView();
-        when(mockMoPubBrowser.getApplicationContext()).thenReturn(context);
-
-        mockMoPubBrowser.setWebView(mockWebView);
-        subject = new BrowserWebViewClient(mockMoPubBrowser);
-        Networking.setUserAgentForTesting("user_agent");
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withHTTPUrl_shouldReturnTrue_shouldLoadUrl() {
-        final String url = "https://twitter.com";
-
-        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, url)).isTrue();
-        verify(mockWebView).loadUrl(url);
-        verify(mockMoPubBrowser, never()).finish();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withTelUrl_shouldReturnTrue_shouldFinish() {
-        final String url = "tel:123456789";
-
-        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, url)).isTrue();
-        verify(mockWebView, never()).loadUrl(anyString());
-        verify(mockMoPubBrowser).finish();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withDeeplinkUrl_shouldReturnTrue_shouldFinish() {
-        final String url = "twitter://timeline";
-
-        makeDeeplinkResolvable(url);
-
-        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, url)).isTrue();
-        verify(mockWebView, never()).loadUrl(anyString());
-        verify(mockMoPubBrowser).finish();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withDeeplinkPlusUrl_withSuccessfulPrimaryUrl_shouldReturnTrue_shouldFinish() {
-        final String primaryUrl = "twitter://timeline";
-        final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl);
-
-        makeDeeplinkResolvable(primaryUrl);
-
-        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, url)).isTrue();
-        verify(mockWebView, never()).loadUrl(anyString());
-        verify(mockMoPubBrowser).finish();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withDeeplinkPlusUrl_withFailedPrimaryUrl_withHTTPFallbackUrl_shouldReturnTrue_shouldLoadFallbackUrl_shouldNotFinish() {
-        final String primaryUrl = "missingApp://somePath";
-        final String fallbackUrl = "https://twitter.com/";
-        final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
-                + "&fallbackUrl=" + Uri.encode(fallbackUrl);
-
-        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, url)).isTrue();
-        verify(mockWebView).loadUrl(fallbackUrl);
-        verify(mockMoPubBrowser, never()).finish();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withDeeplinkPlusUrl_withFailedPrimaryUrl_withTelFallbackUrl_shouldReturnTrue_shouldFinish() {
-        final String primaryUrl = "missingApp://somePath";
-        final String fallbackUrl = "tel:123456789";
-        final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
-                + "&fallbackUrl=" + Uri.encode(fallbackUrl);
-
-        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, url)).isTrue();
-        verify(mockWebView, never()).loadUrl(anyString());
-        verify(mockMoPubBrowser, times(1)).finish();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withDeeplinkPlusUrl_withFailedPrimaryUrl_withDeeplinkFallbackUrl_shouldReturnTrue_shouldFinish() {
-        final String primaryUrl = "missingApp://somePath";
-        final String fallbackUrl = "twitter://timeline";
-        final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
-                + "&fallbackUrl=" + Uri.encode(fallbackUrl);
-
-        makeDeeplinkResolvable(fallbackUrl);
-
-        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, url)).isTrue();
-        verify(mockWebView, never()).loadUrl(anyString());
-        verify(mockMoPubBrowser, times(1)).finish();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withDeeplinkPlusUrl_withEncodedQueryString_shouldReturnTrue_shouldFinish() {
-        final String primaryUrl = "ebay://launch?nav=home&referrer=https%3A%2F%2Frover.ebay.com%2Frover%2F1%2F711-212056-53654-1%2F4%3Fmpt%3Dcache_buster%26ff6%3Dclick_id%26ff7%3Difa%26ff9%3Dsegment_name%26ff18%3Dcreative_name%26siteid%3D0%26ipn%3Dadmain2%26placement%3D418737%26ck%3D23932_main%26mpvc%3D";
-        final String fallbackUrl = "https://ebay.com";
-        final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
-                + "&fallbackUrl=" + Uri.encode(fallbackUrl);
-
-        makeDeeplinkResolvable(primaryUrl);
-
-        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, url)).isTrue();
-        verify(mockWebView, never()).loadUrl(anyString());
-        verify(mockMoPubBrowser, times(1)).finish();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withEmptyUrl_shouldReturnFalse_shouldDoNothing() {
-        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, "")).isFalse();
-        verify(mockWebView, never()).loadUrl(anyString());
-        verify(mockMoPubBrowser, never()).finish();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withNullUrl_shouldReturnFalse_shouldDoNothing() {
-        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, null)).isFalse();
-        verify(mockWebView, never()).loadUrl(anyString());
-        verify(mockMoPubBrowser, never()).finish();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withoutMatchingSupporedUrl_shouldReturnFalse_shouldDoNothing() {
-        final String url = "mopubscheme://close";
-        subject = new BrowserWebViewClient(mockMoPubBrowser);
-
-        assertThat(subject.shouldOverrideUrlLoading(MOOT_WEB_VIEW, url)).isFalse();
-        verify(mockWebView, never()).loadUrl(anyString());
-        verify(mockMoPubBrowser, never()).finish();
-    }
-
-    private void makeDeeplinkResolvable(String deeplink) {
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW,
-                Uri.parse(deeplink)), new ResolveInfo());
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java b/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java
deleted file mode 100644
index 28019855..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java
+++ /dev/null
@@ -1,170 +0,0 @@
-package com.mopub.common;
-
-import android.app.Activity;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import java.io.ByteArrayInputStream;
-import java.io.File;
-import java.io.InputStream;
-import java.util.concurrent.Semaphore;
-
-import static com.mopub.common.CacheService.DiskLruCacheGetListener;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class CacheServiceTest {
-
-    private Activity context;
-    private String key1;
-    private String data1;
-    private String getKey;
-    private byte[] getBytes;
-    private DiskLruCacheGetListener diskCacheGetListener;
-    private Semaphore semaphore;
-
-    @Before
-    public void setUp() throws Exception {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        key1 = "https://www.mopub.com/";
-        data1 = "image_data_1";
-
-        semaphore = new Semaphore(0);
-        diskCacheGetListener = mock(DiskLruCacheGetListener.class);
-        doAnswer(new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
-                Object[] args = invocationOnMock.getArguments();
-                CacheServiceTest.this.getKey = (String)args[0];
-                CacheServiceTest.this.getBytes = (byte[])args[1];
-                semaphore.release();
-                return null;
-            }
-        }).when(diskCacheGetListener).onComplete(anyString(), any(byte[].class));
-    }
-
-    @Test
-    public void initializeDiskCache_withNullCacheDirectory_shouldNotThrowNpe_shouldReturnFalse() {
-        Activity mockContext = mock(Activity.class);
-        when(mockContext.getCacheDir()).thenReturn(null);
-
-        assertThat(CacheService.initializeDiskCache(mockContext)).isFalse();
-    }
-
-    @Test
-    public void initializeCache_withValidContext_shouldCreateNewCachesIdempotently() throws Exception {
-        assertThat(CacheService.getDiskLruCache()).isNull();
-
-        CacheService.initialize(context);
-        DiskLruCache diskLruCache = CacheService.getDiskLruCache();
-        assertThat(diskLruCache).isNotNull();
-
-        CacheService.initialize(context);
-        assertThat(diskLruCache).isEqualTo(CacheService.getDiskLruCache());
-    }
-    
-    @Test
-    public void getDiskLruCacheDirectory_shouldReturnValidCacheDirectory() throws Exception {
-        File file = CacheService.getDiskCacheDirectory(context);
-        String expectedPath = context.getCacheDir().toString() + "/mopub-cache";
-        assertThat(file.getAbsolutePath()).isEqualTo(expectedPath);
-    }
-
-    @Test
-    public void diskLruCacheGet_whenPopulated_shouldReturnValue() throws Exception {
-        CacheService.initialize(context);
-        CacheService.putToDiskCache(key1, data1.getBytes());
-        assertThat(CacheService.getFromDiskCache(key1)).isEqualTo(data1.getBytes());
-    }
-
-    @Test
-    public void diskLruCacheGet_whenEmpty_shouldReturnNull() throws Exception {
-        CacheService.initialize(context);
-        assertCachesAreEmpty();
-        assertThat(CacheService.getFromDiskCache(key1)).isNull();
-    }
-
-    @Test
-    public void diskLruCacheAsyncGet_whenPopulated_shouldReturnValue() throws Exception {
-        CacheService.initialize(context);
-        assertCachesAreEmpty();
-        CacheService.putToDiskCache(key1, data1.getBytes());
-        CacheService.getFromDiskCacheAsync(key1, diskCacheGetListener);
-        semaphore.acquire();
-        assertThat(getKey).isEqualTo(key1);
-        assertThat(getBytes).isEqualTo(data1.getBytes());
-    }
-
-    @Test
-    public void diskLruCacheAsyncGet_whenEmpty_shouldReturnNull() throws Exception {
-        CacheService.initialize(context);
-        CacheService.getFromDiskCacheAsync(key1, diskCacheGetListener);
-        semaphore.acquire();
-        assertThat(getKey).isEqualTo(key1);
-        assertThat(getBytes).isNull();
-    }
-
-    @Test
-    public void diskLruCachePut_withEmptyStringKey_shouldPutCorrectly() throws Exception {
-        // this works because an empty string sha1 hashes to a valid key
-        CacheService.initialize(context);
-        CacheService.putToDiskCache("", data1.getBytes());
-        assertThat(CacheService.getFromDiskCache("")).isEqualTo(data1.getBytes());
-    }
-
-    @Test
-    public void diskLruCachePut_withNullKey_shouldNotPut() throws Exception {
-        // null value produces empty string key which is invalid for disk lru cache
-        CacheService.initialize(context);
-        assertCachesAreEmpty();
-        CacheService.putToDiskCache(null, data1.getBytes());
-        assertCachesAreEmpty();
-    }
-
-    @Test
-    public void createValidDiskLruCacheKey_withNullValue_shouldReturnEmptyString() throws Exception {
-        CacheService.initialize(context);
-        assertThat(CacheService.createValidDiskCacheKey(null)).isEqualTo("");
-    }
-
-    @Test
-    public void diskLruCacheAsyncPut_whenEmpty_shouldReturnNull() throws Exception {
-        CacheService.initialize(context);
-        CacheService.putToDiskCacheAsync(key1, data1.getBytes());
-        Thread.sleep(500);
-        assertThat(CacheService.getFromDiskCache(key1)).isEqualTo(data1.getBytes());
-    }
-
-    private static InputStream getInputStreamFromString(final String string) {
-        return spy(new ByteArrayInputStream(string.getBytes()));
-    }
-
-    public static void assertDiskCacheIsUninitialized() {
-        assertThat(CacheService.getDiskLruCache()).isNull();
-    }
-
-    public static void assertDiskCacheIsEmpty() {
-        assertThat(CacheService.getDiskLruCache()).isNotNull();
-        assertThat(CacheService.getDiskLruCache().size()).isEqualTo(0);
-    }
-
-    public static void assertCachesAreEmpty() {
-        assertDiskCacheIsEmpty();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java b/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java
deleted file mode 100644
index 31f38117..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java
+++ /dev/null
@@ -1,74 +0,0 @@
-package com.mopub.common;
-
-import android.app.Activity;
-import android.content.Context;
-import android.telephony.TelephonyManager;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.Shadows;
-import org.robolectric.annotation.Config;
-
-import static android.Manifest.permission.ACCESS_NETWORK_STATE;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class,
-        shadows = {MoPubShadowTelephonyManager.class})
-public class ClientMetadataTest {
-
-    public Activity activityContext;
-    private MoPubShadowTelephonyManager shadowTelephonyManager;
-
-    @Before
-    public void setUp() throws Exception {
-        activityContext = Robolectric.buildActivity(Activity.class).create().get();
-        Shadows.shadowOf(activityContext).grantPermissions(ACCESS_NETWORK_STATE);
-        shadowTelephonyManager = (MoPubShadowTelephonyManager)
-                Shadows.shadowOf((TelephonyManager) activityContext.getSystemService(Context.TELEPHONY_SERVICE));
-    }
-
-    // This has to be first or the singleton will be initialized by an earlier test. We should
-    // destroy the application between tests to get around this.
-    @Test
-    public void getWithoutContext_shouldReturnNull() {
-        final ClientMetadata clientMetadata = ClientMetadata.getInstance();
-        assertThat(clientMetadata).isNull();
-    }
-
-    @Test
-    public void getWithContext_shouldReturnInstance() {
-        final ClientMetadata clientMetadata = ClientMetadata.getInstance(activityContext);
-        assertThat(clientMetadata).isNotNull();
-    }
-
-    @Test
-    public void getWithoutContextAfterInit_shouldReturnInstance() {
-        ClientMetadata.getInstance(activityContext);
-        final ClientMetadata clientMetadata = ClientMetadata.getInstance();
-        assertThat(clientMetadata).isNotNull();
-    }
-
-    @Test
-    public void testCachedData_shouldBeAvailable() {
-        shadowTelephonyManager.setNetworkOperatorName("testNetworkOperatorName");
-        shadowTelephonyManager.setNetworkOperator("testNetworkOperator");
-        shadowTelephonyManager.setNetworkCountryIso("1");
-        shadowTelephonyManager.setSimCountryIso("1");
-
-        final ClientMetadata clientMetadata = ClientMetadata.getInstance(activityContext);
-        // Telephony manager data.
-        assertThat(clientMetadata.getNetworkOperatorForUrl()).isEqualTo("testNetworkOperator");
-        assertThat(clientMetadata.getNetworkOperatorName()).isEqualTo("testNetworkOperatorName");
-        assertThat(clientMetadata.getIsoCountryCode()).isEqualTo("1");
-
-        // Other cached data.
-        assertThat(clientMetadata.getDeviceId()).isNotNull().isNotEmpty();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/CloseableLayoutTest.java b/mopub-sdk/src/test/java/com/mopub/common/CloseableLayoutTest.java
deleted file mode 100644
index aab8e358..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/CloseableLayoutTest.java
+++ /dev/null
@@ -1,255 +0,0 @@
-package com.mopub.common;
-
-import android.app.Activity;
-import android.graphics.Canvas;
-import android.graphics.Rect;
-import android.view.MotionEvent;
-
-import com.mopub.common.CloseableLayout.ClosePosition;
-import com.mopub.common.CloseableLayout.OnCloseListener;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class CloseableLayoutTest {
-    private CloseableLayout subject;
-
-    @Mock private OnCloseListener mockCloseListener;
-
-    private MotionEvent closeRegionDown;
-    private MotionEvent closeRegionUp;
-    private MotionEvent closeRegionCancel;
-    private MotionEvent contentRegionDown;
-    private MotionEvent contentRegionUp;
-    private MotionEvent contentRegionCancel;
-
-    @Before
-    public void setup() {
-        Activity activity = Robolectric.buildActivity(Activity.class).create().get();
-        subject = new CloseableLayout(activity);
-        subject.setClosePosition(ClosePosition.TOP_RIGHT);
-
-        // Fake the close bounds, which allows us to set up close regions
-        subject.setCloseBounds(new Rect(100, 10, 110, 20));
-        closeRegionDown = MotionEvent.obtain(
-                100, 200, MotionEvent.ACTION_DOWN, 100, 10, 0);
-        closeRegionUp = MotionEvent.obtain(
-                100, 200, MotionEvent.ACTION_UP, 100, 10, 0);
-        closeRegionCancel = MotionEvent.obtain(
-                100, 200, MotionEvent.ACTION_CANCEL, 100, 10, 0);
-        contentRegionDown = MotionEvent.obtain(
-                100, 200, MotionEvent.ACTION_DOWN, 0, 0, 0);
-        contentRegionUp = MotionEvent.obtain(
-                100, 200, MotionEvent.ACTION_UP, 0, 0, 0);
-        contentRegionCancel = MotionEvent.obtain(
-                100, 200, MotionEvent.ACTION_CANCEL, 0, 0, 0);
-    }
-
-    @Test
-    public void setOnCloseListener_thenTouchCloseRegion_shouldCallOnClick() {
-        subject.setOnCloseListener(mockCloseListener);
-        subject.onTouchEvent(closeRegionDown);
-        subject.onTouchEvent(closeRegionUp);
-
-        verify(mockCloseListener).onClose();
-    }
-
-    @Test
-    public void setOnCloseListener_thenTouchContentRegion_shouldNotCallCloseListener() {
-        subject.setOnCloseListener(mockCloseListener);
-        subject.onTouchEvent(contentRegionDown);
-        subject.onTouchEvent(contentRegionUp);
-
-        verify(mockCloseListener, never()).onClose();
-    }
-
-    @Test
-    public void setCloseVisible_shouldToggleCloseDrawable() {
-        subject.setCloseVisible(false);
-        assertThat(subject.isCloseVisible()).isFalse();
-
-        subject.setCloseVisible(true);
-        assertThat(subject.isCloseVisible()).isTrue();
-    }
-
-    @Test
-    public void draw_shouldUpdateCloseBounds() {
-        subject.setLeft(0);
-        subject.setTop(0);
-        subject.setRight(100);
-        subject.setBottom(200);
-        subject.onSizeChanged(100, 200, 0, 0);
-
-        int expectedTop = 0;
-        int expectedLeft = (int) (100 - CloseableLayout.CLOSE_REGION_SIZE_DP);
-        Canvas canvas = new Canvas();
-        subject.draw(canvas);
-        Rect closeBounds = subject.getCloseBounds();
-        assertThat(closeBounds.top).isEqualTo(expectedTop);
-        assertThat(closeBounds.bottom).isEqualTo(
-                (int) (expectedTop + CloseableLayout.CLOSE_REGION_SIZE_DP));
-        assertThat(closeBounds.left).isEqualTo(expectedLeft);
-        assertThat(closeBounds.right).isEqualTo(
-                (int) (expectedLeft + CloseableLayout.CLOSE_REGION_SIZE_DP));
-    }
-
-    @Test
-    public void draw_withoutCloseBoundsChanged_shouldNotUpdateCloseBounds() {
-        Canvas canvas = new Canvas();
-        subject.draw(canvas);
-        Rect originalCloseBounds = subject.getCloseBounds();
-
-        subject.setCloseBounds(new Rect(40, 41, 42, 43));
-        subject.setCloseBoundChanged(false);
-        subject.draw(canvas);
-
-        assertThat(subject.getCloseBounds()).isEqualTo(originalCloseBounds);
-    }
-
-    @Test
-    public void onInterceptTouchEvent_closeRegionDown_shouldReturnTrue() {
-        boolean intercepted = subject.onInterceptTouchEvent(closeRegionDown);
-        assertThat(intercepted).isTrue();
-    }
-
-    @Test public void onInterceptTouchEvent_contentRegionDown_returnsTrue() {
-        boolean intercepted = subject.onInterceptTouchEvent(contentRegionDown);
-        assertThat(intercepted).isFalse();
-    }
-
-    @Test
-    public void
-    onTouchEvent_closeRegionDown_thenCloseRegionUp_shouldTogglePressedStateAfterDelay() {
-        assertThat(subject.isClosePressed()).isFalse();
-
-        subject.onTouchEvent(closeRegionDown);
-        assertThat(subject.isClosePressed()).isTrue();
-
-        subject.onTouchEvent(closeRegionUp);
-        assertThat(subject.isClosePressed()).isTrue();
-
-        Robolectric.getForegroundThreadScheduler().advanceToLastPostedRunnable();
-        assertThat(subject.isClosePressed()).isFalse();
-    }
-
-    @Test
-    public void onTouchEvent_closeRegionDown_thenCloseRegionCancel_shouldTogglePressedState() {
-        subject.onTouchEvent(closeRegionDown);
-        subject.onTouchEvent(closeRegionCancel);
-        assertThat(subject.isClosePressed()).isFalse();
-    }
-
-    @Test
-    public void onTouchEvent_closeRegionDown_thenContentRegionCancel_shouldTogglePressedState() {
-        subject.onTouchEvent(closeRegionDown);
-        subject.onTouchEvent(contentRegionCancel);
-        assertThat(subject.isClosePressed()).isFalse();
-    }
-
-    @Test
-    public void onTouchEvent_closeRegionDown_withCloseNotVisible_withSetCloseAlwaysInteractableFalse_shouldTogglePressedState() {
-        subject.setCloseAlwaysInteractable(false);
-        subject.setCloseVisible(false);
-        subject.onTouchEvent(closeRegionDown);
-        assertThat(subject.isClosePressed()).isFalse();
-    }
-
-    @Test
-    public void onTouchEvent_closeRegionDown_withCloseNotVisible_withSetCloseAlwaysInteractableDefault_shouldTogglePressedState() {
-        // The default of mCloseAlwaysInteractable is true
-        subject.setCloseVisible(false);
-        subject.onTouchEvent(closeRegionDown);
-        assertThat(subject.isClosePressed()).isTrue();
-    }
-
-    @Test
-    public void pointInCloseBounds_noSlop_shouldReturnValidValues() {
-        Rect bounds = new Rect();
-        bounds.left = 10;
-        bounds.right = 20;
-        bounds.top = 100;
-        bounds.bottom = 200;
-        subject.setCloseBounds(bounds);
-
-        assertThat(subject.pointInCloseBounds(9, 99, 0)).isFalse();
-        assertThat(subject.pointInCloseBounds(9, 100, 0)).isFalse();
-        assertThat(subject.pointInCloseBounds(9, 199, 0)).isFalse();
-        assertThat(subject.pointInCloseBounds(9, 200, 0)).isFalse();
-        assertThat(subject.pointInCloseBounds(10, 99, 0)).isFalse();
-        assertThat(subject.pointInCloseBounds(10, 100, 0)).isTrue();
-        assertThat(subject.pointInCloseBounds(10, 199, 0)).isTrue();
-        assertThat(subject.pointInCloseBounds(10, 200, 0)).isFalse();
-
-        assertThat(subject.pointInCloseBounds(19, 99, 0)).isFalse();
-        assertThat(subject.pointInCloseBounds(19, 100, 0)).isTrue();
-        assertThat(subject.pointInCloseBounds(19, 199, 0)).isTrue();
-        assertThat(subject.pointInCloseBounds(19, 200, 0)).isFalse();
-        assertThat(subject.pointInCloseBounds(20, 99, 0)).isFalse();
-        assertThat(subject.pointInCloseBounds(20, 100, 0)).isFalse();
-        assertThat(subject.pointInCloseBounds(20, 199, 0)).isFalse();
-        assertThat(subject.pointInCloseBounds(20, 200, 0)).isFalse();
-
-    }
-
-    @Test
-    public void pointInCloseBounds_slop_shouldReturnValidValues() {
-        int slop = 3;
-
-        // Same as above, but adjust given 3 px slop
-        Rect bounds = new Rect();
-        bounds.left = 13;
-        bounds.right = 17;
-        bounds.top = 103;
-        bounds.bottom = 197;
-        subject.setCloseBounds(bounds);
-
-        assertThat(subject.pointInCloseBounds(9, 99, slop)).isFalse();
-        assertThat(subject.pointInCloseBounds(9, 100, slop)).isFalse();
-        assertThat(subject.pointInCloseBounds(9, 199, slop)).isFalse();
-        assertThat(subject.pointInCloseBounds(9, 200, slop)).isFalse();
-        assertThat(subject.pointInCloseBounds(10, 99, slop)).isFalse();
-        assertThat(subject.pointInCloseBounds(10, 100, slop)).isTrue();
-        assertThat(subject.pointInCloseBounds(10, 199, slop)).isTrue();
-        assertThat(subject.pointInCloseBounds(10, 200, slop)).isFalse();
-
-        assertThat(subject.pointInCloseBounds(19, 99, slop)).isFalse();
-        assertThat(subject.pointInCloseBounds(19, 100, slop)).isTrue();
-        assertThat(subject.pointInCloseBounds(19, 199, slop)).isTrue();
-        assertThat(subject.pointInCloseBounds(19, 200, slop)).isFalse();
-        assertThat(subject.pointInCloseBounds(20, 99, slop)).isFalse();
-        assertThat(subject.pointInCloseBounds(20, 100, slop)).isFalse();
-        assertThat(subject.pointInCloseBounds(20, 199, slop)).isFalse();
-        assertThat(subject.pointInCloseBounds(20, 200, slop)).isFalse();
-    }
-
-    @Test
-    public void shouldAllowPress_shouldRespectSetCloseAlwaysInteractable() {
-        subject.setCloseVisible(false);
-        subject.setCloseAlwaysInteractable(false);
-        assertThat(subject.shouldAllowPress()).isFalse();
-
-        subject.setCloseVisible(false);
-        subject.setCloseAlwaysInteractable(true);
-        assertThat(subject.shouldAllowPress()).isTrue();
-
-        subject.setCloseVisible(true);
-        subject.setCloseAlwaysInteractable(false);
-        assertThat(subject.shouldAllowPress()).isTrue();
-
-        subject.setCloseVisible(true);
-        subject.setCloseAlwaysInteractable(true);
-        assertThat(subject.shouldAllowPress()).isTrue();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/CreativeOrientationTest.java b/mopub-sdk/src/test/java/com/mopub/common/CreativeOrientationTest.java
deleted file mode 100644
index 0ea85803..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/CreativeOrientationTest.java
+++ /dev/null
@@ -1,43 +0,0 @@
-package com.mopub.common;
-
-import org.junit.Test;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-public class CreativeOrientationTest {
-
-    @Test
-    public void fromHeader_nullParam_shouldBeUndefined() {
-        assertThat(CreativeOrientation.fromHeader(null)).isEqualTo(CreativeOrientation.UNDEFINED);
-    }
-
-    @Test
-    public void fromHeader_emptyParam_shouldBeUndefined() {
-        assertThat(CreativeOrientation.fromHeader("")).isEqualTo(CreativeOrientation.UNDEFINED);
-    }
-
-    @Test
-    public void fromHeader_withGarbage_shouldBeUndefined() {
-        assertThat(CreativeOrientation.fromHeader("p0rtr41t")).isEqualTo(CreativeOrientation.UNDEFINED);
-    }
-
-    @Test
-    public void fromHeader_lParam_shouldBeLandscape() {
-        assertThat(CreativeOrientation.fromHeader("l")).isEqualTo(CreativeOrientation.LANDSCAPE);
-    }
-
-    @Test
-    public void fromHeader_uppercaseL_shouldBeLandscape() {
-        assertThat(CreativeOrientation.fromHeader("L")).isEqualTo(CreativeOrientation.LANDSCAPE);
-    }
-
-    @Test
-    public void fromHeader_pParam_shouldBePortrait() {
-        assertThat(CreativeOrientation.fromHeader("p")).isEqualTo(CreativeOrientation.PORTRAIT);
-    }
-
-    @Test
-    public void fromHeader_uppercaseP_shouldBePortrait() {
-        assertThat(CreativeOrientation.fromHeader("P")).isEqualTo(CreativeOrientation.PORTRAIT);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/DoubleTimeTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/common/DoubleTimeTrackerTest.java
deleted file mode 100644
index ac6fcc64..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/DoubleTimeTrackerTest.java
+++ /dev/null
@@ -1,68 +0,0 @@
-package com.mopub.common;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class DoubleTimeTrackerTest {
-
-    @Mock DoubleTimeTracker.Clock mockClock;
-    DoubleTimeTracker subject;
-
-    @Before
-    public void setUp() throws Exception {
-        subject = new DoubleTimeTracker(mockClock);
-
-        when(mockClock.elapsedRealTime()).thenReturn(100L, 200L, 300L, 400L, 500L, 600L);
-    }
-
-    @Test
-    public void whenStartThenGetInterval_shouldReturn100() throws Exception {
-        subject.start();
-        assertThat(subject.getInterval()).isEqualTo(100d);
-    }
-
-    @Test
-    public void whenPauseBeforeStart_shouldReturn0() throws Exception {
-        subject.pause();
-        assertThat(subject.getInterval()).isEqualTo(0d);
-    }
-
-    @Test
-    public void whenStartPauseStart_thenGetInterval_shouldReturn200() throws Exception {
-        subject.start();
-        subject.pause();
-        subject.start();
-
-        assertThat(subject.getInterval()).isEqualTo(200d);
-    }
-
-    @Test
-    public void whenStartPauseStartPause_thenGetInterval_shouldReturn200() throws Exception {
-        subject.start();
-        subject.pause();
-        subject.start();
-        subject.pause();
-
-        assertThat(subject.getInterval()).isEqualTo(200d);
-    }
-
-    @Test
-    public void whenMultipleStart_shouldNotAffectInterval_shouldReturn100() throws Exception {
-        subject.start();
-        subject.start();
-        subject.start();
-
-        assertThat(subject.getInterval()).isEqualTo(100d);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/DownloadResponseTest.java b/mopub-sdk/src/test/java/com/mopub/common/DownloadResponseTest.java
deleted file mode 100644
index 93256457..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/DownloadResponseTest.java
+++ /dev/null
@@ -1,72 +0,0 @@
-package com.mopub.common;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.ResponseHeader;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
-
-import org.apache.http.HttpResponse;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import java.util.Locale;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.junit.Assert.assertArrayEquals;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class DownloadResponseTest {
-
-    DownloadResponse subject;
-    TestHttpResponseWithHeaders testHttpResponse;
-
-    @Before
-    public void setup() throws Exception {
-        testHttpResponse = new TestHttpResponseWithHeaders(200, "abcde".getBytes());
-        testHttpResponse.addHeader(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "testCustomEvent");
-        testHttpResponse.addHeader(ResponseHeader.CLICK_TRACKING_URL.getKey().toLowerCase(Locale.US), "https://example.com/");
-        testHttpResponse.addHeader(ResponseHeader.FAIL_URL.getKey().toUpperCase(Locale.US), "https://mopub.com/");
-        subject = new DownloadResponse(testHttpResponse);
-    }
-
-    @Test
-    public void constructor_withNullHttpEntity_shouldNotThrowNullPointerException() throws Exception {
-        HttpResponse mockHttpResponse = mock(HttpResponse.class);
-        when(mockHttpResponse.getEntity()).thenReturn(null);
-        when(mockHttpResponse.getStatusLine()).thenReturn(testHttpResponse.new TestStatusLine());
-
-        DownloadResponse downloadResponse = new DownloadResponse(mockHttpResponse);
-        assertThat(downloadResponse.getContentLength()).isEqualTo(0);
-        assertThat(downloadResponse.getByteArray()).isEmpty();
-    }
-
-    @Test
-    public void testGetByteArray() throws Exception {
-        assertArrayEquals("abcde".getBytes(), subject.getByteArray());
-    }
-
-    @Test
-    public void testGetStatusCode() throws Exception {
-        assertEquals(200, subject.getStatusCode());
-    }
-
-    @Test
-    public void testGetContentLength() throws Exception {
-        assertEquals("abcde".getBytes().length, subject.getContentLength());
-    }
-
-    @Test
-    public void testGetFirstHeader_caseInsensitive() throws Exception {
-        assertEquals("testCustomEvent", subject.getFirstHeader(ResponseHeader.CUSTOM_EVENT_NAME));
-        assertEquals("https://example.com/", subject.getFirstHeader(ResponseHeader.CLICK_TRACKING_URL));
-        assertEquals("https://mopub.com/", subject.getFirstHeader(ResponseHeader.FAIL_URL));
-        assertNull(subject.getFirstHeader(ResponseHeader.CUSTOM_EVENT_DATA));
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java b/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
deleted file mode 100644
index a54830ea..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
+++ /dev/null
@@ -1,316 +0,0 @@
-package com.mopub.common;
-
-import android.app.Activity;
-import android.content.Context;
-import android.os.Looper;
-
-import com.mopub.common.factories.MethodBuilderFactory;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.test.support.TestMethodBuilderFactory;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowLooper;
-
-import java.util.concurrent.Semaphore;
-
-import static com.mopub.common.util.Reflection.MethodBuilder;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class GpsHelperTest {
-    private MethodBuilder methodBuilder;
-    private Activity context;
-    private TestAdInfo adInfo;
-    private Semaphore semaphore;
-    private GpsHelper.GpsHelperListener semaphoreGpsHelperListener;
-    private Looper gpsHelperListenerCallbackLooper;
-
-    // This class emulates the AdInfo class returned from the Google Play Services
-    // AdvertisingIdClient.getAdvertisingIdInfo method; need to implement getters for reflection calls
-    public static final class TestAdInfo {
-        public static final String ADVERTISING_ID = "38400000-8cf0-11bd-b23e-10b96e40000d";
-        public static final boolean LIMIT_AD_TRACKING_ENABLED = true;
-
-        public String mAdId = ADVERTISING_ID;
-        public boolean mLimitAdTrackingEnabled = LIMIT_AD_TRACKING_ENABLED;
-
-        public String getId() {
-            return mAdId;
-        }
-
-        public boolean isLimitAdTrackingEnabled() {
-            return mLimitAdTrackingEnabled;
-        }
-    }
-
-    @Before
-    public void setup() {
-    	context = Robolectric.buildActivity(Activity.class).create().get();
-        adInfo = new TestAdInfo();
-
-        methodBuilder = TestMethodBuilderFactory.getSingletonMock();
-        when(methodBuilder.setStatic(any(Class.class))).thenReturn(methodBuilder);
-        when(methodBuilder.addParam(any(Class.class), any())).thenReturn(methodBuilder);
-
-        semaphore = new Semaphore(0);
-        semaphoreGpsHelperListener = new GpsHelper.GpsHelperListener() {
-            @Override
-            public void onFetchAdInfoCompleted() {
-                gpsHelperListenerCallbackLooper = Looper.myLooper();
-                semaphore.release();
-            }
-        };
-    }
-
-    @After
-    public void tearDown() throws Exception {
-        reset(methodBuilder);
-    }
-
-    @Test
-    public void isPlayServicesAvailable_whenGooglePlayServicesIsLinked_shouldReturnTrue() throws Exception {
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenReturn(GpsHelper.GOOGLE_PLAY_SUCCESS_CODE);
-        assertThat(GpsHelper.isPlayServicesAvailable(context)).isTrue();
-    }
-
-    @Test
-    public void isPlayServicesAvailable_whenGooglePlayServicesReturnsNonSuccessCode_shouldReturnFalse() throws Exception {
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenReturn(GpsHelper.GOOGLE_PLAY_SUCCESS_CODE + 1);
-        assertThat(GpsHelper.isPlayServicesAvailable(context)).isFalse();
-    }
-
-    @Test
-    public void isPlayServicesAvailable_whenGooglePlayServicesReturnsNull_shouldReturnFalse() throws Exception {
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenReturn(null);
-        assertThat(GpsHelper.isPlayServicesAvailable(context)).isFalse();
-    }
-
-    @Test
-    public void isPlayServicesAvailable_whenGooglePlayServicesIsNotLinked_shouldReturnFalse() throws Exception {
-        assertThat(GpsHelper.isPlayServicesAvailable(context)).isFalse();
-    }
-
-    @Test
-    public void fetchAdvertisingInfoAsync_whenGooglePlayServicesIsLinked_shouldInvokeCallbackOnMainLooper() throws Exception {
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenReturn(
-                adInfo,
-                adInfo.mAdId,
-                adInfo.mLimitAdTrackingEnabled
-        );
-
-        GpsHelper.fetchAdvertisingInfoAsync(context, semaphoreGpsHelperListener);
-        safeAcquireSemaphore();
-        assertThat(gpsHelperListenerCallbackLooper).isEqualTo(Looper.getMainLooper());
-    }
-
-    @Test
-    public void fetchAdvertisingInfoAsync_whenGooglePlayServicesIsLinked_shouldPopulateClientMetadata() throws Exception {
-        verifyCleanClientMetadata(context);
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenReturn(
-                GpsHelper.GOOGLE_PLAY_SUCCESS_CODE,
-                adInfo,
-                adInfo.mAdId,
-                adInfo.mLimitAdTrackingEnabled
-        );
-
-        GpsHelper.fetchAdvertisingInfoAsync(context, semaphoreGpsHelperListener);
-        safeAcquireSemaphore();
-        verifyClientMetadata(context, adInfo);
-    }
-
-    @Test
-    public void fetchAdvertisingInfoAsync_whenReflectedMethodCallThrows_shouldNotPopulateClientMetadata() throws Exception {
-        verifyCleanClientMetadata(context);
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenThrow(new Exception());
-
-        GpsHelper.fetchAdvertisingInfoAsync(context, semaphoreGpsHelperListener);
-        safeAcquireSemaphore();
-        verifyCleanClientMetadata(context);
-    }
-
-    @Test
-    public void fetchAdvertisingInfoAsync_whenReflectedMethodCallReturnsNull_shouldNotPopulateClientMetadata() throws Exception {
-        verifyCleanClientMetadata(context);
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenReturn(null);
-
-        GpsHelper.fetchAdvertisingInfoAsync(context, semaphoreGpsHelperListener);
-        safeAcquireSemaphore();
-        verifyCleanClientMetadata(context);
-    }
-
-    @Test
-    public void fetchAdvertisingInfoAsync_whenGooglePlayServicesIsLinkedAndClientMetadataIsClean_shouldPopulateClientMetadata() throws Exception {
-        verifyCleanClientMetadata(context);
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenReturn(
-                GpsHelper.GOOGLE_PLAY_SUCCESS_CODE,
-                adInfo,
-                adInfo.mAdId,
-                adInfo.mLimitAdTrackingEnabled
-        );
-
-        GpsHelper.fetchAdvertisingInfoAsync(context, semaphoreGpsHelperListener);
-        safeAcquireSemaphore();
-        verifyClientMetadata(context, adInfo);
-    }
-
-    @Test
-    public void fetchAdvertisingInfoAsync_whenGooglePlayServicesLinkedAndClientMetadataIsPopulated_shouldRePopulateClientMetadata() throws Exception {
-        verifyCleanClientMetadata(context);
-        populateAndVerifyClientMetadata(context, adInfo);
-        adInfo.mLimitAdTrackingEnabled = false;
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenReturn(
-                GpsHelper.GOOGLE_PLAY_SUCCESS_CODE,
-                adInfo,
-                adInfo.mAdId,
-                adInfo.mLimitAdTrackingEnabled
-        );
-
-        GpsHelper.fetchAdvertisingInfoAsync(context, semaphoreGpsHelperListener);
-        safeAcquireSemaphore();
-        verifyClientMetadata(context, adInfo);
-    }
-
-    @Test
-    public void fetchAdvertisingInfoAsync_whenGooglePlayServicesIsNotLinked_shouldNotPopulateClientMetadata() throws Exception {
-        verifyCleanClientMetadata(context);
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenReturn(
-                GpsHelper.GOOGLE_PLAY_SUCCESS_CODE + 1
-        );
-
-        GpsHelper.fetchAdvertisingInfoAsync(context, semaphoreGpsHelperListener);
-        safeAcquireSemaphore();
-        verifyCleanClientMetadata(context);
-    }
-
-    @Test
-    public void isClientMetadataPopulated_whenContainsAdvertisingIdKeyAndIsLimitAdTrackingEnabledKey_shouldReturnTrue() throws Exception {
-        verifyCleanClientMetadata(context);
-        populateAndVerifyClientMetadata(context, adInfo);
-        assertThat(GpsHelper.isClientMetadataPopulated(context)).isTrue();
-    }
-
-    @Test
-    public void isClientMetadataPopulated_whenClean_shouldReturnFalse() throws Exception {
-        verifyCleanClientMetadata(context);
-        assertThat(GpsHelper.isClientMetadataPopulated(context)).isFalse();
-    }
-
-    @Test
-    public void updateClientMetadata_whenPassingInValidAdInfoObject_shouldUpdateClientMetadata() throws Exception {
-        // Use the real MethodBuilderFactory for this test, not the mock one
-        // Most mocks are set by default in SdkTestRunner setup
-        MethodBuilderFactory.setInstance(new MethodBuilderFactory());
-        verifyCleanClientMetadata(context);
-        GpsHelper.updateClientMetadata(context, adInfo);
-        verifyClientMetadata(context, adInfo);
-    }
-
-    @Test
-    public void reflectedGetIsLimitAdTrackingEnabled_whenIsLimitAdTrackingEnabledIsSet_shouldReturnIsLimitAdTrackingEnabled() throws Exception {
-        MethodBuilderFactory.setInstance(new MethodBuilderFactory());
-        assertThat(GpsHelper.reflectedIsLimitAdTrackingEnabled(adInfo, false)).isEqualTo(adInfo.LIMIT_AD_TRACKING_ENABLED);
-    }
-
-    @Test
-    public void reflectedGetIsLimitAdTrackingEnabled_whenReflectedMethodCallThrows_shouldReturnDefaultValue() throws Exception {
-        when(methodBuilder.execute()).thenThrow(new Exception());
-        assertThat(GpsHelper.reflectedIsLimitAdTrackingEnabled(new Object(), false)).isFalse();
-        verify(methodBuilder).execute();
-        assertThat(GpsHelper.reflectedIsLimitAdTrackingEnabled(new Object(), true)).isTrue();
-        verify(methodBuilder, times(2)).execute();
-    }
-
-    @Test
-    public void reflectedGetIsLimitAdTrackingEnabled_whenReflectedMethodCallReturnsNull_shouldReturnDefaultValue() throws Exception {
-        when(methodBuilder.execute()).thenReturn(null);
-        assertThat(GpsHelper.reflectedIsLimitAdTrackingEnabled(new Object(), false)).isFalse();
-        verify(methodBuilder).execute();
-        assertThat(GpsHelper.reflectedIsLimitAdTrackingEnabled(new Object(), true)).isTrue();
-        verify(methodBuilder, times(2)).execute();
-    }
-
-    @Test
-    public void reflectedGetAdvertisingId_whenAdvertisingIdIsSet_shouldReturnAdvertisingId() throws Exception {
-        MethodBuilderFactory.setInstance(new MethodBuilderFactory());
-        assertThat(GpsHelper.reflectedGetAdvertisingId(adInfo, null)).isEqualTo(adInfo.ADVERTISING_ID);
-    }
-
-    @Test
-    public void reflectedGetAdvertisingId_whenReflectedMethodCallThrows_shouldReturnDefaultValue() throws Exception {
-        when(methodBuilder.execute()).thenThrow(new Exception());
-        assertThat(GpsHelper.reflectedGetAdvertisingId(new Object(), null)).isNull();
-        verify(methodBuilder).execute();
-        String defaultAdId = "TEST_DEFAULT";
-        assertThat(GpsHelper.reflectedGetAdvertisingId(new Object(), defaultAdId)).isEqualTo(defaultAdId);
-        verify(methodBuilder, times(2)).execute();
-    }
-
-    @Test
-    public void isLimitAdTrackingEnabled_whenGooglePlayServicesIsLinkedAndLimitAdTrackingIsCached_shouldReturnLimitAdTracking() throws Exception {
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenReturn(GpsHelper.GOOGLE_PLAY_SUCCESS_CODE);
-        SharedPreferencesHelper.getSharedPreferences(context)
-                .edit()
-                .putBoolean(GpsHelper.IS_LIMIT_AD_TRACKING_ENABLED_KEY, adInfo.LIMIT_AD_TRACKING_ENABLED)
-                .commit();
-        assertThat(GpsHelper.isLimitAdTrackingEnabled(context)).isEqualTo(adInfo.LIMIT_AD_TRACKING_ENABLED);
-    }
-
-    @Test
-    public void isLimitAdTrackingEnabled_whenGooglePlayServicesIsLinkedAndAdInfoIsNotCached_shouldReturnFalse() throws Exception {
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenReturn(GpsHelper.GOOGLE_PLAY_SUCCESS_CODE);
-        assertThat(GpsHelper.isLimitAdTrackingEnabled(context)).isFalse();
-    }
-
-    @Test
-    public void isLimitAdTrackingEnabled_whenGooglePlayServicesIsNotLinked_shouldReturnFalse() throws Exception {
-        assertThat(GpsHelper.isLimitAdTrackingEnabled(context)).isFalse();
-    }
-
-    static public void populateAndVerifyClientMetadata(Context context, TestAdInfo adInfo) {
-        ClientMetadata clientMetadata = ClientMetadata.getInstance(context);
-        clientMetadata.setAdvertisingInfo(adInfo.getId(), adInfo.isLimitAdTrackingEnabled());
-        verifyClientMetadata(context, adInfo);
-    }
-
-    private void safeAcquireSemaphore() throws Exception {
-        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
-        ShadowLooper.runUiThreadTasks();
-        semaphore.acquire();
-    }
-
-    static public void verifyClientMetadata(Context context, TestAdInfo adInfo) {
-        ClientMetadata clientMetadata = ClientMetadata.getInstance(context);
-        assertThat(clientMetadata.getDeviceId()).isEqualTo("ifa:" + adInfo.getId());
-        assertThat(clientMetadata.isDoNotTrackSet()).isEqualTo(adInfo.isLimitAdTrackingEnabled());
-    }
-
-    static public void verifyCleanClientMetadata(Context context) {
-        ClientMetadata clientMetadata = ClientMetadata.getInstance(context);
-        assertThat(clientMetadata.isAdvertisingInfoSet()).isFalse();
-    }
-}
-
diff --git a/mopub-sdk/src/test/java/com/mopub/common/HttpResponsesTest.java b/mopub-sdk/src/test/java/com/mopub/common/HttpResponsesTest.java
deleted file mode 100644
index 0d8ee5d9..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/HttpResponsesTest.java
+++ /dev/null
@@ -1,138 +0,0 @@
-package com.mopub.common;
-
-import android.graphics.Bitmap;
-
-import org.json.JSONArray;
-import org.json.JSONObject;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.Shadows;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-@RunWith(RobolectricTestRunner.class)
-public class HttpResponsesTest {
-
-    private DownloadResponse downloadResponse1;
-
-    @Before
-    public void setUp() throws Exception {
-        downloadResponse1 = mock(DownloadResponse.class);
-    }
-
-    @Test
-    public void asBitmap_shouldReturnBitmap() throws Exception {
-        String imageData = "fake_bitmap_data";
-        when(downloadResponse1.getByteArray()).thenReturn(imageData.getBytes());
-
-        final Bitmap bitmap = HttpResponses.asBitmap(downloadResponse1);
-
-        assertThat(bitmap).isNotNull();
-        assertThat(bitmap).isInstanceOf(Bitmap.class);
-        assertThat(Shadows.shadowOf(bitmap).getCreatedFromBytes()).isEqualTo(imageData.getBytes());
-    }
-
-    @Test
-    public void asJsonObject_withEmptyJsonString_shouldReturnEmptyJsonObjectAndCloseStream() throws Exception {
-        String jsonData = "{}";
-        when(downloadResponse1.getByteArray()).thenReturn(jsonData.getBytes());
-
-        final JSONObject expectedJsonObject = new JSONObject();
-
-        final JSONObject actualJsonObject = HttpResponses.asJsonObject(downloadResponse1);
-
-        assertThat(actualJsonObject).isEqualsToByComparingFields(expectedJsonObject);
-    }
-
-    @Test
-    public void asJsonObject_withShallowJsonString_shouldReturnPopulatedJsonObjectAndCloseStream() throws Exception {
-        String jsonData = "{\"key1\":\"value1\",\"key2\":\"2\",\"key3\":\"null\"}";
-        when(downloadResponse1.getByteArray()).thenReturn(jsonData.getBytes());
-
-        JSONObject expectedJsonObject = new JSONObject();
-        expectedJsonObject.put("key1", "value1");
-        expectedJsonObject.put("key2", 2);
-        expectedJsonObject.put("key3", JSONObject.NULL);
-
-        final JSONObject actualJsonObject = HttpResponses.asJsonObject(downloadResponse1);
-
-        assertThat(actualJsonObject).isEqualsToByComparingFields(expectedJsonObject);
-    }
-
-    @Test
-    public void asJsonObject_withDeepJsonString_shouldReturnPopulatedJsonObjectAndCloseStream() throws Exception {
-        String jsonData = "{\"key1\":\"value1\",\"key2\":[\"a\",\"b\"]}";
-        when(downloadResponse1.getByteArray()).thenReturn(jsonData.getBytes());
-
-        JSONObject expectedJsonObject = new JSONObject();
-        expectedJsonObject.put("key1", "value1");
-        final JSONArray jsonArray = new JSONArray();
-        jsonArray.put("a");
-        jsonArray.put("b");
-        expectedJsonObject.put("key2", jsonArray);
-
-        final JSONObject actualJsonObject = HttpResponses.asJsonObject(downloadResponse1);
-
-        assertThat(actualJsonObject).isEqualsToByComparingFields(expectedJsonObject);
-    }
-
-    @Test
-    public void asJsonObject_withMalformedJsonString_shouldReturnNullAndCloseStream() throws Exception {
-        String jsonData = "{whoops, forgot closing brace";
-        when(downloadResponse1.getByteArray()).thenReturn(jsonData.getBytes());
-
-        final JSONObject jsonObject = HttpResponses.asJsonObject(downloadResponse1);
-
-        assertThat(jsonObject).isNull();
-    }
-
-    @Test
-    public void asJsonObject_asResponseStringReturnsNull_shouldReturnNull() throws Exception {
-        when(downloadResponse1.getByteArray()).thenReturn(null);
-        assertThat(HttpResponses.asJsonObject(downloadResponse1)).isNull();
-    }
-
-    @Test
-    public void asJsonObject_withNullResponse_shouldReturnNull() throws Exception {
-        final JSONObject jsonObject = HttpResponses.asJsonObject(null);
-
-        assertThat(jsonObject).isNull();
-    }
-
-    @Test
-    public void asResponseString_withMultipleLines_shouldReturnResponseAndCloseStream() throws Exception {
-        String responseData = "1\n2\n3\n4";
-        when(downloadResponse1.getByteArray()).thenReturn(responseData.getBytes());
-
-        final String responseString = HttpResponses.asResponseString(downloadResponse1);
-
-        assertThat(responseString).isEqualTo(responseData);
-    }
-
-    @Test
-    public void asResponseString_shouldReturnResponseAndCloseStream() throws Exception {
-        String responseData = "response_string";
-        when(downloadResponse1.getByteArray()).thenReturn(responseData.getBytes());
-
-        final String responseString = HttpResponses.asResponseString(downloadResponse1);
-
-        assertThat(responseString).isEqualTo(responseData);
-    }
-
-    @Test
-    public void asResponseString_newStringThrowsException_shouldReturnNull() throws Exception {
-        when(downloadResponse1.getByteArray()).thenReturn(null);
-        assertThat(HttpResponses.asResponseString(downloadResponse1)).isNull();
-    }
-
-    @Test
-    public void asResponseString_withNullResponse_shouldReturnNull() throws Exception {
-        final String responseString = HttpResponses.asResponseString(null);
-
-        assertThat(responseString).isNull();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/LocationServiceTest.java b/mopub-sdk/src/test/java/com/mopub/common/LocationServiceTest.java
deleted file mode 100644
index 70c7ec4b..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/LocationServiceTest.java
+++ /dev/null
@@ -1,261 +0,0 @@
-package com.mopub.common;
-
-import android.app.Activity;
-import android.content.Context;
-import android.location.Location;
-import android.location.LocationManager;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
-import org.robolectric.Shadows;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowLocationManager;
-
-import static android.Manifest.permission.ACCESS_COARSE_LOCATION;
-import static android.Manifest.permission.ACCESS_FINE_LOCATION;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.robolectric.Shadows.shadowOf;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class LocationServiceTest {
-    private Activity activity;
-    private Location networkLocation;
-    private Location gpsLocation;
-    private ShadowLocationManager shadowLocationManager;
-
-    @Before
-    public void setUp() {
-        activity = Robolectric.buildActivity(Activity.class).create().get();
-
-        networkLocation = new Location("networkLocation");
-        networkLocation.setLatitude(3.1415926535);
-        networkLocation.setLongitude(-27.18281828459);
-        networkLocation.setAccuracy(10);
-        networkLocation.setTime(100);
-
-        gpsLocation = new Location("gpsLocation");
-        gpsLocation.setLatitude(-1.23456789);
-        gpsLocation.setLongitude(98.7654321);
-        gpsLocation.setAccuracy(1000);
-        gpsLocation.setTime(200);
-
-        shadowLocationManager = shadowOf(
-                (LocationManager) RuntimeEnvironment.application.getSystemService(Context.LOCATION_SERVICE));
-        shadowLocationManager.setLastKnownLocation(LocationManager.NETWORK_PROVIDER, networkLocation);
-        shadowLocationManager.setLastKnownLocation(LocationManager.GPS_PROVIDER, gpsLocation);
-    }
-
-    @Test
-    public void getLastKnownLocation_withFinePermission_shouldReturnMoreRecentLocation() {
-        Shadows.shadowOf(activity).grantPermissions(ACCESS_FINE_LOCATION);
-
-        final Location result =
-                LocationService.getLastKnownLocation(activity, 10, MoPub.LocationAwareness.NORMAL);
-
-        // gpsLocation has a more recent timestamp than networkLocation
-        assertThat(result).isEqualTo(gpsLocation);
-    }
-
-    @Test
-    public void getLastKnownLocation_withFinePermission_withLocationAwarenessTruncated_shouldTruncateLocationLatLon() {
-        Shadows.shadowOf(activity).grantPermissions(ACCESS_FINE_LOCATION);
-
-        final Location result =
-                LocationService.getLastKnownLocation(activity, 2, MoPub.LocationAwareness.TRUNCATED);
-
-        // expected more recent gpsLocation, truncated
-        assertThat(result.getLatitude()).isEqualTo(-1.23);
-        assertThat(result.getLongitude()).isEqualTo(98.77);
-        // accuracy should be unchanged
-        assertThat(result.getAccuracy()).isEqualTo(1000);
-    }
-
-    @Test
-    public void getLastKnownLocation_withOnlyCoarsePermission_shouldReturnNetworkLocation() {
-        Shadows.shadowOf(activity).grantPermissions(ACCESS_COARSE_LOCATION);
-
-        final Location result =
-                LocationService.getLastKnownLocation(activity, 10, MoPub.LocationAwareness.NORMAL);
-
-        // only has coarse location access, expected networkLocation
-        assertThat(result).isEqualTo(networkLocation);
-    }
-
-    @Test
-    public void getLastKnownLocation_withOnlyCoarsePermission_withLocationAwarenessTruncated_shouldTruncateLocationLatLon() {
-        Shadows.shadowOf(activity).grantPermissions(ACCESS_COARSE_LOCATION);
-
-        final Location result =
-                LocationService.getLastKnownLocation(activity, 2, MoPub.LocationAwareness.TRUNCATED);
-
-        // expected networkLocation, truncated
-        assertThat(result.getLatitude()).isEqualTo(3.14);
-        assertThat(result.getLongitude()).isEqualTo(-27.18);
-        // accuracy should be unchanged
-        assertThat(result.getAccuracy()).isEqualTo(10);
-    }
-
-    @Test
-    public void getLastKnownLocation_withNoLocationPermissions_shouldReturnNull() {
-        final Location result =
-                LocationService.getLastKnownLocation(activity, 10, MoPub.LocationAwareness.NORMAL);
-
-        assertThat(result).isNull();
-    }
-
-    @Test
-    public void getLastKnownLocation_withLocationAwarenessDisabled_shouldReturnNull() {
-        Shadows.shadowOf(activity).grantPermissions(ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION);
-
-        final Location result =
-                LocationService.getLastKnownLocation(activity, 10, MoPub.LocationAwareness.DISABLED);
-
-        assertThat(result).isNull();
-    }
-
-    @Test
-    public void getLocationFromProvider_withNetworkProvider_withCoarsePermission_shouldReturnNetworkLocation() {
-        Shadows.shadowOf(activity).grantPermissions(ACCESS_COARSE_LOCATION);
-
-        final Location result = LocationService.getLocationFromProvider(activity,
-                LocationService.ValidLocationProvider.NETWORK);
-
-        assertThat(result).isEqualTo(networkLocation);
-    }
-
-    @Test
-    public void getLocationFromProvider_withNetworkProvider_withFinePermission_shouldReturnNetworkLocation() {
-        Shadows.shadowOf(activity).grantPermissions(ACCESS_FINE_LOCATION);
-
-        final Location result = LocationService.getLocationFromProvider(activity,
-                LocationService.ValidLocationProvider.NETWORK);
-
-        assertThat(result).isEqualTo(networkLocation);
-    }
-
-    @Test
-    public void getLocationFromProvider_withNetworkProvider_withNoPermissions_shouldReturnNull() {
-        final Location result = LocationService.getLocationFromProvider(activity,
-                LocationService.ValidLocationProvider.NETWORK);
-
-        assertThat(result).isNull();
-    }
-
-    @Test
-    public void getLocationFromProvider_withGpsProvider_withCoarsePermission_shouldReturnNull() {
-        Shadows.shadowOf(activity).grantPermissions(ACCESS_COARSE_LOCATION);
-
-        final Location result = LocationService.getLocationFromProvider(activity,
-                LocationService.ValidLocationProvider.GPS);
-
-        assertThat(result).isNull();
-    }
-
-    @Test
-    public void getLocationFromProvider_withGpsProvider_withFinePermission_shouldReturnGpsLocation() {
-        Shadows.shadowOf(activity).grantPermissions(ACCESS_FINE_LOCATION);
-
-        final Location result = LocationService.getLocationFromProvider(activity,
-                LocationService.ValidLocationProvider.GPS);
-
-        assertThat(result).isEqualTo(gpsLocation);
-    }
-
-    @Test
-    public void getLocationFromProvider_withGpsProvider_withNoPermissions_shouldReturnNull() {
-        final Location result = LocationService.getLocationFromProvider(activity,
-                LocationService.ValidLocationProvider.GPS);
-
-        assertThat(result).isNull();
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void getLocationFromProvider_withNullContext_shouldThrowNPE() {
-        Shadows.shadowOf(activity).grantPermissions(ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION);
-
-        LocationService.getLocationFromProvider(null, LocationService.ValidLocationProvider.GPS);
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void getLocationFromProvider_withNullProvider_shouldThrowNPE() {
-        Shadows.shadowOf(activity).grantPermissions(ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION);
-
-        LocationService.getLocationFromProvider(activity, null);
-    }
-
-    @Test
-    public void getMostRecentValidLocation_shouldReturnMoreRecentLocation() {
-        assertThat(LocationService.getMostRecentValidLocation(networkLocation, gpsLocation))
-                .isEqualTo(gpsLocation);
-    }
-
-    @Test
-    public void getMostRecentValidLocation_withFirstLocationValid_withSecondLocationNull_shouldReturnFirstLocation() {
-        assertThat(LocationService.getMostRecentValidLocation(networkLocation, null))
-                .isEqualTo(networkLocation);
-    }
-
-    @Test
-    public void getMostRecentValidLocation_withSecondLocationValid_withFirstLocationNull_shouldReturnSecondLocation() {
-        assertThat(LocationService.getMostRecentValidLocation(null, gpsLocation))
-                .isEqualTo(gpsLocation);
-    }
-
-    @Test
-    public void getMostRecentValidLocation_withBothLocationsNull_shouldReturnNull() {
-        assertThat(LocationService.getMostRecentValidLocation(null, null)).isNull();
-    }
-
-    @Test
-    public void truncateLocationLatLon_shouldRoundLatitudeAndLongitude() {
-        LocationService.truncateLocationLatLon(networkLocation, 4);
-
-        assertThat(networkLocation.getLatitude()).isEqualTo(3.1416);
-        assertThat(networkLocation.getLongitude()).isEqualTo(-27.1828);
-        // accuracy should be unchanged
-        assertThat(networkLocation.getAccuracy()).isEqualTo(10);
-    }
-
-    @Test
-    public void truncateLocationLatLon_withZeroPrecision_shouldRemoveFractionalPortion() {
-        LocationService.truncateLocationLatLon(networkLocation, 0);
-
-        assertThat(networkLocation.getLatitude()).isEqualTo(3);
-        assertThat(networkLocation.getLongitude()).isEqualTo(-27);
-        assertThat(networkLocation.getAccuracy()).isEqualTo(10);
-    }
-
-    @Test
-    public void truncateLocationLatLon_withPrecisionLongerThanProvidedDecimalPoints_shouldNotChangeLocation() {
-        LocationService.truncateLocationLatLon(gpsLocation, 100);
-
-        assertThat(gpsLocation.getLatitude()).isEqualTo(-1.23456789);
-        assertThat(gpsLocation.getLongitude()).isEqualTo(98.7654321);
-        assertThat(gpsLocation.getAccuracy()).isEqualTo(1000);
-    }
-
-    @Test
-    public void truncateLocationLatLon_withNullLocation_shouldNotChangeLocation() {
-        LocationService.truncateLocationLatLon(null, 1);
-
-        assertThat(gpsLocation.getLatitude()).isEqualTo(-1.23456789);
-        assertThat(gpsLocation.getLongitude()).isEqualTo(98.7654321);
-        assertThat(gpsLocation.getAccuracy()).isEqualTo(1000);
-    }
-
-    @Test
-    public void truncateLocationLatLon_withNegativePrecision_shouldNotChangeLocation() {
-        LocationService.truncateLocationLatLon(gpsLocation, -1);
-
-        assertThat(gpsLocation.getLatitude()).isEqualTo(-1.23456789);
-        assertThat(gpsLocation.getLongitude()).isEqualTo(98.7654321);
-        assertThat(gpsLocation.getAccuracy()).isEqualTo(1000);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/MoPubBrowserTest.java b/mopub-sdk/src/test/java/com/mopub/common/MoPubBrowserTest.java
deleted file mode 100644
index eb92fcc5..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/MoPubBrowserTest.java
+++ /dev/null
@@ -1,70 +0,0 @@
-package com.mopub.common;
-
-import android.webkit.CookieSyncManager;
-import android.webkit.WebView;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class MoPubBrowserTest {
-
-    private MoPubBrowser subject;
-    private WebView mockWebView;
-
-    @Before
-    public void setUp() {
-        subject = Robolectric.buildActivity(MoPubBrowser.class).create().get();
-        CookieSyncManager.createInstance(subject);
-
-        mockWebView = mock(WebView.class);
-        subject.setWebView(mockWebView);
-    }
-
-    @Test
-    public void onPause_withIsFinishingTrue_shouldStopLoading_shouldLoadBlankUrl_shouldPauseWebView() throws Exception {
-        // We have to manually call #onPause here after #finish since the activity is not being managed by Android
-        // Even if the activity was being managed by Android we would likely have to call onPause since the test would
-        // complete before the UI thread had a chance to invoke the lifecycle events
-        subject.finish();
-        subject.onPause();
-
-        verify(mockWebView).stopLoading();
-        verify(mockWebView).loadUrl("");
-        verify(mockWebView).onPause();
-    }
-
-    @Test
-    public void onPause_withIsFinishingFalse_shouldPauseWebView() throws Exception {
-        subject.onPause();
-
-        verify(mockWebView, never()).stopLoading();
-        verify(mockWebView, never()).loadUrl("");
-        verify(mockWebView).onPause();
-    }
-
-    @Test
-    public void onResume_shouldResumeWebView() throws Exception {
-        subject.onResume();
-
-        verify(mockWebView).onResume();
-    }
-
-    @Test
-    public void onDestroy_shouldDestroyWebView() throws Exception {
-        subject.onDestroy();
-
-        verify(mockWebView).destroy();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/MoPubHttpUrlConnectionTest.java b/mopub-sdk/src/test/java/com/mopub/common/MoPubHttpUrlConnectionTest.java
deleted file mode 100644
index 869a0d60..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/MoPubHttpUrlConnectionTest.java
+++ /dev/null
@@ -1,120 +0,0 @@
-package com.mopub.common;
-
-import android.app.Activity;
-import android.content.Context;
-import android.webkit.WebView;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.network.Networking;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import java.net.HttpURLConnection;
-import java.net.MalformedURLException;
-import java.util.List;
-
-import static com.mopub.common.MoPubHttpUrlConnection.urlEncode;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class MoPubHttpUrlConnectionTest {
-    private static final String url = "https://www.mopub.com";
-    private String userAgent;
-
-    @Before
-    public void setUp() throws Exception {
-        Context context = Robolectric.buildActivity(Activity.class).create().get();
-        userAgent = new WebView(context).getSettings().getUserAgentString();
-        Networking.setUserAgentForTesting(userAgent);
-    }
-
-    @Test
-    public void getHttpUrlConnection_shouldReturnHttpUrlConnectionWithUserAgent() throws Exception {
-        HttpURLConnection urlConnection = MoPubHttpUrlConnection.getHttpUrlConnection(url);
-
-        List<String> userAgentHeaders = urlConnection.getRequestProperties().get("User-Agent");
-        assertThat(userAgentHeaders).containsExactly(userAgent);
-    }
-
-    @Test
-    public void getHttpUrlConnection_shouldSetConnectAndReadTimeoutTo10Seconds() throws Exception {
-        HttpURLConnection urlConnection = MoPubHttpUrlConnection.getHttpUrlConnection(url);
-
-        assertThat(urlConnection.getConnectTimeout()).isEqualTo(10000);
-        assertThat(urlConnection.getReadTimeout()).isEqualTo(10000);
-    }
-
-    @Test
-    public void getHttpUrlConnection_shouldProperlyEncodeUrl() throws Exception {
-        HttpURLConnection urlConnection = MoPubHttpUrlConnection.getHttpUrlConnection(
-                "https://host:80/doc|search?q=green robots#over 6\"");
-
-        assertThat(urlConnection.getURL().toString())
-                .isEqualTo("https://host:80/doc%7Csearch?q=green%20robots#over%206%22");
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void getHttpUrlConnection_withImproperlyEncodedUrl_shouldThrowIllegalArgumentException() throws Exception {
-        MoPubHttpUrlConnection.getHttpUrlConnection("https://user:passwrd@host:80/doc%7ZZZC");
-    }
-
-    @Test(expected = MalformedURLException.class)
-    public void getHttpUrlConnection_withMalformedUrl_shouldThrowMalformedUrlException() throws Exception {
-        MoPubHttpUrlConnection.getHttpUrlConnection("bad://host:80/doc|search?q=green robots#over 6\"");
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void getHttpUrlConnection_withNullUrl_shouldThrowNullPointerException() throws Exception {
-        MoPubHttpUrlConnection.getHttpUrlConnection(null);
-    }
-
-    @Test
-    public void urlEncode_shouldProperlyEncodeUrls() throws Exception {
-        // Example url borrowed from: https://developer.android.com/reference/java/net/URI.html
-        assertThat(urlEncode("https://user:passwrd@host:80/doc|search?q=green robots#over 6\""))
-                .isEqualTo("https://user:passwrd@host:80/doc%7Csearch?q=green%20robots#over%206%22");
-
-        assertThat(urlEncode("https://www.example.com/?key=value\"\"&key2=value2?"))
-                .isEqualTo("https://www.example.com/?key=value%22%22&key2=value2?");
-
-        assertThat(urlEncode("https://user:passwrd@host:80/doc?q=green#robots"))
-                .isEqualTo("https://user:passwrd@host:80/doc?q=green#robots");
-
-        assertThat(urlEncode("https://rtr.innovid.com/r1.5460f51c393410.96367393;cb=[timestamp]"))
-                .isEqualTo("https://rtr.innovid.com/r1.5460f51c393410.96367393;cb=%5Btimestamp%5D");
-    }
-
-    @Test
-    public void urlEncode_withProperlyEncodedUrl_shouldReturnUrlWithSameEncoding() throws Exception {
-        assertThat(urlEncode("https://user:passwrd@host:80/doc%7Csearch?q=green%20robots#over%206%22"))
-                .isEqualTo("https://user:passwrd@host:80/doc%7Csearch?q=green%20robots#over%206%22");
-
-        assertThat(urlEncode("https://www.mywebsite.com%2Fd+ocs%2Fenglish%2Fsite%2Fmybook.do%3Fkey%3Dvalue%3B%23fragment"))
-                .isEqualTo(
-                        "https://www.mywebsite.com%2Fd+ocs%2Fenglish%2Fsite%2Fmybook.do%3Fkey%3Dvalue%3B%23fragment");
-    }
-
-    @Test(expected = Exception.class)
-    public void urlEncode_withImproperlyEncodedUrl_shouldThowException() throws Exception {
-        urlEncode("https://user:passwrd@host:80/doc%7ZZZC");
-    }
-
-
-    @Test(expected = Exception.class)
-    public void urlEncode_withImproperlyEncodedUrlScheme_shouldThowException() throws Exception {
-        // From: https://developer.android.com/reference/java/net/URI.html
-        // A URI's host, port and scheme are not eligible for encoding and must not contain illegal characters.
-        urlEncode("https%3A%2F%2Fwww.mywebsite.com%2Fdocs%2Fenglish%2Fsite%2Fmybook.do%3Fkey%3Dvalue%3B%23fragment");
-    }
-
-    @Test(expected = Exception.class)
-    public void urlEncode_withMalformedUrl_shouldThrowException() throws Exception {
-        urlEncode("derp://www.mopub.com/");
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java b/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java
deleted file mode 100644
index b54eb796..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java
+++ /dev/null
@@ -1,188 +0,0 @@
-package com.mopub.common;
-
-import android.app.Activity;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.Reflection;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.mobileads.MoPubRewardedVideoListener;
-import com.mopub.mobileads.MoPubRewardedVideoManager;
-import com.mopub.mobileads.MoPubRewardedVideos;
-
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.powermock.core.classloader.annotations.PowerMockIgnore;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.powermock.modules.junit4.rule.PowerMockRule;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.powermock.api.mockito.PowerMockito.mock;
-import static org.powermock.api.mockito.PowerMockito.mockStatic;
-import static org.powermock.api.mockito.PowerMockito.verifyStatic;
-import static org.powermock.api.mockito.PowerMockito.when;
-
-// If you encounter a VerifyError with PowerMock then you need to set Android Studio to use
-// JDK version 7u79 or later. Go to File > Project Structure > [Platform Settings] > SDK to
-// change the JDK version.
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class, sdk = 21)
-@PowerMockIgnore({ "org.mockito.*", "org.robolectric.*", "android.*" })
-@PrepareForTest({MoPubRewardedVideoManager.class})
-public class MoPubTest {
-
-    private Activity mActivity;
-    private MediationSettings[] mMediationSettings;
-    private String mAdUnitId;
-    private MoPubRewardedVideoListener mockRewardedVideoListener;
-    private MoPubRewardedVideoManager.RequestParameters mockRequestParameters;
-
-    @Rule
-    public PowerMockRule rule = new PowerMockRule();
-
-    @Before
-    public void setup() {
-        mActivity = Robolectric.buildActivity(Activity.class).create().get();
-        mMediationSettings = new MediationSettings[0];
-        mAdUnitId = "123";
-
-        mockRewardedVideoListener = mock(MoPubRewardedVideoListener.class);
-        mockRequestParameters = mock(MoPubRewardedVideoManager.RequestParameters.class);
-
-        mockStatic(MoPubRewardedVideoManager.class);
-    }
-
-    @Test
-    public void initializeRewardedVideo_withReflection_shouldExist() throws Exception {
-        assertThat(Reflection.getDeclaredMethodWithTraversal(MoPubRewardedVideos.class,
-                "initializeRewardedVideo", Activity.class, MediationSettings[].class)).isNotNull();
-    }
-
-    @Test
-    public void initializeRewardedVideo_withValidParameters_shouldCallMoPubRewardedVideoManager() throws Exception {
-        MoPub.initializeRewardedVideo(mActivity, mMediationSettings);
-
-        verifyStatic();
-        MoPubRewardedVideoManager.init(mActivity, mMediationSettings);
-    }
-
-    @Test
-    public void updateActivity_withReflection_shouldExist() throws Exception {
-        assertThat(Reflection.getDeclaredMethodWithTraversal(MoPubRewardedVideoManager.class,
-                "updateActivity", Activity.class)).isNotNull();
-    }
-
-    @Test
-    public void updateActivity_withValidActivity_shouldCallMoPubRewardedVideoManager() throws Exception {
-        MoPub.updateActivity(mActivity);
-
-        verifyStatic();
-        MoPubRewardedVideoManager.updateActivity(mActivity);
-    }
-
-    @Test
-    public void setRewardedVideoListener_withReflection_shouldExist() throws Exception {
-        assertThat(Reflection.getDeclaredMethodWithTraversal(MoPubRewardedVideos.class,
-                "setRewardedVideoListener", MoPubRewardedVideoListener.class)).isNotNull();
-    }
-
-    @Test
-    public void setRewardedVideoListener_withValidListener_shouldSetMoPubRewardedVideoManagerListener() throws Exception {
-        MoPub.setRewardedVideoListener(mockRewardedVideoListener);
-
-        verifyStatic();
-        MoPubRewardedVideoManager.setVideoListener(mockRewardedVideoListener);
-    }
-
-    @Test
-    public void setRewardedVideoListener_withNullListener_shouldCallMoPubRewardedVideoManagerListenerWithNull() throws Exception {
-        MoPub.setRewardedVideoListener(null);
-
-        verifyStatic();
-        MoPubRewardedVideoManager.setVideoListener(null);
-    }
-
-    @Test
-    public void loadRewardedVideo_withReflection_shouldExist() throws Exception {
-        assertThat(Reflection.getDeclaredMethodWithTraversal(MoPubRewardedVideos.class,
-                "loadRewardedVideo", String.class,
-                MoPubRewardedVideoManager.RequestParameters.class,
-                MediationSettings[].class)).isNotNull();
-    }
-
-    @Test
-    public void loadRewardedVideo_withTwoNonNullParameters_shouldCallMoPubRewardedVideoManager() throws Exception {
-        MoPub.loadRewardedVideo(mAdUnitId, mMediationSettings);
-
-        verifyStatic();
-        MoPubRewardedVideoManager.loadVideo(mAdUnitId, null, mMediationSettings);
-    }
-
-    @Test
-    public void loadRewardedVideo_withTwoParameters_withNullMediationSettings_shouldCallMoPubRewardedVideoManager() throws Exception {
-        MoPub.loadRewardedVideo(mAdUnitId, (MediationSettings[]) null);
-
-        verifyStatic();
-        MoPubRewardedVideoManager.loadVideo(mAdUnitId, null, (MediationSettings[]) null);
-    }
-
-    @Test
-    public void loadRewardedVideo_withThreeNonNullParameters_shouldCallMoPubRewardedVideoManager() throws Exception {
-        MoPub.loadRewardedVideo(mAdUnitId, mockRequestParameters, mMediationSettings);
-
-        verifyStatic();
-        MoPubRewardedVideoManager.loadVideo(mAdUnitId, mockRequestParameters, mMediationSettings);
-    }
-
-    @Test
-    public void loadRewardedVideo_withThreeParameters_withNullRequestParameters_shouldCallMoPubRewardedVideoManager() throws Exception {
-        MoPub.loadRewardedVideo(mAdUnitId, null, mMediationSettings);
-
-        verifyStatic();
-        MoPubRewardedVideoManager.loadVideo(mAdUnitId, null, mMediationSettings);
-    }
-
-    @Test
-    public void loadRewardedVideo_withThreeParameters_withNullRequestParameters_withNullMediationSettings_shouldCallMoPubRewardedVideoManager() throws Exception {
-        MoPub.loadRewardedVideo(mAdUnitId, null, (MediationSettings[]) null);
-
-        verifyStatic();
-        MoPubRewardedVideoManager.loadVideo(mAdUnitId, null, (MediationSettings[]) null);
-    }
-
-    @Test
-    public void hasRewardedVideo_withReflection_shouldExist() throws Exception {
-        assertThat(Reflection.getDeclaredMethodWithTraversal(MoPubRewardedVideos.class,
-                "hasRewardedVideo", String.class)).isNotNull();
-    }
-
-    @Test
-    public void hasRewardedVideo_withValidAdUnitId_shouldReturnTrue() throws Exception {
-        when(MoPubRewardedVideoManager.hasVideo(mAdUnitId)).thenReturn(true);
-
-        assertThat(MoPub.hasRewardedVideo(mAdUnitId)).isTrue();
-    }
-
-    @Test
-    public void hasRewardedVideo_withInvalidAdUnitId_shouldReturnFalse() throws Exception {
-        assertThat(MoPub.hasRewardedVideo("fakeId")).isFalse();
-    }
-
-    @Test
-    public void showRewardedVideo_withReflection_shouldExist() throws Exception {
-        assertThat(Reflection.getDeclaredMethodWithTraversal(MoPubRewardedVideos.class,
-                "showRewardedVideo", String.class)).isNotNull();
-    }
-
-    @Test
-    public void showRewardedVideo_withNonNullAdUnitId_shouldCallMoPubRewardedVideoManager() throws Exception {
-        MoPub.showRewardedVideo(mAdUnitId);
-
-        verifyStatic();
-        MoPubRewardedVideoManager.showVideo(mAdUnitId);
-    }
-
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/PreconditionsTest.java b/mopub-sdk/src/test/java/com/mopub/common/PreconditionsTest.java
deleted file mode 100644
index 2e021297..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/PreconditionsTest.java
+++ /dev/null
@@ -1,308 +0,0 @@
-package com.mopub.common;
-
-
-import com.mopub.common.Preconditions.NoThrow;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.fail;
-
-@RunWith(RobolectricTestRunner.class)
-public class PreconditionsTest {
-
-    @Before
-    public void setUp() {
-        NoThrow.setStrictMode(false);
-    }
-    
-    @Test
-    public void checkArgument_success_shouldNotThrow() {
-        Preconditions.checkArgument(true);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void checkArgument_failure_shouldThrowIllegalArgumentException() {
-        Preconditions.checkArgument(false);
-    }
-
-    @Test
-    public void checkArgument_failure_withMessage_shouldThrowIllegalArgumentException() {
-        try {
-            Preconditions.checkArgument(false, "message");
-            fail("no exception thrown");
-        } catch (IllegalArgumentException exception) {
-            assertThat(exception.getMessage()).isEqualTo("message");
-        }
-    }
-
-    @Test
-    public void checkArgument_failure_withNullMessage_shouldThrowIllegalArgumentException() {
-        try {
-            Preconditions.checkArgument(false, null);
-            fail("no exception thrown");
-        } catch (IllegalArgumentException exception) {
-            assertThat(exception.getMessage()).isEqualTo("null");
-        }
-    }
-
-    @Test
-    public void checkArgument_failure_withComplexMessage_shouldThrowIllegalArgumentException() {
-        try {
-            Preconditions.checkArgument(false, "I %s fail", "should");
-            fail("no exception thrown");
-        } catch (IllegalArgumentException exception) {
-            assertThat(exception.getMessage()).isEqualTo("I should fail");
-        }
-    }
-
-    @Test
-    public void checkState_success_shouldNotThrow() {
-        Preconditions.checkArgument(true);
-    }
-
-    @Test(expected = IllegalStateException.class)
-    public void checkState_failure_shouldThrowIllegalStateException() {
-        Preconditions.checkState(false);
-    }
-
-    @Test
-    public void checkState_failure_withMessage_shouldThrowIllegalStateException() {
-        try {
-            Preconditions.checkState(false, "message");
-            fail("no exception thrown");
-        } catch (IllegalStateException exception) {
-            assertThat(exception.getMessage()).isEqualTo("message");
-        }
-    }
-
-    @Test
-    public void checkState_failure_withNullMessage_shouldThrowIllegalStateException() {
-        try {
-            Preconditions.checkState(false, null);
-            fail("no exception thrown");
-        } catch (IllegalStateException exception) {
-            assertThat(exception.getMessage()).isEqualTo("null");
-        }
-    }
-
-    @Test
-    public void checkState_failure_withComplexMessage_shouldThrowIllegalStateException() {
-        try {
-            Preconditions.checkState(false, "I %s fail", "should");
-            fail("no exception thrown");
-        } catch (IllegalStateException exception) {
-            assertThat(exception.getMessage()).isEqualTo("I should fail");
-        }
-    }
-
-    @Test
-    public void checkNotNull_success_shouldNotThrow() {
-        Preconditions.checkNotNull(new Object());
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void checkNotNull_failure_shouldThrowNullPointerException() {
-        Preconditions.checkNotNull(null);
-    }
-
-    @Test
-    public void checkNotNull_failure_withMessage_shouldThrowNullPointerException() {
-        try {
-            Preconditions.checkNotNull(null, "message");
-            fail("no exception thrown");
-        } catch (NullPointerException exception) {
-            assertThat(exception.getMessage()).isEqualTo("message");
-        }
-    }
-
-    @Test
-    public void checkNotNull_failure_withNullMessage_shouldThrowNullPointerException() {
-        try {
-            Preconditions.checkNotNull(null, null);
-            fail("no exception thrown");
-        } catch (NullPointerException exception) {
-            assertThat(exception.getMessage()).isEqualTo("null");
-        }
-    }
-
-    @Test
-    public void checkNotNull_failure_withComplexMessage_shouldThrowNullPointerException() {
-        try {
-            Preconditions.checkNotNull(null, "I %s fail", "should");
-            fail("no exception thrown");
-        } catch (NullPointerException exception) {
-            assertThat(exception.getMessage()).isEqualTo("I should fail");
-        }
-    }
-
-    @Test
-    public void checkUiThread_success_shouldNotThrow() {
-        Preconditions.checkUiThread();
-    }
-
-    @Test
-    public void noThrow_checkArgument_success_shouldReturnTrue() {
-        assertThat(NoThrow.checkArgument(true)).isTrue();
-    }
-
-    @Test
-    public void noThrow_checkArgument_failure_shouldReturnFalse() {
-        assertThat(NoThrow.checkArgument(false)).isFalse();
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void noThrow_strictMode_checkArgument_failure_shouldThrowIllegalArgumentException() {
-        NoThrow.setStrictMode(true);
-        NoThrow.checkArgument(false);
-    }
-
-    @Test
-    public void noThrow_strictMode_checkArgument_failure_withMessage_shouldThrowIllegalArgumentException() {
-        NoThrow.setStrictMode(true);
-        try {
-            NoThrow.checkArgument(false, "message");
-            fail("no exception thrown");
-        } catch (IllegalArgumentException exception) {
-            assertThat(exception.getMessage()).isEqualTo("message");
-        }
-    }
-
-    @Test
-    public void noThrow_strictMode_checkArgument_failure_withNullMessage_shouldThrowIllegalArgumentException() {
-        NoThrow.setStrictMode(true);
-        try {
-            NoThrow.checkArgument(false, null);
-            fail("no exception thrown");
-        } catch (IllegalArgumentException exception) {
-            assertThat(exception.getMessage()).isEqualTo("null");
-        }
-    }
-
-    @Test
-    public void noThrow_strictMode_checkArgument_failure_withComplexMessage_shouldThrowIllegalArgumentException() {
-        NoThrow.setStrictMode(true);
-        try {
-            NoThrow.checkArgument(false, "I %s fail", "should");
-            fail("no exception thrown");
-        } catch (IllegalArgumentException exception) {
-            assertThat(exception.getMessage()).isEqualTo("I should fail");
-        }
-    }
-
-    @Test
-    public void noThrow_checkState_success_shouldReturnTrue() {
-        assertThat(NoThrow.checkArgument(true)).isTrue();
-    }
-
-    @Test
-    public void noThrow_checkState_failure_shouldReturnFalse() {
-        assertThat(NoThrow.checkState(false)).isFalse();
-    }
-
-    @Test(expected = IllegalStateException.class)
-    public void noThrow_strictMode_checkState_failure_shouldThrowIllegalStateException() {
-        NoThrow.setStrictMode(true);
-        NoThrow.checkState(false);
-    }
-
-    @Test
-    public void noThrow_strictMode_checkState_failure_withMessage_shouldThrowIllegalStateException() {
-        NoThrow.setStrictMode(true);
-        try {
-            NoThrow.checkState(false, "message");
-            fail("no exception thrown");
-        } catch (IllegalStateException exception) {
-            assertThat(exception.getMessage()).isEqualTo("message");
-        }
-    }
-
-    @Test
-    public void noThrow_strictMode_checkState_failure_withNullMessage_shouldThrowIllegalStateException() {
-        NoThrow.setStrictMode(true);
-        try {
-            NoThrow.checkState(false, null);
-            fail("no exception thrown");
-        } catch (IllegalStateException exception) {
-            assertThat(exception.getMessage()).isEqualTo("null");
-        }
-    }
-
-    @Test
-    public void noThrow_strictMode_checkState_failure_withComplexMessage_shouldThrowIllegalStateException() {
-        NoThrow.setStrictMode(true);
-        try {
-            NoThrow.checkState(false, "I %s fail", "should");
-            fail("no exception thrown");
-        } catch (IllegalStateException exception) {
-            assertThat(exception.getMessage()).isEqualTo("I should fail");
-        }
-    }
-
-    @Test
-    public void noThrow_checkNotNull_success_shouldReturnTrue() {
-        assertThat(NoThrow.checkNotNull(new Object())).isTrue();
-    }
-
-    @Test
-    public void noThrow_checkNotNull_failure_shouldReturnFalse() {
-        assertThat(NoThrow.checkNotNull(null)).isFalse();
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void noThrow_strictMode_checkNotNull_failure_shouldThrowNullPointerException() {
-        NoThrow.setStrictMode(true);
-        NoThrow.checkNotNull(null);
-    }
-
-    @Test
-    public void noThrow_strictMode_checkNotNull_failure_withMessage_shouldThrowNullPointerException() {
-        NoThrow.setStrictMode(true);
-        try {
-            NoThrow.checkNotNull(null, "message");
-            fail("no exception thrown");
-        } catch (NullPointerException exception) {
-            assertThat(exception.getMessage()).isEqualTo("message");
-        }
-    }
-
-    @Test
-    public void noThrow_strictMode_checkNotNull_failure_withNullMessage_shouldThrowNullPointerException() {
-        NoThrow.setStrictMode(true);
-        try {
-            NoThrow.checkNotNull(null, null);
-            fail("no exception thrown");
-        } catch (NullPointerException exception) {
-            assertThat(exception.getMessage()).isEqualTo("null");
-        }
-    }
-
-    @Test
-    public void noThrow_strictMode_checkNotNull_failure_withComplexMessage_shouldThrowNullPointerException() {
-        NoThrow.setStrictMode(true);
-        try {
-            NoThrow.checkNotNull(null, "I %s fail", "should");
-            fail("no exception thrown");
-        } catch (NullPointerException exception) {
-            assertThat(exception.getMessage()).isEqualTo("I should fail");
-        }
-    }
-
-    @Test
-    public void noThrow_checkUiThread_success_shouldReturnTrue() {
-        assertThat(NoThrow.checkUiThread()).isTrue();
-    }
-
-    @Test
-    public void checkArgument_failure_withInvalidMessage_shouldThrowIllegalArgumentException() {
-        try {
-            Preconditions.checkArgument(false, "messages: ", "message1", "message2");
-            fail("no exception thrown");
-        } catch (IllegalArgumentException exception) {
-            assertThat(exception.getMessage()).isEqualTo("messages: ");
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java b/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java
deleted file mode 100644
index bde01702..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java
+++ /dev/null
@@ -1,133 +0,0 @@
-package com.mopub.common;
-
-import android.net.Uri;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import static com.mopub.common.UrlAction.HANDLE_MOPUB_SCHEME;
-import static com.mopub.common.UrlAction.IGNORE_ABOUT_SCHEME;
-import static com.mopub.common.UrlAction.HANDLE_PHONE_SCHEME;
-import static com.mopub.common.UrlAction.OPEN_NATIVE_BROWSER;
-import static com.mopub.common.UrlAction.OPEN_APP_MARKET;
-import static com.mopub.common.UrlAction.OPEN_IN_APP_BROWSER;
-import static com.mopub.common.UrlAction.HANDLE_SHARE_TWEET;
-import static com.mopub.common.UrlAction.FOLLOW_DEEP_LINK_WITH_FALLBACK;
-import static com.mopub.common.UrlAction.FOLLOW_DEEP_LINK;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class UrlActionTest {
-
-    @Test
-    public void handleMopubScheme_shouldBeCaseInsensitive() throws Exception {
-        assertUrlActionMatching(HANDLE_MOPUB_SCHEME, "mopub:", true);
-        assertUrlActionMatching(HANDLE_MOPUB_SCHEME, "MoPuB:", true);
-    }
-
-    @Test
-    public void ignoreAboutScheme_shouldBeCaseInsensitive() throws Exception {
-        assertUrlActionMatching(IGNORE_ABOUT_SCHEME, "about:", true);
-        assertUrlActionMatching(IGNORE_ABOUT_SCHEME, "AbOuT:", true);
-    }
-
-    @Test
-    public void handlePhoneScheme_shouldBeCaseInsensitive() throws Exception {
-        assertUrlActionMatching(HANDLE_PHONE_SCHEME, "tel:", true);
-        assertUrlActionMatching(HANDLE_PHONE_SCHEME, "TeL:", true);
-        assertUrlActionMatching(HANDLE_PHONE_SCHEME, "voicemail:", true);
-        assertUrlActionMatching(HANDLE_PHONE_SCHEME, "VoIcEmAiL:", true);
-        assertUrlActionMatching(HANDLE_PHONE_SCHEME, "sms:", true);
-        assertUrlActionMatching(HANDLE_PHONE_SCHEME, "SmS:", true);
-        assertUrlActionMatching(HANDLE_PHONE_SCHEME, "mailto:", true);
-        assertUrlActionMatching(HANDLE_PHONE_SCHEME, "MaIlTo:", true);
-        assertUrlActionMatching(HANDLE_PHONE_SCHEME, "geo:", true);
-        assertUrlActionMatching(HANDLE_PHONE_SCHEME, "GeO:", true);
-        assertUrlActionMatching(HANDLE_PHONE_SCHEME, "google.streetview:", true);
-        assertUrlActionMatching(HANDLE_PHONE_SCHEME, "GoOgLe.StReEtViEw:", true);
-                
-    }
-
-    @Test
-    public void openNativeBrowser_shouldBeCaseInsensitive() throws Exception {
-        assertUrlActionMatching(OPEN_NATIVE_BROWSER, "mopubnativebrowser:", true);
-        assertUrlActionMatching(OPEN_NATIVE_BROWSER, "MoPuBnAtIvEbRoWsEr:", true);
-    }
-
-    @Test
-    public void openAppMarket_shouldBeCaseInsensitive() throws Exception {
-        assertUrlActionMatching(OPEN_APP_MARKET, "https://play.google.com", true);
-        assertUrlActionMatching(OPEN_APP_MARKET, "https://PlAy.GoOgLe.CoM", true);
-        assertUrlActionMatching(OPEN_APP_MARKET, "https://market.android.com", true);
-        assertUrlActionMatching(OPEN_APP_MARKET, "https://MaRkEt.AnDrOiD.CoM", true);
-        assertUrlActionMatching(OPEN_APP_MARKET, "market:", true);
-        assertUrlActionMatching(OPEN_APP_MARKET, "MaRkEt:", true);
-        assertUrlActionMatching(OPEN_APP_MARKET, "play.google.com/", true);
-        assertUrlActionMatching(OPEN_APP_MARKET, "PlAy.GoOgLe.CoM/", true);
-        assertUrlActionMatching(OPEN_APP_MARKET, "market.android.com/", true);
-        assertUrlActionMatching(OPEN_APP_MARKET, "MaRkEt.AnDrOiD.CoM/", true);
-    }
-
-    @Test
-    public void openInAppBrowser_shouldBeCaseInsensitive() throws Exception {
-        assertUrlActionMatching(OPEN_IN_APP_BROWSER, "http:", true);
-        assertUrlActionMatching(OPEN_IN_APP_BROWSER, "HtTp:", true);
-        assertUrlActionMatching(OPEN_IN_APP_BROWSER, "https:", true);
-        assertUrlActionMatching(OPEN_IN_APP_BROWSER, "HtTpS:", true);
-    }
-
-    @Test
-    public void handleShareTweet_shouldBeCaseInsensitive() throws Exception {
-        assertUrlActionMatching(HANDLE_SHARE_TWEET, "mopubshare://tweet", true);
-        assertUrlActionMatching(HANDLE_SHARE_TWEET, "MoPuBsHaRe://tweet", true);
-        assertUrlActionMatching(HANDLE_SHARE_TWEET, "mopubshare://TwEeT", true);
-    }
-
-    @Test
-    public void followDeepLinkWithFallback_shouldBeCaseInsensitive() throws Exception {
-        assertUrlActionMatching(FOLLOW_DEEP_LINK_WITH_FALLBACK, "deeplink+:", true);
-        assertUrlActionMatching(FOLLOW_DEEP_LINK_WITH_FALLBACK, "DeEpLiNk+:", true);
-    }
-
-    @Test
-    public void followDeepLink_shouldBeCaseInsensitive() throws Exception {
-        assertUrlActionMatching(FOLLOW_DEEP_LINK, "myapp://", true);
-        assertUrlActionMatching(FOLLOW_DEEP_LINK, "MyApP://", true);
-        assertUrlActionMatching(FOLLOW_DEEP_LINK, "myapp://myview", true);
-        assertUrlActionMatching(FOLLOW_DEEP_LINK, "myapp://MyView", true);
-    }
-
-    @Test
-    public void followDeepLink_withEmptyScheme_shouldNotMatch() throws Exception {
-        assertUrlActionMatching(FOLLOW_DEEP_LINK, "://myview", false);
-    }
-
-    @Test
-    public void followDeepLink_withEmptyHost_shouldMatch() throws Exception {
-        assertUrlActionMatching(FOLLOW_DEEP_LINK, "myapp://", true);
-    }
-
-    @Test
-    public void followDeepLink_withIntentScheme_withEmptyHost_shouldMatch() throws Exception {
-        assertUrlActionMatching(FOLLOW_DEEP_LINK, "intent://", true);
-        assertUrlActionMatching(FOLLOW_DEEP_LINK, "InTeNt://", true);
-    }
-
-    @Test
-    public void followDeepLink_withIntentScheme_withHost_shouldMatch() throws Exception {
-        assertUrlActionMatching(FOLLOW_DEEP_LINK, "intent://host", true);
-        assertUrlActionMatching(FOLLOW_DEEP_LINK, "InTeNt://HoSt", true);
-    }
-
-    private void assertUrlActionMatching(@NonNull final UrlAction action,
-            @Nullable final String url, final boolean shouldMatch) {
-        assertThat(action.shouldTryHandlingUrl(Uri.parse(url))).isEqualTo(shouldMatch);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
deleted file mode 100644
index 66ccbdd2..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
+++ /dev/null
@@ -1,953 +0,0 @@
-package com.mopub.common;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.ResolveInfo;
-import android.net.Uri;
-import android.support.annotation.NonNull;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.network.MoPubRequestQueue;
-import com.mopub.network.Networking;
-
-import org.junit.Before;
-import org.junit.Ignore;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowApplication;
-
-import java.net.URISyntaxException;
-
-import static com.mopub.common.UrlAction.FOLLOW_DEEP_LINK;
-import static com.mopub.common.UrlAction.FOLLOW_DEEP_LINK_WITH_FALLBACK;
-import static com.mopub.common.UrlAction.HANDLE_MOPUB_SCHEME;
-import static com.mopub.common.UrlAction.HANDLE_PHONE_SCHEME;
-import static com.mopub.common.UrlAction.HANDLE_SHARE_TWEET;
-import static com.mopub.common.UrlAction.IGNORE_ABOUT_SCHEME;
-import static com.mopub.common.UrlAction.NOOP;
-import static com.mopub.common.UrlAction.OPEN_APP_MARKET;
-import static com.mopub.common.UrlAction.OPEN_IN_APP_BROWSER;
-import static com.mopub.common.UrlAction.OPEN_NATIVE_BROWSER;
-import static com.mopub.common.VolleyRequestMatcher.isUrl;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.argThat;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class UrlHandlerTest {
-    private Context context;
-    @Mock private UrlHandler.ResultActions mockResultActions;
-    @Mock private UrlHandler.MoPubSchemeListener mockMoPubSchemeListener;
-    @Mock private MoPubRequestQueue mockRequestQueue;
-
-    @Before
-    public void setUp() throws Exception {
-        context = Robolectric.buildActivity(Activity.class).create().get().getApplicationContext();
-
-        // This url will be attempted when and intent:// url is not resolvable AND the app package
-        // is missing (see Intents.launchApplicationIntent). In this case, we want the url to be
-        // resolvable so the tests behave as a real device and actually attempt to open it.
-        // This discrepancy between devices and test environment/emulators is was led to the
-        // regression of ADF-2291.
-        makeDeeplinkResolvable("market://details?id=null");
-    }
-
-    @Test
-    public void urlHandler_withoutMoPubBrowser_shouldCallOnClickSuccessButNotStartActivity() {
-        final String url = "https://www.mopub.com/";
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(OPEN_IN_APP_BROWSER)
-                .withResultActions(mockResultActions)
-                .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .withoutMoPubBrowser()
-                .build().handleResolvedUrl(context, url, true, null);
-
-        verify(mockResultActions).urlHandlingSucceeded(url, OPEN_IN_APP_BROWSER);
-        verifyNoMoreCallbacks();
-        final Intent startedActivity = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(startedActivity).isNull();
-    }
-
-    @Test
-    public void urlHandler_withMatchingMoPubSchemeFinishLoad_shouldCallOnFinishLoad() {
-        final String url = "mopub://finishLoad";
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(HANDLE_MOPUB_SCHEME)
-                .withResultActions(mockResultActions)
-                .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleResolvedUrl(context, url, true, null);
-
-        verify(mockMoPubSchemeListener).onFinishLoad();
-        verifyNoMoreCallbacks();
-    }
-
-    @Test
-    public void urlHandler_withMatchingMoPubSchemeUppercasedFinishLoad_shouldCallOnFinishLoad() {
-        final String url = "mopub://FiNiShLoAd";
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(HANDLE_MOPUB_SCHEME)
-                .withResultActions(mockResultActions)
-                .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleResolvedUrl(context, url, true, null);
-
-        verify(mockMoPubSchemeListener).onFinishLoad();
-        verifyNoMoreCallbacks();
-    }
-
-    @Test
-    public void urlHandler_withMatchingMoPubSchemeClose_shouldCallOnClose() {
-        final String url = "mopub://close";
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(HANDLE_MOPUB_SCHEME)
-                .withResultActions(mockResultActions)
-                .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleResolvedUrl(context, url, true, null);
-
-        verify(mockMoPubSchemeListener).onClose();
-        verifyNoMoreCallbacks();
-    }
-
-    @Test
-    public void urlHandler_withMatchingMoPubSchemeUppercasedClose_shouldCallOnClose() {
-        final String url = "mopub://ClOsE";
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(HANDLE_MOPUB_SCHEME)
-                .withResultActions(mockResultActions)
-                .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleResolvedUrl(context, url, true, null);
-
-        verify(mockMoPubSchemeListener).onClose();
-        verifyNoMoreCallbacks();
-    }
-
-    @Test
-    public void urlHandler_withMatchingMoPubSchemeFailLoad_shouldCallOnFailLoad() {
-        final String url = "mopub://failLoad";
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(HANDLE_MOPUB_SCHEME)
-                .withResultActions(mockResultActions)
-                .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleResolvedUrl(context, url, true, null);
-
-        verify(mockMoPubSchemeListener).onFailLoad();
-        verifyNoMoreCallbacks();
-    }
-
-    @Test
-    public void urlHandler_withMatchingMoPubSchemeUppercasedFailLoad_shouldCallOnFailLoad() {
-        final String url = "mopub://FaIlLoAd";
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(HANDLE_MOPUB_SCHEME)
-                .withResultActions(mockResultActions)
-                .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleResolvedUrl(context, url, true, null);
-
-        verify(mockMoPubSchemeListener).onFailLoad();
-        verifyNoMoreCallbacks();
-    }
-
-    @Test
-    public void urlHandler_withMatchingAboutSchemeUrl_shouldIgnoreClick() {
-        final String url = "about:blank";
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(
-                        HANDLE_MOPUB_SCHEME,
-                        IGNORE_ABOUT_SCHEME,
-                        HANDLE_PHONE_SCHEME)
-                .withResultActions(mockResultActions)
-                .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleResolvedUrl(context, url, true, null);
-
-        verifyNoMoreCallbacks();
-        verifyNoStartedActivity();
-    }
-
-    @Test
-    public void urlHandler_withMatchingPhoneSchemeTelUrl_shouldCallOnClickSuccess() {
-        assertPhoneSchemeCallback("tel:");
-    }
-
-    @Test
-    public void urlHandler_withMatchingPhoneSchemeVoicemailUrl_shouldCallOnClickSuccess() {
-        assertPhoneSchemeCallback("voicemail:");
-    }
-
-    @Test
-    public void urlHandler_withMatchingPhoneSchemeSMSUrl_shouldCallOnClickSuccess() {
-        assertPhoneSchemeCallback("sms:");
-    }
-
-    @Test
-    public void urlHandler_withMatchingPhoneSchemeMailToUrl_shouldCallOnClickSuccess() {
-        assertPhoneSchemeCallback("mailto:");
-    }
-
-    @Test
-    public void urlHandler_withMatchingPhoneSchemeGeoUrl_shouldCallOnClickSuccess() {
-        assertPhoneSchemeCallback("geo:");
-    }
-
-    @Test
-    public void urlHandler_withMatchingPhoneSchemeStreetViewUrl_shouldCallOnClickSuccess() {
-        assertPhoneSchemeCallback("google.streetview:");
-    }
-
-    @Test
-    public void urlHandler_withMatchingPhoneSchemeUrl_shouldStartActivity() {
-        final String url = "tel:1234567890";
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(IGNORE_ABOUT_SCHEME, HANDLE_MOPUB_SCHEME, FOLLOW_DEEP_LINK,
-                        OPEN_IN_APP_BROWSER, HANDLE_PHONE_SCHEME, OPEN_NATIVE_BROWSER, HANDLE_SHARE_TWEET)
-                .withResultActions(mockResultActions)
-                .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleResolvedUrl(context, url, true, null);
-
-        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
-        assertThat(startedActivity.getAction()).isEqualTo(Intent.ACTION_VIEW);
-        assertThat(startedActivity.getData()).isEqualTo(Uri.parse(url));
-    }
-
-    @Test
-    public void urlHandler_withValidNativeBrowserUrl_shouldCallOnClickSuccess_shouldStartActivity() {
-        final String urlToLoad = "https://www.mopub.com/";
-        final String url = "mopubnativebrowser://navigate?url=" + urlToLoad;
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(IGNORE_ABOUT_SCHEME, HANDLE_MOPUB_SCHEME, FOLLOW_DEEP_LINK,
-                        OPEN_IN_APP_BROWSER, HANDLE_PHONE_SCHEME, OPEN_NATIVE_BROWSER, HANDLE_SHARE_TWEET)
-                .withResultActions(mockResultActions)
-                .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleUrl(context, url, true, null);
-
-        verify(mockResultActions).urlHandlingSucceeded(url, OPEN_NATIVE_BROWSER);
-        verifyNoMoreCallbacks();
-        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
-        assertThat(startedActivity.getAction()).isEqualTo(Intent.ACTION_VIEW);
-        assertThat(startedActivity.getData()).isEqualTo(Uri.parse(urlToLoad));
-    }
-
-    @Test
-    public void urlHandler_withMatchingInAppBrowserHttpUrl_shouldCallOnClickSuccess_shouldStartActivity() {
-        final String url = "https://some_url";
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(IGNORE_ABOUT_SCHEME, HANDLE_MOPUB_SCHEME, FOLLOW_DEEP_LINK,
-                        OPEN_IN_APP_BROWSER, HANDLE_PHONE_SCHEME, OPEN_NATIVE_BROWSER, HANDLE_SHARE_TWEET)
-                .withResultActions(mockResultActions)
-                .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleResolvedUrl(context, url, true, null);
-
-        verify(mockResultActions).urlHandlingSucceeded(url, OPEN_IN_APP_BROWSER);
-        verifyNoMoreCallbacks();
-        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
-        assertThat(startedActivity.getComponent().getClassName())
-                .isEqualTo(MoPubBrowser.class.getName());
-        assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(url);
-    }
-
-    @Test
-    public void urlHandler_withMatchingInAppBrowserHttpsUrl_shouldCallOnClickSuccess_shouldStartActivity() {
-        final String url = "https://www.mopub.com/";
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(IGNORE_ABOUT_SCHEME, HANDLE_MOPUB_SCHEME, FOLLOW_DEEP_LINK,
-                        OPEN_IN_APP_BROWSER, HANDLE_PHONE_SCHEME, OPEN_NATIVE_BROWSER, HANDLE_SHARE_TWEET)
-                .withResultActions(mockResultActions)
-                .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleResolvedUrl(context, url, true, null);
-
-        verify(mockResultActions).urlHandlingSucceeded(url, OPEN_IN_APP_BROWSER);
-        verifyNoMoreCallbacks();
-        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
-        assertThat(startedActivity.getComponent().getClassName())
-                .isEqualTo(MoPubBrowser.class.getName());
-        assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(url);
-    }
-
-    @Test
-    public void urlHandler_withMatchingShareUrl_shouldCallOnClickSuccess_shouldStartActivity() {
-        final String shareTweetUrl = "mopubshare://tweet?screen_name=SpaceX&tweet_id=596026229536460802";
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(HANDLE_SHARE_TWEET)
-                .withResultActions(mockResultActions)
-                .build().handleResolvedUrl(context, shareTweetUrl, true, null);
-
-        verify(mockResultActions).urlHandlingSucceeded(shareTweetUrl, HANDLE_SHARE_TWEET);
-        verifyNoMoreCallbacks();
-        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
-        assertThat(startedActivity.getAction()).isEqualTo(Intent.ACTION_CHOOSER);
-    }
-
-    @Test
-    public void urlHandler_withMatchingDeepLinkUrl_shouldCallOnClickSuccess_shouldStartActivity() {
-        final String deepLinkUrl = "appscheme://host";
-        makeDeeplinkResolvable(deepLinkUrl);
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(FOLLOW_DEEP_LINK)
-                .withResultActions(mockResultActions)
-                .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleResolvedUrl(context, deepLinkUrl, true, null);
-
-        verify(mockResultActions).urlHandlingSucceeded(deepLinkUrl, FOLLOW_DEEP_LINK);
-        verifyNoMoreCallbacks();
-        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
-        assertThat(startedActivity.getAction()).isEqualTo(Intent.ACTION_VIEW);
-        assertThat(startedActivity.getData()).isEqualTo(Uri.parse(deepLinkUrl));
-    }
-
-    @Test
-    public void urlHandler_withMatchingIntentUrl_shouldCallOnClickSuccess_shouldStartActivity() throws URISyntaxException {
-        final String appPackage = "com.google.zxing.client.android";
-        final String intentUrl = "intent://scan/#Intent;scheme=zxing;package=" + appPackage
-                + ";end";
-        makeIntentUrlResolvable(intentUrl);
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(FOLLOW_DEEP_LINK)
-                .withResultActions(mockResultActions)
-                .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleResolvedUrl(context, intentUrl, true, null);
-
-        verify(mockResultActions).urlHandlingSucceeded(intentUrl, FOLLOW_DEEP_LINK);
-        verifyNoMoreCallbacks();
-        final Intent startedActivity = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(startedActivity.getAction()).isEqualTo(Intent.ACTION_VIEW);
-    }
-
-    @Test
-    public void urlHandler_withMatchingDeeplinkPlus_shouldCallOnClickSuccess_shouldStartActivity() {
-        final String primaryUrl = "twitter://timeline";
-        final String deeplinkPlusUrl = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl);
-        makeDeeplinkResolvable("twitter://timeline");
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK)
-                .withResultActions(mockResultActions)
-                .build().handleResolvedUrl(context, deeplinkPlusUrl, true, null);
-
-        verify(mockResultActions).urlHandlingSucceeded(deeplinkPlusUrl, FOLLOW_DEEP_LINK_WITH_FALLBACK);
-        verifyNoMoreCallbacks();
-        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
-        assertThat(startedActivity.getAction()).isEqualTo(Intent.ACTION_VIEW);
-        assertThat(startedActivity.getData()).isEqualTo(Uri.parse(primaryUrl));
-    }
-
-    @Test
-    public void urlHandler_withMatchingUnresolvableDeeplinkPlus_withResolvableFallback_shouldResolveRedirects_shouldCallOnClickSuccess_shouldStartActivity() {
-        final String primaryUrl = "missingApp://somePath";
-        final String fallbackUrl = "https://www.twitter.com";
-        final String fallbackUrlAfterRedirects = "https://twitter.com/";
-        final String deeplinkPlusUrl = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
-                + "&fallbackUrl=" + Uri.encode(fallbackUrl);
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK, OPEN_IN_APP_BROWSER)
-                .withResultActions(mockResultActions)
-                .build().handleUrl(context, deeplinkPlusUrl);
-
-        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
-        verify(mockResultActions).urlHandlingSucceeded(fallbackUrlAfterRedirects,
-                OPEN_IN_APP_BROWSER);
-        verifyNoMoreCallbacks();
-        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
-        assertThat(startedActivity.getComponent().getClassName())
-                .isEqualTo(MoPubBrowser.class.getName());
-        assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY))
-                .isEqualTo(fallbackUrlAfterRedirects);
-    }
-
-    @Test
-    public void urlHandler_withMatchingUnresolvableDeeplinkPlus_withUnresolvableFallback_shouldDoNothing() {
-        final String primaryUrl = "missingApp://somePath";
-        final String fallbackUrl = "unresolvableUrl";
-        final String deeplinkPlusUrl = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
-                + "&fallbackUrl=" + Uri.encode(fallbackUrl);
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK, FOLLOW_DEEP_LINK)
-                .withResultActions(mockResultActions)
-                .build().handleResolvedUrl(context, deeplinkPlusUrl, true, null);
-
-        verify(mockResultActions).urlHandlingFailed(fallbackUrl, NOOP);
-        verifyNoMoreCallbacks();
-    }
-
-    @Test
-    public void urlHandler_withDeeplinkPlus_shouldTriggerPrimaryTracker() {
-        final String primaryUrl = "twitter://timeline";
-        final String primaryTracker = "https://ads.twitter.com/tracking?pubId=1234&userId=5678";
-        final String fallbackUrl = "https://twitter.com";
-        final String fallbackTracker =
-                "https://ads.twitter.com/fallbackTracking?pubId=1234&userId=5678";
-        final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
-                + "&primaryTrackingUrl=" + Uri.encode(primaryTracker)
-                + "&fallbackUrl=" + Uri.encode(fallbackUrl)
-                + "&fallbackTrackingUrl=" + Uri.encode(fallbackTracker);
-        makeDeeplinkResolvable(primaryUrl);
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK)
-                .build().handleResolvedUrl(context, url, true, null);
-
-        verify(mockRequestQueue).add(argThat(isUrl(primaryTracker)));
-        verify(mockRequestQueue, never()).add(argThat(isUrl(fallbackTracker)));
-    }
-
-    @Test
-    public void urlHandler_withDeeplinkPlus_shouldTriggerMultiplePrimaryTrackers() {
-        final String primaryUrl = "twitter://timeline";
-        final String primaryTracker1 = "https://ads.twitter.com/tracking?pubId=1234&userId=5678";
-        final String primaryTracker2 = "https://ads.mopub.com/tracking?pubId=4321&userId=8765";
-        final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
-                + "&primaryTrackingUrl=" + Uri.encode(primaryTracker1)
-                + "&primaryTrackingUrl=" + Uri.encode(primaryTracker2);
-        makeDeeplinkResolvable(primaryUrl);
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK)
-                .build().handleResolvedUrl(context, url, true, null);
-
-        verify(mockRequestQueue).add(argThat(isUrl(primaryTracker1)));
-        verify(mockRequestQueue).add(argThat(isUrl(primaryTracker2)));
-    }
-
-    @Test
-    public void urlHandler_withDeeplinkPlus_withResolvableFallback_shouldTriggerFallbackTracker() {
-        final String primaryUrl = "missingApp://somePath";
-        final String fallbackUrl = "https://twitter.com";
-        final String primaryTracker = "https://ads.twitter.com/tracking?pubId=1234&userId=5678";
-        final String fallbackTracker =
-                "https://ads.twitter.com/fallbackTracking?pubId=1234&userId=5678";
-        final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
-                + "&primaryTrackingUrl=" + Uri.encode(primaryTracker)
-                + "&fallbackUrl=" + Uri.encode(fallbackUrl)
-                + "&fallbackTrackingUrl=" + Uri.encode(fallbackTracker);
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK, OPEN_IN_APP_BROWSER)
-                .build().handleResolvedUrl(context, url, true, null);
-
-        verify(mockRequestQueue).add(argThat(isUrl(fallbackTracker)));
-        verify(mockRequestQueue, never()).add(argThat(isUrl(primaryTracker)));
-    }
-
-    @Test
-    public void urlHandler_withDeeplinkPlus_withResolvableFallback_shouldTriggerMultiplePrimaryTrackers() {
-        final String primaryUrl = "missingApp://somePath";
-        final String fallbackUrl = "https://twitter.com";
-        final String fallbackTracker1 = "https://ads.twitter.com/tracking?pubId=1234&userId=5678";
-        final String fallbackTracker2 = "https://ads.mopub.com/tracking?pubId=4321&userId=8765";
-        final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
-                + "&fallbackUrl=" + Uri.encode(fallbackUrl)
-                + "&fallbackTrackingUrl=" + Uri.encode(fallbackTracker1)
-                + "&fallbackTrackingUrl=" + Uri.encode(fallbackTracker2);
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK, OPEN_IN_APP_BROWSER)
-                .build().handleResolvedUrl(context, url, true, null);
-
-        verify(mockRequestQueue).add(argThat(isUrl(fallbackTracker1)));
-        verify(mockRequestQueue).add(argThat(isUrl(fallbackTracker2)));
-    }
-
-    @Test
-    public void urlHandler_withdDeeplinkPlus_withUppercasedNavigate_shouldBeHandled() {
-        final String primaryUrl = "twitter://timeline";
-        final String url = "deeplink+://NaViGaTe?primaryUrl=" + Uri.encode(primaryUrl);
-        makeDeeplinkResolvable(primaryUrl);
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK)
-                .withResultActions(mockResultActions)
-                .build().handleResolvedUrl(context, url, true, null);
-
-        verify(mockResultActions).urlHandlingSucceeded(url, FOLLOW_DEEP_LINK_WITH_FALLBACK);
-    }
-
-    @Test
-    public void urlHandler_withoutMatchingDeeplinkPlus_shouldDoNothing() {
-        final String url = "NOTdeeplink+://navigate?primaryUrl=twitter%3A%2F%2Ftimeline";
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK)
-                .withResultActions(mockResultActions)
-                .build().handleResolvedUrl(context, url, true, null);
-
-        verify(mockResultActions).urlHandlingFailed(url, NOOP);
-        verifyNoMoreCallbacks();
-        verifyNoStartedActivity();
-    }
-
-    @Test
-    public void urlHandler_withDeeplinkPlus_withoutNavigate_shouldDoNothing() {
-        final String url = "deeplink+://NOTnavigate?primaryUrl=twitter%3A%2F%2Ftimeline";
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK)
-                .withResultActions(mockResultActions)
-                .build().handleResolvedUrl(context, url, true, null);
-
-        verify(mockResultActions).urlHandlingFailed(url, FOLLOW_DEEP_LINK_WITH_FALLBACK);
-        verifyNoMoreCallbacks();
-        verifyNoStartedActivity();
-    }
-
-    @Test
-    public void urlHandler_withNestedDeeplinkPlus_shouldDoNothing() {
-        final String deeplink = "deeplink+://navigate?primaryUrl=twitter%3A%2F%2Ftimeline";
-        final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(deeplink);
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK)
-                .withResultActions(mockResultActions)
-                .build().handleResolvedUrl(context, url, true, null);
-
-        verify(mockResultActions).urlHandlingFailed(url, FOLLOW_DEEP_LINK_WITH_FALLBACK);
-        verifyNoMoreCallbacks();
-        verifyNoStartedActivity();
-    }
-
-    @Test
-    public void urlHandler_withDeeplinkPlus_withDeeplinkPlusAsFallback_shouldDoNothing() {
-        final String deeplink = "deeplink+://navigate?primaryUrl=twitter%3A%2F%2Ftimeline";
-        final String url = "deeplink+://navigate?primaryUrl=missingApp%3A%2F%2FsomePath"
-                + "&fallbackUrl=" + Uri.encode(deeplink);
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK)
-                .withResultActions(mockResultActions)
-                .build().handleResolvedUrl(context, url, true, null);
-
-        verify(mockResultActions).urlHandlingFailed(url, FOLLOW_DEEP_LINK_WITH_FALLBACK);
-        verifyNoMoreCallbacks();
-        verifyNoStartedActivity();
-    }
-
-    @Test
-    public void urlHandler_withDeeplinkPlus_withInvalidPrimaryUrl_shouldDoNothing() {
-        final String url = "deeplink+://navigate?primaryUrl=INVALID";
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK)
-                .withResultActions(mockResultActions)
-                .build().handleResolvedUrl(context, url, true, null);
-
-        verify(mockResultActions).urlHandlingFailed(url, FOLLOW_DEEP_LINK_WITH_FALLBACK);
-        verifyNoMoreCallbacks();
-        verifyNoStartedActivity();
-    }
-
-    @Test
-    public void urlHandler_withDeeplinkPlus_withDecodedPrimaryUrl_shouldDoNothing() {
-        final String url = "deeplink+://navigate?primaryUrl=twitter://timeline";
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(FOLLOW_DEEP_LINK_WITH_FALLBACK)
-                .withResultActions(mockResultActions)
-                .build().handleResolvedUrl(context, url, true, null);
-
-        verify(mockResultActions).urlHandlingFailed(url, FOLLOW_DEEP_LINK_WITH_FALLBACK);
-        verifyNoMoreCallbacks();
-        verifyNoStartedActivity();
-    }
-
-    @Test
-    public void urlHandler_withDualMatchingUnresolvableUrlActions_shouldCallOnClickFailOnLastMatchedAction() {
-        final String url = "mopub://invalid";
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(HANDLE_MOPUB_SCHEME, FOLLOW_DEEP_LINK)
-                .withResultActions(mockResultActions)
-                .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleResolvedUrl(context, url, true, null);
-
-        verify(mockResultActions).urlHandlingFailed(url, FOLLOW_DEEP_LINK);
-        verifyNoMoreCallbacks();
-    }
-
-    @Test
-    public void urlHandler_withShareTweetAndDeepLink_shouldCallOnClickFailOnLastMatchedDeepLink() {
-        final String url = "mopubshare://invalid";
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(HANDLE_SHARE_TWEET, FOLLOW_DEEP_LINK)
-                .withResultActions(mockResultActions)
-                .build().handleResolvedUrl(context, url, true, null);
-
-        verify(mockResultActions).urlHandlingFailed(url, FOLLOW_DEEP_LINK);
-        verifyNoMoreCallbacks();
-    }
-
-    @Test
-    public void urlHandler_withNoConfiguration_shouldDoNothing() {
-        new UrlHandler.Builder().build().handleResolvedUrl(context, "", true, null);
-
-        verifyNoMoreCallbacks();
-    }
-
-    @Test
-    public void urlHandler_withoutDestinationUrl_shouldNotError() {
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(IGNORE_ABOUT_SCHEME)
-                .withResultActions(mockResultActions)
-                .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleResolvedUrl(context, "", true, null);
-
-        verify(mockResultActions).urlHandlingFailed("", NOOP);
-        verifyNoMoreCallbacks();
-    }
-
-    @Test
-    public void urlHandler_withoutSupportedUrlActions_shouldNotError() {
-        new UrlHandler.Builder()
-                .withResultActions(mockResultActions)
-                .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleResolvedUrl(context, "about:blank", true, null);
-
-        verify(mockResultActions).urlHandlingFailed("about:blank", NOOP);
-        verifyNoMoreCallbacks();
-    }
-
-    @Test
-    public void urlHandler_withoutClickListener_shouldNotError() {
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(IGNORE_ABOUT_SCHEME)
-                .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleResolvedUrl(context, "about:blank", true, null);
-
-        verifyNoMoreCallbacks();
-    }
-
-    @Test
-    public void urlHandler_withoutMoPubSchemeListener_shouldNotError() {
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(IGNORE_ABOUT_SCHEME)
-                .withResultActions(mockResultActions)
-                .build().handleResolvedUrl(context, "about:blank", true, null);
-
-        verifyNoMoreCallbacks();
-    }
-
-    @Test
-    public void urlHandler_withoutMoPubBrowser_shouldNotError() {
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(IGNORE_ABOUT_SCHEME)
-                .withResultActions(mockResultActions)
-                .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .withoutMoPubBrowser()
-                .build().handleResolvedUrl(context, "about:blank", true, null);
-
-        verifyNoMoreCallbacks();
-    }
-
-    @Test
-    public void urlHandler_withoutMatchingAboutSchemeUrl_shouldCallUrlHandlingFailed() {
-        assertCallbackWithoutMatchingUrl(IGNORE_ABOUT_SCHEME);
-    }
-
-    @Test
-    public void urlHandler_withoutMatchingMoPubSchemeUrl_shouldCallUrlHandlingFailed() {
-        assertCallbackWithoutMatchingUrl(HANDLE_MOPUB_SCHEME);
-    }
-
-    @Test
-    public void urlHandler_withoutMatchingDeepLinkUrl_shouldCallUrlHandlingFailed() {
-        assertCallbackWithoutMatchingUrl(FOLLOW_DEEP_LINK);
-    }
-
-    @Test
-    public void urlHandler_withoutMatchingInAppBrowserUrl_shouldCallUrlHandlingFailed() {
-        assertCallbackWithoutMatchingUrl(OPEN_IN_APP_BROWSER);
-    }
-
-    @Test
-    public void urlHandler_withoutMatchingPhoneSchemeUrl_shouldCallUrlHandlingFailed() {
-        assertCallbackWithoutMatchingUrl(HANDLE_PHONE_SCHEME);
-    }
-
-    @Test
-    public void urlHandler_withoutMatchingNativeBrowserUrl_shouldCallUrlHandlingFailed() {
-        assertCallbackWithoutMatchingUrl(OPEN_NATIVE_BROWSER);
-    }
-
-    @Test
-    public void urlHandler_withoutMatchingShareTweetUrl_shouldCallUrlHandlingFailed() {
-        assertCallbackWithoutMatchingUrl(HANDLE_SHARE_TWEET);
-    }
-
-    /**
-     * For the next few unit tests urlHandler_withoutMatching[some]UrlAction_shouldCallOnClickFail,
-     * do not include FOLLOW_DEEP_LINK, since it would be a catch-all and trigger urlHandlingSucceeded.
-     */
-
-    @Test
-    public void urlHandler_withoutMatchingAboutSchemeUrlAction_shouldCallUrlHandlingFailed() {
-        assertCallbackWithoutMatchingSupportedUrlAction("about:blank", HANDLE_MOPUB_SCHEME,
-                OPEN_IN_APP_BROWSER, HANDLE_PHONE_SCHEME, OPEN_NATIVE_BROWSER, HANDLE_SHARE_TWEET);
-    }
-
-    @Test
-    public void urlHandler_withoutMatchingMoPubSchemeUrlAction_shouldCallUrlHandlingFailed() {
-        assertCallbackWithoutMatchingSupportedUrlAction("mopub://close", IGNORE_ABOUT_SCHEME,
-                OPEN_IN_APP_BROWSER, HANDLE_PHONE_SCHEME, OPEN_NATIVE_BROWSER, HANDLE_SHARE_TWEET);
-    }
-
-    @Test
-    public void urlHandler_withoutMatchingDeepLinkUrlAction_shouldCallUrlHandlingFailed() {
-        final String deepLinkUrl = "appscheme://host";
-        makeDeeplinkResolvable(deepLinkUrl);
-        assertCallbackWithoutMatchingSupportedUrlAction(deepLinkUrl, IGNORE_ABOUT_SCHEME,
-                HANDLE_MOPUB_SCHEME, OPEN_IN_APP_BROWSER, HANDLE_PHONE_SCHEME, OPEN_NATIVE_BROWSER,
-                HANDLE_SHARE_TWEET);
-    }
-
-    @Test
-    public void urlHandler_withoutMatchingInAppBrowserUrlAction_shouldCallUrlHandlingFailed() {
-        assertCallbackWithoutMatchingSupportedUrlAction("https://some_url", IGNORE_ABOUT_SCHEME,
-                HANDLE_MOPUB_SCHEME, HANDLE_PHONE_SCHEME, OPEN_NATIVE_BROWSER, HANDLE_SHARE_TWEET);
-    }
-
-    @Test
-    public void urlHandler_withoutMatchingPhoneSchemeUrlAction_shouldCallUrlHandlingFailed() {
-        assertCallbackWithoutMatchingSupportedUrlAction("tel:1234567890", IGNORE_ABOUT_SCHEME,
-                HANDLE_MOPUB_SCHEME, OPEN_IN_APP_BROWSER, OPEN_NATIVE_BROWSER, HANDLE_SHARE_TWEET);
-    }
-
-    @Test
-    public void urlHandler_withoutMatchingNativeBrowserUrlAction_shouldCallUrlHandlingFailed() {
-        assertCallbackWithoutMatchingSupportedUrlAction("mopubnativebrowser://navigate?url=some_url",
-                IGNORE_ABOUT_SCHEME, HANDLE_MOPUB_SCHEME, OPEN_IN_APP_BROWSER, HANDLE_PHONE_SCHEME,
-                HANDLE_SHARE_TWEET);
-    }
-
-    @Test
-    public void urlHandler_withoutMatchingShareTweetUrlAction_shouldCallUrlHandlingFailed() {
-        final String shareTweetUrl = "mopubshare://tweet?screen_name=SpaceX&tweet_id=596026229536460802";
-        assertCallbackWithoutMatchingSupportedUrlAction(shareTweetUrl, HANDLE_MOPUB_SCHEME,
-                IGNORE_ABOUT_SCHEME, HANDLE_PHONE_SCHEME, OPEN_NATIVE_BROWSER, OPEN_APP_MARKET,
-                OPEN_IN_APP_BROWSER);
-    }
-
-    @Test
-    public void urlHandler_withNullDestinationURL_shouldDoNothing() {
-        final String nullUrl = null;
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(IGNORE_ABOUT_SCHEME, HANDLE_MOPUB_SCHEME, FOLLOW_DEEP_LINK,
-                        OPEN_IN_APP_BROWSER, HANDLE_PHONE_SCHEME, OPEN_NATIVE_BROWSER, HANDLE_SHARE_TWEET)
-                .withResultActions(mockResultActions)
-                .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleResolvedUrl(context, nullUrl, true, null);
-
-        verify(mockResultActions).urlHandlingFailed(nullUrl, NOOP);
-        verifyNoMoreCallbacks();
-        verifyNoStartedActivity();
-    }
-
-    @Test
-    public void urlHandler_withEmptyDestinationURL_shouldDoNothing() {
-        final String emptyUrl = "";
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(IGNORE_ABOUT_SCHEME, HANDLE_MOPUB_SCHEME, FOLLOW_DEEP_LINK,
-                        OPEN_IN_APP_BROWSER, HANDLE_PHONE_SCHEME, OPEN_NATIVE_BROWSER, HANDLE_SHARE_TWEET)
-                .withResultActions(mockResultActions)
-                .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleResolvedUrl(context, emptyUrl, true, null);
-
-        verify(mockResultActions).urlHandlingFailed(emptyUrl, NOOP);
-        verifyNoMoreCallbacks();
-        verifyNoStartedActivity();
-    }
-
-    @Test
-    public void urlHandler_withInvalidDestinationURL_shouldDoNothing() {
-        final String invalidUrl = "some_invalid_url";
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(IGNORE_ABOUT_SCHEME, HANDLE_MOPUB_SCHEME, FOLLOW_DEEP_LINK,
-                        OPEN_IN_APP_BROWSER, HANDLE_PHONE_SCHEME, OPEN_NATIVE_BROWSER, HANDLE_SHARE_TWEET)
-                .withResultActions(mockResultActions)
-                .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleResolvedUrl(context, invalidUrl, true, null);
-
-        verify(mockResultActions).urlHandlingFailed(invalidUrl, NOOP);
-        verifyNoMoreCallbacks();
-        verifyNoStartedActivity();
-    }
-
-    @Test
-    public void urlHandler_withMatchingMoPubSchemeWithoutMoPubSchemeListener_shouldDoNothing() {
-        final String url = "mopub://finishLoad";
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(HANDLE_MOPUB_SCHEME)
-                .withResultActions(mockResultActions)
-                .build().handleResolvedUrl(context, url, true, null);
-
-        verifyNoMoreCallbacks();
-    }
-
-    @Test
-    public void urlHandler_withInvalidMoPubSchemeCustom_shouldNotError() {
-        final String url = "mopub://custom?INVALID";
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(HANDLE_MOPUB_SCHEME)
-                .withResultActions(mockResultActions)
-                .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleResolvedUrl(context, url, true, null);
-
-        verify(mockResultActions).urlHandlingFailed(url, HANDLE_MOPUB_SCHEME);
-        verifyNoMoreCallbacks();
-    }
-
-    @Test
-    public void urlHandler_withInvalidNativeBrowserUrl_shouldCallUrlHandlingFailed() {
-        final String url = "mopubnativebrowser://INVALID";
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(OPEN_NATIVE_BROWSER)
-                .withResultActions(mockResultActions)
-                .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleResolvedUrl(context, url, true, null);
-
-        verify(mockResultActions).urlHandlingFailed(url, OPEN_NATIVE_BROWSER);
-        verifyNoMoreCallbacks();
-        verifyNoStartedActivity();
-    }
-
-    @Test
-    public void urlHandler_withInvalidHostInShareTweetUrl_shouldCallUrlHandlingFailed() {
-        final String url = "mopubshare://invalid";
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(HANDLE_SHARE_TWEET)
-                .withResultActions(mockResultActions)
-                .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleResolvedUrl(context, url, true, null);
-
-        verify(mockResultActions).urlHandlingFailed(url, NOOP);
-        verifyNoMoreCallbacks();
-        verifyNoStartedActivity();
-    }
-
-    @Test
-    public void urlHandler_withMissingQueryParametersInShareTweetUrl_shouldCallUrlHandlingFailed() {
-        final String url = "mopubshare://tweet?x=1&y=2";
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(HANDLE_SHARE_TWEET)
-                .withResultActions(mockResultActions)
-                .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleResolvedUrl(context, url, true, null);
-
-        verify(mockResultActions).urlHandlingFailed(url, HANDLE_SHARE_TWEET);
-        verifyNoMoreCallbacks();
-        verifyNoStartedActivity();
-    }
-
-    @Test
-    public void urlHandler_withEmptyQueryParametersInShareTweetUrl_shouldCallUrlHandlingFailed() {
-        final String url = "mopubshare://tweet?screen_name=&tweet_id=";
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(HANDLE_SHARE_TWEET)
-                .withResultActions(mockResultActions)
-                .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleResolvedUrl(context, url, true, null);
-
-        verify(mockResultActions).urlHandlingFailed(url, HANDLE_SHARE_TWEET);
-        verifyNoMoreCallbacks();
-        verifyNoStartedActivity();
-    }
-
-    @Test
-    public void urlHandler_withMatchingUnresolvableDeepLinkUrl_shouldCallUrlHandlingFailed() {
-        final String deepLinkUrl = "appscheme://host";
-        // The following code would make this url resolvable, so avoiding it to test for an
-        // unresolvable url (yet included for documentation purposes).
-        //makeDeeplinkResolvable(deepLinkUrl);
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(FOLLOW_DEEP_LINK)
-                .withResultActions(mockResultActions)
-                .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleResolvedUrl(context, deepLinkUrl, true, null);
-
-        verify(mockResultActions).urlHandlingFailed(deepLinkUrl, FOLLOW_DEEP_LINK);
-        verifyNoMoreCallbacks();
-        verifyNoStartedActivity();
-    }
-
-    private void assertPhoneSchemeCallback(@NonNull final String url) {
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(HANDLE_PHONE_SCHEME)
-                .withResultActions(mockResultActions)
-                .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleResolvedUrl(context, url, true, null);
-
-        verify(mockResultActions).urlHandlingSucceeded(url, HANDLE_PHONE_SCHEME);
-        verifyNoMoreCallbacks();
-    }
-
-    private void assertCallbackWithoutMatchingUrl(@NonNull final UrlAction urlAction) {
-        final String url = "non://matching_url";
-        UrlAction expectedFailUrlAction = NOOP;
-
-        if (urlAction.equals(FOLLOW_DEEP_LINK)) {
-            expectedFailUrlAction = FOLLOW_DEEP_LINK;
-        }
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(urlAction)
-                .withResultActions(mockResultActions)
-                .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleResolvedUrl(context, url, true, null);
-        verify(mockResultActions).urlHandlingFailed(url, expectedFailUrlAction);
-        verifyNoMoreCallbacks();
-    }
-
-    private void assertCallbackWithoutMatchingSupportedUrlAction(@NonNull final String url,
-            @NonNull final UrlAction... otherTypes) {
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(NOOP, otherTypes)
-                .withResultActions(mockResultActions)
-                .withMoPubSchemeListener(mockMoPubSchemeListener)
-                .build().handleResolvedUrl(context, url, true, null);
-        verify(mockResultActions).urlHandlingFailed(url, NOOP);
-        verifyNoMoreCallbacks();
-    }
-
-    private void verifyNoMoreCallbacks() {
-        verifyNoMoreInteractions(mockResultActions);
-        verifyNoMoreInteractions(mockMoPubSchemeListener);
-    }
-
-    private void verifyNoStartedActivity() {
-        assertThat(ShadowApplication.getInstance().peekNextStartedActivity()).isNull();
-    }
-
-    private void makeDeeplinkResolvable(String deeplink) {
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW,
-                Uri.parse(deeplink)), new ResolveInfo());
-    }
-
-    private void makeIntentUrlResolvable(String intentUrl) throws URISyntaxException {
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(
-                Intent.parseUri(intentUrl, Intent.URI_INTENT_SCHEME), new ResolveInfo());
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/UrlResolutionTaskTest.java b/mopub-sdk/src/test/java/com/mopub/common/UrlResolutionTaskTest.java
deleted file mode 100644
index df0626ea..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/UrlResolutionTaskTest.java
+++ /dev/null
@@ -1,145 +0,0 @@
-package com.mopub.common;
-
-import android.support.annotation.Nullable;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.annotation.Config;
-
-import java.io.IOException;
-import java.net.HttpURLConnection;
-import java.net.URISyntaxException;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class UrlResolutionTaskTest {
-    private final String BASE_URL =  "https://a.example.com/b/c/d?e=f";
-    @Mock private HttpURLConnection mockHttpUrlConnection;
-
-    @Test
-    public void resolveRedirectLocation_withAbsoluteRedirect_shouldReturnAbsolutePath() throws Exception {
-        setupMockHttpUrlConnection(302, "https://www.abc.com");
-
-        assertThat(UrlResolutionTask.resolveRedirectLocation(BASE_URL, mockHttpUrlConnection))
-                .isEqualTo("https://www.abc.com");
-    }
-
-    @Test
-    public void resolveRedirectLocation_withRelativeRedirect_shouldReplaceFileWithRelativePath() throws Exception {
-        setupMockHttpUrlConnection(302, "foo/bar");
-
-        assertThat(UrlResolutionTask.resolveRedirectLocation(BASE_URL, mockHttpUrlConnection))
-                .isEqualTo("https://a.example.com/b/c/foo/bar");
-    }
-
-    @Test
-    public void resolveRedirectLocation_withRelativeFromRootRedirect_shouldReturnAmendedPathFromRoot() throws Exception {
-        setupMockHttpUrlConnection(302, "/foo/bar");
-
-        assertThat(UrlResolutionTask.resolveRedirectLocation(BASE_URL, mockHttpUrlConnection))
-                .isEqualTo("https://a.example.com/foo/bar");
-    }
-
-    @Test
-    public void resolveRedirectLocation_withRelativeFromOneLevelUpRedirect_shouldReturnAmendedPathFromOneLevelUp() throws Exception {
-        setupMockHttpUrlConnection(302, "../foo/bar");
-
-        assertThat(UrlResolutionTask.resolveRedirectLocation(BASE_URL, mockHttpUrlConnection))
-                .isEqualTo("https://a.example.com/b/foo/bar");
-    }
-
-    @Test
-    public void resolveRedirectLocation_withRelativeAndQueryParamsRedirect_shouldReturnAmendedPathWithQueryParams() throws Exception {
-        setupMockHttpUrlConnection(302, "../foo/bar?x=y");
-
-        assertThat(UrlResolutionTask.resolveRedirectLocation(BASE_URL, mockHttpUrlConnection))
-                .isEqualTo("https://a.example.com/b/foo/bar?x=y");
-    }
-
-    @Test
-    public void resolveRedirectLocation_withRedirectWithoutScheme_shouldCompleteTheScheme() throws Exception {
-        setupMockHttpUrlConnection(302, "//foo.example.com/bar");
-
-        assertThat(UrlResolutionTask.resolveRedirectLocation(BASE_URL, mockHttpUrlConnection))
-                .isEqualTo("https://foo.example.com/bar");
-    }
-
-    @Test
-    public void resolveRedirectLocation_withRedirectDifferentScheme_shouldReturnRedirectScheme() throws Exception {
-        setupMockHttpUrlConnection(302, "https://a.example.com/b/c/d?e=f");
-
-        assertThat(UrlResolutionTask.resolveRedirectLocation(BASE_URL, mockHttpUrlConnection))
-                .isEqualTo("https://a.example.com/b/c/d?e=f");
-    }
-
-    @Test
-    public void resolveRedirectLocation_withOnlyQueryParamsRedirect_shouldReturnAmendedPathWithQueryParams() throws Exception {
-        setupMockHttpUrlConnection(302, "?x=y");
-
-        assertThat(UrlResolutionTask.resolveRedirectLocation(BASE_URL, mockHttpUrlConnection))
-                .isEqualTo("https://a.example.com/b/c/?x=y");
-    }
-
-    @Test
-    public void resolveRedirectLocation_withOnlyFragmentRedirect_shouldReturnAmendedPathWithFragment() throws Exception {
-        setupMockHttpUrlConnection(302, "#x");
-
-        assertThat(UrlResolutionTask.resolveRedirectLocation(BASE_URL, mockHttpUrlConnection))
-                .isEqualTo("https://a.example.com/b/c/d?e=f#x");
-    }
-
-    @Test
-    public void resolveRedirectLocation_withDotRedirect_shouldStripFile() throws Exception {
-        setupMockHttpUrlConnection(302, ".");
-
-        assertThat(UrlResolutionTask.resolveRedirectLocation(BASE_URL, mockHttpUrlConnection))
-                .isEqualTo("https://a.example.com/b/c/");
-    }
-
-    @Test
-    public void resolveRedirectLocation_withResponseCode301_shouldResolvePath() throws Exception {
-        setupMockHttpUrlConnection(301, "https://www.abc.com");
-
-        assertThat(UrlResolutionTask.resolveRedirectLocation(BASE_URL, mockHttpUrlConnection))
-                .isEqualTo("https://www.abc.com");
-    }
-
-    @Test
-    public void resolveRedirectLocation_withResponseCode200_shouldReturnNull() throws Exception {
-        setupMockHttpUrlConnection(200, "https://www.abc.com");
-
-        assertThat(UrlResolutionTask.resolveRedirectLocation(BASE_URL, mockHttpUrlConnection))
-                .isNull();
-    }
-
-    @Test
-    public void resolveRedirectLocation_withoutLocation_shouldReturnNull() throws Exception {
-        setupMockHttpUrlConnection(200, null);
-
-        assertThat(UrlResolutionTask.resolveRedirectLocation(BASE_URL, mockHttpUrlConnection))
-                .isNull();
-    }
-
-    @Test(expected = URISyntaxException.class)
-    public void resolveRedirectLocation_withInvalidUrl_shouldThrowURISyntaxException() throws Exception {
-        setupMockHttpUrlConnection(301, "https://a.example.com/b c/d");
-
-        UrlResolutionTask.resolveRedirectLocation(BASE_URL, mockHttpUrlConnection);
-    }
-
-    private void setupMockHttpUrlConnection(final int responseCode,
-            @Nullable final String absolutePathUrl) throws IOException {
-        mockHttpUrlConnection = mock(HttpURLConnection.class);
-        when(mockHttpUrlConnection.getResponseCode()).thenReturn(responseCode);
-        when(mockHttpUrlConnection.getHeaderField("Location")).thenReturn(absolutePathUrl);
-    }
-
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/VolleyRequestMatcher.java b/mopub-sdk/src/test/java/com/mopub/common/VolleyRequestMatcher.java
deleted file mode 100644
index 8afeb57d..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/VolleyRequestMatcher.java
+++ /dev/null
@@ -1,33 +0,0 @@
-package com.mopub.common;
-
-import android.support.annotation.Nullable;
-
-import com.mopub.volley.Request;
-
-import org.mockito.ArgumentMatcher;
-
-/**
- * A Mockito Request Matcher, used in tests to allow verifying that Volley Requests match a given
- * url.
- *
- * "verify(mock).add(argThat(VolleyRequestMatcher.isUrl("testUrl")));"
- */
-public class VolleyRequestMatcher extends ArgumentMatcher<Request> {
-
-     @Nullable private final String mUrl;
-
-     private VolleyRequestMatcher(@Nullable final String url) {
-         mUrl = url;
-     }
-
-     public static VolleyRequestMatcher isUrl(@Nullable String url) {
-         return new VolleyRequestMatcher(url);
-     }
-
-     @Override
-     public boolean matches(final Object that) {
-         return that instanceof Request
-                 && ((this.mUrl == null && ((Request) that).getUrl() == null)
-                    || ((Request) that).getUrl().equals(mUrl));
-     }
- }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/BaseEventTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/BaseEventTest.java
deleted file mode 100644
index a5c0d99f..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/event/BaseEventTest.java
+++ /dev/null
@@ -1,247 +0,0 @@
-package com.mopub.common.event;
-
-import com.mopub.common.ClientMetadata;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class BaseEventTest {
-
-    private BaseEvent subject;
-    @Mock private ClientMetadata mockClientMetaData;
-
-    @Before
-    public void setUp() {
-        when(mockClientMetaData.getSdkVersion()).thenReturn("sdk_version");
-        when(mockClientMetaData.getAppName()).thenReturn("app_name");
-        when(mockClientMetaData.getAppPackageName()).thenReturn("app_package_name");
-        when(mockClientMetaData.getAppVersion()).thenReturn("app_version");
-        when(mockClientMetaData.getDeviceId()).thenReturn("client_device_id");
-        when(mockClientMetaData.isDoNotTrackSet()).thenReturn(true);
-        when(mockClientMetaData.getDeviceManufacturer()).thenReturn("device_manufacturer");
-        when(mockClientMetaData.getDeviceModel()).thenReturn("device_model");
-        when(mockClientMetaData.getDeviceProduct()).thenReturn("device_product");
-        when(mockClientMetaData.getDeviceOsVersion()).thenReturn("device_os_version");
-        when(mockClientMetaData.getDeviceScreenWidthDip()).thenReturn(1337);
-        when(mockClientMetaData.getDeviceScreenHeightDip()).thenReturn(70707);
-        when(mockClientMetaData.getActiveNetworkType()).thenReturn(ClientMetadata.MoPubNetworkType.WIFI);
-        when(mockClientMetaData.getNetworkOperator()).thenReturn("network_operator");
-        when(mockClientMetaData.getNetworkOperatorName()).thenReturn("network_operator_name");
-        when(mockClientMetaData.getIsoCountryCode()).thenReturn("network_iso_country_code");
-        when(mockClientMetaData.getSimOperator()).thenReturn("network_sim_operator");
-        when(mockClientMetaData.getSimOperatorName()).thenReturn("network_sim_operator_name");
-        when(mockClientMetaData.getSimIsoCountryCode()).thenReturn("network_sim_iso_country_code");
-        ClientMetadata.setInstance(mockClientMetaData);
-
-        subject = new Event.Builder(BaseEvent.Name.AD_REQUEST, BaseEvent.Category.REQUESTS, 0.10000123)
-                .withSdkProduct(BaseEvent.SdkProduct.NATIVE)
-                .withAdUnitId("8cf00598d3664adaaeccd800e46afaca")
-                .withAdCreativeId("3c2b887e2c2a4cd0ae6a925440a62f0d")
-                .withAdType("html")
-                .withAdNetworkType("admob")
-                .withAdWidthPx(320.0)
-                .withAdHeightPx(50.0)
-                .withGeoLat(37.7833)
-                .withGeoLon(-122.4183333)
-                .withGeoAccuracy(10.0)
-                .withPerformanceDurationMs(100.0)
-                .withRequestId("b550796074da4559a27c5072dcba2b27")
-                .withRequestStatusCode(200)
-                .withRequestUri("https://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca")
-                .withRequestRetries(0)
-                .build();
-    }
-
-    @After
-    public void tearDown() {
-        ClientMetadata.setInstance(null);
-    }
-
-    @Test
-    public void ScribeCategory_shouldHaveExpectedValues() throws Exception {
-        // We're testing this since our backend data definitions depend on these values matching
-        assertThat(BaseEvent.ScribeCategory.EXCHANGE_CLIENT_EVENT.getCategory())
-                .isEqualTo("exchange_client_event");
-        assertThat(BaseEvent.ScribeCategory.EXCHANGE_CLIENT_ERROR.getCategory())
-                .isEqualTo("exchange_client_error");
-    }
-
-    @Test
-    public void SdkProduct_shouldHaveExpectedValues() throws Exception {
-        // We're testing this since our backend data definitions depend on these values matching
-        assertThat(BaseEvent.SdkProduct.NONE.getType())
-                .isEqualTo(0);
-        assertThat(BaseEvent.SdkProduct.WEB_VIEW.getType())
-                .isEqualTo(1);
-        assertThat(BaseEvent.SdkProduct.NATIVE.getType())
-                .isEqualTo(2);
-    }
-
-    @Test
-    public void AppPlatform_shouldHaveExpectedValues() throws Exception {
-        // We're testing this since our backend data definitions depend on these values matching
-        assertThat(BaseEvent.AppPlatform.NONE.getType())
-                .isEqualTo(0);
-        assertThat(BaseEvent.AppPlatform.IOS.getType())
-                .isEqualTo(1);
-        assertThat(BaseEvent.AppPlatform.ANDROID.getType())
-                .isEqualTo(2);
-        assertThat(BaseEvent.AppPlatform.MOBILE_WEB.getType())
-                .isEqualTo(3);
-    }
-
-    @Test
-    public void Name_shouldHaveExpectedValues() throws Exception {
-        // We're testing this since our backend data definitions depend on these values matching
-        assertThat(BaseEvent.Name.AD_REQUEST.getName())
-                .isEqualTo("ad_request");
-        assertThat(BaseEvent.Name.IMPRESSION_REQUEST.getName())
-                .isEqualTo("impression_request");
-        assertThat(BaseEvent.Name.CLICK_REQUEST.getName())
-                .isEqualTo("click_request");
-    }
-
-    @Test
-    public void Category_shouldHaveExpectedValues() throws Exception {
-        // We're testing this since our backend data definitions depend on these values matching
-        assertThat(BaseEvent.Category.REQUESTS.getCategory())
-                .isEqualTo("requests");
-    }
-
-    @Test
-    public void SamplingRate_shouldHaveExpectedValues() throws Exception {
-        // We're testing this since our backend data definitions depend on these values matching
-        assertThat(BaseEvent.SamplingRate.AD_REQUEST.getSamplingRate()).isEqualTo(0.1);
-    }
-
-    @Test
-    public void constructor_shouldCorrectlyAssignFieldsFromBuilder() throws Exception {
-        assertThat(subject.getSdkProduct()).isEqualTo(BaseEvent.SdkProduct.NATIVE);
-        assertThat(subject.getAdUnitId()).isEqualTo("8cf00598d3664adaaeccd800e46afaca");
-        assertThat(subject.getAdCreativeId()).isEqualTo("3c2b887e2c2a4cd0ae6a925440a62f0d");
-        assertThat(subject.getAdType()).isEqualTo("html");
-        assertThat(subject.getAdNetworkType()).isEqualTo("admob");
-        assertThat(subject.getAdWidthPx()).isEqualTo(320.0);
-        assertThat(subject.getAdHeightPx()).isEqualTo(50.0);
-        assertThat(subject.getGeoLat()).isEqualTo(37.7833);
-        assertThat(subject.getGeoLon()).isEqualTo(-122.4183333);
-        assertThat(subject.getGeoAccuracy()).isEqualTo(10.0);
-        assertThat(subject.getPerformanceDurationMs()).isEqualTo(100.0);
-        assertThat(subject.getRequestId()).isEqualTo("b550796074da4559a27c5072dcba2b27");
-        assertThat(subject.getRequestStatusCode()).isEqualTo(200);
-        assertThat(subject.getRequestUri()).isEqualTo("https://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca");
-        assertThat(subject.getRequestRetries()).isEqualTo(0);
-        assertThat(subject.getSamplingRate()).isEqualTo(0.10000123);
-    }
-
-    @Test
-    public void getSdkVersion_shouldReturnClientMetaDataSdkVersion() throws Exception {
-        assertThat(subject.getSdkVersion()).isEqualTo("sdk_version");
-    }
-
-    @Test
-    public void getAppName_shouldReturnClientMetaDataAppName() throws Exception {
-        assertThat(subject.getAppName()).isEqualTo("app_name");
-    }
-
-    @Test
-    public void getAppPackageName_shouldReturnClientMetaDataAppPackageName() throws Exception {
-        assertThat(subject.getAppPackageName()).isEqualTo("app_package_name");
-    }
-
-    @Test
-    public void getAppVersion_shouldReturnClientMetaDataAppVersion() throws Exception {
-        assertThat(subject.getAppVersion()).isEqualTo("app_version");
-    }
-
-    @Test
-    public void getClientAdvertisingId_shouldReturnClientMetaDataDeviceId() throws Exception {
-        assertThat(subject.getClientAdvertisingId()).isEqualTo("client_device_id");
-    }
-
-    @Test
-    public void getObfuscatedClientAdvertisingId_shouldReturnObfuscatedDeviceId() throws Exception {
-        assertThat(subject.getObfuscatedClientAdvertisingId()).isEqualTo("ifa:XXXX");
-    }
-
-    @Test
-    public void getClientDoNotTrack_shouldReturnClientMetaDataDoNotTrack() throws Exception {
-        assertThat(subject.getClientDoNotTrack()).isEqualTo(true);
-    }
-
-    @Test
-    public void getDeviceManufacturer_shouldReturnClientMetaDataDeviceManufacturer() throws Exception {
-        assertThat(subject.getDeviceManufacturer()).isEqualTo("device_manufacturer");
-    }
-
-    @Test
-    public void getDeviceModel_shouldReturnClientMetaDataDeviceModel() throws Exception {
-        assertThat(subject.getDeviceModel()).isEqualTo("device_model");
-    }
-
-    @Test
-    public void getDeviceProduct_shouldReturnClientMetaDataDeviceProduct() throws Exception {
-        assertThat(subject.getDeviceProduct()).isEqualTo("device_product");
-    }
-
-    @Test
-    public void getDeviceOsVersion_shouldReturnClientMetaDataDeviceOsVersion() throws Exception {
-        assertThat(subject.getDeviceOsVersion()).isEqualTo("device_os_version");
-    }
-
-    @Test
-    public void getDeviceScreenWidthDip_shouldReturnClientMetaDataDeviceScreenWidthDip() throws Exception {
-        assertThat(subject.getDeviceScreenWidthDip()).isEqualTo(1337);
-    }
-
-    @Test
-    public void getDeviceScreenHeightDip_shouldReturnClientMetaDataDeviceScreenHeightDip() throws Exception {
-        assertThat(subject.getDeviceScreenHeightDip()).isEqualTo(70707);
-    }
-
-    @Test
-    public void getNetworkType_shouldReturnClientMetaDataActiveNetworkType() throws Exception {
-        assertThat(subject.getNetworkType()).isEqualTo(ClientMetadata.MoPubNetworkType.WIFI);
-    }
-
-    @Test
-    public void getNetworkOperatorCode_shouldReturnClientMetaDataNetworkOperator() throws Exception {
-        assertThat(subject.getNetworkOperatorCode()).isEqualTo("network_operator");
-    }
-
-    @Test
-    public void getNetworkOperatorName_shouldReturnClientMetaDataNetworkOperatorName() throws Exception {
-        assertThat(subject.getNetworkOperatorName()).isEqualTo("network_operator_name");
-    }
-
-    @Test
-    public void getNetworkIsoCountryCode_shouldReturnClientMetaDataNetworkIsoCountryCode() throws Exception {
-        assertThat(subject.getNetworkIsoCountryCode()).isEqualTo("network_iso_country_code");
-    }
-
-    @Test
-    public void getNetworkSimCode_shouldReturnClientMetaDataNetworkSimOperator() throws Exception {
-        assertThat(subject.getNetworkSimCode()).isEqualTo("network_sim_operator");
-    }
-
-    @Test
-    public void getNetworkSimOperatorName_shouldReturnClientMetaDataNetworkSimOperatorName() throws Exception {
-        assertThat(subject.getNetworkSimOperatorName()).isEqualTo("network_sim_operator_name");
-    }
-
-    @Test
-    public void getNetworkSimIsoCountryCode_shouldReturnClientMetaDataNetworkSimIsoCountryCode() throws Exception {
-        assertThat(subject.getNetworkSimIsoCountryCode()).isEqualTo("network_sim_iso_country_code");
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/ErrorEventTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/ErrorEventTest.java
deleted file mode 100644
index 957552b1..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/event/ErrorEventTest.java
+++ /dev/null
@@ -1,77 +0,0 @@
-package com.mopub.common.event;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class ErrorEventTest {
-
-    private ErrorEvent subject;
-
-    @Before
-    public void setUp() {
-        subject = new ErrorEvent.Builder(BaseEvent.Name.AD_REQUEST, BaseEvent.Category.REQUESTS, 0.10000123)
-                .withErrorExceptionClassName("error_exception_class_name")
-                .withErrorMessage("error_message")
-                .withErrorStackTrace("error_stack_trace")
-                .withErrorFileName("error_file_name")
-                .withErrorClassName("error_class_name")
-                .withErrorMethodName("error_method_name")
-                .withErrorLineNumber(123)
-                .build();
-    }
-
-    @Test
-    public void constructor_shouldCorrectlyAssignFieldsFromBuilder() throws Exception {
-        assertThat(subject.getName()).isEqualTo(BaseEvent.Name.AD_REQUEST);
-        assertThat(subject.getCategory()).isEqualTo(BaseEvent.Category.REQUESTS);
-        assertThat(subject.getSamplingRate()).isEqualTo(0.10000123);
-        assertThat(subject.getScribeCategory()).isEqualTo(BaseEvent.ScribeCategory.EXCHANGE_CLIENT_ERROR);
-        assertThat(subject.getErrorExceptionClassName()).isEqualTo("error_exception_class_name");
-        assertThat(subject.getErrorMessage()).isEqualTo("error_message");
-        assertThat(subject.getErrorStackTrace()).isEqualTo("error_stack_trace");
-        assertThat(subject.getErrorFileName()).isEqualTo("error_file_name");
-        assertThat(subject.getErrorClassName()).isEqualTo("error_class_name");
-        assertThat(subject.getErrorMethodName()).isEqualTo("error_method_name");
-        assertThat(subject.getErrorLineNumber()).isEqualTo(123);
-    }
-
-    @Test
-    public void builder_withException_shouldCorrectlyPopulateErrorFields() throws Exception {
-        Exception exception;
-        try {
-            throw new ClassCastException("bad cast");
-        } catch (Exception e)  {
-            exception = e;
-        }
-
-        subject = new ErrorEvent.Builder(BaseEvent.Name.AD_REQUEST, BaseEvent.Category.REQUESTS, 0.10000123)
-                .withException(exception)
-                .build();
-
-        assertThat(subject.getName()).isEqualTo(BaseEvent.Name.AD_REQUEST);
-        assertThat(subject.getCategory()).isEqualTo(BaseEvent.Category.REQUESTS);
-        assertThat(subject.getScribeCategory()).isEqualTo(BaseEvent.ScribeCategory.EXCHANGE_CLIENT_ERROR);
-        assertThat(subject.getErrorExceptionClassName()).isEqualTo("java.lang.ClassCastException");
-        assertThat(subject.getErrorMessage()).isEqualTo("bad cast");
-
-        // We can't reliably check the stack trace since it changes from one run to another
-//        assertThat(subject.getErrorStackTrace()).isEqualTo();
-
-        assertThat(subject.getErrorFileName()).isEqualTo("ErrorEventTest.java");
-        assertThat(subject.getErrorClassName()).isEqualTo("com.mopub.common.event.ErrorEventTest");
-        assertThat(subject.getErrorMethodName()).isEqualTo("builder_withException_shouldCorrectlyPopulateErrorFields");
-
-        // Ideally we check the actual line number here, but since this file is continuously
-        // changing, it makes the test brittle to do so
-        assertThat(subject.getErrorLineNumber()).isNotNull();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/EventDispatcherTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/EventDispatcherTest.java
deleted file mode 100644
index 9b3fef29..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/event/EventDispatcherTest.java
+++ /dev/null
@@ -1,67 +0,0 @@
-package com.mopub.common.event;
-
-import android.app.Activity;
-import android.os.HandlerThread;
-import android.os.Looper;
-import android.os.Message;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.annotation.Config;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class EventDispatcherTest {
-
-    private EventDispatcher subject;
-    private List<EventRecorder> recorders;
-    @Mock private EventRecorder mockEventRecorder1;
-    @Mock private EventRecorder mockEventRecorder2;
-    @Mock private HandlerThread mockHandlerThread;
-
-    @Before
-    public void setUp() {
-        recorders = new ArrayList<EventRecorder>();
-        recorders.add(mockEventRecorder1);
-        recorders.add(mockEventRecorder2);
-    }
-
-    @Test
-    public void handler_handleMessage_shouldCallRecordOnAllRecorders() throws Exception {
-        Message message = new Message();
-        message.obj = mock(Event.class);
-
-        subject = new EventDispatcher(recorders, Looper.getMainLooper());
-        subject.getHandlerCallback().handleMessage(message);
-
-        verify(mockEventRecorder1).record(eq((Event) message.obj));
-        verify(mockEventRecorder2).record(eq((Event) message.obj));
-    }
-
-    @Test
-    public void handler_handleMessage_withNonBaseEventTypeMessageShouldNotRecordOnAnyRecorders() throws Exception {
-        Message message = new Message();
-        message.obj = mock(Activity.class);
-
-        subject = new EventDispatcher(recorders, Looper.getMainLooper());
-        subject.getHandlerCallback().handleMessage(message);
-
-        verify(mockEventRecorder1, never()).record(any(BaseEvent.class));
-        verify(mockEventRecorder2, never()).record(any(BaseEvent.class));
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/EventSamplerTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/EventSamplerTest.java
deleted file mode 100644
index b4b2d15e..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/event/EventSamplerTest.java
+++ /dev/null
@@ -1,89 +0,0 @@
-package com.mopub.common.event;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.stubbing.OngoingStubbing;
-import org.robolectric.annotation.Config;
-
-import java.util.Random;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class EventSamplerTest {
-
-    private EventSampler subject;
-    @Mock Random mockRandom;
-    @Mock BaseEvent mockBaseEvent;
-
-    @Before
-    public void setUp() {
-        subject = new EventSampler(mockRandom);
-        when(mockBaseEvent.getSamplingRate()).thenReturn(0.10);
-    }
-
-    @Test
-    public void sample_withRandomNumberLessThan10Percent_shouldReturnTrue() throws Exception {
-        when(mockRandom.nextDouble()).thenReturn(0.09);
-
-        boolean result = subject.sample(mockBaseEvent);
-
-        assertThat(result).isTrue();
-    }
-
-    @Test
-    public void sample_withRandomNumberGreaterOrEqualTo10Percent_shouldReturnFalse() throws Exception {
-        when(mockRandom.nextDouble()).thenReturn(0.10);
-
-        boolean result = subject.sample(mockBaseEvent);
-
-        assertThat(result).isFalse();
-    }
-
-    @Test
-    public void sample_withSameRequestId_shouldReturnSameValueRegardlessOfSampleRate() throws Exception {
-        when(mockRandom.nextDouble()).thenReturn(0.09).thenReturn(0.999);
-        when(mockBaseEvent.getRequestId()).thenReturn("rid");
-
-        boolean firstResult = subject.sample(mockBaseEvent);
-        assertThat(firstResult).isTrue();
-
-        boolean secondResult = subject.sample(mockBaseEvent);
-        assertThat(secondResult).isTrue();
-    }
-
-    @Test
-    public void sample_withDifferentRequestId_shouldReturnResultBasedOnSampleRate() throws Exception {
-        when(mockRandom.nextDouble()).thenReturn(0.09).thenReturn(0.999);
-        when(mockBaseEvent.getRequestId()).thenReturn("rid1").thenReturn("rid2");
-
-        boolean firstResult = subject.sample(mockBaseEvent);
-        assertThat(firstResult).isTrue();
-
-        boolean secondResult = subject.sample(mockBaseEvent);
-        assertThat(secondResult).isFalse();
-    }
-
-    @Test
-    public void sample_withTooManyEvents_shouldHoldAMaximumNumberOfRequestIds() {
-        when(mockRandom.nextDouble()).thenReturn(0.001);
-        OngoingStubbing<String> ongoingStubbing = when(mockBaseEvent.getRequestId()).thenReturn(
-                "rid0");
-        for (int i = 1; i < EventSampler.MAX_SIZE * 3; i++) {
-            ongoingStubbing = ongoingStubbing.thenReturn("rid" + i);
-        }
-
-        for (int i = 0; i < EventSampler.MAX_SIZE * 3; i++) {
-            subject.sample(mockBaseEvent);
-        }
-
-        assertThat(subject.getCacheSize()).isEqualTo(EventSampler.MAX_SIZE);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/EventSerializerTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/EventSerializerTest.java
deleted file mode 100644
index 34d030ba..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/event/EventSerializerTest.java
+++ /dev/null
@@ -1,216 +0,0 @@
-package com.mopub.common.event;
-
-import android.app.Activity;
-import android.content.Context;
-
-import com.mopub.common.ClientMetadata;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.json.JSONArray;
-import org.json.JSONObject;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import java.util.ArrayList;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class EventSerializerTest {
-
-    private EventSerializer subject;
-
-    @Mock private Event mockEvent;
-    @Mock private ErrorEvent mockErrorEvent;
-
-    @Before
-    public void setUp() {
-        subject = new EventSerializer();
-
-        // initialize client meta data with context
-        Context context = Robolectric.buildActivity(Activity.class).create().get();
-        ClientMetadata.getInstance(context);
-
-        populateBaseEventFields(mockEvent);
-        populateBaseEventFields(mockErrorEvent);
-
-        when(mockErrorEvent.getErrorExceptionClassName()).thenReturn("error_exception_class_name");
-        when(mockErrorEvent.getErrorMessage()).thenReturn("error_message");
-        when(mockErrorEvent.getErrorStackTrace()).thenReturn("error_stack_trace");
-        when(mockErrorEvent.getErrorFileName()).thenReturn("error_file_name");
-        when(mockErrorEvent.getErrorClassName()).thenReturn("error_class_name");
-        when(mockErrorEvent.getErrorMethodName()).thenReturn("error_method_name");
-        when(mockErrorEvent.getErrorLineNumber()).thenReturn(123);
-    }
-
-    @Test
-    public void serializeAsJson_withAllEventFieldsPopulated_shouldCorrectJsonRepresentation() throws Exception {
-        ArrayList<BaseEvent> events = new ArrayList<BaseEvent>();
-        events.add(mockEvent);
-        JSONArray jsonArray = subject.serializeAsJson(events);
-        assertThat(jsonArray.length()).isEqualTo(1);
-
-        JSONObject jsonObject = jsonArray.getJSONObject(0);
-        validateBaseEventFields(jsonObject);
-    }
-
-    @Test
-    public void serializeAsJson_withAllErrorEventFieldsPopulated_shouldCorrectJsonRepresentation() throws Exception {
-        ArrayList<BaseEvent> events = new ArrayList<BaseEvent>();
-        events.add(mockErrorEvent);
-        JSONArray jsonArray = subject.serializeAsJson(events);
-        assertThat(jsonArray.length()).isEqualTo(1);
-
-        JSONObject jsonObject = jsonArray.getJSONObject(0);
-        validateBaseEventFields(jsonObject);
-
-        assertThat(jsonObject.getString("error_exception_class_name")).isEqualTo("error_exception_class_name");
-        assertThat(jsonObject.getString("error_message")).isEqualTo("error_message");
-        assertThat(jsonObject.getString("error_stack_trace")).isEqualTo("error_stack_trace");
-        assertThat(jsonObject.getString("error_file_name")).isEqualTo("error_file_name");
-        assertThat(jsonObject.getString("error_class_name")).isEqualTo("error_class_name");
-        assertThat(jsonObject.getString("error_method_name")).isEqualTo("error_method_name");
-        assertThat(jsonObject.getInt("error_line_number")).isEqualTo(123);
-    }
-
-    @Test
-    public void serializeAsJson_shouldReturnJsonArrayOfEvents() throws Exception {
-        when(mockEvent.getName()).thenReturn(BaseEvent.Name.AD_REQUEST);
-        when(mockEvent.getCategory()).thenReturn(BaseEvent.Category.REQUESTS);
-        when(mockErrorEvent.getName()).thenReturn(BaseEvent.Name.IMPRESSION_REQUEST);
-        when(mockErrorEvent.getCategory()).thenReturn(BaseEvent.Category.REQUESTS);
-
-        ArrayList<BaseEvent> events = new ArrayList<BaseEvent>();
-        events.add(mockEvent);
-        events.add(mockErrorEvent);
-
-        JSONArray jsonArray = subject.serializeAsJson(events);
-        assertThat(jsonArray.length()).isEqualTo(2);
-
-        JSONObject jsonObject1 = jsonArray.getJSONObject(0);
-        assertThat(jsonObject1.getString("name")).isEqualTo(BaseEvent.Name.AD_REQUEST.getName());
-        assertThat(jsonObject1.getString("name_category")).isEqualTo("requests");
-
-        JSONObject jsonObject2 = jsonArray.getJSONObject(1);
-        assertThat(jsonObject2.getString("name")).isEqualTo("impression_request");
-        assertThat(jsonObject2.getString("name_category")).isEqualTo("requests");
-    }
-
-    private void populateBaseEventFields(BaseEvent mockBaseEvent) {
-        when(mockBaseEvent.getScribeCategory()).thenReturn(BaseEvent.ScribeCategory.EXCHANGE_CLIENT_EVENT);
-        when(mockBaseEvent.getName()).thenReturn(BaseEvent.Name.AD_REQUEST);
-        when(mockBaseEvent.getCategory()).thenReturn(BaseEvent.Category.REQUESTS);
-        when(mockBaseEvent.getSdkProduct()).thenReturn(BaseEvent.SdkProduct.NATIVE);
-        when(mockBaseEvent.getSdkVersion()).thenReturn("3.5.0");
-        when(mockBaseEvent.getAdUnitId()).thenReturn("8cf00598d3664adaaeccd800e46afaca");
-        when(mockBaseEvent.getAdCreativeId()).thenReturn("3c2b887e2c2a4cd0ae6a925440a62f0d");
-        when(mockBaseEvent.getAdType()).thenReturn("html");
-        when(mockBaseEvent.getAdNetworkType()).thenReturn("admob");
-        when(mockBaseEvent.getAdWidthPx()).thenReturn(320.0);
-        when(mockBaseEvent.getAdHeightPx()).thenReturn(50.0);
-        when(mockBaseEvent.getDspCreativeId()).thenReturn("jack!fake234");
-        when(mockBaseEvent.getAppPlatform()).thenReturn(BaseEvent.AppPlatform.ANDROID);
-        when(mockBaseEvent.getAppName()).thenReturn("MoPub Sample App");
-        when(mockBaseEvent.getAppPackageName()).thenReturn("com.mopub.simpleadsdemo");
-        when(mockBaseEvent.getAppVersion()).thenReturn("1.0");
-        when(mockBaseEvent.getObfuscatedClientAdvertisingId()).thenCallRealMethod();
-        when(mockBaseEvent.getClientAdvertisingId()).thenReturn("38400000-8cf0-11bd-b23e-10b96e40000d");
-        when(mockBaseEvent.getClientDoNotTrack()).thenReturn(false);
-        when(mockBaseEvent.getDeviceManufacturer()).thenReturn("LGE");
-        when(mockBaseEvent.getDeviceModel()).thenReturn("Nexus 5");
-        when(mockBaseEvent.getDeviceProduct()).thenReturn("hammerhead");
-        when(mockBaseEvent.getDeviceOsVersion()).thenReturn("5.0");
-        when(mockBaseEvent.getDeviceScreenWidthDip()).thenReturn(1080);
-        when(mockBaseEvent.getDeviceScreenHeightDip()).thenReturn(1920);
-        when(mockBaseEvent.getGeoLat()).thenReturn(37.7833);
-        when(mockBaseEvent.getGeoLon()).thenReturn(-122.4183333);
-        when(mockBaseEvent.getGeoAccuracy()).thenReturn(10.0);
-        when(mockBaseEvent.getPerformanceDurationMs()).thenReturn(100.0);
-        when(mockBaseEvent.getNetworkType()).thenReturn(ClientMetadata.MoPubNetworkType.WIFI);
-        when(mockBaseEvent.getNetworkOperatorCode()).thenReturn("310410");
-        when(mockBaseEvent.getNetworkOperatorName()).thenReturn("AT&T");
-        when(mockBaseEvent.getNetworkIsoCountryCode()).thenReturn("US");
-        when(mockBaseEvent.getNetworkSimCode()).thenReturn("network_sim_code");
-        when(mockBaseEvent.getNetworkSimOperatorName()).thenReturn("network_operator_name");
-        when(mockBaseEvent.getNetworkSimIsoCountryCode()).thenReturn("US");
-        when(mockBaseEvent.getRequestId()).thenReturn("b550796074da4559a27c5072dcba2b27");
-        when(mockBaseEvent.getRequestStatusCode()).thenReturn(200);
-        when(mockBaseEvent.getRequestUri()).thenReturn("https://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca");
-        when(mockBaseEvent.getRequestRetries()).thenReturn(0);
-        when(mockBaseEvent.getTimestampUtcMs()).thenReturn(1416447053472L);
-    }
-
-    private void validateBaseEventFields(JSONObject jsonObject) throws Exception {
-        assertThat(jsonObject.getString("_category_")).isEqualTo("exchange_client_event");
-        assertThat(jsonObject.getLong("ts")).isEqualTo(1416447053472L);
-
-        // Name Details
-        assertThat(jsonObject.getString("name")).isEqualTo(BaseEvent.Name.AD_REQUEST.getName());
-        assertThat(jsonObject.getString("name_category")).isEqualTo(BaseEvent.Category.REQUESTS.getCategory());
-
-        // SDK Details
-        assertThat(jsonObject.getInt("sdk_product")).isEqualTo(BaseEvent.SdkProduct.NATIVE.getType());
-        assertThat(jsonObject.getString("sdk_version")).isEqualTo("3.5.0");
-
-        // Ad Details
-        assertThat(jsonObject.getString("ad_unit_id")).isEqualTo("8cf00598d3664adaaeccd800e46afaca");
-        assertThat(jsonObject.getString("ad_creative_id")).isEqualTo("3c2b887e2c2a4cd0ae6a925440a62f0d");
-        assertThat(jsonObject.getString("ad_type")).isEqualTo("html");
-        assertThat(jsonObject.getString("ad_network_type")).isEqualTo("admob");
-        assertThat(jsonObject.getDouble("ad_width_px")).isEqualTo(320.0);
-        assertThat(jsonObject.getDouble("ad_height_px")).isEqualTo(50.0);
-        assertThat(jsonObject.getString("dsp_creative_id")).isEqualTo("jack!fake234");
-
-        // App Details
-        assertThat(jsonObject.getInt("app_platform")).isEqualTo(2);
-        assertThat(jsonObject.getString("app_name")).isEqualTo("MoPub Sample App");
-        assertThat(jsonObject.getString("app_package_name")).isEqualTo("com.mopub.simpleadsdemo");
-        assertThat(jsonObject.getString("app_version")).isEqualTo("1.0");
-
-        // Client Details
-        assertThat(jsonObject.getString("client_advertising_id")).isEqualTo("ifa:XXXX");
-        assertThat(jsonObject.getBoolean("client_do_not_track")).isEqualTo(false);
-
-        // Device Details
-        assertThat(jsonObject.getString("device_manufacturer")).isEqualTo("LGE");
-        assertThat(jsonObject.getString("device_model")).isEqualTo("Nexus 5");
-        assertThat(jsonObject.getString("device_product")).isEqualTo("hammerhead");
-        assertThat(jsonObject.getString("device_os_version")).isEqualTo("5.0");
-        assertThat(jsonObject.getInt("device_screen_width_px")).isEqualTo(1080);
-        assertThat(jsonObject.getInt("device_screen_height_px")).isEqualTo(1920);
-
-        // Geo Details
-        assertThat(jsonObject.getDouble("geo_lat")).isEqualTo(37.7833);
-        assertThat(jsonObject.getDouble("geo_lon")).isEqualTo(-122.4183333);
-        assertThat(jsonObject.getDouble("geo_accuracy_radius_meters")).isEqualTo(10.0);
-
-        // Performance Details
-        assertThat(jsonObject.getDouble("perf_duration_ms")).isEqualTo(100.0);
-
-        // Network Details
-        assertThat(jsonObject.getInt("network_type")).isEqualTo(ClientMetadata.MoPubNetworkType.WIFI.getId());
-        assertThat(jsonObject.getString("network_operator_code")).isEqualTo("310410");
-        assertThat(jsonObject.getString("network_operator_name")).isEqualTo("AT&T");
-        assertThat(jsonObject.getString("network_iso_country_code")).isEqualTo("US");
-        assertThat(jsonObject.getString("network_sim_code")).isEqualTo("network_sim_code");
-        assertThat(jsonObject.getString("network_sim_operator_name")).isEqualTo("network_operator_name");
-        assertThat(jsonObject.getString("network_sim_iso_country_code")).isEqualTo("US");
-
-        // Request Details
-        assertThat(jsonObject.getString("req_id")).isEqualTo("b550796074da4559a27c5072dcba2b27");
-        assertThat(jsonObject.getInt("req_status_code")).isEqualTo(200);
-        assertThat(jsonObject.getString("req_uri")).isEqualTo("https://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca");
-        assertThat(jsonObject.getInt("req_retries")).isEqualTo(0);
-
-        // Timestamp Details
-        assertThat(jsonObject.getLong("timestamp_client")).isEqualTo(1416447053472L);
-    }
-}
-
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/EventTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/EventTest.java
deleted file mode 100644
index 3384f75e..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/event/EventTest.java
+++ /dev/null
@@ -1,31 +0,0 @@
-package com.mopub.common.event;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class EventTest {
-
-    private Event subject;
-
-    @Before
-    public void setUp() {
-        subject = new Event.Builder(BaseEvent.Name.AD_REQUEST, BaseEvent.Category.REQUESTS, 0.10000123).build();
-    }
-
-    @Test
-    public void constructor_shouldCorrectlyAssignScribeCategoryFromBuilder() {
-        assertThat(subject.getName()).isEqualTo(BaseEvent.Name.AD_REQUEST);
-        assertThat(subject.getCategory()).isEqualTo(BaseEvent.Category.REQUESTS);
-        assertThat(subject.getSamplingRate()).isEqualTo(0.10000123);
-        assertThat(subject.getScribeCategory()).isEqualTo(BaseEvent.ScribeCategory.EXCHANGE_CLIENT_EVENT);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/MoPubEventsTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/MoPubEventsTest.java
deleted file mode 100644
index 2bf68573..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/event/MoPubEventsTest.java
+++ /dev/null
@@ -1,54 +0,0 @@
-package com.mopub.common.event;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import java.util.ArrayList;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class MoPubEventsTest {
-
-    @Before
-    public void setUp() {
-        MoPubEvents.setEventDispatcher(null);
-    }
-
-    @Test
-    public void getDispatcher_shouldReturnSingletonEventDispatcherWithScribeEventRecorder() throws Exception {
-        EventDispatcher eventDispatcher = MoPubEvents.getDispatcher();
-        EventDispatcher eventDispatcher2 = MoPubEvents.getDispatcher();
-
-        assertThat(eventDispatcher).isEqualTo(eventDispatcher2);
-
-        Iterable<EventRecorder> eventRecorderIterable = eventDispatcher.getEventRecorders();
-        ArrayList<EventRecorder> eventRecorders = new ArrayList<EventRecorder>();
-        for (EventRecorder recorder : eventRecorderIterable) {
-            eventRecorders.add(recorder);
-        }
-
-        assertThat(eventRecorders.size()).isEqualTo(1);
-        assertThat(eventRecorders.get(0)).isInstanceOf(ScribeEventRecorder.class);
-    }
-
-    @Test
-    public void log_shouldDispatchEvent() throws Exception {
-        EventDispatcher mockEventDispatcher = mock(EventDispatcher.class);
-        MoPubEvents.setEventDispatcher(mockEventDispatcher);
-
-        Event mockEvent = mock(Event.class);
-        MoPubEvents.log(mockEvent);
-
-        verify(mockEventDispatcher).dispatch(mockEvent);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/ScribeEventRecorderTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/ScribeEventRecorderTest.java
deleted file mode 100644
index 7305cc7b..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/event/ScribeEventRecorderTest.java
+++ /dev/null
@@ -1,213 +0,0 @@
-package com.mopub.common.event;
-
-import android.os.Handler;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.network.ScribeBackoffPolicy;
-import com.mopub.network.ScribeRequest;
-import com.mopub.network.ScribeRequestManager;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.annotation.Config;
-
-import java.util.List;
-import java.util.Queue;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyLong;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class ScribeEventRecorderTest {
-
-    private ScribeEventRecorder subject;
-    @Mock private EventSampler mockEventSampler;
-    @Mock private Queue<BaseEvent> mockQueue;
-    @Mock private EventSerializer mockEventSerializer;
-    @Mock private ScribeRequestManager mockScribeRequestManager;
-    @Mock private Handler mockHandler;
-    @Mock private Event mockEvent;
-
-    @Before
-    public void setUp() {
-        subject = new ScribeEventRecorder(
-                mockEventSampler,
-                mockQueue,
-                mockEventSerializer,
-                mockScribeRequestManager,
-                mockHandler
-        );
-
-        when(mockEventSampler.sample(any(Event.class))).thenReturn(true);
-    }
-
-    @Test
-    public void record_shouldSampleEvent() throws Exception {
-        subject.record(mockEvent);
-        verify(mockEventSampler).sample(mockEvent);
-    }
-
-    @Test
-    public void record_withQueueSizeBelowSendThreshold_shouldQueueEvent_shouldNotSendEvents_shouldScheduleNextPoll() throws Exception {
-        when(mockQueue.size()).thenReturn(99);
-
-        subject.record(mockEvent);
-
-        verify(mockQueue).add(mockEvent);
-        verify(mockScribeRequestManager, never()).makeRequest(any(ScribeRequest.ScribeRequestFactory.class), any(ScribeBackoffPolicy.class));
-        verify(mockHandler).postDelayed(any(ScribeEventRecorder.PollingRunnable.class), eq(Long.valueOf(120000)));
-    }
-
-    @Test
-    public void record_withQueueSizeAtSendThreshold_shouldQueueEvent_shouldSendEvents_shouldScheduleNextPoll() throws Exception {
-        when(mockQueue.size()).thenReturn(100);
-        when(mockQueue.peek()).thenReturn(mockEvent);
-        when(mockQueue.poll()).thenReturn(mockEvent);
-
-        subject.record(mockEvent);
-
-        verify(mockQueue).add(mockEvent);
-        verify(mockScribeRequestManager).makeRequest(any(ScribeRequest.ScribeRequestFactory.class), any(ScribeBackoffPolicy.class));
-        verify(mockHandler).postDelayed(any(ScribeEventRecorder.PollingRunnable.class), eq(Long.valueOf(120000)));
-    }
-
-    @Test
-    public void record_withQueueSizeAtQueueLimit_shouldNotQueueEvent_shouldNotSendEvents_shouldNotScheduleNextPoll() throws Exception {
-        when(mockQueue.size()).thenReturn(500);
-
-        subject.record(mockEvent);
-
-        verify(mockQueue, never()).add(mockEvent);
-        verify(mockScribeRequestManager, never()).makeRequest(any(ScribeRequest.ScribeRequestFactory.class), any(ScribeBackoffPolicy.class));
-        verify(mockHandler, never()).postDelayed(any(ScribeEventRecorder.PollingRunnable.class), anyLong());
-    }
-
-    @Test
-    public void sendEvents_shouldDequeueEvents_shouldAddRequestToScribeRequestManager() throws Exception {
-        when(mockQueue.size()).thenReturn(1);
-        when(mockQueue.peek()).thenReturn(mockEvent).thenReturn(null);
-        when(mockQueue.poll()).thenReturn(mockEvent).thenReturn(null);
-        doAnswer(new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocation) throws Throwable {
-                ScribeRequest scribeRequest = ((ScribeRequest.ScribeRequestFactory) invocation.getArguments()[0]).createRequest(null);
-                assertThat(scribeRequest.getUrl()).isEqualTo("https://analytics.mopub.com/i/jot/exchange_client_event");
-                assertThat(scribeRequest.getEvents()).containsOnly(mockEvent);
-                return null;
-            }
-        }).when(mockScribeRequestManager).makeRequest(any(ScribeRequest.ScribeRequestFactory.class), any(ScribeBackoffPolicy.class));
-
-        subject.sendEvents();
-
-        verify(mockQueue, times(2)).peek();
-        verify(mockQueue, times(1)).poll();
-        verify(mockScribeRequestManager).makeRequest(any(ScribeRequest.ScribeRequestFactory.class), any(ScribeBackoffPolicy.class));
-    }
-
-    @Test
-    public void sendEvents_withRequestInFlightShouldReturnFast() throws Exception {
-        when(mockScribeRequestManager.isAtCapacity()).thenReturn(true);
-
-        subject.sendEvents();
-
-        verify(mockQueue, never()).poll();
-        verify(mockScribeRequestManager, never()).makeRequest(any(ScribeRequest.ScribeRequestFactory.class), any(ScribeBackoffPolicy.class));
-    }
-    
-    @Test
-    public void dequeEvents_withQueueSizeGreaterThanEventSendThreshhold_shouldDequeueUpToEventSendThreshhold() throws Exception {
-        when(mockQueue.size()).thenReturn(101);
-        when(mockQueue.peek()).thenReturn(mockEvent);
-        when(mockQueue.poll()).thenReturn(mockEvent);
-
-        List<BaseEvent> events = subject.dequeueEvents();
-
-        verify(mockQueue, times(101)).peek();
-        verify(mockQueue, times(100)).poll();
-        assertThat(events.size()).isEqualTo(100);
-    }
-
-    @Test
-    public void dequeEvents_withQueueSizeLessThanEventSendThreshhold_shouldDequeueQueueSize() throws Exception {
-        when(mockQueue.size()).thenReturn(99);
-
-        when(mockQueue.peek()).thenAnswer(new Answer<BaseEvent>() {
-            int i;
-            @Override
-            public BaseEvent answer(InvocationOnMock invocation) throws Throwable {
-                return i++ < 99 ? mockEvent : null;
-            }
-        });
-
-        when(mockQueue.poll()).thenAnswer(new Answer<BaseEvent>() {
-            int i;
-            @Override
-            public BaseEvent answer(InvocationOnMock invocation) throws Throwable {
-                return i++ < 99 ? mockEvent : null;
-            }
-        });
-
-        List<BaseEvent> events = subject.dequeueEvents();
-
-        verify(mockQueue, times(100)).peek();
-        verify(mockQueue, times(99)).poll();
-        assertThat(events.size()).isEqualTo(99);
-    }
-
-    @Test
-    public void scheduleNextPoll_shouldPostDelayedPollingRunnable() throws Exception {
-        when(mockHandler.hasMessages(0)).thenReturn(false);
-        when(mockQueue.isEmpty()).thenReturn(false);
-
-        subject.scheduleNextPoll();
-
-        verify(mockHandler).postDelayed(any(ScribeEventRecorder.PollingRunnable.class), eq(Long.valueOf(120000)));
-    }
-
-    @Test
-    public void scheduleNextPoll_withPollScheduled_shouldNotPostDelayedPollingRunnable() throws Exception {
-        when(mockHandler.hasMessages(0)).thenReturn(true);
-        when(mockQueue.isEmpty()).thenReturn(false);
-
-        subject.scheduleNextPoll();
-
-        verify(mockHandler, never()).postDelayed(any(ScribeEventRecorder.PollingRunnable.class), anyLong());
-    }
-
-    @Test
-    public void scheduleNextPoll_withEmptyRequestQueue_shouldNotPostDelayedPollingRunnable() throws Exception {
-        when(mockHandler.hasMessages(0)).thenReturn(false);
-        when(mockQueue.isEmpty()).thenReturn(true);
-
-        subject.scheduleNextPoll();
-
-        verify(mockHandler, never()).postDelayed(any(ScribeEventRecorder.PollingRunnable.class), anyLong());
-    }
-
-    @Test
-    public void PollingRunnable_run_shouldSendEvents_shouldScheduleNextPoll() throws Exception {
-        when(mockQueue.size()).thenReturn(100);
-        when(mockQueue.peek()).thenReturn(mockEvent);
-        when(mockQueue.poll()).thenReturn(mockEvent);
-
-        ScribeEventRecorder.PollingRunnable pollingRunnable = subject.new PollingRunnable();
-        pollingRunnable.run();
-
-        verify(mockScribeRequestManager).makeRequest(any(ScribeRequest.ScribeRequestFactory.class), any(ScribeBackoffPolicy.class));
-        verify(mockHandler).postDelayed(any(ScribeEventRecorder.PollingRunnable.class), eq(Long.valueOf(120000)));
-    }
-}
-
diff --git a/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java b/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
deleted file mode 100644
index 19552de1..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
+++ /dev/null
@@ -1,111 +0,0 @@
-package com.mopub.common.test.support;
-
-import com.mopub.common.CacheService;
-import com.mopub.common.ClientMetadata;
-import com.mopub.common.MoPub;
-import com.mopub.common.MoPubHttpUrlConnection;
-import com.mopub.common.Preconditions;
-import com.mopub.common.event.EventDispatcher;
-import com.mopub.common.event.MoPubEvents;
-import com.mopub.common.factories.MethodBuilderFactory;
-import com.mopub.common.util.AsyncTasks;
-import com.mopub.common.util.DateAndTime;
-import com.mopub.common.util.Reflection;
-import com.mopub.common.util.test.support.ShadowAsyncTasks;
-import com.mopub.common.util.test.support.ShadowMoPubHttpUrlConnection;
-import com.mopub.common.util.test.support.ShadowReflection;
-import com.mopub.common.util.test.support.TestDateAndTime;
-import com.mopub.common.util.test.support.TestMethodBuilderFactory;
-import com.mopub.mobileads.factories.AdViewControllerFactory;
-import com.mopub.mobileads.factories.CustomEventBannerAdapterFactory;
-import com.mopub.mobileads.factories.CustomEventBannerFactory;
-import com.mopub.mobileads.factories.CustomEventInterstitialAdapterFactory;
-import com.mopub.mobileads.factories.CustomEventInterstitialFactory;
-import com.mopub.mobileads.factories.HtmlBannerWebViewFactory;
-import com.mopub.mobileads.factories.HtmlInterstitialWebViewFactory;
-import com.mopub.mobileads.factories.MoPubViewFactory;
-import com.mopub.mobileads.factories.MraidControllerFactory;
-import com.mopub.mobileads.factories.VastManagerFactory;
-import com.mopub.mobileads.test.support.TestAdViewControllerFactory;
-import com.mopub.mobileads.test.support.TestCustomEventBannerAdapterFactory;
-import com.mopub.mobileads.test.support.TestCustomEventBannerFactory;
-import com.mopub.mobileads.test.support.TestCustomEventInterstitialAdapterFactory;
-import com.mopub.mobileads.test.support.TestCustomEventInterstitialFactory;
-import com.mopub.mobileads.test.support.TestHtmlBannerWebViewFactory;
-import com.mopub.mobileads.test.support.TestHtmlInterstitialWebViewFactory;
-import com.mopub.mobileads.test.support.TestMoPubViewFactory;
-import com.mopub.mobileads.test.support.TestMraidControllerFactory;
-import com.mopub.mobileads.test.support.TestVastManagerFactory;
-import com.mopub.nativeads.factories.CustomEventNativeFactory;
-import com.mopub.nativeads.test.support.TestCustomEventNativeFactory;
-
-import org.junit.runners.model.InitializationError;
-import org.mockito.MockitoAnnotations;
-import org.robolectric.DefaultTestLifecycle;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.TestLifecycle;
-import org.robolectric.internal.bytecode.InstrumentationConfiguration;
-import org.robolectric.util.concurrent.RoboExecutorService;
-
-import static com.mopub.common.MoPub.LocationAwareness;
-import static org.mockito.Mockito.mock;
-
-public class SdkTestRunner extends RobolectricGradleTestRunner {
-
-    public SdkTestRunner(Class<?> testClass) throws InitializationError {
-        super(testClass);
-    }
-
-    @Override
-    public InstrumentationConfiguration createClassLoaderConfig() {
-        InstrumentationConfiguration.Builder builder = InstrumentationConfiguration.newBuilder();
-        builder.addInstrumentedClass(AsyncTasks.class.getName());
-        builder.addInstrumentedClass(MoPubHttpUrlConnection.class.getName());
-        builder.addInstrumentedClass(Reflection.class.getName());
-        // To mitigate: https://github.com/robolectric/robolectric/issues/2129
-        builder.addInstrumentedPackage("org.xyz.testMp");
-        return builder.build();
-    }
-
-    @Override
-    protected Class<? extends TestLifecycle> getTestLifecycleClass() {
-        return TestLifeCycleWithInjection.class;
-    }
-
-    public static class TestLifeCycleWithInjection extends DefaultTestLifecycle {
-        @Override
-        public void prepareTest(Object test) {
-            ClientMetadata.clearForTesting();
-
-            // Precondition exceptions should not be thrown during tests so that we can test
-            // for unexpected behavior even after failing a precondition.
-            Preconditions.NoThrow.setStrictMode(false);
-
-            DateAndTime.setInstance(new TestDateAndTime());
-            CustomEventBannerFactory.setInstance(new TestCustomEventBannerFactory());
-            CustomEventInterstitialFactory.setInstance(new TestCustomEventInterstitialFactory());
-            CustomEventBannerAdapterFactory.setInstance(new TestCustomEventBannerAdapterFactory());
-            MoPubViewFactory.setInstance(new TestMoPubViewFactory());
-            CustomEventInterstitialAdapterFactory.setInstance(new TestCustomEventInterstitialAdapterFactory());
-            HtmlBannerWebViewFactory.setInstance(new TestHtmlBannerWebViewFactory());
-            HtmlInterstitialWebViewFactory.setInstance(new TestHtmlInterstitialWebViewFactory());
-            AdViewControllerFactory.setInstance(new TestAdViewControllerFactory());
-            VastManagerFactory.setInstance(new TestVastManagerFactory());
-            MethodBuilderFactory.setInstance(new TestMethodBuilderFactory());
-            CustomEventNativeFactory.setInstance(new TestCustomEventNativeFactory());
-            MraidControllerFactory.setInstance(new TestMraidControllerFactory());
-
-            ShadowAsyncTasks.reset();
-            ShadowMoPubHttpUrlConnection.reset();
-            ShadowReflection.reset();
-            MoPubEvents.setEventDispatcher(mock(EventDispatcher.class));
-            MoPub.setLocationAwareness(LocationAwareness.NORMAL);
-            MoPub.setLocationPrecision(6);
-
-            MockitoAnnotations.initMocks(test);
-
-            AsyncTasks.setExecutor(new RoboExecutorService());
-            CacheService.clearAndNullCaches();
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java
deleted file mode 100644
index 2d44074a..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java
+++ /dev/null
@@ -1,80 +0,0 @@
-package com.mopub.common.util;
-
-import android.os.AsyncTask;
-import android.os.Handler;
-import android.os.Looper;
-
-import com.mopub.mobileads.test.support.ThreadUtils;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.shadows.ShadowLooper;
-
-import java.util.concurrent.Executor;
-
-import static junit.framework.Assert.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.verify;
-
-@RunWith(RobolectricTestRunner.class)
-public class AsyncTasksTest {
-
-    private AsyncTask<String, ?, ?> asyncTask;
-
-    @Before
-    public void setUp() throws Exception {
-        asyncTask = spy(new AsyncTask<String, Void, Void>() {
-            @Override
-            protected Void doInBackground(String... strings) {
-                return null;
-            }
-        });
-    }
-
-    @Test
-    public void safeExecuteOnExecutor_withNullParam_shouldCallExecuteWithParamsWithExecutor() throws Exception {
-        AsyncTasks.safeExecuteOnExecutor(asyncTask, (String) null);
-
-        verify(asyncTask).executeOnExecutor(any(Executor.class), eq((String) null));
-    }
-
-
-    @Test(expected = NullPointerException.class)
-    public void safeExecuteOnExecutor_withNullAsyncTask_shouldThrowNullPointerException() throws Exception {
-        AsyncTasks.safeExecuteOnExecutor(null, "hello");
-    }
-
-
-    @Test
-    public void safeExecuteOnExecutor_runningOnABackgroundThread_shouldThrowIllegalStateException() throws Exception {
-        ensureFastFailWhenTaskIsRunOnBackgroundThread();
-    }
-
-    private void ensureFastFailWhenTaskIsRunOnBackgroundThread() {
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    AsyncTasks.safeExecuteOnExecutor(asyncTask, "hello");
-
-                    Handler handler = new Handler(Looper.getMainLooper());
-                    handler.post(new Runnable() {
-                        @Override
-                        public void run() {
-                            fail("Should have thrown IllegalStateException");
-                        }
-                    });
-                } catch (IllegalStateException exception) {
-                    // pass
-                }
-            }
-        }).start();
-
-        ThreadUtils.pause(10);
-        ShadowLooper.runUiThreadTasks();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/DeviceUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/DeviceUtilsTest.java
deleted file mode 100644
index 18932043..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/DeviceUtilsTest.java
+++ /dev/null
@@ -1,164 +0,0 @@
-package com.mopub.common.util;
-
-import android.Manifest;
-import android.app.Activity;
-import android.content.pm.ActivityInfo;
-import android.content.res.Configuration;
-import android.content.res.Resources;
-import android.view.Surface;
-
-import com.mopub.common.CreativeOrientation;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.nativeads.test.support.MoPubShadowDisplay;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.Shadows;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class DeviceUtilsTest {
-
-    private Activity testActivity;
-    private Resources testResources;
-
-    @Before
-    public void setup() {
-        testActivity = Robolectric.buildActivity(Activity.class).create().get();
-        testResources = testActivity.getResources();
-    }
-
-    @Test
-    public void getOrientation_whenReverseLandscape_shouldReturnReverseLandscape() {
-        testResources.getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
-        MoPubShadowDisplay.setStaticRotation(Surface.ROTATION_270);
-
-        assertThat(DeviceUtils.getScreenOrientation(testActivity)).isEqualTo(ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE);
-    }
-
-    @Test
-    public void getOrientation_whenLandscape_shouldReturnLandscape() {
-        testResources.getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
-        MoPubShadowDisplay.setStaticRotation(Surface.ROTATION_90);
-
-        assertThat(DeviceUtils.getScreenOrientation(testActivity)).isEqualTo(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
-    }
-
-    @Test
-    public void getOrientation_whenPortrait_shouldReturnPortrait() {
-        testResources.getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
-        MoPubShadowDisplay.setStaticRotation(Surface.ROTATION_0);
-
-        assertThat(DeviceUtils.getScreenOrientation(testActivity)).isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-    }
-
-    @Test
-    public void getOrientation_whenAlsoPortrait_shouldReturnPortrait() {
-        testResources.getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
-        MoPubShadowDisplay.setStaticRotation(Surface.ROTATION_270);
-
-        assertThat(DeviceUtils.getScreenOrientation(testActivity)).isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-    }
-
-    @Test
-    public void getOrientation_whenReversePortrait_shouldReturnReversePortrait() {
-        testResources.getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
-        MoPubShadowDisplay.setStaticRotation(Surface.ROTATION_180);
-
-        assertThat(DeviceUtils.getScreenOrientation(testActivity)).isEqualTo(ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT);
-    }
-
-    @Test
-    public void getOrientation_whenAlsoReversePortrait_shouldReturnReversePortrait() {
-        testResources.getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
-        MoPubShadowDisplay.setStaticRotation(Surface.ROTATION_90);
-
-        assertThat(DeviceUtils.getScreenOrientation(testActivity)).isEqualTo(ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT);
-    }
-    
-    @Test
-    public void lockOrientation_toLandscapeWhenLandscape_shouldRemainTheSame() throws Exception {
-        testResources.getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
-        MoPubShadowDisplay.setStaticRotation(Surface.ROTATION_90);
-
-        DeviceUtils.lockOrientation(testActivity, CreativeOrientation.LANDSCAPE);
-        assertThat(testActivity.getRequestedOrientation()).isEqualTo(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
-    }
-
-    @Test
-    public void lockOrientation_toLandscapeWhenReverseLandscape_shouldBeReverseLandscape() {
-
-        testResources.getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
-        MoPubShadowDisplay.setStaticRotation(Surface.ROTATION_180);  // Reverse landscape
-
-        DeviceUtils.lockOrientation(testActivity, CreativeOrientation.LANDSCAPE);
-        assertThat(testActivity.getRequestedOrientation()).isEqualTo(ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE);
-    }
-
-    @Test
-    public void lockOrientation_toLandscapeWhenPortrait_shouldBeLandscape() {
-        testResources.getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
-        MoPubShadowDisplay.setStaticRotation(Surface.ROTATION_180);  // Reverse portrait
-
-        DeviceUtils.lockOrientation(testActivity, CreativeOrientation.LANDSCAPE);
-        assertThat(testActivity.getRequestedOrientation()).isEqualTo(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
-    }
-
-    @Test
-    public void lockOrientation_toPortraitWhenPortrait_shouldRemainPortrait() {
-
-        testResources.getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
-        MoPubShadowDisplay.setStaticRotation(Surface.ROTATION_0);
-
-        DeviceUtils.lockOrientation(testActivity, CreativeOrientation.PORTRAIT);
-        assertThat(testActivity.getRequestedOrientation()).isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-    }
-
-    @Test
-    public void lockOrientation_toPortraitWhenReversePortrait_shouldRemainReversePortrait() {
-        testResources.getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
-        MoPubShadowDisplay.setStaticRotation(Surface.ROTATION_180);
-
-        DeviceUtils.lockOrientation(testActivity, CreativeOrientation.PORTRAIT);
-        assertThat(testActivity.getRequestedOrientation()).isEqualTo(ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT);
-    }
-
-    @Test
-    public void lockOrientation_toPortraitWhenLandscape_shouldBeLandscape() {
-        testResources.getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
-        MoPubShadowDisplay.setStaticRotation(Surface.ROTATION_0);  // Reverse landscape
-
-        DeviceUtils.lockOrientation(testActivity, CreativeOrientation.PORTRAIT);
-        assertThat(testActivity.getRequestedOrientation()).isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-    }
-
-    @Test
-    public void isPermissionGranted_withPermissionGranted_shouldReturnTrue() {
-        Shadows.shadowOf(testActivity).grantPermissions(Manifest.permission.ACCESS_FINE_LOCATION);
-
-        assertThat(DeviceUtils.isPermissionGranted(testActivity, Manifest.permission.ACCESS_FINE_LOCATION)).isTrue();
-    }
-
-    @Test
-    public void isPermissionGranted_withPermissionNotGranted_shouldReturnFalse() {
-        Shadows.shadowOf(testActivity).grantPermissions(Manifest.permission.ACCESS_COARSE_LOCATION);
-
-        assertThat(DeviceUtils.isPermissionGranted(testActivity, Manifest.permission.ACCESS_FINE_LOCATION)).isFalse();
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void isPermissionGranted_withNullContext_shouldThrowNPE() {
-        DeviceUtils.isPermissionGranted(null, Manifest.permission.INTERNET);
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void isPermissionGranted_withNullPermission_shouldThrowNPE() {
-        DeviceUtils.isPermissionGranted(testActivity, null);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/DipsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/DipsTest.java
deleted file mode 100644
index 283038e0..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/DipsTest.java
+++ /dev/null
@@ -1,45 +0,0 @@
-package com.mopub.common.util;
-
-import android.app.Activity;
-import android.content.res.Resources;
-import android.util.DisplayMetrics;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class DipsTest {
-
-    @Mock private Activity activity;
-    @Mock private Resources resources;
-
-    @Before
-    public void setUp() {
-        DisplayMetrics displayMetrics = new DisplayMetrics();
-        displayMetrics.widthPixels = 480;
-        displayMetrics.heightPixels = 800;
-        displayMetrics.density = 2;
-        when(activity.getResources()).thenReturn(resources);
-        when(resources.getDisplayMetrics()).thenReturn(displayMetrics);
-    }
-
-    @Test
-    public void screenWidthAsIntDips_shouldReturnTheWidthAsDips() throws Exception {
-        assertThat(Dips.screenWidthAsIntDips(activity)).isEqualTo(240);
-    }
-
-    @Test
-    public void screenHeightAsIntDips_shouldReturnTheHeightAsDips() throws Exception {
-        assertThat(Dips.screenHeightAsIntDips(activity)).isEqualTo(400);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/DrawablesTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/DrawablesTest.java
deleted file mode 100644
index 3c8af8cd..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/DrawablesTest.java
+++ /dev/null
@@ -1,24 +0,0 @@
-package com.mopub.common.util;
-
-import android.app.Activity;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(RobolectricTestRunner.class)
-public class DrawablesTest {
-    @Test
-    public void createDrawable_shouldNotCacheDrawables() throws Exception {
-        assertThat(Drawables.BACKGROUND.createDrawable(new Activity()))
-                .isNotSameAs(Drawables.BACKGROUND.createDrawable(new Activity()));
-    }
-
-    @Test
-    public void getBitmap_shouldCacheBitmap() throws Exception {
-        assertThat(Drawables.BACKGROUND.getBitmap())
-                .isSameAs(Drawables.BACKGROUND.getBitmap());
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/FilesTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/FilesTest.java
deleted file mode 100644
index cffb7ace..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/FilesTest.java
+++ /dev/null
@@ -1,132 +0,0 @@
-package com.mopub.common.util;
-
-import android.app.Activity;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.File;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
-
-@RunWith(RobolectricTestRunner.class)
-public class FilesTest {
-
-    private Activity activity;
-    private String expectedDirectoryPath;
-    private File expectedDirectory;
-    private String expectedFilePath;
-
-    @Before
-    public void setup() throws Exception {
-        activity = Robolectric.buildActivity(Activity.class).create().get();
-
-        expectedDirectoryPath = activity.getFilesDir() + File.separator + "testDirectory";
-        expectedFilePath = activity.getFilesDir() + File.separator + "test.txt";
-    }
-
-    @After
-    public void tearDown() throws Exception {
-        new File(expectedDirectoryPath).delete();
-    }
-
-    @Test
-    public void createDirectory_shouldReturnNewDirectory() throws Exception {
-        File directory = Files.createDirectory(expectedDirectoryPath);
-
-        assertThat(directory.exists()).isTrue();
-        assertThat(directory.isDirectory()).isTrue();
-    }
-
-    @Test
-    public void createDirectory_whenDirectoryAlreadyExists_shouldReturnTheDirectory() throws Exception {
-        expectedDirectory = new File(expectedDirectoryPath);
-        expectedDirectory.mkdirs();
-
-        assertThat(expectedDirectory.exists()).isTrue();
-        assertThat(expectedDirectory.isDirectory()).isTrue();
-
-        File directory = Files.createDirectory(expectedDirectoryPath);
-
-        assertThat(directory.exists()).isTrue();
-        assertThat(directory.isDirectory()).isTrue();
-    }
-
-    @Test
-    public void createDirectory_whenFileAlreadyExistsButIsNotADirectory_shouldReturnNull() throws Exception {
-        File file = new File(expectedFilePath);
-        file.createNewFile();
-
-        assertThat(file.exists()).isTrue();
-        assertThat(file.isDirectory()).isFalse();
-
-        File directory = Files.createDirectory(expectedFilePath);
-
-        assertThat(directory).isNull();
-
-        file.delete();
-    }
-
-    @Test
-    public void createDirectory_whenAbsolutePathIsNull_shouldReturnNull() throws Exception {
-        File directory = Files.createDirectory(null);
-
-        assertThat(directory).isNull();
-    }
-
-    @Test
-    public void createDirectory_withExternalStoragePath_withoutRelevantPermission_shouldReturnNullAndNotThrowException() throws Exception {
-        String filePath = activity.getExternalCacheDir() + File.separator + "testFile.txt";
-        File file = new File(filePath);
-
-        Files.createDirectory(filePath);
-
-        // pass
-
-        file.delete();
-    }
-
-    @Test
-    public void intLength_whenFileHasLengthLessThanMaxInt_shouldReturnThatLength() throws Exception {
-        File file = mock(File.class);
-        stub(file.length()).toReturn(1234L);
-
-        int length = Files.intLength(file);
-
-        assertThat(length).isEqualTo(1234);
-    }
-
-    @Test
-    public void intLength_whenFileHasLengthGreaterThanMaxInt_shouldReturnMaxInt() throws Exception {
-        File file = mock(File.class);
-        stub(file.length()).toReturn(Integer.MAX_VALUE + 100L);
-
-        int length = Files.intLength(file);
-
-        assertThat(length).isEqualTo(Integer.MAX_VALUE);
-    }
-
-    @Test
-    public void intLength_whenFileDoesNotExist_shouldReturnZero() throws Exception {
-        File file = new File(expectedFilePath);
-
-        assertThat(file.exists()).isFalse();
-
-        int length = Files.intLength(file);
-
-        assertThat(length).isEqualTo(0);
-    }
-
-    @Test
-    public void intLength_whenFileIsNull_shouldReturnZero() throws Exception {
-        int length = Files.intLength(null);
-
-        assertThat(length).isEqualTo(0);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java
deleted file mode 100644
index 159d9b32..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java
+++ /dev/null
@@ -1,249 +0,0 @@
-package com.mopub.common.util;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.PackageManager;
-import android.content.pm.ResolveInfo;
-import android.net.Uri;
-import android.os.Bundle;
-
-import com.mopub.common.MoPubBrowser;
-import com.mopub.exceptions.IntentNotResolvableException;
-import com.mopub.exceptions.UrlParseException;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RuntimeEnvironment;
-import org.robolectric.shadows.ShadowApplication;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
-
-@RunWith(RobolectricTestRunner.class)
-public class IntentsTest {
-    private Activity activityContext;
-    private Context applicationContext;
-
-    @Before
-    public void setUp() {
-        activityContext = Robolectric.buildActivity(Activity.class).create().get();
-        applicationContext = activityContext.getApplicationContext();
-    }
-
-    @Test
-    public void startActivity_withActivityContext_shouldStartActivityWithNoNewFlags() throws IntentNotResolvableException {
-        Intents.startActivity(activityContext, new Intent());
-
-        final Intent intent = ShadowApplication.getInstance().peekNextStartedActivity();
-        assertThat(Utils.bitMaskContainsFlag(intent.getFlags(), FLAG_ACTIVITY_NEW_TASK)).isFalse();
-    }
-
-    @Test
-    public void getStartActivityIntent_withActivityContext_shouldReturnIntentWithoutNewTaskFlag() throws Exception {
-        Context context = new Activity();
-
-        final Intent intent = Intents.getStartActivityIntent(context, MoPubBrowser.class, null);
-
-        assertThat(intent.getComponent().getClassName()).isEqualTo(MoPubBrowser.class.getName());
-        assertThat(Utils.bitMaskContainsFlag(intent.getFlags(), FLAG_ACTIVITY_NEW_TASK)).isFalse();
-        assertThat(intent.getExtras()).isNull();
-    }
-
-    @Test
-    public void getStartActivityIntent_withApplicationContext_shouldReturnIntentWithNewTaskFlag() throws Exception {
-        Context context = new Activity().getApplicationContext();
-
-        final Intent intent = Intents.getStartActivityIntent(context, MoPubBrowser.class, null);
-
-        assertThat(intent.getComponent().getClassName()).isEqualTo(MoPubBrowser.class.getName());
-        assertThat(Utils.bitMaskContainsFlag(intent.getFlags(), FLAG_ACTIVITY_NEW_TASK)).isTrue();
-        assertThat(intent.getExtras()).isNull();
-    }
-
-    @Test
-    public void getStartActivityIntent_withBundle_shouldReturnIntentWithExtras() throws Exception {
-        Context context = new Activity();
-        Bundle bundle = new Bundle();
-        bundle.putString("arbitrary key", "even more arbitrary value");
-
-        final Intent intent = Intents.getStartActivityIntent(context, MoPubBrowser.class, bundle);
-
-        assertThat(intent.getComponent().getClassName()).isEqualTo(MoPubBrowser.class.getName());
-        assertThat(Utils.bitMaskContainsFlag(intent.getFlags(), FLAG_ACTIVITY_NEW_TASK)).isFalse();
-        assertThat(intent.getExtras()).isEqualTo(bundle);
-    }
-
-    @Test
-    public void deviceCanHandleIntent_whenActivityCanResolveIntent_shouldReturnTrue() throws Exception {
-        Context context = mock(Context.class);
-        PackageManager packageManager = mock(PackageManager.class);
-
-        List<ResolveInfo> resolveInfos = new ArrayList<ResolveInfo>();
-        resolveInfos.add(new ResolveInfo());
-
-        stub(context.getPackageManager()).toReturn(packageManager);
-        Intent specificIntent = new Intent();
-        specificIntent.setData(Uri.parse("specificIntent:"));
-
-        stub(packageManager.queryIntentActivities(eq(specificIntent), eq(0))).toReturn(resolveInfos);
-
-        assertThat(Intents.deviceCanHandleIntent(context, specificIntent)).isTrue();
-    }
-
-    @Test
-    public void deviceCanHandleIntent_whenActivityCanNotResolveIntent_shouldReturnFalse() throws Exception {
-        Context context = mock(Context.class);
-        PackageManager packageManager = mock(PackageManager.class);
-
-        List<ResolveInfo> resolveInfos = new ArrayList<ResolveInfo>();
-        resolveInfos.add(new ResolveInfo());
-
-        stub(context.getPackageManager()).toReturn(packageManager);
-        Intent specificIntent = new Intent();
-        specificIntent.setData(Uri.parse("specificIntent:"));
-
-        Intent otherIntent = new Intent();
-        otherIntent.setData(Uri.parse("other:"));
-        stub(packageManager.queryIntentActivities(eq(specificIntent), eq(0))).toReturn(resolveInfos);
-
-        assertThat(Intents.deviceCanHandleIntent(context, otherIntent)).isFalse();
-    }
-
-    @Test
-    public void intentForNativeBrowserScheme_shouldProperlyHandleEncodedUrls() throws UrlParseException {
-        Intent intent;
-
-        intent = Intents.intentForNativeBrowserScheme(Uri.parse("mopubnativebrowser://navigate?url=https%3A%2F%2Fwww.example.com"));
-        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
-        assertThat(intent.getDataString()).isEqualTo("https://www.example.com");
-
-        intent = Intents.intentForNativeBrowserScheme(Uri.parse("mopubnativebrowser://navigate?url=https://www.example.com/?query=1&two=2"));
-        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
-        assertThat(intent.getDataString()).isEqualTo("https://www.example.com/?query=1");
-
-        intent = Intents.intentForNativeBrowserScheme(Uri.parse("mopubnativebrowser://navigate?url=https%3A%2F%2Fwww.example.com%2F%3Fquery%3D1%26two%3D2"));
-        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
-        assertThat(intent.getDataString()).isEqualTo("https://www.example.com/?query=1&two=2");
-    }
-
-    @Test(expected = UrlParseException.class)
-    public void intentForNativeBrowserScheme_whenNotMoPubNativeBrowser_shouldThrowException() throws UrlParseException {
-        Intents.intentForNativeBrowserScheme(Uri.parse("mailto://navigate?url=https://www.example.com"));
-    }
-
-    @Test(expected = UrlParseException.class)
-    public void intentForNativeBrowserScheme_whenNotNavigate_shouldThrowException() throws UrlParseException {
-        Intents.intentForNativeBrowserScheme(Uri.parse("mopubnativebrowser://getout?url=https://www.example.com"));
-    }
-
-    @Test(expected = UrlParseException.class)
-    public void intentForNativeBrowserScheme_whenUrlParameterMissing_shouldThrowException() throws UrlParseException {
-        Intents.intentForNativeBrowserScheme(Uri.parse("mopubnativebrowser://navigate"));
-    }
-
-    @Test
-    public void intentForShareTweetScheme_whenValidUri_shouldReturnShareTweetIntent() throws UrlParseException {
-        Intent intent;
-        final String shareMessage = "Check out @SpaceX's Tweet: https://twitter.com/SpaceX/status/596026229536460802";
-
-        intent = Intents.intentForShareTweet(Uri.parse("mopubshare://tweet?screen_name=SpaceX&tweet_id=596026229536460802"));
-        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_SEND);
-        assertThat(intent.getType()).isEqualTo("text/plain");
-        assertThat(intent.getStringExtra(Intent.EXTRA_SUBJECT)).isEqualTo(shareMessage);
-        assertThat(intent.getStringExtra(Intent.EXTRA_TEXT)).isEqualTo(shareMessage);
-    }
-
-    @Test(expected = UrlParseException.class)
-    public void intentForShareTweetScheme_whenWrongScheme_shouldThrowException() throws UrlParseException {
-        Intents.intentForShareTweet(Uri.parse("mailto://tweet?screen_name=SpaceX&tweet_id=596026229536460802"));
-    }
-
-    @Test(expected = UrlParseException.class)
-    public void intentForShareTweetScheme_whenWrongHost_shouldThrowException() throws UrlParseException {
-        Intents.intentForShareTweet(Uri.parse("mopubshare://twat?screen_name=SpaceX&tweet_id=596026229536460802"));
-    }
-
-    @Test(expected = UrlParseException.class)
-    public void intentForShareTweetScheme_whenScreenNameParameterMissing_shouldThrowException() throws UrlParseException {
-        Intents.intentForShareTweet(Uri.parse("mopubshare://tweet?foo=SpaceX&tweet_id=596026229536460802"));
-    }
-
-    @Test(expected = UrlParseException.class)
-    public void intentForShareTweetScheme_whenScreenNameParameterIsEmpty_shouldThrowException() throws UrlParseException {
-        Intents.intentForShareTweet(Uri.parse("mopubshare://tweet?screen_name=&tweet_id=596026229536460802"));
-    }
-
-    @Test(expected = UrlParseException.class)
-    public void intentForShareTweetScheme_whenTweetIdParameterMissing_shouldThrowException() throws UrlParseException {
-        Intents.intentForShareTweet(Uri.parse("mopubshare://tweet?screen_name=SpaceX&bar=596026229536460802"));
-    }
-
-    @Test(expected = UrlParseException.class)
-    public void intentForShareTweetScheme_whenTweetIdParameterIsEmpty_shouldThrowException() throws UrlParseException {
-        Intents.intentForShareTweet(Uri.parse("mopubshare://tweet?screen_name=SpaceX&tweet_id="));
-    }
-
-    @Test
-    public void launchIntentForUserClick_shouldStartActivity() throws Exception {
-        Intent intent = mock(Intent.class);
-
-        Intents.launchIntentForUserClick(applicationContext, intent, null);
-        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
-
-        assertThat(startedActivity).isNotNull();
-    }
-
-    @Test
-    public void launchApplicationUrl_withResolvableUrl_shouldOpenActivity() throws Exception {
-        final String url = "url_to_installed_app";
-        makeUrlResolvable(url);
-
-        Intents.launchApplicationUrl(activityContext, Uri.parse(url));
-        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
-
-        assertThat(startedActivity).isNotNull();
-    }
-
-    @Test(expected = IntentNotResolvableException.class)
-    public void launchApplicationUrl_withUnresolvableUrl_shouldThrowIntentNotResolvableException() throws Exception {
-        final String url = "url_to_installed_app";
-
-        Intents.launchApplicationUrl(activityContext, Uri.parse(url));
-        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
-
-        assertThat(startedActivity).isNull();
-    }
-
-    @Test
-    public void getPlayStoreUri_shouldBuildUriFromIntentPackage() throws Exception {
-        final Intent intent = new Intent();
-        final String appPackage = "com.mopub.test";
-        intent.setPackage(appPackage);
-
-        assertThat(Intents.getPlayStoreUri(intent).toString()).isEqualTo("market://details?id="
-                + appPackage);
-    }
-
-    @Test
-    public void getPlayStoreUri_shouldNotBlowUpWithEmptyPackage() throws Exception {
-        final Intent intent = new Intent();
-
-        assertThat(Intents.getPlayStoreUri(intent).toString())
-                .isEqualTo("market://details?id=null");
-    }
-
-    private void makeUrlResolvable(String url) {
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(
-                new Intent(Intent.ACTION_VIEW, Uri.parse(url)), new ResolveInfo());
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/JsonTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/JsonTest.java
deleted file mode 100644
index 3c4bbd4f..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/JsonTest.java
+++ /dev/null
@@ -1,158 +0,0 @@
-package com.mopub.common.util;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class JsonTest {
-    private Map<String,String> expectedMap;
-
-    @Before
-    public void setUp() throws Exception {
-        expectedMap = new HashMap<String, String>();
-    }
-
-    @Test
-    public void jsonStringToMap_shouldParseJson() throws Exception {
-        expectedMap.put("key", "value");
-        expectedMap.put("other_key", "other_value");
-
-        String json = "{\"key\":\"value\",\"other_key\":\"other_value\"}";
-        Map<String, String> map = Json.jsonStringToMap(json);
-        assertThat(map).isEqualTo(expectedMap);
-    }
-
-    @Test
-    public void jsonStringToMap_whenStringIsNull_shouldReturnEmptyMap() throws Exception {
-        Map<String, String> map = Json.jsonStringToMap(null);
-        assertThat(map).isEqualTo(expectedMap);
-    }
-
-    @Test
-    public void jsonStringToMap_whenStringIsEmpty_shouldReturnEmptyMap() throws Exception {
-        Map<String, String> map = Json.jsonStringToMap("");
-        assertThat(map).isEqualTo(expectedMap);
-    }
-
-    @Test
-    public void mapToJsonString_followedByJsonStringToMap_shouldReturnSameMap() throws Exception {
-        Map<String, String> inputMap = new HashMap<String, String>();
-        inputMap.put("key", "value");
-        inputMap.put("other_key", "other_value");
-
-        Map<String, String> outputMap = Json.jsonStringToMap(Json.mapToJsonString(inputMap));
-        assertThat(outputMap).isEqualTo(inputMap);
-    }
-
-    @Test
-    public void mapToJsonString_shouldReturnValidMap() throws Exception {
-        Map<String, String> map = new HashMap<String, String>();
-        map.put("key", "value");
-
-        String expectedJson = "{\"key\":\"value\"}";
-        String actualJson = Json.mapToJsonString(map);
-        assertThat(actualJson).isEqualTo(expectedJson);
-    }
-
-    @Test
-    public void mapToJsonString_whenMapIsEmpty_shouldReturnEmptyJson() throws Exception {
-        String expectedJson = "{}";
-        assertThat(Json.mapToJsonString(new HashMap<String, String>())).isEqualTo(expectedJson);
-    }
-
-    @Test
-    public void mapToJsonString_whenMapIsNull_shouldReturnEmptyJson() throws Exception {
-        String expectedJson = "{}";
-        assertThat(Json.mapToJsonString(null)).isEqualTo(expectedJson);
-    }
-
-    @Test
-    public void jsonArrayToStringArray_withMultipleValidParameters_shouldReturnCorrespondingStringArray() throws Exception {
-        String jsonString = "[\"hi\",\"dog\",\"goat\"]";
-
-        String[] expected = {"hi", "dog", "goat"};
-
-        assertThat(Json.jsonArrayToStringArray(jsonString)).isEqualTo(expected);
-    }
-
-    @Test
-    public void jsonArrayToStringArray_withMultipleValidParameters_withSingleQuotes_shouldReturnCorrespondingStringArray() throws Exception {
-        String jsonString = "['hi','dog','goat']";
-
-        String[] expected = {"hi", "dog", "goat"};
-
-        assertThat(Json.jsonArrayToStringArray(jsonString)).isEqualTo(expected);
-    }
-
-    @Test
-    public void jsonArrayToStringArray_withMultipleValidParameters_withNoQuotes_shouldReturnCorrespondingStringArray() throws Exception {
-        String jsonString = "[hi,dog,goat]";
-
-        String[] expected = {"hi", "dog", "goat"};
-
-        assertThat(Json.jsonArrayToStringArray(jsonString)).isEqualTo(expected);
-    }
-
-    @Test
-    public void jsonArrayToStringArray_withNullInput_shouldReturnEmptyStringArray() throws Exception {
-        String[] result = Json.jsonArrayToStringArray(null);
-
-        assertThat(result).isNotNull();
-        assertThat(result).isEmpty();
-    }
-
-    @Test
-    public void jsonArrayToStringArray_withEmptyJsonArray_shouldReturnEmptyStringArray() throws Exception {
-        String[] result = Json.jsonArrayToStringArray("[]");
-
-        assertThat(result).isNotNull();
-        assertThat(result).isEmpty();
-    }
-
-    @Test
-    public void jsonArrayToStringArray_withEmptyString_shouldReturnEmptyStringArray() throws Exception {
-        String[] result = Json.jsonArrayToStringArray("");
-
-        assertThat(result).isNotNull();
-        assertThat(result).isEmpty();
-    }
-
-    @Test
-    public void jsonArrayToStringArray_withMalformedMalicousString_shouldReturnEmptyStringArray() throws Exception {
-        String[] result = Json.jsonArrayToStringArray("} die");
-
-        assertThat(result).isNotNull();
-        assertThat(result).isEmpty();
-    }
-
-    @Test
-    public void jsonArrayToStringArray_whenMalformed_shouldReturnEmptyStringArray() throws Exception {
-        String jsonString = "[cool,guy,crew";
-
-        String[] result = Json.jsonArrayToStringArray(jsonString);
-
-        assertThat(result).isNotNull();
-        assertThat(result).isEmpty();
-    }
-
-    @Test
-    public void jsonArrayToStringArray_withLotsOfEmptySpace_shouldReturnStringArrayWithoutSpaces() throws Exception {
-        String jsonString = "        [    \"  hi\",\"do g\",\"goat  \"]";
-        String[] expected = {"  hi", "do g", "goat  "};
-
-        String[] result = Json.jsonArrayToStringArray(jsonString);
-
-        assertThat(result).isEqualTo(expected);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
deleted file mode 100644
index cfaa764b..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
+++ /dev/null
@@ -1,404 +0,0 @@
-package com.mopub.common.util;
-
-import android.annotation.TargetApi;
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.ActivityInfo;
-import android.content.pm.ApplicationInfo;
-import android.content.pm.ResolveInfo;
-
-import com.mopub.common.MoPubBrowser;
-import com.mopub.mobileads.MoPubActivity;
-import com.mopub.mobileads.MraidActivity;
-import com.mopub.mobileads.MraidVideoPlayerActivity;
-import com.mopub.mobileads.RewardedMraidActivity;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RuntimeEnvironment;
-import org.robolectric.shadows.ShadowLog;
-import org.robolectric.shadows.ShadowToast;
-
-import java.util.List;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.when;
-
-@RunWith(RobolectricTestRunner.class)
-public class ManifestUtilsTest {
-    private Context context;
-    private List<Class<? extends Activity>> requiredWebViewSdkActivities;
-    private List<Class<? extends Activity>> requiredNativeSdkActivities;
-
-    @Mock private ResolveInfo mockResolveInfo;
-
-    @Before
-    public void setUp() throws Exception {
-        context = spy(Robolectric.buildActivity(Activity.class).create().get());
-
-        requiredWebViewSdkActivities = ManifestUtils.getRequiredWebViewSdkActivities();
-        requiredNativeSdkActivities = ManifestUtils.getRequiredNativeSdkActivities();
-
-        setDebugMode(false);
-    }
-
-    @After
-    public void tearDown() throws Exception {
-        setDebugMode(false);
-        // This may have been set to a mock during testing. Reset this class back to normal
-        ManifestUtils.setFlagCheckUtil(new ManifestUtils.FlagCheckUtil());
-
-        addInterstitialModule();
-    }
-
-    @Test
-    public void checkWebViewSdkActivitiesDeclared_shouldIncludeFourActivityDeclarations() throws Exception {
-        ShadowLog.setupLogging();
-
-        ManifestUtils.checkWebViewActivitiesDeclared(context);
-
-        assertLogIncludes(
-                "com.mopub.mobileads.MoPubActivity",
-                "com.mopub.mobileads.MraidActivity",
-                "com.mopub.mobileads.RewardedMraidActivity",
-                "com.mopub.mobileads.MraidVideoPlayerActivity",
-                "com.mopub.common.MoPubBrowser"
-        );
-    }
-
-    @Test
-    public void checkNativeSdkActivitiesDeclared_shouldIncludeOneActivityDeclaration() throws Exception {
-        ShadowLog.setupLogging();
-
-        ManifestUtils.checkNativeActivitiesDeclared(context);
-
-        assertLogIncludes("com.mopub.common.MoPubBrowser");
-        assertLogDoesntInclude(
-                "com.mopub.mobileads.MoPubActivity",
-                "com.mopub.mobileads.MraidActivity",
-                "com.mopub.mobileads.MraidVideoPlayerActivity"
-        );
-    }
-
-    @Test
-    public void displayWarningForMissingActivities_withAllActivitiesDeclared_shouldNotShowLogOrToast() throws Exception {
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidActivity.class), mockResolveInfo);
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, RewardedMraidActivity.class), mockResolveInfo);
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubBrowser.class), mockResolveInfo);
-
-        ShadowLog.setupLogging();
-        setDebugMode(true);
-
-        ManifestUtils.displayWarningForMissingActivities(context, requiredWebViewSdkActivities);
-
-        assertThat(ShadowToast.getLatestToast()).isNull();
-        assertThat(ShadowLog.getLogs()).isEmpty();
-    }
-
-    @Test
-    public void displayWarningForMissingActivities_withoutInterstitialModule_withoutInterstitialActivitiesDeclared_shouldNotShowLogOrToast() throws Exception {
-        removeInterstitialModule();
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubBrowser.class), mockResolveInfo);
-
-        ShadowLog.setupLogging();
-        setDebugMode(true);
-
-        ManifestUtils.displayWarningForMissingActivities(context, requiredWebViewSdkActivities);
-
-        assertThat(ShadowToast.getLatestToast()).isNull();
-        assertThat(ShadowLog.getLogs()).isEmpty();
-    }
-
-    @Test
-     public void displayWarningForMissingActivities_withOneMissingActivity_shouldLogOnlyThatOne() throws Exception {
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidActivity.class), mockResolveInfo);
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, RewardedMraidActivity.class), mockResolveInfo);
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
-        // Here, we leave out MoPubBrowser on purpose
-
-        ShadowLog.setupLogging();
-
-        ManifestUtils.displayWarningForMissingActivities(context, requiredWebViewSdkActivities);
-
-        assertLogIncludes("com.mopub.common.MoPubBrowser");
-        assertLogDoesntInclude(
-                "com.mopub.mobileads.MoPubActivity",
-                "com.mopub.mobileads.MraidActivity",
-                "com.mopub.mobileads.RewardedMraidActivity",
-                "com.mopub.mobileads.MraidVideoPlayerActivity"
-        );
-    }
-
-    @Test
-    public void displayWarningForMissingActivities_withAllMissingActivities_shouldLogMessage() throws Exception {
-        setDebugMode(true);
-        ShadowLog.setupLogging();
-
-        ManifestUtils.displayWarningForMissingActivities(context, requiredWebViewSdkActivities);
-
-        final List<ShadowLog.LogItem> logs = ShadowLog.getLogs();
-
-        assertLogIncludes(
-                "com.mopub.mobileads.MoPubActivity",
-                "com.mopub.mobileads.MraidActivity",
-                "com.mopub.mobileads.RewardedMraidActivity",
-                "com.mopub.mobileads.MraidVideoPlayerActivity",
-                "com.mopub.common.MoPubBrowser"
-        );
-    }
-
-    @Test
-    public void displayWarningForMissingActivities_withMissingActivities_withDebugTrue_shouldShowToast() throws Exception {
-        setDebugMode(true);
-
-        ManifestUtils.displayWarningForMissingActivities(context, requiredWebViewSdkActivities);
-
-        assertThat(ShadowToast.getLatestToast()).isNotNull();
-        final String toastText = ShadowToast.getTextOfLatestToast();
-        assertThat(toastText).isEqualTo("ERROR: YOUR MOPUB INTEGRATION IS INCOMPLETE.\nCheck logcat and update your AndroidManifest.xml with the correct activities and configuration.");
-    }
-
-    @Test
-    public void displayWarningForMissingActivities_withMissingActivities_withDebugFalse_shouldNotShowToast() throws Exception {
-        setDebugMode(false);
-
-        ManifestUtils.displayWarningForMissingActivities(context, requiredWebViewSdkActivities);
-
-        assertThat(ShadowToast.getLatestToast()).isNull();
-    }
-
-    @SuppressWarnings("unchecked")
-    @Test
-    public void displayWarningForMisconfiguredActivities_withAllActivitiesConfigured_shouldNotLogOrShowToast() throws Exception {
-        ManifestUtils.FlagCheckUtil mockActivitiyConfigCheck = mock(ManifestUtils.FlagCheckUtil.class);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_KEYBOARD_HIDDEN))).thenReturn(true);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_ORIENTATION))).thenReturn(true);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_SCREEN_SIZE))).thenReturn(true);
-        ManifestUtils.setFlagCheckUtil(mockActivitiyConfigCheck);
-
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidActivity.class), mockResolveInfo);
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, RewardedMraidActivity.class), mockResolveInfo);
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubBrowser.class), mockResolveInfo);
-
-        ShadowLog.setupLogging();
-        setDebugMode(true);
-
-        ManifestUtils.displayWarningForMisconfiguredActivities(context, requiredWebViewSdkActivities);
-
-        assertThat(ShadowToast.getLatestToast()).isNull();
-        assertThat(ShadowLog.getLogs()).isEmpty();
-    }
-
-    @SuppressWarnings("unchecked")
-    @TargetApi(13)
-    @Test
-    public void displayWarningForMisconfiguredActivities_withOneMisconfiguredActivity_shouldLogOnlyThatOne() throws Exception {
-        ManifestUtils.FlagCheckUtil mockActivitiyConfigCheck = mock(ManifestUtils.FlagCheckUtil.class);
-
-        // Misconfigure the first activity; only return false if the activity is MoPubActivity
-        doAnswer(new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
-                Object[] args = invocationOnMock.getArguments();
-                return MoPubActivity.class != args[0];
-            }
-        }).when(mockActivitiyConfigCheck).hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_KEYBOARD_HIDDEN));
-
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_ORIENTATION))).thenReturn(true);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_SCREEN_SIZE))).thenReturn(true);
-        ManifestUtils.setFlagCheckUtil(mockActivitiyConfigCheck);
-
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidActivity.class), mockResolveInfo);
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, RewardedMraidActivity.class), mockResolveInfo);
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubBrowser.class), mockResolveInfo);
-
-        ShadowLog.setupLogging();
-
-        ManifestUtils.displayWarningForMisconfiguredActivities(context, requiredWebViewSdkActivities);
-
-        assertLogIncludes("com.mopub.mobileads.MoPubActivity");
-        assertLogIncludes("The android:configChanges param for activity " + MoPubActivity.class.getName() + " must include keyboardHidden.");
-        assertLogDoesntInclude(
-                "com.mopub.mobileads.MraidActivity",
-                "com.mopub.mobileads.RewardedMraidActivity",
-                "com.mopub.mobileads.MraidVideoPlayerActivity",
-                "com.mopub.common.MoPubBrowser"
-        );
-        assertLogDoesntInclude("The android:configChanges param for activity " + MoPubActivity.class.getName() + " must include orientation.");
-        assertLogDoesntInclude("The android:configChanges param for activity " + MoPubActivity.class.getName() + " must include screenSize.");
-    }
-
-    @SuppressWarnings("unchecked")
-    @Test
-    public void displayWarningForMisconfiguredActivities_withOneMisconfiguredActivity_withMissingAllConfigChangesValues_shouldLogAllConfigChangesValues() throws Exception {
-        ManifestUtils.FlagCheckUtil mockActivitiyConfigCheck = mock(ManifestUtils.FlagCheckUtil.class);
-
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_KEYBOARD_HIDDEN))).thenReturn(false);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_ORIENTATION))).thenReturn(false);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_SCREEN_SIZE))).thenReturn(false);
-        ManifestUtils.setFlagCheckUtil(mockActivitiyConfigCheck);
-
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
-
-        ShadowLog.setupLogging();
-
-        ManifestUtils.displayWarningForMisconfiguredActivities(context, requiredWebViewSdkActivities);
-
-        assertLogIncludes("The android:configChanges param for activity " + MoPubActivity.class.getName() + " must include keyboardHidden.");
-        assertLogIncludes("The android:configChanges param for activity " + MoPubActivity.class.getName() + " must include orientation.");
-        assertLogIncludes("The android:configChanges param for activity " + MoPubActivity.class.getName() + " must include screenSize.");
-    }
-
-    @SuppressWarnings("unchecked")
-    @Test
-    public void displayWarningForMisconfiguredActivities_withMisconfiguredActivities_withDebugTrue_shouldShowToast() throws Exception {
-        ManifestUtils.FlagCheckUtil mockActivitiyConfigCheck = mock(ManifestUtils.FlagCheckUtil.class);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_KEYBOARD_HIDDEN))).thenReturn(false);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_ORIENTATION))).thenReturn(false);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_SCREEN_SIZE))).thenReturn(false);
-        ManifestUtils.setFlagCheckUtil(mockActivitiyConfigCheck);
-
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
-
-        setDebugMode(true);
-
-        ManifestUtils.displayWarningForMisconfiguredActivities(context, requiredWebViewSdkActivities);
-
-        assertThat(ShadowToast.getLatestToast()).isNotNull();
-        final String toastText = ShadowToast.getTextOfLatestToast();
-        assertThat(toastText).isEqualTo("ERROR: YOUR MOPUB INTEGRATION IS INCOMPLETE.\nCheck logcat and update your AndroidManifest.xml with the correct activities and configuration.");
-    }
-
-    @SuppressWarnings("unchecked")
-    @Test
-    public void displayWarningForMisconfiguredActivities_withMisconfiguredActivities_withDebugFalse_shouldNotShowToast() throws Exception {
-        ManifestUtils.FlagCheckUtil mockActivitiyConfigCheck = mock(ManifestUtils.FlagCheckUtil.class);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_KEYBOARD_HIDDEN))).thenReturn(false);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_ORIENTATION))).thenReturn(false);
-        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_SCREEN_SIZE))).thenReturn(false);
-        ManifestUtils.setFlagCheckUtil(mockActivitiyConfigCheck);
-
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
-
-        setDebugMode(false);
-
-        ManifestUtils.displayWarningForMissingActivities(context, requiredWebViewSdkActivities);
-
-        assertThat(ShadowToast.getLatestToast()).isNull();
-    }
-
-    @Test
-    public void isDebuggable_whenApplicationIsDebuggable_shouldReturnTrue() throws Exception {
-        setDebugMode(true);
-
-        assertThat(ManifestUtils.isDebuggable(context)).isTrue();
-    }
-
-    @Test
-    public void isDebuggable_whenApplicationIsNotDebuggable_shouldReturnFalse() throws Exception {
-        setDebugMode(false);
-
-        assertThat(ManifestUtils.isDebuggable(context)).isFalse();
-    }
-
-    @SuppressWarnings("unchecked")
-    @Test
-    public void getRequiredWebViewSdkActivities_shouldIncludeRequiredActivities() throws Exception {
-        assertThat(requiredWebViewSdkActivities).containsOnly(
-                MoPubActivity.class,
-                MraidActivity.class,
-                RewardedMraidActivity.class,
-                MraidVideoPlayerActivity.class,
-                MoPubBrowser.class
-        );
-    }
-
-    @Test
-    public void getRequiredWebViewSdkActivities_withoutInterstitialModule_shouldNotHaveAllRequiredActivities() throws Exception {
-        removeInterstitialModule();
-        assertThat(requiredWebViewSdkActivities).containsOnly(
-                MraidVideoPlayerActivity.class,
-                MoPubBrowser.class
-        );
-    }
-
-    @SuppressWarnings("unchecked")
-    @Test
-    public void getRequiredNativeSdkActivities_shouldIncludeRequiredActivities() throws Exception {
-        assertThat(requiredNativeSdkActivities).containsOnly(
-                MoPubBrowser.class
-        );
-    }
-
-    private void addInterstitialModule() {
-        Class moPubActivityClass = com.mopub.mobileads.MoPubActivity.class;
-        Class mraidActivityClass = com.mopub.mobileads.MraidActivity.class;
-        Class rewardedMraidActivityClass = com.mopub.mobileads.RewardedMraidActivity.class;
-        if (!ManifestUtils.getRequiredWebViewSdkActivities().contains(moPubActivityClass)) {
-            ManifestUtils.getRequiredWebViewSdkActivities().add(moPubActivityClass);
-        }
-        if (!ManifestUtils.getRequiredWebViewSdkActivities().contains(mraidActivityClass)) {
-            ManifestUtils.getRequiredWebViewSdkActivities().add(mraidActivityClass);
-        }
-        if (!ManifestUtils.getRequiredWebViewSdkActivities().contains(rewardedMraidActivityClass)) {
-            ManifestUtils.getRequiredWebViewSdkActivities().add(rewardedMraidActivityClass);
-        }
-    }
-
-    private void removeInterstitialModule() {
-        Class moPubActivityClass = com.mopub.mobileads.MoPubActivity.class;
-        Class mraidActivityClass = com.mopub.mobileads.MraidActivity.class;
-        Class rewardedMraidActivityClass = com.mopub.mobileads.RewardedMraidActivity.class;
-        ManifestUtils.getRequiredWebViewSdkActivities().remove(moPubActivityClass);
-        ManifestUtils.getRequiredWebViewSdkActivities().remove(mraidActivityClass);
-        ManifestUtils.getRequiredWebViewSdkActivities().remove(rewardedMraidActivityClass);
-    }
-
-    private void setDebugMode(boolean enabled) {
-        final ApplicationInfo applicationInfo = context.getApplicationInfo();
-
-        if (enabled) {
-            applicationInfo.flags |= ApplicationInfo.FLAG_DEBUGGABLE;
-        } else {
-            applicationInfo.flags &= ~ApplicationInfo.FLAG_DEBUGGABLE;
-        }
-
-        when(context.getApplicationInfo()).thenReturn(applicationInfo);
-    }
-
-    private void assertLogIncludes(final String... messages) {
-        final String logText = ShadowLog.getLogs().get(0).msg;
-        for (final String message : messages) {
-            assertThat(logText).containsOnlyOnce(message);
-        }
-    }
-
-    private void assertLogDoesntInclude(final String... messages) {
-        final String logText = ShadowLog.getLogs().get(0).msg;
-        for (final String message : messages) {
-            assertThat(logText).doesNotContain(message);
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/NumbersTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/NumbersTest.java
deleted file mode 100644
index f58f8c37..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/NumbersTest.java
+++ /dev/null
@@ -1,71 +0,0 @@
-package com.mopub.common.util;
-
-import android.app.Activity;
-
-import org.junit.Test;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.fail;
-import static org.mockito.Mockito.mock;
-
-public class NumbersTest {
-    @Test
-    public void parseDouble_withNumberValue_shouldReturnDouble() throws Exception {
-        int anInt = 2;
-        assertThat(Numbers.parseDouble(anInt)).isEqualTo(anInt);
-
-        double aDouble = 2.1;
-        assertThat(Numbers.parseDouble(aDouble)).isEqualTo(aDouble);
-
-        float aFloat = 2.2f;
-        assertThat(Numbers.parseDouble(aFloat)).isEqualTo(aFloat);
-
-        double nan = Double.NaN;
-        assertThat(Numbers.parseDouble(nan)).isEqualTo(nan);
-    }
-
-    @Test
-    public void parseDouble_withStringValue_shouldReturnDouble() throws Exception {
-        assertThat(Numbers.parseDouble("0.01")).isEqualTo(0.01);
-        assertThat(Numbers.parseDouble("-1015")).isEqualTo(-1015);
-    }
-
-    @Test
-    public void parseDouble_withInvalidStringValue_shouldThrowClassCastException() throws Exception {
-        try {
-            Numbers.parseDouble("dog");
-            fail("Expected ClassCastException");
-        } catch (ClassCastException e) {
-            // pass
-        }
-
-        try {
-            Numbers.parseDouble("123a");
-            fail("Expected ClassCastException");
-        } catch (ClassCastException e) {
-            // pass
-        }
-    }
-
-    @Test
-    public void parseDouble_withInvalidObjectType_shouldThrowClassCastException() throws Exception {
-        try {
-            Numbers.parseDouble(mock(Activity.class));
-            fail("Expected ClassCastException");
-        } catch (ClassCastException e) {
-            // pass
-        }
-    }
-
-    @Test
-    public void convertMillisecondsToSecondsRoundedUp_shouldReturnLongMillisecondsAsRoundedUpLongSeconds() throws Exception {
-        assertThat(Numbers.convertMillisecondsToSecondsRoundedUp(0)).isEqualTo(0);
-
-        assertThat(Numbers.convertMillisecondsToSecondsRoundedUp(1)).isEqualTo(1);
-        assertThat(Numbers.convertMillisecondsToSecondsRoundedUp(999)).isEqualTo(1);
-        assertThat(Numbers.convertMillisecondsToSecondsRoundedUp(1000)).isEqualTo(1);
-
-        assertThat(Numbers.convertMillisecondsToSecondsRoundedUp(1001)).isEqualTo(2);
-        assertThat(Numbers.convertMillisecondsToSecondsRoundedUp(100000)).isEqualTo(100);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java
deleted file mode 100644
index 781d273a..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java
+++ /dev/null
@@ -1,208 +0,0 @@
-package com.mopub.common.util;
-
-import android.app.Activity;
-import android.view.View;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-
-import java.math.BigDecimal;
-import java.math.BigInteger;
-
-import static com.mopub.common.util.Reflection.MethodBuilder;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.fail;
-
-
-@RunWith(RobolectricTestRunner.class)
-public class ReflectionTest {
-    private Activity activity;
-    private View view;
-    private String string;
-    private MethodBuilder methodBuilder;
-
-    @Before
-    public void setup(){
-        activity = Robolectric.buildActivity(Activity.class).create().get();
-        view = new View(activity);
-        string = "goat";
-    }
-
-    @Test
-    public void execute_withCorrectVoidMethodThatHasNoParameters_shouldPass() throws Exception {
-        methodBuilder = new MethodBuilder(activity, "finish");
-
-        methodBuilder.execute();
-
-        // pass
-    }
-
-    @Test
-    public void execute_withCorrectNonVoidMethodThatHasNoParameters_shouldPass() throws Exception {
-        methodBuilder = new MethodBuilder(string, "length");
-
-        int result = (Integer)methodBuilder.execute();
-
-        assertThat(result).isEqualTo(4);
-    }
-
-    @Test
-    public void execute_withCorrectVoidMethodThatHasParameters_shouldPass() throws Exception {
-        methodBuilder = new MethodBuilder(view, "buildDrawingCache");
-        methodBuilder.addParam(boolean.class, true);
-
-        methodBuilder.execute();
-
-        // pass
-    }
-
-    @Test
-    public void execute_withCorrectNonVoidMethodThatHasParameters_shouldPass() throws Exception {
-        methodBuilder = new MethodBuilder(string, "charAt");
-        methodBuilder.addParam(int.class, 2);
-
-        Object result = methodBuilder.execute();
-
-        assertThat(result).isEqualTo('a');
-    }
-
-    @Test
-    public void execute_withNoSuchMethod_shouldThrowException() throws Exception {
-        methodBuilder = new MethodBuilder(activity, "noSuchMethod");
-
-        try {
-            methodBuilder.execute();
-            fail("Should fail because method did not exist");
-        } catch (Exception e) {
-            // pass
-        }
-    }
-
-    @Test
-    public void execute_withCorrectVoidMethodThatHasParameters_withMissingParameters_shouldThrowException() throws Exception {
-        methodBuilder = new MethodBuilder(activity, "finishActivity");
-        // forget to add int requestCode parameter
-
-        try {
-            methodBuilder.execute();
-            fail("Should fail because we did not supply all the parameters");
-        } catch (Exception e) {
-            // pass
-        }
-    }
-
-    @Test
-    public void execute_withExistingMethodButIncorrectParameterTypes_shouldThrowException() throws Exception {
-        methodBuilder = new MethodBuilder(string, "concat");
-        methodBuilder.addParam(Object.class, "other");
-
-        try {
-            methodBuilder.execute();
-            fail("Should fail because there is no string.concat(Object) method");
-        } catch (Exception e) {
-            // pass
-        }
-    }
-
-    @Test
-    public void execute_withExistingMethodButSubclassedParameter_shouldPass() throws Exception {
-        methodBuilder = new MethodBuilder(string, "equals");
-        methodBuilder.addParam(Object.class, "cheese");
-
-        boolean result = (Boolean) methodBuilder.execute();
-
-        assertThat(result).isFalse();
-    }
-
-    @Test
-    public void execute_withCorrectMethodThatHasParameters_withIncorrectOrderingOfParameters_shouldThrowException() throws Exception {
-        methodBuilder = new MethodBuilder(string, "indexOf");
-        methodBuilder.addParam(int.class, 2);
-        methodBuilder.addParam(String.class, "g");
-
-        try {
-            methodBuilder.execute();
-            fail("Should fail because we expected string.indexOf(String, int) instead of string.indexOf(int, String)");
-        } catch (Exception e) {
-            // pass
-        }
-    }
-
-    @Test
-    public void execute_withNullInstanceOnInstanceMethod_shouldThrowException() throws Exception {
-        methodBuilder = new MethodBuilder(null, "length");
-
-        try {
-            methodBuilder.execute();
-            fail("Should fail because we are giving a null instance");
-        } catch (Exception e) {
-            // pass
-        }
-    }
-
-    @Test
-    public void execute_withStaticMethod_shouldPass() throws Exception {
-        methodBuilder = new MethodBuilder(null, "valueOf").setStatic(String.class).addParam(int.class, 20);
-
-        assertThat(methodBuilder.execute()).isEqualTo("20");
-    }
-
-    @Test
-    public void execute_withAccessibility_shouldRunPrivateMethods() throws Exception {
-        methodBuilder = new MethodBuilder(string, "indexOfSupplementary");
-        methodBuilder.addParam(int.class, (int)'a');
-        methodBuilder.addParam(int.class, 0);
-        methodBuilder.setAccessible();
-
-        int result = (Integer) methodBuilder.execute();
-
-        assertThat(result).isEqualTo(-1);
-    }
-
-    @Test
-    public void instantiateClassWithConstructor_withCorrectParameters_shouldInstiantiateObject() throws Exception {
-        Class[] classes = {int.class};
-        Object[] parameters = {30};
-        Number integer = Reflection.instantiateClassWithConstructor("java.lang.Integer",
-                Number.class, classes, parameters);
-
-        assertThat(integer).isEqualTo(new Integer(30));
-    }
-
-    @Test
-    public void instantiateClassWithConstructor_withCorrectMultipleParameters_shouldInstiantiateObject() throws Exception {
-        Class[] classes = {BigInteger.class, int.class};
-        Object[] parameters = {new BigInteger("10"), 5};
-        Number bigDecimal = Reflection.instantiateClassWithConstructor("java.math.BigDecimal",
-                Number.class, classes, parameters);
-
-        assertThat(bigDecimal).isEqualTo(new BigDecimal(new BigInteger("10"), 5));
-    }
-
-    @Test(expected = ClassCastException.class)
-    public void instantiateClassWithConstructor_withInvalidSuperClass_shouldThrowException() throws Exception {
-        Class[] classes = {int.class};
-        Object[] parameters = {30};
-
-        Reflection.instantiateClassWithConstructor("java.lang.Integer", String.class, classes, parameters);
-    }
-
-    @Test(expected = ClassNotFoundException.class)
-    public void instantiateClassWithConstructor_withClassNotFound_shouldThrowException() throws Exception {
-        Class[] classes = {int.class};
-        Object[] parameters = {30};
-
-        Reflection.instantiateClassWithConstructor("java.lang.FakeClass123", Integer.class, classes, parameters);
-    }
-
-    @Test(expected = Exception.class)
-    public void instantiateClassWithConstructor_withMismatchingClassParameters_shouldThrowException() throws Exception {
-        Class[] classes = {boolean.class};
-        Object[] parameters = {30};
-
-        Reflection.instantiateClassWithConstructor("java.lang.Integer", Number.class, classes, parameters);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/StreamsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/StreamsTest.java
deleted file mode 100644
index 495e44e6..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/StreamsTest.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package com.mopub.common.util;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import java.io.ByteArrayInputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.fail;
-
-@RunWith(RobolectricTestRunner.class)
-public class StreamsTest {
-    @Test
-    public void copyStream_shouldCopyContentsOfOneStreamToAnother() throws Exception {
-        File inFile = new File("etc/expectedFile.jpg");
-        FileInputStream in = new FileInputStream(inFile);
-        File tempFile = File.createTempFile("foo", "bar");
-        FileOutputStream out = new FileOutputStream(tempFile);
-
-        Streams.copyContent(in, out);
-
-        assertThat(inFile.length()).isEqualTo(tempFile.length());
-    }
-
-    @Test
-    public void copyStream_withMaxBytes_belowThreshold_shouldCopyContentsOfOneStreamToAnother() throws Exception {
-        File inFile = new File("etc/expectedFile.jpg");
-        FileInputStream in = new FileInputStream(inFile);
-        File tempFile = File.createTempFile("foo", "bar");
-        FileOutputStream out = new FileOutputStream(tempFile);
-
-        Streams.copyContent(in, out, 1000000);
-
-        assertThat(inFile.length()).isEqualTo(tempFile.length());
-    }
-
-    @Test
-    public void copyStream_withMaxBytes_aboveThreshold_shouldThrowIOException() throws Exception {
-        InputStream in = new ByteArrayInputStream("this is a pretty long stream".getBytes());
-
-        File tempFile = File.createTempFile("foo", "bar");
-        FileOutputStream out = new FileOutputStream(tempFile);
-
-        try {
-            Streams.copyContent(in, out, 10);
-            fail("Expected IOException.");
-        } catch (IOException e) {
-            // pass
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/UtilsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/UtilsTest.java
deleted file mode 100644
index 0bb01118..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/UtilsTest.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package com.mopub.common.util;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import java.util.HashSet;
-import java.util.Set;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class UtilsTest {
-    @Test
-    public void generateUniqueId_withMultipleInvocations_shouldReturnUniqueValues() throws Exception {
-        final int expectedIdCount = 100;
-
-        Set<Long> ids = new HashSet<Long>(expectedIdCount);
-        for (int i = 0; i < expectedIdCount; i++) {
-            final long id = Utils.generateUniqueId();
-            ids.add(id);
-        }
-
-        assertThat(ids).hasSize(expectedIdCount);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/ViewsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/ViewsTest.java
deleted file mode 100644
index a9eb7a6b..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/ViewsTest.java
+++ /dev/null
@@ -1,129 +0,0 @@
-package com.mopub.common.util;
-
-import android.app.Activity;
-import android.view.View;
-import android.widget.RelativeLayout;
-import android.widget.TextView;
-
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(RobolectricTestRunner.class)
-public class ViewsTest {
-    private Activity activity;
-    private View frameLayout;
-    private RelativeLayout relativeLayout;
-    private View view;
-
-    @Before
-    public void setup() {
-        activity = Robolectric.buildActivity(Activity.class).create().get();
-
-        // Expected view hierarchy:
-        // - FrameLayout
-        // -- RelativeLayout
-        // --- View
-        frameLayout = activity.findViewById(android.R.id.content);
-        relativeLayout = new RelativeLayout(activity);
-        view = new View(activity);
-
-        activity.setContentView(relativeLayout);
-    }
-
-    @Test
-    public void removeFromParent_shouldRemoveViewFromParent() throws Exception {
-        assertThat(relativeLayout.getChildCount()).isEqualTo(0);
-
-        relativeLayout.addView(view);
-        assertThat(relativeLayout.getChildCount()).isEqualTo(1);
-        assertThat(view.getParent()).isEqualTo(relativeLayout);
-
-        Views.removeFromParent(view);
-
-        assertThat(relativeLayout.getChildCount()).isEqualTo(0);
-        assertThat(view.getParent()).isNull();
-    }
-
-    @Test
-    public void removeFromParent_withMultipleChildren_shouldRemoveCorrectChild() throws Exception {
-        relativeLayout.addView(new TextView(activity));
-
-        assertThat(relativeLayout.getChildCount()).isEqualTo(1);
-
-        relativeLayout.addView(view);
-
-        assertThat(relativeLayout.getChildCount()).isEqualTo(2);
-
-        Views.removeFromParent(view);
-        assertThat(relativeLayout.getChildCount()).isEqualTo(1);
-
-        assertThat(relativeLayout.getChildAt(0)).isInstanceOf(TextView.class);
-    }
-
-    @Test
-    public void removeFromParent_whenViewIsNull_shouldNotThrowException() throws Exception {
-        Views.removeFromParent(null);
-
-        // pass
-    }
-
-    @Test
-    public void removeFromParent_whenViewsParentIsNull_shouldNotThrowException() throws Exception {
-        assertThat(view.getParent()).isNull();
-
-        Views.removeFromParent(view);
-
-        // pass
-    }
-
-    @Test
-    public void getTopmostView_withActivityContext_shouldReturnRootView() {
-        relativeLayout.addView(view);
-
-        View rootView = Views.getTopmostView(activity, view);
-
-        assertThat(rootView).isEqualTo(frameLayout);
-    }
-
-    @Test
-    public void getTopmostView_withNonActivityContext_shouldReturnRootView() {
-        relativeLayout.addView(view);
-
-        View rootView = Views.getTopmostView(activity.getApplicationContext(), view);
-
-        assertThat(rootView).isEqualTo(frameLayout);
-    }
-
-    @Test
-    public void getTopmostView_withNonActivityContext_withUnattachedView_shouldReturnView() {
-        // don't add "view" to the view hierarchy
-
-        View rootView = Views.getTopmostView(activity.getApplicationContext(), view);
-
-        assertThat(rootView).isEqualTo(view);
-    }
-
-    @Test
-    public void getTopmostView_withNonActivityContext_withNullView_shouldReturnNull() {
-        relativeLayout.addView(view);
-
-        View rootView = Views.getTopmostView(activity.getApplicationContext(), null);
-
-        assertThat(rootView).isNull();
-    }
-
-    @Test
-    public void getTopmostView_withNullArguments_shouldReturnNull() {
-        relativeLayout.addView(view);
-
-        View rootView = Views.getTopmostView(null, null);
-
-        assertThat(rootView).isNull();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/VisibilityTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/VisibilityTest.java
deleted file mode 100644
index 81810ae6..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/VisibilityTest.java
+++ /dev/null
@@ -1,44 +0,0 @@
-package com.mopub.common.util;
-
-import android.view.View;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class VisibilityTest {
-    @Test
-    public void isScreenVisible_shouldOnlyReturnTrueForViewVisible() throws Exception {
-        assertThat(Visibility.isScreenVisible(View.VISIBLE)).isTrue();
-        assertThat(Visibility.isScreenVisible(View.INVISIBLE)).isFalse();
-        assertThat(Visibility.isScreenVisible(View.GONE)).isFalse();
-    }
-    
-    @Test
-    public void hasScreenVisibilityChanged_withIdenticalArguments_shouldReturnFalse() throws Exception {
-        assertThat(Visibility.hasScreenVisibilityChanged(View.VISIBLE, View.VISIBLE)).isFalse();
-        assertThat(Visibility.hasScreenVisibilityChanged(View.INVISIBLE, View.INVISIBLE)).isFalse();
-        assertThat(Visibility.hasScreenVisibilityChanged(View.GONE, View.GONE)).isFalse();
-    }
-
-    @Test
-    public void hasScreenVisibilityChanged_withTwoNonVisibleArguments_shouldReturnFalse() throws Exception {
-        assertThat(Visibility.hasScreenVisibilityChanged(View.INVISIBLE, View.GONE)).isFalse();
-        assertThat(Visibility.hasScreenVisibilityChanged(View.GONE, View.INVISIBLE)).isFalse();
-    }
-
-    @Test
-    public void hasScreenVisibilityChanged_withDifferentVisibilities_shouldReturnTrue() throws Exception {
-        assertThat(Visibility.hasScreenVisibilityChanged(View.VISIBLE, View.GONE)).isTrue();
-        assertThat(Visibility.hasScreenVisibilityChanged(View.GONE, View.VISIBLE)).isTrue();
-        assertThat(Visibility.hasScreenVisibilityChanged(View.VISIBLE, View.INVISIBLE)).isTrue();
-        assertThat(Visibility.hasScreenVisibilityChanged(View.INVISIBLE, View.VISIBLE)).isTrue();
-    }
-}
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowAsyncTasks.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowAsyncTasks.java
deleted file mode 100644
index 585c5323..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowAsyncTasks.java
+++ /dev/null
@@ -1,44 +0,0 @@
-package com.mopub.common.util.test.support;
-
-import android.os.AsyncTask;
-
-import com.mopub.common.util.AsyncTasks;
-
-import org.robolectric.annotation.Implementation;
-import org.robolectric.annotation.Implements;
-
-import java.util.Arrays;
-import java.util.List;
-
-@Implements(value = AsyncTasks.class, callThroughByDefault = false)
-public class ShadowAsyncTasks {
-    private static boolean sWasCalled;
-    private static AsyncTask<?, ?, ?> sAsyncTask;
-    private static List<?> sParams;
-
-    @Implementation
-    public static <P> void safeExecuteOnExecutor(AsyncTask<P, ?, ?> asyncTask, P... params)
-            throws IllegalArgumentException, IllegalStateException {
-        sWasCalled = true;
-        sAsyncTask = asyncTask;
-        sParams = Arrays.asList(params);
-    }
-
-    public static boolean wasCalled() {
-        return sWasCalled;
-    }
-
-    public static AsyncTask<?, ?, ?> getLatestAsyncTask() {
-        return sAsyncTask;
-    }
-
-    public static List<?> getLatestParams() {
-        return sParams;
-    }
-
-    public static void reset() {
-        sWasCalled = false;
-        sAsyncTask = null;
-        sParams = null;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowMoPubHttpUrlConnection.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowMoPubHttpUrlConnection.java
deleted file mode 100644
index 7ae73832..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowMoPubHttpUrlConnection.java
+++ /dev/null
@@ -1,79 +0,0 @@
-package com.mopub.common.util.test.support;
-
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import com.mopub.common.MoPubHttpUrlConnection;
-
-import org.robolectric.annotation.Implementation;
-import org.robolectric.annotation.Implements;
-
-import java.io.ByteArrayInputStream;
-import java.io.IOException;
-import java.net.HttpURLConnection;
-import java.net.URL;
-import java.util.ArrayDeque;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Queue;
-
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-@Implements(MoPubHttpUrlConnection.class)
-public abstract class ShadowMoPubHttpUrlConnection extends HttpURLConnection {
-    private static String sLatestRequestUrl;
-    private static final Queue<HttpURLConnection> sPendingUrlConnections =
-            new ArrayDeque<HttpURLConnection>();
-
-    private ShadowMoPubHttpUrlConnection(URL url) {
-        super(url);
-    }
-
-    public static void reset() {
-        sPendingUrlConnections.clear();
-    }
-
-    @Implementation
-    @Nullable
-    public static HttpURLConnection getHttpUrlConnection(@NonNull final String url)
-            throws IOException {
-        sLatestRequestUrl = url;
-
-        return sPendingUrlConnections.poll();
-    }
-
-    public static void addPendingResponse(final int statusCode, @NonNull final String response)
-            throws IOException {
-        addPendingResponse(statusCode, response, new HashMap<String, List<String>>());
-    }
-
-    public static void addPendingResponse(final int statusCode, @NonNull final String response,
-            @NonNull final Map<String, List<String>> headers) throws IOException {
-        final byte[] bytes = response.getBytes();
-        HttpURLConnection mockUrlConnection = mock(HttpURLConnection.class);
-
-        when(mockUrlConnection.getInputStream()).thenReturn(
-                new ByteArrayInputStream(bytes));
-        when(mockUrlConnection.getContentLength()).thenReturn(bytes.length);
-        when(mockUrlConnection.getResponseCode()).thenReturn(statusCode);
-        when(mockUrlConnection.getHeaderFields()).thenReturn(headers);
-
-        for (final Map.Entry<String, List<String>> entry : headers.entrySet()) {
-            when(mockUrlConnection.getHeaderField(entry.getKey())).thenReturn(entry.getValue().get(0));
-        }
-
-        sPendingUrlConnections.add(mockUrlConnection);
-    }
-
-    @NonNull
-    public static Queue getPendingUrlConnections() {
-        return sPendingUrlConnections;
-    }
-
-    @Nullable
-    public static String getLatestRequestUrl() {
-        return sLatestRequestUrl;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java
deleted file mode 100644
index 3446601f..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java
+++ /dev/null
@@ -1,33 +0,0 @@
-package com.mopub.common.util.test.support;
-
-import com.mopub.common.util.Reflection;
-
-import org.robolectric.annotation.Implementation;
-import org.robolectric.annotation.Implements;
-import org.robolectric.util.ReflectionHelpers;
-
-import static org.robolectric.internal.Shadow.directlyOn;
-
-@Implements(Reflection.class)
-public class ShadowReflection {
-    private static boolean sNextClassNotFound;
-
-    public static void reset() {
-        sNextClassNotFound = false;
-    }
-
-    @Implementation
-    public static boolean classFound(final String className) throws Exception {
-        if (sNextClassNotFound) {
-            sNextClassNotFound = false;
-            return false;
-        }
-
-        return directlyOn(Reflection.class, "classFound",
-                new ReflectionHelpers.ClassParameter<>(String.class, className));
-    }
-
-    public static void setNextClassNotFound(final boolean nextNotFound) {
-        sNextClassNotFound = nextNotFound;
-    }
-}
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestDateAndTime.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestDateAndTime.java
deleted file mode 100644
index 154d12d3..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestDateAndTime.java
+++ /dev/null
@@ -1,33 +0,0 @@
-package com.mopub.common.util.test.support;
-
-import com.mopub.common.util.DateAndTime;
-
-import java.util.Date;
-import java.util.TimeZone;
-
-public class TestDateAndTime extends DateAndTime {
-    private TimeZone timeZone = TimeZone.getTimeZone("GMT-7");
-    private Date now = new Date(1365553573L);
-
-    public static TestDateAndTime getInstance() {
-        return (TestDateAndTime) instance;
-    }
-
-    public void setNow(Date now) {
-        this.now = now;
-    }
-
-    public void setTimeZone(TimeZone timeZone) {
-        this.timeZone = timeZone;
-    }
-
-    @Override
-    public TimeZone internalLocalTimeZone() {
-        return timeZone;
-    }
-
-    @Override
-    public Date internalNow() {
-        return now;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestMethodBuilderFactory.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestMethodBuilderFactory.java
deleted file mode 100644
index 49d11389..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestMethodBuilderFactory.java
+++ /dev/null
@@ -1,24 +0,0 @@
-package com.mopub.common.util.test.support;
-
-import com.mopub.common.factories.MethodBuilderFactory;
-
-import static com.mopub.common.util.Reflection.MethodBuilder;
-import static org.mockito.Mockito.mock;
-
-public class TestMethodBuilderFactory extends MethodBuilderFactory {
-    private MethodBuilder mockMethodBuilder = mock(MethodBuilder.class);
-
-    public static MethodBuilder getSingletonMock() {
-        return getTestFactory().mockMethodBuilder;
-    }
-
-    private static TestMethodBuilderFactory getTestFactory() {
-        return ((TestMethodBuilderFactory) MethodBuilderFactory.instance);
-    }
-
-    @Override
-    public MethodBuilder internalCreate(Object object, String methodName) {
-        return mockMethodBuilder;
-    }
-}
-
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertGestureListenerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertGestureListenerTest.java
deleted file mode 100644
index cd34ddc2..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertGestureListenerTest.java
+++ /dev/null
@@ -1,376 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.view.MotionEvent;
-import android.view.View;
-
-import com.mopub.common.AdReport;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.GestureUtils;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.annotation.Config;
-
-import static com.mopub.mobileads.AdAlertGestureListener.ZigZagState.FAILED;
-import static com.mopub.mobileads.AdAlertGestureListener.ZigZagState.FINISHED;
-import static com.mopub.mobileads.AdAlertGestureListener.ZigZagState.GOING_LEFT;
-import static com.mopub.mobileads.AdAlertGestureListener.ZigZagState.GOING_RIGHT;
-import static com.mopub.mobileads.AdAlertGestureListener.ZigZagState.UNSET;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.stub;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class AdAlertGestureListenerTest {
-    @Mock
-    private View mockView;
-    @Mock
-    private AdReport mockAdReport;
-    private AdAlertGestureListener subject;
-    private float threshold;
-    private static final float INITIAL_X = 20;
-    private static final float INITIAL_Y = 50;
-    private float savedX;
-    private float savedY;
-    private MotionEvent actionDown;
-    @Mock
-    private Context mockContext;
-
-    @Before
-    public void setup() {
-        stub(mockView.getContext()).toReturn(mockContext);
-
-        subject = new AdAlertGestureListener(mockView, mockAdReport);
-
-        savedX = INITIAL_X;
-        savedY = INITIAL_Y;
-        actionDown = GestureUtils.createActionDown(INITIAL_X, INITIAL_Y);
-
-        threshold = subject.getMinimumDipsInZigZag();
-    }
-
-    @Test
-    public void constructor_shouldSetThresholdToOneThirdOfViewsWidth() throws Exception {
-        stub(mockView.getWidth()).toReturn(150);
-        subject = new AdAlertGestureListener(mockView, mockAdReport);
-        assertThat(subject.getMinimumDipsInZigZag()).isEqualTo(50);
-    }
-
-    @Test
-    public void constructor_whenViewWidthIsWiderThanThreeTimesMaxThreshold_shouldSetThresholdTo100() throws Exception {
-        stub(mockView.getWidth()).toReturn(500);
-        subject = new AdAlertGestureListener(mockView, mockAdReport);
-        assertThat(subject.getMinimumDipsInZigZag()).isEqualTo(100);
-    }
-
-    @Test
-    public void constructor_whenViewWidthIs0_shouldSetThresholdTo100() throws Exception {
-        stub(mockView.getWidth()).toReturn(0);
-        subject = new AdAlertGestureListener(mockView, mockAdReport);
-        assertThat(subject.getMinimumDipsInZigZag()).isEqualTo(100);
-    }
-
-    @Test
-    public void shouldDefaultToNoZigZagsCompletedAnd100DipsInZigZag() throws Exception {
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(0);
-        assertThat(subject.getMinimumDipsInZigZag()).isEqualTo(100);
-        assertZigZagState(UNSET);
-    }
-
-    @Test
-    public void onScroll_withInitialRightMovement_shouldSetStateToGoingRight() throws Exception {
-        simulateScroll(INITIAL_X);
-        assertZigZagState(UNSET);
-
-        simulateScroll(INITIAL_X + 1);
-        assertZigZagState(GOING_RIGHT);
-    }
-
-    @Test
-    public void onScroll_withInitialLeftThenRightMovement_whenRightMovementPassesInitialX_shouldSetStateToGoingRight() throws Exception {
-        simulateScroll(INITIAL_X);
-        assertZigZagState(UNSET);
-
-        simulateScroll(INITIAL_X - 10);
-        assertZigZagState(UNSET);
-
-        simulateScroll(INITIAL_X - 5);
-        assertZigZagState(UNSET);
-
-        simulateScroll(INITIAL_X + 1);
-        assertZigZagState(GOING_RIGHT);
-    }
-
-    @Test
-    public void onScroll_withInitialLeftThenRightMovement_BeforeZigCompletes_MovesOutOfUpperYBounds_shouldSetStateToFailed() throws Exception {
-        simulateScroll(INITIAL_X);
-        assertZigZagState(UNSET);
-
-        simulateScroll(INITIAL_X + 10);
-        assertZigZagState(GOING_RIGHT);
-
-        simulateScroll(savedX, INITIAL_Y + 49);
-        assertZigZagState(GOING_RIGHT);
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(0);
-
-        simulateScroll(savedX, INITIAL_Y + 102);
-        assertZigZagState(FAILED);
-    }
-
-    @Test
-    public void onScroll_withInitialLeftThenRightMovement_BeforeZigCompletes_MovesOutOfLowerYBounds_shouldSetStateToFailed() throws Exception {
-        simulateScroll(INITIAL_X);
-        assertZigZagState(UNSET);
-
-        simulateScroll(INITIAL_X + 10);
-        assertZigZagState(GOING_RIGHT);
-
-        simulateScroll(savedX, INITIAL_Y - 49);
-        assertZigZagState(GOING_RIGHT);
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(0);
-
-        simulateScroll(savedX, INITIAL_Y - 101);
-        assertZigZagState(FAILED);
-    }
-
-    @Test
-    public void onScroll_withZigZagZigZagZigZagZig_BeforeNextZagCompletes_MovesOutOfUpperYBounds_shouldSetStateToFailed() throws Exception {
-        performZigZag();
-        performZigZag();
-        performZigZag();
-        performZig();
-
-        simulateScroll(savedX, INITIAL_Y + 49);
-        assertZigZagState(GOING_RIGHT);
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(3);
-
-        simulateScroll(savedX, INITIAL_Y + 101);
-        assertZigZagState(FAILED);
-    }
-
-    @Test
-    public void onScroll_withZigZagZigZagZigZagZig_BeforeNextZagCompletes_MovesOutOfLowerYBounds_shouldSetStateToFailed() throws Exception {
-        performZigZag();
-        performZigZag();
-        performZigZag();
-        performZig();
-
-        simulateScroll(savedX - 1, INITIAL_Y - 49);
-        assertZigZagState(GOING_LEFT);
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(3);
-
-        simulateScroll(savedX, INITIAL_Y - 101);
-        assertZigZagState(FAILED);
-    }
-
-    @Test
-    public void onScroll_withStateFailed_withAnyMotion_shouldStayFailed() throws Exception {
-        simulateScroll(savedX, INITIAL_Y + 49);
-        simulateScroll(savedX, INITIAL_Y + 101);
-        assertZigZagState(FAILED);
-
-        performZigZag();
-        assertZigZagState(FAILED);
-
-        performZig();
-        assertZigZagState(FAILED);
-
-        performZag();
-        assertZigZagState(FAILED);
-    }
-
-    @Test
-    public void onScroll_whenGoingRightPastThreshold_thenGoingLeft_shouldSetStateToGoingLeft() throws Exception {
-        simulateScroll(INITIAL_X);
-        simulateScroll(INITIAL_X + threshold);
-        simulateScroll(INITIAL_X + threshold + 2);
-        assertZigZagState(GOING_RIGHT);
-
-        simulateScroll(INITIAL_X + threshold - 1);
-        assertZigZagState(GOING_LEFT);
-    }
-
-    @Test
-    public void onScroll_withCompleteZigZag_shouldSetStateToGoingLeftAndNumberOfZigZagsIs1() throws Exception {
-        performZig();
-        assertZigZagState(GOING_RIGHT);
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(0);
-
-        performZag();
-        assertZigZagState(GOING_LEFT);
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(1);
-    }
-
-    @Test
-    public void onScroll_withZig_butBeforeZagIsComplete_shouldKeepStateGoingLeftButNotIncrementZigZags() throws Exception {
-        performZig();
-        assertZigZagState(GOING_RIGHT);
-
-        simulateScroll(INITIAL_X + threshold - 5);
-        assertZigZagState(GOING_LEFT);
-
-        // we turn back prematurely
-        simulateScroll(INITIAL_X + threshold);
-        assertZigZagState(GOING_LEFT);
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(0);
-    }
-
-    @Test
-    public void onScroll_withZigZagZig_butTurningLeftBeforeSecondZigIsComplete_shouldKeepStateGoingRightButNotReachRightThreshold() throws Exception {
-        performZigZag();
-        assertZigZagState(GOING_LEFT);
-
-        simulateScroll(INITIAL_X + 10);
-        assertZigZagState(GOING_RIGHT);
-        simulateScroll(INITIAL_X);
-        assertZigZagState(GOING_RIGHT);
-    }
-
-    @Test
-    public void checkReportAd_withZigZagThreeTimes_shouldNotAlertFlagAndSetStateToUnset() throws Exception {
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(1);
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(2);
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(3);
-
-        subject.finishGestureDetection();
-
-        assertThat(subject.getAdAlertReporter()).isNull();
-        assertZigZagState(UNSET);
-    }
-
-    @Test
-    public void onScroll_withFourZigZags_shouldSetStateToFinished() throws Exception {
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(1);
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(2);
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(3);
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(4);
-
-        assertZigZagState(FINISHED);
-    }
-
-    @Test
-    public void checkReportAd_withZigZagFourTimes_shouldAlertFlagAndSetStateToUnset() throws Exception {
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(1);
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(2);
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(3);
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(4);
-
-        subject.finishGestureDetection();
-
-        assertThat(subject.getAdAlertReporter()).isNotNull();
-        assertZigZagState(UNSET);
-    }
-
-    @Test
-    public void checkReportAd_withZigZagTenTimes_shouldAlertFlag_andNotIncrementZigZagCount_andSetStateToFinished() throws Exception {
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(1);
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(2);
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(3);
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(4);
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(4);
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(4);
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(4);
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(4);
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(4);
-        performZigZag();
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(4);
-
-        subject.finishGestureDetection();
-
-        assertThat(subject.getAdAlertReporter()).isNotNull();
-        assertZigZagState(UNSET);
-    }
-
-    @Test
-    public void reset_shouldResetStateAndZigZagCount() throws Exception {
-        performZigZag();
-        performZig();
-
-        subject.reset();
-
-        assertThat(subject.getNumberOfZigzags()).isEqualTo(0);
-        assertZigZagState(UNSET);
-    }
-
-    private void simulateScroll(float endX) {
-        simulateScroll(endX, savedY);
-    }
-
-    private void simulateScroll(float endX, float endY) {
-        final float stepSizeX = Math.signum(endX - savedX) * 0.5f;
-        final float stepSizeY = Math.signum(endY - savedY) * 0.5f;
-        float x = savedX;
-        float y = savedY;
-
-        if (areEqual(savedX, endX)) {
-            subject.onScroll(actionDown, GestureUtils.createActionMove(x, y), 0, 0);
-        } else if (savedX < endX) {
-            for (; x < endX; x += stepSizeX) {
-                subject.onScroll(actionDown, GestureUtils.createActionMove(x, y), 0, 0);
-            }
-        } else if (savedX > endX) {
-            for (; x > endX; x += stepSizeX) {
-                subject.onScroll(actionDown, GestureUtils.createActionMove(x, y), 0, 0);
-            }
-        }
-
-        if (areEqual(savedY, endY)) {
-            subject.onScroll(actionDown, GestureUtils.createActionMove(x, y), 0, 0);
-        } else if (savedY < endY) {
-            for (; y < endY; y += stepSizeY) {
-                subject.onScroll(actionDown, GestureUtils.createActionMove(x, y), 0, 0);
-            }
-        } else if (savedY > endY) {
-            for (; y > endY; y += stepSizeY) {
-                subject.onScroll(actionDown, GestureUtils.createActionMove(x, y), 0, 0);
-            }
-        }
-
-        savedX = endX;
-        savedY = endY;
-    }
-
-    private void performZig() {
-        simulateScroll(savedX + threshold + 1);
-    }
-
-    private void performZag() {
-        simulateScroll(savedX - threshold - 1);
-    }
-
-    private void performZigZag() {
-        performZig();
-        performZag();
-    }
-
-    private boolean areEqual(float a, float b) {
-        return (Math.abs(a - b) < 0.01f);
-    }
-
-    private void assertZigZagState(AdAlertGestureListener.ZigZagState state) {
-        assertThat(subject.getCurrentZigZagState()).isEqualTo(state);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
deleted file mode 100644
index d743e27c..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
+++ /dev/null
@@ -1,194 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.content.Intent;
-import android.graphics.Bitmap;
-import android.net.Uri;
-import android.view.View;
-import android.widget.TextView;
-
-import com.mopub.common.AdReport;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.test.support.TestDateAndTime;
-
-import org.junit.Before;
-import org.junit.Ignore;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.RuntimeEnvironment;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowApplication;
-
-import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.Date;
-import java.util.Locale;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class AdAlertReporterTest {
-    private final static String EMAIL_ADDRESS = "creative-review@mopub.com";
-    private AdAlertReporter subject;
-    @Mock
-    private AdReport mockAdReport;
-    @Mock
-    private Context mockContext;
-    @Mock
-    private View mockView;
-    private Intent emailIntent;
-    private Bitmap bitmap;
-    private ArrayList<Uri> emailAttachments;
-    private Date now;
-
-    @Before
-    public void setup() {
-        bitmap = Bitmap.createBitmap(10, 10, Bitmap.Config.ARGB_8888);
-
-        stub(mockView.getRootView()).toReturn(mockView);
-        stub(mockView.getDrawingCache()).toReturn(bitmap);
-
-        now = new Date();
-        TestDateAndTime.getInstance().setNow(now);
-    }
-
-    @Test
-    public void constructor_shouldCreateSendToIntentWithEmailAddress() throws Exception {
-        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
-        emailIntent = subject.getEmailIntent();
-
-        assertThat(emailIntent.getAction()).isEqualTo(Intent.ACTION_SENDTO);
-        assertThat(emailIntent.getData()).isEqualTo(Uri.parse("mailto:creative-review@mopub.com"));
-    }
-
-    @Test
-    public void constructor_shouldCreateIntentWithDatestampInSubject() throws Exception {
-        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
-        emailIntent = subject.getEmailIntent();
-
-        String emailSubject = emailIntent.getStringExtra(Intent.EXTRA_SUBJECT);
-        String subjectParts[] = emailSubject.split(" - ");
-
-        String title = subjectParts[0];
-        assertThat(title).isEqualTo("New creative violation report");
-
-        String dateTimeString = subjectParts[1];
-        SimpleDateFormat dateFormat = new SimpleDateFormat("M/d/yy hh:mm:ss a z", Locale.US);
-
-        Date date = dateFormat.parse(dateTimeString);
-
-        assertThat(date.getTime() - now.getTime()).isLessThan(10000);
-    }
-
-    @Test
-    public void constructor_shouldCreateIntentWithImageStringAndParametersAndResponseInBody() throws Exception {
-        TextView textView = mock(TextView.class);
-        Bitmap sampleBitmap = Bitmap.createBitmap(10, 10, Bitmap.Config.ALPHA_8);
-        stub(textView.getDrawingCache()).toReturn(sampleBitmap);
-        stub(mockView.getRootView()).toReturn(textView);
-
-        stub(mockAdReport.toString()).toReturn("Ad Report data - this is a long list of newlined params.");
-        stub(mockAdReport.getResponseString()).toReturn("Test ad string.");
-        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
-
-        emailIntent = subject.getEmailIntent();
-        String emailSubject = emailIntent.getStringExtra(Intent.EXTRA_TEXT);
-        String bodyParts[] = emailSubject.split("\n=================\n");
-        String parameters = bodyParts[0];
-        String response = bodyParts[1];
-        String imageString = bodyParts[2];
-
-        assertThat(bodyParts.length).isEqualTo(3);
-        //this string is the JPEG encoded version
-        assertThat(parameters).isEqualTo(subject.getParameters());
-        assertThat(response).isEqualTo(subject.getResponse());
-        assertThat(imageString).isEqualTo("Qml0bWFwICgxMCB4IDEwKSBjcmVhdGVkIGZyb20gQml0bWFwIG9iamVjdCBjb21wcmVzc2VkIGFz\nIEpQRUcgd2l0aCBxdWFsaXR5IDI1\n");
-    }
-
-    @Test
-    public void constructor_whenAdReportIsNull_shouldReturnEmptyString() throws Exception {
-        subject = new AdAlertReporter(mockContext, mockView, null);
-
-        assertThat(subject.getParameters()).isEmpty();
-        assertThat(subject.getResponse()).isEmpty();
-    }
-
-    @Test
-    public void constructor_shouldSetCorrectResponseString() throws Exception {
-        String expectedResponse = "response";
-
-        stub(mockAdReport.getResponseString()).toReturn(expectedResponse);
-        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
-
-        assertThat(subject.getResponse()).isEqualTo(expectedResponse);
-    }
-
-    @Test
-    public void send_shouldCreateEmailChooserIntent() throws Exception {
-        final Context applicationContext = RuntimeEnvironment.application;
-        // A real device uses application context here, which causes Intents.startActivity to add
-        // FLAG_ACTIVITY_NEW_TASK (and thus we assert for it below)
-        subject = new AdAlertReporter(applicationContext, mockView, mockAdReport);
-        subject.send();
-
-        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_SENDTO);
-        assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-    }
-
-    @Ignore("pending")
-    @Test
-    public void getScreenshot_whenIsDrawingCacheEnabled_shouldKeepDrawingCacheEnabled() throws Exception {
-        reset(mockView);
-        stub(mockView.getRootView()).toReturn(mockView);
-        stub(mockView.isDrawingCacheEnabled()).toReturn(true);
-
-        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
-
-        verify(mockView, never()).setDrawingCacheEnabled(false);
-    }
-
-    @Ignore("pending")
-    @Test
-    public void getScreenshot_whenIsDrawingCacheDisabled_shouldKeepDrawingCacheDisabled() throws Exception {
-        reset(mockView);
-        stub(mockView.getRootView()).toReturn(mockView);
-        stub(mockView.isDrawingCacheEnabled()).toReturn(false);
-
-        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
-
-        verify(mockView).setDrawingCacheEnabled(false);
-    }
-
-    @Test
-    public void getScreenshot_whenViewIsNull_shouldPass() throws Exception {
-        subject = new AdAlertReporter(mockContext, null, mockAdReport);
-
-        // pass
-    }
-
-    @Test
-    public void getScreenshot_whenRootViewIsNull_shouldPass() throws Exception {
-        stub(mockView.getRootView()).toReturn(null);
-
-        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
-
-        // pass
-    }
-
-    @Test
-    public void getScreenshot_whenRootViewDrawingCacheIsNull_shouldPass() throws Exception {
-        stub(mockView.getDrawingCache()).toReturn(null);
-
-        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
-
-        // pass
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdRequestStatusMappingTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdRequestStatusMappingTest.java
deleted file mode 100644
index bc66ea83..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdRequestStatusMappingTest.java
+++ /dev/null
@@ -1,129 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class AdRequestStatusMappingTest {
-    private AdRequestStatusMapping subject;
-    private String key1;
-
-    @Before
-    public void setUp() {
-        subject = new AdRequestStatusMapping();
-        key1 = "adUnitId1";
-    }
-
-    @Test
-    public void markFail_shouldNullOutAllValues() {
-        subject.markFail(key1);
-
-        assertThat(subject.getFailoverUrl(key1)).isNull();
-        assertThat(subject.getImpressionTrackerUrlString(key1)).isNull();
-        assertThat(subject.getClickTrackerUrlString(key1)).isNull();
-
-        assertThat(subject.canPlay(key1)).isFalse();
-        assertThat(subject.isLoading(key1)).isFalse();
-    }
-
-    @Test
-    public void markLoading_shouldNotUpdateUrls_shouldSetIsLoadingTrue() {
-        subject.markLoading(key1);
-
-        assertThat(subject.getFailoverUrl(key1)).isNull();
-        assertThat(subject.getImpressionTrackerUrlString(key1)).isNull();
-        assertThat(subject.getClickTrackerUrlString(key1)).isNull();
-
-        assertThat(subject.canPlay(key1)).isFalse();
-        assertThat(subject.isLoading(key1)).isTrue();
-    }
-
-    @Test
-    public void markLoaded_shouldUpdateUrls_shouldSetCanPlayTrue() {
-        subject.markLoaded(key1, "fail", "imp", "click");
-
-        assertThat(subject.getFailoverUrl(key1)).isEqualTo("fail");
-        assertThat(subject.getImpressionTrackerUrlString(key1)).isEqualTo("imp");
-        assertThat(subject.getClickTrackerUrlString(key1)).isEqualTo("click");
-
-        assertThat(subject.canPlay(key1)).isTrue();
-        assertThat(subject.isLoading(key1)).isFalse();
-    }
-
-    @Test
-    public void markLoaded_withNullValues_shouldUpdateUrls_shouldSetCanPlayTrue() {
-        subject.markLoaded(key1, null, null, null);
-
-        assertThat(subject.getFailoverUrl(key1)).isNull();
-        assertThat(subject.getImpressionTrackerUrlString(key1)).isNull();
-        assertThat(subject.getClickTrackerUrlString(key1)).isNull();
-
-        assertThat(subject.canPlay(key1)).isTrue();
-        assertThat(subject.isLoading(key1)).isFalse();
-    }
-
-    @Test
-    public void markPlayed_afterLoaded_shouldKeepExistingUrls_shouldSetCanPlayFalse() {
-        subject.markLoaded(key1, "fail", "imp", "click");
-        subject.markPlayed(key1);
-
-        assertThat(subject.getFailoverUrl(key1)).isEqualTo("fail");
-        assertThat(subject.getImpressionTrackerUrlString(key1)).isEqualTo("imp");
-        assertThat(subject.getClickTrackerUrlString(key1)).isEqualTo("click");
-
-        assertThat(subject.canPlay(key1)).isFalse();
-        assertThat(subject.isLoading(key1)).isFalse();
-    }
-
-    @Test
-    public void markPlayed_beforeLoaded_shouldSetUrlsNull_shouldSetCanPlayFalse() {
-        subject.markPlayed(key1);
-
-        assertThat(subject.getFailoverUrl(key1)).isNull();
-        assertThat(subject.getImpressionTrackerUrlString(key1)).isNull();
-        assertThat(subject.getClickTrackerUrlString(key1)).isNull();
-
-        assertThat(subject.canPlay(key1)).isFalse();
-        assertThat(subject.isLoading(key1)).isFalse();
-    }
-
-    @Test
-    public void clearImpression_shouldResetImpressionUrl() {
-        subject.markLoaded(key1, "fail", "imp", "click");
-        subject.clearImpressionUrl(key1);
-
-        assertThat(subject.getFailoverUrl(key1)).isEqualTo("fail");
-        assertThat(subject.getImpressionTrackerUrlString(key1)).isNull();
-        assertThat(subject.getClickTrackerUrlString(key1)).isEqualTo("click");
-    }
-
-    @Test
-    public void clearclick_shouldResetClickurl() {
-        subject.markLoaded(key1, "fail", "imp", "click");
-        subject.clearClickUrl(key1);
-
-        assertThat(subject.getFailoverUrl(key1)).isEqualTo("fail");
-        assertThat(subject.getImpressionTrackerUrlString(key1)).isEqualTo("imp");
-        assertThat(subject.getClickTrackerUrlString(key1)).isNull();
-    }
-
-    @Test
-    public void allAccessors_withInvalidKey_shouldReturnDefaultsAndNotThrowExceptions() {
-        assertThat(subject.getFailoverUrl(key1)).isNull();
-        assertThat(subject.getImpressionTrackerUrlString(key1)).isNull();
-        assertThat(subject.getClickTrackerUrlString(key1)).isNull();
-
-        assertThat(subject.canPlay(key1)).isFalse();
-        assertThat(subject.isLoading(key1)).isFalse();
-
-        subject.clearImpressionUrl(key1);
-        subject.clearClickUrl(key1);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
deleted file mode 100644
index 579ebaec..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
+++ /dev/null
@@ -1,150 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-
-import com.mopub.common.AdFormat;
-import com.mopub.common.AdType;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.ResponseHeader;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import java.util.HashMap;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class AdTypeTranslatorTest {
-    private String customEventName;
-    private MoPubView moPubView;
-    private MoPubInterstitial.MoPubInterstitialView moPubInterstitialView;
-    HashMap<String, String> headers;
-
-    @Before
-    public void setUp() throws Exception {
-        moPubView = mock(MoPubView.class);
-        moPubInterstitialView = mock(MoPubInterstitial.MoPubInterstitialView.class);
-
-        Context context = Robolectric.buildActivity(Activity.class).create().get();
-        stub(moPubView.getContext()).toReturn(context);
-        stub(moPubInterstitialView.getContext()).toReturn(context);
-
-        headers = new HashMap<String, String>();
-    }
-
-    @Test
-    public void getCustomEventName_shouldBeGoogleBanner() {
-        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.BANNER, "admob_native", null, headers);
-
-        assertThat(customEventName).isEqualTo("com.mopub.mobileads.GooglePlayServicesBanner");
-    }
-
-    @Test
-    public void getCustomEventName_shouldBeGoogleInterstitial() {
-        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.BANNER, "interstitial", "admob_full", headers);
-
-        assertThat(customEventName).isEqualTo("com.mopub.mobileads.GooglePlayServicesInterstitial");
-    }
-
-    @Test
-    public void getCustomEventName_shouldBeMillenialBanner() {
-        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.BANNER, "millennial_native", null, headers);
-
-        assertThat(customEventName).isEqualTo("com.mopub.mobileads.MillennialBanner");
-    }
-
-    @Test
-    public void getCustomEventName_shouldBeMillennialIntersitial() {
-        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.INTERSTITIAL, "interstitial", "millennial_full", headers);
-
-        assertThat(customEventName).isEqualTo("com.mopub.mobileads.MillennialInterstitial");
-    }
-
-    @Test
-    public void getCustomEventName_shouldBeMraidBanner() {
-        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.BANNER, AdType.MRAID, null, headers);
-
-        assertThat(customEventName).isEqualTo("com.mopub.mraid.MraidBanner");
-    }
-
-    @Test
-    public void getCustomEventName_shouldBeMraidInterstitial() {
-        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.INTERSTITIAL, AdType.MRAID, null, headers);
-
-        assertThat(customEventName).isEqualTo("com.mopub.mraid.MraidInterstitial");
-    }
-
-    @Test
-    public void getCustomEventName_shouldBeHtmlBanner() {
-        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.BANNER, "html", null, headers);
-
-        assertThat(customEventName).isEqualTo("com.mopub.mobileads.HtmlBanner");
-    }
-
-    @Test
-    public void getCustomEventName_shouldBeHtmlInterstitial() {
-        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.INTERSTITIAL, "html", null, headers);
-
-        assertThat(customEventName).isEqualTo("com.mopub.mobileads.HtmlInterstitial");
-    }
-
-    @Test
-    public void getCustomEventName_shouldBeVastInterstitial() {
-        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.INTERSTITIAL, "interstitial", "vast", headers);
-
-        assertThat(customEventName).isEqualTo("com.mopub.mobileads.VastVideoInterstitial");
-    }
-
-    @Test
-    public void getCustomEventName_shouldBeCustomClassName() {
-        headers.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "com.example.CustomClass");
-        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.BANNER, AdType.CUSTOM, null, headers);
-
-        assertThat(customEventName).isEqualTo("com.example.CustomClass");
-    }
-
-    @Test
-    public void getCustomEventName_whenNameNotInHeaders_shouldBeNull() {
-        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.BANNER, AdType.CUSTOM, null, headers);
-
-        assertThat(customEventName).isNull();
-    }
-
-    @Test
-    public void getCustomEventName_withNativeFormat_shouldBeMoPubNative() {
-        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.NATIVE, AdType.STATIC_NATIVE, null, headers);
-
-        assertThat(customEventName).isEqualTo("com.mopub.nativeads.MoPubCustomEventNative");
-    }
-
-    @Test
-    public void getCustomEventName_whenInvalidAdTypeAndInvalidFullAdType_shouldReturnNull() {
-        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.BANNER, "garbage", "garbage",
-                headers);
-        assertThat(customEventName).isNull();
-    }
-
-    @Test
-    public void getCustomEventName_withRewardedVideoFormat_shouldBeMoPubRewardedVideo() {
-        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.REWARDED_VIDEO,
-                AdType.REWARDED_VIDEO, null, headers);
-
-        assertThat(customEventName).isEqualTo("com.mopub.mobileads.MoPubRewardedVideo");
-    }
-
-    @Test
-    public void getCustomEventName_withRewardedPlayableFormat_shouldBeMoPubRewardedPlayable() {
-        customEventName = AdTypeTranslator.getCustomEventName(AdFormat.INTERSTITIAL,
-                AdType.REWARDED_PLAYABLE, null, headers);
-
-        assertThat(customEventName).isEqualTo("com.mopub.mobileads.MoPubRewardedPlayable");
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
deleted file mode 100644
index 9728aa1b..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
+++ /dev/null
@@ -1,669 +0,0 @@
-package com.mopub.mobileads;
-
-import android.Manifest;
-import android.app.Activity;
-import android.content.Context;
-import android.net.ConnectivityManager;
-import android.view.Gravity;
-import android.view.View;
-import android.widget.FrameLayout;
-
-import com.mopub.common.AdFormat;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.Reflection;
-import com.mopub.common.util.test.support.TestMethodBuilderFactory;
-import com.mopub.mobileads.test.support.ThreadUtils;
-import com.mopub.network.AdRequest;
-import com.mopub.network.AdResponse;
-import com.mopub.network.MoPubNetworkError;
-import com.mopub.network.MoPubRequestQueue;
-import com.mopub.network.Networking;
-import com.mopub.volley.NetworkResponse;
-import com.mopub.volley.NoConnectionError;
-import com.mopub.volley.Request;
-import com.mopub.volley.VolleyError;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
-import org.robolectric.Shadows;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowLooper;
-
-import java.util.Collections;
-import java.util.Map;
-
-import static com.mopub.common.VolleyRequestMatcher.isUrl;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyMap;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.argThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyZeroInteractions;
-import static org.mockito.Mockito.when;
-
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class AdViewControllerTest {
-
-    private static final int[] HTML_ERROR_CODES = new int[]{400, 401, 402, 403, 404, 405, 407, 408,
-            409, 410, 411, 412, 413, 414, 415, 416, 417, 500, 501, 502, 503, 504, 505};
-
-    private AdViewController subject;
-    @Mock private MoPubView mockMoPubView;
-    @Mock private MoPubRequestQueue mockRequestQueue;
-    private Reflection.MethodBuilder methodBuilder;
-
-    private AdResponse response;
-    private Activity activity;
-
-    @Before
-    public void setup() {
-        activity = Robolectric.buildActivity(Activity.class).create().get();
-        Shadows.shadowOf(activity).grantPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE);
-
-        when(mockMoPubView.getAdFormat()).thenReturn(AdFormat.BANNER);
-        when(mockMoPubView.getContext()).thenReturn(activity);
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-
-        subject = new AdViewController(activity, mockMoPubView);
-
-        methodBuilder = TestMethodBuilderFactory.getSingletonMock();
-        reset(methodBuilder);
-        response = new AdResponse.Builder()
-                .setCustomEventClassName("customEvent")
-                .setClickTrackingUrl("clickUrl")
-                .setImpressionTrackingUrl("impressionUrl")
-                .setRedirectUrl("redirectUrl")
-                .setScrollable(false)
-                .setDimensions(320, 50)
-                .setAdType("html")
-                .setFailoverUrl("failUrl")
-                .setResponseBody("testResponseBody")
-                .setServerExtras(Collections.<String, String>emptyMap())
-                .build();
-    }
-
-    @After
-    public void tearDown() throws Exception {
-        reset(methodBuilder);
-    }
-
-    @Test
-    public void cleanup_shouldNotHoldViewOrUrlGenerator() {
-        subject.cleanup();
-
-        assertThat(subject.getMoPubView()).isNull();
-        assertThat(subject.generateAdUrl()).isNull();
-    }
-
-    @Test
-    public void adDidFail_shouldScheduleRefreshTimer_shouldCallMoPubViewAdFailed() throws Exception {
-        ShadowLooper.pauseMainLooper();
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
-
-        subject.adDidFail(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
-        verify(mockMoPubView).adFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-    }
-
-    @Test
-    public void adDidFail_withNullMoPubView_shouldNotScheduleRefreshTimer_shouldNotCallMoPubViewAdFailed() throws Exception {
-        ShadowLooper.pauseMainLooper();
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
-
-        // This sets the MoPubView to null
-        subject.cleanup();
-        subject.adDidFail(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
-        verify(mockMoPubView, never()).adFailed(any(MoPubErrorCode.class));
-    }
-
-
-    @Test
-    public void scheduleRefreshTimer_shouldNotScheduleIfRefreshTimeIsNull() throws Exception {
-        response = response.toBuilder().setRefreshTimeMilliseconds(null).build();
-        subject.onAdLoadSuccess(response);
-        ShadowLooper.pauseMainLooper();
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
-
-        subject.scheduleRefreshTimerIfEnabled();
-
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
-    }
-
-    @Test
-    public void scheduleRefreshTimer_shouldNotScheduleIfRefreshTimeIsZero() {
-        response = response.toBuilder().setRefreshTimeMilliseconds(0).build();
-        subject.onAdLoadSuccess(response);
-        ShadowLooper.pauseMainLooper();
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
-
-        subject.scheduleRefreshTimerIfEnabled();
-
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
-    }
-
-    @Test
-    public void scheduleRefreshTimerIfEnabled_shouldCancelOldRefreshAndScheduleANewOne() throws Exception {
-        response = response.toBuilder().setRefreshTimeMilliseconds(30).build();
-        subject.onAdLoadSuccess(response);
-        ShadowLooper.pauseMainLooper();
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
-
-        subject.scheduleRefreshTimerIfEnabled();
-
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
-
-        subject.scheduleRefreshTimerIfEnabled();
-
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
-    }
-
-    @Test
-    public void scheduleRefreshTimer_shouldNotScheduleRefreshIfAutorefreshIsOff() throws Exception {
-        response = response.toBuilder().setRefreshTimeMilliseconds(30).build();
-        subject.onAdLoadSuccess(response);
-
-        ShadowLooper.pauseMainLooper();
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
-
-        subject.forceSetAutorefreshEnabled(false);
-
-        subject.scheduleRefreshTimerIfEnabled();
-
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
-    }
-
-    @Test
-    public void scheduleRefreshTimer_whenAdViewControllerNotConfiguredByResponse_shouldHaveDefaultRefreshTime() throws Exception {
-        ShadowLooper.pauseMainLooper();
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
-
-        subject.scheduleRefreshTimerIfEnabled();
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
-
-        ShadowLooper.idleMainLooper(AdViewController.DEFAULT_REFRESH_TIME_MILLISECONDS - 1);
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
-
-        ShadowLooper.idleMainLooper(1);
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
-    }
-
-    @Test
-    public void forceSetAutoRefreshEnabled_shouldSetAutoRefreshSetting() throws Exception {
-        assertThat(subject.getAutorefreshEnabled()).isTrue();
-
-        subject.forceSetAutorefreshEnabled(false);
-        assertThat(subject.getAutorefreshEnabled()).isFalse();
-
-        subject.forceSetAutorefreshEnabled(true);
-        assertThat(subject.getAutorefreshEnabled()).isTrue();
-    }
-
-    @Test
-    public void pauseRefresh_shouldDisableAutorefresh() throws Exception {
-        assertThat(subject.getAutorefreshEnabled()).isTrue();
-
-        subject.pauseRefresh();
-        assertThat(subject.getAutorefreshEnabled()).isFalse();
-    }
-
-    @Test
-    public void unpauseRefresh_afterUnpauseRefresh_shouldEnableRefresh() throws Exception {
-        subject.pauseRefresh();
-
-        subject.unpauseRefresh();
-        assertThat(subject.getAutorefreshEnabled()).isTrue();
-    }
-
-    @Test
-    public void pauseAndUnpauseRefresh_withRefreshForceDisabled_shouldAlwaysHaveRefreshFalse() throws Exception {
-        subject.forceSetAutorefreshEnabled(false);
-        assertThat(subject.getAutorefreshEnabled()).isFalse();
-
-        subject.pauseRefresh();
-        assertThat(subject.getAutorefreshEnabled()).isFalse();
-
-        subject.unpauseRefresh();
-        assertThat(subject.getAutorefreshEnabled()).isFalse();
-    }
-
-    @Test
-    public void enablingAutoRefresh_afterLoadAd_shouldScheduleNewRefreshTimer() throws Exception {
-
-        final AdViewController adViewControllerSpy = spy(subject);
-
-        adViewControllerSpy.loadAd();
-        adViewControllerSpy.forceSetAutorefreshEnabled(true);
-        verify(adViewControllerSpy).scheduleRefreshTimerIfEnabled();
-    }
-
-    @Test
-    public void enablingAutoRefresh_withoutCallingLoadAd_shouldNotScheduleNewRefreshTimer() throws Exception {
-        final AdViewController adViewControllerSpy = spy(subject);
-
-        adViewControllerSpy.forceSetAutorefreshEnabled(true);
-        verify(adViewControllerSpy, never()).scheduleRefreshTimerIfEnabled();
-    }
-
-    @Test
-    public void disablingAutoRefresh_shouldCancelRefreshTimers() throws Exception {
-        response = response.toBuilder().setRefreshTimeMilliseconds(30).build();
-        subject.onAdLoadSuccess(response);
-        ShadowLooper.pauseMainLooper();
-
-        subject.loadAd();
-        subject.forceSetAutorefreshEnabled(true);
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
-
-        subject.forceSetAutorefreshEnabled(false);
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
-    }
-
-    @Test
-    public void trackImpression_shouldAddToRequestQueue() throws Exception {
-        subject.onAdLoadSuccess(response);
-        subject.trackImpression();
-
-        verify(mockRequestQueue).add(argThat(isUrl("impressionUrl")));
-    }
-
-    @Test
-    public void trackImpression_noAdResponse_shouldNotAddToQueue() {
-        subject.trackImpression();
-
-        verifyZeroInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void registerClick_shouldHttpGetTheClickthroughUrl() throws Exception {
-        subject.onAdLoadSuccess(response);
-
-        subject.registerClick();
-        verify(mockRequestQueue).add(argThat(isUrl("clickUrl")));
-    }
-
-    @Test
-    public void registerClick_NoAdResponse_shouldNotAddToQueue() {
-        subject.registerClick();
-        verifyZeroInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void fetchAd_withNullMoPubView_shouldNotMakeRequest() throws Exception {
-        subject.cleanup();
-        subject.fetchAd("adUrl");
-        verify(mockRequestQueue, never()).add(any(AdRequest.class));
-    }
-
-    @Test
-    public void loadAd_shouldNotLoadWithoutConnectivity() throws Exception {
-        ConnectivityManager connectivityManager = (ConnectivityManager) RuntimeEnvironment.application.getSystemService(Context.CONNECTIVITY_SERVICE);
-        Shadows.shadowOf(connectivityManager.getActiveNetworkInfo()).setConnectionStatus(false);
-        subject.setAdUnitId("adunit");
-
-        subject.loadAd();
-        verifyZeroInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void loadAd_shouldNotLoadUrlIfAdUnitIdIsNull() throws Exception {
-        subject.loadAd();
-
-        verifyZeroInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void loadNonJavascript_shouldFetchAd() throws Exception {
-        String url = "https://www.guy.com";
-        subject.loadNonJavascript(url);
-
-        verify(mockRequestQueue).add(argThat(isUrl(url)));
-    }
-
-    @Test
-    public void loadNonJavascript_whenAlreadyLoading_shouldNotFetchAd() throws Exception {
-        String url = "https://www.guy.com";
-        subject.loadNonJavascript(url);
-        reset(mockRequestQueue);
-        subject.loadNonJavascript(url);
-
-        verify(mockRequestQueue, never()).add(any(Request.class));
-    }
-
-    @Test
-    public void loadNonJavascript_shouldAcceptNullParameter() throws Exception {
-        subject.loadNonJavascript(null);
-        // pass
-    }
-
-    @Test
-    public void reload_shouldReuseOldUrl() throws Exception {
-        String url = "https://www.guy.com";
-        subject.loadNonJavascript(url);
-        subject.setNotLoading();
-        reset(mockRequestQueue);
-        subject.reload();
-
-        verify(mockRequestQueue).add(argThat(isUrl(url)));
-    }
-
-    @Test
-    public void loadFailUrl_shouldLoadFailUrl() throws Exception {
-        subject.onAdLoadSuccess(response);
-        subject.loadFailUrl(MoPubErrorCode.INTERNAL_ERROR);
-
-        verify(mockRequestQueue).add(argThat(isUrl("failUrl")));
-        verify(mockMoPubView, never()).adFailed(any(MoPubErrorCode.class));
-    }
-
-    @Test
-    public void loadFailUrl_shouldAcceptNullErrorCode() throws Exception {
-        subject.loadFailUrl(null);
-        // pass
-    }
-
-    @Test
-    public void loadFailUrl_whenFailUrlIsNull_shouldCallAdDidFail() throws Exception {
-        response.toBuilder().setFailoverUrl(null).build();
-        subject.loadFailUrl(MoPubErrorCode.INTERNAL_ERROR);
-
-        verify(mockMoPubView).adFailed(eq(MoPubErrorCode.NO_FILL));
-        verifyZeroInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void setAdContentView_whenCalledFromWrongUiThread_shouldStillSetContentView() throws Exception {
-        final View view = mock(View.class);
-        AdViewController.setShouldHonorServerDimensions(view);
-        subject.onAdLoadSuccess(response);
-
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-                subject.setAdContentView(view);
-            }
-        }).start();
-        ThreadUtils.pause(100);
-        ShadowLooper.runUiThreadTasks();
-
-        verify(mockMoPubView).removeAllViews();
-        ArgumentCaptor<FrameLayout.LayoutParams> layoutParamsCaptor = ArgumentCaptor.forClass(FrameLayout.LayoutParams.class);
-        verify(mockMoPubView).addView(eq(view), layoutParamsCaptor.capture());
-        FrameLayout.LayoutParams layoutParams = layoutParamsCaptor.getValue();
-
-        assertThat(layoutParams.width).isEqualTo(320);
-        assertThat(layoutParams.height).isEqualTo(50);
-        assertThat(layoutParams.gravity).isEqualTo(Gravity.CENTER);
-    }
-
-    @Test
-    public void setAdContentView_whenCalledAfterCleanUp_shouldNotRemoveViewsAndAddView() throws Exception {
-        final View view = mock(View.class);
-        AdViewController.setShouldHonorServerDimensions(view);
-        subject.onAdLoadSuccess(response);
-
-        subject.cleanup();
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-                subject.setAdContentView(view);
-            }
-        }).start();
-        ThreadUtils.pause(10);
-        ShadowLooper.runUiThreadTasks();
-
-        verify(mockMoPubView, never()).removeAllViews();
-        verify(mockMoPubView, never()).addView(any(View.class), any(FrameLayout.LayoutParams.class));
-    }
-
-    @Test
-    public void setAdContentView_whenHonorServerDimensionsAndHasDimensions_shouldSizeAndCenterView() throws Exception {
-        View view = mock(View.class);
-        AdViewController.setShouldHonorServerDimensions(view);
-        subject.onAdLoadSuccess(response);
-
-        subject.setAdContentView(view);
-
-        verify(mockMoPubView).removeAllViews();
-        ArgumentCaptor<FrameLayout.LayoutParams> layoutParamsCaptor = ArgumentCaptor.forClass(FrameLayout.LayoutParams.class);
-        verify(mockMoPubView).addView(eq(view), layoutParamsCaptor.capture());
-        FrameLayout.LayoutParams layoutParams = layoutParamsCaptor.getValue();
-
-        assertThat(layoutParams.width).isEqualTo(320);
-        assertThat(layoutParams.height).isEqualTo(50);
-        assertThat(layoutParams.gravity).isEqualTo(Gravity.CENTER);
-    }
-
-    @Test
-    public void setAdContentView_whenHonorServerDimensionsAndDoesntHaveDimensions_shouldWrapAndCenterView() throws Exception {
-        response = response.toBuilder().setDimensions(null, null).build();
-        View view = mock(View.class);
-        AdViewController.setShouldHonorServerDimensions(view);
-        subject.onAdLoadSuccess(response);
-
-        subject.setAdContentView(view);
-
-        verify(mockMoPubView).removeAllViews();
-        ArgumentCaptor<FrameLayout.LayoutParams> layoutParamsCaptor = ArgumentCaptor.forClass(FrameLayout.LayoutParams.class);
-        verify(mockMoPubView).addView(eq(view), layoutParamsCaptor.capture());
-        FrameLayout.LayoutParams layoutParams = layoutParamsCaptor.getValue();
-
-        assertThat(layoutParams.width).isEqualTo(FrameLayout.LayoutParams.WRAP_CONTENT);
-        assertThat(layoutParams.height).isEqualTo(FrameLayout.LayoutParams.WRAP_CONTENT);
-        assertThat(layoutParams.gravity).isEqualTo(Gravity.CENTER);
-    }
-
-    @Test
-    public void setAdContentView_whenNotServerDimensions_shouldWrapAndCenterView() throws Exception {
-        subject.onAdLoadSuccess(response);
-        View view = mock(View.class);
-
-        subject.setAdContentView(view);
-
-        verify(mockMoPubView).removeAllViews();
-        ArgumentCaptor<FrameLayout.LayoutParams> layoutParamsCaptor = ArgumentCaptor.forClass(FrameLayout.LayoutParams.class);
-        verify(mockMoPubView).addView(eq(view), layoutParamsCaptor.capture());
-        FrameLayout.LayoutParams layoutParams = layoutParamsCaptor.getValue();
-
-        assertThat(layoutParams.width).isEqualTo(FrameLayout.LayoutParams.WRAP_CONTENT);
-        assertThat(layoutParams.height).isEqualTo(FrameLayout.LayoutParams.WRAP_CONTENT);
-        assertThat(layoutParams.gravity).isEqualTo(Gravity.CENTER);
-    }
-
-    @Test
-    public void onAdLoadSuccess_withResponseContainingRefreshTime_shouldSetNewRefreshTime() {
-        assertThat(subject.getRefreshTimeMillis()).isEqualTo(60000);
-
-        response = response.toBuilder().setRefreshTimeMilliseconds(100000).build();
-        subject.onAdLoadSuccess(response);
-
-        assertThat(subject.getRefreshTimeMillis()).isEqualTo(100000);
-    }
-
-    @Test
-    public void onAdLoadSuccess_withResponseNotContainingRefreshTime_shoulSetRefreshTimeToNull() {
-        response = response.toBuilder().setRefreshTimeMilliseconds(null).build();
-        subject.onAdLoadSuccess(response);
-
-        assertThat(subject.getRefreshTimeMillis()).isNull();
-    }
-
-    @Test
-    public void onAdLoadError_withMoPubNetworkErrorIncludingRefreshTime_shouldSetNewRefreshTime() {
-        subject.setRefreshTimeMillis(54321);
-
-        subject.onAdLoadError(
-                new MoPubNetworkError(
-                        "network error with specified refresh time",
-                        MoPubNetworkError.Reason.NO_FILL,
-                        1000)
-        );
-
-        assertThat(subject.getRefreshTimeMillis()).isEqualTo(1000);
-    }
-
-    @Test
-    public void onAdLoadError_withMoPubNetworkErrorNotIncludingRefreshTime_shouldNotModifyRefreshTime() {
-        subject.setRefreshTimeMillis(12345);
-
-        subject.onAdLoadError(
-                new MoPubNetworkError(
-                        "network error that does not specify refresh time",
-                        MoPubNetworkError.Reason.UNSPECIFIED)
-        );
-
-        assertThat(subject.getRefreshTimeMillis()).isEqualTo(12345);
-    }
-
-    @Test
-    public void onAdLoadError_withVolleyErrorThatIsNotAnInstanceOfMoPubNetworkError_shouldNotModifyRefreshTime() {
-        subject.onAdLoadError(new VolleyError("message"));
-
-        assertThat(subject.getRefreshTimeMillis()).isEqualTo(60000);
-    }
-
-    @Test
-    public void onAdLoadError_withErrorReasonWarmingUp_shouldReturnErrorCodeWarmup_shouldCallMoPubViewAdFailed() {
-        final VolleyError expectedInternalError = new MoPubNetworkError(
-                MoPubNetworkError.Reason.WARMING_UP);
-
-        subject.onAdLoadError(expectedInternalError);
-
-        verify(mockMoPubView).adFailed(MoPubErrorCode.WARMUP);
-    }
-
-    @Test
-    public void onAdLoadError_whenNoNetworkConnection_shouldReturnErrorCodeNoConnection_shouldCallMoPubViewAdFailed() {
-        subject.onAdLoadError(new NoConnectionError());
-
-        // DeviceUtils#isNetworkAvailable conveniently returns false due to
-        // not having the network permission.
-        verify(mockMoPubView).adFailed(MoPubErrorCode.NO_CONNECTION);
-    }
-
-    @Test
-    public void onAdLoadError_withInvalidServerResponse_shouldReturnErrorCodeServerError_shouldCallMoPubViewAdFailed_shouldIncrementBackoffPower() {
-        for (int htmlErrorCode : HTML_ERROR_CODES) {
-            final int oldBackoffPower = subject.mBackoffPower;
-            final NetworkResponse errorNetworkResponse = new NetworkResponse(htmlErrorCode, null,
-                    null, true, 0);
-            final VolleyError volleyError = new VolleyError(errorNetworkResponse);
-
-            subject.onAdLoadError(volleyError);
-
-            assertThat(subject.mBackoffPower).isEqualTo(oldBackoffPower + 1);
-        }
-        verify(mockMoPubView, times(HTML_ERROR_CODES.length)).adFailed(MoPubErrorCode.SERVER_ERROR);
-    }
-
-    @Test
-    public void loadCustomEvent_shouldCallMoPubViewLoadCustomEvent() throws Exception {
-        Map serverExtras = mock(Map.class);
-        String customEventClassName = "customEventClassName";
-        subject.loadCustomEvent(mockMoPubView, customEventClassName, serverExtras);
-
-        verify(mockMoPubView).loadCustomEvent(customEventClassName, serverExtras);
-    }
-
-    @Test
-    public void loadCustomEvent_withNullMoPubView_shouldNotCallMoPubViewLoadCustomEvent() throws Exception {
-        Map serverExtras = mock(Map.class);
-        String customEventClassName = "customEventClassName";
-        subject.loadCustomEvent(null, customEventClassName, serverExtras);
-
-        verify(mockMoPubView, never()).loadCustomEvent(anyString(), anyMap());
-    }
-
-    @Test
-    public void loadCustomEvent_withNullCustomEventClassName_shouldCallMoPubViewLoadCustomEvent() throws Exception {
-        Map serverExtras = mock(Map.class);
-        subject.loadCustomEvent(mockMoPubView, null, serverExtras);
-
-        verify(mockMoPubView).loadCustomEvent(null, serverExtras);
-    }
-
-    @Test
-    public void getErrorCodeFromVolleyError_whenNoConnection_shouldReturnErrorCodeNoConnection() {
-        final VolleyError noConnectionError = new NoConnectionError();
-
-        // DeviceUtils#isNetworkAvailable conveniently returns false due to
-        // not having the internet permission.
-        final MoPubErrorCode errorCode = AdViewController.getErrorCodeFromVolleyError(
-                noConnectionError, activity);
-
-        assertThat(errorCode).isEqualTo(MoPubErrorCode.NO_CONNECTION);
-    }
-
-    @Test
-    public void getErrorCodeFromVolleyError_withNullResponse_whenConnectionValid_shouldReturnErrorCodeUnspecified() {
-        final VolleyError noConnectionError = new NoConnectionError();
-
-        Shadows.shadowOf(activity).grantPermissions(Manifest.permission.INTERNET);
-        final MoPubErrorCode errorCode = AdViewController.getErrorCodeFromVolleyError(
-                noConnectionError, activity);
-
-        assertThat(errorCode).isEqualTo(MoPubErrorCode.UNSPECIFIED);
-    }
-
-    @Test
-    public void getErrorCodeFromVolleyError_withInvalidServerResponse_shouldReturnErrorCodeServerError() {
-        for (int htmlErrorCode : HTML_ERROR_CODES) {
-            final NetworkResponse errorNetworkResponse = new NetworkResponse(htmlErrorCode, null,
-                    null, true, 0);
-            final VolleyError volleyError = new VolleyError(errorNetworkResponse);
-
-            final MoPubErrorCode errorCode = AdViewController.getErrorCodeFromVolleyError(
-                    volleyError, activity);
-
-            assertThat(errorCode).isEqualTo(MoPubErrorCode.SERVER_ERROR);
-        }
-    }
-
-    @Test
-    public void getErrorCodeFromVolleyError_withErrorReasonWarmingUp_shouldReturnErrorCodeWarmingUp() {
-        final VolleyError networkError = new MoPubNetworkError(MoPubNetworkError.Reason.WARMING_UP);
-
-        final MoPubErrorCode errorCode = AdViewController.getErrorCodeFromVolleyError(
-                networkError, activity);
-
-        assertThat(errorCode).isEqualTo(MoPubErrorCode.WARMUP);
-    }
-
-    @Test
-    public void getErrorCodeFromVolleyError_withErrorReasonNoFill_shouldReturnErrorCodeNoFill() {
-        final VolleyError networkError = new MoPubNetworkError(MoPubNetworkError.Reason.NO_FILL);
-
-        final MoPubErrorCode errorCode = AdViewController.getErrorCodeFromVolleyError(
-                networkError, activity);
-
-        assertThat(errorCode).isEqualTo(MoPubErrorCode.NO_FILL);
-    }
-
-    @Test
-    public void getErrorCodeFromVolleyError_withErrorReasonBadHeaderData_shouldReturnErrorCodeUnspecified() {
-        final VolleyError networkError = new MoPubNetworkError(
-                MoPubNetworkError.Reason.BAD_HEADER_DATA);
-
-        final MoPubErrorCode errorCode = AdViewController.getErrorCodeFromVolleyError(
-                networkError, activity);
-
-        assertThat(errorCode).isEqualTo(MoPubErrorCode.UNSPECIFIED);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java
deleted file mode 100644
index d6f00d40..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java
+++ /dev/null
@@ -1,249 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.os.Build.VERSION_CODES;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.ViewGroup;
-
-import com.mopub.TestSdkHelper;
-import com.mopub.common.AdReport;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.Shadows;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowWebView;
-
-import static android.webkit.WebSettings.PluginState;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class BaseHtmlWebViewTest {
-
-    @Mock
-    AdReport mockAdReport;
-    private BaseHtmlWebView subject;
-    private MotionEvent touchDown;
-    private MotionEvent touchUp;
-    private Activity testActivity;
-
-    @Before
-    public void setUp() throws Exception {
-        testActivity = Robolectric.buildActivity(Activity.class).create().get();
-        subject = new BaseHtmlWebView(testActivity, mockAdReport);
-
-        touchDown = createMotionEvent(MotionEvent.ACTION_DOWN);
-        touchUp = createMotionEvent(MotionEvent.ACTION_UP);
-    }
-
-    @Config(sdk = VERSION_CODES.JELLY_BEAN_MR2)
-    @Test
-    public void pluginState_atLeastJellybeanMr2_shouldDefaultToOff_shouldNeverBeEnabled()  {
-        assertThat(subject.getSettings().getPluginState()).isEqualTo(PluginState.OFF);
-
-        subject.enablePlugins(true);
-        assertThat(subject.getSettings().getPluginState()).isEqualTo(PluginState.OFF);
-    }
-
-    @Test
-    public void pluginState_BelowJellybeanMr2_shouldDefaultToOn_shouldAllowToggling() {
-        TestSdkHelper.setReportedSdkLevel(VERSION_CODES.JELLY_BEAN);
-        subject = new BaseHtmlWebView(testActivity, mockAdReport);
-        assertThat(subject.getSettings().getPluginState()).isEqualTo(PluginState.ON);
-
-        subject.enablePlugins(false);
-        assertThat(subject.getSettings().getPluginState()).isEqualTo(PluginState.OFF);
-
-        subject.enablePlugins(true);
-        assertThat(subject.getSettings().getPluginState()).isEqualTo(PluginState.ON);
-    }
-
-    @Test
-    public void init_shouldSetWebViewScrollability() throws Exception {
-        subject.init(false);
-        assertThat(Shadows.shadowOf(subject).getOnTouchListener()).isNotNull();
-
-        subject.init(true);
-        assertThat(Shadows.shadowOf(subject).getOnTouchListener()).isNotNull();
-    }
-
-    @Test
-    public void loadUrl_shouldAcceptNullParameter() throws Exception {
-        subject.loadUrl(null);
-        // pass
-    }
-
-    @Test
-    public void loadUrl_whenUrlIsJavascript_shouldCallSuperLoadUrl() throws Exception {
-        String javascriptUrl = "javascript:function() {alert(\"guy\")};";
-        subject.loadUrl(javascriptUrl);
-
-        assertThat(Shadows.shadowOf(subject).getLastLoadedUrl()).isEqualTo(javascriptUrl);
-    }
-
-    @Test
-    public void loadHtmlResponse_shouldCallLoadDataWithBaseURL() throws Exception {
-        String htmlResponse = "some random html response";
-        subject.loadHtmlResponse(htmlResponse);
-
-        ShadowWebView.LoadDataWithBaseURL lastLoadData = Shadows.shadowOf(subject).getLastLoadDataWithBaseURL();
-        assertThat(lastLoadData.baseUrl).isEqualTo("http://ads.mopub.com/");
-        assertThat(lastLoadData.data).isEqualTo(htmlResponse);
-        assertThat(lastLoadData.mimeType).isEqualTo("text/html");
-        assertThat(lastLoadData.encoding).isEqualTo("utf-8");
-        assertThat(lastLoadData.historyUrl).isNull();
-    }
-
-    @Test
-    public void sendTouchEvent_withScrollingDisabled_shouldSetUserClicked() throws Exception {
-        assertThat(subject.wasClicked()).isFalse();
-
-        subject.initializeOnTouchListener(false);
-        View.OnTouchListener onTouchListener = Shadows.shadowOf(subject).getOnTouchListener();
-
-        onTouchListener.onTouch(subject, touchUp);
-        assertThat(subject.wasClicked()).isTrue();
-    }
-
-    @Test
-    public void sendTouchEvent_withScrollingEnabled_shouldSetUserClicked() throws Exception {
-        assertThat(subject.wasClicked()).isFalse();
-
-        subject.initializeOnTouchListener(true);
-        View.OnTouchListener onTouchListener = Shadows.shadowOf(subject).getOnTouchListener();
-
-        onTouchListener.onTouch(subject, touchUp);
-        assertThat(subject.wasClicked()).isTrue();
-    }
-
-    @Test
-    public void sendTouchEvent_withScrollingDisabled_withLotsOfRandomMotionEvents_shouldEventuallySetUserClicked() throws Exception {
-        subject.initializeOnTouchListener(false);
-        View.OnTouchListener onTouchListener = Shadows.shadowOf(subject).getOnTouchListener();
-
-        onTouchListener.onTouch(subject, touchDown);
-        assertThat(subject.wasClicked()).isFalse();
-        onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_CANCEL));
-        assertThat(subject.wasClicked()).isFalse();
-        onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_MOVE));
-        assertThat(subject.wasClicked()).isFalse();
-
-        onTouchListener.onTouch(subject, touchUp);
-        assertThat(subject.wasClicked()).isTrue();
-
-        onTouchListener.onTouch(subject, touchDown);
-        assertThat(subject.wasClicked()).isTrue();
-        onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_CANCEL));
-        assertThat(subject.wasClicked()).isTrue();
-        onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_MOVE));
-        assertThat(subject.wasClicked()).isTrue();
-    }
-
-    @Test
-    public void sendTouchEvent_withScrollingEnabled_withLotsOfRandomMotionEvents_shouldEventuallySetUserClicked() throws Exception {
-        subject.initializeOnTouchListener(true);
-        View.OnTouchListener onTouchListener = Shadows.shadowOf(subject).getOnTouchListener();
-
-        onTouchListener.onTouch(subject, touchDown);
-        assertThat(subject.wasClicked()).isFalse();
-        onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_CANCEL));
-        assertThat(subject.wasClicked()).isFalse();
-        onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_MOVE));
-        assertThat(subject.wasClicked()).isFalse();
-
-        onTouchListener.onTouch(subject, touchUp);
-        assertThat(subject.wasClicked()).isTrue();
-
-        onTouchListener.onTouch(subject, touchDown);
-        assertThat(subject.wasClicked()).isTrue();
-        onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_CANCEL));
-        assertThat(subject.wasClicked()).isTrue();
-        onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_MOVE));
-        assertThat(subject.wasClicked()).isTrue();
-    }
-
-    @Test
-    public void onResetClicked_shouldonResetClicked() throws Exception {
-        subject.initializeOnTouchListener(false);
-        View.OnTouchListener onTouchListener = Shadows.shadowOf(subject).getOnTouchListener();
-
-        onTouchListener.onTouch(subject, touchDown);
-        onTouchListener.onTouch(subject, touchUp);
-        assertThat(subject.wasClicked()).isTrue();
-
-        subject.onResetUserClick();
-        assertThat(subject.wasClicked()).isFalse();
-    }
-
-    @Test
-    public void onResetClicked_whenTouchStateIsUnset_shouldKeepTouchStateUnset() throws Exception {
-        subject.initializeOnTouchListener(false);
-        assertThat(subject.wasClicked()).isFalse();
-
-        subject.onResetUserClick();
-        assertThat(subject.wasClicked()).isFalse();
-    }
-
-    @Test
-    public void setWebViewScrollingEnabled_whenScrollableIsTrue_onTouchListenerShouldAlwaysReturnFalse() throws Exception {
-        subject.initializeOnTouchListener(true);
-
-        View.OnTouchListener onTouchListener = Shadows.shadowOf(subject).getOnTouchListener();
-        // ACTION_DOWN is guaranteed to be run before ACTION_MOVE
-        onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_DOWN));
-        boolean shouldConsumeTouch = onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_MOVE));
-
-        assertThat(shouldConsumeTouch).isFalse();
-    }
-
-    @Test
-    public void setWebViewScrollingEnabled_whenScrollableIsFalse_whenActionMove_onTouchListenerShouldReturnTrue() throws Exception {
-        subject.initializeOnTouchListener(false);
-
-        View.OnTouchListener onTouchListener = Shadows.shadowOf(subject).getOnTouchListener();
-        boolean shouldConsumeTouch = onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_MOVE));
-
-        assertThat(shouldConsumeTouch).isTrue();
-    }
-
-    @Test
-    public void setWebViewScrollingEnabled_whenScrollableIsFalse_whenMotionEventIsNotActionMove_onTouchListenerShouldReturnFalse() throws Exception {
-        subject.initializeOnTouchListener(false);
-
-        View.OnTouchListener onTouchListener = Shadows.shadowOf(subject).getOnTouchListener();
-
-        boolean shouldConsumeTouch = onTouchListener.onTouch(subject, touchUp);
-        assertThat(shouldConsumeTouch).isFalse();
-
-        shouldConsumeTouch = onTouchListener.onTouch(subject, touchDown);
-        assertThat(shouldConsumeTouch).isFalse();
-
-        shouldConsumeTouch = onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_CANCEL));
-        assertThat(shouldConsumeTouch).isFalse();
-    }
-
-    @Test
-    public void destroy_shouldRemoveSelfFromParent() throws Exception {
-        ViewGroup parentView = mock(ViewGroup.class);
-        ShadowWebView shadow = Shadows.shadowOf(subject);
-        shadow.setMyParent(parentView);
-
-        subject.destroy();
-
-        verify(parentView).removeView(eq(subject));
-        assertThat(shadow.wasDestroyCalled());
-    }
-    
-    private static MotionEvent createMotionEvent(int action) {
-        return MotionEvent.obtain(0, 0, action, 0, 0, 0);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
deleted file mode 100644
index fa3edbba..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
+++ /dev/null
@@ -1,87 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.view.View;
-import android.widget.FrameLayout;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class BaseInterstitialActivityTest {
-    private BaseInterstitialActivity subject;
-    private long broadcastIdentifier;
-
-    // Make a concrete version of the abstract class for testing purposes.
-    private static class TestInterstitialActivity extends BaseInterstitialActivity {
-        View view;
-
-        @Override
-        public View getAdView() {
-            if (view == null) {
-                view = new View(this);
-            }
-            return view;
-        }
-    }
-
-    @Before
-    public void setup() {
-        broadcastIdentifier = 2222;
-    }
-
-    @Test
-    public void onCreate_shouldCreateView() throws Exception {
-        subject = Robolectric.buildActivity(TestInterstitialActivity.class).create().get();
-        View adView = getContentView(subject).getChildAt(0);
-
-        assertThat(adView).isNotNull();
-    }
-
-    @Test
-    public void onDestroy_shouldCleanUpContentView() throws Exception {
-        subject = Robolectric.buildActivity(TestInterstitialActivity.class).create().destroy().get();
-
-        assertThat(getContentView(subject).getChildCount()).isEqualTo(0);
-    }
-
-    @Test
-    public void getBroadcastIdentifier_shouldReturnBroadcastIdFromIntent() throws Exception {
-        Context context = Robolectric.buildActivity(Activity.class).create().get();
-        Intent intent = new Intent(context, TestInterstitialActivity.class);
-        intent.putExtra(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
-
-        subject = Robolectric.buildActivity(TestInterstitialActivity.class)
-                .withIntent(intent)
-                .create().get();
-        assertThat(subject.getBroadcastIdentifier()).isEqualTo(2222L);
-    }
-
-    @Test
-    public void getBroadcastIdentifier_withMissingBroadCastId_shouldReturnNull() throws Exception {
-        Context context = Robolectric.buildActivity(Activity.class).create().get();
-        Intent intent = new Intent(context, TestInterstitialActivity.class);
-        // This intent is missing a broadcastidentifier extra.
-
-        subject = Robolectric.buildActivity(TestInterstitialActivity.class)
-                .withIntent(intent)
-                .create().get();
-
-        assertThat(subject.getBroadcastIdentifier()).isNull();
-    }
-
-    protected FrameLayout getContentView(BaseInterstitialActivity subject) {
-        return subject.getCloseableLayout();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivityTest.java
deleted file mode 100644
index d7f57390..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivityTest.java
+++ /dev/null
@@ -1,100 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.media.AudioManager;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.Utils;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowApplication;
-
-import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
-import static com.mopub.mobileads.BaseVideoPlayerActivity.VIDEO_URL;
-import static com.mopub.mobileads.BaseVideoPlayerActivity.startMraid;
-import static com.mopub.mobileads.BaseVideoPlayerActivity.startVast;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.when;
-import static org.mockito.Mockito.withSettings;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class BaseVideoPlayerActivityTest {
-    private static final String MRAID_VIDEO_URL = "https://mraidVideo";
-
-    private long testBroadcastIdentifier;
-    private VastVideoConfig mVastVideoConfig;
-
-    @Before
-    public void setup() throws Exception {
-        mVastVideoConfig = mock(VastVideoConfig.class, withSettings().serializable());
-        testBroadcastIdentifier = 1234;
-    }
-
-    @Test
-    public void startMraid_shouldStartMraidVideoPlayerActivity() throws Exception {
-        startMraid(Robolectric.buildActivity(Activity.class).create().get(), MRAID_VIDEO_URL);
-        assertMraidVideoPlayerActivityStarted(MraidVideoPlayerActivity.class, MRAID_VIDEO_URL);
-    }
-
-    @Test
-    public void startVast_shouldStartMraidVideoPlayerActivity() throws Exception {
-        startVast(Robolectric.buildActivity(Activity.class).create().get(), mVastVideoConfig,
-                testBroadcastIdentifier);
-        assertVastVideoPlayerActivityStarted(MraidVideoPlayerActivity.class, mVastVideoConfig,
-                testBroadcastIdentifier);
-    }
-
-    @Test
-    public void onDestroy_shouldReleaseAudioFocus() throws Exception {
-        BaseVideoPlayerActivity subject = spy(
-                Robolectric.buildActivity(BaseVideoPlayerActivity.class).create().get());
-        AudioManager mockAudioManager = mock(AudioManager.class);
-        when(subject.getSystemService(Context.AUDIO_SERVICE)).thenReturn(mockAudioManager);
-
-        subject.onDestroy();
-
-        verify(mockAudioManager).abandonAudioFocus(null);
-        verifyNoMoreInteractions(mockAudioManager);
-    }
-
-    static void assertVastVideoPlayerActivityStarted(final Class clazz,
-            final VastVideoConfig vastVideoConfig,
-            final long broadcastIdentifier) {
-        final Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
-        assertIntentAndBroadcastIdentifierAreCorrect(intent, clazz, broadcastIdentifier);
-
-        final VastVideoConfig expectedVastVideoConfig =
-                (VastVideoConfig) intent.getSerializableExtra(VastVideoViewController.VAST_VIDEO_CONFIG);
-        assertThat(expectedVastVideoConfig).isEqualsToByComparingFields(vastVideoConfig);
-    }
-
-    public static void assertMraidVideoPlayerActivityStarted(final Class clazz, final String url) {
-        final Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
-        assertIntentAndBroadcastIdentifierAreCorrect(intent, clazz, null);
-
-        assertThat(intent.getStringExtra(VIDEO_URL)).isEqualTo(url);
-    }
-
-    static void assertIntentAndBroadcastIdentifierAreCorrect(final Intent intent,
-            final Class clazz,
-            final Long expectedBroadcastId) {
-        assertThat(intent.getComponent().getClassName()).isEqualTo(clazz.getCanonicalName());
-        assertThat(Utils.bitMaskContainsFlag(intent.getFlags(), Intent.FLAG_ACTIVITY_NEW_TASK)).isTrue();
-
-        if (expectedBroadcastId != null) {
-            final long actualBroadcastId = (Long) intent.getSerializableExtra(BROADCAST_IDENTIFIER_KEY);
-            assertThat(actualBroadcastId).isEqualTo(expectedBroadcastId);
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java
deleted file mode 100644
index 619ae104..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java
+++ /dev/null
@@ -1,119 +0,0 @@
-package com.mopub.mobileads;
-
-
-import android.app.Activity;
-import android.os.Build.VERSION_CODES;
-import android.view.ViewGroup;
-import android.webkit.WebSettings;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.Shadows;
-import org.robolectric.annotation.Config;
-import org.robolectric.fakes.RoboWebSettings;
-import org.robolectric.shadows.ShadowWebView;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class BaseWebViewTest {
-    private Activity context;
-    private BaseWebView subject;
-
-    @Before
-    public void setup() {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-    }
-
-    @Config(sdk = VERSION_CODES.JELLY_BEAN)
-    @Test
-    public void constructor_beforeJellyBeanMr1_shouldDisablePluginsByDefault() throws Exception {
-        subject = new BaseWebView(context);
-
-        WebSettings webSettings = subject.getSettings();
-        assertThat(webSettings.getPluginState()).isEqualTo(WebSettings.PluginState.OFF);
-
-        subject.enablePlugins(true);
-        assertThat(webSettings.getPluginState()).isEqualTo(WebSettings.PluginState.ON);
-    }
-
-    @Test
-    public void constructor_shouldDisableFileAccess() {
-        subject = new BaseWebView(context);
-
-        final WebSettings webSettings = subject.getSettings();
-        assertThat(webSettings.getAllowFileAccess()).isEqualTo(false);
-    }
-
-    @Test
-    public void constructor_shouldDisableContentAccess() {
-        subject = new BaseWebView(context);
-
-        final WebSettings webSettings = subject.getSettings();
-        assertThat(webSettings.getAllowContentAccess()).isEqualTo(false);
-    }
-
-    @Test
-    public void constructor_shouldDisableAccessFromFileUrls() {
-        subject = new BaseWebView(context);
-
-        final WebSettings webSettings = subject.getSettings();
-        assertThat(webSettings.getAllowFileAccessFromFileURLs()).isEqualTo(false);
-        assertThat(webSettings.getAllowUniversalAccessFromFileURLs()).isEqualTo(false);
-    }
-
-    @Config(sdk = VERSION_CODES.JELLY_BEAN_MR2)
-    @Test
-    public void constructor_atLeastJellybeanMr2_shouldPass() throws Exception {
-        subject = new BaseWebView(context);
-
-        subject.enablePlugins(true);
-
-        // pass
-    }
-
-    @Test
-    public void enableJavascriptCaching_enablesJavascriptDomStorageAndAppCache() {
-        subject = new BaseWebView(context);
-        final RoboWebSettings settings = (RoboWebSettings) subject.getSettings();
-
-        subject.enableJavascriptCaching();
-
-        assertThat(settings.getJavaScriptEnabled()).isTrue();
-        assertThat(settings.getDomStorageEnabled()).isTrue();
-        assertThat(settings.getAppCacheEnabled()).isTrue();
-        assertThat(settings.getAppCachePath()).isEqualTo(context.getCacheDir().getAbsolutePath());
-    }
-
-    @Test
-    public void destroy_shouldRemoveSelfFromParent_beforeCallingDestroy() throws Exception {
-        subject = new BaseWebView(context);
-        ViewGroup parent = mock(ViewGroup.class);
-        ShadowWebView shadow = Shadows.shadowOf(subject);
-        shadow.setMyParent(parent);
-
-        subject.destroy();
-
-        verify(parent).removeView(eq(subject));
-        assertThat(shadow.wasDestroyCalled()).isTrue();
-    }
-
-    @Test
-    public void destroy_shouldSetTheCorrectStateVariable() {
-        subject = new BaseWebView(context);
-
-        assertThat(subject.mIsDestroyed).isFalse();
-
-        subject.destroy();
-
-        assertThat(subject.mIsDestroyed).isTrue();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
deleted file mode 100644
index 1dd64a58..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
+++ /dev/null
@@ -1,350 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.location.Location;
-import android.view.View;
-
-import com.mopub.common.AdReport;
-import com.mopub.common.DataKeys;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.factories.CustomEventBannerFactory;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowLooper;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
-import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_TIMEOUT;
-import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class CustomEventBannerAdapterTest {
-    private CustomEventBannerAdapter subject;
-    @Mock
-    private MoPubView moPubView;
-    @Mock
-    private AdReport mockAdReport;
-    private static final String CLASS_NAME = "arbitrary_banner_adapter_class_name";
-    private static final long BROADCAST_IDENTIFIER = 123;
-    private Map<String, String> serverExtras;
-    private CustomEventBanner banner;
-    private Map<String,Object> localExtras;
-    private Map<String,Object> expectedLocalExtras;
-    private HashMap<String,String> expectedServerExtras;
-
-    @Before
-    public void setUp() throws Exception {
-
-        when(moPubView.getAdTimeoutDelay()).thenReturn(null);
-        when(moPubView.getAdWidth()).thenReturn(320);
-        when(moPubView.getAdHeight()).thenReturn(50);
-
-        localExtras = new HashMap<String, Object>();
-        when(moPubView.getLocalExtras()).thenReturn(localExtras);
-
-        serverExtras = new HashMap<String, String>();
-        serverExtras.put("key", "value");
-        serverExtras.put("another_key", "another_value");
-        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, serverExtras, BROADCAST_IDENTIFIER, mockAdReport);
-
-        expectedLocalExtras = new HashMap<String, Object>();
-        expectedLocalExtras.put(DataKeys.AD_REPORT_KEY, mockAdReport);
-        expectedLocalExtras.put("broadcastIdentifier", BROADCAST_IDENTIFIER);
-        expectedLocalExtras.put(DataKeys.AD_WIDTH, 320);
-        expectedLocalExtras.put(DataKeys.AD_HEIGHT, 50);
-
-        expectedServerExtras = new HashMap<String, String>();
-
-        banner = CustomEventBannerFactory.create(CLASS_NAME);
-    }
-
-    @Test
-    public void constructor_shouldPopulateLocalExtrasWithAdWidthAndHeight() throws Exception {
-        assertThat(localExtras.get("com_mopub_ad_width")).isEqualTo(320);
-        assertThat(localExtras.get("com_mopub_ad_height")).isEqualTo(50);
-    }
-
-    @Test
-    public void timeout_shouldSignalFailureAndInvalidateWithDefaultDelay() throws Exception {
-        subject.loadAd();
-
-        ShadowLooper.idleMainLooper(CustomEventBannerAdapter.DEFAULT_BANNER_TIMEOUT_DELAY - 1);
-        verify(moPubView, never()).loadFailUrl(eq(NETWORK_TIMEOUT));
-        assertThat(subject.isInvalidated()).isFalse();
-
-        ShadowLooper.idleMainLooper(1);
-        verify(moPubView).loadFailUrl(eq(NETWORK_TIMEOUT));
-        assertThat(subject.isInvalidated()).isTrue();
-    }
-
-    @Test
-    public void timeout_withNegativeAdTimeoutDelay_shouldSignalFailureAndInvalidateWithDefaultDelay() throws Exception {
-        when(moPubView.getAdTimeoutDelay()).thenReturn(-1);
-
-        subject.loadAd();
-
-        ShadowLooper.idleMainLooper(CustomEventBannerAdapter.DEFAULT_BANNER_TIMEOUT_DELAY - 1);
-        verify(moPubView, never()).loadFailUrl(eq(NETWORK_TIMEOUT));
-        assertThat(subject.isInvalidated()).isFalse();
-
-        ShadowLooper.idleMainLooper(1);
-        verify(moPubView).loadFailUrl(eq(NETWORK_TIMEOUT));
-        assertThat(subject.isInvalidated()).isTrue();
-    }
-
-    @Test
-    public void timeout_withNonNullAdTimeoutDelay_shouldSignalFailureAndInvalidateWithCustomDelay() throws Exception {
-       when(moPubView.getAdTimeoutDelay()).thenReturn(77);
-
-        subject.loadAd();
-
-        ShadowLooper.idleMainLooper(77000 - 1);
-        verify(moPubView, never()).loadFailUrl(eq(NETWORK_TIMEOUT));
-        assertThat(subject.isInvalidated()).isFalse();
-
-        ShadowLooper.idleMainLooper(1);
-        verify(moPubView).loadFailUrl(eq(NETWORK_TIMEOUT));
-        assertThat(subject.isInvalidated()).isTrue();
-    }
-
-
-    @Test
-    public void loadAd_shouldPropagateLocationInLocalExtras() throws Exception {
-        Location expectedLocation = new Location("");
-        expectedLocation.setLongitude(10.0);
-        expectedLocation.setLongitude(20.1);
-
-        when(moPubView.getLocation()).thenReturn(expectedLocation);
-        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, new HashMap<String, String>(), BROADCAST_IDENTIFIER, mockAdReport);
-        subject.loadAd();
-
-        expectedLocalExtras.put("location", moPubView.getLocation());
-
-        verify(banner).loadBanner(
-                any(Context.class),
-                eq(subject),
-                eq(expectedLocalExtras),
-                eq(expectedServerExtras)
-        );
-    }
-
-    @Test
-    public void loadAd_shouldPropagateServerExtrasToLoadBanner() throws Exception {
-        subject.loadAd();
-
-        expectedServerExtras.put("key", "value");
-        expectedServerExtras.put("another_key", "another_value");
-
-        verify(banner).loadBanner(
-                any(Context.class),
-                eq(subject),
-                eq(expectedLocalExtras),
-                eq(expectedServerExtras)
-        );
-    }
-
-    @Test
-    public void loadAd_shouldScheduleTimeout_bannerLoadedAndFailed_shouldCancelTimeout() throws Exception {
-        ShadowLooper.pauseMainLooper();
-
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
-
-        subject.loadAd();
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
-
-        subject.onBannerLoaded(null);
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
-
-        subject.loadAd();
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
-
-        subject.onBannerFailed(null);
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
-    }
-
-    @Test
-    public void loadAd_shouldScheduleTimeoutRunnableBeforeCallingLoadBanner() throws Exception {
-        ShadowLooper.pauseMainLooper();
-
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
-
-        Answer assertTimeoutRunnableHasStarted = new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
-                assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
-                return null;
-            }
-        };
-
-        // noinspection unchecked
-        doAnswer(assertTimeoutRunnableHasStarted)
-                .when(banner)
-                .loadBanner(
-                        any(Context.class),
-                        any(CustomEventBannerListener.class),
-                        any(Map.class),
-                        any(Map.class)
-                );
-
-        subject.loadAd();
-    }
-
-
-    @Test
-    public void loadAd_whenCallingOnBannerFailed_shouldCancelExistingTimeoutRunnable() throws Exception {
-        ShadowLooper.pauseMainLooper();
-
-        Answer justCallOnBannerFailed = new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
-                assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
-                subject.onBannerFailed(null);
-                assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
-                return null;
-            }
-        };
-
-        // noinspection unchecked
-        doAnswer(justCallOnBannerFailed)
-                .when(banner)
-                .loadBanner(
-                        any(Context.class),
-                        any(CustomEventBannerListener.class),
-                        any(Map.class),
-                        any(Map.class)
-                );
-
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
-        subject.loadAd();
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
-    }
-
-    @Test
-    public void onBannerLoaded_shouldSignalMoPubView() throws Exception {
-        View view = new View(Robolectric.buildActivity(Activity.class).create().get());
-        subject.onBannerLoaded(view);
-
-        verify(moPubView).nativeAdLoaded();
-        verify(moPubView).setAdContentView(eq(view));
-        verify(moPubView).trackNativeImpression();
-    }
-
-    @Test
-    public void onBannerLoaded_whenViewIsHtmlBannerWebView_shouldNotTrackImpression() throws Exception {
-        View mockHtmlBannerWebView = mock(HtmlBannerWebView.class);
-        subject.onBannerLoaded(mockHtmlBannerWebView);
-
-        verify(moPubView).nativeAdLoaded();
-        verify(moPubView).setAdContentView(eq(mockHtmlBannerWebView));
-        verify(moPubView, never()).trackNativeImpression();
-    }
-
-    @Test
-    public void onBannerFailed_shouldLoadFailUrl() throws Exception {
-        subject.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
-
-        verify(moPubView).loadFailUrl(eq(ADAPTER_CONFIGURATION_ERROR));
-    }
-
-    @Test
-    public void onBannerFailed_whenErrorCodeIsNull_shouldPassUnspecifiedError() throws Exception {
-        subject.onBannerFailed(null);
-
-        verify(moPubView).loadFailUrl(eq(UNSPECIFIED));
-    }
-
-    @Test
-    public void onBannerExpanded_shouldPauseRefreshAndCallAdPresentOverlay() throws Exception {
-        subject.onBannerExpanded();
-
-        verify(moPubView).setAutorefreshEnabled(eq(false));
-        verify(moPubView).adPresentedOverlay();
-    }
-
-    @Test
-    public void onBannerCollapsed_shouldRestoreRefreshSettingAndCallAdClosed() throws Exception {
-        when(moPubView.getAutorefreshEnabled()).thenReturn(true);
-        subject.onBannerExpanded();
-        reset(moPubView);
-        subject.onBannerCollapsed();
-        verify(moPubView).setAutorefreshEnabled(eq(true));
-        verify(moPubView).adClosed();
-
-        when(moPubView.getAutorefreshEnabled()).thenReturn(false);
-        subject.onBannerExpanded();
-        reset(moPubView);
-        subject.onBannerCollapsed();
-        verify(moPubView).setAutorefreshEnabled(eq(false));
-        verify(moPubView).adClosed();
-    }
-
-    @Test
-    public void onBannerClicked_shouldRegisterClick() throws Exception {
-        subject.onBannerClicked();
-
-        verify(moPubView).registerClick();
-    }
-
-    @Test
-    public void onLeaveApplication_shouldRegisterClick() throws Exception {
-        subject.onLeaveApplication();
-
-        verify(moPubView).registerClick();
-    }
-
-    @Test
-    public void invalidate_shouldCauseLoadAdToDoNothing() throws Exception {
-        subject.invalidate();
-
-        subject.loadAd();
-
-        // noinspection unchecked
-        verify(banner, never()).loadBanner(
-                any(Context.class),
-                any(CustomEventBannerListener.class),
-                any(Map.class),
-                any(Map.class)
-        );
-    }
-
-    @Test
-    public void invalidate_shouldCauseBannerListenerMethodsToDoNothing() throws Exception {
-        subject.invalidate();
-
-        subject.onBannerLoaded(null);
-        subject.onBannerFailed(null);
-        subject.onBannerExpanded();
-        subject.onBannerCollapsed();
-        subject.onBannerClicked();
-        subject.onLeaveApplication();
-
-        verify(moPubView, never()).nativeAdLoaded();
-        verify(moPubView, never()).setAdContentView(any(View.class));
-        verify(moPubView, never()).trackNativeImpression();
-        verify(moPubView, never()).loadFailUrl(any(MoPubErrorCode.class));
-        verify(moPubView, never()).setAutorefreshEnabled(any(boolean.class));
-        verify(moPubView, never()).adClosed();
-        verify(moPubView, never()).registerClick();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
deleted file mode 100644
index e5934618..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
+++ /dev/null
@@ -1,338 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.location.Location;
-
-import com.mopub.common.AdReport;
-import com.mopub.common.DataKeys;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.factories.CustomEventInterstitialFactory;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowLooper;
-
-import java.util.HashMap;
-import java.util.Map;
-import java.util.TreeMap;
-
-import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
-import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_TIMEOUT;
-import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class CustomEventInterstitialAdapterTest {
-    private static long BROADCAST_IDENTIFER = 123;
-    private CustomEventInterstitialAdapter subject;
-    @Mock
-    private MoPubInterstitial mockMoPubInterstitial;
-    private CustomEventInterstitial interstitial;
-    private Map<String, Object> expectedLocalExtras;
-    private HashMap<String, String> expectedServerExtras;
-    @Mock
-    private AdViewController mockAdViewController;
-    @Mock
-    private AdReport mockAdReport;
-    private MoPubInterstitial.MoPubInterstitialView moPubInterstitialView;
-    private static final String CLASS_NAME = "arbitrary_interstitial_adapter_class_name";
-    private Map<String, String> serverExtras;
-    private CustomEventInterstitialAdapter.CustomEventInterstitialAdapterListener interstitialAdapterListener;
-
-    @Before
-    public void setUp() throws Exception {
-
-        stub(mockMoPubInterstitial.getAdTimeoutDelay()).toReturn(null);
-        moPubInterstitialView = mock(MoPubInterstitial.MoPubInterstitialView.class);
-        stub(moPubInterstitialView.getAdViewController()).toReturn(mockAdViewController);
-        stub(mockAdViewController.getAdReport()).toReturn(mockAdReport);
-        stub(mockMoPubInterstitial.getMoPubInterstitialView()).toReturn(moPubInterstitialView);
-
-        serverExtras = new HashMap<String, String>();
-        serverExtras.put("key", "value");
-
-        subject = new CustomEventInterstitialAdapter(mockMoPubInterstitial, CLASS_NAME, serverExtras, BROADCAST_IDENTIFER, mockAdViewController.getAdReport());
-
-        expectedLocalExtras = new HashMap<String, Object>();
-        expectedServerExtras = new HashMap<String, String>();
-
-        interstitial = CustomEventInterstitialFactory.create(CLASS_NAME);
-
-        interstitialAdapterListener = mock(CustomEventInterstitialAdapter.CustomEventInterstitialAdapterListener.class);
-        subject.setAdapterListener(interstitialAdapterListener);
-    }
-
-    @Test
-    public void constructor_withInvalidClassName_shouldCallOnCustomEventInterstitialFailed() throws Exception {
-        // Remove testing mock and use the real thing
-        CustomEventInterstitialFactory.setInstance(new CustomEventInterstitialFactory());
-
-        new CustomEventInterstitialAdapter(mockMoPubInterstitial, "bad_class_name_11i234jb", new TreeMap<String, String>(), BROADCAST_IDENTIFER, mockAdViewController.getAdReport());
-        verify(mockMoPubInterstitial).onCustomEventInterstitialFailed(ADAPTER_NOT_FOUND);
-    }
-
-    @Test
-    public void timeout_shouldSignalFailureAndInvalidateWithDefaultDelay() throws Exception {
-        subject.loadInterstitial();
-        ShadowLooper.idleMainLooper(CustomEventInterstitialAdapter.DEFAULT_INTERSTITIAL_TIMEOUT_DELAY - 1);
-        verify(interstitialAdapterListener, never()).onCustomEventInterstitialFailed(eq(NETWORK_TIMEOUT));
-        assertThat(subject.isInvalidated()).isFalse();
-
-        ShadowLooper.idleMainLooper(1);
-        verify(interstitialAdapterListener).onCustomEventInterstitialFailed(eq(NETWORK_TIMEOUT));
-        assertThat(subject.isInvalidated()).isTrue();
-    }
-
-    @Test
-    public void timeout_withNegativeAdTimeoutDelay_shouldSignalFailureAndInvalidateWithDefaultDelay() throws Exception {
-        stub(mockMoPubInterstitial.getAdTimeoutDelay()).toReturn(-1);
-
-        subject.loadInterstitial();
-        ShadowLooper.idleMainLooper(CustomEventInterstitialAdapter.DEFAULT_INTERSTITIAL_TIMEOUT_DELAY - 1);
-        verify(interstitialAdapterListener, never()).onCustomEventInterstitialFailed(eq(NETWORK_TIMEOUT));
-        assertThat(subject.isInvalidated()).isFalse();
-
-        ShadowLooper.idleMainLooper(1);
-        verify(interstitialAdapterListener).onCustomEventInterstitialFailed(eq(NETWORK_TIMEOUT));
-        assertThat(subject.isInvalidated()).isTrue();
-    }
-
-    @Test
-    public void timeout_withNonNullAdTimeoutDelay_shouldSignalFailureAndInvalidateWithCustomDelay() throws Exception {
-        stub(mockMoPubInterstitial.getAdTimeoutDelay()).toReturn(77);
-
-        subject.loadInterstitial();
-        ShadowLooper.idleMainLooper(77000 - 1);
-        verify(interstitialAdapterListener, never()).onCustomEventInterstitialFailed(eq(NETWORK_TIMEOUT));
-        assertThat(subject.isInvalidated()).isFalse();
-
-        ShadowLooper.idleMainLooper(1);
-        verify(interstitialAdapterListener).onCustomEventInterstitialFailed(eq(NETWORK_TIMEOUT));
-        assertThat(subject.isInvalidated()).isTrue();
-    }
-
-    @Test
-    public void loadInterstitial_shouldPropagateLocationInLocalExtras() throws Exception {
-        Location expectedLocation = new Location("");
-        expectedLocation.setLongitude(10.0);
-        expectedLocation.setLongitude(20.1);
-        stub(mockMoPubInterstitial.getLocation()).toReturn(expectedLocation);
-        subject = new CustomEventInterstitialAdapter(mockMoPubInterstitial, CLASS_NAME, new HashMap<String, String>(), BROADCAST_IDENTIFER, mockAdViewController.getAdReport());
-        subject.loadInterstitial();
-
-        expectedLocalExtras.put("broadcastIdentifier", BROADCAST_IDENTIFER);
-        expectedLocalExtras.put(DataKeys.AD_REPORT_KEY, mockAdReport);
-        expectedLocalExtras.put("location", mockMoPubInterstitial.getLocation());
-
-        verify(interstitial).loadInterstitial(
-                any(Context.class),
-                eq(subject),
-                eq(expectedLocalExtras),
-                eq(expectedServerExtras)
-        );
-    }
-
-    @Test
-    public void loadInterstitial_shouldPropagateServerExtrasToInterstitial() throws Exception {
-        subject.loadInterstitial();
-        expectedLocalExtras.put("broadcastIdentifier", BROADCAST_IDENTIFER);
-        expectedLocalExtras.put(DataKeys.AD_REPORT_KEY, mockAdReport);
-        expectedServerExtras.put("key", "value");
-
-        verify(interstitial).loadInterstitial(
-                any(Context.class),
-                eq(subject),
-                eq(expectedLocalExtras),
-                eq(expectedServerExtras)
-        );
-    }
-
-    @Test
-    public void loadInterstitial_shouldScheduleTimeout_interstitialLoadedAndFailed_shouldCancelTimeout() throws Exception {
-        ShadowLooper.pauseMainLooper();
-
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
-
-        subject.loadInterstitial();
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
-
-        subject.onInterstitialLoaded();
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
-
-        subject.loadInterstitial();
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
-
-        subject.onInterstitialFailed(null);
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
-    }
-
-    @Test
-    public void loadInterstitial_shouldScheduleTimeoutRunnableBeforeCallingLoadInterstitial() throws Exception {
-        ShadowLooper.pauseMainLooper();
-
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
-
-        Answer assertTimeoutRunnableHasStarted = new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
-                assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
-                return null;
-            }
-        };
-
-        // noinspection unchecked
-        doAnswer(assertTimeoutRunnableHasStarted)
-                .when(interstitial)
-                .loadInterstitial(
-                        any(Context.class),
-                        any(CustomEventInterstitialListener.class),
-                        any(Map.class),
-                        any(Map.class)
-                );
-
-        subject.loadInterstitial();
-    }
-
-    @Test
-    public void loadInterstitial_whenCallingOnInterstitialFailed_shouldCancelExistingTimeoutRunnable() throws Exception {
-        ShadowLooper.pauseMainLooper();
-
-        Answer justCallOnInterstitialFailed = new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
-                assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(1);
-                subject.onInterstitialFailed(null);
-                assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
-                return null;
-            }
-        };
-
-        // noinspection unchecked
-        doAnswer(justCallOnInterstitialFailed)
-                .when(interstitial)
-                .loadInterstitial(
-                        any(Context.class),
-                        any(CustomEventInterstitialListener.class),
-                        any(Map.class),
-                        any(Map.class)
-                );
-
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
-        subject.loadInterstitial();
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
-    }
-
-    @Test
-    public void showInterstitial_shouldCallCustomEventInterstitialShowInterstitial() throws Exception {
-        subject.showInterstitial();
-
-        verify(interstitial).showInterstitial();
-    }
-
-    @Test
-    public void onInterstitialLoaded_shouldSignalAdapterListener() throws Exception {
-        subject.onInterstitialLoaded();
-
-        verify(interstitialAdapterListener).onCustomEventInterstitialLoaded();
-    }
-
-    @Test
-    public void onInterstitialFailed_shouldLoadFailUrl() throws Exception {
-        subject.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
-
-        verify(interstitialAdapterListener).onCustomEventInterstitialFailed(eq(ADAPTER_CONFIGURATION_ERROR));
-    }
-
-    @Test
-    public void onInterstitialFailed_whenErrorCodeIsNull_shouldPassUnspecifiedError() throws Exception {
-        subject.onInterstitialFailed(null);
-
-        verify(interstitialAdapterListener).onCustomEventInterstitialFailed(eq(UNSPECIFIED));
-    }
-
-    @Test
-    public void onInterstitialShown_shouldSignalAdapterListener() throws Exception {
-        subject.onInterstitialShown();
-
-        verify(interstitialAdapterListener).onCustomEventInterstitialShown();
-    }
-
-    @Test
-    public void onInterstitialClicked_shouldSignalAdapterListener() throws Exception {
-        subject.onInterstitialClicked();
-
-        verify(interstitialAdapterListener).onCustomEventInterstitialClicked();
-    }
-
-    @Test
-    public void onLeaveApplication_shouldSignalAdapterListener() throws Exception {
-        subject.onLeaveApplication();
-
-        verify(interstitialAdapterListener).onCustomEventInterstitialClicked();
-    }
-
-    @Test
-    public void onInterstitialDismissed_shouldSignalAdapterListener() throws Exception {
-        subject.onInterstitialDismissed();
-
-        verify(interstitialAdapterListener).onCustomEventInterstitialDismissed();
-    }
-
-    @Test
-    public void invalidate_shouldCauseLoadInterstitialToDoNothing() throws Exception {
-        subject.invalidate();
-
-        subject.loadInterstitial();
-
-        // noinspection unchecked
-        verify(interstitial, never()).loadInterstitial(
-                any(Context.class),
-                any(CustomEventInterstitialListener.class),
-                any(Map.class),
-                any(Map.class)
-        );
-    }
-
-    @Test
-    public void invalidate_shouldCauseShowInterstitialToDoNothing() throws Exception {
-        subject.invalidate();
-
-        subject.showInterstitial();
-
-        verify(interstitial, never()).showInterstitial();
-    }
-
-    @Test
-    public void invalidate_shouldCauseInterstitialListenerMethodsToDoNothing() throws Exception {
-        subject.invalidate();
-
-        subject.onInterstitialLoaded();
-        subject.onInterstitialFailed(null);
-        subject.onInterstitialShown();
-        subject.onInterstitialClicked();
-        subject.onLeaveApplication();
-        subject.onInterstitialDismissed();
-
-        verify(interstitialAdapterListener, never()).onCustomEventInterstitialLoaded();
-        verify(interstitialAdapterListener, never()).onCustomEventInterstitialFailed(any(MoPubErrorCode.class));
-        verify(interstitialAdapterListener, never()).onCustomEventInterstitialShown();
-        verify(interstitialAdapterListener, never()).onCustomEventInterstitialClicked();
-        verify(interstitialAdapterListener, never()).onCustomEventInterstitialDismissed();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
deleted file mode 100644
index e5f40f61..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
+++ /dev/null
@@ -1,220 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.support.v4.content.LocalBroadcastManager;
-
-import com.mopub.common.DataKeys;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.factories.CustomEventInterstitialAdapterFactory;
-
-import org.fest.util.Sets;
-import org.junit.Before;
-import org.junit.Ignore;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.support.v4.ShadowLocalBroadcastManager;
-
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Map;
-import java.util.Set;
-
-import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
-import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
-import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.mobileads.MoPubInterstitial.InterstitialAdListener;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class EventForwardingBroadcastReceiverTest {
-
-    private CustomEventInterstitialListener customEventInterstitialListener;
-    private EventForwardingBroadcastReceiver subject;
-    private Activity context;
-    private int broadcastIdentifier;
-
-    @Before
-    public void setUp() throws Exception {
-        customEventInterstitialListener = mock(CustomEventInterstitialListener.class);
-        broadcastIdentifier = 27027027;
-        subject = new EventForwardingBroadcastReceiver(customEventInterstitialListener, broadcastIdentifier);
-        context = new Activity();
-    }
-
-    @Ignore("Difficult with the number of test factories and mocking involved.")
-    @Test
-    public void twoDifferentInterstitials_shouldNotHearEachOthersBroadcasts() throws Exception {
-        final MoPubInterstitial interstitialA = new MoPubInterstitial(context, "adunitid");
-        final InterstitialAdListener listenerA = mock(InterstitialAdListener.class);
-        interstitialA.setInterstitialAdListener(listenerA);
-
-        final MoPubInterstitial interstitialB = new MoPubInterstitial(context, "adunitid");
-        final InterstitialAdListener listenerB = mock(InterstitialAdListener.class);
-        interstitialB.setInterstitialAdListener(listenerB);
-
-        Map<String, String> serverExtras = new HashMap<String, String>();
-        serverExtras.put(DataKeys.HTML_RESPONSE_BODY_KEY, "response");
-        final CustomEventInterstitialAdapter customEventInterstitialAdapter =
-                CustomEventInterstitialAdapterFactory.create(
-                        interstitialA,
-                        "com.mopub.mobileads.HtmlInterstitial",
-                        serverExtras, broadcastIdentifier, null);
-
-
-        customEventInterstitialAdapter.loadInterstitial();
-        verify(listenerA).onInterstitialLoaded(interstitialA);
-        verify(listenerB, never()).onInterstitialLoaded(any(MoPubInterstitial.class));
-
-        interstitialA.onCustomEventInterstitialShown();
-        verify(listenerA).onInterstitialLoaded(interstitialA);
-        verify(listenerB, never()).onInterstitialShown(any(MoPubInterstitial.class));
-
-        interstitialA.onCustomEventInterstitialClicked();
-        verify(listenerA).onInterstitialClicked(interstitialA);
-        verify(listenerB, never()).onInterstitialClicked(any(MoPubInterstitial.class));
-
-        interstitialA.onCustomEventInterstitialDismissed();
-        verify(listenerA).onInterstitialDismissed(interstitialA);
-        verify(listenerB, never()).onInterstitialDismissed(any(MoPubInterstitial.class));
-    }
-
-    @Test
-    public void constructor_shouldSetIntentFilter() throws Exception {
-        Set<String> expectedActions = Sets.newLinkedHashSet(
-                ACTION_INTERSTITIAL_FAIL,
-                ACTION_INTERSTITIAL_SHOW,
-                ACTION_INTERSTITIAL_DISMISS,
-                ACTION_INTERSTITIAL_CLICK
-        );
-
-        final IntentFilter intentFilter = subject.getIntentFilter();
-        final Iterator<String> actionIterator = intentFilter.actionsIterator();
-
-        assertThat(intentFilter.countActions()).isEqualTo(4);
-        while (actionIterator.hasNext()) {
-            assertThat(expectedActions.contains(actionIterator.next()));
-        }
-    }
-
-    @Test
-    public void onReceive_whenActionInterstitialFail_shouldNotifyListener() throws Exception {
-        Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_CLICK, broadcastIdentifier);
-
-        subject.onReceive(context, intent);
-
-        verify(customEventInterstitialListener).onInterstitialClicked();
-    }
-
-    @Test
-    public void onReceive_whenActionInterstitialShow_shouldNotifyListener() throws Exception {
-        Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, broadcastIdentifier);
-
-        subject.onReceive(context, intent);
-
-        verify(customEventInterstitialListener).onInterstitialShown();
-    }
-
-
-    @Test
-    public void onReceive_whenActionInterstitialDismiss_shouldNotifyListener() throws Exception {
-        Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, broadcastIdentifier);
-
-        subject.onReceive(context, intent);
-
-        verify(customEventInterstitialListener).onInterstitialDismissed();
-    }
-
-    @Test
-    public void onReceive_whenActionInterstitialClick_shouldNotifyListener() throws Exception {
-        Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_CLICK, broadcastIdentifier);
-
-        subject.onReceive(context, intent);
-
-        verify(customEventInterstitialListener).onInterstitialClicked();
-    }
-
-    @Test
-    public void onReceive_withIncorrectBroadcastIdentifier_shouldDoNothing() throws Exception {
-        long incorrectBroadcastIdentifier = broadcastIdentifier + 1;
-
-        Intent fail = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_FAIL, incorrectBroadcastIdentifier);
-        Intent show = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, incorrectBroadcastIdentifier);
-        Intent click = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_CLICK, incorrectBroadcastIdentifier);
-        Intent dismiss = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, incorrectBroadcastIdentifier);
-
-        subject.onReceive(context, fail);
-        subject.onReceive(context, show);
-        subject.onReceive(context, click);
-        subject.onReceive(context, dismiss);
-
-        verifyNoMoreInteractions(customEventInterstitialListener);
-    }
-
-    @Test
-    public void onReceiver_whenCustomEventInterstitialListenerIsNull_shouldNotBlowUp() throws Exception {
-        Intent intent = new Intent(ACTION_INTERSTITIAL_SHOW);
-
-        subject = new EventForwardingBroadcastReceiver(null, broadcastIdentifier);
-        subject.onReceive(context, intent);
-
-        // pass
-    }
-
-    @Test
-    public void register_shouldEnableReceivingBroadcasts() throws Exception {
-        subject.register(subject, context);
-        Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, broadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener).onInterstitialShown();
-    }
-
-    @Test
-    public void unregister_shouldDisableReceivingBroadcasts() throws Exception {
-        subject.register(subject, context);
-
-        subject.unregister(subject);
-        Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, broadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener, never()).onInterstitialShown();
-    }
-
-    @Test
-    public void unregister_whenNotRegistered_shouldNotBlowUp() throws Exception {
-        subject.unregister(subject);
-
-        // pass
-    }
-
-    @Test
-    public void unregister_shouldNotLeakTheContext() throws Exception {
-        subject.register(subject, context);
-        subject.unregister(subject);
-
-        LocalBroadcastManager.getInstance(context).registerReceiver(subject, subject.getIntentFilter());
-        subject.unregister(subject);
-
-        // Unregister shouldn't know the context any more and so should not have worked
-        Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, broadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-        verify(customEventInterstitialListener).onInterstitialShown();
-    }
-
-    public static Intent getIntentForActionAndIdentifier(final String action, final long broadcastIdentifier) {
-        final Intent intent = new Intent(action);
-        intent.putExtra("broadcastIdentifier", broadcastIdentifier);
-        return intent;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
deleted file mode 100644
index 2fdd7a26..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
+++ /dev/null
@@ -1,125 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.view.Gravity;
-import android.widget.FrameLayout;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.TestHtmlBannerWebViewFactory;
-import com.mopub.mobileads.test.support.TestMoPubViewFactory;
-import com.mopub.network.AdResponse;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.robolectric.annotation.Config;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.mopub.common.DataKeys.CLICKTHROUGH_URL_KEY;
-import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.common.DataKeys.REDIRECT_URL_KEY;
-import static com.mopub.common.DataKeys.SCROLLABLE_KEY;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class HtmlBannerTest {
-
-    private HtmlBanner subject;
-    private HtmlBannerWebView htmlBannerWebView;
-    private CustomEventBanner.CustomEventBannerListener customEventBannerListener;
-    private Map<String, Object> localExtras;
-    private Map<String, String> serverExtras;
-    private Activity context;
-    private String responseBody;
-
-    @Before
-    public void setup() {
-        subject = new HtmlBanner();
-        htmlBannerWebView = TestHtmlBannerWebViewFactory.getSingletonMock();
-        customEventBannerListener = mock(CustomEventBanner.CustomEventBannerListener.class);
-        context = new Activity();
-        localExtras = new HashMap<String, Object>();
-        serverExtras = new HashMap<String, String>();
-        responseBody = "expected response body";
-        serverExtras.put(HTML_RESPONSE_BODY_KEY, responseBody);
-        serverExtras.put(SCROLLABLE_KEY, "false");
-    }
-
-    @Test
-    public void loadBanner_shouldPopulateTheHtmlWebViewWithHtml() throws Exception {
-        subject.loadBanner(context, customEventBannerListener, localExtras, serverExtras);
-
-        assertThat(TestHtmlBannerWebViewFactory.getLatestListener()).isSameAs(customEventBannerListener);
-        assertThat(TestHtmlBannerWebViewFactory.getLatestIsScrollable()).isFalse();
-        assertThat(TestHtmlBannerWebViewFactory.getLatestRedirectUrl()).isNull();
-        assertThat(TestHtmlBannerWebViewFactory.getLatestClickthroughUrl()).isNull();
-        verify(htmlBannerWebView).loadHtmlResponse(responseBody);
-    }
-
-    @Test
-    public void loadBanner_whenNoHtmlResponse_shouldNotifyBannerFailed() throws Exception {
-        serverExtras.remove(HTML_RESPONSE_BODY_KEY);
-        subject.loadBanner(context, customEventBannerListener, localExtras, serverExtras);
-
-        verify(customEventBannerListener).onBannerFailed(eq(NETWORK_INVALID_STATE));
-        assertThat(TestHtmlBannerWebViewFactory.getLatestListener()).isNull();
-        assertThat(TestHtmlBannerWebViewFactory.getLatestIsScrollable()).isFalse();
-        assertThat(TestHtmlBannerWebViewFactory.getLatestRedirectUrl()).isNull();
-        assertThat(TestHtmlBannerWebViewFactory.getLatestClickthroughUrl()).isNull();
-        verify(htmlBannerWebView, never()).loadHtmlResponse(anyString());
-    }
-
-    @Test
-    public void loadBanner_shouldPassParametersThrough() throws Exception {
-        serverExtras.put(SCROLLABLE_KEY, "true");
-        serverExtras.put(REDIRECT_URL_KEY, "redirectUrl");
-        serverExtras.put(CLICKTHROUGH_URL_KEY, "clickthroughUrl");
-        subject.loadBanner(context, customEventBannerListener, localExtras, serverExtras);
-
-        assertThat(TestHtmlBannerWebViewFactory.getLatestListener()).isSameAs(customEventBannerListener);
-        assertThat(TestHtmlBannerWebViewFactory.getLatestIsScrollable()).isTrue();
-        assertThat(TestHtmlBannerWebViewFactory.getLatestRedirectUrl()).isEqualTo("redirectUrl");
-        assertThat(TestHtmlBannerWebViewFactory.getLatestClickthroughUrl()).isEqualTo("clickthroughUrl");
-        verify(htmlBannerWebView).loadHtmlResponse(responseBody);
-    }
-
-    @Test
-    public void onInvalidate_shouldDestroyTheHtmlWebView() throws Exception {
-        subject.loadBanner(context, customEventBannerListener, localExtras, serverExtras);
-        subject.onInvalidate();
-
-        verify(htmlBannerWebView).destroy();
-    }
-
-    @Test
-    public void loadBanner_shouldCauseServerDimensionsToBeHonoredWhenLayingOutView() throws Exception {
-        subject.loadBanner(context, customEventBannerListener, localExtras, serverExtras);
-        MoPubView moPubView = TestMoPubViewFactory.getSingletonMock();
-        stub(moPubView.getContext()).toReturn(context);
-        AdViewController adViewController = new AdViewController(context, moPubView);
-
-
-        AdResponse adResponse = new AdResponse.Builder().setDimensions(320, 50).build();
-        adViewController.onAdLoadSuccess(adResponse);
-
-        adViewController.setAdContentView(htmlBannerWebView);
-        ArgumentCaptor<FrameLayout.LayoutParams> layoutParamsCaptor = ArgumentCaptor.forClass(FrameLayout.LayoutParams.class);
-        verify(moPubView).addView(eq(htmlBannerWebView), layoutParamsCaptor.capture());
-        FrameLayout.LayoutParams layoutParams = layoutParamsCaptor.getValue();
-
-        assertThat(layoutParams.width).isEqualTo(320);
-        assertThat(layoutParams.height).isEqualTo(50);
-        assertThat(layoutParams.gravity).isEqualTo(Gravity.CENTER);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerWebViewTest.java
deleted file mode 100644
index dc2a4ce6..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerWebViewTest.java
+++ /dev/null
@@ -1,69 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.webkit.WebViewClient;
-
-import com.mopub.common.AdReport;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.Shadows;
-import org.robolectric.annotation.Config;
-
-import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class HtmlBannerWebViewTest {
-    private HtmlBannerWebView subject;
-    @Mock
-    private AdReport mockAdReport;
-    private CustomEventBannerListener customEventBannerListener;
-    private String clickthroughUrl;
-    private String redirectUrl;
-    private String dspCreativeId;
-
-    @Before
-    public void setup() throws Exception {
-        subject = new HtmlBannerWebView(Robolectric.buildActivity(Activity.class).create().get(),
-                mockAdReport);
-        customEventBannerListener = mock(CustomEventBannerListener.class);
-        clickthroughUrl = "clickthroughUrl";
-        redirectUrl = "redirectUrl";
-        dspCreativeId = "dspCreativeId";
-    }
-
-    @Test
-    public void init_shouldSetupWebViewClient() throws Exception {
-        subject.init(customEventBannerListener, false, clickthroughUrl, redirectUrl, dspCreativeId);
-        WebViewClient webViewClient = Shadows.shadowOf(subject).getWebViewClient();
-        assertThat(webViewClient).isNotNull();
-        assertThat(webViewClient).isInstanceOf(HtmlWebViewClient.class);
-    }
-
-    @Test
-    public void htmlBannerWebViewListener_shouldForwardCalls() throws Exception {
-        HtmlBannerWebView.HtmlBannerWebViewListener listenerSubject = new HtmlBannerWebView.HtmlBannerWebViewListener(customEventBannerListener);
-
-        listenerSubject.onClicked();
-        verify(customEventBannerListener).onBannerClicked();
-
-        listenerSubject.onLoaded(subject);
-        verify(customEventBannerListener).onBannerLoaded(eq(subject));
-
-        listenerSubject.onCollapsed();
-        verify(customEventBannerListener).onBannerCollapsed();
-
-        listenerSubject.onFailed(NETWORK_INVALID_STATE);
-        verify(customEventBannerListener).onBannerFailed(eq(NETWORK_INVALID_STATE));
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
deleted file mode 100644
index d641f19c..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
+++ /dev/null
@@ -1,148 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Intent;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.TestHtmlInterstitialWebViewFactory;
-
-import org.junit.Before;
-import org.junit.Ignore;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowApplication;
-import org.robolectric.shadows.support.v4.ShadowLocalBroadcastManager;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
-import static com.mopub.common.DataKeys.CLICKTHROUGH_URL_KEY;
-import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.common.DataKeys.REDIRECT_URL_KEY;
-import static com.mopub.common.DataKeys.SCROLLABLE_KEY;
-import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class HtmlInterstitialTest extends ResponseBodyInterstitialTest {
-    private CustomEventInterstitialListener customEventInterstitialListener;
-    private Activity context;
-    private Map<String,Object> localExtras;
-    private Map<String,String> serverExtras;
-    private HtmlInterstitialWebView htmlInterstitialWebView;
-    private String expectedResponse;
-    private long broadcastIdentifier;
-
-    @Before
-    public void setUp() throws Exception {
-        subject = new HtmlInterstitial();
-
-        expectedResponse = "this is the response";
-        htmlInterstitialWebView = TestHtmlInterstitialWebViewFactory.getSingletonMock();
-        context = new Activity();
-        customEventInterstitialListener = mock(CustomEventInterstitialListener.class);
-        localExtras = new HashMap<String, Object>();
-        serverExtras = new HashMap<String, String>();
-        serverExtras.put(HTML_RESPONSE_BODY_KEY, expectedResponse);
-
-        broadcastIdentifier = 2222;
-        localExtras.put(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
-    }
-
-    @Ignore("pending")
-    @Test
-    public void loadInterstitial_shouldNotifyCustomEventInterstitialListenerOnLoaded() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-
-//        verify(customEventInterstitialListener).onInterstitialLoaded();
-    }
-
-    @Test
-    public void loadInterstitial_whenNoHtmlResponsePassedIn_shouldCallLoadFailUrl() throws Exception {
-        serverExtras.remove(HTML_RESPONSE_BODY_KEY);
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestListener()).isNull();
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestIsScrollable()).isFalse();
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestRedirectUrl()).isNull();
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestClickthroughUrl()).isNull();
-        verify(customEventInterstitialListener).onInterstitialFailed(NETWORK_INVALID_STATE);
-        verify(htmlInterstitialWebView, never()).loadHtmlResponse(anyString());
-    }
-
-
-    @Test
-    public void showInterstitial_withMinimumExtras_shouldStartMoPubActivityWithDefaults() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-        subject.showInterstitial();
-
-        Intent nextStartedActivity = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(nextStartedActivity.getStringExtra(HTML_RESPONSE_BODY_KEY)).isEqualTo(expectedResponse);
-        assertThat(nextStartedActivity.getBooleanExtra(SCROLLABLE_KEY, false)).isFalse();
-        assertThat(nextStartedActivity.getStringExtra(REDIRECT_URL_KEY)).isNull();
-        assertThat(nextStartedActivity.getStringExtra(CLICKTHROUGH_URL_KEY)).isNull();
-        assertThat(nextStartedActivity.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(nextStartedActivity.getComponent().getClassName()).isEqualTo("com.mopub.mobileads.MoPubActivity");
-    }
-
-    @Test
-    public void showInterstitial_shouldStartMoPubActivityWithAllExtras() throws Exception {
-        serverExtras.put(SCROLLABLE_KEY, "true");
-        serverExtras.put(REDIRECT_URL_KEY, "redirectUrl");
-        serverExtras.put(CLICKTHROUGH_URL_KEY, "clickthroughUrl");
-
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-        subject.showInterstitial();
-
-        Intent nextStartedActivity = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(nextStartedActivity.getStringExtra(HTML_RESPONSE_BODY_KEY)).isEqualTo(expectedResponse);
-        assertThat(nextStartedActivity.getBooleanExtra(SCROLLABLE_KEY, false)).isTrue();
-        assertThat(nextStartedActivity.getStringExtra(REDIRECT_URL_KEY)).isEqualTo("redirectUrl");
-        assertThat(nextStartedActivity.getStringExtra(CLICKTHROUGH_URL_KEY)).isEqualTo("clickthroughUrl");
-        assertThat(nextStartedActivity.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(nextStartedActivity.getComponent().getClassName()).isEqualTo("com.mopub.mobileads.MoPubActivity");
-    }
-
-    @Test
-    public void loadInterstitial_shouldConnectListenerToBroadcastReceiver() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-
-        Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, broadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener).onInterstitialShown();
-
-        intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, broadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener).onInterstitialDismissed();
-    }
-
-    @Test
-    public void onInvalidate_shouldDisconnectListenerToBroadcastReceiver() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-        subject.onInvalidate();
-
-        Intent intent;
-        intent = new Intent(ACTION_INTERSTITIAL_SHOW);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener, never()).onInterstitialShown();
-
-        intent = new Intent(ACTION_INTERSTITIAL_DISMISS);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener, never()).onInterstitialDismissed();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java
deleted file mode 100644
index 2a73c7d3..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java
+++ /dev/null
@@ -1,68 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.webkit.WebViewClient;
-
-import com.mopub.common.AdReport;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.Shadows;
-import org.robolectric.annotation.Config;
-
-import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static com.mopub.mobileads.HtmlInterstitialWebView.HtmlInterstitialWebViewListener;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class HtmlInterstitialWebViewTest {
-
-    @Mock AdReport mockAdReport;
-    private HtmlInterstitialWebView subject;
-    private CustomEventInterstitialListener customEventInterstitialListener;
-    private String clickthroughUrl;
-    private boolean isScrollable;
-    private String redirectUrl;
-    private String dspCreativeId;
-
-    @Before
-    public void setUp() throws Exception {
-        subject = new HtmlInterstitialWebView(Robolectric.buildActivity(Activity.class).create().get(),
-                mockAdReport);
-        customEventInterstitialListener = mock(CustomEventInterstitialListener.class);
-        isScrollable = false;
-        clickthroughUrl = "clickthroughUrl";
-        redirectUrl = "redirectUrl";
-        dspCreativeId = "dspCreativeId";
-    }
-
-    @Test
-    public void init_shouldSetupWebViewClient() throws Exception {
-        subject.init(customEventInterstitialListener, false, clickthroughUrl, redirectUrl, dspCreativeId);
-        WebViewClient webViewClient = Shadows.shadowOf(subject).getWebViewClient();
-        assertThat(webViewClient).isNotNull();
-        assertThat(webViewClient).isInstanceOf(HtmlWebViewClient.class);
-    }
-
-    @Test
-    public void htmlBannerWebViewListener_shouldForwardCalls() throws Exception {
-        HtmlInterstitialWebViewListener listenerSubject = new HtmlInterstitialWebViewListener(customEventInterstitialListener);
-
-        listenerSubject.onLoaded(subject);
-
-        listenerSubject.onFailed(NETWORK_INVALID_STATE);
-        verify(customEventInterstitialListener).onInterstitialFailed(eq(NETWORK_INVALID_STATE));
-
-        listenerSubject.onClicked();
-        verify(customEventInterstitialListener).onInterstitialClicked();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
deleted file mode 100644
index ddc9feb7..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
+++ /dev/null
@@ -1,476 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.ActivityNotFoundException;
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.ResolveInfo;
-import android.net.Uri;
-import android.webkit.WebView;
-
-import com.mopub.common.MoPubBrowser;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowApplication;
-
-import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.any;
-import static org.mockito.Mockito.doThrow;
-import static org.mockito.Mockito.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class HtmlWebViewClientTest {
-
-    private static final String CLICKTHROUGH_URL = "https://clickthrough";
-
-    private HtmlWebViewClient subject;
-    private HtmlWebViewListener htmlWebViewListener;
-    private BaseHtmlWebView htmlWebView;
-    private Context context;
-
-    @Before
-    public void setUp() throws Exception {
-        htmlWebViewListener = mock(HtmlWebViewListener.class);
-        htmlWebView = mock(BaseHtmlWebView.class);
-        context = Robolectric.buildActivity(Activity.class).create().get().getApplicationContext();
-        when(htmlWebView.getContext()).thenReturn(context);
-        when(htmlWebView.wasClicked()).thenReturn(true);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, CLICKTHROUGH_URL,
-                "redirect", "dsp_creative_id");
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withMoPubFinishLoad_shouldCallAdDidLoad() throws Exception {
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, "mopub://finishLoad");
-
-        assertThat(didOverrideUrl).isTrue();
-        verify(htmlWebViewListener).onLoaded(eq(htmlWebView));
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withMoPubClose_shouldCallAdDidClose() throws Exception {
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, "mopub://close");
-
-        assertThat(didOverrideUrl).isTrue();
-        verify(htmlWebViewListener).onCollapsed();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withMoPubFailLoad_shouldCallLoadFailUrl() throws Exception {
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, "mopub://failLoad");
-
-        assertThat(didOverrideUrl).isTrue();
-        verify(htmlWebViewListener).onFailed(UNSPECIFIED);
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withPhoneIntent_shouldStartDefaultIntent() throws Exception {
-        assertPhoneUrlStartedCorrectIntent("tel:");
-        assertPhoneUrlStartedCorrectIntent("voicemail:");
-        assertPhoneUrlStartedCorrectIntent("sms:");
-        assertPhoneUrlStartedCorrectIntent("mailto:");
-        assertPhoneUrlStartedCorrectIntent("geo:");
-        assertPhoneUrlStartedCorrectIntent("google.streetview:");
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withCustomApplicationIntent_withUserClick_andCanHandleCustomIntent_shouldTryToLaunchCustomIntent() throws Exception {
-        String customUrl = "myintent://something";
-        stub(htmlWebView.wasClicked()).toReturn(true);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW, Uri.parse(customUrl)), new ResolveInfo());
-
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, customUrl);
-
-        assertThat(didOverrideUrl).isTrue();
-        verify(htmlWebViewListener).onClicked();
-        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(intent).isNotNull();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withCustomApplicationIntent_withoutUserClick_shouldNotTryToLaunchIntent() throws Exception {
-        String customUrl = "myintent://something";
-        stub(htmlWebView.wasClicked()).toReturn(false);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
-
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, customUrl);
-
-        assertThat(didOverrideUrl).isTrue();
-        verify(htmlWebViewListener, never()).onClicked();
-        verify(htmlWebView, never()).onResetUserClick();
-        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withCustomApplicationIntent_withUserClick_butCanNotHandleCustomIntent_shouldFailSilently() throws Exception {
-        String customUrl = "myintent://something";
-        stub(htmlWebView.wasClicked()).toReturn(true);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
-
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, customUrl);
-
-        assertThat(didOverrideUrl).isTrue();
-        verify(htmlWebViewListener, never()).onClicked();
-        verify(htmlWebView, never()).onResetUserClick();
-        Intent startedIntent = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(startedIntent).isNull();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withHttpUrl_withUserClick_shouldOpenBrowser() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(true);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, "dsp_creative_id");
-        String validUrl = "https://www.mopub.com";
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, validUrl);
-
-        assertThat(didOverrideUrl).isTrue();
-        verify(htmlWebViewListener).onClicked();
-
-        Intent startedActivity = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(startedActivity.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser");
-        assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(validUrl);
-        assertThat(startedActivity.getStringExtra(MoPubBrowser.DSP_CREATIVE_ID)).isEqualTo("dsp_creative_id");
-        assertThat(startedActivity.getData()).isNull();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withHttpUrl_withoutUserClick_shouldNotOpenBrowser() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(false);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
-        String validUrl = "https://www.mopub.com";
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, validUrl);
-
-        assertThat(didOverrideUrl).isTrue();
-        verify(htmlWebViewListener, never()).onClicked();
-        verify(htmlWebView, never()).onResetUserClick();
-        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withClickTrackingRedirect_withUserClick_shouldNotChangeUrl() throws Exception {
-        String validUrl = "https://www.mopub.com";
-        stub(htmlWebView.wasClicked()).toReturn(true);
-
-        subject.shouldOverrideUrlLoading(htmlWebView, validUrl);
-
-        Intent startedActivity = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(validUrl);
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withClickTrackingRedirect_withoutUserClick_shouldChangeUrl() throws Exception {
-        String validUrl = "https://www.mopub.com";
-        stub(htmlWebView.wasClicked()).toReturn(false);
-
-        subject.shouldOverrideUrlLoading(htmlWebView, validUrl);
-
-        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withEmptyUrl_withUserClick_shouldFailSilently() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(true);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
-
-        subject.shouldOverrideUrlLoading(htmlWebView, "");
-
-        Intent startedActivity = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(startedActivity).isNull();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withEmptyUrl_withoutUserClick_shouldLoadAboutBlank() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(false);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
-
-        subject.shouldOverrideUrlLoading(htmlWebView, "");
-
-        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withNativeBrowserScheme_withUserClick_shouldStartIntentWithActionView() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(true);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
-
-        boolean shouldOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView,
-                "mopubnativebrowser://navigate?url=https%3A%2F%2Fwww.mopub.com");
-
-        assertThat(shouldOverrideUrl).isTrue();
-        verify(htmlWebViewListener).onClicked();
-        verify(htmlWebView).onResetUserClick();
-        Intent startedActivity = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(startedActivity.getAction()).isEqualTo("android.intent.action.VIEW");
-        assertThat(startedActivity.getData().toString()).isEqualTo("https://www.mopub.com");
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withNativeBrowserScheme_withoutUserClick_shouldStartIntentWithActionView() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(false);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
-
-        boolean shouldOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView,
-                "mopubnativebrowser://navigate?url=https%3A%2F%2Fwww.mopub.com");
-
-        assertThat(shouldOverrideUrl).isTrue();
-        verify(htmlWebViewListener, never()).onClicked();
-        verify(htmlWebView, never()).onResetUserClick();
-        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withNativeBrowserScheme_butOpaqueUri_withUserClick_shouldNotBeHandledByNativeBrowser() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(true);
-        String opaqueNativeBrowserUriString = "mopubnativebrowser:navigate?url=https%3A%2F%2Fwww.mopub.com";
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
-
-        boolean shouldOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, opaqueNativeBrowserUriString);
-
-        assertThat(shouldOverrideUrl).isTrue();
-        verify(htmlWebViewListener, never()).onClicked();
-        verify(htmlWebView, never()).onResetUserClick();
-        Intent startedActivity = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(startedActivity).isNull();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withNativeBrowserScheme_butOpaqueUri_withoutUserClick_shouldNotLoad() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(false);
-        String opaqueNativeBrowserUriString = "mopubnativebrowser:navigate?url=https%3A%2F%2Fwww.mopub.com";
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
-
-        boolean shouldOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, opaqueNativeBrowserUriString);
-
-        assertThat(shouldOverrideUrl).isTrue();
-        verify(htmlWebViewListener, never()).onClicked();
-        verify(htmlWebView, never()).onResetUserClick();
-
-        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withNativeBrowserScheme_withInvalidHostSchemeUrl_withUserClick_shouldFailSilently() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(true);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
-
-        boolean shouldOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, "something://blah?url=invalid");
-
-        assertThat(shouldOverrideUrl).isTrue();
-        Intent startedActivity = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(startedActivity).isNull();
-
-        verify(htmlWebViewListener, never()).onClicked();
-        verify(htmlWebView, never()).onResetUserClick();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withNativeBrowserScheme_withInvalidHostSchemeUrl_withoutUserClick_shouldNotInvokeNativeBrowser() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(false);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
-
-        boolean shouldOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, "something://blah?url=invalid");
-
-        assertThat(shouldOverrideUrl).isTrue();
-        verify(htmlWebViewListener, never()).onClicked();
-        verify(htmlWebView, never()).onResetUserClick();
-        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withAboutBlankUrl_shouldFailSilently() {
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
-
-        subject.shouldOverrideUrlLoading(htmlWebView, "about:blank");
-
-        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
-        verify(htmlWebViewListener, never()).onClicked();
-        verify(htmlWebView, never()).onResetUserClick();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withMoPubFinishLoad_withoutUserClick_shouldDoNothing() throws Exception {
-        assertNothingHappensWithoutClick("mopub://finishLoad");
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withMoPubClose_withoutUserClick_shouldDoNothing() throws Exception {
-        assertNothingHappensWithoutClick("mopub://close");
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withMoPubFailLoad_withoutUserClick_shouldDoNothing() throws Exception {
-        assertNothingHappensWithoutClick("mopub://fail");
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withAboutScheme_withoutUserClick_shouldDoNothing() throws Exception {
-        assertNothingHappensWithoutClick("about:blank");
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withPhoneScheme_withoutUserClick_shouldDoNothing() throws Exception {
-        assertNothingHappensWithoutClick("tel:");
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withMarketUrl_withoutUserClick_shouldDoNothing() throws Exception {
-        assertNothingHappensWithoutClick("https://play.google.com/");
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withNativeBrowserUrl_withoutUserClick_shouldDoNothing() throws Exception {
-        assertNothingHappensWithoutClick("mopubnativebrowser://");
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withInAppBrowserUrl_withoutUserClick_shouldDoNothing() throws Exception {
-        assertNothingHappensWithoutClick("https://twitter.com");
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withDeepLinkUrl_withoutUserClick_shouldDoNothing() throws Exception {
-        assertNothingHappensWithoutClick("myapp://view");
-    }
-
-    @Test
-    public void onPageStarted_whenLoadedUrlStartsWithRedirect_withUserClick_shouldOpenInBrowser() throws Exception {
-        String url = "redirectUrlToLoad";
-        stub(htmlWebView.wasClicked()).toReturn(true);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, "redirect", "dsp_creative_id");
-        WebView view = mock(WebView.class);
-        subject.onPageStarted(view, url, null);
-
-        verify(view).stopLoading();
-
-        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(intent.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(url);
-        assertThat(intent.getStringExtra(MoPubBrowser.DSP_CREATIVE_ID)).isEqualTo("dsp_creative_id");
-        assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(intent.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser");
-    }
-
-    @Test
-    public void onPageStarted_whenLoadedUrlStartsWithRedirect_withoutUserClick_shouldOpenInBrowser() throws Exception {
-        String url = "redirectUrlToLoad";
-        stub(htmlWebView.wasClicked()).toReturn(false);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, "redirect", "dsp_creative_id");
-        WebView view = mock(WebView.class);
-        subject.onPageStarted(view, url, null);
-
-        verify(view).stopLoading();
-
-        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
-    }
-
-    @Test
-    public void onPageStarted_whenLoadedUrlStartsWithRedirectAndHasClickthrough_withUserClick_shouldNotChangeUrl_shouldOpenInBrowser() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(true);
-        String url = "redirectUrlToLoad";
-        WebView view = mock(WebView.class);
-        subject.onPageStarted(view, url, null);
-
-        verify(view).stopLoading();
-
-        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(intent.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(url);
-        assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(intent.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser");
-    }
-
-    @Test
-    public void onPageStarted_whenLoadedUrlStartsWithRedirectAndHasClickthrough_withoutUserClick_shouldNotOpenInBrowser() throws Exception {
-        when(htmlWebView.wasClicked()).thenReturn(false);
-        String url = "redirectUrlToLoad";
-        WebView view = mock(WebView.class);
-        subject.onPageStarted(view, url, null);
-
-        verify(view).stopLoading();
-
-        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
-    }
-
-    @Test
-    public void onPageStarted_whenLoadedUrlStartsWithRedirectAndHasClickthrough_withUserClick_whenMoPubBrowserCannotHandleIntent_shouldFailSilently() throws Exception {
-        Context mockContext = mock(Context.class);
-        stub(htmlWebView.wasClicked()).toReturn(true);
-        stub(htmlWebView.getContext()).toReturn(mockContext);
-        String url = "redirectUrlToLoad";
-
-        // We only want startActivity() to throw an exception the first time we call it.
-        doThrow(new ActivityNotFoundException())
-                .doNothing()
-                .when(mockContext).startActivity(any(Intent.class));
-
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, CLICKTHROUGH_URL, "redirect", "dsp_creative_id");
-        subject.onPageStarted(htmlWebView, url, null);
-
-        ArgumentCaptor<Intent> intentArgumentCaptor = ArgumentCaptor.forClass(Intent.class);
-        verify(mockContext).startActivity(intentArgumentCaptor.capture());
-
-        Intent intent = intentArgumentCaptor.getValue();
-        assertThat(intent.getData()).isNull();
-        verify(htmlWebViewListener, never()).onClicked();
-        verify(htmlWebView, never()).onResetUserClick();
-    }
-
-    @Test
-    public void onPageStarted_whenLoadedUrlDoesntStartWithRedirect_shouldDoNothing() throws Exception {
-        WebView view = mock(WebView.class);
-        subject.onPageStarted(view, "this doesn't start with redirect", null);
-
-        verify(view, never()).stopLoading();
-
-        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
-    }
-
-    private void assertPhoneUrlStartedCorrectIntent(String url) {
-        boolean didOverrideUrl;
-
-        stub(htmlWebView.wasClicked()).toReturn(true);
-        didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, url);
-        Intent startedActivity = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(startedActivity.getAction()).isEqualTo(Intent.ACTION_VIEW);
-        assertThat(startedActivity.getData().toString()).isEqualTo(url);
-        assertThat(didOverrideUrl).isTrue();
-        verify(htmlWebViewListener).onClicked();
-        verify(htmlWebView).onResetUserClick();
-        reset(htmlWebViewListener);
-        reset(htmlWebView);
-
-        stub(htmlWebView.wasClicked()).toReturn(false);
-        didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, url);
-        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
-        assertThat(didOverrideUrl).isTrue();
-        verify(htmlWebViewListener, never()).onClicked();
-        verify(htmlWebView, never()).onResetUserClick();
-        reset(htmlWebViewListener);
-        reset(htmlWebView);
-    }
-
-    private void assertNothingHappensWithoutClick(final String url) {
-        stub(htmlWebView.wasClicked()).toReturn(false);
-
-        subject.shouldOverrideUrlLoading(htmlWebView, url);
-
-        verify(htmlWebViewListener, never()).onClicked();
-        verify(htmlWebView, never()).onResetUserClick();
-        Intent startedActivity = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(startedActivity).isNull();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
deleted file mode 100644
index 10dd9951..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
+++ /dev/null
@@ -1,311 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.ActivityInfo;
-import android.view.View;
-import android.view.ViewGroup;
-import android.webkit.WebViewClient;
-import android.widget.FrameLayout;
-
-import com.mopub.common.AdReport;
-import com.mopub.common.CreativeOrientation;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.TestHtmlInterstitialWebViewFactory;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-import org.robolectric.internal.ShadowExtractor;
-import org.robolectric.shadows.ShadowActivity;
-import org.robolectric.shadows.ShadowApplication;
-import org.robolectric.shadows.support.v4.ShadowLocalBroadcastManager;
-import org.robolectric.util.ActivityController;
-
-import static com.mopub.common.DataKeys.CLICKTHROUGH_URL_KEY;
-import static com.mopub.common.DataKeys.CREATIVE_ORIENTATION_KEY;
-import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.common.DataKeys.REDIRECT_URL_KEY;
-import static com.mopub.common.DataKeys.SCROLLABLE_KEY;
-import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
-import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
-import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
-import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class MoPubActivityTest {
-    private static final String EXPECTED_HTML_DATA = "htmlData";
-    private static final boolean EXPECTED_IS_SCROLLABLE = true;
-    @Mock private AdReport mockAdReport;
-    private static final String EXPECTED_REDIRECT_URL = "redirectUrl";
-    private static final String EXPECTED_CLICKTHROUGH_URL = "https://expected_url";
-    private static final CreativeOrientation EXPECTED_ORIENTATION = CreativeOrientation.PORTRAIT;
-
-    @Mock private BroadcastReceiver broadcastReceiver;
-    private long testBroadcastIdentifier = 2222;
-
-    private HtmlInterstitialWebView htmlInterstitialWebView;
-    private CustomEventInterstitialListener customEventInterstitialListener;
-
-    private MoPubActivity subject;
-
-    @Before
-    public void setUp() throws Exception {
-        htmlInterstitialWebView = TestHtmlInterstitialWebViewFactory.getSingletonMock();
-        resetMockedView(htmlInterstitialWebView);
-
-        Context context = Robolectric.buildActivity(Activity.class).create().get();
-        Intent moPubActivityIntent = MoPubActivity.createIntent(context,
-                EXPECTED_HTML_DATA, mockAdReport, EXPECTED_IS_SCROLLABLE,
-                EXPECTED_REDIRECT_URL,
-                EXPECTED_CLICKTHROUGH_URL, EXPECTED_ORIENTATION, testBroadcastIdentifier);
-
-        final ActivityController<MoPubActivity> subjectController = Robolectric.buildActivity(MoPubActivity.class).withIntent(moPubActivityIntent);
-        subject = subjectController.get();
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver,
-                new EventForwardingBroadcastReceiver(customEventInterstitialListener,
-                        testBroadcastIdentifier).getIntentFilter());
-        subjectController.create();
-
-        customEventInterstitialListener = mock(CustomEventInterstitialListener.class);
-    }
-
-    @Test
-    public void onCreate_shouldHaveLockedOrientation() {
-        // Since robolectric doesn't set a requested orientation, verifying that we have a value tells us that one was set.
-        assertThat(subject.getRequestedOrientation()).isIn(ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT,
-                ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-    }
-
-    @Test
-    public void preRenderHtml_shouldPreloadTheHtml() throws Exception {
-        String htmlData = "this is nonsense";
-        MoPubActivity.preRenderHtml(subject, mockAdReport, customEventInterstitialListener, htmlData);
-
-        verify(htmlInterstitialWebView).enablePlugins(eq(false));
-        verify(htmlInterstitialWebView).loadHtmlResponse(htmlData);
-    }
-
-    @Test
-    public void preRenderHtml_shouldEnableJavascriptCachingForDummyWebView() {
-        MoPubActivity.preRenderHtml(subject, mockAdReport, customEventInterstitialListener,
-                "html_data");
-
-        verify(htmlInterstitialWebView).enableJavascriptCaching();
-    }
-
-    @Test
-    public void preRenderHtml_shouldHaveAWebViewClientThatForwardsFinishLoad() throws Exception {
-        MoPubActivity.preRenderHtml(subject, mockAdReport, customEventInterstitialListener, null);
-
-        ArgumentCaptor<WebViewClient> webViewClientCaptor = ArgumentCaptor.forClass(WebViewClient.class);
-        verify(htmlInterstitialWebView).setWebViewClient(webViewClientCaptor.capture());
-        WebViewClient webViewClient = webViewClientCaptor.getValue();
-
-        webViewClient.shouldOverrideUrlLoading(null, "mopub://finishLoad");
-
-        verify(customEventInterstitialListener).onInterstitialLoaded();
-        verify(customEventInterstitialListener, never()).onInterstitialFailed(any(MoPubErrorCode.class));
-    }
-
-    @Test
-    public void preRenderHtml_shouldHaveAWebViewClientThatForwardsFailLoad() throws Exception {
-        MoPubActivity.preRenderHtml(subject, mockAdReport, customEventInterstitialListener, null);
-
-        ArgumentCaptor<WebViewClient> webViewClientCaptor = ArgumentCaptor.forClass(WebViewClient.class);
-        verify(htmlInterstitialWebView).setWebViewClient(webViewClientCaptor.capture());
-        WebViewClient webViewClient = webViewClientCaptor.getValue();
-
-        webViewClient.shouldOverrideUrlLoading(null, "mopub://failLoad");
-
-        verify(customEventInterstitialListener, never()).onInterstitialLoaded();
-        verify(customEventInterstitialListener).onInterstitialFailed(any(MoPubErrorCode.class));
-    }
-
-    @Test
-    public void onCreate_shouldSetContentView() throws Exception {
-        // onCreate is called above in #setup
-
-        assertThat(getContentView().getChildCount()).isEqualTo(1);
-    }
-
-    @Test
-    public void onCreate_shouldLayoutWebView() throws Exception {
-        // onCreate is called in #setup
-
-        ArgumentCaptor<FrameLayout.LayoutParams> captor = ArgumentCaptor.forClass(FrameLayout.LayoutParams.class);
-        verify(htmlInterstitialWebView).setLayoutParams(captor.capture());
-        FrameLayout.LayoutParams actualLayoutParams = captor.getValue();
-
-        assertThat(actualLayoutParams.width).isEqualTo(FrameLayout.LayoutParams.MATCH_PARENT);
-        assertThat(actualLayoutParams.height).isEqualTo(FrameLayout.LayoutParams.MATCH_PARENT);
-    }
-
-    @Test
-    public void getAdView_shouldReturnPopulatedHtmlWebView() throws Exception {
-        // This is needed because we preload in onCreate and the mock gets triggered.
-        resetMockedView(htmlInterstitialWebView);
-        View adView = subject.getAdView();
-
-        assertThat(adView).isSameAs(htmlInterstitialWebView);
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestListener()).isNotNull();
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestIsScrollable()).isEqualTo(EXPECTED_IS_SCROLLABLE);
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestClickthroughUrl()).isEqualTo(EXPECTED_CLICKTHROUGH_URL);
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestRedirectUrl()).isEqualTo(EXPECTED_REDIRECT_URL);
-        verify(htmlInterstitialWebView).loadHtmlResponse(EXPECTED_HTML_DATA);
-    }
-
-    @Test
-    public void onDestroy_shouldDestroyMoPubView() throws Exception {
-        // onCreate is called in #setup
-        subject.onDestroy();
-
-        verify(htmlInterstitialWebView).destroy();
-        assertThat(getContentView().getChildCount()).isEqualTo(0);
-    }
-
-    @Test
-    public void onDestroy_shouldFireJavascriptWebviewDidClose() throws Exception {
-        // onCreate is called in #setup
-        subject.onDestroy();
-
-        verify(htmlInterstitialWebView).loadUrl(eq("javascript:webviewDidClose();"));
-    }
-
-    @Test
-    public void start_shouldStartMoPubActivityWithCorrectParameters() throws Exception {
-        MoPubActivity.start(subject, "expectedResponse", mockAdReport, true, "redirectUrl", "clickthroughUrl", CreativeOrientation.PORTRAIT, testBroadcastIdentifier);
-
-        Intent nextStartedActivity = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(nextStartedActivity.getStringExtra(HTML_RESPONSE_BODY_KEY)).isEqualTo("expectedResponse");
-        assertThat(nextStartedActivity.getBooleanExtra(SCROLLABLE_KEY, false)).isTrue();
-        assertThat(nextStartedActivity.getStringExtra(REDIRECT_URL_KEY)).isEqualTo("redirectUrl");
-        assertThat(nextStartedActivity.getStringExtra(CLICKTHROUGH_URL_KEY)).isEqualTo("clickthroughUrl");
-        assertThat(nextStartedActivity.getSerializableExtra(CREATIVE_ORIENTATION_KEY)).isEqualTo(CreativeOrientation.PORTRAIT);
-        assertThat(nextStartedActivity.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(nextStartedActivity.getComponent().getClassName()).isEqualTo("com.mopub.mobileads.MoPubActivity");
-    }
-
-    @Test
-    public void getAdView_shouldCreateHtmlInterstitialWebViewAndLoadResponse() throws Exception {
-        // This is needed because we preload in onCreate and the mock gets triggered.
-        resetMockedView(htmlInterstitialWebView);
-        subject.getAdView();
-
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestListener()).isNotNull();
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestIsScrollable()).isEqualTo(EXPECTED_IS_SCROLLABLE);
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestRedirectUrl()).isEqualTo(EXPECTED_REDIRECT_URL);
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestClickthroughUrl()).isEqualTo(EXPECTED_CLICKTHROUGH_URL);
-        verify(htmlInterstitialWebView).loadHtmlResponse(EXPECTED_HTML_DATA);
-    }
-
-    @Test
-    public void getAdView_shouldSetUpForBroadcastingClicks() throws Exception {
-        subject.getAdView();
-        BroadcastReceiver broadcastReceiver = mock(BroadcastReceiver.class);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver,
-                new EventForwardingBroadcastReceiver(customEventInterstitialListener,
-                        testBroadcastIdentifier).getIntentFilter());
-
-        TestHtmlInterstitialWebViewFactory.getLatestListener().onInterstitialClicked();
-
-        ArgumentCaptor<Intent> intentCaptor = ArgumentCaptor.forClass(Intent.class);
-        verify(broadcastReceiver).onReceive(any(Context.class), intentCaptor.capture());
-        Intent intent = intentCaptor.getValue();
-        assertThat(intent.getAction()).isEqualTo(ACTION_INTERSTITIAL_CLICK);
-    }
-
-    @Test
-    public void getAdView_shouldSetUpForBroadcastingFail() throws Exception {
-        subject.getAdView();
-        BroadcastReceiver broadcastReceiver = mock(BroadcastReceiver.class);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver,
-                new EventForwardingBroadcastReceiver(customEventInterstitialListener,
-                        testBroadcastIdentifier).getIntentFilter());
-
-        TestHtmlInterstitialWebViewFactory.getLatestListener().onInterstitialFailed(UNSPECIFIED);
-
-        ArgumentCaptor<Intent> intentCaptor = ArgumentCaptor.forClass(Intent.class);
-        verify(broadcastReceiver).onReceive(any(Context.class), intentCaptor.capture());
-        Intent intent = intentCaptor.getValue();
-        assertThat(intent.getAction()).isEqualTo(ACTION_INTERSTITIAL_FAIL);
-
-        assertThat(subject.isFinishing()).isTrue();
-    }
-
-    @Test
-    public void broadcastingInterstitialListener_onInterstitialLoaded_shouldCallJavascriptWebViewDidAppear() throws Exception {
-        MoPubActivity.BroadcastingInterstitialListener broadcastingInterstitialListener = ((MoPubActivity) subject).new BroadcastingInterstitialListener();
-
-        broadcastingInterstitialListener.onInterstitialLoaded();
-
-        verify(htmlInterstitialWebView).loadUrl(eq("javascript:webviewDidAppear();"));
-    }
-
-    @Test
-    public void broadcastingInterstitialListener_onInterstitialFailed_shouldBroadcastFailAndFinish() throws Exception {
-        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_FAIL, testBroadcastIdentifier);
-
-        MoPubActivity.BroadcastingInterstitialListener broadcastingInterstitialListener = ((MoPubActivity) subject).new BroadcastingInterstitialListener();
-        broadcastingInterstitialListener.onInterstitialFailed(null);
-
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
-        assertThat(((ShadowActivity) ShadowExtractor.extract(subject)).isFinishing()).isTrue();
-    }
-
-    @Test
-    public void broadcastingInterstitialListener_onInterstitialClicked_shouldBroadcastClick() throws Exception {
-        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_CLICK, testBroadcastIdentifier);
-
-        MoPubActivity.BroadcastingInterstitialListener broadcastingInterstitialListener = ((MoPubActivity) subject).new BroadcastingInterstitialListener();
-        broadcastingInterstitialListener.onInterstitialClicked();
-
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
-    }
-
-    @Test
-    public void onCreate_shouldBroadcastInterstitialShow() throws Exception {
-        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, testBroadcastIdentifier);
-
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
-    }
-
-    @Test
-    public void onDestroy_shouldBroadcastInterstitialDismiss() throws Exception {
-        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, testBroadcastIdentifier);
-
-        subject.onDestroy();
-
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
-    }
-
-    private FrameLayout getContentView() {
-        return (FrameLayout) ((ViewGroup) subject.findViewById(android.R.id.content)).getChildAt(0);
-    }
-
-    protected void resetMockedView(View view) {
-        reset(view);
-        when(view.getLayoutParams()).thenReturn(
-                new FrameLayout.LayoutParams(FrameLayout.LayoutParams.WRAP_CONTENT,
-                        FrameLayout.LayoutParams.WRAP_CONTENT));
-    }
-}
-
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java
deleted file mode 100644
index 8e0af80a..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java
+++ /dev/null
@@ -1,69 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.network.MoPubRequestQueue;
-import com.mopub.network.Networking;
-import com.mopub.network.TrackingRequest;
-import com.mopub.volley.VolleyError;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Captor;
-import org.mockito.Mock;
-import org.robolectric.annotation.Config;
-
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class MoPubConversionTrackerTest {
-    private MoPubConversionTracker subject;
-    private Activity context;
-    @Mock
-    MoPubRequestQueue mockRequestQueue;
-    @Captor
-    ArgumentCaptor<TrackingRequest> requestCaptor;
-
-    private String expectedUdid;
-    private boolean dnt = false;
-    private static final String TEST_UDID = "20b013c721c";
-
-    @Before
-    public void setUp() throws Exception {
-        subject = new MoPubConversionTracker();
-        context = new Activity();
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-    }
-
-    @Test
-    public void reportAppOpen_Twice_shouldCallOnlyOnce() {
-        subject.reportAppOpen(context);
-        verify(mockRequestQueue).add(requestCaptor.capture());
-
-        reset(mockRequestQueue);
-        requestCaptor.getValue().deliverResponse(null);
-
-        subject.reportAppOpen(context);
-        verify(mockRequestQueue, never()).add(any(TrackingRequest.class));
-    }
-
-    @Test
-    public void reportAppOpen_fails_shouldCallAgain() {
-        subject.reportAppOpen(context);
-        verify(mockRequestQueue).add(requestCaptor.capture());
-
-        reset(mockRequestQueue);
-        requestCaptor.getValue().deliverError(new VolleyError());
-
-        subject.reportAppOpen(context);
-        verify(mockRequestQueue).add(any(TrackingRequest.class));
-    }
-}
-
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
deleted file mode 100644
index c81d7166..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
+++ /dev/null
@@ -1,716 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.support.annotation.NonNull;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.TestAdViewControllerFactory;
-import com.mopub.mobileads.test.support.TestCustomEventInterstitialAdapterFactory;
-
-import org.junit.Before;
-import org.junit.Ignore;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import java.math.BigDecimal;
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_DATA;
-import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
-import static com.mopub.mobileads.MoPubErrorCode.CANCELLED;
-import static com.mopub.mobileads.MoPubErrorCode.INTERNAL_ERROR;
-import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
-import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.DESTROYED;
-import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.IDLE;
-import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.LOADING;
-import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.READY;
-import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.SHOWING;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyZeroInteractions;
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class MoPubInterstitialTest {
-
-    private static final String KEYWORDS_VALUE = "expected_keywords";
-    private static final String AD_UNIT_ID_VALUE = "expected_adunitid";
-    private static final String SOURCE_VALUE = "expected_source";
-    private static final String CLICKTHROUGH_URL_VALUE = "expected_clickthrough_url";
-    private Activity activity;
-    private MoPubInterstitial subject;
-    private Map<String, String> serverExtras;
-    private CustomEventInterstitialAdapter customEventInterstitialAdapter;
-    private MoPubInterstitial.InterstitialAdListener interstitialAdListener;
-    private MoPubInterstitial.MoPubInterstitialView interstitialView;
-    private AdViewController adViewController;
-    private String customEventClassName;
-
-    @Before
-    public void setUp() throws Exception {
-        activity = Robolectric.buildActivity(Activity.class).create().get();
-        subject = new MoPubInterstitial(activity, AD_UNIT_ID_VALUE);
-        interstitialAdListener = mock(MoPubInterstitial.InterstitialAdListener.class);
-        subject.setInterstitialAdListener(interstitialAdListener);
-
-        interstitialView = mock(MoPubInterstitial.MoPubInterstitialView.class);
-
-        customEventClassName = "class name";
-        serverExtras = new HashMap<String, String>();
-        serverExtras.put("testExtra", "class data");
-
-        customEventInterstitialAdapter = TestCustomEventInterstitialAdapterFactory.getSingletonMock();
-        reset(customEventInterstitialAdapter);
-        adViewController = TestAdViewControllerFactory.getSingletonMock();
-    }
-
-    @Test
-    public void forceRefresh_shouldResetInterstitialViewAndMarkNotDestroyed() throws Exception {
-        subject.setInterstitialView(interstitialView);
-        subject.onCustomEventInterstitialLoaded();
-        subject.setCurrentInterstitialState(READY);
-        subject.forceRefresh();
-
-        assertThat(subject.isReady()).isFalse();
-        assertThat(subject.isDestroyed()).isFalse();
-        verify(interstitialView).forceRefresh();
-    }
-
-    @Test
-    public void setKeywordsTest() throws Exception {
-        subject.setInterstitialView(interstitialView);
-        String keywords = "these_are_keywords";
-
-        subject.setKeywords(keywords);
-        verify(interstitialView).setKeywords(eq(keywords));
-    }
-    @Test
-    public void getKeywordsTest() throws Exception {
-        subject.setInterstitialView(interstitialView);
-
-        subject.getKeywords();
-        verify(interstitialView).getKeywords();
-    }
-
-    @Test
-    public void setTestingTest() throws Exception {
-        subject.setInterstitialView(interstitialView);
-        subject.setTesting(true);
-        verify(interstitialView).setTesting(eq(true));
-    }
-
-    @Test
-    public void getInterstitialAdListenerTest() throws Exception {
-        interstitialAdListener = mock(MoPubInterstitial.InterstitialAdListener.class);
-        subject.setInterstitialAdListener(interstitialAdListener);
-        assertThat(subject.getInterstitialAdListener()).isSameAs(interstitialAdListener);
-    }
-
-    @Test
-    public void getTestingTest() throws Exception {
-        subject.setInterstitialView(interstitialView);
-        subject.getTesting();
-        verify(interstitialView).getTesting();
-    }
-
-    @Test
-    public void setLocalExtrasTest() throws Exception {
-        subject.setInterstitialView(interstitialView);
-
-        Map<String,Object> localExtras = new HashMap<String, Object>();
-        localExtras.put("guy", new Activity());
-        localExtras.put("other guy", new BigDecimal(27f));
-
-        subject.setLocalExtras(localExtras);
-        verify(interstitialView).setLocalExtras(eq(localExtras));
-    }
-
-    @Test
-    public void loadCustomEvent_shouldCreateAndLoadCustomEventInterstitialAdapter() throws Exception {
-        MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = subject.new MoPubInterstitialView(activity);
-        moPubInterstitialView.loadCustomEvent(customEventClassName, serverExtras);
-
-        assertThat(TestCustomEventInterstitialAdapterFactory.getLatestMoPubInterstitial()).isSameAs(subject);
-        assertThat(TestCustomEventInterstitialAdapterFactory.getLatestClassName()).isEqualTo("class name");
-        assertThat(TestCustomEventInterstitialAdapterFactory.getLatestServerExtras().get("testExtra")).isEqualTo("class data");
-    }
-
-    @Test
-    public void onCustomEventInterstitialLoaded_shouldNotifyListener() throws Exception {
-        subject.setInterstitialView(interstitialView);
-
-        subject.onCustomEventInterstitialLoaded();
-        verify(interstitialAdListener).onInterstitialLoaded(eq(subject));
-
-        verify(interstitialView, never()).trackImpression();
-    }
-
-    @Test
-    public void onCustomEventInterstitialLoaded_whenInterstitialAdListenerIsNull_shouldNotNotifyListenerOrTrackImpression() throws Exception {
-        subject.setInterstitialView(interstitialView);
-        subject.setInterstitialAdListener(null);
-
-        subject.onCustomEventInterstitialLoaded();
-
-        verify(interstitialView, never()).trackImpression();
-        verify(interstitialAdListener, never()).onInterstitialLoaded(eq(subject));
-    }
-
-    @Test
-    public void onCustomEventInterstitialFailed_shouldLoadFailUrl() throws Exception {
-        subject.setInterstitialView(interstitialView);
-
-        subject.onCustomEventInterstitialFailed(INTERNAL_ERROR);
-
-        verify(interstitialView).loadFailUrl(INTERNAL_ERROR);
-    }
-
-    @Test
-    public void onCustomEventInterstitialShown_shouldTrackImpressionAndNotifyListener() throws Exception {
-        subject.setInterstitialView(interstitialView);
-        subject.onCustomEventInterstitialShown();
-
-        verify(interstitialView).trackImpression();
-        verify(interstitialAdListener).onInterstitialShown(eq(subject));
-    }
-
-    @Test
-    public void onCustomEventInterstitialShown_whenInterstitialAdListenerIsNull_shouldNotNotifyListener() throws Exception {
-        subject.setInterstitialAdListener(null);
-        subject.onCustomEventInterstitialShown();
-        verify(interstitialAdListener, never()).onInterstitialShown(eq(subject));
-    }
-
-    @Test
-    public void onCustomEventInterstitialClicked_shouldRegisterClickAndNotifyListener() throws Exception {
-        subject.setInterstitialView(interstitialView);
-
-        subject.onCustomEventInterstitialClicked();
-
-        verify(interstitialView).registerClick();
-        verify(interstitialAdListener).onInterstitialClicked(eq(subject));
-    }
-
-    @Test
-    public void onCustomEventInterstitialClicked_whenInterstitialAdListenerIsNull_shouldNotNotifyListener() throws Exception {
-        subject.setInterstitialAdListener(null);
-
-        subject.onCustomEventInterstitialClicked();
-
-        verify(interstitialAdListener, never()).onInterstitialClicked(eq(subject));
-    }
-
-    @Test
-    public void onCustomEventInterstitialDismissed_shouldNotifyListener() throws Exception {
-        subject.onCustomEventInterstitialDismissed();
-
-        verify(interstitialAdListener).onInterstitialDismissed(eq(subject));
-    }
-
-    @Test
-    public void onCustomEventInterstitialDismissed_whenInterstitialAdListenerIsNull_shouldNotNotifyListener() throws Exception {
-        subject.setInterstitialAdListener(null);
-        subject.onCustomEventInterstitialDismissed();
-        verify(interstitialAdListener, never()).onInterstitialDismissed(eq(subject));
-    }
-
-    @Test
-    public void destroy_shouldPreventOnCustomEventInterstitialLoadedNotification() throws Exception {
-        subject.destroy();
-
-        subject.onCustomEventInterstitialLoaded();
-
-        verify(interstitialAdListener, never()).onInterstitialLoaded(eq(subject));
-    }
-
-    @Test
-    public void destroy_shouldPreventOnCustomEventInterstitialFailedNotification() throws Exception {
-        subject.setInterstitialView(interstitialView);
-        subject.destroy();
-
-        subject.onCustomEventInterstitialFailed(UNSPECIFIED);
-
-        verify(interstitialView, never()).loadFailUrl(UNSPECIFIED);
-    }
-
-    @Test
-    public void destroy_shouldPreventOnCustomEventInterstitialClickedFromRegisteringClick() throws Exception {
-        subject.setInterstitialView(interstitialView);
-        subject.destroy();
-
-        subject.onCustomEventInterstitialClicked();
-
-        verify(interstitialView, never()).registerClick();
-    }
-
-    @Test
-    public void destroy_shouldPreventOnCustomEventShownNotification() throws Exception {
-        subject.destroy();
-
-        subject.onCustomEventInterstitialShown();
-
-        verify(interstitialAdListener, never()).onInterstitialShown(eq(subject));
-    }
-
-    @Test
-    public void destroy_shouldPreventOnCustomEventInterstitialDismissedNotification() throws Exception {
-        subject.destroy();
-
-        subject.onCustomEventInterstitialDismissed();
-
-        verify(interstitialAdListener, never()).onInterstitialDismissed(eq(subject));
-    }
-
-    @Test
-    public void newlyCreated_shouldNotBeReadyAndNotShow() throws Exception {
-        assertShowsCustomEventInterstitial(false);
-    }
-
-    @Test
-    public void loadingCustomEventInterstitial_shouldBecomeReadyToShowCustomEventAd() throws Exception {
-        subject.load();
-        subject.onCustomEventInterstitialLoaded();
-
-        assertShowsCustomEventInterstitial(true);
-    }
-
-    @Ignore("pending")
-    @Test
-    public void dismissingHtmlInterstitial_shouldNotBecomeReadyToShowHtmlAd() throws Exception {
-//        EventForwardingBroadcastReceiver broadcastReceiver = new EventForwardingBroadcastReceiver(subject.mInterstitialAdListener);
-//
-//        subject.onCustomEventInterstitialLoaded();
-//        broadcastReceiver.onHtmlInterstitialDismissed();
-//
-//        assertShowsCustomEventInterstitial(false);
-    }
-
-    @Test
-    public void failingCustomEventInterstitial_shouldNotBecomeReadyToShowCustomEventAd() throws Exception {
-        subject.onCustomEventInterstitialLoaded();
-        subject.onCustomEventInterstitialFailed(CANCELLED);
-
-        assertShowsCustomEventInterstitial(false);
-    }
-
-    @Test
-    public void dismissingCustomEventInterstitial_shouldNotBecomeReadyToShowCustomEventAd() throws Exception {
-        subject.onCustomEventInterstitialLoaded();
-        subject.onCustomEventInterstitialDismissed();
-
-        assertShowsCustomEventInterstitial(false);
-    }
-
-    @Test
-    public void loadCustomEvent_shouldInitializeCustomEventInterstitialAdapter() throws Exception {
-        MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = subject.new MoPubInterstitialView(activity);
-
-        serverExtras.put("testExtra", "data");
-        moPubInterstitialView.loadCustomEvent("name", serverExtras);
-
-        assertThat(TestCustomEventInterstitialAdapterFactory.getLatestMoPubInterstitial()).isEqualTo(subject);
-        assertThat(TestCustomEventInterstitialAdapterFactory.getLatestClassName()).isEqualTo("name");
-        assertThat(TestCustomEventInterstitialAdapterFactory.getLatestServerExtras().get("testExtra")).isEqualTo("data");
-
-        verify(customEventInterstitialAdapter).setAdapterListener(eq(subject));
-        verify(customEventInterstitialAdapter).loadInterstitial();
-    }
-
-    @Test
-    public void loadCustomEvent_whenParamsMapIsNull_shouldCallLoadFailUrl() throws Exception {
-        MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = subject.new MoPubInterstitialView(activity);
-
-        moPubInterstitialView.loadCustomEvent(null, null);
-
-        verify(adViewController).loadFailUrl(eq(ADAPTER_NOT_FOUND));
-        verify(customEventInterstitialAdapter, never()).invalidate();
-        verify(customEventInterstitialAdapter, never()).loadInterstitial();
-    }
-
-    @Test
-    public void adFailed_shouldNotifyInterstitialAdListener() throws Exception {
-        MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = subject.new MoPubInterstitialView(activity);
-        moPubInterstitialView.adFailed(CANCELLED);
-
-        verify(interstitialAdListener).onInterstitialFailed(eq(subject), eq(CANCELLED));
-    }
-
-    @Test
-    public void attemptStateTransition_withIdleStartState() {
-        /**
-         * IDLE can go to LOADING when load or forceRefresh is called. IDLE can also go to
-         * DESTROYED if the interstitial view is destroyed.
-         */
-
-        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(IDLE);
-        boolean stateDidChange = subject.attemptStateTransition(IDLE, false);
-        assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(IDLE);
-        verifyZeroInteractions(customEventInterstitialAdapter);
-
-        resetMoPubInterstitial(IDLE);
-        stateDidChange = subject.attemptStateTransition(IDLE, true);
-        assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(IDLE);
-        verifyZeroInteractions(customEventInterstitialAdapter);
-
-        resetMoPubInterstitial(IDLE);
-        stateDidChange = subject.attemptStateTransition(LOADING, false);
-        assertThat(stateDidChange).isTrue();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(LOADING);
-        verify(customEventInterstitialAdapter).invalidate();
-        verify(interstitialView).loadAd();
-
-        resetMoPubInterstitial(IDLE);
-        stateDidChange = subject.attemptStateTransition(LOADING, true);
-        assertThat(stateDidChange).isTrue();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(LOADING);
-        verify(customEventInterstitialAdapter).invalidate();
-        verify(interstitialView).forceRefresh();
-
-        resetMoPubInterstitial(IDLE);
-        stateDidChange = subject.attemptStateTransition(READY, false);
-        assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(IDLE);
-        verifyZeroInteractions(customEventInterstitialAdapter);
-
-        resetMoPubInterstitial(IDLE);
-        stateDidChange = subject.attemptStateTransition(READY, true);
-        assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(IDLE);
-        verifyZeroInteractions(customEventInterstitialAdapter);
-
-        resetMoPubInterstitial(IDLE);
-        stateDidChange = subject.attemptStateTransition(SHOWING, false);
-        assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(IDLE);
-        verifyZeroInteractions(customEventInterstitialAdapter);
-
-        resetMoPubInterstitial(IDLE);
-        stateDidChange = subject.attemptStateTransition(SHOWING, true);
-        assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(IDLE);
-        verifyZeroInteractions(customEventInterstitialAdapter);
-
-        resetMoPubInterstitial(IDLE);
-        stateDidChange = subject.attemptStateTransition(DESTROYED, false);
-        assertThat(stateDidChange).isTrue();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
-        verify(customEventInterstitialAdapter).invalidate();
-
-        resetMoPubInterstitial(IDLE);
-        stateDidChange = subject.attemptStateTransition(DESTROYED, true);
-        assertThat(stateDidChange).isTrue();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
-        verify(customEventInterstitialAdapter).invalidate();
-    }
-
-    @Test
-    public void attemptStateTransition_withLoadingStartState() {
-        /**
-         * LOADING can go to IDLE if a force refresh happens. LOADING can also go into IDLE if an
-         * ad failed to load. LOADING should go to READY when the interstitial is done loading.
-         * LOADING can go to DESTROYED if the interstitial view is destroyed.
-         */
-
-        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(LOADING);
-        boolean stateDidChange = subject.attemptStateTransition(IDLE, false);
-        assertThat(stateDidChange).isTrue();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(IDLE);
-        verify(customEventInterstitialAdapter).invalidate();
-
-        resetMoPubInterstitial(LOADING);
-        stateDidChange = subject.attemptStateTransition(IDLE, true);
-        assertThat(stateDidChange).isTrue();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(IDLE);
-        verify(customEventInterstitialAdapter).invalidate();
-
-        resetMoPubInterstitial(LOADING);
-        stateDidChange = subject.attemptStateTransition(LOADING, false);
-        assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(LOADING);
-        verifyZeroInteractions(customEventInterstitialAdapter);
-
-        resetMoPubInterstitial(LOADING);
-        stateDidChange = subject.attemptStateTransition(LOADING, true);
-        assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(LOADING);
-        verifyZeroInteractions(customEventInterstitialAdapter);
-
-        resetMoPubInterstitial(LOADING);
-        stateDidChange = subject.attemptStateTransition(READY, false);
-        assertThat(stateDidChange).isTrue();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(READY);
-        verifyZeroInteractions(customEventInterstitialAdapter);
-
-        resetMoPubInterstitial(LOADING);
-        stateDidChange = subject.attemptStateTransition(READY, true);
-        assertThat(stateDidChange).isTrue();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(READY);
-        verifyZeroInteractions(customEventInterstitialAdapter);
-
-        resetMoPubInterstitial(LOADING);
-        stateDidChange = subject.attemptStateTransition(SHOWING, false);
-        assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(LOADING);
-        verifyZeroInteractions(customEventInterstitialAdapter);
-
-        resetMoPubInterstitial(LOADING);
-        stateDidChange = subject.attemptStateTransition(SHOWING, true);
-        assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(LOADING);
-        verifyZeroInteractions(customEventInterstitialAdapter);
-
-        resetMoPubInterstitial(LOADING);
-        stateDidChange = subject.attemptStateTransition(DESTROYED, false);
-        assertThat(stateDidChange).isTrue();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
-        verify(customEventInterstitialAdapter).invalidate();
-
-        resetMoPubInterstitial(LOADING);
-        stateDidChange = subject.attemptStateTransition(DESTROYED, true);
-        assertThat(stateDidChange).isTrue();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
-        verify(customEventInterstitialAdapter).invalidate();
-    }
-
-    @Test
-    public void attemptStateTransition_withReadyStartState() {
-        /**
-         * This state should succeed for going to SHOWING. It is also possible to force refresh from
-         * here into IDLE. Also, READY can go into DESTROYED.
-         */
-
-        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(READY);
-        boolean stateDidChange = subject.attemptStateTransition(IDLE, false);
-        assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(READY);
-        verifyZeroInteractions(customEventInterstitialAdapter);
-
-        resetMoPubInterstitial(READY);
-        stateDidChange = subject.attemptStateTransition(IDLE, true);
-        assertThat(stateDidChange).isTrue();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(IDLE);
-        verify(customEventInterstitialAdapter).invalidate();
-
-        resetMoPubInterstitial(READY);
-        stateDidChange = subject.attemptStateTransition(LOADING, false);
-        assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(READY);
-        verifyZeroInteractions(customEventInterstitialAdapter);
-        verify(interstitialAdListener).onInterstitialLoaded(subject);
-
-        resetMoPubInterstitial(READY);
-        stateDidChange = subject.attemptStateTransition(LOADING, true);
-        assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(READY);
-        verifyZeroInteractions(customEventInterstitialAdapter);
-        verify(interstitialAdListener).onInterstitialLoaded(subject);
-
-        resetMoPubInterstitial(READY);
-        stateDidChange = subject.attemptStateTransition(READY, false);
-        assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(READY);
-        verifyZeroInteractions(customEventInterstitialAdapter);
-
-        resetMoPubInterstitial(READY);
-        stateDidChange = subject.attemptStateTransition(READY, true);
-        assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(READY);
-        verifyZeroInteractions(customEventInterstitialAdapter);
-
-        resetMoPubInterstitial(READY);
-        stateDidChange = subject.attemptStateTransition(SHOWING, false);
-        assertThat(stateDidChange).isTrue();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(SHOWING);
-        verify(customEventInterstitialAdapter).showInterstitial();
-
-        resetMoPubInterstitial(READY);
-        stateDidChange = subject.attemptStateTransition(SHOWING, true);
-        assertThat(stateDidChange).isTrue();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(SHOWING);
-        verify(customEventInterstitialAdapter).showInterstitial();
-
-        resetMoPubInterstitial(READY);
-        stateDidChange = subject.attemptStateTransition(DESTROYED, false);
-        assertThat(stateDidChange).isTrue();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
-        verify(customEventInterstitialAdapter).invalidate();
-
-        resetMoPubInterstitial(READY);
-        stateDidChange = subject.attemptStateTransition(DESTROYED, true);
-        assertThat(stateDidChange).isTrue();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
-        verify(customEventInterstitialAdapter).invalidate();
-    }
-
-    @Test
-    public void attemptStateTransition_withShowingStartState() {
-        /**
-         * When the interstitial is dismissed, this should transition to IDLE. Otherwise, block
-         * other transitions except to DESTROYED. You cannot force refresh while an interstitial
-         * is showing.
-         */
-        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(SHOWING);
-        boolean stateDidChange = subject.attemptStateTransition(IDLE, false);
-        assertThat(stateDidChange).isTrue();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(IDLE);
-        verify(customEventInterstitialAdapter).invalidate();
-
-        resetMoPubInterstitial(SHOWING);
-        stateDidChange = subject.attemptStateTransition(IDLE, true);
-        assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(SHOWING);
-        verifyZeroInteractions(customEventInterstitialAdapter);
-
-        resetMoPubInterstitial(SHOWING);
-        stateDidChange = subject.attemptStateTransition(LOADING, false);
-        assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(SHOWING);
-        verifyZeroInteractions(customEventInterstitialAdapter);
-
-        resetMoPubInterstitial(SHOWING);
-        stateDidChange = subject.attemptStateTransition(LOADING, true);
-        assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(SHOWING);
-        verifyZeroInteractions(customEventInterstitialAdapter);
-
-        resetMoPubInterstitial(SHOWING);
-        stateDidChange = subject.attemptStateTransition(READY, false);
-        assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(SHOWING);
-        verifyZeroInteractions(customEventInterstitialAdapter);
-
-        resetMoPubInterstitial(SHOWING);
-        stateDidChange = subject.attemptStateTransition(READY, true);
-        assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(SHOWING);
-        verifyZeroInteractions(customEventInterstitialAdapter);
-
-        resetMoPubInterstitial(SHOWING);
-        stateDidChange = subject.attemptStateTransition(SHOWING, false);
-        assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(SHOWING);
-        verifyZeroInteractions(customEventInterstitialAdapter);
-
-        resetMoPubInterstitial(SHOWING);
-        stateDidChange = subject.attemptStateTransition(SHOWING, true);
-        assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(SHOWING);
-        verifyZeroInteractions(customEventInterstitialAdapter);
-
-        resetMoPubInterstitial(SHOWING);
-        stateDidChange = subject.attemptStateTransition(DESTROYED, false);
-        assertThat(stateDidChange).isTrue();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
-        verify(customEventInterstitialAdapter).invalidate();
-
-        resetMoPubInterstitial(SHOWING);
-        stateDidChange = subject.attemptStateTransition(DESTROYED, true);
-        assertThat(stateDidChange).isTrue();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
-        verify(customEventInterstitialAdapter).invalidate();
-    }
-    @Test
-    public void attemptStateTransition_withDestroyedStartState() {
-        // All state transitions should fail if starting from a destroyed state
-        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setCurrentInterstitialState(DESTROYED);
-        boolean stateDidChange = subject.attemptStateTransition(IDLE, false);
-        assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
-        verifyZeroInteractions(customEventInterstitialAdapter);
-
-        resetMoPubInterstitial(DESTROYED);
-        stateDidChange = subject.attemptStateTransition(IDLE, true);
-        assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
-        verifyZeroInteractions(customEventInterstitialAdapter);
-
-        resetMoPubInterstitial(DESTROYED);
-        stateDidChange = subject.attemptStateTransition(LOADING, false);
-        assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
-        verifyZeroInteractions(customEventInterstitialAdapter);
-
-        resetMoPubInterstitial(DESTROYED);
-        stateDidChange = subject.attemptStateTransition(LOADING, true);
-        assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
-        verifyZeroInteractions(customEventInterstitialAdapter);
-
-        resetMoPubInterstitial(DESTROYED);
-        stateDidChange = subject.attemptStateTransition(READY, false);
-        assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
-        verifyZeroInteractions(customEventInterstitialAdapter);
-
-        resetMoPubInterstitial(DESTROYED);
-        stateDidChange = subject.attemptStateTransition(READY, true);
-        assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
-        verifyZeroInteractions(customEventInterstitialAdapter);
-
-        resetMoPubInterstitial(DESTROYED);
-        stateDidChange = subject.attemptStateTransition(LOADING, false);
-        assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
-        verifyZeroInteractions(customEventInterstitialAdapter);
-
-        resetMoPubInterstitial(DESTROYED);
-        stateDidChange = subject.attemptStateTransition(LOADING, true);
-        assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
-        verifyZeroInteractions(customEventInterstitialAdapter);
-
-        resetMoPubInterstitial(DESTROYED);
-        stateDidChange = subject.attemptStateTransition(DESTROYED, false);
-        assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
-        verifyZeroInteractions(customEventInterstitialAdapter);
-
-        resetMoPubInterstitial(DESTROYED);
-        stateDidChange = subject.attemptStateTransition(DESTROYED, true);
-        assertThat(stateDidChange).isFalse();
-        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
-    }
-
-    private void loadCustomEvent() {
-        MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = subject.new MoPubInterstitialView(activity);
-
-        serverExtras.put(CUSTOM_EVENT_DATA.getKey(), "data");
-        moPubInterstitialView.loadCustomEvent("name", serverExtras);
-    }
-
-    private void assertShowsCustomEventInterstitial(boolean shouldBeReady) {
-        MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = subject.new MoPubInterstitialView(activity);
-        moPubInterstitialView.loadCustomEvent(customEventClassName, serverExtras);
-
-        assertThat(subject.isReady()).isEqualTo(shouldBeReady);
-        assertThat(subject.show()).isEqualTo(shouldBeReady);
-
-        if (shouldBeReady) {
-            verify(customEventInterstitialAdapter).showInterstitial();
-        } else {
-            verify(customEventInterstitialAdapter, never()).showInterstitial();
-        }
-    }
-
-    private void resetMoPubInterstitial(
-            @NonNull final MoPubInterstitial.InterstitialState interstitialState) {
-        reset(customEventInterstitialAdapter, interstitialAdListener, interstitialView);
-        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
-        subject.setInterstitialView(interstitialView);
-        subject.setCurrentInterstitialState(interstitialState);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedPlayableTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedPlayableTest.java
deleted file mode 100644
index 2e82772b..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedPlayableTest.java
+++ /dev/null
@@ -1,93 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-
-import com.mopub.common.DataKeys;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mraid.RewardedMraidInterstitial;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import java.util.HashMap;
-import java.util.Map;
-import java.util.TreeMap;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.verifyZeroInteractions;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class MoPubRewardedPlayableTest {
-    private Activity activity;
-    private MoPubRewardedPlayable subject;
-
-    @Mock private RewardedMraidInterstitial mockRewardedMraidInterstitial;
-
-    @Before
-    public void setup() {
-        activity = Robolectric.buildActivity(Activity.class).create().get();
-        MoPubRewardedVideoManager.init(activity);
-
-        subject = new MoPubRewardedPlayable();
-    }
-
-    @Test
-    public void onInvalidate_withRewardedMraidActivity_shouldInvalidateRewardedMraidActivity() {
-        subject.setRewardedMraidInterstitial(mockRewardedMraidInterstitial);
-
-        subject.onInvalidate();
-
-        verify(mockRewardedMraidInterstitial).onInvalidate();
-    }
-
-    @Test
-    public void loadWithSdkInitialized_withCorrectLocalExtras_shouldLoadVastVideoInterstitial() throws Exception {
-        subject.setRewardedMraidInterstitial(mockRewardedMraidInterstitial);
-        final Map<String, Object> localExtras = new TreeMap<String, Object>();
-        final Map<String, String> serverExtras = new HashMap<String, String>();
-        localExtras.put(DataKeys.REWARDED_AD_CURRENCY_NAME_KEY, "currencyName");
-        localExtras.put(DataKeys.REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY, "10");
-        localExtras.put(DataKeys.HTML_RESPONSE_BODY_KEY, "body");
-        localExtras.put(DataKeys.REWARDED_AD_DURATION_KEY, "30");
-        localExtras.put(DataKeys.SHOULD_REWARD_ON_CLICK_KEY, "0");
-
-        subject.loadWithSdkInitialized(activity, localExtras, serverExtras);
-
-        verify(mockRewardedMraidInterstitial).loadInterstitial(eq(activity),
-                any(CustomEventInterstitial.CustomEventInterstitialListener.class), eq(localExtras),
-                eq(serverExtras));
-        verifyNoMoreInteractions(mockRewardedMraidInterstitial);
-        assertThat(subject.getRewardedAdCurrencyName()).isEqualTo("currencyName");
-        assertThat(subject.getRewardedAdCurrencyAmount()).isEqualTo(10);
-    }
-
-    @Test
-    public void show_withMraidLoaded_shouldShowRewardedMraidInterstitial() {
-        subject.setRewardedMraidInterstitial(mockRewardedMraidInterstitial);
-        subject.setIsLoaded(true);
-
-        subject.show();
-
-        verify(mockRewardedMraidInterstitial).showInterstitial();
-        verifyNoMoreInteractions(mockRewardedMraidInterstitial);
-    }
-
-    @Test
-    public void showVideo_withVideoNotLoaded_shouldDoNothing() {
-        subject.setRewardedMraidInterstitial(mockRewardedMraidInterstitial);
-        subject.setIsLoaded(false);
-
-        subject.show();
-
-        verifyZeroInteractions(mockRewardedMraidInterstitial);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
deleted file mode 100644
index 05b8c9fe..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
+++ /dev/null
@@ -1,594 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.net.Uri;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import com.mopub.common.AdType;
-import com.mopub.common.DataKeys;
-import com.mopub.common.LifecycleListener;
-import com.mopub.common.MoPubReward;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.network.AdRequest;
-import com.mopub.network.AdResponse;
-import com.mopub.network.MoPubRequestQueue;
-import com.mopub.network.Networking;
-import com.mopub.volley.Request;
-import com.mopub.volley.VolleyError;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.ArgumentMatcher;
-import org.mockito.Mock;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowLooper;
-
-import java.util.Map;
-import java.util.Set;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.argThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.verifyZeroInteractions;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class
-        MoPubRewardedVideoManagerTest {
-
-    public static final String MOPUB_REWARD = "mopub_reward";
-
-    @Mock
-    MoPubRequestQueue mockRequestQueue;
-    @Mock
-    MoPubRewardedVideoListener mockVideoListener;
-
-    AdRequest.Listener requestListener;
-    private AdRequest request;
-    private Activity mActivity;
-
-    @Before
-    public void setup() {
-        mActivity = Robolectric.buildActivity(Activity.class).create().get();
-        MoPubRewardedVideoManager.init(mActivity);
-        MoPubRewardedVideoManager.setVideoListener(mockVideoListener);
-
-        when(mockRequestQueue.add(any(AdRequest.class))).then(new Answer<Object>() {
-            @Override
-            public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {
-                request = ((AdRequest) invocationOnMock.getArguments()[0]);
-                requestListener = request.getListener();
-                return null;
-            }
-        });
-
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-    }
-
-    @After
-    public void tearDown() {
-        // Unpause the main looper in case a test terminated while the looper was paused.
-        ShadowLooper.unPauseMainLooper();
-        MoPubRewardedVideoManager.getRewardedAdData().clear();
-        MoPubRewardedVideoManager.getAdRequestStatusMapping().clearMapping();
-    }
-
-    @Test
-    public void loadVideo_withRequestParameters_shouldGenerateUrlWithKeywords() {
-        // Robolectric executes its handlers immediately, so if we want the async behavior we see
-        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
-        ShadowLooper.pauseMainLooper();
-
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", new MoPubRewardedVideoManager.RequestParameters("nonsense;garbage;keywords"));
-
-        verify(mockRequestQueue).add(argThat(new RequestUrlContains(Uri.encode("nonsense;garbage;keywords"))));
-
-        // Finish the request
-        requestListener.onErrorResponse(new VolleyError("end test"));
-        ShadowLooper.unPauseMainLooper();
-    }
-
-    @Test
-    public void loadVideo_withCustomerIdInRequestParameters_shouldSetCustomerId() {
-        // Robolectric executes its handlers immediately, so if we want the async behavior we see
-        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
-        ShadowLooper.pauseMainLooper();
-
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", new MoPubRewardedVideoManager.RequestParameters("keywords", null, "testCustomerId"));
-
-        assertThat(MoPubRewardedVideoManager.getRewardedAdData().getCustomerId()).isEqualTo("testCustomerId");
-
-        // Finish the request
-        requestListener.onErrorResponse(new VolleyError("end test"));
-        ShadowLooper.unPauseMainLooper();
-    }
-
-    @Test
-    public void loadVideo_withVideoAlreadyShowing_shouldNotLoadVideo() {
-        // To simulate that a video is showing
-        MoPubRewardedVideoManager.getRewardedAdData().setCurrentlyShowingAdUnitId("testAdUnit");
-
-        // Robolectric executes its handlers immediately, so if we want the async behavior we see
-        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
-        ShadowLooper.pauseMainLooper();
-
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-
-        ShadowLooper.unPauseMainLooper();
-
-        verifyZeroInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void callbackMethods_withNullListener_shouldNotError() {
-        // Clients can set RVM null.
-        MoPubRewardedVideoManager.setVideoListener(null);
-
-        AdResponse testResponse = new AdResponse.Builder()
-                .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
-                .setAdType(AdType.CUSTOM)
-                .build();
-
-        // Robolectric executes its handlers immediately, so if we want the async behavior we see
-        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
-        ShadowLooper.pauseMainLooper();
-
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        // Triggers a call to MoPubRewardedVideoManager.onRewardedVideoLoadSuccess
-        requestListener.onSuccess(testResponse);
-
-        ShadowLooper.unPauseMainLooper();
-
-        MoPubRewardedVideoManager.onRewardedVideoClicked(TestCustomEvent.class,
-                TestCustomEvent.AD_NETWORK_ID);
-        MoPubRewardedVideoManager.onRewardedVideoStarted(TestCustomEvent.class,
-                TestCustomEvent.AD_NETWORK_ID);
-        MoPubRewardedVideoManager.onRewardedVideoClosed(TestCustomEvent.class,
-                TestCustomEvent.AD_NETWORK_ID);
-        MoPubRewardedVideoManager.onRewardedVideoCompleted(TestCustomEvent.class,
-                TestCustomEvent.AD_NETWORK_ID,
-                MoPubReward.success("test", 111));
-
-        // The test passed because none of the above calls thew an exception even though the listener is null.
-    }
-
-    @Test
-    public void onAdSuccess_noActivityFound_shouldNotCallFailUrl() {
-        AdResponse testResponse = new AdResponse.Builder()
-                .setAdType(AdType.CUSTOM)
-                .setCustomEventClassName(
-                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
-                .setFailoverUrl("fail.url")
-                .build();
-
-        MoPubRewardedVideoManager.updateActivity(null);
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        requestListener.onSuccess(testResponse);
-
-        verify(mockRequestQueue).add(any(AdRequest.class));
-        verifyNoMoreInteractions(mockRequestQueue);
-
-        // Clean up the static state we screwed up:
-        MoPubRewardedVideoManager.updateActivity(mActivity);
-    }
-
-    @Test
-    public void onAdSuccess_noCEFound_shouldCallFailCallback() throws Exception {
-        AdResponse testResponse = new AdResponse.Builder()
-                .setAdType(AdType.CUSTOM)
-                .setCustomEventClassName("doesn't_Exist")
-                .build();
-
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-
-        requestListener.onSuccess(testResponse);
-
-        verify(mockVideoListener).onRewardedVideoLoadFailure(eq("testAdUnit"),
-                eq(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR));
-        verifyNoMoreInteractions(mockVideoListener);
-    }
-
-    @Test
-    public void onAdSuccess_noCEFound_shouldLoadFailUrl() {
-        AdResponse testResponse = new AdResponse.Builder()
-                .setAdType(AdType.CUSTOM)
-                .setCustomEventClassName("doesn't_Exist")
-                .setFailoverUrl("fail.url")
-                .build();
-
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-
-        assertThat(request.getUrl()).contains("testAdUnit");
-        requestListener.onSuccess(testResponse);
-        assertThat(request.getUrl()).isEqualTo("fail.url");
-        // Clear up the static state :(
-        requestListener.onErrorResponse(new VolleyError("reset"));
-    }
-
-    @Test
-    public void onAdSuccess_shouldInstantiateCustomEvent_andLoad() {
-        AdResponse testResponse = new AdResponse.Builder()
-                .setCustomEventClassName(
-                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
-                .setAdType(AdType.CUSTOM)
-                .build();
-
-        // Robolectric executes its handlers immediately, so if we want the async behavior we see
-        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
-        ShadowLooper.pauseMainLooper();
-
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        requestListener.onSuccess(testResponse);
-
-        ShadowLooper.unPauseMainLooper();
-
-        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
-        verify(mockVideoListener).onRewardedVideoLoadSuccess(eq("testAdUnit"));
-        verifyNoMoreInteractions(mockVideoListener);
-    }
-
-    @Test
-    public void loadVideo_withCustomEventAlreadyLoaded_shouldNotLoadAnotherVideo() throws Exception {
-        final CustomEventRewardedVideo mockCustomEvent = mock(CustomEventRewardedVideo.class);
-        MoPubRewardedVideoManager.getRewardedAdData().updateAdUnitCustomEventMapping(
-                "testAdUnit", mockCustomEvent, TestCustomEvent.AD_NETWORK_ID);
-
-        AdResponse testResponse = new AdResponse.Builder()
-                .setCustomEventClassName(
-                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
-                .setAdType(AdType.CUSTOM)
-                .build();
-
-        // Robolectric executes its handlers immediately, so if we want the async behavior we see
-        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
-        ShadowLooper.pauseMainLooper();
-
-        // Load the first custom event
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        requestListener.onSuccess(testResponse);
-
-        ShadowLooper.unPauseMainLooper();
-
-        // Verify the first custom event
-        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
-        verify(mockVideoListener).onRewardedVideoLoadSuccess(eq("testAdUnit"));
-        verifyNoMoreInteractions(mockVideoListener);
-        verify(mockRequestQueue).add(any(Request.class));
-        reset(mockVideoListener);
-
-        ShadowLooper.pauseMainLooper();
-
-        // Load the second custom event
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-
-        ShadowLooper.unPauseMainLooper();
-
-        // Verify the first custom event is still available
-        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
-        verify(mockVideoListener).onRewardedVideoLoadSuccess(eq("testAdUnit"));
-        verifyNoMoreInteractions(mockVideoListener);
-        // Make sure the second load does not attempt to load another ad
-        verifyNoMoreInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void onAdSuccess_shouldHaveUniqueBroadcastIdsSetForEachCustomEvent() throws Exception {
-        AdResponse testResponse = new AdResponse.Builder()
-                .setCustomEventClassName(
-                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
-                .setAdType(AdType.CUSTOM)
-                .build();
-
-        // Robolectric executes its handlers immediately, so if we want the async behavior we see
-        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
-        ShadowLooper.pauseMainLooper();
-
-        // Load the first custom event
-        MoPubRewardedVideoManager.loadVideo("testAdUnit1", null);
-        requestListener.onSuccess(testResponse);
-
-        ShadowLooper.unPauseMainLooper();
-
-        // Get the first custom event's broadcast id
-        TestCustomEvent testCustomEvent1 = (TestCustomEvent)
-                MoPubRewardedVideoManager.getRewardedAdData().getCustomEvent("testAdUnit1");
-        Long broadcastId1 = (Long) testCustomEvent1.getLocalExtras().get(
-                DataKeys.BROADCAST_IDENTIFIER_KEY);
-        assertThat(broadcastId1).isNotNull();
-
-        ShadowLooper.pauseMainLooper();
-
-        // Load the second custom event
-        MoPubRewardedVideoManager.loadVideo("testAdUnit2", null);
-        requestListener.onSuccess(testResponse);
-
-        ShadowLooper.unPauseMainLooper();
-
-        // Get the second custom event's broadcast id
-        TestCustomEvent testCustomEvent2 = (TestCustomEvent)
-                MoPubRewardedVideoManager.getRewardedAdData().getCustomEvent("testAdUnit2");
-        Long broadcastId2 = (Long) testCustomEvent2.getLocalExtras().get(
-                DataKeys.BROADCAST_IDENTIFIER_KEY);
-        assertThat(broadcastId2).isNotNull();
-
-        // Make sure they're different
-        assertThat(broadcastId1).isNotEqualTo(broadcastId2);
-    }
-
-    @Test
-    public void onAdSuccess_shouldUpdateAdUnitRewardMapping() throws Exception {
-        AdResponse testResponse = new AdResponse.Builder()
-                .setCustomEventClassName(
-                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
-                .setAdType(AdType.CUSTOM)
-                .setRewardedVideoCurrencyName("currency_name")
-                .setRewardedVideoCurrencyAmount("123")
-                .build();
-
-        // Robolectric executes its handlers immediately, so if we want the async behavior we see
-        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
-        ShadowLooper.pauseMainLooper();
-
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        requestListener.onSuccess(testResponse);
-
-        ShadowLooper.unPauseMainLooper();
-
-        MoPubReward moPubReward =
-                MoPubRewardedVideoManager.getRewardedAdData().getMoPubReward("testAdUnit");
-        assertThat(moPubReward.getAmount()).isEqualTo(123);
-        assertThat(moPubReward.getLabel()).isEqualTo("currency_name");
-    }
-
-    @Test
-    public void playVideo_shouldSetHasVideoFalse() {
-        AdResponse testResponse = new AdResponse.Builder()
-                .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
-                .setAdType(AdType.CUSTOM)
-                .build();
-
-        // Robolectric executes its handlers immediately, so if we want the async behavior we see
-        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
-        ShadowLooper.pauseMainLooper();
-
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        requestListener.onSuccess(testResponse);
-
-        ShadowLooper.unPauseMainLooper();
-
-        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
-        MoPubRewardedVideoManager.showVideo("testAdUnit");
-        verify(mockVideoListener).onRewardedVideoLoadSuccess(eq("testAdUnit"));
-        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isFalse();
-        verify(mockVideoListener).onRewardedVideoStarted(eq("testAdUnit"));
-    }
-    
-    @Test
-    public void playVideo_whenNotHasVideo_shouldFail() {
-        AdResponse testResponse = new AdResponse.Builder()
-                .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$NoVideoCustomEvent")
-                .setAdType(AdType.CUSTOM)
-                .build();
-
-        // Robolectric executes its handlers immediately, so if we want the async behavior we see
-        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
-        ShadowLooper.pauseMainLooper();
-
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        requestListener.onSuccess(testResponse);
-
-        ShadowLooper.unPauseMainLooper();
-
-        verify(mockVideoListener).onRewardedVideoLoadFailure(eq("testAdUnit"), eq(MoPubErrorCode.NETWORK_NO_FILL));
-
-        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isFalse();
-        MoPubRewardedVideoManager.showVideo("testAdUnit");
-        verify(mockVideoListener).onRewardedVideoLoadFailure(eq("testAdUnit"), eq(MoPubErrorCode.VIDEO_NOT_AVAILABLE));
-    }
-
-    @Test
-    public void playVideo_shouldUpdateLastShownCustomEventRewardMapping() throws Exception {
-        AdResponse testResponse = new AdResponse.Builder()
-                .setCustomEventClassName(
-                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
-                .setAdType(AdType.CUSTOM)
-                .setRewardedVideoCurrencyName("currency_name")
-                .setRewardedVideoCurrencyAmount("123")
-                .build();
-
-        // Robolectric executes its handlers immediately, so if we want the async behavior we see
-        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
-        ShadowLooper.pauseMainLooper();
-
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        requestListener.onSuccess(testResponse);
-
-        ShadowLooper.unPauseMainLooper();
-
-        MoPubRewardedVideoManager.showVideo("testAdUnit");
-
-        MoPubReward moPubReward =
-                MoPubRewardedVideoManager.getRewardedAdData().getLastShownMoPubReward(TestCustomEvent.class);
-        assertThat(moPubReward.getAmount()).isEqualTo(123);
-        assertThat(moPubReward.getLabel()).isEqualTo("currency_name");
-    }
-
-    @Test
-    public void onAdFailure_shouldCallFailCallback() {
-        VolleyError e = new VolleyError("testError!");
-
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-
-        assertThat(request.getUrl()).contains("testAdUnit");
-        requestListener.onErrorResponse(e);
-        verify(mockVideoListener).onRewardedVideoLoadFailure(anyString(), any(MoPubErrorCode.class));
-        verifyNoMoreInteractions(mockVideoListener);
-    }
-
-    @Test
-    public void chooseReward_shouldReturnMoPubRewardOverNetworkReward() throws Exception {
-        MoPubReward moPubReward = MoPubReward.success(MOPUB_REWARD, 123);
-        MoPubReward networkReward = MoPubReward.success("network_reward", 456);
-
-        MoPubReward chosenReward =
-                MoPubRewardedVideoManager.chooseReward(moPubReward, networkReward);
-        assertThat(chosenReward).isEqualTo(moPubReward);
-    }
-
-    @Test
-    public void chooseReward_withNetworkRewardNotSuccessful_shouldReturnNetworkReward() throws Exception {
-        MoPubReward moPubReward = MoPubReward.success(MOPUB_REWARD, 123);
-        MoPubReward networkReward = MoPubReward.failure();
-
-        MoPubReward chosenReward =
-                MoPubRewardedVideoManager.chooseReward(moPubReward, networkReward);
-        assertThat(chosenReward).isEqualTo(networkReward);
-    }
-    
-    @Test
-    public void onRewardedVideoCompleted_withEmptyServerCompletionUrl_withCurrentlyShowingAdUnitId_shouldNotifyRewardedVideoCompletedForOneAdUnitId() {
-        MoPubReward moPubReward = MoPubReward.success(MOPUB_REWARD, 123);
-        RewardedAdData rewardedVideoData = MoPubRewardedVideoManager.getRewardedAdData();
-        rewardedVideoData.setCurrentlyShowingAdUnitId("testAdUnit1");
-        rewardedVideoData.updateAdUnitCustomEventMapping("testAdUnit1", new TestCustomEvent(),
-                TestCustomEvent.AD_NETWORK_ID);
-        rewardedVideoData.updateAdUnitCustomEventMapping("testAdUnit2", new TestCustomEvent(),
-                TestCustomEvent.AD_NETWORK_ID);
-        // Server completion url empty and custom event has no server reward set
-
-        ShadowLooper.pauseMainLooper();
-
-        MoPubRewardedVideoManager.onRewardedVideoCompleted(TestCustomEvent.class, TestCustomEvent.AD_NETWORK_ID,
-                moPubReward);
-        
-        ShadowLooper.unPauseMainLooper();
-
-        ArgumentCaptor<Set<String>> rewardedIdsCaptor = ArgumentCaptor.forClass((Class) Set.class);
-        verify(mockVideoListener).onRewardedVideoCompleted(rewardedIdsCaptor.capture(),
-                eq(moPubReward));
-        assertThat(rewardedIdsCaptor.getValue()).containsOnly("testAdUnit1");
-    }
-
-    @Test
-    public void onRewardedVideoCompleted_withEmptyServerCompletionUrl_withNoCurrentlyShowingAdUnitId_shouldNotifyRewardedVideoCompletedForAllAdUnitIds() {
-        MoPubReward moPubReward = MoPubReward.success(MOPUB_REWARD, 123);
-        RewardedAdData rewardedVideoData = MoPubRewardedVideoManager.getRewardedAdData();
-        rewardedVideoData.setCurrentlyShowingAdUnitId(null);
-        rewardedVideoData.updateAdUnitCustomEventMapping("testAdUnit1", new TestCustomEvent(),
-                TestCustomEvent.AD_NETWORK_ID);
-        rewardedVideoData.updateAdUnitCustomEventMapping("testAdUnit2", new TestCustomEvent(),
-                TestCustomEvent.AD_NETWORK_ID);
-        rewardedVideoData.updateAdUnitCustomEventMapping("testAdUnit3", new TestCustomEvent(),
-                TestCustomEvent.AD_NETWORK_ID);
-        // Server completion url empty and custom event has no server reward set
-
-        ShadowLooper.pauseMainLooper();
-
-        MoPubRewardedVideoManager.onRewardedVideoCompleted(TestCustomEvent.class, TestCustomEvent.AD_NETWORK_ID,
-                moPubReward);
-
-        ShadowLooper.unPauseMainLooper();
-
-        ArgumentCaptor<Set<String>> rewardedIdsCaptor = ArgumentCaptor.forClass((Class) Set.class);
-        verify(mockVideoListener).onRewardedVideoCompleted(rewardedIdsCaptor.capture(),
-                eq(moPubReward));
-        assertThat(rewardedIdsCaptor.getValue()).containsOnly("testAdUnit1", "testAdUnit2",
-                "testAdUnit3");
-    }
-
-    public static class TestCustomEvent extends CustomEventRewardedVideo {
-        public static final String AD_NETWORK_ID = "id!";
-
-        boolean mPlayable = false;
-        private Map<String, Object> mLocalExtras;
-
-        @Nullable
-        @Override
-        protected LifecycleListener getLifecycleListener() {
-            return null;
-        }
-
-        @NonNull
-        @Override
-        protected String getAdNetworkId() {
-            return AD_NETWORK_ID;
-        }
-
-        @Override
-        protected void onInvalidate() {
-            mPlayable = false;
-        }
-
-        @Override
-        protected boolean checkAndInitializeSdk(@NonNull final Activity launcherActivity,
-                @NonNull final Map<String, Object> localExtras,
-                @NonNull final Map<String, String> serverExtras) throws Exception {
-            return false;
-        }
-
-        @Override
-        protected void loadWithSdkInitialized(@NonNull final Activity activity,
-                @NonNull final Map<String, Object> localExtras,
-                @NonNull final Map<String, String> serverExtras) throws Exception {
-            // Do nothing because robolectric handlers execute immediately.
-            mPlayable = true;
-            MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(TestCustomEvent.class,
-                    TestCustomEvent.AD_NETWORK_ID);
-            mLocalExtras = localExtras;
-        }
-
-        @Override
-        protected boolean hasVideoAvailable() {
-            return mPlayable;
-        }
-
-        @Override
-        protected void showVideo() {
-            MoPubRewardedVideoManager.onRewardedVideoStarted(TestCustomEvent.class, TestCustomEvent.AD_NETWORK_ID);
-        }
-
-        @Nullable
-        Map<String, Object> getLocalExtras() {
-            return mLocalExtras;
-        }
-    }
-
-    public static class NoVideoCustomEvent extends TestCustomEvent {
-        @Override
-        protected void loadWithSdkInitialized(@NonNull final Activity activity,
-                @NonNull final Map<String, Object> localExtras,
-                @NonNull final Map<String, String> serverExtras) throws Exception {
-            mPlayable = false;
-            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(NoVideoCustomEvent.class, TestCustomEvent.AD_NETWORK_ID, MoPubErrorCode.NETWORK_NO_FILL);
-        }
-    }
-
-    private static class RequestUrlContains extends ArgumentMatcher<Request> {
-
-        private final String mMustContain;
-
-        RequestUrlContains(String stringToFind) {
-            mMustContain = stringToFind;
-        }
-
-        @Override
-        public boolean matches(final Object argument) {
-            return argument instanceof Request
-                    && ((Request) argument).getUrl().contains(mMustContain);
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java
deleted file mode 100644
index e449609d..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java
+++ /dev/null
@@ -1,205 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-
-import com.mopub.common.DataKeys;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import java.util.HashMap;
-import java.util.Map;
-import java.util.TreeMap;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.verifyZeroInteractions;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class MoPubRewardedVideoTest {
-
-    private Activity activity;
-    private MoPubRewardedVideo subject;
-
-    @Mock private RewardedVastVideoInterstitial mockRewardedVastVideoInterstitial;
-
-    @Before
-    public void setup() {
-        activity = Robolectric.buildActivity(Activity.class).create().get();
-        MoPubRewardedVideoManager.init(activity);
-
-        subject = new MoPubRewardedVideo();
-    }
-
-    @Test
-    public void onInvalidate_withVastVideoInterstitial_shouldInvalidateVastVideoInterstitial() {
-        subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
-
-        subject.onInvalidate();
-
-        verify(mockRewardedVastVideoInterstitial).onInvalidate();
-        verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
-    }
-
-    @Test
-    public void onInvalidate_withNullVastVideoInterstitial_shouldNotInvalidateVastVideoInterstitial() {
-        subject.onInvalidate();
-
-        verifyZeroInteractions(mockRewardedVastVideoInterstitial);
-    }
-
-    @Test
-    public void loadWithSdkInitialized_withLocalExtrasIncomplete_shouldLoadVastVideoInterstitial() throws Exception {
-        subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
-        subject.loadWithSdkInitialized(activity, new TreeMap<String, Object>(),
-                new HashMap<String, String>());
-
-        verify(mockRewardedVastVideoInterstitial).loadInterstitial(eq(activity), any(
-                        CustomEventInterstitial.CustomEventInterstitialListener.class),
-                eq(new TreeMap<String, Object>()),
-                eq(new HashMap<String, String>()));
-        verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
-        assertThat(subject.getRewardedAdCurrencyName()).isEqualTo("");
-        assertThat(subject.getRewardedAdCurrencyAmount()).isEqualTo(0);
-    }
-
-    @Test
-    public void loadWithSdkInitialized_withRewardedVideoCurrencyNameIncorrectType_shouldLoadVastVideoInterstitial_shouldSetCurrencyNameToEmptyString() throws Exception {
-        subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
-        final Map<String, Object> localExtras = new TreeMap<String, Object>();
-        localExtras.put(DataKeys.REWARDED_AD_CURRENCY_NAME_KEY, new Object());
-        localExtras.put(DataKeys.REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY, "10");
-
-        subject.loadWithSdkInitialized(activity, localExtras, new HashMap<String, String>());
-
-        verify(mockRewardedVastVideoInterstitial).loadInterstitial(eq(activity), any(
-                        CustomEventInterstitial.CustomEventInterstitialListener.class),
-                eq(localExtras),
-                eq(new HashMap<String, String>()));
-        verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
-        assertThat(subject.getRewardedAdCurrencyName()).isEqualTo("");
-        assertThat(subject.getRewardedAdCurrencyAmount()).isEqualTo(10);
-    }
-
-    @Test
-    public void loadWithSdkInitialized_withRewardedVideoCurrencyAmountIncorrectType_shouldLoadVastVideoInterstitial_shouldSetCurrencyAmountToZero() throws Exception {
-        subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
-        final Map<String, Object> localExtras = new TreeMap<String, Object>();
-        localExtras.put(DataKeys.REWARDED_AD_CURRENCY_NAME_KEY, "currencyName");
-        localExtras.put(DataKeys.REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY, new Object());
-
-        subject.loadWithSdkInitialized(activity, localExtras, new HashMap<String, String>());
-
-        verify(mockRewardedVastVideoInterstitial).loadInterstitial(eq(activity), any(
-                        CustomEventInterstitial.CustomEventInterstitialListener.class),
-                eq(localExtras),
-                eq(new HashMap<String, String>()));
-        verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
-        assertThat(subject.getRewardedAdCurrencyName()).isEqualTo("currencyName");
-        assertThat(subject.getRewardedAdCurrencyAmount()).isEqualTo(0);
-    }
-
-    @Test
-    public void loadWithSdkInitialized_withRewardedVideoCurrencyAmountNotInteger_shouldLoadVastVideoInterstitial_shouldSetCurrencyAmountToZero() throws Exception {
-        subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
-        final Map<String, Object> localExtras = new TreeMap<String, Object>();
-        localExtras.put(DataKeys.REWARDED_AD_CURRENCY_NAME_KEY, "currencyName");
-        localExtras.put(DataKeys.REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY, "foo");
-
-        subject.loadWithSdkInitialized(activity, localExtras, new HashMap<String, String>());
-
-        verify(mockRewardedVastVideoInterstitial).loadInterstitial(eq(activity), any(
-                        CustomEventInterstitial.CustomEventInterstitialListener.class),
-                eq(localExtras),
-                eq(new HashMap<String, String>()));
-        verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
-        assertThat(subject.getRewardedAdCurrencyName()).isEqualTo("currencyName");
-        assertThat(subject.getRewardedAdCurrencyAmount()).isEqualTo(0);
-    }
-
-    @Test
-    public void loadWithSdkInitialized_withRewardedVideoCurrencyAmountNegative_shouldLoadVastVideoInterstitial_shouldSetCurrencyAmountToZero() throws Exception {
-        subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
-        final Map<String, Object> localExtras = new TreeMap<String, Object>();
-        localExtras.put(DataKeys.REWARDED_AD_CURRENCY_NAME_KEY, "currencyName");
-        localExtras.put(DataKeys.REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY, "-42");
-
-        subject.loadWithSdkInitialized(activity, localExtras, new HashMap<String, String>());
-
-        verify(mockRewardedVastVideoInterstitial).loadInterstitial(eq(activity), any(
-                        CustomEventInterstitial.CustomEventInterstitialListener.class),
-                eq(localExtras),
-                eq(new HashMap<String, String>()));
-        verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
-        assertThat(subject.getRewardedAdCurrencyName()).isEqualTo("currencyName");
-        assertThat(subject.getRewardedAdCurrencyAmount()).isEqualTo(0);
-    }
-
-    @Test
-    public void loadWithSdkInitialized_withCorrectLocalExtras_shouldLoadVastVideoInterstitial() throws Exception {
-        subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
-        final Map<String, Object> localExtras = new TreeMap<String, Object>();
-        final Map<String, String> serverExtras = new HashMap<String, String>();
-        localExtras.put(DataKeys.REWARDED_AD_CURRENCY_NAME_KEY, "currencyName");
-        localExtras.put(DataKeys.REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY, "10");
-
-        subject.loadWithSdkInitialized(activity, localExtras, serverExtras);
-
-        verify(mockRewardedVastVideoInterstitial).loadInterstitial(eq(activity),
-                any(CustomEventInterstitial.CustomEventInterstitialListener.class), eq(localExtras),
-                eq(serverExtras));
-        verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
-        assertThat(subject.getRewardedAdCurrencyName()).isEqualTo("currencyName");
-        assertThat(subject.getRewardedAdCurrencyAmount()).isEqualTo(10);
-    }
-
-    @Test
-    public void loadWithSdkInitialized_withEmptyCurrencyName_withNegativeCurrencyAmount_shouldLoadVastVideoInterstitial_shouldNotChangeCurrencyName_shouldSetCurrencyAmountToZero() throws Exception {
-        // We pass whatever was sent to this custom event to the app as long as it exists, but
-        // if the currency value is negative, set it to 0
-        subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
-        final Map<String, Object> localExtras = new TreeMap<String, Object>();
-        final Map<String, String> serverExtras = new HashMap<String, String>();
-        localExtras.put(DataKeys.REWARDED_AD_CURRENCY_NAME_KEY, "");
-        localExtras.put(DataKeys.REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY, "-10");
-
-        subject.loadWithSdkInitialized(activity, localExtras, serverExtras);
-
-        verify(mockRewardedVastVideoInterstitial).loadInterstitial(eq(activity),
-                any(CustomEventInterstitial.CustomEventInterstitialListener.class), eq(localExtras),
-                eq(serverExtras));
-        verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
-        assertThat(subject.getRewardedAdCurrencyName()).isEqualTo("");
-        assertThat(subject.getRewardedAdCurrencyAmount()).isEqualTo(0);
-    }
-
-    @Test
-    public void showVideo_withVideoLoaded_shouldShowVastVideoInterstitial() {
-        subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
-        subject.setIsLoaded(true);
-
-        subject.show();
-
-        verify(mockRewardedVastVideoInterstitial).showInterstitial();
-        verifyNoMoreInteractions(mockRewardedVastVideoInterstitial);
-    }
-
-    @Test
-    public void showVideo_withVideoNotLoaded_shouldDoNothing() {
-        subject.setRewardedVastVideoInterstitial(mockRewardedVastVideoInterstitial);
-        subject.setIsLoaded(false);
-
-        subject.show();
-
-        verifyZeroInteractions(mockRewardedVastVideoInterstitial);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubShadowMediaPlayer.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubShadowMediaPlayer.java
deleted file mode 100644
index eb0820e6..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubShadowMediaPlayer.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package com.mopub.mobileads;
-
-import android.media.MediaPlayer;
-
-import org.robolectric.annotation.Implements;
-import org.robolectric.shadows.ShadowMediaPlayer;
-import org.robolectric.shadows.util.DataSource;
-
-/**
- */
-@Implements(MediaPlayer.class)
-public class MoPubShadowMediaPlayer extends ShadowMediaPlayer {
-
-    /*
-     * Override to avoid the "no setup extension" that Robo 3.0 ShadowMediaPlayer gives you.
-     */
-    @Override
-    public void doSetDataSource(final DataSource dataSource) {
-        MediaInfo stubMediaInfo = new MediaInfo(123, 123);
-        if (getMediaInfo(dataSource) == null) {
-            addMediaInfo(dataSource, stubMediaInfo);
-        }
-        super.doSetDataSource(dataSource);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
deleted file mode 100644
index 0b440d17..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
+++ /dev/null
@@ -1,260 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.view.View;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.Reflection;
-import com.mopub.common.util.test.support.ShadowReflection;
-import com.mopub.mobileads.test.support.TestAdViewControllerFactory;
-import com.mopub.mobileads.test.support.TestCustomEventBannerAdapterFactory;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowApplication;
-
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class, shadows = {ShadowReflection.class})
-public class MoPubViewTest {
-    private MoPubView subject;
-    private Map<String,String> paramsMap = new HashMap<String, String>();
-    private CustomEventBannerAdapter customEventBannerAdapter;
-    private AdViewController adViewController;
-    private Context context;
-
-    @Before
-    public void setup() {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        subject = new MoPubView(context);
-        customEventBannerAdapter = TestCustomEventBannerAdapterFactory.getSingletonMock();
-        reset(customEventBannerAdapter);
-        adViewController = TestAdViewControllerFactory.getSingletonMock();
-    }
-
-    @After
-    public void tearDown() {
-        ShadowReflection.reset();
-    }
-
-    @Test
-    public void screenStateBroadcastReceiver_withActionUserPresent_shouldUnpauseRefresh() throws Exception {
-        broadcastIntent(new Intent(Intent.ACTION_USER_PRESENT));
-
-        verify(adViewController).unpauseRefresh();
-    }
-
-    @Test
-    public void screenStateBroadcastReceiver_withActionScreenOff_shouldPauseRefersh() throws Exception {
-        broadcastIntent(new Intent(Intent.ACTION_SCREEN_OFF));
-
-        verify(adViewController).pauseRefresh();
-    }
-
-    @Test
-    public void screenStateBroadcastReceiver_withNullIntent_shouldDoNothing() throws Exception {
-        broadcastIntent(null);
-
-        verify(adViewController, never()).pauseRefresh();
-        verify(adViewController, never()).unpauseRefresh();
-    }
-
-    @Test
-    public void screenStateBroadcastReceiver_withRandomIntent_shouldDoNothing() throws Exception {
-        broadcastIntent(new Intent(Intent.ACTION_BATTERY_LOW));
-
-        verify(adViewController, never()).pauseRefresh();
-        verify(adViewController, never()).unpauseRefresh();
-    }
-
-    @Test
-    public void screenStateBroadcastReceiver_whenAdInBackground_shouldDoNothing() throws Exception {
-        subject.onWindowVisibilityChanged(View.INVISIBLE);
-        reset(adViewController);
-
-        broadcastIntent(new Intent(Intent.ACTION_USER_PRESENT));
-        verify(adViewController, never()).unpauseRefresh();
-
-        broadcastIntent(new Intent(Intent.ACTION_SCREEN_OFF));
-        verify(adViewController, never()).pauseRefresh();
-    }
-
-    @Test
-    public void screenStateBroadcastReceiver_afterOnDestroy_shouldDoNothing() throws Exception {
-        subject.destroy();
-
-        broadcastIntent(new Intent(Intent.ACTION_USER_PRESENT));
-        verify(adViewController, never()).unpauseRefresh();
-
-        broadcastIntent(new Intent(Intent.ACTION_SCREEN_OFF));
-        verify(adViewController, never()).pauseRefresh();
-    }
-
-    @Test
-    public void onWindowVisibilityChanged_fromVisibleToInvisible_shouldPauseRefresh() throws Exception {
-        // Default visibility is View.VISIBLE
-        subject.onWindowVisibilityChanged(View.INVISIBLE);
-
-        verify(adViewController).pauseRefresh();
-        verify(adViewController, never()).unpauseRefresh();
-    }
-
-
-    @Test
-    public void onWindowVisibilityChanged_fromInvisibleToVisible_shouldUnpauseRefresh() throws Exception {
-        subject.onWindowVisibilityChanged(View.INVISIBLE);
-        reset(adViewController);
-
-        subject.onWindowVisibilityChanged(View.VISIBLE);
-
-        verify(adViewController, never()).pauseRefresh();
-        verify(adViewController).unpauseRefresh();
-    }
-
-    @Test
-    public void onWindowVisibilityChanged_fromVisibleToVisible_shouldDoNothing() throws Exception {
-        // Default visibility is View.VISIBLE
-        subject.onWindowVisibilityChanged(View.VISIBLE);
-
-        verify(adViewController, never()).pauseRefresh();
-        verify(adViewController, never()).unpauseRefresh();
-    }
-
-    @Test
-    public void onWindowVisibilityChanged_fromInvisibleToGone_shouldDoNothing() throws Exception {
-        subject.onWindowVisibilityChanged(View.INVISIBLE);
-        reset(adViewController);
-
-        subject.onWindowVisibilityChanged(View.GONE);
-
-        verify(adViewController, never()).pauseRefresh();
-        verify(adViewController, never()).unpauseRefresh();
-    }
-
-    @Test
-    public void onWindowVisibilityChanged_fromGoneToInvisible_shouldDoNothing() throws Exception {
-        subject.onWindowVisibilityChanged(View.GONE);
-        reset(adViewController);
-
-        subject.onWindowVisibilityChanged(View.INVISIBLE);
-
-        verify(adViewController, never()).pauseRefresh();
-        verify(adViewController, never()).unpauseRefresh();
-    }
-
-    @Test
-    public void setAutorefreshEnabled_withRefreshTrue_shouldForwardToAdViewController() throws Exception {
-        subject.setAutorefreshEnabled(true);
-
-        verify(adViewController).forceSetAutorefreshEnabled(true);
-    }
-
-    @Test
-    public void setAutorefreshEnabled_withRefreshFalse_shouldForwardToAdViewController() throws Exception {
-        subject.setAutorefreshEnabled(false);
-
-        verify(adViewController).forceSetAutorefreshEnabled(false);
-    }
-    
-    @Test
-    public void nativeAdLoaded_shouldScheduleRefreshTimer() throws Exception {
-        subject.nativeAdLoaded();
-
-        verify(adViewController).scheduleRefreshTimerIfEnabled();
-    }
-
-    @Test
-    public void loadCustomEvent_shouldInitializeCustomEventBannerAdapter() throws Exception {
-        subject.loadCustomEvent("name", paramsMap);
-
-        assertThat(TestCustomEventBannerAdapterFactory.getLatestMoPubView()).isEqualTo(subject);
-        assertThat(TestCustomEventBannerAdapterFactory.getLatestClassName()).isEqualTo("name");
-        assertThat(TestCustomEventBannerAdapterFactory.getLatestClassData()).isEqualTo(paramsMap);
-
-        verify(customEventBannerAdapter).loadAd();
-    }
-
-    @Test
-    public void loadCustomEvent_whenParamsMapIsNull_shouldCallLoadFailUrl() throws Exception {
-        subject.loadCustomEvent(null, null);
-
-        verify(adViewController).loadFailUrl(eq(ADAPTER_NOT_FOUND));
-        verify(customEventBannerAdapter, never()).invalidate();
-        verify(customEventBannerAdapter, never()).loadAd();
-    }
-
-    @Test
-    public void loadCustomEvent_withTwoCalls_shouldInvalidateAdapterOnce() throws Exception {
-        subject.loadCustomEvent("name", paramsMap);
-        subject.loadCustomEvent("name", paramsMap);
-
-        verify(customEventBannerAdapter).invalidate();
-    }
-
-    @Test
-    public void forceRefresh_withCallToLoadCustomEvent_shouldInvalidateAdapter() throws Exception {
-        subject.loadCustomEvent("name", paramsMap);
-        subject.forceRefresh();
-
-        verify(customEventBannerAdapter).invalidate();
-    }
-
-    @Test
-    public void loadCustomEvent_withoutBannerModule_shouldNotLoadAd() throws Exception {
-        ShadowReflection.setNextClassNotFound(true);
-
-        subject.loadCustomEvent("name", paramsMap);
-
-        verify(customEventBannerAdapter, never()).loadAd();
-    }
-
-    @Test
-    public void forceRefresh_withoutBannerModule_withCallToLoadCustomEvent_shouldNotInvalidateAdapter() throws Exception {
-        ShadowReflection.setNextClassNotFound(true);
-
-        subject.loadCustomEvent("name", paramsMap);
-        subject.forceRefresh();
-
-        verify(customEventBannerAdapter, never()).invalidate();
-    }
-
-    @Test
-    public void forceRefresh_withoutBannerModule_withCallToLoadCustomEvent_shouldForceRefreshAdViewController() throws Exception {
-        ShadowReflection.setNextClassNotFound(true);
-
-        subject.loadCustomEvent("name", paramsMap);
-        subject.forceRefresh();
-
-        verify(adViewController).forceRefresh();
-    }
-
-    @Test
-    public void invalidateAdapter_withReflection_shouldExist() throws Exception {
-        assertThat(Reflection.getDeclaredMethodWithTraversal(CustomEventBannerAdapter.class,
-                "invalidate")).isNotNull();
-    }
-
-    private void broadcastIntent(final Intent intent) {
-        final List<ShadowApplication.Wrapper> wrappers = ShadowApplication.getInstance().getRegisteredReceivers();
-
-        for (final ShadowApplication.Wrapper wrapper : wrappers) {
-            wrapper.broadcastReceiver.onReceive(context, intent);
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
deleted file mode 100644
index cbd4547f..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
+++ /dev/null
@@ -1,365 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.BroadcastReceiver;
-import android.content.ComponentName;
-import android.content.Context;
-import android.content.Intent;
-import android.view.View;
-import android.view.ViewGroup;
-import android.view.WindowManager;
-import android.webkit.WebViewClient;
-import android.widget.FrameLayout;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mraid.MraidBridge;
-import com.mopub.mraid.MraidBridge.MraidWebView;
-import com.mopub.mraid.MraidController;
-import com.mopub.mraid.MraidController.MraidListener;
-
-import org.fest.assertions.api.ANDROID;
-import org.junit.Before;
-import org.junit.Ignore;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.Shadows;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.support.v4.ShadowLocalBroadcastManager;
-import org.robolectric.util.ActivityController;
-
-import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
-import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
-import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class MraidActivityTest {
-    static final String EXPECTED_SOURCE = "expected source";
-    static final String HTML_DATA = "html_data";
-
-    @Mock MraidWebView mockMraidWebView;
-    @Mock MraidBridge mraidBridge;
-    @Mock MraidController mraidController;
-    @Mock CustomEventInterstitial.CustomEventInterstitialListener
-            customEventInterstitialListener;
-    @Mock BroadcastReceiver broadcastReceiver;
-
-    Context context;
-
-    // These fields are relics of a previous version of this class (all tests using them have since
-    // been deprecated).
-    MraidActivity subject;
-    ActivityController<MraidActivity> activityController;
-
-    long testBroadcastIdentifier = 2222;
-
-    @Before
-    public void setUp() throws Exception {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-    }
-
-    @Test
-    public void preRenderHtml_shouldEnableJavascriptCachingForDummyWebView() {
-        MraidActivity.preRenderHtml(customEventInterstitialListener, HTML_DATA, mockMraidWebView);
-
-        verify(mockMraidWebView).enableJavascriptCaching();
-    }
-
-    @Test
-    public void preRenderHtml_shouldDisablePluginsForDummyWebView() {
-        MraidActivity.preRenderHtml(customEventInterstitialListener, HTML_DATA, mockMraidWebView);
-
-        verify(mockMraidWebView).enablePlugins(false);
-    }
-
-    @Test
-    public void preRenderHtml_shouldLoadHtml() {
-        MraidActivity.preRenderHtml(customEventInterstitialListener, HTML_DATA, mockMraidWebView);
-
-        verify(mockMraidWebView).loadDataWithBaseURL(
-                "http://ads.mopub.com/",
-                HTML_DATA,
-                "text/html",
-                "UTF-8",
-                null
-        );
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void preRenderHtml_shouldSetWebViewClient() throws Exception {
-        MraidActivity.preRenderHtml(subject, customEventInterstitialListener, "3:27");
-
-        verify(mockMraidWebView).enablePlugins(eq(false));
-        verify(mraidController).setMraidListener(any(MraidListener.class));
-        verify(mockMraidWebView).setWebViewClient(any(WebViewClient.class));
-        verify(mraidBridge).setContentHtml(eq("3:27"));
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialLoaded_whenMraidListenerOnReady() throws Exception {
-        MraidActivity.preRenderHtml(subject, customEventInterstitialListener, "");
-
-        ArgumentCaptor<MraidListener> mraidListenerArgumentCaptorr = ArgumentCaptor.forClass(MraidListener.class);
-        verify(mraidController).setMraidListener(mraidListenerArgumentCaptorr.capture());
-        MraidListener mraidListener = mraidListenerArgumentCaptorr.getValue();
-
-        mraidListener.onLoaded(null);
-
-        verify(customEventInterstitialListener).onInterstitialLoaded();
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialFailed_whenMraidListenerOnFailure() throws Exception {
-        MraidActivity.preRenderHtml(subject, customEventInterstitialListener, "");
-
-        ArgumentCaptor<MraidListener> mraidListenerArgumentCaptorr = ArgumentCaptor.forClass(MraidListener.class);
-        verify(mraidController).setMraidListener(mraidListenerArgumentCaptorr.capture());
-        MraidListener mraidListener = mraidListenerArgumentCaptorr.getValue();
-
-        mraidListener.onFailedToLoad();
-
-        verify(customEventInterstitialListener).onInterstitialFailed(null);
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void preRenderHtml_whenWebViewClientShouldOverrideUrlLoading_shouldReturnTrue() throws Exception {
-        MraidActivity.preRenderHtml(subject, customEventInterstitialListener, "");
-
-        ArgumentCaptor<WebViewClient> webViewClientArgumentCaptor = ArgumentCaptor.forClass(WebViewClient.class);
-        verify(mockMraidWebView).setWebViewClient(webViewClientArgumentCaptor.capture());
-        WebViewClient webViewClient = webViewClientArgumentCaptor.getValue();
-
-        boolean consumeUrlLoading = webViewClient.shouldOverrideUrlLoading(null, null);
-
-        assertThat(consumeUrlLoading).isTrue();
-        verify(customEventInterstitialListener, never()).onInterstitialLoaded();
-        verify(customEventInterstitialListener, never()).onInterstitialFailed(
-                any(MoPubErrorCode.class));
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialLoaded_whenWebViewClientOnPageFinished() throws Exception {
-        MraidActivity.preRenderHtml(subject, customEventInterstitialListener, "");
-
-        ArgumentCaptor<WebViewClient> webViewClientArgumentCaptor = ArgumentCaptor.forClass(WebViewClient.class);
-        verify(mockMraidWebView).setWebViewClient(webViewClientArgumentCaptor.capture());
-        WebViewClient webViewClient = webViewClientArgumentCaptor.getValue();
-
-        webViewClient.onPageFinished(null, null);
-
-        verify(customEventInterstitialListener).onInterstitialLoaded();
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void onCreate_shouldSetContentView() throws Exception {
-        subject.onCreate(null);
-
-        assertThat(getContentView().getChildCount()).isEqualTo(1);
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void onCreate_shouldSetupAnMraidView() throws Exception {
-        subject.onCreate(null);
-
-        assertThat(getContentView().getChildAt(0)).isSameAs(mockMraidWebView);
-        verify(mraidController).setMraidListener(any(MraidListener.class));
-
-        verify(mraidBridge).setContentHtml(EXPECTED_SOURCE);
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void onCreate_shouldSetLayoutOfMraidView() throws Exception {
-        subject.onCreate(null);
-
-        ArgumentCaptor<FrameLayout.LayoutParams> captor = ArgumentCaptor.forClass(
-                FrameLayout.LayoutParams.class);
-        verify(mockMraidWebView).setLayoutParams(captor.capture());
-        FrameLayout.LayoutParams actualLayoutParams = captor.getValue();
-
-        assertThat(actualLayoutParams.width).isEqualTo(FrameLayout.LayoutParams.MATCH_PARENT);
-        assertThat(actualLayoutParams.height).isEqualTo(FrameLayout.LayoutParams.MATCH_PARENT);
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void onCreate_shouldSetHardwareAcceleratedFlag() throws Exception {
-        subject.onCreate(null);
-
-        boolean hardwareAccelerated = Shadows.shadowOf(subject.getWindow()).getFlag(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
-        assertThat(hardwareAccelerated).isTrue();
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void onDestroy_DestroyMraidView() throws Exception {
-        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, subject.getBroadcastIdentifier());
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver,
-                new EventForwardingBroadcastReceiver(customEventInterstitialListener,
-                        testBroadcastIdentifier).getIntentFilter());
-
-        subject.onDestroy();
-
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
-        verify(mockMraidWebView).destroy();
-        assertThat(getContentView().getChildCount()).isEqualTo(0);
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void getAdView_shouldSetupOnReadyListener() throws Exception {
-        reset(mockMraidWebView);
-        ArgumentCaptor<MraidListener> captor = ArgumentCaptor.forClass(MraidListener.class);
-        View actualAdView = subject.getAdView();
-
-        assertThat(actualAdView).isSameAs(mockMraidWebView);
-        verify(mraidController).setMraidListener(captor.capture());
-
-        subject.hideInterstitialCloseButton();
-        captor.getValue().onLoaded(null);
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void baseMraidListenerOnReady_shouldFireJavascriptWebViewDidAppear() throws Exception {
-        reset(mockMraidWebView);
-        ArgumentCaptor<MraidListener> captor = ArgumentCaptor.forClass(MraidListener.class);
-        View actualAdView = subject.getAdView();
-
-        assertThat(actualAdView).isSameAs(mockMraidWebView);
-        verify(mraidController).setMraidListener(captor.capture());
-
-        MraidListener baseMraidListener = captor.getValue();
-        baseMraidListener.onLoaded(null);
-
-        verify(mockMraidWebView).loadUrl(eq("javascript:webviewDidAppear();"));
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void baseMraidListenerOnClose_shouldFireJavascriptWebViewDidClose() throws Exception {
-        reset(mockMraidWebView);
-        ArgumentCaptor<MraidListener> captor = ArgumentCaptor.forClass(MraidListener.class);
-        View actualAdView = subject.getAdView();
-
-        assertThat(actualAdView).isSameAs(mockMraidWebView);
-        verify(mraidController).setMraidListener(captor.capture());
-
-        MraidListener baseMraidListener = captor.getValue();
-        baseMraidListener.onClose();
-
-        verify(mockMraidWebView).loadUrl(eq("javascript:webviewDidClose();"));
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void baseMraidListenerOnOpen_shouldBroadcastClickEvent() throws Exception {
-        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_CLICK, testBroadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver,
-                new EventForwardingBroadcastReceiver(customEventInterstitialListener,
-                        testBroadcastIdentifier).getIntentFilter());
-
-        reset(mockMraidWebView);
-
-        ArgumentCaptor<MraidListener> captor = ArgumentCaptor.forClass(MraidListener.class);
-        View actualAdView = subject.getAdView();
-
-        assertThat(actualAdView).isSameAs(mockMraidWebView);
-        verify(mraidController).setMraidListener(captor.capture());
-
-        MraidListener baseMraidListener = captor.getValue();
-        baseMraidListener.onOpen();
-
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void getAdView_shouldSetupOnCloseListener() throws Exception {
-        reset(mockMraidWebView);
-        ArgumentCaptor<MraidListener> captor = ArgumentCaptor.forClass(MraidListener.class);
-        View actualAdView = subject.getAdView();
-
-        assertThat(actualAdView).isSameAs(mockMraidWebView);
-        verify(mraidController).setMraidListener(captor.capture());
-
-        captor.getValue().onClose();
-
-        ANDROID.assertThat(subject).isFinishing();
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void onPause_shouldOnPauseMraidView() throws Exception {
-        activityController.pause();
-
-        verify(mockMraidWebView).onPause();
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void onResume_shouldResumeMraidView() throws Exception {
-        subject.onCreate(null);
-        Shadows.shadowOf(subject).pauseAndThenResume();
-
-        verify(mockMraidWebView).onResume();
-    }
-
-    private Intent createMraidActivityIntent(String expectedSource) {
-        Intent mraidActivityIntent = new Intent();
-        mraidActivityIntent.setComponent(new ComponentName("", ""));
-        mraidActivityIntent.putExtra(HTML_RESPONSE_BODY_KEY, expectedSource);
-
-        mraidActivityIntent.putExtra(BROADCAST_IDENTIFIER_KEY, testBroadcastIdentifier);
-
-        return mraidActivityIntent;
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void onCreate_shouldBroadcastInterstitialShow() throws Exception {
-        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, testBroadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver,
-                new EventForwardingBroadcastReceiver(customEventInterstitialListener,
-                        testBroadcastIdentifier).getIntentFilter());
-
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void onDestroy_shouldBroadcastInterstitialDismiss() throws Exception {
-        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, testBroadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver,
-                new EventForwardingBroadcastReceiver(customEventInterstitialListener,
-                        testBroadcastIdentifier).getIntentFilter());
-
-        subject.onDestroy();
-
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
-    }
-
-    private FrameLayout getContentView() {
-        return (FrameLayout) ((ViewGroup) subject.findViewById(android.R.id.content)).getChildAt(0);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
deleted file mode 100644
index 49eea165..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
+++ /dev/null
@@ -1,249 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.ActivityInfo;
-import android.graphics.Bitmap;
-import android.os.Bundle;
-import android.view.TextureView;
-import android.view.View;
-import android.widget.ImageView;
-
-import com.mopub.common.Constants;
-import com.mopub.common.MoPubBrowser;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mraid.MraidVideoViewController;
-import com.mopub.nativeads.NativeFullScreenVideoView;
-import com.mopub.nativeads.NativeVideoController;
-import com.mopub.nativeads.NativeVideoViewController;
-
-import org.junit.Before;
-import org.junit.Ignore;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.Shadows;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowActivity;
-
-import java.lang.reflect.Constructor;
-
-import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class MraidVideoPlayerActivityTest {
-    private static final String VAST = "vast";
-    private static final String MRAID = "mraid";
-    private static final String NATIVE_VIDEO_VIEW_CONTROLLER =
-            "com.mopub.nativeads.NativeVideoViewController";
-
-    private MraidVideoPlayerActivity subject;
-    private long testBroadcastIdentifier;
-    private Intent intent;
-    private Context context;
-    private BaseVideoViewController baseVideoViewController;
-
-    @Before
-    public void setup() {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        intent = new Intent(context, MraidVideoPlayerActivity.class);
-
-        testBroadcastIdentifier = 1001;
-        intent.putExtra(BROADCAST_IDENTIFIER_KEY, testBroadcastIdentifier);
-        baseVideoViewController = mock(BaseVideoViewController.class);
-    }
-
-    @Test
-    public void onCreate_withVastExtraKey_shouldUseVastVideoViewController() throws Exception {
-        initializeSubjectForVast();
-
-        assertThat(subject.getBaseVideoViewController()).isInstanceOf(VastVideoViewController.class);
-    }
-
-    @Test
-    public void onCreate_withMraidExtraKey_shouldUseMraidVideoViewController() throws Exception {
-        initializeSubjectForMraid();
-
-        assertThat(subject.getBaseVideoViewController()).isInstanceOf(MraidVideoViewController.class);
-    }
-
-    @Test
-    public void onCreate_withNativeExtraKey_shouldUseNativeVideoViewController() throws Exception {
-        initializeSubjectForNative();
-
-        assertThat(subject.getBaseVideoViewController()).isInstanceOf(NativeVideoViewController.class);
-    }
-
-    @Ignore("pending: this is currently impossible to write")
-    @Test
-    public void onCreate_shouldForwardOnCreateToViewController() throws Exception {
-        initializeSubjectWithMockViewController();
-
-    }
-
-    @Test
-    public void onPause_shouldForwardOnPauseToViewController() throws Exception {
-        initializeSubjectWithMockViewController();
-
-        subject.onPause();
-
-        verify(baseVideoViewController).onPause();
-    }
-
-    @Test
-    public void onResume_shouldForwardOnResumeToViewController() throws Exception {
-        initializeSubjectWithMockViewController();
-
-        subject.onResume();
-
-        verify(baseVideoViewController).onResume();
-    }
-
-    @Test
-    public void onDestroy_shouldForwardOnDestroyToViewController() throws Exception {
-        initializeSubjectWithMockViewController();
-
-        subject.onDestroy();
-
-        verify(baseVideoViewController).onDestroy();
-    }
-
-    @Test
-    public void onActivityResult_shouldForwardOnActivityResultToViewController() throws Exception {
-        initializeSubjectWithMockViewController();
-
-        int expectedRequestCode = -100;
-        int expectedResultCode = 200;
-        Intent expectedData = new Intent("arbitrary_data");
-        subject.onActivityResult(expectedRequestCode, expectedResultCode, expectedData);
-
-        verify(baseVideoViewController).onActivityResult(
-                eq(expectedRequestCode),
-                eq(expectedResultCode),
-                eq(expectedData)
-        );
-    }
-
-    @Test
-    public void onSetContentView_shouldActuallySetContentView() throws Exception {
-        initializeSubjectWithMockViewController();
-        final View expectedView = new ImageView(context);
-
-        subject.onSetContentView(expectedView);
-
-        assertThat(Shadows.shadowOf(subject).getContentView()).isEqualTo(expectedView);
-    }
-
-    @Test
-    public void onSetRequestedOrientation_shouldActuallySetRequestedOrientation() throws Exception {
-        initializeSubjectWithMockViewController();
-
-        subject.onSetRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR);
-
-        assertThat(subject.getRequestedOrientation()).isEqualTo(ActivityInfo.SCREEN_ORIENTATION_SENSOR);
-    }
-
-    @Test
-    public void onFinish_shouldActuallyCallFinish() throws Exception {
-        initializeSubjectWithMockViewController();
-
-        subject.onFinish();
-
-        assertThat(subject.isFinishing());
-    }
-
-    @Test
-    public void onStartActivityForResult_shouldStartAnActivityWithRelevantRequestCodeAndExtras() throws Exception {
-        initializeSubjectWithMockViewController();
-
-        final Bundle expectedExtras = new Bundle();
-        expectedExtras.putString("hello", "goodbye");
-
-        subject.onStartActivityForResult(MoPubBrowser.class, 100, expectedExtras);
-
-        final ShadowActivity.IntentForResult intentForResult = Shadows.shadowOf(subject).getNextStartedActivityForResult();
-
-        assertThat(intentForResult.intent.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser");
-        assertThat(intentForResult.intent.getExtras()).isEqualTo(expectedExtras);
-        assertThat(intentForResult.requestCode).isEqualTo(100);
-    }
-
-    @Test
-    public void onStartActivityForResult_withNullClass_shouldNotStartAnActivity() throws Exception {
-        initializeSubjectWithMockViewController();
-
-        subject.onStartActivityForResult(null, 100, new Bundle());
-
-        final ShadowActivity.IntentForResult intentForResult = Shadows.shadowOf(subject).getNextStartedActivityForResult();
-        assertThat(intentForResult).isNull();
-    }
-
-    @Test
-    public void createVideoViewController_withNativeVideoViewControllerReflectionConstructor_shouldExist() throws Exception {
-        final Class<?> nativeVideoViewController = Class.forName(NATIVE_VIDEO_VIEW_CONTROLLER);
-        final Constructor<?> declaredConstructor = nativeVideoViewController.getDeclaredConstructor(
-                Context.class, Bundle.class, Bundle.class,
-                BaseVideoViewController.BaseVideoViewControllerListener.class);
-
-        assertThat(declaredConstructor).isNotNull();
-    }
-
-    private void initializeSubjectForMraid() {
-        intent.putExtra(BaseVideoPlayerActivity.VIDEO_CLASS_EXTRAS_KEY, "mraid");
-
-        subject = Robolectric.buildActivity(MraidVideoPlayerActivity.class)
-                .withIntent(intent)
-                .create()
-                .get();
-    }
-
-    private void initializeSubjectForVast() {
-        intent.putExtra(BaseVideoPlayerActivity.VIDEO_CLASS_EXTRAS_KEY, "vast");
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("video_path");
-        intent.putExtra(VastVideoViewController.VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        subject = Robolectric.buildActivity(MraidVideoPlayerActivity.class)
-                .withIntent(intent)
-                .create()
-                .get();
-    }
-
-    private void initializeSubjectForNative() {
-        intent.putExtra(BaseVideoPlayerActivity.VIDEO_CLASS_EXTRAS_KEY, "native");
-
-        NativeFullScreenVideoView mockFullScreenVideoView = mock(NativeFullScreenVideoView.class);
-        NativeVideoController mockVideoController = mock(NativeVideoController.class);
-        VastVideoConfig mockVastVideoConfig = mock(VastVideoConfig.class);
-        TextureView mockTextureView = mock(TextureView.class);
-        Bitmap mockBitmap = mock(Bitmap.class);
-
-        when(mockVastVideoConfig.getCustomCtaText()).thenReturn("Learn More");
-        when(mockFullScreenVideoView.getTextureView()).thenReturn(mockTextureView);
-        when(mockTextureView.getBitmap()).thenReturn(mockBitmap);
-
-        Bundle additionalExtras = new Bundle();
-        additionalExtras.putSerializable(Constants.NATIVE_VAST_VIDEO_CONFIG, mockVastVideoConfig);
-        additionalExtras.putLong(Constants.NATIVE_VIDEO_ID, 123);
-        NativeVideoController.setForId(123, mockVideoController);
-        intent.putExtras(additionalExtras);
-
-        subject = Robolectric.buildActivity(MraidVideoPlayerActivity.class)
-                .withIntent(intent)
-                .create()
-                .get();
-    }
-
-    private void initializeSubjectWithMockViewController() {
-        initializeSubjectForMraid();
-
-        subject.setBaseVideoViewController(baseVideoViewController);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RepeatingHandlerRunnableTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RepeatingHandlerRunnableTest.java
deleted file mode 100644
index e6314478..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RepeatingHandlerRunnableTest.java
+++ /dev/null
@@ -1,90 +0,0 @@
-package com.mopub.mobileads;
-
-import android.os.Handler;
-import android.support.annotation.NonNull;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.annotation.Config;
-
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyZeroInteractions;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class RepeatingHandlerRunnableTest {
-
-    @Mock Handler mockHandler;
-    RepeatingHandlerRunnable subject;
-
-    @Before
-    public void setup() {
-      subject = new NoopRepeatingHandlerRunnable(mockHandler);
-    }
-
-    @Test
-    public void startTracking_whenRunning_shouldScheduleSelf() {
-        subject.startRepeating(100);
-        reset(mockHandler);
-        subject.run();
-
-        verify(mockHandler).postDelayed(eq(subject), eq(100l));
-    }
-
-    @Test
-    public void start_whenRunning_shouldNotScheduleAndRunShouldScheduleWithNewInterval() {
-        subject.startRepeating(100l);
-        reset(mockHandler);
-
-        subject.startRepeating(200l);
-
-        verifyZeroInteractions(mockHandler);
-
-        subject.run();
-
-        verify(mockHandler).postDelayed(eq(subject), eq(200l));
-    }
-
-    @Test
-    public void run_whenNotRunning_shouldNotSchedule() {
-        subject.stop();
-        reset(mockHandler);
-
-        subject.run();
-
-        verifyZeroInteractions(mockHandler);
-    }
-
-    @Test
-    public void stopTracking_whenRunning_shouldPreventNextScheduling() {
-        subject.startRepeating(100l);
-        verify(mockHandler).post(eq(subject));
-
-        subject.run();
-        verify(mockHandler).postDelayed(eq(subject), eq(100l));
-
-        reset(mockHandler);
-        subject.stop();
-
-        subject.run();
-        verifyZeroInteractions(mockHandler);
-    }
-
-    private static class NoopRepeatingHandlerRunnable extends RepeatingHandlerRunnable {
-
-        NoopRepeatingHandlerRunnable(@NonNull final Handler handler) {
-            super(handler);
-        }
-
-        @Override
-        public void doWork() {
-            // pass
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/ResponseBodyInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/ResponseBodyInterstitialTest.java
deleted file mode 100644
index e5832e88..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/ResponseBodyInterstitialTest.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package com.mopub.mobileads;
-
-import org.junit.Ignore;
-import org.junit.Test;
-
-@Ignore
-public class ResponseBodyInterstitialTest {
-    protected ResponseBodyInterstitial subject;
-
-    @Test
-    public void onInvalidate_beforeLoadInterstitialIsCalled_shouldNotBlowUp() throws Exception {
-        // Have not called subject.loadInterstitial()
-
-        subject.onInvalidate();
-
-        // pass
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedAdDataTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedAdDataTest.java
deleted file mode 100644
index be5dfd6f..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedAdDataTest.java
+++ /dev/null
@@ -1,73 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.common.MoPubReward;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class RewardedAdDataTest {
-
-    private RewardedAdData subject;
-
-    @Before
-    public void setup() {
-        subject = new RewardedAdData();
-    }
-
-    @Test
-    public void updateAdUnitRewardMapping_shouldMapAdUnitIdToReward() throws Exception {
-        subject.updateAdUnitRewardMapping("mopub_id", "currency_name", "123");
-        MoPubReward moPubReward = subject.getMoPubReward("mopub_id");
-        assertThat(moPubReward.getLabel()).isEqualTo("currency_name");
-        assertThat(moPubReward.getAmount()).isEqualTo(123);
-    }
-
-    @Test
-    public void updateAdUnitRewardMapping_withNullCurrencyName_shouldRemoveExistingAdUnitMapping_shouldNotMapAdUnitIdToReward() throws Exception {
-        // Insert initial value to be removed with next call
-        subject.updateAdUnitRewardMapping("mopub_id", "currency_name", "123");
-        MoPubReward moPubReward = subject.getMoPubReward("mopub_id");
-        assertThat(moPubReward.getLabel()).isEqualTo("currency_name");
-        assertThat(moPubReward.getAmount()).isEqualTo(123);
-
-        subject.updateAdUnitRewardMapping("mopub_id", null, "123");
-        assertThat(subject.getMoPubReward("mopub_id")).isNull();
-    }
-
-    @Test
-    public void updateAdUnitRewardMapping_withNullCurrencyName_shouldNotMapAdUnitIdToReward() throws Exception {
-        // Insert initial value to be removed with next call
-        subject.updateAdUnitRewardMapping("mopub_id", "currency_name", "123");
-        MoPubReward moPubReward = subject.getMoPubReward("mopub_id");
-        assertThat(moPubReward.getLabel()).isEqualTo("currency_name");
-        assertThat(moPubReward.getAmount()).isEqualTo(123);
-
-        subject.updateAdUnitRewardMapping("mopub_id", null, "123");
-        assertThat(subject.getMoPubReward("mopub_id")).isNull();
-    }
-
-    @Test
-    public void updateAdUnitRewardMapping_withNullCurrencyAmount_shouldNotMapAdUnitIdToReward() throws Exception {
-        subject.updateAdUnitRewardMapping("mopub_id", "currency_name", null);
-        assertThat(subject.getMoPubReward("mopub_id")).isNull();
-    }
-
-    @Test
-    public void updateAdUnitRewardMapping_withNonNumberCurrencyAmount_shouldNotMapAdUnitIdToReward() throws Exception {
-        subject.updateAdUnitRewardMapping("mopub_id", "currency_name", "abc");
-        assertThat(subject.getMoPubReward("mopub_id")).isNull();
-    }
-
-    @Test
-    public void updateAdUnitRewardMapping_withCurrencyAmountLessThanZero_shouldNotMapAdUnitIdToReward() throws Exception {
-        subject.updateAdUnitRewardMapping("mopub_id", "currency_name", "-1");
-        assertThat(subject.getMoPubReward("mopub_id")).isNull();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidActivityTest.java
deleted file mode 100644
index 540e6e2b..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidActivityTest.java
+++ /dev/null
@@ -1,104 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.view.View;
-
-import com.mopub.common.AdReport;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mraid.RewardedMraidController;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import static com.mopub.mraid.RewardedMraidController.MILLIS_IN_SECOND;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class RewardedMraidActivityTest {
-    private long broadcastIdentifier;
-    private boolean shouldRewardOnClick;
-    private RewardedMraidActivity subject;
-
-    private static final String HTML_DATA = "TEST HTML DATA";
-    private static final int REWARDED_DURATION_IN_SECONDS = 25;
-
-    @Mock
-    AdReport mockAdReport;
-
-    @Mock
-    RewardedMraidController mockRewardedMraidController;
-
-    @Before
-    public void setup() {
-        broadcastIdentifier = 3333;
-        shouldRewardOnClick = false;
-
-        Context context = Robolectric.buildActivity(Activity.class).create().get();
-        Intent intent = RewardedMraidActivity.createIntent(context, mockAdReport, HTML_DATA,
-                broadcastIdentifier, REWARDED_DURATION_IN_SECONDS, shouldRewardOnClick);
-        subject = Robolectric.buildActivity(RewardedMraidActivity.class)
-                .withIntent(intent).create().get();
-    }
-
-    @Test
-    public void onCreate_shouldCreateView() throws Exception {
-        View adView = subject.getCloseableLayout().getChildAt(0);
-        assertThat(adView).isNotNull();
-    }
-
-    @Test
-    public void onCreate_shouldCallOnCreateForController() throws Exception {
-        // Close button should not be visible
-        assertThat(subject.getCloseableLayout().isCloseVisible()).isFalse();
-
-        RewardedMraidController controller = subject.getRewardedMraidController();
-        VastVideoRadialCountdownWidget countdownWidget = controller.getRadialCountdownWidget();
-
-        // Radial countdown widget should be calibrated
-        assertThat(countdownWidget).isNotNull();
-        assertThat(countdownWidget.getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(countdownWidget.getImageViewDrawable().getInitialCountdownMilliseconds())
-                .isEqualTo(REWARDED_DURATION_IN_SECONDS * MILLIS_IN_SECOND);
-        assertThat(controller.isCalibrationDone()).isTrue();
-
-        // Countdown runnable should be created
-        assertThat(controller.getCountdownRunnable()).isNotNull();
-    }
-
-    @Test
-    public void onPause_shouldCallPauseOnController() {
-        subject.onResume();
-        subject.onPause();
-
-        // Countdown runnable should be stopped
-        assertThat(subject.getRewardedMraidController().getCountdownRunnable().isRunning())
-                .isFalse();
-    }
-
-    @Test
-    public void onResume_shouldCallResumeOnController() {
-        subject.onPause();
-        subject.onResume();
-
-        // Countdown runnable should be resumed
-        assertThat(subject.getRewardedMraidController().getCountdownRunnable().isRunning())
-                .isTrue();
-    }
-
-    @Test
-    public void onDestroy_shouldCallDestroyOnController() {
-        subject.onResume();
-        subject.onDestroy();
-
-        // Countdown runnable should be stopped
-        assertThat(subject.getRewardedMraidController().getCountdownRunnable().isRunning())
-                .isFalse();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidCountdownRunnableTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidCountdownRunnableTest.java
deleted file mode 100644
index 4060bde7..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidCountdownRunnableTest.java
+++ /dev/null
@@ -1,54 +0,0 @@
-package com.mopub.mobileads;
-
-import android.os.Handler;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mraid.RewardedMraidController;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.annotation.Config;
-
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class RewardedMraidCountdownRunnableTest {
-
-    @Mock
-    RewardedMraidController mockRewardedMraidController;
-    @Mock Handler mockHandler;
-
-    RewardedMraidCountdownRunnable subject;
-
-    @Before
-    public void setup() {
-        subject = new RewardedMraidCountdownRunnable(mockRewardedMraidController, mockHandler);
-    }
-
-    @Test
-    public void doWork_whenPlayableIsCloseable_shouldMakePlayableCloseable() {
-        when(mockRewardedMraidController.isPlayableCloseable()).thenReturn(true);
-
-        subject.doWork();
-
-        int currentElapsedTimeMillis = subject.getCurrentElapsedTimeMillis();
-        verify(mockRewardedMraidController).updateCountdown(currentElapsedTimeMillis);
-        verify(mockRewardedMraidController).showPlayableCloseButton();
-    }
-
-    @Test
-    public void doWork_whenPlayableIsNotCloseable_shouldNotMakePlayableCloseable() {
-        when(mockRewardedMraidController.isPlayableCloseable()).thenReturn(false);
-
-        subject.doWork();
-
-        int currentElapsedTimeMillis = subject.getCurrentElapsedTimeMillis();
-        verify(mockRewardedMraidController).updateCountdown(currentElapsedTimeMillis);
-        verify(mockRewardedMraidController, never()).showPlayableCloseButton();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVastVideoInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVastVideoInterstitialTest.java
deleted file mode 100644
index cbc4cf92..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVastVideoInterstitialTest.java
+++ /dev/null
@@ -1,77 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-
-import com.mopub.common.AdReport;
-import com.mopub.common.DataKeys;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.mopub.common.DataKeys.AD_REPORT_KEY;
-import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class RewardedVastVideoInterstitialTest {
-
-    private Context context;
-    private RewardedVastVideoInterstitial.RewardedVideoInterstitialListener mRewardedVideoInterstitialListener;
-    private Map<String, Object> localExtras;
-    private Map<String, String> serverExtras;
-    private RewardedVastVideoInterstitial subject;
-
-    @Mock AdReport mockAdReport;
-
-    @Before
-    public void setUp() throws Exception {
-        subject = new RewardedVastVideoInterstitial();
-
-        final String expectedResponse = "<VAST>hello</VAST>";
-
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        mRewardedVideoInterstitialListener = mock(
-                RewardedVastVideoInterstitial.RewardedVideoInterstitialListener.class);
-        localExtras = new HashMap<String, Object>();
-        serverExtras = new HashMap<String, String>();
-        serverExtras.put(DataKeys.HTML_RESPONSE_BODY_KEY, expectedResponse);
-
-        final long broadcastIdentifier = 2222;
-        localExtras.put(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
-        when(mockAdReport.getDspCreativeId()).thenReturn("dsp_creative_id");
-        localExtras.put(AD_REPORT_KEY, mockAdReport);
-    }
-
-    @Test
-    public void loadInterstitial_withCustomEventRewardedVideoInterstitialListener_shouldRegisterRewardedVideoBroadcastReceiver() {
-        subject.loadInterstitial(context, mRewardedVideoInterstitialListener, localExtras,
-                serverExtras);
-
-        assertThat(subject.getRewardedVideoBroadcastReceiver()).isNotNull();
-    }
-
-    @Test
-    public void onVastVideoConfigurationPrepared_withProperVastConfig_shouldSetRewardedVideoFlag() {
-        subject.loadInterstitial(context, mRewardedVideoInterstitialListener, localExtras,
-                serverExtras);
-        final VastVideoConfig mockVastVideoConfig = mock(VastVideoConfig.class);
-
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-
-        verify(mockVastVideoConfig).setIsRewardedVideo(true);
-    }
-
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoBroadcastReceiverTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoBroadcastReceiverTest.java
deleted file mode 100644
index fdbec0c4..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoBroadcastReceiverTest.java
+++ /dev/null
@@ -1,68 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.content.IntentFilter;
-
-import com.mopub.common.IntentActions;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.fest.util.Sets;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import java.util.Iterator;
-import java.util.Set;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class RewardedVideoBroadcastReceiverTest {
-
-    private RewardedVastVideoInterstitial.RewardedVideoInterstitialListener mRewardedVideoInterstitialListener;
-    private RewardedVideoBroadcastReceiver subject;
-    private Activity context;
-    private long broadcastIdentifier;
-
-    @Before
-    public void setUp() throws Exception {
-        mRewardedVideoInterstitialListener = mock(
-                RewardedVastVideoInterstitial.RewardedVideoInterstitialListener.class);
-        broadcastIdentifier = 123456L;
-        subject = new RewardedVideoBroadcastReceiver(mRewardedVideoInterstitialListener,
-                broadcastIdentifier);
-        context = new Activity();
-    }
-
-    @Test
-    public void constructor_shouldSetIntentFilter() throws Exception {
-        Set<String> expectedActions = Sets.newLinkedHashSet(
-                IntentActions.ACTION_REWARDED_VIDEO_COMPLETE
-        );
-
-        final IntentFilter intentFilter = subject.getIntentFilter();
-        final Iterator<String> actionIterator = intentFilter.actionsIterator();
-
-        assertThat(intentFilter.countActions()).isEqualTo(1);
-        while (actionIterator.hasNext()) {
-            assertThat(expectedActions.contains(actionIterator.next()));
-        }
-    }
-
-    @Test
-    public void onReceive_withActionRewardedVideoComplete_shouldNotifyListener() {
-        final Intent rewardedVideoCompleteIntent = new Intent();
-        rewardedVideoCompleteIntent.setAction(
-                IntentActions.ACTION_REWARDED_VIDEO_COMPLETE);
-        rewardedVideoCompleteIntent.putExtra("broadcastIdentifier", broadcastIdentifier);
-
-        subject.onReceive(context, rewardedVideoCompleteIntent);
-
-        verify(mRewardedVideoInterstitialListener).onVideoComplete();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandlerTest.java
deleted file mode 100644
index d73f8bd8..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandlerTest.java
+++ /dev/null
@@ -1,185 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.net.Uri;
-import android.os.Handler;
-
-import com.mopub.common.MoPub;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.network.MoPubRequestQueue;
-import com.mopub.network.Networking;
-import com.mopub.volley.NetworkResponse;
-import com.mopub.volley.VolleyError;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import static com.mopub.common.VolleyRequestMatcher.isUrl;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.argThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyZeroInteractions;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class RewardedVideoCompletionRequestHandlerTest {
-    @Mock
-    private MoPubRequestQueue mockRequestQueue;
-    private Context context;
-    private String url;
-
-    @Before
-    public void setup() {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        url = "testUrl";
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-    }
-
-    @Test
-    public void makeRewardedVideoCompletionRequest_shouldAddMacros_shouldMakeVideoCompletionRequest() throws Exception {
-        RewardedVideoCompletionRequestHandler.makeRewardedVideoCompletionRequest(context, url,
-                "customer id");
-
-        verify(mockRequestQueue).add(argThat(isUrl(
-                "testUrl&customer_id=customer%20id&nv=" +
-                        Uri.encode(MoPub.SDK_VERSION) + "&v=" +
-                        MoPubRewardedVideoManager.API_VERSION)));
-    }
-
-    @Test
-    public void getTimeout_shouldReturnCorrectTimeoutBasedOnRetry() {
-        final int maxTimeout = RewardedVideoCompletionRequestHandler.RETRY_TIMES[RewardedVideoCompletionRequestHandler.RETRY_TIMES.length - 1];
-
-        assertThat(RewardedVideoCompletionRequestHandler.getTimeout(-1)).isEqualTo(maxTimeout);
-
-        assertThat(RewardedVideoCompletionRequestHandler.getTimeout(0)).isEqualTo(
-                RewardedVideoCompletionRequestHandler.RETRY_TIMES[0]);
-
-        assertThat(RewardedVideoCompletionRequestHandler.getTimeout(1)).isEqualTo(
-                RewardedVideoCompletionRequestHandler.RETRY_TIMES[1]);
-
-        assertThat(RewardedVideoCompletionRequestHandler.getTimeout(1234567)).isEqualTo(
-                maxTimeout);
-    }
-
-    @Test
-    public void retryTimes_shouldAllBeGreaterThanRequestTimeoutDelay() {
-        for (int retryTime : RewardedVideoCompletionRequestHandler.RETRY_TIMES) {
-            assertThat(
-                    retryTime - RewardedVideoCompletionRequestHandler.REQUEST_TIMEOUT_DELAY)
-                    .isGreaterThanOrEqualTo(0);
-        }
-    }
-
-    @Test
-    public void onErrorResponse_shouldSetShouldStopToTrueWhenResponseNot500To599() {
-        RewardedVideoCompletionRequestHandler subject =
-                new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
-
-        assertThat(subject.getShouldStop()).isEqualTo(false);
-
-        subject.onErrorResponse(new VolleyError(new NetworkResponse(500, null, null, true)));
-        assertThat(subject.getShouldStop()).isEqualTo(false);
-
-        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
-        subject.onErrorResponse(new VolleyError(new NetworkResponse(501, null, null, true)));
-        assertThat(subject.getShouldStop()).isEqualTo(false);
-
-        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
-        subject.onErrorResponse(new VolleyError(new NetworkResponse(599, null, null, true)));
-        assertThat(subject.getShouldStop()).isEqualTo(false);
-
-        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
-        subject.onErrorResponse(new VolleyError(new NetworkResponse(200, null, null, true)));
-        assertThat(subject.getShouldStop()).isEqualTo(true);
-
-        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
-        subject.onErrorResponse(new VolleyError(new NetworkResponse(499, null, null, true)));
-        assertThat(subject.getShouldStop()).isEqualTo(true);
-
-        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
-        subject.onErrorResponse(new VolleyError(new NetworkResponse(600, null, null, true)));
-        assertThat(subject.getShouldStop()).isEqualTo(true);
-    }
-
-    @Test
-    public void onResponse_shouldSetShouldStopToTrueWhenResponseNot500To599() {
-        RewardedVideoCompletionRequestHandler subject =
-                new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
-
-        assertThat(subject.getShouldStop()).isEqualTo(false);
-
-        subject.onResponse(500);
-        assertThat(subject.getShouldStop()).isEqualTo(false);
-
-        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
-        subject.onResponse(501);
-        assertThat(subject.getShouldStop()).isEqualTo(false);
-
-        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
-        subject.onResponse(599);
-        assertThat(subject.getShouldStop()).isEqualTo(false);
-
-        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
-        subject.onResponse(200);
-        assertThat(subject.getShouldStop()).isEqualTo(true);
-
-        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
-        subject.onResponse(499);
-        assertThat(subject.getShouldStop()).isEqualTo(true);
-
-        subject = new RewardedVideoCompletionRequestHandler(context, "url", "customer_id");
-        subject.onResponse(600);
-        assertThat(subject.getShouldStop()).isEqualTo(true);
-    }
-
-    @Test
-    public void makeRewardedVideoCompletionRequest_shouldRetry() {
-        Handler mockHandler = mock(Handler.class);
-        RewardedVideoCompletionRequestHandler subject =
-                new RewardedVideoCompletionRequestHandler(context, "url", "customer_id",
-                        mockHandler);
-
-        subject.makeRewardedVideoCompletionRequest();
-
-        assertThat(subject.getRetryCount()).isEqualTo(1);
-        verify(mockHandler).postDelayed(any(Runnable.class),
-                eq((long) RewardedVideoCompletionRequestHandler.RETRY_TIMES[0]));
-    }
-
-    @Test
-    public void makeRewardedVideoCompletionRequest_shouldNotRetryIfShouldStopIsSetToTrue() {
-        Handler mockHandler = mock(Handler.class);
-        RewardedVideoCompletionRequestHandler subject =
-                new RewardedVideoCompletionRequestHandler(context, "url", "customer_id",
-                        mockHandler);
-        // This should set shouldStop to true.
-        subject.onResponse(200);
-
-        subject.makeRewardedVideoCompletionRequest();
-
-        assertThat(subject.getShouldStop()).isTrue();
-        verifyZeroInteractions(mockHandler);
-    }
-
-    @Test
-    public void makeRewardedVideoCompletionRequest_shouldNotRetryIfMaxRetriesReached() {
-        Handler mockHandler = mock(Handler.class);
-        RewardedVideoCompletionRequestHandler subject =
-                new RewardedVideoCompletionRequestHandler(context, "url", "customer_id",
-                        mockHandler);
-        subject.setRetryCount(RewardedVideoCompletionRequestHandler.MAX_RETRIES);
-
-        subject.makeRewardedVideoCompletionRequest();
-
-        verifyZeroInteractions(mockHandler);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastAdXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastAdXmlManagerTest.java
deleted file mode 100644
index b7cd5153..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastAdXmlManagerTest.java
+++ /dev/null
@@ -1,174 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.VastUtils;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-import org.w3c.dom.Node;
-
-import static com.mopub.mobileads.test.support.VastUtils.createNode;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class VastAdXmlManagerTest {
-
-    private VastAdXmlManager subject;
-
-    @Test
-    public void getInLineXmlManager_shouldReturnInLineXmlManager() throws Exception {
-        String adXml = "<Ad id=\"223626102\">" +
-                "    <InLine>" +
-                "          <Impression id=\"DART\">" +
-                "                 <![CDATA[https://impression/m/inline]]>" +
-                "          </Impression>" +
-                "    </InLine>" +
-                "    <Wrapper>" +
-                "          <Impression id=\"DART\">" +
-                "                 <![CDATA[https://impression/m/wrapper]]>" +
-                "          </Impression>" +
-                "    </Wrapper>" +
-                "</Ad>";
-
-        Node adNode = createNode(adXml);
-        subject = new VastAdXmlManager(adNode);
-
-        VastInLineXmlManager vastInLineXmlManager = subject.getInLineXmlManager();
-        assertThat(VastUtils.vastTrackersToStrings(vastInLineXmlManager.getImpressionTrackers()))
-                .containsOnly("https://impression/m/inline");
-    }
-
-    @Test
-    public void getInLineXmlManager_withMultipleInLineNodes_shouldReturnFirstInLineXmlManager() throws Exception {
-        String adXml = "<Ad id=\"223626102\">" +
-                "    <InLine>" +
-                "          <Impression id=\"DART\">" +
-                "                 <![CDATA[https://impression/m/inlineOne]]>" +
-                "          </Impression>" +
-                "    </InLine>" +
-                "    <InLine>" +
-                "          <Impression id=\"DART\">" +
-                "                 <![CDATA[https://impression/m/inlineTwo]]>" +
-                "          </Impression>" +
-                "    </InLine>" +
-                "    <Wrapper>" +
-                "          <Impression id=\"DART\">" +
-                "                 <![CDATA[https://impression/m/wrapper]]>" +
-                "          </Impression>" +
-                "    </Wrapper>" +
-                "</Ad>";
-
-        Node adNode = createNode(adXml);
-        subject = new VastAdXmlManager(adNode);
-
-        VastInLineXmlManager vastInLineXmlManager = subject.getInLineXmlManager();
-        assertThat(VastUtils.vastTrackersToStrings(vastInLineXmlManager.getImpressionTrackers()))
-                .containsOnly("https://impression/m/inlineOne");
-    }
-
-    @Test
-    public void getInLineXmlManager_withNoInLineNodes_shouldReturnNull() throws Exception {
-        String adXml = "<Ad id=\"223626102\">" +
-                "    <Wrapper>" +
-                "          <Impression id=\"DART\">" +
-                "                 <![CDATA[https://impression/m/wrapper]]>" +
-                "          </Impression>" +
-                "    </Wrapper>" +
-                "</Ad>";
-
-        Node adNode = createNode(adXml);
-        subject = new VastAdXmlManager(adNode);
-
-        assertThat(subject.getInLineXmlManager()).isNull();
-    }
-
-    @Test
-    public void getWrapperXmlManager_shouldReturnWrapperXmlManager() throws Exception {
-        String adXml = "<Ad id=\"223626102\">" +
-                "    <InLine>" +
-                "          <Impression id=\"DART\">" +
-                "                 <![CDATA[https://impression/m/inline]]>" +
-                "          </Impression>" +
-                "    </InLine>" +
-                "    <Wrapper>" +
-                "          <Impression id=\"DART\">" +
-                "                 <![CDATA[https://impression/m/wrapper]]>" +
-                "          </Impression>" +
-                "    </Wrapper>" +
-                "</Ad>";
-
-        Node adNode = createNode(adXml);
-        subject = new VastAdXmlManager(adNode);
-
-        VastWrapperXmlManager vastWrapperXmlManager = subject.getWrapperXmlManager();
-        assertThat(VastUtils.vastTrackersToStrings(vastWrapperXmlManager.getImpressionTrackers()))
-                .containsOnly("https://impression/m/wrapper");
-    }
-
-    @Test
-    public void getWrapperXmlManager_withMultipleWrapperNodes_shouldReturnFirstWrapperXmlManager() throws Exception {
-        String adXml = "<Ad id=\"223626102\">" +
-                "    <InLine>" +
-                "          <Impression id=\"DART\">" +
-                "                 <![CDATA[https://impression/m/inlineOne]]>" +
-                "          </Impression>" +
-                "    </InLine>" +
-                "    <Wrapper>" +
-                "          <Impression id=\"DART\">" +
-                "                 <![CDATA[https://impression/m/wrapperOne]]>" +
-                "          </Impression>" +
-                "    </Wrapper>" +
-                "    <Wrapper>" +
-                "          <Impression id=\"DART\">" +
-                "                 <![CDATA[https://impression/m/wrapperTwo]]>" +
-                "          </Impression>" +
-                "    </Wrapper>" +
-                "</Ad>";
-
-        Node adNode = createNode(adXml);
-        subject = new VastAdXmlManager(adNode);
-
-        VastWrapperXmlManager vastWrapperXmlManager = subject.getWrapperXmlManager();
-        assertThat(VastUtils.vastTrackersToStrings(vastWrapperXmlManager.getImpressionTrackers()))
-                .containsOnly("https://impression/m/wrapperOne");
-    }
-
-    @Test
-    public void getWrapperXmlManager_withNoWrapperNodes_shouldReturnNull() throws Exception {
-        String adXml = "<Ad id=\"223626102\">" +
-                "    <InLine>" +
-                "          <Impression id=\"DART\">" +
-                "                 <![CDATA[https://impression/m/inline]]>" +
-                "          </Impression>" +
-                "    </InLine>" +
-                "</Ad>";
-
-        Node adNode = createNode(adXml);
-        subject = new VastAdXmlManager(adNode);
-
-        assertThat(subject.getWrapperXmlManager()).isNull();
-    }
-
-    @Test
-    public void getSequence_shouldReturnSequence() throws Exception {
-        String adXml = "<Ad id=\"223626102\" sequence=\"42\">" +
-                "    <InLine>" +
-                "        <Impression id=\"DART\">" +
-                "            <![CDATA[https://impression/m/inline]]>" +
-                "        </Impression>" +
-                "    </InLine>" +
-                "    <Wrapper>" +
-                "        <Impression id=\"DART\">" +
-                "            <![CDATA[https://impression/m/wrapper]]>" +
-                "        </Impression>" +
-                "    </Wrapper>" +
-                "</Ad>";
-
-        Node adNode = createNode(adXml);
-        subject = new VastAdXmlManager(adNode);
-
-        assertThat(subject.getSequence()).isEqualTo("42");
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManagerTest.java
deleted file mode 100644
index 559db818..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManagerTest.java
+++ /dev/null
@@ -1,394 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.VastUtils;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-import org.w3c.dom.Node;
-
-import java.util.List;
-
-import static com.mopub.mobileads.test.support.VastUtils.createNode;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class VastBaseInLineWrapperXmlManagerTest {
-    private VastBaseInLineWrapperXmlManager subject;
-
-    @Test
-    public void getImpressionTrackers_shouldReturnImpressionTrackers() throws Exception {
-        String inLineXml = "<InLine>" +
-                "          <Impression id=\"DART\">" +
-                "                 <![CDATA[https://impression/m/inlineOne]]>" +
-                "          </Impression>" +
-                "          <Impression id=\"DART\">" +
-                "                 <![CDATA[https://impression/m/inlineTwo]]>" +
-                "          </Impression>" +
-                "          <Creatives>" +
-                "                 <Creative>" +
-                "                       <Linear>" +
-                "                           <TrackingEvents>" +
-                "                               <Tracking event=\"close\">" +
-                "                                   <![CDATA[https://tracking/m/close]]>" +
-                "                               </Tracking>" +
-                "                           </TrackingEvents>" +
-                "                       </Linear>" +
-                "                 </Creative>" +
-                "          </Creatives>" +
-                "</InLine>";
-
-        Node inLineNode = createNode(inLineXml);
-        subject = new VastInLineXmlManager(inLineNode);
-
-        assertThat(VastUtils.vastTrackersToStrings(subject.getImpressionTrackers()))
-                .containsOnly("https://impression/m/inlineOne", "https://impression/m/inlineTwo");
-    }
-
-    @Test
-    public void getImpressionTrackers_withNoImpressionTrackers_shouldReturnEmptyList() throws Exception {
-        String inLineXml = "<InLine>" +
-                "</InLine>";
-
-        Node inLineNode = createNode(inLineXml);
-        subject = new VastInLineXmlManager(inLineNode);
-
-        assertThat(subject.getImpressionTrackers()).isEmpty();
-    }
-
-    @Test
-    public void getLinearXmlManagers_shouldReturnLinearXmlManagers() throws Exception {
-        String inLineXml = "<InLine>" +
-                "          <Impression id=\"DART\">" +
-                "                 <![CDATA[https://impression/m/inlineOne]]>" +
-                "          </Impression>" +
-                "          <Impression id=\"DART\">" +
-                "                 <![CDATA[https://impression/m/inlineTwo]]>" +
-                "          </Impression>" +
-                "          <Creatives>" +
-                "                 <Creative>" +
-                "                       <Linear>" +
-                "                           <TrackingEvents>" +
-                "                               <Tracking event=\"close\">" +
-                "                                   <![CDATA[https://tracking/m/closeOne]]>" +
-                "                               </Tracking>" +
-                "                           </TrackingEvents>" +
-                "                       </Linear>" +
-                "                       <!-- There should only be a single Linear, CompanionAds, or NonLinearAds element per Creative -->" +
-                "                       <Linear>" +
-                "                           <TrackingEvents>" +
-                "                               <Tracking event=\"close\">" +
-                "                                   <![CDATA[https://tracking/m/ignored]]>" +
-                "                               </Tracking>" +
-                "                           </TrackingEvents>" +
-                "                       </Linear>" +
-                "                 </Creative>" +
-                "                 <Creative>" +
-                "                       <NonLinearAds>" +
-                "                       </NonLinearAds>" +
-                "                 </Creative>" +
-                "                 <Creative>" +
-                "                       <Linear>" +
-                "                           <TrackingEvents>" +
-                "                               <Tracking event=\"close\">" +
-                "                                   <![CDATA[https://tracking/m/closeTwo]]>" +
-                "                               </Tracking>" +
-                "                           </TrackingEvents>" +
-                "                       </Linear>" +
-                "                 </Creative>" +
-                "          </Creatives>" +
-                "</InLine>";
-
-        Node inLineNode = createNode(inLineXml);
-        subject = new VastInLineXmlManager(inLineNode);
-
-        List<VastLinearXmlManager> linearXmlManagers = subject.getLinearXmlManagers();
-        assertThat(linearXmlManagers).hasSize(2);
-        assertThat(VastUtils.vastTrackersToStrings(linearXmlManagers.get(0).getVideoCloseTrackers()))
-                .containsOnly("https://tracking/m/closeOne");
-        assertThat(VastUtils.vastTrackersToStrings(linearXmlManagers.get(1).getVideoCloseTrackers()))
-                .containsOnly("https://tracking/m/closeTwo");
-    }
-
-    @Test
-    public void getLinearXmlManagers_withNoLinearNodes_shouldReturnEmptyList() throws Exception {
-        String inLineXml = "<InLine>" +
-                "          <Impression id=\"DART\">" +
-                "                 <![CDATA[https://impression/m/inlineOne]]>" +
-                "          </Impression>" +
-                "          <Impression id=\"DART\">" +
-                "                 <![CDATA[https://impression/m/inlineTwo]]>" +
-                "          </Impression>" +
-                "          <Creatives>" +
-                "                 <Creative>" +
-                "                       <NonLinearAds>" +
-                "                           <TrackingEvents>" +
-                "                               <Tracking event=\"close\">" +
-                "                                   <![CDATA[https://tracking/m/close]]>" +
-                "                               </Tracking>" +
-                "                           </TrackingEvents>" +
-                "                       </NonLinearAds>" +
-                "                 </Creative>" +
-                "          </Creatives>" +
-                "</InLine>";
-
-        Node inLineNode = createNode(inLineXml);
-        subject = new VastInLineXmlManager(inLineNode);
-
-        assertThat(subject.getLinearXmlManagers()).isEmpty();
-    }
-
-    @Test
-    public void getLinearXmlManagers_withNoCreativeNodes_shouldReturnEmptyList() throws Exception {
-        String inLineXml = "<InLine>" +
-                "          <Impression id=\"DART\">" +
-                "                 <![CDATA[https://impression/m/inlineOne]]>" +
-                "          </Impression>" +
-                "          <Impression id=\"DART\">" +
-                "                 <![CDATA[https://impression/m/inlineTwo]]>" +
-                "          </Impression>" +
-                "          <Creatives>" +
-                "                       <Linear>" +
-                "                           <TrackingEvents>" +
-                "                               <Tracking event=\"close\">" +
-                "                                   <![CDATA[https://tracking/m/closeTwo]]>" +
-                "                               </Tracking>" +
-                "                           </TrackingEvents>" +
-                "                       </Linear>" +
-                "          </Creatives>" +
-                "</InLine>";
-
-        Node inLineNode = createNode(inLineXml);
-        subject = new VastInLineXmlManager(inLineNode);
-
-        assertThat(subject.getLinearXmlManagers()).isEmpty();
-    }
-
-    @Test
-    public void getLinearXmlManagers_withNoCreativesNodes_shouldReturnEmptyList() throws Exception {
-        String inLineXml = "<InLine>" +
-                "          <Impression id=\"DART\">" +
-                "                 <![CDATA[https://impression/m/inlineOne]]>" +
-                "          </Impression>" +
-                "          <Impression id=\"DART\">" +
-                "                 <![CDATA[https://impression/m/inlineTwo]]>" +
-                "          </Impression>" +
-                "                 <Creative>" +
-                "                       <Linear>" +
-                "                           <TrackingEvents>" +
-                "                               <Tracking event=\"close\">" +
-                "                                   <![CDATA[https://tracking/m/closeTwo]]>" +
-                "                               </Tracking>" +
-                "                           </TrackingEvents>" +
-                "                       </Linear>" +
-                "                 </Creative>" +
-                "</InLine>";
-
-        Node inLineNode = createNode(inLineXml);
-        subject = new VastInLineXmlManager(inLineNode);
-
-        assertThat(subject.getLinearXmlManagers()).isEmpty();
-    }
-
-    @Test
-    public void getCompanionAdXmlManagers_shouldReturnCompanionAdXmlManagers() throws Exception {
-        String inLineXml = "<InLine>" +
-                "          <Impression id=\"DART\">" +
-                "                 <![CDATA[https://impression/m/inlineOne]]>" +
-                "          </Impression>" +
-                "          <Impression id=\"DART\">" +
-                "                 <![CDATA[https://impression/m/inlineTwo]]>" +
-                "          </Impression>" +
-                "          <Creatives>" +
-                "                 <Creative>" +
-                "                       <NonLinearAds>" +
-                "                           <TrackingEvents>" +
-                "                               <Tracking event=\"close\">" +
-                "                                   <![CDATA[https://tracking/m/closeOne]]>" +
-                "                               </Tracking>" +
-                "                           </TrackingEvents>" +
-                "                       </NonLinearAds>" +
-                "                 </Creative>" +
-                "                 <Creative>" +
-                "                     <CompanionAds>" +
-                "                         <Companion>" +
-                "                             <TrackingEvents>" +
-                "                                 <Tracking event=\"creativeView\">" +
-                "                                     <![CDATA[https://tracking/m/closeTwo]]>" +
-                "                                 </Tracking>" +
-                "                             </TrackingEvents>" +
-                "                             <CompanionClickTracking>" +
-                "                                 <![CDATA[https://clicktrackingOne]]>" +
-                "                             </CompanionClickTracking>" +
-                "                         </Companion>"+
-                "                         <Companion>" +
-                "                             <CompanionClickTracking>" +
-                "                                 <![CDATA[https://clicktrackingTwo]]>" +
-                "                             </CompanionClickTracking>" +
-                "                             <TrackingEvents>" +
-                "                                 <Tracking event=\"creativeView\">" +
-                "                                     <![CDATA[https://tracking/m/closeThree]]>" +
-                "                                 </Tracking>" +
-                "                             </TrackingEvents>" +
-                "                         </Companion>"+
-                "                     </CompanionAds>" +
-                "                 </Creative>" +
-                "          </Creatives>" +
-                "</InLine>";
-
-        Node inLineNode = createNode(inLineXml);
-        subject = new VastInLineXmlManager(inLineNode);
-
-        assertThat(subject.getCompanionAdXmlManagers()).hasSize(2);
-        assertThat(VastUtils.vastTrackersToStrings(subject.getCompanionAdXmlManagers().get(0).getClickTrackers()))
-                .containsOnly("https://clicktrackingOne");
-        assertThat(VastUtils.vastTrackersToStrings(subject.getCompanionAdXmlManagers().get(1).getClickTrackers()))
-                .containsOnly("https://clicktrackingTwo");
-    }
-
-    @Test
-    public void getCompanionAdXmlManagers_withNoCompanionNodes_shouldReturnEmptyList() throws Exception {
-        String inLineXml = "<InLine>" +
-                "          <Creatives>" +
-                "                 <Creative>" +
-                "                     <CompanionAds>" +
-                "                         <NotACompanion>" +
-                "                         </NotACompanion>"+
-                "                     </CompanionAds>" +
-                "                 </Creative>" +
-                "          </Creatives>" +
-                "</InLine>";
-
-        Node inLineNode = createNode(inLineXml);
-        subject = new VastInLineXmlManager(inLineNode);
-
-        assertThat(subject.getLinearXmlManagers()).isEmpty();
-    }
-
-    @Test
-    public void getCompanionAdXmlManagers_withNoCompanionAdsNodes_shouldReturnEmptyList() throws Exception {
-        String inLineXml = "<InLine>" +
-                "          <Creatives>" +
-                "                 <Creative>" +
-                "                         <Companion>" +
-                "                             <TrackingEvents>" +
-                "                                 <Tracking event=\"creativeView\">" +
-                "                                     <![CDATA[https://tracking/m/closeThree]]>" +
-                "                                 </Tracking>" +
-                "                             </TrackingEvents>" +
-                "                         </Companion>"+
-                "                 </Creative>" +
-                "          </Creatives>" +
-                "</InLine>";
-
-        Node inLineNode = createNode(inLineXml);
-        subject = new VastInLineXmlManager(inLineNode);
-
-        assertThat(subject.getLinearXmlManagers()).isEmpty();
-    }
-
-    @Test
-    public void getCompanionAdXmlManagers_withNoCreativeNodes_shouldReturnEmptyList() throws Exception {
-        String inLineXml = "<InLine>" +
-                "          <Creatives>" +
-                "                     <CompanionAds>" +
-                "                         <Companion>" +
-                "                             <TrackingEvents>" +
-                "                                 <Tracking event=\"creativeView\">" +
-                "                                     <![CDATA[https://tracking/m/closeThree]]>" +
-                "                                 </Tracking>" +
-                "                             </TrackingEvents>" +
-                "                         </Companion>"+
-                "                     </CompanionAds>" +
-                "          </Creatives>" +
-                "</InLine>";
-
-        Node inLineNode = createNode(inLineXml);
-        subject = new VastInLineXmlManager(inLineNode);
-
-        assertThat(subject.getLinearXmlManagers()).isEmpty();
-    }
-
-    @Test
-    public void getCompanionAdXmlManagers_withNoCreativesNodes_shouldReturnEmptyList() throws Exception {
-        String inLineXml = "<InLine>" +
-                "                 <Creative>" +
-                "                     <CompanionAds>" +
-                "                         <Companion>" +
-                "                             <TrackingEvents>" +
-                "                                 <Tracking event=\"creativeView\">" +
-                "                                     <![CDATA[https://tracking/m/closeThree]]>" +
-                "                                 </Tracking>" +
-                "                             </TrackingEvents>" +
-                "                         </Companion>"+
-                "                     </CompanionAds>" +
-                "                 </Creative>" +
-                "</InLine>";
-
-        Node inLineNode = createNode(inLineXml);
-        subject = new VastInLineXmlManager(inLineNode);
-
-        assertThat(subject.getLinearXmlManagers()).isEmpty();
-    }
-
-    @Test
-    public void getVastExtensionsXmlManager_shouldReturnExtensions() throws Exception {
-        String inLineXml = "<InLine>" +
-                "               <Extensions>" +
-                "                   <Extension>Extension 1</Extension>" +
-                "                   <Extension>Extension 2</Extension>" +
-                "               </Extensions>" +
-                "           </InLine>";
-
-        Node inLineNode = createNode(inLineXml);
-        subject = new VastInLineXmlManager(inLineNode);
-
-        assertThat(subject.getVastExtensionParentXmlManager()).isNotNull();
-        assertThat(subject.getVastExtensionParentXmlManager().getVastExtensionXmlManagers())
-                .hasSize(2);
-    }
-
-    @Test
-    public void getVastExtensionParentXmlManager_withMultipleParentExtensions_shouldReturnFirstParentExtensionOnly() throws Exception {
-        String inLineXml = "<InLine>" +
-                "               <Extensions>" +
-                "                   <Extension>Extension 1</Extension>" +
-                "               </Extensions>" +
-                "               <Extensions>" +
-                "                   <Extension>Extension 2</Extension>" +
-                "                   <Extension>Extension 3</Extension>" +
-                "               </Extensions>" +
-                "           </InLine>";
-
-        Node inLineNode = createNode(inLineXml);
-        subject = new VastInLineXmlManager(inLineNode);
-
-        assertThat(subject.getVastExtensionParentXmlManager()).isNotNull();
-        assertThat(subject.getVastExtensionParentXmlManager().getVastExtensionXmlManagers())
-                .hasSize(1);
-    }
-
-    @Test
-    public void getVastExtensionParentXmlManager_withoutExtensions_shouldReturnNull() throws Exception {
-        String inLineXml = "<InLine>" +
-                "                 <Creative>" +
-                "                     <CompanionAds>" +
-                "                         <Companion>" +
-                "                             <TrackingEvents>" +
-                "                                 <Tracking event=\"creativeView\">" +
-                "                                     <![CDATA[https://tracking/m/closeThree]]>" +
-                "                                 </Tracking>" +
-                "                             </TrackingEvents>" +
-                "                         </Companion>"+
-                "                     </CompanionAds>" +
-                "                 </Creative>" +
-                "           </InLine>";
-
-        Node inLineNode = createNode(inLineXml);
-        subject = new VastInLineXmlManager(inLineNode);
-
-        assertThat(subject.getVastExtensionParentXmlManager()).isNull();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigTest.java
deleted file mode 100644
index 8ff23e7a..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigTest.java
+++ /dev/null
@@ -1,99 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.net.Uri;
-
-import com.mopub.common.MoPubBrowser;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.VastUtils;
-import com.mopub.network.MoPubRequestQueue;
-import com.mopub.network.Networking;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowApplication;
-
-import static com.mopub.common.VolleyRequestMatcher.isUrl;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.argThat;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class VastCompanionAdConfigTest {
-
-    private static final String RESOLVED_CLICKTHROUGH_URL = "https://www.mopub.com/";
-    private static final String CLICKTHROUGH_URL = "deeplink+://navigate?" +
-            "&primaryUrl=bogus%3A%2F%2Furl" +
-            "&fallbackUrl=" + Uri.encode(RESOLVED_CLICKTHROUGH_URL);
-
-    private VastCompanionAdConfig subject;
-    private Context context;
-    @Mock private MoPubRequestQueue mockRequestQueue;
-
-    @Before
-    public void setup() {
-        subject = new VastCompanionAdConfig(123, 456,
-                new VastResource("resource", VastResource.Type.STATIC_RESOURCE, VastResource
-                        .CreativeType.IMAGE, 123, 456),
-                CLICKTHROUGH_URL,
-                VastUtils.stringsToVastTrackers("clickTrackerOne", "clickTrackerTwo"),
-                VastUtils.stringsToVastTrackers("viewTrackerOne", "viewTrackerTwo")
-        );
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-    }
-
-    @Test
-    public void constructor_shouldSetParamsCorrectly() throws Exception {
-        assertThat(subject.getWidth()).isEqualTo(123);
-        assertThat(subject.getHeight()).isEqualTo(456);
-        assertThat(subject.getVastResource().getResource()).isEqualTo("resource");
-        assertThat(subject.getVastResource().getType()).isEqualTo(VastResource.Type.STATIC_RESOURCE);
-        assertThat(subject.getVastResource().getCreativeType())
-                .isEqualTo(VastResource.CreativeType.IMAGE);
-        assertThat(subject.getClickThroughUrl()).isEqualTo(CLICKTHROUGH_URL);
-        assertThat(VastUtils.vastTrackersToStrings(subject.getClickTrackers()))
-                .containsOnly("clickTrackerOne", "clickTrackerTwo");
-        assertThat(VastUtils.vastTrackersToStrings(subject.getCreativeViewTrackers()))
-                .containsOnly("viewTrackerOne", "viewTrackerTwo");
-    }
-
-    @Test
-    public void handleImpression_shouldTrackImpression() throws Exception {
-        subject.handleImpression(context, 123);
-
-        verify(mockRequestQueue).add(argThat(isUrl("viewTrackerOne")));
-        verify(mockRequestQueue).add(argThat(isUrl("viewTrackerTwo")));
-    }
-
-    @Test
-    public void handleClick_shouldNotTrackClick() throws Exception {
-        subject.handleClick(context, 1, null, "dsp_creative_id");
-
-        verifyNoMoreInteractions(mockRequestQueue);
-    }
-
-
-    @Test
-    public void handleClick_shouldOpenMoPubBrowser() throws Exception {
-        subject.handleClick(context, 1, null, "dsp_creative_id");
-
-        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
-        Intent startedActivity = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(startedActivity.getComponent().getClassName())
-                .isEqualTo("com.mopub.common.MoPubBrowser");
-        assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY))
-                .isEqualTo(RESOLVED_CLICKTHROUGH_URL);
-        assertThat(startedActivity.getStringExtra(MoPubBrowser.DSP_CREATIVE_ID))
-                .isEqualTo("dsp_creative_id");
-        assertThat(startedActivity.getData()).isNull();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigXmlManagerTest.java
deleted file mode 100644
index a738a601..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigXmlManagerTest.java
+++ /dev/null
@@ -1,96 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.VastUtils;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-import org.w3c.dom.Node;
-
-import static com.mopub.mobileads.test.support.VastUtils.createNode;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class VastCompanionAdConfigXmlManagerTest {
-
-    private VastCompanionAdXmlManager subject;
-    private Node companionNode;
-
-    @Before
-    public void setup() throws Exception {
-        String companionXml = "<Companion id=\"valid\" height=\"250\" width=\"300\">" +
-                "    <StaticResource creativeType=\"image/png\">https://pngimage</StaticResource>" +
-                "    <TrackingEvents>" +
-                "        <Tracking event=\"creativeView\">https://tracking/creativeView1</Tracking>" +
-                "        <Tracking event=\"creativeView\">https://tracking/creativeView2</Tracking>" +
-                "        <Tracking event=\"creativeView\">https://tracking/creativeView3</Tracking>" +
-                "    </TrackingEvents>" +
-                "    <CompanionClickThrough>https://clickthrough</CompanionClickThrough>" +
-                "    <CompanionClickThrough>https://second_clickthrough</CompanionClickThrough>" +
-                "    <CompanionClickTracking>" +
-                "        <![CDATA[https://clicktrackingOne]]>" +
-                "    </CompanionClickTracking>" +
-                "    <CompanionClickTracking>" +
-                "        <![CDATA[https://clicktrackingTwo]]>" +
-                "    </CompanionClickTracking>" +
-                "    <RandomUnusedTag>This_is_unused</RandomUnusedTag>" +
-                "</Companion>";
-
-        companionNode = createNode(companionXml);
-        subject = new VastCompanionAdXmlManager(companionNode);
-    }
-
-    @Test
-    public void getWidth_shouldReturnWidthAttributes() {
-        assertThat(subject.getWidth()).isEqualTo(300);
-    }
-
-    @Test
-    public void getWidth_withNoWidthAttribute_shouldReturnNull() throws Exception {
-        String companionXml = "<Companion id=\"valid\" height=\"250\">" +
-                "</Companion>";
-
-        companionNode = createNode(companionXml);
-        subject = new VastCompanionAdXmlManager(companionNode);
-
-        assertThat(subject.getWidth()).isNull();
-    }
-
-    @Test
-    public void getHeight_shouldReturnHeightAttributes() {
-        assertThat(subject.getHeight()).isEqualTo(250);
-    }
-
-    @Test
-    public void getHeight_withNoHeightAttribute_shouldReturnNull() throws Exception {
-        String companionXml = "<Companion id=\"valid\" width=\"300\">" +
-                "</Companion>";
-
-        companionNode = createNode(companionXml);
-        subject = new VastCompanionAdXmlManager(companionNode);
-
-        assertThat(subject.getHeight()).isNull();
-    }
-
-    @Test
-    public void getResourceXmlManager_shouldReturnVastResourceXmlManager() throws Exception {
-        VastResourceXmlManager resourceXmlManager = subject.getResourceXmlManager();
-        assertThat(resourceXmlManager.getStaticResource()).isEqualTo("https://pngimage");
-        assertThat(resourceXmlManager.getStaticResourceType()).isEqualTo("image/png");
-    }
-
-    @Test
-    public void getClickThroughUrl_shouldReturnFirstStringUrl() {
-        assertThat(subject.getClickThroughUrl()).isEqualTo("https://clickthrough");
-    }
-
-    @Test
-    public void getClickTrackers_shouldReturnAllUrls() {
-        assertThat(VastUtils.vastTrackersToStrings(subject.getClickTrackers()))
-                .containsOnly("https://clicktrackingOne",
-                        "https://clicktrackingTwo");
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionParentXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionParentXmlManagerTest.java
deleted file mode 100644
index 74faa3ab..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionParentXmlManagerTest.java
+++ /dev/null
@@ -1,40 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import static com.mopub.mobileads.test.support.VastUtils.createNode;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class VastExtensionParentXmlManagerTest {
-    private VastExtensionParentXmlManager subject;
-
-    @Test
-    public void getVastExtensionXmlManagers_shouldReturnExtensionManagers() throws Exception {
-        String parentExtensionXml = "<Extensions>" +
-                "                       <Extension>Extension 1</Extension>" +
-                "                       <Extension>Extension 2</Extension>" +
-                "                    </Extensions>";
-
-        subject = new VastExtensionParentXmlManager(createNode(parentExtensionXml));
-
-        assertThat(subject.getVastExtensionXmlManagers()).isNotNull();
-        assertThat(subject.getVastExtensionXmlManagers()).hasSize(2);
-    }
-
-    @Test
-    public void getVastExtensionXmlManagers_withoutExtensions_shouldReturnEmptyList() throws Exception {
-        String parentExtensionXml = "<Extensions></Extensions>";
-
-        subject = new VastExtensionParentXmlManager(createNode(parentExtensionXml));
-
-        assertThat(subject.getVastExtensionXmlManagers()).isNotNull();
-        assertThat(subject.getVastExtensionXmlManagers()).isEmpty();
-    }
-
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionXmlManagerTest.java
deleted file mode 100644
index 395b2ee6..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionXmlManagerTest.java
+++ /dev/null
@@ -1,100 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import static com.mopub.mobileads.test.support.VastUtils.createNode;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class VastExtensionXmlManagerTest {
-    private VastExtensionXmlManager subject;
-
-    @Test
-    public void getType_shouldReturnExtensionType() throws Exception {
-        String extensionXml = "<Extension type=\"MyExtensionType\"></Extension>";
-
-        subject = new VastExtensionXmlManager(createNode(extensionXml));
-
-        assertThat(subject.getType()).isEqualTo("MyExtensionType");
-    }
-
-    @Test
-    public void getVideoViewabilityTracker_shouldReturnVideoViewabilityTracker() throws Exception {
-        String extensionXml = "<Extension type=\"MoPub\">" +
-                "                  <MoPubViewabilityTracker" +
-                "                          viewablePlaytime=\"2.5\"" +
-                "                          percentViewable=\"50%\">" +
-                "                      <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
-                "                  </MoPubViewabilityTracker>" +
-                "              </Extension>";
-
-        subject = new VastExtensionXmlManager(createNode(extensionXml));
-        VideoViewabilityTracker tracker = subject.getVideoViewabilityTracker();
-
-        assertThat(tracker).isNotNull();
-        assertThat(tracker.getViewablePlaytimeMS()).isEqualTo(2500);
-        assertThat(tracker.getPercentViewable()).isEqualTo(50);
-        assertThat(tracker.getTrackingUrl()).isEqualTo("https://ad.server.com/impression/dot.gif");
-    }
-
-    @Test
-    public void getVideoViewabilityTracker_withoutViewabilityTracker_shouldReturnNull() throws Exception {
-        String extensionXml = "<Extension type=\"MoPub\"></Extension>";
-
-        subject = new VastExtensionXmlManager(createNode(extensionXml));
-        VideoViewabilityTracker tracker = subject.getVideoViewabilityTracker();
-
-        assertThat(tracker).isNull();
-    }
-
-    @Test
-    public void getVideoViewabilityTracker_withoutVieweablePlaytime_shouldReturnNull() throws Exception {
-        String extensionXml = "<Extension type=\"MoPub\">" +
-                "                  <MoPubViewabilityTracker" +
-                "                          percentViewable=\"50%\">" +
-                "                      <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
-                "                  </MoPubViewabilityTracker>" +
-                "              </Extension>";
-
-        subject = new VastExtensionXmlManager(createNode(extensionXml));
-        VideoViewabilityTracker tracker = subject.getVideoViewabilityTracker();
-
-        assertThat(tracker).isNull();
-    }
-
-    @Test
-    public void getVideoViewabilityTracker_withoutPercentViewable_shouldReturnNull() throws Exception {
-        String extensionXml = "<Extension type=\"MoPub\">" +
-                "                  <MoPubViewabilityTracker" +
-                "                          viewablePlaytime=\"2.5\">" +
-                "                      <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
-                "                  </MoPubViewabilityTracker>" +
-                "              </Extension>";
-
-        subject = new VastExtensionXmlManager(createNode(extensionXml));
-        VideoViewabilityTracker tracker = subject.getVideoViewabilityTracker();
-
-        assertThat(tracker).isNull();
-    }
-
-    @Test
-    public void getVideoViewabilityTracker_withoutTrackerUrl_shouldReturnNull() throws Exception {
-        String extensionXml = "<Extension type=\"MoPub\">" +
-                "                  <MoPubViewabilityTracker" +
-                "                          viewablePlaytime=\"2.5\"" +
-                "                          percentViewable=\"50%\">" +
-                "                  </MoPubViewabilityTracker>" +
-                "              </Extension>";
-
-        subject = new VastExtensionXmlManager(createNode(extensionXml));
-        VideoViewabilityTracker tracker = subject.getVideoViewabilityTracker();
-
-        assertThat(tracker).isNull();
-    }
-
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigTest.java
deleted file mode 100644
index 3a636ccb..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigTest.java
+++ /dev/null
@@ -1,110 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-
-import com.mopub.common.MoPubBrowser;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.VastUtils;
-import com.mopub.network.MoPubRequestQueue;
-import com.mopub.network.Networking;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowApplication;
-
-import static com.mopub.common.VolleyRequestMatcher.isUrl;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.argThat;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class VastIconConfigTest {
-
-    private VastIconConfig subject;
-    private Context context;
-    @Mock private MoPubRequestQueue mockRequestQueue;
-    private String dspCreativeId;
-
-    @Before
-    public void setup() {
-        subject = new VastIconConfig(123, 456, 789, 101,
-                new VastResource("resource", VastResource.Type.STATIC_RESOURCE, VastResource
-                        .CreativeType.IMAGE, 123, 456),
-                VastUtils.stringsToVastTrackers("clickTrackerOne", "clickTrackerTwo"),
-                "https://www.mopub.com/",
-                VastUtils.stringsToVastTrackers("viewTrackerOne", "viewTrackerTwo")
-        );
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        dspCreativeId = "dspCreativeId";
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-    }
-
-    @Test
-    public void constructor_shouldSetParamsCorrectly() throws Exception {
-        assertThat(subject.getWidth()).isEqualTo(123);
-        assertThat(subject.getHeight()).isEqualTo(456);
-        assertThat(subject.getOffsetMS()).isEqualTo(789);
-        assertThat(subject.getDurationMS()).isEqualTo(101);
-        assertThat(subject.getVastResource().getResource()).isEqualTo("resource");
-        assertThat(subject.getVastResource().getType()).isEqualTo(VastResource.Type.STATIC_RESOURCE);
-        assertThat(subject.getVastResource().getCreativeType())
-                .isEqualTo(VastResource.CreativeType.IMAGE);
-        assertThat(VastUtils.vastTrackersToStrings(subject.getClickTrackingUris()))
-                .containsOnly("clickTrackerOne", "clickTrackerTwo");
-        assertThat(subject.getClickThroughUri()).isEqualTo("https://www.mopub.com/");
-        assertThat(VastUtils.vastTrackersToStrings(subject.getViewTrackingUris()))
-                .containsOnly("viewTrackerOne", "viewTrackerTwo");
-    }
-
-    @Test
-    public void constructor_withNullOffset_shouldSetOffsetTo0() throws Exception {
-        subject = new VastIconConfig(123, 456, null, 101,
-                new VastResource("resource", VastResource.Type.STATIC_RESOURCE, VastResource
-                        .CreativeType.IMAGE, 123, 456),
-                VastUtils.stringsToVastTrackers("clickTrackerOne", "clickTrackerTwo"),
-                "clickThroughUri",
-                VastUtils.stringsToVastTrackers("viewTrackerOne", "viewTrackerTwo")
-        );
-
-        assertThat(subject.getOffsetMS()).isEqualTo(0);
-    }
-
-    @Test
-    public void handleImpression_shouldTrackImpression() throws Exception {
-        subject.handleImpression(context, 123, "uri");
-
-        verify(mockRequestQueue).add(argThat(isUrl("viewTrackerOne")));
-        verify(mockRequestQueue).add(argThat(isUrl("viewTrackerTwo")));
-    }
-
-    @Test
-    public void handleClick_shouldNotTrackClick() throws Exception {
-        subject.handleClick(context, null, dspCreativeId);
-
-        verifyNoMoreInteractions(mockRequestQueue);
-    }
-
-
-    @Test
-    public void handleClick_shouldOpenMoPubBrowser() throws Exception {
-        subject.handleClick(context, null, dspCreativeId);
-
-        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
-        Intent startedActivity = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(startedActivity.getComponent().getClassName())
-                .isEqualTo("com.mopub.common.MoPubBrowser");
-        assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY))
-                .isEqualTo("https://www.mopub.com/");
-        assertThat(startedActivity.getStringExtra(MoPubBrowser.DSP_CREATIVE_ID))
-                .isEqualTo("dspCreativeId");
-        assertThat(startedActivity.getData()).isNull();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigXmlManagerTest.java
deleted file mode 100644
index 1789c222..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigXmlManagerTest.java
+++ /dev/null
@@ -1,216 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.VastUtils;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-import org.w3c.dom.Node;
-
-import static com.mopub.mobileads.test.support.VastUtils.createNode;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class VastIconConfigXmlManagerTest {
-
-    private VastIconXmlManager subject;
-    private Node iconNode;
-
-    @Before
-    public void setup() throws Exception {
-        String iconXml = "<Icon program=\"program\" width=\"123\" height=\"456\" xPosition=\"789\" " +
-                "yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
-                "duration=\"01:02:03.456\">" +
-                    "<StaticResource creativeType=\"ImAge/JpEg\">" +
-                        "<![CDATA[imageJpeg]]>" +
-                    "</StaticResource>" +
-                    "<IconClicks>" +
-                        "<IconClickThrough>" +
-                            "<![CDATA[clickThroughUri]]>" +
-                        "</IconClickThrough>" +
-                        "<IconClickTracking>" +
-                            "<![CDATA[clickTrackingUri1]]>" +
-                        "</IconClickTracking>" +
-                        "<IconClickTracking>" +
-                            "<![CDATA[clickTrackingUri2]]>" +
-                        "</IconClickTracking>" +
-                    "</IconClicks>" +
-                    "<IconViewTracking>" +
-                        "<![CDATA[viewTrackingUri1]]>" +
-                    "</IconViewTracking>" +
-                    "<IconViewTracking>" +
-                        "<![CDATA[viewTrackingUri2]]>" +
-                    "</IconViewTracking>" +
-                "</Icon>";
-
-        iconNode = createNode(iconXml);
-        subject = new VastIconXmlManager(iconNode);
-    }
-
-    @Test
-    public void getWidth_shouldReturnWidth() throws Exception {
-        assertThat(subject.getWidth()).isEqualTo(123);
-    }
-
-    @Test
-    public void getWidth_withNoWidth_shouldReturnNull() throws Exception {
-        String iconXml = "<Icon program=\"program\" height=\"456\" xPosition=\"789\" " +
-                "yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
-                "duration=\"01:02:03.456\">" +
-                "</Icon>";
-
-        iconNode = createNode(iconXml);
-        subject = new VastIconXmlManager(iconNode);
-        assertThat(subject.getWidth()).isNull();
-    }
-
-    @Test
-    public void getHeight_shouldReturnHeight() throws Exception {
-        assertThat(subject.getHeight()).isEqualTo(456);
-    }
-
-    @Test
-    public void getHeight_withNoHeight_shouldReturnNull() throws Exception {
-        String iconXml = "<Icon program=\"program\" width=\"123\" xPosition=\"789\" " +
-                "yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
-                "duration=\"01:02:03.456\">" +
-                "</Icon>";
-
-        iconNode = createNode(iconXml);
-        subject = new VastIconXmlManager(iconNode);
-        assertThat(subject.getHeight()).isNull();
-    }
-
-    @Test
-    public void getOffsetMS_shouldReturnOffset() throws Exception {
-        assertThat(subject.getOffsetMS()).isEqualTo(3723000);
-    }
-
-    @Test
-    public void getOffsetMS_withNoOffset_shouldReturnNull() throws Exception {
-        String iconXml = "<Icon program=\"program\" width=\"123\" height=\"456\" xPosition=\"789\" " +
-                "yPosition=\"101\" apiFramework=\"apiFramework\" " +
-                "duration=\"01:02:03.456\">" +
-                "</Icon>";
-
-        iconNode = createNode(iconXml);
-        subject = new VastIconXmlManager(iconNode);
-        assertThat(subject.getOffsetMS()).isNull();
-    }
-
-    @Test
-    public void getOffsetMS_withMalformedOffset_shouldReturnNull() throws Exception {
-        String iconXml = "<Icon program=\"program\" width=\"123\" height=\"456\" xPosition=\"789\" " +
-                "yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"malformed\" " +
-                "duration=\"01:02:03.456\">" +
-                "</Icon>";
-
-        iconNode = createNode(iconXml);
-        subject = new VastIconXmlManager(iconNode);
-        assertThat(subject.getOffsetMS()).isNull();
-    }
-
-    @Test
-    public void getDurationMS_shouldReturnDuration() throws Exception {
-        assertThat(subject.getDurationMS()).isEqualTo(3723456);
-    }
-
-    @Test
-    public void getDurationMS_withNoDuration_shouldReturnNull() throws Exception {
-        String iconXml = "<Icon program=\"program\" width=\"123\" height=\"456\" xPosition=\"789\" " +
-                "yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" >" +
-                "</Icon>";
-
-        iconNode = createNode(iconXml);
-        subject = new VastIconXmlManager(iconNode);
-        assertThat(subject.getDurationMS()).isNull();
-    }
-
-    @Test
-    public void getDurationMS_withMalformedDuration_shouldReturnNull() throws Exception {
-        String iconXml = "<Icon program=\"program\" width=\"123\" height=\"456\" xPosition=\"789\" " +
-                "yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
-                "duration=\"malformed\">" +
-                "</Icon>";
-
-        iconNode = createNode(iconXml);
-        subject = new VastIconXmlManager(iconNode);
-        assertThat(subject.getDurationMS()).isNull();
-    }
-
-    @Test
-    public void getResourceXmlManager_shouldReturnVastResourceXmlManager() throws Exception {
-        VastResourceXmlManager resourceXmlManager = subject.getResourceXmlManager();
-        assertThat(resourceXmlManager.getStaticResource()).isEqualTo("imageJpeg");
-        assertThat(resourceXmlManager.getStaticResourceType()).isEqualTo("image/jpeg");
-    }
-
-    @Test
-    public void getClickTrackingUris_shouldReturnClickTrackingUris() throws Exception {
-        assertThat(VastUtils.vastTrackersToStrings(subject.getClickTrackingUris()))
-                .containsOnly("clickTrackingUri1", "clickTrackingUri2");
-    }
-
-    @Test
-    public void getClickTrackingUris_withNoClickTrackingUris_shouldReturnEmptyList() throws Exception {
-        String iconXml = "<Icon program=\"program\" width=\"123\" height=\"456\" xPosition=\"789\" " +
-                "yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
-                "duration=\"01:02:03.456\">" +
-                    "<IconClicks>" +
-                        "<IconClickThrough>" +
-                            "<![CDATA[clickThroughUri]]>" +
-                        "</IconClickThrough>" +
-                    "</IconClicks>" +
-                "</Icon>";
-
-        iconNode = createNode(iconXml);
-        subject = new VastIconXmlManager(iconNode);
-        assertThat(subject.getClickTrackingUris()).isEmpty();
-    }
-
-    @Test
-    public void getClickThroughUri_shouldReturnClickThroughUri() throws Exception {
-        assertThat(subject.getClickThroughUri()).isEqualTo("clickThroughUri");
-    }
-
-    @Test
-    public void getClickThroughUri_withNoClickThroughUri_shouldReturnNull() throws Exception {
-        String iconXml = "<Icon program=\"program\" width=\"123\" height=\"456\" xPosition=\"789\" " +
-                "yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
-                "duration=\"01:02:03.456\">" +
-                "<IconClicks>" +
-                    "<IconClickTracking>" +
-                        "<![CDATA[clickTrackingUri1]]>" +
-                    "</IconClickTracking>" +
-                    "<IconClickTracking>" +
-                        "<![CDATA[clickTrackingUri2]]>" +
-                    "</IconClickTracking>" +
-                "</IconClicks>" +
-                "</Icon>";
-
-        iconNode = createNode(iconXml);
-        subject = new VastIconXmlManager(iconNode);
-        assertThat(subject.getClickThroughUri()).isNull();
-    }
-
-    @Test
-    public void getViewTrackingUris_shouldReturnViewTrackingUris() throws Exception {
-        assertThat(VastUtils.vastTrackersToStrings(subject.getViewTrackingUris()))
-                .containsOnly("viewTrackingUri1", "viewTrackingUri2");
-    }
-
-    @Test
-    public void getViewTrackingUris_withNoViewTrackingUris_shouldReturnEmptyList() throws Exception {
-        String iconXml = "<Icon program=\"program\" width=\"123\" height=\"456\" xPosition=\"789\" " +
-                "yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
-                "duration=\"01:02:03.456\">" +
-                "</Icon>";
-
-        iconNode = createNode(iconXml);
-        subject = new VastIconXmlManager(iconNode);
-        assertThat(subject.getViewTrackingUris()).isEmpty();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java
deleted file mode 100644
index e935461a..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java
+++ /dev/null
@@ -1,484 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.VastUtils;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-import org.w3c.dom.Node;
-
-import java.util.List;
-
-import static com.mopub.mobileads.test.support.VastUtils.createNode;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class VastLinearXmlManagerTest {
-
-    private VastLinearXmlManager subject;
-    private Node linearNode;
-
-    @Before
-    public void setup() throws Exception {
-        String linearXml = "<Linear skipoffset=\"25%\">" +
-                "<Duration>00:00:58</Duration>" +
-                "<TrackingEvents>" +
-                "    <Tracking event=\"creativeView\">" +
-                "        <![CDATA[" +
-                "        https://creativeView/one" +
-                "        ]]>" +
-                "    </Tracking>" +
-                "    <Tracking event=\"creativeView\">" +
-                "        <![CDATA[" +
-                "        https://creativeView/two" +
-                "        ]]>" +
-                "    </Tracking>" +
-                // Ensure empty creativeView event is ignored
-                "    <Tracking event=\"creativeView\"/>" +
-                "    <Tracking event=\"start\">" +
-                "        <![CDATA[" +
-                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
-                "        ]]>" +
-                "    </Tracking>" +
-                "    <Tracking event=\"progress\" offset=\"13%\">" +
-                "        <![CDATA[" +
-                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
-                "        ]]>" +
-                "    </Tracking>" +
-                "    <Tracking event=\"progress\" offset=\"01:01:10.300\">" +
-                "        <![CDATA[" +
-                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
-                "        ]]>" +
-                "    </Tracking>" +
-                // Invalid tracking due to ambiguous offset.
-                "    <Tracking event=\"progress\" offset=\"01:01\">" +
-                "        <![CDATA[" +
-                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
-                "        ]]>" +
-                "    </Tracking>" +
-                // Invalid tracking due to a too-high percentage offset.
-                "    <Tracking event=\"progress\" offset=\"113%\">" +
-                "        <![CDATA[" +
-                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
-                "        ]]>" +
-                "    </Tracking>" +
-                // Invalid tracking due to a negative percentage offset.
-                "    <Tracking event=\"progress\" offset=\"-113%\">" +
-                "        <![CDATA[" +
-                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
-                "        ]]>" +
-                "    </Tracking>" +
-                // Invalid tracking due to a non-number offset
-                "    <Tracking event=\"progress\" offset=\"ten seconds\">" +
-                "        <![CDATA[" +
-                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
-                "        ]]>" +
-                "    </Tracking>" +
-                // Invalid tracking due to a negative offset
-                "    <Tracking event=\"progress\" offset=\"-05:01\">" +
-                "        <![CDATA[" +
-                "        https://negative.tracker.net" +
-                "        ]]>" +
-                "    </Tracking>" +
-                "    <Tracking event=\"midpoint\">" +
-                "        <![CDATA[" +
-                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;" +
-                "        ]]>" +
-                "    </Tracking>" +
-                "    <Tracking event=\"midpoint\">" +
-                "        <![CDATA[" +
-                "        https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?" +
-                "        ]]>" +
-                "    </Tracking>" +
-                "    <Tracking event=\"firstQuartile\">" +
-                "        <![CDATA[" +
-                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;" +
-                "        ]]>" +
-                "    </Tracking>" +
-                "    <Tracking event=\"firstQuartile\">" +
-                "        <![CDATA[" +
-                "        https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?" +
-                "        ]]>" +
-                "    </Tracking>" +
-                "    <Tracking event=\"thirdQuartile\">" +
-                "        <![CDATA[" +
-                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;" +
-                "        ]]>" +
-                "    </Tracking>" +
-                "    <Tracking event=\"thirdQuartile\">" +
-                "        <![CDATA[" +
-                "        https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?" +
-                "        ]]>" +
-                "    </Tracking>" +
-                "    <Tracking event=\"complete\">" +
-                "        <![CDATA[" +
-                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=13;ecn1=1;etm1=0;" +
-                "        ]]>" +
-                "    </Tracking>" +
-                "    <Tracking event=\"complete\">" +
-                "        <![CDATA[" +
-                "        https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.5;sz=1x1;ord=2922389?" +
-                "        ]]>" +
-                "    </Tracking>" +
-                "    <Tracking event=\"close\">" +
-                "        <![CDATA[" +
-                "        https://www.mopub.com/close?q=ignatius" +
-                "        ]]>" +
-                "    </Tracking>" +
-                "    <Tracking event=\"close\">" +
-                "        <![CDATA[" +
-                "        https://www.mopub.com/close?q=j3" +
-                "        ]]>" +
-                "    </Tracking>" +
-                "    <Tracking event=\"closeLinear\">" +
-                "        <![CDATA[" +
-                "        https://www.mopub.com/closeLinear" +
-                "        ]]>" +
-                "    </Tracking>" +
-                "    <Tracking event=\"skip\">" +
-                "        <![CDATA[" +
-                "        https://www.mopub.com/skip?q=ignatius" +
-                "        ]]>" +
-                "    </Tracking>" +
-                "    <Tracking event=\"skip\">" +
-                "        <![CDATA[" +
-                "        https://www.mopub.com/skip?q=j3" +
-                "        ]]>" +
-                "    </Tracking>" +
-                "    <Tracking event=\"mute\">" +
-                "        <![CDATA[" +
-                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=16;ecn1=1;etm1=0;" +
-                "        ]]>" +
-                "    </Tracking>" +
-                "    <Tracking event=\"pause\">" +
-                "        <![CDATA[" +
-                "        https://www.mopub.com/pause?num=1" +
-                "        ]]>" +
-                "    </Tracking>" +
-                "    <Tracking event=\"pause\">" +
-                "        <![CDATA[" +
-                "        https://www.mopub.com/pause?num=2" +
-                "        ]]>" +
-                "    </Tracking>" +
-                "    <Tracking event=\"resume\">" +
-                "        <![CDATA[" +
-                "        https://www.mopub.com/resume?num=1" +
-                "        ]]>" +
-                "    </Tracking>" +
-                "    <Tracking event=\"resume\">" +
-                "        <![CDATA[" +
-                "        https://www.mopub.com/resume?num=2" +
-                "        ]]>" +
-                "    </Tracking>" +
-                "    <Tracking event=\"fullscreen\">" +
-                "        <![CDATA[" +
-                "        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=19;ecn1=1;etm1=0;" +
-                "        ]]>" +
-                "    </Tracking>" +
-                "    <Tracking event=\"fullscreen\">" +
-                "        <![CDATA[" +
-                "        https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.6;sz=1x1;ord=2922389?" +
-                "        ]]>" +
-                "    </Tracking>" +
-                "</TrackingEvents>" +
-                "<AdParameters/>" +
-                "<VideoClicks>" +
-                "    <ClickThrough>" +
-                "        <![CDATA[ https://www.google.com/support/richmedia ]]>" +
-                "    </ClickThrough>" +
-                "    <ClickTracking id=\"DART\">" +
-                "        <![CDATA[" +
-                "        https://ad.doubleclick.net/click%3Bh%3Dv8/3e1b/3/0/%2a/z%3B223626102%3B0-0%3B0%3B47414672%3B255-0/0%3B30477563/30495440/1%3B%3B%7Eaopt%3D0/0/ff/0%3B%7Esscs%3D%3fhttp://s0.2mdn.net/dot.gif" +
-                "        ]]>" +
-                "    </ClickTracking>" +
-                "    <ClickTracking id=\"ThirdParty\">" +
-                "        <![CDATA[" +
-                "        https://ad.doubleclick.net/clk;212442087;33815766;i?https://www.google.com/support/richmedia" +
-                "        ]]>" +
-                "    </ClickTracking>" +
-                "</VideoClicks>" +
-                "<MediaFiles>" +
-                "    <MediaFile id=\"1\" delivery=\"progressive\" type=\"video/quicktime\" bitrate=\"457\"" +
-                "               width=\"300\" height=\"225\">" +
-                "        <![CDATA[" +
-                "        https://s3.amazonaws.com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
-                "        ]]>" +
-                "    </MediaFile>" +
-                "    <MediaFile id=\"2\" delivery=\"progressive\" type=\"video/quicktime\" bitrate=\"457\"" +
-                "               width=\"300\" height=\"225\">" +
-                "        <![CDATA[" +
-                "        https://s3.amazonaws.com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny_2.mp4" +
-                "        ]]>" +
-                "    </MediaFile>" +
-                "</MediaFiles>" +
-                "<Icons>" +
-                "    <Icon program=\"program\" width=\"123\" height=\"234\" xPosition=\"789\" " +
-                "    yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
-                "    duration=\"01:02:03.456\">" +
-                "        <StaticResource creativeType=\"ImAge/JpEg\">" +
-                "           <![CDATA[staticResource1]]>" +
-                "        </StaticResource>" +
-                "    </Icon>" +
-                "    <Icon program=\"program\" width=\"123\" height=\"234\" xPosition=\"789\" " +
-                "    yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
-                "    duration=\"01:02:03.456\">" +
-                "        <StaticResource creativeType=\"ImAge/JpEg\">" +
-                "           <![CDATA[staticResource2]]>" +
-                "        </StaticResource>" +
-                "    </Icon>" +
-                "</Icons>" +
-                "</Linear>";
-
-        linearNode = createNode(linearXml);
-    }
-
-    @Test
-    public void getFractionalTrackers_shouldReturnCorrectValues() {
-        subject = new VastLinearXmlManager(linearNode);
-        List<VastFractionalProgressTracker> trackers = subject.getFractionalProgressTrackers();
-
-        assertThat(trackers.size()).isEqualTo(7);
-
-        VastFractionalProgressTracker tracker0 = trackers.get(0);
-        assertThat(tracker0.trackingFraction()).isEqualTo(0.13f);
-        assertThat(tracker0.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
-
-        VastFractionalProgressTracker tracker1 = trackers.get(1);
-        assertThat(tracker1.trackingFraction()).isEqualTo(0.25f);
-        assertThat(tracker1.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;");
-
-        VastFractionalProgressTracker tracker2 = trackers.get(2);
-        assertThat(tracker2.trackingFraction()).isEqualTo(0.25f);
-        assertThat(tracker2.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?");
-
-        VastFractionalProgressTracker tracker3 = trackers.get(3);
-        assertThat(tracker3.trackingFraction()).isEqualTo(0.5f);
-        assertThat(tracker3.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;");
-
-        VastFractionalProgressTracker tracker4 = trackers.get(4);
-        assertThat(tracker4.trackingFraction()).isEqualTo(0.5f);
-        assertThat(tracker4.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?");
-
-        VastFractionalProgressTracker tracker5 = trackers.get(5);
-        assertThat(tracker5.trackingFraction()).isEqualTo(0.75f);
-        assertThat(tracker5.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;");
-
-        VastFractionalProgressTracker tracker6 = trackers.get(6);
-        assertThat(tracker6.trackingFraction()).isEqualTo(0.75f);
-        assertThat(tracker6.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?");
-    }
-
-    @Test
-    public void getAbsoluteProgressTrackers_shouldReturnCorrectValues() {
-        subject = new VastLinearXmlManager(linearNode);
-        List<VastAbsoluteProgressTracker> trackers = subject.getAbsoluteProgressTrackers();
-
-        assertThat(trackers.size()).isEqualTo(4);
-
-        VastAbsoluteProgressTracker tracker0 = trackers.get(0);
-        assertThat(tracker0.getTrackingMilliseconds()).isEqualTo(0);
-        assertThat(tracker0.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
-
-        VastAbsoluteProgressTracker tracker1 = trackers.get(1);
-        assertThat(tracker1.getTrackingMilliseconds()).isEqualTo(0);
-        assertThat(tracker1.getTrackingUrl()).isEqualTo("https://creativeView/one");
-
-        VastAbsoluteProgressTracker tracker2 = trackers.get(2);
-        assertThat(tracker2.getTrackingMilliseconds()).isEqualTo(0);
-        assertThat(tracker2.getTrackingUrl()).isEqualTo("https://creativeView/two");
-
-        VastAbsoluteProgressTracker tracker3 = trackers.get(3);
-        assertThat(tracker3.getTrackingMilliseconds()).isEqualTo(3670300);
-        assertThat(tracker3.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;" +
-                "src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;" +
-                "rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
-    }
-
-    @Test
-    public void getVideoCompleteTrackers_shouldReturnTheCorrectValue() {
-        subject = new VastLinearXmlManager(linearNode);
-        assertThat(VastUtils.vastTrackersToStrings(subject.getVideoCompleteTrackers()))
-                .containsOnly("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=13;ecn1=1;etm1=0;",
-                        "https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.5;sz=1x1;ord=2922389?");
-    }
-
-    @Test
-    public void getVideoCloseTrackers_shouldReturnTheCorrectValue() {
-        subject = new VastLinearXmlManager(linearNode);
-        assertThat(VastUtils.vastTrackersToStrings(subject.getVideoCloseTrackers()))
-                .containsOnly("https://www.mopub.com/close?q=ignatius",
-                        "https://www.mopub.com/close?q=j3",
-                        "https://www.mopub.com/closeLinear");
-    }
-
-    @Test
-    public void getPauseTrackers_shouldReturnRepeatableVastTrackers() {
-        subject = new VastLinearXmlManager(linearNode);
-        for (VastTracker vastTracker : subject.getPauseTrackers()) {
-            assertThat(vastTracker.isRepeatable());
-        }
-        assertThat(VastUtils.vastTrackersToStrings(subject.getPauseTrackers()))
-                .containsOnly("https://www.mopub.com/pause?num=1",
-                        "https://www.mopub.com/pause?num=2");
-    }
-
-    @Test
-    public void getResumeTrackers_shouldReturnRepeatableVastTrackers() {
-        subject = new VastLinearXmlManager(linearNode);
-        for (VastTracker vastTracker : subject.getResumeTrackers()) {
-            assertThat(vastTracker.isRepeatable());
-        }
-        assertThat(VastUtils.vastTrackersToStrings(subject.getResumeTrackers()))
-                .containsOnly("https://www.mopub.com/resume?num=1",
-                        "https://www.mopub.com/resume?num=2");
-    }
-
-    @Test
-    public void getVideoSkipTrackers_shouldReturnTheCorrectValue() {
-        subject = new VastLinearXmlManager(linearNode);
-        assertThat(VastUtils.vastTrackersToStrings(subject.getVideoSkipTrackers()))
-                .containsOnly("https://www.mopub.com/skip?q=ignatius",
-                        "https://www.mopub.com/skip?q=j3");
-    }
-
-    @Test
-    public void getClickThroughUrl_shouldReturnTheCorrectValue() {
-        subject = new VastLinearXmlManager(linearNode);
-        String url = subject.getClickThroughUrl();
-
-        assertThat(url).isEqualTo("https://www.google.com/support/richmedia");
-    }
-
-    @Test
-    public void getClickTrackers_shouldReturnTheCorrectValue() {
-        subject = new VastLinearXmlManager(linearNode);
-        assertThat(VastUtils.vastTrackersToStrings(subject.getClickTrackers()))
-                .containsOnly("https://ad.doubleclick" +
-                                ".net/click%3Bh%3Dv8/3e1b/3/0/%2a/z%3B223626102%3B0-0%3B0" +
-                                "%3B47414672%3B255-0/0%3B30477563/30495440/1%3B%3B%7Eaopt%3D0/0" +
-                                "/ff/0%3B%7Esscs%3D%3fhttp://s0.2mdn.net/dot.gif",
-                        "https://ad.doubleclick.net/clk;212442087;33815766;i?https://www.google" +
-                                ".com/support/richmedia");
-    }
-
-    @Test
-    public void getSkipOffset_shouldReturnTheCorrectValue() {
-        subject = new VastLinearXmlManager(linearNode);
-        String skipOffset = subject.getSkipOffset();
-
-        assertThat(skipOffset).isEqualTo("25%");
-    }
-
-    @Test
-    public void getSkipOffset_withNoSkipOffsetAttribute_shouldReturnNull() throws Exception {
-        String linearXml = "<Linear>" +
-                "</Linear>";
-
-        Node linearNode = createNode(linearXml);
-        subject = new VastLinearXmlManager(linearNode);
-
-        assertThat(subject.getSkipOffset()).isNull();
-    }
-
-    @Test
-    public void getSkipOffset_withNoSkipOffsetAttributeValue_shouldReturnNull() throws Exception {
-        String linearXml = "<Linear skipoffset=\"\">" +
-                "</Linear>";
-
-        Node linearNode = createNode(linearXml);
-        subject = new VastLinearXmlManager(linearNode);
-
-        assertThat(subject.getSkipOffset()).isNull();
-    }
-
-    @Test
-    public void getMediaXmlManagers_shouldReturnMediaXmlManagers() {
-        subject = new VastLinearXmlManager(linearNode);
-        List<VastMediaXmlManager> mediaXmlManagers = subject.getMediaXmlManagers();
-
-        assertThat(mediaXmlManagers.size()).isEqualTo(2);
-
-        assertThat(mediaXmlManagers.get(0).getMediaUrl()).isEqualTo("https://s3.amazonaws" +
-                ".com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4");
-        assertThat(mediaXmlManagers.get(1).getMediaUrl()).isEqualTo("https://s3.amazonaws" +
-                ".com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny_2.mp4");
-    }
-
-    @Test
-    public void getMediaXmlManagers_withNoMediaFileNode_shouldReturnEmptyList() throws Exception {
-        String linearXml = "<Linear skipoffset=\"25%\">" +
-                "    <MediaFiles>" +
-                "    </MediaFiles>" +
-                "</Linear>";
-
-        Node linearNode = createNode(linearXml);
-        subject = new VastLinearXmlManager(linearNode);
-
-        List<VastMediaXmlManager> mediaXmlManagers = subject.getMediaXmlManagers();
-        assertThat(mediaXmlManagers).isEmpty();
-    }
-
-    @Test
-    public void getMediaXmlManagers_withNoMediaFilesNode_shouldReturnEmptyList() throws Exception {
-        String linearXml = "<Linear skipoffset=\"25%\">" +
-                "    <MediaFile id=\"1\" delivery=\"progressive\" type=\"video/quicktime\" bitrate=\"457\"" +
-                "               width=\"300\" height=\"225\">" +
-                "        <![CDATA[" +
-                "        https://s3.amazonaws.com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
-                "        ]]>" +
-                "    </MediaFile>" +
-                "</Linear>";
-
-        Node linearNode = createNode(linearXml);
-        subject = new VastLinearXmlManager(linearNode);
-
-        List<VastMediaXmlManager> mediaXmlManagers = subject.getMediaXmlManagers();
-        assertThat(mediaXmlManagers).isEmpty();
-    }
-
-    @Test
-    public void getIconXmlManagers_shouldReturnIconXmlManagers() throws Exception {
-        subject = new VastLinearXmlManager(linearNode);
-        List<VastIconXmlManager> iconXmlManagers = subject.getIconXmlManagers();
-
-        assertThat(iconXmlManagers).hasSize(2);
-        assertThat(iconXmlManagers.get(0).getResourceXmlManager().getStaticResource())
-                .isEqualTo("staticResource1");
-        assertThat(iconXmlManagers.get(1).getResourceXmlManager().getStaticResource())
-                .isEqualTo("staticResource2");
-    }
-
-    @Test
-    public void getIconXmlManagers_withNoIconNode_shouldReturnEmptyList() throws Exception {
-        String linearXml = "<Linear skipoffset=\"25%\">" +
-                "    <Icons>" +
-                "    </Icons>" +
-                "</Linear>";
-
-        Node linearNode = createNode(linearXml);
-        subject = new VastLinearXmlManager(linearNode);
-
-        assertThat(subject.getIconXmlManagers()).isEmpty();
-    }
-
-    @Test
-    public void getIconXmlManagers_withNoIconsNode_shouldReturnEmptyList() throws Exception {
-        String linearXml = "<Linear skipoffset=\"25%\">" +
-                "    <Icon program=\"program\" width=\"123\" height=\"234\" xPosition=\"789\" " +
-                "    yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
-                "    duration=\"01:02:03.456\">" +
-                "        <StaticResource creativeType=\"ImAge/JpEg\">" +
-                "           <![CDATA[staticResource1]]>" +
-                "        </StaticResource>" +
-                "    </Icon>" +
-                "</Linear>";
-
-        Node linearNode = createNode(linearXml);
-        subject = new VastLinearXmlManager(linearNode);
-
-        assertThat(subject.getIconXmlManagers()).isEmpty();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastMacroHelperTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastMacroHelperTest.java
deleted file mode 100644
index 9b1cb0ae..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastMacroHelperTest.java
+++ /dev/null
@@ -1,227 +0,0 @@
-package com.mopub.mobileads;
-
-import android.net.Uri;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import java.util.Arrays;
-import java.util.Collections;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class VastMacroHelperTest {
-
-    private static final String ERROR_CODE = "errorcode";
-    private static final String CONTENT_PLAY_HEAD = "contentplayhead";
-    private static final String CACHE_BUSTING = "cachebusting";
-    private static final String ASSET_URI = "asseturi";
-
-    private VastMacroHelper subject;
-    private String defaultUri;
-
-    @Before
-    @SuppressWarnings("unchecked")
-    public void setup() {
-        defaultUri = "https://www.derp.com/herp?errorcode=[ERRORCODE]&contentplayhead=[CONTENTPLAYHEAD]&asseturi=[ASSETURI]&cachebusting=[CACHEBUSTING]";
-        // Suppressing unchecked cast to List<String> with Collections#singletonList(Object)
-        subject = new VastMacroHelper(Collections.singletonList(defaultUri));
-    }
-
-    @Test
-    public void constructor_shouldSetCacheBusting() throws Exception {
-        assertThat(subject.getUris()).containsOnly(
-                "https://www.derp.com/herp?errorcode=&contentplayhead=&asseturi=&cachebusting=" +
-                        getAndCheckCachebusting(subject.getUris().get(0)));
-    }
-
-    @Test
-    @SuppressWarnings("unchecked")
-    public void constructor_shouldCreateRandomCacheBustingValues() throws Exception {
-        VastMacroHelper vastMacroHelper = new VastMacroHelper(Collections.singletonList(defaultUri));
-
-        String uriStr = subject.getUris().get(0);
-        String uriStr2 = vastMacroHelper.getUris().get(0);
-
-        Uri uri = Uri.parse(uriStr);
-        Uri uri2 = Uri.parse(uriStr2);
-
-        String cacheBusting = uri.getQueryParameter(CACHE_BUSTING);
-        String cacheBusting2 = uri2.getQueryParameter(CACHE_BUSTING);
-
-        assertThat(cacheBusting).isNotEqualTo(cacheBusting2);
-    }
-
-    @Test
-    public void withErrorCode_shouldSetErrorCode() throws Exception {
-        subject.withErrorCode(VastErrorCode.XML_PARSING_ERROR);
-        assertThat(subject.getUris()).containsOnly(
-                "https://www.derp.com/herp?errorcode=100&contentplayhead=&asseturi=&cachebusting=" +
-                        getAndCheckCachebusting(subject.getUris().get(0)));
-
-        subject.withErrorCode(VastErrorCode.WRAPPER_TIMEOUT);
-        assertThat(subject.getUris()).containsOnly(
-                "https://www.derp.com/herp?errorcode=301&contentplayhead=&asseturi=&cachebusting=" +
-                        getAndCheckCachebusting(subject.getUris().get(0)));
-
-        subject.withErrorCode(VastErrorCode.NO_ADS_VAST_RESPONSE);
-        assertThat(subject.getUris()).containsOnly(
-                "https://www.derp.com/herp?errorcode=303&contentplayhead=&asseturi=&cachebusting=" +
-                        getAndCheckCachebusting(subject.getUris().get(0)));
-
-        subject.withErrorCode(VastErrorCode.GENERAL_LINEAR_AD_ERROR);
-        assertThat(subject.getUris()).containsOnly(
-                "https://www.derp.com/herp?errorcode=400&contentplayhead=&asseturi=&cachebusting=" +
-                        getAndCheckCachebusting(subject.getUris().get(0)));
-
-        subject.withErrorCode(VastErrorCode.GENERAL_COMPANION_AD_ERROR);
-        assertThat(subject.getUris()).containsOnly(
-                "https://www.derp.com/herp?errorcode=600&contentplayhead=&asseturi=&cachebusting=" +
-                        getAndCheckCachebusting(subject.getUris().get(0)));
-
-        subject.withErrorCode(VastErrorCode.UNDEFINED_ERROR);
-        assertThat(subject.getUris()).containsOnly(
-                "https://www.derp.com/herp?errorcode=900&contentplayhead=&asseturi=&cachebusting=" +
-                        getAndCheckCachebusting(subject.getUris().get(0)));
-    }
-
-    @Test
-    public void withContentPlayHead_shouldFormatTime_shouldSetContentPlayHead() throws Exception {
-        subject.withContentPlayHead(3600000);
-        assertThat(subject.getUris()).containsOnly(
-                "https://www.derp.com/herp?errorcode=&contentplayhead=01:00:00.000&asseturi=&cachebusting=" +
-                        getAndCheckCachebusting(subject.getUris().get(0)));
-
-        subject.withContentPlayHead(360000000);
-        assertThat(subject.getUris()).containsOnly(
-                "https://www.derp.com/herp?errorcode=&contentplayhead=100:00:00.000&asseturi=&cachebusting=" +
-                        getAndCheckCachebusting(subject.getUris().get(0)));
-
-        subject.withContentPlayHead(3599999);
-        assertThat(subject.getUris()).containsOnly(
-                "https://www.derp.com/herp?errorcode=&contentplayhead=00:59:59.999&asseturi=&cachebusting=" +
-                        getAndCheckCachebusting(subject.getUris().get(0)));
-
-        subject.withContentPlayHead(59999);
-        assertThat(subject.getUris()).containsOnly(
-                "https://www.derp.com/herp?errorcode=&contentplayhead=00:00:59.999&asseturi=&cachebusting=" +
-                        getAndCheckCachebusting(subject.getUris().get(0)));
-
-        subject.withContentPlayHead(999);
-        assertThat(subject.getUris()).containsOnly(
-                "https://www.derp.com/herp?errorcode=&contentplayhead=00:00:00.999&asseturi=&cachebusting=" +
-                        getAndCheckCachebusting(subject.getUris().get(0)));
-
-        subject.withContentPlayHead(45296789);
-        assertThat(subject.getUris()).containsOnly(
-                "https://www.derp.com/herp?errorcode=&contentplayhead=12:34:56.789&asseturi=&cachebusting=" +
-                        getAndCheckCachebusting(subject.getUris().get(0)));
-    }
-
-    @Test
-    public void withAssetUri_shouldSetAssetUri() throws Exception {
-        final String expectedAssetUri = "https://thisIsAnAsset.Uri";
-        subject.withAssetUri(expectedAssetUri);
-
-        assertThat(subject.getUris()).containsOnly(
-                "https://www.derp.com/herp?errorcode=&contentplayhead=&asseturi=https%3A%2F%2FthisIsAnAsset.Uri&cachebusting=" +
-                        getAndCheckCachebusting(subject.getUris().get(0)));
-    }
-
-    @Test
-    @SuppressWarnings("unchecked")
-    public void withManyMacros_shouldReplaceAllOfThem() throws Exception {
-        final String multiUrl = "https://www.someurl.com/dosomething?[ERRORCODE][ERRORCODE][CONTENTPLAYHEAD][ERRORCODE][ASSETURI][CONTENTPLAYHEAD][ERRORCODE]";
-        subject = new VastMacroHelper(Collections.singletonList(multiUrl))
-                .withAssetUri("asset")
-                .withContentPlayHead(100000)
-                .withErrorCode(VastErrorCode.UNDEFINED_ERROR);
-
-        assertThat(subject.getUris()).containsOnly(
-                "https://www.someurl.com/dosomething?90090000:01:40.000900asset00:01:40.000900");
-    }
-
-    @Test
-    @SuppressWarnings("unchecked")
-    public void withSpecialCharactersInAsseturi_shouldUrlEncode() {
-        final String specialUrl = "https://www.someurl.com/somedirectory/somemethod?errorcode=[ERRORCODE]&asseturi=[ASSETURI]";
-        subject = new VastMacroHelper(Collections.singletonList(specialUrl))
-                .withErrorCode(VastErrorCode.UNDEFINED_ERROR)
-                .withAssetUri(
-                        "https://aaddss.mmooppuubb.ccoomm:123/method?args=one~`!@#$%^&*()_+-[]{}|:,.<>/");
-
-        assertThat(subject.getUris()).containsOnly(
-                "https://www.someurl.com/somedirectory/somemethod?errorcode=900&asseturi=" +
-                        "https%3A%2F%2Faaddss.mmooppuubb.ccoomm%3A123%2Fmethod%3Fargs%3Done" +
-                        "%7E%60%21%40%23%24%25%5E%26*%28%29_%2B-%5B%5D%7B%7D%7C%3A%2C.%3C%3E%2F");
-    }
-
-    @Test
-    @SuppressWarnings("unchecked")
-    public void withManyUrls_shouldReturnListOfUrls() {
-        final String uriWithNoCacheBusting = defaultUri.replace("&cachebusting=[CACHEBUSTING]", "");
-        final String uriWithTwoAssetUri = uriWithNoCacheBusting + "&asset2=[ASSETURI]";
-        final String uriWithTwoContentPlayHead = uriWithNoCacheBusting + "&cph2=[CONTENTPLAYHEAD]";
-        subject = new VastMacroHelper(Arrays.asList(
-                new String[]{uriWithNoCacheBusting, uriWithTwoAssetUri, uriWithTwoContentPlayHead}));
-        subject.withAssetUri("https://a.ss.et");
-        subject.withErrorCode(VastErrorCode.UNDEFINED_ERROR);
-        subject.withContentPlayHead(500);
-
-        assertThat(subject.getUris().size()).isEqualTo(3);
-        assertThat(subject.getUris().get(0)).isEqualTo(
-                "https://www.derp.com/herp?errorcode=900&contentplayhead=00:00:00.500&asseturi=https%3A%2F%2Fa.ss.et");
-        assertThat(subject.getUris().get(1)).isEqualTo(
-                "https://www.derp.com/herp?errorcode=900&contentplayhead=00:00:00.500&asseturi=https%3A%2F%2Fa.ss.et&asset2=https%3A%2F%2Fa.ss.et");
-        assertThat(subject.getUris().get(2)).isEqualTo(
-                "https://www.derp.com/herp?errorcode=900&contentplayhead=00:00:00.500&asseturi=https%3A%2F%2Fa.ss.et&cph2=00:00:00.500");
-    }
-
-    @Test
-    @SuppressWarnings("unchecked")
-    public void withMalformedUrl_shouldNotAttemptToUrlEncode() {
-        final String malformedUri = "htttttt:////oops [CONTENTPLAYHEAD]this [ERRORCODE]is not [ASSETURI]a url";
-        subject = new VastMacroHelper(Collections.singletonList(malformedUri));
-        subject.withAssetUri("asset").withErrorCode(
-                VastErrorCode.UNDEFINED_ERROR).withContentPlayHead(1);
-
-        assertThat(subject.getUris()).containsOnly(
-                "htttttt:////oops 00:00:00.001this 900is not asseta url");
-    }
-
-    @Test
-    @SuppressWarnings("unchecked")
-    public void withDeeplink_shouldNotAttemptToReformat() {
-        final String deeplink = "thisisadeeplink://reallyreallydeep";
-        subject = new VastMacroHelper(Collections.singletonList(deeplink));
-
-        assertThat(subject.getUris()).containsOnly(deeplink);
-    }
-
-    @Test
-    @SuppressWarnings("unchecked")
-    public void withNormalUri_shouldReturnUnchangedUri() {
-        final String normalUri = "https://www.thisisanormal.uri/with?some=query";
-        subject = new VastMacroHelper(Collections.singletonList(normalUri));
-
-        assertThat(subject.getUris()).containsOnly(normalUri);
-    }
-
-    private String getAndCheckCachebusting(final String uriStr) {
-        Uri uri = Uri.parse(uriStr);
-        String cacheBusting = uri.getQueryParameter(CACHE_BUSTING);
-        assertThat(cacheBusting).isNotEmpty();
-        assertThat(cacheBusting.length()).isEqualTo(8);
-
-        // Will throw if not an int
-        Integer.parseInt(cacheBusting);
-
-        return cacheBusting;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java
deleted file mode 100644
index 7f0d8b98..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java
+++ /dev/null
@@ -1,605 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-
-import com.mopub.common.CacheService;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.DeviceUtils;
-import com.mopub.common.util.test.support.ShadowMoPubHttpUrlConnection;
-import com.mopub.mobileads.test.support.VastUtils;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowLooper;
-
-import java.util.concurrent.Semaphore;
-
-import static com.mopub.mobileads.VastManager.VastManagerListener;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class, shadows = {ShadowMoPubHttpUrlConnection.class})
-public class VastManagerTest {
-    static final String EXTENSIONS_SNIPPET_PLACEHOLDER = "<![CDATA[EXTENSIONS_SNIPPET]]>";
-    static final String TEST_VAST_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>https://dsp.x-team.staging.mopub.com/xml</VASTAdTagURI><Impression>https://myTrackingURL/wrapper/impression1</Impression><Impression>https://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>https://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>https://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>https://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='progress' offset='00:00:03.100'>https://myTrackingURL/wrapper/progress</Tracking><Tracking event='firstQuartile'>https://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>https://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>https://myTrackingURL/wrapper/complete</Tracking><Tracking event='close'>https://myTrackingURL/wrapper/close</Tracking><Tracking event='skip'>https://myTrackingURL/wrapper/skip</Tracking><Tracking event='mute'>https://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>https://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>https://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>https://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>https://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>https://myTrackingURL/wrapper/click</ClickTracking></VideoClicks></Linear></Creative><Creative AdID=\"601364-Companion\"> <CompanionAds><Companion width=\"9000\"></Companion> </CompanionAds></Creative></Creatives><![CDATA[EXTENSIONS_SNIPPET]]><Error><![CDATA[https://wrapperErrorTracker]]></Error></Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>https://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>https://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
-    static final String TEST_NESTED_VAST_XML_STRING = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><VAST version='2.0'><Ad id='57722'><InLine><AdSystem version='1.0'>Tapad</AdSystem><AdTitle><![CDATA[PKW6T_LIV_DSN_Audience_TAPAD_3rd Party Audience Targeting_Action Movi]]></AdTitle><Description/><Impression><![CDATA[https://rtb-test.dev.tapad.com:8080/creative/imp.png?ts=1374099035457&svid=1&creative_id=30731&ctx_type=InApp&ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&liverail_cp=1]]></Impression><Creatives><Creative sequence='1' id='57722'><Linear><TrackingEvents><Tracking event='close'>https://myTrackingURL/wrapper/nested_close</Tracking><Tracking event='skip'>https://myTrackingURL/wrapper/nested_skip</Tracking></TrackingEvents><Duration>00:00:15</Duration><VideoClicks><ClickThrough><![CDATA[https://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=https%3A%2F%2Ftapad.com]]></ClickThrough></VideoClicks><MediaFiles><MediaFile delivery='progressive' bitrate='416' width='800' height='480' type='video/mp4'><![CDATA[https://s3.amazonaws.com/mopub-vast/tapad-video.mp4]]></MediaFile><MediaFile delivery='progressive' bitrate='416' width='300' height='250' type='video/mp4'><![CDATA[https://s3.amazonaws.com/mopub-vast/tapad-video1.mp4]]></MediaFile></MediaFiles></Linear></Creative><Creative AdID=\"601364-Companion\"><CompanionAds><Companion id=\"valid\" height=\"250\" width=\"300\"><StaticResource creativeType=\"image/jpeg\">https://demo.tremormedia.com/proddev/vast/Blistex1.jpg</StaticResource><TrackingEvents><Tracking event=\"creativeView\">https://myTrackingURL/firstCompanionCreativeView</Tracking><Tracking event=\"creativeView\">https://myTrackingURL/secondCompanionCreativeView</Tracking></TrackingEvents><CompanionClickThrough>https://www.tremormedia.com</CompanionClickThrough><CompanionClickTracking><![CDATA[https://companionClickTracking1]]></CompanionClickTracking><CompanionClickTracking><![CDATA[https://companionClickTracking2]]></CompanionClickTracking></Companion></CompanionAds></Creative></Creatives><![CDATA[EXTENSIONS_SNIPPET]]><Error><![CDATA[https://inLineErrorTracker]]></Error></InLine></Ad></VAST>";
-    static final String TEST_VAST_BAD_NEST_URL_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>https://dsp.x-team.staging.mopub.com/xml\"$|||</VASTAdTagURI><Impression>https://myTrackingURL/wrapper/impression1</Impression><Impression>https://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>https://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>https://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>https://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='firstQuartile'>https://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>https://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>https://myTrackingURL/wrapper/complete</Tracking><Tracking event='mute'>https://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>https://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>https://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>https://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>https://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>https://myTrackingURL/wrapper/click</ClickTracking></VideoClicks></Linear></Creative></Creatives></Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>https://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>https://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
-
-    private VastManager subject;
-    private VastManagerListener vastManagerListener;
-    private Activity context;
-    private VastVideoConfig mVastVideoConfig;
-    private Semaphore semaphore;
-    private String dspCreativeId;
-
-    @Before
-    public void setup() {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        CacheService.initializeDiskCache(context);
-        subject = new VastManager(context, true);
-        dspCreativeId = "dspCreativeId";
-        semaphore = new Semaphore(0);
-        vastManagerListener = mock(VastManagerListener.class);
-        doAnswer(new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
-                Object[] args = invocationOnMock.getArguments();
-                VastManagerTest.this.mVastVideoConfig = (VastVideoConfig) args[0];
-                semaphore.release();
-                return null;
-            }
-        }).when(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
-    }
-
-    @After
-    public void tearDown() {
-        CacheService.clearAndNullCaches();
-    }
-
-    private void prepareVastVideoConfiguration() {
-        subject.prepareVastVideoConfiguration(TEST_VAST_XML_STRING, vastManagerListener, dspCreativeId, context);
-
-        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
-        ShadowLooper.runUiThreadTasks();
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_shouldNotifyTheListenerAndContainTheCorrectVastValues() throws Exception {
-        // Vast redirect responses
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING);
-        // Video download response
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
-
-        assertThat(mVastVideoConfig.getNetworkMediaFileUrl()).isEqualTo("https://s3.amazonaws.com/mopub-vast/tapad-video.mp4");
-
-        final String expectedFilePathDiskCache = CacheService.getFilePathDiskCache(mVastVideoConfig.getNetworkMediaFileUrl());
-        assertThat(mVastVideoConfig.getDiskMediaFileUrl()).isEqualTo(expectedFilePathDiskCache);
-
-        assertThat(mVastVideoConfig.getClickThroughUrl()).isEqualTo("https://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=https%3A%2F%2Ftapad.com");
-        assertThat(mVastVideoConfig.getImpressionTrackers().size()).isEqualTo(5);
-
-        // Verify quartile trackers
-        assertThat(mVastVideoConfig.getFractionalTrackers().size()).isEqualTo(3);
-        assertThat(mVastVideoConfig.getFractionalTrackers().get(0).trackingFraction()).isEqualTo(0.25f);
-        assertThat(mVastVideoConfig.getFractionalTrackers().get(1).trackingFraction()).isEqualTo(0.5f);
-        assertThat(mVastVideoConfig.getFractionalTrackers().get(2).trackingFraction()).isEqualTo(0.75f);
-
-        // Verify start tracker.
-        assertThat(mVastVideoConfig.getAbsoluteTrackers().size()).isEqualTo(3);
-        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(0).getTrackingMilliseconds())
-                .isEqualTo(0);
-        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(1).getTrackingMilliseconds())
-                .isEqualTo(0);
-        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(2).getTrackingMilliseconds())
-                .isEqualTo(3100);
-
-        assertThat(mVastVideoConfig.getCompleteTrackers().size()).isEqualTo(1);
-
-        // We specifically added a close tracker and a skip tracker to the nested vast test case as well,
-        // therefore there are two expected trackers total for each type.
-        assertThat(mVastVideoConfig.getCloseTrackers().size()).isEqualTo(2);
-        assertThat(mVastVideoConfig.getSkipTrackers().size()).isEqualTo(2);
-        assertThat(mVastVideoConfig.getClickTrackers().size()).isEqualTo(1);
-
-        final VastCompanionAdConfig vastCompanionAdConfig = mVastVideoConfig.getVastCompanionAd(
-                context.getResources().getConfiguration().orientation);
-        assertThat(vastCompanionAdConfig.getWidth()).isEqualTo(300);
-        assertThat(vastCompanionAdConfig.getHeight()).isEqualTo(250);
-        assertThat(vastCompanionAdConfig.getVastResource().getResource())
-                .isEqualTo("https://demo.tremormedia.com/proddev/vast/Blistex1.jpg");
-        assertThat(vastCompanionAdConfig.getVastResource().getType())
-                .isEqualTo(VastResource.Type.STATIC_RESOURCE);
-        assertThat(vastCompanionAdConfig.getVastResource().getCreativeType())
-                .isEqualTo(VastResource.CreativeType.IMAGE);
-        assertThat(vastCompanionAdConfig.getClickThroughUrl()).isEqualTo("https://www.tremormedia.com");
-
-        assertThat(VastUtils.vastTrackersToStrings(vastCompanionAdConfig.getClickTrackers()))
-                .containsOnly("https://companionClickTracking1",
-                        "https://companionClickTracking2");
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_shouldHandleMultipleRedirects() throws Exception {
-        // Vast redirect responses
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_VAST_XML_STRING);
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_VAST_XML_STRING);
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING);
-        // Video download response
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig
-                .class));
-
-        // at this point it should have 3 sets of data from TEST_VAST_XML_STRING and one set from TEST_NESTED_VAST_XML_STRING
-        assertThat(mVastVideoConfig.getNetworkMediaFileUrl()).isEqualTo("https://s3.amazonaws.com/mopub-vast/tapad-video.mp4");
-        final String expectedFilePathDiskCache = CacheService.getFilePathDiskCache(mVastVideoConfig.getNetworkMediaFileUrl());
-        assertThat(mVastVideoConfig.getDiskMediaFileUrl()).isEqualTo(expectedFilePathDiskCache);
-
-        assertThat(mVastVideoConfig.getClickThroughUrl()).isEqualTo("https://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=https%3A%2F%2Ftapad.com");
-        assertThat(mVastVideoConfig.getImpressionTrackers().size()).isEqualTo(13);
-
-        assertThat(mVastVideoConfig.getAbsoluteTrackers().size()).isEqualTo(9);
-        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(0).getTrackingMilliseconds()).isEqualTo(0);
-        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(1).getTrackingMilliseconds()).isEqualTo(0);
-        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(2).getTrackingMilliseconds()).isEqualTo(0);
-        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(3).getTrackingMilliseconds()).isEqualTo(0);
-        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(4).getTrackingMilliseconds()).isEqualTo(0);
-        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(5).getTrackingMilliseconds()).isEqualTo(0);
-        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(6).getTrackingMilliseconds()).isEqualTo(3100);
-        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(7).getTrackingMilliseconds()).isEqualTo(3100);
-        assertThat(mVastVideoConfig.getAbsoluteTrackers().get(8).getTrackingMilliseconds()).isEqualTo(3100);
-
-
-        assertThat(mVastVideoConfig.getFractionalTrackers().size()).isEqualTo(9);
-        assertThat(mVastVideoConfig.getFractionalTrackers().get(0).trackingFraction()).isEqualTo(0.25f);
-        assertThat(mVastVideoConfig.getFractionalTrackers().get(1).trackingFraction()).isEqualTo(0.25f);
-        assertThat(mVastVideoConfig.getFractionalTrackers().get(2).trackingFraction()).isEqualTo(0.25f);
-        assertThat(mVastVideoConfig.getFractionalTrackers().get(3).trackingFraction()).isEqualTo(0.5f);
-        assertThat(mVastVideoConfig.getFractionalTrackers().get(4).trackingFraction()).isEqualTo(0.5f);
-        assertThat(mVastVideoConfig.getFractionalTrackers().get(5).trackingFraction()).isEqualTo(0.5f);
-        assertThat(mVastVideoConfig.getFractionalTrackers().get(6).trackingFraction()).isEqualTo(0.75f);
-        assertThat(mVastVideoConfig.getFractionalTrackers().get(7).trackingFraction()).isEqualTo(0.75f);
-        assertThat(mVastVideoConfig.getFractionalTrackers().get(8).trackingFraction()).isEqualTo(0.75f);
-
-        assertThat(mVastVideoConfig.getCompleteTrackers().size()).isEqualTo(3);
-        assertThat(mVastVideoConfig.getCloseTrackers().size()).isEqualTo(4);
-        assertThat(mVastVideoConfig.getSkipTrackers().size()).isEqualTo(4);
-        assertThat(mVastVideoConfig.getClickTrackers().size()).isEqualTo(3);
-        assertThat(mVastVideoConfig.getErrorTrackers().size()).isEqualTo(4);
-
-        final VastCompanionAdConfig vastCompanionAdConfig = mVastVideoConfig.getVastCompanionAd(
-                context.getResources().getConfiguration().orientation);
-        assertThat(vastCompanionAdConfig.getWidth()).isEqualTo(300);
-        assertThat(vastCompanionAdConfig.getHeight()).isEqualTo(250);
-        assertThat(vastCompanionAdConfig.getVastResource().getResource())
-                .isEqualTo("https://demo.tremormedia.com/proddev/vast/Blistex1.jpg");
-        assertThat(vastCompanionAdConfig.getVastResource().getType())
-                .isEqualTo(VastResource.Type.STATIC_RESOURCE);
-        assertThat(vastCompanionAdConfig.getVastResource().getCreativeType())
-                .isEqualTo(VastResource.CreativeType.IMAGE);
-        assertThat(vastCompanionAdConfig.getClickThroughUrl()).isEqualTo("https://www.tremormedia.com");
-        assertThat(VastUtils.vastTrackersToStrings(vastCompanionAdConfig.getClickTrackers()))
-                .containsOnly("https://companionClickTracking1",
-                        "https://companionClickTracking2");
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_shouldReturnCorrectVastValuesWhenAVastRedirectFails() throws Exception {
-        // Vast redirect response
-        ShadowMoPubHttpUrlConnection.addPendingResponse(404, "");
-        // Video download response
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
-
-        assertThat(mVastVideoConfig).isNull();
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withNoExtensions_shouldContainTheCorrectDefaultExtensionValues() throws Exception {
-        // Vast redirect response to XML without VAST extensions
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING);
-        // Video download response
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
-
-        assertThat(mVastVideoConfig.getCustomCtaText()).isNull();
-        assertThat(mVastVideoConfig.getCustomSkipText()).isNull();
-        assertThat(mVastVideoConfig.getCustomCloseIconUrl()).isNull();
-        assertThat(mVastVideoConfig.getCustomForceOrientation()).isEqualTo(DeviceUtils.ForceOrientation.FORCE_LANDSCAPE);
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withExtensionsUnderWrapper_shouldContainTheCorrectCustomExtensionValues() throws Exception {
-        // Vast redirect response to XML without extensions
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING);
-        // Video download response
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
-
-        // Add extensions under Wrapper element in TEST_VAST_XML_STRING
-        subject.prepareVastVideoConfiguration(
-                TEST_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
-                        "<Extensions>" +
-                            "<Extension type=\"MoPub\">" +
-                                "<MoPubCtaText>custom CTA text</MoPubCtaText>" +
-                                "<MoPubSkipText>skip</MoPubSkipText>" +
-                                "<MoPubCloseIcon>https://ton.twitter.com/exchange-media/images/v4/star_icon_3x.png</MoPubCloseIcon>" +
-                                "<MoPubForceOrientation>device</MoPubForceOrientation>" +
-                            "</Extension>" +
-                        "</Extensions>"),
-                vastManagerListener,
-                dspCreativeId,
-                context);
-
-        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
-        ShadowLooper.runUiThreadTasks();
-        semaphore.acquire();
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
-
-        // Verify custom extensions
-        assertThat(mVastVideoConfig.getCustomCtaText()).isEqualTo("custom CTA text");
-        assertThat(mVastVideoConfig.getCustomSkipText()).isEqualTo("skip");
-        assertThat(mVastVideoConfig.getCustomCloseIconUrl()).isEqualTo("https://ton.twitter.com/exchange-media/images/v4/star_icon_3x.png");
-        assertThat(mVastVideoConfig.getCustomForceOrientation()).isEqualTo(DeviceUtils.ForceOrientation.DEVICE_ORIENTATION);
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withExtensionsUnderInline_shouldContainTheCorrectCustomExtensionValues() throws Exception {
-        // Vast redirect response to XML with extensions under Inline element
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200,
-                TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
-                        "<Extensions>" +
-                                "<Extension type=\"MoPub\">" +
-                                "<MoPubCtaText>custom CTA text</MoPubCtaText>" +
-                                "<MoPubSkipText>skip</MoPubSkipText>" +
-                                "<MoPubCloseIcon>https://ton.twitter.com/exchange-media/images/v4/star_icon_3x.png</MoPubCloseIcon>" +
-                                "<MoPubForceOrientation>device</MoPubForceOrientation>" +
-                                "</Extension>" +
-                                "</Extensions>"));
-        // Video download response
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
-
-        // Verify custom extensions
-        assertThat(mVastVideoConfig.getCustomCtaText()).isEqualTo("custom CTA text");
-        assertThat(mVastVideoConfig.getCustomSkipText()).isEqualTo("skip");
-        assertThat(mVastVideoConfig.getCustomCloseIconUrl()).isEqualTo("https://ton.twitter.com/exchange-media/images/v4/star_icon_3x.png");
-        assertThat(mVastVideoConfig.getCustomForceOrientation()).isEqualTo(DeviceUtils.ForceOrientation.DEVICE_ORIENTATION);
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withExtensionsUnderBothWrapperAndInline_shouldContainLastParsedCustomExtensionValues() throws Exception {
-        // Vast redirect response to XML with extensions under Inline element in TEST_NESTED_VAST_XML_STRING, will be parsed last
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200,
-                TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
-                        "<Extensions>" +
-                                "<Extension type=\"MoPub\">" +
-                                "<MoPubCtaText>CTA 2</MoPubCtaText>" +
-                                "<MoPubSkipText>skip 2</MoPubSkipText>" +
-                                "<MoPubCloseIcon>https://ton.twitter.com/exchange-media/images/v4/star_icon_3x_2.png</MoPubCloseIcon>" +
-                                "<MoPubForceOrientation>landscape</MoPubForceOrientation>" +
-                                "</Extension>" +
-                                "</Extensions>"));
-        // Video download response
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
-
-        // Also add extensions under Wrapper element in TEST_VAST_XML_STRING
-        subject.prepareVastVideoConfiguration(
-                TEST_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
-                        "<Extensions>" +
-                            "<Extension type=\"MoPub\">" +
-                                "<MoPubCtaText>CTA 1</MoPubCtaText>" +
-                                "<MoPubSkipText>skip 1</MoPubSkipText>" +
-                                "<MoPubCloseIcon>https://ton.twitter.com/exchange-media/images/v4/star_icon_3x_1.png</MoPubCloseIcon>" +
-                                "<MoPubForceOrientation>device orientation</MoPubForceOrientation>" +
-                            "</Extension>" +
-                        "</Extensions>"),
-                vastManagerListener,
-                dspCreativeId,
-                context);
-
-        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
-        ShadowLooper.runUiThreadTasks();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
-
-        // Verify custom extension values are the ones last parsed in TEST_NESTED_VAST_XML_STRING
-        assertThat(mVastVideoConfig.getCustomCtaText()).isEqualTo("CTA 2");
-        assertThat(mVastVideoConfig.getCustomSkipText()).isEqualTo("skip 2");
-        assertThat(mVastVideoConfig.getCustomCloseIconUrl()).isEqualTo("https://ton.twitter.com/exchange-media/images/v4/star_icon_3x_2.png");
-        assertThat(mVastVideoConfig.getCustomForceOrientation()).isEqualTo(DeviceUtils.ForceOrientation.FORCE_LANDSCAPE);
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withCustomCtaTextAsSingleSpace_shouldReturnEmptyString() throws Exception {
-        // Vast redirect response
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200,
-                TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
-                        "<Extensions>" +
-                                "<Extension type=\"MoPub\">" +
-                                "<MoPubCtaText> </MoPubCtaText>" +     // single space, i.e. no text
-                                "</Extension>" +
-                                "</Extensions>"));
-        // Video download response
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
-        assertThat(mVastVideoConfig.getCustomCtaText()).isEmpty();
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withCustomCtaTextLongerThan15Chars_shouldReturnNull() throws Exception {
-        // Vast redirect response
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200,
-                TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
-                        "<Extensions>" +
-                                "<Extension type=\"MoPub\">" +
-                                "<MoPubCtaText>1234567890123456</MoPubCtaText>" +     // 16 chars
-                                "</Extension>" +
-                                "</Extensions>"));
-        // Video download response
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
-        assertThat(mVastVideoConfig.getCustomCtaText()).isNull();
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withCustomSkipTextLongerThan8Chars_shouldReturnNull() throws Exception {
-        // Vast redirect response
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200,
-                TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
-                        "<Extensions>" +
-                                "<Extension type=\"MoPub\">" +
-                                "<MoPubSkipText>123456789</MoPubSkipText>" +     // 9 chars
-                                "</Extension>" +
-                                "</Extensions>"));
-        // Video download response
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
-        assertThat(mVastVideoConfig.getCustomSkipText()).isNull();
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withInvalidCustomForceOrientation_shouldReturnDefaultForceLandscapeOrientation() throws Exception {
-        // Vast redirect response
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200,
-                TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
-                        "<Extensions>" +
-                                "<Extension type=\"MoPub\">" +
-                                "<MoPubForceOrientation>abcd</MoPubForceOrientation>" +   // invalid value
-                                "</Extension>" +
-                                "</Extensions>"));
-        // Video download response
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
-        assertThat(mVastVideoConfig.getCustomForceOrientation()).isEqualTo(DeviceUtils.ForceOrientation.FORCE_LANDSCAPE);
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withCustomForceOrientationInMixedCaseAndUntrimmed_shouldReturnCustomForceOrientation() throws Exception {
-        // Vast redirect response
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200,
-                TEST_NESTED_VAST_XML_STRING.replace(EXTENSIONS_SNIPPET_PLACEHOLDER,
-                        "<Extensions>" +
-                                "<Extension type=\"MoPub\">" +
-                                "<MoPubForceOrientation> PortRAIT  </MoPubForceOrientation>" +
-                                "</Extension>" +
-                                "</Extensions>"));
-        // Video download response
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
-        assertThat(mVastVideoConfig.getCustomForceOrientation()).isEqualTo(DeviceUtils.ForceOrientation.FORCE_PORTRAIT);
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withValidPercentSkipOffset_shouldReturnCorrectValue() throws Exception {
-        // Vast redirect response
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset='25%'>"));
-        // Video download response
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
-
-        assertThat(mVastVideoConfig.getSkipOffsetString()).isEqualTo("25%");
-    }
-
-
-    @Test
-    public void prepareVastVideoConfiguration_withValidAbsoluteSkipOffset_shouldReturnCorrectValue() throws Exception {
-        // Vast redirect response
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset='  00:03:14 '>"));
-        // Video download response
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
-
-        assertThat(mVastVideoConfig.getSkipOffsetString()).isEqualTo("00:03:14");
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withValidAbsoluteSkipOffsetWithExtraSpace_shouldReturnCorrectTrimmedValue() throws Exception {
-        // Vast redirect response
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset='  00:03:14.159 '>"));
-        // Video download response
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
-
-        assertThat(mVastVideoConfig.getSkipOffsetString()).isEqualTo("00:03:14.159");
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withSkipOffsets_shouldReturnLastParsedValue() throws Exception {
-        // Vast redirect response with skipoffset in percent format
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset='25%'>"));
-        // Video download response
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
-
-        // Also add a skipoffset in absolute format
-        subject.prepareVastVideoConfiguration(
-                TEST_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset='00:03:14'>"),
-                vastManagerListener,
-                dspCreativeId,
-                context);
-
-        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
-        ShadowLooper.runUiThreadTasks();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
-
-        // Verify that the last parsed skipoffset value is returned
-        assertThat(mVastVideoConfig.getSkipOffsetString()).isEqualTo("25%");
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withEmptySkipOffset_shouldReturnNull() throws Exception {
-        // Vast redirect response
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING.replace("<Linear>", "<Linear skipoffset=' '>"));
-        // Video download response
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "video_data");
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
-
-        assertThat(mVastVideoConfig.getSkipOffsetString()).isNull();
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withNoMediaUrlInXml_shouldReturnNull() throws Exception {
-        subject.prepareVastVideoConfiguration(TEST_VAST_BAD_NEST_URL_XML_STRING,
-                vastManagerListener, dspCreativeId, context);
-
-        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
-        ShadowLooper.runUiThreadTasks();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
-        assertThat(mVastVideoConfig).isEqualTo(null);
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withNullXml_shouldReturnNull() throws Exception {
-        subject.prepareVastVideoConfiguration(null, vastManagerListener, dspCreativeId, context);
-
-        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
-        ShadowLooper.runUiThreadTasks();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
-        assertThat(mVastVideoConfig).isEqualTo(null);
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withEmptyXml_shouldReturnNull() throws Exception {
-        subject.prepareVastVideoConfiguration("", vastManagerListener, dspCreativeId, context);
-
-        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
-        ShadowLooper.runUiThreadTasks();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
-        assertThat(mVastVideoConfig).isEqualTo(null);
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withVideoInDiskCache_shouldNotDownloadVideo() throws Exception {
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING);
-
-        CacheService.putToDiskCache("https://s3.amazonaws.com/mopub-vast/tapad-video.mp4", "video_data".getBytes());
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-
-        assertThat(ShadowMoPubHttpUrlConnection.getLatestRequestUrl()).isNotNull();
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfig.class));
-        assertThat(mVastVideoConfig.getDiskMediaFileUrl())
-                .isEqualTo(CacheService.getFilePathDiskCache("https://s3.amazonaws.com/mopub-vast/tapad-video.mp4"));
-    }
-
-    @Test
-    public void prepareVastVideoConfiguration_withUninitializedDiskCache_shouldReturnNull() throws Exception {
-        CacheService.clearAndNullCaches();
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING);
-
-        prepareVastVideoConfiguration();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
-        assertThat(mVastVideoConfig).isEqualTo(null);
-    }
-
-    @Test
-    public void cancel_shouldCancelBackgroundProcessingAndNotNotifyListenerWithNull() throws Exception {
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING);
-
-        Robolectric.getBackgroundThreadScheduler().pause();
-
-        subject.prepareVastVideoConfiguration(TEST_VAST_XML_STRING, vastManagerListener, dspCreativeId, context);
-
-        subject.cancel();
-
-        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
-        ShadowLooper.runUiThreadTasks();
-        semaphore.acquire();
-
-        verify(vastManagerListener).onVastVideoConfigurationPrepared(null);
-        assertThat(mVastVideoConfig).isEqualTo(null);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastMediaXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastMediaXmlManagerTest.java
deleted file mode 100644
index e1effa81..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastMediaXmlManagerTest.java
+++ /dev/null
@@ -1,116 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-import org.w3c.dom.Node;
-
-import static com.mopub.mobileads.test.support.VastUtils.createNode;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class VastMediaXmlManagerTest {
-
-    private VastMediaXmlManager subject;
-    private Node mediaNode;
-
-    @Before
-    public void setup() throws Exception {
-        String mediaXml = "<MediaFile id=\"1\" delivery=\"progressive\" type=\"video/quicktime\" " +
-                "bitrate=\"457\"" +
-                "               width=\"300\" height=\"225\">" +
-                "        <![CDATA[" +
-                "        https://s3.amazonaws.com/uploads.hipchat" +
-                ".com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
-                "        ]]>" +
-                "</MediaFile>";
-
-        mediaNode = createNode(mediaXml);
-        subject = new VastMediaXmlManager(mediaNode);
-    }
-
-    @Test
-    public void getWidth_shouldReturnWidthAttribute() {
-        assertThat(subject.getWidth()).isEqualTo(300);
-    }
-
-    @Test
-    public void getWidth_withNoWidthAttribute_shouldReturnNull() throws Exception {
-        String mediaXml = "<MediaFile id=\"1\" delivery=\"progressive\" type=\"video/quicktime\" " +
-                "bitrate=\"457\" height=\"225\">" +
-                "        <![CDATA[" +
-                "        https://s3.amazonaws.com/uploads.hipchat" +
-                ".com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
-                "        ]]>" +
-                "</MediaFile>";
-
-        mediaNode = createNode(mediaXml);
-        subject = new VastMediaXmlManager(mediaNode);
-
-        assertThat(subject.getWidth()).isNull();
-    }
-
-    @Test
-    public void getHeight_shouldReturnHeightAttribute() {
-        assertThat(subject.getHeight()).isEqualTo(225);
-    }
-
-    @Test
-    public void getHeight_withNoHeightAttribute_shouldReturnNull() throws Exception {
-        String mediaXml = "<MediaFile id=\"1\" delivery=\"progressive\" type=\"video/quicktime\" " +
-                "bitrate=\"457\" width=\"300\">" +
-                "        <![CDATA[" +
-                "        https://s3.amazonaws.com/uploads.hipchat" +
-                ".com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
-                "        ]]>" +
-                "</MediaFile>";
-
-        mediaNode = createNode(mediaXml);
-        subject = new VastMediaXmlManager(mediaNode);
-
-        assertThat(subject.getHeight()).isNull();
-    }
-
-    @Test
-    public void getType_shouldReturnMediaFileType() {
-        assertThat(subject.getType()).isEqualTo("video/quicktime");
-    }
-
-    @Test
-    public void getType_withNoTypeAttribute_shouldReturnNull() throws Exception {
-        String mediaXml = "<MediaFile id=\"1\" delivery=\"progressive\" " +
-                "bitrate=\"457\" width=\"300\" height=\"225\">" +
-                "        <![CDATA[" +
-                "        https://s3.amazonaws.com/uploads.hipchat" +
-                ".com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
-                "        ]]>" +
-                "</MediaFile>";
-
-        mediaNode = createNode(mediaXml);
-        subject = new VastMediaXmlManager(mediaNode);
-
-        assertThat(subject.getType()).isNull();
-    }
-
-    @Test
-    public void getMediaUrl_shouldReturnMediaFileUrl() {
-        assertThat(subject.getMediaUrl()).isEqualTo("https://s3.amazonaws.com/uploads.hipchat" +
-                ".com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4");
-    }
-
-    @Test
-    public void getMediaUrl_withNoMediaUrl_shouldReturnNull() throws Exception {
-        String mediaXml = "<MediaFile id=\"1\" delivery=\"progressive\" type=\"video/quicktime\" " +
-                "bitrate=\"457\" width=\"300\" height=\"225\">" +
-                "</MediaFile>";
-
-        mediaNode = createNode(mediaXml);
-        subject = new VastMediaXmlManager(mediaNode);
-
-        assertThat(subject.getMediaUrl()).isNull();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceTest.java
deleted file mode 100644
index 01fcbe31..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceTest.java
+++ /dev/null
@@ -1,202 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.annotation.Config;
-
-import static com.mopub.mobileads.VastResource.fromVastResourceXmlManager;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class VastResourceTest {
-
-    private VastResource subject;
-    @Mock private VastWebView mockVastWebView;
-
-    @Before
-    public void setup() {
-        subject = new VastResource("resource", VastResource.Type.STATIC_RESOURCE,
-                VastResource.CreativeType.IMAGE, 50, 100);
-    }
-
-    @Test
-    public void fromVastResourceXmlManager_withIFrameType_shouldSetIFrameResource() throws Exception {
-        final VastResourceXmlManager resourceXmlManager =
-                VastXmlManagerAggregatorTest.initializeVastResourceXmlManagerMock(
-                        "StaticResource", "image/jpeg", "IFrameResource", "HTMLResource");
-
-        VastResource vastResource =
-                fromVastResourceXmlManager(resourceXmlManager, VastResource.Type.IFRAME_RESOURCE,
-                        50, 100);
-
-        assertThat(vastResource.getResource()).isEqualTo("IFrameResource");
-        assertThat(vastResource.getType())
-                .isEqualTo(VastResource.Type.IFRAME_RESOURCE);
-        assertThat(vastResource.getCreativeType())
-                .isEqualTo(VastResource.CreativeType.NONE);
-    }
-
-    @Test
-    public void fromVastResourceXmlManager_withHTMLType_shouldSetHTMLResource() throws Exception {
-        final VastResourceXmlManager resourceXmlManager =
-                VastXmlManagerAggregatorTest.initializeVastResourceXmlManagerMock(
-                        "StaticResource", "image/jpeg", "IFrameResource", "HTMLResource");
-
-        VastResource vastResource =
-                fromVastResourceXmlManager(resourceXmlManager, VastResource.Type.HTML_RESOURCE, 50,
-                        100);
-
-        assertThat(vastResource.getResource()).isEqualTo("HTMLResource");
-        assertThat(vastResource.getType())
-                .isEqualTo(VastResource.Type.HTML_RESOURCE);
-        assertThat(vastResource.getCreativeType())
-                .isEqualTo(VastResource.CreativeType.NONE);
-    }
-
-    @Test
-    public void fromVastResourceXmlManager_withStaticType_withImageCreativeType_shouldSetImageCreativeType() throws Exception {
-        final VastResourceXmlManager resourceXmlManager =
-                VastXmlManagerAggregatorTest.initializeVastResourceXmlManagerMock(
-                        "StaticResource", "image/jpeg", "IFrameResource", "HTMLResource");
-
-        VastResource vastResource = fromVastResourceXmlManager(resourceXmlManager,
-                VastResource.Type.STATIC_RESOURCE, 50, 100);
-
-        assertThat(vastResource.getResource()).isEqualTo("StaticResource");
-        assertThat(vastResource.getType())
-                .isEqualTo(VastResource.Type.STATIC_RESOURCE);
-        assertThat(vastResource.getCreativeType())
-                .isEqualTo(VastResource.CreativeType.IMAGE);
-    }
-
-    @Test
-    public void fromVastResourceXmlManager_withStaticType_withJavaScriptCreativeType_shouldSetJavascriptCreativeType() throws Exception {
-        final VastResourceXmlManager resourceXmlManager =
-                VastXmlManagerAggregatorTest.initializeVastResourceXmlManagerMock(
-                        "StaticResource", "application/x-javascript", "IFrameResource", "HTMLResource");
-
-        VastResource vastResource = fromVastResourceXmlManager(resourceXmlManager,
-                VastResource.Type.STATIC_RESOURCE, 50, 100);
-
-        assertThat(vastResource.getResource()).isEqualTo("StaticResource");
-        assertThat(vastResource.getType())
-                .isEqualTo(VastResource.Type.STATIC_RESOURCE);
-        assertThat(vastResource.getCreativeType())
-                .isEqualTo(VastResource.CreativeType.JAVASCRIPT);
-    }
-
-    @Test
-    public void fromVastResourceXmlManager_withStaticType_withMissingCreativeType_shouldReturnNull() throws Exception {
-        final VastResourceXmlManager resourceXmlManager =
-                VastXmlManagerAggregatorTest.initializeVastResourceXmlManagerMock(
-                        "StaticResource", null, "IFrameResource", "HTMLResource");
-
-        assertThat(fromVastResourceXmlManager(
-                resourceXmlManager, VastResource.Type.STATIC_RESOURCE, 50, 100)).isNull();
-    }
-
-    @Test
-    public void fromVastResourceXmlManager_withStaticType_withInvalidCreativeType_shouldReturnNull() throws Exception {
-        final VastResourceXmlManager resourceXmlManager =
-                VastXmlManagerAggregatorTest.initializeVastResourceXmlManagerMock(
-                        "StaticResource", "INVALID_CREATIVE_TYPE", "IFrameResource", "HTMLResource");
-
-        assertThat(fromVastResourceXmlManager(
-                resourceXmlManager, VastResource.Type.STATIC_RESOURCE, 50, 100)).isNull();
-    }
-
-    @Test
-    public void fromVastResourceXmlManager_withNoResource_shouldReturnNull() throws Exception {
-        final VastResourceXmlManager resourceXmlManager =
-                VastXmlManagerAggregatorTest.initializeVastResourceXmlManagerMock(
-                        null, null, null, null);
-
-        assertThat(fromVastResourceXmlManager(
-                resourceXmlManager, VastResource.Type.STATIC_RESOURCE, 50, 100)).isNull();
-    }
-
-    @Test
-    public void constructor_shouldInitializeFieldsCorrectly() throws Exception {
-        assertThat(subject.getResource()).isEqualTo("resource");
-        assertThat(subject.getType()).isEqualTo(VastResource.Type.STATIC_RESOURCE);
-        assertThat(subject.getCreativeType()).isEqualTo(VastResource.CreativeType.IMAGE);
-    }
-
-    @Test
-    public void initializeWebView_withIFrameResource_shouldLoadData() throws Exception {
-        subject = new VastResource("resource", VastResource.Type.IFRAME_RESOURCE, VastResource
-                .CreativeType.NONE, 50, 100);
-        subject.initializeWebView(mockVastWebView);
-
-        verify(mockVastWebView).loadData(
-                "<iframe frameborder=\"0\" scrolling=\"no\" marginheight=\"0\" " +
-                        "marginwidth=\"0\" style=\"border: 0px; margin: 0px;\" width=\"50\" " +
-                        "height=\"100\" src=\"resource\"></iframe>");
-    }
-
-    @Test
-    public void initializeWebView_withHTMLResource_shouldLoadData() throws Exception {
-        subject = new VastResource("resource", VastResource.Type.HTML_RESOURCE, VastResource
-                .CreativeType.NONE, 50, 100);
-        subject.initializeWebView(mockVastWebView);
-
-        verify(mockVastWebView).loadData("resource");
-    }
-
-    @Test
-    public void initializeWebView_withStaticResource_withImageCreativeType_shouldLoadData() throws Exception {
-        subject = new VastResource("resource", VastResource.Type.STATIC_RESOURCE, VastResource
-                .CreativeType.IMAGE, 50, 100);
-        subject.initializeWebView(mockVastWebView);
-
-        verify(mockVastWebView).loadData("<html><head></head><body style=\"margin:0;padding:0\">" +
-                "<img src=\"resource\" width=\"100%\" style=\"max-width:100%;max-height:100%;\" />" +
-                "</body></html>");
-    }
-
-    @Test
-    public void initializeWebView_withStaticResource_withJavascriptCreativeType_shouldLoadData() throws Exception {
-        subject = new VastResource("resource", VastResource.Type.STATIC_RESOURCE, VastResource
-                .CreativeType.JAVASCRIPT, 50, 100);
-        subject.initializeWebView(mockVastWebView);
-
-        verify(mockVastWebView).loadData("<script src=\"resource\"></script>");
-    }
-
-    @Test
-    public void getCorrectClickThroughUrl_shouldReturnCorrectClickThroughUrl() throws Exception {
-        subject = new VastResource("resource", VastResource.Type.STATIC_RESOURCE, VastResource
-                .CreativeType.IMAGE, 50, 100);
-        assertThat(subject.getCorrectClickThroughUrl("xml", "web")).isEqualTo("xml");
-
-        subject = new VastResource("resource", VastResource.Type.STATIC_RESOURCE, VastResource
-                .CreativeType.JAVASCRIPT, 50, 100);
-        assertThat(subject.getCorrectClickThroughUrl("xml", "web")).isEqualTo("web");
-
-        subject = new VastResource("resource", VastResource.Type.HTML_RESOURCE, VastResource
-                .CreativeType.NONE, 50, 100);
-        assertThat(subject.getCorrectClickThroughUrl("xml", "web")).isEqualTo("web");
-
-        subject = new VastResource("resource", VastResource.Type.IFRAME_RESOURCE, VastResource
-                .CreativeType.NONE, 50, 100);
-        assertThat(subject.getCorrectClickThroughUrl("xml", "web")).isEqualTo("web");
-
-        subject = new VastResource("resource", VastResource.Type.HTML_RESOURCE, VastResource
-                .CreativeType.NONE, 50, 100);
-        assertThat(subject.getCorrectClickThroughUrl("xml", null)).isNull();
-
-        subject = new VastResource("resource", VastResource.Type.IFRAME_RESOURCE, VastResource
-                .CreativeType.NONE, 50, 100);
-        assertThat(subject.getCorrectClickThroughUrl("xml", null)).isNull();
-
-        subject = new VastResource("resource", VastResource.Type.STATIC_RESOURCE, VastResource
-                .CreativeType.IMAGE, 50, 100);
-        assertThat(subject.getCorrectClickThroughUrl("xml", null)).isEqualTo("xml");
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceXmlManagerTest.java
deleted file mode 100644
index fab514c3..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceXmlManagerTest.java
+++ /dev/null
@@ -1,127 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-import org.w3c.dom.Node;
-
-import static com.mopub.mobileads.test.support.VastUtils.createNode;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class VastResourceXmlManagerTest {
-
-    private VastResourceXmlManager subject;
-    private Node resourceNode;
-
-    @Before
-    public void setup() throws Exception {
-        String resourceXml =
-                "<root>" +
-                    "<StaticResource creativeType=\"ImAge/JpEg\">" +
-                        "<![CDATA[StaticResource]]>" +
-                    "</StaticResource>" +
-                    "<IFrameResource>" +
-                        "<![CDATA[IFrameResource]]>" +
-                    "</IFrameResource>" +
-                    "<HTMLResource>" +
-                        "<![CDATA[HTMLResource]]>" +
-                    "</HTMLResource>" +
-                "</root>";
-
-        resourceNode = createNode(resourceXml);
-        subject = new VastResourceXmlManager(resourceNode);
-    }
-
-    @Test
-    public void getStaticResource_shouldReturnStaticResource() throws Exception {
-        assertThat(subject.getStaticResource()).isEqualTo("StaticResource");
-    }
-
-    @Test
-    public void getStaticResource_withNoStaticResource_shouldReturnNull() throws Exception {
-        String iconXml = "<root>" +
-                    "<IFrameResource>" +
-                        "<![CDATA[IFrameResource]]>" +
-                    "</IFrameResource>" +
-                    "<HTMLResource>" +
-                        "<![CDATA[HTMLResource]]>" +
-                    "</HTMLResource>" +
-                "</root>";
-
-        resourceNode = createNode(iconXml);
-        subject = new VastResourceXmlManager(resourceNode);
-        assertThat(subject.getStaticResource()).isNull();
-    }
-
-    @Test
-    public void getStaticResourceType_shouldReturnLowerCaseStaticResourceType() throws Exception {
-        assertThat(subject.getStaticResourceType()).isEqualTo("image/jpeg");
-    }
-
-    @Test
-    public void getStaticResourceType_withNoStaticCreativeType_shouldReturnNull() throws Exception {
-        String resourceXml = "<root>" +
-                    "<StaticResource>" +
-                        "<![CDATA[StaticResource]]>" +
-                    "</StaticResource>" +
-                    "<IFrameResource>" +
-                        "<![CDATA[IFrameResource]]>" +
-                    "</IFrameResource>" +
-                    "<HTMLResource>" +
-                        "<![CDATA[HTMLResource]]>" +
-                    "</HTMLResource>" +
-                "</root>";
-
-        resourceNode = createNode(resourceXml);
-        subject = new VastResourceXmlManager(resourceNode);
-        assertThat(subject.getStaticResourceType()).isNull();
-    }
-
-    @Test
-    public void getIFrameResource_shouldReturnIFrameResource() throws Exception {
-        assertThat(subject.getIFrameResource()).isEqualTo("IFrameResource");
-    }
-
-    @Test
-    public void getIFrameResource_withNoIFrameResouce_shouldReturnNull() throws Exception {
-        String resourceXml = "<root>" +
-                    "<StaticResource creativeType=\"ImAge/JpEg\">" +
-                        "<![CDATA[StaticResource]]>" +
-                    "</StaticResource>" +
-                    "<HTMLResource>" +
-                        "<![CDATA[HTMLResource]]>" +
-                    "</HTMLResource>" +
-                "</root>";
-
-        resourceNode = createNode(resourceXml);
-        subject = new VastResourceXmlManager(resourceNode);
-        assertThat(subject.getIFrameResource()).isNull();
-    }
-
-    @Test
-    public void getHTMLResource_shouldReturnHTMLResource() throws Exception {
-        assertThat(subject.getHTMLResource()).isEqualTo("HTMLResource");
-    }
-
-    @Test
-    public void getHTMLResource_withNoHTMLResource_shouldReturnNull() throws Exception {
-        String resourceXml = "<root>" +
-                    "<StaticResource creativeType=\"ImAge/JpEg\">" +
-                        "<![CDATA[StaticResource]]>" +
-                    "</StaticResource>" +
-                    "<IFrameResource>" +
-                        "<![CDATA[IFrameResource]]>" +
-                    "</IFrameResource>" +
-                "</root>";
-
-        resourceNode = createNode(resourceXml);
-        subject = new VastResourceXmlManager(resourceNode);
-        assertThat(subject.getHTMLResource()).isNull();
-    }
-
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTaskTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTaskTest.java
deleted file mode 100644
index 3a26eed3..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTaskTest.java
+++ /dev/null
@@ -1,136 +0,0 @@
-package com.mopub.mobileads;
-
-import android.annotation.TargetApi;
-import android.graphics.Bitmap;
-import android.media.MediaMetadataRetriever;
-import android.os.Build;
-import android.widget.ImageView;
-
-import com.mopub.TestSdkHelper;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.anyLong;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Mockito.doThrow;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class VastVideoBlurLastVideoFrameTaskTest {
-    @Mock private MediaMetadataRetriever mockMediaMetadataRetriever;
-    @Mock private ImageView mockBlurredLastVideoFrameImageView;
-    @Mock private Bitmap mockBitmap;
-
-    private VastVideoBlurLastVideoFrameTask subject;
-    private String videoPath;
-    private int videoDuration;
-
-    @Before
-    public void setUp() throws Exception {
-        videoPath = "disk_video_path";
-        videoDuration = 10000;
-
-        when(mockMediaMetadataRetriever.getFrameAtTime(anyLong(), anyInt())).thenReturn(mockBitmap);
-
-        subject = new VastVideoBlurLastVideoFrameTask(mockMediaMetadataRetriever,
-                mockBlurredLastVideoFrameImageView, videoDuration);
-    }
-
-    @Test
-    public void doInBackground_shouldSetVideoPath_shouldUseVideoDurationMinusOffset_shouldReturnTrue() throws Exception {
-        assertThat(subject.doInBackground(videoPath)).isTrue();
-        verify(mockMediaMetadataRetriever).setDataSource(videoPath);
-        verify(mockMediaMetadataRetriever).getFrameAtTime(9800000,
-                MediaMetadataRetriever.OPTION_CLOSEST);
-        verifyNoMoreInteractions(mockMediaMetadataRetriever);
-        assertThat(subject.getBlurredLastVideoFrame()).isEqualTo(mockBitmap);
-    }
-
-    @Test
-    public void doInBackground_whenSetDataSourceThrowsRuntimeException_shouldCatchExceptionAndReturnFalse() throws Exception {
-        doThrow(new RuntimeException()).when(mockMediaMetadataRetriever).setDataSource(anyString());
-
-        assertThat(subject.doInBackground(videoPath)).isFalse();
-        assertThat(subject.getBlurredLastVideoFrame()).isNull();
-    }
-
-    @Test
-    public void doInBackground_whenGetLastFrameReturnsNull_shouldReturnFalse() throws Exception {
-        when(mockMediaMetadataRetriever.getFrameAtTime(anyLong(), anyInt())).thenReturn(null);
-
-        assertThat(subject.doInBackground(videoPath)).isFalse();
-        assertThat(subject.getBlurredLastVideoFrame()).isNull();
-    }
-
-    @Test
-    public void doInBackground_whenVideoPathIsNull_shouldReturnFalse() throws Exception {
-        assertThat(subject.doInBackground((String) null)).isFalse();
-        assertThat(subject.getBlurredLastVideoFrame()).isNull();
-    }
-
-    @Test
-    public void doInBackground_whenVideoPathsArrayIsNull_shouldReturnFalse() throws Exception {
-        assertThat(subject.doInBackground((String[]) null)).isFalse();
-        assertThat(subject.getBlurredLastVideoFrame()).isNull();
-    }
-
-    @Test
-    public void doInBackground_whenVideoPathsArrayIsEmpty_shouldReturnFalse() throws Exception {
-        assertThat(subject.doInBackground(new String[0])).isFalse();
-        assertThat(subject.getBlurredLastVideoFrame()).isNull();
-    }
-
-    @Test
-    public void doInBackground_whenVideoPathsArrayHasMultipleElements_shouldParseFirstElement() throws Exception {
-        assertThat(subject.doInBackground(videoPath, null)).isTrue();
-        assertThat(subject.getBlurredLastVideoFrame()).isEqualTo(mockBitmap);
-    }
-
-    @Test
-    public void doInBackground_whenFirstElementOfVideoPathsArrayIsNull_shouldReturnFalse() throws Exception {
-        assertThat(subject.doInBackground(null, videoPath)).isFalse();
-        assertThat(subject.getBlurredLastVideoFrame()).isNull();
-    }
-
-    @Test
-    public void onPostExecute_whenBlurringSucceeded_shouldSetImageBitmap() throws Exception {
-        subject.onPostExecute(true);
-
-        verify(mockBlurredLastVideoFrameImageView).setImageBitmap(subject.getBlurredLastVideoFrame());
-    }
-
-    @Test
-    public void onPostExecute_whenBlurringFailed_shouldNotSetImageBitmap() throws Exception {
-        subject.onPostExecute(false);
-
-        verify(mockBlurredLastVideoFrameImageView, never()).setImageBitmap(any(Bitmap.class));
-    }
-
-    @Test
-    public void onPostExecute_whenResultIsNull_shouldNotSetImageBitmap() throws Exception {
-        subject.onPostExecute(null);
-
-        verify(mockBlurredLastVideoFrameImageView, never()).setImageBitmap(any(Bitmap.class));
-    }
-
-    @Test
-    public void onPostExecute_whenTaskIsAlreadyCancelled_shouldNotSetImageBitmap() throws Exception {
-        subject.cancel(true);
-
-        subject.onPostExecute(true);
-
-        verify(mockBlurredLastVideoFrameImageView, never()).setImageBitmap(any(Bitmap.class));
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCloseButtonWidgetTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCloseButtonWidgetTest.java
deleted file mode 100644
index 91b85528..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCloseButtonWidgetTest.java
+++ /dev/null
@@ -1,102 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.drawable.BitmapDrawable;
-import android.widget.ImageView;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.resource.CloseButtonDrawable;
-import com.mopub.network.MaxWidthImageLoader;
-import com.mopub.network.MoPubRequestQueue;
-import com.mopub.network.Networking;
-import com.mopub.volley.VolleyError;
-import com.mopub.volley.toolbox.ImageLoader;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Captor;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.eq;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class VastVideoCloseButtonWidgetTest {
-    private Context context;
-    private VastVideoCloseButtonWidget subject;
-
-    private static final String ICON_IMAGE_URL = "iconimageurl";
-
-    @Mock
-    MoPubRequestQueue mockRequestQueue;
-    @Mock
-    private MaxWidthImageLoader mockImageLoader;
-    @Mock
-    private ImageLoader.ImageContainer mockImageContainer;
-    @Mock
-    private Bitmap mockBitmap;
-    @Captor
-    private ArgumentCaptor<ImageLoader.ImageListener> imageCaptor;
-
-    @Before
-    public void setUp() throws Exception {
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-        Networking.setImageLoaderForTesting(mockImageLoader);
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        subject = new VastVideoCloseButtonWidget(context);
-    }
-
-    @Test
-    public void updateCloseButtonIcon_imageListenerOnResponse_shouldUseImageBitmap() throws Exception {
-        when(mockImageContainer.getBitmap()).thenReturn(mockBitmap);
-
-        subject.updateCloseButtonIcon(ICON_IMAGE_URL);
-
-        verify(mockImageLoader).get(eq(ICON_IMAGE_URL), imageCaptor.capture());
-        ImageLoader.ImageListener listener = imageCaptor.getValue();
-        listener.onResponse(mockImageContainer, true);
-        assertThat(((BitmapDrawable) subject.getImageView().getDrawable()).getBitmap()).isEqualTo(mockBitmap);
-    }
-
-    @Test
-    public void updateImage_imageListenerOnResponseWhenReturnedBitMapIsNull_shouldUseDefaultCloseButtonDrawable() throws Exception {
-        final ImageView imageViewSpy = spy(subject.getImageView());
-        subject.setImageView(imageViewSpy);
-
-        when(mockImageContainer.getBitmap()).thenReturn(null);
-
-        subject.updateCloseButtonIcon(ICON_IMAGE_URL);
-
-        verify(mockImageLoader).get(eq(ICON_IMAGE_URL), imageCaptor.capture());
-        ImageLoader.ImageListener listener = imageCaptor.getValue();
-        listener.onResponse(mockImageContainer, true);
-        verify(imageViewSpy, never()).setImageBitmap(any(Bitmap.class));
-        assertThat(subject.getImageView().getDrawable()).isInstanceOf(CloseButtonDrawable.class);
-    }
-
-    @Test
-    public void updateImage_imageListenerOnErrorResponse_shouldUseDefaultCloseButtonDrawable() throws Exception {
-        final ImageView imageViewSpy = spy(subject.getImageView());
-        subject.setImageView(imageViewSpy);
-
-        subject.updateCloseButtonIcon(ICON_IMAGE_URL);
-
-        verify(mockImageLoader).get(eq(ICON_IMAGE_URL), imageCaptor.capture());
-        ImageLoader.ImageListener listener = imageCaptor.getValue();
-        listener.onErrorResponse(new VolleyError());
-        verify(imageViewSpy, never()).setImageBitmap(any(Bitmap.class));
-        assertThat(subject.getImageView().getDrawable()).isInstanceOf(CloseButtonDrawable.class);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoConfigTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoConfigTest.java
deleted file mode 100644
index ac31db25..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoConfigTest.java
+++ /dev/null
@@ -1,535 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.content.res.Configuration;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.VastUtils;
-import com.mopub.network.MoPubRequestQueue;
-import com.mopub.network.Networking;
-
-import org.json.JSONObject;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowApplication;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-import static com.mopub.common.VolleyRequestMatcher.isUrl;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.argThat;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class VastVideoConfigTest {
-
-    @Mock MoPubRequestQueue mockRequestQueue;
-    private Activity activity;
-    private VastVideoConfig subject;
-
-    @Before
-    public void setup() {
-        activity = spy(Robolectric.buildActivity(Activity.class).create().get());
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-        subject = new VastVideoConfig();
-        subject.setNetworkMediaFileUrl("video_url");
-    }
-
-    @Test
-    public void addFractionalTrackers_multipleTimes_shouldBeSorted() throws Exception {
-        ArrayList<VastFractionalProgressTracker> testSet1 = new ArrayList<VastFractionalProgressTracker>();
-        testSet1.add(new VastFractionalProgressTracker("test1a", 0.24f));
-        testSet1.add(new VastFractionalProgressTracker("test1b", 0.5f));
-        testSet1.add(new VastFractionalProgressTracker("test1c", 0.91f));
-
-        ArrayList<VastFractionalProgressTracker> testSet2 = new ArrayList<VastFractionalProgressTracker>();
-        testSet2.add(new VastFractionalProgressTracker("test2a", 0.14f));
-        testSet2.add(new VastFractionalProgressTracker("test2b", 0.6f));
-        testSet2.add(new VastFractionalProgressTracker("test2c", 0.71f));
-
-        VastVideoConfig subject = new VastVideoConfig();
-
-        subject.addFractionalTrackers(testSet1);
-        subject.addFractionalTrackers(testSet2);
-
-        assertThat(subject.getFractionalTrackers()).isSorted();
-    }
-
-    @Test
-    public void addAbsoluteTrackers_multipleTimes_shouldBesSorted() throws Exception {
-        ArrayList<VastAbsoluteProgressTracker> testSet1 = new ArrayList<VastAbsoluteProgressTracker>();
-        testSet1.add(new VastAbsoluteProgressTracker("test1a", 1000));
-        testSet1.add(new VastAbsoluteProgressTracker("test1b", 10000));
-        testSet1.add(new VastAbsoluteProgressTracker("test1c", 50000));
-
-        ArrayList<VastAbsoluteProgressTracker> testSet2 = new ArrayList<VastAbsoluteProgressTracker>();
-        testSet2.add(new VastAbsoluteProgressTracker("test2a", 1100));
-        testSet2.add(new VastAbsoluteProgressTracker("test2b", 9000));
-        testSet2.add(new VastAbsoluteProgressTracker("test2c", 62000));
-
-        VastVideoConfig subject = new VastVideoConfig();
-
-        subject.addAbsoluteTrackers(testSet1);
-        subject.addAbsoluteTrackers(testSet2);
-
-        assertThat(subject.getAbsoluteTrackers()).isSorted();
-    }
-
-    @Test
-    public void addVideoTrackers_withValidJSON_shouldHydrateUrls() throws Exception {
-        final JSONObject videoTrackers = new JSONObject("{" +
-                    "urls: [" +
-                        "\"http://mopub.com/%%VIDEO_EVENT%%/foo\"," +
-                        "\"http://mopub.com/%%VIDEO_EVENT%%/bar\"" +
-                    "]," +
-                    "events: [ \"start\" ]" +
-                "}");
-        VastVideoConfig subject = new VastVideoConfig();
-
-        subject.addVideoTrackers(videoTrackers);
-
-        final List<VastAbsoluteProgressTracker> trackers = subject.getAbsoluteTrackers();
-        assertThat(trackers.size()).isEqualTo(2);
-        assertAbsoluteTracker(trackers.get(0), "http://mopub.com/start/foo", 0);
-        assertAbsoluteTracker(trackers.get(1), "http://mopub.com/start/bar", 0);
-    }
-
-    @Test
-    public void addVideoTrackers_withStartEvent_shouldAddAbsoluteTrackerWith0Ms() throws Exception {
-        final JSONObject videoTrackers = new JSONObject("{" +
-                    "urls: [ \"http://mopub.com/%%VIDEO_EVENT%%/foo\" ]," +
-                    "events: [ \"start\" ]" +
-                "}");
-        VastVideoConfig subject = new VastVideoConfig();
-
-        subject.addVideoTrackers(videoTrackers);
-
-        final List<VastAbsoluteProgressTracker> trackers = subject.getAbsoluteTrackers();
-        assertThat(trackers.size()).isEqualTo(1);
-        assertAbsoluteTracker(trackers.get(0), "http://mopub.com/start/foo", 0);
-    }
-
-    @Test
-    public void addVideoTrackers_withFirstQuartileEvent_shouldAddFractionalTrackerWithQuarterFraction() throws Exception {
-        final JSONObject videoTrackers = new JSONObject("{" +
-                    "urls: [ \"http://mopub.com/%%VIDEO_EVENT%%/foo\" ]," +
-                    "events: [ \"firstQuartile\" ]" +
-                "}");
-        VastVideoConfig subject = new VastVideoConfig();
-
-        subject.addVideoTrackers(videoTrackers);
-
-        final List<VastFractionalProgressTracker> trackers = subject.getFractionalTrackers();
-        assertThat(trackers.size()).isEqualTo(1);
-        assertFractionalTracker(trackers.get(0), "http://mopub.com/firstQuartile/foo", 0.25f);
-    }
-
-    @Test
-    public void addVideoTrackers_withMidpointEvent_shouldAddFractionalTrackerWithHalfFraction() throws Exception {
-        final JSONObject videoTrackers = new JSONObject("{" +
-                    "urls: [ \"http://mopub.com/%%VIDEO_EVENT%%/foo\" ]," +
-                    "events: [ \"midpoint\" ]" +
-                "}");
-        VastVideoConfig subject = new VastVideoConfig();
-
-        subject.addVideoTrackers(videoTrackers);
-
-        final List<VastFractionalProgressTracker> trackers = subject.getFractionalTrackers();
-        assertThat(trackers.size()).isEqualTo(1);
-        assertFractionalTracker(trackers.get(0), "http://mopub.com/midpoint/foo", 0.5f);
-    }
-
-    @Test
-    public void addVideoTrackers_withThirdQuartileEvent_shouldAddFractionalTrackerWithThirdFraction() throws Exception {
-        final JSONObject videoTrackers = new JSONObject("{" +
-                    "urls: [ \"http://mopub.com/%%VIDEO_EVENT%%/foo\" ]," +
-                    "events: [ \"thirdQuartile\" ]" +
-                "}");
-        VastVideoConfig subject = new VastVideoConfig();
-
-        subject.addVideoTrackers(videoTrackers);
-
-        final List<VastFractionalProgressTracker> trackers = subject.getFractionalTrackers();
-        assertThat(trackers.size()).isEqualTo(1);
-        assertFractionalTracker(trackers.get(0), "http://mopub.com/thirdQuartile/foo", 0.75f);
-    }
-
-    @Test
-    public void addVideoTrackers_withCompleteEvent_shouldAddCompleteTracker() throws Exception {
-        final JSONObject videoTrackers = new JSONObject("{" +
-                    "urls: [ \"http://mopub.com/%%VIDEO_EVENT%%/foo\" ]," +
-                    "events: [ \"complete\" ]" +
-                "}");
-        VastVideoConfig subject = new VastVideoConfig();
-
-        subject.addVideoTrackers(videoTrackers);
-
-        final List<VastTracker> trackers = subject.getCompleteTrackers();
-        assertThat(trackers.size()).isEqualTo(1);
-        assertTracker(trackers.get(0), "http://mopub.com/complete/foo");
-    }
-
-    @Test
-    public void addVideoTrackers_withCompanionAdViewEvent_shouldAddCreativeViewTracker() throws Exception {
-        final JSONObject videoTrackers = new JSONObject("{" +
-                    "urls: [ \"http://mopub.com/%%VIDEO_EVENT%%/foo\" ]," +
-                    "events: [ \"companionAdView\" ]" +
-                "}");
-        VastVideoConfig subject = new VastVideoConfig();
-        addCompanionAds(subject);
-
-        subject.addVideoTrackers(videoTrackers);
-
-        final List<VastTracker> landscapeTrackers = subject.getVastCompanionAd(
-                Configuration.ORIENTATION_LANDSCAPE).getCreativeViewTrackers();
-        final List<VastTracker> portraitTrackers = subject.getVastCompanionAd(
-                Configuration.ORIENTATION_PORTRAIT).getCreativeViewTrackers();
-        assertThat(landscapeTrackers.size()).isEqualTo(2);
-        assertThat(portraitTrackers.size()).isEqualTo(2);
-        // First tracker is irrelevant and just necessary for test setup
-        assertTracker(landscapeTrackers.get(1), "http://mopub.com/companionAdView/foo");
-        assertTracker(portraitTrackers.get(1), "http://mopub.com/companionAdView/foo");
-    }
-
-    @Test
-    public void addVideoTrackers_withCompanionClickEvent_shouldAddCreativeClickTracker() throws Exception {
-        final JSONObject videoTrackers = new JSONObject("{" +
-                    "urls: [ \"http://mopub.com/%%VIDEO_EVENT%%/foo\" ]," +
-                    "events: [ \"companionAdClick\" ]" +
-                "}");
-        VastVideoConfig subject = new VastVideoConfig();
-        addCompanionAds(subject);
-
-        subject.addVideoTrackers(videoTrackers);
-
-        final List<VastTracker> landscapeTrackers = subject.getVastCompanionAd(
-                Configuration.ORIENTATION_LANDSCAPE).getClickTrackers();
-        final List<VastTracker> portraitTrackers = subject.getVastCompanionAd(
-                Configuration.ORIENTATION_PORTRAIT).getClickTrackers();
-        assertThat(landscapeTrackers.size()).isEqualTo(2);
-        assertThat(portraitTrackers.size()).isEqualTo(2);
-        // First tracker is irrelevant and just necessary for test setup
-        assertTracker(landscapeTrackers.get(1), "http://mopub.com/companionAdClick/foo");
-        assertTracker(portraitTrackers.get(1), "http://mopub.com/companionAdClick/foo");
-    }
-
-    @Test
-    public void addVideoTrackers_withMultipleUrls_withMultipleEvents_shouldAddCorrespondingTrackers() throws Exception {
-        final JSONObject videoTrackers = new JSONObject("{" +
-                    "urls: [" +
-                        "\"http://mopub.com/%%VIDEO_EVENT%%/foo\"," +
-                        "\"http://mopub.com/%%VIDEO_EVENT%%/bar\"" +
-                    "]," +
-                    "events: [" +
-                        "\"start\"," +
-                        "\"firstQuartile\"," +
-                        "\"midpoint\"," +
-                        "\"thirdQuartile\"," +
-                        "\"complete\"," +
-                        "\"companionAdView\"," +
-                        "\"companionAdClick\"" +
-                    "]" +
-                "}");
-        VastVideoConfig subject = new VastVideoConfig();
-        addCompanionAds(subject);
-
-        subject.addVideoTrackers(videoTrackers);
-
-        final List<VastAbsoluteProgressTracker> startTrackers = subject.getAbsoluteTrackers();
-        final List<VastFractionalProgressTracker> fractionalTrackers = // quartile trackers
-                subject.getFractionalTrackers();
-        final List<VastTracker> completeTrackers = subject.getCompleteTrackers();
-        final List<VastTracker> landscapeCompanionViewTrackers = subject.getVastCompanionAd(
-                Configuration.ORIENTATION_LANDSCAPE).getCreativeViewTrackers();
-        final List<VastTracker> portraitCompanionViewTrackers = subject.getVastCompanionAd(
-                Configuration.ORIENTATION_PORTRAIT).getCreativeViewTrackers();
-        final List<VastTracker> landscapeCompanionClickTrackers = subject.getVastCompanionAd(
-                Configuration.ORIENTATION_LANDSCAPE).getClickTrackers();
-        final List<VastTracker> portraitCompanionClickTrackers = subject.getVastCompanionAd(
-                Configuration.ORIENTATION_PORTRAIT).getClickTrackers();
-        assertThat(startTrackers.size()).isEqualTo(2);
-        assertThat(fractionalTrackers.size()).isEqualTo(6);
-        assertThat(completeTrackers.size()).isEqualTo(2);
-        assertThat(landscapeCompanionViewTrackers.size()).isEqualTo(3);
-        assertThat(portraitCompanionViewTrackers.size()).isEqualTo(3);
-        assertThat(landscapeCompanionClickTrackers.size()).isEqualTo(3);
-        assertThat(portraitCompanionClickTrackers.size()).isEqualTo(3);
-        assertAbsoluteTracker(startTrackers.get(0), "http://mopub.com/start/foo", 0);
-        assertAbsoluteTracker(startTrackers.get(1), "http://mopub.com/start/bar", 0);
-        assertFractionalTracker(fractionalTrackers.get(0),
-                "http://mopub.com/firstQuartile/foo", 0.25f);
-        assertFractionalTracker(fractionalTrackers.get(1),
-                "http://mopub.com/firstQuartile/bar", 0.25f);
-        assertFractionalTracker(fractionalTrackers.get(2), "http://mopub.com/midpoint/foo", 0.5f);
-        assertFractionalTracker(fractionalTrackers.get(3), "http://mopub.com/midpoint/bar", 0.5f);
-        assertFractionalTracker(fractionalTrackers.get(4),
-                "http://mopub.com/thirdQuartile/foo", 0.75f);
-        assertFractionalTracker(fractionalTrackers.get(5),
-                "http://mopub.com/thirdQuartile/bar", 0.75f);
-        assertTracker(completeTrackers.get(0), "http://mopub.com/complete/foo");
-        assertTracker(completeTrackers.get(1), "http://mopub.com/complete/bar");
-        // First tracker is irrelevant and just necessary for test setup
-        assertTracker(landscapeCompanionViewTrackers.get(1),
-                "http://mopub.com/companionAdView/foo");
-        assertTracker(landscapeCompanionViewTrackers.get(2),
-                "http://mopub.com/companionAdView/bar");
-        assertTracker(portraitCompanionViewTrackers.get(1),
-                "http://mopub.com/companionAdView/foo");
-        assertTracker(portraitCompanionViewTrackers.get(2),
-                "http://mopub.com/companionAdView/bar");
-        assertTracker(landscapeCompanionClickTrackers.get(1),
-                "http://mopub.com/companionAdClick/foo");
-        assertTracker(landscapeCompanionClickTrackers.get(2),
-                "http://mopub.com/companionAdClick/bar");
-        assertTracker(portraitCompanionClickTrackers.get(1),
-                "http://mopub.com/companionAdClick/foo");
-        assertTracker(portraitCompanionClickTrackers.get(2),
-                "http://mopub.com/companionAdClick/bar");
-    }
-
-    @Test
-    public void addVideoTrackers_withCompanionAdViewEvent_withoutCompanionAd_shouldDoNothing() throws Exception {
-        final JSONObject videoTrackers = new JSONObject("{" +
-                "urls: [ \"http://mopub.com/%%VIDEO_EVENT%%/foo\" ]," +
-                "events: [ \"companionAdView\" ]" +
-                "}");
-        VastVideoConfig subject = new VastVideoConfig();
-        // Note companion ads were NOT added
-
-        subject.addVideoTrackers(videoTrackers);
-
-        // Trackers would be in companion ad, so just make sure they are still null
-        assertThat(subject.getVastCompanionAd(Configuration.ORIENTATION_LANDSCAPE)).isNull();
-        assertThat(subject.getVastCompanionAd(Configuration.ORIENTATION_PORTRAIT)).isNull();
-    }
-
-    @Test
-    public void addVideoTrackers_withoutUrls_shouldDoNothing() throws Exception {
-        final JSONObject videoTrackers = new JSONObject("{" +
-                "events: [ \"start\" ]" +
-                "}");
-        VastVideoConfig subject = new VastVideoConfig();
-
-        subject.addVideoTrackers(videoTrackers);
-
-        final List<VastAbsoluteProgressTracker> trackers = subject.getAbsoluteTrackers();
-        assertThat(trackers).isEmpty();
-    }
-
-    @Test
-    public void addVideoTrackers_withoutEvents_shouldDoNothing() throws Exception {
-        final JSONObject videoTrackers = new JSONObject("{" +
-                "urls: [ \"http://mopub.com/%%VIDEO_EVENT%%/foo\" ]" +
-                "}");
-        VastVideoConfig subject = new VastVideoConfig();
-
-        subject.addVideoTrackers(videoTrackers);
-
-        final List<VastAbsoluteProgressTracker> trackers = subject.getAbsoluteTrackers();
-        assertThat(trackers).isEmpty();
-    }
-
-    @Test
-    public void addVideoTrackers_withInvalidEvent_shouldSkipInvalidEvent() throws Exception {
-        final JSONObject videoTrackers = new JSONObject("{" +
-                "urls: [ \"http://mopub.com/%%VIDEO_EVENT%%/foo\" ]," +
-                "events: [ \"start\", \"INVALID\" ]" +
-                "}");
-        VastVideoConfig subject = new VastVideoConfig();
-
-        subject.addVideoTrackers(videoTrackers);
-
-        final List<VastAbsoluteProgressTracker> trackers = subject.getAbsoluteTrackers();
-        assertThat(trackers.size()).isEqualTo(1);
-        assertThat(trackers.get(0).getTrackingUrl()).isEqualTo("http://mopub.com/start/foo");
-    }
-
-    @Test
-    public void getUntriggeredTrackersBefore_withTriggeredTrackers_shouldNotReturnTriggered() throws Exception {
-        VastVideoConfig subject = new VastVideoConfig();
-        subject.setDiskMediaFileUrl("disk_video_path");
-        subject.addFractionalTrackers(
-                Arrays.asList(new VastFractionalProgressTracker("first", 0.25f),
-                        new VastFractionalProgressTracker("second", 0.5f),
-                        new VastFractionalProgressTracker("third", 0.75f)));
-        subject.addAbsoluteTrackers(
-                Arrays.asList(new VastAbsoluteProgressTracker("5secs", 5000),
-                        new VastAbsoluteProgressTracker("10secs", 10000)));
-
-        final List<VastTracker> untriggeredTrackers = subject.getUntriggeredTrackersBefore(11000,
-                11000);
-        assertThat(untriggeredTrackers).hasSize(5);
-        untriggeredTrackers.get(0).setTracked();
-
-        final List<VastTracker> secondTrackersList = subject.getUntriggeredTrackersBefore(11000,
-                11000);
-        assertThat(secondTrackersList).hasSize(4);
-    }
-
-    @Test
-    public void getUntriggeredTrackersBefore_shouldReturnAllTrackersSorted() throws Exception {
-        VastVideoConfig subject = new VastVideoConfig();
-        subject.setDiskMediaFileUrl("disk_video_path");
-        subject.addFractionalTrackers(
-                Arrays.asList(new VastFractionalProgressTracker("first", 0.25f),
-                        new VastFractionalProgressTracker("second", 0.5f),
-                        new VastFractionalProgressTracker("third", 0.75f)));
-        subject.addAbsoluteTrackers(
-                Arrays.asList(new VastAbsoluteProgressTracker("1secs", 1000),
-                        new VastAbsoluteProgressTracker("10secs", 10000)));
-
-        final List<VastTracker> untriggeredTrackers = subject.getUntriggeredTrackersBefore(11000,
-                11000);
-        assertThat(untriggeredTrackers).hasSize(5);
-
-        // Sorted absolute trackers, followed by sorted fractional trackers
-        final VastTracker tracker0 = untriggeredTrackers.get(0);
-        assertThat(tracker0).isExactlyInstanceOf(VastAbsoluteProgressTracker.class);
-        assertThat(((VastAbsoluteProgressTracker) tracker0).getTrackingMilliseconds()).isEqualTo(
-                1000);
-
-        final VastTracker tracker1 = untriggeredTrackers.get(1);
-        assertThat(tracker1).isExactlyInstanceOf(VastAbsoluteProgressTracker.class);
-        assertThat(((VastAbsoluteProgressTracker) tracker1).getTrackingMilliseconds()).isEqualTo(
-                10000);
-
-
-        final VastTracker tracker2 = untriggeredTrackers.get(2);
-        assertThat(tracker2).isExactlyInstanceOf(VastFractionalProgressTracker.class);
-        assertThat(((VastFractionalProgressTracker) tracker2).trackingFraction()).isEqualTo(0.25f);
-
-        final VastTracker tracker3 = untriggeredTrackers.get(3);
-        assertThat(tracker3).isExactlyInstanceOf(VastFractionalProgressTracker.class);
-        assertThat(((VastFractionalProgressTracker) tracker3).trackingFraction()).isEqualTo(0.5f);
-
-        final VastTracker tracker4 = untriggeredTrackers.get(4);
-        assertThat(tracker4).isExactlyInstanceOf(VastFractionalProgressTracker.class);
-        assertThat(((VastFractionalProgressTracker) tracker4).trackingFraction()).isEqualTo(0.75f);
-    }
-
-    @Test
-    public void getUntriggeredTrackersBefore_withNegativeCurrentTime_shouldReturnNoTrackers() throws Exception {
-        VastVideoConfig subject = new VastVideoConfig();
-        subject.setDiskMediaFileUrl("disk_video_path");
-        subject.addFractionalTrackers(
-                Arrays.asList(new VastFractionalProgressTracker("zero", 0f),
-                        new VastFractionalProgressTracker("half", 0.5f)));
-        subject.addAbsoluteTrackers(
-                Arrays.asList(new VastAbsoluteProgressTracker("5secs", 5000),
-                        new VastAbsoluteProgressTracker("10secs", 10000)));
-
-        final List<VastTracker> untriggeredTrackers = subject.getUntriggeredTrackersBefore(-2000,
-                11000);
-        assertThat(untriggeredTrackers).isEmpty();
-    }
-
-    @Test
-    public void handleClickForResult_withNullClickThroughUrl_shouldNotOpenNewActivity() throws Exception {
-        subject.handleClickForResult(activity, 1234, 1);
-
-        Robolectric.getForegroundThreadScheduler().unPause();
-        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
-    }
-
-    @Test
-    public void handleClickForResult_withMoPubNativeBrowserClickThroughUrl_shouldOpenExternalBrowser_shouldMakeTrackingHttpRequest() throws Exception {
-        subject.setClickThroughUrl(
-                "mopubnativebrowser://navigate?url=https%3A%2F%2Fwww.mopub.com%2F");
-        subject.addClickTrackers(
-                Arrays.asList(new VastTracker("https://trackerone+content=[CONTENTPLAYHEAD]"),
-                        new VastTracker("https://trackertwo+error=[ERRORCODE]&asset=[ASSETURI]")));
-
-        subject.handleClickForResult(activity, 2345, 1234);
-
-        Robolectric.getForegroundThreadScheduler().unPause();
-        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
-        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(intent.getDataString()).isEqualTo("https://www.mopub.com/");
-        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
-        verify(mockRequestQueue).add(argThat(isUrl("https://trackerone+content=00:00:02.345")));
-        verify(mockRequestQueue).add(argThat(isUrl("https://trackertwo+error=&asset=video_url")));
-        verifyNoMoreInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void handleClickWithoutResult_shouldOpenExternalBrowser_shouldMakeTrackingHttpRequest() throws Exception {
-        subject.setClickThroughUrl(
-                "mopubnativebrowser://navigate?url=https%3A%2F%2Fwww.mopub.com%2F");
-        subject.addClickTrackers(
-                Arrays.asList(new VastTracker("https://trackerone+content=[CONTENTPLAYHEAD]"),
-                        new VastTracker("https://trackertwo+error=[ERRORCODE]&asset=[ASSETURI]")));
-
-        subject.handleClickWithoutResult(activity.getApplicationContext(), 2345);
-
-        Robolectric.getForegroundThreadScheduler().unPause();
-        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
-        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(intent.getDataString()).isEqualTo("https://www.mopub.com/");
-        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
-        verify(mockRequestQueue).add(argThat(isUrl("https://trackerone+content=00:00:02.345")));
-        verify(mockRequestQueue).add(argThat(isUrl("https://trackertwo+error=&asset=video_url")));
-        verifyNoMoreInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void handleClickForResult_withMalformedMoPubNativeBrowserClickThroughUrl_shouldNotOpenANewActivity() throws Exception {
-        // url2 is an invalid query parameter
-        subject.setClickThroughUrl(
-                "mopubnativebrowser://navigate?url2=https%3A%2F%2Fwww.mopub.com%2F");
-
-        subject.handleClickForResult(activity, 3456, 1);
-
-        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
-    }
-
-    @Test
-    public void handleClickForResult_withAboutBlankClickThroughUrl_shouldFailSilently() throws Exception {
-        subject.setClickThroughUrl("about:blank");
-
-        subject.handleClickForResult(activity, 4567, 1);
-
-        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
-    }
-
-    private void assertAbsoluteTracker(final VastAbsoluteProgressTracker actualTracker,
-            final String expectedUrl, final int expectedMs) {
-        assertThat(actualTracker.getTrackingUrl()).isEqualTo(expectedUrl);
-        assertThat(actualTracker.getTrackingMilliseconds()).isEqualTo(expectedMs);
-    }
-
-    private void assertFractionalTracker(final VastFractionalProgressTracker actualTracker,
-            final String expectedUrl, final float expectedFraction) {
-        assertThat(actualTracker.getTrackingUrl()).isEqualTo(expectedUrl);
-        assertThat(actualTracker.trackingFraction()).isEqualTo(expectedFraction);
-    }
-
-    private void assertTracker(final VastTracker actualTracker, final String expectedUrl) {
-        assertThat(actualTracker.getTrackingUrl()).isEqualTo(expectedUrl);
-    }
-
-    private void addCompanionAds(VastVideoConfig subject) {
-        VastCompanionAdConfig companionLandscape = new VastCompanionAdConfig(123, 456,
-                new VastResource("resource", VastResource.Type.STATIC_RESOURCE, VastResource
-                        .CreativeType.IMAGE, 123, 456),
-                "http://mopub.com",
-                VastUtils.stringsToVastTrackers("clickTracker"),
-                VastUtils.stringsToVastTrackers("viewTracker"));
-        VastCompanionAdConfig companionPortrait = new VastCompanionAdConfig(123, 456,
-                new VastResource("resource", VastResource.Type.STATIC_RESOURCE, VastResource
-                        .CreativeType.IMAGE, 123, 456),
-                "http://mopub.com",
-                VastUtils.stringsToVastTrackers("clickTracker"),
-                VastUtils.stringsToVastTrackers("viewTracker"));
-        subject.setVastCompanionAd(companionLandscape, companionPortrait);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCtaButtonWidgetTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCtaButtonWidgetTest.java
deleted file mode 100644
index 2943bfea..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCtaButtonWidgetTest.java
+++ /dev/null
@@ -1,240 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.res.Configuration;
-import android.view.View;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class VastVideoCtaButtonWidgetTest {
-    private Context context;
-    private VastVideoCtaButtonWidget subject;
-
-    @Before
-    public void setUp() throws Exception {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-    }
-
-    @Test
-    public void constructor_withCompanionAd_shouldBeInvisibleAndNotSetLayoutParams() throws Exception {
-        subject = new VastVideoCtaButtonWidget(context, 0, true, true);
-
-        assertThat(subject.getVisibility()).isEqualTo(View.INVISIBLE);
-        assertThat(subject.getLayoutParams()).isNull();
-    }
-
-    @Test
-    public void constructor_withoutCompanionAd_shouldBeInvisibleAndNotSetLayoutParams() throws Exception {
-        subject = new VastVideoCtaButtonWidget(context, 0, false, true);
-
-        assertThat(subject.getVisibility()).isEqualTo(View.INVISIBLE);
-        assertThat(subject.getLayoutParams()).isNull();
-    }
-
-    @Test
-    public void constructor_withCompanionAd_withNoClickthroughUrl_shouldBeGoneAndNotSetLayoutParams() throws Exception {
-        subject = new VastVideoCtaButtonWidget(context, 0, true, false);
-
-        assertThat(subject.getVisibility()).isEqualTo(View.GONE);
-        assertThat(subject.getLayoutParams()).isNull();
-    }
-
-    @Test
-    public void constructor_withoutCompanionAd_withNoClickthroughUrl_shouldBeGoneAndNotSetLayoutParams() throws Exception {
-        subject = new VastVideoCtaButtonWidget(context, 0, false, false);
-
-        assertThat(subject.getVisibility()).isEqualTo(View.GONE);
-        assertThat(subject.getLayoutParams()).isNull();
-    }
-
-    // Video is skippable, has companion ad, has clickthrough url, CTA button initially invisible
-
-    @Test
-    public void notifyVideoSkippable_withCompanionAdAndInPortrait_shouldBeVisibleAndSetPortraitLayoutParams() throws Exception {
-        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
-        subject = new VastVideoCtaButtonWidget(context, 0, true, true);
-
-        subject.notifyVideoSkippable();
-
-        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(subject.hasPortraitLayoutParams()).isTrue();
-    }
-
-    @Test
-    public void notifyVideoSkippable_withCompanionAdAndInLandscape_shouldBeVisibleAndSetLandscapeLayoutParams() throws Exception {
-        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
-        subject = new VastVideoCtaButtonWidget(context, 0, true, true);
-
-        subject.notifyVideoSkippable();
-
-        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(subject.hasLandscapeLayoutParams()).isTrue();
-    }
-
-    @Test
-    public void notifyVideoSkippable_withCompanionAdAndOrientationUndefined_shouldBeVisibleAndSetPortraitLayoutParams() throws Exception {
-        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_UNDEFINED;
-        subject = new VastVideoCtaButtonWidget(context, 0, true, true);
-
-        subject.notifyVideoSkippable();
-
-        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(subject.hasPortraitLayoutParams()).isTrue();
-    }
-
-    // Video is skippable, no companion ad, has clickthrough url, CTA button initially invisible
-
-    @Test
-    public void notifyVideoSkippable_withoutCompanionAdAndInPortrait_shouldBeVisibleAndSetPortraitLayoutParams() throws Exception {
-        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
-        subject = new VastVideoCtaButtonWidget(context, 0, false, true);
-
-        subject.notifyVideoSkippable();
-
-        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(subject.hasPortraitLayoutParams()).isTrue();
-    }
-
-    @Test
-    public void notifyVideoSkippable_withoutCompanionAdAndInLandscape_shouldBeVisibleAndSetLandscapeLayoutParams() throws Exception {
-        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
-        subject = new VastVideoCtaButtonWidget(context, 0, false, true);
-
-        subject.notifyVideoSkippable();
-
-        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(subject.hasLandscapeLayoutParams()).isTrue();
-    }
-
-    @Test
-    public void notifyVideoSkippable_withoutCompanionAdAndOrientationUndefined_shouldBeVisibleAndSetPortraitLayoutParams() throws Exception {
-        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_UNDEFINED;
-        subject = new VastVideoCtaButtonWidget(context, 0, false, true);
-
-        subject.notifyVideoSkippable();
-
-        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(subject.hasPortraitLayoutParams()).isTrue();
-    }
-
-    // Video is complete, has companion ad, CTA button already visible
-
-    @Test
-    public void notifyVideoComplete_withCompanionAdAndInPortrait_shouldBeGoneAndNotChangeLayoutParams() throws Exception {
-        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
-        subject = new VastVideoCtaButtonWidget(context, 0, true, true);
-        subject.setVisibility(View.VISIBLE);
-
-        subject.notifyVideoComplete();
-
-        assertThat(subject.getVisibility()).isEqualTo(View.GONE);
-        assertThat(subject.getLayoutParams()).isNull();
-    }
-
-    @Test
-    public void notifyVideoComplete_withCompanionAdAndInLandscape_shouldBeGoneAndNotChangeLayoutParams() throws Exception {
-        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
-        subject = new VastVideoCtaButtonWidget(context, 0, true, true);
-        subject.setVisibility(View.VISIBLE);
-
-        subject.notifyVideoComplete();
-
-        assertThat(subject.getVisibility()).isEqualTo(View.GONE);
-        assertThat(subject.getLayoutParams()).isNull();
-    }
-
-    @Test
-    public void notifyVideoComplete_withCompanionAdAndOrientationUndefined_shouldBeGoneAndNotChangeLayoutParams() throws Exception {
-        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_UNDEFINED;
-        subject = new VastVideoCtaButtonWidget(context, 0, true, true);
-        subject.setVisibility(View.VISIBLE);
-
-        subject.notifyVideoComplete();
-
-        assertThat(subject.getVisibility()).isEqualTo(View.GONE);
-        assertThat(subject.getLayoutParams()).isNull();
-    }
-
-    @Test
-    public void notifyVideoComplete_withCompanionAd_withSocialActions_shouldBeVisible() throws Exception {
-        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_UNDEFINED;
-        subject = new VastVideoCtaButtonWidget(context, 0, true, true);
-        subject.setHasSocialActions(true);
-        subject.setVisibility(View.VISIBLE);
-
-        subject.notifyVideoComplete();
-
-        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
-    }
-
-    // Video is complete, no companion ad, has clickthrough url, CTA button already visible
-
-    @Test
-    public void notifyVideoComplete_withoutCompanionAdAndInPortrait_shouldBeVisibleAndSetPortraitLayoutParams() throws Exception {
-        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
-        subject = new VastVideoCtaButtonWidget(context, 0, false, true);
-        subject.setVisibility(View.VISIBLE);
-
-        subject.notifyVideoComplete();
-
-        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(subject.hasPortraitLayoutParams()).isTrue();
-    }
-
-    @Test
-    public void notifyVideoComplete_withoutCompanionAdAndInLandscape_shouldBeVisibleAndSetLandscapeLayoutParams() throws Exception {
-        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
-        subject = new VastVideoCtaButtonWidget(context, 0, false, true);
-        subject.setVisibility(View.VISIBLE);
-
-        subject.notifyVideoComplete();
-
-        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(subject.hasLandscapeLayoutParams()).isTrue();
-    }
-
-    @Test
-    public void notifyVideoComplete_withoutCompanionAdAndOrientationUndefined_shouldBeVisibleAndSetPortraitLayoutParams() throws Exception {
-        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_UNDEFINED;
-        subject = new VastVideoCtaButtonWidget(context, 0, false, true);
-        subject.setVisibility(View.VISIBLE);
-
-        subject.notifyVideoComplete();
-
-        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(subject.hasPortraitLayoutParams()).isTrue();
-    }
-
-    // No clickthrough url means never show cta button
-
-    @Test
-    public void notifyVideoSkippable_withoutClickthroughUrl_shouldBeGone() throws Exception {
-        subject = new VastVideoCtaButtonWidget(context, 0, true, false);
-        subject.setVisibility(View.VISIBLE);
-
-        subject.notifyVideoSkippable();
-
-        assertThat(subject.getVisibility()).isEqualTo(View.GONE);
-    }
-
-    @Test
-    public void notifyVideoComplete_withoutClickthroughUrl_shouldBeGone() throws Exception {
-        subject = new VastVideoCtaButtonWidget(context, 0, true, false);
-        subject.setVisibility(View.VISIBLE);
-
-        subject.notifyVideoComplete();
-
-        assertThat(subject.getVisibility()).isEqualTo(View.GONE);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoGradientStripWidgetTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoGradientStripWidgetTest.java
deleted file mode 100644
index 5d397b97..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoGradientStripWidgetTest.java
+++ /dev/null
@@ -1,249 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.res.Configuration;
-import android.graphics.drawable.GradientDrawable;
-import android.view.View;
-import android.widget.RelativeLayout;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.DeviceUtils;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class VastVideoGradientStripWidgetTest {
-    private Context context;
-    private VastVideoGradientStripWidget subject;
-
-    @Before
-    public void setUp() throws Exception {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-    }
-
-    @Test
-    public void constructor_whenForcePortrait_shouldBeInvisible() throws Exception {
-        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
-                DeviceUtils.ForceOrientation.FORCE_PORTRAIT, true, View.VISIBLE,
-                RelativeLayout.ALIGN_TOP, 0);
-
-        assertThat(subject.getVisibility()).isEqualTo(View.INVISIBLE);
-    }
-
-    @Test
-    public void constructor_whenForceLandscape_shouldBeVisible() throws Exception {
-        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
-                DeviceUtils.ForceOrientation.FORCE_LANDSCAPE, true, View.VISIBLE,
-                RelativeLayout.ALIGN_TOP, 0);
-
-        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
-    }
-
-    @Test
-    public void constructor_whenUseDeviceOrientation_shouldBeInvisible() throws Exception {
-        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
-                DeviceUtils.ForceOrientation.DEVICE_ORIENTATION, true, View.VISIBLE,
-                RelativeLayout.ALIGN_TOP, 0);
-
-        // If not forcing orientation, visibility depends on device orientation,
-        // which is initially ORIENTATION_UNDEFINED in tests
-        assertThat(subject.getVisibility()).isEqualTo(View.INVISIBLE);
-    }
-
-    @Test
-    public void constructor_whenForceOrientationUndefined_shouldBeInvisible() throws Exception {
-        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
-                DeviceUtils.ForceOrientation.UNDEFINED, true, View.VISIBLE,
-                RelativeLayout.ALIGN_TOP, 0);
-
-        // If force orientation undefined, visibility depends on device orientation,
-        // which is initially ORIENTATION_UNDEFINED in tests
-        assertThat(subject.getVisibility()).isEqualTo(View.INVISIBLE);
-    }
-
-    // Video is still playing, forcing portrait orientation
-
-    @Test
-    public void onConfigurationChanged_whenForcePortraitAndDeviceInPortrait_shouldBeInvisible() throws Exception {
-        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
-                DeviceUtils.ForceOrientation.FORCE_PORTRAIT, true, View.VISIBLE,
-                RelativeLayout.ALIGN_TOP, 0);
-        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
-
-        subject.onConfigurationChanged(context.getResources().getConfiguration());
-
-        assertThat(subject.getVisibility()).isEqualTo(View.INVISIBLE);
-    }
-
-    @Test
-    public void onConfigurationChanged_whenForcePortraitAndDeviceInLandscape_shouldBeInvisible() throws Exception {
-        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
-                DeviceUtils.ForceOrientation.FORCE_PORTRAIT, true, View.VISIBLE,
-                RelativeLayout.ALIGN_TOP, 0);
-        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
-
-        subject.onConfigurationChanged(context.getResources().getConfiguration());
-
-        assertThat(subject.getVisibility()).isEqualTo(View.INVISIBLE);
-    }
-
-    @Test
-    public void onConfigurationChanged_whenForcePortraitAndDeviceOrientationUndefined_shouldBeInvisible() throws Exception {
-        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
-                DeviceUtils.ForceOrientation.FORCE_PORTRAIT, true, View.VISIBLE,
-                RelativeLayout.ALIGN_TOP, 0);
-        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_UNDEFINED;
-
-        subject.onConfigurationChanged(context.getResources().getConfiguration());
-
-        assertThat(subject.getVisibility()).isEqualTo(View.INVISIBLE);
-    }
-
-    // Video is still playing, forcing landscape orientation
-
-    @Test
-    public void onConfigurationChanged_whenForceLandscapeAndDeviceInPortrait_shouldBeVisible() throws Exception {
-        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
-                DeviceUtils.ForceOrientation.FORCE_LANDSCAPE, true, View.VISIBLE,
-                RelativeLayout.ALIGN_TOP, 0);
-        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
-
-        subject.onConfigurationChanged(context.getResources().getConfiguration());
-
-        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
-    }
-
-    @Test
-    public void onConfigurationChanged_whenForceLandscapeAndDeviceInLandscape_shouldBeVisible() throws Exception {
-        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
-                DeviceUtils.ForceOrientation.FORCE_LANDSCAPE, true, View.VISIBLE,
-                RelativeLayout.ALIGN_TOP, 0);
-        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
-
-        subject.onConfigurationChanged(context.getResources().getConfiguration());
-
-        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
-    }
-
-    @Test
-    public void onConfigurationChanged_whenForceLandscapeAndDeviceOrientationUndefined_shouldBeVisible() throws Exception {
-        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
-                DeviceUtils.ForceOrientation.FORCE_LANDSCAPE, true, View.VISIBLE,
-                RelativeLayout.ALIGN_TOP, 0);
-        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_UNDEFINED;
-
-        subject.onConfigurationChanged(context.getResources().getConfiguration());
-
-        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
-    }
-
-    // Video is still playing, use device orientation
-
-    @Test
-    public void onConfigurationChanged_whenUseDeviceOrientationAndDeviceInPortrait_shouldBeInvisible() throws Exception {
-        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
-                DeviceUtils.ForceOrientation.DEVICE_ORIENTATION, true, View.VISIBLE,
-                RelativeLayout.ALIGN_TOP, 0);
-        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
-
-        subject.onConfigurationChanged(context.getResources().getConfiguration());
-
-        assertThat(subject.getVisibility()).isEqualTo(View.INVISIBLE);
-    }
-
-    @Test
-    public void onConfigurationChanged_whenUseDeviceOrientationAndDeviceInLandscape_shouldBeVisible() throws Exception {
-        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
-                DeviceUtils.ForceOrientation.DEVICE_ORIENTATION, true, View.VISIBLE,
-                RelativeLayout.ALIGN_TOP, 0);
-        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
-
-        subject.onConfigurationChanged(context.getResources().getConfiguration());
-
-        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
-    }
-
-    @Test
-    public void onConfigurationChanged_whenUseDeviceOrientationAndDeviceOrientationUndefined_shouldBeInvisible() throws Exception {
-        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
-                DeviceUtils.ForceOrientation.DEVICE_ORIENTATION, true, View.VISIBLE,
-                RelativeLayout.ALIGN_TOP, 0);
-        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_UNDEFINED;
-
-        subject.onConfigurationChanged(context.getResources().getConfiguration());
-
-        assertThat(subject.getVisibility()).isEqualTo(View.INVISIBLE);
-    }
-
-    // Video is still playing, force orientation undefined
-
-    @Test
-    public void onConfigurationChanged_whenForceOrientationUndefinedAndDeviceInPortrait_shouldBeInvisible() throws Exception {
-        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
-                DeviceUtils.ForceOrientation.UNDEFINED, true, View.VISIBLE,
-                RelativeLayout.ALIGN_TOP, 0);
-        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
-
-        subject.onConfigurationChanged(context.getResources().getConfiguration());
-
-        assertThat(subject.getVisibility()).isEqualTo(View.INVISIBLE);
-    }
-
-    @Test
-    public void onConfigurationChanged_whenForceOrientationUndefinedAndDeviceInLandscape_shouldBeVisible() throws Exception {
-        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
-                DeviceUtils.ForceOrientation.UNDEFINED, true, View.VISIBLE,
-                RelativeLayout.ALIGN_TOP, 0);
-        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
-
-        subject.onConfigurationChanged(context.getResources().getConfiguration());
-
-        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
-    }
-
-    @Test
-    public void onConfigurationChanged_whenForceOrientationUndefinedAndDeviceOrientationUndefined_shouldBeInvisible() throws Exception {
-        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
-                DeviceUtils.ForceOrientation.UNDEFINED, true, View.VISIBLE,
-                RelativeLayout.ALIGN_TOP, 0);
-        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_UNDEFINED;
-
-        subject.onConfigurationChanged(context.getResources().getConfiguration());
-
-        assertThat(subject.getVisibility()).isEqualTo(View.INVISIBLE);
-    }
-
-    // Video is complete
-
-    @Test
-    public void notifyVideoComplete_withCompanionAd_shouldSetVisibilityForCompanionAd() throws Exception {
-        final int visibilityForCompanionAd = View.VISIBLE;
-        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
-                DeviceUtils.ForceOrientation.FORCE_PORTRAIT, true, visibilityForCompanionAd,
-                RelativeLayout.ALIGN_TOP, 0);
-
-        subject.notifyVideoComplete();
-
-        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
-    }
-
-    @Test
-    public void notifyVideoComplete_withoutCompanionAd_shouldBeGone() throws Exception {
-        final int visibilityForCompanionAd = View.VISIBLE;
-        subject = new VastVideoGradientStripWidget(context, GradientDrawable.Orientation.TOP_BOTTOM,
-                DeviceUtils.ForceOrientation.FORCE_PORTRAIT, false, visibilityForCompanionAd,
-                RelativeLayout.ALIGN_TOP, 0);
-
-        subject.notifyVideoComplete();
-
-        assertThat(subject.getVisibility()).isEqualTo(View.GONE);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
deleted file mode 100644
index 1fa858ca..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
+++ /dev/null
@@ -1,227 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-
-import com.mopub.common.AdReport;
-import com.mopub.common.CacheServiceTest;
-import com.mopub.common.DataKeys;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
-import com.mopub.mobileads.test.support.TestVastManagerFactory;
-import com.mopub.mobileads.test.support.VastUtils;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.httpclient.FakeHttp;
-import org.robolectric.shadows.support.v4.ShadowLocalBroadcastManager;
-
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.mopub.common.DataKeys.AD_REPORT_KEY;
-import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
-import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
-import static com.mopub.mobileads.VastManager.VastManagerListener;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-import static org.mockito.Mockito.withSettings;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class VastVideoInterstitialTest extends ResponseBodyInterstitialTest {
-    private Context context;
-    private CustomEventInterstitialListener customEventInterstitialListener;
-    private Map<String, Object> localExtras;
-    private Map<String, String> serverExtras;
-    private TestHttpResponseWithHeaders response;
-    private String expectedResponse;
-    private VastManager vastManager;
-    private String videoUrl;
-    private long broadcastIdentifier;
-
-    @Mock AdReport mockAdReport;
-
-    @Before
-    public void setUp() throws Exception {
-        subject = new VastVideoInterstitial();
-
-        vastManager = TestVastManagerFactory.getSingletonMock();
-        expectedResponse = "<VAST>hello</VAST>";
-        videoUrl = "https://www.video.com";
-
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        customEventInterstitialListener = mock(CustomEventInterstitialListener.class);
-        localExtras = new HashMap<String, Object>();
-        serverExtras = new HashMap<String, String>();
-        serverExtras.put(DataKeys.HTML_RESPONSE_BODY_KEY, expectedResponse);
-
-        response = new TestHttpResponseWithHeaders(200, expectedResponse);
-
-        broadcastIdentifier = 2222;
-        localExtras.put(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
-        when(mockAdReport.getDspCreativeId()).thenReturn("dsp_creative_id");
-        localExtras.put(AD_REPORT_KEY, mockAdReport);
-    }
-
-    @Test
-    public void preRenderHtml_whenCreatingVideoCache_butItHasInitializationErrors_shouldSignalOnInterstitialFailedOnError() throws Exception {
-        // context is null when loadInterstitial is not called, which causes DiskLruCache to not be created
-
-        subject.preRenderHtml(customEventInterstitialListener);
-
-        verify(customEventInterstitialListener).onInterstitialFailed(
-                eq(MoPubErrorCode.VIDEO_CACHE_ERROR));
-        verify(vastManager, never()).prepareVastVideoConfiguration(anyString(),
-                any(VastManagerListener.class), any(String.class), any(Context.class));
-    }
-
-    @Test
-    public void loadInterstitial_shouldParseHtmlResponseBodyServerExtra() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras,
-                serverExtras);
-
-        assertThat(((VastVideoInterstitial) subject).getVastResponse()).isEqualTo(expectedResponse);
-    }
-
-    @Test
-    public void loadInterstitial_shouldInitializeDiskCache() throws Exception {
-        FakeHttp.addPendingHttpResponse(response);
-
-        CacheServiceTest.assertDiskCacheIsUninitialized();
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-        CacheServiceTest.assertDiskCacheIsEmpty();
-    }
-
-    @Test
-    public void loadInterstitial_shouldCreateVastManagerAndProcessVast() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-
-        verify(vastManager).prepareVastVideoConfiguration(eq(expectedResponse),
-                eq((VastVideoInterstitial) subject), eq("dsp_creative_id"), eq(context));
-    }
-
-    @Test
-    public void loadInterstitial_whenServerExtrasDoesNotContainResponse_shouldSignalOnInterstitialFailed() throws Exception {
-        serverExtras.remove(HTML_RESPONSE_BODY_KEY);
-
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-
-        verify(customEventInterstitialListener).onInterstitialFailed(NETWORK_INVALID_STATE);
-        verify(vastManager, never()).prepareVastVideoConfiguration(anyString(),
-                any(VastManagerListener.class), any(String.class), any(Context.class));
-    }
-
-    @Test
-    public void loadInterstitial_shouldConnectListenerToBroadcastReceiver() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-
-        Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, broadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener).onInterstitialShown();
-
-        intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, broadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener).onInterstitialDismissed();
-    }
-
-    @Test
-    public void showInterstitial_shouldStartVideoPlayerActivityWithAllValidTrackers() throws Exception {
-        VastCompanionAdConfig vastCompanionAdConfig = mock(VastCompanionAdConfig.class, withSettings().serializable());
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setNetworkMediaFileUrl(videoUrl);
-        vastVideoConfig.addAbsoluteTrackers(Arrays.asList(new VastAbsoluteProgressTracker
-                ("start", 2000)));
-        vastVideoConfig.addFractionalTrackers(Arrays.asList(new
-                        VastFractionalProgressTracker("first", 0.25f),
-                new VastFractionalProgressTracker("mid", 0.5f),
-                new VastFractionalProgressTracker("third", 0.75f)));
-        vastVideoConfig.addCompleteTrackers(VastUtils.stringsToVastTrackers("complete"));
-        vastVideoConfig.addImpressionTrackers(VastUtils.stringsToVastTrackers("imp"));
-        vastVideoConfig.setClickThroughUrl("clickThrough");
-        vastVideoConfig.addClickTrackers(VastUtils.stringsToVastTrackers("click"));
-        vastVideoConfig.setVastCompanionAd(vastCompanionAdConfig, vastCompanionAdConfig);
-
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-        ((VastVideoInterstitial) subject).onVastVideoConfigurationPrepared(vastVideoConfig);
-
-        subject.showInterstitial();
-        BaseVideoPlayerActivityTest.assertVastVideoPlayerActivityStarted(
-                MraidVideoPlayerActivity.class,
-                vastVideoConfig,
-                broadcastIdentifier
-                );
-        assertThat(vastVideoConfig.isRewardedVideo()).isFalse();
-    }
-
-    @Test
-    public void onInvalidate_shouldCancelVastManager() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-        subject.onInvalidate();
-
-        verify(vastManager).cancel();
-    }
-
-    @Test
-    public void onInvalidate_whenVastManagerIsNull_shouldNotBlowUp() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-
-        ((VastVideoInterstitial) subject).setVastManager(null);
-
-        subject.onInvalidate();
-
-        // pass
-    }
-
-    @Test
-    public void onInvalidate_shouldDisconnectListenerToBroadcastReceiver() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-        subject.onInvalidate();
-
-        Intent intent;
-        intent = new Intent(ACTION_INTERSTITIAL_SHOW);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener, never()).onInterstitialShown();
-
-        intent = new Intent(ACTION_INTERSTITIAL_DISMISS);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener, never()).onInterstitialDismissed();
-    }
-
-    @Test
-    public void onVastVideoConfigurationPrepared_withVastVideoConfiguration_shouldSignalOnInterstitialLoaded() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-        ((VastVideoInterstitial) subject).onVastVideoConfigurationPrepared(mock(VastVideoConfig.class));
-
-        verify(customEventInterstitialListener).onInterstitialLoaded();
-    }
-
-    @Test
-    public void onVastVideoConfigurationPrepared_withNullVastVideoConfiguration_shouldSignalOnInterstitialFailed() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-        ((VastVideoInterstitial) subject).onVastVideoConfigurationPrepared(null);
-
-        verify(customEventInterstitialListener).onInterstitialFailed(MoPubErrorCode.VIDEO_DOWNLOAD_ERROR);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoProgressBarWidgetTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoProgressBarWidgetTest.java
deleted file mode 100644
index d214c516..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoProgressBarWidgetTest.java
+++ /dev/null
@@ -1,109 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.view.View;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.resource.ProgressBarDrawable;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class VastVideoProgressBarWidgetTest {
-    private Context context;
-    private VastVideoProgressBarWidget subject;
-    private ProgressBarDrawable progressBarDrawableSpy;
-
-    @Before
-    public void setUp() throws Exception {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        subject = new VastVideoProgressBarWidget(context);
-        subject.setAnchorId(0);
-        progressBarDrawableSpy = spy(subject.getImageViewDrawable());
-        subject.setImageViewDrawable(progressBarDrawableSpy);
-    }
-
-    @Test
-    public void calibrateAndMakeVisible_shouldSetDurationAndSkipOffsetAndMakeVisible() throws Exception {
-        subject.setVisibility(View.INVISIBLE);
-
-        subject.calibrateAndMakeVisible(10000, 5000);
-
-        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
-        verify(progressBarDrawableSpy).setDurationAndSkipOffset(10000, 5000);
-        assertThat(progressBarDrawableSpy.getSkipRatio()).isEqualTo(0.5f);
-    }
-
-    @Test
-    public void updateProgress_shouldUpdateDrawable() throws Exception {
-        subject.setVisibility(View.VISIBLE);
-
-        subject.updateProgress(1000);
-
-        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
-        verify(progressBarDrawableSpy).setProgress(1000);
-        assertThat(progressBarDrawableSpy.getCurrentProgress()).isEqualTo(1000);
-    }
-
-    @Test
-    public void updateProgress_whenCurrentProgressGreaterThanPreviousProgress_shouldUpdateDrawable() throws Exception {
-        subject.setVisibility(View.VISIBLE);
-
-        // Set mLastProgress to 1000
-        subject.updateProgress(1000);
-        reset(progressBarDrawableSpy);
-
-        subject.updateProgress(1001);
-
-        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
-        verify(progressBarDrawableSpy).setProgress(1001);
-        verify(progressBarDrawableSpy, never()).forceCompletion();
-        assertThat(progressBarDrawableSpy.getCurrentProgress()).isEqualTo(1001);
-    }
-
-    @Test
-    public void updateProgress_whenCurrentProgressLessThanPreviousProgressButNotZero_shouldForceProgressCompletionAndNotChangeVisibility() throws Exception {
-        subject.setVisibility(View.VISIBLE);
-        subject.calibrateAndMakeVisible(10000, 5000);
-
-        // Set mLastProgress to 1000
-        subject.updateProgress(1000);
-        reset(progressBarDrawableSpy);
-
-        subject.updateProgress(999);
-
-        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
-        verify(progressBarDrawableSpy).setProgress(999);
-        verify(progressBarDrawableSpy).forceCompletion();
-        assertThat(progressBarDrawableSpy.getCurrentProgress()).isEqualTo(10000);
-    }
-
-    @Test
-    public void updateProgress_whenCurrentProgressLessThanPreviousProgressAndIsZero_shouldNotForceProgressCompletionAndNotChangeVisibility() throws Exception {
-        subject.setVisibility(View.VISIBLE);
-        subject.calibrateAndMakeVisible(10000, 5000);
-
-        // Set mLastProgress to 1000
-        subject.updateProgress(1000);
-        reset(progressBarDrawableSpy);
-
-        subject.updateProgress(0);
-
-        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
-        verify(progressBarDrawableSpy).setProgress(0);
-        verify(progressBarDrawableSpy, never()).forceCompletion();
-        assertThat(progressBarDrawableSpy.getCurrentProgress()).isEqualTo(1000);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoRadialCountdownWidgetTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoRadialCountdownWidgetTest.java
deleted file mode 100644
index e92e60c9..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoRadialCountdownWidgetTest.java
+++ /dev/null
@@ -1,96 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.view.View;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.resource.RadialCountdownDrawable;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class VastVideoRadialCountdownWidgetTest {
-    private Context context;
-    private VastVideoRadialCountdownWidget subject;
-    private RadialCountdownDrawable radialCountdownDrawableSpy;
-
-    @Before
-    public void setUp() throws Exception {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        subject = new VastVideoRadialCountdownWidget(context);
-        radialCountdownDrawableSpy = spy(subject.getImageViewDrawable());
-        subject.setImageViewDrawable(radialCountdownDrawableSpy);
-    }
-
-    @Test
-    public void calibrateAndMakeVisible_shouldSetInitialCountdownAndMakeVisible() throws Exception {
-        subject.setVisibility(View.INVISIBLE);
-
-        subject.calibrateAndMakeVisible(10000);
-
-        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
-        verify(radialCountdownDrawableSpy).setInitialCountdown(10000);
-        assertThat(radialCountdownDrawableSpy.getInitialCountdownMilliseconds()).isEqualTo(10000);
-    }
-
-    @Test
-    public void updateCountdownProgress_shouldUpdateDrawable() throws Exception {
-        subject.setVisibility(View.VISIBLE);
-
-        subject.updateCountdownProgress(10000, 1000);
-
-        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
-        verify(radialCountdownDrawableSpy).updateCountdownProgress(1000);
-    }
-
-    @Test
-    public void updateCountdownProgress_whenProgressIsGreaterThanInitialCountdown_shouldHideAndNotUpdateDrawable() throws Exception {
-        subject.setVisibility(View.VISIBLE);
-
-        subject.updateCountdownProgress(10000, 10001);
-
-        assertThat(subject.getVisibility()).isEqualTo(View.GONE);
-        verify(radialCountdownDrawableSpy, never()).updateCountdownProgress(anyInt());
-    }
-
-    @Test
-    public void updateCountdownProgress_whenCurrentProgressGreaterThanPreviousProgress_shouldUpdateDrawable() throws Exception {
-        subject.setVisibility(View.VISIBLE);
-
-        // Set mLastProgressMilliseconds to 1000
-        subject.updateCountdownProgress(10000, 1000);
-        reset(radialCountdownDrawableSpy);
-
-        subject.updateCountdownProgress(10000, 1001);
-
-        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
-        verify(radialCountdownDrawableSpy).updateCountdownProgress(1001);
-    }
-
-    @Test
-    public void updateCountdownProgress_whenCurrentProgressLessThanPreviousProgress_shouldNotChangeVisibilityOrUpdateDrawable() throws Exception {
-        subject.setVisibility(View.VISIBLE);
-
-        // Set mLastProgressMilliseconds to 1000
-        subject.updateCountdownProgress(10000, 1000);
-        reset(radialCountdownDrawableSpy);
-
-        subject.updateCountdownProgress(10000, 999);
-
-        assertThat(subject.getVisibility()).isEqualTo(View.VISIBLE);
-        verify(radialCountdownDrawableSpy, never()).updateCountdownProgress(anyInt());
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
deleted file mode 100644
index 1518e9bf..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
+++ /dev/null
@@ -1,2255 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.content.res.Configuration;
-import android.graphics.Bitmap;
-import android.graphics.Color;
-import android.graphics.drawable.BitmapDrawable;
-import android.graphics.drawable.ColorDrawable;
-import android.graphics.drawable.Drawable;
-import android.media.MediaMetadataRetriever;
-import android.net.Uri;
-import android.os.AsyncTask;
-import android.os.Bundle;
-import android.view.View;
-import android.webkit.WebView;
-import android.widget.ImageView;
-import android.widget.VideoView;
-
-import com.mopub.common.MoPubBrowser;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.DeviceUtils.ForceOrientation;
-import com.mopub.mobileads.resource.CloseButtonDrawable;
-import com.mopub.mobileads.test.support.GestureUtils;
-import com.mopub.mobileads.test.support.ShadowVastVideoView;
-import com.mopub.mobileads.test.support.VastUtils;
-import com.mopub.network.MaxWidthImageLoader;
-import com.mopub.network.MoPubRequestQueue;
-import com.mopub.network.Networking;
-
-import org.apache.http.HttpRequest;
-import org.apache.maven.artifact.ant.shaded.ReflectionUtils;
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.Shadows;
-import org.robolectric.annotation.Config;
-import org.robolectric.internal.ShadowExtractor;
-import org.robolectric.shadows.ShadowApplication;
-import org.robolectric.shadows.ShadowImageView;
-import org.robolectric.shadows.ShadowRelativeLayout;
-import org.robolectric.shadows.ShadowTextView;
-import org.robolectric.shadows.ShadowVideoView;
-import org.robolectric.shadows.httpclient.FakeHttp;
-import org.robolectric.shadows.httpclient.RequestMatcher;
-import org.robolectric.shadows.httpclient.TestHttpResponse;
-import org.robolectric.shadows.support.v4.ShadowLocalBroadcastManager;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Map;
-
-import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE;
-import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
-import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
-import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.common.VolleyRequestMatcher.isUrl;
-import static com.mopub.mobileads.BaseVideoViewController.BaseVideoViewControllerListener;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
-import static com.mopub.mobileads.VastVideoViewController.CURRENT_POSITION;
-import static com.mopub.mobileads.VastVideoViewController.DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON;
-import static com.mopub.mobileads.VastVideoViewController.MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON;
-import static com.mopub.mobileads.VastVideoViewController.RESUMED_VAST_CONFIG;
-import static com.mopub.mobileads.VastVideoViewController.VAST_VIDEO_CONFIG;
-import static com.mopub.mobileads.VastXmlManagerAggregator.ADS_BY_AD_SLOT_ID;
-import static com.mopub.mobileads.VastXmlManagerAggregator.SOCIAL_ACTIONS_AD_SLOT_ID;
-import static com.mopub.volley.toolbox.ImageLoader.ImageListener;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.junit.Assert.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyBoolean;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.anyLong;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.argThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.verifyZeroInteractions;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class, shadows = {ShadowVastVideoView.class})
-public class VastVideoViewControllerTest {
-    public static final int NETWORK_DELAY = 100;
-
-    private static final String COMPANION_IMAGE_URL = "companion_image_url";
-    private static final String COMPANION_CLICK_TRACKING_URL_1 = "companion_click_tracking_url_1";
-    private static final String COMPANION_CLICK_TRACKING_URL_2 = "companion_click_tracking_url_2";
-    private static final String COMPANION_CLICK_TRACKING_URL_3 = "companion_click_tracking_url_3";
-    private static final String COMPANION_CLICK_DESTINATION_URL = "https://companion_click_destination_url";
-    private static final String COMPANION_CREATIVE_VIEW_URL_1 = "companion_creative_view_url_1";
-    private static final String COMPANION_CREATIVE_VIEW_URL_2 = "companion_creative_view_url_2";
-    private static final String COMPANION_CREATIVE_VIEW_URL_3 = "companion_creative_view_url_3";
-    private static final String RESOLVED_CLICKTHROUGH_URL = "https://www.mopub.com/";
-    private static final String CLICKTHROUGH_URL = "deeplink+://navigate?" +
-            "&primaryUrl=bogus%3A%2F%2Furl" +
-            "&fallbackUrl=" + Uri.encode(RESOLVED_CLICKTHROUGH_URL);
-
-    /**
-     * A list of macros to include in all trackers
-     */
-    private static final String MACRO_TAGS = "?errorcode=[ERRORCODE]&asseturi=[ASSETURI]&contentplayhead=[CONTENTPLAYHEAD]";
-
-    private Context context;
-    private Bundle bundle;
-    private Bundle savedInstanceState;
-    private long testBroadcastIdentifier;
-    private VastVideoViewController subject;
-    private int expectedBrowserRequestCode;
-    private String expectedUserAgent;
-
-    @Mock private BaseVideoViewControllerListener baseVideoViewControllerListener;
-    @Mock private EventForwardingBroadcastReceiver broadcastReceiver;
-    @Mock MoPubRequestQueue mockRequestQueue;
-    @Mock MaxWidthImageLoader mockImageLoader;
-    @Mock private VastIconConfig mMockVastIconConfig;
-    @Mock private MediaMetadataRetriever mockMediaMetadataRetriever;
-    @Mock private Bitmap mockBitmap;
-
-    private VastVideoViewCountdownRunnable spyCountdownRunnable;
-    private VastVideoViewProgressRunnable spyProgressRunnable;
-    private VideoView spyVideoView;
-
-    @Before
-    public void setUp() throws Exception {
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-        Networking.setImageLoaderForTesting(mockImageLoader);
-        context = spy(Robolectric.buildActivity(Activity.class).create().get());
-        bundle = new Bundle();
-        savedInstanceState = new Bundle();
-        testBroadcastIdentifier = 1111;
-
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setNetworkMediaFileUrl("video_url");
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.setDspCreativeId("dsp_creative_id");
-        vastVideoConfig.addAbsoluteTrackers(
-                Arrays.asList(new VastAbsoluteProgressTracker("start" + MACRO_TAGS, 2000)));
-        vastVideoConfig.addFractionalTrackers(
-                Arrays.asList(new VastFractionalProgressTracker("first" + MACRO_TAGS, 0.25f),
-                        new VastFractionalProgressTracker("mid" + MACRO_TAGS, 0.5f),
-                        new VastFractionalProgressTracker("third" + MACRO_TAGS, 0.75f)));
-        vastVideoConfig.addPauseTrackers(
-                Arrays.asList(new VastTracker("pause" + MACRO_TAGS, true)));
-        vastVideoConfig.addResumeTrackers(
-                Arrays.asList(new VastTracker("resume" + MACRO_TAGS, true)));
-        vastVideoConfig.addCompleteTrackers(
-                VastUtils.stringsToVastTrackers("complete" + MACRO_TAGS));
-        vastVideoConfig.addCloseTrackers(
-                VastUtils.stringsToVastTrackers("close" + MACRO_TAGS));
-        vastVideoConfig.addSkipTrackers(VastUtils.stringsToVastTrackers("skip" + MACRO_TAGS));
-        vastVideoConfig.addImpressionTrackers(
-                VastUtils.stringsToVastTrackers("imp" + MACRO_TAGS));
-        vastVideoConfig.addErrorTrackers(
-                Collections.singletonList(new VastTracker("error" + MACRO_TAGS)));
-        vastVideoConfig.setClickThroughUrl(CLICKTHROUGH_URL);
-        vastVideoConfig.addClickTrackers(
-                VastUtils.stringsToVastTrackers("click_1" + MACRO_TAGS, "click_2" + MACRO_TAGS));
-
-        VastCompanionAdConfig landscapeVastCompanionAdConfig = new VastCompanionAdConfig(
-                300,
-                250,
-                new VastResource(COMPANION_IMAGE_URL,
-                        VastResource.Type.STATIC_RESOURCE,
-                        VastResource.CreativeType.IMAGE, 300, 250),
-                COMPANION_CLICK_DESTINATION_URL,
-                VastUtils.stringsToVastTrackers(COMPANION_CLICK_TRACKING_URL_1, COMPANION_CLICK_TRACKING_URL_2),
-                VastUtils.stringsToVastTrackers(COMPANION_CREATIVE_VIEW_URL_1, COMPANION_CREATIVE_VIEW_URL_2)
-        );
-        VastCompanionAdConfig portraitVastCompanionAdConfig = new VastCompanionAdConfig(
-                250,
-                300,
-                new VastResource(COMPANION_IMAGE_URL,
-                        VastResource.Type.STATIC_RESOURCE,
-                        VastResource.CreativeType.IMAGE, 250, 300),
-                COMPANION_CLICK_DESTINATION_URL,
-                VastUtils.stringsToVastTrackers(COMPANION_CLICK_TRACKING_URL_3),
-                VastUtils.stringsToVastTrackers(COMPANION_CREATIVE_VIEW_URL_3)
-        );
-        vastVideoConfig.setVastCompanionAd(landscapeVastCompanionAdConfig,
-                portraitVastCompanionAdConfig);
-
-        when(mMockVastIconConfig.getWidth()).thenReturn(40);
-        when(mMockVastIconConfig.getHeight()).thenReturn(40);
-        VastResource vastResource = mock(VastResource.class);
-        when(vastResource.getType()).thenReturn(VastResource.Type.STATIC_RESOURCE);
-        when(vastResource.getResource()).thenReturn("static");
-        when(vastResource.getCreativeType()).thenReturn(VastResource.CreativeType.IMAGE);
-        when(mMockVastIconConfig.getVastResource()).thenReturn(vastResource);
-        vastVideoConfig.setVastIconConfig(mMockVastIconConfig);
-
-
-        final ArrayList<VastTracker> vastTrackers = new ArrayList<>();
-        VastCompanionAdConfig socialActionsCompanionAd =
-                new VastCompanionAdConfig(65, 20, vastResource, "", vastTrackers, vastTrackers);
-        Map<String, VastCompanionAdConfig> socialActionsCompanionAds =
-                new HashMap<String, VastCompanionAdConfig>();
-        socialActionsCompanionAds.put(ADS_BY_AD_SLOT_ID, socialActionsCompanionAd);
-        socialActionsCompanionAds.put(SOCIAL_ACTIONS_AD_SLOT_ID, socialActionsCompanionAd);
-        vastVideoConfig.setSocialActionsCompanionAds(socialActionsCompanionAds);
-
-        when(mockMediaMetadataRetriever.getFrameAtTime(anyLong(), anyInt())).thenReturn(mockBitmap);
-
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        expectedBrowserRequestCode = 1;
-
-        Robolectric.getForegroundThreadScheduler().pause();
-        Robolectric.getBackgroundThreadScheduler().pause();
-        FakeHttp.clearPendingHttpResponses();
-
-        // Used to give responses to Vast Download Tasks.
-        FakeHttp.addHttpResponseRule(new RequestMatcher() {
-            @Override
-            public boolean matches(HttpRequest request) {
-                return true;
-            }
-        }, new TestHttpResponse(200, "body"));
-
-        ShadowLocalBroadcastManager.getInstance(context).registerReceiver(broadcastReceiver,
-                new EventForwardingBroadcastReceiver(null,
-                testBroadcastIdentifier).getIntentFilter());
-
-        expectedUserAgent = new WebView(context).getSettings().getUserAgentString();
-    }
-
-    @After
-    public void tearDown() throws Exception {
-        Robolectric.getForegroundThreadScheduler().reset();
-        Robolectric.getBackgroundThreadScheduler().reset();
-
-        ShadowLocalBroadcastManager.getInstance(context).unregisterReceiver(broadcastReceiver);
-    }
-
-    @Test
-    public void constructor_shouldAddCtaButtonWidgetToLayoutAndSetInvisibleWithOnTouchListeners() throws Exception {
-        initializeSubject();
-
-        VastVideoCtaButtonWidget ctaButtonWidget = subject.getCtaButtonWidget();
-        assertThat(ctaButtonWidget.getParent()).isEqualTo(subject.getLayout());
-        assertThat(ctaButtonWidget.getVisibility()).isEqualTo(View.INVISIBLE);
-        ShadowImageView ctaButtonWidgetShadow = Shadows.shadowOf(ctaButtonWidget);
-        assertThat(ctaButtonWidgetShadow.getOnTouchListener()).isNotNull();
-        assertThat(ctaButtonWidgetShadow.getOnTouchListener()).isEqualTo(
-                getShadowVideoView().getOnTouchListener());
-    }
-
-    @Test
-    public void constructor_shouldAddProgressBarWidgetToLayoutAndSetInvisibleWithNoListeners() throws Exception {
-        initializeSubject();
-
-        VastVideoProgressBarWidget progressBarWidget = subject.getProgressBarWidget();
-        assertThat(progressBarWidget.getParent()).isEqualTo(subject.getLayout());
-        assertThat(progressBarWidget.getVisibility()).isEqualTo(View.INVISIBLE);
-        ShadowImageView progressBarWidgetShadow = Shadows.shadowOf(progressBarWidget);
-        assertThat(progressBarWidgetShadow.getOnTouchListener()).isNull();
-    }
-
-    @Test
-    public void constructor_shouldAddRadialCountdownWidgetToLayoutAndSetInvisibleWithNoListeners() throws Exception {
-        initializeSubject();
-
-        VastVideoRadialCountdownWidget radialCountdownWidget = subject.getRadialCountdownWidget();
-        assertThat(radialCountdownWidget.getParent()).isEqualTo(subject.getLayout());
-        assertThat(radialCountdownWidget.getVisibility()).isEqualTo(View.INVISIBLE);
-        ShadowImageView radialCountdownWidgetShadow = Shadows.shadowOf(radialCountdownWidget);
-        assertThat(radialCountdownWidgetShadow.getOnTouchListener()).isNull();
-    }
-
-    @Test
-    public void constructor_shouldAddIconViewToLayoutAndSetInvisibleWithWebViewClickListener() throws Exception {
-        initializeSubject();
-
-        View iconView = subject.getIconView();
-        assertThat(iconView.getParent()).isEqualTo(subject.getLayout());
-        assertThat(iconView.getVisibility()).isEqualTo(View.INVISIBLE);
-        assertThat(((VastWebView)iconView).getVastWebViewClickListener()).isNotNull();
-    }
-
-    @Test
-    public void constructor_withAdsByCompanion_shouldAddAdsByViewToLayout() throws Exception {
-        initializeSubject();
-
-        View adsByView = subject.createAdsByView((Activity) context);
-        assertThat(adsByView.getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(subject.getHasSocialActions()).isTrue();
-        assertThat(subject.getCtaButtonWidget().getHasSocialActions()).isTrue();
-        assertThat(((VastWebView) adsByView).getVastWebViewClickListener()).isNotNull();
-    }
-
-    @Test
-    public void constructor_withSocialActionsCompanion_shouldAddSocialActionsViewToLayout() throws Exception {
-        initializeSubject();
-
-        View socialActionsView = subject.getSocialActionsView();
-        assertThat(socialActionsView.getVisibility()).isEqualTo(View.INVISIBLE);
-        assertThat(subject.getHasSocialActions()).isTrue();
-        assertThat(subject.getCtaButtonWidget().getHasSocialActions()).isTrue();
-        assertThat(((VastWebView) socialActionsView).getVastWebViewClickListener()).isNotNull();
-    }
-
-    @Test
-    public void constructor_shouldAddCloseButtonWidgetToLayoutAndSetToGoneWithOnTouchListeners() throws Exception {
-        initializeSubject();
-
-        VastVideoCloseButtonWidget closeButtonWidget = subject.getCloseButtonWidget();
-        assertThat(closeButtonWidget.getParent()).isEqualTo(subject.getLayout());
-        assertThat(closeButtonWidget.getVisibility()).isEqualTo(View.GONE);
-
-        ShadowRelativeLayout closeButtonWidgetShadow = (ShadowRelativeLayout) Shadows.shadowOf(closeButtonWidget);
-        assertThat(closeButtonWidgetShadow.getOnTouchListener()).isNull();
-
-        ShadowImageView closeButtonImageViewShadow = Shadows.shadowOf(closeButtonWidget.getImageView());
-        assertThat(closeButtonImageViewShadow.getOnTouchListener()).isNotNull();
-
-        ShadowTextView closeButtonTextViewShadow = Shadows.shadowOf(closeButtonWidget.getTextView());
-        assertThat(closeButtonTextViewShadow.getOnTouchListener()).isNotNull();
-    }
-
-    @Test
-    public void constructor_shouldAddTopGradientStripWidgetToLayoutWithNoListeners() throws Exception {
-        initializeSubject();
-
-        VastVideoGradientStripWidget topGradientStripWidget = subject.getTopGradientStripWidget();
-        assertThat(topGradientStripWidget.getParent()).isEqualTo(subject.getLayout());
-
-        ShadowImageView topGradientStripWidgetShadow = Shadows.shadowOf(topGradientStripWidget);
-        assertThat(topGradientStripWidgetShadow.getOnTouchListener()).isNull();
-    }
-
-    @Test
-    public void constructor_shouldAddBottomGradientStripWidgetToLayoutWithNoListeners() throws Exception {
-        initializeSubject();
-
-        VastVideoGradientStripWidget bottomGradientStripWidget = subject.getBottomGradientStripWidget();
-        assertThat(bottomGradientStripWidget.getParent()).isEqualTo(subject.getLayout());
-
-        ShadowImageView bottomGradientStripWidgetShadow = Shadows.shadowOf(bottomGradientStripWidget);
-        assertThat(bottomGradientStripWidgetShadow.getOnTouchListener()).isNull();
-    }
-
-    @Test
-    public void constructor_shouldAddBlurredLastVideoFrameWidgetToLayoutAndSetInvisibleWithNoListeners() throws Exception {
-        initializeSubject();
-
-        ImageView blurredLastVideoFrameImageView = subject.getBlurredLastVideoFrameImageView();
-        assertThat(blurredLastVideoFrameImageView.getParent()).isEqualTo(subject.getLayout());
-        assertThat(blurredLastVideoFrameImageView.getVisibility()).isEqualTo(View.INVISIBLE);
-        ShadowImageView blurredLastVideoFrameImageViewShadow = Shadows.shadowOf(blurredLastVideoFrameImageView);
-        assertThat(blurredLastVideoFrameImageViewShadow.getOnTouchListener()).isNull();
-    }
-
-    @Test
-    public void constructor_shouldSetVideoListenersAndVideoPath() throws Exception {
-        initializeSubject();
-        ShadowVideoView videoView = Shadows.shadowOf(subject.getVideoView());
-
-        assertThat(videoView.getOnCompletionListener()).isNotNull();
-        assertThat(videoView.getOnErrorListener()).isNotNull();
-        assertThat(videoView.getOnTouchListener()).isNotNull();
-        assertThat(videoView.getOnPreparedListener()).isNotNull();
-
-        assertThat(videoView.getVideoPath()).isEqualTo("disk_video_path");
-        assertThat(subject.getVideoView().hasFocus()).isTrue();
-    }
-
-    @Test
-    public void constructor_shouldNotChangeCloseButtonDelay() throws Exception {
-        initializeSubject();
-
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(
-                DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
-    }
-
-    @Test
-    public void constructor_shouldAddBlackBackgroundToLayout() throws Exception {
-        initializeSubject();
-        Drawable background = subject.getLayout().getBackground();
-        assertThat(background).isInstanceOf(ColorDrawable.class);
-        assertThat(((ColorDrawable) background).getColor()).isEqualTo(Color.BLACK);
-    }
-
-    @Test
-    public void constructor_withMissingVastVideoConfiguration_shouldThrowIllegalStateException() throws Exception {
-        bundle.clear();
-        try {
-            initializeSubject();
-            fail("VastVideoViewController didn't throw IllegalStateException");
-        } catch (IllegalStateException e) {
-            // pass
-        }
-    }
-
-    @Test
-    public void constructor_withNullVastVideoConfigurationDiskMediaFileUrl_shouldThrowIllegalStateException() throws Exception {
-        bundle.putSerializable(VAST_VIDEO_CONFIG, new VastVideoConfig());
-        try {
-            initializeSubject();
-            fail("VastVideoViewController didn't throw IllegalStateException");
-        } catch (IllegalStateException e) {
-            // pass
-        }
-    }
-
-    @Test
-    public void constructor_whenCustomCtaTextNotSpecified_shouldUseDefaultCtaText() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-
-        assertThat(subject.getCtaButtonWidget().getCtaText()).isEqualTo(
-                "Learn More");
-    }
-
-    @Test
-    public void constructor_whenCustomCtaTextSpecified_shouldUseCustomCtaText() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.setCustomCtaText("custom CTA text");
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-
-        assertThat(subject.getCtaButtonWidget().getCtaText()).isEqualTo(
-                "custom CTA text");
-    }
-
-    @Test
-    public void constructor_whenCustomSkipTextNotSpecified_shouldUseDefaultSkipText() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-
-        assertThat(subject.getCloseButtonWidget().getTextView().getText().toString()).isEqualTo(
-                "");
-    }
-
-    @Test
-    public void constructor_whenCustomSkipTextSpecified_shouldUseCustomSkipText() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.setCustomSkipText("custom skip text");
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-
-        assertThat(subject.getCloseButtonWidget().getTextView().getText().toString()).isEqualTo(
-                "custom skip text");
-    }
-
-    @Test
-    public void constructor_whenCustomCloseIconNotSpecified_shouldUseDefaultCloseIcon() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-
-        Drawable imageViewDrawable = subject.getCloseButtonWidget().getImageView().getDrawable();
-
-        // Default close icon is an instance of CloseButtonDrawable
-        assertThat(imageViewDrawable).isInstanceOf(CloseButtonDrawable.class);
-    }
-
-    @Test
-    public void constructor_whenCustomCloseIconSpecified_shouldUseCustomCloseIcon() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.setCustomCloseIconUrl(
-                "https://ton.twitter.com/exchange-media/images/v4/star_icon_3x_1.png");
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-
-        verify(mockImageLoader).get(
-                eq("https://ton.twitter.com/exchange-media/images/v4/star_icon_3x_1.png"),
-                any(ImageListener.class));
-    }
-
-    @Test
-    public void constructor_withVastConfigurationInSavedInstanceState_shouldUseThatVastConfiguration() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.setNetworkMediaFileUrl("resumed_network_media_url");
-        savedInstanceState.putSerializable(RESUMED_VAST_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-
-        assertThat(subject.getNetworkMediaFileUrl()).isEqualTo("resumed_network_media_url");
-    }
-
-    @Test
-    public void constructor_withSavedVastConfiguration_shouldUseThatVastConfiguration() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.setNetworkMediaFileUrl("resumed_network_media_url");
-        savedInstanceState.putSerializable(RESUMED_VAST_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-
-        assertThat(subject.getNetworkMediaFileUrl()).isEqualTo("resumed_network_media_url");
-    }
-
-    @Test
-    public void constructor_withSavedVastConfiguration_withCurrentPositionSet_shouldResumeVideoFromCurrentPosition() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.setNetworkMediaFileUrl("resumed_network_media_url");
-        savedInstanceState.putSerializable(RESUMED_VAST_CONFIG, vastVideoConfig);
-        savedInstanceState.putInt(CURRENT_POSITION, 123);
-
-        initializeSubject();
-        spyOnVideoView();
-
-        subject.onResume();
-
-        verify(spyVideoView).seekTo(eq(123));
-    }
-
-    @Test
-    public void onCreate_shouldFireImpressionTracker() throws Exception {
-        initializeSubject();
-
-        subject.onCreate();
-        verify(mockRequestQueue).add(
-                argThat(isUrl("imp?errorcode=&asseturi=video_url&contentplayhead=00:00:00.000")));
-    }
-
-    @Test
-    public void onCreate_shouldBroadcastInterstitialShow() throws Exception {
-        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, testBroadcastIdentifier);
-
-        initializeSubject();
-
-        Robolectric.getForegroundThreadScheduler().unPause();
-        subject.onCreate();
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
-    }
-
-    @Test
-    public void onCreate_whenCustomForceOrientationNotSpecified_shouldForceLandscapeOrientation() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-        subject.onCreate();
-
-        verify(baseVideoViewControllerListener).onSetRequestedOrientation(
-                SCREEN_ORIENTATION_SENSOR_LANDSCAPE);
-    }
-
-    @Test
-    public void onCreate_whenCustomForceOrientationIsDeviceOrientation_shouldNotForceLandscapeOrientation() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.setCustomForceOrientation(ForceOrientation.DEVICE_ORIENTATION);
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-        subject.onCreate();
-
-        verify(baseVideoViewControllerListener, never()).onSetRequestedOrientation(anyInt());
-    }
-
-    @Test
-    public void onCreate_whenCustomForceOrientationIsPortraitOrientation_shouldForcePortraitOrientation() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.setCustomForceOrientation(ForceOrientation.FORCE_PORTRAIT);
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-        subject.onCreate();
-
-        verify(baseVideoViewControllerListener).onSetRequestedOrientation(
-                SCREEN_ORIENTATION_PORTRAIT);
-    }
-
-    @Test
-    public void onCreate_whenCustomForceOrientationIsLandscapeOrientation_shouldForceLandscapeOrientation() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.setCustomForceOrientation(ForceOrientation.FORCE_LANDSCAPE);
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-        subject.onCreate();
-
-        verify(baseVideoViewControllerListener).onSetRequestedOrientation(
-                SCREEN_ORIENTATION_SENSOR_LANDSCAPE);
-    }
-
-    @Test
-    public void VastWebView_onVastWebViewClick_shouldCallVastCompanionAdHandleClick() throws Exception {
-        initializeSubject();
-
-        VastCompanionAdConfig vastCompanionAdConfig = mock(VastCompanionAdConfig.class);
-        when(vastCompanionAdConfig.getWidth()).thenReturn(300);
-        when(vastCompanionAdConfig.getHeight()).thenReturn(240);
-        VastResource vastResource = mock(VastResource.class);
-        when(vastResource.getType()).thenReturn(VastResource.Type.STATIC_RESOURCE);
-        when(vastResource.getResource()).thenReturn("static");
-        when(vastCompanionAdConfig.getVastResource()).thenReturn(vastResource);
-
-        VastWebView view = (VastWebView) subject.createCompanionAdView(context,
-                vastCompanionAdConfig, View.INVISIBLE);
-
-        view.getVastWebViewClickListener().onVastWebViewClick();
-        verify(vastCompanionAdConfig).handleClick(any(Context.class), eq(1), anyString(), eq("dsp_creative_id"));
-    }
-
-    @Test
-    public void createCompanionAdView_shouldLayoutAndReturnInvisibleVastIconView() throws Exception {
-        initializeSubject();
-
-        VastCompanionAdConfig vastCompanionAdConfig = mock(VastCompanionAdConfig.class);
-        when(vastCompanionAdConfig.getWidth()).thenReturn(300);
-        when(vastCompanionAdConfig.getHeight()).thenReturn(240);
-        VastResource vastResource = mock(VastResource.class);
-        when(vastResource.getType()).thenReturn(VastResource.Type.STATIC_RESOURCE);
-        when(vastResource.getResource()).thenReturn("static");
-        when(vastCompanionAdConfig.getVastResource()).thenReturn(vastResource);
-
-        VastWebView view = (VastWebView) subject.createCompanionAdView(context,
-                vastCompanionAdConfig, View.INVISIBLE);
-
-        assertThat(view).isNotNull();
-        assertThat(view.getVisibility()).isEqualTo(View.INVISIBLE);
-        assertThat(view.getVastWebViewClickListener()).isNotNull();
-        assertThat(subject.getLayout().findViewById(view.getId())).isEqualTo(view);
-    }
-
-    @Test
-    public void createCompanionAdView_withNullCompanionAd_shouldReturnEmptyView() throws Exception {
-        initializeSubject();
-
-        assertThat(subject.createCompanionAdView(context, null, View.INVISIBLE)).isNotNull();
-    }
-
-    @Test
-    public void onDestroy_shouldBroadcastInterstitialDismiss() throws Exception {
-        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS,
-                testBroadcastIdentifier);
-
-        initializeSubject();
-
-        subject.onDestroy();
-        Robolectric.getForegroundThreadScheduler().unPause();
-
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
-    }
-
-    @Test
-    public void onDestroy_withBlurLastVideoFrameTaskStillRunning_shouldCancelTask() throws Exception {
-        initializeSubject();
-
-        VastVideoBlurLastVideoFrameTask mockBlurLastVideoFrameTask = mock(
-                VastVideoBlurLastVideoFrameTask.class);
-        when(mockBlurLastVideoFrameTask.getStatus()).thenReturn(AsyncTask.Status.RUNNING);
-        subject.getVastVideoView().setBlurLastVideoFrameTask(mockBlurLastVideoFrameTask);
-
-        subject.onDestroy();
-
-        verify(mockBlurLastVideoFrameTask).cancel(true);
-    }
-
-    @Test
-    public void onDestroy_withBlurLastVideoFrameTaskStillPending_shouldCancelTask() throws Exception {
-        initializeSubject();
-
-        VastVideoBlurLastVideoFrameTask mockBlurLastVideoFrameTask = mock(VastVideoBlurLastVideoFrameTask.class);
-        when(mockBlurLastVideoFrameTask.getStatus()).thenReturn(AsyncTask.Status.PENDING);
-        subject.getVastVideoView().setBlurLastVideoFrameTask(mockBlurLastVideoFrameTask);
-
-        subject.onDestroy();
-
-        verify(mockBlurLastVideoFrameTask).cancel(true);
-    }
-
-    @Test
-    public void onDestroy_withBlurLastVideoFrameTaskFinished_shouldNotCancelTask() throws Exception {
-        initializeSubject();
-
-        VastVideoBlurLastVideoFrameTask mockBlurLastVideoFrameTask = mock(VastVideoBlurLastVideoFrameTask.class);
-        when(mockBlurLastVideoFrameTask.getStatus()).thenReturn(AsyncTask.Status.FINISHED);
-        subject.getVastVideoView().setBlurLastVideoFrameTask(mockBlurLastVideoFrameTask);
-
-        subject.onDestroy();
-
-        verify(mockBlurLastVideoFrameTask, never()).cancel(anyBoolean());
-    }
-
-    @Test
-    public void onSaveInstanceState_shouldSetCurrentPosition_shouldSetVastConfiguration() throws Exception {
-        initializeSubject();
-
-        Bundle bundle = mock(Bundle.class);
-        subject.onSaveInstanceState(bundle);
-
-        verify(bundle).putInt(eq(CURRENT_POSITION), anyInt());
-        verify(bundle).putSerializable(eq(RESUMED_VAST_CONFIG), any(VastVideoConfig
-                .class));
-    }
-
-    @Test
-    public void onActivityResult_shouldCallFinish() throws Exception {
-        final int expectedResultCode = Activity.RESULT_OK;
-
-        initializeSubject();
-
-        subject.onActivityResult(expectedBrowserRequestCode, expectedResultCode, null);
-
-        verify(baseVideoViewControllerListener).onFinish();
-    }
-
-    @Test
-    public void onActivityResult_withIncorrectRequestCode_shouldNotCallFinish() throws Exception {
-        final int incorrectRequestCode = 1000;
-        final int expectedResultCode = Activity.RESULT_OK;
-
-        initializeSubject();
-
-        subject.onActivityResult(incorrectRequestCode, expectedResultCode, null);
-
-        verify(baseVideoViewControllerListener, never()).onFinish();
-    }
-
-    @Test
-    public void onActivityResult_withIncorrectResultCode_shouldNotCallFinish() throws Exception {
-        final int incorrectResultCode = Activity.RESULT_CANCELED;
-
-        initializeSubject();
-
-        subject.onActivityResult(expectedBrowserRequestCode, incorrectResultCode, null);
-
-        verify(baseVideoViewControllerListener, never()).onFinish();
-    }
-
-    @Test
-    public void onTouch_withTouchUp_whenVideoLessThan16Seconds_andClickBeforeEnd_shouldDoNothing() throws Exception {
-        initializeSubject();
-        spyOnVideoView();
-        setVideoViewParams(15990, 15999);
-
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-
-        Robolectric.getForegroundThreadScheduler().unPause();
-
-        getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
-
-        Intent nextStartedActivity = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(nextStartedActivity).isNull();
-    }
-
-    @Test
-    public void onTouch_withTouchUp_whenVideoLessThan16Seconds_andClickAfterEnd_shouldTrackClick_shouldStartMoPubBrowser() throws Exception {
-        initializeSubject();
-        spyOnVideoView();
-        setVideoViewParams(15999, 15999);
-        subject.onResume();
-
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-
-        Robolectric.getForegroundThreadScheduler().unPause();
-
-        getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
-
-        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
-        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
-        assertThat(startedActivity.getComponent().getClassName())
-                .isEqualTo(MoPubBrowser.class.getName());
-        assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(
-                RESOLVED_CLICKTHROUGH_URL);
-        verify((Activity) context).startActivityForResult(any(Intent.class),
-                eq(expectedBrowserRequestCode));
-    }
-
-    @Test
-    public void onTouch_withTouchUp_whenVideoLongerThan16Seconds_andClickBefore5Seconds_shouldDoNothing() throws Exception {
-        initializeSubject();
-        spyOnVideoView();
-        setVideoViewParams(4999, 100000);
-        subject.onResume();
-
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-
-        Robolectric.getForegroundThreadScheduler().unPause();
-
-        getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
-
-        Intent nextStartedActivity = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(nextStartedActivity).isNull();
-    }
-
-    @Test
-    public void onTouch_withTouchUp_whenVideoLongerThan16Seconds_andClickAfter5Seconds_shouldStartMoPubBrowser() throws Exception {
-        initializeSubject();
-        spyOnVideoView();
-        setVideoViewParams(5001, 100000);
-        subject.onResume();
-
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-
-        Robolectric.getForegroundThreadScheduler().unPause();
-
-        getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
-
-        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
-        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
-        assertThat(startedActivity.getComponent().getClassName())
-                .isEqualTo(MoPubBrowser.class.getName());
-        assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(
-                RESOLVED_CLICKTHROUGH_URL);
-        verify((Activity) context).startActivityForResult(any(Intent.class),
-                eq(expectedBrowserRequestCode));
-    }
-
-    @Test
-    public void onTouch_whenCloseButtonVisible_shouldPingClickThroughTrackers() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setNetworkMediaFileUrl("video_url");
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.addClickTrackers(
-                VastUtils.stringsToVastTrackers("click_1" + MACRO_TAGS, "click_2" + MACRO_TAGS));
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-        spyOnVideoView();
-        // Because it's almost never exactly 15 seconds
-        when(spyVideoView.getDuration()).thenReturn(15142);
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-        getShadowVideoView().getOnCompletionListener().onCompletion(null);
-
-        subject.setCloseButtonVisible(true);
-
-        getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
-        verify(mockRequestQueue).add(argThat(isUrl(
-                "click_1?errorcode=&asseturi=video_url&contentplayhead=00:00:15.142")));
-        verify(mockRequestQueue).add(argThat(isUrl(
-                "click_2?errorcode=&asseturi=video_url&contentplayhead=00:00:15.142")));
-    }
-
-    @Test
-    public void onTouch_whenCloseButtonNotVisible_shouldNotPingClickThroughTrackers() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.addClickTrackers(VastUtils.stringsToVastTrackers("click_1",
-                "click_2"));
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-
-        subject.setCloseButtonVisible(false);
-
-        getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
-        assertThat(FakeHttp.httpRequestWasMade()).isFalse();
-    }
-
-    @Test
-    public void onTouch_withNullBaseVideoViewListener_andActionTouchUp_shouldReturnTrueAndNotBlowUp() throws Exception {
-        subject = new VastVideoViewController((Activity) context, bundle, null,
-                testBroadcastIdentifier, null);
-
-        boolean result = getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(
-                0, 0));
-
-        // pass
-
-        assertThat(result).isTrue();
-    }
-
-    @Test
-    public void onTouch_withActionTouchDown_shouldConsumeMotionEvent() throws Exception {
-        initializeSubject();
-
-        boolean result = getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionDown(
-                0, 0));
-
-        assertThat(result).isTrue();
-    }
-
-    @Test
-    public void onPrepared_whenDurationIsLessThanMaxVideoDurationForCloseButton_shouldSetShowCloseButtonDelayToDuration() throws Exception {
-        initializeSubject();
-        spyOnVideoView();
-        setVideoViewParams(0, 1000);
-
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(1000);
-    }
-
-    @Test
-    public void onPrepared_whenDurationIsGreaterThanMaxVideoDurationForCloseButton_shouldNotSetShowCloseButtonDelay() throws Exception {
-        initializeSubject();
-        spyOnVideoView();
-        setVideoViewParams(0, MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON + 1);
-
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(
-                DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
-    }
-
-    @Test
-    public void onPrepared_whenPercentSkipOffsetSpecified_shouldSetShowCloseButtonDelayToSkipOffset() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.setSkipOffset("25%");
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-        spyOnVideoView();
-        setVideoViewParams(0, 10000);
-
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(2500);
-        assertThat(subject.getHasSkipOffset()).isTrue();
-    }
-
-    @Test
-    public void onPrepared_whenAbsoluteSkipOffsetSpecified_shouldSetShowCloseButtonDelayToSkipOffset() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.setSkipOffset("00:00:03");
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-        spyOnVideoView();
-        setVideoViewParams(0, 10000);
-
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(3000);
-        assertThat(subject.getHasSkipOffset()).isTrue();
-    }
-
-    @Test
-    public void onPrepared_whenAbsoluteSkipOffsetWithMillisecondsSpecified_shouldSetShowCloseButtonDelayToSkipOffset() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.setSkipOffset("00:00:03.141");
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-        spyOnVideoView();
-        setVideoViewParams(0, 10000);
-
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(3141);
-        assertThat(subject.getHasSkipOffset()).isTrue();
-    }
-
-    @Test
-    public void onPrepared_whenSkipOffsetIsNull_shouldNotSetShowCloseButtonDelay() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.setSkipOffset(null);
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-        spyOnVideoView();
-        setVideoViewParams(0, MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON + 1);
-
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(
-                DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
-        assertThat(subject.getHasSkipOffset()).isFalse();
-    }
-
-    @Test
-    public void onPrepared_whenSkipOffsetHasInvalidAbsoluteFormat_shouldNotSetShowCloseButtonDelay() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.setSkipOffset("123:4:56.7");
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-        spyOnVideoView();
-        setVideoViewParams(0, MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON + 1);
-
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(
-                DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
-        assertThat(subject.getHasSkipOffset()).isFalse();
-    }
-
-    @Test
-    public void onPrepared_whenSkipOffsetHasInvalidPercentFormat_shouldNotSetShowCloseButtonDelay() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.setSkipOffset("101%");
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-        spyOnVideoView();
-        setVideoViewParams(0, MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON + 1);
-
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(
-                DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
-        assertThat(subject.getHasSkipOffset()).isFalse();
-    }
-
-    @Test
-    public void onPrepared_whenSkipOffsetHasInvalidFractionalPercentFormat_shouldNotSetShowCloseButtonDelay() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.setSkipOffset("3.14%");
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-        spyOnVideoView();
-        setVideoViewParams(0, MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON + 1);
-
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(
-                DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
-        assertThat(subject.getHasSkipOffset()).isFalse();
-    }
-
-    @Test
-    public void onPrepared_whenSkipOffsetIsNegative_shouldNotSetShowCloseButtonDelay() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.setSkipOffset("-00:00:03");
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-        spyOnVideoView();
-        setVideoViewParams(0, MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON + 1);
-
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(
-                DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
-        assertThat(subject.getHasSkipOffset()).isFalse();
-    }
-
-    @Test
-    public void onPrepared_whenSkipOffsetIsZero_shouldSetShowCloseButtonDelayToZero() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.setSkipOffset("00:00:00");
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-        spyOnVideoView();
-        setVideoViewParams(0, MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON + 1);
-
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(0);
-        assertThat(subject.getHasSkipOffset()).isTrue();
-    }
-
-    @Test
-    public void onPrepared_whenSkipOffsetIsLongerThanDurationForShortVideo_shouldSetShowCloseButtonDelay() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.setSkipOffset("00:00:11");   // 11s
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-        spyOnVideoView();
-        setVideoViewParams(0, 10000);    // 10s: short video
-
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(10 * 1000);
-        assertThat(subject.getHasSkipOffset()).isTrue();
-    }
-
-    @Test
-    public void onPrepared_whenSkipOffsetIsLongerThanDurationForLongVideo_shouldSetShowCloseButtonDelay() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.setSkipOffset("00:00:21");   // 21s
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-        spyOnVideoView();
-        setVideoViewParams(0, 20000);    // 20s: long video
-
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(20 * 1000);
-        assertThat(subject.getHasSkipOffset()).isTrue();
-    }
-
-    @Test
-    public void onPrepared_whenSkipOffset100Percent_shouldSetShowCloseButtonDelayToVideoDuration() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.setSkipOffset("100%");   // 20000 ms
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-        spyOnVideoView();
-        setVideoViewParams(0, 20000);    // 20s: long video
-
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(20000);
-        assertThat(subject.getHasSkipOffset()).isTrue();
-    }
-
-    @Test
-    public void onPrepared_whenSkipOffsetGreaterThan100Percent_shouldSetShowCloseButtonDelayToDefault() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.setSkipOffset("101%");   // 20200 ms
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-        spyOnVideoView();
-        setVideoViewParams(0, 20000);    // 20s: long video
-
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON);
-        assertThat(subject.getHasSkipOffset()).isFalse();
-    }
-
-    @Test
-    public void onPrepared_shouldCalibrateAndMakeVisibleRadialCountdownWidget() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.setSkipOffset("00:00:05");
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-        initializeSubject();
-        spyOnVideoView();
-        setVideoViewParams(0, 10000);
-
-        final VastVideoRadialCountdownWidget radialCountdownWidgetSpy = spy(subject.getRadialCountdownWidget());
-        subject.setRadialCountdownWidget(radialCountdownWidgetSpy);
-
-        assertThat(subject.isCalibrationDone()).isFalse();
-        assertThat(radialCountdownWidgetSpy.getVisibility()).isEqualTo(View.INVISIBLE);
-
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-
-        assertThat(subject.isCalibrationDone()).isTrue();
-        assertThat(radialCountdownWidgetSpy.getVisibility()).isEqualTo(View.VISIBLE);
-        verify(radialCountdownWidgetSpy).calibrateAndMakeVisible(5000);
-    }
-
-    @Test
-    public void onPrepared_shouldCalibrateAndMakeVisibleProgressBarWidget() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.setSkipOffset("00:00:05");
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-        initializeSubject();
-        spyOnVideoView();
-        setVideoViewParams(0, 10000);
-
-        final VastVideoProgressBarWidget progressBarWidgetSpy = spy(subject.getProgressBarWidget());
-        subject.setProgressBarWidget(progressBarWidgetSpy);
-
-        assertThat(subject.isCalibrationDone()).isFalse();
-        assertThat(progressBarWidgetSpy.getVisibility()).isEqualTo(View.INVISIBLE);
-
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-
-        assertThat(subject.isCalibrationDone()).isTrue();
-        assertThat(progressBarWidgetSpy.getVisibility()).isEqualTo(View.VISIBLE);
-        verify(progressBarWidgetSpy).calibrateAndMakeVisible(10000, 5000);
-    }
-
-    @Test
-    public void onPrepared_shouldSetBlurredLastVideoFrame() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-        Robolectric.getBackgroundThreadScheduler().unPause();
-        Robolectric.getForegroundThreadScheduler().unPause();
-        Thread.sleep(NETWORK_DELAY);
-
-        final ImageView blurredLastVideoFrameImageView = subject.getBlurredLastVideoFrameImageView();
-        assertThat(blurredLastVideoFrameImageView.getDrawable()).isInstanceOf(BitmapDrawable.class);
-        assertThat(
-                ((BitmapDrawable) blurredLastVideoFrameImageView.getDrawable()).getBitmap()).isNotNull();
-
-        ShadowImageView imageView = Shadows.shadowOf(subject.getBlurredLastVideoFrameImageView());
-        assertThat(imageView.getOnTouchListener()).isNull();
-    }
-
-    @Test
-    public void onCompletion_shouldMarkVideoAsFinished() throws Exception {
-        initializeSubject();
-
-        getShadowVideoView().getOnCompletionListener().onCompletion(null);
-
-        assertThat(subject.isVideoFinishedPlaying()).isTrue();
-    }
-
-    @Test
-    public void onCompletion_whenAllTrackersTracked_whenNoPlaybackErrors_shouldPingCompletionTrackersOnlyOnce() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setNetworkMediaFileUrl("video_url");
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        VastAbsoluteProgressTracker testTracker = new VastAbsoluteProgressTracker(
-                "testUrl" + MACRO_TAGS, 123);
-        vastVideoConfig.addAbsoluteTrackers(Arrays.asList(testTracker));
-        vastVideoConfig.addCompleteTrackers(
-                VastUtils.stringsToVastTrackers("complete_1" + MACRO_TAGS,
-                        "complete_2" + MACRO_TAGS));
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-        testTracker.setTracked();
-        spyOnVideoView();
-        setVideoViewParams(15000, 15000);
-
-        getShadowVideoView().getOnCompletionListener().onCompletion(null);
-        verify(mockRequestQueue).add(argThat(isUrl(
-                "complete_1?errorcode=&asseturi=video_url&contentplayhead=00:00:15.000")));
-        verify(mockRequestQueue).add(argThat(isUrl(
-                "complete_2?errorcode=&asseturi=video_url&contentplayhead=00:00:15.000")));
-
-        // Completion trackers should still only be hit once
-        getShadowVideoView().getOnCompletionListener().onCompletion(null);
-        verify(mockRequestQueue).add(argThat(isUrl(
-                "complete_1?errorcode=&asseturi=video_url&contentplayhead=00:00:15.000")));
-        verify(mockRequestQueue).add(argThat(isUrl(
-                "complete_2?errorcode=&asseturi=video_url&contentplayhead=00:00:15.000")));
-    }
-
-    @Test
-    public void onCompletion_whenSomeTrackersRemain_shouldNotPingCompletionTrackers() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setNetworkMediaFileUrl("video_url");
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.addCompleteTrackers(
-                VastUtils.stringsToVastTrackers("complete_1", "complete_2"));
-        VastAbsoluteProgressTracker testTracker = new VastAbsoluteProgressTracker(
-                "testUrl" + MACRO_TAGS, 123);
-        // Never track the testTracker, so completion trackers should not be fired.
-        vastVideoConfig.addAbsoluteTrackers(Arrays.asList(testTracker));
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-
-        getShadowVideoView().getOnCompletionListener().onCompletion(null);
-        verify(mockRequestQueue, never()).add(argThat(isUrl("complete_1")));
-        verify(mockRequestQueue, never()).add(argThat(isUrl("complete_2")));
-    }
-
-    @Test
-    public void onCompletion_whenPlaybackError_shouldNotPingCompletionTrackers() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setNetworkMediaFileUrl("video_url");
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.addCompleteTrackers(
-                VastUtils.stringsToVastTrackers("complete_1", "complete_2"));
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-        subject.setVideoError();
-        spyOnVideoView();
-        setVideoViewParams(12345, 15000);
-
-        getShadowVideoView().getOnCompletionListener().onCompletion(null);
-        verify(mockRequestQueue, never()).add(argThat(isUrl("complete_1")));
-        verify(mockRequestQueue, never()).add(argThat(isUrl("complete_2")));
-    }
-
-    @Test
-    public void onCompletion_shouldPreventOnResumeFromStartingVideo() throws Exception {
-        initializeSubject();
-
-        getShadowVideoView().getOnCompletionListener().onCompletion(null);
-
-        subject.onResume();
-
-        assertThat(getShadowVideoView().isPlaying()).isFalse();
-    }
-
-    @Test
-    public void onCompletion_shouldStopProgressCheckerAndCountdown() throws Exception {
-        initializeSubject();
-        subject.onResume();
-
-        reset(spyCountdownRunnable, spyCountdownRunnable);
-
-        getShadowVideoView().getOnCompletionListener().onCompletion(null);
-
-        verify(spyCountdownRunnable).stop();
-        verify(spyProgressRunnable).stop();
-    }
-
-    @Test
-    public void onCompletion_whenCompanionAdAvailable_shouldShowCompanionAdAndHideBlurredLastVideoFrame() throws Exception {
-        final VastVideoConfig vastVideoConfig =
-                (VastVideoConfig) bundle.getSerializable(VAST_VIDEO_CONFIG);
-        vastVideoConfig.setSocialActionsCompanionAds(new HashMap<String, VastCompanionAdConfig>());
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-        initializeSubject();
-
-        final View companionView = subject.getLandscapeCompanionAdView();
-        final ImageView blurredLastVideoFrameImageView = subject.getBlurredLastVideoFrameImageView();
-
-        assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(companionView.getVisibility()).isEqualTo(View.INVISIBLE);
-        assertThat(blurredLastVideoFrameImageView.getVisibility()).isEqualTo(View.INVISIBLE);
-
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-        Robolectric.getBackgroundThreadScheduler().unPause();
-        Robolectric.getForegroundThreadScheduler().unPause();
-        Thread.sleep(NETWORK_DELAY);
-
-        getShadowVideoView().getOnCompletionListener().onCompletion(null);
-
-        assertThat(subject.getVastVideoView().getBlurLastVideoFrameTask()).isNull();
-        assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.INVISIBLE);
-        assertThat(companionView.getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(blurredLastVideoFrameImageView.getVisibility()).isEqualTo(View.INVISIBLE);
-    }
-
-    @Test
-    public void onCompletion_whenCompanionAdAvailable_shouldOnlyShowTopGradientStripWidget() throws Exception {
-        initializeSubject();
-
-        final VastVideoGradientStripWidget topGradientStripWidget = subject.getTopGradientStripWidget();
-        final VastVideoGradientStripWidget bottomGradientStripWidget = subject.getBottomGradientStripWidget();
-
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-        Robolectric.getBackgroundThreadScheduler().unPause();
-        Robolectric.getForegroundThreadScheduler().unPause();
-        Thread.sleep(NETWORK_DELAY);
-
-        getShadowVideoView().getOnCompletionListener().onCompletion(null);
-
-        assertThat(topGradientStripWidget.getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(bottomGradientStripWidget.getVisibility()).isEqualTo(View.GONE);
-    }
-
-    @Test
-    public void onCompletion_whenCompanionAdNotAvailable_shouldHideCompanionAdAndShowBlurredLastVideoFrame() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.setVastCompanionAd(null, null);
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-
-        final View companionView = subject.getLandscapeCompanionAdView();
-        final ImageView blurredLastVideoFrameImageView = subject.getBlurredLastVideoFrameImageView();
-
-        assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(companionView.getVisibility()).isEqualTo(View.INVISIBLE);
-        assertThat(blurredLastVideoFrameImageView.getVisibility()).isEqualTo(View.INVISIBLE);
-
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-        Robolectric.getBackgroundThreadScheduler().unPause();
-        Robolectric.getForegroundThreadScheduler().unPause();
-        Thread.sleep(NETWORK_DELAY);
-
-        getShadowVideoView().getOnCompletionListener().onCompletion(null);
-
-        assertThat(subject.getVastVideoView().getBlurLastVideoFrameTask()).isNotNull();
-        assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.INVISIBLE);
-        assertThat(companionView.getVisibility()).isEqualTo(View.INVISIBLE);
-        assertThat(blurredLastVideoFrameImageView.getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(blurredLastVideoFrameImageView.getDrawable()).isInstanceOf(BitmapDrawable.class);
-        assertThat(
-                ((BitmapDrawable) blurredLastVideoFrameImageView.getDrawable()).getBitmap()).isNotNull();
-    }
-
-    @Test
-    public void onCompletion_whenCompanionAdNotAvailable_shouldHideBothGradientStripWidgets() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.setVastCompanionAd(null, null);
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-
-        final VastVideoGradientStripWidget topGradientStripWidget = subject.getTopGradientStripWidget();
-        final VastVideoGradientStripWidget bottomGradientStripWidget = subject.getBottomGradientStripWidget();
-
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-        Robolectric.getBackgroundThreadScheduler().unPause();
-        Robolectric.getForegroundThreadScheduler().unPause();
-        Thread.sleep(NETWORK_DELAY);
-
-        getShadowVideoView().getOnCompletionListener().onCompletion(null);
-
-        assertThat(topGradientStripWidget.getVisibility()).isEqualTo(View.GONE);
-        assertThat(bottomGradientStripWidget.getVisibility()).isEqualTo(View.GONE);
-    }
-    
-    @Test
-    public void onCompletion_whenCompanionAdNotAvailableAndBlurredLastVideoFrameNotPrepared_shouldShowBlackBackground() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.setVastCompanionAd(null, null);
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-
-        final View companionView = subject.getLandscapeCompanionAdView();
-        final ImageView blurredLastVideoFrameImageView = subject.getBlurredLastVideoFrameImageView();
-
-        assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(companionView.getVisibility()).isEqualTo(View.INVISIBLE);
-        assertThat(blurredLastVideoFrameImageView.getVisibility()).isEqualTo(View.INVISIBLE);
-
-        getShadowVideoView().getOnCompletionListener().onCompletion(null);
-
-        assertThat(subject.getVastVideoView().getBlurLastVideoFrameTask()).isNull();
-        assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.INVISIBLE);
-        assertThat(companionView.getVisibility()).isEqualTo(View.INVISIBLE);
-        assertThat(blurredLastVideoFrameImageView.getVisibility()).isEqualTo(View.INVISIBLE);
-
-        Drawable background = subject.getLayout().getBackground();
-        assertThat(((ColorDrawable) background).getColor()).isEqualTo(Color.BLACK);
-    }
-
-    @Test
-    public void onCompletion_whenCompanionAdNotAvailableAndBlurredLastVideoFrameNotPrepared_shouldHideBothGradientStripWidgets() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.setVastCompanionAd(null, null);
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-
-        final VastVideoGradientStripWidget topGradientStripWidget = subject.getTopGradientStripWidget();
-        final VastVideoGradientStripWidget bottomGradientStripWidget = subject.getBottomGradientStripWidget();
-
-        getShadowVideoView().getOnCompletionListener().onCompletion(null);
-
-        assertThat(topGradientStripWidget.getVisibility()).isEqualTo(View.GONE);
-        assertThat(bottomGradientStripWidget.getVisibility()).isEqualTo(View.GONE);
-    }
-
-    @Test
-    public void onCompletion_withSocialActions_shouldShowCompanionAdAndShowBlurredLastVideoFrame() throws Exception {
-        initializeSubject();
-
-        final View companionView = subject.getLandscapeCompanionAdView();
-        final ImageView blurredLastVideoFrameImageView = subject.getBlurredLastVideoFrameImageView();
-
-        assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(companionView.getVisibility()).isEqualTo(View.INVISIBLE);
-        assertThat(blurredLastVideoFrameImageView.getVisibility()).isEqualTo(View.INVISIBLE);
-
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-        Robolectric.getBackgroundThreadScheduler().unPause();
-        Robolectric.getForegroundThreadScheduler().unPause();
-        Thread.sleep(NETWORK_DELAY);
-
-        getShadowVideoView().getOnCompletionListener().onCompletion(null);
-
-        assertThat(subject.getVastVideoView().getBlurLastVideoFrameTask()).isNotNull();
-        assertThat(subject.getVideoView().getVisibility()).isEqualTo(View.INVISIBLE);
-        assertThat(companionView.getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(blurredLastVideoFrameImageView.getVisibility()).isEqualTo(View.VISIBLE);
-    }
-
-    @Test
-    public void onError_shouldFireVideoErrorAndReturnFalse() throws Exception {
-        initializeSubject();
-
-        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_FAIL, testBroadcastIdentifier);
-
-        boolean result = getShadowVideoView().getOnErrorListener().onError(null, 0, 0);
-        Robolectric.getForegroundThreadScheduler().unPause();
-
-        assertThat(result).isFalse();
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
-        assertThat(subject.getVideoError()).isTrue();
-    }
-
-    @Test
-    public void onError_shouldStopProgressChecker() throws Exception {
-        initializeSubject();
-        subject.onResume();
-
-        verify(spyProgressRunnable).startRepeating(anyLong());
-        verify(spyCountdownRunnable).startRepeating(anyLong());
-        reset(spyProgressRunnable, spyCountdownRunnable);
-        getShadowVideoView().getOnErrorListener().onError(null, 0, 0);
-
-        verify(spyProgressRunnable).stop();
-        verify(spyCountdownRunnable).stop();
-    }
-
-    @Test
-    public void onError_shouldFireErrorTrackers() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setNetworkMediaFileUrl("video_url");
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.addCompleteTrackers(
-                VastUtils.stringsToVastTrackers("complete_1", "complete_2"));
-        vastVideoConfig.addErrorTrackers(
-                Collections.singletonList(new VastTracker("error" + MACRO_TAGS)));
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-        subject.setVideoError();
-        spyOnVideoView();
-        setVideoViewParams(12345, 15000);
-
-        getShadowVideoView().getOnErrorListener().onError(null, 0, 0);
-        verify(mockRequestQueue, never()).add(argThat(isUrl("complete_1")));
-        verify(mockRequestQueue, never()).add(argThat(isUrl("complete_2")));
-        verify(mockRequestQueue).add(argThat(isUrl(
-                "error?errorcode=400&asseturi=video_url&contentplayhead=00:00:12.345")));
-    }
-
-    @Test
-    public void onError_withMultipleCalls_shouldRepeatedlyFireErrorTrackers() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setNetworkMediaFileUrl("video_url");
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.addErrorTrackers(
-                Collections.singletonList(new VastTracker("error" + MACRO_TAGS)));
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-        subject.setVideoError();
-        spyOnVideoView();
-        setVideoViewParams(12345, 15000);
-
-        for(int i = 0; i < 10; i++) {
-            getShadowVideoView().getOnErrorListener().onError(null, 0, 0);
-            verify(mockRequestQueue).add(argThat(isUrl(
-                    "error?errorcode=400&asseturi=video_url&contentplayhead=00:00:12.345")));
-        }
-        verifyNoMoreInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void videoRunnablesRun_shouldFireOffAllProgressTrackers() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setNetworkMediaFileUrl("video_url");
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.addFractionalTrackers(
-                Arrays.asList(new VastFractionalProgressTracker("first" + MACRO_TAGS, 0.25f),
-                        new VastFractionalProgressTracker("second" + MACRO_TAGS, 0.5f),
-                        new VastFractionalProgressTracker("third" + MACRO_TAGS, 0.75f)));
-
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-        spyOnVideoView();
-        setVideoViewParams(9002, 9002);
-        subject.onResume();
-
-        // this runs the videoProgressChecker and countdown runnable
-        Robolectric.getForegroundThreadScheduler().unPause();
-
-        verify(mockRequestQueue).add(
-                argThat(isUrl("first?errorcode=&asseturi=video_url&contentplayhead=00:00:09.002")));
-        verify(mockRequestQueue).add(argThat(isUrl(
-                "second?errorcode=&asseturi=video_url&contentplayhead=00:00:09.002")));
-        verify(mockRequestQueue).add(
-                argThat(isUrl("third?errorcode=&asseturi=video_url&contentplayhead=00:00:09.002")));
-    }
-
-    @Test
-    public void videoRunnablesRun_whenDurationIsInvalid_shouldNotMakeAnyNetworkCalls() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-        spyOnVideoView();
-        setVideoViewParams(0, 100);
-
-        subject.onResume();
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(2);
-        Robolectric.getForegroundThreadScheduler().runOneTask();
-        Robolectric.getForegroundThreadScheduler().runOneTask();
-
-        // make sure the repeated task hasn't run yet
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(2);
-        verifyZeroInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void videoRunnablesRun_whenCurrentTimeLessThanTwoSeconds_shouldNotFireStartTracker() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.addAbsoluteTrackers(
-                Arrays.asList(new VastAbsoluteProgressTracker("start", 2000)));
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-        spyOnVideoView();
-        setVideoViewParams(1999, 100000);
-        subject.onResume();
-
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(2);
-
-        Robolectric.getForegroundThreadScheduler().runOneTask();
-        Robolectric.getForegroundThreadScheduler().runOneTask();
-        // make sure the repeated task hasn't run yet
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(2);
-
-        // Since it has not yet been a second, we expect that the start tracker has not been fired
-        verifyZeroInteractions(mockRequestQueue);
-
-        // run checker another time
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(2);
-        Robolectric.getForegroundThreadScheduler().runOneTask();
-        Robolectric.getForegroundThreadScheduler().runOneTask();
-
-        verifyZeroInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void videoRunnablesRun_whenCurrentTimeGreaterThanTwoSeconds_shouldFireStartTracker() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setNetworkMediaFileUrl("video_url");
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.addAbsoluteTrackers(
-                Arrays.asList(new VastAbsoluteProgressTracker("start" + MACRO_TAGS, 2000)));
-        vastVideoConfig.addAbsoluteTrackers(
-                Arrays.asList(new VastAbsoluteProgressTracker("later" + MACRO_TAGS, 3000)));
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-        spyOnVideoView();
-        setVideoViewParams(2000, 100000);
-        subject.onResume();
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(2);
-
-        Robolectric.getForegroundThreadScheduler().unPause();
-
-        verify(mockRequestQueue).add(
-                argThat(isUrl("start?errorcode=&asseturi=video_url&contentplayhead=00:00:02.000")));
-
-        // run checker another time
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(2);
-        Robolectric.getForegroundThreadScheduler().runOneTask();
-        Robolectric.getForegroundThreadScheduler().runOneTask();
-
-        verifyNoMoreInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void videoRunnablesRun_whenProgressIsPastFirstQuartile_shouldOnlyPingFirstQuartileTrackersOnce() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setNetworkMediaFileUrl("video_url");
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.addFractionalTrackers(
-                Arrays.asList(new VastFractionalProgressTracker("first" + MACRO_TAGS, 0.25f)));
-        vastVideoConfig.addFractionalTrackers(
-                Arrays.asList(new VastFractionalProgressTracker("don't call" + MACRO_TAGS, 0.28f)));
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-        spyOnVideoView();
-        setVideoViewParams(26, 100);
-        subject.onResume();
-
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(2);
-
-        Robolectric.getForegroundThreadScheduler().unPause();
-
-        verify(mockRequestQueue).add(
-                argThat(isUrl("first?errorcode=&asseturi=video_url&contentplayhead=00:00:00.026")));
-
-        // run checker another time
-        Robolectric.getForegroundThreadScheduler().runOneTask();
-        Robolectric.getForegroundThreadScheduler().runOneTask();
-
-        verifyNoMoreInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void videoRunnablesRun_whenProgressIsPastMidQuartile_shouldPingFirstQuartileTrackers_andMidQuartileTrackersBothOnlyOnce() throws Exception {
-
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setNetworkMediaFileUrl("video_url");
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.addFractionalTrackers(
-                Arrays.asList(new VastFractionalProgressTracker("first" + MACRO_TAGS, 0.25f)));
-        vastVideoConfig.addFractionalTrackers(
-                Arrays.asList(new VastFractionalProgressTracker("second" + MACRO_TAGS, 0.5f)));
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-        spyOnVideoView();
-        setVideoViewParams(51, 100);
-
-        subject.onResume();
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(2);
-
-        Robolectric.getForegroundThreadScheduler().unPause();
-
-        verify(mockRequestQueue).add(
-                argThat(isUrl("first?errorcode=&asseturi=video_url&contentplayhead=00:00:00.051")));
-        verify(mockRequestQueue).add(argThat(isUrl(
-                "second?errorcode=&asseturi=video_url&contentplayhead=00:00:00.051")));
-
-        Robolectric.getForegroundThreadScheduler().runOneTask();
-        Robolectric.getForegroundThreadScheduler().runOneTask();
-
-        verifyNoMoreInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void videoRunnablesRun_whenProgressIsPastThirdQuartile_shouldPingFirstQuartileTrackers_andMidQuartileTrackers_andThirdQuartileTrackersAllOnlyOnce() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setNetworkMediaFileUrl("video_url");
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.addFractionalTrackers(
-                Arrays.asList(new VastFractionalProgressTracker("first" + MACRO_TAGS, 0.25f)));
-        vastVideoConfig.addFractionalTrackers(
-                Arrays.asList(new VastFractionalProgressTracker("second" + MACRO_TAGS, 0.5f)));
-        vastVideoConfig.addFractionalTrackers(
-                Arrays.asList(new VastFractionalProgressTracker("third" + MACRO_TAGS, 0.75f)));
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-        spyOnVideoView();
-        setVideoViewParams(76, 100);
-
-        subject.onResume();
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(2);
-
-        Robolectric.getForegroundThreadScheduler().unPause();
-
-        verify(mockRequestQueue).add(
-                argThat(isUrl("first?errorcode=&asseturi=video_url&contentplayhead=00:00:00.076")));
-        verify(mockRequestQueue).add(argThat(isUrl(
-                "second?errorcode=&asseturi=video_url&contentplayhead=00:00:00.076")));
-        verify(mockRequestQueue).add(
-                argThat(isUrl("third?errorcode=&asseturi=video_url&contentplayhead=00:00:00.076")));
-
-        Robolectric.getForegroundThreadScheduler().runOneTask();
-        Robolectric.getForegroundThreadScheduler().runOneTask();
-
-        verifyNoMoreInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void videoRunnablesRun_asVideoPlays_shouldPingAllThreeTrackersIndividuallyOnce() throws Exception {
-        //stub(mockMediaPlayer.getDuration()).toReturn(100);
-
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setNetworkMediaFileUrl("video_url");
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.addFractionalTrackers(
-                Arrays.asList(new VastFractionalProgressTracker("first" + MACRO_TAGS, 0.25f)));
-        vastVideoConfig.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("second" + MACRO_TAGS, 0.5f)));
-        vastVideoConfig.addFractionalTrackers(Arrays.asList(new VastFractionalProgressTracker("third" + MACRO_TAGS, 0.75f)));
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-        spyOnVideoView();
-        when(spyVideoView.getDuration()).thenReturn(100);
-        subject.onResume();
-
-        // before any trackers are fired
-        seekToAndAssertRequestsMade(1);
-
-        seekToAndAssertRequestsMade(24);
-
-        // after it hits first tracker
-        seekToAndAssertRequestsMade(26,
-                "first?errorcode=&asseturi=video_url&contentplayhead=00:00:00.026");
-
-        // before mid quartile is hit
-        seekToAndAssertRequestsMade(49);
-
-        // after it hits mid trackers
-        seekToAndAssertRequestsMade(51,
-                "second?errorcode=&asseturi=video_url&contentplayhead=00:00:00.051");
-
-        // before third quartile is hit
-        seekToAndAssertRequestsMade(74);
-
-        // after third quartile is hit
-        seekToAndAssertRequestsMade(76,
-                "third?errorcode=&asseturi=video_url&contentplayhead=00:00:00.076");
-
-        // way after third quartile is hit
-        seekToAndAssertRequestsMade(99);
-    }
-
-    private void seekToAndAssertRequestsMade(int position, String... trackingUrls) {
-        when(spyVideoView.getCurrentPosition()).thenReturn(position);
-        Robolectric.getForegroundThreadScheduler().advanceToLastPostedRunnable();
-
-        for (String url : trackingUrls) {
-            verify(mockRequestQueue).add(argThat(isUrl(url)));
-        }
-    }
-
-    @Test
-    public void videoRunnablesRun_whenCurrentPositionIsGreaterThanShowCloseButtonDelay_shouldShowCloseButton() throws Exception {
-
-        initializeSubject();
-        spyOnVideoView();
-        setVideoViewParams(5001, 5002);
-        subject.onResume();
-
-        assertThat(subject.isShowCloseButtonEventFired()).isFalse();
-        Robolectric.getForegroundThreadScheduler().unPause();
-
-        assertThat(subject.isShowCloseButtonEventFired()).isTrue();
-    }
-
-    @Test
-    public void videoRunnablesRun_whenCurrentPositionIsGreaterThanSkipOffset_shouldShowCloseButton() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.setSkipOffset("25%");    // skipoffset is at 2.5s
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-        spyOnVideoView();
-        setVideoViewParams(2501, 10000); // duration is 10s, current position is 1ms after skipoffset
-        subject.onResume();
-
-
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(2500);
-        assertThat(subject.getHasSkipOffset()).isTrue();
-
-        assertThat(subject.isShowCloseButtonEventFired()).isFalse();
-        Robolectric.getForegroundThreadScheduler().unPause();
-
-        assertThat(subject.isShowCloseButtonEventFired()).isTrue();
-    }
-
-    @Test
-    public void videoRunnablesRun_whenCurrentPositionIsLessThanSkipOffset_shouldNotShowCloseButton() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.setSkipOffset("00:00:03");   // skipoffset is at 3s
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-
-        initializeSubject();
-        spyOnVideoView();
-        setVideoViewParams(2999, 10000); // duration is 10s, current position is 1ms before skipoffset
-        subject.onResume();
-
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(3000);
-        assertThat(subject.getHasSkipOffset()).isTrue();
-
-        assertThat(subject.isShowCloseButtonEventFired()).isFalse();
-        Robolectric.getForegroundThreadScheduler().unPause();
-
-        assertThat(subject.isShowCloseButtonEventFired()).isFalse();
-    }
-
-    @Test
-    public void onPause_shouldStopRunnables() throws Exception {
-        initializeSubject();
-
-        subject.onResume();
-        verify(spyCountdownRunnable).startRepeating(anyLong());
-        verify(spyProgressRunnable).startRepeating(anyLong());
-
-        subject.onPause();
-        verify(spyCountdownRunnable).stop();
-        verify(spyProgressRunnable).stop();
-    }
-
-    @Test
-    public void onPause_shouldFirePauseTrackers() throws Exception {
-        initializeSubject();
-
-        subject.onPause();
-        verify(mockRequestQueue).add(
-                argThat(isUrl("pause?errorcode=&asseturi=video_url&contentplayhead=00:00:00.000")));
-    }
-
-    @Test
-    public void onPause_withIsClosingFlagSet_shouldNotFirePauseTrackers() throws Exception {
-        initializeSubject();
-        subject.setIsClosing(true);
-
-        subject.onPause();
-        verifyNoMoreInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void onResume_shouldStartRunnables() throws Exception {
-        initializeSubject();
-
-        subject.onPause();
-        verify(spyCountdownRunnable).stop();
-        verify(spyProgressRunnable).stop();
-
-        subject.onResume();
-        verify(spyCountdownRunnable).startRepeating(anyLong());
-        verify(spyProgressRunnable).startRepeating(anyLong());
-    }
-
-    @Test
-    public void onResume_shouldSetVideoViewStateToStarted() throws Exception {
-        initializeSubject();
-
-        subject.onResume();
-
-        assertThat(getShadowVideoView().getCurrentVideoState()).isEqualTo(ShadowVideoView.START);
-        assertThat(getShadowVideoView().getPrevVideoState()).isNotEqualTo(ShadowVideoView.START);
-    }
-
-    @Test
-    public void onResume_shouldSeekToPrePausedPosition() throws Exception {
-        initializeSubject();
-        spyOnVideoView();
-        setVideoViewParams(7000, 10000);
-
-        subject.onPause();
-
-        setVideoViewParams(1000, 10000);
-
-        subject.onResume();
-        verify(spyVideoView).seekTo(eq(7000));
-    }
-
-    @Test
-    public void onResume_multipleTimes_shouldFirePauseResumeTrackersMultipleTimes() throws Exception {
-        initializeSubject();
-        spyOnVideoView();
-
-        setVideoViewParams(7000, 10000);
-        subject.onPause();
-
-        setVideoViewParams(1000, 10000);
-        subject.onResume();
-
-        verify(mockRequestQueue).add(argThat(isUrl
-                ("pause?errorcode=&asseturi=video_url&contentplayhead=00:00:07.000")));
-        verify(mockRequestQueue).add(
-                argThat(isUrl("resume?errorcode=&asseturi=video_url&contentplayhead=00:00:07.000")));
-
-        subject.onPause();
-        subject.onResume();
-
-        verify(mockRequestQueue).add(
-                argThat(isUrl("pause?errorcode=&asseturi=video_url&contentplayhead=00:00:07.000")));
-        verify(mockRequestQueue).add(
-                argThat(isUrl("resume?errorcode=&asseturi=video_url&contentplayhead=00:00:07.000")));
-    }
-
-    @Test
-    public void onConfigurationChanged_withPortraitCompanionAdVisible_withDeviceLandscape_shouldMakeLandscapeCompanionAdVisible() throws Exception {
-        initializeSubject();
-        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
-        subject.getPortraitCompanionAdView().setVisibility(View.VISIBLE);
-
-        subject.onConfigurationChanged(null);
-
-        assertThat(subject.getPortraitCompanionAdView().getVisibility()).isEqualTo(View.INVISIBLE);
-        assertThat(subject.getLandscapeCompanionAdView().getVisibility()).isEqualTo(View.VISIBLE);
-        verify(mockRequestQueue).add(argThat(isUrl(COMPANION_CREATIVE_VIEW_URL_1)));
-        verify(mockRequestQueue).add(argThat(isUrl(COMPANION_CREATIVE_VIEW_URL_2)));
-        verifyNoMoreInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void onConfigurationChanged_withLandscapeCompanionAdVisible_withDevicePortrait_shouldMakePortraitCompanionAdVisible() throws Exception {
-        initializeSubject();
-        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
-        subject.getLandscapeCompanionAdView().setVisibility(View.VISIBLE);
-
-        subject.onConfigurationChanged(null);
-
-        assertThat(subject.getLandscapeCompanionAdView().getVisibility()).isEqualTo(View.INVISIBLE);
-        assertThat(subject.getPortraitCompanionAdView().getVisibility()).isEqualTo(View.VISIBLE);
-        verify(mockRequestQueue).add(argThat(isUrl(COMPANION_CREATIVE_VIEW_URL_3)));
-        verifyNoMoreInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void onConfigurationChanged_withPortraitCompanionAdVisible_withDevicePortrait_shouldKeepPortraitCompanionAdVisible() throws Exception {
-        initializeSubject();
-        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
-        subject.getPortraitCompanionAdView().setVisibility(View.VISIBLE);
-
-        subject.onConfigurationChanged(null);
-
-        assertThat(subject.getPortraitCompanionAdView().getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(subject.getLandscapeCompanionAdView().getVisibility()).isEqualTo(View.INVISIBLE);
-        verify(mockRequestQueue).add(argThat(isUrl(COMPANION_CREATIVE_VIEW_URL_3)));
-        verifyNoMoreInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void onConfigurationChanged_withNoCompanionAdVisible_shouldDoNothing() throws Exception {
-        initializeSubject();
-        context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
-
-        subject.onConfigurationChanged(null);
-
-        assertThat(subject.getPortraitCompanionAdView().getVisibility()).isEqualTo(View.INVISIBLE);
-        assertThat(subject.getLandscapeCompanionAdView().getVisibility()).isEqualTo(View.INVISIBLE);
-        verifyNoMoreInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void onConfigurationChanged_whenCalledMultipleTimes_shouldOnlyEverFireEachCreativeViewTrackerOnce() throws Exception {
-        initializeSubject();
-        subject.getPortraitCompanionAdView().setVisibility(View.VISIBLE);
-
-        for(int i = 0; i < 10; i++) {
-            context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_LANDSCAPE;
-            subject.onConfigurationChanged(null);
-            context.getResources().getConfiguration().orientation = Configuration.ORIENTATION_PORTRAIT;
-            subject.onConfigurationChanged(null);
-        }
-        verify(mockRequestQueue).add(argThat(isUrl(COMPANION_CREATIVE_VIEW_URL_1)));
-        verify(mockRequestQueue).add(argThat(isUrl(COMPANION_CREATIVE_VIEW_URL_2)));
-        verify(mockRequestQueue).add(argThat(isUrl(COMPANION_CREATIVE_VIEW_URL_3)));
-        verifyNoMoreInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void onConfigurationChanged_withNoCompanionAd_shouldDoNothing() throws Exception {
-        VastVideoConfig vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setDiskMediaFileUrl("disk_video_path");
-        vastVideoConfig.setNetworkMediaFileUrl("media_url");
-        bundle.putSerializable(VAST_VIDEO_CONFIG, vastVideoConfig);
-        initializeSubject();
-
-        subject.onConfigurationChanged(null);
-
-        verifyNoMoreInteractions(mockRequestQueue);
-        assertThat(subject.getLandscapeCompanionAdView().getVisibility()).isEqualTo(View.INVISIBLE);
-        assertThat(subject.getLandscapeCompanionAdView().getWidth()).isEqualTo(0);
-        assertThat(subject.getLandscapeCompanionAdView().getHeight()).isEqualTo(0);
-        assertThat(subject.getPortraitCompanionAdView().getVisibility()).isEqualTo(View.INVISIBLE);
-        assertThat(subject.getPortraitCompanionAdView().getWidth()).isEqualTo(0);
-        assertThat(subject.getPortraitCompanionAdView().getHeight()).isEqualTo(0);
-    }
-
-    @Test
-    public void backButtonEnabled_shouldDefaultToFalse() throws Exception {
-        initializeSubject();
-
-        assertThat(subject.backButtonEnabled()).isFalse();
-    }
-
-    @Test
-    public void backButtonEnabled_whenCloseButtonIsVisible_shouldReturnTrue() throws Exception {
-        initializeSubject();
-
-        subject.setCloseButtonVisible(true);
-
-        assertThat(subject.backButtonEnabled()).isTrue();
-    }
-
-    @Test
-    public void onClickCloseButtonImageView_whenCloseButtonIsVisible_shouldFireCloseTrackers() throws Exception {
-        initializeSubject();
-        spyOnVideoView();
-        // Because it's almost never exactly 15 seconds
-        when(spyVideoView.getDuration()).thenReturn(15094);
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-        getShadowVideoView().getOnCompletionListener().onCompletion(null);
-
-        subject.setCloseButtonVisible(true);
-
-        // We don't have direct access to the CloseButtonWidget icon's close event, so we manually
-        // invoke its onTouchListener's onTouch callback with a fake MotionEvent.ACTION_UP action.
-        View.OnTouchListener closeButtonImageViewOnTouchListener =
-                Shadows.shadowOf(subject.getCloseButtonWidget().getImageView()).getOnTouchListener();
-        closeButtonImageViewOnTouchListener.onTouch(null, GestureUtils.createActionUp(0, 0));
-
-        verify(mockRequestQueue).add(
-                argThat(isUrl("close?errorcode=&asseturi=video_url&contentplayhead=00:00:15.094")));
-        verify(mockRequestQueue).add(
-                argThat(isUrl("skip?errorcode=&asseturi=video_url&contentplayhead=00:00:15.094")));
-    }
-
-    @Test
-    public void onClickCloseButtonTextView_whenCloseButtonIsVisible_shouldFireCloseTrackers() throws Exception {
-        initializeSubject();
-        spyOnVideoView();
-        // Because it's almost never exactly 15 seconds
-        when(spyVideoView.getDuration()).thenReturn(15203);
-        getShadowVideoView().getOnPreparedListener().onPrepared(null);
-        getShadowVideoView().getOnCompletionListener().onCompletion(null);
-
-        subject.setCloseButtonVisible(true);
-
-        // We don't have direct access to the CloseButtonWidget text's close event, so we manually
-        // invoke its onTouchListener's onTouch callback with a fake MotionEvent.ACTION_UP action.
-        View.OnTouchListener closeButtonTextViewOnTouchListener =
-                Shadows.shadowOf(subject.getCloseButtonWidget().getTextView()).getOnTouchListener();
-        closeButtonTextViewOnTouchListener.onTouch(null, GestureUtils.createActionUp(0, 0));
-
-        verify(mockRequestQueue).add(
-                argThat(isUrl("close?errorcode=&asseturi=video_url&contentplayhead=00:00:15.203")));
-        verify(mockRequestQueue).add(
-                argThat(isUrl("skip?errorcode=&asseturi=video_url&contentplayhead=00:00:15.203")));
-    }
-
-    @Test
-    public void createIconView_shouldLayoutAndReturnInvisibleVastIconView() throws Exception {
-        initializeSubject();
-
-        VastIconConfig vastIconConfig = mock(VastIconConfig.class);
-        when(vastIconConfig.getWidth()).thenReturn(40);
-        when(vastIconConfig.getHeight()).thenReturn(40);
-        VastResource vastResource = mock(VastResource.class);
-        when(vastResource.getType()).thenReturn(VastResource.Type.STATIC_RESOURCE);
-        when(vastResource.getResource()).thenReturn("static");
-        when(vastIconConfig.getVastResource()).thenReturn(vastResource);
-
-        VastWebView view = (VastWebView) subject.createIconView(context, vastIconConfig, View.INVISIBLE);
-
-        assertThat(view).isNotNull();
-        assertThat(view.getVisibility()).isEqualTo(View.INVISIBLE);
-        assertThat(view.getVastWebViewClickListener()).isNotNull();
-        assertThat(subject.getLayout().findViewById(view.getId())).isEqualTo(view);
-    }
-
-    @Test
-    public void createIconView_withNullVastIcon_shouldReturnEmptyView() throws Exception {
-        initializeSubject();
-
-        assertThat(subject.createIconView(context, null, View.INVISIBLE)).isNotNull();
-    }
-
-    @Test
-    public void VastWebView_onVastWebViewClick_shouldCallVastIconHandleClick() throws Exception {
-        initializeSubject();
-
-        VastIconConfig vastIconConfig = mock(VastIconConfig.class);
-        when(vastIconConfig.getWidth()).thenReturn(40);
-        when(vastIconConfig.getHeight()).thenReturn(40);
-        VastResource vastResource = mock(VastResource.class);
-        when(vastResource.getType()).thenReturn(VastResource.Type.STATIC_RESOURCE);
-        when(vastResource.getResource()).thenReturn("static");
-        when(vastIconConfig.getVastResource()).thenReturn(vastResource);
-
-        VastWebView view = (VastWebView) subject.createIconView(context, vastIconConfig, View.INVISIBLE);
-
-        view.getVastWebViewClickListener().onVastWebViewClick();
-        verify(vastIconConfig).handleClick(any(Context.class), anyString(), eq("dsp_creative_id"));
-    }
-
-    @Test
-    public void handleIconDisplay_withCurrentPositionGreaterThanOffset_shouldSetIconToVisible_shouldCallHandleImpression() throws Exception {
-        initializeSubject();
-
-        when(mMockVastIconConfig.getOffsetMS()).thenReturn(0);
-        when(mMockVastIconConfig.getDurationMS()).thenReturn(1);
-
-        subject.handleIconDisplay(0);
-
-        assertThat(subject.getIconView().getVisibility()).isEqualTo(View.VISIBLE);
-        verify(mMockVastIconConfig).handleImpression(any(Context.class), eq(0), eq("video_url"));
-    }
-
-    @Test
-    public void handleIconDisplay_withCurrentPositionLessThanOffset_shouldReturn() throws Exception {
-        initializeSubject();
-
-        when(mMockVastIconConfig.getOffsetMS()).thenReturn(1);
-
-        subject.handleIconDisplay(0);
-
-        assertThat(subject.getIconView().getVisibility()).isEqualTo(View.INVISIBLE);
-        verify(mMockVastIconConfig, never()).handleImpression(any(Context.class), eq(0),
-                eq("video_url"));
-    }
-
-    @Test
-    public void handleIconDisplay_withCurrentPositionGreaterThanOffsetPlusDuration_shouldSetIconToGone() throws Exception {
-        initializeSubject();
-
-        when(mMockVastIconConfig.getOffsetMS()).thenReturn(0);
-        when(mMockVastIconConfig.getDurationMS()).thenReturn(1);
-
-        subject.handleIconDisplay(2);
-
-        assertThat(subject.getIconView().getVisibility()).isEqualTo(View.GONE);
-    }
-
-    @Test
-    public void makeInteractable_shouldHideCountdownWidgetAndShowCtaAndCloseButtonWidgetsAndShowSocialActions() throws Exception {
-        initializeSubject();
-
-        subject.makeVideoInteractable();
-
-        assertThat(subject.getRadialCountdownWidget().getVisibility()).isEqualTo(View.GONE);
-        assertThat(subject.getCloseButtonWidget().getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(subject.getSocialActionsView().getVisibility()).isEqualTo(View.VISIBLE);
-    }
-
-    private void initializeSubject() throws IllegalAccessException {
-        subject = new VastVideoViewController((Activity) context, bundle, savedInstanceState,
-                testBroadcastIdentifier, baseVideoViewControllerListener);
-        subject.getVastVideoView().setMediaMetadataRetriever(mockMediaMetadataRetriever);
-        spyOnRunnables();
-    }
-
-    private void spyOnVideoView() throws IllegalAccessException {
-        spyVideoView = spy(subject.getVideoView());
-        ReflectionUtils.setVariableValueInObject(subject, "mVideoView", spyVideoView);
-    }
-
-    private void spyOnRunnables() throws IllegalAccessException {
-        final VastVideoViewProgressRunnable progressCheckerRunnable = (VastVideoViewProgressRunnable) ReflectionUtils.getValueIncludingSuperclasses("mProgressCheckerRunnable", subject);
-        spyProgressRunnable = spy(progressCheckerRunnable);
-
-        final VastVideoViewCountdownRunnable countdownRunnable = (VastVideoViewCountdownRunnable) ReflectionUtils.getValueIncludingSuperclasses("mCountdownRunnable", subject);
-        spyCountdownRunnable = spy(countdownRunnable);
-
-        ReflectionUtils.setVariableValueInObject(subject, "mProgressCheckerRunnable", spyProgressRunnable);
-        ReflectionUtils.setVariableValueInObject(subject, "mCountdownRunnable", spyCountdownRunnable);
-    }
-
-    private void setVideoViewParams(int currentPosition, int duration) throws IllegalAccessException {
-        when(spyVideoView.getCurrentPosition()).thenReturn(currentPosition);
-        when(spyVideoView.getDuration()).thenReturn(duration);
-    }
-
-    private ShadowVastVideoView getShadowVideoView() {
-        return (ShadowVastVideoView) ShadowExtractor.extract(subject.getVastVideoView());
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewCountdownRunnableTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewCountdownRunnableTest.java
deleted file mode 100644
index fd69364c..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewCountdownRunnableTest.java
+++ /dev/null
@@ -1,50 +0,0 @@
-package com.mopub.mobileads;
-
-import android.os.Handler;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.annotation.Config;
-
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class VastVideoViewCountdownRunnableTest {
-
-    @Mock VastVideoViewController mockVideoViewController;
-    @Mock Handler mockHandler;
-
-    VastVideoViewCountdownRunnable subject;
-
-    @Before
-    public void setup() {
-        subject = new VastVideoViewCountdownRunnable(mockVideoViewController, mockHandler);
-    }
-
-    @Test
-    public void doWork_whenShouldBeInteractable_shouldCallMakeVideoInteractable() {
-        when(mockVideoViewController.shouldBeInteractable()).thenReturn(true);
-
-        subject.doWork();
-
-        verify(mockVideoViewController).updateCountdown();
-        verify(mockVideoViewController).makeVideoInteractable();
-    }
-
-    @Test
-    public void doWork_whenShouldNotBeInteractable_shouldNotCallMakeVideoInteractable() {
-        when(mockVideoViewController.shouldBeInteractable()).thenReturn(false);
-
-        subject.doWork();
-
-        verify(mockVideoViewController).updateCountdown();
-        verify(mockVideoViewController, never()).makeVideoInteractable();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewProgressRunnableTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewProgressRunnableTest.java
deleted file mode 100644
index 4097331e..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewProgressRunnableTest.java
+++ /dev/null
@@ -1,101 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.os.Handler;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.network.MoPubRequestQueue;
-import com.mopub.network.Networking;
-import com.mopub.network.TrackingRequest;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Captor;
-import org.mockito.Mock;
-import org.robolectric.annotation.Config;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class VastVideoViewProgressRunnableTest {
-    @Mock VastVideoViewController mockVastVideoViewController;
-    @Mock Context mockContext;
-    @Mock Handler mockHandler;
-    @Mock MoPubRequestQueue mockRequestQueue;
-    @Mock VastVideoConfig mockVideoConfig;
-    @Captor ArgumentCaptor<TrackingRequest> requestCaptor;
-    VastVideoViewProgressRunnable subject;
-
-    @Before
-    public void setup() {
-        subject = new VastVideoViewProgressRunnable(mockVastVideoViewController, mockVideoConfig,
-                mockHandler);
-
-        // Request Queue needed to verify tracking requests made.
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-    }
-
-    @Test
-    public void doWork_whenTrackersReturned_shouldMakeTrackingRequests() {
-        List<VastTracker> testTrackers = new ArrayList<VastTracker>();
-        testTrackers.add(new VastAbsoluteProgressTracker("https://example.com/", 1999));
-        testTrackers.add(new VastAbsoluteProgressTracker("https://example1.com/", 2000));
-
-        when(mockVideoConfig.getUntriggeredTrackersBefore(eq(3000), eq(4000)))
-                .thenReturn(testTrackers);
-        when(mockVastVideoViewController.getCurrentPosition()).thenReturn(3000);
-        when(mockVastVideoViewController.getDuration()).thenReturn(4000);
-        when(mockVastVideoViewController.getContext()).thenReturn(mockContext);
-
-        subject.doWork();
-
-        verify(mockVideoConfig).getUntriggeredTrackersBefore(eq(3000), eq(4000));
-        verify(mockVastVideoViewController).getCurrentPosition();
-        verify(mockVastVideoViewController).getDuration();
-        verify(mockVastVideoViewController).getContext();
-        verify(mockVastVideoViewController).getNetworkMediaFileUrl();
-        verify(mockVastVideoViewController).handleIconDisplay(eq(3000));
-        verify(mockVastVideoViewController).updateProgressBar();
-
-        // Capture request queue - should get two different trackers.
-        verify(mockRequestQueue, times(2)).add(requestCaptor.capture());
-        final List<TrackingRequest> allValues = requestCaptor.getAllValues();
-        assertThat(allValues).hasSize(2);
-        assertThat(allValues.get(0).getUrl()).isEqualTo("https://example.com/");
-        assertThat(allValues.get(1).getUrl()).isEqualTo("https://example1.com/");
-
-        verifyNoMoreInteractions(mockVastVideoViewController, mockRequestQueue);
-    }
-
-    @Test
-    public void doWork_whenNoTrackersReturned_shouldNotMakeTrackingRequests() {
-        List<VastTracker> testTrackers = new ArrayList<VastTracker>();
-
-        when(mockVideoConfig.getUntriggeredTrackersBefore(eq(3000), eq(4000)))
-                .thenReturn(testTrackers);
-        when(mockVastVideoViewController.getCurrentPosition()).thenReturn(3000);
-        when(mockVastVideoViewController.getDuration()).thenReturn(4000);
-        when(mockVastVideoViewController.getContext()).thenReturn(mockContext);
-
-        subject.doWork();
-
-        verify(mockVideoConfig).getUntriggeredTrackersBefore(eq(3000), eq(4000));
-        verify(mockVastVideoViewController).getCurrentPosition();
-        verify(mockVastVideoViewController).getDuration();
-        verify(mockVastVideoViewController).handleIconDisplay(eq(3000));
-        verify(mockVastVideoViewController).updateProgressBar();
-
-        verifyNoMoreInteractions(mockVastVideoViewController, mockRequestQueue);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewTest.java
deleted file mode 100644
index 877a26c9..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewTest.java
+++ /dev/null
@@ -1,81 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.media.MediaMetadataRetriever;
-import android.os.AsyncTask;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.anyBoolean;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.anyLong;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class VastVideoViewTest {
-
-    @Mock private MediaMetadataRetriever mockMediaMetadataRetriever;
-    @Mock private Bitmap mockBitmap;
-
-    private Context context;
-    private VastVideoView subject;
-
-    @Before
-    public void setUp() throws Exception {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        subject = new VastVideoView(context);
-        subject.setMediaMetadataRetriever(mockMediaMetadataRetriever);
-        when(mockMediaMetadataRetriever.getFrameAtTime(anyLong(), anyInt())).thenReturn(
-                mockBitmap);
-    }
-
-    @Test
-    public void onDestroy_withBlurLastVideoFrameTaskStillRunning_shouldCancelTask() throws Exception {
-        VastVideoBlurLastVideoFrameTask mockBlurLastVideoFrameTask = mock(
-                VastVideoBlurLastVideoFrameTask.class);
-        when(mockBlurLastVideoFrameTask.getStatus()).thenReturn(AsyncTask.Status.RUNNING);
-        subject.setBlurLastVideoFrameTask(mockBlurLastVideoFrameTask);
-
-        subject.onDestroy();
-
-        verify(mockBlurLastVideoFrameTask).cancel(true);
-    }
-
-    @Test
-    public void onDestroy_withBlurLastVideoFrameTaskStillPending_shouldCancelTask() throws Exception {
-        VastVideoBlurLastVideoFrameTask mockBlurLastVideoFrameTask = mock(
-                VastVideoBlurLastVideoFrameTask.class);
-        when(mockBlurLastVideoFrameTask.getStatus()).thenReturn(AsyncTask.Status.PENDING);
-        subject.setBlurLastVideoFrameTask(mockBlurLastVideoFrameTask);
-
-        subject.onDestroy();
-
-        verify(mockBlurLastVideoFrameTask).cancel(true);
-    }
-
-    @Test
-    public void onDestroy_withBlurLastVideoFrameTaskFinished_shouldNotCancelTask() throws Exception {
-        VastVideoBlurLastVideoFrameTask mockBlurLastVideoFrameTask = mock(
-                VastVideoBlurLastVideoFrameTask.class);
-        when(mockBlurLastVideoFrameTask.getStatus()).thenReturn(AsyncTask.Status.FINISHED);
-        subject.setBlurLastVideoFrameTask(mockBlurLastVideoFrameTask);
-
-        subject.onDestroy();
-
-        verify(mockBlurLastVideoFrameTask, never()).cancel(anyBoolean());
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastWebViewTest.java
deleted file mode 100644
index cec7dcad..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastWebViewTest.java
+++ /dev/null
@@ -1,109 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.os.Build;
-import android.view.View;
-import android.webkit.WebSettings;
-import android.webkit.WebView;
-
-import com.mopub.TestSdkHelper;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.GestureUtils;
-import com.mopub.mobileads.test.support.VastUtils;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.Shadows;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowWebView;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class VastWebViewTest {
-
-    private VastWebView subject;
-    private Context context;
-    @Mock VastWebView.VastWebViewClickListener mockVastWebViewClickListener;
-    @Mock private VastResource mockResource;
-
-    @Before
-    public void setup() {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        subject = new VastWebView(context);
-        subject.setVastWebViewClickListener(mockVastWebViewClickListener);
-    }
-
-    @Test
-    public void constructor_shouldSetOnTouchListener() throws Exception {
-        assertThat(Shadows.shadowOf(subject).getOnTouchListener())
-                .isInstanceOf(VastWebView.VastWebViewOnTouchListener.class);
-    }
-
-    @Config(sdk = Build.VERSION_CODES.JELLY_BEAN_MR2)
-    @Test
-    public void pluginState_atLeastJellybeanMr2_shouldDefaultToOff_shouldNeverBeEnabled()  {
-        subject = new VastWebView(Robolectric.buildActivity(Activity.class).create().get());
-        assertThat(subject.getSettings().getPluginState()).isEqualTo(WebSettings.PluginState.OFF);
-
-        subject.enablePlugins(true);
-        assertThat(subject.getSettings().getPluginState()).isEqualTo(WebSettings.PluginState.OFF);
-    }
-
-    @Test
-    public void pluginState_BelowJellybeanMr2_shouldDefaultToOn_shouldAllowToggling() {
-        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.JELLY_BEAN);
-        subject = new VastWebView(context);
-        assertThat(subject.getSettings().getPluginState()).isEqualTo(WebSettings.PluginState.ON);
-
-        subject.enablePlugins(false);
-        assertThat(subject.getSettings().getPluginState()).isEqualTo(WebSettings.PluginState.OFF);
-
-        subject.enablePlugins(true);
-        assertThat(subject.getSettings().getPluginState()).isEqualTo(WebSettings.PluginState.ON);
-    }
-
-    @Test
-    public void loadData_shouldCallLoadDataWithBaseURL() throws Exception {
-        String data = "some random html response";
-        subject.loadData(data);
-
-        ShadowWebView.LoadDataWithBaseURL lastLoadData
-                = Shadows.shadowOf(subject).getLastLoadDataWithBaseURL();
-        assertThat(lastLoadData.baseUrl).isEqualTo("http://ads.mopub.com/");
-        assertThat(lastLoadData.data).isEqualTo(data);
-        assertThat(lastLoadData.mimeType).isEqualTo("text/html");
-        assertThat(lastLoadData.encoding).isEqualTo("utf-8");
-        assertThat(lastLoadData.historyUrl).isNull();
-    }
-
-    @Test
-    public void VastWebViewOnTouchListener_withActionDown_withActionUp_shouldCallOnVastWebViewClick() throws Exception {
-        View.OnTouchListener onTouchListener = Shadows.shadowOf(subject).getOnTouchListener();
-        onTouchListener.onTouch(subject, GestureUtils.createActionDown(0, 0));
-        onTouchListener.onTouch(subject, GestureUtils.createActionUp(0, 0));
-
-        verify(mockVastWebViewClickListener).onVastWebViewClick();
-    }
-
-    @Test
-    public void createView_shouldInitializeAndReturnView() throws Exception {
-        VastIconConfig vastIconConfig = new VastIconConfig(123, 456, 789, 101,
-                mockResource,
-                VastUtils.stringsToVastTrackers("clickTrackerOne", "clickTrackerTwo"),
-                "clickThroughUri",
-                VastUtils.stringsToVastTrackers("viewTrackerOne", "viewTrackerTwo")
-        );
-
-        WebView webView = subject.createView(context, vastIconConfig.getVastResource());
-        assertThat(webView).isNotNull();
-        verify(mockResource).initializeWebView(any(VastWebView.class));
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastWrapperXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastWrapperXmlManagerTest.java
deleted file mode 100644
index 0475625f..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastWrapperXmlManagerTest.java
+++ /dev/null
@@ -1,47 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-import org.w3c.dom.Node;
-
-import static com.mopub.mobileads.test.support.VastUtils.createNode;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class VastWrapperXmlManagerTest {
-
-    private VastWrapperXmlManager subject;
-
-    @Test
-    public void getVastAdTagURI_shouldReturnStringURI() throws Exception {
-        String wrapperXml = "<Wrapper>" +
-                "    <Impression id=\"DART\">" +
-                "        <![CDATA[https://impression/m/wrapperOne]]>" +
-                "    </Impression>" +
-                "    <VASTAdTagURI>https://redirecturl/xml</VASTAdTagURI>" +
-                "</Wrapper>";
-
-        Node wrapperNode = createNode(wrapperXml);
-        subject = new VastWrapperXmlManager(wrapperNode);
-
-        assertThat(subject.getVastAdTagURI()).isEqualTo("https://redirecturl/xml");
-    }
-
-    @Test
-    public void getVastAdTagURI_withNoVastAdTagURI_shouldReturnNull() throws Exception {
-        String wrapperXml = "<Wrapper>" +
-                "    <Impression id=\"DART\">" +
-                "        <![CDATA[https://impression/m/wrapperOne]]>" +
-                "    </Impression>" +
-                "</Wrapper>";
-
-        Node wrapperNode = createNode(wrapperXml);
-        subject = new VastWrapperXmlManager(wrapperNode);
-
-        assertThat(subject.getVastAdTagURI()).isNull();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerAggregatorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerAggregatorTest.java
deleted file mode 100644
index 5b7e6444..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerAggregatorTest.java
+++ /dev/null
@@ -1,1862 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.res.Configuration;
-import android.graphics.Point;
-import android.view.Display;
-import android.view.WindowManager;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.test.support.ShadowMoPubHttpUrlConnection;
-import com.mopub.mobileads.test.support.VastUtils;
-import com.mopub.network.MoPubRequestQueue;
-import com.mopub.network.Networking;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-import java.util.Map;
-import java.util.concurrent.Semaphore;
-
-import static com.mopub.common.VolleyRequestMatcher.isUrl;
-import static com.mopub.mobileads.VastXmlManagerAggregator.VastXmlManagerAggregatorListener;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.argThat;
-import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class, shadows = {ShadowMoPubHttpUrlConnection.class})
-public class VastXmlManagerAggregatorTest {
-    static final String TEST_VAST_XML_STRING = "<VAST version='2.0'>" +
-            "    <Ad id='empty'>" +
-            "        <InLine>" +
-            "            <Impression><![CDATA[https:emptyimpression]]></Impression>" +
-            "            <Creatives>" +
-            "                <Creative>" +
-            "                    <Linear>" +
-            "                        <MediaFiles>" +
-            "                        </MediaFiles>" +
-            "                    </Linear>" +
-            "                </Creative>" +
-            "            </Creatives>" +
-            "            <Error><![CDATA[https://neverCallThisError]]></Error>" +
-            "        </InLine>" +
-            "    </Ad>" +
-            "    <Ad id='62833' sequence='1'>" +
-            "        <Wrapper>" +
-            "            <AdSystem>Tapad</AdSystem>" +
-            "            <VASTAdTagURI>https://dsp.x-team.staging.mopub.com/xml</VASTAdTagURI>" +
-            "            <Impression>https://myTrackingURL/wrapper/impression1</Impression>" +
-            "            <Impression>https://myTrackingURL/wrapper/impression2</Impression>" +
-            "            <Creatives>" +
-            "                <Creative AdID='62833'>" +
-            "                    <Linear>" +
-            "                        <TrackingEvents>" +
-            "                            <Tracking event='creativeView'>https://myTrackingURL/wrapper/creativeView</Tracking>" +
-            "                            <Tracking event='start'>https://myTrackingURL/wrapper/start</Tracking>" +
-            "                            <Tracking event='midpoint'>https://myTrackingURL/wrapper/midpoint</Tracking>" +
-            "                            <Tracking event='firstQuartile'>https://myTrackingURL/wrapper/firstQuartile</Tracking>" +
-            "                            <Tracking event='thirdQuartile'>https://myTrackingURL/wrapper/thirdQuartile</Tracking>" +
-            "                            <Tracking event='complete'>https://myTrackingURL/wrapper/complete</Tracking>" +
-            "                            <Tracking event='mute'>https://myTrackingURL/wrapper/mute</Tracking>" +
-            "                            <Tracking event='unmute'>https://myTrackingURL/wrapper/unmute</Tracking>" +
-            "                            <Tracking event='pause'>https://myTrackingURL/wrapper/pause</Tracking>" +
-            "                            <Tracking event='resume'>https://myTrackingURL/wrapper/resume</Tracking>" +
-            "                            <Tracking event='fullscreen'>https://myTrackingURL/wrapper/fullscreen</Tracking>" +
-            "                        </TrackingEvents>" +
-            "                        <VideoClicks>" +
-            "                            <ClickTracking>https://myTrackingURL/wrapper/click</ClickTracking>" +
-            "                        </VideoClicks>" +
-            "                        <MediaFiles>" +
-            "                            <MediaFile delivery='progressive' bitrate='416' width='300' height='250' type='video/mp4'>" +
-            "                                <![CDATA[https://videosInWrappersShouldNeverBePlayed]]>" +
-            "                            </MediaFile>" +
-            "                        </MediaFiles>" +
-            "                    </Linear>" +
-            "                </Creative>" +
-            "                <Creative AdID=\"601364-Companion\">" +
-            "                    <CompanionAds>" +
-            "                        <Companion id=\"wrappercompanion\" height=\"250\" width=\"456\">" +
-            "                            <StaticResource creativeType=\"image/jpeg\">" +
-            "                                https://wrapperCompanionAdStaticResource" +
-            "                            </StaticResource>" +
-            "                            <TrackingEvents>" +
-            "                                <Tracking event=\"creativeView\">https://firstWrapperCompanionCreativeView</Tracking>" +
-            "                                <Tracking event=\"creativeView\">https://secondWrapperCompanionCreativeView</Tracking>" +
-            "                            </TrackingEvents>" +
-            "                            <CompanionClickThrough>https://wrapperCompanionClickThrough</CompanionClickThrough>" +
-            "                            <CompanionClickTracking><![CDATA[https://wrapperCompanionClickTracking]]></CompanionClickTracking>" +
-            "                        </Companion> " +
-            "                        <Companion id=\"noresource\" height=\"250\" width=\"456\">" +
-            "                            <TrackingEvents>" +
-            "                                <Tracking event=\"creativeView\">https://firstNoResourceWrapperCompanionCreativeView</Tracking>" +
-            "                                <Tracking event=\"creativeView\">https://secondNoResourceWrapperCompanionCreativeView</Tracking>" +
-            "                            </TrackingEvents>" +
-            "                            <CompanionClickThrough>https://noResourceWrapperCompanionClickThrough</CompanionClickThrough>" +
-            "                            <CompanionClickTracking><![CDATA[https://noResourceWrapperCompanionClickTracking1]]></CompanionClickTracking>" +
-            "                        </Companion> " +
-            "                    </CompanionAds>" +
-            "                </Creative>" +
-            "            </Creatives>" +
-            "            <Extensions>" +
-            "                <Extension type=\"MoPub\">" +
-            "                    <MoPubViewabilityTracker" +
-            "                            viewablePlaytime=\"2.5\"" +
-            "                            percentViewable=\"50%\">" +
-            "                        <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
-            "                    </MoPubViewabilityTracker>" +
-            "                </Extension>" +
-            "            </Extensions>" +
-            "            <Error><![CDATA[https://wrapperErrorOne?errorcode=[ERRORCODE]]]></Error>" +
-            "            <Error><![CDATA[https://wrapperErrorTwo?errorcode=[ERRORCODE]]]></Error>" +
-            "        </Wrapper>" +
-            "    </Ad>" +
-            "</VAST>" +
-            "<MP_TRACKING_URLS>" +
-            "    <MP_TRACKING_URL>https://www.mopub.com/imp1</MP_TRACKING_URL>" +
-            "    <MP_TRACKING_URL>https://www.mopub.com/imp2</MP_TRACKING_URL>" +
-            "</MP_TRACKING_URLS>";
-
-    static final String TEST_NESTED_VAST_XML_STRING = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
-            "<VAST version='2.0'>" +
-            "    <Ad id='57722'>" +
-            "        <InLine>" +
-            "            <AdSystem version='1.0'>Tapad</AdSystem>" +
-            "            <AdTitle><![CDATA[PKW6T_LIV_DSN_Audience_TAPAD_3rd Party Audience Targeting_Action Movi]]></AdTitle>" +
-            "            <Description/>" +
-            "            <Impression><![CDATA[https://rtb-test.dev.tapad.com:8080/creative/imp.png?ts=1374099035457&svid=1&creative_id=30731&ctx_type=InApp&ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&liverail_cp=1]]></Impression>" +
-            "            <Creatives>" +
-            "                <Creative sequence='1' id='57722'>" +
-            "                    <Linear>" +
-            "                       <Icons>" +
-            "                           <Icon program=\"program\" width=\"123\" height=\"234\" xPosition=\"789\" " +
-            "                           yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
-            "                           duration=\"01:02:03.456\">" +
-            "                               <StaticResource creativeType=\"ImAge/JpEg\">" +
-            "                                   <![CDATA[imageJpeg]]>" +
-            "                               </StaticResource>" +
-            "                               <IconClicks>" +
-            "                                   <IconClickThrough>" +
-            "                                       <![CDATA[clickThroughUri]]>" +
-            "                                   </IconClickThrough>" +
-            "                                   <IconClickTracking>" +
-            "                                       <![CDATA[clickTrackingUri1]]>" +
-            "                                   </IconClickTracking>" +
-            "                                   <IconClickTracking>" +
-            "                                       <![CDATA[clickTrackingUri2]]>" +
-            "                                   </IconClickTracking>" +
-            "                               </IconClicks>" +
-            "                               <IconViewTracking>" +
-            "                                   <![CDATA[viewTrackingUri1]]>" +
-            "                               </IconViewTracking>" +
-            "                               <IconViewTracking>" +
-            "                                   <![CDATA[viewTrackingUri2]]>" +
-            "                               </IconViewTracking>" +
-            "                            </Icon>" +
-            "                        </Icons>" +
-            "                        <Duration>00:00:15</Duration>" +
-            "                        <VideoClicks>" +
-            "                            <ClickThrough><![CDATA[https://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=https%3A%2F%2Ftapad.com]]></ClickThrough>" +
-            "                        </VideoClicks>" +
-            "                        <MediaFiles>" +
-            "                            <MediaFile delivery='progressive' bitrate='416' width='800' height='480' type='video/mp4'>" +
-            "                                <![CDATA[https://s3.amazonaws.com/mopub-vast/tapad-video.mp4]]>" +
-            "                            </MediaFile>" +
-            "                        </MediaFiles>" +
-            "                    </Linear>" +
-            "                </Creative>" +
-            "                <Creative AdID=\"601364-Companion\">" +
-            "                    <CompanionAds>" +
-            "                        <Companion id=\"valid\" height=\"250\" width=\"300\">" +
-            "                            <StaticResource creativeType=\"image/jpeg\">" +
-            "                                https://demo.tremormedia.com/proddev/vast/Blistex1.jpg" +
-            "                            </StaticResource>" +
-            "                            <TrackingEvents>" +
-            "                                <Tracking event=\"creativeView\">https://myTrackingURL/firstCompanionCreativeView</Tracking>" +
-            "                                <Tracking event=\"creativeView\">https://myTrackingURL/secondCompanionCreativeView</Tracking>" +
-            "                            </TrackingEvents>" +
-            "                            <CompanionClickThrough>https://www.tremormedia.com</CompanionClickThrough>" +
-            "                            <CompanionClickTracking><![CDATA[https://companionClickTracking1]]></CompanionClickTracking>" +
-            "                            <CompanionClickTracking><![CDATA[https://companionClickTracking2]]></CompanionClickTracking>" +
-            "                        </Companion>" +
-            "                        <Companion id=\"valid\" height=\"10000\" width=\"10000\">" +
-            "                            <HTMLResource>" +
-            "                                <![CDATA[" +
-            "                                    <link rel=\"stylesheet\" href=\"https://ton.twimg.com/exchange-media/staging/video_companions_style-29c86cb8e4193a6c4da8.css\">" +
-            "                                    <div class=\"tweet_wrapper\">" +
-            "                                    <div class=\"tweet\">" +
-            "                                    <img class=\"icon\" src=\"https://pbs.twimg.com/profile_images/641346383606235136/XLhN-zvk_reasonably_small.jpg\"/>" +
-            "                                    <span class=\"title\">Frappuccino</span>" +
-            "                                    <span id=\"tweet_text\" class=\"tweet-text\">" +
-            "                                    " +
-            "                                    The best use of your Frappuccino cup is to hold your Frappuccino. The second best is to hold your terrarium. \uD83C\uDF35☀️" +
-            "                                    </span>" +
-            "                                    </div>" +
-            "                                    </div>" +
-            "                                ]]>" +
-            "                            </HTMLResource>" +
-            "                            <TrackingEvents>" +
-            "                                <Tracking event=\"creativeView\">https://myTrackingURL/firstCompanionCreativeView</Tracking>" +
-            "                            </TrackingEvents>" +
-            "                            <CompanionClickThrough>https://frappucinoCompanion.com</CompanionClickThrough>" +
-            "                        </Companion>" +
-            "                        <Companion height=\"30\" width=\"65\" adSlotID=\"adsBy\">" +
-            "                            <HTMLResource>" +
-            "                                <![CDATA[" +
-            "                                    <link rel=\"stylesheet\" href=\"https://ton.twimg.com/exchange-media/staging/video_companions_style-29c86cb8e4193a6c4da8.css\">" +
-            "                                    <div class=\"ads-by-twitter\">" +
-            "                                    Ads by <div class=\"larry\"></div>" +
-            "                                    </div>" +
-            "                                ]]>" +
-            "                            </HTMLResource>" +
-            "                        </Companion>" +
-            "                        <Companion height=\"22\" width=\"130\" adSlotID=\"socialActions\">" +
-            "                            <HTMLResource>" +
-            "                                <![CDATA[" +
-            "                                    <link rel=\"stylesheet\" href=\"https://ton.twimg.com/exchange-media/staging/video_companions_style-29c86cb8e4193a6c4da8.css\">" +
-            "                                    <div class=\"social-actions\">" +
-            "                                    <a href=\"mopubshare://tweet?screen_name=frappuccino&tweet_id=590877845037056000\" class=\"retweet-button\"><div class=\"icon\"></div>310&nbsp;</a>" +
-            "                                    <a href=\"twitter://intent/favorite?id=590877845037056000\" class=\"like-button\"><div class=\"icon\"></div>1118&nbsp;</a>" +
-            "                                    </div>" +
-            "                                ]]>" +
-            "                            </HTMLResource>" +
-            "                        </Companion>" +
-            "                    </CompanionAds>" +
-            "                </Creative>" +
-            "            </Creatives>" +
-            "            <Error><![CDATA[https://nestedInLineErrorOne]]></Error>" +
-            "            <Error><![CDATA[https://nestedInLineErrorTwo]]></Error>" +
-            "        </InLine>" +
-            "    </Ad>" +
-            "</VAST>";
-
-    static final String TEST_NESTED_NO_COMPANION_VAST_XML_STRING = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
-            "<VAST version='2.0'>" +
-            "    <Ad id='57722'>" +
-            "        <InLine>" +
-            "            <AdSystem version='1.0'>Tapad</AdSystem>" +
-            "            <AdTitle><![CDATA[PKW6T_LIV_DSN_Audience_TAPAD_3rd Party Audience Targeting_Action Movi]]></AdTitle>" +
-            "            <Description/>" +
-            "            <Impression><![CDATA[https://rtb-test.dev.tapad.com:8080/creative/imp.png?ts=1374099035457&svid=1&creative_id=30731&ctx_type=InApp&ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&liverail_cp=1]]></Impression>" +
-            "            <Creatives>" +
-            "                <Creative sequence='1' id='57722'>" +
-            "                    <Linear>" +
-            "                        <Duration>00:00:15</Duration>" +
-            "                        <VideoClicks>" +
-            "                            <ClickThrough><![CDATA[https://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=https%3A%2F%2Ftapad.com]]></ClickThrough>" +
-            "                        </VideoClicks>" +
-            "                        <MediaFiles>" +
-            "                            <MediaFile delivery='progressive' bitrate='416' width='800' height='480' type='video/mp4'>" +
-            "                                <![CDATA[https://s3.amazonaws.com/mopub-vast/tapad-video.mp4]]>" +
-            "                            </MediaFile>" +
-            "                        </MediaFiles>" +
-            "                    </Linear>" +
-            "                </Creative>" +
-            "            </Creatives>" +
-            "            <Extensions>" +
-            "                <Extension type=\"MoPub\">" +
-            "                    <MoPubViewabilityTracker" +
-            "                            viewablePlaytime=\"3.5\"" +
-            "                            percentViewable=\"70%\">" +
-            "                        <![CDATA[https://ad.server.com/impression/dot.png]]>" +
-            "                    </MoPubViewabilityTracker>" +
-            "                </Extension>" +
-            "            </Extensions>" +
-            "        </InLine>" +
-            "    </Ad>" +
-            "</VAST>";
-
-    static final String TEST_VAST_BAD_NEST_URL_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>https://dsp.x-team.staging.mopub.com/xml\"$|||</VASTAdTagURI><Impression>https://myTrackingURL/wrapper/impression1</Impression><Impression>https://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>https://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>https://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>https://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='firstQuartile'>https://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>https://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>https://myTrackingURL/wrapper/complete</Tracking><Tracking event='mute'>https://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>https://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>https://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>https://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>https://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>https://myTrackingURL/wrapper/click</ClickTracking></VideoClicks></Linear></Creative></Creatives><Error>![CDATA[https://badNestedError]]</Error]</Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>https://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>https://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
-
-    static final String TEST_JUST_ERROR_XML_STRING = "<VAST version='3.0'>" +
-            "<Error><![CDATA[https://justErrorTracking?errorcode=[ERRORCODE]]]></Error>" +
-            "</VAST>";
-
-    static final String TEST_INVALID_VAST_XML_STRING = "<VAST version='fail'>" +
-            "This is not vast." +
-            "</VAST>";
-
-    static final String TEST_INVALID_XML_STRING = "this is not xml at all<<<";
-
-    static final String TEST_VAST_WITH_NEGATIVE_SEQUENCE_NUMBER_XML_STRING = "<VAST version='3.0'>" +
-            "    <Ad id='sequenceTooHigh' sequence='42'>" +
-            "        <InLine>" +
-            "            <Impression><![CDATA[https:sequenceTooHighImp]]></Impression>" +
-            "            <Creatives>" +
-            "                <Creative>" +
-            "                    <Linear>" +
-            "                        <MediaFiles>" +
-            "                            <MediaFile delivery='progressive' bitrate='416' width='300' height='250' type='video/mp4'>" +
-            "                                <![CDATA[https://sequenceTooHighVideo]]>" +
-            "                            </MediaFile>" +
-            "                        </MediaFiles>" +
-            "                    </Linear>" +
-            "                </Creative>" +
-            "            </Creatives>" +
-            "        </InLine>" +
-            "    </Ad>" +
-            "    <Ad id='negativeSequence' sequence='-2'>" +
-            "        <InLine>" +
-            "            <Impression><![CDATA[https://negativeSequence]]></Impression>" +
-            "            <Creatives>" +
-            "                <Creative>" +
-            "                    <Linear>" +
-            "                        <MediaFiles>" +
-            "                            <MediaFile delivery='progressive' bitrate='416' width='300' height='250' type='video/mp4'>" +
-            "                                <![CDATA[https://negativeSequence]]>" +
-            "                            </MediaFile>" +
-            "                        </MediaFiles>" +
-            "                    </Linear>" +
-            "                </Creative>" +
-            "            </Creatives>" +
-            "        </InLine>" +
-            "    </Ad>" +
-            "</VAST>";
-
-    private Activity context;
-    private Semaphore semaphore;
-    private VastXmlManagerAggregatorListener vastXmlManagerAggregatorListener;
-    private VastXmlManagerAggregator subject;
-    private VastVideoConfig mVastVideoConfig;
-
-    @Mock
-    MoPubRequestQueue mockRequestQueue;
-
-    @Before
-    public void setup() {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-
-        semaphore = new Semaphore(0);
-        vastXmlManagerAggregatorListener = mock(VastXmlManagerAggregatorListener.class);
-        doAnswer(new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
-                Object[] args = invocationOnMock.getArguments();
-                VastXmlManagerAggregatorTest.this.mVastVideoConfig = (VastVideoConfig) args[0];
-                semaphore.release();
-                return null;
-            }
-        }).when(vastXmlManagerAggregatorListener).onAggregationComplete(any(VastVideoConfig.class));
-
-        // Always assume landscape (where width > height) since videos will always be played in this orientation
-        int screenWidth = 800;
-        int screenHeight = 480;
-        double screenAspectRatio = (double) screenWidth / screenHeight;
-        int screenArea = screenWidth * screenHeight;
-        subject = new VastXmlManagerAggregator(vastXmlManagerAggregatorListener, screenAspectRatio,
-                screenArea, context);
-    }
-
-    // NOTE most of the functionality of this class is tested through VastManagerTest
-    // through integration tests
-
-    @Test
-    public void doInBackground_shouldNotFollowRedirectsOnceTheLimitHasBeenReached() throws Exception {
-        for (int i = 0; i < VastXmlManagerAggregator.MAX_TIMES_TO_FOLLOW_VAST_REDIRECT; i++) {
-            ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_VAST_XML_STRING);
-        }
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING);
-
-        subject.execute(TEST_VAST_XML_STRING);
-        semaphore.acquire();
-
-        assertThat(mVastVideoConfig).isNull();
-    }
-
-    @Test
-    public void doInBackground_shouldFollowMaxRedirectsMinusOne() throws Exception {
-        for (int i = 0; i < VastXmlManagerAggregator.MAX_TIMES_TO_FOLLOW_VAST_REDIRECT - 1; i++) {
-            ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_VAST_XML_STRING);
-        }
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING);
-
-        subject.execute(TEST_VAST_XML_STRING);
-        semaphore.acquire();
-
-        assertThat(mVastVideoConfig.getNetworkMediaFileUrl()).isEqualTo("https://s3" +
-                ".amazonaws.com/mopub-vast/tapad-video.mp4");
-        assertThat(mVastVideoConfig.getClickThroughUrl()).isEqualTo("https://rtb-test.dev" +
-                ".tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMj" +
-                "AwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTN" +
-                "BMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxh" +
-                "JTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLa" +
-                "XQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMT" +
-                "E2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzM" +
-                "wMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlk" +
-                "PUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3" +
-                "D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=https%3A%2F%2Ftapad." +
-                "com");
-        assertThat(mVastVideoConfig.getImpressionTrackers().size()).isEqualTo(4 *
-                VastXmlManagerAggregator.MAX_TIMES_TO_FOLLOW_VAST_REDIRECT + 1);
-        assertThat(mVastVideoConfig.getFractionalTrackers().size()).isEqualTo(3 *
-                VastXmlManagerAggregator.MAX_TIMES_TO_FOLLOW_VAST_REDIRECT);
-    }
-
-    @Test
-    public void getBestMediaFileUrl_shouldReturnMediaFileUrl() throws Exception {
-        final VastMediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(300, 250, "video/mp4", "video_url");
-
-        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
-        assertThat(bestMediaFileUrl).isEqualTo("video_url");
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withNullMediaType_shouldReturnNull() throws Exception {
-        final VastMediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(300, 250, null, "video_url");
-
-        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
-        assertThat(bestMediaFileUrl).isNull();
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withIncompatibleMediaType_shouldReturnNull() throws Exception {
-        final VastMediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(300, 250, "video/rubbish", "video_url");
-
-        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
-        assertThat(bestMediaFileUrl).isNull();
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withNullMediaUrl_shouldReturnNull() throws Exception {
-        final VastMediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(300, 250, "video/mp4", null);
-
-        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
-        assertThat(bestMediaFileUrl).isNull();
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withNullDimension_shouldReturnNull() throws Exception {
-        final VastMediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(null, 250, "video/mp4", "video_url");
-
-        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
-        assertThat(bestMediaFileUrl).isNull();
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withZeroDimension_shouldReturnNull() throws Exception {
-        final VastMediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(0, 250,
-                "video/mp4", "video_url");
-
-        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
-        assertThat(bestMediaFileUrl).isNull();
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withNegativeDimension_shouldReturnNull() throws Exception {
-        final VastMediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(-1, 250, "video/mp4", "video_url");
-
-        final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
-        assertThat(bestMediaFileUrl).isNull();
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withSameAspectRatios_shouldReturnUrlWithAreaCloserToScreenArea1() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Triple screen size
-        final VastMediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(2400, 1440, "video/mp4", "video_url1");
-        // Double screen size
-        final VastMediaXmlManager mediaXmlManager2 = initializeMediaXmlManagerMock(1600, 960, "video/mp4", "video_url2");
-
-        String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager1, mediaXmlManager2));
-        assertThat(bestMediaFileUrl).isEqualTo("video_url2");
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withSameAspectRatios_shouldReturnUrlWithAreaCloserToScreenArea2() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Triple screen size
-        final VastMediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(2400, 1440, "video/mp4", "video_url1");
-        // Half screen size
-        final VastMediaXmlManager mediaXmlManager2 = initializeMediaXmlManagerMock(400, 240,
-                "video/mp4", "video_url2");
-
-        String bestMediaFileUrl = subject.getBestMediaFileUrl(
-                Arrays.asList(mediaXmlManager1, mediaXmlManager2));
-        assertThat(bestMediaFileUrl).isEqualTo("video_url2");
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withSameArea_shouldReturnUrlWithAspectRatioCloserToScreenAspectRatio() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Landscape
-        final VastMediaXmlManager mediaXmlManager1 =
-                initializeMediaXmlManagerMock(400, 240, "video/mp4", "video_url1");
-        // Portrait
-        final VastMediaXmlManager mediaXmlManager2 =
-                initializeMediaXmlManagerMock(240, 400, "video/mp4", "video_url2");
-
-        String bestMediaFileUrl = subject.getBestMediaFileUrl(
-                Arrays.asList(mediaXmlManager1, mediaXmlManager2));
-        assertThat(bestMediaFileUrl).isEqualTo("video_url1");
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withInvalidMediaTypeAndNullDimension_shouldReturnNull() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Invalid media type
-        final VastMediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(800, 480, "video/invalid", "video_url1");
-        // Null dimension
-        final VastMediaXmlManager mediaXmlManager2 = initializeMediaXmlManagerMock(null, null,
-                "video/mp4", "video_url2");
-
-        String bestMediaFileUrl = subject.getBestMediaFileUrl(
-                Arrays.asList(mediaXmlManager1, mediaXmlManager2));
-        assertThat(bestMediaFileUrl).isNull();
-    }
-
-    @Test
-    public void getBestMediaFileUrl_withInvalidMediaTypeAndNullMediaType_shouldReturnNull() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        final VastMediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(800, 480, "video/invalid", "video_url1");
-        final VastMediaXmlManager mediaXmlManager2 = initializeMediaXmlManagerMock(800,
-                480, null, "video_url2");
-
-        String bestMediaFileUrl = subject.getBestMediaFileUrl(
-                Arrays.asList(mediaXmlManager1, mediaXmlManager2));
-        assertThat(bestMediaFileUrl).isNull();
-    }
-
-    @Test
-    public void getBestCompanionAd_shouldReturnCompanionAd() throws Exception {
-        final VastCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(
-                300, 250, "image_url", "image/jpeg", null, null, null);
-
-        final VastCompanionAdConfig bestCompanionAd =
-                subject.getBestCompanionAd(Arrays.asList(companionXmlManager),
-                        VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
-        assertCompanionAdsAreEqual(companionXmlManager, bestCompanionAd);
-    }
-
-    @Test
-    public void getBestCompanionAd_withInvalidVastResource_shouldReturnNull() throws Exception {
-        final VastCompanionAdXmlManager companionXmlManager = initializeCompanionXmlManagerMock(
-                300, 250, "image_url", "image/INVALID", null, null, null);
-
-        final VastCompanionAdConfig bestCompanionAd =
-                subject.getBestCompanionAd(Arrays.asList(companionXmlManager),
-                        VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
-        assertThat(bestCompanionAd).isNull();
-    }
-
-    @Test
-    public void getBestCompanionAd_withNullDimension_shouldReturnNull() throws Exception {
-        final VastCompanionAdXmlManager companionXmlManager =
-                initializeCompanionXmlManagerMock(null, 250, "image_url", "image/png", null, null, null);
-
-        final VastCompanionAdConfig bestCompanionAd = subject.getBestCompanionAd(
-                Arrays.asList(companionXmlManager),
-                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
-        assertThat(bestCompanionAd).isNull();
-    }
-
-    @Test
-    public void getBestCompanionAd_withWidthTooSmall_shouldReturnNull() throws Exception {
-        final VastCompanionAdXmlManager companionXmlManager =
-                initializeCompanionXmlManagerMock(299, 250, "image_url", "image/png", null, null, null);
-
-        final VastCompanionAdConfig bestCompanionAd = subject.getBestCompanionAd(
-                Arrays.asList(companionXmlManager),
-                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
-        assertThat(bestCompanionAd).isNull();
-    }
-
-    @Test
-    public void getBestCompanionAd_withHeightTooSmall_shouldReturnNull() throws Exception {
-        final VastCompanionAdXmlManager companionXmlManager =
-                initializeCompanionXmlManagerMock(300, 249, "image_url", "image/png", null, null, null);
-
-        final VastCompanionAdConfig bestCompanionAd = subject.getBestCompanionAd(
-                Arrays.asList(companionXmlManager),
-                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
-        assertThat(bestCompanionAd).isNull();
-    }
-
-    @Test
-    public void getBestCompanionAd_withSameAspectRatios_shouldReturnCompanionAdWithAreaCloserToScreenArea1() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Triple screen size
-        final VastCompanionAdXmlManager companionXmlManager1 =
-                initializeCompanionXmlManagerMock(2400, 1440, "image_url1", "image/png", null, null, null);
-        // Double screen size
-        final VastCompanionAdXmlManager companionXmlManager2 =
-                initializeCompanionXmlManagerMock(1600, 960, "image_url2", "image/bmp", null, null, null);
-
-        VastCompanionAdConfig bestCompanionAd = subject.getBestCompanionAd(
-                Arrays.asList(companionXmlManager1, companionXmlManager2),
-                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
-        assertThat(bestCompanionAd.getVastResource().getResource()).isEqualTo("image_url2");
-    }
-
-    @Test
-    public void getBestCompanionAd_withSameAspectRatios_shouldReturnCompanionAdWithAreaCloserToScreenArea2() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Triple screen size
-        final VastCompanionAdXmlManager companionXmlManager1 =
-                initializeCompanionXmlManagerMock(2400, 1440, "image_url1", "image/png", null, null, null);
-        // Half screen size
-        final VastCompanionAdXmlManager companionXmlManager2 =
-                initializeCompanionXmlManagerMock(400, 250, "image_url2", "image/bmp", null, null, null);
-
-        VastCompanionAdConfig bestCompanionAd = subject.getBestCompanionAd(
-                Arrays.asList(companionXmlManager1, companionXmlManager2),
-                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
-        assertThat(bestCompanionAd.getVastResource().getResource()).isEqualTo("image_url2");
-    }
-
-    @Test
-    public void getBestCompanionAd_withSameArea_shouldReturnLandscapeCompanionAdWithAspectRatioCloserToScreenAspectRatio() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Landscape
-        final VastCompanionAdXmlManager companionXmlManager1 =
-                initializeCompanionXmlManagerMock(400, 250, "image_url1", "image/png", null, null, null);
-        // Portrait
-        final VastCompanionAdXmlManager companionXmlManager2 =
-                initializeCompanionXmlManagerMock(250, 400, "image_url2", "image/bmp", null, null, null);
-
-        VastCompanionAdConfig bestCompanionAd = subject.getBestCompanionAd(
-                Arrays.asList(companionXmlManager1, companionXmlManager2),
-                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
-        assertThat(bestCompanionAd.getVastResource().getResource()).isEqualTo("image_url1");
-    }
-
-    @Test
-    public void getBestCompanionAd_withSameArea_shouldReturnPortraitCompanionAdWithAspectRatioCloserToScreenAspectRatio() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Landscape
-        final VastCompanionAdXmlManager companionXmlManager1 =
-                initializeCompanionXmlManagerMock(400, 300, "image_url1", "image/png", null, null, null);
-        // Portrait
-        final VastCompanionAdXmlManager companionXmlManager2 =
-                initializeCompanionXmlManagerMock(300, 400, "image_url2", "image/bmp", null, null, null);
-
-        VastCompanionAdConfig bestCompanionAd = subject.getBestCompanionAd(
-                Arrays.asList(companionXmlManager1, companionXmlManager2),
-                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
-        assertThat(bestCompanionAd.getVastResource().getResource()).isEqualTo("image_url2");
-    }
-
-    @Test
-    public void getBestCompanionAd_withAllThreeResourceTypes_shouldReturnStaticResourceType() throws Exception {
-        // Static Resource
-        final VastCompanionAdXmlManager companionXmlManager1 =
-                initializeCompanionXmlManagerMock(400, 250, "StaticResource", "image/png", null,
-                        null, null);
-        // HTML Resource
-        final VastCompanionAdXmlManager companionXmlManager2 =
-                initializeCompanionXmlManagerMock(250, 400, null, null, null, "HTMLResource", null);
-        // IFrame Resource
-        final VastCompanionAdXmlManager companionXmlManager3 =
-                initializeCompanionXmlManagerMock(250, 400, null, null, "IFrameResource", null, null);
-
-        VastCompanionAdConfig bestCompanionAd = subject.getBestCompanionAd(
-                Arrays.asList(companionXmlManager3, companionXmlManager2, companionXmlManager1),
-                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
-        assertThat(bestCompanionAd.getVastResource().getResource()).isEqualTo("StaticResource");
-    }
-
-    @Test
-    public void getBestCompanionAd_withHTMLAndStaticResourceTypes_shouldReturnStaticResourceType() throws Exception {
-        // Static Resource
-        final VastCompanionAdXmlManager companionXmlManager1 =
-                initializeCompanionXmlManagerMock(400, 250, "StaticResource", "image/png", null, null, null);
-        // HTML Resource
-        final VastCompanionAdXmlManager companionXmlManager2 =
-                initializeCompanionXmlManagerMock(250, 400, null, null, null, "HTMLResource", null);
-
-        VastCompanionAdConfig bestCompanionAd = subject.getBestCompanionAd(
-                Arrays.asList(companionXmlManager2, companionXmlManager1),
-                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
-        assertThat(bestCompanionAd.getVastResource().getResource()).isEqualTo("StaticResource");
-    }
-
-    @Test
-    public void getBestCompanionAd_withInvalidStaticResource_withValidHtmlResource_shouldReturnHtmlResource() throws Exception {
-        final VastCompanionAdXmlManager companionXmlManager1 =
-                initializeCompanionXmlManagerMock(400, 250, "StaticResource", "INVALID",
-                        "IFrameResource", null, null);
-        final VastCompanionAdXmlManager companionXmlManager2 =
-                initializeCompanionXmlManagerMock(300, 400, null, null, null, "HTMLResource", null);
-
-        VastCompanionAdConfig bestCompanionAd = subject.getBestCompanionAd(
-                Arrays.asList(companionXmlManager2, companionXmlManager1),
-                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
-        assertThat(bestCompanionAd.getVastResource().getResource()).isEqualTo("HTMLResource");
-    }
-
-    @Test
-    public void getBestCompanionAd_withCompanionAdTooSmall_shouldReturnCompanionAdWithAtLeastMinimumSize() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // 305 x 305 is both fewer pixels (screen area) and a worse aspect ratio. It still should be
-        // chosen because 240 is not wide enough to be considered for a companion ad
-        final VastCompanionAdXmlManager companionXmlManager1 =
-                initializeCompanionXmlManagerMock(305, 305, "image_url1", "image/png", null, null, null);
-        final VastCompanionAdXmlManager companionXmlManager2 =
-                initializeCompanionXmlManagerMock(240, 400, "image_url2", "image/bmp", null, null, null);
-
-        VastCompanionAdConfig bestCompanionAd = subject.getBestCompanionAd(
-                Arrays.asList(companionXmlManager1, companionXmlManager2),
-                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
-        assertThat(bestCompanionAd.getVastResource().getResource()).isEqualTo("image_url1");
-    }
-
-    @Test
-    public void getSocialActionsCompanionAds_shouldReturnSocialActionsCompanionAds() throws Exception {
-        final VastCompanionAdXmlManager adsByXmlManager =
-                initializeCompanionXmlManagerMock(65, 20, null, "HTMLResource", null,
-                        "<p>Ads by</p>", "adsBy");
-        final VastCompanionAdXmlManager socialActionsXmlManager =
-                initializeCompanionXmlManagerMock(130, 30, null, "HTMLResource", null,
-                        "<p>Retweet Like</p>", "socialActions");
-
-        final Map<String, VastCompanionAdConfig> socialActionsCompanionAds =
-                subject.getSocialActionsCompanionAds(
-                        Arrays.asList(adsByXmlManager, socialActionsXmlManager));
-        final VastCompanionAdConfig adsByVastConfig = socialActionsCompanionAds.get("adsBy");
-        final VastCompanionAdConfig socialActionsVastConfig = socialActionsCompanionAds
-                .get("socialActions");
-
-        assertThat(adsByVastConfig.getWidth()).isEqualTo(65);
-        assertThat(adsByVastConfig.getHeight()).isEqualTo(20);
-        assertThat(adsByVastConfig.getVastResource().getResource()).isEqualTo("<p>Ads by</p>");
-        assertThat(socialActionsVastConfig.getWidth()).isEqualTo(130);
-        assertThat(socialActionsVastConfig.getHeight()).isEqualTo(30);
-        assertThat(socialActionsVastConfig.getVastResource().getResource())
-                .isEqualTo("<p>Retweet Like</p>");
-    }
-
-    @Test
-    public void getSocialActionsCompanionAds_withoutSocialActions_shouldNotReturnSocialActionsCompanionAds() throws Exception {
-        final VastCompanionAdXmlManager adsByXmlManager =
-                initializeCompanionXmlManagerMock(65, 20, null, "HTMLResource", null,
-                        "<p>Ads by</p>", "NOTadsBy");
-        final VastCompanionAdXmlManager socialActionsXmlManager =
-                initializeCompanionXmlManagerMock(130, 30, null, "HTMLResource", null,
-                        "<p>Retweet Like</p>", "NOTsocialActions");
-
-        final Map<String, VastCompanionAdConfig> socialActionsCompanionAds =
-                subject.getSocialActionsCompanionAds(
-                        Arrays.asList(adsByXmlManager, socialActionsXmlManager));
-
-        assertThat(socialActionsCompanionAds.size()).isEqualTo(0);
-    }
-
-    @Test
-    public void getSocialActionsCompanionAds_withoutHTMLResource_shouldNotReturnSocialActionsCompanionAds() throws Exception {
-        final VastCompanionAdXmlManager adsByXmlManager =
-                initializeCompanionXmlManagerMock(65, 20, null, "HTMLResource", null, null,
-                        "adsBy");
-        final VastCompanionAdXmlManager socialActionsXmlManager =
-                initializeCompanionXmlManagerMock(130, 30, null, "HTMLResource", null,
-                        null, "socialActions");
-
-        final Map<String, VastCompanionAdConfig> socialActionsCompanionAds =
-                subject.getSocialActionsCompanionAds(
-                        Arrays.asList(adsByXmlManager, socialActionsXmlManager));
-        final VastCompanionAdConfig adsByVastConfig = socialActionsCompanionAds.get("adsBy");
-        final VastCompanionAdConfig socialActionsVastConfig = socialActionsCompanionAds
-                .get("socialActions");
-
-        assertThat(socialActionsCompanionAds.size()).isEqualTo(0);
-    }
-
-    @Test
-    public void getSocialActionsCompanionAds_whenTooWide_shouldNotReturnSocialActionsCompanionAds() throws Exception {
-        final VastCompanionAdXmlManager adsByXmlManager =
-                initializeCompanionXmlManagerMock(76, 20, null, "HTMLResource", null,
-                        "<p>Ads by</p>", "adsBy");
-        final VastCompanionAdXmlManager socialActionsXmlManager =
-                initializeCompanionXmlManagerMock(151, 30, null, "HTMLResource", null,
-                        "<p>Retweet Like</p>", "socialActions");
-
-        final Map<String, VastCompanionAdConfig> socialActionsCompanionAds =
-                subject.getSocialActionsCompanionAds(
-                        Arrays.asList(adsByXmlManager, socialActionsXmlManager));
-
-        assertThat(socialActionsCompanionAds.size()).isEqualTo(0);
-    }
-
-    @Test
-    public void getSocialActionsCompanionAds_whenTooTall_shouldNotReturnSocialActionsCompanionAds() throws Exception {
-        final VastCompanionAdXmlManager adsByXmlManager =
-                initializeCompanionXmlManagerMock(65, 51, null, "HTMLResource", null,
-                        "<p>Ads by</p>", "adsBy");
-        final VastCompanionAdXmlManager socialActionsXmlManager =
-                initializeCompanionXmlManagerMock(130, 51, null, "HTMLResource", null,
-                        "<p>Retweet Like</p>", "socialActions");
-
-        final Map<String, VastCompanionAdConfig> socialActionsCompanionAds =
-                subject.getSocialActionsCompanionAds(
-                        Arrays.asList(adsByXmlManager, socialActionsXmlManager));
-
-        assertThat(socialActionsCompanionAds.size()).isEqualTo(0);
-    }
-
-    @Test
-    public void evaluateVastXmlManager_withSocialActions_shouldKeepSocialActionsFromInLineAndNotOverwriteFromWrapper() throws Exception {
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING);
-        VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(
-                TEST_VAST_XML_STRING, new ArrayList<VastTracker>());
-
-        VastCompanionAdConfig adsByCompanionAd = vastVideoConfig.getSocialActionsCompanionAds()
-                .get(VastXmlManagerAggregator.ADS_BY_AD_SLOT_ID);
-        assertThat(adsByCompanionAd.getVastResource().getType())
-                .isEqualTo(VastResource.Type.HTML_RESOURCE);
-        assertThat(adsByCompanionAd.getVastResource().getResource().trim())
-                .isEqualTo(
-                        "<link rel=\"stylesheet\" href=\"https://ton.twimg.com/exchange-media/staging/video_companions_style-29c86cb8e4193a6c4da8.css\">" +
-                                "                                    <div class=\"ads-by-twitter\">" +
-                                "                                    Ads by <div class=\"larry\"></div>" +
-                                "                                    </div>");
-        VastCompanionAdConfig socialActionsCompanionAd = vastVideoConfig
-                .getSocialActionsCompanionAds()
-                .get(VastXmlManagerAggregator.SOCIAL_ACTIONS_AD_SLOT_ID);
-        assertThat(socialActionsCompanionAd.getVastResource()
-                .getType()).isEqualTo(VastResource.Type.HTML_RESOURCE);
-        assertThat(socialActionsCompanionAd.getVastResource().getResource().trim())
-        .isEqualTo("<link rel=\"stylesheet\" href=\"https://ton.twimg.com/exchange-media/staging/video_companions_style-29c86cb8e4193a6c4da8.css\">" +
-                "                                    <div class=\"social-actions\">" +
-                "                                    <a href=\"mopubshare://tweet?screen_name=frappuccino&tweet_id=590877845037056000\" class=\"retweet-button\"><div class=\"icon\"></div>310&nbsp;</a>" +
-                "                                    <a href=\"twitter://intent/favorite?id=590877845037056000\" class=\"like-button\"><div class=\"icon\"></div>1118&nbsp;</a>" +
-                "                                    </div>");
-    }
-
-    @Test
-    public void
-    getScaledDimensions_withStaticResource_withWidthLargerThanScreen_shouldScaleWidthAndHeight() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Width and height are evaluated in landscape
-        Point landscapePoint = subject.getScaledDimensions(1600, 400,
-                VastResource.Type.STATIC_RESOURCE,
-                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
-        assertThat(landscapePoint.x).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
-        assertThat(landscapePoint.y).isEqualTo(200 - VastVideoViewController.WEBVIEW_PADDING);
-
-        // Width and height are evaluated in portrait
-        Point portraitPoint = subject.getScaledDimensions(960, 600,
-                VastResource.Type.STATIC_RESOURCE,
-                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
-        assertThat(portraitPoint.x).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
-        assertThat(portraitPoint.y).isEqualTo(300 - VastVideoViewController.WEBVIEW_PADDING);
-    }
-
-    @Test
-    public void getScaledDimensions_withStaticResource_withHeightLargerThanScreen_shouldScaleWidthAndHeight() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Width and height are evaluated in landscape
-        Point landscapePoint = subject.getScaledDimensions(400, 960,
-                VastResource.Type.STATIC_RESOURCE,
-                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
-        assertThat(landscapePoint.x).isEqualTo(200 - VastVideoViewController.WEBVIEW_PADDING);
-        assertThat(landscapePoint.y).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
-
-        // Width and height are evaluated in portrait
-        Point portraitPoint = subject.getScaledDimensions(400, 1600,
-                VastResource.Type.STATIC_RESOURCE,
-                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
-        assertThat(portraitPoint.x).isEqualTo(200 - VastVideoViewController.WEBVIEW_PADDING);
-        assertThat(portraitPoint.y).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
-    }
-
-    @Test
-    public void getScaledDimensions_withStaticResource_withWidthAndHeightEqualToScreen_shouldNotScaleWidthAndHeight() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Width and height are evaluated in landscape
-        Point landscapePoint = subject.getScaledDimensions(
-                800 - VastVideoViewController.WEBVIEW_PADDING,
-                480 - VastVideoViewController.WEBVIEW_PADDING,
-                VastResource.Type.STATIC_RESOURCE,
-                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
-        assertThat(landscapePoint.x).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
-        assertThat(landscapePoint.y).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
-
-        // Width and height are evaluated in portrait
-        Point portraitPoint = subject.getScaledDimensions(
-                480 - VastVideoViewController.WEBVIEW_PADDING,
-                800 - VastVideoViewController.WEBVIEW_PADDING,
-                VastResource.Type.STATIC_RESOURCE,
-                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
-        assertThat(portraitPoint.x).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
-        assertThat(portraitPoint.y).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
-    }
-
-    @Test
-    public void getScaledDimensions_withStaticResource_withWidthAdjustedToLessThanZero_shouldNotScaleWidthAndHeight() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(
-                Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Width and height are evaluated in landscape
-        Point landscapePoint = subject.getScaledDimensions(1600, 2,
-                VastResource.Type.STATIC_RESOURCE,
-                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
-        assertThat(landscapePoint.x).isEqualTo(1600);
-        assertThat(landscapePoint.y).isEqualTo(2);
-
-        // Width and height are evaluated in portrait
-        Point portraitPoint = subject.getScaledDimensions(1600, 2,
-                VastResource.Type.STATIC_RESOURCE,
-                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
-        assertThat(portraitPoint.x).isEqualTo(1600);
-        assertThat(portraitPoint.y).isEqualTo(2);
-    }
-
-    @Test
-    public void getScaledDimensions_withStaticResource_withHeightAdjustedToLessThanZero_shouldNotScaleWidthAndHeight() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Width and height are evaluated in landscape
-        Point landscapePoint = subject.getScaledDimensions(2, 960,
-                VastResource.Type.STATIC_RESOURCE,
-                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
-        assertThat(landscapePoint.x).isEqualTo(2);
-        assertThat(landscapePoint.y).isEqualTo(960);
-
-        // Width and height are evaluated in portrait
-        Point portraitPoint = subject.getScaledDimensions(2, 960,
-                VastResource.Type.STATIC_RESOURCE,
-                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
-        assertThat(portraitPoint.x).isEqualTo(2);
-        assertThat(portraitPoint.y).isEqualTo(960);
-    }
-
-    @Test
-    public void getScaledDimensions_withHTMLResource_withWidthLargerThanScreen_shouldScaleWidthAndHeight()
-            throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Width and height are evaluated in landscape
-        Point landscapePoint = subject.getScaledDimensions(1600, 400,
-                VastResource.Type.HTML_RESOURCE,
-                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
-        assertThat(landscapePoint.x).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
-        assertThat(landscapePoint.y).isEqualTo(400 - VastVideoViewController.WEBVIEW_PADDING);
-
-        // Width and height are evaluated in portrait
-        Point portraitPoint = subject.getScaledDimensions(960, 600,
-                VastResource.Type.HTML_RESOURCE,
-                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
-        assertThat(portraitPoint.x).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
-        assertThat(portraitPoint.y).isEqualTo(600 - VastVideoViewController.WEBVIEW_PADDING);
-    }
-
-    @Test
-    public void getScaledDimensions_withHTMLResource_withHeightLargerThanScreen_shouldScaleWidthAndHeight() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Width and height are evaluated in landscape
-        Point landscapePoint = subject.getScaledDimensions(400, 960,
-                VastResource.Type.HTML_RESOURCE,
-                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
-        assertThat(landscapePoint.x).isEqualTo(400 - VastVideoViewController.WEBVIEW_PADDING);
-        assertThat(landscapePoint.y).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
-
-        // Width and height are evaluated in portrait
-        Point portraitPoint = subject.getScaledDimensions(400, 1600,
-                VastResource.Type.HTML_RESOURCE,
-                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
-        assertThat(portraitPoint.x).isEqualTo(400 - VastVideoViewController.WEBVIEW_PADDING);
-        assertThat(portraitPoint.y).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
-    }
-
-    @Test
-    public void getScaledDimensions_withHTMLResource_withWidthAdjustedToLessThanZero_shouldNotScaleWidthAndHeight() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(
-                Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Width and height are evaluated in landscape
-        Point landscapePoint = subject.getScaledDimensions(1600, 2,
-                VastResource.Type.HTML_RESOURCE,
-                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
-        assertThat(landscapePoint.x).isEqualTo(1600);
-        assertThat(landscapePoint.y).isEqualTo(2);
-
-        // Width and height are evaluated in portrait
-        Point portraitPoint = subject.getScaledDimensions(1600, 2,
-                VastResource.Type.HTML_RESOURCE,
-                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
-        assertThat(portraitPoint.x).isEqualTo(1600);
-        assertThat(portraitPoint.y).isEqualTo(2);
-    }
-
-    @Test
-    public void getScaledDimensions_withHTMLResource_withHeightAdjustedToLessThanZero_shouldNotScaleWidthAndHeight() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Width and height are evaluated in landscape
-        Point landscapePoint = subject.getScaledDimensions(2, 960,
-                VastResource.Type.HTML_RESOURCE,
-                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
-        assertThat(landscapePoint.x).isEqualTo(2);
-        assertThat(landscapePoint.y).isEqualTo(960);
-
-        // Width and height are evaluated in portrait
-        Point portraitPoint = subject.getScaledDimensions(2, 960,
-                VastResource.Type.HTML_RESOURCE,
-                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
-        assertThat(portraitPoint.x).isEqualTo(2);
-        assertThat(portraitPoint.y).isEqualTo(960);
-    }
-
-    @Test
-    public void getScaledDimensions_withHTMLResource_withWidthAndHeightEqualToScreen_shouldNotScaleWidthAndHeight() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Width and height are evaluated in landscape
-        Point landscapePoint = subject.getScaledDimensions(
-                800 - VastVideoViewController.WEBVIEW_PADDING,
-                480 - VastVideoViewController.WEBVIEW_PADDING,
-                VastResource.Type.HTML_RESOURCE,
-                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
-        assertThat(landscapePoint.x).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
-        assertThat(landscapePoint.y).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
-
-        // Width and height are evaluated in portrait
-        Point portraitPoint = subject.getScaledDimensions(
-                480 - VastVideoViewController.WEBVIEW_PADDING,
-                800 - VastVideoViewController.WEBVIEW_PADDING,
-                VastResource.Type.HTML_RESOURCE,
-                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
-        assertThat(portraitPoint.x).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
-        assertThat(portraitPoint.y).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
-    }
-
-    @Test
-    public void getScaledDimensions_withHTMLResource_withWidthAndHeightLargerThanScreen_shouldScaleWidthAndHeight() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Width and height are evaluated in landscape
-        Point landscapePoint = subject.getScaledDimensions(5000, 5000,
-                VastResource.Type.HTML_RESOURCE,
-                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
-        assertThat(landscapePoint.x).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
-        assertThat(landscapePoint.y).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
-
-        // Width and height are evaluated in portrait
-        Point portraitPoint = subject.getScaledDimensions(1337, 4200,
-                VastResource.Type.HTML_RESOURCE,
-                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
-        assertThat(portraitPoint.x).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
-        assertThat(portraitPoint.y).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
-    }
-
-    @Test
-    public void getScaledDimensions_withIFrameResource_withWidthLargerThanScreen_shouldScaleWidthAndHeight() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Width and height are evaluated in landscape
-        Point landscapePoint = subject.getScaledDimensions(1600, 400,
-                VastResource.Type.IFRAME_RESOURCE,
-                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
-        assertThat(landscapePoint.x).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
-        assertThat(landscapePoint.y).isEqualTo(200 - VastVideoViewController.WEBVIEW_PADDING);
-
-        // Width and height are evaluated in portrait
-        Point portraitPoint = subject.getScaledDimensions(960, 600,
-                VastResource.Type.IFRAME_RESOURCE,
-                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
-        assertThat(portraitPoint.x).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
-        assertThat(portraitPoint.y).isEqualTo(300 - VastVideoViewController.WEBVIEW_PADDING);
-    }
-
-    @Test
-    public void getScaledDimensions_withIFrameResource_withHeightLargerThanScreen_shouldScaleWidthAndHeight() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Width and height are evaluated in landscape
-        Point landscapePoint = subject.getScaledDimensions(400, 960,
-                VastResource.Type.IFRAME_RESOURCE,
-                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
-        assertThat(landscapePoint.x).isEqualTo(200 - VastVideoViewController.WEBVIEW_PADDING);
-        assertThat(landscapePoint.y).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
-
-        // Width and height are evaluated in portrait
-        Point portraitPoint = subject.getScaledDimensions(400, 1600,
-                VastResource.Type.IFRAME_RESOURCE,
-                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
-        assertThat(portraitPoint.x).isEqualTo(200 - VastVideoViewController.WEBVIEW_PADDING);
-        assertThat(portraitPoint.y).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
-    }
-
-    @Test
-    public void getScaledDimensions_withIFrameResource_withWidthAndHeightEqualToScreen_shouldNotScaleWidthAndHeight() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Width and height are evaluated in landscape
-        Point landscapePoint = subject.getScaledDimensions(
-                800 - VastVideoViewController.WEBVIEW_PADDING,
-                480 - VastVideoViewController.WEBVIEW_PADDING,
-                VastResource.Type.IFRAME_RESOURCE,
-                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
-        assertThat(landscapePoint.x).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
-        assertThat(landscapePoint.y).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
-
-        // Width and height are evaluated in portrait
-        Point portraitPoint = subject.getScaledDimensions(
-                480 - VastVideoViewController.WEBVIEW_PADDING,
-                800 - VastVideoViewController.WEBVIEW_PADDING,
-                VastResource.Type.IFRAME_RESOURCE,
-                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
-        assertThat(portraitPoint.x).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
-        assertThat(portraitPoint.y).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
-    }
-
-    @Test
-    public void getScaledDimensions_withIFrameResource_withWidthAdjustedToLessThanZero_shouldNotScaleWidthAndHeight() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(
-                Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Width and height are evaluated in landscape
-        Point landscapePoint = subject.getScaledDimensions(1600, 2,
-                VastResource.Type.IFRAME_RESOURCE,
-                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
-        assertThat(landscapePoint.x).isEqualTo(1600);
-        assertThat(landscapePoint.y).isEqualTo(2);
-
-        // Width and height are evaluated in portrait
-        Point portraitPoint = subject.getScaledDimensions(1600, 2,
-                VastResource.Type.IFRAME_RESOURCE,
-                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
-        assertThat(portraitPoint.x).isEqualTo(1600);
-        assertThat(portraitPoint.y).isEqualTo(2);
-    }
-
-    @Test
-    public void getScaledDimensions_withIFrameResource_withHeightAdjustedToLessThanZero_shouldNotScaleWidthAndHeight() throws Exception {
-        // Default screen width is 480, height is 800
-        final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
-
-        // Width and height are evaluated in landscape
-        Point landscapePoint = subject.getScaledDimensions(2, 960,
-                VastResource.Type.IFRAME_RESOURCE,
-                VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
-        assertThat(landscapePoint.x).isEqualTo(2);
-        assertThat(landscapePoint.y).isEqualTo(960);
-
-        // Width and height are evaluated in portrait
-        Point portraitPoint = subject.getScaledDimensions(2, 960,
-                VastResource.Type.IFRAME_RESOURCE,
-                VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
-        assertThat(portraitPoint.x).isEqualTo(2);
-        assertThat(portraitPoint.y).isEqualTo(960);
-    }
-
-    @Test
-    public void getBestIcon_shouldReturnBestIcon() throws Exception {
-        final VastIconXmlManager iconXmlManager1 =
-                initializeIconXmlManagerMock(40, 50, 123, 456, "staticResource1", "image/jpeg", null, null,
-                        VastUtils.stringsToVastTrackers("clickTrackingUri1", "clickTrackingUri2"),
-                        "clickThroughUri",
-                        VastUtils.stringsToVastTrackers("viewTrackingUri1", "viewTrackingUri2"));
-        final VastIconXmlManager iconXmlManager2 =
-                initializeIconXmlManagerMock(40, 40, null, null, "staticResource2", "image/png",
-                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
-
-        VastIconConfig bestIcon = subject.getBestIcon(Arrays.asList(iconXmlManager1, iconXmlManager2));
-        assertThat(bestIcon.getWidth()).isEqualTo(40);
-        assertThat(bestIcon.getHeight()).isEqualTo(50);
-        assertThat(bestIcon.getOffsetMS()).isEqualTo(123);
-        assertThat(bestIcon.getDurationMS()).isEqualTo(456);
-        assertThat(bestIcon.getVastResource().getResource()).isEqualTo("staticResource1");
-        assertThat(bestIcon.getVastResource().getType()).isEqualTo(VastResource.Type
-                .STATIC_RESOURCE);
-        assertThat(bestIcon.getVastResource().getCreativeType())
-                .isEqualTo(VastResource.CreativeType.IMAGE);
-        assertThat(VastUtils.vastTrackersToStrings(bestIcon.getClickTrackingUris()))
-                .containsOnly("clickTrackingUri1", "clickTrackingUri2");
-        assertThat(bestIcon.getClickThroughUri()).isEqualTo("clickThroughUri");
-        assertThat(VastUtils.vastTrackersToStrings(bestIcon.getViewTrackingUris()))
-                .containsOnly("viewTrackingUri1", "viewTrackingUri2");
-    }
-
-    @Test
-    public void getBestIcon_withMissingWidth_shouldNotSelectThatIcon() throws Exception {
-        final VastIconXmlManager iconXmlManager1 =
-                initializeIconXmlManagerMock(null, 50, null, null, "staticResource1", "image/jpeg",
-                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
-        final VastIconXmlManager iconXmlManager2 =
-                initializeIconXmlManagerMock(40, 40, null, null, "staticResource2", "image/png",
-                        null, null, new ArrayList<VastTracker>(), null,
-                        new ArrayList<VastTracker>());
-
-        VastIconConfig bestIcon = subject.getBestIcon(Arrays.asList(iconXmlManager1, iconXmlManager2));
-        assertThat(bestIcon.getVastResource().getResource()).isEqualTo("staticResource2");
-    }
-
-    @Test
-    public void getBestIcon_withNegativeWidth_shouldNotSelectThatIcon() throws Exception {
-        final VastIconXmlManager iconXmlManager1 =
-                initializeIconXmlManagerMock(-1, 50, null, null, "staticResource1", "image/jpeg",
-                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
-        final VastIconXmlManager iconXmlManager2 =
-                initializeIconXmlManagerMock(40, 40, null, null, "staticResource2", "image/png",
-                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
-
-        VastIconConfig bestIcon = subject.getBestIcon(Arrays.asList(iconXmlManager1, iconXmlManager2));
-        assertThat(bestIcon.getVastResource().getResource()).isEqualTo("staticResource2");
-    }
-
-    @Test
-    public void getBestIcon_withWidthGreaterThan300dp_shouldNotSelectThatIcon() throws Exception {
-        final VastIconXmlManager iconXmlManager1 =
-                initializeIconXmlManagerMock(301, 50, null, null, "staticResource1", "image/jpeg",
-                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
-        final VastIconXmlManager iconXmlManager2 =
-                initializeIconXmlManagerMock(40, 40, null, null, "staticResource2", "image/png",
-                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
-
-        VastIconConfig bestIcon = subject.getBestIcon(Arrays.asList(iconXmlManager1, iconXmlManager2));
-        assertThat(bestIcon.getVastResource().getResource()).isEqualTo("staticResource2");
-    }
-
-    @Test
-    public void getBestIcon_withMissingHeight_shouldNotSelectThatIcon() throws Exception {
-        final VastIconXmlManager iconXmlManager1 =
-                initializeIconXmlManagerMock(40, null, null, null, "staticResource1", "image/jpeg",
-                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
-        final VastIconXmlManager iconXmlManager2 =
-                initializeIconXmlManagerMock(40, 40, null, null, "staticResource2", "image/png",
-                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
-
-        VastIconConfig bestIcon = subject.getBestIcon(Arrays.asList(iconXmlManager1, iconXmlManager2));
-        assertThat(bestIcon.getVastResource().getResource()).isEqualTo("staticResource2");
-    }
-
-    @Test
-    public void getBestIcon_withNegativeHeight_shouldNotSelectThatIcon() throws Exception {
-        final VastIconXmlManager iconXmlManager1 =
-                initializeIconXmlManagerMock(40, -1, null, null, "staticResource1", "image/jpeg",
-                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
-        final VastIconXmlManager iconXmlManager2 =
-                initializeIconXmlManagerMock(40, 40, null, null, "staticResource2", "image/png",
-                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
-
-        VastIconConfig bestIcon = subject.getBestIcon(Arrays.asList(iconXmlManager1, iconXmlManager2));
-        assertThat(bestIcon.getVastResource().getResource()).isEqualTo("staticResource2");
-    }
-
-    @Test
-    public void getBestIcon_withHeightGreaterThan300dp_shouldNotSelectThatIcon() throws Exception {
-        final VastIconXmlManager iconXmlManager1 =
-                initializeIconXmlManagerMock(40, 301, null, null, "staticResource1", "image/jpeg",
-                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
-        final VastIconXmlManager iconXmlManager2 =
-                initializeIconXmlManagerMock(40, 40, null, null, "staticResource2", "image/png",
-                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
-
-        VastIconConfig bestIcon = subject.getBestIcon(Arrays.asList(iconXmlManager1, iconXmlManager2));
-        assertThat(bestIcon.getVastResource().getResource()).isEqualTo("staticResource2");
-    }
-
-    @Test
-    public void getBestIcon_withAllThreeResourceTypes_shouldReturnStaticResourceType() throws Exception {
-        final VastIconXmlManager iconXmlManager1 =
-                initializeIconXmlManagerMock(40, 40, null, null, "StaticResource", "image/jpeg",
-                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
-        final VastIconXmlManager iconXmlManager2 =
-                initializeIconXmlManagerMock(40, 40, null, null, null, null, "IFrameResource",
-                        null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
-        final VastIconXmlManager iconXmlManager3 =
-                initializeIconXmlManagerMock(40, 40, null, null, null, null, null, "HTMLResource",
-                        new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
-
-        VastIconConfig bestIcon = subject.getBestIcon(Arrays.asList(iconXmlManager3, iconXmlManager2,
-                iconXmlManager1));
-        assertThat(bestIcon.getVastResource().getResource()).isEqualTo("StaticResource");
-    }
-
-    @Test
-    public void getBestIcon_withHTMLAndStaticResourceTypes_shouldReturnStaticResourceType() throws Exception {
-        final VastIconXmlManager iconXmlManager1 =
-                initializeIconXmlManagerMock(40, 40, null, null, "StaticResource", "image/jpeg",
-                        null, null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
-        final VastIconXmlManager iconXmlManager2 =
-                initializeIconXmlManagerMock(40, 40, null, null, null, null, null, "HTMLResource",
-                        new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
-
-        VastIconConfig bestIcon = subject.getBestIcon(Arrays.asList(iconXmlManager2, iconXmlManager1));
-        assertThat(bestIcon.getVastResource().getResource()).isEqualTo("StaticResource");
-    }
-
-    @Test
-    public void getBestIcon_withInvalidStaticResource_withValidHtmlResource_shouldReturnHtmlResource() throws Exception {
-        final VastIconXmlManager iconXmlManager1 =
-                initializeIconXmlManagerMock(40, 40, null, null, "StaticResource", "INVALID",
-                        "IFrameResource", null, new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
-        final VastIconXmlManager iconXmlManager2 =
-                initializeIconXmlManagerMock(40, 40, null, null, null, null, null, "HTMLResource",
-                        new ArrayList<VastTracker>(), null, new ArrayList<VastTracker>());
-
-        VastIconConfig bestIcon = subject.getBestIcon(Arrays.asList(iconXmlManager2, iconXmlManager1));
-        assertThat(bestIcon.getVastResource().getResource()).isEqualTo("HTMLResource");
-    }
-
-    @Test
-    public void evaluateVastXmlManager_withStandardInline_shouldReturnValidVastVideoConfiguration() {
-        VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(
-                TEST_NESTED_VAST_XML_STRING, new ArrayList<VastTracker>());
-
-        assertThat(VastUtils.vastTrackersToStrings(vastVideoConfig.getImpressionTrackers()))
-                .containsOnly("https://rtb-test.dev.tapad.com:8080/creative/imp" +
-                        ".png?ts=1374099035457&svid=1&creative_id=30731&ctx_type=InApp&ta_pinfo" +
-                        "=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&liverail_cp=1");
-        assertThat(vastVideoConfig.getFractionalTrackers()).isEmpty();
-        assertThat(vastVideoConfig.getAbsoluteTrackers()).isEmpty();
-        assertThat(vastVideoConfig.getPauseTrackers()).isEmpty();
-        assertThat(vastVideoConfig.getResumeTrackers()).isEmpty();
-        assertThat(vastVideoConfig.getCompleteTrackers()).isEmpty();
-        assertThat(vastVideoConfig.getCloseTrackers()).isEmpty();
-        assertThat(vastVideoConfig.getSkipTrackers()).isEmpty();
-        assertThat(vastVideoConfig.getClickTrackers()).isEmpty();
-        assertThat(vastVideoConfig.getClickThroughUrl()).isEqualTo(
-                "https://rtb-test.dev.tapad" +
-                        ".com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=https%3A%2F%2Ftapad.com");
-        assertThat(vastVideoConfig.getNetworkMediaFileUrl()).isEqualTo(
-                "https://s3.amazonaws.com/mopub-vast/tapad-video.mp4");
-        assertThat(vastVideoConfig.getSkipOffsetString()).isNull();
-        assertThat(VastUtils.vastTrackersToStrings(vastVideoConfig.getErrorTrackers()))
-                .containsOnly("https://nestedInLineErrorOne", "https://nestedInLineErrorTwo");
-
-        VastCompanionAdConfig[] companionAds = new VastCompanionAdConfig[2];
-        companionAds[0] = vastVideoConfig.getVastCompanionAd(
-                Configuration.ORIENTATION_LANDSCAPE);
-        companionAds[1] = vastVideoConfig.getVastCompanionAd(
-                Configuration.ORIENTATION_PORTRAIT);
-        for (VastCompanionAdConfig companionAd : companionAds) {
-            assertThat(companionAd.getWidth()).isEqualTo(300);
-            assertThat(companionAd.getHeight()).isEqualTo(250);
-            assertThat(companionAd.getVastResource().getResource())
-                    .isEqualTo("https://demo.tremormedia.com/proddev/vast/Blistex1.jpg");
-            assertThat(companionAd.getVastResource().getType())
-                    .isEqualTo(VastResource.Type.STATIC_RESOURCE);
-            assertThat(companionAd.getVastResource().getCreativeType())
-                    .isEqualTo(VastResource.CreativeType.IMAGE);
-            assertThat(companionAd.getClickThroughUrl()).isEqualTo("https://www.tremormedia.com");
-            assertThat(VastUtils.vastTrackersToStrings(companionAd.getClickTrackers()))
-                    .containsOnly("https://companionClickTracking1",
-                            "https://companionClickTracking2");
-            assertThat(VastUtils.vastTrackersToStrings(companionAd.getCreativeViewTrackers()))
-                    .containsExactly("https://myTrackingURL/firstCompanionCreativeView",
-                            "https://myTrackingURL/secondCompanionCreativeView");
-        }
-
-        VastIconConfig vastIconConfig = vastVideoConfig.getVastIconConfig();
-        assertThat(vastIconConfig.getWidth()).isEqualTo(123);
-        assertThat(vastIconConfig.getHeight()).isEqualTo(234);
-        assertThat(vastIconConfig.getDurationMS()).isEqualTo(3723456);
-        assertThat(vastIconConfig.getOffsetMS()).isEqualTo(3723000);
-        assertThat(vastIconConfig.getVastResource().getResource()).isEqualTo("imageJpeg");
-        assertThat(vastIconConfig.getVastResource().getType()).isEqualTo(VastResource.Type.STATIC_RESOURCE);
-        assertThat(vastIconConfig.getVastResource().getCreativeType()).isEqualTo(VastResource.CreativeType.IMAGE);
-        assertThat(VastUtils.vastTrackersToStrings(vastIconConfig.getClickTrackingUris()))
-                .containsOnly("clickTrackingUri1", "clickTrackingUri2");
-        assertThat(vastIconConfig.getClickThroughUri()).isEqualTo("clickThroughUri");
-        assertThat(VastUtils.vastTrackersToStrings(vastIconConfig.getViewTrackingUris()))
-                .containsOnly("viewTrackingUri1", "viewTrackingUri2");
-    }
-
-    @Test
-    public void evaluateVastXmlManager_withAWrapperToAnInline_shouldReturnValidVastVideoConfiguration() throws Exception {
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING);
-        VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(
-                TEST_VAST_XML_STRING, new ArrayList<VastTracker>());
-
-        assertThat(VastUtils.vastTrackersToStrings(vastVideoConfig.getImpressionTrackers()))
-                .containsOnly(
-                        "https://rtb-test.dev.tapad.com:8080/creative/imp" +
-                                ".png?ts=1374099035457&svid=1&creative_id=30731&ctx_type=InApp" +
-                                "&ta_pinfo" +
-                                "=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&liverail_cp=1",
-                        "https://myTrackingURL/wrapper/impression1",
-                        "https://myTrackingURL/wrapper/impression2",
-                        "https://www.mopub.com/imp1",
-                        "https://www.mopub.com/imp2");
-
-        assertThat(vastVideoConfig.getFractionalTrackers()).hasSize(3);
-        assertThat(
-                vastVideoConfig.getFractionalTrackers().get(0)).isEqualsToByComparingFields(
-                new VastFractionalProgressTracker("https://myTrackingURL/wrapper/firstQuartile",
-                        0.25f));
-        assertThat(
-                vastVideoConfig.getFractionalTrackers().get(1)).isEqualsToByComparingFields(
-                new VastFractionalProgressTracker("https://myTrackingURL/wrapper/midpoint",
-                        0.5f));
-        assertThat(
-                vastVideoConfig.getFractionalTrackers().get(2)).isEqualsToByComparingFields(
-                new VastFractionalProgressTracker("https://myTrackingURL/wrapper/thirdQuartile",
-                        0.75f));
-
-        assertThat(vastVideoConfig.getAbsoluteTrackers().size()).isEqualTo(2);
-        assertThat(vastVideoConfig.getAbsoluteTrackers().get(0)).isEqualsToByComparingFields(
-                new VastAbsoluteProgressTracker("https://myTrackingURL/wrapper/creativeView", 0));
-        assertThat(vastVideoConfig.getAbsoluteTrackers().get(1)).isEqualsToByComparingFields(
-                new VastAbsoluteProgressTracker("https://myTrackingURL/wrapper/start", 2000));
-
-        assertThat(VastUtils.vastTrackersToStrings(vastVideoConfig.getPauseTrackers()))
-                .containsOnly("https://myTrackingURL/wrapper/pause");
-        assertThat(VastUtils.vastTrackersToStrings(vastVideoConfig.getResumeTrackers()))
-                .containsOnly("https://myTrackingURL/wrapper/resume");
-        assertThat(VastUtils.vastTrackersToStrings(vastVideoConfig.getCompleteTrackers()))
-                .containsOnly("https://myTrackingURL/wrapper/complete");
-        assertThat(VastUtils.vastTrackersToStrings(vastVideoConfig.getErrorTrackers()))
-                .containsExactly(
-                        "https://wrapperErrorOne?errorcode=[ERRORCODE]",
-                        "https://wrapperErrorTwo?errorcode=[ERRORCODE]",
-                        "https://nestedInLineErrorOne",
-                        "https://nestedInLineErrorTwo");
-
-        assertThat(vastVideoConfig.getCloseTrackers()).isEmpty();
-        assertThat(vastVideoConfig.getSkipTrackers()).isEmpty();
-
-        assertThat(VastUtils.vastTrackersToStrings(vastVideoConfig.getClickTrackers()))
-                .containsOnly("https://myTrackingURL/wrapper/click");
-
-        assertThat(vastVideoConfig.getClickThroughUrl()).isEqualTo(
-                "https://rtb-test.dev.tapad" +
-                        ".com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=https%3A%2F%2Ftapad.com");
-        assertThat(vastVideoConfig.getNetworkMediaFileUrl()).isEqualTo(
-                "https://s3.amazonaws.com/mopub-vast/tapad-video.mp4");
-        assertThat(vastVideoConfig.getSkipOffsetString()).isNull();
-
-        VastCompanionAdConfig[] companionAds = new VastCompanionAdConfig[2];
-        companionAds[0] = vastVideoConfig.getVastCompanionAd(
-                Configuration.ORIENTATION_LANDSCAPE);
-        companionAds[1] = vastVideoConfig.getVastCompanionAd(
-                Configuration.ORIENTATION_PORTRAIT);
-        for (VastCompanionAdConfig companionAd : companionAds) {
-            assertThat(companionAd.getWidth()).isEqualTo(300);
-            assertThat(companionAd.getHeight()).isEqualTo(250);
-            assertThat(companionAd.getVastResource().getResource())
-                    .isEqualTo("https://demo.tremormedia.com/proddev/vast/Blistex1.jpg");
-            assertThat(companionAd.getVastResource().getType())
-                    .isEqualTo(VastResource.Type.STATIC_RESOURCE);
-            assertThat(companionAd.getVastResource().getCreativeType())
-                    .isEqualTo(VastResource.CreativeType.IMAGE);
-            assertThat(companionAd.getClickThroughUrl()).isEqualTo("https://www.tremormedia.com");
-            assertThat(VastUtils.vastTrackersToStrings(companionAd.getClickTrackers()))
-                    .containsOnly("https://companionClickTracking1",
-                            "https://companionClickTracking2",
-                            "https://noResourceWrapperCompanionClickTracking1");
-            assertThat(VastUtils.vastTrackersToStrings(companionAd.getCreativeViewTrackers()))
-                    .containsExactly("https://myTrackingURL/firstCompanionCreativeView",
-                            "https://myTrackingURL/secondCompanionCreativeView",
-                            "https://firstNoResourceWrapperCompanionCreativeView",
-                            "https://secondNoResourceWrapperCompanionCreativeView");
-        }
-
-        VastIconConfig vastIconConfig = vastVideoConfig.getVastIconConfig();
-        assertThat(vastIconConfig.getWidth()).isEqualTo(123);
-        assertThat(vastIconConfig.getHeight()).isEqualTo(234);
-        assertThat(vastIconConfig.getDurationMS()).isEqualTo(3723456);
-        assertThat(vastIconConfig.getOffsetMS()).isEqualTo(3723000);
-        assertThat(vastIconConfig.getVastResource().getResource()).isEqualTo("imageJpeg");
-        assertThat(vastIconConfig.getVastResource().getType()).isEqualTo(VastResource.Type.STATIC_RESOURCE);
-        assertThat(vastIconConfig.getVastResource().getCreativeType()).isEqualTo(VastResource.CreativeType.IMAGE);
-        assertThat(VastUtils.vastTrackersToStrings(vastIconConfig.getClickTrackingUris()))
-                .containsOnly("clickTrackingUri1", "clickTrackingUri2");
-        assertThat(vastIconConfig.getClickThroughUri()).isEqualTo("clickThroughUri");
-        assertThat(VastUtils.vastTrackersToStrings(vastIconConfig.getViewTrackingUris()))
-                .containsOnly("viewTrackingUri1", "viewTrackingUri2");
-    }
-
-    @Test
-    public void evaluateVastXmlManager_withInvalidXml_shouldReturnNullVastVideoConfiguration() {
-        VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(
-                TEST_VAST_BAD_NEST_URL_XML_STRING,
-                new ArrayList<VastTracker>());
-
-        assertThat(vastVideoConfig).isNull();
-    }
-
-    @Test
-    public void evaluateVastXmlManager_withRedirectHavingNoCompanionAd_shouldReturnVastVideoConfigurationWithCompanionAdOfWrapper() throws Exception {
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200,
-                TEST_NESTED_NO_COMPANION_VAST_XML_STRING);
-        VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(
-                TEST_VAST_XML_STRING, new ArrayList<VastTracker>());
-
-        VastCompanionAdConfig[] companionAds = new VastCompanionAdConfig[2];
-        companionAds[0] = vastVideoConfig.getVastCompanionAd(
-                Configuration.ORIENTATION_LANDSCAPE);
-        companionAds[1] = vastVideoConfig.getVastCompanionAd(
-                Configuration.ORIENTATION_PORTRAIT);
-        for (VastCompanionAdConfig companionAd : companionAds) {
-            assertThat(companionAd.getWidth()).isEqualTo(456);
-            assertThat(companionAd.getHeight()).isEqualTo(250);
-            assertThat(companionAd.getVastResource().getResource()).isEqualTo("https" +
-                    "://wrapperCompanionAdStaticResource");
-            assertThat(companionAd.getClickThroughUrl()).isEqualTo(
-                    "https://wrapperCompanionClickThrough");
-            assertThat(VastUtils.vastTrackersToStrings(companionAd.getClickTrackers()))
-                    .containsOnly("https://wrapperCompanionClickTracking");
-            assertThat(VastUtils.vastTrackersToStrings(companionAd.getCreativeViewTrackers()))
-                    .containsExactly("https://firstWrapperCompanionCreativeView",
-                            "https://secondWrapperCompanionCreativeView");
-        }
-    }
-
-    @Test
-    public void evaluateVastXmlManager_withSequenceNumbers_shouldReturnVastVideoConfigurationWithNegativeSequenceNumber() {
-        VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(
-                TEST_VAST_WITH_NEGATIVE_SEQUENCE_NUMBER_XML_STRING,
-                new ArrayList<VastTracker>());
-
-        assertThat(vastVideoConfig.getNetworkMediaFileUrl()).isEqualTo(
-                "https://negativeSequence");
-        assertThat(VastUtils.vastTrackersToStrings(vastVideoConfig.getImpressionTrackers()))
-                .containsOnly("https://negativeSequence");
-    }
-
-    @Test
-    public void evaluateVastXmlManager_withVideoViewabilityTrackerInLine_shouldReturnVastVideoConfigurationWithVideoViewabilityTracker() {
-        VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(
-                TEST_NESTED_NO_COMPANION_VAST_XML_STRING, new ArrayList<VastTracker>());
-
-        VideoViewabilityTracker tracker = vastVideoConfig.getVideoViewabilityTracker();
-        assertThat(tracker.getPercentViewable()).isEqualTo(70);
-        assertThat(tracker.getViewablePlaytimeMS()).isEqualTo(3500);
-        assertThat(tracker.getTrackingUrl()).isEqualTo("https://ad.server.com/impression/dot.png");
-    }
-
-    @Test
-    public void evaluateVastXmlManager_withVideoViewabilityTrackerInWrapper_shouldReturnVastVideoConfigurationWithVideoViewabilityTracker() throws Exception {
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_NESTED_VAST_XML_STRING);
-        VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(TEST_VAST_XML_STRING,
-                new ArrayList<VastTracker>());
-
-        VideoViewabilityTracker tracker = vastVideoConfig.getVideoViewabilityTracker();
-        assertThat(tracker.getPercentViewable()).isEqualTo(50);
-        assertThat(tracker.getViewablePlaytimeMS()).isEqualTo(2500);
-        assertThat(tracker.getTrackingUrl()).isEqualTo("https://ad.server.com/impression/dot.gif");
-    }
-
-    @Test
-    public void evaluateVastXmlManager_withVideoViewabilityTrackerBothInWrapperAndInLine_shouldReturnVastVideoConfigurationWithVideoViewabilityTrackerFromInLine() throws Exception {
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200,
-                TEST_NESTED_NO_COMPANION_VAST_XML_STRING);
-        VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(TEST_VAST_XML_STRING,
-                new ArrayList<VastTracker>());
-
-        VideoViewabilityTracker tracker = vastVideoConfig.getVideoViewabilityTracker();
-        assertThat(tracker.getPercentViewable()).isEqualTo(70);
-        assertThat(tracker.getViewablePlaytimeMS()).isEqualTo(3500);
-        assertThat(tracker.getTrackingUrl()).isEqualTo("https://ad.server.com/impression/dot.png");
-    }
-
-    @Test
-    public void isValidSequenceNumber_withNull_shouldReturnTrue() {
-        assertThat(VastXmlManagerAggregator.isValidSequenceNumber(null)).isTrue();
-    }
-
-    @Test
-    public void isValidSequenceNumber_withNegativeInteger_shouldReturnTrue() {
-        assertThat(VastXmlManagerAggregator.isValidSequenceNumber("-123")).isTrue();
-    }
-
-    @Test
-    public void isValidSequenceNumber_withHighPositiveInteger_shouldReturnFalse() {
-        assertThat(VastXmlManagerAggregator.isValidSequenceNumber("123456")).isFalse();
-    }
-
-    @Test
-    public void isValidSequenceNumber_withDecimal_shouldReturnTrue() {
-        assertThat(VastXmlManagerAggregator.isValidSequenceNumber("123.456")).isTrue();
-    }
-
-    @Test
-    public void isValidSequenceNumber_withInvalidInteger_shouldReturnTrue() {
-        assertThat(VastXmlManagerAggregator.isValidSequenceNumber("this should fail!")).isTrue();
-    }
-
-    @Test
-    public void isValidSequenceNumber_withZero_shouldReturnTrue() {
-        assertThat(VastXmlManagerAggregator.isValidSequenceNumber("0")).isTrue();
-    }
-
-    @Test
-    public void isValidSequenceNumber_withOne_shouldReturnTrue() {
-        assertThat(VastXmlManagerAggregator.isValidSequenceNumber("1")).isTrue();
-    }
-
-    @Test
-    public void isValidSequenceNumber_withTwo_shouldReturnFalse() {
-        assertThat(VastXmlManagerAggregator.isValidSequenceNumber("2")).isFalse();
-    }
-
-    @Test
-    public void evaluateVastXmlManager_withJustError_shouldReturnNullVastVideoConfiguration_shouldFireErrorTracker() {
-        VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(
-                TEST_JUST_ERROR_XML_STRING,
-                new ArrayList<VastTracker>());
-
-        assertThat(vastVideoConfig).isNull();
-        verify(mockRequestQueue).add(argThat(isUrl("https://justErrorTracking?errorcode=900")));
-        verifyNoMoreInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void evaluateVastXmlManager_withWrapperToJustError_shouldReturnNullVastVideoConfiguration_shouldFireErrorTrackers() throws Exception {
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_JUST_ERROR_XML_STRING);
-        VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(
-                TEST_VAST_XML_STRING, new ArrayList<VastTracker>());
-
-        assertThat(vastVideoConfig).isNull();
-        verify(mockRequestQueue).add(argThat(isUrl("https://justErrorTracking?errorcode=303")));
-        verifyNoMoreInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void evaluateVastXmlManager_withWrapperToVastXmlError_shouldReturnNullVastVideoConfiguration_shouldFireErrorTracker() throws Exception {
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_INVALID_VAST_XML_STRING);
-        VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(
-                TEST_VAST_XML_STRING, new ArrayList<VastTracker>());
-
-        assertThat(vastVideoConfig).isNull();
-        verifyNoMoreInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void evaluateVastXmlManager_withWrapperToInvalidXml_shouldReturnNullVastVideoConfiguration_shouldFireErrorTracker() throws Exception {
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, TEST_INVALID_XML_STRING);
-        VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(
-                TEST_VAST_XML_STRING, new ArrayList<VastTracker>());
-
-        assertThat(vastVideoConfig).isNull();
-        verify(mockRequestQueue).add(argThat(isUrl("https://wrapperErrorOne?errorcode=100")));
-        verify(mockRequestQueue).add(argThat(isUrl("https://wrapperErrorTwo?errorcode=100")));
-        verifyNoMoreInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void evaluateVastXmlManager_withWrapperToNoHttpResponse_shouldReturnNullVastVideoConfiguration_shouldFireErrorTracker() {
-        VastVideoConfig vastVideoConfig = subject.evaluateVastXmlManager(
-                TEST_VAST_XML_STRING, new ArrayList<VastTracker>());
-
-        assertThat(vastVideoConfig).isNull();
-        verify(mockRequestQueue).add(argThat(isUrl("https://wrapperErrorOne?errorcode=301")));
-        verify(mockRequestQueue).add(argThat(isUrl("https://wrapperErrorTwo?errorcode=301")));
-        verifyNoMoreInteractions(mockRequestQueue);
-    }
-
-    private VastMediaXmlManager initializeMediaXmlManagerMock(
-            final Integer width,
-            final Integer height,
-            final String type,
-            final String mediaUrl) {
-        VastMediaXmlManager mediaXmlManager = mock(VastMediaXmlManager.class);
-        when(mediaXmlManager.getWidth()).thenReturn(width);
-        when(mediaXmlManager.getHeight()).thenReturn(height);
-        when(mediaXmlManager.getType()).thenReturn(type);
-        when(mediaXmlManager.getMediaUrl()).thenReturn(mediaUrl);
-        return mediaXmlManager;
-    }
-
-    private VastCompanionAdXmlManager initializeCompanionXmlManagerMock(
-            final Integer width,
-            final Integer height,
-            final String staticResource,
-            final String staticResourceType,
-            final String iFrameResource,
-            final String htmlResource,
-            final String adSlotId) {
-        VastCompanionAdXmlManager companionXmlManager = mock(VastCompanionAdXmlManager.class);
-        when(companionXmlManager.getWidth()).thenReturn(width);
-        when(companionXmlManager.getHeight()).thenReturn(height);
-        when(companionXmlManager.getAdSlotId()).thenReturn(adSlotId);
-
-        VastResourceXmlManager mockResourceXmlManager = initializeVastResourceXmlManagerMock(
-                staticResource,
-                staticResourceType,
-                iFrameResource,
-                htmlResource
-        );
-        when(companionXmlManager.getResourceXmlManager()).thenReturn(mockResourceXmlManager);
-
-        return companionXmlManager;
-    }
-
-    private void assertCompanionAdsAreEqual(
-            final VastCompanionAdXmlManager companionAdXmlManager,
-            final VastCompanionAdConfig companionAd) {
-        final VastCompanionAdConfig companionAd1 = new VastCompanionAdConfig(
-                companionAdXmlManager.getWidth(),
-                companionAdXmlManager.getHeight(),
-                VastResource.fromVastResourceXmlManager(
-                        companionAdXmlManager.getResourceXmlManager(),
-                        companionAdXmlManager.getWidth(),
-                        companionAdXmlManager.getHeight()),
-                companionAdXmlManager.getClickThroughUrl(),
-                companionAdXmlManager.getClickTrackers(),
-                companionAdXmlManager.getCompanionCreativeViewTrackers()
-        );
-        assertCompanionAdsAreEqual(companionAd, companionAd1);
-    }
-
-    private void assertCompanionAdsAreEqual(
-            final VastCompanionAdConfig vastCompanionAdConfig1,
-            final VastCompanionAdConfig vastCompanionAdConfig2) {
-        assertThat(vastCompanionAdConfig1.getWidth()).isEqualTo(vastCompanionAdConfig2.getWidth());
-        assertThat(vastCompanionAdConfig1.getHeight()).isEqualTo(vastCompanionAdConfig2.getHeight());
-        assertThat(vastCompanionAdConfig1.getVastResource().getResource())
-                .isEqualTo(vastCompanionAdConfig2.getVastResource().getResource());
-        assertThat(vastCompanionAdConfig1.getVastResource().getType())
-                .isEqualTo(vastCompanionAdConfig2.getVastResource().getType());
-        assertThat(vastCompanionAdConfig1.getVastResource().getCreativeType())
-                .isEqualTo(vastCompanionAdConfig2.getVastResource().getCreativeType());
-        assertThat(vastCompanionAdConfig1.getClickThroughUrl()).isEqualTo(vastCompanionAdConfig2.getClickThroughUrl());
-        assertThat(vastCompanionAdConfig1.getClickTrackers()).isEqualTo(vastCompanionAdConfig2.getClickTrackers());
-        assertThat(vastCompanionAdConfig1.getCreativeViewTrackers()).isEqualTo(
-                vastCompanionAdConfig2.getCreativeViewTrackers());
-    }
-
-    private VastIconXmlManager initializeIconXmlManagerMock(
-            final Integer width,
-            final Integer height,
-            final Integer offsetMS,
-            final Integer durationMS,
-            final String staticResource,
-            final String staticResourceType,
-            final String iFrameResource,
-            final String htmlResource,
-            final List<VastTracker> clickTrackingUris,
-            final String clickThroughUri,
-            final List<VastTracker> viewTrackingUris) {
-        VastIconXmlManager iconXmlManager = mock(VastIconXmlManager.class);
-        when(iconXmlManager.getWidth()).thenReturn(width);
-        when(iconXmlManager.getHeight()).thenReturn(height);
-        when(iconXmlManager.getOffsetMS()).thenReturn(offsetMS);
-        when(iconXmlManager.getDurationMS()).thenReturn(durationMS);
-
-        VastResourceXmlManager mockResourceXmlManager = initializeVastResourceXmlManagerMock(
-                staticResource,
-                staticResourceType,
-                iFrameResource,
-                htmlResource
-        );
-        when(iconXmlManager.getResourceXmlManager()).thenReturn(mockResourceXmlManager);
-
-        when(iconXmlManager.getClickTrackingUris()).thenReturn(clickTrackingUris);
-        when(iconXmlManager.getClickThroughUri()).thenReturn(clickThroughUri);
-        when(iconXmlManager.getViewTrackingUris()).thenReturn(viewTrackingUris);
-        return iconXmlManager;
-    }
-
-    static VastResourceXmlManager initializeVastResourceXmlManagerMock(
-            final String staticResource,
-            final String staticResourceType,
-            final String iFrameResource,
-            final String htmlResource) {
-        VastResourceXmlManager mockResourceXmlManager = mock(VastResourceXmlManager.class);
-        when(mockResourceXmlManager.getStaticResource()).thenReturn(staticResource);
-        when(mockResourceXmlManager.getStaticResourceType()).thenReturn(staticResourceType);
-        when(mockResourceXmlManager.getIFrameResource()).thenReturn(iFrameResource);
-        when(mockResourceXmlManager.getHTMLResource()).thenReturn(htmlResource);
-        return mockResourceXmlManager;
-    }
-
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java
deleted file mode 100644
index 0d935fc6..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java
+++ /dev/null
@@ -1,708 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.DeviceUtils.ForceOrientation;
-import com.mopub.mobileads.test.support.VastUtils;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-import org.xml.sax.SAXException;
-
-import java.io.IOException;
-import java.util.List;
-
-import javax.xml.parsers.ParserConfigurationException;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class VastXmlManagerTest {
-    private static final String XML_HEADER_TAG = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
-    private static final String TEST_VAST_XML_STRING = "<VAST xmlns:xsi=\"https://www.w3.org/2001/XMLSchema-instance\" version=\"2.0\" xsi:noNamespaceSchemaLocation=\"vast.xsd\">" +
-            "            <Ad id=\"223626102\">" +
-            "                <InLine>" +
-            "                    <AdSystem version=\"2.0\">DART_DFA</AdSystem>" +
-            "                    <AdTitle>In-Stream Video</AdTitle>" +
-            "                    <Description>A test creative with a description.</Description>" +
-            "                    <Survey/>" +
-            "                    <Impression id=\"DART\">" +
-            "                        <![CDATA[" +
-            "                        https://ad.doubleclick.net/imp;v7;x;223626102;0-0;0;47414672;0/0;30477563/30495440/1;;~aopt=0/0/ff/0;~cs=j%3fhttp://s0.2mdn.net/dot.gif" +
-            "                        ]]>" +
-            "                    </Impression>" +
-            "                    <Impression id=\"ThirdParty\">" +
-            "                        <![CDATA[" +
-            "                        https://ad.doubleclick.net/ad/N270.Process_Other/B3473145;sz=1x1;ord=2922389?" +
-            "                        ]]>" +
-            "                    </Impression>" +
-            "                    <Creatives>" +
-            "                        <Creative sequence=\"1\" AdID=\"\">" +
-            "                            <Linear skipoffset=\"25%\">" +
-            "                                <Duration>00:00:58</Duration>" +
-            "                                <TrackingEvents>" +
-            "                                    <Tracking event=\"start\">" +
-            "                                        <![CDATA[" +
-            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"progress\" offset=\"13%\">" +
-            "                                        <![CDATA[" +
-            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"progress\" offset=\"01:01:10.300\">" +
-            "                                        <![CDATA[" +
-            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            // Invalid tracking due to ambiguous offset.
-            "                                    <Tracking event=\"progress\" offset=\"01:01\">" +
-            "                                        <![CDATA[" +
-            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            // Invalid tracking due to a too-high percentage offset.
-            "                                    <Tracking event=\"progress\" offset=\"113%\">" +
-            "                                        <![CDATA[" +
-            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            // Invalid tracking due to a negative percentage offset.
-            "                                    <Tracking event=\"progress\" offset=\"-113%\">" +
-            "                                        <![CDATA[" +
-            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            // Invalid tracking due to a non-number offset
-            "                                    <Tracking event=\"progress\" offset=\"ten seconds\">" +
-            "                                        <![CDATA[" +
-            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"midpoint\">" +
-            "                                        <![CDATA[" +
-            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"midpoint\">" +
-            "                                        <![CDATA[" +
-            "                                        https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"firstQuartile\">" +
-            "                                        <![CDATA[" +
-            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"firstQuartile\">" +
-            "                                        <![CDATA[" +
-            "                                        https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"thirdQuartile\">" +
-            "                                        <![CDATA[" +
-            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"thirdQuartile\">" +
-            "                                        <![CDATA[" +
-            "                                        https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"complete\">" +
-            "                                        <![CDATA[" +
-            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=13;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"complete\">" +
-            "                                        <![CDATA[" +
-            "                                        https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.5;sz=1x1;ord=2922389?" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"close\">" +
-            "                                        <![CDATA[" +
-            "                                        https://www.mopub.com/close?q=ignatius" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"close\">" +
-            "                                        <![CDATA[" +
-            "                                        https://www.mopub.com/close?q=j3" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"skip\">" +
-            "                                        <![CDATA[" +
-            "                                        https://www.mopub.com/skip?q=ignatius" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"skip\">" +
-            "                                        <![CDATA[" +
-            "                                        https://www.mopub.com/skip?q=j3" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"mute\">" +
-            "                                        <![CDATA[" +
-            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=16;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"pause\">" +
-            "                                        <![CDATA[" +
-            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=15;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"fullscreen\">" +
-            "                                        <![CDATA[" +
-            "                                        https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=19;ecn1=1;etm1=0;" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                    <Tracking event=\"fullscreen\">" +
-            "                                        <![CDATA[" +
-            "                                        https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.6;sz=1x1;ord=2922389?" +
-            "                                        ]]>" +
-            "                                    </Tracking>" +
-            "                                </TrackingEvents>" +
-            "                                <AdParameters/>" +
-            "                                <VideoClicks>" +
-            "                                    <ClickThrough>" +
-            "                                        <![CDATA[ https://www.google.com/support/richmedia ]]>" +
-            "                                    </ClickThrough>" +
-            "                                    <ClickTracking id=\"DART\">" +
-            "                                        <![CDATA[" +
-            "                                        https://ad.doubleclick.net/click%3Bh%3Dv8/3e1b/3/0/%2a/z%3B223626102%3B0-0%3B0%3B47414672%3B255-0/0%3B30477563/30495440/1%3B%3B%7Eaopt%3D0/0/ff/0%3B%7Esscs%3D%3fhttp://s0.2mdn.net/dot.gif" +
-            "                                        ]]>" +
-            "                                    </ClickTracking>" +
-            "                                    <ClickTracking id=\"ThirdParty\">" +
-            "                                        <![CDATA[" +
-            "                                        https://ad.doubleclick.net/clk;212442087;33815766;i?https://www.google.com/support/richmedia" +
-            "                                        ]]>" +
-            "                                    </ClickTracking>" +
-            "                                </VideoClicks>" +
-            "                                <MediaFiles>" +
-            "                                    <MediaFile id=\"1\" delivery=\"progressive\" type=\"video/quicktime\" bitrate=\"457\"" +
-            "                                               width=\"300\" height=\"225\">" +
-            "                                        <![CDATA[" +
-            "                                        https://s3.amazonaws.com/uploads.hipchat.com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4" +
-            "                                        ]]>" +
-            "                                    </MediaFile>" +
-            "                                </MediaFiles>" +
-            "                               <Icons>" +
-            "                                   <Icon program=\"program\" width=\"123\" height=\"234\" xPosition=\"789\" " +
-            "                                   yPosition=\"101\" apiFramework=\"apiFramework\" offset=\"01:02:03\" " +
-            "                                   duration=\"01:02:03.456\">" +
-            "                                       <StaticResource creativeType=\"ImAge/JpEg\">" +
-            "                                           <![CDATA[imageJpeg]]>" +
-            "                                       </StaticResource>" +
-            "                                       <IconClicks>" +
-            "                                           <IconClickThrough>" +
-            "                                               <![CDATA[clickThroughUri]]>" +
-            "                                           </IconClickThrough>" +
-            "                                           <IconClickTracking>" +
-            "                                               <![CDATA[clickTrackingUri1]]>" +
-            "                                           </IconClickTracking>" +
-            "                                           <IconClickTracking>" +
-            "                                               <![CDATA[clickTrackingUri2]]>" +
-            "                                           </IconClickTracking>" +
-            "                                       </IconClicks>" +
-            "                                       <IconViewTracking>" +
-            "                                           <![CDATA[viewTrackingUri1]]>" +
-            "                                       </IconViewTracking>" +
-            "                                       <IconViewTracking>" +
-            "                                           <![CDATA[viewTrackingUri2]]>" +
-            "                                       </IconViewTracking>" +
-            "                                    </Icon>" +
-            "                                </Icons>" +
-            "                            </Linear>" +
-            "                        </Creative>" +
-            "                        <Creative AdID=\"601364-Companion\">" +
-            "                            <CompanionAds>" +
-            "                               <Companion height=\"90\" width=\"728\">" +
-            "                                   <StaticResource creativeType=\"image/jpeg\">https://demo.tremormedia.com/proddev/vast/728x90_banner1.jpg</StaticResource>" +
-            "                                   <CompanionClickThrough>https://www.tremormedia.com</CompanionClickThrough>" +
-            "                                   <BADTrackingEvents>" +
-            "                                       <Tracking event=\"creativeView\">https://myTrackingURL/firstCompanionCreativeView</Tracking>" +
-            "                                       <Tracking event=\"creativeView\">https://myTrackingURL/secondCompanionCreativeView</Tracking>" +
-            "                                   </BADTrackingEvents>" +
-            "                               </Companion>" +
-            "                               <Companion id=\"valid\" height=\"250\" width=\"300\">" +
-            "                                   <StaticResource creativeType=\"image/png\">https://demo.tremormedia.com/proddev/vast/Blistex1.png</StaticResource>" +
-            "                                   <TrackingEvents>" +
-            "                                       <Tracking event=\"creativeView\">https://myTrackingURL/firstCompanionCreativeView</Tracking>" +
-            "                                       <Tracking event=\"creativeView\">https://myTrackingURL/secondCompanionCreativeView</Tracking>" +
-            "                                   </TrackingEvents>" +
-            "                                   <CompanionClickThrough>https://www.tremormedia.com</CompanionClickThrough>" +
-            "                                   <CompanionClickTracking><![CDATA[https://companionClickTracking1]]></CompanionClickTracking>" +
-            "                               </Companion>" +
-            "                               <Companion height=\"789\" width=\"456\">" +
-            "                                   <StaticResource creativeType=\"image/bmp\">" +
-            "                                       <![CDATA[" +
-            "                                           https://cdn.liverail.com/adasset/229/7969/300x250.bmp" +
-            "                                       ]]>" +
-            "                                   </StaticResource>" +
-            "                                   <TrackingEvents>" +
-            "                                       <Tracking event=\"creativeView\">" +
-            "                                           <![CDATA[" +
-            "                                               https://trackingUrl1.com/" +
-            "                                           ]]>" +
-            "                                       </Tracking>" +
-            "                                   </TrackingEvents>" +
-            "                                   <CompanionClickThrough>" +
-            "                                       <![CDATA[" +
-            "                                           https://clickThroughUrl1.com/" +
-            "                                       ]]>" +
-            "                                   </CompanionClickThrough>" +
-            "                                   <CompanionClickTracking><![CDATA[https://companionClickTracking2]]></CompanionClickTracking>" +
-            "                               </Companion>" +
-            "                               <Companion height=\"789\" width=\"1011\">" +
-            "                                   <StaticResource creativeType=\"image/gif\">" +
-            "                                       <![CDATA[" +
-            "                                           https://cdn.liverail.com/adasset/229/7969/300x250.gif" +
-            "                                       ]]>" +
-            "                                   </StaticResource>" +
-            "                                   <CompanionClickThrough>" +
-            "                                       <![CDATA[" +
-            "                                           https://clickThroughUrl2.com/" +
-            "                                       ]]>" +
-            "                                   </CompanionClickThrough>" +
-            "                                   <CompanionClickTracking><![CDATA[https://companionClickTracking3]]></CompanionClickTracking>" +
-            "                               </Companion>" +
-            "                               <Companion width=\"300\" height=\"60\">" +
-            "                                   <StaticResource creativeType=\"application/x-shockwave-flash\">" +
-            "                                       <![CDATA[" +
-            "                                           https://cdn.liverail.com/adasset4/1331/229/7969/5122396e510b80db6b5ef4013ddabe90.swf" +
-            "                                       ]]>" +
-            "                                   </StaticResource>" +
-            "                                   <TrackingEvents>" +
-            "                                       <Tracking event=\"creativeView\">" +
-            "                                           <![CDATA[" +
-            "                                               https://trackingUrl2.com/" +
-            "                                           ]]>" +
-            "                                       </Tracking>" +
-            "                                   </TrackingEvents>" +
-            "                                   <CompanionClickThrough>" +
-            "                                       <![CDATA[" +
-            "                                           https://clickThroughUrl3.com/" +
-            "                                       ]]>" +
-            "                                   </CompanionClickThrough>" +
-            "                                   <CompanionClickTracking><![CDATA[https://companionClickTracking4]]></CompanionClickTracking>" +
-            "                               </Companion>" +
-            "                               <Companion id=\"valid\" height=\"249\" width=\"299\">" +
-            "                                   <BADStaticResource creativeType=\"image/jpeg\">https://demo.tremormedia.com/proddev/vast/Blistex1.jpg</BADStaticResource>" +
-            "                                   <TrackingEvents>" +
-            "                                           <Tracking event=\"creativeView\">https://myTrackingURL/firstCompanionCreativeView</Tracking>" +
-            "                                           <Tracking event=\"creativeView\">https://myTrackingURL/secondCompanionCreativeView</Tracking>" +
-            "                                           <BADTracking event=\"creativeView\">https://myTrackingURL/thirdCompanionCreativeView</BADTracking>" +
-            "                                           <Tracking BADevent=\"creativeView\">https://myTrackingURL/fourthCompanionCreativeView</Tracking>" +
-            "                                           <Tracking event=\"BADcreativeView\">https://myTrackingURL/fifthCompanionCreativeView</Tracking>" +
-            "                                   </TrackingEvents>" +
-            "                                   <BADCompanionClickThrough>https://www.tremormedia.com</BADCompanionClickThrough>" +
-            "                                   <BADCompanionClickTracking><![CDATA[https://companionClickTracking5]]></BADCompanionClickTracking>" +
-            "                               </Companion>" +
-            "                               <Companion width=\"9000\">" +
-            "                                   <TrackingEvents>" +
-            "                                       <ThisWillNotBeFound>" +
-            "                                           <Tracking event=\"creativeView\">https://myTrackingURL/firstCompanionCreativeView</Tracking>" +
-            "                                           <Tracking event=\"creativeView\">https://myTrackingURL/secondCompanionCreativeView</Tracking>" +
-            "                                       </ThisWillNotBeFound>" +
-            "                                   </TrackingEvents>" +
-            "                               </Companion>" +
-            "                               <BADCompanion>" +
-            "                               </BADCompanion>" +
-            "                            </CompanionAds>" +
-            "                        </Creative>" +
-            "                    </Creatives>" +
-            "                    <Extensions>" +
-            "                        <Extension type=\"DART\">" +
-            "                            <AdServingData>" +
-            "                                <DeliveryData>" +
-            "                                    <GeoData>" +
-            "                                        <![CDATA[" +
-            "                                        ct=US&st=CA&ac=415&zp=94103&bw=4&dma=197&city=13358" +
-            "                                        ]]>" +
-            "                                    </GeoData>" +
-            "                                </DeliveryData>" +
-            "                            </AdServingData>" +
-            "                        </Extension>" +
-            "                        <Extension type=\"MoPub\">" +
-            "                           <MoPubCtaText>custom CTA text</MoPubCtaText>" +
-            "                           <MoPubSkipText>skip</MoPubSkipText>" +
-            "                           <MoPubCloseIcon>https://ton.twitter.com/exchange-media/images/v4/star_icon_3x.png</MoPubCloseIcon>" +
-            "                           <MoPubForceOrientation>device</MoPubForceOrientation>" +
-            "                           <MoPubViewabilityTracker" +
-"                                           viewablePlaytime=\"2.5\"" +
-            "                               percentViewable=\"50%\">" +
-            "                               <![CDATA[" +
-            "                                   https://ad.server.com/impression/dot.gif" +
-            "                               ]]>" +
-            "                           </MoPubViewabilityTracker>" +
-            "                        </Extension>" +
-            "                    </Extensions>" +
-            "                </InLine>" +
-            "                <Wrapper>" +
-            "                   <AdSystem>Acudeo Compatible</AdSystem>" +
-            "                   <VASTAdTagURI>https://0.dsp.dev1.mopub.com/xml</VASTAdTagURI>" +
-            "                   <Impression>https://myTrackingURL/wrapper/impression</Impression>" +
-            "                   <Creatives>" +
-            "                   </Creatives>" +
-            "                </Wrapper>" +
-            "            </Ad>" +
-            "        </VAST>" +
-            "<MP_TRACKING_URLS>" +
-            "   <MP_TRACKING_URL>https://www.mopub.com/imp1</MP_TRACKING_URL>" +
-            "   <MP_TRACKING_URL>https://www.mopub.com/imp2</MP_TRACKING_URL>" +
-            "</MP_TRACKING_URLS>";
-
-    private VastXmlManager mXmlManager;
-    private boolean mExceptionRaised;
-
-    @Before
-    public void setup() {
-        mXmlManager = new VastXmlManager();
-        mExceptionRaised = false;
-
-        try {
-            mXmlManager.parseVastXml(TEST_VAST_XML_STRING);
-        } catch (ParserConfigurationException e) {
-            e.printStackTrace();
-            mExceptionRaised = true;
-        } catch (IOException e) {
-            e.printStackTrace();
-            mExceptionRaised = true;
-        } catch (SAXException e) {
-            e.printStackTrace();
-            mExceptionRaised = true;
-        }
-    }
-
-    /**
-     * UNIT TESTS
-     */
-
-    @Test
-    public void parseVastXml_shouldNotRaiseAnExceptionProcessingValidXml() {
-        assertThat(mExceptionRaised).isEqualTo(false);
-    }
-
-    @Test
-    public void parseVastXml_shouldNotRaiseAnExceptionProcessingXmlWithXmlHeaderTag() throws ParserConfigurationException, IOException, SAXException {
-        String xmlString = XML_HEADER_TAG + TEST_VAST_XML_STRING;
-
-        mXmlManager = new VastXmlManager();
-        mXmlManager.parseVastXml(xmlString);
-    }
-
-    @Test
-    public void parseVastXml_withMalformedXml_shouldNotCauseProblems() {
-        String badXml = "<im>going<<<to||***crash></,>CDATA[]YOUR_FACE";
-
-        VastXmlManager badManager = new VastXmlManager();
-
-        try {
-            badManager.parseVastXml(badXml);
-        } catch (ParserConfigurationException e) {
-            e.printStackTrace();
-        } catch (IOException e) {
-            e.printStackTrace();
-        } catch (SAXException e) {
-            e.printStackTrace();
-        }
-
-        assertThat(badManager.getMoPubImpressionTrackers().size()).isEqualTo(0);
-    }
-
-    @Test
-    public void parseVastXml_withMalformedNodes_shouldNotCauseProblems() {
-        String badXml = "<VAST><Impression id=\"DART\"></Impression><Tracking event=\"start\"><![CDATA[ good ]]><ExtraNode><![CDATA[ bad ]]></ExtraNode></Tracking></VAST>";
-
-        VastXmlManager badManager = new VastXmlManager();
-
-        try {
-            badManager.parseVastXml(badXml);
-        } catch (ParserConfigurationException e) {
-            e.printStackTrace();
-        } catch (IOException e) {
-            e.printStackTrace();
-        } catch (SAXException e) {
-            e.printStackTrace();
-        }
-
-        assertThat(badManager.getAdXmlManagers()).isEmpty();
-    }
-
-    @Test
-    public void getAdXmlManagers_shouldReturnAllAdXmlManagers() throws Exception {
-        String vastXml = "<VAST xmlns:xsi=\"https://www.w3.org/2001/XMLSchema-instance\" version=\"2.0\" xsi:noNamespaceSchemaLocation=\"vast.xsd\">" +
-                "    <Ad id=\"12345678\">" +
-                "        <InLine></InLine>" +
-                "    </Ad>" +
-                "    <Ad id=\"87654321\">" +
-                "        <Wrapper></Wrapper>" +
-                "    </Ad>" +
-                "</VAST>";
-
-        VastXmlManager subject = new VastXmlManager();
-        subject.parseVastXml(vastXml);
-        List<VastAdXmlManager> vastAdXmlManagers = subject.getAdXmlManagers();
-
-        assertThat(vastAdXmlManagers.size()).isEqualTo(2);
-        assertThat(vastAdXmlManagers.get(0).getInLineXmlManager()).isNotNull();
-        assertThat(vastAdXmlManagers.get(0).getWrapperXmlManager()).isNull();
-        assertThat(vastAdXmlManagers.get(1).getInLineXmlManager()).isNull();
-        assertThat(vastAdXmlManagers.get(1).getWrapperXmlManager()).isNotNull();
-    }
-
-    @Test
-    public void getMoPubImpressionTrackers_shouldReturnTheCorrectValue() {
-        assertThat(VastUtils.vastTrackersToStrings(mXmlManager.getMoPubImpressionTrackers()))
-                .containsOnly("https://www.mopub.com/imp1", "https://www.mopub.com/imp2");
-    }
-
-    @Test
-    public void getCustomCtaText_shouldReturnTheCorrectValue() {
-        String customCtaText = mXmlManager.getCustomCtaText();
-
-        assertThat(customCtaText).isEqualTo("custom CTA text");
-    }
-
-    @Test
-    public void getCustomSkipText_shouldReturnTheCorrectValue() {
-        String customSkipText = mXmlManager.getCustomSkipText();
-
-        assertThat(customSkipText).isEqualTo("skip");
-    }
-
-    @Test
-    public void getCustomCloseIconUrl_shouldReturnTheCorrectValue() {
-        String customCloseIconUrl = mXmlManager.getCustomCloseIconUrl();
-
-        assertThat(customCloseIconUrl).isEqualTo("https://ton.twitter" +
-                ".com/exchange-media/images/v4/star_icon_3x.png");
-    }
-
-    @Test
-    public void getCustomForceOrientation_shouldReturnTheCorrectValue() {
-        ForceOrientation customForceOrientation = mXmlManager.getCustomForceOrientation();
-
-        assertThat(customForceOrientation).isEqualTo(ForceOrientation.DEVICE_ORIENTATION);
-    }
-
-    /**
-     * INTEGRATION TESTS
-     */
-
-    @Test
-    public void getVastAdTagURI_withWrapperXmlManager_shouldReturnTheCorrectValue() {
-        String url = mXmlManager.getAdXmlManagers().get(0).getWrapperXmlManager().getVastAdTagURI();
-
-        assertThat(url).isEqualTo("https://0.dsp.dev1.mopub.com/xml");
-    }
-
-    @Test
-    public void getImpressionTrackers_withInLineXmlManager_shouldReturnTheCorrectValue() {
-        assertThat(VastUtils.vastTrackersToStrings(mXmlManager.getAdXmlManagers().get(0)
-                .getInLineXmlManager().getImpressionTrackers()))
-                .containsOnly("https://ad.doubleclick.net/imp;v7;x;223626102;0-0;0;47414672;0/0;" +
-                                "30477563/30495440/1;;~aopt=0/0/ff/0;~cs=j%3fhttp://s0.2mdn" +
-                                ".net/dot.gif",
-                        "https://ad.doubleclick.net/ad/N270.Process_Other/B3473145;sz=1x1;ord=2922389?");
-    }
-
-    @Test
-    public void getCompanionAdXmlManagers_withInLineXmlManager_shouldReturnListOfPopulatedCompanionAdXmlManagers() throws Exception {
-        List<VastCompanionAdXmlManager> imageCompanionAdXmlManagers = mXmlManager.getAdXmlManagers().get(0)
-                .getInLineXmlManager().getCompanionAdXmlManagers();
-        assertThat(imageCompanionAdXmlManagers.size()).isEqualTo(7);
-
-        assertThat(imageCompanionAdXmlManagers.get(0).getWidth()).isEqualTo(728);
-        assertThat(imageCompanionAdXmlManagers.get(0).getHeight()).isEqualTo(90);
-        assertThat(imageCompanionAdXmlManagers.get(0).getResourceXmlManager().getStaticResourceType())
-                .isEqualTo("image/jpeg");
-        assertThat(imageCompanionAdXmlManagers.get(0).getResourceXmlManager().getStaticResource())
-                .isEqualTo("https://demo.tremormedia.com/proddev/vast/728x90_banner1.jpg");
-        assertThat(imageCompanionAdXmlManagers.get(0).getClickThroughUrl()).isEqualTo(
-                "https://www.tremormedia.com");
-        assertThat(imageCompanionAdXmlManagers.get(0).getClickTrackers()).isEmpty();
-
-        assertThat(imageCompanionAdXmlManagers.get(1).getWidth()).isEqualTo(300);
-        assertThat(imageCompanionAdXmlManagers.get(1).getHeight()).isEqualTo(250);
-        assertThat(imageCompanionAdXmlManagers.get(1).getResourceXmlManager().getStaticResourceType())
-                .isEqualTo("image/png");
-        assertThat(imageCompanionAdXmlManagers.get(1).getResourceXmlManager().getStaticResource())
-                .isEqualTo("https://demo.tremormedia.com/proddev/vast/Blistex1.png");
-        assertThat(imageCompanionAdXmlManagers.get(1).getClickThroughUrl()).isEqualTo(
-                "https://www.tremormedia.com");
-        assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(1)
-                .getClickTrackers())).containsOnly("https://companionClickTracking1");
-
-        assertThat(imageCompanionAdXmlManagers.get(2).getWidth()).isEqualTo(456);
-        assertThat(imageCompanionAdXmlManagers.get(2).getHeight()).isEqualTo(789);
-        assertThat(imageCompanionAdXmlManagers.get(2).getResourceXmlManager().getStaticResourceType())
-                .isEqualTo("image/bmp");
-        assertThat(imageCompanionAdXmlManagers.get(2).getResourceXmlManager().getStaticResource())
-                .isEqualTo("https://cdn.liverail.com/adasset/229/7969/300x250.bmp");
-        assertThat(imageCompanionAdXmlManagers.get(2).getClickThroughUrl())
-                .isEqualTo("https://clickThroughUrl1.com/");
-        assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(2)
-                .getClickTrackers())).containsOnly("https://companionClickTracking2");
-        assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(2)
-                .getCompanionCreativeViewTrackers())).containsOnly("https://trackingUrl1.com/");
-
-        assertThat(imageCompanionAdXmlManagers.get(3).getWidth()).isEqualTo(1011);
-        assertThat(imageCompanionAdXmlManagers.get(3).getHeight()).isEqualTo(789);
-        assertThat(imageCompanionAdXmlManagers.get(3).getResourceXmlManager().getStaticResourceType())
-                .isEqualTo("image/gif");
-        assertThat(imageCompanionAdXmlManagers.get(3).getResourceXmlManager().getStaticResource())
-                .isEqualTo("https://cdn.liverail.com/adasset/229/7969/300x250.gif");
-        assertThat(imageCompanionAdXmlManagers.get(3).getClickThroughUrl()).isEqualTo(
-                "https://clickThroughUrl2.com/");
-        assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(3)
-                .getClickTrackers())).containsOnly("https://companionClickTracking3");
-        assertThat(imageCompanionAdXmlManagers.get(3).getCompanionCreativeViewTrackers()).isEmpty();
-
-        assertThat(imageCompanionAdXmlManagers.get(4).getWidth()).isEqualTo(300);
-        assertThat(imageCompanionAdXmlManagers.get(4).getHeight()).isEqualTo(60);
-        assertThat(imageCompanionAdXmlManagers.get(4).getResourceXmlManager().getStaticResourceType())
-                .isEqualTo("application/x-shockwave-flash");
-        assertThat(imageCompanionAdXmlManagers.get(4).getResourceXmlManager().getStaticResource())
-                .isEqualTo(
-                        "https://cdn.liverail.com/adasset4/1331/229/7969/5122396e510b80db6b5ef4013ddabe90.swf");
-        assertThat(imageCompanionAdXmlManagers.get(4).getClickThroughUrl()).isEqualTo(
-                "https://clickThroughUrl3.com/");
-        assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(4)
-                .getClickTrackers())).containsOnly("https://companionClickTracking4");
-        assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(4)
-                .getCompanionCreativeViewTrackers())).containsOnly("https://trackingUrl2.com/");
-
-        assertThat(imageCompanionAdXmlManagers.get(5).getWidth()).isEqualTo(299);
-        assertThat(imageCompanionAdXmlManagers.get(5).getHeight()).isEqualTo(249);
-        assertThat(imageCompanionAdXmlManagers.get(5).getResourceXmlManager().getStaticResourceType()).isNull();
-        assertThat(imageCompanionAdXmlManagers.get(5).getResourceXmlManager().getStaticResource()).isNull();
-        assertThat(imageCompanionAdXmlManagers.get(5).getClickThroughUrl()).isNull();
-        assertThat(imageCompanionAdXmlManagers.get(5).getClickTrackers()).isEmpty();
-        assertThat(VastUtils.vastTrackersToStrings(imageCompanionAdXmlManagers.get(5)
-                .getCompanionCreativeViewTrackers()))
-                .containsOnly("https://myTrackingURL/firstCompanionCreativeView",
-                        "https://myTrackingURL/secondCompanionCreativeView");
-
-        assertThat(imageCompanionAdXmlManagers.get(6).getWidth()).isEqualTo(9000);
-        assertThat(imageCompanionAdXmlManagers.get(6).getHeight()).isNull();
-        assertThat(imageCompanionAdXmlManagers.get(6).getResourceXmlManager().getStaticResourceType()).isNull();
-        assertThat(imageCompanionAdXmlManagers.get(6).getResourceXmlManager().getStaticResource()).isNull();
-        assertThat(imageCompanionAdXmlManagers.get(6).getClickThroughUrl()).isNull();
-        assertThat(imageCompanionAdXmlManagers.get(6).getClickTrackers()).isEmpty();
-        assertThat(imageCompanionAdXmlManagers.get(6).getCompanionCreativeViewTrackers()).isEmpty();
-    }
-
-    @Test
-    public void getAbsoluteProgressTrackers_withLinearXmlManager_shouldReturnCorrectValues() {
-        List<VastAbsoluteProgressTracker> trackers = mXmlManager.getAdXmlManagers().get(0)
-                .getInLineXmlManager().getLinearXmlManagers().get(0).getAbsoluteProgressTrackers();
-
-        assertThat(trackers.size()).isEqualTo(2);
-
-        VastAbsoluteProgressTracker tracker0 = trackers.get(0);
-        assertThat(tracker0.getTrackingMilliseconds()).isEqualTo(0);
-        assertThat(tracker0.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
-
-        VastAbsoluteProgressTracker tracker1 = trackers.get(1);
-        assertThat(tracker1.getTrackingMilliseconds()).isEqualTo(3670300);
-        assertThat(tracker1.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;" +
-                "src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;" +
-                "rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
-    }
-
-    @Test
-    public void getFractionalTrackers_withLinearXmlManager_shouldReturnCorrectValues() {
-        List<VastFractionalProgressTracker> trackers = mXmlManager.getAdXmlManagers().get(0)
-                .getInLineXmlManager().getLinearXmlManagers().get(0).getFractionalProgressTrackers();
-
-        assertThat(trackers.size()).isEqualTo(7);
-
-        VastFractionalProgressTracker tracker0 = trackers.get(0);
-        assertThat(tracker0.trackingFraction()).isEqualTo(0.13f);
-        assertThat(tracker0.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=11;ecn1=1;etm1=0;");
-
-        VastFractionalProgressTracker tracker1 = trackers.get(1);
-        assertThat(tracker1.trackingFraction()).isEqualTo(0.25f);
-        assertThat(tracker1.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=26;ecn1=1;etm1=0;");
-
-        VastFractionalProgressTracker tracker2 = trackers.get(2);
-        assertThat(tracker2.trackingFraction()).isEqualTo(0.25f);
-        assertThat(tracker2.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.2;sz=1x1;ord=2922389?");
-
-        VastFractionalProgressTracker tracker3 = trackers.get(3);
-        assertThat(tracker3.trackingFraction()).isEqualTo(0.5f);
-        assertThat(tracker3.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=18;ecn1=1;etm1=0;");
-
-        VastFractionalProgressTracker tracker4 = trackers.get(4);
-        assertThat(tracker4.trackingFraction()).isEqualTo(0.5f);
-        assertThat(tracker4.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.3;sz=1x1;ord=2922389?");
-
-        VastFractionalProgressTracker tracker5 = trackers.get(5);
-        assertThat(tracker5.trackingFraction()).isEqualTo(0.75f);
-        assertThat(tracker5.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;timestamp=2922389;eid1=27;ecn1=1;etm1=0;");
-
-        VastFractionalProgressTracker tracker6 = trackers.get(6);
-        assertThat(tracker6.trackingFraction()).isEqualTo(0.75f);
-        assertThat(tracker6.getTrackingUrl()).isEqualTo("https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.4;sz=1x1;ord=2922389?");
-    }
-
-    @Test
-    public void getVideoCompleteTrackers_withLinearXmlManager_shouldReturnTheCorrectValue() {
-        assertThat(VastUtils.vastTrackersToStrings(mXmlManager.getAdXmlManagers().get(0).getInLineXmlManager().getLinearXmlManagers().get(0).getVideoCompleteTrackers()))
-                .containsOnly("https://ad.doubleclick.net/activity;src=2215309;met=1;v=1;" +
-                                "pid=47414672;aid=223626102;ko=0;cid=30477563;rid=30495440;rv=1;" +
-                                "timestamp=2922389;eid1=13;ecn1=1;etm1=0;",
-                        "https://ad.doubleclick.net/ad/N270.Process_Other/B3473145.5;sz=1x1;" +
-                                "ord=2922389?");
-    }
-
-    @Test
-    public void getVideoCloseTrackers_withLinearXmlManager_shouldReturnTheCorrectValue() {
-        assertThat(VastUtils.vastTrackersToStrings(mXmlManager.getAdXmlManagers().get(0)
-                .getInLineXmlManager().getLinearXmlManagers().get(0).getVideoCloseTrackers()))
-                .containsOnly("https://www.mopub.com/close?q=ignatius",
-                        "https://www.mopub.com/close?q=j3");
-    }
-
-    @Test
-    public void getVideoSkipTrackers_withLinearXmlManager_shouldReturnTheCorrectValue() {
-        assertThat(VastUtils.vastTrackersToStrings(mXmlManager.getAdXmlManagers().get(0)
-                .getInLineXmlManager().getLinearXmlManagers().get(0).getVideoSkipTrackers()))
-                .containsOnly("https://www.mopub.com/skip?q=ignatius",
-                        "https://www.mopub.com/skip?q=j3");
-    }
-
-    @Test
-    public void getClickThroughUrl_withLinearXmlManager_shouldReturnTheCorrectValue() {
-        String url = mXmlManager.getAdXmlManagers().get(0)
-                .getInLineXmlManager().getLinearXmlManagers().get(0).getClickThroughUrl();
-
-        assertThat(url).isEqualTo("https://www.google.com/support/richmedia");
-    }
-
-    @Test
-    public void getClickTrackers_withLinearXmlManager_shouldReturnTheCorrectValue() {
-        assertThat(VastUtils.vastTrackersToStrings(mXmlManager.getAdXmlManagers().get(0).getInLineXmlManager().getLinearXmlManagers().get(0).getClickTrackers()))
-                .containsOnly("https://ad.doubleclick.net/click%3Bh%3Dv8/3e1b/3/0/%2a/z%3B223626102%3B0-0%3B0%3B47414672%3B255-0/0%3B30477563/30495440/1%3B%3B%7Eaopt%3D0/0/ff/0%3B%7Esscs%3D%3fhttp://s0.2mdn.net/dot.gif",
-                        "https://ad.doubleclick.net/clk;212442087;33815766;i?https://www.google.com/support/richmedia");
-    }
-
-    @Test
-    public void getSkipOffset_withLinearXmlManager_shouldReturnTheCorrectValue() {
-        String skipOffset = mXmlManager.getAdXmlManagers().get(0).getInLineXmlManager()
-                .getLinearXmlManagers().get(0).getSkipOffset();
-
-        assertThat(skipOffset).isEqualTo("25%");
-    }
-
-    @Test
-    public void getMediaFileUrl_withMediaXmlManager_shouldReturnTheCorrectValue() {
-        String url = mXmlManager.getAdXmlManagers().get(0).getInLineXmlManager()
-                .getLinearXmlManagers().get(0).getMediaXmlManagers().get(0).getMediaUrl();
-
-        assertThat(url).isEqualTo("https://s3.amazonaws.com/uploads.hipchat" +
-                ".com/10627/429509/t8hqeqf98nvtir7/big_buck_bunny.mp4");
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VideoDownloaderTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VideoDownloaderTest.java
deleted file mode 100644
index 7b3ce325..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VideoDownloaderTest.java
+++ /dev/null
@@ -1,261 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-
-import com.mopub.common.CacheService;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.test.support.ShadowAsyncTasks;
-import com.mopub.common.util.test.support.ShadowMoPubHttpUrlConnection;
-import com.mopub.mobileads.VideoDownloader.VideoDownloaderListener;
-import com.mopub.mobileads.VideoDownloader.VideoDownloaderTask;
-
-import org.fest.util.Arrays;
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import java.lang.ref.WeakReference;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.anyBoolean;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class, shadows = {ShadowAsyncTasks.class, ShadowMoPubHttpUrlConnection.class})
-public class VideoDownloaderTest {
-    @Mock VideoDownloaderListener mockListener;
-    private final static String expectedUrl1 = "https://video_url";
-    private final static String expectedUrl2 = "https://video_url2";
-
-    @Before
-    public void setUp() {
-        Context context = Robolectric.buildActivity(Activity.class).create().get();
-        CacheService.initialize(context);
-    }
-
-    @After
-    public void tearDown() {
-        VideoDownloader.clearDownloaderTasks();
-        CacheService.clearAndNullCaches();
-    }
-
-    @Test
-    public void cache_shouldExecuteVideoDownloaderTask() {
-        VideoDownloader.cache(expectedUrl1, mockListener);
-
-        assertThat(ShadowAsyncTasks.wasCalled()).isTrue();
-        assertThat(ShadowAsyncTasks.getLatestAsyncTask()).isInstanceOf(VideoDownloaderTask.class);
-        assertThat(ShadowAsyncTasks.getLatestParams()).hasSize(1);
-        assertThat(ShadowAsyncTasks.getLatestParams().contains(expectedUrl1)).isTrue();
-
-        // In the success case, the listener will not be modified until after the AsyncTask is
-        // actually executed
-        verify(mockListener, never()).onComplete(anyBoolean());
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void cache_withNullListener_shouldThrowNullPointerException() {
-        VideoDownloader.cache(expectedUrl1, null);
-    }
-
-    @Test
-    public void cache_withNullUrl_shouldCallOnCompleteFalse_shouldNotExecuteAsyncTask() {
-        VideoDownloader.cache(null, mockListener);
-
-        verify(mockListener).onComplete(false);
-        assertThat(ShadowAsyncTasks.wasCalled()).isFalse();
-    }
-
-    @Test
-    public void cache_shouldAddVideoDownloaderTaskToStaticCollection() {
-        assertThat(VideoDownloader.getDownloaderTasks()).isEmpty();
-
-        VideoDownloader.cache(expectedUrl1, mockListener);
-
-        VideoDownloaderTask expectedTask =
-                (VideoDownloaderTask) ShadowAsyncTasks.getLatestAsyncTask();
-
-        assertThat(VideoDownloader.getDownloaderTasks()).hasSize(1);
-        assertThat(VideoDownloader.getDownloaderTasks().pop().get()).isEqualTo(expectedTask);
-    }
-
-    @Test
-    public void cache_shouldAddMultipleVideoDownloaderTasksToStaticCollection() {
-        VideoDownloader.cache(expectedUrl1, mockListener);
-        VideoDownloaderTask expectedTask1 =
-                (VideoDownloaderTask) ShadowAsyncTasks.getLatestAsyncTask();
-
-        VideoDownloader.cache(expectedUrl2, mockListener);
-        VideoDownloaderTask expectedTask2 =
-                (VideoDownloaderTask) ShadowAsyncTasks.getLatestAsyncTask();
-
-        assertThat(VideoDownloader.getDownloaderTasks()).hasSize(2);
-        assertThat(VideoDownloader.getDownloaderTasks().pop().get()).isEqualTo(expectedTask1);
-        assertThat(VideoDownloader.getDownloaderTasks().pop().get()).isEqualTo(expectedTask2);
-    }
-
-    @Test
-    public void cancelAllDownloaderTasks_shouldCancelAllTasksAndRemoveFromStaticCollection() {
-        final VideoDownloaderTask task1 = mock(VideoDownloaderTask.class);
-        final VideoDownloaderTask task2 = mock(VideoDownloaderTask.class);
-        VideoDownloader.getDownloaderTasks().add(new WeakReference<VideoDownloaderTask>(task1));
-        VideoDownloader.getDownloaderTasks().add(new WeakReference<VideoDownloaderTask>(task2));
-
-        VideoDownloader.cancelAllDownloaderTasks();
-
-        verify(task1).cancel(true);
-        verify(task2).cancel(true);
-        assertThat(VideoDownloader.getDownloaderTasks()).isEmpty();
-    }
-
-    @Test
-    public void cancelLastDownloaderTasks_shouldCancelTasksAndRemoveFromStaticCollection() {
-        final VideoDownloaderTask task1 = mock(VideoDownloaderTask.class);
-        final VideoDownloaderTask task2 = mock(VideoDownloaderTask.class);
-        VideoDownloader.getDownloaderTasks().add(new WeakReference<VideoDownloaderTask>(task1));
-        VideoDownloader.getDownloaderTasks().add(new WeakReference<VideoDownloaderTask>(task2));
-
-        VideoDownloader.cancelLastDownloadTask();
-
-        verify(task1, never()).cancel(anyBoolean());
-        verify(task2).cancel(true);
-        assertThat(VideoDownloader.getDownloaderTasks()).hasSize(1);
-        assertThat(VideoDownloader.getDownloaderTasks().pop().get()).isEqualTo(task1);
-    }
-
-    @Test
-    public void doInBackground_shouldReturnTrue_shouldUpdateCache() throws Exception {
-        String expectedResponse = "response";
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, expectedResponse);
-        final VideoDownloaderTask videoDownloaderTask = new VideoDownloaderTask(mockListener);
-
-        final Boolean result = videoDownloaderTask.doInBackground(expectedUrl1);
-
-        assertThat(result).isTrue();
-        assertThat(CacheService.getDiskLruCache().size()).isEqualTo(expectedResponse.length());
-        assertThat(CacheService.getFromDiskCache(expectedUrl1)).isEqualTo(expectedResponse.getBytes());
-    }
-
-    @Test
-    public void doInBackground_withNullArguments_shouldReturnFalse_shouldNotUpdateCache() throws Exception {
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "response");
-        final VideoDownloaderTask videoDownloaderTask = new VideoDownloaderTask(mockListener);
-
-        final Boolean result = videoDownloaderTask.doInBackground((String) null);
-
-        assertThat(result).isFalse();
-        assertThat(CacheService.getDiskLruCache().size()).isEqualTo(0);
-    }
-
-    @Test
-    public void doInBackground_withEmptyArrayArguments_shouldReturnFalse_shouldNotUpdateCache() throws Exception {
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "response");
-        final VideoDownloaderTask videoDownloaderTask = new VideoDownloaderTask(mockListener);
-
-        final Boolean result = videoDownloaderTask.doInBackground(Arrays.<String>array());
-
-        assertThat(result).isFalse();
-        assertThat(CacheService.getDiskLruCache().size()).isEqualTo(0);
-    }
-
-    @Test
-    public void doInBackground_withArrayStartingWithNull_shouldReturnFalse_shouldNotUpdateCache() throws Exception {
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, "response");
-        final VideoDownloaderTask videoDownloaderTask = new VideoDownloaderTask(mockListener);
-
-        final String[] parameters = {null};
-        final Boolean result = videoDownloaderTask.doInBackground(parameters);
-
-        assertThat(result).isFalse();
-        assertThat(CacheService.getDiskLruCache().size()).isEqualTo(0);
-    }
-
-    @Test
-    public void doInBackground_withStatusCodeLessThan200_shouldReturnFalse_shouldNotUpdateCache() throws Exception {
-        ShadowMoPubHttpUrlConnection.addPendingResponse(199, "response");
-        VideoDownloaderTask videoDownloaderTask = new VideoDownloaderTask(mockListener);
-
-        final Boolean result = videoDownloaderTask.doInBackground(expectedUrl1);
-
-        assertThat(result).isFalse();
-        assertThat(CacheService.getDiskLruCache().size()).isEqualTo(0);
-    }
-
-    @Test
-    public void doInBackground_withStatusCodeGreaterThan299_shouldReturnFalse_shouldNotUpdateCache() throws Exception {
-        ShadowMoPubHttpUrlConnection.addPendingResponse(300, "response");
-        VideoDownloaderTask videoDownloaderTask = new VideoDownloaderTask(mockListener);
-
-        final Boolean result = videoDownloaderTask.doInBackground(expectedUrl1);
-
-        assertThat(result).isFalse();
-        assertThat(CacheService.getDiskLruCache().size()).isEqualTo(0);
-    }
-
-    @Test
-    public void doInBackground_withResponseGreaterThan25Mb_shouldReturnFalse_shouldNotUpdateCache() throws Exception {
-        String longString = createLongString(25 * 1024 * 1024 + 1);
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, longString);
-        VideoDownloaderTask videoDownloaderTask = new VideoDownloaderTask(mockListener);
-
-        final Boolean result = videoDownloaderTask.doInBackground(expectedUrl1);
-
-        assertThat(result).isFalse();
-        assertThat(CacheService.getDiskLruCache().size()).isEqualTo(0);
-    }
-
-    @Test
-    public void onPostExecute_withSuccessTrue_shouldCallOnCompleteTrue_shouldRemoveDownloadTaskFromQueue() {
-        VideoDownloaderTask videoDownloaderTask = new VideoDownloaderTask(mockListener);
-        assertThat(VideoDownloader.getDownloaderTasks()).hasSize(1);
-
-        videoDownloaderTask.onPostExecute(true);
-
-        verify(mockListener).onComplete(true);
-        assertThat(VideoDownloader.getDownloaderTasks()).hasSize(0);
-    }
-
-    @Test
-    public void onPostExecute_withSuccessFalse_shouldCallOnCompleteFalse_shouldRemoveDownloadTaskFromQueue() {
-        VideoDownloaderTask videoDownloaderTask = new VideoDownloaderTask(mockListener);
-        assertThat(VideoDownloader.getDownloaderTasks()).hasSize(1);
-
-        videoDownloaderTask.onPostExecute(false);
-
-        verify(mockListener).onComplete(false);
-        assertThat(VideoDownloader.getDownloaderTasks()).hasSize(0);
-    }
-
-    @Test
-    public void onPostExecute_withSuccessNull_shouldCallOnCompleteFalse_shouldRemoveDownloadTaskFromQueue() {
-        VideoDownloaderTask videoDownloaderTask = new VideoDownloaderTask(mockListener);
-        assertThat(VideoDownloader.getDownloaderTasks()).hasSize(1);
-
-        videoDownloaderTask.onPostExecute(null);
-
-        verify(mockListener).onComplete(false);
-        assertThat(VideoDownloader.getDownloaderTasks()).hasSize(0);
-    }
-
-    @Test
-    public void cancelledTask_shouldCallOnCompleteFalse_shouldRemoveDownloadTaskFromQueue() {
-        VideoDownloaderTask videoDownloaderTask = new VideoDownloaderTask(mockListener);
-        assertThat(VideoDownloader.getDownloaderTasks()).hasSize(1);
-
-        videoDownloaderTask.cancel(true);
-
-        verify(mockListener).onComplete(false);
-        assertThat(VideoDownloader.getDownloaderTasks()).hasSize(0);
-    }
-
-    private static String createLongString(int size) {
-        return new String(new char[size]).replace("\0", "*");
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VideoViewabilityTrackerXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VideoViewabilityTrackerXmlManagerTest.java
deleted file mode 100644
index 0a7acd72..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VideoViewabilityTrackerXmlManagerTest.java
+++ /dev/null
@@ -1,236 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import static com.mopub.mobileads.test.support.VastUtils.createNode;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class VideoViewabilityTrackerXmlManagerTest {
-    private VideoViewabilityTrackerXmlManager subject;
-
-    @Test
-    public void getViewablePlaytimeMS_shouldParseHourFormat() throws Exception {
-        String videoViewabilityXml = "<MoPubViewabilityTracker" +
-                "                             viewablePlaytime=\"01:01:01.001\"" +
-                "                             percentViewable=\"50%\">" +
-                "                         <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
-                "                     </MoPubViewabilityTracker>";
-
-        subject = new VideoViewabilityTrackerXmlManager(createNode(videoViewabilityXml));
-
-        assertThat(subject.getViewablePlaytimeMS()).isEqualTo(3661001);
-    }
-
-    @Test
-    public void getViewablePlaytimeMS_shouldParseSecondsFormat() throws Exception {
-        String videoViewabilityXml = "<MoPubViewabilityTracker" +
-                "                             viewablePlaytime=\"01.001\"" +
-                "                             percentViewable=\"50%\">" +
-                "                         <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
-                "                     </MoPubViewabilityTracker>";
-
-        subject = new VideoViewabilityTrackerXmlManager(createNode(videoViewabilityXml));
-
-        assertThat(subject.getViewablePlaytimeMS()).isEqualTo(1001);
-    }
-
-    @Test
-    public void getViewablePlaytimeMS_shouldParseIntegerFormat() throws Exception {
-        String videoViewabilityXml = "<MoPubViewabilityTracker" +
-                "                             viewablePlaytime=\"2\"" +
-                "                             percentViewable=\"50%\">" +
-                "                         <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
-                "                     </MoPubViewabilityTracker>";
-
-        subject = new VideoViewabilityTrackerXmlManager(createNode(videoViewabilityXml));
-
-        assertThat(subject.getViewablePlaytimeMS()).isEqualTo(2000);
-    }
-
-    @Test
-    public void getViewablePlaytimeMS_withoutViewablePlaytimeMS_shouldReturnNull() throws Exception {
-        String videoViewabilityXml = "<MoPubViewabilityTracker" +
-                "                             percentViewable=\"50%\">" +
-                "                         <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
-                "                     </MoPubViewabilityTracker>";
-
-        subject = new VideoViewabilityTrackerXmlManager(createNode(videoViewabilityXml));
-
-        assertThat(subject.getViewablePlaytimeMS()).isNull();
-    }
-
-    @Test
-    public void getViewablePlaytimeMS_withNegativeInteger_shouldReturnNull() throws Exception {
-        String videoViewabilityXml = "<MoPubViewabilityTracker" +
-                "                             viewablePlaytime=\"-1\"" +
-                "                             percentViewable=\"50%\">" +
-                "                         <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
-                "                     </MoPubViewabilityTracker>";
-
-        subject = new VideoViewabilityTrackerXmlManager(createNode(videoViewabilityXml));
-
-        assertThat(subject.getViewablePlaytimeMS()).isNull();
-    }
-
-    @Test
-    public void getViewablePlaytimeMS_withInvalidHourFormat_shouldReturnNull() throws Exception {
-        String videoViewabilityXml = "<MoPubViewabilityTracker" +
-                "                             viewablePlaytime=\"a01:01:01.001\"" +
-                "                             percentViewable=\"50%\">" +
-                "                         <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
-                "                     </MoPubViewabilityTracker>";
-
-        subject = new VideoViewabilityTrackerXmlManager(createNode(videoViewabilityXml));
-
-        assertThat(subject.getViewablePlaytimeMS()).isNull();
-    }
-
-    @Test
-    public void getViewablePlaytimeMS_withInvalidSecondsFormat_shouldReturnNull() throws Exception {
-        String videoViewabilityXml = "<MoPubViewabilityTracker" +
-                "                             viewablePlaytime=\"a01.001\"" +
-                "                             percentViewable=\"50%\">" +
-                "                         <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
-                "                     </MoPubViewabilityTracker>";
-
-        subject = new VideoViewabilityTrackerXmlManager(createNode(videoViewabilityXml));
-
-        assertThat(subject.getViewablePlaytimeMS()).isNull();
-    }
-
-    @Test
-    public void getViewablePlaytimeMS_withInvalidViewablePlaytimeMS_shouldReturnNull() throws Exception {
-        String videoViewabilityXml = "<MoPubViewabilityTracker" +
-                "                             viewablePlaytime=\"1234!@#$%^*(asdf\"" +
-                "                             percentViewable=\"50%\">" +
-                "                         <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
-                "                     </MoPubViewabilityTracker>";
-
-        subject = new VideoViewabilityTrackerXmlManager(createNode(videoViewabilityXml));
-
-        assertThat(subject.getViewablePlaytimeMS()).isNull();
-    }
-
-    @Test
-    public void getPercentViewable_shouldParseWithPercentSign() throws Exception {
-        String videoViewabilityXml = "<MoPubViewabilityTracker" +
-                "                             viewablePlaytime=\"1\"" +
-                "                             percentViewable=\"25%\">" +
-                "                         <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
-                "                     </MoPubViewabilityTracker>";
-
-        subject = new VideoViewabilityTrackerXmlManager(createNode(videoViewabilityXml));
-
-        assertThat(subject.getPercentViewable()).isEqualTo(25);
-    }
-
-    @Test
-    public void getPercentViewable_shouldParseWithoutPercentSign() throws Exception {
-        String videoViewabilityXml = "<MoPubViewabilityTracker" +
-                "                             viewablePlaytime=\"1\"" +
-                "                             percentViewable=\"25\">" +
-                "                         <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
-                "                     </MoPubViewabilityTracker>";
-
-        subject = new VideoViewabilityTrackerXmlManager(createNode(videoViewabilityXml));
-
-        assertThat(subject.getPercentViewable()).isEqualTo(25);
-    }
-
-    @Test
-    public void getPercentViewable_shouldTruncateFloats() throws Exception {
-        String videoViewabilityXml = "<MoPubViewabilityTracker" +
-                "                             viewablePlaytime=\"1\"" +
-                "                             percentViewable=\"25.9\">" +
-                "                         <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
-                "                     </MoPubViewabilityTracker>";
-
-        subject = new VideoViewabilityTrackerXmlManager(createNode(videoViewabilityXml));
-
-        assertThat(subject.getPercentViewable()).isEqualTo(25);
-    }
-
-    @Test
-    public void getPercentViewable_withoutPercentViewable_shouldReturnNull() throws Exception {
-        String videoViewabilityXml = "<MoPubViewabilityTracker" +
-                "                             viewablePlaytime=\"1\">" +
-                "                         <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
-                "                     </MoPubViewabilityTracker>";
-
-        subject = new VideoViewabilityTrackerXmlManager(createNode(videoViewabilityXml));
-
-        assertThat(subject.getPercentViewable()).isNull();
-    }
-
-    @Test
-    public void getPercentViewable_withNegativeInteger_shouldReturnNull() throws Exception {
-        String videoViewabilityXml = "<MoPubViewabilityTracker" +
-                "                             viewablePlaytime=\"1\"" +
-                "                             percentViewable=\"-25\">" +
-                "                         <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
-                "                     </MoPubViewabilityTracker>";
-
-        subject = new VideoViewabilityTrackerXmlManager(createNode(videoViewabilityXml));
-
-        assertThat(subject.getPercentViewable()).isNull();
-    }
-
-    @Test
-    public void getPercentViewable_withIntegerGreaterThan100_shouldReturnNull() throws Exception {
-        String videoViewabilityXml = "<MoPubViewabilityTracker" +
-                "                             viewablePlaytime=\"1\"" +
-                "                             percentViewable=\"101\">" +
-                "                         <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
-                "                     </MoPubViewabilityTracker>";
-
-        subject = new VideoViewabilityTrackerXmlManager(createNode(videoViewabilityXml));
-
-        assertThat(subject.getPercentViewable()).isNull();
-    }
-
-    @Test
-    public void getPercentViewable_withInvalidPercentViewable_shouldReturnNull() throws Exception {
-        String videoViewabilityXml = "<MoPubViewabilityTracker" +
-                "                             viewablePlaytime=\"1\"" +
-                "                             percentViewable=\"1234!@#$%^*(asdf\">" +
-                "                         <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
-                "                     </MoPubViewabilityTracker>";
-
-        subject = new VideoViewabilityTrackerXmlManager(createNode(videoViewabilityXml));
-
-        assertThat(subject.getPercentViewable()).isNull();
-    }
-
-    @Test
-    public void getVideoViewabilityTrackerUrl_shouldReturnVideoViewabilityTrackerUrl() throws Exception {
-        String videoViewabilityXml = "<MoPubViewabilityTracker" +
-                "                             viewablePlaytime=\"2\"" +
-                "                             percentViewable=\"50%\">" +
-                "                         <![CDATA[https://ad.server.com/impression/dot.gif]]>" +
-                "                     </MoPubViewabilityTracker>";
-
-        subject = new VideoViewabilityTrackerXmlManager(createNode(videoViewabilityXml));
-
-        assertThat(subject.getVideoViewabilityTrackerUrl())
-                .isEqualTo("https://ad.server.com/impression/dot.gif");
-    }
-
-    @Test
-    public void getVideoViewabilityTrackerUrl_withoutTrackerUrl_shouldReturnEmptyString() throws Exception {
-        String videoViewabilityXml = "<MoPubViewabilityTracker" +
-                "                             viewablePlaytime=\"2\"" +
-                "                             percentViewable=\"50%\">" +
-                "                     </MoPubViewabilityTracker>";
-
-        subject = new VideoViewabilityTrackerXmlManager(createNode(videoViewabilityXml));
-
-        assertThat(subject.getVideoViewabilityTrackerUrl()).isEmpty();
-    }
-
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/ViewGestureDetectorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/ViewGestureDetectorTest.java
deleted file mode 100644
index feb326a2..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/ViewGestureDetectorTest.java
+++ /dev/null
@@ -1,144 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.view.MotionEvent;
-import android.view.View;
-
-import com.mopub.common.AdReport;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Shadows;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowGestureDetector;
-
-import static com.mopub.mobileads.ViewGestureDetector.UserClickListener;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.verify;
-
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class ViewGestureDetectorTest {
-    private Activity context;
-    private ViewGestureDetector subject;
-    private AdAlertGestureListener adAlertGestureListener;
-    private View view;
-    @Mock AdReport mockAdReport;
-
-    @Before
-    public void setUp() throws Exception {
-        context = new Activity();
-        view = mock(View.class);
-        stub(view.getWidth()).toReturn(320);
-        stub(view.getHeight()).toReturn(50);
-
-        adAlertGestureListener = mock(AdAlertGestureListener.class);
-
-        subject = new ViewGestureDetector(context, view, mockAdReport);
-        subject.setAdAlertGestureListener(adAlertGestureListener);
-    }
-
-    @Test
-    public void constructor_shouldDisableLongPressAndSetGestureListener() throws Exception {
-        subject = new ViewGestureDetector(context, view, mockAdReport);
-
-        ShadowGestureDetector shadowGestureDetector = Shadows.shadowOf(subject);
-
-        assertThat(subject.isLongpressEnabled()).isFalse();
-        assertThat(shadowGestureDetector.getListener()).isNotNull();
-        assertThat(shadowGestureDetector.getListener()).isInstanceOf(AdAlertGestureListener.class);
-    }
-
-    @Test
-    public void onTouchEvent_whenActionUpAndClickListener_shouldNotifyClickListenerAndCheckReportAd() throws Exception {
-        MotionEvent expectedMotionEvent = createMotionEvent(MotionEvent.ACTION_UP);
-
-        UserClickListener userClickListener = mock(UserClickListener.class);
-        subject.setUserClickListener(userClickListener);
-
-        subject.sendTouchEvent(expectedMotionEvent);
-
-        verify(userClickListener).onUserClick();
-        verify(adAlertGestureListener).finishGestureDetection();
-    }
-
-    @Test
-    public void onTouchEvent_whenActionUpButNoClickListener_shouldNotNotifyClickListenerAndCheckReportAd() throws Exception {
-        MotionEvent expectedMotionEvent = createMotionEvent(MotionEvent.ACTION_UP);
-
-        UserClickListener userClickListener = mock(UserClickListener.class);
-
-        subject.sendTouchEvent(expectedMotionEvent);
-
-        verify(userClickListener, never()).onUserClick();
-        verify(adAlertGestureListener).finishGestureDetection();
-    }
-
-    @Test
-    public void onTouchEvent_whenActionDown_shouldForwardOnTouchEvent() throws Exception {
-        MotionEvent expectedMotionEvent = createMotionEvent(MotionEvent.ACTION_DOWN);
-
-        subject.sendTouchEvent(expectedMotionEvent);
-
-        MotionEvent actualMotionEvent = Shadows.shadowOf(subject).getOnTouchEventMotionEvent();
-
-        assertThat(actualMotionEvent).isEqualTo(expectedMotionEvent);
-    }
-
-    @Test
-    public void onTouchEvent_whenActionMoveWithinView_shouldForwardOnTouchEvent() throws Exception {
-        MotionEvent downEvent = createMotionEvent(MotionEvent.ACTION_DOWN);
-        subject.sendTouchEvent(downEvent);
-
-        MotionEvent expectedMotionEvent = createActionMove(160);
-        subject.sendTouchEvent(expectedMotionEvent);
-
-        MotionEvent actualMotionEvent = Shadows.shadowOf(subject).getOnTouchEventMotionEvent();
-
-        assertThat(actualMotionEvent).isEqualTo(expectedMotionEvent);
-        verify(adAlertGestureListener, never()).reset();
-    }
-
-    @Test
-    public void sendTouchEvent_whenReceiveTouchEventOutsideOfViewInXDirection_shouldResetAlertState() throws Exception {
-        subject.sendTouchEvent(createActionMove(350));
-
-        MotionEvent actualMotionEvent = Shadows.shadowOf(subject).getOnTouchEventMotionEvent();
-
-        assertThat(actualMotionEvent).isNull();
-        verify(adAlertGestureListener).reset();
-    }
-
-    @Test
-    public void sendTouchEvent_whenReceiveTouchEventOutsideOfViewInYDirection_shouldResetAlertState() throws Exception {
-        MotionEvent verticalMotion = MotionEvent.obtain(0, 0, MotionEvent.ACTION_MOVE, 160, 200, 0);
-        subject.sendTouchEvent(verticalMotion);
-
-        MotionEvent actualMotionEvent = Shadows.shadowOf(subject).getOnTouchEventMotionEvent();
-
-        assertThat(actualMotionEvent).isNull();
-        verify(adAlertGestureListener).reset();
-    }
-
-    @Test
-    public void resetAdFlaggingGesture_shouldNotifyAdAlertGestureListenerOfReset() throws Exception {
-        subject.resetAdFlaggingGesture();
-
-        verify(adAlertGestureListener).reset();
-    }
-
-    private MotionEvent createActionMove(float x) {
-        return MotionEvent.obtain(0, 0, MotionEvent.ACTION_MOVE, x, 0, 0);
-    }
-
-    private MotionEvent createMotionEvent(int action) {
-        return MotionEvent.obtain(0, 0, action, 0, 0, 0);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
deleted file mode 100644
index af013817..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
+++ /dev/null
@@ -1,802 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.res.Configuration;
-import android.content.res.Resources;
-import android.graphics.Point;
-import android.location.Location;
-import android.location.LocationManager;
-import android.net.ConnectivityManager;
-import android.net.NetworkInfo;
-import android.net.Uri;
-import android.os.Build;
-import android.provider.Settings;
-import android.telephony.TelephonyManager;
-import android.text.TextUtils;
-import android.util.DisplayMetrics;
-import android.view.Display;
-import android.view.WindowManager;
-
-import com.mopub.common.ClientMetadata;
-import com.mopub.common.GpsHelper;
-import com.mopub.common.GpsHelperTest;
-import com.mopub.common.MoPub;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.Reflection.MethodBuilder;
-import com.mopub.common.util.Utils;
-import com.mopub.common.util.test.support.TestMethodBuilderFactory;
-import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
-import com.mopub.mraid.MraidNativeCommandHandler;
-import com.mopub.network.PlayServicesUrlRewriter;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
-import org.robolectric.Shadows;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowConnectivityManager;
-import org.robolectric.shadows.ShadowLocationManager;
-import org.robolectric.shadows.ShadowNetworkInfo;
-
-import static android.Manifest.permission.ACCESS_COARSE_LOCATION;
-import static android.Manifest.permission.ACCESS_FINE_LOCATION;
-import static android.Manifest.permission.ACCESS_NETWORK_STATE;
-import static android.net.ConnectivityManager.TYPE_DUMMY;
-import static android.net.ConnectivityManager.TYPE_ETHERNET;
-import static android.net.ConnectivityManager.TYPE_MOBILE;
-import static android.net.ConnectivityManager.TYPE_MOBILE_DUN;
-import static android.net.ConnectivityManager.TYPE_MOBILE_HIPRI;
-import static android.net.ConnectivityManager.TYPE_MOBILE_MMS;
-import static android.net.ConnectivityManager.TYPE_MOBILE_SUPL;
-import static android.net.ConnectivityManager.TYPE_WIFI;
-import static android.telephony.TelephonyManager.NETWORK_TYPE_UNKNOWN;
-import static com.mopub.common.ClientMetadata.MoPubNetworkType;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class, shadows = {MoPubShadowTelephonyManager.class})
-public class WebViewAdUrlGeneratorTest {
-
-    private static final String TEST_UDID = "20b013c721c";
-    private static final int TEST_SCREEN_WIDTH = 42;
-    private static final int TEST_SCREEN_HEIGHT = 1337;
-    private static final float TEST_DENSITY = 1.0f;
-
-    private WebViewAdUrlGenerator subject;
-    private String expectedUdid;
-    private Configuration configuration;
-    private MoPubShadowTelephonyManager shadowTelephonyManager;
-    private ShadowConnectivityManager shadowConnectivityManager;
-    private Activity context;
-    private MethodBuilder methodBuilder;
-
-    @Before
-    public void setup() {
-        context = spy(Robolectric.buildActivity(Activity.class).create().get());
-        Shadows.shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
-        Shadows.shadowOf(context).grantPermissions(ACCESS_FINE_LOCATION);
-        Shadows.shadowOf(context).grantPermissions(ACCESS_COARSE_LOCATION);
-
-        // Set the expected screen dimensions to arbitrary numbers
-        final Resources spyResources = spy(context.getResources());
-        final DisplayMetrics mockDisplayMetrics = mock(DisplayMetrics.class);
-        mockDisplayMetrics.widthPixels = TEST_SCREEN_WIDTH;
-        mockDisplayMetrics.heightPixels = TEST_SCREEN_HEIGHT;
-        mockDisplayMetrics.density = TEST_DENSITY;
-        when(spyResources.getDisplayMetrics()).thenReturn(mockDisplayMetrics);
-        when(context.getResources()).thenReturn(spyResources);
-        when(context.getPackageName()).thenReturn("testBundle");
-
-        // Only do this on Android 17+ because getRealSize doesn't exist before then.
-        // This is the default pathway.
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
-            final WindowManager mockWindowManager = mock(WindowManager.class);
-            final Display mockDisplay = mock(Display.class);
-            doAnswer(new Answer() {
-                @Override
-                public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {
-                    final Point point = (Point) invocationOnMock.getArguments()[0];
-                    point.x = TEST_SCREEN_WIDTH;
-                    point.y = TEST_SCREEN_HEIGHT;
-                    return null;
-                }
-            }).when(mockDisplay).getRealSize(any(Point.class));
-            when(mockWindowManager.getDefaultDisplay()).thenReturn(mockDisplay);
-            final Context spyApplicationContext = spy(context.getApplicationContext());
-            when(spyApplicationContext.getSystemService(Context.WINDOW_SERVICE)).thenReturn(mockWindowManager);
-            when(context.getApplicationContext()).thenReturn(spyApplicationContext);
-        }
-
-        subject = new WebViewAdUrlGenerator(context,
-                new MraidNativeCommandHandler().isStorePictureSupported(context));
-        Settings.Secure.putString(RuntimeEnvironment.application.getContentResolver(), Settings.Secure.ANDROID_ID, TEST_UDID);
-        expectedUdid = "sha%3A" + Utils.sha1(TEST_UDID);
-        configuration = RuntimeEnvironment.application.getResources().getConfiguration();
-        shadowTelephonyManager = (MoPubShadowTelephonyManager) Shadows.shadowOf((TelephonyManager) RuntimeEnvironment.application.getSystemService(Context.TELEPHONY_SERVICE));
-        shadowConnectivityManager = Shadows.shadowOf((ConnectivityManager) RuntimeEnvironment.application.getSystemService(Context.CONNECTIVITY_SERVICE));
-        methodBuilder = TestMethodBuilderFactory.getSingletonMock();
-    }
-
-    @After
-    public void tearDown() throws Exception {
-        reset(methodBuilder);
-    }
-
-    @Test
-    public void generateAdUrl_shouldIncludeMinimumFields() throws Exception {
-        String expectedAdUrl = new AdUrlBuilder(expectedUdid).build();
-
-        String adUrl = generateMinimumUrlString();
-
-        assertThat(adUrl).isEqualTo(expectedAdUrl);
-    }
-
-    @Test
-    public void generateAdUrl_withHttpsScheme() throws Exception {
-        String adUrl = generateMinimumUrlString();
-        assertThat(adUrl).startsWith("http://");
-    }
-
-    @Test
-    public void generateAdUrl_shouldRunMultipleTimes() throws Exception {
-        String expectedAdUrl = new AdUrlBuilder(expectedUdid).build();
-
-        String adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(expectedAdUrl);
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(expectedAdUrl);
-    }
-
-    @Test
-    public void generateAdUrl_shouldIncludeAllFields() throws Exception {
-        final String expectedAdUrl = new AdUrlBuilder(expectedUdid)
-                .withAdUnitId("adUnitId")
-                .withQuery("key%3Avalue")
-                .withLatLon("20.1%2C30.0", "1", "101325")
-                .withMcc("123")
-                .withMnc("456")
-                .withCountryIso("expected%20country")
-                .withCarrierName("expected%20carrier")
-                .withExternalStoragePermission(false)
-                .build();
-
-        shadowTelephonyManager.setNetworkOperator("123456");
-        shadowTelephonyManager.setNetworkCountryIso("expected country");
-        shadowTelephonyManager.setNetworkOperatorName("expected carrier");
-
-        Location location = new Location("");
-        location.setLatitude(20.1);
-        location.setLongitude(30.0);
-        location.setAccuracy(1.23f); // should get rounded to "1"
-        location.setTime(System.currentTimeMillis() - 101325);
-
-        String adUrl = subject
-                .withAdUnitId("adUnitId")
-                .withKeywords("key:value")
-                .withLocation(location)
-                .generateUrlString("ads.mopub.com");
-
-        // Only compare the seconds since millis can be off
-        adUrl = adUrl.replaceFirst("llf=101[0-9]{3}", "llf=101325");
-
-        assertThat(adUrl).isEqualTo(expectedAdUrl);
-    }
-
-    @Test
-    public void generateAdUrl_shouldRecognizeOrientation() throws Exception {
-        configuration.orientation = Configuration.ORIENTATION_LANDSCAPE;
-        assertThat(generateMinimumUrlString()).contains("&o=l");
-        configuration.orientation = Configuration.ORIENTATION_PORTRAIT;
-        assertThat(generateMinimumUrlString()).contains("&o=p");
-        configuration.orientation = Configuration.ORIENTATION_SQUARE;
-        assertThat(generateMinimumUrlString()).contains("&o=s");
-    }
-
-    @Test
-    public void generateAdUrl_shouldHandleFunkyNetworkOperatorCodes() throws Exception {
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
-
-        shadowTelephonyManager.setNetworkOperator("123456");
-        String adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withMcc("123").withMnc("456").build());
-
-        ClientMetadata.clearForTesting();
-        shadowTelephonyManager.setNetworkOperator("12345");
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withMcc("123").withMnc("45").build());
-
-        ClientMetadata.clearForTesting();
-        shadowTelephonyManager.setNetworkOperator("1234");
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withMcc("123").withMnc("4").build());
-
-        ClientMetadata.clearForTesting();
-        shadowTelephonyManager.setNetworkOperator("123");
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withMcc("123").withMnc("").build());
-
-        ClientMetadata.clearForTesting();
-        shadowTelephonyManager.setNetworkOperator("12");
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withMcc("12").withMnc("").build());
-    }
-
-    @Test
-    public void generateAdUrl_needsAndDoesNotHaveReadPhoneState_shouldNotContainOperatorName() {
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
-
-        shadowTelephonyManager.setNeedsReadPhoneState(true);
-        shadowTelephonyManager.setReadPhoneStatePermission(false);
-
-        String adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withCarrierName("").build());
-    }
-
-    @Test
-    public void generateAdUrl_needsAndHasReadPhoneState_shouldContainOperatorName() {
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
-
-        shadowTelephonyManager.setNeedsReadPhoneState(true);
-        shadowTelephonyManager.setReadPhoneStatePermission(true);
-        shadowTelephonyManager.setNetworkOperatorName("TEST_NAME");
-
-        String adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withCarrierName("TEST_NAME").build());
-    }
-
-    @Test
-    public void generateAdUrl_doesNotNeedReadPhoneState_shouldContainOperatorName() {
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
-
-        shadowTelephonyManager.setNeedsReadPhoneState(false);
-        shadowTelephonyManager.setReadPhoneStatePermission(false);
-        shadowTelephonyManager.setNetworkOperatorName("TEST_NAME");
-
-        String adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withCarrierName("TEST_NAME").build());
-    }
-
-    @Test
-    public void generateAdurl_whenOnCDMA_shouldGetOwnerStringFromSimCard() throws Exception {
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
-        shadowTelephonyManager.setPhoneType(TelephonyManager.PHONE_TYPE_CDMA);
-        shadowTelephonyManager.setSimState(TelephonyManager.SIM_STATE_READY);
-        shadowTelephonyManager.setNetworkOperator("123456");
-        shadowTelephonyManager.setSimOperator("789012");
-        String adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withMcc("789").withMnc("012").build());
-    }
-
-    @Test
-    public void generateAdurl_whenSimNotReady_shouldDefaultToNetworkOperator() throws Exception {
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
-        shadowTelephonyManager.setPhoneType(TelephonyManager.PHONE_TYPE_CDMA);
-        shadowTelephonyManager.setSimState(TelephonyManager.SIM_STATE_ABSENT);
-        shadowTelephonyManager.setNetworkOperator("123456");
-        shadowTelephonyManager.setSimOperator("789012");
-        String adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withMcc("123").withMnc("456").build());
-    }
-
-    @Test
-    public void generateAdUrl_shouldSetNetworkType() throws Exception {
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
-        String adUrl;
-
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_DUMMY));
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.UNKNOWN).build());
-
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_ETHERNET));
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.ETHERNET).build());
-
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_WIFI));
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.WIFI).build());
-
-        // bunch of random mobile types just to make life more interesting
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_MOBILE));
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.MOBILE).build());
-
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_MOBILE_DUN));
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.MOBILE).build());
-
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_MOBILE_HIPRI));
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.MOBILE).build());
-
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_MOBILE_MMS));
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.MOBILE).build());
-
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_MOBILE_SUPL));
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.MOBILE).build());
-    }
-
-    @Test
-    public void generateAdUrl_whenNoNetworkPermission_shouldGenerateUnknownNetworkType() throws Exception {
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
-
-        Shadows.shadowOf(context).denyPermissions(ACCESS_NETWORK_STATE);
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_MOBILE));
-
-        String adUrl = generateMinimumUrlString();
-
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.UNKNOWN).build());
-    }
-
-    @Test
-    public void generateAdUrl_shouldTolerateNullActiveNetwork() throws Exception {
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdid);
-        shadowConnectivityManager.setActiveNetworkInfo(null);
-
-        String adUrl = generateMinimumUrlString();
-
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.UNKNOWN).build());
-    }
-
-
-
-    @Test
-    public void generateAdUrl_whenGooglePlayServicesIsLinkedAndAdInfoIsCached_shouldUseAdInfoParams() throws Exception {
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.setStatic(any(Class.class))).thenReturn(methodBuilder);
-        when(methodBuilder.addParam(any(Class.class), any())).thenReturn(methodBuilder);
-        when(methodBuilder.execute()).thenReturn(GpsHelper.GOOGLE_PLAY_SUCCESS_CODE);
-
-        GpsHelperTest.TestAdInfo adInfo = new GpsHelperTest.TestAdInfo();
-        final ClientMetadata clientMetadata = ClientMetadata.getInstance(context);
-        clientMetadata.setAdvertisingInfo(adInfo.mAdId, adInfo.mLimitAdTrackingEnabled);
-
-        expectedUdid = "ifa%3A" + adInfo.ADVERTISING_ID;
-        String expectedAdUrl = new AdUrlBuilder(expectedUdid)
-                .withDnt(adInfo.LIMIT_AD_TRACKING_ENABLED)
-                .build();
-        assertThat(generateMinimumUrlString()).isEqualTo(expectedAdUrl);
-    }
-
-    @Test
-    public void generateAdUrl_whenLocationServiceGpsProviderHasMostRecentLocation_shouldUseLocationServiceValue() {
-        Location locationFromDeveloper = new Location("");
-        locationFromDeveloper.setLatitude(42);
-        locationFromDeveloper.setLongitude(-42);
-        locationFromDeveloper.setAccuracy(3.5f);
-        locationFromDeveloper.setTime(1000);
-
-        // Mock out the LocationManager's last known location to be more recent than the
-        // developer-supplied location.
-        ShadowLocationManager shadowLocationManager = Shadows.shadowOf(
-                (LocationManager) RuntimeEnvironment.application.getSystemService(Context.LOCATION_SERVICE));
-        Location locationFromSdk = new Location("");
-        locationFromSdk.setLatitude(37);
-        locationFromSdk.setLongitude(-122);
-        locationFromSdk.setAccuracy(5.0f);
-        locationFromSdk.setTime(2000);
-        shadowLocationManager.setLastKnownLocation(LocationManager.GPS_PROVIDER, locationFromSdk);
-
-        String adUrl = subject.withLocation(locationFromDeveloper)
-                .generateUrlString("ads.mopub.com");
-        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isEqualTo("37.0,-122.0");
-        assertThat(getParameterFromRequestUrl(adUrl, "lla")).isEqualTo("5");
-        assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEqualTo("1");
-    }
-
-    @Test
-    public void generateAdUrl_whenLocationServiceGpsProviderHasMostRecentLocation_WithFineLocationPermissionOnly_shouldUseLocationServiceValue() {
-        Shadows.shadowOf(context).denyPermissions(ACCESS_COARSE_LOCATION);
-
-        Location locationFromDeveloper = new Location("");
-        locationFromDeveloper.setLatitude(42);
-        locationFromDeveloper.setLongitude(-42);
-        locationFromDeveloper.setAccuracy(3.5f);
-        locationFromDeveloper.setTime(1000);
-
-        // Mock out the LocationManager's last known location to be more recent than the
-        // developer-supplied location.
-        ShadowLocationManager shadowLocationManager = Shadows.shadowOf(
-                (LocationManager) RuntimeEnvironment.application.getSystemService(Context.LOCATION_SERVICE));
-        Location locationFromSdk = new Location("");
-        locationFromSdk.setLatitude(37);
-        locationFromSdk.setLongitude(-122);
-        locationFromSdk.setAccuracy(5.0f);
-        locationFromSdk.setTime(2000);
-        shadowLocationManager.setLastKnownLocation(LocationManager.GPS_PROVIDER, locationFromSdk);
-
-        String adUrl = subject.withLocation(locationFromDeveloper)
-                .generateUrlString("ads.mopub.com");
-        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isEqualTo("37.0,-122.0");
-        assertThat(getParameterFromRequestUrl(adUrl, "lla")).isEqualTo("5");
-        assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEqualTo("1");
-    }
-
-    @Test
-    public void generateAdUrl_whenLocationServiceGpsProviderHasMostRecentLocation_WithCoarseLocationPermissionOnly_shouldUseDeveloperSuppliedLocation() {
-        Shadows.shadowOf(context).denyPermissions(ACCESS_FINE_LOCATION);
-
-        Location locationFromDeveloper = new Location("");
-        locationFromDeveloper.setLatitude(42);
-        locationFromDeveloper.setLongitude(-42);
-        locationFromDeveloper.setAccuracy(3.5f);
-        locationFromDeveloper.setTime(1000);
-
-        // Mock out the LocationManager's last known location to be more recent than the
-        // developer-supplied location.
-        ShadowLocationManager shadowLocationManager = Shadows.shadowOf(
-                (LocationManager) RuntimeEnvironment.application.getSystemService(Context.LOCATION_SERVICE));
-        Location locationFromSdk = new Location("");
-        locationFromSdk.setLatitude(37);
-        locationFromSdk.setLongitude(-122);
-        locationFromSdk.setAccuracy(5.0f);
-        locationFromSdk.setTime(2000);
-        shadowLocationManager.setLastKnownLocation(LocationManager.GPS_PROVIDER, locationFromSdk);
-
-        String adUrl = subject.withLocation(locationFromDeveloper)
-                .generateUrlString("ads.mopub.com");
-        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isEqualTo("42.0,-42.0");
-        assertThat(getParameterFromRequestUrl(adUrl, "lla")).isEqualTo("3");
-        assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEmpty();
-    }
-
-    @Test
-    public void generateAdUrl_whenLocationServiceGpsProviderHasMostRecentLocation_WithNoLocationPermission_shouldUseDeveloperSuppliedLocation() {
-        Shadows.shadowOf(context).denyPermissions(ACCESS_FINE_LOCATION);
-        Shadows.shadowOf(context).denyPermissions(ACCESS_COARSE_LOCATION);
-
-        Location locationFromDeveloper = new Location("");
-        locationFromDeveloper.setLatitude(42);
-        locationFromDeveloper.setLongitude(-42);
-        locationFromDeveloper.setAccuracy(3.5f);
-        locationFromDeveloper.setTime(1000);
-
-        // Mock out the LocationManager's last known location to be more recent than the
-        // developer-supplied location.
-        ShadowLocationManager shadowLocationManager = Shadows.shadowOf(
-                (LocationManager) RuntimeEnvironment.application.getSystemService(Context.LOCATION_SERVICE));
-        Location locationFromSdk = new Location("");
-        locationFromSdk.setLatitude(37);
-        locationFromSdk.setLongitude(-122);
-        locationFromSdk.setAccuracy(5.0f);
-        locationFromSdk.setTime(2000);
-        shadowLocationManager.setLastKnownLocation(LocationManager.GPS_PROVIDER, locationFromSdk);
-
-        String adUrl = subject.withLocation(locationFromDeveloper)
-                .generateUrlString("ads.mopub.com");
-        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isEqualTo("42.0,-42.0");
-        assertThat(getParameterFromRequestUrl(adUrl, "lla")).isEqualTo("3");
-        assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEmpty();
-    }
-
-    @Test
-    public void generateAdUrl_whenDeveloperSuppliesMoreRecentLocationThanLocationService_shouldUseDeveloperSuppliedLocation() {
-        Location locationFromDeveloper = new Location("");
-        locationFromDeveloper.setLatitude(42);
-        locationFromDeveloper.setLongitude(-42);
-        locationFromDeveloper.setAccuracy(3.5f);
-        locationFromDeveloper.setTime(1000);
-
-        ShadowLocationManager shadowLocationManager = Shadows.shadowOf(
-                (LocationManager) RuntimeEnvironment.application.getSystemService(Context.LOCATION_SERVICE));
-
-        // Mock out the LocationManager's last known location to be older than the
-        // developer-supplied location.
-        Location olderLocation = new Location("");
-        olderLocation.setLatitude(40);
-        olderLocation.setLongitude(-105);
-        olderLocation.setAccuracy(8.0f);
-        olderLocation.setTime(500);
-        shadowLocationManager.setLastKnownLocation(LocationManager.GPS_PROVIDER, olderLocation);
-
-        String adUrl = subject.withLocation(locationFromDeveloper)
-                .generateUrlString("ads.mopub.com");
-        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isEqualTo("42.0,-42.0");
-        assertThat(getParameterFromRequestUrl(adUrl, "lla")).isEqualTo("3");
-        assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEmpty();
-    }
-
-    @Test
-    public void generateAdUrl_whenLocationServiceNetworkProviderHasMostRecentLocation_shouldUseLocationServiceValue() {
-        Location locationFromDeveloper = new Location("");
-        locationFromDeveloper.setLatitude(42);
-        locationFromDeveloper.setLongitude(-42);
-        locationFromDeveloper.setAccuracy(3.5f);
-        locationFromDeveloper.setTime(1000);
-
-        // Mock out the LocationManager's last known location to be more recent than the
-        // developer-supplied location.
-        ShadowLocationManager shadowLocationManager = Shadows.shadowOf(
-                (LocationManager) RuntimeEnvironment.application.getSystemService(Context.LOCATION_SERVICE));
-        Location locationFromSdk = new Location("");
-        locationFromSdk.setLatitude(38);
-        locationFromSdk.setLongitude(-123);
-        locationFromSdk.setAccuracy(5.0f);
-        locationFromSdk.setTime(2000);
-        shadowLocationManager.setLastKnownLocation(LocationManager.NETWORK_PROVIDER,
-                locationFromSdk);
-
-        String adUrl = subject.withLocation(locationFromDeveloper)
-                .generateUrlString("ads.mopub.com");
-        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isEqualTo("38.0,-123.0");
-        assertThat(getParameterFromRequestUrl(adUrl, "lla")).isEqualTo("5");
-        assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEqualTo("1");
-    }
-
-    @Test
-    public void generateAdUrl_whenLocationServiceNetworkProviderHasMostRecentLocation_WithFineLocationPermissionOnly_shouldUseLocationServiceValue() {
-        Shadows.shadowOf(context).denyPermissions(ACCESS_COARSE_LOCATION);
-
-        Location locationFromDeveloper = new Location("");
-        locationFromDeveloper.setLatitude(42);
-        locationFromDeveloper.setLongitude(-42);
-        locationFromDeveloper.setAccuracy(3.5f);
-        locationFromDeveloper.setTime(1000);
-
-        // Mock out the LocationManager's last known location to be more recent than the
-        // developer-supplied location.
-        ShadowLocationManager shadowLocationManager = Shadows.shadowOf(
-                (LocationManager) RuntimeEnvironment.application.getSystemService(Context.LOCATION_SERVICE));
-        Location locationFromSdk = new Location("");
-        locationFromSdk.setLatitude(38);
-        locationFromSdk.setLongitude(-123);
-        locationFromSdk.setAccuracy(5.0f);
-        locationFromSdk.setTime(2000);
-        shadowLocationManager.setLastKnownLocation(LocationManager.NETWORK_PROVIDER,
-                locationFromSdk);
-
-        String adUrl = subject.withLocation(locationFromDeveloper)
-                .generateUrlString("ads.mopub.com");
-        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isEqualTo("38.0,-123.0");
-        assertThat(getParameterFromRequestUrl(adUrl, "lla")).isEqualTo("5");
-        assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEqualTo("1");
-    }
-
-    @Test
-    public void generateAdUrl_whenLocationServiceNetworkProviderHasMostRecentLocation_WithCoarseLocationPermissionOnly_shouldUseLocationServiceValue() {
-        Shadows.shadowOf(context).denyPermissions(ACCESS_FINE_LOCATION);
-
-        Location locationFromDeveloper = new Location("");
-        locationFromDeveloper.setLatitude(42);
-        locationFromDeveloper.setLongitude(-42);
-        locationFromDeveloper.setAccuracy(3.5f);
-        locationFromDeveloper.setTime(1000);
-
-        // Mock out the LocationManager's last known location to be more recent than the
-        // developer-supplied location.
-        ShadowLocationManager shadowLocationManager = Shadows.shadowOf(
-                (LocationManager) RuntimeEnvironment.application.getSystemService(Context.LOCATION_SERVICE));
-        Location locationFromSdk = new Location("");
-        locationFromSdk.setLatitude(38);
-        locationFromSdk.setLongitude(-123);
-        locationFromSdk.setAccuracy(5.0f);
-        locationFromSdk.setTime(2000);
-        shadowLocationManager.setLastKnownLocation(LocationManager.NETWORK_PROVIDER,
-                locationFromSdk);
-
-        String adUrl = subject.withLocation(locationFromDeveloper)
-                .generateUrlString("ads.mopub.com");
-        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isEqualTo("38.0,-123.0");
-        assertThat(getParameterFromRequestUrl(adUrl, "lla")).isEqualTo("5");
-        assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEqualTo("1");
-    }
-
-    @Test
-    public void generateAdUrl_whenLocationServiceNetworkProviderHasMostRecentLocation_WithNoLocationPermission_shouldUseDeveloperSuppliedLocation() {
-        Shadows.shadowOf(context).denyPermissions(ACCESS_FINE_LOCATION);
-        Shadows.shadowOf(context).denyPermissions(ACCESS_COARSE_LOCATION);
-
-        Location locationFromDeveloper = new Location("");
-        locationFromDeveloper.setLatitude(42);
-        locationFromDeveloper.setLongitude(-42);
-        locationFromDeveloper.setAccuracy(3.5f);
-        locationFromDeveloper.setTime(1000);
-
-        // Mock out the LocationManager's last known location to be more recent than the
-        // developer-supplied location.
-        ShadowLocationManager shadowLocationManager = Shadows.shadowOf(
-                (LocationManager) RuntimeEnvironment.application.getSystemService(Context.LOCATION_SERVICE));
-        Location locationFromSdk = new Location("");
-        locationFromSdk.setLatitude(38);
-        locationFromSdk.setLongitude(-123);
-        locationFromSdk.setAccuracy(5.0f);
-        locationFromSdk.setTime(2000);
-        shadowLocationManager.setLastKnownLocation(LocationManager.NETWORK_PROVIDER,
-                locationFromSdk);
-
-        String adUrl = subject.withLocation(locationFromDeveloper)
-                .generateUrlString("ads.mopub.com");
-        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isEqualTo("42.0,-42.0");
-        assertThat(getParameterFromRequestUrl(adUrl, "lla")).isEqualTo("3");
-        assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEmpty();
-    }
-
-    @Test
-    public void generateAdUrl_withNullPackageName_withEmptyPackageName_shouldNotIncludeBundleKey() {
-        when(context.getPackageName()).thenReturn(null).thenReturn("");
-
-        final String adUrlNullPackageName = generateMinimumUrlString();
-        final String adUrlEmptyPackageName = generateMinimumUrlString();
-
-        assertThat(adUrlNullPackageName).doesNotContain("&bundle=");
-        assertThat(adUrlEmptyPackageName).doesNotContain("&bundle=");
-    }
-
-    @Test
-    public void enableLocationTracking_shouldIncludeLocationInUrl() {
-        MoPub.setLocationAwareness(MoPub.LocationAwareness.NORMAL);
-        String adUrl = generateMinimumUrlString();
-        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isNotNull();
-    }
-
-    @Test
-    public void disableLocationCollection_shouldNotIncludeLocationInUrl() {
-        MoPub.setLocationAwareness(MoPub.LocationAwareness.DISABLED);
-        String adUrl = generateMinimumUrlString();
-        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isNullOrEmpty();
-    }
-
-    @Test
-    public void disableLocationCollection_whenLocationServiceHasMostRecentLocation_shouldNotIncludeLocationInUrl() {
-        MoPub.setLocationAwareness(MoPub.LocationAwareness.DISABLED);
-
-        // Mock out the LocationManager's last known location.
-        ShadowLocationManager shadowLocationManager = Shadows.shadowOf(
-                (LocationManager) RuntimeEnvironment.application.getSystemService(Context.LOCATION_SERVICE));
-        Location locationFromSdk = new Location("");
-        locationFromSdk.setLatitude(37);
-        locationFromSdk.setLongitude(-122);
-        locationFromSdk.setAccuracy(5.0f);
-        locationFromSdk.setTime(2000);
-        shadowLocationManager.setLastKnownLocation(LocationManager.GPS_PROVIDER, locationFromSdk);
-
-        String adUrl = generateMinimumUrlString();
-        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isNullOrEmpty();
-    }
-
-    private String getParameterFromRequestUrl(String requestString, String key) {
-        Uri requestUri = Uri.parse(requestString);
-        String parameter = requestUri.getQueryParameter(key);
-
-        if (TextUtils.isEmpty(parameter)) {
-            return "";
-        }
-
-        return parameter;
-    }
-
-    private NetworkInfo createNetworkInfo(int type) {
-        return ShadowNetworkInfo.newInstance(null,
-                type,
-                NETWORK_TYPE_UNKNOWN, true, true);
-    }
-
-    private String generateMinimumUrlString() {
-        return subject.generateUrlString("ads.mopub.com");
-    }
-
-    private static class AdUrlBuilder {
-        private String expectedUdid;
-        private String adUnitId = "";
-        private String query = "";
-        private String latLon = "";
-        private String locationAccuracy = "";
-        private String latLonLastUpdated = "";
-        private String mnc = "";
-        private String mcc = "";
-        private String countryIso = "";
-        private String carrierName = "";
-        private String dnt = "";
-        private MoPubNetworkType networkType = MoPubNetworkType.MOBILE;
-        private int externalStoragePermission;
-
-        public AdUrlBuilder(String expectedUdid) {
-            this.expectedUdid = expectedUdid;
-        }
-
-        public String build() {
-            return "http://ads.mopub.com/m/ad" +
-                    "?v=6" +
-                    paramIfNotEmpty("id", adUnitId) +
-                    "&nv=" + Uri.encode(MoPub.SDK_VERSION) +
-                    "&dn=" + Build.MANUFACTURER +
-                    "%2C" + Build.MODEL +
-                    "%2C" + Build.PRODUCT +
-                    "&bundle=" + "testBundle" +
-                    paramIfNotEmpty("q", query) +
-                    (TextUtils.isEmpty(latLon) ? "" :
-                            "&ll=" + latLon + "&lla=" + locationAccuracy + "&llf=" + latLonLastUpdated) +
-                    "&z=-0700" +
-                    "&o=u" +
-                    "&w=" + TEST_SCREEN_WIDTH +
-                    "&h=" + TEST_SCREEN_HEIGHT +
-                    "&sc_a=1.0" +
-                    paramIfNotEmpty("mcc", mcc) +
-                    paramIfNotEmpty("mnc", mnc) +
-                    paramIfNotEmpty("iso", countryIso) +
-                    paramIfNotEmpty("cn", carrierName) +
-                    "&ct=" + networkType +
-                    "&av=" + BuildConfig.VERSION_NAME +
-                    "&udid=" + PlayServicesUrlRewriter.UDID_TEMPLATE +
-                    "&dnt=" + PlayServicesUrlRewriter.DO_NOT_TRACK_TEMPLATE +
-                    "&mr=1" +
-                    "&android_perms_ext_storage=" + externalStoragePermission;
-        }
-
-        public AdUrlBuilder withAdUnitId(String adUnitId) {
-            this.adUnitId = adUnitId;
-            return this;
-        }
-
-        public AdUrlBuilder withQuery(String query) {
-            this.query = query;
-            return this;
-        }
-
-        public AdUrlBuilder withLatLon(String latLon, String locationAccuracy,
-                String latLonLastUpdated) {
-            this.latLon = latLon;
-            this.locationAccuracy = locationAccuracy;
-            this.latLonLastUpdated = latLonLastUpdated;
-            return this;
-        }
-
-        public AdUrlBuilder withMcc(String mcc) {
-            this.mcc = mcc;
-            return this;
-        }
-
-        public AdUrlBuilder withMnc(String mnc) {
-            this.mnc = mnc;
-            return this;
-        }
-
-        public AdUrlBuilder withCountryIso(String countryIso) {
-            this.countryIso = countryIso;
-            return this;
-        }
-
-        public AdUrlBuilder withCarrierName(String carrierName) {
-            this.carrierName = carrierName;
-            return this;
-        }
-
-        public AdUrlBuilder withNetworkType(MoPubNetworkType networkType) {
-            this.networkType = networkType;
-            return this;
-        }
-
-        public AdUrlBuilder withExternalStoragePermission(boolean enabled) {
-            this.externalStoragePermission = enabled ? 1 : 0;
-            return this;
-        }
-
-        public AdUrlBuilder withDnt(boolean dnt) {
-            if (dnt) {
-                this.dnt = "1";
-            }
-            return this;
-        }
-
-        private String paramIfNotEmpty(String key, String value) {
-            if (TextUtils.isEmpty(value)) {
-                return "";
-            } else {
-                return "&" + key + "=" + value;
-            }
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventBannerFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventBannerFactoryTest.java
deleted file mode 100644
index 388ae73f..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventBannerFactoryTest.java
+++ /dev/null
@@ -1,38 +0,0 @@
-package com.mopub.mobileads.factories;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.AdTypeTranslator;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.mobileads.CustomEventBanner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.HTML_BANNER;
-import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.MRAID_BANNER;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class CustomEventBannerFactoryTest {
-
-    private CustomEventBannerFactory subject;
-
-    @Before
-    public void setup() {
-        subject = new CustomEventBannerFactory();
-    }
-
-    @Test
-    public void create_shouldCreateBanners() throws Exception {
-        assertCustomEventClassCreated(MRAID_BANNER);
-        assertCustomEventClassCreated(HTML_BANNER);
-    }
-
-    private void assertCustomEventClassCreated(AdTypeTranslator.CustomEventType customEventType) throws Exception {
-        CustomEventBanner customEventBanner = subject.internalCreate(customEventType.toString());
-        assertThat(customEventBanner.getClass().getName()).isEqualTo(customEventType.toString());
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventInterstitialFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventInterstitialFactoryTest.java
deleted file mode 100644
index 86ca874d..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventInterstitialFactoryTest.java
+++ /dev/null
@@ -1,38 +0,0 @@
-package com.mopub.mobileads.factories;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.AdTypeTranslator;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.mobileads.CustomEventInterstitial;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.HTML_INTERSTITIAL;
-import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.MRAID_INTERSTITIAL;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class CustomEventInterstitialFactoryTest {
-
-    private CustomEventInterstitialFactory subject;
-
-    @Before
-    public void setup() {
-        subject = new CustomEventInterstitialFactory();
-    }
-
-    @Test
-    public void create_shouldCreateInterstitials() throws Exception {
-        assertCustomEventClassCreated(MRAID_INTERSTITIAL);
-        assertCustomEventClassCreated(HTML_INTERSTITIAL);
-    }
-
-    private void assertCustomEventClassCreated(AdTypeTranslator.CustomEventType customEventType) throws Exception {
-        CustomEventInterstitial customEventInterstitial = subject.internalCreate(customEventType.toString());
-        assertThat(customEventInterstitial.getClass().getName()).isEqualTo(customEventType.toString());
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/FileUtils.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/FileUtils.java
deleted file mode 100644
index ddaab4e5..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/FileUtils.java
+++ /dev/null
@@ -1,17 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import com.mopub.common.util.Streams;
-
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-
-// note: keep this in test/support folder. this is not intended to be of Utility usage
-public class FileUtils {
-    public static void copyFile(String sourceFile, String destinationFile) {
-        try {
-            Streams.copyContent(new FileInputStream(sourceFile), new FileOutputStream(destinationFile));
-        } catch (Exception e) {
-            throw new RuntimeException(e);
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/GestureUtils.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/GestureUtils.java
deleted file mode 100644
index eeee2c93..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/GestureUtils.java
+++ /dev/null
@@ -1,17 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import android.view.MotionEvent;
-
-public class GestureUtils {
-    public static MotionEvent createActionMove(float x, float y) {
-        return MotionEvent.obtain(0, 0, MotionEvent.ACTION_MOVE, x, y, 0);
-    }
-
-    public static MotionEvent createActionDown(float x, float y) {
-        return MotionEvent.obtain(0, 0, MotionEvent.ACTION_DOWN, x, y, 0);
-    }
-
-    public static MotionEvent createActionUp(float x, float y) {
-        return MotionEvent.obtain(0, 0, MotionEvent.ACTION_UP, x, y, 0);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/JsonUtils.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/JsonUtils.java
deleted file mode 100644
index dae3c5f6..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/JsonUtils.java
+++ /dev/null
@@ -1,40 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import com.mopub.common.util.Json;
-
-import java.util.Collections;
-import java.util.Map;
-import java.util.Set;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.fail;
-
-public class JsonUtils {
-    // Assert that two shallow jsonStrings representing <String,String> maps are equal
-    public static void assertJsonStringMapsEqual(String a, String b) {
-        Map<String, String> mapA = Collections.emptyMap();
-        Map<String, String> mapB = Collections.emptyMap();
-
-        try {
-            mapA = Json.jsonStringToMap(a);
-        } catch (Exception e) {
-            fail("Unable to turn json into map: " + a);
-        }
-
-        try {
-            mapB = Json.jsonStringToMap(b);
-        } catch (Exception e) {
-            fail("Unable to turn json into map: " + b);
-        }
-
-        assertThat(mapA.size()).isEqualTo(mapB.size());
-
-        Set<String> keysA = mapA.keySet();
-        Set<String> keysB = mapB.keySet();
-        assertThat(keysA).isEqualTo(keysB);
-
-        for (final String key : keysA) {
-            assertThat(mapA.get(key)).isEqualTo(mapB.get(key));
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/MoPubShadowTelephonyManager.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/MoPubShadowTelephonyManager.java
deleted file mode 100644
index 7a4256e5..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/MoPubShadowTelephonyManager.java
+++ /dev/null
@@ -1,41 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import android.telephony.TelephonyManager;
-
-import org.robolectric.annotation.Implements;
-import org.robolectric.shadows.ShadowTelephonyManager;
-
-@Implements(TelephonyManager.class)
-public class MoPubShadowTelephonyManager extends ShadowTelephonyManager {
-
-    private boolean mNeedsReadPhoneState;
-    private boolean mHasReadPhoneState;
-
-    public MoPubShadowTelephonyManager() {
-        mNeedsReadPhoneState = false;
-        mHasReadPhoneState = false;
-    }
-
-    /**
-     * Some Lenovo & other phones require READ_PHONE_STATE on getNetworkOperatorName().
-     */
-    public void setNeedsReadPhoneState(boolean needsReadPhoneState) {
-        mNeedsReadPhoneState = needsReadPhoneState;
-    }
-
-    @Override
-    public void setReadPhoneStatePermission(final boolean readPhoneStatePermission) {
-        // Robolectric hides its checkReadPhoneState method so we need to hack our own.
-        mHasReadPhoneState = readPhoneStatePermission;
-        super.setReadPhoneStatePermission(readPhoneStatePermission);
-    }
-
-    @Override
-    public String getNetworkOperatorName() {
-        if (!mNeedsReadPhoneState || mHasReadPhoneState) {
-            return super.getNetworkOperatorName();
-        } else {
-            throw new SecurityException("READ_PHONE_STATE is required.");
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ShadowVastVideoView.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ShadowVastVideoView.java
deleted file mode 100644
index b66c9708..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ShadowVastVideoView.java
+++ /dev/null
@@ -1,10 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import com.mopub.mobileads.VastVideoView;
-
-import org.robolectric.annotation.Implements;
-import org.robolectric.shadows.ShadowVideoView;
-
-@Implements(VastVideoView.class)
-public class ShadowVastVideoView extends ShadowVideoView {
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdViewControllerFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdViewControllerFactory.java
deleted file mode 100644
index 6ca5f842..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdViewControllerFactory.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import android.content.Context;
-
-import com.mopub.mobileads.AdViewController;
-import com.mopub.mobileads.MoPubView;
-import com.mopub.mobileads.factories.AdViewControllerFactory;
-
-import static org.mockito.Mockito.mock;
-
-public class TestAdViewControllerFactory extends AdViewControllerFactory {
-    private AdViewController mockAdViewController = mock(AdViewController.class);
-
-    public static AdViewController getSingletonMock() {
-        return getTestFactory().mockAdViewController;
-    }
-
-    private static TestAdViewControllerFactory getTestFactory() {
-        return ((TestAdViewControllerFactory) instance);
-    }
-
-    @Override
-    protected AdViewController internalCreate(Context context, MoPubView moPubView) {
-        return mockAdViewController;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerAdapterFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerAdapterFactory.java
deleted file mode 100644
index b6301488..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerAdapterFactory.java
+++ /dev/null
@@ -1,51 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import android.support.annotation.NonNull;
-
-import com.mopub.common.AdReport;
-import com.mopub.mobileads.CustomEventBannerAdapter;
-import com.mopub.mobileads.MoPubView;
-import com.mopub.mobileads.factories.CustomEventBannerAdapterFactory;
-
-import java.util.Map;
-
-import static org.mockito.Mockito.mock;
-
-public class TestCustomEventBannerAdapterFactory extends CustomEventBannerAdapterFactory {
-    private CustomEventBannerAdapter mockCustomEventBannerAdapter = mock(CustomEventBannerAdapter.class);
-    private MoPubView moPubView;
-    private String className;
-    private Map<String, String> classData;
-
-    public static CustomEventBannerAdapter getSingletonMock() {
-        return getTestFactory().mockCustomEventBannerAdapter;
-    }
-
-    private static TestCustomEventBannerAdapterFactory getTestFactory() {
-        return ((TestCustomEventBannerAdapterFactory) instance);
-    }
-
-    @Override
-    protected CustomEventBannerAdapter internalCreate(@NonNull final MoPubView moPubView,
-            @NonNull final String className,
-            @NonNull final Map<String, String> serverExtras,
-            final long broadcastIdentifier,
-            @NonNull final AdReport adReport) {
-        this.moPubView = moPubView;
-        this.className = className;
-        this.classData = serverExtras;
-        return mockCustomEventBannerAdapter;
-    }
-
-    public static MoPubView getLatestMoPubView() {
-        return getTestFactory().moPubView;
-    }
-
-    public static String getLatestClassName() {
-        return getTestFactory().className;
-    }
-
-    public static Map<String, String> getLatestClassData() {
-        return getTestFactory().classData;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerFactory.java
deleted file mode 100644
index ec88b419..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerFactory.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import com.mopub.mobileads.CustomEventBanner;
-import com.mopub.mobileads.factories.CustomEventBannerFactory;
-
-import static org.mockito.Mockito.mock;
-
-public class TestCustomEventBannerFactory extends CustomEventBannerFactory{
-    private CustomEventBanner instance = mock(CustomEventBanner.class);
-
-    @Override
-    protected CustomEventBanner internalCreate(String className) {
-        return instance;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialAdapterFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialAdapterFactory.java
deleted file mode 100644
index a392ad53..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialAdapterFactory.java
+++ /dev/null
@@ -1,45 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import com.mopub.common.AdReport;
-import com.mopub.mobileads.CustomEventInterstitialAdapter;
-import com.mopub.mobileads.MoPubInterstitial;
-import com.mopub.mobileads.factories.CustomEventInterstitialAdapterFactory;
-
-import java.util.Map;
-
-import static org.mockito.Mockito.mock;
-
-public class TestCustomEventInterstitialAdapterFactory extends CustomEventInterstitialAdapterFactory{
-    private CustomEventInterstitialAdapter mockCustomEventInterstitalAdapter = mock(CustomEventInterstitialAdapter.class);
-    private MoPubInterstitial latestMoPubInterstitial;
-    private String latestClassName;
-    private Map<String, String> latestClassData;
-
-    public static CustomEventInterstitialAdapter getSingletonMock() {
-        return getTestFactory().mockCustomEventInterstitalAdapter;
-    }
-
-    private static TestCustomEventInterstitialAdapterFactory getTestFactory() {
-        return ((TestCustomEventInterstitialAdapterFactory)instance);
-    }
-
-    public static MoPubInterstitial getLatestMoPubInterstitial() {
-        return getTestFactory().latestMoPubInterstitial;
-    }
-
-    public static String getLatestClassName() {
-        return getTestFactory().latestClassName;
-    }
-
-    public static Map<String, String> getLatestServerExtras() {
-        return getTestFactory().latestClassData;
-    }
-
-    @Override
-    protected CustomEventInterstitialAdapter internalCreate(MoPubInterstitial moPubInterstitial, String className, Map<String, String> serverExtras, long broadcastIdentifier, AdReport adReport) {
-        latestMoPubInterstitial = moPubInterstitial;
-        latestClassName = className;
-        latestClassData = serverExtras;
-        return mockCustomEventInterstitalAdapter;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialFactory.java
deleted file mode 100644
index 2ca47147..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialFactory.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import com.mopub.mobileads.CustomEventInterstitial;
-import com.mopub.mobileads.factories.CustomEventInterstitialFactory;
-
-import static org.mockito.Mockito.mock;
-
-public class TestCustomEventInterstitialFactory extends CustomEventInterstitialFactory {
-    private CustomEventInterstitial instance = mock(CustomEventInterstitial.class);
-
-    @Override
-    protected CustomEventInterstitial internalCreate(String className) {
-        return instance;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlBannerWebViewFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlBannerWebViewFactory.java
deleted file mode 100644
index 84c91fc5..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlBannerWebViewFactory.java
+++ /dev/null
@@ -1,71 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import android.content.Context;
-import android.webkit.WebSettings;
-
-import com.mopub.common.AdReport;
-import com.mopub.mobileads.HtmlBannerWebView;
-import com.mopub.mobileads.factories.HtmlBannerWebViewFactory;
-
-import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
-
-public class TestHtmlBannerWebViewFactory extends HtmlBannerWebViewFactory {
-    private HtmlBannerWebView mockHtmlBannerWebView = mock(HtmlBannerWebView.class);
-    private CustomEventBannerListener latestListener;
-    private boolean latestIsScrollable;
-    private String latestRedirectUrl;
-    private String latestClickthroughUrl;
-    private AdReport latestAdReport;
-
-    public TestHtmlBannerWebViewFactory() {
-        WebSettings webSettings = mock(WebSettings.class);
-        stub(mockHtmlBannerWebView.getSettings()).toReturn(webSettings);
-        stub(webSettings.getUserAgentString()).toReturn("Mozilla/5.0 (Linux; U; Android 4.0.3; ko-kr; LG-L160L Build/IML74K) AppleWebkit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30");
-    }
-
-    public static HtmlBannerWebView getSingletonMock() {
-        return getTestFactory().mockHtmlBannerWebView;
-    }
-
-    private static TestHtmlBannerWebViewFactory getTestFactory() {
-        return (TestHtmlBannerWebViewFactory) instance;
-    }
-
-    @Override
-    public HtmlBannerWebView internalCreate(
-            Context context,
-            AdReport adReport,
-            CustomEventBannerListener customEventBannerListener,
-            boolean isScrollable,
-            String redirectUrl,
-            String clickthroughUrl) {
-        latestListener = customEventBannerListener;
-        latestIsScrollable = isScrollable;
-        latestRedirectUrl = redirectUrl;
-        latestClickthroughUrl = clickthroughUrl;
-        latestAdReport = adReport;
-        return mockHtmlBannerWebView;
-    }
-
-    public static CustomEventBannerListener getLatestListener() {
-        return getTestFactory().latestListener;
-    }
-
-    public static boolean getLatestIsScrollable() {
-        return getTestFactory().latestIsScrollable;
-    }
-
-    public static String getLatestRedirectUrl() {
-        return getTestFactory().latestRedirectUrl;
-    }
-
-    public static String getLatestClickthroughUrl() {
-        return getTestFactory().latestClickthroughUrl;
-    }
-
-    public static AdReport getLatestAdReport() {
-        return getTestFactory().latestAdReport;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlInterstitialWebViewFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlInterstitialWebViewFactory.java
deleted file mode 100644
index c9dc4c47..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlInterstitialWebViewFactory.java
+++ /dev/null
@@ -1,51 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import android.content.Context;
-
-import com.mopub.common.AdReport;
-import com.mopub.mobileads.HtmlInterstitialWebView;
-import com.mopub.mobileads.factories.HtmlInterstitialWebViewFactory;
-
-import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static org.mockito.Mockito.mock;
-
-public class TestHtmlInterstitialWebViewFactory extends HtmlInterstitialWebViewFactory {
-    private HtmlInterstitialWebView mockHtmlInterstitialWebView = mock(HtmlInterstitialWebView.class);
-
-    private CustomEventInterstitialListener latestListener;
-    private boolean latestIsScrollable;
-    private String latestRedirectUrl;
-    private String latestClickthroughUrl;
-
-    public static HtmlInterstitialWebView getSingletonMock() {
-        return getTestFactory().mockHtmlInterstitialWebView;
-    }
-
-    private static TestHtmlInterstitialWebViewFactory getTestFactory() {
-        return (TestHtmlInterstitialWebViewFactory) instance;
-    }
-
-    @Override
-    public HtmlInterstitialWebView internalCreate(Context context, AdReport adReport, CustomEventInterstitialListener customEventInterstitialListener, boolean isScrollable, String redirectUrl, String clickthroughUrl) {
-        latestListener = customEventInterstitialListener;
-        latestIsScrollable = isScrollable;
-        latestRedirectUrl = redirectUrl;
-        latestClickthroughUrl = clickthroughUrl;
-        return getTestFactory().mockHtmlInterstitialWebView;
-    }
-
-    public static CustomEventInterstitialListener getLatestListener() {
-        return getTestFactory().latestListener;
-    }
-
-    public static boolean getLatestIsScrollable() {
-        return getTestFactory().latestIsScrollable;
-    }
-    public static String getLatestRedirectUrl() {
-        return getTestFactory().latestRedirectUrl;
-    }
-
-    public static String getLatestClickthroughUrl() {
-        return getTestFactory().latestClickthroughUrl;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpResponseWithHeaders.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpResponseWithHeaders.java
deleted file mode 100644
index 8c3229b5..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpResponseWithHeaders.java
+++ /dev/null
@@ -1,37 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import org.apache.http.Header;
-import org.apache.http.message.BasicHeader;
-import org.robolectric.shadows.httpclient.TestHttpResponse;
-
-import java.util.HashMap;
-import java.util.Map;
-
-public class TestHttpResponseWithHeaders extends TestHttpResponse {
-    private Map<String, Header> headers;
-
-    public TestHttpResponseWithHeaders(int statusCode, String responseBody) {
-        super(statusCode, responseBody);
-        headers = new HashMap<String, Header>();
-    }
-
-    public TestHttpResponseWithHeaders(int statusCode, byte[] responseBody) {
-        super(statusCode, responseBody);
-        headers = new HashMap<String, Header>();
-    }
-
-    @Override
-    public void addHeader(String name, String value) {
-        headers.put(name, new BasicHeader(name, value));
-    }
-
-    @Override
-    public Header getFirstHeader(String name) {
-        return headers.get(name);
-    }
-
-    @Override
-    public Header[] getAllHeaders() {
-        return headers.values().toArray(new Header[headers.size()]);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMoPubViewFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMoPubViewFactory.java
deleted file mode 100644
index 971b61b2..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMoPubViewFactory.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import android.content.Context;
-
-import com.mopub.mobileads.MoPubView;
-import com.mopub.mobileads.factories.MoPubViewFactory;
-
-import static org.mockito.Mockito.mock;
-
-public class TestMoPubViewFactory extends MoPubViewFactory {
-    private final MoPubView mockMoPubView = mock(MoPubView.class);
-
-    public static MoPubView getSingletonMock() {
-        return getTestFactory().mockMoPubView;
-    }
-
-    private static TestMoPubViewFactory getTestFactory() {
-        return (TestMoPubViewFactory) instance;
-    }
-
-    @Override
-    protected MoPubView internalCreate(Context context) {
-        return mockMoPubView;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMraidControllerFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMraidControllerFactory.java
deleted file mode 100644
index 511499fe..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMraidControllerFactory.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-
-import com.mopub.common.AdReport;
-import com.mopub.mobileads.factories.MraidControllerFactory;
-import com.mopub.mraid.MraidController;
-import com.mopub.mraid.PlacementType;
-
-import static org.mockito.Mockito.mock;
-
-public class TestMraidControllerFactory extends MraidControllerFactory {
-    private MraidController mockMraidController = mock(MraidController.class);
-
-    public static MraidController getSingletonMock() {
-        return getTestFactory().mockMraidController;
-    }
-
-    private static TestMraidControllerFactory getTestFactory() {
-        return ((TestMraidControllerFactory) MraidControllerFactory.instance);
-    }
-
-    @Override
-    protected MraidController internalCreate(@NonNull final Context context,
-            @NonNull AdReport adReport,
-            @NonNull final PlacementType placementType) {
-        return mockMraidController;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastManagerFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastManagerFactory.java
deleted file mode 100644
index 9ccbb2c9..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastManagerFactory.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import android.content.Context;
-
-import com.mopub.mobileads.factories.VastManagerFactory;
-import com.mopub.mobileads.VastManager;
-
-import static org.mockito.Mockito.mock;
-
-public class TestVastManagerFactory extends VastManagerFactory {
-    private VastManager mockVastManager = mock(VastManager.class);
-
-    public static VastManager getSingletonMock() {
-        return getTestFactory().mockVastManager;
-    }
-
-    private static TestVastManagerFactory getTestFactory() {
-        return (TestVastManagerFactory) instance;
-    }
-
-    @Override
-    public VastManager internalCreate(final Context context, final boolean preCacheVideo) {
-        return getTestFactory().mockVastManager;
-    }
-}
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ThreadUtils.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ThreadUtils.java
deleted file mode 100644
index 5d143b2f..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ThreadUtils.java
+++ /dev/null
@@ -1,14 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-// note: keep this in test/support folder. this is not intended to be of Utility usage
-public class ThreadUtils {
-    public static final long NETWORK_DELAY = 500;
-
-    public static void pause(long millis){
-        try {
-            Thread.sleep(millis);
-        } catch (InterruptedException ie){
-            // Ignore interrupts on this Thread.
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/VastUtils.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/VastUtils.java
deleted file mode 100644
index 65eb1f81..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/VastUtils.java
+++ /dev/null
@@ -1,40 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import com.mopub.mobileads.VastTracker;
-
-import org.w3c.dom.Document;
-import org.w3c.dom.Node;
-import org.xml.sax.InputSource;
-
-import java.io.StringReader;
-import java.util.ArrayList;
-import java.util.List;
-
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-
-public class VastUtils {
-    public static Node createNode(String xml) throws Exception {
-        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
-        documentBuilderFactory.setCoalescing(true);
-        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
-        Document document = documentBuilder.parse(new InputSource(new StringReader(xml)));
-        return document.getFirstChild();
-    }
-
-    public static List<VastTracker> stringsToVastTrackers(String... strings) {
-        List<VastTracker> vastTrackers = new ArrayList<VastTracker>(strings.length);
-        for (int i=0; i<strings.length; i++) {
-            vastTrackers.add(new VastTracker(strings[i]));
-        }
-        return vastTrackers;
-    }
-
-    public static List<String> vastTrackersToStrings(List<VastTracker> vastTrackers) {
-        List<String> strings = new ArrayList<String>(vastTrackers.size());
-        for (VastTracker vastTracker : vastTrackers) {
-            strings.add(vastTracker.getTrackingUrl());
-        }
-        return strings;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/WebViewsTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/WebViewsTest.java
deleted file mode 100644
index 4bb1343d..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/WebViewsTest.java
+++ /dev/null
@@ -1,41 +0,0 @@
-package com.mopub.mobileads.util;
-
-import android.webkit.WebView;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class WebViewsTest {
-
-    @Test
-    public void pause_withIsFinishingTrue_shouldStopLoading_shouldLoadBlankUrl_shouldPauseWebView() throws Exception {
-        WebView mockWebView = mock(WebView.class);
-
-        WebViews.onPause(mockWebView, true);
-
-        verify(mockWebView).stopLoading();
-        verify(mockWebView).loadUrl("");
-        verify(mockWebView).onPause();
-    }
-
-    @Test
-    public void pause_withIsFinishingFalse_shouldPauseWebView() throws Exception {
-        WebView mockWebView = mock(WebView.class);
-
-        WebViews.onPause(mockWebView, false);
-
-        verify(mockWebView, never()).stopLoading();
-        verify(mockWebView, never()).loadUrl("");
-        verify(mockWebView).onPause();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/XmlUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/XmlUtilsTest.java
deleted file mode 100644
index 61ac31e0..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/XmlUtilsTest.java
+++ /dev/null
@@ -1,252 +0,0 @@
-package com.mopub.mobileads.util;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-import org.w3c.dom.Document;
-import org.w3c.dom.Node;
-import org.xml.sax.InputSource;
-
-import java.io.StringReader;
-import java.text.DateFormat;
-import java.text.ParseException;
-import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.Date;
-import java.util.List;
-import java.util.Locale;
-
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class XmlUtilsTest {
-
-    // From Microsoft's sample xml documents page: https://msdn.microsoft.com/en-us/library/bb387026.aspx
-    private String testXml = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" +
-            "<aw:PurchaseOrders xmlns:aw=\"https://www.adventure-works.com\">\n" +
-            "  <aw:PurchaseOrder aw:PurchaseOrderNumber=\"99503\" aw:OrderDate=\"1999-10-20\">\n" +
-            "    <aw:Address aw:Type=\"Shipping\">\n" +
-            "      <aw:Name>Ellen Adams</aw:Name>\n" +
-            "      <aw:Street>123 Maple Street</aw:Street>\n" +
-            "      <aw:City>Mill Valley</aw:City>\n" +
-            "      <aw:State>CA</aw:State>\n" +
-            "      <aw:Zip>10999</aw:Zip>\n" +
-            "      <aw:Country>USA</aw:Country>\n" +
-            "    </aw:Address>\n" +
-            "    <aw:Address aw:Type=\"Billing\">\n" +
-            "      <aw:Name>Tai Yee</aw:Name>\n" +
-            "      <aw:Street>8 Oak Avenue</aw:Street>\n" +
-            "      <aw:City>Old Town</aw:City>\n" +
-            "      <aw:State>PA</aw:State>\n" +
-            "      <aw:Zip>95819</aw:Zip>\n" +
-            "      <aw:Country>USA</aw:Country>\n" +
-            "    </aw:Address>\n" +
-            "    <aw:DeliveryNotes>Please leave packages in shed by driveway.</aw:DeliveryNotes>\n" +
-            "    <aw:Items>\n" +
-            "      <aw:Item aw:PartNumber=\"898-AZ\">\n" +
-            "        <aw:ProductName>Lawnmower</aw:ProductName>\n" +
-            "        <aw:Quantity>1</aw:Quantity>\n" +
-            "        <aw:USPrice>148.95</aw:USPrice>\n" +
-            "        <aw:Comment>Confirm this is electric</aw:Comment>\n" +
-            "      </aw:Item>\n" +
-            "      <aw:Item aw:PartNumber=\"926-AA\">\n" +
-            "        <aw:ProductName>Baby Monitor</aw:ProductName>\n" +
-            "        <aw:Quantity>2</aw:Quantity>\n" +
-            "        <aw:USPrice>39.98</aw:USPrice>\n" +
-            "        <aw:ShipDate>1999-05-21</aw:ShipDate>\n" +
-            "      </aw:Item>\n" +
-            "    </aw:Items>\n" +
-            "  </aw:PurchaseOrder>\n" +
-            "  <aw:PurchaseOrder aw:PurchaseOrderNumber=\"99505\" aw:OrderDate=\"1999-10-22\">\n" +
-            "    <aw:Address aw:Type=\"Shipping\">\n" +
-            "      <aw:Name>Cristian Osorio</aw:Name>\n" +
-            "      <aw:Street>456 Main Street</aw:Street>\n" +
-            "      <aw:City>Buffalo</aw:City>\n" +
-            "      <aw:State>NY</aw:State>\n" +
-            "      <aw:Zip>98112</aw:Zip>\n" +
-            "      <aw:Country>USA</aw:Country>\n" +
-            "    </aw:Address>\n" +
-            "    <aw:Address aw:Type=\"Billing\">\n" +
-            "      <aw:Name>Cristian Osorio</aw:Name>\n" +
-            "      <aw:Street>456 Main Street</aw:Street>\n" +
-            "      <aw:City>Buffalo</aw:City>\n" +
-            "      <aw:State>NY</aw:State>\n" +
-            "      <aw:Zip>98112</aw:Zip>\n" +
-            "      <aw:Country>USA</aw:Country>\n" +
-            "    </aw:Address>\n" +
-            "    <aw:DeliveryNotes>Please notify me before shipping.</aw:DeliveryNotes>\n" +
-            "    <aw:Items>\n" +
-            "      <aw:Item aw:PartNumber=\"456-NM\">\n" +
-            "        <aw:ProductName>Power Supply</aw:ProductName>\n" +
-            "        <aw:Quantity>1</aw:Quantity>\n" +
-            "        <aw:USPrice>45.99</aw:USPrice>\n" +
-            "      </aw:Item>\n" +
-            "    </aw:Items>\n" +
-            "  </aw:PurchaseOrder>\n" +
-            "  <aw:PurchaseOrder aw:PurchaseOrderNumber=\"99504\" aw:OrderDate=\"1999-10-22\">\n" +
-            "    <aw:Address aw:Type=\"Shipping\">\n" +
-            "      <aw:Name>Jessica Arnold</aw:Name>\n" +
-            "      <aw:Street>4055 Madison Ave</aw:Street>\n" +
-            "      <aw:City>Seattle</aw:City>\n" +
-            "      <aw:State>WA</aw:State>\n" +
-            "      <aw:Zip>98112</aw:Zip>\n" +
-            "      <aw:Country>USA</aw:Country>\n" +
-            "    </aw:Address>\n" +
-            "    <aw:Address aw:Type=\"Billing\">\n" +
-            "      <aw:Name>Jessica Arnold</aw:Name>\n" +
-            "      <aw:Street>4055 Madison Ave</aw:Street>\n" +
-            "      <aw:City>Buffalo</aw:City>\n" +
-            "      <aw:State>NY</aw:State>\n" +
-            "      <aw:Zip>98112</aw:Zip>\n" +
-            "      <aw:Country>USA</aw:Country>\n" +
-            "    </aw:Address>\n" +
-            "    <aw:Items>\n" +
-            "      <aw:Item aw:PartNumber=\"898-AZ\">\n" +
-            "        <aw:ProductName>Computer Keyboard</aw:ProductName>\n" +
-            "        <aw:Quantity>1</aw:Quantity>\n" +
-            "        <aw:USPrice>29.99</aw:USPrice>\n" +
-            "        <aw:Comment>this thing breaks all the time</aw:Comment>\n" +
-            "      </aw:Item>\n" +
-            "      <aw:Item aw:PartNumber=\"898-AM\">\n" +
-            "        <aw:ProductName>Wireless Mouse</aw:ProductName>\n" +
-            "        <aw:Quantity>1</aw:Quantity>\n" +
-            "        <aw:USPrice>14.99</aw:USPrice>\n" +
-            "      </aw:Item>\n" +
-            "    </aw:Items>\n" +
-            "  </aw:PurchaseOrder>\n" +
-            "</aw:PurchaseOrders>";
-    private Document testDoc;
-    private Node purchaseOrderNode;
-
-
-    @Before
-    public void setUp() throws Exception {
-        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
-        documentBuilderFactory.setCoalescing(true);
-        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
-        testDoc = documentBuilder.parse(new InputSource(new StringReader(testXml)));
-        purchaseOrderNode = testDoc.getFirstChild();
-    }
-
-    @Test
-    public void getFirstMatchingNode_shouldReturnValue() {
-        Node resultNode = XmlUtils.getFirstMatchingChildNode(purchaseOrderNode, "aw:PurchaseOrder");
-        assertThat(resultNode).isNotNull();
-    }
-
-    @Test
-    public void getFirstMatchingChildNode_shouldFindNode() throws Exception {
-        ArrayList<String> testList = new ArrayList<String>();
-        testList.add("1999-10-22");
-        Node resultNode = XmlUtils.getFirstMatchingChildNode(purchaseOrderNode, "aw:PurchaseOrder", "aw:OrderDate", testList);
-        assertThat(resultNode).isNotNull();
-        assertThat(resultNode.getNodeName()).isEqualTo("aw:PurchaseOrder");
-        assertThat(resultNode.getAttributes().getNamedItem("aw:OrderDate").getNodeValue()).isEqualTo("1999-10-22");
-    }
-
-    @Test
-    public void getFirstMatchingChildNode_withUnmatchedAttribute_shouldNotFindNode() throws Exception {
-        ArrayList<String> testList = new ArrayList<String>();
-        testList.add("1999-10-");
-        Node resultNode = XmlUtils.getFirstMatchingChildNode(purchaseOrderNode, "aw:PurchaseOrder", "aw:OrderDate", testList);
-        assertThat(resultNode).isNull();
-    }
-
-    @Test
-    public void getMatchingChildNodes_withNullAttributeValues_shouldReturnMultiple() throws Exception {
-        List<Node> results = XmlUtils.getMatchingChildNodes(purchaseOrderNode, "aw:PurchaseOrder", "aw:OrderDate", null);
-        assertThat(results.size()).isEqualTo(3);
-    }
-
-    @Test
-    public void getMatchingChildNodes_withEmptyAttributeValues_shouldReturnNone() {
-        List<Node> results = XmlUtils.getMatchingChildNodes(purchaseOrderNode, "aw:PurchaseOrder", "aw:OrderDate", new ArrayList<String>());
-        assertThat(results).isEmpty();
-    }
-
-    @Test
-    public void getAttributeValue_shouldReturnCorrectValue() throws Exception {
-        Node child = XmlUtils.getFirstMatchingChildNode(purchaseOrderNode, "aw:PurchaseOrder");
-
-        String purchaseOrderNumber = XmlUtils.getAttributeValue(child, "aw:PurchaseOrderNumber");
-        String orderDate = XmlUtils.getAttributeValue(child, "aw:OrderDate");
-
-        assertThat(purchaseOrderNumber).isEqualTo("99503");
-        assertThat(orderDate).isEqualTo("1999-10-20");
-    }
-
-    @Test
-    public void getListFromDocument_shouldReturnCorrectValue() throws Exception {
-        // Get all the "aw:PurchaseOrder" nodes. If any of them have an "aw:OrderDate" attribute, extract a Date.
-        List<Date> orderDates = XmlUtils.getListFromDocument(testDoc, "aw:PurchaseOrder", "aw:OrderDate", null, new XmlUtils.NodeProcessor<Date>() {
-            DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd", Locale.US);
-
-            @Override
-            public Date process(final Node node) {
-                try {
-                    return formatter.parse(node.getAttributes().getNamedItem("aw:OrderDate").getNodeValue());
-                } catch (ParseException e) {
-                    return null;
-                }
-            }
-        });
-
-        assertThat(orderDates.size()).isEqualTo(3);
-        assertThat(orderDates.get(0).getYear()).isEqualTo(99);
-        assertThat(orderDates.get(0).getMonth()).isEqualTo(9);
-        assertThat(orderDates.get(0).getDate()).isEqualTo(20);
-
-        assertThat(orderDates.get(1).getYear()).isEqualTo(99);
-        assertThat(orderDates.get(1).getMonth()).isEqualTo(9);
-        assertThat(orderDates.get(1).getDate()).isEqualTo(22);
-
-        assertThat(orderDates.get(2).getYear()).isEqualTo(99);
-        assertThat(orderDates.get(2).getMonth()).isEqualTo(9);
-        assertThat(orderDates.get(2).getDate()).isEqualTo(22);
-    }
-
-    @Test
-    public void getFirstMatchFromDocument_shouldReturnCorrectValue() throws Exception {
-        // Get the first "aw:PurchaseOrder" nodes. If it has an "aw:OrderDate" attribute, extract a Date.
-        Date orderDate = XmlUtils.getFirstMatchFromDocument(testDoc, "aw:PurchaseOrder", "aw:OrderDate", null, new XmlUtils.NodeProcessor<Date>() {
-            DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd", Locale.US);
-
-            @Override
-            public Date process(final Node node) {
-                try {
-                    return formatter.parse(node.getAttributes().getNamedItem("aw:OrderDate").getNodeValue());
-                } catch (ParseException e) {
-                    return null;
-                }
-            }
-        });
-
-        assertThat(orderDate).isNotNull();
-        assertThat(orderDate.getYear()).isEqualTo(99);
-        assertThat(orderDate.getMonth()).isEqualTo(9);
-        assertThat(orderDate.getDate()).isEqualTo(20);
-    }
-
-    @Test
-    public void getStringDataAsList_shouldFindDeepNested() throws Exception {
-        final List<String> strings = XmlUtils.getStringDataAsList(testDoc, "aw:Comment", null, null);
-        assertThat(strings.size()).isEqualTo(2);
-        assertThat(strings.get(0)).isEqualTo("Confirm this is electric");
-        assertThat(strings.get(1)).isEqualTo("this thing breaks all the time");
-    }
-
-    @Test
-    public void getFirstMatchingStringData_shouldFindFirstMatch() throws Exception {
-        final String firstMatch = XmlUtils.getFirstMatchingStringData(testDoc, "aw:Comment", null, null);
-        assertThat(firstMatch).isNotNull();
-        assertThat(firstMatch).isEqualTo("Confirm this is electric");
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java
deleted file mode 100644
index 7a3ba220..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java
+++ /dev/null
@@ -1,120 +0,0 @@
-package com.mopub.mraid;
-
-import android.app.Activity;
-import android.content.Context;
-import android.view.View;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.mobileads.test.support.TestMraidControllerFactory;
-import com.mopub.mraid.MraidController.MraidListener;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Mock;
-import org.robolectric.annotation.Config;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
-import static com.mopub.mobileads.MoPubErrorCode.MRAID_LOAD_ERROR;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class MraidBannerTest {
-    private static final String INPUT_HTML_DATA = "%3Chtml%3E%3C%2Fhtml%3E";
-
-    MraidController mockMraidController;
-    @Mock CustomEventBannerListener mockBannerListener;
-
-    private Context context;
-    private Map<String, Object> localExtras;
-    private Map<String, String> serverExtras;
-
-    private MraidBanner subject;
-
-    @Before
-    public void setUp() {
-        subject = new MraidBanner();
-        mockMraidController = TestMraidControllerFactory.getSingletonMock();
-
-        context = new Activity();
-        localExtras = new HashMap<String, Object>();
-        localExtras.put("broadcastIdentifier", 123L);
-        serverExtras = new HashMap<String, String>();
-        serverExtras.put(HTML_RESPONSE_BODY_KEY, INPUT_HTML_DATA);
-    }
-
-    @Test
-    public void loadBanner_whenExtrasAreMalformed_shouldNotifyBannerListenerFailureAndReturn() {
-        serverExtras.remove(HTML_RESPONSE_BODY_KEY);
-
-        subject.loadBanner(context, mockBannerListener, localExtras, serverExtras);
-
-        verify(mockBannerListener).onBannerFailed(eq(MRAID_LOAD_ERROR));
-    }
-
-    @Test
-    public void invalidate_shouldDestroyMraidController() {
-        subject.loadBanner(context, mockBannerListener, localExtras, serverExtras);
-        subject.onInvalidate();
-
-        verify(mockMraidController).destroy();
-    }
-
-    @Test
-    public void bannerMraidListener_onReady_shouldNotifyBannerLoaded() {
-        MraidListener mraidListener = captureMraidListener();
-        mraidListener.onLoaded(null);
-
-        verify(mockBannerListener).onBannerLoaded(any(View.class));
-    }
-
-    @Test
-    public void bannerMraidListener_onFailure_shouldNotifyBannerFailed() {
-        MraidListener mraidListener = captureMraidListener();
-        mraidListener.onFailedToLoad();
-
-        verify(mockBannerListener).onBannerFailed(eq(MRAID_LOAD_ERROR));
-    }
-
-    @Test
-    public void bannerMraidListener_onExpand_shouldNotifyBannerExpandedAndClicked() {
-        MraidListener mraidListener = captureMraidListener();
-        mraidListener.onExpand();
-
-        verify(mockBannerListener).onBannerExpanded();
-        verify(mockBannerListener).onBannerClicked();
-    }
-
-    @Test
-    public void bannerMraidListener_onOpen_shouldNotifyBannerClicked() {
-        MraidListener mraidListener = captureMraidListener();
-        mraidListener.onOpen();
-
-        verify(mockBannerListener).onBannerClicked();
-    }
-
-    @Test
-    public void bannerMraidListener_onClose_shouldNotifyBannerCollapsed() {
-        MraidListener mraidListener = captureMraidListener();
-        mraidListener.onClose();
-
-        verify(mockBannerListener).onBannerCollapsed();
-    }
-
-    private MraidListener captureMraidListener() {
-        subject.loadBanner(context, mockBannerListener, localExtras, serverExtras);
-        ArgumentCaptor<MraidListener> listenerCaptor = ArgumentCaptor.forClass(MraidListener.class);
-        verify(mockMraidController).setMraidListener(listenerCaptor.capture());
-
-        return listenerCaptor.getValue();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java
deleted file mode 100644
index fdc71bda..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java
+++ /dev/null
@@ -1,374 +0,0 @@
-package com.mopub.mraid;
-
-import android.annotation.TargetApi;
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.os.Build;
-import android.webkit.WebSettings;
-import android.webkit.WebViewClient;
-
-import com.mopub.common.AdReport;
-import com.mopub.common.Constants;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.mraid.MraidBridge.MraidBridgeListener;
-import com.mopub.mraid.MraidBridge.MraidWebView;
-import com.mopub.mraid.MraidNativeCommandHandler.MraidCommandFailureListener;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Answers;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Captor;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowApplication;
-
-import java.net.URI;
-import java.util.HashMap;
-import java.util.Map;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyBoolean;
-import static org.mockito.Matchers.anyMapOf;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Matchers.startsWith;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class MraidBridgeTest {
-    @Mock MraidNativeCommandHandler mockNativeCommandHandler;
-    @Mock MraidBridgeListener mockBridgeListener;
-    @Mock AdReport mockAdReport;
-    @Mock(answer = Answers.RETURNS_DEEP_STUBS) MraidWebView mockBannerWebView;
-    @Mock(answer = Answers.RETURNS_DEEP_STUBS) MraidWebView mockInterstitialWebView;
-    @Mock WebSettings mockWebSettings;
-    @Captor ArgumentCaptor<WebViewClient> bannerWebViewClientCaptor;
-
-    private Activity activity;
-    private MraidBridge subjectBanner;
-    private MraidBridge subjectInterstitial;
-
-    @Before
-    public void setUp() {
-        activity = Robolectric.buildActivity(Activity.class).create().get();
-
-        subjectBanner = new MraidBridge(mockAdReport, PlacementType.INLINE, mockNativeCommandHandler);
-        subjectBanner.setMraidBridgeListener(mockBridgeListener);
-
-        subjectInterstitial = new MraidBridge(mockAdReport, PlacementType.INTERSTITIAL, mockNativeCommandHandler);
-        subjectInterstitial.setMraidBridgeListener(mockBridgeListener);
-    }
-
-    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
-    @Config(sdk = Build.VERSION_CODES.JELLY_BEAN_MR1)
-    @Test
-    public void attachView_atLeastJellyBeanMr1_withInterstitial_shouldAutoPlayVideo() {
-        when(mockInterstitialWebView.getSettings()).thenReturn(mockWebSettings);
-
-        subjectInterstitial.attachView(mockInterstitialWebView);
-
-        verify(mockWebSettings).setMediaPlaybackRequiresUserGesture(false);
-    }
-
-    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
-    @Config(sdk = Build.VERSION_CODES.JELLY_BEAN_MR1)
-    @Test
-    public void attachView_atLeastJellyBeanMr1_withInline_shouldNotAutoPlayVideo() {
-        when(mockBannerWebView.getSettings()).thenReturn(mockWebSettings);
-
-        subjectBanner.attachView(mockBannerWebView);
-
-        verify(mockWebSettings, never()).setMediaPlaybackRequiresUserGesture(anyBoolean());
-    }
-
-    @Config(sdk = Build.VERSION_CODES.JELLY_BEAN)
-    @Test
-    public void attachView_belowJellyBeanMr1_withInterstitial_shouldNotAutoPlayVideo() {
-        when(mockInterstitialWebView.getSettings()).thenReturn(mockWebSettings);
-
-        subjectInterstitial.attachView(mockInterstitialWebView);
-
-        // Disregard setting of javascript
-        verify(mockWebSettings).setJavaScriptEnabled(anyBoolean());
-        // Ensure mockWebSettings.setMediaPlaybackRequiresUserGesture is never called
-        verifyNoMoreInteractions(mockWebSettings);
-    }
-
-    @Config(sdk = Build.VERSION_CODES.JELLY_BEAN)
-    @Test
-    public void attachView_belowJellyBeanMr1_withInline_shouldNotAutoPlayVideo() {
-        when(mockBannerWebView.getSettings()).thenReturn(mockWebSettings);
-
-        subjectBanner.attachView(mockBannerWebView);
-
-        // Disregard setting of javascript
-        verify(mockWebSettings).setJavaScriptEnabled(anyBoolean());
-        // Ensure mockWebSettings.setMediaPlaybackRequiresUserGesture is never called
-        verifyNoMoreInteractions(mockWebSettings);
-    }
-
-    @Test
-    public void attachView_thenDetach_shouldSetMRaidWebView_thenShouldClear() {
-        attachWebViews();
-        assertThat(subjectBanner.getMraidWebView()).isEqualTo(mockBannerWebView);
-
-        subjectBanner.detach();
-        assertThat(subjectBanner.getMraidWebView()).isNull();
-    }
-
-    @Test
-    public void attachView_thenOnPageFinished_shouldFireReady() {
-        attachWebViews();
-        bannerWebViewClientCaptor.getValue().onPageFinished(mockBannerWebView, "fake://url");
-
-        verify(mockBridgeListener).onPageLoaded();
-    }
-
-    @Test
-    public void attachView_thenOnPageFinished_twice_shouldNotFireReadySecondTime() {
-        attachWebViews();
-        bannerWebViewClientCaptor.getValue().onPageFinished(mockBannerWebView, "fake://url");
-        bannerWebViewClientCaptor.getValue().onPageFinished(mockBannerWebView, "fake://url2");
-
-        verify(mockBridgeListener, times(1)).onPageLoaded();
-    }
-
-    @Test
-    public void attachView_thenSetContentHtml_shouldCallLoadDataWithBaseURL() {
-        attachWebViews();
-        subjectBanner.setContentHtml("test-html");
-
-        verify(mockBannerWebView).loadDataWithBaseURL(
-                "http://" + Constants.HOST + "/", "test-html", "text/html", "UTF-8", null);
-    }
-
-    @Test
-    public void handleShouldOverrideUrl_invalidUrl_shouldFireErrorEvent() {
-        attachWebViews();
-        boolean result = subjectBanner.handleShouldOverrideUrl("bad bad bad");
-
-        verify(mockBannerWebView).loadUrl(startsWith(
-                "javascript:window.mraidbridge.notifyErrorEvent"));
-        assertThat(result).isTrue();
-    }
-
-    @Test
-    public void handleShouldOverrideUrl_mopubNonFailLoadUrl_shouldNeverLoadUrl_shouldReturnTrue() {
-        attachWebViews();
-        boolean result = subjectBanner.handleShouldOverrideUrl("mopub://special-mopub-command");
-
-        verify(mockBannerWebView, never()).loadUrl(anyString());
-        assertThat(result).isTrue();
-    }
-
-    @Test
-    public void handleShouldOverrideUrl_mopubFailLoadUrl_whenBanner_shouldNotifyListenerOfOnPageFailedToLoad_shouldReturnTrue() {
-        attachWebViews();
-        boolean result = subjectBanner.handleShouldOverrideUrl("mopub://failLoad");
-
-        verify(mockBridgeListener).onPageFailedToLoad();
-        verify(mockBannerWebView, never()).loadUrl(anyString());
-        assertThat(result).isTrue();
-    }
-
-    @Test
-    public void handleShouldOverrideUrl_mopubFailLoadUrl_whenInterstitial_shouldNotNotifyListenerOfOnPageFailedToLoad_shouldReturnTrue() {
-        attachWebViews();
-        boolean result = subjectInterstitial.handleShouldOverrideUrl("mopub://failLoad");
-
-        verify(mockBridgeListener, never()).onPageFailedToLoad();
-        verify(mockBannerWebView, never()).loadUrl(anyString());
-        assertThat(result).isTrue();
-    }
-
-    @Test
-    public void handleShouldOverrideUrl_mraidUrl_invalid_shouldFireErrorEvent_shouldReturnTrue() {
-        attachWebViews();
-        boolean result = subjectBanner.handleShouldOverrideUrl("mraid://bad-command");
-
-        verify(mockBannerWebView).loadUrl(startsWith(
-                "javascript:window.mraidbridge.notifyErrorEvent"));
-        assertThat(result).isTrue();
-    }
-
-    @Test
-    public void handleShouldOverrideUrl_smsUrl_notClicked_shouldReturnFalse() {
-        attachWebViews();
-        boolean result = subjectBanner.handleShouldOverrideUrl("sms://123456789");
-
-        assertThat(result).isFalse();
-    }
-
-    @Test
-    public void handleShouldOverrideUrl_smsUrl_clicked_shouldStartActivity() {
-        attachWebViews();
-        subjectBanner.setClicked(true);
-        reset(mockBannerWebView);
-        when(mockBannerWebView.getContext()).thenReturn(activity);
-
-        boolean result = subjectBanner.handleShouldOverrideUrl("sms://123456789");
-
-        Intent startedIntent = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(startedIntent).isNotNull();
-        assertThat(startedIntent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(startedIntent.getComponent()).isNull();
-        assertThat(result).isTrue();
-    }
-
-    @Test
-    public void handleShouldOverrideUrl_normalUrl_shouldReturnFalse() {
-        attachWebViews();
-        boolean result = subjectBanner.handleShouldOverrideUrl("https://www.mopub.com");
-
-        assertThat(result).isFalse();
-    }
-
-    @Test(expected = MraidCommandException.class)
-    public void runCommand_requiresClick_notClicked_shouldThrowException()
-            throws MraidCommandException {
-        attachWebViews();
-        subjectBanner = new MraidBridge(mockAdReport, PlacementType.INLINE);
-        subjectBanner.attachView(mockBannerWebView);
-        subjectBanner.setClicked(false);
-        Map<String, String> params = new HashMap<String, String>();
-        params.put("uri", "https://valid-url");
-
-        subjectBanner.runCommand(MraidJavascriptCommand.PLAY_VIDEO, params);
-    }
-
-    public void runCommand_requiresClick_clicked_shouldNotThrowException()
-            throws MraidCommandException {
-        attachWebViews();
-        subjectBanner.setClicked(true);
-        Map<String, String> params = new HashMap<String, String>();
-        params.put("uri", "https://valid-url");
-
-        subjectBanner.runCommand(MraidJavascriptCommand.PLAY_VIDEO, params);
-    }
-
-    @Test(expected = MraidCommandException.class)
-    public void runCommand_interstitial_requiresClick_notClicked_shouldThrowException()
-            throws MraidCommandException {
-        attachWebViews();
-        subjectInterstitial.setClicked(false);
-        Map<String, String> params = new HashMap<String, String>();
-        params.put("uri", "https://valid-url");
-
-        subjectInterstitial.runCommand(MraidJavascriptCommand.OPEN, params);
-    }
-
-    @Test
-    public void runCommand_interstitial_requiresClick_clicked_shouldNotThrowException()
-            throws MraidCommandException {
-        attachWebViews();
-        subjectInterstitial.setClicked(true);
-        Map<String, String> params = new HashMap<String, String>();
-        params.put("url", "https://valid-url");
-
-        subjectInterstitial.runCommand(MraidJavascriptCommand.OPEN, params);
-    }
-
-    @Test
-    public void runCommand_close_shouldCallListener()
-            throws MraidCommandException {
-        attachWebViews();
-        Map<String, String> params = new HashMap<String, String>();
-        
-        subjectBanner.runCommand(MraidJavascriptCommand.CLOSE, params);
-
-        verify(mockBridgeListener).onClose();
-    }
-
-    @Test
-    public void runCommand_expand_shouldCallListener()
-            throws MraidCommandException {
-        attachWebViews();
-        subjectBanner.setClicked(true);
-        Map<String, String> params = new HashMap<String, String>();
-        params.put("shouldUseCustomClose", "true");
-
-        subjectBanner.runCommand(MraidJavascriptCommand.EXPAND, params);
-
-        verify(mockBridgeListener).onExpand(null, true);
-    }
-
-    @Test
-    public void runCommand_expand_withUrl_shouldCallListener()
-            throws MraidCommandException {
-        attachWebViews();
-        subjectBanner.setClicked(true);
-        Map<String, String> params = new HashMap<String, String>();
-        params.put("url", "https://valid-url");
-        params.put("shouldUseCustomClose", "true");
-
-        subjectBanner.runCommand(MraidJavascriptCommand.EXPAND, params);
-
-        ArgumentCaptor<URI> uriCaptor = ArgumentCaptor.forClass(URI.class);
-        verify(mockBridgeListener).onExpand(
-                uriCaptor.capture(), eq(true));
-        assertThat(uriCaptor.getValue().toString()).isEqualTo("https://valid-url");
-    }
-
-    @Test
-    public void runCommand_playVideo_shouldCallListener()
-            throws MraidCommandException {
-        attachWebViews();
-        subjectBanner.setClicked(true);
-        Map<String, String> params = new HashMap<String, String>();
-        params.put("uri", "https://valid-url");
-
-        subjectBanner.runCommand(MraidJavascriptCommand.PLAY_VIDEO, params);
-
-        ArgumentCaptor<URI> uriCaptor = ArgumentCaptor.forClass(URI.class);
-        verify(mockBridgeListener).onPlayVideo(uriCaptor.capture());
-        assertThat(uriCaptor.getValue().toString()).isEqualTo("https://valid-url");
-    }
-
-    @Test
-    public void runCommand_storePicture_shouldCallListener()
-            throws MraidCommandException {
-        attachWebViews();
-        subjectBanner.setClicked(true);
-        Map<String, String> params = new HashMap<String, String>();
-        params.put("uri", "https://valid-url");
-
-        subjectBanner.runCommand(MraidJavascriptCommand.STORE_PICTURE, params);
-
-        verify(mockNativeCommandHandler).storePicture(any(Context.class), eq("https://valid-url"),
-                any(MraidCommandFailureListener.class));
-    }
-
-    @Test
-    public void runCommand_createCalendarEvent_shouldCallListener()
-            throws MraidCommandException {
-        attachWebViews();
-        subjectBanner.setClicked(true);
-        Map<String, String> params = new HashMap<String, String>();
-        params.put("eventName", "Dinner at my house");
-
-        subjectBanner.runCommand(MraidJavascriptCommand.CREATE_CALENDAR_EVENT, params);
-
-        verify(mockNativeCommandHandler).createCalendarEvent(any(Context.class),
-                anyMapOf(String.class, String.class));
-    }
-
-    private void attachWebViews() {
-        subjectBanner.attachView(mockBannerWebView);
-        subjectInterstitial.attachView(mockInterstitialWebView);
-
-        verify(mockBannerWebView).setWebViewClient(bannerWebViewClientCaptor.capture());
-        reset(mockBannerWebView);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
deleted file mode 100644
index 8fc20a16..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
+++ /dev/null
@@ -1,1028 +0,0 @@
-package com.mopub.mraid;
-
-import android.app.Activity;
-import android.content.ComponentName;
-import android.content.Intent;
-import android.content.pm.ActivityInfo;
-import android.content.pm.PackageManager;
-import android.content.pm.ResolveInfo;
-import android.net.Uri;
-import android.os.Build;
-import android.view.View;
-import android.widget.FrameLayout;
-
-import com.mopub.TestSdkHelper;
-import com.mopub.common.AdReport;
-import com.mopub.common.CloseableLayout.ClosePosition;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.Utils;
-import com.mopub.mobileads.BaseVideoPlayerActivityTest;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.mobileads.MraidVideoPlayerActivity;
-import com.mopub.mraid.MraidBridge.MraidBridgeListener;
-import com.mopub.mraid.MraidBridge.MraidWebView;
-import com.mopub.mraid.MraidController.MraidListener;
-import com.mopub.mraid.MraidController.OrientationBroadcastReceiver;
-import com.mopub.mraid.MraidController.ScreenMetricsWaiter;
-import com.mopub.mraid.MraidController.ScreenMetricsWaiter.WaitRequest;
-import com.mopub.mraid.MraidController.UseCustomCloseListener;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Captor;
-import org.mockito.Mock;
-import org.mockito.Mockito;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowApplication;
-
-import java.net.URI;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyBoolean;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class MraidControllerTest {
-    private long broadcastIdentifier = 123;
-    @Mock private AdReport mockAdReport;
-    @Mock private MraidBridge mockBridge;
-    @Mock private MraidBridge mockTwoPartBridge;
-    @Mock private ScreenMetricsWaiter mockScreenMetricsWaiter;
-    @Mock private WaitRequest mockWaitRequest;
-    @Mock private MraidListener mockMraidListener;
-    @Mock private UseCustomCloseListener mockUseCustomCloseListener;
-    @Mock private OrientationBroadcastReceiver mockOrientationBroadcastReceiver;
-    @Captor private ArgumentCaptor<MraidBridgeListener> bridgeListenerCaptor;
-    @Captor private ArgumentCaptor<MraidBridgeListener> twoPartBridgeListenerCaptor;
-
-    private Activity activity;
-    private FrameLayout rootView;
-
-    private MraidController subject;
-
-    @Before
-    public void setUp() {
-        ShadowApplication.setDisplayMetricsDensity(1.0f);
-
-        activity = spy(Robolectric.buildActivity(Activity.class).create().get());
-        activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-
-        rootView = new FrameLayout(activity);
-        when(mockBridge.isVisible()).thenReturn(true);
-
-        // By default, immediately fulfill a screen metrics wait request. Individual tests can
-        // reset this, if desired.
-        when(mockScreenMetricsWaiter.waitFor(Mockito.<View>anyVararg()))
-                .thenReturn(mockWaitRequest);
-        doAnswer(new Answer<Void>() {
-            @Override
-            public Void answer(final InvocationOnMock invocation) throws Throwable {
-                Runnable runnable = (Runnable) invocation.getArguments()[0];
-                runnable.run();
-                return null;
-            }
-        }).when(mockWaitRequest).start(any(Runnable.class));
-
-        subject = new MraidController(
-                activity, mockAdReport, PlacementType.INLINE,
-                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
-        subject.setMraidListener(mockMraidListener);
-        subject.setOrientationBroadcastReceiver(mockOrientationBroadcastReceiver);
-        subject.setRootView(rootView);
-        subject.loadContent("fake_html_data");
-
-        verify(mockBridge).setMraidBridgeListener(bridgeListenerCaptor.capture());
-        verify(mockTwoPartBridge).setMraidBridgeListener(twoPartBridgeListenerCaptor.capture());
-    }
-
-    @Test
-    public void constructor_shouldSetStateToLoading() {
-        ViewState state = subject.getViewState();
-
-        assertThat(state).isEqualTo(ViewState.LOADING);
-    }
-
-    @Test
-    public void bridgeOnReady_shouldSetStateToDefault_shouldCallListener() {
-        bridgeListenerCaptor.getValue().onPageLoaded();
-
-        ViewState state = subject.getViewState();
-
-        assertThat(state).isEqualTo(ViewState.DEFAULT);
-        verify(mockMraidListener).onLoaded(any(View.class));
-    }
-
-    @Test
-    public void handlePageLoad_shouldNotifyBridgeOfVisibilityPlacementScreenSizeAndSupports() {
-        when(mockBridge.isVisible()).thenReturn(true);
-
-        subject.handlePageLoad();
-
-        verify(mockBridge).notifyViewability(true);
-        verify(mockBridge).notifyPlacementType(PlacementType.INLINE);
-        verify(mockBridge).notifyScreenMetrics(any(MraidScreenMetrics.class));
-
-        // The actual values here are supplied by the Mraids class, which has separate tests.
-        verify(mockBridge).notifySupports(false, false, false, false, false);
-    }
-
-    @Test
-    public void handlePageLoad_shouldCancelLastRequest() {
-        subject.handlePageLoad();
-
-        verify(mockScreenMetricsWaiter).cancelLastRequest();
-    }
-
-    @Test
-    public void handlePageLoad_thenDestroy_shouldCancelLastRequest() {
-        subject.handlePageLoad();
-        subject.destroy();
-
-        verify(mockScreenMetricsWaiter, times(2)).cancelLastRequest();
-    }
-
-    @Test
-    public void onPageFailedToLoad_shouldNotifyListener() {
-        bridgeListenerCaptor.getValue().onPageFailedToLoad();
-
-        verify(mockMraidListener).onFailedToLoad();
-    }
-
-    @Test
-    public void onPageFailedToLoad_withTwoPartBridge_shouldNotNotifyListener() {
-        twoPartBridgeListenerCaptor.getValue().onPageFailedToLoad();
-
-        verify(mockMraidListener, never()).onFailedToLoad();
-    }
-
-    @Test
-    public void bridgeOnVisibilityChanged_withTwoPartBridgeAttached_shouldNotNotifyVisibility() {
-        when(mockTwoPartBridge.isAttached()).thenReturn(true);
-
-        bridgeListenerCaptor.getValue().onVisibilityChanged(true);
-        bridgeListenerCaptor.getValue().onVisibilityChanged(false);
-
-        verify(mockBridge, never()).notifyViewability(anyBoolean());
-        verify(mockTwoPartBridge, never()).notifyViewability(anyBoolean());
-    }
-
-    @Test
-    public void handleResize_shouldBeIgnoredWhenLoadingOrHidden() throws MraidCommandException {
-        subject.setViewStateForTesting(ViewState.LOADING);
-        subject.handleResize(100, 200, 0, 0, ClosePosition.TOP_RIGHT, true);
-        assertThat(subject.getViewState()).isEqualTo(ViewState.LOADING);
-
-        subject.setViewStateForTesting(ViewState.HIDDEN);
-        subject.handleResize(100, 200, 0, 0, ClosePosition.TOP_RIGHT, true);
-        assertThat(subject.getViewState()).isEqualTo(ViewState.HIDDEN);
-    }
-
-    @Test(expected = MraidCommandException.class)
-    public void handleResize_shouldThrowExceptionWhenExpanded() throws MraidCommandException {
-        subject.setViewStateForTesting(ViewState.EXPANDED);
-        subject.handleResize(100, 200, 0, 0, ClosePosition.TOP_RIGHT, true);
-    }
-
-    @Test(expected = MraidCommandException.class)
-    public void handleResize_shouldThrowExceptionForInterstitial() throws MraidCommandException {
-        MraidListener listener = mock(MraidListener.class);
-        subject = new MraidController(activity, mockAdReport, PlacementType.INTERSTITIAL,
-                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
-        subject.setMraidListener(listener);
-        subject.setRootView(rootView);
-
-        // Move to DEFAULT state
-        subject.loadContent("fake_html_data");
-        subject.handlePageLoad();
-
-        subject.handleResize(100, 200, 0, 0, ClosePosition.TOP_RIGHT, true);
-    }
-
-    @Test
-    public void handleResize_shouldMoveWebViewToResizedContainer_shouldSetResizedState()
-            throws MraidCommandException {
-        // Move to DEFAULT state
-        subject.handlePageLoad();
-        subject.setRootViewSize(100, 100);
-
-        subject.handleResize(100, 100, 0, 0, ClosePosition.TOP_RIGHT, true);
-        assertThat(subject.getExpandedAdContainer().getChildCount()).isEqualTo(2);
-        assertThat(subject.getAdContainer().getChildCount()).isEqualTo(0);
-        assertThat(subject.getViewState()).isEqualTo(ViewState.RESIZED);
-    }
-
-    @Test
-    public void handleResize_noAllowOffscreen_smallView_shouldResize()
-            throws MraidCommandException {
-        // Move to DEFAULT state
-        subject.handlePageLoad();
-        subject.setRootViewSize(100, 100);
-
-        subject.handleResize(50, 50, 0, 0, ClosePosition.TOP_RIGHT, /* allowOffscreen */ false);
-        assertThat(subject.getViewState()).isEqualTo(ViewState.RESIZED);
-    }
-
-    @Test(expected = MraidCommandException.class)
-    public void handleResize_noAllowOffscreen_largeView_shouldThrowException()
-            throws MraidCommandException {
-        // Move to DEFAULT state
-        subject.handlePageLoad();
-        subject.setRootViewSize(100, 100);
-
-        subject.handleResize(101, 101, 0, 0, ClosePosition.TOP_RIGHT, /* allowOffscreen */ false);
-    }
-
-    @Test(expected = MraidCommandException.class)
-    public void handleResize_allowOffscreen_largeView_closeButtonTopRight_shouldThrowException()
-            throws MraidCommandException {
-        // Move to DEFAULT state
-        subject.handlePageLoad();
-        subject.setRootViewSize(100, 100);
-
-        subject.handleResize(150, 150, 0, 0, ClosePosition.TOP_RIGHT, /* allowOffscreen */ true);
-    }
-
-    @Test
-    public void handleResize_allowOffscreen_closeButtonTopLeft_shouldNotThrowException()
-            throws MraidCommandException {
-        // Move to DEFAULT state
-        subject.handlePageLoad();
-        subject.setRootViewSize(100, 100);
-
-        subject.handleResize(150, 150, 0, 0, ClosePosition.TOP_LEFT, /* allowOffscreen */ true);
-        assertThat(subject.getViewState()).isEqualTo(ViewState.RESIZED);
-    }
-
-    @Test(expected = MraidCommandException.class)
-    public void handleResize_allowOffscreen_largeOffset_closeButtonBottomRight_shouldThrowException()
-            throws MraidCommandException {
-        // Move to DEFAULT state
-        subject.handlePageLoad();
-        subject.setRootViewSize(100, 1000);
-
-        // Throws an exception because the close button overlaps the edge
-        subject.handleResize(100, 100, 25, 25, ClosePosition.BOTTOM_RIGHT, /* allowOffscreen */
-                true);
-    }
-
-    @Test
-    public void handleResize_allowOffscreen_largeOffset_closeButtonBottomLeft_shouldNotThrowException()
-            throws MraidCommandException {
-        // Move to DEFAULT state
-        subject.handlePageLoad();
-        subject.setRootViewSize(100, 1000);
-
-        subject.handleResize(100, 100, 25, 25, ClosePosition.BOTTOM_LEFT, /* allowOffscreen */
-                true);
-        assertThat(subject.getViewState()).isEqualTo(ViewState.RESIZED);
-    }
-
-    @Test(expected = MraidCommandException.class)
-    public void handleResize_heightSmallerThan50Dips_shouldFail() throws MraidCommandException {
-        subject.handlePageLoad();
-        subject.setRootViewSize(100, 100);
-        subject.handleResize(100, 49, 25, 25, ClosePosition.BOTTOM_LEFT, /* allowOffscreen */
-                false);
-    }
-
-    @Test(expected = MraidCommandException.class)
-    public void handleResize_widthSmallerThan50Dips_shouldFail() throws MraidCommandException {
-        subject.handlePageLoad();
-        subject.setRootViewSize(100, 100);
-        subject.handleResize(49, 100, 25, 25, ClosePosition.BOTTOM_LEFT, /* allowOffscreen */
-                false);
-    }
-
-    @Test
-    public void handleClose_fromResizedState_shouldMoveWebViewToOriginalContainer_shouldNotFireOnClose()
-            throws MraidCommandException {
-        // Move to RESIZED state
-        subject.handlePageLoad();
-        subject.setRootViewSize(100, 100);
-        subject.handleResize(100, 100, 0, 0, ClosePosition.TOP_RIGHT, false);
-
-        subject.handleClose();
-
-        assertThat(subject.getExpandedAdContainer().getChildCount()).isEqualTo(1);
-        assertThat(subject.getAdContainer().getChildCount()).isEqualTo(1);
-        assertThat(subject.getViewState()).isEqualTo(ViewState.DEFAULT);
-        verify(mockMraidListener, never()).onClose();
-    }
-
-    @Test(expected = MraidCommandException.class)
-    public void handleExpand_afterDestroy_shouldThrowException() throws MraidCommandException {
-        subject.destroy();
-        subject.handleExpand(null, false);
-    }
-
-    @Test
-    public void handleExpand_shouldBeIgnoredForInterstitial() throws MraidCommandException {
-        MraidListener listener = mock(MraidListener.class);
-        subject = new MraidController(activity, mockAdReport, PlacementType.INTERSTITIAL,
-                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
-        subject.setMraidListener(listener);
-        subject.setRootView(rootView);
-
-        // Move to DEFAULT state
-        subject.loadContent("fake_html_data");
-        subject.handlePageLoad();
-
-        subject.handleExpand(null, false);
-
-        assertThat(subject.getViewState()).isEqualTo(ViewState.DEFAULT);
-        verify(listener, never()).onExpand();
-    }
-
-    @Test
-    public void handleExpand_shouldBeIgnoredWhenLoadingHiddenOrExpanded()
-            throws MraidCommandException {
-        subject.setViewStateForTesting(ViewState.LOADING);
-        subject.handleExpand(null, false);
-        assertThat(subject.getViewState()).isEqualTo(ViewState.LOADING);
-        verify(mockMraidListener, never()).onExpand();
-
-        subject.setViewStateForTesting(ViewState.HIDDEN);
-        subject.handleExpand(null, false);
-        assertThat(subject.getViewState()).isEqualTo(ViewState.HIDDEN);
-        verify(mockMraidListener, never()).onExpand();
-
-        subject.setViewStateForTesting(ViewState.EXPANDED);
-        subject.handleExpand(null, false);
-        assertThat(subject.getViewState()).isEqualTo(ViewState.EXPANDED);
-        verify(mockMraidListener, never()).onExpand();
-    }
-
-    @Test
-    public void handleExpand_withNoUrl_shouldMoveWebViewToExpandedContainer_shouldCallOnExpand()
-            throws MraidCommandException {
-        // Move to DEFAULT state
-        subject.handlePageLoad();
-
-        subject.handleExpand(null, false);
-
-        assertThat(subject.getExpandedAdContainer().getChildCount()).isEqualTo(2);
-        assertThat(subject.getAdContainer().getChildCount()).isEqualTo(0);
-        verify(mockMraidListener).onExpand();
-    }
-
-    @Test
-    public void handleExpand_withTwoPartUrl_shouldAttachTwoPartBridge_shouldCallOnExpand()
-            throws MraidCommandException {
-        // Move to DEFAULT state
-        subject.handlePageLoad();
-
-        subject.handleExpand(URI.create("https://two-part-url"), false);
-
-        verify(mockTwoPartBridge).setMraidBridgeListener(any(MraidBridgeListener.class));
-        verify(mockTwoPartBridge).attachView(any(MraidWebView.class));
-        verify(mockTwoPartBridge).setContentUrl(URI.create("https://two-part-url").toString());
-
-        assertThat(subject.getExpandedAdContainer().getChildCount()).isEqualTo(2);
-        assertThat(subject.getAdContainer().getChildCount()).isEqualTo(1);
-        verify(mockMraidListener).onExpand();
-        assertThat(subject.getViewState()).isEqualTo(ViewState.EXPANDED);
-    }
-
-    @Test
-    public void handleClose_afterDestroy_shouldNotFireOnClose() {
-        subject.destroy();
-        subject.handleClose();
-
-        verify(mockMraidListener, never()).onClose();
-    }
-
-    @Test
-    public void handleClose_fromExpandedState_shouldMoveWebViewToOriginalContainer_shouldFireOnClose() throws MraidCommandException {
-        // Move to EXPANDED state
-        subject.handlePageLoad();
-        subject.handleExpand(null, false);
-
-        subject.handleClose();
-
-        assertThat(subject.getExpandedAdContainer().getChildCount()).isEqualTo(1);
-        assertThat(subject.getAdContainer().getChildCount()).isEqualTo(1);
-        assertThat(subject.getViewState()).isEqualTo(ViewState.DEFAULT);
-        verify(mockMraidListener).onClose();
-    }
-
-    @Test
-    public void handleClose_fromTwoPartExpandedState_shouldDetachTwoPartBridge_shouldMoveWebViewToOriginalContainer_shouldFireOnClose()
-            throws MraidCommandException {
-        URI uri = URI.create("https://two-part-url");
-
-        // Move to two part EXPANDED state
-        subject.handlePageLoad();
-        subject.handleExpand(uri, false);
-        when(mockTwoPartBridge.isAttached()).thenReturn(true);
-
-        subject.handleClose();
-
-        verify(mockTwoPartBridge).detach();
-        assertThat(subject.getExpandedAdContainer().getChildCount()).isEqualTo(1);
-        assertThat(subject.getAdContainer().getChildCount()).isEqualTo(1);
-        assertThat(subject.getViewState()).isEqualTo(ViewState.DEFAULT);
-
-        verify(mockMraidListener).onClose();
-    }
-
-    @Test
-    public void handleClose_fromDefaultState_shouldHideAdContainer_shouldCallOnClose() {
-        // Move to DEFAULT state
-        subject.handlePageLoad();
-        assertThat(subject.getViewState()).isEqualTo(ViewState.DEFAULT);
-
-        subject.handleClose();
-
-        assertThat(subject.getAdContainer().getVisibility()).isEqualTo(View.INVISIBLE);
-        assertThat(subject.getViewState()).isEqualTo(ViewState.HIDDEN);
-
-        verify(mockMraidListener).onClose();
-    }
-
-    @Test
-    public void handleShowVideo_shouldStartVideoPlayerActivity() {
-        subject.handleShowVideo("https://video");
-        BaseVideoPlayerActivityTest.assertMraidVideoPlayerActivityStarted(
-                MraidVideoPlayerActivity.class, "https://video");
-    }
-
-    @Test
-    public void handleCustomClose_shouldUpdateExpandedContainer() {
-        subject.handleCustomClose(true);
-        assertThat(subject.getExpandedAdContainer().isCloseVisible()).isFalse();
-
-        subject.handleCustomClose(false);
-        assertThat(subject.getExpandedAdContainer().isCloseVisible()).isTrue();
-    }
-
-    @Test
-    public void handleCustomClose_shouldCallCustomCloseChangedListener() {
-        subject.setUseCustomCloseListener(mockUseCustomCloseListener);
-
-        subject.handleCustomClose(true);
-        verify(mockUseCustomCloseListener).useCustomCloseChanged(true);
-
-        reset(mockUseCustomCloseListener);
-        subject.handleCustomClose(false);
-        verify(mockUseCustomCloseListener).useCustomCloseChanged(false);
-    }
-
-    @Test
-    public void handleOpen_withMoPubNativeBrowserUrl_shouldOpenExternalBrowser() {
-        subject.handleOpen("mopubnativebrowser://navigate?url=https%3A%2F%2Fwww.example.com");
-
-        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(intent.getDataString()).isEqualTo("https://www.example.com");
-        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_VIEW);
-    }
-
-    @Test
-    public void handleOpen_withMalformedMoPubNativeBrowserUrl_shouldNotStartNewActivity() {
-        // invalid host parameter 'nav'
-        subject.handleOpen("mopubnativebrowser://nav?url=https%3A%2F%2Fwww.example.com");
-
-        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
-    }
-
-    @Test
-    public void handleOpen_withApplicationUrl_shouldStartNewIntent() {
-        String applicationUrl = "amzn://blah";
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW, Uri
-                .parse(applicationUrl)), new ResolveInfo());
-
-        subject.handleOpen(applicationUrl);
-
-        Intent startedIntent = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(startedIntent).isNotNull();
-        // Since we are not using an Activity context, we should have FLAG_ACTIVITY_NEW_TASK
-        assertThat(Utils.bitMaskContainsFlag(startedIntent.getFlags(),
-                Intent.FLAG_ACTIVITY_NEW_TASK)).isTrue();
-        assertThat(startedIntent.getComponent()).isNull();
-
-        verify(mockMraidListener).onOpen();
-    }
-
-    @Test
-    public void handleOpen_withHttpApplicationUrl_shouldStartMoPubBrowser() {
-        String applicationUrl = "https://www.mopub.com/";
-
-        subject.handleOpen(applicationUrl);
-
-        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
-        Intent startedIntent = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(startedIntent).isNotNull();
-        // Since we are not using an Activity context, we should have FLAG_ACTIVITY_NEW_TASK
-        assertThat(Utils.bitMaskContainsFlag(startedIntent.getFlags(),
-                Intent.FLAG_ACTIVITY_NEW_TASK)).isTrue();
-        assertThat(startedIntent.getComponent().getClassName())
-                .isEqualTo("com.mopub.common.MoPubBrowser");
-
-        verify(mockMraidListener).onOpen();
-    }
-
-    @Test
-    public void handleOpen_withApplicationUrlThatCantBeHandled_shouldDefaultToMoPubBrowser()
-            throws Exception {
-        String applicationUrl = "canthandleme://blah";
-
-        subject.handleOpen(applicationUrl);
-
-        Intent startedIntent = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(startedIntent).isNull();
-
-        verify(mockMraidListener).onOpen();
-    }
-
-    @Test
-    public void handleOpen_withAboutBlankUrl_shouldFailSilently() {
-        final String url = "about:blank";
-
-        subject.handleOpen(url);
-
-        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
-    }
-
-    @Test
-    public void orientationBroadcastReceiver_whenUnregistered_shouldIgnoreOnReceive() {
-        Intent intent = mock(Intent.class);
-        when(intent.getAction()).thenReturn("some bogus action which we hope never to see");
-
-        MraidController.OrientationBroadcastReceiver receiver =
-                subject.new OrientationBroadcastReceiver();
-        receiver.register(activity);
-        receiver.unregister();
-        receiver.onReceive(activity, intent);
-
-        verify(intent, never()).getAction();
-    }
-
-    @Test
-    public void orientationProperties_shouldDefaultToAllowChangeTrueAndForceOrientationNone() {
-        // These are the default values provided by the MRAID spec
-        assertThat(subject.getAllowOrientationChange()).isTrue();
-        assertThat(subject.getForceOrientation()).isEqualTo(MraidOrientation.NONE);
-    }
-
-    @Test
-    public void handleSetOrientationProperties_withForcedOrientation_shouldUpdateProperties() throws MraidCommandException, PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        subject.handleSetOrientationProperties(false, MraidOrientation.LANDSCAPE);
-
-        assertThat(subject.getAllowOrientationChange()).isFalse();
-        assertThat(subject.getForceOrientation()).isEqualTo(MraidOrientation.LANDSCAPE);
-    }
-
-    @Test
-    public void handleSetOrientationProperties_withOrientationNone_withApplicationContext_shouldUpdateProperties() throws MraidCommandException, PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        subject = new MraidController(
-                activity.getApplicationContext(), mockAdReport, PlacementType.INLINE,
-                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
-
-        subject.handleSetOrientationProperties(false, MraidOrientation.NONE);
-
-        assertThat(subject.getAllowOrientationChange()).isFalse();
-        assertThat(subject.getForceOrientation()).isEqualTo(MraidOrientation.NONE);
-    }
-
-    @Test
-    public void handleSetOrientationProperties_withForcedOrientation_withApplicationContext_shouldThrowMraidCommandExceptionAndNotUpdateProperties() throws PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        subject = new MraidController(
-                activity.getApplicationContext(), mockAdReport, PlacementType.INLINE,
-                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
-
-        try {
-            subject.handleSetOrientationProperties(false, MraidOrientation.LANDSCAPE);
-            fail("Expected MraidCommandException");
-        } catch (MraidCommandException e) {
-            // pass
-        }
-
-        assertThat(subject.getAllowOrientationChange()).isTrue();
-        assertThat(subject.getForceOrientation()).isEqualTo(MraidOrientation.NONE);
-    }
-
-    @Test
-    public void handleSetOrientationProperties_withActivityInfoNotFound_shouldThrowMraidCommandException() throws PackageManager.NameNotFoundException {
-        setMockActivityInfo(false, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        try {
-            subject.handleSetOrientationProperties(false, MraidOrientation.LANDSCAPE);
-            fail("Expected MraidCommandException");
-        } catch (MraidCommandException e) {
-            // pass
-        }
-
-        assertThat(subject.getAllowOrientationChange()).isTrue();
-        assertThat(subject.getForceOrientation()).isEqualTo(MraidOrientation.NONE);
-    }
-
-    @Test
-    public void handleSetOrientationProperties_whenTryingToSetToOrientationDeclaredInManifest_shouldUpdateProperties() throws Exception {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_PORTRAIT,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        subject.handleSetOrientationProperties(true, MraidOrientation.PORTRAIT);
-
-        assertThat(subject.getAllowOrientationChange()).isTrue();
-        assertThat(subject.getForceOrientation()).isEqualTo(MraidOrientation.PORTRAIT);
-    }
-
-    @Test
-    public void handleSetOrientationProperties_whenTryingToSetToOrientationDifferentFromManifest_shouldThrowMraidCommandException() throws Exception {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_PORTRAIT,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        try {
-            subject.handleSetOrientationProperties(true, MraidOrientation.LANDSCAPE);
-            fail("Expected MraidCommandException");
-        } catch (MraidCommandException e) {
-            // pass
-        }
-
-        assertThat(subject.getAllowOrientationChange()).isTrue();
-        assertThat(subject.getForceOrientation()).isEqualTo(MraidOrientation.NONE);
-    }
-
-    @Test
-    public void handleSetOrientationProperties_withForcedOrientation_withMissingConfigChangeOrientation_shouldThrowMraidCommandException() throws Exception {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                /* missing CONFIG_ORIENTATION */ ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        try {
-            subject.handleSetOrientationProperties(true, MraidOrientation.PORTRAIT);
-            fail("Expected MraidCommandException");
-        } catch (MraidCommandException e) {
-            // pass
-        }
-
-        assertThat(subject.getAllowOrientationChange()).isTrue();
-        assertThat(subject.getForceOrientation()).isEqualTo(MraidOrientation.NONE);
-    }
-
-    @Test(expected = MraidCommandException.class)
-    public void handleSetOrientationProperties_withMissingConfigChangeScreenSize_shouldThrowMraidCommandException() throws Exception {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION);
-
-        subject.handleSetOrientationProperties(false, MraidOrientation.LANDSCAPE);
-
-        assertThat(subject.getAllowOrientationChange()).isTrue();
-        assertThat(subject.getForceOrientation()).isEqualTo(MraidOrientation.NONE);
-    }
-
-    @Test
-    public void handleSetOrientationProperties_forExpandedBanner_shouldImmediatelyChangeScreenOrientation() throws MraidCommandException, PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        subject.handlePageLoad();
-        subject.handleExpand(null, false);
-
-        subject.handleSetOrientationProperties(true, MraidOrientation.LANDSCAPE);
-
-        assertThat(activity.getRequestedOrientation()).isEqualTo(ActivityInfo
-                .SCREEN_ORIENTATION_LANDSCAPE);
-    }
-
-    @Test
-    public void handleSetOrientationProperties_forExpandedBanner_beforeExpandIsCalled_shouldChangeScreenOrientationUponExpand() throws MraidCommandException, PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        subject.handlePageLoad();
-        subject.handleSetOrientationProperties(true, MraidOrientation.LANDSCAPE);
-
-        assertThat(activity.getRequestedOrientation()).isEqualTo(ActivityInfo
-                .SCREEN_ORIENTATION_PORTRAIT);
-
-        subject.handleExpand(null, false);
-
-        assertThat(activity.getRequestedOrientation()).isEqualTo(ActivityInfo
-                .SCREEN_ORIENTATION_LANDSCAPE);
-    }
-
-    @Test
-    public void handleSetOrientationProperties_forDefaultBanner_shouldNotChangeScreenOrientation() throws MraidCommandException, PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        subject.handlePageLoad();
-        // don't expand the banner
-
-        subject.handleSetOrientationProperties(true, MraidOrientation.LANDSCAPE);
-
-        assertThat(activity.getRequestedOrientation()).isEqualTo(ActivityInfo
-                .SCREEN_ORIENTATION_PORTRAIT);
-    }
-
-    @Test
-    public void handleSetOrientationProperties_forInterstitial_shouldChangeScreenOrientation() throws MraidCommandException, PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        subject = new MraidController(
-                activity, mockAdReport, PlacementType.INTERSTITIAL,
-                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
-
-        assertThat(activity.getRequestedOrientation()).isEqualTo(ActivityInfo
-                .SCREEN_ORIENTATION_PORTRAIT);
-
-        subject.handlePageLoad();
-        subject.handleSetOrientationProperties(true, MraidOrientation.LANDSCAPE);
-
-        assertThat(activity.getRequestedOrientation()).isEqualTo(ActivityInfo
-                .SCREEN_ORIENTATION_LANDSCAPE);
-    }
-
-    @Test
-    public void shouldAllowForceOrientation_withNoneOrientation_shouldReturnTrue() throws PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        final boolean result = subject.shouldAllowForceOrientation(MraidOrientation.NONE);
-
-        assertThat(result).isTrue();
-    }
-
-    @Test
-    public void shouldAllowForceOrientation_withApplicationContext_shouldReturnFalse() throws PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        subject = new MraidController(
-                activity.getApplicationContext(), mockAdReport, PlacementType.INLINE,
-                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
-
-        final boolean result = subject.shouldAllowForceOrientation(MraidOrientation.PORTRAIT);
-
-        assertThat(result).isFalse();
-    }
-
-    @Test(expected = MraidCommandException.class)
-    public void lockOrientation_withApplicationContext_shouldThrowMraidCommandException() throws MraidCommandException, PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        subject = new MraidController(
-                activity.getApplicationContext(), mockAdReport, PlacementType.INLINE,
-                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
-
-        subject.lockOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
-    }
-
-    @Test
-    public void lockOrientation_withActivityContext_shouldInitializeOriginalActivityOrientationAndCallActivitySetOrientation() throws MraidCommandException, PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        assertThat(subject.getOriginalActivityOrientation()).isNull();
-        assertThat(activity.getRequestedOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-
-        subject.lockOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-
-        assertThat(subject.getOriginalActivityOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-        assertThat(activity.getRequestedOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-    }
-
-    @Test
-    public void lockOrientation_subsequentTimes_shouldNotModifyOriginalActivityOrientation() throws MraidCommandException, PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        subject.lockOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-
-        assertThat(subject.getOriginalActivityOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-
-        subject.lockOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
-
-        assertThat(subject.getOriginalActivityOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-    }
-
-    @Test
-    public void applyOrientation_withLockedOrientation_withForceOrientationNone_withAllowOrientationChangeTrue_shouldResetOrientation() throws MraidCommandException, PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        assertThat(activity.getRequestedOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-
-        subject.lockOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
-
-        assertThat(activity.getRequestedOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
-
-        subject.handleSetOrientationProperties(true, MraidOrientation.NONE);
-        subject.applyOrientation();
-
-        assertThat(activity.getRequestedOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-    }
-
-    @Test
-    public void applyOrientation_withNoLockedOrientation_withForceOrientationNone_withAllowOrientationChangeTrue_shouldDoNothing() throws MraidCommandException, PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        assertThat(activity.getRequestedOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-
-        subject.handleSetOrientationProperties(true, MraidOrientation.NONE);
-        subject.applyOrientation();
-
-        assertThat(activity.getRequestedOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-    }
-
-    @Test
-    public void applyOrientation_withForcedOrientationTrue_shouldSetRequestedOrientationToForcedOrienation() throws MraidCommandException, PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        subject.handleSetOrientationProperties(true, MraidOrientation.LANDSCAPE);
-        subject.applyOrientation();
-
-        assertThat(activity.getRequestedOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
-    }
-
-    @Test
-    public void applyOrientation_withForcedOrientationFalse_shouldSetRequestedOrientationToForcedOrienation() throws MraidCommandException, PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        subject.handleSetOrientationProperties(false, MraidOrientation.LANDSCAPE);
-        subject.applyOrientation();
-
-        assertThat(activity.getRequestedOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
-    }
-
-    @Test
-    public void unapplyOrientation_withALockedOrientation_shouldReturnToOriginalOrientationAndResetOriginalActivityOrientation() throws MraidCommandException, PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        assertThat(subject.getOriginalActivityOrientation()).isNull();
-        assertThat(activity.getRequestedOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-
-        subject.lockOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
-
-        assertThat(subject.getOriginalActivityOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-        assertThat(activity.getRequestedOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
-
-        subject.unApplyOrientation();
-
-        assertThat(subject.getOriginalActivityOrientation()).isNull();
-        assertThat(activity.getRequestedOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-    }
-
-    @Test
-    public void unapplyOrientation_withoutLockedOrientation_shouldNotChangeRequestedOrientation()
-            throws PackageManager.NameNotFoundException {
-        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
-                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
-
-        assertThat(subject.getOriginalActivityOrientation()).isNull();
-        assertThat(activity.getRequestedOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-
-        subject.unApplyOrientation();
-
-        assertThat(subject.getOriginalActivityOrientation()).isNull();
-        assertThat(activity.getRequestedOrientation())
-                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
-    }
-
-    @Test
-    public void destroy_shouldCancelLastMetricsRequest_shouldUnregisterBroadcastReceiver_shouldDetachAllBridges() {
-        subject.destroy();
-
-        verify(mockScreenMetricsWaiter).cancelLastRequest();
-        verify(mockOrientationBroadcastReceiver).unregister();
-        verify(mockBridge).detach();
-        verify(mockTwoPartBridge).detach();
-    }
-
-    @Test
-    public void destroy_withDefaultState_shouldSetMraidWebViewsToNull() {
-        subject.setViewStateForTesting(ViewState.DEFAULT);
-        assertThat(subject.getMraidWebView()).isNotNull();
-        // The two-part WebView is null by default
-        assertThat(subject.getTwoPartWebView()).isNull();
-
-        subject.destroy();
-
-        assertThat(subject.getMraidWebView()).isNull();
-        assertThat(subject.getTwoPartWebView()).isNull();
-    }
-
-    @Test
-    public void destroy_withExpandedState_shouldSetMraidWebViewsToNull()
-            throws MraidCommandException {
-        // Necessary to set up the webview before expanding. Also moves the state to DEFAULT.
-        subject.handlePageLoad();
-        assertThat(subject.getViewState()).isEqualTo(ViewState.DEFAULT);
-        subject.handleExpand(URI.create("https://two-part-url"), false);
-
-        assertThat(subject.getMraidWebView()).isNotNull();
-        assertThat(subject.getTwoPartWebView()).isNotNull();
-
-        subject.destroy();
-
-        assertThat(subject.getMraidWebView()).isNull();
-        assertThat(subject.getTwoPartWebView()).isNull();
-    }
-
-    @Test
-    public void destroy_afterDestroy_shouldNotThrowAnException() {
-        subject.destroy();
-        subject.destroy();
-
-        assertThat(subject.getMraidWebView()).isNull();
-        assertThat(subject.getTwoPartWebView()).isNull();
-    }
-
-    @Test
-    public void destroy_fromExpandedState_shouldRemoveCloseableAdContainerFromContentView()
-            throws MraidCommandException {
-        subject.handlePageLoad();
-        subject.handleExpand(null, false);
-
-        assertThat(rootView.getChildCount()).isEqualTo(1);
-
-        subject.destroy();
-
-        assertThat(rootView.getChildCount()).isEqualTo(0);
-    }
-
-    @Test
-    public void destroy_fromResizedState_shouldRemoveCloseableAdContainerFromContentView()
-            throws MraidCommandException {
-        subject.handlePageLoad();
-        subject.setRootViewSize(100, 100);
-        subject.handleResize(100, 100, 0, 0, ClosePosition.TOP_RIGHT, true);
-
-        assertThat(rootView.getChildCount()).isEqualTo(1);
-
-        subject.destroy();
-
-        assertThat(rootView.getChildCount()).isEqualTo(0);
-    }
-
-    private void setMockActivityInfo(final boolean activityInfoFound, int screenOrientation,
-            int configChanges) throws PackageManager.NameNotFoundException {
-        final ActivityInfo mockActivityInfo = mock(ActivityInfo.class);
-
-        mockActivityInfo.screenOrientation = screenOrientation;
-        mockActivityInfo.configChanges = configChanges;
-
-        final PackageManager mockPackageManager = mock(PackageManager.class);
-        doAnswer(new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
-                if (!activityInfoFound) {
-                    throw new PackageManager.NameNotFoundException("");
-                }
-
-                return mockActivityInfo;
-            }
-        }).when(mockPackageManager).getActivityInfo(any(ComponentName.class), anyInt());
-
-        when(activity.getPackageManager()).thenReturn(mockPackageManager);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java
deleted file mode 100644
index 2744dc6e..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java
+++ /dev/null
@@ -1,136 +0,0 @@
-package com.mopub.mraid;
-
-import android.app.Activity;
-import android.content.Intent;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.mobileads.ResponseBodyInterstitialTest;
-
-import org.junit.Before;
-import org.junit.Ignore;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.Shadows;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowActivity;
-import org.robolectric.shadows.support.v4.ShadowLocalBroadcastManager;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
-import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
-import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class MraidInterstitialTest extends ResponseBodyInterstitialTest {
-    private static final String EXPECTED_HTML_DATA = "<html></html>";
-    private long broadcastIdentifier;
-
-    @Mock CustomEventInterstitialListener customEventInterstitialListener;
-
-    private Map<String, Object> localExtras;
-    private Map<String, String> serverExtras;
-    private Activity context;
-
-    @Before
-    public void setUp() throws Exception {
-        broadcastIdentifier = 2222;
-
-        localExtras = new HashMap<String, Object>();
-        serverExtras = new HashMap<String, String>();
-        serverExtras.put(HTML_RESPONSE_BODY_KEY, EXPECTED_HTML_DATA);
-        localExtras.put(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
-
-        context = Robolectric.buildActivity(Activity.class).create().get();
-
-        subject = new MraidInterstitial();
-    }
-
-    @Test
-    public void loadInterstitial_withMalformedServerExtras_shouldNotifyInterstitialFailed()
-            throws Exception {
-        serverExtras.remove(HTML_RESPONSE_BODY_KEY);
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras,
-                serverExtras);
-
-        verify(customEventInterstitialListener).onInterstitialFailed(NETWORK_INVALID_STATE);
-        verify(customEventInterstitialListener, never()).onInterstitialLoaded();
-    }
-
-    @Ignore
-    @Test
-    public void loadInterstitial_shouldNotifyInterstitialLoaded() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras,
-                serverExtras);
-
-        verify(customEventInterstitialListener).onInterstitialLoaded();
-    }
-
-    @Test
-    public void loadInterstitial_shouldConnectListenerToBroadcastReceiver() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras,
-                serverExtras);
-
-        Intent intent =
-                getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, broadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener).onInterstitialShown();
-
-        intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_CLICK, broadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener).onInterstitialClicked();
-
-        intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, broadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener).onInterstitialDismissed();
-    }
-
-    @Test
-    public void showInterstitial_shouldStartActivityWithIntent() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras,
-                serverExtras);
-        subject.showInterstitial();
-
-        ShadowActivity shadowActivity = Shadows.shadowOf(context);
-        Intent intent = shadowActivity.getNextStartedActivityForResult().intent;
-
-        assertThat(intent.getComponent().getClassName())
-                .isEqualTo("com.mopub.mobileads.MraidActivity");
-        assertThat(intent.getExtras().get(HTML_RESPONSE_BODY_KEY)).isEqualTo(EXPECTED_HTML_DATA);
-        assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-    }
-
-    @Test
-    public void onInvalidate_shouldDisconnectListenerToBroadcastReceiver() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras,
-                serverExtras);
-        subject.onInvalidate();
-
-        Intent intent;
-        intent = new Intent(ACTION_INTERSTITIAL_SHOW);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener, never()).onInterstitialShown();
-
-        intent = new Intent(ACTION_INTERSTITIAL_DISMISS);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener, never()).onInterstitialDismissed();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java
deleted file mode 100644
index e9d5b008..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java
+++ /dev/null
@@ -1,815 +0,0 @@
-package com.mopub.mraid;
-
-import android.Manifest;
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.PackageManager;
-import android.content.pm.ResolveInfo;
-import android.os.Environment;
-import android.provider.CalendarContract;
-import android.support.annotation.NonNull;
-import android.util.Pair;
-import android.view.View;
-import android.view.WindowManager;
-import android.widget.LinearLayout;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.test.support.ShadowAsyncTasks;
-import com.mopub.common.util.test.support.ShadowMoPubHttpUrlConnection;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.mobileads.test.support.FileUtils;
-import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
-import com.mopub.mraid.MraidNativeCommandHandler.DownloadImageAsyncTask;
-import com.mopub.mraid.MraidNativeCommandHandler.DownloadImageAsyncTask.DownloadImageAsyncTaskListener;
-import com.mopub.mraid.MraidNativeCommandHandler.MraidCommandFailureListener;
-
-import org.hamcrest.BaseMatcher;
-import org.hamcrest.Description;
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Ignore;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-import org.robolectric.Shadows;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowAlertDialog;
-import org.robolectric.shadows.ShadowApplication;
-import org.robolectric.shadows.ShadowEnvironment;
-import org.robolectric.shadows.ShadowLog;
-import org.robolectric.shadows.ShadowToast;
-
-import java.io.File;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-import java.util.TreeMap;
-
-import static android.content.DialogInterface.BUTTON_NEGATIVE;
-import static android.content.DialogInterface.BUTTON_POSITIVE;
-import static android.os.Environment.MEDIA_MOUNTED;
-import static com.mopub.mraid.MraidNativeCommandHandler.ANDROID_CALENDAR_CONTENT_TYPE;
-import static com.mopub.mraid.MraidNativeCommandHandler.MIME_TYPE_HEADER;
-import static java.io.File.separator;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.argThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class, shadows = {ShadowAsyncTasks.class, ShadowMoPubHttpUrlConnection.class})
-public class MraidNativeCommandHandlerTest {
-    private static final String IMAGE_URI_VALUE = "file://tmp/expectedFile.jpg";
-    private static final String REMOTE_IMAGE_URL = "https://www.mopub.com/expectedFile.jpg";
-    private static final int TIME_TO_PAUSE_FOR_NETWORK = 300;
-    private static final String FAKE_IMAGE_DATA = "imageFileData";
-    //XXX: Robolectric or JUNIT doesn't support the correct suffix ZZZZZ in the parse pattern, so replacing xx:xx with xxxx for time.
-    private static final String CALENDAR_START_TIME = "2013-08-14T20:00:00-0000";
-
-    @Mock MraidCommandFailureListener mockMraidCommandFailureListener;
-    @Mock DownloadImageAsyncTaskListener mockDownloadImageAsyncTaskListener;
-    private MraidNativeCommandHandler subject;
-    private Context context;
-    private Map<String, String> params;
-
-    private File expectedFile;
-    private File pictureDirectory;
-    private File fileWithoutExtension;
-    private TestHttpResponseWithHeaders response;
-
-    @Before
-    public void setUp() throws Exception {
-        subject = new MraidNativeCommandHandler();
-        context = Robolectric.buildActivity(Activity.class).create().get();
-
-        FileUtils.copyFile("etc/expectedFile.jpg", "/tmp/expectedFile.jpg");
-        expectedFile = new File(Environment.getExternalStorageDirectory(), "Pictures" + separator + "expectedFile.jpg");
-        pictureDirectory = new File(Environment.getExternalStorageDirectory(), "Pictures");
-        fileWithoutExtension = new File(pictureDirectory, "file");
-
-        // Mount external storage and grant necessary permissions
-        ShadowEnvironment.setExternalStorageState(MEDIA_MOUNTED);
-        ShadowApplication.getInstance().grantPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE);
-    }
-
-    @After
-    public void tearDown() {
-        ShadowToast.reset();
-    }
-
-    @Test
-    public void showUserDownloadImageAlert_withActivityContext_shouldDisplayAlertDialog() throws Exception {
-        subject.storePicture(context, IMAGE_URI_VALUE, mockMraidCommandFailureListener);
-
-        AlertDialog alertDialog = ShadowAlertDialog.getLatestAlertDialog();
-        ShadowAlertDialog shadowAlertDialog = Shadows.shadowOf(alertDialog);
-
-        assertThat(alertDialog.isShowing());
-
-        assertThat(shadowAlertDialog.getTitle()).isEqualTo("Save Image");
-        assertThat(shadowAlertDialog.getMessage()).isEqualTo("Download image to Picture gallery?");
-        assertThat(shadowAlertDialog.isCancelable()).isTrue();
-
-        assertThat(alertDialog.getButton(BUTTON_POSITIVE).hasOnClickListeners());
-        assertThat(alertDialog.getButton(BUTTON_NEGATIVE)).isNotNull();
-    }
-
-    @Test
-    public void showUserDownloadImageAlert_withAppContext_shouldToastAndStartDownloadImageAsyncTask() throws Exception {
-        assertThat(ShadowToast.shownToastCount()).isEqualTo(0);
-
-        subject.storePicture(context.getApplicationContext(), IMAGE_URI_VALUE, mockMraidCommandFailureListener);
-
-        assertThat(ShadowToast.shownToastCount()).isEqualTo(1);
-        assertThat(ShadowToast.getTextOfLatestToast()).isEqualTo("Downloading image to Picture gallery...");
-
-        assertThat(ShadowAsyncTasks.wasCalled()).isTrue();
-        assertThat(ShadowAsyncTasks.getLatestAsyncTask()).isInstanceOf(DownloadImageAsyncTask.class);
-        final List<?> latestParams = ShadowAsyncTasks.getLatestParams();
-        assertThat(latestParams).hasSize(1);
-        assertThat(latestParams.get(0)).isEqualTo(IMAGE_URI_VALUE);
-    }
-
-    @Test(expected = MraidCommandException.class)
-    public void showUserDownloadImageAlert_whenStorePictureNotSupported_shouldThrowMraidCommandException() throws Exception {
-        ShadowApplication.getInstance().denyPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE);
-
-        subject.storePicture(context, IMAGE_URI_VALUE, mockMraidCommandFailureListener);
-    }
-
-    @Test
-    public void showUserDownloadImageAlert_whenOkayClicked_shouldStartDownloadImageAsyncTask() throws Exception {
-        subject.storePicture(context, IMAGE_URI_VALUE, mockMraidCommandFailureListener);
-
-        ShadowAlertDialog.getLatestAlertDialog().getButton(BUTTON_POSITIVE).performClick();
-
-        assertThat(ShadowAsyncTasks.wasCalled()).isTrue();
-        assertThat(ShadowAsyncTasks.getLatestAsyncTask()).isInstanceOf(DownloadImageAsyncTask.class);
-        final List<?> latestParams = ShadowAsyncTasks.getLatestParams();
-        assertThat(latestParams).hasSize(1);
-        assertThat(latestParams.get(0)).isEqualTo(IMAGE_URI_VALUE);
-    }
-
-    @Test
-    public void showUserDownloadImageAlert_whenCancelClicked_shouldDismissDialog_shouldNotStartDownloadImageAsyncTask() throws Exception {
-        subject.storePicture(context, IMAGE_URI_VALUE, mockMraidCommandFailureListener);
-
-        AlertDialog alertDialog = ShadowAlertDialog.getLatestAlertDialog();
-        ShadowAlertDialog shadowAlertDialog = Shadows.shadowOf(alertDialog);
-
-        alertDialog.getButton(BUTTON_NEGATIVE).performClick();
-        assertThat(shadowAlertDialog.hasBeenDismissed()).isTrue();
-        assertThat(ShadowAsyncTasks.wasCalled()).isFalse();
-    }
-
-    @Test
-    public void downloadImageAsyncTask_doInBackground_shouldReturnTrueAndCreateFile() throws Exception {
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, FAKE_IMAGE_DATA,
-                createHeaders(new Pair<String, String>("Content-Type", "image/jpg")));
-
-        final DownloadImageAsyncTask downloadImageAsyncTask =
-                new DownloadImageAsyncTask(context, mockDownloadImageAsyncTaskListener);
-
-        final Boolean result =
-                downloadImageAsyncTask.doInBackground(new String[]{REMOTE_IMAGE_URL});
-
-        assertThat(result).isTrue();
-        assertThat(expectedFile.exists()).isTrue();
-        assertThat(expectedFile.length()).isEqualTo(FAKE_IMAGE_DATA.length());
-    }
-
-    @Test
-    public void downloadImageAsyncTask_doInBackground_withLocationHeaderSet_shouldUseLocationHeaderAsFilename() throws Exception {
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, FAKE_IMAGE_DATA,
-                createHeaders(
-                        new Pair<String, String>("Content-Type", "image/jpg"),
-                        new Pair<String, String>("Location", "https://www.newhost.com/images/blah/file.wow")
-                )
-        );
-
-        final DownloadImageAsyncTask downloadImageAsyncTask =
-                new DownloadImageAsyncTask(context, mockDownloadImageAsyncTaskListener);
-        final Boolean result =
-                downloadImageAsyncTask.doInBackground(new String[]{REMOTE_IMAGE_URL});
-
-        expectedFile = new File(Environment.getExternalStorageDirectory(), "Pictures" + separator + "file.wow.jpg");
-
-        assertThat(result).isTrue();
-        assertThat(expectedFile.exists()).isTrue();
-        assertThat(expectedFile.length()).isEqualTo(FAKE_IMAGE_DATA.length());
-    }
-
-    @Test
-    public void downloadImageAsyncTask_doInBackground_withMissingMimeTypeHeaders_shouldUseDefaultFilename() throws Exception {
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, FAKE_IMAGE_DATA);
-
-        final DownloadImageAsyncTask downloadImageAsyncTask =
-                new DownloadImageAsyncTask(context, mockDownloadImageAsyncTaskListener);
-        final Boolean result =
-                downloadImageAsyncTask.doInBackground(new String[]{REMOTE_IMAGE_URL});
-
-        assertThat(result).isTrue();
-        assertThat(expectedFile.exists()).isTrue();
-        assertThat(expectedFile.length()).isEqualTo(FAKE_IMAGE_DATA.length());
-    }
-
-    @Test
-    public void downloadImageAsyncTask_doInBackground_withNullArray_shouldReturnFalseAndNotCreateFile() throws Exception {
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, FAKE_IMAGE_DATA,
-                createHeaders(new Pair<String, String>("Content-Type", "image/jpg")));
-
-        final DownloadImageAsyncTask downloadImageAsyncTask =
-                new DownloadImageAsyncTask(context, mockDownloadImageAsyncTaskListener);
-
-        final Boolean result =
-                downloadImageAsyncTask.doInBackground(null);
-
-        assertThat(result).isFalse();
-        assertThat(expectedFile.exists()).isFalse();
-    }
-
-    @Test
-    public void downloadImageAsyncTask_doInBackground_withEmptyArray_shouldReturnFalseAndNotCreateFile() throws Exception {
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, FAKE_IMAGE_DATA,
-                createHeaders(new Pair<String, String>("Content-Type", "image/jpg")));
-
-        final DownloadImageAsyncTask downloadImageAsyncTask =
-                new DownloadImageAsyncTask(context, mockDownloadImageAsyncTaskListener);
-
-        final Boolean result =
-                downloadImageAsyncTask.doInBackground(new String[]{});
-
-        assertThat(result).isFalse();
-        assertThat(expectedFile.exists()).isFalse();
-    }
-
-    @Test
-    public void downloadImageAsyncTask_doInBackground_withArrayContainingNull_shouldReturnFalseAndNotCreateFile() throws Exception {
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, FAKE_IMAGE_DATA,
-                createHeaders(new Pair<String, String>("Content-Type", "image/jpg")));
-
-        final DownloadImageAsyncTask downloadImageAsyncTask =
-                new DownloadImageAsyncTask(context, mockDownloadImageAsyncTaskListener);
-
-        final Boolean result =
-                downloadImageAsyncTask.doInBackground(new String[]{null});
-
-        assertThat(result).isFalse();
-        assertThat(expectedFile.exists()).isFalse();
-    }
-
-    @Test
-    public void downloadImage_withFailedImageDownload_shouldToastErrorMessageAndNotifyOnFailure() {
-        assertThat(ShadowToast.shownToastCount()).isEqualTo(0);
-        subject.downloadImage(context.getApplicationContext(), IMAGE_URI_VALUE, mockMraidCommandFailureListener);
-
-        DownloadImageAsyncTask latestAsyncTask = (DownloadImageAsyncTask) ShadowAsyncTasks.getLatestAsyncTask();
-        latestAsyncTask.getListener().onFailure();
-
-        assertThat(ShadowToast.shownToastCount()).isEqualTo(1);
-        assertThat(ShadowToast.getTextOfLatestToast()).isEqualTo("Image failed to download.");
-        verify(mockMraidCommandFailureListener).onFailure(any(MraidCommandException.class));
-    }
-
-    @Test
-    public void downloadImage_withMimeTypeAndNoFileExtension_shouldSavePictureWithMimeType() throws Exception {
-        String fileNameWithNoExtension = "https://www.somewhere.com/images/blah/file";
-
-        assertThatMimeTypeWasAddedCorrectly(
-                fileNameWithNoExtension,
-                "image/jpg",
-                "file.jpg",
-                ".jpg");
-    }
-
-    @Test
-    public void downloadImage_withMultipleContentTypesAndNoFileExtension_shouldSavePictureWithMimeType() throws Exception {
-        String fileNameWithNoExtension = "https://www.somewhere.com/images/blah/file";
-
-        assertThatMimeTypeWasAddedCorrectly(
-                fileNameWithNoExtension,
-                "text/html; image/png",
-                "file.png",
-                ".png");
-    }
-
-    @Test
-    public void downloadImage_withMimeTypeAndFileExtension_shouldSavePictureWithFileExtension() throws Exception {
-        String fileNameWithExtension = "https://www.somewhere.com/images/blah/file.extension";
-
-        assertThatMimeTypeWasAddedCorrectly(
-                fileNameWithExtension,
-                "image/extension",
-                "file.extension",
-                ".extension");
-
-        assertThat((expectedFile.getName()).endsWith(".extension.extension")).isFalse();
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void createCalendarEvent_withMinimumValidParams_shouldCreateEventIntent() throws Exception {
-        setupCalendarParams();
-
-        subject.createCalendarEvent(context, params);
-
-        verify(mockMraidCommandFailureListener, never()).onFailure(any(MraidCommandException.class));
-
-        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
-
-        assertThat(intent.getType()).isEqualTo(ANDROID_CALENDAR_CONTENT_TYPE);
-        assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(intent.getStringExtra(CalendarContract.Events.TITLE)).isNotNull();
-        assertThat(intent.getLongExtra(CalendarContract.EXTRA_EVENT_BEGIN_TIME, -1)).isNotEqualTo(-1);
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void createCalendarEvent_withoutSecondsOnStartDate_shouldCreateEventIntent() throws Exception {
-        setupCalendarParams();
-        params.put("start", "2012-12-21T00:00-0500");
-
-        subject.createCalendarEvent(context, params);
-
-        verify(mockMraidCommandFailureListener, never()).onFailure(any(MraidCommandException.class));
-
-        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
-
-        assertThat(intent.getType()).isEqualTo(ANDROID_CALENDAR_CONTENT_TYPE);
-        assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(intent.getStringExtra(CalendarContract.Events.TITLE)).isNotNull();
-        assertThat(intent.getLongExtra(CalendarContract.EXTRA_EVENT_BEGIN_TIME, -1)).isNotEqualTo(-1);
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void createCalendarEvent_withDailyRecurrence_shouldCreateCalendarIntent() throws Exception {
-        setupCalendarParams();
-        params.put("frequency", "daily");
-
-        subject.createCalendarEvent(context, params);
-
-        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(intent.getType()).isEqualTo(ANDROID_CALENDAR_CONTENT_TYPE);
-        assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=DAILY;");
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void createCalendarEvent_withDailyRecurrence_withInterval_shouldCreateCalendarIntent() throws Exception {
-        setupCalendarParams();
-        params.put("frequency", "daily");
-        params.put("interval", "2");
-
-        subject.createCalendarEvent(context, params);
-
-        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=DAILY;INTERVAL=2;");
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void createCalendarEvent_withWeeklyRecurrence_shouldCreateCalendarIntent() throws Exception {
-        setupCalendarParams();
-        params.put("frequency", "weekly");
-
-        subject.createCalendarEvent(context, params);
-
-        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=WEEKLY;");
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void createCalendarEvent_withWeeklyRecurrence_withInterval_withOutWeekday_shouldCreateCalendarIntent() throws Exception {
-        setupCalendarParams();
-        params.put("frequency", "weekly");
-        params.put("interval", "7");
-
-        subject.createCalendarEvent(context, params);
-
-        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=WEEKLY;INTERVAL=7;");
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void createCalendarEvent_withWeeklyRecurrence_onAllWeekDays_shouldCreateCalendarIntent() throws Exception {
-        setupCalendarParams();
-        params.put("frequency", "weekly");
-        params.put("daysInWeek", "0,1,2,3,4,5,6");
-
-        subject.createCalendarEvent(context, params);
-
-        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=WEEKLY;BYDAY=SU,MO,TU,WE,TH,FR,SA;");
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void createCalendarEvent_withWeeklyRecurrence_onDuplicateWeekDays_shouldCreateCalendarIntent() throws Exception {
-        setupCalendarParams();
-        params.put("frequency", "weekly");
-        params.put("daysInWeek", "3,2,3,3,7,0");
-
-        subject.createCalendarEvent(context, params);
-
-        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=WEEKLY;BYDAY=WE,TU,SU;");
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void createCalendarEvent_withWeeklyRecurrence_withInterval_withWeekDay_shouldCreateCalendarIntent() throws Exception {
-        setupCalendarParams();
-        params.put("frequency", "weekly");
-        params.put("interval", "1");
-        params.put("daysInWeek", "1");
-
-        subject.createCalendarEvent(context, params);
-
-        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=WEEKLY;INTERVAL=1;BYDAY=MO;");
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void createCalendarEvent_withDailyRecurrence_withWeeklyRecurrence_withMonthlyOccurence_shouldCreateDailyCalendarIntent() throws Exception {
-        setupCalendarParams();
-        params.put("frequency", "daily");
-        params.put("frequency", "daily");
-        params.put("frequency", "daily");
-        params.put("interval", "2");
-        params.put("daysInWeek", "1");
-
-        subject.createCalendarEvent(context, params);
-
-        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=DAILY;INTERVAL=2;");
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void createCalendarEvent_withMonthlyRecurrence_withOutInterval_shouldCreateCalendarIntent() throws Exception {
-        setupCalendarParams();
-        params.put("frequency", "monthly");
-
-        subject.createCalendarEvent(context, params);
-
-        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=MONTHLY;");
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void createCalendarEvent_withMonthlyRecurrence_withInterval_shouldCreateCalendarIntent() throws Exception {
-        setupCalendarParams();
-        params.put("frequency", "monthly");
-        params.put("interval", "2");
-
-        subject.createCalendarEvent(context, params);
-
-        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=MONTHLY;INTERVAL=2;");
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void createCalendarEvent_withMonthlyRecurrence_withOutInterval_withDaysOfMonth_shouldCreateCalendarIntent() throws Exception {
-        setupCalendarParams();
-        params.put("frequency", "monthly");
-        params.put("daysInMonth", "2,-15");
-
-        subject.createCalendarEvent(context, params);
-
-        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=MONTHLY;BYMONTHDAY=2,-15;");
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void createCalendarEvent_withMonthlyRecurrence_withInvalidDaysOfMonth_shouldNotCreateCalendarIntent() throws Exception {
-        setupCalendarParams();
-        params.put("frequency", "monthly");
-        params.put("daysInMonth", "55");
-
-        subject.createCalendarEvent(context, params);
-
-        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
-
-        assertThat(intent).isNull();
-        assertThat(ShadowLog.getLogs().size()).isEqualTo(1);
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void createCalendarEvent_withWeeklyRecurrence_withInvalidDaysOfWeek_shouldNotCreateCalendarIntent() throws Exception {
-        setupCalendarParams();
-        params.put("frequency", "weekly");
-        params.put("daysInWeek", "-1,20");
-
-        subject.createCalendarEvent(context, params);
-
-        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
-
-        assertThat(intent).isNull();
-        assertThat(ShadowLog.getLogs().size()).isEqualTo(1);
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void createCalendarEvent_withInvalidDate_shouldFireErrorEvent() throws Exception {
-        params.put("start", "2013-08-14T09:00.-08:00");
-        params.put("description", "Some Event");
-
-        subject.createCalendarEvent(context, params);
-
-        verify(mockMraidCommandFailureListener).onFailure(any(MraidCommandException.class));
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void createCalendarEvent_withMissingParameters_shouldFireErrorEvent() throws Exception {
-        //it needs a start time
-        params.put("description", "Some Event");
-
-        subject.createCalendarEvent(context, params);
-
-        verify(mockMraidCommandFailureListener).onFailure(any(MraidCommandException.class));
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void createCalendarEvent_withNullDate_shouldFireErrorEvent() throws Exception {
-        params.put("start", null);
-        params.put("description", "Some Event");
-
-        subject.createCalendarEvent(context, params);
-
-        verify(mockMraidCommandFailureListener).onFailure(any(MraidCommandException.class));
-    }
-
-    @Ignore("Mraid 2.0")
-    @Test
-    public void
-    createCalendarEvent_withValidParamsAllExceptRecurrence_shouldCreateEventIntent() throws Exception {
-        setupCalendarParams();
-        params.put("location", "my house");
-        params.put("end", "2013-08-14T22:01:01-0000");
-        params.put("summary", "some description actually");
-        params.put("transparency", "transparent");
-
-        subject.createCalendarEvent(context, params);
-
-        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
-
-        assertThat(intent.getType()).isEqualTo(ANDROID_CALENDAR_CONTENT_TYPE);
-        assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(intent.getStringExtra(CalendarContract.Events.TITLE)).isNotNull();
-        assertThat(intent.getStringExtra(CalendarContract.Events.DESCRIPTION)).isNotNull();
-        assertThat(intent.getStringExtra(CalendarContract.Events.EVENT_LOCATION)).isNotNull();
-        assertThat(intent.getLongExtra(CalendarContract.EXTRA_EVENT_BEGIN_TIME, -1)).isNotEqualTo(-1);
-        assertThat(intent.getLongExtra(CalendarContract.EXTRA_EVENT_END_TIME, -1)).isNotEqualTo(-1);
-        assertThat(intent.getIntExtra(CalendarContract.Events.AVAILABILITY, -1)).isEqualTo(CalendarContract.Events.AVAILABILITY_FREE);
-    }
-
-    @Test
-    public void isTelAvailable_whenCanAcceptIntent_shouldReturnTrue() throws Exception {
-        context = createMockContextWithSpecificIntentData("tel", null, null, "android.intent.action.DIAL");
-
-        assertThat(subject.isTelAvailable(context)).isTrue();
-    }
-
-    @Test
-    public void isTelAvailable_whenCanNotAcceptIntent_shouldReturnFalse() throws Exception {
-        context = createMockContextWithSpecificIntentData("", null, null, "android.intent.action.DIAL");
-
-        assertThat(subject.isTelAvailable(context)).isFalse();
-    }
-
-    @Test
-    public void isSmsAvailable_whenCanAcceptIntent_shouldReturnTrue() throws Exception {
-        context = createMockContextWithSpecificIntentData("sms", null, null, "android.intent.action.VIEW");
-
-        assertThat(subject.isSmsAvailable(context)).isTrue();
-    }
-
-    @Test
-    public void isSmsAvailable_whenCanNotAcceptIntent_shouldReturnFalse() throws Exception {
-        context = createMockContextWithSpecificIntentData("", null, null, "android.intent.action.VIEW");
-
-        assertThat(subject.isSmsAvailable(context)).isFalse();
-    }
-
-    @Test
-    public void isStorePictureAvailable_whenPermissionDeclaredAndMediaMounted_shouldReturnTrue() throws Exception {
-        ShadowApplication.getInstance().grantPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE);
-        ShadowEnvironment.setExternalStorageState(Environment.MEDIA_MOUNTED);
-
-        assertThat(subject.isStorePictureSupported(context)).isTrue();
-    }
-
-    @Test
-    public void isStorePictureAvailable_whenPermissionDenied_shouldReturnFalse() throws Exception {
-        ShadowApplication.getInstance().denyPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE);
-        ShadowEnvironment.setExternalStorageState(Environment.MEDIA_MOUNTED);
-
-        assertThat(subject.isStorePictureSupported(context)).isFalse();
-    }
-
-    @Test
-    public void isStorePictureAvailable_whenMediaUnmounted_shouldReturnFalse() throws Exception {
-        ShadowApplication.getInstance().grantPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE);
-        ShadowEnvironment.setExternalStorageState(Environment.MEDIA_UNMOUNTED);
-
-        assertThat(subject.isStorePictureSupported(context)).isFalse();
-    }
-
-    @Test
-    public void isCalendarAvailable_shouldReturnTrue() throws Exception {
-        context = createMockContextWithSpecificIntentData(null, null, ANDROID_CALENDAR_CONTENT_TYPE, "android.intent.action.INSERT");
-        assertThat(subject.isCalendarAvailable(context)).isTrue();
-    }
-
-    @Test
-    public void isCalendarAvailable_butCanNotAcceptIntent_shouldReturnFalse() throws
-            Exception {
-        context = createMockContextWithSpecificIntentData(null, null, "vnd.android.cursor.item/NOPE", "android.intent.action.INSERT");
-        assertThat(subject.isCalendarAvailable(context)).isFalse();
-    }
-
-    @Test
-    public void isInlineVideoAvailable_whenViewsAreHardwareAccelerated_whenWindowIsHardwareAccelerated_shouldReturnTrue() throws Exception {
-        Activity activity = Robolectric.buildActivity(Activity.class).create().get();
-        activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
-
-        View mockView = mock(View.class);
-        when(mockView.isHardwareAccelerated()).thenReturn(true);
-        when(mockView.getLayerType()).thenReturn(View.LAYER_TYPE_HARDWARE);
-
-        assertThat(subject.isInlineVideoAvailable(activity, mockView)).isTrue();
-    }
-
-    @Test
-    public void isInlineVideoAvailable_whenViewsAreHardwareAccelerated_whenWindowIsNotHardwareAccelerated_shouldReturnFalse() throws Exception {
-        Activity activity = Robolectric.buildActivity(Activity.class).create().get();
-
-        View mockView = mock(View.class);
-        when(mockView.isHardwareAccelerated()).thenReturn(true);
-        when(mockView.getLayerType()).thenReturn(View.LAYER_TYPE_HARDWARE);
-
-        assertThat(subject.isInlineVideoAvailable(activity, mockView)).isFalse();
-    }
-
-    @Test
-    public void isInlineVideoAvailable_whenViewsAreNotHardwareAccelerated_whenWindowIsHardwareAccelerated_shouldReturnFalse() throws Exception {
-        Activity activity = Robolectric.buildActivity(Activity.class).create().get();
-        activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
-
-        View mockView = mock(View.class);
-        when(mockView.isHardwareAccelerated()).thenReturn(false);
-        when(mockView.getLayerType()).thenReturn(View.LAYER_TYPE_HARDWARE);
-
-        assertThat(subject.isInlineVideoAvailable(activity, mockView)).isFalse();
-    }
-
-    @Test
-    public void isInlineVideoAvailable_whenViewParentIsNotHardwareAccelerated_whenWindowIsHardwareAccelerated_shouldReturnFalse() throws Exception {
-        Activity activity = Robolectric.buildActivity(Activity.class).create().get();
-        activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
-
-        // ViewParent
-        LinearLayout mockLinearLayout = mock(LinearLayout.class);
-        when(mockLinearLayout.isHardwareAccelerated()).thenReturn(false);
-        when(mockLinearLayout.getLayerType()).thenReturn(View.LAYER_TYPE_HARDWARE);
-
-        // View
-        View mockView = mock(View.class);
-        when(mockView.isHardwareAccelerated()).thenReturn(true);
-        when(mockView.getLayerType()).thenReturn(View.LAYER_TYPE_HARDWARE);
-        when(mockView.getParent()).thenReturn(mockLinearLayout);
-
-        assertThat(subject.isInlineVideoAvailable(activity, mockView)).isFalse();
-    }
-
-    private static Context createMockContextWithSpecificIntentData(final String scheme, final String componentName, final String type, final String action) {
-        Context context = mock(Context.class);
-        PackageManager packageManager = mock(PackageManager.class);
-
-        List<ResolveInfo> resolveInfos = new ArrayList<ResolveInfo>();
-        resolveInfos.add(new ResolveInfo());
-
-        stub(context.getPackageManager()).toReturn(packageManager);
-
-        BaseMatcher intentWithSpecificData = new BaseMatcher() {
-            // check that the specific intent has the special data, i.e. "tel:", or a component name, or string type, based on a particular data
-
-            @Override
-            public boolean matches(Object item) {
-                if (item != null && item instanceof Intent ){
-                    boolean result = action != null || type != null || componentName != null || scheme != null;
-                    if (action != null) {
-                        if (((Intent) item).getAction() != null) {
-                            result = result && action.equals(((Intent) item).getAction());
-                        }
-                    }
-
-                    if (type != null) {
-                        if (((Intent) item).getType() != null) {
-                            result = result && type.equals(((Intent) item).getType());
-                        }
-                    }
-
-                    if (componentName != null) {
-                        if (((Intent) item).getComponent() != null) {
-                            result = result && componentName.equals(((Intent) item).getComponent().getClassName());
-                        }
-                    }
-
-                    if (scheme != null) {
-                        if (((Intent) item).getData() != null) {
-                            result = result && scheme.equals(((Intent) item).getData().getScheme());
-                        }
-                    }
-                    return result;
-                }
-                return false;
-            }
-
-            @Override
-            public void describeTo(Description description) {
-
-            }
-        };
-
-        // It is okay to query with specific intent or nothing, because by default, none of the query would normally any resolveInfo anyways
-        stub(packageManager.queryIntentActivities((Intent) argThat(intentWithSpecificData), eq(0))).toReturn(resolveInfos);
-        return context;
-    }
-
-    private Map<String, List<String>> createHeaders(@NonNull final Pair<String, String>... pairs) {
-        final TreeMap<String, List<String>> headers = new TreeMap<String, List<String>>();
-        for (final Pair<String, String> pair : pairs) {
-            String key = pair.first;
-            String value = pair.second;
-
-            if (!headers.containsKey(key)) {
-                headers.put(key, new ArrayList<String>());
-            }
-            headers.get(key).add(value);
-        }
-
-        return headers;
-    }
-
-    private void assertThatMimeTypeWasAddedCorrectly(String originalFileName, String contentType,
-            String expectedFileName, String expectedExtension) throws Exception {
-        expectedFile = new File(pictureDirectory, expectedFileName);
-
-        ShadowMoPubHttpUrlConnection.addPendingResponse(200, FAKE_IMAGE_DATA,
-                createHeaders(new Pair<String, String>(MIME_TYPE_HEADER, contentType)));
-
-        final DownloadImageAsyncTask downloadImageAsyncTask =
-                new DownloadImageAsyncTask(context, mockDownloadImageAsyncTaskListener);
-        final Boolean result =
-                downloadImageAsyncTask.doInBackground(new String[]{originalFileName});
-
-        assertThat(result).isTrue();
-        assertThat(expectedFile.exists()).isTrue();
-        assertThat(expectedFile.getName()).endsWith(expectedExtension);
-        assertThat(fileWithoutExtension.exists()).isFalse();
-    }
-
-    private void setupCalendarParams() {
-        //we need mock Context so that we can validate that isCalendarAvailable() is true
-        Context mockContext = createMockContextWithSpecificIntentData(null,
-                null, ANDROID_CALENDAR_CONTENT_TYPE, "android.intent.action.INSERT");
-
-        //but a mock context doesn't know how to startActivity(), so we stub it to use ShadowContext for starting activity
-        doAnswer(new Answer<Void>() {
-            public Void answer(InvocationOnMock invocation) throws Throwable {
-                if (!(invocation.getArguments()[0] instanceof Intent)) {
-                    throw new ClassCastException("For some reason you are not passing the calendar intent properly");
-                }
-                Context shadowContext = ShadowApplication.getInstance().getApplicationContext();
-                shadowContext.startActivity((Intent) invocation.getArguments()[0]);
-                return null;
-            }
-        }).when(mockContext).startActivity(any(Intent.class));
-
-        params.put("description", "Some Event");
-        params.put("start", CALENDAR_START_TIME);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java
deleted file mode 100644
index b46389de..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java
+++ /dev/null
@@ -1,170 +0,0 @@
-package com.mopub.mraid;
-
-import android.app.Activity;
-import android.content.Context;
-import android.os.Bundle;
-import android.widget.ImageButton;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.mobileads.EventForwardingBroadcastReceiver;
-
-import org.apache.http.HttpRequest;
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.Shadows;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowVideoView;
-import org.robolectric.shadows.httpclient.FakeHttp;
-import org.robolectric.shadows.httpclient.RequestMatcher;
-import org.robolectric.shadows.httpclient.TestHttpResponse;
-import org.robolectric.shadows.support.v4.ShadowLocalBroadcastManager;
-
-import static android.view.View.GONE;
-import static android.view.View.VISIBLE;
-import static com.mopub.mobileads.BaseVideoPlayerActivity.VIDEO_URL;
-import static com.mopub.mobileads.BaseVideoViewController.BaseVideoViewControllerListener;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class MraidVideoViewControllerTest {
-    private Context context;
-    private Bundle bundle;
-    private MraidVideoViewController subject;
-    private BaseVideoViewControllerListener baseVideoViewControllerListener;
-    private EventForwardingBroadcastReceiver broadcastReceiver;
-
-    @Before
-    public void setUp() throws Exception {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        bundle = new Bundle();
-        baseVideoViewControllerListener = mock(BaseVideoViewControllerListener.class);
-
-        bundle.putString(VIDEO_URL, "https://video_url");
-
-        Robolectric.getForegroundThreadScheduler().pause();
-        Robolectric.getBackgroundThreadScheduler().pause();
-
-        FakeHttp.addHttpResponseRule(new RequestMatcher() {
-            @Override
-            public boolean matches(HttpRequest request) {
-                return true;
-            }
-        }, new TestHttpResponse(200, "body"));
-
-        ShadowLocalBroadcastManager.getInstance(context).registerReceiver(broadcastReceiver,
-                new EventForwardingBroadcastReceiver(null, 0).getIntentFilter());
-    }
-
-    @After
-    public void tearDown() throws Exception {
-        Robolectric.getForegroundThreadScheduler().reset();
-        Robolectric.getBackgroundThreadScheduler().reset();
-        FakeHttp.clearPendingHttpResponses();
-
-        ShadowLocalBroadcastManager.getInstance(context).unregisterReceiver(broadcastReceiver);
-    }
-
-    @Test
-    public void constructor_shouldSetListenersAndVideoPath() throws Exception {
-        initializeSubject();
-        ShadowVideoView shadowSubject = Shadows.shadowOf(subject.getVideoView());
-
-        assertThat(shadowSubject.getOnCompletionListener()).isNotNull();
-        assertThat(shadowSubject.getOnErrorListener()).isNotNull();
-
-        assertThat(shadowSubject.getVideoPath()).isEqualTo("https://video_url");
-        assertThat(subject.getVideoView().hasFocus()).isTrue();
-    }
-    
-    @Test
-    public void onCreate_shouldCreateAndHideCloseButton() throws Exception {
-        initializeSubject();
-        subject.onCreate();
-
-        ImageButton closeButton = getCloseButton();
-
-        assertThat(closeButton).isNotNull();
-        assertThat(Shadows.shadowOf(closeButton).getOnClickListener()).isNotNull();
-        assertThat(closeButton.getVisibility()).isEqualTo(GONE);
-    }
-
-    @Test
-    public void backButtonEnabled_shouldReturnTrue() throws Exception {
-        initializeSubject();
-
-        assertThat(subject.backButtonEnabled()).isTrue();
-    }
-
-    @Test
-    public void closeButton_onClick_shouldCallBaseVideoControllerListenerOnFinish() throws Exception {
-        initializeSubject();
-        subject.onCreate();
-
-        getCloseButton().performClick();
-        verify(baseVideoViewControllerListener).onFinish();
-    }
-
-    @Test
-    public void onCompletionListener_shouldCallBaseVideoViewControllerListenerOnFinish() throws Exception {
-        initializeSubject();
-        subject.onCreate();
-
-        getShadowVideoView().getOnCompletionListener().onCompletion(null);
-
-        verify(baseVideoViewControllerListener).onFinish();
-    }
-
-    @Test
-    public void onCompletionListener_shouldShowCloseButton() throws Exception {
-        initializeSubject();
-        subject.onCreate();
-
-        getShadowVideoView().getOnCompletionListener().onCompletion(null);
-
-        assertThat(getCloseButton().getVisibility()).isEqualTo(VISIBLE);
-    }
-
-    @Test
-    public void onCompletionListener_withNullBaseVideoViewControllerListener_shouldNotCallOnFinish() throws Exception {
-    }
-
-    @Test
-    public void onErrorListener_shouldReturnFalseAndNotCallBaseVideoControllerListenerOnFinish() throws Exception {
-        initializeSubject();
-        subject.onCreate();
-
-        assertThat(getShadowVideoView().getOnErrorListener().onError(null, 0, 0)).isEqualTo(false);
-
-        verify(baseVideoViewControllerListener, never()).onFinish();
-    }
-
-    @Test
-    public void onErrorListener_shouldShowCloseButton() throws Exception {
-        initializeSubject();
-        subject.onCreate();
-
-        assertThat(getShadowVideoView().getOnErrorListener().onError(null, 0, 0)).isEqualTo(false);
-
-        assertThat(getCloseButton().getVisibility()).isEqualTo(VISIBLE);
-    }
-
-    private void initializeSubject() {
-        subject = new MraidVideoViewController(context, bundle, null, baseVideoViewControllerListener);
-    }
-
-    private ShadowVideoView getShadowVideoView() {
-        return Shadows.shadowOf(subject.getVideoView());
-    }
-
-    ImageButton getCloseButton() {
-        return (ImageButton) subject.getLayout().getChildAt(1);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/RewardedMraidControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/RewardedMraidControllerTest.java
deleted file mode 100644
index e7f52cc2..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mraid/RewardedMraidControllerTest.java
+++ /dev/null
@@ -1,143 +0,0 @@
-package com.mopub.mraid;
-
-import android.app.Activity;
-import android.content.Context;
-import android.view.View;
-
-import com.mopub.common.AdReport;
-import com.mopub.common.CloseableLayout;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.mobileads.VastVideoRadialCountdownWidget;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import static com.mopub.mraid.RewardedMraidController.DEFAULT_PLAYABLE_DURATION_FOR_CLOSE_BUTTON_MILLIS;
-import static com.mopub.mraid.RewardedMraidController.MILLIS_IN_SECOND;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class RewardedMraidControllerTest {
-    private Context context;
-    private long testBroadcastIdentifier;
-    private RewardedMraidController subject;
-
-    private static final int REWARDED_DURATION_IN_SECONDS = 25;
-    private static final int SHOW_CLOSE_BUTTON_DELAY = REWARDED_DURATION_IN_SECONDS * MILLIS_IN_SECOND;
-
-    @Mock
-    AdReport mockAdReport;
-
-    @Mock
-    CloseableLayout mockCloseableLayout;
-
-    @Before
-    public void setUp() throws Exception {
-        context = spy(Robolectric.buildActivity(Activity.class).create().get());
-        testBroadcastIdentifier = 1111;
-
-        subject = new RewardedMraidController(context, mockAdReport, PlacementType.INTERSTITIAL,
-                REWARDED_DURATION_IN_SECONDS, testBroadcastIdentifier);
-    }
-
-    @Test
-    public void constructor_shouldInitializeShowCloseButtonDelay() {
-        assertThat(subject.getShowCloseButtonDelay()).isEqualTo(SHOW_CLOSE_BUTTON_DELAY);
-    }
-
-    @Test
-    public void constructor_whenRewardedDurationIsNegative_shouldUseDefaultRewardedDuration() {
-        subject = new RewardedMraidController(context, mockAdReport, PlacementType.INTERSTITIAL, -1,
-                testBroadcastIdentifier);
-
-        assertThat(subject.getShowCloseButtonDelay())
-                .isEqualTo(DEFAULT_PLAYABLE_DURATION_FOR_CLOSE_BUTTON_MILLIS);
-    }
-
-    @Test
-    public void constructor_whenRewardedDurationIsLongerThanDefault_shouldUseDefaultRewardedDuration() {
-        subject = new RewardedMraidController(context, mockAdReport, PlacementType.INTERSTITIAL,
-                DEFAULT_PLAYABLE_DURATION_FOR_CLOSE_BUTTON_MILLIS+1, testBroadcastIdentifier);
-
-        assertThat(subject.getShowCloseButtonDelay())
-                .isEqualTo(DEFAULT_PLAYABLE_DURATION_FOR_CLOSE_BUTTON_MILLIS);
-    }
-
-    @Test
-    public void create_shouldSetCloseableLayoutToInvisible() {
-        subject.create(context, mockCloseableLayout);
-
-        verify(mockCloseableLayout).setCloseVisible(false);
-    }
-
-    @Test
-    public void create_shouldInitializeRadialCountdownWidget() {
-        subject.create(context, mockCloseableLayout);
-        VastVideoRadialCountdownWidget radialCountdownWidget = subject.getRadialCountdownWidget();
-
-        assertThat(subject.isCalibrationDone()).isEqualTo(true);
-        assertThat(radialCountdownWidget.getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(radialCountdownWidget.getImageViewDrawable().getInitialCountdownMilliseconds())
-                .isEqualTo(SHOW_CLOSE_BUTTON_DELAY);
-    }
-
-    @Test
-    public void create_shouldInitializeCountdownRunnable() {
-        subject.create(context, mockCloseableLayout);
-
-        assertThat(subject.getCountdownRunnable()).isNotNull();
-    }
-
-    @Test
-    public void pause_shouldStopRunnables() {
-        subject.create(context, mockCloseableLayout);
-        subject.resume();
-        subject.pause();
-
-        assertThat(subject.getCountdownRunnable().isRunning()).isFalse();
-    }
-
-    @Test
-    public void resume_shouldStartRunnables() {
-        subject.create(context, mockCloseableLayout);
-        subject.resume();
-
-        assertThat(subject.getCountdownRunnable().isRunning()).isTrue();
-    }
-
-    @Test
-    public void destroy_shouldStopRunnables() {
-        subject.create(context, mockCloseableLayout);
-        subject.resume();
-        subject.destroy();
-
-        assertThat(subject.getCountdownRunnable().isRunning()).isFalse();
-    }
-
-    @Test
-    public void showPlayableCloseButton_shouldToggleVisibilityStatesAndFireEvents() {
-        subject.create(context, mockCloseableLayout);
-        VastVideoRadialCountdownWidget radialCountdownWidget = subject.getRadialCountdownWidget();
-
-        verify(mockCloseableLayout).setCloseVisible(false);
-        assertThat(radialCountdownWidget.getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(subject.isShowCloseButtonEventFired()).isFalse();
-        assertThat(subject.isRewarded()).isFalse();
-
-        subject.resume();
-        subject.showPlayableCloseButton();
-
-        verify(mockCloseableLayout).setCloseVisible(true);
-        assertThat(radialCountdownWidget.getVisibility()).isEqualTo(View.GONE);
-        assertThat(subject.isShowCloseButtonEventFired()).isTrue();
-        assertThat(subject.isRewarded()).isTrue();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/RewardedMraidInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/RewardedMraidInterstitialTest.java
deleted file mode 100644
index fd400db3..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mraid/RewardedMraidInterstitialTest.java
+++ /dev/null
@@ -1,159 +0,0 @@
-package com.mopub.mraid;
-
-import android.app.Activity;
-import android.content.Intent;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.mobileads.ResponseBodyInterstitialTest;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.Shadows;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowActivity;
-import org.robolectric.shadows.support.v4.ShadowLocalBroadcastManager;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
-import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.common.DataKeys.REWARDED_AD_DURATION_KEY;
-import static com.mopub.common.DataKeys.SHOULD_REWARD_ON_CLICK_KEY;
-import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
-import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.common.IntentActions.ACTION_REWARDED_PLAYABLE_COMPLETE;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class RewardedMraidInterstitialTest extends ResponseBodyInterstitialTest {
-    private static final String EXPECTED_HTML_DATA = "<html></html>";
-    private static final int EXPECTED_REWARDED_DURATION_SECONDS = 15;
-    private static final Boolean EXPECTED_SHOULD_REWARD_ON_CLICK = true;
-    private long broadcastIdentifier;
-
-    @Mock RewardedMraidInterstitial.RewardedMraidInterstitialListener customEventInterstitialListener;
-
-    private Map<String, Object> localExtras;
-    private Map<String, String> serverExtras;
-    private Activity context;
-
-    @Before
-    public void setUp() throws Exception {
-        broadcastIdentifier = 4321;
-
-        localExtras = new HashMap<String, Object>();
-        serverExtras = new HashMap<String, String>();
-        serverExtras.put(HTML_RESPONSE_BODY_KEY, EXPECTED_HTML_DATA);
-        localExtras.put(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
-        localExtras.put(REWARDED_AD_DURATION_KEY, EXPECTED_REWARDED_DURATION_SECONDS);
-        localExtras.put(SHOULD_REWARD_ON_CLICK_KEY, EXPECTED_SHOULD_REWARD_ON_CLICK);
-
-        context = Robolectric.buildActivity(Activity.class).create().get();
-
-        subject = new RewardedMraidInterstitial();
-    }
-
-    @Test
-    public void loadInterstitial_withLocalExtras_shouldSetRewardedDuration_shouldSetShouldRewardOnClick() {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras,
-                serverExtras);
-
-        assertThat(((RewardedMraidInterstitial) subject).getRewardedDuration()).isEqualTo(
-                EXPECTED_REWARDED_DURATION_SECONDS);
-        assertThat(((RewardedMraidInterstitial) subject).isShouldRewardOnClick()).isEqualTo(
-                EXPECTED_SHOULD_REWARD_ON_CLICK);
-    }
-
-    @Test
-    public void loadInterstitial_withLocalExtrasNotComplete_shouldUseDefaultRewardedDurationAndShouldRewardOnClick() {
-        localExtras.remove(REWARDED_AD_DURATION_KEY);
-        localExtras.remove(SHOULD_REWARD_ON_CLICK_KEY);
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras,
-                serverExtras);
-
-        assertThat(((RewardedMraidInterstitial) subject).getRewardedDuration()).isEqualTo(
-                RewardedMraidController.DEFAULT_PLAYABLE_DURATION_FOR_CLOSE_BUTTON_SECONDS);
-        assertThat(((RewardedMraidInterstitial) subject).isShouldRewardOnClick()).isEqualTo(
-                RewardedMraidController.DEFAULT_PLAYABLE_SHOULD_REWARD_ON_CLICK);
-
-    }
-
-    @Test
-    public void loadInterstitial_shouldConnectListenerToBroadcastReceiver() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras,
-                serverExtras);
-
-        Intent intent =
-                getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, broadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener).onInterstitialShown();
-
-        intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_CLICK, broadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener).onInterstitialClicked();
-
-        intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, broadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener).onInterstitialDismissed();
-
-        intent = getIntentForActionAndIdentifier(ACTION_REWARDED_PLAYABLE_COMPLETE,
-                broadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener).onMraidComplete();
-    }
-
-    @Test
-    public void showInterstitial_shouldStartActivityWithIntent() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras,
-                serverExtras);
-        subject.showInterstitial();
-
-        ShadowActivity shadowActivity = Shadows.shadowOf(context);
-        Intent intent = shadowActivity.getNextStartedActivityForResult().intent;
-
-        assertThat(intent.getComponent().getClassName())
-                .isEqualTo("com.mopub.mobileads.RewardedMraidActivity");
-        assertThat(intent.getExtras().get(HTML_RESPONSE_BODY_KEY)).isEqualTo(EXPECTED_HTML_DATA);
-        assertThat(intent.getExtras().get(REWARDED_AD_DURATION_KEY)).isEqualTo(
-                EXPECTED_REWARDED_DURATION_SECONDS);
-        assertThat(intent.getExtras().get(SHOULD_REWARD_ON_CLICK_KEY)).isEqualTo(
-                EXPECTED_SHOULD_REWARD_ON_CLICK);
-    }
-
-    @Test
-    public void onInvalidate_shouldDisconnectListenerToBroadcastReceiver() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras,
-                serverExtras);
-        subject.onInvalidate();
-
-        Intent intent;
-        intent = new Intent(ACTION_INTERSTITIAL_SHOW);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener, never()).onInterstitialShown();
-
-        intent = new Intent(ACTION_INTERSTITIAL_DISMISS);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener, never()).onInterstitialDismissed();
-
-        intent = new Intent(ACTION_REWARDED_PLAYABLE_COMPLETE);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener, never()).onMraidComplete();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/AdRendererRegistryTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/AdRendererRegistryTest.java
deleted file mode 100644
index aa358452..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/AdRendererRegistryTest.java
+++ /dev/null
@@ -1,97 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.content.Context;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class AdRendererRegistryTest {
-
-    private AdRendererRegistry subject;
-    private NativeAd mNativeAd;
-    private Context context;
-
-    @Mock
-    MoPubStaticNativeAdRenderer mockRenderer;
-    @Mock
-    BaseNativeAd mockNativeAd;
-
-    @Before
-    public void setUp() {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        subject = new AdRendererRegistry();
-        mNativeAd = new NativeAd(context, "impression", "click", "adunit",
-                mock(BaseNativeAd.class), mockRenderer);
-        when(mockRenderer.supports(mockNativeAd)).thenReturn(true);
-    }
-
-    @Test
-    public void registerAdRenderer_shouldAddRendererToRegistry() {
-        subject.registerAdRenderer(mockRenderer);
-        assertThat(subject.getRendererIterable()).containsOnly(mockRenderer);
-    }
-
-    @Test
-    public void getRendererCount_shouldReturnCount() {
-        subject.registerAdRenderer(mockRenderer);
-        assertThat(subject.getAdRendererCount()).isEqualTo(1);
-    }
-
-    @Test
-    public void getViewTypeForAd_() {
-        subject.registerAdRenderer(mockRenderer);
-        assertThat(subject.getAdRendererCount()).isEqualTo(1);
-    }
-
-    @Test
-    public void getViewTypeForAd_shouldReturnIndexPlusOneOfMatchedRenderer() {
-        subject.registerAdRenderer(mock(MoPubStaticNativeAdRenderer.class));
-        subject.registerAdRenderer(mockRenderer);
-
-        assertThat(subject.getViewTypeForAd(mNativeAd)).isEqualTo(2);
-    }
-
-    @Test
-    public void getViewTypeForAd_withNoMatchingRednerer_shouldReturn0() {
-        subject.registerAdRenderer(mock(MoPubStaticNativeAdRenderer.class));
-
-        assertThat(subject.getViewTypeForAd(mNativeAd)).isEqualTo(0);
-    }
-
-    @Test
-    public void getRendererForAd_shouldReturnRendererSupportingNativeAd() {
-        subject.registerAdRenderer(mockRenderer);
-        subject.registerAdRenderer(mock(MoPubStaticNativeAdRenderer.class));
-
-        assertThat(subject.getRendererForAd(mockNativeAd)).isEqualTo(mockRenderer);
-    }
-
-    @Test
-    public void getRendererForAd_withNoSupportingRenderer_shouldReturnNull() {
-        subject.registerAdRenderer(mock(MoPubStaticNativeAdRenderer.class));
-
-        assertThat(subject.getRendererForAd(mockNativeAd)).isEqualTo(null);
-    }
-
-    @Test
-    public void getRendererForViewType_shouldReturnRendererSupportingNativeAd() {
-    }
-
-    @Test
-    public void getRendererForViewType_withNoSupportingRenderer_shouldReturnNull() {
-    }
-}
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java
deleted file mode 100644
index 32c3c858..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java
+++ /dev/null
@@ -1,198 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.content.Context;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class AdapterHelperTest {
-    private AdapterHelper subject;
-    private Activity context;
-    private int contentRowCount;
-    private int start;
-    private int interval;
-
-    @Before
-    public void setUp() {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        start = 1;
-        interval = 2;
-        subject = new AdapterHelper(context, start, interval);
-    }
-
-    @Test
-    public void constructor_whenPassedAnApplicationContext_shouldNotThrowIllegalArgumentException() {
-        new AdapterHelper(context.getApplicationContext(), start, interval);
-    }
-
-    @Test
-    public void getAdView_withNullActivityContext_shouldReturnEmptyViewWithApplicationContext() {
-        subject.clearContext();
-        Context viewContext = subject.getAdView(null, null, mock(NativeAd.class),
-                mock(ViewBinder.class)).getContext();
-        assertThat(viewContext).isEqualTo(context.getApplication());
-    }
-
-    @Test
-    public void adapterHelper_withContentRowCountOf10_shouldCalculateCorrectly() {
-        contentRowCount = 10;
-
-        start = 0;
-        interval = 2;
-        subject = new AdapterHelper(context, start, interval);
-
-//      acacacacacacacacacac
-        assertThat(subject.shiftedCount(contentRowCount)).isEqualTo(20);
-        validateRows(20, start, interval);
-        assertThat(subject.shiftedPosition(1)).isEqualTo(0);
-        assertThat(subject.shiftedPosition(3)).isEqualTo(1);
-        assertThat(subject.shiftedPosition(5)).isEqualTo(2);
-        assertThat(subject.shiftedPosition(7)).isEqualTo(3);
-        assertThat(subject.shiftedPosition(9)).isEqualTo(4);
-        assertThat(subject.shiftedPosition(11)).isEqualTo(5);
-        assertThat(subject.shiftedPosition(13)).isEqualTo(6);
-        assertThat(subject.shiftedPosition(15)).isEqualTo(7);
-        assertThat(subject.shiftedPosition(17)).isEqualTo(8);
-        assertThat(subject.shiftedPosition(19)).isEqualTo(9);
-
-        start = 0;
-        interval = 6;
-        subject = new AdapterHelper(context, start, interval);
-
-//      acccccaccccc
-        assertThat(subject.shiftedCount(contentRowCount)).isEqualTo(12);
-        validateRows(12, start, interval);
-        assertThat(subject.shiftedPosition(1)).isEqualTo(0);
-        assertThat(subject.shiftedPosition(2)).isEqualTo(1);
-        assertThat(subject.shiftedPosition(3)).isEqualTo(2);
-        assertThat(subject.shiftedPosition(4)).isEqualTo(3);
-        assertThat(subject.shiftedPosition(5)).isEqualTo(4);
-        assertThat(subject.shiftedPosition(7)).isEqualTo(5);
-        assertThat(subject.shiftedPosition(8)).isEqualTo(6);
-        assertThat(subject.shiftedPosition(9)).isEqualTo(7);
-        assertThat(subject.shiftedPosition(10)).isEqualTo(8);
-        assertThat(subject.shiftedPosition(11)).isEqualTo(9);
-
-        start = 0;
-        interval = 11;
-        subject = new AdapterHelper(context, start, interval);
-
-//      acccccccccc
-        assertThat(subject.shiftedCount(contentRowCount)).isEqualTo(11);
-        validateRows(11, start, interval);
-        assertThat(subject.shiftedPosition(1)).isEqualTo(0);
-        assertThat(subject.shiftedPosition(5)).isEqualTo(4);
-        assertThat(subject.shiftedPosition(10)).isEqualTo(9);
-
-        start = 0;
-        interval = 4;
-        subject = new AdapterHelper(context, start, interval);
-
-//      acccacccacccac
-        assertThat(subject.shiftedCount(contentRowCount)).isEqualTo(14);
-        validateRows(14, start, interval);
-
-        start = 5;
-        interval = 6;
-        subject = new AdapterHelper(context, start, interval);
-
-//      cccccaccccc
-        assertThat(subject.shiftedCount(contentRowCount)).isEqualTo(11);
-        validateRows(11, start, interval);
-        assertThat(subject.shiftedPosition(4)).isEqualTo(4);
-        assertThat(subject.shiftedPosition(6)).isEqualTo(5);
-        assertThat(subject.shiftedPosition(10)).isEqualTo(9);
-
-        start = 5;
-        interval = 5;
-        subject = new AdapterHelper(context, start, interval);
-
-//      cccccaccccac
-        assertThat(subject.shiftedCount(contentRowCount)).isEqualTo(12);
-        validateRows(12, start, interval);
-        assertThat(subject.shiftedPosition(6)).isEqualTo(5);
-        assertThat(subject.shiftedPosition(11)).isEqualTo(9);
-
-        start = 3;
-        interval = 4;
-        subject = new AdapterHelper(context, start, interval);
-
-//      cccacccacccac
-        assertThat(subject.shiftedCount(contentRowCount)).isEqualTo(13);
-        validateRows(13, start, interval);
-        assertThat(subject.shiftedPosition(0)).isEqualTo(0);
-        assertThat(subject.shiftedPosition(2)).isEqualTo(2);
-        assertThat(subject.shiftedPosition(12)).isEqualTo(9);
-
-        start = 10;
-        interval = 100;
-        subject = new AdapterHelper(context, start, interval);
-
-//      cccccccccc
-        assertThat(subject.shiftedCount(contentRowCount)).isEqualTo(10);
-        validateRows(10, start, interval);
-        assertThat(subject.shiftedPosition(3)).isEqualTo(3);
-        assertThat(subject.shiftedPosition(7)).isEqualTo(7);
-        assertThat(subject.shiftedPosition(9)).isEqualTo(9);
-
-        start = 0;
-        interval = 10;
-        subject = new AdapterHelper(context, start, interval);
-
-//      acccccccccac
-        assertThat(subject.shiftedCount(contentRowCount)).isEqualTo(12);
-        validateRows(12, start, interval);
-        assertThat(subject.shiftedPosition(1)).isEqualTo(0);
-        assertThat(subject.shiftedPosition(9)).isEqualTo(8);
-        assertThat(subject.shiftedPosition(11)).isEqualTo(9);
-    }
-
-    @Test
-    public void adapterHelper_withContentRowCountOf1_shouldCalculateCorrectly() {
-        contentRowCount = 1;
-        start = 0;
-        interval = 2;
-        subject = new AdapterHelper(context, start, interval);
-
-//      ac
-        assertThat(subject.shiftedCount(contentRowCount)).isEqualTo(2);
-        validateRows(2, start, interval);
-        assertThat(subject.shiftedPosition(1)).isEqualTo(0);
-
-        // We can still query for large numbers since the calculation assumes an infinite list
-        assertThat(subject.shiftedPosition(1001)).isEqualTo(500);
-
-        start = 1;
-        interval = 2;
-        subject = new AdapterHelper(context, start, interval);
-
-//      c
-        assertThat(subject.shiftedCount(contentRowCount)).isEqualTo(1);
-        validateRows(1, start, interval);
-        assertThat(subject.shiftedPosition(0)).isEqualTo(0);
-    }
-
-    private void validateRows(int totalRows, int start, int interval) {
-        for (int i = 0; i < totalRows; ++i) {
-            if (i == start) {
-                assertThat(subject.isAdPosition(i)).isTrue();
-            } else if (i > start && ((i - start) % (interval) == 0)) {
-                assertThat(subject.isAdPosition(i)).isTrue();
-            } else {
-                assertThat(subject.isAdPosition(i)).isFalse();
-            }
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/BaseNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/BaseNativeAdTest.java
deleted file mode 100644
index a697fbb0..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/BaseNativeAdTest.java
+++ /dev/null
@@ -1,69 +0,0 @@
-package com.mopub.nativeads;
-
-import android.support.annotation.NonNull;
-import android.view.View;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.nativeads.BaseNativeAd.NativeEventListener;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.annotation.Config;
-
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class BaseNativeAdTest {
-
-    private BaseNativeAd subject;
-    @Mock NativeEventListener mockEventListener;
-
-    @Before
-    public void setUp() {
-        subject = new BaseNativeAd() {
-            @Override
-            public void prepare(@NonNull View view) { }
-
-            @Override
-            public void clear(@NonNull View view) { }
-
-            @Override
-            public void destroy() { }
-        };
-    }
-
-    @Test
-    public void notifyAdImpressed_withListenerSet_shouldCallOnAdImpressed() {
-        subject.setNativeEventListener(mockEventListener);
-        subject.notifyAdImpressed();
-
-        verify(mockEventListener).onAdImpressed();
-    }
-
-    @Test
-    public void notifyAdImpressed_withoutListenerSet_shouldNotCallOnAdImpressed() {
-        subject.notifyAdImpressed();
-
-        verifyNoMoreInteractions(mockEventListener);
-    }
-
-    @Test
-    public void notifyAdClicked_withListenerSet_shouldCallOnAdClicked() {
-        subject.setNativeEventListener(mockEventListener);
-        subject.notifyAdClicked();
-
-        verify(mockEventListener).onAdClicked();
-    }
-
-    @Test
-    public void notifyAdClicked_withoutListenerSet_shouldNotCallOnAdClicked() {
-        subject.notifyAdClicked();
-
-        verifyNoMoreInteractions(mockEventListener);
-    }
-}
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/CustomEventNativeAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/CustomEventNativeAdapterTest.java
deleted file mode 100644
index c11abba5..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/CustomEventNativeAdapterTest.java
+++ /dev/null
@@ -1,91 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-
-import com.mopub.common.AdType;
-import com.mopub.common.DataKeys;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.nativeads.test.support.TestCustomEventNativeFactory;
-import com.mopub.network.AdResponse;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class CustomEventNativeAdapterTest {
-
-    private Activity context;
-    private HashMap<String, Object> localExtras;
-    private CustomEventNative.CustomEventNativeListener mCustomEventNativeListener;
-    private CustomEventNative mCustomEventNative;
-    private HashMap<String, String> serverExtras;
-    private AdResponse testAdResponse;
-
-    @Before
-    public void setUp() throws Exception {
-        context = new Activity();
-
-        localExtras = new HashMap<String, Object>();
-        serverExtras = new HashMap<String, String>();
-        serverExtras.put("key", "value");
-
-        testAdResponse = new AdResponse.Builder()
-                .setAdType(AdType.STATIC_NATIVE)
-                .setCustomEventClassName("com.mopub.nativeads.MoPubCustomEventNative")
-                .setClickTrackingUrl("clicktrackingurl")
-                .setResponseBody("body")
-                .setServerExtras(serverExtras)
-                .build();
-
-        mCustomEventNativeListener = mock(CustomEventNative.CustomEventNativeListener.class);
-
-        mCustomEventNative = TestCustomEventNativeFactory.getSingletonMock();
-    }
-
-    @Test
-    public void loadNativeAd_withValidInput_shouldCallLoadNativeAdOnTheCustomEvent() throws Exception {
-        Map<String, Object> expectedLocalExtras = new HashMap<String, Object>();
-        expectedLocalExtras.put(DataKeys.CLICK_TRACKING_URL_KEY, "clicktrackingurl");
-        CustomEventNativeAdapter.loadNativeAd(context, localExtras, testAdResponse, mCustomEventNativeListener);
-        verify(mCustomEventNative).loadNativeAd(context, mCustomEventNativeListener, expectedLocalExtras, serverExtras);
-        verify(mCustomEventNativeListener, never()).onNativeAdFailed(any(NativeErrorCode.class));
-        verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(BaseNativeAd.class));
-    }
-
-    @Test
-    public void loadNativeAd_withInvalidClassName_shouldNotifyListenerOfOnNativeAdFailedAndReturn() throws Exception {
-        testAdResponse = testAdResponse.toBuilder()
-                .setCustomEventClassName("com.mopub.baaad.invalidinvalid123143")
-                .build();
-
-        CustomEventNativeAdapter.loadNativeAd(context, localExtras, testAdResponse, mCustomEventNativeListener);
-        verify(mCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_NOT_FOUND);
-        verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(BaseNativeAd.class));
-        verify(mCustomEventNative, never()).loadNativeAd(context, mCustomEventNativeListener, localExtras, serverExtras);
-    }
-
-    @Test
-    public void loadNativeAd_withInvalidCustomEventNativeData_shouldNotAddToServerExtras() throws Exception {
-        testAdResponse = testAdResponse.toBuilder()
-                .setServerExtras(null)
-                .build();
-
-        CustomEventNativeAdapter.loadNativeAd(context, localExtras, testAdResponse, mCustomEventNativeListener);
-        verify(mCustomEventNative).loadNativeAd(eq(context), eq(mCustomEventNativeListener), eq(localExtras), eq(new HashMap<String, String>()));
-        verify(mCustomEventNativeListener, never()).onNativeAdFailed(any(NativeErrorCode.class));
-        verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(BaseNativeAd.class));
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/HttpDiskCompositeDataSourceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/HttpDiskCompositeDataSourceTest.java
deleted file mode 100644
index a369b0ef..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/HttpDiskCompositeDataSourceTest.java
+++ /dev/null
@@ -1,493 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.net.Uri;
-
-import com.google.android.exoplayer.upstream.DataSpec;
-import com.google.android.exoplayer.upstream.HttpDataSource;
-import com.mopub.common.CacheService;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import java.util.Arrays;
-import java.util.Random;
-import java.util.TreeSet;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Matchers.refEq;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.verifyZeroInteractions;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class HttpDiskCompositeDataSourceTest {
-
-    private static final int BASE_SEED = 1234567890;
-    @Mock HttpDataSource mockHttpDataSource;
-    private HttpDiskCompositeDataSource subject;
-    private DataSpec dataSpec;
-    private Uri uri;
-
-
-    @Before
-    public void setUp() throws Exception {
-        Context context = Robolectric.buildActivity(Activity.class).create().get();
-        CacheService.initialize(context);
-        subject = new HttpDiskCompositeDataSource(context, "userAgent", null, mockHttpDataSource);
-        uri = new Uri.Builder().scheme("https").path("www.someurl").build();
-        dataSpec = new DataSpec(uri, 0, -1, null);
-    }
-
-    @After
-    public void tearDown() throws Exception {
-        CacheService.clearAndNullCaches();
-    }
-
-    @Test
-    public void open_withNullDataSpecUri_shouldReturnLengthUnbounded() throws Exception {
-        DataSpec dataSpecWithNullUri = new DataSpec(null);
-
-        final long result = subject.open(dataSpecWithNullUri);
-
-        assertThat(result).isEqualTo(HttpDiskCompositeDataSource.LENGTH_UNBOUNDED);
-        verifyZeroInteractions(mockHttpDataSource);
-    }
-
-    @Test
-    public void open_withNoCachedData_shouldOpenHttpDataSource() throws Exception {
-        when(mockHttpDataSource.open(any(DataSpec.class))).thenReturn(200000L);
-
-        long result = subject.open(dataSpec);
-
-        assertThat(result).isEqualTo(200000L);
-        verify(mockHttpDataSource).open(refEq(dataSpec));
-        verifyNoMoreInteractions(mockHttpDataSource);
-    }
-
-    @Test
-    public void open_withAllDataCached_shouldNotOpenHttpDataSource() throws Exception {
-        // When the entire file is cached, there's no need to open the network.
-        when(mockHttpDataSource.open(any(DataSpec.class))).thenReturn(100000L);
-        byte[] data = generateRandomByteArray(100000, 0);
-        byte[] expectedFileSize = "100000".getBytes();
-        byte[] intervals = "[\"{start : 0, length : 100000}\"]".getBytes();
-        CacheService.putToDiskCache("0" + uri.toString(), data);
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.EXPECTED_FILE_SIZE_KEY_PREFIX + uri.toString(),
-                expectedFileSize);
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.INTERVALS_KEY_PREFIX + uri.toString(), intervals);
-
-        long result = subject.open(dataSpec);
-
-        assertThat(result).isEqualTo(100000);
-        verifyZeroInteractions(mockHttpDataSource);
-    }
-
-    @Test
-    public void open_withSomeDataCached_shouldOpenHttpDataSourceAtAppropriateStartPoint() throws Exception {
-        // The idea behind this test is that we think we have the first 33333 bytes and need to ask
-        // the network for byte 33333 and onward.
-        when(mockHttpDataSource.open(any(DataSpec.class))).thenReturn(100000L);
-        byte[] data = generateRandomByteArray(100000, 0);
-        byte[] expectedFileSize = "100000".getBytes();
-        byte[] intervals = "[\"{start : 0, length : 33333}\"]".getBytes();
-        CacheService.putToDiskCache("0" + uri.toString(), data);
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.EXPECTED_FILE_SIZE_KEY_PREFIX + uri.toString(),
-                expectedFileSize);
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.INTERVALS_KEY_PREFIX + uri.toString(), intervals);
-
-        long result = subject.open(dataSpec);
-
-        assertThat(result).isEqualTo(100000);
-        DataSpec expectedDataSpec = new DataSpec(dataSpec.uri, 33333, -1, null);
-        // Using refEq because equals() is just the Java default, and they're not the same object.
-        verify(mockHttpDataSource).open(refEq(expectedDataSpec));
-    }
-
-    @Test
-    public void read_with2048ExpectedBytes_shouldFillBufferWith2048Bytes_shouldReturnNumberOfBytesRead2048() throws Exception {
-        // This is the case where we're reading from a cache that has all the necessary bytes
-        byte[] data = generateRandomByteArray(100000, 0);
-        byte[] expectedFileSize = "100000".getBytes();
-        byte[] intervals = "[\"{start : 0, length : 100000}\"]".getBytes();
-        // Pretend we have all the bytes in the cache, complete with the expected file size and
-        // a valid intervals set.
-        CacheService.putToDiskCache("0" + uri.toString(), data);
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.EXPECTED_FILE_SIZE_KEY_PREFIX + uri.toString(),
-                expectedFileSize);
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.INTERVALS_KEY_PREFIX + uri.toString(), intervals);
-        byte[] readBuffer = new byte[2048];
-
-        subject.open(dataSpec);
-        int bytesRead = subject.read(readBuffer, 0, 2048);
-
-        // Verify that all 2048 bytes are expected and that the return value of read() is 2048
-        assertThat(bytesRead).isEqualTo(2048);
-        byte[] expectedData = new byte[2048];
-        System.arraycopy(data, 0, expectedData, 0, 2048);
-        assertThat(readBuffer).isEqualTo(expectedData);
-        verifyZeroInteractions(mockHttpDataSource);
-    }
-
-    @Test
-    public void read_withAllDataCached_whenReadingAcrossSegmentBoundaries_shouldReturnAllBytes() throws Exception {
-        // This is the case where we're reading from a cache that has all the necessary bytes, but
-        // some of it is in the next block. We need to finish reading from the current block, set
-        // up reading from the next block, and then do it.
-        byte[] data1 = generateRandomByteArray(HttpDiskCompositeDataSource.BLOCK_SIZE, 0);
-        byte[] data2 = generateRandomByteArray(HttpDiskCompositeDataSource.BLOCK_SIZE, 1);
-        String expectedFileLengthString = String.valueOf(
-                2 * HttpDiskCompositeDataSource.BLOCK_SIZE);
-        byte[] intervals = ("[\"{start : 0, length : " + expectedFileLengthString + "}\"]").getBytes();
-        CacheService.putToDiskCache("0" + uri.toString(), data1);
-        CacheService.putToDiskCache("1" + uri.toString(), data2);
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.EXPECTED_FILE_SIZE_KEY_PREFIX + uri.toString(),
-                expectedFileLengthString.getBytes());
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.INTERVALS_KEY_PREFIX + uri.toString(), intervals);
-        // Expect to read the last 1337 bytes from the first block and the rest from the second block
-        DataSpec modifiedDataSpec = new DataSpec(dataSpec.uri,
-                HttpDiskCompositeDataSource.BLOCK_SIZE - 1337, -1, null);
-        byte[] readBuffer = new byte[4096];
-
-        subject.open(modifiedDataSpec);
-        int bytesRead = subject.read(readBuffer, 0, 4096);
-
-        assertThat(bytesRead).isEqualTo(4096);
-        byte[] expectedBytes = new byte[4096];
-        System.arraycopy(data1, HttpDiskCompositeDataSource.BLOCK_SIZE - 1337, expectedBytes, 0,
-                1337);
-        System.arraycopy(data2, 0, expectedBytes, 1337, 4096 - 1337);
-        assertThat(readBuffer).isEqualTo(expectedBytes);
-        verifyZeroInteractions(mockHttpDataSource);
-    }
-
-    @Test
-    public void read_withEmptyCache_shouldReadBytesFromNetwork() throws Exception {
-        // Sets up an empty cache and read directly from the network
-        final byte[] bytesFromNetwork = generateRandomByteArray(2048, 0);
-        when(mockHttpDataSource.open(any(DataSpec.class))).thenReturn(100000L);
-        setUpMockHttpDataSourceToReturnBytesFromNetwork(bytesFromNetwork, mockHttpDataSource);
-        byte[] readBuffer = new byte[2048];
-
-        subject.open(dataSpec);
-        int bytesRead = subject.read(readBuffer, 0, 2048);
-
-        assertThat(bytesRead).isEqualTo(2048);
-        assertThat(readBuffer).isEqualTo(bytesFromNetwork);
-        verify(mockHttpDataSource).open(refEq(dataSpec));
-        verify(mockHttpDataSource).read(any(byte[].class), eq(0), eq(2048));
-        verifyNoMoreInteractions(mockHttpDataSource);
-    }
-
-    @Test
-    public void read_withSomeDataInCache_shouldReadRestOfBytesFromNetwork() throws Exception {
-        // This is the case where there is some data in the cache, and we run out of cached data.
-        // The rest of the bytes are from the network.
-        final byte[] bytesFromNetwork = generateRandomByteArray(2048, 0);
-        when(mockHttpDataSource.open(any(DataSpec.class))).thenReturn(100000L);
-        setUpMockHttpDataSourceToReturnBytesFromNetwork(bytesFromNetwork, mockHttpDataSource);
-        byte[] data = generateRandomByteArray(2048, 1);
-        byte[] segment0 = new byte[HttpDiskCompositeDataSource.BLOCK_SIZE];
-        byte[] expectedFileSize = "100000".getBytes();
-        byte[] intervals = ("[\"{start : 0, length : 2048}\"]").getBytes();
-        // So we have the first 2048 bytes in the cache
-        System.arraycopy(data, 0, segment0, 0, 2048);
-        CacheService.putToDiskCache("0" + uri.toString(), segment0);
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.EXPECTED_FILE_SIZE_KEY_PREFIX + uri.toString(),
-                expectedFileSize);
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.INTERVALS_KEY_PREFIX + uri.toString(), intervals);
-        // However, we want to read 4096 bytes (We have to go to the network for the rest).
-        byte[] readBuffer = new byte[4096];
-
-        subject.open(dataSpec);
-        int bytesRead = subject.read(readBuffer, 0, 4096);
-
-        // Make sure that the bytes read have both the first 2048 bytes from the cache and the 2048
-        // bytes from the network.
-        assertThat(bytesRead).isEqualTo(4096);
-        byte[] expectedBytes = new byte[4096];
-        System.arraycopy(data, 0, expectedBytes, 0, 2048);
-        System.arraycopy(bytesFromNetwork, 0, expectedBytes, 2048, 2048);
-        assertThat(readBuffer).isEqualTo(expectedBytes);
-        DataSpec modifiedDataSpec = new DataSpec(dataSpec.uri, 2048, -1, null);
-        verify(mockHttpDataSource).open(refEq(modifiedDataSpec));
-        // Verify that we stored the bytes from network starting from index 2048 for 2048 bytes
-        verify(mockHttpDataSource).read(any(byte[].class), eq(2048), eq(2048));
-        verifyNoMoreInteractions(mockHttpDataSource);
-    }
-
-    @Test
-    public void read_withSomeDataInCacheBeforeBlockBoundary_whenApproachingBlockBoundary_shouldReadBytesFromDisk_shouldReadBytesFromNetwork_shouldSetUpNextBlock() throws Exception {
-        // This is the situation where the cache ends 1024 bytes before the second block boundary.
-        // We need to read the first 1024 bytes from the cache, read the next 3072 bytes, store
-        // the first 1024 bytes in the current block, close it out, flush it, set up the next block,
-        // and store the next 2048 bytes into that block.
-        final byte[] bytesFromNetwork = generateRandomByteArray(3072, 0);
-        when(mockHttpDataSource.open(any(DataSpec.class))).thenReturn(
-                (long) (HttpDiskCompositeDataSource.BLOCK_SIZE * 4));
-        setUpMockHttpDataSourceToReturnBytesFromNetwork(bytesFromNetwork, mockHttpDataSource);
-        byte[] data = generateRandomByteArray(HttpDiskCompositeDataSource.BLOCK_SIZE, 1);
-        byte[] expectedFileSize = String.valueOf(
-                HttpDiskCompositeDataSource.BLOCK_SIZE * 4).getBytes();
-        // Typical access patterns of video is to request for the first 44 bytes, the last 3886
-        // bytes, and then start at byte 44 and request till the end of the video. We are pretending
-        // that we did that, and stopped 1024 bytes before the end of the 2nd block.
-        byte[] intervals = ("[\"{start : 0, length : 44}\", \"{start : " +
-                (HttpDiskCompositeDataSource.BLOCK_SIZE * 4 - 3886) +
-                ", length : 3886}\", \"{start : 44, length : " +
-                (HttpDiskCompositeDataSource.BLOCK_SIZE * 2 - 1024 - 44) + "}\"]")
-                .getBytes();
-        CacheService.putToDiskCache("1" + uri.toString(), data);
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.EXPECTED_FILE_SIZE_KEY_PREFIX + uri.toString(),
-                expectedFileSize);
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.INTERVALS_KEY_PREFIX + uri.toString(), intervals);
-        byte[] readBuffer = new byte[4096];
-        dataSpec = new DataSpec(dataSpec.uri, 2 * HttpDiskCompositeDataSource.BLOCK_SIZE - 2048, -1,
-                dataSpec.key, dataSpec.flags);
-
-        subject.open(dataSpec);
-        int bytesRead = subject.read(readBuffer, 0, 4096);
-
-        assertThat(bytesRead).isEqualTo(4096);
-        byte[] expectedBytes = new byte[4096];
-        System.arraycopy(data, HttpDiskCompositeDataSource.BLOCK_SIZE - 2048, expectedBytes, 0,
-                1024);
-        System.arraycopy(bytesFromNetwork, 0, expectedBytes, 1024, 3072);
-        assertThat(readBuffer).isEqualTo(expectedBytes);
-        DataSpec modifiedDataSpec = new DataSpec(dataSpec.uri,
-                2 * HttpDiskCompositeDataSource.BLOCK_SIZE - 1024, -1, null);
-        verify(mockHttpDataSource).open(refEq(modifiedDataSpec));
-        verify(mockHttpDataSource).read(any(byte[].class), eq(1024), eq(3072));
-        // Also verify that the 2nd block was written to disk correctly.
-        byte[] expectedBlock = new byte[HttpDiskCompositeDataSource.BLOCK_SIZE];
-        System.arraycopy(data, 0, expectedBlock, 0, HttpDiskCompositeDataSource.BLOCK_SIZE - 1024);
-        System.arraycopy(bytesFromNetwork, 0, expectedBlock,
-                HttpDiskCompositeDataSource.BLOCK_SIZE - 1024, 1024);
-        assertThat(CacheService.getFromDiskCache("1" + uri.toString())).isEqualTo(
-                expectedBlock);
-    }
-
-    @Test
-    public void close_withoutFirstCallingOpen_shouldNotWriteToDisk() throws Exception {
-        subject.close();
-
-        assertThat(CacheService.containsKeyDiskCache("0" + uri.toString())).isFalse();
-        assertThat(CacheService.containsKeyDiskCache(
-                HttpDiskCompositeDataSource.EXPECTED_FILE_SIZE_KEY_PREFIX + uri.toString())).isFalse();
-        assertThat(CacheService.containsKeyDiskCache(
-                HttpDiskCompositeDataSource.INTERVALS_KEY_PREFIX + uri.toString())).isFalse();
-    }
-
-    @Test
-    public void close_withCurrentActiveBlock_shouldWriteToDisk() throws Exception {
-        // Verifying that close() actually writes the current data to disk
-        final byte[] bytesFromNetwork = generateRandomByteArray(1000, 0);
-        when(mockHttpDataSource.open(any(DataSpec.class))).thenReturn(5000L);
-        setUpMockHttpDataSourceToReturnBytesFromNetwork(bytesFromNetwork, mockHttpDataSource);
-        byte[] readBuffer = new byte[1000];
-
-        subject.open(dataSpec);
-        subject.read(readBuffer, 0, 1000);
-        subject.close();
-
-        assertThat(readBuffer).isEqualTo(bytesFromNetwork);
-        byte[] expectedBlock = new byte[HttpDiskCompositeDataSource.BLOCK_SIZE];
-        System.arraycopy(bytesFromNetwork, 0, expectedBlock, 0, 1000);
-        assertThat(CacheService.getFromDiskCache("0" + uri.toString())).isEqualTo(expectedBlock);
-        assertThat(CacheService.getFromDiskCache(
-                HttpDiskCompositeDataSource.EXPECTED_FILE_SIZE_KEY_PREFIX + uri.toString())).isEqualTo(
-                "5000".getBytes());
-        assertThat(CacheService.getFromDiskCache(
-                HttpDiskCompositeDataSource.INTERVALS_KEY_PREFIX + uri.toString())).isEqualTo(
-                "[\"{start : 0, length : 1000}\"]".getBytes());
-    }
-
-    @Test
-    public void addNewInterval_shouldAddNewIntervalToIntervals() {
-        IntInterval interval = new IntInterval(5, 42);
-        TreeSet<IntInterval> intervalList = new TreeSet<IntInterval>();
-
-        HttpDiskCompositeDataSource.addNewInterval(intervalList, 5, 42);
-
-        assertThat(intervalList).containsOnly(interval);
-    }
-
-    @Test
-    public void addNewInterval_withExistingInterval_shouldNotAddNewInterval() {
-        IntInterval interval1 = new IntInterval(5, 42);
-        IntInterval interval2 = new IntInterval(500, 200);
-        TreeSet<IntInterval> intervalList = new TreeSet<IntInterval>();
-        intervalList.add(interval1);
-        intervalList.add(interval2);
-
-        HttpDiskCompositeDataSource.addNewInterval(intervalList, 5, 42);
-
-        assertThat(intervalList).containsOnly(interval1, interval2);
-    }
-
-    @Test
-    public void addNewInterval_withExistingIntervalInParts_shouldNotAddNewInterval() {
-        // The union of these two intervals is 5 with a length of 45 (ie. from 5 to 50).
-        // An interval from 7 to 50 (start at 7, length 43) should not be added to the interval set.
-        IntInterval interval1 = new IntInterval(10, 40);
-        IntInterval interval2 = new IntInterval(5, 20);
-        TreeSet<IntInterval> intervalList = new TreeSet<IntInterval>();
-        intervalList.add(interval1);
-        intervalList.add(interval2);
-
-        HttpDiskCompositeDataSource.addNewInterval(intervalList, 7, 43);
-
-        assertThat(intervalList).containsOnly(interval1, interval2);
-    }
-
-    @Test
-    public void addNewInterval_withNonExistingIntervals_shouldAddNewInterval() {
-        // The existing intervals here are from 10 to 100 and 150 to 250. 7 to 50 is not part of
-        // that, even though the first interval already has part of that covered, 7 to 9 is not
-        // covered by anything, so this interval should be added.
-        IntInterval interval1 = new IntInterval(10, 90);
-        IntInterval interval2 = new IntInterval(150, 100);
-        TreeSet<IntInterval> intervalList = new TreeSet<IntInterval>();
-        intervalList.add(interval1);
-        intervalList.add(interval2);
-
-        HttpDiskCompositeDataSource.addNewInterval(intervalList, 7, 43);
-
-        assertThat(intervalList).containsExactly(new IntInterval(7, 43), interval1, interval2);
-    }
-
-    @Test
-    public void getFirstContiguousPointAfter_withNoIntervals_shouldReturnInput() {
-        TreeSet<IntInterval> intervalList = new TreeSet<IntInterval>();
-        int startPoint = 12345;
-
-        int firstContiguousPointAfterStartPoint = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(
-                startPoint, intervalList);
-
-        assertThat(firstContiguousPointAfterStartPoint).isEqualTo(startPoint);
-    }
-
-    @Test
-    @SuppressWarnings("unchecked")
-    public void getFirstContiguousPointAfter_withMultipleConnectedAndDisconnectedIntervals_shouldReturnFirstContiguousPointAfterStartPoint() {
-        IntInterval[] intervalArray = new IntInterval[8];
-
-        // Goes from 500 to 1250
-        intervalArray[0] = new IntInterval(500, 200);
-        intervalArray[1] = new IntInterval(700, 300);
-        intervalArray[2] = new IntInterval(1000, 250);
-
-        // Separate section that goes from 2000 to 3000
-        intervalArray[3] = new IntInterval(2000, 1000);
-
-        // Goes from 3500 to 4500 but with various sections that overlap
-        intervalArray[4] = new IntInterval(3500, 750);
-        intervalArray[5] = new IntInterval(4000, 100);
-        intervalArray[6] = new IntInterval(4050, 200);
-        intervalArray[7] = new IntInterval(3999, 501);
-
-        TreeSet<IntInterval> intervalList = new TreeSet(Arrays.asList(intervalArray));
-
-        // Before the first section
-        int result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(499, intervalList);
-        assertThat(result).isEqualTo(499);
-
-        // At the start of the first section
-        result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(500, intervalList);
-        assertThat(result).isEqualTo(1250);
-
-        // In the first section
-        result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(567, intervalList);
-        assertThat(result).isEqualTo(1250);
-
-        // Between the first section and the second section
-        result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(1337, intervalList);
-        assertThat(result).isEqualTo(1337);
-
-        // In the second section
-        result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(2222, intervalList);
-        assertThat(result).isEqualTo(3000);
-
-        // Between the second section and the third section
-        result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(3232, intervalList);
-        assertThat(result).isEqualTo(3232);
-
-        // At the start of the third section
-        result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(3500, intervalList);
-        assertThat(result).isEqualTo(4500);
-
-        // In the third section
-        result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(3789, intervalList);
-        assertThat(result).isEqualTo(4500);
-
-        // After the third section
-        result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(4501, intervalList);
-        assertThat(result).isEqualTo(4501);
-    }
-
-    /**
-     * Creates a byte array and fills it with random data. Use the seed offset to generate
-     * subsequent random byte arrays that are not the same random byte array.
-     *
-     * @param length     How many bytes in the byte array
-     * @param seedOffset Offsets the seed so that different, random byte arrays can be created
-     * @return byte array of specified length filled with random bytes\
-     */
-    private byte[] generateRandomByteArray(int length, int seedOffset) {
-        byte[] byteArray = new byte[length];
-        new Random(BASE_SEED + seedOffset).nextBytes(byteArray);
-        return byteArray;
-    }
-
-    /**
-     * Sets up the mock http data source to return the specified bytes when queried.
-     *
-     * @param bytesFromNetwork   The bytes to write to the buffer.
-     * @param mockHttpDataSource The mock object that does this.
-     * @throws HttpDataSource.HttpDataSourceException This should never happen since this is a
-     *                                                mock.
-     */
-    private static void setUpMockHttpDataSourceToReturnBytesFromNetwork(
-            final byte[] bytesFromNetwork,
-            final HttpDataSource mockHttpDataSource) throws HttpDataSource.HttpDataSourceException {
-        when(mockHttpDataSource.read(any(byte[].class), anyInt(), anyInt())).thenAnswer(
-                new Answer<Long>() {
-                    @Override
-                    public Long answer(final InvocationOnMock invocation) throws Throwable {
-                        final Object[] args = invocation.getArguments();
-                        final byte[] byteBuffer = (byte[]) args[0];
-                        final Integer offset = (Integer) args[1];
-                        final Integer length = (Integer) args[2];
-                        System.arraycopy(bytesFromNetwork, 0, byteBuffer, offset, length);
-                        return (long) length;
-                    }
-                });
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackerTest.java
deleted file mode 100644
index 6df8b430..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackerTest.java
+++ /dev/null
@@ -1,296 +0,0 @@
-package com.mopub.nativeads;
-
-import android.os.Handler;
-import android.view.View;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.fest.util.Lists;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowSystemClock;
-
-import java.util.HashMap;
-
-import static com.mopub.nativeads.VisibilityTracker.VisibilityChecker;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class ImpressionTrackerTest {
-    private ImpressionTracker subject;
-    private TimestampWrapper<ImpressionInterface> timeStampWrapper;
-    private HashMap<View, ImpressionInterface> trackedViews;
-    private HashMap<View, TimestampWrapper<ImpressionInterface>> pollingViews;
-
-    @Mock private ImpressionInterface impressionInterface;
-    @Mock private ImpressionInterface impressionInterface2;
-    @Mock private VisibilityTracker visibilityTracker;
-    @Mock private Handler handler;
-    @Mock private View view;
-    @Mock private View view2;
-
-    @Before
-    public void setUp() {
-        view = VisibilityTrackerTest.createViewMock(View.VISIBLE, 100, 100, 100, 100, true, true);
-        view2 = VisibilityTrackerTest.createViewMock(View.VISIBLE, 100, 100, 100, 100, true, true);
-
-        pollingViews = new HashMap<View, TimestampWrapper<ImpressionInterface>>(10);
-        trackedViews = new HashMap<View, ImpressionInterface>(10);
-        final VisibilityChecker visibilityChecker = new VisibilityChecker();
-        subject = new ImpressionTracker(trackedViews, pollingViews, visibilityChecker,
-                visibilityTracker, handler);
-
-        timeStampWrapper = new TimestampWrapper<ImpressionInterface>(impressionInterface);
-
-        when(impressionInterface.getImpressionMinPercentageViewed()).thenReturn(50);
-        when(impressionInterface.getImpressionMinTimeViewed()).thenReturn(1000);
-        when(impressionInterface2.getImpressionMinPercentageViewed()).thenReturn(50);
-        when(impressionInterface2.getImpressionMinTimeViewed()).thenReturn(1000);
-
-        // XXX We need this to ensure that our SystemClock starts
-        ShadowSystemClock.uptimeMillis();
-    }
-
-    @Test
-    public void addView_shouldAddViewToTrackedViews_shouldAddViewToVisibilityTracker() {
-        subject.addView(view, impressionInterface);
-
-        assertThat(trackedViews).hasSize(1);
-        assertThat(trackedViews.get(view)).isEqualTo(impressionInterface);
-        verify(visibilityTracker).addView(view, impressionInterface
-                .getImpressionMinPercentageViewed());
-    }
-
-    @Test
-    public void addView_withRecordedImpression_shouldNotAddView() {
-        when(impressionInterface.isImpressionRecorded()).thenReturn(true);
-
-        subject.addView(view, impressionInterface);
-
-        assertThat(trackedViews).hasSize(0);
-        verify(visibilityTracker, never())
-                .addView(view, impressionInterface.getImpressionMinPercentageViewed());
-    }
-
-    @Test
-    public void addView_withDifferentImpressionInterface_shouldRemoveFromPollingViews() {
-        subject.addView(view, impressionInterface);
-
-        assertThat(trackedViews).hasSize(1);
-        assertThat(trackedViews.get(view)).isEqualTo(impressionInterface);
-        verify(visibilityTracker).addView(view, impressionInterface.getImpressionMinPercentageViewed());
-
-        pollingViews.put(view, timeStampWrapper);
-
-        subject.addView(view, impressionInterface2);
-
-        assertThat(trackedViews).hasSize(1);
-        assertThat(trackedViews.get(view)).isEqualTo(impressionInterface2);
-        assertThat(pollingViews).isEmpty();
-        verify(visibilityTracker, times(2))
-                .addView(view, impressionInterface.getImpressionMinPercentageViewed());
-    }
-
-    @Test
-    public void addView_withDifferentAlreadyImpressedImpressionInterface_shouldRemoveFromPollingViews_shouldNotTrack() {
-        when(impressionInterface2.isImpressionRecorded()).thenReturn(true);
-
-        subject.addView(view, impressionInterface);
-
-        assertThat(trackedViews).hasSize(1);
-        assertThat(trackedViews.get(view)).isEqualTo(impressionInterface);
-        verify(visibilityTracker).addView(view, impressionInterface.getImpressionMinPercentageViewed());
-
-        pollingViews.put(view, timeStampWrapper);
-
-        subject.addView(view, impressionInterface2);
-
-        assertThat(trackedViews).hasSize(0);
-        assertThat(trackedViews.get(view)).isNull();
-        assertThat(pollingViews).isEmpty();
-        verify(visibilityTracker).addView(view, impressionInterface.getImpressionMinPercentageViewed());
-    }
-
-    @Test
-    public void addView_withSameImpressionInterface_shouldNotAddView() {
-        subject.addView(view, impressionInterface);
-
-        assertThat(trackedViews).hasSize(1);
-        assertThat(trackedViews.get(view)).isEqualTo(impressionInterface);
-        verify(visibilityTracker).addView(view, impressionInterface.getImpressionMinPercentageViewed());
-
-        pollingViews.put(view, timeStampWrapper);
-
-        subject.addView(view, impressionInterface);
-
-        assertThat(trackedViews).hasSize(1);
-        assertThat(trackedViews.get(view)).isEqualTo(impressionInterface);
-        assertThat(pollingViews.keySet()).containsOnly(view);
-
-        // Still only one call
-        verify(visibilityTracker).addView(view, impressionInterface.getImpressionMinPercentageViewed());
-    }
-
-    @Test
-    public void removeView_shouldRemoveViewFromViewTrackedViews_shouldRemoveViewFromPollingMap_shouldRemoveViewFromVisibilityTracker() {
-        trackedViews.put(view, impressionInterface);
-        pollingViews.put(view, new TimestampWrapper<ImpressionInterface>(impressionInterface));
-        visibilityTracker.addView(view, impressionInterface.getImpressionMinPercentageViewed());
-
-        subject.removeView(view);
-
-        assertThat(trackedViews).isEmpty();
-        assertThat(pollingViews).isEmpty();
-        verify(visibilityTracker).removeView(view);
-    }
-
-    @Test
-    public void clear_shouldClearViewTrackedViews_shouldClearPollingViews_shouldClearVisibilityTracker_shouldClearPollHandler() {
-        trackedViews.put(view, impressionInterface);
-        trackedViews.put(view2, impressionInterface);
-        pollingViews.put(view, timeStampWrapper);
-        pollingViews.put(view2, timeStampWrapper);
-        visibilityTracker.addView(view, impressionInterface.getImpressionMinPercentageViewed());
-        visibilityTracker.addView(view2, impressionInterface.getImpressionMinPercentageViewed());
-
-        subject.clear();
-
-        assertThat(trackedViews).isEmpty();
-        assertThat(pollingViews).isEmpty();
-        verify(visibilityTracker).clear();
-        verify(handler).removeMessages(0);
-    }
-    
-    @Test
-    public void destroy_shouldCallClear_shouldDestroyVisibilityTracker_shouldSetVisibilityTrackerListenerToNull() throws Exception {
-        trackedViews.put(view, impressionInterface);
-        trackedViews.put(view2, impressionInterface);
-        pollingViews.put(view, timeStampWrapper);
-        pollingViews.put(view2, timeStampWrapper);
-        visibilityTracker.addView(view, impressionInterface.getImpressionMinPercentageViewed());
-        visibilityTracker.addView(view2, impressionInterface.getImpressionMinPercentageViewed());
-        assertThat(subject.getVisibilityTrackerListener()).isNotNull();
-
-        subject.destroy();
-
-        assertThat(trackedViews).isEmpty();
-        assertThat(pollingViews).isEmpty();
-        verify(visibilityTracker).clear();
-        verify(handler).removeMessages(0);
-
-        verify(visibilityTracker).destroy();
-        assertThat(subject.getVisibilityTrackerListener()).isNull();
-    }
-
-    @Test
-    public void scheduleNextPoll_shouldPostDelayedThePollingRunnable() {
-        when(handler.hasMessages(0)).thenReturn(false);
-
-        subject.scheduleNextPoll();
-
-        verify(handler).postDelayed(any(ImpressionTracker.PollingRunnable.class), eq((long) 250));
-    }
-
-    @Test
-    public void scheduleNextPoll_withMessages_shouldNotPostDelayedThePollingRunnable() {
-        when(handler.hasMessages(0)).thenReturn(true);
-
-        subject.scheduleNextPoll();
-
-        verify(handler, never())
-                .postDelayed(any(ImpressionTracker.PollingRunnable.class), eq((long) 250));
-    }
-
-    @Test
-    public void visibilityTrackerListener_onVisibilityChanged_withVisibleViews_shouldAddViewToPollingViews_shouldScheduleNextPoll() {
-        subject.addView(view, impressionInterface);
-
-        assertThat(pollingViews).isEmpty();
-
-        subject.getVisibilityTrackerListener()
-                .onVisibilityChanged(Lists.newArrayList(view), Lists.<View>newArrayList());
-
-        assertThat(pollingViews.keySet()).containsOnly(view);
-        verify(handler).postDelayed(any(ImpressionTracker.PollingRunnable.class), eq((long) 250));
-    }
-
-    @Test
-    public void visibilityTrackerListener_onVisibilityChanged_withVisibleViews_shouldRemoveViewFromPollingViews() {
-        subject.addView(view, impressionInterface);
-        subject.getVisibilityTrackerListener()
-                .onVisibilityChanged(Lists.newArrayList(view), Lists.<View>newArrayList());
-
-
-        assertThat(trackedViews.keySet()).containsOnly(view);
-        assertThat(pollingViews.keySet()).containsOnly(view);
-
-        subject.getVisibilityTrackerListener()
-                .onVisibilityChanged(Lists.<View>newArrayList(), Lists.newArrayList(view));
-
-        assertThat(trackedViews.keySet()).containsOnly(view);
-        assertThat(pollingViews).isEmpty();
-    }
-
-    @Test
-    public void pollingRunnableRun_whenLessThanOneSecondHasElapsed_shouldNotTrackImpression_shouldScheduleNextPoll() {
-        // Force the last viewed timestamp to be a known value
-        timeStampWrapper.mCreatedTimestamp = 5555;
-        pollingViews.put(view, timeStampWrapper);
-
-        // We progress 999 milliseconds
-        Robolectric.getForegroundThreadScheduler().advanceTo(5555 + 999);
-        subject.new PollingRunnable().run();
-
-        verify(impressionInterface, never()).recordImpression(view);
-
-        assertThat(pollingViews.keySet()).containsOnly(view);
-        verify(handler).postDelayed(any(ImpressionTracker.PollingRunnable.class), eq((long) 250));
-    }
-
-    @Test
-    public void pollingRunnableRun_whenMoreThanOneSecondHasElapsed_shouldTrackImpression_shouldNotScheduleNextPoll() {
-        // Force the last viewed timestamp to be a known value
-        timeStampWrapper.mCreatedTimestamp = 5555;
-        pollingViews.put(view, timeStampWrapper);
-
-        // We progress 1000 milliseconds
-        Robolectric.getForegroundThreadScheduler().advanceTo(5555 + 1000);
-        subject.new PollingRunnable().run();
-
-        verify(impressionInterface).recordImpression(view);
-
-        assertThat(pollingViews).isEmpty();
-        verify(handler, never())
-                .postDelayed(any(ImpressionTracker.PollingRunnable.class), eq((long) 250));
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void pollingRunnableRun_whenWrapperIsNull_shouldThrowNPE() {
-        pollingViews.put(view, null);
-        subject.new PollingRunnable().run();
-
-        verify(impressionInterface, never()).recordImpression(view);
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void pollingRunnableRun_whenImpressionInterfaceIsNull_shouldThrowNPE() {
-        // This doesn't normally happen; perhaps we're being overly defensive
-        pollingViews.put(view, new TimestampWrapper<ImpressionInterface>(null));
-
-        subject.new PollingRunnable().run();
-
-        verify(impressionInterface, never()).recordImpression(view);
-    }
-}
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MediaLayoutTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MediaLayoutTest.java
deleted file mode 100644
index 9573d1f8..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MediaLayoutTest.java
+++ /dev/null
@@ -1,93 +0,0 @@
-package com.mopub.nativeads;
-
-import android.annotation.SuppressLint;
-import android.content.Context;
-import android.view.View.MeasureSpec;
-import android.view.ViewGroup;
-import android.widget.RelativeLayout;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowApplication;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class MediaLayoutTest {
-
-    MediaLayout spySubject;
-    Context context;
-
-    @Before
-    public void setup() {
-        context = ShadowApplication.getInstance().getApplicationContext();
-        spySubject = spy(new MediaLayout(context));
-        spySubject.setLayoutParams(new RelativeLayout.LayoutParams(300, 300));
-        when(spySubject.getMeasuredHeight()).thenReturn(300);
-        when(spySubject.getMeasuredWidth()).thenReturn(300);
-    }
-
-    @Test
-    @SuppressLint("WrongCall") // onMeasure should not ordinarily be called in application code
-    public void onMeasure_exactWidth_flexibleHeight_shouldBe16By9() {
-        int widthMeasureSpec = MeasureSpec.makeMeasureSpec(500, MeasureSpec.EXACTLY);
-        int heightMeasureSpec = MeasureSpec.makeMeasureSpec(500, MeasureSpec.AT_MOST);
-
-        spySubject.onMeasure(widthMeasureSpec, heightMeasureSpec);
-
-        final ViewGroup.LayoutParams params = spySubject.getLayoutParams();
-
-        assertThat(params.width).isEqualTo(500);
-        assertThat(params.height).isEqualTo((int)(500 * 9f / 16));
-    }
-
-    @Test
-    @SuppressLint("WrongCall") // onMeasure should not ordinarily be called in application code
-    public void onMeasure_flexibleWidth_flexibleHeight_shouldBe16By9() {
-        int widthMeasureSpec = MeasureSpec.makeMeasureSpec(500, MeasureSpec.AT_MOST);
-        int heightMeasureSpec = MeasureSpec.makeMeasureSpec(500, MeasureSpec.AT_MOST);
-
-        spySubject.onMeasure(widthMeasureSpec, heightMeasureSpec);
-
-        final ViewGroup.LayoutParams params = spySubject.getLayoutParams();
-
-        assertThat(params.width).isEqualTo(300);
-        assertThat(params.height).isEqualTo((int)(300 * 9f / 16));
-    }
-
-    @Test
-    @SuppressLint("WrongCall") // onMeasure should not ordinarily be called in application code
-    public void onMeasure_flexibleWidth_ExactHeight_shouldBe16By9() {
-        int widthMeasureSpec = MeasureSpec.makeMeasureSpec(700, MeasureSpec.AT_MOST);
-        int heightMeasureSpec = MeasureSpec.makeMeasureSpec(150, MeasureSpec.EXACTLY);
-
-        spySubject.onMeasure(widthMeasureSpec, heightMeasureSpec);
-
-        final ViewGroup.LayoutParams params = spySubject.getLayoutParams();
-
-        assertThat(params.height).isEqualTo(150);
-        assertThat(params.width).isEqualTo((int)(150 * 16f / 9));
-    }
-
-    @Test
-    @SuppressLint("WrongCall")
-    public void onMeasure_exactWidth_exactHeight_heightShouldBeSmaller() {
-        int widthMeasureSpec = MeasureSpec.makeMeasureSpec(500, MeasureSpec.EXACTLY);
-        int heightMeasureSpec = MeasureSpec.makeMeasureSpec(500, MeasureSpec.EXACTLY);
-
-        spySubject.onMeasure(widthMeasureSpec, heightMeasureSpec);
-
-        final ViewGroup.LayoutParams params = spySubject.getLayoutParams();
-
-        assertThat(params.width).isEqualTo(500);
-        assertThat(params.height).isEqualTo((int)(500 * 9f / 16));
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java
deleted file mode 100644
index 7e91e7db..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java
+++ /dev/null
@@ -1,530 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.database.DataSetObserver;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.AdapterView;
-import android.widget.AdapterView.OnItemClickListener;
-import android.widget.AdapterView.OnItemLongClickListener;
-import android.widget.AdapterView.OnItemSelectedListener;
-import android.widget.ArrayAdapter;
-import android.widget.ListView;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Mock;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class MoPubAdAdapterTest {
-    private static final int AD_POSITION = 1;
-
-    @Mock
-    private MoPubStreamAdPlacer mockStreamAdPlacer;
-    @Mock
-    private NativeAdData mockNativeAdData;
-    @Mock
-    private View mockAdView;
-    @Mock
-    private VisibilityTracker mockVisibilityTracker;
-    @Mock
-    private MoPubNativeAdLoadedListener mockAdLoadedListener;
-    @Mock
-    private DataSetObserver mockDataSetObserver;
-    @Mock
-    private RequestParameters mockRequestParameters;
-    @Mock
-    private ViewBinder mockViewBinder;
-    @Mock
-    private MoPubAdRenderer mockAdRenderer;
-    @Mock
-    private ListView mockListView;
-    @Mock
-    private OnItemClickListener mockOnItemClickListener;
-    @Mock
-    private OnItemLongClickListener mockOnItemLongClickListener;
-    @Mock
-    private OnItemSelectedListener mockOnItemSelectedListener;
-    @Mock
-    private View mockItemView;
-
-    private long originalItemId = 0;
-    private boolean originalHasStableIds = false;
-
-    private int originalItemViewType = 0;
-    private int originalViewTypeCount = 1;
-    private boolean originalItemsAreEnabled = false;
-    private ArrayAdapter<String> originalAdapter;
-    private MoPubAdAdapter subject;
-
-    @Before
-    public void setup() {
-        // Set up original adapter with 2 items
-        Activity activity = Robolectric.buildActivity(Activity.class).create().get();
-        originalAdapter = new ArrayAdapter<String>(activity, android.R.layout.simple_list_item_1) {
-            @Override
-            public boolean isEnabled(final int position) {
-                return originalItemsAreEnabled;
-            }
-
-            @Override
-            public long getItemId(final int position) {
-                return originalItemId;
-            }
-
-            @Override
-            public boolean hasStableIds() {
-                return originalHasStableIds;
-            }
-
-            @Override
-            public int getItemViewType(final int position) {
-                return originalItemViewType;
-            }
-
-            @Override
-            public int getViewTypeCount() {
-                return originalViewTypeCount;
-            }
-        };
-        originalAdapter.add("ITEM 1");
-        originalAdapter.add("ITEM 2");
-
-        subject = new MoPubAdAdapter(mockStreamAdPlacer, originalAdapter, mockVisibilityTracker);
-
-        // Reset because the constructor interacts with the stream ad placer, and we don't want
-        // to worry about verifying those changes in tests.
-        reset(mockStreamAdPlacer);
-
-        // Mock some simple adjustment behavior for tests. This is creating an ad placer that
-        // emulates a content item followed by an ad item, then another content item.
-        when(mockStreamAdPlacer.getAdData(AD_POSITION)).thenReturn(mockNativeAdData);
-        when(mockStreamAdPlacer.getAdView(eq(AD_POSITION), any(View.class), any(ViewGroup.class))).thenReturn(mockAdView);
-        when(mockStreamAdPlacer.isAd(anyInt())).thenAnswer(new Answer<Boolean>() {
-            @Override
-            public Boolean answer(final InvocationOnMock invocation) throws Throwable {
-                int position = (Integer)invocation.getArguments()[0];
-                return position == AD_POSITION;
-            }
-        });
-        when(mockStreamAdPlacer.getOriginalPosition(anyInt())).thenAnswer(new Answer<Integer>() {
-            @Override
-            public Integer answer(final InvocationOnMock invocation) throws Throwable {
-                int originalPosition = (Integer)invocation.getArguments()[0];
-                return originalPosition < AD_POSITION ? originalPosition : originalPosition - 1;
-            }
-        });
-        when(mockStreamAdPlacer.getAdViewType(anyInt())).thenAnswer(new Answer<Integer>() {
-            @Override
-            public Integer answer(final InvocationOnMock invocation) throws Throwable {
-                int originalPosition = (Integer)invocation.getArguments()[0];
-                return originalPosition == AD_POSITION ? 1 : MoPubStreamAdPlacer.CONTENT_VIEW_TYPE;
-            }
-        });
-        when(mockStreamAdPlacer.getAdjustedPosition(anyInt())).thenAnswer(new Answer<Integer>() {
-            @Override
-            public Integer answer(final InvocationOnMock invocation) throws Throwable {
-                int originalPosition = (Integer)invocation.getArguments()[0];
-                return originalPosition < AD_POSITION ? originalPosition : originalPosition + 1;
-            }
-        });
-        when(mockStreamAdPlacer.getAdjustedCount(anyInt())).thenAnswer(new Answer<Integer>() {
-            @Override
-            public Integer answer(final InvocationOnMock invocation) throws Throwable {
-                int originalCount = (Integer)invocation.getArguments()[0];
-                return originalCount < AD_POSITION ? originalCount : originalCount + 1;
-            }
-        });
-    }
-
-    @Test
-    public void originalAdapterChange_shouldNotifyDataSetChanged() {
-        subject.registerDataSetObserver(mockDataSetObserver);
-
-        originalAdapter.notifyDataSetChanged();
-
-        verify(mockDataSetObserver).onChanged();
-    }
-
-    @Test
-    public void originalAdapterInvalidated_shouldNotifyDataSetInvalidated() {
-        subject.registerDataSetObserver(mockDataSetObserver);
-
-        originalAdapter.notifyDataSetInvalidated();
-
-        verify(mockDataSetObserver).onInvalidated();
-    }
-
-    @Test
-    public void registerAdRenderer_shouldCallRegisterAdRendererOnAdPlacer() {
-        subject.registerAdRenderer(mockAdRenderer);
-
-        verify(mockStreamAdPlacer).registerAdRenderer(mockAdRenderer);
-    }
-
-    @Test
-    public void registerAdRenderer_withNull_shouldNotCallAdPlacer() {
-        subject.registerAdRenderer(null);
-
-        verify(mockStreamAdPlacer, never()).registerAdRenderer(any(MoPubAdRenderer.class));
-    }
-
-    @Test
-    public void setAdLoadedListener_handleAdLoaded_shouldCallCallback_shouldCallObserver() {
-        subject.setAdLoadedListener(mockAdLoadedListener);
-        subject.registerDataSetObserver(mockDataSetObserver);
-
-        subject.handleAdLoaded(8);
-
-        verify(mockAdLoadedListener).onAdLoaded(8);
-        verify(mockDataSetObserver).onChanged();
-    }
-
-    @Test
-    public void setAdLoadedListener_handleAdRemoved_shouldCallCallback_shouldCallObserver() {
-        subject.setAdLoadedListener(mockAdLoadedListener);
-        subject.registerDataSetObserver(mockDataSetObserver);
-
-        subject.handleAdRemoved(10);
-
-        verify(mockAdLoadedListener).onAdRemoved(10);
-        verify(mockDataSetObserver).onChanged();
-    }
-
-    @Test
-    public void loadAds_shouldCallLoadAdsOnAdPlacer() {
-        subject.loadAds("AD_UNIT_ID");
-
-        verify(mockStreamAdPlacer).loadAds("AD_UNIT_ID");
-
-        subject.loadAds("AD_UNIT_ID", mockRequestParameters);
-
-        verify(mockStreamAdPlacer).loadAds("AD_UNIT_ID", mockRequestParameters);
-    }
-
-    @Test
-    public void isAd_shouldCallIsAdOnAdPlacer() {
-        boolean isAd = subject.isAd(AD_POSITION);
-
-        assertThat(isAd).isTrue();
-
-        isAd = subject.isAd(AD_POSITION + 1);
-
-        assertThat(isAd).isFalse();
-
-        verify(mockStreamAdPlacer, times(2)).isAd(anyInt());
-    }
-
-    @Test
-    public void clearAds_shouldCallClearAdsOnAdPlacer() {
-        subject.clearAds();
-
-        verify(mockStreamAdPlacer).clearAds();
-    }
-
-    @Test
-    public void destroy_shouldDestroyStreamAdPlacer_shouldDestroyVisibilityTracker() {
-        subject.destroy();
-
-        verify(mockStreamAdPlacer).destroy();
-        verify(mockVisibilityTracker).destroy();
-    }
-
-    @Test
-    public void isEnabled_adPosition_shouldReturnTrue() {
-        boolean isEnabled = subject.isEnabled(AD_POSITION);
-
-        assertThat(isEnabled).isTrue();
-    }
-
-    @Test
-    public void isEnabled_withNonAdPosition_shouldUseOriginalAdapter() {
-        originalItemsAreEnabled = false;
-        boolean isEnabled = subject.isEnabled(AD_POSITION + 1);
-
-        assertThat(isEnabled).isFalse();
-
-        originalItemsAreEnabled = true;
-        isEnabled = subject.isEnabled(AD_POSITION + 1);
-
-        assertThat(isEnabled).isTrue();
-    }
-
-    @Test
-    public void getItem_withAdPosition_shouldReturnAd_shouldGetAdDataOnCallAdPlacer() {
-        Object actualItem = subject.getItem(AD_POSITION);
-
-        assertThat(actualItem).isEqualTo(mockNativeAdData);
-
-        verify(mockStreamAdPlacer).getAdData(AD_POSITION);
-    }
-
-    @Test
-    public void getItem_withNonAdPosition_shouldCallGetOriginalPositionOnAdPlacer() {
-        Object actualItem = subject.getItem(AD_POSITION + 1);
-
-        assertThat(actualItem).isNotEqualTo(mockNativeAdData);
-
-        verify(mockStreamAdPlacer).getOriginalPosition(AD_POSITION + 1);
-    }
-
-    @Test
-    public void getCount_shouldCallGetAdjustedCountOnAdPlacer() {
-        int actualCount = subject.getCount();
-
-        assertThat(actualCount).isEqualTo(3);
-
-        verify(mockStreamAdPlacer).getAdjustedCount(anyInt());
-    }
-
-    @Test
-    public void getItemId_withAdPosition_shouldBeNegative() {
-        long itemId = subject.getItemId(AD_POSITION);
-
-        assertThat(itemId).isLessThan(0);
-    }
-
-    @Test
-    public void getItemId_withNonAdPosition_shouldUseOriginalAdapterId() {
-        originalItemId = 42;
-        long itemId = subject.getItemId(AD_POSITION + 1);
-
-        assertThat(itemId).isEqualTo(42);
-    }
-
-    @Test
-    public void hasStableIds_shouldUseOriginalAdapterValue() {
-        originalHasStableIds = false;
-        boolean hasStableIds = subject.hasStableIds();
-
-        assertThat(hasStableIds).isFalse();
-
-        originalHasStableIds = true;
-        hasStableIds = subject.hasStableIds();
-
-        assertThat(hasStableIds).isTrue();
-    }
-
-    @Test
-    public void getView_withAdPosition_shouldReturnAdView_shouldTrackVisibility() {
-        View view = subject.getView(AD_POSITION, null, null);
-
-        assertThat(view).isEqualTo(mockAdView);
-
-        verify(mockVisibilityTracker).addView(eq(mockAdView), anyInt());
-    }
-
-    @Test
-    public void getView_withNonAdPosition_shouldOriginalAdapterView_shouldTrackVisibility() {
-        View view = subject.getView(AD_POSITION + 1, null, null);
-
-        assertThat(view).isNotEqualTo(mockAdView);
-
-        verify(mockVisibilityTracker).addView(any(View.class), anyInt());
-    }
-
-    @Test
-    public void getItemViewType_withAdPosition_shouldReturnOneGreaterThanViewType() {
-        originalItemViewType = 0;
-
-        int itemViewType = subject.getItemViewType(AD_POSITION);
-        assertThat(itemViewType).isEqualTo(originalItemViewType + 1);
-    }
-
-    @Test
-    public void getItemViewType_withNonAdPosition_shouldUseOriginalAdapterId() {
-        originalItemViewType = 0;
-
-        int itemViewType = subject.getItemViewType(AD_POSITION + 1);
-        assertThat(itemViewType).isEqualTo(originalItemViewType);
-    }
-
-    @Test
-    public void getViewTypeCount_shouldReturnOriginalViewTypeCountPlusOne() {
-        originalViewTypeCount = 1;
-
-        int viewTypeCount = subject.getViewTypeCount();
-        assertThat(viewTypeCount).isEqualTo(1);
-
-        originalViewTypeCount = 2;
-
-        viewTypeCount = subject.getViewTypeCount();
-        assertThat(viewTypeCount).isEqualTo(2);
-    }
-
-    @Test
-    public void isEmpty_shouldUseOriginalAdapterValue() {
-        boolean isEmpty = subject.isEmpty();
-
-        assertThat(isEmpty).isFalse();
-
-        originalAdapter.clear();
-
-        isEmpty = subject.isEmpty();
-
-        assertThat(isEmpty).isTrue();
-    }
-
-    @Test
-    public void getOriginalPosition_shouldCallStreamAdPlacer() {
-        subject.getOriginalPosition(5);
-
-        verify(mockStreamAdPlacer).getOriginalPosition(5);
-    }
-
-    @Test
-    public void getAdjustedPosition_shouldCallStreamAdPlacer() {
-        subject.getAdjustedPosition(5);
-
-        verify(mockStreamAdPlacer).getAdjustedPosition(5);
-    }
-
-    @Test
-    public void insertItem_shouldCallInsertItemOnStreamAdPlacer() {
-        subject.insertItem(5);
-
-        verify(mockStreamAdPlacer).insertItem(5);
-    }
-
-    @Test
-    public void removeItem_shouldCallRemoveItemOnStreamAdPlacer() {
-        subject.removeItem(5);
-
-        verify(mockStreamAdPlacer).removeItem(5);
-    }
-
-    @Test
-    public void setOnItemClickListener_withAdPosition_shouldNotCallListener() {
-        subject.setOnClickListener(mockListView, mockOnItemClickListener);
-
-        ArgumentCaptor<OnItemClickListener> listenerCaptor =
-                ArgumentCaptor.forClass(OnItemClickListener.class);
-        verify(mockListView).setOnItemClickListener(listenerCaptor.capture());
-
-        OnItemClickListener listener = listenerCaptor.getValue();
-        listener.onItemClick(mockListView, mockItemView, AD_POSITION, 0);
-
-        verify(mockOnItemClickListener, never()).onItemClick(
-                any(AdapterView.class), any(View.class), anyInt(), anyInt());
-    }
-
-    @Test
-    public void setOnItemClickListener_withNonAdPosition_shouldCallListener() {
-        subject.setOnClickListener(mockListView, mockOnItemClickListener);
-
-        ArgumentCaptor<OnItemClickListener> listenerCaptor =
-                ArgumentCaptor.forClass(OnItemClickListener.class);
-        verify(mockListView).setOnItemClickListener(listenerCaptor.capture());
-
-        OnItemClickListener listener = listenerCaptor.getValue();
-        listener.onItemClick(mockListView, mockItemView, AD_POSITION + 1, 0);
-
-        verify(mockOnItemClickListener).onItemClick(
-                mockListView, mockItemView, AD_POSITION, 0);
-    }
-
-    @Test
-    public void setOnItemLongClickListener_withAdPosition_shouldNotCallListener() {
-        subject.setOnItemLongClickListener(mockListView, mockOnItemLongClickListener);
-
-        ArgumentCaptor<OnItemLongClickListener> listenerCaptor =
-                ArgumentCaptor.forClass(OnItemLongClickListener.class);
-        verify(mockListView).setOnItemLongClickListener(listenerCaptor.capture());
-
-        OnItemLongClickListener listener = listenerCaptor.getValue();
-        listener.onItemLongClick(mockListView, mockItemView, AD_POSITION, 0);
-
-        verify(mockOnItemLongClickListener, never()).onItemLongClick(
-                any(AdapterView.class), any(View.class), anyInt(), anyInt());
-    }
-
-    @Test
-    public void setOnItemLongClickListener_withNonAdPosition_shouldCallListener() {
-        subject.setOnItemLongClickListener(mockListView, mockOnItemLongClickListener);
-
-        ArgumentCaptor<OnItemLongClickListener> listenerCaptor =
-                ArgumentCaptor.forClass(OnItemLongClickListener.class);
-        verify(mockListView).setOnItemLongClickListener(listenerCaptor.capture());
-
-        OnItemLongClickListener listener = listenerCaptor.getValue();
-        listener.onItemLongClick(mockListView, mockItemView, AD_POSITION + 1, 0);
-
-        verify(mockOnItemLongClickListener).onItemLongClick(
-                mockListView, mockItemView, AD_POSITION, 0);
-    }
-
-    @Test
-    public void setOnItemSelectedListener_withAdPosition_shouldNotCallListener() {
-        subject.setOnItemSelectedListener(mockListView, mockOnItemSelectedListener);
-
-        ArgumentCaptor<OnItemSelectedListener> listenerCaptor =
-                ArgumentCaptor.forClass(OnItemSelectedListener.class);
-        verify(mockListView).setOnItemSelectedListener(listenerCaptor.capture());
-
-        OnItemSelectedListener listener = listenerCaptor.getValue();
-        listener.onItemSelected(mockListView, mockItemView, AD_POSITION, 0);
-
-        verify(mockOnItemSelectedListener, never()).onItemSelected(
-                any(AdapterView.class), any(View.class), anyInt(), anyInt());
-    }
-
-    @Test
-    public void setOnItemSelectedListener_withNonAdPosition_shouldCallListener() {
-        subject.setOnItemSelectedListener(mockListView, mockOnItemSelectedListener);
-
-        ArgumentCaptor<OnItemSelectedListener> listenerCaptor =
-                ArgumentCaptor.forClass(OnItemSelectedListener.class);
-        verify(mockListView).setOnItemSelectedListener(listenerCaptor.capture());
-
-        OnItemSelectedListener listener = listenerCaptor.getValue();
-        listener.onItemSelected(mockListView, mockItemView, AD_POSITION + 1, 0);
-
-        verify(mockOnItemSelectedListener).onItemSelected(
-                mockListView, mockItemView, AD_POSITION, 0);
-    }
-
-    @Test
-    public void setSelection_shouldCallSetSelectionOnListView() {
-        subject.setSelection(mockListView, AD_POSITION);
-
-        // Since the original position is the ad position, the adjusted position is 1 higher
-        verify(mockListView).setSelection(AD_POSITION + 1);
-    }
-
-    @Test
-    public void smoothScrollToPosition_shouldCallSmoothScrollToPositionOnListView() {
-        subject.smoothScrollToPosition(mockListView, AD_POSITION);
-
-        // Since the original position is the ad position, the adjusted position is 1 higher
-        verify(mockListView).smoothScrollToPosition(AD_POSITION + 1);
-    }
-
-    @Test
-    public void refreshAds_shouldLoadAdsOnAdPlacer() {
-        when(mockListView.getAdapter()).thenReturn(subject);
-
-        subject.refreshAds(mockListView, "AD_UNIT_ID", mockRequestParameters);
-
-        verify(mockStreamAdPlacer).loadAds("AD_UNIT_ID", mockRequestParameters);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubClientPositioningTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubClientPositioningTest.java
deleted file mode 100644
index 7339313b..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubClientPositioningTest.java
+++ /dev/null
@@ -1,92 +0,0 @@
-package com.mopub.nativeads;
-
-import com.mopub.common.Preconditions.NoThrow;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
-
-import org.fest.util.Lists;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import static com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning.NO_REPEAT;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class MoPubClientPositioningTest {
-
-    private MoPubClientPositioning subject;
-
-    @Before
-    public void setup() {
-        subject = MoPubNativeAdPositioning.clientPositioning();
-    }
-
-    @Test
-    public void addFixedPositionsOutOfOrder_shouldBeSorted() {
-        subject.addFixedPosition(27);
-        subject.addFixedPosition(31);
-        subject.addFixedPosition(17);
-        subject.addFixedPosition(7);
-        subject.addFixedPosition(56);
-
-        assertThat(subject.getFixedPositions())
-                .isEqualTo(Lists.newArrayList(7, 17, 27, 31, 56));
-    }
-
-    @Test
-    public void setRepeatingEnabled_shouldHaveRightInterval() {
-        subject.addFixedPosition(10);
-        subject.enableRepeatingPositions(5);
-
-        assertThat(subject.getRepeatingInterval()).isEqualTo(5);
-        assertThat(subject.getFixedPositions()).isEqualTo(Lists.newArrayList(10));
-    }
-
-    @Test
-    public void setNoRepeat_shouldReturnNoRepeat() {
-        subject.enableRepeatingPositions(5);
-        subject.enableRepeatingPositions(NO_REPEAT);
-
-        assertThat(subject.getRepeatingInterval()).isEqualTo(NO_REPEAT);
-    }
-
-    @Test
-    public void setFixedPositionTwice_shouldReturnOnlyOne() {
-        subject.addFixedPosition(7);
-        subject.addFixedPosition(7);
-
-        assertThat(subject.getFixedPositions().size()).isEqualTo(1);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void setInvalidFixedPosition_strictMode_shouldThrow() {
-        NoThrow.setStrictMode(true);
-        subject.addFixedPosition(-3);
-    }
-
-    @Test
-    public void setInvalidFixedPosition_releaseMode_shouldNotAddPosition() {
-        NoThrow.setStrictMode(false);
-        subject.addFixedPosition(-3);
-
-        assertThat(subject.getFixedPositions().size()).isEqualTo(0);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void setInvalidRepeatingInterval_strictMode_shouldThrow() {
-        NoThrow.setStrictMode(true);
-        subject.enableRepeatingPositions(1);
-    }
-
-    @Test
-    public void setInvalidRepeatingInterval_releaseMode_shouldClearRepeatingInterval() {
-        NoThrow.setStrictMode(false);
-        subject.enableRepeatingPositions(0);
-
-        assertThat(subject.getRepeatingInterval()).isEqualTo(NO_REPEAT);
-    }
-}
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
deleted file mode 100644
index a4273408..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
+++ /dev/null
@@ -1,65 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-
-import com.mopub.common.DataKeys;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.nativeads.MoPubCustomEventNative.MoPubStaticNativeAd;
-
-import org.json.JSONArray;
-import org.json.JSONObject;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import java.util.HashMap;
-
-import static com.mopub.nativeads.CustomEventNative.CustomEventNativeListener;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class MoPubCustomEventNativeTest {
-
-    private MoPubCustomEventNative subject;
-    private Activity context;
-    private HashMap<String, Object> localExtras;
-    private HashMap<String, String> serverExtras;
-    private JSONObject fakeJsonObject;
-
-    @Mock private CustomEventNativeListener mockCustomEventNativeListener;
-
-    @Before
-    public void setUp() throws Exception {
-        subject = new MoPubCustomEventNative();
-        context = Robolectric.buildActivity(Activity.class).create().get();
-
-        localExtras = new HashMap<String, Object>();
-        serverExtras = new HashMap<String, String>();
-
-        fakeJsonObject = new JSONObject();
-        fakeJsonObject.put("imptracker", new JSONArray("[\"url1\", \"url2\"]"));
-        fakeJsonObject.put("clktracker", "expected clicktracker");
-        fakeJsonObject.put("mainimage", "mainimageurl");
-        fakeJsonObject.put("iconimage", "iconimageurl");
-        fakeJsonObject.put("extraimage", "extraimageurl");
-
-        localExtras.put(DataKeys.JSON_BODY_KEY, fakeJsonObject);
-    }
-
-    @Test
-    public void loadNativeAd_withNullResponseBody_shouldNotifyListenerOfOnNativeAdFailed() {
-        localExtras.remove(DataKeys.JSON_BODY_KEY);
-
-        subject.loadNativeAd(context, mockCustomEventNativeListener, localExtras, serverExtras);
-        verify(mockCustomEventNativeListener, never())
-                .onNativeAdLoaded(any(MoPubStaticNativeAd.class));
-        verify(mockCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.INVALID_RESPONSE);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventVideoNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventVideoNativeTest.java
deleted file mode 100644
index df3fb4de..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventVideoNativeTest.java
+++ /dev/null
@@ -1,224 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-
-import com.mopub.common.DataKeys;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.nativeads.MoPubCustomEventVideoNative.VideoResponseHeaders;
-import com.mopub.network.MaxWidthImageLoader;
-import com.mopub.network.Networking;
-
-import org.json.JSONArray;
-import org.json.JSONObject;
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import java.util.HashMap;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class MoPubCustomEventVideoNativeTest {
-
-    private MoPubCustomEventVideoNative subject;
-    private Activity context;
-    private HashMap<String, Object> localExtras;
-    private HashMap<String, String> serverExtras;
-    private JSONObject jsonObject;
-
-    @Mock private CustomEventNative.CustomEventNativeListener mockCustomEventNativeListener;
-
-    @Before
-    public void setUp() throws Exception {
-        subject = new MoPubCustomEventVideoNative();
-        context = Robolectric.buildActivity(Activity.class).create().get();
-
-        localExtras = new HashMap<String, Object>();
-        jsonObject = new JSONObject();
-        jsonObject.put("imptracker", new JSONArray("[\"url1\", \"url2\"]"));
-        jsonObject.put("clktracker", "expected clicktracker");
-        jsonObject.put("mainimage", "mainimageurl");
-        jsonObject.put("iconimage", "iconimageurl");
-        jsonObject.put("extraimage", "extraimageurl");
-        localExtras.put(DataKeys.JSON_BODY_KEY, jsonObject);
-        localExtras.put(DataKeys.CLICK_TRACKING_URL_KEY, "clicktrackingurl");
-
-        serverExtras = new HashMap<String, String>();
-        serverExtras.put("Play-Visible-Percent", "10");
-        serverExtras.put("Pause-Visible-Percent", "5");
-        serverExtras.put("Impression-Min-Visible-Percent", "15");
-        serverExtras.put("Impression-Visible-Ms", "100");
-        serverExtras.put("Max-Buffer-Ms", "20");
-        serverExtras.put("Video-Trackers", "{" +
-                "urls: [" +
-                    "\"http://mopub.com/%%VIDEO_EVENT%%/foo\"," +
-                    "\"http://mopub.com/%%VIDEO_EVENT%%/bar\"" +
-                "]," +
-                "events: [" +
-                    "\"start\"," +
-                    "\"firstQuartile\"," +
-                    "\"midpoint\"," +
-                    "\"thirdQuartile\"," +
-                    "\"complete\"," +
-                    "\"companionAdView\"," +
-                    "\"companionAdClick\"" +
-                "]" +
-            "}");
-
-    }
-
-    @After
-    public void tearDown() {
-        Networking.setImageLoaderForTesting(null);
-    }
-
-    @Test
-    public void loadNativeAd_withJsonNotInstanceOfJSONObject_shouldNotifyListenerOnNativeAdFailed() {
-        localExtras.put("com_mopub_native_json", "");
-        subject.loadNativeAd(context, mockCustomEventNativeListener, localExtras, serverExtras);
-
-        verify(mockCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.INVALID_RESPONSE);
-        verify(mockCustomEventNativeListener, never()).onNativeAdLoaded(any(BaseNativeAd.class));
-    }
-
-    @Test
-    public void loadNativeAd_withInvalidHeaders_shouldNotifyListenerOnNativeAdFailed() {
-        serverExtras.put("Play-Visible-Percent", "not_a_number");
-        subject.loadNativeAd(context, mockCustomEventNativeListener, localExtras, serverExtras);
-
-        verify(mockCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.INVALID_RESPONSE);
-        verify(mockCustomEventNativeListener, never()).onNativeAdLoaded(any(BaseNativeAd.class));
-    }
-
-    @Test
-    public void loadNativeAd_withMissingRequiredKeys_shouldNotifyListenerOnNativeAdFailed() {
-        jsonObject.remove("imptracker");
-        subject.loadNativeAd(context, mockCustomEventNativeListener, localExtras, serverExtras);
-        verify(mockCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
-
-        reset(mockCustomEventNativeListener);
-        jsonObject.remove("clktracker");
-        subject.loadNativeAd(context, mockCustomEventNativeListener, localExtras, serverExtras);
-        verify(mockCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
-        verify(mockCustomEventNativeListener, never()).onNativeAdLoaded(any(BaseNativeAd.class));
-    }
-
-    @Test
-    public void loadNativeAd_withMissingClickTracker_shouldNotifyListenerOnNativeAdFailed() {
-        localExtras.remove(DataKeys.CLICK_TRACKING_URL_KEY);
-        subject.loadNativeAd(context, mockCustomEventNativeListener, localExtras, serverExtras);
-        verify(mockCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
-        verify(mockCustomEventNativeListener, never()).onNativeAdLoaded(any(BaseNativeAd.class));
-    }
-
-    @Test
-    public void loadNativeAd_withNullClickTracker_shouldNotifyListenerOnNativeAdFailed() {
-        localExtras.put(DataKeys.CLICK_TRACKING_URL_KEY, null);
-        subject.loadNativeAd(context, mockCustomEventNativeListener, localExtras, serverExtras);
-        verify(mockCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
-        verify(mockCustomEventNativeListener, never()).onNativeAdLoaded(any(BaseNativeAd.class));
-    }
-
-    @Test
-    public void loadNativeAd_withEmptyClickTracker_shouldNotifyListenerOnNativeAdFailed() {
-        localExtras.put(DataKeys.CLICK_TRACKING_URL_KEY, "");
-        subject.loadNativeAd(context, mockCustomEventNativeListener, localExtras, serverExtras);
-        verify(mockCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
-        verify(mockCustomEventNativeListener, never()).onNativeAdLoaded(any(BaseNativeAd.class));
-    }
-
-    @Test
-    public void loadNativeAd_withAllRequirementsMet_shouldNotNotifyListenerFailed_shouldNotThrowException() {
-        Networking.setImageLoaderForTesting(mock(MaxWidthImageLoader.class));
-        subject.loadNativeAd(context, mockCustomEventNativeListener, localExtras, serverExtras);
-
-        verifyNoMoreInteractions(mockCustomEventNativeListener);
-    }
-
-    @Test
-    public void VideoResponseHeaders_constructor_withValidNumberString_shouldInitializeVariablesCorrectly() {
-        VideoResponseHeaders videoResponseHeaders = new VideoResponseHeaders(serverExtras);
-
-        assertThat(videoResponseHeaders.hasValidHeaders()).isTrue();
-        assertThat(videoResponseHeaders.getPlayVisiblePercent()).isEqualTo(10);
-        assertThat(videoResponseHeaders.getPauseVisiblePercent()).isEqualTo(5);
-        assertThat(videoResponseHeaders.getImpressionMinVisiblePercent()).isEqualTo(15);
-        assertThat(videoResponseHeaders.getImpressionVisibleMs()).isEqualTo(100);
-        assertThat(videoResponseHeaders.getMaxBufferMs()).isEqualTo(20);
-    }
-
-    @Test
-    public void VideoResponseHeaders_constructor_withValidJson_shouldSetVideoTrackersToJsonObject() throws Exception {
-        VideoResponseHeaders videoResponseHeaders = new VideoResponseHeaders(serverExtras);
-        JSONObject expectedVideoTrackers = new JSONObject("{" +
-                "urls: [" +
-                    "\"http://mopub.com/%%VIDEO_EVENT%%/foo\"," +
-                    "\"http://mopub.com/%%VIDEO_EVENT%%/bar\"" +
-                "]," +
-                "events: [" +
-                    "\"start\"," +
-                    "\"firstQuartile\"," +
-                    "\"midpoint\"," +
-                    "\"thirdQuartile\"," +
-                    "\"complete\"," +
-                    "\"companionAdView\"," +
-                    "\"companionAdClick\"" +
-                "]" +
-            "}");
-
-        assertThat(videoResponseHeaders.getVideoTrackers().toString())
-                .isEqualTo(expectedVideoTrackers.toString());
-    }
-
-    @Test
-    public void VideoResponseHeaders_constructor_withInvalidNumberString_withInvalidJson_shouldSetHeadersAreValidToFalse() {
-        serverExtras.put("Play-Visible-Percent", "not_a_number");
-        VideoResponseHeaders videoResponseHeaders = new VideoResponseHeaders(serverExtras);
-        assertThat(videoResponseHeaders.hasValidHeaders()).isFalse();
-
-        serverExtras.put("Play-Visible-Percent", "10");
-        serverExtras.put("Pause-Visible-Percent", "not_a_number");
-        videoResponseHeaders = new VideoResponseHeaders(serverExtras);
-        assertThat(videoResponseHeaders.hasValidHeaders()).isFalse();
-
-        serverExtras.put("Pause-Visible-Percent", "5");
-        serverExtras.put("Impression-Min-Visible-Percent", "not_a_number");
-        videoResponseHeaders = new VideoResponseHeaders(serverExtras);
-        assertThat(videoResponseHeaders.hasValidHeaders()).isFalse();
-
-        serverExtras.put("Impression-Min-Visible-Percent", "15");
-        serverExtras.put("Impression-Visible-Ms", "not_a_number");
-        videoResponseHeaders = new VideoResponseHeaders(serverExtras);
-        assertThat(videoResponseHeaders.hasValidHeaders()).isFalse();
-
-        serverExtras.put("Impression-Visible-Ms", "100");
-        serverExtras.put("Max-Buffer-Ms", "not_a_number");
-        videoResponseHeaders = new VideoResponseHeaders(serverExtras);
-        assertThat(videoResponseHeaders.hasValidHeaders()).isFalse();
-
-        serverExtras.put("Max-Buffer-Ms", "20");
-        videoResponseHeaders = new VideoResponseHeaders(serverExtras);
-        assertThat(videoResponseHeaders.hasValidHeaders()).isTrue();
-    }
-
-    @Test
-    public void VideoResponseHeaders_constructor_withInvalidJson_shouldSetVideoTrackersToNull() throws Exception {
-        serverExtras.put("Video-Trackers", "not_a_json_object");
-        VideoResponseHeaders videoResponseHeaders = new VideoResponseHeaders(serverExtras);
-
-        assertThat(videoResponseHeaders.getVideoTrackers()).isNull();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
deleted file mode 100644
index d8bb770b..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
+++ /dev/null
@@ -1,181 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.test.support.ShadowAsyncTasks;
-import com.mopub.common.util.test.support.TestMethodBuilderFactory;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.mobileads.MoPubErrorCode;
-import com.mopub.nativeads.MoPubNative.MoPubNativeNetworkListener;
-import com.mopub.network.MoPubNetworkError;
-import com.mopub.network.MoPubRequestQueue;
-import com.mopub.network.Networking;
-import com.mopub.volley.NoConnectionError;
-import com.mopub.volley.Request;
-import com.mopub.volley.VolleyError;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-import org.robolectric.Shadows;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowLog;
-
-import java.net.MalformedURLException;
-import java.util.List;
-import java.util.logging.Level;
-
-import static android.Manifest.permission.ACCESS_NETWORK_STATE;
-import static android.Manifest.permission.INTERNET;
-import static com.mopub.common.VolleyRequestMatcher.isUrl;
-import static com.mopub.common.util.Reflection.MethodBuilder;
-import static com.mopub.nativeads.MoPubNative.EMPTY_NETWORK_LISTENER;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.argThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class, shadows = {ShadowAsyncTasks.class})
-public class MoPubNativeTest {
-    private MoPubNative subject;
-    private MethodBuilder methodBuilder;
-    private Activity context;
-    private static final String adUnitId = "test_adunit_id";
-
-    @Mock private MoPubNativeNetworkListener mockNetworkListener;
-    @Mock private MoPubRequestQueue mockRequestQueue;
-    @Mock private AdRendererRegistry mockAdRendererRegistry;
-    @Mock private MoPubStaticNativeAdRenderer mockRenderer;
-
-    @Before
-    public void setup() {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        Shadows.shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
-        Shadows.shadowOf(context).grantPermissions(INTERNET);
-        subject = new MoPubNative(context, adUnitId, mockAdRendererRegistry, mockNetworkListener);
-        methodBuilder = TestMethodBuilderFactory.getSingletonMock();
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-    }
-
-    @After
-    public void tearDown() {
-        reset(methodBuilder);
-    }
-
-    @Test
-    public void registerAdRenderer_shouldCallAdRednererRegistryRegisterAdRenderer() throws Exception {
-        subject.registerAdRenderer(mockRenderer);
-
-        verify(mockAdRendererRegistry).registerAdRenderer(mockRenderer);
-    }
-
-    @Test
-    public void destroy_shouldSetListenersToEmptyAndClearContext() {
-        assertThat(subject.getContextOrDestroy()).isSameAs(context);
-        assertThat(subject.getMoPubNativeNetworkListener()).isSameAs(mockNetworkListener);
-
-        subject.destroy();
-
-        assertThat(subject.getContextOrDestroy()).isNull();
-        assertThat(subject.getMoPubNativeNetworkListener()).isSameAs(EMPTY_NETWORK_LISTENER);
-    }
-
-    @Test
-    public void loadNativeAd_shouldReturnFast() {
-        Robolectric.getForegroundThreadScheduler().pause();
-
-        subject.destroy();
-        subject.makeRequest();
-
-        assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
-    }
-
-    @Test
-    public void requestNativeAd_shouldFireNetworkRequest() {
-        subject.requestNativeAd("https://www.mopub.com");
-
-        verify(mockNetworkListener, never()).onNativeFail(any(NativeErrorCode.class));
-        verify(mockRequestQueue).add(argThat(isUrl("https://www.mopub.com")));
-    }
-
-    @Test
-    public void requestNativeAd_whenReqeustQueueDeliversUnknownError_shouldFireNativeFail() {
-
-        when(mockRequestQueue.add(any(Request.class)))
-                .then(new Answer<Void>() {
-                    @Override
-                    public Void answer(final InvocationOnMock invocationOnMock) throws Throwable {
-                        ((Request) invocationOnMock.getArguments()[0]).deliverError(new VolleyError(new MalformedURLException()));
-                        return null;
-                    }
-                });
-        subject.requestNativeAd("//\\//\\::::");
-
-        verify(mockNetworkListener).onNativeFail(any(NativeErrorCode.class));
-    }
-
-    @Test
-    public void requestNativeAd_withNullUrl_shouldFireNativeFail() {
-        Robolectric.getForegroundThreadScheduler().pause();
-
-        subject.requestNativeAd(null);
-
-        verify(mockNetworkListener).onNativeFail(any(NativeErrorCode.class));
-        verify(mockRequestQueue, never()).add(any(Request.class));
-    }
-
-    @Test
-    public void onAdError_shouldNotifyListener() {
-        subject.onAdError(new MoPubNetworkError(MoPubNetworkError.Reason.BAD_BODY));
-
-        verify(mockNetworkListener).onNativeFail(eq(NativeErrorCode.INVALID_RESPONSE));
-    }
-
-    @Test
-    public void onAdError_whenNotMoPubError_shouldNotifyListener() {
-        subject.onAdError(new VolleyError("generic"));
-
-        verify(mockNetworkListener).onNativeFail(eq(NativeErrorCode.UNSPECIFIED));
-    }
-
-    @Test
-    public void onAdError_withVolleyErrorWarmingUp_shouldLogMoPubErrorCodeWarmup_shouldNotifyListener() {
-        MoPubLog.setSdkHandlerLevel(Level.ALL);
-
-        subject.onAdError(new MoPubNetworkError(MoPubNetworkError.Reason.WARMING_UP));
-
-        final List<ShadowLog.LogItem> allLogMessages = ShadowLog.getLogs();
-        final ShadowLog.LogItem latestLogMessage = allLogMessages.get(allLogMessages.size() - 1);
-
-        // All log messages end with a newline character.
-        assertThat(latestLogMessage.msg.trim()).isEqualTo(MoPubErrorCode.WARMUP.toString());
-        verify(mockNetworkListener).onNativeFail(eq(NativeErrorCode.EMPTY_AD_RESPONSE));
-    }
-
-    @Test
-    public void onAdError_withNoConnection_shouldLogMoPubErrorCodeNoConnection_shouldNotifyListener() {
-        MoPubLog.setSdkHandlerLevel(Level.ALL);
-        Shadows.shadowOf(context).denyPermissions(INTERNET);
-
-        subject.onAdError(new NoConnectionError());
-
-        final List<ShadowLog.LogItem> allLogMessages = ShadowLog.getLogs();
-        final ShadowLog.LogItem latestLogMessage = allLogMessages.get(allLogMessages.size() - 1);
-
-        // All log messages end with a newline character.
-        assertThat(latestLogMessage.msg.trim()).isEqualTo(MoPubErrorCode.NO_CONNECTION.toString());
-        verify(mockNetworkListener).onNativeFail(eq(NativeErrorCode.CONNECTION_ERROR));
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubRecyclerAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubRecyclerAdapterTest.java
deleted file mode 100644
index 444dd1f9..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubRecyclerAdapterTest.java
+++ /dev/null
@@ -1,704 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.support.v7.widget.LinearLayoutManager;
-import android.support.v7.widget.RecyclerView;
-import android.view.View;
-import android.view.ViewGroup;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Mock;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.annotation.Config;
-
-import java.util.HashSet;
-import java.util.Set;
-
-import static com.mopub.nativeads.MoPubRecyclerAdapter.ContentChangeStrategy.INSERT_AT_END;
-import static com.mopub.nativeads.MoPubRecyclerAdapter.ContentChangeStrategy.KEEP_ADS_FIXED;
-import static com.mopub.nativeads.MoPubRecyclerAdapter.ContentChangeStrategy.MOVE_ALL_ADS_WITH_CONTENT;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.verifyZeroInteractions;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class MoPubRecyclerAdapterTest {
-    private static final int AD_POSITION_1 = 1;
-    private static final int AD_POSITION_7 = 7;
-
-    @Mock MoPubStreamAdPlacer mockStreamAdPlacer;
-    @Mock VisibilityTracker mockVisibilityTracker;
-    @Mock
-    NativeAd mMockNativeAd;
-    @Mock
-    NativeAd mMockNativeAd2;
-    @Mock MoPubAdRenderer mockAdRenderer;
-    @Mock ViewGroup mockParent;
-    @Mock View mockAdView;
-    @Mock RecyclerView.AdapterDataObserver mockObserver;
-    @Mock MoPubNativeAdLoadedListener mockAdLoadedListener;
-    MoPubRecyclerViewHolder spyViewHolder;
-    @Mock TestHolder mockTestHolder;
-    TestAdapter originalAdapter;
-
-    MoPubRecyclerAdapter subject;
-
-    @Mock RecyclerView mockRecyclerView;
-    @Mock LinearLayoutManager mockLayoutManager;
-
-    @Before
-    public void setUp() throws Exception {
-        originalAdapter = spy(new TestAdapter());
-        subject = new MoPubRecyclerAdapter(mockStreamAdPlacer, originalAdapter, mockVisibilityTracker);
-
-        spyViewHolder = spy(new MoPubRecyclerViewHolder(mockAdView));
-
-        // Reset because the constructor interacts with the stream ad placer, and we don't want
-        // to worry about verifying those changes in tests.
-        reset(mockStreamAdPlacer);
-        reset(originalAdapter);
-
-        // Mock some simple adjustment behavior for tests. This is creating an ad placer that
-        // emulates a content item followed by an ad item, then another content item.
-        when(mockStreamAdPlacer.getAdData(AD_POSITION_1)).thenReturn(mMockNativeAd);
-        when(mockStreamAdPlacer.getAdData(AD_POSITION_7)).thenReturn(mMockNativeAd2);
-        when(mockStreamAdPlacer.getAdRendererForViewType(MoPubRecyclerAdapter.NATIVE_AD_VIEW_TYPE_BASE))
-                .thenReturn(mockAdRenderer);
-        when(mockAdRenderer.createAdView(any(Activity.class), any(ViewGroup.class)))
-                .thenReturn(mockAdView);
-
-        when(mockStreamAdPlacer.isAd(anyInt())).thenAnswer(new Answer<Boolean>() {
-            @Override
-            public Boolean answer(final InvocationOnMock invocation) throws Throwable {
-                int position = (Integer) invocation.getArguments()[0];
-                return position == AD_POSITION_1 || position == AD_POSITION_7;
-            }
-        });
-        when(mockStreamAdPlacer.getOriginalPosition(anyInt())).thenAnswer(new Answer<Integer>() {
-            @Override
-            public Integer answer(final InvocationOnMock invocation) throws Throwable {
-                final int adjusted = (Integer) invocation.getArguments()[0];
-                int original;
-                if (adjusted < AD_POSITION_1) {
-                    original = adjusted;
-                } else if (adjusted >= AD_POSITION_7) {
-                    original = adjusted - 2;
-                } else {
-                    original = adjusted - 1;
-                }
-                return original;
-            }
-        });
-        when(mockStreamAdPlacer.getAdjustedPosition(anyInt())).thenAnswer(new Answer<Integer>() {
-            @Override
-            public Integer answer(final InvocationOnMock invocation) throws Throwable {
-                final int originalPosition = (Integer) invocation.getArguments()[0];
-                int adjusted;
-                if (originalPosition < AD_POSITION_1) {
-                    adjusted = originalPosition;
-                } else if (originalPosition > AD_POSITION_7) {
-                    adjusted = originalPosition + 2;
-                } else {
-                    adjusted = originalPosition + 1;
-                }
-                return adjusted;
-            }
-        });
-        when(mockStreamAdPlacer.getAdViewType(anyInt())).thenAnswer(new Answer<Integer>() {
-            @Override
-            public Integer answer(final InvocationOnMock invocation) throws Throwable {
-                final int originalPosition = (Integer) invocation.getArguments()[0];
-                return (originalPosition == AD_POSITION_1 || originalPosition == AD_POSITION_7)
-                        ? 1 : MoPubStreamAdPlacer.CONTENT_VIEW_TYPE;
-            }
-        });
-
-        when(mockStreamAdPlacer.getAdjustedCount(anyInt())).thenAnswer(new Answer<Integer>() {
-            @Override
-            public Integer answer(final InvocationOnMock invocation) throws Throwable {
-                final int originalItemCount = (Integer) invocation.getArguments()[0];
-                int adjusted;
-                if (originalItemCount < AD_POSITION_1) {
-                    adjusted = originalItemCount;
-                } else if (originalItemCount > AD_POSITION_7) {
-                    adjusted = originalItemCount + 2;
-                } else {
-                    adjusted = originalItemCount + 1;
-                }
-                return adjusted;
-            }
-        });
-    }
-
-    @Test
-    public void computeScrollOffset_withScrollVerticallyNoStackFromEnd_shouldComputeTopOffset() {
-        when(mockAdView.getTop()).thenReturn(13);
-        when(mockAdView.getBottom()).thenReturn(14);
-        when(mockAdView.getLeft()).thenReturn(10);
-        when(mockAdView.getRight()).thenReturn(11);
-        when(mockLayoutManager.canScrollVertically()).thenReturn(true);
-        when(mockLayoutManager.canScrollHorizontally()).thenReturn(false);
-        when(mockLayoutManager.getStackFromEnd()).thenReturn(false);
-
-        int offset = MoPubRecyclerAdapter.computeScrollOffset(mockLayoutManager, spyViewHolder);
-        assertThat(offset).isEqualTo(13);
-    }
-
-    @Test
-    public void computeScrollOffset_withScrollVerticallyStackFromEnd_shouldComputeBottomOffset() {
-        when(mockAdView.getTop()).thenReturn(13);
-        when(mockAdView.getBottom()).thenReturn(14);
-        when(mockAdView.getLeft()).thenReturn(10);
-        when(mockAdView.getRight()).thenReturn(11);
-        when(mockLayoutManager.canScrollVertically()).thenReturn(true);
-        when(mockLayoutManager.canScrollHorizontally()).thenReturn(false);
-        when(mockLayoutManager.getStackFromEnd()).thenReturn(true);
-
-        int offset = MoPubRecyclerAdapter.computeScrollOffset(mockLayoutManager, spyViewHolder);
-        assertThat(offset).isEqualTo(14);
-    }
-
-    @Test
-    public void computeScrollOffset_withScrollHorizontallyStackFromEnd_shouldComputeLeftOffset() {
-        when(mockAdView.getTop()).thenReturn(13);
-        when(mockAdView.getBottom()).thenReturn(14);
-        when(mockAdView.getLeft()).thenReturn(10);
-        when(mockAdView.getRight()).thenReturn(11);
-        when(mockLayoutManager.canScrollVertically()).thenReturn(false);
-        when(mockLayoutManager.canScrollHorizontally()).thenReturn(true);
-        when(mockLayoutManager.getStackFromEnd()).thenReturn(false);
-
-        int offset = MoPubRecyclerAdapter.computeScrollOffset(mockLayoutManager, spyViewHolder);
-        assertThat(offset).isEqualTo(10);
-    }
-
-    @Test
-    public void computeScrollOffset_withScrollHorizontallyNoStackFromEnd_shouldComputeRightOffset() {
-        when(mockAdView.getTop()).thenReturn(13);
-        when(mockAdView.getBottom()).thenReturn(14);
-        when(mockAdView.getLeft()).thenReturn(10);
-        when(mockAdView.getRight()).thenReturn(11);
-
-        when(mockLayoutManager.canScrollVertically()).thenReturn(false);
-        when(mockLayoutManager.canScrollHorizontally()).thenReturn(true);
-        when(mockLayoutManager.getStackFromEnd()).thenReturn(true);
-
-        int offset = MoPubRecyclerAdapter.computeScrollOffset(mockLayoutManager, spyViewHolder);
-        assertThat(offset).isEqualTo(11);
-    }
-
-    @Test
-    public void computeScrollOffset_withCannotScroll_shouldReturnZero() {
-        when(mockLayoutManager.canScrollHorizontally()).thenReturn(false);
-        when(mockLayoutManager.canScrollVertically()).thenReturn(false);
-
-        int offset = MoPubRecyclerAdapter.computeScrollOffset(mockLayoutManager, spyViewHolder);
-        assertThat(offset).isEqualTo(0);
-    }
-
-    @Test
-    public void registerAdRenderer_shouldCallRegisterAdRendererOnStreamAdPlacer() {
-        subject.registerAdRenderer(new MoPubStaticNativeAdRenderer(new ViewBinder.Builder(1).build()));
-
-        final ArgumentCaptor<MoPubAdRenderer> rendererCaptor = ArgumentCaptor.forClass(MoPubAdRenderer.class);
-        verify(mockStreamAdPlacer).registerAdRenderer(rendererCaptor.capture());
-        MoPubAdRenderer renderer = rendererCaptor.getValue();
-        assertThat(renderer).isExactlyInstanceOf(MoPubStaticNativeAdRenderer.class);
-    }
-
-    @Test
-    public void onCreateViewHolder_whenAdType_shouldInflateAdView() {
-        when(mockStreamAdPlacer.getAdRendererForViewType(0)).thenReturn(mockAdRenderer);
-        final RecyclerView.ViewHolder result = subject.onCreateViewHolder(mockParent, MoPubRecyclerAdapter.NATIVE_AD_VIEW_TYPE_BASE);
-
-        assertThat(result).isExactlyInstanceOf(MoPubRecyclerViewHolder.class);
-
-        verify(mockStreamAdPlacer).getAdRendererForViewType(0);
-        verifyZeroInteractions(originalAdapter);
-    }
-
-    @Test
-    public void onCreateViewHolder_whenNotAdType_shouldCallOriginalAdapter() {
-        when(mockParent.getContext()).thenReturn(mock(Context.class));
-
-        subject.onCreateViewHolder(mockParent, 3);
-
-        verify(originalAdapter).onCreateViewHolder(mockParent, 3);
-        verify(mockStreamAdPlacer, never()).getAdRendererForViewType(anyInt());
-    }
-
-    @Test
-    public void onBindViewHolder_whenAdPosition_shouldGetAndBindAdData() {
-        subject.onBindViewHolder(spyViewHolder, AD_POSITION_1);
-
-        verify(mockStreamAdPlacer).bindAdView(mMockNativeAd, mockAdView);
-    }
-
-    @Test
-    public void onBindViewHolder_whenNotAdPosition_shouldCallOriginalAdapter() {
-        subject.onBindViewHolder(mockTestHolder, AD_POSITION_1 + 1);
-
-        // Position should be adjusted.
-        verify(originalAdapter).onBindViewHolder(mockTestHolder, AD_POSITION_1);
-    }
-
-    @Test
-    public void onViewAttached_whenMoPubViewHolder_shouldNotCallOriginalAdapter() {
-        subject.onViewAttachedToWindow(spyViewHolder);
-
-        verify(originalAdapter, never()).onViewAttachedToWindow(any(TestHolder.class));
-        verifyZeroInteractions(originalAdapter);
-    }
-
-    @Test
-    public void onViewAttached_whenNotMoPubViewHolder_shouldCallOriginalAdapter() {
-        subject.onViewAttachedToWindow(mockTestHolder);
-
-        verify(originalAdapter).onViewAttachedToWindow(mockTestHolder);
-    }
-
-    @Test
-    public void onViewDetached_whenMoPubViewHolder_shouldNotCallOriginalAdapter() {
-        subject.onViewDetachedFromWindow(spyViewHolder);
-
-        verifyZeroInteractions(originalAdapter);
-    }
-
-    @Test
-    public void onViewDetached_whenNotMoPubViewHolder_shouldCallOriginalAdapter() {
-        subject.onViewDetachedFromWindow(mockTestHolder);
-
-        verify(originalAdapter).onViewDetachedFromWindow(mockTestHolder);
-    }
-
-    @Test
-    public void onFailedToRecycleView_whenMoPubViewHolder_shouldNotCallOriginalAdapter() {
-        assertThat(subject.onFailedToRecycleView(spyViewHolder)).isFalse();
-
-        verifyZeroInteractions(originalAdapter);
-    }
-
-    @Test
-    public void onFailedToRecycleView_whenNotMoPubViewHolder_shouldCallOriginalAdapter() {
-        when(originalAdapter.onFailedToRecycleView(mockTestHolder)).thenReturn(true);
-
-        assertThat(subject.onFailedToRecycleView(mockTestHolder)).isTrue();
-
-        verify(originalAdapter).onFailedToRecycleView(mockTestHolder);
-    }
-
-    @Test
-    public void onViewRecycled_whenMoPubViewHolder_shouldNotCallOriginalAdapter() {
-        subject.onViewRecycled(spyViewHolder);
-
-        verifyZeroInteractions(originalAdapter);
-    }
-
-    @Test
-    public void onViewRecycled_whenNotMoPubViewHolder_shouldCallOriginalAdapter() {
-        subject.onViewRecycled(mockTestHolder);
-
-        verify(originalAdapter).onViewRecycled(mockTestHolder);
-    }
-
-    @Test
-    public void handleAdLoaded_withAndWithoutAdLoadedListener_shouldNotifyInsertToListener() {
-        subject.registerAdapterDataObserver(mockObserver);
-        subject.setAdLoadedListener(mockAdLoadedListener);
-        subject.handleAdLoaded(8);
-
-        verify(mockObserver).onItemRangeInserted(8, 1);
-        verify(mockAdLoadedListener).onAdLoaded(8);
-        reset(mockObserver, mockAdLoadedListener);
-
-        subject.setAdLoadedListener(null);
-        subject.handleAdLoaded(8);
-
-        verify(mockObserver).onItemRangeInserted(8, 1);
-        verifyZeroInteractions(mockAdLoadedListener);
-    }
-
-    @Test
-    public void handleAdRemoved_withAndWithoutAdLoadedListener_shouldNotifyDeleteToListener() {
-        subject.registerAdapterDataObserver(mockObserver);
-        subject.setAdLoadedListener(mockAdLoadedListener);
-        subject.handleAdRemoved(AD_POSITION_1);
-
-        verify(mockObserver).onItemRangeRemoved(AD_POSITION_1, 1);
-        verify(mockAdLoadedListener).onAdRemoved(AD_POSITION_1);
-        reset(mockObserver, mockAdLoadedListener);
-
-        subject.setAdLoadedListener(null);
-        subject.handleAdRemoved(AD_POSITION_1);
-
-        verify(mockObserver).onItemRangeRemoved(AD_POSITION_1, 1);
-        verifyZeroInteractions(mockAdLoadedListener);
-    }
-
-    @Test
-    public void loadAds_shouldCallLoadOnAdPlacer() {
-        subject.loadAds("testId");
-
-        verify(mockStreamAdPlacer).loadAds("testId");
-    }
-
-    @Test
-    public void loadAds_withParameters_shouldCallLoadOnAdPlacer() {
-        final RequestParameters mockRequestParameters = mock(RequestParameters.class);
-        subject.loadAds("testId", mockRequestParameters);
-
-        verify(mockStreamAdPlacer).loadAds("testId", mockRequestParameters);
-    }
-
-    @Test
-    public void isAd_shouldCallIsAdOnAdPlacer() {
-        boolean isAd = subject.isAd(4);
-
-        assertThat(isAd).isFalse();
-        verify(mockStreamAdPlacer).isAd(4);
-
-
-        isAd = subject.isAd(AD_POSITION_1);
-
-        assertThat(isAd).isTrue();
-        verify(mockStreamAdPlacer).isAd(AD_POSITION_1);
-    }
-
-    @Test
-    public void getAdjustedPosition_shouldCallAdPlacer() {
-        int adjustedPosition = subject.getAdjustedPosition(AD_POSITION_1);
-
-        assertThat(adjustedPosition).isEqualTo(AD_POSITION_1 + 1);
-        verify(mockStreamAdPlacer).getAdjustedPosition(AD_POSITION_1);
-    }
-
-    @Test
-    public void getOriginalPosition_shouldCallAdPlacer() {
-        int originalPosition = subject.getOriginalPosition(AD_POSITION_1 + 1);
-
-        assertThat(originalPosition).isEqualTo(AD_POSITION_1);
-        verify(mockStreamAdPlacer).getOriginalPosition(AD_POSITION_1 + 1);
-    }
-
-    @Test
-    public void getItemCount_shouldCallAdPlacer() {
-        int itemCount = subject.getItemCount();
-
-        assertThat(itemCount).isEqualTo(20);
-        verify(originalAdapter).getItemCount();
-        verify(mockStreamAdPlacer).getAdjustedCount(18);
-    }
-
-    @Test
-    public void setHasStableIds_shouldCallSetHasStableIdsOnOriginal() {
-        subject.setHasStableIds(true);
-
-        verify(originalAdapter).setHasStableIds(true);
-    }
-
-    @Test
-    public void getItemId_hasStableIds_shouldCallOriginalAdapter() {
-        subject.setHasStableIds(true);
-        when(originalAdapter.getItemId(anyInt())).thenAnswer(new Answer<Long>() {
-            @Override
-            public Long answer(final InvocationOnMock invocation) throws Throwable {
-                return Long.valueOf((Integer) invocation.getArguments()[0]);
-            }
-        });
-
-        long itemId = subject.getItemId(5);
-
-        assertThat(itemId).isEqualTo(4l);
-        verify(originalAdapter).getItemId(4); // Adjusted position.
-    }
-
-    @Test
-    public void getItemIds_hasStableIds_shouldReturnEnoughIds() {
-        originalAdapter.setItemCount(5000);
-
-        subject.setHasStableIds(true);
-
-        Set<Long> ids = new HashSet<>(7000, 1.0f);
-        for (int position = 0; position < subject.getItemCount(); position++) {
-            ids.add(subject.getItemId(position));
-        }
-
-        assertThat(ids.size()).isEqualTo(subject.getItemCount());
-        // Verify we called exactly the right # of times on the original adapter.
-        verify(originalAdapter, times(5000)).getItemId(anyInt());
-    }
-
-    @Test
-    public void getItemId_DoesNotHaveStableIds_shouldNotCallOriginalAdapter() {
-        subject.setHasStableIds(false);
-
-        assertThat(subject.getItemId(5)).isEqualTo(RecyclerView.NO_ID);
-        verify(originalAdapter).setHasStableIds(false);
-    }
-
-    @Test
-    public void onItemRangeInsertedAtEnd_withInsertAtEndStrategy_shouldNotifyDataChanged() {
-        subject.registerAdapterDataObserver(mockObserver);
-        subject.setContentChangeStrategy(INSERT_AT_END);
-
-        final int originalItemCount = originalAdapter.getItemCount();
-        originalAdapter.setItemCount(originalItemCount + 3);
-        originalAdapter.notifyItemRangeInserted(originalItemCount, 3);
-
-        verify(mockObserver).onChanged();
-        verifyNoMoreInteractions(mockObserver);
-        verify(mockStreamAdPlacer).getAdjustedPosition(originalItemCount);
-        verify(mockStreamAdPlacer).setItemCount(originalItemCount + 3);
-        verifyNoMoreInteractions(mockStreamAdPlacer);
-    }
-
-    @Test
-    public void onItemRangeInsertedAtEnd_withMoveAdsStrategy_shouldNotifyItemRangeInserted() {
-        subject.registerAdapterDataObserver(mockObserver);
-        subject.setContentChangeStrategy(MOVE_ALL_ADS_WITH_CONTENT);
-
-        final int originalItemCount = originalAdapter.getItemCount();
-        originalAdapter.setItemCount(originalItemCount + 3);
-        originalAdapter.notifyItemRangeInserted(originalItemCount, 3);
-
-        verify(mockObserver).onItemRangeInserted(originalItemCount + 2, 3);
-        verifyNoMoreInteractions(mockObserver);
-        verify(mockStreamAdPlacer).getAdjustedPosition(originalItemCount);
-        verify(mockStreamAdPlacer).setItemCount(originalItemCount + 3);
-        verify(mockStreamAdPlacer, times(3)).insertItem(anyInt());
-        verifyNoMoreInteractions(mockStreamAdPlacer);
-    }
-
-    @Test
-    public void onItemRangeInsertedAtEnd_withKeepAdsPlacedStrategy_shouldNotifyDataChanged() {
-        subject.registerAdapterDataObserver(mockObserver);
-        subject.setContentChangeStrategy(KEEP_ADS_FIXED);
-
-        final int originalItemCount = originalAdapter.getItemCount();
-        originalAdapter.setItemCount(originalItemCount + 3);
-        originalAdapter.notifyItemRangeInserted(originalItemCount, 3);
-
-        verify(mockObserver).onChanged();
-        verifyNoMoreInteractions(mockObserver);
-        verify(mockStreamAdPlacer).getAdjustedPosition(originalItemCount);
-        verify(mockStreamAdPlacer).setItemCount(originalItemCount + 3);
-        verifyNoMoreInteractions(mockStreamAdPlacer);
-    }
-
-    @Test
-    public void onItemRangeInsertedInMiddle_withInsertAtEndStrategy_shouldNotifyItemRangeInserted() {
-        subject.registerAdapterDataObserver(mockObserver);
-        subject.setContentChangeStrategy(INSERT_AT_END);
-
-        final int originalItemCount = originalAdapter.getItemCount();
-        originalAdapter.setItemCount(originalItemCount + 3);
-        originalAdapter.notifyItemRangeInserted(originalItemCount - 7, 3);
-
-        verify(mockObserver).onItemRangeInserted(originalItemCount - 5, 3);
-        verifyNoMoreInteractions(mockObserver);
-        verify(mockStreamAdPlacer).getAdjustedPosition(originalItemCount - 7);
-        verify(mockStreamAdPlacer).setItemCount(originalItemCount + 3);
-        verify(mockStreamAdPlacer, times(3)).insertItem(anyInt());
-        verifyNoMoreInteractions(mockStreamAdPlacer);
-    }
-
-    @Test
-    public void onItemRangeInsertedInMiddle_withMoveAdsStrategy_shouldNotifyItemRangeInserted() {
-        subject.registerAdapterDataObserver(mockObserver);
-        subject.setContentChangeStrategy(MOVE_ALL_ADS_WITH_CONTENT);
-
-        final int originalItemCount = originalAdapter.getItemCount();
-        originalAdapter.setItemCount(originalItemCount + 3);
-        originalAdapter.notifyItemRangeInserted(originalItemCount - 7, 3);
-
-        verify(mockObserver).onItemRangeInserted(originalItemCount - 5, 3);
-        verifyNoMoreInteractions(mockObserver);
-        verify(mockStreamAdPlacer).getAdjustedPosition(originalItemCount - 7);
-        verify(mockStreamAdPlacer).setItemCount(originalItemCount + 3);
-        verify(mockStreamAdPlacer, times(3)).insertItem(anyInt());
-        verifyNoMoreInteractions(mockStreamAdPlacer);
-    }
-
-    @Test
-    public void onItemRangeInsertedInMiddle_withKeepAdsStrategy_shouldNotifyDataChanged() {
-        subject.registerAdapterDataObserver(mockObserver);
-        subject.setContentChangeStrategy(KEEP_ADS_FIXED);
-
-        final int originalItemCount = originalAdapter.getItemCount();
-        originalAdapter.setItemCount(originalItemCount + 3);
-        originalAdapter.notifyItemRangeInserted(originalItemCount - 7, 3);
-
-        verify(mockObserver).onChanged();
-        verifyNoMoreInteractions(mockObserver);
-        verify(mockStreamAdPlacer).getAdjustedPosition(originalItemCount - 7);
-        verify(mockStreamAdPlacer).setItemCount(originalItemCount + 3);
-        verifyNoMoreInteractions(mockStreamAdPlacer);
-    }
-
-    @Test
-    public void onItemRangeRemovedFromEnd_withInsertAtEndStrategy_shouldNotifyDataChanged() {
-        subject.registerAdapterDataObserver(mockObserver);
-        subject.setContentChangeStrategy(INSERT_AT_END);
-
-        final int originalItemCount = originalAdapter.getItemCount();
-        originalAdapter.setItemCount(originalItemCount - 3);
-        originalAdapter.notifyItemRangeRemoved(originalItemCount - 4, 3);
-
-        verify(mockObserver).onChanged();
-        verifyNoMoreInteractions(mockObserver);
-        verify(mockStreamAdPlacer).getAdjustedPosition(originalItemCount - 4);
-        verify(mockStreamAdPlacer).setItemCount(originalItemCount - 3);
-        verifyNoMoreInteractions(mockStreamAdPlacer);
-    }
-
-    @Test
-    public void onItemRangeRemovedFromEnd_withMoveAdsStrategy_shouldNotifyItemRangeRemoved() {
-        subject.registerAdapterDataObserver(mockObserver);
-        subject.setContentChangeStrategy(MOVE_ALL_ADS_WITH_CONTENT);
-
-        final int originalItemCount = originalAdapter.getItemCount();
-        originalAdapter.setItemCount(originalItemCount - 3);
-        originalAdapter.notifyItemRangeRemoved(originalItemCount - 4, 3);
-
-        verify(mockObserver).onItemRangeRemoved(originalItemCount - 2, 3);
-        verifyNoMoreInteractions(mockObserver);
-
-        verify(mockStreamAdPlacer).setItemCount(originalItemCount - 3);
-        verify(mockStreamAdPlacer, times(3)).removeItem(originalItemCount - 4);
-    }
-
-    @Test
-    public void onItemRangeRemovedFromEnd_withMoveAdsStrategyAndItemsSurroundAnAd_shouldNotifyItemRangeRemoved() {
-        subject.registerAdapterDataObserver(mockObserver);
-        subject.setContentChangeStrategy(MOVE_ALL_ADS_WITH_CONTENT);
-        originalAdapter.setItemCount(AD_POSITION_7 + 1);
-
-        final int originalItemCount = AD_POSITION_7 + 1;
-
-        originalAdapter.setItemCount(originalItemCount - 3);
-        originalAdapter.notifyItemRangeRemoved(originalItemCount - 4, 3);
-
-        // We remove 3 items + 1 ad
-        verify(mockObserver).onItemRangeRemoved(originalItemCount - 4, 4);
-        verifyNoMoreInteractions(mockObserver);
-
-        verify(mockStreamAdPlacer).setItemCount(originalItemCount - 3);
-        verify(mockStreamAdPlacer, times(3)).removeItem(originalItemCount - 4);
-    }
-
-    @Test
-    public void onItemRangeRemovedFromEnd_withKeepAdsStrategy_shouldNotifyDataChanged() {
-        subject.registerAdapterDataObserver(mockObserver);
-        subject.setContentChangeStrategy(KEEP_ADS_FIXED);
-
-        final int originalItemCount = originalAdapter.getItemCount();
-        originalAdapter.setItemCount(originalItemCount - 3);
-        originalAdapter.notifyItemRangeRemoved(originalItemCount - 4, 3);
-
-        verify(mockObserver).onChanged();
-        verifyNoMoreInteractions(mockObserver);
-
-        verify(mockStreamAdPlacer).setItemCount(originalItemCount - 3);
-    }
-
-    @Test
-    public void onItemRangeRemovedFromMiddle_withInsertAtEndStrategy_shouldNotifyItemRangeRemoved() {
-        subject.registerAdapterDataObserver(mockObserver);
-        subject.setContentChangeStrategy(INSERT_AT_END);
-
-        final int originalItemCount = originalAdapter.getItemCount();
-        originalAdapter.setItemCount(originalItemCount - 3);
-        originalAdapter.notifyItemRangeRemoved(originalItemCount - 8, 3);
-
-        verify(mockObserver).onItemRangeRemoved(originalItemCount - 6, 3);
-        verifyNoMoreInteractions(mockObserver);
-
-        verify(mockStreamAdPlacer).setItemCount(originalItemCount - 3);
-        verify(mockStreamAdPlacer, times(3)).removeItem(originalItemCount - 8);
-    }
-
-    @Test
-    public void onItemRangeRemovedFromMiddle_withMoveAdsStrategy_shouldNotifyItemRangeRemoved() {
-        subject.registerAdapterDataObserver(mockObserver);
-        subject.setContentChangeStrategy(MOVE_ALL_ADS_WITH_CONTENT);
-
-        final int originalItemCount = originalAdapter.getItemCount();
-        originalAdapter.setItemCount(originalItemCount - 3);
-        originalAdapter.notifyItemRangeRemoved(originalItemCount - 8, 3);
-
-        verify(mockObserver).onItemRangeRemoved(originalItemCount - 6, 3);
-        verifyNoMoreInteractions(mockObserver);
-
-        verify(mockStreamAdPlacer).setItemCount(originalItemCount - 3);
-        verify(mockStreamAdPlacer, times(3)).removeItem(originalItemCount - 8);
-    }
-
-    @Test
-    public void onItemRangeRemovedFromMiddle_withKeepAdsStrategy_shouldNotifyChanged() {
-        subject.registerAdapterDataObserver(mockObserver);
-        subject.setContentChangeStrategy(KEEP_ADS_FIXED);
-
-        final int originalItemCount = originalAdapter.getItemCount();
-        originalAdapter.setItemCount(originalItemCount - 3);
-        originalAdapter.notifyItemRangeRemoved(originalItemCount - 8, 3);
-
-        verify(mockObserver).onChanged();
-        verifyNoMoreInteractions(mockObserver);
-        verify(mockStreamAdPlacer).getAdjustedPosition(originalItemCount - 8);
-        verify(mockStreamAdPlacer).setItemCount(originalItemCount - 3);
-        verifyNoMoreInteractions(mockStreamAdPlacer);
-    }
-
-    private class TestAdapter extends RecyclerView.Adapter<TestHolder> {
-        private int mItems = 18;
-
-        @Override
-        public TestHolder onCreateViewHolder(final ViewGroup parent, final int viewType) {
-            View view = mock(View.class);
-            return new TestHolder(view);
-        }
-
-        @Override
-        public void onBindViewHolder(final TestHolder holder, final int position) {
-            // Do nothing
-        }
-
-        @Override
-        public long getItemId(final int position) {
-            return position;
-        }
-
-        @Override
-        public int getItemCount() {
-            return mItems;
-        }
-
-        void setItemCount(int itemCount) {
-            mItems = itemCount;
-        }
-    }
-
-    private class TestHolder extends RecyclerView.ViewHolder {
-        public TestHolder(final View itemView) {
-            super(itemView);
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdRendererTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdRendererTest.java
deleted file mode 100644
index a7bae9ed..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdRendererTest.java
+++ /dev/null
@@ -1,195 +0,0 @@
-package com.mopub.nativeads;
-
-import android.graphics.Bitmap;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ImageView;
-import android.widget.RelativeLayout;
-import android.widget.TextView;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.Utils;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.nativeads.MoPubCustomEventNative.MoPubStaticNativeAd;
-import com.mopub.network.MaxWidthImageLoader;
-import com.mopub.network.MoPubRequestQueue;
-import com.mopub.network.Networking;
-import com.mopub.volley.toolbox.ImageLoader;
-
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.rules.ExpectedException;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class MoPubStaticNativeAdRendererTest {
-    private MoPubStaticNativeAdRenderer subject;
-    private StaticNativeAd mStaticNativeAd;
-    @Mock private RelativeLayout relativeLayout;
-    @Mock private ViewGroup viewGroup;
-    private ViewBinder viewBinder;
-    @Mock private TextView titleView;
-    @Mock private TextView textView;
-    @Mock private TextView callToActionView;
-    @Mock private ImageView mainImageView;
-    @Mock private ImageView iconImageView;
-    @Mock private ImageView privacyInformationIconImageView;
-    @Mock private ImageView badView;
-    @Mock private MoPubRequestQueue mockRequestQueue;
-    @Mock private MaxWidthImageLoader mockImageLoader;
-    @Mock private ImageLoader.ImageContainer mockImageContainer;
-
-    @Before
-    public void setUp() throws Exception {
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-        Networking.setImageLoaderForTesting(mockImageLoader);
-        stub(mockImageContainer.getBitmap()).toReturn(mock(Bitmap.class));
-
-        when(relativeLayout.getId()).thenReturn((int) Utils.generateUniqueId());
-
-        mStaticNativeAd = new StaticNativeAd() {};
-        mStaticNativeAd.setTitle("test title");
-        mStaticNativeAd.setText("test text");
-        mStaticNativeAd.setCallToAction("test call to action");
-        mStaticNativeAd.setClickDestinationUrl("destinationUrl");
-        mStaticNativeAd.setMainImageUrl("testUrl");
-        mStaticNativeAd.setIconImageUrl("testUrl");
-
-        setViewIdInLayout(titleView, relativeLayout);
-        setViewIdInLayout(textView, relativeLayout);
-        setViewIdInLayout(callToActionView, relativeLayout);
-        setViewIdInLayout(mainImageView, relativeLayout);
-        setViewIdInLayout(iconImageView, relativeLayout);
-        setViewIdInLayout(privacyInformationIconImageView, relativeLayout);
-        setViewIdInLayout(badView, relativeLayout);
-
-        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
-                .titleId(titleView.getId())
-                .textId(textView.getId())
-                .callToActionId(callToActionView.getId())
-                .mainImageId(mainImageView.getId())
-                .iconImageId(iconImageView.getId())
-                .privacyInformationIconImageId(privacyInformationIconImageView.getId())
-                .build();
-
-        subject = new MoPubStaticNativeAdRenderer(viewBinder);
-    }
-
-    private void setViewIdInLayout(View mockView, RelativeLayout mockLayout) {
-        int id = (int) Utils.generateUniqueId();
-        when(mockView.getId()).thenReturn(id);
-        when(relativeLayout.findViewById(eq(id))).thenReturn(mockView);
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void createAdView_withNullContext_shouldThrowNPE() {
-        subject.createAdView(null, viewGroup);
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void renderAdView_withNullView_shouldThrowNPE() {
-        subject.renderAdView(null, mStaticNativeAd);
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void renderAdView_withNullNativeAd_shouldThrowNPE() {
-        subject.renderAdView(relativeLayout, null);
-    }
-
-    @Rule public ExpectedException exception = ExpectedException.none();
-
-    @Test
-    public void renderAdView_withNullViewBinder_shouldThrowNPE() {
-        subject = new MoPubStaticNativeAdRenderer(null);
-
-        exception.expect(NullPointerException.class);
-        subject.renderAdView(relativeLayout, mStaticNativeAd);
-    }
-
-    @Test
-    public void renderAdView_shouldReturnPopulatedView() {
-        subject.renderAdView(relativeLayout, mStaticNativeAd);
-
-        verify(titleView).setText(eq("test title"));
-        verify(textView).setText(eq("test text"));
-        verify(callToActionView).setText(eq("test call to action"));
-
-        // not testing images due to testing complexity
-    }
-
-    @Test
-    public void renderAdView_withFailedViewBinder_shouldNotWriteViews() {
-        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
-                .titleId(titleView.getId())
-                .textId(badView.getId())
-                .callToActionId(callToActionView.getId())
-                .mainImageId(mainImageView.getId())
-                .iconImageId(iconImageView.getId())
-                .build();
-
-        subject = new MoPubStaticNativeAdRenderer(viewBinder);
-        subject.renderAdView(relativeLayout, mStaticNativeAd);
-
-        verify(titleView, never()).setText(anyString());
-        verify(textView, never()).setText(anyString());
-        verify(callToActionView, never()).setText(anyString());
-        verify(mainImageView, times(2)).getId();
-        verifyNoMoreInteractions(mainImageView);
-        verify(iconImageView, times(2)).getId();
-        verifyNoMoreInteractions(iconImageView);
-    }
-
-    @Test
-    public void renderAdView_withNoViewHolder_shouldCreateNativeViewHolder() {
-        subject.renderAdView(relativeLayout, mStaticNativeAd);
-
-        StaticNativeViewHolder expectedViewHolder = StaticNativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
-        StaticNativeViewHolder viewHolder = subject.mViewHolderMap.get(relativeLayout);
-        compareNativeViewHolders(expectedViewHolder, viewHolder);
-    }
-
-    @Test
-    public void getOrCreateNativeViewHolder_withViewHolder_shouldNotReCreateNativeViewHolder() {
-        subject.renderAdView(relativeLayout, mStaticNativeAd);
-        StaticNativeViewHolder expectedViewHolder = subject.mViewHolderMap.get(relativeLayout);
-        subject.renderAdView(relativeLayout, mStaticNativeAd);
-
-        StaticNativeViewHolder viewHolder = subject.mViewHolderMap.get(relativeLayout);
-        assertThat(viewHolder).isEqualTo(expectedViewHolder);
-    }
-
-    static private void compareNativeViewHolders(final StaticNativeViewHolder actualViewHolder,
-            final StaticNativeViewHolder expectedViewHolder) {
-        assertThat(actualViewHolder.titleView).isEqualTo(expectedViewHolder.titleView);
-        assertThat(actualViewHolder.textView).isEqualTo(expectedViewHolder.textView);
-        assertThat(actualViewHolder.callToActionView).isEqualTo(expectedViewHolder.callToActionView);
-        assertThat(actualViewHolder.mainImageView).isEqualTo(expectedViewHolder.mainImageView);
-        assertThat(actualViewHolder.iconImageView).isEqualTo(expectedViewHolder.iconImageView);
-        assertThat(actualViewHolder.privacyInformationIconImageView).isEqualTo(
-                expectedViewHolder.privacyInformationIconImageView);
-    }
-
-    @Test
-    public void supports_withCorrectInstanceOfBaseNativeAd_shouldReturnTrue() throws Exception {
-        assertThat(subject.supports(new StaticNativeAd() {})).isTrue();
-        assertThat(subject.supports(mock(MoPubStaticNativeAd.class))).isTrue();
-        assertThat(subject.supports(mock(BaseNativeAd.class))).isFalse();
-        assertThat(subject.supports(mock(MoPubCustomEventVideoNative.MoPubVideoNativeAd.class)))
-                .isFalse();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdTest.java
deleted file mode 100644
index 63b43fc0..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdTest.java
+++ /dev/null
@@ -1,434 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.graphics.Bitmap;
-import android.view.View;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.nativeads.BaseNativeAd.NativeEventListener;
-import com.mopub.nativeads.CustomEventNative.CustomEventNativeListener;
-import com.mopub.nativeads.MoPubCustomEventNative.MoPubStaticNativeAd;
-import com.mopub.nativeads.test.support.MoPubShadowBitmap;
-import com.mopub.nativeads.test.support.MoPubShadowDisplay;
-import com.mopub.network.MaxWidthImageLoader;
-import com.mopub.network.MoPubRequestQueue;
-import com.mopub.network.Networking;
-import com.mopub.volley.VolleyError;
-import com.mopub.volley.toolbox.ImageLoader;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
-import static com.mopub.nativeads.MoPubCustomEventNative.MoPubStaticNativeAd.Parameter;
-import static com.mopub.volley.toolbox.ImageLoader.ImageListener;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class, shadows={MoPubShadowBitmap.class, MoPubShadowDisplay.class})
-public class MoPubStaticNativeAdTest {
-
-    private MoPubStaticNativeAd subject;
-    private JSONObject fakeJsonObject;
-    private Activity context;
-
-    @Mock private View mockView;
-    @Mock private ImpressionTracker mockImpressionTracker;
-    @Mock private NativeClickHandler mMockNativeClickHandler;
-    @Mock private CustomEventNativeListener mockCustomEventNativeListener;
-    @Mock private NativeEventListener mockNativeEventListener;
-    @Mock private MoPubRequestQueue mockRequestQueue;
-    @Mock private MaxWidthImageLoader mockImageLoader;
-    @Mock private ImageLoader.ImageContainer mockImageContainer;
-
-    @Before
-    public void setUp() throws Exception {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        fakeJsonObject = new JSONObject();
-        fakeJsonObject.put("imptracker", new JSONArray("[\"url1\", \"url2\"]"));
-        fakeJsonObject.put("clktracker", "expected clicktracker");
-        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                mMockNativeClickHandler, mockCustomEventNativeListener);
-        subject.setNativeEventListener(mockNativeEventListener);
-
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-        Networking.setImageLoaderForTesting(mockImageLoader);
-        stub(mockImageContainer.getBitmap()).toReturn(mock(Bitmap.class));
-    }
-
-    @Test
-    public void Parameter_requiredKeys_shouldOnlyContainTheRequiredKeys() {
-        final HashSet<String> expectedKeys = new HashSet<String>();
-        expectedKeys.add("imptracker");
-        expectedKeys.add("clktracker");
-
-        assertThat(Parameter.requiredKeys).isEqualTo(expectedKeys);
-    }
-
-    @Test
-    public void Parameter_fromString_shouldReturnParameterOnMatch() {
-        final Parameter parameter = Parameter.from("title");
-
-        assertThat(parameter).isEqualTo(Parameter.TITLE);
-    }
-
-    @Test
-    public void Parameter_fromString_shouldReturnNullOnIllegalKey() {
-        final Parameter parameter = Parameter.from("random gibberish");
-
-        assertThat(parameter).isNull();
-    }
-
-    @Test
-    public void loadAd_whenMissingRequiredKeys_shouldThrowIllegalArgumentException() {
-        fakeJsonObject.remove("imptracker");
-
-        try {
-            subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                    mMockNativeClickHandler, mockCustomEventNativeListener);
-            subject.loadAd();
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            // pass
-        }
-    }
-
-    @Test
-    public void loadAd_whenRequiredKeyOfWrongType_shouldThrowIllegalArgumentException() throws Exception {
-        fakeJsonObject.put("imptracker", 12345);
-
-        try {
-            subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                    mMockNativeClickHandler, mockCustomEventNativeListener);
-            subject.loadAd();
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            // pass
-        }
-    }
-
-    @Test
-    public void loadAd_shouldSetRequiredExpectedFields() {
-        subject.loadAd();
-        assertThat(subject.getImpressionTrackers()).containsOnly("url1", "url2");
-    }
-
-    @Test
-    public void loadAd_shouldSetOptionalExpectedFields() throws Exception {
-        fakeJsonObject.put("title", "expected title");
-        fakeJsonObject.put("text", "expected text");
-        fakeJsonObject.put("mainimage", "expected mainimage");
-        fakeJsonObject.put("iconimage", "expected iconimage");
-
-        fakeJsonObject.put("clk", "expected clk");
-
-        fakeJsonObject.put("fallback", "expected fallback");
-        fakeJsonObject.put("ctatext", "expected ctatext");
-        fakeJsonObject.put("starrating", 5.0);
-
-        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                mMockNativeClickHandler, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        assertThat(subject.getTitle()).isEqualTo("expected title");
-        assertThat(subject.getText()).isEqualTo("expected text");
-        assertThat(subject.getMainImageUrl()).isEqualTo("expected mainimage");
-        assertThat(subject.getIconImageUrl()).isEqualTo("expected iconimage");
-
-        assertThat(subject.getClickDestinationUrl()).isEqualTo("expected clk");
-
-        assertThat(subject.getImpressionTrackers()).containsOnly("url1", "url2");
-        assertThat(subject.getCallToAction()).isEqualTo("expected ctatext");
-        assertThat(subject.getStarRating()).isEqualTo(5.0);
-    }
-
-    @Test
-    public void loadAd_withIntegerStarRating_shouldSetStarRating() throws Exception {
-        fakeJsonObject.put("starrating", 3);
-
-        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                mMockNativeClickHandler, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        assertThat(subject.getStarRating()).isEqualTo(3.0);
-    }
-
-    @Test
-    public void loadAd_withStringStarRating_shouldSetStarRating() throws Exception {
-        fakeJsonObject.put("starrating", "2.3");
-
-        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                mMockNativeClickHandler, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        assertThat(subject.getStarRating()).isEqualTo(2.3);
-    }
-
-    @Test
-    public void loadAd_withInvalidStringStarRating_shouldNotSetStarRating() throws Exception {
-        fakeJsonObject.put("starrating", "this is not a number");
-
-        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                mMockNativeClickHandler, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        assertThat(subject.getStarRating()).isNull();
-    }
-
-    @Test
-    public void loadAd_withInvalidlyTypedStarRating_shouldNotSetStarRating() throws Exception {
-        fakeJsonObject.put("starrating", new Activity());
-
-        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                mMockNativeClickHandler, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        assertThat(subject.getStarRating()).isNull();
-    }
-
-    @Test
-    public void loadAd_whenImpressionTrackersContainsNonStrings_willCoerceToString() throws Exception {
-        /**
-         * At this level of abstraction, we don't actually care that these Strings resolve to valid
-         * URLs. We just want to ensure that loadAd does not throw an exception.
-         */
-        final JSONArray impressionTrackers = new JSONArray();
-        impressionTrackers.put("url1");
-        impressionTrackers.put(JSONObject.NULL);
-        impressionTrackers.put(2.12);
-        fakeJsonObject.put("imptracker", impressionTrackers);
-
-        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                mMockNativeClickHandler, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        assertThat(subject.getImpressionTrackers()).containsOnly("url1", "null", "2.12");
-    }
-
-    @Test
-    public void loadAd_shouldSetExtraFields() throws Exception {
-        List<Object> array = new ArrayList<Object>();
-        array.add("index1");
-        array.add(-10);
-
-        Map<String, Object> map = new HashMap<String, Object>();
-        map.put("one", "a");
-        map.put("two", "b");
-
-        fakeJsonObject.put("key1", "yay json");
-        fakeJsonObject.put("key2", 5);
-        fakeJsonObject.put("key3", new JSONArray(array));
-        fakeJsonObject.put("key4", new JSONObject(map));
-
-        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                mMockNativeClickHandler, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        assertThat(subject.getExtra("key1")).isEqualTo("yay json");
-        assertThat(subject.getExtra("key2")).isEqualTo(5);
-        assertThat((JSONArray) subject.getExtra("key3")).isEqualsToByComparingFields(new JSONArray(array));
-        assertThat((JSONObject) subject.getExtra("key4")).isEqualsToByComparingFields(new JSONObject(map));
-    }
-
-    @Test
-    public void loadAd_shouldDownloadImages_shouldNotifyListenerOfOnNativeAdLoaded() throws Exception {
-        fakeJsonObject.put("mainimage", "mainimageurl");
-        fakeJsonObject.put("iconimage", "iconimageurl");
-        fakeJsonObject.put("extraimage", "extraimageurl");
-
-        when(mockImageLoader.get(anyString(), any(ImageListener.class)))
-                .then(new Answer<Void>() {
-                    @Override
-                    public Void answer(final InvocationOnMock invocationOnMock) throws Throwable {
-                        ImageListener listener = ((ImageListener) invocationOnMock.getArguments()[1]);
-                        listener.onResponse(mockImageContainer, false);
-                        return null;
-                    }
-                });
-
-        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                mMockNativeClickHandler, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        verify(mockImageLoader).get(eq("mainimageurl"), any(ImageListener.class));
-        verify(mockImageLoader).get(eq("iconimageurl"), any(ImageListener.class));
-        verify(mockImageLoader).get(eq("extraimageurl"), any(ImageListener.class));
-
-        verify(mockCustomEventNativeListener).onNativeAdLoaded(subject);
-        verify(mockCustomEventNativeListener, never()).onNativeAdFailed(any(NativeErrorCode.class));
-    }
-
-    @Test
-    public void loadAd_withFailedImageDownload_shouldNotDownloadImages_shouldNotifyListenerOfOnNativeAdFailed() throws Exception {
-        fakeJsonObject.put("mainimage", "mainimageurl");
-        fakeJsonObject.put("iconimage", "iconimageurl");
-        fakeJsonObject.put("extraimage", "extraimageurl");
-
-        when(mockImageLoader.get(anyString(), any(ImageListener.class)))
-                .then(new Answer<Void>() {
-                    @Override
-                    public Void answer(final InvocationOnMock invocationOnMock) throws Throwable {
-                        ImageListener listener = ((ImageListener) invocationOnMock.getArguments()[1]);
-                        listener.onErrorResponse(new VolleyError());
-                        return null;
-                    }
-                });
-
-        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                mMockNativeClickHandler, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        verify(mockCustomEventNativeListener, never()).onNativeAdLoaded(subject);
-        verify(mockCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.IMAGE_DOWNLOAD_FAILURE);
-    }
-
-    @Test
-    public void loadAd_shouldParseSingleClickTracker() {
-        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                mMockNativeClickHandler, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        final Set<String> clickTrackers = subject.getClickTrackers();
-        assertThat(clickTrackers.size()).isEqualTo(1);
-        assertThat(clickTrackers.contains("expected clicktracker")).isTrue();
-    }
-
-    @Test
-    public void loadAd_shouldParseMultipleClickTrackers() throws Exception {
-        fakeJsonObject.remove("clktracker");
-        fakeJsonObject.put("clktracker", new JSONArray("[\"clicktracker1\",\"clicktracker2\"]"));
-        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                mMockNativeClickHandler, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        final Set<String> clickTrackers = subject.getClickTrackers();
-        assertThat(clickTrackers.size()).isEqualTo(2);
-        assertThat(clickTrackers.contains("clicktracker1")).isTrue();
-        assertThat(clickTrackers.contains("clicktracker2")).isTrue();
-    }
-
-    @Test
-    public void getExtrasImageUrls_whenExtrasContainsImages_shouldReturnImageUrls() throws Exception {
-        // getExtrasImageUrls requires the key to end with a case-insensitive "image" to be counted as an image
-        fakeJsonObject.put("test_image", "image_url_1");
-        fakeJsonObject.put("filler", "ignored");
-        fakeJsonObject.put("otherIMAGE", "image_url_2");
-        fakeJsonObject.put("more filler", "ignored");
-        fakeJsonObject.put("lastimage", "image_url_3");
-
-        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                mMockNativeClickHandler, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        assertThat(subject.getExtrasImageUrls()).containsOnly("image_url_1", "image_url_2", "image_url_3");
-    }
-
-
-    @Test
-    public void getExtrasImageUrls_whenExtrasDoesNotContainImageKeys_shouldReturnEmptyList() throws Exception {
-        // getExtrasImageUrls requires the key to end with a case-insensitive "image" to be counted as an image
-        fakeJsonObject.put("imageAtFront", "ignored");
-        fakeJsonObject.put("middle_image_in_key", "ignored");
-        fakeJsonObject.put("other", "ignored");
-
-        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                mMockNativeClickHandler, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        assertThat(subject.getExtrasImageUrls()).isEmpty();
-    }
-
-    @Test
-    public void getAllImageUrls_withExtraImagesAndMainAndIconImages_shouldReturnAllUrls() throws Exception {
-        fakeJsonObject.put("mainimage", "mainImageUrl");
-        fakeJsonObject.put("iconimage", "iconImageUrl");
-        fakeJsonObject.put("extraimage", "extraImageUrl");
-
-        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                mMockNativeClickHandler, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        assertThat(subject.getAllImageUrls()).containsOnly(
-                "mainImageUrl",
-                "iconImageUrl",
-                "extraImageUrl"
-        );
-    }
-
-    @Test
-    public void getAllImageUrls_withOnlyExtrasImages_shouldNotIncludeMainOrIconImages() throws Exception {
-        fakeJsonObject.put("extra1_image", "expected extra1_image");
-        fakeJsonObject.put("extra2_image", "expected extra2_image");
-
-        subject = new MoPubStaticNativeAd(context, fakeJsonObject, mockImpressionTracker,
-                mMockNativeClickHandler, mockCustomEventNativeListener);
-        subject.loadAd();
-
-        assertThat(subject.getAllImageUrls()).containsOnly("expected extra1_image", "expected extra2_image");
-    }
-
-    @Test
-    public void prepare_shouldAddViewToImpressionTracker_shouldSetOnClickListener() {
-        subject.prepare(mockView);
-
-        verify(mockImpressionTracker).addView(mockView, subject);
-        verify(mMockNativeClickHandler).setOnClickListener(mockView, subject);
-    }
-
-    @Test
-    public void clear_shouldRemoveViewFromImpressionTracker_shouldClearOnClickListener() {
-        subject.clear(mockView);
-
-        verify(mockImpressionTracker).removeView(mockView);
-        verify(mMockNativeClickHandler).clearOnClickListener(mockView);
-    }
-
-    @Test
-    public void destroy_shouldDestroyImpressionTracker() {
-        subject.destroy();
-
-        verify(mockImpressionTracker).destroy();
-    }
-
-    @Test
-    public void recordImpression_shouldNotifyAdImpressed_shouldTrackImpression() throws Exception {
-        subject.addImpressionTrackers(new JSONArray("[\"impressionUrl\"]"));
-        subject.recordImpression(mockView);
-
-        verify(mockNativeEventListener).onAdImpressed();
-    }
-
-    @Test
-    public void handleClick_shouldNotifyAdClicked_shouldOpenClickDestinationUrl() {
-        subject.setClickDestinationUrl("clickDestinationUrl");
-        subject.handleClick(mockView);
-
-        verify(mockNativeEventListener).onAdClicked();
-        verify(mMockNativeClickHandler).openClickDestinationUrl("clickDestinationUrl", mockView);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStreamAdPlacerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStreamAdPlacerTest.java
deleted file mode 100644
index 92e3c62d..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStreamAdPlacerTest.java
+++ /dev/null
@@ -1,479 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.view.View;
-import android.view.ViewGroup;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
-import com.mopub.nativeads.PositioningSource.PositioningListener;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Answers;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class MoPubStreamAdPlacerTest {
-    private Activity activity;
-
-    MoPubClientPositioning positioning;
-
-    @Mock
-    PositioningSource mockPositioningSource;
-    @Mock
-    NativeAdSource mockAdSource;
-    @Mock
-    MoPubStaticNativeAdRenderer mockAdRenderer;
-    @Mock
-    MoPubNativeAdLoadedListener mockAdLoadedListener;
-    @Mock
-    ImpressionTracker mockImpressionTracker;
-
-    @Mock(answer = Answers.RETURNS_DEEP_STUBS)
-    NativeAd mStubNativeAd;
-
-    private MoPubStreamAdPlacer subject;
-
-    @Before
-    public void setup() {
-        activity = Robolectric.buildActivity(Activity.class).create().get();
-        positioning = MoPubNativeAdPositioning.clientPositioning()
-                .enableRepeatingPositions(2);
-
-        subject = new MoPubStreamAdPlacer(activity, mockAdSource, mockPositioningSource);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.setAdLoadedListener(mockAdLoadedListener);
-    }
-
-    @Test
-    public void isAd_initialState_hasNoAds() {
-        checkAdPositions();
-    }
-
-    @Test
-    public void isAd_loadPositions_withoutLoadingAds_hasNoAds() {
-        subject.handlePositioningLoad(positioning);
-        checkAdPositions();
-    }
-
-    @Test
-    public void isAd_loadAds_withoutLoadingPositions_hasNoAds() {
-        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
-        subject.handleAdsAvailable();
-        subject.setItemCount(4);
-        checkAdPositions();
-    }
-
-    @Test
-    public void isAd_loadAds_thenLoadPositions_hasAds() {
-        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-
-        subject.handleAdsAvailable();
-        subject.handlePositioningLoad(positioning);
-        subject.setItemCount(4);
-        checkAdPositions(1, 3, 5);
-    }
-
-    @Test
-    public void isAd_loadPositions_thenLoadAds_hasAds() {
-        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-
-        subject.handlePositioningLoad(positioning);
-        subject.handleAdsAvailable();
-        subject.setItemCount(4);
-        checkAdPositions(1, 3, 5);
-    }
-
-    @Test
-    public void getAdViewTypeCount_shouldAdSourceCallGetAdRendererCount() throws Exception {
-        subject.getAdViewTypeCount();
-        verify(mockAdSource).getAdRendererCount();
-    }
-
-    @Test
-    public void getOriginalPosition_adjustsPositions() {
-        assertThat(subject.getOriginalPosition(0)).isEqualTo(0);
-        assertThat(subject.getOriginalPosition(1)).isEqualTo(1);
-        assertThat(subject.getOriginalPosition(2)).isEqualTo(2);
-        assertThat(subject.getOriginalPosition(3)).isEqualTo(3);
-        assertThat(subject.getOriginalPosition(4)).isEqualTo(4);
-
-        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        subject.handlePositioningLoad(positioning);
-        subject.handleAdsAvailable();
-        subject.setItemCount(4);
-
-        assertThat(subject.getOriginalPosition(0)).isEqualTo(0);
-        assertThat(subject.getOriginalPosition(1)).isEqualTo(PlacementData.NOT_FOUND);
-        assertThat(subject.getOriginalPosition(2)).isEqualTo(1);
-        assertThat(subject.getOriginalPosition(3)).isEqualTo(PlacementData.NOT_FOUND);
-        assertThat(subject.getOriginalPosition(4)).isEqualTo(2);
-        assertThat(subject.getOriginalPosition(5)).isEqualTo(PlacementData.NOT_FOUND);
-        assertThat(subject.getOriginalPosition(6)).isEqualTo(3);
-        assertThat(subject.getOriginalPosition(7)).isEqualTo(4);
-        assertThat(subject.getOriginalPosition(8)).isEqualTo(5);
-        assertThat(subject.getOriginalPosition(9)).isEqualTo(6);
-    }
-
-    @Test
-    public void getAdjustedPosition_adjustsPositions() {
-        assertThat(subject.getAdjustedPosition(0)).isEqualTo(0);
-        assertThat(subject.getAdjustedPosition(1)).isEqualTo(1);
-        assertThat(subject.getAdjustedPosition(2)).isEqualTo(2);
-        assertThat(subject.getAdjustedPosition(3)).isEqualTo(3);
-        assertThat(subject.getAdjustedPosition(4)).isEqualTo(4);
-
-        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        subject.handlePositioningLoad(positioning);
-        subject.handleAdsAvailable();
-        subject.setItemCount(4);
-
-        assertThat(subject.getAdjustedPosition(0)).isEqualTo(0);
-        assertThat(subject.getAdjustedPosition(1)).isEqualTo(2);
-        assertThat(subject.getAdjustedPosition(2)).isEqualTo(4);
-        assertThat(subject.getAdjustedPosition(3)).isEqualTo(6);
-        assertThat(subject.getAdjustedPosition(4)).isEqualTo(7);
-        assertThat(subject.getAdjustedPosition(5)).isEqualTo(8);
-        assertThat(subject.getAdjustedPosition(6)).isEqualTo(9);
-        assertThat(subject.getAdjustedPosition(7)).isEqualTo(10);
-        assertThat(subject.getAdjustedPosition(8)).isEqualTo(11);
-        assertThat(subject.getAdjustedPosition(9)).isEqualTo(12);
-    }
-
-    @Test
-    public void getOriginalCount_adjustsPositions() {
-        assertThat(subject.getOriginalCount(0)).isEqualTo(0);
-        assertThat(subject.getOriginalCount(1)).isEqualTo(1);
-        assertThat(subject.getOriginalCount(2)).isEqualTo(2);
-        assertThat(subject.getOriginalCount(3)).isEqualTo(3);
-        assertThat(subject.getOriginalCount(4)).isEqualTo(4);
-
-        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        subject.handlePositioningLoad(positioning);
-        subject.handleAdsAvailable();
-        subject.setItemCount(4);
-
-        assertThat(subject.getOriginalCount(0)).isEqualTo(0);
-        assertThat(subject.getOriginalCount(1)).isEqualTo(1);
-        assertThat(subject.getOriginalCount(2)).isEqualTo(PlacementData.NOT_FOUND);
-        assertThat(subject.getOriginalCount(3)).isEqualTo(2);
-        assertThat(subject.getOriginalCount(4)).isEqualTo(PlacementData.NOT_FOUND);
-        assertThat(subject.getOriginalCount(5)).isEqualTo(3);
-        assertThat(subject.getOriginalCount(6)).isEqualTo(PlacementData.NOT_FOUND);
-        assertThat(subject.getOriginalCount(7)).isEqualTo(4);
-        assertThat(subject.getOriginalCount(8)).isEqualTo(5);
-        assertThat(subject.getOriginalCount(9)).isEqualTo(6);
-    }
-
-    @Test
-    public void getAdjustedCount_adjustsPositions() {
-        assertThat(subject.getAdjustedCount(0)).isEqualTo(0);
-        assertThat(subject.getAdjustedCount(1)).isEqualTo(1);
-        assertThat(subject.getAdjustedCount(2)).isEqualTo(2);
-        assertThat(subject.getAdjustedCount(3)).isEqualTo(3);
-        assertThat(subject.getAdjustedCount(4)).isEqualTo(4);
-
-        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        subject.handlePositioningLoad(positioning);
-        subject.handleAdsAvailable();
-        subject.setItemCount(4);
-
-        assertThat(subject.getAdjustedCount(0)).isEqualTo(0);
-        assertThat(subject.getAdjustedCount(1)).isEqualTo(1);
-        assertThat(subject.getAdjustedCount(2)).isEqualTo(3);
-        assertThat(subject.getAdjustedCount(3)).isEqualTo(5);
-        assertThat(subject.getAdjustedCount(4)).isEqualTo(7);
-        assertThat(subject.getAdjustedCount(5)).isEqualTo(8);
-        assertThat(subject.getAdjustedCount(6)).isEqualTo(9);
-        assertThat(subject.getAdjustedCount(7)).isEqualTo(10);
-        assertThat(subject.getAdjustedCount(8)).isEqualTo(11);
-        assertThat(subject.getAdjustedCount(9)).isEqualTo(12);
-    }
-
-    @Test
-    public void placeAds_shouldCallListener() {
-        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        subject.handlePositioningLoad(positioning);
-        subject.handleAdsAvailable();
-        subject.setItemCount(4);
-
-        verify(mockAdLoadedListener, never()).onAdLoaded(0);
-        verify(mockAdLoadedListener).onAdLoaded(1);
-        verify(mockAdLoadedListener, never()).onAdLoaded(2);
-        verify(mockAdLoadedListener).onAdLoaded(3);
-        verify(mockAdLoadedListener, never()).onAdLoaded(4);
-        verify(mockAdLoadedListener).onAdLoaded(5);
-        verify(mockAdLoadedListener, never()).onAdLoaded(6);
-        verify(mockAdLoadedListener, never()).onAdLoaded(7);
-    }
-
-    @Test
-    public void placeAdsInRange_shouldPlaceAfter() {
-        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        subject.handlePositioningLoad(positioning);
-        subject.handleAdsAvailable();
-
-        Robolectric.getForegroundThreadScheduler().pause();
-        subject.setItemCount(100);
-        subject.placeAdsInRange(50, 50);
-        Robolectric.getForegroundThreadScheduler().advanceToLastPostedRunnable();
-
-        assertThat(subject.isAd(48)).isFalse();
-        assertThat(subject.isAd(49)).isFalse();
-        assertThat(subject.isAd(50)).isTrue();
-        assertThat(subject.isAd(51)).isFalse();
-        assertThat(subject.isAd(52)).isTrue();
-        assertThat(subject.isAd(53)).isFalse();
-        assertThat(subject.isAd(54)).isTrue();
-    }
-
-    @Test
-    public void placeAdsInRange_shouldCallListener() {
-        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        subject.handlePositioningLoad(positioning);
-        subject.handleAdsAvailable();
-
-        Robolectric.getForegroundThreadScheduler().pause();
-        subject.setItemCount(100);
-        subject.placeAdsInRange(50, 54);
-        Robolectric.getForegroundThreadScheduler().advanceToLastPostedRunnable();
-
-        verify(mockAdLoadedListener).onAdLoaded(50);
-        verify(mockAdLoadedListener, never()).onAdLoaded(51);
-        verify(mockAdLoadedListener).onAdLoaded(52);
-        verify(mockAdLoadedListener, never()).onAdLoaded(53);
-        verify(mockAdLoadedListener).onAdLoaded(54);
-        verify(mockAdLoadedListener, never()).onAdLoaded(55);
-        verify(mockAdLoadedListener).onAdLoaded(56);
-    }
-
-    @Test
-    public void placeAdsInRange_aboveItemCount_shouldNotInsert() {
-        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        subject.handlePositioningLoad(positioning);
-        subject.handleAdsAvailable();
-
-        Robolectric.getForegroundThreadScheduler().pause();
-        subject.setItemCount(0);
-        subject.placeAdsInRange(50, 54);
-        Robolectric.getForegroundThreadScheduler().advanceToLastPostedRunnable();
-
-        verify(mockAdLoadedListener, never()).onAdLoaded(50);
-    }
-
-    @Test
-    public void getAdView_withNoAds_returnsNull() {
-        assertThat(subject.getAdView(1, null, null)).isNull();
-    }
-
-    @Test
-    public void loadAds_shouldClearAds_afterFirstAdLoads() {
-        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        subject.handlePositioningLoad(positioning);
-        subject.handleAdsAvailable();
-        subject.setItemCount(2);
-        subject.placeAdsInRange(0, 1);
-
-        subject.loadAds("test-ad-unit-id");
-
-        // Ad should still exist until a new ad is available
-        checkAdPositions(1);
-        verify(mockAdLoadedListener, never()).onAdRemoved(anyInt());
-
-        // Once an ad is available, it should be immediately removed and replaced
-        subject.handleAdsAvailable();
-        subject.handlePositioningLoad(positioning);
-        verify(mockAdLoadedListener).onAdRemoved(1);
-        verify(mockAdLoadedListener, times(2)).onAdLoaded(1);
-        checkAdPositions(1);
-    }
-
-    @Test
-    public void loadAds_withFailingPositioningSource_shouldNotLoadAds() {
-        ArgumentCaptor<PositioningListener> listenerCaptor =
-                ArgumentCaptor.forClass(PositioningListener.class);
-
-        subject.registerAdRenderer(mockAdRenderer);
-        when(mockAdSource.getAdRendererCount()).thenReturn(1);
-        subject.loadAds("test-ad-unit-id");
-
-        verify(mockPositioningSource).loadPositions(
-                eq("test-ad-unit-id"), listenerCaptor.capture());
-        listenerCaptor.getValue().onFailed();
-        verify(mockAdLoadedListener, never()).onAdLoaded(anyInt());
-    }
-
-    @Test
-    public void destroy_shouldClearAdSource_shouldDestroyImpressionTracker_shouldDestroyNativeAd() {
-        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
-
-        subject = new MoPubStreamAdPlacer(activity, mockAdSource, mockPositioningSource);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        subject.handlePositioningLoad(positioning);
-        subject.handleAdsAvailable();
-        subject.setItemCount(2);  // Places 1 ad
-
-        subject.destroy();
-
-        verify(mockAdSource).clear();
-        verify(mStubNativeAd).destroy();
-    }
-
-    @Test
-    public void getAdView_withNullConvertView_callsRenderer_addsToImpressionTracker() {
-        View view = new View(activity);
-        when(mStubNativeAd.createAdView(any(Activity.class), any(ViewGroup.class))).thenReturn(view);
-        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        subject.handlePositioningLoad(positioning);
-        subject.handleAdsAvailable();
-        subject.setItemCount(100);
-
-        assertThat(subject.getAdView(1, null, null)).isEqualTo(view);
-
-        verify(mStubNativeAd).createAdView(eq(activity), any(ViewGroup.class));
-        verify(mStubNativeAd).renderAdView(view);
-    }
-
-    @Test
-    public void getAdView_withConvertView_shouldCallRenderer() {
-        View convertView = new View(activity);
-        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        subject.handlePositioningLoad(positioning);
-        subject.handleAdsAvailable();
-        subject.setItemCount(4);
-
-        assertThat(subject.getAdView(1, convertView, null)).isEqualTo(convertView);
-        verify(mStubNativeAd, never()).createAdView(any(Activity.class), any(ViewGroup.class));
-        verify(mStubNativeAd).renderAdView(convertView);
-    }
-
-    @Test
-    public void getAdView_shouldClearPreviousNativeAd() throws Exception {
-        NativeAd mockNativeAd = mock(NativeAd.class);
-        View mockView = mock(View.class);
-        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd, mockNativeAd, mStubNativeAd);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        subject.handlePositioningLoad(positioning);
-        subject.handleAdsAvailable();
-        subject.setItemCount(100);
-
-        subject.getAdView(1, mockView, null);
-
-        // Second call should clear the first NativeAd
-        subject.getAdView(3, mockView, null);
-        verify(mStubNativeAd).clear(mockView);
-
-        // Third call should clear the second NativeAd
-        subject.getAdView(5, mockView, null);
-        verify(mockNativeAd).clear(mockView);
-    }
-
-    @Test
-    public void getAdView_shouldPrepareNativeAd() throws Exception {
-        View mockView = mock(View.class);
-        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        subject.handlePositioningLoad(positioning);
-        subject.handleAdsAvailable();
-        subject.setItemCount(100);
-
-        subject.getAdView(1, mockView, null);
-
-        verify(mStubNativeAd).prepare(mockView);
-    }
-
-    @Test
-    public void destroy_shouldClearAdSource_shouldResetPlacementData() {
-        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
-
-        subject = new MoPubStreamAdPlacer(activity, mockAdSource, mockPositioningSource);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        subject.handlePositioningLoad(positioning);
-        subject.handleAdsAvailable();
-        subject.setItemCount(2);  // Places 1 ad
-
-        subject.destroy();
-
-        verify(mockAdSource).clear();
-        verify(mStubNativeAd).destroy();
-    }
-
-    @Test
-    public void modifyClientPositioning_afterConstructingAdPlacer_shouldNotModifyAdPositions() {
-        when(mockAdSource.dequeueAd()).thenReturn(mStubNativeAd);
-        subject.registerAdRenderer(mockAdRenderer);
-        subject.loadAds("test-ad-unit-id");
-        subject.handlePositioningLoad(positioning);
-        positioning.enableRepeatingPositions(5);
-
-        subject.handleAdsAvailable();
-        subject.setItemCount(4);
-        checkAdPositions(1, 3, 5);
-    }
-
-    void checkAdPositions(Integer... positions) {
-        List<Integer> expected = Arrays.asList(positions);
-        List<Integer> actual = new ArrayList<Integer>();
-        for (int i = 0; i < 20; i++) {
-            if (subject.isAd(i)) {
-                actual.add(i);
-                assertThat(subject.getAdData(i)).isNotNull();
-            } else {
-                assertThat(subject.getAdData(i)).isNull();
-            }
-        }
-
-        assertThat(actual).isEqualTo(expected);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdRendererTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdRendererTest.java
deleted file mode 100644
index 02f53e1f..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdRendererTest.java
+++ /dev/null
@@ -1,215 +0,0 @@
-package com.mopub.nativeads;
-
-import android.graphics.Bitmap;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ImageView;
-import android.widget.RelativeLayout;
-import android.widget.TextView;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.Utils;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.network.MaxWidthImageLoader;
-import com.mopub.network.MoPubRequestQueue;
-import com.mopub.network.Networking;
-import com.mopub.volley.toolbox.ImageLoader;
-
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.rules.ExpectedException;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class MoPubVideoNativeAdRendererTest {
-    private MoPubVideoNativeAdRenderer subject;
-    private VideoNativeAd videoNativeAd;
-    @Mock private RelativeLayout relativeLayout;
-    @Mock private ViewGroup viewGroup;
-    private MediaViewBinder mediaViewBinder;
-    @Mock private TextView titleView;
-    @Mock private TextView textView;
-    @Mock private TextView callToActionView;
-    @Mock private MediaLayout mediaLayoutView;
-    @Mock private ImageView iconImageView;
-    @Mock private ImageView privacyInformationIconImageView;
-    @Mock private ImageView badView;
-    @Mock private MoPubRequestQueue mockRequestQueue;
-    @Mock private MaxWidthImageLoader mockImageLoader;
-    @Mock private ImageLoader.ImageContainer mockImageContainer;
-
-    @Before
-    public void setUp() throws Exception {
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-        Networking.setImageLoaderForTesting(mockImageLoader);
-        stub(mockImageContainer.getBitmap()).toReturn(mock(Bitmap.class));
-
-        when(relativeLayout.getId()).thenReturn((int) Utils.generateUniqueId());
-
-        videoNativeAd = new VideoNativeAd() {
-
-            @Override
-            public void onStateChanged(final boolean playWhenReady, final int playbackState) {
-            }
-
-            @Override
-            public void onError(final Exception e) {
-            }
-        };
-        videoNativeAd.setTitle("test title");
-        videoNativeAd.setText("test text");
-        videoNativeAd.setCallToAction("test call to action");
-        videoNativeAd.setClickDestinationUrl("destinationUrl");
-        videoNativeAd.setMainImageUrl("testUrl");
-        videoNativeAd.setIconImageUrl("testUrl");
-        videoNativeAd.setVastVideo("test video");
-
-        setViewIdInLayout(titleView, relativeLayout);
-        setViewIdInLayout(textView, relativeLayout);
-        setViewIdInLayout(callToActionView, relativeLayout);
-        setViewIdInLayout(mediaLayoutView, relativeLayout);
-        setViewIdInLayout(iconImageView, relativeLayout);
-        setViewIdInLayout(privacyInformationIconImageView, relativeLayout);
-        setViewIdInLayout(badView, relativeLayout);
-
-        mediaViewBinder = new MediaViewBinder.Builder(relativeLayout.getId())
-                .titleId(titleView.getId())
-                .textId(textView.getId())
-                .callToActionId(callToActionView.getId())
-                .mediaLayoutId(mediaLayoutView.getId())
-                .iconImageId(iconImageView.getId())
-                .privacyInformationIconImageId(privacyInformationIconImageView.getId())
-                .build();
-
-        subject = new MoPubVideoNativeAdRenderer(mediaViewBinder);
-    }
-
-    private void setViewIdInLayout(View mockView, RelativeLayout mockLayout) {
-        int id = (int) Utils.generateUniqueId();
-        when(mockView.getId()).thenReturn(id);
-        when(mockLayout.findViewById(eq(id))).thenReturn(mockView);
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void createAdView_withNullContext_shouldThrowNPE() {
-        subject.createAdView(null, viewGroup);
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void renderAdView_withNullView_shouldThrowNPE() {
-        subject.renderAdView(null, videoNativeAd);
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void renderAdView_withNullNativeAd_shouldThrowNPE() {
-        subject.renderAdView(relativeLayout, null);
-    }
-
-    @Rule public ExpectedException exception = ExpectedException.none();
-
-    @Test
-    public void renderAdView_withNullViewBinder_shouldThrowNPE() {
-        subject = new MoPubVideoNativeAdRenderer(null);
-
-        exception.expect(NullPointerException.class);
-        subject.renderAdView(relativeLayout, videoNativeAd);
-    }
-
-    @Test
-    public void renderAdView_shouldReturnPopulatedView() {
-        subject.renderAdView(relativeLayout, videoNativeAd);
-
-        verify(titleView).setText(eq("test title"));
-        verify(textView).setText(eq("test text"));
-        verify(callToActionView).setText(eq("test call to action"));
-
-        // not testing images due to testing complexity
-    }
-
-    @Test
-    public void renderAdView_withFailedViewBinder_shouldNotWriteViews() {
-        mediaViewBinder = new MediaViewBinder.Builder(relativeLayout.getId())
-                .titleId(titleView.getId())
-                .textId(badView.getId())
-                .callToActionId(callToActionView.getId())
-                .mediaLayoutId(mediaLayoutView.getId())
-                .iconImageId(iconImageView.getId())
-                .build();
-
-        subject = new MoPubVideoNativeAdRenderer(mediaViewBinder);
-        subject.renderAdView(relativeLayout, videoNativeAd);
-
-        verify(titleView, never()).setText(anyString());
-        verify(textView, never()).setText(anyString());
-        verify(callToActionView, never()).setText(anyString());
-        verify(mediaLayoutView, times(2)).getId();
-        verifyNoMoreInteractions(mediaLayoutView);
-        verify(iconImageView, times(2)).getId();
-        verifyNoMoreInteractions(iconImageView);
-    }
-
-    @Test
-    public void renderAdView_withNoViewHolder_shouldCreateNativeViewHolder() {
-        subject.renderAdView(relativeLayout, videoNativeAd);
-
-        MediaViewHolder expectedViewHolder = MediaViewHolder.fromViewBinder
-                (relativeLayout,
-                mediaViewBinder);
-        MediaViewHolder viewHolder = subject.mMediaViewHolderMap.get(relativeLayout);
-        compareNativeViewHolders(expectedViewHolder, viewHolder);
-    }
-
-    @Test
-    public void getOrCreateNativeViewHolder_withViewHolder_shouldNotReCreateNativeViewHolder() {
-        subject.renderAdView(relativeLayout, videoNativeAd);
-        MediaViewHolder expectedViewHolder = subject.mMediaViewHolderMap.get(relativeLayout);
-        subject.renderAdView(relativeLayout, videoNativeAd);
-
-        MediaViewHolder viewHolder = subject.mMediaViewHolderMap.get(relativeLayout);
-        assertThat(viewHolder).isEqualTo(expectedViewHolder);
-    }
-
-    static private void compareNativeViewHolders(final MediaViewHolder actualViewHolder,
-            final MediaViewHolder expectedViewHolder) {
-        assertThat(actualViewHolder.titleView).isEqualTo(expectedViewHolder.titleView);
-        assertThat(actualViewHolder.textView).isEqualTo(expectedViewHolder.textView);
-        assertThat(actualViewHolder.callToActionView).isEqualTo(expectedViewHolder.callToActionView);
-        assertThat(actualViewHolder.mediaLayout).isEqualTo(expectedViewHolder.mediaLayout);
-        assertThat(actualViewHolder.iconImageView).isEqualTo(expectedViewHolder.iconImageView);
-        assertThat(actualViewHolder.privacyInformationIconImageView).isEqualTo(
-                expectedViewHolder.privacyInformationIconImageView);
-    }
-
-    @Test
-    public void supports_withCorrectInstanceOfBaseNativeAd_shouldReturnTrue() throws Exception {
-        assertThat(subject.supports(new VideoNativeAd() {
-            @Override
-            public void onStateChanged(final boolean playWhenReady, final int playbackState) {
-            }
-
-            @Override
-            public void onError(final Exception e) {
-            }
-        })).isTrue();
-        assertThat(subject.supports(
-                mock(MoPubCustomEventVideoNative.MoPubVideoNativeAd.class))).isTrue();
-        assertThat(subject.supports(mock(BaseNativeAd.class))).isFalse();
-        assertThat(subject.supports(mock(MoPubCustomEventNative.MoPubStaticNativeAd.class)))
-                .isFalse();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
deleted file mode 100644
index 4f970182..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
+++ /dev/null
@@ -1,924 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.graphics.Bitmap;
-import android.graphics.SurfaceTexture;
-import android.graphics.drawable.Drawable;
-import android.media.AudioManager;
-import android.view.TextureView;
-import android.view.TextureView.SurfaceTextureListener;
-import android.view.View;
-
-import com.mopub.common.Constants;
-import com.mopub.common.event.EventDetails;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BaseVideoPlayerActivity;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.mobileads.MraidVideoPlayerActivity;
-import com.mopub.mobileads.VastManager;
-import com.mopub.mobileads.VastTracker;
-import com.mopub.mobileads.VastVideoConfig;
-import com.mopub.mobileads.VideoViewabilityTracker;
-import com.mopub.nativeads.BaseNativeAd.NativeEventListener;
-import com.mopub.nativeads.CustomEventNative.CustomEventNativeListener;
-import com.mopub.nativeads.MoPubCustomEventVideoNative.HeaderVisibilityStrategy;
-import com.mopub.nativeads.MoPubCustomEventVideoNative.MoPubVideoNativeAd;
-import com.mopub.nativeads.MoPubCustomEventVideoNative.MoPubVideoNativeAd.VideoState;
-import com.mopub.nativeads.MoPubCustomEventVideoNative.NativeVideoControllerFactory;
-import com.mopub.nativeads.MoPubCustomEventVideoNative.PayloadVisibilityStrategy;
-import com.mopub.nativeads.MoPubCustomEventVideoNative.VideoResponseHeaders;
-import com.mopub.nativeads.NativeVideoController.VisibilityTrackingEvent;
-import com.mopub.network.MaxWidthImageLoader;
-import com.mopub.network.MoPubRequestQueue;
-import com.mopub.network.Networking;
-import com.mopub.volley.toolbox.ImageLoader;
-import com.mopub.volley.toolbox.ImageLoader.ImageListener;
-
-import org.json.JSONArray;
-import org.json.JSONObject;
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Ignore;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Mock;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowApplication;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import static com.mopub.common.VolleyRequestMatcher.isUrl;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyBoolean;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.argThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class MoPubVideoNativeAdTest {
-
-    private MoPubVideoNativeAd subject;
-    private Activity activity;
-    private JSONObject jsonObject;
-    private Map<String, String> serverExtras;
-    private VideoResponseHeaders videoResponseHeaders;
-
-    @Mock private CustomEventNativeListener mockCustomEventNativeListener;
-    @Mock private VastVideoConfig mockVastVideoConfig;
-    @Mock private MaxWidthImageLoader mockImageLoader;
-    @Mock private ImageLoader.ImageContainer mockImageContainer;
-    @Mock private NativeVideoController mockNativeVideoController;
-    @Mock private VisibilityTracker mockVisibilityTracker;
-    @Mock private NativeVideoControllerFactory mockNativeVideoControllerFactory;
-    @Mock private MediaLayout mockMediaLayout;
-    @Mock private View mockRootView;
-    @Mock private SurfaceTexture mockSurfaceTexture;
-    @Mock private TextureView mockTextureView;
-    @Mock private Drawable mockDrawable;
-    @Mock private MoPubRequestQueue mockRequestQueue;
-    @Mock private NativeEventListener mockNativeEventListener;
-    @Mock private VastManager mockVastManager;
-
-    @Before
-    public void setUp() throws Exception {
-        activity = Robolectric.buildActivity(Activity.class).create().get();
-
-        jsonObject = new JSONObject();
-        jsonObject.put("imptracker", new JSONArray("[\"url1\", \"url2\"]"));
-        jsonObject.put("clktracker", "json click tracker");
-        jsonObject.put("title", "title");
-        jsonObject.put("text", "text");
-        jsonObject.put("mainimage", "mainimageurl");
-        jsonObject.put("iconimage", "iconimageurl");
-        jsonObject.put("clk", "clk");
-        jsonObject.put("fallback", "fallback");
-        jsonObject.put("ctatext", "ctatext");
-        jsonObject.put("video", "video");
-        jsonObject.put("extraimage", "extraimageurl");
-
-        serverExtras = new HashMap<String, String>();
-        serverExtras.put("Play-Visible-Percent", "10");
-        serverExtras.put("Pause-Visible-Percent", "5");
-        serverExtras.put("Impression-Min-Visible-Percent", "15");
-        serverExtras.put("Impression-Visible-Ms", "100");
-        serverExtras.put("Max-Buffer-Ms", "20");
-        videoResponseHeaders = new VideoResponseHeaders(serverExtras);
-
-        when(mockVastVideoConfig.getVideoViewabilityTracker())
-                .thenReturn(new VideoViewabilityTracker(98, 76, "viewabilityTracker"));
-
-        subject = new MoPubVideoNativeAd(
-                activity, jsonObject, mockCustomEventNativeListener, videoResponseHeaders,
-                mockVisibilityTracker, mockNativeVideoControllerFactory, null,
-                "header click tracker", mockVastManager);
-        subject.setNativeEventListener(mockNativeEventListener);
-        // noinspection unchecked
-        when(mockNativeVideoControllerFactory
-                .createForId(anyInt(), any(Context.class), any(List.class), eq(mockVastVideoConfig),
-                        any(EventDetails.class)))
-                .thenReturn(mockNativeVideoController);
-
-        when(mockImageLoader.get(anyString(), any(ImageListener.class)))
-                .then(new Answer<Void>() {
-                    @Override
-                    public Void answer(final InvocationOnMock invocationOnMock) throws Throwable {
-                        ImageListener listener = ((ImageListener) invocationOnMock.getArguments()[1]);
-                        listener.onResponse(mockImageContainer, false);
-                        return null;
-                    }
-                });
-        when(mockMediaLayout.getTextureView()).thenReturn(mockTextureView);
-
-        stub(mockImageContainer.getBitmap()).toReturn(mock(Bitmap.class));
-        Networking.setImageLoaderForTesting(mockImageLoader);
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-    }
-
-    @After
-    public void tearDown() {
-        Networking.setImageLoaderForTesting(null);
-        Networking.setRequestQueueForTesting(null);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void loadAd_withoutImpTrackerRequiredKey_shouldThrowIllegalArgumentException() {
-        jsonObject.remove("imptracker");
-        subject.loadAd();
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void loadAd_withoutClkTrackerRequiredKey_shouldThrowIllegalArgumentException() {
-        jsonObject.remove("clktracker");
-        subject.loadAd();
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void loadAd_withInvalidValueForRequiredKey_shouldThrowIllegalArgumentException() throws Exception {
-        jsonObject.put("imptracker", 123);
-        subject.loadAd();
-    }
-
-    @Test
-    public void loadAd_withInvalidValueForOptionalKey_shouldNotThrowExcpetion() throws Exception {
-        jsonObject.put("title", 123);
-        subject.loadAd();
-    }
-
-    @Test
-    public void loadAd_shouldInitializeAssetValues() {
-        subject.loadAd();
-
-        assertThat(subject.getImpressionTrackers()).containsOnly("url1", "url2");
-        assertThat(subject.getTitle()).isEqualTo("title");
-        assertThat(subject.getText()).isEqualTo("text");
-        assertThat(subject.getMainImageUrl()).isEqualTo("mainimageurl");
-        assertThat(subject.getIconImageUrl()).isEqualTo("iconimageurl");
-        assertThat(subject.getClickDestinationUrl()).isEqualTo("clk");
-        assertThat(subject.getCallToAction()).isEqualTo("ctatext");
-        assertThat(subject.getPrivacyInformationIconClickThroughUrl()).isEqualTo(
-                "https://www.mopub.com/optout/");
-        assertThat(subject.getVastVideo()).isEqualTo("video");
-        assertThat(subject.getExtra("extraimage")).isEqualTo("extraimageurl");
-        assertThat(subject.getExtras()).hasSize(1);
-    }
-
-    @Test
-    public void loadAd_shouldPrecacheImages_andLoadVastXml() {
-        subject.loadAd();
-
-        verify(mockImageLoader).get(eq("mainimageurl"), any(ImageListener.class));
-        verify(mockImageLoader).get(eq("iconimageurl"), any(ImageListener.class));
-        verify(mockImageLoader).get(eq("extraimageurl"), any(ImageListener.class));
-        verify(mockVastManager).prepareVastVideoConfiguration(eq("video"),
-                any(VastManager.VastManagerListener.class), anyString(), any(Context.class));
-    }
-
-    @Test
-    public void onVastVideoConfigurationPrepared_withNullVastVideoConfig_shouldNotifyListenerFailed() {
-        subject.onVastVideoConfigurationPrepared(null);
-        verify(mockCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.INVALID_RESPONSE);
-    }
-
-    @SuppressWarnings("unchecked")
-    @Test
-    public void onVastVideoConfigurationPrepared_shouldConstructNativeVideoController_shouldNotifyListenerOfAdLoaded() {
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-
-        ArgumentCaptor<List> argumentCaptor = ArgumentCaptor.forClass(List.class);
-        verify(mockNativeVideoControllerFactory).createForId(anyInt(),
-                eq(activity.getApplicationContext()),
-                argumentCaptor.capture(),
-                eq(mockVastVideoConfig),
-                any(EventDetails.class));
-
-        List<VisibilityTrackingEvent> visibilityTrackingEvents = (List<VisibilityTrackingEvent>) argumentCaptor.getValue();
-        assertThat(visibilityTrackingEvents.get(0).strategy).isInstanceOf(HeaderVisibilityStrategy.class);
-        assertThat(visibilityTrackingEvents.get(0).minimumPercentageVisible).isEqualTo(15);
-        assertThat(visibilityTrackingEvents.get(0).totalRequiredPlayTimeMs).isEqualTo(100);
-
-        assertThat(visibilityTrackingEvents.get(1).strategy).isInstanceOf(PayloadVisibilityStrategy.class);
-        assertThat(visibilityTrackingEvents.get(1).minimumPercentageVisible).isEqualTo(76);
-        assertThat(visibilityTrackingEvents.get(1).totalRequiredPlayTimeMs).isEqualTo(98);
-
-        verify(mockVastVideoConfig).addClickTrackers(any(List.class));
-        verify(mockVastVideoConfig).setClickThroughUrl("clk");
-        verify(mockCustomEventNativeListener).onNativeAdLoaded(subject);
-    }
-
-    @Ignore("This test is broken")
-    @SuppressWarnings("unchecked")
-    @Test
-    public void onVastVideoConfigurationPrepared_shouldMergeHeaderAndJsonClickTrackers() {
-        final ArgumentCaptor<List> argumentCaptor = ArgumentCaptor.forClass(List.class);
-
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-
-        verify(mockVastVideoConfig).addClickTrackers(argumentCaptor.capture());
-        final List<VastTracker> actualClickTrackers = (List<VastTracker>) argumentCaptor.getValue();
-        assertThat(actualClickTrackers.size()).isEqualTo(2);
-        final VastTracker headerClickTracker = actualClickTrackers.get(0);
-        final VastTracker jsonClickTracker = actualClickTrackers.get(1);
-        assertThat(headerClickTracker.getTrackingUrl()).isEqualTo("header click tracker");
-        assertThat(headerClickTracker.isRepeatable()).isFalse();
-        assertThat(jsonClickTracker.getTrackingUrl()).isEqualTo("json click tracker");
-        assertThat(jsonClickTracker.isRepeatable()).isFalse();
-    }
-
-    @SuppressWarnings("unchecked")
-    @Test
-    public void onVastVideoConfigurationPrepared_shouldDedupeHeaderAndJsonClickTrackers() throws Exception {
-        jsonObject.remove("clktracker");
-        jsonObject.put("clktracker", "header click tracker");
-        final ArgumentCaptor<List> argumentCaptor = ArgumentCaptor.forClass(List.class);
-
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-
-        verify(mockVastVideoConfig).addClickTrackers(argumentCaptor.capture());
-        final List<VastTracker> actualClickTrackers = (List<VastTracker>) argumentCaptor.getValue();
-        assertThat(actualClickTrackers.size()).isEqualTo(1);
-        final VastTracker clickTracker = actualClickTrackers.get(0);
-        assertThat(clickTracker.getTrackingUrl()).isEqualTo("header click tracker");
-        assertThat(clickTracker.isRepeatable()).isFalse();
-    }
-
-    @Ignore("This test is broken")
-    @SuppressWarnings("unchecked")
-    @Test
-    public void onVastVideoConfigurationPrepared_shouldAcceptJsonArrayClickTrackers() throws Exception {
-        jsonObject.remove("clktracker");
-        jsonObject.put("clktracker",
-                new JSONArray("[\"json click tracker 1\", \"json click tracker 2\"]"));
-        final ArgumentCaptor<List> argumentCaptor = ArgumentCaptor.forClass(List.class);
-
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-
-        verify(mockVastVideoConfig).addClickTrackers(argumentCaptor.capture());
-        final List<VastTracker> actualClickTrackers = (List<VastTracker>) argumentCaptor.getValue();
-        assertThat(actualClickTrackers.size()).isEqualTo(3);
-        final VastTracker jsonClickTracker1 = actualClickTrackers.get(0);
-        final VastTracker jsonClickTracker2 = actualClickTrackers.get(1);
-        final VastTracker headerClickTracker = actualClickTrackers.get(2);
-        assertThat(jsonClickTracker1.getTrackingUrl()).isEqualTo("json click tracker 1");
-        assertThat(jsonClickTracker1.isRepeatable()).isFalse();
-        assertThat(jsonClickTracker2.getTrackingUrl()).isEqualTo("json click tracker 2");
-        assertThat(jsonClickTracker2.isRepeatable()).isFalse();
-        assertThat(headerClickTracker.getTrackingUrl()).isEqualTo("header click tracker");
-        assertThat(headerClickTracker.isRepeatable()).isFalse();
-    }
-
-    @Ignore("This test is broken")
-    @SuppressWarnings("unchecked")
-    @Test
-    public void onVastVideoConfigurationPrepared_shouldDedupeJsonArrayClickTrackers() throws Exception {
-        jsonObject.remove("clktracker");
-        jsonObject.put("clktracker",
-                new JSONArray("[\"json click tracker\", \"header click tracker\"]"));
-        final ArgumentCaptor<List> argumentCaptor = ArgumentCaptor.forClass(List.class);
-
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-
-        verify(mockVastVideoConfig).addClickTrackers(argumentCaptor.capture());
-        final List<VastTracker> actualClickTrackers = (List<VastTracker>) argumentCaptor.getValue();
-        assertThat(actualClickTrackers.size()).isEqualTo(2);
-        final VastTracker headerClickTracker = actualClickTrackers.get(0);
-        final VastTracker jsonClickTracker = actualClickTrackers.get(1);
-        assertThat(headerClickTracker.getTrackingUrl()).isEqualTo("header click tracker");
-        assertThat(headerClickTracker.isRepeatable()).isFalse();
-        assertThat(jsonClickTracker.getTrackingUrl()).isEqualTo("json click tracker");
-        assertThat(jsonClickTracker.isRepeatable()).isFalse();
-    }
-
-    @Test
-    public void render_shouldAddViewToVisibilityTracker() {
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-        subject.prepare(mockRootView);
-        subject.render(mockMediaLayout);
-
-        verify(mockVisibilityTracker).addView(mockRootView, mockMediaLayout, 10, 5);
-    }
-
-    @Test
-    public void render_shouldSetupMediaLayout() {
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-        subject.prepare(mockRootView);
-        subject.render(mockMediaLayout);
-
-        verify(mockMediaLayout).setSurfaceTextureListener(any(SurfaceTextureListener.class));
-        verify(mockMediaLayout).setPlayButtonClickListener(any(View.OnClickListener.class));
-        verify(mockMediaLayout).setMuteControlClickListener(any(View.OnClickListener.class));
-        verify(mockMediaLayout).setOnClickListener(any(View.OnClickListener.class));
-    }
-
-    @Test
-    public void render_shouldApplyStatePaused() {
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-        subject.prepare(mockRootView);
-        subject.render(mockMediaLayout);
-
-        verify(mockMediaLayout).setMode(MediaLayout.Mode.PAUSED);
-    }
-
-    @Test
-    public void render_withPlaybackStateCleared_shouldPrepareNativeVideoController() {
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-        subject.prepare(mockRootView);
-        when(mockNativeVideoController.getPlaybackState()).thenReturn(NativeVideoController
-                .STATE_CLEARED);
-        subject.render(mockMediaLayout);
-
-        verify(mockNativeVideoController).prepare(subject);
-    }
-
-    @Test
-    public void MediaLayout_surfaceTextureListener_onSurfaceTextureAvailable_shouldSetupNativeVideoController_shouldResetMediaLayoutProgress() {
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-        subject.prepare(mockRootView);
-        subject.render(mockMediaLayout);
-
-        ArgumentCaptor<SurfaceTextureListener> argumentCaptor =
-                ArgumentCaptor.forClass(SurfaceTextureListener.class);
-        verify(mockMediaLayout).setSurfaceTextureListener(argumentCaptor.capture());
-        SurfaceTextureListener surfaceTextureListener = argumentCaptor.getValue();
-
-        surfaceTextureListener.onSurfaceTextureAvailable(mockSurfaceTexture, 0, 0);
-
-        verify(mockNativeVideoController).setListener(subject);
-        verify(mockNativeVideoController).setOnAudioFocusChangeListener(subject);
-        verify(mockNativeVideoController).setProgressListener(subject);
-        verify(mockNativeVideoController).setTextureView(mockMediaLayout.getTextureView());
-        verify(mockMediaLayout).resetProgress();
-    }
-
-    @Test
-    public void MediaLayout_surfaceTextureListener_onSurfaceTextureAvailable_withCurrentPositionWithinThreshhold_withStateEnded_shouldSetFinalFrameAsMainImage() {
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-        subject.prepare(mockRootView);
-        subject.render(mockMediaLayout);
-
-        ArgumentCaptor<SurfaceTextureListener> argumentCaptor =
-                ArgumentCaptor.forClass(SurfaceTextureListener.class);
-        verify(mockMediaLayout).setSurfaceTextureListener(argumentCaptor.capture());
-        SurfaceTextureListener surfaceTextureListener = argumentCaptor.getValue();
-
-        when(mockNativeVideoController.getPlaybackState())
-                .thenReturn(NativeVideoController.STATE_ENDED);
-        when(mockNativeVideoController.getCurrentPosition()).thenReturn(9L);
-        when(mockNativeVideoController.getDuration()).thenReturn(10L);
-        when(mockNativeVideoController.hasFinalFrame()).thenReturn(true);
-        when(mockNativeVideoController.getFinalFrame()).thenReturn(mockDrawable);
-
-        surfaceTextureListener.onSurfaceTextureAvailable(mockSurfaceTexture, 0, 0);
-
-        verify(mockMediaLayout).setMainImageDrawable(mockNativeVideoController.getFinalFrame());
-    }
-
-    @Test
-    public void MediaLayout_surfaceTextureListener_onSurfaceTextureAvailable_withNeedsPrepare_shouldPrepareNativeVideoController() {
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-        subject.render(mockMediaLayout);
-
-        ArgumentCaptor<SurfaceTextureListener> argumentCaptor =
-                ArgumentCaptor.forClass(SurfaceTextureListener.class);
-        verify(mockMediaLayout).setSurfaceTextureListener(argumentCaptor.capture());
-        SurfaceTextureListener surfaceTextureListener = argumentCaptor.getValue();
-
-        surfaceTextureListener.onSurfaceTextureAvailable(mockSurfaceTexture, 0, 0);
-
-        verify(mockNativeVideoController).prepare(subject);
-    }
-
-    @Test
-    public void MediaLayout_surfaceTextureListener_onSurfaceTextureDestroyed_shouldSetNeedsPrepareTrue_shouldReleaseMoPubNativeVideoAd_shouldApplyStatePaused() {
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-        subject.prepare(mockRootView);
-        subject.render(mockMediaLayout);
-
-        ArgumentCaptor<SurfaceTextureListener> argumentCaptor =
-                ArgumentCaptor.forClass(SurfaceTextureListener.class);
-        verify(mockMediaLayout).setSurfaceTextureListener(argumentCaptor.capture());
-        SurfaceTextureListener surfaceTextureListener = argumentCaptor.getValue();
-
-        surfaceTextureListener.onSurfaceTextureDestroyed(mockSurfaceTexture);
-
-        assertThat(subject.needsPrepare()).isTrue();
-        verify(mockNativeVideoController).release(subject);
-        verify(mockMediaLayout).setMode(MediaLayout.Mode.PAUSED);
-    }
-
-    @Test
-    public void MediaLayout_playButtonClickListener_shouldResetMediaLayoutProgress_shouldSeekTo0_shouldSetEndedFalse_shouldSetNeedsSeekFalse() {
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-        subject.prepare(mockRootView);
-        subject.render(mockMediaLayout);
-
-        ArgumentCaptor<View.OnClickListener> argumentCaptor =
-                ArgumentCaptor.forClass(View.OnClickListener.class);
-        verify(mockMediaLayout).setPlayButtonClickListener(argumentCaptor.capture());
-
-        View.OnClickListener onClickListener = argumentCaptor.getValue();
-        onClickListener.onClick(null);
-
-        verify(mockMediaLayout).resetProgress();
-        verify(mockNativeVideoController).seekTo(0);
-        assertThat(subject.hasEnded()).isEqualTo(false);
-        assertThat(subject.needsSeek()).isEqualTo(false);
-    }
-
-    @Test
-    public void MediaLayout_muteButtonClickListener_withStateReady_shouldToggleMutedState() {
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-        subject.prepare(mockRootView);
-        subject.render(mockMediaLayout);
-
-        ArgumentCaptor<View.OnClickListener> argumentCaptor =
-                ArgumentCaptor.forClass(View.OnClickListener.class);
-        verify(mockMediaLayout).setMuteControlClickListener(argumentCaptor.capture());
-
-        View.OnClickListener onClickListener = argumentCaptor.getValue();
-        onClickListener.onClick(null);
-        assertThat(subject.isMuted()).isFalse();
-
-        onClickListener.onClick(null);
-        assertThat(subject.isMuted()).isTrue();
-    }
-
-    @Test
-    public void MediaLayout_clickListener_shouldPrepareToLeaveView_shouldTriggerImpressionTracker_shouldNotDisableAppAudio_shouldStartFullScreenVideoActivity() {
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-        subject.prepare(mockRootView);
-        subject.render(mockMediaLayout);
-
-        ArgumentCaptor<View.OnClickListener> argumentCaptor =
-                ArgumentCaptor.forClass(View.OnClickListener.class);
-        verify(mockMediaLayout).setOnClickListener(argumentCaptor.capture());
-
-        reset(mockNativeVideoController);
-        View.OnClickListener onClickListener = argumentCaptor.getValue();
-        onClickListener.onClick(null);
-
-        assertThat(subject.needsSeek()).isTrue();
-        assertThat(subject.needsPrepare()).isTrue();
-        assertThat(subject.needsPrepare()).isTrue();
-        verify(mockNativeVideoController).setListener(null);
-        verify(mockNativeVideoController).setOnAudioFocusChangeListener(null);
-        verify(mockNativeVideoController).setProgressListener(null);
-        verify(mockNativeVideoController).clear();
-        verify(mockNativeVideoController).triggerImpressionTrackers();
-        verify(mockMediaLayout).setMode(MediaLayout.Mode.PAUSED);
-        verify(mockNativeVideoController, never()).setAppAudioEnabled(anyBoolean());
-
-        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
-        assertThat(startedActivity.getComponent().getClassName())
-                .isEqualTo(MraidVideoPlayerActivity.class.getName());
-        assertThat(startedActivity.getStringExtra(BaseVideoPlayerActivity.VIDEO_CLASS_EXTRAS_KEY))
-                .isEqualTo("native");
-        assertThat(startedActivity.getLongExtra(Constants.NATIVE_VIDEO_ID, 0L))
-                .isGreaterThan(0L);
-        assertThat(startedActivity.getSerializableExtra(Constants
-                .NATIVE_VAST_VIDEO_CONFIG))
-                .isEqualTo(mockVastVideoConfig);
-    }
-
-    @Test
-    public void prepare_shouldSetOnClickListenerOnView() {
-        subject.prepare(mockRootView);
-        verify(mockRootView).setOnClickListener(any(View.OnClickListener.class));
-    }
-
-    @Test
-    public void RootView_onClickListener_onClick_shouldPrepareToLeaveView_shouldNotDisableAppAudio_shouldNotNotifyAdClicked_shouldTriggerImpressionTrackers_shouldshouldHandleCtaClick() {
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-        subject.prepare(mockRootView);
-        subject.render(mockMediaLayout);
-
-        ArgumentCaptor<View.OnClickListener> argumentCaptor =
-                ArgumentCaptor.forClass(View.OnClickListener.class);
-        verify(mockRootView).setOnClickListener(argumentCaptor.capture());
-
-        View.OnClickListener onClickListener = argumentCaptor.getValue();
-        reset(mockNativeVideoController);
-        onClickListener.onClick(null);
-
-        assertThat(subject.needsSeek()).isTrue();
-        assertThat(subject.needsPrepare()).isTrue();
-        assertThat(subject.needsPrepare()).isTrue();
-        verify(mockNativeVideoController).setListener(null);
-        verify(mockNativeVideoController).setOnAudioFocusChangeListener(null);
-        verify(mockNativeVideoController).setProgressListener(null);
-        verify(mockNativeVideoController).clear();
-        verify(mockMediaLayout).setMode(MediaLayout.Mode.PAUSED);
-        verify(mockNativeVideoController).handleCtaClick(activity.getApplicationContext());
-        verify(mockNativeEventListener, never()).onAdClicked();
-        verify(mockNativeVideoController).triggerImpressionTrackers();
-        verify(mockNativeVideoController, never()).setAppAudioEnabled(anyBoolean());
-    }
-
-    @Test
-    public void clear_shouldClearNativeVideoController_shouldSetMediaLayoutModeImage_shouldSetMediaLayoutNull_shouldSetMediaLayoutListenersToNull_shouldRemoveMediaLayoutFromVisibilityTracker() {
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-        subject.prepare(mockRootView);
-        subject.render(mockMediaLayout);
-        subject.clear(mockRootView);
-
-        verify(mockNativeVideoController).clear();
-        verify(mockMediaLayout).setMode(MediaLayout.Mode.IMAGE);
-        verify(mockMediaLayout).setSurfaceTextureListener(null);
-        verify(mockMediaLayout).setPlayButtonClickListener(null);
-        verify(mockMediaLayout).setMuteControlClickListener(null);
-        verify(mockMediaLayout).setOnClickListener(null);
-        verify(mockVisibilityTracker).removeView(mockMediaLayout);
-        assertThat(subject.getMediaLayout()).isNull();
-    }
-
-    @Test
-    public void destroy_shouldSetPlayWhenReadyFalse_shouldReleaseNativeVideoController_shouldRemoveNativeVideoController_shouldDestroyVisibilityTracker() {
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-        subject.prepare(mockRootView);
-        subject.render(mockMediaLayout);
-
-        reset(mockNativeVideoController);
-        subject.destroy();
-
-        verify(mockMediaLayout).setMode(MediaLayout.Mode.IMAGE);
-        verify(mockMediaLayout).setSurfaceTextureListener(null);
-        verify(mockMediaLayout).setPlayButtonClickListener(null);
-        verify(mockMediaLayout).setMuteControlClickListener(null);
-        verify(mockMediaLayout).setOnClickListener(null);
-        verify(mockVisibilityTracker).removeView(mockMediaLayout);
-
-        assertThat(subject.getMediaLayout()).isNull();
-        verify(mockNativeVideoController).setPlayWhenReady(false);
-        verify(mockNativeVideoController).release(subject);
-        assertThat(NativeVideoController.getForId(subject.getId())).isNull();
-        verify(mockVisibilityTracker).destroy();
-    }
-
-    @Test
-    public void onStateChanged_shouldAppropriatelySetVideoState() {
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-        subject.prepare(mockRootView);
-        subject.render(mockMediaLayout);
-
-        subject.onStateChanged(true, NativeVideoController.STATE_PREPARING);
-        assertThat(subject.getVideoState()).isEqualTo(VideoState.LOADING);
-
-        subject.onStateChanged(true, NativeVideoController.STATE_IDLE);
-        assertThat(subject.getVideoState()).isEqualTo(VideoState.LOADING);
-
-        subject.onStateChanged(true, NativeVideoController.STATE_BUFFERING);
-        assertThat(subject.getVideoState()).isEqualTo(VideoState.BUFFERING);
-
-        subject.onStateChanged(true, NativeVideoController.STATE_READY);
-        assertThat(subject.getVideoState()).isEqualTo(VideoState.PAUSED);
-
-        subject.setLatestVisibility(true);
-        subject.onStateChanged(true, NativeVideoController.STATE_READY);
-        assertThat(subject.getVideoState()).isEqualTo(VideoState.PLAYING_MUTED);
-
-        subject.setMuted(false);
-        subject.onStateChanged(true, NativeVideoController.STATE_READY);
-        assertThat(subject.getVideoState()).isEqualTo(VideoState.PLAYING);
-
-        subject.onStateChanged(true, NativeVideoController.STATE_ENDED);
-        assertThat(subject.getVideoState()).isEqualTo(VideoState.ENDED);
-        assertThat(subject.hasEnded()).isTrue();
-    }
-
-    @Test
-    public void onError_shouldSetVideoStateError() {
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-        subject.prepare(mockRootView);
-        subject.render(mockMediaLayout);
-
-        subject.onError(new Exception());
-
-        assertThat(subject.getVideoState()).isEqualTo(VideoState.FAILED_LOAD);
-    }
-
-    @Test
-    public void updateProgress_shouldUpdateMediaLayoutProgress() {
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-        subject.prepare(mockRootView);
-        subject.render(mockMediaLayout);
-
-        subject.updateProgress(312);
-
-        verify(mockMediaLayout).updateProgress(312);
-    }
-
-    @Test
-    public void onAudioFocusChange_withFocusChangeAudioFocusLossOrAudioFocusLossTransient_shouldMuteTheVideo() throws Exception {
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-        subject.prepare(mockRootView);
-        subject.render(mockMediaLayout);
-
-        subject.setMuted(false);
-        subject.onAudioFocusChange(AudioManager.AUDIOFOCUS_LOSS);
-
-        assertThat(subject.isMuted()).isTrue();
-
-        subject.setMuted(false);
-        subject.onAudioFocusChange(AudioManager.AUDIOFOCUS_LOSS_TRANSIENT);
-
-        assertThat(subject.isMuted()).isTrue();
-    }
-
-    @Test
-    public void onAudioFocusChange_withFocusChangeAudioFocusLossTransientCanDuck_shouldLowerVolume() throws Exception {
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-        subject.prepare(mockRootView);
-        subject.render(mockMediaLayout);
-
-        subject.onAudioFocusChange(AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK);
-
-        verify(mockNativeVideoController).setAudioVolume(0.3f);
-    }
-
-    @Test
-    public void onAudioFocusChange_withFocusChangeAudioFocusGain_shouldRaiseVolume() throws Exception {
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-        subject.prepare(mockRootView);
-        subject.render(mockMediaLayout);
-
-        subject.onAudioFocusChange(AudioManager.AUDIOFOCUS_GAIN);
-
-        verify(mockNativeVideoController).setAudioVolume(1.0f);
-    }
-
-    @Test
-    public void applyState_shouldHandleError_shouldSetAppAudioEnabledFalse_shouldSetMediaLayoutModeImage() {
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-        subject.prepare(mockRootView);
-        subject.render(mockMediaLayout);
-
-        reset(mockNativeVideoController);
-        subject.applyState(VideoState.FAILED_LOAD);
-
-        verify(mockVastVideoConfig).handleError(activity.getApplicationContext(), null, 0);
-        verify(mockNativeVideoController).setAppAudioEnabled(false);
-        verify(mockMediaLayout).setMode(MediaLayout.Mode.IMAGE);
-    }
-
-    @Test
-    public void applyState_withVideoStateCreatedOrLoading_shouldSetPlayWhenReadyTrue_shouldSetMediaLayoutModeLoading() {
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-        subject.prepare(mockRootView);
-        subject.render(mockMediaLayout);
-
-        subject.applyState(VideoState.CREATED);
-
-        verify(mockNativeVideoController).setPlayWhenReady(true);
-        verify(mockMediaLayout).setMode(MediaLayout.Mode.LOADING);
-
-        reset(mockNativeVideoController);
-        reset(mockMediaLayout);
-        subject.applyState(VideoState.LOADING);
-
-        verify(mockNativeVideoController).setPlayWhenReady(true);
-        verify(mockMediaLayout).setMode(MediaLayout.Mode.LOADING);
-    }
-
-    @Test
-    public void applyState_withVideoStateBuffering_shouldSetPlayWhenReadyTrue_shouldSetMediaLayoutModeBuffering() {
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-        subject.prepare(mockRootView);
-        subject.render(mockMediaLayout);
-
-        subject.applyState(VideoState.BUFFERING);
-
-        verify(mockNativeVideoController).setPlayWhenReady(true);
-        verify(mockMediaLayout).setMode(MediaLayout.Mode.BUFFERING);
-    }
-
-    @Test
-    public void applyState_withVideoStatePaused_withTransitionToFullScreenFalse_shouldSetAppAudioEnabledFalse_shouldSetPlayWhenReadyFalse_shouldSetMediaLayoutModePaused() {
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-        subject.prepare(mockRootView);
-        subject.render(mockMediaLayout);
-
-        subject.applyState(VideoState.PAUSED);
-
-        verify(mockNativeVideoController).setAppAudioEnabled(false);
-        verify(mockNativeVideoController).setPlayWhenReady(false);
-        verify(mockMediaLayout).setMode(MediaLayout.Mode.PAUSED);
-    }
-
-    @Test
-    public void applyState_withVideoStatePlaying_shouldSetPlayWhenReadyTrue_shouldSetAudioEnabledTrue_shouldSetAppAudioEnabledTrue_shouldSetMediaLayoutModePlaying_shouldSetMuteStateUnmuted() {
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-        subject.prepare(mockRootView);
-        subject.render(mockMediaLayout);
-
-        reset(mockNativeVideoController);
-        subject.applyState(VideoState.PLAYING);
-
-        verify(mockNativeVideoController).setPlayWhenReady(true);
-        verify(mockNativeVideoController).setAudioEnabled(true);
-        verify(mockNativeVideoController).setAppAudioEnabled(true);
-        verify(mockMediaLayout).setMode(MediaLayout.Mode.PLAYING);
-        verify(mockMediaLayout).setMuteState(MediaLayout.MuteState.UNMUTED);
-    }
-
-    @Test
-    public void applyState_withVideoStatePlaying_withNeedsSeek_shouldSeekToCurrentPosition() {
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-        subject.prepare(mockRootView);
-        subject.render(mockMediaLayout);
-
-        assertThat(subject.needsSeek()).isTrue();
-        when(mockNativeVideoController.getCurrentPosition()).thenReturn(543L);
-        subject.applyState(VideoState.PLAYING);
-
-        verify(mockNativeVideoController).seekTo(mockNativeVideoController.getCurrentPosition());
-    }
-
-    @Test
-    public void applyState_withVideoStatePlayingMuted_shouldSetPlayWhenReadyTrue_shouldSetAudioEnabledFalse_shouldSetAppAudioEnabledTrue_shouldSetMediaLayoutModePlaying_shouldSetMuteStateMuted() {
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-        subject.prepare(mockRootView);
-        subject.render(mockMediaLayout);
-
-        reset(mockNativeVideoController);
-        subject.applyState(VideoState.PLAYING_MUTED);
-
-        verify(mockNativeVideoController).setPlayWhenReady(true);
-        verify(mockNativeVideoController).setAudioEnabled(false);
-        verify(mockNativeVideoController).setAppAudioEnabled(false);
-        verify(mockMediaLayout).setMode(MediaLayout.Mode.PLAYING);
-        verify(mockMediaLayout).setMuteState(MediaLayout.MuteState.MUTED);
-    }
-
-    @Test
-    public void applyState_withVideoStatePlayingMuted_withNeedsSeek_shouldSeekToCurrentPosition() {
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-        subject.prepare(mockRootView);
-        subject.render(mockMediaLayout);
-
-        assertThat(subject.needsSeek()).isTrue();
-        when(mockNativeVideoController.getCurrentPosition()).thenReturn(543L);
-        subject.applyState(VideoState.PLAYING_MUTED);
-
-        verify(mockNativeVideoController).seekTo(mockNativeVideoController.getCurrentPosition());
-    }
-
-    @Test
-    public void applyState_withVideoStatePlayingEnded_shouldHandleComplete_shouldSetAppAudioEnabledTrue_shouldSetMediaLayoutModeFinished_shouldUpdateMediaLayoutProgress1000() {
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-        subject.prepare(mockRootView);
-        subject.render(mockMediaLayout);
-
-        reset(mockNativeVideoController);
-        subject.applyState(VideoState.ENDED);
-
-        verify(mockVastVideoConfig).handleComplete(activity.getApplicationContext(), 0);
-        verify(mockNativeVideoController).setAppAudioEnabled(false);
-        verify(mockMediaLayout).setMode(MediaLayout.Mode.FINISHED);
-        verify(mockMediaLayout).updateProgress(1000);
-
-        verify(mockMediaLayout, never()).setMainImageDrawable(any(Drawable.class));
-    }
-
-    @Test
-    public void applyState_withVideoStatePlayingEnded_withFinalFrame_shouldSetMainImageDrawableOfMediaLayout() {
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-        subject.prepare(mockRootView);
-        subject.render(mockMediaLayout);
-
-        when(mockNativeVideoController.hasFinalFrame()).thenReturn(true);
-        when(mockNativeVideoController.getFinalFrame()).thenReturn(mockDrawable);
-        subject.applyState(VideoState.ENDED);
-
-        verify(mockMediaLayout).setMainImageDrawable(mockNativeVideoController.getFinalFrame());
-    }
-
-    @Test
-    public void applyState_withVideoStatePause_afterVideoStatePlayingMuted_shouldFirePauseTrackers() {
-        final ArrayList<VastTracker> testList = new ArrayList<VastTracker>();
-        testList.add(new VastTracker("testUrl", true));
-
-        when(mockVastVideoConfig.getPauseTrackers()).thenReturn(testList);
-
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-        subject.prepare(mockRootView);
-        subject.render(mockMediaLayout);
-
-        subject.applyState(VideoState.PLAYING_MUTED);
-        subject.applyState(VideoState.PAUSED);
-
-        verify(mockVastVideoConfig).getPauseTrackers();
-        verify(mockRequestQueue).add(argThat(isUrl("testUrl")));
-    }
-
-    @Test
-    public void applyState_withVideoStatePlayingMuted_afterPaused_afterPlaying_shouldFireResumeTrackers() {
-        final ArrayList<VastTracker> testList = new ArrayList<VastTracker>();
-        testList.add(new VastTracker("testResumeUrl", true));
-
-        when(mockVastVideoConfig.getResumeTrackers()).thenReturn(testList);
-
-        subject.loadAd();
-        subject.onVastVideoConfigurationPrepared(mockVastVideoConfig);
-        subject.prepare(mockRootView);
-        subject.render(mockMediaLayout);
-
-        subject.applyState(VideoState.PLAYING_MUTED);
-        subject.applyState(VideoState.PAUSED);
-        subject.applyState(VideoState.BUFFERING);
-        subject.applyState(VideoState.PLAYING_MUTED);
-
-        verify(mockVastVideoConfig).getPauseTrackers();
-        verify(mockRequestQueue).add(argThat(isUrl("testResumeUrl")));
-    }
-
-    @Test
-    public void HeaderVisibilityStrategy_execute_shouldNotifyAdImpressed() throws Exception {
-        HeaderVisibilityStrategy headerVisibilityStrategy
-                = new HeaderVisibilityStrategy(subject);
-        headerVisibilityStrategy.execute();
-
-        verify(mockNativeEventListener).onAdImpressed();
-    }
-
-    @Test
-    public void PayloadVisibilityStrategy_execute_shouldMakeTrackingRequest() throws Exception {
-        PayloadVisibilityStrategy payloadVisibilityStrategy
-                = new PayloadVisibilityStrategy(activity, "payloadUrl");
-        payloadVisibilityStrategy.execute();
-
-        verify(mockRequestQueue).add(argThat(isUrl("payloadUrl")));
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdSourceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdSourceTest.java
deleted file mode 100644
index 6946d3af..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdSourceTest.java
+++ /dev/null
@@ -1,384 +0,0 @@
-package com.mopub.nativeads;
-
-import android.os.Handler;
-import android.os.SystemClock;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowSystemClock;
-
-import java.util.ArrayList;
-
-import static com.mopub.nativeads.NativeAdSource.AdSourceListener;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyLong;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class NativeAdSourceTest {
-    private NativeAdSource subject;
-    private ArrayList<TimestampWrapper<NativeAd>> nativeAdCache;
-    private RequestParameters requestParameters;
-    private int defaultRetryTime;
-    private int maxRetryTime;
-    private int maxRetries;
-
-    @Mock private AdSourceListener mockAdSourceListener;
-    @Mock private MoPubNative mockMoPubNative;
-    @Mock private NativeAd mMockNativeAd;
-    @Mock private Handler mockReplenishCacheHandler;
-    @Mock private AdRendererRegistry mockAdRendererRegistry;
-    @Mock private MoPubStaticNativeAdRenderer mockRenderer;
-
-    @Before
-    public void setUp() {
-        nativeAdCache = new ArrayList<TimestampWrapper<NativeAd>>(2);
-        subject = new NativeAdSource(nativeAdCache, mockReplenishCacheHandler, mockAdRendererRegistry);
-        subject.setAdSourceListener(mockAdSourceListener);
-
-        requestParameters = new RequestParameters.Builder().build();
-
-        defaultRetryTime = 1000;
-        maxRetryTime = 5*60*1000;
-        maxRetries = 5;
-
-        // XXX We need this to ensure that our SystemClock starts
-        ShadowSystemClock.uptimeMillis();
-
-        ArrayList<MoPubAdRenderer> moPubAdRenderers = new ArrayList<MoPubAdRenderer>();
-        moPubAdRenderers.add(mockRenderer);
-        when(mockAdRendererRegistry.getRendererIterable()).thenReturn(moPubAdRenderers);
-    }
-
-    @Test
-    public void constructor_shouldInitializeCorrectly() {
-        assertThat(subject.mRequestInFlight).isFalse();
-        assertThat(subject.mSequenceNumber).isEqualTo(0);
-        assertThat(subject.getRetryTime()).isEqualTo(defaultRetryTime);
-    }
-
-    @Test
-    public void getAdRendererCount_shouldCallAdRendererRegistryGetAdRendererCount() throws Exception {
-        when(mockAdRendererRegistry.getAdRendererCount()).thenReturn(123);
-
-        assertThat(subject.getAdRendererCount()).isEqualTo(123);
-
-        verify(mockAdRendererRegistry).getAdRendererCount();
-    }
-
-    @Test
-    public void getViewTypeForAd_shouldCallAdRendererRegistryGetViewTypeForAd() throws Exception {
-        NativeAd nativeAd = mock(NativeAd.class);
-        when(mockAdRendererRegistry.getViewTypeForAd(nativeAd)).thenReturn(123);
-
-        assertThat(subject.getViewTypeForAd(nativeAd)).isEqualTo(123);
-
-        verify(mockAdRendererRegistry).getViewTypeForAd(nativeAd);
-    }
-
-    @Test
-    public void registerAdRenderer_shouldRegisterAdRendererWithRegistryAndMoPubNative() throws Exception {
-        subject.setMoPubNative(mockMoPubNative);
-        subject.registerAdRenderer(mockRenderer);
-
-        verify(mockAdRendererRegistry).registerAdRenderer(mockRenderer);
-        verify(mockMoPubNative).registerAdRenderer(mockRenderer);
-    }
-
-    @Test
-    public void getAdRendererForViewType_shouldCallAdRendererRegistryGetRendererForViewType() throws Exception {
-        when(mockAdRendererRegistry.getRendererForViewType(123)).thenReturn(mockRenderer);
-
-        assertThat(subject.getAdRendererForViewType(123)).isEqualTo(mockRenderer);
-
-        verify(mockAdRendererRegistry).getRendererForViewType(123);
-    }
-
-    @Test
-    public void loadAds_shouldReplenishCache() {
-        subject.loadAds(requestParameters, mockMoPubNative);
-        assertThat(subject.mRequestInFlight).isTrue();
-        verify(mockMoPubNative).makeRequest(requestParameters, 0);
-    }
-
-    @Test
-    public void loadAds_shouldReregisterAdRenderersWithNewMoPubNative() throws Exception {
-        subject.loadAds(mock(RequestParameters.class), mockMoPubNative);
-
-        verify(mockMoPubNative).registerAdRenderer(mockRenderer);
-    }
-
-    @Test
-    public void loadAds_shouldClearNativeAdSource() {
-        subject.setMoPubNative(mockMoPubNative);
-        TimestampWrapper<NativeAd> timestampWrapper =
-                new TimestampWrapper<NativeAd>(mock(NativeAd.class));
-        nativeAdCache.add(timestampWrapper);
-        subject.mRequestInFlight = true;
-        subject.mSequenceNumber = 5;
-        subject.mCurrentRetries = maxRetries;
-
-        subject.loadAds(requestParameters, mockMoPubNative);
-
-        verify(timestampWrapper.mInstance).destroy();
-        assertThat(nativeAdCache).isEmpty();
-        verify(mockMoPubNative).destroy();
-        verify(mockReplenishCacheHandler).removeMessages(0);
-        assertThat(subject.mSequenceNumber).isEqualTo(0);
-        assertThat(subject.mCurrentRetries).isEqualTo(0);
-        assertThat(subject.getRetryTime()).isEqualTo(defaultRetryTime);
-
-        // new request has been kicked off
-        assertThat(subject.mRequestInFlight).isTrue();
-    }
-
-    @Test
-    public void loadAds_shouldDestroyPreviousMoPubNativeInstance() {
-        subject.loadAds(requestParameters, mockMoPubNative);
-        verify(mockMoPubNative, never()).destroy();
-
-        subject.loadAds(requestParameters, mockMoPubNative);
-        verify(mockMoPubNative).destroy();
-    }
-
-    @Test
-    public void clear_shouldDestroyMoPubNative_shouldClearNativeAdCache_shouldRemovePollHandlerMessages_shouldResetSequenceNumber_shouldResetRequestInFlight_shouldResetRetryTime() {
-        subject.setMoPubNative(mockMoPubNative);
-        TimestampWrapper<NativeAd> timestampWrapper = new TimestampWrapper<NativeAd>(mock(NativeAd.class));
-        nativeAdCache.add(timestampWrapper);
-        subject.mRequestInFlight = true;
-        subject.mSequenceNumber = 5;
-        subject.mCurrentRetries = maxRetries;
-
-        subject.clear();
-
-        verify(timestampWrapper.mInstance).destroy();
-        assertThat(nativeAdCache).isEmpty();
-        verify(mockMoPubNative).destroy();
-        verify(mockReplenishCacheHandler).removeMessages(0);
-        assertThat(subject.mRequestInFlight).isFalse();
-        assertThat(subject.mSequenceNumber).isEqualTo(0);
-        assertThat(subject.getRetryTime()).isEqualTo(defaultRetryTime);
-    }
-
-    @Test
-    public void dequeueAd_withNonStaleAd_shouldReturnNativeAd() {
-        subject.setMoPubNative(mockMoPubNative);
-        nativeAdCache.add(new TimestampWrapper<NativeAd>(mMockNativeAd));
-
-        assertThat(subject.dequeueAd()).isEqualTo(mMockNativeAd);
-        assertThat(nativeAdCache).isEmpty();
-    }
-
-    @Test
-    public void dequeueAd_withStaleAd_shouldReturnNativeAd() {
-        subject.setMoPubNative(mockMoPubNative);
-
-        TimestampWrapper<NativeAd> timestampWrapper = new TimestampWrapper<NativeAd>(
-                mMockNativeAd);
-        timestampWrapper.mCreatedTimestamp = SystemClock.uptimeMillis() - (15*60*1000+1);
-        nativeAdCache.add(timestampWrapper);
-
-        assertThat(subject.dequeueAd()).isNull();
-        assertThat(nativeAdCache).isEmpty();
-    }
-
-    @Test
-    public void dequeueAd_noRequestInFlight_shouldReplenishCache() {
-        subject.setMoPubNative(mockMoPubNative);
-
-        nativeAdCache.add(new TimestampWrapper<NativeAd>(mMockNativeAd));
-
-        assertThat(subject.dequeueAd()).isEqualTo(mMockNativeAd);
-
-        assertThat(nativeAdCache).isEmpty();
-        verify(mockReplenishCacheHandler).post(any(Runnable.class));
-    }
-
-    @Test
-    public void dequeueAd_requestInFlight_shouldNotReplenishCache() {
-        subject.setMoPubNative(mockMoPubNative);
-
-        nativeAdCache.add(new TimestampWrapper<NativeAd>(mMockNativeAd));
-
-        subject.mRequestInFlight = true;
-        assertThat(subject.dequeueAd()).isEqualTo(mMockNativeAd);
-
-        assertThat(nativeAdCache).isEmpty();
-        verify(mockReplenishCacheHandler, never()).post(any(Runnable.class));
-    }
-
-    @Test
-    public void updateRetryTime_shouldUpdateRetryTimeUntilAt10Minutes() {
-        int retryTime = 0;
-        while (subject.mCurrentRetries < maxRetries) {
-            subject.updateRetryTime();
-            retryTime = subject.getRetryTime();
-        }
-
-        assertThat(retryTime).isEqualTo(maxRetryTime);
-
-        // assert it won't change anymore
-        subject.updateRetryTime();
-        assertThat(retryTime).isEqualTo(subject.getRetryTime());
-    }
-
-    @Test
-    public void resetRetryTime_shouldSetRetryTimeTo1Second() {
-        assertThat(subject.getRetryTime()).isEqualTo(defaultRetryTime);
-
-        subject.updateRetryTime();
-        assertThat(subject.getRetryTime()).isGreaterThan(defaultRetryTime);
-
-        subject.resetRetryTime();
-        assertThat(subject.getRetryTime()).isEqualTo(defaultRetryTime);
-    }
-
-    @Test
-    public void replenishCache_shouldLoadNativeAd_shouldMarkRequestInFlight() {
-        subject.setMoPubNative(mockMoPubNative);
-
-        subject.replenishCache();
-
-        verify(mockMoPubNative).makeRequest(any(RequestParameters.class), eq(0));
-        assertThat(subject.mRequestInFlight).isTrue();
-    }
-
-    @Test
-    public void replenishCache_withRequestInFlight_shouldNotLoadNativeAd() {
-        subject.mRequestInFlight = true;
-        subject.setMoPubNative(mockMoPubNative);
-
-        subject.replenishCache();
-
-        verify(mockMoPubNative, never()).makeRequest(requestParameters, 0);
-        assertThat(subject.mRequestInFlight).isTrue();
-    }
-
-    @SuppressWarnings("unchecked")
-    @Test
-    public void replenishCache_withCacheSizeAtLimit_shouldNotLoadNativeAd() {
-        // Default cache size may change in the future and this test will have to be updated
-        nativeAdCache.add(mock(TimestampWrapper.class));
-        nativeAdCache.add(mock(TimestampWrapper.class));
-        nativeAdCache.add(mock(TimestampWrapper.class));
-
-        subject.setMoPubNative(mockMoPubNative);
-
-        subject.replenishCache();
-
-        verify(mockMoPubNative, never()).makeRequest(any(RequestParameters.class), any(Integer.class));
-        assertThat(subject.mRequestInFlight).isFalse();
-    }
-
-    @Test
-    public void moPubNativeNetworkListener_onNativeLoad_shouldAddToCache() {
-        subject.setMoPubNative(mockMoPubNative);
-        subject.getMoPubNativeNetworkListener().onNativeLoad(mMockNativeAd);
-
-        assertThat(nativeAdCache).hasSize(1);
-        assertThat(nativeAdCache.get(0).mInstance).isEqualTo(mMockNativeAd);
-    }
-
-    @Test
-    public void moPubNativeNetworkListener_onNativeLoad_withEmptyCache_shouldCallOnAdsAvailable() {
-        subject.setMoPubNative(mockMoPubNative);
-
-        assertThat(nativeAdCache).isEmpty();
-        subject.getMoPubNativeNetworkListener().onNativeLoad(mMockNativeAd);
-
-        assertThat(nativeAdCache).hasSize(1);
-        verify(mockAdSourceListener).onAdsAvailable();
-    }
-
-    @Test
-    public void moPubNativeNetworkListener_onNativeLoad_withNonEmptyCache_shouldNotCallOnAdsAvailable() {
-        subject.setMoPubNative(mockMoPubNative);
-
-        nativeAdCache.add(mock(TimestampWrapper.class));
-        subject.getMoPubNativeNetworkListener().onNativeLoad(mMockNativeAd);
-
-        assertThat(nativeAdCache).hasSize(2);
-        verify(mockAdSourceListener, never()).onAdsAvailable();
-    }
-
-    @Test
-    public void moPubNativeNetworkListener_onNativeLoad_shouldIncrementSequenceNumber_shouldResetRetryTime() {
-        subject.setMoPubNative(mockMoPubNative);
-
-        subject.mCurrentRetries = maxRetries;
-        subject.mSequenceNumber = 5;
-
-        subject.getMoPubNativeNetworkListener().onNativeLoad(mMockNativeAd);
-
-        assertThat(subject.getRetryTime()).isEqualTo(defaultRetryTime);
-        assertThat(subject.mSequenceNumber).isEqualTo(6);
-    }
-
-    @SuppressWarnings("unchecked")
-    @Test
-    public void moPubNativeNetworkListener_onNativeLoad_withFullCache_shouldResetRequestInFlight() {
-        subject.setMoPubNative(mockMoPubNative);
-
-        subject.mRequestInFlight = true;
-
-        // fill cache
-        nativeAdCache.add(mock(TimestampWrapper.class));
-        nativeAdCache.add(mock(TimestampWrapper.class));
-        nativeAdCache.add(mock(TimestampWrapper.class));
-
-        subject.getMoPubNativeNetworkListener().onNativeLoad(mMockNativeAd);
-
-        assertThat(subject.mRequestInFlight).isEqualTo(false);
-    }
-
-    @Test
-    public void moPubNativeNetworkListener_onNativeLoad_withCacheFilled_shouldNotReplenishCache() {
-        subject.setMoPubNative(mockMoPubNative);
-
-        subject.mRequestInFlight = true;
-
-        subject.getMoPubNativeNetworkListener().onNativeLoad(mMockNativeAd);
-
-        assertThat(subject.mRequestInFlight).isEqualTo(false);
-    }
-
-    @Test
-    public void
-    moPubNativeNetworkListener_onNativeFail_shouldResetInFlight_shouldUpdateRetryTime_shouldPostDelayedRunnable() {
-        subject.mRequestInFlight = true;
-
-        subject.getMoPubNativeNetworkListener().onNativeFail(NativeErrorCode.UNSPECIFIED);
-
-        assertThat(subject.mRequestInFlight).isEqualTo(false);
-        assertThat(subject.mRetryInFlight).isEqualTo(true);
-        assertThat(subject.getRetryTime()).isGreaterThan(defaultRetryTime);
-        verify(mockReplenishCacheHandler).postDelayed(any(Runnable.class), eq((long)subject.getRetryTime()));
-    }
-
-    @Test
-    public void
-    moPubNativeNetworkListener_onNativeFail_maxRetryTime_shouldResetInflight_shouldResetRetryTime_shouldNotPostDelayedRunnable() {
-        subject.mRequestInFlight = true;
-        subject.mCurrentRetries = maxRetries;
-
-        subject.getMoPubNativeNetworkListener().onNativeFail(NativeErrorCode.UNSPECIFIED);
-
-        assertThat(subject.mRequestInFlight).isEqualTo(false);
-        assertThat(subject.mRetryInFlight).isEqualTo(false);
-        assertThat(subject.getRetryTime()).isEqualTo(defaultRetryTime);
-        verify(mockReplenishCacheHandler, never()).postDelayed(any(Runnable.class), anyLong());
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdTest.java
deleted file mode 100644
index bb12a011..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdTest.java
+++ /dev/null
@@ -1,204 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.view.View;
-import android.view.ViewGroup;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.nativeads.BaseNativeAd.NativeEventListener;
-import com.mopub.network.MoPubRequestQueue;
-import com.mopub.network.Networking;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import java.util.HashSet;
-import java.util.Set;
-
-import static com.mopub.common.VolleyRequestMatcher.isUrl;
-import static com.mopub.nativeads.NativeAd.MoPubNativeEventListener;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.argThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyZeroInteractions;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class NativeAdTest {
-
-    private NativeAd subject;
-    private Activity activity;
-
-    @Mock private View mockView;
-    @Mock private ViewGroup mockParent;
-    @Mock private MoPubStaticNativeAdRenderer mockRenderer;
-    @Mock private MoPubRequestQueue mockRequestQueue;
-    @Mock private MoPubNativeEventListener mockEventListener;
-    @Mock private BaseNativeAd mockBaseNativeAd;
-
-    @Before
-    public void setUp() {
-        activity = Robolectric.buildActivity(Activity.class).create().get();
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-
-        Set<String> impUrls = new HashSet<String>();
-        impUrls.add("impUrl");
-        when(mockBaseNativeAd.getImpressionTrackers()).thenReturn(impUrls);
-
-        Set<String> clkUrls = new HashSet<String>();
-        clkUrls.add("clkUrl");
-        when(mockBaseNativeAd.getClickTrackers()).thenReturn(clkUrls);
-
-        subject = new NativeAd(activity,
-                "moPubImpressionTrackerUrl",
-                "moPubClickTrackerUrl",
-                "adunit_id",
-                mockBaseNativeAd,
-                mockRenderer
-        );
-        subject.setMoPubNativeEventListener(mockEventListener);
-    }
-
-    @Test
-    public void constructor_shouldSetNativeEventListener() {
-        reset(mockBaseNativeAd);
-        subject = new NativeAd(activity, "moPubImpressionTrackerUrl", "moPubClickTrackerUrl",
-                "adunit_id", mockBaseNativeAd, mockRenderer);
-        verify(mockBaseNativeAd).setNativeEventListener(any(NativeEventListener.class));
-    }
-
-    @Test
-    public void constructor_shouldMergeMoPubClickTrackerWithBaseNativeAdClickTrackers() {
-        reset(mockRequestQueue);
-        subject = new NativeAd(activity, "", "moPubClickTrackerUrl", "", mockBaseNativeAd,
-                mockRenderer);
-
-        subject.handleClick(null);
-
-        verify(mockRequestQueue).add(argThat(isUrl("moPubClickTrackerUrl")));
-        verify(mockRequestQueue).add(argThat(isUrl("clkUrl")));
-    }
-
-    @Test
-    public void getAdUnitId_shouldReturnAdUnitId() {
-        assertThat(subject.getAdUnitId()).isEqualTo("adunit_id");
-    }
-
-    @Test
-    public void isDestroyed_withNativeAdDestroyed_shouldReturnTrue() {
-        assertThat(subject.isDestroyed()).isFalse();
-
-        subject.destroy();
-
-        assertThat(subject.isDestroyed()).isTrue();
-    }
-
-    @Test
-    public void createAdView_shouldCallCreateAdViewOnRenderer() {
-        View newView = mock(View.class);
-        when(mockRenderer.createAdView(activity, mockParent))
-                .thenReturn(newView);
-
-        View view = subject.createAdView(activity, mockParent);
-
-        verify(mockRenderer).createAdView(activity, mockParent);
-        assertThat(view).isEqualTo(newView);
-    }
-
-    @Test
-    public void renderAdView_shouldCallRenderAdViewOnRenderer() {
-        subject.createAdView(activity, mockParent);
-
-        verify(mockRenderer).createAdView(activity, mockParent);
-    }
-
-    @Test
-    public void prepare_shouldCallPrepareOnBaseNativeAd() {
-        subject.prepare(mockView);
-
-        verify(mockBaseNativeAd).prepare(mockView);
-    }
-
-    @Test
-    public void prepare_whenDestroyed_shouldReturnFast() {
-        subject.destroy();
-        subject.prepare(mockView);
-
-        verify(mockBaseNativeAd, never()).prepare(mockView);
-    }
-
-    @Test
-    public void clear_shouldCallClearOnBaseNativeAd() {
-        subject.clear(mockView);
-        verify(mockBaseNativeAd).clear(mockView);
-    }
-
-    @Test
-    public void destroy_shouldCallIntoBaseNativeAdOnce() {
-        subject.destroy();
-        verify(mockBaseNativeAd).destroy();
-
-        reset(mockBaseNativeAd);
-
-        subject.destroy();
-        verifyZeroInteractions(mockBaseNativeAd);
-    }
-
-    @Test
-    public void recordImpression_shouldRecordImpressionsOnce() {
-        subject.recordImpression(mockView);
-        verify(mockRequestQueue).add(argThat(isUrl("moPubImpressionTrackerUrl")));
-        verify(mockRequestQueue).add(argThat(isUrl("impUrl")));
-        verify(mockEventListener).onImpression(mockView);
-
-        // reset state
-        reset(mockRequestQueue);
-
-        // verify impression tracking doesn't fire again
-        subject.recordImpression(mockView);
-        verifyZeroInteractions(mockRequestQueue);
-        verifyZeroInteractions(mockEventListener);
-    }
-
-    @Test
-    public void recordImpression_whenDestroyed_shouldReturnFast() {
-        subject.destroy();
-        subject.recordImpression(mockView);
-        verifyZeroInteractions(mockRequestQueue);
-        verifyZeroInteractions(mockEventListener);
-    }
-
-    @Test
-    public void handleClick_shouldTrackClicksOnce() {
-        subject.handleClick(mockView);
-        verify(mockRequestQueue).add(argThat(isUrl("moPubClickTrackerUrl")));
-        verify(mockRequestQueue).add(argThat(isUrl("clkUrl")));
-        verify(mockEventListener).onClick(mockView);
-
-        // reset state
-        reset(mockRequestQueue);
-
-        // verify click tracking doesn't fire again
-        subject.handleClick(mockView);
-        verifyZeroInteractions(mockRequestQueue);
-        verifyZeroInteractions(mockEventListener);
-    }
-
-    @Test
-    public void handleClick_whenDestroyed_shouldReturnFast() {
-        subject.destroy();
-        subject.handleClick(mockView);
-        verifyZeroInteractions(mockRequestQueue);
-        verifyZeroInteractions(mockEventListener);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
deleted file mode 100644
index 4404ab8c..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
+++ /dev/null
@@ -1,80 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.view.View;
-import android.view.ViewGroup;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class NativeAdViewHelperTest {
-    private Activity activity;
-    @Mock private View mockView;
-    @Mock private ViewGroup mockViewGroup;
-    @Mock private NativeAd mMockNativeAd1;
-    @Mock private NativeAd mMockNativeAd2;
-
-    @Before
-    public void setUp() throws Exception {
-        activity = Robolectric.buildActivity(Activity.class).create().get();
-        when(mMockNativeAd1.createAdView(any(Activity.class), any(ViewGroup.class)))
-                .thenReturn(mockView);
-        when(mMockNativeAd2.createAdView(any(Activity.class), any(ViewGroup.class)))
-                .thenReturn(mockView);
-        when(mMockNativeAd1.isDestroyed()).thenReturn(false);
-        when(mMockNativeAd2.isDestroyed()).thenReturn(false);
-    }
-
-    @Test
-    public void getAdView_shouldRenderView() throws Exception {
-        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1);
-
-        verify(mMockNativeAd1).createAdView(activity, mockViewGroup);
-        verify(mMockNativeAd1).renderAdView(mockView);
-    }
-
-    @Test
-    public void getAdView_withDestroyedNativeAd_shouldReturnEmptyAndGoneConvertView() throws Exception {
-        when(mMockNativeAd1.isDestroyed()).thenReturn(true);
-
-        View view = NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1);
-
-        assertThat(view).isNotEqualTo(mockView);
-        assertThat(view.getTag()).isEqualTo(NativeAdViewHelper.ViewType.EMPTY);
-        assertThat(view.getVisibility()).isEqualTo(View.GONE);
-    }
-
-    @Test
-    public void getAdView_shouldClearPreviousNativeAd() throws Exception {
-        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1);
-
-        // Second call should clear the first NativeAd
-        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd2);
-        verify(mMockNativeAd1).clear(mockView);
-
-        // Third call should clear the second NativeAd
-        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1);
-        verify(mMockNativeAd2).clear(mockView);
-    }
-
-    @Test
-    public void getAdView_shouldPrepareNativeAd() throws Exception {
-        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1);
-
-        verify(mMockNativeAd1).prepare(mockView);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeClickHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeClickHandlerTest.java
deleted file mode 100644
index 4de2593b..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeClickHandlerTest.java
+++ /dev/null
@@ -1,135 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.view.View;
-import android.widget.RelativeLayout;
-import android.widget.TextView;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.Utils;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowApplication;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class NativeClickHandlerTest {
-
-    private NativeClickHandler subject;
-    private Activity context;
-
-    private TextView titleView;
-    private RelativeLayout relativeLayout;
-    private RelativeLayout relativeLayout2;
-
-    @Mock private View mockView;
-    @Mock private ClickInterface mockClickInterface;
-    @Mock private SpinningProgressView mockSpinningProgressView;
-
-    @Before
-    public void setUp() {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        subject = new NativeClickHandler(context);
-
-        titleView = new TextView(context);
-        titleView.setId((int) Utils.generateUniqueId());
-
-        relativeLayout = new RelativeLayout(context);
-        relativeLayout.setId((int) Utils.generateUniqueId());
-        relativeLayout.addView(titleView);
-
-        relativeLayout2 = new RelativeLayout(context);
-        relativeLayout2.setId((int) Utils.generateUniqueId());
-        relativeLayout2.addView(relativeLayout);
-    }
-
-    @Test
-    public void setOnClickListener_shouldSetClickListenerOnViewHierarchy() {
-        subject.setOnClickListener(relativeLayout2, mockClickInterface);
-
-        titleView.callOnClick();
-        relativeLayout.callOnClick();
-        relativeLayout2.callOnClick();
-
-        verify(mockClickInterface).handleClick(titleView);
-        verify(mockClickInterface).handleClick(relativeLayout);
-        verify(mockClickInterface).handleClick(relativeLayout2);
-    }
-
-    @Test
-    public void clearOnClickListener_shouldClearClickListenerFromViewHierarchy() throws Exception {
-        subject.setOnClickListener(relativeLayout2, mockClickInterface);
-        subject.clearOnClickListener(relativeLayout2);
-
-        assertThat(titleView.hasOnClickListeners()).isFalse();
-        assertThat(relativeLayout.hasOnClickListeners()).isFalse();
-        assertThat(relativeLayout2.hasOnClickListeners()).isFalse();
-    }
-
-    @Test
-    public void handleClick_shouldShowSpinner_shouldRemoveSpinner_WhenSucceeded() {
-        Robolectric.getBackgroundThreadScheduler().pause();
-
-        subject.openClickDestinationUrl("https://www.mopub.com", mockView, mockSpinningProgressView);
-
-        verify(mockSpinningProgressView).addToRoot(mockView);
-
-        Robolectric.getBackgroundThreadScheduler().unPause();
-        verify(mockSpinningProgressView).removeFromRoot();
-    }
-
-    @Test
-    public void handleClick_shouldShowSpinner_shouldRemoveSpinner_WhenFailed() {
-        Robolectric.getBackgroundThreadScheduler().pause();
-
-        subject.openClickDestinationUrl("", mockView, mockSpinningProgressView);
-
-        verify(mockSpinningProgressView).addToRoot(mockView);
-        Robolectric.getBackgroundThreadScheduler().unPause();
-        verify(mockSpinningProgressView).removeFromRoot();
-    }
-
-    @Test
-    public void handleClick_shouldShowSpinnerOnceWhileClickIsResolving() {
-        Robolectric.getBackgroundThreadScheduler().pause();
-
-        subject.openClickDestinationUrl("https://www.mopub.com", mockView, mockSpinningProgressView);
-        subject.openClickDestinationUrl("https://www.mopub.com", mockView, mockSpinningProgressView);
-
-        // only is called once
-        verify(mockSpinningProgressView).addToRoot(mockView);
-
-        Robolectric.getBackgroundThreadScheduler().unPause();
-        verify(mockSpinningProgressView).removeFromRoot();
-    }
-
-    @Test
-    public void handleClick_withNullClickDestinationUrl_shouldNotThrowNPE_shouldDoNothing() throws Exception {
-        subject.openClickDestinationUrl(null, mockView, mockSpinningProgressView);
-
-        verifyNoMoreInteractions(mockSpinningProgressView);
-        assertThat(ShadowApplication.getInstance().peekNextStartedActivity()).isNull();
-    }
-
-    @Test
-    public void handleClick_withNullView_shouldNotShowSpinner() {
-        Robolectric.getBackgroundThreadScheduler().pause();
-
-        subject.openClickDestinationUrl("https://www.mopub.com", null, mockSpinningProgressView);
-
-        verify(mockSpinningProgressView, never()).addToRoot(mockView);
-        Robolectric.getBackgroundThreadScheduler().unPause();
-        verify(mockSpinningProgressView, never()).removeFromRoot();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeFullScreenVideoViewTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeFullScreenVideoViewTest.java
deleted file mode 100644
index 9b484696..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeFullScreenVideoViewTest.java
+++ /dev/null
@@ -1,500 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.res.Configuration;
-import android.graphics.Color;
-import android.graphics.Paint;
-import android.graphics.RectF;
-import android.graphics.SurfaceTexture;
-import android.graphics.drawable.GradientDrawable;
-import android.view.TextureView;
-import android.view.View;
-import android.widget.ImageView;
-import android.widget.ProgressBar;
-import android.widget.RelativeLayout;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.Dips;
-import com.mopub.common.util.Drawables;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.mobileads.VastVideoProgressBarWidget;
-import com.mopub.mobileads.resource.CloseButtonDrawable;
-import com.mopub.mobileads.resource.CtaButtonDrawable;
-import com.mopub.nativeads.NativeFullScreenVideoView.LoadingBackground;
-import com.mopub.nativeads.NativeFullScreenVideoView.Mode;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.Shadows;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowConfiguration;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class NativeFullScreenVideoViewTest {
-
-    private NativeFullScreenVideoView subject;
-    private Context context;
-
-    private final int screenWidthDp = 410;
-    private final int screenHeightDp = 730;
-    private int videoWidthLandscapePx;
-    private int videoHeightLandscapePx;
-    private int videoWidthPortraitPx;
-    private int videoHeightPortraitPx;
-
-    private TextureView spyVideoTexture;
-    private ImageView spyCachedImage;
-    private ProgressBar spyLoadingSpinner;
-    private ImageView spyBottomGradient;
-    private ImageView spyTopGradient;
-    private VastVideoProgressBarWidget spyVideoProgress;
-    private View spyOverlay;
-    private ImageView spyPlayButton;
-    private ImageView spyPrivacyInformationIcon;
-    private ImageView spyCtaButton;
-    private ImageView spyCloseControl;
-
-    @Mock TextureView.SurfaceTextureListener mockSurfaceTextureListener;
-    @Mock SurfaceTexture mockSurfaceTexture;
-    @Mock RectF mockRectF;
-    @Mock Paint mockPaint;
-    private ShadowConfiguration shadowConfiguration;
-
-    @Before
-    public void setUp() {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-
-        shadowConfiguration = Shadows.shadowOf(context.getResources().getConfiguration());
-        Configuration configuration = new Configuration();
-        configuration.screenWidthDp = screenWidthDp;
-        configuration.screenHeightDp = screenHeightDp;
-        shadowConfiguration.setTo(configuration);
-
-        videoWidthLandscapePx = Dips.dipsToIntPixels((float) screenWidthDp, context);
-        videoHeightLandscapePx = Dips.dipsToIntPixels((float) screenWidthDp * 9 / 16, context);
-        videoWidthPortraitPx = Dips.dipsToIntPixels((float) screenHeightDp, context);
-        videoHeightPortraitPx = Dips.dipsToIntPixels((float) screenHeightDp * 9 / 16, context);
-
-        spyCachedImage = spy(new ImageView(context));
-        spyVideoTexture = spy(new TextureView(context));
-        spyLoadingSpinner = spy(new ProgressBar(context));
-        spyBottomGradient = spy(new ImageView(context));
-        spyTopGradient = spy(new ImageView(context));
-        spyVideoProgress = spy(new VastVideoProgressBarWidget(context));
-        spyOverlay = spy(new View(context));
-        spyPlayButton = spy(new ImageView(context));
-        spyPrivacyInformationIcon = spy(new ImageView(context));
-        spyCtaButton = spy(new ImageView(context));
-        spyCloseControl = spy(new ImageView(context));
-
-        subject = new NativeFullScreenVideoView(context, Configuration.ORIENTATION_LANDSCAPE, "Learn More",
-                spyCachedImage,
-                spyVideoTexture, spyLoadingSpinner, spyBottomGradient, spyTopGradient,
-                spyVideoProgress, spyOverlay, spyPlayButton, spyPrivacyInformationIcon, spyCtaButton,
-                spyCloseControl);
-
-    }
-
-    @Test
-    public void constructor_shouldInitializeModeToLoading() throws Exception {
-        assertThat(subject.mMode).isEqualTo(Mode.LOADING);
-    }
-
-    @Test
-    public void constructor_shouldSetMeasurementsCorrectly() throws Exception {
-        assertThat(subject.mCtaWidthPx).isEqualTo(200);
-        assertThat(subject.mCtaHeightPx).isEqualTo(42);
-        assertThat(subject.mCtaMarginPx).isEqualTo(10);
-        assertThat(subject.mCloseControlSizePx).isEqualTo(50);
-        assertThat(subject.mClosePaddingPx).isEqualTo(8);
-        assertThat(subject.mPrivacyInformationIconSizePx).isEqualTo(44);
-        assertThat(subject.mPlayControlSizePx).isEqualTo(50);
-        assertThat(subject.mGradientStripHeightPx).isEqualTo(45);
-    }
-
-    @Test
-    public void constructor_shouldAddVideoTextureToLayout_shouldSetWidthAndHeight() throws Exception {
-        assertThat(subject.findViewById(spyVideoTexture.getId())).isEqualTo(spyVideoTexture);
-
-        RelativeLayout.LayoutParams layoutParams =
-                (RelativeLayout.LayoutParams) spyVideoTexture.getLayoutParams();
-        assertThat(layoutParams.width).isEqualTo(videoWidthLandscapePx);
-        assertThat(layoutParams.height).isEqualTo(videoHeightLandscapePx);
-        assertThat(layoutParams.getRules()[RelativeLayout.CENTER_IN_PARENT])
-                .isEqualTo(RelativeLayout.TRUE);
-    }
-
-    @Test
-    public void constructor_shouldAddLoadingSpinnerToLayout() throws Exception {
-        assertThat(subject.findViewById(spyLoadingSpinner.getId())).isEqualTo(spyLoadingSpinner);
-        assertThat(spyLoadingSpinner.isIndeterminate()).isTrue();
-        assertThat(spyLoadingSpinner.getParent()).isEqualTo(subject);
-
-        RelativeLayout.LayoutParams layoutParams =
-                (RelativeLayout.LayoutParams) spyLoadingSpinner.getLayoutParams();
-        assertThat(layoutParams.width).isEqualTo(subject.mPlayControlSizePx);
-        assertThat(layoutParams.height).isEqualTo(subject.mPlayControlSizePx);
-        assertThat(layoutParams.getRules()[RelativeLayout.CENTER_IN_PARENT])
-                .isEqualTo(RelativeLayout.TRUE);
-    }
-
-    @Test
-    public void constructor_shouldAddBottomGradientToLayout() throws Exception {
-        assertThat(subject.findViewById(spyBottomGradient.getId())).isEqualTo(spyBottomGradient);
-        GradientDrawable gradientDrawable = (GradientDrawable) spyBottomGradient.getDrawable();
-        assertThat(gradientDrawable.getOrientation())
-                .isEqualTo(GradientDrawable.Orientation.BOTTOM_TOP);
-        assertThat(spyBottomGradient.getParent()).isEqualTo(subject);
-
-        RelativeLayout.LayoutParams layoutParams =
-                (RelativeLayout.LayoutParams) spyBottomGradient.getLayoutParams();
-        assertThat(layoutParams.width).isEqualTo(RelativeLayout.LayoutParams.MATCH_PARENT);
-        assertThat(layoutParams.height).isEqualTo(subject.mGradientStripHeightPx);
-        assertThat(layoutParams.getRules()[RelativeLayout.ALIGN_BOTTOM])
-                .isEqualTo(spyVideoTexture.getId());
-    }
-
-    @Test
-    public void constructor_shouldAddTopGradientToLayout() throws Exception {
-        assertThat(subject.findViewById(spyTopGradient.getId())).isEqualTo(spyTopGradient);
-        GradientDrawable gradientDrawable = (GradientDrawable) spyTopGradient.getDrawable();
-        assertThat(gradientDrawable.getOrientation())
-                .isEqualTo(GradientDrawable.Orientation.TOP_BOTTOM);
-        assertThat(spyTopGradient.getParent()).isEqualTo(subject);
-
-        RelativeLayout.LayoutParams layoutParams =
-                (RelativeLayout.LayoutParams) spyTopGradient.getLayoutParams();
-        assertThat(layoutParams.width).isEqualTo(RelativeLayout.LayoutParams.MATCH_PARENT);
-        assertThat(layoutParams.height).isEqualTo(subject.mGradientStripHeightPx);
-        assertThat(layoutParams.getRules()[RelativeLayout.ALIGN_PARENT_TOP])
-                .isEqualTo(RelativeLayout.TRUE);
-    }
-
-    @Test
-    public void constructor_shouldAddVideoProgressToLayout() throws Exception {
-        assertThat(subject.findViewById(spyVideoProgress.getId())).isEqualTo(spyVideoProgress);
-        verify(spyVideoProgress).setAnchorId(spyVideoTexture.getId());
-        verify(spyVideoProgress).calibrateAndMakeVisible(1000, 0);
-    }
-
-    @Test
-    public void constructor_shouldAddOverlayToLayout() throws Exception {
-        assertThat(subject.findViewById(spyOverlay.getId())).isEqualTo(spyOverlay);
-        verify(spyOverlay).setBackgroundColor(0x88000000);
-
-        RelativeLayout.LayoutParams layoutParams =
-                (RelativeLayout.LayoutParams) spyOverlay.getLayoutParams();
-        assertThat(layoutParams.width).isEqualTo(RelativeLayout.LayoutParams.MATCH_PARENT);
-        assertThat(layoutParams.height).isEqualTo(RelativeLayout.LayoutParams.MATCH_PARENT);
-        assertThat(layoutParams.getRules()[RelativeLayout.CENTER_IN_PARENT])
-                .isEqualTo(RelativeLayout.TRUE);
-    }
-
-    @Test
-    public void constructor_shouldAddPlayButtonToLayout() throws Exception {
-        assertThat(subject.findViewById(spyOverlay.getId())).isEqualTo(spyOverlay);
-        verify(spyOverlay).setBackgroundColor(0x88000000);
-
-        RelativeLayout.LayoutParams layoutParams =
-                (RelativeLayout.LayoutParams) spyOverlay.getLayoutParams();
-        assertThat(layoutParams.width).isEqualTo(RelativeLayout.LayoutParams.MATCH_PARENT);
-        assertThat(layoutParams.height).isEqualTo(RelativeLayout.LayoutParams.MATCH_PARENT);
-        assertThat(layoutParams.getRules()[RelativeLayout.CENTER_IN_PARENT])
-                .isEqualTo(RelativeLayout.TRUE);
-    }
-
-    @Test
-    public void constructor_shouldAddPrivacyInformationIconToLayout() throws Exception {
-        assertThat(subject.findViewById(spyPrivacyInformationIcon.getId())).isEqualTo(
-                spyPrivacyInformationIcon);
-        verify(spyPrivacyInformationIcon).setImageDrawable(
-                Drawables.NATIVE_PRIVACY_INFORMATION_ICON.createDrawable(context));
-        assertThat(spyPrivacyInformationIcon.getPaddingLeft()).isEqualTo(subject.mClosePaddingPx);
-        assertThat(spyPrivacyInformationIcon.getPaddingTop()).isEqualTo(subject.mClosePaddingPx);
-        assertThat(spyPrivacyInformationIcon.getPaddingRight()).isEqualTo(
-                subject.mClosePaddingPx * 2);
-        assertThat(spyPrivacyInformationIcon.getPaddingBottom()).isEqualTo(
-                subject.mClosePaddingPx * 2);
-
-        RelativeLayout.LayoutParams layoutParams =
-                (RelativeLayout.LayoutParams) spyPrivacyInformationIcon.getLayoutParams();
-        assertThat(layoutParams.width).isEqualTo(subject.mPrivacyInformationIconSizePx);
-        assertThat(layoutParams.height).isEqualTo(subject.mPrivacyInformationIconSizePx);
-        assertThat(layoutParams.getRules()[RelativeLayout.ALIGN_TOP])
-                .isEqualTo(spyVideoTexture.getId());
-        assertThat(layoutParams.getRules()[RelativeLayout.ALIGN_LEFT])
-                .isEqualTo(spyVideoTexture.getId());
-    }
-
-    @Test
-    public void constructor_shouldAddCtaButtonToLayout() throws Exception {
-        assertThat(subject.findViewById(spyCtaButton.getId())).isEqualTo(spyCtaButton);
-        CtaButtonDrawable ctaButtonDrawable = (CtaButtonDrawable) spyCtaButton.getDrawable();
-        assertThat(ctaButtonDrawable.getCtaText()).isEqualTo("Learn More");
-
-        RelativeLayout.LayoutParams layoutParams =
-                (RelativeLayout.LayoutParams) spyCtaButton.getLayoutParams();
-        assertThat(layoutParams.leftMargin).isEqualTo(subject.mCtaMarginPx);
-        assertThat(layoutParams.topMargin).isEqualTo(subject.mCtaMarginPx);
-        assertThat(layoutParams.rightMargin).isEqualTo(subject.mCtaMarginPx);
-        assertThat(layoutParams.bottomMargin).isEqualTo(subject.mCtaMarginPx);
-        assertThat(layoutParams.width).isEqualTo(subject.mCtaWidthPx);
-        assertThat(layoutParams.height).isEqualTo(subject.mCtaHeightPx);
-        assertThat(layoutParams.getRules()[RelativeLayout.ABOVE])
-                .isEqualTo(spyVideoProgress.getId());
-        assertThat(layoutParams.getRules()[RelativeLayout.ALIGN_PARENT_RIGHT])
-                .isEqualTo(RelativeLayout.TRUE);
-    }
-
-    @Test
-    public void constructor_shouldAddCloseControlToLayout() throws Exception {
-        assertThat(subject.findViewById(spyCloseControl.getId())).isEqualTo(spyCloseControl);
-        verify(spyCloseControl).setImageDrawable(any(CloseButtonDrawable.class));
-        assertThat(spyCloseControl.getPaddingLeft()).isEqualTo(subject.mClosePaddingPx * 3);
-        assertThat(spyCloseControl.getPaddingTop()).isEqualTo(subject.mClosePaddingPx);
-        assertThat(spyCloseControl.getPaddingRight()).isEqualTo(subject.mClosePaddingPx);
-        assertThat(spyCloseControl.getPaddingBottom()).isEqualTo(subject.mClosePaddingPx * 3);
-
-                RelativeLayout.LayoutParams layoutParams =
-                        (RelativeLayout.LayoutParams) spyCloseControl.getLayoutParams();
-        assertThat(layoutParams.width).isEqualTo(subject.mCloseControlSizePx);
-        assertThat(layoutParams.height).isEqualTo(subject.mCloseControlSizePx);
-        assertThat(layoutParams.getRules()[RelativeLayout.ALIGN_TOP])
-                .isEqualTo(spyVideoTexture.getId());
-        assertThat(layoutParams.getRules()[RelativeLayout.ALIGN_RIGHT])
-                .isEqualTo(spyVideoTexture.getId());
-    }
-
-    @Test
-    public void resetProgress_shouldCallVideoProgressReset() throws Exception {
-        subject.resetProgress();
-        verify(spyVideoProgress).reset();
-    }
-
-    @Test
-    public void setMode_withModeLoading_shouldUpdateVisibilityAppropriately() throws Exception {
-        // We init in loading state, so we need to get out of loading.
-        subject.setMode(Mode.PAUSED);
-        // Reset our spies.
-        reset(spyVideoTexture, spyLoadingSpinner, spyBottomGradient, spyTopGradient,
-                spyVideoProgress, spyOverlay, spyPlayButton, spyPrivacyInformationIcon, spyCtaButton,
-                spyCloseControl);
-        subject.setMode(Mode.LOADING);
-        verify(spyLoadingSpinner).setVisibility(View.VISIBLE);
-        verify(spyVideoProgress).setVisibility(View.INVISIBLE);
-        verify(spyPlayButton).setVisibility(View.INVISIBLE);
-        verify(spyOverlay).setVisibility(View.INVISIBLE);
-    }
-
-    @Test
-    public void setMode_withModePlaying_shouldUpdateVisibilityAppropriately() throws Exception {
-        // Reset our spies because the constructor calls updateViewState
-        reset(spyVideoTexture, spyLoadingSpinner, spyBottomGradient, spyTopGradient,
-                spyVideoProgress, spyOverlay, spyPlayButton, spyPrivacyInformationIcon, spyCtaButton,
-                spyCloseControl);
-        subject.setMode(Mode.PLAYING);
-        verify(spyLoadingSpinner).setVisibility(View.INVISIBLE);
-        verify(spyVideoProgress).setVisibility(View.VISIBLE);
-        verify(spyPlayButton).setVisibility(View.INVISIBLE);
-        verify(spyOverlay).setVisibility(View.INVISIBLE);
-    }
-
-    @Test
-    public void setMode_withModePaused_shouldUpdateVisibilityAppropriately() throws Exception {
-        // Reset our spies because the constructor calls updateViewState
-        reset(spyVideoTexture, spyLoadingSpinner, spyBottomGradient, spyTopGradient,
-                spyVideoProgress, spyOverlay, spyPlayButton, spyPrivacyInformationIcon, spyCtaButton,
-                spyCloseControl);
-        subject.setMode(Mode.PAUSED);
-        verify(spyLoadingSpinner).setVisibility(View.INVISIBLE);
-        verify(spyVideoProgress).setVisibility(View.VISIBLE);
-        verify(spyPlayButton).setVisibility(View.VISIBLE);
-        verify(spyOverlay).setVisibility(View.VISIBLE);
-    }
-
-    @Test
-    public void setMode_withModeFinished_shouldUpdateVisibilityAppropriately() throws Exception {
-        // Reset our spies because the constructor calls updateViewState
-        reset(spyVideoTexture, spyLoadingSpinner, spyBottomGradient, spyTopGradient,
-                spyVideoProgress, spyOverlay, spyPlayButton, spyPrivacyInformationIcon, spyCtaButton,
-                spyCloseControl);
-        subject.setMode(Mode.FINISHED);
-        verify(spyLoadingSpinner).setVisibility(View.INVISIBLE);
-        verify(spyVideoProgress).setVisibility(View.INVISIBLE);
-        verify(spyPlayButton).setVisibility(View.VISIBLE);
-        verify(spyOverlay).setVisibility(View.VISIBLE);
-    }
-
-    @Test
-    public void setOrientation_withLandscape_shouldSetWidthAndHeightOfVideoTextureAppropriately() throws Exception {
-        Configuration configuration = new Configuration();
-        configuration.screenWidthDp = screenWidthDp;
-        configuration.screenHeightDp = screenHeightDp;
-        shadowConfiguration.setTo(configuration);
-
-        subject.setOrientation(Configuration.ORIENTATION_LANDSCAPE);
-
-        RelativeLayout.LayoutParams layoutParams =
-                (RelativeLayout.LayoutParams) spyVideoTexture.getLayoutParams();
-        assertThat(layoutParams.width).isEqualTo(videoWidthLandscapePx);
-        assertThat(layoutParams.height).isEqualTo(videoHeightLandscapePx);
-        assertThat(layoutParams.getRules()[RelativeLayout.CENTER_IN_PARENT])
-                .isEqualTo(RelativeLayout.TRUE);
-    }
-
-    @Test
-    public void setOrientation_withPortrait_shouldSetWidthAndHeightOfVideoTextureAppropriately() throws Exception {
-        Configuration configuration = new Configuration();
-        configuration.screenWidthDp = screenHeightDp;
-        configuration.screenHeightDp = screenWidthDp;
-        shadowConfiguration.setTo(configuration);
-
-        subject.setOrientation(Configuration.ORIENTATION_PORTRAIT);
-
-        RelativeLayout.LayoutParams layoutParams =
-                (RelativeLayout.LayoutParams) spyVideoTexture.getLayoutParams();
-        assertThat(layoutParams.width).isEqualTo(videoWidthPortraitPx);
-        assertThat(layoutParams.height).isEqualTo(videoHeightPortraitPx);
-        assertThat(layoutParams.getRules()[RelativeLayout.CENTER_IN_PARENT])
-                .isEqualTo(RelativeLayout.TRUE);
-    }
-
-    @Test
-    public void setOrientation_withLandscape_shouldSetControlLayoutsAppropriately() throws Exception {
-        subject.setOrientation(Configuration.ORIENTATION_LANDSCAPE);
-
-        RelativeLayout.LayoutParams layoutParams =
-                (RelativeLayout.LayoutParams) spyPrivacyInformationIcon.getLayoutParams();
-        assertThat(layoutParams.width).isEqualTo(subject.mPrivacyInformationIconSizePx);
-        assertThat(layoutParams.height).isEqualTo(subject.mPrivacyInformationIconSizePx);
-        assertThat(layoutParams.getRules()[RelativeLayout.ALIGN_TOP])
-                .isEqualTo(spyVideoTexture.getId());
-        assertThat(layoutParams.getRules()[RelativeLayout.ALIGN_LEFT])
-                .isEqualTo(spyVideoTexture.getId());
-
-        assertThat(subject.findViewById(spyCtaButton.getId())).isEqualTo(spyCtaButton);
-        CtaButtonDrawable ctaButtonDrawable = (CtaButtonDrawable) spyCtaButton.getDrawable();
-        assertThat(ctaButtonDrawable.getCtaText()).isEqualTo("Learn More");
-
-        layoutParams = (RelativeLayout.LayoutParams) spyCtaButton.getLayoutParams();
-        assertThat(layoutParams.leftMargin).isEqualTo(subject.mCtaMarginPx);
-        assertThat(layoutParams.topMargin).isEqualTo(subject.mCtaMarginPx);
-        assertThat(layoutParams.rightMargin).isEqualTo(subject.mCtaMarginPx);
-        assertThat(layoutParams.bottomMargin).isEqualTo(subject.mCtaMarginPx);
-        assertThat(layoutParams.width).isEqualTo(subject.mCtaWidthPx);
-        assertThat(layoutParams.height).isEqualTo(subject.mCtaHeightPx);
-        assertThat(layoutParams.getRules()[RelativeLayout.ABOVE])
-                .isEqualTo(spyVideoProgress.getId());
-        assertThat(layoutParams.getRules()[RelativeLayout.ALIGN_PARENT_RIGHT])
-                .isEqualTo(RelativeLayout.TRUE);
-
-        layoutParams = (RelativeLayout.LayoutParams) spyCloseControl.getLayoutParams();
-        assertThat(layoutParams.width).isEqualTo(subject.mCloseControlSizePx);
-        assertThat(layoutParams.height).isEqualTo(subject.mCloseControlSizePx);
-        assertThat(layoutParams.getRules()[RelativeLayout.ALIGN_TOP])
-                .isEqualTo(spyVideoTexture.getId());
-        assertThat(layoutParams.getRules()[RelativeLayout.ALIGN_RIGHT])
-                .isEqualTo(spyVideoTexture.getId());
-    }
-
-    @Test
-    public void setOrientation_withPortrait_shouldSetControlLayoutsAppropriately() throws Exception {
-        subject.setOrientation(Configuration.ORIENTATION_PORTRAIT);
-
-        RelativeLayout.LayoutParams layoutParams =
-                (RelativeLayout.LayoutParams) spyPrivacyInformationIcon.getLayoutParams();
-        assertThat(layoutParams.width).isEqualTo(subject.mPrivacyInformationIconSizePx);
-        assertThat(layoutParams.height).isEqualTo(subject.mPrivacyInformationIconSizePx);
-        assertThat(layoutParams.getRules()[RelativeLayout.ALIGN_PARENT_TOP])
-                .isEqualTo(RelativeLayout.TRUE);
-        assertThat(layoutParams.getRules()[RelativeLayout.ALIGN_PARENT_LEFT])
-                .isEqualTo(RelativeLayout.TRUE);
-
-        layoutParams = (RelativeLayout.LayoutParams) spyCtaButton.getLayoutParams();
-        assertThat(layoutParams.leftMargin).isEqualTo(subject.mCtaMarginPx);
-        assertThat(layoutParams.topMargin).isEqualTo(subject.mCtaMarginPx);
-        assertThat(layoutParams.rightMargin).isEqualTo(subject.mCtaMarginPx);
-        assertThat(layoutParams.bottomMargin).isEqualTo(subject.mCtaMarginPx);
-        assertThat(layoutParams.width).isEqualTo(subject.mCtaWidthPx);
-        assertThat(layoutParams.height).isEqualTo(subject.mCtaHeightPx);
-        assertThat(layoutParams.getRules()[RelativeLayout.BELOW])
-                .isEqualTo(spyVideoTexture.getId());
-        assertThat(layoutParams.getRules()[RelativeLayout.CENTER_HORIZONTAL])
-                .isEqualTo(RelativeLayout.TRUE);
-
-        layoutParams = (RelativeLayout.LayoutParams) spyCloseControl.getLayoutParams();
-        assertThat(layoutParams.width).isEqualTo(subject.mCloseControlSizePx);
-        assertThat(layoutParams.height).isEqualTo(subject.mCloseControlSizePx);
-        assertThat(layoutParams.getRules()[RelativeLayout.ALIGN_PARENT_TOP])
-                .isEqualTo(RelativeLayout.TRUE);
-        assertThat(layoutParams.getRules()[RelativeLayout.ALIGN_PARENT_RIGHT])
-                .isEqualTo(RelativeLayout.TRUE);
-    }
-
-    @Test
-    public void setSurfaceTextureListener_withNullSurfaceTexture_shouldSetSurfaceTexture_shouldNotCallListener() throws Exception {
-        when(spyVideoTexture.getSurfaceTexture()).thenReturn(null);
-
-        subject.setSurfaceTextureListener(mockSurfaceTextureListener);
-
-        verify(spyVideoTexture).setSurfaceTextureListener(mockSurfaceTextureListener);
-        verify(mockSurfaceTextureListener, never()).
-                onSurfaceTextureAvailable(any(SurfaceTexture.class), anyInt(), anyInt());
-    }
-
-    @Test
-    public void setSurfaceTextureListener_withNonNullSurfaceTexture_shouldSetSurfaceTexture_shouldCallListener() throws Exception {
-        when(spyVideoTexture.getSurfaceTexture()).thenReturn(mockSurfaceTexture);
-        when(spyVideoTexture.getWidth()).thenReturn(videoWidthLandscapePx);
-        when(spyVideoTexture.getHeight()).thenReturn(videoHeightLandscapePx);
-
-        subject.setSurfaceTextureListener(mockSurfaceTextureListener);
-
-        verify(spyVideoTexture).setSurfaceTextureListener(mockSurfaceTextureListener);
-        verify(mockSurfaceTextureListener).
-                onSurfaceTextureAvailable(mockSurfaceTexture, videoWidthLandscapePx,
-                        videoHeightLandscapePx);
-    }
-
-    @Test
-    public void updateProgress_shouldUpdateVideoProgress() throws Exception {
-        subject.updateProgress(100);
-        verify(spyVideoProgress).updateProgress(100);
-    }
-
-    @Test
-    public void LoadingBackground_constructor_shouldInitializePaint() throws Exception {
-        new LoadingBackground(context, mockRectF, mockPaint);
-
-        verify(mockPaint).setColor(Color.BLACK);
-        verify(mockPaint).setAlpha(128);
-        verify(mockPaint).setAntiAlias(true);
-    }
-
-    @Test
-    public void LoadingBackground_constructor_shouldInitializeMeasurements() throws Exception {
-        LoadingBackground loadingBackground = new LoadingBackground(context, mockRectF, mockPaint);
-
-        assertThat(loadingBackground.mCornerRadiusPx).isEqualTo(5);
-    }
-
-    @Test
-    public void LoadingBackground_getOpacity_shouldReturn0() throws Exception {
-        assertThat(new LoadingBackground(context, mockRectF, mockPaint).getOpacity())
-                .isEqualTo(0);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
deleted file mode 100644
index b7f167b6..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
+++ /dev/null
@@ -1,378 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.res.Resources;
-import android.graphics.Point;
-import android.location.Location;
-import android.location.LocationManager;
-import android.net.Uri;
-import android.os.Build;
-import android.telephony.TelephonyManager;
-import android.text.TextUtils;
-import android.util.DisplayMetrics;
-import android.view.Display;
-import android.view.WindowManager;
-
-import com.mopub.common.MoPub;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
-import org.robolectric.Shadows;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowLocationManager;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.EnumSet;
-import java.util.List;
-
-import static android.Manifest.permission.ACCESS_FINE_LOCATION;
-import static android.Manifest.permission.ACCESS_NETWORK_STATE;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class, shadows = {MoPubShadowTelephonyManager.class})
-public class NativeUrlGeneratorTest {
-    public static final String AD_UNIT_ID = "1234";
-    private static final int TEST_SCREEN_WIDTH = 999;
-    private static final int TEST_SCREEN_HEIGHT = 888;
-    private static final float TEST_DENSITY = 1.0f;
-    private Activity context;
-    private NativeUrlGenerator subject;
-    private MoPubShadowTelephonyManager shadowTelephonyManager;
-
-    @Before
-    public void setup() {
-        context = spy(Robolectric.buildActivity(Activity.class).create().get());
-        Shadows.shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
-        Shadows.shadowOf(context).grantPermissions(ACCESS_FINE_LOCATION);
-        when(context.getPackageName()).thenReturn("testBundle");
-        shadowTelephonyManager = (MoPubShadowTelephonyManager)
-                Shadows.shadowOf((TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE));
-
-        // Set the expected screen dimensions to arbitrary numbers
-        final Resources spyResources = spy(context.getResources());
-        final DisplayMetrics mockDisplayMetrics = mock(DisplayMetrics.class);
-        mockDisplayMetrics.widthPixels = TEST_SCREEN_WIDTH;
-        mockDisplayMetrics.heightPixels = TEST_SCREEN_HEIGHT;
-        mockDisplayMetrics.density = TEST_DENSITY;
-        when(spyResources.getDisplayMetrics()).thenReturn(mockDisplayMetrics);
-        when(context.getResources()).thenReturn(spyResources);
-
-        // Only do this on Android 17+ because getRealSize doesn't exist before then.
-        // This is the default pathway.
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
-            final WindowManager mockWindowManager = mock(WindowManager.class);
-            final Display mockDisplay = mock(Display.class);
-            doAnswer(new Answer() {
-                @Override
-                public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {
-                    final Point point = (Point) invocationOnMock.getArguments()[0];
-                    point.x = TEST_SCREEN_WIDTH;
-                    point.y = TEST_SCREEN_HEIGHT;
-                    return null;
-                }
-            }).when(mockDisplay).getRealSize(any(Point.class));
-            when(mockWindowManager.getDefaultDisplay()).thenReturn(mockDisplay);
-            final Context spyApplicationContext = spy(context.getApplicationContext());
-            when(spyApplicationContext.getSystemService(Context.WINDOW_SERVICE)).thenReturn(mockWindowManager);
-            when(context.getApplicationContext()).thenReturn(spyApplicationContext);
-        }
-    }
-
-    @Test
-    public void generateUrlString_shouldIncludeDesiredAssetIfSet() throws Exception {
-        EnumSet<RequestParameters.NativeAdAsset> assetsSet = EnumSet.of(RequestParameters.NativeAdAsset.TITLE);
-        RequestParameters requestParameters = new RequestParameters.Builder().desiredAssets(assetsSet).build();
-
-        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID).withRequest(requestParameters);
-
-        String requestString = generateMinimumUrlString();
-        List<String> desiredAssets = getDesiredAssetsListFromRequestUrlString(requestString);
-
-        assertThat(desiredAssets.size()).isEqualTo(1);
-        assertThat(desiredAssets).contains("title");
-    }
-
-    @Test
-    public void generateUrlString_shouldIncludeDesiredAssetsIfSet() throws Exception {
-        EnumSet<RequestParameters.NativeAdAsset> assetsSet = EnumSet.of(RequestParameters.NativeAdAsset.TITLE, RequestParameters.NativeAdAsset.TEXT, RequestParameters.NativeAdAsset.ICON_IMAGE);
-        RequestParameters requestParameters = new RequestParameters.Builder().desiredAssets(assetsSet).build();
-
-        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID).withRequest(requestParameters);
-
-        String requestString = generateMinimumUrlString();
-        List<String> desiredAssets = getDesiredAssetsListFromRequestUrlString(requestString);
-
-        assertThat(desiredAssets.size()).isEqualTo(3);
-        assertThat(desiredAssets).contains("title", "text", "iconimage");
-    }
-
-    @Test
-    public void generateUrlString_shouldNotIncludeDesiredAssetsIfNotSet() throws Exception {
-        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
-
-        String requestString = generateMinimumUrlString();
-        List<String> desiredAssets = getDesiredAssetsListFromRequestUrlString(requestString);
-
-        assertThat(desiredAssets.size()).isEqualTo(0);
-    }
-
-    @Test
-    public void generateUrlString_shouldNotIncludeDesiredAssetsIfNoAssetsAreSet() throws Exception {
-        EnumSet<RequestParameters.NativeAdAsset> assetsSet = EnumSet.noneOf(RequestParameters.NativeAdAsset.class);
-        RequestParameters requestParameters = new RequestParameters.Builder().desiredAssets(assetsSet).build();
-
-        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID).withRequest(requestParameters);
-
-        String requestString = generateMinimumUrlString();
-        List<String> desiredAssets = getDesiredAssetsListFromRequestUrlString(requestString);
-
-        assertThat(desiredAssets.size()).isEqualTo(0);
-    }
-
-    @Test
-    public void generateUrlString_needsButDoesNotHaveReadPhoneState_shouldNotContainOperatorName() {
-        shadowTelephonyManager.setNeedsReadPhoneState(true);
-        shadowTelephonyManager.setReadPhoneStatePermission(false);
-        shadowTelephonyManager.setNetworkOperatorName("TEST_CARRIER");
-
-        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
-        String requestString = generateMinimumUrlString();
-
-        assertThat(getNetworkOperatorNameFromRequestUrl(requestString)).isNullOrEmpty();
-    }
-
-    @Test
-    public void generateUrlString_needsAndHasReadPhoneState_shouldContainOperatorName() {
-        shadowTelephonyManager.setNeedsReadPhoneState(true);
-        shadowTelephonyManager.setReadPhoneStatePermission(true);
-        shadowTelephonyManager.setNetworkOperatorName("TEST_CARRIER");
-
-        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
-        String requestString = generateMinimumUrlString();
-
-        assertThat(getNetworkOperatorNameFromRequestUrl(requestString)).isEqualTo("TEST_CARRIER");
-    }
-
-    @Test
-    public void generateUrlString_doesNotNeedReadPhoneState_shouldContainOperatorName() {
-        shadowTelephonyManager.setNeedsReadPhoneState(false);
-        shadowTelephonyManager.setReadPhoneStatePermission(false);
-        shadowTelephonyManager.setNetworkOperatorName("TEST_CARRIER");
-
-        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
-        String requestString = generateMinimumUrlString();
-
-        assertThat(getNetworkOperatorNameFromRequestUrl(requestString)).isEqualTo("TEST_CARRIER");
-    }
-
-    @Test
-    public void generateUrlString_whenLocationServiceGpsProviderHasMostRecentLocation_shouldUseLocationServiceValue() {
-        Location locationFromDeveloper = new Location("");
-        locationFromDeveloper.setLatitude(42);
-        locationFromDeveloper.setLongitude(-42);
-        locationFromDeveloper.setAccuracy(3.5f);
-        locationFromDeveloper.setTime(1000);
-
-        // Mock out the LocationManager's last known location to be more recent than the
-        // developer-supplied location.
-        ShadowLocationManager shadowLocationManager = Shadows.shadowOf(
-                (LocationManager) RuntimeEnvironment.application.getSystemService(Context.LOCATION_SERVICE));
-        Location locationFromSdk = new Location("");
-        locationFromSdk.setLatitude(37);
-        locationFromSdk.setLongitude(-122);
-        locationFromSdk.setAccuracy(5.0f);
-        locationFromSdk.setTime(System.currentTimeMillis() - 555555);
-        shadowLocationManager.setLastKnownLocation(LocationManager.GPS_PROVIDER, locationFromSdk);
-
-        RequestParameters requestParameters = new RequestParameters.Builder()
-                .location(locationFromDeveloper)
-                .build();
-        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
-        String adUrl = subject.withRequest(requestParameters)
-                .generateUrlString("ads.mopub.com");
-        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isEqualTo("37.0,-122.0");
-        assertThat(getParameterFromRequestUrl(adUrl, "lla")).isEqualTo("5");
-        assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEqualTo("1");
-        // Only test to the full second (as there may be small differences)
-        assertThat(getParameterFromRequestUrl(adUrl, "llf")).startsWith("555");
-        assertThat(getParameterFromRequestUrl(adUrl, "llf").length()).isEqualTo(6);
-    }
-
-    @Test
-    public void generateUrlString_whenDeveloperSuppliesMoreRecentLocationThanLocationService_shouldUseDeveloperSuppliedLocation() {
-        Location locationFromDeveloper = new Location("");
-        locationFromDeveloper.setLatitude(42);
-        locationFromDeveloper.setLongitude(-42);
-        locationFromDeveloper.setAccuracy(3.5f);
-        locationFromDeveloper.setTime(System.currentTimeMillis() - 777777);
-
-        ShadowLocationManager shadowLocationManager = Shadows.shadowOf(
-                (LocationManager) RuntimeEnvironment.application.getSystemService(Context.LOCATION_SERVICE));
-
-        // Mock out the LocationManager's last known location to be older than the
-        // developer-supplied location.
-        Location olderLocation = new Location("");
-        olderLocation.setLatitude(40);
-        olderLocation.setLongitude(-105);
-        olderLocation.setAccuracy(8.0f);
-        olderLocation.setTime(System.currentTimeMillis() - 888888);
-        shadowLocationManager.setLastKnownLocation(LocationManager.GPS_PROVIDER, olderLocation);
-
-        RequestParameters requestParameters = new RequestParameters.Builder()
-                .location(locationFromDeveloper)
-                .build();
-        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
-        String adUrl = subject.withRequest(requestParameters)
-                .generateUrlString("ads.mopub.com");
-        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isEqualTo("42.0,-42.0");
-        assertThat(getParameterFromRequestUrl(adUrl, "lla")).isEqualTo("3");
-        assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEmpty();
-        // Only test to the full second (as there may be small differences)
-        assertThat(getParameterFromRequestUrl(adUrl, "llf")).startsWith("777");
-        assertThat(getParameterFromRequestUrl(adUrl, "llf").length()).isEqualTo(6);
-    }
-
-    @Test
-    public void generateUrlString_whenLocationServiceNetworkProviderHasMostRecentLocation_shouldUseLocationServiceValue() {
-        Location locationFromDeveloper = new Location("");
-        locationFromDeveloper.setLatitude(42);
-        locationFromDeveloper.setLongitude(-42);
-        locationFromDeveloper.setAccuracy(3.5f);
-        locationFromDeveloper.setTime(1000);
-
-        // Mock out the LocationManager's last known location to be more recent than the
-        // developer-supplied location.
-        ShadowLocationManager shadowLocationManager = Shadows.shadowOf(
-                (LocationManager) RuntimeEnvironment.application.getSystemService(Context.LOCATION_SERVICE));
-        Location locationFromSdk = new Location("");
-        locationFromSdk.setLatitude(38);
-        locationFromSdk.setLongitude(-123);
-        locationFromSdk.setAccuracy(5.0f);
-        locationFromSdk.setTime(System.currentTimeMillis() - 123456);
-        shadowLocationManager.setLastKnownLocation(LocationManager.NETWORK_PROVIDER,
-                locationFromSdk);
-
-        RequestParameters requestParameters = new RequestParameters.Builder()
-                .location(locationFromDeveloper)
-                .build();
-        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
-        String adUrl = subject.withRequest(requestParameters)
-                .generateUrlString("ads.mopub.com");
-        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isEqualTo("38.0,-123.0");
-        assertThat(getParameterFromRequestUrl(adUrl, "lla")).isEqualTo("5");
-        assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEqualTo("1");
-        // Only test to the full second (as there may be small differences)
-        assertThat(getParameterFromRequestUrl(adUrl, "llf")).startsWith("123");
-        assertThat(getParameterFromRequestUrl(adUrl, "llf").length()).isEqualTo(6);
-    }
-
-    @Test
-    public void generateUrlString_withOnlyAdUnitSet_shouldReturnMinimumUrl() {
-        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
-        final String adUrl = generateMinimumUrlString();
-
-        assertThat(adUrl).isEqualTo(
-                "http://ads.mopub.com/m/ad?id=" +
-                        AD_UNIT_ID +
-                        "&nsv=" + Uri.encode(MoPub.SDK_VERSION) +
-                        "&dn=unknown%2Cunknown%2Cunknown" +
-                        "&bundle=testBundle" +
-                        "&z=-0700" +
-                        "&o=u" +
-                        "&w=" +
-                        TEST_SCREEN_WIDTH +
-                        "&h=" +
-                        TEST_SCREEN_HEIGHT +
-                        "&sc_a=" +
-                        TEST_DENSITY +
-                        "&ct=3&av=" + BuildConfig.VERSION_NAME +
-                        "&udid=mp_tmpl_advertising_id&dnt=mp_tmpl_do_not_track");
-    }
-
-    @Test
-    public void enableLocation_shouldIncludeLocationInUrl() {
-        MoPub.setLocationAwareness(MoPub.LocationAwareness.NORMAL);
-        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
-
-        String requestString = generateMinimumUrlString();
-        assertThat(getParameterFromRequestUrl(requestString, "ll")).isNotNull();
-    }
-
-    @Test
-    public void disableLocation_shouldNotIncludeLocationInUrl() {
-        MoPub.setLocationAwareness(MoPub.LocationAwareness.DISABLED);
-        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
-
-        String requestString = generateMinimumUrlString();
-        assertThat(getParameterFromRequestUrl(requestString, "ll")).isNullOrEmpty();
-    }
-
-    @Test
-    public void disableLocationCollection_whenLocationServiceHasMostRecentLocation_shouldNotIncludeLocationInUrl() {
-        MoPub.setLocationAwareness(MoPub.LocationAwareness.DISABLED);
-        subject = new NativeUrlGenerator(context);
-
-        // Mock out the LocationManager's last known location.
-        ShadowLocationManager shadowLocationManager = Shadows.shadowOf(
-                (LocationManager) RuntimeEnvironment.application.getSystemService(Context.LOCATION_SERVICE));
-        Location locationFromSdk = new Location("");
-        locationFromSdk.setLatitude(37);
-        locationFromSdk.setLongitude(-122);
-        locationFromSdk.setAccuracy(5.0f);
-        locationFromSdk.setTime(2000);
-        shadowLocationManager.setLastKnownLocation(LocationManager.GPS_PROVIDER, locationFromSdk);
-
-        String requestString = generateMinimumUrlString();
-        assertThat(getParameterFromRequestUrl(requestString, "ll")).isNullOrEmpty();
-    }
-
-    private List<String> getDesiredAssetsListFromRequestUrlString(String requestString) {
-        Uri requestUri = Uri.parse(requestString);
-
-        String desiredAssetsString = requestUri.getQueryParameter("assets");
-        return (desiredAssetsString == null) ? new ArrayList<String>() : Arrays.asList(desiredAssetsString.split(","));
-    }
-
-    private String getNetworkOperatorNameFromRequestUrl(String requestString) {
-        Uri requestUri = Uri.parse(requestString);
-
-        String networkOperatorName = requestUri.getQueryParameter("cn");
-
-        if (TextUtils.isEmpty(networkOperatorName)) {
-            return "";
-        }
-
-        return networkOperatorName;
-    }
-
-    private String getParameterFromRequestUrl(String requestString, String key) {
-        Uri requestUri = Uri.parse(requestString);
-        String parameter = requestUri.getQueryParameter(key);
-
-        if (TextUtils.isEmpty(parameter)) {
-            return "";
-        }
-
-        return parameter;
-    }
-
-    private String generateMinimumUrlString() {
-        return subject.generateUrlString("ads.mopub.com");
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoControllerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoControllerTest.java
deleted file mode 100644
index 33234327..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoControllerTest.java
+++ /dev/null
@@ -1,777 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.graphics.Bitmap;
-import android.graphics.SurfaceTexture;
-import android.graphics.drawable.BitmapDrawable;
-import android.media.AudioManager;
-import android.os.Handler;
-import android.view.Surface;
-import android.view.TextureView;
-
-import com.google.android.exoplayer.ExoPlaybackException;
-import com.google.android.exoplayer.ExoPlayer;
-import com.google.android.exoplayer.MediaCodecAudioTrackRenderer;
-import com.google.android.exoplayer.MediaCodecVideoTrackRenderer;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.mobileads.VastTracker;
-import com.mopub.mobileads.VastVideoConfig;
-import com.mopub.nativeads.NativeVideoController.ExoPlayerFactory;
-import com.mopub.nativeads.NativeVideoController.Listener;
-import com.mopub.nativeads.NativeVideoController.NativeVideoProgressRunnable;
-import com.mopub.nativeads.NativeVideoController.NativeVideoProgressRunnable.ProgressListener;
-import com.mopub.nativeads.NativeVideoController.VisibilityTrackingEvent;
-import com.mopub.nativeads.VisibilityTracker.VisibilityChecker;
-import com.mopub.network.MoPubRequestQueue;
-import com.mopub.network.Networking;
-import com.mopub.network.TrackingRequest;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.Mockito;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static com.mopub.common.VolleyRequestMatcher.isUrl;
-import static com.mopub.nativeads.NativeVideoController.STATE_BUFFERING;
-import static com.mopub.nativeads.NativeVideoController.STATE_CLEARED;
-import static com.mopub.nativeads.NativeVideoController.STATE_ENDED;
-import static com.mopub.nativeads.NativeVideoController.STATE_IDLE;
-import static com.mopub.nativeads.NativeVideoController.STATE_READY;
-import static com.mopub.nativeads.NativeVideoController.createForId;
-import static com.mopub.nativeads.NativeVideoController.getForId;
-import static com.mopub.nativeads.NativeVideoController.remove;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.argThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class NativeVideoControllerTest {
-
-    private NativeVideoController subject;
-    private Activity activity;
-    private ArrayList<VisibilityTrackingEvent> visibilityTrackingEvents;
-    private VastVideoConfig vastVideoConfig;
-    private NativeVideoProgressRunnable nativeVideoProgressRunnable;
-    private NativeVideoProgressRunnable spyNativeVideoProgressRunnable;
-    @Mock private ExoPlayer mockExoPlayer;
-    @Mock private NativeVideoProgressRunnable mockNativeVideoProgressRunnable;
-    @Mock private TextureView mockTextureView;
-    @Mock private SurfaceTexture mockSurfaceTexture;
-    @Mock private Listener mockListener;
-    @Mock private ProgressListener mockProgressListener;
-    @Mock private VastVideoConfig mockVastVideoConfig;
-    @Mock private Handler mockHandler;
-    @Mock private VisibilityChecker mockVisibilityChecker;
-    @Mock private MoPubRequestQueue mockRequestQueue;
-    @Mock private AudioManager mockAudioManager;
-
-    @Before
-    public void setUp() {
-        activity = Robolectric.buildActivity(Activity.class).create().get();
-        visibilityTrackingEvents = new ArrayList<VisibilityTrackingEvent>();
-
-        VisibilityTrackingEvent visibilityTrackingEvent = new VisibilityTrackingEvent();
-        visibilityTrackingEvent.minimumPercentageVisible = 10;
-        visibilityTrackingEvent.totalRequiredPlayTimeMs = 10;
-        visibilityTrackingEvent.strategy = new VisibilityTrackingEvent.OnTrackedStrategy() {
-            @Override
-            public void execute() {
-                TrackingRequest.makeTrackingHttpRequest("trackingUrl1", activity);
-            }
-        };
-
-        VisibilityTrackingEvent visibilityTrackingEvent2 = new VisibilityTrackingEvent();
-        visibilityTrackingEvent2.minimumPercentageVisible = 20;
-        visibilityTrackingEvent2.totalRequiredPlayTimeMs = 20;
-        visibilityTrackingEvent2.strategy = new VisibilityTrackingEvent.OnTrackedStrategy() {
-            @Override
-            public void execute() {
-                TrackingRequest.makeTrackingHttpRequest("trackingUrl2", activity);
-            }
-        };
-
-        VisibilityTrackingEvent visibilityTrackingEvent3 = new VisibilityTrackingEvent();
-        visibilityTrackingEvent3.minimumPercentageVisible = 30;
-        visibilityTrackingEvent3.totalRequiredPlayTimeMs = 30;
-        visibilityTrackingEvent3.strategy = new VisibilityTrackingEvent.OnTrackedStrategy() {
-            @Override
-            public void execute() {
-                TrackingRequest.makeTrackingHttpRequest("trackingUrl3", activity);
-            }
-        };
-        visibilityTrackingEvent3.isTracked = true;
-
-        VisibilityTrackingEvent visibilityTrackingEvent4 = new VisibilityTrackingEvent();
-        visibilityTrackingEvent4.minimumPercentageVisible = 9;
-        visibilityTrackingEvent4.totalRequiredPlayTimeMs = 9;
-        visibilityTrackingEvent4.strategy = new VisibilityTrackingEvent.OnTrackedStrategy() {
-            @Override
-            public void execute() {
-                TrackingRequest.makeTrackingHttpRequest("trackingUrl4", activity);
-            }
-        };
-
-        visibilityTrackingEvents.add(visibilityTrackingEvent);
-        visibilityTrackingEvents.add(visibilityTrackingEvent2);
-        visibilityTrackingEvents.add(visibilityTrackingEvent3);
-        visibilityTrackingEvents.add(visibilityTrackingEvent4);
-
-        vastVideoConfig = new VastVideoConfig();
-        vastVideoConfig.setNetworkMediaFileUrl("networkMediaFileUrl");
-
-        when(mockTextureView.getSurfaceTexture()).thenReturn(mockSurfaceTexture);
-
-        subject = createForId(123,
-                activity,
-                vastVideoConfig,
-                mockNativeVideoProgressRunnable,
-                new ExoPlayerFactory() {
-                    @Override
-                    public ExoPlayer newInstance(int rendererCount, int minBufferMs,
-                            int minRebufferMs) {
-                        return mockExoPlayer;
-                    }
-                },
-                null,
-                mockAudioManager);
-
-        nativeVideoProgressRunnable = new NativeVideoProgressRunnable(activity,
-                mockHandler,
-                visibilityTrackingEvents,
-                mockVisibilityChecker,
-                mockVastVideoConfig);
-        nativeVideoProgressRunnable.setTextureView(mockTextureView);
-        nativeVideoProgressRunnable.setExoPlayer(mockExoPlayer);
-        nativeVideoProgressRunnable.setProgressListener(mockProgressListener);
-        spyNativeVideoProgressRunnable = Mockito.spy(nativeVideoProgressRunnable);
-
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-    }
-
-    @Test
-    public void createForId_shouldAddNativeVideoControllerToMap_shouldReturnNativeVideoController() {
-        NativeVideoController nativeVideoController =
-                createForId(123, activity, visibilityTrackingEvents, vastVideoConfig, null);
-        assertThat(nativeVideoController).isEqualTo(getForId(123));
-    }
-
-    @Test
-    public void remove_shouldRemoveNativeVideoControllerFromMap() {
-        NativeVideoController nativeVideoController =
-                createForId(123, activity, visibilityTrackingEvents, vastVideoConfig, null);
-        assertThat(nativeVideoController).isEqualTo(getForId(123));
-        remove(123);
-        assertThat(getForId(123)).isNull();
-    }
-
-    @Test
-    public void setPlayWhenReady_shouldUpdatePlayWhenReady() {
-        subject.prepare(this);
-        subject.setPlayWhenReady(true);
-
-        verify(mockExoPlayer).setPlayWhenReady(true);
-    }
-
-    @Test
-    public void setPlayWhenReady_withPlayBackStateReady_withPlayWhenReadyTrue_shouldSetPlayeWhenReadyOnExoPlayer() {
-        subject.prepare(this);
-        reset(mockNativeVideoProgressRunnable);
-
-        when(mockExoPlayer.getPlaybackState()).thenReturn(STATE_READY);
-        when(mockExoPlayer.getPlayWhenReady()).thenReturn(true);
-        subject.setPlayWhenReady(true);
-
-        verify(mockExoPlayer).setPlayWhenReady(true);
-    }
-
-    @Test
-    public void getPlaybackState_withNullExoPlayer_shouldReturnStateCleared() {
-        assertThat(subject.getPlaybackState()).isEqualTo(STATE_CLEARED);
-    }
-
-
-    @Test
-    public void getPlaybackState_withNonNullExoPlayer_shouldReturnExoPlayerState() {
-        subject.prepare(this);
-
-        when(mockExoPlayer.getPlaybackState()).thenReturn(STATE_BUFFERING);
-        assertThat(subject.getPlaybackState()).isEqualTo(STATE_BUFFERING);
-    }
-
-    @Test
-    public void setAudioEnabled_withTrue_shouldSetVolumeOnExoPlayer() {
-        subject.prepare(this);
-        subject.setAudioEnabled(true);
-
-        verify(mockExoPlayer).sendMessage(
-                any(MediaCodecAudioTrackRenderer.class),
-                eq(MediaCodecAudioTrackRenderer.MSG_SET_VOLUME),
-                eq(1.0f));
-    }
-
-    @Test
-    public void setAudioEnabled_withFalse_shouldDisableVolumeOnExoPlayer() {
-        subject.prepare(this);
-        // initialize the subject to true so that the next call with false will run
-        subject.setAudioEnabled(true);
-        reset(mockExoPlayer);
-
-        subject.setAudioEnabled(false);
-
-        verify(mockExoPlayer).sendMessage(
-                any(MediaCodecAudioTrackRenderer.class),
-                eq(MediaCodecAudioTrackRenderer.MSG_SET_VOLUME),
-                eq(0.0f));
-    }
-
-    @Test
-    public void setAppAudioEnabled_withTrue_shouldRequestAudioFocus() throws Exception {
-        subject.setAppAudioEnabled(true);
-
-        verify(mockAudioManager).requestAudioFocus(
-                subject, AudioManager.STREAM_MUSIC, AudioManager.AUDIOFOCUS_GAIN);
-        verify(mockAudioManager, never()).abandonAudioFocus(subject);
-    }
-
-    @Test
-    public void setAppAudioEnabled_withFalse_shouldAbandonAudioFocus() throws Exception {
-        subject.setAppAudioEnabled(true);
-        subject.setAppAudioEnabled(false);
-
-        verify(mockAudioManager).abandonAudioFocus(subject);
-    }
-
-    @Test
-    public void setAudioVolume_withAudioEnabled_shouldSetExoPlayerVolume() throws Exception {
-        subject.prepare(this);
-        subject.setAudioEnabled(true);
-
-        subject.setAudioVolume(0.3f);
-
-        verify(mockExoPlayer).sendMessage(
-                any(MediaCodecAudioTrackRenderer.class),
-                eq(MediaCodecAudioTrackRenderer.MSG_SET_VOLUME),
-                eq(0.3f));
-    }
-
-    @Test
-    public void setAudioVolume_withAudioDisabled_shouldDoNothing() throws Exception {
-        subject.prepare(this);
-
-        subject.setAudioVolume(0.3f);
-
-        verify(mockExoPlayer, never()).sendMessage(
-                any(MediaCodecAudioTrackRenderer.class),
-                eq(MediaCodecAudioTrackRenderer.MSG_SET_VOLUME),
-                eq(0.3f));
-    }
-
-    @Test
-    public void setTextureView_shouldSetTextureViewOnVideoProgressRunnable_shouldSetExoSurface() {
-        subject.prepare(this);
-        reset(mockExoPlayer);
-
-        subject.setTextureView(mockTextureView);
-
-        verify(mockNativeVideoProgressRunnable).setTextureView(mockTextureView);
-        verify(mockExoPlayer).sendMessage(any(MediaCodecVideoTrackRenderer.class),
-                eq(MediaCodecVideoTrackRenderer.MSG_SET_SURFACE),
-                any(Surface.class));
-    }
-
-    @Test
-    public void prepare_shouldClearExistingPlayer() {
-        // setup an initial player
-        subject.prepare(this);
-        subject.setTextureView(mockTextureView);
-
-        reset(mockExoPlayer);
-        reset(mockNativeVideoProgressRunnable);
-        // This will clear the previous player
-        subject.prepare(this);
-
-        verify(mockExoPlayer).sendMessage(any(MediaCodecVideoTrackRenderer.class),
-                eq(MediaCodecVideoTrackRenderer.MSG_SET_SURFACE), eq(null));
-        verify(mockExoPlayer).stop();
-        verify(mockExoPlayer).release();
-        verify(mockNativeVideoProgressRunnable).stop();
-        verify(mockNativeVideoProgressRunnable).setExoPlayer(null);
-    }
-
-    @Test
-    public void prepare_shouldPreparePlayer() {
-        ExoPlayerFactory mockExoPlayerFactory = mock(ExoPlayerFactory.class);
-        when(mockExoPlayerFactory.newInstance(2, 1000, 5000)).thenReturn(mockExoPlayer);
-        subject = createForId(123,
-                activity,
-                vastVideoConfig,
-                mockNativeVideoProgressRunnable,
-                mockExoPlayerFactory,
-                null,
-                mockAudioManager);
-        subject.prepare(this);
-
-        verify(mockExoPlayerFactory).newInstance(2, 1000, 5000);
-        verify(mockNativeVideoProgressRunnable).setExoPlayer(mockExoPlayer);
-        verify(mockNativeVideoProgressRunnable).startRepeating(50);
-        verify(mockExoPlayer).addListener(subject);
-        verify(mockExoPlayer).prepare(any(MediaCodecAudioTrackRenderer.class),
-                any(MediaCodecVideoTrackRenderer.class));
-
-        // set audio
-        verify(mockExoPlayer).sendMessage(
-                any(MediaCodecAudioTrackRenderer.class),
-                eq(MediaCodecAudioTrackRenderer.MSG_SET_VOLUME),
-                eq(0.0f));
-
-        // play when ready
-        verify(mockExoPlayer).setPlayWhenReady(false);
-
-        // set surface
-        verify(mockExoPlayer).sendMessage(any(MediaCodecVideoTrackRenderer.class),
-                eq(MediaCodecVideoTrackRenderer.MSG_SET_SURFACE),
-                eq(null));
-    }
-
-    @Test
-    public void clear_shouldSetPlayWhenReadyFalse_shouldClearExistingPlayer() {
-        // initialize to true so we can set to false
-        subject.setPlayWhenReady(true);
-        subject.prepare(this);
-
-        reset(mockExoPlayer);
-        reset(mockNativeVideoProgressRunnable);
-        subject.clear();
-
-        verify(mockExoPlayer).setPlayWhenReady(false);
-
-        // clear exo player
-        verify(mockExoPlayer).sendMessage(any(MediaCodecVideoTrackRenderer.class),
-                eq(MediaCodecVideoTrackRenderer.MSG_SET_SURFACE), eq(null));
-        verify(mockExoPlayer).stop();
-        verify(mockExoPlayer).release();
-        verify(mockNativeVideoProgressRunnable).setExoPlayer(null);
-    }
-
-    @Test
-    public void release_withMatchingOwner_shouldClearExistingPlayer() {
-        subject.prepare(this);
-
-        reset(mockExoPlayer);
-        reset(mockNativeVideoProgressRunnable);
-        subject.release(this);
-
-        // clear exo player
-        verify(mockExoPlayer).sendMessage(any(MediaCodecVideoTrackRenderer.class),
-                eq(MediaCodecVideoTrackRenderer.MSG_SET_SURFACE), eq(null));
-        verify(mockExoPlayer).stop();
-        verify(mockExoPlayer).release();
-        verify(mockNativeVideoProgressRunnable).setExoPlayer(null);
-    }
-
-    @Test
-    public void release_withMismatchingOwner_shouldNotClearExistingPlayer() {
-        subject.prepare(this);
-
-        reset(mockExoPlayer);
-        reset(mockNativeVideoProgressRunnable);
-        // can be any object as long as its not 'this'
-        subject.release(mockExoPlayer);
-
-        verifyNoMoreInteractions(mockExoPlayer);
-        verifyNoMoreInteractions(mockNativeVideoProgressRunnable);
-    }
-
-    @Test
-    public void onPlayerStateChanged_withStateEnded_shouldSetFinalFrame_shouldRequestProgressRunnableToStop() {
-        subject.setTextureView(mockTextureView);
-        subject.prepare(this);
-
-        reset(mockExoPlayer);
-        reset(mockNativeVideoProgressRunnable);
-        Bitmap mockBitmap = mock(Bitmap.class);
-        when(mockTextureView.getBitmap()).thenReturn(mockBitmap);
-        subject.onPlayerStateChanged(true, STATE_ENDED);
-
-        assertThat(subject.hasFinalFrame()).isTrue();
-        assertThat(subject.getFinalFrame()).isNotNull();
-        assertThat(((BitmapDrawable) subject.getFinalFrame()).getBitmap()).isEqualTo(mockBitmap);
-        verify(mockNativeVideoProgressRunnable).requestStop();
-    }
-
-    @Test
-    public void onPlayerStateChanged_withNonNullListener_shouldNotifyListener() {
-        subject.prepare(this);
-        subject.setListener(mockListener);
-
-        subject.onPlayerStateChanged(true, STATE_IDLE);
-
-        verify(mockListener).onStateChanged(true, STATE_IDLE);
-    }
-
-    @Test
-    public void seekTo_shouldCallExoPlayerSeekTo_shouldCallProgressRunnableSeekTo() {
-        subject.prepare(this);
-        subject.seekTo(321);
-
-        verify(mockExoPlayer).seekTo(321);
-        verify(mockNativeVideoProgressRunnable).seekTo(321);
-    }
-
-    @Test
-    public void getCurrentPosition_shouldReturnProgressRunnableCurrentPosition() {
-        when(mockNativeVideoProgressRunnable.getCurrentPosition()).thenReturn(456L);
-        assertThat(subject.getCurrentPosition()).isEqualTo(456L);
-        verify(mockNativeVideoProgressRunnable).getCurrentPosition();
-    }
-
-    @Test
-    public void getDuration_shouldReturnProgressRunnableDuration() {
-        when(mockNativeVideoProgressRunnable.getDuration()).thenReturn(234L);
-        assertThat(subject.getDuration()).isEqualTo(234L);
-        verify(mockNativeVideoProgressRunnable).getDuration();
-    }
-
-    @Test
-    public void onPlayerError_shouldNotifyListener_shouldRequestProgressRunnableToStop() {
-        ExoPlaybackException exoPlaybackException = new ExoPlaybackException("exception");
-        subject.setListener(mockListener);
-        subject.onPlayerError(exoPlaybackException);
-
-        verify(mockListener).onError(exoPlaybackException);
-        verify(mockNativeVideoProgressRunnable).requestStop();
-    }
-
-    @Test
-    public void handleCtaClick_shouldInvokeVastVideoConfigHandleClick() {
-        subject = createForId(123,
-                activity,
-                mockVastVideoConfig,
-                mockNativeVideoProgressRunnable,
-                new ExoPlayerFactory() {
-                    @Override
-                    public ExoPlayer newInstance(int rendererCount, int minBufferMs,
-                            int minRebufferMs) {
-                        return mockExoPlayer;
-                    }
-                },
-                null,
-                mockAudioManager);
-
-        subject.handleCtaClick(activity);
-
-        verify(mockVastVideoConfig).handleClickWithoutResult(activity, 0);
-    }
-
-
-    @Test
-    public void NativeVideoProgressRunnable_doWork_shouldTrackEventsWithMinimumPercentVisibleWithMinimumTimePlayed() {
-        when(mockExoPlayer.getCurrentPosition()).thenReturn(10L);
-        when(mockExoPlayer.getDuration()).thenReturn(25L);
-        when(mockExoPlayer.getPlayWhenReady()).thenReturn(true);
-        when(mockVisibilityChecker.isVisible(mockTextureView, mockTextureView, 10)).thenReturn(true);
-        when(mockVisibilityChecker.isVisible(mockTextureView, mockTextureView, 20)).thenReturn(false);
-
-        nativeVideoProgressRunnable.setUpdateIntervalMillis(10);
-        nativeVideoProgressRunnable.doWork();
-
-        verify(mockRequestQueue).add(argThat(isUrl("trackingUrl1")));
-        assertThat(visibilityTrackingEvents.get(0).isTracked).isTrue();
-        assertThat(visibilityTrackingEvents.get(1).isTracked).isFalse();
-
-        // should not track same request twice
-        reset(mockRequestQueue);
-        nativeVideoProgressRunnable.doWork();
-
-        verifyNoMoreInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void NativeVideoProgressRunnable_doWork_shouldUpdateProgressListenerWithPercentagePlayed() {
-        when(mockExoPlayer.getCurrentPosition()).thenReturn(10L);
-        when(mockExoPlayer.getDuration()).thenReturn(25L);
-        when(mockExoPlayer.getPlayWhenReady()).thenReturn(true);
-
-        nativeVideoProgressRunnable.doWork();
-
-        verify(mockProgressListener).updateProgress((int) (((float) 10L / 25L) * 1000));
-    }
-
-    @Test
-    public void NativeVideoProgressRunnable_doWork_shouldFireUntriggeredTrackersFromVastVideoConfig() {
-        when(mockExoPlayer.getCurrentPosition()).thenReturn(10L);
-        when(mockExoPlayer.getDuration()).thenReturn(25L);
-        when(mockExoPlayer.getPlayWhenReady()).thenReturn(true);
-
-        VastTracker vastTracker = new VastTracker("vastTrackingUrl");
-        List<VastTracker> vastTrackers = new ArrayList<VastTracker>();
-        vastTrackers.add(vastTracker);
-        when(mockVastVideoConfig.getUntriggeredTrackersBefore(10, 25)).thenReturn(vastTrackers);
-
-        nativeVideoProgressRunnable.doWork();
-
-        verify(mockRequestQueue).add(argThat(isUrl("vastTrackingUrl")));
-        assertThat(vastTracker.isTracked()).isTrue();
-
-        reset(mockRequestQueue);
-        nativeVideoProgressRunnable.doWork();
-
-        verifyNoMoreInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void NativeVideoProgressRunnable_doWork_withNullExoPlayer_shouldReturnFast() {
-        when(mockExoPlayer.getCurrentPosition()).thenReturn(10L);
-        when(mockExoPlayer.getDuration()).thenReturn(25L);
-        when(mockExoPlayer.getPlayWhenReady()).thenReturn(true);
-
-        VastTracker vastTracker = new VastTracker("vastTrackingUrl");
-        List<VastTracker> vastTrackers = new ArrayList<VastTracker>();
-        vastTrackers.add(vastTracker);
-        when(mockVastVideoConfig.getUntriggeredTrackersBefore(10, 25)).thenReturn(vastTrackers);
-        nativeVideoProgressRunnable.setUpdateIntervalMillis(10);
-
-        nativeVideoProgressRunnable.setExoPlayer(null);
-        nativeVideoProgressRunnable.doWork();
-
-        assertThat(visibilityTrackingEvents.get(0).isTracked).isFalse();
-        assertThat(visibilityTrackingEvents.get(1).isTracked).isFalse();
-        assertThat(vastTracker.isTracked()).isFalse();
-        verifyNoMoreInteractions(mockVisibilityChecker);
-        verifyNoMoreInteractions(mockVastVideoConfig);
-        verifyNoMoreInteractions(mockRequestQueue);
-        verifyNoMoreInteractions(mockProgressListener);
-    }
-
-    @Test
-    public void NativeVideoProgressRunnable_doWork_withExoPlayerGetPlayWhenReadyFalse_shouldReturnFast() {
-        when(mockExoPlayer.getCurrentPosition()).thenReturn(10L);
-        when(mockExoPlayer.getDuration()).thenReturn(25L);
-        when(mockExoPlayer.getPlayWhenReady()).thenReturn(false);
-
-        VastTracker vastTracker = new VastTracker("vastTrackingUrl");
-        List<VastTracker> vastTrackers = new ArrayList<VastTracker>();
-        vastTrackers.add(vastTracker);
-        when(mockVastVideoConfig.getUntriggeredTrackersBefore(10, 25)).thenReturn(vastTrackers);
-        nativeVideoProgressRunnable.setUpdateIntervalMillis(10);
-
-        nativeVideoProgressRunnable.doWork();
-
-        assertThat(visibilityTrackingEvents.get(0).isTracked).isFalse();
-        assertThat(visibilityTrackingEvents.get(1).isTracked).isFalse();
-        assertThat(vastTracker.isTracked()).isFalse();
-        verifyNoMoreInteractions(mockVisibilityChecker);
-        verifyNoMoreInteractions(mockVastVideoConfig);
-        verifyNoMoreInteractions(mockRequestQueue);
-        verifyNoMoreInteractions(mockProgressListener);
-    }
-
-    @Test
-    public void NativeVideoProgressRunnable_checkImpressionTrackers_withForceTriggerFalse_shouldOnlyTriggerNotTrackedEvents_shouldNotStopRunnable() {
-        when(mockExoPlayer.getCurrentPosition()).thenReturn(50L);
-        when(mockExoPlayer.getDuration()).thenReturn(50L);
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), anyInt()))
-                .thenReturn(true);
-        spyNativeVideoProgressRunnable.setUpdateIntervalMillis(50);
-
-        spyNativeVideoProgressRunnable.checkImpressionTrackers(/* forceTrigger = */ false);
-
-        assertThat(visibilityTrackingEvents.get(0).isTracked).isTrue();
-        assertThat(visibilityTrackingEvents.get(1).isTracked).isTrue();
-        assertThat(visibilityTrackingEvents.get(2).isTracked).isTrue();
-        verify(mockRequestQueue).add(argThat(isUrl("trackingUrl1")));
-        verify(mockRequestQueue).add(argThat(isUrl("trackingUrl2")));
-        verify(mockRequestQueue, never()).add(argThat(isUrl("trackingUrl3")));
-        verify(spyNativeVideoProgressRunnable,never()).stop();
-    }
-
-    @Test
-    public void NativeVideoProgressRunnable_checkImpressionTrackers_withForceTriggerFalse_withStopRequested_shouldOnlyTriggerNotTrackedEvents_shouldStopRunnable() {
-        // Enough time has passed for all impressions to trigger organically
-        when(mockExoPlayer.getCurrentPosition()).thenReturn(50L);
-        when(mockExoPlayer.getDuration()).thenReturn(50L);
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), anyInt()))
-                .thenReturn(true);
-        spyNativeVideoProgressRunnable.setUpdateIntervalMillis(50);
-        spyNativeVideoProgressRunnable.requestStop();
-
-        spyNativeVideoProgressRunnable.checkImpressionTrackers(/* forceTrigger = */ false);
-
-        assertThat(visibilityTrackingEvents.get(0).isTracked).isTrue();
-        assertThat(visibilityTrackingEvents.get(1).isTracked).isTrue();
-        assertThat(visibilityTrackingEvents.get(2).isTracked).isTrue();
-        verify(mockRequestQueue).add(argThat(isUrl("trackingUrl1")));
-        verify(mockRequestQueue).add(argThat(isUrl("trackingUrl2")));
-        verify(mockRequestQueue, never()).add(argThat(isUrl("trackingUrl3")));
-        verify(spyNativeVideoProgressRunnable).stop();
-    }
-
-    @Test
-    public void NativeVideoProgressRunnable_checkImpressionTrackers_withForceTriggerTrue_shouldOnlyTriggerNotTrackedEvents_shouldNotStopRunnable() {
-        // Not enough time has passed for impressions to trigger organically, but all of them will
-        // be triggered because forceTrigger is true
-        when(mockExoPlayer.getCurrentPosition()).thenReturn(5L);
-        when(mockExoPlayer.getDuration()).thenReturn(50L);
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), anyInt()))
-                .thenReturn(true);
-        spyNativeVideoProgressRunnable.setUpdateIntervalMillis(50);
-
-        spyNativeVideoProgressRunnable.checkImpressionTrackers(/* forceTrigger = */ true);
-
-        assertThat(visibilityTrackingEvents.get(0).isTracked).isTrue();
-        assertThat(visibilityTrackingEvents.get(1).isTracked).isTrue();
-        assertThat(visibilityTrackingEvents.get(2).isTracked).isTrue();
-        verify(mockRequestQueue).add(argThat(isUrl("trackingUrl1")));
-        verify(mockRequestQueue).add(argThat(isUrl("trackingUrl2")));
-        verify(mockRequestQueue, never()).add(argThat(isUrl("trackingUrl3")));
-        verify(spyNativeVideoProgressRunnable, never()).stop();
-    }
-
-    @Test
-    public void NativeVideoProgressRunnable_checkImpressionTrackers_withForceTriggerTrue_withStopRequested_shouldOnlyTriggerNotTrackedEvents_shouldStopRunnable() {
-        when(mockExoPlayer.getCurrentPosition()).thenReturn(50L);
-        when(mockExoPlayer.getDuration()).thenReturn(50L);
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), anyInt()))
-                .thenReturn(true);
-        spyNativeVideoProgressRunnable.setUpdateIntervalMillis(50);
-        spyNativeVideoProgressRunnable.requestStop();
-
-        spyNativeVideoProgressRunnable.checkImpressionTrackers(/* forceTrigger = */ true);
-
-        assertThat(visibilityTrackingEvents.get(0).isTracked).isTrue();
-        assertThat(visibilityTrackingEvents.get(1).isTracked).isTrue();
-        assertThat(visibilityTrackingEvents.get(2).isTracked).isTrue();
-        verify(mockRequestQueue).add(argThat(isUrl("trackingUrl1")));
-        verify(mockRequestQueue).add(argThat(isUrl("trackingUrl2")));
-        verify(mockRequestQueue, never()).add(argThat(isUrl("trackingUrl3")));
-        verify(spyNativeVideoProgressRunnable).stop();
-    }
-
-    @Test
-    public void NativeVideoProgressRunnable_checkImpressionTrackers_withForceTriggerFalse_withStopRequested_shouldOnlyTriggerVisibleAndPlayedEvents_shouldNotStopRunnable() {
-        when(mockExoPlayer.getCurrentPosition()).thenReturn(10L);
-        when(mockExoPlayer.getDuration()).thenReturn(10L);
-
-        // visible: checks whether the minimum percentage visible is met
-        // played: checks whether the required playtime is met
-        // track: whether the impression should be organically triggered
-
-        // trackingUrl1: visible & played = track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(10)))
-                .thenReturn(true);
-        // trackingUrl2: visible & !played = !track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(20)))
-                .thenReturn(true);
-        // trackingUrl3: already tracked = !track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(30)))
-                .thenReturn(true);
-        // trackingUrl4: !visible & played = !track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(9)))
-                .thenReturn(false);
-        spyNativeVideoProgressRunnable.setUpdateIntervalMillis(10);
-        spyNativeVideoProgressRunnable.requestStop();
-
-        spyNativeVideoProgressRunnable.checkImpressionTrackers(/* forceTrigger = */ false);
-
-        assertThat(visibilityTrackingEvents.get(0).isTracked).isTrue();
-        assertThat(visibilityTrackingEvents.get(1).isTracked).isFalse();
-        assertThat(visibilityTrackingEvents.get(2).isTracked).isTrue();
-        assertThat(visibilityTrackingEvents.get(3).isTracked).isFalse();
-        verify(mockRequestQueue).add(argThat(isUrl("trackingUrl1")));
-        verify(mockRequestQueue, never()).add(argThat(isUrl("trackingUrl2")));
-        verify(mockRequestQueue, never()).add(argThat(isUrl("trackingUrl3")));
-        verify(mockRequestQueue, never()).add(argThat(isUrl("trackingUrl4")));
-        verify(spyNativeVideoProgressRunnable, never()).stop();
-    }
-
-    @Test
-    public void NativeVideoProgressRunnable_checkImpressionTrackers_withForceTriggerTrue_shouldTriggerAllUntrackedEvents_shouldNotStopRunnable() {
-        when(mockExoPlayer.getCurrentPosition()).thenReturn(10L);
-        when(mockExoPlayer.getDuration()).thenReturn(10L);
-
-        // visible: checks whether the minimum percentage visible is met
-        // played: checks whether the required playtime is met
-        // track: whether the impression should be organically triggered
-
-        // trackingUrl1: visible & played = track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(10)))
-                .thenReturn(true);
-        // trackingUrl2: visible & !played = !track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(20)))
-                .thenReturn(true);
-        // trackingUrl3: already tracked = !track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(30)))
-                .thenReturn(true);
-        // trackingUrl4: !visible & played = !track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(9)))
-                .thenReturn(false);
-        spyNativeVideoProgressRunnable.setUpdateIntervalMillis(10);
-
-        spyNativeVideoProgressRunnable.checkImpressionTrackers(/* forceTrigger = */ true);
-
-        // Because forceTrigger was true, tracking of all impressions is forced
-        assertThat(visibilityTrackingEvents.get(0).isTracked).isTrue();
-        assertThat(visibilityTrackingEvents.get(1).isTracked).isTrue();
-        assertThat(visibilityTrackingEvents.get(2).isTracked).isTrue();
-        assertThat(visibilityTrackingEvents.get(3).isTracked).isTrue();
-        verify(mockRequestQueue).add(argThat(isUrl("trackingUrl1")));
-        verify(mockRequestQueue).add(argThat(isUrl("trackingUrl2")));
-        verify(mockRequestQueue, never()).add(argThat(isUrl("trackingUrl3")));
-        verify(mockRequestQueue).add(argThat(isUrl("trackingUrl4")));
-        verify(spyNativeVideoProgressRunnable, never()).stop();
-    }
-
-    @Test
-    public void NativeVideoProgressRunnable_checkImpressionTrackers_withForceTriggerTrue_withStopRequested_shouldTriggerAllUntrackedEvents_shouldStopRunnable() {
-        when(mockExoPlayer.getCurrentPosition()).thenReturn(10L);
-        when(mockExoPlayer.getDuration()).thenReturn(10L);
-
-        // visible: checks whether the minimum percentage visible is met
-        // played: checks whether the required playtime is met
-        // track: whether the impression should be organically triggered
-
-        // trackingUrl1: visible & played = track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(10)))
-                .thenReturn(true);
-        // trackingUrl2: visible & !played = !track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(20)))
-                .thenReturn(true);
-        // trackingUrl3: already tracked = !track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(30)))
-                .thenReturn(true);
-        // trackingUrl4: !visible & played = !track
-        when(mockVisibilityChecker.isVisible(eq(mockTextureView), eq(mockTextureView), eq(9)))
-                .thenReturn(false);
-        spyNativeVideoProgressRunnable.setUpdateIntervalMillis(10);
-        spyNativeVideoProgressRunnable.requestStop();
-
-        spyNativeVideoProgressRunnable.checkImpressionTrackers(/* forceTrigger = */ true);
-
-        // Because forceTrigger was true, tracking of all impressions is forced
-        assertThat(visibilityTrackingEvents.get(0).isTracked).isTrue();
-        assertThat(visibilityTrackingEvents.get(1).isTracked).isTrue();
-        assertThat(visibilityTrackingEvents.get(2).isTracked).isTrue();
-        assertThat(visibilityTrackingEvents.get(3).isTracked).isTrue();
-        verify(mockRequestQueue).add(argThat(isUrl("trackingUrl1")));
-        verify(mockRequestQueue).add(argThat(isUrl("trackingUrl2")));
-        verify(mockRequestQueue, never()).add(argThat(isUrl("trackingUrl3")));
-        verify(mockRequestQueue).add(argThat(isUrl("trackingUrl4")));
-        verify(spyNativeVideoProgressRunnable).stop();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java
deleted file mode 100644
index 9bb34784..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java
+++ /dev/null
@@ -1,359 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.content.res.Configuration;
-import android.graphics.Bitmap;
-import android.media.AudioManager;
-import android.os.Bundle;
-import android.view.TextureView;
-import android.view.View;
-import android.view.ViewGroup.LayoutParams;
-
-import com.mopub.common.Constants;
-import com.mopub.common.MoPubBrowser;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BaseVideoViewController.BaseVideoViewControllerListener;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.mobileads.VastVideoConfig;
-import com.mopub.mobileads.resource.CtaButtonDrawable;
-import com.mopub.nativeads.MoPubCustomEventVideoNative.MoPubVideoNativeAd;
-import com.mopub.nativeads.NativeFullScreenVideoView.Mode;
-import com.mopub.nativeads.NativeVideoController.NativeVideoProgressRunnable.ProgressListener;
-import com.mopub.nativeads.NativeVideoViewController.VideoState;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowApplication;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class NativeVideoViewControllerTest {
-
-    private NativeVideoViewController subject;
-    private Activity activity;
-    private Bundle intentExtras;
-
-    @Mock private BaseVideoViewControllerListener mockBaseVideoViewControllerListener;
-    @Mock private NativeFullScreenVideoView mockFullScreenVideoView;
-    @Mock private NativeVideoController mockVideoController;
-    @Mock private VastVideoConfig mockVastVideoConfig;
-    @Mock private TextureView mockTextureView;
-    @Mock private Bitmap mockBitmap;
-
-    @Before
-    public void setUp() {
-        activity = Robolectric.buildActivity(Activity.class).create().get();
-
-        intentExtras = new Bundle();
-        intentExtras.putLong(Constants.NATIVE_VIDEO_ID, 123);
-        NativeVideoController.setForId(123, mockVideoController);
-
-        when(mockVastVideoConfig.getCustomCtaText()).thenReturn("Learn More");
-        when(mockFullScreenVideoView.getTextureView()).thenReturn(mockTextureView);
-        when(mockTextureView.getBitmap()).thenReturn(mockBitmap);
-        intentExtras.putSerializable(Constants.NATIVE_VAST_VIDEO_CONFIG, mockVastVideoConfig);
-
-        subject = new NativeVideoViewController(activity, intentExtras, null,
-                mockBaseVideoViewControllerListener, mockFullScreenVideoView);
-    }
-
-    @After
-    public void tearDown() {
-        NativeVideoController.remove(123);
-    }
-
-    @Test
-    public void constructor_shouldSetCtaText() {
-        subject = new NativeVideoViewController(activity, intentExtras, null,
-                mockBaseVideoViewControllerListener);
-        CtaButtonDrawable ctaButtonDrawable =
-                (CtaButtonDrawable) subject.getNativeFullScreenVideoView().getCtaButton()
-                        .getDrawable();
-
-        assertThat(ctaButtonDrawable.getCtaText()).isEqualTo("Learn More");
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void constructor_withNullNativeVideoController_shouldThrowNPE() {
-        NativeVideoController.remove(123);
-        subject = new NativeVideoViewController(activity, intentExtras, null,
-                mockBaseVideoViewControllerListener, mockFullScreenVideoView);
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void onCreate_withNullNativeVideoController_shouldThrowNPE() {
-        intentExtras.remove(Constants.NATIVE_VAST_VIDEO_CONFIG);
-        subject = new NativeVideoViewController(activity, intentExtras, null,
-                mockBaseVideoViewControllerListener, mockFullScreenVideoView);
-    }
-
-    @Test
-    public void onCreate_shouldSetupVideoView() {
-        subject.onCreate();
-
-        verify(mockFullScreenVideoView).setSurfaceTextureListener(subject);
-        verify(mockFullScreenVideoView).setMode(Mode.LOADING);
-        verify(mockFullScreenVideoView).setPlayControlClickListener(any(View.OnClickListener.class));
-        verify(mockFullScreenVideoView).setCloseControlListener(any(View.OnClickListener.class));
-        verify(mockFullScreenVideoView).setCtaClickListener(any(View.OnClickListener.class));
-        verify(mockFullScreenVideoView).setPrivacyInformationClickListener(
-                any(View.OnClickListener.class));
-        verify(mockFullScreenVideoView).setLayoutParams(any(LayoutParams.class));
-        verify(mockBaseVideoViewControllerListener).onSetContentView(mockFullScreenVideoView);
-        verify(mockBaseVideoViewControllerListener, never()).onFinish();
-    }
-
-    @Test
-    public void onCreate_shouldSetupNativeVideoController() {
-        subject.onCreate();
-
-        verify(mockVideoController).setProgressListener(any(ProgressListener.class));
-    }
-
-    @Test
-    public void NativeFullScreenVideoView_playControlClickListener_withVideoEnded_shouldResetFullScreenVideoProgress_shouldSeekTo0_shouldApplyPlaying() {
-        ArgumentCaptor<View.OnClickListener> captor = ArgumentCaptor.forClass(View.OnClickListener.class);
-
-        subject.onCreate();
-        subject.applyState(VideoState.ENDED);
-
-        verify(mockFullScreenVideoView).setPlayControlClickListener(captor.capture());
-        captor.getValue().onClick(null);
-
-        verify(mockFullScreenVideoView).resetProgress();
-        verify(mockVideoController).seekTo(0);
-        assertThat(subject.getVideoState()).isEqualTo(VideoState.PLAYING);
-        verify(mockBaseVideoViewControllerListener, never()).onFinish();
-    }
-
-    @Test
-    public void NativeFullScreenVideoView_closeControlClickListener_shouldSetStatePaused_shouldNotDisableAppAudio_shouldFinishActivity() {
-        ArgumentCaptor<View.OnClickListener> captor = ArgumentCaptor.forClass(View.OnClickListener.class);
-
-        subject.onCreate();
-
-        verify(mockFullScreenVideoView).setCloseControlListener(captor.capture());
-        captor.getValue().onClick(null);
-
-        assertThat(subject.getVideoState()).isEqualTo(VideoState.PAUSED);
-        verify(mockVideoController, never()).setAppAudioEnabled(false);
-        verify(mockBaseVideoViewControllerListener).onFinish();
-    }
-
-    @Test
-    public void NativeFullScreenVideoView_ctaClickListener_shouldSetPlayWhenReadyToFalse_shouldHandleCtaClick() {
-        ArgumentCaptor<View.OnClickListener> captor = ArgumentCaptor.forClass(View.OnClickListener.class);
-        subject.onCreate();
-
-        verify(mockFullScreenVideoView).setCtaClickListener(captor.capture());
-        captor.getValue().onClick(null);
-
-        verify(mockVideoController).setPlayWhenReady(false);
-        verify(mockVideoController).handleCtaClick(activity);
-        verify(mockBaseVideoViewControllerListener, never()).onFinish();
-    }
-
-    @Test
-    public void NativeFullScreenVideoView_privacyInformationIconClickListener_shouldSetPlayWhenReadyToFalse_shouldOpenInAppBrowser() {
-        ArgumentCaptor<View.OnClickListener> captor = ArgumentCaptor.forClass(View.OnClickListener.class);
-
-        subject.onCreate();
-
-        verify(mockFullScreenVideoView).setPrivacyInformationClickListener(captor.capture());
-        captor.getValue().onClick(null);
-
-        verify(mockVideoController).setPlayWhenReady(false);
-
-        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
-        assertThat(startedActivity.getComponent().getClassName())
-                .isEqualTo(MoPubBrowser.class.getName());
-        assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY))
-                .isEqualTo(MoPubVideoNativeAd.PRIVACY_INFORMATION_CLICKTHROUGH_URL);
-        verify(mockBaseVideoViewControllerListener, never()).onFinish();
-    }
-
-    @Test
-    public void NativeVideoController_progressListener_shouldUpdateFullScreenVideoProgress() {
-        ArgumentCaptor<ProgressListener> captor = ArgumentCaptor.forClass(ProgressListener.class);
-
-        subject.onCreate();
-
-        verify(mockVideoController).setProgressListener(captor.capture());
-        captor.getValue().updateProgress(10);
-
-        verify(mockFullScreenVideoView).updateProgress(10);
-        verify(mockBaseVideoViewControllerListener, never()).onFinish();
-    }
-
-    @Test
-    public void onResume_shouldPrepareNativeVideoController_shouldSetListeners() {
-        subject.onResume();
-
-        verify(mockVideoController).prepare(subject);
-        verify(mockVideoController).setListener(subject);
-        verify(mockVideoController).setOnAudioFocusChangeListener(subject);
-        verifyNoMoreInteractions(mockBaseVideoViewControllerListener);
-    }
-
-    @Test
-    public void onConfigurationChanged_shouldSetOrientationOfFullScreenVideoView() {
-        Configuration configuration = new Configuration();
-        configuration.orientation = Configuration.ORIENTATION_LANDSCAPE;
-        subject.onConfigurationChanged(configuration);
-
-        verify(mockFullScreenVideoView).setOrientation(Configuration.ORIENTATION_LANDSCAPE);
-        verifyNoMoreInteractions(mockBaseVideoViewControllerListener);
-    }
-
-    @Test
-    public void onBackPressed_shouldApplyStatePaused_shouldNotDisableAppAudio() throws Exception {
-        subject.onBackPressed();
-
-        assertThat(subject.getVideoState()).isEqualTo(VideoState.PAUSED);
-        verify(mockVideoController, never()).setAppAudioEnabled(false);
-    }
-
-    @Test
-    public void onSurfaceTexutureAvailable_shouldSetTextureView_shouldSeekToLastPosition_shouldSetPlayWhenReadyTrue() {
-        TextureView textureView = mock(TextureView.class);
-        when(mockFullScreenVideoView.getTextureView()).thenReturn(textureView);
-        when(mockVideoController.getCurrentPosition()).thenReturn(321L);
-
-        subject.onSurfaceTextureAvailable(null, 0, 0);
-
-        verify(mockVideoController).setTextureView(textureView);
-        verify(mockVideoController).seekTo(321L);
-        verify(mockVideoController).setPlayWhenReady(true);
-        verifyNoMoreInteractions(mockBaseVideoViewControllerListener);
-    }
-
-    @Test
-    public void onSurfaceTextureDestroyed_shouldReleaseVideoController_shouldApplyStatePaused() {
-        subject.onSurfaceTextureDestroyed(null);
-
-        verify(mockVideoController).release(subject);
-        assertThat(subject.getVideoState()).isEqualTo(VideoState.PAUSED);
-        verifyNoMoreInteractions(mockBaseVideoViewControllerListener);
-    }
-
-    @Test
-    public void onStateChanged_shouldAppropriatelySetVideoState() {
-        subject.onStateChanged(true, NativeVideoController.STATE_PREPARING);
-        assertThat(subject.getVideoState()).isEqualTo(VideoState.LOADING);
-
-        subject.onStateChanged(true, NativeVideoController.STATE_IDLE);
-        assertThat(subject.getVideoState()).isEqualTo(VideoState.LOADING);
-
-        subject.onStateChanged(true, NativeVideoController.STATE_BUFFERING);
-        assertThat(subject.getVideoState()).isEqualTo(VideoState.BUFFERING);
-
-        subject.onStateChanged(true, NativeVideoController.STATE_READY);
-        assertThat(subject.getVideoState()).isEqualTo(VideoState.PLAYING);
-
-        subject.onStateChanged(true, NativeVideoController.STATE_ENDED);
-        assertThat(subject.getVideoState()).isEqualTo(VideoState.ENDED);
-
-        subject.onStateChanged(true, NativeVideoController.STATE_CLEARED);
-        assertThat(subject.getVideoState()).isEqualTo(VideoState.ENDED);
-        verifyNoMoreInteractions(mockBaseVideoViewControllerListener);
-    }
-
-    @Test
-    public void onError_shouldAppropriatelySetVideoState() {
-        subject.onError(new Exception());
-        assertThat(subject.getVideoState()).isEqualTo(VideoState.FAILED_LOAD);
-        verifyNoMoreInteractions(mockBaseVideoViewControllerListener);
-    }
-
-    @Test
-    public void onAudioFocusChange_withFocusChangeAudioFocusLossOrAudioFocusLossTransient_shouldPauseVideo() throws Exception {
-        subject.onAudioFocusChange(AudioManager.AUDIOFOCUS_LOSS);
-
-        assertThat(subject.getVideoState()).isEqualTo(VideoState.PAUSED);
-    }
-
-    @Test
-    public void onAudioFocusChange_withFocusChangeAudioFocusLossTransientCanDuck_shouldLowerVolume() throws Exception {
-        subject.onAudioFocusChange(AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK);
-
-        verify(mockVideoController).setAudioVolume(0.3f);
-    }
-
-    @Test
-    public void onAudioFocusChange_withFocusChangeAudioFocusGain_shouldRaiseVolume() throws Exception {
-        subject.onAudioFocusChange(AudioManager.AUDIOFOCUS_GAIN);
-
-        verify(mockVideoController).setAudioVolume(1.0f);
-    }
-
-    @Test
-    public void applyState_withVideoStateFailedLoad_shouldSetPlayWhenReadyFalse_shouldSetAudioEnabledFalse_shouldSetAppAudioEnabledFalse_shouldSetModeLoading_shouldHandleError() {
-        subject.applyState(VideoState.FAILED_LOAD);
-        verify(mockVideoController).setPlayWhenReady(false);
-        verify(mockVideoController).setAudioEnabled(false);
-        verify(mockVideoController).setAppAudioEnabled(false);
-        verify(mockFullScreenVideoView).setMode(Mode.LOADING);
-        verify(mockVastVideoConfig).handleError(activity, null, 0);
-        verifyNoMoreInteractions(mockBaseVideoViewControllerListener);
-    }
-
-    @Test
-    public void applyState_withVideoStateLoadingOrBuffering_shouldSetPlayWhenReadyTrue_shouldSetModeLoading() {
-        subject.applyState(VideoState.LOADING);
-        verify(mockVideoController).setPlayWhenReady(true);
-        verify(mockFullScreenVideoView).setMode(Mode.LOADING);
-
-        reset(mockVideoController);
-        reset(mockFullScreenVideoView);
-
-        subject.applyState(VideoState.BUFFERING);
-        verify(mockVideoController).setPlayWhenReady(true);
-        verify(mockFullScreenVideoView).setMode(Mode.LOADING);
-        verifyNoMoreInteractions(mockBaseVideoViewControllerListener);
-    }
-
-    @Test
-    public void applyState_withVideoStatePlaying_shouldSetPlayWhenReadyTrue_shouldSetAudioEnabled_shouldSetAppAudioEnabled_shouldSetModePlaying() {
-        subject.applyState(VideoState.PLAYING);
-        verify(mockVideoController).setPlayWhenReady(true);
-        verify(mockVideoController).setAudioEnabled(true);
-        verify(mockVideoController).setAppAudioEnabled(true);
-        verify(mockFullScreenVideoView).setMode(Mode.PLAYING);
-        verifyNoMoreInteractions(mockBaseVideoViewControllerListener);
-    }
-
-    @Test
-    public void applyState_withVideoStatePaused_shouldSetAppAudioEnabledFalse_shouldSetPlayWhenReadyFalse_shouldSetModePaused() {
-        subject.applyState(VideoState.PAUSED);
-        verify(mockVideoController).setAppAudioEnabled(false);
-        verify(mockVideoController).setPlayWhenReady(false);
-        verify(mockFullScreenVideoView).setMode(Mode.PAUSED);
-        verifyNoMoreInteractions(mockBaseVideoViewControllerListener);
-    }
-
-    @Test
-    public void applyState_withVideoStateEnded_shuoldSetAppAudioEnabledFalse_shouldUpdateProgress_shouldSetModeFinished() {
-        subject.applyState(VideoState.ENDED);
-        verify(mockVideoController).setAppAudioEnabled(false);
-        verify(mockFullScreenVideoView).updateProgress(1000);
-        verify(mockFullScreenVideoView).setMode(Mode.FINISHED);
-        verify(mockVastVideoConfig).handleComplete(activity, 0);
-        verifyNoMoreInteractions(mockBaseVideoViewControllerListener);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/PlacementDataTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/PlacementDataTest.java
deleted file mode 100644
index 633d1c2b..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/PlacementDataTest.java
+++ /dev/null
@@ -1,832 +0,0 @@
-
-
-package com.mopub.nativeads;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.annotation.Config;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-import static com.mopub.nativeads.PlacementData.NOT_FOUND;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class PlacementDataTest {
-    private PlacementData noAds;
-    private PlacementData adAt0;
-    private PlacementData adAt1;
-    private PlacementData adsAt01;
-    private PlacementData adsAt1234;
-    private PlacementData adsAt14;
-    private PlacementData adsRepeating;
-    private PlacementData adsAt15repeating;
-
-    @Mock private NativeAd mMockNativeAd;
-    @Mock private NativeAd mMockNativeAd2;
-    @Mock private NativeAd mMockNativeAd3;
-    @Mock private NativeAd mMockNativeAd4;
-
-    @Before
-    public void setup() {
-        noAds = PlacementData.fromAdPositioning(MoPubNativeAdPositioning.clientPositioning());
-        adAt0 = PlacementData.fromAdPositioning(MoPubNativeAdPositioning.clientPositioning()
-                .addFixedPosition(0));
-        adAt1 = PlacementData.fromAdPositioning(MoPubNativeAdPositioning.clientPositioning()
-                .addFixedPosition(1));
-        adsAt01 = PlacementData.fromAdPositioning(MoPubNativeAdPositioning.clientPositioning()
-                .addFixedPosition(0)
-                .addFixedPosition(1));
-        adsAt14 = PlacementData.fromAdPositioning(MoPubNativeAdPositioning.clientPositioning()
-                .addFixedPosition(1)
-                .addFixedPosition(4));
-        adsRepeating = PlacementData.fromAdPositioning(MoPubNativeAdPositioning.clientPositioning()
-                .enableRepeatingPositions(3));
-        adsAt15repeating = PlacementData.fromAdPositioning(MoPubNativeAdPositioning.clientPositioning()
-                .addFixedPosition(1)
-                .addFixedPosition(5)
-                .enableRepeatingPositions(3));
-        adsAt1234 = PlacementData.fromAdPositioning(MoPubNativeAdPositioning.clientPositioning()
-                .addFixedPosition(1)
-                .addFixedPosition(2)
-                .addFixedPosition(3)
-                .addFixedPosition(4));
-    }
-
-    @Test
-    public void initialState_isDesired() {
-        assertThat(noAds.shouldPlaceAd(0)).isFalse();
-        assertThat(noAds.shouldPlaceAd(1)).isFalse();
-        assertThat(noAds.shouldPlaceAd(2)).isFalse();
-        assertThat(noAds.shouldPlaceAd(3)).isFalse();
-        assertThat(noAds.shouldPlaceAd(4)).isFalse();
-
-        assertThat(adAt0.shouldPlaceAd(0)).isTrue();
-        assertThat(adAt0.shouldPlaceAd(1)).isFalse();
-        assertThat(adAt0.shouldPlaceAd(2)).isFalse();
-        assertThat(adAt0.shouldPlaceAd(3)).isFalse();
-        assertThat(adAt0.shouldPlaceAd(4)).isFalse();
-
-        assertThat(adAt1.shouldPlaceAd(0)).isFalse();
-        assertThat(adAt1.shouldPlaceAd(1)).isTrue();
-        assertThat(adAt1.shouldPlaceAd(2)).isFalse();
-        assertThat(adAt1.shouldPlaceAd(3)).isFalse();
-        assertThat(adAt1.shouldPlaceAd(4)).isFalse();
-
-        assertThat(adsAt01.shouldPlaceAd(0)).isTrue();
-        assertThat(adsAt01.shouldPlaceAd(1)).isFalse();
-        assertThat(adsAt01.shouldPlaceAd(2)).isFalse();
-        assertThat(adsAt01.shouldPlaceAd(3)).isFalse();
-        assertThat(adsAt01.shouldPlaceAd(4)).isFalse();
-
-        assertThat(adsAt14.shouldPlaceAd(0)).isFalse();
-        assertThat(adsAt14.shouldPlaceAd(1)).isTrue();
-        assertThat(adsAt14.shouldPlaceAd(2)).isFalse();
-        assertThat(adsAt14.shouldPlaceAd(3)).isTrue();
-        assertThat(adsAt14.shouldPlaceAd(4)).isFalse();
-
-        assertThat(adsRepeating.shouldPlaceAd(0)).isFalse();
-        assertThat(adsRepeating.shouldPlaceAd(1)).isFalse();
-        assertThat(adsRepeating.shouldPlaceAd(2)).isTrue();
-        assertThat(adsRepeating.shouldPlaceAd(3)).isFalse();
-        assertThat(adsRepeating.shouldPlaceAd(4)).isTrue();
-        assertThat(adsRepeating.shouldPlaceAd(5)).isFalse();
-        assertThat(adsRepeating.shouldPlaceAd(6)).isTrue();
-
-        assertThat(adsAt15repeating.shouldPlaceAd(0)).isFalse();
-        assertThat(adsAt15repeating.shouldPlaceAd(1)).isTrue();
-        assertThat(adsAt15repeating.shouldPlaceAd(2)).isFalse();
-        assertThat(adsAt15repeating.shouldPlaceAd(3)).isFalse();
-        assertThat(adsAt15repeating.shouldPlaceAd(4)).isTrue();
-        assertThat(adsAt15repeating.shouldPlaceAd(5)).isFalse();
-        assertThat(adsAt15repeating.shouldPlaceAd(6)).isTrue();
-        assertThat(adsAt15repeating.shouldPlaceAd(7)).isFalse();
-        assertThat(adsAt15repeating.shouldPlaceAd(8)).isTrue();
-
-        assertThat(adsAt1234.shouldPlaceAd(0)).isFalse();
-        assertThat(adsAt1234.shouldPlaceAd(1)).isTrue();
-        assertThat(adsAt1234.shouldPlaceAd(2)).isFalse();
-        assertThat(adsAt1234.shouldPlaceAd(3)).isFalse();
-    }
-
-    @Test
-    public void initialState_nextInsertionPosition() {
-        assertThat(noAds.nextInsertionPosition(0)).isEqualTo(NOT_FOUND);
-        assertThat(noAds.nextInsertionPosition(1)).isEqualTo(NOT_FOUND);
-
-        assertThat(adAt0.nextInsertionPosition(0)).isEqualTo(NOT_FOUND);
-        assertThat(adAt0.nextInsertionPosition(1)).isEqualTo(NOT_FOUND);
-
-        assertThat(adAt1.nextInsertionPosition(0)).isEqualTo(1);
-        assertThat(adAt1.nextInsertionPosition(1)).isEqualTo(NOT_FOUND);
-        assertThat(adAt1.nextInsertionPosition(2)).isEqualTo(NOT_FOUND);
-
-        assertThat(adsAt01.nextInsertionPosition(0)).isEqualTo(NOT_FOUND);
-        assertThat(adsAt01.nextInsertionPosition(1)).isEqualTo(NOT_FOUND);
-        assertThat(adsAt01.nextInsertionPosition(2)).isEqualTo(NOT_FOUND);
-
-        assertThat(adsAt14.nextInsertionPosition(0)).isEqualTo(1);
-        assertThat(adsAt14.nextInsertionPosition(1)).isEqualTo(3);
-        assertThat(adsAt14.nextInsertionPosition(2)).isEqualTo(3);
-        assertThat(adsAt14.nextInsertionPosition(3)).isEqualTo(NOT_FOUND);
-        assertThat(adsAt14.nextInsertionPosition(4)).isEqualTo(NOT_FOUND);
-
-        assertThat(adsRepeating.nextInsertionPosition(0)).isEqualTo(2);
-        assertThat(adsRepeating.nextInsertionPosition(1)).isEqualTo(2);
-        assertThat(adsRepeating.nextInsertionPosition(2)).isEqualTo(4);
-        assertThat(adsRepeating.nextInsertionPosition(3)).isEqualTo(4);
-        assertThat(adsRepeating.nextInsertionPosition(4)).isEqualTo(6);
-        assertThat(adsRepeating.nextInsertionPosition(5)).isEqualTo(6);
-        assertThat(adsRepeating.nextInsertionPosition(6)).isEqualTo(8);
-
-        assertThat(adsAt15repeating.nextInsertionPosition(0)).isEqualTo(1);
-        assertThat(adsAt15repeating.nextInsertionPosition(1)).isEqualTo(4);
-        assertThat(adsAt15repeating.nextInsertionPosition(2)).isEqualTo(4);
-        assertThat(adsAt15repeating.nextInsertionPosition(3)).isEqualTo(4);
-        assertThat(adsAt15repeating.nextInsertionPosition(4)).isEqualTo(6);
-        assertThat(adsAt15repeating.nextInsertionPosition(5)).isEqualTo(6);
-        assertThat(adsAt15repeating.nextInsertionPosition(6)).isEqualTo(8);
-        assertThat(adsAt15repeating.nextInsertionPosition(7)).isEqualTo(8);
-        assertThat(adsAt15repeating.nextInsertionPosition(8)).isEqualTo(10);
-
-        assertThat(adsAt1234.nextInsertionPosition(0)).isEqualTo(1);
-        assertThat(adsAt1234.nextInsertionPosition(1)).isEqualTo(NOT_FOUND);
-        assertThat(adsAt1234.nextInsertionPosition(2)).isEqualTo(NOT_FOUND);
-        assertThat(adsAt1234.nextInsertionPosition(3)).isEqualTo(NOT_FOUND);
-        assertThat(adsAt1234.nextInsertionPosition(4)).isEqualTo(NOT_FOUND);
-        assertThat(adsAt1234.nextInsertionPosition(5)).isEqualTo(NOT_FOUND);
-    }
-
-    @Test
-    public void initialState_prevInsertionPosition() {
-        assertThat(noAds.previousInsertionPosition(0)).isEqualTo(NOT_FOUND);
-        assertThat(noAds.previousInsertionPosition(1)).isEqualTo(NOT_FOUND);
-
-        assertThat(adAt0.previousInsertionPosition(0)).isEqualTo(NOT_FOUND);
-        assertThat(adAt0.previousInsertionPosition(1)).isEqualTo(0);
-        assertThat(adAt0.previousInsertionPosition(2)).isEqualTo(0);
-
-        assertThat(adAt1.previousInsertionPosition(0)).isEqualTo(NOT_FOUND);
-        assertThat(adAt1.previousInsertionPosition(1)).isEqualTo(NOT_FOUND);
-        assertThat(adAt1.previousInsertionPosition(2)).isEqualTo(1);
-        assertThat(adAt1.previousInsertionPosition(3)).isEqualTo(1);
-
-        assertThat(adsAt01.previousInsertionPosition(0)).isEqualTo(NOT_FOUND);
-        assertThat(adsAt01.previousInsertionPosition(1)).isEqualTo(0);
-        assertThat(adsAt01.previousInsertionPosition(2)).isEqualTo(0);
-        assertThat(adsAt01.previousInsertionPosition(3)).isEqualTo(0);
-
-        assertThat(adsAt14.previousInsertionPosition(0)).isEqualTo(NOT_FOUND);
-        assertThat(adsAt14.previousInsertionPosition(1)).isEqualTo(NOT_FOUND);
-        assertThat(adsAt14.previousInsertionPosition(2)).isEqualTo(1);
-        assertThat(adsAt14.previousInsertionPosition(3)).isEqualTo(1);
-        assertThat(adsAt14.previousInsertionPosition(4)).isEqualTo(3);
-        assertThat(adsAt14.previousInsertionPosition(5)).isEqualTo(3);
-
-        assertThat(adsRepeating.previousInsertionPosition(0)).isEqualTo(NOT_FOUND);
-        assertThat(adsRepeating.previousInsertionPosition(1)).isEqualTo(NOT_FOUND);
-        assertThat(adsRepeating.previousInsertionPosition(2)).isEqualTo(NOT_FOUND);
-        assertThat(adsRepeating.previousInsertionPosition(3)).isEqualTo(2);
-        assertThat(adsRepeating.previousInsertionPosition(4)).isEqualTo(2);
-        assertThat(adsRepeating.previousInsertionPosition(5)).isEqualTo(4);
-        assertThat(adsRepeating.previousInsertionPosition(6)).isEqualTo(4);
-        assertThat(adsRepeating.previousInsertionPosition(7)).isEqualTo(6);
-
-        assertThat(adsAt15repeating.previousInsertionPosition(0)).isEqualTo(NOT_FOUND);
-        assertThat(adsAt15repeating.previousInsertionPosition(1)).isEqualTo(NOT_FOUND);
-        assertThat(adsAt15repeating.previousInsertionPosition(2)).isEqualTo(1);
-        assertThat(adsAt15repeating.previousInsertionPosition(3)).isEqualTo(1);
-        assertThat(adsAt15repeating.previousInsertionPosition(4)).isEqualTo(1);
-        assertThat(adsAt15repeating.previousInsertionPosition(5)).isEqualTo(4);
-        assertThat(adsAt15repeating.previousInsertionPosition(6)).isEqualTo(4);
-        assertThat(adsAt15repeating.previousInsertionPosition(7)).isEqualTo(6);
-        assertThat(adsAt15repeating.previousInsertionPosition(8)).isEqualTo(6);
-        assertThat(adsAt15repeating.previousInsertionPosition(9)).isEqualTo(8);
-
-        assertThat(adsAt1234.previousInsertionPosition(0)).isEqualTo(NOT_FOUND);
-        assertThat(adsAt1234.previousInsertionPosition(1)).isEqualTo(NOT_FOUND);
-        assertThat(adsAt1234.previousInsertionPosition(2)).isEqualTo(1);
-        assertThat(adsAt1234.previousInsertionPosition(3)).isEqualTo(1);
-    }
-
-    @Test
-    public void initialState_isPlacedAd() {
-        assertThat(adsAt15repeating.isPlacedAd(0)).isFalse();
-        assertThat(adsAt15repeating.isPlacedAd(1)).isFalse();
-        assertThat(adsAt15repeating.isPlacedAd(10)).isFalse();
-        assertThat(adsAt15repeating.isPlacedAd(1000)).isFalse();
-
-        assertThat(noAds.isPlacedAd(0)).isFalse();
-        assertThat(noAds.isPlacedAd(1000)).isFalse();
-    }
-
-    @Test
-    public void initialState_getOriginalPosition() {
-        assertThat(adsAt15repeating.getOriginalPosition(0)).isEqualTo(0);
-        assertThat(adsAt15repeating.getOriginalPosition(1)).isEqualTo(1);
-        assertThat(adsAt15repeating.getOriginalPosition(10)).isEqualTo(10);
-        assertThat(adsAt15repeating.getOriginalPosition(1000)).isEqualTo(1000);
-
-        assertThat(noAds.getOriginalPosition(0)).isEqualTo(0);
-        assertThat(noAds.getOriginalPosition(1000)).isEqualTo(1000);
-    }
-
-    @Test
-    public void initialState_getOriginalCount() {
-        assertThat(adsAt15repeating.getOriginalCount(0)).isEqualTo(0);
-        assertThat(adsAt15repeating.getOriginalCount(1)).isEqualTo(1);
-        assertThat(adsAt15repeating.getOriginalCount(10)).isEqualTo(10);
-        assertThat(adsAt15repeating.getOriginalCount(1000)).isEqualTo(1000);
-
-        assertThat(noAds.getOriginalCount(0)).isEqualTo(0);
-        assertThat(noAds.getOriginalCount(1000)).isEqualTo(1000);
-    }
-
-    @Test
-    public void initialState_getAdjustedPosition() {
-        assertThat(adsAt15repeating.getAdjustedPosition(0)).isEqualTo(0);
-        assertThat(adsAt15repeating.getAdjustedPosition(1)).isEqualTo(1);
-        assertThat(adsAt15repeating.getAdjustedPosition(10)).isEqualTo(10);
-        assertThat(adsAt15repeating.getAdjustedPosition(1000)).isEqualTo(1000);
-
-        assertThat(noAds.getAdjustedPosition(0)).isEqualTo(0);
-        assertThat(noAds.getAdjustedPosition(1000)).isEqualTo(1000);
-    }
-
-    @Test
-    public void initialState_getAdjustedCount() {
-        assertThat(adsAt15repeating.getAdjustedCount(0)).isEqualTo(0);
-        assertThat(adsAt15repeating.getAdjustedCount(1)).isEqualTo(1);
-        assertThat(adsAt15repeating.getAdjustedCount(10)).isEqualTo(10);
-        assertThat(adsAt15repeating.getAdjustedCount(1000)).isEqualTo(1000);
-
-        assertThat(noAds.getAdjustedCount(0)).isEqualTo(0);
-        assertThat(noAds.getAdjustedCount(1000)).isEqualTo(1000);
-    }
-
-    @Test
-    public void placeAds_inOrder_shouldUpdatePositions() {
-        checkInsertionPositions(10, adsAt15repeating, 1, 4, 6, 8, 10);
-        checkPlacedPositions(20, adsAt15repeating);
-
-        adsAt15repeating.placeAd(1, mMockNativeAd);
-        checkInsertionPositions(10, adsAt15repeating, 5, 7, 9);
-        checkPlacedPositions(20, adsAt15repeating, 1);
-
-        adsAt15repeating.placeAd(5, mMockNativeAd);
-        checkInsertionPositions(10, adsAt15repeating, 8, 10);
-        checkPlacedPositions(20, adsAt15repeating, 1, 5);
-
-        adsAt15repeating.placeAd(8, mMockNativeAd);
-        checkInsertionPositions(10, adsAt15repeating);
-        checkPlacedPositions(20, adsAt15repeating, 1, 5, 8);
-    }
-
-    @Test
-    public void placeAds_outOfOrder_shouldUpdatePositions() {
-        checkInsertionPositions(10, adsAt15repeating, 1, 4, 6, 8, 10);
-        checkPlacedPositions(20, adsAt15repeating);
-
-        adsAt15repeating.placeAd(6, mMockNativeAd);
-        checkInsertionPositions(10, adsAt15repeating, 1, 4, 9);
-        checkPlacedPositions(20, adsAt15repeating, 6);
-
-        adsAt15repeating.placeAd(4, mMockNativeAd);
-        checkInsertionPositions(10, adsAt15repeating, 1, 10);
-        checkPlacedPositions(20, adsAt15repeating, 4, 7);
-
-        adsAt15repeating.placeAd(1, mMockNativeAd);
-        checkInsertionPositions(10, adsAt15repeating);
-        checkPlacedPositions(20, adsAt15repeating, 1, 5, 8);
-    }
-
-    @Test
-    public void placedAds_getOriginalPositionAndCount() {
-        adsAt15repeating.placeAd(1, mMockNativeAd);
-        adsAt15repeating.placeAd(5, mMockNativeAd);
-        adsAt15repeating.placeAd(8, mMockNativeAd);
-
-        assertThat(adsAt15repeating.getOriginalPosition(0)).isEqualTo(0);
-        assertThat(adsAt15repeating.getOriginalPosition(1)).isEqualTo(NOT_FOUND);
-        assertThat(adsAt15repeating.getOriginalPosition(2)).isEqualTo(1);
-        assertThat(adsAt15repeating.getOriginalPosition(3)).isEqualTo(2);
-        assertThat(adsAt15repeating.getOriginalPosition(4)).isEqualTo(3);
-        assertThat(adsAt15repeating.getOriginalPosition(5)).isEqualTo(NOT_FOUND);
-        assertThat(adsAt15repeating.getOriginalPosition(6)).isEqualTo(4);
-        assertThat(adsAt15repeating.getOriginalPosition(7)).isEqualTo(5);
-        assertThat(adsAt15repeating.getOriginalPosition(8)).isEqualTo(NOT_FOUND);
-        assertThat(adsAt15repeating.getOriginalPosition(9)).isEqualTo(6);
-        assertThat(adsAt15repeating.getOriginalPosition(10)).isEqualTo(7);
-
-        assertThat(adsAt15repeating.getOriginalCount(0)).isEqualTo(0);
-        assertThat(adsAt15repeating.getOriginalCount(10)).isEqualTo(7);
-        assertThat(adsAt15repeating.getOriginalCount(20)).isEqualTo(17);
-    }
-
-    @Test
-    public void placedAds_getAdjustedPositionAndCount() {
-        adsAt15repeating.placeAd(1, mMockNativeAd);
-        adsAt15repeating.placeAd(5, mMockNativeAd);
-        adsAt15repeating.placeAd(8, mMockNativeAd);
-
-        assertThat(adsAt15repeating.getAdjustedPosition(0)).isEqualTo(0);
-        // Ad here
-        assertThat(adsAt15repeating.getAdjustedPosition(1)).isEqualTo(2);
-        assertThat(adsAt15repeating.getAdjustedPosition(2)).isEqualTo(3);
-        assertThat(adsAt15repeating.getAdjustedPosition(3)).isEqualTo(4);
-        // Ad here
-        assertThat(adsAt15repeating.getAdjustedPosition(4)).isEqualTo(6);
-        assertThat(adsAt15repeating.getAdjustedPosition(5)).isEqualTo(7);
-        // Ad here
-        assertThat(adsAt15repeating.getAdjustedPosition(6)).isEqualTo(9);
-        assertThat(adsAt15repeating.getAdjustedPosition(7)).isEqualTo(10);
-        assertThat(adsAt15repeating.getAdjustedPosition(8)).isEqualTo(11);
-        assertThat(adsAt15repeating.getAdjustedPosition(9)).isEqualTo(12);
-        assertThat(adsAt15repeating.getAdjustedPosition(10)).isEqualTo(13);
-
-        assertThat(adsAt15repeating.getAdjustedCount(0)).isEqualTo(0);
-        assertThat(adsAt15repeating.getAdjustedCount(10)).isEqualTo(13);
-        assertThat(adsAt15repeating.getAdjustedCount(20)).isEqualTo(23);
-    }
-
-    @Test
-    public void placeAdsClumped_shouldPlaceAdsInOrder() {
-        int nextPosition = adsAt1234.nextInsertionPosition(0);
-        adsAt1234.placeAd(nextPosition, mMockNativeAd);
-
-        nextPosition = adsAt1234.nextInsertionPosition(nextPosition);
-        adsAt1234.placeAd(nextPosition, mMockNativeAd2);
-
-        nextPosition = adsAt1234.nextInsertionPosition(nextPosition);
-        adsAt1234.placeAd(nextPosition, mMockNativeAd3);
-
-        nextPosition = adsAt1234.nextInsertionPosition(nextPosition);
-        adsAt1234.placeAd(nextPosition, mMockNativeAd4);
-
-        nextPosition = adsAt1234.nextInsertionPosition(nextPosition);
-        assertThat(nextPosition).isEqualTo(NOT_FOUND);
-
-        assertThat(adsAt1234.isPlacedAd(0)).isFalse();
-        assertThat(adsAt1234.getPlacedAd(1)).isEqualTo(mMockNativeAd);
-        assertThat(adsAt1234.getPlacedAd(2)).isEqualTo(mMockNativeAd2);
-        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mMockNativeAd3);
-        assertThat(adsAt1234.getPlacedAd(4)).isEqualTo(mMockNativeAd4);
-        assertThat(adsAt1234.isPlacedAd(5)).isFalse();
-    }
-
-    @Test
-    public void placeAdsClumped_thenRemoveContentBeforeClumpedAds_shouldShiftAds() {
-        adsAt1234.placeAd(1, mMockNativeAd);
-        adsAt1234.placeAd(2, mMockNativeAd2);
-        adsAt1234.placeAd(3, mMockNativeAd3);
-        adsAt1234.placeAd(4, mMockNativeAd4);
-
-        adsAt1234.removeItem(0);
-        assertThat(adsAt1234.getPlacedAd(0)).isEqualTo(mMockNativeAd);
-        assertThat(adsAt1234.getPlacedAd(1)).isEqualTo(mMockNativeAd2);
-        assertThat(adsAt1234.getPlacedAd(2)).isEqualTo(mMockNativeAd3);
-        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mMockNativeAd4);
-        assertThat(adsAt1234.isPlacedAd(4)).isFalse();
-
-        adsAt1234.removeItem(0);
-        assertThat(adsAt1234.getPlacedAd(0)).isEqualTo(mMockNativeAd);
-        assertThat(adsAt1234.getPlacedAd(1)).isEqualTo(mMockNativeAd2);
-        assertThat(adsAt1234.getPlacedAd(2)).isEqualTo(mMockNativeAd3);
-        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mMockNativeAd4);
-        assertThat(adsAt1234.isPlacedAd(4)).isFalse();
-    }
-
-    @Test
-    public void placeAdsClumped_thenRemoveContentAfterClumpedAds_shouldNotShiftAds() {
-        adsAt1234.placeAd(1, mMockNativeAd);
-        adsAt1234.placeAd(2, mMockNativeAd2);
-        adsAt1234.placeAd(3, mMockNativeAd3);
-        adsAt1234.placeAd(4, mMockNativeAd4);
-
-        adsAt1234.removeItem(1);
-        assertThat(adsAt1234.isPlacedAd(0)).isFalse();
-        assertThat(adsAt1234.getPlacedAd(1)).isEqualTo(mMockNativeAd);
-        assertThat(adsAt1234.getPlacedAd(2)).isEqualTo(mMockNativeAd2);
-        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mMockNativeAd3);
-        assertThat(adsAt1234.getPlacedAd(4)).isEqualTo(mMockNativeAd4);
-        assertThat(adsAt1234.isPlacedAd(5)).isFalse();
-
-        adsAt1234.removeItem(2);
-        assertThat(adsAt1234.isPlacedAd(0)).isFalse();
-        assertThat(adsAt1234.getPlacedAd(1)).isEqualTo(mMockNativeAd);
-        assertThat(adsAt1234.getPlacedAd(2)).isEqualTo(mMockNativeAd2);
-        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mMockNativeAd3);
-        assertThat(adsAt1234.getPlacedAd(4)).isEqualTo(mMockNativeAd4);
-        assertThat(adsAt1234.isPlacedAd(5)).isFalse();
-    }
-
-    @Test
-    public void placeAdsClumped_thenInsertContentBeforeClumpedAds_shouldShiftAds() {
-        adsAt1234.placeAd(1, mMockNativeAd);
-        adsAt1234.placeAd(2, mMockNativeAd2);
-        adsAt1234.placeAd(3, mMockNativeAd3);
-        adsAt1234.placeAd(4, mMockNativeAd4);
-
-        adsAt1234.insertItem(1);
-        assertThat(adsAt1234.isPlacedAd(0)).isFalse();
-        assertThat(adsAt1234.isPlacedAd(1)).isFalse();
-        assertThat(adsAt1234.getPlacedAd(2)).isEqualTo(mMockNativeAd);
-        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mMockNativeAd2);
-        assertThat(adsAt1234.getPlacedAd(4)).isEqualTo(mMockNativeAd3);
-        assertThat(adsAt1234.getPlacedAd(5)).isEqualTo(mMockNativeAd4);
-        assertThat(adsAt1234.isPlacedAd(6)).isFalse();
-
-        adsAt1234.insertItem(0);
-        assertThat(adsAt1234.isPlacedAd(0)).isFalse();
-        assertThat(adsAt1234.isPlacedAd(1)).isFalse();
-        assertThat(adsAt1234.isPlacedAd(2)).isFalse();
-        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mMockNativeAd);
-        assertThat(adsAt1234.getPlacedAd(4)).isEqualTo(mMockNativeAd2);
-        assertThat(adsAt1234.getPlacedAd(5)).isEqualTo(mMockNativeAd3);
-        assertThat(adsAt1234.getPlacedAd(6)).isEqualTo(mMockNativeAd4);
-        assertThat(adsAt1234.isPlacedAd(7)).isFalse();
-    }
-
-    @Test
-    public void placeAdsClumped_thenInsertContentAfterClumpedAds_shouldNotShiftAds() {
-        adsAt1234.placeAd(1, mMockNativeAd);
-        adsAt1234.placeAd(2, mMockNativeAd2);
-        adsAt1234.placeAd(3, mMockNativeAd3);
-        adsAt1234.placeAd(4, mMockNativeAd4);
-
-        adsAt1234.insertItem(2);
-        assertThat(adsAt1234.isPlacedAd(0)).isFalse();
-        assertThat(adsAt1234.getPlacedAd(1)).isEqualTo(mMockNativeAd);
-        assertThat(adsAt1234.getPlacedAd(2)).isEqualTo(mMockNativeAd2);
-        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mMockNativeAd3);
-        assertThat(adsAt1234.getPlacedAd(4)).isEqualTo(mMockNativeAd4);
-        assertThat(adsAt1234.isPlacedAd(5)).isFalse();
-
-        adsAt1234.removeItem(3);
-        assertThat(adsAt1234.isPlacedAd(0)).isFalse();
-        assertThat(adsAt1234.getPlacedAd(1)).isEqualTo(mMockNativeAd);
-        assertThat(adsAt1234.getPlacedAd(2)).isEqualTo(mMockNativeAd2);
-        assertThat(adsAt1234.getPlacedAd(3)).isEqualTo(mMockNativeAd3);
-        assertThat(adsAt1234.getPlacedAd(4)).isEqualTo(mMockNativeAd4);
-        assertThat(adsAt1234.isPlacedAd(5)).isFalse();
-    }
-
-    @Test
-    public void placedAds_thenClearEmptyRange_doesNothing() {
-        checkPlacedPositions(15, adsAt15repeating);
-        checkPlacedPositions(15, adsAt15repeating);
-        checkInsertionPositions(15, adsAt15repeating, 1, 4, 6, 8, 10, 12, 14);
-
-        adsAt15repeating.clearAdsInRange(0, 0);
-        checkPlacedPositions(15, adsAt15repeating);
-        checkInsertionPositions(15, adsAt15repeating, 1, 4, 6, 8, 10, 12, 14);
-
-        adsAt15repeating.placeAd(1, mMockNativeAd);
-        adsAt15repeating.placeAd(5, mMockNativeAd);
-        adsAt15repeating.placeAd(8, mMockNativeAd);
-        checkPlacedPositions(15, adsAt15repeating, 1, 5, 8);
-        checkInsertionPositions(15, adsAt15repeating, 11, 13, 15);
-
-        adsAt15repeating.clearAdsInRange(4, 4);
-        checkPlacedPositions(15, adsAt15repeating, 1, 5, 8);
-        checkInsertionPositions(15, adsAt15repeating, 11, 13, 15);
-    }
-
-    @Test
-    public void placedAds_thenClearAll_shouldResetInsertionPositions() {
-        checkPlacedPositions(15, adsAt15repeating);
-        checkInsertionPositions(15, adsAt15repeating, 1, 4, 6, 8, 10, 12, 14);
-
-        adsAt15repeating.placeAd(1, mMockNativeAd);
-        adsAt15repeating.placeAd(5, mMockNativeAd);
-        adsAt15repeating.placeAd(8, mMockNativeAd);
-        checkPlacedPositions(15, adsAt15repeating, 1, 5, 8);
-        checkInsertionPositions(15, adsAt15repeating, 11, 13, 15);
-
-        adsAt15repeating.clearAdsInRange(1, 10);
-        checkPlacedPositions(15, adsAt15repeating);
-        checkInsertionPositions(15, adsAt15repeating, 1, 4, 6, 8, 10, 12, 14);
-    }
-
-    @Test
-    public void placedAds_thenClearRange_inOrder_shouldResetInsertionPositions() {
-        checkPlacedPositions(15, adsAt15repeating);
-        checkInsertionPositions(15, adsAt15repeating, 1, 4, 6, 8, 10, 12, 14);
-
-        adsAt15repeating.placeAd(1, mMockNativeAd);
-        adsAt15repeating.placeAd(5, mMockNativeAd);
-        adsAt15repeating.placeAd(8, mMockNativeAd);
-        checkPlacedPositions(15, adsAt15repeating, 1, 5, 8);
-        checkInsertionPositions(15, adsAt15repeating, 11, 13, 15);
-
-        adsAt15repeating.clearAdsInRange(1, 2);
-        checkPlacedPositions(15, adsAt15repeating, 4, 7);
-        checkInsertionPositions(15, adsAt15repeating, 1, 10, 12, 14);
-
-        adsAt15repeating.clearAdsInRange(4, 5);
-        checkPlacedPositions(15, adsAt15repeating, 6);
-        checkInsertionPositions(15, adsAt15repeating, 1, 4, 9, 11, 13, 15);
-
-        adsAt15repeating.clearAdsInRange(6, 7);
-        checkPlacedPositions(15, adsAt15repeating);
-        checkInsertionPositions(15, adsAt15repeating, 1, 4, 6, 8, 10, 12, 14);
-    }
-
-    @Test
-    public void placedAds_thenClearRange_descending_shouldResetInsertionPositions() {
-        checkPlacedPositions(15, adsAt15repeating);
-        checkInsertionPositions(15, adsAt15repeating, 1, 4, 6, 8, 10, 12, 14);
-
-        adsAt15repeating.placeAd(1, mMockNativeAd);
-        adsAt15repeating.placeAd(5, mMockNativeAd);
-        adsAt15repeating.placeAd(8, mMockNativeAd);
-        checkPlacedPositions(15, adsAt15repeating, 1, 5, 8);
-        checkInsertionPositions(15, adsAt15repeating, 11, 13, 15);
-
-        adsAt15repeating.clearAdsInRange(8, 9);
-        checkPlacedPositions(15, adsAt15repeating, 1, 5);
-        checkInsertionPositions(15, adsAt15repeating, 8, 10, 12, 14);
-
-        adsAt15repeating.clearAdsInRange(5, 6);
-        checkPlacedPositions(15, adsAt15repeating, 1);
-        checkInsertionPositions(15, adsAt15repeating, 5, 7, 9, 11, 13, 15);
-
-        adsAt15repeating.clearAdsInRange(1, 2);
-        checkPlacedPositions(15, adsAt15repeating);
-        checkInsertionPositions(15, adsAt15repeating, 1, 4, 6, 8, 10, 12, 14);
-    }
-
-    @Test
-    public void placedAds_thenClearRange_multiple_shouldResetInsertionPositions() {
-        checkPlacedPositions(15, adsAt15repeating);
-        checkInsertionPositions(15, adsAt15repeating, 1, 4, 6, 8, 10, 12, 14);
-
-        adsAt15repeating.placeAd(1, mMockNativeAd);
-        adsAt15repeating.placeAd(5, mMockNativeAd);
-        adsAt15repeating.placeAd(8, mMockNativeAd);
-        checkPlacedPositions(15, adsAt15repeating, 1, 5, 8);
-        checkInsertionPositions(15, adsAt15repeating, 11, 13, 15);
-
-        adsAt15repeating.clearAdsInRange(1, 6);
-        checkPlacedPositions(15, adsAt15repeating, 6);
-        checkInsertionPositions(15, adsAt15repeating, 1, 4, 9, 11, 13, 15);
-
-        adsAt15repeating.clearAdsInRange(5, 10);
-        checkPlacedPositions(15, adsAt15repeating);
-        checkInsertionPositions(15, adsAt15repeating, 1, 4, 6, 8, 10, 12, 14);
-    }
-
-    @Test
-    public void placedAds_thenClearRange_descending_multiple_shouldResetInsertionPositions() {
-        checkPlacedPositions(15, adsAt15repeating);
-        checkInsertionPositions(15, adsAt15repeating, 1, 4, 6, 8, 10, 12, 14);
-
-        adsAt15repeating.placeAd(1, mMockNativeAd);
-        adsAt15repeating.placeAd(5, mMockNativeAd);
-        adsAt15repeating.placeAd(8, mMockNativeAd);
-        checkPlacedPositions(15, adsAt15repeating, 1, 5, 8);
-        checkInsertionPositions(15, adsAt15repeating, 11, 13, 15);
-
-        adsAt15repeating.clearAdsInRange(5, 9);
-        checkPlacedPositions(15, adsAt15repeating, 1);
-        checkInsertionPositions(15, adsAt15repeating, 5, 7, 9, 11, 13, 15);
-
-        adsAt15repeating.clearAdsInRange(1, 5);
-        checkPlacedPositions(15, adsAt15repeating);
-        checkInsertionPositions(15, adsAt15repeating, 1, 4, 6, 8, 10, 12, 14);
-    }
-
-    @Test
-    public void placeAds_thenClear_shouldCallDestroy() {
-        adsAt15repeating.placeAd(1, mMockNativeAd);
-        adsAt15repeating.placeAd(5, mMockNativeAd2);
-        adsAt15repeating.placeAd(8, mMockNativeAd3);
-
-        adsAt15repeating.clearAdsInRange(5, 10);
-        verify(mMockNativeAd, never()).destroy();
-        verify(mMockNativeAd2).destroy();
-        verify(mMockNativeAd3).destroy();
-    }
-
-    @Test
-    public void insertItems_afterPlacing() {
-        adsAt15repeating.placeAd(1, mMockNativeAd);
-        adsAt15repeating.placeAd(5, mMockNativeAd);
-        adsAt15repeating.placeAd(8, mMockNativeAd);
-
-        adsAt15repeating.insertItem(1);
-        adsAt15repeating.insertItem(4);
-        adsAt15repeating.insertItem(12);
-
-        checkPlacedPositions(20, adsAt15repeating, 2, 7, 10);
-    }
-
-    @Test
-    public void insertItems_beforePlacing() {
-        checkInsertionPositions(7, adsAt15repeating, 1, 4, 6);
-
-        adsAt15repeating.insertItem(4);
-        adsAt15repeating.insertItem(7);
-
-        checkInsertionPositions(9, adsAt15repeating, 1, 5, 8);
-    }
-
-    @Test
-    public void removeThenInsertItem_atZero_shouldBeAtZero() {
-        adsAt15repeating.placeAd(1, mMockNativeAd);
-        adsAt15repeating.placeAd(5, mMockNativeAd);
-        adsAt15repeating.placeAd(8, mMockNativeAd);
-
-        adsAt15repeating.removeItem(0);
-        checkPlacedPositions(20, adsAt15repeating, 0, 4, 7);
-        checkInsertionPositions(16, adsAt15repeating, 10, 12, 14, 16);
-
-        adsAt15repeating.insertItem(0);
-        checkPlacedPositions(20, adsAt15repeating, 1, 5, 8);
-        checkInsertionPositions(16, adsAt15repeating, 11, 13, 15);
-    }
-
-    @Test
-    public void placeThenInsertThenPlace() {
-        adsAt15repeating.placeAd(4, mMockNativeAd);
-        adsAt15repeating.insertItem(4);
-        adsAt15repeating.placeAd(1, mMockNativeAd);
-
-        checkPlacedPositions(20, adsAt15repeating, 1, 6);
-    }
-
-    @Test
-    public void removeItems_afterPlacing() {
-        adsAt15repeating.placeAd(1, mMockNativeAd);
-        adsAt15repeating.placeAd(5, mMockNativeAd);
-        adsAt15repeating.placeAd(8, mMockNativeAd);
-
-        checkPlacedPositions(20, adsAt15repeating, 1, 5, 8);
-
-        adsAt15repeating.removeItem(3);
-        adsAt15repeating.removeItem(5);
-
-        checkPlacedPositions(20, adsAt15repeating, 1, 4, 7);
-
-        // Check the adjusted positions.
-        assertThat(adsAt15repeating.getAdjustedPosition(0)).isEqualTo(0);
-        assertThat(adsAt15repeating.getAdjustedPosition(1)).isEqualTo(2);
-        assertThat(adsAt15repeating.getAdjustedPosition(2)).isEqualTo(3);
-        assertThat(adsAt15repeating.getAdjustedPosition(3)).isEqualTo(5);
-        assertThat(adsAt15repeating.getAdjustedPosition(4)).isEqualTo(6);
-        assertThat(adsAt15repeating.getAdjustedPosition(5)).isEqualTo(8);
-    }
-
-    @Test
-    public void removeItemsBetweenAds_thenInsert_shouldClumpAds() {
-        adsAt15repeating.placeAd(1, mMockNativeAd);
-        adsAt15repeating.placeAd(5, mMockNativeAd);
-        adsAt15repeating.placeAd(8, mMockNativeAd);
-
-        adsAt15repeating.removeItem(4);
-        adsAt15repeating.removeItem(4);
-
-        checkPlacedPositions(20, adsAt15repeating, 1, 5, 6);
-
-        adsAt15repeating.insertItem(5);
-
-        checkPlacedPositions(20, adsAt15repeating, 1, 5, 6);
-
-        adsAt15repeating.insertItem(4);
-
-        checkPlacedPositions(20, adsAt15repeating, 1, 6, 7);
-    }
-
-    @Test
-    public void removeItems_beforePlacing() {
-        checkInsertionPositions(7, adsAt15repeating, 1, 4, 6);
-
-        adsAt15repeating.removeItem(4);
-
-        // Check insertion positions.
-        checkInsertionPositions(7, adsAt15repeating, 1, 4, 5, 7);
-    }
-
-    @Test
-    public void removeItem_withClumpedAdsBeforeIt_shouldCorrectlyRemoveItem() throws Exception {
-        adsRepeating.placeAd(2, mMockNativeAd);
-        adsRepeating.placeAd(5, mMockNativeAd);
-        adsRepeating.placeAd(8, mMockNativeAd);
-
-        checkPlacedPositions(20, adsRepeating, 2, 5, 8);
-        assertThat(adsRepeating.getAdjustedCount(7)).isEqualTo(10);
-
-        // Removing from the head will cause ads to pile up
-        adsRepeating.removeItem(0);
-        adsRepeating.removeItem(0);
-        adsRepeating.removeItem(0);
-        adsRepeating.removeItem(0);
-        adsRepeating.removeItem(0);
-        adsRepeating.removeItem(0);
-
-        checkPlacedPositions(20, adsRepeating, 0, 1, 2);
-
-        adsRepeating.removeItem(0);
-
-        checkPlacedPositions(20, adsRepeating, 0, 1, 2);
-    }
-
-    @Test
-    public void removeItems_afterClumpedAds_shouldStayClumped() {
-        adsAt15repeating.placeAd(1, mMockNativeAd);
-        adsAt15repeating.placeAd(5, mMockNativeAd);
-        adsAt15repeating.placeAd(8, mMockNativeAd);
-
-        adsAt15repeating.removeItem(4);
-        adsAt15repeating.removeItem(4);
-
-        checkPlacedPositions(20, adsAt15repeating, 1, 5, 6);
-
-        // Shouldn't move any ads.
-        adsAt15repeating.removeItem(4);
-
-        checkPlacedPositions(20, adsAt15repeating, 1, 5, 6);
-
-        adsAt15repeating.removeItem(3);
-
-        checkPlacedPositions(20, adsAt15repeating, 1, 4, 5);
-    }
-
-    @Test
-    public void moveItems_afterPlacing() {
-        adsAt15repeating.placeAd(1, mMockNativeAd);
-        adsAt15repeating.placeAd(5, mMockNativeAd);
-        adsAt15repeating.placeAd(8, mMockNativeAd);
-
-        assertThat(adsAt15repeating.getAdjustedPosition(4)).isEqualTo(6);
-        assertThat(adsAt15repeating.getAdjustedPosition(5)).isEqualTo(7);
-
-        adsAt15repeating.moveItem(4, 2);
-
-        checkPlacedPositions(20, adsAt15repeating, 1, 6, 8);
-
-        assertThat(adsAt15repeating.getAdjustedPosition(4)).isEqualTo(5);
-        assertThat(adsAt15repeating.getAdjustedPosition(5)).isEqualTo(7);
-    }
-
-    @Test
-    public void clearAll_shouldCallDestroyOnAdData_shouldResetPositions() {
-        adsAt15repeating.placeAd(1, mMockNativeAd);
-        adsAt15repeating.placeAd(5, mMockNativeAd2);
-        adsAt15repeating.placeAd(8, mMockNativeAd3);
-
-        adsAt15repeating.clearAds();
-
-        verify(mMockNativeAd).destroy();
-        verify(mMockNativeAd2).destroy();
-        verify(mMockNativeAd3).destroy();
-
-        // Should reset to original positions
-        checkInsertionPositions(10, adsAt15repeating, 1, 4, 6, 8, 10);
-        checkPlacedPositions(20, adsAt15repeating);
-    }
-
-    void checkInsertionPositions(int maxValue, PlacementData placementData, Integer... positions) {
-        List<Integer> expected = Arrays.asList(positions);
-        List<Integer> actual = new ArrayList<Integer>();
-        for (int i = 0; i <= maxValue; i++) {
-            if (placementData.shouldPlaceAd(i)) {
-                actual.add(i);
-            }
-        }
-
-        assertThat(actual).isEqualTo(expected);
-    }
-
-    void checkPlacedPositions(int maxValue, PlacementData placementData, Integer... positions) {
-        List<Integer> expected = Arrays.asList(positions);
-        List<Integer> actual = new ArrayList<Integer>();
-        for (int i = 0; i < maxValue; i++) {
-            if (placementData.isPlacedAd(i)) {
-                actual.add(i);
-                assertThat(placementData.getPlacedAd(i)).isEqualTo(mMockNativeAd);
-            } else {
-                assertThat(placementData.getPlacedAd(i)).isNull();
-            }
-        }
-
-        assertThat(actual).isEqualTo(expected);
-
-        // Also check getPlacedAdPositions
-        List<Integer> actualFromAdPositions = new ArrayList<Integer>();
-        for (Integer position : placementData.getPlacedAdPositions()) {
-            actualFromAdPositions.add(position);
-        }
-        assertThat(actualFromAdPositions).isEqualTo(expected);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/PositioningRequestTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/PositioningRequestTest.java
deleted file mode 100644
index 5f42e4ac..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/PositioningRequestTest.java
+++ /dev/null
@@ -1,147 +0,0 @@
-package com.mopub.nativeads;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.network.MoPubNetworkError;
-import com.mopub.volley.NetworkResponse;
-import com.mopub.volley.Response;
-import com.mopub.volley.VolleyError;
-
-import org.json.JSONException;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.annotation.Config;
-
-import java.util.TreeMap;
-
-import static junit.framework.Assert.fail;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class PositioningRequestTest {
-
-    String url = "https://example.com";
-    @Mock
-    Response.Listener<MoPubNativeAdPositioning.MoPubClientPositioning> mockListener;
-    @Mock
-    Response.ErrorListener mockErrorListener;
-
-    NetworkResponse mockNetworkResponse;
-    PositioningRequest subject;
-
-    @Before
-    public void setup() {
-        subject = new PositioningRequest(url, mockListener, mockErrorListener);
-    }
-
-    @Test
-    public void parseNetworkResponse_shouldReturnPositioning() {
-        mockNetworkResponse = new NetworkResponse(200, "{fixed: []}".getBytes(), new TreeMap<String, String>(), false);
-        assertThat(subject.parseNetworkResponse(mockNetworkResponse).result)
-                .isExactlyInstanceOf(MoPubNativeAdPositioning.MoPubClientPositioning.class);
-    }
-    
-    @Test
-    public void parseNetworkResponse_shouldReturnError() {
-        mockNetworkResponse = new NetworkResponse(200, "garbage".getBytes(), new TreeMap<String, String>(), false);
-        assertThat(subject.parseNetworkResponse(mockNetworkResponse).error)
-                .isExactlyInstanceOf(VolleyError.class);
-    }
-    
-    @Test
-    public void parseJson_noFixedPositions_shouldReturnEmptyPositioning() throws Exception {
-        MoPubNativeAdPositioning.MoPubClientPositioning positioning = subject.parseJson(
-                "{fixed: []}");
-        assertThat(positioning.getFixedPositions()).isEmpty();
-        assertThat(positioning.getRepeatingInterval()).isEqualTo(MoPubNativeAdPositioning.MoPubClientPositioning.NO_REPEAT);
-    }
-
-    @Test
-    public void parseJson_oneFixedPosition_shouldReturnValidPositioning() throws Exception {
-        MoPubNativeAdPositioning.MoPubClientPositioning positioning = subject.parseJson(
-                "{fixed: [{position: 2}]}");
-        assertThat(positioning.getFixedPositions()).containsOnly(2);
-        assertThat(positioning.getRepeatingInterval()).isEqualTo(MoPubNativeAdPositioning.MoPubClientPositioning.NO_REPEAT);
-    }
-
-    @Test
-    public void parseJson_twoFixedPositions_shouldReturnValidPositioning() throws Exception {
-        MoPubNativeAdPositioning.MoPubClientPositioning positioning = subject.parseJson(
-                "{fixed: [{position: 1}, {position: 8}]}");
-        assertThat(positioning.getFixedPositions()).containsExactly(1, 8);
-        assertThat(positioning.getRepeatingInterval()).isEqualTo(MoPubNativeAdPositioning.MoPubClientPositioning.NO_REPEAT);
-    }
-
-    @Test
-    public void parseJson_twoFixedPositions_shouldIgnoreNonZeroSection() throws Exception {
-        MoPubNativeAdPositioning.MoPubClientPositioning positioning = subject.parseJson(
-                "{fixed: [{section: 0, position: 5}, {section: 1, position: 8}]}");
-        assertThat(positioning.getFixedPositions()).containsOnly(5);
-        assertThat(positioning.getRepeatingInterval()).isEqualTo(MoPubNativeAdPositioning.MoPubClientPositioning.NO_REPEAT);
-    }
-
-    @Test
-    public void parseJson_invalidFixedPosition_shouldThrowException() throws Exception {
-        // Must have either fixed or repeating positions.
-        checkException("", "Empty response");
-        checkException("{}", "Must contain fixed or repeating positions");
-        checkException("{\"error\":\"WARMING_UP\"}", "WARMING_UP");
-
-        // Position is required.
-        checkException("{fixed: [{}]}", "JSONObject[\"position\"] not found.");
-        checkException("{fixed: [{section: 0}]}", "JSONObject[\"position\"] not found.");
-
-        // Section is optional, but if it exists must be > 0
-        checkException("{fixed: [{section: -1, position: 8}]}", "Invalid section -1 in JSON response");
-
-        // Positions must be between [0 and 2 ^ 16).
-        checkException("{fixed: [{position: -1}]}", "Invalid position -1 in JSON response");
-        checkException("{fixed: [{position: 1}, {position: -8}]}",
-                "Invalid position -8 in JSON response");
-        checkException("{fixed: [{position: 1}, {position: 66000}]}",
-                "Invalid position 66000 in JSON response");
-    }
-
-    @Test
-    public void parseJson_repeatingInterval_shouldReturnValidPositioning() throws Exception {
-        MoPubNativeAdPositioning.MoPubClientPositioning positioning = subject.parseJson(
-                "{repeating: {interval: 2}}");
-        assertThat(positioning.getFixedPositions()).isEmpty();
-        assertThat(positioning.getRepeatingInterval()).isEqualTo(2);
-    }
-
-    @Test
-    public void parseJson_invalidRepeating_shouldThrowException() throws Exception {
-        checkException("{repeating: }", "Missing value at character 12");
-        checkException("{repeating: {}}", "JSONObject[\"interval\"] not found.");
-
-        // Intervals must be between [2 and 2 ^ 16).
-        checkException("{repeating: {interval: -1}}", "Invalid interval -1 in JSON response");
-        checkException("{repeating: {interval: 0}}", "Invalid interval 0 in JSON response");
-        checkException("{repeating: {interval: 1}}", "Invalid interval 1 in JSON response");
-        checkException("{repeating: {interval: 66000}}",
-                "Invalid interval 66000 in JSON response");
-    }
-
-    @Test
-    public void parseJson_fixedAndRepeating_shouldReturnValidPositioning() throws Exception {
-        MoPubNativeAdPositioning.MoPubClientPositioning positioning = subject.parseJson(
-                "{fixed: [{position: 0}, {position: 1}], repeating: {interval: 2}}");
-        assertThat(positioning.getFixedPositions()).containsExactly(0, 1);
-        assertThat(positioning.getRepeatingInterval()).isEqualTo(2);
-    }
-
-    private void checkException(String json, String expectedMessage) throws Exception {
-        try {
-            subject.parseJson(json);
-        } catch (JSONException e) {
-            return;
-        } catch (MoPubNetworkError e) {
-            return;
-        }
-        fail("Should have received an exception");
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
deleted file mode 100644
index b33c03ff..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
+++ /dev/null
@@ -1,212 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.pm.PackageManager;
-
-import com.mopub.common.ClientMetadata;
-import com.mopub.common.DownloadResponse;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.mobileads.MoPubErrorCode;
-import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
-import com.mopub.nativeads.PositioningSource.PositioningListener;
-import com.mopub.network.MoPubRequestQueue;
-import com.mopub.network.Networking;
-import com.mopub.volley.NoConnectionError;
-import com.mopub.volley.Request;
-import com.mopub.volley.VolleyError;
-
-import org.apache.http.HttpStatus;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Captor;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowLog;
-
-import java.util.List;
-import java.util.logging.Level;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class ServerPositioningSourceTest {
-    @Mock PositioningListener mockPositioningListener;
-    @Captor ArgumentCaptor<PositioningRequest> positionRequestCaptor;
-    @Mock DownloadResponse mockValidResponse;
-    @Mock DownloadResponse mockNotFoundResponse;
-    @Mock DownloadResponse mockInvalidJsonResponse;
-    @Mock DownloadResponse mockWarmingUpJsonResponse;
-    @Mock Context mockContext;
-    @Mock ClientMetadata mockClientMetaData;
-    @Mock MoPubRequestQueue mockRequestQueue;
-
-    @Captor ArgumentCaptor<MoPubClientPositioning> positioningCaptor;
-
-    ServerPositioningSource subject;
-    private Activity spyActivity;
-
-    @Before
-    public void setUp() {
-        Activity activity = Robolectric.buildActivity(Activity.class).create().get();
-        spyActivity = spy(activity);
-
-        subject = new ServerPositioningSource(spyActivity);
-        setupClientMetadata();
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-
-        when(mockValidResponse.getStatusCode()).thenReturn(HttpStatus.SC_OK);
-        when(mockValidResponse.getByteArray()).thenReturn("{fixed: []}".getBytes());
-
-        when(mockInvalidJsonResponse.getStatusCode()).thenReturn(HttpStatus.SC_OK);
-        when(mockInvalidJsonResponse.getByteArray()).thenReturn("blah blah".getBytes());
-
-        when(mockWarmingUpJsonResponse.getStatusCode()).thenReturn(HttpStatus.SC_OK);
-        when(mockWarmingUpJsonResponse.getByteArray()).thenReturn(
-                "{\"error\":\"WARMING_UP\"}".getBytes());
-
-        when(mockNotFoundResponse.getStatusCode()).thenReturn(HttpStatus.SC_NOT_FOUND);
-    }
-
-    private void setupClientMetadata() {
-        when(mockClientMetaData.getSdkVersion()).thenReturn("sdk_version");
-        when(mockClientMetaData.getAppName()).thenReturn("app_name");
-        when(mockClientMetaData.getAppPackageName()).thenReturn("app_package_name");
-        when(mockClientMetaData.getAppVersion()).thenReturn("app_version");
-        when(mockClientMetaData.getDeviceId()).thenReturn("client_device_id");
-        when(mockClientMetaData.isDoNotTrackSet()).thenReturn(true);
-        when(mockClientMetaData.getDeviceManufacturer()).thenReturn("device_manufacturer");
-        when(mockClientMetaData.getDeviceModel()).thenReturn("device_model");
-        when(mockClientMetaData.getDeviceProduct()).thenReturn("device_product");
-        when(mockClientMetaData.getDeviceOsVersion()).thenReturn("device_os_version");
-        when(mockClientMetaData.getDeviceScreenWidthDip()).thenReturn(1337);
-        when(mockClientMetaData.getDeviceScreenHeightDip()).thenReturn(70707);
-        when(mockClientMetaData.getActiveNetworkType()).thenReturn(ClientMetadata.MoPubNetworkType.WIFI);
-        when(mockClientMetaData.getNetworkOperator()).thenReturn("network_operator");
-        when(mockClientMetaData.getNetworkOperatorName()).thenReturn("network_operator_name");
-        when(mockClientMetaData.getIsoCountryCode()).thenReturn("network_iso_country_code");
-        when(mockClientMetaData.getSimOperator()).thenReturn("network_sim_operator");
-        when(mockClientMetaData.getSimOperatorName()).thenReturn("network_sim_operator_name");
-        when(mockClientMetaData.getSimIsoCountryCode()).thenReturn("network_sim_iso_country_code");
-        ClientMetadata.setInstance(mockClientMetaData);
-    }
-
-    @Test
-    public void loadPositions_shouldAddToRequestQueue() {
-        subject.loadPositions("test_ad_unit", mockPositioningListener);
-        verify(mockRequestQueue).add(any(Request.class));
-    }
-
-    @Test
-    public void loadPositionsTwice_shouldCancelPreviousRequest_shouldNotCallListener() {
-        subject.loadPositions("test_ad_unit", mockPositioningListener);
-        subject.loadPositions("test_ad_unit", mockPositioningListener);
-        verify(mockRequestQueue, times(2)).add(any(Request.class));
-
-        verify(mockPositioningListener, never()).onFailed();
-        verify(mockPositioningListener, never()).onLoad(any(MoPubClientPositioning.class));
-    }
-
-    @Test
-    public void loadPositionsTwice_afterSuccess_shouldNotCancelPreviousRequest() {
-        subject.loadPositions("test_ad_unit", mockPositioningListener);
-        verify(mockRequestQueue).add(positionRequestCaptor.capture());
-        reset(mockRequestQueue);
-
-        subject.loadPositions("test_ad_unit", mockPositioningListener);
-        verify(mockRequestQueue).add(any(Request.class));
-    }
-
-    @Test
-    public void loadPositions_thenComplete_withValidResponse_shouldCallOnLoadListener() {
-        subject.loadPositions("test_ad_unit", mockPositioningListener);
-
-        verify(mockRequestQueue).add(positionRequestCaptor.capture());
-
-        final PositioningRequest value = positionRequestCaptor.getValue();
-        final MoPubClientPositioning response = new MoPubClientPositioning().enableRepeatingPositions(3);
-        value.deliverResponse(response);
-
-        verify(mockPositioningListener).onLoad(eq(response));
-    }
-
-    @Test
-    public void loadPositions_thenComplete_withErrorResponse_shouldRetry() throws Exception {
-        subject.loadPositions("test_ad_unit", mockPositioningListener);
-
-        verify(mockRequestQueue).add(positionRequestCaptor.capture());
-        reset(mockRequestQueue);
-
-        // We get VolleyErrors for invalid JSON, 404s, 5xx, and {"error": "WARMING_UP"}
-        positionRequestCaptor.getValue().deliverError(new VolleyError("Some test error"));
-
-        Robolectric.getForegroundThreadScheduler().advanceToLastPostedRunnable();
-        verify(mockRequestQueue).add(any(Request.class));
-    }
-
-
-    @Test
-    public void loadPositions_withPendingRetry_shouldNotRetry() {
-        subject.loadPositions("test_ad_unit", mockPositioningListener);
-
-        verify(mockRequestQueue).add(positionRequestCaptor.capture());
-        reset(mockRequestQueue);
-        positionRequestCaptor.getValue().deliverError(new VolleyError("testError"));
-
-        subject.loadPositions("test_ad_unit", mockPositioningListener);
-        Robolectric.getForegroundThreadScheduler().advanceToLastPostedRunnable();
-        // If a retry happened, we'd have two here.
-        verify(mockRequestQueue).add(any(Request.class));
-    }
-
-    @Test
-    public void loadPositions_thenFailAfterMaxRetryTime_shouldCallFailureHandler() {
-        subject.loadPositions("test_ad_unit", mockPositioningListener);
-        // Simulate failure after max time.
-        subject.setMaximumRetryTimeMilliseconds(999);
-
-        verify(mockRequestQueue).add(positionRequestCaptor.capture());
-        positionRequestCaptor.getValue().deliverError(new VolleyError("test error"));
-        verify(mockPositioningListener).onFailed();
-    }
-
-    @Test
-    public void loadPositions_withNoConnection_shouldLogMoPubErrorCodeNoConnection_shouldCallFailureHandler() {
-        MoPubLog.setSdkHandlerLevel(Level.ALL);
-
-        when(mockContext.checkCallingOrSelfPermission(anyString()))
-                .thenReturn(PackageManager.PERMISSION_DENIED);
-        when(spyActivity.getApplicationContext()).thenReturn(mockContext);
-        // Reinit the subject so we get our mocked context.
-        subject = new ServerPositioningSource(spyActivity);
-
-        // Simulate failure after max time.
-        subject.setMaximumRetryTimeMilliseconds(999);
-        subject.loadPositions("test_ad_unit", mockPositioningListener);
-
-        verify(mockRequestQueue).add(positionRequestCaptor.capture());
-        positionRequestCaptor.getValue().deliverError(new NoConnectionError());
-
-        verify(mockPositioningListener).onFailed();
-
-        final List<ShadowLog.LogItem> allLogMessages = ShadowLog.getLogs();
-        final ShadowLog.LogItem latestLogMessage = allLogMessages.get(allLogMessages.size() - 2);
-        // All log messages end with a newline character.
-        assertThat(latestLogMessage.msg.trim()).isEqualTo(MoPubErrorCode.NO_CONNECTION.toString());
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeAdTest.java
deleted file mode 100644
index 22a34c85..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeAdTest.java
+++ /dev/null
@@ -1,133 +0,0 @@
-package com.mopub.nativeads;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class StaticNativeAdTest {
-
-    private StaticNativeAd subject;
-
-    @Before
-    public void setUp() throws Exception {
-        subject = new StaticNativeAd() {};
-
-        subject.setTitle("title");
-        subject.setText("text");
-        subject.setMainImageUrl("mainImageUrl");
-        subject.setIconImageUrl("iconImageUrl");
-        subject.setClickDestinationUrl("clickDestinationUrl");
-        subject.setCallToAction("callToAction");
-        subject.setStarRating(5.0);
-        subject.setPrivacyInformationIconClickThroughUrl("privacyInformationIconClickThroughUrl");
-        subject.setPrivacyInformationIconImageUrl("privacyInformationIconImageUrl");
-        subject.addExtra("extra", "extraValue");
-        subject.addExtra("extraImage", "extraImageUrl");
-        subject.addImpressionTracker("impressionUrl");
-        subject.setImpressionMinTimeViewed(500);
-    }
-
-    @Test
-    public void getters_shouldReturnCorrectValues() throws Exception {
-        assertThat(subject.getTitle()).isEqualTo("title");
-        assertThat(subject.getText()).isEqualTo("text");
-        assertThat(subject.getMainImageUrl()).isEqualTo("mainImageUrl");
-        assertThat(subject.getIconImageUrl()).isEqualTo("iconImageUrl");
-        assertThat(subject.getClickDestinationUrl()).isEqualTo("clickDestinationUrl");
-        assertThat(subject.getCallToAction()).isEqualTo("callToAction");
-        assertThat(subject.getStarRating()).isEqualTo(5.0);
-        assertThat(subject.getPrivacyInformationIconClickThroughUrl()).isEqualTo(
-                "privacyInformationIconClickThroughUrl");
-        assertThat(subject.getPrivacyInformationIconImageUrl()).isEqualTo
-                ("privacyInformationIconImageUrl");
-        assertThat(subject.getExtra("extra")).isEqualTo("extraValue");
-        assertThat(subject.getExtra("extraImage")).isEqualTo("extraImageUrl");
-        assertThat(subject.getExtras()).hasSize(2);
-        assertThat(subject.getImpressionTrackers()).containsOnly("impressionUrl");
-        assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(500);
-        assertThat(subject.getImpressionMinPercentageViewed()).isEqualTo(50);
-    }
-
-    @Test
-    public void setImpressionMinTimeViewed_whenTimeIsGreaterThan0_shouldSetTime() throws Exception {
-        subject.setImpressionMinTimeViewed(250);
-        assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(250);
-    }
-
-    @Test
-    public void setImpressionMinTimeViewed_whenTimeIsLessThan0_shouldNotSetTime() throws Exception {
-        subject.setImpressionMinTimeViewed(250);
-        assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(250);
-
-        subject.setImpressionMinTimeViewed(-1);
-        assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(250);
-    }
-
-    @Test
-    public void setStarRating_withinValidRange_shouldSetStarRating() throws Exception {
-        subject.setStarRating(0.0);
-        assertThat(subject.getStarRating()).isEqualTo(0.0);
-
-        subject.setStarRating(5.0);
-        assertThat(subject.getStarRating()).isEqualTo(5.0);
-
-        subject.setStarRating(2.5);
-        assertThat(subject.getStarRating()).isEqualTo(2.5);
-    }
-
-    @Test
-    public void setStarRating_withNull_shouldSetStarRatingToNull() throws Exception {
-        // Setting star rating to 0 before each case, so we can detect when it gets set to null
-        final double initialStarRating = 0.0;
-
-        subject.setStarRating(initialStarRating);
-        subject.setStarRating(null);
-        assertThat(subject.getStarRating()).isEqualTo(null);
-    }
-
-    @Test
-    public void setStarRating_withNanOrInf_shouldNotSetStarRating() throws Exception {
-        // First, set star rating to a valid value
-        final double initialStarRating = 3.75;
-        subject.setStarRating(initialStarRating);
-
-        subject.setStarRating(Double.NaN);
-        assertThat(subject.getStarRating()).isEqualTo(initialStarRating);
-
-        subject.setStarRating(Double.POSITIVE_INFINITY);
-        assertThat(subject.getStarRating()).isEqualTo(initialStarRating);
-
-        subject.setStarRating(Double.NEGATIVE_INFINITY);
-        assertThat(subject.getStarRating()).isEqualTo(initialStarRating);
-    }
-
-    @Test
-    public void setStarRating_withValuesOutsideOfValidRange_shouldNotSetStarRating() throws Exception {
-        // First, set star rating to a valid value
-        final double initialStarRating = 4.9;
-        subject.setStarRating(initialStarRating);
-
-        subject.setStarRating(5.0001);
-        assertThat(subject.getStarRating()).isEqualTo(initialStarRating);
-
-        subject.setStarRating(-0.001);
-        assertThat(subject.getStarRating()).isEqualTo(initialStarRating);
-    }
-
-    @Test
-    public void isImpressionRecorded_withRecordedImpression_shouldReturnTrue() throws Exception {
-        assertThat(subject.isImpressionRecorded()).isFalse();
-
-        subject.setImpressionRecorded();
-
-        assertThat(subject.isImpressionRecorded()).isTrue();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeViewHolderTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeViewHolderTest.java
deleted file mode 100644
index 349dcf82..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeViewHolderTest.java
+++ /dev/null
@@ -1,157 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.widget.Button;
-import android.widget.ImageView;
-import android.widget.RelativeLayout;
-import android.widget.TextView;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.Utils;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.network.MaxWidthImageLoader;
-import com.mopub.network.MoPubRequestQueue;
-import com.mopub.network.Networking;
-import com.mopub.volley.toolbox.ImageLoader;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Captor;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class StaticNativeViewHolderTest {
-    private Context context;
-    private RelativeLayout relativeLayout;
-    private ViewBinder viewBinder;
-    private TextView titleView;
-    private TextView textView;
-    private TextView callToActionView;
-    private ImageView mainImageView;
-    private ImageView iconImageView;
-    private TextView extrasTextView;
-    private ImageView extrasImageView;
-    private ImageView extrasImageView2;
-    private ImageView privacyInformationIconImageView;
-
-    @Mock private MoPubRequestQueue mockRequestQueue;
-    @Mock private MaxWidthImageLoader mockImageLoader;
-    @Mock private ImageLoader.ImageContainer mockImageContainer;
-    @Mock private Bitmap mockBitmap;
-
-    @Captor private ArgumentCaptor<ImageLoader.ImageListener> mainImageCaptor;
-    @Captor private ArgumentCaptor<ImageLoader.ImageListener> iconImageCaptor;
-
-    @Before
-    public void setUp() throws Exception {
-
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-        Networking.setImageLoaderForTesting(mockImageLoader);
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        relativeLayout = new RelativeLayout(context);
-        relativeLayout.setId((int) Utils.generateUniqueId());
-
-        // Fields in the web ui
-        titleView = new TextView(context);
-        titleView.setId((int) Utils.generateUniqueId());
-        textView = new TextView(context);
-        textView.setId((int) Utils.generateUniqueId());
-        callToActionView = new Button(context);
-        callToActionView.setId((int) Utils.generateUniqueId());
-        mainImageView = new ImageView(context);
-        mainImageView.setId((int) Utils.generateUniqueId());
-        iconImageView = new ImageView(context);
-        iconImageView.setId((int) Utils.generateUniqueId());
-        privacyInformationIconImageView = new ImageView(context);
-        privacyInformationIconImageView.setId((int) Utils.generateUniqueId());
-
-        // Extras
-        extrasTextView = new TextView(context);
-        extrasTextView.setId((int) Utils.generateUniqueId());
-        extrasImageView = new ImageView(context);
-        extrasImageView.setId((int) Utils.generateUniqueId());
-        extrasImageView2 = new ImageView(context);
-        extrasImageView2.setId((int) Utils.generateUniqueId());
-
-        relativeLayout.addView(titleView);
-        relativeLayout.addView(textView);
-        relativeLayout.addView(callToActionView);
-        relativeLayout.addView(mainImageView);
-        relativeLayout.addView(iconImageView);
-        relativeLayout.addView(extrasTextView);
-        relativeLayout.addView(extrasImageView);
-        relativeLayout.addView(extrasImageView2);
-        relativeLayout.addView(privacyInformationIconImageView);
-    }
-
-    @Test
-    public void fromViewBinder_shouldPopulateClassFields() throws Exception {
-        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
-                .titleId(titleView.getId())
-                .textId(textView.getId())
-                .callToActionId(callToActionView.getId())
-                .mainImageId(mainImageView.getId())
-                .iconImageId(iconImageView.getId())
-                .privacyInformationIconImageId(privacyInformationIconImageView.getId())
-                .build();
-
-        StaticNativeViewHolder staticNativeViewHolder =
-                StaticNativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
-
-        assertThat(staticNativeViewHolder.titleView).isEqualTo(titleView);
-        assertThat(staticNativeViewHolder.textView).isEqualTo(textView);
-        assertThat(staticNativeViewHolder.callToActionView).isEqualTo(callToActionView);
-        assertThat(staticNativeViewHolder.mainImageView).isEqualTo(mainImageView);
-        assertThat(staticNativeViewHolder.iconImageView).isEqualTo(iconImageView);
-        assertThat(staticNativeViewHolder.privacyInformationIconImageView).isEqualTo(
-                privacyInformationIconImageView);
-    }
-
-    @Test
-    public void fromViewBinder_withSubsetOfFields_shouldLeaveOtherFieldsNull() throws Exception {
-        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
-                .titleId(titleView.getId())
-                .iconImageId(iconImageView.getId())
-                .build();
-
-        StaticNativeViewHolder staticNativeViewHolder =
-                StaticNativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
-
-        assertThat(staticNativeViewHolder.titleView).isEqualTo(titleView);
-        assertThat(staticNativeViewHolder.textView).isNull();
-        assertThat(staticNativeViewHolder.callToActionView).isNull();
-        assertThat(staticNativeViewHolder.mainImageView).isNull();
-        assertThat(staticNativeViewHolder.iconImageView).isEqualTo(iconImageView);
-        assertThat(staticNativeViewHolder.privacyInformationIconImageView).isNull();
-    }
-
-    @Test
-    public void fromViewBinder_withNonExistantIds_shouldLeaveFieldsNull() throws Exception {
-        viewBinder = new ViewBinder.Builder(relativeLayout.getId())
-                .titleId((int) Utils.generateUniqueId())
-                .textId((int) Utils.generateUniqueId())
-                .callToActionId((int) Utils.generateUniqueId())
-                .mainImageId((int) Utils.generateUniqueId())
-                .iconImageId((int) Utils.generateUniqueId())
-                .build();
-
-        StaticNativeViewHolder staticNativeViewHolder =
-                StaticNativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
-
-        assertThat(staticNativeViewHolder.titleView).isNull();
-        assertThat(staticNativeViewHolder.textView).isNull();
-        assertThat(staticNativeViewHolder.callToActionView).isNull();
-        assertThat(staticNativeViewHolder.mainImageView).isNull();
-        assertThat(staticNativeViewHolder.iconImageView).isNull();
-        assertThat(staticNativeViewHolder.privacyInformationIconImageView).isNull();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/VideoNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/VideoNativeAdTest.java
deleted file mode 100644
index 2b3eae82..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/VideoNativeAdTest.java
+++ /dev/null
@@ -1,60 +0,0 @@
-package com.mopub.nativeads;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class VideoNativeAdTest {
-
-    private VideoNativeAd subject;
-
-    @Before
-    public void setUp() {
-        subject = new VideoNativeAd() {
-            @Override
-            public void onStateChanged(boolean playWhenReady, int playbackState) { }
-
-            @Override
-            public void onError(Exception e) { }
-        };
-
-        subject.setTitle("title");
-        subject.setText("text");
-        subject.setMainImageUrl("mainImageUrl");
-        subject.setIconImageUrl("iconImageUrl");
-        subject.setClickDestinationUrl("clickDestinationUrl");
-        subject.setVastVideo("vastVideo");
-        subject.setCallToAction("callToAction");
-        subject.setPrivacyInformationIconClickThroughUrl("privacyInformationIconClickThroughUrl");
-        subject.setPrivacyInformationIconImageUrl("privacyInformationIconImageUrl");
-        subject.addExtra("extra", "extraValue");
-        subject.addExtra("extraImage", "extraImageUrl");
-        subject.addImpressionTracker("impressionUrl");
-    }
-
-    @Test
-    public void getters_shouldReturnCorrectValues() {
-        assertThat(subject.getTitle()).isEqualTo("title");
-        assertThat(subject.getText()).isEqualTo("text");
-        assertThat(subject.getMainImageUrl()).isEqualTo("mainImageUrl");
-        assertThat(subject.getIconImageUrl()).isEqualTo("iconImageUrl");
-        assertThat(subject.getClickDestinationUrl()).isEqualTo("clickDestinationUrl");
-        assertThat(subject.getCallToAction()).isEqualTo("callToAction");
-        assertThat(subject.getPrivacyInformationIconClickThroughUrl()).isEqualTo(
-                "privacyInformationIconClickThroughUrl");
-        assertThat(subject.getPrivacyInformationIconImageUrl()).isEqualTo
-                ("privacyInformationIconImageUrl");
-        assertThat(subject.getExtra("extra")).isEqualTo("extraValue");
-        assertThat(subject.getExtra("extraImage")).isEqualTo("extraImageUrl");
-        assertThat(subject.getExtras()).hasSize(2);
-        assertThat(subject.getImpressionTrackers()).containsOnly("impressionUrl");
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
deleted file mode 100644
index 2c6be2a7..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
+++ /dev/null
@@ -1,371 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.graphics.Rect;
-import android.os.Handler;
-import android.os.SystemClock;
-import android.view.View;
-import android.view.ViewParent;
-import android.view.ViewTreeObserver;
-import android.view.Window;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.nativeads.VisibilityTracker.TrackingInfo;
-
-import org.fest.util.Lists;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Mock;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowSystemClock;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-import java.util.WeakHashMap;
-
-import static android.view.ViewTreeObserver.OnPreDrawListener;
-import static com.mopub.nativeads.VisibilityTracker.VisibilityChecker;
-import static com.mopub.nativeads.VisibilityTracker.VisibilityTrackerListener;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class VisibilityTrackerTest {
-    private static final int MIN_PERCENTAGE_VIEWED = 50;
-
-    private Activity activity;
-    private VisibilityTracker subject;
-    private Map<View, TrackingInfo> trackedViews;
-    private VisibilityChecker visibilityChecker;
-
-    @Mock private VisibilityTrackerListener visibilityTrackerListener;
-    @Mock private View view;
-    @Mock private View view2;
-    @Mock private Handler visibilityHandler;
-
-    @Before
-    public void setUp() throws Exception {
-        trackedViews = new WeakHashMap<View, TrackingInfo>();
-        visibilityChecker = new VisibilityChecker();
-        activity = Robolectric.buildActivity(Activity.class).create().get();
-        view = createViewMock(View.VISIBLE, 100, 100, 100, 100, true, true);
-        view2 = createViewMock(View.VISIBLE, 100, 100, 100, 100, true, true);
-
-        // Add a proxy listener to that makes a safe copy of the listener args.
-        VisibilityTrackerListener proxyListener = new VisibilityTrackerListener() {
-            @Override
-            public void onVisibilityChanged(List<View> visibleViews, List<View> invisibleViews) {
-                ArrayList<View> safeVisibleViews = new ArrayList<View>(visibleViews);
-                ArrayList<View> safeInVisibleViews = new ArrayList<View>(invisibleViews);
-                visibilityTrackerListener.onVisibilityChanged(safeVisibleViews, safeInVisibleViews);
-            }
-        };
-        subject = new VisibilityTracker(activity, trackedViews, visibilityChecker, visibilityHandler);
-        subject.setVisibilityTrackerListener(proxyListener);
-
-        // XXX We need this to ensure that our SystemClock starts
-        ShadowSystemClock.uptimeMillis();
-    }
-
-    @Test
-    public void constructor_shouldSetOnPreDrawListenerForDecorView() throws Exception {
-        Activity activity1 = spy(Robolectric.buildActivity(Activity.class).create().get());
-        Window window = mock(Window.class);
-        View decorView = mock(View.class);
-        ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
-
-        when(activity1.getWindow()).thenReturn(window);
-        when(window.getDecorView()).thenReturn(decorView);
-        when(decorView.findViewById(anyInt())).thenReturn(decorView);
-        when(decorView.getViewTreeObserver()).thenReturn(viewTreeObserver);
-        when(viewTreeObserver.isAlive()).thenReturn(true);
-
-        subject = new VisibilityTracker(activity1, trackedViews, visibilityChecker, visibilityHandler);
-        assertThat(subject.mOnPreDrawListener).isNotNull();
-        verify(viewTreeObserver).addOnPreDrawListener(subject.mOnPreDrawListener);
-        assertThat(subject.mWeakViewTreeObserver.get()).isEqualTo(viewTreeObserver);
-    }
-
-    @Test
-    public void constructor_withNonAliveViewTreeObserver_shouldNotSetOnPreDrawListenerForDecorView() throws Exception {
-        Activity activity1 = mock(Activity.class);
-        Window window = mock(Window.class);
-        View decorView = mock(View.class);
-        ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
-
-        when(activity1.getWindow()).thenReturn(window);
-        when(window.getDecorView()).thenReturn(decorView);
-        when(decorView.getViewTreeObserver()).thenReturn(viewTreeObserver);
-        when(viewTreeObserver.isAlive()).thenReturn(false);
-
-        subject = new VisibilityTracker(activity1, trackedViews, visibilityChecker, visibilityHandler);
-        verify(viewTreeObserver, never()).addOnPreDrawListener(subject.mOnPreDrawListener);
-        assertThat(subject.mWeakViewTreeObserver.get()).isNull();
-    }
-
-    @Test
-    public void constructor_withApplicationContext_shouldNotSetOnPreDrawListener() {
-        subject = new VisibilityTracker(activity.getApplicationContext(), trackedViews,
-                visibilityChecker, visibilityHandler);
-
-        assertThat(subject.mWeakViewTreeObserver.get()).isNull();
-    }
-
-    @Test
-    public void addView_withVisibleView_shouldAddVisibleViewToTrackedViews() throws Exception {
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
-
-        assertThat(trackedViews).hasSize(1);
-    }
-
-    @Test
-    public void addView_withViewTreeObserverNotSet_shouldSetViewTreeObserver() {
-        ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
-        View rootView = mock(View.class);
-
-        when(view.getContext()).thenReturn(activity.getApplicationContext());
-        when(view.getRootView()).thenReturn(rootView);
-        when(rootView.getViewTreeObserver()).thenReturn(viewTreeObserver);
-        when(viewTreeObserver.isAlive()).thenReturn(true);
-
-        subject = new VisibilityTracker(activity.getApplicationContext(), trackedViews,
-                visibilityChecker, visibilityHandler);
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
-
-        assertThat(subject.mWeakViewTreeObserver.get()).isEqualTo(viewTreeObserver);
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void addView_whenViewIsNull_shouldThrowNPE() throws Exception {
-        subject.addView(null, MIN_PERCENTAGE_VIEWED);
-
-        assertThat(trackedViews).isEmpty();
-    }
-
-    @Test
-    public void removeView_shouldRemoveFromTrackedViews() throws Exception {
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
-
-        assertThat(trackedViews).hasSize(1);
-        assertThat(trackedViews).containsKey(view);
-
-        subject.removeView(view);
-
-        assertThat(trackedViews).isEmpty();
-    }
-
-    @Test
-    public void clear_shouldRemoveAllViewsFromTrackedViews_shouldRemoveMessagesFromVisibilityHandler_shouldResetIsVisibilityScheduled() throws Exception {
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
-        subject.addView(view2, MIN_PERCENTAGE_VIEWED);
-        assertThat(trackedViews).hasSize(2);
-
-        subject.clear();
-
-        assertThat(trackedViews).isEmpty();
-        verify(visibilityHandler).removeMessages(0);
-    }
-
-    @Test
-    public void destroy_shouldCallClear_shouldRemoveListenerFromDecorView() throws Exception {
-        Activity activity1 = spy(Robolectric.buildActivity(Activity.class).create().get());
-        Window window = mock(Window.class);
-        View decorView = mock(View.class);
-        ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
-
-        when(activity1.getWindow()).thenReturn(window);
-        when(window.getDecorView()).thenReturn(decorView);
-        when(decorView.findViewById(anyInt())).thenReturn(decorView);
-        when(decorView.getViewTreeObserver()).thenReturn(viewTreeObserver);
-        when(viewTreeObserver.isAlive()).thenReturn(true);
-
-        subject = new VisibilityTracker(activity1, trackedViews, visibilityChecker, visibilityHandler);
-
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
-        subject.addView(view2, MIN_PERCENTAGE_VIEWED);
-        assertThat(trackedViews).hasSize(2);
-
-        subject.destroy();
-
-        assertThat(trackedViews).isEmpty();
-        verify(visibilityHandler).removeMessages(0);
-        verify(viewTreeObserver).removeOnPreDrawListener(any(OnPreDrawListener.class));
-        assertThat(subject.mWeakViewTreeObserver.get()).isNull();
-    }
-
-    @Test
-    public void visibilityRunnable_run_withVisibleView_shouldCallOnVisibleCallback() throws Exception {
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
-
-        subject.new VisibilityRunnable().run();
-
-        verify(visibilityTrackerListener).onVisibilityChanged(
-                Lists.newArrayList(view), Lists.<View>newArrayList());
-    }
-
-    @Test
-    public void visibilityRunnable_run_withNonVisibleView_shouldCallOnNonVisibleCallback() throws Exception {
-        when(view.getVisibility()).thenReturn(View.INVISIBLE);
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
-
-        subject.new VisibilityRunnable().run();
-
-        ArgumentCaptor<List> visibleCaptor = ArgumentCaptor.forClass(List.class);
-        ArgumentCaptor<List> invisibleCaptor = ArgumentCaptor.forClass(List.class);
-        // noinspection unchecked
-        verify(visibilityTrackerListener).onVisibilityChanged(visibleCaptor.capture(),
-                invisibleCaptor.capture());
-        assertThat(visibleCaptor.getValue().size()).isEqualTo(0);
-        assertThat(invisibleCaptor.getValue().size()).isEqualTo(1);
-    }
-
-    // VisibilityChecker tests
-
-    @Test
-    public void hasRequiredTimeElapsed_withElapsedTimeGreaterThanMinTimeViewed_shouldReturnTrue() throws Exception {
-        assertThat(visibilityChecker.hasRequiredTimeElapsed(SystemClock.uptimeMillis() - 501, 500)).isTrue();
-    }
-
-    @Test
-    public void hasRequiredTimeElapsed_withElapsedTimeLessThanMinTimeViewed_shouldReturnFalse() throws Exception {
-        assertThat(visibilityChecker.hasRequiredTimeElapsed(SystemClock.uptimeMillis() - 499, 500)).isFalse();
-    }
-
-    @Test
-    public void isMostlyVisible_whenParentIsNull_shouldReturnFalse() throws Exception {
-        view = createViewMock(View.VISIBLE, 100, 100, 100, 100, false, true);
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
-    }
-
-    @Test
-    public void isMostlyVisible_whenViewIsOffScreen_shouldReturnFalse() throws Exception {
-        view = createViewMock(View.VISIBLE, 100, 100, 100, 100, true, false);
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
-    }
-
-    @Test
-    public void isMostlyVisible_whenViewIsEntirelyOnScreen_shouldReturnTrue() throws Exception {
-        view = createViewMock(View.VISIBLE, 100, 100, 100, 100, true, true);
-
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isTrue();
-    }
-
-    @Test
-    public void isMostlyVisible_whenViewIs50PercentVisible_shouldReturnTrue() throws Exception {
-        view = createViewMock(View.VISIBLE, 50, 100, 100, 100, true, true);
-
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isTrue();
-    }
-
-    @Test
-    public void isMostlyVisible_whenViewIs49PercentVisible_shouldReturnFalse() throws Exception {
-        view = createViewMock(View.VISIBLE, 49, 100, 100, 100, true, true);
-
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
-    }
-
-    @Test
-    public void isMostlyVisible_whenVisibleAreaIsZero_shouldReturnFalse() throws Exception {
-        view = createViewMock(View.VISIBLE, 0, 0, 100, 100, true, true);
-
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
-    }
-
-    @Test
-    public void isMostlyVisible_whenViewIsInvisibleOrGone_shouldReturnFalse() throws Exception {
-        View view = createViewMock(View.INVISIBLE, 100, 100, 100, 100, true, true);
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
-
-        reset(view);
-        view = createViewMock(View.GONE, 100, 100, 100, 100, true, true);
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
-    }
-
-    @Test
-    public void isMostlyVisible_whenViewHasZeroWidthAndHeight_shouldReturnFalse() throws Exception {
-        view = createViewMock(View.VISIBLE, 100, 100, 0, 0, true, true);
-
-        assertThat(visibilityChecker.isVisible(view, view, MIN_PERCENTAGE_VIEWED)).isFalse();
-    }
-
-    @Test
-    public void isMostlyVisible_whenViewIsNull_shouldReturnFalse() throws Exception {
-        assertThat(visibilityChecker.isVisible(null, null, MIN_PERCENTAGE_VIEWED)).isFalse();
-    }
-
-    @Test
-    public void addView_shouldClearViewAfterNumAccesses() {
-        // Access 1 time
-        subject.addView(view, MIN_PERCENTAGE_VIEWED);
-        assertThat(trackedViews).hasSize(1);
-
-        // Access 2-49 times
-        for (int i = 0; i < VisibilityTracker.NUM_ACCESSES_BEFORE_TRIMMING - 2; ++i) {
-            subject.addView(view2, MIN_PERCENTAGE_VIEWED);
-        }
-        assertThat(trackedViews).hasSize(2);
-
-        // 50th time
-        subject.addView(view2, MIN_PERCENTAGE_VIEWED);
-        assertThat(trackedViews).hasSize(2);
-
-        // 51-99
-        for (int i = 0; i < VisibilityTracker.NUM_ACCESSES_BEFORE_TRIMMING - 1; ++i) {
-            subject.addView(view2, MIN_PERCENTAGE_VIEWED);
-        }
-        assertThat(trackedViews).hasSize(2);
-
-        // 100
-        subject.addView(view2, MIN_PERCENTAGE_VIEWED);
-        assertThat(trackedViews).hasSize(1);
-    }
-
-    static View createViewMock(final int visibility,
-            final int visibleWidth,
-            final int visibleHeight,
-            final int viewWidth,
-            final int viewHeight,
-            final boolean isParentSet,
-            final boolean isOnScreen) {
-        View view = mock(View.class);
-        when(view.getContext()).thenReturn(new Activity());
-        when(view.getVisibility()).thenReturn(visibility);
-
-        when(view.getGlobalVisibleRect(any(Rect.class)))
-                .thenAnswer(new Answer<Boolean>() {
-                    @Override
-                    public Boolean answer(InvocationOnMock invocationOnMock) throws Throwable {
-                        Object[] args = invocationOnMock.getArguments();
-                        Rect rect = (Rect) args[0];
-                        rect.set(0, 0, visibleWidth, visibleHeight);
-                        return isOnScreen;
-                    }
-                });
-
-        when(view.getWidth()).thenReturn(viewWidth);
-        when(view.getHeight()).thenReturn(viewHeight);
-
-        if (isParentSet) {
-            when(view.getParent()).thenReturn(mock(ViewParent.class));
-        }
-
-        when(view.getViewTreeObserver()).thenCallRealMethod();
-
-        return view;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java
deleted file mode 100644
index 56f0bc59..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java
+++ /dev/null
@@ -1,49 +0,0 @@
-package com.mopub.nativeads.factories;
-
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.nativeads.CustomEventNative;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricGradleTestRunner;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.junit.Assert.fail;
-
-
-@Config(constants = BuildConfig.class)
-@RunWith(RobolectricGradleTestRunner.class)
-public class CustomEventNativeFactoryTest {
-
-    @Before
-    public void setUp() {
-        CustomEventNativeFactory.setInstance(new CustomEventNativeFactory());
-    }
-
-    @Test
-    public void create_withValidClassName_shouldCreateClass() throws Exception {
-        assertCustomEventClassCreated("com.mopub.nativeads.MoPubCustomEventNative");
-    }
-
-    @Test
-    public void create_withInvalidClassName_shouldThrowException() throws Exception {
-        try {
-            CustomEventNativeFactory.create("com.mopub.nativeads.inVaLiDClassssssName1231232131");
-            fail("CustomEventNativeFactory did not throw exception on create");
-        } catch (Exception e) {
-            // pass
-        }
-    }
-
-    @Test
-    public void create_withNullClassName_shouldReturnMoPubCustomEventNativeClass() throws Exception {
-        assertThat(CustomEventNativeFactory.create(null).getClass().getName()).isEqualTo("com.mopub.nativeads.MoPubCustomEventNative");
-    }
-
-    private void assertCustomEventClassCreated(final String className) throws Exception {
-        final CustomEventNative customEventNative = CustomEventNativeFactory.create(className);
-        assertThat(customEventNative.getClass().getName()).isEqualTo(className);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/MoPubShadowBitmap.java b/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/MoPubShadowBitmap.java
deleted file mode 100644
index 614254fc..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/MoPubShadowBitmap.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package com.mopub.nativeads.test.support;
-
-import android.graphics.Bitmap;
-
-import org.robolectric.annotation.Implements;
-import org.robolectric.shadows.ShadowBitmap;
-
-// XXX the config for a newly created ShadowBitmap is never set so we need to set it ourselves
-// https://github.com/robolectric/robolectric/issues/876
-@Implements(Bitmap.class)
-public class MoPubShadowBitmap extends ShadowBitmap {
-
-    public MoPubShadowBitmap() {
-        // can also be some other config value
-        setConfig(Bitmap.Config.ARGB_8888);
-    }
-}
-
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/MoPubShadowDisplay.java b/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/MoPubShadowDisplay.java
deleted file mode 100644
index 47ab9573..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/MoPubShadowDisplay.java
+++ /dev/null
@@ -1,29 +0,0 @@
-package com.mopub.nativeads.test.support;
-
-import android.graphics.Point;
-import android.view.Display;
-import android.view.Surface;
-
-import org.robolectric.annotation.Implementation;
-import org.robolectric.annotation.Implements;
-import org.robolectric.shadows.ShadowDisplay;
-
-/* Our old version of Robolectric doesn't have the newer Display.class methods implemented. */
-@Implements(Display.class)
-public class MoPubShadowDisplay extends ShadowDisplay {
-
-    public void getSize(Point size) {
-        size.set(getWidth(), getHeight());
-    }
-
-    private static int sRotation = Surface.ROTATION_0;
-
-    @Implementation
-    public int getRotation() {
-        return sRotation;
-    }
-
-    public static void setStaticRotation(int rotation) {
-        sRotation = rotation;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/TestCustomEventNativeFactory.java b/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/TestCustomEventNativeFactory.java
deleted file mode 100644
index f8122bb9..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/TestCustomEventNativeFactory.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package com.mopub.nativeads.test.support;
-
-import android.support.annotation.NonNull;
-
-import com.mopub.nativeads.CustomEventNative;
-import com.mopub.nativeads.factories.CustomEventNativeFactory;
-
-import static org.mockito.Mockito.mock;
-
-public class TestCustomEventNativeFactory extends CustomEventNativeFactory {
-    private CustomEventNative instance = mock(CustomEventNative.class);
-
-    public static CustomEventNative getSingletonMock() {
-        return getTestFactory().instance;
-    }
-
-    private static TestCustomEventNativeFactory getTestFactory() {
-        return ((TestCustomEventNativeFactory) CustomEventNativeFactory.instance);
-    }
-
-    @Override
-    protected CustomEventNative internalCreate(@NonNull final Class<? extends CustomEventNative> nativeClass) {
-        return instance;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java b/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
deleted file mode 100644
index bb85c2ed..00000000
--- a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
+++ /dev/null
@@ -1,472 +0,0 @@
-package com.mopub.network;
-
-import android.app.Activity;
-import android.location.Location;
-
-import com.mopub.common.AdFormat;
-import com.mopub.common.AdType;
-import com.mopub.common.DataKeys;
-import com.mopub.common.event.BaseEvent;
-import com.mopub.common.event.EventDispatcher;
-import com.mopub.common.event.MoPubEvents;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.ResponseHeader;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.volley.NetworkResponse;
-import com.mopub.volley.Response;
-
-import org.json.JSONException;
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import java.nio.charset.Charset;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Locale;
-import java.util.Map;
-import java.util.TreeMap;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class AdRequestTest {
-
-    @Mock private AdRequest.Listener mockListener;
-    @Mock private AdResponse mockAdResponse;
-    @Mock private EventDispatcher mockEventDispatcher;
-
-    private AdRequest subject;
-    private HashMap<String, String> defaultHeaders;
-    private Activity activity;
-    private String adUnitId;
-
-    @Before
-    public void setup() {
-        activity = Robolectric.buildActivity(Activity.class).create().get();
-        adUnitId = "testAdUnitId";
-        subject = new AdRequest("testUrl", AdFormat.NATIVE, adUnitId, activity, mockListener);
-        defaultHeaders = new HashMap<String, String>();
-        defaultHeaders.put(ResponseHeader.SCROLLABLE.getKey(), "0");
-        defaultHeaders.put(ResponseHeader.REDIRECT_URL.getKey(), "redirect");
-        defaultHeaders.put(ResponseHeader.CLICK_TRACKING_URL.getKey(), "click_tracking");
-        defaultHeaders.put(ResponseHeader.IMPRESSION_URL.getKey(), "impression");
-        defaultHeaders.put(ResponseHeader.FAIL_URL.getKey(), "fail_url");
-        defaultHeaders.put(ResponseHeader.REFRESH_TIME.getKey(), "30");
-        defaultHeaders.put(ResponseHeader.PLAY_VISIBLE_PERCENT.getKey(), "50%");
-        defaultHeaders.put(ResponseHeader.PAUSE_VISIBLE_PERCENT.getKey(), "25");
-        defaultHeaders.put(ResponseHeader.IMPRESSION_MIN_VISIBLE_PERCENT.getKey(), "33%");
-        defaultHeaders.put(ResponseHeader.IMPRESSION_VISIBLE_MS.getKey(), "2000");
-        defaultHeaders.put(ResponseHeader.MAX_BUFFER_MS.getKey(), "1000");
-
-        MoPubEvents.setEventDispatcher(mockEventDispatcher);
-    }
-
-    @After
-    public void teardown() {
-        // Reset our locale for other tests.
-        Locale.setDefault(Locale.US);
-        MoPubEvents.setEventDispatcher(null);
-    }
-
-    @Test
-    public void parseNetworkResponse_stringBody_shouldSucceed() throws Exception {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.HTML);
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-
-        assertThat(response.result).isNotNull();
-        assertThat(response.result.getStringBody()).isEqualTo("abc");
-    }
-
-    @Test
-    public void parseNetworkResponse_withStringBody_shouldLogScribeEvent() throws Exception {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.HTML);
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-
-        subject.parseNetworkResponse(testResponse);
-
-        verify(mockEventDispatcher).dispatch(any(BaseEvent.class));
-    }
-
-    @Test
-    public void parseNetworkResponse_withServerExtrasInResponseBody_shouldSucceed_shouldCombineServerExtras() throws Exception {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.HTML);
-        defaultHeaders.put(ResponseHeader.FULL_AD_TYPE.getKey(), "anything");
-        defaultHeaders.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "class name");
-        defaultHeaders.put(ResponseHeader.CUSTOM_EVENT_DATA.getKey(),
-                "{customEventKey1: value1, customEventKey2: value2}");
-
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-
-        // Check the server extras
-        final Map<String, String> serverExtras = response.result.getServerExtras();
-        assertThat(serverExtras).isNotNull();
-        assertThat(serverExtras).isNotEmpty();
-        assertThat(serverExtras.get(DataKeys.SCROLLABLE_KEY)).isEqualToIgnoringCase("false");
-        assertThat(serverExtras.get(DataKeys.REDIRECT_URL_KEY)).isEqualToIgnoringCase("redirect");
-        assertThat(serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY)).isEqualToIgnoringCase("click_tracking");
-
-        assertThat(serverExtras.get("customEventKey1")).isEqualTo("value1");
-        assertThat(serverExtras.get("customEventKey2")).isEqualTo("value2");
-    }
-
-    @Test
-    public void parseNetworkResponse_nonJsonStringBodyForNative_jsonParseShouldFail() {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.STATIC_NATIVE);
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-
-        assertThat(response.error).isNotNull();
-        assertThat(response.error).isExactlyInstanceOf(MoPubNetworkError.class);
-        assertThat(((MoPubNetworkError) response.error).getReason()).isEqualTo(MoPubNetworkError.Reason.BAD_BODY);
-    }
-
-    @Test
-    public void parseNetworkResponse_nonJsonStringBodyForNative_shouldNotLogScribeEvent() {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.STATIC_NATIVE);
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-
-        subject.parseNetworkResponse(testResponse);
-
-        verify(mockEventDispatcher, never()).dispatch(any(BaseEvent.class));
-    }
-
-    @Test
-    public void parseNetworkResponse_forNativeVideo_shouldSucceed() throws Exception {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.VIDEO_NATIVE);
-        NetworkResponse testResponse = new NetworkResponse(200,
-                "{\"abc\": \"def\"}".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-
-        // Check the server extras
-        final Map<String, String> serverExtras = response.result.getServerExtras();
-        assertThat(serverExtras).isNotNull();
-        assertThat(serverExtras).isNotEmpty();
-        assertThat(serverExtras.get(DataKeys.PLAY_VISIBLE_PERCENT)).isEqualTo("50");
-        assertThat(serverExtras.get(DataKeys.PAUSE_VISIBLE_PERCENT)).isEqualTo("25");
-        assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT)).isEqualTo("33");
-        assertThat(serverExtras.get(DataKeys.IMPRESSION_VISIBLE_MS)).isEqualTo("2000");
-        assertThat(serverExtras.get(DataKeys.MAX_BUFFER_MS)).isEqualTo("1000");
-    }
-
-    @Test
-    public void parseNetworkResponse_forNativeVideo_shouldCombineServerExtrasAndEventData() throws Exception {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.VIDEO_NATIVE);
-        defaultHeaders.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "class name");
-        defaultHeaders.put(ResponseHeader.CUSTOM_EVENT_DATA.getKey(),
-                "{customEventKey1: value1, customEventKey2: value2}");
-        NetworkResponse testResponse = new NetworkResponse(200,
-                "{\"abc\": \"def\"}".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-
-        // Check the server extras
-        final Map<String, String> serverExtras = response.result.getServerExtras();
-        assertThat(serverExtras).isNotNull();
-        assertThat(serverExtras).isNotEmpty();
-
-        assertThat(serverExtras.get(DataKeys.PLAY_VISIBLE_PERCENT)).isEqualTo("50");
-        assertThat(serverExtras.get(DataKeys.PAUSE_VISIBLE_PERCENT)).isEqualTo("25");
-        assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT)).isEqualTo("33");
-        assertThat(serverExtras.get(DataKeys.IMPRESSION_VISIBLE_MS)).isEqualTo("2000");
-        assertThat(serverExtras.get(DataKeys.MAX_BUFFER_MS)).isEqualTo("1000");
-
-        assertThat(serverExtras.get("customEventKey1")).isEqualTo("value1");
-        assertThat(serverExtras.get("customEventKey2")).isEqualTo("value2");
-    }
-
-    @Test
-    public void parseNetworkResponse_forNativeVideo_withInvalidValues_shouldSucceed_shouldParseNull() throws Exception {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.VIDEO_NATIVE);
-        defaultHeaders.put(ResponseHeader.PLAY_VISIBLE_PERCENT.getKey(), "-1");
-        defaultHeaders.put(ResponseHeader.PAUSE_VISIBLE_PERCENT.getKey(), "101%");
-        defaultHeaders.put(ResponseHeader.IMPRESSION_MIN_VISIBLE_PERCENT.getKey(), "XX%");
-        NetworkResponse testResponse = new NetworkResponse(200,
-                "{\"abc\": \"def\"}".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-
-        // Check the server extras
-        final Map<String, String> serverExtras = response.result.getServerExtras();
-        assertThat(serverExtras).isNotNull();
-        assertThat(serverExtras).isNotEmpty();
-        assertThat(serverExtras.get(DataKeys.PLAY_VISIBLE_PERCENT)).isNull();
-        assertThat(serverExtras.get(DataKeys.PAUSE_VISIBLE_PERCENT)).isNull();
-        assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT)).isNull();
-        assertThat(serverExtras.get(DataKeys.IMPRESSION_VISIBLE_MS)).isEqualTo("2000");
-        assertThat(serverExtras.get(DataKeys.MAX_BUFFER_MS)).isEqualTo("1000");
-    }
-
-
-    @Test
-    public void parseNetworkResponse_withWarmupHeaderTrue_shouldError() {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.STATIC_NATIVE);
-        defaultHeaders.put(ResponseHeader.WARMUP.getKey(), "1");
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-
-        assertThat(response.error).isNotNull();
-        assertThat(response.error).isInstanceOf(MoPubNetworkError.class);
-        assertThat(((MoPubNetworkError) response.error).getReason()).isEqualTo(MoPubNetworkError.Reason.WARMING_UP);
-    }
-
-    @Test
-    public void parseNetworkResponse_withWarmupHeaderTrue_shouldNotLogScribeEvent() {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.STATIC_NATIVE);
-        defaultHeaders.put(ResponseHeader.WARMUP.getKey(), "1");
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-
-        subject.parseNetworkResponse(testResponse);
-
-        verify(mockEventDispatcher, never()).dispatch(any(BaseEvent.class));
-    }
-
-    @Test
-    public void parseNetworkResponse_withRefreshTime_shouldIncludeRefreshTimeInResult() {
-        defaultHeaders.put(ResponseHeader.REFRESH_TIME.getKey(), "13");
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-        assertThat(response.result.getRefreshTimeMillis()).isEqualTo(13000);
-    }
-
-    @Test
-    public void parseNetworkResponse_withoutRefreshTime_shouldNotIncludeRefreshTime() {
-        defaultHeaders.remove(ResponseHeader.REFRESH_TIME.getKey());
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-        assertThat(response.result.getRefreshTimeMillis()).isNull();
-    }
-    
-    @Test
-    public void parseNetworkResponse_withClearAdType_withRefreshTimeHeader_shouldErrorAndIncludeRefreshTime() {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.CLEAR);
-
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-
-        assertThat(response.error).isNotNull();
-        assertThat(response.error).isInstanceOf(MoPubNetworkError.class);
-        final MoPubNetworkError moPubNetworkError = (MoPubNetworkError) response.error;
-        assertThat(moPubNetworkError.getReason()).isEqualTo(MoPubNetworkError.Reason.NO_FILL);
-        assertThat(moPubNetworkError.getRefreshTimeMillis()).isEqualTo(30000);
-    }
-
-    @Test
-    public void parseNetworkResponse_withClearAdType_withNoRefreshTimeHeader_shouldErrorAndNotIncludeRefreshTime() {
-        defaultHeaders.remove(ResponseHeader.REFRESH_TIME.getKey());
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.CLEAR);
-
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-
-        assertThat(response.error).isNotNull();
-        assertThat(response.error).isInstanceOf(MoPubNetworkError.class);
-        final MoPubNetworkError moPubNetworkError = (MoPubNetworkError) response.error;
-        assertThat(moPubNetworkError.getReason()).isEqualTo(MoPubNetworkError.Reason.NO_FILL);
-        assertThat(moPubNetworkError.getRefreshTimeMillis()).isNull();
-    }
-
-    @Test
-    public void parseNetworkResponse_withClearAdType_shouldLogScribeEvent() {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.CLEAR);
-
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-        subject.parseNetworkResponse(testResponse);
-
-        verify(mockEventDispatcher).dispatch(any(BaseEvent.class));
-    }
-
-    @Test
-    public void parseNetworkResponse_withBadJSON_shouldReturnError() {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.STATIC_NATIVE);
-        NetworkResponse badNativeNetworkResponse = new NetworkResponse(200,
-                "{[abc}".getBytes(Charset.defaultCharset()),
-                defaultHeaders, false);
-        subject = new AdRequest("testUrl", AdFormat.NATIVE, "testAdUnitId", activity, mockListener);
-
-        final Response<AdResponse> response = subject.parseNetworkResponse(badNativeNetworkResponse);
-
-        assertThat(response.error).isNotNull();
-        assertThat(response.error.getCause()).isExactlyInstanceOf(JSONException.class);
-    }
-
-    @Test
-    public void parseNetworkResponse_forRewardedAds_shouldSucceed() {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.REWARDED_VIDEO);
-        defaultHeaders.put(ResponseHeader.REWARDED_VIDEO_CURRENCY_NAME.getKey(), "currencyName");
-        defaultHeaders.put(ResponseHeader.REWARDED_VIDEO_CURRENCY_AMOUNT.getKey(), "25");
-        defaultHeaders.put(ResponseHeader.REWARDED_VIDEO_COMPLETION_URL.getKey(),
-                "http://completionUrl");
-        defaultHeaders.put(ResponseHeader.REWARDED_DURATION.getKey(), "15000");
-        defaultHeaders.put(ResponseHeader.SHOULD_REWARD_ON_CLICK.getKey(), "1");
-        NetworkResponse testResponse = new NetworkResponse(200,
-                "{\"abc\": \"def\"}".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-
-        assertThat(response.result.getAdType()).isEqualTo(AdType.REWARDED_VIDEO);
-        assertThat(response.result.getRewardedVideoCurrencyName()).isEqualTo("currencyName");
-        assertThat(response.result.getRewardedVideoCurrencyAmount()).isEqualTo("25");
-        assertThat(response.result.getRewardedVideoCompletionUrl()).isEqualTo(
-                "http://completionUrl");
-        assertThat(response.result.getRewardedDuration()).isEqualTo(15000);
-        assertThat(response.result.shouldRewardOnClick()).isTrue();
-    }
-
-    @Test
-    public void deliverResponse_shouldCallListenerOnSuccess() throws Exception {
-        subject.deliverResponse(mockAdResponse);
-        verify(mockListener).onSuccess(mockAdResponse);
-    }
-
-    @Test
-    public void getRequestId_shouldParseAndReturnRequestIdFromFailUrl() throws Exception {
-        String requestId = subject.getRequestId("https://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca&exclude=043fde1fe2f9470c9aa67fec262a0596&request_id=7fd6dd3bf1c84f87876b4740c1dd7baa&fail=1");
-
-        assertThat(requestId).isEqualTo("7fd6dd3bf1c84f87876b4740c1dd7baa");
-    }
-
-    @Test
-    public void getRequestId_withNullFailUrl_shouldReturnNull() throws Exception {
-        assertThat(subject.getRequestId(null)).isNull();
-    }
-
-    @Test
-    public void getRequestId_withUrlWithNoRequestIdParam_shouldReturnNull() throws Exception {
-        assertThat(subject.getRequestId("https://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca")).isNull();
-    }
-
-    @Test
-    public void getHeaders_withDefaultLocale_shouldReturnDefaultLanguageCode() throws Exception {
-        Map<String, String> expectedHeaders = new TreeMap<String, String>();
-        expectedHeaders.put(ResponseHeader.ACCEPT_LANGUAGE.getKey(), "en");
-
-        assertThat(subject.getHeaders()).isEqualTo(expectedHeaders);
-    }
-
-    @Test
-    public void getHeaders_withUserPreferredLocale_shouldReturnUserPreferredLanguageCode() throws Exception {
-        Map<String, String> expectedHeaders = new TreeMap<String, String>();
-        expectedHeaders.put(ResponseHeader.ACCEPT_LANGUAGE.getKey(), "fr");
-
-        // Assume user-preferred locale is fr_CA
-        activity.getResources().getConfiguration().locale = Locale.CANADA_FRENCH;
-
-        assertThat(subject.getHeaders()).isEqualTo(expectedHeaders);
-    }
-
-    @Test
-    public void getHeaders_withUserPreferredLocaleAsNull_shouldReturnDefaultLanguageCode() throws Exception {
-        Map<String, String> expectedHeaders = new TreeMap<String, String>();
-        expectedHeaders.put(ResponseHeader.ACCEPT_LANGUAGE.getKey(), "en");
-
-        // Assume user-preferred locale is null
-        activity.getResources().getConfiguration().locale = null;
-
-        assertThat(subject.getHeaders()).isEqualTo(expectedHeaders);
-    }
-
-    @Test
-    public void getHeaders_withUserPreferredLanguageAsEmptyString_shouldReturnDefaultLanguageCode() throws Exception {
-        Map<String, String> expectedHeaders = new TreeMap<String, String>();
-        expectedHeaders.put(ResponseHeader.ACCEPT_LANGUAGE.getKey(), "en");
-
-        // Assume user-preferred locale's language code is empty string after trimming
-        activity.getResources().getConfiguration().locale = new Locale(" ");
-
-        assertThat(subject.getHeaders()).isEqualTo(expectedHeaders);
-    }
-
-    @Test
-    public void getHeaders_withLocaleLanguageAsEmptyString_shouldNotAddLanguageHeader() throws Exception {
-        Map<String, String> expectedHeaders = Collections.emptyMap();
-
-        // Assume default locale's language code is empty string
-        Locale.setDefault(new Locale(""));
-
-        // Assume user-preferred locale's language code is empty string after trimming
-        activity.getResources().getConfiguration().locale = new Locale(" ");
-
-        assertThat(subject.getHeaders()).isEqualTo(expectedHeaders);
-
-
-    }
-
-    @Test
-    public void logScribeEvent_shouldLogEvent() throws Exception {
-        AdResponse mockAdResponse = mock(AdResponse.class);
-        when(mockAdResponse.getDspCreativeId()).thenReturn("dsp_creative_id");
-        when(mockAdResponse.getAdType()).thenReturn("html");
-        when(mockAdResponse.getNetworkType()).thenReturn("network_type");
-        when(mockAdResponse.getWidth()).thenReturn(320);
-        when(mockAdResponse.getHeight()).thenReturn(50);
-        when(mockAdResponse.getRequestId()).thenReturn("ac298c522b0e412b85ff81e4b9b51f03");
-
-        NetworkResponse networkResponse = new NetworkResponse(200, null, null, false, 300);
-
-        Location mockLocation = mock(Location.class);
-        when(mockLocation.getLatitude()).thenReturn(37.7833);
-        when(mockLocation.getLongitude()).thenReturn(-122.4167);
-        when(mockLocation.getAccuracy()).thenReturn((float) 2000.0);
-
-        doAnswer(new Answer() {
-            @Override
-            public Object answer(InvocationOnMock invocation) throws Throwable {
-                Object[] args = invocation.getArguments();
-                BaseEvent baseEvent = (BaseEvent) args[0];
-                assertThat(baseEvent.getName()).isEqualTo(BaseEvent.Name.AD_REQUEST);
-                assertThat(baseEvent.getCategory()).isEqualTo(BaseEvent.Category.REQUESTS);
-                assertThat(baseEvent.getSamplingRate()).isEqualTo(0.1);
-                assertThat(baseEvent.getAdUnitId()).isEqualTo(adUnitId);
-                assertThat(baseEvent.getDspCreativeId()).isEqualTo("dsp_creative_id");
-                assertThat(baseEvent.getAdType()).isEqualTo("html");
-                assertThat(baseEvent.getAdNetworkType()).isEqualTo("network_type");
-                assertThat(baseEvent.getAdWidthPx()).isEqualTo(320);
-                assertThat(baseEvent.getAdHeightPx()).isEqualTo(50);
-                assertThat(baseEvent.getGeoLat()).isEqualTo(37.7833);
-                assertThat(baseEvent.getGeoLon()).isEqualTo(-122.4167);
-                assertThat(baseEvent.getGeoAccuracy()).isEqualTo(2000.0);
-                assertThat(baseEvent.getPerformanceDurationMs()).isEqualTo(300);
-                assertThat(baseEvent.getRequestId()).isEqualTo("ac298c522b0e412b85ff81e4b9b51f03");
-                assertThat(baseEvent.getRequestStatusCode()).isEqualTo(200);
-                assertThat(baseEvent.getRequestUri()).isEqualTo("testUrl");
-                return null;
-            }
-        }).when(mockEventDispatcher).dispatch(any(BaseEvent.class));
-
-        subject.logScribeEvent(mockAdResponse, networkResponse, mockLocation);
-
-        verify(mockEventDispatcher).dispatch(any(BaseEvent.class));
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/network/CustomSSLSocketFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/network/CustomSSLSocketFactoryTest.java
deleted file mode 100644
index 01ba66f4..00000000
--- a/mopub-sdk/src/test/java/com/mopub/network/CustomSSLSocketFactoryTest.java
+++ /dev/null
@@ -1,149 +0,0 @@
-package com.mopub.network;
-
-import android.annotation.SuppressLint;
-import android.annotation.TargetApi;
-import android.net.SSLCertificateSocketFactory;
-import android.os.Build;
-import android.support.annotation.Nullable;
-
-import com.mopub.TestSdkHelper;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mockito;
-import org.powermock.api.mockito.PowerMockito;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.powermock.modules.junit4.PowerMockRunner;
-import org.robolectric.annotation.Config;
-
-import java.net.InetAddress;
-import java.net.Socket;
-
-import javax.net.ssl.HostnameVerifier;
-import javax.net.ssl.HttpsURLConnection;
-import javax.net.ssl.SSLHandshakeException;
-import javax.net.ssl.SSLSession;
-import javax.net.ssl.SSLSocket;
-
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.powermock.api.mockito.PowerMockito.mockStatic;
-
-@PrepareForTest(InetAddressUtils.class)
-@RunWith(PowerMockRunner.class)
-@Config(constants = BuildConfig.class)
-public class CustomSSLSocketFactoryTest {
-
-    private CustomSSLSocketFactory subject;
-    private SSLCertificateSocketFactory mockSSLCertificateSocketFactory;
-    private SSLSocketWithSetHostname mockSSLSocket;
-
-    @SuppressLint("SSLCertificateSocketFactoryCreateSocket")
-    @Before
-    public void setUp() throws Exception {
-        mockStatic(InetAddressUtils.class);
-        mockSSLCertificateSocketFactory = mock(SSLCertificateSocketFactory.class);
-        mockSSLSocket = mock(SSLSocketWithSetHostname.class);
-        Mockito.when(mockSSLCertificateSocketFactory.createSocket(any(InetAddress.class),
-                anyInt())).thenReturn(mockSSLSocket);
-        InetAddress mockInetAddress = mock(InetAddress.class);
-        PowerMockito.when(InetAddressUtils.getInetAddressByName(anyString())).thenReturn(
-                mockInetAddress);
-        subject = CustomSSLSocketFactory.getDefault(0);
-        subject.setCertificateSocketFactory(mockSSLCertificateSocketFactory);
-    }
-
-    @Test
-    public void createSocket_withSocketParam_withAutoCloseTrue_shouldCloseOriginalSocket() throws Exception {
-        final Socket mockSocket = mock(Socket.class);
-        final HostnameVerifier mockHostnameVerifier = mock(HostnameVerifier.class);
-        Mockito.when(mockHostnameVerifier.verify(eq("hostname"), any(SSLSession.class))).thenReturn(true);
-        HttpsURLConnection.setDefaultHostnameVerifier(mockHostnameVerifier);
-
-        subject.createSocket(mockSocket, "hostname", 443, true);
-
-        verify(mockSocket).close();
-        verifyNoMoreInteractions(mockSocket);
-    }
-
-    @Test
-    public void createSocket_withSocketParam_withAutoCloseFalse_shouldNotCloseOriginalSocket_shouldCallSetHostname() throws Exception {
-        final Socket mockSocket = mock(Socket.class);
-        final HostnameVerifier mockHostnameVerifier = mock(HostnameVerifier.class);
-        Mockito.when(mockHostnameVerifier.verify(eq("hostname"), any(SSLSession.class))).thenReturn(true);
-        HttpsURLConnection.setDefaultHostnameVerifier(mockHostnameVerifier);
-
-        subject.createSocket(mockSocket, "hostname", 443, false);
-
-        verify(mockSocket, never()).close();
-        verify(mockSSLSocket).getSupportedProtocols();
-        verify(mockSSLSocket).setEnabledProtocols(any(String[].class));
-        verify(mockSSLSocket).startHandshake();
-        verify(mockSSLSocket).getSession();
-        verify(mockSSLSocket).setHostname(any(String.class));
-        verifyNoMoreInteractions(mockSSLSocket);
-    }
-
-    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
-    @Test
-    public void setHostnameOnSocket_withAtLeastJellyBeanMR1_shouldEnableServerNameIdentification() {
-        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.JELLY_BEAN_MR1);
-
-        final SSLSocket mockSSLSocket = mock(SSLSocket.class);
-
-        CustomSSLSocketFactory.setHostnameOnSocket(mockSSLCertificateSocketFactory, mockSSLSocket,
-                "hostname");
-
-        verify(mockSSLCertificateSocketFactory).setHostname(mockSSLSocket, "hostname");
-    }
-
-    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
-    @Test
-    public void setHostnameOnSocket_withBelowJellyBeanMR1_shouldEnableServerNameIdentification() {
-        TestSdkHelper.setReportedSdkLevel(Build.VERSION_CODES.JELLY_BEAN);
-
-        final SSLSocket mockSSLSocket = mock(SSLSocket.class);
-
-        CustomSSLSocketFactory.setHostnameOnSocket(mockSSLCertificateSocketFactory, mockSSLSocket,
-                "hostname");
-
-        verify(mockSSLCertificateSocketFactory, never()).setHostname(mockSSLSocket, "hostname");
-    }
-
-    @Test
-    public void verifyServerName_withValidServerNameIdentification_shouldNotThrowSSLHandshakeException() throws Exception {
-        final SSLSocket mockSslSocket = mock(SSLSocket.class);
-        final HostnameVerifier mockHostnameVerifier = mock(HostnameVerifier.class);
-        Mockito.when(mockHostnameVerifier.verify(eq("hostname"), any(SSLSession.class))).thenReturn(true);
-        HttpsURLConnection.setDefaultHostnameVerifier(mockHostnameVerifier);
-
-        CustomSSLSocketFactory.verifyServerName(mockSslSocket, "hostname");
-    }
-
-    @Test(expected = SSLHandshakeException.class)
-    public void verifyServerName_withInvalidServerNameIdentification_shouldThrowSSLHandshakeException() throws Exception {
-        final SSLSocket mockSslSocket = mock(SSLSocket.class);
-        final HostnameVerifier mockHostnameVerifier = mock(HostnameVerifier.class);
-        Mockito.when(mockHostnameVerifier.verify(eq("hostname"), any(SSLSession.class))).thenReturn(false);
-        HttpsURLConnection.setDefaultHostnameVerifier(mockHostnameVerifier);
-
-        CustomSSLSocketFactory.verifyServerName(mockSslSocket, "hostname");
-    }
-
-    /**
-     * This class has the setHostname() method that CustomSSLSocketFactory#setHostnameOnSocket uses
-     * via reflection. This exists so we can Mockito.verify the method setHostname().
-     */
-    private abstract class SSLSocketWithSetHostname extends SSLSocket {
-        public void setHostname(@Nullable final String hostname) {
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/network/HeaderUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/network/HeaderUtilsTest.java
deleted file mode 100644
index 5fbf65b7..00000000
--- a/mopub-sdk/src/test/java/com/mopub/network/HeaderUtilsTest.java
+++ /dev/null
@@ -1,96 +0,0 @@
-package com.mopub.network;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import static com.mopub.common.util.ResponseHeader.AD_TIMEOUT;
-import static com.mopub.common.util.ResponseHeader.SCROLLABLE;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class HeaderUtilsTest {
-    private TestHttpResponseWithHeaders response;
-
-    @Before
-    public void setup() {
-        response = new TestHttpResponseWithHeaders(200, "all is well");
-    }
-
-    @Test
-    public void extractBooleanHeader_whenValueIsZero_shouldReturnFalse() throws Exception {
-        response.addHeader(SCROLLABLE.getKey(), "0");
-        assertThat(HeaderUtils.extractBooleanHeader(response, SCROLLABLE, false)).isFalse();
-
-        response.addHeader(SCROLLABLE.getKey(), "0");
-        assertThat(HeaderUtils.extractBooleanHeader(response, SCROLLABLE, true)).isFalse();
-    }
-
-    @Test
-    public void extractBooleanHeader_whenValueIsOne_shouldReturnTrue() throws Exception {
-        response.addHeader(SCROLLABLE.getKey(), "1");
-        assertThat(HeaderUtils.extractBooleanHeader(response, SCROLLABLE, false)).isTrue();
-
-        response.addHeader(SCROLLABLE.getKey(), "1");
-        assertThat(HeaderUtils.extractBooleanHeader(response, SCROLLABLE, true)).isTrue();
-    }
-
-    @Test
-    public void extractBooleanHeader_shouldReturnDefaultValue() throws Exception {
-        // no header added to response
-
-        assertThat(HeaderUtils.extractBooleanHeader(response, SCROLLABLE, false)).isFalse();
-        assertThat(HeaderUtils.extractBooleanHeader(response, SCROLLABLE, true)).isTrue();
-    }
-
-    @Test
-    public void extractIntegerHeader_shouldReturnIntegerValue() throws Exception {
-        response.addHeader(AD_TIMEOUT.getKey(), "10");
-        assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(10);
-
-        response.addHeader(AD_TIMEOUT.getKey(), "0");
-        assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(0);
-
-        response.addHeader(AD_TIMEOUT.getKey(), "-2");
-        assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(-2);
-    }
-
-    @Test
-    public void extractIntegerHeader_withDoubleValue_shouldTruncateValue() throws Exception {
-        response.addHeader(AD_TIMEOUT.getKey(), "3.14");
-        assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(3);
-
-        response.addHeader(AD_TIMEOUT.getKey(), "-3.14");
-        assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(-3);
-    }
-
-    @Test
-    public void extractIntegerHeader_whenNoHeaderPresent_shouldReturnNull() throws Exception {
-        // no header added to response
-        assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isNull();
-
-        response.addHeader(AD_TIMEOUT.getKey(), null);
-        assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isNull();
-    }
-
-    @Test
-    public void extractIntegerHeader_withNonsenseStringValue_shouldReturnNull() throws Exception {
-        response.addHeader(AD_TIMEOUT.getKey(), "llama!!guy");
-        assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isNull();
-    }
-
-    @Test
-    public void extractIntHeader_withInvalidHeader_shouldUseDefaultValue() throws Exception {
-        response.addHeader(AD_TIMEOUT.getKey(), "5");
-        assertThat(HeaderUtils.extractIntHeader(response, AD_TIMEOUT, 10)).isEqualTo(5);
-
-        response.addHeader(AD_TIMEOUT.getKey(), "five!");
-        assertThat(HeaderUtils.extractIntHeader(response, AD_TIMEOUT, 10)).isEqualTo(10);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java b/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java
deleted file mode 100644
index 8af5748e..00000000
--- a/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java
+++ /dev/null
@@ -1,206 +0,0 @@
-package com.mopub.network;
-
-import android.app.Activity;
-import android.os.Handler;
-
-import com.mopub.common.ClientMetadata;
-import com.mopub.common.Constants;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.DeviceUtils;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.volley.Cache;
-import com.mopub.volley.Network;
-import com.mopub.volley.Request;
-import com.mopub.volley.RequestQueue;
-import com.mopub.volley.toolbox.BasicNetwork;
-import com.mopub.volley.toolbox.DiskBasedCache;
-import com.mopub.volley.toolbox.HttpStack;
-import com.mopub.volley.toolbox.HurlStack;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import java.io.File;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class MoPubRequestQueueTest {
-
-    private MoPubRequestQueue subject;
-    private MoPubRequestQueue.DelayedRequestHelper delayedRequestHelper;
-    @Mock private ScribeRequest mockScribeRequest;
-    @Mock private MoPubRequestQueue.DelayedRequestHelper mockDelayedRequestHelper;
-    @Mock private Handler mockHandler;
-
-    @Before
-    public void setUp() {
-        // NOTE: It's possible to start a new test with a queue set from a previous test suite
-        // Make sure we get a fresh one
-        Networking.setRequestQueueForTesting(null);
-
-        Activity activity = Robolectric.buildActivity(Activity.class).create().get();
-
-        // Construct our dependencies & build the object
-        final ClientMetadata clientMetadata = ClientMetadata.getInstance(activity);
-        final HurlStack.UrlRewriter urlRewriter = new PlayServicesUrlRewriter(clientMetadata.getDeviceId(), activity);
-        // No Custom SSL Factory
-
-        final String userAgent = Networking.getUserAgent(activity.getApplicationContext());
-        HttpStack httpStack = new RequestQueueHttpStack(userAgent, urlRewriter);
-
-        Network network = new BasicNetwork(httpStack);
-        File volleyCacheDir = new File(activity.getCacheDir().getPath() + File.separator
-                + Networking.CACHE_DIRECTORY_NAME);
-        Cache cache = new DiskBasedCache(volleyCacheDir, (int) DeviceUtils.diskCacheSizeBytes(volleyCacheDir, Constants.TEN_MB));
-        subject = new MoPubRequestQueue(cache, network);
-        subject.start();
-
-        delayedRequestHelper = subject.new DelayedRequestHelper(mockScribeRequest, 100, mockHandler);
-    }
-
-    @After
-    public void tearDown() {
-        // NOTE: Make sure that we clear the queue after the last test in the test suite runs so
-        // that the next test suite starts fresh
-        Networking.setRequestQueueForTesting(null);
-    }
-
-    @Test
-    public void addDelayedRequest_shouldStartDelayedRequestHelper_shouldPutRequestInMap() throws Exception {
-        subject.addDelayedRequest(mockScribeRequest, mockDelayedRequestHelper);
-
-        verify(mockDelayedRequestHelper).start();
-        assertThat(subject.getDelayedRequests().get(mockScribeRequest)).isEqualTo(mockDelayedRequestHelper);
-        assertThat(subject.getDelayedRequests().entrySet()).hasSize(1);
-    }
-
-    @Test
-    public void addDelayedRequest_shouldCancelPreexistingRequest() throws Exception {
-        subject.addDelayedRequest(mockScribeRequest, mockDelayedRequestHelper);
-
-        verify(mockDelayedRequestHelper, never()).cancel();
-        verify(mockScribeRequest, never()).cancel();
-
-        subject.addDelayedRequest(mockScribeRequest, mockDelayedRequestHelper);
-
-        verify(mockDelayedRequestHelper).cancel();
-        verify(mockScribeRequest).cancel();
-    }
-
-    @Test
-    public void addDelayedRequest_withUniqueRequest_shouldNotCancelOtherRequests() throws Exception {
-        ScribeRequest mockScribeRequest2 = mock(ScribeRequest.class);
-        MoPubRequestQueue.DelayedRequestHelper mockDelayedRequestHelper2 = mock(MoPubRequestQueue.DelayedRequestHelper.class);
-        subject.addDelayedRequest(mockScribeRequest, mockDelayedRequestHelper);
-        subject.addDelayedRequest(mockScribeRequest2, mockDelayedRequestHelper2);
-
-        verify(mockDelayedRequestHelper, never()).cancel();
-        verify(mockScribeRequest, never()).cancel();
-
-        verify(mockDelayedRequestHelper2).start();
-        assertThat(subject.getDelayedRequests().get(mockScribeRequest)).isEqualTo(mockDelayedRequestHelper);
-        assertThat(subject.getDelayedRequests().get(mockScribeRequest2)).isEqualTo(mockDelayedRequestHelper2);
-        assertThat(subject.getDelayedRequests().entrySet()).hasSize(2);
-    }
-
-    @Test
-    public void cancelAll_shouldCancelAllRequestsInTheDelayedRequestMapThatPassTheFilter() throws Exception {
-        ScribeRequest mockScribeRequest2 = mock(ScribeRequest.class);
-        MoPubRequestQueue.DelayedRequestHelper mockDelayedRequestHelper2 = mock(MoPubRequestQueue.DelayedRequestHelper.class);
-        subject.addDelayedRequest(mockScribeRequest, mockDelayedRequestHelper);
-        subject.addDelayedRequest(mockScribeRequest2, mockDelayedRequestHelper2);
-
-
-        subject.cancelAll(new RequestQueue.RequestFilter() {
-            @Override
-            public boolean apply(Request<?> request) {
-                return request == mockScribeRequest;
-            }
-        });
-
-        verify(mockDelayedRequestHelper).cancel();
-        verify(mockScribeRequest).cancel();
-
-        verify(mockDelayedRequestHelper2, never()).cancel();
-        verify(mockScribeRequest2, never()).cancel();
-
-        assertThat(subject.getDelayedRequests().entrySet()).hasSize(1);
-        assertThat(subject.getDelayedRequests().get(mockScribeRequest2)).isEqualTo(mockDelayedRequestHelper2);
-    }
-
-    @Test
-    public void cancelAll_shouldCancelAllRequestsWithMatchingObjectTag() throws Exception {
-        ScribeRequest mockScribeRequest2 = mock(ScribeRequest.class);
-        MoPubRequestQueue.DelayedRequestHelper mockDelayedRequestHelper2 = mock(MoPubRequestQueue.DelayedRequestHelper.class);
-        subject.addDelayedRequest(mockScribeRequest, mockDelayedRequestHelper);
-        subject.addDelayedRequest(mockScribeRequest2, mockDelayedRequestHelper2);
-
-        when(mockScribeRequest.getTag()).thenReturn(1);
-        when(mockScribeRequest2.getTag()).thenReturn(2);
-
-        subject.cancelAll(1);
-
-        verify(mockDelayedRequestHelper).cancel();
-        verify(mockScribeRequest).cancel();
-
-        verify(mockDelayedRequestHelper2, never()).cancel();
-        verify(mockScribeRequest2, never()).cancel();
-
-        assertThat(subject.getDelayedRequests().entrySet()).hasSize(1);
-        assertThat(subject.getDelayedRequests().get(mockScribeRequest2)).isEqualTo(mockDelayedRequestHelper2);
-    }
-
-    @Test
-    public void cancel_shouldCancelMatchingRequest() throws Exception {
-        ScribeRequest mockScribeRequest2 = mock(ScribeRequest.class);
-        MoPubRequestQueue.DelayedRequestHelper mockDelayedRequestHelper2 = mock(MoPubRequestQueue.DelayedRequestHelper.class);
-        subject.addDelayedRequest(mockScribeRequest, mockDelayedRequestHelper);
-        subject.addDelayedRequest(mockScribeRequest2, mockDelayedRequestHelper2);
-
-        subject.cancel(mockScribeRequest);
-
-        verify(mockDelayedRequestHelper).cancel();
-        verify(mockScribeRequest).cancel();
-
-        verify(mockDelayedRequestHelper2, never()).cancel();
-        verify(mockScribeRequest2, never()).cancel();
-
-        assertThat(subject.getDelayedRequests().entrySet()).hasSize(1);
-        assertThat(subject.getDelayedRequests().get(mockScribeRequest2)).isEqualTo(mockDelayedRequestHelper2);
-    }
-    
-    @Test
-    public void DelayedRequestHelper_start_shouldPostDelayedRunnable() throws Exception {
-        delayedRequestHelper.start();
-        verify(mockHandler).postDelayed(delayedRequestHelper.mDelayedRunnable, 100);
-    }
-
-    @Test
-    public void DelayedRequestHelper_cancel_shouldCancelDelayedRunnable() throws Exception {
-        delayedRequestHelper.cancel();
-        verify(mockHandler).removeCallbacks(delayedRequestHelper.mDelayedRunnable);
-    }
-
-    @Test
-    public void DelayedRequestHelper_Runnable_run_shouldRemoveRequestFromDelayedRequestsMap_shouldAddRequestToQueue() throws Exception {
-        subject.addDelayedRequest(mockScribeRequest, 100);
-        assertThat(subject.getDelayedRequests().entrySet().size()).isEqualTo(1);
-        MoPubRequestQueue.DelayedRequestHelper delayedRequestHelper = subject.getDelayedRequests().get(mockScribeRequest);
-
-        delayedRequestHelper.mDelayedRunnable.run();
-
-        assertThat(subject.getDelayedRequests().entrySet()).isEmpty();
-        verify(mockScribeRequest).setRequestQueue(subject);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java b/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java
deleted file mode 100644
index ba472d52..00000000
--- a/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java
+++ /dev/null
@@ -1,69 +0,0 @@
-package com.mopub.network;
-
-import android.annotation.TargetApi;
-import android.app.Activity;
-import android.os.Build;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class NetworkingTest {
-    private Activity context;
-    static volatile String sUserAgent;
-
-    @Before
-    public void setUp() {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-    }
-
-    @After
-    public void tearDown() {
-        Networking.clearForTesting();
-        sUserAgent = null;
-    }
-
-    @Test
-    public void getUserAgent_usesCachedUserAgent() {
-        Networking.setUserAgentForTesting("some cached user agent");
-        String userAgent = Networking.getUserAgent(context);
-
-        assertThat(userAgent).isEqualTo("some cached user agent");
-    }
-
-    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
-    @Config(sdk = Build.VERSION_CODES.JELLY_BEAN)
-    @Test
-    public void getUserAgent_withSdkVersion16_shouldIncludeAndroid() {
-        String userAgent = Networking.getUserAgent(context);
-
-        assertThat(userAgent).containsIgnoringCase("android");
-    }
-
-    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
-    @Config(sdk = Build.VERSION_CODES.JELLY_BEAN_MR1)
-    @Test
-    public void getUserAgent_withSdkVersionGreaterThan16_shouldIncludeAndroid() {
-        String userAgent = Networking.getUserAgent(context);
-
-        assertThat(userAgent).containsIgnoringCase("android");
-    }
-
-    @Test
-    public void getCachedUserAgent_usesCachedUserAgent() {
-        Networking.setUserAgentForTesting("some cached user agent");
-        String userAgent = Networking.getCachedUserAgent();
-
-        assertThat(userAgent).isEqualTo("some cached user agent");
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/network/PlayServicesUrlRewriterTest.java b/mopub-sdk/src/test/java/com/mopub/network/PlayServicesUrlRewriterTest.java
deleted file mode 100644
index 042df01a..00000000
--- a/mopub-sdk/src/test/java/com/mopub/network/PlayServicesUrlRewriterTest.java
+++ /dev/null
@@ -1,71 +0,0 @@
-package com.mopub.network;
-
-import android.app.Activity;
-import android.content.Context;
-
-import com.mopub.common.GpsHelper;
-import com.mopub.common.GpsHelperTest;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.Reflection;
-import com.mopub.common.util.test.support.TestMethodBuilderFactory;
-import com.mopub.mobileads.BuildConfig;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class PlayServicesUrlRewriterTest {
-
-    private Reflection.MethodBuilder methodBuilder;
-    private PlayServicesUrlRewriter subject;
-
-    @Before
-    public void setUp() throws Exception {
-        Context context = Robolectric.buildActivity(Activity.class).create().get();
-        GpsHelper.setClassNamesForTesting();
-        methodBuilder = TestMethodBuilderFactory.getSingletonMock();
-        reset(methodBuilder);
-        subject = new PlayServicesUrlRewriter("sha:testDeviceID", context);
-    }
-
-    @Test
-    public void rewriteUrl_whenPlayServicesPresent_shouldUsePlayServicesValue() throws Exception {
-        GpsHelperTest.TestAdInfo adInfo = new GpsHelperTest.TestAdInfo();
-        when(methodBuilder.setStatic(any(Class.class))).thenReturn(methodBuilder);
-        when(methodBuilder.addParam(any(Class.class), any())).thenReturn(methodBuilder);
-        when(methodBuilder.execute()).thenReturn(
-                GpsHelper.GOOGLE_PLAY_SUCCESS_CODE,
-                adInfo,
-                adInfo.ADVERTISING_ID,
-                adInfo.LIMIT_AD_TRACKING_ENABLED
-        );
-
-        assertThat(subject.rewriteUrl("https://ads.mopub.com/m/ad?ad_id=abcece&udid=mp_tmpl_advertising_id&dnt=mp_tmpl_do_not_track"))
-                .isEqualToIgnoringCase("https://ads.mopub.com/m/ad?ad_id=abcece&udid=ifa%3A38400000-8cf0-11bd-b23e-10b96e40000d&dnt=1");
-    }
-
-    @Test
-    public void rewriteUrl_whenPlayServicesNotPresent_shouldUseDeviceValue() throws Exception {
-        when(methodBuilder.setStatic(any(Class.class))).thenReturn(methodBuilder);
-        when(methodBuilder.addParam(any(Class.class), any())).thenReturn(methodBuilder);
-        // return error code so it fails
-        when(methodBuilder.execute()).thenReturn(GpsHelper.GOOGLE_PLAY_SUCCESS_CODE + 1);
-
-        assertThat(subject.rewriteUrl("https://ads.mopub.com/m/ad?ad_id=abcece&udid=mp_tmpl_advertising_id&dnt=mp_tmpl_do_not_track"))
-                .isEqualToIgnoringCase("https://ads.mopub.com/m/ad?ad_id=abcece&udid=sha%3AtestDeviceId&dnt=0");
-    }
-
-    @Test
-    public void rewriteUrl_noTemplates_shouldReturnIdentical() throws Exception {
-        assertThat(subject.rewriteUrl("https://ads.mopub.com/m/ad")).isEqualTo("https://ads.mopub.com/m/ad");
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/network/RequestManagerTest.java b/mopub-sdk/src/test/java/com/mopub/network/RequestManagerTest.java
deleted file mode 100644
index a9a52e2c..00000000
--- a/mopub-sdk/src/test/java/com/mopub/network/RequestManagerTest.java
+++ /dev/null
@@ -1,141 +0,0 @@
-package com.mopub.network;
-
-import android.os.Looper;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.volley.Request;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class RequestManagerTest {
-
-    private ScribeRequestManager subject;
-    @Mock private ScribeRequest.ScribeRequestFactory mockScribeRequestFactory;
-    @Mock private ScribeBackoffPolicy mockScribeBackoffPolicy;
-    @Mock private ScribeRequest mockScribeRequest;
-    @Mock private MoPubRequestQueue mockRequestQueue;
-
-    @Before
-    public void setUp() {
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-
-        subject = new ScribeRequestManager(Looper.getMainLooper());
-        when(mockScribeRequestFactory.createRequest(subject)).thenReturn(mockScribeRequest);
-    }
-
-    @Test
-    public void makeRequest_shouldAddRequestToQueue() throws Exception {
-        subject.makeRequest(mockScribeRequestFactory, mockScribeBackoffPolicy);
-
-        verify(mockRequestQueue).add(mockScribeRequest);
-    }
-
-
-    @Test
-    public void makeRequest_shouldCancelTheCurrentRequest() throws Exception {
-        subject.makeRequest(mockScribeRequestFactory, mockScribeBackoffPolicy);
-        Request<?> request = subject.getCurrentRequest();
-
-        subject.makeRequest(mockScribeRequestFactory, mockScribeBackoffPolicy);
-
-        verify(mockRequestQueue).cancel(request);
-    }
-
-    @Test
-    public void cancelRequest_shouldCancelRequestInQueue_shouldClearRequest() throws Exception {
-        subject.makeRequest(mockScribeRequestFactory, mockScribeBackoffPolicy);
-        subject.cancelRequest();
-
-        verify(mockRequestQueue).cancel(mockScribeRequest);
-        assertThat(subject.getCurrentRequest()).isNull();
-    }
-
-    @Test
-    public void cancelRequest_withNullRequestQueue_shouldOnlyClearCurrentRequest() throws Exception {
-        Networking.setRequestQueueForTesting(null);
-
-        subject.makeRequest(mockScribeRequestFactory, mockScribeBackoffPolicy);
-        subject.cancelRequest();
-
-        verify(mockRequestQueue, never()).cancel(mockScribeRequest);
-        assertThat(subject.getCurrentRequest()).isNull();
-    }
-
-    @Test
-    public void cancelRequest_withNullCurrentRequest_shouldOnlyClearCurrentRequest() throws Exception {
-        subject.cancelRequest();
-
-        verify(mockRequestQueue, never()).cancel(mockScribeRequest);
-        assertThat(subject.getCurrentRequest()).isNull();
-    }
-
-    @Test
-    public void makeRequestInternal_shouldAddNewRequestToQueue() throws Exception {
-        subject.makeRequest(mockScribeRequestFactory, mockScribeBackoffPolicy);
-        reset(mockRequestQueue);
-
-        ScribeRequest previousRequest = (ScribeRequest) subject.getCurrentRequest();
-        ScribeRequest nextRequest = mock(ScribeRequest.class);
-        when(mockScribeRequestFactory.createRequest(subject)).thenReturn(nextRequest);
-
-        subject.makeRequestInternal();
-
-        verify(mockRequestQueue).add(nextRequest);
-        verify(mockRequestQueue, never()).addDelayedRequest(any(Request.class), anyInt());
-        assertThat(previousRequest).isNotEqualTo(nextRequest);
-    }
-
-    @Test
-    public void makeRequestInternal_withRetryCountGreaterThan0_shouldAddNewDelayedRequestToQueue() throws Exception {
-        when(mockScribeBackoffPolicy.getRetryCount()).thenReturn(1);
-        when(mockScribeBackoffPolicy.getBackoffMs()).thenReturn(100);
-        subject.makeRequest(mockScribeRequestFactory, mockScribeBackoffPolicy);
-        reset(mockRequestQueue);
-
-        ScribeRequest previousRequest = (ScribeRequest) subject.getCurrentRequest();
-        ScribeRequest nextRequest = mock(ScribeRequest.class);
-        when(mockScribeRequestFactory.createRequest(subject)).thenReturn(nextRequest);
-
-        subject.makeRequestInternal();
-
-        verify(mockRequestQueue).addDelayedRequest(nextRequest, 100);
-        verify(mockRequestQueue, never()).add(any(Request.class));
-        assertThat(previousRequest).isNotEqualTo(nextRequest);
-    }
-
-    @Test
-    public void makeRequestInternal_withNullRequestQueue_shouldClearCurrentRequest_shouldNotAddRequestToQueue() throws Exception {
-        Networking.setRequestQueueForTesting(null);
-
-        subject.makeRequest(mockScribeRequestFactory, mockScribeBackoffPolicy);
-
-        verify(mockRequestQueue, never()).add(any(Request.class));
-        verify(mockRequestQueue, never()).addDelayedRequest(any(Request.class), anyInt());
-        assertThat(subject.getCurrentRequest()).isNull();
-    }
-
-    @Test
-    public void clearRequest_shouldSetCurrentRequestToNull() throws Exception {
-        subject.makeRequest(mockScribeRequestFactory, mockScribeBackoffPolicy);
-        assertThat(subject.getCurrentRequest()).isNotNull();
-        subject.clearRequest();
-        assertThat(subject.getCurrentRequest()).isNull();
-    }
-}
-
diff --git a/mopub-sdk/src/test/java/com/mopub/network/ScribeBackoffPolicyTest.java b/mopub-sdk/src/test/java/com/mopub/network/ScribeBackoffPolicyTest.java
deleted file mode 100644
index 794121a1..00000000
--- a/mopub-sdk/src/test/java/com/mopub/network/ScribeBackoffPolicyTest.java
+++ /dev/null
@@ -1,132 +0,0 @@
-package com.mopub.network;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.volley.NetworkResponse;
-import com.mopub.volley.NoConnectionError;
-import com.mopub.volley.VolleyError;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.fail;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class ScribeBackoffPolicyTest {
-
-    private ScribeBackoffPolicy subject;
-
-    @Before
-    public void setUp() {
-        subject = new ScribeBackoffPolicy();
-    }
-
-    @Test
-    public void backoff_with503Error_shouldUpdateBackoffTime() throws Exception {
-        NetworkResponse networkResponse = new NetworkResponse(503, null, null, false);
-        VolleyError volleyError = new VolleyError(networkResponse);
-
-        assertThat(subject.getBackoffMs()).isEqualTo(0);
-        assertThat(subject.getRetryCount()).isEqualTo(0);
-
-        subject.backoff(volleyError);
-
-        assertThat(subject.getBackoffMs()).isEqualTo(60000);
-        assertThat(subject.getRetryCount()).isEqualTo(1);
-    }
-
-    @Test
-    public void backoff_with504Error_shouldUpdateBackoffTime() throws Exception {
-        NetworkResponse networkResponse = new NetworkResponse(504, null, null, false);
-        VolleyError volleyError = new VolleyError(networkResponse);
-
-        assertThat(subject.getBackoffMs()).isEqualTo(0);
-        assertThat(subject.getRetryCount()).isEqualTo(0);
-
-        subject.backoff(volleyError);
-
-        assertThat(subject.getBackoffMs()).isEqualTo(60000);
-        assertThat(subject.getRetryCount()).isEqualTo(1);
-    }
-
-    @Test
-    public void backoff_withNoConnectionError_shouldUpdateBackoffTime() throws Exception {
-        VolleyError volleyError = new NoConnectionError();
-
-        assertThat(subject.getBackoffMs()).isEqualTo(0);
-        assertThat(subject.getRetryCount()).isEqualTo(0);
-
-        subject.backoff(volleyError);
-
-        assertThat(subject.getBackoffMs()).isEqualTo(60000);
-        assertThat(subject.getRetryCount()).isEqualTo(1);
-    }
-
-    @Test(expected = VolleyError.class)
-    public void backoff_withOtherErrorType_shouldRethrowException() throws Exception {
-        NetworkResponse networkResponse = new NetworkResponse(500, null, null, false);
-        VolleyError volleyError = new VolleyError(networkResponse);
-
-        subject.backoff(volleyError);
-    }
-
-    @Test
-    public void backoff_shouldUpdateBackoffTime5TimesMax() throws Exception {
-        VolleyError volleyError = new NoConnectionError();
-
-        assertThat(subject.getBackoffMs()).isEqualTo(0);
-        assertThat(subject.getRetryCount()).isEqualTo(0);
-        assertThat(subject.hasAttemptRemaining()).isTrue();
-
-        subject.backoff(volleyError);
-
-        assertThat(subject.getBackoffMs()).isEqualTo(60000);
-        assertThat(subject.getRetryCount()).isEqualTo(1);
-        assertThat(subject.hasAttemptRemaining()).isTrue();
-
-        subject.backoff(volleyError);
-
-        assertThat(subject.getBackoffMs()).isEqualTo(120000);
-        assertThat(subject.getRetryCount()).isEqualTo(2);
-        assertThat(subject.hasAttemptRemaining()).isTrue();
-
-        subject.backoff(volleyError);
-
-        assertThat(subject.getBackoffMs()).isEqualTo(240000);
-        assertThat(subject.getRetryCount()).isEqualTo(3);
-        assertThat(subject.hasAttemptRemaining()).isTrue();
-
-        subject.backoff(volleyError);
-
-        assertThat(subject.getBackoffMs()).isEqualTo(480000);
-        assertThat(subject.getRetryCount()).isEqualTo(4);
-        assertThat(subject.hasAttemptRemaining()).isTrue();
-
-        subject.backoff(volleyError);
-
-        assertThat(subject.getBackoffMs()).isEqualTo(960000);
-        assertThat(subject.getRetryCount()).isEqualTo(5);
-        assertThat(subject.hasAttemptRemaining()).isFalse();
-    }
-
-    @Test(expected = NoConnectionError.class)
-    public void backoff_withNoAttemptsRemaining_shouldRethrowVolleyException() throws Exception {
-        VolleyError volleyError = new NoConnectionError();
-
-        try {
-            subject.backoff(volleyError);
-            subject.backoff(volleyError);
-            subject.backoff(volleyError);
-            subject.backoff(volleyError);
-            subject.backoff(volleyError);
-        } catch (Exception e) {
-            fail("Exception should not be thrown from above backoffs.");
-        }
-
-        subject.backoff(volleyError);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/network/ScribeRequestManagerTest.java b/mopub-sdk/src/test/java/com/mopub/network/ScribeRequestManagerTest.java
deleted file mode 100644
index 7fc1b530..00000000
--- a/mopub-sdk/src/test/java/com/mopub/network/ScribeRequestManagerTest.java
+++ /dev/null
@@ -1,80 +0,0 @@
-package com.mopub.network;
-
-import android.os.Looper;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.volley.NoConnectionError;
-import com.mopub.volley.Request;
-import com.mopub.volley.VolleyError;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.doThrow;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class ScribeRequestManagerTest {
-
-    private ScribeRequestManager subject;
-    @Mock private ScribeRequest.ScribeRequestFactory mockScribeRequestFactory;
-    @Mock private ScribeBackoffPolicy mockScribeBackoffPolicy;
-    @Mock private ScribeRequest mockScribeRequest;
-    @Mock private MoPubRequestQueue mockRequestQueue;
-
-    @Before
-    public void setUp() {
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-
-        subject = new ScribeRequestManager(Looper.getMainLooper());
-        when(mockScribeRequestFactory.createRequest(subject)).thenReturn(mockScribeRequest);
-        subject.makeRequest(mockScribeRequestFactory, mockScribeBackoffPolicy);
-    }
-
-    @Test
-    public void createRequest_shouldCreateNewScribeRequest() throws Exception {
-        Request request = subject.createRequest();
-        assertThat(request).isEqualTo(mockScribeRequest);
-    }
-
-    @Test
-    public void onResponse_shouldClearRequest() throws Exception {
-        subject.onResponse();
-        assertThat(subject.getCurrentRequest()).isNull();
-    }
-
-    @Test
-    public void onErrorResponse_withBackoffApplied_shouldCallBackoff_shouldMakeDelayedRequest() throws Exception {
-        when(mockScribeBackoffPolicy.getRetryCount()).thenReturn(1);
-        when(mockScribeBackoffPolicy.getBackoffMs()).thenReturn(100);
-
-        VolleyError volleyError = new NoConnectionError();
-        subject.onErrorResponse(volleyError);
-
-        verify(mockScribeBackoffPolicy).backoff(volleyError);
-        verify(mockRequestQueue).addDelayedRequest(mockScribeRequest, 100);
-    }
-
-    @Test
-    public void onErrorResponse_withBackoffNotApplied_shouldClearRequest() throws Exception {
-        reset(mockRequestQueue);
-
-        VolleyError volleyError = new NoConnectionError();
-        doThrow(new VolleyError()).when(mockScribeBackoffPolicy).backoff(volleyError);
-
-        subject.onErrorResponse(volleyError);
-
-        verify(mockScribeBackoffPolicy).backoff(volleyError);
-        verify(mockRequestQueue, never()).add(mockScribeRequest);
-        assertThat(subject.getCurrentRequest()).isNull();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/network/ScribeRequestTest.java b/mopub-sdk/src/test/java/com/mopub/network/ScribeRequestTest.java
deleted file mode 100644
index 3af7d466..00000000
--- a/mopub-sdk/src/test/java/com/mopub/network/ScribeRequestTest.java
+++ /dev/null
@@ -1,86 +0,0 @@
-package com.mopub.network;
-
-import android.app.Activity;
-
-import com.mopub.common.event.BaseEvent;
-import com.mopub.common.event.EventSerializer;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.volley.DefaultRetryPolicy;
-import com.mopub.volley.NetworkResponse;
-import com.mopub.volley.Response;
-
-import org.json.JSONArray;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import java.nio.charset.Charset;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class ScribeRequestTest {
-
-    private ScribeRequest subject;
-    @Mock private List<BaseEvent> mockEvents;
-    @Mock private EventSerializer mockEventSerializer;
-    @Mock private ScribeRequest.Listener mockListener;
-
-    @Before
-    public void setUp() {
-        Activity activity = Robolectric.buildActivity(Activity.class).create().get();
-        Networking.getRequestQueue(activity);
-
-        subject = new ScribeRequest("url", mockEvents, mockEventSerializer, mockListener);
-    }
-
-    @Test
-    public void constructor_shouldSetShouldCacheToFalse() throws Exception {
-        assertThat(subject.shouldCache()).isFalse();
-    }
-
-    @Test
-    public void constructor_shouldSetRetryPolicyToDefaultRetryPolicy() throws Exception {
-        assertThat(subject.getRetryPolicy()).isExactlyInstanceOf(DefaultRetryPolicy.class);
-    }
-
-    @Test
-    public void getParams_returnJsonSerializedEventsInMap() throws Exception {
-        JSONArray mockJsonArray = mock(JSONArray.class);
-        when(mockJsonArray.toString()).thenReturn("jsonArrayToString");
-        when(mockEventSerializer.serializeAsJson(mockEvents)).thenReturn(mockJsonArray);
-
-        Map<String, String> params = subject.getParams();
-
-        verify(mockEventSerializer).serializeAsJson(mockEvents);
-        assertThat(params.keySet().size()).isEqualTo(1);
-        assertThat(params.get("log")).isEqualTo("jsonArrayToString");
-    }
-    
-    @Test
-    public void parseNetworkResponse_shouldReturnSuccessResponse() throws Exception {
-        NetworkResponse networkResponse = new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), new HashMap<String, String>(), false);
-
-        Response<Void> response = subject.parseNetworkResponse(networkResponse);
-
-        assertThat(response.isSuccess()).isTrue();
-    }
-
-    @Test
-    public void deliverResponse_shouldNotifyListener() throws Exception {
-        subject.deliverResponse(null);
-
-        verify(mockListener).onResponse();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/network/TrackingRequestTest.java b/mopub-sdk/src/test/java/com/mopub/network/TrackingRequestTest.java
deleted file mode 100644
index 62838f9e..00000000
--- a/mopub-sdk/src/test/java/com/mopub/network/TrackingRequestTest.java
+++ /dev/null
@@ -1,115 +0,0 @@
-package com.mopub.network;
-
-import android.app.Activity;
-import android.content.Context;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.mobileads.VastErrorCode;
-import com.mopub.mobileads.VastTracker;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import java.util.Arrays;
-
-import static com.mopub.common.VolleyRequestMatcher.isUrl;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.argThat;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class TrackingRequestTest {
-
-    @Mock
-    private MoPubRequestQueue mockRequestQueue;
-    private Context context;
-    private String url;
-
-
-    @Before
-    public void setup() {
-        context = (Context) Robolectric.buildActivity(Activity.class).create().get();
-        url = "testUrl";
-        Networking.setRequestQueueForTesting(mockRequestQueue);
-    }
-
-    @Test
-    public void makeTrackingHttpRequest_shouldMakeTrackingHttpRequestWithWebViewUserAgent() throws Exception {
-        TrackingRequest.makeTrackingHttpRequest(url, context);
-
-        verify(mockRequestQueue).add(any(TrackingRequest.class));
-    }
-
-    @Test
-    public void makeTrackingHttpRequest_withNullUrl_shouldNotMakeTrackingHttpRequest() throws Exception {
-        TrackingRequest.makeTrackingHttpRequest((String) null, context);
-
-        verify(mockRequestQueue, never()).add(any(TrackingRequest.class));
-    }
-
-    @Test
-    public void makeTrackingHttpRequest_withNullContext_shouldNotMakeTrackingHttpRequest() throws Exception {
-        TrackingRequest.makeTrackingHttpRequest(url, null);
-
-        verify(mockRequestQueue, never()).add(any(TrackingRequest.class));
-    }
-
-    @Test
-    public void makeVastTrackingHttpRequest_shouldSubstituteMacros_shouldMakeSingleRequest() throws Exception {
-        VastTracker vastTracker = new VastTracker("uri?errorcode=[ERRORCODE]&contentplayhead=[CONTENTPLAYHEAD]&asseturi=[ASSETURI]");
-        TrackingRequest.makeVastTrackingHttpRequest(
-                Arrays.asList(vastTracker),
-                VastErrorCode.UNDEFINED_ERROR,
-                123,
-                "assetUri",
-                context
-        );
-
-        verify(mockRequestQueue).add(argThat(isUrl(
-                "uri?errorcode=900&contentplayhead=00:00:00.123&asseturi=assetUri")));
-
-        TrackingRequest.makeVastTrackingHttpRequest(
-                Arrays.asList(vastTracker),
-                VastErrorCode.UNDEFINED_ERROR,
-                123,
-                "assetUri",
-                context
-        );
-
-        verifyNoMoreInteractions(mockRequestQueue);
-    }
-
-    @Test
-    public void makeVastTrackingHttpRequest_withRepeatableRequest_shouldMakeMultipleTrackingRequests() throws Exception {
-        VastTracker vastTracker = new VastTracker("uri?errorcode=[ERRORCODE]&contentplayhead=[CONTENTPLAYHEAD]&asseturi=[ASSETURI]");
-        TrackingRequest.makeVastTrackingHttpRequest(
-                Arrays.asList(vastTracker),
-                VastErrorCode.UNDEFINED_ERROR,
-                123,
-                "assetUri",
-                context
-        );
-
-        verify(mockRequestQueue).add(argThat(isUrl(
-                "uri?errorcode=900&contentplayhead=00:00:00.123&asseturi=assetUri")));
-
-        TrackingRequest.makeVastTrackingHttpRequest(
-                Arrays.asList(vastTracker),
-                VastErrorCode.UNDEFINED_ERROR,
-                123,
-                "assetUri",
-                context
-        );
-
-        verify(mockRequestQueue).add(argThat(isUrl(
-                "uri?errorcode=900&contentplayhead=00:00:00.123&asseturi=assetUri")));
-    }
-}
diff --git a/mopub-sdk/src/test/resources/robolectric.properties b/mopub-sdk/src/test/resources/robolectric.properties
deleted file mode 100644
index 3cbe9a8d..00000000
--- a/mopub-sdk/src/test/resources/robolectric.properties
+++ /dev/null
@@ -1,3 +0,0 @@
-sdk=21
-shadows=com.mopub.nativeads.test.support.MoPubShadowDisplay,com.mopub.nativeads.test.support.MoPubShadowBitmap,com.mopub.mobileads.test.support.ShadowVastVideoView
-manifest=src/main/AndroidManifest.xml
\ No newline at end of file
diff --git a/settings.gradle b/settings.gradle
index e0667c15..8932a3ee 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,4 +1,2 @@
 rootProject.name = 'mopub-android'
-include ':mopub-sdk', ':mopub-sample', ':mopub-sdk:mopub-sdk-base', ':mopub-sdk:mopub-sdk-banner',
-        ':mopub-sdk:mopub-sdk-interstitial', ':mopub-sdk:mopub-sdk-rewardedvideo',
-        ':mopub-sdk:mopub-sdk-native-static', ':mopub-sdk:mopub-sdk-native-video'
+include ':mopub-sdk', ':mopub-sdk:mopub-sdk-base', ':mopub-sdk:mopub-sdk-native-static'
