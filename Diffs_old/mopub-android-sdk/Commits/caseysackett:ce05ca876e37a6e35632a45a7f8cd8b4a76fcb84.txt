diff --git a/CHANGELOG.md b/CHANGELOG.md
index 70dd9e1f..21b0f704 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -13,6 +13,14 @@
   - All `WebView`s are removed from their parents before `destroy()`; fixes [GitHub issue #38](https://github.com/mopub/mopub-android-sdk/issues/38)
   - Removed previously-deprecated `HTML5AdView`
   
+### Version 1.17.3 (Mar 19, 2014)
+
+  - Added safeguards to prevent two different `MoPubInterstitial` objects from listening in on one other's lifecycle callbacks
+  - Disabled Javascript loading into `destroy()`ed `WebView`s; fixes [GitHub issue #62](https://github.com/mopub/mopub-android-sdk/issues/62)
+  - Fixed an `IllegalArgumentException` resulting from VAST videos with malformed redirect tags
+  - MRAID ads that utilize `mraid.open()` now correctly record a click event
+  - Added missing `FLAG_ACTIVITY_NEW_TASK` to `VastVideoView`'s intent creation; fixes part of [GitHub issue #56](https://github.com/mopub/mopub-android-sdk/issues/56)
+  
 ### Version 1.17.2 (Feb 20, 2014)
 
   - Updated InMobi custom events to support InMobi SDK 4.0.3+ only
diff --git a/README.md b/README.md
index 4465e0d9..1fa7062d 100644
--- a/README.md
+++ b/README.md
@@ -27,7 +27,6 @@ Integration instructions are available on the [wiki](https://github.com/mopub/mo
 
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for details.
 
-  - Updated InMobi custom events
   - Bug fixes
 
 ### Changes to InMobi Custom Event Integrations
diff --git a/mopub-sdk/.classpath b/mopub-sdk/.classpath
index 537dbb71..73fa08b7 100644
--- a/mopub-sdk/.classpath
+++ b/mopub-sdk/.classpath
@@ -7,10 +7,8 @@
 	<classpathentry kind="lib" path="libs/android-support-v4.jar"/>
 	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
 	<classpathentry kind="lib" path="libs/MMSDK.jar"/>
-	<classpathentry kind="lib" path="libs/InMobiAdNetwork-3.7.1.jar"/>
-	<classpathentry kind="lib" path="libs/InMobiCommons-3.7.1.jar"/>
 	<classpathentry kind="lib" path="libs/greystripe-android-sdk-2.3.0.jar"/>
-	<classpathentry kind="lib" path="libs/GoogleAdMobAdsSdk-6.4.1.jar"/>
 	<classpathentry kind="lib" path="libs/amazon-ads-5.1.153.jar"/>
+	<classpathentry kind="lib" path="libs/InMobi-4.1.1.jar"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/mopub-sdk/build.gradle b/mopub-sdk/build.gradle
new file mode 100644
index 00000000..88a35b5f
--- /dev/null
+++ b/mopub-sdk/build.gradle
@@ -0,0 +1,25 @@
+apply plugin: 'android-library'
+
+dependencies {
+    compile fileTree(dir: 'libs', include: '*.jar')
+}
+
+android {
+    compileSdkVersion 19
+    buildToolsVersion "17.0.0"
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src/main/java']
+            resources.srcDirs = ['src/main/java']
+            aidl.srcDirs = ['src/main/java']
+            renderscript.srcDirs = ['src/main/java']
+            res.srcDirs = ['res']
+            assets.srcDirs = ['assets']
+        }
+
+        // Move the tests to tests/java, tests/res, etc...
+        instrumentTest.setRoot('tests')
+    }
+}
diff --git a/mopub-sdk/libs/GoogleAdMobAdsSdk-6.4.1.jar b/mopub-sdk/libs/GoogleAdMobAdsSdk-6.4.1.jar
deleted file mode 100644
index de667541..00000000
Binary files a/mopub-sdk/libs/GoogleAdMobAdsSdk-6.4.1.jar and /dev/null differ
diff --git a/mopub-sdk/libs/GooglePlayServicesBanner.java b/mopub-sdk/libs/GooglePlayServicesBanner.java
new file mode 100644
index 00000000..0a511e0a
--- /dev/null
+++ b/mopub-sdk/libs/GooglePlayServicesBanner.java
@@ -0,0 +1,147 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.util.Log;
+
+import java.util.Map;
+
+import com.mopub.mobileads.util.Views;
+
+import com.google.android.gms.ads.*;
+
+import static com.google.android.gms.ads.AdSize.*;
+import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
+
+/*
+ * Compatible with version 4.0.30 of the Google Play Services SDK.
+ */
+class GooglePlayServicesBanner extends CustomEventBanner {
+    /*
+     * These keys are intended for MoPub internal use. Do not modify.
+     */
+    private static final String AD_UNIT_ID_KEY = "adUnitID";
+    private static final String AD_WIDTH_KEY = "adWidth";
+    private static final String AD_HEIGHT_KEY = "adHeight";
+    private static final String LOCATION_KEY = "location";
+
+    private CustomEventBannerListener mBannerListener;
+    private AdView mGoogleAdView;
+
+    @Override
+    protected void loadBanner(
+            Context context,
+            CustomEventBannerListener customEventBannerListener,
+            Map<String, Object> localExtras,
+            Map<String, String> serverExtras) {
+        mBannerListener = customEventBannerListener;
+
+        String adUnitId;
+        int adWidth;
+        int adHeight;
+
+        if (extrasAreValid(serverExtras)) {
+            adUnitId = serverExtras.get(AD_UNIT_ID_KEY);
+            adWidth = Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
+            adHeight = Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
+        } else {
+            mBannerListener.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mGoogleAdView = new AdView(context);
+        mGoogleAdView.setAdListener(new AdViewListener());
+        mGoogleAdView.setAdUnitId(adUnitId);
+
+        AdSize adSize = calculateAdSize(adWidth, adHeight);
+        if (adSize == null) {
+            mBannerListener.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mGoogleAdView.setAdSize(adSize);
+
+        AdRequest adRequest = new AdRequest.Builder().build();
+
+        mGoogleAdView.loadAd(adRequest);
+    }
+
+    @Override
+    protected void onInvalidate() {
+        Views.removeFromParent(mGoogleAdView);
+        if (mGoogleAdView != null) {
+            mGoogleAdView.setAdListener(null);
+            mGoogleAdView.destroy();
+        }
+    }
+
+    private boolean extrasAreValid(Map<String, String> serverExtras) {
+        try {
+            Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
+            Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
+        } catch (NumberFormatException e) {
+            return false;
+        }
+
+        return serverExtras.containsKey(AD_UNIT_ID_KEY);
+    }
+
+    private AdSize calculateAdSize(int width, int height) {
+        // Use the smallest AdSize that will properly contain the adView
+        if (width <= BANNER.getWidth() && height <= BANNER.getHeight()) {
+            return BANNER;
+        } else if (width <= MEDIUM_RECTANGLE.getWidth() && height <= MEDIUM_RECTANGLE.getHeight()) {
+            return MEDIUM_RECTANGLE;
+        } else if (width <= FULL_BANNER.getWidth() && height <= FULL_BANNER.getHeight()) {
+            return FULL_BANNER;
+        } else if (width <= LEADERBOARD.getWidth() && height <= LEADERBOARD.getHeight()) {
+            return LEADERBOARD;
+        } else {
+            return null;
+        }
+    }
+
+    private class AdViewListener extends AdListener {
+        /*
+         * Google Play Services AdListener implementation
+         */
+        @Override
+        public void onAdClosed() {
+
+        }
+
+        @Override
+        public void onAdFailedToLoad(int errorCode) {
+            Log.d("MoPub", "Google Play Services banner ad failed to load.");
+            if (mBannerListener != null) {
+                mBannerListener.onBannerFailed(NETWORK_NO_FILL);
+            }
+        }
+
+        @Override
+        public void onAdLeftApplication() {
+
+        }
+
+        @Override
+        public void onAdLoaded() {
+            Log.d("MoPub", "Google Play Services banner ad loaded successfully. Showing ad...");
+            if (mBannerListener != null) {
+                mBannerListener.onBannerLoaded(mGoogleAdView);
+            }
+        }
+
+        @Override
+        public void onAdOpened() {
+            Log.d("MoPub", "Google Play Services banner ad clicked.");
+            if (mBannerListener != null) {
+                mBannerListener.onBannerClicked();
+            }
+        }
+    }
+
+    @Deprecated // for testing
+    AdView getGoogleAdView() {
+        return mGoogleAdView;
+    }
+}
diff --git a/mopub-sdk/libs/GooglePlayServicesInterstitial.java b/mopub-sdk/libs/GooglePlayServicesInterstitial.java
new file mode 100644
index 00000000..a37b5909
--- /dev/null
+++ b/mopub-sdk/libs/GooglePlayServicesInterstitial.java
@@ -0,0 +1,123 @@
+package com.mopub.mobileads;
+
+import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
+
+import java.util.Map;
+
+import android.content.Context;
+import android.util.Log;
+
+import com.google.android.gms.ads.AdListener;
+import com.google.android.gms.ads.AdRequest;
+import com.google.android.gms.ads.InterstitialAd;
+
+/*
+ * Compatible with version 4.0.30 of the Google Play Services SDK.
+ */
+public class GooglePlayServicesInterstitial extends CustomEventInterstitial {
+    /*
+     * These keys are intended for MoPub internal use. Do not modify.
+     */
+    private static final String AD_UNIT_ID_KEY = "adUnitID";
+    private static final String LOCATION_KEY = "location";
+
+    private CustomEventInterstitialListener mInterstitialListener;
+    private InterstitialAd mGoogleInterstitialAd;
+
+    @Override
+    protected void loadInterstitial(
+            Context context,
+            CustomEventInterstitialListener customEventInterstitialListener,
+            Map<String, Object> localExtras,
+            Map<String, String> serverExtras) {
+        mInterstitialListener = customEventInterstitialListener;
+
+        String adUnitId;
+
+        if (extrasAreValid(serverExtras)) {
+            adUnitId = serverExtras.get(AD_UNIT_ID_KEY);
+        } else {
+            mInterstitialListener.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mGoogleInterstitialAd = new InterstitialAd(context);
+        mGoogleInterstitialAd.setAdListener(new InterstitialAdListener());
+        mGoogleInterstitialAd.setAdUnitId(adUnitId);
+
+        AdRequest adRequest = new AdRequest.Builder().build();
+
+        mGoogleInterstitialAd.loadAd(adRequest);
+    }
+
+    @Override
+    protected void showInterstitial() {
+        if (mGoogleInterstitialAd.isLoaded()) {
+            mGoogleInterstitialAd.show();
+        } else {
+            Log.d("MoPub", "Tried to show a Google Play Services interstitial ad before it finished loading. Please try again.");
+        }
+    }
+
+    @Override
+    protected void onInvalidate() {
+        if (mGoogleInterstitialAd != null) {
+            mGoogleInterstitialAd.setAdListener(null);
+        }
+    }
+
+    private boolean extrasAreValid(Map<String, String> serverExtras) {
+        return serverExtras.containsKey(AD_UNIT_ID_KEY);
+    }
+
+    private class InterstitialAdListener extends AdListener {
+        /*
+    	 * Google Play Services AdListener implementation
+    	 */
+        @Override
+        public void onAdClosed() {
+            Log.d("MoPub", "Google Play Services interstitial ad dismissed.");
+            if (mInterstitialListener != null) {
+                mInterstitialListener.onInterstitialDismissed();
+            }
+        }
+
+        @Override
+        public void onAdFailedToLoad(int errorCode) {
+            Log.d("MoPub", "Google Play Services interstitial ad failed to load.");
+            if (mInterstitialListener != null) {
+                mInterstitialListener.onInterstitialFailed(NETWORK_NO_FILL);
+            }
+        }
+
+        @Override
+        public void onAdLeftApplication() {
+            Log.d("MoPub", "Google Play Services interstitial ad clicked.");
+            if (mInterstitialListener != null) {
+                mInterstitialListener.onInterstitialClicked();
+            }
+        }
+
+        @Override
+        public void onAdLoaded() {
+            Log.d("MoPub", "Google Play Services interstitial ad loaded successfully.");
+            if (mInterstitialListener != null) {
+                mInterstitialListener.onInterstitialLoaded();
+            }
+        }
+
+        @Override
+        public void onAdOpened() {
+            Log.d("MoPub", "Showing Google Play Services interstitial ad.");
+            if (mInterstitialListener != null) {
+                mInterstitialListener.onInterstitialShown();
+            }
+        }
+    }
+
+    @Deprecated // for testing
+    InterstitialAd getGoogleInterstitialAd() {
+        return mGoogleInterstitialAd;
+    }
+}
diff --git a/mopub-sdk/libs/GreystripeBanner.java b/mopub-sdk/libs/GreystripeBanner.java
new file mode 100644
index 00000000..40a06722
--- /dev/null
+++ b/mopub-sdk/libs/GreystripeBanner.java
@@ -0,0 +1,84 @@
+package com.mopub.simpleadsdemo;
+
+import android.content.Context;
+import android.util.Log;
+import com.greystripe.sdk.GSAd;
+import com.greystripe.sdk.GSAdErrorCode;
+import com.greystripe.sdk.GSAdListener;
+import com.greystripe.sdk.GSMobileBannerAdView;
+import com.mopub.mobileads.CustomEventBanner;
+import com.mopub.mobileads.MoPubErrorCode;
+
+import java.util.*;
+
+/*
+ * Tested with Greystripe SDK 2.3.0.
+ */
+class GreystripeBanner extends CustomEventBanner implements GSAdListener {
+    public static final String DEFAULT_GREYSTRIPE_APP_ID = "YOUR_GREYSTRIPE_APP_ID";
+
+    private CustomEventBannerListener mBannerListener;
+    private GSMobileBannerAdView mGreystripeAd;
+
+    /*
+     * Abstract methods from CustomEventBanner
+     */
+    @Override
+    protected void loadBanner(Context context, CustomEventBannerListener bannerListener,
+                              Map<String, Object> localExtras, Map<String, String> serverExtras) {
+        mBannerListener = bannerListener;
+
+        /*
+         * You may also pass this String down in the serverExtras Map by specifying Custom Event Data
+         * in MoPub's web interface.
+         */
+        String greystripeAppId = DEFAULT_GREYSTRIPE_APP_ID;
+        mGreystripeAd = new GSMobileBannerAdView(context, greystripeAppId);
+        mGreystripeAd.addListener(this);
+
+        mGreystripeAd.refresh();
+    }
+
+    @Override
+    protected void onInvalidate() {
+        mGreystripeAd.removeListener(this);
+    }
+
+    /*
+     * GSAdListener implementation
+     */
+    @Override
+    public void onAdClickthrough(GSAd greystripeAd) {
+        Log.d("MoPub", "Greystripe banner ad clicked.");
+        mBannerListener.onBannerClicked();
+    }
+
+    @Override
+    public void onAdDismissal(GSAd greystripeAd) {
+        Log.d("MoPub", "Greystripe banner ad modal dismissed.");
+    }
+
+    @Override
+    public void onFailedToFetchAd(GSAd greystripeAd, GSAdErrorCode errorCode) {
+        Log.d("MoPub", "Greystripe banner ad failed to load.");
+        mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_NO_FILL);
+    }
+
+    @Override
+    public void onFetchedAd(GSAd greystripeAd) {
+        if (mGreystripeAd != null & mGreystripeAd.isAdReady()) {
+            Log.d("MoPub", "Greystripe banner ad loaded successfully. Showing ad...");
+            mBannerListener.onBannerLoaded(mGreystripeAd);
+        } else {
+            mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+        }
+    }
+
+    @Override
+    public void onAdCollapse(GSAd greystripeAd) {
+    }
+
+    @Override
+    public void onAdExpansion(GSAd greystripeAd) {
+    }
+}
diff --git a/mopub-sdk/libs/GreystripeInterstitial.java b/mopub-sdk/libs/GreystripeInterstitial.java
new file mode 100644
index 00000000..db4d2a4b
--- /dev/null
+++ b/mopub-sdk/libs/GreystripeInterstitial.java
@@ -0,0 +1,105 @@
+package com.mopub.simpleadsdemo;
+
+import android.content.Context;
+import android.util.Log;
+import com.greystripe.sdk.GSAd;
+import com.greystripe.sdk.GSAdErrorCode;
+import com.greystripe.sdk.GSAdListener;
+import com.greystripe.sdk.GSFullscreenAd;
+import com.mopub.mobileads.CustomEventInterstitial;
+import com.mopub.mobileads.MoPubErrorCode;
+
+import java.util.*;
+
+/*
+ * Tested with Greystripe SDK 2.3.0.
+ */
+class GreystripeInterstitial extends CustomEventInterstitial implements GSAdListener {
+    public static final String DEFAULT_GREYSTRIPE_APP_ID = "YOUR_GREYSTRIPE_APP_ID";
+
+    private CustomEventInterstitialListener mInterstitialListener;
+    private GSFullscreenAd mGreystripeAd;
+    
+    /*
+     * Abstract methods from CustomEventInterstitial
+     */
+    @Override
+    protected void loadInterstitial(Context context, CustomEventInterstitialListener interstitialListener,
+                                    Map<String, Object> localExtras, Map<String, String> serverExtras) {
+        mInterstitialListener = interstitialListener;
+
+        /*
+         * You may also pass this String down in the serverExtras Map by specifying Custom Event Data
+         * in MoPub's web interface.
+         */
+        String greystripeAppId = DEFAULT_GREYSTRIPE_APP_ID;
+        
+        mGreystripeAd = new GSFullscreenAd(context, greystripeAppId);
+        mGreystripeAd.addListener(this);
+        
+        mGreystripeAd.fetch();
+    }
+
+    @Override
+    protected void showInterstitial() {
+        if (!mGreystripeAd.isAdReady()) {
+            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+            return;
+        }
+        
+        Log.d("MoPub", "Showing Greystripe interstitial ad.");
+        mGreystripeAd.display();
+        mInterstitialListener.onInterstitialShown();
+    }
+    
+    @Override
+    protected void onInvalidate() {
+        mGreystripeAd.removeListener(this);
+    }
+
+    /*
+     * GSAdListener implementation
+     */
+    @Override
+    public void onAdClickthrough(GSAd greystripeAd) {
+        Log.d("MoPub", "Greystripe interstitial ad clicked.");
+        mInterstitialListener.onInterstitialClicked();
+
+        /*
+         * XXX: When a Greystripe interstitial is dismissed as a result of a user click, the
+         * onAdDismissal callback does not get fired. This call ensures that the custom event
+         * listener is informed of all dismissals.
+         */
+        mInterstitialListener.onInterstitialDismissed();
+    }
+
+    @Override
+    public void onAdDismissal(GSAd greystripeAd) {
+        Log.d("MoPub", "Greystripe interstitial ad dismissed.");
+        mInterstitialListener.onInterstitialDismissed();
+    }
+
+    @Override
+    public void onFailedToFetchAd(GSAd greystripeAd, GSAdErrorCode errorCode) {
+        Log.d("MoPub", "Greystripe interstitial ad failed to load.");
+        mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+    }
+
+    @Override
+    public void onFetchedAd(GSAd greystripeAd) {
+        if (mGreystripeAd != null && mGreystripeAd.isAdReady()) {
+            Log.d("MoPub", "Greysripe interstitial ad loaded successfully.");
+            mInterstitialListener.onInterstitialLoaded();
+        } else {
+            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+        }
+    }
+
+    @Override
+    public void onAdCollapse(GSAd greystripeAd) {
+    }
+
+    @Override
+    public void onAdExpansion(GSAd greystripeAd) {
+    }
+}
diff --git a/mopub-sdk/libs/InMobi-4.1.1.jar b/mopub-sdk/libs/InMobi-4.1.1.jar
new file mode 100644
index 00000000..6354a102
Binary files /dev/null and b/mopub-sdk/libs/InMobi-4.1.1.jar differ
diff --git a/mopub-sdk/libs/InMobiAdNetwork-3.7.1.jar b/mopub-sdk/libs/InMobiAdNetwork-3.7.1.jar
deleted file mode 100644
index 935ad59d..00000000
Binary files a/mopub-sdk/libs/InMobiAdNetwork-3.7.1.jar and /dev/null differ
diff --git a/mopub-sdk/libs/InMobiBanner.java b/mopub-sdk/libs/InMobiBanner.java
new file mode 100644
index 00000000..f1248a91
--- /dev/null
+++ b/mopub-sdk/libs/InMobiBanner.java
@@ -0,0 +1,128 @@
+package com.mopub.simpleadsdemo;
+
+import android.app.Activity;
+import android.content.Context;
+import com.inmobi.commons.InMobi;
+import com.inmobi.commons.InMobi.LOG_LEVEL;
+import com.inmobi.monetization.IMBanner;
+import com.inmobi.monetization.IMBannerListener;
+import com.inmobi.monetization.IMErrorCode;
+import com.mopub.mobileads.CustomEventBanner;
+import com.mopub.mobileads.MoPub;
+import com.mopub.mobileads.MoPubErrorCode;
+import com.mopub.mobileads.util.Views;
+
+import java.util.*;
+
+/*
+ * Tested with InMobi SDK 4.1.1
+ */
+public class InMobiBanner extends CustomEventBanner implements IMBannerListener {
+
+	@Override
+	protected void loadBanner(Context context,
+			CustomEventBannerListener bannerListener,
+			Map<String, Object> localExtras, Map<String, String> serverExtras) {
+		mBannerListener = bannerListener;
+		String inMobiAppId = "YOUR_INMOBI_APP_ID";
+
+		Activity activity = null;
+		if (context instanceof Activity) {
+			activity = (Activity) context;
+		} else {
+			// You may also pass in an Activity Context in the localExtras map
+			// and retrieve it here.
+		}
+		if (activity == null) {
+			mBannerListener.onBannerFailed(null);
+			return;
+		}
+		if (!isAppInitialized) {
+			InMobi.initialize(activity, inMobiAppId);
+            isAppInitialized = true;
+		}
+
+		/*
+		 * You may also pass this String down in the serverExtras Map by
+		 * specifying Custom Event Data in MoPub's web interface.
+		 */
+		iMBanner = new IMBanner(activity, inMobiAppId,
+				IMBanner.INMOBI_AD_UNIT_320X50);
+
+        Map<String, String> map = new HashMap<String, String>();
+        map.put("tp", "c_mopub");
+        map.put("tp-ver", MoPub.SDK_VERSION);
+        iMBanner.setRequestParams(map);
+		InMobi.setLogLevel(LOG_LEVEL.VERBOSE);
+		iMBanner.setIMBannerListener(this);
+		iMBanner.setRefreshInterval(-1);
+		iMBanner.loadBanner();
+
+	}
+
+	private CustomEventBannerListener mBannerListener;
+	private IMBanner iMBanner;
+	private static boolean isAppInitialized = false;
+
+	/*
+	 * Abstract methods from CustomEventBanner
+	 */
+
+	@Override
+	public void onInvalidate() {
+		if (iMBanner != null) {
+            iMBanner.setIMBannerListener(null);
+            Views.removeFromParent(iMBanner);
+            iMBanner.destroy();
+		}
+	}
+
+	@Override
+	public void onBannerInteraction(IMBanner imBanner, Map<String, String> map) {
+		mBannerListener.onBannerClicked();
+	}
+
+	@Override
+	public void onBannerRequestFailed(IMBanner imBanner, IMErrorCode imErrorCode) {
+
+		if (imErrorCode == IMErrorCode.INTERNAL_ERROR) {
+			mBannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
+		} else if (imErrorCode == IMErrorCode.INVALID_REQUEST) {
+			mBannerListener
+					.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+		} else if (imErrorCode == IMErrorCode.NETWORK_ERROR) {
+			mBannerListener
+					.onBannerFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+		} else if (imErrorCode == IMErrorCode.NO_FILL) {
+			mBannerListener.onBannerFailed(MoPubErrorCode.NO_FILL);
+		} else {
+			mBannerListener.onBannerFailed(MoPubErrorCode.UNSPECIFIED);
+		}
+	}
+
+	@Override
+	public void onBannerRequestSucceeded(IMBanner imBanner) {
+		if (iMBanner != null) {
+			mBannerListener.onBannerLoaded(imBanner);
+
+		} else {
+			mBannerListener.onBannerFailed(null);
+		}
+	}
+
+	@Override
+	public void onDismissBannerScreen(IMBanner imBanner) {
+		mBannerListener.onBannerCollapsed();
+	}
+
+	@Override
+	public void onLeaveApplication(IMBanner imBanner) {
+
+	}
+
+	@Override
+	public void onShowBannerScreen(IMBanner imBanner) {
+		mBannerListener.onBannerExpanded();
+	}
+
+}
diff --git a/mopub-sdk/libs/InMobiCommons-3.7.1.jar b/mopub-sdk/libs/InMobiCommons-3.7.1.jar
deleted file mode 100644
index beace017..00000000
Binary files a/mopub-sdk/libs/InMobiCommons-3.7.1.jar and /dev/null differ
diff --git a/mopub-sdk/libs/InMobiInterstitial.java b/mopub-sdk/libs/InMobiInterstitial.java
new file mode 100644
index 00000000..2de8eac2
--- /dev/null
+++ b/mopub-sdk/libs/InMobiInterstitial.java
@@ -0,0 +1,122 @@
+package com.mopub.simpleadsdemo;
+
+import android.app.Activity;
+import android.content.Context;
+import com.inmobi.commons.InMobi;
+import com.inmobi.monetization.IMErrorCode;
+import com.inmobi.monetization.IMInterstitial;
+import com.inmobi.monetization.IMInterstitialListener;
+import com.mopub.mobileads.CustomEventInterstitial;
+import com.mopub.mobileads.MoPub;
+import com.mopub.mobileads.MoPubErrorCode;
+
+import java.util.*;
+
+/*
+ * Tested with InMobi SDK  4.1.1
+ */
+public class InMobiInterstitial extends CustomEventInterstitial implements IMInterstitialListener {
+
+	@Override
+	protected void loadInterstitial(Context context,
+			CustomEventInterstitialListener interstitialListener,
+			Map<String, Object> localExtras, Map<String, String> serverExtras) {
+		mInterstitialListener = interstitialListener;
+		String inMobiAppId = "YOUR_INMOBI_APP_ID";
+
+		Activity activity = null;
+		if (context instanceof Activity) {
+			activity = (Activity) context;
+		} else {
+			// You may also pass in an Activity Context in the localExtras map
+			// and retrieve it here.
+		}
+
+		if (activity == null) {
+			mInterstitialListener.onInterstitialFailed(MoPubErrorCode.UNSPECIFIED);
+			return;
+		}
+
+		/*
+		 * You may also pass this String down in the serverExtras Map by
+		 * specifying Custom Event Data in MoPub's web interface.
+		 */
+		if (!isAppInitialized) {
+			InMobi.initialize(activity, inMobiAppId);
+            isAppInitialized = true;
+		}
+		this.iMInterstitial = new IMInterstitial(activity, inMobiAppId);
+
+        Map<String, String> map = new HashMap<String, String>();
+        map.put("tp", "c_mopub");
+        map.put("tp-ver", MoPub.SDK_VERSION);
+        iMInterstitial.setRequestParams(map);
+		iMInterstitial.setIMInterstitialListener(this);
+		iMInterstitial.loadInterstitial();
+	}
+
+	private CustomEventInterstitialListener mInterstitialListener;
+	private IMInterstitial iMInterstitial;
+	private static boolean isAppInitialized = false;
+
+	/*
+	 * Abstract methods from CustomEventInterstitial
+	 */
+
+	@Override
+	public void showInterstitial() {
+		if (iMInterstitial != null
+				&& IMInterstitial.State.READY.equals(this.iMInterstitial.getState())) {
+			iMInterstitial.show();
+		}
+	}
+
+	@Override
+	public void onInvalidate() {
+		if (iMInterstitial != null) {
+            iMInterstitial.setIMInterstitialListener(null);
+			iMInterstitial.destroy();
+		}
+	}
+
+	@Override
+	public void onDismissInterstitialScreen(IMInterstitial imInterstitial) {
+		mInterstitialListener.onInterstitialDismissed();
+	}
+
+	@Override
+	public void onInterstitialFailed(IMInterstitial imInterstitial, IMErrorCode imErrorCode) {
+		if (imErrorCode == IMErrorCode.INTERNAL_ERROR) {
+			mInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
+		} else if (imErrorCode == IMErrorCode.INVALID_REQUEST) {
+			mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+		} else if (imErrorCode == IMErrorCode.NETWORK_ERROR) {
+			mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+		} else if (imErrorCode == IMErrorCode.NO_FILL) {
+			mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NO_FILL);
+		} else {
+			mInterstitialListener.onInterstitialFailed(MoPubErrorCode.UNSPECIFIED);
+		}
+	}
+
+	@Override
+	public void onInterstitialInteraction(IMInterstitial imInterstitial,
+			Map<String, String> map) {
+		mInterstitialListener.onInterstitialClicked();
+	}
+
+	@Override
+	public void onInterstitialLoaded(IMInterstitial imInterstitial) {
+		mInterstitialListener.onInterstitialLoaded();
+	}
+
+	@Override
+	public void onLeaveApplication(IMInterstitial imInterstitial) {
+
+	}
+
+	@Override
+	public void onShowInterstitialScreen(IMInterstitial imInterstitial) {
+		mInterstitialListener.onInterstitialShown();
+	}
+}
diff --git a/mopub-sdk/libs/MillennialBanner.java b/mopub-sdk/libs/MillennialBanner.java
new file mode 100644
index 00000000..4ba0f3a0
--- /dev/null
+++ b/mopub-sdk/libs/MillennialBanner.java
@@ -0,0 +1,153 @@
+/*
+ * Copyright (c) 2011, MoPub Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * * Redistributions of source code must retain the above copyright
+ *   notice, this list of conditions and the following disclaimer.
+ *
+ * * Redistributions in binary form must reproduce the above copyright
+ *   notice, this list of conditions and the following disclaimer in the
+ *   documentation and/or other materials provided with the distribution.
+ *
+ * * Neither the name of 'MoPub Inc.' nor the names of its contributors
+ *   may be used to endorse or promote products derived from this software
+ *   without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.location.Location;
+import android.util.Log;
+import com.millennialmedia.android.*;
+
+import java.util.Map;
+
+/**
+ * Compatible with version 5.1.0 of the Millennial Media SDK.
+ */
+
+class MillennialBanner extends CustomEventBanner {
+    private MMAdView mMillennialAdView;
+    private CustomEventBannerListener mBannerListener;
+    public static final String APID_KEY = "adUnitID";
+    public static final String AD_WIDTH_KEY = "adWidth";
+    public static final String AD_HEIGHT_KEY = "adHeight";
+    private MillennialBroadcastReceiver mBroadcastReceiver;
+
+    @Override
+    protected void loadBanner(Context context, CustomEventBannerListener customEventBannerListener,
+                              Map<String, Object> localExtras, Map<String, String> serverExtras) {
+        mBannerListener = customEventBannerListener;
+
+        String apid;
+        int width;
+        int height;
+        if (extrasAreValid(serverExtras)) {
+            apid = serverExtras.get(APID_KEY);
+            width = Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
+            height = Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
+        } else {
+            mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        MMSDK.initialize(context);
+        MMSDK.setBroadcastEvents(true);
+
+        mBroadcastReceiver = new MillennialBroadcastReceiver();
+        mBroadcastReceiver.register(context);
+
+        mMillennialAdView = new MMAdView(context);
+        mMillennialAdView.setApid(apid);
+        mMillennialAdView.setWidth(width);
+        mMillennialAdView.setHeight(height);
+
+        Location location = (Location) localExtras.get("location");
+        if (location != null) MMRequest.setUserLocation(location);
+
+        mMillennialAdView.setMMRequest(new MMRequest());
+        mMillennialAdView.setId(MMSDK.getDefaultAdId());
+        AdViewController.setShouldHonorServerDimensions(mMillennialAdView);
+        mMillennialAdView.getAd();
+    }
+
+    private boolean extrasAreValid(Map<String, String> serverExtras) {
+        try {
+            Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
+            Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
+        } catch (NumberFormatException e) {
+            return false;
+        }
+
+        return serverExtras.containsKey(APID_KEY);
+    }
+
+    @Override
+    protected void onInvalidate() {
+        mMillennialAdView.setListener(null);
+        mBroadcastReceiver.unregister();
+    }
+
+    class MillennialBroadcastReceiver extends MMBroadcastReceiver {
+        private Context mContext;
+
+        @Override
+        public void getAdSuccess(MMAd ad) {
+            super.getAdSuccess(ad);
+            Log.d("MoPub", "Millennial banner ad loaded successfully. Showing ad...");
+            mBannerListener.onBannerLoaded(mMillennialAdView);
+        }
+
+        @Override
+        public void getAdFailure(MMAd ad) {
+            super.getAdFailure(ad);
+            Log.d("MoPub", "Millennial banner ad failed to load.");
+            mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_NO_FILL);
+        }
+
+        @Override
+        public void intentStarted(MMAd ad, String intent) {
+            super.intentStarted(ad, intent);
+            Log.d("MoPub", "Millennial banner ad clicked.");
+            mBannerListener.onBannerClicked();
+        }
+
+
+        void register(Context context) {
+            mContext = context;
+            context.registerReceiver(this, MMBroadcastReceiver.createIntentFilter());
+        }
+
+        void unregister() {
+            try {
+                mContext.unregisterReceiver(this);
+            } catch (Exception exception) {
+                Log.d("MoPub", "Unable to unregister MMBroadcastReceiver", exception);
+            } finally {
+                mContext = null;
+            }
+        }
+    }
+
+    @Deprecated
+    MMAdView getMMAdView() {
+        return mMillennialAdView;
+    }
+}
diff --git a/mopub-sdk/libs/MillennialInterstitial.java b/mopub-sdk/libs/MillennialInterstitial.java
new file mode 100644
index 00000000..e3905b1f
--- /dev/null
+++ b/mopub-sdk/libs/MillennialInterstitial.java
@@ -0,0 +1,175 @@
+/*
+ * Copyright (c) 2011, MoPub Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met:
+ *
+ * * Redistributions of source code must retain the above copyright
+ *   notice, this list of conditions and the following disclaimer.
+ *
+ * * Redistributions in binary form must reproduce the above copyright
+ *   notice, this list of conditions and the following disclaimer in the
+ *   documentation and/or other materials provided with the distribution.
+ *
+ * * Neither the name of 'MoPub Inc.' nor the names of its contributors
+ *   may be used to endorse or promote products derived from this software
+ *   without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
+ * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.location.Location;
+import android.util.Log;
+import com.millennialmedia.android.*;
+
+import java.util.Map;
+
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
+
+/**
+ * Compatible with version 5.1.0 of the Millennial Media SDK.
+ */
+
+class MillennialInterstitial extends CustomEventInterstitial {
+    private MMInterstitial mMillennialInterstitial;
+    private CustomEventInterstitialListener mInterstitialListener;
+    public static final String APID_KEY = "adUnitID";
+    private MillennialBroadcastReceiver mBroadcastReceiver;
+
+    @Override
+    protected void loadInterstitial(Context context, CustomEventInterstitialListener customEventInterstitialListener,
+                                    Map<String, Object> localExtras, Map<String, String> serverExtras) {
+        mInterstitialListener = customEventInterstitialListener;
+
+        String apid;
+        if (extrasAreValid(serverExtras)) {
+            apid = serverExtras.get(APID_KEY);
+        } else {
+            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        MMSDK.initialize(context);
+        MMSDK.setBroadcastEvents(true);
+
+        mBroadcastReceiver = new MillennialBroadcastReceiver();
+        mBroadcastReceiver.register(context);
+
+        Location location = (Location) localExtras.get("location");
+        if (location != null) MMRequest.setUserLocation(location);
+
+        mMillennialInterstitial = new MMInterstitial(context);
+        if (mMillennialInterstitial.isAdAvailable()) {
+            Log.d("MoPub", "Millennial interstitial ad already loaded.");
+            mInterstitialListener.onInterstitialLoaded();
+        } else {
+            mMillennialInterstitial.setMMRequest(new MMRequest());
+            mMillennialInterstitial.setApid(apid);
+            mMillennialInterstitial.fetch();
+        }
+    }
+
+    @Override
+    protected void showInterstitial() {
+        if (mMillennialInterstitial.isAdAvailable()) {
+            mMillennialInterstitial.display();
+        } else {
+            Log.d("MoPub", "Tried to show a Millennial interstitial ad before it finished loading. Please try again.");
+        }
+    }
+
+    @Override
+    protected void onInvalidate() {
+        mMillennialInterstitial.setListener(null);
+        mBroadcastReceiver.unregister();
+    }
+
+    private boolean extrasAreValid(Map<String, String> serverExtras) {
+        return serverExtras.containsKey(APID_KEY);
+    }
+
+    class MillennialBroadcastReceiver extends MMBroadcastReceiver {
+        private Context mContext;
+
+        @Override
+        public void fetchFinishedCaching(MMAd ad) {
+            super.fetchFinishedCaching(ad);
+            fetchFinished(NETWORK_INVALID_STATE);
+        }
+
+        @Override
+        public void getAdFailure(MMAd ad) {
+            super.getAdFailure(ad);
+            Log.d("MoPub", "Millennial interstitial ad failed to load.");
+            mInterstitialListener.onInterstitialFailed(NETWORK_NO_FILL);
+        }
+
+        @Override
+        public void intentStarted(MMAd ad, String intent) {
+            super.intentStarted(ad, intent);
+            Log.d("MoPub", "Millennial interstitial ad clicked.");
+            mInterstitialListener.onInterstitialClicked();
+        }
+
+        @Override
+        public void fetchFailure(MMAd ad) {
+            super.fetchFailure(ad);
+            fetchFinished(NETWORK_NO_FILL);
+        }
+
+        @Override
+        public void displayStarted(MMAd ad) {
+            super.displayStarted(ad);
+            Log.d("MoPub", "Showing Millennial interstitial ad.");
+            mInterstitialListener.onInterstitialShown();
+        }
+
+        @Override
+        public void overlayClosed(MMAd ad) {
+            super.overlayClosed(ad);
+            Log.d("MoPub", "Millennial interstitial ad dismissed.");
+            mInterstitialListener.onInterstitialDismissed();
+        }
+
+        void register(Context context) {
+            mContext = context;
+            context.registerReceiver(this, MMBroadcastReceiver.createIntentFilter());
+        }
+
+        void unregister() {
+            try {
+                mContext.unregisterReceiver(this);
+            } catch (Exception exception) {
+                Log.d("MoPub", "Unable to unregister MMBroadcastReceiver", exception);
+            } finally {
+                mContext = null;
+            }
+        }
+
+        private void fetchFinished(MoPubErrorCode errorToReport) {
+            if (mMillennialInterstitial.isAdAvailable()) {
+                Log.d("MoPub", "Millennial interstitial ad loaded successfully.");
+                mInterstitialListener.onInterstitialLoaded();
+            } else {
+                Log.d("MoPub", "Millennial interstitial ad failed to load.");
+                mInterstitialListener.onInterstitialFailed(errorToReport);
+            }
+        }
+    }
+}
diff --git a/mopub-sdk/lint.xml b/mopub-sdk/lint.xml
new file mode 100644
index 00000000..ee0eead5
--- /dev/null
+++ b/mopub-sdk/lint.xml
@@ -0,0 +1,3 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<lint>
+</lint>
\ No newline at end of file
diff --git a/mopub-sdk/project.properties b/mopub-sdk/project.properties
index 8e4bc5fd..3907e776 100644
--- a/mopub-sdk/project.properties
+++ b/mopub-sdk/project.properties
@@ -10,3 +10,4 @@
 # Project target.
 target=android-19
 android.library=true
+android.library.reference.1=../../google-play-services_lib
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdConfiguration.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdConfiguration.java
index 297cc79e..324249d1 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdConfiguration.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdConfiguration.java
@@ -60,6 +60,8 @@
 import static com.mopub.mobileads.util.ResponseHeader.WIDTH;
 
 public class AdConfiguration implements Serializable {
+    private static final long serialVersionUID = 0L;
+
     private static final int MINIMUM_REFRESH_TIME_MILLISECONDS = 10000;
     private static final int DEFAULT_REFRESH_TIME_MILLISECONDS = 60000;
     private static final String mPlatform = "Android";
@@ -71,6 +73,7 @@
     private final String mDeviceModel;
     private final int mPlatformVersion;
 
+    private long mBroadcastIdentifier;
     private String mResponseString;
     private String mAdUnitId;
 
@@ -116,6 +119,7 @@ static AdConfiguration extractFromMap(Map<String,Object> map) {
             mDeviceLocale = null;
         }
 
+        mBroadcastIdentifier = Utils.generateUniqueId();
         mDeviceModel = Build.MANUFACTURER + " " + Build.MODEL;
         mPlatformVersion = VersionCode.currentApiLevel().getApiLevel();
         mSdkVersion = MoPub.SDK_VERSION;
@@ -187,6 +191,10 @@ void setResponseString(String responseString) {
         mResponseString = responseString;
     }
 
+    long getBroadcastIdentifier() {
+        return mBroadcastIdentifier;
+    }
+
     /*
      * HttpResponse
      */
@@ -290,6 +298,7 @@ String getSdkVersion() {
     }
 
     private void setDefaults() {
+        mBroadcastIdentifier = 0;
         mAdUnitId = null;
         mResponseString = null;
         mAdType = null;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdUrlGenerator.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdUrlGenerator.java
index 8b713e6d..d012e262 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdUrlGenerator.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdUrlGenerator.java
@@ -65,6 +65,15 @@
     public static final String DEVICE_ORIENTATION_SQUARE = "s";
     public static final String DEVICE_ORIENTATION_UNKNOWN = "u";
     public static final int UNKNOWN_NETWORK_TYPE = 0x00000008; // Equivalent to TYPE_DUMMY introduced in API level 14. Will generate the "unknown" code
+
+    public static enum TwitterAppInstalledStatus {
+        UNKNOWN,
+        NOT_INSTALLED,
+        INSTALLED,
+    }
+
+    private static TwitterAppInstalledStatus sTwitterAppInstalledStatus = TwitterAppInstalledStatus.UNKNOWN;
+
     private Context mContext;
     private TelephonyManager mTelephonyManager;
     private ConnectivityManager mConnectivityManager;
@@ -151,9 +160,25 @@ public String generateUrlString(String serverHostname) {
 
         setExternalStoragePermission(isStorePictureSupported(mContext));
 
+        setTwitterAppInstalledFlag();
+
         return getFinalUrlString();
     }
 
+    private void setTwitterAppInstalledFlag() {
+        if (sTwitterAppInstalledStatus == TwitterAppInstalledStatus.UNKNOWN) {
+            sTwitterAppInstalledStatus = getTwitterAppInstallStatus();
+        }
+
+        if (sTwitterAppInstalledStatus == TwitterAppInstalledStatus.INSTALLED) {
+            addParam("ts", "1");
+        }
+    }
+
+    TwitterAppInstalledStatus getTwitterAppInstallStatus() {
+        return Utils.canHandleTwitterUrl(mContext) ? TwitterAppInstalledStatus.INSTALLED : TwitterAppInstalledStatus.NOT_INSTALLED;
+    }
+
     private void setAdUnitId(String adUnitId) {
         addParam("id", adUnitId);
     }
@@ -301,4 +326,8 @@ private static String addKeyword(String keywords, String addition) {
         }
     }
 
+    @Deprecated // for testing
+    static void setTwitterAppInstalledStatus(TwitterAppInstalledStatus status) {
+        sTwitterAppInstalledStatus = status;
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
index 96b0ca30..de2a6110 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
@@ -135,7 +135,6 @@ public void loadAd() {
             mLocation = getLastKnownLocation();
         }
 
-        // tested (remove me when the rest of this is tested)
         String adUrl = generateAdUrl();
         loadNonJavascript(adUrl);
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
index 23864845..5ad3794e 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
@@ -33,11 +33,8 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
-import android.content.Intent;
-import android.content.IntentFilter;
 import android.graphics.drawable.StateListDrawable;
 import android.os.Bundle;
-import android.support.v4.content.LocalBroadcastManager;
 import android.view.View;
 import android.view.View.OnClickListener;
 import android.view.Window;
@@ -54,12 +51,6 @@
 import static com.mopub.mobileads.resource.Drawables.INTERSTITIAL_CLOSE_BUTTON_PRESSED;
 
 abstract class BaseInterstitialActivity extends Activity {
-    public static final String ACTION_INTERSTITIAL_FAIL = "com.mopub.action.interstitial.fail";
-    public static final String ACTION_INTERSTITIAL_SHOW = "com.mopub.action.interstitial.show";
-    public static final String ACTION_INTERSTITIAL_DISMISS = "com.mopub.action.interstitial.dismiss";
-    public static final String ACTION_INTERSTITIAL_CLICK = "com.mopub.action.interstitial.click";
-    public static final IntentFilter HTML_INTERSTITIAL_INTENT_FILTER = createHtmlInterstitialIntentFilter();
-
     enum JavaScriptWebViewCallbacks {
         WEB_VIEW_DID_APPEAR("javascript:webviewDidAppear();"),
         WEB_VIEW_DID_CLOSE("javascript:webviewDidClose();");
@@ -81,6 +72,7 @@ protected String getUrl() {
     private RelativeLayout mLayout;
     private int mButtonSize;
     private int mButtonPadding;
+    private long mBroadcastIdentifier;
 
     public abstract View getAdView();
 
@@ -101,6 +93,11 @@ protected void onCreate(Bundle savedInstanceState) {
         mLayout.addView(getAdView(), adViewLayout);
         setContentView(mLayout);
 
+        final AdConfiguration adConfiguration = getAdConfiguration();
+        if (adConfiguration != null) {
+            mBroadcastIdentifier = adConfiguration.getBroadcastIdentifier();
+        }
+
         createInterstitialCloseButton();
     }
 
@@ -110,6 +107,10 @@ protected void onDestroy() {
         super.onDestroy();
     }
 
+    long getBroadcastIdentifier() {
+        return mBroadcastIdentifier;
+    }
+
     protected void showInterstitialCloseButton() {
         mCloseButton.setVisibility(VISIBLE);
     }
@@ -118,11 +119,6 @@ protected void hideInterstitialCloseButton() {
         mCloseButton.setVisibility(INVISIBLE);
     }
 
-    protected void broadcastInterstitialAction(String action) {
-        Intent intent = new Intent(action);
-        LocalBroadcastManager.getInstance(this).sendBroadcast(intent);
-    }
-
     protected AdConfiguration getAdConfiguration() {
         AdConfiguration adConfiguration;
         try {
@@ -133,15 +129,6 @@ protected AdConfiguration getAdConfiguration() {
         return adConfiguration;
     }
 
-    private static IntentFilter createHtmlInterstitialIntentFilter() {
-        IntentFilter intentFilter = new IntentFilter();
-        intentFilter.addAction(ACTION_INTERSTITIAL_FAIL);
-        intentFilter.addAction(ACTION_INTERSTITIAL_SHOW);
-        intentFilter.addAction(ACTION_INTERSTITIAL_DISMISS);
-        intentFilter.addAction(ACTION_INTERSTITIAL_CLICK);
-        return intentFilter;
-    }
-
     private void createInterstitialCloseButton() {
         mCloseButton = new ImageButton(this);
         StateListDrawable states = new StateListDrawable();
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseWebView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseWebView.java
index c6adb587..5f6f0a8a 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseWebView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseWebView.java
@@ -42,6 +42,8 @@
 import java.lang.reflect.Method;
 
 public class BaseWebView extends WebView {
+    protected boolean mIsDestroyed;
+
     public BaseWebView(Context context) {
         /*
          * Important: don't allow any WebView subclass to be instantiated using
@@ -85,7 +87,14 @@ protected void enablePlugins(final boolean enabled) {
 
     @Override
     public void destroy() {
+        mIsDestroyed = true;
+
         Views.removeFromParent(this);
         super.destroy();
     }
+
+    @Deprecated // for testing
+    void setIsDestroyed(boolean isDestroyed) {
+        mIsDestroyed = isDestroyed;
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java b/mopub-sdk/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java
index 3787e148..a4edd5cd 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java
@@ -35,21 +35,46 @@
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
+import android.content.IntentFilter;
 import android.support.v4.content.LocalBroadcastManager;
 
-import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_CLICK;
-import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_FAIL;
-import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 
 class EventForwardingBroadcastReceiver extends BroadcastReceiver {
     private final CustomEventInterstitialListener mCustomEventInterstitialListener;
+    private final long mBroadcastIdentifier;
     private Context mContext;
 
-    public EventForwardingBroadcastReceiver(CustomEventInterstitialListener customEventInterstitialListener) {
+    static final String BROADCAST_IDENTIFIER_KEY = "broadcastIdentifier";
+    static final String ACTION_INTERSTITIAL_FAIL = "com.mopub.action.interstitial.fail";
+    static final String ACTION_INTERSTITIAL_SHOW = "com.mopub.action.interstitial.show";
+    static final String ACTION_INTERSTITIAL_DISMISS = "com.mopub.action.interstitial.dismiss";
+    static final String ACTION_INTERSTITIAL_CLICK = "com.mopub.action.interstitial.click";
+    private static IntentFilter sIntentFilter;
+
+
+    public EventForwardingBroadcastReceiver(CustomEventInterstitialListener customEventInterstitialListener, final long broadcastIdentifier) {
         mCustomEventInterstitialListener = customEventInterstitialListener;
+        mBroadcastIdentifier = broadcastIdentifier;
+        sIntentFilter = getHtmlInterstitialIntentFilter();
+    }
+
+    static void broadcastAction(final Context context, final long broadcastIdentifier, final String action) {
+        Intent intent = new Intent(action);
+        intent.putExtra(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
+        LocalBroadcastManager.getInstance(context.getApplicationContext()).sendBroadcast(intent);
+    }
+
+    static IntentFilter getHtmlInterstitialIntentFilter() {
+        if (sIntentFilter == null) {
+            sIntentFilter = new IntentFilter();
+            sIntentFilter.addAction(ACTION_INTERSTITIAL_FAIL);
+            sIntentFilter.addAction(ACTION_INTERSTITIAL_SHOW);
+            sIntentFilter.addAction(ACTION_INTERSTITIAL_DISMISS);
+            sIntentFilter.addAction(ACTION_INTERSTITIAL_CLICK);
+        }
+        return sIntentFilter;
     }
 
     @Override
@@ -58,14 +83,26 @@ public void onReceive(Context context, Intent intent) {
             return;
         }
 
-        String action = intent.getAction();
-        if (action.equals(ACTION_INTERSTITIAL_FAIL)) {
+        /**
+         * Only consume this broadcast if the identifier on the received Intent and this broadcast
+         * match up. This allows us to target broadcasts to the ad that spawned them. We include
+         * this here because there is no appropriate IntentFilter condition that can recreate this
+         * behavior.
+         */
+        final long receivedIdentifier = intent.getLongExtra(BROADCAST_IDENTIFIER_KEY, -1);
+        if (mBroadcastIdentifier != receivedIdentifier) {
+            return;
+        }
+
+        final String action = intent.getAction();
+        if (ACTION_INTERSTITIAL_FAIL.equals(action)) {
             mCustomEventInterstitialListener.onInterstitialFailed(NETWORK_INVALID_STATE);
-        } else if (action.equals(ACTION_INTERSTITIAL_SHOW)) {
+        } else if (ACTION_INTERSTITIAL_SHOW.equals(action)) {
             mCustomEventInterstitialListener.onInterstitialShown();
-        } else if (action.equals(ACTION_INTERSTITIAL_DISMISS)) {
+        } else if (ACTION_INTERSTITIAL_DISMISS.equals(action)) {
             mCustomEventInterstitialListener.onInterstitialDismissed();
-        } else if (action.equals(ACTION_INTERSTITIAL_CLICK)) {
+            unregister();
+        } else if (ACTION_INTERSTITIAL_CLICK.equals(action)) {
             mCustomEventInterstitialListener.onInterstitialClicked();
         }
 
@@ -73,7 +110,7 @@ public void onReceive(Context context, Intent intent) {
 
     public void register(Context context) {
         mContext = context;
-        LocalBroadcastManager.getInstance(mContext).registerReceiver(this, BaseInterstitialActivity.HTML_INTERSTITIAL_INTENT_FILTER);
+        LocalBroadcastManager.getInstance(mContext).registerReceiver(this, sIntentFilter);
     }
 
     public void unregister() {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/GoogleAdMobBanner.java b/mopub-sdk/src/main/java/com/mopub/mobileads/GoogleAdMobBanner.java
deleted file mode 100644
index c3b3bbdc..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/GoogleAdMobBanner.java
+++ /dev/null
@@ -1,189 +0,0 @@
-/*
- * Copyright (c) 2010, MoPub Inc.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are
- * met:
- *
- * * Redistributions of source code must retain the above copyright
- *   notice, this list of conditions and the following disclaimer.
- *
- * * Redistributions in binary form must reproduce the above copyright
- *   notice, this list of conditions and the following disclaimer in the
- *   documentation and/or other materials provided with the distribution.
- *
- * * Neither the name of 'MoPub Inc.' nor the names of its contributors
- *   may be used to endorse or promote products derived from this software
- *   without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
- * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
- * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
- * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
- * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.location.Location;
-import android.util.Log;
-import com.google.ads.*;
-import com.google.ads.AdRequest.ErrorCode;
-import com.mopub.mobileads.util.Views;
-
-import java.util.Map;
-
-import static com.google.ads.AdSize.BANNER;
-import static com.google.ads.AdSize.IAB_BANNER;
-import static com.google.ads.AdSize.IAB_LEADERBOARD;
-import static com.google.ads.AdSize.IAB_MRECT;
-import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
-
-/*
- * Compatible with version 6.4.1 of the Google AdMob Ads SDK.
- */
-
-class GoogleAdMobBanner extends CustomEventBanner implements AdListener {
-    public static final String AD_UNIT_ID_KEY = "adUnitID";
-    public static final String AD_WIDTH_KEY = "adWidth";
-    public static final String AD_HEIGHT_KEY = "adHeight";
-    public static final String LOCATION_KEY = "location";
-
-    private AdView mAdMobView;
-    private CustomEventBannerListener mBannerListener;
-
-    @Override
-    protected void loadBanner(Context context,
-                              CustomEventBannerListener customEventBannerListener,
-                              Map<String, Object> localExtras,
-                              Map<String, String> serverExtras) {
-        mBannerListener = customEventBannerListener;
-
-        String adUnitId;
-        int adWidth;
-        int adHeight;
-
-        if (!(context instanceof Activity)) {
-            mBannerListener.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        if (extrasAreValid(serverExtras)) {
-            adUnitId = serverExtras.get(AD_UNIT_ID_KEY);
-            adWidth = Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
-            adHeight = Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
-        } else {
-            mBannerListener.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        AdSize adSize = calculateAdSize(adWidth, adHeight);
-        if (adSize == null) {
-            Log.d("MoPub", "Unsupported AdMob ad size: " + adWidth + "x" + adHeight);
-            mBannerListener.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        mAdMobView = new AdView((Activity) context, adSize, adUnitId);
-        mAdMobView.setAdListener(this);
-
-        AdRequest request = new AdRequest();
-        Location location = extractLocation(localExtras);
-        if (location != null) request.setLocation(location);
-
-        mAdMobView.loadAd(request);
-    }
-
-    @Override
-    protected void onInvalidate() {
-    	if(mAdMobView != null) {
-    		mAdMobView.setAdListener(null);
-    		Views.removeFromParent(mAdMobView);
-    		mAdMobView.destroy();
-    	}
-    }
-
-    private Location extractLocation(Map<String, Object> localExtras) {
-        Object location = localExtras.get(LOCATION_KEY);
-        if (location instanceof Location) {
-            return (Location) location;
-        }
-        return null;
-    }
-
-    private AdSize calculateAdSize(int width, int height) {
-        // Use the smallest AdMob AdSize that will properly contain the adView
-        if (width <= BANNER.getWidth() && height <= BANNER.getHeight()) {
-            return BANNER;
-        } else if (width <= IAB_MRECT.getWidth() && height <= IAB_MRECT.getHeight()) {
-            return IAB_MRECT;
-        } else if (width <= IAB_BANNER.getWidth() && height <= IAB_BANNER.getHeight()) {
-            return IAB_BANNER;
-        } else if (width <= IAB_LEADERBOARD.getWidth() && height <= IAB_LEADERBOARD.getHeight()) {
-            return IAB_LEADERBOARD;
-        } else {
-            return null;
-        }
-    }
-
-    private boolean extrasAreValid(Map<String, String> serverExtras) {
-        try {
-            Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
-            Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
-        } catch (NumberFormatException e) {
-            return false;
-        }
-
-        return serverExtras.containsKey(AD_UNIT_ID_KEY);
-    }
-
-    @Deprecated // for testing
-    AdView getAdMobView() {
-        return mAdMobView;
-    }
-
-    /**
-     * AdMob AdListener implementation
-     */
-    @Override
-    public void onFailedToReceiveAd(Ad ad, ErrorCode error) {
-        Log.d("MoPub", "Google AdMob banner ad failed to load.");
-        if(mBannerListener != null) {
-        	mBannerListener.onBannerFailed(NETWORK_NO_FILL);
-        }
-    }
-
-    @Override
-    public void onPresentScreen(Ad ad) {
-        Log.d("MoPub", "Google AdMob banner ad clicked.");
-        if(mBannerListener != null) {
-        	mBannerListener.onBannerClicked();
-        }
-    }
-
-    @Override
-    public void onReceiveAd(Ad ad) {
-        Log.d("MoPub", "Google AdMob banner ad loaded successfully. Showing ad...");
-        if(mBannerListener != null) {
-        	mBannerListener.onBannerLoaded(mAdMobView);
-        }
-    }
-
-    @Override
-    public void onLeaveApplication(Ad ad) {
-    }
-
-    @Override
-    public void onDismissScreen(Ad ad) {
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/GoogleAdMobInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/GoogleAdMobInterstitial.java
deleted file mode 100644
index d728bf64..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/GoogleAdMobInterstitial.java
+++ /dev/null
@@ -1,170 +0,0 @@
-/*
- * Copyright (c) 2011, MoPub Inc.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are
- * met:
- *
- * * Redistributions of source code must retain the above copyright
- *   notice, this list of conditions and the following disclaimer.
- *
- * * Redistributions in binary form must reproduce the above copyright
- *   notice, this list of conditions and the following disclaimer in the
- *   documentation and/or other materials provided with the distribution.
- *
- * * Neither the name of 'MoPub Inc.' nor the names of its contributors
- *   may be used to endorse or promote products derived from this software
- *   without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
- * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
- * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
- * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
- * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.location.Location;
-import android.util.Log;
-import com.google.ads.Ad;
-import com.google.ads.AdListener;
-import com.google.ads.AdRequest;
-import com.google.ads.AdRequest.ErrorCode;
-import com.google.ads.InterstitialAd;
-
-import java.util.Map;
-
-import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
-
-/*
- * Compatible with version 6.4.1 of the Google AdMob Ads SDK.
- */
-
-class GoogleAdMobInterstitial extends CustomEventInterstitial implements AdListener {
-    public static final String AD_UNIT_ID_KEY = "adUnitID";
-    public static final String LOCATION_KEY = "location";
-
-    private InterstitialAd mInterstitialAd;
-    private boolean mHasAlreadyRegisteredClick;
-    private CustomEventInterstitialListener mInterstitialListener;
-
-    @Override
-    protected void loadInterstitial(Context context,
-                                    CustomEventInterstitialListener customEventInterstitialListener,
-                                    Map<String, Object> localExtras,
-                                    Map<String, String> serverExtras) {
-        mInterstitialListener = customEventInterstitialListener;
-
-        if (!(context instanceof Activity)) {
-            mInterstitialListener.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        String pubId;
-        if (extrasAreValid(serverExtras)) {
-            pubId = serverExtras.get(AD_UNIT_ID_KEY);
-        } else {
-            mInterstitialListener.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        mInterstitialAd = new InterstitialAd((Activity) context, pubId);
-        mInterstitialAd.setAdListener(this);
-
-        AdRequest adRequest = new AdRequest();
-        Location location = extractLocation(localExtras);
-        if (location != null) adRequest.setLocation(location);
-        mInterstitialAd.loadAd(adRequest);
-    }
-
-    @Override
-    protected void showInterstitial() {
-        if (mInterstitialAd.isReady()) {
-            mInterstitialAd.show();
-        } else {
-            Log.d("MoPub", "Tried to show a Google AdMob interstitial ad before it finished loading. Please try again.");
-        }
-    }
-
-    @Override
-    protected void onInvalidate() {
-        if (mInterstitialAd != null) {
-            mInterstitialAd.setAdListener(null);
-        }
-    }
-
-    private Location extractLocation(Map<String, Object> localExtras) {
-        Object location = localExtras.get(LOCATION_KEY);
-        if (location instanceof Location) {
-            return (Location) location;
-        }
-        return null;
-    }
-
-    private boolean extrasAreValid(Map<String, String> serverExtras) {
-        return serverExtras.containsKey(AD_UNIT_ID_KEY);
-    }
-
-    @Deprecated // for testing
-    InterstitialAd getAdMobInterstitial() {
-        return mInterstitialAd;
-    }
-
-    /*
-     * AdMob AdListener implementation
-     */
-
-    @Override
-    public void onDismissScreen(Ad ad) {
-        Log.d("MoPub", "Google AdMob interstitial ad dismissed.");
-        if(mInterstitialListener != null) {
-        	mInterstitialListener.onInterstitialDismissed();
-        }
-    }
-
-    @Override
-    public void onFailedToReceiveAd(Ad ad, ErrorCode error) {
-        Log.d("MoPub", "Google AdMob interstitial ad failed to load.");
-        if(mInterstitialListener != null) {
-        	mInterstitialListener.onInterstitialFailed(NETWORK_NO_FILL);
-        }
-    }
-
-    @Override
-    public void onLeaveApplication(Ad ad) {
-        if (!mHasAlreadyRegisteredClick) {
-            Log.d("MoPub", "Google AdMob interstitial ad clicked.");
-            mHasAlreadyRegisteredClick = true;
-            if(mInterstitialListener != null) {
-            	mInterstitialListener.onInterstitialClicked();
-            }
-        }
-    }
-
-    @Override
-    public void onPresentScreen(Ad ad) {
-        Log.d("MoPub", "Showing Google AdMob interstitial ad.");
-        if(mInterstitialListener != null) {
-        	mInterstitialListener.onInterstitialShown();
-        }
-    }
-
-    @Override
-    public void onReceiveAd(Ad ad) {
-        Log.d("MoPub", "Google AdMob interstitial ad loaded successfully.");
-        if(mInterstitialListener != null) {
-        	mInterstitialListener.onInterstitialLoaded();
-        }
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/GooglePlayServicesBanner.java b/mopub-sdk/src/main/java/com/mopub/mobileads/GooglePlayServicesBanner.java
new file mode 100644
index 00000000..cd324ca4
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/GooglePlayServicesBanner.java
@@ -0,0 +1,152 @@
+package com.mopub.mobileads;
+
+import static com.google.android.gms.ads.AdSize.BANNER;
+import static com.google.android.gms.ads.AdSize.FULL_BANNER;
+import static com.google.android.gms.ads.AdSize.LEADERBOARD;
+import static com.google.android.gms.ads.AdSize.MEDIUM_RECTANGLE;
+import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
+
+import java.util.Map;
+
+import android.content.Context;
+import android.util.Log;
+
+import com.google.android.gms.ads.AdListener;
+import com.google.android.gms.ads.AdRequest;
+import com.google.android.gms.ads.AdSize;
+import com.google.android.gms.ads.AdView;
+import com.mopub.mobileads.util.Views;
+
+/*
+ * Compatible with version 4.0.30 of the Google Play Services SDK.
+ */
+class GooglePlayServicesBanner extends CustomEventBanner {
+    /*
+     * These keys are intended for MoPub internal use. Do not modify.
+     */
+    private static final String AD_UNIT_ID_KEY = "adUnitID";
+    private static final String AD_WIDTH_KEY = "adWidth";
+    private static final String AD_HEIGHT_KEY = "adHeight";
+    private static final String LOCATION_KEY = "location";
+
+    private CustomEventBannerListener mBannerListener;
+    private AdView mGoogleAdView;
+
+    @Override
+    protected void loadBanner(
+            Context context,
+            CustomEventBannerListener customEventBannerListener,
+            Map<String, Object> localExtras,
+            Map<String, String> serverExtras) {
+        mBannerListener = customEventBannerListener;
+
+        String adUnitId;
+        int adWidth;
+        int adHeight;
+
+        if (extrasAreValid(serverExtras)) {
+            adUnitId = serverExtras.get(AD_UNIT_ID_KEY);
+            adWidth = Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
+            adHeight = Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
+        } else {
+            mBannerListener.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mGoogleAdView = new AdView(context);
+        mGoogleAdView.setAdListener(new AdViewListener());
+        mGoogleAdView.setAdUnitId(adUnitId);
+
+        AdSize adSize = calculateAdSize(adWidth, adHeight);
+        if (adSize == null) {
+            mBannerListener.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mGoogleAdView.setAdSize(adSize);
+
+        AdRequest adRequest = new AdRequest.Builder().build();
+
+        mGoogleAdView.loadAd(adRequest);
+    }
+
+    @Override
+    protected void onInvalidate() {
+        Views.removeFromParent(mGoogleAdView);
+        if (mGoogleAdView != null) {
+            mGoogleAdView.setAdListener(null);
+            mGoogleAdView.destroy();
+        }
+    }
+
+    private boolean extrasAreValid(Map<String, String> serverExtras) {
+        try {
+            Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
+            Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
+        } catch (NumberFormatException e) {
+            return false;
+        }
+
+        return serverExtras.containsKey(AD_UNIT_ID_KEY);
+    }
+
+    private AdSize calculateAdSize(int width, int height) {
+        // Use the smallest AdSize that will properly contain the adView
+        if (width <= BANNER.getWidth() && height <= BANNER.getHeight()) {
+            return BANNER;
+        } else if (width <= MEDIUM_RECTANGLE.getWidth() && height <= MEDIUM_RECTANGLE.getHeight()) {
+            return MEDIUM_RECTANGLE;
+        } else if (width <= FULL_BANNER.getWidth() && height <= FULL_BANNER.getHeight()) {
+            return FULL_BANNER;
+        } else if (width <= LEADERBOARD.getWidth() && height <= LEADERBOARD.getHeight()) {
+            return LEADERBOARD;
+        } else {
+            return null;
+        }
+    }
+
+    private class AdViewListener extends AdListener {
+        /*
+         * Google Play Services AdListener implementation
+         */
+        @Override
+        public void onAdClosed() {
+
+        }
+
+        @Override
+        public void onAdFailedToLoad(int errorCode) {
+            Log.d("MoPub", "Google Play Services banner ad failed to load.");
+            if (mBannerListener != null) {
+                mBannerListener.onBannerFailed(NETWORK_NO_FILL);
+            }
+        }
+
+        @Override
+        public void onAdLeftApplication() {
+
+        }
+
+        @Override
+        public void onAdLoaded() {
+            Log.d("MoPub", "Google Play Services banner ad loaded successfully. Showing ad...");
+            if (mBannerListener != null) {
+                mBannerListener.onBannerLoaded(mGoogleAdView);
+            }
+        }
+
+        @Override
+        public void onAdOpened() {
+            Log.d("MoPub", "Google Play Services banner ad clicked.");
+            if (mBannerListener != null) {
+                mBannerListener.onBannerClicked();
+            }
+        }
+    }
+
+    @Deprecated // for testing
+    AdView getGoogleAdView() {
+        return mGoogleAdView;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/GooglePlayServicesInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/GooglePlayServicesInterstitial.java
new file mode 100644
index 00000000..a37b5909
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/GooglePlayServicesInterstitial.java
@@ -0,0 +1,123 @@
+package com.mopub.mobileads;
+
+import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
+
+import java.util.Map;
+
+import android.content.Context;
+import android.util.Log;
+
+import com.google.android.gms.ads.AdListener;
+import com.google.android.gms.ads.AdRequest;
+import com.google.android.gms.ads.InterstitialAd;
+
+/*
+ * Compatible with version 4.0.30 of the Google Play Services SDK.
+ */
+public class GooglePlayServicesInterstitial extends CustomEventInterstitial {
+    /*
+     * These keys are intended for MoPub internal use. Do not modify.
+     */
+    private static final String AD_UNIT_ID_KEY = "adUnitID";
+    private static final String LOCATION_KEY = "location";
+
+    private CustomEventInterstitialListener mInterstitialListener;
+    private InterstitialAd mGoogleInterstitialAd;
+
+    @Override
+    protected void loadInterstitial(
+            Context context,
+            CustomEventInterstitialListener customEventInterstitialListener,
+            Map<String, Object> localExtras,
+            Map<String, String> serverExtras) {
+        mInterstitialListener = customEventInterstitialListener;
+
+        String adUnitId;
+
+        if (extrasAreValid(serverExtras)) {
+            adUnitId = serverExtras.get(AD_UNIT_ID_KEY);
+        } else {
+            mInterstitialListener.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mGoogleInterstitialAd = new InterstitialAd(context);
+        mGoogleInterstitialAd.setAdListener(new InterstitialAdListener());
+        mGoogleInterstitialAd.setAdUnitId(adUnitId);
+
+        AdRequest adRequest = new AdRequest.Builder().build();
+
+        mGoogleInterstitialAd.loadAd(adRequest);
+    }
+
+    @Override
+    protected void showInterstitial() {
+        if (mGoogleInterstitialAd.isLoaded()) {
+            mGoogleInterstitialAd.show();
+        } else {
+            Log.d("MoPub", "Tried to show a Google Play Services interstitial ad before it finished loading. Please try again.");
+        }
+    }
+
+    @Override
+    protected void onInvalidate() {
+        if (mGoogleInterstitialAd != null) {
+            mGoogleInterstitialAd.setAdListener(null);
+        }
+    }
+
+    private boolean extrasAreValid(Map<String, String> serverExtras) {
+        return serverExtras.containsKey(AD_UNIT_ID_KEY);
+    }
+
+    private class InterstitialAdListener extends AdListener {
+        /*
+    	 * Google Play Services AdListener implementation
+    	 */
+        @Override
+        public void onAdClosed() {
+            Log.d("MoPub", "Google Play Services interstitial ad dismissed.");
+            if (mInterstitialListener != null) {
+                mInterstitialListener.onInterstitialDismissed();
+            }
+        }
+
+        @Override
+        public void onAdFailedToLoad(int errorCode) {
+            Log.d("MoPub", "Google Play Services interstitial ad failed to load.");
+            if (mInterstitialListener != null) {
+                mInterstitialListener.onInterstitialFailed(NETWORK_NO_FILL);
+            }
+        }
+
+        @Override
+        public void onAdLeftApplication() {
+            Log.d("MoPub", "Google Play Services interstitial ad clicked.");
+            if (mInterstitialListener != null) {
+                mInterstitialListener.onInterstitialClicked();
+            }
+        }
+
+        @Override
+        public void onAdLoaded() {
+            Log.d("MoPub", "Google Play Services interstitial ad loaded successfully.");
+            if (mInterstitialListener != null) {
+                mInterstitialListener.onInterstitialLoaded();
+            }
+        }
+
+        @Override
+        public void onAdOpened() {
+            Log.d("MoPub", "Showing Google Play Services interstitial ad.");
+            if (mInterstitialListener != null) {
+                mInterstitialListener.onInterstitialShown();
+            }
+        }
+    }
+
+    @Deprecated // for testing
+    InterstitialAd getGoogleInterstitialAd() {
+        return mGoogleInterstitialAd;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/GreystripeBanner.java b/mopub-sdk/src/main/java/com/mopub/mobileads/GreystripeBanner.java
index c2117ef3..dc0f6a7a 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/GreystripeBanner.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/GreystripeBanner.java
@@ -1,12 +1,7 @@
 package com.mopub.mobileads;
 
-import java.util.Map;
-
 import android.content.Context;
-import android.content.pm.ApplicationInfo;
-import android.content.pm.PackageManager;
 import android.util.Log;
-
 import com.greystripe.sdk.GSAd;
 import com.greystripe.sdk.GSAdErrorCode;
 import com.greystripe.sdk.GSAdListener;
@@ -14,10 +9,14 @@
 import com.mopub.mobileads.CustomEventBanner;
 import com.mopub.mobileads.MoPubErrorCode;
 
+import java.util.*;
+
 /*
  * Tested with Greystripe SDK 2.3.0.
  */
 class GreystripeBanner extends CustomEventBanner implements GSAdListener {
+    public static final String DEFAULT_GREYSTRIPE_APP_ID = "YOUR_GREYSTRIPE_APP_ID";
+
     private CustomEventBannerListener mBannerListener;
     private GSMobileBannerAdView mGreystripeAd;
 
@@ -29,23 +28,12 @@ protected void loadBanner(Context context, CustomEventBannerListener bannerListe
                               Map<String, Object> localExtras, Map<String, String> serverExtras) {
         mBannerListener = bannerListener;
 
-        String appId = serverExtras.get("app_id");
-        if(appId == null) {
-        	try {
-	        	ApplicationInfo ai = context.getPackageManager().getApplicationInfo(context.getPackageName(),PackageManager.GET_META_DATA);
-	            appId = ai.metaData.get("greystripe_ads_app_id").toString();
-        	} catch(Throwable t) {
-        		Log.e("MoPub", "Could not find greystripe_ads_app_id in meta-data in Android manifest");
-        	}
-        }
-        if(appId == null) {
-            Log.d("MoPub", "Greystripe banner ad app_id is missing.");
-            if(mBannerListener != null) {
-            	mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            }
-            return;
-        }
-        mGreystripeAd = new GSMobileBannerAdView(context, appId);
+        /*
+         * You may also pass this String down in the serverExtras Map by specifying Custom Event Data
+         * in MoPub's web interface.
+         */
+        String greystripeAppId = DEFAULT_GREYSTRIPE_APP_ID;
+        mGreystripeAd = new GSMobileBannerAdView(context, greystripeAppId);
         mGreystripeAd.addListener(this);
 
         mGreystripeAd.refresh();
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/GreystripeInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/GreystripeInterstitial.java
index a9d1052d..60a3afe2 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/GreystripeInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/GreystripeInterstitial.java
@@ -1,12 +1,7 @@
 package com.mopub.mobileads;
 
-import java.util.Map;
-
 import android.content.Context;
-import android.content.pm.ApplicationInfo;
-import android.content.pm.PackageManager;
 import android.util.Log;
-
 import com.greystripe.sdk.GSAd;
 import com.greystripe.sdk.GSAdErrorCode;
 import com.greystripe.sdk.GSAdListener;
@@ -14,10 +9,14 @@
 import com.mopub.mobileads.CustomEventInterstitial;
 import com.mopub.mobileads.MoPubErrorCode;
 
+import java.util.*;
+
 /*
  * Tested with Greystripe SDK 2.3.0.
  */
 class GreystripeInterstitial extends CustomEventInterstitial implements GSAdListener {
+    public static final String DEFAULT_GREYSTRIPE_APP_ID = "YOUR_GREYSTRIPE_APP_ID";
+
     private CustomEventInterstitialListener mInterstitialListener;
     private GSFullscreenAd mGreystripeAd;
     
@@ -29,24 +28,13 @@ protected void loadInterstitial(Context context, CustomEventInterstitialListener
                                     Map<String, Object> localExtras, Map<String, String> serverExtras) {
         mInterstitialListener = interstitialListener;
 
-        String appId = serverExtras.get("app_id");
-        if(appId == null) {
-        	try {
-	        	ApplicationInfo ai = context.getPackageManager().getApplicationInfo(context.getPackageName(),PackageManager.GET_META_DATA);
-	            appId = ai.metaData.get("greystripe_interstitial_ads_app_id").toString();
-        	} catch(Throwable t) {
-        		Log.e("MoPub", "Could not find greystripe_interstitial_ads_app_id in meta-data in Android manifest");
-        	}
-        }
-        if(appId == null) {
-            Log.d("MoPub", "Greystripe interstitial ad app_id is missing.");
-            if(mInterstitialListener != null) {
-            	mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            }
-            return;
-        }
+        /*
+         * You may also pass this String down in the serverExtras Map by specifying Custom Event Data
+         * in MoPub's web interface.
+         */
+        String greystripeAppId = DEFAULT_GREYSTRIPE_APP_ID;
         
-        mGreystripeAd = new GSFullscreenAd(context, appId);
+        mGreystripeAd = new GSFullscreenAd(context, greystripeAppId);
         mGreystripeAd.addListener(this);
         
         mGreystripeAd.fetch();
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java
index a482370a..b1d54ed9 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java
@@ -41,6 +41,8 @@
 public class HtmlInterstitialWebView extends BaseHtmlWebView {
     private Handler mHandler;
 
+    protected static final String MOPUB_JS_INTERFACE_NAME = "mopubUriInterface";
+
     interface MoPubUriJavascriptFireFinishLoadListener {
         abstract void onInterstitialLoaded();
     }
@@ -61,7 +63,9 @@ public void init(final CustomEventInterstitialListener customEventInterstitialLi
         addMoPubUriJavascriptInterface(new MoPubUriJavascriptFireFinishLoadListener() {
             @Override
             public void onInterstitialLoaded() {
-                customEventInterstitialListener.onInterstitialLoaded();
+                if (!mIsDestroyed) {
+                    customEventInterstitialListener.onInterstitialLoaded();
+                }
             }
         });
     }
@@ -92,11 +96,19 @@ public void run() {
                         moPubUriJavascriptFireFinishLoadListener.onInterstitialLoaded();
                     }
                 });
+
                 return true;
             }
         }
 
-        addJavascriptInterface(new MoPubUriJavascriptInterface(), "mopubUriInterface");
+        addJavascriptInterface(new MoPubUriJavascriptInterface(), MOPUB_JS_INTERFACE_NAME);
+    }
+
+    @Override
+    public void destroy() {
+        removeJavascriptInterface(MOPUB_JS_INTERFACE_NAME);
+
+        super.destroy();
     }
 
     static class HtmlInterstitialWebViewListener implements HtmlWebViewListener {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
index fc210fea..e16677ef 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
@@ -70,7 +70,7 @@ public boolean shouldOverrideUrlLoading(WebView view, String url) {
         Log.d("MoPub", "Ad clicked. Click URL: " + url);
 
         // this is added because http/s can also be intercepted
-        if (!isWebSiteUrl(url) && canHandleApplicationUrl(url)) {
+        if (!isWebSiteUrl(url) && Utils.canHandleApplicationUrl(mContext, url)) {
             if (launchApplicationUrl(url)) {
                 return true;
             }
@@ -175,21 +175,6 @@ private boolean isWebSiteUrl(String url) {
         return url.startsWith("http://") || url.startsWith("https://");
     }
 
-    private boolean canHandleApplicationUrl(String url) {
-        // Determine which activities can handle the intent
-        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
-
-        // If there are no relevant activities, don't follow the link
-        if (!Utils.deviceCanHandleIntent(mContext, intent)) {
-            Log.w("MoPub", "Could not handle application specific action: " + url + ". " +
-                    "You may be running in the emulator or another device which does not " +
-                    "have the required application.");
-            return false;
-        }
-
-        return true;
-    }
-
     private String urlWithClickTrackingRedirect(String url) {
         if (mClickthroughUrl == null) {
             return url;
@@ -254,7 +239,7 @@ boolean launchIntentForUserClick(Context context, Intent intent, String errorMes
             return false;
         }
 
-        boolean wasIntentStarted = executeIntent(context, intent, errorMessage);
+        boolean wasIntentStarted = Utils.executeIntent(context, intent, errorMessage);
         if (wasIntentStarted) {
             mHtmlWebViewListener.onClicked();
             mHtmlWebView.onResetUserClick();
@@ -262,16 +247,4 @@ boolean launchIntentForUserClick(Context context, Intent intent, String errorMes
 
         return wasIntentStarted;
     }
-
-    private boolean executeIntent(Context context, Intent intent, String errorMessage) {
-        try {
-            context.startActivity(intent);
-        } catch (Exception e) {
-            Log.d("MoPub", (errorMessage != null)
-                    ? errorMessage
-                    : "Unable to start intent.");
-            return false;
-        }
-        return true;
-    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/InMobiBanner.java b/mopub-sdk/src/main/java/com/mopub/mobileads/InMobiBanner.java
index 6c748be5..2c19db9f 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/InMobiBanner.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/InMobiBanner.java
@@ -1,36 +1,33 @@
 package com.mopub.mobileads;
 
+import java.util.HashMap;
+import java.util.Map;
+
 import android.app.Activity;
 import android.content.Context;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager;
 import android.util.Log;
-import com.inmobi.androidsdk.IMAdListener;
-import com.inmobi.androidsdk.IMAdRequest;
-import com.inmobi.androidsdk.IMAdRequest.ErrorCode;
-import com.inmobi.androidsdk.IMAdView;
-import com.mopub.mobileads.CustomEventBanner;
-import com.mopub.mobileads.MoPubErrorCode;
 
-import java.util.HashMap;
-import java.util.Map;
+import com.inmobi.commons.InMobi;
+import com.inmobi.commons.InMobi.LOG_LEVEL;
+import com.inmobi.monetization.IMBanner;
+import com.inmobi.monetization.IMBannerListener;
+import com.inmobi.monetization.IMErrorCode;
+import com.mopub.mobileads.util.Views;
 
 /*
- * Tested with InMobi SDK 3.7.0.
+ * Tested with InMobi SDK 4.1.1
  */
-class InMobiBanner extends CustomEventBanner implements IMAdListener {
-    private CustomEventBannerListener mBannerListener;
-    private IMAdView mInMobiBanner;
-
-    /*
-     * Abstract methods from CustomEventBanner
-     */
-    @Override
-    protected void loadBanner(Context context, CustomEventBannerListener bannerListener,
-            Map<String, Object> localExtras, Map<String, String> serverExtras) {
-        mBannerListener = bannerListener;
-        
-        Activity activity = null;
+public class InMobiBanner extends CustomEventBanner implements IMBannerListener {
+
+	@Override
+	protected void loadBanner(Context context,
+			CustomEventBannerListener bannerListener,
+			Map<String, Object> localExtras, Map<String, String> serverExtras) {
+		mBannerListener = bannerListener;
+
+		Activity activity = null;
         if (context instanceof Activity) {
             activity = (Activity) context;
         } else {
@@ -61,71 +58,91 @@ protected void loadBanner(Context context, CustomEventBannerListener bannerListe
         	return;
         }
         
-        /*
-         * You may also pass this String down in the serverExtras Map by specifying Custom Event Data
-         * in MoPub's web interface.
-         */
-        mInMobiBanner = new IMAdView(activity, IMAdView.INMOBI_AD_UNIT_320X50, appId);
-        
-        mInMobiBanner.setIMAdListener(this);
-
-        IMAdRequest imAdRequest = new IMAdRequest();
-        Map<String, String> requestParameters = new HashMap<String, String>();
-        requestParameters.put("tp", "c_mopub");
-        imAdRequest.setRequestParams(requestParameters);
-
-        mInMobiBanner.loadNewAd(imAdRequest);
-    }
-
-    @Override
-    protected void onInvalidate() {
-    	if(mInMobiBanner != null) {
-    		mInMobiBanner.setIMAdListener(null);
-    	}
-    }
-
-    /*
-     * IMAdListener implementation
-     */
-    @Override
-    public void onAdRequestCompleted(IMAdView adView) {
-        if (mInMobiBanner != null && mBannerListener != null) {
-            Log.d("MoPub", "InMobi banner ad loaded successfully. Showing ad...");
-            mBannerListener.onBannerLoaded(mInMobiBanner);
-        } else {
-        	if(mBannerListener != null) {
-        		mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-        	}
-        }
-    }
-
-    @Override
-    public void onAdRequestFailed(IMAdView adView, ErrorCode errorCode) {
-        Log.d("MoPub", "InMobi banner ad failed to load.");
-    	if(mBannerListener != null) {
-    		mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_NO_FILL);
-    	}
-    }
-
-    @Override
-    public void onDismissAdScreen(IMAdView adView) {
-        Log.d("MoPub", "InMobi banner ad modal dismissed.");
-    }
-
-    @Override
-    public void onLeaveApplication(IMAdView adView) {
-        /*
-         * Because InMobi does not have an onClick equivalent, we use onLeaveApplication
-         * as a click notification.
-         */
-        Log.d("MoPub", "InMobi banner ad leaving application.");
-    	if(mBannerListener != null) {
-    		mBannerListener.onBannerClicked();
-    	}
-    }
-
-    @Override
-    public void onShowAdScreen(IMAdView adView) {
-        Log.d("MoPub", "InMobi banner ad modal shown.");
-    }
+		if (!isAppInitialized) {
+			InMobi.initialize(activity, appId);
+            isAppInitialized = true;
+		}
+
+		/*
+		 * You may also pass this String down in the serverExtras Map by
+		 * specifying Custom Event Data in MoPub's web interface.
+		 */
+		iMBanner = new IMBanner(activity, appId, IMBanner.INMOBI_AD_UNIT_320X50);
+
+        Map<String, String> map = new HashMap<String, String>();
+        map.put("tp", "c_mopub");
+        map.put("tp-ver", MoPub.SDK_VERSION);
+        iMBanner.setRequestParams(map);
+		InMobi.setLogLevel(LOG_LEVEL.VERBOSE);
+		iMBanner.setIMBannerListener(this);
+		iMBanner.setRefreshInterval(-1);
+		iMBanner.loadBanner();
+
+	}
+
+	private CustomEventBannerListener mBannerListener;
+	private IMBanner iMBanner;
+	private static boolean isAppInitialized = false;
+
+	/*
+	 * Abstract methods from CustomEventBanner
+	 */
+
+	@Override
+	public void onInvalidate() {
+		if (iMBanner != null) {
+            iMBanner.setIMBannerListener(null);
+            Views.removeFromParent(iMBanner);
+            iMBanner.destroy();
+		}
+	}
+
+	@Override
+	public void onBannerInteraction(IMBanner imBanner, Map<String, String> map) {
+		mBannerListener.onBannerClicked();
+	}
+
+	@Override
+	public void onBannerRequestFailed(IMBanner imBanner, IMErrorCode imErrorCode) {
+
+		if (imErrorCode == IMErrorCode.INTERNAL_ERROR) {
+			mBannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
+		} else if (imErrorCode == IMErrorCode.INVALID_REQUEST) {
+			mBannerListener
+					.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+		} else if (imErrorCode == IMErrorCode.NETWORK_ERROR) {
+			mBannerListener
+					.onBannerFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+		} else if (imErrorCode == IMErrorCode.NO_FILL) {
+			mBannerListener.onBannerFailed(MoPubErrorCode.NO_FILL);
+		} else {
+			mBannerListener.onBannerFailed(MoPubErrorCode.UNSPECIFIED);
+		}
+	}
+
+	@Override
+	public void onBannerRequestSucceeded(IMBanner imBanner) {
+		if (iMBanner != null) {
+			mBannerListener.onBannerLoaded(imBanner);
+
+		} else {
+			mBannerListener.onBannerFailed(null);
+		}
+	}
+
+	@Override
+	public void onDismissBannerScreen(IMBanner imBanner) {
+		mBannerListener.onBannerCollapsed();
+	}
+
+	@Override
+	public void onLeaveApplication(IMBanner imBanner) {
+
+	}
+
+	@Override
+	public void onShowBannerScreen(IMBanner imBanner) {
+		mBannerListener.onBannerExpanded();
+	}
+
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/InMobiInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/InMobiInterstitial.java
index 101cdf7c..69f84a1a 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/InMobiInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/InMobiInterstitial.java
@@ -1,36 +1,31 @@
 package com.mopub.mobileads;
 
+import java.util.HashMap;
+import java.util.Map;
+
 import android.app.Activity;
 import android.content.Context;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager;
 import android.util.Log;
-import com.inmobi.androidsdk.IMAdInterstitial;
-import com.inmobi.androidsdk.IMAdInterstitialListener;
-import com.inmobi.androidsdk.IMAdRequest;
-import com.inmobi.androidsdk.IMAdRequest.ErrorCode;
-import com.mopub.mobileads.CustomEventInterstitial;
-import com.mopub.mobileads.MoPubErrorCode;
 
-import java.util.HashMap;
-import java.util.Map;
+import com.inmobi.commons.InMobi;
+import com.inmobi.monetization.IMErrorCode;
+import com.inmobi.monetization.IMInterstitial;
+import com.inmobi.monetization.IMInterstitialListener;
 
 /*
- * Tested with InMobi SDK 3.7.0.
+ * Tested with InMobi SDK  4.1.1
  */
-class InMobiInterstitial extends CustomEventInterstitial implements IMAdInterstitialListener {
-    private CustomEventInterstitialListener mInterstitialListener;
-    private IMAdInterstitial mInMobiInterstitial;
-
-    /*
-     * Abstract methods from CustomEventInterstitial
-     */
-    @Override
-    protected void loadInterstitial(Context context, CustomEventInterstitialListener interstitialListener,
-            Map<String, Object> localExtras, Map<String, String> serverExtras) {
-        mInterstitialListener = interstitialListener;
-        
-        Activity activity = null;
+public class InMobiInterstitial extends CustomEventInterstitial implements IMInterstitialListener {
+
+	@Override
+	protected void loadInterstitial(Context context,
+			CustomEventInterstitialListener interstitialListener,
+			Map<String, Object> localExtras, Map<String, String> serverExtras) {
+		mInterstitialListener = interstitialListener;
+
+		Activity activity = null;
         if (context instanceof Activity) {
             activity = (Activity) context;
         } else {
@@ -57,82 +52,88 @@ protected void loadInterstitial(Context context, CustomEventInterstitialListener
         		mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
         	}
         	return;
-        }
+        }		
+		
+		/*
+		 * You may also pass this String down in the serverExtras Map by
+		 * specifying Custom Event Data in MoPub's web interface.
+		 */
+		if (!isAppInitialized) {
+			InMobi.initialize(activity, appId);
+            isAppInitialized = true;
+		}
+		this.iMInterstitial = new IMInterstitial(activity, appId);
 
-        /*
-         * You may also pass this String down in the serverExtras Map by specifying Custom Event Data
-         * in MoPub's web interface.
-         */
-        mInMobiInterstitial = new IMAdInterstitial(activity, appId);
-        
-        mInMobiInterstitial.setIMAdInterstitialListener(this);
-
-        IMAdRequest imAdRequest = new IMAdRequest();
-        Map<String, String> requestParameters = new HashMap<String, String>();
-        requestParameters.put("tp", "c_mopub");
-        imAdRequest.setRequestParams(requestParameters);
-
-        mInMobiInterstitial.loadNewAd(imAdRequest);
-    }
-    
-    @Override
-    protected void showInterstitial() {
-        Log.d("MoPub", "Showing InMobi interstitial ad.");
-    	if(mInMobiInterstitial != null) {
-    		mInMobiInterstitial.show();
-    	}
-    }
-
-    @Override
-    protected void onInvalidate() {
-    	if(mInMobiInterstitial != null) {
-    		mInMobiInterstitial.setIMAdInterstitialListener(null);
-    	}
-    }
-
-    /*
-     * IMAdListener implementation
-     */
-    @Override
-    public void onAdRequestLoaded(IMAdInterstitial adInterstitial) {
-        Log.d("MoPub", "InMobi interstitial ad loaded successfully.");
-        if(mInterstitialListener != null) {
-        	mInterstitialListener.onInterstitialLoaded();
-        }
-    }
-    
-    @Override
-    public void onAdRequestFailed(IMAdInterstitial adInterstitial, ErrorCode errorCode) {
-        Log.d("MoPub", "InMobi interstitial ad failed to load.");
-        if(mInterstitialListener != null) {
-        	mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
-        }
-    }
+        Map<String, String> map = new HashMap<String, String>();
+        map.put("tp", "c_mopub");
+        map.put("tp-ver", MoPub.SDK_VERSION);
+        iMInterstitial.setRequestParams(map);
+		iMInterstitial.setIMInterstitialListener(this);
+		iMInterstitial.loadInterstitial();
+	}
 
-    @Override
-    public void onShowAdScreen(IMAdInterstitial adInterstitial) {
-        if(mInterstitialListener != null) {
-        	mInterstitialListener.onInterstitialShown();
-        }
-    }
-    
-    @Override
-    public void onLeaveApplication(IMAdInterstitial adInterstitial) {
-        /*
-         * Because InMobi does not have an onClick equivalent, we use onLeaveApplication
-         * as a click notification.
-         */
-        Log.d("MoPub", "InMobi interstitial ad leaving application.");
-        if(mInterstitialListener != null) {
-        	mInterstitialListener.onInterstitialClicked();
-        }
-    }
+	private CustomEventInterstitialListener mInterstitialListener;
+	private IMInterstitial iMInterstitial;
+	private static boolean isAppInitialized = false;
 
-    @Override
-    public void onDismissAdScreen(IMAdInterstitial adInterstitial) {
-        Log.d("MoPub", "InMobi interstitial ad dismissed.");
-        if(mInterstitialListener != null) {
-        	mInterstitialListener.onInterstitialDismissed();
-        }
-    }
+	/*
+	 * Abstract methods from CustomEventInterstitial
+	 */
+
+	@Override
+	public void showInterstitial() {
+		if (iMInterstitial != null
+				&& IMInterstitial.State.READY.equals(this.iMInterstitial.getState())) {
+			iMInterstitial.show();
+		}
+	}
+
+	@Override
+	public void onInvalidate() {
+		if (iMInterstitial != null) {
+            iMInterstitial.setIMInterstitialListener(null);
+			iMInterstitial.destroy();
+		}
+	}
+
+	@Override
+	public void onDismissInterstitialScreen(IMInterstitial imInterstitial) {
+		mInterstitialListener.onInterstitialDismissed();
+	}
+
+	@Override
+	public void onInterstitialFailed(IMInterstitial imInterstitial, IMErrorCode imErrorCode) {
+		if (imErrorCode == IMErrorCode.INTERNAL_ERROR) {
+			mInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
+		} else if (imErrorCode == IMErrorCode.INVALID_REQUEST) {
+			mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+		} else if (imErrorCode == IMErrorCode.NETWORK_ERROR) {
+			mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+		} else if (imErrorCode == IMErrorCode.NO_FILL) {
+			mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NO_FILL);
+		} else {
+			mInterstitialListener.onInterstitialFailed(MoPubErrorCode.UNSPECIFIED);
+		}
+	}
+
+	@Override
+	public void onInterstitialInteraction(IMInterstitial imInterstitial,
+			Map<String, String> map) {
+		mInterstitialListener.onInterstitialClicked();
+	}
+
+	@Override
+	public void onInterstitialLoaded(IMInterstitial imInterstitial) {
+		mInterstitialListener.onInterstitialLoaded();
+	}
+
+	@Override
+	public void onLeaveApplication(IMInterstitial imInterstitial) {
+
+	}
+
+	@Override
+	public void onShowInterstitialScreen(IMInterstitial imInterstitial) {
+		mInterstitialListener.onInterstitialShown();
+	}
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MillennialBanner.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MillennialBanner.java
index c8fbae3a..620c31a6 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MillennialBanner.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MillennialBanner.java
@@ -32,17 +32,12 @@
 
 package com.mopub.mobileads;
 
-import java.util.Map;
-
 import android.content.Context;
 import android.location.Location;
 import android.util.Log;
+import com.millennialmedia.android.*;
 
-import com.millennialmedia.android.MMAd;
-import com.millennialmedia.android.MMAdView;
-import com.millennialmedia.android.MMBroadcastReceiver;
-import com.millennialmedia.android.MMRequest;
-import com.millennialmedia.android.MMSDK;
+import java.util.Map;
 
 /**
  * Compatible with version 5.1.0 of the Millennial Media SDK.
@@ -138,6 +133,7 @@ public void intentStarted(MMAd ad, String intent) {
             mBannerListener.onBannerClicked();
         }
 
+
         void register(Context context) {
             mContext = context;
             context.registerReceiver(this, MMBroadcastReceiver.createIntentFilter());
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MillennialInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MillennialInterstitial.java
index 6fcfdc73..e3905b1f 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MillennialInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MillennialInterstitial.java
@@ -32,20 +32,15 @@
 
 package com.mopub.mobileads;
 
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
-
-import java.util.Map;
-
 import android.content.Context;
 import android.location.Location;
 import android.util.Log;
+import com.millennialmedia.android.*;
 
-import com.millennialmedia.android.MMAd;
-import com.millennialmedia.android.MMBroadcastReceiver;
-import com.millennialmedia.android.MMInterstitial;
-import com.millennialmedia.android.MMRequest;
-import com.millennialmedia.android.MMSDK;
+import java.util.Map;
+
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
 
 /**
  * Compatible with version 5.1.0 of the Millennial Media SDK.
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPub.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPub.java
index b4c23769..95663a33 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPub.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPub.java
@@ -33,6 +33,6 @@
 package com.mopub.mobileads;
 
 public class MoPub {
-    public static final String SDK_VERSION = "1.17.2.0";
+    public static final String SDK_VERSION = "1.17.3.0";
 }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubActivity.java
index 3b402885..f26c89fa 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubActivity.java
@@ -50,6 +50,11 @@
 import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
 import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
 import static com.mopub.mobileads.HtmlWebViewClient.MOPUB_FAIL_LOAD;
 import static com.mopub.mobileads.HtmlWebViewClient.MOPUB_FINISH_LOAD;
 
@@ -118,14 +123,15 @@ public View getAdView() {
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        broadcastInterstitialAction(ACTION_INTERSTITIAL_SHOW);
+
+        broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_SHOW);
     }
 
     @Override
     protected void onDestroy() {
         mHtmlInterstitialWebView.loadUrl(WEB_VIEW_DID_CLOSE.getUrl());
         mHtmlInterstitialWebView.destroy();
-        broadcastInterstitialAction(ACTION_INTERSTITIAL_DISMISS);
+        broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_DISMISS);
         super.onDestroy();
     }
 
@@ -137,7 +143,7 @@ public void onInterstitialLoaded() {
 
         @Override
         public void onInterstitialFailed(MoPubErrorCode errorCode) {
-            broadcastInterstitialAction(ACTION_INTERSTITIAL_FAIL);
+            broadcastAction(MoPubActivity.this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_FAIL);
             finish();
         }
 
@@ -147,7 +153,7 @@ public void onInterstitialShown() {
 
         @Override
         public void onInterstitialClicked() {
-            broadcastInterstitialAction(ACTION_INTERSTITIAL_CLICK);
+            broadcastAction(MoPubActivity.this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_CLICK);
         }
 
         @Override
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java
index 40186216..29d87b3d 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java
@@ -52,6 +52,10 @@
 import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
 import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
 import static com.mopub.mobileads.util.VersionCode.ICE_CREAM_SANDWICH;
 import static com.mopub.mobileads.util.VersionCode.currentApiLevel;
 
@@ -77,6 +81,10 @@ public void onFailure(MraidView view) {
             public void onExpand(MraidView view) {
             }
 
+            @Override
+            public void onOpen(MraidView view) {
+            }
+
             @Override
             public void onClose(MraidView view, MraidView.ViewState newViewState) {
             }
@@ -121,6 +129,12 @@ public void onReady(MraidView view) {
                 mMraidView.loadUrl(WEB_VIEW_DID_APPEAR.getUrl());
                 showInterstitialCloseButton();
             }
+
+            @Override
+            public void onOpen(MraidView view) {
+                broadcastAction(MraidActivity.this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_CLICK);
+            }
+
             public void onClose(MraidView view, ViewState newViewState) {
                 mMraidView.loadUrl(WEB_VIEW_DID_CLOSE.getUrl());
                 finish();
@@ -146,7 +160,7 @@ public void onCloseButtonStateChange(MraidView view, boolean enabled) {
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        broadcastInterstitialAction(ACTION_INTERSTITIAL_SHOW);
+        broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_SHOW);
 
         if (currentApiLevel().isAtLeast(ICE_CREAM_SANDWICH)) {
             getWindow().setFlags(
@@ -170,7 +184,7 @@ protected void onResume() {
     @Override
     protected void onDestroy() {
         mMraidView.destroy();
-        broadcastInterstitialAction(ACTION_INTERSTITIAL_DISMISS);
+        broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_DISMISS);
         super.onDestroy();
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidBanner.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidBanner.java
index 60fa13ce..85455ffe 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidBanner.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidBanner.java
@@ -89,6 +89,10 @@ private void onExpand() {
         mBannerListener.onBannerClicked();
     }
 
+    private void onOpen() {
+        mBannerListener.onBannerClicked();
+    }
+
     private void onClose() {
         mBannerListener.onBannerCollapsed();
     }
@@ -108,6 +112,9 @@ public void onFailure(MraidView view) {
             public void onExpand(MraidView view) {
                 MraidBanner.this.onExpand();
             }
+            public void onOpen(MraidView view) {
+                MraidBanner.this.onOpen();
+            }
             public void onClose(MraidView view, ViewState newViewState) {
                 MraidBanner.this.onClose();
             }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidBrowserController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidBrowserController.java
index e2f6077f..036844cc 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidBrowserController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidBrowserController.java
@@ -50,13 +50,13 @@
     protected void open(String url) {
         Log.d(LOGTAG, "Opening url: " + url);
         
-        MraidView view = getMraidView();
-        if (view.getOnOpenListener() != null) {
-            view.getOnOpenListener().onOpen(view);
+        final MraidView mraidView = getMraidView();
+        if (mraidView.getMraidListener() != null) {
+            mraidView.getMraidListener().onOpen(mraidView);
         }
 
         // this is added because http/s can also be intercepted
-        if (!isWebSiteUrl(url) && canHandleApplicationUrl(url)) {
+        if (!isWebSiteUrl(url) && Utils.canHandleApplicationUrl(mContext, url)) {
             launchApplicationUrl(url);
             return;
         }
@@ -67,40 +67,13 @@ protected void open(String url) {
         mContext.startActivity(i);
     }
 
-    private boolean canHandleApplicationUrl(String url) {
-        // Determine which activities can handle the intent
-        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
-
-        // If there are no relevant activities, don't follow the link
-        if (!Utils.deviceCanHandleIntent(mContext, intent)) {
-            Log.w("MoPub", "Could not handle application specific action: " + url + ". " +
-                    "You may be running in the emulator or another device which does not " +
-                    "have the required application.");
-            return false;
-        }
-
-        return true;
-    }
-
     private boolean launchApplicationUrl(String url) {
         Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
         intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
 
         String errorMessage = "Unable to open intent.";
 
-        return executeIntent(getMraidView().getContext(), intent, errorMessage);
-    }
-
-    private boolean executeIntent(Context context, Intent intent, String errorMessage) {
-        try {
-            context.startActivity(intent);
-        } catch (Exception e) {
-            Log.d("MoPub", (errorMessage != null)
-                    ? errorMessage
-                    : "Unable to start intent.");
-            return false;
-        }
-        return true;
+        return Utils.executeIntent(getMraidView().getContext(), intent, errorMessage);
     }
 
     private boolean isWebSiteUrl(String url) {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
index a108a022..4bc2c842 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
@@ -42,6 +42,11 @@
 import java.util.*;
 
 import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
 
 public class MraidVideoPlayerActivity extends BaseInterstitialActivity implements BaseVideoView.BaseVideoViewListener {
     static final String VIDEO_URL = "video_url";
@@ -139,7 +144,7 @@ protected void onCreate(Bundle savedInstanceState) {
         hideInterstitialCloseButton();
         mVideoView.start();
 
-        broadcastVastInterstitialAction(ACTION_INTERSTITIAL_SHOW);
+        broadcastVastAction(ACTION_INTERSTITIAL_SHOW);
     }
 
     @Override
@@ -156,7 +161,7 @@ protected void onPause() {
 
     @Override
     protected void onDestroy() {
-        broadcastVastInterstitialAction(ACTION_INTERSTITIAL_DISMISS);
+        broadcastVastAction(ACTION_INTERSTITIAL_DISMISS);
         super.onDestroy();
     }
 
@@ -168,7 +173,7 @@ private BaseVideoView createVideoView() {
         } else if ("mraid".equals(clazz)) {
             return new MraidVideoView(this, getIntent(), this);
         } else {
-            broadcastInterstitialAction(ACTION_INTERSTITIAL_FAIL);
+            broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_FAIL);
             finish();
             return new BaseVideoView(this) {};
         }
@@ -187,7 +192,7 @@ public void showCloseButton() {
     public void videoError(boolean shouldFinish) {
         Log.d("MoPub", "Error: video can not be played.");
         showInterstitialCloseButton();
-        broadcastInterstitialAction(ACTION_INTERSTITIAL_FAIL);
+        broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_FAIL);
         if (shouldFinish) {
             finish();
         }
@@ -203,7 +208,7 @@ public void videoCompleted(boolean shouldFinish) {
 
     @Override
     public void videoClicked() {
-        broadcastInterstitialAction(ACTION_INTERSTITIAL_CLICK);
+        broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_CLICK);
     }
 
     /*
@@ -211,9 +216,9 @@ public void videoClicked() {
      * VastVideoViews, however, do not have a "splash screen", so this is their only opportunity to
      * relay the shown/dismissed callback.
      */
-    private void broadcastVastInterstitialAction(String action) {
+    private void broadcastVastAction(final String action) {
         if (mVideoView instanceof VastVideoView) {
-            broadcastInterstitialAction(action);
+            broadcastAction(this, getBroadcastIdentifier(), action);
         }
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidView.java
index 88ad2f5c..dcabf4a1 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidView.java
@@ -78,7 +78,6 @@
     static class MraidListenerInfo {
         private MraidListener mMraidListener;
         private OnCloseButtonStateChangeListener mOnCloseButtonListener;
-        private OnOpenListener mOnOpenListener;
     }
     private MraidListenerInfo mListenerInfo;
 
@@ -271,14 +270,6 @@ public OnCloseButtonStateChangeListener getOnCloseButtonStateChangeListener() {
         return mListenerInfo.mOnCloseButtonListener;
     }
     
-    public void setOnOpenListener(OnOpenListener listener) {
-        mListenerInfo.mOnOpenListener = listener;
-    }
-    
-    public OnOpenListener getOnOpenListener() {
-        return mListenerInfo.mOnOpenListener;
-    }
-    
     // JavaScript injection ////////////////////////////////////////////////////////////////////////
     
     protected void injectJavaScript(String js) {
@@ -401,6 +392,7 @@ public void onLoadResource(WebView view, String url) {
         public void onReady(MraidView view);
         public void onFailure(MraidView view);
         public void onExpand(MraidView view);
+        public void onOpen(MraidView view);
         public void onClose(MraidView view, ViewState newViewState);
     }
 
@@ -408,16 +400,13 @@ public void onLoadResource(WebView view, String url) {
         @Override public void onReady(MraidView view) { }
         @Override public void onFailure(MraidView view) { }
         @Override public void onExpand(MraidView view) { }
+        @Override public void onOpen(MraidView view) { }
         @Override public void onClose(MraidView view, ViewState newViewState) { }
     }
 
     public interface OnCloseButtonStateChangeListener {
         public void onCloseButtonStateChange(MraidView view, boolean enabled);
     }
-    
-    public interface OnOpenListener {
-        public void onOpen(MraidView view);
-    }
 
     public boolean getIsVisible() {
         return mIsVisible;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
index 05a4d155..d390d919 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
@@ -43,6 +43,7 @@
     private EventForwardingBroadcastReceiver mBroadcastReceiver;
     protected Context mContext;
     protected AdConfiguration mAdConfiguration;
+    long mBroadcastIdentifier;
 
     abstract protected void extractExtras(Map<String, String> serverExtras);
     abstract protected void preRenderHtml(CustomEventInterstitialListener customEventInterstitialListener);
@@ -65,7 +66,11 @@ protected void loadInterstitial(
         }
 
         mAdConfiguration = AdConfiguration.extractFromMap(localExtras);
-        mBroadcastReceiver = new EventForwardingBroadcastReceiver(customEventInterstitialListener);
+        if (mAdConfiguration != null) {
+            mBroadcastIdentifier = mAdConfiguration.getBroadcastIdentifier();
+        }
+
+        mBroadcastReceiver = new EventForwardingBroadcastReceiver(customEventInterstitialListener, mBroadcastIdentifier);
         mBroadcastReceiver.register(context);
 
         preRenderHtml(customEventInterstitialListener);
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/Utils.java b/mopub-sdk/src/main/java/com/mopub/mobileads/Utils.java
index 4b8c9df8..b0154597 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/Utils.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/Utils.java
@@ -32,16 +32,23 @@
 
 package com.mopub.mobileads;
 
+import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
 import android.content.pm.PackageManager;
 import android.content.pm.ResolveInfo;
+import android.net.Uri;
+import android.util.Log;
 
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 import java.util.*;
+import java.util.concurrent.atomic.*;
 
 public class Utils {
+    private static final String TWITTER_APPLICATION_DEEPLINK_URL = "twitter://timeline";
+    private static final AtomicLong sNextGeneratedId = new AtomicLong(1);
+
     private Utils() {
     }
 
@@ -58,7 +65,8 @@ public static String sha1(String s) {
             return hexString.toString();
         } catch (NoSuchAlgorithmException e) {
             return "";
-        } catch (NullPointerException e) {
+        }
+        catch (NullPointerException e) {
             return "";
         }
     }
@@ -68,4 +76,62 @@ public static boolean deviceCanHandleIntent(Context context, Intent intent) {
         List<ResolveInfo> activities = packageManager.queryIntentActivities(intent, 0);
         return (activities.size() > 0);
     }
+
+    public static boolean canHandleTwitterUrl(Context context) {
+        return canHandleApplicationUrl(context, TWITTER_APPLICATION_DEEPLINK_URL, false);
+    }
+
+    public static boolean canHandleApplicationUrl(Context context, String url) {
+        return canHandleApplicationUrl(context, url, true);
+    }
+
+    public static boolean canHandleApplicationUrl(Context context, String url, boolean logError) {
+        // Determine which activities can handle the intent
+        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
+
+        // If there are no relevant activities, don't follow the link
+        if (!deviceCanHandleIntent(context, intent)) {
+            if (logError) {
+                Log.w("MoPub", "Could not handle application specific action: " + url + ". " +
+                        "You may be running in the emulator or another device which does not " +
+                        "have the required application.");
+            }
+            return false;
+        }
+
+        return true;
+    }
+
+    public static boolean executeIntent(Context context, Intent intent, String errorMessage) {
+        try {
+            if (!(context instanceof Activity)) {
+                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+            }
+            context.startActivity(intent);
+        } catch (Exception e) {
+            Log.d("MoPub", (errorMessage != null)
+                    ? errorMessage
+                    : "Unable to start intent.");
+            return false;
+        }
+        return true;
+    }
+
+    /**
+     * Adaptation of View.generateViewId() from API 17.
+     * There is only a guarantee of ID uniqueness within a given session. Please do not store these
+     * values between sessions.
+     */
+    public static long generateUniqueId() {
+        for (;;) {
+            final long result = sNextGeneratedId.get();
+            long newValue = result + 1;
+            if (newValue > Long.MAX_VALUE - 1) {
+                newValue = 1;
+            }
+            if (sNextGeneratedId.compareAndSet(result, newValue)) {
+                return result;
+            }
+        }
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoView.java
index 7a9b4aca..9cacc8cb 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoView.java
@@ -125,6 +125,7 @@ public boolean onTouch(View view, MotionEvent motionEvent) {
                     }
 
                     Intent mraidBrowserIntent = new Intent(context, MraidBrowser.class);
+                    mraidBrowserIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                     mraidBrowserIntent.putExtra(MraidBrowser.URL_EXTRA, mClickThroughUrl);
                     context.startActivity(mraidBrowserIntent);
                 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastManager.java
index 1565d4fc..c212d9ea 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastManager.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastManager.java
@@ -1,6 +1,8 @@
 package com.mopub.mobileads.util.vast;
 
 import android.os.AsyncTask;
+import android.util.Log;
+
 import com.mopub.mobileads.factories.HttpClientFactory;
 import com.mopub.mobileads.util.HttpClients;
 import com.mopub.mobileads.util.Strings;
@@ -125,7 +127,7 @@ private void loadVastDataFromXml(VastXmlManager xmlManager) {
         }
     }
 
-    private String processVastFollowingRedirect(String vastXml) throws IOException, SAXException, ParserConfigurationException {
+    private String processVastFollowingRedirect(String vastXml) throws Exception {
         VastXmlManager xmlManager = new VastXmlManager();
         xmlManager.parseVastXml(vastXml);
 
@@ -160,12 +162,8 @@ protected Void doInBackground(String... strings) {
                         vastXml = processVastFollowingRedirect(vastXml);
                     }
                 }
-            } catch (IOException e) {
-                e.printStackTrace();
-            } catch (SAXException e) {
-                e.printStackTrace();
-            } catch (ParserConfigurationException e) {
-                e.printStackTrace();
+            } catch (Exception e) {
+                Log.d("MoPub", "Failed to parse VAST XML", e);
             }
 
             return null;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdConfigurationTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdConfigurationTest.java
index 676f6c2e..1158f466 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdConfigurationTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdConfigurationTest.java
@@ -86,7 +86,7 @@ public void constructor_withNullContext_shouldSetUserAgent() throws Exception {
     }
 
     @Test
-    public void constructor_shouldDeviceLocale() throws Exception {
+    public void constructor_shouldSetDeviceLocale() throws Exception {
         Robolectric.getShadowApplication().getResources().getConfiguration().locale = Locale.FRANCE;
 
         subject = new AdConfiguration(context);
@@ -110,6 +110,11 @@ public void constructor_shouldSetDeviceModelAndPlatformVersionAndSdkVersion() th
         assertThat(subject.getSdkVersion()).isEqualTo(MoPub.SDK_VERSION);
     }
 
+    @Test
+    public void constructor_shouldSetBroadcastIdentifier() throws Exception {
+        assertThat(subject.getBroadcastIdentifier()).isGreaterThan(0);
+    }
+
     @Test
     public void addHttpResponse_shouldSetFields() throws Exception {
         Date now = new Date();
@@ -184,7 +189,7 @@ public void addHttpResponse_withInvalidTimeoutDelay_shouldSetAdTimeoutDelayToNul
     }
 
     @Test
-    public void caddHttpResponsee_shouldSetRefreshTimeToMinimumOf10Seconds() throws Exception {
+    public void addHttpResponse_shouldSetRefreshTimeToMinimumOf10Seconds() throws Exception {
         httpResponse.addHeader("X-Refreshtime", "0");
 
         subject.addHttpResponse(httpResponse);
@@ -224,6 +229,7 @@ public void cleanup_shouldClearAllFields() throws Exception {
         subject.addHttpResponse(httpResponse);
         subject.cleanup();
 
+        assertThat(subject.getBroadcastIdentifier()).isEqualTo(0);
         assertThat(subject.getAdUnitId()).isNull();
         assertThat(subject.getResponseString()).isNull();
         assertThat(subject.getAdType()).isNull();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdUrlGeneratorTest.java
index 1a0e34f6..1ffd952c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdUrlGeneratorTest.java
@@ -42,9 +42,12 @@
 import android.provider.Settings;
 import android.telephony.TelephonyManager;
 import com.mopub.mobileads.test.support.SdkTestRunner;
+
+import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Mockito;
 import org.robolectric.shadows.ShadowConnectivityManager;
 import org.robolectric.shadows.ShadowNetworkInfo;
 import org.robolectric.shadows.ShadowTelephonyManager;
@@ -60,10 +63,12 @@
 import static android.net.ConnectivityManager.TYPE_WIFI;
 import static android.telephony.TelephonyManager.NETWORK_TYPE_UNKNOWN;
 import static com.mopub.mobileads.AdUrlGenerator.MoPubNetworkType;
+import static com.mopub.mobileads.AdUrlGenerator.TwitterAppInstalledStatus;
 import static com.mopub.mobileads.util.Strings.isEmpty;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.robolectric.Robolectric.application;
 import static org.robolectric.Robolectric.shadowOf;
+import static org.mockito.Mockito.doReturn;
 
 @RunWith(SdkTestRunner.class)
 public class AdUrlGeneratorTest {
@@ -88,6 +93,11 @@ public void setup() {
         shadowConnectivityManager = shadowOf((ConnectivityManager) application.getSystemService(Context.CONNECTIVITY_SERVICE));
     }
 
+    @After
+    public void tearDown() throws Exception {
+        AdUrlGenerator.setTwitterAppInstalledStatus(TwitterAppInstalledStatus.UNKNOWN);
+    }
+
     @Test
     public void generateAdUrl_shouldIncludeMinimumFields() throws Exception {
         String expectedAdUrl = new AdUrlBuilder(expectedUdidSha).build();
@@ -246,6 +256,45 @@ public void generateAdUrl_whenNoNetworkPermission_shouldGenerateUnknownNetworkTy
         assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.UNKNOWN).build());
     }
 
+    @Test
+    public void generateAdUrl_whenTwitterIsNotInstalled_shouldProcessAndNotSetTwitterInstallStatusOnFirstRequest() throws Exception {
+        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdidSha);
+
+        AdUrlGenerator spySubject = Mockito.spy(subject);
+        AdUrlGenerator.setTwitterAppInstalledStatus(TwitterAppInstalledStatus.UNKNOWN);
+        doReturn(TwitterAppInstalledStatus.NOT_INSTALLED).when(spySubject).getTwitterAppInstallStatus();
+
+        String adUrl = spySubject.generateUrlString("ads.mopub.com");
+
+        assertThat(adUrl).isEqualTo(urlBuilder.withTwitterAppInstalledStatus(TwitterAppInstalledStatus.NOT_INSTALLED).build());
+    }
+
+    @Test
+    public void generateAdUrl_whenTwitterIsInstalled_shouldProcessAndSetTwitterInstallStatusOnFirstRequest() throws Exception {
+        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdidSha);
+
+        AdUrlGenerator spySubject = Mockito.spy(subject);
+        AdUrlGenerator.setTwitterAppInstalledStatus(TwitterAppInstalledStatus.UNKNOWN);
+        doReturn(TwitterAppInstalledStatus.INSTALLED).when(spySubject).getTwitterAppInstallStatus();
+
+        String adUrl = spySubject.generateUrlString("ads.mopub.com");
+
+        assertThat(adUrl).isEqualTo(urlBuilder.withTwitterAppInstalledStatus(TwitterAppInstalledStatus.INSTALLED).build());
+    }
+
+    @Test
+    public void generateAdUrl_shouldNotProcessTwitterInstallStatusIfStatusIsAlreadySet() throws Exception {
+        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdidSha);
+
+        AdUrlGenerator spySubject = Mockito.spy(subject);
+        AdUrlGenerator.setTwitterAppInstalledStatus(TwitterAppInstalledStatus.NOT_INSTALLED);
+        doReturn(TwitterAppInstalledStatus.INSTALLED).when(spySubject).getTwitterAppInstallStatus();
+
+        String adUrl = spySubject.generateUrlString("ads.mopub.com");
+
+        assertThat(adUrl).isEqualTo(urlBuilder.withTwitterAppInstalledStatus(TwitterAppInstalledStatus.NOT_INSTALLED).build());
+    }
+
     @Test
     public void generateAdUrl_shouldTolerateNullActiveNetwork() throws Exception {
         AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdidSha);
@@ -278,6 +327,7 @@ private String generateMinimumUrlString() {
         private String carrierName = "";
         private MoPubNetworkType networkType = MoPubNetworkType.MOBILE;
         private int externalStoragePermission;
+        private TwitterAppInstalledStatus twitterAppInstalledStatus = TwitterAppInstalledStatus.UNKNOWN;
 
         public AdUrlBuilder(String expectedUdidSha) {
             this.expectedUdidSha = expectedUdidSha;
@@ -304,7 +354,9 @@ public String build() {
                     paramIfNotEmpty("cn", carrierName) +
                     "&ct=" + networkType +
                     "&av=1.0" +
-                    "&android_perms_ext_storage=" + externalStoragePermission;
+                    "&android_perms_ext_storage=" + externalStoragePermission +
+                    ((twitterAppInstalledStatus == TwitterAppInstalledStatus.INSTALLED) ? "&ts=1" : "");
+
         }
 
         public AdUrlBuilder withAdUnitId(String adUnitId) {
@@ -353,6 +405,11 @@ public AdUrlBuilder withExternalStoragePermission(boolean enabled) {
             return this;
         }
 
+        public AdUrlBuilder withTwitterAppInstalledStatus(TwitterAppInstalledStatus status) {
+            this.twitterAppInstalledStatus = status;
+            return this;
+        }
+
         private String paramIfNotEmpty(String key, String value) {
             if (isEmpty(value)) {
                 return "";
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
index 911d3e76..d973f79f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
@@ -34,6 +34,7 @@
 
 import android.app.Activity;
 import android.content.BroadcastReceiver;
+import android.content.Context;
 import android.content.Intent;
 import android.graphics.drawable.StateListDrawable;
 import android.view.View;
@@ -46,12 +47,15 @@
 import org.robolectric.Robolectric;
 import org.robolectric.shadows.ShadowLocalBroadcastManager;
 
-import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.mobileads.BaseInterstitialActivity.HTML_INTERSTITIAL_INTENT_FILTER;
+import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.getHtmlInterstitialIntentFilter;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static com.mopub.mobileads.resource.Drawables.INTERSTITIAL_CLOSE_BUTTON_NORMAL;
 import static com.mopub.mobileads.resource.Drawables.INTERSTITIAL_CLOSE_BUTTON_PRESSED;
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.reset;
@@ -66,20 +70,21 @@
     protected BaseInterstitialActivity subject;
     protected BroadcastReceiver broadcastReceiver;
     protected AdConfiguration adConfiguration;
+    protected long testBroadcastIdentifier;
 
     public void setup() {
         broadcastReceiver = mock(BroadcastReceiver.class);
-        adConfiguration = mock(AdConfiguration.class);
+        testBroadcastIdentifier = 2222;
     }
 
     @Test
     public void onCreate_shouldBroadcastInterstitialShow() throws Exception {
-        Intent expectedIntent = new Intent(ACTION_INTERSTITIAL_SHOW);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, HTML_INTERSTITIAL_INTENT_FILTER);
+        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, testBroadcastIdentifier);
+        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
 
         subject.onCreate(null);
 
-        verify(broadcastReceiver).onReceive(eq(subject), eq(expectedIntent));
+        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
     }
 
     @Test
@@ -148,19 +153,19 @@ public void onDestroy_shouldCleanUpContentView() throws Exception {
 
     @Test
     public void onDestroy_shouldBroadcastInterstitialDismiss() throws Exception {
-        Intent expectedIntent = new Intent(ACTION_INTERSTITIAL_DISMISS);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, HTML_INTERSTITIAL_INTENT_FILTER);
+        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, testBroadcastIdentifier);
+        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
 
         subject.onCreate(null);
         subject.onDestroy();
 
-        verify(broadcastReceiver).onReceive(eq(subject), eq(expectedIntent));
+        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
     }
 
     @Test
     public void getAdConfiguration_shouldReturnAdConfigurationFromIntent() throws Exception {
         Intent intent = new Intent();
-        intent.putExtra(AdFetcher.AD_CONFIGURATION_KEY, adConfiguration);
+        intent.putExtra(AD_CONFIGURATION_KEY, adConfiguration);
 
         subject.onCreate(null);
         subject.setIntent(intent);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java
index d2f6d70f..e6f2844e 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java
@@ -110,4 +110,15 @@ public void destroy_shouldRemoveSelfFromParent_beforeCallingDestroy() throws Exc
         verify(parent).removeView(eq(subject));
         assertThat(shadow.wasDestroyCalled()).isTrue();
     }
+
+    @Test
+    public void destroy_shouldSetTheCorrectStateVariable() {
+        subject = new BaseWebView(context);
+
+        assertThat(subject.mIsDestroyed).isFalse();
+
+        subject.destroy();
+
+        assertThat(subject.mIsDestroyed).isTrue();
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
index 461d671e..7f157fa2 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
@@ -34,23 +34,33 @@
 
 import android.app.Activity;
 import android.content.Intent;
+import android.content.IntentFilter;
 import android.support.v4.content.LocalBroadcastManager;
+import com.mopub.mobileads.factories.CustomEventInterstitialAdapterFactory;
 import com.mopub.mobileads.test.support.SdkTestRunner;
+import org.fest.util.Sets;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.shadows.ShadowLocalBroadcastManager;
 
-import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_CLICK;
-import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_FAIL;
-import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_SHOW;
+import java.util.*;
+
+import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
-import static org.mockito.Matchers.eq;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.getHtmlInterstitialIntentFilter;
+import static com.mopub.mobileads.MoPubInterstitial.InterstitialAdListener;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 @RunWith(SdkTestRunner.class)
 public class EventForwardingBroadcastReceiverTest {
@@ -58,17 +68,71 @@
     private CustomEventInterstitialListener customEventInterstitialListener;
     private EventForwardingBroadcastReceiver subject;
     private Activity context;
+    private int broadcastIdentifier;
 
     @Before
     public void setUp() throws Exception {
         customEventInterstitialListener = mock(CustomEventInterstitialListener.class);
-        subject = new EventForwardingBroadcastReceiver(customEventInterstitialListener);
+        broadcastIdentifier = 27027027;
+        subject = new EventForwardingBroadcastReceiver(customEventInterstitialListener, broadcastIdentifier);
         context = new Activity();
     }
 
+    @Ignore("pending")
+    @Test
+    public void twoDifferentInterstitials_shouldNotHearEachOthersBroadcasts() throws Exception {
+        final MoPubInterstitial interstitialA = new MoPubInterstitial(context, "adunitid");
+        final InterstitialAdListener listenerA = mock(InterstitialAdListener.class);
+        interstitialA.setInterstitialAdListener(listenerA);
+
+        final MoPubInterstitial interstitialB = new MoPubInterstitial(context, "adunitid");
+        final InterstitialAdListener listenerB = mock(InterstitialAdListener.class);
+        interstitialB.setInterstitialAdListener(listenerB);
+
+        final CustomEventInterstitialAdapter customEventInterstitialAdapter =
+                CustomEventInterstitialAdapterFactory.create(
+                        interstitialA,
+                        "com.mopub.mobileads.HtmlInterstitial",
+                        "{" + HTML_RESPONSE_BODY_KEY + ":response}");
+
+        customEventInterstitialAdapter.loadInterstitial();
+        verify(listenerA).onInterstitialLoaded(interstitialA);
+        verify(listenerB, never()).onInterstitialLoaded(any(MoPubInterstitial.class));
+
+        interstitialA.onCustomEventInterstitialShown();
+        verify(listenerA).onInterstitialLoaded(interstitialA);
+        verify(listenerB, never()).onInterstitialShown(any(MoPubInterstitial.class));
+
+        interstitialA.onCustomEventInterstitialClicked();
+        verify(listenerA).onInterstitialClicked(interstitialA);
+        verify(listenerB, never()).onInterstitialClicked(any(MoPubInterstitial.class));
+
+        interstitialA.onCustomEventInterstitialDismissed();
+        verify(listenerA).onInterstitialDismissed(interstitialA);
+        verify(listenerB, never()).onInterstitialDismissed(any(MoPubInterstitial.class));
+    }
+
+    @Test
+    public void constructor_shouldSetIntentFilter() throws Exception {
+        Set<String> expectedActions = Sets.newLinkedHashSet(
+                ACTION_INTERSTITIAL_FAIL,
+                ACTION_INTERSTITIAL_SHOW,
+                ACTION_INTERSTITIAL_DISMISS,
+                ACTION_INTERSTITIAL_CLICK
+        );
+
+        final IntentFilter intentFilter = EventForwardingBroadcastReceiver.getHtmlInterstitialIntentFilter();
+        final Iterator<String> actionIterator = intentFilter.actionsIterator();
+
+        assertThat(intentFilter.countActions()).isEqualTo(4);
+        while (actionIterator.hasNext()) {
+            assertThat(expectedActions.contains(actionIterator.next()));
+        }
+    }
+
     @Test
     public void onReceive_whenActionInterstitialFail_shouldNotifyListener() throws Exception {
-        Intent intent = new Intent(ACTION_INTERSTITIAL_CLICK);
+        Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_CLICK, broadcastIdentifier);
 
         subject.onReceive(context, intent);
 
@@ -77,17 +141,17 @@ public void onReceive_whenActionInterstitialFail_shouldNotifyListener() throws E
 
     @Test
     public void onReceive_whenActionInterstitialShow_shouldNotifyListener() throws Exception {
-        Intent intent = new Intent(ACTION_INTERSTITIAL_FAIL);
+        Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, broadcastIdentifier);
 
         subject.onReceive(context, intent);
 
-        verify(customEventInterstitialListener).onInterstitialFailed(eq(NETWORK_INVALID_STATE));
+        verify(customEventInterstitialListener).onInterstitialShown();
     }
 
 
     @Test
     public void onReceive_whenActionInterstitialDismiss_shouldNotifyListener() throws Exception {
-        Intent intent = new Intent(ACTION_INTERSTITIAL_DISMISS);
+        Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, broadcastIdentifier);
 
         subject.onReceive(context, intent);
 
@@ -96,18 +160,35 @@ public void onReceive_whenActionInterstitialDismiss_shouldNotifyListener() throw
 
     @Test
     public void onReceive_whenActionInterstitialClick_shouldNotifyListener() throws Exception {
-        Intent intent = new Intent(ACTION_INTERSTITIAL_CLICK);
+        Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_CLICK, broadcastIdentifier);
 
         subject.onReceive(context, intent);
 
         verify(customEventInterstitialListener).onInterstitialClicked();
     }
 
+    @Test
+    public void onReceive_withIncorrectBroadcastIdentifier_shouldDoNothing() throws Exception {
+        long incorrectBroadcastIdentifier = broadcastIdentifier + 1;
+
+        Intent fail = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_FAIL, incorrectBroadcastIdentifier);
+        Intent show = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, incorrectBroadcastIdentifier);
+        Intent click = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_CLICK, incorrectBroadcastIdentifier);
+        Intent dismiss = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, incorrectBroadcastIdentifier);
+
+        subject.onReceive(context, fail);
+        subject.onReceive(context, show);
+        subject.onReceive(context, click);
+        subject.onReceive(context, dismiss);
+
+        verifyNoMoreInteractions(customEventInterstitialListener);
+    }
+
     @Test
     public void onReceiver_whenCustomEventInterstitialListenerIsNull_shouldNotBlowUp() throws Exception {
         Intent intent = new Intent(ACTION_INTERSTITIAL_SHOW);
 
-        subject = new EventForwardingBroadcastReceiver(null);
+        subject = new EventForwardingBroadcastReceiver(null, broadcastIdentifier);
         subject.onReceive(context, intent);
 
         // pass
@@ -116,7 +197,7 @@ public void onReceiver_whenCustomEventInterstitialListenerIsNull_shouldNotBlowUp
     @Test
     public void register_shouldEnableReceivingBroadcasts() throws Exception {
         subject.register(context);
-        Intent intent = new Intent(ACTION_INTERSTITIAL_SHOW);
+        Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, broadcastIdentifier);
         ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
 
         verify(customEventInterstitialListener).onInterstitialShown();
@@ -127,7 +208,7 @@ public void unregister_shouldDisableReceivingBroadcasts() throws Exception {
         subject.register(context);
 
         subject.unregister();
-        Intent intent = new Intent(ACTION_INTERSTITIAL_SHOW);
+        Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, broadcastIdentifier);
         ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
 
         verify(customEventInterstitialListener, never()).onInterstitialShown();
@@ -145,12 +226,18 @@ public void unregister_shouldNotLeakTheContext() throws Exception {
         subject.register(context);
         subject.unregister();
 
-        LocalBroadcastManager.getInstance(context).registerReceiver(subject, BaseInterstitialActivity.HTML_INTERSTITIAL_INTENT_FILTER);
+        LocalBroadcastManager.getInstance(context).registerReceiver(subject, getHtmlInterstitialIntentFilter());
         subject.unregister();
 
         // Unregister shouldn't know the context any more and so should not have worked
-        Intent intent = new Intent(ACTION_INTERSTITIAL_SHOW);
+        Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, broadcastIdentifier);
         ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
         verify(customEventInterstitialListener).onInterstitialShown();
     }
+
+    static Intent getIntentForActionAndIdentifier(final String action, final long broadcastIdentifier) {
+        final Intent intent = new Intent(action);
+        intent.putExtra("broadcastIdentifier", broadcastIdentifier);
+        return intent;
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
index bb205603..cd5da469 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
@@ -45,19 +45,23 @@
 
 import java.util.*;
 
+import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
 import static com.mopub.mobileads.AdFetcher.CLICKTHROUGH_URL_KEY;
 import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.AdFetcher.REDIRECT_URL_KEY;
 import static com.mopub.mobileads.AdFetcher.SCROLLABLE_KEY;
-import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.stub;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.withSettings;
 
 @RunWith(SdkTestRunner.class)
 public class HtmlInterstitialTest extends ResponseBodyInterstitialTest {
@@ -67,6 +71,7 @@
     private Map<String,String> serverExtras;
     private HtmlInterstitialWebView htmlInterstitialWebView;
     private String expectedResponse;
+    private long broadcastIdentifier;
 
     @Before
     public void setUp() throws Exception {
@@ -79,6 +84,11 @@ public void setUp() throws Exception {
         localExtras = new HashMap<String, Object>();
         serverExtras = new HashMap<String, String>();
         serverExtras.put(HTML_RESPONSE_BODY_KEY, Uri.encode(expectedResponse));
+
+        broadcastIdentifier = 2222;
+        final AdConfiguration adConfiguration = mock(AdConfiguration.class, withSettings().serializable());
+        stub(adConfiguration.getBroadcastIdentifier()).toReturn(broadcastIdentifier);
+        localExtras.put(AD_CONFIGURATION_KEY, adConfiguration);
     }
 
     @Test
@@ -104,7 +114,6 @@ public void loadInterstitial_whenNoHtmlResponsePassedIn_shouldCallLoadFailUrl()
 
     @Test
     public void showInterstitial_withMinimumExtras_shouldStartMoPubActivityWithDefaults() throws Exception {
-
         subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
         subject.showInterstitial();
 
@@ -139,13 +148,12 @@ public void showInterstitial_shouldStartMoPubActivityWithAllExtras() throws Exce
     public void loadInterstitial_shouldConnectListenerToBroadcastReceiver() throws Exception {
         subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
 
-        Intent intent;
-        intent = new Intent(ACTION_INTERSTITIAL_SHOW);
+        Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, subject.mAdConfiguration.getBroadcastIdentifier());
         ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
 
         verify(customEventInterstitialListener).onInterstitialShown();
 
-        intent = new Intent(ACTION_INTERSTITIAL_DISMISS);
+        intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, subject.mAdConfiguration.getBroadcastIdentifier());
         ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
 
         verify(customEventInterstitialListener).onInterstitialDismissed();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java
index 8a90ee16..a16e3848 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java
@@ -38,17 +38,20 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Mockito;
 import org.robolectric.Robolectric;
 
 import java.lang.reflect.Method;
 
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.mobileads.HtmlInterstitialWebView.HtmlInterstitialWebViewListener;
+import static com.mopub.mobileads.HtmlInterstitialWebView.MOPUB_JS_INTERFACE_NAME;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.verify;
 import static org.robolectric.Robolectric.shadowOf;
 
@@ -97,7 +100,7 @@ public void htmlBannerWebViewListener_shouldForwardCalls() throws Exception {
     public void init_shouldAddJavascriptInterface() throws Exception {
         subject.init(customEventInterstitialListener, isScrollable, clickthroughUrl, redirectUrl);
 
-        Object javascriptInterface = shadowOf(subject).getJavascriptInterface("mopubUriInterface");
+        Object javascriptInterface = shadowOf(subject).getJavascriptInterface(MOPUB_JS_INTERFACE_NAME);
         assertThat(javascriptInterface).isNotNull();
 
         Method fireFinishLoad = javascriptInterface.getClass().getDeclaredMethod("fireFinishLoad");
@@ -109,4 +112,28 @@ public void init_shouldAddJavascriptInterface() throws Exception {
         Robolectric.unPauseMainLooper();
         verify(customEventInterstitialListener).onInterstitialLoaded();
     }
+
+    @Test
+    public void destroy_shouldRemoveJavascriptInterface() {
+        HtmlInterstitialWebView spySubject = spy(subject);
+
+        spySubject.destroy();
+
+        verify(spySubject).removeJavascriptInterface(MOPUB_JS_INTERFACE_NAME);
+    }
+
+    @Test
+    public void destroy_shouldPreventJavascriptInterfaceFromNotifyingListener() throws Exception{
+        subject.init(customEventInterstitialListener, isScrollable, clickthroughUrl, redirectUrl);
+
+        Object javascriptInterface = shadowOf(subject).getJavascriptInterface(MOPUB_JS_INTERFACE_NAME);
+        assertThat(javascriptInterface).isNotNull();
+
+        subject.setIsDestroyed(true);
+
+        Method fireFinishLoad = javascriptInterface.getClass().getDeclaredMethod("fireFinishLoad");
+        fireFinishLoad.invoke(javascriptInterface);
+
+        verify(customEventInterstitialListener, never()).onInterstitialLoaded();
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
index fcdc6d09..83c02188 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
@@ -34,6 +34,7 @@
 
 import android.app.Activity;
 import android.content.BroadcastReceiver;
+import android.content.Context;
 import android.content.Intent;
 import android.view.View;
 import android.webkit.WebViewClient;
@@ -52,10 +53,11 @@
 import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.AdFetcher.REDIRECT_URL_KEY;
 import static com.mopub.mobileads.AdFetcher.SCROLLABLE_KEY;
-import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_CLICK;
-import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_FAIL;
-import static com.mopub.mobileads.BaseInterstitialActivity.HTML_INTERSTITIAL_INTENT_FILTER;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.getHtmlInterstitialIntentFilter;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static com.mopub.mobileads.HtmlInterstitialWebView.MoPubUriJavascriptFireFinishLoadListener;
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 import static org.fest.assertions.api.Assertions.assertThat;
@@ -64,7 +66,9 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.stub;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.withSettings;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
@@ -81,6 +85,10 @@
     @Before
     public void setUp() throws Exception {
         super.setup();
+
+        adConfiguration = mock(AdConfiguration.class, withSettings().serializable());
+        stub(adConfiguration.getBroadcastIdentifier()).toReturn(testBroadcastIdentifier);
+
         Intent moPubActivityIntent = createMoPubActivityIntent(EXPECTED_HTML_DATA, EXPECTED_IS_SCROLLABLE, EXPECTED_REDIRECT_URL, EXPECTED_CLICKTHROUGH_URL, adConfiguration);
         htmlInterstitialWebView = TestHtmlInterstitialWebViewFactory.getSingletonMock();
         resetMockedView(htmlInterstitialWebView);
@@ -214,26 +222,26 @@ public void getAdView_shouldCreateHtmlInterstitialWebViewAndLoadResponse() throw
     public void getAdView_shouldSetUpForBroadcastingClicks() throws Exception {
         subject.getAdView();
         BroadcastReceiver broadcastReceiver = mock(BroadcastReceiver.class);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, HTML_INTERSTITIAL_INTENT_FILTER);
+        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
 
         TestHtmlInterstitialWebViewFactory.getLatestListener().onInterstitialClicked();
 
         ArgumentCaptor<Intent> intentCaptor = ArgumentCaptor.forClass(Intent.class);
-        verify(broadcastReceiver).onReceive(eq(subject), intentCaptor.capture());
+        verify(broadcastReceiver).onReceive(any(Context.class), intentCaptor.capture());
         Intent intent = intentCaptor.getValue();
-        assertThat(intent.getAction()).isEqualTo(BaseInterstitialActivity.ACTION_INTERSTITIAL_CLICK);
+        assertThat(intent.getAction()).isEqualTo(ACTION_INTERSTITIAL_CLICK);
     }
 
     @Test
     public void getAdView_shouldSetUpForBroadcastingFail() throws Exception {
         subject.getAdView();
         BroadcastReceiver broadcastReceiver = mock(BroadcastReceiver.class);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, HTML_INTERSTITIAL_INTENT_FILTER);
+        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
 
         TestHtmlInterstitialWebViewFactory.getLatestListener().onInterstitialFailed(UNSPECIFIED);
 
         ArgumentCaptor<Intent> intentCaptor = ArgumentCaptor.forClass(Intent.class);
-        verify(broadcastReceiver).onReceive(eq(subject), intentCaptor.capture());
+        verify(broadcastReceiver).onReceive(any(Context.class), intentCaptor.capture());
         Intent intent = intentCaptor.getValue();
         assertThat(intent.getAction()).isEqualTo(ACTION_INTERSTITIAL_FAIL);
 
@@ -251,25 +259,25 @@ public void broadcastingInterstitialListener_onInterstitialLoaded_shouldCallJava
 
     @Test
     public void broadcastingInterstitialListener_onInterstitialFailed_shouldBroadcastFailAndFinish() throws Exception {
-        Intent expectedIntent = new Intent(ACTION_INTERSTITIAL_FAIL);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, HTML_INTERSTITIAL_INTENT_FILTER);
+        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_FAIL, testBroadcastIdentifier);
+        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
 
         MoPubActivity.BroadcastingInterstitialListener broadcastingInterstitialListener = ((MoPubActivity) subject).new BroadcastingInterstitialListener();
         broadcastingInterstitialListener.onInterstitialFailed(null);
 
-        verify(broadcastReceiver).onReceive(eq(subject), eq(expectedIntent));
+        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
         assertThat(shadowOf(subject).isFinishing()).isTrue();
     }
 
     @Test
     public void broadcastingInterstitialListener_onInterstitialClicked_shouldBroadcastClick() throws Exception {
-        Intent expectedIntent = new Intent(ACTION_INTERSTITIAL_CLICK);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, HTML_INTERSTITIAL_INTENT_FILTER);
+        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_CLICK, testBroadcastIdentifier);
+        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
 
         MoPubActivity.BroadcastingInterstitialListener broadcastingInterstitialListener = ((MoPubActivity) subject).new BroadcastingInterstitialListener();
         broadcastingInterstitialListener.onInterstitialClicked();
 
-        verify(broadcastReceiver).onReceive(eq(subject), eq(expectedIntent));
+        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
     }
 
     private Intent createMoPubActivityIntent(String htmlData, boolean isScrollable, String redirectUrl, String clickthroughUrl, AdConfiguration adConfiguration) {
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
index b2155330..5d62836b 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
@@ -33,6 +33,7 @@
 package com.mopub.mobileads;
 
 import android.content.ComponentName;
+import android.content.Context;
 import android.content.Intent;
 import android.os.Build;
 import android.view.View;
@@ -49,16 +50,21 @@
 import org.robolectric.Robolectric;
 import org.robolectric.shadows.ShadowLocalBroadcastManager;
 
+import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
 import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.BaseInterstitialActivity.HTML_INTERSTITIAL_INTENT_FILTER;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.getHtmlInterstitialIntentFilter;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static com.mopub.mobileads.MraidView.MraidListener;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.stub;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.withSettings;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
@@ -175,13 +181,13 @@ public void onCreate_whenPreICS_shouldNotSetHardwareAcceleratedFlag() throws Exc
 
     @Test
     public void onDestroy_DestroyMraidView() throws Exception {
-        Intent expectedIntent = new Intent(ACTION_INTERSTITIAL_DISMISS);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, HTML_INTERSTITIAL_INTENT_FILTER);
+        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, subject.getBroadcastIdentifier());
+        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
 
         subject.onCreate(null);
         subject.onDestroy();
 
-        verify(broadcastReceiver).onReceive(eq(subject), eq(expectedIntent));
+        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
         verify(mraidView).destroy();
         assertThat(getContentView(subject).getChildCount()).isEqualTo(0);
     }
@@ -234,6 +240,26 @@ public void baseMraidListenerOnClose_shouldFireJavascriptWebViewDidClose() throw
         verify(mraidView).loadUrl(eq("javascript:webviewDidClose();"));
     }
 
+    @Test
+    public void baseMraidListenerOnOpen_shouldBroadcastClickEvent() throws Exception {
+        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_CLICK, testBroadcastIdentifier);
+        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
+
+        subject.onCreate(null);
+        resetMockedView(mraidView);
+
+        ArgumentCaptor<MraidListener> captor = ArgumentCaptor.forClass(MraidListener.class);
+        View actualAdView = subject.getAdView();
+
+        assertThat(actualAdView).isSameAs(mraidView);
+        verify(mraidView).setMraidListener(captor.capture());
+
+        MraidListener baseMraidListener = captor.getValue();
+        baseMraidListener.onOpen(null);
+
+        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
+    }
+
     @Test
     public void getAdView_shouldSetupOnCloseButtonStateChangeListener() throws Exception {
         subject.onCreate(null);
@@ -290,6 +316,11 @@ private Intent createMraidActivityIntent(String expectedSource) {
         Intent mraidActivityIntent = new Intent();
         mraidActivityIntent.setComponent(new ComponentName("", ""));
         mraidActivityIntent.putExtra(HTML_RESPONSE_BODY_KEY, expectedSource);
+
+        adConfiguration = mock(AdConfiguration.class, withSettings().serializable());
+        stub(adConfiguration.getBroadcastIdentifier()).toReturn(testBroadcastIdentifier);
+        mraidActivityIntent.putExtra(AD_CONFIGURATION_KEY, adConfiguration);
+
         return mraidActivityIntent;
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidBannerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidBannerTest.java
index c4392ecd..3cd1e76c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidBannerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidBannerTest.java
@@ -128,6 +128,14 @@ public void bannerMraidListener_onExpand_shouldNotifyBannerExpandedAndClicked()
         verify(bannerListener).onBannerClicked();
     }
 
+    @Test
+    public void bannerMraidListener_onOpen_shouldNotifyBannerClicked() throws Exception {
+        MraidListener mraidListener = captureMraidListener();
+        mraidListener.onOpen(null);
+
+        verify(bannerListener).onBannerClicked();
+    }
+
     @Test
     public void bannerMraidListener_onClose_shouldNotifyBannerCollapsed() throws Exception {
         MraidListener mraidListener = captureMraidListener();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidBrowserControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidBrowserControllerTest.java
index a829f3aa..641f640d 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidBrowserControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidBrowserControllerTest.java
@@ -51,18 +51,18 @@
 @RunWith(SdkTestRunner.class)
 public class MraidBrowserControllerTest {
     private MraidBrowserController subject;
-    private MraidView view;
+    private MraidView mraidView;
     private Context context;
-    private MraidView.OnOpenListener onOpenListener;
+    private MraidView.MraidListener mraidListener;
 
     @Before
     public void setUp() throws Exception {
         context = new Activity();
-        view = new MraidView(context, null);
-        onOpenListener = mock(MraidView.OnOpenListener.class);
-        view.setOnOpenListener(onOpenListener);
+        mraidView = new MraidView(context, null);
+        mraidListener = mock(MraidView.MraidListener.class);
+        mraidView.setMraidListener(mraidListener);
 
-        subject = new MraidBrowserController(view);
+        subject = new MraidBrowserController(mraidView);
     }
 
     @Test
@@ -110,7 +110,7 @@ public void open_withHttpApplicationUrl_shouldCallMraidListenerOnOpenCallback()
 
         subject.open(applicationUrl);
 
-        verify(onOpenListener).onOpen(eq(view));
+        verify(mraidListener).onOpen(eq(mraidView));
     }
 
     @Test
@@ -119,6 +119,6 @@ public void open_withApplicationUrl_shouldCallMraidListenerOnOpenCallback() thro
 
         subject.open(applicationUrl);
 
-        verify(onOpenListener).onOpen(eq(view));
+        verify(mraidListener).onOpen(eq(mraidView));
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidInterstitialTest.java
index 7726a7f3..56be2be0 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidInterstitialTest.java
@@ -44,15 +44,20 @@
 
 import java.util.*;
 
+import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
 import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.stub;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.withSettings;
 import static org.robolectric.Robolectric.shadowOf_;
 
 @RunWith(SdkTestRunner.class)
@@ -63,6 +68,7 @@
     private Context context;
     private static final String INPUT_HTML_DATA = "%3Chtml%3E%3C%2Fhtml%3E";
     private static final String EXPECTED_HTML_DATA = "<html></html>";
+    private long broadcastIdentifier;
 
     @Before
     public void setUp() throws Exception {
@@ -72,10 +78,15 @@ public void setUp() throws Exception {
         localExtras = new HashMap<String, Object>();
         serverExtras = new HashMap<String, String>();
         serverExtras.put(HTML_RESPONSE_BODY_KEY, INPUT_HTML_DATA);
+
+        broadcastIdentifier = 2222;
+        final AdConfiguration adConfiguration = mock(AdConfiguration.class, withSettings().serializable());
+        stub(adConfiguration.getBroadcastIdentifier()).toReturn(broadcastIdentifier);
+        localExtras.put(AD_CONFIGURATION_KEY, adConfiguration);
     }
 
     @Test
-    public void loadBanner_withMalformedServerExtras_shouldNotifyInterstitialFailed() throws Exception {
+    public void loadInterstitial_withMalformedServerExtras_shouldNotifyInterstitialFailed() throws Exception {
         serverExtras.remove(HTML_RESPONSE_BODY_KEY);
         subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
 
@@ -94,13 +105,17 @@ public void loadInterstitial_shouldNotifyInterstitialLoaded() throws Exception {
     public void loadInterstitial_shouldConnectListenerToBroadcastReceiver() throws Exception {
         subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
 
-        Intent intent;
-        intent = new Intent(ACTION_INTERSTITIAL_SHOW);
+        Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, broadcastIdentifier);
         ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
 
         verify(customEventInterstitialListener).onInterstitialShown();
 
-        intent = new Intent(ACTION_INTERSTITIAL_DISMISS);
+        intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_CLICK, broadcastIdentifier);
+        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+
+        verify(customEventInterstitialListener).onInterstitialClicked();
+
+        intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, broadcastIdentifier);
         ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
 
         verify(customEventInterstitialListener).onInterstitialDismissed();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/UtilsTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/UtilsTest.java
index 7616a535..3cc2dd4a 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/UtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/UtilsTest.java
@@ -86,4 +86,17 @@ public void deviceCanHandleIntent_whenActivityCanNotResolveIntent_shouldReturnFa
 
         assertThat(Utils.deviceCanHandleIntent(context, otherIntent)).isFalse();
     }
+
+    @Test
+    public void generateUniqueId_withMultipleInvocations_shouldReturnUniqueValues() throws Exception {
+        final int expectedIdCount = 100;
+
+        Set<Long> ids = new HashSet<Long>(expectedIdCount);
+        for (int i = 0; i < expectedIdCount; i++) {
+            final long id = Utils.generateUniqueId();
+            ids.add(id);
+        }
+
+        assertThat(ids).hasSize(expectedIdCount);
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
index 2fde566f..ee07264d 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
@@ -51,10 +51,12 @@
 import java.io.*;
 import java.util.*;
 
+import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
 import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 import static com.mopub.mobileads.MoPubErrorCode.VIDEO_DOWNLOAD_ERROR;
 import static com.mopub.mobileads.VastVideoView.VIDEO_CLICK_THROUGH_TRACKERS;
@@ -76,6 +78,7 @@
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.stub;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.withSettings;
 
 @RunWith(SdkTestRunner.class)
 public class VastVideoInterstitialTest extends ResponseBodyInterstitialTest {
@@ -88,6 +91,7 @@
     private VastManager vastManager;
     private String videoUrl;
     private VastVideoDownloadTask vastVideoDownloadTask;
+    private long broadcastIdentifier;
 
     @Before
     public void setUp() throws Exception {
@@ -105,6 +109,11 @@ public void setUp() throws Exception {
         serverExtras.put(AdFetcher.HTML_RESPONSE_BODY_KEY, Uri.encode(expectedResponse));
 
         response = new TestHttpResponseWithHeaders(200, expectedResponse);
+
+        broadcastIdentifier = 2222;
+        final AdConfiguration adConfiguration = mock(AdConfiguration.class, withSettings().serializable());
+        stub(adConfiguration.getBroadcastIdentifier()).toReturn(broadcastIdentifier);
+        localExtras.put(AD_CONFIGURATION_KEY, adConfiguration);
     }
 
     @After
@@ -162,13 +171,12 @@ public void loadInterstitial_whenServerExtrasDoesNotContainResponse_shouldSignal
     public void loadInterstitial_shouldConnectListenerToBroadcastReceiver() throws Exception {
         subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
 
-        Intent intent;
-        intent = new Intent(ACTION_INTERSTITIAL_SHOW);
+        Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, broadcastIdentifier);
         ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
 
         verify(customEventInterstitialListener).onInterstitialShown();
 
-        intent = new Intent(ACTION_INTERSTITIAL_DISMISS);
+        intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, broadcastIdentifier);
         ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
 
         verify(customEventInterstitialListener).onInterstitialDismissed();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastManagerTest.java
index 7f8b18aa..1e10ab5c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastManagerTest.java
@@ -11,34 +11,34 @@
 import org.robolectric.Robolectric;
 import org.robolectric.tester.org.apache.http.FakeHttpLayer;
 
+import static com.mopub.mobileads.util.vast.VastManager.VastManagerListener;
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
 public class VastManagerTest {
     private static final String TEST_VAST_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>http://dsp.x-team.staging.mopub.com/xml</VASTAdTagURI><Impression>http://myTrackingURL/wrapper/impression1</Impression><Impression>http://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>http://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>http://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>http://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='firstQuartile'>http://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>http://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>http://myTrackingURL/wrapper/complete</Tracking><Tracking event='mute'>http://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>http://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>http://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>http://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>http://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>http://myTrackingURL/wrapper/click</ClickTracking></VideoClicks></Linear></Creative></Creatives></Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>http://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>http://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
     private static final String TEST_NESTED_VAST_XML_STRING = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><VAST version='2.0'><Ad id='57722'><InLine><AdSystem version='1.0'>Tapad</AdSystem><AdTitle><![CDATA[PKW6T_LIV_DSN_Audience_TAPAD_3rd Party Audience Targeting_Action Movi]]></AdTitle><Description/><Impression><![CDATA[http://rtb-test.dev.tapad.com:8080/creative/imp.png?ts=1374099035457&svid=1&creative_id=30731&ctx_type=InApp&ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&liverail_cp=1]]></Impression><Creatives><Creative sequence='1' id='57722'><Linear><Duration>00:00:15</Duration><VideoClicks><ClickThrough><![CDATA[http://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com]]></ClickThrough></VideoClicks><MediaFiles><MediaFile delivery='progressive' bitrate='416' width='480' height='360' type='video/mp4'><![CDATA[https://s3.amazonaws.com/mopub-vast/tapad-video.mp4]]></MediaFile></MediaFiles></Linear></Creative></Creatives></InLine></Ad></VAST>";
+    private static final String TEST_VAST_BAD_NEST_URL_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>http://dsp.x-team.staging.mopub.com/xml\"$|||</VASTAdTagURI><Impression>http://myTrackingURL/wrapper/impression1</Impression><Impression>http://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>http://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>http://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>http://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='firstQuartile'>http://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>http://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>http://myTrackingURL/wrapper/complete</Tracking><Tracking event='mute'>http://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>http://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>http://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>http://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>http://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>http://myTrackingURL/wrapper/click</ClickTracking></VideoClicks></Linear></Creative></Creatives></Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>http://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>http://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
+
 
     private VastManager mVastManager;
     private FakeHttpLayer mFakeHttpLayer;
-    private boolean mIsListenerNotified;
+    private VastManagerListener mVastManagerListener;
 
     @Before
     public void setup() {
         mVastManager = new VastManager();
         mFakeHttpLayer = Robolectric.getFakeHttpLayer();
-        mIsListenerNotified = false;
+        mVastManagerListener = mock(VastManagerListener.class);
     }
 
     private void processVast() {
-        mVastManager.processVast(TEST_VAST_XML_STRING, new VastManager.VastManagerListener() {
-            @Override
-            public void onComplete(VastManager vastManager) {
-                mIsListenerNotified = true;
-            }
-        });
+        mVastManager.processVast(TEST_VAST_XML_STRING, mVastManagerListener);
 
         Robolectric.runBackgroundTasks();
-        ThreadUtils.pause(10);
         Robolectric.runUiThreadTasks();
     }
 
@@ -48,7 +48,7 @@ public void processVast_shouldNotifyTheListenerAndContainTheCorrectVastValues()
 
         processVast();
 
-        assertThat(mIsListenerNotified).isEqualTo(true);
+        verify(mVastManagerListener).onComplete(mVastManager);
         assertThat(mVastManager.getMediaFileUrl()).isEqualTo("https://s3.amazonaws.com/mopub-vast/tapad-video.mp4");
         assertThat(mVastManager.getClickThroughUrl()).isEqualTo("http://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com");
         assertThat(mVastManager.getImpressionTrackers().size()).isEqualTo(5);
@@ -66,7 +66,21 @@ public void processVast_shouldNotifyTheListenerAndContainTheCorrectVastValuesWhe
 
         processVast();
 
-        assertThat(mIsListenerNotified).isEqualTo(true);
+        verify(mVastManagerListener).onComplete(mVastManager);
+        assertThat(mVastManager.getMediaFileUrl()).isEqualTo(null);
+        assertThat(mVastManager.getClickThroughUrl()).isEqualTo(null);
+        assertThat(mVastManager.getImpressionTrackers().size()).isEqualTo(4);
+        assertThat(mVastManager.getVideoFirstQuartileTrackers().size()).isEqualTo(1);
+    }
+
+    @Test
+    public void processVast_shouldNotifyTheListenerAndContainTheCorrectVastValuesWhenAVastRedirectUrlIsInvalid() {
+        mVastManager.processVast(TEST_VAST_BAD_NEST_URL_XML_STRING, mVastManagerListener);
+
+        Robolectric.runBackgroundTasks();
+        Robolectric.runUiThreadTasks();
+
+        verify(mVastManagerListener).onComplete(mVastManager);
         assertThat(mVastManager.getMediaFileUrl()).isEqualTo(null);
         assertThat(mVastManager.getClickThroughUrl()).isEqualTo(null);
         assertThat(mVastManager.getImpressionTrackers().size()).isEqualTo(4);
@@ -81,7 +95,7 @@ public void processVast_shouldNotFollowRedirectsOnceTheLimitHasBeenReached() {
 
         processVast();
 
-        assertThat(mIsListenerNotified).isEqualTo(true);
+        verify(mVastManagerListener).onComplete(mVastManager);
         assertThat(mVastManager.getMediaFileUrl()).isEqualTo(null);
         assertThat(mVastManager.getClickThroughUrl()).isEqualTo(null);
         assertThat(mVastManager.getImpressionTrackers().size()).isEqualTo(4);
@@ -90,18 +104,12 @@ public void processVast_shouldNotFollowRedirectsOnceTheLimitHasBeenReached() {
 
     @Test
     public void processVast_shouldHandleNullVastXmlGracefully() {
-        mVastManager.processVast(null, new VastManager.VastManagerListener() {
-            @Override
-            public void onComplete(VastManager vastManager) {
-                mIsListenerNotified = true;
-            }
-        });
+        mVastManager.processVast(null, mVastManagerListener);
 
         Robolectric.runBackgroundTasks();
-        ThreadUtils.pause(10);
         Robolectric.runUiThreadTasks();
 
-        assertThat(mIsListenerNotified).isEqualTo(true);
+        verify(mVastManagerListener).onComplete(mVastManager);
         assertThat(mVastManager.getMediaFileUrl()).isEqualTo(null);
         assertThat(mVastManager.getClickThroughUrl()).isEqualTo(null);
         assertThat(mVastManager.getImpressionTrackers().size()).isEqualTo(0);
@@ -110,18 +118,12 @@ public void onComplete(VastManager vastManager) {
 
     @Test
     public void processVast_shouldHandleEmptyVastXmlGracefully() {
-        mVastManager.processVast("", new VastManager.VastManagerListener() {
-            @Override
-            public void onComplete(VastManager vastManager) {
-                mIsListenerNotified = true;
-            }
-        });
+        mVastManager.processVast("", mVastManagerListener);
 
         Robolectric.runBackgroundTasks();
-        ThreadUtils.pause(10);
         Robolectric.runUiThreadTasks();
 
-        assertThat(mIsListenerNotified).isEqualTo(true);
+        verify(mVastManagerListener).onComplete(mVastManager);
         assertThat(mVastManager.getMediaFileUrl()).isEqualTo(null);
         assertThat(mVastManager.getClickThroughUrl()).isEqualTo(null);
         assertThat(mVastManager.getImpressionTrackers().size()).isEqualTo(0);
@@ -134,20 +136,14 @@ public void cancel_shouldCancelBackgroundProcessingAndNotNotifyTheListener() {
 
         Robolectric.getBackgroundScheduler().pause();
 
-        mVastManager.processVast(TEST_VAST_XML_STRING, new VastManager.VastManagerListener() {
-            @Override
-            public void onComplete(VastManager vastManager) {
-                mIsListenerNotified = true;
-            }
-        });
+        mVastManager.processVast(TEST_VAST_XML_STRING, mVastManagerListener);
 
         mVastManager.cancel();
 
         Robolectric.runBackgroundTasks();
-        ThreadUtils.pause(10);
         Robolectric.runUiThreadTasks();
 
-        assertThat(mIsListenerNotified).isEqualTo(false);
+        verify(mVastManagerListener, never()).onComplete(mVastManager);
         assertThat(mVastManager.getMediaFileUrl()).isEqualTo(null);
         assertThat(mVastManager.getClickThroughUrl()).isEqualTo(null);
         assertThat(mVastManager.getImpressionTrackers().size()).isEqualTo(0);
@@ -163,7 +159,7 @@ public void processVast_shouldHandleMultipleRedirects() {
         processVast();
 
         // at this point it should have 3 sets of data from TEST_VAST_XML_STRING and one set from TEST_NESTED_VAST_XML_STRING
-        assertThat(mIsListenerNotified).isEqualTo(true);
+        verify(mVastManagerListener).onComplete(mVastManager);
         assertThat(mVastManager.getMediaFileUrl()).isEqualTo("https://s3.amazonaws.com/mopub-vast/tapad-video.mp4");
         assertThat(mVastManager.getClickThroughUrl()).isEqualTo("http://rtb-test.dev.tapad.com:8080/click?ta_pinfo=JnRhX2JpZD1iNDczNTQwMS1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmaXA9OTguMTE2LjEyLjk0JnNzcD1MSVZFUkFJTCZ0YV9iaWRkZXJfaWQ9NTEzJTNBMzA1NSZjdHg9MTMzMSZ0YV9jYW1wYWlnbl9pZD01MTMmZGM9MTAwMjAwMzAyOSZ1YT1Nb3ppbGxhJTJGNS4wKyUyOE1hY2ludG9zaCUzQitJbnRlbCtNYWMrT1MrWCsxMF84XzMlMjkrQXBwbGVXZWJLaXQlMkY1MzcuMzYrJTI4S0hUTUwlMkMrbGlrZStHZWNrbyUyOStDaHJvbWUlMkYyNy4wLjE0NTMuMTE2K1NhZmFyaSUyRjUzNy4zNiZjcHQ9VkFTVCZkaWQ9ZDgyNWZjZDZlNzM0YTQ3ZTE0NWM4ZTkyNzMwMjYwNDY3YjY1NjllMSZpZD1iNDczNTQwMC1lZjJkLTExZTItYTNkNS0yMjAwMGE4YzEwOWQmcGlkPUNPTVBVVEVSJnN2aWQ9MSZicD0zNS4wMCZjdHhfdHlwZT1BJnRpZD0zMDU1JmNyaWQ9MzA3MzE%3D&crid=30731&ta_action_id=click&ts=1374099035458&redirect=http%3A%2F%2Ftapad.com");
         assertThat(mVastManager.getImpressionTrackers().size()).isEqualTo(13);
diff --git a/robotium-tests/pom.xml b/robotium-tests/pom.xml
index aa92761c..4c7d9b5f 100644
--- a/robotium-tests/pom.xml
+++ b/robotium-tests/pom.xml
@@ -32,7 +32,7 @@
         <dependency>
             <groupId>com.jayway.android.robotium</groupId>
             <artifactId>robotium-solo</artifactId>
-            <version>4.0</version>
+            <version>5.0.1</version>
         </dependency>
 
         <!--android -->
diff --git a/robotium-tests/src/main/java/com/mopub/mobileads/test/RobotiumTestSupportActivityTest.java b/robotium-tests/src/main/java/com/mopub/mobileads/test/RobotiumTestSupportActivityTest.java
index f375e641..ec4a86cb 100644
--- a/robotium-tests/src/main/java/com/mopub/mobileads/test/RobotiumTestSupportActivityTest.java
+++ b/robotium-tests/src/main/java/com/mopub/mobileads/test/RobotiumTestSupportActivityTest.java
@@ -32,21 +32,33 @@
 
 package com.mopub.mobileads.test;
 
-import android.R;
 import android.test.ActivityInstrumentationTestCase2;
-import com.jayway.android.robotium.solo.Solo;
+import android.view.View;
+import android.widget.Button;
+import android.widget.EditText;
 import com.mopub.mobileads.MoPubActivity;
 import com.mopub.mobileads.MoPubErrorCode;
 import com.mopub.mobileads.MoPubInterstitial;
 import com.mopub.mobileads.MoPubView;
 import com.mopub.mobileads.MraidBrowser;
-import com.mopub.mobileads.robotium.RobotiumTestSupportActivity;
+import com.mopub.mobileads.robotium.*;
+import com.mopub.mobileads.robotium.R;
+import com.robotium.solo.Solo;
 
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialAdListener;
 
 public class RobotiumTestSupportActivityTest extends ActivityInstrumentationTestCase2<RobotiumTestSupportActivity>{
     private static final long NETWORK_SLEEP_TIME = 3000;
+    private static final String BANNER_AD_UNIT_ID = "agltb3B1Yi1pbmNyDAsSBFNpdGUY8fgRDA";
+    private static final String INTERSTITIAL_AD_UNIT_ID = "agltb3B1Yi1pbmNyDAsSBFNpdGUY6tERDA";
+
     private Solo solo;
+    private EditText bannerEditText;
+    private EditText interstitialEditText;
+    private Button bannerLoadButton;
+    private Button interstitialLoadButton;
+    private Button interstitialShowButton;
+    private MoPubView banner;
 
     public RobotiumTestSupportActivityTest() {
         super(RobotiumTestSupportActivity.class);
@@ -56,6 +68,15 @@ public RobotiumTestSupportActivityTest() {
     public void setUp() throws Exception {
         super.setUp();
         solo = new Solo(getInstrumentation(), getActivity());
+
+        bannerEditText = (EditText) solo.getView(R.id.banner_adunit_id_field);
+        interstitialEditText = (EditText) solo.getView(R.id.interstitial_adunit_id_field);
+
+        bannerLoadButton = (Button) solo.getView(R.id.banner_load_button);
+        interstitialLoadButton = (Button) solo.getView(R.id.interstitial_load_button);
+        interstitialShowButton = (Button) solo.getView(R.id.interstitial_show_button);
+
+        banner = (MoPubView) solo.getView(R.id.mopubview);
     }
 
     @Override
@@ -66,17 +87,16 @@ public void tearDown() throws Exception {
 
     public void testMoPubBannerLoadAndClick() throws Exception {
         enterBannerAdUnitId();
-        MoPubView moPubView = solo.getView(MoPubView.class, 0);
         TestBannerAdListener listener = new TestBannerAdListener();
-        moPubView.setBannerAdListener(listener);
+        banner.setBannerAdListener(listener);
 
-        solo.clickOnButton("Load Banner");
+        solo.clickOnView(bannerLoadButton);
         Thread.sleep(NETWORK_SLEEP_TIME);
-        assertTrue("Banner was loaded.", listener.bannerWasLoaded());
+        assertTrue("Banner was not loaded.", listener.bannerWasLoaded());
 
-        solo.clickOnView(moPubView);
+        solo.clickOnView(banner);
         Thread.sleep(NETWORK_SLEEP_TIME);
-        assertTrue("Banner was clicked.", listener.bannerWasClicked());
+        assertTrue("Banner was not clicked.", listener.bannerWasClicked());
 
         solo.assertCurrentActivity("expected an MraidBrowser", MraidBrowser.class);
     }
@@ -86,16 +106,16 @@ public void testMoPubInterstitialLoadShowAndClick() throws Exception {
         TestInterstitialAdListener listener = new TestInterstitialAdListener();
         ((RobotiumTestSupportActivity) solo.getCurrentActivity()).setInterstitialListener(listener);
 
-        solo.clickOnButton("Load Interstitial");
+        solo.clickOnView(interstitialLoadButton);
         Thread.sleep(NETWORK_SLEEP_TIME);
-        assertTrue("Interstitial was loaded.", listener.interstitialWasLoaded());
+        assertTrue("Interstitial was not loaded.", listener.interstitialWasLoaded());
 
-        solo.clickOnButton("Show Interstitial");
+        solo.clickOnView(interstitialShowButton);
         Thread.sleep(NETWORK_SLEEP_TIME);
-        assertTrue("Interstitial was shown.", listener.interstitialWasShown());
+        assertTrue("Interstitial was not shown.", listener.interstitialWasShown());
         solo.assertCurrentActivity("expected MoPubActivity", MoPubActivity.class);
 
-        solo.clickOnView(solo.getCurrentActivity().findViewById(R.id.content));
+        solo.clickOnView(solo.getCurrentActivity().findViewById(android.R.id.content));
         Thread.sleep(NETWORK_SLEEP_TIME);
         solo.assertCurrentActivity("expected MraidBrowser", MraidBrowser.class);
     }
@@ -105,15 +125,15 @@ public void testMoPubInterstitialLoadShowAndDismissWithCloseButton() throws Exce
         TestInterstitialAdListener listener = new TestInterstitialAdListener();
         ((RobotiumTestSupportActivity) solo.getCurrentActivity()).setInterstitialListener(listener);
 
-        solo.clickOnButton("Load Interstitial");
+        solo.clickOnView(interstitialLoadButton);
         Thread.sleep(NETWORK_SLEEP_TIME);
 
-        solo.clickOnButton("Show Interstitial");
+        solo.clickOnView(interstitialShowButton);
         Thread.sleep(NETWORK_SLEEP_TIME);
 
         solo.clickOnImageButton(0);
         Thread.sleep(500);
-        assertTrue("Interstitial was dismissed.", listener.interstitialWasDismissed());
+        assertTrue("Interstitial was not dismissed.", listener.interstitialWasDismissed());
     }
 
     public void testMoPubInterstitialLoadShowAndDismissWithBackButton() throws Exception {
@@ -121,22 +141,22 @@ public void testMoPubInterstitialLoadShowAndDismissWithBackButton() throws Excep
         TestInterstitialAdListener listener = new TestInterstitialAdListener();
         ((RobotiumTestSupportActivity) solo.getCurrentActivity()).setInterstitialListener(listener);
 
-        solo.clickOnButton("Load Interstitial");
+        solo.clickOnView(interstitialLoadButton);
         Thread.sleep(NETWORK_SLEEP_TIME);
 
-        solo.clickOnButton("Show Interstitial");
+        solo.clickOnView(interstitialShowButton);
         Thread.sleep(NETWORK_SLEEP_TIME);
 
         solo.goBack();
-        assertTrue("Interstitial was dismissed.", listener.interstitialWasDismissed());
+        assertTrue("Interstitial was not dismissed.", listener.interstitialWasDismissed());
     }
 
     private void enterBannerAdUnitId() {
-        solo.enterText(0, "agltb3B1Yi1pbmNyDAsSBFNpdGUY8fgRDA");
+        solo.enterText(bannerEditText, BANNER_AD_UNIT_ID);
     }
 
     private void enterInterstitialAdUnitId() {
-        solo.enterText(1, "agltb3B1Yi1pbmNyDAsSBFNpdGUY6tERDA");
+        solo.enterText(interstitialEditText, INTERSTITIAL_AD_UNIT_ID);
     }
 
     private static class TestBannerAdListener implements MoPubView.BannerAdListener {
