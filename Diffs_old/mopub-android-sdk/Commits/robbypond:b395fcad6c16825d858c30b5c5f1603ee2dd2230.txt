diff --git a/.gitignore b/.gitignore
index 6932b28f..8baa8950 100644
--- a/.gitignore
+++ b/.gitignore
@@ -33,4 +33,3 @@ build
 local.properties
 tmp/
 
-
diff --git a/.idea/misc.xml b/.idea/misc.xml
index 29307cd7..82360348 100644
--- a/.idea/misc.xml
+++ b/.idea/misc.xml
@@ -48,28 +48,11 @@
       </set>
     </option>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_6" assert-keyword="true" jdk-15="true" project-jdk-name="1.7" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_6" assert-keyword="true" jdk-15="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/classes" />
   </component>
   <component name="SuppressionsComponent">
     <option name="suppComments" value="[]" />
   </component>
-  <component name="SvnConfiguration" maxAnnotateRevisions="500" myUseAcceleration="nothing" myAutoUpdateAfterCommit="false" cleanupOnStartRun="false" SSL_PROTOCOLS="all">
-    <option name="USER" value="" />
-    <option name="PASSWORD" value="" />
-    <option name="mySSHConnectionTimeout" value="30000" />
-    <option name="mySSHReadTimeout" value="30000" />
-    <option name="LAST_MERGED_REVISION" />
-    <option name="MERGE_DRY_RUN" value="false" />
-    <option name="MERGE_DIFF_USE_ANCESTRY" value="true" />
-    <option name="UPDATE_LOCK_ON_DEMAND" value="false" />
-    <option name="IGNORE_SPACES_IN_MERGE" value="false" />
-    <option name="CHECK_NESTED_FOR_QUICK_MERGE" value="false" />
-    <option name="IGNORE_SPACES_IN_ANNOTATE" value="true" />
-    <option name="SHOW_MERGE_SOURCES_IN_ANNOTATE" value="true" />
-    <option name="FORCE_UPDATE" value="false" />
-    <option name="IGNORE_EXTERNALS" value="false" />
-    <myIsUseDefaultProxy>false</myIsUseDefaultProxy>
-  </component>
 </project>
 
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 0d032fb4..6ed21fc7 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,13 @@
+## Version 3.1.0 (October 9, 2014)
+
+  - **Updated Facebook SDK Compatibility to 3.18.1**
+  Provided Custom Events for Facebook Banners, Interstitials and Native Ads (included
+  in the extras/ folder) are now compatible with the latest SDK release from Facebook (3.18.1).
+  - **Updated API for Native Ads Custom Event writers**
+  If you are mediating Facebook or InMobi native ads, this change requires you to copy
+  FacebookNative.java and InMobiNative.java custom events from the extras/ folder to
+  com.mopub.nativeads package for compatibility.
+
 ## Version 3.0.0 (September 30, 2014)
 
   - **Location Settings are now SDK-wide**
diff --git a/README.md b/README.md
index 14b884e0..9f3a5223 100644
--- a/README.md
+++ b/README.md
@@ -27,15 +27,9 @@ Integration instructions are available on the [wiki](https://github.com/mopub/mo
 
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for details.
 
-  - **Location Settings are now SDK-wide**
+  - **Updated Facebook SDK Compatibility to 3.18.1**
 
-  - **Build target SDK is now API Level 19**
-
-  - **Source-level support for Gradle projects**
-
-  - **The SDK now uses Play Services 5.0.89**
-
-  - **Bug fixes**
+  - **Updated API for Native Ads Custom Event writers**
 
 ## Requirements
 
diff --git a/extras/src/com/mopub/mobileads/FacebookBanner.java b/extras/src/com/mopub/mobileads/FacebookBanner.java
index 2a44a811..d58000f6 100644
--- a/extras/src/com/mopub/mobileads/FacebookBanner.java
+++ b/extras/src/com/mopub/mobileads/FacebookBanner.java
@@ -13,7 +13,7 @@
 import java.util.Map;
 
 /**
- * Tested with Facebook SDK 3.14.1.
+ * Tested with Facebook SDK 3.18.1.
  */
 public class FacebookBanner extends CustomEventBanner implements AdListener {
     private static final String PLACEMENT_ID_KEY = "placement_id";
diff --git a/extras/src/com/mopub/mobileads/FacebookInterstitial.java b/extras/src/com/mopub/mobileads/FacebookInterstitial.java
index 2f7593dc..d6dde364 100644
--- a/extras/src/com/mopub/mobileads/FacebookInterstitial.java
+++ b/extras/src/com/mopub/mobileads/FacebookInterstitial.java
@@ -16,7 +16,7 @@
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 
 /**
- * Tested with Facebook SDK 3.14.1.
+ * Tested with Facebook SDK 3.18.1.
  */
 public class FacebookInterstitial extends CustomEventInterstitial implements InterstitialAdListener {
     private static final String PLACEMENT_ID_KEY = "placement_id";
diff --git a/extras/src/com/mopub/nativeads/FacebookNative.java b/extras/src/com/mopub/nativeads/FacebookNative.java
index 952783cb..868610b5 100644
--- a/extras/src/com/mopub/nativeads/FacebookNative.java
+++ b/extras/src/com/mopub/nativeads/FacebookNative.java
@@ -6,24 +6,20 @@
 import com.facebook.ads.Ad;
 import com.facebook.ads.AdError;
 import com.facebook.ads.AdListener;
+import com.facebook.ads.ImpressionListener;
 import com.facebook.ads.NativeAd;
 import com.facebook.ads.NativeAd.Rating;
 
-import java.lang.ref.WeakReference;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 
 /*
- * Tested with Facebook SDK 3.14.1
+ * Tested with Facebook SDK 3.18.1
  */
-public class FacebookNative extends CustomEventNative implements AdListener {
+public class FacebookNative extends CustomEventNative {
     private static final String PLACEMENT_ID_KEY = "placement_id";
 
-    private Context mContext;
-    private NativeAd mNativeAd;
-    private CustomEventNativeListener mCustomEventNativeListener;
-
     // CustomEventNative implementation
     @Override
     protected void loadNativeAd(final Context context,
@@ -31,8 +27,6 @@ protected void loadNativeAd(final Context context,
             final Map<String, Object> localExtras,
             final Map<String, String> serverExtras) {
 
-        mContext = context.getApplicationContext();
-
         final String placementId;
         if (extrasAreValid(serverExtras)) {
             placementId = serverExtras.get(PLACEMENT_ID_KEY);
@@ -41,63 +35,10 @@ protected void loadNativeAd(final Context context,
             return;
         }
 
-        mCustomEventNativeListener = customEventNativeListener;
-
-        mNativeAd = new NativeAd(context, placementId);
-        mNativeAd.setAdListener(this);
-        mNativeAd.loadAd();
-    }
-
-    // AdListener implementation
-    @Override
-    public void onAdLoaded(final Ad ad) {
-        // This identity check is from Facebook's Native API sample code:
-        // https://developers.facebook.com/docs/audience-network/android/native-api
-        if (!mNativeAd.equals(ad) || !mNativeAd.isAdLoaded()) {
-            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
-            return;
-        }
-
         final FacebookForwardingNativeAd facebookForwardingNativeAd =
-                new FacebookForwardingNativeAd(mNativeAd);
-
-        final List<String> imageUrls = new ArrayList<String>();
-        final String mainImageUrl = facebookForwardingNativeAd.getMainImageUrl();
-        if (mainImageUrl != null) {
-            imageUrls.add(facebookForwardingNativeAd.getMainImageUrl());
-        }
-        final String iconUrl = facebookForwardingNativeAd.getIconImageUrl();
-        if (iconUrl != null) {
-            imageUrls.add(facebookForwardingNativeAd.getIconImageUrl());
-        }
-
-        preCacheImages(mContext, imageUrls, new ImageListener() {
-            @Override
-            public void onImagesCached() {
-                mCustomEventNativeListener.onNativeAdLoaded(facebookForwardingNativeAd);
-            }
-
-            @Override
-            public void onImagesFailedToCache(NativeErrorCode errorCode) {
-                mCustomEventNativeListener.onNativeAdFailed(errorCode);
-            }
-        });
-    }
-
-    @Override
-    public void onError(final Ad ad, final AdError error) {
-        if (error == AdError.NO_FILL) {
-            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_NO_FILL);
-        } else if (error == AdError.INTERNAL_ERROR) {
-            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
-        } else {
-            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
-        }
-    }
-
-    @Override
-    public void onAdClicked(final Ad ad) {
-        // not used
+                new FacebookForwardingNativeAd(context,
+                        new NativeAd(context, placementId), customEventNativeListener);
+        facebookForwardingNativeAd.loadAd();
     }
 
     private boolean extrasAreValid(final Map<String, String> serverExtras) {
@@ -105,45 +46,109 @@ private boolean extrasAreValid(final Map<String, String> serverExtras) {
         return (placementId != null && placementId.length() > 0);
     }
 
-    static class FacebookForwardingNativeAd extends BaseForwardingNativeAd {
+    static class FacebookForwardingNativeAd extends BaseForwardingNativeAd implements AdListener, ImpressionListener {
         private static final String SOCIAL_CONTEXT_FOR_AD = "socialContextForAd";
-        private static final String APP_RATING_FOR_AD = "appRatingForAd";
-        private static final int IMPRESSION_MIN_TIME_VIEWED = 0;
 
+        private final Context mContext;
         private final NativeAd mNativeAd;
+        private final CustomEventNativeListener mCustomEventNativeListener;
 
-        FacebookForwardingNativeAd(final NativeAd nativeAd) {
-            if (nativeAd == null) {
-                throw new IllegalArgumentException("Facebook NativeAd cannot be null");
-            }
-
+        FacebookForwardingNativeAd(final Context context,
+                final NativeAd nativeAd,
+                final CustomEventNativeListener customEventNativeListener) {
+            mContext = context.getApplicationContext();
             mNativeAd = nativeAd;
+            mCustomEventNativeListener = customEventNativeListener;
+        }
 
-            setTitle(nativeAd.getAdTitle());
-            setText(nativeAd.getAdBody());
+        void loadAd() {
+            mNativeAd.setAdListener(this);
+            mNativeAd.setImpressionListener(this);
+            mNativeAd.loadAd();
+        }
 
-            NativeAd.Image coverImage = nativeAd.getAdCoverImage();
+        // AdListener
+        @Override
+        public void onAdLoaded(final Ad ad) {
+            // This identity check is from Facebook's Native API sample code:
+            // https://developers.facebook.com/docs/audience-network/android/native-api
+            if (!mNativeAd.equals(ad) || !mNativeAd.isAdLoaded()) {
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
+                return;
+            }
+
+            setTitle(mNativeAd.getAdTitle());
+            setText(mNativeAd.getAdBody());
+
+            NativeAd.Image coverImage = mNativeAd.getAdCoverImage();
             setMainImageUrl(coverImage == null ? null : coverImage.getUrl());
 
-            NativeAd.Image icon = nativeAd.getAdIcon();
+            NativeAd.Image icon = mNativeAd.getAdIcon();
             setIconImageUrl(icon == null ? null : icon.getUrl());
 
-            setCallToAction(nativeAd.getAdCallToAction());
-            setStarRating(getDoubleRating(nativeAd.getAdStarRating()));
+            setCallToAction(mNativeAd.getAdCallToAction());
+            setStarRating(getDoubleRating(mNativeAd.getAdStarRating()));
+
+            addExtra(SOCIAL_CONTEXT_FOR_AD, mNativeAd.getAdSocialContext());
+
+            final List<String> imageUrls = new ArrayList<String>();
+            final String mainImageUrl = getMainImageUrl();
+            if (mainImageUrl != null) {
+                imageUrls.add(getMainImageUrl());
+            }
+            final String iconUrl = getIconImageUrl();
+            if (iconUrl != null) {
+                imageUrls.add(getIconImageUrl());
+            }
 
-            addExtra(SOCIAL_CONTEXT_FOR_AD, nativeAd.getAdSocialContext());
+            preCacheImages(mContext, imageUrls, new ImageListener() {
+                @Override
+                public void onImagesCached() {
+                    mCustomEventNativeListener.onNativeAdLoaded(FacebookForwardingNativeAd.this);
+                }
+
+                @Override
+                public void onImagesFailedToCache(NativeErrorCode errorCode) {
+                    mCustomEventNativeListener.onNativeAdFailed(errorCode);
+                }
+            });
+        }
 
-            setImpressionMinTimeViewed(IMPRESSION_MIN_TIME_VIEWED);
+        @Override
+        public void onError(final Ad ad, final AdError adError) {
+            if (adError == null) {
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
+            } else if (adError.getErrorCode() == AdError.NO_FILL.getErrorCode()) {
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_NO_FILL);
+            } else if (adError.getErrorCode() == AdError.INTERNAL_ERROR.getErrorCode()) {
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
+            } else {
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
+            }
+        }
+
+        @Override
+        public void onAdClicked(final Ad ad) {
+            notifyAdClicked();
+        }
+
+        // ImpressionListener
+        @Override
+        public void onLoggingImpression(final Ad ad) {
+            notifyAdImpressed();
         }
 
+        // BaseForwardingNativeAd
         @Override
-        public void recordImpression() {
-            mNativeAd.logImpression();
+        public void prepare(final View view) {
+            mNativeAd.registerViewForInteraction(view);
+            setOverridingClickTracker(true);
+            setOverridingImpressionTracker(true);
         }
 
         @Override
-        public void handleClick(final View view) {
-            mNativeAd.handleClick();
+        public void clear(final View view) {
+            mNativeAd.unregisterView();
         }
 
         @Override
@@ -151,7 +156,7 @@ public void destroy() {
             mNativeAd.destroy();
         }
 
-        private static Double getDoubleRating(final Rating rating) {
+        private Double getDoubleRating(final Rating rating) {
             if (rating == null) {
                 return null;
             }
diff --git a/extras/src/com/mopub/nativeads/InMobiNative.java b/extras/src/com/mopub/nativeads/InMobiNative.java
index 82d07ea0..ae00d72a 100644
--- a/extras/src/com/mopub/nativeads/InMobiNative.java
+++ b/extras/src/com/mopub/nativeads/InMobiNative.java
@@ -25,12 +25,9 @@
 /*
  * Tested with InMobi SDK 4.4.1
  */
-class InMobiNative extends CustomEventNative implements IMNativeListener {
+class InMobiNative extends CustomEventNative {
     private static final String APP_ID_KEY = "app_id";
 
-    private Context mContext;
-    private CustomEventNativeListener mCustomEventNativeListener;
-
     // CustomEventNative implementation
     @Override
     protected void loadNativeAd(final Context context,
@@ -38,8 +35,6 @@ protected void loadNativeAd(final Context context,
             final Map<String, Object> localExtras,
             final Map<String, String> serverExtras) {
 
-        mContext = context;
-
         if (!(context instanceof Activity)) {
             customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
             return;
@@ -54,66 +49,11 @@ protected void loadNativeAd(final Context context,
             return;
         }
 
-        mCustomEventNativeListener = customEventNativeListener;
-
         InMobi.initialize(activity, appId);
-        final IMNative imNative = new IMNative(this);
-        imNative.loadAd();
-    }
-
-    // IMNativeListener implementation
-    @Override
-    public void onNativeRequestSucceeded(final IMNative imNative) {
-        if (imNative == null) {
-            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
-            return;
-        }
-
-        final InMobiForwardingNativeAd inMobiForwardingNativeAd;
-        try {
-            inMobiForwardingNativeAd = new InMobiForwardingNativeAd(imNative);
-        } catch (IllegalArgumentException e) {
-            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
-            return;
-        } catch (JSONException e) {
-            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.INVALID_JSON);
-            return;
-        }
-
-        final List<String> imageUrls = new ArrayList<String>();
-        final String mainImageUrl = inMobiForwardingNativeAd.getMainImageUrl();
-        if (mainImageUrl != null) {
-            imageUrls.add(mainImageUrl);
-        }
-        final String iconUrl = inMobiForwardingNativeAd.getIconImageUrl();
-        if (iconUrl != null) {
-            imageUrls.add(iconUrl);
-        }
-
-        preCacheImages(mContext, imageUrls, new ImageListener() {
-            @Override
-            public void onImagesCached() {
-                mCustomEventNativeListener.onNativeAdLoaded(inMobiForwardingNativeAd);
-            }
-
-            @Override
-            public void onImagesFailedToCache(NativeErrorCode errorCode) {
-                mCustomEventNativeListener.onNativeAdFailed(errorCode);
-            }
-        });
-    }
-
-    @Override
-    public void onNativeRequestFailed(final IMErrorCode errorCode) {
-        if (errorCode == IMErrorCode.INVALID_REQUEST) {
-            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_REQUEST);
-        } else if (errorCode == IMErrorCode.INTERNAL_ERROR || errorCode == IMErrorCode.NETWORK_ERROR) {
-            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
-        } else if (errorCode == IMErrorCode.NO_FILL) {
-            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_NO_FILL);
-        } else {
-            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
-        }
+        final InMobiForwardingNativeAd inMobiForwardingNativeAd =
+                new InMobiForwardingNativeAd(context, customEventNativeListener);
+        inMobiForwardingNativeAd.setIMNative(new IMNative(inMobiForwardingNativeAd));
+        inMobiForwardingNativeAd.loadAd();
     }
 
     private boolean extrasAreValid(final Map<String, String> serverExtras) {
@@ -121,7 +61,7 @@ private boolean extrasAreValid(final Map<String, String> serverExtras) {
         return (placementId != null && placementId.length() > 0);
     }
 
-    static class InMobiForwardingNativeAd extends BaseForwardingNativeAd {
+    static class InMobiForwardingNativeAd extends BaseForwardingNativeAd implements IMNativeListener {
         static final int IMPRESSION_MIN_TIME_VIEWED = 0;
 
         // Modifiable keys
@@ -136,44 +76,78 @@ private boolean extrasAreValid(final Map<String, String> serverExtras) {
         // Constant keys
         static final String URL = "url";
 
-        private final IMNative mImNative;
+        private final Context mContext;
+        private final CustomEventNativeListener mCustomEventNativeListener;
+        private IMNative mImNative;
 
-        InMobiForwardingNativeAd(final IMNative imNative) throws IllegalArgumentException, JSONException {
-            if (imNative == null) {
-                throw new IllegalArgumentException("InMobi Native Ad cannot be null");
-            }
+        InMobiForwardingNativeAd(final Context context,
+                final CustomEventNativeListener customEventNativeListener) {
+            mContext = context.getApplicationContext();
+            mCustomEventNativeListener = customEventNativeListener;
+        }
 
+        void setIMNative(final IMNative imNative) {
             mImNative = imNative;
+        }
 
-            final JSONTokener jsonTokener = new JSONTokener(mImNative.getContent());
-            final JSONObject jsonObject = new JSONObject(jsonTokener);
+        void loadAd() {
+            mImNative.loadAd();
+        }
 
-            setTitle(getJsonValue(jsonObject, TITLE, String.class));
-            setText(getJsonValue(jsonObject, DESCRIPTION, String.class));
+        // IMNativeListener implementation
+        @Override
+        public void onNativeRequestSucceeded(final IMNative imNative) {
+            if (imNative == null) {
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
+                return;
+            }
 
-            final JSONObject screenShotJsonObject = getJsonValue(jsonObject, SCREENSHOTS, JSONObject.class);
-            if (screenShotJsonObject != null) {
-                setMainImageUrl(getJsonValue(screenShotJsonObject, URL, String.class));
+            try {
+                parseJson(imNative);
+            } catch (JSONException e) {
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.INVALID_JSON);
+                return;
             }
 
-            final JSONObject iconJsonObject = getJsonValue(jsonObject, ICON, JSONObject.class);
-            if (iconJsonObject != null) {
-                setIconImageUrl(getJsonValue(iconJsonObject, URL, String.class));
+            final List<String> imageUrls = new ArrayList<String>();
+            final String mainImageUrl = getMainImageUrl();
+            if (mainImageUrl != null) {
+                imageUrls.add(mainImageUrl);
             }
 
-            setClickDestinationUrl(getJsonValue(jsonObject, LANDING_URL, String.class));
-            setCallToAction(getJsonValue(jsonObject, CTA, String.class));
+            final String iconUrl = getIconImageUrl();
+            if (iconUrl != null) {
+                imageUrls.add(iconUrl);
+            }
 
-            try {
-                setStarRating(parseDouble(jsonObject.opt(RATING)));
-            } catch (ClassCastException e) {
-                Log.d("MoPub", "Unable to set invalid star rating for InMobi Native.");
+            preCacheImages(mContext, imageUrls, new ImageListener() {
+                @Override
+                public void onImagesCached() {
+                    mCustomEventNativeListener.onNativeAdLoaded(InMobiForwardingNativeAd.this);
+                }
+
+                @Override
+                public void onImagesFailedToCache(NativeErrorCode errorCode) {
+                    mCustomEventNativeListener.onNativeAdFailed(errorCode);
+                }
+            });
+        }
+
+        @Override
+        public void onNativeRequestFailed(final IMErrorCode errorCode) {
+            if (errorCode == IMErrorCode.INVALID_REQUEST) {
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_REQUEST);
+            } else if (errorCode == IMErrorCode.INTERNAL_ERROR || errorCode == IMErrorCode.NETWORK_ERROR) {
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
+            } else if (errorCode == IMErrorCode.NO_FILL) {
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_NO_FILL);
+            } else {
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
             }
-            setImpressionMinTimeViewed(IMPRESSION_MIN_TIME_VIEWED);
         }
 
         @Override
-        public void prepareImpression(final View view) {
+        public void prepare(final View view) {
             if (view != null && view instanceof ViewGroup) {
                 mImNative.attachToView((ViewGroup) view);
             } else if (view != null && view.getParent() instanceof ViewGroup) {
@@ -192,5 +166,34 @@ public void handleClick(final View view) {
         public void destroy() {
             mImNative.detachFromView();
         }
+
+        void parseJson(final IMNative imNative) throws JSONException  {
+            final JSONTokener jsonTokener = new JSONTokener(imNative.getContent());
+            final JSONObject jsonObject = new JSONObject(jsonTokener);
+
+            setTitle(getJsonValue(jsonObject, TITLE, String.class));
+            setText(getJsonValue(jsonObject, DESCRIPTION, String.class));
+
+            final JSONObject screenShotJsonObject = getJsonValue(jsonObject, SCREENSHOTS, JSONObject.class);
+            if (screenShotJsonObject != null) {
+                setMainImageUrl(getJsonValue(screenShotJsonObject, URL, String.class));
+            }
+
+            final JSONObject iconJsonObject = getJsonValue(jsonObject, ICON, JSONObject.class);
+            if (iconJsonObject != null) {
+                setIconImageUrl(getJsonValue(iconJsonObject, URL, String.class));
+            }
+
+            setClickDestinationUrl(getJsonValue(jsonObject, LANDING_URL, String.class));
+            setCallToAction(getJsonValue(jsonObject, CTA, String.class));
+
+            try {
+                setStarRating(parseDouble(jsonObject.opt(RATING)));
+            } catch (ClassCastException e) {
+                Log.d("MoPub", "Unable to set invalid star rating for InMobi Native.");
+            }
+            setImpressionMinTimeViewed(IMPRESSION_MIN_TIME_VIEWED);
+        }
+
     }
 }
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index cefeb8b7..b845040a 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -10,7 +10,7 @@ android {
 
     defaultConfig {
         versionCode 1
-        versionName "2.3"
+        versionName "3.1.0"
         minSdkVersion 9
         targetSdkVersion 19
     }
diff --git a/mopub-sdk/build.gradle b/mopub-sdk/build.gradle
index 960291af..1dbfd956 100644
--- a/mopub-sdk/build.gradle
+++ b/mopub-sdk/build.gradle
@@ -9,6 +9,8 @@ android {
     buildToolsVersion "19.1.0"
 
     defaultConfig {
+        versionCode 1
+        versionName "3.1.0"
         minSdkVersion 9
         targetSdkVersion 19
     }
@@ -20,4 +22,4 @@ dependencies {
 
 apply plugin: 'maven'
 
-apply from: 'https://raw.githubusercontent.com/robbypond/gradle-mvn-push/master/gradle-mvn-push.gradle'
\ No newline at end of file
+apply from: 'https://raw.githubusercontent.com/robbypond/gradle-mvn-push/master/gradle-mvn-push.gradle'
diff --git a/mopub-sdk/src/main/java/com/mopub/common/DownloadTask.java b/mopub-sdk/src/main/java/com/mopub/common/DownloadTask.java
index ce1e022a..fc31c97c 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/DownloadTask.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/DownloadTask.java
@@ -2,9 +2,7 @@
 
 import android.net.http.AndroidHttpClient;
 import android.os.AsyncTask;
-
 import com.mopub.common.logging.MoPubLog;
-
 import org.apache.http.HttpResponse;
 import org.apache.http.client.methods.HttpUriRequest;
 
diff --git a/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java b/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java
index 9dfaedee..70874038 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java
@@ -3,10 +3,9 @@
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.os.AsyncTask;
-
 import com.mopub.common.factories.MethodBuilderFactory;
-import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.AsyncTasks;
 
 import java.lang.ref.WeakReference;
 
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
index e164abf1..1876a923 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
@@ -33,7 +33,7 @@
 package com.mopub.common;
 
 public class MoPub {
-    public static final String SDK_VERSION = "3.0.0";
+    public static final String SDK_VERSION = "3.1.0";
 
     public static enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java
index 2f2ac355..c020e52f 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java
@@ -37,18 +37,14 @@
 import android.graphics.Bitmap;
 import android.net.Uri;
 import android.view.View;
-
-import com.mopub.common.util.DateAndTime;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.DateAndTime;
 import com.mopub.common.util.Streams;
 import com.mopub.mobileads.util.Base64;
 
-import java.io.ByteArrayOutputStream;
-import java.io.File;
-import java.io.FileOutputStream;
+import java.io.*;
 import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.Date;
+import java.util.*;
 
 public class AdAlertReporter {
     private static final String EMAIL_RECIPIENT = "creative-review@mopub.com";
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdConfiguration.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdConfiguration.java
index 9160fe5d..72a2212b 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdConfiguration.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdConfiguration.java
@@ -36,21 +36,15 @@
 import android.os.Build;
 import android.provider.Settings;
 import android.webkit.WebView;
-
 import com.mopub.common.MoPub;
 import com.mopub.common.util.DateAndTime;
 import com.mopub.common.util.Utils;
 import com.mopub.common.util.VersionCode;
-
 import org.apache.http.HttpResponse;
 
 import java.io.*;
 import java.util.*;
 
-import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
-import static com.mopub.mobileads.util.HttpResponses.extractHeader;
-import static com.mopub.mobileads.util.HttpResponses.extractIntHeader;
-import static com.mopub.mobileads.util.HttpResponses.extractIntegerHeader;
 import static com.mopub.common.util.ResponseHeader.AD_TIMEOUT;
 import static com.mopub.common.util.ResponseHeader.AD_TYPE;
 import static com.mopub.common.util.ResponseHeader.CLICKTHROUGH_URL;
@@ -62,6 +56,10 @@
 import static com.mopub.common.util.ResponseHeader.REDIRECT_URL;
 import static com.mopub.common.util.ResponseHeader.REFRESH_TIME;
 import static com.mopub.common.util.ResponseHeader.WIDTH;
+import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
+import static com.mopub.mobileads.util.HttpResponses.extractHeader;
+import static com.mopub.mobileads.util.HttpResponses.extractIntHeader;
+import static com.mopub.mobileads.util.HttpResponses.extractIntegerHeader;
 
 public class AdConfiguration implements Serializable {
     private static final long serialVersionUID = 0L;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetchTask.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetchTask.java
index cd95c531..546e1e0e 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetchTask.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetchTask.java
@@ -33,10 +33,8 @@
 package com.mopub.mobileads;
 
 import android.os.AsyncTask;
-
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.factories.HttpClientFactory;
-
 import org.apache.http.HttpResponse;
 import org.apache.http.HttpStatus;
 import org.apache.http.client.HttpClient;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetcher.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetcher.java
index 13cc2766..302cfce7 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetcher.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetcher.java
@@ -32,8 +32,8 @@
 
 package com.mopub.mobileads;
 
-import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.AsyncTasks;
 import com.mopub.mobileads.factories.AdFetchTaskFactory;
 
 /*
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoadTask.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoadTask.java
index 053556aa..01709a62 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoadTask.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoadTask.java
@@ -34,20 +34,17 @@
 
 import android.app.Activity;
 import android.net.Uri;
-
-import com.mopub.common.util.Json;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Json;
 import com.mopub.common.util.Strings;
-
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
 
-import java.io.IOException;
+import java.io.*;
 import java.lang.ref.WeakReference;
 import java.lang.reflect.Method;
-import java.util.HashMap;
-import java.util.Map;
+import java.util.*;
 
 import static com.mopub.common.util.ResponseHeader.AD_TYPE;
 import static com.mopub.common.util.ResponseHeader.CLICKTHROUGH_URL;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
index d1c8639b..4ae6dfc4 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
@@ -42,20 +42,16 @@
 import android.view.Gravity;
 import android.view.View;
 import android.widget.FrameLayout;
-
 import com.mopub.common.MoPub;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Dips;
 import com.mopub.mobileads.factories.AdFetcherFactory;
 import com.mopub.mobileads.factories.HttpClientFactory;
-
 import org.apache.http.HttpResponse;
 import org.apache.http.client.methods.HttpGet;
 import org.apache.http.impl.client.DefaultHttpClient;
 
-import java.util.HashMap;
-import java.util.Map;
-import java.util.WeakHashMap;
+import java.util.*;
 
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
 import static com.mopub.common.GpsHelper.GpsHelperListener;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
index 8e768f41..f36498b1 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
@@ -36,7 +36,6 @@
 import android.graphics.Color;
 import android.view.MotionEvent;
 import android.view.View;
-
 import com.mopub.common.logging.MoPubLog;
 
 import static com.mopub.common.util.VersionCode.ICE_CREAM_SANDWICH;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
index 0ff23a57..0294d09a 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
@@ -40,7 +40,6 @@
 import android.view.ViewGroup;
 import android.widget.RelativeLayout;
 import android.widget.VideoView;
-
 import com.mopub.common.logging.MoPubLog;
 
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubBrowserController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubBrowserController.java
index 4029b87f..90f37f4b 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubBrowserController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubBrowserController.java
@@ -37,7 +37,6 @@
 import android.content.Intent;
 import android.net.Uri;
 import android.util.Log;
-
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.util.IntentUtils;
 import com.mopub.mobileads.util.Utils;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
index 8be315fa..86b01d15 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
@@ -34,14 +34,12 @@
 
 import android.content.Context;
 import android.content.SharedPreferences;
-
 import com.mopub.common.BaseUrlGenerator;
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.GpsHelper;
 import com.mopub.common.SharedPreferencesHelper;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.factories.HttpClientFactory;
-
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
 import org.apache.http.HttpStatus;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
index ca13e254..751db4d8 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
@@ -42,7 +42,6 @@
 import android.view.View;
 import android.webkit.WebViewDatabase;
 import android.widget.FrameLayout;
-
 import com.mopub.common.MoPub;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.ManifestUtils;
@@ -50,8 +49,7 @@
 import com.mopub.mobileads.factories.AdViewControllerFactory;
 import com.mopub.mobileads.factories.CustomEventBannerAdapterFactory;
 
-import java.util.Collections;
-import java.util.Map;
+import java.util.*;
 
 import static com.mopub.common.LocationService.LocationAwareness;
 import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_DATA;
@@ -120,7 +118,6 @@ public MoPubView(Context context, AttributeSet attrs) {
     }
 
     private void registerScreenStateBroadcastReceiver() {
-        // message about leaked IntentReceiver
         mScreenStateReceiver = new BroadcastReceiver() {
             public void onReceive(final Context context, final Intent intent) {
                 if (!Visibility.isScreenVisible(mScreenVisibility) || intent == null) {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java
index aa59e145..19f54c62 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java
@@ -64,9 +64,8 @@
 import android.widget.ImageView;
 import android.widget.RelativeLayout;
 import android.widget.Toast;
-
-import com.mopub.common.util.Dips;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Dips;
 import com.mopub.common.util.Streams;
 import com.mopub.mobileads.MraidView.ExpansionStyle;
 import com.mopub.mobileads.MraidView.NativeCloseButtonStyle;
@@ -76,23 +75,16 @@
 import com.mopub.mobileads.util.HttpResponses;
 import com.mopub.mobileads.util.Interstitials;
 import com.mopub.mobileads.util.Mraids;
-
 import org.apache.http.Header;
 import org.apache.http.HttpResponse;
 import org.apache.http.client.HttpClient;
 import org.apache.http.client.methods.HttpGet;
 
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.InputStream;
-import java.io.OutputStream;
+import java.io.*;
 import java.net.URI;
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.Map;
+import java.util.*;
 
 import static android.graphics.Color.TRANSPARENT;
 import static com.mopub.common.util.Drawables.INTERSTITIAL_CLOSE_BUTTON_NORMAL;
@@ -390,7 +382,6 @@ public void run() {
                     HttpResponse httpResponse = httpClient.execute(httpGet);
                     pictureInputStream = httpResponse.getEntity().getContent();
 
-                    // do we have this header on non-redirects?
                     String redirectLocation = HttpResponses.extractHeader(httpResponse, LOCATION);
                     if (redirectLocation != null) {
                         uri = URI.create(redirectLocation);
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
index e937ad68..3d271c21 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
@@ -39,9 +39,8 @@
 import android.view.View;
 import android.view.Window;
 import android.view.WindowManager;
-
-import com.mopub.common.util.IntentUtils;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.IntentUtils;
 
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoViewController.java
index 67582d38..d3ae5d41 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoViewController.java
@@ -40,9 +40,7 @@
 import android.widget.ImageButton;
 import android.widget.RelativeLayout;
 import android.widget.VideoView;
-
 import com.mopub.common.util.Dips;
-import com.mopub.common.util.Drawables;
 
 import static android.view.View.GONE;
 import static android.view.View.OnClickListener;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidView.java
index 59d74021..e8dcd560 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidView.java
@@ -42,12 +42,10 @@
 import android.view.View;
 import android.webkit.WebView;
 import android.webkit.WebViewClient;
-
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Strings;
 import com.mopub.mobileads.factories.HttpClientFactory;
 import com.mopub.mobileads.resource.MraidJavascript;
-
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
 import org.apache.http.NameValuePair;
@@ -56,12 +54,9 @@
 import org.apache.http.client.methods.HttpGet;
 import org.apache.http.client.utils.URLEncodedUtils;
 
-import java.io.IOException;
+import java.io.*;
 import java.net.URI;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
 
 import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand;
 import static com.mopub.mobileads.ViewGestureDetector.UserClickListener;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
index 9c786497..201eb8fa 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
@@ -49,30 +49,24 @@
 import android.widget.ImageView;
 import android.widget.RelativeLayout;
 import android.widget.VideoView;
-
 import com.mopub.common.DownloadResponse;
 import com.mopub.common.DownloadTask;
 import com.mopub.common.HttpResponses;
 import com.mopub.common.MoPubBrowser;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.Dips;
 import com.mopub.common.util.Drawables;
-import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Streams;
 import com.mopub.common.util.VersionCode;
 import com.mopub.mobileads.util.vast.VastCompanionAd;
 import com.mopub.mobileads.util.vast.VastVideoConfiguration;
-
 import org.apache.http.HttpStatus;
 import org.apache.http.client.methods.HttpGet;
 
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.Serializable;
-import java.util.List;
-import java.util.concurrent.LinkedBlockingQueue;
-import java.util.concurrent.ThreadPoolExecutor;
-import java.util.concurrent.TimeUnit;
+import java.io.*;
+import java.util.*;
+import java.util.concurrent.*;
 
 import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
 import static com.mopub.common.HttpClient.initializeHttpGet;
@@ -266,7 +260,6 @@ private void downloadCompanionAd() {
     }
 
     private Runnable createVideoProgressCheckerRunnable() {
-        // This code could be pulled into it's own class
         return new Runnable() {
             @Override
             public void run() {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastManager.java
index c61cf639..ab6c0dce 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastManager.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastManager.java
@@ -3,16 +3,12 @@
 import android.content.Context;
 import android.view.Display;
 import android.view.WindowManager;
-
 import com.mopub.common.CacheService;
-import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.AsyncTasks;
 import com.mopub.mobileads.VastVideoDownloadTask;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Iterator;
-import java.util.List;
+import java.util.*;
 
 import static com.mopub.mobileads.VastVideoDownloadTask.VastVideoDownloadTaskListener;
 import static com.mopub.mobileads.util.vast.VastXmlManagerAggregator.VastXmlManagerAggregatorListener;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManager.java
index 86748f05..8b098a7d 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManager.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManager.java
@@ -6,15 +6,11 @@
 import org.xml.sax.InputSource;
 import org.xml.sax.SAXException;
 
-import java.io.IOException;
-import java.io.StringReader;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
 import javax.xml.parsers.ParserConfigurationException;
+import java.io.*;
+import java.util.*;
 
 class VastXmlManager {
     private static final String ROOT_TAG = "MPMoVideoXMLDocRoot";
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/BaseForwardingNativeAd.java b/mopub-sdk/src/main/java/com/mopub/nativeads/BaseForwardingNativeAd.java
index 0677dcec..9f5b58cf 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/BaseForwardingNativeAd.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/BaseForwardingNativeAd.java
@@ -1,16 +1,29 @@
 package com.mopub.nativeads;
 
+import android.content.Context;
+import android.graphics.Bitmap;
 import android.view.View;
 
 import com.mopub.common.logging.MoPubLog;
 
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
+import static com.mopub.nativeads.CustomEventNative.CustomEventNativeListener;
+import static com.mopub.nativeads.CustomEventNative.ImageListener;
+
 abstract class BaseForwardingNativeAd implements NativeAdInterface {
     private static final int IMPRESSION_MIN_PERCENTAGE_VIEWED = 50;
+
+    static interface NativeEventListener {
+        public void onAdImpressed();
+        public void onAdClicked();
+    }
+    private NativeEventListener mNativeEventListener;
+
     static final double MIN_STAR_RATING = 0;
     static final double MAX_STAR_RATING = 5;
 
@@ -30,6 +43,10 @@
     // Extras
     private final Map<String, Object> mExtras;
 
+    // Event Logistics
+    private boolean mIsOverridingClickTracker;
+    private boolean mIsOverridingImpressionTracker;
+
     BaseForwardingNativeAd() {
         mImpressionMinTimeViewed = 1000;
 
@@ -138,18 +155,45 @@ final public Object getExtra(final String key) {
         return mExtras.get(key);
     }
 
-    @Override
     /**
      * Returns a copy of the extras map, reflecting additional ad content not reflected in any
      * of the above hardcoded setters. This is particularly useful for passing down custom fields
      * with MoPub's direct-sold native ads or from mediated networks that pass back additional
      * fields.
      */
+    @Override
     final public Map<String, Object> getExtras() {
         return new HashMap<String, Object>(mExtras);
     }
 
+    /**
+     * Returns {@code true} if the native ad is using a network impression tracker. If set to
+     * true, the network must expose a callback that calls into
+     * {@link BaseForwardingNativeAd#notifyAdImpressed()} in order for MoPub to fire its impression
+     * tracker at the appropriate time.
+     */
+    @Override
+    final public boolean isOverridingImpressionTracker() {
+        return mIsOverridingImpressionTracker;
+    }
+
+    /**
+     * Returns {@code true} if the native ad is using a network click tracker. If set to true, the
+     * network must expose a callback that calls into
+     * {@link BaseForwardingNativeAd#notifyAdClicked()} in order for MoPub to fire its click tracker
+     * at the appropriate time.
+     */
+    @Override
+    final public boolean isOverridingClickTracker() {
+        return mIsOverridingClickTracker;
+    }
+
     // Setters
+    @Override
+    public final void setNativeEventListener(final NativeEventListener nativeEventListener) {
+        mNativeEventListener = nativeEventListener;
+    }
+
     final void setMainImageUrl(final String mainImageUrl) {
         mMainImageUrl = mainImageUrl;
     }
@@ -199,18 +243,28 @@ final void setImpressionMinTimeViewed(final int impressionMinTimeViewed) {
         }
     }
 
+    final void setOverridingImpressionTracker(final boolean isOverridingImpressionTracker) {
+        mIsOverridingImpressionTracker = isOverridingImpressionTracker;
+    }
+
+    final void setOverridingClickTracker(final boolean isOverridingClickTracker) {
+        mIsOverridingClickTracker = isOverridingClickTracker;
+    }
+
     // Event Handlers
     /**
      * Your base native ad subclass should implement this method if the network requires the developer
-     * to prepare state for recording an impression before a view is rendered to screen.
+     * to prepare state for recording an impression or click before a view is rendered to screen.
+     *
      * This method is optional.
      */
     @Override
-    public void prepareImpression(final View view) { }
+    public void prepare(final View view) { }
 
     /**
      * Your base native ad subclass should implement this method if the network requires the developer
      * to explicitly record an impression of a view rendered to screen.
+     *
      * This method is optional.
      */
     @Override
@@ -219,16 +273,72 @@ public void recordImpression() { }
     /**
      * Your base native ad subclass should implement this method if the network requires the developer
      * to explicitly handle click events of views rendered to screen.
+     *
      * This method is optional.
      */
     @Override
     public void handleClick(final View view) { }
 
+    /**
+     * Your base native ad subclass should implement this method if the network requires the developer
+     * to reset or clear state of the native ad after it goes off screen and before it is rendered
+     * again.
+     *
+     * This method is optional.
+     */
+    @Override
+    public void clear(final View view) { }
+
     /**
      * Your base native ad subclass should implement this method if the network requires the developer
      * to destroy or cleanup their native ad when they are finished with it.
+     *
      * This method is optional.
      */
     @Override
     public void destroy() { }
+
+    // Event Notifiers
+    /**
+     * Notifies the SDK that the ad has been shown. This will cause the SDK to record an impression
+     * for the ad. This is meant for network SDKs that expose their own impression tracking
+     * callbacks, and requires that you call
+     * {@link BaseForwardingNativeAd#setOverridingImpressionTracker} from your implementation of
+     * {@link BaseForwardingNativeAd#prepare}.
+     */
+    protected final void notifyAdImpressed() {
+        mNativeEventListener.onAdImpressed();
+    }
+
+    /**
+     * Notifies the SDK that the user has clicked the ad. This will cause the SDK to record an
+     * click for the ad. This is meant for network SDKs that expose their own click
+     * tracking callbacks, and requires that you call
+     * {@link BaseForwardingNativeAd#setOverridingClickTracker} from your implementation of
+     * {@link BaseForwardingNativeAd#prepare}.
+     */
+    protected final void notifyAdClicked() {
+        mNativeEventListener.onAdClicked();
+    }
+
+    /**
+     * Pre caches the given set of image urls. We recommend using this method to warm the image
+     * cache before calling {@link CustomEventNativeListener#onNativeAdLoaded}. Doing so will
+     * force images to cache before displaying the ad.
+     */
+    static void preCacheImages(final Context context,
+            final List<String> imageUrls,
+            final ImageListener imageListener) {
+        ImageService.get(context, imageUrls, new ImageService.ImageServiceListener() {
+            @Override
+            public void onSuccess(final Map<String, Bitmap> bitmaps) {
+                imageListener.onImagesCached();
+            }
+
+            @Override
+            public void onFail() {
+                imageListener.onImagesFailedToCache(NativeErrorCode.IMAGE_DOWNLOAD_FAILURE);
+            }
+        });
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java
index 7df5da09..03397057 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java
@@ -1,9 +1,7 @@
 package com.mopub.nativeads;
 
 import android.content.Context;
-import android.graphics.Bitmap;
 
-import java.util.List;
 import java.util.Map;
 
 /**
@@ -34,27 +32,6 @@ protected abstract void loadNativeAd(final Context context,
             final Map<String, Object> localExtras,
             final Map<String, String> serverExtras);
 
-    /**
-     * Pre caches the given set of image urls. We recommend using this method to warm the image
-     * cache before calling {@link CustomEventNativeListener#onNativeAdLoaded}. Doing so will
-     * force images to cache before displaying the ad.
-     */
-    final void preCacheImages(final Context context,
-            final List<String> imageUrls,
-            final ImageListener imageListener) {
-        ImageService.get(context, imageUrls, new ImageService.ImageServiceListener() {
-            @Override
-            public void onSuccess(final Map<String, Bitmap> bitmaps) {
-                imageListener.onImagesCached();
-            }
-
-            @Override
-            public void onFail() {
-                imageListener.onImagesFailedToCache(NativeErrorCode.IMAGE_DOWNLOAD_FAILURE);
-            }
-        });
-    }
-
     public interface ImageListener {
         /**
          * Called when images are successfully cached. If you haven't already called
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDiskTaskManager.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDiskTaskManager.java
index ce6b2988..f355fe69 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDiskTaskManager.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDiskTaskManager.java
@@ -1,10 +1,9 @@
 package com.mopub.nativeads;
 
 import android.graphics.Bitmap;
-
 import com.mopub.common.CacheService;
 
-import java.util.List;
+import java.util.*;
 
 import static com.mopub.common.CacheService.DiskLruCacheGetListener;
 
@@ -35,7 +34,6 @@ void execute() {
 
     void failAllTasks() {
         if (mFailed.compareAndSet(false, true)) {
-            // See ImageDownloadTaskManager for an example
             mImageTaskManagerListener.onFail();
         }
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
index 04fb32cd..77a9accb 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
@@ -9,14 +9,12 @@
 import android.widget.BaseAdapter;
 import android.widget.ListAdapter;
 import android.widget.ListView;
-
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
 import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubServerPositioning;
 
-import java.util.List;
-import java.util.WeakHashMap;
+import java.util.*;
 
 import static android.widget.AdapterView.OnItemClickListener;
 import static android.widget.AdapterView.OnItemLongClickListener;
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
index 72bd60fb..93f1ad45 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
@@ -21,15 +21,20 @@
 import static com.mopub.nativeads.NativeResponse.Parameter;
 
 public class MoPubCustomEventNative extends CustomEventNative {
+
     @Override
     protected void loadNativeAd(final Context context,
             final CustomEventNativeListener customEventNativeListener,
             final Map<String, Object> localExtras,
             final Map<String, String> serverExtras) {
 
-        final MoPubForwardingNativeAd moPubForwardingNativeAd;
+        final MoPubForwardingNativeAd moPubForwardingNativeAd =
+                new MoPubForwardingNativeAd(context.getApplicationContext(),
+                        serverExtras.get(RESPONSE_BODY_KEY),
+                        customEventNativeListener);
+
         try {
-            moPubForwardingNativeAd = new MoPubForwardingNativeAd(serverExtras.get(RESPONSE_BODY_KEY));
+            moPubForwardingNativeAd.loadAd();
         } catch (IllegalArgumentException e) {
             customEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
             return;
@@ -37,26 +42,27 @@ protected void loadNativeAd(final Context context,
             customEventNativeListener.onNativeAdFailed(NativeErrorCode.INVALID_JSON);
             return;
         }
-        preCacheImages(context, moPubForwardingNativeAd.getAllImageUrls(), new ImageListener() {
-            @Override
-            public void onImagesCached() {
-                customEventNativeListener.onNativeAdLoaded(moPubForwardingNativeAd);
-            }
-
-            @Override
-            public void onImagesFailedToCache(NativeErrorCode errorCode) {
-                customEventNativeListener.onNativeAdFailed(errorCode);
-            }
-        });
     }
 
     static class MoPubForwardingNativeAd extends BaseForwardingNativeAd {
-        MoPubForwardingNativeAd(final String jsonString) throws IllegalArgumentException, JSONException {
-            if (jsonString == null) {
+        private final Context mContext;
+        private final String mJsonString;
+        private final CustomEventNativeListener mCustomEventNativeListener;
+
+        MoPubForwardingNativeAd(final Context context,
+                final String jsonString,
+                final CustomEventNativeListener customEventNativeListener) {
+            mContext = context;
+            mJsonString = jsonString;
+            mCustomEventNativeListener = customEventNativeListener;
+        }
+
+        void loadAd() throws IllegalArgumentException, JSONException {
+            if (mJsonString == null) {
                 throw new IllegalArgumentException("Json String cannot be null");
             }
 
-            final JSONTokener jsonTokener = new JSONTokener(jsonString);
+            final JSONTokener jsonTokener = new JSONTokener(mJsonString);
             final JSONObject jsonObject = new JSONObject(jsonTokener);
 
             if (!containsRequiredKeys(jsonObject)) {
@@ -78,6 +84,18 @@ public void onImagesFailedToCache(NativeErrorCode errorCode) {
                     addExtra(key, jsonObject.opt(key));
                 }
             }
+
+            preCacheImages(mContext, getAllImageUrls(), new ImageListener() {
+                @Override
+                public void onImagesCached() {
+                    mCustomEventNativeListener.onNativeAdLoaded(MoPubForwardingNativeAd.this);
+                }
+
+                @Override
+                public void onImagesFailedToCache(final NativeErrorCode errorCode) {
+                    mCustomEventNativeListener.onNativeAdFailed(errorCode);
+                }
+            });
         }
 
         private boolean containsRequiredKeys(final JSONObject jsonObject) {
@@ -176,6 +194,5 @@ private boolean isImageKey(final String name) {
             imageUrls.addAll(getExtrasImageUrls());
             return imageUrls;
         }
-
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
index c09b2c77..e842729b 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
@@ -2,25 +2,22 @@
 
 import android.content.Context;
 import android.view.View;
-
 import com.mopub.common.DownloadResponse;
 import com.mopub.common.DownloadTask;
 import com.mopub.common.GpsHelper;
 import com.mopub.common.HttpClient;
 import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.DeviceUtils;
 import com.mopub.common.util.ManifestUtils;
-import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.ResponseHeader;
-
 import org.apache.http.HttpStatus;
 import org.apache.http.client.methods.HttpGet;
 import org.apache.http.client.methods.HttpUriRequest;
 
 import java.lang.ref.WeakReference;
-import java.util.HashMap;
-import java.util.Map;
+import java.util.*;
 
 import static com.mopub.common.GpsHelper.GpsHelperListener;
 import static com.mopub.common.GpsHelper.asyncFetchAdvertisingInfo;
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdRenderer.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdRenderer.java
index c0a30360..e33dd2c6 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdRenderer.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdRenderer.java
@@ -4,7 +4,6 @@
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.Button;
 
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
@@ -50,13 +49,8 @@ public void renderAdView(final View view, final NativeResponse nativeResponse) {
             return;
         }
 
-        // Clean up previous state of view
-        removeClickListeners(view, nativeViewHolder);
-
         populateConvertViewSubViews(view, nativeViewHolder, nativeResponse, mViewBinder);
-        attachClickListeners(view, nativeViewHolder, nativeResponse);
         view.setVisibility(VISIBLE);
-        nativeResponse.prepareImpression(view);
     }
 
     @VisibleForTesting
@@ -78,42 +72,4 @@ private void populateConvertViewSubViews(final View view,
         nativeViewHolder.update(nativeResponse);
         nativeViewHolder.updateExtras(view, nativeResponse, viewBinder);
     }
-
-    private void removeClickListeners(final View view, final NativeViewHolder nativeViewHolder) {
-        view.setOnClickListener(null);
-        setCtaClickListener(nativeViewHolder, null);
-    }
-
-    private void attachClickListeners(final View view,
-            final NativeViewHolder nativeViewHolder,
-            final NativeResponse nativeResponse) {
-        final NativeViewClickListener nativeViewClickListener =
-                new NativeViewClickListener(nativeResponse);
-        view.setOnClickListener(nativeViewClickListener);
-        setCtaClickListener(nativeViewHolder, nativeViewClickListener);
-    }
-
-    private void setCtaClickListener(final NativeViewHolder nativeViewHolder,
-            final NativeViewClickListener nativeViewClickListener) {
-        // CTA widget could be a button and buttons don't inherit click listeners from parents
-        // So we have to set it manually here if so
-        if (nativeViewHolder.callToActionView != null
-                && nativeViewHolder.callToActionView instanceof Button) {
-            nativeViewHolder.callToActionView.setOnClickListener(nativeViewClickListener);
-        }
-    }
-
-    @VisibleForTesting
-    static class NativeViewClickListener implements View.OnClickListener {
-        private final NativeResponse mNativeResponse;
-
-        NativeViewClickListener(final NativeResponse nativeResponse) {
-            mNativeResponse = nativeResponse;
-        }
-
-        @Override
-        public void onClick(final View view) {
-            mNativeResponse.handleClick(view);
-        }
-    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
index f55134a8..4f077198 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
@@ -4,13 +4,12 @@
 import android.os.Handler;
 import android.view.View;
 import android.view.ViewGroup;
-
 import com.mopub.common.VisibleForTesting;
 import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
 import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubServerPositioning;
 import com.mopub.nativeads.PositioningSource.PositioningListener;
 
-import java.util.ArrayList;
+import java.util.*;
 
 /**
  * @code MoPubStreamAdPlacer facilitates loading ads and placing them into a content stream.
@@ -31,6 +30,7 @@
     private final PositioningSource mPositioningSource;
     private final NativeAdSource mAdSource;
     private final ImpressionTracker mImpressionTracker;
+    private final WeakHashMap<View, NativeResponse> mNativeResponseMap;
 
     private boolean mHasReceivedPositions;
     private PlacementData mPendingPlacementData;
@@ -109,6 +109,7 @@ public MoPubStreamAdPlacer(final Context context, final MoPubClientPositioning a
         mPositioningSource = positioningSource;
         mAdSource = adSource;
         mPlacementData = PlacementData.empty();
+        mNativeResponseMap = new WeakHashMap<View, NativeResponse>();
 
         mPlacementHandler = new Handler();
         mPlacementRunnable = new Runnable() {
@@ -352,8 +353,11 @@ public View getAdView(final int position, final View convertView, final ViewGrou
                 convertView : adRenderer.createAdView(mContext, parent);
 
         NativeResponse nativeResponse = adData.getAd();
-        adRenderer.renderAdView(view, nativeResponse);
-        mImpressionTracker.addView(view, nativeResponse);
+        if (!nativeResponse.equals(mNativeResponseMap.get(view))) {
+            clearNativeResponse(view);
+            prepareNativeResponse(nativeResponse, view);
+            adRenderer.renderAdView(view, nativeResponse);
+        }
         return view;
     }
 
@@ -614,4 +618,20 @@ private boolean tryPlaceAd(final int position) {
     private NativeAdData createAdData(final int position, final NativeResponse adResponse) {
         return new NativeAdData(mAdUnitId, mAdRenderer, adResponse);
     }
+
+    private void clearNativeResponse(final View view) {
+        mImpressionTracker.removeView(view);
+        final NativeResponse lastNativeResponse = mNativeResponseMap.get(view);
+        if (lastNativeResponse != null) {
+            lastNativeResponse.clear(view);
+        }
+    }
+
+    private void prepareNativeResponse(final NativeResponse nativeResponse, final View view) {
+        mNativeResponseMap.put(view, nativeResponse);
+        if (!nativeResponse.isOverridingImpressionTracker()) {
+            mImpressionTracker.addView(view, nativeResponse);
+        }
+        nativeResponse.prepare(view);
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdInterface.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdInterface.java
index f4f247bd..d748a681 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdInterface.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdInterface.java
@@ -5,6 +5,8 @@
 import java.util.Map;
 import java.util.Set;
 
+import static com.mopub.nativeads.BaseForwardingNativeAd.NativeEventListener;
+
 interface NativeAdInterface {
     // Getters
     String getMainImageUrl();
@@ -19,13 +21,20 @@
     int getImpressionMinPercentageViewed();
     int getImpressionMinTimeViewed();
 
+    boolean isOverridingClickTracker();
+    boolean isOverridingImpressionTracker();
+
     // Extras Getters
     Object getExtra(final String key);
     Map<String, Object> getExtras();
 
+    // Setters
+    void setNativeEventListener(final NativeEventListener nativeEventListener);
+
     // Event Handlers
-    void prepareImpression(final View view);
+    void prepare(final View view);
     void recordImpression();
     void handleClick(final View view);
+    void clear(final View view);
     void destroy();
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
index c584bc3c..969d27d6 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
@@ -4,6 +4,7 @@
 import android.view.View;
 import android.view.ViewGroup;
 
+import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 
 import java.util.WeakHashMap;
@@ -20,9 +21,15 @@ private NativeAdViewHelper() {}
 
     // Because the impression tracker requires tracking drawing views,
     // each context requires a separate impression tracker. To avoid leaking, keep weak references.
-    private static final WeakHashMap<Context, ImpressionTracker> sImpressionTrackerMap =
+    @VisibleForTesting
+    static final WeakHashMap<Context, ImpressionTracker> sImpressionTrackerMap =
             new WeakHashMap<Context, ImpressionTracker>();
 
+    // Used to keep track of the last NativeResponse a view was associated with in order to clean
+    // up its state before associating with a new NativeResponse
+    static private final WeakHashMap<View, NativeResponse> sNativeResponseMap =
+            new WeakHashMap<View, NativeResponse>();
+
     @Deprecated
     static View getAdView(View convertView,
                           final ViewGroup parent,
@@ -41,7 +48,7 @@ static View getAdView(View convertView,
             convertView = moPubNativeAdRenderer.createAdView(context, parent);
         }
 
-        cleanUpImpressionTracking(context, convertView);
+        clearNativeResponse(context, convertView);
 
         if (nativeResponse == null) {
             // If we don't have content for the view, then hide the view for now
@@ -51,19 +58,29 @@ static View getAdView(View convertView,
             MoPubLog.d("NativeResponse is destroyed, returning hidden view.");
             convertView.setVisibility(GONE);
         } else {
+            prepareNativeResponse(context, convertView, nativeResponse);
             moPubNativeAdRenderer.renderAdView(convertView, nativeResponse);
-            prepareImpressionTracking(context, convertView, nativeResponse);
         }
 
         return convertView;
     }
 
-    private static void cleanUpImpressionTracking(final Context context, final View view) {
+    private static void clearNativeResponse(final Context context, final View view) {
         getImpressionTracker(context).removeView(view);
+        final NativeResponse nativeResponse = sNativeResponseMap.get(view);
+        if (nativeResponse != null) {
+            nativeResponse.clear(view);
+        }
     }
 
-    private static void prepareImpressionTracking(final Context context, final View view, final NativeResponse nativeResponse) {
-        getImpressionTracker(context).addView(view, nativeResponse);
+    private static void prepareNativeResponse(final Context context,
+            final View view,
+            final NativeResponse nativeResponse) {
+        sNativeResponseMap.put(view, nativeResponse);
+        if (!nativeResponse.isOverridingImpressionTracker()) {
+            getImpressionTracker(context).addView(view, nativeResponse);
+        }
+        nativeResponse.prepare(view);
     }
 
     private static ImpressionTracker getImpressionTracker(final Context context) {
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java
index 86cb6866..c0eeb9ed 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java
@@ -4,14 +4,15 @@
 import android.content.Intent;
 import android.net.Uri;
 import android.view.View;
+import android.view.ViewGroup;
 import android.widget.ImageView;
 
 import com.mopub.common.DownloadResponse;
 import com.mopub.common.HttpClient;
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.VisibleForTesting;
-import com.mopub.common.util.IntentUtils;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.IntentUtils;
 import com.mopub.common.util.ResponseHeader;
 import com.mopub.nativeads.MoPubNative.MoPubNativeEventListener;
 
@@ -24,6 +25,8 @@
 import java.util.Map;
 import java.util.Set;
 
+import static android.view.View.OnClickListener;
+import static com.mopub.nativeads.BaseForwardingNativeAd.NativeEventListener;
 import static com.mopub.nativeads.NativeResponse.Parameter.CALL_TO_ACTION;
 import static com.mopub.nativeads.NativeResponse.Parameter.CLICK_DESTINATION;
 import static com.mopub.nativeads.NativeResponse.Parameter.CLICK_TRACKER;
@@ -102,6 +105,17 @@ public NativeResponse(final Context context,
         mAdUnitId = adUnitId;
         mMoPubNativeEventListener = moPubNativeEventListener;
         mNativeAd = nativeAd;
+        mNativeAd.setNativeEventListener(new NativeEventListener() {
+            @Override
+            public void onAdImpressed() {
+                recordImpression(null);
+            }
+
+            @Override
+            public void onAdClicked() {
+                handleClick(null);
+            }
+        });
 
         mMoPubImpressionTrackers = new HashSet<String>();
         mMoPubImpressionTrackers.add(downloadResponse.getFirstHeader(ResponseHeader.IMPRESSION_URL));
@@ -189,13 +203,25 @@ public Object getExtra(final String key) {
         return mNativeAd.getExtras();
     }
 
+    public boolean isOverridingImpressionTracker() {
+        return mNativeAd.isOverridingImpressionTracker();
+    }
+
+    public boolean isOverridingClickTracker() {
+        return mNativeAd.isOverridingClickTracker();
+    }
+
     // Event Handlers
-    public void prepareImpression(final View view) {
-        if (getRecordedImpression() || isDestroyed()) {
+    public void prepare(final View view) {
+        if (isDestroyed()) {
             return;
         }
 
-        mNativeAd.prepareImpression(view);
+        if (!isOverridingClickTracker()) {
+            setOnClickListener(view, new NativeViewClickListener());
+        }
+
+        mNativeAd.prepare(view);
     }
 
     public void recordImpression(final View view) {
@@ -229,6 +255,12 @@ public void handleClick(final View view) {
         mMoPubNativeEventListener.onNativeClick(view);
     }
 
+    public void clear(final View view) {
+        setOnClickListener(view, null);
+
+        mNativeAd.clear(view);
+    }
+
     public void destroy() {
         if (isDestroyed()) {
             return;
@@ -294,6 +326,15 @@ private void openClickDestinationUrl(final View view) {
         getResolvedUrl(urlIterator.next(), urlResolutionListener);
     }
 
+    private void setOnClickListener(final View view, final OnClickListener onClickListener) {
+        view.setOnClickListener(onClickListener);
+        if ((view instanceof ViewGroup)) {
+            ViewGroup viewGroup = (ViewGroup)view;
+            for (int i = 0; i < viewGroup.getChildCount(); i++)
+                setOnClickListener(viewGroup.getChildAt(i), onClickListener);
+        }
+    }
+
     private static class ClickDestinationUrlResolutionListener implements UrlResolutionListener {
         private final Context mContext;
         private final Iterator<String> mUrlIterator;
@@ -343,6 +384,14 @@ private void removeSpinningProgressView() {
         }
     }
 
+    @VisibleForTesting
+    class NativeViewClickListener implements OnClickListener {
+        @Override
+        public void onClick(final View view) {
+            handleClick(view);
+        }
+    }
+
     @Deprecated
     public String getSubtitle() {
         return mNativeAd.getText();
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
index acbf185a..bbcfbf7c 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
@@ -3,7 +3,6 @@
 import android.content.Context;
 import android.location.Location;
 import android.text.TextUtils;
-
 import com.mopub.common.AdUrlGenerator;
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.LocationService;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java
index 78f7dac2..bd666cde 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java
@@ -34,13 +34,12 @@
 
 import android.app.Activity;
 import android.view.View;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static com.mopub.common.util.Reflection.*;
+import static com.mopub.common.util.Reflection.MethodBuilder;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.fest.assertions.api.Assertions.fail;
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
index a40fc9a0..90eecedb 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
@@ -41,18 +41,16 @@
 import android.view.View;
 import android.webkit.WebView;
 import android.widget.FrameLayout;
-
 import com.mopub.common.GpsHelper;
 import com.mopub.common.GpsHelperTest;
 import com.mopub.common.MoPub;
 import com.mopub.common.SharedPreferencesHelper;
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
 import com.mopub.mobileads.factories.HttpClientFactory;
-import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestAdFetcherFactory;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 import com.mopub.mobileads.test.support.ThreadUtils;
-
 import org.apache.http.HttpRequest;
 import org.apache.http.HttpResponse;
 import org.apache.http.client.HttpClient;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
index 8a45f1e2..6fccf7fb 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
@@ -41,7 +41,6 @@
 import android.view.ViewGroup;
 import android.widget.ImageButton;
 import android.widget.RelativeLayout;
-
 import org.fest.assertions.api.ANDROID;
 import org.junit.Ignore;
 import org.junit.Test;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
index 2069502c..c72988f7 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
@@ -36,8 +36,8 @@
 import android.content.Context;
 import android.location.Location;
 import android.view.View;
-import com.mopub.mobileads.factories.CustomEventBannerFactory;
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.factories.CustomEventBannerFactory;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
index 2cb8f1cf..f435c09e 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
@@ -34,10 +34,8 @@
 
 import android.content.Context;
 import android.location.Location;
-
-import com.mopub.mobileads.factories.CustomEventInterstitialFactory;
 import com.mopub.common.test.support.SdkTestRunner;
-
+import com.mopub.mobileads.factories.CustomEventInterstitialFactory;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -45,8 +43,7 @@
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
 
-import java.util.HashMap;
-import java.util.Map;
+import java.util.*;
 
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
index e75d3ea5..2e661c9a 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
@@ -36,10 +36,8 @@
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.support.v4.content.LocalBroadcastManager;
-
-import com.mopub.mobileads.factories.CustomEventInterstitialAdapterFactory;
 import com.mopub.common.test.support.SdkTestRunner;
-
+import com.mopub.mobileads.factories.CustomEventInterstitialAdapterFactory;
 import org.fest.util.Sets;
 import org.junit.Before;
 import org.junit.Ignore;
@@ -47,8 +45,7 @@
 import org.junit.runner.RunWith;
 import org.robolectric.shadows.ShadowLocalBroadcastManager;
 
-import java.util.Iterator;
-import java.util.Set;
+import java.util.*;
 
 import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
@@ -60,7 +57,6 @@
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialAdListener;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
@@ -82,7 +78,6 @@ public void setUp() throws Exception {
         context = new Activity();
     }
 
-    // takes place in the loading and showing of an interstitial.
     @Ignore("pending")
     @Test
     public void twoDifferentInterstitials_shouldNotHearEachOthersBroadcasts() throws Exception {
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
index aed9f321..e6c15126 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
@@ -39,7 +39,6 @@
 import android.content.pm.ResolveInfo;
 import android.net.Uri;
 import android.webkit.WebView;
-
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.test.support.SdkTestRunner;
 import org.junit.Before;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
index 08ef5568..e03a9b01 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
@@ -39,10 +39,8 @@
 import android.view.View;
 import android.webkit.WebViewClient;
 import android.widget.RelativeLayout;
-
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestHtmlInterstitialWebViewFactory;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
index 9450f9a0..37efc6f0 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
@@ -33,20 +33,17 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
-
-import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.LocationService;
 import com.mopub.common.MoPub;
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestAdViewControllerFactory;
 import com.mopub.mobileads.test.support.TestCustomEventInterstitialAdapterFactory;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
 import java.math.BigDecimal;
-import java.util.HashMap;
-import java.util.Map;
+import java.util.*;
 
 import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_DATA;
 import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_HTML_DATA;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidDisplayControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidDisplayControllerTest.java
index c360bfd9..f31e5724 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidDisplayControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidDisplayControllerTest.java
@@ -38,7 +38,6 @@
 import android.content.Context;
 import android.content.Intent;
 import android.graphics.Color;
-import android.os.Build;
 import android.os.Build.VERSION_CODES;
 import android.os.Environment;
 import android.provider.CalendarContract;
@@ -49,15 +48,13 @@
 import android.widget.FrameLayout;
 import android.widget.ImageView;
 import android.widget.RelativeLayout;
-
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Dips;
 import com.mopub.mobileads.test.support.FileUtils;
-import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 import com.mopub.mobileads.test.support.TestMraidViewFactory;
 import com.mopub.mobileads.test.support.ThreadUtils;
 import com.mopub.mobileads.util.MraidsTest;
-
 import org.apache.http.HttpResponse;
 import org.apache.http.client.methods.HttpUriRequest;
 import org.junit.Before;
@@ -73,11 +70,9 @@
 import org.robolectric.shadows.ShadowLog;
 import org.robolectric.shadows.ShadowToast;
 
-import java.io.File;
-import java.io.FileInputStream;
+import java.io.*;
 import java.net.URI;
-import java.util.HashMap;
-import java.util.Map;
+import java.util.*;
 
 import static android.content.DialogInterface.BUTTON_NEGATIVE;
 import static android.content.DialogInterface.BUTTON_POSITIVE;
@@ -90,7 +85,7 @@
 import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.STORE_PICTURE;
 import static com.mopub.mobileads.MraidCommandStorePicture.MIME_TYPE_HEADER;
 import static com.mopub.mobileads.util.Mraids.ANDROID_CALENDAR_CONTENT_TYPE;
-import static java.io.File.separator;
+import static java.io.File.*;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
index bfe69bbd..0b414074 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
@@ -8,7 +8,6 @@
 import android.graphics.drawable.GradientDrawable;
 import android.graphics.drawable.LayerDrawable;
 import android.media.MediaPlayer;
-import android.os.Build;
 import android.os.Build.VERSION_CODES;
 import android.os.Bundle;
 import android.view.View;
@@ -16,16 +15,13 @@
 import android.webkit.WebView;
 import android.widget.ImageView;
 import android.widget.VideoView;
-
 import com.mopub.common.MoPubBrowser;
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Dips;
 import com.mopub.common.util.Drawables;
-import com.mopub.common.util.VersionCode;
 import com.mopub.mobileads.test.support.GestureUtils;
-import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.util.vast.VastCompanionAd;
 import com.mopub.mobileads.util.vast.VastVideoConfiguration;
-
 import org.apache.http.HttpRequest;
 import org.apache.maven.artifact.ant.shaded.ReflectionUtils;
 import org.junit.After;
@@ -41,9 +37,8 @@
 import org.robolectric.tester.org.apache.http.RequestMatcher;
 import org.robolectric.tester.org.apache.http.TestHttpResponse;
 
-import java.io.File;
-import java.util.ArrayList;
-import java.util.Arrays;
+import java.io.*;
+import java.util.*;
 
 import static android.media.MediaPlayer.OnPreparedListener;
 import static android.view.ViewGroup.LayoutParams.MATCH_PARENT;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
index ef0f4049..9f67e204 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
@@ -2,26 +2,17 @@
 
 import android.app.Activity;
 
-import com.mopub.common.CacheService;
-import com.mopub.nativeads.test.support.MoPubShadowBitmap;
 import com.mopub.common.test.support.SdkTestRunner;
 
-import org.apache.http.HttpRequest;
 import org.json.JSONArray;
 import org.json.JSONObject;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-import org.robolectric.tester.org.apache.http.FakeHttpLayer;
-import org.robolectric.tester.org.apache.http.RequestMatcher;
-import org.robolectric.tester.org.apache.http.TestHttpResponse;
 
 import java.util.HashMap;
 
-import static com.mopub.common.util.test.support.CommonUtils.assertHttpRequestsMade;
 import static com.mopub.nativeads.CustomEventNative.CustomEventNativeListener;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.mock;
@@ -30,7 +21,6 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(shadows={MoPubShadowBitmap.class})
 public class MoPubCustomEventNativeTest {
 
     private MoPubCustomEventNative subject;
@@ -39,7 +29,6 @@
     private CustomEventNativeListener mCustomEventNativeListener;
     private HashMap<String, String> serverExtras;
     private JSONObject fakeJsonObject;
-    private FakeHttpLayer fakeHttpLayer;
 
     @Before
     public void setUp() throws Exception {
@@ -59,50 +48,15 @@ public void setUp() throws Exception {
         serverExtras.put(CustomEventNativeAdapter.RESPONSE_BODY_KEY, fakeJsonObject.toString());
 
         mCustomEventNativeListener = mock(CustomEventNativeListener.class);
-
-        fakeHttpLayer = Robolectric.getFakeHttpLayer();
-        fakeHttpLayer.addHttpResponseRule(
-                new RequestMatcher() {
-                    @Override
-                    public boolean matches(HttpRequest request) {
-                        return true;
-                    }
-                },
-                new TestHttpResponse(200, "body")
-        );
     }
 
     @After
     public void tearDown() throws Exception {
-        CacheService.clearAndNullCaches();
         reset(mCustomEventNativeListener);
     }
 
     @Test
-    public void loadNativeAd_withValidInput_shouldDownloadImagesAndNotifyListenerOfOnNativeAdLoaded() throws Exception {
-        subject.loadNativeAd(context, mCustomEventNativeListener, localExtras, serverExtras);
-
-        assertHttpRequestsMade(null, "mainimageurl", "iconimageurl", "extraimageurl");
-
-        verify(mCustomEventNativeListener).onNativeAdLoaded(any(MoPubCustomEventNative.MoPubForwardingNativeAd.class));
-        verify(mCustomEventNativeListener, never()).onNativeAdFailed(any(NativeErrorCode.class));
-    }
-
-    @Test
-    public void loadNativeAd_withValidInput_withFailedImageDownload_shouldNotDownloadImagesAndNotifyListenerOfOnNativeAdFailed() throws Exception {
-        fakeHttpLayer.clearHttpResponseRules();
-        fakeHttpLayer.addPendingHttpResponse(500, "body");
-
-        serverExtras.put(CustomEventNativeAdapter.RESPONSE_BODY_KEY, fakeJsonObject.toString());
-
-        subject.loadNativeAd(context, mCustomEventNativeListener, localExtras, serverExtras);
-
-        verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(MoPubCustomEventNative.MoPubForwardingNativeAd.class));
-        verify(mCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.IMAGE_DOWNLOAD_FAILURE);
-    }
-
-    @Test
-    public void loadNativeAd_withInvalidResponseBody_shouldNotifyListenerOfOnNativeAdFailedAndReturn() throws Exception {
+    public void loadNativeAd_withInvalidResponseBody_shouldNotifyListenerOfOnNativeAdFailed() throws Exception {
         serverExtras.put(CustomEventNativeAdapter.RESPONSE_BODY_KEY, "{ \"bad json");
 
         subject.loadNativeAd(context, mCustomEventNativeListener, localExtras, serverExtras);
@@ -111,7 +65,7 @@ public void loadNativeAd_withInvalidResponseBody_shouldNotifyListenerOfOnNativeA
     }
 
     @Test
-    public void loadNativeAd_withNullResponseBody_shouldNotifyListenerOfOnNativeAdFailedAndReturn() throws Exception {
+    public void loadNativeAd_withNullResponseBody_shouldNotifyListenerOfOnNativeAdFailed() throws Exception {
         serverExtras.put(CustomEventNativeAdapter.RESPONSE_BODY_KEY, null);
 
         subject.loadNativeAd(context, mCustomEventNativeListener, localExtras, serverExtras);
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubForwardingNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubForwardingNativeAdTest.java
index 584ebc92..7ae673b8 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubForwardingNativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubForwardingNativeAdTest.java
@@ -3,13 +3,22 @@
 import android.app.Activity;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.test.support.CommonUtils;
+import com.mopub.nativeads.test.support.MoPubShadowBitmap;
+import com.mopub.nativeads.test.support.MoPubShadowDisplay;
 
+import org.apache.http.HttpRequest;
 import org.json.JSONArray;
 import org.json.JSONObject;
 import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+import org.robolectric.tester.org.apache.http.FakeHttpLayer;
+import org.robolectric.tester.org.apache.http.RequestMatcher;
+import org.robolectric.tester.org.apache.http.TestHttpResponse;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -21,18 +30,39 @@
 import static com.mopub.nativeads.NativeResponse.Parameter.requiredKeys;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.fest.assertions.api.Assertions.fail;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
+@Config(shadows={MoPubShadowBitmap.class, MoPubShadowDisplay.class})
 public class MoPubForwardingNativeAdTest {
 
     private JSONObject fakeJsonObject;
     private MoPubCustomEventNative.MoPubForwardingNativeAd subject;
+    private Activity context;
+    private CustomEventNative.CustomEventNativeListener mockCustomEventNativeListener;
+    private FakeHttpLayer fakeHttpLayer;
 
     @Before
     public void setUp() throws Exception {
+        context = new Activity();
+        mockCustomEventNativeListener = mock(CustomEventNative.CustomEventNativeListener.class);
         fakeJsonObject = new JSONObject();
         fakeJsonObject.put("imptracker", new JSONArray("[\"url1\", \"url2\"]"));
         fakeJsonObject.put("clktracker", "expected clicktracker");
+
+        fakeHttpLayer = Robolectric.getFakeHttpLayer();
+        fakeHttpLayer.addHttpResponseRule(
+                new RequestMatcher() {
+                    @Override
+                    public boolean matches(HttpRequest request) {
+                        return true;
+                    }
+                },
+                new TestHttpResponse(200, "body")
+        );
     }
 
     @Test
@@ -59,11 +89,12 @@ public void parameter_fromString_shouldReturnNullOnIllegalKey() throws Exception
     }
 
     @Test
-    public void constructor_whenMissingRequiredKeys_shouldThrowIllegalArgumentException() throws Exception {
+    public void loadAd_whenMissingRequiredKeys_shouldThrowIllegalArgumentException() throws Exception {
         fakeJsonObject.remove("imptracker");
 
         try {
-            subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+            subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject.toString(), mockCustomEventNativeListener);
+            subject.loadAd();
             fail("Expected IllegalArgumentException");
         } catch (IllegalArgumentException e) {
             // pass
@@ -71,11 +102,12 @@ public void constructor_whenMissingRequiredKeys_shouldThrowIllegalArgumentExcept
     }
 
     @Test
-    public void constructor_whenRequiredKeyOfWrongType_shouldThrowIllegalArgumentException() throws Exception {
+    public void loadAd_whenRequiredKeyOfWrongType_shouldThrowIllegalArgumentException() throws Exception {
         fakeJsonObject.put("imptracker", 12345);
 
         try {
-            subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+            subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject.toString(), mockCustomEventNativeListener);
+            subject.loadAd();
             fail("Expected IllegalArgumentException");
         } catch (IllegalArgumentException e) {
             // pass
@@ -83,13 +115,14 @@ public void constructor_whenRequiredKeyOfWrongType_shouldThrowIllegalArgumentExc
     }
 
     @Test
-    public void constructor_shouldSetRequiredExpectedFields() throws Exception {
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+    public void loadAd_shouldSetRequiredExpectedFields() throws Exception {
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject.toString(), mockCustomEventNativeListener);
+        subject.loadAd();
         assertThat(subject.getImpressionTrackers()).containsOnly("url1", "url2");
     }
 
     @Test
-    public void constructor_shouldSetOptionalExpectedFields() throws Exception {
+    public void loadAd_shouldSetOptionalExpectedFields() throws Exception {
         fakeJsonObject.put("title", "expected title");
         fakeJsonObject.put("text", "expected text");
         fakeJsonObject.put("mainimage", "expected mainimage");
@@ -101,7 +134,8 @@ public void constructor_shouldSetOptionalExpectedFields() throws Exception {
         fakeJsonObject.put("ctatext", "expected ctatext");
         fakeJsonObject.put("starrating", 5.0);
 
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject.toString(), mockCustomEventNativeListener);
+        subject.loadAd();
 
         assertThat(subject.getTitle()).isEqualTo("expected title");
         assertThat(subject.getText()).isEqualTo("expected text");
@@ -117,46 +151,50 @@ public void constructor_shouldSetOptionalExpectedFields() throws Exception {
     }
 
     @Test
-    public void constructor_withIntegerStarRating_shouldSetStarRating() throws Exception {
+    public void loadAd_withIntegerStarRating_shouldSetStarRating() throws Exception {
         fakeJsonObject.put("starrating", 3);
 
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject.toString(), mockCustomEventNativeListener);
+        subject.loadAd();
 
         assertThat(subject.getStarRating()).isEqualTo(3.0);
     }
 
     @Test
-    public void constructor_withStringStarRating_shouldSetStarRating() throws Exception {
+    public void loadAd_withStringStarRating_shouldSetStarRating() throws Exception {
         fakeJsonObject.put("starrating", "2.3");
 
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject.toString(), mockCustomEventNativeListener);
+        subject.loadAd();
 
         assertThat(subject.getStarRating()).isEqualTo(2.3);
     }
-    
+
     @Test
-    public void constructor_withInvalidStringStarRating_shouldNotSetStarRating() throws Exception {
+    public void loadAd_withInvalidStringStarRating_shouldNotSetStarRating() throws Exception {
         fakeJsonObject.put("starrating", "this is not a number");
 
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject.toString(), mockCustomEventNativeListener);
+        subject.loadAd();
 
         assertThat(subject.getStarRating()).isNull();
     }
 
     @Test
-    public void constructor_withInvalidlyTypedStarRating_shouldNotSetStarRating() throws Exception {
+    public void loadAd_withInvalidlyTypedStarRating_shouldNotSetStarRating() throws Exception {
         fakeJsonObject.put("starrating", new Activity());
 
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject.toString(), mockCustomEventNativeListener);
+        subject.loadAd();
 
         assertThat(subject.getStarRating()).isNull();
     }
 
     @Test
-    public void constructor_whenImpressionTrackersContainsNonStrings_willCoerceToString() throws Exception {
+    public void loadAd_whenImpressionTrackersContainsNonStrings_willCoerceToString() throws Exception {
         /**
          * At this level of abstraction, we don't actually care that these Strings resolve to valid
-         * URLs. We just want to ensure that the constructor does not throw an exception.
+         * URLs. We just want to ensure that loadAd does not throw an exception.
          */
         final JSONArray impressionTrackers = new JSONArray();
         impressionTrackers.put("url1");
@@ -164,13 +202,14 @@ public void constructor_whenImpressionTrackersContainsNonStrings_willCoerceToStr
         impressionTrackers.put(2.12);
         fakeJsonObject.put("imptracker", impressionTrackers);
 
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject.toString(), mockCustomEventNativeListener);
+        subject.loadAd();
 
         assertThat(subject.getImpressionTrackers()).containsOnly("url1", "null", "2.12");
     }
 
     @Test
-    public void constructor_shouldSetExtraFields() throws Exception {
+    public void loadAd_shouldSetExtraFields() throws Exception {
         List<Object> array = new ArrayList<Object>();
         array.add("index1");
         array.add(-10);
@@ -184,7 +223,8 @@ public void constructor_shouldSetExtraFields() throws Exception {
         fakeJsonObject.put("key3", new JSONArray(array));
         fakeJsonObject.put("key4", new JSONObject(map));
 
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject.toString(), mockCustomEventNativeListener);
+        subject.loadAd();
 
         assertThat(subject.getExtra("key1")).isEqualTo("yay json");
         assertThat(subject.getExtra("key2")).isEqualTo(5);
@@ -192,6 +232,37 @@ public void constructor_shouldSetExtraFields() throws Exception {
         assertThat((JSONObject) subject.getExtra("key4")).isEqualsToByComparingFields(new JSONObject(map));
     }
 
+    @Test
+    public void loadAd_shouldDownloadImages_shouldNotifyListenerOfOnNativeAdLoaded() throws Exception {
+        fakeJsonObject.put("mainimage", "mainimageurl");
+        fakeJsonObject.put("iconimage", "iconimageurl");
+        fakeJsonObject.put("extraimage", "extraimageurl");
+
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject.toString(), mockCustomEventNativeListener);
+        subject.loadAd();
+
+        CommonUtils.assertHttpRequestsMade(null, "mainimageurl", "iconimageurl", "extraimageurl");
+
+        verify(mockCustomEventNativeListener).onNativeAdLoaded(subject);
+        verify(mockCustomEventNativeListener, never()).onNativeAdFailed(any(NativeErrorCode.class));
+    }
+
+    @Test
+    public void loadAd_withFailedImageDownload_shouldNotDownloadImages_shouldNotifyListenerOfOnNativeAdFailed() throws Exception {
+        fakeJsonObject.put("mainimage", "mainimageurl");
+        fakeJsonObject.put("iconimage", "iconimageurl");
+        fakeJsonObject.put("extraimage", "extraimageurl");
+
+        fakeHttpLayer.clearHttpResponseRules();
+        fakeHttpLayer.addPendingHttpResponse(500, "body");
+
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject.toString(), mockCustomEventNativeListener);
+        subject.loadAd();
+
+        verify(mockCustomEventNativeListener, never()).onNativeAdLoaded(subject);
+        verify(mockCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.IMAGE_DOWNLOAD_FAILURE);
+    }
+
     @Ignore("pending")
     @Test
     public void loadMainAndIconImages_shouldAsyncLoadImages() throws Exception {
@@ -207,7 +278,8 @@ public void getExtrasImageUrls_whenExtrasContainsImages_shouldReturnImageUrls()
         fakeJsonObject.put("otherIMAGE", "image_url_2");
         fakeJsonObject.put("more filler", "ignored");
         fakeJsonObject.put("lastimage", "image_url_3");
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject.toString(), mockCustomEventNativeListener);
+        subject.loadAd();
 
         assertThat(subject.getExtrasImageUrls()).containsOnly("image_url_1", "image_url_2", "image_url_3");
     }
@@ -219,7 +291,8 @@ public void getExtrasImageUrls_whenExtrasDoesNotContainImageKeys_shouldReturnEmp
         fakeJsonObject.put("imageAtFront", "ignored");
         fakeJsonObject.put("middle_image_in_key", "ignored");
         fakeJsonObject.put("other", "ignored");
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject.toString(), mockCustomEventNativeListener);
+        subject.loadAd();
 
         assertThat(subject.getExtrasImageUrls()).isEmpty();
     }
@@ -229,7 +302,8 @@ public void getAllImageUrls_withExtraImagesAndMainAndIconImages_shouldReturnAllU
         fakeJsonObject.put("mainimage", "mainImageUrl");
         fakeJsonObject.put("iconimage", "iconImageUrl");
         fakeJsonObject.put("extraimage", "extraImageUrl");
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject.toString(), mockCustomEventNativeListener);
+        subject.loadAd();
 
         assertThat(subject.getAllImageUrls()).containsOnly(
                 "mainImageUrl",
@@ -242,7 +316,8 @@ public void getAllImageUrls_withExtraImagesAndMainAndIconImages_shouldReturnAllU
     public void getAllImageUrls_withOnlyExtrasImages_shouldNotIncludeMainOrIconImages() throws Exception {
         fakeJsonObject.put("extra1_image", "expected extra1_image");
         fakeJsonObject.put("extra2_image", "expected extra2_image");
-        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(context, fakeJsonObject.toString(), mockCustomEventNativeListener);
+        subject.loadAd();
 
         assertThat(subject.getAllImageUrls()).containsOnly("expected extra1_image", "expected extra2_image");
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeAdRendererTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeAdRendererTest.java
index 507a576d..0bcebf6d 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeAdRendererTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeAdRendererTest.java
@@ -1,7 +1,6 @@
 package com.mopub.nativeads;
 
 import android.app.Activity;
-import android.view.View;
 import android.view.ViewGroup;
 import android.widget.Button;
 import android.widget.ImageView;
@@ -10,20 +9,18 @@
 import android.widget.TextView;
 
 import com.mopub.common.DownloadResponse;
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.ResponseHeader;
 import com.mopub.common.util.Utils;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
-import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
 import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
 
 import static com.mopub.nativeads.MoPubNative.MoPubNativeListener;
-import static com.mopub.nativeads.MoPubNativeAdRenderer.NativeViewClickListener;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 
@@ -147,33 +144,6 @@ public void renderAdView_withFailedViewBinder_shouldReturnFast() {
                 "");
     }
 
-    @Test
-    public void renderAdView_whenCallToActionIsAButton_shouldAttachClickListenersToConvertViewAndCtaButton() {
-        assertThat(relativeLayout.performClick()).isFalse();
-        assertThat(callToActionView.performClick()).isFalse();
-
-        subject.renderAdView(relativeLayout, nativeResponse);
-
-        assertThat(relativeLayout.performClick()).isTrue();
-        assertThat(callToActionView.performClick()).isTrue();
-    }
-
-    @Test
-    public void renderAdView_whenCallToActionIsATextView_shouldAttachClickListenersToConvertViewOnly() {
-        relativeLayout.removeView(callToActionView);
-        callToActionView = new TextView(context);
-        callToActionView.setId((int) Utils.generateUniqueId());
-        relativeLayout.addView(callToActionView);
-
-        assertThat(relativeLayout.performClick()).isFalse();
-        assertThat(callToActionView.performClick()).isFalse();
-
-        subject.renderAdView(relativeLayout, nativeResponse);
-
-        assertThat(relativeLayout.performClick()).isTrue();
-        assertThat(callToActionView.performClick()).isFalse();
-    }
-
     @Test
     public void getOrCreateNativeViewHolder_withNoViewHolder_shouldCreateNativeViewHolder() {
         final NativeViewHolder viewHolder =
@@ -193,33 +163,6 @@ public void getOrCreateNativeViewHolder_withViewHolder_shouldNotReCreateNativeVi
                 .isEqualTo(viewHolder);
     }
 
-    // NativeViewClickListener tests
-
-    @Test
-    public void onClick_shouldQueueClickTrackerAndUrlResolutionTasks() {
-        NativeViewClickListener nativeViewClickListener = new NativeViewClickListener(nativeResponse);
-
-        Robolectric.getBackgroundScheduler().pause();
-        assertThat(Robolectric.getBackgroundScheduler().enqueuedTaskCount()).isEqualTo(0);
-        nativeViewClickListener.onClick(new View(context));
-
-        assertThat(Robolectric.getBackgroundScheduler().enqueuedTaskCount()).isEqualTo(2);
-    }
-
-    @Test
-    public void onClick_withNullDestinationUrl_shouldNotQueueUrlResolutionTask() {
-        mNativeAd.setClickDestinationUrl(null);
-
-        NativeViewClickListener nativeViewClickListener = new NativeViewClickListener(nativeResponse);
-
-        Robolectric.getBackgroundScheduler().pause();
-        assertThat(Robolectric.getBackgroundScheduler().enqueuedTaskCount()).isEqualTo(0);
-        nativeViewClickListener.onClick(new View(context));
-
-        // 1 task for async ping to click tracker
-        assertThat(Robolectric.getBackgroundScheduler().enqueuedTaskCount()).isEqualTo(1);
-    }
-
     static private void compareNativeViewHolders(final NativeViewHolder actualViewHolder,
             final NativeViewHolder expectedViewHolder) {
         assertThat(actualViewHolder.titleView).isEqualTo(expectedViewHolder.titleView);
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
index 9857b9c4..7510acf4 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
@@ -1,17 +1,15 @@
 package com.mopub.nativeads;
 
 import android.app.Activity;
-
 import com.mopub.common.DownloadTask;
 import com.mopub.common.GpsHelper;
 import com.mopub.common.GpsHelperTest;
 import com.mopub.common.SharedPreferencesHelper;
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.test.support.ShadowAsyncTasks;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
 import com.mopub.nativeads.MoPubNative.MoPubNativeEventListener;
 import com.mopub.nativeads.MoPubNative.MoPubNativeNetworkListener;
-import com.mopub.common.test.support.SdkTestRunner;
-
 import org.apache.http.client.methods.HttpGet;
 import org.junit.After;
 import org.junit.Before;
@@ -24,8 +22,8 @@
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 
-import java.util.List;
-import java.util.concurrent.Semaphore;
+import java.util.*;
+import java.util.concurrent.*;
 
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
 import static android.Manifest.permission.INTERNET;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStreamAdPlacerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStreamAdPlacerTest.java
index bd745f10..06f09512 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStreamAdPlacerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStreamAdPlacerTest.java
@@ -5,8 +5,8 @@
 import android.view.View;
 import android.view.ViewGroup;
 
-import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -344,6 +344,59 @@ public void getAdView_withConvertView_callsRenderer_addsToImpressionTracker() {
         verify(mockImpressionTracker).addView(convertView, stubNativeResponse);
     }
 
+    @Test
+    public void getAdView_shouldRemoveViewFromImpressionTracker_shouldClearPreviousNativeResponse() throws Exception {
+        NativeResponse mockNativeResponse = mock(NativeResponse.class);
+        View mockView = mock(View.class);
+        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse, mockNativeResponse, stubNativeResponse);
+        subject.handlePositioningLoad(positioning);
+        subject.handleAdsAvailable();
+        subject.setItemCount(100);
+
+        subject.getAdView(1, mockView, null);
+        verify(mockImpressionTracker).removeView(mockView);
+
+        // Second call should clear the first NativeResponse
+        subject.getAdView(3, mockView, null);
+        verify(mockImpressionTracker, times(2)).removeView(mockView);
+        verify(stubNativeResponse).clear(mockView);
+
+        // Third call should clear the second NativeResponse
+        subject.getAdView(5, mockView, null);
+        verify(mockImpressionTracker, times(3)).removeView(mockView);
+        verify(mockNativeResponse).clear(mockView);
+    }
+
+    @Test
+    public void getAdView_withNetworkImpressionTracker_shouldNotAddViewToImpressionTracker_shouldPrepareNativeResponse() throws Exception {
+        View mockView = mock(View.class);
+        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        subject.handlePositioningLoad(positioning);
+        subject.handleAdsAvailable();
+        subject.setItemCount(100);
+
+        when(stubNativeResponse.isOverridingImpressionTracker()).thenReturn(true);
+        subject.getAdView(1, mockView, null);
+
+        verify(mockImpressionTracker, never()).addView(any(View.class), any(NativeResponse.class));
+        verify(stubNativeResponse).prepare(mockView);
+    }
+
+    @Test
+    public void getAdView_withoutNetworkImpressionTracker_shouldAddViewToImpressionTracker_shouldPrepareNativeResponse() throws Exception {
+        View mockView = mock(View.class);
+        when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        subject.handlePositioningLoad(positioning);
+        subject.handleAdsAvailable();
+        subject.setItemCount(100);
+
+        when(stubNativeResponse.isOverridingImpressionTracker()).thenReturn(false);
+        subject.getAdView(1, mockView, null);
+
+        verify(mockImpressionTracker).addView(mockView, stubNativeResponse);
+        verify(stubNativeResponse).prepare(mockView);
+    }
+
     @Test
     public void destroy_shouldClearAdSource_shouldDestroyImpressionTracker_shouldResetPlacementData() {
         when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
index edd50369..4d4b3e9f 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
@@ -8,30 +8,36 @@
 import android.widget.RelativeLayout;
 import android.widget.TextView;
 
-import com.mopub.common.DownloadResponse;
-import com.mopub.common.util.Utils;
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.Utils;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Mock;
 
-import static com.mopub.nativeads.MoPubNative.MoPubNativeListener;
 import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
 public class NativeAdViewHelperTest {
     private Activity context;
     private RelativeLayout relativeLayout;
     private ViewGroup viewGroup;
-    private NativeResponse nativeResponse;
     private BaseForwardingNativeAd mNativeAd;
     private ViewBinder viewBinder;
     private TextView titleView;
     private TextView textView;
     private TextView callToActionView;
 
+    @Mock private NativeResponse mockNativeResponse1;
+    @Mock private NativeResponse mockNativeResponse2;
+    @Mock private ImpressionTracker mockImpressionTracker;
+
     @Before
     public void setUp() throws Exception {
         context = new Activity();
@@ -44,8 +50,6 @@ public void setUp() throws Exception {
         mNativeAd.setText("test text");
         mNativeAd.setCallToAction("test call to action");
 
-        nativeResponse = new NativeResponse(context, mock(DownloadResponse.class), "testId", mNativeAd, mock(MoPubNativeListener.class));
-
         titleView = new TextView(context);
         titleView.setId((int) Utils.generateUniqueId());
         textView = new TextView(context);
@@ -62,11 +66,18 @@ public void setUp() throws Exception {
                 .textId(textView.getId())
                 .callToActionId(callToActionView.getId())
                 .build();
+
+        when(mockNativeResponse1.isDestroyed()).thenReturn(false);
+        when(mockNativeResponse2.isDestroyed()).thenReturn(false);
     }
 
     @Test
     public void getAdView_shouldReturnPopulatedView() throws Exception {
-        View view = NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, nativeResponse, viewBinder, null);
+        when(mockNativeResponse1.getTitle()).thenReturn("test title");
+        when(mockNativeResponse1.getText()).thenReturn("test text");
+        when(mockNativeResponse1.getCallToAction()).thenReturn("test call to action");
+
+        View view = NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse1, viewBinder, null);
 
         assertThat(((TextView)view.findViewById(titleView.getId())).getText()).isEqualTo("test title");
         assertThat(((TextView)view.findViewById(textView.getId())).getText()).isEqualTo("test text");
@@ -77,7 +88,7 @@ public void getAdView_shouldReturnPopulatedView() throws Exception {
 
     @Test
     public void getAdView_withNullViewBinder_shouldReturnEmptyView() throws Exception {
-        View view = NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, nativeResponse, null, null);
+        View view = NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse1, null, null);
 
         assertThat(view).isNotNull();
         assertThat(view).isNotEqualTo(relativeLayout);
@@ -93,10 +104,50 @@ public void getAdView_withNullNativeResponse_shouldReturnGONEConvertView() throw
 
     @Test
     public void getAdView_withDestroyedNativeResponse_shouldReturnGONEConvertView() throws Exception {
-        nativeResponse.destroy();
-        View view = NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, nativeResponse, viewBinder, null);
+        when(mockNativeResponse1.isDestroyed()).thenReturn(true);
+        View view = NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse1, viewBinder, null);
 
         assertThat(view).isEqualTo(relativeLayout);
         assertThat(view.getVisibility()).isEqualTo(View.GONE);
     }
+    
+    @Test
+    public void getAdView_shouldRemoveViewFromImpressionTracker_shouldClearPreviousNativeResponse() throws Exception {
+        NativeAdViewHelper.sImpressionTrackerMap.put(context, mockImpressionTracker);
+
+        NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse1, viewBinder, null);
+        verify(mockImpressionTracker).removeView(relativeLayout);
+
+        // Second call should clear the first NativeResponse
+        NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse2, viewBinder, null);
+        verify(mockImpressionTracker, times(2)).removeView(relativeLayout);
+        verify(mockNativeResponse1).clear(relativeLayout);
+
+        // Third call should clear the second NativeResponse
+        NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse1, viewBinder, null);
+        verify(mockImpressionTracker, times(3)).removeView(relativeLayout);
+        verify(mockNativeResponse2).clear(relativeLayout);
+    }
+
+    @Test
+    public void getAdView_withNetworkImpressionTracker_shouldNotAddViewToImpressionTracker_shouldPrepareNativeResponse() throws Exception {
+        NativeAdViewHelper.sImpressionTrackerMap.put(context, mockImpressionTracker);
+        when(mockNativeResponse1.isOverridingImpressionTracker()).thenReturn(true);
+
+        NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse1, viewBinder, null);
+
+        verify(mockImpressionTracker, never()).addView(any(View.class), any(NativeResponse.class));
+        verify(mockNativeResponse1).prepare(relativeLayout);
+    }
+
+    @Test
+    public void getAdView_withoutNetworkImpressionTracker_shouldAddViewToImpressionTracker_shouldPrepareNativeResponse() throws Exception {
+        NativeAdViewHelper.sImpressionTrackerMap.put(context, mockImpressionTracker);
+        when(mockNativeResponse1.isOverridingImpressionTracker()).thenReturn(false);
+
+        NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse1, viewBinder, null);
+
+        verify(mockImpressionTracker).addView(relativeLayout, mockNativeResponse1);
+        verify(mockNativeResponse1).prepare(relativeLayout);
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java
index 4718004f..a1cef1c5 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java
@@ -3,12 +3,15 @@
 import android.app.Activity;
 import android.view.View;
 import android.view.ViewGroup;
+import android.widget.Button;
 import android.widget.LinearLayout;
+import android.widget.RelativeLayout;
 
 import com.mopub.common.DownloadResponse;
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.ResponseHeader;
+import com.mopub.common.util.Utils;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
-import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.Before;
 import org.junit.Ignore;
@@ -22,10 +25,12 @@
 
 import static com.mopub.nativeads.MoPubNative.EMPTY_EVENT_LISTENER;
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
 public class NativeResponseTest {
@@ -81,6 +86,13 @@ public void handleClick(final View view) {
         subjectWMockBaseNativeAd = new NativeResponse(context, downloadResponse, "adunit_id", mMockNativeAd, moPubNativeListener);
     }
 
+    @Test
+    public void constructor_shouldSetNativeEventListenerOnNativeAdInterface() {
+        reset(mMockNativeAd);
+        subject = new NativeResponse(context, downloadResponse, "adunit_id", mMockNativeAd, moPubNativeListener);
+        verify(mMockNativeAd).setNativeEventListener(any(BaseForwardingNativeAd.NativeEventListener.class));
+    }
+
     @Test
     public void getTitle_shouldReturnTitleFromBaseNativeAd() {
         assertThat(subject.getTitle()).isEqualTo("title");
@@ -147,23 +159,48 @@ public void getClickTracker_shouldReturnMoPubClickTracker() {
     }
 
     @Test
-    public void prepareImpression_shouldCallPrepareImpressionOnBaseNativeAd() {
-        subjectWMockBaseNativeAd.prepareImpression(view);
-        verify(mMockNativeAd).prepareImpression(view);
+    public void prepare_shouldCallPrepareOnBaseNativeAd() {
+        subjectWMockBaseNativeAd.prepare(view);
+        verify(mMockNativeAd).prepare(view);
     }
 
     @Test
-    public void prepareImpression_whenDestroyed_shouldReturnFast() {
+    public void prepare_whenDestroyed_shouldReturnFast() {
         subjectWMockBaseNativeAd.destroy();
-        subjectWMockBaseNativeAd.prepareImpression(view);
-        verify(mMockNativeAd, never()).prepareImpression(view);
+        subjectWMockBaseNativeAd.prepare(view);
+        verify(mMockNativeAd, never()).prepare(view);
+    }
+    
+    @Test
+    public void prepare_withOverridingeClickTracker_shouldNotSetOnClickListener() throws Exception {
+        when(mMockNativeAd.isOverridingClickTracker()).thenReturn(true);
+        View view = mock(View.class);
+        subjectWMockBaseNativeAd.prepare(view);
+        verify(view, never()).setOnClickListener(any(NativeResponse.NativeViewClickListener.class));
+    }
+
+    @Test
+    public void prepare_withoutOverridingClickTracker_shouldSetOnClickListener() throws Exception {
+        when(mMockNativeAd.isOverridingClickTracker()).thenReturn(false);
+        View view = mock(View.class);
+        subjectWMockBaseNativeAd.prepare(view);
+        verify(view).setOnClickListener(any(NativeResponse.NativeViewClickListener.class));
     }
 
     @Test
-    public void prepareImpression_whenAlreadyImpressed_shouldReturnFast() {
-        subjectWMockBaseNativeAd.setRecordedImpression(true);
-        subjectWMockBaseNativeAd.prepareImpression(view);
-        verify(mMockNativeAd, never()).prepareImpression(view);
+    public void prepare_shouldAttachClickListenersToViewTree() {
+        RelativeLayout relativeLayout = new RelativeLayout(context);
+        Button callToActionView = new Button(context);
+        callToActionView.setId((int) Utils.generateUniqueId());
+        relativeLayout.addView(callToActionView);
+
+        assertThat(relativeLayout.performClick()).isFalse();
+        assertThat(callToActionView.performClick()).isFalse();
+
+        subject.prepare(relativeLayout);
+
+        assertThat(relativeLayout.performClick()).isTrue();
+        assertThat(callToActionView.performClick()).isTrue();
     }
 
     @Test
@@ -273,6 +310,17 @@ public void destroy_shouldSetMoPubNativeEventListenerToEmptyMoPubNativeListener(
         assertThat(subjectWMockBaseNativeAd.getMoPubNativeEventListener()).isSameAs(EMPTY_EVENT_LISTENER);
     }
 
+    // NativeViewClickListener tests
+    @Test
+    public void NativeViewClickListener_onClick_shouldQueueClickTrackerAndUrlResolutionTasks() {
+        subject = mock(NativeResponse.class);
+        NativeResponse.NativeViewClickListener nativeViewClickListener = subject.new NativeViewClickListener();
+
+        View view = new View(context);
+        nativeViewClickListener.onClick(view);
+        verify(subject).handleClick(view);
+    }
+
     @Ignore("pending")
     @Test
     public void loadExtrasImage_shouldAsyncLoadImages() {
