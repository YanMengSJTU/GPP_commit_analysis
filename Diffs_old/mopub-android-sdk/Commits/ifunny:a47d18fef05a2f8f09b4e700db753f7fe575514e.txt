diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/BaseNativeAd.java b/mopub-sdk/src/main/java/com/mopub/nativeads/BaseNativeAd.java
index d7a41dec..8290d01a 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/BaseNativeAd.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/BaseNativeAd.java
@@ -1,5 +1,6 @@
 package com.mopub.nativeads;
 
+import android.support.annotation.CallSuper;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.view.View;
@@ -7,7 +8,6 @@
 import com.mopub.common.Preconditions;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.nativeads.events.NativeAdEventsObserver;
-import com.mopub.nativeads.events.NativeAdType;
 
 import org.json.JSONArray;
 import org.json.JSONException;
@@ -22,171 +22,180 @@
  */
 public abstract class BaseNativeAd {
 
-    public interface NativeEventListener {
-        void onAdImpressed();
-        void onAdClicked();
-        void onAdRequested();
-        void onAdLoaded();
-    }
-
-    @NonNull final private Set<String> mImpressionTrackers;
-    @NonNull final private Set<String> mClickTrackers;
-    @Nullable private NativeEventListener mNativeEventListener;
-
-    private NativeAdType mNativeAdType;
-
-    protected BaseNativeAd() {
-        mImpressionTrackers = new HashSet<String>();
-        mClickTrackers = new HashSet<String>();
-    }
-
-    // Lifecycle Handlers
-    /**
-     * Your {@link BaseNativeAd} subclass should implement this method if the network requires the developer
-     * to prepare state for recording an impression or click before a view is rendered to screen.
-     *
-     * This method is optional.
-     */
-    public abstract void prepare(@NonNull final View view);
-
-    /**
-     * Your {@link BaseNativeAd} subclass should implement this method if the network requires the developer
-     * to reset or clear state of the native ad after it goes off screen and before it is rendered
-     * again.
-     *
-     * This method is optional.
-     */
-    public abstract void clear(@NonNull final View view);
-
-    /**
-     * Your {@link BaseNativeAd} subclass should implement this method if the network requires the developer
-     * to destroy or cleanup their native ad when they are permanently finished with it.
-     *
-     * This method is optional.
-     */
-    public abstract void destroy();
-
-    public void truncate(){
-
-    }
-
-    public void setNativeEventListener(
-            @Nullable final NativeEventListener nativeEventListener) {
-        mNativeEventListener = nativeEventListener;
-    }
-
-    // Event Notifiers
-    /**
-     * Notifies the SDK that the ad has been shown. This will cause the SDK to record an impression
-     * for the ad. This method must be called when the native ad is impressed in order for the
-     * MoPub impression trackers to fire correctly.
-     */
-    protected final void notifyAdImpressed() {
-        if (mNativeEventListener != null) {
-            mNativeEventListener.onAdImpressed();
-        }
-	    NativeAdEventsObserver.instance().onAdImpressed(getNativeAdType());
-    }
-
-    /**
-     * Notifies the SDK that the user has clicked the ad. This will cause the SDK to record an
-     * click for the ad. This method must be called when the native ad is clicked in order for the
-     * MoPub click trackers to fire correctly.
-     */
-    protected final void notifyAdClicked() {
-        if (mNativeEventListener != null) {
-            mNativeEventListener.onAdClicked();
-        }
-	    NativeAdEventsObserver.instance().onAdClicked(getNativeAdType());
-    }
+	public interface NativeEventListener {
+		void onAdImpressed();
+		void onAdClicked();
+	}
+
+	@NonNull
+	final private Set<String> mImpressionTrackers;
+	@NonNull
+	final private Set<String> mClickTrackers;
+	@Nullable
+	private NativeEventListener mNativeEventListener;
+	private CustomEventNative eventNative;
+
+	protected BaseNativeAd() {
+		mImpressionTrackers = new HashSet<String>();
+		mClickTrackers = new HashSet<String>();
+	}
+
+	// Lifecycle Handlers
+
+	/**
+	 * Your {@link BaseNativeAd} subclass should implement this method if the network requires the developer
+	 * to prepare state for recording an impression or click before a view is rendered to screen.
+	 * <p/>
+	 * This method is optional.
+	 */
+	public abstract void prepare(@NonNull final View view);
+
+	/**
+	 * Your {@link BaseNativeAd} subclass should implement this method if the network requires the developer
+	 * to reset or clear state of the native ad after it goes off screen and before it is rendered
+	 * again.
+	 * <p/>
+	 * This method is optional.
+	 */
+	public abstract void clear(@NonNull final View view);
+
+	/**
+	 * Your {@link BaseNativeAd} subclass should implement this method if the network requires the developer
+	 * to destroy or cleanup their native ad when they are permanently finished with it.
+	 * <p/>
+	 * This method is optional.
+	 */
+	public abstract void destroy();
+
+	@CallSuper
+	protected void loadAd(){
+
+	}
+
+	public void truncate() {
+
+	}
+
+	public void setNativeEventListener(
+			@Nullable final NativeEventListener nativeEventListener) {
+		mNativeEventListener = nativeEventListener;
+	}
+
+
+	// Event Notifiers
+
 
 	protected final void notifyAdLoaded() {
+		eventNative.notifyAdLoaded(this);
+	}
+
+	protected final void notifyLoadFailed(NativeErrorCode errorCode){
+		eventNative.notifyLoadFailed(errorCode);
+	}
+
+	protected final void notifyAdRequested() {
+		eventNative.notifyAdRequested();
+	}
+
+	/**
+	 * Notifies the SDK that the ad has been shown. This will cause the SDK to record an impression
+	 * for the ad. This method must be called when the native ad is impressed in order for the
+	 * MoPub impression trackers to fire correctly.
+	 */
+	protected final void notifyAdImpressed() {
 		if (mNativeEventListener != null) {
-			mNativeEventListener.onAdLoaded();
+			mNativeEventListener.onAdImpressed();
 		}
-		NativeAdEventsObserver.instance().onAdLoaded(getNativeAdType());
+		NativeAdEventsObserver.instance().onAdImpressed(eventNative.getNativeAdType());
 	}
 
-	protected final void notifyAdRequested() {
+	/**
+	 * Notifies the SDK that the user has clicked the ad. This will cause the SDK to record an
+	 * click for the ad. This method must be called when the native ad is clicked in order for the
+	 * MoPub click trackers to fire correctly.
+	 */
+	protected final void notifyAdClicked() {
 		if (mNativeEventListener != null) {
-			mNativeEventListener.onAdRequested();
+			mNativeEventListener.onAdClicked();
+		}
+		NativeAdEventsObserver.instance().onAdClicked(eventNative.getNativeAdType());
+	}
+
+
+
+	final protected void addImpressionTrackers(final Object impressionTrackers) throws ClassCastException {
+		if (!(impressionTrackers instanceof JSONArray)) {
+			throw new ClassCastException("Expected impression trackers of type JSONArray.");
+		}
+
+		final JSONArray trackers = (JSONArray) impressionTrackers;
+		for (int i = 0; i < trackers.length(); i++) {
+			try {
+				addImpressionTracker(trackers.getString(i));
+			} catch (JSONException e) {
+				// This will only occur if we access a non-existent index in JSONArray.
+				MoPubLog.d("Unable to parse impression trackers.");
+			}
+		}
+	}
+
+	final protected void addClickTrackers(final Object clickTrackers) throws ClassCastException {
+		if (!(clickTrackers instanceof JSONArray)) {
+			throw new ClassCastException("Expected click trackers of type JSONArray.");
+		}
+
+		final JSONArray trackers = (JSONArray) clickTrackers;
+		for (int i = 0; i < trackers.length(); i++) {
+			try {
+				addClickTracker(trackers.getString(i));
+			} catch (JSONException e) {
+				// This will only occur if we access a non-existent index in JSONArray.
+				MoPubLog.d("Unable to parse click trackers.");
+			}
+		}
+	}
+
+	final public void addImpressionTracker(@NonNull final String url) {
+		if (!Preconditions.NoThrow.checkNotNull(url, "impressionTracker url is not allowed to be null")) {
+			return;
+		}
+		mImpressionTrackers.add(url);
+	}
+
+	final public void addClickTracker(@NonNull final String url) {
+		if (!Preconditions.NoThrow.checkNotNull(url, "clickTracker url is not allowed to be null")) {
+			return;
 		}
-		NativeAdEventsObserver.instance().onAdRequested(getNativeAdType());
-	}
-
-    final protected void addImpressionTrackers(final Object impressionTrackers) throws ClassCastException {
-        if (!(impressionTrackers instanceof JSONArray)) {
-            throw new ClassCastException("Expected impression trackers of type JSONArray.");
-        }
-
-        final JSONArray trackers = (JSONArray) impressionTrackers;
-        for (int i = 0; i < trackers.length(); i++) {
-            try {
-                addImpressionTracker(trackers.getString(i));
-            } catch (JSONException e) {
-                // This will only occur if we access a non-existent index in JSONArray.
-                MoPubLog.d("Unable to parse impression trackers.");
-            }
-        }
-    }
-
-    final protected void addClickTrackers(final Object clickTrackers) throws ClassCastException {
-        if (!(clickTrackers instanceof JSONArray)) {
-            throw new ClassCastException("Expected click trackers of type JSONArray.");
-        }
-
-        final JSONArray trackers = (JSONArray) clickTrackers;
-        for (int i = 0; i < trackers.length(); i++) {
-            try {
-                addClickTracker(trackers.getString(i));
-            } catch (JSONException e) {
-                // This will only occur if we access a non-existent index in JSONArray.
-                MoPubLog.d("Unable to parse click trackers.");
-            }
-        }
-    }
-
-    final public void addImpressionTracker(@NonNull final String url) {
-        if (!Preconditions.NoThrow.checkNotNull(url, "impressionTracker url is not allowed to be null")) {
-            return;
-        }
-        mImpressionTrackers.add(url);
-    }
-
-    final public void addClickTracker(@NonNull final String url) {
-        if (!Preconditions.NoThrow.checkNotNull(url, "clickTracker url is not allowed to be null")) {
-            return;
-        }
-        mClickTrackers.add(url);
-    }
-
-    /**
-     * Returns a Set<String> of all impression trackers associated with this native ad. Note that
-     * network requests will automatically be made to each of these impression trackers when the
-     * native ad is display on screen. See {@link StaticNativeAd#getImpressionMinPercentageViewed}
-     * and {@link StaticNativeAd#getImpressionMinTimeViewed()} for relevant
-     * impression-tracking parameters.
-     */
-    @NonNull
-    Set<String> getImpressionTrackers() {
-        return new HashSet<String>(mImpressionTrackers);
-    }
-
-    /**
-     * Returns a Set<String> of all click trackers associated with this native ad. Note that
-     * network requests will automatically be made to each of these click trackers when the
-     * native ad is clicked.
-     */
-    @NonNull
-    Set<String> getClickTrackers() {
-        return new HashSet<String>(mClickTrackers);
-    }
-
-	public NativeAdType getNativeAdType() {
-		return mNativeAdType;
-	}
-
-	public void setNativeAdType(NativeAdType nativeAdType) {
-		mNativeAdType = nativeAdType;
+		mClickTrackers.add(url);
+	}
+
+	/**
+	 * Returns a Set<String> of all impression trackers associated with this native ad. Note that
+	 * network requests will automatically be made to each of these impression trackers when the
+	 * native ad is display on screen. See {@link StaticNativeAd#getImpressionMinPercentageViewed}
+	 * and {@link StaticNativeAd#getImpressionMinTimeViewed()} for relevant
+	 * impression-tracking parameters.
+	 */
+	@NonNull
+	Set<String> getImpressionTrackers() {
+		return new HashSet<String>(mImpressionTrackers);
+	}
+
+	/**
+	 * Returns a Set<String> of all click trackers associated with this native ad. Note that
+	 * network requests will automatically be made to each of these click trackers when the
+	 * native ad is clicked.
+	 */
+	@NonNull
+	Set<String> getClickTrackers() {
+		return new HashSet<String>(mClickTrackers);
+	}
+
+	public CustomEventNative getEventNative() {
+		return eventNative;
+	}
+
+	public void setEventNative(CustomEventNative eventNative) {
+		this.eventNative = eventNative;
 	}
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java
index 5f8a1d35..23c04bd2 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java
@@ -3,6 +3,9 @@
 import android.app.Activity;
 import android.support.annotation.NonNull;
 
+import com.mopub.nativeads.events.NativeAdEventsObserver;
+import com.mopub.nativeads.events.NativeAdType;
+
 import java.util.Map;
 
 /**
@@ -14,6 +17,10 @@
  * needed and invoke its {@link #loadNativeAd} method.
  */
 public abstract class CustomEventNative {
+
+    private CustomEventNative.CustomEventNativeListener mCustomEventNativeListener;
+    private NativeAdType mNativeAdType = NativeAdType.Mopub;
+
     /**
      * When the MoPub SDK receives a response indicating it should load a custom event, it will send
      * this message to your custom event class. Your implementation of this method can either load a
@@ -54,4 +61,34 @@ protected abstract void loadNativeAd(@NonNull final Activity activity,
          */
         void onNativeAdFailed(NativeErrorCode errorCode);
     }
+
+    public final void setCustomEventNativeListener(CustomEventNative.CustomEventNativeListener
+                                                           customEventNativeListener) {
+        this.mCustomEventNativeListener = customEventNativeListener;
+    }
+
+    protected final CustomEventNative.CustomEventNativeListener getCustomEventNativeListener() {
+        return mCustomEventNativeListener;
+    }
+
+    protected final void notifyAdLoaded(BaseNativeAd baseNativeAd) {
+        mCustomEventNativeListener.onNativeAdLoaded(baseNativeAd);
+        NativeAdEventsObserver.instance().onAdLoaded(mNativeAdType);
+    }
+
+    protected final void notifyLoadFailed(NativeErrorCode errorCode){
+        mCustomEventNativeListener.onNativeAdFailed(errorCode);
+    }
+
+    protected final void notifyAdRequested() {
+        NativeAdEventsObserver.instance().onAdRequested(mNativeAdType);
+    }
+
+    public NativeAdType getNativeAdType() {
+        return mNativeAdType;
+    }
+
+    public void setNativeAdType(NativeAdType nativeAdType) {
+        mNativeAdType = nativeAdType;
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
index 47f19090..936858c1 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
@@ -9,9 +9,9 @@
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.nativeads.NativeImageHelper.ImageListener;
+import com.mopub.nativeads.events.NativeAdType;
 
 import org.json.JSONArray;
-import org.json.JSONException;
 import org.json.JSONObject;
 
 import java.util.ArrayList;
@@ -33,11 +33,13 @@ protected void loadNativeAd(@NonNull final Activity activity,
             @NonNull final CustomEventNativeListener customEventNativeListener,
             @NonNull final Map<String, Object> localExtras,
             @NonNull final Map<String, String> serverExtras) {
+        setCustomEventNativeListener(customEventNativeListener);
+        setNativeAdType(NativeAdType.Mopub);
 
         Object json = localExtras.get(JSON_BODY_KEY);
         // null or non-JSONObjects should not be passed in localExtras as JSON_BODY_KEY
         if (!(json instanceof JSONObject)) {
-            customEventNativeListener.onNativeAdFailed(NativeErrorCode.INVALID_RESPONSE);
+            notifyLoadFailed(NativeErrorCode.INVALID_RESPONSE);
             return;
         }
 
@@ -46,12 +48,12 @@ protected void loadNativeAd(@NonNull final Activity activity,
                         (JSONObject) json,
                         new ImpressionTracker(activity),
                         new NativeClickHandler(activity),
-                        customEventNativeListener);
+                        this);
 
         try {
             moPubStaticNativeAd.loadAd();
         } catch (IllegalArgumentException e) {
-            customEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
+            notifyLoadFailed(NativeErrorCode.UNSPECIFIED);
         }
     }
 
@@ -105,7 +107,6 @@ static Parameter from(@NonNull final String name) {
         static final String PRIVACY_INFORMATION_CLICKTHROUGH_URL = "https://www.mopub.com/optout";
 
         @NonNull private final Context mContext;
-        @NonNull private final CustomEventNativeListener mCustomEventNativeListener;
         @NonNull private final JSONObject mJsonObject;
         @NonNull private final ImpressionTracker mImpressionTracker;
         @NonNull private final NativeClickHandler mNativeClickHandler;
@@ -114,19 +115,22 @@ static Parameter from(@NonNull final String name) {
                 @NonNull final JSONObject jsonBody,
                 @NonNull final ImpressionTracker impressionTracker,
                 @NonNull final NativeClickHandler nativeClickHandler,
-                @NonNull final CustomEventNativeListener customEventNativeListener) {
+                @NonNull final CustomEventNative customEventNative) {
             mJsonObject = jsonBody;
             mContext = context.getApplicationContext();
             mImpressionTracker = impressionTracker;
             mNativeClickHandler = nativeClickHandler;
-            mCustomEventNativeListener = customEventNativeListener;
+            setEventNative(customEventNative);
         }
 
-        void loadAd() throws IllegalArgumentException {
+
+        protected void loadAd() throws IllegalArgumentException {
             if (!containsRequiredKeys(mJsonObject)) {
                 throw new IllegalArgumentException("JSONObject did not contain required keys.");
             }
 
+            super.loadAd();
+
             final Iterator<String> keys = mJsonObject.keys();
             while (keys.hasNext()) {
                 final String key = keys.next();
@@ -147,12 +151,12 @@ void loadAd() throws IllegalArgumentException {
             preCacheImages(mContext, getAllImageUrls(), new ImageListener() {
                 @Override
                 public void onImagesCached() {
-                    mCustomEventNativeListener.onNativeAdLoaded(MoPubStaticNativeAd.this);
+                    notifyAdLoaded();
                 }
 
                 @Override
                 public void onImagesFailedToCache(final NativeErrorCode errorCode) {
-                    mCustomEventNativeListener.onNativeAdFailed(errorCode);
+                    notifyLoadFailed(errorCode);
                 }
             });
         }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
index 7a439195..e1409e0e 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
@@ -28,6 +28,7 @@
 import com.mopub.mobileads.VideoViewabilityTracker;
 import com.mopub.mobileads.factories.VastManagerFactory;
 import com.mopub.nativeads.NativeVideoController.NativeVideoProgressRunnable;
+import com.mopub.nativeads.events.NativeAdType;
 import com.mopub.network.TrackingRequest;
 
 import org.json.JSONArray;
@@ -60,10 +61,13 @@ protected void loadNativeAd(@NonNull final Activity activity,
             @NonNull final CustomEventNativeListener customEventNativeListener,
             @NonNull final Map<String, Object> localExtras,
             @NonNull final Map<String, String> serverExtras) {
+        setCustomEventNativeListener(customEventNativeListener);
+        setNativeAdType(NativeAdType.Mopub);
+
         final Object json = localExtras.get(JSON_BODY_KEY);
         // null or non-JSONObjects should not be passed in localExtras as JSON_BODY_KEY
         if (!(json instanceof JSONObject)) {
-            customEventNativeListener.onNativeAdFailed(NativeErrorCode.INVALID_RESPONSE);
+            notifyLoadFailed(NativeErrorCode.INVALID_RESPONSE);
             return;
         }
 
@@ -73,7 +77,7 @@ protected void loadNativeAd(@NonNull final Activity activity,
 
         final VideoResponseHeaders videoResponseHeaders = new VideoResponseHeaders(serverExtras);
         if (!videoResponseHeaders.hasValidHeaders()) {
-            customEventNativeListener.onNativeAdFailed(NativeErrorCode.INVALID_RESPONSE);
+            notifyLoadFailed(NativeErrorCode.INVALID_RESPONSE);
             return;
         }
 
@@ -82,18 +86,18 @@ protected void loadNativeAd(@NonNull final Activity activity,
         // Ensure click tracking url is a non-empty String
         if (!(clickTrackingUrlFromHeaderObject instanceof String) ||
                 TextUtils.isEmpty((String) clickTrackingUrlFromHeaderObject)) {
-            customEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
+            notifyLoadFailed(NativeErrorCode.UNSPECIFIED);
             return;
         }
 
         final String clickTrackingUrlFromHeader = (String) clickTrackingUrlFromHeaderObject;
         final MoPubVideoNativeAd videoNativeAd = new MoPubVideoNativeAd(activity, (JSONObject) json,
-                customEventNativeListener, videoResponseHeaders, eventDetails,
+                this, videoResponseHeaders, eventDetails,
                 clickTrackingUrlFromHeader);
         try {
             videoNativeAd.loadAd();
         } catch (IllegalArgumentException e) {
-            customEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
+            notifyLoadFailed(NativeErrorCode.UNSPECIFIED);
         }
     }
 
@@ -158,7 +162,6 @@ static Parameter from(@NonNull final String name) {
         @NonNull private VideoState mVideoState;
         @NonNull private final VisibilityTracker mVideoVisibleTracking;
         @NonNull private final String mMoPubClickTrackingUrl;
-        @NonNull private final CustomEventNativeListener mCustomEventNativeListener;
         @NonNull private final VideoResponseHeaders mVideoResponseHeaders;
         @NonNull private final NativeVideoControllerFactory mNativeVideoControllerFactory;
         @Nullable private NativeVideoController mNativeVideoController;
@@ -187,11 +190,11 @@ static Parameter from(@NonNull final String name) {
         public MoPubVideoNativeAd(
                 @NonNull final Activity activity,
                 @NonNull final JSONObject jsonObject,
-                @NonNull final CustomEventNativeListener customEventNativeListener,
+                @NonNull final CustomEventNative customEventNative,
                 @NonNull final VideoResponseHeaders videoResponseHeaders,
                 @Nullable final EventDetails eventDetails,
                 @NonNull final String clickTrackingUrl) {
-            this(activity, jsonObject, customEventNativeListener, videoResponseHeaders,
+            this(activity, jsonObject, customEventNative, videoResponseHeaders,
                     new VisibilityTracker(activity), new NativeVideoControllerFactory(),
                     eventDetails, clickTrackingUrl, VastManagerFactory.create(activity.getApplicationContext(), false));
         }
@@ -200,7 +203,7 @@ public MoPubVideoNativeAd(
         MoPubVideoNativeAd(
                 @NonNull final Activity activity,
                 @NonNull final JSONObject jsonObject,
-                @NonNull final CustomEventNativeListener customEventNativeListener,
+                @NonNull final CustomEventNative customEventNative,
                 @NonNull final VideoResponseHeaders videoResponseHeaders,
                 @NonNull final VisibilityTracker visibilityTracker,
                 @NonNull final NativeVideoControllerFactory nativeVideoControllerFactory,
@@ -209,16 +212,15 @@ public MoPubVideoNativeAd(
                 @NonNull final VastManager vastManager) {
             Preconditions.checkNotNull(activity);
             Preconditions.checkNotNull(jsonObject);
-            Preconditions.checkNotNull(customEventNativeListener);
+            Preconditions.checkNotNull(customEventNative);
             Preconditions.checkNotNull(videoResponseHeaders);
             Preconditions.checkNotNull(visibilityTracker);
             Preconditions.checkNotNull(nativeVideoControllerFactory);
             Preconditions.checkNotNull(clickTrackingUrl);
             Preconditions.checkNotNull(vastManager);
-
+            setEventNative(customEventNative);
             mContext = activity.getApplicationContext();
             mJsonObject = jsonObject;
-            mCustomEventNativeListener = customEventNativeListener;
             mVideoResponseHeaders = videoResponseHeaders;
 
             mNativeVideoControllerFactory = nativeVideoControllerFactory;
@@ -251,11 +253,13 @@ public void onVisibilityChanged(final List<View> visibleViews,
             mVastManager = vastManager;
         }
 
-        void loadAd() throws IllegalArgumentException {
+        @Override
+        protected void loadAd() throws IllegalArgumentException {
             if (!containsRequiredKeys(mJsonObject)) {
                 throw new IllegalArgumentException("JSONObject did not contain required keys.");
             }
 
+            super.loadAd();
             final Iterator<String> keys = mJsonObject.keys();
             while (keys.hasNext()) {
                 final String key = keys.next();
@@ -285,7 +289,7 @@ public void onImagesCached() {
 
                 @Override
                 public void onImagesFailedToCache(final NativeErrorCode errorCode) {
-                    mCustomEventNativeListener.onNativeAdFailed(errorCode);
+                    notifyLoadFailed(errorCode);
                 }
             });
         }
@@ -293,7 +297,7 @@ public void onImagesFailedToCache(final NativeErrorCode errorCode) {
         @Override
         public void onVastVideoConfigurationPrepared(@Nullable VastVideoConfig vastVideoConfig) {
             if (vastVideoConfig == null) {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.INVALID_RESPONSE);
+                notifyLoadFailed(NativeErrorCode.INVALID_RESPONSE);
                 return;
             }
 
@@ -342,7 +346,7 @@ public void onVastVideoConfigurationPrepared(@Nullable VastVideoConfig vastVideo
             mNativeVideoController = mNativeVideoControllerFactory.createForId(
                     mId, mContext, visibilityTrackingEvents, mVastVideoConfig, mEventDetails);
 
-            mCustomEventNativeListener.onNativeAdLoaded(this);
+            notifyAdLoaded();
         }
 
         private boolean containsRequiredKeys(@NonNull final JSONObject jsonObject) {
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAd.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAd.java
index 9c32aebe..9347e32c 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAd.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAd.java
@@ -92,16 +92,6 @@ public void onAdClicked() {
                 handleClick(null);
             }
 
-            @Override
-            public void onAdRequested() {
-
-            }
-
-            @Override
-            public void onAdLoaded() {
-
-            }
-
         });
 
         mMoPubAdRenderer = moPubAdRenderer;
