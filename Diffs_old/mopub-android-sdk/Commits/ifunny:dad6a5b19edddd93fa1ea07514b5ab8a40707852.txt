diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/BaseForwardingNativeAd.java b/mopub-sdk/src/main/java/com/mopub/nativeads/BaseForwardingNativeAd.java
index b30a1677..c704ed89 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/BaseForwardingNativeAd.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/BaseForwardingNativeAd.java
@@ -312,7 +312,7 @@ final void setOverridingClickTracker(final boolean isOverridingClickTracker) {
      * This method is optional.
      */
     @Override
-    public void prepare(@Nullable final View view) { }
+    public void prepare(@Nullable final View view,@Nullable ViewBinder viewBinder) { }
 
     /**
      * Your base native ad subclass should implement this method if the network requires the developer
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
index 5e34b392..314dda0e 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
@@ -170,7 +170,7 @@ void handleAdRemoved(final int position) {
      * @deprecated in version 3.9.0, use {@link #registerViewBinder(ViewBinder)} instead.
      */
     @Deprecated
-    public final void registerAdRenderer(@NonNull final MoPubAdRenderer adRenderer) {
+    public final void registerAdRenderer(@NonNull final MoPubNativeAdRenderer adRenderer) {
         if (!Preconditions.NoThrow.checkNotNull(
                 adRenderer, "Tried to set a null ad renderer on the placer.")) {
             return;
@@ -239,7 +239,7 @@ public void loadAds(@NonNull final String adUnitId) {
      */
     public void loadAds(@NonNull final String adUnitId,
             @Nullable final RequestParameters requestParameters) {
-        mStreamAdPlacer.loadAds(adUnitId, requestParameters);
+        mStreamAdPlacer.loadAds(adUnitId, requestParameters,null);
     }
 
     /**
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdRenderer.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdRenderer.java
index e48869ef..d35adf86 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdRenderer.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdRenderer.java
@@ -54,4 +54,8 @@ public void renderAdView(@NonNull final View view,
         nativeViewHolder.updateExtras(nativeResponse, mViewBinder);
         nativeViewHolder.setViewVisibility(VISIBLE);
     }
+
+    public ViewBinder getViewBinder(){
+        return mViewBinder;
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
index ce49d3d7..3f4baadd 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
@@ -224,7 +224,7 @@ public void loadAds(@NonNull String adUnitId) {
      * @param requestParameters Targeting information to pass to the ad server.
      */
     public void loadAds(@NonNull String adUnitId, @Nullable RequestParameters requestParameters) {
-        mStreamAdPlacer.loadAds(adUnitId, requestParameters);
+        mStreamAdPlacer.loadAds(adUnitId, requestParameters,null);
     }
 
     public static int computeScrollOffset(@NonNull final LinearLayoutManager linearLayoutManager,
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
index 6f87dd9b..00de00c9 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
@@ -88,7 +88,7 @@ public void onAdRemoved(final int position) {
 
 	private int adViewType = DEFAULT_AD_VIEW_TYPE;
 	@Nullable
-	private MoPubAdRenderer mAdRenderer;
+	private MoPubNativeAdRenderer mAdRenderer;
 	@Nullable
 	private String mAdUnitId;
 
@@ -217,11 +217,11 @@ public void run() {
 	 *
 	 * @param adRenderer The ad renderer.
 	 */
-	public void registerAdRenderer(@NonNull final MoPubAdRenderer adRenderer) {
+	public void registerAdRenderer(@NonNull final MoPubNativeAdRenderer adRenderer) {
 		registerAdRenderer(adRenderer, -1);
 	}
 
-	public void registerAdRenderer(@NonNull final MoPubAdRenderer adRenderer, int viewType) {
+	public void registerAdRenderer(@NonNull final MoPubNativeAdRenderer adRenderer, int viewType) {
 		if (!NoThrow.checkNotNull(adRenderer, "Cannot register a null adRenderer")) {
 			return;
 		}
@@ -893,6 +893,6 @@ public void prepareNativeResponse(@NonNull final NativeResponse nativeResponse,
 		if (!nativeResponse.isOverridingImpressionTracker()) {
 			mImpressionTracker.addView(view, nativeResponse);
 		}
-		nativeResponse.prepare(view);
+		nativeResponse.prepare(view,mAdRenderer.getViewBinder());
 	}
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdInterface.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdInterface.java
index 14887191..e6d420db 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdInterface.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdInterface.java
@@ -60,7 +60,7 @@
     void setNativeEventListener(@Nullable final NativeEventListener nativeEventListener);
 
     // Event Handlers
-    void prepare(@NonNull final View view);
+    void prepare(@NonNull final View view,@Nullable ViewBinder viewBinder);
     void recordImpression();
     void handleClick(@Nullable final View view);
     void clear(@NonNull final View view);
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
index 2f1c838c..326b9623 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
@@ -89,7 +89,7 @@ private static void prepareNativeResponse(@NonNull final Context context,
         if (!nativeResponse.isOverridingImpressionTracker()) {
             getImpressionTracker(context).addView(view, nativeResponse);
         }
-        nativeResponse.prepare(view);
+        nativeResponse.prepare(view,null);
     }
 
     private static ImpressionTracker getImpressionTracker(@NonNull final Context context) {
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java
index aca7f187..7c2dd1c0 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java
@@ -238,7 +238,7 @@ public boolean isOverridingClickTracker() {
     }
 
     // Event Handlers
-    public void prepare(@NonNull final View view) {
+    public void prepare(@NonNull final View view,@Nullable ViewBinder viewBinder) {
         if (isDestroyed()) {
             return;
         }
@@ -247,7 +247,7 @@ public void prepare(@NonNull final View view) {
             setOnClickListener(view, new NativeViewClickListener());
         }
 
-        mNativeAd.prepare(view);
+        mNativeAd.prepare(view,viewBinder);
     }
 
     public void recordImpression(@Nullable final View view) {
