diff --git a/.gitmodules b/.gitmodules
deleted file mode 100644
index e69de29b..00000000
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 7d69bbf3..9e2ee647 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,7 +1,15 @@
-## Version 3.2.2 (October 29, 2014)
-  - **Bug Fix** Fixes a bug in fetching the Google Advertising ID from Google Play Services.
+## Version 3.3.0 (December 8, 2014)
 
-## Version 3.2.1 (October 21, 2014)
+  - **MRAID 2.0 Support** - The MoPub SDK is now compliant with the MRAID 2.0 specification to enable rich media ads in banners and interstitial ad units. Learn more about MRAID from the [IAB](http://www.iab.net/MRAID#MRAID).
+  - **Location Polling Updates** - Changed the interaction between application- and device-provided location data: more recent location data is now always used (in the past, application-provided location data was always preferred).
+    
+    As before, you may still disable MoPub SDK's location polling by calling `MoPub.setLocationAwareness(LocationAwareness.DISABLED)`.
+  - **Updated Chartboost SDK** Updated the `ChartboostInterstitial` custom event to support Chartboost SDK 5.0.4
+  
+#### Version 3.2.2 (October 29, 2014)
+  - **Bug Fix** Fixes a bug in fetching the Google Advertising ID from Google Play Services. 
+  
+#### Version 3.2.1 (October 21, 2014)
   - **Bug Fix** Fixes a bug in processing certain HTTP headers for Native Ads.
 
 ## Version 3.2.0 (October 17, 2014)
@@ -31,8 +39,7 @@
   - **Build target SDK is now API Level 19.** If you are building the MoPub SDK from source,
   modify your dependencies to reference Android 4.4.2, API Level 19. This does not affect the
   minimum device API level, which remains at API Level 9.
-  - **Source-level support for Gradle projects.** The SDK source now includes a build.gradle file
-   you can use to build source as part of your Gradle project.
+  - **Source-level support for Gradle projects.** The SDK source now includes a build.gradle file you can use to build source as part of your Gradle project.
   - **The SDK now uses Play Services 5.0.89**
   - **Bug fixes:**
     - Millennial Interstitial caching now properly handles request failures
@@ -75,6 +82,11 @@
     - Added support for companion banners (shown upon video completion)
   - Added Logcat warnings (and Toasts for debug builds) in cases where all necessary Activity permissions haven't been added to the `AndroidManifest`
 
+#### Version 2.0.1 (April 30, 2014)
+
+  - Fixed cases where VAST Video Interstitials were failing to fire `InterstitialAdListener` callbacks; fixes [GitHub issue #78](https://github.com/mopub/mopub-android-sdk/issues/78)
+  - Simplified click tracking logic for HTML ads
+
 ## Version 2.0 (April 22, 2014)
 
   - **Native Ads** public release; integration instructions and documentation available on the [GitHub wiki](https://github.com/mopub/mopub-android-sdk/wiki/Native-Ads-Integration)
@@ -95,54 +107,49 @@
 		```  
   - Upgraded the bundled `android-support-v4` library to r19.1.
       - **Note for Maven users:** Newer versions of the `android-support-v4` artifact are unavailable on Maven central, so we have included a small script to update the version in your local artifact repository. Please navigate to the `mopub-sdk` directory, and run `scripts/mavenize_support_library`.
-      
-###### Version 2.0.1 (April 30, 2014)
 
-  - Fixed cases where VAST Video Interstitials were failing to fire `InterstitialAdListener` callbacks; fixes [GitHub issue #78](https://github.com/mopub/mopub-android-sdk/issues/78)
-  - Simplified click tracking logic for HTML ads
+#### Version 1.17.3.1 (March 24, 2014)
 
-## Version 1.17 (Nov 20, 2013)
+  - Restricted use of methods and fields that require API 4+ (`WebView#removeJavascriptInterface` and `ConnectivityManager`'s connection types)
 
-  - Support for VAST 2.0 video playback via MoPub Marketplace
-    - Short videos (less than 15 seconds) autoplay and and are unskippable
-    - Longer videos autoplay and are skippable after 5 seconds
-    - **Note:** The video cache can use up to 100 MB of internal storage. For developers sensitive to storage constraints, this value may be changed in `VastVideoInterstitial.CACHE_MAX_SIZE`.
-  - Updated InMobi custom event support to 4.0.0
-  - Added custom events for video ad network mediation, which can be found in the extras directory of the SDK (`/extras/src/com/mopub/mobileads/`)
-    - Added the `AdColonyInterstitial` custom event
-    - Added the `VungleInterstitial` custom event
-    - **Note:** Virtual currency callbacks (v4vc) are not supported for the above ad networks
-  - Enabled deeplinking via custom URIs in ad creatives
-  - All `WebView`s are removed from their parents before `destroy()`; fixes [GitHub issue #38](https://github.com/mopub/mopub-android-sdk/issues/38)
-  - Removed previously-deprecated `HTML5AdView`
-  
-### Version 1.17.3 (March 19, 2014)
+## Version 1.17.3 (March 19, 2014)
 
   - Added safeguards to prevent two different `MoPubInterstitial` objects from listening in on one other's lifecycle callbacks
   - Disabled Javascript loading into `destroy()`ed `WebView`s; fixes [GitHub issue #62](https://github.com/mopub/mopub-android-sdk/issues/62)
   - Fixed an `IllegalArgumentException` resulting from VAST videos with malformed redirect tags
   - MRAID ads that utilize `mraid.open()` now correctly record a click event
   - Added missing `FLAG_ACTIVITY_NEW_TASK` to `VastVideoView`'s intent creation; fixes part of [GitHub issue #56](https://github.com/mopub/mopub-android-sdk/issues/56)
-  
-###### Version 1.17.3.1 (March 24, 2014)
 
-  - Restricted use of methods and fields that require API 4+ (`WebView#removeJavascriptInterface` and `ConnectivityManager`'s connection types)
-  
-### Version 1.17.2 (February 20, 2014)
+## Version 1.17.2 (February 20, 2014)
 
   - Updated InMobi custom events to support InMobi SDK 4.0.3+ only
   - MRAID viewable property now correctly updates on viewability change
   - `MraidView` properly handles null schemes; fixes [GitHub issue #63](https://github.com/mopub/mopub-android-sdk/pull/63)
   - Internal disk LRU cache correctly hashes keys when checking for existing files
-  
-### Version 1.17.1 (January 23, 2014)
+
+#### Version 1.17.1.1 (February 5, 2014)
+  - Fixed bug that caused clicks to not be recorded in the MoPub UI (introduced in 1.17.1)
+
+## Version 1.17.1 (January 23, 2014)
 
   - Added custom events for Google Play Services. `GooglePlayServicesBanner` and `GooglePlayServicesInterstitial` can be found in the extras directory of the SDK (`/extras/src/com/mopub/mobileads`)
   - Resolved issues with missing annotations on `addJavascriptInterface` when `targetSdkVersion` is set to API level 17 or above
   - Updated MoPub sample application to allow in-app text entry of ad unit IDs
-    
-###### Version 1.17.1.1 (February 5, 2014)
-  - Fixed bug that caused clicks to not be recorded in the MoPub UI (introduced in 1.17.1)
+
+## Version 1.17 (Nov 20, 2013)
+
+  - Support for VAST 2.0 video playback via MoPub Marketplace
+    - Short videos (less than 15 seconds) autoplay and and are unskippable
+    - Longer videos autoplay and are skippable after 5 seconds
+    - **Note:** The video cache can use up to 100 MB of internal storage. For developers sensitive to storage constraints, this value may be changed in `VastVideoInterstitial.CACHE_MAX_SIZE`.
+  - Updated InMobi custom event support to 4.0.0
+  - Added custom events for video ad network mediation, which can be found in the extras directory of the SDK (`/extras/src/com/mopub/mobileads/`)
+    - Added the `AdColonyInterstitial` custom event
+    - Added the `VungleInterstitial` custom event
+    - **Note:** Virtual currency callbacks (v4vc) are not supported for the above ad networks
+  - Enabled deeplinking via custom URIs in ad creatives
+  - All `WebView`s are removed from their parents before `destroy()`; fixes [GitHub issue #38](https://github.com/mopub/mopub-android-sdk/issues/38)
+  - Removed previously-deprecated `HTML5AdView`
   
 ## Version 1.16 (October 16, 2013)
 
@@ -157,24 +164,16 @@
   - Improved responsiveness of `showInterstitial()` for `HtmlInterstitial`s and `MraidInterstitial`s by pre-rendering HTML content
   - Simplified internal construction and handling of `WebView`s by removing `WebViewPool` and its subclasses
   - Updated mraid.getVersion() to return 2.0
-
-## Version 1.15 (August 21, 2013)
-
-Includes support for ads in the MRAID 2.0 format. MRAID 2.0 allows advertisers to create ads with rich media functionality, including adding calendar events, storing pictures and playing videos in the native video player. To learn more about MRAID 2.0, read our [help article](http://j.mp/16MKSci).
-
-  - Added the following MRAID 2.0 features: `createCalendarEvent` (Android 4.0 and above), `playVideo`, `storePicture`, and `supports`
-  - Hardware Acceleration is now enabled by default for `MraidInterstitial`s on Android 4.0 and above  
-  - Ensured that Cursors in `FacebookKeywordProvider` are always closed properly; fixes [GitHub issue #8](https://github.com/mopub/mopub-android-sdk/issues/8)  
-  - Added tracking parameter to InMobi ad requests; fixes [GitHub issue #15](https://github.com/mopub/mopub-android-sdk/issues/15)  
-  - Banner WebViews are now removed from the view hierarchy before they are destroyed; fixes [GitHub issue #23](https://github.com/mopub/mopub-android-sdk/issues/23)  
-
-To correctly display ads that ask the user to save a picture (storePicture ads), you need to make the following change to AndroidManifest.xml:  
-* Add the`WRITE_EXTERNAL_STORAGE` permission. Note: **Adding the permission is optional**. If the permission is not added, we will not deliver any store picture ads to the users' devices. All other features will remain functional without the new permission. 
-
-To allow users to play videos using the native video player:  
-* Declare activity `com.mopub.mobileads.MraidVideoPlayerActivity`. This activity is required to support playing videos in the native player and we strongly recommend adding it.
  
-### Version 1.15.2 (September 11, 2013) 
+#### Version 1.15.2.2 (September 20, 2013)
+  - Removed `WebSettings.setPluginsEnabled()` so the SDK builds against Android API 18; fixes [GitHub issue #28](https://github.com/mopub/mopub-android-sdk/issues/28)
+  - AdMob banners are now removed from the view hierarchy before they are destroyed; fixes the reopened [GitHub issue #23](https://github.com/mopub/mopub-android-sdk/issues/23)
+  - Prevent ads from launching system features, such as a browser view, until the user has interacted with the ad.
+ 
+#### Version 1.15.2.1 (September 13, 2013)
+  - Made the SDK more resilient to creatives that improperly use the `mopubnativebrowser://` scheme; fixes [GitHub issue #36](https://github.com/mopub/mopub-android-sdk/issues/36)
+ 
+## Version 1.15.2 (September 11, 2013) 
   - Allowed Facebook Support to be disabled optionally with `setFacebookSupported(false)`: 
   	- Use `MoPubInterstitial.setFacebookSupported(false);` for interstitials 
   	- Use `MoPubView.setFacebookSupported(false);` for banners 
@@ -186,58 +185,66 @@ To allow users to play videos using the native video player:
   - Updated Millennial Media jar to 5.1.0
   - Updated Greystripe custom event support to 2.3.0
   - Fixed MRAID 2.0 `storePicture` command's messaging when a picture either fails to download or fails to save to device 
-  - Expanded MRAID 2.0 `createCalendarEvent` command to support both minute- and second-level granularity  
-
-###### Version 1.15.2.1 (September 13, 2013)
-  - Made the SDK more resilient to creatives that improperly use the `mopubnativebrowser://` scheme; fixes [GitHub issue #36](https://github.com/mopub/mopub-android-sdk/issues/36)
-   
-###### Version 1.15.2.2 (September 20, 2013)
-  - Removed `WebSettings.setPluginsEnabled()` so the SDK builds against Android API 18; fixes [GitHub issue #28](https://github.com/mopub/mopub-android-sdk/issues/28)
-  - AdMob banners are now removed from the view hierarchy before they are destroyed; fixes the reopened [GitHub issue #23](https://github.com/mopub/mopub-android-sdk/issues/23)
-  - Prevent ads from launching system features, such as a browser view, until the user has interacted with the ad.
+  - Expanded MRAID 2.0 `createCalendarEvent` command to support both minute- and second-level granularity
+ 
+#### Version 1.15.1.1 (September 4, 2013)
+  - Made the SDK more resilient to unexpected Flash creatives
  
-### Version 1.15.1 (August 27, 2013)
+## Version 1.15.1 (August 27, 2013)
   - Updated documentation to remove the requirement for certain AndroidManifest permissions
   - Fixed minor bug with MRAID 2.0 `storePicture` command where the user sees a false download completed message
   
-###### Version 1.15.1.1 (September 4, 2013)
-  - Made the SDK more resilient to unexpected Flash creatives
+## Version 1.15 (August 21, 2013)
 
-## Version 1.14 (May 28, 2013)
+Includes support for ads in the MRAID 2.0 format. MRAID 2.0 allows advertisers to create ads with rich media functionality, including adding calendar events, storing pictures and playing videos in the native video player. To learn more about MRAID 2.0, read our [help article](http://j.mp/16MKSci).
 
-  - Provided improved support for Android Unity by moving all project resources (including layouts, javascript, images, and values) into source
-  - Removed reference to TYPE_DUMMY in AdUrlGenerator because it is not available in earlier versions of Android; fixes [GitHub issue #3](https://github.com/mopub/mopub-android-sdk/issues/3)
-  - Fixed NPE in AdUrlGenerator when WiFi is off and Airplane mode is on; fixes [GitHub issue #5](https://github.com/mopub/mopub-android-sdk/issues/5)
-  - `MraidInterstitial`s now properly notify `InterstitialAdListener` when they are shown and dismissed
+  - Added the following MRAID 2.0 features: `createCalendarEvent` (Android 4.0 and above), `playVideo`, `storePicture`, and `supports`
+  - Hardware Acceleration is now enabled by default for `MraidInterstitial`s on Android 4.0 and above  
+  - Ensured that Cursors in `FacebookKeywordProvider` are always closed properly; fixes [GitHub issue #8](https://github.com/mopub/mopub-android-sdk/issues/8)  
+  - Added tracking parameter to InMobi ad requests; fixes [GitHub issue #15](https://github.com/mopub/mopub-android-sdk/issues/15)  
+  - Banner WebViews are now removed from the view hierarchy before they are destroyed; fixes [GitHub issue #23](https://github.com/mopub/mopub-android-sdk/issues/23)  
+
+To correctly display ads that ask the user to save a picture (storePicture ads), you need to make the following change to AndroidManifest.xml:  
+* Add the`WRITE_EXTERNAL_STORAGE` permission. Note: **Adding the permission is optional**. If the permission is not added, we will not deliver any store picture ads to the users' devices. All other features will remain functional without the new permission. 
+
+To allow users to play videos using the native video player:  
+* Declare activity `com.mopub.mobileads.MraidVideoPlayerActivity`. This activity is required to support playing videos in the native player and we strongly recommend adding it.
   
-### Version 1.14.1 (June 21, 2013)
+## Version 1.14.1 (June 21, 2013)
   - Wait until after loaded interstitials are shown to report an impression
   - Remove phantom impression tracking from interstitials
   - Remove extra whitespace from Millennial banner ads
   - Added `onInterstitialClicked()` notification to `InterstitialAdListener`
   - Provide default implementations for `BannerAdListener` and `InterstitialAdListener`
   
-## Version 1.13 (May 9, 2013)
-  - Moved all Android code and documentation to its own repository: [mopub-android-sdk](https://github.com/mopub/mopub-android-sdk)
-  - Updated Millennial support to Millennial Media SDK version 5.0
-      - Support for Millennial Media SDK 5.0.1 is ready and will be released when the new Milllennial SDK becomes available
-  - Added `GoogleAdMobBanner`, `GoogleAdMobInterstitial`, `MillennialBanner`, and `MillennialInterstitial` custom event classes
-  - Removed obsolete native network adapters
-  - Added timeout for third-party networks (10 seconds for banners and 30 seconds for interstitials)
-  - Added more data signals (application version, connection type, and location accuracy)
+## Version 1.14 (May 28, 2013)
+
+  - Provided improved support for Android Unity by moving all project resources (including layouts, javascript, images, and values) into source
+  - Removed reference to TYPE_DUMMY in AdUrlGenerator because it is not available in earlier versions of Android; fixes [GitHub issue #3](https://github.com/mopub/mopub-android-sdk/issues/3)
+  - Fixed NPE in AdUrlGenerator when WiFi is off and Airplane mode is on; fixes [GitHub issue #5](https://github.com/mopub/mopub-android-sdk/issues/5)
+  - `MraidInterstitial`s now properly notify `InterstitialAdListener` when they are shown and dismissed
   
-### Version 1.13.1 (May 21, 2013)
+## Version 1.13.1 (May 21, 2013)
   - Updated Millennial support to Millennial Media SDK version 5.0.1
+  
+#### Version 1.13.0.2 (May 17, 2013)
 
-###### Version 1.13.0.1 (May 15, 2013)
+  - Relaxed access modifiers for `CustomEventBanner` and `CustomEventInterstitial`
+  
+#### Version 1.13.0.1 (May 15, 2013)
 
   - Removed extraneous display call in `MillennialInterstitial` custom event
   - Fixed potential NPE in `AdView`'s loadUrl()
   - Deprecated `HTML5AdView` after fixing some compilation issues
   
-###### Version 1.13.0.2 (May 17, 2013)
-
-  - Relaxed access modifiers for `CustomEventBanner` and `CustomEventInterstitial`
+## Version 1.13 (May 9, 2013)
+  - Moved all Android code and documentation to its own repository: [mopub-android-sdk](https://github.com/mopub/mopub-android-sdk)
+  - Updated Millennial support to Millennial Media SDK version 5.0
+      - Support for Millennial Media SDK 5.0.1 is ready and will be released when the new Milllennial SDK becomes available
+  - Added `GoogleAdMobBanner`, `GoogleAdMobInterstitial`, `MillennialBanner`, and `MillennialInterstitial` custom event classes
+  - Removed obsolete native network adapters
+  - Added timeout for third-party networks (10 seconds for banners and 30 seconds for interstitials)
+  - Added more data signals (application version, connection type, and location accuracy)
 
 ## Version 1.12 (April 26, 2013)
   - Chartboost custom event now automatically parses server data
@@ -301,4 +308,4 @@ To allow users to play videos using the native video player:
 ## Version 1.2 (February 29, 2012)
   - Added support for custom events
   - Added network connectivity check before loading an ad
-  - Added `OnAdPresentedOverlay` listener methods
+  - Added `OnAdPresentedOverlay` listener methods
\ No newline at end of file
diff --git a/README.md b/README.md
index 64b44d52..da7bcd09 100644
--- a/README.md
+++ b/README.md
@@ -27,7 +27,11 @@ Integration instructions are available on the [wiki](https://github.com/mopub/mo
 
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for details.
 
-  - **Bug Fixes**
+  - **MRAID 2.0 Support** - The MoPub SDK is now compliant with the MRAID 2.0 specification to enable rich media ads in banners and interstitial ad units. Learn more about MRAID from the [IAB](http://www.iab.net/MRAID#MRAID).
+  - **Location Polling Updates** - Changed the interaction between application- and device-provided location data: more recent location data is now always used (in the past, application-provided location data was always preferred).
+    
+    As before, you may still disable MoPub SDK's location polling by calling `MoPub.setLocationAwareness(LocationAwareness.DISABLED)`.
+  - **Updated Chartboost SDK** Updated the `ChartboostInterstitial` custom event to support Chartboost SDK 5.0.4
 
 ## Requirements
 
diff --git a/build.gradle b/build.gradle
index a17e8c95..9f36c1c7 100644
--- a/build.gradle
+++ b/build.gradle
@@ -3,19 +3,19 @@ buildscript {
         mavenCentral()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:0.12.+'
+        classpath 'com.android.tools.build:gradle:0.14.2+'
     }
 }
 
 apply plugin: 'com.android.library'
 
 dependencies {
-    compile 'com.android.support:support-v4:19.1.0'
+    compile 'com.android.support:support-v4:21.0.3'
 }
 
 android {
-    compileSdkVersion 19
-    buildToolsVersion "19.1.0"
+    compileSdkVersion 21
+    buildToolsVersion "21.1.2"
 
     sourceSets {
         main {
diff --git a/extras/src/com/mopub/mobileads/ChartboostInterstitial.java b/extras/src/com/mopub/mobileads/ChartboostInterstitial.java
index 3127790d..db34e6e5 100644
--- a/extras/src/com/mopub/mobileads/ChartboostInterstitial.java
+++ b/extras/src/com/mopub/mobileads/ChartboostInterstitial.java
@@ -3,13 +3,18 @@
 import android.app.Activity;
 import android.content.Context;
 import android.util.Log;
+
 import com.chartboost.sdk.Chartboost;
 import com.chartboost.sdk.ChartboostDelegate;
+import com.mopub.common.VisibleForTesting;
+
+import java.util.HashMap;
+import java.util.Map;
 
-import java.util.*;
+import static com.chartboost.sdk.Model.CBError.CBImpressionError;
 
 /*
- * Tested with Chartboost SDK 3.1.5.
+ * Tested with Chartboost SDK 5.0.4.
  */
 class ChartboostInterstitial extends CustomEventInterstitial {
     /*
@@ -37,11 +42,6 @@ static SingletonChartboostDelegate getDelegate() {
         return SingletonChartboostDelegate.instance;
     }
 
-    @Deprecated // for test only
-    public static void resetDelegate() {
-        SingletonChartboostDelegate.instance = new SingletonChartboostDelegate();
-    }
-
     /*
      * Abstract methods from CustomEventInterstitial
      */
@@ -53,9 +53,6 @@ protected void loadInterstitial(Context context, CustomEventInterstitialListener
             return;
         }
 
-        Activity activity = (Activity) context;
-        Chartboost chartboost = Chartboost.sharedChartboost();
-
         if (extrasAreValid(serverExtras)) {
             setAppId(serverExtras.get(APP_ID_KEY));
             setAppSignature(serverExtras.get(APP_SIGNATURE_KEY));
@@ -68,6 +65,9 @@ protected void loadInterstitial(Context context, CustomEventInterstitialListener
             return;
         }
 
+        Activity activity = (Activity) context;
+        Chartboost.startWithAppId(activity, appId, appSignature);
+
         if (getDelegate().hasLocation(location) &&
                 getDelegate().getListener(location) != interstitialListener) {
             interstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
@@ -75,16 +75,19 @@ protected void loadInterstitial(Context context, CustomEventInterstitialListener
         }
 
         getDelegate().registerListener(location, interstitialListener);
-        chartboost.onCreate(activity, appId, appSignature, getDelegate());
-        chartboost.onStart(activity);
-
-        chartboost.cacheInterstitial(location);
+        Chartboost.setDelegate(getDelegate());
+        Chartboost.setAutoCacheAds(false);
+        Chartboost.setShouldRequestInterstitialsInFirstSession(true);
+        Chartboost.setShouldDisplayLoadingViewForMoreApps(false);
+        Chartboost.onCreate(activity);
+        Chartboost.onStart(activity);
+        Chartboost.cacheInterstitial(location);
     }
 
     @Override
     protected void showInterstitial() {
         Log.d("MoPub", "Showing Chartboost interstitial ad.");
-        Chartboost.sharedChartboost().showInterstitial(location);
+        Chartboost.showInterstitial(location);
     }
 
     @Override
@@ -108,7 +111,8 @@ private boolean extrasAreValid(Map<String, String> serverExtras) {
         return serverExtras.containsKey(APP_ID_KEY) && serverExtras.containsKey(APP_SIGNATURE_KEY);
     }
 
-    private static class SingletonChartboostDelegate implements ChartboostDelegate {
+    @VisibleForTesting
+    static class SingletonChartboostDelegate extends ChartboostDelegate {
         private static final CustomEventInterstitialListener NULL_LISTENER = new CustomEventInterstitialListener() {
             @Override public void onInterstitialLoaded() { }
             @Override public void onInterstitialFailed(MoPubErrorCode errorCode) { }
@@ -146,11 +150,6 @@ public boolean shouldRequestInterstitial(String location) {
             return true;
         }
 
-        @Override
-        public boolean shouldRequestInterstitialsInFirstSession() {
-            return true;
-        }
-
         @Override
         public void didCacheInterstitial(String location) {
             Log.d("MoPub", "Chartboost interstitial loaded successfully.");
@@ -158,8 +157,8 @@ public void didCacheInterstitial(String location) {
         }
 
         @Override
-        public void didFailToLoadInterstitial(String location) {
-            Log.d("MoPub", "Chartboost interstitial ad failed to load.");
+        public void didFailToLoadInterstitial(String location, CBImpressionError error) {
+            Log.d("MoPub", "Chartboost interstitial ad failed to load. Error: " + error.name());
             getListener(location).onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
         }
 
@@ -181,7 +180,7 @@ public void didClickInterstitial(String location) {
         }
 
         @Override
-        public void didShowInterstitial(String location) {
+        public void didDisplayInterstitial(String location) {
             Log.d("MoPub", "Chartboost interstitial ad shown.");
             getListener(location).onInterstitialShown();
         }
@@ -190,42 +189,33 @@ public void didShowInterstitial(String location) {
          * More Apps delegate methods
          */
         @Override
-        public boolean shouldDisplayLoadingViewForMoreApps() {
+        public boolean shouldRequestMoreApps(String location) {
             return false;
         }
 
         @Override
-        public boolean shouldRequestMoreApps() {
+        public boolean shouldDisplayMoreApps(String location) {
             return false;
         }
 
         @Override
-        public boolean shouldDisplayMoreApps() {
-            return false;
+        public void didFailToLoadMoreApps(String location, CBImpressionError error) {
         }
 
         @Override
-        public void didFailToLoadMoreApps() {
+        public void didCacheMoreApps(String location) {
         }
 
         @Override
-        public void didCacheMoreApps() {
+        public void didDismissMoreApps(String location) {
         }
 
         @Override
-        public void didDismissMoreApps() {
+        public void didCloseMoreApps(String location) {
         }
 
         @Override
-        public void didCloseMoreApps() {
-        }
-
-        @Override
-        public void didClickMoreApps() {
-        }
-
-        @Override
-        public void didShowMoreApps() {
+        public void didClickMoreApps(String location) {
         }
 
         CustomEventInterstitialListener getListener(String location) {
@@ -233,4 +223,11 @@ CustomEventInterstitialListener getListener(String location) {
             return listener != null ? listener : NULL_LISTENER;
         }
     }
+
+    @VisibleForTesting
+    @Deprecated
+    public static void resetDelegate() {
+        SingletonChartboostDelegate.instance = new SingletonChartboostDelegate();
+    }
+
 }
diff --git a/extras/src/com/mopub/mobileads/GreystripeBanner.java b/extras/src/com/mopub/simpleadsdemo/GreystripeBanner.java
similarity index 99%
rename from extras/src/com/mopub/mobileads/GreystripeBanner.java
rename to extras/src/com/mopub/simpleadsdemo/GreystripeBanner.java
index 8497f2e6..b74cb286 100644
--- a/extras/src/com/mopub/mobileads/GreystripeBanner.java
+++ b/extras/src/com/mopub/simpleadsdemo/GreystripeBanner.java
@@ -11,7 +11,7 @@
 import com.mopub.mobileads.CustomEventBanner;
 import com.mopub.mobileads.MoPubErrorCode;
 
-import java.util.*;
+import java.util.Map;
 
 /*
  * Tested with Greystripe SDK 2.4.0.
diff --git a/extras/src/com/mopub/mobileads/GreystripeInterstitial.java b/extras/src/com/mopub/simpleadsdemo/GreystripeInterstitial.java
similarity index 99%
rename from extras/src/com/mopub/mobileads/GreystripeInterstitial.java
rename to extras/src/com/mopub/simpleadsdemo/GreystripeInterstitial.java
index 57dc89ab..7c9a261d 100644
--- a/extras/src/com/mopub/mobileads/GreystripeInterstitial.java
+++ b/extras/src/com/mopub/simpleadsdemo/GreystripeInterstitial.java
@@ -11,7 +11,7 @@
 import com.mopub.mobileads.CustomEventInterstitial;
 import com.mopub.mobileads.MoPubErrorCode;
 
-import java.util.*;
+import java.util.Map;
 
 /*
  * Tested with Greystripe SDK 2.4.0.
diff --git a/extras/src/com/mopub/mobileads/InMobiBanner.java b/extras/src/com/mopub/simpleadsdemo/InMobiBanner.java
similarity index 98%
rename from extras/src/com/mopub/mobileads/InMobiBanner.java
rename to extras/src/com/mopub/simpleadsdemo/InMobiBanner.java
index ac22d974..cbbeb8a8 100644
--- a/extras/src/com/mopub/mobileads/InMobiBanner.java
+++ b/extras/src/com/mopub/simpleadsdemo/InMobiBanner.java
@@ -2,6 +2,7 @@
 
 import android.app.Activity;
 import android.content.Context;
+
 import com.inmobi.commons.InMobi;
 import com.inmobi.commons.InMobi.LOG_LEVEL;
 import com.inmobi.monetization.IMBanner;
@@ -12,7 +13,8 @@
 import com.mopub.mobileads.CustomEventBanner;
 import com.mopub.mobileads.MoPubErrorCode;
 
-import java.util.*;
+import java.util.HashMap;
+import java.util.Map;
 
 /*
  * Tested with InMobi SDK 4.4.1
diff --git a/extras/src/com/mopub/mobileads/InMobiInterstitial.java b/extras/src/com/mopub/simpleadsdemo/InMobiInterstitial.java
similarity index 100%
rename from extras/src/com/mopub/mobileads/InMobiInterstitial.java
rename to extras/src/com/mopub/simpleadsdemo/InMobiInterstitial.java
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 0087cd3b..3d0dee6e 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 51905da1..3478c77b 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Tue Aug 05 14:58:07 PDT 2014
+#Tue Nov 18 14:15:01 PST 2014
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-1.12-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.1-bin.zip
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index 4d4616a1..fe6bfcd2 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.mopub.simpleadsdemo"
-      android:versionCode="18"
-      android:versionName="3.2.2">
+      android:versionCode="19"
+      android:versionName="3.3.0">
     <uses-sdk android:minSdkVersion="9"
               android:targetSdkVersion="19"/>
 
@@ -10,30 +10,30 @@
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
     <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
 
+
     <!-- For MRAID 2 -->
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
 
     <application android:icon="@drawable/icon" android:label="@string/app_name">
 	    <activity android:name="com.mopub.simpleadsdemo.MoPubSampleActivity"
 	            android:label="@string/app_name"
-                android:configChanges="orientation">
+                android:configChanges="orientation|screenSize">
 	        <intent-filter>
 	            <action android:name="android.intent.action.MAIN" />
 	            <category android:name="android.intent.category.LAUNCHER" />
 	        </intent-filter>
 	    </activity>
         <activity android:name="com.mopub.mobileads.MoPubActivity"
-                android:configChanges="keyboardHidden|orientation"/>
+                android:configChanges="keyboardHidden|orientation|screenSize"/>
         <activity android:name="com.mopub.mobileads.MraidActivity"
-                android:configChanges="keyboardHidden|orientation"/>
+                android:configChanges="keyboardHidden|orientation|screenSize"/>
         <activity android:name="com.mopub.common.MoPubBrowser"
-                android:configChanges="keyboardHidden|orientation"/>
+                android:configChanges="keyboardHidden|orientation|screenSize"/>
         <activity android:name="com.mopub.mobileads.MraidVideoPlayerActivity"
-                android:configChanges="keyboardHidden|orientation"/>
+                android:configChanges="keyboardHidden|orientation|screenSize"/>
 
         <meta-data android:name="com.google.android.gms.version"
                    android:value="@integer/google_play_services_version" />
-
     </application>
 
 </manifest>
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index 50be0c68..7d281313 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -6,15 +6,26 @@ description = '''MoPub SDK'''
 
 android {
     compileSdkVersion 19
-    buildToolsVersion '19.1.0'
+    buildToolsVersion '21.1.1'
 
     defaultConfig {
         versionCode 1
-        versionName "3.2.1"
+        versionName "3.3.0"
         minSdkVersion 9
         targetSdkVersion 19
     }
 
+    buildTypes {
+      release {
+        minifyEnabled true
+        proguardFiles = [getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg']
+      }
+      debug {
+        minifyEnabled true
+        proguardFiles = [getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg']
+      }
+    }
+
     sourceSets {
         main {
             manifest.srcFile 'AndroidManifest.xml'
diff --git a/mopub-sample/proguard.cfg b/mopub-sample/proguard.cfg
index c1f97c67..a307513f 100644
--- a/mopub-sample/proguard.cfg
+++ b/mopub-sample/proguard.cfg
@@ -15,4 +15,4 @@
 # Support for Android Advertiser ID.
 -keep class com.google.android.gms.common.GooglePlayServicesUtil {*;}
 -keep class com.google.android.gms.ads.identifier.AdvertisingIdClient {*;}
-
+-keep class com.google.android.gms.ads.identifier.AdvertisingIdClient$Info {*;}
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java
index ede4745c..42b2ba38 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java
@@ -13,7 +13,6 @@
 import android.widget.TextView;
 
 import com.mopub.nativeads.MoPubNativeAdLoadedListener;
-import com.mopub.nativeads.MoPubNativeAdPositioning;
 import com.mopub.nativeads.MoPubNativeAdRenderer;
 import com.mopub.nativeads.MoPubStreamAdPlacer;
 import com.mopub.nativeads.RequestParameters;
@@ -69,12 +68,9 @@ public void onClick(View view) {
         views.mDescriptionView.setText(mAdConfiguration.getDescription());
         views.mAdUnitIdView.setText(adUnitId);
         mViewPager = (ViewPager) view.findViewById(R.id.gallery_pager);
-        mStreamAdPlacer = new MoPubStreamAdPlacer(getActivity(),
-                MoPubNativeAdPositioning.clientPositioning()
-                        .addFixedPosition(4)
-                        .addFixedPosition(1)
-                        .enableRepeatingPositions(3)
-        );
+
+        // This ad placer is used to automatically insert ads into the ViewPager.
+        mStreamAdPlacer = new MoPubStreamAdPlacer(getActivity());
         final MoPubNativeAdRenderer adRenderer = new MoPubNativeAdRenderer(
                 new ViewBinder.Builder(R.layout.native_ad_list_item)
                         .titleId(R.id.native_title)
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java
index ba042047..5c48fe32 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java
@@ -10,7 +10,6 @@
 import android.widget.ListView;
 
 import com.mopub.nativeads.MoPubAdAdapter;
-import com.mopub.nativeads.MoPubNativeAdPositioning;
 import com.mopub.nativeads.MoPubNativeAdRenderer;
 import com.mopub.nativeads.RequestParameters;
 import com.mopub.nativeads.ViewBinder;
@@ -69,12 +68,9 @@ public void onClick(View view) {
             adapter.add("Item " + i);
         }
 
-        // Create an ad adapter with ads in positions 0, 4, and every 10 places thereafter.
+        // Create an ad adapter that gets its positioning information from the MoPub Ad Server.
         // This adapter will be used in place of the original adapter for the ListView.
-        mAdAdapter = new MoPubAdAdapter(getActivity(), adapter, MoPubNativeAdPositioning.clientPositioning()
-                .addFixedPosition(0)
-                .addFixedPosition(4)
-                .enableRepeatingPositions(10));
+        mAdAdapter = new MoPubAdAdapter(getActivity(), adapter);
 
         // Set up an renderer that knows how to put ad data in an ad view.
         final MoPubNativeAdRenderer adRenderer = new MoPubNativeAdRenderer(
diff --git a/mopub-sample/src/test/resources/org.robolectric.Config.properties b/mopub-sample/src/test/resources/org.robolectric.Config.properties
new file mode 100644
index 00000000..ce97d608
--- /dev/null
+++ b/mopub-sample/src/test/resources/org.robolectric.Config.properties
@@ -0,0 +1 @@
+shadows=com.mopub.nativeads.test.support.MoPubShadowDisplay,com.mopub.nativeads.test.support.MoPubShadowBitmap
diff --git a/mopub-sdk/build.gradle b/mopub-sdk/build.gradle
index b0fea303..9fd77b3b 100644
--- a/mopub-sdk/build.gradle
+++ b/mopub-sdk/build.gradle
@@ -12,11 +12,11 @@ description = '''MoPub SDK'''
 
 android {
     compileSdkVersion 19
-    buildToolsVersion '19.1.0'
+    buildToolsVersion '21.1.1'
 
     defaultConfig {
         versionCode 1
-        versionName "3.2.2"
+        versionName "3.3.0"
         minSdkVersion 9
         targetSdkVersion 19
         consumerProguardFiles 'proguard.txt'
@@ -36,7 +36,7 @@ android {
 
     buildTypes {
         release {
-            runProguard false
+            minifyEnabled false
             proguardFiles getDefaultProguardFile('proguard-android.txt'), file('proguard.txt')
         }
     }
@@ -49,6 +49,7 @@ android {
 
 dependencies {
     compile 'com.android.support:support-v4:19.1.+'
+    compile 'com.android.support:support-annotations:20.0.0'
 }
 
 // Don't run the Robolectric Unit Tests. They don't build properly in Gradle or Android Studio in this version.
diff --git a/mopub-sdk/etc/mraid.js b/mopub-sdk/etc/mraid.js
index 1dff72b6..7ce13b28 100644
--- a/mopub-sdk/etc/mraid.js
+++ b/mopub-sdk/etc/mraid.js
@@ -13,63 +13,48 @@
   }
 }());
 
-(function() {
-  // Establish the root mraidbridge object.
-  var mraidbridge = window.mraidbridge = {};
-
-  // native SDK is ready to process mraid commands.
-  var nativeSDKFiredReady = false;
-
-  // Listeners for bridge events.
-  var listeners = {};
-
-  // Queue to track pending calls to the native SDK.
-  var nativeCallQueue = [];
 
-  // Whether a native call is currently in progress.
-  var nativeCallInFlight = false;
+(function() {
+  var mraid = window.mraid = {};
 
   //////////////////////////////////////////////////////////////////////////////////////////////////
 
-  mraidbridge.fireReadyEvent = function() {
-    nativeSDKFiredReady = true;
-    mraidbridge.fireEvent('ready');
-  };
+  // Bridge interface to SDK
 
-  mraidbridge.fireChangeEvent = function(properties) {
-    mraidbridge.fireEvent('change', properties);
+  var bridge = window.mraidbridge = {
+    nativeSDKFiredReady: false,
+    nativeCallQueue: [],
+    nativeCallInFlight: false,
+    lastSizeChangeProperties: null
   };
 
-  mraidbridge.fireErrorEvent = function(message, action) {
-    mraidbridge.fireEvent('error', message, action);
-  };
 
-  mraidbridge.fireEvent = function(type) {
-    var ls = listeners[type];
-    if (ls) {
-      var args = Array.prototype.slice.call(arguments);
-      args.shift();
-      var l = ls.length;
-      for (var i = 0; i < l; i++) {
-        ls[i].apply(null, args);
+  bridge.fireChangeEvent = function(properties) {
+    for (var p in properties) {
+      if (properties.hasOwnProperty(p)) {
+        // Change handlers defined by MRAID below
+        var handler = changeHandlers[p];
+        handler(properties[p]);
       }
     }
   };
 
-  mraidbridge.nativeCallComplete = function(command) {
-    if (nativeCallQueue.length === 0) {
-      nativeCallInFlight = false;
+  bridge.nativeCallComplete = function(command) {
+    if (this.nativeCallQueue.length === 0) {
+      this.nativeCallInFlight = false;
       return;
     }
 
-    var nextCall = nativeCallQueue.pop();
+    var nextCall = this.nativeCallQueue.pop();
     window.location = nextCall;
   };
 
-  mraidbridge.executeNativeCall = function(command) {
-    if (!nativeSDKFiredReady) {
+  bridge.executeNativeCall = function(args) {
+    var command = args.shift();
+
+    if (!this.nativeSDKFiredReady) {
         console.log('rejecting ' + command + ' because mraid is not ready');
-        mraidbridge.fireErrorEvent('mraid is not ready', command);
+        bridge.notifyErrorEvent('mraid is not ready', command);
         return;
     }
 
@@ -78,9 +63,9 @@
     var key, value;
     var isFirstArgument = true;
 
-    for (var i = 1; i < arguments.length; i += 2) {
-      key = arguments[i];
-      value = arguments[i + 1];
+    for (var i = 0; i < args.length; i += 2) {
+      key = args[i];
+      value = args[i + 1];
 
       if (value === null) continue;
 
@@ -94,55 +79,133 @@
       call += encodeURIComponent(key) + '=' + encodeURIComponent(value);
     }
 
-    if (nativeCallInFlight) {
-      nativeCallQueue.push(call);
+    if (this.nativeCallInFlight) {
+      this.nativeCallQueue.push(call);
     } else {
-      nativeCallInFlight = true;
+      this.nativeCallInFlight = true;
       window.location = call;
     }
   };
 
-  //////////////////////////////////////////////////////////////////////////////////////////////////
 
-  mraidbridge.addEventListener = function(event, listener) {
-    var eventListeners;
-    listeners[event] = listeners[event] || [];
-    eventListeners = listeners[event];
+  bridge.setCurrentPosition = function(x, y, width, height) {
+    currentPosition = {
+      x: x,
+      y: y,
+      width: width,
+      height: height
+    };
+    broadcastEvent(EVENTS.INFO, 'Set current position to ' + stringify(currentPosition));
+  };
+
+  bridge.setDefaultPosition = function(x, y, width, height) {
+    defaultPosition = {
+      x: x,
+      y: y,
+      width: width,
+      height: height
+    };
+    broadcastEvent(EVENTS.INFO, 'Set default position to ' + stringify(defaultPosition));
+  };
+  
+  bridge.setMaxSize = function(width, height) {
+    maxSize = {
+      width: width,
+      height: height
+    };
+
+    expandProperties.width = width;
+    expandProperties.height = height;
+
+    broadcastEvent(EVENTS.INFO, 'Set max size to ' + stringify(maxSize));
+  };
 
-    for (var l in eventListeners) {
-      // Listener already registered, so no need to add it.
-      if (listener === l) return;
+  bridge.setPlacementType = function(_placementType) {
+    placementType = _placementType;
+    broadcastEvent(EVENTS.INFO, 'Set placement type to ' + stringify(placementType));
+  };
+
+  bridge.setScreenSize = function(width, height) {
+    screenSize = {
+      width: width,
+      height: height
+    };
+    broadcastEvent(EVENTS.INFO, 'Set screen size to ' + stringify(screenSize));
+  };
+
+  bridge.setState = function(_state) {
+    state = _state;
+    broadcastEvent(EVENTS.INFO, 'Set state to ' + stringify(state));
+    broadcastEvent(EVENTS.STATECHANGE, state);
+  };
+
+  bridge.setIsViewable = function(_isViewable) {
+    isViewable = _isViewable;
+    broadcastEvent(EVENTS.INFO, 'Set isViewable to ' + stringify(isViewable));
+    broadcastEvent(EVENTS.VIEWABLECHANGE, isViewable);
+  };
+
+  bridge.setSupports = function(sms, tel, calendar, storePicture, inlineVideo) {
+    supportProperties = {
+      sms: sms,
+      tel: tel,
+      calendar: calendar,
+      storePicture: storePicture,
+      inlineVideo: inlineVideo
+    };
+  };
+
+  bridge.notifyReadyEvent = function() {
+    this.nativeSDKFiredReady = true;
+    broadcastEvent(EVENTS.READY);
+  };
+
+  bridge.notifyErrorEvent = function(message, action) {
+    broadcastEvent(EVENTS.ERROR, message, action);
+  };
+
+  // Temporary aliases while we migrate to the new API
+  bridge.fireReadyEvent = bridge.notifyReadyEvent;
+  bridge.fireErrorEvent = bridge.notifyErrorEvent;
+
+  bridge.notifySizeChangeEvent = function(width, height) {
+    if (this.lastSizeChangeProperties &&
+          width == this.lastSizeChangeProperties.width && height == this.lastSizeChangeProperties.height) {
+      return;
     }
 
-    eventListeners.push(listener);
+    this.lastSizeChangeProperties = {
+        width: width,
+        height: height
+    };
+    broadcastEvent(EVENTS.SIZECHANGE, width, height);
   };
 
-  mraidbridge.removeEventListener = function(event, listener) {
-    if (listeners.hasOwnProperty(event)) {
-      var eventListeners = listeners[event];
-      if (eventListeners) {
-        var idx = eventListeners.indexOf(listener);
-        if (idx !== -1) {
-          eventListeners.splice(idx, 1);
-        }
-      }
+  bridge.notifyStateChangeEvent = function() {
+    if (state === STATES.LOADING) {
+      broadcastEvent(EVENTS.INFO, 'Native SDK initialized.');
     }
+
+    broadcastEvent(EVENTS.INFO, 'Set state to ' + stringify(state));
+    broadcastEvent(EVENTS.STATECHANGE, state);
+  };
+
+  bridge.notifyViewableChangeEvent = function() {
+    broadcastEvent(EVENTS.INFO, 'Set isViewable to ' + stringify(isViewable));
+    broadcastEvent(EVENTS.VIEWABLECHANGE, isViewable);
   };
-}());
 
-(function() {
-  var mraid = window.mraid = {};
-  var bridge = window.mraidbridge;
 
   // Constants. ////////////////////////////////////////////////////////////////////////////////////
 
-  var VERSION = mraid.VERSION = '1.0';
+  var VERSION = mraid.VERSION = '2.0';
 
   var STATES = mraid.STATES = {
-    LOADING: 'loading',     // Initial state.
+    LOADING: 'loading',
     DEFAULT: 'default',
     EXPANDED: 'expanded',
-    HIDDEN: 'hidden'
+    HIDDEN: 'hidden',
+    RESIZED: 'resized'
   };
 
   var EVENTS = mraid.EVENTS = {
@@ -150,7 +213,8 @@
     INFO: 'info',
     READY: 'ready',
     STATECHANGE: 'stateChange',
-    VIEWABLECHANGE: 'viewableChange'
+    VIEWABLECHANGE: 'viewableChange',
+    SIZECHANGE: 'sizeChange'
   };
 
   var PLACEMENT_TYPES = mraid.PLACEMENT_TYPES = {
@@ -163,14 +227,44 @@
 
   // Properties which define the behavior of an expandable ad.
   var expandProperties = {
-    width: -1,
-    height: -1,
+    width: false,
+    height: false,
     useCustomClose: false,
-    isModal: true,
-    lockOrientation: false
+    isModal: true
   };
 
-  var hasSetCustomSize = false;
+  var resizeProperties = {
+    width: false, 
+    height: false,
+    offsetX: false, 
+    offsetY: false,
+    customClosePosition: 'top-right',
+    allowOffscreen: true
+  };
+
+  var orientationProperties = {
+    allowOrientationChange: true,
+    forceOrientation: "none"
+  };
+
+  var supportProperties = {
+    sms: false,
+    tel: false,
+    calendar: false,
+    storePicture: false,
+    inlineVideo: false
+  };
+
+  // default is undefined so that notifySizeChangeEvent can track changes
+  var lastSizeChangeProperties;
+
+  var maxSize = {};
+
+  var currentPosition = {};
+
+  var defaultPosition = {};
+
+  var screenSize = {};
 
   var hasSetCustomClose = false;
 
@@ -182,18 +276,8 @@
 
   var isViewable = false;
 
-  var screenSize = { width: -1, height: -1 };
-
   var placementType = PLACEMENT_TYPES.UNKNOWN;
 
-  var supports = {
-    sms: false,
-    tel: false,
-    calendar: false,
-    storePicture: false,
-    inlineVideo: false
-  };
-
   //////////////////////////////////////////////////////////////////////////////////////////////////
 
   var EventListeners = function(event) {
@@ -229,7 +313,7 @@
 
     this.broadcast = function(args) {
       for (var id in listeners) {
-        if (listeners.hasOwnProperty(id)) listeners[id].apply({}, args);
+        if (listeners.hasOwnProperty(id)) listeners[id].apply(mraid, args);
       }
     };
 
@@ -305,29 +389,17 @@
       placementType = val;
     },
 
-    screenSize: function(val) {
+    sizeChange: function(val) {
       broadcastEvent(EVENTS.INFO, 'Set screenSize to ' + stringify(val));
       for (var key in val) {
         if (val.hasOwnProperty(key)) screenSize[key] = val[key];
       }
-
-      if (!hasSetCustomSize) {
-        expandProperties['width'] = screenSize['width'];
-        expandProperties['height'] = screenSize['height'];
-      }
-    },
-
-    expandProperties: function(val) {
-      broadcastEvent(EVENTS.INFO, 'Merging expandProperties with ' + stringify(val));
-      for (var key in val) {
-        if (val.hasOwnProperty(key)) expandProperties[key] = val[key];
-      }
     },
 
     supports: function(val) {
       broadcastEvent(EVENTS.INFO, 'Set supports to ' + stringify(val));
-        supports = val;
-    },
+        supportProperties = val;
+    }
   };
 
   var validate = function(obj, validators, action, merge) {
@@ -339,7 +411,7 @@
       } else {
         for (var i in validators) {
           if (validators.hasOwnProperty(i) && obj[i] === undefined) {
-            broadcastEvent(EVENTS.ERROR, 'Object is missing required property: ' + i + '.', action);
+            broadcastEvent(EVENTS.ERROR, 'Object is missing required property: ' + i, action);
             return false;
           }
         }
@@ -351,8 +423,7 @@
       var value = obj[prop];
       if (validator && !validator(value)) {
         // Failed validation.
-        broadcastEvent(EVENTS.ERROR, 'Value of property ' + prop + ' is invalid.',
-          action);
+        broadcastEvent(EVENTS.ERROR, 'Value of property ' + prop + ' is invalid: ' + value, action);
         return false;
       }
     }
@@ -360,40 +431,20 @@
   };
 
   var expandPropertyValidators = {
-    width: function(v) { return !isNaN(v) && v >= 0; },
-    height: function(v) { return !isNaN(v) && v >= 0; },
     useCustomClose: function(v) { return (typeof v === 'boolean'); },
-    lockOrientation: function(v) { return (typeof v === 'boolean'); }
   };
 
   //////////////////////////////////////////////////////////////////////////////////////////////////
 
-  bridge.addEventListener('change', function(properties) {
-    for (var p in properties) {
-      if (properties.hasOwnProperty(p)) {
-        var handler = changeHandlers[p];
-        handler(properties[p]);
-      }
-    }
-  });
-
-  bridge.addEventListener('error', function(message, action) {
-    broadcastEvent(EVENTS.ERROR, message, action);
-  });
-
-  bridge.addEventListener('ready', function() {
-    broadcastEvent(EVENTS.READY);
-  });
-
-  //////////////////////////////////////////////////////////////////////////////////////////////////
-
   mraid.addEventListener = function(event, listener) {
     if (!event || !listener) {
       broadcastEvent(EVENTS.ERROR, 'Both event and listener are required.', 'addEventListener');
     } else if (!contains(event, EVENTS)) {
       broadcastEvent(EVENTS.ERROR, 'Unknown MRAID event: ' + event, 'addEventListener');
     } else {
-      if (!listeners[event]) listeners[event] = new EventListeners(event);
+      if (!listeners[event]) {
+        listeners[event] = new EventListeners(event);
+      }
       listeners[event].add(listener);
     }
   };
@@ -402,45 +453,25 @@
     if (state === STATES.HIDDEN) {
       broadcastEvent(EVENTS.ERROR, 'Ad cannot be closed when it is already hidden.',
         'close');
-    } else bridge.executeNativeCall('close');
+    } else bridge.executeNativeCall(['close']);
   };
 
   mraid.expand = function(URL) {
-    if (this.getState() !== STATES.DEFAULT) {
-      broadcastEvent(EVENTS.ERROR, 'Ad can only be expanded from the default state.', 'expand');
+    if (!(this.getState() === STATES.DEFAULT || this.getState() === STATES.RESIZED)) {
+      broadcastEvent(EVENTS.ERROR, 'Ad can only be expanded from the default or resized state.', 'expand');
     } else {
-      var args = ['expand'];
-
-      if (this.getHasSetCustomClose()) {
-        args = args.concat(['shouldUseCustomClose', expandProperties.useCustomClose ? 'true' : 'false']);
-      }
-
-      if (this.getHasSetCustomSize()) {
-        if (expandProperties.width >= 0 && expandProperties.height >= 0) {
-          args = args.concat(['w', expandProperties.width, 'h', expandProperties.height]);
-        }
-      }
-
-      if (typeof expandProperties.lockOrientation !== 'undefined') {
-        args = args.concat(['lockOrientation', expandProperties.lockOrientation]);
-      }
+      var args = ['expand',
+        'shouldUseCustomClose', expandProperties.useCustomClose
+      ];
 
       if (URL) {
         args = args.concat(['url', URL]);
       }
 
-      bridge.executeNativeCall.apply(this, args);
+      bridge.executeNativeCall(args);
     }
   };
 
-  mraid.getHasSetCustomClose = function() {
-      return hasSetCustomClose;
-  };
-
-  mraid.getHasSetCustomSize = function() {
-      return hasSetCustomSize;
-  };
-
   mraid.getExpandProperties = function() {
     var properties = {
       width: expandProperties.width,
@@ -451,56 +482,93 @@
     return properties;
   };
 
+
+  mraid.getCurrentPosition = function() {
+    return {
+      x: currentPosition.x,
+      y: currentPosition.y,
+      width: currentPosition.width,
+      height: currentPosition.height
+    };
+  };
+
+  mraid.getDefaultPosition = function() {
+    return {
+      x: defaultPosition.x,
+      y: defaultPosition.y,
+      width: defaultPosition.width,
+      height: defaultPosition.height
+    };
+  };
+
+  mraid.getMaxSize = function() {
+    return {
+      width: maxSize.width,
+      height: maxSize.height
+    };
+  };
+
   mraid.getPlacementType = function() {
     return placementType;
   };
 
-  mraid.getState = function() {
-    return state;
+  mraid.getScreenSize = function() {
+    return {
+      width: screenSize.width,
+      height: screenSize.height
+    };
   };
 
-  mraid.getVersion = function() {
-    return mraid.VERSION;
+  mraid.getState = function() {
+    return state;
   };
 
   mraid.isViewable = function() {
     return isViewable;
   };
 
+  mraid.getVersion = function() {
+    return mraid.VERSION;
+  };
+
   mraid.open = function(URL) {
     if (!URL) broadcastEvent(EVENTS.ERROR, 'URL is required.', 'open');
-    else bridge.executeNativeCall('open', 'url', URL);
+    else bridge.executeNativeCall(['open', 'url', URL]);
   };
 
   mraid.removeEventListener = function(event, listener) {
-    if (!event) broadcastEvent(EVENTS.ERROR, 'Event is required.', 'removeEventListener');
-    else {
-      if (listener && (!listeners[event] || !listeners[event].remove(listener))) {
-        broadcastEvent(EVENTS.ERROR, 'Listener not currently registered for event.',
-          'removeEventListener');
-        return;
-      } else if (listeners[event]) listeners[event].removeAll();
+    if (!event) {
+      broadcastEvent(EVENTS.ERROR, 'Event is required.', 'removeEventListener');
+      return;
+    }
 
-      if (listeners[event] && listeners[event].count === 0) {
-        listeners[event] = null;
-        delete listeners[event];
+    if (listener) {
+      // If we have a valid event, we'll try to remove the listener from it.
+      var success = false;
+      if (listeners[event]) {
+        success = listeners[event].remove(listener);
+      }
+
+      // If we didn't have a valid event or couldn't remove the listener from the event, broadcast an error and return early.
+      if (!success) {
+        broadcastEvent(EVENTS.ERROR, 'Listener not currently registered for event.', 'removeEventListener');
+        return;
       }
+
+    } else if (!listener && listeners[event]) {
+      listeners[event].removeAll();
+    }
+
+    if (listeners[event] && listeners[event].count === 0) {
+      listeners[event] = null;
+      delete listeners[event];
     }
   };
 
   mraid.setExpandProperties = function(properties) {
     if (validate(properties, expandPropertyValidators, 'setExpandProperties', true)) {
-      if (properties.hasOwnProperty('width') || properties.hasOwnProperty('height')) {
-        hasSetCustomSize = true;
-      }
-
-      if (properties.hasOwnProperty('useCustomClose')) hasSetCustomClose = true;
-
-      var desiredProperties = ['width', 'height', 'useCustomClose', 'lockOrientation'];
-      var length = desiredProperties.length;
-      for (var i = 0; i < length; i++) {
-        var propname = desiredProperties[i];
-        if (properties.hasOwnProperty(propname)) expandProperties[propname] = properties[propname];
+      if (properties.hasOwnProperty('useCustomClose')) {
+        expandProperties.useCustomClose = properties.useCustomClose;
       }
     }
   };
@@ -508,7 +576,7 @@
   mraid.useCustomClose = function(shouldUseCustomClose) {
     expandProperties.useCustomClose = shouldUseCustomClose;
     hasSetCustomClose = true;
-    bridge.executeNativeCall('usecustomclose', 'shouldUseCustomClose', shouldUseCustomClose);
+    bridge.executeNativeCall(['usecustomclose', 'shouldUseCustomClose', shouldUseCustomClose]);
   };
 
   // MRAID 2.0 APIs ////////////////////////////////////////////////////////////////////////////////
@@ -516,14 +584,14 @@
   mraid.createCalendarEvent = function(parameters) {
     CalendarEventParser.initialize(parameters);
     if (CalendarEventParser.parse()) {
-      bridge.executeNativeCall.apply(this, CalendarEventParser.arguments);
+      bridge.executeNativeCall(CalendarEventParser.arguments);
     } else {
       broadcastEvent(EVENTS.ERROR, CalendarEventParser.errors[0], 'createCalendarEvent');
     }
   };
 
   mraid.supports = function(feature) {
-    return supports[feature];
+    return supportProperties[feature];
   };
 
   mraid.playVideo = function(uri) {
@@ -535,7 +603,7 @@
     if (!uri) {
       broadcastEvent(EVENTS.ERROR, 'playVideo must be called with a valid URI', 'playVideo');
     } else {
-      bridge.executeNativeCall.apply(this, ['playVideo', 'uri', uri]);
+      bridge.executeNativeCall(['playVideo', 'uri', uri]);
     }
   };
 
@@ -548,36 +616,102 @@
     if (!uri) {
       broadcastEvent(EVENTS.ERROR, 'storePicture must be called with a valid URI', 'storePicture');
     } else {
-      bridge.executeNativeCall.apply(this, ['storePicture', 'uri', uri]);
+      bridge.executeNativeCall(['storePicture', 'uri', uri]);
     }
   };
 
-  mraid.resize = function() {
-    bridge.executeNativeCall('resize');
-  };
 
-  mraid.getResizeProperties = function() {
-    bridge.executeNativeCall('getResizeProperties');
+  var resizePropertyValidators = {
+    width: function(v) {
+      return !isNaN(v) && v > 0; 
+    },
+    height: function(v) {
+      return !isNaN(v) && v > 0; 
+    },
+    offsetX: function(v) {
+      return !isNaN(v);
+    },
+    offsetY: function(v) {
+      return !isNaN(v);
+    },
+    customClosePosition: function(v) {
+      return (typeof v === 'string' && 
+        ['top-right', 'bottom-right', 'top-left', 'bottom-left', 'center', 'top-center', 'bottom-center'].indexOf(v) > -1);
+    },
+    allowOffscreen: function(v) {
+      return (typeof v === 'boolean');
+    }
   };
 
-  mraid.setResizeProperties = function(resizeProperties) {
-    bridge.executeNativeCall('setResizeProperties', 'resizeProperties', resizeProperties);
+  mraid.setOrientationProperties = function(properties) {
+
+    if (properties.hasOwnProperty('allowOrientationChange')) {
+      orientationProperties.allowOrientationChange = properties.allowOrientationChange;
+    }
+
+    if (properties.hasOwnProperty('forceOrientation')) {
+      orientationProperties.forceOrientation = properties.forceOrientation;
+    }
+
+    var args = ['setOrientationProperties',
+      'allowOrientationChange', orientationProperties.allowOrientationChange,
+      'forceOrientation', orientationProperties.forceOrientation
+    ];
+    bridge.executeNativeCall(args);
   };
 
-  mraid.getCurrentPosition = function() {
-    bridge.executeNativeCall('getCurrentPosition');
+  mraid.getOrientationProperties = function() {
+    return {
+      allowOrientationChange: orientationProperties.allowOrientationChange,
+      forceOrientation: orientationProperties.forceOrientation
+    };
   };
 
-  mraid.getDefaultPosition = function() {
-    bridge.executeNativeCall('getDefaultPosition');
+  mraid.resize = function() {
+    if (!(this.getState() === STATES.DEFAULT || this.getState() === STATES.RESIZED)) {
+      broadcastEvent(EVENTS.ERROR, 'Ad can only be resized from the default or resized state.', 'resize');
+    } else if (!resizeProperties.width || !resizeProperties.height) {
+      broadcastEvent(EVENTS.ERROR, 'Must set resize properties before calling resize()', 'resize');
+    } else {
+      var args = ['resize',
+        'width', resizeProperties.width,
+        'height', resizeProperties.height,
+        'offsetX', resizeProperties.offsetX || 0,
+        'offsetY', resizeProperties.offsetY || 0,
+        'customClosePosition', resizeProperties.customClosePosition,
+        'allowOffscreen', !!resizeProperties.allowOffscreen
+        ];
+
+      bridge.executeNativeCall(args);
+    } 
   };
 
-  mraid.getMaxSize = function() {
-    bridge.executeNativeCall('getMaxSize');
+  mraid.getResizeProperties = function() {
+    var properties = {
+      width: resizeProperties.width,
+      height: resizeProperties.height,
+      offsetX: resizeProperties.offsetX,
+      offsetY: resizeProperties.offsetY,
+      customClosePosition: resizeProperties.customClosePosition,
+      allowOffscreen: resizeProperties.allowOffscreen
+    };
+    return properties;
   };
 
-  mraid.getScreenSize = function() {
-    bridge.executeNativeCall('getScreenSize');
+  mraid.setResizeProperties = function(properties) {
+    if (validate(properties, resizePropertyValidators, 'setResizeProperties', true)) {
+
+      var desiredProperties = ['width', 'height', 'offsetX', 'offsetY', 'customClosePosition', 'allowOffscreen'];
+
+      var length = desiredProperties.length;
+
+      for (var i = 0; i < length; i++) {
+        var propname = desiredProperties[i];
+        if (properties.hasOwnProperty(propname)) {
+          resizeProperties[propname] = properties[propname];
+        }
+      }
+    }
   };
 
   var CalendarEventParser = {
@@ -659,7 +793,7 @@
       var validValues = ['opaque', 'transparent'];
 
       if (this.parameters.hasOwnProperty('transparency')) {
-        var transparency = this.parameters['transparency'];
+        var transparency = this.parameters.transparency;
         if (contains(transparency, validValues)) {
           this.arguments.push('transparency');
           this.arguments.push(transparency);
@@ -684,7 +818,7 @@
 
     parseRecurrenceInterval: function(recurrenceDict) {
       if (recurrenceDict.hasOwnProperty('interval')) {
-        var interval = recurrenceDict['interval'];
+        var interval = recurrenceDict.interval;
         if (!interval) {
           this.errors.push('Recurrence interval cannot be null.');
         } else {
@@ -700,7 +834,7 @@
 
     parseRecurrenceFrequency: function(recurrenceDict) {
       if (recurrenceDict.hasOwnProperty('frequency')) {
-        var frequency = recurrenceDict['frequency'];
+        var frequency = recurrenceDict.frequency;
         var validFrequencies = ['daily', 'weekly', 'monthly', 'yearly'];
         if (contains(frequency, validFrequencies)) {
           this.arguments.push('frequency');
@@ -712,7 +846,7 @@
     },
 
     parseRecurrenceEndDate: function(recurrenceDict) {
-      var expires = recurrenceDict['expires'];
+      var expires = recurrenceDict.expires;
 
       if (!expires) {
         return;
@@ -744,6 +878,6 @@
         this.arguments.push(kind);
         this.arguments.push(dateString);
       }
-    },
+    }
   };
 }());
\ No newline at end of file
diff --git a/mopub-sdk/pom.xml b/mopub-sdk/pom.xml
index 6b8156e6..e6a407c6 100644
--- a/mopub-sdk/pom.xml
+++ b/mopub-sdk/pom.xml
@@ -22,6 +22,12 @@
     <dependencies>
 
         <!--main-->
+        <dependency>
+            <groupId>com.android.support</groupId>
+            <artifactId>support-annotations</artifactId>
+            <version>20.0.0</version>
+        </dependency>
+
         <dependency>
             <groupId>com.android.support</groupId>
             <artifactId>support-v4</artifactId>
diff --git a/mopub-sdk/proguard.txt b/mopub-sdk/proguard.txt
index 17b5b82f..4ec21998 100644
--- a/mopub-sdk/proguard.txt
+++ b/mopub-sdk/proguard.txt
@@ -14,3 +14,4 @@
 # Support for Android Advertiser ID.
 -keep class com.google.android.gms.common.GooglePlayServicesUtil {*;}
 -keep class com.google.android.gms.ads.identifier.AdvertisingIdClient {*;}
+-keep class com.google.android.gms.ads.identifier.AdvertisingIdClient$Info {*;}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/AdUrlGenerator.java b/mopub-sdk/src/main/java/com/mopub/common/AdUrlGenerator.java
index 2a012bed..dcbec7dd 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/AdUrlGenerator.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/AdUrlGenerator.java
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 import android.location.Location;
+import android.support.annotation.Nullable;
 
 import com.mopub.common.util.IntentUtils;
 
@@ -52,10 +53,24 @@ protected void setKeywords(String keywords) {
         addParam("q", keywords);
     }
 
-    protected void setLocation(Location location) {
-        if (location != null) {
-            addParam("ll", location.getLatitude() + "," + location.getLongitude());
-            addParam("lla", "" + (int) location.getAccuracy());
+    protected void setLocation(@Nullable Location location) {
+        Location bestLocation = location;
+        Location locationFromLocationService = LocationService.getLastKnownLocation(mContext,
+                MoPub.getLocationPrecision(),
+                MoPub.getLocationAwareness());
+
+        if (locationFromLocationService != null &&
+                (location == null || locationFromLocationService.getTime() >= location.getTime())) {
+            bestLocation = locationFromLocationService;
+        }
+
+        if (bestLocation != null) {
+            addParam("ll", bestLocation.getLatitude() + "," + bestLocation.getLongitude());
+            addParam("lla", "" + (int) bestLocation.getAccuracy());
+
+            if (bestLocation == locationFromLocationService) {
+                addParam("llsdk", "1");
+            }
         }
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/common/BaseUrlGenerator.java b/mopub-sdk/src/main/java/com/mopub/common/BaseUrlGenerator.java
index 2b7eb021..4bae8ed4 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/BaseUrlGenerator.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/BaseUrlGenerator.java
@@ -1,8 +1,7 @@
 package com.mopub.common;
 
 import android.net.Uri;
-
-import static com.mopub.common.util.Strings.isEmpty;
+import android.text.TextUtils;
 
 public abstract class BaseUrlGenerator {
     private static final String IFA_PREFIX = "ifa:";
@@ -23,7 +22,7 @@ protected String getFinalUrlString() {
     }
 
     protected void addParam(String key, String value) {
-        if (value == null || isEmpty(value)) {
+        if (TextUtils.isEmpty(value)) {
             return;
         }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/common/ClientMetadata.java b/mopub-sdk/src/main/java/com/mopub/common/ClientMetadata.java
index 6589c171..d04724b8 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/ClientMetadata.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/ClientMetadata.java
@@ -1,18 +1,23 @@
 package com.mopub.common;
 
 import android.content.Context;
+import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageInfo;
+import android.content.pm.PackageManager;
 import android.content.res.Configuration;
 import android.net.ConnectivityManager;
 import android.net.NetworkInfo;
 import android.os.Build;
 import android.provider.Settings;
 import android.telephony.TelephonyManager;
+import android.view.Display;
+import android.view.WindowManager;
 
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Utils;
 
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
+import static android.content.pm.PackageManager.NameNotFoundException;
 import static android.content.pm.PackageManager.PERMISSION_GRANTED;
 
 /**
@@ -30,50 +35,17 @@
     private static final String SHA_PREFIX = "sha:";
     private static final int UNKNOWN_NETWORK = -1;
 
-    private static volatile ClientMetadata sInstance;
-
-    private String mNetworkOperator;
-    private String mIsoCountryCode;
+    private String mNetworkOperatorForUrl;
+    private final String mNetworkOperator;
+    private String mSimOperator;
+    private final String mIsoCountryCode;
+    private final String mSimIsoCountryCode;
     private String mNetworkOperatorName;
+    private String mSimOperatorName;
     private String mUdid;
     private boolean mDoNotTrack = false;
     private boolean mAdvertisingInfoSet = false;
 
-    /**
-     * Returns the singleton ClientMetadata object, using the context to obtain data if necessary.
-     */
-    public static ClientMetadata getInstance(Context context) {
-        // Use a local variable so we can reduce accesses of the volatile field.
-        ClientMetadata result = sInstance;
-        if (result == null) {
-            synchronized (ClientMetadata.class) {
-                result = sInstance;
-                if (result == null) {
-                    result = new ClientMetadata(context);
-                    sInstance = result;
-                }
-            }
-        }
-        return result;
-    }
-
-    /**
-     * Can be used by background threads and other objects without a context to attempt to get
-     * ClientMetadata. If the object has never been referenced from a thread with a context,
-     * this will return null.
-     */
-    public static ClientMetadata getInstance() {
-        ClientMetadata result = sInstance;
-        if (result == null) {
-            // If it's being initialized in another thread, wait for the lock.
-            synchronized (ClientMetadata.class) {
-                result = sInstance;
-            }
-        }
-
-        return result;
-    }
-
     public static enum MoPubNetworkType {
         UNKNOWN(0),
         ETHERNET(1),
@@ -109,42 +81,110 @@ private static MoPubNetworkType fromAndroidNetworkType(int type) {
         }
     }
 
+    private static ClientMetadata sInstance;
+
     // Cached client metadata used for generating URLs and events.
     private final String mDeviceManufacturer;
     private final String mDeviceModel;
     private final String mDeviceProduct;
+    private final String mDeviceOsVersion;
+    private final int mDeviceScreenWidthPx;
+    private final int mDeviceScreenHeightPx;
     private final String mSdkVersion;
     private final String mAppVersion;
+    private final String mAppPackageName;
+    private String mAppName;
     private final Context mContext;
     private final ConnectivityManager mConnectivityManager;
 
-    private ClientMetadata(Context context) {
+    /**
+     * Returns the singleton ClientMetadata object, using the context to obtain data if necessary.
+     */
+    public static ClientMetadata getInstance(Context context) {
+        // Use a local variable so we can reduce accesses of the volatile field.
+        ClientMetadata result = sInstance;
+        if (result == null) {
+            synchronized (ClientMetadata.class) {
+                result = sInstance;
+                if (result == null) {
+                    result = new ClientMetadata(context);
+                    sInstance = result;
+                }
+            }
+        }
+        return result;
+    }
+
+    /**
+     * Can be used by background threads and other objects without a context to attempt to get
+     * ClientMetadata. If the object has never been referenced from a thread with a context,
+     * this will return null.
+     */
+    public static ClientMetadata getInstance() {
+        ClientMetadata result = sInstance;
+        if (result == null) {
+            // If it's being initialized in another thread, wait for the lock.
+            synchronized (ClientMetadata.class) {
+                result = sInstance;
+            }
+        }
+
+        return result;
+    }
+
+
+    // NEVER CALL THIS AS A USER. Get it from the Singletons class.
+    public ClientMetadata(Context context) {
         mContext = context.getApplicationContext();
         mConnectivityManager =
                 (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);
         mDeviceManufacturer = Build.MANUFACTURER;
         mDeviceModel = Build.MODEL;
         mDeviceProduct = Build.PRODUCT;
+        mDeviceOsVersion = Build.VERSION.RELEASE;
+
+        WindowManager wm = (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);
+        Display display = wm.getDefaultDisplay();
+        mDeviceScreenWidthPx = display.getWidth();
+        mDeviceScreenHeightPx = display.getHeight();
+
         mSdkVersion = MoPub.SDK_VERSION;
 
         // Cache context items that don't change:
         mAppVersion = getAppVersionFromContext(mContext);
+        PackageManager packageManager = mContext.getPackageManager();
+        ApplicationInfo applicationInfo = null;
+        mAppPackageName = context.getPackageName();
+        try {
+            applicationInfo = packageManager.getApplicationInfo(mAppPackageName, 0);
+        } catch (final NameNotFoundException e) {
+            // swallow
+        }
+        if (applicationInfo != null) {
+            mAppName = (String) packageManager.getApplicationLabel(applicationInfo);
+        }
 
         final TelephonyManager telephonyManager =
                 (TelephonyManager) mContext.getSystemService(Context.TELEPHONY_SERVICE);
-
+        mNetworkOperatorForUrl = telephonyManager.getNetworkOperator();
         mNetworkOperator = telephonyManager.getNetworkOperator();
         if (telephonyManager.getPhoneType() == TelephonyManager.PHONE_TYPE_CDMA &&
                 telephonyManager.getSimState() == TelephonyManager.SIM_STATE_READY) {
-            mNetworkOperator = telephonyManager.getSimOperator();
+            mNetworkOperatorForUrl = telephonyManager.getSimOperator();
+            mSimOperator = telephonyManager.getSimOperator();
         }
 
         mIsoCountryCode = telephonyManager.getNetworkCountryIso();
+        mSimIsoCountryCode = telephonyManager.getSimCountryIso();
         try {
             // Some Lenovo devices require READ_PHONE_STATE here.
             mNetworkOperatorName = telephonyManager.getNetworkOperatorName();
+            if (telephonyManager.getSimState() == TelephonyManager.SIM_STATE_READY) {
+                mSimOperatorName = telephonyManager.getSimOperatorName();
+            }
         } catch (SecurityException e) {
             mNetworkOperatorName = null;
+            mSimOperatorName = null;
         }
 
         // Get the device ID. This will be replaced later when the Play Services callbacks complete.
@@ -205,6 +245,13 @@ public float getDensity() {
         return mContext.getResources().getDisplayMetrics().density;
     }
 
+    /**
+     * @return the network operator for URL generators.
+     */
+    public String getNetworkOperatorForUrl() {
+        return mNetworkOperatorForUrl;
+    }
+
     /**
      * @return the network operator.
      */
@@ -212,6 +259,13 @@ public String getNetworkOperator() {
         return mNetworkOperator;
     }
 
+    /**
+     * @return the sim operator.
+     */
+    public String getSimOperator() {
+        return mSimOperator;
+    }
+
     /**
      * @return the country code of the device.
      */
@@ -219,6 +273,13 @@ public String getIsoCountryCode() {
         return mIsoCountryCode;
     }
 
+    /**
+     * @return the sim provider's country code.
+     */
+    public String getSimIsoCountryCode() {
+        return mSimIsoCountryCode;
+    }
+
     /**
      * @return the network operator name.
      */
@@ -226,6 +287,13 @@ public String getNetworkOperatorName() {
         return mNetworkOperatorName;
     }
 
+    /**
+     * @return the sim operator name.
+     */
+    public String getSimOperatorName() {
+        return mSimOperatorName;
+    }
+
     /**
      * @return the stored device ID.
      */
@@ -272,6 +340,27 @@ public String getDeviceProduct() {
         return mDeviceProduct;
     }
 
+    /**
+     * @return the device os version.
+     */
+    public String getDeviceOsVersion() {
+        return mDeviceOsVersion;
+    }
+
+    /**
+     * @return the device screen width in pixels.
+     */
+    public int getDeviceScreenWidthPx() {
+        return mDeviceScreenWidthPx;
+    }
+
+    /**
+     * @return the device screen height in pixels.
+     */
+    public int getDeviceScreenHeightPx() {
+        return mDeviceScreenHeightPx;
+    }
+
     /**
      * @return the MoPub SDK Version.
      */
@@ -286,8 +375,22 @@ public String getAppVersion() {
         return mAppVersion;
     }
 
+    /**
+     * @return the package of the application the SDK is included in.
+     */
+    public String getAppPackageName() {
+        return mAppPackageName;
+    }
+
+    /**
+     * @return the name of the application the SDK is included in.
+     */
+    public String getAppName() {
+        return mAppName;
+    }
+
     @VisibleForTesting
-    public static synchronized void clearForTesting() {
+    public static void clearForTesting() {
         sInstance = null;
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/CloseableLayout.java b/mopub-sdk/src/main/java/com/mopub/common/CloseableLayout.java
new file mode 100644
index 00000000..a38f4b52
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/CloseableLayout.java
@@ -0,0 +1,295 @@
+package com.mopub.common;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Rect;
+import android.graphics.drawable.StateListDrawable;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.Gravity;
+import android.view.MotionEvent;
+import android.view.SoundEffectConstants;
+import android.view.ViewConfiguration;
+import android.widget.FrameLayout;
+
+import com.mopub.common.util.Dips;
+
+import static com.mopub.common.util.Drawables.INTERSTITIAL_CLOSE_BUTTON_NORMAL;
+import static com.mopub.common.util.Drawables.INTERSTITIAL_CLOSE_BUTTON_PRESSED;
+
+/**
+ * CloseableLayout provides a layout class that shows a close button, and allows setting a
+ * {@link OnCloseListener}. Otherwise CloseableLayout behaves identically to
+ * {@link FrameLayout}.
+ *
+ * Rather than adding a button to the view tree, CloseableLayout is designed to draw the close
+ * button directly on the canvas and to track MotionEvents on its close region. While
+ * marginally more efficient, the main benefit to this is that CloseableLayout can function
+ * exactly as a regular FrameLayout without needing to override addView, removeView,
+ * removeAllViews, and a host of other methods.
+ *
+ * You can hide the close button using {@link #setCloseVisible} and change its position
+ * using {@link #setClosePosition}.
+ */
+public class CloseableLayout extends FrameLayout {
+    public interface OnCloseListener {
+        void onClose();
+    }
+
+    @VisibleForTesting
+    static final float CLOSE_BUTTON_SIZE_DP = 30.0f;
+    static final float CLOSE_REGION_SIZE_DP = 50.0f;
+
+    @VisibleForTesting
+    static final float CLOSE_BUTTON_PADDING_DP = 8.0f;
+
+    /**
+     * Defines a subset of supported gravity combinations for the CloseableLayout. These values
+     * include the possible values for customClosePosition as defined in the
+     * <a href="http://www.iab.net/media/file/IAB_MRAID_v2_FINAL.pdf">MRAID 2.0
+     * specification</a>.
+     */
+    public static enum ClosePosition {
+        TOP_LEFT(Gravity.TOP | Gravity.LEFT),
+        TOP_CENTER(Gravity.TOP | Gravity.CENTER_HORIZONTAL),
+        TOP_RIGHT(Gravity.TOP | Gravity.RIGHT),
+        CENTER(Gravity.CENTER),
+        BOTTOM_LEFT(Gravity.BOTTOM | Gravity.LEFT),
+        BOTTOM_CENTER(Gravity.BOTTOM | Gravity.CENTER_HORIZONTAL),
+        BOTTOM_RIGHT(Gravity.BOTTOM | Gravity.RIGHT);
+
+        private final int mGravity;
+
+        ClosePosition(final int mGravity) {
+            this.mGravity = mGravity;
+        }
+
+        int getGravity() {
+            return mGravity;
+        }
+    }
+
+    // Used in onTouchEvent to be lenient about moving outside the close button bounds. This is the
+    // same pattern used in the Android framework to handle click events.
+    private final int mTouchSlop;
+
+    @Nullable
+    private OnCloseListener mOnCloseListener;
+
+    @NonNull
+    private final StateListDrawable mCloseDrawable;
+    @NonNull
+    private ClosePosition mClosePosition;
+    private final int mCloseRegionSize;  // Size of the touchable close region.
+    private final int mCloseButtonSize;  // Size of the drawn close button.
+    private final int mCloseButtonPadding;
+
+    // Whether we need to recalculate the close bounds on the next draw pass
+    private boolean mCloseBoundChanged;
+
+    // Hang on to our bounds Rects so we don't allocate memory in the draw() method.
+    private final Rect mClosableLayoutRect = new Rect();
+    private final Rect mCloseRegionBounds = new Rect();
+    private final Rect mCloseButtonBounds = new Rect();
+    private final Rect mInsetCloseRegionBounds = new Rect();
+
+    @Nullable
+    private UnsetPressedState mUnsetPressedState;
+
+    public CloseableLayout(@NonNull Context context) {
+        super(context);
+
+        mCloseDrawable = new StateListDrawable();
+        mClosePosition = ClosePosition.TOP_RIGHT;
+
+        mCloseDrawable.addState(SELECTED_STATE_SET,
+                INTERSTITIAL_CLOSE_BUTTON_PRESSED.createDrawable(context));
+        mCloseDrawable.addState(EMPTY_STATE_SET,
+                INTERSTITIAL_CLOSE_BUTTON_NORMAL.createDrawable(context));
+
+        mCloseDrawable.setState(EMPTY_STATE_SET);
+        mCloseDrawable.setCallback(this);
+
+        mTouchSlop = ViewConfiguration.get(context).getScaledTouchSlop();
+
+        mCloseRegionSize = Dips.asIntPixels(CLOSE_REGION_SIZE_DP, context);
+        mCloseButtonSize = Dips.asIntPixels(CLOSE_BUTTON_SIZE_DP, context);
+        mCloseButtonPadding = Dips.asIntPixels(CLOSE_BUTTON_PADDING_DP, context);
+
+        setWillNotDraw(false);
+    }
+
+    public void setOnCloseListener(@Nullable OnCloseListener onCloseListener) {
+        mOnCloseListener = onCloseListener;
+    }
+
+    public void setClosePosition(@NonNull ClosePosition closePosition) {
+        Preconditions.checkNotNull(closePosition);
+
+        mClosePosition = closePosition;
+        mCloseBoundChanged = true;
+        invalidate();
+    }
+
+    public void setCloseVisible(boolean visible) {
+        if (mCloseDrawable.setVisible(visible, false)) {
+            invalidate(mCloseRegionBounds);
+        }
+    }
+
+    @Override
+    protected void onSizeChanged(int width, int height, int oldWidth, int oldHeight) {
+        super.onSizeChanged(width, height, oldWidth, oldHeight);
+        mCloseBoundChanged = true;
+    }
+
+    @Override
+    public void draw(@NonNull final Canvas canvas) {
+        super.draw(canvas);
+
+        // Only recalculate the close bounds if they are dirty
+        if (mCloseBoundChanged) {
+            mCloseBoundChanged = false;
+
+            mClosableLayoutRect.set(0, 0, getWidth(), getHeight());
+            // Create the bounds for our close regions.
+            applyCloseRegionBounds(mClosePosition, mClosableLayoutRect, mCloseRegionBounds);
+
+            // The inset rect applies padding around the visible closeButton.
+            mInsetCloseRegionBounds.set(mCloseRegionBounds);
+            mInsetCloseRegionBounds.inset(mCloseButtonPadding, mCloseButtonPadding);
+            // The close button sits inside the close region with padding and gravity
+            // in the same way the close region sits inside the whole ClosableLayout
+            applyCloseButtonBounds(mClosePosition, mInsetCloseRegionBounds, mCloseButtonBounds);
+            mCloseDrawable.setBounds(mCloseButtonBounds);
+        }
+
+        // Draw last so that this gets drawn as the top layer. This is also why we override
+        // draw instead of onDraw.
+        if (mCloseDrawable.isVisible()) {
+            mCloseDrawable.draw(canvas);
+        }
+    }
+
+    public void applyCloseRegionBounds(ClosePosition closePosition, Rect bounds, Rect closeBounds) {
+        applyCloseBoundsWithSize(closePosition, mCloseRegionSize, bounds, closeBounds);
+    }
+
+    private void applyCloseButtonBounds(ClosePosition closePosition, Rect bounds, Rect outBounds) {
+        applyCloseBoundsWithSize(closePosition, mCloseButtonSize, bounds, outBounds);
+    }
+
+    private void applyCloseBoundsWithSize(ClosePosition closePosition, final int size, Rect bounds, Rect outBounds) {
+        Gravity.apply(closePosition.getGravity(), size, size, bounds, outBounds);
+    }
+
+    @Override
+    public boolean onInterceptTouchEvent(@NonNull final MotionEvent event) {
+        // See http://developer.android.com/training/gestures/viewgroup.html for details on
+        // capturing motion events
+
+        // Start intercepting touch events only when we see a down event
+        if (event.getAction() != MotionEvent.ACTION_DOWN) {
+            return false;
+        }
+
+        // Start intercepting if the down event is in the close bounds. Returning true
+        // here causes onTouchEvent to get called for all events up until ACTION_CANCEL gets called.
+        final int x = (int) event.getX();
+        final int y = (int) event.getY();
+        return pointInCloseBounds(x, y, 0);
+    }
+
+    @Override
+    public boolean onTouchEvent(@NonNull MotionEvent event) {
+        // Stop receiving touch events if we aren't within the bounds, including some slop.
+        final int x = (int) event.getX();
+        final int y = (int) event.getY();
+        if (!pointInCloseBounds(x, y, mTouchSlop)) {
+            setClosePressed(false);
+            super.onTouchEvent(event);
+            return false;
+        }
+
+        switch (event.getAction()) {
+            case MotionEvent.ACTION_DOWN:
+                setClosePressed(true);
+                break;
+            case MotionEvent.ACTION_CANCEL:
+                // Cancelled by a parent
+                setClosePressed(false);
+                break;
+            case MotionEvent.ACTION_UP:
+                if (isClosePressed()) {
+                    // Delay setting the unpressed state so that the button remains pressed
+                    // at least long enough to respond to the close event.
+                    if (mUnsetPressedState == null) {
+                        mUnsetPressedState = new UnsetPressedState();
+                    }
+                    postDelayed(mUnsetPressedState, ViewConfiguration.getPressedStateDuration());
+                    performClose();
+                }
+                break;
+        }
+        return true;
+    }
+
+    private void setClosePressed(boolean pressed) {
+        if (pressed == isClosePressed()) {
+            return;
+        }
+
+        mCloseDrawable.setState(pressed ? SELECTED_STATE_SET : EMPTY_STATE_SET);
+        invalidate(mCloseRegionBounds);
+    }
+
+    @VisibleForTesting
+    boolean isClosePressed() {
+        return mCloseDrawable.getState() == SELECTED_STATE_SET;
+    }
+
+    @VisibleForTesting
+    boolean pointInCloseBounds(int x, int y, int slop) {
+        return x >= mCloseRegionBounds.left - slop
+                && y >= mCloseRegionBounds.top - slop
+                && x < mCloseRegionBounds.right + slop
+                && y < mCloseRegionBounds.bottom + slop;
+    }
+
+    private void performClose() {
+        playSoundEffect(SoundEffectConstants.CLICK);
+        if (mOnCloseListener != null) {
+            mOnCloseListener.onClose();
+        }
+    }
+
+    /**
+     * This is a copy of the UnsetPressedState pattern from Android's View.java, which is used
+     * to unset the pressed state of a button after a delay.
+     */
+    private final class UnsetPressedState implements Runnable {
+        public void run() {
+            setClosePressed(false);
+        }
+    }
+
+    @VisibleForTesting
+    void setCloseBounds(Rect closeBounds) {
+        mCloseRegionBounds.set(closeBounds);
+    }
+
+    @VisibleForTesting
+    Rect getCloseBounds() {
+        return mCloseRegionBounds;
+    }
+
+    @VisibleForTesting
+    void setCloseBoundChanged(boolean changed) {
+        mCloseBoundChanged = changed;
+    }
+
+    @VisibleForTesting
+    public boolean isCloseVisible() {
+        return mCloseDrawable.isVisible();
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/Constants.java b/mopub-sdk/src/main/java/com/mopub/common/Constants.java
new file mode 100644
index 00000000..ec576679
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/Constants.java
@@ -0,0 +1,11 @@
+package com.mopub.common;
+
+public class Constants {
+    private Constants() {}
+
+    public static String HOST = "ads.mopub.com";
+
+    public static final String AD_HANDLER = "/m/ad";
+    public static final String CONVERSION_TRACKING_HANDLER = "/m/open";
+    public static final String POSITIONING_HANDLER = "/m/pos";
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/DiskLruCache.java b/mopub-sdk/src/main/java/com/mopub/common/DiskLruCache.java
index 0c603e66..c62d6594 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/DiskLruCache.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/DiskLruCache.java
@@ -16,6 +16,8 @@
 
 package com.mopub.common;
 
+import android.support.annotation.NonNull;
+
 import java.io.BufferedWriter;
 import java.io.Closeable;
 import java.io.EOFException;
@@ -846,7 +848,7 @@ private FaultHidingOutputStream(OutputStream out) {
         }
       }
 
-      @Override public void write(byte[] buffer, int offset, int length) {
+      @Override public void write(@NonNull byte[] buffer, int offset, int length) {
         try {
           out.write(buffer, offset, length);
         } catch (IOException e) {
diff --git a/mopub-sdk/src/main/java/com/mopub/common/DownloadResponse.java b/mopub-sdk/src/main/java/com/mopub/common/DownloadResponse.java
index 6b396539..6ce126e8 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/DownloadResponse.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/DownloadResponse.java
@@ -4,6 +4,7 @@
 import com.mopub.common.util.Streams;
 
 import org.apache.http.Header;
+import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
 
 import java.io.BufferedInputStream;
@@ -19,9 +20,12 @@ public DownloadResponse(final HttpResponse httpResponse) throws Exception {
         final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
         BufferedInputStream inputStream = null;
         try {
-            inputStream = new BufferedInputStream(httpResponse.getEntity().getContent());
-            Streams.copyContent(inputStream, outputStream);
-            mBytes = outputStream.toByteArray();
+            HttpEntity httpEntity = httpResponse.getEntity();
+            if (httpEntity != null) {
+                inputStream = new BufferedInputStream(httpEntity.getContent());
+                Streams.copyContent(inputStream, outputStream);
+                mBytes = outputStream.toByteArray();
+            }
         } finally {
             Streams.closeStream(inputStream);
             Streams.closeStream(outputStream);
diff --git a/mopub-sdk/src/main/java/com/mopub/common/DownloadTask.java b/mopub-sdk/src/main/java/com/mopub/common/DownloadTask.java
index fc31c97c..80eed502 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/DownloadTask.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/DownloadTask.java
@@ -2,12 +2,18 @@
 
 import android.net.http.AndroidHttpClient;
 import android.os.AsyncTask;
+
+import com.mopub.common.event.ErrorEvent;
+import com.mopub.common.event.Event;
+import com.mopub.common.event.MoPubEvents;
 import com.mopub.common.logging.MoPubLog;
+
 import org.apache.http.HttpResponse;
 import org.apache.http.client.methods.HttpUriRequest;
 
 public class DownloadTask extends AsyncTask<HttpUriRequest, Void, DownloadResponse> {
     private final DownloadTaskListener mDownloadTaskListener;
+    private final MoPubEvents.Type mEventType;
     private String mUrl;
 
     public static interface DownloadTaskListener {
@@ -15,11 +21,16 @@
     }
 
     public DownloadTask(final DownloadTaskListener downloadTaskListener) throws IllegalArgumentException {
+        this(downloadTaskListener, null);
+    }
+
+    public DownloadTask(final DownloadTaskListener downloadTaskListener, final MoPubEvents.Type eventType) {
         if (downloadTaskListener == null) {
             throw new IllegalArgumentException("DownloadTaskListener must not be null.");
         }
 
         mDownloadTaskListener = downloadTaskListener;
+        mEventType = eventType;
     }
 
     @Override
@@ -31,6 +42,9 @@ protected DownloadResponse doInBackground(final HttpUriRequest... httpUriRequest
 
         final HttpUriRequest httpUriRequest = httpUriRequests[0];
         mUrl = httpUriRequest.getURI().toString();
+        if (mEventType != null) {
+            MoPubEvents.log(new Event.Builder("", "").build());
+        }
 
         AndroidHttpClient httpClient = null;
         try {
@@ -39,7 +53,6 @@ protected DownloadResponse doInBackground(final HttpUriRequest... httpUriRequest
             return new DownloadResponse(httpResponse);
         } catch (Exception e) {
             MoPubLog.d("Download task threw an internal exception", e);
-            cancel(true);
             return null;
         } finally {
             if (httpClient != null) {
@@ -60,6 +73,6 @@ protected void onPostExecute(final DownloadResponse downloadResponse) {
 
     @Override
     protected void onCancelled() {
-        mDownloadTaskListener.onComplete(mUrl, null);
+        MoPubLog.d("DownloadTask was cancelled.");
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java b/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java
index 75b9bdf7..274f7752 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 import android.os.AsyncTask;
+
 import com.mopub.common.factories.MethodBuilderFactory;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.AsyncTasks;
@@ -114,7 +115,7 @@ protected Void doInBackground(Void... voids) {
                     updateClientMetadata(context, adInfo);
                 }
             } catch (Exception exception) {
-                MoPubLog.d("Unable to obtain AdvertisingIdClient.getAdvertisingIdInfo()");
+                MoPubLog.d("Unable to obtain Google AdvertisingIdClient.Info via reflection.");
             }
 
             return null;
diff --git a/mopub-sdk/src/main/java/com/mopub/common/HttpClient.java b/mopub-sdk/src/main/java/com/mopub/common/HttpClient.java
index 88e4f7bd..e1d227fd 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/HttpClient.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/HttpClient.java
@@ -4,11 +4,13 @@
 import android.net.http.AndroidHttpClient;
 import android.os.Handler;
 import android.os.Looper;
+import android.text.TextUtils;
 import android.webkit.WebView;
 
+import com.mopub.common.event.MoPubEvents;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.DeviceUtils;
-import com.mopub.common.logging.MoPubLog;
 
 import org.apache.http.HttpStatus;
 import org.apache.http.client.methods.HttpGet;
@@ -26,7 +28,9 @@
     private static String sWebViewUserAgent;
 
     public static AndroidHttpClient getHttpClient() {
-        String userAgent = DeviceUtils.getUserAgent();
+
+        String defaultUserAgent = DeviceUtils.getUserAgent();
+        String userAgent = getWebViewUserAgent(defaultUserAgent);
 
         AndroidHttpClient httpClient = AndroidHttpClient.newInstance(userAgent);
 
@@ -56,6 +60,12 @@ public static HttpGet initializeHttpGet(final String url, final Context context)
     }
 
     public static void makeTrackingHttpRequest(final Iterable<String> urls, final Context context) {
+        makeTrackingHttpRequest(urls, context, null);
+    }
+
+    public static void makeTrackingHttpRequest(final Iterable<String> urls,
+            final Context context,
+            final MoPubEvents.Type type) {
         if (urls == null || context == null) {
             return;
         }
@@ -68,8 +78,7 @@ public void onComplete(final String url, final DownloadResponse downloadResponse
                     return;
                 }
 
-                String result = HttpResponses.asResponseString(downloadResponse);
-
+                final String result = HttpResponses.asResponseString(downloadResponse);
                 if (result != null) {
                     MoPubLog.d("Successfully hit tracking endpoint: " + url);
                 } else {
@@ -86,7 +95,10 @@ public void run() {
                 for (final String url : urls) {
                     try {
                         final HttpGet httpGet = initializeHttpGet(url, appContext);
-                        AsyncTasks.safeExecuteOnExecutor(new DownloadTask(downloadTaskListener), httpGet);
+                        AsyncTasks.safeExecuteOnExecutor(
+                                new DownloadTask(downloadTaskListener, type),
+                                httpGet
+                        );
                     } catch (Exception e) {
                         MoPubLog.d("Failed to hit tracking endpoint: " + url);
                     }
@@ -97,14 +109,35 @@ public void run() {
         new Handler(Looper.getMainLooper()).post(trackingHttpRequestRunnable);
     }
 
-    public static void makeTrackingHttpRequest(final String url, final Context context) {
-        makeTrackingHttpRequest(Arrays.asList(url), context);
+    public static void makeTrackingHttpRequest(final String url,
+            final Context context) {
+        makeTrackingHttpRequest(url, context, null);
     }
 
-    public synchronized static String getWebViewUserAgent() {
+    public static void makeTrackingHttpRequest(final String url,
+            final Context context,
+            final MoPubEvents.Type type) {
+        makeTrackingHttpRequest(Arrays.asList(url), context, type);
+    }
+
+    /**
+     * @param defaultUserAgent the String to return if the WebView user agent hasn't been generated.
+     * @return the user agent of an Android WebView, or {@code defaultUserAgent}
+     */
+    public synchronized static String getWebViewUserAgent(String defaultUserAgent) {
+        if (TextUtils.isEmpty(sWebViewUserAgent)) {
+            return defaultUserAgent;
+        }
         return sWebViewUserAgent;
     }
 
+    /**
+     * @return the user agent of an Androd WebView or {@code null}
+     */
+    public synchronized static String getWebViewUserAgent() {
+        return getWebViewUserAgent(null);
+    }
+
     public synchronized static void setWebViewUserAgent(final String userAgent) {
         sWebViewUserAgent = userAgent;
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
index 808400cf..9700f871 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
@@ -1,7 +1,7 @@
 package com.mopub.common;
 
 public class MoPub {
-    public static final String SDK_VERSION = "3.2.2";
+    public static final String SDK_VERSION = "3.3.0";
 
     public static enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java b/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java
index 4e55f583..e84ef15b 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java
@@ -110,7 +110,7 @@ public boolean shouldOverrideUrlLoading(WebView view, String url) {
             @Override
             public void onPageStarted(WebView view, String url, Bitmap favicon) {
                 super.onPageStarted(view, url, favicon);
-                mForwardButton.setImageDrawable(UNRIGHT_ARROW.decodeImage(MoPubBrowser.this));
+                mForwardButton.setImageDrawable(UNRIGHT_ARROW.createDrawable(MoPubBrowser.this));
             }
 
             @Override
@@ -118,13 +118,13 @@ public void onPageFinished(WebView view, String url) {
                 super.onPageFinished(view, url);
 
                 Drawable backImageDrawable = view.canGoBack()
-                        ? LEFT_ARROW.decodeImage(MoPubBrowser.this)
-                        : UNLEFT_ARROW.decodeImage(MoPubBrowser.this);
+                        ? LEFT_ARROW.createDrawable(MoPubBrowser.this)
+                        : UNLEFT_ARROW.createDrawable(MoPubBrowser.this);
                 mBackButton.setImageDrawable(backImageDrawable);
 
                 Drawable forwardImageDrawable = view.canGoForward()
-                        ? RIGHT_ARROW.decodeImage(MoPubBrowser.this)
-                        : UNRIGHT_ARROW.decodeImage(MoPubBrowser.this);
+                        ? RIGHT_ARROW.createDrawable(MoPubBrowser.this)
+                        : UNRIGHT_ARROW.createDrawable(MoPubBrowser.this);
                 mForwardButton.setImageDrawable(forwardImageDrawable);
             }
         });
@@ -207,13 +207,13 @@ private View getMoPubBrowserView() {
         RelativeLayout.LayoutParams innerLayoutParams = new RelativeLayout.LayoutParams(MATCH_PARENT, WRAP_CONTENT);
         innerLayoutParams.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
         innerLayout.setLayoutParams(innerLayoutParams);
-        innerLayout.setBackgroundDrawable(BACKGROUND.decodeImage(this));
+        innerLayout.setBackgroundDrawable(BACKGROUND.createDrawable(this));
         outerLayout.addView(innerLayout);
 
-        mBackButton = getButton(LEFT_ARROW.decodeImage(this));
-        mForwardButton = getButton(RIGHT_ARROW.decodeImage(this));
-        mRefreshButton = getButton(REFRESH.decodeImage(this));
-        mCloseButton = getButton(CLOSE.decodeImage(this));
+        mBackButton = getButton(LEFT_ARROW.createDrawable(this));
+        mForwardButton = getButton(RIGHT_ARROW.createDrawable(this));
+        mRefreshButton = getButton(REFRESH.createDrawable(this));
+        mCloseButton = getButton(CLOSE.createDrawable(this));
 
         innerLayout.addView(mBackButton);
         innerLayout.addView(mForwardButton);
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/BaseEvent.java b/mopub-sdk/src/main/java/com/mopub/common/event/BaseEvent.java
index 4e053528..439ec8f0 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/event/BaseEvent.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/event/BaseEvent.java
@@ -2,42 +2,368 @@
 
 import com.mopub.common.ClientMetadata;
 
-public abstract class BaseEvent {
-    public enum Type {
-        NETWORK_REQUEST("request"),
-        DATA_ERROR("invalid_data");
+import java.text.SimpleDateFormat;
+import java.util.Date;
 
-        public final String mName;
-        Type(String name) {
-            mName = name;
+import static com.mopub.common.ClientMetadata.MoPubNetworkType;
+
+abstract class BaseEvent {
+    public static enum SdkProduct {
+        NONE(0),
+        WEB_VIEW(1),
+        NATIVE(2);
+
+        public final int mType;
+        SdkProduct(int type) {
+            mType = type;
         }
     }
 
-    private final ClientMetadata mMetadata;
-    private final String mEventName;
-    private final String mRequestUrl;
-    private final long mEventTimeUtcMillis;
+    public static enum AppPlatform {
+        IOS(0),
+        ANDROID(1),
+        MOBILE_WEB(2);
 
-    BaseEvent(Type eventType, String requestUrl, ClientMetadata metadata) {
-        mEventTimeUtcMillis = System.currentTimeMillis();
-        mEventName = eventType.mName;
-        mRequestUrl = requestUrl;
-        mMetadata = metadata;
+        public final int mType;
+        AppPlatform(int type) {
+            mType = type;
+        }
     }
 
-    public long getEventTimeUtcMillis() {
-        return mEventTimeUtcMillis;
-    }
+    private final String mEventName;
+    private final String mEventCategory;
+    private final SdkProduct mSdkProduct;
+    private final String mAdUnitId;
+    private final String mAdCreativeId;
+    private final String mAdType;
+    private final String mAdNetworkType;
+    private final Double mAdWidthPx;
+    private final Double mAdHeightPx;
+    private final Double mGeoLat;
+    private final Double mGeoLon;
+    private final Double mGeoAccuracy;
+    private final Double mPerformanceDurationMs;
+    private final String mRequestId;
+    private final Integer mRequestStatusCode;
+    private final String mRequestUri;
+    private final Integer mRequestRetries;
+    private final long mTimestampUtcMs;
 
-    public String getRequestUrl() {
-        return mRequestUrl;
+    BaseEvent(final Builder builder) {
+        mEventName = builder.mEventName;
+        mEventCategory = builder.mEventCategory;
+        mSdkProduct = builder.mSdkProduct;
+        mAdUnitId = builder.mAdUnitId;
+        mAdCreativeId = builder.mAdCreativeId;
+        mAdType = builder.mAdType;
+        mAdNetworkType = builder.mAdNetworkType;
+        mAdWidthPx = builder.mAdWidthPx;
+        mAdHeightPx = builder.mAdHeightPx;
+        mGeoLat = builder.mGeoLat;
+        mGeoLon = builder.mGeoLon;
+        mGeoAccuracy = builder.mGeoAccuracy;
+        mPerformanceDurationMs = builder.mPerformanceDurationMs;
+        mRequestId = builder.mRequestId;
+        mRequestStatusCode = builder.mRequestStatusCode;
+        mRequestUri = builder.mRequestUri;
+        mRequestRetries = builder.mRequestRetries;
+        mTimestampUtcMs = System.currentTimeMillis();
     }
 
     public String getEventName() {
         return mEventName;
     }
 
-    public ClientMetadata getMetadata() {
-        return mMetadata;
+    public String getEventCategory() {
+        return mEventCategory;
+    }
+
+    public SdkProduct getSdkProduct() {
+        return mSdkProduct;
+    }
+
+    public String getSdkVersion() {
+        return ClientMetadata.getInstance().getSdkVersion();
+    }
+
+    public String getAdUnitId() {
+        return mAdUnitId;
+    }
+
+    public String getAdCreativeId() {
+        return mAdCreativeId;
+    }
+
+    public String getAdType() {
+        return mAdType;
+    }
+
+    public String getAdNetworkType() {
+        return mAdNetworkType;
+    }
+
+    public Double getAdWidthPx() {
+        return mAdWidthPx;
+    }
+
+    public Double getAdHeightPx() {
+        return mAdHeightPx;
+    }
+
+    public AppPlatform getAppPlatform() {
+        return AppPlatform.ANDROID;
+    }
+
+    public String getAppName() {
+        return ClientMetadata.getInstance().getAppName();
+    }
+
+    public String getAppPackageName() {
+        return ClientMetadata.getInstance().getAppPackageName();
+    }
+
+    public String getAppVersion() {
+        return ClientMetadata.getInstance().getAppVersion();
+    }
+
+    public String getClientAdvertisingId() {
+        return ClientMetadata.getInstance().getAdvertisingId();
+    }
+
+    public Boolean getClientDoNotTrack() {
+        return ClientMetadata.getInstance().isDoNotTrackSet();
+    }
+
+    public String getDeviceManufacturer() {
+        return ClientMetadata.getInstance().getDeviceManufacturer();
+    }
+
+    public String getDeviceModel() {
+        return ClientMetadata.getInstance().getDeviceModel();
+    }
+
+    public String getDeviceProduct() {
+        return ClientMetadata.getInstance().getDeviceProduct();
+    }
+
+    public String getDeviceOsVersion() {
+        return ClientMetadata.getInstance().getDeviceOsVersion();
+    }
+
+    public Integer getDeviceScreenWidthPx() {
+        return ClientMetadata.getInstance().getDeviceScreenWidthPx();
+    }
+
+    public Integer getDeviceScreenHeightPx() {
+        return ClientMetadata.getInstance().getDeviceScreenHeightPx();
+    }
+
+    public Double getGeoLat() {
+        return mGeoLat;
+    }
+
+    public Double getGeoLon() {
+        return mGeoLon;
+    }
+
+    public Double getGeoAccuracy() {
+        return mGeoAccuracy;
+    }
+
+    public Double getPerformanceDurationMs() {
+        return mPerformanceDurationMs;
+    }
+
+    public MoPubNetworkType getNetworkType() {
+        return ClientMetadata.getInstance().getActiveNetworkType();
+    }
+
+    public String getNetworkOperatorCode() {
+        return ClientMetadata.getInstance().getNetworkOperator();
+    }
+
+    public String getNetworkOperatorName() {
+        return ClientMetadata.getInstance().getNetworkOperatorName();
+    }
+
+    public String getNetworkIsoCountryCode() {
+        return ClientMetadata.getInstance().getIsoCountryCode();
+    }
+
+    public String getNetworkSimCode() {
+        return ClientMetadata.getInstance().getSimOperator();
+    }
+
+    public String getNetworkSimOperatorName() {
+        return ClientMetadata.getInstance().getSimOperatorName();
+    }
+
+    public String getNetworkSimIsoCountryCode() {
+        return ClientMetadata.getInstance().getSimIsoCountryCode();
+    }
+
+    public String getRequestId() {
+        return mRequestId;
+    }
+
+    public Integer getRequestStatusCode() {
+        return mRequestStatusCode;
+    }
+
+    public String getRequestUri() {
+        return mRequestUri;
+    }
+
+    public Integer getRequestRetries() {
+        return mRequestRetries;
+    }
+
+    public long getTimestampUtcMs() {
+        return mTimestampUtcMs;
+    }
+
+    @Override
+    public String toString() {
+        return  "BaseEvent\n" +
+                "EventName: " + getEventName() + "\n" +
+                "EventCategory: " + getEventCategory() + "\n" +
+                "SdkProduct: " + getSdkProduct() + "\n" +
+                "SdkVersion: " + getSdkVersion() + "\n" +
+                "AdUnitId: " + getAdUnitId() + "\n" +
+                "AdCreativeId: " + getAdCreativeId() + "\n" +
+                "AdType: " + getAdType() + "\n" +
+                "AdNetworkType: " + getAdNetworkType() + "\n" +
+                "AdWidthPx: " + getAdWidthPx() + "\n" +
+                "AdHeightPx: " + getAdHeightPx() + "\n" +
+                "AppPlatform: " + getAppPlatform() + "\n" +
+                "AppName: " + getAppName() + "\n" +
+                "AppPackageName: " + getAppPackageName() + "\n" +
+                "AppVersion: " + getAppVersion() + "\n" +
+                "ClientAdvertisingId: " + getClientAdvertisingId() + "\n" +
+                "ClientDoNotTrack: " + getClientDoNotTrack() + "\n" +
+                "DeviceManufacturer: " + getDeviceManufacturer() + "\n" +
+                "DeviceModel: " + getDeviceModel() + "\n" +
+                "DeviceProduct: " + getDeviceProduct() + "\n" +
+                "DeviceOsVersion: " + getDeviceOsVersion() + "\n" +
+                "DeviceScreenWidth: " + getDeviceScreenWidthPx() + "\n" +
+                "DeviceScreenHeight: " + getDeviceScreenHeightPx() + "\n" +
+                "GeoLat: " + getGeoLat() + "\n" +
+                "GeoLon: " + getGeoLon() + "\n" +
+                "GeoAccuracy: " + getGeoAccuracy() + "\n" +
+                "PerformanceDurationMs: " + getPerformanceDurationMs() + "\n" +
+                "NetworkType: " + getNetworkType() + "\n" +
+                "NetworkOperatorCode: " + getNetworkOperatorCode() + "\n" +
+                "NetworkOperatorName: " + getNetworkOperatorName() + "\n" +
+                "NetworkIsoCountryCode: " + getNetworkIsoCountryCode() + "\n" +
+                "NetworkSimCode: " + getNetworkSimCode() + "\n" +
+                "NetworkSimOperatorName: " + getNetworkSimOperatorName() + "\n" +
+                "NetworkSimIsoCountryCode: " + getNetworkSimIsoCountryCode() + "\n" +
+                "RequestId: " + getRequestId() + "\n" +
+                "RequestStatusCode: " + getRequestStatusCode() + "\n" +
+                "RequestUri: " + getRequestUri() + "\n" +
+                "RequestRetries" + getRequestRetries() + "\n" +
+                "TimestampUtcMs: " + new SimpleDateFormat().format(new Date(getTimestampUtcMs())) + "\n";
+    }
+
+    static abstract class Builder {
+        private String mEventName;
+        private String mEventCategory;
+        private SdkProduct mSdkProduct;
+        private String mAdUnitId;
+        private String mAdCreativeId;
+        private String mAdType;
+        private String mAdNetworkType;
+        private Double mAdWidthPx;
+        private Double mAdHeightPx;
+        private Double mGeoLat;
+        private Double mGeoLon;
+        private Double mGeoAccuracy;
+        private Double mPerformanceDurationMs;
+        private String mRequestId;
+        private Integer mRequestStatusCode;
+        private String mRequestUri;
+        private Integer mRequestRetries;
+
+        public Builder(String eventName, String eventCategory) {
+            mEventName = eventName;
+            mEventCategory = eventCategory;
+        }
+
+        public Builder withSdkProduct(SdkProduct sdkProduct) {
+            mSdkProduct = sdkProduct;
+            return this;
+        }
+
+        public Builder withAdUnitId(String adUnitId) {
+            mAdUnitId = adUnitId;
+            return this;
+        }
+
+        public Builder withAdCreativeId(String adCreativeId) {
+            mAdCreativeId = adCreativeId;
+            return this;
+        }
+
+        public Builder withAdType(String adType) {
+            mAdType = adType;
+            return this;
+        }
+
+        public Builder withAdNetworkType(String adNetworkType) {
+            mAdNetworkType = adNetworkType;
+            return this;
+        }
+
+        public Builder withAdWidthPx(Double adWidthPx) {
+            mAdWidthPx = adWidthPx;
+            return this;
+        }
+
+        public Builder withAdHeightPx(Double adHeightPx) {
+            mAdHeightPx = adHeightPx;
+            return this;
+        }
+
+        public Builder withGeoLat(Double geoLat) {
+            mGeoLat = geoLat;
+            return this;
+        }
+
+        public Builder withGeoLon(Double geoLon) {
+            mGeoLon = geoLon;
+            return this;
+        }
+
+        public Builder withGeoAccuracy(Double geoAccuracy) {
+            mGeoAccuracy = geoAccuracy;
+            return this;
+        }
+
+        public Builder withPerformanceDurationMs(Double performanceDurationMs) {
+            mPerformanceDurationMs = performanceDurationMs;
+            return this;
+        }
+
+        public Builder withRequestId(String requestId) {
+            mRequestId = requestId;
+            return this;
+        }
+
+        public Builder withRequestStatusCode(Integer requestStatusCode) {
+            mRequestStatusCode = requestStatusCode;
+            return this;
+        }
+
+        public Builder withRequestUri(String requestUri) {
+            mRequestUri = requestUri;
+            return this;
+        }
+
+        public Builder withRequestRetries(Integer requestRetries) {
+            mRequestRetries = requestRetries;
+            return this;
+        }
+
+        public abstract BaseEvent build();
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/ErrorEvent.java b/mopub-sdk/src/main/java/com/mopub/common/event/ErrorEvent.java
new file mode 100644
index 00000000..666fb1dd
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/event/ErrorEvent.java
@@ -0,0 +1,141 @@
+package com.mopub.common.event;
+
+import java.io.PrintWriter;
+import java.io.StringWriter;
+
+/**
+ * Immutable data class with error event data.
+ */
+public class ErrorEvent extends BaseEvent {
+    private final String mErrorExceptionClassName;
+    private final String mErrorMessage;
+    private final String mErrorStackTrace;
+    private final String mErrorFileName;
+    private final String mErrorClassName;
+    private final String mErrorMethodName;
+    private final Integer mErrorLineNumber;
+
+    private ErrorEvent(Builder builder) {
+        super(builder);
+        mErrorExceptionClassName = builder.mErrorExceptionClassName;
+        mErrorMessage = builder.mErrorMessage;
+        mErrorStackTrace = builder.mErrorStackTrace;
+        mErrorFileName = builder.mErrorFileName;
+        mErrorClassName = builder.mErrorClassName;
+        mErrorMethodName = builder.mErrorMethodName;
+        mErrorLineNumber = builder.mErrorLineNumber;
+    }
+
+    public String getErrorExceptionClassName() {
+        return mErrorExceptionClassName;
+    }
+
+    public String getErrorMessage() {
+        return mErrorMessage;
+    }
+
+    public String getErrorStackTrace() {
+        return mErrorStackTrace;
+    }
+
+    public String getErrorFileName() {
+        return mErrorFileName;
+    }
+
+    public String getErrorClassName() {
+        return mErrorClassName;
+    }
+
+    public String getErrorMethodName() {
+        return mErrorMethodName;
+    }
+
+    public Integer getErrorLineNumber() {
+        return mErrorLineNumber;
+    }
+
+    @Override
+    public String toString() {
+        final String string = super.toString();
+        return string +
+                "ErrorEvent\n" +
+                "ErrorExceptionClassName: " + getErrorExceptionClassName() + "\n" +
+                "ErrorMessage: " + getErrorMessage() + "\n" +
+                "ErrorStackTrace: " + getErrorStackTrace() + "\n" +
+                "ErrorFileName: " + getErrorFileName() + "\n" +
+                "ErrorClassName: " + getErrorClassName() + "\n" +
+                "ErrorMethodName: " + getErrorMethodName() + "\n" +
+                "ErrorLineNumber: " + getErrorLineNumber() + "\n";
+    }
+
+    public static class Builder extends BaseEvent.Builder {
+        private String mErrorExceptionClassName;
+        private String mErrorMessage;
+        private String mErrorStackTrace;
+        private String mErrorFileName;
+        private String mErrorClassName;
+        private String mErrorMethodName;
+        private Integer mErrorLineNumber;
+
+        public Builder(String eventName, String eventCategory) {
+            super(eventName, eventCategory);
+        }
+
+        public Builder withErrorExceptionClassName(String errorExceptionClassName) {
+            mErrorExceptionClassName = errorExceptionClassName;
+            return this;
+        }
+
+        public Builder withErrorMessage(String errorMessage) {
+            mErrorMessage = errorMessage;
+            return this;
+        }
+
+        public Builder withErrorStackTrace(String errorStackTrace) {
+            mErrorStackTrace = errorStackTrace;
+            return this;
+        }
+
+        public Builder withErrorFileName(String errorFileName) {
+            mErrorFileName = errorFileName;
+            return this;
+        }
+
+        public Builder withErrorClassName(String errorClassName) {
+            mErrorClassName = errorClassName;
+            return this;
+        }
+
+        public Builder withErrorMethodName(String errorMethodName) {
+            mErrorMethodName = errorMethodName;
+            return this;
+        }
+
+        public Builder withErrorLineNumber(Integer errorLineNumber) {
+            mErrorLineNumber = errorLineNumber;
+            return this;
+        }
+
+        public Builder withException(Exception exception) {
+            mErrorExceptionClassName = exception.getClass().getName();
+            mErrorMessage = exception.getMessage();
+
+            StringWriter stringWriter = new StringWriter();
+            exception.printStackTrace(new PrintWriter(stringWriter));
+            mErrorStackTrace = stringWriter.toString();
+
+            if (exception.getStackTrace().length > 0) {
+                mErrorFileName = exception.getStackTrace()[0].getFileName();
+                mErrorClassName = exception.getStackTrace()[0].getClassName();
+                mErrorMethodName = exception.getStackTrace()[0].getMethodName();
+                mErrorLineNumber = exception.getStackTrace()[0].getLineNumber();
+            }
+            return this;
+        }
+
+        @Override
+        public ErrorEvent build() {
+            return new ErrorEvent(this);
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/Event.java b/mopub-sdk/src/main/java/com/mopub/common/event/Event.java
index fee902fd..25aa306e 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/event/Event.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/event/Event.java
@@ -1,12 +1,21 @@
 package com.mopub.common.event;
 
-import com.mopub.common.ClientMetadata;
-
 /**
  * Immutable data class with client event data.
  */
 public class Event extends BaseEvent {
-    Event(final Type eventType, final String requestUrl, final ClientMetadata metadata) {
-        super(eventType, requestUrl, metadata);
+    private Event(Builder builder) {
+        super(builder);
+    }
+
+    public static class Builder extends BaseEvent.Builder {
+        public Builder(String eventName, String eventCategory) {
+            super(eventName, eventCategory);
+        }
+
+        @Override
+        public Event build() {
+            return new Event(this);
+        }
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/EventDispatcher.java b/mopub-sdk/src/main/java/com/mopub/common/event/EventDispatcher.java
new file mode 100644
index 00000000..9ca390e4
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/event/EventDispatcher.java
@@ -0,0 +1,42 @@
+package com.mopub.common.event;
+
+import android.os.Handler;
+import android.os.HandlerThread;
+import android.os.Message;
+
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+
+public class EventDispatcher {
+    private final Iterable<EventRecorder> mEventRecorders;
+    private final HandlerThread mHandlerThread;
+    private final Handler mMessageHandler;
+
+    @VisibleForTesting
+    Handler.Callback mHandlerCallback;
+
+    @VisibleForTesting
+    EventDispatcher(Iterable<EventRecorder> recorders, HandlerThread handlerThread) {
+        mEventRecorders = recorders;
+        mHandlerCallback = new Handler.Callback() {
+            @Override
+            public boolean handleMessage(final Message msg) {
+                if (msg.obj instanceof BaseEvent) {
+                    for (final EventRecorder recorder : mEventRecorders) {
+                        recorder.record((BaseEvent) msg.obj);
+                    }
+                } else {
+                    MoPubLog.d("EventDispatcher received non-BaseEvent message type.");
+                }
+                return true;
+            }
+        };
+        mHandlerThread = handlerThread;
+        mHandlerThread.start();
+        mMessageHandler = new Handler(mHandlerThread.getLooper(), mHandlerCallback);
+    }
+
+    void dispatch(BaseEvent event) {
+        Message.obtain(mMessageHandler, 0, event).sendToTarget();
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/EventRecorder.java b/mopub-sdk/src/main/java/com/mopub/common/event/EventRecorder.java
index 13ed5518..efaa5515 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/event/EventRecorder.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/event/EventRecorder.java
@@ -4,6 +4,5 @@
  * This interface represents a backend to which MoPub client events are logged.
  */
 public interface EventRecorder {
-    public void recordEvent(Event event);
-    public void recordTimedEvent(TimedEvent event);
+    public void record(BaseEvent baseEvent);
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/LogCatEventRecorder.java b/mopub-sdk/src/main/java/com/mopub/common/event/LogCatEventRecorder.java
new file mode 100644
index 00000000..f983de70
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/event/LogCatEventRecorder.java
@@ -0,0 +1,11 @@
+package com.mopub.common.event;
+
+import com.mopub.common.logging.MoPubLog;
+
+class LogCatEventRecorder implements EventRecorder {
+    @Override
+    public void record(final BaseEvent baseEvent) {
+        MoPubLog.d(baseEvent.toString());
+    }
+}
+
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/MoPubEvents.java b/mopub-sdk/src/main/java/com/mopub/common/event/MoPubEvents.java
index a36c4f9f..f610473c 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/event/MoPubEvents.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/event/MoPubEvents.java
@@ -1,22 +1,53 @@
 package com.mopub.common.event;
 
-import android.os.Handler;
 import android.os.HandlerThread;
-import android.os.Message;
 
-import com.mopub.common.ClientMetadata;
 import com.mopub.common.VisibleForTesting;
 
 import java.util.ArrayList;
 
 /**
- * Records both untimed and timed events. This class maintains a queue of events to be recorded and
- * launches a background thread to handler their recording.
+ * Public interface used to record client events.
  */
 public class MoPubEvents {
+    public enum Type {
+        // Networking
+        AD_REQUEST("ad_request"),
+        IMPRESSION_REQUEST("impression_request"),
+        CLICK_REQUEST("click_request"),
+        POSITIONING_REQUEST("positioning_request"),
+
+        // Errors
+        AD_REQUEST_ERROR("ad_request_error"),
+        TRACKING_ERROR("track_error"),
+
+        // The SDK doesn't distinguish types of tracking at a level where this more-specific logging works yet.
+        IMPRESSION_ERROR("imp_track_error"),
+        CLICK_ERROR("click_track_error"),
+        CONVERSION_ERROR("conv_track_error"),
+        DATA_ERROR("invalid_data");
+
+        public final String mName;
+        Type(String name) {
+            mName = name;
+        }
+    }
 
     private static volatile EventDispatcher sEventDispatcher;
 
+    /**
+     * Log a BaseEvent. MoPub uses logged events to analyze and improve performance.
+     * This method should not be called by app developers.
+     */
+    public static void log(BaseEvent baseEvent) {
+        MoPubEvents.getDispatcher().dispatch(baseEvent);
+    }
+
+    @VisibleForTesting
+    public static void setEventDispatcher(EventDispatcher dispatcher) {
+        sEventDispatcher = dispatcher;
+    }
+
     private static EventDispatcher getDispatcher() {
         EventDispatcher result = sEventDispatcher;
         if (result == null) {
@@ -32,94 +63,4 @@ private static EventDispatcher getDispatcher() {
         }
         return result;
     }
-
-    @VisibleForTesting
-    public static void setEventDispatcher(EventDispatcher dispatcher) {
-        sEventDispatcher = dispatcher;
-    }
-
-    /**
-     * Log a ClientEvent. MoPub uses logged events to analyze and improve performance.
-     * This method should not be called by app developers.
-     */
-    public static void event(Event.Type eventType, String requestUrl) {
-        final EventDispatcher dispatcher = MoPubEvents.getDispatcher();
-        final Event event = new Event(eventType, requestUrl, ClientMetadata.getInstance());
-        dispatcher.sendEventToHandlerThread(event);
-    }
-
-
-    /**
-     * Create and start a TimedEvent. A TimedEvent isn't recored until
-     * {@link com.mopub.common.event.TimedEvent#stop(int)} is called.
-     */
-    public static TimedEvent timedEvent(Event.Type eventType, String requestUrl) {
-        final EventDispatcher events = getDispatcher();
-        final TimedEvent event =
-                new TimedEvent(eventType, requestUrl, ClientMetadata.getInstance(), events);
-        return event;
-    }
-
-    private static class NoopEventRecorder implements EventRecorder {
-
-        @Override
-        public void recordEvent(final Event event) {
-
-        }
-
-        @Override
-        public void recordTimedEvent(final TimedEvent event) {
-
-        }
-    }
-
-    @VisibleForTesting
-    public static class EventDispatcher implements TimedEvent.Listener {
-        private final Iterable<EventRecorder> mEventRecorders;
-        private final HandlerThread mHandlerThread;
-        private final Handler mMessageHandler;
-
-        @VisibleForTesting Handler.Callback mHandlerCallback;
-
-        @VisibleForTesting
-        EventDispatcher(Iterable<EventRecorder> recorders, HandlerThread handlerThread) {
-            mEventRecorders = recorders;
-            mHandlerCallback = new Handler.Callback() {
-                @Override
-                public boolean handleMessage(final Message msg) {
-                    if (msg.obj instanceof TimedEvent) {
-                        final TimedEvent event = (TimedEvent) msg.obj;
-                        for (final EventRecorder recorder : mEventRecorders) {
-                            recorder.recordTimedEvent(event);
-                        }
-
-                    } else if (msg.obj instanceof Event) {
-                        final Event event = (Event) msg.obj;
-                        for (final EventRecorder recorder : mEventRecorders) {
-                            recorder.recordEvent(event);
-                        }
-                    }
-                    return true; // Even if it's not an event, swallow the message.
-                }
-            };
-            mHandlerThread = handlerThread;
-            mHandlerThread.start();
-            mMessageHandler = new Handler(mHandlerThread.getLooper(), mHandlerCallback);
-        }
-
-        private void sendEventToHandlerThread(BaseEvent event) {
-            final Message message = Message.obtain(mMessageHandler, 0, event);
-            message.sendToTarget();
-        }
-
-        @Override
-        public void onStopped(final TimedEvent event) {
-            this.sendEventToHandlerThread(event);
-        }
-
-        @Override
-        public void onCancelled(final TimedEvent event) {
-            // Nothing to do for now.
-        }
-    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/NoopEventRecorder.java b/mopub-sdk/src/main/java/com/mopub/common/event/NoopEventRecorder.java
new file mode 100644
index 00000000..5459ffbe
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/event/NoopEventRecorder.java
@@ -0,0 +1,8 @@
+package com.mopub.common.event;
+
+class NoopEventRecorder implements EventRecorder {
+    @Override
+    public void record(final BaseEvent baseEvent) {
+    }
+}
+
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/TimedEvent.java b/mopub-sdk/src/main/java/com/mopub/common/event/TimedEvent.java
deleted file mode 100644
index c2aa7dc9..00000000
--- a/mopub-sdk/src/main/java/com/mopub/common/event/TimedEvent.java
+++ /dev/null
@@ -1,76 +0,0 @@
-package com.mopub.common.event;
-
-import com.mopub.common.ClientMetadata;
-
-import java.util.concurrent.TimeUnit;
-
-/**
- * Immutable data class with client event data, including a duration.
- */
-public class TimedEvent extends BaseEvent {
-    interface Listener {
-        public void onStopped(TimedEvent event);
-
-        public void onCancelled(TimedEvent event);
-    }
-
-    /**
-     * Use this status code when stopping an event where an HTTP Status Code isn't relevant.
-     */
-    public static final int SC_NOT_RELEVANT = 0;
-
-    /**
-     * Use this status code when the timed event has no response.
-     */
-    public static final int SC_NO_RESPONSE = -1;
-
-    private final long mStartTimeNanos;
-    private enum State {
-        WAITING, STOPPED, CANCELLED
-    }
-    private State mState;
-    private final Listener mListener;
-
-
-    private long mDurationMillis;
-    private int mHttpStatusCode;
-
-    TimedEvent(final Type eventType, final String requestUrl,
-            final ClientMetadata clientMetadata, Listener listener) {
-        super(eventType, requestUrl, clientMetadata);
-        // System.nanoTime isn't affected by changing the system time, so we use it here.
-        mState = State.WAITING;
-        mStartTimeNanos = System.nanoTime();
-        mListener = listener;
-    }
-
-    public synchronized void stop(int httpStatusCode) {
-        if (mState == State.WAITING) {
-            mState = State.STOPPED;
-            mHttpStatusCode = httpStatusCode;
-            long stopTimeNanos = System.nanoTime();
-            mDurationMillis = TimeUnit.MILLISECONDS.convert(stopTimeNanos - mStartTimeNanos,
-                    TimeUnit.NANOSECONDS);
-            if (mListener != null) {
-                mListener.onStopped(this);
-            }
-        }
-    }
-
-    public synchronized void cancel() {
-        if (mState == State.WAITING) {
-            mState = State.CANCELLED;
-            if (mListener != null) {
-                mListener.onCancelled(this);
-            }
-        }
-    }
-
-    public final synchronized long getDurationMillis() {
-        return mDurationMillis;
-    }
-
-    public final synchronized int getHttpStatusCode() {
-        return mHttpStatusCode;
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/logging/MoPubLog.java b/mopub-sdk/src/main/java/com/mopub/common/logging/MoPubLog.java
index 70ac4e7b..d12ea28a 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/logging/MoPubLog.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/logging/MoPubLog.java
@@ -1,12 +1,8 @@
 package com.mopub.common.logging;
 
 import android.util.Log;
-import android.util.SparseArray;
 
-import java.util.ArrayList;
-import java.util.EnumMap;
 import java.util.HashMap;
-import java.util.List;
 import java.util.Map;
 import java.util.logging.Handler;
 import java.util.logging.Level;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/HttpResponses.java b/mopub-sdk/src/main/java/com/mopub/common/network/HeaderUtils.java
similarity index 86%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/util/HttpResponses.java
rename to mopub-sdk/src/main/java/com/mopub/common/network/HeaderUtils.java
index 3167787d..8c9858e3 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/HttpResponses.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/network/HeaderUtils.java
@@ -1,4 +1,4 @@
-package com.mopub.mobileads.util;
+package com.mopub.common.network;
 
 import com.mopub.common.util.ResponseHeader;
 
@@ -7,8 +7,13 @@
 
 import java.text.NumberFormat;
 import java.util.Locale;
+import java.util.Map;
+
+public class HeaderUtils {
+    public static String extractHeader(Map<String, String> headers, ResponseHeader responseHeader) {
+        return headers.get(responseHeader.getKey());
+    }
 
-public class HttpResponses {
     public static String extractHeader(HttpResponse response, ResponseHeader responseHeader) {
         Header header = response.getFirstHeader(responseHeader.getKey());
         return header != null ? header.getValue() : null;
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/DateAndTime.java b/mopub-sdk/src/main/java/com/mopub/common/util/DateAndTime.java
index 01e6edb3..27f49bc5 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/DateAndTime.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/DateAndTime.java
@@ -2,6 +2,7 @@
 
 import java.text.SimpleDateFormat;
 import java.util.Date;
+import java.util.Locale;
 import java.util.TimeZone;
 
 public class DateAndTime {
@@ -23,7 +24,7 @@ public static Date now() {
     public static String getTimeZoneOffsetString() {
         // A new instance is created with each call because DateFormat objects have
         // internal state and are not thread safe.
-        SimpleDateFormat format = new SimpleDateFormat("Z");
+        SimpleDateFormat format = new SimpleDateFormat("Z", Locale.US);
         format.setTimeZone(localTimeZone());
         return format.format(now());
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/DeviceUtils.java b/mopub-sdk/src/main/java/com/mopub/common/util/DeviceUtils.java
index 3ac25c61..c777c28c 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/DeviceUtils.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/DeviceUtils.java
@@ -1,13 +1,18 @@
 package com.mopub.common.util;
 
+import android.app.Activity;
 import android.app.ActivityManager;
 import android.content.Context;
+import android.content.pm.ActivityInfo;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager;
 import android.net.ConnectivityManager;
 import android.net.NetworkInfo;
 import android.os.StatFs;
 import android.provider.Settings;
+import android.support.annotation.NonNull;
+import android.util.DisplayMetrics;
+import android.view.Surface;
 
 import com.mopub.common.logging.MoPubLog;
 
@@ -17,11 +22,11 @@
 import java.net.InetAddress;
 import java.net.NetworkInterface;
 import java.net.SocketException;
+import java.util.Locale;
 
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
 import static android.Manifest.permission.INTERNET;
 import static com.mopub.common.util.Reflection.MethodBuilder;
-
 import static com.mopub.common.util.VersionCode.HONEYCOMB;
 import static com.mopub.common.util.VersionCode.currentApiLevel;
 import static java.util.Collections.list;
@@ -64,7 +69,7 @@ public static String getIpAddress(IP ip) throws SocketException {
         for (final NetworkInterface networkInterface : list(NetworkInterface.getNetworkInterfaces())) {
             for (final InetAddress address : list(networkInterface.getInetAddresses())) {
                 if (!address.isLoopbackAddress()) {
-                    String hostAddress = address.getHostAddress().toUpperCase();
+                    String hostAddress = address.getHostAddress().toUpperCase(Locale.US);
                     if (ip.matches(hostAddress)) {
                         return ip.toString(hostAddress);
                     }
@@ -152,4 +157,49 @@ public static long diskCacheSizeBytes(File dir) {
         // Bound inside min/max size for disk cache.
         return Math.max(Math.min(size, MAX_DISK_CACHE_SIZE), MIN_DISK_CACHE_SIZE);
     }
+
+    public static int getScreenOrientation(@NonNull final Activity activity) {
+        final int rotation = activity.getWindowManager().getDefaultDisplay().getRotation();
+        final DisplayMetrics displayMetrics = new DisplayMetrics();
+        activity.getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
+
+        final int width = displayMetrics.widthPixels;
+        final int height = displayMetrics.heightPixels;
+
+        final boolean isPortrait =
+                (((rotation == Surface.ROTATION_0 || rotation == Surface.ROTATION_180)) &&
+                height > width) ||
+                (((rotation == Surface.ROTATION_90 || rotation == Surface.ROTATION_270)) &&
+                width > height);
+
+        if (isPortrait) {
+            switch (rotation) {
+                case Surface.ROTATION_0:
+                    return ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
+                case Surface.ROTATION_90:
+                    return ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
+                case Surface.ROTATION_180:
+                    return ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT;
+                case Surface.ROTATION_270:
+                    return ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE;
+                default:
+                    MoPubLog.d("Unknown screen orientation. Defaulting to portrait.");
+                    return ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
+            }
+        } else {
+            switch (rotation) {
+                case Surface.ROTATION_0:
+                    return ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
+                case Surface.ROTATION_90:
+                    return ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
+                case Surface.ROTATION_180:
+                    return ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE;
+                case Surface.ROTATION_270:
+                    return ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT;
+                default:
+                    MoPubLog.d("Unknown screen orientation. Defaulting to landscape.");
+                    return ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
+            }
+        }
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Drawables.java b/mopub-sdk/src/main/java/com/mopub/common/util/Drawables.java
index 63d32fa3..5e1b1a68 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/Drawables.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/Drawables.java
@@ -1,13 +1,13 @@
 package com.mopub.common.util;
 
 import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
 import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
 import android.util.Base64;
 import android.util.DisplayMetrics;
 
-import java.io.ByteArrayInputStream;
-
 public enum Drawables {
     BACKGROUND("iVBORw0KGgoAAAANSUhEUgAAAAEAAAAsCAIAAAArRUU2AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAEFJREFUeNpicPP0Zvr3/z/T/3//gDQQg+i//5j+gum/QBqIQXwg+x+YjckH6fkL0/f3NwMPHz8jKxsbAw0AQIABAGYHPKslk98oAAAAAElFTkSuQmCC"),
     DEFAULT_VIDEO_POSTER("iVBORw0KGgoAAAANSUhEUgAAAEsAAAA8CAYAAAAuaUeTAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAADU1JREFUeNrUW2+kXdkVP/vkCI8QQikllFfv3cu0Q8bwmA8VwpB+CUNG52M/lTChOkKjdExN9VupGUbzqcKEahgThpG0MSFf8jSduvdliFbLMAyPMDzC27tr77vXOr+1zj5/7ptW0/vct8/ZZ/9b66z1W3/2vu769etV/Cz3ljuucs9V+RPoj+4r/GAdXd+Zz+aP042nb50b/R9cE61zouOlAdos7bvz+Xy3iQMsP1v+mh7+lBv1lWbgQ5r0tfnW/AYvxNNfHVfzDF/Tmn9Ea//dCG2qTMK0XF6t9z7bOxZCuBQrXHBp0FQGKJnjIcTR0j3VH6Pnl4ILqQ8PGss0RuWeufp4TTS8nmitDI2W9khzWPEk030pCugJ4viGTzJaJe6nt+BqeRuxc557JUTBc7uTPPGYVD4LZX7nJxU9VCe0BkOzq5AXG7UQ73MDX60G4tK1ZerkVoNyfeQ6MzrA30ozn7H6zKTEFNcyB2mVZ5FWr8s6+Cyuri2TiLos0t6LyMa2zmcx962osegy82KJIv7M1COAo9rF0q1olWeZ7tQ/9iF6G9HtkN9AMINVZlAAPSo39vb2zgTU0f/RB9c11IY+x5keppelDmllCZV29GkEf0C9IuMip1PJeu+cDCa67epNKh+gWsLKWjWuzLW22botll1qu32YqLi+SKRrMVWNA/WKnrBSMaZVaMQ6l9spIHcAfBYAGRQNEaL3UdSdX13nhUl9xhAeo1Nf+XKdy9euHRMxieeS9WnjI+Nxe8twYWrVgrx6IWjQ6HmTuAfmMmFXyNgVtFiK+jndR6QxiyyrcWwXVitWplxUHcx3aslzZ5zo4Aq3dxpLUUpYCpJmVMrVaVU108dlwmJ0j6qqy4fE2Mx9Fj8cXHXOxOIzi2fIDOuz8Bw4VudZMPNUvlhiO5kveMUUlmKeE+nDF9YZq6q64+RnDTIjvRWWpCwtUoIp7iNexoA3qybGPiUJBnzga5QEbKckvIepYpByu741iqTbuYPWpMaqFenwre3Z9g86gLuKH6+T7v6QJc6CJIN/xxBUZcNRAlg0OMknYkAOLfBKGwbsvH4BYm7DZdC4HO9lTOf/9vz3nv9uyXo+/OvDd6jPj3ne5Dqw78STCUczAQj6yPmEG5lh4q8BZlnXA8fkOoU/TuOTqLNzXTXLbZOEejNvHz6hlPJzP+BrAJzEPrXCH4iJBLBDUGpY0v0OhpVwBrEKcQ4xI3RxUYF0we9TOGdekAV3NBLWUS3zStPbKCY5cE7pc0h/bFrZE7a6TQP9g8rfU/m5xRwlFdkPUgS7ghVmCYF+IoVVt7/CU8Qwp+jaoHbnqe6cspiV025FQbJwLQ2acWQU+ius6wjY+dk+lS8Qxu0XHcy+umrEYe1zVKue/mN9Vte/Icx9n9Z7ESW1lmRXWbLiH+NwYxE/pzHKmBM6Vuzu1mxrP+IVMhxLxClVV7XzqX7mHsOvToIumOyCwUUUhOxQ3yRaLqKFHJMslOJGMMKLVTq5XC7P2H752SlUBxrswPphGJ/ZWHKsrtf0r9lfuTJYH8JXkY5EsxfrurG7u3umxCuSum+wJYzkJslK5pRNdEy3uuqBEu+IX2GFX4xjSt/hDaJ4j9UtHy1PU+9v0/f+fDZ/Ku4B4+QRxhTYsOO4NrpAd4W+m9TvQUmFmVamvUYzn9yGPFhiIt8X3hhaEvFlMH6ELz7nkhh1gZ7+ncb4M5X/JDy5KPkkM06pPz4fq0uBPr9X4xZx7Mh5OeSBZEkzzXVUv6Sb3rV5HC591nu/8ke4Lg2Uy9Q/W84ppYRFPrxOYxzLY36Tvu8vFovbi73FnNvxi+Kyb9xSW3wubTIdlh7xzZAHflWm2NozTGXrxtxF79zmslMdOoPwJiU/DzntUj37T/Q5xaneROAq2XiW6v+yt7f3Nn1PoM+HiT2ss2Vn/yA46YPpHCzRLVKuTDZ83LZGZuAfpjzkTWcHFZ9LnprTIvCx9WKmwZ/CpGNud5y+V6huQap5Qe0LFOaY8ozTPNb5LaZ8gFZsE+9rFjUOVyT08VocxWT7oEpW4wiCY6XCQhyHVYKNxkr0TxNxf1wsFx/Sd5Mli/sXxzSlWoNRv1XqytBaAc2V132qrIYicj6oWEj8L85P+6BiQsarIbXrUxur7mqhUQrcKmalv/PU9FNSy1/QdwPDlSHVs6UYd1QvYAzuN0i86YJiaB25zpMmUMxvInE0XvtDYWJsF+9lVye/RV4UMgQXi/XsSLJ0yXhghWXeOF9IQL1BdT+n55/uLffO2z0/O76yZLwe78tSaCy8zMlryBAR6xpMeeR+9+j6sjhjOs38Fq3zZcYX7mN9m6GSU9GCaZDawbWoVEyb5tmkug8Jy25S98vkm/0LfTPrd6l61+KlCnFC9ZievyrPwbekuis03yvcvhHVaoPWJ7Ot2W7JoyU12FepXogX2YFDI2Hr1W5xVB+bnvE6ZSMw4J2U2ahcoP7nKNJ4YzabvYvz9JViUTkA97Keg52dnSK99+/f/xLTQXUH+bNflVQv45R87UZmbouGAH0ZrLfP2BLaVDRbR7SWyllsr0/Q9x2SsnNJ/cAg4TyyLkgS4BzVYDpLW+y6BJjsDqCHy5OU2g7FdZIuxtyW02PZ/L3Na2FWVWLTFpees/FhJ3cG/lpp83WIWbiOhnUY07Aqm4mJO27r2rQuc30ogO0wLFtIwZNQd/Alecz5T3AM2mcqDmicD+x6hzY61H6iG9m59dpfrMUfycGyHB8yLj9vbbP6SduqUu1sKFGsg9MtxRAmlEMZ0+4javcCYdbjvvlQNTn1nMbM0sRWb0iycI1NYfPh5OLRoj9FkwGPD1BgLmtKSjm19kFJb3FDAzc2nEo4Lqn8yfZs+yOJWw3GlOZO+4PRC7ebFs5tfHLvk/4UDbRtZDfWS0rjpbquH0jkkCWen4sa1JXaPFVnoCbkquwblReQtslXWYJYpnlXardPc16lNby3tbV1aNV/VA2D6+62r1R5k8Z/ILR6QzO4MI2cHAGzjnVsYq1IJqsjrnhV9m16ck0o4lJ6GJ+cQZj7KdX/lqrfJCY9wW13y6zSHFwvAbvNYvjD9mAJhHxCD8BPw/4Opnx7D2ZgIi3ovP3aFtEcIrFp41x/k6reIJV7jDvYQ0akpI6882Npks1XgACEJcWT6JQWT81wCYOhm4CHRkrJ/6HMpWWIyre38zyk8vJse3a3JElTs6RqQ8J1T/eUXpDigcHPxp7LUlhjDobg5qX4Z667E2RTNDZtklXiEBea5/mCyqvz7fk1yZIOMcCkaPrSNuLmFM5jqTMXhf1FLOtSRqB0MFVF+eDk2eC1VNoAO1vDG+AQx42PX1L5HZKmawm/BgLkvrFtEK/6Z2lRB14KtNrUs6hwUsPQtQLpTXivrVENTpprdzx4wD6L2FcSU35FseYuzXWa+t0if+kLDEWm7vJM3RlKbgOcJbPWT6TQ1y3dueTgv8HzU3hOQOWtKghyK50Dwg1ZaxEH8YuYTQz7WB0uWwOHpljATlRQeXVeFhOQ6gV518HuhFnKsqyIvkcdLstpmKD8q7eo7cuwmOO9GDGGX8wcCHWmYtPYHKW+GZOPIxNyu2hpX7XMzdJ0ha5f4TU2jPawL/hkPpvvlrbEKcLfj28opT1WXu3OYrk4QYD81ZRNzt4zXYVnQ/2mqJ8NrLNFO5vW7tq9wEN3eHD2+2eLKZo7f7rzpRxpitv3Ys1y8kuCVPvmg06eZY/7W/Ts9vLR8lrvAdxqpG78GPJwH3jeORerpXIez1rZA7pCV28s3fKgsXl1tnAskpi8w+QZ4NaL9O/F9AIxmvdwzsBV3cO7Tnv+qs51z4UpR7L0jNNKXjm1K3qcPr/K42BcOXQcXFwH9D1wUX1bTHiQHh05dVwJD4zhQTKXNwzg6CXzSakl7gQH/aMGdZDftfuO8jJc68Gzm6PW6yrlbA6dz+IxGVrqEoZgQ9n+7juoahy4zo8M7Enj0o+nqv7DsKW9PjVHjyPZSQTiwWJzyHgs+cdjNwUrcpKA/ExP/1N9m6jrWrCxs1FT+/TVr2E5N27fuX2mNL+cosn9m8LCXqLyAQ5euh5bOLoDU5lQ6juFESX3ZI15Nql5h97SeHXnp3MD2+FjC+/dOp+49b7u3EP4elQpLI0n9V+XiKEF28VNHWfofojYsXUM9elrp2HliEQU/ZGBhQ5JcKkdjjs03zpt+9ZYmrdEQzM22AjAfk73bw6pSAnv+phaesvrrGeK4aDP29ZQDWkDrruZYnkGwHefQqP3rHM4eBp5/FTxeqeep/ar5FciP6O1n5oaX6pyDK+GxNMGxcWfyYWBn8/1tasm9Avr9Sv9/G8MpzuuxNhhsEEmVVVfHHZUtf6PtCuVuPYhfB02CFV1QA8Pj2K66f7g67gGY6cFj+pKlOaHnfSDMS3qWcPTenu2Hbeabq51ZKgd/EaK3CcQ99+SpKnuC/zq9g99gD5C+wdNnuc1+t6iyp2J+hyl8WNi9C11VmsN12KsfiyZdxTLGO/JIF0lkI/p7LMxeWmZ1LOWu3R/498CDACoBOJw5WW+ZwAAAABJRU5ErkJggg=="),
@@ -19,32 +19,40 @@
     REFRESH("iVBORw0KGgoAAAANSUhEUgAAABMAAAAUCAYAAABvVQZ0AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAA2NJREFUeNqMVF1Ik1EYPm7TpsIca84pGs6VrboYaeRPpFgXKUzBH4S8sLoIMVCpRERCAgfSZXpR2ZVJCEIgaIQm+MdCIkXRTTTnQG0qorCFm21zp+f9+IQ5NHvh4eP7vnOe877Ped5Xyv4dEYAMSK2rq/tkt9tlXq83Cu9BwC8+zyQ4B5wHLgAG4M7IyAgfHR31FhcXv8F7EXAZUADSo43SMCLKQimS0GKDTqfLys7OvlldXZ2Vnp4uy8nJuZGWlmacnp52ejyeANZ4AB/AQ4kigSQgT6/XPzebzd8pk4WFBb6+vs6xkVP4/X6+s7PDx8bGPJWVlWasTxGTOJZRInC3oaHh88zMjLDh4OCA+3w+4RkIBPhRHB4e8u3tbd7f38+rqqpM2CcJ1YhKu4Vsvq2urnKIzN1uN3c4HHxqaso1Pj7+Y3d3VyAicqfTyaHhenNzc1Eo0VF5F2traz+srKwIRFtbW3xoaMjW1tZ2X9Q12WazcZfLxefn53lXV9fbiooKjZjIsVAkJSXdIw1IFyqvt7d3pLy8PCFksXJgYIAPDg5aGxsbs8OzCY2E+vr692tra4LIFovld15eXmrYqbKmpiZzuNAnRXJ3d7eVStjc3OQo7ZXos7OC5ImjZAA1EE0nSbRarUYulzNoxeCfb/gW+A+yGEAvuoC8ZieyoFKpVEulUgYPMVy3Qyzn8IwuiYWNXl5FQB4/9r0gIf+gxG34iEVFRbH8/HwSOPakmwovMTMz81JZWZm+oKDAkJiYGENk3o2NjSVYgsXFxbHc3NxCMXX5KYRkFRU2XzEajQZUxSQSCdvb2/tJZAfLy8uDyI4pFApmMpkKNRpNJr7rxEaWiaS0NhrQAuk1NTVPoDWDiRmS2RweHrYK9aO0FPjMvb+/z3EC7+vr+6VWqx/j321xauhEsa8DJjR9NxIQDI6xxFtbW58emx4tLS0PFhcXhT4kwomJCS/67qNKparH/4fAo4yMDHNHR8c8EdDB1J8w+NRJVors7Ox8t7S0JCwkIH1utVr57Owsn5ub49RudBAdSC2HG7SVlJRoT7ssaXt7e+3k5KSLiIiQJgRFMBgUmpzIqE97enq+lJaWhrbciYwRKE+NW32GIVgcHx9/TSaTMfAxkLsx2ywge40J8zV8bP8VYACAQuluULZPjQAAAABJRU5ErkJggg=="),
     CLOSE("iVBORw0KGgoAAAANSUhEUgAAAA4AAAAOCAYAAAAfSC3RAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAg9JREFUeNp8kk1rWkEUhodc5aJUEbVqJQRcqCUgERottIKYQhdZSEh1pcWFSFd2HdzFhfobpOJCFLEbddONEUUQEUSDxi4KtWIq+LGQanOLFqdnJAO3peTAe+98PXPmvDMMQkgE0ikUilcajca2WCx+Q58DbUAYJARpQccmk+l8Op1CE/0inycqlcqdTCZvi8XincViCcHYEUgKYkH7oNfhcLhRKpWw1+v9AH0zMhgMh6lU6utkMsGQDddqNQo/Az0lUCQSaQyHQ7xcLnGn08GBQOCSsdlsKtB7nU7HSqVSJJfLhWaz+UWv15uPx2M2Go1eeDye51qtFgkEAgQwgvEv5Kh7wWDwZb1e/wGBt9stJv9Wq8Wl0+mb0WiEN5vNTiRrIpHI3deN/guv12vMcdyDEA3W5XKdtdvtnwTix3w+x/F4/BOsUZAkfEhI3ctms9ckEz+gJmy32/lu7/0FgRENWhM/VqsV320Ko8egE2o5rYkcj2QiEDWMwFar9QLWHxLwIBaLlfkQaWcymVwoFLL/63alUrlzOBxvGTDkyOl0Xur1+t09QRYEL+Sjz+fzQIZvYrG4qlar3TKZjBWJRLvSYPNHTL/fvzUajTOlUnlKLrdareb8fr+XvtVms/mdwDDvhqxst9v9nM/nzxgyWS6XW7DreDAYDOE+391DNHawRCK5ms1mmkKh8AY0/SPAAEsFgVbY4GziAAAAAElFTkSuQmCC"),
 
-    INTERSTITIAL_CLOSE_BUTTON_NORMAL("iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAKfGlDQ1BJQ0MgUHJvZmlsZQAAeAHVlndUU8kex+fe9AaBQOgQeu8dpNdQBKmCqIQkhBpCqGJDRFzBtSAiAuqKrogouBbaWhBRLCwCCnY3yCKgrIsFUVF5N/BgPee9/e/98+ac+c3n/uY3v5k75ZwvAOROlkCQAlMBSOVnCkN83BnLo6IZuMeAAFQBFcgDOoudIXALDg4A/1g+DAJI3HnXWJzrH8P+e4cUh5vBBgAKRrrjOBnsVITPIfyNLRBmAgCLuTcnU4AwqhBhGSGyQIQrxMyb55Nijpvn9rmYsBAPJOYeAHgyiyXkAUASIX5GNpuH5CEjCMz4nEQ+wmYIO7MTWByEBQgbpaamibkaYb247/LwvmMWK24xJ4vFW+T5f0FGIhN7JmYIUlhr5j7+lyY1JQvZr7kijVgyP2VpANLSkTrGYXn6L7AgZe7M5vxcfnjogp8ftzRogeOF3iELLMh0/46Dwxb8eQkeSxeYm+G1mCeJ5Sc+s7n8wqyQ8AXOyA71WuC8hLDIBeZwPRf98YnezAV/YiZzca7kNP/FNYAwkACyAB9wABcIQRxIAykAOb1Mbi5iAfBIE6wRJvISMhluyK3jGjGYfLaJEcPCzNxc3P1/U8TvbX6x7+hz7wii3/rbl94OgH0x8ibEV/3fcSxNAFpfAED78LdP8y1yFXYBcLGXnSXMns+HFjcYQASSQAYoIO9ZE+gBY2ABbIAjcAVewA8EIbscBVYBNrLXqcgu54B1YBMoAiVgF9gLKsEhcAQcB6fAGdAMLoAr4Dq4DXrBAHgMRGAEvAKT4AOYgSAIB1EgGqQAqUHakCFkAdlBzpAXFACFQFFQLMSD+FAWtA7aDJVApVAldBiqg36BWqEr0E2oD3oIDUHj0FvoM4yCybAMrALrwKawHewG+8Nh8EqYB6fDeXAhvAOugGvgk3ATfAW+DQ/AIvgVPIUCKBKKjlJHGaPsUB6oIFQ0Kh4lRG1AFaPKUTWoBlQbqgt1FyVCTaA+obFoGpqBNkY7on3R4Wg2Oh29Ab0dXYk+jm5Cd6LvoofQk+hvGApGGWOIccAwMcsxPEwOpghTjjmGOY+5hhnAjGA+YLFYOlYXa4v1xUZhk7BrsduxB7CN2HZsH3YYO4XD4RRwhjgnXBCOhcvEFeH2407iLuP6cSO4j3gSXg1vgffGR+P5+AJ8Of4E/hK+Hz+KnyFQCdoEB0IQgUNYQ9hJOEpoI9whjBBmiFJEXaITMYyYRNxErCA2EK8RnxDfkUgkDZI9aRkpkZRPqiCdJt0gDZE+kaXJBmQPcgw5i7yDXEtuJz8kv6NQKDoUV0o0JZOyg1JHuUp5RvkoQZMwkWBKcCQ2SlRJNEn0S7yWJEhqS7pJrpLMkyyXPCt5R3KCSqDqUD2oLOoGahW1lXqfOiVFkzKXCpJKldoudULqptSYNE5aR9pLmiNdKH1E+qr0MA1F06R50Ni0zbSjtGu0ERmsjK4MUyZJpkTmlEyPzKSstKyVbIRsrmyV7EVZER1F16Ez6Sn0nfQz9EH6ZzkVOTc5rtw2uQa5frlpeSV5V3mufLF8o/yA/GcFhoKXQrLCboVmhaeKaEUDxWWKOYoHFa8pTijJKDkqsZWKlc4oPVKGlQ2UQ5TXKh9R7laeUlFV8VERqOxXuaoyoUpXdVVNUi1TvaQ6rkZTc1ZLVCtTu6z2kiHLcGOkMCoYnYxJdWV1X/Us9cPqPeozGroa4RoFGo0aTzWJmnaa8Zplmh2ak1pqWoFa67TqtR5pE7TttBO092l3aU/r6OpE6mzVadYZ05XXZerm6dbrPtGj6LnopevV6N3Tx+rb6SfrH9DvNYANrA0SDKoM7hjChjaGiYYHDPuMMEb2RnyjGqP7xmRjN+Ns43rjIRO6SYBJgUmzyWtTLdNo092mXabfzKzNUsyOmj02lzb3My8wbzN/a2FgwbaosrhnSbH0ttxo2WL5xsrQimt10OqBNc060HqrdYf1VxtbG6FNg824rZZtrG217X07Gbtgu+12N+wx9u72G+0v2H9ysHHIdDjj8JejsWOy4wnHsSW6S7hLji4ZdtJwYjkddhI5M5xjnX9yFrmou7Bcalyeu2q6clyPuY666bsluZ10e+1u5i50P+8+7eHgsd6j3RPl6eNZ7NnjJe0V7lXp9cxbw5vnXe896WPts9an3Rfj6++72/c+U4XJZtYxJ/1s/db7dfqT/UP9K/2fBxgECAPaAuFAv8A9gU+Wai/lL20OAkHMoD1BT4N1g9ODf12GXRa8rGrZixDzkHUhXaG00NWhJ0I/hLmH7Qx7HK4XnhXeESEZERNRFzEd6RlZGilabrp8/fLbUYpRiVEt0bjoiOhj0VMrvFbsXTESYx1TFDO4Undl7sqbqxRXpay6uFpyNWv12VhMbGTsidgvrCBWDWsqjhlXHTfJ9mDvY7/iuHLKOONcJ24pdzTeKb40foznxNvDG09wSShPmEj0SKxMfJPkm3QoaTo5KLk2eTYlMqUxFZ8am9rKl+Yn8zvTVNNy0/oEhoIigSjdIX1v+qTQX3gsA8pYmdGSKYMIm+4svawtWUPZztlV2R9zInLO5krl8nO71xis2bZmNM877+e16LXstR3r1NdtWje03m394Q3QhrgNHRs1NxZuHMn3yT++ibgpedNvBWYFpQXvN0dubitUKcwvHN7is6W+SKJIWHR/q+PWQz+gf0j8oWeb5bb9274Vc4pvlZiVlJd82c7efutH8x8rfpzdEb+jZ6fNzoO7sLv4uwZ3u+w+XipVmlc6vCdwT1MZo6y47P3e1XtvlluVH9pH3Je1T1QRUNGyX2v/rv1fKhMqB6rcqxqrlau3VU8f4BzoP+h6sOGQyqGSQ59/SvzpwWGfw001OjXlR7BHso+8OBpxtOtnu5/rjikeKzn2tZZfKzoecryzzrau7oTyiZ31cH1W/fjJmJO9pzxPtTQYNxxupDeWnAans06//CX2l8Ez/mc6ztqdbTinfa76PO18cRPUtKZpsjmhWdQS1dLX6tfa0ebYdv5Xk19rL6hfqLooe3HnJeKlwkuzl/MuT7UL2ieu8K4Md6zueHx1+dV7ncs6e675X7tx3fv61S63rss3nG5cuOlws/WW3a3m2za3m7qtu8//Zv3b+R6bnqY7tndaeu172/qW9F3qd+m/ctfz7vV7zHu3B5YO9A2GDz64H3Nf9IDzYOxhysM3j7IfzTzOf4J5UvyU+rT8mfKzmt/1f28U2YguDnkOdT8Pff54mD386o+MP76MFL6gvCgfVRutG7MYuzDuPd77csXLkVeCVzMTRX9K/Vn9Wu/1ub9c/+qeXD458kb4Zvbt9ncK72rfW73vmAqeevYh9cPMdPFHhY/HP9l96voc+Xl0JucL7kvFV/2vbd/8vz2ZTZ2dFbCErDktgEIsHB8PwNtaAChRiHboBYAoMa+H5yKgeQ2PsFjLz+n5/+R5zTwXbwNArSsA4fkABLQDcBCp2giTkVYsC8NcAWxpuVgRj7hkxFtazAFEFiLS5OPs7DsVAHBtAHwVzs7OHJid/XoU0e0PAWhPn9fh4mgsFYBSXVktWe6trar5c+O/M/8CArPqa05dv3oAAAAJcEhZcwAACxMAAAsTAQCanBgAAAekSURBVFgJpZhJiJRXEMff9Kgz4zaijg4q7orgQclBFL0k5KIGFI0bJIyec/CkEA+jhoSIBw+iiBCUUXDFfUHBgAaiePOgYQZBXHBfcJvM2l/n/6vuenzdduNIHrx+e9X/VdWrqq+rcrlcqFSqVLRepfXE9+zfv3/ymjVrJiRJUtvZ2TmopqambsCAAf1Y7+7u7lXp1LF/Nd919uzZJytWrPjHz6rNbN26NWzZskVkKzBmvkI1MIVz1ZcvX2569uzZHy9fvmzVXJ/K8+fPnz58+PDQhQsXfhKYeh2qxCvOx07J5oyPDxw48M39+/f/bm9vT4PI9vT09EpC2XKVNW2mWuno6Mi1trW27tmz59eFCxfW7Nixo+7YsWPVSEzSyqjl8obFOppIFzaYim7cuNE8c+bMn4cOHVqrOYj3vnjxolq3rjp37ly4e/duEDNUZeelulBXVxdmzJgRFi1aFMaPH58bPXp0VovQrO7q6gr37t1rv3Xr1g9S++mrV6/WXrt2rXvz5s3YTd52HFmhjZJ58uTJXhAUSo9AZA8ePJjMnj0bsH2qs2bNSjgjCSei06Oahd6jR4/+Wr58+Up1uWXkyTitsrjw7t27Fi1SMNJeGWcyf/78CKKxsTEZMWJEMnLkyLKVNUkm7p8zZ05y+vTpRKoEWBeEb9++/UEX+0rdgPpoqQ4o6jAlGbOR3bt3R8ITJkxIBg0alOgVxbly0mKdyt6JEyfGvTt37kxkcxFUW1vbnzpfAxBsyQBpAjAG6Pr1683qUwzM9u3bjdioUaNMEtxcdhIZlAOTnuvfv7+da2hoSKDB2rZt2xLZnaswJzv9TfwQDO6lio4h4zVJVR0am5527dplBCZNmpRAGKIQ5OYDBw78LCgZd1JdXW37OMtFXFpISuozexLP9kOHDs0TW8NiKhOjap42YFR60DfMx4wZY2CGDBliYzm5CMTn2FdaBw8eHOdWrVplffZzMZcUPOAFwwcPHlxRk8dCB6dX8DOJFrNz5841Ihx2yaxfvz7Rk08wcADIFVgtBwbVMn/ixInk9evXyYYNGz6hh6HDC0Dv37/PXblyZRVYDBUemAWVrpaWFjs8ZcoUe0kQ5pavXr3iRlZPnjxpe7g1wBwUkhk+fLiNjx49GvdLLUlTU5PNc0FXHbzgCeMChhD27ds3WeGgjcmnT59mp0+fbgdhhIgzmYyNz58/Hxloq90eIMOGDUsAxovCDTB35MiRor3SgM2zVltbG21w2rRpyTPxhLcw3JXPmoqn/ZoJlezNmzftoDxsNMi0ARf0Hpm5pPA5Y8eOtbNpyYhmcvHixQjGbYuH4X4KntpnYUYu4dsg21kIGuLPpk2b7DDEOeSqSKvm1KlTERAMGfs+ObiiNQVVW+OF1dfXx33sdzuDZyH25d68efNdkNF9DyCC5LJly+zQuHHjig5DABUCjH6ppI4fP54cPny4CIxLpl+/fqZWB+2tPxZ4whsMwrIyfPz48UcHtHjx4oqAHBQ2Q//MmTNFAEQjjh2McqKyYDjvgODpgPTamjISpyVX2hQkOpogdVlb+qMDIZvNBuk/LFmyJMiGbIvAuD8LZAFEer22IAMOb9++LSVTNFaojGPtz5AWfFFRphikBjvjaQcDQFF8ThcN7P3SkiHt9EN65tZ14j7vrV6J5TuPHz8mQofVq1fbEhKVe7C+0oogQw/yK0GhI8j2/HjZ1i/HIlgySpo6fKd07t1PWhl04NZykEFPOyiMxD2oCRBeli5daupEXVyuLKi8QEOap2Hpy7PHf/gzLXV6/rQF5hNDJ3Qwz0PgldL36vTSzx4sFR2je2iithMpdXoOBuIkbewrdQnuPFnDm9Pi4xpH5/cXHKM9e5z0p6FjWj50cJjQgR+BCLeV+GMllDCPJ8fp4aPcJZQ6Tw/I7McVuPcndBCuRJfQ0UoYKwquehXdyouMEdmhi5XgStR2QC4ZPLCDgFkl5/nhw4dk7dq1RpcMIh1c4QmgGFzVL0o/SOYXLFhgh3Fe7sA2btyYELUvXbpkawTJNBgAOSgPE0gRMM3NzRGM00ulHwmpDykQWNx/FCVoejUREFLwoOgpBIydqQNJt2kDdslAA1rlEjSSQ523RB9AZVNY0kyYIF4I+c2Yc4BpEKV9N2DmAQENVxW0+ZoR7xxpM+kz0gGL9ldO8knInaCrD6Nkri/VJNKQzzpdMtAsxC4DVPiwAExM8m1QQIiH3as+xb48XFIA4Ia8kHRqUgkYe9jrUmEftNJgCp9c8I8YfEBrqmNRQbRFLQXJ9uJbMEJnTnLFC/QPxYaRMn5VH7PmCRhn/EMRWtCEsFQFD+cfefuEt3Eh9cHI+R4ScnLgqVOnRmAOsFLLXs4Uknn7woBYiWQiTy3l/3UQwXTBsGAayv3ZoL9Y7M8G5UOhtbU18AeCLm7nCZTEJv5sID3xPxukPtKDKkm+886dO7/PmzfvFzuQ/xPCeBXG8VPaJeRtRP0//o4xD4xE8DM87dRrgk/kgWS8xo5PpFo+r6mAT/9hZV8omv9s4WsGD4zTg4YOwC/SLYyLMDjDKLF0R6K2w5qLYv3cX3qkEPLi7QrOncqzH6xbt+5eimYmTzJ/y9R87P4HkQsq2faR5dQAAAAASUVORK5CYII="),
-    INTERSTITIAL_CLOSE_BUTTON_PRESSED("iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAKfGlDQ1BJQ0MgUHJvZmlsZQAAeAHVlndUU8kex+fe9AaBQOgQeu8dpNdQBKmCqIQkhBpCqGJDRFzBtSAiAuqKrogouBbaWhBRLCwCCnY3yCKgrIsFUVF5N/BgPee9/e/98+ac+c3n/uY3v5k75ZwvAOROlkCQAlMBSOVnCkN83BnLo6IZuMeAAFQBFcgDOoudIXALDg4A/1g+DAJI3HnXWJzrH8P+e4cUh5vBBgAKRrrjOBnsVITPIfyNLRBmAgCLuTcnU4AwqhBhGSGyQIQrxMyb55Nijpvn9rmYsBAPJOYeAHgyiyXkAUASIX5GNpuH5CEjCMz4nEQ+wmYIO7MTWByEBQgbpaamibkaYb247/LwvmMWK24xJ4vFW+T5f0FGIhN7JmYIUlhr5j7+lyY1JQvZr7kijVgyP2VpANLSkTrGYXn6L7AgZe7M5vxcfnjogp8ftzRogeOF3iELLMh0/46Dwxb8eQkeSxeYm+G1mCeJ5Sc+s7n8wqyQ8AXOyA71WuC8hLDIBeZwPRf98YnezAV/YiZzca7kNP/FNYAwkACyAB9wABcIQRxIAykAOb1Mbi5iAfBIE6wRJvISMhluyK3jGjGYfLaJEcPCzNxc3P1/U8TvbX6x7+hz7wii3/rbl94OgH0x8ibEV/3fcSxNAFpfAED78LdP8y1yFXYBcLGXnSXMns+HFjcYQASSQAYoIO9ZE+gBY2ABbIAjcAVewA8EIbscBVYBNrLXqcgu54B1YBMoAiVgF9gLKsEhcAQcB6fAGdAMLoAr4Dq4DXrBAHgMRGAEvAKT4AOYgSAIB1EgGqQAqUHakCFkAdlBzpAXFACFQFFQLMSD+FAWtA7aDJVApVAldBiqg36BWqEr0E2oD3oIDUHj0FvoM4yCybAMrALrwKawHewG+8Nh8EqYB6fDeXAhvAOugGvgk3ATfAW+DQ/AIvgVPIUCKBKKjlJHGaPsUB6oIFQ0Kh4lRG1AFaPKUTWoBlQbqgt1FyVCTaA+obFoGpqBNkY7on3R4Wg2Oh29Ab0dXYk+jm5Cd6LvoofQk+hvGApGGWOIccAwMcsxPEwOpghTjjmGOY+5hhnAjGA+YLFYOlYXa4v1xUZhk7BrsduxB7CN2HZsH3YYO4XD4RRwhjgnXBCOhcvEFeH2407iLuP6cSO4j3gSXg1vgffGR+P5+AJ8Of4E/hK+Hz+KnyFQCdoEB0IQgUNYQ9hJOEpoI9whjBBmiFJEXaITMYyYRNxErCA2EK8RnxDfkUgkDZI9aRkpkZRPqiCdJt0gDZE+kaXJBmQPcgw5i7yDXEtuJz8kv6NQKDoUV0o0JZOyg1JHuUp5RvkoQZMwkWBKcCQ2SlRJNEn0S7yWJEhqS7pJrpLMkyyXPCt5R3KCSqDqUD2oLOoGahW1lXqfOiVFkzKXCpJKldoudULqptSYNE5aR9pLmiNdKH1E+qr0MA1F06R50Ni0zbSjtGu0ERmsjK4MUyZJpkTmlEyPzKSstKyVbIRsrmyV7EVZER1F16Ez6Sn0nfQz9EH6ZzkVOTc5rtw2uQa5frlpeSV5V3mufLF8o/yA/GcFhoKXQrLCboVmhaeKaEUDxWWKOYoHFa8pTijJKDkqsZWKlc4oPVKGlQ2UQ5TXKh9R7laeUlFV8VERqOxXuaoyoUpXdVVNUi1TvaQ6rkZTc1ZLVCtTu6z2kiHLcGOkMCoYnYxJdWV1X/Us9cPqPeozGroa4RoFGo0aTzWJmnaa8Zplmh2ak1pqWoFa67TqtR5pE7TttBO092l3aU/r6OpE6mzVadYZ05XXZerm6dbrPtGj6LnopevV6N3Tx+rb6SfrH9DvNYANrA0SDKoM7hjChjaGiYYHDPuMMEb2RnyjGqP7xmRjN+Ns43rjIRO6SYBJgUmzyWtTLdNo092mXabfzKzNUsyOmj02lzb3My8wbzN/a2FgwbaosrhnSbH0ttxo2WL5xsrQimt10OqBNc060HqrdYf1VxtbG6FNg824rZZtrG217X07Gbtgu+12N+wx9u72G+0v2H9ysHHIdDjj8JejsWOy4wnHsSW6S7hLji4ZdtJwYjkddhI5M5xjnX9yFrmou7Bcalyeu2q6clyPuY666bsluZ10e+1u5i50P+8+7eHgsd6j3RPl6eNZ7NnjJe0V7lXp9cxbw5vnXe896WPts9an3Rfj6++72/c+U4XJZtYxJ/1s/db7dfqT/UP9K/2fBxgECAPaAuFAv8A9gU+Wai/lL20OAkHMoD1BT4N1g9ODf12GXRa8rGrZixDzkHUhXaG00NWhJ0I/hLmH7Qx7HK4XnhXeESEZERNRFzEd6RlZGilabrp8/fLbUYpRiVEt0bjoiOhj0VMrvFbsXTESYx1TFDO4Undl7sqbqxRXpay6uFpyNWv12VhMbGTsidgvrCBWDWsqjhlXHTfJ9mDvY7/iuHLKOONcJ24pdzTeKb40foznxNvDG09wSShPmEj0SKxMfJPkm3QoaTo5KLk2eTYlMqUxFZ8am9rKl+Yn8zvTVNNy0/oEhoIigSjdIX1v+qTQX3gsA8pYmdGSKYMIm+4svawtWUPZztlV2R9zInLO5krl8nO71xis2bZmNM877+e16LXstR3r1NdtWje03m394Q3QhrgNHRs1NxZuHMn3yT++ibgpedNvBWYFpQXvN0dubitUKcwvHN7is6W+SKJIWHR/q+PWQz+gf0j8oWeb5bb9274Vc4pvlZiVlJd82c7efutH8x8rfpzdEb+jZ6fNzoO7sLv4uwZ3u+w+XipVmlc6vCdwT1MZo6y47P3e1XtvlluVH9pH3Je1T1QRUNGyX2v/rv1fKhMqB6rcqxqrlau3VU8f4BzoP+h6sOGQyqGSQ59/SvzpwWGfw001OjXlR7BHso+8OBpxtOtnu5/rjikeKzn2tZZfKzoecryzzrau7oTyiZ31cH1W/fjJmJO9pzxPtTQYNxxupDeWnAans06//CX2l8Ez/mc6ztqdbTinfa76PO18cRPUtKZpsjmhWdQS1dLX6tfa0ebYdv5Xk19rL6hfqLooe3HnJeKlwkuzl/MuT7UL2ieu8K4Md6zueHx1+dV7ncs6e675X7tx3fv61S63rss3nG5cuOlws/WW3a3m2za3m7qtu8//Zv3b+R6bnqY7tndaeu172/qW9F3qd+m/ctfz7vV7zHu3B5YO9A2GDz64H3Nf9IDzYOxhysM3j7IfzTzOf4J5UvyU+rT8mfKzmt/1f28U2YguDnkOdT8Pff54mD386o+MP76MFL6gvCgfVRutG7MYuzDuPd77csXLkVeCVzMTRX9K/Vn9Wu/1ub9c/+qeXD458kb4Zvbt9ncK72rfW73vmAqeevYh9cPMdPFHhY/HP9l96voc+Xl0JucL7kvFV/2vbd/8vz2ZTZ2dFbCErDktgEIsHB8PwNtaAChRiHboBYAoMa+H5yKgeQ2PsFjLz+n5/+R5zTwXbwNArSsA4fkABLQDcBCp2giTkVYsC8NcAWxpuVgRj7hkxFtazAFEFiLS5OPs7DsVAHBtAHwVzs7OHJid/XoU0e0PAWhPn9fh4mgsFYBSXVktWe6trar5c+O/M/8CArPqa05dv3oAAAAJcEhZcwAACxMAAAsTAQCanBgAAAkNSURBVFgJjZhbaFXZGcfX3vtEExMVL9E0NdZEvEQTH+oVGi+1oDNlsMVrKaVgH2zL0NJKUaiJxtTrQ7UwfajzUCkMXqEIRapTUh3RkMZL6ZjEeJkIE6OiTjQm5nrO2f3/1jnrGOJJMgv22Xuv9V3+3//71mUfLwxDM0Lz9u7d6+3Zsyfu5PReFI/Hv6UrS/rZvu9na8w3gekLo2Gn+ruDIGjr7OysP3LkSDd6mzdvDs6cOYONYR16wwGSY98B2blzZ/7o0aN/Imdz5Gy5nmd5nmfS6Qug6e7u7pXsvzT+n1gsduLgwYPNAJPNSGVlZUz9aYGlBSRHnpQsK9u3b8/Kycn5ULZ+mZmZWZSRkWF6e3u55C+OUQ9HrgFSVxiJRALJG4ExPT09rQriRwruqpMbGKzr454OEA4s+t27d5fK+McyvkwGARF98+ZN+OrVK//+/fv+ixcvTH9/v4lGo9am5MyoUaPMpEmTzOzZs8Px48fHs7OzjdiM9PX1GQXwWVZW1i6N123btq0/HajBgFJgFM0WefmzjE2W07hAxB8+fBjU1dWZJ0+eWAAj/UydmmeWLVtqCgsLYxMmTIhgPDsnx3R1df6xvHz379AfDCoFSExY6sltVVXVh4r6qKLNECv9Dx48CGqu1XhftnxpMQgk0aatHyugH8zBHi0/P98sX748FGtx1ZdtcqOY91Qxjm/88hyoVrjT6V+6dCkU4s3K+8eqFcBEb926FTl37pzX/rrdiG4LhBQBaKSLNKPT1tZmGhoaPD37eXl5IYik+90rV648WbVq1U18624BWYYcbbt27SqRkX+LmVwVYrS2tjaorq42FLJrgEkG47qGvMuRoa5o6KC7evVqpXFZXAUfiMEOAXtv3759NQ4DgGzdqGOUBqslWNbV1dV/48aNyIULFwxFqXdr2KVAAVp2hkSigYEyBMRsI9VaDszatWvN4sWLY1mZmZGe3t7bHR0dK44ePfpKap4vILZ2pLBN7JRpNsQ1gwLAMG0BQ6SAmTt3rsVAqkjHUI0xZGjouEBUAjawixcvmnv37gViLKZslI4bN84VuBdQN1r0xoraYwKQq6kcExhfqG2UREp0isisWbPGFBQUUA8WJGOD0+eA0r9x40azdOlSC66lpcWCITjAvnz50sycOTOuNc4X4ILz58///cCBA+0+UQjIT0XrPNEZY2q3trYaobaKjpmVK1favuLiYrNp0yY7NpgpB4YANmzYYObNm2fGjh1rVqxYYUpKSlJMUeiPHz82zc3NARNH74Vjxoz5MVgsIBleQnq098Rramps9OQaw7Smpibz6NGjFIj58+dbULDABRAuokdn/fr1BhlaqMWcAO/cuWPfGe/r7bPPV69eNSy0yUlTQmcgIzz8QYLZz549865du+aJRrs94Mylpb6+3kyZMsVMnTLVGuM5NzfXpo+ZBCDYBAxsoMfVdLfJnDhxIgUcVrHLii4CYBF/TK4JWgb+6auwpomdKSrmmJiwBY5HlGguLRjXbm0aGlU/yX5Y0C5ugVCwpAkwNNiClZMnT9p3QDvG6XD28YlvzcACYcn3NTApOeixN6VrGMLBW1CNJhBAGnVC8bo0IQNbpPnUqVNWBjCsQekaPgmapnsWVr8JIC43Pe3ooJ90oACJMVhZsGCB1aAPMAOZGQoMCkmfNjPSHeML/fgkQ0NG4bA5UBQh6bt9+7aYCmwqGIOZxsZGC4bn4ZgZaNM9y24GDCX4cr1f4w4LNECI25QGgdFHI3Uu0JTACA9i24tIqc05IKLhGlEjy9mGAqaoSZnTA4ybYTDo6smBTGcbmwNajy/hxzjhSq4HA8bfPjpF6sGBcQ5JE8uCk6HQh1o831pMPCV9hviX7a6IHr5KAgonT57s3b17d7BOyhGRutmEEHoU8OnTp60O7/MFJibW3MJ49uxZmzrApmNKPmHSY0wyXb7m/0MdNb7QQhVoI0ycSWQY4zRYQJjLrTOOGbfO4IxIE+vU2yUBUI4p9NFzzdmXz7gwsJ99rnuzX15e/oWEq9lfdAaOgZgVFGWUqBEaa42Lmn7A2HVGuJ0cOg4UOuiis2ULp+HEO7IEQB1OnDgRn5yNCLhW57EWC1kCdYDQ2SdSVlamOk8s7a5YOUIUFhba4sVpCoycRILEoieDFpgDRV3xzIVuaWmpBQWTbBs0+cKnrwwBsp4+C0isfKJo/qcd15sxY0Z8+vTp9iBFNBigTpIbIeeYIVfgwaDQ4zyl/dGuWckCtrbzv5FvioqKYspMILaadH0CIDZXf8eOHdHLly+HAvWBBDj7hpo1GkqkjDvnmdevXxudn2yRDrXowS6scGfmtbe3m+vXr6f6cEoq3//++5ytKFQK+qP9+/df5BibOsJu3bo1c9q0aZ8pn0s4o+hzJ+BkR22xcZJ3t7XwDBvDNUDhmAYzyKtoU0fYJTrCjtYRVszUy37ZoUOH2iXqkTK+NPzjx4/3SGkHYOQwsnDhwvhqHcg5F2GchmGeRwKDLGBglnrhjh62sIntSEZGRL56tfb8GjBgkFpovzqkYOc41ayBKhmpEPK4rvDmzZs+TNFgS31fCxDyMAkggNA43C9atCimwNyW8Ft9m/1JQxYC/i0gK61O3e06JFB/kdLPWZV1RVXIvg5PnvtixYl0k2rpb8QIeJr7UJw1axaH+gwYFoMV+iDdl9RO+U7kItFrU8ejUP9CbP5eWN6opiI6R/taS2Lr1q0LWTtwRD0NdyGDrHQ4xMVkw9MszpDOVwrmZw6MS1US2Lt/NiAgQLYatVB9W7TvV7TvkS6o13rVr5kTaIvxnj9/bkG5miJF1BmL65w5c4y+56MC4eviMA8rVxTkrzSjPk8CSDEzJCAnKGD27xiSW1lZ+QMZ+43GvqOviAjA5IBp5mrP3iXqth7+jvEVBMdTGG3Q2EdPnz7967Fjx+y/HrJJybyT94E15ECm7sl/vVLzu6KiYqNsfE9M/FDO8hStrSVmFE1O7WyCKVZfMfcPza5PBf5vhw8f7kBmYAZ4H9yGBZQU9hxbTlnf4sVyOFtAisXEEgHhZM+neKtA1KpO/qsviWb13VD6bWUngcDIO6w4u9z/D0aZ6sEzTu2gAAAAAElFTkSuQmCC"),
+    INTERSTITIAL_CLOSE_BUTTON_NORMAL("iVBORw0KGgoAAAANSUhEUgAAAGAAAABgCAMAAADVRocKAAAAUVBMVEUAAAD///////////////////////////////////////////////8AAAAQEBAgICAwMDBAQEBQUFBgYGBwcHCAgICfn5+/v7/Pz8/v7+////9QtCtmAAAADXRSTlMAECBQYHCAj5+/z9/v87rZqQAAAfxJREFUeAHslc2SgyAQhHeJ8UcZVBIJ+P4PuoWZA26t7ehySZV9DKn+GLoz+bp06dKlD5IqqqabWV1TFiqn+61m71Rdfct090rPG9KV+r99PUPVKpu9d9PImpzPg7hrNgnOGlrJWBf4UN/PXr9lh5elP2Vf/IVWnaoOX9/1tKne8RAnClXy7UeCGnmK8qj/O93wpF09wzvrM/5+IIEGDwnA3xkSyThAAO/vSCx3LIcb8IcEYZeUBv6QoJUI0CJ/TGhF+2Hpj6GDMkuX7sIHCgMd1hAkj8QNTX5fDwQbwiP5xYm6qpb9kPijceKlE8KyNZRkgDH1Z8KGf0oYBSOoXw0K8zZh4EOzbhIeoYpf6dcmawI66uMHFQRoTgDZgIOYgt5dEhYboY8tLwwYccBXxYOFnZg7jhgQgD/H3O10yOI4cfQW96iIxwYXBlfLxIMCltQTQQLwj/Lwj6fhCCAB+HMIDcx4IkzA/jTBlHkPQQL05320A8AE5C8HYALwxwCFAUyA/hjwnQ+Q4Yk+L+QsNf1pzw4NAIBhEAi6iqruP21lTCTnYIcEePih8VfBnx1/19xwuGVy0/exhQcvHx15+OXx3RcQXKF8CfQ11hdxjxI8DPE4xwMpj9Q8FPRY04NZj5Y9HN/x/kvifT9Q+InFj0Qzc52ZuW505vKqqqr6JLIRlkedBesAAAAASUVORK5CYII="),
+    INTERSTITIAL_CLOSE_BUTTON_PRESSED("iVBORw0KGgoAAAANSUhEUgAAAGAAAABgCAMAAADVRocKAAAAY1BMVEUAAAAjHyD///93cXH///9bVlZ3cXF3cXFxbGx3cXFybGx3cXF3cXFzbW13cXF3cXF0bm53cXF3cXETEhIZGBggHh4mJCQsKioyMDA5NjY/PDxFQkJSTU1eWVlkX19xa2t3cXE1H1L7AAAAE3RSTlMACBAgIDBQYHiAiI+fp7/P19/vm4QQ3gAAAg9JREFUeAHsld1ygyAUhNumahKNjoBIIhHf/ylb8cwEO2XBn5vMuJcysx/HXY8fhw4dOvRGOmV5WQ+kurxmpz3d04K8XdVFutPdczZ4xPLtcyS3AeqWbLt98bLqddeSOt2/nhcbpjgzMjFaCT6TUNrQITuvvX5FDk/F/5V6DpOqVUOkdH3dcK8aTUOsKNSFbt9yqJamuCz1n9I1Dx7Uw0xZr/HvJY+Q7AEB+mvBoyQ0IID3r3m09LIcUugPCGlk/xn0BwQW9z1U2B8Rqqj9YPsjlgKE7dI58gUZyRdLmtlLwg11vq87gklzd764qK4mdj84/mAce2mHYLdGEgDY/0vr+hPB4+8SWvsHCiTwp0Fm8BMkHYp5k3AK+fCrZm4yI8CjZnyQQwCzCQAbcEApsOCSUMgIP1ZwYVBHDb4qHswEmlpTxIAA/CnmOtAhhePE0Svco2w8FrgwuFpiPMhgSXtUeYn8rcaVd/UCSooAEKA/hVDCjDuOCdifdzBl2kOQAP1pHwUAmAD8YwGYgP0x4JsAiED+GPDpAXztCNj+it4v5F1q+tOeHVoBAMIwEBUI3kOx/7TILsB3lx3aJBd+aPpV+GfH3zU3HG6Z3vR5bOHBy0dHHn55fPcFRFcoXwJ9jfVF3KMEDkM8zvFAyiM1DwU91vRg1qNlD8c93vcDhZ9Y+Eg0WvvMzHW/zlxeKaX0AEs5cjxqSuS5AAAAAElFTkSuQmCC"),
 
     THATCHED_BACKGROUND("");
 
     private final String encodedString;
-    private BitmapDrawable cachedImage;
+
+    // We cache a bitmap, NOT a drawable. Drawables maintain view specific properties,
+    // such as their bounds, and caching them causes problems when the same drawable is used by
+    // multiple views.
+    private Bitmap cachedBitmap;
 
     private Drawables(final String encodedString) {
         this.encodedString = encodedString;
     }
 
-    public Drawable decodeImage(final Context context) {
-        if (cachedImage == null) {
-            final DisplayMetrics displayMetrics = context.getResources().getDisplayMetrics();
-            int scaledDensity = Dips.asIntPixels(displayMetrics.xdpi, context);
+    public Drawable createDrawable(final Context context) {
+        Bitmap bitmap = getBitmap();
+        BitmapDrawable drawable = new BitmapDrawable(context.getResources(), bitmap);
 
+        final DisplayMetrics displayMetrics = context.getResources().getDisplayMetrics();
+        drawable.setTargetDensity(Dips.asIntPixels(displayMetrics.xdpi, context));
+        return drawable;
+    }
+
+    public Bitmap getBitmap() {
+        if (cachedBitmap == null) {
             byte[] rawImageData = Base64.decode(encodedString, Base64.DEFAULT);
-            cachedImage = new BitmapDrawable(new ByteArrayInputStream(rawImageData));
-            cachedImage.setTargetDensity(scaledDensity);
+            cachedBitmap = BitmapFactory.decodeByteArray(rawImageData, 0, rawImageData.length);
         }
-
-        return cachedImage;
+        return cachedBitmap;
     }
 
     public void clear() {
-        cachedImage = null;
+        cachedBitmap = null;
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/IntentUtils.java b/mopub-sdk/src/main/java/com/mopub/common/util/IntentUtils.java
index ac1a3d71..5eee55f5 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/IntentUtils.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/IntentUtils.java
@@ -42,7 +42,6 @@ public static Intent getStartActivityIntent(final Context context, final Class c
         return intent;
     }
 
-
     public static boolean deviceCanHandleIntent(final Context context, final Intent intent) {
         try {
             final PackageManager packageManager = context.getPackageManager();
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/ManifestUtils.java b/mopub-sdk/src/main/java/com/mopub/common/util/ManifestUtils.java
index aff7bb39..4a1abecf 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/ManifestUtils.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/ManifestUtils.java
@@ -1,21 +1,37 @@
 package com.mopub.common.util;
 
+import android.annotation.TargetApi;
 import android.app.Activity;
+import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
+import android.content.pm.ActivityInfo;
 import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
+import android.support.annotation.NonNull;
 import android.view.Gravity;
 import android.widget.Toast;
 
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 
 import java.util.ArrayList;
 import java.util.List;
 
+import static com.mopub.common.util.VersionCode.HONEYCOMB_MR2;
+import static com.mopub.common.util.VersionCode.currentApiLevel;
+
 public class ManifestUtils {
     private ManifestUtils() {}
 
     private static final List<Class<? extends Activity>> REQUIRED_WEB_VIEW_SDK_ACTIVITIES;
+    private static FlagCheckUtil sFlagCheckUtil = new FlagCheckUtil();
+
+    /**
+     * This class maintains two different lists of required Activity permissions,
+     * for the WebView and Native SDKs.
+     */
     static {
         REQUIRED_WEB_VIEW_SDK_ACTIVITIES = new ArrayList<Class<? extends Activity>>(4);
         // As a convenience, full class paths are provided here, in case the MoPub SDK was imported
@@ -32,90 +48,233 @@ private ManifestUtils() {}
         REQUIRED_NATIVE_SDK_ACTIVITIES.add(com.mopub.common.MoPubBrowser.class);
     }
 
-    public static void checkWebViewActivitiesDeclared(final Context context) {
+    public static void checkWebViewActivitiesDeclared(@NonNull final Context context) {
+        if (!Preconditions.NoThrow.checkNotNull(context, "context is not allowed to be null")) {
+            return;
+        }
+
         displayWarningForMissingActivities(context, REQUIRED_WEB_VIEW_SDK_ACTIVITIES);
+        displayWarningForMisconfiguredActivities(context, REQUIRED_WEB_VIEW_SDK_ACTIVITIES);
     }
 
-    public static void checkNativeActivitiesDeclared(final Context context) {
+    public static void checkNativeActivitiesDeclared(@NonNull final Context context) {
+        if (!Preconditions.NoThrow.checkNotNull(context, "context is not allowed to be null")) {
+            return;
+        }
+
         displayWarningForMissingActivities(context, REQUIRED_NATIVE_SDK_ACTIVITIES);
+        displayWarningForMisconfiguredActivities(context, REQUIRED_NATIVE_SDK_ACTIVITIES);
     }
 
     /**
      * This method is intended to display a warning to developers when they have accidentally
-     * omitted Activity declarations in their application's AndroidManifest. This class maintains
-     * two different lists of required Activity permissions, for the WebView and Native SDKs.
+     * omitted Activity declarations in their application's AndroidManifest.
      * Calling this when there are inadequate permissions will always Log a warning to the
      * developer, and if the the application is debuggable, it will also display a Toast.
      */
-    static void displayWarningForMissingActivities(final Context context,
-            final List<Class<? extends Activity>> requiredActivities) {
-        if (context == null) {
-            return;
-        }
+    @VisibleForTesting
+    static void displayWarningForMissingActivities(@NonNull final Context context,
+            @NonNull final List<Class<? extends Activity>> requiredActivities) {
 
-        final List<String> undeclaredActivities = getUndeclaredActivities(context, requiredActivities);
+        final List<Class<? extends Activity>> undeclaredActivities =
+                filterDeclaredActivities(context, requiredActivities, false);
 
         if (undeclaredActivities.isEmpty()) {
             return;
         }
 
-        // If the application is debuggable, display a loud toast
-        if (isDebuggable(context)) {
-            final String message =  "ERROR: YOUR MOPUB INTEGRATION IS INCOMPLETE.\n" +
-                    "Check logcat and update your AndroidManifest.xml with the correct activities.";
-            final Toast toast = Toast.makeText(context, message, Toast.LENGTH_LONG);
-            toast.setGravity(Gravity.FILL_HORIZONTAL, 0, 0);
-            toast.show();
-        }
+        logWarningToast(context);
 
         // Regardless, log a warning
         logMissingActivities(undeclaredActivities);
     }
 
-    static boolean isDebuggable(final Context context) {
-        if (context == null || context.getApplicationInfo() == null) {
-            return false;
+    /**
+     * This method is intended to display a warning to developers when they have accidentally
+     * omitted configChanges values from Activity declarations in their application's AndroidManifest.
+     * Calling this when there are inadequate permissions will always Log a warning to the
+     * developer, and if the the application is debuggable, it will also display a Toast.
+     */
+    @VisibleForTesting
+    static void displayWarningForMisconfiguredActivities(@NonNull final Context context,
+            @NonNull final List<Class<? extends Activity>> requiredActivities) {
+
+        final List<Class<? extends Activity>> declaredActivities =
+                filterDeclaredActivities(context, requiredActivities, true);
+        final List<Class<? extends Activity>> misconfiguredActivities =
+                getMisconfiguredActivities(context, declaredActivities);
+
+        if (misconfiguredActivities.isEmpty()) {
+            return;
         }
 
-        final int applicationFlags = context.getApplicationInfo().flags;
+        logWarningToast(context);
+
+        // Regardless, log a warning
+        logMisconfiguredActivities(context, misconfiguredActivities);
+    }
 
+    public static boolean isDebuggable(@NonNull final Context context) {
+        final int applicationFlags = context.getApplicationInfo().flags;
         return Utils.bitMaskContainsFlag(applicationFlags, ApplicationInfo.FLAG_DEBUGGABLE);
     }
 
-    private static List<String> getUndeclaredActivities(final Context context,
-            List<Class<? extends Activity>> requiredActivities) {
-        final List<String> undeclaredActivities = new ArrayList<String>();
+    /**
+     * Filters in activities to be returned based on matching their declaration state
+     * in the Android Manifest with the isDeclared param.
+     *
+     * @param context
+     * @param requiredActivities activities to filter against
+     * @param isDeclared desired declaration state of activities in Android Manifest to be returned
+     * @return the list of filtered in activities
+     */
+    private static List<Class<? extends Activity>> filterDeclaredActivities(@NonNull final Context context,
+            @NonNull final List<Class<? extends Activity>> requiredActivities,
+            final boolean isDeclared) {
+        final List<Class<? extends Activity>> activities =
+                new ArrayList<Class<? extends Activity>>();
 
         for (final Class<? extends Activity> activityClass : requiredActivities) {
             final Intent intent = new Intent(context, activityClass);
 
-            if (!IntentUtils.deviceCanHandleIntent(context, intent)) {
-                undeclaredActivities.add(activityClass.getName());
+            if (IntentUtils.deviceCanHandleIntent(context, intent) == isDeclared) {
+                activities.add(activityClass);
             }
         }
 
-        return undeclaredActivities;
+        return activities;
     }
 
-    private static void logMissingActivities(final List<String> undeclaredActivities) {
+    @TargetApi(13)
+    private static List<Class<? extends Activity>> getMisconfiguredActivities(@NonNull final Context context,
+            @NonNull final List<Class<? extends Activity>> activities) {
+        final List<Class<? extends Activity>> misconfiguredActivities =
+                new ArrayList<Class<? extends Activity>>();
+
+        for (final Class<? extends Activity> activity : activities) {
+            ActivityConfigChanges activityConfigChanges;
+            try {
+                activityConfigChanges = getActivityConfigChanges(context, activity);
+            } catch (PackageManager.NameNotFoundException e) {
+                continue;
+            }
+
+            if (!activityConfigChanges.hasKeyboardHidden || !activityConfigChanges.hasOrientation || !activityConfigChanges.hasScreenSize) {
+                misconfiguredActivities.add(activity);
+            }
+        }
+
+        return misconfiguredActivities;
+    }
+
+    private static void logMissingActivities(@NonNull final List<Class<? extends Activity>> undeclaredActivities) {
         final StringBuilder stringBuilder =
                 new StringBuilder("AndroidManifest permissions for the following required MoPub activities are missing:\n");
 
-        for (final String activity : undeclaredActivities) {
-            stringBuilder.append("\n\t").append(activity);
+        for (final Class<? extends Activity> activity : undeclaredActivities) {
+            stringBuilder.append("\n\t").append(activity.getName());
+        }
+        stringBuilder.append("\n\nPlease update your manifest to include them.");
+
+        MoPubLog.w(stringBuilder.toString());
+    }
+
+    private static void logMisconfiguredActivities(@NonNull Context context,
+            @NonNull final List<Class<? extends Activity>> misconfiguredActivities) {
+        final StringBuilder stringBuilder =
+                new StringBuilder("In AndroidManifest, the android:configChanges param is missing values for the following MoPub activities:\n");
+
+        for (final Class<? extends Activity> activity: misconfiguredActivities) {
+
+            ActivityConfigChanges activityConfigChanges;
+            try {
+                activityConfigChanges = getActivityConfigChanges(context, activity);
+            } catch (PackageManager.NameNotFoundException e) {
+                continue;
+            }
+
+            if (!activityConfigChanges.hasKeyboardHidden) {
+                stringBuilder.append("\n\tThe android:configChanges param for activity " + activity.getName() + " must include keyboardHidden.");
+            }
+            if (!activityConfigChanges.hasOrientation) {
+                stringBuilder.append("\n\tThe android:configChanges param for activity " + activity.getName() + " must include orientation.");
+            }
+            if (!activityConfigChanges.hasScreenSize) {
+                stringBuilder.append("\n\tThe android:configChanges param for activity " + activity.getName() + " must include screenSize.");
+            }
         }
+
         stringBuilder.append("\n\nPlease update your manifest to include them.");
 
         MoPubLog.w(stringBuilder.toString());
     }
 
+    private static ActivityConfigChanges getActivityConfigChanges(@NonNull Context context,
+            @NonNull Class<? extends Activity> activity) throws PackageManager.NameNotFoundException {
+        ActivityInfo activityInfo;
+
+        // This line can throw NameNotFoundException but we don't expect it to happen since we
+        // should only be operating on declared activities
+        activityInfo = context.getPackageManager()
+                .getActivityInfo(new ComponentName(context, activity.getName()), 0);
+
+        ActivityConfigChanges activityConfigChanges = new ActivityConfigChanges();
+        activityConfigChanges.hasKeyboardHidden = sFlagCheckUtil.hasFlag(activity, activityInfo.configChanges, ActivityInfo.CONFIG_KEYBOARD_HIDDEN);
+        activityConfigChanges.hasOrientation = sFlagCheckUtil.hasFlag(activity, activityInfo.configChanges, ActivityInfo.CONFIG_ORIENTATION);
+        activityConfigChanges.hasScreenSize = true;
+
+        // For screenSize, only set to false if the API level and target API are >= 13
+        // If the target API is < 13, then Android will implement its own backwards compatibility
+        if (currentApiLevel().isAtLeast(HONEYCOMB_MR2) &&
+                context.getApplicationInfo().targetSdkVersion >= VersionCode.HONEYCOMB_MR2.getApiLevel()) {
+            activityConfigChanges.hasScreenSize = sFlagCheckUtil.hasFlag(activity, activityInfo.configChanges, ActivityInfo.CONFIG_SCREEN_SIZE);
+        }
+
+        return activityConfigChanges;
+    }
+
+    private static void logWarningToast(@NonNull final Context context) {
+        // If the application is debuggable, display a loud toast
+        if (isDebuggable(context)) {
+            final String message = "ERROR: YOUR MOPUB INTEGRATION IS INCOMPLETE.\n" +
+                    "Check logcat and update your AndroidManifest.xml with the correct activities and configuration.";
+            final Toast toast = Toast.makeText(context, message, Toast.LENGTH_LONG);
+            toast.setGravity(Gravity.FILL_HORIZONTAL, 0, 0);
+            toast.show();
+        }
+    }
+
+    private static class ActivityConfigChanges {
+        public boolean hasKeyboardHidden;
+        public boolean hasOrientation;
+        public boolean hasScreenSize;
+    }
+
+    @VisibleForTesting
     @Deprecated // for testing
     static List<Class<? extends Activity>> getRequiredWebViewSdkActivities() {
         return REQUIRED_WEB_VIEW_SDK_ACTIVITIES;
     }
 
+    @VisibleForTesting
     @Deprecated // for testing
     static List<Class<? extends Activity>> getRequiredNativeSdkActivities() {
         return REQUIRED_NATIVE_SDK_ACTIVITIES;
     }
+
+    @VisibleForTesting
+    @Deprecated // for testing
+    static void setFlagCheckUtil(final FlagCheckUtil flagCheckUtil) {
+        sFlagCheckUtil = flagCheckUtil;
+    }
+
+    static class FlagCheckUtil {
+        // We're only passing in the Class param here to ease testing and
+        // allow mocks to match on it
+        public boolean hasFlag(@SuppressWarnings("unused") Class clazz,
+                int bitMask,
+                int flag) {
+            return Utils.bitMaskContainsFlag(bitMask, flag);
+        }
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/ResponseHeader.java b/mopub-sdk/src/main/java/com/mopub/common/util/ResponseHeader.java
index 4e0987b7..995b1224 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/ResponseHeader.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/ResponseHeader.java
@@ -3,7 +3,7 @@
 public enum ResponseHeader {
     AD_TIMEOUT("X-AdTimeout"),
     AD_TYPE("X-Adtype"),
-    CLICKTHROUGH_URL("X-Clickthrough"),
+    CLICK_TRACKING_URL("X-Clickthrough"),
     CUSTOM_EVENT_DATA("X-Custom-Event-Class-Data"),
     CUSTOM_EVENT_NAME("X-Custom-Event-Class-Name"),
     CUSTOM_EVENT_HTML_DATA("X-Custom-Event-Html-Data"),
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Strings.java b/mopub-sdk/src/main/java/com/mopub/common/util/Strings.java
index dd20902e..fed28d0a 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/Strings.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/Strings.java
@@ -6,7 +6,7 @@
 public class Strings {
     public static String fromStream(InputStream inputStream) throws IOException {
         int numberBytesRead = 0;
-        StringBuffer out = new StringBuffer();
+        StringBuilder out = new StringBuilder();
         byte[] bytes = new byte[4096];
 
         while (numberBytesRead != -1) {
@@ -18,12 +18,4 @@ public static String fromStream(InputStream inputStream) throws IOException {
 
         return out.toString();
     }
-
-    public static boolean isEmpty(String input) {
-        if (input == null) {
-            return false;
-        } else {
-            return input.length() == 0;
-        }
-    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Timer.java b/mopub-sdk/src/main/java/com/mopub/common/util/Timer.java
new file mode 100644
index 00000000..b53c4de3
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/Timer.java
@@ -0,0 +1,38 @@
+package com.mopub.common.util;
+
+import java.util.concurrent.TimeUnit;
+
+public class Timer {
+    private static enum State { STARTED, STOPPED }
+    private long mStopTimeNanos;
+    private long mStartTimeNanos;
+    private State mState;
+
+    public Timer() {
+        mState = State.STOPPED;
+    }
+
+    public void start() {
+        // System.nanoTime isn't affected by changing the system time
+        mStartTimeNanos = System.nanoTime();
+        mState = State.STARTED;
+    }
+
+    public void stop() {
+        if (mState != State.STARTED) {
+            throw new IllegalStateException("EventTimer was not started.");
+        }
+        mState = State.STOPPED;
+        mStopTimeNanos = System.nanoTime();
+    }
+
+    public long getTime() {
+        long endTime;
+        if (mState == State.STARTED) {
+            endTime = System.nanoTime();
+        } else {
+            endTime = mStopTimeNanos;
+        }
+        return TimeUnit.MILLISECONDS.convert(endTime - mStartTimeNanos, TimeUnit.NANOSECONDS);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Utils.java b/mopub-sdk/src/main/java/com/mopub/common/util/Utils.java
index ae829979..c4b620de 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/Utils.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/Utils.java
@@ -1,6 +1,9 @@
 package com.mopub.common.util;
 
+import com.mopub.common.VisibleForTesting;
+
 import java.security.MessageDigest;
+import java.util.Locale;
 import java.util.concurrent.atomic.AtomicLong;
 
 public class Utils {
@@ -19,7 +22,7 @@ public static String sha1(String string) {
                 stringBuilder.append(String.format("%02X", b));
             }
 
-            return stringBuilder.toString().toLowerCase();
+            return stringBuilder.toString().toLowerCase(Locale.US);
         } catch (Exception e) {
             return "";
         }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java
index 47ac6f49..8b49b4c9 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java
@@ -5,14 +5,19 @@
 import android.graphics.Bitmap;
 import android.net.Uri;
 import android.view.View;
+
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.DateAndTime;
 import com.mopub.common.util.Streams;
 import com.mopub.mobileads.util.Base64;
 
-import java.io.*;
+import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.io.FileOutputStream;
 import java.text.SimpleDateFormat;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.Locale;
 
 public class AdAlertReporter {
     private static final String EMAIL_RECIPIENT = "creative-review@mopub.com";
@@ -41,7 +46,7 @@ public AdAlertReporter(final Context context, final View view, final AdConfigura
 
         mEmailAttachments = new ArrayList<Uri>();
 
-        SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN);
+        SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN, Locale.US);
         mDateString = dateFormat.format(DateAndTime.now());
 
         initEmailIntent();
@@ -63,7 +68,6 @@ public void send() {
         Intent chooserIntent = Intent.createChooser(mEmailIntent, "Send Email...");
         chooserIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
         mContext.startActivity(chooserIntent);
-
     }
 
     private void initEmailIntent() {
@@ -200,7 +204,7 @@ private void addTextAttachment(String fileName, String body) {
 
     private String getFormattedTimeStamp(long timeStamp) {
         if (timeStamp != -1) {
-            SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN);
+            SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN, Locale.US);
             return dateFormat.format(new Date(timeStamp));
         } else {
             return null;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdConfiguration.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdConfiguration.java
index 236c577b..1be6646a 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdConfiguration.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdConfiguration.java
@@ -4,10 +4,13 @@
 import android.os.Build;
 import android.provider.Settings;
 import android.webkit.WebView;
+
 import com.mopub.common.MoPub;
+import com.mopub.common.VisibleForTesting;
 import com.mopub.common.util.DateAndTime;
 import com.mopub.common.util.Utils;
 import com.mopub.common.util.VersionCode;
+
 import org.apache.http.HttpResponse;
 
 import java.io.Serializable;
@@ -15,7 +18,7 @@
 
 import static com.mopub.common.util.ResponseHeader.AD_TIMEOUT;
 import static com.mopub.common.util.ResponseHeader.AD_TYPE;
-import static com.mopub.common.util.ResponseHeader.CLICKTHROUGH_URL;
+import static com.mopub.common.util.ResponseHeader.CLICK_TRACKING_URL;
 import static com.mopub.common.util.ResponseHeader.DSP_CREATIVE_ID;
 import static com.mopub.common.util.ResponseHeader.FAIL_URL;
 import static com.mopub.common.util.ResponseHeader.HEIGHT;
@@ -25,9 +28,9 @@
 import static com.mopub.common.util.ResponseHeader.REFRESH_TIME;
 import static com.mopub.common.util.ResponseHeader.WIDTH;
 import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
-import static com.mopub.mobileads.util.HttpResponses.extractHeader;
-import static com.mopub.mobileads.util.HttpResponses.extractIntHeader;
-import static com.mopub.mobileads.util.HttpResponses.extractIntegerHeader;
+import static com.mopub.common.network.HeaderUtils.extractHeader;
+import static com.mopub.common.network.HeaderUtils.extractIntHeader;
+import static com.mopub.common.network.HeaderUtils.extractIntegerHeader;
 
 public class AdConfiguration implements Serializable {
     private static final long serialVersionUID = 0L;
@@ -60,7 +63,7 @@
     private int mRefreshTimeMilliseconds;
     private String mDspCreativeId;
 
-    static AdConfiguration extractFromMap(Map<String,Object> map) {
+    public static AdConfiguration extractFromMap(Map<String, Object> map) {
         if (map == null) {
             return null;
         }
@@ -74,7 +77,8 @@ static AdConfiguration extractFromMap(Map<String,Object> map) {
         return null;
     }
 
-    AdConfiguration(final Context context) {
+    @VisibleForTesting
+    public AdConfiguration(final Context context) {
         setDefaults();
 
         if (context != null) {
@@ -100,6 +104,9 @@ void cleanup() {
     }
 
     void addHttpResponse(final HttpResponse httpResponse) {
+        // Set the type of ad that has been returned, i.e. "html", "mraid"
+        // For interstitials, this header is set to "interstitial" and the type of interstitial
+        // is stored in the FULL_AD_TYPE header
         mAdType = extractHeader(httpResponse, AD_TYPE);
 
         // Set the network type of the ad.
@@ -109,7 +116,7 @@ void addHttpResponse(final HttpResponse httpResponse) {
         mRedirectUrl = extractHeader(httpResponse, REDIRECT_URL);
 
         // Set the URL that is prepended to links for click-tracking purposes.
-        mClickthroughUrl = extractHeader(httpResponse, CLICKTHROUGH_URL);
+        mClickthroughUrl = extractHeader(httpResponse, CLICK_TRACKING_URL);
 
         // Set the fall-back URL to be used if the current request fails.
         mFailUrl = extractHeader(httpResponse, FAIL_URL);
@@ -157,11 +164,12 @@ String getResponseString() {
         return mResponseString;
     }
 
-    void setResponseString(String responseString) {
+    @VisibleForTesting
+    public void setResponseString(String responseString) {
         mResponseString = responseString;
     }
 
-    long getBroadcastIdentifier() {
+    public long getBroadcastIdentifier() {
         return mBroadcastIdentifier;
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetchTask.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetchTask.java
index 85875e25..b95f4659 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetchTask.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetchTask.java
@@ -1,8 +1,11 @@
 package com.mopub.mobileads;
 
 import android.os.AsyncTask;
+
+import com.mopub.common.event.MoPubEvents;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.factories.HttpClientFactory;
+
 import org.apache.http.HttpResponse;
 import org.apache.http.HttpStatus;
 import org.apache.http.client.HttpClient;
@@ -12,7 +15,7 @@
 import static com.mopub.common.util.ResponseHeader.AD_TYPE;
 import static com.mopub.common.util.ResponseHeader.USER_AGENT;
 import static com.mopub.common.util.ResponseHeader.WARMUP;
-import static com.mopub.mobileads.util.HttpResponses.extractHeader;
+import static com.mopub.common.network.HeaderUtils.extractHeader;
 
 public class AdFetchTask extends AsyncTask<String, Void, AdLoadTask> {
     private TaskTracker mTaskTracker;
@@ -25,6 +28,7 @@
     private AdFetcher.FetchStatus mFetchStatus = AdFetcher.FetchStatus.NOT_SET;
     private static final int MAXIMUM_REFRESH_TIME_MILLISECONDS = 600000;
     private static final double EXPONENTIAL_BACKOFF_FACTOR = 1.5;
+    private static final MoPubEvents.Type EVENT_TYPE = MoPubEvents.Type.AD_REQUEST;
 
     public AdFetchTask(TaskTracker taskTracker, AdViewController adViewController, String userAgent, int timeoutMilliseconds) {
         mTaskTracker = taskTracker;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoadTask.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoadTask.java
index cb379e71..072c17a8 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoadTask.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoadTask.java
@@ -6,17 +6,21 @@
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Json;
 import com.mopub.common.util.Strings;
+
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
 
-import java.io.*;
+import java.io.IOException;
 import java.lang.ref.WeakReference;
 import java.lang.reflect.Method;
-import java.util.*;
+import java.util.HashMap;
+import java.util.Map;
 
+import static com.mopub.common.network.HeaderUtils.extractBooleanHeader;
+import static com.mopub.common.network.HeaderUtils.extractHeader;
 import static com.mopub.common.util.ResponseHeader.AD_TYPE;
-import static com.mopub.common.util.ResponseHeader.CLICKTHROUGH_URL;
+import static com.mopub.common.util.ResponseHeader.CLICK_TRACKING_URL;
 import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_DATA;
 import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_NAME;
 import static com.mopub.common.util.ResponseHeader.CUSTOM_SELECTOR;
@@ -28,8 +32,6 @@
 import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.AdFetcher.REDIRECT_URL_KEY;
 import static com.mopub.mobileads.AdFetcher.SCROLLABLE_KEY;
-import static com.mopub.mobileads.util.HttpResponses.extractBooleanHeader;
-import static com.mopub.mobileads.util.HttpResponses.extractHeader;
 
 abstract class AdLoadTask {
     WeakReference<AdViewController> mWeakAdViewController;
@@ -102,7 +104,7 @@ private AdLoadTask extractCustomEventAdLoadTaskFromResponseBody() throws IOExcep
             adViewController.getAdConfiguration().setResponseString(htmlData);
 
             String redirectUrl = extractHeader(response, REDIRECT_URL);
-            String clickthroughUrl = extractHeader(response, CLICKTHROUGH_URL);
+            String clickthroughUrl = extractHeader(response, CLICK_TRACKING_URL);
             boolean scrollingEnabled = extractBooleanHeader(response, SCROLLABLE, false);
 
             Map<String, String> eventDataMap = new HashMap<String, String>();
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdTypeTranslator.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
index 2ac1f294..a2a59672 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
@@ -8,8 +8,8 @@
 
         MILLENNIAL_BANNER("millennial_native_banner", "com.mopub.mobileads.MillennialBanner"),
         MILLENNIAL_INTERSTITIAL("millennial_full_interstitial", "com.mopub.mobileads.MillennialInterstitial"),
-        MRAID_BANNER("mraid_banner", "com.mopub.mobileads.MraidBanner"),
-        MRAID_INTERSTITIAL("mraid_interstitial", "com.mopub.mobileads.MraidInterstitial"),
+        MRAID_BANNER("mraid_banner", "com.mopub.mraid.MraidBanner"),
+        MRAID_INTERSTITIAL("mraid_interstitial", "com.mopub.mraid.MraidInterstitial"),
         HTML_BANNER("html_banner", "com.mopub.mobileads.HtmlBanner"),
         HTML_INTERSTITIAL("html_interstitial", "com.mopub.mobileads.HtmlInterstitial"),
         VAST_VIDEO_INTERSTITIAL("vast_interstitial", "com.mopub.mobileads.VastVideoInterstitial"),
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
index a9c537f9..d6d61270 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
@@ -11,21 +11,25 @@
 import android.view.View;
 import android.widget.FrameLayout;
 
+import com.mopub.common.Constants;
 import com.mopub.common.GpsHelper;
 import com.mopub.common.MoPub;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Dips;
 import com.mopub.mobileads.factories.AdFetcherFactory;
 import com.mopub.mobileads.factories.HttpClientFactory;
+import com.mopub.mraid.MraidNativeCommandHandler;
+
 import org.apache.http.HttpResponse;
 import org.apache.http.client.methods.HttpGet;
 import org.apache.http.impl.client.DefaultHttpClient;
 
-import java.util.*;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.WeakHashMap;
 
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
 import static com.mopub.common.GpsHelper.GpsHelperListener;
-import static com.mopub.common.LocationService.getLastKnownLocation;
 
 public class AdViewController {
     static final int MINIMUM_REFRESH_TIME_MILLISECONDS = 10000;
@@ -58,7 +62,7 @@
     private boolean mIsTesting;
     private boolean mAdWasLoaded;
 
-    protected static void setShouldHonorServerDimensions(View view) {
+    public static void setShouldHonorServerDimensions(View view) {
         sViewShouldHonorServerDimensions.put(view, true);
     }
 
@@ -70,7 +74,8 @@ public AdViewController(Context context, MoPubView view) {
         mContext = context;
         mMoPubView = view;
 
-        mUrlGenerator = new WebViewAdUrlGenerator(context);
+        mUrlGenerator = new WebViewAdUrlGenerator(context,
+                new MraidNativeCommandHandler().isStorePictureSupported(context));
         mAdConfiguration = new AdConfiguration(mContext);
 
         mAdFetcher = AdFetcherFactory.create(this, mAdConfiguration.getUserAgent());
@@ -106,12 +111,6 @@ public void loadAd() {
             return;
         }
 
-        if (mLocation == null) {
-            mLocation = getLastKnownLocation(mContext,
-                    MoPub.getLocationPrecision(),
-                    MoPub.getLocationAwareness());
-        }
-
         // If we have access to Google Play Services (GPS) but the advertising info
         // is not cached then guarantee we get it before building the ad request url
         // in the callback, this is a requirement from Google
@@ -362,7 +361,7 @@ String generateAdUrl() {
                 .withAdUnitId(mAdConfiguration.getAdUnitId())
                 .withKeywords(mKeywords)
                 .withLocation(mLocation)
-                .generateUrlString(getServerHostname());
+                .generateUrlString(Constants.HOST);
     }
 
     void adDidFail(MoPubErrorCode errorCode) {
@@ -396,10 +395,6 @@ private void cancelRefreshTimer() {
         mHandler.removeCallbacks(mRefreshRunnable);
     }
 
-    private String getServerHostname() {
-        return mIsTesting ? MoPubView.HOST_FOR_TESTING : MoPubView.HOST;
-    }
-
     private boolean isNetworkAvailable() {
         // If we don't have network state access, just assume the network is up.
         int result = mContext.checkCallingPermission(ACCESS_NETWORK_STATE);
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
index 6f8cea10..25a0c774 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
@@ -4,6 +4,8 @@
 import android.graphics.Color;
 import android.view.MotionEvent;
 import android.view.View;
+
+import com.mopub.common.Constants;
 import com.mopub.common.logging.MoPubLog;
 
 import static com.mopub.common.util.VersionCode.ICE_CREAM_SANDWICH;
@@ -52,7 +54,8 @@ private void disableScrollingAndZoom() {
     }
 
     void loadHtmlResponse(String htmlResponse) {
-        loadDataWithBaseURL("http://ads.mopub.com/", htmlResponse, "text/html", "utf-8", null);
+        loadDataWithBaseURL("http://" + Constants.HOST + "/", htmlResponse, "text/html", "utf-8",
+                null);
     }
 
     void initializeOnTouchListener(final boolean isScrollable) {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
index 5fb5f449..b84ae93d 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
@@ -1,49 +1,39 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
-import android.graphics.drawable.StateListDrawable;
 import android.os.Bundle;
 import android.view.View;
-import android.view.View.OnClickListener;
 import android.view.Window;
 import android.view.WindowManager;
-import android.widget.ImageButton;
-import android.widget.ImageView;
-import android.widget.RelativeLayout;
+import android.widget.FrameLayout.LayoutParams;
 
-import com.mopub.common.util.Dips;
-import com.mopub.mobileads.util.Interstitials;
+import com.mopub.common.CloseableLayout;
+import com.mopub.common.CloseableLayout.OnCloseListener;
 
-import static android.view.View.INVISIBLE;
-import static android.view.View.VISIBLE;
-import static com.mopub.common.util.Drawables.INTERSTITIAL_CLOSE_BUTTON_NORMAL;
-import static com.mopub.common.util.Drawables.INTERSTITIAL_CLOSE_BUTTON_PRESSED;
 import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
 
 abstract class BaseInterstitialActivity extends Activity {
-    private OnClickListener mCloseOnClickListener;
-
     enum JavaScriptWebViewCallbacks {
-        WEB_VIEW_DID_APPEAR("javascript:webviewDidAppear();"),
-        WEB_VIEW_DID_CLOSE("javascript:webviewDidClose();");
+        // The ad server appends these functions to the MRAID javascript to help with third party
+        // impression tracking.
+        WEB_VIEW_DID_APPEAR("webviewDidAppear();"),
+        WEB_VIEW_DID_CLOSE("webviewDidClose();");
+
+        private String mJavascript;
+        private JavaScriptWebViewCallbacks(String javascript) {
+            mJavascript = javascript;
+        }
 
-        private String mUrl;
-        private JavaScriptWebViewCallbacks(String url) {
-            mUrl = url;
+        protected String getJavascript() {
+            return mJavascript;
         }
 
         protected String getUrl() {
-            return mUrl;
+            return "javascript:" + mJavascript;
         }
     }
 
-    private static final float CLOSE_BUTTON_SIZE_DP = 50f;
-    private static final float CLOSE_BUTTON_PADDING = 8f;
-
-    private ImageView mCloseButton;
-    private RelativeLayout mLayout;
-    private int mButtonSize;
-    private int mButtonPadding;
+    private CloseableLayout mCloseableLayout;
     private long mBroadcastIdentifier;
 
     public abstract View getAdView();
@@ -55,33 +45,28 @@ protected void onCreate(Bundle savedInstanceState) {
         requestWindowFeature(Window.FEATURE_NO_TITLE);
         getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
 
-        mButtonSize = Dips.asIntPixels(CLOSE_BUTTON_SIZE_DP, this);
-        mButtonPadding = Dips.asIntPixels(CLOSE_BUTTON_PADDING, this);
-        mCloseOnClickListener = new OnClickListener() {
+        View adView = getAdView();
+
+        mCloseableLayout = new CloseableLayout(this);
+        mCloseableLayout.setOnCloseListener(new OnCloseListener() {
             @Override
-            public void onClick(final View view) {
+            public void onClose() {
                 finish();
             }
-        };
-
-        // The contentView needs to be a RelativeLayout so the close button can be properly aligned
-        mLayout = new RelativeLayout(this);
-        final RelativeLayout.LayoutParams adViewLayout = new RelativeLayout.LayoutParams(
-                RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.MATCH_PARENT);
-        mLayout.addView(getAdView(), adViewLayout);
-        setContentView(mLayout);
+        });
+        mCloseableLayout.addView(adView,
+                new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
+        setContentView(mCloseableLayout);
 
         final AdConfiguration adConfiguration = getAdConfiguration();
         if (adConfiguration != null) {
             mBroadcastIdentifier = adConfiguration.getBroadcastIdentifier();
         }
-
-        createInterstitialCloseButton();
     }
 
     @Override
     protected void onDestroy() {
-        mLayout.removeAllViews();
+        mCloseableLayout.removeAllViews();
         super.onDestroy();
     }
 
@@ -90,11 +75,11 @@ long getBroadcastIdentifier() {
     }
 
     protected void showInterstitialCloseButton() {
-        mCloseButton.setVisibility(VISIBLE);
+        mCloseableLayout.setCloseVisible(true);
     }
 
     protected void hideInterstitialCloseButton() {
-        mCloseButton.setVisibility(INVISIBLE);
+        mCloseableLayout.setCloseVisible(false);
     }
 
     protected AdConfiguration getAdConfiguration() {
@@ -106,31 +91,4 @@ protected AdConfiguration getAdConfiguration() {
         }
         return adConfiguration;
     }
-
-    void addCloseEventRegion() {
-        final int buttonSizePixels = Dips.dipsToIntPixels(CLOSE_BUTTON_SIZE_DP, this);
-        final RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(buttonSizePixels, buttonSizePixels);
-        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
-        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_TOP);
-        Interstitials.addCloseEventRegion(mLayout, layoutParams, mCloseOnClickListener);
-    }
-
-    private void createInterstitialCloseButton() {
-        mCloseButton = new ImageButton(this);
-        StateListDrawable states = new StateListDrawable();
-        states.addState(new int[] {-android.R.attr.state_pressed}, INTERSTITIAL_CLOSE_BUTTON_NORMAL.decodeImage(this));
-        states.addState(new int[] {android.R.attr.state_pressed}, INTERSTITIAL_CLOSE_BUTTON_PRESSED.decodeImage(this));
-        mCloseButton.setImageDrawable(states);
-        mCloseButton.setBackgroundDrawable(null);
-        mCloseButton.setOnClickListener(new OnClickListener() {
-            public void onClick(View v) {
-                finish();
-            }
-        });
-
-        RelativeLayout.LayoutParams buttonLayout = new RelativeLayout.LayoutParams(mButtonSize, mButtonSize);
-        buttonLayout.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
-        buttonLayout.setMargins(mButtonPadding, 0, mButtonPadding, 0);
-        mLayout.addView(mCloseButton, buttonLayout);
-    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
index ec9ce51c..83c3c006 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
@@ -12,11 +12,11 @@
 import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
 import static com.mopub.mobileads.VastVideoViewController.VAST_VIDEO_CONFIGURATION;
 
-class BaseVideoPlayerActivity extends Activity {
+public class BaseVideoPlayerActivity extends Activity {
     static final String VIDEO_CLASS_EXTRAS_KEY = "video_view_class_name";
-    static final String VIDEO_URL = "video_url";
+    public static final String VIDEO_URL = "video_url";
 
-    static void startMraid(final Context context, final String videoUrl, final AdConfiguration adConfiguration) {
+    public static void startMraid(final Context context, final String videoUrl, final AdConfiguration adConfiguration) {
         final Intent intentVideoPlayerActivity = createIntentMraid(context, videoUrl, adConfiguration);
         try {
             context.startActivity(intentVideoPlayerActivity);
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
index 195b1612..15031eb3 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
@@ -8,18 +8,19 @@
 import android.view.ViewGroup;
 import android.widget.RelativeLayout;
 import android.widget.VideoView;
+
 import com.mopub.common.logging.MoPubLog;
 
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
 
-abstract class BaseVideoViewController {
+public abstract class BaseVideoViewController {
     private final Context mContext;
     private final RelativeLayout mLayout;
     private final BaseVideoViewControllerListener mBaseVideoViewControllerListener;
     private long mBroadcastIdentifier;
 
-    interface BaseVideoViewControllerListener {
+    public interface BaseVideoViewControllerListener {
         void onSetContentView(final View view);
         void onSetRequestedOrientation(final int requestedOrientation);
         void onFinish();
@@ -28,14 +29,14 @@ void onStartActivityForResult(final Class<? extends Activity> clazz,
                 final Bundle extras);
     }
 
-    BaseVideoViewController(final Context context, final long broadcastIdentifier, final BaseVideoViewControllerListener baseVideoViewControllerListener) {
+    protected BaseVideoViewController(final Context context, final long broadcastIdentifier, final BaseVideoViewControllerListener baseVideoViewControllerListener) {
         mContext = context.getApplicationContext();
         mBroadcastIdentifier = broadcastIdentifier;
         mBaseVideoViewControllerListener = baseVideoViewControllerListener;
         mLayout = new RelativeLayout(mContext);
     }
 
-     void onCreate() {
+     protected void onCreate() {
         final RelativeLayout.LayoutParams adViewLayout = new RelativeLayout.LayoutParams(
                 RelativeLayout.LayoutParams.FILL_PARENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
         adViewLayout.addRule(RelativeLayout.CENTER_IN_PARENT);
@@ -43,12 +44,12 @@ void onCreate() {
         mBaseVideoViewControllerListener.onSetContentView(mLayout);
     }
 
-    abstract VideoView getVideoView();
-    abstract void onPause();
-    abstract void onResume();
-    abstract void onDestroy();
+    protected abstract VideoView getVideoView();
+    protected abstract void onPause();
+    protected abstract void onResume();
+    protected abstract void onDestroy();
 
-    boolean backButtonEnabled() {
+    public boolean backButtonEnabled() {
         return true;
     }
 
@@ -56,28 +57,27 @@ void onActivityResult(final int requestCode, final int resultCode, final Intent
         // By default, the activity result is ignored
     }
 
-    BaseVideoViewControllerListener getBaseVideoViewControllerListener() {
+    protected BaseVideoViewControllerListener getBaseVideoViewControllerListener() {
         return mBaseVideoViewControllerListener;
     }
 
-    Context getContext() {
+    protected Context getContext() {
         return mContext;
     }
 
-    ViewGroup getLayout() {
+    public ViewGroup getLayout() {
         return mLayout;
     }
 
-
-    void videoError(boolean shouldFinish) {
-        MoPubLog.d("Error: video can not be played.");
+    protected void videoError(boolean shouldFinish) {
+        MoPubLog.e("Video cannot be played.");
         broadcastAction(ACTION_INTERSTITIAL_FAIL);
         if (shouldFinish) {
            mBaseVideoViewControllerListener.onFinish();
         }
     }
 
-    void videoCompleted(boolean shouldFinish) {
+    protected void videoCompleted(boolean shouldFinish) {
         if (shouldFinish) {
             mBaseVideoViewControllerListener.onFinish();
         }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseWebView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseWebView.java
index c9f633be..a9331a31 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseWebView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseWebView.java
@@ -1,6 +1,13 @@
 package com.mopub.mobileads;
 
 import android.content.Context;
+import android.graphics.Color;
+import android.graphics.PixelFormat;
+import android.os.Build.VERSION;
+import android.os.Build.VERSION_CODES;
+import android.support.annotation.NonNull;
+import android.view.Gravity;
+import android.view.WindowManager;
 import android.webkit.WebSettings;
 import android.webkit.WebView;
 
@@ -9,6 +16,7 @@
 import com.mopub.mobileads.util.WebViews;
 
 public class BaseWebView extends WebView {
+    private static boolean sDeadlockCleared = false;
     protected boolean mIsDestroyed;
 
     public BaseWebView(Context context) {
@@ -20,6 +28,11 @@ public BaseWebView(Context context) {
         enablePlugins(false);
 
         WebViews.setDisableJSChromeClient(this);
+
+        if (!sDeadlockCleared) {
+            clearWebViewDeadlock(getContext());
+            sDeadlockCleared = true;
+        }
     }
 
     protected void enablePlugins(final boolean enabled) {
@@ -39,7 +52,13 @@ protected void enablePlugins(final boolean enabled) {
     public void destroy() {
         mIsDestroyed = true;
 
+        // Needed to prevent receiving the following error on Android versions using WebViewClassic
+        // https://code.google.com/p/android/issues/detail?id=65833.
         Views.removeFromParent(this);
+
+        // Even after removing from the parent, WebViewClassic can leak because of a static
+        // reference from HTML5VideoViewProcessor. Removing children fixes this problem.
+        removeAllViews();
         super.destroy();
     }
 
@@ -47,4 +66,43 @@ public void destroy() {
     void setIsDestroyed(boolean isDestroyed) {
         mIsDestroyed = isDestroyed;
     }
+
+    /**
+     * This fixes https://code.google.com/p/android/issues/detail?id=63754,
+     * which occurs on KitKat devices. When a WebView containing an HTML5 video is
+     * is destroyed it can deadlock the WebView thread until another hardware accelerated WebView
+     * is added to the view hierarchy and restores the GL context. Since we need to use WebView
+     * before adding it to the view hierarchy, this method clears the deadlock by adding a
+     * separate invisible WebView.
+     *
+     * This potential deadlock must be cleared anytime you attempt to access a WebView that
+     * is not added to the view hierarchy.
+     */
+    private void clearWebViewDeadlock(@NonNull final Context context) {
+        if (VERSION.SDK_INT == VERSION_CODES.KITKAT) {
+            // Create an invisible webview
+            final WebView webView = new WebView(context.getApplicationContext());
+            webView.setBackgroundColor(Color.TRANSPARENT);
+
+            // For the deadlock to be cleared, we must load content and add to the view hierarchy. Since
+            // we don't have an activity context, we'll use a system window.
+            webView.loadDataWithBaseURL(null, "", "text/html", "UTF-8", null);
+            final WindowManager.LayoutParams params = new WindowManager.LayoutParams();
+            params.width = 1;
+            params.height = 1;
+            // Unlike other system window types TYPE_TOAST doesn't require extra permissions
+            params.type = WindowManager.LayoutParams.TYPE_TOAST;
+            params.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE
+                    | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE
+                    | WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;
+            params.format = PixelFormat.TRANSPARENT;
+            params.gravity = Gravity.START | Gravity.TOP;
+            final WindowManager windowManager =
+                    (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
+
+            windowManager.addView(webView, params);
+        }
+    }
+
+
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java b/mopub-sdk/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java
index 624995f2..06edb181 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java
@@ -9,16 +9,16 @@
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 
-class EventForwardingBroadcastReceiver extends BroadcastReceiver {
+public class EventForwardingBroadcastReceiver extends BroadcastReceiver {
     private final CustomEventInterstitialListener mCustomEventInterstitialListener;
     private final long mBroadcastIdentifier;
     private Context mContext;
 
     static final String BROADCAST_IDENTIFIER_KEY = "broadcastIdentifier";
-    static final String ACTION_INTERSTITIAL_FAIL = "com.mopub.action.interstitial.fail";
-    static final String ACTION_INTERSTITIAL_SHOW = "com.mopub.action.interstitial.show";
-    static final String ACTION_INTERSTITIAL_DISMISS = "com.mopub.action.interstitial.dismiss";
-    static final String ACTION_INTERSTITIAL_CLICK = "com.mopub.action.interstitial.click";
+    public static final String ACTION_INTERSTITIAL_FAIL = "com.mopub.action.interstitial.fail";
+    public static final String ACTION_INTERSTITIAL_SHOW = "com.mopub.action.interstitial.show";
+    public static final String ACTION_INTERSTITIAL_DISMISS = "com.mopub.action.interstitial.dismiss";
+    public static final String ACTION_INTERSTITIAL_CLICK = "com.mopub.action.interstitial.click";
     private static IntentFilter sIntentFilter;
 
 
@@ -34,7 +34,7 @@ static void broadcastAction(final Context context, final long broadcastIdentifie
         LocalBroadcastManager.getInstance(context.getApplicationContext()).sendBroadcast(intent);
     }
 
-    static IntentFilter getHtmlInterstitialIntentFilter() {
+    public static IntentFilter getHtmlInterstitialIntentFilter() {
         if (sIntentFilter == null) {
             sIntentFilter = new IntentFilter();
             sIntentFilter.addAction(ACTION_INTERSTITIAL_FAIL);
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
index d3ddf4a9..12775a4b 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
@@ -29,7 +29,7 @@ protected void preRenderHtml(CustomEventInterstitialListener customEventIntersti
     }
 
     @Override
-    protected void showInterstitial() {
+    public void showInterstitial() {
         MoPubActivity.start(mContext, mHtmlData, mIsScrollable, mRedirectUrl, mClickthroughUrl, mAdConfiguration);
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubBrowserController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubBrowserController.java
deleted file mode 100644
index ff9a8f49..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubBrowserController.java
+++ /dev/null
@@ -1,54 +0,0 @@
-package com.mopub.mobileads;
-
-
-import android.content.Context;
-import android.content.Intent;
-import android.net.Uri;
-import android.util.Log;
-import com.mopub.common.MoPubBrowser;
-import com.mopub.common.util.IntentUtils;
-import com.mopub.mobileads.util.Utils;
-
-class MoPubBrowserController extends MraidAbstractController {
-    private static final String LOGTAG = "MoPubBrowserController";
-    private Context mContext;
-
-    MoPubBrowserController(MraidView view) {
-        super(view);
-        mContext = view.getContext();
-    }
-    
-    protected void open(String url) {
-        Log.d(LOGTAG, "Opening url: " + url);
-        
-        final MraidView mraidView = getMraidView();
-        if (mraidView.getMraidListener() != null) {
-            mraidView.getMraidListener().onOpen(mraidView);
-        }
-
-        // this is added because http/s can also be intercepted
-        if (!isWebSiteUrl(url) && IntentUtils.canHandleApplicationUrl(mContext, url)) {
-            launchApplicationUrl(url);
-            return;
-        }
-
-        Intent i = new Intent(mContext, MoPubBrowser.class);
-        i.putExtra(MoPubBrowser.DESTINATION_URL_KEY, url);
-        i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        mContext.startActivity(i);
-    }
-
-
-    private boolean launchApplicationUrl(String url) {
-        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
-        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-
-        String errorMessage = "Unable to open intent.";
-
-        return Utils.executeIntent(getMraidView().getContext(), intent, errorMessage);
-    }
-
-    private boolean isWebSiteUrl(String url) {
-        return url.startsWith("http://") || url.startsWith("https://");
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
index f1f98dc6..677f3fa0 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
@@ -2,31 +2,28 @@
 
 import android.content.Context;
 import android.content.SharedPreferences;
+
 import com.mopub.common.BaseUrlGenerator;
 import com.mopub.common.ClientMetadata;
+import com.mopub.common.Constants;
 import com.mopub.common.GpsHelper;
 import com.mopub.common.SharedPreferencesHelper;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.factories.HttpClientFactory;
+
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
 import org.apache.http.HttpStatus;
 import org.apache.http.client.methods.HttpGet;
 import org.apache.http.impl.client.DefaultHttpClient;
 
-public class MoPubConversionTracker {
-    private static final String TRACK_HOST = "ads.mopub.com";
-    private static final String TRACK_HANDLER = "/m/open";
+import static com.mopub.common.GpsHelper.GpsHelperListener;
 
+public class MoPubConversionTracker {
     private Context mContext;
     private String mIsTrackedKey;
     private SharedPreferences mSharedPreferences;
     private String mPackageName;
-    private ConversionTrackerGpsHelperListener mConversionTrackerGpsHelperListener;
-
-    public MoPubConversionTracker() {
-        mConversionTrackerGpsHelperListener = new ConversionTrackerGpsHelperListener();
-    }
 
     public void reportAppOpen(Context context) {
         if (context == null) {
@@ -39,7 +36,12 @@ public void reportAppOpen(Context context) {
         mSharedPreferences = SharedPreferencesHelper.getSharedPreferences(mContext);
 
         if (!isAlreadyTracked()) {
-            GpsHelper.fetchAdvertisingInfoAsync(mContext, mConversionTrackerGpsHelperListener);
+            GpsHelper.fetchAdvertisingInfoAsync(mContext, new GpsHelperListener() {
+                @Override
+                public void onFetchAdInfoCompleted() {
+                    new Thread(new TrackOpen()).start();
+                }
+            });
         } else {
             MoPubLog.d("Conversion already tracked");
         }
@@ -52,11 +54,10 @@ private boolean isAlreadyTracked() {
     private class ConversionUrlGenerator extends BaseUrlGenerator {
         @Override
         public String generateUrlString(String serverHostname) {
-            initUrlString(serverHostname, TRACK_HANDLER);
+            initUrlString(serverHostname, Constants.CONVERSION_TRACKING_HANDLER);
 
             setApiVersion("6");
             setPackageId(mPackageName);
-
             ClientMetadata clientMetadata = ClientMetadata.getInstance(mContext);
             setUdid(clientMetadata.getAdvertisingId());
             setDoNotTrack(clientMetadata.isDoNotTrackSet());
@@ -71,7 +72,7 @@ private void setPackageId(String packageName) {
 
     private class TrackOpen implements Runnable {
         public void run() {
-            String url = new ConversionUrlGenerator().generateUrlString(TRACK_HOST);
+            String url = new ConversionUrlGenerator().generateUrlString(Constants.HOST);
             MoPubLog.d("Conversion track: " + url);
 
             DefaultHttpClient httpClient = HttpClientFactory.create();
@@ -103,11 +104,4 @@ public void run() {
                     .commit();
         }
     }
-
-    class ConversionTrackerGpsHelperListener implements GpsHelper.GpsHelperListener {
-        @Override
-        public void onFetchAdInfoCompleted() {
-            new Thread(new TrackOpen()).start();
-        }
-    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
index 86aad8f7..f1fe7068 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
@@ -10,6 +10,8 @@
 import android.view.View;
 import android.webkit.WebViewDatabase;
 import android.widget.FrameLayout;
+
+import com.mopub.common.Constants;
 import com.mopub.common.MoPub;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.ManifestUtils;
@@ -17,7 +19,8 @@
 import com.mopub.mobileads.factories.AdViewControllerFactory;
 import com.mopub.mobileads.factories.CustomEventBannerAdapterFactory;
 
-import java.util.*;
+import java.util.Collections;
+import java.util.Map;
 
 import static com.mopub.common.LocationService.LocationAwareness;
 import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_DATA;
@@ -33,9 +36,6 @@
         public void onBannerCollapsed(MoPubView banner);
     }
 
-    public static final String HOST = "ads.mopub.com";
-    public static final String HOST_FOR_TESTING = "testing.ads.mopub.com";
-    public static final String AD_HANDLER = "/m/ad";
     public static final int DEFAULT_LOCATION_PRECISION = 6;
 
     protected AdViewController mAdViewController;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidAbstractController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidAbstractController.java
deleted file mode 100644
index 7f56c51f..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidAbstractController.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package com.mopub.mobileads;
-
-
-class MraidAbstractController {
-    private final MraidView mMraidView;
-
-    MraidAbstractController(MraidView view) {
-        super();
-        mMraidView = view;
-    }
-    
-    public MraidView getMraidView() {
-        return mMraidView;
-    }
-}
\ No newline at end of file
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java
index ac5dedce..42f7e7df 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java
@@ -4,76 +4,68 @@
 import android.content.ActivityNotFoundException;
 import android.content.Context;
 import android.content.Intent;
+import android.os.Build;
+import android.os.Build.VERSION;
+import android.os.Build.VERSION_CODES;
 import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.util.Log;
 import android.view.View;
 import android.view.WindowManager;
 import android.webkit.WebView;
 import android.webkit.WebViewClient;
 
-import com.mopub.mobileads.MraidView.ExpansionStyle;
-import com.mopub.mobileads.MraidView.NativeCloseButtonStyle;
-import com.mopub.mobileads.MraidView.PlacementType;
-import com.mopub.mobileads.MraidView.ViewState;
-import com.mopub.mobileads.factories.MraidViewFactory;
-import com.mopub.mobileads.util.WebViews;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
+import com.mopub.mraid.MraidController;
+import com.mopub.mraid.MraidController.MraidListener;
+import com.mopub.mraid.MraidController.UseCustomCloseListener;
+import com.mopub.mraid.MraidWebViewDebugListener;
+import com.mopub.mraid.PlacementType;
 
 import static com.mopub.common.util.VersionCode.ICE_CREAM_SANDWICH;
 import static com.mopub.common.util.VersionCode.currentApiLevel;
 import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
 import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
-import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
+import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks
+        .WEB_VIEW_DID_APPEAR;
+import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks
+        .WEB_VIEW_DID_CLOSE;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
 
 public class MraidActivity extends BaseInterstitialActivity {
-    private MraidView mMraidView;
+    @Nullable private MraidController mMraidController;
+    @Nullable private MraidWebViewDebugListener mDebugListener;
 
-    static void preRenderHtml(final Context context, final CustomEventInterstitial.CustomEventInterstitialListener customEventInterstitialListener, final String htmlData) {
-        MraidView dummyMraidView = MraidViewFactory.create(context, null, ExpansionStyle.DISABLED, NativeCloseButtonStyle.ALWAYS_VISIBLE, PlacementType.INTERSTITIAL);
+    public static void preRenderHtml(@NonNull final Context context,
+            @NonNull final CustomEventInterstitialListener customEventInterstitialListener,
+            @NonNull final String htmlData) {
+        BaseWebView dummyWebView = new BaseWebView(context);
 
-        dummyMraidView.enablePlugins(false);
-        dummyMraidView.setMraidListener(new MraidView.MraidListener() {
+        dummyWebView.enablePlugins(false);
+        dummyWebView.setWebViewClient(new WebViewClient() {
             @Override
-            public void onReady(MraidView view) {
+            public void onPageFinished(final WebView view, final String url) {
                 customEventInterstitialListener.onInterstitialLoaded();
             }
 
-            @Override
-            public void onFailure(MraidView view) {
-                customEventInterstitialListener.onInterstitialFailed(null);
-            }
-
-            @Override
-            public void onExpand(MraidView view) {
-            }
-
-            @Override
-            public void onOpen(MraidView view) {
-            }
-
-            @Override
-            public void onClose(MraidView view, MraidView.ViewState newViewState) {
-            }
-        });
-        dummyMraidView.setWebViewClient(new WebViewClient() {
             @Override
             public boolean shouldOverrideUrlLoading(WebView view, String url) {
                 return true;
             }
 
-            @Override
-            public void onPageFinished(WebView view, String url) {
-                customEventInterstitialListener.onInterstitialLoaded();
-            }
         });
-        dummyMraidView.loadHtmlData(htmlData);
+
+        dummyWebView.loadDataWithBaseURL(null, htmlData, "text/html", "UTF-8", null);
     }
 
-    public static void start(Context context, String htmlData, AdConfiguration adConfiguration) {
+    public static void start(@NonNull Context context, @NonNull String htmlData,
+            @NonNull AdConfiguration adConfiguration) {
         Intent intent = createIntent(context, htmlData, adConfiguration);
         try {
             context.startActivity(intent);
@@ -82,7 +74,9 @@ public static void start(Context context, String htmlData, AdConfiguration adCon
         }
     }
 
-    private static Intent createIntent(Context context, String htmlData, AdConfiguration adConfiguration) {
+    @VisibleForTesting
+    protected static Intent createIntent(@NonNull Context context, @NonNull String htmlData,
+            @NonNull AdConfiguration adConfiguration) {
         Intent intent = new Intent(context, MraidActivity.class);
         intent.putExtra(HTML_RESPONSE_BODY_KEY, htmlData);
         intent.putExtra(AD_CONFIGURATION_KEY, adConfiguration);
@@ -92,72 +86,110 @@ private static Intent createIntent(Context context, String htmlData, AdConfigura
 
     @Override
     public View getAdView() {
-        mMraidView = MraidViewFactory.create(this, getAdConfiguration(), ExpansionStyle.DISABLED, NativeCloseButtonStyle.AD_CONTROLLED, PlacementType.INTERSTITIAL);
+        String htmlData = getIntent().getStringExtra(HTML_RESPONSE_BODY_KEY);
+        if (htmlData == null) {
+            MoPubLog.w("MraidActivity received a null HTML body. Finishing the activity.");
+            finish();
+            return new View(this);
+        }
+        AdConfiguration adConfiguration = getAdConfiguration();
+        if (adConfiguration == null) {
+            MoPubLog.w("MraidActivity received a null ad configuration. Finishing the activity.");
+            finish();
+            return new View(this);
+        }
+
+        mMraidController = new MraidController(
+                this, adConfiguration, PlacementType.INTERSTITIAL);
 
-        mMraidView.setMraidListener(new MraidView.BaseMraidListener(){
-            public void onReady(MraidView view) {
-                mMraidView.loadUrl(WEB_VIEW_DID_APPEAR.getUrl());
-                showInterstitialCloseButton();
+        mMraidController.setDebugListener(mDebugListener);
+        mMraidController.setMraidListener(new MraidListener() {
+            @Override
+            public void onLoaded(View view) {
+                // This is only done for the interstitial. Banners have a different mechanism
+                // for tracking third party impressions.
+                mMraidController.loadJavascript(WEB_VIEW_DID_APPEAR.getJavascript());
             }
 
             @Override
-            public void onOpen(MraidView view) {
-                broadcastAction(MraidActivity.this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_CLICK);
+            public void onFailedToLoad() {
             }
 
-            public void onClose(MraidView view, ViewState newViewState) {
-                mMraidView.loadUrl(WEB_VIEW_DID_CLOSE.getUrl());
+            public void onClose() {
+                mMraidController.loadJavascript(WEB_VIEW_DID_CLOSE.getJavascript());
                 finish();
             }
+
+            @Override
+            public void onExpand() {
+                // No-op. The interstitial is always expanded.
+            }
+
+            @Override
+            public void onOpen() {
+                broadcastAction(MraidActivity.this, getBroadcastIdentifier(),
+                        ACTION_INTERSTITIAL_CLICK);
+            }
         });
 
-        mMraidView.setOnCloseButtonStateChange(new MraidView.OnCloseButtonStateChangeListener() {
-            public void onCloseButtonStateChange(MraidView view, boolean enabled) {
-                if (enabled) {
-                    showInterstitialCloseButton();
-                } else {
+        // Needed because the Activity provides the close button, not the controller. This
+        // gets called if the creative calls mraid.useCustomClose.
+        mMraidController.setUseCustomCloseListener(new UseCustomCloseListener() {
+            public void useCustomCloseChanged(boolean useCustomClose) {
+                if (useCustomClose) {
                     hideInterstitialCloseButton();
+                } else {
+                    showInterstitialCloseButton();
                 }
             }
         });
 
-        String source = getIntent().getStringExtra(HTML_RESPONSE_BODY_KEY);
-        mMraidView.loadHtmlData(source);
-
-        return mMraidView;
+        mMraidController.loadContent(htmlData);
+        return mMraidController.getAdContainer();
     }
 
-    @TargetApi(11)
     @Override
-    public void onCreate(Bundle savedInstanceState) {
+    public void onCreate(@Nullable Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_SHOW);
 
-        if (currentApiLevel().isAtLeast(ICE_CREAM_SANDWICH)) {
+        if (VERSION.SDK_INT >= VERSION_CODES.ICE_CREAM_SANDWICH) {
             getWindow().setFlags(
                     WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED,
                     WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
         }
-
-        addCloseEventRegion();
     }
 
     @Override
     protected void onPause() {
+        if (mMraidController != null) {
+            mMraidController.pause();
+        }
         super.onPause();
-        WebViews.onPause(mMraidView);
     }
 
     @Override
     protected void onResume() {
         super.onResume();
-        WebViews.onResume(mMraidView);
+        if (mMraidController != null) {
+            mMraidController.resume();
+        }
     }
 
     @Override
     protected void onDestroy() {
-        mMraidView.destroy();
+        if (mMraidController != null) {
+            mMraidController.destroy();
+        }
         broadcastAction(this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_DISMISS);
         super.onDestroy();
     }
+
+    @VisibleForTesting
+    public void setDebugListener(@Nullable MraidWebViewDebugListener debugListener) {
+        mDebugListener = debugListener;
+        if (mMraidController != null) {
+            mMraidController.setDebugListener(debugListener);
+        }
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidBanner.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidBanner.java
deleted file mode 100644
index f79a337b..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidBanner.java
+++ /dev/null
@@ -1,96 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.net.Uri;
-
-import com.mopub.mobileads.MraidView.ViewState;
-import com.mopub.mobileads.factories.MraidViewFactory;
-
-import java.util.Map;
-
-import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.MoPubErrorCode.MRAID_LOAD_ERROR;
-import static com.mopub.mobileads.MraidView.MraidListener;
-
-class MraidBanner extends CustomEventBanner {
-    private MraidView mMraidView;
-    private CustomEventBannerListener mBannerListener;
-
-    @Override
-    protected void loadBanner(Context context,
-                    CustomEventBannerListener customEventBannerListener,
-                    Map<String, Object> localExtras,
-                    Map<String, String> serverExtras) {
-        mBannerListener = customEventBannerListener;
-
-        String htmlData;
-        if (extrasAreValid(serverExtras)) {
-            htmlData = Uri.decode(serverExtras.get(HTML_RESPONSE_BODY_KEY));
-        } else {
-            mBannerListener.onBannerFailed(MRAID_LOAD_ERROR);
-            return;
-        }
-
-        AdConfiguration adConfiguration = AdConfiguration.extractFromMap(localExtras);
-        mMraidView = MraidViewFactory.create(context, adConfiguration);
-        mMraidView.loadHtmlData(htmlData);
-        initMraidListener();
-    }
-
-    @Override
-    protected void onInvalidate() {
-        if (mMraidView != null) {
-            resetMraidListener();
-            mMraidView.destroy();
-        }
-    }
-
-    private void onReady() {
-        mBannerListener.onBannerLoaded(mMraidView);
-    }
-
-    private void onFail() {
-        mBannerListener.onBannerFailed(MRAID_LOAD_ERROR);
-    }
-
-    private void onExpand() {
-        mBannerListener.onBannerExpanded();
-        mBannerListener.onBannerClicked();
-    }
-
-    private void onOpen() {
-        mBannerListener.onBannerClicked();
-    }
-
-    private void onClose() {
-        mBannerListener.onBannerCollapsed();
-    }
-
-    private boolean extrasAreValid(Map<String, String> serverExtras) {
-        return serverExtras.containsKey(HTML_RESPONSE_BODY_KEY);
-    }
-
-    private void initMraidListener() {
-        mMraidView.setMraidListener(new MraidListener() {
-            public void onReady(MraidView view) {
-                MraidBanner.this.onReady();
-            }
-            public void onFailure(MraidView view) {
-                onFail();
-            }
-            public void onExpand(MraidView view) {
-                MraidBanner.this.onExpand();
-            }
-            public void onOpen(MraidView view) {
-                MraidBanner.this.onOpen();
-            }
-            public void onClose(MraidView view, ViewState newViewState) {
-                MraidBanner.this.onClose();
-            }
-        });
-    }
-
-    private void resetMraidListener() {
-        mMraidView.setMraidListener(null);
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidCommand.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidCommand.java
deleted file mode 100644
index c6e64d64..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidCommand.java
+++ /dev/null
@@ -1,288 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.common.logging.MoPubLog;
-
-import java.util.Map;
-
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.GET_RESIZE_PROPERTIES;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.OPEN;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.PLAY_VIDEO;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.RESIZE;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.SET_RESIZE_PROPERTIES;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.STORE_PICTURE;
-import static com.mopub.mobileads.MraidView.PlacementType;
-
-abstract class MraidCommand {
-    protected static final String URI_KEY = "uri";
-    protected Map<String, String> mParams;
-    protected MraidView mView;
-
-    MraidCommand(Map<String, String> params, MraidView view) {
-        mParams = params;
-        mView = view;
-    }
-    
-    abstract void execute();
-    
-    protected int getIntFromParamsForKey(String key) {
-        String s = mParams.get(key);
-        if (s == null) return -1;
-        else {
-            try {
-                return Integer.parseInt(s, 10);
-            } catch (NumberFormatException e) {
-                return -1;
-            }
-        }
-    }
-    
-    protected String getStringFromParamsForKey(String key) {
-        return mParams.get(key);
-    }
-    
-    protected float getFloatFromParamsForKey(String key) {
-        String s = mParams.get(key);
-        if (s == null) return 0.0f;
-        else {
-            try {
-                return Float.parseFloat(key);
-            } catch (NumberFormatException e) {
-                return 0.0f;
-            }
-        }
-    }
-    
-    protected boolean getBooleanFromParamsForKey(String key) {
-        return "true".equals(mParams.get(key));
-    }
-
-    protected boolean isCommandDependentOnUserClick(PlacementType placementType) {
-        return false;
-    }
-}
-
-class MraidCommandPlayVideo extends MraidCommand {
-    public MraidCommandPlayVideo(Map<String,String> params, MraidView view) {
-        super(params, view);
-    }
-
-    @Override
-    void execute() {
-        String url = getStringFromParamsForKey(URI_KEY);
-        if (url != null && !url.equals("")){
-            mView.getDisplayController().showVideo(url);
-        } else {
-            mView.fireErrorEvent(PLAY_VIDEO, "Video can't be played with null or empty URL");
-        }
-    }
-
-    @Override
-    protected boolean isCommandDependentOnUserClick(PlacementType placementType) {
-        switch (placementType) {
-            case INLINE:
-                return true;
-            case INTERSTITIAL:
-                return false;
-            default:
-                return super.isCommandDependentOnUserClick(placementType);
-        }
-    }
-}
-
-class MraidCommandStorePicture extends MraidCommand {
-    public static final String MIME_TYPE_HEADER = "Content-Type";
-
-    public MraidCommandStorePicture(Map<String,String> params, MraidView view) {
-        super(params, view);
-    }
-
-    @Override
-    void execute() {
-        String url = getStringFromParamsForKey(URI_KEY);
-
-        if (url != null && !url.equals("")) {
-            mView.getDisplayController().showUserDownloadImageAlert(url);
-        } else {
-            mView.fireErrorEvent(STORE_PICTURE, "Image can't be stored with null or empty URL");
-            MoPubLog.d("Invalid URI for Mraid Store Picture.");
-        }
-    }
-
-    @Override
-    protected boolean isCommandDependentOnUserClick(PlacementType placementType) {
-        return true;
-    }
-}
-
-class MraidCommandClose extends MraidCommand {
-    MraidCommandClose(Map<String, String> params, MraidView view) {
-        super(params, view);
-    }
-
-    @Override
-    void execute() {
-        mView.getDisplayController().close();
-    }
-}
-
-class MraidCommandExpand extends MraidCommand {
-    MraidCommandExpand(Map<String, String> params, MraidView view) {
-        super(params, view);
-    }
-
-    @Override
-    void execute() {
-        int width = getIntFromParamsForKey("w");
-        int height = getIntFromParamsForKey("h");
-        String url = getStringFromParamsForKey("url");
-        boolean shouldUseCustomClose = getBooleanFromParamsForKey("shouldUseCustomClose");
-        boolean shouldLockOrientation = getBooleanFromParamsForKey("lockOrientation");
-        
-        if (width <= 0) width = mView.getDisplayController().mScreenWidth;
-        if (height <= 0) height = mView.getDisplayController().mScreenHeight;
-        
-        mView.getDisplayController().expand(url, width, height, shouldUseCustomClose,
-                shouldLockOrientation);
-    }
-
-    @Override
-    protected boolean isCommandDependentOnUserClick(PlacementType placementType) {
-        switch (placementType) {
-            case INLINE:
-                return true;
-            case INTERSTITIAL:
-                return false;
-            default:
-                return super.isCommandDependentOnUserClick(placementType);
-        }
-    }
-}
-
-class MraidCommandUseCustomClose extends MraidCommand {
-    MraidCommandUseCustomClose(Map<String, String> params, MraidView view) {
-        super(params, view);
-    }
-
-    @Override
-    void execute() {
-        boolean shouldUseCustomClose = getBooleanFromParamsForKey("shouldUseCustomClose");
-        mView.getDisplayController().useCustomClose(shouldUseCustomClose);
-    }
-}
-
-class MraidCommandOpen extends MraidCommand {
-    MraidCommandOpen(Map<String, String> params, MraidView view) {
-        super(params, view);
-    }
-
-    @Override
-    void execute() {
-        String url = getStringFromParamsForKey("url");
-        if (url == null) {
-            mView.fireErrorEvent(OPEN, "Url can not be null.");
-            return;
-        }
-        mView.getBrowserController().open(url);
-    }
-
-    @Override
-    protected boolean isCommandDependentOnUserClick(PlacementType placementType) {
-        return true;
-    }
-}
-
-//As of version 1.15, we've decided to stub the resize command. However, this should be implemented in future versions
-class MraidCommandResize extends MraidCommand {
-    MraidCommandResize(Map<String, String> params, MraidView view) {
-        super(params, view);
-    }
-
-    @Override
-    void execute() {
-        mView.fireErrorEvent(RESIZE, "Unsupported action resize.");
-    }
-}
-
-class MraidCommandGetResizeProperties extends MraidCommand {
-    MraidCommandGetResizeProperties(Map<String, String> params, MraidView view) {
-        super(params, view);
-    }
-
-    @Override
-    void execute() {
-        mView.fireErrorEvent(GET_RESIZE_PROPERTIES, "Unsupported action getResizeProperties.");
-    }
-}
-
-class MraidCommandSetResizeProperties extends MraidCommand {
-    MraidCommandSetResizeProperties(Map<String, String> params, MraidView view) {
-        super(params, view);
-    }
-
-    @Override
-    void execute() {
-        mView.fireErrorEvent(SET_RESIZE_PROPERTIES, "Unsupported action setResizeProperties.");
-    }
-}
-
-class MraidCommandGetCurrentPosition extends MraidCommand {
-    MraidCommandGetCurrentPosition(Map<String, String> params, MraidView view) {
-        super(params, view);
-    }
-
-    @Override
-    void execute() {
-        mView.getDisplayController().getCurrentPosition();
-    }
-}
-
-
-class MraidCommandGetDefaultPosition extends MraidCommand {
-    MraidCommandGetDefaultPosition(Map<String, String> params, MraidView view) {
-        super(params, view);
-    }
-
-    @Override
-    void execute() {
-        mView.getDisplayController().getDefaultPosition();
-    }
-}
-
-class MraidCommandGetMaxSize extends MraidCommand {
-    MraidCommandGetMaxSize(Map<String, String> params, MraidView view) {
-        super(params, view);
-    }
-
-    @Override
-    void execute() {
-        mView.getDisplayController().getMaxSize();
-    }
-}
-
-class MraidCommandGetScreenSize extends MraidCommand {
-    MraidCommandGetScreenSize(Map<String, String> params, MraidView view) {
-        super(params, view);
-    }
-
-    @Override
-    void execute() {
-        mView.getDisplayController().getScreenSize();
-    }
-}
-
-class MraidCommandCreateCalendarEvent extends MraidCommand {
-    MraidCommandCreateCalendarEvent(Map<String, String> params, MraidView view) {
-        super(params, view);
-    }
-
-    @Override
-    void execute() {
-        mView.getDisplayController().createCalendarEvent(mParams);
-    }
-
-    @Override
-    protected boolean isCommandDependentOnUserClick(PlacementType placementType) {
-        return true;
-    }
-}
-
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidCommandFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidCommandFactory.java
deleted file mode 100644
index 4145b710..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidCommandFactory.java
+++ /dev/null
@@ -1,93 +0,0 @@
-package com.mopub.mobileads;
-
-import java.util.Map;
-
-class MraidCommandFactory {
-    protected static MraidCommandFactory instance = new MraidCommandFactory();
-
-    enum MraidJavascriptCommand {
-        CLOSE("close"),
-        EXPAND("expand"),
-        USECUSTOMCLOSE("usecustomclose"),
-        OPEN("open"),
-        RESIZE("resize"),
-        GET_RESIZE_PROPERTIES("getResizeProperties"),
-        SET_RESIZE_PROPERTIES("setResizeProperties"),
-        PLAY_VIDEO("playVideo"),
-        STORE_PICTURE("storePicture"),
-        GET_CURRENT_POSITION("getCurrentPosition"),
-        GET_DEFAULT_POSITION("getDefaultPosition"),
-        GET_MAX_SIZE("getMaxSize"),
-        GET_SCREEN_SIZE("getScreenSize"),
-        CREATE_CALENDAR_EVENT("createCalendarEvent"),
-        UNSPECIFIED("");
-
-        private String mCommand;
-
-        private MraidJavascriptCommand(String command) {
-            mCommand = command;
-        }
-
-        private static MraidJavascriptCommand fromString(String string) {
-            for (MraidJavascriptCommand command : MraidJavascriptCommand.values()) {
-                if (command.mCommand.equals(string)) {
-                    return command;
-                }
-            }
-
-            return UNSPECIFIED;
-        }
-
-        String getCommand() {
-            return mCommand;
-        }
-    }
-
-    @Deprecated // for testing
-    public static void setInstance(MraidCommandFactory factory) {
-        instance = factory;
-    }
-
-    public static MraidCommand create(String command, Map<String, String> params, MraidView view) {
-        return instance.internalCreate(command, params, view);
-    }
-
-    protected MraidCommand internalCreate(String command, Map<String, String> params, MraidView view) {
-        MraidJavascriptCommand mraidJavascriptCommand = MraidJavascriptCommand.fromString(command);
-
-        switch (mraidJavascriptCommand) {
-            case CLOSE:
-                return new MraidCommandClose(params, view);
-            case EXPAND:
-                return new MraidCommandExpand(params, view);
-            case USECUSTOMCLOSE:
-                return new MraidCommandUseCustomClose(params, view);
-            case OPEN:
-                return new MraidCommandOpen(params, view);
-            case RESIZE:
-                return new MraidCommandResize(params, view);
-            case GET_RESIZE_PROPERTIES:
-                return new MraidCommandGetResizeProperties(params, view);
-            case SET_RESIZE_PROPERTIES:
-                return new MraidCommandSetResizeProperties(params, view);
-            case PLAY_VIDEO:
-                return new MraidCommandPlayVideo(params, view);
-            case STORE_PICTURE:
-                return new MraidCommandStorePicture(params, view);
-            case GET_CURRENT_POSITION:
-                return new MraidCommandGetCurrentPosition(params, view);
-            case GET_DEFAULT_POSITION:
-                return new MraidCommandGetDefaultPosition(params, view);
-            case GET_MAX_SIZE:
-                return new MraidCommandGetMaxSize(params, view);
-            case GET_SCREEN_SIZE:
-                return new MraidCommandGetScreenSize(params, view);
-            case CREATE_CALENDAR_EVENT:
-                return new MraidCommandCreateCalendarEvent(params, view);
-            case UNSPECIFIED:
-                return null;
-            default:
-                return null;
-        }
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java
deleted file mode 100644
index 8c1ac81a..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java
+++ /dev/null
@@ -1,867 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.content.ActivityNotFoundException;
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.content.pm.ActivityInfo;
-import android.graphics.Rect;
-import android.graphics.drawable.StateListDrawable;
-import android.media.MediaScannerConnection;
-import android.net.Uri;
-import android.os.Environment;
-import android.os.Handler;
-import android.provider.CalendarContract;
-import android.util.DisplayMetrics;
-import android.util.Log;
-import android.view.Gravity;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.View.OnClickListener;
-import android.view.View.OnTouchListener;
-import android.view.ViewGroup;
-import android.view.Window;
-import android.view.WindowManager;
-import android.webkit.URLUtil;
-import android.widget.FrameLayout;
-import android.widget.ImageButton;
-import android.widget.ImageView;
-import android.widget.RelativeLayout;
-import android.widget.Toast;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.Dips;
-import com.mopub.common.util.Streams;
-import com.mopub.mobileads.MraidView.ExpansionStyle;
-import com.mopub.mobileads.MraidView.NativeCloseButtonStyle;
-import com.mopub.mobileads.MraidView.PlacementType;
-import com.mopub.mobileads.MraidView.ViewState;
-import com.mopub.mobileads.factories.HttpClientFactory;
-import com.mopub.mobileads.util.HttpResponses;
-import com.mopub.mobileads.util.Interstitials;
-import com.mopub.mobileads.util.Mraids;
-import org.apache.http.Header;
-import org.apache.http.HttpResponse;
-import org.apache.http.client.HttpClient;
-import org.apache.http.client.methods.HttpGet;
-
-import java.io.*;
-import java.net.URI;
-import java.text.ParseException;
-import java.text.SimpleDateFormat;
-import java.util.*;
-
-import static android.graphics.Color.TRANSPARENT;
-import static com.mopub.common.util.Drawables.INTERSTITIAL_CLOSE_BUTTON_NORMAL;
-import static com.mopub.common.util.Drawables.INTERSTITIAL_CLOSE_BUTTON_PRESSED;
-import static com.mopub.common.util.ResponseHeader.LOCATION;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.CREATE_CALENDAR_EVENT;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.EXPAND;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.GET_CURRENT_POSITION;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.GET_DEFAULT_POSITION;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.GET_MAX_SIZE;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.GET_SCREEN_SIZE;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.STORE_PICTURE;
-import static com.mopub.mobileads.MraidCommandStorePicture.MIME_TYPE_HEADER;
-import static com.mopub.mobileads.MraidView.BaseMraidListener;
-import static com.mopub.mobileads.util.Mraids.ANDROID_CALENDAR_CONTENT_TYPE;
-import static com.mopub.mobileads.util.Mraids.isCalendarAvailable;
-import static com.mopub.mobileads.util.Mraids.isInlineVideoAvailable;
-import static com.mopub.mobileads.util.Mraids.isSmsAvailable;
-import static com.mopub.mobileads.util.Mraids.isStorePictureSupported;
-import static com.mopub.mobileads.util.Mraids.isTelAvailable;
-
-class MraidDisplayController extends MraidAbstractController {
-    private static final String LOGTAG = "MraidDisplayController";
-    private static final long VIEWABILITY_TIMER_MILLIS = 3000;
-    private static final int CLOSE_BUTTON_SIZE_DP = 50;
-    private static final String[] DATE_FORMATS = {
-            "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
-            "yyyy-MM-dd'T'HH:mmZZZZZ"
-    };
-    private static final int MAX_NUMBER_DAYS_IN_MONTH = 31;
-
-    // The view's current state.
-    private ViewState mViewState = ViewState.HIDDEN;
-
-    // Tracks whether this controller's view responds to expand() calls.
-    private final ExpansionStyle mExpansionStyle;
-
-    // Tracks how this controller's view should display its native close button.
-    private final NativeCloseButtonStyle mNativeCloseButtonStyle;
-
-    // Separate instance of MraidView, for displaying "two-part" creatives via the expand(URL) API.
-    private MraidView mTwoPartExpansionView;
-
-    // A reference to the root view.
-    private FrameLayout mRootView;
-
-    // Handler for scheduling viewability checks.
-    private Handler mHandler = new Handler();
-
-    // Stores the requested orientation for the Activity to which this controller's view belongs.
-    // This is needed to restore the Activity's requested orientation in the event that the view
-    // itself requires an orientation lock.
-    private final int mOriginalRequestedOrientation;
-
-    private OrientationBroadcastReceiver mOrientationBroadcastReceiver = new OrientationBroadcastReceiver();
-
-    // Native close button, used for expanded content.
-    private ImageView mCloseButton;
-
-    // Tracks whether expanded content provides its own, non-native close button.
-    private boolean mAdWantsCustomCloseButton;
-
-    // The scale factor for a dip (relative to a 160 dpi screen).
-    protected float mDensity;
-
-    // The width of the screen in pixels.
-    protected int mScreenWidth = -1;
-
-    // The height of the screen in pixels.
-    protected int mScreenHeight = -1;
-
-    // The view's position within its parent.
-    private int mViewIndexInParent;
-
-    // A view that replaces the MraidView within its parent view when the MraidView is expanded
-    // (i.e. moved to the top of the view hierarchy).
-    private FrameLayout mPlaceholderView;
-    private FrameLayout mAdContainerLayout;
-    private RelativeLayout mExpansionLayout;
-    private final OnClickListener mCloseOnClickListener;
-
-    MraidDisplayController(MraidView view, MraidView.ExpansionStyle expStyle,
-            MraidView.NativeCloseButtonStyle buttonStyle) {
-        super(view);
-        mExpansionStyle = expStyle;
-        mNativeCloseButtonStyle = buttonStyle;
-
-        Context context = getContext();
-        mOriginalRequestedOrientation = (context instanceof Activity) ?
-                ((Activity) context).getRequestedOrientation() :
-                ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED;
-
-        initialize();
-
-        mCloseOnClickListener = new OnClickListener() {
-            @Override
-            public void onClick(final View view) {
-                MraidDisplayController.this.close();
-            }
-        };
-
-        mAdContainerLayout = createAdContainerLayout();
-        mExpansionLayout = createExpansionLayout();
-        mPlaceholderView = createPlaceholderView();
-    }
-
-    private void initialize() {
-        mViewState = ViewState.LOADING;
-        initializeScreenMetrics();
-        mOrientationBroadcastReceiver.register(getContext());
-    }
-
-    private void initializeScreenMetrics() {
-        Context context = getContext();
-        DisplayMetrics metrics = new DisplayMetrics();
-        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
-        wm.getDefaultDisplay().getMetrics(metrics);
-        mDensity = metrics.density;
-
-        int statusBarHeight = 0, titleBarHeight = 0;
-        if (context instanceof Activity) {
-            Activity activity = (Activity) context;
-            Window window = activity.getWindow();
-            Rect rect = new Rect();
-            window.getDecorView().getWindowVisibleDisplayFrame(rect);
-            statusBarHeight = rect.top;
-            int contentViewTop = window.findViewById(Window.ID_ANDROID_CONTENT).getTop();
-            titleBarHeight = contentViewTop - statusBarHeight;
-        }
-
-        int widthPixels = metrics.widthPixels;
-        int heightPixels = metrics.heightPixels - statusBarHeight - titleBarHeight;
-        mScreenWidth = (int) (widthPixels * (160.0 / metrics.densityDpi));
-        mScreenHeight = (int) (heightPixels * (160.0 / metrics.densityDpi));
-    }
-
-    private int getDisplayRotation() {
-        WindowManager wm = (WindowManager) getContext()
-                .getSystemService(Context.WINDOW_SERVICE);
-        return wm.getDefaultDisplay().getOrientation();
-    }
-
-    private void onOrientationChanged(int currentRotation) {
-        initializeScreenMetrics();
-        getMraidView().fireChangeEventForProperty(
-                MraidScreenSizeProperty.createWithSize(mScreenWidth, mScreenHeight));
-    }
-
-    public void destroy() {
-        try {
-            mOrientationBroadcastReceiver.unregister();
-        } catch (IllegalArgumentException e) {
-            if (!e.getMessage().contains("Receiver not registered")) {
-                throw e;
-            } // Else ignore this exception.
-        }
-    }
-
-    protected void initializeJavaScriptState() {
-        ArrayList<MraidProperty> properties = new ArrayList<MraidProperty>();
-        properties.add(MraidScreenSizeProperty.createWithSize(mScreenWidth, mScreenHeight));
-        properties.add(MraidViewableProperty.createWithViewable(getMraidView().getIsVisible()));
-        getMraidView().fireChangeEventForProperties(properties);
-
-        mViewState = ViewState.DEFAULT;
-        getMraidView().fireChangeEventForProperty(MraidStateProperty.createWithViewState(mViewState));
-        initializeSupportedFunctionsProperty();
-    }
-
-    protected boolean isExpanded() {
-        return (mViewState == ViewState.EXPANDED);
-    }
-
-    protected void close() {
-        if (mViewState == ViewState.EXPANDED) {
-            resetViewToDefaultState();
-            setOrientationLockEnabled(false);
-            mViewState = ViewState.DEFAULT;
-            getMraidView().fireChangeEventForProperty(MraidStateProperty.createWithViewState(mViewState));
-        } else if (mViewState == ViewState.DEFAULT) {
-            getMraidView().setVisibility(View.INVISIBLE);
-            mViewState = ViewState.HIDDEN;
-            getMraidView().fireChangeEventForProperty(MraidStateProperty.createWithViewState(mViewState));
-        }
-
-        if (getMraidView().getMraidListener() != null) {
-            getMraidView().getMraidListener().onClose(getMraidView(), mViewState);
-        }
-    }
-
-    private void resetViewToDefaultState() {
-        setNativeCloseButtonEnabled(false);
-        mAdContainerLayout.removeAllViewsInLayout();
-
-        mExpansionLayout.removeAllViewsInLayout();
-        mRootView.removeView(mExpansionLayout);
-
-        getMraidView().requestLayout();
-
-        ViewGroup parent = (ViewGroup) mPlaceholderView.getParent();
-        parent.addView(getMraidView(), mViewIndexInParent);
-        parent.removeView(mPlaceholderView);
-        parent.invalidate();
-    }
-
-    protected void expand(String url, int width, int height, boolean shouldUseCustomClose,
-            boolean shouldLockOrientation) {
-        if (mExpansionStyle == MraidView.ExpansionStyle.DISABLED) return;
-
-        if (url != null && !URLUtil.isValidUrl(url)) {
-            getMraidView().fireErrorEvent(EXPAND, "URL passed to expand() was invalid.");
-            return;
-        }
-
-        // Obtain the root content view, since that's where we're going to insert the expanded 
-        // content. We must do this before swapping the MraidView with its place-holder;
-        // otherwise, getRootView() will return the wrong view (or null).
-        mRootView = (FrameLayout) getMraidView().getRootView().findViewById(android.R.id.content);
-
-        useCustomClose(shouldUseCustomClose);
-        setOrientationLockEnabled(shouldLockOrientation);
-        swapViewWithPlaceholderView();
-
-        View expansionContentView = getMraidView();
-        if (url != null) {
-            mTwoPartExpansionView = new MraidView(getContext(), getMraidView().getAdConfiguration(), ExpansionStyle.DISABLED,
-                    NativeCloseButtonStyle.AD_CONTROLLED, PlacementType.INLINE);
-            mTwoPartExpansionView.setMraidListener(new BaseMraidListener() {
-                public void onClose(MraidView view, ViewState newViewState) {
-                    close();
-                }
-            });
-            mTwoPartExpansionView.loadUrl(url);
-            expansionContentView = mTwoPartExpansionView;
-        }
-
-        expandLayouts(expansionContentView, (int) (width * mDensity), (int) (height * mDensity));
-        mRootView.addView(mExpansionLayout, new RelativeLayout.LayoutParams(
-                RelativeLayout.LayoutParams.FILL_PARENT, RelativeLayout.LayoutParams.FILL_PARENT));
-
-        if (mNativeCloseButtonStyle == MraidView.NativeCloseButtonStyle.ALWAYS_VISIBLE ||
-                (!mAdWantsCustomCloseButton &&
-                mNativeCloseButtonStyle != MraidView.NativeCloseButtonStyle.ALWAYS_HIDDEN)) {
-            setNativeCloseButtonEnabled(true);
-        }
-
-        mViewState = ViewState.EXPANDED;
-        getMraidView().fireChangeEventForProperty(MraidStateProperty.createWithViewState(mViewState));
-        if (getMraidView().getMraidListener() != null) getMraidView().getMraidListener().onExpand(getMraidView());
-    }
-
-    protected void showUserDownloadImageAlert(String imageUrl) {
-        Context context = getContext();
-        if (!isStorePictureSupported(context)) {
-            getMraidView().fireErrorEvent(STORE_PICTURE, "Error downloading file - the device does not have an SD card mounted, or the Android permission is not granted.");
-            MoPubLog.d("Error downloading file - the device does not have an SD card mounted, or the Android permission is not granted.");
-            return;
-        }
-
-        if (context instanceof Activity) {
-            showUserDialog(imageUrl);
-        } else {
-            showUserToast("Downloading image to Picture gallery...");
-            downloadImage(imageUrl);
-        }
-    }
-
-    private void showUserToast(final String message) {
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                Toast.makeText(getContext(), message, Toast.LENGTH_SHORT).show();
-            }
-        });
-    }
-
-    private void downloadImage(final String uriString) {
-        final File pictureStoragePath = getPictureStoragePath();
-
-        pictureStoragePath.mkdirs();
-
-        new Thread(new Runnable() {
-            private URI uri;
-            private InputStream pictureInputStream;
-            private OutputStream pictureOutputStream;
-            private MediaScannerConnection mediaScannerConnection;
-
-            @Override
-            public void run() {
-                try {
-                    uri = URI.create(uriString);
-                    HttpClient httpClient = HttpClientFactory.create();
-                    HttpGet httpGet = new HttpGet(uri);
-
-                    HttpResponse httpResponse = httpClient.execute(httpGet);
-                    pictureInputStream = httpResponse.getEntity().getContent();
-
-                    String redirectLocation = HttpResponses.extractHeader(httpResponse, LOCATION);
-                    if (redirectLocation != null) {
-                        uri = URI.create(redirectLocation);
-                    }
-
-                    final String pictureFileName = getFileNameForUriAndHttpResponse(uri, httpResponse);
-                    File pictureFile = new File(pictureStoragePath, pictureFileName);
-                    final String pictureFileFullPath = pictureFile.toString();
-                    pictureOutputStream = new FileOutputStream(pictureFile);
-
-                    Streams.copyContent(pictureInputStream, pictureOutputStream);
-
-                    loadPictureIntoGalleryApp(pictureFileFullPath);
-                } catch (Exception exception) {
-                    mHandler.post(new Runnable() {
-                        @Override
-                        public void run() {
-                            showUserToast("Image failed to download.");
-                            getMraidView().fireErrorEvent(STORE_PICTURE, "Error downloading and saving image file.");
-                            MoPubLog.d("Error downloading and saving image file.");
-                        }
-                    });
-                } finally {
-                    Streams.closeStream(pictureInputStream);
-                    Streams.closeStream(pictureOutputStream);
-                }
-            }
-
-            private void loadPictureIntoGalleryApp(final String filename) {
-                MoPubMediaScannerConnectionClient mediaScannerConnectionClient = new MoPubMediaScannerConnectionClient(filename, null);
-                mediaScannerConnection = new MediaScannerConnection(getContext().getApplicationContext(), mediaScannerConnectionClient);
-                mediaScannerConnectionClient.setMediaScannerConnection(mediaScannerConnection);
-                mediaScannerConnection.connect();
-            }
-        }).start();
-    }
-
-    private void showUserDialog(final String imageUrl) {
-        AlertDialog.Builder alertDialogDownloadImage = new AlertDialog.Builder(getContext());
-        alertDialogDownloadImage
-                .setTitle("Save Image")
-                .setMessage("Download image to Picture gallery?")
-                .setNegativeButton("Cancel", null)
-                .setPositiveButton("Okay", new DialogInterface.OnClickListener() {
-                    @Override
-                    public void onClick(DialogInterface dialog, int which) {
-                        downloadImage(imageUrl);
-                    }
-                })
-                .setCancelable(true)
-                .show();
-    }
-
-    protected void showVideo(String videoUrl) {
-        MraidVideoPlayerActivity.startMraid(getContext(), videoUrl, getMraidView().getAdConfiguration());
-    }
-
-    protected void getCurrentPosition(){
-        getMraidView().fireErrorEvent(GET_CURRENT_POSITION, "Unsupported action getCurrentPosition");
-    }
-
-    protected void getDefaultPosition(){
-        getMraidView().fireErrorEvent(GET_DEFAULT_POSITION, "Unsupported action getDefaultPosition");
-    }
-
-    protected void getMaxSize(){
-        getMraidView().fireErrorEvent(GET_MAX_SIZE, "Unsupported action getMaxSize");
-    }
-
-    protected void getScreenSize(){
-        getMraidView().fireErrorEvent(GET_SCREEN_SIZE, "Unsupported action getScreenSize");
-    }
-
-    protected void createCalendarEvent(Map<String, String> params) {
-        Context context = getMraidView().getContext();
-        if (Mraids.isCalendarAvailable(context)) {
-            try {
-                Map<String, Object> calendarParams = translateJSParamsToAndroidCalendarEventMapping(params);
-                Intent intent = new Intent(Intent.ACTION_INSERT).setType(ANDROID_CALENDAR_CONTENT_TYPE);
-                for (String key : calendarParams.keySet()) {
-                    Object value = calendarParams.get(key);
-                    if (value instanceof Long) {
-                        intent.putExtra(key, ((Long) value).longValue());
-                    } else if (value instanceof Integer) {
-                        intent.putExtra(key, ((Integer) value).intValue());
-                    } else {
-                        intent.putExtra(key, (String) value);
-                    }
-                }
-                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-                context.startActivity(intent);
-            } catch (ActivityNotFoundException anfe) {
-                Log.d(LOGTAG, "no calendar app installed");
-                getMraidView().fireErrorEvent(CREATE_CALENDAR_EVENT, "Action is unsupported on this device - no calendar app installed");
-            } catch (IllegalArgumentException iae) {
-                Log.d(LOGTAG, "create calendar: invalid parameters " + iae.getMessage());
-                getMraidView().fireErrorEvent(CREATE_CALENDAR_EVENT, iae.getMessage());
-            } catch (Exception exception){
-                Log.d(LOGTAG, "could not create calendar event");
-                getMraidView().fireErrorEvent(CREATE_CALENDAR_EVENT, "could not create calendar event");
-            }
-        } else {
-            Log.d(LOGTAG, "unsupported action createCalendarEvent for devices pre-ICS");
-            getMraidView().fireErrorEvent(CREATE_CALENDAR_EVENT, "Action is unsupported on this device (need Android version Ice Cream Sandwich or above)");
-        }
-    }
-
-    private Map<String, Object> translateJSParamsToAndroidCalendarEventMapping(Map<String, String> params) throws Exception {
-        Map<String, Object> validatedParamsMapping = new HashMap<String, Object>();
-        if (!params.containsKey("description") || !params.containsKey("start")) {
-            throw new IllegalArgumentException("Missing start and description fields");
-        }
-
-        validatedParamsMapping.put(CalendarContract.Events.TITLE, params.get("description"));
-
-        if (params.containsKey("start") && params.get("start") != null) {
-            Date startDateTime = parseDate(params.get("start"));
-            if (startDateTime != null) {
-                validatedParamsMapping.put(CalendarContract.EXTRA_EVENT_BEGIN_TIME, startDateTime.getTime());
-            } else {
-                throw new IllegalArgumentException("Invalid calendar event: start time is malformed. Date format expecting (yyyy-MM-DDTHH:MM:SS-xx:xx) or (yyyy-MM-DDTHH:MM-xx:xx) i.e. 2013-08-14T09:00:01-08:00");
-            }
-        } else {
-            throw new IllegalArgumentException("Invalid calendar event: start is null.");
-        }
-
-        if (params.containsKey("end") && params.get("end") != null) {
-            Date endDateTime = parseDate(params.get("end"));
-            if (endDateTime != null) {
-                validatedParamsMapping.put(CalendarContract.EXTRA_EVENT_END_TIME, endDateTime.getTime());
-            } else {
-                throw new IllegalArgumentException("Invalid calendar event: end time is malformed. Date format expecting (yyyy-MM-DDTHH:MM:SS-xx:xx) or (yyyy-MM-DDTHH:MM-xx:xx) i.e. 2013-08-14T09:00:01-08:00");
-            }
-        }
-
-        if (params.containsKey("location")) {
-            validatedParamsMapping.put(CalendarContract.Events.EVENT_LOCATION, params.get("location"));
-        }
-
-        if (params.containsKey("summary")) {
-            validatedParamsMapping.put(CalendarContract.Events.DESCRIPTION, params.get("summary"));
-        }
-
-        if (params.containsKey("transparency")) {
-            validatedParamsMapping.put(
-                    CalendarContract.Events.AVAILABILITY,
-                    params.get("transparency").equals("transparent") ?
-                            CalendarContract.Events.AVAILABILITY_FREE :
-                            CalendarContract.Events.AVAILABILITY_BUSY
-            );
-        }
-
-        validatedParamsMapping.put(CalendarContract.Events.RRULE, parseRecurrenceRule(params));
-
-        return validatedParamsMapping;
-    }
-
-    private Date parseDate(String dateTime) {
-        Date result = null;
-        for (int i=0; i<DATE_FORMATS.length; i++) {
-            try {
-                result = new SimpleDateFormat(DATE_FORMATS[i]).parse(dateTime);
-                if (result != null) {
-                    break;
-                }
-            } catch (ParseException e) {
-                // an exception is okay, just try the next format and find the first one that works
-            }
-        }
-        return result;
-    }
-
-    private String parseRecurrenceRule(Map<String, String> params) throws IllegalArgumentException {
-        StringBuilder rule = new StringBuilder();
-        if (params.containsKey("frequency")) {
-            String frequency = params.get("frequency");
-            int interval = -1;
-            if (params.containsKey("interval")) {
-                interval = Integer.parseInt(params.get("interval"));
-            }
-            if ("daily".equals(frequency)) {
-                rule.append("FREQ=DAILY;");
-                if (interval != -1) {
-                    rule.append("INTERVAL=" + interval + ";");
-                }
-            } else if("weekly".equals(frequency)) {
-                rule.append("FREQ=WEEKLY;");
-                if (interval != -1) {
-                    rule.append("INTERVAL=" + interval + ";");
-                }
-                if (params.containsKey("daysInWeek")) {
-                    String weekdays = translateWeekIntegersToDays(params.get("daysInWeek"));
-                    if (weekdays == null) {
-                       throw new IllegalArgumentException("invalid ");
-                    }
-                    rule.append("BYDAY=" + weekdays + ";");
-                }
-            } else if("monthly".equals(frequency)) {
-                rule.append("FREQ=MONTHLY;");
-                if (interval != -1) {
-                    rule.append("INTERVAL=" + interval + ";");
-                }
-                if (params.containsKey("daysInMonth")) {
-                    String monthDays = translateMonthIntegersToDays(params.get("daysInMonth"));
-                    if (monthDays == null) {
-                        throw new IllegalArgumentException();
-                    }
-                    rule.append("BYMONTHDAY=" + monthDays + ";");
-                }
-            } else {
-                throw new IllegalArgumentException("frequency is only supported for daily, weekly, and monthly.");
-            }
-        }
-        return rule.toString();
-    }
-
-    private String translateWeekIntegersToDays(String expression) throws IllegalArgumentException{
-        StringBuilder daysResult = new StringBuilder();
-        boolean[] daysAlreadyCounted = new boolean[7];
-        String[] days = expression.split(",");
-        int dayNumber;
-        for (int i=0; i<days.length; i++) {
-            dayNumber = Integer.parseInt(days[i]);
-            dayNumber = dayNumber == 7 ? 0 : dayNumber;
-            if (!daysAlreadyCounted[dayNumber]) {
-                daysResult.append(dayNumberToDayOfWeekString(dayNumber) + ",");
-                daysAlreadyCounted[dayNumber] = true;
-            }
-        }
-        if (days.length == 0) {
-            throw new IllegalArgumentException("must have at least 1 day of the week if specifying repeating weekly");
-        }
-        daysResult.deleteCharAt(daysResult.length()-1);
-        return daysResult.toString();
-    }
-
-    private String translateMonthIntegersToDays(String expression) throws IllegalArgumentException {
-        StringBuilder daysResult = new StringBuilder();
-        boolean[] daysAlreadyCounted = new boolean[2*MAX_NUMBER_DAYS_IN_MONTH +1]; //for -31 to 31
-        String[] days = expression.split(",");
-        int dayNumber;
-        for (int i=0; i<days.length; i++) {
-            dayNumber = Integer.parseInt(days[i]);
-            if (!daysAlreadyCounted[dayNumber+MAX_NUMBER_DAYS_IN_MONTH]) {
-                daysResult.append(dayNumberToDayOfMonthString(dayNumber) + ",");
-                daysAlreadyCounted[dayNumber+MAX_NUMBER_DAYS_IN_MONTH] = true;
-            }
-        }
-        if (days.length == 0) {
-            throw new IllegalArgumentException("must have at least 1 day of the month if specifying repeating weekly");
-        }
-        daysResult.deleteCharAt(daysResult.length() - 1);
-        return daysResult.toString();
-    }
-
-    private String dayNumberToDayOfWeekString(int number) throws IllegalArgumentException {
-        String dayOfWeek;
-        switch(number) {
-            case 0: dayOfWeek="SU"; break;
-            case 1: dayOfWeek="MO"; break;
-            case 2: dayOfWeek="TU"; break;
-            case 3: dayOfWeek="WE"; break;
-            case 4: dayOfWeek="TH"; break;
-            case 5: dayOfWeek="FR"; break;
-            case 6: dayOfWeek="SA"; break;
-            default: throw new IllegalArgumentException("invalid day of week " + number);
-        }
-        return dayOfWeek;
-    }
-
-    private String dayNumberToDayOfMonthString(int number) throws IllegalArgumentException {
-        String dayOfMonth;
-        // https://android.googlesource.com/platform/frameworks/opt/calendar/+/504844526f1b7afec048c6d2976ffb332670d5ba/src/com/android/calendarcommon2/EventRecurrence.java
-        if (number != 0 && number >= -MAX_NUMBER_DAYS_IN_MONTH && number <= MAX_NUMBER_DAYS_IN_MONTH) {
-            dayOfMonth = "" + number;
-        } else {
-            throw new IllegalArgumentException("invalid day of month " + number);
-        }
-        return dayOfMonth;
-    }
-
-    private void swapViewWithPlaceholderView() {
-        ViewGroup parent = (ViewGroup) getMraidView().getParent();
-        if (parent == null) return;
-
-        int index;
-        int count = parent.getChildCount();
-        for (index = 0; index < count; index++) {
-            if (parent.getChildAt(index) == getMraidView()) break;
-        }
-
-        mViewIndexInParent = index;
-        parent.addView(mPlaceholderView, index,
-                new ViewGroup.LayoutParams(getMraidView().getWidth(), getMraidView().getHeight()));
-        parent.removeView(getMraidView());
-    }
-
-    private void expandLayouts(View expansionContentView, int expandWidth, int expandHeight) {
-        int closeButtonSize = (int) (CLOSE_BUTTON_SIZE_DP * mDensity + 0.5f);
-        if (expandWidth < closeButtonSize) expandWidth = closeButtonSize;
-        if (expandHeight < closeButtonSize) expandHeight = closeButtonSize;
-
-        View dimmingView = new View(getContext());
-        dimmingView.setBackgroundColor(TRANSPARENT);
-        dimmingView.setOnTouchListener(new OnTouchListener() {
-            public boolean onTouch(View v, MotionEvent event) {
-                return true;
-            }
-        });
-
-        mExpansionLayout.addView(dimmingView, new RelativeLayout.LayoutParams(
-                RelativeLayout.LayoutParams.FILL_PARENT, RelativeLayout.LayoutParams.FILL_PARENT));
-
-        mAdContainerLayout.addView(expansionContentView, new RelativeLayout.LayoutParams(
-                RelativeLayout.LayoutParams.FILL_PARENT, RelativeLayout.LayoutParams.FILL_PARENT));
-
-        addCloseEventRegion(mAdContainerLayout);
-
-        RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(expandWidth, expandHeight);
-        lp.addRule(RelativeLayout.CENTER_IN_PARENT);
-        mExpansionLayout.addView(mAdContainerLayout, lp);
-    }
-
-    private void setOrientationLockEnabled(boolean enabled) {
-        Context context = getContext();
-        Activity activity = null;
-        try {
-            activity = (Activity) context;
-            int requestedOrientation = enabled ?
-                    activity.getResources().getConfiguration().orientation :
-                    mOriginalRequestedOrientation;
-            activity.setRequestedOrientation(requestedOrientation);
-        } catch (ClassCastException e) {
-            Log.d(LOGTAG, "Unable to modify device orientation.");
-        }
-    }
-
-    protected void setNativeCloseButtonEnabled(boolean enabled) {
-        if (mRootView == null) {
-            return;
-        }
-
-        if (enabled) {
-            if (mCloseButton == null) {
-                StateListDrawable states = new StateListDrawable();
-                states.addState(new int[] {-android.R.attr.state_pressed}, INTERSTITIAL_CLOSE_BUTTON_NORMAL.decodeImage(mRootView.getContext()));
-                states.addState(new int[] {android.R.attr.state_pressed}, INTERSTITIAL_CLOSE_BUTTON_PRESSED.decodeImage(mRootView.getContext()));
-                mCloseButton = new ImageButton(getContext());
-                mCloseButton.setImageDrawable(states);
-                mCloseButton.setBackgroundDrawable(null);
-                mCloseButton.setOnClickListener(new OnClickListener() {
-                    public void onClick(View v) {
-                        MraidDisplayController.this.close();
-                    }
-                });
-            }
-
-            final int closeButtonSize = Dips.dipsToIntPixels(CLOSE_BUTTON_SIZE_DP, getContext());
-            FrameLayout.LayoutParams buttonLayout = new FrameLayout.LayoutParams(
-                    closeButtonSize, closeButtonSize, Gravity.RIGHT);
-            mAdContainerLayout.addView(mCloseButton, buttonLayout);
-        } else {
-            mAdContainerLayout.removeView(mCloseButton);
-        }
-
-        MraidView view = getMraidView();
-        if (view.getOnCloseButtonStateChangeListener() != null) {
-            view.getOnCloseButtonStateChangeListener().onCloseButtonStateChange(view, enabled);
-        }
-    }
-
-    protected void useCustomClose(boolean shouldUseCustomCloseButton) {
-        mAdWantsCustomCloseButton = shouldUseCustomCloseButton;
-
-        MraidView view = getMraidView();
-        boolean enabled = !shouldUseCustomCloseButton;
-        if (view.getOnCloseButtonStateChangeListener() != null) {
-            view.getOnCloseButtonStateChangeListener().onCloseButtonStateChange(view, enabled);
-        }
-    }
-
-    FrameLayout createAdContainerLayout() {
-        return new FrameLayout(getContext());
-    }
-
-    void addCloseEventRegion(final FrameLayout frameLayout) {
-        final int buttonSizePixels = Dips.dipsToIntPixels(CLOSE_BUTTON_SIZE_DP, getContext());
-        final FrameLayout.LayoutParams layoutParams =
-                new FrameLayout.LayoutParams(buttonSizePixels, buttonSizePixels, Gravity.TOP | Gravity.RIGHT);
-        Interstitials.addCloseEventRegion(frameLayout, layoutParams, mCloseOnClickListener);
-    }
-
-    RelativeLayout createExpansionLayout() {
-        return new RelativeLayout(getContext());
-    }
-
-    FrameLayout createPlaceholderView() {
-        return new FrameLayout(getContext());
-    }
-
-    private Context getContext() {
-        return getMraidView().getContext();
-    }
-
-    protected void initializeSupportedFunctionsProperty() {
-        Context context = getContext();
-        getMraidView().fireChangeEventForProperty(
-                new MraidSupportsProperty()
-                        .withTel(isTelAvailable(context))
-                        .withSms(isSmsAvailable(context))
-                        .withCalendar(isCalendarAvailable(context))
-                        .withInlineVideo(isInlineVideoAvailable(context))
-                        .withStorePicture(isStorePictureSupported(context)));
-    }
-
-    private File getPictureStoragePath() {
-        return new File(Environment.getExternalStorageDirectory(), "Pictures");
-    }
-
-    private String getFileNameForUriAndHttpResponse(final URI uri, final HttpResponse response) {
-        final String path = uri.getPath();
-
-        if (path == null) {
-            return null;
-        }
-
-        String filename = new File(path).getName();
-
-        Header header = response.getFirstHeader(MIME_TYPE_HEADER);
-        if (header != null) {
-            String[] fields = header.getValue().split(";");
-            for (final String field : fields) {
-                String extension;
-                if (field.contains("image/")) {
-                    extension = "." + field.split("/")[1];
-                    if (!filename.endsWith(extension)) {
-                        filename += extension;
-                    }
-                    break;
-                }
-            }
-        }
-
-        return filename;
-    }
-
-    private class MoPubMediaScannerConnectionClient implements MediaScannerConnection.MediaScannerConnectionClient {
-        private final String mFilename;
-        private final String mMimeType;
-        private MediaScannerConnection mMediaScannerConnection;
-
-        private MoPubMediaScannerConnectionClient(String filename, String mimeType) {
-            mFilename = filename;
-            mMimeType = mimeType;
-        }
-
-        private void setMediaScannerConnection(MediaScannerConnection connection) {
-            mMediaScannerConnection = connection;
-        }
-
-        @Override
-        public void onMediaScannerConnected() {
-            if (mMediaScannerConnection != null) {
-                mMediaScannerConnection.scanFile(mFilename, mMimeType);
-            }
-        }
-
-        @Override
-        public void onScanCompleted(String path, Uri uri) {
-            if (mMediaScannerConnection != null) {
-                mMediaScannerConnection.disconnect();
-            }
-        }
-    }
-
-    class OrientationBroadcastReceiver extends BroadcastReceiver {
-        private int mLastRotation;
-        private Context mContext;
-
-        public void onReceive(Context context, Intent intent) {
-            if(!isRegistered()) {
-                return;
-            }
-            String action = intent.getAction();
-            if (action.equals(Intent.ACTION_CONFIGURATION_CHANGED)) {
-                int orientation = MraidDisplayController.this.getDisplayRotation();
-                if (orientation != mLastRotation) {
-                    mLastRotation = orientation;
-                    MraidDisplayController.this.onOrientationChanged(mLastRotation);
-                }
-            }
-        }
-
-        private boolean isRegistered() {
-            return mContext != null;
-        }
-
-        public void register(Context context) {
-            mContext = context;
-            context.registerReceiver(this,
-                    new IntentFilter(Intent.ACTION_CONFIGURATION_CHANGED));
-        }
-
-        public void unregister() {
-            mContext.unregisterReceiver(this);
-            mContext = null;
-        }
-    }
-
-    // testing
-    @Deprecated
-    public OnClickListener getCloseOnClickListener() {
-        return mCloseOnClickListener;
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidProperty.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidProperty.java
deleted file mode 100644
index bfcfdf56..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidProperty.java
+++ /dev/null
@@ -1,132 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.mobileads.MraidView.PlacementType;
-import com.mopub.mobileads.MraidView.ViewState;
-
-abstract class MraidProperty {
-    private String sanitize(String str) {
-        return (str != null) ? str.replaceAll("[^a-zA-Z0-9_,:\\s\\{\\}\\\'\\\"]", "") : "";
-    }
-
-    @Override
-    public String toString() {
-        return sanitize(toJsonPair());
-    }
-
-    public abstract String toJsonPair();
-}
-
-class MraidPlacementTypeProperty extends MraidProperty {
-    private final PlacementType mPlacementType;
-
-    MraidPlacementTypeProperty(PlacementType placementType) {
-        mPlacementType = placementType;
-    }
-
-    public static MraidPlacementTypeProperty createWithType(
-            PlacementType placementType) {
-        return new MraidPlacementTypeProperty(placementType);
-    }
-
-    @Override
-    public String toJsonPair() {
-        return "placementType: '" + mPlacementType.toString().toLowerCase() + "'";
-    }
-}
-
-class MraidScreenSizeProperty extends MraidProperty {
-    private final int mScreenWidth;
-    private final int mScreenHeight;
-
-    MraidScreenSizeProperty(int width, int height) {
-        mScreenWidth = width;
-        mScreenHeight = height;
-    }
-
-    public static MraidScreenSizeProperty createWithSize(int width, int height) {
-        return new MraidScreenSizeProperty(width, height);
-    }
-
-    @Override
-    public String toJsonPair() {
-        return "screenSize: { width: " + mScreenWidth + ", height: " + mScreenHeight + " }";
-    }
-}
-
-class MraidStateProperty extends MraidProperty {
-    private final ViewState mViewState;
-
-    MraidStateProperty(ViewState viewState) {
-        mViewState = viewState;
-    }
-
-    public static MraidStateProperty createWithViewState(ViewState viewState) {
-        return new MraidStateProperty(viewState);
-    }
-
-    @Override
-    public String toJsonPair() {
-        return "state: '" + mViewState.toString().toLowerCase() + "'";
-    }
-}
-
-class MraidViewableProperty extends MraidProperty {
-    private final boolean mViewable;
-
-    MraidViewableProperty(boolean viewable) {
-        mViewable = viewable;
-    }
-
-    public static MraidViewableProperty createWithViewable(boolean viewable) {
-        return new MraidViewableProperty(viewable);
-    }
-
-    @Override
-    public String toJsonPair() {
-        return "viewable: " + (mViewable ? "true" : "false");
-    }
-}
-
-class MraidSupportsProperty extends MraidProperty{
-    private boolean sms;
-    private boolean tel;
-    private boolean calendar;
-    private boolean storePicture;
-    private boolean inlineVideo;
-
-    @Override
-    public String toJsonPair() {
-        return "supports: {" +
-                "sms: " + String.valueOf(sms) + ", " +
-                "tel: " + String.valueOf(tel) + ", " +
-                "calendar: " + String.valueOf(calendar) + ", " +
-                "storePicture: " + String.valueOf(storePicture) + ", " +
-                "inlineVideo: " + String.valueOf(inlineVideo) + "}";
-    }
-
-    public MraidSupportsProperty withSms(boolean value) {
-        sms = value;
-        return this;
-    }
-
-
-    public MraidSupportsProperty withTel(boolean value) {
-        tel = value;
-        return this;
-    }
-
-    public MraidSupportsProperty withCalendar(boolean value) {
-        calendar = value;
-        return this;
-    }
-
-    public MraidSupportsProperty withStorePicture(boolean value) {
-        storePicture = value;
-        return this;
-    }
-
-    public MraidSupportsProperty withInlineVideo(boolean value) {
-        inlineVideo = value;
-        return this;
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
index 7c9a2202..d3f7fb04 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
@@ -4,18 +4,20 @@
 import android.content.ActivityNotFoundException;
 import android.content.Intent;
 import android.os.Bundle;
+import android.support.annotation.Nullable;
 import android.view.View;
 import android.view.Window;
 import android.view.WindowManager;
 
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.IntentUtils;
+import com.mopub.mraid.MraidVideoViewController;
 
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
 
 public class MraidVideoPlayerActivity extends BaseVideoPlayerActivity implements BaseVideoViewController.BaseVideoViewControllerListener {
-    private BaseVideoViewController mBaseVideoController;
+    @Nullable private BaseVideoViewController mBaseVideoController;
     private long mBroadcastIdentifier;
 
     @Override
@@ -35,6 +37,9 @@ protected void onCreate(Bundle savedInstanceState) {
         try {
             mBaseVideoController = createVideoViewController();
         } catch (IllegalStateException e) {
+            // This can happen if the activity was started without valid intent extras. We leave
+            // mBaseVideoController set to null, and finish the activity immediately.
+            
             broadcastAction(this, mBroadcastIdentifier, ACTION_INTERSTITIAL_FAIL);
             finish();
             return;
@@ -45,32 +50,40 @@ protected void onCreate(Bundle savedInstanceState) {
 
     @Override
     protected void onPause() {
-        mBaseVideoController.onPause();
+        if (mBaseVideoController != null) {
+            mBaseVideoController.onPause();
+        }
         super.onPause();
     }
 
     @Override
     protected void onResume() {
         super.onResume();
-        mBaseVideoController.onResume();
+        if (mBaseVideoController != null) {
+            mBaseVideoController.onResume();
+        }
     }
 
     @Override
     protected void onDestroy() {
-        mBaseVideoController.onDestroy();
+        if (mBaseVideoController != null) {
+            mBaseVideoController.onDestroy();
+        }
         super.onDestroy();
     }
 
     @Override
     public void onBackPressed() {
-        if (mBaseVideoController.backButtonEnabled()) {
+        if (mBaseVideoController != null && mBaseVideoController.backButtonEnabled()) {
             super.onBackPressed();
         }
     }
 
     @Override
     protected void onActivityResult(final int requestCode, final int resultCode, final Intent data) {
-        mBaseVideoController.onActivityResult(requestCode, resultCode, data);
+        if (mBaseVideoController != null) {
+            mBaseVideoController.onActivityResult(requestCode, resultCode, data);
+        }
     }
 
     private AdConfiguration getAdConfiguration() {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidView.java
deleted file mode 100644
index 4a5fa6b9..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidView.java
+++ /dev/null
@@ -1,411 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.ActivityNotFoundException;
-import android.content.Context;
-import android.content.Intent;
-import android.graphics.Color;
-import android.net.Uri;
-import android.util.Log;
-import android.view.MotionEvent;
-import android.view.View;
-import android.webkit.WebView;
-import android.webkit.WebViewClient;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.Strings;
-import com.mopub.mobileads.factories.HttpClientFactory;
-import com.mopub.mobileads.resource.MraidJavascript;
-import org.apache.http.HttpEntity;
-import org.apache.http.HttpResponse;
-import org.apache.http.NameValuePair;
-import org.apache.http.client.ClientProtocolException;
-import org.apache.http.client.HttpClient;
-import org.apache.http.client.methods.HttpGet;
-import org.apache.http.client.utils.URLEncodedUtils;
-
-import java.io.*;
-import java.net.URI;
-import java.util.*;
-
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand;
-import static com.mopub.mobileads.ViewGestureDetector.UserClickListener;
-
-public class MraidView extends BaseWebView implements UserClickListener {
-    private static final String LOGTAG = "MraidView";
-    
-    private MoPubBrowserController mBrowserController;
-    private MraidDisplayController mDisplayController;
-    
-    private WebViewClient mWebViewClient;
-
-    private boolean mHasFiredReadyEvent;
-    private boolean mClicked;
-    private final PlacementType mPlacementType;
-    private ViewGestureDetector mViewGestureDetector;
-    private AdConfiguration mAdConfiguration;
-    private boolean mIsVisible;
-
-    static class MraidListenerInfo {
-        private MraidListener mMraidListener;
-        private OnCloseButtonStateChangeListener mOnCloseButtonListener;
-    }
-    private MraidListenerInfo mListenerInfo;
-
-    public enum ViewState {
-        LOADING,
-        DEFAULT,
-        EXPANDED,
-        HIDDEN
-    }
-
-    public enum ExpansionStyle {
-        ENABLED,
-        DISABLED
-    }
-
-    public enum NativeCloseButtonStyle {
-        ALWAYS_VISIBLE,
-        ALWAYS_HIDDEN,
-        AD_CONTROLLED
-    }
-
-    public enum PlacementType {
-        INLINE,
-        INTERSTITIAL
-    }
-
-    public MraidView(Context context, AdConfiguration adConfiguration) {
-        this(context, adConfiguration, ExpansionStyle.ENABLED, NativeCloseButtonStyle.AD_CONTROLLED,
-                PlacementType.INLINE);
-    }
-
-    public MraidView(Context context, AdConfiguration adConfiguration, ExpansionStyle expStyle, NativeCloseButtonStyle buttonStyle,
-                     PlacementType placementType) {
-        super(context);
-        mPlacementType = placementType;
-
-        mAdConfiguration = adConfiguration;
-        mViewGestureDetector = new ViewGestureDetector(context, this, adConfiguration);
-        mViewGestureDetector.setUserClickListener(this);
-
-        mIsVisible = (getVisibility() == View.VISIBLE);
-
-        initialize(expStyle, buttonStyle);
-    }
-
-    @Override
-    public void onUserClick() {
-        mClicked = true;
-    }
-
-    @Override
-    public void onResetUserClick() {
-        mClicked = false;
-    }
-
-    @Override
-    public boolean wasClicked() {
-        return mClicked;
-    }
-
-    private void initialize(ExpansionStyle expStyle, NativeCloseButtonStyle buttonStyle) {
-        setScrollContainer(false);
-        setBackgroundColor(Color.TRANSPARENT);
-        
-        setVerticalScrollBarEnabled(false);
-        setHorizontalScrollBarEnabled(false);
-        
-        setOnTouchListener(new View.OnTouchListener() {
-            public boolean onTouch(View v, MotionEvent event) {
-                mViewGestureDetector.sendTouchEvent(event);
-
-                switch (event.getAction()) {
-                    case MotionEvent.ACTION_DOWN:
-                    case MotionEvent.ACTION_UP:
-                        if (!v.hasFocus()) {
-                            v.requestFocus();
-                        }
-                        break;
-                }
-                return false;
-            }
-        });
-        
-        getSettings().setJavaScriptEnabled(true);
-        
-        mBrowserController = new MoPubBrowserController(this);
-        mDisplayController = new MraidDisplayController(this, expStyle, buttonStyle);
-        
-        mWebViewClient = new MraidWebViewClient();
-        setWebViewClient(mWebViewClient);
-
-        mListenerInfo = new MraidListenerInfo();
-    }
-
-    AdConfiguration getAdConfiguration() {
-        return mAdConfiguration;
-    }
-
-    @Override
-    public void destroy() {
-        mDisplayController.destroy();
-        super.destroy();
-    }
-
-    public void loadHtmlData(String data) {
-        if (data == null) {
-            return;
-        }
-
-        // If the string data lacks the HTML boilerplate, add it.
-        if (!data.contains("<html>")) {
-            data = "<html><head></head><body style='margin:0;padding:0;'>" + data +
-                    "</body></html>";
-        }
-        
-        // Inject the MRAID JavaScript bridge.
-        data = data.replace("<head>", "<head><script>" + MraidJavascript.JAVASCRIPT_SOURCE + "</script>");
-
-        loadDataWithBaseURL(null, data, "text/html", "UTF-8", null);
-    }
-
-    @Override
-    public void loadUrl(String url) {
-        if (url == null) {
-            return;
-        }
-
-        if (url.startsWith("javascript:")) {
-            super.loadUrl(url);
-            return;
-        }
-
-        HttpClient httpClient = HttpClientFactory.create();
-        String outString = "";
-        
-        try {
-            HttpGet httpGet = new HttpGet(url);
-            HttpResponse response = httpClient.execute(httpGet);
-            HttpEntity entity = response.getEntity();
-    
-            if (entity != null) {
-                outString = Strings.fromStream(entity.getContent());
-            }
-        } catch (IllegalArgumentException e) {
-            MoPubLog.d("Mraid loadUrl failed (IllegalArgumentException): " + url);
-            notifyOnFailureListener();
-            return;
-        } catch (ClientProtocolException e) {
-            notifyOnFailureListener();
-            return;
-        } catch (IOException e) {
-            notifyOnFailureListener();
-            return;
-        }
-
-        loadHtmlData(outString);
-    }
-    
-    private void notifyOnFailureListener() {
-        if (mListenerInfo.mMraidListener != null) {
-            mListenerInfo.mMraidListener.onFailure(this);
-        }
-    }
-
-    // Controllers /////////////////////////////////////////////////////////////////////////////////
-    
-    protected MoPubBrowserController getBrowserController() {
-        return mBrowserController;
-    }
-    
-    protected MraidDisplayController getDisplayController() {
-        return mDisplayController;
-    }
-    
-    // Listeners ///////////////////////////////////////////////////////////////////////////////////
-
-    public void setMraidListener(MraidListener mraidListener) {
-        mListenerInfo.mMraidListener = mraidListener;
-    }
-
-    public MraidListener getMraidListener() {
-        return mListenerInfo.mMraidListener;
-    }
-
-    public void setOnCloseButtonStateChange(OnCloseButtonStateChangeListener listener) {
-        mListenerInfo.mOnCloseButtonListener = listener;
-    }
-    
-    public OnCloseButtonStateChangeListener getOnCloseButtonStateChangeListener() {
-        return mListenerInfo.mOnCloseButtonListener;
-    }
-    
-    // JavaScript injection ////////////////////////////////////////////////////////////////////////
-    
-    protected void injectJavaScript(String js) {
-        if (js != null) super.loadUrl("javascript:" + js);
-    }
-    
-    protected void fireChangeEventForProperty(MraidProperty property) {
-        String json = "{" + property.toString() + "}";
-        injectJavaScript("window.mraidbridge.fireChangeEvent(" + json + ");");
-        Log.d(LOGTAG, "Fire change: " + json);
-    }
-    
-    protected void fireChangeEventForProperties(ArrayList<MraidProperty> properties) {
-        String props = properties.toString();
-        if (props.length() < 2) return;
-        
-        String json = "{" + props.substring(1, props.length() - 1) + "}";
-        injectJavaScript("window.mraidbridge.fireChangeEvent(" + json + ");");
-        Log.d(LOGTAG, "Fire changes: " + json);
-    }
-    
-    protected void fireErrorEvent(MraidJavascriptCommand mraidJavascriptCommand, String message) {
-        String action = mraidJavascriptCommand.getCommand();
-
-        injectJavaScript("window.mraidbridge.fireErrorEvent('" + action + "', '" + message + "');");
-    }
-    
-    protected void fireReadyEvent() {
-        injectJavaScript("window.mraidbridge.fireReadyEvent();");
-    }
-    
-    protected void fireNativeCommandCompleteEvent(String command) {
-        injectJavaScript("window.mraidbridge.nativeCallComplete('" + command + "');");
-    }
-    
-    private boolean tryCommand(URI uri) {
-        String commandType = uri.getHost();
-        List<NameValuePair> list = URLEncodedUtils.parse(uri, "UTF-8");
-        Map<String, String> params = new HashMap<String, String>();
-        for (NameValuePair pair : list) {
-            params.put(pair.getName(), pair.getValue());
-        }
-
-        MraidCommand command = MraidCommandFactory.create(commandType, params, this);
-
-        if (command == null) {
-            fireNativeCommandCompleteEvent(commandType);
-            return false;
-        } else if (command.isCommandDependentOnUserClick(mPlacementType) && !wasClicked()) {
-            return false;
-        } else {
-            command.execute();
-            fireNativeCommandCompleteEvent(commandType);
-            return true;
-        }
-    }
-
-    private class MraidWebViewClient extends WebViewClient {
-        @Override
-        public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {
-            Log.d(LOGTAG, "Error: " + description);
-            super.onReceivedError(view, errorCode, description, failingUrl);
-        }
-        
-        @Override
-        public boolean shouldOverrideUrlLoading(WebView view, String url) {
-            Uri uri = Uri.parse(url);
-
-            // Note that scheme will be null when we are passed a relative Uri
-            String scheme = uri.getScheme();
-
-            if ("mopub".equals(scheme)) {
-                return true;
-            }
-
-            if ("mraid".equals(scheme)) {
-                tryCommand(URI.create(url)); // java.net.URI, not android.net.Uri
-                return true;
-            }
-
-            if (wasClicked()) {
-                Intent i = new Intent();
-                i.setAction(Intent.ACTION_VIEW);
-                i.setData(Uri.parse(url));
-                i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-
-                try {
-                    getContext().startActivity(i);
-                    return true;
-                } catch (ActivityNotFoundException e) {
-                    return false;
-                }
-            }
-
-            return false;
-        }
-        
-        @Override
-        public void onPageFinished(WebView view, String url) {
-            if (!mHasFiredReadyEvent) {
-                mDisplayController.initializeJavaScriptState();
-                fireChangeEventForProperty(MraidPlacementTypeProperty.createWithType(mPlacementType));
-                fireReadyEvent();
-                if (getMraidListener() != null) {
-                    getMraidListener().onReady(MraidView.this);
-                }
-                mIsVisible = (getVisibility() == View.VISIBLE);
-                fireChangeEventForProperty(MraidViewableProperty.createWithViewable(mIsVisible));
-                mHasFiredReadyEvent = true;
-            }
-        }
-        
-        @Override
-        public void onLoadResource(WebView view, String url) {
-            Log.d(LOGTAG, "Loaded resource: " + url);
-        }
-    }
-
-    public interface MraidListener {
-        public void onReady(MraidView view);
-        public void onFailure(MraidView view);
-        public void onExpand(MraidView view);
-        public void onOpen(MraidView view);
-        public void onClose(MraidView view, ViewState newViewState);
-    }
-
-    public static class BaseMraidListener implements MraidListener {
-        @Override public void onReady(MraidView view) { }
-        @Override public void onFailure(MraidView view) { }
-        @Override public void onExpand(MraidView view) { }
-        @Override public void onOpen(MraidView view) { }
-        @Override public void onClose(MraidView view, ViewState newViewState) { }
-    }
-
-    public interface OnCloseButtonStateChangeListener {
-        public void onCloseButtonStateChange(MraidView view, boolean enabled);
-    }
-
-    public boolean getIsVisible() {
-        return mIsVisible;
-    }
-
-    @Override
-    protected void onVisibilityChanged (View changedView, int visibility) {
-        super.onVisibilityChanged(changedView, visibility);
-
-        boolean newIsVisible = (visibility == View.VISIBLE);
-        if (newIsVisible != mIsVisible) {
-            mIsVisible = newIsVisible;
-            if (mHasFiredReadyEvent) {
-                fireChangeEventForProperty(MraidViewableProperty.createWithViewable(mIsVisible));
-            }
-        }
-    }
-
-    @Deprecated // for testing
-    void setHasFiredReadyEvent(boolean hasFired) {
-        mHasFiredReadyEvent = hasFired;
-    }
-
-    @Deprecated // for testing
-    WebViewClient getMraidWebViewClient() {
-        return mWebViewClient;
-    }
-
-    @Deprecated // for testing
-    void setMraidDisplayController(MraidDisplayController mraidDisplayController) {
-        mDisplayController = mraidDisplayController;
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
index 2d73912e..cf0f57b5 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
@@ -7,7 +7,7 @@
 import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 
-abstract class ResponseBodyInterstitial extends CustomEventInterstitial {
+public abstract class ResponseBodyInterstitial extends CustomEventInterstitial {
     private EventForwardingBroadcastReceiver mBroadcastReceiver;
     protected Context mContext;
     protected AdConfiguration mAdConfiguration;
@@ -15,10 +15,10 @@
 
     abstract protected void extractExtras(Map<String, String> serverExtras);
     abstract protected void preRenderHtml(CustomEventInterstitialListener customEventInterstitialListener);
-    abstract protected void showInterstitial();
+    public abstract void showInterstitial();
 
     @Override
-    protected void loadInterstitial(
+    public void loadInterstitial(
             Context context,
             CustomEventInterstitialListener customEventInterstitialListener,
             Map<String, Object> localExtras,
@@ -45,7 +45,7 @@ protected void loadInterstitial(
     }
 
     @Override
-    protected void onInvalidate() {
+    public void onInvalidate() {
         if (mBroadcastReceiver != null) {
             mBroadcastReceiver.unregister();
         }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
index b96d0f89..7c85da5f 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
@@ -34,12 +34,12 @@ protected void preRenderHtml(CustomEventInterstitialListener customEventIntersti
     }
 
     @Override
-    protected void showInterstitial() {
+    public void showInterstitial() {
         MraidVideoPlayerActivity.startVast(mContext, mVastVideoConfiguration, mAdConfiguration);
     }
 
     @Override
-    protected void onInvalidate() {
+    public void onInvalidate() {
         if (mVastManager != null) {
             mVastManager.cancel();
         }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
index c73582b5..570981cf 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
@@ -17,11 +17,13 @@
 import android.widget.ImageView;
 import android.widget.RelativeLayout;
 import android.widget.VideoView;
+
 import com.mopub.common.DownloadResponse;
 import com.mopub.common.DownloadTask;
 import com.mopub.common.HttpResponses;
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.event.MoPubEvents;
 import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.Dips;
 import com.mopub.common.util.Drawables;
@@ -29,12 +31,17 @@
 import com.mopub.common.util.VersionCode;
 import com.mopub.mobileads.util.vast.VastCompanionAd;
 import com.mopub.mobileads.util.vast.VastVideoConfiguration;
+
 import org.apache.http.HttpStatus;
 import org.apache.http.client.methods.HttpGet;
 
-import java.io.*;
-import java.util.*;
-import java.util.concurrent.*;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.Serializable;
+import java.util.List;
+import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
 
 import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
 import static com.mopub.common.HttpClient.initializeHttpGet;
@@ -125,18 +132,22 @@ public boolean onTouch(View view, MotionEvent motionEvent) {
 
         mCompanionAdImageView = createCompanionAdImageView(context);
 
-        makeTrackingHttpRequest(mVastVideoConfiguration.getImpressionTrackers(), context);
+        makeTrackingHttpRequest(
+                mVastVideoConfiguration.getImpressionTrackers(),
+                context,
+                MoPubEvents.Type.IMPRESSION_REQUEST
+        );
 
         mVideoProgressCheckerRunnable = createVideoProgressCheckerRunnable();
     }
 
     @Override
-    VideoView getVideoView() {
+    protected VideoView getVideoView() {
         return mVideoView;
     }
 
     @Override
-    void onCreate() {
+    protected void onCreate() {
         super.onCreate();
         getBaseVideoViewControllerListener().onSetRequestedOrientation(SCREEN_ORIENTATION_LANDSCAPE);
 
@@ -146,7 +157,7 @@ void onCreate() {
     }
 
     @Override
-    void onResume() {
+    protected void onResume() {
         // When resuming, VideoView needs to reinitialize its MediaPlayer with the video path
         // and therefore reset the count to zero, to let it retry on error
         mVideoRetries = 0;
@@ -159,21 +170,21 @@ void onResume() {
     }
 
     @Override
-    void onPause() {
+    protected void onPause() {
         stopProgressChecker();
         mSeekerPositionOnPause = mVideoView.getCurrentPosition();
         mVideoView.pause();
     }
 
     @Override
-    void onDestroy() {
+    protected void onDestroy() {
         stopProgressChecker();
         broadcastAction(ACTION_INTERSTITIAL_DISMISS);
     }
 
     // Enable the device's back button when the video close button has been displayed
     @Override
-    boolean backButtonEnabled() {
+    public boolean backButtonEnabled() {
         return mShowCloseButtonEventFired;
     }
 
@@ -228,6 +239,8 @@ private void downloadCompanionAd() {
     }
 
     private Runnable createVideoProgressCheckerRunnable() {
+        // This Runnable must only be run from the main thread due to accessing
+        // class instance variables
         return new Runnable() {
             @Override
             public void run() {
@@ -281,7 +294,7 @@ private void createVideoBackground(final Context context) {
                 new int[] {Color.argb(0,0,0,0), Color.argb(255,0,0,0)}
         );
         Drawable[] layers = new Drawable[2];
-        layers[0] = Drawables.THATCHED_BACKGROUND.decodeImage(context);
+        layers[0] = Drawables.THATCHED_BACKGROUND.createDrawable(context);
         layers[1] = gradientDrawable;
         LayerDrawable layerList = new LayerDrawable(layers);
         getLayout().setBackgroundDrawable(layerList);
@@ -307,6 +320,7 @@ private VideoView createVideoView(final Context context) {
         videoView.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
             @Override
             public void onPrepared(MediaPlayer mp) {
+                // Called when media source is ready for playback
                 if (mVideoView.getDuration() < MAX_VIDEO_DURATION_FOR_CLOSE_BUTTON) {
                     mShowCloseButtonDelay = mVideoView.getDuration();
                 }
@@ -413,7 +427,7 @@ private ImageView createCompanionAdImageView(final Context context) {
     }
 
     private void handleClick(final List<String> clickThroughTrackers, final String clickThroughUrl) {
-        makeTrackingHttpRequest(clickThroughTrackers, getContext());
+        makeTrackingHttpRequest(clickThroughTrackers, getContext(), MoPubEvents.Type.CLICK_REQUEST);
 
         videoClicked();
 
@@ -467,12 +481,6 @@ int getVideoRetries() {
         return mVideoRetries;
     }
 
-    // for testing
-    @Deprecated
-    Runnable getVideoProgressCheckerRunnable() {
-        return mVideoProgressCheckerRunnable;
-    }
-
     // for testing
     @Deprecated
     int getShowCloseButtonDelay() {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/ViewGestureDetector.java b/mopub-sdk/src/main/java/com/mopub/mobileads/ViewGestureDetector.java
index bb9a23df..e554f3df 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/ViewGestureDetector.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/ViewGestureDetector.java
@@ -10,7 +10,7 @@
 public class ViewGestureDetector extends GestureDetector {
     private final View mView;
 
-    interface UserClickListener {
+    public interface UserClickListener {
         void onUserClick();
         void onResetUserClick();
         boolean wasClicked();
@@ -32,7 +32,7 @@ private ViewGestureDetector(Context context, View view, AdAlertGestureListener a
         setIsLongpressEnabled(false);
     }
 
-    void sendTouchEvent(MotionEvent motionEvent) {
+    public void sendTouchEvent(MotionEvent motionEvent) {
         switch (motionEvent.getAction()) {
             case MotionEvent.ACTION_UP:
                 if (mUserClickListener != null) {
@@ -60,7 +60,7 @@ void sendTouchEvent(MotionEvent motionEvent) {
         }
     }
 
-    void setUserClickListener(UserClickListener listener) {
+    public void setUserClickListener(UserClickListener listener) {
         mUserClickListener = listener;
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java b/mopub-sdk/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
index e4d92329..36f740e8 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
@@ -5,20 +5,22 @@
 
 import com.mopub.common.AdUrlGenerator;
 import com.mopub.common.ClientMetadata;
+import com.mopub.common.Constants;
 import com.mopub.common.LocationService;
 import com.mopub.common.MoPub;
 import com.mopub.common.util.DateAndTime;
 
-import static com.mopub.mobileads.util.Mraids.isStorePictureSupported;
-
 public class WebViewAdUrlGenerator extends AdUrlGenerator {
-    public WebViewAdUrlGenerator(Context context) {
+    private final boolean mIsStorePictureSupported;
+
+    public WebViewAdUrlGenerator(Context context, boolean isStorePictureSupported) {
         super(context);
+        mIsStorePictureSupported = isStorePictureSupported;
     }
 
     @Override
     public String generateUrlString(String serverHostname) {
-        initUrlString(serverHostname, MoPubView.AD_HANDLER);
+        initUrlString(serverHostname, Constants.AD_HANDLER);
 
         final ClientMetadata clientMetadata = ClientMetadata.getInstance(mContext);
 
@@ -38,13 +40,7 @@ public String generateUrlString(String serverHostname) {
 
         setKeywords(mKeywords);
 
-        Location location = mLocation;
-        if (location == null) {
-            location = LocationService.getLastKnownLocation(mContext,
-                    MoPub.getLocationPrecision(),
-                    MoPub.getLocationAwareness());
-        }
-        setLocation(location);
+        setLocation(mLocation);
 
         setTimezone(DateAndTime.getTimeZoneOffsetString());
 
@@ -52,9 +48,9 @@ public String generateUrlString(String serverHostname) {
 
         setDensity(clientMetadata.getDensity());
 
-        setMraidFlag(detectIsMraidSupported());
+        setMraidFlag(true);
 
-        String networkOperator = clientMetadata.getNetworkOperator();
+        String networkOperator = clientMetadata.getNetworkOperatorForUrl();
         setMccCode(networkOperator);
         setMncCode(networkOperator);
 
@@ -65,20 +61,10 @@ public String generateUrlString(String serverHostname) {
 
         setAppVersion(clientMetadata.getAppVersion());
 
-        setExternalStoragePermission(isStorePictureSupported(mContext));
+        setExternalStoragePermission(mIsStorePictureSupported);
 
         setTwitterAppInstalledFlag();
 
         return getFinalUrlString();
     }
-
-    private boolean detectIsMraidSupported() {
-        boolean mraid = true;
-        try {
-            Class.forName("com.mopub.mobileads.MraidView");
-        } catch (ClassNotFoundException e) {
-            mraid = false;
-        }
-        return mraid;
-    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/MraidControllerFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/MraidControllerFactory.java
new file mode 100644
index 00000000..59ee225c
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/MraidControllerFactory.java
@@ -0,0 +1,27 @@
+package com.mopub.mobileads.factories;
+
+import android.content.Context;
+
+import com.mopub.common.VisibleForTesting;
+import com.mopub.mobileads.AdConfiguration;
+import com.mopub.mraid.MraidController;
+import com.mopub.mraid.PlacementType;
+
+public class MraidControllerFactory {
+    protected static MraidControllerFactory instance = new MraidControllerFactory();
+
+    @VisibleForTesting
+    public static void setInstance(MraidControllerFactory factory) {
+        instance = factory;
+    }
+
+    public static MraidController create(final Context context,
+            final AdConfiguration adConfiguration, final PlacementType placementType) {
+        return instance.internalCreate(context, adConfiguration, placementType);
+    }
+
+    protected MraidController internalCreate(final Context context,
+            final AdConfiguration adConfiguration, final PlacementType placementType) {
+        return new MraidController(context, adConfiguration, placementType);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/MraidViewFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/MraidViewFactory.java
deleted file mode 100644
index a139babf..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/MraidViewFactory.java
+++ /dev/null
@@ -1,42 +0,0 @@
-package com.mopub.mobileads.factories;
-
-import android.content.Context;
-
-import com.mopub.mobileads.AdConfiguration;
-import com.mopub.mobileads.MraidView;
-import com.mopub.mobileads.MraidView.NativeCloseButtonStyle;
-
-public class MraidViewFactory {
-    protected static MraidViewFactory instance = new MraidViewFactory();
-
-    @Deprecated // for testing
-    public static void setInstance(MraidViewFactory factory) {
-        instance = factory;
-    }
-
-    public static MraidView create(Context context, AdConfiguration adConfiguration) {
-        return instance.internalCreate(context, adConfiguration);
-    }
-
-    public static MraidView create(
-            Context context,
-            AdConfiguration adConfiguration,
-            MraidView.ExpansionStyle expansionStyle,
-            NativeCloseButtonStyle buttonStyle,
-            MraidView.PlacementType placementType) {
-        return instance.internalCreate(context, adConfiguration, expansionStyle, buttonStyle, placementType);
-    }
-
-    protected MraidView internalCreate(Context context, AdConfiguration adConfiguration) {
-        return new MraidView(context, adConfiguration);
-    }
-
-    protected MraidView internalCreate(
-            Context context,
-            AdConfiguration adConfiguration,
-            MraidView.ExpansionStyle expansionStyle,
-            NativeCloseButtonStyle buttonStyle,
-            MraidView.PlacementType placementType) {
-        return new MraidView(context, adConfiguration, expansionStyle, buttonStyle, placementType);
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
index af32b51a..557b6e11 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
@@ -2,7 +2,6 @@
 
 import android.graphics.Canvas;
 import android.graphics.Paint;
-import android.graphics.Path;
 import android.graphics.Point;
 
 public class CloseButtonDrawable extends CircleDrawable {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java
index 94228d44..7071ffa0 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java
@@ -17,63 +17,48 @@
             "  }\n" +
             "}());\n" +
             "\n" +
-            "(function() {\n" +
-            "  // Establish the root mraidbridge object.\n" +
-            "  var mraidbridge = window.mraidbridge = {};\n" +
-            "\n" +
-            "  // native SDK is ready to process mraid commands.\n" +
-            "  var nativeSDKFiredReady = false;\n" +
-            "\n" +
-            "  // Listeners for bridge events.\n" +
-            "  var listeners = {};\n" +
-            "\n" +
-            "  // Queue to track pending calls to the native SDK.\n" +
-            "  var nativeCallQueue = [];\n" +
             "\n" +
-            "  // Whether a native call is currently in progress.\n" +
-            "  var nativeCallInFlight = false;\n" +
+            "(function() {\n" +
+            "  var mraid = window.mraid = {};\n" +
             "\n" +
             "  //////////////////////////////////////////////////////////////////////////////////////////////////\n" +
             "\n" +
-            "  mraidbridge.fireReadyEvent = function() {\n" +
-            "    nativeSDKFiredReady = true;\n" +
-            "    mraidbridge.fireEvent('ready');\n" +
-            "  };\n" +
+            "  // Bridge interface to SDK\n" +
             "\n" +
-            "  mraidbridge.fireChangeEvent = function(properties) {\n" +
-            "    mraidbridge.fireEvent('change', properties);\n" +
+            "  var bridge = window.mraidbridge = {\n" +
+            "    nativeSDKFiredReady: false,\n" +
+            "    nativeCallQueue: [],\n" +
+            "    nativeCallInFlight: false,\n" +
+            "    lastSizeChangeProperties: null\n" +
             "  };\n" +
             "\n" +
-            "  mraidbridge.fireErrorEvent = function(message, action) {\n" +
-            "    mraidbridge.fireEvent('error', message, action);\n" +
-            "  };\n" +
             "\n" +
-            "  mraidbridge.fireEvent = function(type) {\n" +
-            "    var ls = listeners[type];\n" +
-            "    if (ls) {\n" +
-            "      var args = Array.prototype.slice.call(arguments);\n" +
-            "      args.shift();\n" +
-            "      var l = ls.length;\n" +
-            "      for (var i = 0; i < l; i++) {\n" +
-            "        ls[i].apply(null, args);\n" +
+            "  bridge.fireChangeEvent = function(properties) {\n" +
+            "    for (var p in properties) {\n" +
+            "      if (properties.hasOwnProperty(p)) {\n" +
+            "        // Change handlers defined by MRAID below\n" +
+            "        var handler = changeHandlers[p];\n" +
+            "        handler(properties[p]);\n" +
             "      }\n" +
             "    }\n" +
             "  };\n" +
             "\n" +
-            "  mraidbridge.nativeCallComplete = function(command) {\n" +
-            "    if (nativeCallQueue.length === 0) {\n" +
-            "      nativeCallInFlight = false;\n" +
+            "  bridge.nativeCallComplete = function(command) {\n" +
+            "    if (this.nativeCallQueue.length === 0) {\n" +
+            "      this.nativeCallInFlight = false;\n" +
             "      return;\n" +
             "    }\n" +
             "\n" +
-            "    var nextCall = nativeCallQueue.pop();\n" +
+            "    var nextCall = this.nativeCallQueue.pop();\n" +
             "    window.location = nextCall;\n" +
             "  };\n" +
             "\n" +
-            "  mraidbridge.executeNativeCall = function(command) {\n" +
-            "    if (!nativeSDKFiredReady) {\n" +
+            "  bridge.executeNativeCall = function(args) {\n" +
+            "    var command = args.shift();\n" +
+            "\n" +
+            "    if (!this.nativeSDKFiredReady) {\n" +
             "        console.log('rejecting ' + command + ' because mraid is not ready');\n" +
-            "        mraidbridge.fireErrorEvent('mraid is not ready', command);\n" +
+            "        bridge.notifyErrorEvent('mraid is not ready', command);\n" +
             "        return;\n" +
             "    }\n" +
             "\n" +
@@ -82,9 +67,9 @@
             "    var key, value;\n" +
             "    var isFirstArgument = true;\n" +
             "\n" +
-            "    for (var i = 1; i < arguments.length; i += 2) {\n" +
-            "      key = arguments[i];\n" +
-            "      value = arguments[i + 1];\n" +
+            "    for (var i = 0; i < args.length; i += 2) {\n" +
+            "      key = args[i];\n" +
+            "      value = args[i + 1];\n" +
             "\n" +
             "      if (value === null) continue;\n" +
             "\n" +
@@ -98,55 +83,133 @@
             "      call += encodeURIComponent(key) + '=' + encodeURIComponent(value);\n" +
             "    }\n" +
             "\n" +
-            "    if (nativeCallInFlight) {\n" +
-            "      nativeCallQueue.push(call);\n" +
+            "    if (this.nativeCallInFlight) {\n" +
+            "      this.nativeCallQueue.push(call);\n" +
             "    } else {\n" +
-            "      nativeCallInFlight = true;\n" +
+            "      this.nativeCallInFlight = true;\n" +
             "      window.location = call;\n" +
             "    }\n" +
             "  };\n" +
             "\n" +
-            "  //////////////////////////////////////////////////////////////////////////////////////////////////\n" +
             "\n" +
-            "  mraidbridge.addEventListener = function(event, listener) {\n" +
-            "    var eventListeners;\n" +
-            "    listeners[event] = listeners[event] || [];\n" +
-            "    eventListeners = listeners[event];\n" +
+            "  bridge.setCurrentPosition = function(x, y, width, height) {\n" +
+            "    currentPosition = {\n" +
+            "      x: x,\n" +
+            "      y: y,\n" +
+            "      width: width,\n" +
+            "      height: height\n" +
+            "    };\n" +
+            "    broadcastEvent(EVENTS.INFO, 'Set current position to ' + stringify(currentPosition));\n" +
+            "  };\n" +
+            "\n" +
+            "  bridge.setDefaultPosition = function(x, y, width, height) {\n" +
+            "    defaultPosition = {\n" +
+            "      x: x,\n" +
+            "      y: y,\n" +
+            "      width: width,\n" +
+            "      height: height\n" +
+            "    };\n" +
+            "    broadcastEvent(EVENTS.INFO, 'Set default position to ' + stringify(defaultPosition));\n" +
+            "  };\n" +
+            "\n" +
+            "  bridge.setMaxSize = function(width, height) {\n" +
+            "    maxSize = {\n" +
+            "      width: width,\n" +
+            "      height: height\n" +
+            "    };\n" +
+            "\n" +
+            "    expandProperties.width = width;\n" +
+            "    expandProperties.height = height;\n" +
             "\n" +
-            "    for (var l in eventListeners) {\n" +
-            "      // Listener already registered, so no need to add it.\n" +
-            "      if (listener === l) return;\n" +
+            "    broadcastEvent(EVENTS.INFO, 'Set max size to ' + stringify(maxSize));\n" +
+            "  };\n" +
+            "\n" +
+            "  bridge.setPlacementType = function(_placementType) {\n" +
+            "    placementType = _placementType;\n" +
+            "    broadcastEvent(EVENTS.INFO, 'Set placement type to ' + stringify(placementType));\n" +
+            "  };\n" +
+            "\n" +
+            "  bridge.setScreenSize = function(width, height) {\n" +
+            "    screenSize = {\n" +
+            "      width: width,\n" +
+            "      height: height\n" +
+            "    };\n" +
+            "    broadcastEvent(EVENTS.INFO, 'Set screen size to ' + stringify(screenSize));\n" +
+            "  };\n" +
+            "\n" +
+            "  bridge.setState = function(_state) {\n" +
+            "    state = _state;\n" +
+            "    broadcastEvent(EVENTS.INFO, 'Set state to ' + stringify(state));\n" +
+            "    broadcastEvent(EVENTS.STATECHANGE, state);\n" +
+            "  };\n" +
+            "\n" +
+            "  bridge.setIsViewable = function(_isViewable) {\n" +
+            "    isViewable = _isViewable;\n" +
+            "    broadcastEvent(EVENTS.INFO, 'Set isViewable to ' + stringify(isViewable));\n" +
+            "    broadcastEvent(EVENTS.VIEWABLECHANGE, isViewable);\n" +
+            "  };\n" +
+            "\n" +
+            "  bridge.setSupports = function(sms, tel, calendar, storePicture, inlineVideo) {\n" +
+            "    supportProperties = {\n" +
+            "      sms: sms,\n" +
+            "      tel: tel,\n" +
+            "      calendar: calendar,\n" +
+            "      storePicture: storePicture,\n" +
+            "      inlineVideo: inlineVideo\n" +
+            "    };\n" +
+            "  };\n" +
+            "\n" +
+            "  bridge.notifyReadyEvent = function() {\n" +
+            "    this.nativeSDKFiredReady = true;\n" +
+            "    broadcastEvent(EVENTS.READY);\n" +
+            "  };\n" +
+            "\n" +
+            "  bridge.notifyErrorEvent = function(message, action) {\n" +
+            "    broadcastEvent(EVENTS.ERROR, message, action);\n" +
+            "  };\n" +
+            "\n" +
+            "  // Temporary aliases while we migrate to the new API\n" +
+            "  bridge.fireReadyEvent = bridge.notifyReadyEvent;\n" +
+            "  bridge.fireErrorEvent = bridge.notifyErrorEvent;\n" +
+            "\n" +
+            "  bridge.notifySizeChangeEvent = function(width, height) {\n" +
+            "    if (this.lastSizeChangeProperties &&\n" +
+            "          width == this.lastSizeChangeProperties.width && height == this.lastSizeChangeProperties.height) {\n" +
+            "      return;\n" +
             "    }\n" +
             "\n" +
-            "    eventListeners.push(listener);\n" +
+            "    this.lastSizeChangeProperties = {\n" +
+            "        width: width,\n" +
+            "        height: height\n" +
+            "    };\n" +
+            "    broadcastEvent(EVENTS.SIZECHANGE, width, height);\n" +
             "  };\n" +
             "\n" +
-            "  mraidbridge.removeEventListener = function(event, listener) {\n" +
-            "    if (listeners.hasOwnProperty(event)) {\n" +
-            "      var eventListeners = listeners[event];\n" +
-            "      if (eventListeners) {\n" +
-            "        var idx = eventListeners.indexOf(listener);\n" +
-            "        if (idx !== -1) {\n" +
-            "          eventListeners.splice(idx, 1);\n" +
-            "        }\n" +
-            "      }\n" +
+            "  bridge.notifyStateChangeEvent = function() {\n" +
+            "    if (state === STATES.LOADING) {\n" +
+            "      broadcastEvent(EVENTS.INFO, 'Native SDK initialized.');\n" +
             "    }\n" +
+            "\n" +
+            "    broadcastEvent(EVENTS.INFO, 'Set state to ' + stringify(state));\n" +
+            "    broadcastEvent(EVENTS.STATECHANGE, state);\n" +
+            "  };\n" +
+            "\n" +
+            "  bridge.notifyViewableChangeEvent = function() {\n" +
+            "    broadcastEvent(EVENTS.INFO, 'Set isViewable to ' + stringify(isViewable));\n" +
+            "    broadcastEvent(EVENTS.VIEWABLECHANGE, isViewable);\n" +
             "  };\n" +
-            "}());\n" +
             "\n" +
-            "(function() {\n" +
-            "  var mraid = window.mraid = {};\n" +
-            "  var bridge = window.mraidbridge;\n" +
             "\n" +
             "  // Constants. ////////////////////////////////////////////////////////////////////////////////////\n" +
             "\n" +
-            "  var VERSION = mraid.VERSION = '1.0';\n" +
+            "  var VERSION = mraid.VERSION = '2.0';\n" +
             "\n" +
             "  var STATES = mraid.STATES = {\n" +
-            "    LOADING: 'loading',     // Initial state.\n" +
+            "    LOADING: 'loading',\n" +
             "    DEFAULT: 'default',\n" +
             "    EXPANDED: 'expanded',\n" +
-            "    HIDDEN: 'hidden'\n" +
+            "    HIDDEN: 'hidden',\n" +
+            "    RESIZED: 'resized'\n" +
             "  };\n" +
             "\n" +
             "  var EVENTS = mraid.EVENTS = {\n" +
@@ -154,7 +217,8 @@
             "    INFO: 'info',\n" +
             "    READY: 'ready',\n" +
             "    STATECHANGE: 'stateChange',\n" +
-            "    VIEWABLECHANGE: 'viewableChange'\n" +
+            "    VIEWABLECHANGE: 'viewableChange',\n" +
+            "    SIZECHANGE: 'sizeChange'\n" +
             "  };\n" +
             "\n" +
             "  var PLACEMENT_TYPES = mraid.PLACEMENT_TYPES = {\n" +
@@ -167,14 +231,44 @@
             "\n" +
             "  // Properties which define the behavior of an expandable ad.\n" +
             "  var expandProperties = {\n" +
-            "    width: -1,\n" +
-            "    height: -1,\n" +
+            "    width: false,\n" +
+            "    height: false,\n" +
             "    useCustomClose: false,\n" +
-            "    isModal: true,\n" +
-            "    lockOrientation: false\n" +
+            "    isModal: true\n" +
+            "  };\n" +
+            "\n" +
+            "  var resizeProperties = {\n" +
+            "    width: false,\n" +
+            "    height: false,\n" +
+            "    offsetX: false,\n" +
+            "    offsetY: false,\n" +
+            "    customClosePosition: 'top-right',\n" +
+            "    allowOffscreen: true\n" +
+            "  };\n" +
+            "\n" +
+            "  var orientationProperties = {\n" +
+            "    allowOrientationChange: true,\n" +
+            "    forceOrientation: \"none\"\n" +
+            "  };\n" +
+            "\n" +
+            "  var supportProperties = {\n" +
+            "    sms: false,\n" +
+            "    tel: false,\n" +
+            "    calendar: false,\n" +
+            "    storePicture: false,\n" +
+            "    inlineVideo: false\n" +
             "  };\n" +
             "\n" +
-            "  var hasSetCustomSize = false;\n" +
+            "  // default is undefined so that notifySizeChangeEvent can track changes\n" +
+            "  var lastSizeChangeProperties;\n" +
+            "\n" +
+            "  var maxSize = {};\n" +
+            "\n" +
+            "  var currentPosition = {};\n" +
+            "\n" +
+            "  var defaultPosition = {};\n" +
+            "\n" +
+            "  var screenSize = {};\n" +
             "\n" +
             "  var hasSetCustomClose = false;\n" +
             "\n" +
@@ -186,18 +280,8 @@
             "\n" +
             "  var isViewable = false;\n" +
             "\n" +
-            "  var screenSize = { width: -1, height: -1 };\n" +
-            "\n" +
             "  var placementType = PLACEMENT_TYPES.UNKNOWN;\n" +
             "\n" +
-            "  var supports = {\n" +
-            "    sms: false,\n" +
-            "    tel: false,\n" +
-            "    calendar: false,\n" +
-            "    storePicture: false,\n" +
-            "    inlineVideo: false\n" +
-            "  };\n" +
-            "\n" +
             "  //////////////////////////////////////////////////////////////////////////////////////////////////\n" +
             "\n" +
             "  var EventListeners = function(event) {\n" +
@@ -233,7 +317,7 @@
             "\n" +
             "    this.broadcast = function(args) {\n" +
             "      for (var id in listeners) {\n" +
-            "        if (listeners.hasOwnProperty(id)) listeners[id].apply({}, args);\n" +
+            "        if (listeners.hasOwnProperty(id)) listeners[id].apply(mraid, args);\n" +
             "      }\n" +
             "    };\n" +
             "\n" +
@@ -309,29 +393,17 @@
             "      placementType = val;\n" +
             "    },\n" +
             "\n" +
-            "    screenSize: function(val) {\n" +
+            "    sizeChange: function(val) {\n" +
             "      broadcastEvent(EVENTS.INFO, 'Set screenSize to ' + stringify(val));\n" +
             "      for (var key in val) {\n" +
             "        if (val.hasOwnProperty(key)) screenSize[key] = val[key];\n" +
             "      }\n" +
-            "\n" +
-            "      if (!hasSetCustomSize) {\n" +
-            "        expandProperties['width'] = screenSize['width'];\n" +
-            "        expandProperties['height'] = screenSize['height'];\n" +
-            "      }\n" +
-            "    },\n" +
-            "\n" +
-            "    expandProperties: function(val) {\n" +
-            "      broadcastEvent(EVENTS.INFO, 'Merging expandProperties with ' + stringify(val));\n" +
-            "      for (var key in val) {\n" +
-            "        if (val.hasOwnProperty(key)) expandProperties[key] = val[key];\n" +
-            "      }\n" +
             "    },\n" +
             "\n" +
             "    supports: function(val) {\n" +
             "      broadcastEvent(EVENTS.INFO, 'Set supports to ' + stringify(val));\n" +
-            "        supports = val;\n" +
-            "    },\n" +
+            "        supportProperties = val;\n" +
+            "    }\n" +
             "  };\n" +
             "\n" +
             "  var validate = function(obj, validators, action, merge) {\n" +
@@ -343,7 +415,7 @@
             "      } else {\n" +
             "        for (var i in validators) {\n" +
             "          if (validators.hasOwnProperty(i) && obj[i] === undefined) {\n" +
-            "            broadcastEvent(EVENTS.ERROR, 'Object is missing required property: ' + i + '.', action);\n" +
+            "            broadcastEvent(EVENTS.ERROR, 'Object is missing required property: ' + i, action);\n" +
             "            return false;\n" +
             "          }\n" +
             "        }\n" +
@@ -355,8 +427,7 @@
             "      var value = obj[prop];\n" +
             "      if (validator && !validator(value)) {\n" +
             "        // Failed validation.\n" +
-            "        broadcastEvent(EVENTS.ERROR, 'Value of property ' + prop + ' is invalid.',\n" +
-            "          action);\n" +
+            "        broadcastEvent(EVENTS.ERROR, 'Value of property ' + prop + ' is invalid: ' + value, action);\n" +
             "        return false;\n" +
             "      }\n" +
             "    }\n" +
@@ -364,40 +435,20 @@
             "  };\n" +
             "\n" +
             "  var expandPropertyValidators = {\n" +
-            "    width: function(v) { return !isNaN(v) && v >= 0; },\n" +
-            "    height: function(v) { return !isNaN(v) && v >= 0; },\n" +
             "    useCustomClose: function(v) { return (typeof v === 'boolean'); },\n" +
-            "    lockOrientation: function(v) { return (typeof v === 'boolean'); }\n" +
             "  };\n" +
             "\n" +
             "  //////////////////////////////////////////////////////////////////////////////////////////////////\n" +
             "\n" +
-            "  bridge.addEventListener('change', function(properties) {\n" +
-            "    for (var p in properties) {\n" +
-            "      if (properties.hasOwnProperty(p)) {\n" +
-            "        var handler = changeHandlers[p];\n" +
-            "        handler(properties[p]);\n" +
-            "      }\n" +
-            "    }\n" +
-            "  });\n" +
-            "\n" +
-            "  bridge.addEventListener('error', function(message, action) {\n" +
-            "    broadcastEvent(EVENTS.ERROR, message, action);\n" +
-            "  });\n" +
-            "\n" +
-            "  bridge.addEventListener('ready', function() {\n" +
-            "    broadcastEvent(EVENTS.READY);\n" +
-            "  });\n" +
-            "\n" +
-            "  //////////////////////////////////////////////////////////////////////////////////////////////////\n" +
-            "\n" +
             "  mraid.addEventListener = function(event, listener) {\n" +
             "    if (!event || !listener) {\n" +
             "      broadcastEvent(EVENTS.ERROR, 'Both event and listener are required.', 'addEventListener');\n" +
             "    } else if (!contains(event, EVENTS)) {\n" +
             "      broadcastEvent(EVENTS.ERROR, 'Unknown MRAID event: ' + event, 'addEventListener');\n" +
             "    } else {\n" +
-            "      if (!listeners[event]) listeners[event] = new EventListeners(event);\n" +
+            "      if (!listeners[event]) {\n" +
+            "        listeners[event] = new EventListeners(event);\n" +
+            "      }\n" +
             "      listeners[event].add(listener);\n" +
             "    }\n" +
             "  };\n" +
@@ -406,45 +457,25 @@
             "    if (state === STATES.HIDDEN) {\n" +
             "      broadcastEvent(EVENTS.ERROR, 'Ad cannot be closed when it is already hidden.',\n" +
             "        'close');\n" +
-            "    } else bridge.executeNativeCall('close');\n" +
+            "    } else bridge.executeNativeCall(['close']);\n" +
             "  };\n" +
             "\n" +
             "  mraid.expand = function(URL) {\n" +
-            "    if (this.getState() !== STATES.DEFAULT) {\n" +
-            "      broadcastEvent(EVENTS.ERROR, 'Ad can only be expanded from the default state.', 'expand');\n" +
+            "    if (!(this.getState() === STATES.DEFAULT || this.getState() === STATES.RESIZED)) {\n" +
+            "      broadcastEvent(EVENTS.ERROR, 'Ad can only be expanded from the default or resized state.', 'expand');\n" +
             "    } else {\n" +
-            "      var args = ['expand'];\n" +
-            "\n" +
-            "      if (this.getHasSetCustomClose()) {\n" +
-            "        args = args.concat(['shouldUseCustomClose', expandProperties.useCustomClose ? 'true' : 'false']);\n" +
-            "      }\n" +
-            "\n" +
-            "      if (this.getHasSetCustomSize()) {\n" +
-            "        if (expandProperties.width >= 0 && expandProperties.height >= 0) {\n" +
-            "          args = args.concat(['w', expandProperties.width, 'h', expandProperties.height]);\n" +
-            "        }\n" +
-            "      }\n" +
-            "\n" +
-            "      if (typeof expandProperties.lockOrientation !== 'undefined') {\n" +
-            "        args = args.concat(['lockOrientation', expandProperties.lockOrientation]);\n" +
-            "      }\n" +
+            "      var args = ['expand',\n" +
+            "        'shouldUseCustomClose', expandProperties.useCustomClose\n" +
+            "      ];\n" +
             "\n" +
             "      if (URL) {\n" +
             "        args = args.concat(['url', URL]);\n" +
             "      }\n" +
             "\n" +
-            "      bridge.executeNativeCall.apply(this, args);\n" +
+            "      bridge.executeNativeCall(args);\n" +
             "    }\n" +
             "  };\n" +
             "\n" +
-            "  mraid.getHasSetCustomClose = function() {\n" +
-            "      return hasSetCustomClose;\n" +
-            "  };\n" +
-            "\n" +
-            "  mraid.getHasSetCustomSize = function() {\n" +
-            "      return hasSetCustomSize;\n" +
-            "  };\n" +
-            "\n" +
             "  mraid.getExpandProperties = function() {\n" +
             "    var properties = {\n" +
             "      width: expandProperties.width,\n" +
@@ -455,56 +486,93 @@
             "    return properties;\n" +
             "  };\n" +
             "\n" +
+            "\n" +
+            "  mraid.getCurrentPosition = function() {\n" +
+            "    return {\n" +
+            "      x: currentPosition.x,\n" +
+            "      y: currentPosition.y,\n" +
+            "      width: currentPosition.width,\n" +
+            "      height: currentPosition.height\n" +
+            "    };\n" +
+            "  };\n" +
+            "\n" +
+            "  mraid.getDefaultPosition = function() {\n" +
+            "    return {\n" +
+            "      x: defaultPosition.x,\n" +
+            "      y: defaultPosition.y,\n" +
+            "      width: defaultPosition.width,\n" +
+            "      height: defaultPosition.height\n" +
+            "    };\n" +
+            "  };\n" +
+            "\n" +
+            "  mraid.getMaxSize = function() {\n" +
+            "    return {\n" +
+            "      width: maxSize.width,\n" +
+            "      height: maxSize.height\n" +
+            "    };\n" +
+            "  };\n" +
+            "\n" +
             "  mraid.getPlacementType = function() {\n" +
             "    return placementType;\n" +
             "  };\n" +
             "\n" +
-            "  mraid.getState = function() {\n" +
-            "    return state;\n" +
+            "  mraid.getScreenSize = function() {\n" +
+            "    return {\n" +
+            "      width: screenSize.width,\n" +
+            "      height: screenSize.height\n" +
+            "    };\n" +
             "  };\n" +
             "\n" +
-            "  mraid.getVersion = function() {\n" +
-            "    return mraid.VERSION;\n" +
+            "  mraid.getState = function() {\n" +
+            "    return state;\n" +
             "  };\n" +
             "\n" +
             "  mraid.isViewable = function() {\n" +
             "    return isViewable;\n" +
             "  };\n" +
             "\n" +
+            "  mraid.getVersion = function() {\n" +
+            "    return mraid.VERSION;\n" +
+            "  };\n" +
+            "\n" +
             "  mraid.open = function(URL) {\n" +
             "    if (!URL) broadcastEvent(EVENTS.ERROR, 'URL is required.', 'open');\n" +
-            "    else bridge.executeNativeCall('open', 'url', URL);\n" +
+            "    else bridge.executeNativeCall(['open', 'url', URL]);\n" +
             "  };\n" +
             "\n" +
             "  mraid.removeEventListener = function(event, listener) {\n" +
-            "    if (!event) broadcastEvent(EVENTS.ERROR, 'Event is required.', 'removeEventListener');\n" +
-            "    else {\n" +
-            "      if (listener && (!listeners[event] || !listeners[event].remove(listener))) {\n" +
-            "        broadcastEvent(EVENTS.ERROR, 'Listener not currently registered for event.',\n" +
-            "          'removeEventListener');\n" +
-            "        return;\n" +
-            "      } else if (listeners[event]) listeners[event].removeAll();\n" +
+            "    if (!event) {\n" +
+            "      broadcastEvent(EVENTS.ERROR, 'Event is required.', 'removeEventListener');\n" +
+            "      return;\n" +
+            "    }\n" +
             "\n" +
-            "      if (listeners[event] && listeners[event].count === 0) {\n" +
-            "        listeners[event] = null;\n" +
-            "        delete listeners[event];\n" +
+            "    if (listener) {\n" +
+            "      // If we have a valid event, we'll try to remove the listener from it.\n" +
+            "      var success = false;\n" +
+            "      if (listeners[event]) {\n" +
+            "        success = listeners[event].remove(listener);\n" +
+            "      }\n" +
+            "\n" +
+            "      // If we didn't have a valid event or couldn't remove the listener from the event, broadcast an error and return early.\n" +
+            "      if (!success) {\n" +
+            "        broadcastEvent(EVENTS.ERROR, 'Listener not currently registered for event.', 'removeEventListener');\n" +
+            "        return;\n" +
             "      }\n" +
+            "\n" +
+            "    } else if (!listener && listeners[event]) {\n" +
+            "      listeners[event].removeAll();\n" +
+            "    }\n" +
+            "\n" +
+            "    if (listeners[event] && listeners[event].count === 0) {\n" +
+            "      listeners[event] = null;\n" +
+            "      delete listeners[event];\n" +
             "    }\n" +
             "  };\n" +
             "\n" +
             "  mraid.setExpandProperties = function(properties) {\n" +
             "    if (validate(properties, expandPropertyValidators, 'setExpandProperties', true)) {\n" +
-            "      if (properties.hasOwnProperty('width') || properties.hasOwnProperty('height')) {\n" +
-            "        hasSetCustomSize = true;\n" +
-            "      }\n" +
-            "\n" +
-            "      if (properties.hasOwnProperty('useCustomClose')) hasSetCustomClose = true;\n" +
-            "\n" +
-            "      var desiredProperties = ['width', 'height', 'useCustomClose', 'lockOrientation'];\n" +
-            "      var length = desiredProperties.length;\n" +
-            "      for (var i = 0; i < length; i++) {\n" +
-            "        var propname = desiredProperties[i];\n" +
-            "        if (properties.hasOwnProperty(propname)) expandProperties[propname] = properties[propname];\n" +
+            "      if (properties.hasOwnProperty('useCustomClose')) {\n" +
+            "        expandProperties.useCustomClose = properties.useCustomClose;\n" +
             "      }\n" +
             "    }\n" +
             "  };\n" +
@@ -512,7 +580,7 @@
             "  mraid.useCustomClose = function(shouldUseCustomClose) {\n" +
             "    expandProperties.useCustomClose = shouldUseCustomClose;\n" +
             "    hasSetCustomClose = true;\n" +
-            "    bridge.executeNativeCall('usecustomclose', 'shouldUseCustomClose', shouldUseCustomClose);\n" +
+            "    bridge.executeNativeCall(['usecustomclose', 'shouldUseCustomClose', shouldUseCustomClose]);\n" +
             "  };\n" +
             "\n" +
             "  // MRAID 2.0 APIs ////////////////////////////////////////////////////////////////////////////////\n" +
@@ -520,14 +588,14 @@
             "  mraid.createCalendarEvent = function(parameters) {\n" +
             "    CalendarEventParser.initialize(parameters);\n" +
             "    if (CalendarEventParser.parse()) {\n" +
-            "      bridge.executeNativeCall.apply(this, CalendarEventParser.arguments);\n" +
+            "      bridge.executeNativeCall(CalendarEventParser.arguments);\n" +
             "    } else {\n" +
             "      broadcastEvent(EVENTS.ERROR, CalendarEventParser.errors[0], 'createCalendarEvent');\n" +
             "    }\n" +
             "  };\n" +
             "\n" +
             "  mraid.supports = function(feature) {\n" +
-            "    return supports[feature];\n" +
+            "    return supportProperties[feature];\n" +
             "  };\n" +
             "\n" +
             "  mraid.playVideo = function(uri) {\n" +
@@ -539,7 +607,7 @@
             "    if (!uri) {\n" +
             "      broadcastEvent(EVENTS.ERROR, 'playVideo must be called with a valid URI', 'playVideo');\n" +
             "    } else {\n" +
-            "      bridge.executeNativeCall.apply(this, ['playVideo', 'uri', uri]);\n" +
+            "      bridge.executeNativeCall(['playVideo', 'uri', uri]);\n" +
             "    }\n" +
             "  };\n" +
             "\n" +
@@ -552,36 +620,102 @@
             "    if (!uri) {\n" +
             "      broadcastEvent(EVENTS.ERROR, 'storePicture must be called with a valid URI', 'storePicture');\n" +
             "    } else {\n" +
-            "      bridge.executeNativeCall.apply(this, ['storePicture', 'uri', uri]);\n" +
+            "      bridge.executeNativeCall(['storePicture', 'uri', uri]);\n" +
             "    }\n" +
             "  };\n" +
             "\n" +
-            "  mraid.resize = function() {\n" +
-            "    bridge.executeNativeCall('resize');\n" +
-            "  };\n" +
             "\n" +
-            "  mraid.getResizeProperties = function() {\n" +
-            "    bridge.executeNativeCall('getResizeProperties');\n" +
+            "  var resizePropertyValidators = {\n" +
+            "    width: function(v) {\n" +
+            "      return !isNaN(v) && v > 0;\n" +
+            "    },\n" +
+            "    height: function(v) {\n" +
+            "      return !isNaN(v) && v > 0;\n" +
+            "    },\n" +
+            "    offsetX: function(v) {\n" +
+            "      return !isNaN(v);\n" +
+            "    },\n" +
+            "    offsetY: function(v) {\n" +
+            "      return !isNaN(v);\n" +
+            "    },\n" +
+            "    customClosePosition: function(v) {\n" +
+            "      return (typeof v === 'string' &&\n" +
+            "        ['top-right', 'bottom-right', 'top-left', 'bottom-left', 'center', 'top-center', 'bottom-center'].indexOf(v) > -1);\n" +
+            "    },\n" +
+            "    allowOffscreen: function(v) {\n" +
+            "      return (typeof v === 'boolean');\n" +
+            "    }\n" +
             "  };\n" +
             "\n" +
-            "  mraid.setResizeProperties = function(resizeProperties) {\n" +
-            "    bridge.executeNativeCall('setResizeProperties', 'resizeProperties', resizeProperties);\n" +
+            "  mraid.setOrientationProperties = function(properties) {\n" +
+            "\n" +
+            "    if (properties.hasOwnProperty('allowOrientationChange')) {\n" +
+            "      orientationProperties.allowOrientationChange = properties.allowOrientationChange;\n" +
+            "    }\n" +
+            "\n" +
+            "    if (properties.hasOwnProperty('forceOrientation')) {\n" +
+            "      orientationProperties.forceOrientation = properties.forceOrientation;\n" +
+            "    }\n" +
+            "\n" +
+            "    var args = ['setOrientationProperties',\n" +
+            "      'allowOrientationChange', orientationProperties.allowOrientationChange,\n" +
+            "      'forceOrientation', orientationProperties.forceOrientation\n" +
+            "    ];\n" +
+            "    bridge.executeNativeCall(args);\n" +
             "  };\n" +
             "\n" +
-            "  mraid.getCurrentPosition = function() {\n" +
-            "    bridge.executeNativeCall('getCurrentPosition');\n" +
+            "  mraid.getOrientationProperties = function() {\n" +
+            "    return {\n" +
+            "      allowOrientationChange: orientationProperties.allowOrientationChange,\n" +
+            "      forceOrientation: orientationProperties.forceOrientation\n" +
+            "    };\n" +
             "  };\n" +
             "\n" +
-            "  mraid.getDefaultPosition = function() {\n" +
-            "    bridge.executeNativeCall('getDefaultPosition');\n" +
+            "  mraid.resize = function() {\n" +
+            "    if (!(this.getState() === STATES.DEFAULT || this.getState() === STATES.RESIZED)) {\n" +
+            "      broadcastEvent(EVENTS.ERROR, 'Ad can only be resized from the default or resized state.', 'resize');\n" +
+            "    } else if (!resizeProperties.width || !resizeProperties.height) {\n" +
+            "      broadcastEvent(EVENTS.ERROR, 'Must set resize properties before calling resize()', 'resize');\n" +
+            "    } else {\n" +
+            "      var args = ['resize',\n" +
+            "        'width', resizeProperties.width,\n" +
+            "        'height', resizeProperties.height,\n" +
+            "        'offsetX', resizeProperties.offsetX || 0,\n" +
+            "        'offsetY', resizeProperties.offsetY || 0,\n" +
+            "        'customClosePosition', resizeProperties.customClosePosition,\n" +
+            "        'allowOffscreen', !!resizeProperties.allowOffscreen\n" +
+            "        ];\n" +
+            "\n" +
+            "      bridge.executeNativeCall(args);\n" +
+            "    }\n" +
             "  };\n" +
             "\n" +
-            "  mraid.getMaxSize = function() {\n" +
-            "    bridge.executeNativeCall('getMaxSize');\n" +
+            "  mraid.getResizeProperties = function() {\n" +
+            "    var properties = {\n" +
+            "      width: resizeProperties.width,\n" +
+            "      height: resizeProperties.height,\n" +
+            "      offsetX: resizeProperties.offsetX,\n" +
+            "      offsetY: resizeProperties.offsetY,\n" +
+            "      customClosePosition: resizeProperties.customClosePosition,\n" +
+            "      allowOffscreen: resizeProperties.allowOffscreen\n" +
+            "    };\n" +
+            "    return properties;\n" +
             "  };\n" +
             "\n" +
-            "  mraid.getScreenSize = function() {\n" +
-            "    bridge.executeNativeCall('getScreenSize');\n" +
+            "  mraid.setResizeProperties = function(properties) {\n" +
+            "    if (validate(properties, resizePropertyValidators, 'setResizeProperties', true)) {\n" +
+            "\n" +
+            "      var desiredProperties = ['width', 'height', 'offsetX', 'offsetY', 'customClosePosition', 'allowOffscreen'];\n" +
+            "\n" +
+            "      var length = desiredProperties.length;\n" +
+            "\n" +
+            "      for (var i = 0; i < length; i++) {\n" +
+            "        var propname = desiredProperties[i];\n" +
+            "        if (properties.hasOwnProperty(propname)) {\n" +
+            "          resizeProperties[propname] = properties[propname];\n" +
+            "        }\n" +
+            "      }\n" +
+            "    }\n" +
             "  };\n" +
             "\n" +
             "  var CalendarEventParser = {\n" +
@@ -663,7 +797,7 @@
             "      var validValues = ['opaque', 'transparent'];\n" +
             "\n" +
             "      if (this.parameters.hasOwnProperty('transparency')) {\n" +
-            "        var transparency = this.parameters['transparency'];\n" +
+            "        var transparency = this.parameters.transparency;\n" +
             "        if (contains(transparency, validValues)) {\n" +
             "          this.arguments.push('transparency');\n" +
             "          this.arguments.push(transparency);\n" +
@@ -688,7 +822,7 @@
             "\n" +
             "    parseRecurrenceInterval: function(recurrenceDict) {\n" +
             "      if (recurrenceDict.hasOwnProperty('interval')) {\n" +
-            "        var interval = recurrenceDict['interval'];\n" +
+            "        var interval = recurrenceDict.interval;\n" +
             "        if (!interval) {\n" +
             "          this.errors.push('Recurrence interval cannot be null.');\n" +
             "        } else {\n" +
@@ -704,7 +838,7 @@
             "\n" +
             "    parseRecurrenceFrequency: function(recurrenceDict) {\n" +
             "      if (recurrenceDict.hasOwnProperty('frequency')) {\n" +
-            "        var frequency = recurrenceDict['frequency'];\n" +
+            "        var frequency = recurrenceDict.frequency;\n" +
             "        var validFrequencies = ['daily', 'weekly', 'monthly', 'yearly'];\n" +
             "        if (contains(frequency, validFrequencies)) {\n" +
             "          this.arguments.push('frequency');\n" +
@@ -716,7 +850,7 @@
             "    },\n" +
             "\n" +
             "    parseRecurrenceEndDate: function(recurrenceDict) {\n" +
-            "      var expires = recurrenceDict['expires'];\n" +
+            "      var expires = recurrenceDict.expires;\n" +
             "\n" +
             "      if (!expires) {\n" +
             "        return;\n" +
@@ -748,7 +882,7 @@
             "        this.arguments.push(kind);\n" +
             "        this.arguments.push(dateString);\n" +
             "      }\n" +
-            "    },\n" +
+            "    }\n" +
             "  };\n" +
             "}());\n";
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/Interstitials.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/Interstitials.java
deleted file mode 100644
index a4e4d384..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/Interstitials.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.mopub.mobileads.util;
-
-import android.graphics.Color;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.Button;
-
-public class Interstitials {
-    private Interstitials(){}
-
-    public static boolean addCloseEventRegion(final ViewGroup viewGroup, final ViewGroup.LayoutParams layoutParams, final View.OnClickListener onClickListener) {
-        if (viewGroup == null || viewGroup.getContext() == null) {
-            return false;
-        }
-
-        // An area of the screen that will always lead to an expanded MRAID ad collapsing.
-        final Button closeEventRegion = new Button(viewGroup.getContext());
-        closeEventRegion.setVisibility(View.VISIBLE);
-        closeEventRegion.setBackgroundColor(Color.TRANSPARENT);
-        closeEventRegion.setOnClickListener(onClickListener);
-
-        viewGroup.addView(closeEventRegion, layoutParams);
-
-        return true;
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/Mraids.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/Mraids.java
deleted file mode 100644
index da58d1f5..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/Mraids.java
+++ /dev/null
@@ -1,50 +0,0 @@
-package com.mopub.mobileads.util;
-
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.PackageManager;
-import android.net.Uri;
-import android.os.Environment;
-
-import com.mopub.common.util.IntentUtils;
-import com.mopub.common.util.VersionCode;
-import com.mopub.mobileads.MraidVideoPlayerActivity;
-
-import static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;
-import static android.os.Environment.MEDIA_MOUNTED;
-
-public class Mraids {
-    public static final String ANDROID_CALENDAR_CONTENT_TYPE = "vnd.android.cursor.item/event";
-
-    public static boolean isTelAvailable(Context context) {
-        Intent telIntent = new Intent(Intent.ACTION_DIAL);
-        telIntent.setData(Uri.parse("tel:"));
-
-        return IntentUtils.deviceCanHandleIntent(context, telIntent);
-    }
-
-    public static boolean isSmsAvailable(Context context) {
-        Intent smsIntent = new Intent(Intent.ACTION_VIEW);
-        smsIntent.setData(Uri.parse("sms:"));
-
-        return IntentUtils.deviceCanHandleIntent(context, smsIntent);
-    }
-
-    public static boolean isStorePictureSupported(Context context) {
-        return MEDIA_MOUNTED.equals(Environment.getExternalStorageState())
-                && context.checkCallingOrSelfPermission(WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
-    }
-
-    public static boolean isCalendarAvailable(Context context) {
-        Intent calendarIntent = new Intent(Intent.ACTION_INSERT).setType(ANDROID_CALENDAR_CONTENT_TYPE);
-
-        return VersionCode.currentApiLevel().isAtLeast(VersionCode.ICE_CREAM_SANDWICH)
-                && IntentUtils.deviceCanHandleIntent(context, calendarIntent);
-    }
-
-    public static boolean isInlineVideoAvailable(Context context) {
-        Intent mraidVideoIntent = new Intent(context, MraidVideoPlayerActivity.class);
-
-        return IntentUtils.deviceCanHandleIntent(context, mraidVideoIntent);
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/WebViews.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/WebViews.java
index f368ccd3..f02925c5 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/WebViews.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/WebViews.java
@@ -1,33 +1,45 @@
 package com.mopub.mobileads.util;
 
-import android.util.Log;
+import android.annotation.TargetApi;
+import android.os.Build.VERSION;
+import android.os.Build.VERSION_CODES;
+import android.support.annotation.NonNull;
 import android.webkit.JsPromptResult;
 import android.webkit.JsResult;
 import android.webkit.WebChromeClient;
 import android.webkit.WebView;
 
-import java.lang.reflect.Method;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Reflection.MethodBuilder;
 
 public class WebViews {
-    private static final String LOGTAG = "MoPub - WebViewsUtil";
+    @TargetApi(VERSION_CODES.HONEYCOMB)
+    public static void onResume(@NonNull WebView webView) {
+        if (VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB) {
+            webView.onResume();
+            return;
+        }
 
-    public static void onPause(WebView webView) {
+        // Method is still available, but hidden. Invoke using reflection.
         try {
-            Method onPause = WebView.class.getDeclaredMethod("onPause");
-            onPause.invoke(webView);
+            new MethodBuilder(webView, "onResume").setAccessible().execute();
         } catch (Exception e) {
-            // can't call this before API level 11
-            return;
+            // no-op
         }
     }
 
-    public static void onResume(WebView webView) {
+    @TargetApi(VERSION_CODES.HONEYCOMB)
+    public static void onPause(@NonNull WebView webView) {
+        if (VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB) {
+            webView.onPause();
+            return;
+        }
+
+        // Method is still available, but hidden. Invoke using reflection.
         try {
-            Method onResume = WebView.class.getDeclaredMethod("onResume");
-            onResume.invoke(webView);
+            new MethodBuilder(webView, "onPause").setAccessible().execute();
         } catch (Exception e) {
-            // can't call this before API level 11
-            return;
+            // no-op
         }
     }
 
@@ -35,25 +47,29 @@ public static void setDisableJSChromeClient(WebView webView) {
         webView.setWebChromeClient(new WebChromeClient() {
             @Override
             public boolean onJsAlert(WebView view, String url, String message, JsResult result) {
-                Log.d(LOGTAG, message);
+                MoPubLog.d(message);
+                result.confirm();
                 return true;
             }
 
             @Override
             public boolean onJsConfirm(WebView view, String url, String message, JsResult result) {
-                Log.d(LOGTAG, message);
+                MoPubLog.d(message);
+                result.confirm();
                 return true;
             }
 
             @Override
             public boolean onJsPrompt(WebView view, String url, String message, String defaultValue, JsPromptResult result) {
-                Log.d(LOGTAG, message);
+                MoPubLog.d(message);
+                result.confirm();
                 return true;
             }
 
             @Override
             public boolean onJsBeforeUnload(WebView view, String url, String message, JsResult result) {
-                Log.d(LOGTAG, message);
+                MoPubLog.d(message);
+                result.confirm();
                 return true;
             }
         });
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastManager.java
index ab6c0dce..cbfdfeb4 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastManager.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastManager.java
@@ -3,12 +3,16 @@
 import android.content.Context;
 import android.view.Display;
 import android.view.WindowManager;
+
 import com.mopub.common.CacheService;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.AsyncTasks;
 import com.mopub.mobileads.VastVideoDownloadTask;
 
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Iterator;
+import java.util.List;
 
 import static com.mopub.mobileads.VastVideoDownloadTask.VastVideoDownloadTaskListener;
 import static com.mopub.mobileads.util.vast.VastXmlManagerAggregator.VastXmlManagerAggregatorListener;
@@ -44,10 +48,7 @@ public void prepareVastVideoConfiguration(final String vastXml, final VastManage
                 AsyncTasks.safeExecuteOnExecutor(mVastXmlManagerAggregator, vastXml);
             } catch (Exception e) {
                 MoPubLog.d("Failed to aggregate vast xml", e);
-
-                if (mVastManagerListener != null) {
-                    mVastManagerListener.onVastVideoConfigurationPrepared(null);
-                }
+                mVastManagerListener.onVastVideoConfigurationPrepared(null);
             }
         }
     }
@@ -63,9 +64,7 @@ public void cancel() {
     public void onAggregationComplete(final List<VastXmlManager> vastXmlManagers) {
         mVastXmlManagerAggregator = null;
         if (vastXmlManagers == null) {
-            if (mVastManagerListener != null) {
-                mVastManagerListener.onVastVideoConfigurationPrepared(null);
-            }
+            mVastManagerListener.onVastVideoConfigurationPrepared(null);
             return;
         }
 
@@ -73,9 +72,7 @@ public void onAggregationComplete(final List<VastXmlManager> vastXmlManagers) {
                 createVastVideoConfigurationFromXml(vastXmlManagers);
 
         if (updateDiskMediaFileUrl(vastVideoConfiguration)) {
-            if (mVastManagerListener != null) {
-                mVastManagerListener.onVastVideoConfigurationPrepared(vastVideoConfiguration);
-            }
+            mVastManagerListener.onVastVideoConfigurationPrepared(vastVideoConfiguration);
             return;
         }
 
@@ -84,13 +81,9 @@ public void onAggregationComplete(final List<VastXmlManager> vastXmlManagers) {
                     @Override
                     public void onComplete(boolean success) {
                         if (success && updateDiskMediaFileUrl(vastVideoConfiguration)) {
-                            if (mVastManagerListener != null) {
-                                mVastManagerListener.onVastVideoConfigurationPrepared(vastVideoConfiguration);
-                            }
+                            mVastManagerListener.onVastVideoConfigurationPrepared(vastVideoConfiguration);
                         } else {
-                            if (mVastManagerListener != null) {
-                                mVastManagerListener.onVastVideoConfigurationPrepared(null);
-                            }
+                            mVastManagerListener.onVastVideoConfigurationPrepared(null);
                         }
                     }
                 }
@@ -103,10 +96,7 @@ public void onComplete(boolean success) {
             );
         } catch (Exception e) {
             MoPubLog.d("Failed to download vast video", e);
-
-            if (mVastManagerListener != null) {
-                mVastManagerListener.onVastVideoConfigurationPrepared(null);
-            }
+            mVastManagerListener.onVastVideoConfigurationPrepared(null);
         }
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManager.java
index 8b098a7d..86748f05 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManager.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManager.java
@@ -6,11 +6,15 @@
 import org.xml.sax.InputSource;
 import org.xml.sax.SAXException;
 
+import java.io.IOException;
+import java.io.StringReader;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
 import javax.xml.parsers.ParserConfigurationException;
-import java.io.*;
-import java.util.*;
 
 class VastXmlManager {
     private static final String ROOT_TAG = "MPMoVideoXMLDocRoot";
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidBanner.java b/mopub-sdk/src/main/java/com/mopub/mraid/MraidBanner.java
new file mode 100644
index 00000000..1295c93e
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mraid/MraidBanner.java
@@ -0,0 +1,103 @@
+package com.mopub.mraid;
+
+import android.content.Context;
+import android.net.Uri;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.View;
+
+import com.mopub.common.VisibleForTesting;
+import com.mopub.mobileads.AdConfiguration;
+import com.mopub.mobileads.AdViewController;
+import com.mopub.mobileads.CustomEventBanner;
+import com.mopub.mobileads.factories.MraidControllerFactory;
+import com.mopub.mraid.MraidController.MraidListener;
+
+import java.util.Map;
+
+import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.mobileads.MoPubErrorCode.MRAID_LOAD_ERROR;
+
+class MraidBanner extends CustomEventBanner {
+
+    @Nullable private MraidController mMraidController;
+    @Nullable private CustomEventBannerListener mBannerListener;
+    @Nullable private MraidWebViewDebugListener mDebugListener;
+
+    @Override
+    protected void loadBanner(@NonNull Context context,
+                    @NonNull CustomEventBannerListener customEventBannerListener,
+                    @NonNull Map<String, Object> localExtras,
+                    @NonNull Map<String, String> serverExtras) {
+        mBannerListener = customEventBannerListener;
+
+        String htmlData;
+        if (extrasAreValid(serverExtras)) {
+            htmlData = Uri.decode(serverExtras.get(HTML_RESPONSE_BODY_KEY));
+        } else {
+            mBannerListener.onBannerFailed(MRAID_LOAD_ERROR);
+            return;
+        }
+
+        AdConfiguration adConfiguration = AdConfiguration.extractFromMap(localExtras);
+        if (htmlData == null || adConfiguration == null) {
+            mBannerListener.onBannerFailed(MRAID_LOAD_ERROR);
+            return;
+        }
+
+        mMraidController = MraidControllerFactory.create(
+                    context, adConfiguration, PlacementType.INLINE);
+
+        mMraidController.setDebugListener(mDebugListener);
+        mMraidController.setMraidListener(new MraidListener() {
+            @Override
+            public void onLoaded(View view) {
+                // Honoring the server dimensions forces the WebView to be the size of the banner
+                AdViewController.setShouldHonorServerDimensions(view);
+                mBannerListener.onBannerLoaded(view);
+            }
+
+            @Override
+            public void onFailedToLoad() {
+                mBannerListener.onBannerFailed(MRAID_LOAD_ERROR);
+            }
+
+            @Override
+            public void onExpand() {
+                mBannerListener.onBannerExpanded();
+                mBannerListener.onBannerClicked();
+            }
+
+            @Override
+            public void onOpen() {
+                mBannerListener.onBannerClicked();
+            }
+
+            @Override
+            public void onClose() {
+                mBannerListener.onBannerCollapsed();
+            }
+        });
+        mMraidController.loadContent(htmlData);
+    }
+
+    @Override
+    protected void onInvalidate() {
+        if (mMraidController != null) {
+            mMraidController.setMraidListener(null);
+            mMraidController.destroy();
+        }
+    }
+
+    private boolean extrasAreValid(Map<String, String> serverExtras) {
+        return serverExtras.containsKey(HTML_RESPONSE_BODY_KEY);
+    }
+
+    @VisibleForTesting
+    public void setDebugListener(@Nullable MraidWebViewDebugListener debugListener) {
+        mDebugListener = debugListener;
+        if (mMraidController != null) {
+            mMraidController.setDebugListener(debugListener);
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidBridge.java b/mopub-sdk/src/main/java/com/mopub/mraid/MraidBridge.java
new file mode 100644
index 00000000..1e72953b
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mraid/MraidBridge.java
@@ -0,0 +1,602 @@
+package com.mopub.mraid;
+
+import android.content.ActivityNotFoundException;
+import android.content.Context;
+import android.content.Intent;
+import android.graphics.Color;
+import android.graphics.Rect;
+import android.net.Uri;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.View.OnTouchListener;
+import android.webkit.ConsoleMessage;
+import android.webkit.JsResult;
+import android.webkit.WebChromeClient;
+import android.webkit.WebView;
+import android.webkit.WebViewClient;
+
+import com.mopub.common.CloseableLayout.ClosePosition;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.mobileads.AdConfiguration;
+import com.mopub.mobileads.BaseWebView;
+import com.mopub.mobileads.ViewGestureDetector;
+import com.mopub.mobileads.ViewGestureDetector.UserClickListener;
+import com.mopub.mobileads.resource.MraidJavascript;
+import com.mopub.mraid.MraidBridge.MraidWebView.OnVisibilityChangedListener;
+import com.mopub.mraid.MraidNativeCommandHandler.MraidCommandFailureListener;
+
+import org.apache.http.NameValuePair;
+import org.apache.http.client.utils.URLEncodedUtils;
+import org.json.JSONObject;
+
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.HashMap;
+import java.util.Map;
+
+public class MraidBridge {
+    public interface MraidBridgeListener {
+        void onPageLoaded();
+
+        void onVisibilityChanged(boolean isVisible);
+
+        boolean onJsAlert(@NonNull String message, @NonNull JsResult result);
+
+        boolean onConsoleMessage(@NonNull ConsoleMessage consoleMessage);
+
+        void onResize(int width, int height, int offsetX,
+                int offsetY, @NonNull ClosePosition closePosition, boolean allowOffscreen)
+                throws MraidCommandException;
+
+        void onExpand(URI uri, boolean shouldUseCustomClose) throws MraidCommandException;
+
+        void onClose();
+
+        void onUseCustomClose(boolean shouldUseCustomClose);
+
+        void onSetOrientationProperties(boolean allowOrientationChange, MraidOrientation
+                forceOrientation) throws MraidCommandException;
+
+        void onOpen(URI uri);
+
+        void onPlayVideo(URI uri);
+    }
+
+    private final String FILTERED_JAVASCRIPT_SOURCE = MraidJavascript.JAVASCRIPT_SOURCE
+            .replaceAll("(?m)^\\s+", "")
+            .replaceAll("(?m)^//.*(?=\\n)", "");
+
+    @NonNull private final AdConfiguration mAdConfiguration;
+    @NonNull private final PlacementType mPlacementType;
+
+    @NonNull private final MraidNativeCommandHandler mMraidNativeCommandHandler;
+
+    @Nullable private MraidBridgeListener mMraidBridgeListener;
+
+    @Nullable private MraidWebView mMraidWebView;
+
+    private boolean mIsClicked;
+
+    private boolean mHasLoaded;
+
+    MraidBridge(@NonNull AdConfiguration adConfiguration,
+            @NonNull PlacementType placementType) {
+        this(adConfiguration, placementType, new MraidNativeCommandHandler());
+    }
+
+    @VisibleForTesting
+    MraidBridge(@NonNull AdConfiguration adConfiguration,
+            @NonNull PlacementType placementType,
+            @NonNull MraidNativeCommandHandler mraidNativeCommandHandler) {
+        mAdConfiguration = adConfiguration;
+        mPlacementType = placementType;
+        mMraidNativeCommandHandler = mraidNativeCommandHandler;
+    }
+
+    void setMraidBridgeListener(@Nullable MraidBridgeListener listener) {
+        mMraidBridgeListener = listener;
+    }
+
+    void attachView(@NonNull MraidWebView mraidWebView) {
+        mMraidWebView = mraidWebView;
+        mMraidWebView.getSettings().setJavaScriptEnabled(true);
+
+        mMraidWebView.loadUrl("javascript:" + FILTERED_JAVASCRIPT_SOURCE);
+        mMraidWebView.setScrollContainer(false);
+        mMraidWebView.setVerticalScrollBarEnabled(false);
+        mMraidWebView.setHorizontalScrollBarEnabled(false);
+        mMraidWebView.setBackgroundColor(Color.BLACK);
+
+        mMraidWebView.setWebViewClient(mMraidWebViewClient);
+
+        mMraidWebView.setWebChromeClient(new WebChromeClient() {
+            @Override
+            public boolean onJsAlert(final WebView view, final String url, final String message,
+                    final JsResult result) {
+                if (mMraidBridgeListener != null) {
+                    return mMraidBridgeListener.onJsAlert(message, result);
+                }
+                return super.onJsAlert(view, url, message, result);
+            }
+
+            @Override
+            public boolean onConsoleMessage(@NonNull final ConsoleMessage consoleMessage) {
+                if (mMraidBridgeListener != null) {
+                    return mMraidBridgeListener.onConsoleMessage(consoleMessage);
+                }
+                return super.onConsoleMessage(consoleMessage);
+            }
+
+            @Override
+            public void onShowCustomView(final View view, final CustomViewCallback callback) {
+                super.onShowCustomView(view, callback);
+            }
+        });
+
+        final ViewGestureDetector gestureDetector = new ViewGestureDetector(
+                mMraidWebView.getContext(), mMraidWebView, mAdConfiguration);
+        gestureDetector.setUserClickListener(new UserClickListener() {
+            @Override
+            public void onUserClick() {
+                mIsClicked = true;
+            }
+
+            @Override
+            public void onResetUserClick() {
+                mIsClicked = false;
+            }
+
+            @Override
+            public boolean wasClicked() {
+                return mIsClicked;
+            }
+        });
+
+        mMraidWebView.setOnTouchListener(new OnTouchListener() {
+            @Override
+            public boolean onTouch(final View v, final MotionEvent event) {
+                gestureDetector.sendTouchEvent(event);
+
+                switch (event.getAction()) {
+                    case MotionEvent.ACTION_DOWN:
+                    case MotionEvent.ACTION_UP:
+                        if (!v.hasFocus()) {
+                            v.requestFocus();
+                        }
+                        break;
+                }
+                return false;
+            }
+        });
+
+        mMraidWebView.setVisibilityChangedListener(new OnVisibilityChangedListener() {
+            @Override
+            public void onVisibilityChanged(final boolean isVisible) {
+                if (mMraidBridgeListener != null) {
+                    mMraidBridgeListener.onVisibilityChanged(isVisible);
+                }
+            }
+        });
+    }
+
+    void detach() {
+        mMraidWebView = null;
+    }
+
+    public void setContentHtml(@NonNull String htmlData) {
+        if (mMraidWebView == null) {
+            MoPubLog.d("MRAID bridge called setContentHtml before WebView was attached");
+            return;
+        }
+
+        mHasLoaded = false;
+        mMraidWebView.loadDataWithBaseURL(null, htmlData, "text/html", "UTF-8", null);
+    }
+
+    public void setContentUrl(String url) {
+        if (mMraidWebView == null) {
+            MoPubLog.d("MRAID bridge called setContentHtml while WebView was not attached");
+            return;
+        }
+
+        mHasLoaded = false;
+        mMraidWebView.loadUrl(url);
+    }
+
+    void injectJavaScript(@NonNull String javascript) {
+        if (mMraidWebView == null) {
+            MoPubLog.d("Attempted to inject Javascript into MRAID WebView while was not "
+                    + "attached:\n\t" + javascript);
+            return;
+        }
+        MoPubLog.v("Injecting Javascript into MRAID WebView:\n\t" + javascript);
+        mMraidWebView.loadUrl("javascript:" + javascript);
+    }
+
+    private void fireErrorEvent(@NonNull MraidJavascriptCommand command, @NonNull String message) {
+        injectJavaScript("window.mraidbridge.notifyErrorEvent("
+                + JSONObject.quote(command.toJavascriptString()) + ", "
+                + JSONObject.quote(message) + ")");
+    }
+
+    private void fireNativeCommandCompleteEvent(@NonNull MraidJavascriptCommand command) {
+        injectJavaScript("window.mraidbridge.nativeCallComplete("
+                + JSONObject.quote(command.toJavascriptString()) + ")");
+    }
+
+    public static class MraidWebView extends BaseWebView {
+        public interface OnVisibilityChangedListener {
+            void onVisibilityChanged(boolean isVisible);
+        }
+
+        @Nullable private OnVisibilityChangedListener mOnVisibilityChangedListener;
+
+        private boolean mIsVisible;
+
+        public MraidWebView(Context context) {
+            super(context);
+            mIsVisible = getVisibility() == View.VISIBLE;
+        }
+
+        void setVisibilityChangedListener(@Nullable OnVisibilityChangedListener listener) {
+            mOnVisibilityChangedListener = listener;
+        }
+
+        @Override
+        protected void onVisibilityChanged(@NonNull View changedView, int visibility) {
+            super.onVisibilityChanged(changedView, visibility);
+            boolean newIsVisible = (visibility == View.VISIBLE);
+            if (newIsVisible != mIsVisible) {
+                mIsVisible = newIsVisible;
+                if (mOnVisibilityChangedListener != null) {
+                    mOnVisibilityChangedListener.onVisibilityChanged(mIsVisible);
+                }
+            }
+        }
+
+        public boolean isVisible() {
+            return mIsVisible;
+        }
+    }
+
+    private final WebViewClient mMraidWebViewClient = new WebViewClient() {
+        @Override
+        public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {
+            MoPubLog.d("Error: " + description);
+            super.onReceivedError(view, errorCode, description, failingUrl);
+        }
+
+        @Override
+        public boolean shouldOverrideUrlLoading(@NonNull WebView view, @NonNull String url) {
+            return handleShouldOverrideUrl(url);
+        }
+
+        @Override
+        public void onPageFinished(@NonNull WebView view, @NonNull String url) {
+            handlePageFinished();
+        }
+    };
+
+    @VisibleForTesting
+    boolean handleShouldOverrideUrl(@NonNull final String url) {
+        URI uri;
+        try {
+            uri = new URI(url);
+        } catch (URISyntaxException e) {
+            MoPubLog.w("Invalid MRAID URL: " + url);
+            fireErrorEvent(MraidJavascriptCommand.UNSPECIFIED, "Mraid command sent an invalid URL");
+            return true;
+        }
+
+        // Note that scheme will be null when we are passed a relative Uri
+        String scheme = uri.getScheme();
+
+        if ("mopub".equals(scheme)) {
+            return true;
+        }
+
+        if ("mraid".equals(scheme)) {
+            String host = uri.getHost();
+            Map<String, String> params = new HashMap<String, String>();
+            for (NameValuePair pair : URLEncodedUtils.parse(uri, "UTF-8")) {
+                params.put(pair.getName(), pair.getValue());
+            }
+            MraidJavascriptCommand command = MraidJavascriptCommand.fromJavascriptString(host);
+            try {
+                runCommand(command, params);
+            } catch (MraidCommandException exception) {
+                fireErrorEvent(command, exception.getMessage());
+            }
+            fireNativeCommandCompleteEvent(command);
+            return true;
+        }
+
+        if (mIsClicked) {
+            Intent intent = new Intent();
+            intent.setAction(Intent.ACTION_VIEW);
+            intent.setData(Uri.parse(url));
+            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+
+            try {
+                if (mMraidWebView == null) {
+                    MoPubLog.d("WebView was detached. Unable to load a URL");
+                    return true;
+                }
+                mMraidWebView.getContext().startActivity(intent);
+                return true;
+            } catch (ActivityNotFoundException e) {
+                MoPubLog.d("No activity found to handle this URL " + url);
+                return false;
+            }
+        }
+
+        return false;
+    }
+
+    @VisibleForTesting
+    private void handlePageFinished() {
+        // This can happen a second time if the user sets window.location directly. We only want
+        // to fire onPageLoaded once.
+        if (mHasLoaded) {
+            return;
+        }
+
+        mHasLoaded = true;
+        if (mMraidBridgeListener != null) {
+            mMraidBridgeListener.onPageLoaded();
+        }
+    }
+
+    @VisibleForTesting
+    void runCommand(@NonNull final MraidJavascriptCommand command,
+            @NonNull Map<String, String> params)
+            throws MraidCommandException {
+        if (command.requiresClick(mPlacementType) && !mIsClicked) {
+            throw new MraidCommandException("Cannot execute this command unless the user clicks");
+        }
+
+        if (mMraidBridgeListener == null) {
+            throw new MraidCommandException("Invalid state to execute this command");
+        }
+
+        if (mMraidWebView == null) {
+            throw new MraidCommandException("The current WebView is being destroyed");
+        }
+
+        switch (command) {
+            case CLOSE:
+                mMraidBridgeListener.onClose();
+                break;
+            case RESIZE:
+                // All these params are required
+                int width = checkRange(parseSize(params.get("width")), 0, 100000);
+                int height = checkRange(parseSize(params.get("height")), 0, 100000);
+                int offsetX = checkRange(parseSize(params.get("offsetX")), -100000, 100000);
+                int offsetY = checkRange(parseSize(params.get("offsetY")), -100000, 100000);
+                ClosePosition closePosition = parseClosePosition(
+                        params.get("customClosePosition"), ClosePosition.TOP_RIGHT);
+                boolean allowOffscreen = parseBoolean(params.get("allowOffscreen"), true);
+                mMraidBridgeListener.onResize(
+                        width, height, offsetX, offsetY, closePosition, allowOffscreen);
+                break;
+            case EXPAND:
+                URI uri = parseURI(params.get("url"), null);
+                boolean shouldUseCustomClose = parseBoolean(params.get("shouldUseCustomClose"),
+                        false);
+                mMraidBridgeListener.onExpand(uri, shouldUseCustomClose);
+                break;
+            case USE_CUSTOM_CLOSE:
+                shouldUseCustomClose = parseBoolean(params.get("shouldUseCustomClose"), false);
+                mMraidBridgeListener.onUseCustomClose(shouldUseCustomClose);
+                break;
+            case OPEN:
+                uri = parseURI(params.get("url"));
+                mMraidBridgeListener.onOpen(uri);
+                break;
+            case SET_ORIENTATION_PROPERTIES:
+                boolean allowOrientationChange = parseBoolean(params.get("allowOrientationChange"));
+                MraidOrientation forceOrientation = parseOrientation(params.get("forceOrientation"));
+
+                mMraidBridgeListener.onSetOrientationProperties(allowOrientationChange,
+                        forceOrientation);
+                break;
+            case PLAY_VIDEO:
+                uri = parseURI(params.get("uri"));
+                mMraidBridgeListener.onPlayVideo(uri);
+                break;
+            case STORE_PICTURE:
+                uri = parseURI(params.get("uri"));
+                mMraidNativeCommandHandler.storePicture(mMraidWebView.getContext(), uri.toString(),
+                        new MraidCommandFailureListener() {
+                            @Override
+                            public void onFailure(final MraidCommandException exception) {
+                                fireErrorEvent(command, exception.getMessage());
+                            }
+                        });
+                break;
+
+            case CREATE_CALENDAR_EVENT:
+                mMraidNativeCommandHandler.createCalendarEvent(mMraidWebView.getContext(), params);
+                break;
+            case UNSPECIFIED:
+                throw new MraidCommandException("Unspecified MRAID Javascript command");
+        }
+    }
+
+    private ClosePosition parseClosePosition(@NonNull String text,
+            @NonNull ClosePosition defaultValue)
+            throws MraidCommandException {
+        if (TextUtils.isEmpty(text)) {
+            return defaultValue;
+        }
+
+        if (text.equals("top-left")) {
+            return ClosePosition.TOP_LEFT;
+        } else if (text.equals("top-right")) {
+            return ClosePosition.TOP_RIGHT;
+        } else if (text.equals("center")) {
+            return ClosePosition.CENTER;
+        } else if (text.equals("bottom-left")) {
+            return ClosePosition.BOTTOM_LEFT;
+        } else if (text.equals("bottom-right")) {
+            return ClosePosition.BOTTOM_RIGHT;
+        } else if (text.equals("top-center")) {
+            return ClosePosition.TOP_CENTER;
+        } else if (text.equals("bottom-center")) {
+            return ClosePosition.BOTTOM_CENTER;
+        } else {
+            throw new MraidCommandException("Invalid close position: " + text);
+        }
+    }
+
+    private int parseSize(@NonNull String text) throws MraidCommandException {
+        int result;
+        try {
+            result = Integer.parseInt(text, 10);
+        } catch (NumberFormatException e) {
+            throw new MraidCommandException("Invalid numeric parameter: " + text);
+        }
+        return result;
+    }
+
+    private MraidOrientation parseOrientation(String text) throws MraidCommandException {
+        if ("portrait".equals(text)) {
+            return MraidOrientation.PORTRAIT;
+        } else if ("landscape".equals(text)) {
+            return MraidOrientation.LANDSCAPE;
+        } else if ("none".equals(text)) {
+            return MraidOrientation.NONE;
+        } else {
+            throw new MraidCommandException("Invalid orientation: " + text);
+        }
+    }
+
+    private int checkRange(int value, int min, int max) throws MraidCommandException {
+        if (value < min || value > max) {
+            throw new MraidCommandException("Integer parameter out of range: " + value);
+        }
+        return value;
+    }
+
+    private boolean parseBoolean(
+            @Nullable String text, boolean defaultValue) throws MraidCommandException {
+        if (text == null) {
+            return defaultValue;
+        }
+        return parseBoolean(text);
+    }
+
+    private boolean parseBoolean(final String text) throws MraidCommandException {
+        if ("true".equals(text)) {
+            return true;
+        } else if ("false".equals(text)) {
+            return false;
+        }
+        throw new MraidCommandException("Invalid boolean parameter: " + text);
+    }
+
+    @NonNull
+    private URI parseURI(@Nullable String encodedText, URI defaultValue)
+            throws MraidCommandException {
+        if (encodedText == null) {
+            return defaultValue;
+        }
+        return parseURI(encodedText);
+    }
+
+    @NonNull
+    private URI parseURI(@Nullable String encodedText) throws MraidCommandException {
+        if (encodedText == null) {
+            throw new MraidCommandException("Parameter cannot be null");
+        }
+        try {
+            return new URI(encodedText);
+        } catch (URISyntaxException e) {
+            throw new MraidCommandException("Invalid URL parameter: " + encodedText);
+        }
+    }
+
+    void notifyViewability(boolean isViewable) {
+        injectJavaScript("mraidbridge.setIsViewable("
+                + isViewable
+                + ")");
+    }
+
+    void notifyPlacementType(PlacementType placementType) {
+        injectJavaScript("mraidbridge.setPlacementType("
+                + JSONObject.quote(placementType.toJavascriptString())
+                + ")");
+    }
+
+    void notifyViewState(ViewState state) {
+        injectJavaScript("mraidbridge.setState("
+                + JSONObject.quote(state.toJavascriptString())
+                + ")");
+    }
+
+    void notifySupports(boolean sms, boolean telephone, boolean calendar,
+            boolean storePicture, boolean inlineVideo) {
+        injectJavaScript("mraidbridge.setSupports("
+                + sms + "," + telephone + "," + calendar + "," + storePicture + "," + inlineVideo
+                + ")");
+    }
+
+    @NonNull
+    private String stringifyRect(Rect rect) {
+        return rect.left + "," + rect.top + "," + rect.width() + "," + rect.height();
+    }
+
+    @NonNull
+    private String stringifySize(Rect rect) {
+        return rect.width() + "," + rect.height();
+    }
+
+    public void notifyScreenMetrics(@NonNull final MraidScreenMetrics screenMetrics) {
+        injectJavaScript("mraidbridge.setScreenSize("
+                + stringifySize(screenMetrics.getScreenRectDips())
+                + ");mraidbridge.setMaxSize("
+                + stringifySize(screenMetrics.getRootViewRectDips())
+                + ");mraidbridge.setCurrentPosition("
+                + stringifyRect(screenMetrics.getCurrentAdRectDips())
+                + ");mraidbridge.setDefaultPosition("
+                + stringifyRect(screenMetrics.getDefaultAdRectDips())
+                + ")");
+        injectJavaScript("mraidbridge.notifySizeChangeEvent("
+                + stringifySize(screenMetrics.getCurrentAdRect())
+                + ")");
+    }
+
+    void notifyReady() {
+        injectJavaScript("mraidbridge.notifyReadyEvent();");
+    }
+
+    boolean isClicked() {
+        return mIsClicked;
+    }
+
+    boolean isVisible() {
+        return mMraidWebView != null && mMraidWebView.isVisible();
+    }
+
+    boolean isAttached() {
+        return mMraidWebView != null;
+    }
+
+    boolean isLoaded() {
+        return mHasLoaded;
+    }
+
+    @VisibleForTesting
+    MraidWebView getMraidWebView() {
+        return mMraidWebView;
+    }
+
+    @VisibleForTesting
+    void setClicked(boolean clicked) {
+        mIsClicked = clicked;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidCommandException.java b/mopub-sdk/src/main/java/com/mopub/mraid/MraidCommandException.java
new file mode 100644
index 00000000..3db8e050
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mraid/MraidCommandException.java
@@ -0,0 +1,19 @@
+package com.mopub.mraid;
+
+class MraidCommandException extends Exception {
+    MraidCommandException() {
+        super();
+    }
+
+    MraidCommandException(String detailMessage) {
+        super(detailMessage);
+    }
+
+    MraidCommandException(String detailMessage, Throwable throwable) {
+        super(detailMessage, throwable);
+    }
+
+    MraidCommandException(Throwable throwable) {
+        super(throwable);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java b/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java
new file mode 100644
index 00000000..9be3ab88
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java
@@ -0,0 +1,1103 @@
+package com.mopub.mraid;
+
+import android.annotation.TargetApi;
+import android.app.Activity;
+import android.content.BroadcastReceiver;
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.pm.ActivityInfo;
+import android.content.pm.PackageManager;
+import android.graphics.Rect;
+import android.net.Uri;
+import android.os.Build.VERSION;
+import android.os.Build.VERSION_CODES;
+import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.util.DisplayMetrics;
+import android.view.MotionEvent;
+import android.view.Surface;
+import android.view.View;
+import android.view.View.OnTouchListener;
+import android.view.ViewGroup;
+import android.view.ViewTreeObserver.OnPreDrawListener;
+import android.view.WindowManager;
+import android.webkit.ConsoleMessage;
+import android.webkit.JsResult;
+import android.webkit.WebView;
+import android.widget.FrameLayout;
+import android.widget.FrameLayout.LayoutParams;
+
+import com.mopub.common.CloseableLayout;
+import com.mopub.common.CloseableLayout.ClosePosition;
+import com.mopub.common.CloseableLayout.OnCloseListener;
+import com.mopub.common.MoPubBrowser;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.DeviceUtils;
+import com.mopub.common.util.Dips;
+import com.mopub.common.util.IntentUtils;
+import com.mopub.common.util.Views;
+import com.mopub.mobileads.AdConfiguration;
+import com.mopub.mobileads.BaseWebView;
+import com.mopub.mobileads.MraidVideoPlayerActivity;
+import com.mopub.mobileads.util.Utils;
+import com.mopub.mobileads.util.WebViews;
+import com.mopub.mraid.MraidBridge.MraidBridgeListener;
+import com.mopub.mraid.MraidBridge.MraidWebView;
+
+import java.net.URI;
+
+import static android.content.pm.ActivityInfo.CONFIG_ORIENTATION;
+import static android.content.pm.ActivityInfo.CONFIG_SCREEN_SIZE;
+import static com.mopub.common.util.Utils.bitMaskContainsFlag;
+
+public class MraidController {
+    public interface MraidListener {
+        public void onLoaded(View view);
+        public void onFailedToLoad();
+        public void onExpand();
+        public void onOpen();
+        public void onClose();
+    }
+
+    public interface UseCustomCloseListener {
+        public void useCustomCloseChanged(boolean useCustomClose);
+    }
+
+    @Nullable private Activity mActivity;
+    @NonNull private final Context mContext;
+    @NonNull private final AdConfiguration mAdConfiguration;
+    @NonNull private final PlacementType mPlacementType;
+
+    // An ad container, which contains the ad web view in default state, but is empty when expanded.
+    @NonNull private final FrameLayout mDefaultAdContainer;
+
+    // Ad ad container which contains the ad view in expanded state.
+    @NonNull private final CloseableLayout mCloseableAdContainer;
+
+    // Root view, where we'll add the expanded ad
+    @Nullable private ViewGroup mRootView;
+
+    // Helper classes for updating screen values
+    @NonNull private final ScreenMetricsWaiter mScreenMetricsWaiter;
+    @NonNull private final MraidScreenMetrics mScreenMetrics;
+
+    // Current view state
+    @NonNull private ViewState mViewState = ViewState.LOADING;
+
+    // Listeners
+    @Nullable private MraidListener mMraidListener;
+    @Nullable private UseCustomCloseListener mOnCloseButtonListener;
+    @Nullable private MraidWebViewDebugListener mDebugListener;
+
+    // The WebView which will display the ad. "Two part" creatives, loaded via handleExpand(URL)
+    // are shown in a separate web view
+    @Nullable private MraidWebView mMraidWebView;
+    @Nullable private MraidWebView mTwoPartWebView;
+
+    // A bridge to handle all interactions with the WebView HTML and Javascript.
+    @NonNull private final MraidBridge mMraidBridge;
+    @NonNull private final MraidBridge mTwoPartBridge;
+
+    @NonNull private OrientationBroadcastReceiver mOrientationBroadcastReceiver =
+            new OrientationBroadcastReceiver();
+
+    // Stores the requested orientation for the Activity to which this controller's view belongs.
+    // This is needed to restore the Activity's requested orientation in the event that the view
+    // itself requires an orientation lock.
+    @Nullable private Integer mOriginalActivityOrientation;
+
+    private boolean mAllowOrientationChange = true;
+    private MraidOrientation mForceOrientation = MraidOrientation.NONE;
+
+    private final MraidNativeCommandHandler mMraidNativeCommandHandler;
+
+    private boolean mIsPaused;
+
+    public MraidController(@NonNull Context context, @NonNull AdConfiguration adConfiguration,
+            @NonNull PlacementType placementType) {
+        this(context, adConfiguration, placementType,
+                new MraidBridge(adConfiguration, placementType),
+                new MraidBridge(adConfiguration, PlacementType.INTERSTITIAL),
+                new ScreenMetricsWaiter());
+    }
+
+    @VisibleForTesting
+    MraidController(@NonNull Context context, @NonNull AdConfiguration adConfiguration,
+            @NonNull PlacementType placementType,
+            @NonNull MraidBridge bridge, @NonNull MraidBridge twoPartBridge,
+            @NonNull ScreenMetricsWaiter screenMetricsWaiter) {
+        mContext = context;
+
+        if (mContext instanceof Activity) {
+            mActivity = (Activity) mContext;
+        }
+
+        mAdConfiguration = adConfiguration;
+        mPlacementType = placementType;
+        mMraidBridge = bridge;
+        mTwoPartBridge = twoPartBridge;
+        mScreenMetricsWaiter = screenMetricsWaiter;
+
+        mViewState = ViewState.LOADING;
+
+        DisplayMetrics displayMetrics = mContext.getResources().getDisplayMetrics();
+        mScreenMetrics = new MraidScreenMetrics(mContext, displayMetrics.density);
+        mDefaultAdContainer = new FrameLayout(mContext);
+        mCloseableAdContainer = new CloseableLayout(mContext);
+        mCloseableAdContainer.setOnCloseListener(new OnCloseListener() {
+            @Override
+            public void onClose() {
+                handleClose();
+            }
+        });
+
+        View dimmingView = new View(mContext);
+        dimmingView.setOnTouchListener(new OnTouchListener() {
+            public boolean onTouch(View v, MotionEvent event) {
+                return true;
+            }
+        });
+        mCloseableAdContainer.addView(dimmingView,
+                new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
+
+        mOrientationBroadcastReceiver.register(mContext);
+
+        mMraidBridge.setMraidBridgeListener(mMraidBridgeListener);
+        mTwoPartBridge.setMraidBridgeListener(mTwoPartBridgeListener);
+        mMraidNativeCommandHandler = new MraidNativeCommandHandler();
+    }
+
+    @SuppressWarnings("FieldCanBeLocal")
+    private final MraidBridgeListener mMraidBridgeListener = new MraidBridgeListener() {
+        @Override
+        public void onPageLoaded() {
+            handlePageLoad();
+        }
+
+        @Override
+        public void onVisibilityChanged(final boolean isVisible) {
+            // The bridge only receives visibility events if there is no 2 part covering it
+            if (!mTwoPartBridge.isAttached()) {
+                mMraidBridge.notifyViewability(isVisible);
+            }
+        }
+
+        @Override
+        public boolean onJsAlert(@NonNull final String message, @NonNull final JsResult result) {
+            return handleJsAlert(message, result);
+        }
+
+        @Override
+        public boolean onConsoleMessage(@NonNull final ConsoleMessage consoleMessage) {
+            return handleConsoleMessage(consoleMessage);
+        }
+
+        @Override
+        public void onClose() {
+            handleClose();
+        }
+
+        @Override
+        public void onResize(final int width, final int height, final int offsetX,
+                final int offsetY, @NonNull final ClosePosition closePosition,
+                final boolean allowOffscreen) throws MraidCommandException {
+            handleResize(width, height, offsetX, offsetY, closePosition, allowOffscreen);
+        }
+
+        public void onExpand(@Nullable final URI uri, final boolean shouldUseCustomClose)
+                throws MraidCommandException {
+            handleExpand(uri, shouldUseCustomClose);
+        }
+
+        @Override
+        public void onUseCustomClose(final boolean shouldUseCustomClose) {
+            handleCustomClose(shouldUseCustomClose);
+        }
+
+        @Override
+        public void onSetOrientationProperties(final boolean allowOrientationChange,
+                final MraidOrientation forceOrientation) throws MraidCommandException {
+            handleSetOrientationProperties(allowOrientationChange, forceOrientation);
+        }
+
+        @Override
+        public void onOpen(@NonNull final URI uri) {
+            handleOpen(uri.toString());
+        }
+
+        @Override
+        public void onPlayVideo(@NonNull final URI uri) {
+            handleShowVideo(uri.toString());
+        }
+    };
+
+    @SuppressWarnings("FieldCanBeLocal")
+    private final MraidBridgeListener mTwoPartBridgeListener = new MraidBridgeListener() {
+        @Override
+        public void onPageLoaded() {
+            handleTwoPartPageLoad();
+        }
+
+        @Override
+        public void onVisibilityChanged(final boolean isVisible) {
+            // The original web view must see the 2-part bridges visibility
+            mMraidBridge.notifyViewability(isVisible);
+            mTwoPartBridge.notifyViewability(isVisible);
+        }
+
+        @Override
+        public boolean onJsAlert(@NonNull final String message, @NonNull final JsResult result) {
+            return handleJsAlert(message, result);
+        }
+
+        @Override
+        public boolean onConsoleMessage(@NonNull final ConsoleMessage consoleMessage) {
+            return handleConsoleMessage(consoleMessage);
+        }
+
+        @Override
+        public void onResize(final int width, final int height, final int offsetX,
+                final int offsetY, @NonNull final ClosePosition closePosition,
+                final boolean allowOffscreen) throws MraidCommandException {
+            throw new MraidCommandException("Not allowed to resize from an expanded state");
+        }
+        
+        @Override
+        public void onExpand(@Nullable final URI uri, final boolean shouldUseCustomClose) {
+            // The MRAID spec dictates that this is ignored rather than firing an error
+        }
+
+        @Override
+        public void onClose() {
+            handleClose();
+        }
+
+        @Override
+        public void onUseCustomClose(final boolean shouldUseCustomClose) {
+            handleCustomClose(shouldUseCustomClose);
+        }
+
+        @Override
+        public void onSetOrientationProperties(final boolean allowOrientationChange,
+                final MraidOrientation forceOrientation) throws MraidCommandException {
+            handleSetOrientationProperties(allowOrientationChange, forceOrientation);
+        }
+
+        @Override
+        public void onOpen(final URI uri) {
+            handleOpen(uri.toString());
+        }
+
+        @Override
+        public void onPlayVideo(@NonNull final URI uri) {
+            handleShowVideo(uri.toString());
+        }
+    };
+
+    public void setMraidListener(@Nullable MraidListener mraidListener) {
+        mMraidListener = mraidListener;
+    }
+
+    public void setUseCustomCloseListener(@Nullable UseCustomCloseListener listener) {
+        mOnCloseButtonListener = listener;
+    }
+
+    public void setDebugListener(@Nullable MraidWebViewDebugListener debugListener) {
+        mDebugListener = debugListener;
+    }
+
+    public void loadContent(@NonNull String htmlData) {
+        Preconditions.checkState(mMraidWebView == null, "loadContent should only be called once");
+
+        mMraidWebView = new MraidWebView(mContext);
+        mMraidBridge.attachView(mMraidWebView);
+        mDefaultAdContainer.addView(mMraidWebView,
+                new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
+
+        // onPageLoaded gets fired once the html is loaded into the webView
+        mMraidBridge.setContentHtml(htmlData);
+    }
+
+    // onPageLoaded gets fired once the html is loaded into the webView.
+    private int getDisplayRotation() {
+        WindowManager wm = (WindowManager) mContext
+                .getSystemService(Context.WINDOW_SERVICE);
+        return wm.getDefaultDisplay().getRotation();
+    }
+
+    @VisibleForTesting
+    boolean handleConsoleMessage(@NonNull final ConsoleMessage consoleMessage) {
+        //noinspection SimplifiableIfStatement
+        if (mDebugListener != null) {
+            return mDebugListener.onConsoleMessage(consoleMessage);
+        }
+        return true;
+    }
+
+    @VisibleForTesting
+    boolean handleJsAlert(@NonNull final String message, @NonNull final JsResult result) {
+        if (mDebugListener != null) {
+            return mDebugListener.onJsAlert(message, result);
+        }
+        result.confirm();
+        return true;
+    }
+
+    @VisibleForTesting
+    static class ScreenMetricsWaiter {
+        static class WaitRequest {
+            @NonNull private final View[] mViews;
+            @NonNull private final Handler mHandler;
+            @Nullable private Runnable mSuccessRunnable;
+            int mWaitCount;
+
+            private WaitRequest(@NonNull Handler handler, @NonNull final View[] views) {
+                mHandler = handler;
+                mViews = views;
+            }
+
+            private void countDown() {
+                mWaitCount--;
+                if (mWaitCount == 0 && mSuccessRunnable != null) {
+                    mSuccessRunnable.run();
+                    mSuccessRunnable = null;
+                }
+            }
+
+            private final Runnable mWaitingRunnable = new Runnable() {
+                @Override
+                public void run() {
+                    for (final View view : mViews) {
+                        // Immediately count down for any views that already have a size
+                        if (view.getHeight() > 0 || view.getWidth() > 0) {
+                            countDown();
+                            continue;
+                        }
+
+                        // For views that didn't have a size, listen (once) for a preDraw. Note
+                        // that this doesn't leak because the ViewTreeObserver gets detached when
+                        // the view is no longer part of the view hierarchy.
+                        view.getViewTreeObserver().addOnPreDrawListener(new OnPreDrawListener() {
+                            @Override
+                            public boolean onPreDraw() {
+                                view.getViewTreeObserver().removeOnPreDrawListener(this);
+                                countDown();
+                                return true;
+                            }
+                        });
+                    }
+                }
+            };
+
+            void start(@NonNull Runnable successRunnable) {
+                mSuccessRunnable = successRunnable;
+                mWaitCount = mViews.length;
+                mHandler.post(mWaitingRunnable);
+            }
+
+            void cancel() {
+                mHandler.removeCallbacks(mWaitingRunnable);
+                mSuccessRunnable = null;
+            }
+        }
+
+        @NonNull private final Handler mHandler = new Handler();
+        @Nullable private WaitRequest mLastWaitRequest;
+
+        WaitRequest waitFor(@NonNull View... views) {
+            mLastWaitRequest = new WaitRequest(mHandler, views);
+            return mLastWaitRequest;
+        }
+
+        void cancelLastRequest() {
+            if (mLastWaitRequest != null) {
+                mLastWaitRequest.cancel();
+                mLastWaitRequest = null;
+            }
+        }
+    }
+
+    @Nullable
+    private View getCurrentWebView() {
+        return mTwoPartBridge.isAttached() ? mTwoPartWebView : mMraidWebView;
+    }
+
+    private boolean isInlineVideoAvailable() {
+        //noinspection SimplifiableIfStatement
+        if (mActivity == null || getCurrentWebView() == null) {
+            return false;
+        }
+
+        return mMraidNativeCommandHandler.isInlineVideoAvailable(mActivity, getCurrentWebView());
+    }
+
+    @VisibleForTesting
+    void handlePageLoad() {
+        setViewState(ViewState.DEFAULT, new Runnable() {
+            @Override
+            public void run() {
+                mMraidBridge.notifySupports(
+                        mMraidNativeCommandHandler.isSmsAvailable(mContext),
+                        mMraidNativeCommandHandler.isTelAvailable(mContext),
+                        mMraidNativeCommandHandler.isCalendarAvailable(mContext),
+                        mMraidNativeCommandHandler.isStorePictureSupported(mContext),
+                        isInlineVideoAvailable());
+                mMraidBridge.notifyPlacementType(mPlacementType);
+                mMraidBridge.notifyViewability(mMraidBridge.isVisible());
+                mMraidBridge.notifyReady();
+            }
+        });
+
+        // Call onLoaded immediately. This causes the container to get added to the view hierarchy
+        if (mMraidListener != null) {
+            mMraidListener.onLoaded(mDefaultAdContainer);
+        }
+    }
+
+    @VisibleForTesting
+    void handleTwoPartPageLoad() {
+        updateScreenMetricsAsync(new Runnable() {
+            @Override
+            public void run() {
+                mTwoPartBridge.notifySupports(
+                        mMraidNativeCommandHandler.isSmsAvailable(mContext),
+                        mMraidNativeCommandHandler.isTelAvailable(mContext),
+                        mMraidNativeCommandHandler.isCalendarAvailable(mContext),
+                        mMraidNativeCommandHandler.isStorePictureSupported(mContext),
+                        isInlineVideoAvailable());
+                mTwoPartBridge.notifyViewState(mViewState);
+                mTwoPartBridge.notifyPlacementType(mPlacementType);
+                mTwoPartBridge.notifyViewability(mTwoPartBridge.isVisible());
+                mTwoPartBridge.notifyReady();
+            }
+        });
+    }
+
+    /**
+     * Updates screen metrics, calling the successRunnable once they are available. The
+     * successRunnable will always be called asynchronously, ie on the next main thread loop.
+     */
+    private void updateScreenMetricsAsync(@Nullable final Runnable successRunnable) {
+        // Don't allow multiple metrics wait requests at once
+        mScreenMetricsWaiter.cancelLastRequest();
+
+        // Determine which web view should be used for the current ad position
+        final View currentWebView = getCurrentWebView();
+        if (currentWebView == null) {
+            return;
+        }
+
+        // Wait for the next draw pass on the default ad container and current web view
+        mScreenMetricsWaiter.waitFor(mDefaultAdContainer, currentWebView).start(
+                new Runnable() {
+                    @Override
+                    public void run() {
+                        DisplayMetrics displayMetrics = mContext.getResources().getDisplayMetrics();
+                        mScreenMetrics.setScreenSize(
+                                displayMetrics.widthPixels, displayMetrics.heightPixels);
+
+                        int[] location = new int[2];
+                        View rootView = getRootView();
+                        rootView.getLocationOnScreen(location);
+                        mScreenMetrics.setRootViewPosition(location[0], location[1],
+                                rootView.getWidth(),
+                                rootView.getHeight());
+
+                        mDefaultAdContainer.getLocationOnScreen(location);
+                        mScreenMetrics.setDefaultAdPosition(location[0], location[1],
+                                mDefaultAdContainer.getWidth(),
+                                mDefaultAdContainer.getHeight());
+
+                        currentWebView.getLocationOnScreen(location);
+                        mScreenMetrics.setCurrentAdPosition(location[0], location[1],
+                                currentWebView.getWidth(),
+                                currentWebView.getHeight());
+
+                        // Always notify both bridges of the new metrics
+                        mMraidBridge.notifyScreenMetrics(mScreenMetrics);
+                        if (mTwoPartBridge.isAttached()) {
+                            mTwoPartBridge.notifyScreenMetrics(mScreenMetrics);
+                        }
+
+                        if (successRunnable != null) {
+                            successRunnable.run();
+                        }
+                    }
+                });
+    }
+
+    void handleOrientationChange(int currentRotation) {
+        updateScreenMetricsAsync(null);
+    }
+
+    public void pause() {
+        mIsPaused = true;
+
+        // This causes an inline video to pause if there is one playing
+        if (mMraidWebView != null) {
+            WebViews.onPause(mMraidWebView);
+        }
+        if (mTwoPartWebView != null) {
+            WebViews.onPause(mTwoPartWebView);
+        }
+    }
+
+    public void resume() {
+        mIsPaused = false;
+
+        // This causes an inline video to resume if it was playing previously
+        if (mMraidWebView != null) {
+            WebViews.onResume(mMraidWebView);
+        }
+        if (mTwoPartWebView != null) {
+            WebViews.onResume(mTwoPartWebView);
+        }
+    }
+
+    public void destroy() {
+        mScreenMetricsWaiter.cancelLastRequest();
+
+        try {
+            mOrientationBroadcastReceiver.unregister();
+        } catch (IllegalArgumentException e) {
+            if (!e.getMessage().contains("Receiver not registered")) {
+                throw e;
+            } // Else ignore this exception.
+        }
+
+        // Pause the controller to make sure the video gets stopped.
+        if (!mIsPaused) {
+            pause();
+        }
+
+        // Remove the closeable ad container from the view hierarchy, if necessary
+        Views.removeFromParent(mCloseableAdContainer);
+
+        // Calling destroy eliminates a memory leak on Gingerbread devices
+        mMraidBridge.detach();
+        if (mMraidWebView != null) {
+            mMraidWebView.destroy();
+            mMraidWebView = null;
+        }
+        mTwoPartBridge.detach();
+        if (mTwoPartWebView != null) {
+            mTwoPartWebView.destroy();
+            mTwoPartWebView = null;
+        }
+    }
+
+    private void setViewState(@NonNull ViewState viewState) {
+        setViewState(viewState, null);
+    }
+
+    private void setViewState(@NonNull ViewState viewState, @Nullable Runnable successRunnable) {
+        // Make sure this is a valid transition.
+        MoPubLog.d("MRAID state set to " + viewState);
+        mViewState = viewState;
+        mMraidBridge.notifyViewState(viewState);
+
+        // Changing state notifies the two part view, but only if it's loaded
+        if (mTwoPartBridge.isLoaded()) {
+            mTwoPartBridge.notifyViewState(viewState);
+        }
+
+        if (mMraidListener != null) {
+            if (viewState == ViewState.EXPANDED) {
+                mMraidListener.onExpand();
+            } else if (viewState == ViewState.HIDDEN) {
+                mMraidListener.onClose();
+            }
+        }
+
+        updateScreenMetricsAsync(successRunnable);
+    }
+
+    int clampInt(int min, int target, int max) {
+        return Math.max(min, Math.min(target, max));
+    }
+
+    @VisibleForTesting
+    void handleResize(final int widthDips, final int heightDips, final int offsetXDips,
+            final int offsetYDips, @NonNull final ClosePosition closePosition,
+            final boolean allowOffscreen)
+            throws MraidCommandException {
+        if (mMraidWebView == null) {
+            throw new MraidCommandException("Unable to resize after the WebView is destroyed");
+        }
+
+        // The spec says that there is no effect calling resize from loaded or hidden, but that
+        // calling it from expanded should raise an error.
+        if (mViewState == ViewState.LOADING
+                || mViewState == ViewState.HIDDEN) {
+            return;
+        } else if (mViewState == ViewState.EXPANDED) {
+            throw new MraidCommandException("Not allowed to resize from an already expanded ad");
+        }
+
+        if (mPlacementType == PlacementType.INTERSTITIAL) {
+            throw new MraidCommandException("Not allowed to resize from an interstitial ad");
+        }
+
+        // Translate coordinates to px and get the resize rect
+        int width = Dips.dipsToIntPixels(widthDips, mContext);
+        int height = Dips.dipsToIntPixels(heightDips, mContext);
+        int offsetX = Dips.dipsToIntPixels(offsetXDips, mContext);
+        int offsetY = Dips.dipsToIntPixels(offsetYDips, mContext);
+        int left = mScreenMetrics.getDefaultAdRect().left + offsetX;
+        int top = mScreenMetrics.getDefaultAdRect().top + offsetY;
+        Rect resizeRect = new Rect(left, top, left + width, top + height);
+
+        if (!allowOffscreen) {
+            // Require the entire ad to be on-screen.
+            Rect bounds = mScreenMetrics.getRootViewRect();
+            if (resizeRect.width() > bounds.width() || resizeRect.height() > bounds.height()) {
+                throw new MraidCommandException("resizeProperties specified a size ("
+                        + widthDips + ", " + heightDips + ") and offset ("
+                        + offsetXDips + ", " + offsetYDips + ") that doesn't allow the ad to"
+                        + " appear within the max allowed size ("
+                        + mScreenMetrics.getRootViewRectDips().width() + ", "
+                        + mScreenMetrics.getRootViewRectDips().height() + ")");
+            }
+
+            // Offset the resize rect so that it displays on the screen
+            int newLeft = clampInt(bounds.left, resizeRect.left, bounds.right - resizeRect.width());
+            int newTop = clampInt(bounds.top, resizeRect.top, bounds.bottom - resizeRect.height());
+            resizeRect.offsetTo(newLeft, newTop);
+        }
+
+        // The entire close region must always be visible.
+        Rect closeRect = new Rect();
+        mCloseableAdContainer.applyCloseRegionBounds(closePosition, resizeRect, closeRect);
+        if (!mScreenMetrics.getRootViewRect().contains(closeRect)) {
+            throw new MraidCommandException("resizeProperties specified a size ("
+                    + widthDips + ", " + heightDips + ") and offset ("
+                    + offsetXDips + ", " + offsetYDips + ") that doesn't allow the close"
+                    + " region to appear within the max allowed size ("
+                    + mScreenMetrics.getRootViewRectDips().width() + ", "
+                    + mScreenMetrics.getRootViewRectDips().height() + ")");
+        }
+
+        if (!resizeRect.contains(closeRect)) {
+            throw new MraidCommandException("resizeProperties specified a size ("
+            + widthDips + ", " + height +") and offset ("
+            + offsetXDips + ", " + offsetYDips + ") that don't allow the close region to appear "
+            + "within the resized ad.");
+        }
+
+        // Resized ads always rely on the creative's close button (as if useCustomClose were true)
+        mCloseableAdContainer.setCloseVisible(false);
+        mCloseableAdContainer.setClosePosition(closePosition);
+
+        // Put the ad in the closeable container and resize it
+        LayoutParams layoutParams = new LayoutParams(resizeRect.width(), resizeRect.height());
+        layoutParams.leftMargin = resizeRect.left - mScreenMetrics.getRootViewRect().left;
+        layoutParams.topMargin = resizeRect.top - mScreenMetrics.getRootViewRect().top;
+        if (mViewState == ViewState.DEFAULT) {
+            mDefaultAdContainer.removeView(mMraidWebView);
+            mDefaultAdContainer.setVisibility(View.INVISIBLE);
+            mCloseableAdContainer.addView(mMraidWebView,
+                    new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
+            getRootView().addView(mCloseableAdContainer, layoutParams);
+        } else if (mViewState == ViewState.RESIZED) {
+            mCloseableAdContainer.setLayoutParams(layoutParams);
+        }
+        mCloseableAdContainer.setClosePosition(closePosition);
+
+        setViewState(ViewState.RESIZED);
+    }
+
+    void handleExpand(@Nullable URI uri, boolean shouldUseCustomClose)
+            throws MraidCommandException {
+        if (mMraidWebView == null) {
+            throw new MraidCommandException("Unable to expand after the WebView is destroyed");
+        }
+
+        if (mPlacementType == PlacementType.INTERSTITIAL) {
+            return;
+        }
+
+        if (mViewState != ViewState.DEFAULT && mViewState != ViewState.RESIZED) {
+            return;
+        }
+
+        applyOrientation();
+
+        // For two part expands, create a new web view
+        boolean isTwoPart = (uri != null);
+        if (isTwoPart) {
+            // Of note: the two part ad will start off with its view state as LOADING, and will
+            // transition to EXPANDED once the page is fully loaded
+            mTwoPartWebView = new MraidWebView(mContext);
+            mTwoPartBridge.attachView(mTwoPartWebView);
+
+            // onPageLoaded gets fired once the html is loaded into the two part webView
+            mTwoPartBridge.setContentUrl(uri.toString());
+        }
+
+        // Make sure the correct webView is in the closeable  container and make it full screen
+        LayoutParams layoutParams = new LayoutParams(
+                LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
+        if (mViewState == ViewState.DEFAULT) {
+            if (isTwoPart) {
+                mCloseableAdContainer.addView(mTwoPartWebView, layoutParams);
+            } else {
+                mDefaultAdContainer.removeView(mMraidWebView);
+                mDefaultAdContainer.setVisibility(View.INVISIBLE);
+                mCloseableAdContainer.addView(mMraidWebView, layoutParams);
+            }
+            getRootView().addView(mCloseableAdContainer,
+                    new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
+        } else if (mViewState == ViewState.RESIZED) {
+            if (isTwoPart) {
+                // Move the ad back to the original container so that when we close the
+                // resized ad, it will be in the correct place
+                mCloseableAdContainer.removeView(mMraidWebView);
+                mDefaultAdContainer.addView(mMraidWebView, layoutParams);
+                mDefaultAdContainer.setVisibility(View.INVISIBLE);
+                mCloseableAdContainer.addView(mTwoPartWebView, layoutParams);
+            }
+            // If we were resized and not 2 part, nothing to do.
+        }
+        mCloseableAdContainer.setLayoutParams(layoutParams);
+        handleCustomClose(shouldUseCustomClose);
+
+        // Update to expanded once we have new screen metrics. This won't update the two-part ad,
+        // because it is not yet loaded.
+        setViewState(ViewState.EXPANDED);
+    }
+
+    @VisibleForTesting
+    void handleClose() {
+        if (mMraidWebView == null) {
+            // Doesn't throw an exception because the ad has been destroyed
+            return;
+        }
+
+        if (mViewState == ViewState.LOADING || mViewState == ViewState.HIDDEN) {
+            return;
+        }
+
+        // Unlock the orientation before changing the view hierarchy.
+        if (mViewState == ViewState.EXPANDED || mPlacementType == PlacementType.INTERSTITIAL) {
+            unApplyOrientation();
+        }
+
+        if (mViewState == ViewState.RESIZED || mViewState == ViewState.EXPANDED) {
+            if (mTwoPartBridge.isAttached() && mTwoPartWebView != null) {
+                // If we have a two part web view, simply remove it from the closeable container
+                mCloseableAdContainer.removeView(mTwoPartWebView);
+                mTwoPartBridge.detach();
+            } else {
+                // Move the web view from the closeable container back to the default container
+                mCloseableAdContainer.removeView(mMraidWebView);
+                mDefaultAdContainer.addView(mMraidWebView, new LayoutParams(
+                        LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
+                mDefaultAdContainer.setVisibility(View.VISIBLE);
+            }
+            getRootView().removeView(mCloseableAdContainer);
+
+            // Set the view state to default
+            setViewState(ViewState.DEFAULT);
+        } else if (mViewState == ViewState.DEFAULT) {
+            mDefaultAdContainer.setVisibility(View.INVISIBLE);
+            setViewState(ViewState.HIDDEN);
+        }
+    }
+
+    @NonNull
+    @TargetApi(VERSION_CODES.KITKAT)
+    private ViewGroup getRootView() {
+        if (mRootView == null) {
+            // This method should never be called this method before the container is ready, ie before
+            // handlePageLoad.
+            if (VERSION.SDK_INT >= VERSION_CODES.KITKAT) {
+                Preconditions.checkState(mDefaultAdContainer.isAttachedToWindow());
+            }
+
+            mRootView = (ViewGroup) mDefaultAdContainer.getRootView().findViewById(
+                    android.R.id.content);
+        }
+
+        return mRootView;
+    }
+
+    @VisibleForTesting
+    void handleShowVideo(@NonNull String videoUrl) {
+        MraidVideoPlayerActivity.startMraid(mContext, videoUrl, mAdConfiguration);
+    }
+
+    @VisibleForTesting
+    void lockOrientation(final int screenOrientation) throws MraidCommandException {
+        if (mActivity == null || !shouldAllowForceOrientation(mForceOrientation)) {
+            throw new MraidCommandException("Attempted to lock orientation to unsupported value: " +
+                    mForceOrientation.name());
+        }
+
+        if (mOriginalActivityOrientation == null) {
+            mOriginalActivityOrientation = mActivity.getRequestedOrientation();
+        }
+
+        mActivity.setRequestedOrientation(screenOrientation);
+    }
+
+    @VisibleForTesting
+    void applyOrientation() throws MraidCommandException {
+        if (mForceOrientation == MraidOrientation.NONE) {
+            if (mAllowOrientationChange) {
+                // If screen orientation can be changed, an orientation of NONE means that any
+                // orientation lock should be removed
+                unApplyOrientation();
+            } else {
+                if (mActivity == null) {
+                    throw new MraidCommandException("Unable to set MRAID expand orientation to " +
+                            "'none'; expected passed in Activity Context.");
+                }
+
+                // If screen orientation cannot be changed and we can obtain the current
+                // screen orientation, locking it to the current orientation is a best effort
+                lockOrientation(DeviceUtils.getScreenOrientation(mActivity));
+            }
+        } else {
+            // Otherwise, we have a valid, non-NONE orientation. Lock the screen based on this value
+            lockOrientation(mForceOrientation.getActivityInfoOrientation());
+        }
+    }
+
+    @VisibleForTesting
+    void unApplyOrientation() {
+        if (mActivity != null && mOriginalActivityOrientation != null) {
+            mActivity.setRequestedOrientation(mOriginalActivityOrientation);
+        }
+        mOriginalActivityOrientation = null;
+    }
+
+    @TargetApi(VERSION_CODES.HONEYCOMB_MR2)
+    @VisibleForTesting
+    boolean shouldAllowForceOrientation(final MraidOrientation newOrientation) {
+        // NONE is the default and always allowed
+        if (newOrientation == MraidOrientation.NONE) {
+            return true;
+        }
+
+        // If we can't obtain an Activity context, return false
+        if (mActivity == null) {
+            return false;
+        }
+
+        final ActivityInfo activityInfo;
+        try {
+            activityInfo = mActivity.getPackageManager().getActivityInfo(
+                    new ComponentName(mActivity, mActivity.getClass()), 0);
+        } catch (PackageManager.NameNotFoundException e) {
+            return false;
+        }
+
+        // If an orientation is explicitly declared in the manifest, allow forcing this orientation
+        final int activityOrientation = activityInfo.screenOrientation;
+        if (activityOrientation != ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED) {
+            return activityOrientation == newOrientation.getActivityInfoOrientation();
+        }
+
+        // Make sure the config changes won't tear down the activity when moving to this orientation
+        // The necessary configChanges must always include "orientation"
+        boolean containsNecessaryConfigChanges =
+                bitMaskContainsFlag(activityInfo.configChanges, CONFIG_ORIENTATION);
+
+        // And on API 13+, configChanges must also include "screenSize"
+        if (VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB_MR2) {
+            containsNecessaryConfigChanges = containsNecessaryConfigChanges
+                    && bitMaskContainsFlag(activityInfo.configChanges, CONFIG_SCREEN_SIZE);
+        }
+
+        return containsNecessaryConfigChanges;
+    }
+
+    @VisibleForTesting
+    void handleCustomClose(boolean useCustomClose) {
+        boolean wasUsingCustomClose = !mCloseableAdContainer.isCloseVisible();
+        if (useCustomClose == wasUsingCustomClose) {
+            return;
+        }
+
+        mCloseableAdContainer.setCloseVisible(!useCustomClose);
+        if (mOnCloseButtonListener != null) {
+            mOnCloseButtonListener.useCustomCloseChanged(useCustomClose);
+        }
+    }
+
+    @NonNull
+    public FrameLayout getAdContainer() {
+        return mDefaultAdContainer;
+    }
+
+    /**
+     * Loads a javascript URL. Useful for running callbacks, such as javascript:webviewDidClose()
+     */
+    public void loadJavascript(@NonNull String javascript) {
+        mMraidBridge.injectJavaScript(javascript);
+    }
+
+    @VisibleForTesting
+    class OrientationBroadcastReceiver extends BroadcastReceiver {
+        @Nullable private Context mContext;
+
+        // -1 until this gets set at least once
+        private int mLastRotation = -1;
+
+        public void onReceive(Context context, Intent intent) {
+            if (mContext == null) {
+                return;
+            }
+
+            if (Intent.ACTION_CONFIGURATION_CHANGED.equals(intent.getAction())) {
+                int orientation = getDisplayRotation();
+
+                if (orientation != mLastRotation) {
+                    mLastRotation = orientation;
+                    handleOrientationChange(mLastRotation);
+                }
+            }
+        }
+
+        public void register(@NonNull final Context context) {
+            mContext = context;
+            mContext.registerReceiver(this,
+                    new IntentFilter(Intent.ACTION_CONFIGURATION_CHANGED));
+        }
+
+        public void unregister() {
+            if (mContext != null) {
+                mContext.unregisterReceiver(this);
+                mContext = null;
+            }
+        }
+    }
+
+    @NonNull
+    public Context getContext() {
+        return mContext;
+    }
+
+    @VisibleForTesting
+    void handleSetOrientationProperties(final boolean allowOrientationChange,
+            final MraidOrientation forceOrientation) throws MraidCommandException {
+        if (!shouldAllowForceOrientation(forceOrientation)) {
+            throw new MraidCommandException(
+                    "Unable to force orientation to " + forceOrientation);
+        }
+
+        mAllowOrientationChange = allowOrientationChange;
+        mForceOrientation = forceOrientation;
+
+        if (mViewState == ViewState.EXPANDED || mPlacementType == PlacementType.INTERSTITIAL) {
+            applyOrientation();
+        }
+    }
+
+    @VisibleForTesting
+    void handleOpen(@NonNull String url) {
+        MoPubLog.d("Opening url: " + url);
+
+        if (mMraidListener != null) {
+            mMraidListener.onOpen();
+        }
+
+        // this is added because http/s can also be intercepted
+        if (!isWebSiteUrl(url) && IntentUtils.canHandleApplicationUrl(mContext, url)) {
+            launchApplicationUrl(url);
+            return;
+        }
+
+        Intent i = new Intent(mContext, MoPubBrowser.class);
+        i.putExtra(MoPubBrowser.DESTINATION_URL_KEY, url);
+        i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        mContext.startActivity(i);
+    }
+
+
+    private boolean launchApplicationUrl(String url) {
+        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
+        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+
+        String errorMessage = "Unable to open intent.";
+
+        return Utils.executeIntent(mContext, intent, errorMessage);
+    }
+
+    private boolean isWebSiteUrl(@NonNull String url) {
+        return url.startsWith("http://") || url.startsWith("https://");
+    }
+
+    @VisibleForTesting
+    @Deprecated // for testing
+    @NonNull
+    ViewState getViewState() {
+        return mViewState;
+    }
+
+    @VisibleForTesting
+    @Deprecated // for testing
+    void setViewStateForTesting(@NonNull ViewState viewState) {
+        mViewState = viewState;
+    }
+
+    @VisibleForTesting
+    @Deprecated // for testing
+    @NonNull
+    CloseableLayout getExpandedAdContainer() {
+        return mCloseableAdContainer;
+    }
+
+    @VisibleForTesting
+    @Deprecated // for testing
+    void setRootView(FrameLayout rootView) {
+        mRootView = rootView;
+    }
+
+    @VisibleForTesting
+    @Deprecated // for testing
+    void setRootViewSize(int width, int height) {
+        mScreenMetrics.setRootViewPosition(0, 0, width, height);
+    }
+
+    @VisibleForTesting
+    @Deprecated // for testing
+    Integer getOriginalActivityOrientation() {
+        return mOriginalActivityOrientation;
+    }
+
+    @VisibleForTesting
+    @Deprecated // for testing
+    boolean getAllowOrientationChange() {
+        return mAllowOrientationChange;
+    }
+
+    @VisibleForTesting
+    @Deprecated // for testing
+    MraidOrientation getForceOrientation() {
+        return mForceOrientation;
+    }
+
+    @VisibleForTesting
+    @Deprecated // for testing
+    void setOrientationBroadcastReceiver(OrientationBroadcastReceiver receiver) {
+        mOrientationBroadcastReceiver = receiver;
+    }
+
+    @VisibleForTesting
+    @Deprecated // for testing
+    MraidWebView getMraidWebView() {
+        return mMraidWebView;
+    }
+
+    @VisibleForTesting
+    @Deprecated // for testing
+    MraidWebView getTwoPartWebView() {
+        return mTwoPartWebView;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mraid/MraidInterstitial.java
similarity index 55%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/MraidInterstitial.java
rename to mopub-sdk/src/main/java/com/mopub/mraid/MraidInterstitial.java
index 53ac578e..d19b9556 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/mraid/MraidInterstitial.java
@@ -1,7 +1,11 @@
-package com.mopub.mobileads;
+package com.mopub.mraid;
 
 
 import android.net.Uri;
+import android.support.annotation.NonNull;
+
+import com.mopub.mobileads.MraidActivity;
+import com.mopub.mobileads.ResponseBodyInterstitial;
 
 import java.util.Map;
 
@@ -11,17 +15,18 @@
     private String mHtmlData;
 
     @Override
-    protected void extractExtras(Map<String, String> serverExtras) {
+    protected void extractExtras(@NonNull Map<String, String> serverExtras) {
         mHtmlData = Uri.decode(serverExtras.get(HTML_RESPONSE_BODY_KEY));
     }
 
     @Override
-    protected void preRenderHtml(CustomEventInterstitialListener customEventInterstitialListener) {
+    protected void preRenderHtml(@NonNull CustomEventInterstitialListener
+            customEventInterstitialListener) {
         MraidActivity.preRenderHtml(mContext, customEventInterstitialListener, mHtmlData);
     }
 
     @Override
-    protected void showInterstitial() {
+    public void showInterstitial() {
         MraidActivity.start(mContext, mHtmlData, mAdConfiguration);
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidJavascriptCommand.java b/mopub-sdk/src/main/java/com/mopub/mraid/MraidJavascriptCommand.java
new file mode 100644
index 00000000..bb1b175e
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mraid/MraidJavascriptCommand.java
@@ -0,0 +1,70 @@
+package com.mopub.mraid;
+
+import android.support.annotation.NonNull;
+
+public enum MraidJavascriptCommand {
+    CLOSE("close"),
+    EXPAND("expand") {
+        @Override
+        boolean requiresClick(@NonNull final PlacementType placementType) {
+            return placementType == PlacementType.INLINE;
+        }
+    },
+    USE_CUSTOM_CLOSE("usecustomclose"),
+    OPEN("open") {
+        @Override
+        boolean requiresClick(@NonNull final PlacementType placementType) {
+            return true;
+        }
+    },
+    RESIZE("resize") {
+        @Override
+        boolean requiresClick(@NonNull final PlacementType placementType) {
+            return true;
+        }
+    },
+    SET_ORIENTATION_PROPERTIES("setOrientationProperties"),
+    PLAY_VIDEO("playVideo") {
+        @Override
+        boolean requiresClick(@NonNull final PlacementType placementType) {
+            return placementType == PlacementType.INLINE;
+        }
+    },
+    STORE_PICTURE("storePicture") {
+        @Override
+        boolean requiresClick(@NonNull final PlacementType placementType) {
+            return true;
+        }
+    },
+    CREATE_CALENDAR_EVENT("createCalendarEvent") {
+        @Override
+        boolean requiresClick(@NonNull final PlacementType placementType) {
+            return true;
+        }
+    },
+    UNSPECIFIED("");
+
+    @NonNull private final String mJavascriptString;
+
+    MraidJavascriptCommand(@NonNull String javascriptString) {
+        mJavascriptString = javascriptString;
+    }
+
+    static MraidJavascriptCommand fromJavascriptString(@NonNull String string) {
+        for (MraidJavascriptCommand command : MraidJavascriptCommand.values()) {
+            if (command.mJavascriptString.equals(string)) {
+                return command;
+            }
+        }
+
+        return UNSPECIFIED;
+    }
+
+    String toJavascriptString() {
+        return mJavascriptString;
+    }
+
+    boolean requiresClick(@NonNull PlacementType placementType) {
+        return false;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidNativeCommandHandler.java b/mopub-sdk/src/main/java/com/mopub/mraid/MraidNativeCommandHandler.java
new file mode 100644
index 00000000..7f7b347f
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mraid/MraidNativeCommandHandler.java
@@ -0,0 +1,581 @@
+package com.mopub.mraid;
+
+import android.annotation.TargetApi;
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.ActivityNotFoundException;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.media.MediaScannerConnection;
+import android.net.Uri;
+import android.os.AsyncTask;
+import android.os.Build.VERSION_CODES;
+import android.os.Environment;
+import android.provider.CalendarContract;
+import android.support.annotation.NonNull;
+import android.view.View;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Toast;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.AsyncTasks;
+import com.mopub.common.util.IntentUtils;
+import com.mopub.common.util.Streams;
+import com.mopub.common.util.Utils;
+import com.mopub.common.util.VersionCode;
+import com.mopub.mobileads.factories.HttpClientFactory;
+
+import org.apache.http.Header;
+import org.apache.http.HttpResponse;
+import org.apache.http.client.HttpClient;
+import org.apache.http.client.methods.HttpGet;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.net.URI;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.Locale;
+import java.util.Map;
+
+import static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;
+import static android.os.Environment.MEDIA_MOUNTED;
+import static com.mopub.common.network.HeaderUtils.extractHeader;
+import static com.mopub.common.util.ResponseHeader.LOCATION;
+
+public class MraidNativeCommandHandler {
+    interface MraidCommandFailureListener {
+        void onFailure(MraidCommandException exception);
+    }
+
+    @VisibleForTesting
+    static final String MIME_TYPE_HEADER = "Content-Type";
+
+    private static final int MAX_NUMBER_DAYS_IN_MONTH = 31;
+    private static final String[] DATE_FORMATS = {
+            "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
+            "yyyy-MM-dd'T'HH:mmZZZZZ"
+    };
+
+    public static final String ANDROID_CALENDAR_CONTENT_TYPE = "vnd.android.cursor.item/event";
+
+    void createCalendarEvent(final Context context, final Map<String, String> params)
+            throws MraidCommandException {
+        if (isCalendarAvailable(context)) {
+            try {
+                Map<String, Object> calendarParams = translateJSParamsToAndroidCalendarEventMapping(params);
+                Intent intent = new Intent(Intent.ACTION_INSERT).setType(ANDROID_CALENDAR_CONTENT_TYPE);
+                for (String key : calendarParams.keySet()) {
+                    Object value = calendarParams.get(key);
+                    if (value instanceof Long) {
+                        intent.putExtra(key, ((Long) value).longValue());
+                    } else if (value instanceof Integer) {
+                        intent.putExtra(key, ((Integer) value).intValue());
+                    } else {
+                        intent.putExtra(key, (String) value);
+                    }
+                }
+                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+                context.startActivity(intent);
+            } catch (ActivityNotFoundException e) {
+                MoPubLog.d("no calendar app installed");
+                throw new MraidCommandException(
+                        "Action is unsupported on this device - no calendar app installed");
+            } catch (IllegalArgumentException e) {
+                MoPubLog.d("create calendar: invalid parameters " + e.getMessage());
+                throw new MraidCommandException(e);
+            } catch (Exception e) {
+                MoPubLog.d("could not create calendar event");
+                throw new MraidCommandException(e);
+            }
+        } else {
+            MoPubLog.d("unsupported action createCalendarEvent for devices pre-ICS");
+            throw new MraidCommandException("Action is " +
+                    "unsupported on this device (need Android version Ice Cream Sandwich or " +
+                    "above)");
+        }
+    }
+
+    void storePicture(@NonNull final Context context,
+            @NonNull final String imageUrl,
+            @NonNull MraidCommandFailureListener failureListener) throws MraidCommandException {
+        if (!isStorePictureSupported(context)) {
+            MoPubLog.d("Error downloading file - the device does not have an SD card mounted, or " +
+                    "the Android permission is not granted.");
+            throw new MraidCommandException("Error downloading file " +
+                    " - the device does not have an SD card mounted, " +
+                    "or the Android permission is not granted.");
+        }
+
+        if (context instanceof Activity) {
+            showUserDialog(context, imageUrl, failureListener);
+        } else {
+            Toast.makeText(context, "Downloading image to Picture gallery...", Toast.LENGTH_SHORT).show();
+            downloadImage(context, imageUrl, failureListener);
+        }
+    }
+
+    boolean isTelAvailable(Context context) {
+        Intent telIntent = new Intent(Intent.ACTION_DIAL);
+        telIntent.setData(Uri.parse("tel:"));
+
+        return IntentUtils.deviceCanHandleIntent(context, telIntent);
+    }
+
+    boolean isSmsAvailable(Context context) {
+        Intent smsIntent = new Intent(Intent.ACTION_VIEW);
+        smsIntent.setData(Uri.parse("sms:"));
+
+        return IntentUtils.deviceCanHandleIntent(context, smsIntent);
+    }
+
+    public boolean isStorePictureSupported(Context context) {
+        return MEDIA_MOUNTED.equals(Environment.getExternalStorageState())
+                && context.checkCallingOrSelfPermission(WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
+    }
+
+    boolean isCalendarAvailable(Context context) {
+        Intent calendarIntent = new Intent(Intent.ACTION_INSERT).setType(ANDROID_CALENDAR_CONTENT_TYPE);
+
+        return VersionCode.currentApiLevel().isAtLeast(VersionCode.ICE_CREAM_SANDWICH)
+                && IntentUtils.deviceCanHandleIntent(context, calendarIntent);
+    }
+
+    /**
+     * Inline video support was added in 3.1. Returns true if the activity has hardware acceleration
+     * enabled in its foreground window and only if the View or any ParentView in the view tree
+     * has not had hardware acceleration explicitly turned off.
+     */
+    // TargetApi is needed to access hardware accelerated flags
+    @TargetApi(11)
+    boolean isInlineVideoAvailable(@NonNull Activity activity, @NonNull View view) {
+        // In addition to potential hardware acceleration problems, there is a problem in the WebKit
+        // HTML5VideoView implementation pre-Gingerbread that would result in HTML5VideoViewProxy
+        // holding on to an instance of the WebView even after the WebView is destroyed. For
+        // this reason, we never allow inline video on Gingerbread devices.
+        if (VersionCode.currentApiLevel().isBelow(VersionCode.HONEYCOMB_MR1)) {
+            return false;
+        }
+
+        // Hardware Acceleration
+        // Hardware acceleration for the application and activity is enabled by default
+        // in API >= 14 (Ice Cream Sandwich)
+        // http://developer.android.com/reference/android/R.attr.html#hardwareAccelerated
+        // http://developer.android.com/guide/topics/graphics/hardware-accel.html
+
+        // HTML5 Inline Video
+        // http://developer.android.com/about/versions/android-3.1.html
+
+        // Traverse up the View tree to determine if any views are being software rendered
+        // You can only disable hardware acceleration at the view level by setting the layer type
+        View tempView = view;
+        while (true) {
+            // View#isHardwareAccelerated does not reflect the layer type used to render the view
+            // therefore we have to check for both
+            if (!tempView.isHardwareAccelerated()
+                    || Utils.bitMaskContainsFlag(tempView.getLayerType(), View.LAYER_TYPE_SOFTWARE)) {
+                return false;
+            }
+
+            // If parent is not a view or parent is null then break
+            if (!(tempView.getParent() instanceof View)) {
+                break;
+            }
+
+            tempView = (View)tempView.getParent();
+        }
+
+        // Has hardware acceleration been enabled in the current window?
+        // Hardware acceleration can only be enabled for a window, not disabled
+        // This flag is automatically set by the system if the android:hardwareAccelerated
+        // XML attribute is set to true on an activity or on the application.
+        // http://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_HARDWARE_ACCELERATED
+        Window window = activity.getWindow();
+        if (window != null) {
+            if (Utils.bitMaskContainsFlag(window.getAttributes().flags,
+                    WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED)) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    @TargetApi(VERSION_CODES.ICE_CREAM_SANDWICH)
+    private Map<String, Object> translateJSParamsToAndroidCalendarEventMapping(Map<String, String> params) {
+        Map<String, Object> validatedParamsMapping = new HashMap<String, Object>();
+        if (!params.containsKey("description") || !params.containsKey("start")) {
+            throw new IllegalArgumentException("Missing start and description fields");
+        }
+
+        validatedParamsMapping.put(CalendarContract.Events.TITLE, params.get("description"));
+
+        if (params.containsKey("start") && params.get("start") != null) {
+            Date startDateTime = parseDate(params.get("start"));
+            if (startDateTime != null) {
+                validatedParamsMapping.put(CalendarContract.EXTRA_EVENT_BEGIN_TIME, startDateTime.getTime());
+            } else {
+                throw new IllegalArgumentException("Invalid calendar event: start time is malformed. Date format expecting (yyyy-MM-DDTHH:MM:SS-xx:xx) or (yyyy-MM-DDTHH:MM-xx:xx) i.e. 2013-08-14T09:00:01-08:00");
+            }
+        } else {
+            throw new IllegalArgumentException("Invalid calendar event: start is null.");
+        }
+
+        if (params.containsKey("end") && params.get("end") != null) {
+            Date endDateTime = parseDate(params.get("end"));
+            if (endDateTime != null) {
+                validatedParamsMapping.put(CalendarContract.EXTRA_EVENT_END_TIME, endDateTime.getTime());
+            } else {
+                throw new IllegalArgumentException("Invalid calendar event: end time is malformed. Date format expecting (yyyy-MM-DDTHH:MM:SS-xx:xx) or (yyyy-MM-DDTHH:MM-xx:xx) i.e. 2013-08-14T09:00:01-08:00");
+            }
+        }
+
+        if (params.containsKey("location")) {
+            validatedParamsMapping.put(CalendarContract.Events.EVENT_LOCATION, params.get("location"));
+        }
+
+        if (params.containsKey("summary")) {
+            validatedParamsMapping.put(CalendarContract.Events.DESCRIPTION, params.get("summary"));
+        }
+
+        if (params.containsKey("transparency")) {
+            validatedParamsMapping.put(
+                    CalendarContract.Events.AVAILABILITY,
+                    params.get("transparency").equals("transparent") ?
+                            CalendarContract.Events.AVAILABILITY_FREE :
+                            CalendarContract.Events.AVAILABILITY_BUSY
+            );
+        }
+
+        validatedParamsMapping.put(CalendarContract.Events.RRULE, parseRecurrenceRule(params));
+
+        return validatedParamsMapping;
+    }
+
+    private Date parseDate(String dateTime) {
+        Date result = null;
+        for (final String DATE_FORMAT : DATE_FORMATS) {
+            try {
+                result = new SimpleDateFormat(DATE_FORMAT, Locale.US).parse(dateTime);
+                if (result != null) {
+                    break;
+                }
+            } catch (ParseException e) {
+                // an exception is okay, just try the next format and find the first one that works
+            }
+        }
+        return result;
+    }
+
+    private String parseRecurrenceRule(Map<String, String> params) throws IllegalArgumentException {
+        StringBuilder rule = new StringBuilder();
+        if (params.containsKey("frequency")) {
+            String frequency = params.get("frequency");
+            int interval = -1;
+            if (params.containsKey("interval")) {
+                interval = Integer.parseInt(params.get("interval"));
+            }
+            if ("daily".equals(frequency)) {
+                rule.append("FREQ=DAILY;");
+                if (interval != -1) {
+                    rule.append("INTERVAL=" + interval + ";");
+                }
+            } else if ("weekly".equals(frequency)) {
+                rule.append("FREQ=WEEKLY;");
+                if (interval != -1) {
+                    rule.append("INTERVAL=" + interval + ";");
+                }
+                if (params.containsKey("daysInWeek")) {
+                    String weekdays = translateWeekIntegersToDays(params.get("daysInWeek"));
+                    if (weekdays == null) {
+                        throw new IllegalArgumentException("invalid ");
+                    }
+                    rule.append("BYDAY=" + weekdays + ";");
+                }
+            } else if ("monthly".equals(frequency)) {
+                rule.append("FREQ=MONTHLY;");
+                if (interval != -1) {
+                    rule.append("INTERVAL=" + interval + ";");
+                }
+                if (params.containsKey("daysInMonth")) {
+                    String monthDays = translateMonthIntegersToDays(params.get("daysInMonth"));
+                    if (monthDays == null) {
+                        throw new IllegalArgumentException();
+                    }
+                    rule.append("BYMONTHDAY=" + monthDays + ";");
+                }
+            } else {
+                throw new IllegalArgumentException("frequency is only supported for daily, weekly, and monthly.");
+            }
+        }
+        return rule.toString();
+    }
+
+    private String translateWeekIntegersToDays(String expression) throws IllegalArgumentException {
+        StringBuilder daysResult = new StringBuilder();
+        boolean[] daysAlreadyCounted = new boolean[7];
+        String[] days = expression.split(",");
+        int dayNumber;
+        for (final String day : days) {
+            dayNumber = Integer.parseInt(day);
+            dayNumber = dayNumber == 7 ? 0 : dayNumber;
+            if (!daysAlreadyCounted[dayNumber]) {
+                daysResult.append(dayNumberToDayOfWeekString(dayNumber) + ",");
+                daysAlreadyCounted[dayNumber] = true;
+            }
+        }
+        if (days.length == 0) {
+            throw new IllegalArgumentException("must have at least 1 day of the week if specifying repeating weekly");
+        }
+        daysResult.deleteCharAt(daysResult.length() - 1);
+        return daysResult.toString();
+    }
+
+    private String translateMonthIntegersToDays(String expression) throws IllegalArgumentException {
+        StringBuilder daysResult = new StringBuilder();
+        boolean[] daysAlreadyCounted = new boolean[2 * MAX_NUMBER_DAYS_IN_MONTH + 1]; //for -31 to 31
+        String[] days = expression.split(",");
+        int dayNumber;
+        for (final String day : days) {
+            dayNumber = Integer.parseInt(day);
+            if (!daysAlreadyCounted[dayNumber + MAX_NUMBER_DAYS_IN_MONTH]) {
+                daysResult.append(dayNumberToDayOfMonthString(dayNumber) + ",");
+                daysAlreadyCounted[dayNumber + MAX_NUMBER_DAYS_IN_MONTH] = true;
+            }
+        }
+        if (days.length == 0) {
+            throw new IllegalArgumentException("must have at least 1 day of the month if specifying repeating weekly");
+        }
+        daysResult.deleteCharAt(daysResult.length() - 1);
+        return daysResult.toString();
+    }
+
+    private String dayNumberToDayOfWeekString(int number) throws IllegalArgumentException {
+        String dayOfWeek;
+        switch (number) {
+            case 0:
+                dayOfWeek = "SU";
+                break;
+            case 1:
+                dayOfWeek = "MO";
+                break;
+            case 2:
+                dayOfWeek = "TU";
+                break;
+            case 3:
+                dayOfWeek = "WE";
+                break;
+            case 4:
+                dayOfWeek = "TH";
+                break;
+            case 5:
+                dayOfWeek = "FR";
+                break;
+            case 6:
+                dayOfWeek = "SA";
+                break;
+            default:
+                throw new IllegalArgumentException("invalid day of week " + number);
+        }
+        return dayOfWeek;
+    }
+
+    private String dayNumberToDayOfMonthString(int number) throws IllegalArgumentException {
+        String dayOfMonth;
+        // https://android.googlesource.com/platform/frameworks/opt/calendar/+/504844526f1b7afec048c6d2976ffb332670d5ba/src/com/android/calendarcommon2/EventRecurrence.java
+        if (number != 0 && number >= -MAX_NUMBER_DAYS_IN_MONTH && number <= MAX_NUMBER_DAYS_IN_MONTH) {
+            dayOfMonth = "" + number;
+        } else {
+            throw new IllegalArgumentException("invalid day of month " + number);
+        }
+        return dayOfMonth;
+    }
+
+    void downloadImage(final Context context, final String uriString,
+            final MraidCommandFailureListener failureListener) {
+        final DownloadImageAsyncTask downloadImageAsyncTask = new DownloadImageAsyncTask(context,
+                new DownloadImageAsyncTask.DownloadImageAsyncTaskListener() {
+                    @Override
+                    public void onSuccess() {
+                        MoPubLog.d("Image successfully saved.");
+                    }
+
+                    @Override
+                    public void onFailure() {
+                        Toast.makeText(context, "Image failed to download.", Toast.LENGTH_SHORT).show();
+                        MoPubLog.d("Error downloading and saving image file.");
+                        failureListener.onFailure(new MraidCommandException("Error " +
+                                "downloading and saving image file."));
+                    }
+                });
+        AsyncTasks.safeExecuteOnExecutor(downloadImageAsyncTask, uriString);
+    }
+
+    private void showUserDialog(final Context context, final String imageUrl,
+            final MraidCommandFailureListener failureListener) {
+        AlertDialog.Builder alertDialogDownloadImage = new AlertDialog.Builder(context);
+        alertDialogDownloadImage
+                .setTitle("Save Image")
+                .setMessage("Download image to Picture gallery?")
+                .setNegativeButton("Cancel", null)
+                .setPositiveButton("Okay", new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        downloadImage(context, imageUrl, failureListener);
+                    }
+                })
+                .setCancelable(true)
+                .show();
+    }
+
+    private static class DownloadImageAsyncTask extends AsyncTask<String, Void, Boolean> {
+        interface DownloadImageAsyncTaskListener {
+            void onSuccess();
+
+            void onFailure();
+        }
+
+        private final Context mContext;
+        private final DownloadImageAsyncTaskListener mListener;
+
+        public DownloadImageAsyncTask(@NonNull final Context context,
+                @NonNull final DownloadImageAsyncTaskListener listener) {
+            super();
+            mContext = context.getApplicationContext();
+            mListener = listener;
+        }
+
+        @Override
+        protected Boolean doInBackground(@NonNull String[] params) {
+            Preconditions.checkState(params.length > 0);
+            Preconditions.checkNotNull(params[0]);
+
+            final File pictureStoragePath = getPictureStoragePath();
+
+            //noinspection ResultOfMethodCallIgnored
+            pictureStoragePath.mkdirs();
+
+            final String uriString = params[0];
+            URI uri = URI.create(uriString);
+
+            final HttpClient httpClient = HttpClientFactory.create();
+            final HttpGet httpGet = new HttpGet(uri);
+
+            InputStream pictureInputStream = null;
+            OutputStream pictureOutputStream = null;
+            try {
+                final HttpResponse httpResponse = httpClient.execute(httpGet);
+                pictureInputStream = httpResponse.getEntity().getContent();
+
+                final String redirectLocation = extractHeader(httpResponse, LOCATION);
+                if (redirectLocation != null) {
+                    uri = URI.create(redirectLocation);
+                }
+
+                final String pictureFileName = getFileNameForUriAndHttpResponse(uri, httpResponse);
+                final File pictureFile = new File(pictureStoragePath, pictureFileName);
+                pictureOutputStream = new FileOutputStream(pictureFile);
+                Streams.copyContent(pictureInputStream, pictureOutputStream);
+
+                final String pictureFileFullPath = pictureFile.toString();
+                loadPictureIntoGalleryApp(pictureFileFullPath);
+
+                return true;
+            } catch (IOException e) {
+                return false;
+            } finally {
+                Streams.closeStream(pictureInputStream);
+                Streams.closeStream(pictureOutputStream);
+            }
+        }
+
+        @Override
+        protected void onPostExecute(final Boolean success) {
+            if (success != null && success) {
+                mListener.onSuccess();
+            } else {
+                mListener.onFailure();
+            }
+        }
+
+        private String getFileNameForUriAndHttpResponse(final URI uri, final HttpResponse response) {
+            final String path = uri.getPath();
+
+            if (path == null) {
+                return null;
+            }
+
+            String filename = new File(path).getName();
+
+            Header header = response.getFirstHeader(MIME_TYPE_HEADER);
+            if (header != null) {
+                String[] fields = header.getValue().split(";");
+                for (final String field : fields) {
+                    String extension;
+                    if (field.contains("image/")) {
+                        extension = "." + field.split("/")[1];
+                        if (!filename.endsWith(extension)) {
+                            filename += extension;
+                        }
+                        break;
+                    }
+                }
+            }
+
+            return filename;
+        }
+
+        private File getPictureStoragePath() {
+            return new File(Environment.getExternalStorageDirectory(), "Pictures");
+        }
+
+        private void loadPictureIntoGalleryApp(final String filename) {
+            MoPubMediaScannerConnectionClient mediaScannerConnectionClient =
+                    new MoPubMediaScannerConnectionClient(filename, null);
+            final MediaScannerConnection mediaScannerConnection =
+                    new MediaScannerConnection(mContext, mediaScannerConnectionClient);
+            mediaScannerConnectionClient.setMediaScannerConnection(mediaScannerConnection);
+            mediaScannerConnection.connect();
+        }
+    }
+
+    private static class MoPubMediaScannerConnectionClient
+            implements MediaScannerConnection.MediaScannerConnectionClient {
+        private final String mFilename;
+        private final String mMimeType;
+        private MediaScannerConnection mMediaScannerConnection;
+
+        private MoPubMediaScannerConnectionClient(String filename, String mimeType) {
+            mFilename = filename;
+            mMimeType = mimeType;
+        }
+
+        private void setMediaScannerConnection(MediaScannerConnection connection) {
+            mMediaScannerConnection = connection;
+        }
+
+        @Override
+        public void onMediaScannerConnected() {
+            if (mMediaScannerConnection != null) {
+                mMediaScannerConnection.scanFile(mFilename, mMimeType);
+            }
+        }
+
+        @Override
+        public void onScanCompleted(String path, Uri uri) {
+            if (mMediaScannerConnection != null) {
+                mMediaScannerConnection.disconnect();
+            }
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidOrientation.java b/mopub-sdk/src/main/java/com/mopub/mraid/MraidOrientation.java
new file mode 100644
index 00000000..5b2bdb56
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mraid/MraidOrientation.java
@@ -0,0 +1,19 @@
+package com.mopub.mraid;
+
+import android.content.pm.ActivityInfo;
+
+enum MraidOrientation {
+    PORTRAIT(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT),
+    LANDSCAPE(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE),
+    NONE(ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED);
+
+    private final int mActivityInfoOrientation;
+
+    MraidOrientation(final int activityInfoOrientation) {
+        mActivityInfoOrientation = activityInfoOrientation;
+    }
+
+    int getActivityInfoOrientation() {
+        return mActivityInfoOrientation;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidScreenMetrics.java b/mopub-sdk/src/main/java/com/mopub/mraid/MraidScreenMetrics.java
new file mode 100644
index 00000000..972a0577
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mraid/MraidScreenMetrics.java
@@ -0,0 +1,118 @@
+package com.mopub.mraid;
+
+import android.content.Context;
+import android.graphics.Rect;
+import android.support.annotation.NonNull;
+
+import com.mopub.common.util.Dips;
+
+/**
+ * Screen metrics needed by the MRAID container.
+ *
+ * Each rectangle is stored using both it's original and scaled coordinates to avoid allocating
+ * extra memory that would otherwise be needed to do these conversions.
+ */
+class MraidScreenMetrics {
+    @NonNull private final Context mContext;
+    @NonNull private final Rect mScreenRect;
+    @NonNull private final Rect mScreenRectDips;
+
+    @NonNull private final Rect mRootViewRect;
+    @NonNull private final Rect mRootViewRectDips;
+
+    @NonNull private final Rect mCurrentAdRect;
+    @NonNull private final Rect mCurrentAdRectDips;
+
+    @NonNull private final Rect mDefaultAdRect;
+    @NonNull private final Rect mDefaultAdRectDips;
+
+    private final float mDensity;
+
+    MraidScreenMetrics(Context context, float density) {
+        mContext = context.getApplicationContext();
+        mDensity = density;
+
+        mScreenRect = new Rect();
+        mScreenRectDips = new Rect();
+
+        mRootViewRect = new Rect();
+        mRootViewRectDips = new Rect();
+
+        mCurrentAdRect = new Rect();
+        mCurrentAdRectDips = new Rect();
+
+        mDefaultAdRect = new Rect();
+        mDefaultAdRectDips = new Rect();
+    }
+
+    private void convertToDips(Rect sourceRect, Rect outRect) {
+        outRect.set(Dips.pixelsToIntDips(sourceRect.left, mContext),
+                Dips.pixelsToIntDips(sourceRect.top, mContext),
+                Dips.pixelsToIntDips(sourceRect.right, mContext),
+                Dips.pixelsToIntDips(sourceRect.bottom, mContext));
+    }
+
+    public float getDensity() {
+        return mDensity;
+    }
+
+    void setScreenSize(int width, int height) {
+        mScreenRect.set(0, 0, width, height);
+        convertToDips(mScreenRect, mScreenRectDips);
+    }
+
+    @NonNull
+    Rect getScreenRect() {
+        return mScreenRect;
+    }
+
+    @NonNull
+    Rect getScreenRectDips() {
+        return mScreenRectDips;
+    }
+
+    void setRootViewPosition(int x, int y, int width, int height) {
+        mRootViewRect.set(x, y, x + width, y + height);
+        convertToDips(mRootViewRect, mRootViewRectDips);
+    }
+
+    @NonNull
+    Rect getRootViewRect() {
+        return mRootViewRect;
+    }
+
+    @NonNull
+    Rect getRootViewRectDips() {
+        return mRootViewRectDips;
+    }
+
+    void setCurrentAdPosition(int x, int y, int width, int height) {
+        mCurrentAdRect.set(x, y, x + width, y + height);
+        convertToDips(mCurrentAdRect, mCurrentAdRectDips);
+    }
+
+    @NonNull
+    Rect getCurrentAdRect() {
+        return mCurrentAdRect;
+    }
+
+    @NonNull
+    Rect getCurrentAdRectDips() {
+        return mCurrentAdRectDips;
+    }
+
+    void setDefaultAdPosition(int x, int y, int width, int height) {
+        mDefaultAdRect.set(x, y, x + width, y + height);
+        convertToDips(mDefaultAdRect, mDefaultAdRectDips);
+    }
+
+    @NonNull
+    Rect getDefaultAdRect() {
+        return mDefaultAdRect;
+    }
+
+    @NonNull
+    Rect getDefaultAdRectDips() {
+        return mDefaultAdRectDips;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoViewController.java b/mopub-sdk/src/main/java/com/mopub/mraid/MraidVideoViewController.java
similarity index 82%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoViewController.java
rename to mopub-sdk/src/main/java/com/mopub/mraid/MraidVideoViewController.java
index 06111b88..2ae9c15e 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mraid/MraidVideoViewController.java
@@ -1,4 +1,4 @@
-package com.mopub.mobileads;
+package com.mopub.mraid;
 
 import android.content.Context;
 import android.graphics.drawable.StateListDrawable;
@@ -8,7 +8,9 @@
 import android.widget.ImageButton;
 import android.widget.RelativeLayout;
 import android.widget.VideoView;
+
 import com.mopub.common.util.Dips;
+import com.mopub.mobileads.BaseVideoViewController;
 
 import static android.view.View.GONE;
 import static android.view.View.OnClickListener;
@@ -26,7 +28,7 @@
     private int mButtonPadding;
     private int mButtonSize;
 
-    MraidVideoViewController(final Context context, final Bundle bundle, final long broadcastIdentifier, final BaseVideoViewControllerListener baseVideoViewControllerListener) {
+    public MraidVideoViewController(final Context context, final Bundle bundle, final long broadcastIdentifier, final BaseVideoViewControllerListener baseVideoViewControllerListener) {
         super(context, broadcastIdentifier, baseVideoViewControllerListener);
 
         mVideoView = new VideoView(context);
@@ -52,7 +54,7 @@ public boolean onError(MediaPlayer mediaPlayer, int what, int extra) {
     }
 
     @Override
-    void onCreate() {
+    protected void onCreate() {
         super.onCreate();
         mButtonSize = Dips.asIntPixels(CLOSE_BUTTON_SIZE, getContext());
         mButtonPadding = Dips.asIntPixels(CLOSE_BUTTON_PADDING, getContext());
@@ -62,25 +64,28 @@ void onCreate() {
     }
 
     @Override
-    VideoView getVideoView() {
+    protected VideoView getVideoView() {
         return mVideoView;
     }
 
     @Override
-    void onDestroy() {}
+    protected void onDestroy() {}
 
     @Override
-    void onPause() {}
+    protected void onPause() {}
 
     @Override
-    void onResume() {}
+    protected void onResume() {}
 
     private void createInterstitialCloseButton() {
         mCloseButton = new ImageButton(getContext());
         StateListDrawable states = new StateListDrawable();
-        states.addState(new int[] {-android.R.attr.state_pressed}, INTERSTITIAL_CLOSE_BUTTON_NORMAL.decodeImage(getContext()));
-        states.addState(new int[] {android.R.attr.state_pressed}, INTERSTITIAL_CLOSE_BUTTON_PRESSED.decodeImage(getContext()));
+        states.addState(new int[] {-android.R.attr.state_pressed}, INTERSTITIAL_CLOSE_BUTTON_NORMAL.createDrawable(
+                getContext()));
+        states.addState(new int[] {android.R.attr.state_pressed}, INTERSTITIAL_CLOSE_BUTTON_PRESSED.createDrawable(
+                getContext()));
         mCloseButton.setImageDrawable(states);
+        //noinspection deprecation
         mCloseButton.setBackgroundDrawable(null);
         mCloseButton.setOnClickListener(new OnClickListener() {
             public void onClick(View v) {
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidWebViewDebugListener.java b/mopub-sdk/src/main/java/com/mopub/mraid/MraidWebViewDebugListener.java
new file mode 100644
index 00000000..5d1d92c6
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mraid/MraidWebViewDebugListener.java
@@ -0,0 +1,25 @@
+package com.mopub.mraid;
+
+import android.support.annotation.NonNull;
+import android.webkit.ConsoleMessage;
+import android.webkit.JsResult;
+import android.webkit.WebChromeClient;
+import android.webkit.WebView;
+
+import com.mopub.common.VisibleForTesting;
+
+/**
+ * Debugging callback interface to make it easier for integration tests to debug MRAID ads.
+ */
+@VisibleForTesting
+public interface MraidWebViewDebugListener {
+    /**
+     * @see WebChromeClient#onJsAlert(WebView, String, String, JsResult)
+     */
+    boolean onJsAlert(@NonNull String message, @NonNull JsResult result);
+
+    /**
+     * @see WebChromeClient#onConsoleMessage(ConsoleMessage)
+     */
+    boolean onConsoleMessage(@NonNull ConsoleMessage consoleMessage);
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/PlacementType.java b/mopub-sdk/src/main/java/com/mopub/mraid/PlacementType.java
new file mode 100644
index 00000000..5d43c066
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mraid/PlacementType.java
@@ -0,0 +1,12 @@
+package com.mopub.mraid;
+
+import java.util.Locale;
+
+public enum PlacementType {
+    INLINE,
+    INTERSTITIAL;
+
+    String toJavascriptString() {
+        return toString().toLowerCase(Locale.US);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/ViewState.java b/mopub-sdk/src/main/java/com/mopub/mraid/ViewState.java
new file mode 100644
index 00000000..40fc1cef
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mraid/ViewState.java
@@ -0,0 +1,15 @@
+package com.mopub.mraid;
+
+import java.util.Locale;
+
+public enum ViewState {
+    LOADING,
+    DEFAULT,
+    RESIZED,
+    EXPANDED,
+    HIDDEN;
+
+    public String toJavascriptString() {
+        return toString().toLowerCase(Locale.US);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/AdapterHelper.java b/mopub-sdk/src/main/java/com/mopub/nativeads/AdapterHelper.java
index 6cc0ca94..765cf167 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/AdapterHelper.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/AdapterHelper.java
@@ -2,9 +2,13 @@
 
 import android.app.Activity;
 import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.view.View;
 import android.view.ViewGroup;
 
+import com.mopub.common.Preconditions;
+import com.mopub.common.Preconditions.NoThrow;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 
@@ -18,22 +22,17 @@
  */
 @Deprecated
 public final class AdapterHelper {
-    private final WeakReference<Activity> mActivity;
-    private final Context mApplicationContext;
+    @NonNull private final WeakReference<Activity> mActivity;
+    @NonNull private final Context mApplicationContext;
     private final int mStart;
     private final int mInterval;
 
     @Deprecated
-    public AdapterHelper(final Context context, final int start, final int interval) throws IllegalArgumentException {
-        if (context == null) {
-            throw new IllegalArgumentException("Illegal argument: Context was null.");
-        } else if (!(context instanceof Activity)) {
-            throw new IllegalArgumentException("Illegal argument: Context must be instance of Activity.");
-        } else if (start < 0) {
-            throw new IllegalArgumentException("Illegal argument: negative starting position.");
-        } else if (interval < 2) {
-            throw new IllegalArgumentException("Illegal argument: interval must be at least 2.");
-        }
+    public AdapterHelper(@NonNull final Context context, final int start, final int interval) {
+        Preconditions.checkNotNull(context, "Context cannot be null.");
+        Preconditions.checkArgument(context instanceof Activity, "Context must be an Activity.");
+        Preconditions.checkArgument(start >= 0, "start position must be non-negative");
+        Preconditions.checkArgument(interval >= 2, "interval must be at least 2");
 
         mActivity = new WeakReference<Activity>((Activity) context);
         mApplicationContext = context.getApplicationContext();
@@ -42,25 +41,30 @@ public AdapterHelper(final Context context, final int start, final int interval)
     }
 
     @Deprecated
-    public View getAdView(final View convertView,
-            final ViewGroup parent,
-            final NativeResponse nativeResponse,
-            final ViewBinder viewBinder,
-            final MoPubNativeListener moPubNativeListener) {
+    @NonNull
+    public View getAdView(@Nullable final View convertView,
+            @Nullable final ViewGroup parent,
+            @NonNull final NativeResponse nativeResponse,
+            @NonNull final ViewBinder viewBinder,
+            @Nullable @SuppressWarnings("unused") final MoPubNativeListener moPubNativeListener) {
         final Activity activity = mActivity.get();
         if (activity == null) {
-            MoPubLog.d("Weak reference to Activity Context in AdapterHelper became null. " +
-                    "Returning empty view.");
+            MoPubLog.w("Weak reference to Activity Context in"
+                    + " AdapterHelper became null. Returning empty view.");
             return new View(mApplicationContext);
         }
 
+        if (!NoThrow.checkNotNull(nativeResponse, "NativeResponse is null. Returning an empty view")
+                || !NoThrow.checkNotNull(viewBinder, "ViewBinder is null. Returning empty view")) {
+            return new View(activity);
+        }
+
         return NativeAdViewHelper.getAdView(
                 convertView,
                 parent,
                 activity,
                 nativeResponse,
-                viewBinder,
-                moPubNativeListener
+                viewBinder
         );
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/BaseForwardingNativeAd.java b/mopub-sdk/src/main/java/com/mopub/nativeads/BaseForwardingNativeAd.java
index 9f5b58cf..c16be5cc 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/BaseForwardingNativeAd.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/BaseForwardingNativeAd.java
@@ -2,8 +2,11 @@
 
 import android.content.Context;
 import android.graphics.Bitmap;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.view.View;
 
+import com.mopub.common.Preconditions.NoThrow;
 import com.mopub.common.logging.MoPubLog;
 
 import java.util.HashMap;
@@ -22,26 +25,26 @@
         public void onAdImpressed();
         public void onAdClicked();
     }
-    private NativeEventListener mNativeEventListener;
+    @Nullable private NativeEventListener mNativeEventListener;
 
     static final double MIN_STAR_RATING = 0;
     static final double MAX_STAR_RATING = 5;
 
     // Basic fields
-    private String mMainImageUrl;
-    private String mIconImageUrl;
-    private String mClickDestinationUrl;
-    private String mCallToAction;
-    private String mTitle;
-    private String mText;
-    private Double mStarRating;
+    @Nullable private String mMainImageUrl;
+    @Nullable private String mIconImageUrl;
+    @Nullable private String mClickDestinationUrl;
+    @Nullable private String mCallToAction;
+    @Nullable private String mTitle;
+    @Nullable private String mText;
+    @Nullable private Double mStarRating;
 
     // Impression logistics
-    private final Set<String> mImpressionTrackers;
+    @NonNull private final Set<String> mImpressionTrackers;
     private int mImpressionMinTimeViewed;
 
     // Extras
-    private final Map<String, Object> mExtras;
+    @NonNull private final Map<String, Object> mExtras;
 
     // Event Logistics
     private boolean mIsOverridingClickTracker;
@@ -58,6 +61,7 @@
     /**
      * Returns the String url corresponding to the ad's main image.
      */
+    @Nullable
     @Override
     final public String getMainImageUrl() {
         return mMainImageUrl;
@@ -66,6 +70,7 @@ final public String getMainImageUrl() {
     /**
      * Returns the String url corresponding to the ad's icon image.
      */
+    @Nullable
     @Override
     final public String getIconImageUrl() {
         return mIconImageUrl;
@@ -78,6 +83,7 @@ final public String getIconImageUrl() {
      * and {@link BaseForwardingNativeAd#getImpressionMinTimeViewed()} for relevant
      * impression-tracking parameters.
      */
+    @NonNull
     @Override
     final public Set<String> getImpressionTrackers() {
         return new HashSet<String>(mImpressionTrackers);
@@ -86,6 +92,7 @@ final public String getIconImageUrl() {
     /**
      * Returns the String url that the device will attempt to resolve when the ad is clicked.
      */
+    @Nullable
     @Override
     final public String getClickDestinationUrl() {
         return mClickDestinationUrl;
@@ -94,6 +101,7 @@ final public String getClickDestinationUrl() {
     /**
      * Returns the Call To Action String (i.e. "Download" or "Learn More") associated with this ad.
      */
+    @Nullable
     @Override
     final public String getCallToAction() {
         return mCallToAction;
@@ -102,6 +110,7 @@ final public String getCallToAction() {
     /**
      * Returns the String corresponding to the ad's title.
      */
+    @Nullable
     @Override
     final public String getTitle() {
         return mTitle;
@@ -110,6 +119,7 @@ final public String getTitle() {
     /**
      * Returns the String corresponding to the ad's body text.
      */
+    @Nullable
     @Override
     final public String getText() {
         return mText;
@@ -120,6 +130,7 @@ final public String getText() {
      * advertised app. Note that this method may return null if the star rating was either never set
      * or invalid.
      */
+    @Nullable
     @Override
     final public Double getStarRating() {
         return mStarRating;
@@ -150,8 +161,12 @@ final public int getImpressionMinTimeViewed() {
      * Given a particular String key, return the associated Object value from the ad's extras map.
      * See {@link BaseForwardingNativeAd#getExtras()} for more information.
      */
+    @Nullable
     @Override
-    final public Object getExtra(final String key) {
+    final public Object getExtra(@NonNull final String key) {
+        if (!NoThrow.checkNotNull(key, "getExtra key is not allowed to be null")) {
+            return null;
+        }
         return mExtras.get(key);
     }
 
@@ -161,6 +176,7 @@ final public Object getExtra(final String key) {
      * with MoPub's direct-sold native ads or from mediated networks that pass back additional
      * fields.
      */
+    @NonNull
     @Override
     final public Map<String, Object> getExtras() {
         return new HashMap<String, Object>(mExtras);
@@ -190,35 +206,36 @@ final public boolean isOverridingClickTracker() {
 
     // Setters
     @Override
-    public final void setNativeEventListener(final NativeEventListener nativeEventListener) {
+    public final void setNativeEventListener(
+            @Nullable final NativeEventListener nativeEventListener) {
         mNativeEventListener = nativeEventListener;
     }
 
-    final void setMainImageUrl(final String mainImageUrl) {
+    final void setMainImageUrl(@Nullable final String mainImageUrl) {
         mMainImageUrl = mainImageUrl;
     }
 
-    final void setIconImageUrl(final String iconImageUrl) {
+    final void setIconImageUrl(@Nullable final String iconImageUrl) {
         mIconImageUrl = iconImageUrl;
     }
 
-    final void setClickDestinationUrl(final String clickDestinationUrl) {
+    final void setClickDestinationUrl(@Nullable final String clickDestinationUrl) {
         mClickDestinationUrl = clickDestinationUrl;
     }
 
-    final void setCallToAction(final String callToAction) {
+    final void setCallToAction(@Nullable final String callToAction) {
         mCallToAction = callToAction;
     }
 
-    final void setTitle(final String title) {
+    final void setTitle(@Nullable final String title) {
         mTitle = title;
     }
 
-    final void setText(final String text) {
+    final void setText(@Nullable final String text) {
         mText = text;
     }
 
-    final void setStarRating(final Double starRating) {
+    final void setStarRating(@Nullable final Double starRating) {
         if (starRating == null) {
             mStarRating = null;
         } else if (starRating >= MIN_STAR_RATING && starRating <= MAX_STAR_RATING) {
@@ -229,11 +246,17 @@ final void setStarRating(final Double starRating) {
         }
     }
 
-    final void addExtra(final String key, final Object value) {
+    final void addExtra(@NonNull final String key, @Nullable final Object value) {
+        if (!NoThrow.checkNotNull(key, "addExtra key is not allowed to be null")) {
+            return;
+        }
         mExtras.put(key, value);
     }
 
-    final void addImpressionTracker(final String url) {
+    final void addImpressionTracker(@NonNull final String url) {
+        if (!NoThrow.checkNotNull(url, "impressionTracker url is not allowed to be null")) {
+            return;
+        }
         mImpressionTrackers.add(url);
     }
 
@@ -259,7 +282,7 @@ final void setOverridingClickTracker(final boolean isOverridingClickTracker) {
      * This method is optional.
      */
     @Override
-    public void prepare(final View view) { }
+    public void prepare(@Nullable final View view) { }
 
     /**
      * Your base native ad subclass should implement this method if the network requires the developer
@@ -277,7 +300,7 @@ public void recordImpression() { }
      * This method is optional.
      */
     @Override
-    public void handleClick(final View view) { }
+    public void handleClick(@Nullable final View view) { }
 
     /**
      * Your base native ad subclass should implement this method if the network requires the developer
@@ -287,7 +310,7 @@ public void handleClick(final View view) { }
      * This method is optional.
      */
     @Override
-    public void clear(final View view) { }
+    public void clear(@Nullable final View view) { }
 
     /**
      * Your base native ad subclass should implement this method if the network requires the developer
@@ -307,7 +330,9 @@ public void destroy() { }
      * {@link BaseForwardingNativeAd#prepare}.
      */
     protected final void notifyAdImpressed() {
-        mNativeEventListener.onAdImpressed();
+        if (mNativeEventListener != null) {
+            mNativeEventListener.onAdImpressed();
+        }
     }
 
     /**
@@ -318,7 +343,9 @@ protected final void notifyAdImpressed() {
      * {@link BaseForwardingNativeAd#prepare}.
      */
     protected final void notifyAdClicked() {
-        mNativeEventListener.onAdClicked();
+        if (mNativeEventListener != null) {
+            mNativeEventListener.onAdClicked();
+        }
     }
 
     /**
@@ -326,9 +353,9 @@ protected final void notifyAdClicked() {
      * cache before calling {@link CustomEventNativeListener#onNativeAdLoaded}. Doing so will
      * force images to cache before displaying the ad.
      */
-    static void preCacheImages(final Context context,
-            final List<String> imageUrls,
-            final ImageListener imageListener) {
+    static void preCacheImages(@NonNull final Context context,
+            @NonNull final List<String> imageUrls,
+            @NonNull final ImageListener imageListener) {
         ImageService.get(context, imageUrls, new ImageService.ImageServiceListener() {
             @Override
             public void onSuccess(final Map<String, Bitmap> bitmaps) {
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ClientPositioningSource.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ClientPositioningSource.java
index bcfea7c7..0809b8d2 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ClientPositioningSource.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ClientPositioningSource.java
@@ -1,6 +1,7 @@
 package com.mopub.nativeads;
 
 import android.os.Handler;
+import android.support.annotation.NonNull;
 
 import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
 
@@ -8,15 +9,16 @@
  * Returns a preset client positioning object.
  */
 class ClientPositioningSource implements PositioningSource {
-    private Handler mHandler = new Handler();
-    private final MoPubClientPositioning mPositioning;
+    @NonNull private final Handler mHandler = new Handler();
+    @NonNull private final MoPubClientPositioning mPositioning;
 
-    ClientPositioningSource(MoPubClientPositioning positioning) {
+    ClientPositioningSource(@NonNull MoPubClientPositioning positioning) {
         mPositioning = MoPubNativeAdPositioning.clone(positioning);
     }
 
     @Override
-    public void loadPositions(final String adUnitId, final PositioningListener listener) {
+    public void loadPositions(@NonNull final String adUnitId,
+            @NonNull final PositioningListener listener) {
         mHandler.post(new Runnable() {
             @Override
             public void run() {
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/Constants.java b/mopub-sdk/src/main/java/com/mopub/nativeads/Constants.java
deleted file mode 100644
index ad256b8b..00000000
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/Constants.java
+++ /dev/null
@@ -1,11 +0,0 @@
-package com.mopub.nativeads;
-
-public class Constants {
-    public static final String LOGTAG = "MoPub Native";
-
-    static final String NATIVE_HOST = "ads.mopub.com";
-    static final String NATIVE_HANDLER = "/m/ad";
-
-    static final String POSITIONING_HOST = "ads.mopub.com";
-    static final String POSITIONING_HANDLER = "/m/pos";
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java
index 03397057..51abedc3 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java
@@ -1,6 +1,7 @@
 package com.mopub.nativeads;
 
 import android.content.Context;
+import android.support.annotation.NonNull;
 
 import java.util.Map;
 
@@ -27,10 +28,10 @@
      * MoPub website that you want to associate with a given custom event request. This data may be
      * used to pass dynamic information, such as publisher IDs, without changes in application code.
      */
-    protected abstract void loadNativeAd(final Context context,
-            final CustomEventNativeListener customEventNativeListener,
-            final Map<String, Object> localExtras,
-            final Map<String, String> serverExtras);
+    protected abstract void loadNativeAd(@NonNull final Context context,
+            @NonNull final CustomEventNativeListener customEventNativeListener,
+            @NonNull final Map<String, Object> localExtras,
+            @NonNull final Map<String, String> serverExtras);
 
     public interface ImageListener {
         /**
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
index 224fa646..15e38c1a 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
@@ -1,6 +1,7 @@
 package com.mopub.nativeads;
 
 import android.content.Context;
+import android.support.annotation.NonNull;
 
 import com.mopub.common.DownloadResponse;
 import com.mopub.common.HttpResponses;
@@ -17,10 +18,10 @@ private CustomEventNativeAdapter() {}
 
     static final String RESPONSE_BODY_KEY = "response_body_key";
 
-    public static void loadNativeAd(final Context context,
-            final Map<String, Object> localExtras,
-            final DownloadResponse downloadResponse,
-            final CustomEventNative.CustomEventNativeListener customEventNativeListener) {
+    public static void loadNativeAd(@NonNull final Context context,
+            @NonNull final Map<String, Object> localExtras,
+            @NonNull final DownloadResponse downloadResponse,
+            @NonNull final CustomEventNative.CustomEventNativeListener customEventNativeListener) {
 
         final String customEventNativeData = downloadResponse.getFirstHeader(ResponseHeader.CUSTOM_EVENT_DATA);
         final String customEventNativeClassName = downloadResponse.getFirstHeader(ResponseHeader.CUSTOM_EVENT_NAME);
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDiskTaskManager.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDiskTaskManager.java
index f355fe69..ef20fcaf 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDiskTaskManager.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDiskTaskManager.java
@@ -1,18 +1,21 @@
 package com.mopub.nativeads;
 
 import android.graphics.Bitmap;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
 import com.mopub.common.CacheService;
 
-import java.util.*;
+import java.util.List;
 
 import static com.mopub.common.CacheService.DiskLruCacheGetListener;
 
 class ImageDiskTaskManager extends TaskManager<Bitmap> {
-    private final List<String> mUrls;
+    @NonNull private final List<String> mUrls;
     private final int mMaxImageWidth;
 
-    ImageDiskTaskManager(final List<String> urls,
-            final TaskManagerListener<Bitmap> imageTaskManagerListener,
+    ImageDiskTaskManager(@NonNull final List<String> urls,
+            @NonNull final TaskManagerListener<Bitmap> imageTaskManagerListener,
             final int maxImageWidth)
             throws IllegalArgumentException {
         super(urls, imageTaskManagerListener);
@@ -47,7 +50,7 @@ void failAllTasks() {
         }
 
         @Override
-        public void onComplete(final String key, final byte[] content) {
+        public void onComplete(@Nullable final String key, @Nullable final byte[] content) {
             if (key == null) {
                 failAllTasks();
                 return;
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDownloadTaskManager.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDownloadTaskManager.java
index b022aa2f..3ab2381c 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDownloadTaskManager.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDownloadTaskManager.java
@@ -1,9 +1,12 @@
 package com.mopub.nativeads;
 
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
 import com.mopub.common.DownloadResponse;
 import com.mopub.common.DownloadTask;
-import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.AsyncTasks;
 
 import org.apache.http.HttpStatus;
 import org.apache.http.client.methods.HttpGet;
@@ -18,11 +21,11 @@
 
 class ImageDownloadTaskManager extends TaskManager<DownloadResponse> {
 
-    private final Map<HttpUriRequest, DownloadTask> mDownloadTasks;
+    @NonNull private final Map<HttpUriRequest, DownloadTask> mDownloadTasks;
     private final int mRequestedWidth;
 
-    ImageDownloadTaskManager(final List<String> urls,
-                             final TaskManagerListener<DownloadResponse> imageTaskManagerListener,
+    ImageDownloadTaskManager(@NonNull final List<String> urls,
+                             @NonNull final TaskManagerListener<DownloadResponse> imageTaskManagerListener,
                              final int requestedWidth)
             throws IllegalArgumentException {
         super(urls, imageTaskManagerListener);
@@ -68,7 +71,8 @@ void failAllTasks() {
 
     private class ImageDownloadTaskListener implements DownloadTaskListener {
         @Override
-        public void onComplete(final String url, final DownloadResponse downloadResponse) {
+        public void onComplete(@Nullable final String url, @Nullable final DownloadResponse
+                downloadResponse) {
             if (downloadResponse == null || downloadResponse.getStatusCode() != HttpStatus.SC_OK) {
                 MoPubLog.d("Failed to download image: " + url);
                 failAllTasks();
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageService.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageService.java
index d020becc..eac042bc 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageService.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageService.java
@@ -4,6 +4,8 @@
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.Point;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.view.Display;
 import android.view.WindowManager;
 
@@ -35,7 +37,7 @@
 
     @TargetApi(13)
     @VisibleForTesting
-    static void initialize(Context context) {
+    static void initialize(@NonNull Context context) {
         if (sTargetWidth == -1) {
             // Get Display Options
             WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
@@ -52,13 +54,15 @@ static void initialize(Context context) {
         }
     }
 
-    static void get(final Context context, final List<String> urls, final ImageServiceListener imageServiceListener) {
+    static void get(@NonNull final Context context, @NonNull final List<String> urls,
+            @NonNull final ImageServiceListener imageServiceListener) {
         initialize(context);
         CacheService.initialize(context);
         get(urls, imageServiceListener);
     }
 
-    static void get(final List<String> urls, final ImageServiceListener imageServiceListener) {
+    static void get(@NonNull final List<String> urls,
+            @NonNull final ImageServiceListener imageServiceListener) {
         final Map<String, Bitmap> cacheBitmaps = new HashMap<String, Bitmap>(urls.size());
         final List<String> urlCacheMisses = getBitmapsFromMemoryCache(urls, cacheBitmaps);
 
@@ -94,7 +98,9 @@ static void putDataInCache(final String key, final Bitmap bitmap, final byte[] b
         CacheService.putToDiskCacheAsync(key, byteData);
     }
 
-    static List<String> getBitmapsFromMemoryCache(final List<String> urls, final Map<String, Bitmap> hits) {
+    @NonNull
+    static List<String> getBitmapsFromMemoryCache(@NonNull final List<String> urls,
+            @NonNull final Map<String, Bitmap> hits) {
         final List<String> cacheMisses = new ArrayList<String>();
         for (final String url : urls) {
             final Bitmap bitmap = getBitmapFromMemoryCache(url);
@@ -109,6 +115,7 @@ static void putDataInCache(final String key, final Bitmap bitmap, final byte[] b
         return cacheMisses;
     }
 
+    @Nullable
     static Bitmap getBitmapFromMemoryCache(final String key) {
         return CacheService.getFromBitmapCache(key);
     }
@@ -124,7 +131,7 @@ static Bitmap getBitmapFromMemoryCache(final String key) {
         }
 
         @Override
-        public void onSuccess(final Map<String, Bitmap> diskBitmaps) {
+        public void onSuccess(@NonNull final Map<String, Bitmap> diskBitmaps) {
             final List<String> urlDiskMisses = new ArrayList<String>();
             for (final Entry <String, Bitmap> entry : diskBitmaps.entrySet()) {
                 if (entry.getValue() == null) {
@@ -173,7 +180,7 @@ public void onFail() {
         }
 
         @Override
-        public void onSuccess(final Map<String, DownloadResponse> responses) {
+        public void onSuccess(@NonNull final Map<String, DownloadResponse> responses) {
             for (final Entry<String, DownloadResponse> entry : responses.entrySet()) {
                 final Bitmap bitmap = asBitmap(entry.getValue(), sTargetWidth);
                 final String key = entry.getKey();
@@ -195,16 +202,14 @@ public void onFail() {
         }
     }
 
-    public static Bitmap asBitmap(final DownloadResponse downloadResponse, final int requestedWidth) {
-        if (downloadResponse == null) {
-            return null;
-        }
-
+    @Nullable
+    public static Bitmap asBitmap(@NonNull final DownloadResponse downloadResponse, final int requestedWidth) {
         final byte[] bytes = downloadResponse.getByteArray();
         return byteArrayToBitmap(bytes, requestedWidth);
     }
 
-    public static Bitmap byteArrayToBitmap(final byte[] bytes, final int requestedWidth) {
+    @Nullable
+    public static Bitmap byteArrayToBitmap(@NonNull final byte[] bytes, final int requestedWidth) {
         if (requestedWidth <= 0) {
             return null;
         }
@@ -241,7 +246,7 @@ public static Bitmap byteArrayToBitmap(final byte[] bytes, final int requestedWi
     /**
      * Returns the size of the byte array that the bitmap described by the options object will consume.
      */
-    public static long getMemBytes(Options options) {
+    public static long getMemBytes(@NonNull Options options) {
         long memBytes = 4 * (long) options.outWidth * (long) options.outHeight / options.inSampleSize / options.inSampleSize;
         return memBytes;
     }
@@ -265,8 +270,9 @@ public static int calculateInSampleSize(final int nativeWidth, int requestedWidt
     }
 
     // Testing, also performs disk IO
+    @Nullable
     @Deprecated
-    static Bitmap getBitmapFromDiskCache(final String key) {
+    static Bitmap getBitmapFromDiskCache(@NonNull final String key) {
         Bitmap bitmap = null;
         byte[] bytes = CacheService.getFromDiskCache(key);
         if (bytes != null) {
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageViewService.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageViewService.java
index ef337e0c..20d30e85 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageViewService.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageViewService.java
@@ -1,6 +1,8 @@
 package com.mopub.nativeads;
 
 import android.graphics.Bitmap;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.widget.ImageView;
 
 import com.mopub.common.VisibleForTesting;
@@ -22,7 +24,7 @@
 
     private ImageViewService(){}
 
-    static void loadImageView(final String url, final ImageView imageView) {
+    static void loadImageView(@Nullable final String url, @Nullable final ImageView imageView) {
         if (imageView == null) {
             MoPubLog.d("Attempted to load an image into a null ImageView");
             return;
@@ -45,7 +47,7 @@ static void loadImageView(final String url, final ImageView imageView) {
     }
 
     private static class MyImageViewServiceListener implements ImageServiceListener {
-        private final WeakReference<ImageView> mImageView;
+        @NonNull private final WeakReference<ImageView> mImageView;
         private final String mUrl;
         private final long mUniqueId;
 
@@ -56,7 +58,7 @@ static void loadImageView(final String url, final ImageView imageView) {
         }
 
         @Override
-        public void onSuccess(final Map<String, Bitmap> bitmaps) {
+        public void onSuccess(@Nullable final Map<String, Bitmap> bitmaps) {
             final ImageView imageView = mImageView.get();
             if (imageView == null || bitmaps == null || !bitmaps.containsKey(mUrl)) {
                 return;
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionTracker.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionTracker.java
index 35508618..176f0e65 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionTracker.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionTracker.java
@@ -2,6 +2,8 @@
 
 import android.content.Context;
 import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.view.View;
 
 import com.mopub.common.VisibleForTesting;
@@ -19,27 +21,27 @@
     private static final int PERIOD = 250;
 
     // Object tracking visibility of added views
-    private final VisibilityTracker mVisibilityTracker;
+    @NonNull private final VisibilityTracker mVisibilityTracker;
 
     // All views and responses being tracked for impressions
-    private final Map<View, NativeResponse> mTrackedViews;
+    @NonNull private final Map<View, NativeResponse> mTrackedViews;
 
     // Visible views being polled for time on screen before tracking impression
-    private final Map<View, TimestampWrapper<NativeResponse>> mPollingViews;
+    @NonNull private final Map<View, TimestampWrapper<NativeResponse>> mPollingViews;
 
     // Handler for polling visible views
-    private final Handler mPollHandler;
+    @NonNull private final Handler mPollHandler;
 
     // Runnable to run on each visibility loop
-    private final PollingRunnable mPollingRunnable;
+    @NonNull private final PollingRunnable mPollingRunnable;
 
     // Object to check actual visibility
-    private final VisibilityChecker mVisibilityChecker;
+    @NonNull private final VisibilityChecker mVisibilityChecker;
 
     // Listener for when a view becomes visible or non visible
-    private VisibilityTrackerListener mVisibilityTrackerListener;
+    @Nullable private VisibilityTrackerListener mVisibilityTrackerListener;
 
-    ImpressionTracker(final Context context) {
+    ImpressionTracker(@NonNull final Context context) {
         this(new WeakHashMap<View, NativeResponse>(),
                 new WeakHashMap<View, TimestampWrapper<NativeResponse>>(),
                 new VisibilityChecker(),
@@ -48,11 +50,11 @@
     }
 
     @VisibleForTesting
-    ImpressionTracker(final Map<View, NativeResponse> trackedViews,
-                      final Map<View, TimestampWrapper<NativeResponse>> pollingViews,
-                      final VisibilityChecker visibilityChecker,
-                      final VisibilityTracker visibilityTracker,
-                      final Handler handler) {
+    ImpressionTracker(@NonNull final Map<View, NativeResponse> trackedViews,
+            @NonNull final Map<View, TimestampWrapper<NativeResponse>> pollingViews,
+            @NonNull final VisibilityChecker visibilityChecker,
+            @NonNull final VisibilityTracker visibilityTracker,
+            @NonNull final Handler handler) {
         mTrackedViews = trackedViews;
         mPollingViews = pollingViews;
         mVisibilityChecker = visibilityChecker;
@@ -60,7 +62,7 @@
 
         mVisibilityTrackerListener = new VisibilityTrackerListener() {
             @Override
-            public void onVisibilityChanged(final List<View> visibleViews, final List<View> invisibleViews) {
+            public void onVisibilityChanged(@NonNull final List<View> visibleViews, @NonNull final List<View> invisibleViews) {
                 for (final View view : visibleViews) {
                     // It's possible for native response to be null if the view was GC'd from this class
                     // but not from VisibilityTracker
@@ -96,7 +98,7 @@ public void onVisibilityChanged(final List<View> visibleViews, final List<View>
     /**
      * Tracks the given view for impressions.
      */
-    void addView(final View view, final NativeResponse nativeResponse) {
+    void addView(final View view, @NonNull final NativeResponse nativeResponse) {
         // View is already associated with same native response
         if (mTrackedViews.get(view) == nativeResponse) {
             return;
@@ -153,7 +155,7 @@ private void removePollingView(final View view) {
     class PollingRunnable implements Runnable {
         // Create this once to avoid excessive garbage collection observed when calculating
         // these on each pass.
-        private final ArrayList<View> mRemovedViews;
+        @NonNull private final ArrayList<View> mRemovedViews;
 
         PollingRunnable() {
             mRemovedViews = new ArrayList<View>();
@@ -189,6 +191,7 @@ public void run() {
         }
     }
 
+    @Nullable
     @Deprecated
     @VisibleForTesting
     VisibilityTrackerListener getVisibilityTrackerListener() {
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
index ddd2aac8..23b71feb 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
@@ -2,6 +2,8 @@
 
 import android.content.Context;
 import android.database.DataSetObserver;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.Adapter;
@@ -9,12 +11,15 @@
 import android.widget.BaseAdapter;
 import android.widget.ListAdapter;
 import android.widget.ListView;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.Preconditions.NoThrow;
 import com.mopub.common.VisibleForTesting;
-import com.mopub.common.logging.MoPubLog;
 import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
 import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubServerPositioning;
 
-import java.util.*;
+import java.util.List;
+import java.util.WeakHashMap;
 
 import static android.widget.AdapterView.OnItemClickListener;
 import static android.widget.AdapterView.OnItemLongClickListener;
@@ -32,12 +37,12 @@
  * wish to avoid wrapping your original adapter, you can use {@code MoPubStreamAdPlacer} directly.
  */
 public class MoPubAdAdapter extends BaseAdapter {
-    private final WeakHashMap<View, Integer> mViewPositionMap;
-    private final Adapter mOriginalAdapter;
-    private final MoPubStreamAdPlacer mStreamAdPlacer;
-    private final VisibilityTracker mVisibilityTracker;
+    @NonNull private final WeakHashMap<View, Integer> mViewPositionMap;
+    @NonNull private final Adapter mOriginalAdapter;
+    @NonNull private final MoPubStreamAdPlacer mStreamAdPlacer;
+    @NonNull private final VisibilityTracker mVisibilityTracker;
 
-    private MoPubNativeAdLoadedListener mAdLoadedListener;
+    @Nullable private MoPubNativeAdLoadedListener mAdLoadedListener;
 
     /**
      * Creates a new MoPubAdAdapter object.
@@ -49,7 +54,7 @@
      * @param context The activity context.
      * @param originalAdapter Your original adapter.
      */
-    public MoPubAdAdapter(final Context context, final Adapter originalAdapter) {
+    public MoPubAdAdapter(@NonNull final Context context, @NonNull final Adapter originalAdapter) {
         this(context, originalAdapter, MoPubNativeAdPositioning.serverPositioning());
     }
 
@@ -61,9 +66,9 @@ public MoPubAdAdapter(final Context context, final Adapter originalAdapter) {
      * @param adPositioning A positioning object for specifying where ads will be placed in your
      * stream. See {@link MoPubNativeAdPositioning#serverPositioning()}.
      */
-    public MoPubAdAdapter(final Context context,
-            final Adapter originalAdapter,
-            final MoPubServerPositioning adPositioning) {
+    public MoPubAdAdapter(@NonNull final Context context,
+            @NonNull final Adapter originalAdapter,
+            @NonNull final MoPubServerPositioning adPositioning) {
         this(new MoPubStreamAdPlacer(context, adPositioning), originalAdapter,
                 new VisibilityTracker(context));
     }
@@ -76,17 +81,17 @@ public MoPubAdAdapter(final Context context,
      * @param adPositioning A positioning object for specifying where ads will be placed in your
      * stream. See {@link MoPubNativeAdPositioning#clientPositioning()}.
      */
-    public MoPubAdAdapter(final Context context,
-            final Adapter originalAdapter,
-            final MoPubClientPositioning adPositioning) {
+    public MoPubAdAdapter(@NonNull final Context context,
+            @NonNull final Adapter originalAdapter,
+            @NonNull final MoPubClientPositioning adPositioning) {
         this(new MoPubStreamAdPlacer(context, adPositioning), originalAdapter,
                 new VisibilityTracker(context));
     }
 
     @VisibleForTesting
-    MoPubAdAdapter(final MoPubStreamAdPlacer streamAdPlacer,
-            final Adapter originalAdapter,
-            final VisibilityTracker visibilityTracker) {
+    MoPubAdAdapter(@NonNull final MoPubStreamAdPlacer streamAdPlacer,
+            @NonNull final Adapter originalAdapter,
+            @NonNull final VisibilityTracker visibilityTracker) {
         mOriginalAdapter = originalAdapter;
         mStreamAdPlacer = streamAdPlacer;
         mViewPositionMap = new WeakHashMap<View, Integer>();
@@ -94,7 +99,7 @@ public MoPubAdAdapter(final Context context,
         mVisibilityTracker = visibilityTracker;
         mVisibilityTracker.setVisibilityTrackerListener(new VisibilityTrackerListener() {
             @Override
-            public void onVisibilityChanged(final List<View> visibleViews,
+            public void onVisibilityChanged(@NonNull final List<View> visibleViews,
                     final List<View> invisibleViews) {
                 handleVisibilityChange(visibleViews);
             }
@@ -153,9 +158,9 @@ void handleAdRemoved(final int position) {
      *
      * @param adRenderer The ad renderer.
      */
-    public final void registerAdRenderer(final MoPubAdRenderer adRenderer) {
-        if (adRenderer == null) {
-            MoPubLog.w("Tried to set a null ad renderer on the placer.");
+    public final void registerAdRenderer(@NonNull final MoPubAdRenderer adRenderer) {
+        if (!Preconditions.NoThrow.checkNotNull(
+                adRenderer, "Tried to set a null ad renderer on the placer.")) {
             return;
         }
         mStreamAdPlacer.registerAdRenderer(adRenderer);
@@ -173,7 +178,7 @@ public final void registerAdRenderer(final MoPubAdRenderer adRenderer) {
      *
      * @param listener The listener.
      */
-    public final void setAdLoadedListener(final MoPubNativeAdLoadedListener listener) {
+    public final void setAdLoadedListener(@Nullable final MoPubNativeAdLoadedListener listener) {
         mAdLoadedListener = listener;
     }
 
@@ -185,7 +190,7 @@ public final void setAdLoadedListener(final MoPubNativeAdLoadedListener listener
      *
      * @param adUnitId The ad unit ID to use when loading ads.
      */
-    public void loadAds(final String adUnitId) {
+    public void loadAds(@NonNull final String adUnitId) {
         mStreamAdPlacer.loadAds(adUnitId);
     }
 
@@ -203,8 +208,8 @@ public void loadAds(final String adUnitId) {
      * @param adUnitId The ad unit ID to use when loading ads.
      * @param requestParameters Targeting information to pass to the ad server.
      */
-    public void loadAds(final String adUnitId,
-            final RequestParameters requestParameters) {
+    public void loadAds(@NonNull final String adUnitId,
+            @Nullable final RequestParameters requestParameters) {
         mStreamAdPlacer.loadAds(adUnitId, requestParameters);
     }
 
@@ -280,6 +285,7 @@ public int getCount() {
      *
      * @inheritDoc
      */
+    @Nullable
     @Override
     public Object getItem(final int position) {
         final Object ad = mStreamAdPlacer.getAdData(position);
@@ -323,6 +329,7 @@ public boolean hasStableIds() {
      *
      * @inheritDoc
      */
+    @Nullable
     @Override
     public View getView(final int position, final View view, final ViewGroup viewGroup) {
         final View resultView;
@@ -377,7 +384,7 @@ public boolean isEmpty() {
         return mOriginalAdapter.isEmpty() && mStreamAdPlacer.getAdjustedCount(0) == 0;
     }
 
-    private void handleVisibilityChange(final List<View> visibleViews) {
+    private void handleVisibilityChange(@NonNull final List<View> visibleViews) {
         // Loop through all visible positions in order to build a max and min range, and then
         // place ads into that range.
         int min = Integer.MAX_VALUE;
@@ -451,7 +458,6 @@ public void removeItem(final int originalPosition) {
         mStreamAdPlacer.removeItem(originalPosition);
     }
 
-
     /**
      * Sets an on click listener for the given ListView, automatically adjusting the listener
      * callback positions based on ads in the adapter.
@@ -461,8 +467,17 @@ public void removeItem(final int originalPosition) {
      * @param listView The ListView for this adapter.
      * @param listener An on click listener.
      */
-    public void setOnClickListener(final ListView listView,
-            final OnItemClickListener listener) {
+    public void setOnClickListener(@NonNull final ListView listView,
+            @Nullable final OnItemClickListener listener) {
+        if (!NoThrow.checkNotNull(listView, "You called MoPubAdAdapter.setOnClickListener with a" +
+                " null ListView")) {
+            return;
+        }
+        if (listener == null) {
+            listView.setOnItemClickListener(null);
+            return;
+        }
+
         listView.setOnItemClickListener(new OnItemClickListener() {
             @Override
             public void onItemClick(final AdapterView<?> adapterView, final View view,
@@ -484,8 +499,17 @@ public void onItemClick(final AdapterView<?> adapterView, final View view,
      * @param listView The ListView for this adapter.
      * @param listener An an long click listener.
      */
-    public void setOnItemLongClickListener(final ListView listView,
-            final OnItemLongClickListener listener) {
+    public void setOnItemLongClickListener(@NonNull final ListView listView,
+            @Nullable final OnItemLongClickListener listener) {
+        if (!NoThrow.checkNotNull(listView, "You called MoPubAdAdapter." +
+                "setOnItemLongClickListener with a null ListView")) {
+            return;
+        }
+        if (listener == null) {
+            listView.setOnItemLongClickListener(null);
+            return;
+        }
+
         listView.setOnItemLongClickListener(new OnItemLongClickListener() {
             @Override
             public boolean onItemLongClick(final AdapterView<?> adapterView,
@@ -503,8 +527,17 @@ public boolean onItemLongClick(final AdapterView<?> adapterView,
      * @param listView The ListView for this adapter.
      * @param listener An an item selected listener.
      */
-    public void setOnItemSelectedListener(final ListView listView,
-            final OnItemSelectedListener listener) {
+    public void setOnItemSelectedListener(@NonNull final ListView listView,
+            @Nullable final OnItemSelectedListener listener) {
+        if (!NoThrow.checkNotNull(listView, "You called MoPubAdAdapter.setOnItemSelectedListener" +
+                " with a null ListView")) {
+            return;
+        }
+        if (listener == null) {
+            listView.setOnItemSelectedListener(null);
+            return;
+        }
+
         listView.setOnItemSelectedListener(new OnItemSelectedListener() {
             @Override
             public void onItemSelected(final AdapterView<?> adapterView,
@@ -529,7 +562,12 @@ public void onNothingSelected(final AdapterView<?> adapterView) {
      * @param listView The ListView for this adapter.
      * @param originalPosition The original content position before loading ads.
      */
-    public void setSelection(final ListView listView, final int originalPosition) {
+    public void setSelection(@NonNull final ListView listView, final int originalPosition) {
+        if (!NoThrow.checkNotNull(listView, "You called MoPubAdAdapter.setSelection with a null " +
+                "ListView")) {
+            return;
+        }
+
         listView.setSelection(mStreamAdPlacer.getAdjustedPosition(originalPosition));
     }
 
@@ -540,7 +578,13 @@ public void setSelection(final ListView listView, final int originalPosition) {
      * @param listView The ListView for this adapter.
      * @param originalPosition The original content position before loading ads.
      */
-    public void smoothScrollToPosition(final ListView listView, final int originalPosition) {
+    public void smoothScrollToPosition(@NonNull final ListView listView,
+            final int originalPosition) {
+        if (!NoThrow.checkNotNull(listView, "You called MoPubAdAdapter.smoothScrollToPosition " +
+                "with a null ListView")) {
+            return;
+        }
+
         listView.smoothScrollToPosition(mStreamAdPlacer.getAdjustedPosition(originalPosition));
     }
 
@@ -552,7 +596,7 @@ public void smoothScrollToPosition(final ListView listView, final int originalPo
      *
      * @param adUnitId The ad unit ID to use when loading ads.
      */
-    public void refreshAds(final ListView listView, String adUnitId) {
+    public void refreshAds(@NonNull final ListView listView, @NonNull String adUnitId) {
         refreshAds(listView, adUnitId, null);
     }
 
@@ -565,10 +609,10 @@ public void refreshAds(final ListView listView, String adUnitId) {
      * @param adUnitId The ad unit ID to use when loading ads.
      * @param requestParameters Targeting information to pass to the ad server.
      */
-    public void refreshAds(final ListView listView,
-            String adUnitId, RequestParameters requestParameters) {
-        if (listView.getAdapter() != this) {
-            MoPubLog.w("You called refreshAds on a ListView whose adapter is not an ad placer");
+    public void refreshAds(@NonNull final ListView listView,
+            @NonNull String adUnitId, @Nullable RequestParameters requestParameters) {
+        if (!NoThrow.checkNotNull(listView, "You called MoPubAdAdapter.refreshAds with a null " +
+                "ListView")) {
             return;
         }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java
index 87542fb1..d0f901ef 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java
@@ -1,6 +1,8 @@
 package com.mopub.nativeads;
 
 import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.view.View;
 import android.view.ViewGroup;
 
@@ -27,7 +29,7 @@
      * @param context The context. Useful for creating a view.
      * @return A new ad view.
      */
-    View createAdView(Context context, ViewGroup parent);
+    View createAdView(@NonNull Context context, @Nullable ViewGroup parent);
 
     /**
      * Renders a view created by {@link #createAdView} by filling it with ad data.
@@ -35,5 +37,5 @@
      * @param view The ad View
      * @param ad The ad data that should be bound to the view.
      */
-    void renderAdView(View view, T ad);
+    void renderAdView(@NonNull View view, @NonNull T ad);
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
index 93f1ad45..db2b6591 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
@@ -1,7 +1,13 @@
 package com.mopub.nativeads;
 
 import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 
+import com.mopub.common.ClientMetadata;
+import com.mopub.common.event.ErrorEvent;
+import com.mopub.common.event.Event;
+import com.mopub.common.event.MoPubEvents;
 import com.mopub.common.logging.MoPubLog;
 
 import org.json.JSONArray;
@@ -13,6 +19,7 @@
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 
@@ -23,10 +30,10 @@
 public class MoPubCustomEventNative extends CustomEventNative {
 
     @Override
-    protected void loadNativeAd(final Context context,
-            final CustomEventNativeListener customEventNativeListener,
-            final Map<String, Object> localExtras,
-            final Map<String, String> serverExtras) {
+    protected void loadNativeAd(@NonNull final Context context,
+            @NonNull final CustomEventNativeListener customEventNativeListener,
+            @NonNull final Map<String, Object> localExtras,
+            @NonNull final Map<String, String> serverExtras) {
 
         final MoPubForwardingNativeAd moPubForwardingNativeAd =
                 new MoPubForwardingNativeAd(context.getApplicationContext(),
@@ -37,10 +44,10 @@ protected void loadNativeAd(final Context context,
             moPubForwardingNativeAd.loadAd();
         } catch (IllegalArgumentException e) {
             customEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
-            return;
+            MoPubEvents.log(new ErrorEvent.Builder("","").withException(e).build());
         } catch (JSONException e) {
             customEventNativeListener.onNativeAdFailed(NativeErrorCode.INVALID_JSON);
-            return;
+            MoPubEvents.log(new ErrorEvent.Builder("","").withException(e).build());
         }
     }
 
@@ -98,7 +105,7 @@ public void onImagesFailedToCache(final NativeErrorCode errorCode) {
             });
         }
 
-        private boolean containsRequiredKeys(final JSONObject jsonObject) {
+        private boolean containsRequiredKeys(@NonNull final JSONObject jsonObject) {
             final Set<String> keys = new HashSet<String>();
 
             final Iterator<String> jsonKeys = jsonObject.keys();
@@ -109,7 +116,8 @@ private boolean containsRequiredKeys(final JSONObject jsonObject) {
             return keys.containsAll(Parameter.requiredKeys);
         }
 
-        private void addInstanceVariable(final Parameter key, final Object value) throws ClassCastException {
+        private void addInstanceVariable(@NonNull final Parameter key,
+                @Nullable final Object value) throws ClassCastException {
             try {
                 switch (key) {
                     case MAIN_IMAGE:
@@ -167,10 +175,11 @@ private void addImpressionTrackers(final Object impressionTrackers) throws Class
             }
         }
 
-        private boolean isImageKey(final String name) {
-            return name != null && name.toLowerCase().endsWith("image");
+        private boolean isImageKey(@Nullable final String name) {
+            return name != null && name.toLowerCase(Locale.US).endsWith("image");
         }
 
+        @NonNull
         List<String> getExtrasImageUrls() {
             final List<String> extrasBitmapUrls = new ArrayList<String>(getExtras().size());
             for (final Map.Entry<String, Object> entry : getExtras().entrySet()) {
@@ -182,6 +191,7 @@ private boolean isImageKey(final String name) {
             return extrasBitmapUrls;
         }
 
+        @NonNull
         List<String> getAllImageUrls() {
             final List<String> imageUrls = new ArrayList<String>();
             if (getMainImageUrl() != null) {
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
index 8c718eb4..dd1420ce 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
@@ -1,23 +1,32 @@
 package com.mopub.nativeads;
 
 import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.view.View;
+
+import com.mopub.common.Constants;
 import com.mopub.common.DownloadResponse;
 import com.mopub.common.DownloadTask;
 import com.mopub.common.GpsHelper;
 import com.mopub.common.HttpClient;
+import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.event.MoPubEvents;
 import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.DeviceUtils;
 import com.mopub.common.util.ManifestUtils;
 import com.mopub.common.util.ResponseHeader;
+
 import org.apache.http.HttpStatus;
 import org.apache.http.client.methods.HttpGet;
 import org.apache.http.client.methods.HttpUriRequest;
 
 import java.lang.ref.WeakReference;
-import java.util.*;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
 
 import static com.mopub.common.GpsHelper.GpsHelperListener;
 import static com.mopub.common.GpsHelper.fetchAdvertisingInfoAsync;
@@ -38,7 +47,7 @@
     static final MoPubNativeNetworkListener EMPTY_NETWORK_LISTENER = new
             MoPubNativeNetworkListener() {
         @Override
-        public void onNativeLoad(final NativeResponse nativeResponse) {
+        public void onNativeLoad(@NonNull final NativeResponse nativeResponse) {
             // If this listener is invoked, it means that MoPubNative instance has been destroyed
             // so destroy any leftover incoming NativeResponses
             nativeResponse.destroy();
@@ -51,10 +60,10 @@ public void onNativeFail(final NativeErrorCode errorCode) {
     static final MoPubNativeEventListener EMPTY_EVENT_LISTENER = new
             MoPubNativeEventListener() {
         @Override
-        public void onNativeImpression(final View view) {
+        public void onNativeImpression(@Nullable final View view) {
         }
         @Override
-        public void onNativeClick(final View view) {
+        public void onNativeClick(@Nullable final View view) {
         }
     };
 
@@ -72,11 +81,11 @@ public void onNativeClick(final View view) {
     }
 
     // must be an activity context since 3rd party networks need it
-    private final WeakReference<Context> mContext;
-    private final String mAdUnitId;
-    private MoPubNativeNetworkListener mMoPubNativeNetworkListener;
-    private MoPubNativeEventListener mMoPubNativeEventListener;
-    private Map<String, Object> mLocalExtras;
+    @NonNull private final WeakReference<Context> mContext;
+    @NonNull private final String mAdUnitId;
+    @NonNull private MoPubNativeNetworkListener mMoPubNativeNetworkListener;
+    @NonNull private MoPubNativeEventListener mMoPubNativeEventListener;
+    @NonNull private Map<String, Object> mLocalExtras = Collections.emptyMap();
 
     /**
      * @deprecated As of release 2.4, use {@link MoPubNative(Context, String,
@@ -84,23 +93,19 @@ public void onNativeClick(final View view) {
      * instead.
      */
     @Deprecated
-    public MoPubNative(final Context context,
-            final String adUnitId,
-            final MoPubNativeListener moPubNativeListener) {
+    public MoPubNative(@NonNull final Context context,
+            @NonNull final String adUnitId,
+            @NonNull final MoPubNativeListener moPubNativeListener) {
         this(context, adUnitId, (MoPubNativeNetworkListener)moPubNativeListener);
         setNativeEventListener(moPubNativeListener);
     }
 
-    public MoPubNative(final Context context,
-                final String adUnitId,
-                final MoPubNativeNetworkListener moPubNativeNetworkListener) {
-        if (context == null) {
-            throw new IllegalArgumentException("Context may not be null.");
-        } else if (adUnitId == null) {
-            throw new IllegalArgumentException("AdUnitId may not be null.");
-        } else if (moPubNativeNetworkListener == null) {
-            throw new IllegalArgumentException("MoPubNativeNetworkListener may not be null.");
-        }
+    public MoPubNative(@NonNull final Context context,
+                @NonNull final String adUnitId,
+                @NonNull final MoPubNativeNetworkListener moPubNativeNetworkListener) {
+        Preconditions.checkNotNull(context, "Context may not be null.");
+        Preconditions.checkNotNull(adUnitId, "AdUnitId may not be null.");
+        Preconditions.checkNotNull(moPubNativeNetworkListener, "MoPubNativeNetworkListener may not be null.");
 
         ManifestUtils.checkNativeActivitiesDeclared(context);
 
@@ -113,7 +118,7 @@ public MoPubNative(final Context context,
         fetchAdvertisingInfoAsync(context, null);
     }
 
-    public void setNativeEventListener(final MoPubNativeEventListener nativeEventListener) {
+    public void setNativeEventListener(@Nullable final MoPubNativeEventListener nativeEventListener) {
         mMoPubNativeEventListener = (nativeEventListener == null)
                 ? EMPTY_EVENT_LISTENER : nativeEventListener;
     }
@@ -124,24 +129,28 @@ public void destroy() {
         mMoPubNativeEventListener = EMPTY_EVENT_LISTENER;
     }
 
-    public void setLocalExtras(final Map<String, Object> localExtras) {
-        mLocalExtras = new HashMap<String, Object>(localExtras);
+    public void setLocalExtras(@Nullable final Map<String, Object> localExtras) {
+        if (localExtras == null) {
+            mLocalExtras = Collections.emptyMap();
+        } else {
+            mLocalExtras = new HashMap<String, Object>(localExtras);
+        }
     }
 
     public void makeRequest() {
         makeRequest((RequestParameters)null);
     }
 
-    public void makeRequest(final RequestParameters requestParameters) {
+    public void makeRequest(@Nullable final RequestParameters requestParameters) {
         makeRequest(requestParameters, null);
     }
 
-    public void makeRequest(final RequestParameters requestParameters,
-            Integer sequenceNumber) {
+    public void makeRequest(@Nullable final RequestParameters requestParameters,
+            @Nullable Integer sequenceNumber) {
         makeRequest(new NativeGpsHelperListener(requestParameters, sequenceNumber));
     }
 
-    void makeRequest(final NativeGpsHelperListener nativeGpsHelperListener) {
+    void makeRequest(@NonNull final NativeGpsHelperListener nativeGpsHelperListener) {
         final Context context = getContextOrDestroy();
         if (context == null) {
             return;
@@ -161,9 +170,9 @@ void makeRequest(final NativeGpsHelperListener nativeGpsHelperListener) {
         );
     }
 
-
-    private void loadNativeAd(final RequestParameters requestParameters,
-            final Integer sequenceNumber) {
+    private void loadNativeAd(
+            @Nullable final RequestParameters requestParameters,
+            @Nullable final Integer sequenceNumber) {
         final Context context = getContextOrDestroy();
         if (context == null) {
             return;
@@ -177,7 +186,7 @@ private void loadNativeAd(final RequestParameters requestParameters,
             generator.withSequenceNumber(sequenceNumber);
         }
 
-        final String endpointUrl = generator.generateUrlString(Constants.NATIVE_HOST);
+        final String endpointUrl = generator.generateUrlString(Constants.HOST);
 
         if (endpointUrl != null) {
             MoPubLog.d("Loading ad from: " + endpointUrl);
@@ -190,7 +199,7 @@ void loadNativeAd(final RequestParameters requestParameters) {
         loadNativeAd(requestParameters, null);
     }
 
-    void requestNativeAd(final String endpointUrl) {
+    void requestNativeAd(@Nullable final String endpointUrl) {
         final Context context = getContextOrDestroy();
         if (context == null) {
             return;
@@ -213,55 +222,15 @@ void requestNativeAd(final String endpointUrl) {
     }
 
     private void downloadJson(final HttpUriRequest httpUriRequest) {
-        final DownloadTask jsonDownloadTask = new DownloadTask(new DownloadTask.DownloadTaskListener() {
-            @Override
-            public void onComplete(final String url, final DownloadResponse downloadResponse) {
-                if (downloadResponse == null) {
-                    mMoPubNativeNetworkListener.onNativeFail(UNSPECIFIED);
-                } else if (downloadResponse.getStatusCode() >= 500 &&
-                        downloadResponse.getStatusCode() < 600) {
-                    mMoPubNativeNetworkListener.onNativeFail(SERVER_ERROR_RESPONSE_CODE);
-                } else if (downloadResponse.getStatusCode() != HttpStatus.SC_OK) {
-                    mMoPubNativeNetworkListener.onNativeFail(UNEXPECTED_RESPONSE_CODE);
-                } else if (downloadResponse.getContentLength() == 0) {
-                    mMoPubNativeNetworkListener.onNativeFail(EMPTY_AD_RESPONSE);
-                } else {
-                    final CustomEventNativeListener customEventNativeListener = new CustomEventNativeListener() {
-                        @Override
-                        public void onNativeAdLoaded(final NativeAdInterface nativeAd) {
-                            final Context context = getContextOrDestroy();
-                            if (context == null) {
-                                return;
-                            }
-                            mMoPubNativeNetworkListener.onNativeLoad(new NativeResponse(context, downloadResponse, mAdUnitId, nativeAd, mMoPubNativeEventListener));
-                        }
-
-                        @Override
-                        public void onNativeAdFailed(final NativeErrorCode errorCode) {
-                            requestNativeAd(downloadResponse.getFirstHeader(ResponseHeader.FAIL_URL));
-                        }
-                    };
-
-                    final Context context = getContextOrDestroy();
-                    if (context == null) {
-                        return;
-                    }
-
-                    CustomEventNativeAdapter.loadNativeAd(
-                            context,
-                            mLocalExtras,
-                            downloadResponse,
-                            customEventNativeListener
-                    );
-                }
-            }
-        });
+        final DownloadTask jsonDownloadTask = new DownloadTask(
+                new AdRequestListener(),
+                MoPubEvents.Type.AD_REQUEST
+        );
 
         try {
             AsyncTasks.safeExecuteOnExecutor(jsonDownloadTask, httpUriRequest);
         } catch (Exception e) {
             MoPubLog.d("Failed to download json", e);
-
             mMoPubNativeNetworkListener.onNativeFail(UNSPECIFIED);
         }
 
@@ -298,12 +267,64 @@ public void onFetchAdInfoCompleted() {
         }
     }
 
+    private class AdRequestListener implements DownloadTask.DownloadTaskListener {
+        @Override
+        public void onComplete(@Nullable final String url,
+                @Nullable final DownloadResponse downloadResponse) {
+            if (downloadResponse == null) {
+                mMoPubNativeNetworkListener.onNativeFail(UNSPECIFIED);
+            } else if (downloadResponse.getStatusCode() >= 500 &&
+                    downloadResponse.getStatusCode() < 600) {
+                mMoPubNativeNetworkListener.onNativeFail(SERVER_ERROR_RESPONSE_CODE);
+            } else if (downloadResponse.getStatusCode() != HttpStatus.SC_OK) {
+                mMoPubNativeNetworkListener.onNativeFail(UNEXPECTED_RESPONSE_CODE);
+            } else if (downloadResponse.getContentLength() == 0) {
+                mMoPubNativeNetworkListener.onNativeFail(EMPTY_AD_RESPONSE);
+            } else {
+                final CustomEventNativeListener customEventNativeListener =
+                        new CustomEventNativeListener() {
+                            @Override
+                            public void onNativeAdLoaded(@NonNull final NativeAdInterface nativeAd) {
+                                final Context context = getContextOrDestroy();
+                                if (context == null) {
+                                    return;
+                                }
+                                mMoPubNativeNetworkListener.onNativeLoad(new NativeResponse(context,
+                                        downloadResponse,
+                                        mAdUnitId,
+                                        nativeAd,
+                                        mMoPubNativeEventListener));
+                            }
+
+                            @Override
+                            public void onNativeAdFailed(final NativeErrorCode errorCode) {
+                                requestNativeAd(downloadResponse.getFirstHeader(ResponseHeader.FAIL_URL));
+                            }
+                        };
+
+                final Context context = getContextOrDestroy();
+                if (context == null) {
+                    return;
+                }
+
+                CustomEventNativeAdapter.loadNativeAd(
+                        context,
+                        mLocalExtras,
+                        downloadResponse,
+                        customEventNativeListener
+                );
+            }
+        }
+    }
+
+    @NonNull
     @VisibleForTesting
     @Deprecated
     MoPubNativeNetworkListener getMoPubNativeNetworkListener() {
         return mMoPubNativeNetworkListener;
     }
 
+    @NonNull
     @VisibleForTesting
     @Deprecated
     MoPubNativeEventListener getMoPubNativeEventListener() {
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdPositioning.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdPositioning.java
index 593439ee..d3e1b6c9 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdPositioning.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdPositioning.java
@@ -1,5 +1,7 @@
 package com.mopub.nativeads;
 
+import android.support.annotation.NonNull;
+
 import com.mopub.common.Preconditions;
 
 import java.util.ArrayList;
@@ -38,7 +40,7 @@
          */
         public static final int NO_REPEAT = Integer.MAX_VALUE;
 
-        private final ArrayList<Integer> mFixedPositions = new ArrayList<Integer>();
+        @NonNull private final ArrayList<Integer> mFixedPositions = new ArrayList<Integer>();
         private int mRepeatInterval = NO_REPEAT;
 
         public MoPubClientPositioning() {
@@ -50,6 +52,7 @@ public MoPubClientPositioning() {
          * @param position The ad position.
          * @return This object for easy use in chained setters.
          */
+        @NonNull
         public MoPubClientPositioning addFixedPosition(final int position) {
             if (!Preconditions.NoThrow.checkArgument(position >= 0)) {
                 return this;
@@ -68,6 +71,7 @@ public MoPubClientPositioning addFixedPosition(final int position) {
          *
          * @return Fixed ad positions.
          */
+        @NonNull
         List<Integer> getFixedPositions() {
             return mFixedPositions;
         }
@@ -79,6 +83,7 @@ public MoPubClientPositioning addFixedPosition(final int position) {
          * the constant NO_REPEAT.
          * @return This object for easy use in chained setters.
          */
+        @NonNull
         public MoPubClientPositioning enableRepeatingPositions(final int interval) {
             if (!Preconditions.NoThrow.checkArgument(
                     interval > 1, "Repeating interval must be greater than 1")) {
@@ -102,7 +107,10 @@ int getRepeatingInterval() {
         }
     }
 
-    static MoPubClientPositioning clone(MoPubClientPositioning positioning) {
+    @NonNull
+    static MoPubClientPositioning clone(@NonNull MoPubClientPositioning positioning) {
+        Preconditions.checkNotNull(positioning);
+
         MoPubClientPositioning clone = new MoPubClientPositioning();
         clone.mFixedPositions.addAll(positioning.mFixedPositions);
         clone.mRepeatInterval = positioning.mRepeatInterval;
@@ -113,6 +121,7 @@ static MoPubClientPositioning clone(MoPubClientPositioning positioning) {
      * Creates and returns a {@link MoPubClientPositioning} object.
      * @return A new positioning object.
      */
+    @NonNull
     public static MoPubClientPositioning clientPositioning() {
         return new MoPubClientPositioning();
     }
@@ -121,6 +130,7 @@ public static MoPubClientPositioning clientPositioning() {
      * Creates and returns a {@link MoPubServerPositioning} object.
      * @return A new positioning object.
      */
+    @NonNull
     public static MoPubServerPositioning serverPositioning() {
         return new MoPubServerPositioning();
     }
@@ -133,6 +143,7 @@ public static MoPubServerPositioning serverPositioning() {
      * the MoPub UI. If you still want to hard-code positioning information in your app,
      * use {@link #clientPositioning} instead of this builder.
      */
+    @NonNull
     @Deprecated
     public static Builder newBuilder() {
         return new Builder();
@@ -143,12 +154,14 @@ public static Builder newBuilder() {
      */
     @Deprecated
     public static final class Builder extends MoPubClientPositioning {
+        @NonNull
         @Override
         public Builder addFixedPosition(final int position) {
             super.addFixedPosition(position);
             return this;
         }
 
+        @NonNull
         @Override
         public Builder enableRepeatingPositions(final int interval) {
             super.enableRepeatingPositions(interval);
@@ -160,6 +173,7 @@ public Builder enableRepeatingPositions(final int interval) {
          *
          * @return A new positioning object.
          */
+        @NonNull
         @Deprecated
         public MoPubClientPositioning build() {
             return this;
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdRenderer.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdRenderer.java
index e33dd2c6..4fd91ecf 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdRenderer.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdRenderer.java
@@ -1,12 +1,13 @@
 package com.mopub.nativeads;
 
 import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 
 import com.mopub.common.VisibleForTesting;
-import com.mopub.common.logging.MoPubLog;
 
 import java.util.WeakHashMap;
 
@@ -16,60 +17,40 @@
  * An implementation of {@link com.mopub.nativeads.MoPubAdRenderer} for rendering native ads.
  */
 public class MoPubNativeAdRenderer implements MoPubAdRenderer<NativeResponse> {
-
-    private final ViewBinder mViewBinder;
+    @NonNull private final ViewBinder mViewBinder;
 
     // This is used instead of View.setTag, which causes a memory leak in 2.3
     // and earlier: https://code.google.com/p/android/issues/detail?id=18273
-    private final WeakHashMap<View, NativeViewHolder> mViewHolderMap;
+    @VisibleForTesting @NonNull final WeakHashMap<View, NativeViewHolder> mViewHolderMap;
 
     /**
      * Constructs a native ad renderer with a view binder.
      *
      * @param viewBinder The view binder to use when inflating and rendering an ad.
      */
-    public MoPubNativeAdRenderer(final ViewBinder viewBinder) {
+    public MoPubNativeAdRenderer(@NonNull final ViewBinder viewBinder) {
         mViewBinder = viewBinder;
         mViewHolderMap = new WeakHashMap<View, NativeViewHolder>();
     }
 
     @Override
-    public View createAdView(final Context context, final ViewGroup parent) {
+    @NonNull
+    public View createAdView(@NonNull final Context context, @Nullable final ViewGroup parent) {
         return LayoutInflater
                 .from(context)
                 .inflate(mViewBinder.layoutId, parent, false);
     }
 
     @Override
-    public void renderAdView(final View view, final NativeResponse nativeResponse) {
-        final NativeViewHolder nativeViewHolder = getOrCreateNativeViewHolder(view, mViewBinder);
-
-        if (nativeViewHolder == null) {
-            MoPubLog.d("Could not create NativeViewHolder.");
-            return;
-        }
-
-        populateConvertViewSubViews(view, nativeViewHolder, nativeResponse, mViewBinder);
-        view.setVisibility(VISIBLE);
-    }
-
-    @VisibleForTesting
-    NativeViewHolder getOrCreateNativeViewHolder(final View view, final ViewBinder viewBinder) {
-        // Create view holder and put it in the view tag
+    public void renderAdView(@NonNull final View view,
+            @NonNull final NativeResponse nativeResponse) {
         NativeViewHolder nativeViewHolder = mViewHolderMap.get(view);
         if (nativeViewHolder == null) {
-            nativeViewHolder = NativeViewHolder.fromViewBinder(view, viewBinder);
+            nativeViewHolder = NativeViewHolder.fromViewBinder(view, mViewBinder);
             mViewHolderMap.put(view, nativeViewHolder);
-            return nativeViewHolder;
         }
-        return nativeViewHolder;
-    }
-
-    private void populateConvertViewSubViews(final View view,
-            final NativeViewHolder nativeViewHolder,
-            final NativeResponse nativeResponse,
-            final ViewBinder viewBinder) {
         nativeViewHolder.update(nativeResponse);
-        nativeViewHolder.updateExtras(view, nativeResponse, viewBinder);
+        nativeViewHolder.updateExtras(view, nativeResponse, mViewBinder);
+        view.setVisibility(VISIBLE);
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
index 0234a56b..316041ac 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
@@ -2,14 +2,23 @@
 
 import android.content.Context;
 import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.view.View;
 import android.view.ViewGroup;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.Preconditions.NoThrow;
 import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
 import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubServerPositioning;
 import com.mopub.nativeads.PositioningSource.PositioningListener;
 
-import java.util.*;
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.WeakHashMap;
 
 /**
  * @code MoPubStreamAdPlacer facilitates loading ads and placing them into a content stream.
@@ -29,25 +38,39 @@
      * instead of an ad.
      */
     public static final int CONTENT_VIEW_TYPE = 0;
+    private final static MoPubNativeAdLoadedListener EMPTY_NATIVE_AD_LOADED_LISTENER =
+            new MoPubNativeAdLoadedListener() {
+                @Override
+                public void onAdLoaded(final int position) {
+                }
+
+                @Override
+                public void onAdRemoved(final int position) {
+                }
+            };
 
-    private final Context mContext;
-    private final Handler mPlacementHandler;
-    private final Runnable mPlacementRunnable;
-    private final PositioningSource mPositioningSource;
-    private final NativeAdSource mAdSource;
-    private final ImpressionTracker mImpressionTracker;
-    private final WeakHashMap<View, NativeResponse> mNativeResponseMap;
+    @NonNull private final Context mContext;
+    @NonNull private final Handler mPlacementHandler;
+    @NonNull private final Runnable mPlacementRunnable;
+    @NonNull private final PositioningSource mPositioningSource;
+    @NonNull private final NativeAdSource mAdSource;
+    @NonNull private final ImpressionTracker mImpressionTracker;
+
+    @NonNull private final HashMap<NativeResponse, WeakReference<View>> mViewMap;
+    @NonNull private final WeakHashMap<View, NativeResponse> mNativeResponseMap;
 
     private boolean mHasReceivedPositions;
-    private PlacementData mPendingPlacementData;
+    @NonNull private PlacementData mPendingPlacementData;
     private boolean mHasReceivedAds;
     private boolean mHasPlacedAds;
-    private PlacementData mPlacementData;
+    @NonNull private PlacementData mPlacementData;
     
-    private MoPubAdRenderer mAdRenderer;
-    private String mAdUnitId;
+    @Nullable private MoPubAdRenderer mAdRenderer;
+    @Nullable private String mAdUnitId;
+
+    @NonNull private MoPubNativeAdLoadedListener mAdLoadedListener =
+            EMPTY_NATIVE_AD_LOADED_LISTENER;
 
-    private MoPubNativeAdLoadedListener mAdLoadedListener;
     // The visible range is the range of items which we believe are visible, inclusive.
     // Placing ads near this range makes for a smoother user experience when scrolling up
     // or down.
@@ -69,7 +92,7 @@
      *
      * @param context The activity context.
      */
-    public MoPubStreamAdPlacer(final Context context) {
+    public MoPubStreamAdPlacer(@NonNull final Context context) {
         // MoPubClientPositioning is mutable, so we must take care not to hold a
         // reference to it that might be subsequently modified by the caller.
         this(context, MoPubNativeAdPositioning.serverPositioning());
@@ -82,7 +105,8 @@ public MoPubStreamAdPlacer(final Context context) {
      * @param adPositioning A positioning object for specifying where ads will be placed in your
      * stream. See {@link MoPubNativeAdPositioning#serverPositioning()}.
      */
-    public MoPubStreamAdPlacer(final Context context, final MoPubServerPositioning adPositioning) {
+    public MoPubStreamAdPlacer(@NonNull final Context context,
+            @NonNull final MoPubServerPositioning adPositioning) {
         this(context,
                 new NativeAdSource(),
                 new ImpressionTracker(context),
@@ -96,7 +120,8 @@ public MoPubStreamAdPlacer(final Context context, final MoPubServerPositioning a
      * @param adPositioning A positioning object for specifying where ads will be placed in your
      * stream. See {@link MoPubNativeAdPositioning#clientPositioning()}.
      */
-    public MoPubStreamAdPlacer(final Context context, final MoPubClientPositioning adPositioning) {
+    public MoPubStreamAdPlacer(@NonNull final Context context,
+            @NonNull final MoPubClientPositioning adPositioning) {
         // MoPubClientPositioning is mutable, so we must take care not to hold a
         // reference to it that might be subsequently modified by the caller.
         this(context,
@@ -106,16 +131,25 @@ public MoPubStreamAdPlacer(final Context context, final MoPubClientPositioning a
     }
 
     @VisibleForTesting
-    MoPubStreamAdPlacer(final Context context,
-            final NativeAdSource adSource,
-            final ImpressionTracker impressionTracker,
-            final PositioningSource positioningSource) {
+    MoPubStreamAdPlacer(@NonNull final Context context,
+            @NonNull final NativeAdSource adSource,
+            @NonNull final ImpressionTracker impressionTracker,
+            @NonNull final PositioningSource positioningSource) {
+        Preconditions.checkNotNull(context, "context is not allowed to be null");
+        Preconditions.checkNotNull(adSource, "adSource is not allowed to be null");
+        Preconditions.checkNotNull(impressionTracker, "impressionTracker is not allowed to be " +
+                "null");
+        Preconditions.checkNotNull(positioningSource, "positioningSource is not allowed to be " +
+                "null");
+
         mContext = context;
         mImpressionTracker = impressionTracker;
         mPositioningSource = positioningSource;
         mAdSource = adSource;
         mPlacementData = PlacementData.empty();
+
         mNativeResponseMap = new WeakHashMap<View, NativeResponse>();
+        mViewMap = new HashMap<NativeResponse, WeakReference<View>>();
 
         mPlacementHandler = new Handler();
         mPlacementRunnable = new Runnable() {
@@ -142,7 +176,10 @@ public void run() {
      *
      * @param adRenderer The ad renderer.
      */
-    public void registerAdRenderer(final MoPubAdRenderer adRenderer) {
+    public void registerAdRenderer(@NonNull final MoPubAdRenderer adRenderer) {
+        if (!NoThrow.checkNotNull(adRenderer, "Cannot register a null adRenderer")) {
+            return;
+        }
         mAdRenderer = adRenderer;
     }
 
@@ -158,8 +195,8 @@ public void registerAdRenderer(final MoPubAdRenderer adRenderer) {
      *
      * @param listener The listener.
      */
-    public void setAdLoadedListener(final MoPubNativeAdLoadedListener listener) {
-        mAdLoadedListener = listener;
+    public void setAdLoadedListener(@Nullable final MoPubNativeAdLoadedListener listener) {
+        mAdLoadedListener = (listener == null) ? EMPTY_NATIVE_AD_LOADED_LISTENER : listener;
     }
 
     /**
@@ -170,7 +207,7 @@ public void setAdLoadedListener(final MoPubNativeAdLoadedListener listener) {
      *
      * @param adUnitId The ad unit ID to use when loading ads.
      */
-    public void loadAds(final String adUnitId) {
+    public void loadAds(@NonNull final String adUnitId) {
         loadAds(adUnitId, /* requestParameters */ null);
     }
 
@@ -188,8 +225,17 @@ public void loadAds(final String adUnitId) {
      * @param adUnitId The ad unit ID to use when loading ads.
      * @param requestParameters Targeting information to pass to the ad server.
      */
-    public void loadAds(final String adUnitId,
-            final RequestParameters requestParameters) {
+    public void loadAds(@NonNull final String adUnitId,
+            @Nullable final RequestParameters requestParameters) {
+        if (!NoThrow.checkNotNull(adUnitId, "Cannot load ads with a null ad unit ID")) {
+            return;
+        }
+
+        if (mAdRenderer == null) {
+            MoPubLog.w("You must call registerAdRenderer before loading ads");
+            return;
+        }
+
         mAdUnitId = adUnitId;
 
         mHasPlacedAds = false;
@@ -198,12 +244,15 @@ public void loadAds(final String adUnitId,
 
         mPositioningSource.loadPositions(adUnitId, new PositioningListener() {
             @Override
-            public void onLoad(final MoPubClientPositioning positioning) {
+            public void onLoad(@NonNull final MoPubClientPositioning positioning) {
                 handlePositioningLoad(positioning);
             }
 
             @Override
             public void onFailed() {
+                // This will happen only if positions couldn't be loaded after several tries
+                MoPubLog.d("Unable to show ads because ad positions could not be loaded from " +
+                        "the MoPub ad server.");
             }
         });
 
@@ -218,7 +267,7 @@ public void onAdsAvailable() {
     }
 
     @VisibleForTesting
-    void handlePositioningLoad(final MoPubClientPositioning positioning) {
+    void handlePositioningLoad(@NonNull final MoPubClientPositioning positioning) {
         PlacementData placementData = PlacementData.fromAdPositioning(positioning);
         if (mHasReceivedAds) {
             placeInitialAds(placementData);
@@ -333,6 +382,7 @@ public void destroy() {
      * @param position The position where to place an ad.
      * @return An object representing ad data.
      */
+    @Nullable
     public Object getAdData(final int position) {
         return mPlacementData.getPlacedAd(position);
     }
@@ -348,22 +398,32 @@ public Object getAdData(final int position) {
      * @param parent The parent that the view will eventually be attached to.
      * @return The newly placed ad view.
      */
-    public View getAdView(final int position, final View convertView, final ViewGroup parent) {
-        if (!isAd(position)) {
+    @Nullable
+    public View getAdView(final int position, @Nullable final View convertView,
+            @Nullable final ViewGroup parent) {
+        final NativeAdData adData = mPlacementData.getPlacedAd(position);
+        if (adData == null) {
             return null;
         }
 
-        final NativeAdData adData = mPlacementData.getPlacedAd(position);
         final MoPubAdRenderer adRenderer = adData.getAdRenderer();
         final View view = (convertView != null) ?
                 convertView : adRenderer.createAdView(mContext, parent);
 
         NativeResponse nativeResponse = adData.getAd();
-        if (!nativeResponse.equals(mNativeResponseMap.get(view))) {
+        WeakReference<View> mappedViewRef = mViewMap.get(nativeResponse);
+        View mappedView = null;
+        if (mappedViewRef != null) {
+            mappedView = mappedViewRef.get();
+        }
+        if (!view.equals(mappedView)) {
+            clearNativeResponse(mappedView);
             clearNativeResponse(view);
             prepareNativeResponse(nativeResponse, view);
+            //noinspection unchecked
             adRenderer.renderAdView(view, nativeResponse);
         }
+
         return view;
     }
 
@@ -494,7 +554,11 @@ public int getAdjustedCount(final int originalCount) {
      */
     public void setItemCount(final int originalCount) {
         mItemCount = mPlacementData.getAdjustedCount(originalCount);
-        notifyNeedsPlacement();
+
+        // If we haven't already placed ads, we'll let ads get placed by the normal loadAds call
+        if (mHasPlacedAds) {
+            notifyNeedsPlacement();
+        }
     }
 
     /**
@@ -615,25 +679,34 @@ private boolean tryPlaceAd(final int position) {
         mPlacementData.placeAd(position, adData);
         mItemCount++;
 
-        if (mAdLoadedListener != null) {
-            mAdLoadedListener.onAdLoaded(position);
-        }
+        mAdLoadedListener.onAdLoaded(position);
         return true;
     }
 
-    private NativeAdData createAdData(final int position, final NativeResponse adResponse) {
+    @NonNull
+    private NativeAdData createAdData(final int position, @NonNull final NativeResponse adResponse) {
+        Preconditions.checkNotNull(mAdUnitId);
+        Preconditions.checkNotNull(mAdRenderer);
+
+        //noinspection ConstantConditions
         return new NativeAdData(mAdUnitId, mAdRenderer, adResponse);
     }
 
-    private void clearNativeResponse(final View view) {
+    private void clearNativeResponse(@Nullable final View view) {
+        if (view == null) {
+            return;
+        }
         mImpressionTracker.removeView(view);
         final NativeResponse lastNativeResponse = mNativeResponseMap.get(view);
         if (lastNativeResponse != null) {
             lastNativeResponse.clear(view);
+            mNativeResponseMap.remove(view);
+            mViewMap.remove(lastNativeResponse);
         }
     }
 
-    private void prepareNativeResponse(final NativeResponse nativeResponse, final View view) {
+    private void prepareNativeResponse(@NonNull final NativeResponse nativeResponse, @NonNull final View view) {
+        mViewMap.put(nativeResponse, new WeakReference<View>(view));
         mNativeResponseMap.put(view, nativeResponse);
         if (!nativeResponse.isOverridingImpressionTracker()) {
             mImpressionTracker.addView(view, nativeResponse);
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdData.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdData.java
index d4623a35..1f110083 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdData.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdData.java
@@ -1,29 +1,34 @@
 package com.mopub.nativeads;
 
+import android.support.annotation.NonNull;
+
 /**
  * An object that represents placed ads in a {@link com.mopub.nativeads.MoPubStreamAdPlacer}
  */
 class NativeAdData {
-    private final String adUnitId;
-    private final MoPubAdRenderer adRenderer;
-    private final NativeResponse adResponse;
+    @NonNull private final String adUnitId;
+    @NonNull private final MoPubAdRenderer adRenderer;
+    @NonNull private final NativeResponse adResponse;
 
-    NativeAdData(final String adUnitId,
-            final MoPubAdRenderer adRenderer,
-            final NativeResponse adResponse) {
+    NativeAdData(@NonNull final String adUnitId,
+            @NonNull final MoPubAdRenderer adRenderer,
+            @NonNull final NativeResponse adResponse) {
         this.adUnitId = adUnitId;
         this.adRenderer = adRenderer;
         this.adResponse = adResponse;
     }
 
+    @NonNull
     String getAdUnitId() {
         return adUnitId;
     }
 
+    @NonNull
     MoPubAdRenderer getAdRenderer() {
         return adRenderer;
     }
 
+    @NonNull
     NativeResponse getAd() {
         return adResponse;
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdInterface.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdInterface.java
index d748a681..2b52e576 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdInterface.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdInterface.java
@@ -1,5 +1,7 @@
 package com.mopub.nativeads;
 
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.view.View;
 
 import java.util.Map;
@@ -9,32 +11,52 @@
 
 interface NativeAdInterface {
     // Getters
+    @Nullable
     String getMainImageUrl();
+
+    @Nullable
     String getIconImageUrl();
+
+    @Nullable
     String getClickDestinationUrl();
+
+    @Nullable
     String getCallToAction();
+
+    @Nullable
     String getTitle();
+
+    @Nullable
     String getText();
+
+    @Nullable
     Double getStarRating();
 
+    @NonNull
     Set<String> getImpressionTrackers();
+
     int getImpressionMinPercentageViewed();
+
     int getImpressionMinTimeViewed();
 
     boolean isOverridingClickTracker();
+
     boolean isOverridingImpressionTracker();
 
     // Extras Getters
+    @Nullable
     Object getExtra(final String key);
+
+    @NonNull
     Map<String, Object> getExtras();
 
     // Setters
-    void setNativeEventListener(final NativeEventListener nativeEventListener);
+    void setNativeEventListener(@Nullable final NativeEventListener nativeEventListener);
 
     // Event Handlers
-    void prepare(final View view);
+    void prepare(@NonNull final View view);
     void recordImpression();
-    void handleClick(final View view);
-    void clear(final View view);
+    void handleClick(@Nullable final View view);
+    void clear(@NonNull final View view);
     void destroy();
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdSource.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdSource.java
index 29d8fda9..6e6a4fd8 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdSource.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdSource.java
@@ -3,6 +3,8 @@
 import android.content.Context;
 import android.os.Handler;
 import android.os.SystemClock;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 
 import com.mopub.common.VisibleForTesting;
 
@@ -34,21 +36,21 @@
     private static final int MAXIMUM_RETRY_TIME_MILLISECONDS = 5 * 60 * 1000; // 5 minutes.
     private static final double EXPONENTIAL_BACKOFF_FACTOR = 2.0;
 
-    private final List<TimestampWrapper<NativeResponse>> mNativeAdCache;
-    private final Handler mReplenishCacheHandler;
-    private final Runnable mReplenishCacheRunnable;
-    private final MoPubNativeNetworkListener mMoPubNativeNetworkListener;
+    @NonNull private final List<TimestampWrapper<NativeResponse>> mNativeAdCache;
+    @NonNull private final Handler mReplenishCacheHandler;
+    @NonNull private final Runnable mReplenishCacheRunnable;
+    @NonNull private final MoPubNativeNetworkListener mMoPubNativeNetworkListener;
 
     @VisibleForTesting boolean mRequestInFlight;
     @VisibleForTesting boolean mRetryInFlight;
     @VisibleForTesting int mSequenceNumber;
     @VisibleForTesting int mRetryTimeMilliseconds;
 
-    private AdSourceListener mAdSourceListener;
+    @Nullable private AdSourceListener mAdSourceListener;
 
     // We will need collections of these when we support multiple ad units.
-    private RequestParameters mRequestParameters;
-    private MoPubNative mMoPubNative;
+    @Nullable private RequestParameters mRequestParameters;
+    @Nullable private MoPubNative mMoPubNative;
 
     /**
      * A listener for when ads are available for dequeueing.
@@ -65,8 +67,8 @@
     }
 
     @VisibleForTesting
-    NativeAdSource(final List<TimestampWrapper<NativeResponse>> nativeAdCache,
-            final Handler replenishCacheHandler) {
+    NativeAdSource(@NonNull final List<TimestampWrapper<NativeResponse>> nativeAdCache,
+            @NonNull final Handler replenishCacheHandler) {
         mNativeAdCache = nativeAdCache;
         mReplenishCacheHandler = replenishCacheHandler;
         mReplenishCacheRunnable = new Runnable() {
@@ -80,7 +82,7 @@ public void run() {
         // Construct native URL and start filling the cache
         mMoPubNativeNetworkListener = new MoPubNativeNetworkListener() {
             @Override
-            public void onNativeLoad(final NativeResponse nativeResponse) {
+            public void onNativeLoad(@NonNull final NativeResponse nativeResponse) {
                 // This can be null if the ad source was cleared as the AsyncTask is posting
                 // back to the UI handler. Drop this response.
                 if (mMoPubNative == null) {
@@ -125,12 +127,12 @@ public void onNativeFail(final NativeErrorCode errorCode) {
      * Sets a adSourceListener for determining when ads are available.
      * @param adSourceListener An AdSourceListener.
      */
-    void setAdSourceListener(final AdSourceListener adSourceListener) {
+    void setAdSourceListener(@Nullable final AdSourceListener adSourceListener) {
         mAdSourceListener = adSourceListener;
     }
 
-    void loadAds(final Context context,
-            final String adUnitId,
+    void loadAds(@NonNull final Context context,
+            @NonNull final String adUnitId,
             final RequestParameters requestParameters) {
         loadAds(requestParameters, new MoPubNative(context, adUnitId, mMoPubNativeNetworkListener));
     }
@@ -179,6 +181,7 @@ void clear() {
      *
      * @return Ad ad item that should be rendered into a view.
      */
+    @Nullable
     NativeResponse dequeueAd() {
         final long now = SystemClock.uptimeMillis();
 
@@ -231,6 +234,7 @@ void setMoPubNative(final MoPubNative moPubNative) {
         mMoPubNative = moPubNative;
     }
 
+    @NonNull
     @Deprecated
     @VisibleForTesting
     MoPubNativeNetworkListener getMoPubNativeNetworkListener() {
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
index 969d27d6..496e89af 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
@@ -1,6 +1,8 @@
 package com.mopub.nativeads;
 
 import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.view.View;
 import android.view.ViewGroup;
 
@@ -17,7 +19,8 @@
  */
 @Deprecated
 class NativeAdViewHelper {
-    private NativeAdViewHelper() {}
+    private NativeAdViewHelper() {
+    }
 
     // Because the impression tracker requires tracking drawing views,
     // each context requires a separate impression tracker. To avoid leaking, keep weak references.
@@ -31,17 +34,12 @@ private NativeAdViewHelper() {}
             new WeakHashMap<View, NativeResponse>();
 
     @Deprecated
-    static View getAdView(View convertView,
-                          final ViewGroup parent,
-                          final Context context,
-                          final NativeResponse nativeResponse,
-                          final ViewBinder viewBinder,
-                          final MoPubNativeListener moPubNativeListener) {
-
-        if (viewBinder == null) {
-            MoPubLog.d("ViewBinder is null, returning empty view.");
-            return new View(context);
-        }
+    @NonNull
+    static View getAdView(@Nullable View convertView,
+            @Nullable final ViewGroup parent,
+            @NonNull final Context context,
+            @NonNull final NativeResponse nativeResponse,
+            @NonNull final ViewBinder viewBinder) {
 
         final MoPubNativeAdRenderer moPubNativeAdRenderer = new MoPubNativeAdRenderer(viewBinder);
         if (convertView == null) {
@@ -50,11 +48,7 @@ static View getAdView(View convertView,
 
         clearNativeResponse(context, convertView);
 
-        if (nativeResponse == null) {
-            // If we don't have content for the view, then hide the view for now
-            MoPubLog.d("NativeResponse is null, returning hidden view.");
-            convertView.setVisibility(GONE);
-        } else if (nativeResponse.isDestroyed()) {
+        if (nativeResponse.isDestroyed()) {
             MoPubLog.d("NativeResponse is destroyed, returning hidden view.");
             convertView.setVisibility(GONE);
         } else {
@@ -65,7 +59,8 @@ static View getAdView(View convertView,
         return convertView;
     }
 
-    private static void clearNativeResponse(final Context context, final View view) {
+    private static void clearNativeResponse(@NonNull final Context context,
+            @NonNull final View view) {
         getImpressionTracker(context).removeView(view);
         final NativeResponse nativeResponse = sNativeResponseMap.get(view);
         if (nativeResponse != null) {
@@ -73,9 +68,9 @@ private static void clearNativeResponse(final Context context, final View view)
         }
     }
 
-    private static void prepareNativeResponse(final Context context,
-            final View view,
-            final NativeResponse nativeResponse) {
+    private static void prepareNativeResponse(@NonNull final Context context,
+            @NonNull final View view,
+            @NonNull final NativeResponse nativeResponse) {
         sNativeResponseMap.put(view, nativeResponse);
         if (!nativeResponse.isOverridingImpressionTracker()) {
             getImpressionTracker(context).addView(view, nativeResponse);
@@ -83,7 +78,7 @@ private static void prepareNativeResponse(final Context context,
         nativeResponse.prepare(view);
     }
 
-    private static ImpressionTracker getImpressionTracker(final Context context) {
+    private static ImpressionTracker getImpressionTracker(@NonNull final Context context) {
         ImpressionTracker impressionTracker = sImpressionTrackerMap.get(context);
         if (impressionTracker == null) {
             impressionTracker = new ImpressionTracker(context);
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeErrorCode.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeErrorCode.java
index 7999f22f..0dd85382 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeErrorCode.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeErrorCode.java
@@ -1,5 +1,7 @@
 package com.mopub.nativeads;
 
+import android.support.annotation.NonNull;
+
 public enum NativeErrorCode {
     EMPTY_AD_RESPONSE("Server returned empty response."),
     INVALID_JSON("Unable to parse JSON response from server."),
@@ -24,6 +26,7 @@ private NativeErrorCode(String message) {
         this.message = message;
     }
 
+    @NonNull
     @Override
     public final String toString() {
         return message;
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java
index c0eeb9ed..cdb8fae0 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java
@@ -3,6 +3,8 @@
 import android.content.Context;
 import android.content.Intent;
 import android.net.Uri;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.ImageView;
@@ -11,6 +13,7 @@
 import com.mopub.common.HttpClient;
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.VisibleForTesting;
+import com.mopub.common.event.MoPubEvents;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.IntentUtils;
 import com.mopub.common.util.ResponseHeader;
@@ -54,15 +57,16 @@
         CALL_TO_ACTION("ctatext", false),
         STAR_RATING("starrating", false);
 
-        final String name;
+        @NonNull final String name;
         final boolean required;
 
-        Parameter(final String name, boolean required) {
+        Parameter(@NonNull final String name, boolean required) {
             this.name = name;
             this.required = required;
         }
 
-        static Parameter from(final String name) {
+        @Nullable
+        static Parameter from(@NonNull final String name) {
             for (final Parameter parameter : values()) {
                 if (parameter.name.equals(name)) {
                     return parameter;
@@ -72,6 +76,7 @@ static Parameter from(final String name) {
             return null;
         }
 
+        @NonNull
         @VisibleForTesting
         static final Set<String> requiredKeys = new HashSet<String>();
         static {
@@ -83,24 +88,24 @@ static Parameter from(final String name) {
         }
     }
 
-    private final Context mContext;
-    private MoPubNativeEventListener mMoPubNativeEventListener;
-    private final NativeAdInterface mNativeAd;
+    @NonNull private final Context mContext;
+    @NonNull private MoPubNativeEventListener mMoPubNativeEventListener;
+    @NonNull private final NativeAdInterface mNativeAd;
 
     // Impression and click trackers for the MoPub adserver
-    private final Set<String> mMoPubImpressionTrackers;
-    private final String mMoPubClickTracker;
-    private final String mAdUnitId;
+    @NonNull private final Set<String> mMoPubImpressionTrackers;
+    @NonNull private final String mMoPubClickTracker;
+    @NonNull private final String mAdUnitId;
 
     private boolean mRecordedImpression;
     private boolean mIsClicked;
     private boolean mIsDestroyed;
 
-    public NativeResponse(final Context context,
-            final DownloadResponse downloadResponse,
-            final String adUnitId,
-            final NativeAdInterface nativeAd,
-            final MoPubNativeEventListener moPubNativeEventListener) {
+    public NativeResponse(@NonNull final Context context,
+            @NonNull final DownloadResponse downloadResponse,
+            @NonNull final String adUnitId,
+            @NonNull final NativeAdInterface nativeAd,
+            @NonNull final MoPubNativeEventListener moPubNativeEventListener) {
         mContext = context.getApplicationContext();
         mAdUnitId = adUnitId;
         mMoPubNativeEventListener = moPubNativeEventListener;
@@ -119,7 +124,7 @@ public void onAdClicked() {
 
         mMoPubImpressionTrackers = new HashSet<String>();
         mMoPubImpressionTrackers.add(downloadResponse.getFirstHeader(ResponseHeader.IMPRESSION_URL));
-        mMoPubClickTracker = downloadResponse.getFirstHeader(ResponseHeader.CLICKTHROUGH_URL);
+        mMoPubClickTracker = downloadResponse.getFirstHeader(ResponseHeader.CLICK_TRACKING_URL);
     }
 
     @Override
@@ -141,36 +146,44 @@ public String toString() {
         return stringBuilder.toString();
     }
 
+   @NonNull
    public String getAdUnitId() {
        return mAdUnitId;
    }
 
     // Interface Methods
     // Getters
+    @Nullable
     public String getMainImageUrl() {
         return mNativeAd.getMainImageUrl();
     }
 
+    @Nullable
     public String getIconImageUrl() {
         return mNativeAd.getIconImageUrl();
     }
 
+    @Nullable
     public String getClickDestinationUrl() {
         return mNativeAd.getClickDestinationUrl();
     }
 
+    @Nullable
     public String getCallToAction() {
         return mNativeAd.getCallToAction();
     }
 
+    @Nullable
     public String getTitle() {
         return mNativeAd.getTitle();
     }
 
+    @Nullable
     public String getText() {
         return mNativeAd.getText();
     }
 
+    @NonNull
     public List<String> getImpressionTrackers() {
         final Set<String> allImpressionTrackers = new HashSet<String>();
         allImpressionTrackers.addAll(mMoPubImpressionTrackers);
@@ -178,10 +191,12 @@ public String getText() {
         return new ArrayList<String>(allImpressionTrackers);
     }
 
+    @NonNull
     public String getClickTracker() {
         return mMoPubClickTracker;
     }
 
+    @Nullable
     public Double getStarRating() {
         return mNativeAd.getStarRating();
     }
@@ -195,10 +210,12 @@ public int getImpressionMinPercentageViewed() {
     }
 
     // Extras Getters
+    @Nullable
     public Object getExtra(final String key) {
         return mNativeAd.getExtra(key);
     }
 
+    @NonNull
     public Map<String, Object> getExtras() {
         return mNativeAd.getExtras();
     }
@@ -212,7 +229,7 @@ public boolean isOverridingClickTracker() {
     }
 
     // Event Handlers
-    public void prepare(final View view) {
+    public void prepare(@NonNull final View view) {
         if (isDestroyed()) {
             return;
         }
@@ -224,13 +241,14 @@ public void prepare(final View view) {
         mNativeAd.prepare(view);
     }
 
-    public void recordImpression(final View view) {
+    public void recordImpression(@Nullable final View view) {
         if (getRecordedImpression() || isDestroyed()) {
             return;
         }
 
         for (final String impressionTracker : getImpressionTrackers()) {
-            HttpClient.makeTrackingHttpRequest(impressionTracker, mContext);
+            HttpClient.makeTrackingHttpRequest(
+                    impressionTracker, mContext, MoPubEvents.Type.IMPRESSION_REQUEST);
         }
 
         mNativeAd.recordImpression();
@@ -239,13 +257,14 @@ public void recordImpression(final View view) {
         mMoPubNativeEventListener.onNativeImpression(view);
     }
 
-    public void handleClick(final View view) {
+    public void handleClick(@Nullable final View view) {
         if (isDestroyed()) {
             return;
         }
 
         if (!isClicked()) {
-            HttpClient.makeTrackingHttpRequest(mMoPubClickTracker, mContext);
+            HttpClient.makeTrackingHttpRequest(
+                    mMoPubClickTracker, mContext, MoPubEvents.Type.CLICK_REQUEST);
         }
 
         openClickDestinationUrl(view);
@@ -255,7 +274,7 @@ public void handleClick(final View view) {
         mMoPubNativeEventListener.onNativeClick(view);
     }
 
-    public void clear(final View view) {
+    public void clear(@NonNull final View view) {
         setOnClickListener(view, null);
 
         mNativeAd.clear(view);
@@ -273,11 +292,11 @@ public void destroy() {
     }
 
     // Non Interface Public Methods
-    public void loadMainImage(final ImageView imageView) {
+    public void loadMainImage(@Nullable final ImageView imageView) {
         loadImageView(getMainImageUrl(), imageView);
     }
 
-    public void loadIconImage(final ImageView imageView) {
+    public void loadIconImage(@Nullable final ImageView imageView) {
         loadImageView(getIconImageUrl(), imageView);
     }
 
@@ -301,11 +320,19 @@ public boolean isDestroyed() {
     }
 
     // Helpers
-    private void loadImageView(final String url, final ImageView imageView) {
-        ImageViewService.loadImageView(url, imageView);
+    private void loadImageView(@Nullable final String url, @Nullable final ImageView imageView) {
+        if (imageView == null) {
+            return;
+        }
+
+        if (url == null) {
+            imageView.setImageDrawable(null);
+        } else {
+            ImageViewService.loadImageView(url, imageView);
+        }
     }
 
-    private void openClickDestinationUrl(final View view) {
+    private void openClickDestinationUrl(@Nullable final View view) {
         if (getClickDestinationUrl() == null) {
             return;
         }
@@ -326,7 +353,8 @@ private void openClickDestinationUrl(final View view) {
         getResolvedUrl(urlIterator.next(), urlResolutionListener);
     }
 
-    private void setOnClickListener(final View view, final OnClickListener onClickListener) {
+    private void setOnClickListener(@NonNull final View view,
+            @Nullable final OnClickListener onClickListener) {
         view.setOnClickListener(onClickListener);
         if ((view instanceof ViewGroup)) {
             ViewGroup viewGroup = (ViewGroup)view;
@@ -338,9 +366,9 @@ private void setOnClickListener(final View view, final OnClickListener onClickLi
     private static class ClickDestinationUrlResolutionListener implements UrlResolutionListener {
         private final Context mContext;
         private final Iterator<String> mUrlIterator;
-        private final SoftReference<SpinningProgressView> mSpinningProgressView;
+        @NonNull private final SoftReference<SpinningProgressView> mSpinningProgressView;
 
-        public ClickDestinationUrlResolutionListener(final Context context,
+        public ClickDestinationUrlResolutionListener(@NonNull final Context context,
                 final Iterator<String> urlIterator,
                 final SpinningProgressView spinningProgressView) {
             mContext = context.getApplicationContext();
@@ -349,7 +377,7 @@ public ClickDestinationUrlResolutionListener(final Context context,
         }
 
         @Override
-        public void onSuccess(final String resolvedUrl) {
+        public void onSuccess(@NonNull final String resolvedUrl) {
             final Intent intent = new Intent(Intent.ACTION_VIEW);
             intent.setData(Uri.parse(resolvedUrl));
             intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
@@ -387,16 +415,18 @@ private void removeSpinningProgressView() {
     @VisibleForTesting
     class NativeViewClickListener implements OnClickListener {
         @Override
-        public void onClick(final View view) {
+        public void onClick(@NonNull final View view) {
             handleClick(view);
         }
     }
 
+    @Nullable
     @Deprecated
     public String getSubtitle() {
         return mNativeAd.getText();
     }
 
+    @NonNull
     @VisibleForTesting
     @Deprecated
     MoPubNativeEventListener getMoPubNativeEventListener() {
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
index 3957024a..1fda77e0 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
@@ -2,29 +2,34 @@
 
 import android.content.Context;
 import android.location.Location;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.text.TextUtils;
+
 import com.mopub.common.AdUrlGenerator;
 import com.mopub.common.ClientMetadata;
+import com.mopub.common.Constants;
 import com.mopub.common.LocationService;
 import com.mopub.common.MoPub;
 import com.mopub.common.util.DateAndTime;
-import com.mopub.common.util.Strings;
 
 class NativeUrlGenerator extends AdUrlGenerator {
-    private String mDesiredAssets;
-    private String mSequenceNumber;
+    @Nullable private String mDesiredAssets;
+    @Nullable private String mSequenceNumber;
 
     NativeUrlGenerator(Context context) {
         super(context);
     }
 
+    @NonNull
     @Override
     public NativeUrlGenerator withAdUnitId(final String adUnitId) {
         mAdUnitId = adUnitId;
         return this;
     }
 
-    NativeUrlGenerator withRequest(final RequestParameters requestParameters) {
+    @NonNull
+    NativeUrlGenerator withRequest(@Nullable final RequestParameters requestParameters) {
         if (requestParameters != null) {
             mKeywords = requestParameters.getKeywords();
             mLocation = requestParameters.getLocation();
@@ -33,6 +38,7 @@ NativeUrlGenerator withRequest(final RequestParameters requestParameters) {
         return this;
     }
 
+    @NonNull
     NativeUrlGenerator withSequenceNumber(final int sequenceNumber) {
         mSequenceNumber = String.valueOf(sequenceNumber);
         return this;
@@ -40,19 +46,13 @@ NativeUrlGenerator withSequenceNumber(final int sequenceNumber) {
 
     @Override
     public String generateUrlString(final String serverHostname) {
-        initUrlString(serverHostname, Constants.NATIVE_HANDLER);
+        initUrlString(serverHostname, Constants.AD_HANDLER);
 
         setAdUnitId(mAdUnitId);
 
         setKeywords(mKeywords);
 
-        Location location = mLocation;
-        if (location == null) {
-            location = LocationService.getLastKnownLocation(mContext,
-                    MoPub.getLocationPrecision(),
-                    MoPub.getLocationAwareness());
-        }
-        setLocation(location);
+        setLocation(mLocation);
 
         ClientMetadata clientMetadata = ClientMetadata.getInstance(mContext);
         setSdkVersion(clientMetadata.getSdkVersion());
@@ -71,7 +71,7 @@ public String generateUrlString(final String serverHostname) {
 
         setDensity(clientMetadata.getDensity());
 
-        String networkOperator = clientMetadata.getNetworkOperator();
+        String networkOperator = clientMetadata.getNetworkOperatorForUrl();
         setMccCode(networkOperator);
         setMncCode(networkOperator);
 
@@ -98,7 +98,7 @@ private void setSequenceNumber() {
     }
 
     private void setDesiredAssets() {
-        if (mDesiredAssets != null && !Strings.isEmpty(mDesiredAssets)) {
+        if (!TextUtils.isEmpty(mDesiredAssets)) {
             addParam("assets", mDesiredAssets);
         }
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeViewHolder.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeViewHolder.java
index 0ca2dc4a..a7b99ef0 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeViewHolder.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeViewHolder.java
@@ -1,22 +1,29 @@
 package com.mopub.nativeads;
 
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.view.View;
 import android.widget.ImageView;
 import android.widget.TextView;
 
+import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 
 class NativeViewHolder {
-    TextView titleView;
-    TextView textView;
-    TextView callToActionView;
-    ImageView mainImageView;
-    ImageView iconImageView;
+    @Nullable TextView titleView;
+    @Nullable TextView textView;
+    @Nullable TextView callToActionView;
+    @Nullable ImageView mainImageView;
+    @Nullable ImageView iconImageView;
+
+    @VisibleForTesting
+    static final NativeViewHolder EMPTY_VIEW_HOLDER = new NativeViewHolder();
 
     // Use fromViewBinder instead of a constructor
     private NativeViewHolder() {}
 
-    static NativeViewHolder fromViewBinder(final View view, final ViewBinder viewBinder) {
+    @NonNull
+    static NativeViewHolder fromViewBinder(@NonNull final View view, @NonNull final ViewBinder viewBinder) {
         final NativeViewHolder nativeViewHolder = new NativeViewHolder();
 
         try {
@@ -25,26 +32,24 @@ static NativeViewHolder fromViewBinder(final View view, final ViewBinder viewBin
             nativeViewHolder.callToActionView = (TextView) view.findViewById(viewBinder.callToActionId);
             nativeViewHolder.mainImageView = (ImageView) view.findViewById(viewBinder.mainImageId);
             nativeViewHolder.iconImageView = (ImageView) view.findViewById(viewBinder.iconImageId);
-        } catch (ClassCastException e) {
-            MoPubLog.d("Could not cast View from id in ViewBinder to expected View type", e);
-            return null;
+            return nativeViewHolder;
+        } catch (ClassCastException exception) {
+            MoPubLog.w("Could not cast from id in ViewBinder to expected View type", exception);
+            return EMPTY_VIEW_HOLDER;
         }
-
-        return nativeViewHolder;
     }
 
-    void update(final NativeResponse nativeResponse) {
+    void update(@NonNull final NativeResponse nativeResponse) {
         addTextView(titleView, nativeResponse.getTitle());
         addTextView(textView, nativeResponse.getText());
         addTextView(callToActionView, nativeResponse.getCallToAction());
-
         nativeResponse.loadMainImage(mainImageView);
         nativeResponse.loadIconImage(iconImageView);
     }
 
-    void updateExtras(final View outerView,
-                      final NativeResponse nativeResponse,
-                      final ViewBinder viewBinder) {
+    void updateExtras(@NonNull final View outerView,
+                      @NonNull final NativeResponse nativeResponse,
+                      @NonNull final ViewBinder viewBinder) {
         for (final String key : viewBinder.extras.keySet()) {
             final int resourceId = viewBinder.extras.get(key);
             final View view = outerView.findViewById(resourceId);
@@ -66,7 +71,7 @@ void updateExtras(final View outerView,
         }
     }
 
-    private void addTextView(final TextView textView, final String contents) {
+    private void addTextView(@Nullable final TextView textView, @Nullable final String contents) {
         if (textView == null) {
             MoPubLog.d("Attempted to add text (" + contents + ") to null TextView.");
             return;
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/PlacementData.java b/mopub-sdk/src/main/java/com/mopub/nativeads/PlacementData.java
index cb4e21df..bba220d6 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/PlacementData.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/PlacementData.java
@@ -1,5 +1,8 @@
 package com.mopub.nativeads;
 
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
 
@@ -127,24 +130,25 @@
 
     // Initialize all of these to their max capacity. This prevents garbage collection when
     // reallocating the list, which causes noticeable stuttering when scrolling on some devices.
-    private final int[] mDesiredOriginalPositions = new int[MAX_ADS];
-    private final int[] mDesiredInsertionPositions = new int[MAX_ADS];
+    @NonNull private final int[] mDesiredOriginalPositions = new int[MAX_ADS];
+    @NonNull private final int[] mDesiredInsertionPositions = new int[MAX_ADS];
     private int mDesiredCount = 0;
-    private final int[] mOriginalAdPositions = new int[MAX_ADS];
-    private final int[] mAdjustedAdPositions = new int[MAX_ADS];
-    private final NativeAdData[] mAdDataObjects = new NativeAdData[MAX_ADS];
+    @NonNull private final int[] mOriginalAdPositions = new int[MAX_ADS];
+    @NonNull private final int[] mAdjustedAdPositions = new int[MAX_ADS];
+    @NonNull private final NativeAdData[] mAdDataObjects = new NativeAdData[MAX_ADS];
     private int mPlacedCount = 0;
 
     /**
      * @param desiredInsertionPositions Insertion positions, expressed as original positions
      */
-    private PlacementData(final int[] desiredInsertionPositions) {
+    private PlacementData(@NonNull final int[] desiredInsertionPositions) {
         mDesiredCount = Math.min(desiredInsertionPositions.length, MAX_ADS);
         System.arraycopy(desiredInsertionPositions, 0, mDesiredInsertionPositions, 0, mDesiredCount);
         System.arraycopy(desiredInsertionPositions, 0, mDesiredOriginalPositions, 0, mDesiredCount);
     }
 
-    static PlacementData fromAdPositioning(final MoPubClientPositioning adPositioning) {
+    @NonNull
+    static PlacementData fromAdPositioning(@NonNull final MoPubClientPositioning adPositioning) {
         final List<Integer> fixed = adPositioning.getFixedPositions();
         final int interval = adPositioning.getRepeatingInterval();
 
@@ -168,6 +172,7 @@ static PlacementData fromAdPositioning(final MoPubClientPositioning adPositionin
         return new PlacementData(desiredInsertionPositions);
     }
 
+    @NonNull
     static PlacementData empty() {
         return new PlacementData(new int[] {});
     }
@@ -265,6 +270,7 @@ boolean isPlacedAd(final int position) {
      * Returns the ad data associated with the given ad position, or {@code null} if there is
      * no ad at this position.
      */
+    @Nullable
     NativeAdData getPlacedAd(final int position) {
         final int index = binarySearch(mAdjustedAdPositions, 0, mPlacedCount, position);
         if (index < 0) {
@@ -277,6 +283,7 @@ NativeAdData getPlacedAd(final int position) {
      * Returns all placed ad positions. This method allocates new memory on every invocation. Do
      * not call it from performance critical code.
      */
+    @NonNull
     int[] getPlacedAdPositions() {
         int[] positions = new int[mPlacedCount];
         System.arraycopy(mAdjustedAdPositions, 0, positions, 0, mPlacedCount);
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/PositioningSource.java b/mopub-sdk/src/main/java/com/mopub/nativeads/PositioningSource.java
index 354ea6df..c26b1e33 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/PositioningSource.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/PositioningSource.java
@@ -1,8 +1,7 @@
 package com.mopub.nativeads;
 
-import android.os.Handler;
+import android.support.annotation.NonNull;
 
-import com.mopub.common.VisibleForTesting;
 import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
 
 /**
@@ -11,11 +10,11 @@
 interface PositioningSource {
 
     interface PositioningListener {
-        void onLoad(MoPubClientPositioning positioning);
+        void onLoad(@NonNull MoPubClientPositioning positioning);
 
         void onFailed();
     }
 
-    void loadPositions(String adUnitId, PositioningListener listener);
+    void loadPositions(@NonNull String adUnitId, @NonNull PositioningListener listener);
 
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java b/mopub-sdk/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java
index e1a1ad6e..979ca8c9 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java
@@ -1,27 +1,30 @@
 package com.mopub.nativeads;
 
 import android.content.Context;
+import android.support.annotation.NonNull;
 
 import com.mopub.common.BaseUrlGenerator;
 import com.mopub.common.ClientMetadata;
+import com.mopub.common.Constants;
 
 class PositioningUrlGenerator extends BaseUrlGenerator {
     private static final String POSITIONING_API_VERSION = "1";
 
-    private final Context mContext;
-    private String mAdUnitId;
+    @NonNull private final Context mContext;
+    @NonNull private String mAdUnitId;
 
-    public PositioningUrlGenerator(Context context) {
+    public PositioningUrlGenerator(@NonNull Context context) {
         mContext = context;
     }
 
-    public PositioningUrlGenerator withAdUnitId(final String adUnitId) {
+    @NonNull
+    public PositioningUrlGenerator withAdUnitId(@NonNull final String adUnitId) {
         mAdUnitId = adUnitId;
         return this;
     }
 
     @Override
-    public String generateUrlString(final String serverHostname) {
+    public String generateUrlString(@NonNull final String serverHostname) {
         initUrlString(serverHostname, Constants.POSITIONING_HANDLER);
 
         setAdUnitId(mAdUnitId);
@@ -43,11 +46,11 @@ public String generateUrlString(final String serverHostname) {
         return getFinalUrlString();
     }
 
-    private void setAdUnitId(String adUnitId) {
+    private void setAdUnitId(@NonNull String adUnitId) {
         addParam("id", adUnitId);
     }
 
-    private void setSdkVersion(String sdkVersion) {
+    private void setSdkVersion(@NonNull String sdkVersion) {
         addParam("nsv", sdkVersion);
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/RequestParameters.java b/mopub-sdk/src/main/java/com/mopub/nativeads/RequestParameters.java
index fea4fb4c..d6edb69c 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/RequestParameters.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/RequestParameters.java
@@ -1,11 +1,13 @@
 package com.mopub.nativeads;
 
 import android.location.Location;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
 import java.util.EnumSet;
 
-public final class RequestParameters {
+public class RequestParameters {
 
     public enum NativeAdAsset {
         TITLE("title"),
@@ -17,56 +19,63 @@
 
         private final String mAssetName;
 
-        private NativeAdAsset(String assetName) {
+        private NativeAdAsset(@NonNull String assetName) {
             mAssetName = assetName;
         }
 
+        @NonNull
         @Override
         public String toString() {
             return mAssetName;
         }
     }
 
-    private final String mKeywords;
-    private final Location mLocation;
-    private final EnumSet<NativeAdAsset> mDesiredAssets;
+    @Nullable private final String mKeywords;
+    @Nullable private final Location mLocation;
+    @Nullable private final EnumSet<NativeAdAsset> mDesiredAssets;
 
     public final static class Builder {
         private String keywords;
         private Location location;
         private EnumSet<NativeAdAsset> desiredAssets;
 
+        @NonNull
         public final Builder keywords(String keywords) {
             this.keywords = keywords;
             return this;
         }
 
+        @NonNull
         public final Builder location(Location location) {
             this.location = location;
             return this;
         }
 
         // Specify set of assets used by this ad request. If not set, this defaults to all assets
+        @NonNull
         public final Builder desiredAssets(final EnumSet<NativeAdAsset> desiredAssets) {
             this.desiredAssets = EnumSet.copyOf(desiredAssets);
             return this;
         }
 
+        @NonNull
         public final RequestParameters build() {
             return new RequestParameters(this);
         }
     }
 
-    private RequestParameters(Builder builder) {
+    private RequestParameters(@NonNull Builder builder) {
         mKeywords = builder.keywords;
         mLocation = builder.location;
         mDesiredAssets = builder.desiredAssets;
     }
 
+    @Nullable
     public final String getKeywords() {
         return mKeywords;
     }
 
+    @Nullable
     public final Location getLocation() {
         return mLocation;
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ServerPositioningSource.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ServerPositioningSource.java
index 55049bd4..5d59cc05 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ServerPositioningSource.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ServerPositioningSource.java
@@ -2,14 +2,19 @@
 
 import android.content.Context;
 import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 
+import com.mopub.common.ClientMetadata;
+import com.mopub.common.Constants;
 import com.mopub.common.DownloadResponse;
 import com.mopub.common.DownloadTask;
 import com.mopub.common.DownloadTask.DownloadTaskListener;
 import com.mopub.common.HttpClient;
 import com.mopub.common.HttpResponses;
-import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
+import com.mopub.common.event.Event;
+import com.mopub.common.event.MoPubEvents;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.AsyncTasks;
 import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
@@ -64,28 +69,28 @@
     // Max value to avoid bad integer math calculations. This is 2 ^ 16.
     private static final int MAX_VALUE = 1 << 16;
 
-    private final Context mContext;
+    @NonNull private final Context mContext;
 
-    private final DownloadTaskProvider mDownloadTaskProvider;
+    @NonNull private final DownloadTaskProvider mDownloadTaskProvider;
 
     // Handler and runnable for retrying after a failed response.
-    private final Handler mRetryHandler;
-    private final Runnable mRetryRunnable;
+    @NonNull private final Handler mRetryHandler;
+    @NonNull private final Runnable mRetryRunnable;
 
     // Only exists while a request is in flight.
-    private DownloadTask mDownloadTask;
+    @Nullable private DownloadTask mDownloadTask;
 
-    private PositioningListener mListener;
+    @Nullable private PositioningListener mListener;
     private int mRetryCount;
-    private String mRetryUrl;
+    @Nullable private String mRetryUrl;
 
-    ServerPositioningSource(final Context context) {
+    ServerPositioningSource(@NonNull final Context context) {
         this(context, new DownloadTaskProvider());
     }
 
     @VisibleForTesting
-    ServerPositioningSource(final Context context,
-            final DownloadTaskProvider downloadTaskProvider) {
+    ServerPositioningSource(@NonNull final Context context,
+            @NonNull final DownloadTaskProvider downloadTaskProvider) {
         mContext = context.getApplicationContext();
         mDownloadTaskProvider = downloadTaskProvider;
         mRetryHandler = new Handler();
@@ -98,7 +103,7 @@ public void run() {
     }
 
     @Override
-    public void loadPositions(String adUnitId, PositioningListener listener) {
+    public void loadPositions(@NonNull String adUnitId, @NonNull PositioningListener listener) {
         // If a request is in flight, remove it.
         if (mDownloadTask != null) {
             mDownloadTask.cancel(true);
@@ -114,7 +119,7 @@ public void loadPositions(String adUnitId, PositioningListener listener) {
         mListener = listener;
         mRetryUrl = new PositioningUrlGenerator(mContext)
                 .withAdUnitId(adUnitId)
-                .generateUrlString(Constants.POSITIONING_HOST);
+                .generateUrlString(Constants.HOST);
         requestPositioningInternal();
     }
 
@@ -125,17 +130,15 @@ private void requestPositioningInternal() {
         AsyncTasks.safeExecuteOnExecutor(mDownloadTask, httpGet);
     }
 
-    private DownloadTaskListener mTaskListener = new DownloadTask.DownloadTaskListener() {
+    @NonNull
+    @VisibleForTesting
+    DownloadTaskListener mTaskListener = new DownloadTask.DownloadTaskListener() {
         @Override
-        public void onComplete(final String url, final DownloadResponse downloadResponse) {
-            // Will be null only if cancelled.
-            if (downloadResponse == null) {
-                return;
-            }
-
+        public void onComplete(@Nullable final String url,
+                @Nullable final DownloadResponse downloadResponse) {
             mDownloadTask = null;
-            if (downloadResponse.getStatusCode() != HttpStatus.SC_OK) {
-                MoPubLog.e("Invalid positioning download response ");
+            if (downloadResponse == null || downloadResponse.getStatusCode() != HttpStatus.SC_OK) {
+                MoPubLog.e("Invalid positioning download response");
                 handleFailure();
                 return;
             }
@@ -146,6 +149,7 @@ public void onComplete(final String url, final DownloadResponse downloadResponse
                 positioning = parseJsonResponse(responseText);
             } catch (JSONException exception) {
                 MoPubLog.e("Error parsing JSON: ", exception);
+                MoPubEvents.log(new Event.Builder("", "").build());
                 handleFailure();
                 return;
             }
@@ -156,13 +160,16 @@ public void onComplete(final String url, final DownloadResponse downloadResponse
 
     @VisibleForTesting
     static class DownloadTaskProvider {
+        @NonNull
         DownloadTask get(DownloadTaskListener listener) {
-            return new DownloadTask(listener);
+            return new DownloadTask(listener, MoPubEvents.Type.POSITIONING_REQUEST);
         }
     }
 
-    private void handleSuccess(MoPubClientPositioning positioning) {
-        mListener.onLoad(positioning);
+    private void handleSuccess(@NonNull MoPubClientPositioning positioning) {
+        if (mListener != null) {
+            mListener.onLoad(positioning);
+        }
         mListener = null;
         mRetryCount = 0;
     }
@@ -172,7 +179,9 @@ private void handleFailure() {
         int delay = (int) (DEFAULT_RETRY_TIME_MILLISECONDS * multiplier);
         if (delay >= MAXIMUM_RETRY_TIME_MILLISECONDS) {
             MoPubLog.d("Error downloading positioning information");
-            mListener.onFailed();
+            if (mListener != null) {
+                mListener.onFailed();
+            }
             mListener = null;
             return;
         }
@@ -181,8 +190,9 @@ private void handleFailure() {
         mRetryHandler.postDelayed(mRetryRunnable, delay);
     }
 
+    @NonNull
     @VisibleForTesting
-    MoPubClientPositioning parseJsonResponse(String json) throws JSONException {
+    MoPubClientPositioning parseJsonResponse(@Nullable String json) throws JSONException {
         if (json == null || json.equals("")) {
             throw new JSONException("Empty response");
         }
@@ -210,8 +220,8 @@ MoPubClientPositioning parseJsonResponse(String json) throws JSONException {
         return positioning;
     }
 
-    private void parseFixedJson(final JSONArray fixed,
-            final MoPubClientPositioning positioning) throws JSONException {
+    private void parseFixedJson(@NonNull final JSONArray fixed,
+            @NonNull final MoPubClientPositioning positioning) throws JSONException {
         for (int i = 0; i < fixed.length(); ++i) {
             JSONObject positionObject = fixed.getJSONObject(i);
             int section = positionObject.optInt(SECTION_KEY, 0);
@@ -230,8 +240,8 @@ private void parseFixedJson(final JSONArray fixed,
         }
     }
 
-    private void parseRepeatingJson(final JSONObject repeatingObject,
-            final MoPubClientPositioning positioning) throws JSONException {
+    private void parseRepeatingJson(@NonNull final JSONObject repeatingObject,
+            @NonNull final MoPubClientPositioning positioning) throws JSONException {
         int interval = repeatingObject.getInt(INTERVAL_KEY);
         if (interval < 2 || interval > MAX_VALUE) {
             throw new JSONException("Invalid interval " + interval + " in JSON response");
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/SpinningProgressView.java b/mopub-sdk/src/main/java/com/mopub/nativeads/SpinningProgressView.java
index 2b442392..9fa5d9ff 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/SpinningProgressView.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/SpinningProgressView.java
@@ -2,22 +2,25 @@
 
 import android.content.Context;
 import android.graphics.Color;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.view.Gravity;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.LinearLayout;
 import android.widget.ProgressBar;
 
+import com.mopub.common.Preconditions;
 import com.mopub.common.util.Dips;
 import com.mopub.common.util.Views;
 
 import static android.widget.RelativeLayout.LayoutParams.MATCH_PARENT;
 
 class SpinningProgressView extends ViewGroup {
-    private final ProgressBar mProgressBar;
+    @NonNull private final ProgressBar mProgressBar;
     private int mProgressIndicatorRadius;
 
-    SpinningProgressView(final Context context) {
+    SpinningProgressView(@NonNull final Context context) {
         super(context);
 
         final LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(MATCH_PARENT, MATCH_PARENT);
@@ -49,10 +52,8 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
 
     }
 
-    boolean addToRoot(final View view) {
-        if (view == null) {
-            return false;
-        }
+    boolean addToRoot(@NonNull final View view) {
+        Preconditions.checkNotNull(view);
 
         final View rootView = view.getRootView();
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/TaskManager.java b/mopub-sdk/src/main/java/com/mopub/nativeads/TaskManager.java
index 443a9875..a13163c7 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/TaskManager.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/TaskManager.java
@@ -1,5 +1,11 @@
 package com.mopub.nativeads;
 
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.Preconditions;
+import com.mopub.common.Preconditions.NoThrow;
+
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
@@ -8,27 +14,24 @@
 import java.util.concurrent.atomic.AtomicInteger;
 
 abstract class TaskManager<T> {
-    protected final TaskManagerListener<T> mImageTaskManagerListener;
+    @NonNull protected final TaskManagerListener<T> mImageTaskManagerListener;
     protected final int mSize;
-    protected final Map<String, T> mResults;
+    @NonNull protected final Map<String, T> mResults;
 
-    protected final AtomicInteger mCompletedCount;
-    protected final AtomicBoolean mFailed;
+    @NonNull protected final AtomicInteger mCompletedCount;
+    @NonNull protected final AtomicBoolean mFailed;
 
     interface TaskManagerListener<T> {
-        void onSuccess(final Map<String, T> images);
+        void onSuccess(@NonNull final Map<String, T> images);
         void onFail();
     }
 
-    TaskManager(final List<String> urls, final TaskManagerListener<T> imageTaskManagerListener)
+    TaskManager(@NonNull final List<String> urls,
+            @NonNull final TaskManagerListener<T> imageTaskManagerListener)
             throws IllegalArgumentException {
-        if (urls == null) {
-            throw new IllegalArgumentException("Urls list cannot be null");
-        } else if (urls.contains(null)) {
-            throw new IllegalArgumentException("Urls list cannot contain null");
-        } else if (imageTaskManagerListener == null) {
-            throw new IllegalArgumentException("ImageTaskManagerListener cannot be null");
-        }
+        Preconditions.checkNotNull(urls, "Urls list cannot be null");
+        Preconditions.checkNotNull(imageTaskManagerListener, "ImageTaskManagerListener cannot be null");
+        Preconditions.checkState(!urls.contains(null), "Urls list cannot contain null");
 
         mSize = urls.size();
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/TimestampWrapper.java b/mopub-sdk/src/main/java/com/mopub/nativeads/TimestampWrapper.java
index 3bed271a..9d4d588b 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/TimestampWrapper.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/TimestampWrapper.java
@@ -1,12 +1,13 @@
 package com.mopub.nativeads;
 
 import android.os.SystemClock;
+import android.support.annotation.NonNull;
 
 class TimestampWrapper<T> {
-    final T mInstance;
+    @NonNull final T mInstance;
     long mCreatedTimestamp;
 
-    TimestampWrapper(final T instance) {
+    TimestampWrapper(@NonNull final T instance) {
         mInstance = instance;
         mCreatedTimestamp = SystemClock.uptimeMillis();
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/UrlResolutionTask.java b/mopub-sdk/src/main/java/com/mopub/nativeads/UrlResolutionTask.java
index 119b4ed8..3a447c96 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/UrlResolutionTask.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/UrlResolutionTask.java
@@ -1,6 +1,8 @@
 package com.mopub.nativeads;
 
 import android.os.AsyncTask;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 
 import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.IntentUtils;
@@ -14,13 +16,14 @@
     private static final int REDIRECT_LIMIT = 10;
 
     interface UrlResolutionListener {
-        void onSuccess(String resolvedUrl);
+        void onSuccess(@NonNull String resolvedUrl);
         void onFailure();
     }
 
-    private final UrlResolutionListener mListener;
+    @NonNull private final UrlResolutionListener mListener;
 
-    public static void getResolvedUrl(final String urlString, final UrlResolutionListener listener) {
+    public static void getResolvedUrl(@NonNull final String urlString,
+            @NonNull final UrlResolutionListener listener) {
         final UrlResolutionTask urlResolutionTask = new UrlResolutionTask(listener);
 
         try {
@@ -32,12 +35,13 @@ public static void getResolvedUrl(final String urlString, final UrlResolutionLis
         }
     }
 
-    UrlResolutionTask(UrlResolutionListener listener) {
+    UrlResolutionTask(@NonNull UrlResolutionListener listener) {
         mListener = listener;
     }
 
+    @Nullable
     @Override
-    protected String doInBackground(String... urls) {
+    protected String doInBackground(@Nullable String... urls) {
         if (urls == null || urls.length == 0) {
             return null;
         }
@@ -66,7 +70,8 @@ protected String doInBackground(String... urls) {
         return previousUrl;
     }
 
-    private String getRedirectLocation(final String urlString) throws IOException {
+    @Nullable
+    private String getRedirectLocation(@NonNull final String urlString) throws IOException {
         final URL url = new URL(urlString);
 
         HttpURLConnection httpUrlConnection = null;
@@ -89,7 +94,7 @@ private String getRedirectLocation(final String urlString) throws IOException {
     }
 
     @Override
-    protected void onPostExecute(final String resolvedUrl) {
+    protected void onPostExecute(@Nullable final String resolvedUrl) {
         super.onPostExecute(resolvedUrl);
 
         if (isCancelled() || resolvedUrl == null) {
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ViewBinder.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ViewBinder.java
index e8309c70..0fe30f84 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ViewBinder.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ViewBinder.java
@@ -1,9 +1,12 @@
 package com.mopub.nativeads;
 
+import android.support.annotation.NonNull;
+
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
 
-public final class ViewBinder {
+public class ViewBinder {
     public final static class Builder {
         private final int layoutId;
         private int titleId;
@@ -11,48 +14,56 @@
         private int callToActionId;
         private int mainImageId;
         private int iconImageId;
-        private Map<String, Integer> extras;
+        @NonNull private Map<String, Integer> extras = Collections.emptyMap();
 
         public Builder(final int layoutId) {
             this.layoutId = layoutId;
             this.extras = new HashMap<String, Integer>();
         }
 
+        @NonNull
         public final Builder titleId(final int titleId) {
             this.titleId = titleId;
             return this;
         }
 
+        @NonNull
         public final Builder textId(final int textId) {
             this.textId = textId;
             return this;
         }
 
+        @NonNull
         public final Builder callToActionId(final int callToActionId) {
             this.callToActionId = callToActionId;
             return this;
         }
 
+        @NonNull
         public final Builder mainImageId(final int mainImageId) {
             this.mainImageId = mainImageId;
             return this;
         }
 
+        @NonNull
         public final Builder iconImageId(final int iconImageId) {
             this.iconImageId = iconImageId;
             return this;
         }
 
+        @NonNull
         public final Builder addExtras(final Map<String, Integer> resourceIds) {
             this.extras = new HashMap<String, Integer>(resourceIds);
             return this;
         }
 
+        @NonNull
         public final Builder addExtra(final String key, final int resourceId) {
             this.extras.put(key, resourceId);
             return this;
         }
 
+        @NonNull
         public final ViewBinder build() {
             return new ViewBinder(this);
         }
@@ -64,9 +75,9 @@ public final ViewBinder build() {
     final int callToActionId;
     final int mainImageId;
     final int iconImageId;
-    final Map<String, Integer> extras;
+    @NonNull final Map<String, Integer> extras;
 
-    private ViewBinder(final Builder builder) {
+    private ViewBinder(@NonNull final Builder builder) {
         this.layoutId = builder.layoutId;
         this.titleId = builder.titleId;
         this.textId = builder.textId;
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/VisibilityTracker.java b/mopub-sdk/src/main/java/com/mopub/nativeads/VisibilityTracker.java
index 7ff0842a..b98a4481 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/VisibilityTracker.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/VisibilityTracker.java
@@ -5,6 +5,8 @@
 import android.graphics.Rect;
 import android.os.Handler;
 import android.os.SystemClock;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.view.View;
 import android.view.ViewTreeObserver;
 
@@ -33,7 +35,7 @@
     @VisibleForTesting static final int NUM_ACCESSES_BEFORE_TRIMMING = 50;
 
     // Temporary array of trimmed views so that we don't allocate this on every trim.
-    private final ArrayList<View> mTrimmedViews;
+    @NonNull private final ArrayList<View> mTrimmedViews;
 
     // Incrementing access counter. Use a long to support very long-lived apps.
     private long mAccessCounter = 0;
@@ -43,8 +45,8 @@
         void onVisibilityChanged(List<View> visibleViews, List<View> invisibleViews);
     }
 
-    @VisibleForTesting OnPreDrawListener mOnPreDrawListener;
-    @VisibleForTesting final WeakReference<View> mRootView;
+    @Nullable @VisibleForTesting OnPreDrawListener mOnPreDrawListener;
+    @NonNull @VisibleForTesting final WeakReference<View> mRootView;
 
     static class TrackingInfo {
         int mMinViewablePercent;
@@ -52,24 +54,24 @@
     }
 
     // Views that are being tracked, mapped to the min viewable percentage
-    private final Map<View, TrackingInfo> mTrackedViews;
+    @NonNull private final Map<View, TrackingInfo> mTrackedViews;
 
     // Object to check actual visibility
-    private final VisibilityChecker mVisibilityChecker;
+    @NonNull private final VisibilityChecker mVisibilityChecker;
 
     // Callback listener
-    private VisibilityTrackerListener mVisibilityTrackerListener;
+    @Nullable private VisibilityTrackerListener mVisibilityTrackerListener;
 
     // Runnable to run on each visibility loop
-    private final VisibilityRunnable mVisibilityRunnable;
+    @NonNull private final VisibilityRunnable mVisibilityRunnable;
 
     // Handler for visibility
-    private final Handler mVisibilityHandler;
+    @NonNull private final Handler mVisibilityHandler;
 
     // Whether the visibility runnable is scheduled
     private boolean mIsVisibilityScheduled;
 
-    public VisibilityTracker(final Context context) {
+    public VisibilityTracker(@NonNull final Context context) {
         this(context,
                 new WeakHashMap<View, TrackingInfo>(10),
                 new VisibilityChecker(),
@@ -77,10 +79,10 @@ public VisibilityTracker(final Context context) {
     }
 
     @VisibleForTesting
-    VisibilityTracker(final Context context,
-            final Map<View, TrackingInfo> trackedViews,
-            final VisibilityChecker visibilityChecker,
-            final Handler visibilityHandler) {
+    VisibilityTracker(@NonNull final Context context,
+            @NonNull final Map<View, TrackingInfo> trackedViews,
+            @NonNull final VisibilityChecker visibilityChecker,
+            @NonNull final Handler visibilityHandler) {
         mTrackedViews = trackedViews;
         mVisibilityChecker = visibilityChecker;
         mVisibilityHandler = visibilityHandler;
@@ -105,14 +107,15 @@ public boolean onPreDraw() {
         }
     }
 
-    void setVisibilityTrackerListener(final VisibilityTrackerListener visibilityTrackerListener) {
+    void setVisibilityTrackerListener(
+            @Nullable final VisibilityTrackerListener visibilityTrackerListener) {
         mVisibilityTrackerListener = visibilityTrackerListener;
     }
 
     /**
      * Tracks the given view for visibility.
      */
-    void addView(final View view, final int minPercentageViewed) {
+    void addView(@NonNull final View view, final int minPercentageViewed) {
         // Find the view if already tracked
         TrackingInfo trackingInfo = mTrackedViews.get(view);
         if (trackingInfo == null) {
@@ -147,7 +150,7 @@ private void trimTrackedViews(long minAccessOrder) {
     /**
      * Stops tracking a view, cleaning any pending tracking
      */
-    void removeView(final View view) {
+    void removeView(@NonNull final View view) {
         mTrackedViews.remove(view);
     }
 
@@ -190,8 +193,8 @@ void scheduleVisibilityCheck() {
     class VisibilityRunnable implements Runnable {
         // Set of views that are visible or invisible. We create these once to avoid excessive
         // garbage collection observed when calculating these on each pass.
-        private final ArrayList<View> mVisibleViews;
-        private final ArrayList<View> mInvisibleViews;
+        @NonNull private final ArrayList<View> mVisibleViews;
+        @NonNull private final ArrayList<View> mInvisibleViews;
 
         VisibilityRunnable() {
             mInvisibleViews = new ArrayList<View>();
@@ -236,7 +239,7 @@ boolean hasRequiredTimeElapsed(final long startTimeMillis, final int minTimeView
         /**
          * Whether the view is at least certain % visible
          */
-        boolean isVisible(final View view, final int minPercentageViewed) {
+        boolean isVisible(@Nullable final View view, final int minPercentageViewed) {
             // ListView & GridView both call detachFromParent() for views that can be recycled for
             // new data. This is one of the rare instances where a view will have a null parent for
             // an extended period of time and will not be the main window.
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/factories/CustomEventNativeFactory.java b/mopub-sdk/src/main/java/com/mopub/nativeads/factories/CustomEventNativeFactory.java
index 019b5338..92fec2e1 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/factories/CustomEventNativeFactory.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/factories/CustomEventNativeFactory.java
@@ -1,5 +1,9 @@
 package com.mopub.nativeads.factories;
 
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.Preconditions;
 import com.mopub.nativeads.CustomEventNative;
 import com.mopub.nativeads.MoPubCustomEventNative;
 
@@ -8,7 +12,7 @@
 public class CustomEventNativeFactory {
     protected static CustomEventNativeFactory instance = new CustomEventNativeFactory();
 
-    public static CustomEventNative create(final String className) throws Exception {
+    public static CustomEventNative create(@Nullable final String className) throws Exception {
         if (className != null) {
             final Class<? extends CustomEventNative> nativeClass = Class.forName(className)
                     .asSubclass(CustomEventNative.class);
@@ -19,11 +23,18 @@ public static CustomEventNative create(final String className) throws Exception
     }
 
     @Deprecated // for testing
-    public static void setInstance(final CustomEventNativeFactory customEventNativeFactory) {
+    public static void setInstance(
+            @NonNull final CustomEventNativeFactory customEventNativeFactory) {
+        Preconditions.checkNotNull(customEventNativeFactory);
+
         instance = customEventNativeFactory;
     }
 
-    protected CustomEventNative internalCreate(final Class<? extends CustomEventNative> nativeClass) throws Exception {
+    @NonNull
+    protected CustomEventNative internalCreate(
+            @NonNull final Class<? extends CustomEventNative> nativeClass) throws Exception {
+        Preconditions.checkNotNull(nativeClass);
+
         final Constructor<?> nativeConstructor = nativeClass.getDeclaredConstructor((Class[]) null);
         nativeConstructor.setAccessible(true);
         return (CustomEventNative) nativeConstructor.newInstance();
diff --git a/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java b/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java
index f7f5abd4..0ad16203 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java
@@ -39,8 +39,6 @@
 
     @Before
     public void setUp() throws Exception {
-        CacheService.clearAndNullCaches();
-
         context = new Activity();
         key1 = "http://www.mopub.com/";
         data1 = "image_data_1";
@@ -59,11 +57,6 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
         }).when(diskCacheGetListener).onComplete(anyString(), any(byte[].class));
     }
 
-    @After
-    public void tearDown() throws Exception {
-        CacheService.clearAndNullCaches();
-    }
-
     @Test
     public void initializeCaches_withValidContext_shouldCreateNewCachesIdempotently() throws Exception {
         assertThat(CacheService.getDiskLruCache()).isNull();
diff --git a/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java b/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java
index 44c6fedb..a98a1cf0 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java
@@ -62,7 +62,7 @@ public void testCachedData_shouldBeAvailable() {
 
         final ClientMetadata clientMetadata = ClientMetadata.getInstance(activityContext);
         // Telephony manager data.
-        assertThat(clientMetadata.getNetworkOperator()).isEqualTo("testNetworkOperator");
+        assertThat(clientMetadata.getNetworkOperatorForUrl()).isEqualTo("testNetworkOperator");
         assertThat(clientMetadata.getNetworkOperatorName()).isEqualTo("testNetworkOperatorName");
         assertThat(clientMetadata.getIsoCountryCode()).isEqualTo("1");
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/CloseableLayoutTest.java b/mopub-sdk/src/test/java/com/mopub/common/CloseableLayoutTest.java
new file mode 100644
index 00000000..998801ee
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/CloseableLayoutTest.java
@@ -0,0 +1,222 @@
+package com.mopub.common;
+
+import android.annotation.TargetApi;
+import android.app.Activity;
+import android.graphics.Canvas;
+import android.graphics.Rect;
+import android.os.Build.VERSION_CODES;
+import android.view.MotionEvent;
+
+import com.mopub.common.CloseableLayout.ClosePosition;
+import com.mopub.common.CloseableLayout.OnCloseListener;
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+public class CloseableLayoutTest {
+    private CloseableLayout subject;
+
+    @Mock private OnCloseListener mockCloseListener;
+    @Mock private Canvas mockCanvas;
+
+    private MotionEvent closeRegionDown;
+    private MotionEvent closeRegionUp;
+    private MotionEvent closeRegionCancel;
+    private MotionEvent contentRegionDown;
+    private MotionEvent contentRegionUp;
+    private MotionEvent contentRegionCancel;
+
+    @Before
+    public void setup() {
+        Activity activity = Robolectric.buildActivity(Activity.class).create().get();
+        subject = new CloseableLayout(activity);
+        subject.setClosePosition(ClosePosition.TOP_RIGHT);
+
+        // Fake the close bounds, which allows us to set up close regions
+        subject.setCloseBounds(new Rect(100, 10, 110, 20));
+        closeRegionDown = MotionEvent.obtain(
+                100, 200, MotionEvent.ACTION_DOWN, 100, 10, 0);
+        closeRegionUp = MotionEvent.obtain(
+                100, 200, MotionEvent.ACTION_UP, 100, 10, 0);
+        closeRegionCancel = MotionEvent.obtain(
+                100, 200, MotionEvent.ACTION_CANCEL, 100, 10, 0);
+        contentRegionDown = MotionEvent.obtain(
+                100, 200, MotionEvent.ACTION_DOWN, 0, 0, 0);
+        contentRegionUp = MotionEvent.obtain(
+                100, 200, MotionEvent.ACTION_UP, 0, 0, 0);
+        contentRegionCancel = MotionEvent.obtain(
+                100, 200, MotionEvent.ACTION_CANCEL, 0, 0, 0);
+    }
+
+    @Test
+    public void setOnCloseListener_thenTouchCloseRegion_shouldCallOnClick() {
+        subject.setOnCloseListener(mockCloseListener);
+        subject.onTouchEvent(closeRegionDown);
+        subject.onTouchEvent(closeRegionUp);
+
+        verify(mockCloseListener).onClose();
+    }
+
+    @Test
+    public void setOnCloseListener_thenTouchContentRegion_shouldNotCallCloseListener() {
+        subject.setOnCloseListener(mockCloseListener);
+        subject.onTouchEvent(contentRegionDown);
+        subject.onTouchEvent(contentRegionUp);
+
+        verify(mockCloseListener, never()).onClose();
+    }
+
+    @Test
+    public void setCloseVisible_shouldToggleCloseDrawable() {
+        subject.setCloseVisible(false);
+        assertThat(subject.isCloseVisible()).isFalse();
+
+        subject.setCloseVisible(true);
+        assertThat(subject.isCloseVisible()).isTrue();
+    }
+
+    // setLeft, setTop, setRight, and setBottom, are not available before honeycomb. This
+    // annotation just supresses a warning.
+    @TargetApi(VERSION_CODES.HONEYCOMB)
+    @Test
+    public void draw_shouldUpdateCloseBounds() {
+        subject.setLeft(0);
+        subject.setTop(0);
+        subject.setRight(100);
+        subject.setBottom(200);
+        subject.onSizeChanged(100, 200, 0, 0);
+
+        int expectedTop = 0;
+        int expectedLeft = (int) (100 - CloseableLayout.CLOSE_REGION_SIZE_DP);
+
+        subject.draw(mockCanvas);
+        Rect closeBounds = subject.getCloseBounds();
+        assertThat(closeBounds.top).isEqualTo(expectedTop);
+        assertThat(closeBounds.bottom).isEqualTo(
+                (int) (expectedTop + CloseableLayout.CLOSE_REGION_SIZE_DP));
+        assertThat(closeBounds.left).isEqualTo(expectedLeft);
+        assertThat(closeBounds.right).isEqualTo(
+                (int) (expectedLeft + CloseableLayout.CLOSE_REGION_SIZE_DP));
+    }
+
+    @Test
+    public void draw_withoutCloseBoundsChanged_shouldNotUpdateCloseBounds() {
+        subject.draw(mockCanvas);
+        Rect originalCloseBounds = subject.getCloseBounds();
+
+        subject.setCloseBounds(new Rect(40, 41, 42, 43));
+        subject.setCloseBoundChanged(false);
+        subject.draw(mockCanvas);
+
+        assertThat(subject.getCloseBounds()).isEqualTo(originalCloseBounds);
+    }
+
+    @Test
+    public void onInterceptTouchEvent_closeRegionDown_shouldReturnTrue() {
+        boolean intercepted = subject.onInterceptTouchEvent(closeRegionDown);
+        assertThat(intercepted).isTrue();
+    }
+
+    @Test public void onInterceptTouchEvent_contentRegionDown_returnsTrue() {
+        boolean intercepted = subject.onInterceptTouchEvent(contentRegionDown);
+        assertThat(intercepted).isFalse();
+    }
+
+    @Test
+    public void
+    onTouchEvent_closeRegionDown_thenCloseRegionUp_shouldTogglePressedStateAfterDelay() {
+        assertThat(subject.isClosePressed()).isFalse();
+
+        subject.onTouchEvent(closeRegionDown);
+        assertThat(subject.isClosePressed()).isTrue();
+
+        subject.onTouchEvent(closeRegionUp);
+        assertThat(subject.isClosePressed()).isTrue();
+
+        Robolectric.getUiThreadScheduler().advanceToLastPostedRunnable();
+        assertThat(subject.isClosePressed()).isFalse();
+    }
+
+    @Test
+    public void onTouchEvent_closeRegionDown_thenCloseRegionCancel_shouldTogglePressedState() {
+        subject.onTouchEvent(closeRegionDown);
+        subject.onTouchEvent(closeRegionCancel);
+        assertThat(subject.isClosePressed()).isFalse();
+    }
+
+    @Test
+    public void onTouchEvent_closeRegionDown_thenContentRegionCancel_shouldTogglePressedState() {
+        subject.onTouchEvent(closeRegionDown);
+        subject.onTouchEvent(contentRegionCancel);
+        assertThat(subject.isClosePressed()).isFalse();
+    }
+
+    @Test
+    public void pointInCloseBounds_noSlop_shouldReturnValidValues() {
+        Rect bounds = new Rect();
+        bounds.left = 10;
+        bounds.right = 20;
+        bounds.top = 100;
+        bounds.bottom = 200;
+        subject.setCloseBounds(bounds);
+
+        assertThat(subject.pointInCloseBounds(9, 99, 0)).isFalse();
+        assertThat(subject.pointInCloseBounds(9, 100, 0)).isFalse();
+        assertThat(subject.pointInCloseBounds(9, 199, 0)).isFalse();
+        assertThat(subject.pointInCloseBounds(9, 200, 0)).isFalse();
+        assertThat(subject.pointInCloseBounds(10, 99, 0)).isFalse();
+        assertThat(subject.pointInCloseBounds(10, 100, 0)).isTrue();
+        assertThat(subject.pointInCloseBounds(10, 199, 0)).isTrue();
+        assertThat(subject.pointInCloseBounds(10, 200, 0)).isFalse();
+
+        assertThat(subject.pointInCloseBounds(19, 99, 0)).isFalse();
+        assertThat(subject.pointInCloseBounds(19, 100, 0)).isTrue();
+        assertThat(subject.pointInCloseBounds(19, 199, 0)).isTrue();
+        assertThat(subject.pointInCloseBounds(19, 200, 0)).isFalse();
+        assertThat(subject.pointInCloseBounds(20, 99, 0)).isFalse();
+        assertThat(subject.pointInCloseBounds(20, 100, 0)).isFalse();
+        assertThat(subject.pointInCloseBounds(20, 199, 0)).isFalse();
+        assertThat(subject.pointInCloseBounds(20, 200, 0)).isFalse();
+
+    }
+
+    @Test
+    public void pointInCloseBounds_slop_shouldReturnValidValues() {
+        int slop = 3;
+
+        // Same as above, but adjust given 3 px slop
+        Rect bounds = new Rect();
+        bounds.left = 13;
+        bounds.right = 17;
+        bounds.top = 103;
+        bounds.bottom = 197;
+        subject.setCloseBounds(bounds);
+
+        assertThat(subject.pointInCloseBounds(9, 99, slop)).isFalse();
+        assertThat(subject.pointInCloseBounds(9, 100, slop)).isFalse();
+        assertThat(subject.pointInCloseBounds(9, 199, slop)).isFalse();
+        assertThat(subject.pointInCloseBounds(9, 200, slop)).isFalse();
+        assertThat(subject.pointInCloseBounds(10, 99, slop)).isFalse();
+        assertThat(subject.pointInCloseBounds(10, 100, slop)).isTrue();
+        assertThat(subject.pointInCloseBounds(10, 199, slop)).isTrue();
+        assertThat(subject.pointInCloseBounds(10, 200, slop)).isFalse();
+
+        assertThat(subject.pointInCloseBounds(19, 99, slop)).isFalse();
+        assertThat(subject.pointInCloseBounds(19, 100, slop)).isTrue();
+        assertThat(subject.pointInCloseBounds(19, 199, slop)).isTrue();
+        assertThat(subject.pointInCloseBounds(19, 200, slop)).isFalse();
+        assertThat(subject.pointInCloseBounds(20, 99, slop)).isFalse();
+        assertThat(subject.pointInCloseBounds(20, 100, slop)).isFalse();
+        assertThat(subject.pointInCloseBounds(20, 199, slop)).isFalse();
+        assertThat(subject.pointInCloseBounds(20, 200, slop)).isFalse();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/DownloadResponseTest.java b/mopub-sdk/src/test/java/com/mopub/common/DownloadResponseTest.java
index 741db09f..b0de5153 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/DownloadResponseTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/DownloadResponseTest.java
@@ -4,29 +4,44 @@
 import com.mopub.common.util.ResponseHeader;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 
+import org.apache.http.HttpResponse;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
 import java.util.Locale;
 
+import static org.fest.assertions.api.Assertions.assertThat;
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
 public class DownloadResponseTest {
 
     DownloadResponse subject;
-    TestHttpResponseWithHeaders mockHttpResponse;
+    TestHttpResponseWithHeaders testHttpResponse;
 
     @Before
     public void setup() throws Exception {
-        mockHttpResponse = new TestHttpResponseWithHeaders(200, "abcde".getBytes());
-        mockHttpResponse.addHeader(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "testCustomEvent");
-        mockHttpResponse.addHeader(ResponseHeader.CLICKTHROUGH_URL.getKey().toLowerCase(Locale.US), "http://example.com/");
-        mockHttpResponse.addHeader(ResponseHeader.FAIL_URL.getKey().toUpperCase(Locale.US), "http://mopub.com/");
-        subject = new DownloadResponse(mockHttpResponse);
+        testHttpResponse = new TestHttpResponseWithHeaders(200, "abcde".getBytes());
+        testHttpResponse.addHeader(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "testCustomEvent");
+        testHttpResponse.addHeader(ResponseHeader.CLICK_TRACKING_URL.getKey().toLowerCase(Locale.US), "http://example.com/");
+        testHttpResponse.addHeader(ResponseHeader.FAIL_URL.getKey().toUpperCase(Locale.US), "http://mopub.com/");
+        subject = new DownloadResponse(testHttpResponse);
+    }
+
+    @Test
+    public void constructor_withNullHttpEntity_shouldNotThrowNullPointerException() throws Exception {
+        HttpResponse mockHttpResponse = mock(HttpResponse.class);
+        when(mockHttpResponse.getEntity()).thenReturn(null);
+        when(mockHttpResponse.getStatusLine()).thenReturn(testHttpResponse.new TestStatusLine());
+
+        DownloadResponse downloadResponse = new DownloadResponse(mockHttpResponse);
+        assertThat(downloadResponse.getContentLength()).isEqualTo(0);
+        assertThat(downloadResponse.getByteArray()).isEmpty();
     }
 
     @Test
@@ -47,7 +62,7 @@ public void testGetContentLength() throws Exception {
     @Test
     public void testGetFirstHeader_caseInsensitive() throws Exception {
         assertEquals("testCustomEvent", subject.getFirstHeader(ResponseHeader.CUSTOM_EVENT_NAME));
-        assertEquals("http://example.com/", subject.getFirstHeader(ResponseHeader.CLICKTHROUGH_URL));
+        assertEquals("http://example.com/", subject.getFirstHeader(ResponseHeader.CLICK_TRACKING_URL));
         assertEquals("http://mopub.com/", subject.getFirstHeader(ResponseHeader.FAIL_URL));
         assertNull(subject.getFirstHeader(ResponseHeader.CUSTOM_EVENT_DATA));
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/DownloadTaskTest.java b/mopub-sdk/src/test/java/com/mopub/common/DownloadTaskTest.java
index cfa1702f..bbe1b484 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/DownloadTaskTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/DownloadTaskTest.java
@@ -18,7 +18,9 @@
 
 import static junit.framework.Assert.fail;
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
@@ -45,27 +47,26 @@ public void setUp() {
         mTestResponse = "TEST RESPONSE";
         mTestHttpResponseWithHeaders = new TestHttpResponseWithHeaders(200, mTestResponse);
         mTestHttpResponseWithHeaders.addHeader(ResponseHeader.IMPRESSION_URL.getKey(), "moPubImpressionTrackerUrl");
-        mTestHttpResponseWithHeaders.addHeader(ResponseHeader.CLICKTHROUGH_URL.getKey(), "moPubClickTrackerUrl");
+        mTestHttpResponseWithHeaders.addHeader(ResponseHeader.CLICK_TRACKING_URL.getKey(), "moPubClickTrackerUrl");
 
         mFakeHttpLayer = Robolectric.getFakeHttpLayer();
     }
 
     @Test
-    public void execute_whenDownloadTaskAndHttpClientCompleteSuccessfully_shouldReturn200HttpResponse() {
+    public void whenDownloadTaskAndHttpClientCompleteSuccessfully_shouldReturn200HttpResponse() {
         mFakeHttpLayer.addPendingHttpResponse(mTestHttpResponseWithHeaders);
         mDownloadTask.execute(httpGet);
 
-        verify(mockDownloadTaskListener).onComplete(eq(httpGet.getURI().toString()),
-                responseCaptor.capture());
+        verify(mockDownloadTaskListener).onComplete(eq(httpGet.getURI().toString()), responseCaptor.capture());
         DownloadResponse response = responseCaptor.getValue();
         assertThat(response.getStatusCode()).isEqualTo(200);
         assertThat(response.getFirstHeader(ResponseHeader.IMPRESSION_URL)).isEqualTo("moPubImpressionTrackerUrl");
-        assertThat(response.getFirstHeader(ResponseHeader.CLICKTHROUGH_URL)).isEqualTo("moPubClickTrackerUrl");
+        assertThat(response.getFirstHeader(ResponseHeader.CLICK_TRACKING_URL)).isEqualTo("moPubClickTrackerUrl");
         assertThat(HttpResponses.asResponseString(response)).isEqualTo(mTestResponse);
     }
 
     @Test
-    public void execute_whenDownloadTaskCompletesSuccessfullyAndHttpClientTimesOut_shouldReturn599HttpResponse() {
+    public void whenDownloadTaskCompletesSuccessfullyAndHttpClientTimesOut_shouldReturn599HttpResponse() {
         mFakeHttpLayer.addPendingHttpResponse(599, "");
         mDownloadTask.execute(httpGet);
 
@@ -77,40 +78,35 @@ public void execute_whenDownloadTaskCompletesSuccessfullyAndHttpClientTimesOut_s
     }
 
     @Test
-    public void execute_whenDownloadTaskIsCancelledBeforeExecute_shouldReturnNullHttpReponseAndNullUrl() {
+    public void whenDownloadTaskIsCancelledBeforeExecute_shouldNotCallOnComplete() {
         mFakeHttpLayer.addPendingHttpResponse(200, mTestResponse);
         mDownloadTask.cancel(true);
         mDownloadTask.execute(httpGet);
 
-        verify(mockDownloadTaskListener).onComplete(null, null);
+        verify(mockDownloadTaskListener, never()).onComplete(
+                any(String.class), any(DownloadResponse.class));
     }
 
     @Ignore("pending")
     @Test
-        // need a way to reliably cancel task during doInBackground
-    public void execute_whenDownloadTaskIsCancelledDuringDoInBackground_shouldReturnNullHttpReponse() {
-    }
-
-    @Ignore("pending")
-    @Test
-    public void execute_whenHttpUriRequestThrowsIOException_shouldCancelTaskAndReturnNullHttpResponse() {
+    public void whenHttpUriRequestThrowsIOException_shouldCancelTaskAndReturnNullHttpResponse() {
         // need a way to force HttpUriRequest to throw on execute
     }
 
     @Test
-    public void execute_whenHttpUriRequestIsNull_shouldReturnNullHttpReponseAndNullUrl() {
+    public void whenHttpUriRequestIsNull_shouldReturnNullHttpReponseAndNullUrl() {
         mDownloadTask.execute((HttpUriRequest) null);
         verify(mockDownloadTaskListener).onComplete(null, null);
     }
 
     @Test
-    public void execute_whenHttpUriRequestIsNullArray_shouldReturnNullHttpReponseAndNullUrl() {
+    public void whenHttpUriRequestIsNullArray_shouldReturnNullHttpReponseAndNullUrl() {
         mDownloadTask.execute((HttpUriRequest[]) null);
         verify(mockDownloadTaskListener).onComplete(null, null);
     }
 
     @Test
-    public void execute_whenHttpUriRequestIsArray_shouldOnlyReturnFirstResponse() {
+    public void whenHttpUriRequestIsArray_shouldOnlyReturnFirstResponse() {
         mFakeHttpLayer.addPendingHttpResponse(200, mTestResponse);
         mFakeHttpLayer.addPendingHttpResponse(500, "");
         mDownloadTask.execute(httpGet, new HttpGet("http://www.twitter.com/"));
@@ -123,13 +119,8 @@ public void execute_whenHttpUriRequestIsArray_shouldOnlyReturnFirstResponse() {
         assertThat(HttpResponses.asResponseString(response)).isEqualTo(mTestResponse);
     }
 
-    @Test
-    public void downLoadTask_whenConstructedWithNullListener_shouldThrowIllegalArgumentException() {
-        try {
-            new DownloadTask(null);
-            fail("DownloadTask didn't throw IllegalArgumentException when constructed with null");
-        } catch (IllegalArgumentException e) {
-            // passed
-        }
+    @Test(expected = IllegalArgumentException.class)
+    public void constructor_withNullListener_shouldThrowIllegalArgumentException() {
+        new DownloadTask(null);
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/HttpClientTest.java b/mopub-sdk/src/test/java/com/mopub/common/HttpClientTest.java
index 48f721bb..b81a6252 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/HttpClientTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/HttpClientTest.java
@@ -17,8 +17,8 @@
 import org.robolectric.tester.org.apache.http.RequestMatcher;
 import org.robolectric.tester.org.apache.http.TestHttpResponse;
 
+import static com.mopub.common.HttpClient.getWebViewUserAgent;
 import static com.mopub.common.HttpClient.initializeHttpGet;
-import static junit.framework.Assert.fail;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(RobolectricTestRunner.class)
@@ -69,13 +69,13 @@ public void initializeHttpGet_shouldPopulateStaticWebViewUserAgent() throws Exce
     }
 
     @Test
+    public void getWebViewUserAgent_whenUserAgentNotSet_shouldReturnDefault() {
+        assertThat(getWebViewUserAgent("test")).isEqualTo("test");
+    }
+
+    @Test(expected = NullPointerException.class)
     public void initializeHttpGet_withNullUrl_shouldThrowNullPointerException() throws Exception {
-        try {
-            HttpGet httpGet = initializeHttpGet(null, context);
-            fail("Expecting null pointer expection to be thrown");
-        } catch (NullPointerException e) {
-            // pass
-        }
+        HttpGet httpGet = initializeHttpGet(null, context);
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/common/event/EventHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/common/event/EventDispatcherTest.java
similarity index 57%
rename from mopub-sdk/src/test/java/com/mopub/common/event/EventHandlerTest.java
rename to mopub-sdk/src/test/java/com/mopub/common/event/EventDispatcherTest.java
index 8c2d338c..105f836d 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/event/EventHandlerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/event/EventDispatcherTest.java
@@ -3,10 +3,8 @@
 import android.os.HandlerThread;
 import android.os.Message;
 
-import com.mopub.common.ClientMetadata;
 import com.mopub.common.test.support.SdkTestRunner;
 
-import org.apache.http.HttpStatus;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -20,10 +18,10 @@
 
 
 @RunWith(SdkTestRunner.class)
-public class EventHandlerTest {
+public class EventDispatcherTest {
 
+    private EventDispatcher subject;
     private EventRecorder testRecorder;
-    private MoPubEvents.EventDispatcher subject;
     private HandlerThread testHandlerThread;
 
     @Before
@@ -33,7 +31,7 @@ public void setup() {
         testRecorder = mock(EventRecorder.class);
         recorders.add(testRecorder);
         testHandlerThread = new HandlerThread("mopub-test-events");
-        subject = new MoPubEvents.EventDispatcher(recorders, testHandlerThread);
+        subject = new EventDispatcher(recorders, testHandlerThread);
         // The test runner uses a mock dispatcher that does nothing.
         MoPubEvents.setEventDispatcher(subject);
     }
@@ -41,17 +39,8 @@ public void setup() {
     @Test
     public void createEvent_testCallbackCallsHandler() throws Exception {
         Message message = new Message();
-        message.obj = new Event(BaseEvent.Type.DATA_ERROR, "Test URL", ClientMetadata.getInstance());
+        message.obj = new Event.Builder("","").build();
         subject.mHandlerCallback.handleMessage(message);
-        verify(testRecorder).recordEvent(eq((Event) message.obj));
-    }
-
-    @Test
-    public void createTimedEvent_testCallbackCallsHandler() throws Exception {
-        Message message = new Message();
-        message.obj = new TimedEvent(BaseEvent.Type.DATA_ERROR, "Test URL", ClientMetadata.getInstance(), null);
-        ((TimedEvent) message.obj).stop(HttpStatus.SC_OK);
-        subject.mHandlerCallback.handleMessage(message);
-        verify(testRecorder).recordTimedEvent((TimedEvent) eq(message.obj));
+        verify(testRecorder).record(eq((Event) message.obj));
     }
 }
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpResponsesTest.java b/mopub-sdk/src/test/java/com/mopub/common/network/HeaderUtilsTest.java
similarity index 59%
rename from mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpResponsesTest.java
rename to mopub-sdk/src/test/java/com/mopub/common/network/HeaderUtilsTest.java
index 54981b2e..e6bc00b7 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpResponsesTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/network/HeaderUtilsTest.java
@@ -1,4 +1,4 @@
-package com.mopub.mobileads.util;
+package com.mopub.common.network;
 
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
@@ -12,7 +12,7 @@
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
-public class HttpResponsesTest {
+public class HeaderUtilsTest {
     private TestHttpResponseWithHeaders response;
 
     @Before
@@ -23,71 +23,71 @@ public void setup() {
     @Test
     public void extractBooleanHeader_whenValueIsZero_shouldReturnFalse() throws Exception {
         response.addHeader(SCROLLABLE.getKey(), "0");
-        assertThat(HttpResponses.extractBooleanHeader(response, SCROLLABLE, false)).isFalse();
+        assertThat(HeaderUtils.extractBooleanHeader(response, SCROLLABLE, false)).isFalse();
 
         response.addHeader(SCROLLABLE.getKey(), "0");
-        assertThat(HttpResponses.extractBooleanHeader(response, SCROLLABLE, true)).isFalse();
+        assertThat(HeaderUtils.extractBooleanHeader(response, SCROLLABLE, true)).isFalse();
     }
 
     @Test
     public void extractBooleanHeader_whenValueIsOne_shouldReturnTrue() throws Exception {
         response.addHeader(SCROLLABLE.getKey(), "1");
-        assertThat(HttpResponses.extractBooleanHeader(response, SCROLLABLE, false)).isTrue();
+        assertThat(HeaderUtils.extractBooleanHeader(response, SCROLLABLE, false)).isTrue();
 
         response.addHeader(SCROLLABLE.getKey(), "1");
-        assertThat(HttpResponses.extractBooleanHeader(response, SCROLLABLE, true)).isTrue();
+        assertThat(HeaderUtils.extractBooleanHeader(response, SCROLLABLE, true)).isTrue();
     }
 
     @Test
     public void extractBooleanHeader_shouldReturnDefaultValue() throws Exception {
         // no header added to response
 
-        assertThat(HttpResponses.extractBooleanHeader(response, SCROLLABLE, false)).isFalse();
-        assertThat(HttpResponses.extractBooleanHeader(response, SCROLLABLE, true)).isTrue();
+        assertThat(HeaderUtils.extractBooleanHeader(response, SCROLLABLE, false)).isFalse();
+        assertThat(HeaderUtils.extractBooleanHeader(response, SCROLLABLE, true)).isTrue();
     }
 
     @Test
     public void extractIntegerHeader_shouldReturnIntegerValue() throws Exception {
         response.addHeader(AD_TIMEOUT.getKey(), "10");
-        assertThat(HttpResponses.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(10);
+        assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(10);
 
         response.addHeader(AD_TIMEOUT.getKey(), "0");
-        assertThat(HttpResponses.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(0);
+        assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(0);
 
         response.addHeader(AD_TIMEOUT.getKey(), "-2");
-        assertThat(HttpResponses.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(-2);
+        assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(-2);
     }
 
     @Test
     public void extractIntegerHeader_withDoubleValue_shouldTruncateValue() throws Exception {
         response.addHeader(AD_TIMEOUT.getKey(), "3.14");
-        assertThat(HttpResponses.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(3);
+        assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(3);
 
         response.addHeader(AD_TIMEOUT.getKey(), "-3.14");
-        assertThat(HttpResponses.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(-3);
+        assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(-3);
     }
 
     @Test
     public void extractIntegerHeader_whenNoHeaderPresent_shouldReturnNull() throws Exception {
         // no header added to response
-        assertThat(HttpResponses.extractIntegerHeader(response, AD_TIMEOUT)).isNull();
+        assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isNull();
 
         response.addHeader(AD_TIMEOUT.getKey(), null);
-        assertThat(HttpResponses.extractIntegerHeader(response, AD_TIMEOUT)).isNull();
+        assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isNull();
     }
 
     @Test
     public void extractIntegerHeader_withNonsenseStringValue_shouldReturnNull() throws Exception {
         response.addHeader(AD_TIMEOUT.getKey(), "llama!!guy");
-        assertThat(HttpResponses.extractIntegerHeader(response, AD_TIMEOUT)).isNull();
+        assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isNull();
     }
 
     @Test
     public void extractIntHeader_withInvalidHeader_shouldUseDefaultValue() throws Exception {
         response.addHeader(AD_TIMEOUT.getKey(), "5");
-        assertThat(HttpResponses.extractIntHeader(response, AD_TIMEOUT, 10)).isEqualTo(5);
+        assertThat(HeaderUtils.extractIntHeader(response, AD_TIMEOUT, 10)).isEqualTo(5);
 
         response.addHeader(AD_TIMEOUT.getKey(), "five!");
-        assertThat(HttpResponses.extractIntHeader(response, AD_TIMEOUT, 10)).isEqualTo(10);
+        assertThat(HeaderUtils.extractIntHeader(response, AD_TIMEOUT, 10)).isEqualTo(10);
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java b/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
index d17a79d8..6fcd2c35 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
@@ -1,7 +1,9 @@
 package com.mopub.common.test.support;
 
+import com.mopub.common.CacheService;
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.MoPub;
+import com.mopub.common.event.EventDispatcher;
 import com.mopub.common.event.MoPubEvents;
 import com.mopub.common.factories.MethodBuilderFactory;
 import com.mopub.common.util.AsyncTasks;
@@ -19,7 +21,7 @@
 import com.mopub.mobileads.factories.HtmlInterstitialWebViewFactory;
 import com.mopub.mobileads.factories.HttpClientFactory;
 import com.mopub.mobileads.factories.MoPubViewFactory;
-import com.mopub.mobileads.factories.MraidViewFactory;
+import com.mopub.mobileads.factories.MraidControllerFactory;
 import com.mopub.mobileads.factories.VastManagerFactory;
 import com.mopub.mobileads.factories.VastVideoDownloadTaskFactory;
 import com.mopub.mobileads.factories.ViewGestureDetectorFactory;
@@ -33,7 +35,7 @@
 import com.mopub.mobileads.test.support.TestHtmlInterstitialWebViewFactory;
 import com.mopub.mobileads.test.support.TestHttpClientFactory;
 import com.mopub.mobileads.test.support.TestMoPubViewFactory;
-import com.mopub.mobileads.test.support.TestMraidViewFactory;
+import com.mopub.mobileads.test.support.TestMraidControllerFactory;
 import com.mopub.mobileads.test.support.TestVastManagerFactory;
 import com.mopub.mobileads.test.support.TestVastVideoDownloadTaskFactory;
 import com.mopub.mobileads.test.support.TestViewGestureDetectorFactory;
@@ -43,14 +45,13 @@
 import org.junit.runners.model.InitializationError;
 import org.mockito.MockitoAnnotations;
 import org.robolectric.DefaultTestLifecycle;
+import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.TestLifecycle;
 import org.robolectric.bytecode.ClassInfo;
 import org.robolectric.bytecode.Setup;
 import org.robolectric.util.RobolectricBackgroundExecutorService;
 
-import java.lang.reflect.Method;
-
 import static com.mopub.common.MoPub.LocationAwareness;
 import static org.mockito.Mockito.mock;
 
@@ -79,13 +80,14 @@ public boolean shouldInstrument(ClassInfo classInfo) {
     public static class TestLifeCycleWithInjection extends DefaultTestLifecycle {
         @Override
         public void prepareTest(Object test) {
+            ClientMetadata.clearForTesting();
+
             AdFetcherFactory.setInstance(new TestAdFetcherFactory());
             HttpClientFactory.setInstance(new TestHttpClientFactory());
             DateAndTime.setInstance(new TestDateAndTime());
             CustomEventBannerFactory.setInstance(new TestCustomEventBannerFactory());
             CustomEventInterstitialFactory.setInstance(new TestCustomEventInterstitialFactory());
             CustomEventBannerAdapterFactory.setInstance(new TestCustomEventBannerAdapterFactory());
-            MraidViewFactory.setInstance(new TestMraidViewFactory());
             MoPubViewFactory.setInstance(new TestMoPubViewFactory());
             CustomEventInterstitialAdapterFactory.setInstance(new TestCustomEventInterstitialAdapterFactory());
             HtmlBannerWebViewFactory.setInstance(new TestHtmlBannerWebViewFactory());
@@ -96,19 +98,18 @@ public void prepareTest(Object test) {
             VastVideoDownloadTaskFactory.setInstance(new TestVastVideoDownloadTaskFactory());
             MethodBuilderFactory.setInstance(new TestMethodBuilderFactory());
             CustomEventNativeFactory.setInstance(new TestCustomEventNativeFactory());
+            MraidControllerFactory.setInstance(new TestMraidControllerFactory());
+
             ShadowAsyncTasks.reset();
-            MoPubEvents.setEventDispatcher(mock(MoPubEvents.EventDispatcher.class));
+            MoPubEvents.setEventDispatcher(mock(EventDispatcher.class));
             MoPub.setLocationAwareness(LocationAwareness.NORMAL);
             MoPub.setLocationPrecision(6);
 
             MockitoAnnotations.initMocks(test);
 
             AsyncTasks.setExecutor(new RobolectricBackgroundExecutorService());
-        }
-
-        @Override
-        public void afterTest(final Method method) {
-            ClientMetadata.clearForTesting();
+            CacheService.clearAndNullCaches();
+            Robolectric.getFakeHttpLayer().clearPendingHttpResponses();
         }
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java
index 89473924..2bfebb20 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java
@@ -1,7 +1,6 @@
 package com.mopub.common.util;
 
 import android.os.AsyncTask;
-import android.os.Build;
 import android.os.Build.VERSION_CODES;
 import android.os.Handler;
 import android.os.Looper;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/DrawablesTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/DrawablesTest.java
index 269b6577..3c8af8cd 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/DrawablesTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/DrawablesTest.java
@@ -11,8 +11,14 @@
 @RunWith(RobolectricTestRunner.class)
 public class DrawablesTest {
     @Test
-    public void decodeImage_shouldCacheDrawables() throws Exception {
-        assertThat(Drawables.BACKGROUND.decodeImage(new Activity()))
-                .isSameAs(Drawables.BACKGROUND.decodeImage(new Activity()));
+    public void createDrawable_shouldNotCacheDrawables() throws Exception {
+        assertThat(Drawables.BACKGROUND.createDrawable(new Activity()))
+                .isNotSameAs(Drawables.BACKGROUND.createDrawable(new Activity()));
+    }
+
+    @Test
+    public void getBitmap_shouldCacheBitmap() throws Exception {
+        assertThat(Drawables.BACKGROUND.getBitmap())
+                .isSameAs(Drawables.BACKGROUND.getBitmap());
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
index d40ac3d2..99a9c3f8 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
@@ -1,10 +1,13 @@
 package com.mopub.common.util;
 
+import android.annotation.TargetApi;
 import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
+import android.content.pm.ActivityInfo;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.ResolveInfo;
+import android.os.Build;
 
 import com.mopub.common.MoPubBrowser;
 import com.mopub.mobileads.MoPubActivity;
@@ -15,14 +18,22 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLog;
 import org.robolectric.shadows.ShadowToast;
 
 import java.util.List;
 
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyInt;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.when;
@@ -30,14 +41,14 @@
 @RunWith(RobolectricTestRunner.class)
 public class ManifestUtilsTest {
     private Context context;
-    private ResolveInfo resolveInfo;
     private List<Class<? extends Activity>> requiredWebViewSdkActivities;
     private List<Class<? extends Activity>> requiredNativeSdkActivities;
 
+    @Mock private ResolveInfo mockResolveInfo;
+
     @Before
     public void setUp() throws Exception {
         context = spy(new Activity());
-        resolveInfo = mock(ResolveInfo.class);
 
         requiredWebViewSdkActivities = ManifestUtils.getRequiredWebViewSdkActivities();
         requiredNativeSdkActivities = ManifestUtils.getRequiredNativeSdkActivities();
@@ -48,6 +59,8 @@ public void setUp() throws Exception {
     @After
     public void tearDown() throws Exception {
         setDebugMode(false);
+        // This may have been set to a mock during testing. Reset this class back to normal
+        ManifestUtils.setFlagCheckUtil(new ManifestUtils.FlagCheckUtil());
     }
 
     @Test
@@ -80,10 +93,10 @@ public void checkNativeSdkActivitiesDeclared_shouldIncludeOneActivityDeclaration
 
     @Test
     public void displayWarningForMissingActivities_withAllActivitiesDeclared_shouldNotShowLogOrToast() throws Exception {
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubActivity.class), resolveInfo);
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MraidActivity.class), resolveInfo);
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), resolveInfo);
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubBrowser.class), resolveInfo);
+        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
+        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MraidActivity.class), mockResolveInfo);
+        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
+        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubBrowser.class), mockResolveInfo);
 
         ShadowLog.setupLogging();
         setDebugMode(true);
@@ -96,9 +109,9 @@ public void displayWarningForMissingActivities_withAllActivitiesDeclared_shouldN
 
     @Test
      public void displayWarningForMissingActivities_withOneMissingActivity_shouldLogOnlyThatOne() throws Exception {
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubActivity.class), resolveInfo);
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MraidActivity.class), resolveInfo);
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), resolveInfo);
+        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
+        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MraidActivity.class), mockResolveInfo);
+        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
         // Here, we leave out MoPubBrowser on purpose
 
         ShadowLog.setupLogging();
@@ -113,6 +126,23 @@ public void displayWarningForMissingActivities_withOneMissingActivity_shouldLogO
         );
     }
 
+    @Test
+    public void displayWarningForMissingActivities_withAllMissingActivities_shouldLogMessage() throws Exception {
+        setDebugMode(true);
+        ShadowLog.setupLogging();
+
+        ManifestUtils.displayWarningForMissingActivities(context, requiredWebViewSdkActivities);
+
+        final List<ShadowLog.LogItem> logs = ShadowLog.getLogs();
+
+        assertLogIncludes(
+                "com.mopub.mobileads.MoPubActivity",
+                "com.mopub.mobileads.MraidActivity",
+                "com.mopub.mobileads.MraidVideoPlayerActivity",
+                "com.mopub.common.MoPubBrowser"
+        );
+    }
+
     @Test
     public void displayWarningForMissingActivities_withMissingActivities_withDebugTrue_shouldShowToast() throws Exception {
         setDebugMode(true);
@@ -121,7 +151,7 @@ public void displayWarningForMissingActivities_withMissingActivities_withDebugTr
 
         assertThat(ShadowToast.getLatestToast()).isNotNull();
         final String toastText = ShadowToast.getTextOfLatestToast();
-        assertThat(toastText).isEqualTo("ERROR: YOUR MOPUB INTEGRATION IS INCOMPLETE.\nCheck logcat and update your AndroidManifest.xml with the correct activities.");
+        assertThat(toastText).isEqualTo("ERROR: YOUR MOPUB INTEGRATION IS INCOMPLETE.\nCheck logcat and update your AndroidManifest.xml with the correct activities and configuration.");
     }
 
     @Test
@@ -132,22 +162,178 @@ public void displayWarningForMissingActivities_withMissingActivities_withDebugFa
 
         assertThat(ShadowToast.getLatestToast()).isNull();
     }
-    
+
+    @SuppressWarnings("unchecked")
+    @TargetApi(13)
     @Test
-    public void displayWarningForMissingActivities_withMissingActivities_withDebugTrue_shouldLogMessage() throws Exception {
-        setDebugMode(true);
+    public void displayWarningForMisconfiguredActivities_withAllActivitiesConfigured_shouldNotLogOrShowToast() throws Exception {
+        ManifestUtils.FlagCheckUtil mockActivitiyConfigCheck = mock(ManifestUtils.FlagCheckUtil.class);
+        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_KEYBOARD_HIDDEN))).thenReturn(true);
+        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_ORIENTATION))).thenReturn(true);
+        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_SCREEN_SIZE))).thenReturn(true);
+        ManifestUtils.setFlagCheckUtil(mockActivitiyConfigCheck);
+
+        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
+        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MraidActivity.class), mockResolveInfo);
+        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
+        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubBrowser.class), mockResolveInfo);
+
         ShadowLog.setupLogging();
+        setDebugMode(true);
 
-        ManifestUtils.displayWarningForMissingActivities(context, requiredWebViewSdkActivities);
+        ManifestUtils.displayWarningForMisconfiguredActivities(context, requiredWebViewSdkActivities);
 
-        final List<ShadowLog.LogItem> logs = ShadowLog.getLogs();
+        assertThat(ShadowToast.getLatestToast()).isNull();
+        assertThat(ShadowLog.getLogs()).isEmpty();
+    }
 
-        assertLogIncludes(
-                "com.mopub.mobileads.MoPubActivity",
+    @SuppressWarnings("unchecked")
+    @TargetApi(13)
+    @Test
+    public void displayWarningForMisconfiguredActivities_withOneMisconfiguredActivity_shouldLogOnlyThatOne() throws Exception {
+        ManifestUtils.FlagCheckUtil mockActivitiyConfigCheck = mock(ManifestUtils.FlagCheckUtil.class);
+
+        // Misconfigure the first activity; only return false if the activity is MoPubActivity
+        doAnswer(new Answer() {
+            @Override
+            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
+                Object[] args = invocationOnMock.getArguments();
+                return MoPubActivity.class != args[0];
+            }
+        }).when(mockActivitiyConfigCheck).hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_KEYBOARD_HIDDEN));
+
+        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_ORIENTATION))).thenReturn(true);
+        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_SCREEN_SIZE))).thenReturn(true);
+        ManifestUtils.setFlagCheckUtil(mockActivitiyConfigCheck);
+
+        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
+        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MraidActivity.class), mockResolveInfo);
+        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
+        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubBrowser.class), mockResolveInfo);
+
+        ShadowLog.setupLogging();
+
+        ManifestUtils.displayWarningForMisconfiguredActivities(context, requiredWebViewSdkActivities);
+
+        assertLogIncludes("com.mopub.mobileads.MoPubActivity");
+        assertLogIncludes("The android:configChanges param for activity " + MoPubActivity.class.getName() + " must include keyboardHidden.");
+        assertLogDoesntInclude(
                 "com.mopub.mobileads.MraidActivity",
                 "com.mopub.mobileads.MraidVideoPlayerActivity",
                 "com.mopub.common.MoPubBrowser"
         );
+        assertLogDoesntInclude("The android:configChanges param for activity " + MoPubActivity.class.getName() + " must include orientation.");
+        assertLogDoesntInclude("The android:configChanges param for activity " + MoPubActivity.class.getName() + " must include screenSize.");
+    }
+
+    @SuppressWarnings("unchecked")
+    @TargetApi(13)
+    @Test
+    public void displayWarningForMisconfiguredActivities_withOneMisconfiguredActivity_withMissingAllConfigChangesValues_shouldLogAllConfigChangesValues() throws Exception {
+        ManifestUtils.FlagCheckUtil mockActivitiyConfigCheck = mock(ManifestUtils.FlagCheckUtil.class);
+
+        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_KEYBOARD_HIDDEN))).thenReturn(false);
+        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_ORIENTATION))).thenReturn(false);
+        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_SCREEN_SIZE))).thenReturn(false);
+        ManifestUtils.setFlagCheckUtil(mockActivitiyConfigCheck);
+
+        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
+
+        ShadowLog.setupLogging();
+
+        ManifestUtils.displayWarningForMisconfiguredActivities(context, requiredWebViewSdkActivities);
+
+        assertLogIncludes("The android:configChanges param for activity " + MoPubActivity.class.getName() + " must include keyboardHidden.");
+        assertLogIncludes("The android:configChanges param for activity " + MoPubActivity.class.getName() + " must include orientation.");
+        assertLogIncludes("The android:configChanges param for activity " + MoPubActivity.class.getName() + " must include screenSize.");
+    }
+
+    @SuppressWarnings("unchecked")
+    @Config(reportSdk = Build.VERSION_CODES.HONEYCOMB_MR1)
+    @TargetApi(13)
+    @Test
+    public void displayWarningForMisconfiguredActivities_withMissingScreenSize_withApiLessThan13_shouldNotLogOrShowToast() throws Exception {
+        ManifestUtils.FlagCheckUtil mockActivitiyConfigCheck = mock(ManifestUtils.FlagCheckUtil.class);
+        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_KEYBOARD_HIDDEN))).thenReturn(true);
+        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_ORIENTATION))).thenReturn(true);
+        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_SCREEN_SIZE))).thenReturn(false);
+        ManifestUtils.setFlagCheckUtil(mockActivitiyConfigCheck);
+
+        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
+
+        ShadowLog.setupLogging();
+        setDebugMode(true);
+
+        ManifestUtils.displayWarningForMisconfiguredActivities(context, requiredWebViewSdkActivities);
+
+        assertThat(ShadowToast.getLatestToast()).isNull();
+        assertThat(ShadowLog.getLogs()).isEmpty();
+    }
+
+    @SuppressWarnings("unchecked")
+    @TargetApi(13)
+    @Test
+    public void displayWarningForMisconfiguredActivities_withMissingScreenSize_withTargetApiLessThan13_shouldNotLogOrShowToast() throws Exception {
+        // Set target API to < 13
+        ApplicationInfo applicationInfo = context.getApplicationInfo();
+        applicationInfo.targetSdkVersion = Build.VERSION_CODES.HONEYCOMB_MR1;
+        when(context.getApplicationInfo()).thenReturn(applicationInfo);
+
+        ManifestUtils.FlagCheckUtil mockActivitiyConfigCheck = mock(ManifestUtils.FlagCheckUtil.class);
+        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_KEYBOARD_HIDDEN))).thenReturn(true);
+        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_ORIENTATION))).thenReturn(true);
+        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_SCREEN_SIZE))).thenReturn(false);
+        ManifestUtils.setFlagCheckUtil(mockActivitiyConfigCheck);
+
+        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
+
+        ShadowLog.setupLogging();
+        setDebugMode(true);
+
+        ManifestUtils.displayWarningForMisconfiguredActivities(context, requiredWebViewSdkActivities);
+
+        assertThat(ShadowToast.getLatestToast()).isNull();
+        assertThat(ShadowLog.getLogs()).isEmpty();
+    }
+
+    @SuppressWarnings("unchecked")
+    @TargetApi(13)
+    @Test
+    public void displayWarningForMisconfiguredActivities_withMisconfiguredActivities_withDebugTrue_shouldShowToast() throws Exception {
+        ManifestUtils.FlagCheckUtil mockActivitiyConfigCheck = mock(ManifestUtils.FlagCheckUtil.class);
+        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_KEYBOARD_HIDDEN))).thenReturn(false);
+        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_ORIENTATION))).thenReturn(false);
+        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_SCREEN_SIZE))).thenReturn(false);
+        ManifestUtils.setFlagCheckUtil(mockActivitiyConfigCheck);
+
+        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
+
+        setDebugMode(true);
+
+        ManifestUtils.displayWarningForMisconfiguredActivities(context, requiredWebViewSdkActivities);
+
+        assertThat(ShadowToast.getLatestToast()).isNotNull();
+        final String toastText = ShadowToast.getTextOfLatestToast();
+        assertThat(toastText).isEqualTo("ERROR: YOUR MOPUB INTEGRATION IS INCOMPLETE.\nCheck logcat and update your AndroidManifest.xml with the correct activities and configuration.");
+    }
+
+    @SuppressWarnings("unchecked")
+    @TargetApi(13)
+    @Test
+    public void displayWarningForMisconfiguredActivities_withMisconfiguredActivities_withDebugFalse_shouldNotShowToast() throws Exception {
+        ManifestUtils.FlagCheckUtil mockActivitiyConfigCheck = mock(ManifestUtils.FlagCheckUtil.class);
+        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_KEYBOARD_HIDDEN))).thenReturn(false);
+        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_ORIENTATION))).thenReturn(false);
+        when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_SCREEN_SIZE))).thenReturn(false);
+        ManifestUtils.setFlagCheckUtil(mockActivitiyConfigCheck);
+
+        Robolectric.packageManager.addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
+
+        setDebugMode(false);
+
+        ManifestUtils.displayWarningForMissingActivities(context, requiredWebViewSdkActivities);
+
+        assertThat(ShadowToast.getLatestToast()).isNull();
     }
 
     @Test
@@ -164,6 +350,7 @@ public void isDebuggable_whenApplicationIsNotDebuggable_shouldReturnFalse() thro
         assertThat(ManifestUtils.isDebuggable(context)).isFalse();
     }
 
+    @SuppressWarnings("unchecked")
     @Test
     public void getRequiredWebViewSdkActivities_shouldIncludeRequiredActivities() throws Exception {
         assertThat(requiredWebViewSdkActivities).containsOnly(
@@ -174,6 +361,7 @@ public void getRequiredWebViewSdkActivities_shouldIncludeRequiredActivities() th
         );
     }
 
+    @SuppressWarnings("unchecked")
     @Test
     public void getRequiredNativeSdkActivities_shouldIncludeRequiredActivities() throws Exception {
         assertThat(requiredNativeSdkActivities).containsOnly(
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java
index 2b73cf80..bf0ddd79 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java
@@ -2,6 +2,7 @@
 
 import android.app.Activity;
 import android.view.View;
+
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -145,14 +146,15 @@ public void execute_withStaticMethod_shouldPass() throws Exception {
         assertThat(methodBuilder.execute()).isEqualTo("20");
     }
 
-//    @Test
-//    public void execute_withAccessibility_shouldRunPrivateMethods() throws Exception {
-//        methodBuilder = new MethodBuilder(string, "foldCase");
-//        methodBuilder.addParam(char.class, 'a');
-//        methodBuilder.setAccessible();
-//
-//        char result = (Character) methodBuilder.execute();
-//
-//        assertThat(result).isEqualTo('a');
-//    }
+    @Test
+    public void execute_withAccessibility_shouldRunPrivateMethods() throws Exception {
+        methodBuilder = new MethodBuilder(string, "indexOfSupplementary");
+        methodBuilder.addParam(int.class, (int)'a');
+        methodBuilder.addParam(int.class, 0);
+        methodBuilder.setAccessible();
+
+        int result = (Integer) methodBuilder.execute();
+
+        assertThat(result).isEqualTo(-1);
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/StringsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/StringsTest.java
deleted file mode 100644
index 1f2279c6..00000000
--- a/mopub-sdk/src/test/java/com/mopub/common/util/StringsTest.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package com.mopub.common.util;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(RobolectricTestRunner.class)
-public class StringsTest {
-    @Test
-    public void isEmpty_shouldReturnValidResponse() throws Exception {
-        assertThat(Strings.isEmpty("")).isTrue();
-
-        assertThat(Strings.isEmpty("test")).isFalse();
-
-        assertThat(Strings.isEmpty(null)).isFalse();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
index ce36a6e8..907e4077 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
@@ -12,6 +12,7 @@
 import com.mopub.common.util.test.support.TestDateAndTime;
 
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
@@ -79,7 +80,7 @@ public void constructor_shouldCreateIntentWithDatestampInSubject() throws Except
         assertThat(title).isEqualTo("New creative violation report");
 
         String dateTimeString = subjectParts[1];
-        SimpleDateFormat dateFormat = new SimpleDateFormat("M/d/yy hh:mm:ss a z");
+        SimpleDateFormat dateFormat = new SimpleDateFormat("M/d/yy hh:mm:ss a z", Locale.US);
 
         Date date = dateFormat.parse(dateTimeString);
 
@@ -280,6 +281,7 @@ public void send_shouldCreateEmailChooserIntent() throws Exception {
         assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
     }
 
+    @Ignore("pending")
     @Test
     public void getScreenshot_whenIsDrawingCacheEnabled_shouldKeepDrawingCacheEnabled() throws Exception {
 //        reset(view);
@@ -291,6 +293,7 @@ public void getScreenshot_whenIsDrawingCacheEnabled_shouldKeepDrawingCacheEnable
 //        verify(view, never()).setDrawingCacheEnabled(false);
     }
 
+    @Ignore("pending")
     @Test
     public void getScreenshot_whenIsDrawingCacheDisabled_shouldKeepDrawingCacheDisabled() throws Exception {
 //        reset(view);
@@ -328,7 +331,7 @@ public void getScreenshot_whenRootViewDrawingCacheIsNull_shouldPass() throws Exc
     }
 
     private String getCurrentDateTime() {
-        SimpleDateFormat dateFormat = new SimpleDateFormat("M/d/yy hh:mm:ss a z");
+        SimpleDateFormat dateFormat = new SimpleDateFormat("M/d/yy hh:mm:ss a z", Locale.US);
         return dateFormat.format(now);
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdConfigurationTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdConfigurationTest.java
index f238ba05..213bc956 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdConfigurationTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdConfigurationTest.java
@@ -18,7 +18,7 @@
 import static com.mopub.mobileads.AdViewController.MINIMUM_REFRESH_TIME_MILLISECONDS;
 import static com.mopub.common.util.ResponseHeader.AD_TIMEOUT;
 import static com.mopub.common.util.ResponseHeader.AD_TYPE;
-import static com.mopub.common.util.ResponseHeader.CLICKTHROUGH_URL;
+import static com.mopub.common.util.ResponseHeader.CLICK_TRACKING_URL;
 import static com.mopub.common.util.ResponseHeader.DSP_CREATIVE_ID;
 import static com.mopub.common.util.ResponseHeader.FAIL_URL;
 import static com.mopub.common.util.ResponseHeader.HEIGHT;
@@ -125,7 +125,7 @@ public void addHttpResponse_shouldSetFields() throws Exception {
         httpResponse.addHeader(AD_TYPE.getKey(), "this is an ad type");
         httpResponse.addHeader(NETWORK_TYPE.getKey(), "network type!");
         httpResponse.addHeader(REDIRECT_URL.getKey(), "redirect url");
-        httpResponse.addHeader(CLICKTHROUGH_URL.getKey(), "clickthrough url");
+        httpResponse.addHeader(CLICK_TRACKING_URL.getKey(), "clickthrough url");
         httpResponse.addHeader(FAIL_URL.getKey(), "fail url");
         httpResponse.addHeader(IMPRESSION_URL.getKey(), "impression url");
         httpResponse.addHeader(WIDTH.getKey(), "320  ");
@@ -219,7 +219,7 @@ public void cleanup_shouldClearAllFields() throws Exception {
         httpResponse.addHeader(AD_TYPE.getKey(), "this is an ad type");
         httpResponse.addHeader(NETWORK_TYPE.getKey(), "network type!");
         httpResponse.addHeader(REDIRECT_URL.getKey(), "redirect url");
-        httpResponse.addHeader(CLICKTHROUGH_URL.getKey(), "clickthrough url");
+        httpResponse.addHeader(CLICK_TRACKING_URL.getKey(), "clickthrough url");
         httpResponse.addHeader(FAIL_URL.getKey(), "fail url");
         httpResponse.addHeader(IMPRESSION_URL.getKey(), "impression url");
         httpResponse.addHeader(WIDTH.getKey(), "320  ");
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdFetcherTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdFetcherTest.java
index 22cf06bc..10e25edf 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdFetcherTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdFetcherTest.java
@@ -1,6 +1,5 @@
 package com.mopub.mobileads;
 
-import android.os.Build;
 import android.os.Build.VERSION_CODES;
 
 import com.mopub.common.test.support.SdkTestRunner;
@@ -24,8 +23,6 @@
 import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_NAME;
 import static com.mopub.common.util.ResponseHeader.FULL_AD_TYPE;
 import static com.mopub.common.util.ResponseHeader.NATIVE_PARAMS;
-import static com.mopub.common.util.VersionCode.GINGERBREAD;
-import static com.mopub.common.util.VersionCode.ICE_CREAM_SANDWICH;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Matchers.eq;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoadTaskTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoadTaskTest.java
index a14bf614..2819c1c9 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoadTaskTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoadTaskTest.java
@@ -12,7 +12,7 @@
 import org.junit.runner.RunWith;
 
 import static com.mopub.common.util.ResponseHeader.AD_TYPE;
-import static com.mopub.common.util.ResponseHeader.CLICKTHROUGH_URL;
+import static com.mopub.common.util.ResponseHeader.CLICK_TRACKING_URL;
 import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_DATA;
 import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_NAME;
 import static com.mopub.common.util.ResponseHeader.CUSTOM_SELECTOR;
@@ -188,6 +188,6 @@ private void addExpectedResponseHeaders(String adType) {
         response.addHeader(SCROLLABLE.getKey(), "0");
         response.addHeader(AD_TYPE.getKey(), adType);
         response.addHeader(REDIRECT_URL.getKey(), "redirect");
-        response.addHeader(CLICKTHROUGH_URL.getKey(), "clickthrough");
+        response.addHeader(CLICK_TRACKING_URL.getKey(), "clickthrough");
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
index fb137103..64456de0 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
@@ -62,14 +62,14 @@ public void getMillennnialInterstitial() throws Exception {
     public void getMraidBanner() throws Exception {
         customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubView, "mraid", null);
 
-        assertThat(customEventName).isEqualTo("com.mopub.mobileads.MraidBanner");
+        assertThat(customEventName).isEqualTo("com.mopub.mraid.MraidBanner");
     }
 
     @Test
     public void getMraidInterstitial() throws Exception {
         customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubInterstitialView, "mraid", null);
 
-        assertThat(customEventName).isEqualTo("com.mopub.mobileads.MraidInterstitial");
+        assertThat(customEventName).isEqualTo("com.mopub.mraid.MraidInterstitial");
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
index e6473af7..2fe92c3f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
@@ -9,6 +9,7 @@
 import android.view.View;
 import android.webkit.WebView;
 import android.widget.FrameLayout;
+
 import com.mopub.common.GpsHelper;
 import com.mopub.common.GpsHelperTest;
 import com.mopub.common.MoPub;
@@ -19,6 +20,7 @@
 import com.mopub.mobileads.test.support.TestAdFetcherFactory;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 import com.mopub.mobileads.test.support.ThreadUtils;
+
 import org.apache.http.HttpRequest;
 import org.apache.http.HttpResponse;
 import org.apache.http.client.HttpClient;
@@ -242,19 +244,6 @@ public void trackImpression_shouldHttpGetTheImpressionUrl() throws Exception {
         }
     }
 
-    // this test for impressionUrl is unnecessary (since we're catching the NullPointerException)
-    @Test
-    public void trackImpression_shouldDoNothingIfImpressionUrlNotSpecified() throws Exception {
-        subject.configureUsingHttpResponse(response);
-        FakeHttpLayer fakeHttpLayer = Robolectric.getFakeHttpLayer();
-        fakeHttpLayer.addPendingHttpResponse(200, "");
-
-        subject.trackImpression();
-        Thread.sleep(300); // does this make the test flaky?
-
-        assertThat(fakeHttpLayer.getLastSentHttpRequestInfo()).isNull();
-    }
-
     @Test
     public void registerClick_shouldHttpGetTheClickthroughUrl() throws Exception {
         response.addHeader("X-Clickthrough", "http://clickUrl");
@@ -281,19 +270,6 @@ public void registerClick_shouldHttpGetTheClickthroughUrl() throws Exception {
         }
     }
 
-    // this test for clickthroughUrl is unnecessary (since we're catching the NullPointerException)
-    @Test
-    public void trackImpression_shouldDoNothingIfClickthroughUrlNotSpecified() throws Exception {
-        subject.configureUsingHttpResponse(response);
-        FakeHttpLayer fakeHttpLayer = Robolectric.getFakeHttpLayer();
-        fakeHttpLayer.addPendingHttpResponse(200, "");
-
-        subject.registerClick();
-        Thread.sleep(50); // does this make the test flaky?
-
-        assertThat(fakeHttpLayer.getLastSentHttpRequestInfo()).isNull();
-    }
-
     @Test
     public void generateAdUrl_shouldIncludeMinFields() throws Exception {
         String expectedAdUrl = "http://ads.mopub.com/m/ad" +
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java
index 0453e1bb..c2f9c559 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java
@@ -1,7 +1,6 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
-import android.os.Build;
 import android.os.Build.VERSION_CODES;
 import android.view.MotionEvent;
 import android.view.View;
@@ -12,13 +11,10 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowWebView;
 
 import static android.webkit.WebSettings.PluginState;
-import static com.mopub.common.util.VersionCode.HONEYCOMB_MR2;
-import static com.mopub.common.util.VersionCode.ICE_CREAM_SANDWICH;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
index cf7d6c34..559954dc 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
@@ -1,160 +1,97 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
-import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
-import android.graphics.drawable.StateListDrawable;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.ImageButton;
-import android.widget.RelativeLayout;
-import org.fest.assertions.api.ANDROID;
-import org.junit.Ignore;
+import android.widget.FrameLayout;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.shadows.ShadowLocalBroadcastManager;
 
-import static com.mopub.common.util.Drawables.INTERSTITIAL_CLOSE_BUTTON_NORMAL;
-import static com.mopub.common.util.Drawables.INTERSTITIAL_CLOSE_BUTTON_PRESSED;
 import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.getHtmlInterstitialIntentFilter;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.verify;
-import static org.robolectric.Robolectric.shadowOf;
 
-@Ignore
+@RunWith(SdkTestRunner.class)
 public class BaseInterstitialActivityTest {
-    public static final String EXPECTED_SOURCE = "expected source";
-
-    protected BaseInterstitialActivity subject;
-    protected BroadcastReceiver broadcastReceiver;
-    protected AdConfiguration adConfiguration;
-    protected long testBroadcastIdentifier;
-
-    public void setup() {
-        broadcastReceiver = mock(BroadcastReceiver.class);
-        testBroadcastIdentifier = 2222;
+    private BaseInterstitialActivity subject;
+    @Mock private AdConfiguration adConfiguration;
+
+    // Make a concrete version of the abstract class for testing purposes.
+    private static class TestInterstitialActivity extends BaseInterstitialActivity {
+        View view;
+
+        @Override
+        public View getAdView() {
+            if (view == null) {
+                view = new View(this);
+            }
+            return view;
+        }
     }
 
-    @Test
-    public void onCreate_shouldBroadcastInterstitialShow() throws Exception {
-        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, testBroadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
-
-        subject.onCreate(null);
+    @Before
+    public void setup() {
 
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
     }
 
     @Test
     public void onCreate_shouldCreateView() throws Exception {
-        subject.onCreate(null);
-
+        subject = Robolectric.buildActivity(TestInterstitialActivity.class).create().get();
         View adView = getContentView(subject).getChildAt(0);
 
         assertThat(adView).isNotNull();
     }
 
-    @Test
-    public void onCreate_shouldShowInterstitialCloseButton() throws Exception {
-        subject.onCreate(null);
-
-        ImageButton closeButton = getCloseButton();
-
-        Robolectric.clickOn(closeButton);
-
-        ANDROID.assertThat(subject).isFinishing();
-    }
-
-    @Test
-    public void onCreate_shouldMakeCloseButtonVisible() throws Exception {
-        subject.onCreate(null);
-
-        ImageButton closeButton = getCloseButton();
-
-        ANDROID.assertThat(closeButton).isVisible();
-        StateListDrawable states = (StateListDrawable) closeButton.getDrawable();
-
-        int[] unpressedState = new int[] {-android.R.attr.state_pressed};
-        assertThat(shadowOf(states).getDrawableForState(unpressedState))
-                .isEqualTo(INTERSTITIAL_CLOSE_BUTTON_NORMAL.decodeImage(new Activity()));
-        int[] pressedState = new int[] {android.R.attr.state_pressed};
-        assertThat(shadowOf(states).getDrawableForState(pressedState))
-                .isEqualTo(INTERSTITIAL_CLOSE_BUTTON_PRESSED.decodeImage(new Activity()));
-    }
-
-    @Test
-    public void canShowAndHideTheCloseButton() throws Exception {
-        subject.onCreate(null);
-        ANDROID.assertThat(getCloseButton()).isVisible();
-
-        subject.hideInterstitialCloseButton();
-        ANDROID.assertThat(getCloseButton()).isInvisible();
-
-        subject.showInterstitialCloseButton();
-        ANDROID.assertThat(getCloseButton()).isVisible();
-    }
-
     @Test
     public void onDestroy_shouldCleanUpContentView() throws Exception {
-        subject.onCreate(null);
-        subject.onDestroy();
+        subject = Robolectric.buildActivity(
+                TestInterstitialActivity.class).create().destroy().get();
 
         assertThat(getContentView(subject).getChildCount()).isEqualTo(0);
     }
 
-    @Test
-    public void onDestroy_shouldBroadcastInterstitialDismiss() throws Exception {
-        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, testBroadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
-
-        subject.onCreate(null);
-        subject.onDestroy();
-
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
-    }
-
     @Test
     public void getAdConfiguration_shouldReturnAdConfigurationFromIntent() throws Exception {
-        Intent intent = new Intent();
+        Context context = Robolectric.buildActivity(Activity.class).create().get();
+        Intent intent = new Intent(context, TestInterstitialActivity.class);
         intent.putExtra(AD_CONFIGURATION_KEY, adConfiguration);
 
-        subject.onCreate(null);
-        subject.setIntent(intent);
-
+        subject = Robolectric.buildActivity(TestInterstitialActivity.class)
+                .withIntent(intent)
+                .create().get();
         assertThat(subject.getAdConfiguration()).isNotNull();
     }
 
     @Test
     public void getAdConfiguration_withMissingOrWrongAdConfiguration_shouldReturnNull() throws Exception {
-        Intent intent = new Intent();
+        Context context = Robolectric.buildActivity(Activity.class).create().get();
+        Intent intent = new Intent(context, TestInterstitialActivity.class);
         // This intent is missing an AdConfiguration extra.
 
-        subject.onCreate(null);
-        subject.setIntent(intent);
+        subject = Robolectric.buildActivity(TestInterstitialActivity.class)
+                .withIntent(intent)
+                .create().get();
 
         assertThat(subject.getAdConfiguration()).isNull();
     }
 
-    protected ImageButton getCloseButton() {
-        return (ImageButton) getContentView(subject).getChildAt(1);
-    }
-
-    protected RelativeLayout getContentView(BaseInterstitialActivity subject) {
-        return (RelativeLayout) ((ViewGroup) subject.findViewById(android.R.id.content)).getChildAt(0);
+    protected FrameLayout getContentView(BaseInterstitialActivity subject) {
+        return (FrameLayout) ((ViewGroup) subject.findViewById(android.R.id.content)).getChildAt(0);
     }
 
     protected void resetMockedView(View view) {
         reset(view);
-        stub(view.getLayoutParams()).toReturn(new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT));
+        stub(view.getLayoutParams()).toReturn(
+                new FrameLayout.LayoutParams(FrameLayout.LayoutParams.WRAP_CONTENT,
+                        FrameLayout.LayoutParams.WRAP_CONTENT));
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivitiyTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivitiyTest.java
index 5663115e..1f23c7df 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivitiyTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivitiyTest.java
@@ -61,8 +61,7 @@ static void assertVastVideoPlayerActivityStarted(final Class clazz,
         assertThat(expectedVastVideoConfiguration).isEqualsToByComparingFields(vastVideoConfiguration);
     }
 
-    static void assertMraidVideoPlayerActivityStarted(final Class clazz,
-            final String url,
+    public static void assertMraidVideoPlayerActivityStarted(final Class clazz, final String url,
             final AdConfiguration adConfiguration) {
         final Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
         assertIntentAndAdConfigurationAreCorrect(intent, clazz, adConfiguration);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java
index a6c36a4d..4865c737 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java
@@ -2,7 +2,6 @@
 
 
 import android.app.Activity;
-import android.os.Build;
 import android.os.Build.VERSION_CODES;
 import android.view.ViewGroup;
 import android.webkit.WebSettings;
@@ -12,12 +11,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowWebView;
 
-import static com.mopub.common.util.VersionCode.JELLY_BEAN_MR1;
-import static com.mopub.common.util.VersionCode.JELLY_BEAN_MR2;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
index d99e6508..bba3f049 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
@@ -33,7 +33,6 @@
 import static org.mockito.Mockito.stub;
 import static org.mockito.Mockito.verify;
 
-
 @RunWith(SdkTestRunner.class)
 public class CustomEventBannerAdapterTest {
     private CustomEventBannerAdapter subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
index cdf1ad36..238a58d7 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
@@ -13,7 +13,8 @@
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
 
-import java.util.*;
+import java.util.HashMap;
+import java.util.Map;
 
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
@@ -29,7 +30,6 @@
 import static org.mockito.Mockito.stub;
 import static org.mockito.Mockito.verify;
 
-
 @RunWith(SdkTestRunner.class)
 public class CustomEventInterstitialAdapterTest {
     private CustomEventInterstitialAdapter subject;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
index d0dfea10..eea9133c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
@@ -15,7 +15,8 @@
 import org.junit.runner.RunWith;
 import org.robolectric.shadows.ShadowLocalBroadcastManager;
 
-import java.util.*;
+import java.util.Iterator;
+import java.util.Set;
 
 import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
@@ -48,7 +49,7 @@ public void setUp() throws Exception {
         context = new Activity();
     }
 
-    @Ignore("pending")
+    @Ignore("Difficult with the number of test factories and mocking involved.")
     @Test
     public void twoDifferentInterstitials_shouldNotHearEachOthersBroadcasts() throws Exception {
         final MoPubInterstitial interstitialA = new MoPubInterstitial(context, "adunitid");
@@ -205,7 +206,7 @@ public void unregister_shouldNotLeakTheContext() throws Exception {
         verify(customEventInterstitialListener).onInterstitialShown();
     }
 
-    static Intent getIntentForActionAndIdentifier(final String action, final long broadcastIdentifier) {
+    public static Intent getIntentForActionAndIdentifier(final String action, final long broadcastIdentifier) {
         final Intent intent = new Intent(action);
         intent.putExtra("broadcastIdentifier", broadcastIdentifier);
         return intent;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
index 6d606330..bceb9773 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
@@ -8,6 +8,7 @@
 import com.mopub.mobileads.test.support.TestHtmlInterstitialWebViewFactory;
 
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
@@ -62,6 +63,7 @@ public void setUp() throws Exception {
         localExtras.put(AD_CONFIGURATION_KEY, adConfiguration);
     }
 
+    @Ignore("pending")
     @Test
     public void loadInterstitial_shouldNotifyCustomEventInterstitialListenerOnLoaded() throws Exception {
         subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java
index ebd3b8f8..7b34b996 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java
@@ -1,7 +1,6 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
-import android.os.Build;
 import android.os.Build.VERSION_CODES;
 import android.webkit.WebViewClient;
 
@@ -19,8 +18,6 @@
 import static com.mopub.mobileads.HtmlInterstitialWebView.HtmlInterstitialWebViewListener;
 import static com.mopub.mobileads.HtmlInterstitialWebView.MOPUB_JS_INTERFACE_NAME;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
-import static com.mopub.common.util.VersionCode.GINGERBREAD_MR1;
-import static com.mopub.common.util.VersionCode.HONEYCOMB;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
index 7f395a4c..1087c207 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
@@ -7,6 +7,7 @@
 import android.content.pm.ResolveInfo;
 import android.net.Uri;
 import android.webkit.WebView;
+
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.test.support.SdkTestRunner;
 
@@ -451,6 +452,8 @@ public void launchIntentForUserClick_whenNoMatchingActivity_shouldNotStartActivi
 
         verify(htmlWebView, never()).onResetUserClick();
         assertThat(result).isFalse();
+
+        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
index 0903b56d..1a1a3660 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
@@ -5,14 +5,18 @@
 import android.content.Context;
 import android.content.Intent;
 import android.view.View;
+import android.view.ViewGroup;
 import android.webkit.WebViewClient;
-import android.widget.RelativeLayout;
+import android.widget.FrameLayout;
+
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestHtmlInterstitialWebViewFactory;
+
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
+import org.mockito.Mock;
 import org.robolectric.Robolectric;
 import org.robolectric.shadows.ShadowLocalBroadcastManager;
 
@@ -22,9 +26,12 @@
 import static com.mopub.mobileads.AdFetcher.SCROLLABLE_KEY;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.getHtmlInterstitialIntentFilter;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest
+        .getIntentForActionAndIdentifier;
 import static com.mopub.mobileads.HtmlInterstitialWebView.MoPubUriJavascriptFireFinishLoadListener;
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 import static org.fest.assertions.api.Assertions.assertThat;
@@ -35,43 +42,50 @@
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.stub;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 import static org.mockito.Mockito.withSettings;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
-public class MoPubActivityTest extends BaseInterstitialActivityTest {
-    public static final String EXPECTED_HTML_DATA = "htmlData";
-    public static final boolean EXPECTED_IS_SCROLLABLE = true;
-    public static final String EXPECTED_REDIRECT_URL = "redirectUrl";
-    public static final String EXPECTED_CLICKTHROUGH_URL = "http://expected_url";
+public class MoPubActivityTest {
+    private static final String EXPECTED_HTML_DATA = "htmlData";
+    private static final boolean EXPECTED_IS_SCROLLABLE = true;
+    private static final String EXPECTED_REDIRECT_URL = "redirectUrl";
+    private static final String EXPECTED_CLICKTHROUGH_URL = "http://expected_url";
+
+    @Mock private BroadcastReceiver broadcastReceiver;
+    private AdConfiguration adConfiguration;
+    private long testBroadcastIdentifier = 2222;
 
     private HtmlInterstitialWebView htmlInterstitialWebView;
-    private Activity context;
     private CustomEventInterstitialListener customEventInterstitialListener;
 
+    private MoPubActivity subject;
+
     @Before
     public void setUp() throws Exception {
-        super.setup();
+        htmlInterstitialWebView = TestHtmlInterstitialWebViewFactory.getSingletonMock();
+        resetMockedView(htmlInterstitialWebView);
 
         adConfiguration = mock(AdConfiguration.class, withSettings().serializable());
-        stub(adConfiguration.getBroadcastIdentifier()).toReturn(testBroadcastIdentifier);
+        when(adConfiguration.getBroadcastIdentifier()).thenReturn(testBroadcastIdentifier);
 
-        Intent moPubActivityIntent = createMoPubActivityIntent(EXPECTED_HTML_DATA, EXPECTED_IS_SCROLLABLE, EXPECTED_REDIRECT_URL, EXPECTED_CLICKTHROUGH_URL, adConfiguration);
-        htmlInterstitialWebView = TestHtmlInterstitialWebViewFactory.getSingletonMock();
-        resetMockedView(htmlInterstitialWebView);
-        subject = Robolectric.buildActivity(MoPubActivity.class).withIntent(moPubActivityIntent).create().get();
+        Context context = Robolectric.buildActivity(Activity.class).create().get();
+        Intent moPubActivityIntent = MoPubActivity.createIntent(context,
+                EXPECTED_HTML_DATA, EXPECTED_IS_SCROLLABLE,
+                EXPECTED_REDIRECT_URL,
+                EXPECTED_CLICKTHROUGH_URL, adConfiguration);
 
-        context = new Activity();
+        subject = Robolectric.buildActivity(MoPubActivity.class).withIntent(moPubActivityIntent).create().get();
         customEventInterstitialListener = mock(CustomEventInterstitialListener.class);
 
-        reset(htmlInterstitialWebView);
         resetMockedView(htmlInterstitialWebView);
     }
 
     @Test
     public void preRenderHtml_shouldPreloadTheHtml() throws Exception {
         String htmlData = "this is nonsense";
-        MoPubActivity.preRenderHtml(context, customEventInterstitialListener, htmlData);
+        MoPubActivity.preRenderHtml(subject, customEventInterstitialListener, htmlData);
 
         verify(htmlInterstitialWebView).enablePlugins(eq(false));
         verify(htmlInterstitialWebView).addMoPubUriJavascriptInterface(any(MoPubUriJavascriptFireFinishLoadListener.class));
@@ -80,7 +94,7 @@ public void preRenderHtml_shouldPreloadTheHtml() throws Exception {
 
     @Test
     public void preRenderHtml_shouldHaveAWebViewClientThatForwardsFinishLoad() throws Exception {
-        MoPubActivity.preRenderHtml(context, customEventInterstitialListener, null);
+        MoPubActivity.preRenderHtml(subject, customEventInterstitialListener, null);
 
         ArgumentCaptor<WebViewClient> webViewClientCaptor = ArgumentCaptor.forClass(WebViewClient.class);
         verify(htmlInterstitialWebView).setWebViewClient(webViewClientCaptor.capture());
@@ -94,7 +108,7 @@ public void preRenderHtml_shouldHaveAWebViewClientThatForwardsFinishLoad() throw
 
     @Test
     public void preRenderHtml_shouldHaveAWebViewClientThatForwardsFailLoad() throws Exception {
-        MoPubActivity.preRenderHtml(context, customEventInterstitialListener, null);
+        MoPubActivity.preRenderHtml(subject, customEventInterstitialListener, null);
 
         ArgumentCaptor<WebViewClient> webViewClientCaptor = ArgumentCaptor.forClass(WebViewClient.class);
         verify(htmlInterstitialWebView).setWebViewClient(webViewClientCaptor.capture());
@@ -108,7 +122,7 @@ public void preRenderHtml_shouldHaveAWebViewClientThatForwardsFailLoad() throws
 
     @Test
     public void preRenderHtml_shouldHaveAMoPubUriInterfaceThatForwardsOnInterstitialLoaded() throws Exception {
-        MoPubActivity.preRenderHtml(context, customEventInterstitialListener, null);
+        MoPubActivity.preRenderHtml(subject, customEventInterstitialListener, null);
 
         ArgumentCaptor<MoPubUriJavascriptFireFinishLoadListener> moPubUriJavascriptFireFinishLoadListenerCaptor = ArgumentCaptor.forClass(MoPubUriJavascriptFireFinishLoadListener.class);
         verify(htmlInterstitialWebView).addMoPubUriJavascriptInterface(moPubUriJavascriptFireFinishLoadListenerCaptor.capture());
@@ -123,19 +137,19 @@ public void preRenderHtml_shouldHaveAMoPubUriInterfaceThatForwardsOnInterstitial
     public void onCreate_shouldSetContentView() throws Exception {
         subject.onCreate(null);
 
-        assertThat(getContentView(subject).getChildCount()).isEqualTo(2);
+        assertThat(getContentView().getChildCount()).isEqualTo(1);
     }
 
     @Test
     public void onCreate_shouldLayoutWebView() throws Exception {
         subject.onCreate(null);
 
-        ArgumentCaptor<RelativeLayout.LayoutParams> captor = ArgumentCaptor.forClass(RelativeLayout.LayoutParams.class);
+        ArgumentCaptor<FrameLayout.LayoutParams> captor = ArgumentCaptor.forClass(FrameLayout.LayoutParams.class);
         verify(htmlInterstitialWebView).setLayoutParams(captor.capture());
-        RelativeLayout.LayoutParams actualLayoutParams = captor.getValue();
+        FrameLayout.LayoutParams actualLayoutParams = captor.getValue();
 
-        assertThat(actualLayoutParams.width).isEqualTo(RelativeLayout.LayoutParams.MATCH_PARENT);
-        assertThat(actualLayoutParams.height).isEqualTo(RelativeLayout.LayoutParams.MATCH_PARENT);
+        assertThat(actualLayoutParams.width).isEqualTo(FrameLayout.LayoutParams.MATCH_PARENT);
+        assertThat(actualLayoutParams.height).isEqualTo(FrameLayout.LayoutParams.MATCH_PARENT);
     }
 
     @Test
@@ -156,7 +170,7 @@ public void onDestroy_shouldDestroyMoPubView() throws Exception {
         subject.onDestroy();
 
         verify(htmlInterstitialWebView).destroy();
-        assertThat(getContentView(subject).getChildCount()).isEqualTo(0);
+        assertThat(getContentView().getChildCount()).isEqualTo(0);
     }
 
     @Test
@@ -253,8 +267,36 @@ public void broadcastingInterstitialListener_onInterstitialClicked_shouldBroadca
         verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
     }
 
-    private Intent createMoPubActivityIntent(String htmlData, boolean isScrollable, String redirectUrl, String clickthroughUrl, AdConfiguration adConfiguration) {
-        return MoPubActivity.createIntent(new Activity(), htmlData, isScrollable, redirectUrl, clickthroughUrl, adConfiguration);
+    @Test
+    public void onCreate_shouldBroadcastInterstitialShow() throws Exception {
+        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, testBroadcastIdentifier);
+        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
+
+        subject.onCreate(null);
+
+        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
+    }
+
+    @Test
+    public void onDestroy_shouldBroadcastInterstitialDismiss() throws Exception {
+        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, testBroadcastIdentifier);
+        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
+
+        subject.onCreate(null);
+        subject.onDestroy();
+
+        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
+    }
+
+    private FrameLayout getContentView() {
+        return (FrameLayout) ((ViewGroup) subject.findViewById(android.R.id.content)).getChildAt(0);
+    }
+
+    protected void resetMockedView(View view) {
+        reset(view);
+        when(view.getLayoutParams()).thenReturn(
+                new FrameLayout.LayoutParams(FrameLayout.LayoutParams.WRAP_CONTENT,
+                        FrameLayout.LayoutParams.WRAP_CONTENT));
     }
 }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubBrowserControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubBrowserControllerTest.java
deleted file mode 100644
index 4f685a00..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubBrowserControllerTest.java
+++ /dev/null
@@ -1,95 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.ResolveInfo;
-import android.net.Uri;
-
-import com.mopub.common.MoPubBrowser;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class MoPubBrowserControllerTest {
-    private MoPubBrowserController subject;
-    private MraidView mraidView;
-    private Context context;
-    private MraidView.MraidListener mraidListener;
-
-    @Before
-    public void setUp() throws Exception {
-        context = new Activity();
-        mraidView = new MraidView(context, null);
-        mraidListener = mock(MraidView.MraidListener.class);
-        mraidView.setMraidListener(mraidListener);
-
-        subject = new MoPubBrowserController(mraidView);
-    }
-
-    @Test
-    public void open_withApplicationUrl_shouldStartNewIntent() throws Exception {
-        String applicationUrl = "amzn://blah";
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW, Uri.parse(applicationUrl)), new ResolveInfo());
-
-        subject.open(applicationUrl);
-
-        Intent startedIntent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(startedIntent).isNotNull();
-        assertThat(startedIntent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(startedIntent.getComponent()).isNull();
-    }
-
-    @Test
-    public void open_withHttpApplicationUrl_shouldStartMoPubBrowser() throws Exception {
-        String applicationUrl = "http://blah";
-
-        subject.open(applicationUrl);
-
-        Intent startedIntent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(startedIntent).isNotNull();
-        assertThat(startedIntent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(startedIntent.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser");
-    }
-
-    @Test
-    public void open_withApplicationUrlThatCantBeHandled_shouldDefaultToMoPubBrowser() throws Exception {
-        String applicationUrl = "canthandleme://blah";
-
-        subject.open(applicationUrl);
-
-        Intent startedIntent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(startedIntent).isNotNull();
-        assertThat(startedIntent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(startedIntent.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser");
-        assertThat(startedIntent.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(applicationUrl);
-    }
-
-    @Test
-    public void open_withHttpApplicationUrl_shouldCallMraidListenerOnOpenCallback() throws Exception {
-        String applicationUrl = "http://blah";
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW, Uri.parse(applicationUrl)), new ResolveInfo());
-
-        subject.open(applicationUrl);
-
-        verify(mraidListener).onOpen(eq(mraidView));
-    }
-
-    @Test
-    public void open_withApplicationUrl_shouldCallMraidListenerOnOpenCallback() throws Exception {
-        String applicationUrl = "app://blah";
-
-        subject.open(applicationUrl);
-
-        verify(mraidListener).onOpen(eq(mraidView));
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
index 9bc34a61..274a7e04 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
@@ -7,12 +7,15 @@
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestAdViewControllerFactory;
 import com.mopub.mobileads.test.support.TestCustomEventInterstitialAdapterFactory;
+
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
 import java.math.BigDecimal;
-import java.util.*;
+import java.util.HashMap;
+import java.util.Map;
 
 import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_DATA;
 import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_HTML_DATA;
@@ -276,6 +279,7 @@ public void loadingCustomEventInterstitial_shouldBecomeReadyToShowCustomEventAd(
         assertShowsCustomEventInterstitial(true);
     }
 
+    @Ignore("pending")
     @Test
     public void dismissingHtmlInterstitial_shouldNotBecomeReadyToShowHtmlAd() throws Exception {
 //        EventForwardingBroadcastReceiver broadcastReceiver = new EventForwardingBroadcastReceiver(subject.mInterstitialAdListener);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
index cbe31354..5d41d5f6 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
@@ -1,28 +1,29 @@
 package com.mopub.mobileads;
 
-import android.app.Activity;
+import android.content.BroadcastReceiver;
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
-import android.graphics.Color;
-import android.os.Build;
 import android.os.Build.VERSION_CODES;
 import android.view.View;
+import android.view.ViewGroup;
 import android.view.WindowManager;
 import android.webkit.WebViewClient;
-import android.widget.Button;
-import android.widget.ImageButton;
-import android.widget.RelativeLayout;
+import android.widget.FrameLayout;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.Dips;
-import com.mopub.mobileads.test.support.TestMraidViewFactory;
+import com.mopub.mraid.MraidBridge;
+import com.mopub.mraid.MraidBridge.MraidWebView;
+import com.mopub.mraid.MraidController;
+import com.mopub.mraid.MraidController.MraidListener;
 
 import org.fest.assertions.api.ANDROID;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
+import org.mockito.Mock;
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLocalBroadcastManager;
@@ -31,95 +32,116 @@
 import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.getHtmlInterstitialIntentFilter;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
-import static com.mopub.mobileads.MraidView.MraidListener;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.stub;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.withSettings;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
-public class MraidActivityTest extends BaseInterstitialActivityTest {
+public class MraidActivityTest {
+    static final String EXPECTED_SOURCE = "expected source";
 
-    private MraidView mraidView;
-    private CustomEventInterstitial.CustomEventInterstitialListener customEventInterstitialListener;
-    private Activity context;
+    @Mock MraidWebView mraidWebView;
+    @Mock MraidBridge mraidBridge;
+    @Mock MraidController mraidController;
+    @Mock CustomEventInterstitial.CustomEventInterstitialListener
+            customEventInterstitialListener;
+    @Mock AdConfiguration adConfiguration;
+    @Mock BroadcastReceiver broadcastReceiver;
+
+    long testBroadcastIdentifier = 2222;
+
+    TestMraidActivity subject;
+
+    // Make a concrete version of the abstract class for testing purposes.
+    private static class TestMraidActivity extends MraidActivity {
+        View mraidWebView;
+
+        @Override
+        public View getAdView() {
+            return mraidWebView;
+        }
+    }
 
     @Before
     public void setUp() throws Exception {
-        super.setup();
-        context = new Activity();
-        Intent mraidActivityIntent = createMraidActivityIntent(EXPECTED_SOURCE);
-        mraidView = TestMraidViewFactory.getSingletonMock();
-        resetMockedView(mraidView);
-        subject = Robolectric.buildActivity(MraidActivity.class).withIntent(mraidActivityIntent).create().get();
-        resetMockedView(mraidView);
-        customEventInterstitialListener = mock(CustomEventInterstitial.CustomEventInterstitialListener.class);
+        subject = Robolectric.buildActivity(TestMraidActivity.class).get();
+        subject.mraidWebView = mraidWebView;
+        Robolectric.shadowOf(subject).callOnCreate(null);
     }
 
+    @Ignore("Mraid 2.0")
     @Test
     public void preRenderHtml_shouldDisablePluginsSetListenersAndLoadHtml() throws Exception {
-        MraidActivity.preRenderHtml(null, customEventInterstitialListener, "3:27");
+        MraidActivity.preRenderHtml(subject, customEventInterstitialListener, "3:27");
 
-        verify(mraidView).enablePlugins(eq(false));
-        verify(mraidView).setMraidListener(any(MraidListener.class));
-        verify(mraidView).setWebViewClient(any(WebViewClient.class));
-        verify(mraidView).loadHtmlData(eq("3:27"));
+        verify(mraidWebView).enablePlugins(eq(false));
+        verify(mraidController).setMraidListener(any(MraidListener.class));
+        verify(mraidWebView).setWebViewClient(any(WebViewClient.class));
+        verify(mraidBridge).setContentHtml(eq("3:27"));
     }
 
+    @Ignore("Mraid 2.0")
     @Test
     public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialLoaded_whenMraidListenerOnReady() throws Exception {
-        MraidActivity.preRenderHtml(null, customEventInterstitialListener, "");
+        MraidActivity.preRenderHtml(subject, customEventInterstitialListener, "");
 
         ArgumentCaptor<MraidListener> mraidListenerArgumentCaptorr = ArgumentCaptor.forClass(MraidListener.class);
-        verify(mraidView).setMraidListener(mraidListenerArgumentCaptorr.capture());
+        verify(mraidController).setMraidListener(mraidListenerArgumentCaptorr.capture());
         MraidListener mraidListener = mraidListenerArgumentCaptorr.getValue();
 
-        mraidListener.onReady(null);
+        mraidListener.onLoaded(null);
 
         verify(customEventInterstitialListener).onInterstitialLoaded();
     }
 
+    @Ignore("Mraid 2.0")
     @Test
     public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialFailed_whenMraidListenerOnFailure() throws Exception {
-        MraidActivity.preRenderHtml(null, customEventInterstitialListener, "");
+        MraidActivity.preRenderHtml(subject, customEventInterstitialListener, "");
 
         ArgumentCaptor<MraidListener> mraidListenerArgumentCaptorr = ArgumentCaptor.forClass(MraidListener.class);
-        verify(mraidView).setMraidListener(mraidListenerArgumentCaptorr.capture());
+        verify(mraidController).setMraidListener(mraidListenerArgumentCaptorr.capture());
         MraidListener mraidListener = mraidListenerArgumentCaptorr.getValue();
 
-        mraidListener.onFailure(null);
+        mraidListener.onFailedToLoad();
 
         verify(customEventInterstitialListener).onInterstitialFailed(null);
     }
 
+    @Ignore("Mraid 2.0")
     @Test
     public void preRenderHtml_whenWebViewClientShouldOverrideUrlLoading_shouldReturnTrue() throws Exception {
-        MraidActivity.preRenderHtml(null, customEventInterstitialListener, "");
+        MraidActivity.preRenderHtml(subject, customEventInterstitialListener, "");
 
         ArgumentCaptor<WebViewClient> webViewClientArgumentCaptor = ArgumentCaptor.forClass(WebViewClient.class);
-        verify(mraidView).setWebViewClient(webViewClientArgumentCaptor.capture());
+        verify(mraidWebView).setWebViewClient(webViewClientArgumentCaptor.capture());
         WebViewClient webViewClient = webViewClientArgumentCaptor.getValue();
 
         boolean consumeUrlLoading = webViewClient.shouldOverrideUrlLoading(null, null);
 
         assertThat(consumeUrlLoading).isTrue();
         verify(customEventInterstitialListener, never()).onInterstitialLoaded();
-        verify(customEventInterstitialListener, never()).onInterstitialFailed(any(MoPubErrorCode.class));
+        verify(customEventInterstitialListener, never()).onInterstitialFailed(
+                any(MoPubErrorCode.class));
     }
 
+    @Ignore("Mraid 2.0")
     @Test
     public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialLoaded_whenWebViewClientOnPageFinished() throws Exception {
-        MraidActivity.preRenderHtml(null, customEventInterstitialListener, "");
+        MraidActivity.preRenderHtml(subject, customEventInterstitialListener, "");
 
         ArgumentCaptor<WebViewClient> webViewClientArgumentCaptor = ArgumentCaptor.forClass(WebViewClient.class);
-        verify(mraidView).setWebViewClient(webViewClientArgumentCaptor.capture());
+        verify(mraidWebView).setWebViewClient(webViewClientArgumentCaptor.capture());
         WebViewClient webViewClient = webViewClientArgumentCaptor.getValue();
 
         webViewClient.onPageFinished(null, null);
@@ -127,52 +149,41 @@ public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialLoaded_
         verify(customEventInterstitialListener).onInterstitialLoaded();
     }
 
+    @Ignore("Mraid 2.0")
     @Test
     public void onCreate_shouldSetContentView() throws Exception {
         subject.onCreate(null);
 
-        assertThat(getContentView(subject).getChildCount()).isEqualTo(3);
+        assertThat(getContentView().getChildCount()).isEqualTo(1);
     }
 
+    @Ignore("Mraid 2.0")
     @Test
     public void onCreate_shouldSetupAnMraidView() throws Exception {
         subject.onCreate(null);
 
-        assertThat(getContentView(subject).getChildAt(0)).isSameAs(mraidView);
-        verify(mraidView).setMraidListener(any(MraidListener.class));
-        verify(mraidView).setOnCloseButtonStateChange(any(MraidView.OnCloseButtonStateChangeListener.class));
+        assertThat(getContentView().getChildAt(0)).isSameAs(mraidWebView);
+        verify(mraidController).setMraidListener(any(MraidListener.class));
 
-        verify(mraidView).loadHtmlData(EXPECTED_SOURCE);
+        verify(mraidBridge).setContentHtml(EXPECTED_SOURCE);
     }
 
+    @Ignore("Mraid 2.0")
     @Test
     public void onCreate_shouldSetLayoutOfMraidView() throws Exception {
         subject.onCreate(null);
 
-        ArgumentCaptor<RelativeLayout.LayoutParams> captor = ArgumentCaptor.forClass(RelativeLayout.LayoutParams.class);
-        verify(mraidView).setLayoutParams(captor.capture());
-        RelativeLayout.LayoutParams actualLayoutParams = captor.getValue();
+        ArgumentCaptor<FrameLayout.LayoutParams> captor = ArgumentCaptor.forClass(
+                FrameLayout.LayoutParams.class);
+        verify(mraidWebView).setLayoutParams(captor.capture());
+        FrameLayout.LayoutParams actualLayoutParams = captor.getValue();
 
-        assertThat(actualLayoutParams.width).isEqualTo(RelativeLayout.LayoutParams.MATCH_PARENT);
-        assertThat(actualLayoutParams.height).isEqualTo(RelativeLayout.LayoutParams.MATCH_PARENT);
-    }
-
-    @Test
-    public void onCreate_shouldAddCloseEventRegion() throws Exception {
-        subject.onCreate(null);
-
-        final Button closeEventRegion = (Button) getContentView(subject).getChildAt(2);
-        assertThat(closeEventRegion.getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(shadowOf(closeEventRegion).getBackgroundColor()).isEqualTo(Color.TRANSPARENT);
-        assertThat(Dips.pixelsToIntDips((float) closeEventRegion.getLayoutParams().width, context)).isEqualTo(50);
-        assertThat(Dips.pixelsToIntDips((float) closeEventRegion.getLayoutParams().height, context)).isEqualTo(50);
-        assertThat(((RelativeLayout.LayoutParams)closeEventRegion.getLayoutParams()).getRules()[RelativeLayout.ALIGN_PARENT_TOP])
-                .isEqualTo(RelativeLayout.TRUE);
-        assertThat(((RelativeLayout.LayoutParams)closeEventRegion.getLayoutParams()).getRules()[RelativeLayout.ALIGN_PARENT_RIGHT])
-                .isEqualTo(RelativeLayout.TRUE);
+        assertThat(actualLayoutParams.width).isEqualTo(FrameLayout.LayoutParams.MATCH_PARENT);
+        assertThat(actualLayoutParams.height).isEqualTo(FrameLayout.LayoutParams.MATCH_PARENT);
     }
 
     @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Ignore("Mraid 2.0")
     @Test
     public void onCreate_atLeastIcs_shouldSetHardwareAcceleratedFlag() throws Exception {
         subject.onCreate(null);
@@ -182,6 +193,7 @@ public void onCreate_atLeastIcs_shouldSetHardwareAcceleratedFlag() throws Except
     }
 
     @Config(reportSdk = VERSION_CODES.HONEYCOMB_MR2)
+    @Ignore("Mraid 2.0")
     @Test
     public void onCreate_beforeIcs_shouldNotSetHardwareAcceleratedFlag() throws Exception {
         subject.onCreate(null);
@@ -190,146 +202,117 @@ public void onCreate_beforeIcs_shouldNotSetHardwareAcceleratedFlag() throws Exce
         assertThat(hardwareAccelerated).isFalse();
     }
 
-    @Test
-    public void closeEventRegion_shouldFinishActivityWhenClicked() throws Exception {
-        subject.onCreate(null);
-
-        final Button closeEventRegion = (Button) getContentView(subject).getChildAt(2);
-        assertThat(closeEventRegion.performClick()).isTrue();
-        assertThat(subject.isFinishing()).isTrue();
-    }
-
+    @Ignore("Mraid 2.0")
     @Test
     public void onDestroy_DestroyMraidView() throws Exception {
         Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, subject.getBroadcastIdentifier());
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
+        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver,
+                getHtmlInterstitialIntentFilter());
 
-        subject.onCreate(null);
         subject.onDestroy();
 
         verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
-        verify(mraidView).destroy();
-        assertThat(getContentView(subject).getChildCount()).isEqualTo(0);
+        verify(mraidWebView).destroy();
+        assertThat(getContentView().getChildCount()).isEqualTo(0);
     }
 
+    @Ignore("Mraid 2.0")
     @Test
     public void getAdView_shouldSetupOnReadyListener() throws Exception {
-        subject.onCreate(null);
-        resetMockedView(mraidView);
+        reset(mraidWebView);
         ArgumentCaptor<MraidListener> captor = ArgumentCaptor.forClass(MraidListener.class);
         View actualAdView = subject.getAdView();
 
-        assertThat(actualAdView).isSameAs(mraidView);
-        verify(mraidView).setMraidListener(captor.capture());
+        assertThat(actualAdView).isSameAs(mraidWebView);
+        verify(mraidController).setMraidListener(captor.capture());
 
         subject.hideInterstitialCloseButton();
-        captor.getValue().onReady(null);
-        ImageButton closeButton = (ImageButton) getContentView(subject).getChildAt(1);
-        assertThat(closeButton).isNotNull();
+        captor.getValue().onLoaded(null);
     }
 
+    @Ignore("Mraid 2.0")
     @Test
     public void baseMraidListenerOnReady_shouldFireJavascriptWebViewDidAppear() throws Exception {
-        subject.onCreate(null);
-        resetMockedView(mraidView);
+        reset(mraidWebView);
         ArgumentCaptor<MraidListener> captor = ArgumentCaptor.forClass(MraidListener.class);
         View actualAdView = subject.getAdView();
 
-        assertThat(actualAdView).isSameAs(mraidView);
-        verify(mraidView).setMraidListener(captor.capture());
+        assertThat(actualAdView).isSameAs(mraidWebView);
+        verify(mraidController).setMraidListener(captor.capture());
 
         MraidListener baseMraidListener = captor.getValue();
-        baseMraidListener.onReady(null);
+        baseMraidListener.onLoaded(null);
 
-        verify(mraidView).loadUrl(eq("javascript:webviewDidAppear();"));
+        verify(mraidWebView).loadUrl(eq("javascript:webviewDidAppear();"));
     }
 
+    @Ignore("Mraid 2.0")
     @Test
     public void baseMraidListenerOnClose_shouldFireJavascriptWebViewDidClose() throws Exception {
-        subject.onCreate(null);
-        resetMockedView(mraidView);
+        reset(mraidWebView);
         ArgumentCaptor<MraidListener> captor = ArgumentCaptor.forClass(MraidListener.class);
         View actualAdView = subject.getAdView();
 
-        assertThat(actualAdView).isSameAs(mraidView);
-        verify(mraidView).setMraidListener(captor.capture());
+        assertThat(actualAdView).isSameAs(mraidWebView);
+        verify(mraidController).setMraidListener(captor.capture());
 
         MraidListener baseMraidListener = captor.getValue();
-        baseMraidListener.onClose(null, null);
+        baseMraidListener.onClose();
 
-        verify(mraidView).loadUrl(eq("javascript:webviewDidClose();"));
+        verify(mraidWebView).loadUrl(eq("javascript:webviewDidClose();"));
     }
 
+    @Ignore("Mraid 2.0")
     @Test
     public void baseMraidListenerOnOpen_shouldBroadcastClickEvent() throws Exception {
         Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_CLICK, testBroadcastIdentifier);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
+        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver,
+                getHtmlInterstitialIntentFilter());
 
-        subject.onCreate(null);
-        resetMockedView(mraidView);
+        reset(mraidWebView);
 
         ArgumentCaptor<MraidListener> captor = ArgumentCaptor.forClass(MraidListener.class);
         View actualAdView = subject.getAdView();
 
-        assertThat(actualAdView).isSameAs(mraidView);
-        verify(mraidView).setMraidListener(captor.capture());
+        assertThat(actualAdView).isSameAs(mraidWebView);
+        verify(mraidController).setMraidListener(captor.capture());
 
         MraidListener baseMraidListener = captor.getValue();
-        baseMraidListener.onOpen(null);
+        baseMraidListener.onOpen();
 
         verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
     }
 
-    @Test
-    public void getAdView_shouldSetupOnCloseButtonStateChangeListener() throws Exception {
-        subject.onCreate(null);
-        resetMockedView(mraidView);
-        ArgumentCaptor<MraidView.OnCloseButtonStateChangeListener> captor = ArgumentCaptor.forClass(MraidView.OnCloseButtonStateChangeListener.class);
-        View actualAdView = subject.getAdView();
-
-        assertThat(actualAdView).isSameAs(mraidView);
-        verify(mraidView).setOnCloseButtonStateChange(captor.capture());
-        MraidView.OnCloseButtonStateChangeListener listener = captor.getValue();
-
-        ANDROID.assertThat(getCloseButton()).isVisible();
-
-        listener.onCloseButtonStateChange(null, false);
-        ANDROID.assertThat(getCloseButton()).isNotVisible();
-
-        listener.onCloseButtonStateChange(null, true);
-        ANDROID.assertThat(getCloseButton()).isVisible();
-    }
-
+    @Ignore("Mraid 2.0")
     @Test
     public void getAdView_shouldSetupOnCloseListener() throws Exception {
-        subject.onCreate(null);
-        resetMockedView(mraidView);
+        reset(mraidWebView);
         ArgumentCaptor<MraidListener> captor = ArgumentCaptor.forClass(MraidListener.class);
         View actualAdView = subject.getAdView();
 
-        assertThat(actualAdView).isSameAs(mraidView);
-        verify(mraidView).setMraidListener(captor.capture());
+        assertThat(actualAdView).isSameAs(mraidWebView);
+        verify(mraidController).setMraidListener(captor.capture());
 
-        captor.getValue().onClose(null, null);
+        captor.getValue().onClose();
 
         ANDROID.assertThat(subject).isFinishing();
     }
 
+    @Ignore("Mraid 2.0")
     @Test
     public void onPause_shouldOnPauseMraidView() throws Exception {
-        subject.onCreate(null);
-        ((MraidActivity)subject).onPause();
+        Robolectric.shadowOf(subject).callOnPause();
 
-        verify(mraidView).onPause();
+        verify(mraidWebView).onPause();
     }
 
+    @Ignore("Mraid 2.0")
     @Test
     public void onResume_shouldResumeMraidView() throws Exception {
         subject.onCreate(null);
-        ((MraidActivity)subject).onPause();
-        ((MraidActivity)subject).onResume();
+        Robolectric.shadowOf(subject).pauseAndThenResume();
 
-        verify(mraidView).onResume();
+        verify(mraidWebView).onResume();
     }
 
     private Intent createMraidActivityIntent(String expectedSource) {
@@ -343,4 +326,28 @@ private Intent createMraidActivityIntent(String expectedSource) {
 
         return mraidActivityIntent;
     }
+
+    @Ignore("Mraid 2.0")
+    @Test
+    public void onCreate_shouldBroadcastInterstitialShow() throws Exception {
+        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, testBroadcastIdentifier);
+        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
+
+        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
+    }
+
+    @Ignore("Mraid 2.0")
+    @Test
+    public void onDestroy_shouldBroadcastInterstitialDismiss() throws Exception {
+        Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_DISMISS, testBroadcastIdentifier);
+        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, getHtmlInterstitialIntentFilter());
+
+        subject.onDestroy();
+
+        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
+    }
+
+    private FrameLayout getContentView() {
+        return (FrameLayout) ((ViewGroup) subject.findViewById(android.R.id.content)).getChildAt(0);
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidBannerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidBannerTest.java
deleted file mode 100644
index 05aa59de..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidBannerTest.java
+++ /dev/null
@@ -1,125 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.TestMraidViewFactory;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
-import static com.mopub.mobileads.MoPubErrorCode.MRAID_LOAD_ERROR;
-import static com.mopub.mobileads.MraidView.MraidListener;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class MraidBannerTest {
-    private MraidBanner subject;
-    private MraidView mraidView;
-    private Activity context;
-    private Map<String, Object> localExtras;
-    private Map<String, String> serverExtras;
-    private CustomEventBannerListener bannerListener;
-    private static final String INPUT_HTML_DATA = "%3Chtml%3E%3C%2Fhtml%3E";
-    private static final String EXPECTED_HTML_DATA = "<html></html>";
-
-    @Before
-    public void setUp() throws Exception {
-        subject = new MraidBanner();
-        mraidView = TestMraidViewFactory.getSingletonMock();
-
-        context = new Activity();
-        bannerListener = mock(CustomEventBanner.CustomEventBannerListener.class);
-        localExtras = new HashMap<String, Object>();
-        serverExtras = new HashMap<String, String>();
-        serverExtras.put(HTML_RESPONSE_BODY_KEY, INPUT_HTML_DATA);
-    }
-
-    @Test
-    public void loadBanner_whenExtrasAreMalformed_shouldNotifyBannerListenerAndReturn() throws Exception {
-        serverExtras.remove(HTML_RESPONSE_BODY_KEY);
-
-        subject.loadBanner(context, bannerListener, localExtras, serverExtras);
-
-        verify(bannerListener).onBannerFailed(eq(MRAID_LOAD_ERROR));
-        verify(mraidView, never()).loadHtmlData(any(String.class));
-        verify(mraidView, never()).setMraidListener(any(MraidListener.class));
-    }
-
-    @Test
-    public void loadBanner_shouldLoadHtmlDataAndInitializeListeners() throws Exception {
-        subject.loadBanner(context, bannerListener, localExtras, serverExtras);
-
-        verify(mraidView).loadHtmlData(EXPECTED_HTML_DATA);
-
-        verify(mraidView).setMraidListener(any(MraidListener.class));
-    }
-
-    @Test
-    public void invalidate_shouldDestroyMraidView() throws Exception {
-        subject.loadBanner(context, bannerListener, localExtras, serverExtras);
-        subject.onInvalidate();
-
-        verify(mraidView).destroy();
-    }
-
-    @Test
-    public void bannerMraidListener_onReady_shouldNotifyBannerLoaded() throws Exception {
-        MraidListener mraidListener = captureMraidListener();
-        mraidListener.onReady(null);
-
-        verify(bannerListener).onBannerLoaded(eq(mraidView));
-    }
-
-    @Test
-    public void bannerMraidListener_onFailure_shouldNotifyBannerFailed() throws Exception {
-        MraidListener mraidListener = captureMraidListener();
-        mraidListener.onFailure(null);
-
-        verify(bannerListener).onBannerFailed(eq(MRAID_LOAD_ERROR));
-    }
-
-    @Test
-    public void bannerMraidListener_onExpand_shouldNotifyBannerExpandedAndClicked() throws Exception {
-        MraidListener mraidListener = captureMraidListener();
-        mraidListener.onExpand(null);
-
-        verify(bannerListener).onBannerExpanded();
-        verify(bannerListener).onBannerClicked();
-    }
-
-    @Test
-    public void bannerMraidListener_onOpen_shouldNotifyBannerClicked() throws Exception {
-        MraidListener mraidListener = captureMraidListener();
-        mraidListener.onOpen(null);
-
-        verify(bannerListener).onBannerClicked();
-    }
-
-    @Test
-    public void bannerMraidListener_onClose_shouldNotifyBannerCollapsed() throws Exception {
-        MraidListener mraidListener = captureMraidListener();
-        mraidListener.onClose(null, null);
-
-        verify(bannerListener).onBannerCollapsed();
-    }
-
-    private MraidListener captureMraidListener() {
-        subject.loadBanner(context, bannerListener, localExtras, serverExtras);
-        ArgumentCaptor<MraidListener> listenerCaptor = ArgumentCaptor.forClass(MraidListener.class);
-        verify(mraidView).setMraidListener(listenerCaptor.capture());
-
-        return listenerCaptor.getValue();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandFactoryTest.java
deleted file mode 100644
index 8a164b71..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandFactoryTest.java
+++ /dev/null
@@ -1,80 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import java.util.Map;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-
-@RunWith(SdkTestRunner.class)
-public class MraidCommandFactoryTest {
-    private MraidCommandFactory subject;
-    private Map params;
-    private MraidView mraidView;
-
-    @Before
-    public void setUp() throws Exception {
-        subject = new MraidCommandFactory();
-        params = mock(Map.class);
-        mraidView = mock(MraidView.class);
-
-    }
-
-    @Test
-    public void create_withCommandName_shouldInstantiateCorrectSubclass() throws Exception {
-        assertMraidCommandFactoryCreatesCorrectMraidCommandSubclass("close", MraidCommandClose.class);
-        assertMraidCommandFactoryCreatesCorrectMraidCommandSubclass("expand", MraidCommandExpand.class);
-        assertMraidCommandFactoryCreatesCorrectMraidCommandSubclass("usecustomclose", MraidCommandUseCustomClose.class);
-        assertMraidCommandFactoryCreatesCorrectMraidCommandSubclass("open", MraidCommandOpen.class);
-        assertMraidCommandFactoryCreatesCorrectMraidCommandSubclass("resize", MraidCommandResize.class);
-        assertMraidCommandFactoryCreatesCorrectMraidCommandSubclass("getResizeProperties", MraidCommandGetResizeProperties.class);
-        assertMraidCommandFactoryCreatesCorrectMraidCommandSubclass("setResizeProperties", MraidCommandSetResizeProperties.class);
-        assertMraidCommandFactoryCreatesCorrectMraidCommandSubclass("playVideo", MraidCommandPlayVideo.class);
-        assertMraidCommandFactoryCreatesCorrectMraidCommandSubclass("storePicture", MraidCommandStorePicture.class);
-        assertMraidCommandFactoryCreatesCorrectMraidCommandSubclass("getCurrentPosition", MraidCommandGetCurrentPosition.class);
-        assertMraidCommandFactoryCreatesCorrectMraidCommandSubclass("getDefaultPosition", MraidCommandGetDefaultPosition.class);
-        assertMraidCommandFactoryCreatesCorrectMraidCommandSubclass("getMaxSize", MraidCommandGetMaxSize.class);
-        assertMraidCommandFactoryCreatesCorrectMraidCommandSubclass("getScreenSize", MraidCommandGetScreenSize.class);
-        assertMraidCommandFactoryCreatesCorrectMraidCommandSubclass("createCalendarEvent", MraidCommandCreateCalendarEvent.class);
-    }
-
-    @Test
-    public void create_withInvalidCommandString_shouldReturnNull() throws Exception {
-        MraidCommand command = MraidCommandFactory.create("dog", params, mraidView);
-
-        assertThat(command).isNull();
-    }
-
-    @Test
-    public void create_withNullCommandString_shouldReturnNull() throws Exception {
-        MraidCommand command = MraidCommandFactory.create(null, params, mraidView);
-
-        assertThat(command).isNull();
-    }
-
-    @Test
-    public void create_withNullParams_shouldNotBlowUp() throws Exception {
-        MraidCommand command = MraidCommandFactory.create("close", null, mraidView);
-
-        // pass
-    }
-
-    @Test
-    public void create_withNullMraidView_shouldNotBlowUp() throws Exception {
-        MraidCommand command = MraidCommandFactory.create("close", params, null);
-
-        // pass
-    }
-
-    private void assertMraidCommandFactoryCreatesCorrectMraidCommandSubclass(String command, Class type) {
-        MraidCommand mraidCommand = MraidCommandFactory.create(command, params, mraidView);
-
-        assertThat(mraidCommand).isNotNull();
-        assertThat(mraidCommand).isInstanceOf(type);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandPlayVideoTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandPlayVideoTest.java
deleted file mode 100644
index 44908b00..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandPlayVideoTest.java
+++ /dev/null
@@ -1,53 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.TestMraidViewFactory;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.mopub.mobileads.BaseVideoPlayerActivitiyTest.assertMraidVideoPlayerActivityStarted;
-import static com.mopub.mobileads.MraidCommandPlayVideo.URI_KEY;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.withSettings;
-
-@RunWith(SdkTestRunner.class)
-public class MraidCommandPlayVideoTest {
-    public static final String EXPECTED_URI = "http://expected.uri";
-
-    private MraidCommandPlayVideo subject;
-    private MraidView mraidView;
-    private long testBroadcastIdentifier;
-    private AdConfiguration adConfiguration;
-
-    @Before
-    public void setup() {
-        Map<String, String> params = new HashMap<String, String>();
-
-        params.put(URI_KEY, EXPECTED_URI);
-
-        mraidView = TestMraidViewFactory.getSingletonMock();
-        stub(mraidView.getContext()).toReturn(new Activity());
-        MraidDisplayController displayController = new MraidDisplayController(mraidView, null, null);
-        stub(mraidView.getDisplayController()).toReturn(displayController);
-        subject = new MraidCommandPlayVideo(params, mraidView);
-
-        testBroadcastIdentifier = 2121;
-        adConfiguration = mock(AdConfiguration.class, withSettings().serializable());
-        stub(adConfiguration.getBroadcastIdentifier()).toReturn(testBroadcastIdentifier);
-        stub(mraidView.getAdConfiguration()).toReturn(adConfiguration);
-    }
-
-    @Test
-    public void execute_shouldPlayVideo() throws Exception {
-        subject.execute();
-        assertMraidVideoPlayerActivityStarted(MraidVideoPlayerActivity.class, EXPECTED_URI, adConfiguration);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandResizeTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandResizeTest.java
deleted file mode 100644
index 1a9063c3..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandResizeTest.java
+++ /dev/null
@@ -1,54 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.TestMraidViewFactory;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import java.util.HashMap;
-
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.GET_RESIZE_PROPERTIES;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.RESIZE;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.SET_RESIZE_PROPERTIES;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class MraidCommandResizeTest {
-    private MraidCommandResize subjectResize;
-    private MraidCommandGetResizeProperties subjectGetResizeProperties;
-    private MraidCommandSetResizeProperties subjectSetResizeProperties;
-    private MraidView mraidView;
-    @Before
-    public void setup() {
-        mraidView = TestMraidViewFactory.getSingletonMock();
-        subjectResize = new MraidCommandResize(new HashMap<String, String>(), mraidView);
-        subjectGetResizeProperties = new MraidCommandGetResizeProperties(new HashMap<String, String>(), mraidView);
-        subjectSetResizeProperties = new MraidCommandSetResizeProperties(new HashMap<String, String>(), mraidView);
-    }
-
-    @Test
-    public void mraidCommandResizeExecute_shouldFireErrorEvent() throws Exception {
-        reset(mraidView);
-        subjectResize.execute();
-        verify(mraidView).fireErrorEvent(eq(RESIZE), any(String.class));
-    }
-
-    @Test
-    public void mraidCommandSetResizePropertiesExecute_shouldFireErrorEvent() throws Exception {
-        reset(mraidView);
-        subjectSetResizeProperties.execute();
-        verify(mraidView).fireErrorEvent(eq(SET_RESIZE_PROPERTIES), any(String.class));
-    }
-
-    @Test
-    public void mraidCommandGetResizePropertiesExecute_shouldFireErrorEvent() throws Exception {
-        reset(mraidView);
-        subjectGetResizeProperties.execute();
-        verify(mraidView).fireErrorEvent(eq(GET_RESIZE_PROPERTIES), any(String.class));
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandStorePictureTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandStorePictureTest.java
deleted file mode 100644
index 3fad21a5..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandStorePictureTest.java
+++ /dev/null
@@ -1,76 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.FileUtils;
-import com.mopub.mobileads.test.support.TestMraidViewFactory;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.mopub.mobileads.MraidCommand.URI_KEY;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.STORE_PICTURE;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class MraidCommandStorePictureTest {
-
-    public static final String EXPECTED_FILE = "file://tmp/expectedFile.jpg";
-    private MraidCommandStorePicture subject;
-    private MraidView mraidView;
-    private Map<String,String> params;
-    private MraidDisplayController mraidDisplayController;
-
-    @Before
-    public void setUp() {
-        FileUtils.copyFile("etc/expectedFile.jpg", "/tmp/expectedFile.jpg");
-
-        mraidView = TestMraidViewFactory.getSingletonMock();
-        mraidDisplayController = mock(MraidDisplayController.class);
-        stub(mraidView.getDisplayController()).toReturn(mraidDisplayController);
-
-        params = new HashMap<String, String>();
-        subject = new MraidCommandStorePicture(params, mraidView);
-    }
-
-    @Test
-    public void execute_withImageUri_shouldShowUserDownloadImageAlert() throws Exception {
-        params.put(URI_KEY, EXPECTED_FILE);
-
-        subject.execute();
-
-        verify(mraidDisplayController).showUserDownloadImageAlert(eq(EXPECTED_FILE));
-    }
-
-    @Test
-    public void execute_withEmptyUriKey_shouldFireErrorEvent() throws Exception {
-        params.put(URI_KEY, "");
-
-        subject.execute();
-
-        verify(mraidView).fireErrorEvent(
-                eq(STORE_PICTURE),
-                anyString());
-        verify(mraidDisplayController, never()).showUserDownloadImageAlert(anyString());
-    }
-
-    @Test
-     public void execute_withMissingUriKey_shouldFireErrorEvent() throws Exception {
-        // don't add URI_KEY to params
-
-        subject.execute();
-
-        verify(mraidView).fireErrorEvent(
-                eq(STORE_PICTURE),
-                anyString());
-        verify(mraidDisplayController, never()).showUserDownloadImageAlert(anyString());
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandTest.java
deleted file mode 100644
index e4b7682e..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidCommandTest.java
+++ /dev/null
@@ -1,143 +0,0 @@
-package com.mopub.mobileads;
-
-import org.junit.Test;
-
-import java.util.Map;
-
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.CLOSE;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.CREATE_CALENDAR_EVENT;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.EXPAND;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.GET_CURRENT_POSITION;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.GET_DEFAULT_POSITION;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.GET_MAX_SIZE;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.GET_RESIZE_PROPERTIES;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.GET_SCREEN_SIZE;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.OPEN;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.PLAY_VIDEO;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.RESIZE;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.SET_RESIZE_PROPERTIES;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.STORE_PICTURE;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.USECUSTOMCLOSE;
-import static com.mopub.mobileads.MraidCommandFactory.create;
-import static com.mopub.mobileads.MraidView.PlacementType;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-
-public class MraidCommandTest {
-    @Test
-    public void createCommand_shouldReturnTheRightKindOfCommand() throws Exception {
-        assertThat(create("bogus", null, null)).isNull();
-
-        assertThat(create(CLOSE.getCommand(), null, null)).isInstanceOf(MraidCommandClose.class);
-        assertThat(create(CLOSE.getCommand(), null, null)).isNotSameAs(create("close", null, null));
-
-        assertThat(create(EXPAND.getCommand(), null, null)).isInstanceOf(MraidCommandExpand.class);
-        assertThat(create(USECUSTOMCLOSE.getCommand(), null, null)).isInstanceOf(MraidCommandUseCustomClose.class);
-        assertThat(create(OPEN.getCommand(), null, null)).isInstanceOf(MraidCommandOpen.class);
-        assertThat(create(RESIZE.getCommand(), null, null)).isInstanceOf(MraidCommandResize.class);
-        assertThat(create(SET_RESIZE_PROPERTIES.getCommand(), null, null)).isInstanceOf(MraidCommandSetResizeProperties.class);
-        assertThat(create(GET_RESIZE_PROPERTIES.getCommand(), null, null)).isInstanceOf(MraidCommandGetResizeProperties.class);
-        assertThat(create(PLAY_VIDEO.getCommand(), null, null)).isInstanceOf(MraidCommandPlayVideo.class);
-        assertThat(create(STORE_PICTURE.getCommand(), null, null)).isInstanceOf(MraidCommandStorePicture.class);
-        assertThat(create(GET_CURRENT_POSITION.getCommand(), null, null)).isInstanceOf(MraidCommandGetCurrentPosition.class);
-        assertThat(create(GET_DEFAULT_POSITION.getCommand(), null, null)).isInstanceOf(MraidCommandGetDefaultPosition.class);
-        assertThat(create(GET_MAX_SIZE.getCommand(), null, null)).isInstanceOf(MraidCommandGetMaxSize.class);
-        assertThat(create(GET_SCREEN_SIZE.getCommand(), null, null)).isInstanceOf(MraidCommandGetScreenSize.class);
-        assertThat(create(CREATE_CALENDAR_EVENT.getCommand(), null, null)).isInstanceOf(MraidCommandCreateCalendarEvent.class);
-    }
-
-    @Test
-    public void createCommand_shouldPassParameters() throws Exception {
-        MraidView expectedView = mock(MraidView.class);
-        Map<String, String> expectedMap = mock(Map.class);
-
-        MraidCommand command = create(EXPAND.getCommand(), expectedMap, expectedView);
-        assertThat(command.mParams).isEqualTo(expectedMap);
-        assertThat(command.mView).isEqualTo(expectedView);
-    }
-
-
-    @Test
-    public void createCommand_close_shouldSetDependentOnUserClick() throws Exception {
-        assertThat(create(CLOSE.getCommand(), null, null).isCommandDependentOnUserClick(PlacementType.INLINE)).isFalse();
-        assertThat(create(CLOSE.getCommand(), null, null).isCommandDependentOnUserClick(PlacementType.INTERSTITIAL)).isFalse();
-    }
-
-    @Test
-    public void createCommand_expand_shouldSetDependentOnUserClick() throws Exception {
-        assertThat(create(EXPAND.getCommand(), null, null).isCommandDependentOnUserClick(PlacementType.INLINE)).isTrue();
-        assertThat(create(EXPAND.getCommand(), null, null).isCommandDependentOnUserClick(PlacementType.INTERSTITIAL)).isFalse();
-    }
-
-    @Test
-    public void createCommand_useCustomClose_shouldSetDependentOnUserClick() throws Exception {
-        assertThat(create(USECUSTOMCLOSE.getCommand(), null, null).isCommandDependentOnUserClick(PlacementType.INLINE)).isFalse();
-        assertThat(create(USECUSTOMCLOSE.getCommand(), null, null).isCommandDependentOnUserClick(PlacementType.INTERSTITIAL)).isFalse();
-    }
-
-    @Test
-    public void createCommand_open_shouldSetDependentOnUserClick() throws Exception {
-        assertThat(create(OPEN.getCommand(), null, null).isCommandDependentOnUserClick(PlacementType.INLINE)).isTrue();
-        assertThat(create(OPEN.getCommand(), null, null).isCommandDependentOnUserClick(PlacementType.INTERSTITIAL)).isTrue();
-    }
-
-    @Test
-    public void createCommand_resize_shouldSetDependentOnUserClick() throws Exception {
-        assertThat(create(RESIZE.getCommand(), null, null).isCommandDependentOnUserClick(PlacementType.INLINE)).isFalse();
-        assertThat(create(RESIZE.getCommand(), null, null).isCommandDependentOnUserClick(PlacementType.INTERSTITIAL)).isFalse();
-    }
-
-    @Test
-    public void createCommand_setResizeProperties_shouldSetDependentOnUserClick() throws Exception {
-        assertThat(create(SET_RESIZE_PROPERTIES.getCommand(), null, null).isCommandDependentOnUserClick(PlacementType.INLINE)).isFalse();
-        assertThat(create(SET_RESIZE_PROPERTIES.getCommand(), null, null).isCommandDependentOnUserClick(PlacementType.INTERSTITIAL)).isFalse();
-    }
-
-    @Test
-    public void createCommand_getResizeProperties_shouldSetDependentOnUserClick() throws Exception {
-        assertThat(create(GET_RESIZE_PROPERTIES.getCommand(), null, null).isCommandDependentOnUserClick(PlacementType.INLINE)).isFalse();
-        assertThat(create(GET_RESIZE_PROPERTIES.getCommand(), null, null).isCommandDependentOnUserClick(PlacementType.INTERSTITIAL)).isFalse();
-    }
-
-    @Test
-    public void createCommand_playVideo_shouldSetDependentOnUserClick() throws Exception {
-        assertThat(create(PLAY_VIDEO.getCommand(), null, null).isCommandDependentOnUserClick(PlacementType.INLINE)).isTrue();
-        assertThat(create(PLAY_VIDEO.getCommand(), null, null).isCommandDependentOnUserClick(PlacementType.INTERSTITIAL)).isFalse();
-    }
-
-    @Test
-    public void createCommand_storePicture_shouldSetDependentOnUserClick() throws Exception {
-        assertThat(create(STORE_PICTURE.getCommand(), null, null).isCommandDependentOnUserClick(PlacementType.INLINE)).isTrue();
-        assertThat(create(STORE_PICTURE.getCommand(), null, null).isCommandDependentOnUserClick(PlacementType.INTERSTITIAL)).isTrue();
-    }
-
-    @Test
-    public void createCommand_getCurrentPosition_shouldSetDependentOnUserClick() throws Exception {
-        assertThat(create(GET_CURRENT_POSITION.getCommand(), null, null).isCommandDependentOnUserClick(PlacementType.INLINE)).isFalse();
-        assertThat(create(GET_CURRENT_POSITION.getCommand(), null, null).isCommandDependentOnUserClick(PlacementType.INTERSTITIAL)).isFalse();
-    }
-
-    @Test
-    public void createCommand_getDefaultPosition_shouldSetDependentOnUserClick() throws Exception {
-        assertThat(create(GET_DEFAULT_POSITION.getCommand(), null, null).isCommandDependentOnUserClick(PlacementType.INLINE)).isFalse();
-        assertThat(create(GET_DEFAULT_POSITION.getCommand(), null, null).isCommandDependentOnUserClick(PlacementType.INTERSTITIAL)).isFalse();
-    }
-
-    @Test
-    public void createCommand_getMaxSize_shouldSetDependentOnUserClick() throws Exception {
-        assertThat(create(GET_MAX_SIZE.getCommand(), null, null).isCommandDependentOnUserClick(PlacementType.INLINE)).isFalse();
-        assertThat(create(GET_MAX_SIZE.getCommand(), null, null).isCommandDependentOnUserClick(PlacementType.INTERSTITIAL)).isFalse();
-    }
-
-    @Test
-    public void createCommand_getScreenSize_shouldSetDependentOnUserClick() throws Exception {
-        assertThat(create(GET_SCREEN_SIZE.getCommand(), null, null).isCommandDependentOnUserClick(PlacementType.INLINE)).isFalse();
-        assertThat(create(GET_SCREEN_SIZE.getCommand(), null, null).isCommandDependentOnUserClick(PlacementType.INTERSTITIAL)).isFalse();
-    }
-
-    @Test
-    public void createCommand_createCalendarEvent_shouldSetDependentOnUserClick() throws Exception {
-        assertThat(create(CREATE_CALENDAR_EVENT.getCommand(), null, null).isCommandDependentOnUserClick(PlacementType.INLINE)).isTrue();
-        assertThat(create(CREATE_CALENDAR_EVENT.getCommand(), null, null).isCommandDependentOnUserClick(PlacementType.INTERSTITIAL)).isTrue();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidSupportsPropertyTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidSupportsPropertyTest.java
deleted file mode 100644
index 56ab537d..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidSupportsPropertyTest.java
+++ /dev/null
@@ -1,37 +0,0 @@
-package com.mopub.mobileads;
-
-import org.junit.Test;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-public class MraidSupportsPropertyTest {
-
-    @Test
-    public void MraidSupportsProperty_toJsonPair_should_returnTheSupportsJsonObject() throws Exception {
-        MraidSupportsProperty property =
-                new MraidSupportsProperty()
-                        .withSms(true)
-                        .withTel(true)
-                        .withCalendar(false)
-                        .withStorePicture(false)
-                        .withInlineVideo(false);
-        assertThat(property.toJsonPair()).isEqualTo("supports: {" +
-                "sms: true, " +
-                "tel: true, " +
-                "calendar: false, " +
-                "storePicture: false, " +
-                "inlineVideo: false}");
-    }
-
-    @Test
-    public void MraidSupportsProperty_toJSONPair_should_returnAllDefaultPairValuesAsFalse() throws Exception {
-        MraidSupportsProperty property =
-                new MraidSupportsProperty().withCalendar(true).withInlineVideo(true);
-        assertThat(property.toJsonPair()).isEqualTo("supports: {" +
-                "sms: false, " +
-                "tel: false, " +
-                "calendar: true, " +
-                "storePicture: false, " +
-                "inlineVideo: true}");
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
index d8a9ca17..fc85d6a2 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
@@ -11,6 +11,7 @@
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.util.vast.VastVideoConfiguration;
+import com.mopub.mraid.MraidVideoViewController;
 
 import org.junit.Before;
 import org.junit.Ignore;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidViewTest.java
deleted file mode 100644
index b8e54fe5..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidViewTest.java
+++ /dev/null
@@ -1,345 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.view.View;
-import android.view.ViewGroup;
-import android.webkit.WebViewClient;
-
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.mobileads.resource.MraidJavascript;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.robolectric.Robolectric;
-import org.robolectric.shadows.ShadowWebView;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.verify;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(SdkTestRunner.class)
-public class MraidViewTest {
-    private Context context;
-    private AdConfiguration adConfiguration;
-    private MraidDisplayController mraidDisplayController;
-
-    private MraidView bannerSubject;
-    private MraidView interstitialSubject;
-    private WebViewClient bannerWebViewClient;
-    private WebViewClient interstitialWebViewClient;
-
-    @Before
-    public void setUp() throws Exception {
-        context = new Activity();
-        adConfiguration = mock(AdConfiguration.class);
-        mraidDisplayController = mock(MraidDisplayController.class);
-
-        bannerSubject = new MraidView(context, adConfiguration);
-        bannerSubject.setMraidDisplayController(mraidDisplayController);
-        bannerWebViewClient = bannerSubject.getMraidWebViewClient();
-
-        interstitialSubject = new MraidView(context, adConfiguration, MraidView.ExpansionStyle.ENABLED, MraidView.NativeCloseButtonStyle.ALWAYS_VISIBLE, MraidView.PlacementType.INTERSTITIAL);
-        interstitialSubject.setMraidDisplayController(mraidDisplayController);
-        interstitialWebViewClient = interstitialSubject.getMraidWebViewClient();
-    }
-
-    @Test
-    public void viewSetToVisibleBeforeReady_shouldNotTriggerMRAIDEvent() throws Exception {
-        MraidView mraidViewSpy = spy(bannerSubject);
-        mraidViewSpy.setHasFiredReadyEvent(false);
-        mraidViewSpy.setVisibility(View.INVISIBLE);
-
-        mraidViewSpy.setVisibility(View.VISIBLE);
-
-        assertThat(mraidViewSpy.getIsVisible()).isTrue();
-
-        verify(mraidViewSpy, never()).fireChangeEventForProperty(any(MraidViewableProperty.class));
-    }
-
-    @Test
-    public void viewSetToVisibleAfterReady_shouldTriggerMRAIDEvent() throws Exception {
-        MraidView mraidViewSpy = spy(bannerSubject);
-        mraidViewSpy.setHasFiredReadyEvent(true);
-        mraidViewSpy.setVisibility(View.INVISIBLE);
-        reset(mraidViewSpy);
-
-        mraidViewSpy.setVisibility(View.VISIBLE);
-
-        assertThat(mraidViewSpy.getIsVisible()).isTrue();
-
-        MraidViewableProperty mraidViewableProperty = captureAndVerifyViewablePropertyChangeEventFired(mraidViewSpy);
-        assertThat(mraidViewableProperty.toJsonPair()).isEqualTo("viewable: true");
-    }
-
-    @Test
-    public void viewSetToVisibleAndThenInvisibleAfterReady_shouldTriggerTwoMRAIDEvents() throws Exception {
-        MraidView mraidViewSpy = spy(bannerSubject);
-        mraidViewSpy.setHasFiredReadyEvent(true);
-        mraidViewSpy.setVisibility(View.INVISIBLE);
-        reset(mraidViewSpy);
-
-        mraidViewSpy.setVisibility(View.VISIBLE);
-
-        MraidViewableProperty mraidViewableProperty = captureAndVerifyViewablePropertyChangeEventFired(mraidViewSpy);
-        assertThat(mraidViewableProperty.toJsonPair()).isEqualTo("viewable: true");
-        reset(mraidViewSpy);
-
-        mraidViewSpy.setVisibility(View.INVISIBLE);
-
-        assertThat(mraidViewSpy.getIsVisible()).isFalse();
-
-        mraidViewableProperty = captureAndVerifyViewablePropertyChangeEventFired(mraidViewSpy);
-        assertThat(mraidViewableProperty.toJsonPair()).isEqualTo("viewable: false");
-    }
-
-    @Test
-    public void viewSetToVisibleAndThenGoneAfterReady_shouldTriggerTwoMRAIDEvents() throws Exception {
-        MraidView mraidViewSpy = spy(bannerSubject);
-        mraidViewSpy.setHasFiredReadyEvent(true);
-        mraidViewSpy.setVisibility(View.INVISIBLE);
-        reset(mraidViewSpy);
-
-        mraidViewSpy.setVisibility(View.VISIBLE);
-
-        MraidViewableProperty mraidViewableProperty = captureAndVerifyViewablePropertyChangeEventFired(mraidViewSpy);
-        assertThat(mraidViewableProperty.toJsonPair()).isEqualTo("viewable: true");
-        reset(mraidViewSpy);
-
-        mraidViewSpy.setVisibility(View.GONE);
-
-        assertThat(mraidViewSpy.getIsVisible()).isFalse();
-
-        mraidViewableProperty = captureAndVerifyViewablePropertyChangeEventFired(mraidViewSpy);
-        assertThat(mraidViewableProperty.toJsonPair()).isEqualTo("viewable: false");
-    }
-
-    @Test
-    public void viewSetToVisibleAndThenInvisibleAndThenVisibleAfterReady_shouldTriggerThreeMRAIDEvents() throws Exception {
-        MraidView mraidViewSpy = spy(bannerSubject);
-        mraidViewSpy.setHasFiredReadyEvent(true);
-        mraidViewSpy.setVisibility(View.INVISIBLE);
-        reset(mraidViewSpy);
-
-        mraidViewSpy.setVisibility(View.VISIBLE);
-
-        MraidViewableProperty mraidViewableProperty = captureAndVerifyViewablePropertyChangeEventFired(mraidViewSpy);
-        assertThat(mraidViewableProperty.toJsonPair()).isEqualTo("viewable: true");
-        reset(mraidViewSpy);
-
-        mraidViewSpy.setVisibility(View.INVISIBLE);
-
-        mraidViewableProperty = captureAndVerifyViewablePropertyChangeEventFired(mraidViewSpy);
-        assertThat(mraidViewableProperty.toJsonPair()).isEqualTo("viewable: false");
-        reset(mraidViewSpy);
-
-        mraidViewSpy.setVisibility(View.VISIBLE);
-
-        assertThat(mraidViewSpy.getIsVisible()).isTrue();
-
-        mraidViewableProperty = captureAndVerifyViewablePropertyChangeEventFired(mraidViewSpy);
-        assertThat(mraidViewableProperty.toJsonPair()).isEqualTo("viewable: true");
-    }
-
-    @Test
-    public void loadHtmlData_whenDataIsNull_shouldNotBlowUp() throws Exception {
-        MraidView mraidViewSpy = spy(bannerSubject);
-
-        mraidViewSpy.loadHtmlData(null);
-
-        // pass
-
-        verify(mraidViewSpy, never()).loadDataWithBaseURL(anyString(), anyString(), anyString(), anyString(), anyString());
-    }
-
-    @Test
-    public void loadHtmlData_shouldSendSimpleHtmlToLoadDataWithBaseUrl() throws Exception {
-        MraidView mraidViewSpy = spy(bannerSubject);
-        String htmlData = "<html></html>";
-
-        mraidViewSpy.loadHtmlData(htmlData);
-
-        verify(mraidViewSpy).loadDataWithBaseURL(anyString(), eq(htmlData), eq("text/html"), eq("UTF-8"), anyString());
-    }
-
-
-    @Test
-    public void loadHtmlData_whenHtmlContainsHeadTag_shouldIncludeMraidJs() throws Exception {
-        MraidView mraidViewSpy = spy(bannerSubject);
-        String htmlData = "<html><head></head></html>";
-        String expectedResult = "<html><head><script>" + MraidJavascript.JAVASCRIPT_SOURCE + "</script></head></html>";
-
-        mraidViewSpy.loadHtmlData(htmlData);
-
-        verify(mraidViewSpy).loadDataWithBaseURL(anyString(), eq(expectedResult), eq("text/html"), eq("UTF-8"), anyString());
-    }
-
-    @Test
-    public void loadHtmlData_whenMissingHtmlBoilerplate_shouldAddItAndIncludeMraidJs() throws Exception {
-        MraidView mraidViewSpy = spy(bannerSubject);
-        String htmlData = "<a href='www.goat.com'>CLICK THIS LINK</a>";
-        String expectedResult = "<html><head><script>" + MraidJavascript.JAVASCRIPT_SOURCE + "</script></head>" +
-                "<body style='margin:0;padding:0;'><a href='www.goat.com'>CLICK THIS LINK</a></body></html>";
-
-        mraidViewSpy.loadHtmlData(htmlData);
-
-        verify(mraidViewSpy).loadDataWithBaseURL(anyString(), eq(expectedResult), eq("text/html"), eq("UTF-8"), anyString());
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withMraidCommandCreateCalendarEvent_forBanners_withUserClick_shouldOpenNewCalendarIntent() throws Exception {
-        String url = "mraid://createCalendarEvent?description=hi&start=1";
-        Map<String, String> expectedParams = new HashMap<String, String>(2);
-        expectedParams.put("description", "hi");
-        expectedParams.put("start", "1");
-
-        bannerSubject.onUserClick();
-
-        bannerWebViewClient.shouldOverrideUrlLoading(null, url);
-
-        verify(mraidDisplayController).createCalendarEvent(eq(expectedParams));
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withMraidCommandCreateCalendarEvent_forInterstitials_withUserClick_shouldOpenNewCalendarIntent() throws Exception {
-        String url = "mraid://createCalendarEvent?description=hi&start=1";
-        Map<String, String> expectedParams = new HashMap<String, String>(2);
-        expectedParams.put("description", "hi");
-        expectedParams.put("start", "1");
-
-        interstitialSubject.onUserClick();
-        interstitialWebViewClient.shouldOverrideUrlLoading(null, url);
-
-        verify(mraidDisplayController).createCalendarEvent(eq(expectedParams));
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withMraidCommandCreateCalendarEvent_forBanners_withoutUserClick_shouldNotOpenNewIntent() throws Exception {
-        String url = "mraid://createCalendarEvent?description=Mayan%20Apocalypse%2FEnd%20of%20World&start=2013-08-16T20%3A00-04%3A00&interval=1&frequency=daily";
-
-        assertThat(bannerSubject.wasClicked()).isFalse();
-        bannerWebViewClient.shouldOverrideUrlLoading(null, url);
-
-        verify(mraidDisplayController, never()).createCalendarEvent(any(Map.class));
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withMraidCommandCreateCalendarEvent_forInterstitials_withoutUserClick_shouldNotOpenNewIntent() throws Exception {
-        String url = "mraid://createCalendarEvent?description=Mayan%20Apocalypse%2FEnd%20of%20World&start=2013-08-16T20%3A00-04%3A00&interval=1&frequency=daily";
-
-        interstitialWebViewClient.shouldOverrideUrlLoading(null, url);
-
-        verify(mraidDisplayController, never()).createCalendarEvent(any(Map.class));
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withMraidCommandPlayVideo_forBanners_withOutUserClick_shouldNotOpenNewIntent() throws Exception {
-        String url = "mraid://playVideo?uri=something";
-
-        bannerWebViewClient.shouldOverrideUrlLoading(null, url);
-
-        verify(mraidDisplayController, never()).showVideo(anyString());
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withMraidCommandPlayVideo_forBanners_withUserClick_shouldOpenNewIntent() throws Exception {
-        String url = "mraid://playVideo?uri=something";
-
-        bannerSubject.onUserClick();
-
-        bannerWebViewClient.shouldOverrideUrlLoading(null, url);
-
-        verify(mraidDisplayController).showVideo(eq("something"));
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withMraidCommandPlayVideo_forInterstitials_shouldOpenNewIntent() throws Exception {
-        String url = "mraid://playVideo?uri=something";
-
-        assertThat(interstitialSubject.wasClicked()).isFalse();
-        interstitialWebViewClient.shouldOverrideUrlLoading(null, url);
-
-        verify(mraidDisplayController).showVideo(eq("something"));
-
-        reset(mraidDisplayController);
-        interstitialSubject.onUserClick();
-        interstitialWebViewClient.shouldOverrideUrlLoading(null, url);
-
-        verify(mraidDisplayController).showVideo(eq("something"));
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withRedirectUrl_withoutUserClick_shouldNotOpenNewIntentAndReturnFalse() throws Exception {
-        String url = "http://www.blah.com";
-
-        boolean consumeUrlLoading = bannerWebViewClient.shouldOverrideUrlLoading(null, url);
-
-        Intent startedIntent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(startedIntent).isNull();
-        assertThat(consumeUrlLoading).isFalse();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withRedirectUrl_withUserClick_shouldOpenNewIntent() throws Exception {
-        String url = "http://www.blah.com";
-        bannerSubject.onUserClick();
-
-        boolean consumeUrlLoading = bannerWebViewClient.shouldOverrideUrlLoading(null, url);
-
-        Intent startedIntent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(startedIntent).isNotNull();
-        assertThat(consumeUrlLoading).isTrue();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withRelativeUrl_andUserClick_shouldReturnTrue() throws Exception {
-        String relativeUrl = "www.blah.com";
-        bannerSubject.onUserClick();
-
-        boolean consumeUrlLoading = bannerWebViewClient.shouldOverrideUrlLoading(null, relativeUrl);
-
-        Intent startedIntent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(startedIntent).isNotNull();
-        assertThat(consumeUrlLoading).isTrue();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withRelativeUrl_andNoUserClick_shouldReturnFalse() throws Exception {
-        String relativeUrl = "www.blah.com";
-
-        boolean consumeUrlLoading = bannerWebViewClient.shouldOverrideUrlLoading(null, relativeUrl);
-
-        assertThat(consumeUrlLoading).isFalse();
-    }
-
-    @Test
-    public void destroy_shouldRemoveSelfFromParent_beforeCallingDestroy() throws Exception {
-        ViewGroup parent = mock(ViewGroup.class);
-        ShadowWebView shadow = shadowOf(bannerSubject);
-        shadow.setMyParent(parent);
-
-        bannerSubject.destroy();
-
-        verify(parent).removeView(eq(bannerSubject));
-        assertThat(shadow.wasDestroyCalled()).isTrue();
-    }
-
-    private MraidViewableProperty captureAndVerifyViewablePropertyChangeEventFired(MraidView mraidView) {
-        ArgumentCaptor<MraidViewableProperty> mraidViewablePropertyCaptor = ArgumentCaptor.forClass(MraidViewableProperty.class);
-        verify(mraidView).fireChangeEventForProperty(mraidViewablePropertyCaptor.capture());
-        return mraidViewablePropertyCaptor.getValue();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoDownloadTaskTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoDownloadTaskTest.java
index aa9f1786..dd69502f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoDownloadTaskTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoDownloadTaskTest.java
@@ -55,11 +55,6 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
         subject = new VastVideoDownloadTask(mVastVideoDownloadTaskListener);
     }
 
-    @After
-    public void tearDown() throws Exception {
-        CacheService.clearAndNullCaches();
-    }
-
     @Test
     public void execute_shouldAddToCacheAndSignalDownloadSuccess() throws Exception {
         subject.execute(videoUrl);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
index ba4a9454..a63cec8f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
@@ -5,7 +5,6 @@
 import android.content.Intent;
 import android.net.Uri;
 
-import com.mopub.common.CacheService;
 import com.mopub.common.CacheServiceTest;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
@@ -85,7 +84,6 @@ public void setUp() throws Exception {
     @After
     public void tearDown() throws Exception {
         reset(vastVideoDownloadTask);
-        CacheService.clearAndNullCaches();
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
index 0b414074..4133c52f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
@@ -15,6 +15,7 @@
 import android.webkit.WebView;
 import android.widget.ImageView;
 import android.widget.VideoView;
+
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Dips;
@@ -22,6 +23,7 @@
 import com.mopub.mobileads.test.support.GestureUtils;
 import com.mopub.mobileads.util.vast.VastCompanionAd;
 import com.mopub.mobileads.util.vast.VastVideoConfiguration;
+
 import org.apache.http.HttpRequest;
 import org.apache.maven.artifact.ant.shaded.ReflectionUtils;
 import org.junit.After;
@@ -37,10 +39,10 @@
 import org.robolectric.tester.org.apache.http.RequestMatcher;
 import org.robolectric.tester.org.apache.http.TestHttpResponse;
 
-import java.io.*;
-import java.util.*;
+import java.io.File;
+import java.util.ArrayList;
+import java.util.Arrays;
 
-import static android.media.MediaPlayer.OnPreparedListener;
 import static android.view.ViewGroup.LayoutParams.MATCH_PARENT;
 import static com.mopub.common.MoPubBrowser.DESTINATION_URL_KEY;
 import static com.mopub.common.util.test.support.CommonUtils.assertHttpRequestsMade;
@@ -197,7 +199,8 @@ public void constructor_shouldAddThatchedBackgroundWithGradientToLayout() throws
         initializeSubject();
         ViewGroup viewGroup = subject.getLayout();
         LayerDrawable layerDrawable = (LayerDrawable) viewGroup.getBackground();
-        assertThat(layerDrawable.getDrawable(0)).isEqualTo(Drawables.THATCHED_BACKGROUND.decodeImage(context));
+        assertThat(layerDrawable.getDrawable(0)).isEqualTo(Drawables.THATCHED_BACKGROUND.createDrawable(
+                context));
         assertThat(layerDrawable.getDrawable(1)).isEqualTo(
                 new GradientDrawable(
                         GradientDrawable.Orientation.TOP_BOTTOM,
@@ -345,7 +348,6 @@ public void onActivityResult_withIncorrectResultCode_shouldNotCallFinish() throw
         verify(baseVideoViewControllerListener, never()).onFinish();
     }
 
-
     @Test
     public void onTouch_withTouchUp_whenVideoLessThan16Seconds_andClickBeforeEnd_shouldDoNothing() throws Exception {
         stub(mediaPlayer.getDuration()).toReturn(15999);
@@ -496,10 +498,7 @@ public void onPrepared_whenDurationIsLessThanMaxVideoDurationForCloseButton_shou
         stub(mediaPlayer.getDuration()).toReturn(1000);
         setMediaPlayer(mediaPlayer);
 
-        // this callback is typically called when the media filed is loaded and ready to play
-        // invoke this manually since we are using a mock url and don't want to wait
-        final OnPreparedListener onPreparedListener = getShadowVideoView().getOnPreparedListener();
-        onPreparedListener.onPrepared(null);
+        getShadowVideoView().getOnPreparedListener().onPrepared(null);
 
         assertThat(subject.getShowCloseButtonDelay()).isEqualTo(1000);
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
index 7fa291fc..8385743f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
@@ -4,6 +4,7 @@
 import android.content.Context;
 import android.content.res.Configuration;
 import android.location.Location;
+import android.location.LocationManager;
 import android.net.ConnectivityManager;
 import android.net.NetworkInfo;
 import android.net.Uri;
@@ -17,20 +18,22 @@
 import com.mopub.common.GpsHelper;
 import com.mopub.common.GpsHelperTest;
 import com.mopub.common.MoPub;
-import com.mopub.common.SharedPreferencesHelper;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Reflection.MethodBuilder;
 import com.mopub.common.util.Utils;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
 import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
+import com.mopub.mraid.MraidNativeCommandHandler;
 
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mockito;
+import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowConnectivityManager;
+import org.robolectric.shadows.ShadowLocationManager;
 import org.robolectric.shadows.ShadowNetworkInfo;
 
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
@@ -45,7 +48,6 @@
 import static android.telephony.TelephonyManager.NETWORK_TYPE_UNKNOWN;
 import static com.mopub.common.AdUrlGenerator.TwitterAppInstalledStatus;
 import static com.mopub.common.ClientMetadata.MoPubNetworkType;
-import static com.mopub.common.util.Strings.isEmpty;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.doReturn;
@@ -71,7 +73,8 @@
     public void setup() {
         context = new Activity();
         shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
-        subject = new WebViewAdUrlGenerator(context);
+        subject = new WebViewAdUrlGenerator(context,
+                new MraidNativeCommandHandler().isStorePictureSupported(context));
         Settings.Secure.putString(application.getContentResolver(), Settings.Secure.ANDROID_ID, TEST_UDID);
         expectedUdid = "sha%3A" + Utils.sha1(TEST_UDID);
         configuration = application.getResources().getConfiguration();
@@ -340,11 +343,8 @@ public void generateAdUrl_whenGooglePlayServicesIsLinkedAndAdInfoIsCached_should
         when(methodBuilder.execute()).thenReturn(GpsHelper.GOOGLE_PLAY_SUCCESS_CODE);
 
         GpsHelperTest.TestAdInfo adInfo = new GpsHelperTest.TestAdInfo();
-        SharedPreferencesHelper.getSharedPreferences(context)
-                .edit()
-                .putString(GpsHelper.ADVERTISING_ID_KEY, adInfo.ADVERTISING_ID)
-                .putBoolean(GpsHelper.IS_LIMIT_AD_TRACKING_ENABLED_KEY, adInfo.LIMIT_AD_TRACKING_ENABLED)
-                .commit();
+        final ClientMetadata clientMetadata = ClientMetadata.getInstance(context);
+        clientMetadata.setAdvertisingInfo(adInfo.mAdId, adInfo.mLimitAdTrackingEnabled);
 
         expectedUdid = "ifa%3A" + adInfo.ADVERTISING_ID;
         String expectedAdUrl = new AdUrlBuilder(expectedUdid)
@@ -353,29 +353,127 @@ public void generateAdUrl_whenGooglePlayServicesIsLinkedAndAdInfoIsCached_should
         assertThat(generateMinimumUrlString()).isEqualTo(expectedAdUrl);
     }
 
+    @Test
+    public void generateAdUrl_whenLocationServiceGpsProviderHasMostRecentLocation_shouldUseLocationServiceValue() {
+        Location locationFromDeveloper = new Location("");
+        locationFromDeveloper.setLatitude(42);
+        locationFromDeveloper.setLongitude(-42);
+        locationFromDeveloper.setAccuracy(3.5f);
+        locationFromDeveloper.setTime(1000);
+
+        // Mock out the LocationManager's last known location to be more recent than the
+        // developer-supplied location.
+        ShadowLocationManager shadowLocationManager = Robolectric.shadowOf(
+                (LocationManager) application.getSystemService(Context.LOCATION_SERVICE));
+        Location locationFromSdk = new Location("");
+        locationFromSdk.setLatitude(37);
+        locationFromSdk.setLongitude(-122);
+        locationFromSdk.setAccuracy(5.0f);
+        locationFromSdk.setTime(2000);
+        shadowLocationManager.setLastKnownLocation(LocationManager.GPS_PROVIDER, locationFromSdk);
+
+        String adUrl = subject.withLocation(locationFromDeveloper)
+                .generateUrlString("ads.mopub.com");
+        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isEqualTo("37.0,-122.0");
+        assertThat(getParameterFromRequestUrl(adUrl, "lla")).isEqualTo("5");
+        assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEqualTo("1");
+    }
+
+    @Test
+    public void generateAdUrl_whenDeveloperSuppliesMoreRecentLocationThanLocationService_shouldUseDeveloperSuppliedLocation() {
+        Location locationFromDeveloper = new Location("");
+        locationFromDeveloper.setLatitude(42);
+        locationFromDeveloper.setLongitude(-42);
+        locationFromDeveloper.setAccuracy(3.5f);
+        locationFromDeveloper.setTime(1000);
+
+        ShadowLocationManager shadowLocationManager = Robolectric.shadowOf(
+                (LocationManager) application.getSystemService(Context.LOCATION_SERVICE));
+
+        // Mock out the LocationManager's last known location to be older than the
+        // developer-supplied location.
+        Location olderLocation = new Location("");
+        olderLocation.setLatitude(40);
+        olderLocation.setLongitude(-105);
+        olderLocation.setAccuracy(8.0f);
+        olderLocation.setTime(500);
+        shadowLocationManager.setLastKnownLocation(LocationManager.GPS_PROVIDER, olderLocation);
+
+        String adUrl = subject.withLocation(locationFromDeveloper)
+                .generateUrlString("ads.mopub.com");
+        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isEqualTo("42.0,-42.0");
+        assertThat(getParameterFromRequestUrl(adUrl, "lla")).isEqualTo("3");
+        assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEmpty();
+    }
+
+    @Test
+    public void generateAdUrl_whenLocationServiceNetworkProviderHasMostRecentLocation_shouldUseLocationServiceValue() {
+        Location locationFromDeveloper = new Location("");
+        locationFromDeveloper.setLatitude(42);
+        locationFromDeveloper.setLongitude(-42);
+        locationFromDeveloper.setAccuracy(3.5f);
+        locationFromDeveloper.setTime(1000);
+
+        // Mock out the LocationManager's last known location to be more recent than the
+        // developer-supplied location.
+        ShadowLocationManager shadowLocationManager = Robolectric.shadowOf(
+                (LocationManager) application.getSystemService(Context.LOCATION_SERVICE));
+        Location locationFromSdk = new Location("");
+        locationFromSdk.setLatitude(38);
+        locationFromSdk.setLongitude(-123);
+        locationFromSdk.setAccuracy(5.0f);
+        locationFromSdk.setTime(2000);
+        shadowLocationManager.setLastKnownLocation(LocationManager.NETWORK_PROVIDER,
+                locationFromSdk);
+
+        String adUrl = subject.withLocation(locationFromDeveloper)
+                .generateUrlString("ads.mopub.com");
+        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isEqualTo("38.0,-123.0");
+        assertThat(getParameterFromRequestUrl(adUrl, "lla")).isEqualTo("5");
+        assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEqualTo("1");
+    }
+
     @Test
     public void enableLocationTracking_shouldIncludeLocationInUrl() {
         MoPub.setLocationAwareness(MoPub.LocationAwareness.NORMAL);
         String adUrl = generateMinimumUrlString();
-        assertThat(getLocationFromRequestUrl(adUrl)).isNotNull();
+        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isNotNull();
     }
 
     @Test
     public void disableLocationCollection_shouldNotIncludeLocationInUrl() {
         MoPub.setLocationAwareness(MoPub.LocationAwareness.DISABLED);
         String adUrl = generateMinimumUrlString();
-        assertThat(getLocationFromRequestUrl(adUrl)).isNullOrEmpty();
+        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isNullOrEmpty();
+    }
+
+    @Test
+    public void disableLocationCollection_whenLocationServiceHasMostRecentLocation_shouldNotIncludeLocationInUrl() {
+        MoPub.setLocationAwareness(MoPub.LocationAwareness.DISABLED);
+
+        // Mock out the LocationManager's last known location.
+        ShadowLocationManager shadowLocationManager = Robolectric.shadowOf(
+                (LocationManager) application.getSystemService(Context.LOCATION_SERVICE));
+        Location locationFromSdk = new Location("");
+        locationFromSdk.setLatitude(37);
+        locationFromSdk.setLongitude(-122);
+        locationFromSdk.setAccuracy(5.0f);
+        locationFromSdk.setTime(2000);
+        shadowLocationManager.setLastKnownLocation(LocationManager.GPS_PROVIDER, locationFromSdk);
+
+        String adUrl = generateMinimumUrlString();
+        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isNullOrEmpty();
     }
 
-    private String getLocationFromRequestUrl(String requestString) {
+    private String getParameterFromRequestUrl(String requestString, String key) {
         Uri requestUri = Uri.parse(requestString);
-        String location = requestUri.getQueryParameter("ll");
+        String parameter = requestUri.getQueryParameter(key);
 
-        if (TextUtils.isEmpty(location)) {
+        if (TextUtils.isEmpty(parameter)) {
             return "";
         }
 
-        return location;
+        return parameter;
     }
 
     private NetworkInfo createNetworkInfo(int type) {
@@ -418,7 +516,7 @@ public String build() {
                     "&udid=" + expectedUdid +
                     paramIfNotEmpty("dnt", dnt) +
                     paramIfNotEmpty("q", query) +
-                    (isEmpty(latLon) ? "" : "&ll=" + latLon + "&lla=" + locationAccuracy) +
+                    (TextUtils.isEmpty(latLon) ? "" : "&ll=" + latLon + "&lla=" + locationAccuracy) +
                     "&z=-0700" +
                     "&o=u" +
                     "&sc_a=1.0" +
@@ -493,7 +591,7 @@ public AdUrlBuilder withDnt(boolean dnt) {
         }
 
         private String paramIfNotEmpty(String key, String value) {
-            if (isEmpty(value)) {
+            if (TextUtils.isEmpty(value)) {
                 return "";
             } else {
                 return "&" + key + "=" + value;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMraidControllerFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMraidControllerFactory.java
new file mode 100644
index 00000000..81787c01
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMraidControllerFactory.java
@@ -0,0 +1,28 @@
+package com.mopub.mobileads.test.support;
+
+import android.content.Context;
+
+import com.mopub.mobileads.AdConfiguration;
+import com.mopub.mobileads.factories.MraidControllerFactory;
+import com.mopub.mraid.MraidController;
+import com.mopub.mraid.PlacementType;
+
+import static org.mockito.Mockito.mock;
+
+public class TestMraidControllerFactory extends MraidControllerFactory {
+    private MraidController mockMraidController = mock(MraidController.class);
+
+    public static MraidController getSingletonMock() {
+        return getTestFactory().mockMraidController;
+    }
+
+    private static TestMraidControllerFactory getTestFactory() {
+        return ((TestMraidControllerFactory) MraidControllerFactory.instance);
+    }
+
+    @Override
+    protected MraidController internalCreate(final Context context,
+            final AdConfiguration adConfiguration, final PlacementType placementType) {
+        return mockMraidController;
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMraidViewFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMraidViewFactory.java
deleted file mode 100644
index 005ac90d..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMraidViewFactory.java
+++ /dev/null
@@ -1,31 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import android.content.Context;
-
-import com.mopub.mobileads.AdConfiguration;
-import com.mopub.mobileads.MraidView;
-import com.mopub.mobileads.factories.MraidViewFactory;
-
-import static org.mockito.Mockito.mock;
-
-public class TestMraidViewFactory extends MraidViewFactory {
-    private final MraidView mockMraidView = mock(MraidView.class);
-
-    public static MraidView getSingletonMock() {
-        return getTestFactory().mockMraidView;
-    }
-
-    private static TestMraidViewFactory getTestFactory() {
-        return (TestMraidViewFactory) instance;
-    }
-
-    @Override
-    protected MraidView internalCreate(Context context, AdConfiguration adConfiguration) {
-        return mockMraidView;
-    }
-
-    @Override
-    protected MraidView internalCreate(Context context, AdConfiguration adConfiguration, MraidView.ExpansionStyle expansionStyle, MraidView.NativeCloseButtonStyle buttonStyle, MraidView.PlacementType placementType) {
-        return mockMraidView;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/InterstitialsTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/InterstitialsTest.java
deleted file mode 100644
index 56f21194..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/InterstitialsTest.java
+++ /dev/null
@@ -1,76 +0,0 @@
-package com.mopub.mobileads.util;
-
-import android.app.Activity;
-import android.graphics.Color;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.Button;
-import android.widget.LinearLayout;
-import android.widget.RelativeLayout;
-
-import com.mopub.common.util.Dips;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import static com.mopub.mobileads.util.Interstitials.addCloseEventRegion;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(RobolectricTestRunner.class)
-public class InterstitialsTest {
-
-    private Activity context;
-    private RelativeLayout.LayoutParams defaultLayoutParams;
-
-    @Before
-    public void setup() {
-        context = new Activity();
-        defaultLayoutParams = new RelativeLayout.LayoutParams(50, 50);
-    }
-
-    @Test
-    public void addCloseEventRegion_withNullViewGroup_shouldReturnFalse() throws Exception {
-        boolean result = addCloseEventRegion(null, defaultLayoutParams, null);
-
-        assertThat(result).isFalse();
-    }
-
-    @Test
-    public void addCloseEventRegion_withViewGroupButNoContext_shouldReturnFalse() throws Exception {
-        ViewGroup viewGroup = mock(ViewGroup.class);
-        when(viewGroup.getContext()).thenReturn(null);
-
-        boolean result = addCloseEventRegion(viewGroup, defaultLayoutParams, null);
-
-        assertThat(result).isFalse();
-    }
-
-    @Test
-    public void addCloseEventRegion_shouldAddTransparentButVisibleButton() throws Exception {
-        final LinearLayout linearLayout = new LinearLayout(context);
-
-        addCloseEventRegion(linearLayout, defaultLayoutParams, null);
-
-        final Button closeEventRegion = (Button) linearLayout.getChildAt(0);
-        assertThat(closeEventRegion.getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(shadowOf(closeEventRegion).getBackgroundColor()).isEqualTo(Color.TRANSPARENT);
-        assertThat(Dips.pixelsToIntDips((float) closeEventRegion.getLayoutParams().width, context)).isEqualTo(50);
-        assertThat(Dips.pixelsToIntDips((float)closeEventRegion.getLayoutParams().height, context)).isEqualTo(50);
-    }
-
-    @Test
-    public void addCloseEventRegion_shouldUsePassedInClickListener() throws Exception {
-        final LinearLayout linearLayout = new LinearLayout(context);
-        final View.OnClickListener onClickListener = mock(View.OnClickListener.class);
-
-        addCloseEventRegion(linearLayout, defaultLayoutParams, onClickListener);
-
-        final Button closeEventRegion = (Button) linearLayout.getChildAt(0);
-        assertThat(shadowOf(closeEventRegion).getOnClickListener()).isEqualTo(onClickListener);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/MraidsTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/MraidsTest.java
deleted file mode 100644
index 6e24109d..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/MraidsTest.java
+++ /dev/null
@@ -1,186 +0,0 @@
-package com.mopub.mobileads.util;
-
-import android.Manifest;
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.PackageManager;
-import android.content.pm.ResolveInfo;
-import android.os.Build;
-import android.os.Build.VERSION_CODES;
-import android.os.Environment;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.hamcrest.BaseMatcher;
-import org.hamcrest.Description;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowEnvironment;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static com.mopub.common.util.VersionCode.HONEYCOMB_MR2;
-import static com.mopub.common.util.VersionCode.ICE_CREAM_SANDWICH;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.argThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
-
-@RunWith(SdkTestRunner.class)
-public class MraidsTest {
-    Context context;
-
-    @Before
-    public void setup() {
-        context = new Activity();
-    }
-
-    @Test
-    public void isTelAvailable_whenCanAcceptIntent_shouldReturnTrue() throws Exception {
-        context = createMockContextWithSpecificIntentData("tel", null, null, "android.intent.action.DIAL");
-
-        assertThat(Mraids.isTelAvailable(context)).isTrue();
-    }
-
-    @Test
-    public void isTelAvailable_whenCanNotAcceptIntent_shouldReturnFalse() throws Exception {
-        context = createMockContextWithSpecificIntentData("", null, null, "android.intent.action.DIAL");
-
-        assertThat(Mraids.isTelAvailable(context)).isFalse();
-    }
-
-    @Test
-    public void isSmsAvailable_whenCanAcceptIntent_shouldReturnTrue() throws Exception {
-        context = createMockContextWithSpecificIntentData("sms", null, null, "android.intent.action.VIEW");
-
-        assertThat(Mraids.isSmsAvailable(context)).isTrue();
-    }
-
-    @Test
-    public void isSmsAvailable_whenCanNotAcceptIntent_shouldReturnFalse() throws Exception {
-        context = createMockContextWithSpecificIntentData("", null, null, "android.intent.action.VIEW");
-
-        assertThat(Mraids.isSmsAvailable(context)).isFalse();
-    }
-
-    @Test
-    public void isStorePictureAvailable_whenPermissionDeclaredAndMediaMounted_shouldReturnTrue() throws Exception {
-        Robolectric.getShadowApplication().grantPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE);
-        ShadowEnvironment.setExternalStorageState(Environment.MEDIA_MOUNTED);
-
-        assertThat(Mraids.isStorePictureSupported(context)).isTrue();
-    }
-
-    @Test
-    public void isStorePictureAvailable_whenPermissionDenied_shouldReturnFalse() throws Exception {
-        Robolectric.getShadowApplication().denyPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE);
-        ShadowEnvironment.setExternalStorageState(Environment.MEDIA_MOUNTED);
-
-        assertThat(Mraids.isStorePictureSupported(context)).isFalse();
-    }
-
-    @Test
-    public void isStorePictureAvailable_whenMediaUnmounted_shouldReturnFalse() throws Exception {
-        Robolectric.getShadowApplication().grantPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE);
-        ShadowEnvironment.setExternalStorageState(Environment.MEDIA_UNMOUNTED);
-
-        assertThat(Mraids.isStorePictureSupported(context)).isFalse();
-    }
-
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
-    @Test
-    public void isCalendarAvailable_atLeastIcs_shouldReturnTrue() throws Exception {
-        context = createMockContextWithSpecificIntentData(null, null, Mraids.ANDROID_CALENDAR_CONTENT_TYPE, "android.intent.action.INSERT");
-        assertThat(Mraids.isCalendarAvailable(context)).isTrue();
-    }
-
-    @Config(reportSdk = VERSION_CODES.HONEYCOMB_MR2)
-    @Test
-    public void isCalendarAvailable_beforeIcs_shouldReturnFalse() throws Exception {
-        context = createMockContextWithSpecificIntentData(null, null, Mraids.ANDROID_CALENDAR_CONTENT_TYPE, "android.intent.action.INSERT");
-        assertThat(Mraids.isCalendarAvailable(context)).isFalse();
-    }
-
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
-    @Test
-    public void isCalendarAvailable_atLeastIcs_butCanNotAcceptIntent_shouldReturnFalse() throws
-            Exception {
-        context = createMockContextWithSpecificIntentData(null, null, "vnd.android.cursor.item/NOPE", "android.intent.action.INSERT");
-        assertThat(Mraids.isCalendarAvailable(context)).isFalse();
-    }
-
-    @Test
-    public void isInlineVideoAvailable_whenCanAcceptMraidVideoPlayerActivityIntent_shouldReturnTrue() throws Exception {
-        context = createMockContextWithSpecificIntentData(null, "com.mopub.mobileads.MraidVideoPlayerActivity", null, null);
-
-        assertThat(Mraids.isInlineVideoAvailable(context)).isTrue();
-    }
-
-    @Test
-    public void isInlineVideoAvailable_whenCanNotAcceptMraidVideoPlayerActivityIntent_shouldReturnFalse() throws Exception {
-        context = createMockContextWithSpecificIntentData(null, "com.mopub.mobileads.DO_NOT_ACCEPT", null, null);
-
-        assertThat(Mraids.isInlineVideoAvailable(context)).isFalse();
-    }
-
-    public static Context createMockContextWithSpecificIntentData(final String scheme, final String componentName, final String type, final String action) {
-        Context context = mock(Context.class);
-        PackageManager packageManager = mock(PackageManager.class);
-
-        List<ResolveInfo> resolveInfos = new ArrayList<ResolveInfo>();
-        resolveInfos.add(new ResolveInfo());
-
-        stub(context.getPackageManager()).toReturn(packageManager);
-
-        BaseMatcher intentWithSpecificData = new BaseMatcher() {
-            // check that the specific intent has the special data, i.e. "tel:", or a component name, or string type, based on a particular data
-
-            @Override
-            public boolean matches(Object item) {
-                if (item != null && item instanceof Intent ){
-                    boolean result = action != null || type != null || componentName != null || scheme != null;
-                    if (action != null) {
-                        if (((Intent) item).getAction() != null) {
-                            result = result && action.equals(((Intent) item).getAction());
-                        }
-                    }
-
-                    if (type != null) {
-                        if (((Intent) item).getType() != null) {
-                            result = result && type.equals(((Intent) item).getType());
-                        }
-                    }
-
-                    if (componentName != null) {
-                        if (((Intent) item).getComponent() != null) {
-                            result = result && componentName.equals(((Intent) item).getComponent().getClassName());
-                        }
-                    }
-
-                    if (scheme != null) {
-                        if (((Intent) item).getData() != null) {
-                            result = result && scheme.equals(((Intent) item).getData().getScheme());
-                        }
-                    }
-                    return result;
-                }
-                return false;
-            }
-
-            @Override
-            public void describeTo(Description description) {
-
-            }
-        };
-
-        // It is okay to query with specific intent or nothing, because by default, none of the query would normally any resolveInfo anyways
-        stub(packageManager.queryIntentActivities((Intent) argThat(intentWithSpecificData), eq(0))).toReturn(resolveInfos);
-        return context;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastManagerTest.java
index 4e1faf55..44a25723 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/util/vast/VastManagerTest.java
@@ -62,12 +62,6 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
         }).when(vastManagerListener).onVastVideoConfigurationPrepared(any(VastVideoConfiguration.class));
     }
 
-    @After
-    public void tearDown() {
-        Robolectric.getFakeHttpLayer().clearPendingHttpResponses();
-        CacheService.clearAndNullCaches();
-    }
-
     private void prepareVastVideoConfiguration() {
         subject.prepareVastVideoConfiguration(TEST_VAST_XML_STRING, vastManagerListener);
 
@@ -220,7 +214,6 @@ public void prepareVastVideoConfiguration_withVideoInDiskCache_shouldNotDownload
 
     @Test
     public void prepareVastVideoConfiguration_withUninitializedDiskCache_shouldReturnNull() throws Exception {
-        CacheService.clearAndNullCaches();
         mFakeHttpLayer.addPendingHttpResponse(200, TEST_NESTED_VAST_XML_STRING);
 
         prepareVastVideoConfiguration();
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java
new file mode 100644
index 00000000..702e58f1
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java
@@ -0,0 +1,130 @@
+package com.mopub.mraid;
+
+import android.app.Activity;
+import android.content.Context;
+import android.view.View;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.AdConfiguration;
+import com.mopub.mobileads.test.support.TestMraidControllerFactory;
+import com.mopub.mraid.MraidController.MraidListener;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Mock;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
+import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
+import static com.mopub.mobileads.MoPubErrorCode.MRAID_LOAD_ERROR;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+public class MraidBannerTest {
+    private static final String INPUT_HTML_DATA = "%3Chtml%3E%3C%2Fhtml%3E";
+
+    MraidController mockMraidController;
+    @Mock AdConfiguration mockAdConfiguration;
+    @Mock CustomEventBannerListener mockBannerListener;
+
+    private Context context;
+    private Map<String, Object> localExtras;
+    private Map<String, String> serverExtras;
+
+    private MraidBanner subject;
+
+    @Before
+    public void setUp() {
+        subject = new MraidBanner();
+        mockMraidController = TestMraidControllerFactory.getSingletonMock();
+
+        context = new Activity();
+        localExtras = new HashMap<String, Object>();
+        localExtras.put(AD_CONFIGURATION_KEY, mockAdConfiguration);
+
+        serverExtras = new HashMap<String, String>();
+        serverExtras.put(HTML_RESPONSE_BODY_KEY, INPUT_HTML_DATA);
+    }
+
+    @Test
+    public void loadBanner_whenExtrasAreMalformed_shouldNotifyBannerListenerFailureAndReturn() {
+        serverExtras.remove(HTML_RESPONSE_BODY_KEY);
+
+        subject.loadBanner(context, mockBannerListener, localExtras, serverExtras);
+
+        verify(mockBannerListener).onBannerFailed(eq(MRAID_LOAD_ERROR));
+    }
+
+    @Test
+    public void loadBanner_whenAdConfigurationMissing_shouldNotifyBannerListenerFailureAndReturn() {
+        localExtras.remove(AD_CONFIGURATION_KEY);
+
+        subject.loadBanner(context, mockBannerListener, localExtras, serverExtras);
+
+        verify(mockBannerListener).onBannerFailed(eq(MRAID_LOAD_ERROR));
+    }
+
+    @Test
+    public void invalidate_shouldDestroyMraidController() {
+        subject.loadBanner(context, mockBannerListener, localExtras, serverExtras);
+        subject.onInvalidate();
+
+        verify(mockMraidController).destroy();
+    }
+
+    @Test
+    public void bannerMraidListener_onReady_shouldNotifyBannerLoaded() {
+        MraidListener mraidListener = captureMraidListener();
+        mraidListener.onLoaded(null);
+
+        verify(mockBannerListener).onBannerLoaded(any(View.class));
+    }
+
+    @Test
+    public void bannerMraidListener_onFailure_shouldNotifyBannerFailed() {
+        MraidListener mraidListener = captureMraidListener();
+        mraidListener.onFailedToLoad();
+
+        verify(mockBannerListener).onBannerFailed(eq(MRAID_LOAD_ERROR));
+    }
+
+    @Test
+    public void bannerMraidListener_onExpand_shouldNotifyBannerExpandedAndClicked() {
+        MraidListener mraidListener = captureMraidListener();
+        mraidListener.onExpand();
+
+        verify(mockBannerListener).onBannerExpanded();
+        verify(mockBannerListener).onBannerClicked();
+    }
+
+    @Test
+    public void bannerMraidListener_onOpen_shouldNotifyBannerClicked() {
+        MraidListener mraidListener = captureMraidListener();
+        mraidListener.onOpen();
+
+        verify(mockBannerListener).onBannerClicked();
+    }
+
+    @Test
+    public void bannerMraidListener_onClose_shouldNotifyBannerCollapsed() {
+        MraidListener mraidListener = captureMraidListener();
+        mraidListener.onClose();
+
+        verify(mockBannerListener).onBannerCollapsed();
+    }
+
+    private MraidListener captureMraidListener() {
+        subject.loadBanner(context, mockBannerListener, localExtras, serverExtras);
+        ArgumentCaptor<MraidListener> listenerCaptor = ArgumentCaptor.forClass(MraidListener.class);
+        verify(mockMraidController).setMraidListener(listenerCaptor.capture());
+
+        return listenerCaptor.getValue();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java
new file mode 100644
index 00000000..d90b6e33
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java
@@ -0,0 +1,274 @@
+package com.mopub.mraid;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.webkit.WebViewClient;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.AdConfiguration;
+import com.mopub.mraid.MraidBridge.MraidBridgeListener;
+import com.mopub.mraid.MraidBridge.MraidWebView;
+import com.mopub.mraid.MraidNativeCommandHandler.MraidCommandFailureListener;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Answers;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Captor;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+
+import java.net.URI;
+import java.util.HashMap;
+import java.util.Map;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyMapOf;
+import static org.mockito.Matchers.anyString;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Matchers.startsWith;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+public class MraidBridgeTest {
+    @Mock AdConfiguration mockAdConfiguration;
+    @Mock MraidNativeCommandHandler mockNativeCommandHandler;
+    @Mock MraidBridgeListener mockBridgeListener;
+    @Mock(answer = Answers.RETURNS_DEEP_STUBS) MraidWebView mockBannerWebView;
+    @Mock(answer = Answers.RETURNS_DEEP_STUBS) MraidWebView mockInterstitialWebView;
+    @Captor ArgumentCaptor<WebViewClient> bannerWebViewClientCaptor;
+
+    private Activity activity;
+    private MraidBridge subjectBanner;
+    private MraidBridge subjectInterstitial;
+
+    @Before
+    public void setUp() {
+        activity = Robolectric.buildActivity(Activity.class).create().get();
+
+        subjectBanner = new MraidBridge(
+                mockAdConfiguration, PlacementType.INLINE, mockNativeCommandHandler);
+        subjectBanner.setMraidBridgeListener(mockBridgeListener);
+        subjectBanner.attachView(mockBannerWebView);
+
+        subjectInterstitial = new MraidBridge(
+                mockAdConfiguration, PlacementType.INTERSTITIAL, mockNativeCommandHandler);
+        subjectInterstitial.setMraidBridgeListener(mockBridgeListener);
+        subjectInterstitial.attachView(mockInterstitialWebView);
+
+        verify(mockBannerWebView).setWebViewClient(bannerWebViewClientCaptor.capture());
+        reset(mockBannerWebView);
+    }
+
+    @Test
+    public void attachView_thenDetach_shouldSetMRaidWebView_thenShouldClear() {
+        assertThat(subjectBanner.getMraidWebView()).isEqualTo(mockBannerWebView);
+
+        subjectBanner.detach();
+        assertThat(subjectBanner.getMraidWebView()).isNull();
+    }
+
+    @Test
+    public void attachView_thenOnPageFinished_shouldFireReady() {
+        bannerWebViewClientCaptor.getValue().onPageFinished(mockBannerWebView, "fake://url");
+
+        verify(mockBridgeListener).onPageLoaded();
+    }
+
+    @Test
+    public void attachView_thenOnPageFinished_twice_shouldNotFireReadySecondTime() {
+        bannerWebViewClientCaptor.getValue().onPageFinished(mockBannerWebView, "fake://url");
+        bannerWebViewClientCaptor.getValue().onPageFinished(mockBannerWebView, "fake://url2");
+
+        verify(mockBridgeListener, times(1)).onPageLoaded();
+    }
+
+    @Test
+    public void attachView_thenSetContentHtml_shouldCallLoadDataWithBaseURL() {
+        subjectBanner.setContentHtml("test-html");
+
+        verify(mockBannerWebView).loadDataWithBaseURL(
+                null, "test-html", "text/html", "UTF-8", null);
+    }
+
+    @Test
+    public void handleShouldOverrideUrl_invalidUrl_shouldFireErrorEvent() {
+        boolean result = subjectBanner.handleShouldOverrideUrl("bad bad bad");
+
+        verify(mockBannerWebView).loadUrl(startsWith(
+                "javascript:window.mraidbridge.notifyErrorEvent"));
+        assertThat(result).isTrue();
+    }
+
+    @Test
+    public void handleShouldOverrideUrl_mopubUrl_shouldNeverLoadUrl_shouldReturnTrue() {
+        boolean result = subjectBanner.handleShouldOverrideUrl("mopub://special-mopub-command");
+
+        verify(mockBannerWebView, never()).loadUrl(anyString());
+        assertThat(result).isTrue();
+    }
+
+    @Test
+    public void handleShouldOverrideUrl_mraidUrl_invalid_shouldFireErrorEvent_shouldReturnTrue() {
+        boolean result = subjectBanner.handleShouldOverrideUrl("mraid://bad-command");
+
+        verify(mockBannerWebView).loadUrl(startsWith(
+                "javascript:window.mraidbridge.notifyErrorEvent"));
+        assertThat(result).isTrue();
+    }
+
+    @Test
+    public void handleShouldOverrideUrl_smsUrl_notClicked_shouldReturnFalse() {
+        boolean result = subjectBanner.handleShouldOverrideUrl("sms://123456789");
+
+        assertThat(result).isFalse();
+    }
+
+    @Test
+    public void handleShouldOverrideUrl_smsUrl_clicked_shouldStartActivity() {
+        subjectBanner.setClicked(true);
+        reset(mockBannerWebView);
+        when(mockBannerWebView.getContext()).thenReturn(activity);
+
+        boolean result = subjectBanner.handleShouldOverrideUrl("sms://123456789");
+
+        Intent startedIntent = Robolectric.getShadowApplication().getNextStartedActivity();
+        assertThat(startedIntent).isNotNull();
+        assertThat(startedIntent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
+        assertThat(startedIntent.getComponent()).isNull();
+        assertThat(result).isTrue();
+    }
+
+    @Test
+    public void handleShouldOverrideUrl_normalUrl_shouldReturnFalse() {
+        boolean result = subjectBanner.handleShouldOverrideUrl("http://www.mopub.com");
+
+        assertThat(result).isFalse();
+    }
+
+    @Test(expected = MraidCommandException.class)
+    public void runCommand_requiresClick_notClicked_shouldThrowException()
+            throws MraidCommandException {
+        subjectBanner = new MraidBridge(mockAdConfiguration, PlacementType.INLINE);
+        subjectBanner.attachView(mockBannerWebView);
+        subjectBanner.setClicked(false);
+        Map<String, String> params = new HashMap<String, String>();
+        params.put("uri", "http://valid-url");
+
+        subjectBanner.runCommand(MraidJavascriptCommand.PLAY_VIDEO, params);
+    }
+
+    public void runCommand_requiresClick_clicked_shouldNotThrowException()
+            throws MraidCommandException {
+        subjectBanner.setClicked(true);
+        Map<String, String> params = new HashMap<String, String>();
+        params.put("uri", "http://valid-url");
+
+        subjectBanner.runCommand(MraidJavascriptCommand.PLAY_VIDEO, params);
+    }
+
+    @Test(expected = MraidCommandException.class)
+    public void runCommand_interstitial_requiresClick_notClicked_shouldThrowException()
+            throws MraidCommandException {
+        subjectInterstitial.setClicked(false);
+        Map<String, String> params = new HashMap<String, String>();
+        params.put("uri", "http://valid-url");
+
+        subjectInterstitial.runCommand(MraidJavascriptCommand.OPEN, params);
+    }
+
+    @Test
+    public void runCommand_interstitial_requiresClick_clicked_shouldNotThrowException()
+            throws MraidCommandException {
+        subjectInterstitial.setClicked(true);
+        Map<String, String> params = new HashMap<String, String>();
+        params.put("url", "http://valid-url");
+
+        subjectInterstitial.runCommand(MraidJavascriptCommand.OPEN, params);
+    }
+
+    @Test
+    public void runCommand_close_shouldCallListener()
+            throws MraidCommandException {
+        Map<String, String> params = new HashMap<String, String>();
+
+        subjectBanner.runCommand(MraidJavascriptCommand.CLOSE, params);
+
+        verify(mockBridgeListener).onClose();
+    }
+
+    @Test
+    public void runCommand_expand_shouldCallListener()
+            throws MraidCommandException {
+        subjectBanner.setClicked(true);
+        Map<String, String> params = new HashMap<String, String>();
+        params.put("shouldUseCustomClose", "true");
+
+        subjectBanner.runCommand(MraidJavascriptCommand.EXPAND, params);
+
+        verify(mockBridgeListener).onExpand(null, true);
+    }
+
+    @Test
+    public void runCommand_expand_withUrl_shouldCallListener()
+            throws MraidCommandException {
+        subjectBanner.setClicked(true);
+        Map<String, String> params = new HashMap<String, String>();
+        params.put("url", "http://valid-url");
+        params.put("shouldUseCustomClose", "true");
+
+        subjectBanner.runCommand(MraidJavascriptCommand.EXPAND, params);
+
+        ArgumentCaptor<URI> uriCaptor = ArgumentCaptor.forClass(URI.class);
+        verify(mockBridgeListener).onExpand(
+                uriCaptor.capture(), eq(true));
+        assertThat(uriCaptor.getValue().toString()).isEqualTo("http://valid-url");
+    }
+
+    @Test
+    public void runCommand_playVideo_shouldCallListener()
+            throws MraidCommandException {
+        subjectBanner.setClicked(true);
+        Map<String, String> params = new HashMap<String, String>();
+        params.put("uri", "http://valid-url");
+
+        subjectBanner.runCommand(MraidJavascriptCommand.PLAY_VIDEO, params);
+
+        ArgumentCaptor<URI> uriCaptor = ArgumentCaptor.forClass(URI.class);
+        verify(mockBridgeListener).onPlayVideo(uriCaptor.capture());
+        assertThat(uriCaptor.getValue().toString()).isEqualTo("http://valid-url");
+    }
+
+    @Test
+    public void runCommand_storePicture_shouldCallListener()
+            throws MraidCommandException {
+        subjectBanner.setClicked(true);
+        Map<String, String> params = new HashMap<String, String>();
+        params.put("uri", "http://valid-url");
+
+        subjectBanner.runCommand(MraidJavascriptCommand.STORE_PICTURE, params);
+
+        verify(mockNativeCommandHandler).storePicture(any(Context.class), eq("http://valid-url"),
+                any(MraidCommandFailureListener.class));
+    }
+
+    @Test
+    public void runCommand_createCalendarEvent_shouldCallListener()
+            throws MraidCommandException {
+        subjectBanner.setClicked(true);
+        Map<String, String> params = new HashMap<String, String>();
+        params.put("eventName", "Dinner at my house");
+
+        subjectBanner.runCommand(MraidJavascriptCommand.CREATE_CALENDAR_EVENT, params);
+
+        verify(mockNativeCommandHandler).createCalendarEvent(any(Context.class),
+                anyMapOf(String.class, String.class));
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
new file mode 100644
index 00000000..a55b1221
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
@@ -0,0 +1,997 @@
+package com.mopub.mraid;
+
+import android.app.Activity;
+import android.content.ComponentName;
+import android.content.Intent;
+import android.content.pm.ActivityInfo;
+import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
+import android.net.Uri;
+import android.os.Build;
+import android.view.View;
+import android.widget.FrameLayout;
+
+import com.mopub.common.CloseableLayout.ClosePosition;
+import com.mopub.common.MoPubBrowser;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.AdConfiguration;
+import com.mopub.mobileads.BaseVideoPlayerActivitiyTest;
+import com.mopub.mobileads.MraidVideoPlayerActivity;
+import com.mopub.mraid.MraidBridge.MraidBridgeListener;
+import com.mopub.mraid.MraidBridge.MraidWebView;
+import com.mopub.mraid.MraidController.MraidListener;
+import com.mopub.mraid.MraidController.OrientationBroadcastReceiver;
+import com.mopub.mraid.MraidController.ScreenMetricsWaiter;
+import com.mopub.mraid.MraidController.ScreenMetricsWaiter.WaitRequest;
+import com.mopub.mraid.MraidController.UseCustomCloseListener;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Captor;
+import org.mockito.Mock;
+import org.mockito.Mockito;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import java.net.URI;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.fest.assertions.api.Assertions.fail;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyBoolean;
+import static org.mockito.Matchers.anyInt;
+import static org.mockito.Mockito.doAnswer;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+import static org.mockito.Mockito.withSettings;
+
+@RunWith(SdkTestRunner.class)
+public class MraidControllerTest {
+    private AdConfiguration mockAdConfiguration;
+    @Mock private MraidBridge mockBridge;
+    @Mock private MraidBridge mockTwoPartBridge;
+    @Mock private ScreenMetricsWaiter mockScreenMetricsWaiter;
+    @Mock private WaitRequest mockWaitRequest;
+    @Mock private MraidListener mockMraidListener;
+    @Mock private UseCustomCloseListener mockUseCustomCloseListener;
+    @Mock private OrientationBroadcastReceiver mockOrientationBroadcastReceiver;
+    @Captor private ArgumentCaptor<MraidBridgeListener> bridgeListenerCaptor;
+
+    private Activity activity;
+    private FrameLayout rootView;
+
+    private MraidController subject;
+
+    @Before
+    public void setUp() {
+        Robolectric.setDisplayMetricsDensity(1.0f);
+
+        // Needs to be serializable because we put this into an Intent
+        mockAdConfiguration = mock(AdConfiguration.class, withSettings().serializable());
+
+        activity = spy(Robolectric.buildActivity(Activity.class).create().get());
+        activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+
+        rootView = new FrameLayout(activity);
+        when(mockBridge.isVisible()).thenReturn(true);
+
+        // By default, immediately fulfill a screen metrics wait request. Individual tests can
+        // reset this, if desired.
+        when(mockScreenMetricsWaiter.waitFor(Mockito.<View>anyVararg()))
+                .thenReturn(mockWaitRequest);
+        doAnswer(new Answer<Void>() {
+            @Override
+            public Void answer(final InvocationOnMock invocation) throws Throwable {
+                Runnable runnable = (Runnable) invocation.getArguments()[0];
+                runnable.run();
+                return null;
+            }
+        }).when(mockWaitRequest).start(any(Runnable.class));
+
+        subject = new MraidController(
+                activity, mockAdConfiguration, PlacementType.INLINE,
+                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
+        subject.setMraidListener(mockMraidListener);
+        subject.setOrientationBroadcastReceiver(mockOrientationBroadcastReceiver);
+        subject.setRootView(rootView);
+        subject.loadContent("fake_html_data");
+
+        verify(mockBridge).setMraidBridgeListener(bridgeListenerCaptor.capture());
+    }
+
+    @Test
+    public void constructor_shouldSetStateToLoading() {
+        ViewState state = subject.getViewState();
+
+        assertThat(state).isEqualTo(ViewState.LOADING);
+    }
+
+    @Test
+    public void bridgeOnReady_shouldSetStateToDefault_shouldCallListener() {
+        bridgeListenerCaptor.getValue().onPageLoaded();
+
+        ViewState state = subject.getViewState();
+
+        assertThat(state).isEqualTo(ViewState.DEFAULT);
+        verify(mockMraidListener).onLoaded(any(View.class));
+    }
+
+    @Test
+    public void handlePageLoad_shouldNotifyBridgeOfVisibilityPlacementScreenSizeAndSupports() {
+        when(mockBridge.isVisible()).thenReturn(true);
+
+        subject.handlePageLoad();
+
+        verify(mockBridge).notifyViewability(true);
+        verify(mockBridge).notifyPlacementType(PlacementType.INLINE);
+        verify(mockBridge).notifyScreenMetrics(any(MraidScreenMetrics.class));
+
+        // The actual values here are supplied by the Mraids class, which has separate tests.
+        verify(mockBridge).notifySupports(false, false, false, false, false);
+    }
+
+    @Test
+    public void handlePageLoad_shouldCancelLastRequest() {
+        subject.handlePageLoad();
+
+        verify(mockScreenMetricsWaiter).cancelLastRequest();
+    }
+
+    @Test
+    public void handlePageLoad_thenDestroy_shouldCancelLastRequest() {
+        subject.handlePageLoad();
+        subject.destroy();
+
+        verify(mockScreenMetricsWaiter, times(2)).cancelLastRequest();
+    }
+
+    @Test
+    public void bridgeOnVisibilityChanged_withTwoPartBridgeAttached_shouldNotNotifyVisibility() {
+        when(mockTwoPartBridge.isAttached()).thenReturn(true);
+
+        bridgeListenerCaptor.getValue().onVisibilityChanged(true);
+        bridgeListenerCaptor.getValue().onVisibilityChanged(false);
+
+        verify(mockBridge, never()).notifyViewability(anyBoolean());
+        verify(mockTwoPartBridge, never()).notifyViewability(anyBoolean());
+    }
+
+    @Test
+    public void handleResize_shouldBeIgnoredWhenLoadingOrHidden() throws MraidCommandException {
+        subject.setViewStateForTesting(ViewState.LOADING);
+        subject.handleResize(100, 200, 0, 0, ClosePosition.TOP_RIGHT, true);
+        assertThat(subject.getViewState()).isEqualTo(ViewState.LOADING);
+
+        subject.setViewStateForTesting(ViewState.HIDDEN);
+        subject.handleResize(100, 200, 0, 0, ClosePosition.TOP_RIGHT, true);
+        assertThat(subject.getViewState()).isEqualTo(ViewState.HIDDEN);
+    }
+
+    @Test(expected = MraidCommandException.class)
+    public void handleResize_shouldThrowExceptionWhenExpanded() throws MraidCommandException {
+        subject.setViewStateForTesting(ViewState.EXPANDED);
+        subject.handleResize(100, 200, 0, 0, ClosePosition.TOP_RIGHT, true);
+    }
+
+    @Test(expected = MraidCommandException.class)
+    public void handleResize_shouldThrowExceptionForInterstitial() throws MraidCommandException {
+        MraidListener listener = mock(MraidListener.class);
+        subject = new MraidController(activity, mockAdConfiguration, PlacementType.INTERSTITIAL,
+                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
+        subject.setMraidListener(listener);
+        subject.setRootView(rootView);
+
+        // Move to DEFAULT state
+        subject.loadContent("fake_html_data");
+        subject.handlePageLoad();
+
+        subject.handleResize(100, 200, 0, 0, ClosePosition.TOP_RIGHT, true);
+    }
+
+    @Test
+    public void handleResize_shouldMoveWebViewToResizedContainer_shouldSetResizedState()
+            throws MraidCommandException {
+        // Move to DEFAULT state
+        subject.handlePageLoad();
+        subject.setRootViewSize(100, 100);
+
+        subject.handleResize(100, 100, 0, 0, ClosePosition.TOP_RIGHT, true);
+        assertThat(subject.getExpandedAdContainer().getChildCount()).isEqualTo(2);
+        assertThat(subject.getAdContainer().getChildCount()).isEqualTo(0);
+        assertThat(subject.getViewState()).isEqualTo(ViewState.RESIZED);
+    }
+
+    @Test
+    public void handleResize_noAllowOffscreen_smallView_shouldResize()
+            throws MraidCommandException {
+        // Move to DEFAULT state
+        subject.handlePageLoad();
+        subject.setRootViewSize(100, 100);
+
+        subject.handleResize(50, 50, 0, 0, ClosePosition.TOP_RIGHT, /* allowOffscreen */ false);
+        assertThat(subject.getViewState()).isEqualTo(ViewState.RESIZED);
+    }
+
+    @Test(expected = MraidCommandException.class)
+    public void handleResize_noAllowOffscreen_largeView_shouldThrowException()
+            throws MraidCommandException {
+        // Move to DEFAULT state
+        subject.handlePageLoad();
+        subject.setRootViewSize(100, 100);
+
+        subject.handleResize(101, 101, 0, 0, ClosePosition.TOP_RIGHT, /* allowOffscreen */ false);
+    }
+
+    @Test(expected = MraidCommandException.class)
+    public void handleResize_allowOffscreen_largeView_closeButtonTopRight_shouldThrowException()
+            throws MraidCommandException {
+        // Move to DEFAULT state
+        subject.handlePageLoad();
+        subject.setRootViewSize(100, 100);
+
+        subject.handleResize(150, 150, 0, 0, ClosePosition.TOP_RIGHT, /* allowOffscreen */ true);
+    }
+
+    @Test
+    public void handleResize_allowOffscreen_closeButtonTopLeft_shouldNotThrowException()
+            throws MraidCommandException {
+        // Move to DEFAULT state
+        subject.handlePageLoad();
+        subject.setRootViewSize(100, 100);
+
+        subject.handleResize(150, 150, 0, 0, ClosePosition.TOP_LEFT, /* allowOffscreen */ true);
+        assertThat(subject.getViewState()).isEqualTo(ViewState.RESIZED);
+    }
+
+    @Test(expected = MraidCommandException.class)
+    public void handleResize_allowOffscreen_largeOffset_closeButtonBottomRight_shouldThrowException()
+            throws MraidCommandException {
+        // Move to DEFAULT state
+        subject.handlePageLoad();
+        subject.setRootViewSize(100, 1000);
+
+        // Throws an exception because the close button overlaps the edge
+        subject.handleResize(100, 100, 25, 25, ClosePosition.BOTTOM_RIGHT, /* allowOffscreen */
+                true);
+    }
+
+    @Test
+    public void handleResize_allowOffscreen_largeOffset_closeButtonBottomLeft_shouldNotThrowException()
+            throws MraidCommandException {
+        // Move to DEFAULT state
+        subject.handlePageLoad();
+        subject.setRootViewSize(100, 1000);
+
+        subject.handleResize(100, 100, 25, 25, ClosePosition.BOTTOM_LEFT, /* allowOffscreen */ true);
+        assertThat(subject.getViewState()).isEqualTo(ViewState.RESIZED);
+    }
+
+    @Test(expected = MraidCommandException.class)
+    public void handleResize_heightSmallerThan50Dips_shouldFail() throws MraidCommandException {
+        subject.handlePageLoad();
+        subject.setRootViewSize(100, 100);
+        subject.handleResize(100, 49, 25, 25, ClosePosition.BOTTOM_LEFT, /* allowOffscreen */ false);
+    }
+
+    @Test(expected = MraidCommandException.class)
+    public void handleResize_widthSmallerThan50Dips_shouldFail() throws MraidCommandException {
+        subject.handlePageLoad();
+        subject.setRootViewSize(100, 100);
+        subject.handleResize(49, 100, 25, 25, ClosePosition.BOTTOM_LEFT, /* allowOffscreen */ false);
+    }
+
+    @Test
+    public void handleClose_fromResizedState_shouldMoveWebViewToOriginalContainer_shouldNotFireOnClose()
+            throws MraidCommandException {
+        // Move to RESIZED state
+        subject.handlePageLoad();
+        subject.setRootViewSize(100, 100);
+        subject.handleResize(100, 100, 0, 0, ClosePosition.TOP_RIGHT, false);
+
+        subject.handleClose();
+
+        assertThat(subject.getExpandedAdContainer().getChildCount()).isEqualTo(1);
+        assertThat(subject.getAdContainer().getChildCount()).isEqualTo(1);
+        assertThat(subject.getViewState()).isEqualTo(ViewState.DEFAULT);
+        verify(mockMraidListener, never()).onClose();
+    }
+
+    @Test(expected = MraidCommandException.class)
+    public void handleExpand_afterDestroy_shouldThrowException() throws MraidCommandException {
+        subject.destroy();
+        subject.handleExpand(null, false);
+    }
+
+    @Test
+    public void handleExpand_shouldBeIgnoredForInterstitial() throws MraidCommandException {
+        MraidListener listener = mock(MraidListener.class);
+        subject = new MraidController(activity, mockAdConfiguration, PlacementType.INTERSTITIAL,
+                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
+        subject.setMraidListener(listener);
+        subject.setRootView(rootView);
+
+        // Move to DEFAULT state
+        subject.loadContent("fake_html_data");
+        subject.handlePageLoad();
+
+        subject.handleExpand(null, false);
+
+        assertThat(subject.getViewState()).isEqualTo(ViewState.DEFAULT);
+        verify(listener, never()).onExpand();
+    }
+
+    @Test
+    public void handleExpand_shouldBeIgnoredWhenLoadingHiddenOrExpanded()
+            throws MraidCommandException {
+        subject.setViewStateForTesting(ViewState.LOADING);
+        subject.handleExpand(null, false);
+        assertThat(subject.getViewState()).isEqualTo(ViewState.LOADING);
+        verify(mockMraidListener, never()).onExpand();
+
+        subject.setViewStateForTesting(ViewState.HIDDEN);
+        subject.handleExpand(null, false);
+        assertThat(subject.getViewState()).isEqualTo(ViewState.HIDDEN);
+        verify(mockMraidListener, never()).onExpand();
+
+        subject.setViewStateForTesting(ViewState.EXPANDED);
+        subject.handleExpand(null, false);
+        assertThat(subject.getViewState()).isEqualTo(ViewState.EXPANDED);
+        verify(mockMraidListener, never()).onExpand();
+    }
+
+    @Test
+    public void handleExpand_withNoUrl_shouldMoveWebViewToExpandedContainer_shouldCallOnExpand()
+            throws MraidCommandException {
+        // Move to DEFAULT state
+        subject.handlePageLoad();
+
+        subject.handleExpand(null, false);
+
+        assertThat(subject.getExpandedAdContainer().getChildCount()).isEqualTo(2);
+        assertThat(subject.getAdContainer().getChildCount()).isEqualTo(0);
+        verify(mockMraidListener).onExpand();
+    }
+
+    @Test
+    public void handleExpand_withTwoPartUrl_shouldAttachTwoPartBridge_shouldCallOnExpand()
+            throws MraidCommandException {
+        // Move to DEFAULT state
+        subject.handlePageLoad();
+
+        subject.handleExpand(URI.create("http://two-part-url"), false);
+
+        verify(mockTwoPartBridge).setMraidBridgeListener(any(MraidBridgeListener.class));
+        verify(mockTwoPartBridge).attachView(any(MraidWebView.class));
+        verify(mockTwoPartBridge).setContentUrl(URI.create("http://two-part-url").toString());
+
+        assertThat(subject.getExpandedAdContainer().getChildCount()).isEqualTo(2);
+        assertThat(subject.getAdContainer().getChildCount()).isEqualTo(1);
+        verify(mockMraidListener).onExpand();
+        assertThat(subject.getViewState()).isEqualTo(ViewState.EXPANDED);
+    }
+
+    @Test
+    public void handleClose_afterDestroy_shouldNotFireOnClose() {
+        subject.destroy();
+        subject.handleClose();
+
+        verify(mockMraidListener, never()).onClose();
+    }
+
+    @Test
+    public void handleClose_fromExpandedState_shouldMoveWebViewToOriginalContainer_shouldNotFireOnClose() throws MraidCommandException {
+        // Move to EXPANDED state
+        subject.handlePageLoad();
+        subject.handleExpand(null, false);
+
+        subject.handleClose();
+
+        assertThat(subject.getExpandedAdContainer().getChildCount()).isEqualTo(1);
+        assertThat(subject.getAdContainer().getChildCount()).isEqualTo(1);
+        assertThat(subject.getViewState()).isEqualTo(ViewState.DEFAULT);
+        verify(mockMraidListener, never()).onClose();
+    }
+
+    @Test
+    public void handleClose_fromTwoPartExpandedState_shouldDetachTwoPartBridge_shouldMoveWebViewToOriginalContainer_shouldNotFireOnClose()
+            throws MraidCommandException {
+        URI uri = URI.create("http://two-part-url");
+
+        // Move to two part EXPANDED state
+        subject.handlePageLoad();
+        subject.handleExpand(uri, false);
+        when(mockTwoPartBridge.isAttached()).thenReturn(true);
+
+        subject.handleClose();
+
+        verify(mockTwoPartBridge).detach();
+        assertThat(subject.getExpandedAdContainer().getChildCount()).isEqualTo(1);
+        assertThat(subject.getAdContainer().getChildCount()).isEqualTo(1);
+        assertThat(subject.getViewState()).isEqualTo(ViewState.DEFAULT);
+
+        verify(mockMraidListener, never()).onClose();
+    }
+
+    @Test
+    public void handleClose_fromDefaultState_shouldHideAdContainer_shouldCallOnClose() {
+        // Move to DEFAULT state
+        subject.handlePageLoad();
+        assertThat(subject.getViewState()).isEqualTo(ViewState.DEFAULT);
+
+        subject.handleClose();
+
+        assertThat(subject.getAdContainer().getVisibility()).isEqualTo(View.INVISIBLE);
+        assertThat(subject.getViewState()).isEqualTo(ViewState.HIDDEN);
+
+        verify(mockMraidListener).onClose();
+    }
+
+    @Test
+    public void handleShowVideo_shouldStartVideoPlayerActivity() {
+        subject.handleShowVideo("http://video");
+        BaseVideoPlayerActivitiyTest.assertMraidVideoPlayerActivityStarted(
+                MraidVideoPlayerActivity.class, "http://video", mockAdConfiguration);
+    }
+
+    @Test
+    public void handleCustomClose_shouldUpdateExpandedContainer() {
+        subject.handleCustomClose(true);
+        assertThat(subject.getExpandedAdContainer().isCloseVisible()).isFalse();
+
+        subject.handleCustomClose(false);
+        assertThat(subject.getExpandedAdContainer().isCloseVisible()).isTrue();
+    }
+
+    @Test
+    public void handleCustomClose_shouldCallCustomCloseChangedListener() {
+        subject.setUseCustomCloseListener(mockUseCustomCloseListener);
+
+        subject.handleCustomClose(true);
+        verify(mockUseCustomCloseListener).useCustomCloseChanged(true);
+
+        reset(mockUseCustomCloseListener);
+        subject.handleCustomClose(false);
+        verify(mockUseCustomCloseListener).useCustomCloseChanged(false);
+    }
+
+    @Test
+    public void handleOpen_withApplicationUrl_shouldStartNewIntent() {
+        String applicationUrl = "amzn://blah";
+        Robolectric.packageManager.addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW, Uri
+                .parse(applicationUrl)), new ResolveInfo());
+
+        subject.handleOpen(applicationUrl);
+
+        Intent startedIntent = Robolectric.getShadowApplication().getNextStartedActivity();
+        assertThat(startedIntent).isNotNull();
+        assertThat(startedIntent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
+        assertThat(startedIntent.getComponent()).isNull();
+
+        verify(mockMraidListener).onOpen();
+    }
+
+    @Test
+    public void handleOpen_withHttpApplicationUrl_shouldStartMoPubBrowser() {
+        String applicationUrl = "http://blah";
+
+        subject.handleOpen(applicationUrl);
+
+        Intent startedIntent = Robolectric.getShadowApplication().getNextStartedActivity();
+        assertThat(startedIntent).isNotNull();
+        assertThat(startedIntent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
+        assertThat(startedIntent.getComponent().getClassName())
+                .isEqualTo("com.mopub.common.MoPubBrowser");
+
+        verify(mockMraidListener).onOpen();
+    }
+
+    @Test
+    public void handleOpen_withApplicationUrlThatCantBeHandled_shouldDefaultToMoPubBrowser()
+            throws Exception {
+        String applicationUrl = "canthandleme://blah";
+
+        subject.handleOpen(applicationUrl);
+
+        Intent startedIntent = Robolectric.getShadowApplication().getNextStartedActivity();
+        assertThat(startedIntent).isNotNull();
+        assertThat(startedIntent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
+        assertThat(startedIntent.getComponent().getClassName())
+                .isEqualTo("com.mopub.common.MoPubBrowser");
+        assertThat(startedIntent.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY))
+                .isEqualTo(applicationUrl);
+
+        verify(mockMraidListener).onOpen();
+    }
+
+    @Test
+    public void orientationBroadcastReceiver_whenUnregistered_shouldIgnoreOnReceive() {
+        Intent intent = mock(Intent.class);
+        when(intent.getAction()).thenReturn("some bogus action which we hope never to see");
+
+        MraidController.OrientationBroadcastReceiver receiver =
+                subject.new OrientationBroadcastReceiver();
+        receiver.register(activity);
+        receiver.unregister();
+        receiver.onReceive(activity, intent);
+
+        verify(intent, never()).getAction();
+    }
+
+    @Test
+    public void orientationProperties_shouldDefaultToAllowChangeTrueAndForceOrientationNone() {
+        // These are the default values provided by the MRAID spec
+        assertThat(subject.getAllowOrientationChange()).isTrue();
+        assertThat(subject.getForceOrientation()).isEqualTo(MraidOrientation.NONE);
+    }
+
+    @Test
+    public void handleSetOrientationProperties_withForcedOrientation_shouldUpdateProperties() throws MraidCommandException, PackageManager.NameNotFoundException {
+        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
+                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
+
+        subject.handleSetOrientationProperties(false, MraidOrientation.LANDSCAPE);
+
+        assertThat(subject.getAllowOrientationChange()).isFalse();
+        assertThat(subject.getForceOrientation()).isEqualTo(MraidOrientation.LANDSCAPE);
+    }
+    
+    @Test
+    public void handleSetOrientationProperties_withOrientationNone_withApplicationContext_shouldUpdateProperties() throws MraidCommandException, PackageManager.NameNotFoundException {
+        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
+                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
+
+        subject = new MraidController(
+                activity.getApplicationContext(), mockAdConfiguration, PlacementType.INLINE,
+                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
+
+        subject.handleSetOrientationProperties(false, MraidOrientation.NONE);
+
+        assertThat(subject.getAllowOrientationChange()).isFalse();
+        assertThat(subject.getForceOrientation()).isEqualTo(MraidOrientation.NONE);
+    }
+    
+    @Test
+    public void handleSetOrientationProperties_withForcedOrientation_withApplicationContext_shouldThrowMraidCommandExceptionAndNotUpdateProperties() throws PackageManager.NameNotFoundException {
+        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
+                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
+
+        subject = new MraidController(
+                activity.getApplicationContext(), mockAdConfiguration, PlacementType.INLINE,
+                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
+
+        try {
+            subject.handleSetOrientationProperties(false, MraidOrientation.LANDSCAPE);
+            fail("Expected MraidCommandException");
+        } catch (MraidCommandException e) {
+            // pass
+        }
+
+        assertThat(subject.getAllowOrientationChange()).isTrue();
+        assertThat(subject.getForceOrientation()).isEqualTo(MraidOrientation.NONE);
+    }
+
+    @Test
+    public void handleSetOrientationProperties_withActivityInfoNotFound_shouldThrowMraidCommandException() throws PackageManager.NameNotFoundException {
+        setMockActivityInfo(false, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
+                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
+
+        try {
+            subject.handleSetOrientationProperties(false, MraidOrientation.LANDSCAPE);
+            fail("Expected MraidCommandException");
+        } catch (MraidCommandException e) {
+            // pass
+        }
+
+        assertThat(subject.getAllowOrientationChange()).isTrue();
+        assertThat(subject.getForceOrientation()).isEqualTo(MraidOrientation.NONE);
+    }
+
+    @Test
+    public void handleSetOrientationProperties_whenTryingToSetToOrientationDeclaredInManifest_shouldUpdateProperties() throws Exception {
+        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_PORTRAIT,
+                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
+
+        subject.handleSetOrientationProperties(true, MraidOrientation.PORTRAIT);
+
+        assertThat(subject.getAllowOrientationChange()).isTrue();
+        assertThat(subject.getForceOrientation()).isEqualTo(MraidOrientation.PORTRAIT);
+    }
+
+    @Test
+    public void handleSetOrientationProperties_whenTryingToSetToOrientationDifferentFromManifest_shouldThrowMraidCommandException() throws Exception {
+        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_PORTRAIT,
+                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
+
+        try {
+            subject.handleSetOrientationProperties(true, MraidOrientation.LANDSCAPE);
+            fail("Expected MraidCommandException");
+        } catch (MraidCommandException e) {
+            // pass
+        }
+
+        assertThat(subject.getAllowOrientationChange()).isTrue();
+        assertThat(subject.getForceOrientation()).isEqualTo(MraidOrientation.NONE);
+    }
+
+    @Test
+    public void handleSetOrientationProperties_withForcedOrientation_withMissingConfigChangeOrientation_shouldThrowMraidCommandException() throws Exception {
+        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
+                /* missing CONFIG_ORIENTATION */ ActivityInfo.CONFIG_SCREEN_SIZE);
+
+        try {
+            subject.handleSetOrientationProperties(true, MraidOrientation.PORTRAIT);
+            fail("Expected MraidCommandException");
+        } catch (MraidCommandException e) {
+            // pass
+        }
+
+        assertThat(subject.getAllowOrientationChange()).isTrue();
+        assertThat(subject.getForceOrientation()).isEqualTo(MraidOrientation.NONE);
+    }
+
+    @Config(reportSdk = Build.VERSION_CODES.HONEYCOMB_MR1)
+    @Test
+    public void handleSetOrientationProperties_beforeHoneycombMr2_withMissingConfigChangeScreenSize_shouldUpdateProperties() throws Exception {
+        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED, ActivityInfo.CONFIG_ORIENTATION);
+
+        subject.handleSetOrientationProperties(false, MraidOrientation.LANDSCAPE);
+
+        assertThat(subject.getAllowOrientationChange()).isFalse();
+        assertThat(subject.getForceOrientation()).isEqualTo(MraidOrientation.LANDSCAPE);
+    }
+
+    @Config(reportSdk = Build.VERSION_CODES.HONEYCOMB_MR2)
+    @Test
+    public void handleSetOrientationProperties_atLeastHoneycombMr2_withMissingConfigChangeScreenSize_shouldThrowMraidCommandException() throws Exception {
+        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED, ActivityInfo.CONFIG_ORIENTATION);
+
+        try {
+            subject.handleSetOrientationProperties(false, MraidOrientation.LANDSCAPE);
+            fail("Expected MraidCommandException");
+        } catch (MraidCommandException e) {
+            // pass
+        }
+
+        assertThat(subject.getAllowOrientationChange()).isTrue();
+        assertThat(subject.getForceOrientation()).isEqualTo(MraidOrientation.NONE);
+    }
+
+    @Test
+    public void handleSetOrientationProperties_forExpandedBanner_shouldImmediatelyChangeScreenOrientation() throws MraidCommandException, PackageManager.NameNotFoundException {
+        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
+                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
+
+        subject.handlePageLoad();
+        subject.handleExpand(null, false);
+
+        subject.handleSetOrientationProperties(true, MraidOrientation.LANDSCAPE);
+
+        assertThat(activity.getRequestedOrientation()).isEqualTo(ActivityInfo
+                .SCREEN_ORIENTATION_LANDSCAPE);
+    }
+
+    @Test
+    public void handleSetOrientationProperties_forExpandedBanner_beforeExpandIsCalled_shouldChangeScreenOrientationUponExpand() throws MraidCommandException, PackageManager.NameNotFoundException {
+        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
+                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
+
+        subject.handlePageLoad();
+        subject.handleSetOrientationProperties(true, MraidOrientation.LANDSCAPE);
+
+        assertThat(activity.getRequestedOrientation()).isEqualTo(ActivityInfo
+                .SCREEN_ORIENTATION_PORTRAIT);
+
+        subject.handleExpand(null, false);
+
+        assertThat(activity.getRequestedOrientation()).isEqualTo(ActivityInfo
+                .SCREEN_ORIENTATION_LANDSCAPE);
+    }
+
+    @Test
+    public void handleSetOrientationProperties_forDefaultBanner_shouldNotChangeScreenOrientation() throws MraidCommandException, PackageManager.NameNotFoundException {
+        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
+                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
+
+        subject.handlePageLoad();
+        // don't expand the banner
+
+        subject.handleSetOrientationProperties(true, MraidOrientation.LANDSCAPE);
+
+        assertThat(activity.getRequestedOrientation()).isEqualTo(ActivityInfo
+                .SCREEN_ORIENTATION_PORTRAIT);
+    }
+
+    @Test
+    public void handleSetOrientationProperties_forInterstitial_shouldChangeScreenOrientation() throws MraidCommandException, PackageManager.NameNotFoundException {
+        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
+                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
+
+        subject = new MraidController(
+                activity, mockAdConfiguration, PlacementType.INTERSTITIAL,
+                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
+
+        assertThat(activity.getRequestedOrientation()).isEqualTo(ActivityInfo
+                .SCREEN_ORIENTATION_PORTRAIT);
+
+        subject.handlePageLoad();
+        subject.handleSetOrientationProperties(true, MraidOrientation.LANDSCAPE);
+
+        assertThat(activity.getRequestedOrientation()).isEqualTo(ActivityInfo
+                .SCREEN_ORIENTATION_LANDSCAPE);
+    }
+
+    @Test
+    public void shouldAllowForceOrientation_withNoneOrientation_shouldReturnTrue() throws PackageManager.NameNotFoundException {
+        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
+                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
+
+        final boolean result = subject.shouldAllowForceOrientation(MraidOrientation.NONE);
+
+        assertThat(result).isTrue();
+    }
+
+    @Test
+    public void shouldAllowForceOrientation_withApplicationContext_shouldReturnFalse() throws PackageManager.NameNotFoundException {
+        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
+                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
+
+        subject = new MraidController(
+                activity.getApplicationContext(), mockAdConfiguration, PlacementType.INLINE,
+                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
+
+        final boolean result = subject.shouldAllowForceOrientation(MraidOrientation.PORTRAIT);
+
+        assertThat(result).isFalse();
+    }
+
+    @Test(expected = MraidCommandException.class)
+    public void lockOrientation_withApplicationContext_shouldThrowMraidCommandException() throws MraidCommandException, PackageManager.NameNotFoundException {
+        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
+                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
+
+        subject = new MraidController(
+                activity.getApplicationContext(), mockAdConfiguration, PlacementType.INLINE,
+                mockBridge, mockTwoPartBridge, mockScreenMetricsWaiter);
+
+        subject.lockOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
+    }
+
+    @Test
+    public void lockOrientation_withActivityContext_shouldInitializeOriginalActivityOrientationAndCallActivitySetOrientation() throws MraidCommandException, PackageManager.NameNotFoundException {
+        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
+                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
+
+        assertThat(subject.getOriginalActivityOrientation()).isNull();
+        assertThat(activity.getRequestedOrientation())
+                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+
+        subject.lockOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+
+        assertThat(subject.getOriginalActivityOrientation())
+                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+        assertThat(activity.getRequestedOrientation())
+                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+    }
+
+    @Test
+    public void lockOrientation_subsequentTimes_shouldNotModifyOriginalActivityOrientation() throws MraidCommandException, PackageManager.NameNotFoundException {
+        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
+                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
+
+        subject.lockOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+
+        assertThat(subject.getOriginalActivityOrientation())
+                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+
+        subject.lockOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
+
+        assertThat(subject.getOriginalActivityOrientation())
+                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+    }
+    
+    @Test
+    public void applyOrientation_withLockedOrientation_withForceOrientationNone_withAllowOrientationChangeTrue_shouldResetOrientation() throws MraidCommandException, PackageManager.NameNotFoundException {
+        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
+                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
+
+        assertThat(activity.getRequestedOrientation())
+                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+
+        subject.lockOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
+
+        assertThat(activity.getRequestedOrientation())
+                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
+
+        subject.handleSetOrientationProperties(true, MraidOrientation.NONE);
+        subject.applyOrientation();
+
+        assertThat(activity.getRequestedOrientation())
+                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+    }
+
+    @Test
+    public void applyOrientation_withNoLockedOrientation_withForceOrientationNone_withAllowOrientationChangeTrue_shouldDoNothing() throws MraidCommandException, PackageManager.NameNotFoundException {
+        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
+                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
+
+        assertThat(activity.getRequestedOrientation())
+                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+
+        subject.handleSetOrientationProperties(true, MraidOrientation.NONE);
+        subject.applyOrientation();
+
+        assertThat(activity.getRequestedOrientation())
+                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+    }
+
+    @Test
+    public void applyOrientation_withForcedOrientationTrue_shouldSetRequestedOrientationToForcedOrienation() throws MraidCommandException, PackageManager.NameNotFoundException {
+        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
+                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
+
+        subject.handleSetOrientationProperties(true, MraidOrientation.LANDSCAPE);
+        subject.applyOrientation();
+
+        assertThat(activity.getRequestedOrientation())
+                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
+    }
+
+    @Test
+    public void applyOrientation_withForcedOrientationFalse_shouldSetRequestedOrientationToForcedOrienation() throws MraidCommandException, PackageManager.NameNotFoundException {
+        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
+                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
+
+        subject.handleSetOrientationProperties(false, MraidOrientation.LANDSCAPE);
+        subject.applyOrientation();
+
+        assertThat(activity.getRequestedOrientation())
+                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
+    }
+
+    @Test
+    public void unapplyOrientation_withALockedOrientation_shouldReturnToOriginalOrientationAndResetOriginalActivityOrientation() throws MraidCommandException, PackageManager.NameNotFoundException {
+        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
+                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
+
+        assertThat(subject.getOriginalActivityOrientation()).isNull();
+        assertThat(activity.getRequestedOrientation())
+                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+
+        subject.lockOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
+
+        assertThat(subject.getOriginalActivityOrientation())
+                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+        assertThat(activity.getRequestedOrientation())
+                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
+
+        subject.unApplyOrientation();
+
+        assertThat(subject.getOriginalActivityOrientation()).isNull();
+        assertThat(activity.getRequestedOrientation())
+                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+    }
+
+    @Test
+    public void unapplyOrientation_withoutLockedOrientation_shouldNotChangeRequestedOrientation()
+            throws PackageManager.NameNotFoundException {
+        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
+                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
+
+        assertThat(subject.getOriginalActivityOrientation()).isNull();
+        assertThat(activity.getRequestedOrientation())
+                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+
+        subject.unApplyOrientation();
+
+        assertThat(subject.getOriginalActivityOrientation()).isNull();
+        assertThat(activity.getRequestedOrientation())
+                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+    }
+
+    @Test
+    public void destroy_shouldCancelLastMetricsRequest_shouldUnregisterBroadcastReceiver_shouldDetachAllBridges() {
+        subject.destroy();
+
+        verify(mockScreenMetricsWaiter).cancelLastRequest();
+        verify(mockOrientationBroadcastReceiver).unregister();
+        verify(mockBridge).detach();
+        verify(mockTwoPartBridge).detach();
+    }
+
+    @Test
+    public void destroy_withDefaultState_shouldSetMraidWebViewsToNull() {
+        subject.setViewStateForTesting(ViewState.DEFAULT);
+        assertThat(subject.getMraidWebView()).isNotNull();
+        // The two-part WebView is null by default
+        assertThat(subject.getTwoPartWebView()).isNull();
+
+        subject.destroy();
+
+        assertThat(subject.getMraidWebView()).isNull();
+        assertThat(subject.getTwoPartWebView()).isNull();
+    }
+
+    @Test
+    public void destroy_withExpandedState_shouldSetMraidWebViewsToNull()
+            throws MraidCommandException {
+        // Necessary to set up the webview before expanding. Also moves the state to DEFAULT.
+        subject.handlePageLoad();
+        assertThat(subject.getViewState()).isEqualTo(ViewState.DEFAULT);
+        subject.handleExpand(URI.create("http://two-part-url"), false);
+
+        assertThat(subject.getMraidWebView()).isNotNull();
+        assertThat(subject.getTwoPartWebView()).isNotNull();
+
+        subject.destroy();
+
+        assertThat(subject.getMraidWebView()).isNull();
+        assertThat(subject.getTwoPartWebView()).isNull();
+    }
+
+    @Test
+    public void destroy_afterDestroy_shouldNotThrowAnException() {
+        subject.destroy();
+        subject.destroy();
+
+        assertThat(subject.getMraidWebView()).isNull();
+        assertThat(subject.getTwoPartWebView()).isNull();
+    }
+
+    @Test
+    public void destroy_fromExpandedState_shouldRemoveCloseableAdContainerFromContentView()
+            throws MraidCommandException {
+        subject.handlePageLoad();
+        subject.handleExpand(null, false);
+
+        assertThat(rootView.getChildCount()).isEqualTo(1);
+
+        subject.destroy();
+
+        assertThat(rootView.getChildCount()).isEqualTo(0);
+    }
+
+    @Test
+    public void destroy_fromResizedState_shouldRemoveCloseableAdContainerFromContentView()
+            throws MraidCommandException {
+        subject.handlePageLoad();
+        subject.setRootViewSize(100, 100);
+        subject.handleResize(100, 100, 0, 0, ClosePosition.TOP_RIGHT, true);
+
+        assertThat(rootView.getChildCount()).isEqualTo(1);
+
+        subject.destroy();
+
+        assertThat(rootView.getChildCount()).isEqualTo(0);
+    }
+
+    private void setMockActivityInfo(final boolean activityInfoFound, int screenOrientation,
+            int configChanges) throws PackageManager.NameNotFoundException {
+        final ActivityInfo mockActivityInfo = mock(ActivityInfo.class);
+
+        mockActivityInfo.screenOrientation = screenOrientation;
+        mockActivityInfo.configChanges = configChanges;
+
+        final PackageManager mockPackageManager = mock(PackageManager.class);
+        doAnswer(new Answer() {
+            @Override
+            public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
+                if (!activityInfoFound) {
+                    throw new PackageManager.NameNotFoundException("");
+                }
+
+                return mockActivityInfo;
+            }
+        }).when(mockPackageManager).getActivityInfo(any(ComponentName.class), anyInt());
+
+        when(activity.getPackageManager()).thenReturn(mockPackageManager);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java
similarity index 76%
rename from mopub-sdk/src/test/java/com/mopub/mobileads/MraidInterstitialTest.java
rename to mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java
index d6da03a2..eef1015f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java
@@ -1,14 +1,19 @@
-package com.mopub.mobileads;
+package com.mopub.mraid;
 
 import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.AdConfiguration;
+import com.mopub.mobileads.ResponseBodyInterstitialTest;
 
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
 import org.robolectric.shadows.ShadowActivity;
 import org.robolectric.shadows.ShadowLocalBroadcastManager;
 
@@ -21,62 +26,73 @@
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
+import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest
+        .getIntentForActionAndIdentifier;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.stub;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 import static org.mockito.Mockito.withSettings;
 import static org.robolectric.Robolectric.shadowOf_;
 
 @RunWith(SdkTestRunner.class)
 public class MraidInterstitialTest extends ResponseBodyInterstitialTest {
-    private CustomEventInterstitialListener customEventInterstitialListener;
-    private Map<String,Object> localExtras;
-    private Map<String,String> serverExtras;
-    private Context context;
     private static final String INPUT_HTML_DATA = "%3Chtml%3E%3C%2Fhtml%3E";
     private static final String EXPECTED_HTML_DATA = "<html></html>";
     private long broadcastIdentifier;
 
+    @Mock CustomEventInterstitialListener customEventInterstitialListener;
+
+    private Map<String, Object> localExtras;
+    private Map<String, String> serverExtras;
+    private Context context;
+
     @Before
     public void setUp() throws Exception {
-        subject = new MraidInterstitial();
-        context = new Activity();
-        customEventInterstitialListener = mock(CustomEventInterstitialListener.class);
+        AdConfiguration adConfiguration =
+                mock(AdConfiguration.class, withSettings().serializable());
+        broadcastIdentifier = 2222;
+        when(adConfiguration.getBroadcastIdentifier()).thenReturn(broadcastIdentifier);
+
         localExtras = new HashMap<String, Object>();
         serverExtras = new HashMap<String, String>();
         serverExtras.put(HTML_RESPONSE_BODY_KEY, INPUT_HTML_DATA);
-
-        broadcastIdentifier = 2222;
-        final AdConfiguration adConfiguration = mock(AdConfiguration.class, withSettings().serializable());
-        stub(adConfiguration.getBroadcastIdentifier()).toReturn(broadcastIdentifier);
         localExtras.put(AD_CONFIGURATION_KEY, adConfiguration);
+
+        context = Robolectric.buildActivity(Activity.class).create().get();
+
+        subject = new MraidInterstitial();
     }
 
     @Test
-    public void loadInterstitial_withMalformedServerExtras_shouldNotifyInterstitialFailed() throws Exception {
+    public void loadInterstitial_withMalformedServerExtras_shouldNotifyInterstitialFailed()
+            throws Exception {
         serverExtras.remove(HTML_RESPONSE_BODY_KEY);
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
+        subject.loadInterstitial(context, customEventInterstitialListener, localExtras,
+                serverExtras);
 
         verify(customEventInterstitialListener).onInterstitialFailed(NETWORK_INVALID_STATE);
         verify(customEventInterstitialListener, never()).onInterstitialLoaded();
     }
 
+    @Ignore
     @Test
     public void loadInterstitial_shouldNotifyInterstitialLoaded() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
+        subject.loadInterstitial(context, customEventInterstitialListener, localExtras,
+                serverExtras);
 
-//        verify(customEventInterstitialListener).onInterstitialLoaded();
+        verify(customEventInterstitialListener).onInterstitialLoaded();
     }
 
     @Test
     public void loadInterstitial_shouldConnectListenerToBroadcastReceiver() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
+        subject.loadInterstitial(context, customEventInterstitialListener, localExtras,
+                serverExtras);
 
-        Intent intent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, broadcastIdentifier);
+        Intent intent =
+                getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, broadcastIdentifier);
         ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
 
         verify(customEventInterstitialListener).onInterstitialShown();
@@ -94,21 +110,24 @@ public void loadInterstitial_shouldConnectListenerToBroadcastReceiver() throws E
 
     @Test
     public void showInterstitial_shouldStartActivityWithIntent() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
+        subject.loadInterstitial(context, customEventInterstitialListener, localExtras,
+                serverExtras);
         subject.showInterstitial();
 
         ShadowActivity shadowActivity = shadowOf_(context);
         Intent intent = shadowActivity.getNextStartedActivityForResult().intent;
 
         assertThat(intent.getComponent().getPackageName()).isEqualTo("com.mopub.mobileads");
-        assertThat(intent.getComponent().getClassName()).isEqualTo("com.mopub.mobileads.MraidActivity");
+        assertThat(intent.getComponent().getClassName())
+                .isEqualTo("com.mopub.mobileads.MraidActivity");
         assertThat(intent.getExtras().get(HTML_RESPONSE_BODY_KEY)).isEqualTo(EXPECTED_HTML_DATA);
         assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
     }
 
     @Test
     public void onInvalidate_shouldDisconnectListenerToBroadcastReceiver() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
+        subject.loadInterstitial(context, customEventInterstitialListener, localExtras,
+                serverExtras);
         subject.onInvalidate();
 
         Intent intent;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidDisplayControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java
similarity index 52%
rename from mopub-sdk/src/test/java/com/mopub/mobileads/MraidDisplayControllerTest.java
rename to mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java
index 035a693f..533d66b3 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidDisplayControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java
@@ -1,35 +1,35 @@
-package com.mopub.mobileads;
+package com.mopub.mraid;
 
 import android.Manifest;
+import android.annotation.TargetApi;
 import android.app.Activity;
 import android.app.AlertDialog;
 import android.content.Context;
 import android.content.Intent;
-import android.graphics.Color;
-import android.os.Build.VERSION_CODES;
+import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
+import android.os.Build;
 import android.os.Environment;
 import android.provider.CalendarContract;
-import android.view.Gravity;
 import android.view.View;
-import android.view.ViewGroup;
-import android.widget.Button;
-import android.widget.FrameLayout;
-import android.widget.ImageView;
-import android.widget.RelativeLayout;
+import android.view.WindowManager;
+import android.widget.LinearLayout;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.Dips;
 import com.mopub.mobileads.test.support.FileUtils;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
-import com.mopub.mobileads.test.support.TestMraidViewFactory;
 import com.mopub.mobileads.test.support.ThreadUtils;
-import com.mopub.mobileads.util.MraidsTest;
+import com.mopub.mraid.MraidNativeCommandHandler.MraidCommandFailureListener;
+
 import org.apache.http.HttpResponse;
 import org.apache.http.client.methods.HttpUriRequest;
+import org.hamcrest.BaseMatcher;
+import org.hamcrest.Description;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
+import org.mockito.Mock;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
@@ -39,265 +39,65 @@
 import org.robolectric.shadows.ShadowLog;
 import org.robolectric.shadows.ShadowToast;
 
-import java.io.*;
+import java.io.File;
 import java.net.URI;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
 
 import static android.content.DialogInterface.BUTTON_NEGATIVE;
 import static android.content.DialogInterface.BUTTON_POSITIVE;
-import static com.mopub.mobileads.BaseVideoPlayerActivitiyTest.assertMraidVideoPlayerActivityStarted;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.CREATE_CALENDAR_EVENT;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.GET_CURRENT_POSITION;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.GET_DEFAULT_POSITION;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.GET_MAX_SIZE;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.GET_SCREEN_SIZE;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.STORE_PICTURE;
-import static com.mopub.mobileads.MraidCommandStorePicture.MIME_TYPE_HEADER;
-import static com.mopub.mobileads.util.Mraids.ANDROID_CALENDAR_CONTENT_TYPE;
-import static java.io.File.*;
+import static com.mopub.mraid.MraidNativeCommandHandler.ANDROID_CALENDAR_CONTENT_TYPE;
+import static java.io.File.separator;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.argThat;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.doAnswer;
-import static org.mockito.Mockito.isA;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
-import static org.mockito.Mockito.withSettings;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
-public class MraidDisplayControllerTest {
+public class MraidNativeCommandHandlerTest {
     private static final String IMAGE_URI_VALUE = "file://tmp/expectedFile.jpg";
     private static final int TIME_TO_PAUSE_FOR_NETWORK = 300;
-    private static final String VIDEO_URL = "http://video";
-    public static final String FAKE_IMAGE_DATA = "imageFileData";
+    private static final String FAKE_IMAGE_DATA = "imageFileData";
     //XXX: Robolectric or JUNIT doesn't support the correct suffix ZZZZZ in the parse pattern, so replacing xx:xx with xxxx for time.
-    public static final String CALENDAR_START_TIME = "2013-08-14T20:00:00-0000";
-
-    private MraidView mraidView;
-    private MraidDisplayController subject;
-    private View rootView;
-    private FrameLayout contentView;
-    private MoPubView moPubView;
-    private FrameLayout adContainerLayout;
-    private RelativeLayout expansionLayout;
-    private FrameLayout placeholderView;
+    private static final String CALENDAR_START_TIME = "2013-08-14T20:00:00-0000";
+
+
+    @Mock MraidCommandFailureListener mraidCommandFailureListener;
+    private MraidNativeCommandHandler subject;
+    private Context context;
+    private Map<String, String> params;
+
     private File expectedFile;
     private File pictureDirectory;
     private File fileWithoutExtension;
     private TestHttpResponseWithHeaders response;
-    private Map<String, String> params;
-    private AdConfiguration adConfiguration;
-    private long testBroadcastIdentifier;
 
 
     @Before
-    public void setup() {
-        mraidView = TestMraidViewFactory.getSingletonMock();
-        moPubView = mock(MoPubView.class);
-        rootView = mock(View.class);
-        contentView = mock(FrameLayout.class);
-        adContainerLayout = mock(FrameLayout.class);
-        expansionLayout = mock(RelativeLayout.class);
-        placeholderView = mock(FrameLayout.class);
-        params = new HashMap<String, String>();
-
-        resetMockMraidView(new Activity());
-        stub(rootView.findViewById(eq(android.R.id.content))).toReturn(contentView);
-        stub(contentView.getContext()).toReturn(new Activity());
-
-        subject = new TestMraidDisplayController(mraidView, null, null);
-
-        testBroadcastIdentifier = 1235;
-        adConfiguration = mock(AdConfiguration.class, withSettings().serializable());
-        stub(adConfiguration.getBroadcastIdentifier()).toReturn(testBroadcastIdentifier);
-        stub(mraidView.getAdConfiguration()).toReturn(adConfiguration);
+    public void setUp() throws Exception {
+        subject = new MraidNativeCommandHandler();
+        context = Robolectric.buildActivity(Activity.class).create().get();
 
         FileUtils.copyFile("etc/expectedFile.jpg", "/tmp/expectedFile.jpg");
         expectedFile = new File(Environment.getExternalStorageDirectory(), "Pictures" + separator + "expectedFile.jpg");
         pictureDirectory = new File(Environment.getExternalStorageDirectory(), "Pictures");
         fileWithoutExtension = new File(pictureDirectory, "file");
-
-        ShadowEnvironment.setExternalStorageState(Environment.MEDIA_MOUNTED);
-        Robolectric.getShadowApplication().grantPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE);
-    }
-
-    @Test
-    public void initialization_shouldSetupStartingState() throws Exception {
-        assertThat(subject.getMraidView()).isSameAs(mraidView);
-    }
-
-    @Test
-    public void initializeJavaScriptState_shouldSetMraidSupportsProperties() throws Exception {
-        subject.initializeJavaScriptState();
-        verify(mraidView).fireChangeEventForProperty(isA(MraidSupportsProperty.class));
-    }
-
-    @Test
-    public void initializeSupportedFunctionsProperty_whenPhoneIsAvailable_shouldReportPhoneAvailable() throws Exception {
-        Context mockContext = createMockContextWithSpecificIntentData("tel", null, null, "android.intent.action.DIAL");
-
-        resetMockMraidView(mockContext);
-        subject.initializeSupportedFunctionsProperty();
-
-        MraidSupportsProperty mraidSupportsProperty = captureMraidSupportProperties();
-
-        assertThat(mraidSupportsProperty.toJsonPair()).contains("tel: true");
-    }
-
-    @Test
-    public void initializeSupportedFunctionsProperty_whenPhoneNotAvailable_shouldReportPhoneNotAvailable() throws Exception {
-        Context mockContext = createMockContextWithSpecificIntentData("", null, null, "android.intent.action.DIAL");
-
-        resetMockMraidView(mockContext);
-        subject.initializeSupportedFunctionsProperty();
-
-        MraidSupportsProperty mraidSupportsProperty = captureMraidSupportProperties();
-
-        assertThat(mraidSupportsProperty.toJsonPair()).contains("tel: false");
-    }
-
-    @Test
-    public void initializeSupportedFunctionsProperty_whenSmsIsAvailable_shouldReportSmsAvailable() throws Exception {
-        Context mockContext = createMockContextWithSpecificIntentData("sms", null, null, "android.intent.action.VIEW");
-
-        resetMockMraidView(mockContext);
-        subject.initializeSupportedFunctionsProperty();
-
-        MraidSupportsProperty mraidSupportsProperty = captureMraidSupportProperties();
-
-        assertThat(mraidSupportsProperty.toJsonPair()).contains("sms: true");
-    }
-
-    @Test
-    public void initializeSupportedFunctionsProperty_whenSmsNotAvailable_shouldReportSmsNotAvailable() throws Exception {
-        Context mockContext = createMockContextWithSpecificIntentData("", null, null, "android.intent.action.VIEW");
-
-        resetMockMraidView(mockContext);
-        subject.initializeSupportedFunctionsProperty();
-
-        MraidSupportsProperty mraidSupportsProperty = captureMraidSupportProperties();
-
-        assertThat(mraidSupportsProperty.toJsonPair()).contains("sms: false");
-    }
-
-    @Test
-    public void initializeSupportedFunctionsProperty_whenWriteExternalStoragePermissionNotGranted_shouldReportStorePictureNotAvailable() throws Exception {
-        Robolectric.getShadowApplication().denyPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE);
-
-        resetMockMraidView(new Activity());
-        subject.initializeSupportedFunctionsProperty();
-
-        MraidSupportsProperty mraidSupportsProperty = captureMraidSupportProperties();
-
-        assertThat(mraidSupportsProperty.toJsonPair()).contains("storePicture: false");
-    }
-
-    @Test
-    public void initializeSupportedFunctionsProperty_whenSDCardNotMounted_shouldReportStorePictureNotAvailable() throws Exception {
-        ShadowEnvironment.setExternalStorageState(Environment.MEDIA_UNMOUNTED);
-
-        resetMockMraidView(new Activity());
-        subject.initializeSupportedFunctionsProperty();
-
-        MraidSupportsProperty mraidSupportsProperty = captureMraidSupportProperties();
-
-        assertThat(mraidSupportsProperty.toJsonPair()).contains("storePicture: false");
-    }
-
-    @Test
-    public void initializeSupportedFunctionsProperty_whenSDCardMounted_andWriteExternalStoragePermissionGranted_shouldReportStorePictureAvailable() throws Exception {
-        resetMockMraidView(new Activity());
-        subject.initializeSupportedFunctionsProperty();
-
-        MraidSupportsProperty mraidSupportsProperty = captureMraidSupportProperties();
-
-        assertThat(mraidSupportsProperty.toJsonPair()).contains("storePicture: true");
-    }
-
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
-    @Test
-    public void initializeSupportedFunctionsProperty_atLeastIcs_shouldReportCalendarAvailable() throws Exception {
-        Context mockContext = createMockContextWithSpecificIntentData(null, null, ANDROID_CALENDAR_CONTENT_TYPE, "android.intent.action.INSERT");
-        resetMockMraidView(mockContext);
-
-        subject.initializeSupportedFunctionsProperty();
-
-        MraidSupportsProperty mraidSupportsProperty = captureMraidSupportProperties();
-
-        assertThat(mraidSupportsProperty.toJsonPair()).contains("calendar: true");
-    }
-
-    @Config(reportSdk = VERSION_CODES.HONEYCOMB_MR2)
-    @Test
-    public void initializeSupportedFunctionsProperty_beforeIcs_shouldNotReportCalendarAvailable() throws Exception {
-        resetMockMraidView(new Activity());
-        subject.initializeSupportedFunctionsProperty();
-
-        MraidSupportsProperty mraidSupportsProperty = captureMraidSupportProperties();
-
-        assertThat(mraidSupportsProperty.toJsonPair()).contains("calendar: false");
-    }
-
-    @Test
-    public void initializeSupportedFunctionsProperty_whenMraidVideoPlayerActivityDeclared_shouldReportInlineVideoAvailable() throws Exception {
-        Context mockContext = createMockContextWithSpecificIntentData(null, "com.mopub.mobileads.MraidVideoPlayerActivity", null, null);
-
-        resetMockMraidView(mockContext);
-        subject.initializeSupportedFunctionsProperty();
-
-        MraidSupportsProperty mraidSupportsProperty = captureMraidSupportProperties();
-
-        assertThat(mraidSupportsProperty.toJsonPair()).contains("inlineVideo: true");
-    }
-
-    @Test
-    public void initializeSupportedFunctionsProperty_MraidVideoPlayerActivityNotDeclared_shouldReportInlineVideoNotAvailable() throws Exception {
-        resetMockMraidView(new Activity());
-        subject.initializeSupportedFunctionsProperty();
-
-        MraidSupportsProperty mraidSupportsProperty = captureMraidSupportProperties();
-
-        assertThat(mraidSupportsProperty.toJsonPair()).contains("inlineVideo: false");
-    }
-
-    @Test
-    public void expand_shouldSwapWithPlaceholderView() throws Exception {
-        stub(moPubView.getChildAt(eq(0))).toReturn(mraidView);
-        subject.expand(null, 320, 50, false, false);
-
-        verify(moPubView).addView(any(FrameLayout.class), eq(0), any(ViewGroup.LayoutParams.class));
-        verify(moPubView).removeView(eq(mraidView));
-        verify(adContainerLayout, times(2)).addView(any(ImageView.class), any(FrameLayout.LayoutParams.class));
-    }
-
-    @Test
-    public void close_shouldUnexpandView() throws Exception {
-        subject.expand(null, 320, 50, false, false);
-        stub(placeholderView.getParent()).toReturn(moPubView);
-
-        subject.close();
-
-        verify(adContainerLayout).removeAllViewsInLayout();
-        verify(expansionLayout).removeAllViewsInLayout();
-        verify(contentView).removeView(eq(expansionLayout));
-        verify(moPubView).addView(eq(mraidView), any(int.class));
-        verify(moPubView).removeView(eq(placeholderView));
-        verify(moPubView).invalidate();
     }
 
+    @Ignore("Mraid 2.0")
     @Test
     public void showUserDownloadImageAlert_withActivityContext_shouldDisplayAlertDialog() throws Exception {
-        stub(mraidView.getContext()).toReturn(new Activity());
-        subject = new TestMraidDisplayController(mraidView, null, null);
         response = new TestHttpResponseWithHeaders(200, FAKE_IMAGE_DATA);
 
-        subject.showUserDownloadImageAlert(IMAGE_URI_VALUE);
+        subject.storePicture(context, IMAGE_URI_VALUE, mraidCommandFailureListener);
 
         AlertDialog alertDialog = ShadowAlertDialog.getLatestAlertDialog();
         ShadowAlertDialog shadowAlertDialog = shadowOf(alertDialog);
@@ -312,14 +112,13 @@ public void showUserDownloadImageAlert_withActivityContext_shouldDisplayAlertDia
         assertThat(alertDialog.getButton(BUTTON_NEGATIVE)).isNotNull();
     }
 
+    @Ignore("Mraid 2.0")
     @Test
     public void showUserDownloadImageAlert_whenOkayClicked_shouldDownloadImage() throws Exception {
-        stub(mraidView.getContext()).toReturn(new Activity());
-        subject = new TestMraidDisplayController(mraidView, null, null);
         response = new TestHttpResponseWithHeaders(200, FAKE_IMAGE_DATA);
         Robolectric.addPendingHttpResponse(response);
 
-        subject.showUserDownloadImageAlert(IMAGE_URI_VALUE);
+        subject.storePicture(context, IMAGE_URI_VALUE, mraidCommandFailureListener);
 
         ShadowAlertDialog.getLatestAlertDialog().getButton(BUTTON_POSITIVE).performClick();
         ThreadUtils.pause(TIME_TO_PAUSE_FOR_NETWORK);
@@ -328,13 +127,12 @@ public void showUserDownloadImageAlert_whenOkayClicked_shouldDownloadImage() thr
         assertThat(expectedFile.length()).isEqualTo(FAKE_IMAGE_DATA.length());
     }
 
+    @Ignore("Mraid 2.0")
     @Test
     public void showUserDownloadImageAlert_whenCancelClicked_shouldDismissDialog() throws Exception {
-        stub(mraidView.getContext()).toReturn(new Activity());
-        subject = new TestMraidDisplayController(mraidView, null, null);
         response = new TestHttpResponseWithHeaders(200, FAKE_IMAGE_DATA);
 
-        subject.showUserDownloadImageAlert(IMAGE_URI_VALUE);
+        subject.storePicture(context, IMAGE_URI_VALUE, mraidCommandFailureListener);
 
         AlertDialog alertDialog = ShadowAlertDialog.getLatestAlertDialog();
         ShadowAlertDialog shadowAlertDialog = shadowOf(alertDialog);
@@ -346,16 +144,15 @@ public void showUserDownloadImageAlert_whenCancelClicked_shouldDismissDialog() t
         assertThat(expectedFile.length()).isEqualTo(0);
     }
 
+    @Ignore("MRAID 2.0")
     @Test
     public void showUserDownloadImageAlert_withAppContext_shouldToastAndDownloadImage() throws Exception {
-        stub(mraidView.getContext()).toReturn(Robolectric.application);
-        subject = new TestMraidDisplayController(mraidView, null, null);
         response = new TestHttpResponseWithHeaders(200, FAKE_IMAGE_DATA);
         Robolectric.addPendingHttpResponse(response);
 
         assertThat(ShadowToast.shownToastCount()).isEqualTo(0);
 
-        subject.showUserDownloadImageAlert(IMAGE_URI_VALUE);
+        subject.storePicture(context.getApplicationContext(), IMAGE_URI_VALUE, mraidCommandFailureListener);
         ThreadUtils.pause(TIME_TO_PAUSE_FOR_NETWORK);
 
         assertThat(ShadowToast.shownToastCount()).isEqualTo(1);
@@ -367,16 +164,15 @@ public void showUserDownloadImageAlert_withAppContext_shouldToastAndDownloadImag
         assertThat(expectedFile.length()).isEqualTo(FAKE_IMAGE_DATA.length());
     }
 
+    @Ignore("MRAID 2.0")
     @Test
     public void showUserDownloadImageAlert_withAppContext_whenDownloadImageFails_shouldDisplayFailureToastAndNotDownloadImage() throws Exception {
-        stub(mraidView.getContext()).toReturn(Robolectric.application);
-        subject = new TestMraidDisplayController(mraidView, null, null);
         response = new TestHttpResponseWithHeaders(200, FAKE_IMAGE_DATA);
         Robolectric.addPendingHttpResponse(response);
 
         assertThat(ShadowToast.shownToastCount()).isEqualTo(0);
 
-        subject.showUserDownloadImageAlert("this is an invalid image url and cannot be downloaded");
+        subject.storePicture(context, "this is an invalid image url and cannot be downloaded", mraidCommandFailureListener);
         ThreadUtils.pause(TIME_TO_PAUSE_FOR_NETWORK);
 
         assertThat(ShadowToast.shownToastCount()).isEqualTo(1);
@@ -391,17 +187,19 @@ public void showUserDownloadImageAlert_withAppContext_whenDownloadImageFails_sho
         assertThat(expectedFile.length()).isEqualTo(0);
     }
 
+    @Ignore("Mraid 2.0")
     @Test
     public void showUserDownloadImageAlert_whenStorePictureNotSupported_shouldFireErrorEvent_andNotToastNorAlertDialog() throws Exception {
         Robolectric.getShadowApplication().denyPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE);
 
-        subject.showUserDownloadImageAlert("http://image.jpg");
+        subject.storePicture(context, "http://image.jpg", mraidCommandFailureListener);
 
         assertThat(ShadowToast.shownToastCount()).isEqualTo(0);
         assertThat(ShadowAlertDialog.getLatestAlertDialog()).isNull();
-        verify(mraidView).fireErrorEvent(eq(STORE_PICTURE), any(String.class));
+        verify(mraidCommandFailureListener).onFailure(any(MraidCommandException.class));
     }
 
+    @Ignore("Mraid 2.0")
     @Test
     public void showUserDownloadImageAlert_withMimeTypeAndNoFileExtension_shouldSavePictureWithMimeType() throws Exception {
         String fileNameWithNoExtension = "https://www.somewhere.com/images/blah/file";
@@ -413,6 +211,7 @@ public void showUserDownloadImageAlert_withMimeTypeAndNoFileExtension_shouldSave
                 ".jpg");
     }
 
+    @Ignore("Mraid 2.0")
     @Test
     public void showUserDownloadImageAlert_withMultipleContentTypesAndNoFileExtension_shouldSavePictureWithMimeType() throws Exception {
         String fileNameWithNoExtension = "https://www.somewhere.com/images/blah/file";
@@ -424,6 +223,7 @@ public void showUserDownloadImageAlert_withMultipleContentTypesAndNoFileExtensio
                 ".png");
     }
 
+    @Ignore("Mraid 2.0")
     @Test
     public void showUserDownloadImageAlert_withMimeTypeAndFileExtension_shouldSavePictureWithFileExtension() throws Exception {
         String fileNameWithExtension = "https://www.somewhere.com/images/blah/file.extension";
@@ -437,6 +237,7 @@ public void showUserDownloadImageAlert_withMimeTypeAndFileExtension_shouldSavePi
         assertThat((expectedFile.getName()).endsWith(".extension.extension")).isFalse();
     }
 
+    @Ignore("Mraid 2.0")
     @Test
     public void showUserDownloadImageAlert_withHttpUri_shouldRequestPictureFromNetwork() throws Exception {
         response = new TestHttpResponseWithHeaders(200, "OK");
@@ -446,69 +247,15 @@ public void showUserDownloadImageAlert_withHttpUri_shouldRequestPictureFromNetwo
         assertThat(latestRequest.getURI()).isEqualTo(URI.create("https://www.google.com/images/srpr/logo4w.png"));
     }
 
-    @Test
-    public void orientationBroadcastReceiver_whenUnregistered_shouldIgnoreOnReceive() throws Exception {
-        Intent intent = mock(Intent.class);
-        stub(intent.getAction()).toReturn("some bogus action which we hope never to see");
-        Context context = new Activity();
-        MraidDisplayController.OrientationBroadcastReceiver receiver = subject.new OrientationBroadcastReceiver();
-        receiver.register(context);
-
-        receiver.unregister();
-        receiver.onReceive(context, intent);
-
-        verify(intent, never()).getAction();
-    }
-
-    @Test
-    public void showVideo_shouldStartVideoPlayerActivity() throws Exception {
-        subject.showVideo(VIDEO_URL);
-        assertMraidVideoPlayerActivityStarted(MraidVideoPlayerActivity.class, VIDEO_URL, adConfiguration);
-    }
-
-    @Test
-    public void getCurrentPosition_shouldFireErrorEvent() throws Exception {
-        resetMockMraidView(new Activity());
-
-        subject.getCurrentPosition();
-
-        verify(mraidView).fireErrorEvent(eq(GET_CURRENT_POSITION), any(String.class));
-    }
-
-    @Test
-    public void getDefaultPosition_shouldFireErrorEvent() throws Exception {
-        resetMockMraidView(new Activity());
-
-        subject.getDefaultPosition();
-
-        verify(mraidView).fireErrorEvent(eq(GET_DEFAULT_POSITION), any(String.class));
-    }
-
-    @Test
-    public void getMaxSize_shouldFireErrorEvent() throws Exception {
-        resetMockMraidView(new Activity());
-
-        subject.getMaxSize();
-
-        verify(mraidView).fireErrorEvent(eq(GET_MAX_SIZE), any(String.class));
-    }
-    @Test
-    public void getScreenSize_shouldFireErrorEvent() throws Exception {
-        resetMockMraidView(new Activity());
-
-        subject.getScreenSize();
-
-        verify(mraidView).fireErrorEvent(eq(GET_SCREEN_SIZE), any(String.class));
-    }
-
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Ignore("Mraid 2.0")
+    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withMinimumValidParams_atLeastICS_shouldCreateEventIntent() throws Exception {
         setupCalendarParams();
 
-        subject.createCalendarEvent(params);
+        subject.createCalendarEvent(context, params);
 
-        verify(mraidView, never()).fireErrorEvent(eq(CREATE_CALENDAR_EVENT), any(String.class));
+        verify(mraidCommandFailureListener, never()).onFailure(any(MraidCommandException.class));
 
         Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
 
@@ -518,15 +265,16 @@ public void createCalendarEvent_withMinimumValidParams_atLeastICS_shouldCreateEv
         assertThat(intent.getLongExtra(CalendarContract.EXTRA_EVENT_BEGIN_TIME, -1)).isNotEqualTo(-1);
     }
 
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Ignore("Mraid 2.0")
+    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withoutSecondsOnStartDate_atLeastICS_shouldCreateEventIntent() throws Exception {
         setupCalendarParams();
         params.put("start", "2012-12-21T00:00-0500");
 
-        subject.createCalendarEvent(params);
+        subject.createCalendarEvent(context, params);
 
-        verify(mraidView, never()).fireErrorEvent(eq(CREATE_CALENDAR_EVENT), any(String.class));
+        verify(mraidCommandFailureListener, never()).onFailure(any(MraidCommandException.class));
 
         Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
 
@@ -536,13 +284,14 @@ public void createCalendarEvent_withoutSecondsOnStartDate_atLeastICS_shouldCreat
         assertThat(intent.getLongExtra(CalendarContract.EXTRA_EVENT_BEGIN_TIME, -1)).isNotEqualTo(-1);
     }
 
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Ignore("Mraid 2.0")
+    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withDailyRecurrence_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
         params.put("frequency", "daily");
 
-        subject.createCalendarEvent(params);
+        subject.createCalendarEvent(context, params);
 
         Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
         assertThat(intent.getType()).isEqualTo(ANDROID_CALENDAR_CONTENT_TYPE);
@@ -550,71 +299,77 @@ public void createCalendarEvent_withDailyRecurrence_shouldCreateCalendarIntent()
         assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=DAILY;");
     }
 
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Ignore("Mraid 2.0")
+    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withDailyRecurrence_withInterval_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
         params.put("frequency", "daily");
         params.put("interval", "2");
 
-        subject.createCalendarEvent(params);
+        subject.createCalendarEvent(context, params);
 
         Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
         assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=DAILY;INTERVAL=2;");
     }
 
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Ignore("Mraid 2.0")
+    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withWeeklyRecurrence_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
         params.put("frequency", "weekly");
 
-        subject.createCalendarEvent(params);
+        subject.createCalendarEvent(context, params);
 
         Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
         assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=WEEKLY;");
     }
 
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Ignore("Mraid 2.0")
+    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withWeeklyRecurrence_withInterval_withOutWeekday_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
         params.put("frequency", "weekly");
         params.put("interval", "7");
 
-        subject.createCalendarEvent(params);
+        subject.createCalendarEvent(context, params);
 
         Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
         assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=WEEKLY;INTERVAL=7;");
     }
 
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Ignore("Mraid 2.0")
+    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withWeeklyRecurrence_onAllWeekDays_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
         params.put("frequency", "weekly");
         params.put("daysInWeek", "0,1,2,3,4,5,6");
 
-        subject.createCalendarEvent(params);
+        subject.createCalendarEvent(context, params);
 
         Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
         assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=WEEKLY;BYDAY=SU,MO,TU,WE,TH,FR,SA;");
     }
 
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Ignore("Mraid 2.0")
+    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withWeeklyRecurrence_onDuplicateWeekDays_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
         params.put("frequency", "weekly");
         params.put("daysInWeek", "3,2,3,3,7,0");
 
-        subject.createCalendarEvent(params);
+        subject.createCalendarEvent(context, params);
 
         Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
         assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=WEEKLY;BYDAY=WE,TU,SU;");
     }
 
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Ignore("Mraid 2.0")
+    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withWeeklyRecurrence_withInterval_withWeekDay_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -622,13 +377,14 @@ public void createCalendarEvent_withWeeklyRecurrence_withInterval_withWeekDay_sh
         params.put("interval", "1");
         params.put("daysInWeek", "1");
 
-        subject.createCalendarEvent(params);
+        subject.createCalendarEvent(context, params);
 
         Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
         assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=WEEKLY;INTERVAL=1;BYDAY=MO;");
     }
 
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Ignore("Mraid 2.0")
+    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withDailyRecurrence_withWeeklyRecurrence_withMonthlyOccurence_shouldCreateDailyCalendarIntent() throws Exception {
         setupCalendarParams();
@@ -638,57 +394,61 @@ public void createCalendarEvent_withDailyRecurrence_withWeeklyRecurrence_withMon
         params.put("interval", "2");
         params.put("daysInWeek", "1");
 
-        subject.createCalendarEvent(params);
+        subject.createCalendarEvent(context, params);
 
         Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
         assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=DAILY;INTERVAL=2;");
     }
 
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Ignore("Mraid 2.0")
+    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withMonthlyRecurrence_withOutInterval_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
         params.put("frequency", "monthly");
 
-        subject.createCalendarEvent(params);
+        subject.createCalendarEvent(context, params);
 
         Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
         assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=MONTHLY;");
     }
 
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Ignore("Mraid 2.0")
+    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withMonthlyRecurrence_withInterval_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
         params.put("frequency", "monthly");
         params.put("interval", "2");
 
-        subject.createCalendarEvent(params);
+        subject.createCalendarEvent(context, params);
 
         Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
         assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=MONTHLY;INTERVAL=2;");
     }
 
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Ignore("Mraid 2.0")
+    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void createCalendarEvent_withMonthlyRecurrence_withOutInterval_withDaysOfMonth_shouldCreateCalendarIntent() throws Exception {
         setupCalendarParams();
         params.put("frequency", "monthly");
         params.put("daysInMonth", "2,-15");
 
-        subject.createCalendarEvent(params);
+        subject.createCalendarEvent(context, params);
 
         Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
         assertThat(intent.getStringExtra(CalendarContract.Events.RRULE)).isEqualTo("FREQ=MONTHLY;BYMONTHDAY=2,-15;");
     }
 
+    @Ignore("Mraid 2.0")
     @Test
     public void createCalendarEvent_withMonthlyRecurrence_withInvalidDaysOfMonth_shouldNotCreateCalendarIntent() throws Exception {
         setupCalendarParams();
         params.put("frequency", "monthly");
         params.put("daysInMonth", "55");
 
-        subject.createCalendarEvent(params);
+        subject.createCalendarEvent(context, params);
 
         Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
 
@@ -696,13 +456,14 @@ public void createCalendarEvent_withMonthlyRecurrence_withInvalidDaysOfMonth_sho
         assertThat(ShadowLog.getLogs().size()).isEqualTo(1);
     }
 
+    @Ignore("Mraid 2.0")
     @Test
     public void createCalendarEvent_withWeeklyRecurrence_withInvalidDaysOfWeek_shouldNotCreateCalendarIntent() throws Exception {
         setupCalendarParams();
         params.put("frequency", "weekly");
         params.put("daysInWeek", "-1,20");
 
-        subject.createCalendarEvent(params);
+        subject.createCalendarEvent(context, params);
 
         Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
 
@@ -710,50 +471,50 @@ public void createCalendarEvent_withWeeklyRecurrence_withInvalidDaysOfWeek_shoul
         assertThat(ShadowLog.getLogs().size()).isEqualTo(1);
     }
 
-    @Config(reportSdk = VERSION_CODES.HONEYCOMB_MR2)
+    @Ignore("Mraid 2.0")
+    @Config(reportSdk = Build.VERSION_CODES.HONEYCOMB_MR2)
     @Test
     public void createCalendarEvent_beforeIcs_shouldFireErrorEvent() throws Exception {
-        resetMockMraidView(new Activity());
+        subject.createCalendarEvent(context, params);
 
-        subject.createCalendarEvent(params);
-
-        verify(mraidView).fireErrorEvent(eq(CREATE_CALENDAR_EVENT), any(String.class));
+        verify(mraidCommandFailureListener).onFailure(any(MraidCommandException.class));
     }
 
+    @Ignore("Mraid 2.0")
     @Test
     public void createCalendarEvent_withInvalidDate_shouldFireErrorEvent() throws Exception {
-        resetMockMraidView(new Activity());
         params.put("start", "2013-08-14T09:00.-08:00");
         params.put("description", "Some Event");
 
-        subject.createCalendarEvent(params);
+        subject.createCalendarEvent(context, params);
 
-        verify(mraidView).fireErrorEvent(eq(CREATE_CALENDAR_EVENT), any(String.class));
+        verify(mraidCommandFailureListener).onFailure(any(MraidCommandException.class));
     }
 
+    @Ignore("Mraid 2.0")
     @Test
     public void createCalendarEvent_withMissingParameters_shouldFireErrorEvent() throws Exception {
-        resetMockMraidView(new Activity());
         //it needs a start time
         params.put("description", "Some Event");
 
-        subject.createCalendarEvent(params);
+        subject.createCalendarEvent(context, params);
 
-        verify(mraidView).fireErrorEvent(eq(CREATE_CALENDAR_EVENT), any(String.class));
+        verify(mraidCommandFailureListener).onFailure(any(MraidCommandException.class));
     }
 
+    @Ignore("Mraid 2.0")
     @Test
     public void createCalendarEvent_withNullDate_shouldFireErrorEvent() throws Exception {
-        resetMockMraidView(new Activity());
         params.put("start", null);
         params.put("description", "Some Event");
 
-        subject.createCalendarEvent(params);
+        subject.createCalendarEvent(context, params);
 
-        verify(mraidView).fireErrorEvent(eq(CREATE_CALENDAR_EVENT), any(String.class));
+        verify(mraidCommandFailureListener).onFailure(any(MraidCommandException.class));
     }
 
-    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Ignore("Mraid 2.0")
+    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void
     createCalendarEvent_withValidParamsAllExceptRecurrence_atLeastICS_shouldCreateEventIntent() throws Exception {
@@ -763,7 +524,7 @@ public void createCalendarEvent_withNullDate_shouldFireErrorEvent() throws Excep
         params.put("summary", "some description actually");
         params.put("transparency", "transparent");
 
-        subject.createCalendarEvent(params);
+        subject.createCalendarEvent(context, params);
 
         Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
 
@@ -778,48 +539,219 @@ public void createCalendarEvent_withNullDate_shouldFireErrorEvent() throws Excep
     }
 
     @Test
-    public void addCloseEventRegion_shouldAddCloseEventRegionToFrameLayout() throws Exception {
-        Activity activity = new Activity();
-        FrameLayout frameLayout = new FrameLayout(activity);
-        subject.addCloseEventRegion(frameLayout);
+    public void isTelAvailable_whenCanAcceptIntent_shouldReturnTrue() throws Exception {
+        context = createMockContextWithSpecificIntentData("tel", null, null, "android.intent.action.DIAL");
+
+        assertThat(subject.isTelAvailable(context)).isTrue();
+    }
+
+    @Test
+    public void isTelAvailable_whenCanNotAcceptIntent_shouldReturnFalse() throws Exception {
+        context = createMockContextWithSpecificIntentData("", null, null, "android.intent.action.DIAL");
+
+        assertThat(subject.isTelAvailable(context)).isFalse();
+    }
+
+    @Test
+    public void isSmsAvailable_whenCanAcceptIntent_shouldReturnTrue() throws Exception {
+        context = createMockContextWithSpecificIntentData("sms", null, null, "android.intent.action.VIEW");
+
+        assertThat(subject.isSmsAvailable(context)).isTrue();
+    }
+
+    @Test
+    public void isSmsAvailable_whenCanNotAcceptIntent_shouldReturnFalse() throws Exception {
+        context = createMockContextWithSpecificIntentData("", null, null, "android.intent.action.VIEW");
+
+        assertThat(subject.isSmsAvailable(context)).isFalse();
+    }
+
+    @Test
+    public void isStorePictureAvailable_whenPermissionDeclaredAndMediaMounted_shouldReturnTrue() throws Exception {
+        Robolectric.getShadowApplication().grantPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE);
+        ShadowEnvironment.setExternalStorageState(Environment.MEDIA_MOUNTED);
+
+        assertThat(subject.isStorePictureSupported(context)).isTrue();
+    }
+
+    @Test
+    public void isStorePictureAvailable_whenPermissionDenied_shouldReturnFalse() throws Exception {
+        Robolectric.getShadowApplication().denyPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE);
+        ShadowEnvironment.setExternalStorageState(Environment.MEDIA_MOUNTED);
+
+        assertThat(subject.isStorePictureSupported(context)).isFalse();
+    }
+
+    @Test
+    public void isStorePictureAvailable_whenMediaUnmounted_shouldReturnFalse() throws Exception {
+        Robolectric.getShadowApplication().grantPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE);
+        ShadowEnvironment.setExternalStorageState(Environment.MEDIA_UNMOUNTED);
+
+        assertThat(subject.isStorePictureSupported(context)).isFalse();
+    }
+
+    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Test
+    public void isCalendarAvailable_atLeastIcs_shouldReturnTrue() throws Exception {
+        context = createMockContextWithSpecificIntentData(null, null, ANDROID_CALENDAR_CONTENT_TYPE, "android.intent.action.INSERT");
+        assertThat(subject.isCalendarAvailable(context)).isTrue();
+    }
+
+    @Config(reportSdk = Build.VERSION_CODES.HONEYCOMB_MR2)
+    @Test
+    public void isCalendarAvailable_beforeIcs_shouldReturnFalse() throws Exception {
+        context = createMockContextWithSpecificIntentData(null, null, ANDROID_CALENDAR_CONTENT_TYPE, "android.intent.action.INSERT");
+        assertThat(subject.isCalendarAvailable(context)).isFalse();
+    }
+
+    @Config(reportSdk = Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Test
+    public void isCalendarAvailable_atLeastIcs_butCanNotAcceptIntent_shouldReturnFalse() throws
+            Exception {
+        context = createMockContextWithSpecificIntentData(null, null, "vnd.android.cursor.item/NOPE", "android.intent.action.INSERT");
+        assertThat(subject.isCalendarAvailable(context)).isFalse();
+    }
+
+    @TargetApi(11)
+    @Test
+    public void isInlineVideoAvailable_whenViewsAreHardwareAccelerated_whenWindowIsHardwareAccelerated_whenApiLevelIsAtLeastHoneycombMR1_shouldReturnTrue() throws Exception {
+        Activity activity = Robolectric.buildActivity(Activity.class).create().get();
+        activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
+
+        View mockView = mock(View.class);
+        when(mockView.isHardwareAccelerated()).thenReturn(true);
+        when(mockView.getLayerType()).thenReturn(View.LAYER_TYPE_HARDWARE);
+
+        assertThat(subject.isInlineVideoAvailable(activity, mockView)).isTrue();
+    }
+
+    @TargetApi(11)
+    @Test
+    public void isInlineVideoAvailable_whenViewsAreHardwareAccelerated_whenWindowIsNotHardwareAccelerated_whenApiLevelIsAtLeastHoneycombMR1_shouldReturnFalse() throws Exception {
+        Activity activity = Robolectric.buildActivity(Activity.class).create().get();
+
+        View mockView = mock(View.class);
+        when(mockView.isHardwareAccelerated()).thenReturn(true);
+        when(mockView.getLayerType()).thenReturn(View.LAYER_TYPE_HARDWARE);
+
+        assertThat(subject.isInlineVideoAvailable(activity, mockView)).isFalse();
+    }
+
+    @Config(reportSdk = Build.VERSION_CODES.HONEYCOMB)
+    @TargetApi(11)
+    @Test
+    public void isInlineVideoAvailable_whenViewsAreHardwareAccelerated_whenWindowIsHardwareAccelerated_whenApiLevelIsLessThanHoneycombMR1_shouldReturnFalse() throws Exception {
+        Activity activity = Robolectric.buildActivity(Activity.class).create().get();
+        activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
+
+        View mockView = mock(View.class);
+        when(mockView.isHardwareAccelerated()).thenReturn(true);
+        when(mockView.getLayerType()).thenReturn(View.LAYER_TYPE_HARDWARE);
+
+        assertThat(subject.isInlineVideoAvailable(activity, mockView)).isFalse();
+    }
+
+    @TargetApi(11)
+    @Test
+    public void isInlineVideoAvailable_whenViewsAreNotHardwareAccelerated_whenWindowIsHardwareAccelerated_whenApiLevelIsAtLeastHoneycombMR1_shouldReturnFalse() throws Exception {
+        Activity activity = Robolectric.buildActivity(Activity.class).create().get();
+        activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
 
-        final Button closeEventRegion = (Button) frameLayout.getChildAt(0);
-        assertThat(closeEventRegion.getVisibility()).isEqualTo(View.VISIBLE);
-        assertThat(shadowOf(closeEventRegion).getBackgroundColor()).isEqualTo(Color.TRANSPARENT);
-        assertThat(shadowOf(closeEventRegion).getOnClickListener()).isEqualTo(subject.getCloseOnClickListener());
-        assertThat(Dips.pixelsToIntDips((float)closeEventRegion.getLayoutParams().width, activity)).isEqualTo(50);
-        assertThat(Dips.pixelsToIntDips((float)closeEventRegion.getLayoutParams().height, activity)).isEqualTo(50);
-        assertThat(((FrameLayout.LayoutParams)closeEventRegion.getLayoutParams()).gravity).isEqualTo(Gravity.TOP | Gravity.RIGHT);
+        View mockView = mock(View.class);
+        when(mockView.isHardwareAccelerated()).thenReturn(false);
+        when(mockView.getLayerType()).thenReturn(View.LAYER_TYPE_HARDWARE);
+
+        assertThat(subject.isInlineVideoAvailable(activity, mockView)).isFalse();
     }
 
-    private void resetMockMraidView(Context context) {
-        reset(mraidView);
-        stub(mraidView.getContext()).toReturn(context);
-        when(mraidView.getParent()).thenReturn(moPubView).thenReturn(null);
-        stub(mraidView.getRootView()).toReturn(rootView);
-        stub(mraidView.getAdConfiguration()).toReturn(adConfiguration);
+    @TargetApi(11)
+    @Test
+    public void isInlineVideoAvailable_whenViewParentIsNotHardwareAccelerated_whenWindowIsHardwareAccelerated_whenApiLevelIsAtLeastHoneycombMR1_shouldReturnFalse() throws Exception {
+        Activity activity = Robolectric.buildActivity(Activity.class).create().get();
+        activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
+
+        // ViewParent
+        LinearLayout mockLinearLayout = mock(LinearLayout.class);
+        when(mockLinearLayout.isHardwareAccelerated()).thenReturn(false);
+        when(mockLinearLayout.getLayerType()).thenReturn(View.LAYER_TYPE_HARDWARE);
+
+        // View
+        View mockView = mock(View.class);
+        when(mockView.isHardwareAccelerated()).thenReturn(true);
+        when(mockView.getLayerType()).thenReturn(View.LAYER_TYPE_HARDWARE);
+        when(mockView.getParent()).thenReturn(mockLinearLayout);
+
+        assertThat(subject.isInlineVideoAvailable(activity, mockView)).isFalse();
     }
 
-    private MraidSupportsProperty captureMraidSupportProperties() {
-        ArgumentCaptor<MraidSupportsProperty> propertiesCaptor = ArgumentCaptor.forClass(MraidSupportsProperty.class);
-        verify(mraidView).fireChangeEventForProperty(propertiesCaptor.capture());
-        return propertiesCaptor.getValue();
+    private static Context createMockContextWithSpecificIntentData(final String scheme, final String componentName, final String type, final String action) {
+        Context context = mock(Context.class);
+        PackageManager packageManager = mock(PackageManager.class);
+
+        List<ResolveInfo> resolveInfos = new ArrayList<ResolveInfo>();
+        resolveInfos.add(new ResolveInfo());
+
+        stub(context.getPackageManager()).toReturn(packageManager);
+
+        BaseMatcher intentWithSpecificData = new BaseMatcher() {
+            // check that the specific intent has the special data, i.e. "tel:", or a component name, or string type, based on a particular data
+
+            @Override
+            public boolean matches(Object item) {
+                if (item != null && item instanceof Intent ){
+                    boolean result = action != null || type != null || componentName != null || scheme != null;
+                    if (action != null) {
+                        if (((Intent) item).getAction() != null) {
+                            result = result && action.equals(((Intent) item).getAction());
+                        }
+                    }
+
+                    if (type != null) {
+                        if (((Intent) item).getType() != null) {
+                            result = result && type.equals(((Intent) item).getType());
+                        }
+                    }
+
+                    if (componentName != null) {
+                        if (((Intent) item).getComponent() != null) {
+                            result = result && componentName.equals(((Intent) item).getComponent().getClassName());
+                        }
+                    }
+
+                    if (scheme != null) {
+                        if (((Intent) item).getData() != null) {
+                            result = result && scheme.equals(((Intent) item).getData().getScheme());
+                        }
+                    }
+                    return result;
+                }
+                return false;
+            }
+
+            @Override
+            public void describeTo(Description description) {
+
+            }
+        };
+
+        // It is okay to query with specific intent or nothing, because by default, none of the query would normally any resolveInfo anyways
+        stub(packageManager.queryIntentActivities((Intent) argThat(intentWithSpecificData), eq(0))).toReturn(resolveInfos);
+        return context;
     }
 
-    private void downloadImageForPendingResponse(String uri, HttpResponse response){
+    private void downloadImageForPendingResponse(String uri, HttpResponse response) throws Exception {
         Robolectric.addPendingHttpResponse(response);
 
-        stub(mraidView.getContext()).toReturn(Robolectric.application);
-        subject = new TestMraidDisplayController(mraidView, null, null);
-        subject.showUserDownloadImageAlert(uri);
+        subject.storePicture(context, uri, mraidCommandFailureListener);
 
         ThreadUtils.pause(TIME_TO_PAUSE_FOR_NETWORK);
     }
 
-    private void assertThatMimeTypeWasAddedCorrectly(String originalFileName, String contentType, String expectedFileName, String expectedExtension) {
+    private void assertThatMimeTypeWasAddedCorrectly(String originalFileName, String contentType,
+            String expectedFileName, String expectedExtension) throws Exception {
         expectedFile = new File(pictureDirectory, expectedFileName);
         response = new TestHttpResponseWithHeaders(200, FAKE_IMAGE_DATA);
-        response.addHeader(MIME_TYPE_HEADER, contentType);
+        response.addHeader(MraidNativeCommandHandler.MIME_TYPE_HEADER, contentType);
 
         downloadImageForPendingResponse(originalFileName, response);
 
@@ -830,7 +762,8 @@ private void assertThatMimeTypeWasAddedCorrectly(String originalFileName, String
 
     private void setupCalendarParams() {
         //we need mock Context so that we can validate that isCalendarAvailable() is true
-        Context mockContext = createMockContextWithSpecificIntentData(null, null, ANDROID_CALENDAR_CONTENT_TYPE, "android.intent.action.INSERT");
+        Context mockContext = createMockContextWithSpecificIntentData(null,
+                null, ANDROID_CALENDAR_CONTENT_TYPE, "android.intent.action.INSERT");
 
         //but a mock context does't know how to startActivity(), so we stub it to use ShadowContext for starting activity
         doAnswer(new Answer<Void>() {
@@ -844,34 +777,7 @@ public Void answer(InvocationOnMock invocation) throws Throwable {
             }
         }).when(mockContext).startActivity(any(Intent.class));
 
-        resetMockMraidView(mockContext);
         params.put("description", "Some Event");
         params.put("start", CALENDAR_START_TIME);
     }
-
-    private Context createMockContextWithSpecificIntentData(final String scheme, final String componentName, final String type, final String action) {
-        return MraidsTest.createMockContextWithSpecificIntentData(scheme, componentName, type, action);
-    }
-
-    private class TestMraidDisplayController extends MraidDisplayController {
-        public TestMraidDisplayController(MraidView mraidView, MraidView.ExpansionStyle expStyle,
-                                          MraidView.NativeCloseButtonStyle buttonStyle) {
-            super(mraidView, expStyle, buttonStyle);
-        }
-
-        @Override
-        FrameLayout createAdContainerLayout() {
-            return adContainerLayout;
-        }
-
-        @Override
-        RelativeLayout createExpansionLayout() {
-            return expansionLayout;
-        }
-
-        @Override
-        FrameLayout createPlaceholderView() {
-            return placeholderView;
-        }
-    }
-}
+}
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java
similarity index 98%
rename from mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoViewControllerTest.java
rename to mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java
index 80b115ef..a589258d 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java
@@ -1,4 +1,4 @@
-package com.mopub.mobileads;
+package com.mopub.mraid;
 
 import android.app.Activity;
 import android.content.Context;
@@ -7,6 +7,7 @@
 import android.widget.ImageButton;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.EventForwardingBroadcastReceiver;
 
 import org.apache.http.HttpRequest;
 import org.junit.After;
@@ -183,7 +184,7 @@ private ShadowVideoView getShadowVideoView() {
         return shadowOf(subject.getVideoView());
     }
 
-    protected ImageButton getCloseButton() {
+    ImageButton getCloseButton() {
         return (ImageButton) subject.getLayout().getChildAt(1);
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java
index fe8f94c7..c8199d78 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java
@@ -1,6 +1,7 @@
 package com.mopub.nativeads;
 
 import android.app.Activity;
+import android.content.Context;
 
 import com.mopub.common.test.support.SdkTestRunner;
 
@@ -9,7 +10,7 @@
 import org.junit.runner.RunWith;
 
 import static org.fest.assertions.api.Assertions.assertThat;
-import static org.junit.Assert.fail;
+import static org.mockito.Mockito.mock;
 
 @RunWith(SdkTestRunner.class)
 public class AdapterHelperTest {
@@ -20,31 +21,29 @@
     private int interval;
 
     @Before
-    public void setUp() throws Exception {
+    public void setUp() {
         context = new Activity();
         start = 1;
         interval = 2;
         subject = new AdapterHelper(context, start, interval);
     }
 
-    @Test
-    public void constructor_whenPassedAnApplicationContext_shouldThrowIllegalArgumentException() throws Exception {
-        try {
-            new AdapterHelper(context.getApplicationContext(), start, interval);
-            fail("Expected IllegalArgumentException to be thrown");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage()).isEqualTo("Illegal argument: Context must be instance of Activity.");
-        }
+    @Test(expected = IllegalArgumentException.class)
+    public void constructor_whenPassedAnApplicationContext_shouldThrowIllegalArgumentException() {
+        new AdapterHelper(context.getApplicationContext(), start, interval);
     }
 
     @Test
-    public void getAdView_withNullActivityContext_shouldReturnEmptyViewWithApplicationContext() throws Exception {
+    public void getAdView_withNullActivityContext_shouldReturnEmptyViewWithApplicationContext() {
         subject.clearActivityContext();
-        assertThat(subject.getAdView(null, null, null, null, null).getContext()).isEqualTo(context.getApplication());
+        Context viewContext = subject.getAdView(null, null, mock(NativeResponse.class),
+                mock(ViewBinder.class),
+                null).getContext();
+        assertThat(viewContext).isEqualTo(context.getApplication());
     }
 
     @Test
-    public void adapterHelper_withContentRowCountOf10_shouldCalculateCorrectly() throws Exception {
+    public void adapterHelper_withContentRowCountOf10_shouldCalculateCorrectly() {
         contentRowCount = 10;
 
         start = 0;
@@ -158,7 +157,7 @@ public void adapterHelper_withContentRowCountOf10_shouldCalculateCorrectly() thr
     }
 
     @Test
-    public void adapterHelper_withContentRowCountOf1_shouldCalculateCorrectly() throws Exception {
+    public void adapterHelper_withContentRowCountOf1_shouldCalculateCorrectly() {
         contentRowCount = 1;
         start = 0;
         interval = 2;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ImageDiskTaskManagerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ImageDiskTaskManagerTest.java
index 6d6e7195..903fb9b1 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ImageDiskTaskManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/ImageDiskTaskManagerTest.java
@@ -47,7 +47,7 @@
     private static final int TEST_WIDTH = 400;
 
     @Before
-    public void setUp() throws Exception {
+    public void setUp() {
         context = new Activity();
         semaphore = new Semaphore(0);
         doAnswer(new Answer() {
@@ -81,41 +81,21 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
         list.add(url2);
     }
 
-    @After
-    public void tearDown() throws Exception {
-        CacheService.clearAndNullCaches();
+    @Test(expected = NullPointerException.class)
+    public void constructor_withNullUrlsList_shouldThrowNullPointerException() {
+        new ImageDiskTaskManager(null, imageTaskManagerListener, TEST_WIDTH);
     }
 
-    @Test
-    public void constructor_withNullUrlsList_shouldThrowIllegalArgumentException() throws Exception {
-        try {
-            new ImageDiskTaskManager(null, imageTaskManagerListener, TEST_WIDTH);
-            fail("Should have thrown IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            // pass
-        }
-    }
-
-    @Test
-    public void constructor_withNullInUrlsList_shouldThrowIllegalArgumentException() throws Exception {
+    @Test(expected = IllegalStateException.class)
+    public void constructor_withNullInUrlsList_shouldThrowIllegalStateException() {
         List<String> myList = new ArrayList<String>();
         myList.add(null);
-        try {
-            new ImageDiskTaskManager(myList, imageTaskManagerListener, TEST_WIDTH);
-            fail("Should have thrown IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            // pass
-        }
+        new ImageDiskTaskManager(myList, imageTaskManagerListener, TEST_WIDTH);
     }
 
-    @Test
-    public void constructor_withNullImageTaskManagerListener_shouldThrowIllegalArgumentException() throws Exception {
-        try {
-            new ImageDiskTaskManager(list, null, TEST_WIDTH);
-            fail("Should have thrown IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            // pass
-        }
+    @Test(expected = NullPointerException.class)
+    public void constructor_withNullImageTaskManagerListener_shouldThrowNullPointerException() {
+        new ImageDiskTaskManager(list, null, TEST_WIDTH);
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ImageDownloadTaskManagerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ImageDownloadTaskManagerTest.java
index b9664d43..02e9ed01 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ImageDownloadTaskManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/ImageDownloadTaskManagerTest.java
@@ -109,35 +109,37 @@ public void constructor_withInvalidUrlList_shouldThrowIllegalArgumentException()
                     mMockImageTaskManagerListener,
                     testMaxWidth
             );
-            fail("ImageDownloadTaskManager didn't throw an illegal argument exception");
-        } catch (IllegalArgumentException e) {
+            fail("ImageDownloadTaskManager didn't throw an illegal state exception");
+        } catch (IllegalStateException e) {
             // pass
         }
     }
 
-    @Test
-    public void constructor_withAnyNullParams_shouldThrowIllegalArgumentException() throws Exception {
-        try {
-            subject = new ImageDownloadTaskManager(
-                    null,
-                    mMockImageTaskManagerListener,
-                    testMaxWidth
-            );
-            fail("ImageDownloadTaskManager didn't throw an illegal argument exception");
-        } catch (IllegalArgumentException e) {
-            // pass
-        }
+    @Test(expected = NullPointerException.class)
+    public void constructor_withNullUrlsList_shouldThrowNullPointerException() {
+        subject = new ImageDownloadTaskManager(
+                null,
+                mMockImageTaskManagerListener,
+                testMaxWidth
+        );
+    }
 
-        try {
-            subject = new ImageDownloadTaskManager(
-                    Arrays.asList(url1, url2),
-                    null,
-                    testMaxWidth
-            );
-            fail("ImageDownloadTaskManager didn't throw an illegal argument exception");
-        } catch (IllegalArgumentException e) {
-            // pass
-        }
+    @Test(expected = IllegalStateException.class)
+    public void constructor_withAnyNullUrls_shouldThrowIllegalStateException() {
+        subject = new ImageDownloadTaskManager(
+                Arrays.asList(url1, null),
+                mMockImageTaskManagerListener,
+                testMaxWidth
+        );
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void constructor_withAnyNullListener_shouldThrowNullPointerException() {
+        subject = new ImageDownloadTaskManager(
+                Arrays.asList(url1, url2),
+                null,
+                testMaxWidth
+        );
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ImageServiceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ImageServiceTest.java
index f1298d06..47e2e386 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ImageServiceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/ImageServiceTest.java
@@ -8,8 +8,6 @@
 import com.mopub.common.CacheService;
 import com.mopub.common.CacheServiceTest;
 import com.mopub.common.DownloadResponse;
-import com.mopub.nativeads.test.support.MoPubShadowBitmap;
-import com.mopub.nativeads.test.support.MoPubShadowDisplay;
 import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.After;
@@ -19,7 +17,6 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
 import org.robolectric.tester.org.apache.http.FakeHttpLayer;
 
 import java.io.ByteArrayInputStream;
@@ -41,7 +38,6 @@
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
-@Config(shadows={MoPubShadowBitmap.class, MoPubShadowDisplay.class})
 public class ImageServiceTest {
     private ImageServiceListener imageServiceListener;
     private Semaphore semaphore;
@@ -95,14 +91,8 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
         ImageService.initialize(context);
     }
 
-    @After
-    public void tearDown() throws Exception {
-        CacheService.clearAndNullCaches();
-    }
-
     @Test
     public void get_shouldInitializeCaches() throws Exception {
-        CacheService.clearAndNullCaches();
         assertThat(CacheService.getBitmapLruCache()).isNull();
         assertThat(CacheService.getDiskLruCache()).isNull();
 
@@ -373,11 +363,9 @@ public void asBitmap_withMaxSize_shouldReturnBitmap() {
         assertThat(bitmap).isInstanceOf(Bitmap.class);
     }
 
-    @Test
-    public void asBitmap_withNullResponse_shouldReturnNull() throws Exception {
-        final Bitmap bitmap = ImageService.asBitmap(null, 30);
-
-        assertThat(bitmap).isNull();
+    @Test(expected = NullPointerException.class)
+    public void asBitmap_withNullResponse_shouldThrowNullPointerException() throws Exception {
+        ImageService.asBitmap(null, 30);
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ImageViewServiceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ImageViewServiceTest.java
index 54ea511d..9bad0526 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ImageViewServiceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/ImageViewServiceTest.java
@@ -25,7 +25,6 @@
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
-@Config(shadows={MoPubShadowBitmap.class, MoPubShadowDisplay.class})
 public class ImageViewServiceTest {
 
     private ImageView imageView;
@@ -50,11 +49,6 @@ public void setUp() throws Exception {
         fakeHttpLayer = Robolectric.getFakeHttpLayer();
     }
 
-    @After
-    public void tearDown() throws Exception {
-        CacheService.clearAndNullCaches();
-    }
-
     @Test
     public void loadImageView_withImageInMemoryCache_shouldLoadImageData() throws Exception {
         CacheServiceTest.assertCachesAreEmpty();
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java
index 880c3ba1..34fc4be5 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java
@@ -1,116 +1,199 @@
 package com.mopub.nativeads;
 
+import android.app.Activity;
 import android.database.DataSetObserver;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.BaseAdapter;
+import android.widget.AdapterView;
+import android.widget.AdapterView.OnItemClickListener;
+import android.widget.AdapterView.OnItemLongClickListener;
+import android.widget.AdapterView.OnItemSelectedListener;
+import android.widget.ArrayAdapter;
+import android.widget.ListView;
 
 import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
 import org.mockito.Mock;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
+import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.AdditionalMatchers.leq;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyInt;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
 @Config(manifest=Config.NONE)
 @RunWith(SdkTestRunner.class)
 public class MoPubAdAdapterTest {
+    private static final int AD_POSITION = 1;
 
     @Mock
-    public BaseAdapter mockOriginalAdapter;
+    private MoPubStreamAdPlacer mockStreamAdPlacer;
     @Mock
-    public MoPubStreamAdPlacer mockStreamAdPlacer;
+    private NativeAdData mockNativeAdData;
     @Mock
-    public Object mockItem;
+    private View mockAdView;
     @Mock
-    public NativeAdData mockAd;
+    private VisibilityTracker mockVisibilityTracker;
     @Mock
-    public View mockAdView;
+    private MoPubNativeAdLoadedListener mockAdLoadedListener;
     @Mock
-    public View mockItemView;
+    private DataSetObserver mockDataSetObserver;
     @Mock
-    public VisibilityTracker mockVisibilityTracker;
+    private RequestParameters mockRequestParameters;
     @Mock
-    public MoPubNativeAdLoadedListener mockAdLoadedListener;
+    private MoPubAdRenderer mockAdRenderer;
     @Mock
-    public DataSetObserver mockDataSetObserver;
+    private ListView mockListView;
+    @Mock
+    private OnItemClickListener mockOnItemClickListener;
+    @Mock
+    private OnItemLongClickListener mockOnItemLongClickListener;
+    @Mock
+    private OnItemSelectedListener mockOnItemSelectedListener;
+    @Mock
+    private View mockItemView;
 
-    public MoPubAdAdapter subject;
+    private long originalItemId = 0;
+    private boolean originalHasStableIds = false;
 
-    private static final int AD_POSITION = 4;
+    private int originalItemViewType = 0;
+    private int originalViewTypeCount = 1;
+    private boolean originalItemsAreEnabled = false;
+    private ArrayAdapter<String> originalAdapter;
+    private MoPubAdAdapter subject;
 
     @Before
     public void setup() {
+        // Set up original adapter with 2 items
+        Activity activity = Robolectric.buildActivity(Activity.class).create().get();
+        originalAdapter = new ArrayAdapter<String>(activity, android.R.layout.simple_list_item_1) {
+            @Override
+            public boolean isEnabled(final int position) {
+                return originalItemsAreEnabled;
+            }
 
-        // Mock setup code.
-        when(mockOriginalAdapter.getViewTypeCount()).thenReturn(1);
-        when(mockOriginalAdapter.getCount()).thenReturn(30);
-        when(mockOriginalAdapter.getItem(leq(29))).thenReturn(mockItem);
-        when(mockOriginalAdapter.getView(anyInt(), any(View.class), any(ViewGroup.class))).thenReturn(mockItemView);
+            @Override
+            public long getItemId(final int position) {
+                return originalItemId;
+            }
 
-        when(mockStreamAdPlacer.getAdData(AD_POSITION)).thenReturn(mockAd);
-        when(mockStreamAdPlacer.getAdView(eq(AD_POSITION), any(View.class), any(ViewGroup.class))).thenReturn(mockAdView);
+            @Override
+            public boolean hasStableIds() {
+                return originalHasStableIds;
+            }
 
-        // Mock some adjustment behavior for tests.
-        when(mockStreamAdPlacer.getOriginalPosition(eq(1))).thenReturn(1);
-        when(mockStreamAdPlacer.getOriginalPosition(eq(8))).thenReturn(7);
-        when(mockStreamAdPlacer.getAdjustedCount(eq(30))).thenReturn(31);
+            @Override
+            public int getItemViewType(final int position) {
+                return originalItemViewType;
+            }
 
-        subject = new MoPubAdAdapter(mockStreamAdPlacer, mockOriginalAdapter, mockVisibilityTracker);
-    }
+            @Override
+            public int getViewTypeCount() {
+                return originalViewTypeCount;
+            }
+        };
+        originalAdapter.add("ITEM 1");
+        originalAdapter.add("ITEM 2");
 
-    @Test
-    public void getItem_shouldCallAdPlacer() throws Exception {
-        assertThat(subject.getItem(AD_POSITION)).isEqualTo(mockAd);
-        verify(mockStreamAdPlacer, never()).getOriginalPosition(AD_POSITION);
-        verify(mockStreamAdPlacer).getAdData(AD_POSITION);
+        subject = new MoPubAdAdapter(mockStreamAdPlacer, originalAdapter, mockVisibilityTracker);
+
+        // Reset because the constructor interacts with the stream ad placer, and we don't want
+        // to worry about verifying those changes in tests.
+        reset(mockStreamAdPlacer);
+
+        // Mock some simple adjustment behavior for tests. This is creating an ad placer that
+        // emulates a content item followed by an ad item, then another content item.
+        when(mockStreamAdPlacer.getAdData(AD_POSITION)).thenReturn(mockNativeAdData);
+        when(mockStreamAdPlacer.getAdView(eq(AD_POSITION), any(View.class), any(ViewGroup.class))).thenReturn(mockAdView);
+        when(mockStreamAdPlacer.isAd(anyInt())).thenAnswer(new Answer<Boolean>() {
+            @Override
+            public Boolean answer(final InvocationOnMock invocation) throws Throwable {
+                int position = (Integer)invocation.getArguments()[0];
+                return position == AD_POSITION;
+            }
+        });
+        when(mockStreamAdPlacer.getOriginalPosition(anyInt())).thenAnswer(new Answer<Integer>() {
+            @Override
+            public Integer answer(final InvocationOnMock invocation) throws Throwable {
+                int originalPosition = (Integer)invocation.getArguments()[0];
+                return originalPosition < AD_POSITION ? originalPosition : originalPosition - 1;
+            }
+        });
+        when(mockStreamAdPlacer.getAdViewType(anyInt())).thenAnswer(new Answer<Integer>() {
+            @Override
+            public Integer answer(final InvocationOnMock invocation) throws Throwable {
+                int originalPosition = (Integer)invocation.getArguments()[0];
+                return originalPosition == AD_POSITION ? 1 : MoPubStreamAdPlacer.CONTENT_VIEW_TYPE;
+            }
+        });
+        when(mockStreamAdPlacer.getAdjustedPosition(anyInt())).thenAnswer(new Answer<Integer>() {
+            @Override
+            public Integer answer(final InvocationOnMock invocation) throws Throwable {
+                int originalPosition = (Integer)invocation.getArguments()[0];
+                return originalPosition < AD_POSITION ? originalPosition : originalPosition + 1;
+            }
+        });
+        when(mockStreamAdPlacer.getAdjustedCount(anyInt())).thenAnswer(new Answer<Integer>() {
+            @Override
+            public Integer answer(final InvocationOnMock invocation) throws Throwable {
+                int originalCount = (Integer)invocation.getArguments()[0];
+                return originalCount < AD_POSITION ? originalCount : originalCount + 1;
+            }
+        });
     }
 
     @Test
-    public void getItem_shouldCallOriginalAdapter() throws Exception {
-        assertThat(subject.getItem(1)).isEqualTo(mockItem);
-        verify(mockStreamAdPlacer).getOriginalPosition(1);
-        verify(mockOriginalAdapter).getItem(1);
+    public void originalAdapterChange_shouldNotifyDataSetChanged() {
+        subject.registerDataSetObserver(mockDataSetObserver);
 
-        assertThat(subject.getItem(8)).isEqualTo(mockItem);
-        verify(mockStreamAdPlacer).getOriginalPosition(8);
-        verify(mockOriginalAdapter).getItem(7);
+        originalAdapter.notifyDataSetChanged();
+
+        verify(mockDataSetObserver).onChanged();
     }
 
     @Test
-    public void getCount_shouldCallAdPlacer() throws Exception {
-        assertThat(subject.getCount()).isEqualTo(31);
-        verify(mockStreamAdPlacer).getAdjustedCount(30);
+    public void originalAdapterInvalidated_shouldNotifyDataSetInvalidated() {
+        subject.registerDataSetObserver(mockDataSetObserver);
+
+        originalAdapter.notifyDataSetInvalidated();
+
+        verify(mockDataSetObserver).onInvalidated();
     }
 
     @Test
-    public void getItemIdForAd_shouldBeNegative() throws Exception {
-        assertThat(subject.getItemId(AD_POSITION)).isLessThan(0);
+    public void registerAdRenderer_shouldCallRegisterAdRendererOnAdPlacer() {
+        subject.registerAdRenderer(mockAdRenderer);
+
+        verify(mockStreamAdPlacer).registerAdRenderer(mockAdRenderer);
     }
-    
+
     @Test
-    public void destroy_shouldDestroyStreamAdPlacer_shouldDestroyVisibilityTracker() {
-        subject.destroy();
-        verify(mockStreamAdPlacer).destroy();
-        verify(mockVisibilityTracker).destroy();
+    public void registerAdRenderer_withNull_shouldNotCallAdPlacer() {
+        subject.registerAdRenderer(null);
+
+        verify(mockStreamAdPlacer, never()).registerAdRenderer(any(MoPubAdRenderer.class));
     }
 
+
     @Test
     public void setAdLoadedListener_handleAdLoaded_shouldCallCallback_shouldCallObserver() {
         subject.setAdLoadedListener(mockAdLoadedListener);
         subject.registerDataSetObserver(mockDataSetObserver);
 
         subject.handleAdLoaded(8);
+
         verify(mockAdLoadedListener).onAdLoaded(8);
         verify(mockDataSetObserver).onChanged();
     }
@@ -121,25 +204,325 @@ public void setAdLoadedListener_handleAdRemoved_shouldCallCallback_shouldCallObs
         subject.registerDataSetObserver(mockDataSetObserver);
 
         subject.handleAdRemoved(10);
+
         verify(mockAdLoadedListener).onAdRemoved(10);
         verify(mockDataSetObserver).onChanged();
     }
 
     @Test
-    public void insertItem_shouldCallInsertItemOnStreamAdPlacer() throws Exception {
+    public void loadAds_shouldCallLoadAdsOnAdPlacer() {
+        subject.loadAds("AD_UNIT_ID");
+
+        verify(mockStreamAdPlacer).loadAds("AD_UNIT_ID");
+
+        subject.loadAds("AD_UNIT_ID", mockRequestParameters);
+
+        verify(mockStreamAdPlacer).loadAds("AD_UNIT_ID", mockRequestParameters);
+    }
+
+    @Test
+    public void isAd_shouldCallIsAdOnAdPlacer() {
+        boolean isAd = subject.isAd(AD_POSITION);
+
+        assertThat(isAd).isTrue();
+
+        isAd = subject.isAd(AD_POSITION + 1);
+
+        assertThat(isAd).isFalse();
+
+        verify(mockStreamAdPlacer, times(2)).isAd(anyInt());
+    }
+
+    @Test
+    public void clearAds_shouldCallClearAdsOnAdPlacer() {
+        subject.clearAds();
+
+        verify(mockStreamAdPlacer).clearAds();
+    }
+
+    @Test
+    public void destroy_shouldDestroyStreamAdPlacer_shouldDestroyVisibilityTracker() {
+        subject.destroy();
+
+        verify(mockStreamAdPlacer).destroy();
+        verify(mockVisibilityTracker).destroy();
+    }
+
+    @Test
+    public void isEnabled_adPosition_shouldReturnTrue() {
+        boolean isEnabled = subject.isEnabled(AD_POSITION);
+
+        assertThat(isEnabled).isTrue();
+    }
+
+    @Test
+    public void isEnabled_withNonAdPosition_shouldUseOriginalAdapter() {
+        originalItemsAreEnabled = false;
+        boolean isEnabled = subject.isEnabled(AD_POSITION + 1);
+
+        assertThat(isEnabled).isFalse();
+
+        originalItemsAreEnabled = true;
+        isEnabled = subject.isEnabled(AD_POSITION + 1);
+
+        assertThat(isEnabled).isTrue();
+    }
+
+    @Test
+    public void getItem_withAdPosition_shouldReturnAd_shouldGetAdDataOnCallAdPlacer() {
+        Object actualItem = subject.getItem(AD_POSITION);
+
+        assertThat(actualItem).isEqualTo(mockNativeAdData);
+
+        verify(mockStreamAdPlacer).getAdData(AD_POSITION);
+    }
+
+    @Test
+    public void getItem_withNonAdPosition_shouldCallGetOriginalPositionOnAdPlacer() {
+        Object actualItem = subject.getItem(AD_POSITION + 1);
+
+        assertThat(actualItem).isNotEqualTo(mockNativeAdData);
+
+        verify(mockStreamAdPlacer).getOriginalPosition(AD_POSITION + 1);
+    }
+
+    @Test
+    public void getCount_shouldCallGetAdjustedCountOnAdPlacer() {
+        int actualCount = subject.getCount();
+
+        assertThat(actualCount).isEqualTo(3);
+
+        verify(mockStreamAdPlacer).getAdjustedCount(anyInt());
+    }
+
+    @Test
+    public void getItemId_withAdPosition_shouldBeNegative() {
+        long itemId = subject.getItemId(AD_POSITION);
+
+        assertThat(itemId).isLessThan(0);
+    }
+
+    @Test
+    public void getItemId_withNonAdPosition_shouldUseOriginalAdapterId() {
+        originalItemId = 42;
+        long itemId = subject.getItemId(AD_POSITION + 1);
+
+        assertThat(itemId).isEqualTo(42);
+    }
+
+    @Test
+    public void hasStableIds_shouldUseOriginalAdapterValue() {
+        originalHasStableIds = false;
+        boolean hasStableIds = subject.hasStableIds();
+
+        assertThat(hasStableIds).isFalse();
+
+        originalHasStableIds = true;
+        hasStableIds = subject.hasStableIds();
+
+        assertThat(hasStableIds).isTrue();
+    }
+
+    @Test
+    public void getView_withAdPosition_shouldReturnAdView_shouldTrackVisibility() {
+        View view = subject.getView(AD_POSITION, null, null);
+
+        assertThat(view).isEqualTo(mockAdView);
+
+        verify(mockVisibilityTracker).addView(eq(mockAdView), anyInt());
+    }
+
+    @Test
+    public void getView_withNonAdPosition_shouldOriginalAdapterView_shouldTrackVisibility() {
+        View view = subject.getView(AD_POSITION + 1, null, null);
+
+        assertThat(view).isNotEqualTo(mockAdView);
+
+        verify(mockVisibilityTracker).addView(any(View.class), anyInt());
+    }
+
+    @Test
+    public void getItemViewType_withAdPosition_shouldReturnOneGreaterThanViewType() {
+        originalItemViewType = 0;
+
+        int itemViewType = subject.getItemViewType(AD_POSITION);
+        assertThat(itemViewType).isEqualTo(originalItemViewType + 1);
+    }
+
+    @Test
+    public void getItemViewType_withNonAdPosition_shouldUseOriginalAdapterId() {
+        originalItemViewType = 0;
+
+        int itemViewType = subject.getItemViewType(AD_POSITION + 1);
+        assertThat(itemViewType).isEqualTo(originalItemViewType);
+    }
+
+    @Test
+    public void getViewTypeCount_shouldReturnOriginalViewTypeCountPlusOne() {
+        originalViewTypeCount = 1;
+
+        int viewTypeCount = subject.getViewTypeCount();
+        assertThat(viewTypeCount).isEqualTo(1);
+
+        originalViewTypeCount = 2;
+
+        viewTypeCount = subject.getViewTypeCount();
+        assertThat(viewTypeCount).isEqualTo(2);
+    }
+
+    @Test
+    public void isEmpty_shouldUseOriginalAdapterValue() {
+        boolean isEmpty = subject.isEmpty();
+
+        assertThat(isEmpty).isFalse();
+
+        originalAdapter.clear();
+
+        isEmpty = subject.isEmpty();
+
+        assertThat(isEmpty).isTrue();
+    }
+
+    @Test
+    public void getOriginalPosition_shouldCallStreamAdPlacer() {
+        subject.getOriginalPosition(5);
+
+        verify(mockStreamAdPlacer).getOriginalPosition(5);
+    }
+
+    @Test
+    public void getAdjustedPosition_shouldCallStreamAdPlacer() {
+        subject.getAdjustedPosition(5);
+
+        verify(mockStreamAdPlacer).getAdjustedPosition(5);
+    }
+
+    @Test
+    public void insertItem_shouldCallInsertItemOnStreamAdPlacer() {
         subject.insertItem(5);
+
         verify(mockStreamAdPlacer).insertItem(5);
     }
 
     @Test
-    public void removeItem_shouldCallRemoveItemOnStreamAdPlacer() throws Exception {
+    public void removeItem_shouldCallRemoveItemOnStreamAdPlacer() {
         subject.removeItem(5);
+
         verify(mockStreamAdPlacer).removeItem(5);
     }
 
     @Test
-    public void getOriginalPosition_shouldCallGetOriginalPositionOnStreamAdPlacer() throws Exception {
-        subject.getOriginalPosition(5);
-        verify(mockStreamAdPlacer).getOriginalPosition(5);
+    public void setOnItemClickListener_withAdPosition_shouldNotCallListener() {
+        subject.setOnClickListener(mockListView, mockOnItemClickListener);
+
+        ArgumentCaptor<OnItemClickListener> listenerCaptor =
+                ArgumentCaptor.forClass(OnItemClickListener.class);
+        verify(mockListView).setOnItemClickListener(listenerCaptor.capture());
+
+        OnItemClickListener listener = listenerCaptor.getValue();
+        listener.onItemClick(mockListView, mockItemView, AD_POSITION, 0);
+
+        verify(mockOnItemClickListener, never()).onItemClick(
+                any(AdapterView.class), any(View.class), anyInt(), anyInt());
+    }
+
+    @Test
+    public void setOnItemClickListener_withNonAdPosition_shouldCallListener() {
+        subject.setOnClickListener(mockListView, mockOnItemClickListener);
+
+        ArgumentCaptor<OnItemClickListener> listenerCaptor =
+                ArgumentCaptor.forClass(OnItemClickListener.class);
+        verify(mockListView).setOnItemClickListener(listenerCaptor.capture());
+
+        OnItemClickListener listener = listenerCaptor.getValue();
+        listener.onItemClick(mockListView, mockItemView, AD_POSITION + 1, 0);
+
+        verify(mockOnItemClickListener).onItemClick(
+                mockListView, mockItemView, AD_POSITION, 0);
+    }
+
+    @Test
+    public void setOnItemLongClickListener_withAdPosition_shouldNotCallListener() {
+        subject.setOnItemLongClickListener(mockListView, mockOnItemLongClickListener);
+
+        ArgumentCaptor<OnItemLongClickListener> listenerCaptor =
+                ArgumentCaptor.forClass(OnItemLongClickListener.class);
+        verify(mockListView).setOnItemLongClickListener(listenerCaptor.capture());
+
+        OnItemLongClickListener listener = listenerCaptor.getValue();
+        listener.onItemLongClick(mockListView, mockItemView, AD_POSITION, 0);
+
+        verify(mockOnItemLongClickListener, never()).onItemLongClick(
+                any(AdapterView.class), any(View.class), anyInt(), anyInt());
+    }
+
+    @Test
+    public void setOnItemLongClickListener_withNonAdPosition_shouldCallListener() {
+        subject.setOnItemLongClickListener(mockListView, mockOnItemLongClickListener);
+
+        ArgumentCaptor<OnItemLongClickListener> listenerCaptor =
+                ArgumentCaptor.forClass(OnItemLongClickListener.class);
+        verify(mockListView).setOnItemLongClickListener(listenerCaptor.capture());
+
+        OnItemLongClickListener listener = listenerCaptor.getValue();
+        listener.onItemLongClick(mockListView, mockItemView, AD_POSITION + 1, 0);
+
+        verify(mockOnItemLongClickListener).onItemLongClick(
+                mockListView, mockItemView, AD_POSITION, 0);
+    }
+
+    @Test
+    public void setOnItemSelectedListener_withAdPosition_shouldNotCallListener() {
+        subject.setOnItemSelectedListener(mockListView, mockOnItemSelectedListener);
+
+        ArgumentCaptor<OnItemSelectedListener> listenerCaptor =
+                ArgumentCaptor.forClass(OnItemSelectedListener.class);
+        verify(mockListView).setOnItemSelectedListener(listenerCaptor.capture());
+
+        OnItemSelectedListener listener = listenerCaptor.getValue();
+        listener.onItemSelected(mockListView, mockItemView, AD_POSITION, 0);
+
+        verify(mockOnItemSelectedListener, never()).onItemSelected(
+                any(AdapterView.class), any(View.class), anyInt(), anyInt());
+    }
+
+    @Test
+    public void setOnItemSelectedListener_withNonAdPosition_shouldCallListener() {
+        subject.setOnItemSelectedListener(mockListView, mockOnItemSelectedListener);
+
+        ArgumentCaptor<OnItemSelectedListener> listenerCaptor =
+                ArgumentCaptor.forClass(OnItemSelectedListener.class);
+        verify(mockListView).setOnItemSelectedListener(listenerCaptor.capture());
+
+        OnItemSelectedListener listener = listenerCaptor.getValue();
+        listener.onItemSelected(mockListView, mockItemView, AD_POSITION + 1, 0);
+
+        verify(mockOnItemSelectedListener).onItemSelected(
+                mockListView, mockItemView, AD_POSITION, 0);
+    }
+
+    @Test
+    public void setSelection_shouldCallSetSelectionOnListView() {
+        subject.setSelection(mockListView, AD_POSITION);
+
+        // Since the original position is the ad position, the adjusted position is 1 higher
+        verify(mockListView).setSelection(AD_POSITION + 1);
+    }
+
+    @Test
+    public void smoothScrollToPosition_shouldCallSmooethScrollToPositionOnListView() {
+        subject.smoothScrollToPosition(mockListView, AD_POSITION);
+
+        // Since the original position is the ad position, the adjusted position is 1 higher
+        verify(mockListView).smoothScrollToPosition(AD_POSITION + 1);
+    }
+
+    @Test
+    public void refreshAds_shouldLoadAdsOnAdPlacer() {
+        when(mockListView.getAdapter()).thenReturn(subject);
+
+        subject.refreshAds(mockListView, "AD_UNIT_ID", mockRequestParameters);
+
+        verify(mockStreamAdPlacer).loadAds("AD_UNIT_ID", mockRequestParameters);
     }
-}
\ No newline at end of file
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeAdRendererTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeAdRendererTest.java
index 0bcebf6d..7a282468 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeAdRendererTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeAdRendererTest.java
@@ -54,7 +54,7 @@ public void setUp() throws Exception {
         mNativeAd.setClickDestinationUrl("destinationUrl");
 
         final TestHttpResponseWithHeaders testHttpResponseWithHeaders = new TestHttpResponseWithHeaders(200, "");
-        testHttpResponseWithHeaders.addHeader(ResponseHeader.CLICKTHROUGH_URL.getKey(), "clickTrackerUrl");
+        testHttpResponseWithHeaders.addHeader(ResponseHeader.CLICK_TRACKING_URL.getKey(), "clickTrackerUrl");
         final DownloadResponse downloadResponse = new DownloadResponse(testHttpResponseWithHeaders);
         nativeResponse = new NativeResponse(context, downloadResponse, "test ID", mNativeAd, mock(MoPubNativeListener.class));
 
@@ -124,8 +124,7 @@ public void renderAdView_shouldReturnPopulatedView() {
         // not testing images due to testing complexity
     }
 
-    @Test
-    public void renderAdView_withFailedViewBinder_shouldReturnFast() {
+    public void renderAdView_withFailedViewBinder_shouldReturnEmptyViews() {
         viewBinder = new ViewBinder.Builder(relativeLayout.getId())
                 .titleId(titleView.getId())
                 .textId(badView.getId())
@@ -137,30 +136,31 @@ public void renderAdView_withFailedViewBinder_shouldReturnFast() {
         subject = new MoPubNativeAdRenderer(viewBinder);
         subject.renderAdView(relativeLayout, nativeResponse);
 
-        assertThat(((TextView)relativeLayout.findViewById(titleView.getId())).getText()).isEqualTo("");
-        assertThat(((TextView)relativeLayout.findViewById(textView.getId())).getText()).isEqualTo(
-                "");
-        assertThat(((TextView)relativeLayout.findViewById(callToActionView.getId())).getText()).isEqualTo(
-                "");
+        assertThat(((TextView)relativeLayout.findViewById(titleView.getId())).getText())
+                .isEqualTo("");
+        assertThat(((TextView)relativeLayout.findViewById(textView.getId())).getText())
+                .isEqualTo("");
+        assertThat(((TextView)relativeLayout.findViewById(callToActionView.getId())).getText())
+                .isEqualTo("");
     }
 
     @Test
-    public void getOrCreateNativeViewHolder_withNoViewHolder_shouldCreateNativeViewHolder() {
-        final NativeViewHolder viewHolder =
-                subject.getOrCreateNativeViewHolder(relativeLayout, viewBinder);
+    public void renderAdView_withNoViewHolder_shouldCreateNativeViewHolder() {
+        subject.renderAdView(relativeLayout, nativeResponse);
 
-        final NativeViewHolder expectedViewHolder =
-                NativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
+        NativeViewHolder expectedViewHolder = NativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
+        NativeViewHolder viewHolder = subject.mViewHolderMap.get(relativeLayout);
         compareNativeViewHolders(expectedViewHolder, viewHolder);
     }
 
     @Test
     public void getOrCreateNativeViewHolder_withViewHolder_shouldNotReCreateNativeViewHolder() {
-        final NativeViewHolder viewHolder =
-                subject.getOrCreateNativeViewHolder(relativeLayout, viewBinder);
+        subject.renderAdView(relativeLayout, nativeResponse);
+        NativeViewHolder expectedViewHolder = subject.mViewHolderMap.get(relativeLayout);
+        subject.renderAdView(relativeLayout, nativeResponse);
 
-        assertThat(subject.getOrCreateNativeViewHolder(relativeLayout, viewBinder))
-                .isEqualTo(viewHolder);
+        NativeViewHolder viewHolder = subject.mViewHolderMap.get(relativeLayout);
+        assertThat(viewHolder).isEqualTo(expectedViewHolder);
     }
 
     static private void compareNativeViewHolders(final NativeViewHolder actualViewHolder,
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
index ad2d8969..b015d460 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
@@ -1,6 +1,7 @@
 package com.mopub.nativeads;
 
 import android.app.Activity;
+
 import com.mopub.common.DownloadTask;
 import com.mopub.common.GpsHelper;
 import com.mopub.common.GpsHelperTest;
@@ -10,6 +11,7 @@
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
 import com.mopub.nativeads.MoPubNative.MoPubNativeEventListener;
 import com.mopub.nativeads.MoPubNative.MoPubNativeNetworkListener;
+
 import org.apache.http.client.methods.HttpGet;
 import org.junit.After;
 import org.junit.Before;
@@ -22,8 +24,8 @@
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 
-import java.util.*;
-import java.util.concurrent.*;
+import java.util.List;
+import java.util.concurrent.Semaphore;
 
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
 import static android.Manifest.permission.INTERNET;
@@ -182,7 +184,7 @@ public void setNativeEventListener_shouldSetListener() {
         assertThat(subject.getMoPubNativeEventListener()).isSameAs(EMPTY_EVENT_LISTENER);
     }
 
-    @Ignore("pending")
+    @Ignore("Flaky thread scheduling is preventing test stability.")
     @Test
     public void loadNativeAd_shouldQueueAsyncDownloadTask() {
         Robolectric.getUiThreadScheduler().pause();
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStreamAdPlacerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStreamAdPlacerTest.java
index 06f09512..ac6f2be1 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStreamAdPlacerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStreamAdPlacerTest.java
@@ -7,11 +7,13 @@
 
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
+import com.mopub.nativeads.PositioningSource.PositioningListener;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Answers;
+import org.mockito.ArgumentCaptor;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
 
@@ -22,6 +24,7 @@
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyInt;
+import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.times;
@@ -84,6 +87,9 @@ public void isAd_loadAds_withoutLoadingPositions_hasNoAds() {
     @Test
     public void isAd_loadAds_thenLoadPositions_hasAds() {
         when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        subject.registerAdRenderer(mockAdRenderer);
+        subject.loadAds("test-ad-unit-id");
+
         subject.handleAdsAvailable();
         subject.handlePositioningLoad(positioning);
         subject.setItemCount(4);
@@ -93,6 +99,9 @@ public void isAd_loadAds_thenLoadPositions_hasAds() {
     @Test
     public void isAd_loadPositions_thenLoadAds_hasAds() {
         when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        subject.registerAdRenderer(mockAdRenderer);
+        subject.loadAds("test-ad-unit-id");
+
         subject.handlePositioningLoad(positioning);
         subject.handleAdsAvailable();
         subject.setItemCount(4);
@@ -108,6 +117,8 @@ public void getOriginalPosition_adjustsPositions() {
         assertThat(subject.getOriginalPosition(4)).isEqualTo(4);
 
         when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        subject.registerAdRenderer(mockAdRenderer);
+        subject.loadAds("test-ad-unit-id");
         subject.handlePositioningLoad(positioning);
         subject.handleAdsAvailable();
         subject.setItemCount(4);
@@ -133,6 +144,8 @@ public void getAdjustedPosition_adjustsPositions() {
         assertThat(subject.getAdjustedPosition(4)).isEqualTo(4);
 
         when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        subject.registerAdRenderer(mockAdRenderer);
+        subject.loadAds("test-ad-unit-id");
         subject.handlePositioningLoad(positioning);
         subject.handleAdsAvailable();
         subject.setItemCount(4);
@@ -158,6 +171,8 @@ public void getOriginalCount_adjustsPositions() {
         assertThat(subject.getOriginalCount(4)).isEqualTo(4);
 
         when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        subject.registerAdRenderer(mockAdRenderer);
+        subject.loadAds("test-ad-unit-id");
         subject.handlePositioningLoad(positioning);
         subject.handleAdsAvailable();
         subject.setItemCount(4);
@@ -183,6 +198,8 @@ public void getAdjustedCount_adjustsPositions() {
         assertThat(subject.getAdjustedCount(4)).isEqualTo(4);
 
         when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        subject.registerAdRenderer(mockAdRenderer);
+        subject.loadAds("test-ad-unit-id");
         subject.handlePositioningLoad(positioning);
         subject.handleAdsAvailable();
         subject.setItemCount(4);
@@ -202,6 +219,8 @@ public void getAdjustedCount_adjustsPositions() {
     @Test
     public void placeAds_shouldCallListener() {
         when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        subject.registerAdRenderer(mockAdRenderer);
+        subject.loadAds("test-ad-unit-id");
         subject.handlePositioningLoad(positioning);
         subject.handleAdsAvailable();
         subject.setItemCount(4);
@@ -219,6 +238,8 @@ public void placeAds_shouldCallListener() {
     @Test
     public void placeAdsInRange_shouldPlaceAfter() {
         when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        subject.registerAdRenderer(mockAdRenderer);
+        subject.loadAds("test-ad-unit-id");
         subject.handlePositioningLoad(positioning);
         subject.handleAdsAvailable();
 
@@ -239,6 +260,8 @@ public void placeAdsInRange_shouldPlaceAfter() {
     @Test
     public void placeAdsInRange_shouldCallListener() {
         when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        subject.registerAdRenderer(mockAdRenderer);
+        subject.loadAds("test-ad-unit-id");
         subject.handlePositioningLoad(positioning);
         subject.handleAdsAvailable();
 
@@ -259,6 +282,8 @@ public void placeAdsInRange_shouldCallListener() {
     @Test
     public void placeAdsInRange_aboveItemCount_shouldNotInsert() {
         when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        subject.registerAdRenderer(mockAdRenderer);
+        subject.loadAds("test-ad-unit-id");
         subject.handlePositioningLoad(positioning);
         subject.handleAdsAvailable();
 
@@ -278,12 +303,14 @@ public void getAdView_withNoAds_returnsNull() {
     @Test
     public void loadAds_shouldClearAds_afterFirstAdLoads() {
         when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        subject.registerAdRenderer(mockAdRenderer);
+        subject.loadAds("test-ad-unit-id");
         subject.handlePositioningLoad(positioning);
         subject.handleAdsAvailable();
         subject.setItemCount(2);
         subject.placeAdsInRange(0, 1);
 
-        subject.loadAds("test_ad-unit-id");
+        subject.loadAds("test-ad-unit-id");
 
         // Ad should still exist until a new ad is available
         checkAdPositions(1);
@@ -297,12 +324,27 @@ public void loadAds_shouldClearAds_afterFirstAdLoads() {
         checkAdPositions(1);
     }
 
+    @Test
+    public void loadAds_withFailingPositioningSource_shouldNotLoadAds() {
+        ArgumentCaptor<PositioningListener> listenerCaptor =
+                ArgumentCaptor.forClass(PositioningListener.class);
+
+        subject.registerAdRenderer(mockAdRenderer);
+        subject.loadAds("test-ad-unit-id");
+        verify(mockPositioningSource).loadPositions(
+                eq("test-ad-unit-id"), listenerCaptor.capture());
+        listenerCaptor.getValue().onFailed();
+        verify(mockAdLoadedListener, never()).onAdLoaded(anyInt());
+    }
+
     @Test
     public void destroy_shouldClearAdSource_shouldDestroyImpressionTracker_shouldDestroyResponse() {
         when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
 
         subject = new MoPubStreamAdPlacer(context,
                 mockAdSource, mockImpressionTracker, mockPositioningSource);
+        subject.registerAdRenderer(mockAdRenderer);
+        subject.loadAds("test-ad-unit-id");
         subject.handlePositioningLoad(positioning);
         subject.handleAdsAvailable();
         subject.setItemCount(2);  // Places 1 ad
@@ -320,6 +362,8 @@ public void getAdView_withNullConvertView_callsRenderer_addsToImpressionTracker(
         when(mockAdRenderer.createAdView(any(Context.class), any(ViewGroup.class)))
                 .thenReturn(view);
         when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        subject.registerAdRenderer(mockAdRenderer);
+        subject.loadAds("test-ad-unit-id");
         subject.handlePositioningLoad(positioning);
         subject.handleAdsAvailable();
         subject.setItemCount(100);
@@ -334,6 +378,8 @@ public void getAdView_withNullConvertView_callsRenderer_addsToImpressionTracker(
     public void getAdView_withConvertView_callsRenderer_addsToImpressionTracker() {
         View convertView = new View(context);
         when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        subject.registerAdRenderer(mockAdRenderer);
+        subject.loadAds("test-ad-unit-id");
         subject.handlePositioningLoad(positioning);
         subject.handleAdsAvailable();
         subject.setItemCount(4);
@@ -349,6 +395,8 @@ public void getAdView_shouldRemoveViewFromImpressionTracker_shouldClearPreviousN
         NativeResponse mockNativeResponse = mock(NativeResponse.class);
         View mockView = mock(View.class);
         when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse, mockNativeResponse, stubNativeResponse);
+        subject.registerAdRenderer(mockAdRenderer);
+        subject.loadAds("test-ad-unit-id");
         subject.handlePositioningLoad(positioning);
         subject.handleAdsAvailable();
         subject.setItemCount(100);
@@ -371,6 +419,8 @@ public void getAdView_shouldRemoveViewFromImpressionTracker_shouldClearPreviousN
     public void getAdView_withNetworkImpressionTracker_shouldNotAddViewToImpressionTracker_shouldPrepareNativeResponse() throws Exception {
         View mockView = mock(View.class);
         when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        subject.registerAdRenderer(mockAdRenderer);
+        subject.loadAds("test-ad-unit-id");
         subject.handlePositioningLoad(positioning);
         subject.handleAdsAvailable();
         subject.setItemCount(100);
@@ -386,6 +436,8 @@ public void getAdView_withNetworkImpressionTracker_shouldNotAddViewToImpressionT
     public void getAdView_withoutNetworkImpressionTracker_shouldAddViewToImpressionTracker_shouldPrepareNativeResponse() throws Exception {
         View mockView = mock(View.class);
         when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        subject.registerAdRenderer(mockAdRenderer);
+        subject.loadAds("test-ad-unit-id");
         subject.handlePositioningLoad(positioning);
         subject.handleAdsAvailable();
         subject.setItemCount(100);
@@ -403,6 +455,8 @@ public void destroy_shouldClearAdSource_shouldDestroyImpressionTracker_shouldRes
 
         subject = new MoPubStreamAdPlacer(context,
                 mockAdSource, mockImpressionTracker, mockPositioningSource);
+        subject.registerAdRenderer(mockAdRenderer);
+        subject.loadAds("test-ad-unit-id");
         subject.handlePositioningLoad(positioning);
         subject.handleAdsAvailable();
         subject.setItemCount(2);  // Places 1 ad
@@ -417,6 +471,8 @@ public void destroy_shouldClearAdSource_shouldDestroyImpressionTracker_shouldRes
     @Test
     public void modifyClientPositioning_afterConstructingAdPlacer_shouldNotModifyAdPositions() {
         when(mockAdSource.dequeueAd()).thenReturn(stubNativeResponse);
+        subject.registerAdRenderer(mockAdRenderer);
+        subject.loadAds("test-ad-unit-id");
         subject.handlePositioningLoad(positioning);
         positioning.enableRepeatingPositions(5);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
index 4d4b3e9f..d9b1ad7c 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
@@ -77,7 +77,7 @@ public void getAdView_shouldReturnPopulatedView() throws Exception {
         when(mockNativeResponse1.getText()).thenReturn("test text");
         when(mockNativeResponse1.getCallToAction()).thenReturn("test call to action");
 
-        View view = NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse1, viewBinder, null);
+        View view = NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse1, viewBinder);
 
         assertThat(((TextView)view.findViewById(titleView.getId())).getText()).isEqualTo("test title");
         assertThat(((TextView)view.findViewById(textView.getId())).getText()).isEqualTo("test text");
@@ -86,26 +86,10 @@ public void getAdView_shouldReturnPopulatedView() throws Exception {
         // not testing images due to testing complexity
     }
 
-    @Test
-    public void getAdView_withNullViewBinder_shouldReturnEmptyView() throws Exception {
-        View view = NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse1, null, null);
-
-        assertThat(view).isNotNull();
-        assertThat(view).isNotEqualTo(relativeLayout);
-    }
-
-    @Test
-    public void getAdView_withNullNativeResponse_shouldReturnGONEConvertView() throws Exception {
-        View view = NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, null, viewBinder, null);
-
-        assertThat(view).isEqualTo(relativeLayout);
-        assertThat(view.getVisibility()).isEqualTo(View.GONE);
-    }
-
     @Test
     public void getAdView_withDestroyedNativeResponse_shouldReturnGONEConvertView() throws Exception {
         when(mockNativeResponse1.isDestroyed()).thenReturn(true);
-        View view = NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse1, viewBinder, null);
+        View view = NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse1, viewBinder);
 
         assertThat(view).isEqualTo(relativeLayout);
         assertThat(view.getVisibility()).isEqualTo(View.GONE);
@@ -115,16 +99,16 @@ public void getAdView_withDestroyedNativeResponse_shouldReturnGONEConvertView()
     public void getAdView_shouldRemoveViewFromImpressionTracker_shouldClearPreviousNativeResponse() throws Exception {
         NativeAdViewHelper.sImpressionTrackerMap.put(context, mockImpressionTracker);
 
-        NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse1, viewBinder, null);
+        NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse1, viewBinder);
         verify(mockImpressionTracker).removeView(relativeLayout);
 
         // Second call should clear the first NativeResponse
-        NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse2, viewBinder, null);
+        NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse2, viewBinder);
         verify(mockImpressionTracker, times(2)).removeView(relativeLayout);
         verify(mockNativeResponse1).clear(relativeLayout);
 
         // Third call should clear the second NativeResponse
-        NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse1, viewBinder, null);
+        NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse1, viewBinder);
         verify(mockImpressionTracker, times(3)).removeView(relativeLayout);
         verify(mockNativeResponse2).clear(relativeLayout);
     }
@@ -134,7 +118,7 @@ public void getAdView_withNetworkImpressionTracker_shouldNotAddViewToImpressionT
         NativeAdViewHelper.sImpressionTrackerMap.put(context, mockImpressionTracker);
         when(mockNativeResponse1.isOverridingImpressionTracker()).thenReturn(true);
 
-        NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse1, viewBinder, null);
+        NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse1, viewBinder);
 
         verify(mockImpressionTracker, never()).addView(any(View.class), any(NativeResponse.class));
         verify(mockNativeResponse1).prepare(relativeLayout);
@@ -145,7 +129,7 @@ public void getAdView_withoutNetworkImpressionTracker_shouldAddViewToImpressionT
         NativeAdViewHelper.sImpressionTrackerMap.put(context, mockImpressionTracker);
         when(mockNativeResponse1.isOverridingImpressionTracker()).thenReturn(false);
 
-        NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse1, viewBinder, null);
+        NativeAdViewHelper.getAdView(relativeLayout, viewGroup, context, mockNativeResponse1, viewBinder);
 
         verify(mockImpressionTracker).addView(relativeLayout, mockNativeResponse1);
         verify(mockNativeResponse1).prepare(relativeLayout);
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java
index a1cef1c5..8f14e661 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java
@@ -1,6 +1,7 @@
 package com.mopub.nativeads;
 
 import android.app.Activity;
+import android.support.annotation.NonNull;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.Button;
@@ -56,7 +57,7 @@ public void recordImpression() {
             }
 
             @Override
-            public void handleClick(final View view) {
+            public void handleClick(@NonNull final View view) {
                 baseNativeAdIsClicked = true;
             }
         };
@@ -75,7 +76,7 @@ public void handleClick(final View view) {
 
         final TestHttpResponseWithHeaders testHttpResponseWithHeaders = new TestHttpResponseWithHeaders(200, "");
         testHttpResponseWithHeaders.addHeader(ResponseHeader.IMPRESSION_URL.getKey(), "moPubImpressionTrackerUrl");
-        testHttpResponseWithHeaders.addHeader(ResponseHeader.CLICKTHROUGH_URL.getKey(), "moPubClickTrackerUrl");
+        testHttpResponseWithHeaders.addHeader(ResponseHeader.CLICK_TRACKING_URL.getKey(), "moPubClickTrackerUrl");
         downloadResponse = new DownloadResponse(testHttpResponseWithHeaders);
 
         moPubNativeListener = mock(MoPubNative.MoPubNativeListener.class);
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
index 5d96c9b0..7d7f96bb 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
@@ -2,6 +2,8 @@
 
 import android.app.Activity;
 import android.content.Context;
+import android.location.Location;
+import android.location.LocationManager;
 import android.net.Uri;
 import android.telephony.TelephonyManager;
 import android.text.TextUtils;
@@ -13,7 +15,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowLocationManager;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -22,6 +26,7 @@
 
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.robolectric.Robolectric.application;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
@@ -127,13 +132,105 @@ public void generateNativeAdUrl_doesNotNeedReadPhoneState_shouldContainOperatorN
         assertThat(getNetworkOperatorNameFromRequestUrl(requestString)).isEqualTo("TEST_CARRIER");
     }
 
+    @Test
+    public void generateAdUrl_whenLocationServiceGpsProviderHasMostRecentLocation_shouldUseLocationServiceValue() {
+        Location locationFromDeveloper = new Location("");
+        locationFromDeveloper.setLatitude(42);
+        locationFromDeveloper.setLongitude(-42);
+        locationFromDeveloper.setAccuracy(3.5f);
+        locationFromDeveloper.setTime(1000);
+
+        // Mock out the LocationManager's last known location to be more recent than the
+        // developer-supplied location.
+        ShadowLocationManager shadowLocationManager = Robolectric.shadowOf(
+                (LocationManager) application.getSystemService(Context.LOCATION_SERVICE));
+        Location locationFromSdk = new Location("");
+        locationFromSdk.setLatitude(37);
+        locationFromSdk.setLongitude(-122);
+        locationFromSdk.setAccuracy(5.0f);
+        locationFromSdk.setTime(2000);
+        shadowLocationManager.setLastKnownLocation(LocationManager.GPS_PROVIDER, locationFromSdk);
+
+        RequestParameters requestParameters = new RequestParameters.Builder()
+                .location(locationFromDeveloper)
+                .build();
+        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
+        String adUrl = subject.withRequest(requestParameters)
+                .generateUrlString("ads.mopub.com");
+        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isEqualTo("37.0,-122.0");
+        assertThat(getParameterFromRequestUrl(adUrl, "lla")).isEqualTo("5");
+        assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEqualTo("1");
+    }
+
+    @Test
+    public void generateAdUrl_whenDeveloperSuppliesMoreRecentLocationThanLocationService_shouldUseDeveloperSuppliedLocation() {
+        Location locationFromDeveloper = new Location("");
+        locationFromDeveloper.setLatitude(42);
+        locationFromDeveloper.setLongitude(-42);
+        locationFromDeveloper.setAccuracy(3.5f);
+        locationFromDeveloper.setTime(1000);
+
+        ShadowLocationManager shadowLocationManager = Robolectric.shadowOf(
+                (LocationManager) application.getSystemService(Context.LOCATION_SERVICE));
+
+        // Mock out the LocationManager's last known location to be older than the
+        // developer-supplied location.
+        Location olderLocation = new Location("");
+        olderLocation.setLatitude(40);
+        olderLocation.setLongitude(-105);
+        olderLocation.setAccuracy(8.0f);
+        olderLocation.setTime(500);
+        shadowLocationManager.setLastKnownLocation(LocationManager.GPS_PROVIDER, olderLocation);
+
+        RequestParameters requestParameters = new RequestParameters.Builder()
+                .location(locationFromDeveloper)
+                .build();
+        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
+        String adUrl = subject.withRequest(requestParameters)
+                .generateUrlString("ads.mopub.com");
+        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isEqualTo("42.0,-42.0");
+        assertThat(getParameterFromRequestUrl(adUrl, "lla")).isEqualTo("3");
+        assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEmpty();
+    }
+
+    @Test
+    public void generateAdUrl_whenLocationServiceNetworkProviderHasMostRecentLocation_shouldUseLocationServiceValue() {
+        Location locationFromDeveloper = new Location("");
+        locationFromDeveloper.setLatitude(42);
+        locationFromDeveloper.setLongitude(-42);
+        locationFromDeveloper.setAccuracy(3.5f);
+        locationFromDeveloper.setTime(1000);
+
+        // Mock out the LocationManager's last known location to be more recent than the
+        // developer-supplied location.
+        ShadowLocationManager shadowLocationManager = Robolectric.shadowOf(
+                (LocationManager) application.getSystemService(Context.LOCATION_SERVICE));
+        Location locationFromSdk = new Location("");
+        locationFromSdk.setLatitude(38);
+        locationFromSdk.setLongitude(-123);
+        locationFromSdk.setAccuracy(5.0f);
+        locationFromSdk.setTime(2000);
+        shadowLocationManager.setLastKnownLocation(LocationManager.NETWORK_PROVIDER,
+                locationFromSdk);
+
+        RequestParameters requestParameters = new RequestParameters.Builder()
+                .location(locationFromDeveloper)
+                .build();
+        subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
+        String adUrl = subject.withRequest(requestParameters)
+                .generateUrlString("ads.mopub.com");
+        assertThat(getParameterFromRequestUrl(adUrl, "ll")).isEqualTo("38.0,-123.0");
+        assertThat(getParameterFromRequestUrl(adUrl, "lla")).isEqualTo("5");
+        assertThat(getParameterFromRequestUrl(adUrl, "llsdk")).isEqualTo("1");
+    }
+
     @Test
     public void enableLocation_shouldIncludeLocationInUrl() {
         MoPub.setLocationAwareness(MoPub.LocationAwareness.NORMAL);
         subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
 
         String requestString = generateMinimumUrlString();
-        assertThat(getLocationFromRequestUrl(requestString)).isNotNull();
+        assertThat(getParameterFromRequestUrl(requestString, "ll")).isNotNull();
     }
 
     @Test
@@ -142,7 +239,26 @@ public void disableLocation_shouldNotIncludeLocationInUrl() {
         subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
 
         String requestString = generateMinimumUrlString();
-        assertThat(getLocationFromRequestUrl(requestString)).isNullOrEmpty();
+        assertThat(getParameterFromRequestUrl(requestString, "ll")).isNullOrEmpty();
+    }
+
+    @Test
+    public void disableLocationCollection_whenLocationServiceHasMostRecentLocation_shouldNotIncludeLocationInUrl() {
+        MoPub.setLocationAwareness(MoPub.LocationAwareness.DISABLED);
+        subject = new NativeUrlGenerator(context);
+
+        // Mock out the LocationManager's last known location.
+        ShadowLocationManager shadowLocationManager = Robolectric.shadowOf(
+                (LocationManager) application.getSystemService(Context.LOCATION_SERVICE));
+        Location locationFromSdk = new Location("");
+        locationFromSdk.setLatitude(37);
+        locationFromSdk.setLongitude(-122);
+        locationFromSdk.setAccuracy(5.0f);
+        locationFromSdk.setTime(2000);
+        shadowLocationManager.setLastKnownLocation(LocationManager.GPS_PROVIDER, locationFromSdk);
+
+        String requestString = generateMinimumUrlString();
+        assertThat(getParameterFromRequestUrl(requestString, "ll")).isNullOrEmpty();
     }
 
     private List<String> getDesiredAssetsListFromRequestUrlString(String requestString) {
@@ -164,15 +280,15 @@ private String getNetworkOperatorNameFromRequestUrl(String requestString) {
         return networkOperatorName;
     }
 
-    private String getLocationFromRequestUrl(String requestString) {
+    private String getParameterFromRequestUrl(String requestString, String key) {
         Uri requestUri = Uri.parse(requestString);
-        String location = requestUri.getQueryParameter("ll");
+        String parameter = requestUri.getQueryParameter(key);
 
-        if (TextUtils.isEmpty(location)) {
+        if (TextUtils.isEmpty(parameter)) {
             return "";
         }
 
-        return location;
+        return parameter;
     }
 
     private String generateMinimumUrlString() {
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeViewHolderTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeViewHolderTest.java
index 52e22017..215dd0e3 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeViewHolderTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeViewHolderTest.java
@@ -28,7 +28,6 @@
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
-@Config(shadows={MoPubShadowBitmap.class})
 public class NativeViewHolderTest {
     private Context context;
     private RelativeLayout relativeLayout;
@@ -346,8 +345,7 @@ public void updateExtras_withMismatchingViewTypes_shouldSetTextViewToImageUrlAnd
         assertThat(extrasImageView.getDrawable()).isNull();
     }
 
-    @Test
-    public void fromViewBinder_withMixedViewTypes_shouldReturnNull() throws Exception {
+    public void fromViewBinder_withMixedViewTypes_shouldReturnEmptyViewHolder() throws Exception {
         viewBinder = new ViewBinder.Builder(relativeLayout.getId())
                 .titleId(mainImageView.getId())
                 .textId(textView.getId())
@@ -355,7 +353,6 @@ public void fromViewBinder_withMixedViewTypes_shouldReturnNull() throws Exceptio
 
         NativeViewHolder nativeViewHolder =
                 NativeViewHolder.fromViewBinder(relativeLayout, viewBinder);
-
-        assertThat(nativeViewHolder).isNull();
+        assertThat(nativeViewHolder).isEqualTo(NativeViewHolder.EMPTY_VIEW_HOLDER);
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
index 2930217b..2953449e 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
@@ -22,6 +22,7 @@
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
+import org.robolectric.tester.org.apache.http.TestHttpResponse;
 
 import java.util.concurrent.Executor;
 
@@ -29,6 +30,7 @@
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyBoolean;
+import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
@@ -87,13 +89,9 @@ public void loadPositions_beforeIcs_shouldExecuteDownloadTask() {
     @Test
     public void loadPositionsTwice_shouldCancelPreviousDownloadTask_shouldNotCallListener() {
         subject.loadPositions("test_ad_unit", mockPositioningListener);
-        verify(mockDownloadTaskProvider).get(taskListenerCaptor.capture());
-
         subject.loadPositions("test_ad_unit", mockPositioningListener);
         verify(mockDownloadTask).cancel(true);
 
-        // Cancelling completes the download tasks with a null response.
-        taskListenerCaptor.getValue().onComplete("some_url", null);
         verify(mockPositioningListener, never()).onFailed();
         verify(mockPositioningListener, never()).onLoad(any(MoPubClientPositioning.class));
     }
@@ -122,6 +120,19 @@ public void loadPositions_thenComplete_withValidResponse_shouldCallOnLoadListene
         assertThat(positioning.getRepeatingInterval()).isEqualTo(MoPubClientPositioning.NO_REPEAT);
     }
 
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
+    @Test
+    public void loadPositions_thenComplete_withNullResponse_shouldRetry() throws Exception {
+        subject.loadPositions("test_ad_unit", mockPositioningListener);
+
+        verify(mockDownloadTaskProvider).get(taskListenerCaptor.capture());
+        taskListenerCaptor.getValue().onComplete("some_url", null);
+
+        Robolectric.getUiThreadScheduler().advanceToLastPostedRunnable();
+        verify(mockDownloadTask, times(2))
+                .executeOnExecutor(any(Executor.class), any(HttpGet.class));
+    }
+
     @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void loadPositions_thenComplete_withNotFoundResponse_shouldRetry() {
@@ -135,6 +146,7 @@ public void loadPositions_thenComplete_withNotFoundResponse_shouldRetry() {
                 .executeOnExecutor(any(Executor.class), any(HttpGet.class));
     }
 
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void loadPositions_thenComplete_withWarmingUpResponse_shouldRetry() {
         subject.loadPositions("test_ad_unit", mockPositioningListener);
@@ -147,6 +159,7 @@ public void loadPositions_thenComplete_withWarmingUpResponse_shouldRetry() {
                 .executeOnExecutor(any(Executor.class), any(HttpGet.class));
     }
 
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void loadPositions_thenComplete_withInvalidJsonResponse_shouldRetry() {
         subject.loadPositions("test_ad_unit", mockPositioningListener);
@@ -159,6 +172,7 @@ public void loadPositions_thenComplete_withInvalidJsonResponse_shouldRetry() {
                 .executeOnExecutor(any(Executor.class), any(HttpGet.class));
     }
 
+    @Config(reportSdk = VERSION_CODES.ICE_CREAM_SANDWICH)
     @Test
     public void loadPositions_withPendingRetry_shouldNotRetry() {
         subject.loadPositions("test_ad_unit", mockPositioningListener);
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/TestCustomEventNativeFactory.java b/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/TestCustomEventNativeFactory.java
index 3132f10d..f8122bb9 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/TestCustomEventNativeFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/TestCustomEventNativeFactory.java
@@ -1,5 +1,7 @@
 package com.mopub.nativeads.test.support;
 
+import android.support.annotation.NonNull;
+
 import com.mopub.nativeads.CustomEventNative;
 import com.mopub.nativeads.factories.CustomEventNativeFactory;
 
@@ -17,7 +19,7 @@ private static TestCustomEventNativeFactory getTestFactory() {
     }
 
     @Override
-    protected CustomEventNative internalCreate(final Class<? extends CustomEventNative> nativeClass) {
+    protected CustomEventNative internalCreate(@NonNull final Class<? extends CustomEventNative> nativeClass) {
         return instance;
     }
 }
diff --git a/mopub-sdk/src/test/resources/org.robolectric.Config.properties b/mopub-sdk/src/test/resources/org.robolectric.Config.properties
new file mode 100644
index 00000000..dd670b09
--- /dev/null
+++ b/mopub-sdk/src/test/resources/org.robolectric.Config.properties
@@ -0,0 +1 @@
+shadows=com.mopub.nativeads.test.support.MoPubShadowDisplay,com.mopub.nativeads.test.support.MoPubShadowBitmap
\ No newline at end of file
