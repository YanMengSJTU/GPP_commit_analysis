diff --git a/CHANGELOG.md b/CHANGELOG.md
index e818626b..8362ab40 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,19 @@
+## Version 5.6.0 (March 18, 2019)
+- **Features**
+  - Enabled debug logging when using a debug Google Advertising ID (one that ends with "10ca1ad1abe1").
+  - Upgraded ExoPlayer dependency to 2.9.5.
+  - Upgraded MoPub-Volley dependency to 2.1.0.
+
+- **Bug Fixes**
+  - Banners no longer refresh when they are expanded. They will resume refreshing when the expanded view is closed.
+  - Setting orientation on an expanded banner no longer locks the orientation after the expanded view is closed.
+  - Improved click detection.
+  - Catch `MissingWebViewPackageException` in `ConsentDialogLayoutWebView`.
+  - Reduce ANRs by removing synchronization from `Networking#getUserAgent(Context)`.
+
 ## Version 5.5.0 (January 28, 2019)
 - **Features**
-  - Advanced Bidding automatically initializes. See [https://developers.mopub.com/docs/android/initialization/] for more information about initialization.
+  - Advanced Bidding automatically initializes. See https://developers.mopub.com/docs/android/initialization/ for more information about initialization.
   - GDPR legitimate interest API now available; publishers may opt into allowing supported networks to collect user information on the basis of legitimate interest.
   - Improved logging from the SDK. Set the log level with `SdkConfiguration.Builder#withLogLevel(LogLevel)` in initialization to change the logging granularity.
   - Upgraded Gradle dependency to 4.8
@@ -272,11 +285,11 @@ If you would like to opt out of viewability measurement but do not want to modif
 
 ## Version 4.0.0 (October 6, 2015)
 
-Version 4.0.0 includes a number of improvements to our Native Ads systems under the hood. This means a few changes for publishers integrating the ads. The [Native Ads Integration Guide](https://github.com/mopub/mopub-android-sdk/wiki/Native-Ads-Integration) describes all the steps you'll need to integrate 4.0.0.
+Version 4.0.0 includes a number of improvements to our Native Ads systems under the hood. This means a few changes for publishers integrating the ads. The [Native Ads Integration Guide](https://developers.mopub.com/docs/android/native/) describes all the steps you'll need to integrate 4.0.0.
 
 **Native Ads Changes**
  - `MoPubNativeAdRenderer` has been replaced by `MoPubStaticNativeRenderer` 
- - When requesting ads using `MoPubNative`, you must instantiate and register a `MoPubStaticNativeAdRenderer`. See the [Integration Document](https://github.com/mopub/mopub-android-sdk/wiki/Manual-Integration-of-Native-Ads) for more details.
+ - When requesting ads using `MoPubNative`, you must instantiate and register a `MoPubStaticNativeAdRenderer`. See the [Integration Document](https://developers.mopub.com/docs/android/native/#method-3-manual-integration) for more details.
  - `NativeResponse` has been replaced with `NativeAd`
  - `NativeAd` has a new API that supports creating and rendering `View`s for Native Ads.
    - `#createAdView` returns a `View` that can hold data for the `NativeAd`
@@ -317,7 +330,7 @@ Version 4.0.0 includes a number of improvements to our Native Ads systems under
 
 - Added **VAST 3.0** standard support for video ads.
 - Improved **video player UX**.
-- Added **RecyclerView** support for native ads. See the [integration guide](https://github.com/mopub/mopub-android-sdk/wiki/Native-Ads-with-Recycler-View).
+- Added **RecyclerView** support for native ads. See the [integration guide](https://developers.mopub.com/docs/android/native/).
 - Improved **deep link** handling.
 - Bug Fixes:
   - MRAID video interstitials now play automatically when displayed on Jellybean MR1 and newer.
@@ -359,7 +372,7 @@ Version 4.0.0 includes a number of improvements to our Native Ads systems under
 
 ## Version 3.5.0 (March 10, 2015)
 
- - Dependency changes in Maven and Gradle. No new dependencies have been added, but your build script will need to change slightly to include JCenter. See our [Getting Started Guide](https://github.com/mopub/mopub-android-sdk/wiki/Getting-Started#adding-the-support-libraries-to-your-project) for complete instructions.
+ - Dependency changes in Maven and Gradle. No new dependencies have been added, but your build script will need to change slightly to include JCenter. See our [Getting Started Guide](https://developers.mopub.com/docs/android/getting-started/) for complete instructions.
  - Security Improvement: removed the @JavascriptInterface annotation for WebViews.
  - Fixed a bug where video playback would sometimes fail to stop when an ad was dismissed.
  - Fixed a bug where it was not possible to disable ad refresh; Fixes [issue #148](https://github.com/mopub/mopub-android-sdk/issues/148)
@@ -367,7 +380,7 @@ Version 4.0.0 includes a number of improvements to our Native Ads systems under
 
 ## Version 3.4.0 (January 30, 2015)
 
-  - **Volley networking stack** MoPub for Android now uses Google's Volley library for HTTP requests. You will need to add our bundled Volley JAR (available at `mopub-sdk/libs/mopub-volley-1.0.0.jar`) as a compile-time dependency. See instructions in our [integration page](https://dev.twitter.com/mopub/android/getting-started).
+  - **Volley networking stack** MoPub for Android now uses Google's Volley library for HTTP requests. You will need to add our bundled Volley JAR (available at `mopub-sdk/libs/mopub-volley-1.0.0.jar`) as a compile-time dependency. See instructions in our [integration page](https://developers.mopub.com/docs/android/getting-started/).
   - **Updated Vungle Support** Certified the `VungleInterstitial` custom event against Vungle SDK 3.2.2
   - **VAST Video Bug Fixes**
     - Fixed inability to parse VAST tags referencing URLs that contain 3rd party macros
@@ -376,7 +389,7 @@ Version 4.0.0 includes a number of improvements to our Native Ads systems under
 
 ## Version 3.3.0 (December 8, 2014)
 
-  - **MRAID 2.0 Support** - The MoPub SDK is now compliant with the MRAID 2.0 specification to enable rich media ads in banners and interstitial ad units. Learn more about MRAID from the [IAB](http://www.iab.net/MRAID#MRAID).
+  - **MRAID 2.0 Support** - The MoPub SDK is now compliant with the MRAID 2.0 specification to enable rich media ads in banners and interstitial ad units. Learn more about MRAID from the [IAB](https://www.iab.com/guidelines/mobile-rich-media-ad-interface-definitions-mraid/).
   - **Location Polling Updates** - Changed the interaction between application- and device-provided location data: more recent location data is now always used (in the past, application-provided location data was always preferred).
 
     As before, you may still disable MoPub SDK's location polling by calling `MoPub.setLocationAwareness(LocationAwareness.DISABLED)`.
@@ -425,7 +438,7 @@ Version 4.0.0 includes a number of improvements to our Native Ads systems under
 ## Version 2.4.0 (August 28, 2014)
 
   - **Minimum Android version now at API Level 9.** To use the new SDK, your app must run on Android 2.3.1 (Version 9, Gingerbread) or higher.
-  - **Simplified APIs for inserting native ads.** See [Native Ads Integration](https://github.com/mopub/mopub-android-sdk/wiki/Native-Ads-Integration) for details.
+  - **Simplified APIs for inserting native ads.** See [Native Ads Integration](https://developers.mopub.com/docs/android/native/) for details.
   - **Automatic ad caching for smooth scrolling.** For native ads, the SDK will now automatically pre-load ads, resulting in smoother scrolling.
   - **Performance improvements** The SDK now makes more efficient use of memory for image caching and avoids allocating temporary objects while scrolling, resulting in fewer garbage collections.
   - **Sample app improvements.** An improved sample app allows saving ad unit IDs for testing.
@@ -435,7 +448,7 @@ Version 4.0.0 includes a number of improvements to our Native Ads systems under
 ## Version 2.3 (July 17, 2014)
 
   - **Improved impression tracking for Native Ads** Impression tracking for native ads is now more accurate and more efficient.
-  - **Streamlined Maven Build and Dependencies** MoPub's Android SDK now depends on the Android v4 Support Library shipped with the Android Build tools. The MoPub Sample App also depends on Google Play Services to use the Android Advertising ID. We recommend building against Play Services in your app as well. For integration instructions, see the [wiki](https://github.com/mopub/mopub-android-sdk/wiki/Getting-Started).
+  - **Streamlined Maven Build and Dependencies** MoPub's Android SDK now depends on the Android v4 Support Library shipped with the Android Build tools. The MoPub Sample App also depends on Google Play Services to use the Android Advertising ID. We recommend building against Play Services in your app as well. For integration instructions, see the [getting started page](https://developers.mopub.com/docs/android/getting-started/).
   - **Removed AdMob Custom Events and JAR** AdMob's SDK is deprecated by Google and the APIs have been moved to Google Play Services. Existing AdMob adunits will now invoke the appropriate Google Play Services custom event. Developers must update their integration to use the Google Play Services custom events located in the extras folder by August 1.
   - **Updated Third-Party Network Compatibility** MoPub's provided Custom Events (included in the extras/ folder) are now compatible with the latest SDK releases from Millennial Media (5.3.0), Vungle (3.1.0), InMobi (4.4.1) and Google Play Services (5.0.77).
   - Fixed intermittent NullPointerException in MoPubNative#requestNativeAd; fixes [Github issue #97] (https://github.com/mopub/mopub-android-sdk/issues/97)
@@ -443,7 +456,7 @@ Version 4.0.0 includes a number of improvements to our Native Ads systems under
 
 ## Version 2.2 (June 19, 2014)
 
-  - **Native ads mediation** release; integration instructions and documentation are available on the [GitHub wiki](https://github.com/mopub/mopub-android-sdk/wiki/Integrating-Native-Third-Party-Ad-Networks). Added custom event native implementations to the native extras directory of the SDK (`/extras/src/com/mopub/nativeads`), with initial support for the following networks:
+  - **Native ads mediation** release; integration instructions and documentation are available on our [help page](https://developers.mopub.com/docs/android/integrating-networks/). Added custom event native implementations to the native extras directory of the SDK (`/extras/src/com/mopub/nativeads`), with initial support for the following networks:
   	- Facebook Audience Network (`FacebookNative.java`)
   	- InMobi Native Ads (`InMobiNative.java`)
   - **Native ads content filtering**: Added the ability to specify which native ad elements you want to receive from the MoPub Marketplace to optimize bandwidth use and download only required assets, via `RequestParameters.Builder#desiredAssets(…)`. This feature only works for the six standard Marketplace assets, found in `RequestParameters.NativeAdAsset`. Any additional elements added in direct sold ads will always be sent down in the extras.
@@ -453,7 +466,7 @@ Version 4.0.0 includes a number of improvements to our Native Ads systems under
 
 ## Version 2.1 (May 15, 2014)
 
-  - Added custom events for Facebook ads. `FacebookBanner` and `FacebookInterstitial` can be found in the extras directory of the SDK (`/extras/src/com/mopub/mobileads`). For more information, please see the [help page for Facebook custom events](http://help.mopub.com/customer/portal/articles/1552301-how-to-integrate-facebook-audience-network-using-custom-events).
+  - Added custom events for Facebook ads. `FacebookBanner` and `FacebookInterstitial` can be found in the extras directory of the SDK (`/extras/src/com/mopub/mobileads`). For more information, please see the [help page for integrating third party ad networks](https://developers.mopub.com/docs/android/integrating-networks/).
   - Significant improvements to video ads
     - Added overlay including a "Learn More" button, video length, and time left until the video may be skipped
     - Added support for companion banners (shown upon video completion)
@@ -466,7 +479,7 @@ Version 4.0.0 includes a number of improvements to our Native Ads systems under
 
 ## Version 2.0 (April 22, 2014)
 
-  - **Native Ads** public release; integration instructions and documentation available on the [GitHub wiki](https://github.com/mopub/mopub-android-sdk/wiki/Native-Ads-Integration)
+  - **Native Ads** public release; integration instructions and documentation available on our [support website](https://developers.mopub.com/docs/android/native/)
   - Changed minimum supported Android version to Froyo (Android 2.2, API level 8)
   - Added support for Google Play Services advertising identifier
   - Renamed the `com.mopub.mobileads.MraidBrowser` Activity to `com.mopub.common.MoPubBrowser`.
@@ -573,7 +586,7 @@ Version 4.0.0 includes a number of improvements to our Native Ads systems under
 
 ## Version 1.15 (August 21, 2013)
 
-Includes support for ads in the MRAID 2.0 format. MRAID 2.0 allows advertisers to create ads with rich media functionality, including adding calendar events, storing pictures and playing videos in the native video player. To learn more about MRAID 2.0, read our [help article](http://j.mp/16MKSci).
+Includes support for ads in the MRAID 2.0 format. MRAID 2.0 allows advertisers to create ads with rich media functionality, including adding calendar events, storing pictures and playing videos in the native video player. To learn more about MRAID 2.0, read our [help article](https://developers.mopub.com/docs/ad-formats/mraid/).
 
   - Added the following MRAID 2.0 features: `createCalendarEvent` (Android 4.0 and above), `playVideo`, `storePicture`, and `supports`
   - Hardware Acceleration is now enabled by default for `MraidInterstitial`s on Android 4.0 and above
diff --git a/README.md b/README.md
index 7dd0a8d5..bb26a9c4 100644
--- a/README.md
+++ b/README.md
@@ -37,7 +37,7 @@ The MoPub SDK is available via:
     }
 
     dependencies {
-        implementation('com.mopub:mopub-sdk:5.5.0@aar') {
+        implementation('com.mopub:mopub-sdk:5.6.0@aar') {
             transitive = true
         }
     }
@@ -59,27 +59,27 @@ The MoPub SDK is available via:
         // ... other project dependencies
 
         // For banners
-        implementation('com.mopub:mopub-sdk-banner:5.5.0@aar') {
+        implementation('com.mopub:mopub-sdk-banner:5.6.0@aar') {
             transitive = true
         }
         
         // For interstitials
-        implementation('com.mopub:mopub-sdk-interstitial:5.5.0@aar') {
+        implementation('com.mopub:mopub-sdk-interstitial:5.6.0@aar') {
             transitive = true
         }
 
         // For rewarded videos. This will automatically also include interstitials
-        implementation('com.mopub:mopub-sdk-rewardedvideo:5.5.0@aar') {
+        implementation('com.mopub:mopub-sdk-rewardedvideo:5.6.0@aar') {
             transitive = true
         }
 
         // For native static (images).
-        implementation('com.mopub:mopub-sdk-native-static:5.5.0@aar') {
+        implementation('com.mopub:mopub-sdk-native-static:5.6.0@aar') {
             transitive = true
         }
 
         // For native video. This will automatically also include native static
-        implementation('com.mopub:mopub-sdk-native-video:5.5.0@aar') {
+        implementation('com.mopub:mopub-sdk-native-video:5.6.0@aar') {
             transitive = true
         }
     }
@@ -108,15 +108,16 @@ The MoPub SDK is available via:
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for a complete list of additions, fixes, and enhancements in the latest release.
 
 - **Features**
-  - Advanced Bidding automatically initializes. See [https://developers.mopub.com/docs/android/initialization/] for more information about initialization.
-  - GDPR legitimate interest API now available; publishers may opt into allowing supported networks to collect user information on the basis of legitimate interest.
-  - Improved logging from the SDK. Set the log level with `SdkConfiguration.Builder#withLogLevel(LogLevel)` in initialization to change the logging granularity.
-  - Upgraded Gradle dependency to 4.8
-  - Upgraded Android Plugin dependency to 3.2.0
+  - Enabled debug logging when using a debug Google Advertising ID (one that ends with "10ca1ad1abe1").
+  - Upgraded ExoPlayer dependency to 2.9.5.
+  - Upgraded MoPub-Volley dependency to 2.1.0.
 
 - **Bug Fixes**
-  - Addresses an ANR when requesting an ad immediately after initialization.
-  - MRAID isReady is now called after the load is finished instead of when the ad is shown.
+  - Banners no longer refresh when they are expanded. They will resume refreshing when the expanded view is closed.
+  - Setting orientation on an expanded banner no longer locks the orientation after the expanded view is closed.
+  - Improved click detection.           
+  - Catch `MissingWebViewPackageException` in `ConsentDialogLayoutWebView`.
+  - Reduce ANRs by removing synchronization from `Networking#getUserAgent(Context)`.
 
 ## Requirements
 
@@ -124,8 +125,8 @@ Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/mast
 - android-support-v4.jar, r28 (**Updated in 5.4.0**)
 - android-support-annotations.jar, r28 (**Updated in 5.4.0**)
 - android-support-v7-recyclerview.jar, r28 (**Updated in 5.4.0**)
-- MoPub Volley Library (mopub-volley-2.0.0.jar - available on JCenter) (**Updated in 5.0.0**)
-- **Recommended** Google Play Services 15.0.1
+- MoPub Volley Library (mopub-volley-2.1.0.jar - available on JCenter) (**Updated in 5.6.0**)
+- **Recommended** Google Play Services (com.google.android.gms:play-services-ads-identifier:16.0.0 and com.google.android.gms:play-services-base:16.0.1) (**Updated in 5.6.0**)
 
 ## Upgrading to SDK 5.0
 
@@ -145,7 +146,7 @@ Normally, to add the MoPub SDK to your app via JCenter, your `build.gradle` woul
 
 ```	
 dependencies {
-    implementation('com.mopub:mopub-sdk:5.5.0@aar') {
+    implementation('com.mopub:mopub-sdk:5.6.0@aar') {
         transitive = true
     }
 }
@@ -154,7 +155,7 @@ Update to the following to exclude one or both viewability vendors:
 
 ```
 dependencies {
-    implementation('com.mopub:mopub-sdk:5.5.0@aar') {
+    implementation('com.mopub:mopub-sdk:5.6.0@aar') {
         transitive = true
         exclude module: 'libAvid-mopub' // To exclude AVID
         exclude module: 'moat-mobile-app-kit' // To exclude Moat
diff --git a/build.gradle b/build.gradle
index f0e3464a..9e7f4426 100644
--- a/build.gradle
+++ b/build.gradle
@@ -9,11 +9,11 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:3.2.0'
-        classpath 'com.novoda:bintray-release:0.8.0'
+        classpath 'com.android.tools.build:gradle:3.3.0'
+        classpath 'com.novoda:bintray-release:0.9'
     }
 }
 
 task wrapper(type: Wrapper) {
-    gradleVersion = '4.8'
+    gradleVersion = '4.10.1'
 }
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 22b6ea34..0b6a1e6b 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Mon Oct 01 14:32:21 PDT 2018
+#Mon Jan 28 14:39:41 PST 2019
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.8-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.10.1-all.zip
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index 12ed2728..3608f60f 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.mopub.simpleadsdemo"
-      android:versionCode="66"
-      android:versionName="5.5.0">
+      android:versionCode="67"
+      android:versionName="5.6.0">
 
     <uses-permission android:name="android.permission.INTERNET" />
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
@@ -15,9 +15,11 @@
         android:icon="@drawable/icon"
         android:label="@string/app_name"
         android:networkSecurityConfig="@xml/network_security_config"
-        android:supportsRtl="true">
+        android:supportsRtl="true"
+        android:theme="@style/AppTheme">
 	    <activity android:name="com.mopub.simpleadsdemo.MoPubSampleActivity"
 	            android:label="@string/app_name"
+                android:theme="@style/AppTheme.NoActionBar"
                 android:launchMode="singleTask"
                 android:configChanges="orientation|screenSize">
 	        <intent-filter>
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index f8cefd56..7adac5b9 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -17,14 +17,19 @@ apply plugin: 'com.android.application'
 
 project.group = 'com.mopub'
 project.description = '''MoPub Sample App'''
-project.version = '5.5.0'
+project.version = '5.6.0'
 
 android {
     compileSdkVersion 28
     lintOptions { abortOnError false }
 
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_7
+        targetCompatibility JavaVersion.VERSION_1_8
+    }
+
     defaultConfig {
-        versionCode 66
+        versionCode 67
         versionName version
         minSdkVersion 16
         targetSdkVersion 28
@@ -64,9 +69,11 @@ android {
 dependencies {
     implementation 'com.android.support:customtabs:28.0.0'
     implementation 'com.android.support:support-v4:28.0.0'
+    implementation 'com.android.support:design:28.0.0'
+    implementation 'com.android.support:recyclerview-v7:28.0.0'
+    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
     implementation 'com.google.android.gms:play-services-ads-identifier:16.0.0'
     implementation 'com.google.android.gms:play-services-base:16.0.1'
-    implementation 'com.android.support:recyclerview-v7:28.0.0'
     implementation project(':mopub-sdk')
 
 
diff --git a/mopub-sample/res/drawable/mopub.png b/mopub-sample/res/drawable/mopub.png
new file mode 100644
index 00000000..c85cab32
Binary files /dev/null and b/mopub-sample/res/drawable/mopub.png differ
diff --git a/mopub-sample/res/drawable/side_nav_bar.xml b/mopub-sample/res/drawable/side_nav_bar.xml
new file mode 100644
index 00000000..8ef428d1
--- /dev/null
+++ b/mopub-sample/res/drawable/side_nav_bar.xml
@@ -0,0 +1,9 @@
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle">
+    <gradient
+        android:angle="135"
+        android:centerColor="#009688"
+        android:endColor="#00695C"
+        android:startColor="#4DB6AC"
+        android:type="linear" />
+</shape>
diff --git a/mopub-sample/res/layout/activity_main.xml b/mopub-sample/res/layout/activity_main.xml
new file mode 100644
index 00000000..6d0e6526
--- /dev/null
+++ b/mopub-sample/res/layout/activity_main.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<android.support.v4.widget.DrawerLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/drawer_layout"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:fitsSystemWindows="true"
+    tools:openDrawer="start"
+    android:contentDescription="@string/app_name">
+
+    <include
+        layout="@layout/app_bar_main"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent" />
+
+    <android.support.design.widget.NavigationView
+        android:id="@+id/nav_view"
+        android:layout_width="wrap_content"
+        android:layout_height="match_parent"
+        android:layout_gravity="start"
+        android:fitsSystemWindows="true"
+        app:headerLayout="@layout/nav_header_main"
+        app:menu="@menu/activity_main_drawer" />
+
+</android.support.v4.widget.DrawerLayout>
diff --git a/mopub-sample/res/layout/ad_unit_list_fragment.xml b/mopub-sample/res/layout/ad_unit_list_fragment.xml
index 3abcabbe..05097259 100644
--- a/mopub-sample/res/layout/ad_unit_list_fragment.xml
+++ b/mopub-sample/res/layout/ad_unit_list_fragment.xml
@@ -1,29 +1,49 @@
 <?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
     android:orientation="vertical"
-    android:paddingBottom="15dp"
+    android:paddingBottom="8dp"
     android:textDirection="locale">
 
     <ListView
         android:id="@android:id/list"
         android:layout_width="match_parent"
-        android:layout_height="0dp"
-        android:layout_marginBottom="10dp"
-        android:layout_weight="1" />
+        android:layout_height="match_parent"
+        android:layout_above="@id/status_change_notification"
+        android:layout_marginBottom="10dp" />
+
+    <EditText
+        android:id="@+id/status_change_notification"
+        style="@android:style/TextAppearance.DeviceDefault.Small.Inverse"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_above="@id/add_ad_unit_button"
+        android:autofillHints="@string/consent_change_status"
+        android:background="@android:color/background_dark"
+        android:focusable="false"
+        android:gravity="center_horizontal"
+        android:hint="@string/consent_change_status"
+        android:inputType="none"
+        android:lines="1"
+        android:maxLines="1"
+        android:visibility="gone"
+        tools:ignore="UnusedAttribute" />
 
     <Button
         android:id="@+id/add_ad_unit_button"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:layout_gravity="center_horizontal"
+        android:layout_above="@id/version_code"
+        android:layout_centerHorizontal="true"
         android:text="@string/add_ad_unit_button" />
 
     <TextView
         android:id="@+id/version_code"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:layout_gravity="center_horizontal"
+        android:layout_alignParentBottom="true"
+        android:layout_centerHorizontal="true"
         android:textSize="@dimen/detail_text_size" />
-</LinearLayout>
+</RelativeLayout>
diff --git a/mopub-sample/res/layout/app_bar_main.xml b/mopub-sample/res/layout/app_bar_main.xml
new file mode 100644
index 00000000..7f23a338
--- /dev/null
+++ b/mopub-sample/res/layout/app_bar_main.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<android.support.design.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context=".MoPubSampleActivity">
+
+    <android.support.design.widget.AppBarLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:theme="@style/AppTheme.AppBarOverlay">
+
+        <android.support.v7.widget.Toolbar
+            android:id="@+id/toolbar"
+            android:layout_width="match_parent"
+            android:layout_height="?attr/actionBarSize"
+            android:background="?attr/colorPrimary"
+            app:popupTheme="@style/AppTheme.PopupOverlay" />
+
+    </android.support.design.widget.AppBarLayout>
+
+    <include layout="@layout/main" />
+
+</android.support.design.widget.CoordinatorLayout>
diff --git a/mopub-sample/res/layout/main.xml b/mopub-sample/res/layout/main.xml
index 620cb5e2..7d499df4 100644
--- a/mopub-sample/res/layout/main.xml
+++ b/mopub-sample/res/layout/main.xml
@@ -2,4 +2,5 @@
 <FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
     android:id="@+id/fragment_container"
     android:layout_width="match_parent"
-    android:layout_height="match_parent"></FrameLayout>
+    android:layout_height="match_parent"
+    android:layout_marginTop="?attr/actionBarSize"></FrameLayout>
diff --git a/mopub-sample/res/layout/nav_header_main.xml b/mopub-sample/res/layout/nav_header_main.xml
new file mode 100644
index 00000000..2269c832
--- /dev/null
+++ b/mopub-sample/res/layout/nav_header_main.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="@dimen/nav_header_height"
+    android:background="@drawable/side_nav_bar"
+    android:gravity="bottom"
+    android:orientation="vertical"
+    android:theme="@style/ThemeOverlay.AppCompat.Dark">
+
+    <ImageView
+        android:id="@+id/image_mopub_logo"
+        android:layout_width="wrap_content"
+        android:layout_height="70dp"
+        android:layout_marginBottom="@dimen/nav_header_vertical_spacing"
+        android:scaleType="centerInside"
+        app:srcCompat="@drawable/mopub"
+        android:contentDescription="@string/mopub_logo_descr" />
+
+    <TextView
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:text="@string/nav_header_title"
+        android:layout_marginBottom="@dimen/nav_header_vertical_spacing"
+        android:textAppearance="@style/TextAppearance.AppCompat.Body1" />
+
+</LinearLayout>
diff --git a/mopub-sample/res/layout/networks_info_fragment.xml b/mopub-sample/res/layout/networks_info_fragment.xml
new file mode 100644
index 00000000..408aa4a6
--- /dev/null
+++ b/mopub-sample/res/layout/networks_info_fragment.xml
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="utf-8"?>
+<android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/infoFrarmentId"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <TextView
+        android:id="@+id/text_no_adapters"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/no_network_adapters_found"
+        android:textSize="@dimen/sample_text_size"
+        app:layout_constraintBottom_toTopOf="@id/privacy_close_btn"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent" />
+
+    <android.support.v7.widget.RecyclerView
+        android:id="@+id/networks_recycler_view"
+        android:layout_width="match_parent"
+        android:layout_height="0dp"
+        app:layout_constraintBottom_toTopOf="@+id/networks_close_btn"
+        app:layout_constraintTop_toTopOf="parent"
+        tools:listitem="@android:layout/simple_selectable_list_item" />
+
+    <Button
+        android:id="@+id/networks_close_btn"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/close"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="@id/networks_recycler_view"
+        app:layout_constraintStart_toStartOf="@+id/networks_recycler_view" />
+</android.support.constraint.ConstraintLayout>
diff --git a/mopub-sample/res/layout/privacy_info_divider.xml b/mopub-sample/res/layout/privacy_info_divider.xml
new file mode 100644
index 00000000..4db5df38
--- /dev/null
+++ b/mopub-sample/res/layout/privacy_info_divider.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:background="@color/colorLightGreay">
+
+    <TextView
+        android:id="@+id/text_divider"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginStart="16dp"
+        android:layout_marginLeft="16dp"
+        android:layout_marginTop="16dp"
+        android:layout_marginBottom="8dp"
+        android:fontFamily="sans-serif-medium"
+        android:textAllCaps="true"
+        android:textSize="15sp"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        tools:text="@tools:sample/full_names" />
+
+</android.support.constraint.ConstraintLayout>
diff --git a/mopub-sample/res/layout/privacy_info_fragment.xml b/mopub-sample/res/layout/privacy_info_fragment.xml
new file mode 100644
index 00000000..ea9b5cd9
--- /dev/null
+++ b/mopub-sample/res/layout/privacy_info_fragment.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/privacyFrarmentId"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <android.support.v7.widget.RecyclerView
+        android:id="@+id/privacy_recycler_view"
+        android:layout_width="match_parent"
+        android:layout_height="0dp"
+        app:layout_constraintBottom_toTopOf="@+id/privacy_close_btn"
+        app:layout_constraintTop_toTopOf="parent"
+        tools:listitem="@layout/privacy_info_item" />
+
+    <Button
+        android:id="@+id/privacy_close_btn"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/close"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="@id/privacy_recycler_view"
+        app:layout_constraintStart_toStartOf="@+id/privacy_recycler_view" />
+</android.support.constraint.ConstraintLayout>
diff --git a/mopub-sample/res/layout/privacy_info_item.xml b/mopub-sample/res/layout/privacy_info_item.xml
new file mode 100644
index 00000000..94d3c3e5
--- /dev/null
+++ b/mopub-sample/res/layout/privacy_info_item.xml
@@ -0,0 +1,43 @@
+<?xml version="1.0" encoding="utf-8"?>
+<android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:padding="8dp">
+
+    <TextView
+        android:id="@+id/privacy_title_view"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_margin="4dp"
+        android:textColor="@color/textDark"
+        android:textSize="16sp"
+        app:layout_constraintBottom_toTopOf="@+id/privacy_desc_view"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        tools:text="@tools:sample/full_names" />
+
+    <TextView
+        android:id="@+id/privacy_desc_view"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginStart="4dp"
+        android:layout_marginLeft="4dp"
+        android:layout_marginBottom="4dp"
+        android:textColor="@color/textDark"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/privacy_title_view"
+        tools:text="@tools:sample/lorem[4:10]" />
+
+    <TextView
+        android:id="@+id/privacy_value_view"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_margin="8dp"
+        android:textColor="@color/textDark"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        tools:text="@tools:sample/date/hhmm" />
+</android.support.constraint.ConstraintLayout>
diff --git a/mopub-sample/res/menu/activity_main_drawer.xml b/mopub-sample/res/menu/activity_main_drawer.xml
new file mode 100644
index 00000000..32f2cbe2
--- /dev/null
+++ b/mopub-sample/res/menu/activity_main_drawer.xml
@@ -0,0 +1,58 @@
+<?xml version="1.0" encoding="utf-8"?>
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    tools:showIn="navigation_view">
+
+    <item android:title="@string/api_endpoint">
+        <menu>
+            <group android:checkableBehavior="single">
+                <item
+                    android:id="@+id/nav_production"
+                    android:checkable="true"
+                    android:icon="@drawable/ic_menu_slideshow"
+                    android:title="@string/production" />
+                <item
+                    android:id="@+id/nav_staging"
+                    android:checkable="true"
+                    android:icon="@drawable/ic_menu_manage"
+                    android:title="@string/staging" />
+            </group>
+        </menu>
+    </item>
+
+    <item android:title="@string/privacy">
+        <menu>
+            <item
+                android:id="@+id/nav_privacy_info"
+                android:icon="@drawable/ic_menu_adapters"
+                android:title="@string/information" />
+            <group android:checkableBehavior="single">
+                <item
+                    android:id="@+id/nav_privacy_grant"
+                    android:checkable="true"
+                    android:icon="@drawable/ic_menu_lock"
+                    android:title="@string/grant_consent" />
+                <item
+                    android:id="@+id/nav_privacy_revoke"
+                    android:checkable="true"
+                    android:icon="@drawable/ic_menu_unlock"
+                    android:title="@string/revoke_consent" />
+            </group>
+            <item
+                android:id="@+id/nav_force_gdpr"
+                android:checkable="true"
+                android:icon="@drawable/ic_menu_info"
+                android:title="@string/force_gdpr_applicable" />
+        </menu>
+    </item>
+
+    <item android:title="@string/info">
+        <menu>
+            <item
+                android:id="@+id/nav_adapters_info"
+                android:icon="@drawable/ic_menu_adapters"
+                android:title="@string/network_adapters" />
+        </menu>
+    </item>
+
+</menu>
diff --git a/mopub-sample/res/menu/main.xml b/mopub-sample/res/menu/main.xml
new file mode 100644
index 00000000..a2411e31
--- /dev/null
+++ b/mopub-sample/res/menu/main.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+    <item
+        android:id="@+id/action_settings"
+        android:orderInCategory="100"
+        android:title="@string/action_settings"
+        app:showAsAction="never" />
+</menu>
diff --git a/mopub-sample/res/values-v21/styles.xml b/mopub-sample/res/values-v21/styles.xml
new file mode 100644
index 00000000..fd7a0584
--- /dev/null
+++ b/mopub-sample/res/values-v21/styles.xml
@@ -0,0 +1,8 @@
+<resources>
+
+    <style name="AppTheme.NoActionBar">
+        <item name="windowActionBar">false</item>
+        <item name="windowNoTitle">true</item>
+        <item name="android:statusBarColor">@android:color/transparent</item>
+    </style>
+</resources>
diff --git a/mopub-sample/res/values-v28/styles.xml b/mopub-sample/res/values-v28/styles.xml
new file mode 100644
index 00000000..a434e28e
--- /dev/null
+++ b/mopub-sample/res/values-v28/styles.xml
@@ -0,0 +1,8 @@
+<resources>
+    <style name="AppTheme.NoActionBar">
+        <item name="windowActionBar">false</item>
+        <item name="windowNoTitle">true</item>
+        <item name="android:statusBarColor">@android:color/transparent</item>
+        <item name="android:windowLayoutInDisplayCutoutMode">never</item>
+    </style>
+</resources>
diff --git a/mopub-sample/res/values/colors.xml b/mopub-sample/res/values/colors.xml
new file mode 100644
index 00000000..9305825e
--- /dev/null
+++ b/mopub-sample/res/values/colors.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="colorPrimary">#008577</color>
+    <color name="colorPrimaryDark">#00574B</color>
+    <color name="colorAccent">#D81B60</color>
+    <color name="colorLightGreay">#46cccccc</color>
+    <color name="textDark">#ff070707</color>
+</resources>
diff --git a/mopub-sample/res/values/dimens.xml b/mopub-sample/res/values/dimens.xml
index 75ede747..403f81f7 100644
--- a/mopub-sample/res/values/dimens.xml
+++ b/mopub-sample/res/values/dimens.xml
@@ -13,4 +13,10 @@
     <dimen name="leaderboard_height">90dp</dimen>
     <dimen name="skyscraper_width">160dp</dimen>
     <dimen name="skyscraper_height">600dp</dimen>
-</resources>
\ No newline at end of file
+
+    <!-- Navigation dimensions -->
+    <dimen name="activity_horizontal_margin">16dp</dimen>
+    <dimen name="activity_vertical_margin">16dp</dimen>
+    <dimen name="nav_header_vertical_spacing">8dp</dimen>
+    <dimen name="nav_header_height">176dp</dimen>
+</resources>
diff --git a/mopub-sample/res/values/drawables.xml b/mopub-sample/res/values/drawables.xml
new file mode 100644
index 00000000..1e963693
--- /dev/null
+++ b/mopub-sample/res/values/drawables.xml
@@ -0,0 +1,8 @@
+<resources xmlns:android="http://schemas.android.com/apk/res/android">
+    <item name="ic_menu_unlock" type="drawable">@android:drawable/ic_lock_idle_lock</item>
+    <item name="ic_menu_lock" type="drawable">@android:drawable/ic_lock_lock</item>
+    <item name="ic_menu_slideshow" type="drawable">@android:drawable/ic_menu_slideshow</item>
+    <item name="ic_menu_manage" type="drawable">@android:drawable/ic_menu_manage</item>
+    <item name="ic_menu_adapters" type="drawable">@android:drawable/ic_menu_info_details</item>
+    <item name="ic_menu_info" type="drawable">@android:drawable/ic_dialog_info</item>
+</resources>
diff --git a/mopub-sample/res/values/strings.xml b/mopub-sample/res/values/strings.xml
index b02e994a..dea33098 100644
--- a/mopub-sample/res/values/strings.xml
+++ b/mopub-sample/res/values/strings.xml
@@ -28,4 +28,30 @@
     <string name="ad_unit_id_rewarded_rich_media">a96ae2ef41d44822af45c6328c4e1eb1</string>
     <string name="ad_unit_id_native">11a17b188668469fb0412708c3d16813</string>
     <string name="swipe_text"><![CDATA[< Swipe Left & Right >]]></string>
+
+    <string name="navigation_drawer_open">Open navigation drawer</string>
+    <string name="navigation_drawer_close">Close navigation drawer</string>
+    <string name="nav_header_title">MoPub Sample App</string>
+    <string name="nav_header_subtitle">android.studio@android.com</string>
+    <string name="nav_header_desc">Navigation header</string>
+    <string name="action_settings">Settings</string>
+    <string name="consent_whitelisted">Consent changed to Potentially whitelisted</string>
+    <string name="consent_denied">Consent changed to Denied</string>
+    <string name="close">Close</string>
+    <string name="no_network_adapters_found">No network adapters found</string>
+    <string name="mopub_logo_descr">Mopub logo</string>
+    <string name="consent_change_status">Consent change status</string>
+    <string name="donottrack_text">Do Not Track is on</string>
+    <string name="api_endpoint">API ENDPOINT</string>
+    <string name="production">Production</string>
+    <string name="staging">Staging</string>
+    <string name="privacy">PRIVACY</string>
+    <string name="information">Information</string>
+    <string name="grant_consent">Grant Consent</string>
+    <string name="revoke_consent">Revoke Consent</string>
+    <string name="force_gdpr_applicable">Force GDPR Applicable</string>
+    <string name="info">INFO</string>
+    <string name="network_adapters">Network Adapters</string>
+    <string name="pim_is_not_available">getPersonalInformationManager() returned null</string>
+    <string name="list_fragment_not_found">Can\'t find MoPubListFragment.</string>
 </resources>
diff --git a/mopub-sample/res/values/styles.xml b/mopub-sample/res/values/styles.xml
new file mode 100644
index 00000000..545b9c6d
--- /dev/null
+++ b/mopub-sample/res/values/styles.xml
@@ -0,0 +1,20 @@
+<resources>
+
+    <!-- Base application theme. -->
+    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
+        <!-- Customize your theme here. -->
+        <item name="colorPrimary">@color/colorPrimary</item>
+        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
+        <item name="colorAccent">@color/colorAccent</item>
+    </style>
+
+    <style name="AppTheme.NoActionBar">
+        <item name="windowActionBar">false</item>
+        <item name="windowNoTitle">true</item>
+    </style>
+
+    <style name="AppTheme.AppBarOverlay" parent="ThemeOverlay.AppCompat.Dark.ActionBar" />
+
+    <style name="AppTheme.PopupOverlay" parent="ThemeOverlay.AppCompat.Light" />
+
+</resources>
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java
index f7a342d1..1e9830f1 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java
@@ -30,6 +30,8 @@
 import com.mopub.common.MoPub;
 import com.mopub.common.Preconditions;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.privacy.ConsentStatus;
+import com.mopub.common.privacy.PersonalInfoManager;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -226,6 +228,36 @@ void deleteAdUnit(final MoPubSampleAdUnit moPubSampleAdUnit) {
         mAdapter.sort(MoPubSampleAdUnit.COMPARATOR);
     }
 
+    /**
+     * Call this function to grant or revoke user consent
+     * @param consentGranted - true to grant consent, false to revoke
+     * @return - true successfully completed operation, false failed for some reason
+     */
+    boolean onChangeConsent(final boolean consentGranted) {
+        final PersonalInfoManager personalInfoManager = MoPub.getPersonalInformationManager();
+        final View view = getView();
+        if (personalInfoManager == null || view == null) {
+            MoPubLog.log(MoPubLog.SdkLogEvent.CUSTOM, getString(R.string.pim_is_not_available));
+            return false;
+        }
+
+        final EditText text = view.findViewById(R.id.status_change_notification);
+        text.setVisibility(View.VISIBLE);
+        if (consentGranted) {
+            personalInfoManager.grantConsent();
+            text.setText(R.string.consent_whitelisted);
+        } else {
+            if (personalInfoManager.getPersonalInfoConsentStatus().equals(ConsentStatus.DNT)) {
+                text.setText(R.string.donottrack_text);
+                return false;
+            }
+            personalInfoManager.revokeConsent();
+            text.setText(R.string.consent_denied);
+        }
+
+        return true;
+    }
+
     public static class DeleteDialogFragment extends DialogFragment {
         public static DeleteDialogFragment newInstance(MoPubSampleAdUnit adUnit) {
             final DeleteDialogFragment deleteDialogFragment = new DeleteDialogFragment();
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java
index 49036ce8..7ea476e4 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java
@@ -10,21 +10,34 @@
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.support.design.widget.NavigationView;
 import android.support.v4.app.ActivityCompat;
-import android.support.v4.app.FragmentActivity;
-import android.util.Log;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.view.GravityCompat;
+import android.support.v4.widget.DrawerLayout;
+import android.support.v7.app.ActionBarDrawerToggle;
+import android.support.v7.app.AppCompatActivity;
+import android.support.v7.widget.Toolbar;
+import android.view.Menu;
+import android.view.MenuItem;
 import android.webkit.WebView;
 
+import com.mopub.common.Constants;
 import com.mopub.common.MoPub;
 import com.mopub.common.SdkConfiguration;
 import com.mopub.common.SdkInitializationListener;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.privacy.ConsentData;
 import com.mopub.common.privacy.ConsentDialogListener;
 import com.mopub.common.privacy.ConsentStatus;
 import com.mopub.common.privacy.ConsentStatusChangeListener;
 import com.mopub.common.privacy.PersonalInfoManager;
 import com.mopub.common.util.DeviceUtils;
+import com.mopub.common.util.Reflection;
 import com.mopub.mobileads.MoPubErrorCode;
 
+import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -34,7 +47,8 @@
 import static com.mopub.common.logging.MoPubLog.LogLevel.DEBUG;
 import static com.mopub.common.logging.MoPubLog.LogLevel.INFO;
 
-public class MoPubSampleActivity extends FragmentActivity {
+public class MoPubSampleActivity extends AppCompatActivity
+        implements NavigationView.OnNavigationItemSelectedListener {
     private static final List<String> REQUIRED_DANGEROUS_PERMISSIONS = new ArrayList<>();
 
     static {
@@ -59,6 +73,8 @@ private static void setWebDebugging() {
     @Nullable
     PersonalInfoManager mPersonalInfoManager;
 
+    @Nullable DrawerLayout mDrawerLayout;
+
     @Nullable
     private ConsentStatusChangeListener mConsentStatusChangeListener;
 
@@ -66,7 +82,11 @@ private static void setWebDebugging() {
     protected void onCreate(Bundle savedInstanceState) {
         Log.d("MoPub-Nick", "onCreate()");
         super.onCreate(savedInstanceState);
-        setContentView(R.layout.main);
+        setContentView(R.layout.activity_main);
+        Toolbar toolbar = findViewById(R.id.toolbar);
+        setSupportActionBar(toolbar);
+
+        setupNavigationDrawer(toolbar);
 
         List<String> permissionsToBeRequested = new ArrayList<>();
         for (String permission : REQUIRED_DANGEROUS_PERMISSIONS) {
@@ -124,7 +144,7 @@ private void createMoPubListFragment(@NonNull final Intent intent) {
             mMoPubListFragment = new MoPubListFragment();
             mMoPubListFragment.setArguments(intent.getExtras());
             getSupportFragmentManager().beginTransaction()
-                    .replace(R.id.fragment_container, mMoPubListFragment).commit();
+                    .replace(R.id.fragment_container, mMoPubListFragment, LIST_FRAGMENT_TAG).commit();
 
             mDeeplinkIntent = intent;
         }
@@ -149,6 +169,7 @@ private SdkInitializationListener initSdkListener() {
 
             @Override
             public void onInitializationFinished() {
+                syncNavigationMenu();
                 Utils.logToast(MoPubSampleActivity.this, "SDK initialized.");
                 Log.d("MoPub-Nick", "onInitializationFinished(): SDK initialized");
                 if (mPersonalInfoManager != null && mPersonalInfoManager.shouldShowConsentDialog()) {
@@ -189,4 +210,154 @@ public void onConsentDialogLoadFailed(@NonNull MoPubErrorCode moPubErrorCode) {
             }
         };
     }
+
+    @Override
+    public void onBackPressed() {
+        if (mDrawerLayout != null && mDrawerLayout.isDrawerOpen(GravityCompat.START)) {
+            mDrawerLayout.closeDrawer(GravityCompat.START);
+        } else {
+            super.onBackPressed();
+        }
+    }
+
+    /*
+        MoPub Sample specific test code
+     */
+    private static final String PROD_HOST = Constants.HOST;
+    private static final String TEST_HOST = "ads-staging.mopub.com";
+    private static final String PRIVACY_FRAGMENT_TAG = "privacy_info_fragment";
+    private static final String NETWORKS_FRAGMENT_TAG = "networks_info_fragment";
+    private static final String LIST_FRAGMENT_TAG = "list_fragment";
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        // Inflate the menu; this adds items to the action bar if it is present.
+        getMenuInflater().inflate(R.menu.main, menu);
+        return true;
+    }
+
+    private void setupNavigationDrawer(Toolbar toolbar) {
+        mDrawerLayout = findViewById(R.id.drawer_layout);
+        final ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this,
+                mDrawerLayout, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
+        mDrawerLayout.addDrawerListener(toggle);
+        toggle.syncState();
+
+        final NavigationView navigationView = findViewById(R.id.nav_view);
+        navigationView.setNavigationItemSelectedListener(this);
+    }
+
+    private void syncNavigationMenu() {
+        final NavigationView navigationView = findViewById(R.id.nav_view);
+
+        final String host = Constants.HOST;
+        final boolean production = PROD_HOST.equalsIgnoreCase(host);
+        navigationView.getMenu().findItem(R.id.nav_production).setChecked(production);
+        navigationView.getMenu().findItem(R.id.nav_staging).setChecked(!production);
+
+        final PersonalInfoManager manager = MoPub.getPersonalInformationManager();
+        if (manager != null) {
+            final ConsentData consentData = manager.getConsentData();
+            navigationView.getMenu().findItem(R.id.nav_force_gdpr).setChecked(consentData.isForceGdprApplies());
+
+            final ConsentStatus consentStatus = manager.getPersonalInfoConsentStatus();
+
+            if (consentStatus.equals(ConsentStatus.POTENTIAL_WHITELIST)) {
+                navigationView.getMenu().findItem(R.id.nav_privacy_grant).setChecked(true);
+            } else if (consentStatus.equals(ConsentStatus.EXPLICIT_NO)) {
+                navigationView.getMenu().findItem(R.id.nav_privacy_revoke).setChecked(true);
+            }
+        }
+    }
+
+    @Override
+    public boolean onNavigationItemSelected(@NonNull MenuItem menuItem) {
+        switch (menuItem.getItemId()) {
+            case R.id.nav_production:
+                onNavEnvironemnt(true);
+                break;
+            case R.id.nav_staging:
+                onNavEnvironemnt(false);
+                break;
+            case R.id.nav_privacy_info:
+                onNavPrivacyInfo();
+                break;
+            case R.id.nav_privacy_grant:
+                onNavChangeConsent(true);
+                break;
+            case R.id.nav_privacy_revoke:
+                onNavChangeConsent(false);
+                break;
+            case R.id.nav_force_gdpr:
+                onNavForceGdpr();
+                break;
+            case R.id.nav_adapters_info:
+                onNavAdaptersInfo();
+                break;
+        }
+
+        syncNavigationMenu();
+
+        if (mDrawerLayout != null) {
+            mDrawerLayout.closeDrawers();
+        }
+
+        return false;
+    }
+
+    private void onNavEnvironemnt(boolean production) {
+        setEndpoint(production ? PROD_HOST : TEST_HOST);
+    }
+
+    private void onNavPrivacyInfo() {
+        final FragmentManager manager = getSupportFragmentManager();
+        if (manager.findFragmentByTag(PRIVACY_FRAGMENT_TAG) == null) {
+            manager.beginTransaction()
+                    .replace(R.id.fragment_container, new PrivacyInfoFragment(), PRIVACY_FRAGMENT_TAG)
+                    .addToBackStack(PRIVACY_FRAGMENT_TAG)
+                    .commit();
+        }
+    }
+
+    private void onNavChangeConsent(boolean grant) {
+        final FragmentManager manager = getSupportFragmentManager();
+        final MoPubListFragment listFragment = (MoPubListFragment) manager.findFragmentByTag(LIST_FRAGMENT_TAG);
+        if (listFragment == null) {
+            MoPubLog.log(MoPubLog.SdkLogEvent.CUSTOM, getString(R.string.list_fragment_not_found));
+            return; // fragment is not ready to update the consent
+        }
+        if (!listFragment.onChangeConsent(grant)) {
+            return; // fragment is not ready to update the consent
+        }
+
+        final NavigationView navigationView = findViewById(R.id.nav_view);
+        navigationView.getMenu().findItem(R.id.nav_privacy_grant).setChecked(grant);
+        navigationView.getMenu().findItem(R.id.nav_privacy_revoke).setChecked(!grant);
+    }
+
+    private void onNavForceGdpr() {
+        final PersonalInfoManager manager = MoPub.getPersonalInformationManager();
+        if (manager != null) {
+            manager.forceGdprApplies();
+        }
+    }
+
+    private void onNavAdaptersInfo() {
+        final FragmentManager manager = getSupportFragmentManager();
+        if (manager.findFragmentByTag(NETWORKS_FRAGMENT_TAG) == null) {
+            manager.beginTransaction()
+                    .replace(R.id.fragment_container, new NetworksInfoFragment(), NETWORKS_FRAGMENT_TAG)
+                    .addToBackStack(NETWORKS_FRAGMENT_TAG)
+                    .commit();
+        }
+    }
+
+    private void setEndpoint(@NonNull String host) {
+        try {
+            Field field = Reflection.getPrivateField(com.mopub.common.Constants.class, "HOST");
+            field.set(null, host);
+        } catch (Exception e) {
+            MoPubLog.log(MoPubLog.SdkLogEvent.CUSTOM_WITH_THROWABLE, "Can't change HOST.", e);
+        }
+    }
 }
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NetworksInfoFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NetworksInfoFragment.java
new file mode 100644
index 00000000..35ad3a34
--- /dev/null
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NetworksInfoFragment.java
@@ -0,0 +1,93 @@
+package com.mopub.simpleadsdemo;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.v4.app.Fragment;
+import android.support.v7.widget.DividerItemDecoration;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.mopub.common.MoPub;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static android.support.v7.widget.DividerItemDecoration.VERTICAL;
+
+public class NetworksInfoFragment extends Fragment {
+    @Override
+    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+        final View view = inflater.inflate(R.layout.networks_info_fragment, container, false);
+
+        final List<String> networks = MoPub.getAdapterConfigurationInfo();
+        if (networks != null && !networks.isEmpty()) {
+            RecyclerView recyclerView = view.findViewById(R.id.networks_recycler_view);
+            recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
+            recyclerView.setAdapter(new NetworksInfoAdapter(networks));
+            recyclerView.addItemDecoration(new DividerItemDecoration(recyclerView.getContext(), VERTICAL));
+
+            view.findViewById(R.id.text_no_adapters).setVisibility(View.GONE);
+        }
+
+        final Button closeButton = view.findViewById(R.id.networks_close_btn);
+        closeButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                final Activity activity = getActivity();
+                if (activity != null) {
+                    activity.onBackPressed();
+                }
+            }
+        });
+        return view;
+    }
+
+    class NetworksInfoAdapter extends RecyclerView.Adapter<NetworksInfoAdapter.ViewHolder> {
+        @NonNull
+        final List<String> mNetworksInfo;
+
+        NetworksInfoAdapter(@Nullable final List<String> networksInfo) {
+            if (networksInfo != null) {
+                mNetworksInfo = networksInfo;
+            } else {
+                mNetworksInfo = new ArrayList<>();
+            }
+        }
+
+        @NonNull
+        @Override
+        public NetworksInfoAdapter.ViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int i) {
+            final View itemView = LayoutInflater.from(viewGroup.getContext())
+                    .inflate(android.R.layout.simple_selectable_list_item, viewGroup, false);
+            final NetworksInfoAdapter.ViewHolder viewHolder = new NetworksInfoAdapter.ViewHolder(itemView);
+            itemView.setTag(viewHolder);
+            return viewHolder;
+        }
+
+        @Override
+        public void onBindViewHolder(@NonNull NetworksInfoAdapter.ViewHolder viewHolder, int i) {
+            viewHolder.nameTextView.setText(mNetworksInfo.get(i));
+        }
+
+        @Override
+        public int getItemCount() {
+            return mNetworksInfo.size();
+        }
+
+        class ViewHolder extends RecyclerView.ViewHolder {
+            final TextView nameTextView;
+
+            ViewHolder(View itemView) {
+                super(itemView);
+                nameTextView = itemView.findViewById(android.R.id.text1);
+            }
+        }
+    }
+}
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/PrivacyInfoFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/PrivacyInfoFragment.java
new file mode 100644
index 00000000..ff80397f
--- /dev/null
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/PrivacyInfoFragment.java
@@ -0,0 +1,189 @@
+package com.mopub.simpleadsdemo;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.v4.app.Fragment;
+import android.support.v7.widget.DividerItemDecoration;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.text.TextUtils;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.mopub.common.MoPub;
+import com.mopub.common.privacy.ConsentData;
+import com.mopub.common.privacy.ConsentStatus;
+import com.mopub.common.privacy.PersonalInfoManager;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static android.support.v7.widget.DividerItemDecoration.VERTICAL;
+
+public class PrivacyInfoFragment extends Fragment {
+
+    private static class PrivacyItem {
+        @NonNull
+        final String mTitle;
+        @NonNull
+        final String mDescription;
+        @NonNull
+        final String mValue;
+
+        PrivacyItem(@Nullable String title, @Nullable String value, @Nullable String description) {
+            mTitle = title == null ? "" : title;
+            mValue = value == null ? "" : value;
+            mDescription = description == null ? "" : description;
+        }
+    }
+
+    private static final int TYPE_PRIVACY_INFO = 0;
+    private static final int TYPE_DIVIDER = 1;
+
+    @Override
+    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+        final View view = inflater.inflate(R.layout.privacy_info_fragment, container, false);
+
+        final List<PrivacyItem> privacySettings = readPrivacySettings();
+        if (privacySettings != null && !privacySettings.isEmpty()) {
+            RecyclerView recyclerView = view.findViewById(R.id.privacy_recycler_view);
+            recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
+            recyclerView.setAdapter(new PrivacyAdapter(privacySettings));
+            recyclerView.addItemDecoration(new DividerItemDecoration(recyclerView.getContext(), VERTICAL));
+        }
+
+        final Button closeButton = view.findViewById(R.id.privacy_close_btn);
+        closeButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                final Activity activity = getActivity();
+                if (activity != null) {
+                    activity.onBackPressed();
+                }
+            }
+        });
+        return view;
+    }
+
+    class PrivacyAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {
+        @NonNull
+        final List<PrivacyItem> mPrivacyInfo;
+
+        PrivacyAdapter(@Nullable final List<PrivacyItem> privacyInfo) {
+            if (privacyInfo != null) {
+                mPrivacyInfo = privacyInfo;
+            } else {
+                mPrivacyInfo = new ArrayList<>();
+            }
+        }
+
+        @NonNull
+        @Override
+        public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int viewType) {
+            final LayoutInflater inflater = LayoutInflater.from(viewGroup.getContext());
+            @NonNull RecyclerView.ViewHolder viewHolder;
+            if (viewType == TYPE_PRIVACY_INFO) {
+                final View itemView = inflater.inflate(R.layout.privacy_info_item, viewGroup, false);
+                viewHolder = new PrivacyAdapter.ViewHolder(itemView);
+                itemView.setTag(viewHolder);
+            } else {
+                final View itemView = inflater.inflate(R.layout.privacy_info_divider, viewGroup, false);
+                viewHolder = new PrivacyAdapter.DividerViewHolder(itemView);
+                itemView.setTag(viewHolder);
+            }
+
+            return viewHolder;
+        }
+
+        @Override
+        public void onBindViewHolder(@NonNull RecyclerView.ViewHolder viewHolder, int i) {
+            final PrivacyItem item = mPrivacyInfo.get(i);
+            if (isContentItem(item)) {
+                PrivacyAdapter.ViewHolder holder = (PrivacyAdapter.ViewHolder) viewHolder;
+                holder.titleTextView.setText(item.mTitle);
+                holder.descTextView.setText(item.mDescription);
+                holder.valueTextView.setText(item.mValue);
+            } else {
+                PrivacyAdapter.DividerViewHolder holder = (PrivacyAdapter.DividerViewHolder) viewHolder;
+                holder.dividerTextView.setText(item.mDescription);
+            }
+        }
+
+        @Override
+        public int getItemCount() {
+            return mPrivacyInfo.size();
+        }
+
+        @Override
+        public int getItemViewType(int position) {
+            final PrivacyItem item = mPrivacyInfo.get(position);
+            return isContentItem(item) ? TYPE_PRIVACY_INFO : TYPE_DIVIDER;
+        }
+
+        // viewholder
+        class ViewHolder extends RecyclerView.ViewHolder {
+            final TextView titleTextView;
+            final TextView descTextView;
+            final TextView valueTextView;
+
+            ViewHolder(View itemView) {
+                super(itemView);
+                titleTextView = itemView.findViewById(R.id.privacy_title_view);
+                descTextView = itemView.findViewById(R.id.privacy_desc_view);
+                valueTextView = itemView.findViewById(R.id.privacy_value_view);
+            }
+        }
+
+        // divider
+        class DividerViewHolder extends RecyclerView.ViewHolder {
+            final TextView dividerTextView;
+
+            DividerViewHolder(View itemView) {
+                super(itemView);
+                dividerTextView = itemView.findViewById(R.id.text_divider);
+            }
+        }
+    }
+
+    private static boolean isContentItem(@Nullable PrivacyItem item) {
+        return !(item != null && TextUtils.isEmpty(item.mTitle) && TextUtils.isEmpty(item.mValue));
+    }
+
+    private static List<PrivacyItem> readPrivacySettings() {
+        final PersonalInfoManager manager = MoPub.getPersonalInformationManager();
+        if (manager == null) {
+            return new ArrayList<>();
+        }
+
+        final ConsentData consentData = manager.getConsentData();
+        final ConsentStatus status = manager.getPersonalInfoConsentStatus();
+        final Boolean gdprApplies = manager.gdprApplies();
+
+        final String gdprAppliesString = (gdprApplies == null || gdprApplies) ? "true" : "false";
+
+        ArrayList<PrivacyItem> list = new ArrayList<>();
+        list.add(new PrivacyItem("", "", "Allowable Data Collection"));
+        list.add(new PrivacyItem("Is GDPR applicable?", gdprAppliesString, ""));
+        list.add(new PrivacyItem("Consent Status", status.getValue(), ""));
+        list.add(new PrivacyItem("Can Collect PII", manager.canCollectPersonalInformation() ? "true" : "false", ""));
+        list.add(new PrivacyItem("Should Show Consent Dialog", manager.shouldShowConsentDialog() ? "true" : "false", ""));
+        list.add(new PrivacyItem("Is Whitelisted", status.equals(ConsentStatus.POTENTIAL_WHITELIST) ? "true" : "false", ""));
+        list.add(new PrivacyItem("", "", "Current Versions"));
+        list.add(new PrivacyItem("Current Vendor List Url", "", consentData.getCurrentVendorListLink()));
+        list.add(new PrivacyItem("Current Vendor List Version", consentData.getCurrentVendorListVersion(), ""));
+        list.add(new PrivacyItem("Current Privacy Policy Url", "", consentData.getCurrentPrivacyPolicyLink()));
+        list.add(new PrivacyItem("Current Privacy Policy Version", consentData.getCurrentPrivacyPolicyVersion(), ""));
+        list.add(new PrivacyItem("Current IAB Vendor List Format", consentData.getCurrentVendorListIabFormat(), ""));
+        list.add(new PrivacyItem("", "", "Consented Versions"));
+        list.add(new PrivacyItem("Consented Vendor List Version", consentData.getConsentedVendorListVersion(), ""));
+        list.add(new PrivacyItem("Consented Privacy Policy Version", consentData.getConsentedPrivacyPolicyVersion(), ""));
+        list.add(new PrivacyItem("Consented IAB Vendor List Version", consentData.getConsentedVendorListIabFormat(), ""));
+
+        return list;
+    }
+}
diff --git a/mopub-sdk/build.gradle b/mopub-sdk/build.gradle
index b15c0ae4..ff0ae552 100644
--- a/mopub-sdk/build.gradle
+++ b/mopub-sdk/build.gradle
@@ -31,6 +31,8 @@ dependencies {
 }
 
 android {
+    useLibrary 'org.apache.http.legacy'
+
     testOptions {
         unitTests {
             includeAndroidResources = true
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
index 4d2bbc77..d0952c74 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
@@ -18,7 +18,6 @@
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.ReflectionTarget;
-import com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
 import com.mopub.mobileads.factories.CustomEventBannerFactory;
 
 import java.util.Map;
@@ -35,7 +34,7 @@
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_TIMEOUT;
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 
-public class CustomEventBannerAdapter implements CustomEventBannerListener {
+public class CustomEventBannerAdapter implements InternalCustomEventBannerListener {
     public static final int DEFAULT_BANNER_TIMEOUT_DELAY = Constants.TEN_SECONDS_MILLIS;
 
     private boolean mInvalidated;
@@ -239,8 +238,8 @@ public void onBannerLoaded(View bannerView) {
             if (mIsVisibilityImpressionTrackingEnabled &&
                     mCustomEventBanner != null &&
                     mCustomEventBanner.isAutomaticImpressionAndClickTrackingEnabled()) {
-                // Disable autorefresh temporarily until an impression happens.
-                mMoPubView.pauseAutorefresh();
+                // Disable autoRefresh temporarily until an impression happens.
+                mMoPubView.pauseAutoRefresh();
                 // Set up visibility tracker and listener if in experiment
                 mVisibilityTracker = new BannerVisibilityTracker(mContext, mMoPubView, bannerView,
                         mImpressionMinVisibleDips, mImpressionMinVisibleMs);
@@ -252,7 +251,7 @@ public void onVisibilityChanged() {
                         if (mCustomEventBanner != null) {
                             mCustomEventBanner.trackMpxAndThirdPartyImpressions();
                         }
-                        mMoPubView.resumeAutorefresh();
+                        mMoPubView.resumeAutoRefresh();
                     }
                 });
             }
@@ -298,7 +297,7 @@ public void onBannerExpanded() {
             return;
         }
 
-        mMoPubView.expand();
+        mMoPubView.engageOverlay();
         mMoPubView.adPresentedOverlay();
     }
 
@@ -308,7 +307,7 @@ public void onBannerCollapsed() {
             return;
         }
 
-        mMoPubView.collapse();
+        mMoPubView.dismissOverlay();
         mMoPubView.adClosed();
     }
 
@@ -343,4 +342,18 @@ public void onBannerImpression() {
     public void onLeaveApplication() {
         onBannerClicked();
     }
+
+    @Override
+    public void onPauseAutoRefresh() {
+        if (mMoPubView != null) {
+            mMoPubView.engageOverlay();
+        }
+    }
+
+    @Override
+    public void onResumeAutoRefresh() {
+        if (mMoPubView != null) {
+            mMoPubView.dismissOverlay();
+        }
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/InternalCustomEventBannerListener.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/InternalCustomEventBannerListener.java
new file mode 100644
index 00000000..bbbef382
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/InternalCustomEventBannerListener.java
@@ -0,0 +1,10 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.mobileads;
+
+public interface InternalCustomEventBannerListener extends CustomEventBanner.CustomEventBannerListener {
+    void onPauseAutoRefresh();
+    void onResumeAutoRefresh();
+}
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java
index 105f9a13..f888e179 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java
@@ -16,6 +16,7 @@
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.AdViewController;
 import com.mopub.mobileads.CustomEventBanner;
+import com.mopub.mobileads.InternalCustomEventBannerListener;
 import com.mopub.mobileads.factories.MraidControllerFactory;
 import com.mopub.mraid.MraidController.MraidListener;
 
@@ -37,7 +38,7 @@
     public static final String ADAPTER_NAME = MraidBanner.class.getSimpleName();
 
     @Nullable private MraidController mMraidController;
-    @Nullable private CustomEventBannerListener mBannerListener;
+    @Nullable private InternalCustomEventBannerListener mBannerListener;
     @Nullable private MraidWebViewDebugListener mDebugListener;
     @Nullable private ExternalViewabilitySessionManager mExternalViewabilitySessionManager;
     private boolean mBannerImpressionPixelCountEnabled = false;
@@ -47,7 +48,16 @@ protected void loadBanner(@NonNull final Context context,
                     @NonNull final CustomEventBannerListener customEventBannerListener,
                     @NonNull final Map<String, Object> localExtras,
                     @NonNull final Map<String, String> serverExtras) {
-        mBannerListener = customEventBannerListener;
+        try {
+            mBannerListener = (InternalCustomEventBannerListener) customEventBannerListener;
+        } catch (ClassCastException e) {
+            MoPubLog.log(LOAD_FAILED, ADAPTER_NAME,
+                    MRAID_LOAD_ERROR.getIntCode(),
+                    MRAID_LOAD_ERROR);
+            customEventBannerListener.onBannerFailed(MRAID_LOAD_ERROR);
+            return;
+        }
+
         MoPubLog.log(LOAD_ATTEMPTED, ADAPTER_NAME);
 
         String htmlData;
@@ -104,6 +114,15 @@ public void onExpand() {
                 mBannerListener.onBannerClicked();
             }
 
+            @Override
+            public void onResize(final boolean toOriginalSize) {
+                if (toOriginalSize) {
+                    mBannerListener.onResumeAutoRefresh();
+                } else {
+                    mBannerListener.onPauseAutoRefresh();
+                }
+            }
+
             @Override
             public void onOpen() {
                 MoPubLog.log(CLICKED, ADAPTER_NAME);
diff --git a/mopub-sdk/mopub-sdk-base/build.gradle b/mopub-sdk/mopub-sdk-base/build.gradle
index c939da8c..a553e571 100644
--- a/mopub-sdk/mopub-sdk-base/build.gradle
+++ b/mopub-sdk/mopub-sdk-base/build.gradle
@@ -12,7 +12,7 @@ repositories {
 }
 
 dependencies {
-    api 'com.mopub.volley:mopub-volley:2.0.0'
+    api 'com.mopub.volley:mopub-volley:2.1.0'
 
 
     def avidEnabled = project.hasProperty("mopub.avidEnabled") ? project.getProperty("mopub.avidEnabled").toBoolean() : true
diff --git a/mopub-sdk/mopub-sdk-base/src/main/AndroidManifest.xml b/mopub-sdk/mopub-sdk-base/src/main/AndroidManifest.xml
index db86ec57..0eb502d5 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/AndroidManifest.xml
+++ b/mopub-sdk/mopub-sdk-base/src/main/AndroidManifest.xml
@@ -1,9 +1,5 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.mopub.mobileads.base">
 
-    <application>
-        <uses-library
-            android:name="org.apache.http.legacy"
-            android:required="false" />
-    </application>
+    <application/>
 </manifest>
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
index 010d05c4..316c214f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
@@ -13,8 +13,10 @@
 import com.mopub.common.privacy.ConsentData;
 import com.mopub.common.privacy.PersonalInfoManager;
 import com.mopub.common.util.DateAndTime;
+import com.mopub.network.RequestRateTracker;
 
 import static com.mopub.common.ClientMetadata.MoPubNetworkType;
+import com.mopub.common.util.ResponseHeader;
 
 public abstract class AdUrlGenerator extends BaseUrlGenerator {
 
@@ -113,6 +115,16 @@
      */
     private static final String ADVANCED_BIDDING_TOKENS_KEY = "abt";
 
+    /**
+     * Value {@link ResponseHeader#BACKOFF_MS} from previous ad response for this ad unit id. Optional.
+     */
+    private static final String BACKOFF_TIME_MS_KEY = "backoff_ms";
+
+    /**
+     * Value {@link ResponseHeader#BACKOFF_REASON} from previous ad response for this ad unit id. Optional.
+     */
+    private static final String BACKOFF_REASON_KEY = "backoff_reason";
+
     protected Context mContext;
     protected String mAdUnitId;
     protected String mKeywords;
@@ -338,6 +350,8 @@ protected void addBaseParams(final ClientMetadata clientMetadata) {
         setConsentedPrivacyPolicyVersion();
 
         setConsentedVendorListVersion();
+
+        addRequestRateParameters();
     }
 
     private void addParam(String key, MoPubNetworkType value) {
@@ -355,6 +369,17 @@ private static int calculateLocationStalenessInMilliseconds(final Location locat
         return (int) (nowInMillis - locationLastUpdatedInMillis);
     }
 
+    private void addRequestRateParameters() {
+        final RequestRateTracker rateTracker = RequestRateTracker.getInstance();
+        final RequestRateTracker.TimeRecord record = rateTracker.getRecordForAdUnit(mAdUnitId);
+        if (record == null || record.mBlockIntervalMs < 1) {
+            return;
+        }
+
+        addParam(BACKOFF_TIME_MS_KEY, String.valueOf(record.mBlockIntervalMs));
+        addParam(BACKOFF_REASON_KEY, record.mReason);
+    }
+
     /**
      * @deprecated As of release 2.4
      */
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdapterConfigurationManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdapterConfigurationManager.java
index 24f99f9e..e6d8d825 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdapterConfigurationManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdapterConfigurationManager.java
@@ -75,7 +75,7 @@ public void initialize(@NonNull final Context context,
     }
 
     @Nullable
-    public List<String> getAdvancedBidderDetails() {
+    public List<String> getAdapterConfigurationInfo() {
         final Map<String, AdapterConfiguration> adapterConfigurations = mAdapterConfigurations;
         if (adapterConfigurations == null || adapterConfigurations.isEmpty()) {
             return null;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
index 9a2130fd..af70e52e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
@@ -130,8 +130,7 @@ public static ClientMetadata getInstance() {
         return result;
     }
 
-    // NEVER CALL THIS AS A USER. Get it from the Singletons class.
-    public ClientMetadata(@NonNull final Context context) {
+    private ClientMetadata(@NonNull final Context context) {
         Preconditions.checkNotNull(context);
 
         mContext = context.getApplicationContext();
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java
index d177fe5d..a6ae04a1 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java
@@ -8,11 +8,15 @@
 
     private Constants() {}
 
+    static {
+        HOST = "ads.mopub.com";
+    }
+
     public static final String HTTP = "http";
     public static final String HTTPS = "https";
     public static final String INTENT_SCHEME = "intent";
 
-    public static final String HOST = "ads.mopub.com";
+    public static final String HOST;
 
     public static final String AD_HANDLER = "/m/ad";
     public static final String CONVERSION_TRACKING_HANDLER = "/m/open";
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
index a933ba33..cc6dcea8 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
@@ -19,6 +19,7 @@
 
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
+import java.util.List;
 
 import static com.mopub.common.ExternalViewabilitySessionManager.ViewabilityVendor;
 import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
@@ -27,7 +28,7 @@
 import static com.mopub.common.logging.MoPubLog.SdkLogEvent.INIT_FINISHED;
 
 public class MoPub {
-    public static final String SDK_VERSION = "5.5.0";
+    public static final String SDK_VERSION = "5.6.0";
 
     public enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
 
@@ -319,6 +320,15 @@ public static void disableViewability(@NonNull final ViewabilityVendor vendor) {
         vendor.disable();
     }
 
+    @Nullable
+    public static List<String> getAdapterConfigurationInfo() {
+        final AdapterConfigurationManager configurationManager = sAdapterConfigurationManager;
+        if (configurationManager != null) {
+            return configurationManager.getAdapterConfigurationInfo();
+        }
+        return null;
+    }
+
     private static void initializeRewardedVideo(@NonNull Activity activity, @NonNull SdkConfiguration sdkConfiguration) {
         Preconditions.checkNotNull(activity);
         Preconditions.checkNotNull(sdkConfiguration);
@@ -361,7 +371,10 @@ public void run() {
 
         @Override
         public void onInitializationFinished() {
-            MoPubLog.log(INIT_FINISHED, sAdapterConfigurationManager.getAdvancedBidderDetails());
+            final AdapterConfigurationManager adapterConfigurationManager = sAdapterConfigurationManager;
+            if (adapterConfigurationManager != null) {
+                MoPubLog.log(INIT_FINISHED, adapterConfigurationManager.getAdapterConfigurationInfo());
+            }
             initializationFinished(mSdkInitializationListener);
             mSdkInitializationListener = null;
         }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubDefaultLogger.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubDefaultLogger.java
index 0ff0a2db..73b82b37 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubDefaultLogger.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubDefaultLogger.java
@@ -16,6 +16,12 @@
  */
 public class MoPubDefaultLogger implements MoPubLogger {
 
+    /**
+     * Logcat has a max message length of 4kB, so let's split each message by this max message
+     * length. Since each message has some metadata, let's limit this to 3kB.
+     */
+    static int MAX_MESSAGE_LENGTH_BYTES = 3 * 1024;
+
     /**
      * MESSAGE_FORMAT is used to produce a log in the following format:
      * "[com.mopub.common.logging.MoPubLog][log] Ad Custom Log - Loading custom event adapter."
@@ -34,12 +40,28 @@ public MoPubDefaultLogger() {
     @Override
     public void log(@Nullable String className, @Nullable String methodName,
                     @Nullable String identifier, @Nullable String message) {
-        if (identifier == null) {
-            Log.i(MoPubLog.LOGTAG, String.format(MESSAGE_FORMAT, className,
-                    methodName, message));
-        } else {
-            Log.i(MoPubLog.LOGTAG, String.format(MESSAGE_WITH_ID_FORMAT, className,
-                    methodName, identifier, message));
+        for (final String segment : split(message)) {
+            if (identifier == null) {
+                Log.i(MoPubLog.LOGTAG, String.format(MESSAGE_FORMAT, className,
+                        methodName, segment));
+            } else {
+                Log.i(MoPubLog.LOGTAG, String.format(MESSAGE_WITH_ID_FORMAT, className,
+                        methodName, identifier, segment));
+            }
+        }
+    }
+
+    static String[] split(@Nullable final String message) {
+        if (message == null) {
+            return new String[1];
+        }
+
+        final int segmentCount = 1 + (message.length() / MAX_MESSAGE_LENGTH_BYTES);
+        final String[] segments = new String[segmentCount];
+        for (int i = 0; i < segmentCount; i++) {
+            segments[i] = message.substring(i * MAX_MESSAGE_LENGTH_BYTES,
+                    Math.min((i + 1) * MAX_MESSAGE_LENGTH_BYTES, message.length()));
         }
+        return segments;
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/AdvertisingId.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/AdvertisingId.java
index f56f9ded..23d475cf 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/AdvertisingId.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/AdvertisingId.java
@@ -11,10 +11,11 @@
 
 import java.io.Serializable;
 import java.util.Calendar;
+import java.util.TimeZone;
 import java.util.UUID;
 
 public class AdvertisingId implements Serializable {
-    static final long ROTATION_TIME_MS = 24 * 60 * 60 * 1000;
+    static final long ONE_DAY_MS = 24 * 60 * 60 * 1000;
     private static final String PREFIX_IFA = "ifa:";
     private static final String PREFIX_MOPUB = "mopub:";
 
@@ -100,7 +101,7 @@ public boolean isDoNotTrack() {
     static AdvertisingId generateExpiredAdvertisingId() {
         Calendar time = Calendar.getInstance();
         String mopubId = generateIdString();
-        return new AdvertisingId("", mopubId, false, time.getTimeInMillis() - ROTATION_TIME_MS - 1);
+        return new AdvertisingId("", mopubId, false, time.getTimeInMillis() - ONE_DAY_MS - 1);
     }
 
     @NonNull
@@ -116,8 +117,11 @@ static String generateIdString() {
     }
 
     boolean isRotationRequired() {
-        Calendar now = Calendar.getInstance();
-        return now.getTimeInMillis() - mLastRotation.getTimeInMillis() >= ROTATION_TIME_MS;
+        final Calendar now = Calendar.getInstance(TimeZone.getTimeZone("GMT"));
+        final Calendar lastRotation = Calendar.getInstance(TimeZone.getTimeZone("GMT"));
+        lastRotation.setTimeInMillis(mLastRotation.getTimeInMillis());
+        return (now.get(Calendar.DAY_OF_YEAR) != lastRotation.get(Calendar.DAY_OF_YEAR)) ||
+                (now.get(Calendar.YEAR) != lastRotation.get(Calendar.YEAR));
     }
 
     @Override
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogActivity.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogActivity.java
index 7ee9ab00..17ccc85f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogActivity.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogActivity.java
@@ -26,6 +26,7 @@
 import static com.mopub.common.logging.MoPubLog.ConsentLogEvent.SHOW_FAILED;
 import static com.mopub.common.logging.MoPubLog.ConsentLogEvent.SHOW_SUCCESS;
 import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM_WITH_THROWABLE;
 
 public class ConsentDialogActivity extends Activity {
     private static final int CLOSE_BUTTON_DELAY_MS = 10000;
@@ -88,7 +89,17 @@ protected void onCreate(@Nullable Bundle savedInstanceState) {
         requestWindowFeature(Window.FEATURE_NO_TITLE);
         getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
 
-        mView = new ConsentDialogLayout(this);
+        try {
+            mView = new ConsentDialogLayout(this);
+        } catch (RuntimeException e) {
+            // Notably, android.webkit.WebViewFactory$MissingWebViewPackageException
+            MoPubLog.log(CUSTOM_WITH_THROWABLE, "Unable to create WebView", e);
+            MoPubLog.log(SHOW_FAILED, MoPubErrorCode.INTERNAL_ERROR.getIntCode(),
+                    MoPubErrorCode.INTERNAL_ERROR);
+            finish();
+            return;
+        }
+
         mView.setConsentClickListener(new ConsentDialogLayout.ConsentListener() {
             @Override
             public void onConsentClick(ConsentStatus status) {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogController.java
index 64721cce..9d681dc7 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogController.java
@@ -133,6 +133,7 @@ boolean showConsentDialog() {
             return false;
         }
 
+        mReady = false;
         ConsentDialogActivity.start(mAppContext, mHtmlBody);
         resetState();
         return true;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/MoPubIdentifier.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/MoPubIdentifier.java
index 5230e618..10b418b0 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/MoPubIdentifier.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/MoPubIdentifier.java
@@ -80,6 +80,9 @@ public MoPubIdentifier(@NonNull final Context appContext) {
      */
     @NonNull
     public AdvertisingId getAdvertisingInfo() {
+        if (initialized) {
+            rotateMopubId();
+        }
         final AdvertisingId adInfo = mAdInfo;
         refreshAdvertisingInfo();
         return adInfo;
@@ -165,6 +168,10 @@ static synchronized void clearStorage(@NonNull final Context context) {
     }
 
     void rotateMopubId() {
+        if (mAdInfo.mAdvertisingId.endsWith("10ca1ad1abe1")) {
+            MoPubLog.setLogLevel(MoPubLog.LogLevel.DEBUG);
+        }
+
         if (!mAdInfo.isRotationRequired()) {
             setAdvertisingInfo(mAdInfo);
             return;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoManager.java
index 83412b0e..b3552c17 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoManager.java
@@ -64,7 +64,6 @@
     private long mSyncDelayMs = MINIMUM_SYNC_DELAY;
     @Nullable private Long mLastSyncRequestTimeUptimeMs;
     @Nullable private ConsentStatus mSyncRequestConsentStatus;
-    private long mSyncRequestEpochTime;
     private boolean mSyncRequestInFlight;
     private boolean mForceGdprAppliesChanged;
     private boolean mForceGdprAppliesChangedSending;
@@ -444,7 +443,6 @@ void requestSync() {
         MoPubLog.log(SYNC_ATTEMPTED);
 
         mSyncRequestConsentStatus = mPersonalInfoData.getConsentStatus();
-        mSyncRequestEpochTime = Calendar.getInstance().getTimeInMillis();
         mSyncRequestInFlight = true;
 
         mLastSyncRequestTimeUptimeMs = SystemClock.uptimeMillis();
@@ -514,6 +512,7 @@ void attemptStateTransition(@NonNull final ConsentStatus newConsentStatus,
             return;
         }
 
+        mPersonalInfoData.setLastChangedMs("" + Calendar.getInstance().getTimeInMillis());
         mPersonalInfoData.setConsentChangeReason(consentChangeReason);
         mPersonalInfoData.setConsentStatus(newConsentStatus);
         if (ConsentStatus.POTENTIAL_WHITELIST.equals(newConsentStatus) ||
@@ -623,7 +622,6 @@ public void onSuccess(final SyncResponse response) {
                 }
             }
 
-            mPersonalInfoData.setLastChangedMs("" + mSyncRequestEpochTime);
             mPersonalInfoData.setLastSuccessfullySyncedConsentStatus(mSyncRequestConsentStatus);
             mPersonalInfoData.setWhitelisted(response.isWhitelisted());
             mPersonalInfoData.setCurrentVendorListVersion(response.getCurrentVendorListVersion());
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
index ab7c069e..b7f24206 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
@@ -5,6 +5,8 @@
 package com.mopub.common.util;
 
 public enum ResponseHeader {
+    BACKOFF_REASON("backoff_reason"),
+    BACKOFF_MS("backoff_ms"),
     AD_TIMEOUT("x-ad-timeout-ms"),
     AD_TYPE("x-adtype"),
     CLICK_TRACKING_URL("x-clickthrough"),
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdAlertGestureListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdAlertGestureListener.java
index 3c6639ca..b7b2f8a3 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdAlertGestureListener.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdAlertGestureListener.java
@@ -30,11 +30,14 @@
 
     private View mView;
 
+    boolean mIsClicked;
+
     AdAlertGestureListener(View view, @Nullable AdReport adReport) {
         super();
         if (view != null && view.getWidth() > 0) {
             mCurrentThresholdInDips = Math.min(MAXIMUM_THRESHOLD_X_IN_DIPS, view.getWidth() / 3f);
         }
+        mIsClicked = false;
         mView = view;
         mAdReport = adReport;
     }
@@ -47,7 +50,7 @@ public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float d
 
         // e1 is always the initial touch down event.
         // e2 is the true motion event
-        if (isTouchOutOfBoundsOnYAxis(e1.getY(), e2.getY())) {
+        if (isTouchOutOfBoundsOnYAxis(e1, e2)) {
             mCurrentZigZagState = ZigZagState.FAILED;
             return super.onScroll(e1, e2, distanceX, distanceY);
         }
@@ -87,7 +90,12 @@ void reset() {
         mCurrentZigZagState = ZigZagState.UNSET;
     }
 
-    private boolean isTouchOutOfBoundsOnYAxis(float initialY, float currentY) {
+    private boolean isTouchOutOfBoundsOnYAxis(MotionEvent e1, MotionEvent e2) {
+        if (e1 == null || e2 == null) {
+            return false;
+        }
+        final float initialY = e1.getY();
+        final float currentY = e2.getY();
         return (Math.abs(currentY - initialY) > MAXIMUM_THRESHOLD_Y_IN_DIPS);
     }
 
@@ -170,4 +178,18 @@ ZigZagState getCurrentZigZagState() {
     AdAlertReporter getAdAlertReporter(){
         return mAdAlertReporter;
     }
+
+    void onResetUserClick() {
+        mIsClicked = false;
+    }
+
+    boolean isClicked() {
+        return mIsClicked;
+    }
+
+    @Override
+    public boolean onSingleTapUp(MotionEvent e) {
+        mIsClicked = true;
+        return super.onSingleTapUp(e);
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdAlertReporter.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdAlertReporter.java
index 0cffcad8..04c959ab 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdAlertReporter.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdAlertReporter.java
@@ -14,6 +14,7 @@
 import android.widget.Toast;
 
 import com.mopub.common.AdReport;
+import com.mopub.common.VisibleForTesting;
 import com.mopub.common.util.DateAndTime;
 import com.mopub.common.util.Intents;
 import com.mopub.exceptions.IntentNotResolvableException;
@@ -27,6 +28,11 @@
     private static final String DATE_FORMAT_PATTERN = "M/d/yy hh:mm:ss a z";
     private static final int IMAGE_QUALITY = 25;
     private static final String BODY_SEPARATOR = "\n=================\n";
+    @VisibleForTesting
+    static final String MESSAGE = "Thank you for taking the time to tell us about your ad experience.\n" +
+            "\n" +
+            "Please share with us how the ad experience was poor:\n" +
+            "\n";
 
     private final String mDateString;
 
@@ -115,6 +121,9 @@ private void addEmailSubject() {
 
     private void addEmailBody(String... data) {
         StringBuilder body = new StringBuilder();
+        body.append(MESSAGE);
+        body.append(BODY_SEPARATOR);
+
         int i = 0;
         while (i<data.length) {
             body.append(data[i]);
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
index 8a644894..deaf935a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
@@ -13,7 +13,6 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
-import android.util.Log;
 import android.view.Gravity;
 import android.view.View;
 import android.widget.FrameLayout;
@@ -72,7 +71,7 @@
 
     private boolean mIsDestroyed;
     private Handler mHandler;
-    private boolean mExpanded;
+    private boolean mHasOverlay;
 
     // This is the power of the exponential term in the exponential backoff calculation.
     @VisibleForTesting
@@ -409,7 +408,7 @@ void pauseRefresh() {
     }
 
     void resumeRefresh() {
-        if (mShouldAllowAutoRefresh && !mExpanded) {
+        if (mShouldAllowAutoRefresh && !mHasOverlay) {
             setAutoRefreshStatus(true);
         }
     }
@@ -435,13 +434,13 @@ private void setAutoRefreshStatus(final boolean newAutoRefreshStatus) {
         }
     }
 
-    void expand() {
-        mExpanded = true;
+    void engageOverlay() {
+        mHasOverlay = true;
         pauseRefresh();
     }
 
-    void collapse() {
-        mExpanded = false;
+    void dismissOverlay() {
+        mHasOverlay = false;
         resumeRefresh();
     }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
index cbfd3761..2cccfa12 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
@@ -6,6 +6,7 @@
 
 import android.content.Context;
 import android.graphics.Color;
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.view.MotionEvent;
 import android.view.View;
@@ -17,11 +18,10 @@
 import com.mopub.network.Networking;
 
 import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
-import static com.mopub.mobileads.ViewGestureDetector.UserClickListener;
 
-public class BaseHtmlWebView extends BaseWebView implements UserClickListener {
+public class BaseHtmlWebView extends BaseWebView {
+    @NonNull
     private final ViewGestureDetector mViewGestureDetector;
-    private boolean mClicked;
 
     public BaseHtmlWebView(Context context, AdReport adReport) {
         super(context);
@@ -30,7 +30,6 @@ public BaseHtmlWebView(Context context, AdReport adReport) {
         getSettings().setJavaScriptEnabled(true);
 
         mViewGestureDetector = new ViewGestureDetector(context, this, adReport);
-        mViewGestureDetector.setUserClickListener(this);
 
         enablePlugins(true);
         setBackgroundColor(Color.TRANSPARENT);
@@ -88,7 +87,7 @@ void loadHtmlResponse(String htmlResponse) {
     void initializeOnTouchListener() {
         setOnTouchListener(new View.OnTouchListener() {
             public boolean onTouch(View v, MotionEvent event) {
-                mViewGestureDetector.sendTouchEvent(event);
+                mViewGestureDetector.onTouchEvent(event);
 
                 // We're not handling events if the current action is ACTION_MOVE
                 return event.getAction() == MotionEvent.ACTION_MOVE;
@@ -96,18 +95,15 @@ public boolean onTouch(View v, MotionEvent event) {
         });
     }
 
-    @Override
-    public void onUserClick() {
-        mClicked = true;
-    }
-
-    @Override
     public void onResetUserClick() {
-        mClicked = false;
+        final ViewGestureDetector gestureDetector = mViewGestureDetector;
+        if (gestureDetector != null) {
+            gestureDetector.onResetUserClick();
+        }
     }
 
-    @Override
     public boolean wasClicked() {
-        return mClicked;
+        final ViewGestureDetector gestureDetector = mViewGestureDetector;
+        return gestureDetector != null && gestureDetector.isClicked();
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/FacebookKeywordProvider.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/FacebookKeywordProvider.java
deleted file mode 100644
index ce635797..00000000
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/FacebookKeywordProvider.java
+++ /dev/null
@@ -1,21 +0,0 @@
-// Copyright 2018-2019 Twitter, Inc.
-// Licensed under the MoPub SDK License Agreement
-// http://www.mopub.com/legal/sdk-license-agreement/
-
-package com.mopub.mobileads;
-
-import android.content.Context;
-
-/**
- * @deprecated As of release 2.4
- */
-@Deprecated
-public class FacebookKeywordProvider {
-    /**
-     * @deprecated As of release 2.4
-     */
-    @Deprecated
-    public static String getKeyword(Context context) {
-        return null;
-    }
-}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
index cde5933c..2a35bf22 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
@@ -356,27 +356,27 @@ public void setAutorefreshEnabled(boolean enabled) {
         }
     }
 
-    void pauseAutorefresh() {
+    void pauseAutoRefresh() {
         if (mAdViewController != null) {
             mAdViewController.pauseRefresh();
         }
     }
 
-    void resumeAutorefresh() {
+    void resumeAutoRefresh() {
         if (mAdViewController != null) {
             mAdViewController.resumeRefresh();
         }
     }
 
-    void expand() {
+    void engageOverlay() {
         if (mAdViewController != null) {
-            mAdViewController.expand();
+            mAdViewController.engageOverlay();
         }
     }
 
-    void collapse() {
+    void dismissOverlay() {
         if (mAdViewController != null) {
-            mAdViewController.collapse();
+            mAdViewController.dismissOverlay();
         }
     }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ViewGestureDetector.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ViewGestureDetector.java
index 54f7c7a4..325a9bba 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ViewGestureDetector.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ViewGestureDetector.java
@@ -12,27 +12,18 @@
 import android.view.View;
 
 import com.mopub.common.AdReport;
-import com.mopub.common.logging.MoPubLog;
-
-import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+import com.mopub.common.VisibleForTesting;
 
 public class ViewGestureDetector extends GestureDetector {
     private final View mView;
-
-    public interface UserClickListener {
-        void onUserClick();
-        void onResetUserClick();
-        boolean wasClicked();
-    }
-
+    @NonNull
     private AdAlertGestureListener mAdAlertGestureListener;
-    private UserClickListener mUserClickListener;
 
     public ViewGestureDetector(@NonNull Context context, @NonNull View view, @Nullable AdReport adReport)  {
         this(context, view, new AdAlertGestureListener(view, adReport));
     }
 
-    private ViewGestureDetector(Context context, View view, AdAlertGestureListener adAlertGestureListener) {
+    private ViewGestureDetector(Context context, View view, @NonNull AdAlertGestureListener adAlertGestureListener) {
         super(context, adAlertGestureListener);
 
         mAdAlertGestureListener = adAlertGestureListener;
@@ -41,25 +32,16 @@ private ViewGestureDetector(Context context, View view, AdAlertGestureListener a
         setIsLongpressEnabled(false);
     }
 
-    public void sendTouchEvent(MotionEvent motionEvent) {
+    @Override
+    public boolean onTouchEvent(MotionEvent motionEvent) {
+        final boolean result = super.onTouchEvent(motionEvent);
         switch (motionEvent.getAction()) {
             case MotionEvent.ACTION_UP:
-                if (mUserClickListener != null) {
-                    mUserClickListener.onUserClick();
-                } else {
-                    MoPubLog.log(CUSTOM, "View's onUserClick() is not registered.");
-                }
                 mAdAlertGestureListener.finishGestureDetection();
                 break;
 
-            case MotionEvent.ACTION_DOWN:
-                onTouchEvent(motionEvent);
-                break;
-
             case MotionEvent.ACTION_MOVE:
-                if (isMotionEventInView(motionEvent, mView)) {
-                    onTouchEvent(motionEvent);
-                } else {
+                if (!isMotionEventInView(motionEvent, mView)) {
                     resetAdFlaggingGesture();
                 }
                 break;
@@ -67,10 +49,7 @@ public void sendTouchEvent(MotionEvent motionEvent) {
             default:
                 break;
         }
-    }
-
-    public void setUserClickListener(UserClickListener listener) {
-        mUserClickListener = listener;
+        return result;
     }
 
     void resetAdFlaggingGesture() {
@@ -89,8 +68,21 @@ private boolean isMotionEventInView(MotionEvent motionEvent, View view) {
                 && (y >= 0 && y <= view.getHeight());
     }
 
+    public void onResetUserClick() {
+        mAdAlertGestureListener.onResetUserClick();
+    }
+
+    public boolean isClicked() {
+        return mAdAlertGestureListener.isClicked();
+    }
+
     @Deprecated // for testing
-    void setAdAlertGestureListener(AdAlertGestureListener adAlertGestureListener) {
+    void setAdAlertGestureListener(@NonNull AdAlertGestureListener adAlertGestureListener) {
         mAdAlertGestureListener = adAlertGestureListener;
     }
+
+    @VisibleForTesting
+    public void setClicked(boolean clicked) {
+        mAdAlertGestureListener.mIsClicked = clicked;
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidBridge.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidBridge.java
index 030d0266..57c8daec 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidBridge.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidBridge.java
@@ -7,6 +7,7 @@
 import android.content.Context;
 import android.graphics.Color;
 import android.graphics.Rect;
+import android.net.Uri;
 import android.os.Build;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
@@ -29,23 +30,20 @@
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.BaseWebView;
 import com.mopub.mobileads.ViewGestureDetector;
-import com.mopub.mobileads.ViewGestureDetector.UserClickListener;
 import com.mopub.mraid.MraidNativeCommandHandler.MraidCommandFailureListener;
 import com.mopub.network.Networking;
 
-import org.apache.http.NameValuePair;
-import org.apache.http.client.utils.URLEncodedUtils;
 import org.json.JSONObject;
 
 import java.io.UnsupportedEncodingException;
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.net.URLEncoder;
-import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
 import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+import static com.mopub.network.MoPubRequestUtils.getQueryParamMap;
 
 public class MraidBridge {
     private final AdReport mAdReport;
@@ -89,7 +87,7 @@ void onSetOrientationProperties(boolean allowOrientationChange, MraidOrientation
 
     @Nullable private MraidWebView mMraidWebView;
 
-    private boolean mIsClicked;
+    @Nullable private ViewGestureDetector mGestureDetector;
 
     private boolean mHasLoaded;
 
@@ -150,29 +148,13 @@ public void onShowCustomView(final View view, final CustomViewCallback callback)
             }
         });
 
-        final ViewGestureDetector gestureDetector = new ViewGestureDetector(
+        mGestureDetector = new ViewGestureDetector(
                 mMraidWebView.getContext(), mMraidWebView, mAdReport);
-        gestureDetector.setUserClickListener(new UserClickListener() {
-            @Override
-            public void onUserClick() {
-                mIsClicked = true;
-            }
-
-            @Override
-            public void onResetUserClick() {
-                mIsClicked = false;
-            }
-
-            @Override
-            public boolean wasClicked() {
-                return mIsClicked;
-            }
-        });
 
         mMraidWebView.setOnTouchListener(new OnTouchListener() {
             @Override
             public boolean onTouch(final View v, final MotionEvent event) {
-                gestureDetector.sendTouchEvent(event);
+                mGestureDetector.onTouchEvent(event);
 
                 switch (event.getAction()) {
                     case MotionEvent.ACTION_DOWN:
@@ -345,15 +327,17 @@ public void onReceivedError(@NonNull WebView view, int errorCode,
 
     @VisibleForTesting
     boolean handleShouldOverrideUrl(@NonNull final String url) {
-        URI uri;
         try {
-            uri = new URI(url);
+            // This is purely for validating the URI before proceeding
+            final URI uri = new URI(url);
         } catch (URISyntaxException e) {
             MoPubLog.log(CUSTOM, "Invalid MRAID URL: " + url);
             fireErrorEvent(MraidJavascriptCommand.UNSPECIFIED, "Mraid command sent an invalid URL");
             return true;
         }
 
+        Uri uri = Uri.parse(url);
+
         // Note that scheme will be null when we are passed a relative Uri
         String scheme = uri.getScheme();
         String host = uri.getHost();
@@ -369,12 +353,12 @@ boolean handleShouldOverrideUrl(@NonNull final String url) {
 
         // This block converts all other URLs, including sms://, tel:// into MRAID URL. It checks for
         // 'clicked' in order to avoid interfering with automatic browser redirects.
-        if (mIsClicked && !"mraid".equals(scheme)) {
+        if (isClicked() && !"mraid".equals(scheme)) {
             try {
-                uri = new URI(MRAID_OPEN + URLEncoder.encode(url, "UTF-8"));
+                uri = Uri.parse(MRAID_OPEN + URLEncoder.encode(url, "UTF-8"));
                 host = uri.getHost();
                 scheme = uri.getScheme();
-            } catch (URISyntaxException | UnsupportedEncodingException e) {
+            } catch (UnsupportedEncodingException e) {
                 MoPubLog.log(CUSTOM, "Invalid MRAID URL encoding: " + url);
                 fireErrorEvent(MraidJavascriptCommand.OPEN, "Non-mraid URL is invalid");
                 return false;
@@ -382,13 +366,9 @@ boolean handleShouldOverrideUrl(@NonNull final String url) {
         }
 
         if ("mraid".equals(scheme)) {
-            Map<String, String> params = new HashMap<>();
-            for (NameValuePair pair : URLEncodedUtils.parse(uri, "UTF-8")) {
-                params.put(pair.getName(), pair.getValue());
-            }
             MraidJavascriptCommand command = MraidJavascriptCommand.fromJavascriptString(host);
             try {
-                runCommand(command, params);
+                runCommand(command, getQueryParamMap(uri));
             } catch (MraidCommandException | IllegalArgumentException exception) {
                 fireErrorEvent(command, exception.getMessage());
             }
@@ -419,7 +399,7 @@ private void handlePageFinished() {
     void runCommand(@NonNull final MraidJavascriptCommand command,
             @NonNull Map<String, String> params)
             throws MraidCommandException {
-        if (command.requiresClick(mPlacementType) && !mIsClicked) {
+        if (command.requiresClick(mPlacementType) && !isClicked()) {
             throw new MraidCommandException("Cannot execute this command unless the user clicks");
         }
 
@@ -639,7 +619,8 @@ void notifyReady() {
     }
 
     boolean isClicked() {
-        return mIsClicked;
+        final ViewGestureDetector gDetector = mGestureDetector;
+        return gDetector != null && gDetector.isClicked();
     }
 
     boolean isViewable() {
@@ -662,6 +643,9 @@ MraidWebView getMraidWebView() {
 
     @VisibleForTesting
     void setClicked(boolean clicked) {
-        mIsClicked = clicked;
+        final ViewGestureDetector gDetector = mGestureDetector;
+        if (gDetector != null) {
+            gDetector.setClicked(clicked);
+        }
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
index af0fc247..636ec4c5 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
@@ -62,6 +62,7 @@
         void onLoaded(View view);
         void onFailedToLoad();
         void onExpand();
+        void onResize(final boolean toOriginalSize);
         void onOpen();
         void onClose();
     }
@@ -651,6 +652,7 @@ public void destroy() {
         // Calling destroy eliminates a memory leak on Gingerbread devices
         detachMraidWebView();
         detachTwoParWebView();
+        unApplyOrientation();
     }
 
     private void detachMraidWebView() {
@@ -676,18 +678,32 @@ private void setViewState(@NonNull ViewState viewState) {
         }
 
         if (mMraidListener != null) {
-            if (viewState == ViewState.EXPANDED) {
-                mMraidListener.onExpand();
-            } else if (previousViewState == ViewState.EXPANDED && viewState == ViewState.DEFAULT) {
-                mMraidListener.onClose();
-            } else if (viewState == ViewState.HIDDEN) {
-                mMraidListener.onClose();
-            }
+            callMraidListenerCallbacks(mMraidListener, previousViewState, viewState);
         }
 
         updateScreenMetricsAsync(null);
     }
 
+    @VisibleForTesting
+    static void callMraidListenerCallbacks(@NonNull final MraidListener mraidListener,
+            @NonNull final ViewState previousViewState, @NonNull final ViewState currentViewState) {
+        Preconditions.checkNotNull(mraidListener);
+        Preconditions.checkNotNull(previousViewState);
+        Preconditions.checkNotNull(currentViewState);
+
+        if (currentViewState == ViewState.EXPANDED) {
+            mraidListener.onExpand();
+        } else if (previousViewState == ViewState.EXPANDED && currentViewState == ViewState.DEFAULT) {
+            mraidListener.onClose();
+        } else if (currentViewState == ViewState.HIDDEN) {
+            mraidListener.onClose();
+        } else if (previousViewState == ViewState.RESIZED && currentViewState == ViewState.DEFAULT) {
+            mraidListener.onResize(true);
+        } else if (currentViewState == ViewState.RESIZED) {
+            mraidListener.onResize(false);
+        }
+    }
+
     int clampInt(int min, int target, int max) {
         return Math.max(min, Math.min(target, max));
     }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdLoader.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdLoader.java
index b4c8f000..5c58894c 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdLoader.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdLoader.java
@@ -143,6 +143,7 @@ public boolean hasMoreAds() {
         if (mRunning) {
             return mMultiAdRequest;
         }
+
         if (mFailed) {
             // call back using handler to make sure it is always async.
             mHandler.post(new Runnable() {
@@ -158,7 +159,19 @@ public void run() {
 
             // not running and not failed: start it for the first time
             if (mMultiAdResponse == null) {
-                return fetchAd(mMultiAdRequest, mContext.get());
+                if (RequestRateTracker.getInstance().isBlockedByRateLimit(mMultiAdRequest.mAdUnitId)) {
+                    // report no fill
+                    MoPubLog.log(MoPubLog.SdkLogEvent.CUSTOM, mMultiAdRequest.mAdUnitId + " is blocked by request rate limiting.");
+                    mHandler.post(new Runnable() {
+                        @Override
+                        public void run() {
+                            deliverError(new MoPubNetworkError(MoPubNetworkError.Reason.NO_FILL));
+                        }
+                    });
+                    return null;
+                } else {
+                    return fetchAd(mMultiAdRequest, mContext.get()); // first request
+                }
             }
 
             // report creative download error to the server
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequestUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequestUtils.java
index ae277ab8..a3b15d56 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequestUtils.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequestUtils.java
@@ -66,9 +66,16 @@ public static int chooseMethod(String url) {
         Preconditions.checkNotNull(context);
         Preconditions.checkNotNull(url);
 
-        final Map<String, String> params = new HashMap<>();
         HurlStack.UrlRewriter rewriter = Networking.getUrlRewriter(context);
         final Uri uri = Uri.parse(rewriter.rewriteUrl(url));
+        return getQueryParamMap(uri);
+    }
+
+    @NonNull
+    public static Map<String, String> getQueryParamMap(@NonNull final Uri uri) {
+        Preconditions.checkNotNull(uri);
+
+        final Map<String, String> params = new HashMap<>();
         for (final String queryParam : uri.getQueryParameterNames()) {
             params.put(queryParam, TextUtils.join(",", uri.getQueryParameters(queryParam)));
         }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MultiAdResponse.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MultiAdResponse.java
index c40fbe40..d6eadb3e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MultiAdResponse.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MultiAdResponse.java
@@ -90,6 +90,10 @@ public MultiAdResponse(@NonNull final Context appContext,
         mFailUrl = jsonObject.optString(ResponseHeader.FAIL_URL.getKey());
         String requestId = jsonObject.optString(ResponseHeader.REQUEST_ID.getKey());
 
+        final Integer backoffMs = extractIntegerHeader(jsonObject, ResponseHeader.BACKOFF_MS);
+        final String backoffReason = extractHeader(jsonObject, ResponseHeader.BACKOFF_REASON);
+        RequestRateTracker.getInstance().registerRateLimit(adUnitId, backoffMs, backoffReason);
+
         final boolean invalidateConsent = extractBooleanHeader(jsonObject,
                 ResponseHeader.INVALIDATE_CONSENT, false);
         final boolean forceExplicitNo = extractBooleanHeader(jsonObject,
@@ -113,6 +117,13 @@ public MultiAdResponse(@NonNull final Context appContext,
             }
         }
 
+        final boolean enableDebugLogging = extractBooleanHeader(jsonObject,
+                ResponseHeader.ENABLE_DEBUG_LOGGING, false);
+
+        if (enableDebugLogging) {
+            MoPubLog.setLogLevel(MoPubLog.LogLevel.DEBUG);
+        }
+
         JSONArray adResponses = jsonObject.getJSONArray(ResponseHeader.AD_RESPONSES.getKey());
         int ADS_PER_RESPONSE = 3;
         List<AdResponse> list = new ArrayList<>(ADS_PER_RESPONSE);
@@ -424,12 +435,6 @@ protected static AdResponse parseSingleAdResponse(@NonNull final Context appCont
             builder.setShouldRewardOnClick(shouldRewardOnClick);
         }
 
-        // Enabled debug logging
-        if (extractBooleanHeader(jsonHeaders,
-                ResponseHeader.ENABLE_DEBUG_LOGGING, false)) {
-            MoPubLog.setLogLevel(MoPubLog.LogLevel.DEBUG);
-        }
-
         return builder.build();
     }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java
index e45cfff2..a14bacc6 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java
@@ -11,12 +11,14 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.support.v4.util.LruCache;
+import android.text.TextUtils;
 import android.webkit.WebSettings;
 import android.webkit.WebView;
 
 import com.mopub.common.Constants;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.DeviceUtils;
 import com.mopub.volley.Cache;
 import com.mopub.volley.Network;
@@ -31,10 +33,22 @@
 
 import javax.net.ssl.SSLSocketFactory;
 
+import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
+
 public class Networking {
     @VisibleForTesting
     static final String CACHE_DIRECTORY_NAME = "mopub-volley-cache";
-    private static final String DEFAULT_USER_AGENT = System.getProperty("http.agent");
+    @NonNull private static final String DEFAULT_USER_AGENT;
+
+    static {
+        String userAgent = "";
+        try {
+            userAgent = System.getProperty("http.agent", "");
+        } catch (SecurityException e) {
+            MoPubLog.log(CUSTOM, "Unable to get system user agent.");
+        }
+        DEFAULT_USER_AGENT = userAgent;
+    }
 
     // These are volatile so that double-checked locking works.
     // See https://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Java
@@ -139,36 +153,34 @@ public void putBitmap(final String key, final Bitmap bitmap) {
     public static String getUserAgent(@NonNull Context context) {
         Preconditions.checkNotNull(context);
 
-        String userAgent = sUserAgent;
-        if (userAgent == null) {
-            synchronized (Networking.class) {
-                userAgent = sUserAgent;
-                if (userAgent == null) {
-                    try {
-                        // WebViews may only be instantiated on the UI thread. If anything goes
-                        // wrong with getting a user agent, use the system-specific user agent.
-                        if (Looper.myLooper() == Looper.getMainLooper()) {
-                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
-                                userAgent = WebSettings.getDefaultUserAgent(context);
-                            } else {
-                                userAgent = new WebView(context).getSettings().getUserAgentString();
-                            }
-                        } else {
-                            // Since we are not on the main thread, return the default user agent
-                            // for now. Defer to when this is run on the main thread to actually
-                            // set the user agent.
-                            return DEFAULT_USER_AGENT;
-                        }
-                    } catch (Exception e) {
-                        // Some custom ROMs may fail to get a user agent. If that happens, return
-                        // the Android system user agent.
-                        userAgent = DEFAULT_USER_AGENT;
-                    }
-                    sUserAgent = userAgent;
-                }
-            }
+        final String volatileUserAgentCopy = sUserAgent;
+        if (!TextUtils.isEmpty(volatileUserAgentCopy)) {
+            return volatileUserAgentCopy;
+        }
+
+        // WebViews may only be instantiated on the UI thread. If anything goes
+        // wrong with getting a user agent, use the system-specific user agent.
+        if (Looper.myLooper() != Looper.getMainLooper()) {
+            // Since we are not on the main thread, return the default user agent
+            // for now. Defer to when this is run on the main thread to actually
+            // set the user agent.
+            return DEFAULT_USER_AGENT;
         }
 
+        // Some custom ROMs may fail to get a user agent. If that happens, return
+        // the Android system user agent.
+        String userAgent = DEFAULT_USER_AGENT;
+        try {
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+                userAgent = WebSettings.getDefaultUserAgent(context);
+            } else {
+                userAgent = new WebView(context).getSettings().getUserAgentString();
+            }
+        } catch (Exception e) {
+            MoPubLog.log(CUSTOM,
+                    "Failed to get a user agent. Defaulting to the system user agent.");
+        }
+        sUserAgent = userAgent;
         return userAgent;
     }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/RequestRateTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/RequestRateTracker.java
new file mode 100644
index 00000000..792516ce
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/RequestRateTracker.java
@@ -0,0 +1,96 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.network;
+
+import android.os.SystemClock;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.mopub.common.VisibleForTesting;
+
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Singleton to cache ad request rate limit time interval and reason.
+ */
+public class RequestRateTracker {
+
+    public static class TimeRecord {
+        final long mBlockStartTime;
+        public final int mBlockIntervalMs;
+        @NonNull
+        public final String mReason;
+
+        TimeRecord(int interval, @Nullable final String reason) {
+            mBlockStartTime = currentTimeMs();
+            mBlockIntervalMs = interval;
+            mReason = reason == null ? "unknown" : reason;
+        }
+
+        long getTargetTime() {
+            return mBlockStartTime + mBlockIntervalMs;
+        }
+    }
+
+    @NonNull
+    private Map<String, TimeRecord> mTimeRecordMap;
+
+    private static class Helper {
+        @NonNull
+        private static RequestRateTracker sInstance = new RequestRateTracker();
+    }
+
+    RequestRateTracker() {
+        mTimeRecordMap = Collections.synchronizedMap(new HashMap<String, TimeRecord>());
+    }
+
+    @NonNull
+    public static RequestRateTracker getInstance() {
+        return Helper.sInstance;
+    }
+
+    void registerRateLimit(@Nullable final String adUnit, @Nullable final Integer blockIntervalMs, @Nullable final String reason) {
+        if (TextUtils.isEmpty(adUnit)) {
+            return;
+        }
+
+        if (blockIntervalMs != null && blockIntervalMs > 0) {
+            mTimeRecordMap.put(adUnit, new TimeRecord(blockIntervalMs, reason));
+        } else {
+            mTimeRecordMap.remove(adUnit);
+        }
+    }
+
+    boolean isBlockedByRateLimit(@Nullable final String adUnitId) {
+        return getTimeUntilLimitEnds(adUnitId) > 0;
+    }
+
+    @Nullable
+    public TimeRecord getRecordForAdUnit(@Nullable final String adUnitId) {
+        return mTimeRecordMap.get(adUnitId);
+    }
+
+    private long getTimeUntilLimitEnds(@Nullable final String adUnitId) {
+        final TimeRecord record = mTimeRecordMap.get(adUnitId);
+        if (record == null) {
+            return 0;
+        }
+
+        return record.getTargetTime() - currentTimeMs();
+    }
+
+    private static long currentTimeMs() {
+        return SystemClock.elapsedRealtime();
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    static void setInstance(@NonNull RequestRateTracker mockInstance) {
+        Helper.sInstance = mockInstance;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
index c9fabf52..a0caeb37 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
@@ -70,6 +70,11 @@ Long getBroadcastIdentifier() {
         return mBroadcastIdentifier;
     }
 
+    @Nullable
+    String getResponseString() {
+        return getResponseString(mAdReport);
+    }
+
     protected void showInterstitialCloseButton() {
         if (mCloseableLayout != null) {
             mCloseableLayout.setCloseVisible(true);
@@ -97,4 +102,9 @@ protected static AdReport getAdReportFromIntent(Intent intent) {
             return null;
         }
     }
+
+    @Nullable
+    static String getResponseString(AdReport adReport) {
+        return adReport != null ? adReport.getResponseString() : null;
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
index b54ad203..54b843d1 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
@@ -34,13 +34,13 @@ protected void extractExtras(Map<String, String> serverExtras) {
     @Override
     protected void preRenderHtml(CustomEventInterstitialListener customEventInterstitialListener) {
         MoPubLog.log(LOAD_ATTEMPTED, ADAPTER_NAME);
-        MoPubActivity.preRenderHtml(this, mContext, mAdReport, customEventInterstitialListener, mHtmlData, mClickthroughUrl, mBroadcastIdentifier);
+        MoPubActivity.preRenderHtml(this, mContext, mAdReport, customEventInterstitialListener, mClickthroughUrl, mBroadcastIdentifier);
     }
 
     @Override
     public void showInterstitial() {
         MoPubLog.log(SHOW_ATTEMPTED, ADAPTER_NAME);
-        MoPubActivity.start(mContext, mHtmlData, mAdReport, mClickthroughUrl, mOrientation,
+        MoPubActivity.start(mContext, mAdReport, mClickthroughUrl, mOrientation,
                 mBroadcastIdentifier);
     }
 }
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java
index 145ea8a4..f1d1037f 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java
@@ -28,18 +28,17 @@
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static com.mopub.common.DataKeys.CLICKTHROUGH_URL_KEY;
 import static com.mopub.common.DataKeys.CREATIVE_ORIENTATION_KEY;
-import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.common.logging.MoPubLog.AdLogEvent.CLICKED;
+import static com.mopub.common.logging.MoPubLog.AdLogEvent.CUSTOM;
 import static com.mopub.common.logging.MoPubLog.AdLogEvent.DID_DISAPPEAR;
 import static com.mopub.common.logging.MoPubLog.AdLogEvent.LOAD_ATTEMPTED;
 import static com.mopub.common.logging.MoPubLog.AdLogEvent.LOAD_FAILED;
 import static com.mopub.common.logging.MoPubLog.AdLogEvent.LOAD_SUCCESS;
 import static com.mopub.common.logging.MoPubLog.AdLogEvent.SHOW_ATTEMPTED;
-import static com.mopub.common.logging.MoPubLog.AdLogEvent.CUSTOM;
 import static com.mopub.common.logging.MoPubLog.AdLogEvent.SHOW_SUCCESS;
 import static com.mopub.common.logging.MoPubLog.AdLogEvent.WILL_LEAVE_APPLICATION;
 import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
@@ -53,10 +52,10 @@
     @Nullable private HtmlInterstitialWebView mHtmlInterstitialWebView;
     @Nullable private ExternalViewabilitySessionManager mExternalViewabilitySessionManager;
 
-    public static void start(Context context, String htmlData, AdReport adReport, String clickthroughUrl,
-            CreativeOrientation creativeOrientation, long broadcastIdentifier) {
+    public static void start(Context context, AdReport adReport, String clickthroughUrl,
+                             CreativeOrientation creativeOrientation, long broadcastIdentifier) {
         MoPubLog.log(SHOW_ATTEMPTED);
-        Intent intent = createIntent(context, htmlData, adReport, clickthroughUrl,
+        Intent intent = createIntent(context, adReport, clickthroughUrl,
                 creativeOrientation, broadcastIdentifier);
         try {
             context.startActivity(intent);
@@ -66,10 +65,9 @@ public static void start(Context context, String htmlData, AdReport adReport, St
     }
 
     static Intent createIntent(Context context,
-            String htmlData, AdReport adReport, String clickthroughUrl,
-            CreativeOrientation orientation, long broadcastIdentifier) {
+                               AdReport adReport, String clickthroughUrl,
+                               CreativeOrientation orientation, long broadcastIdentifier) {
         Intent intent = new Intent(context, MoPubActivity.class);
-        intent.putExtra(HTML_RESPONSE_BODY_KEY, htmlData);
         intent.putExtra(CLICKTHROUGH_URL_KEY, clickthroughUrl);
         intent.putExtra(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
         intent.putExtra(AD_REPORT_KEY, adReport);
@@ -82,7 +80,6 @@ static void preRenderHtml(final Interstitial baseInterstitial,
             final Context context,
             final AdReport adReport,
             final CustomEventInterstitialListener customEventInterstitialListener,
-            final String htmlData,
             final String clickthroughUrl,
             final long broadcastIdentifier) {
         MoPubLog.log(LOAD_ATTEMPTED);
@@ -109,7 +106,7 @@ public boolean shouldOverrideUrlLoading(WebView view, String url) {
                 new ExternalViewabilitySessionManager(context);
         externalViewabilitySessionManager.createDisplaySession(context, htmlInterstitialWebView, true);
 
-        htmlInterstitialWebView.loadHtmlResponse(htmlData);
+        htmlInterstitialWebView.loadHtmlResponse(getResponseString(adReport));
         WebViewCacheService.storeWebViewConfig(broadcastIdentifier, baseInterstitial,
                 htmlInterstitialWebView, externalViewabilitySessionManager, null);
     }
@@ -117,8 +114,8 @@ public boolean shouldOverrideUrlLoading(WebView view, String url) {
     @Override
     public View getAdView() {
         Intent intent = getIntent();
-        String clickthroughUrl = intent.getStringExtra(CLICKTHROUGH_URL_KEY);
-        String htmlResponse = intent.getStringExtra(HTML_RESPONSE_BODY_KEY);
+        final String clickthroughUrl = intent.getStringExtra(CLICKTHROUGH_URL_KEY);
+        final String htmlData = getResponseString();
 
         final Long broadcastIdentifier = getBroadcastIdentifier();
         if (broadcastIdentifier != null) {
@@ -146,7 +143,7 @@ public View getAdView() {
         
         mExternalViewabilitySessionManager = new ExternalViewabilitySessionManager(this);
         mExternalViewabilitySessionManager.createDisplaySession(this, mHtmlInterstitialWebView, true);
-        mHtmlInterstitialWebView.loadHtmlResponse(htmlResponse);
+        mHtmlInterstitialWebView.loadHtmlResponse(htmlData);
         return mHtmlInterstitialWebView;
     }
 
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
index 4b15d434..e989a5de 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
@@ -10,6 +10,7 @@
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.text.TextUtils;
 import android.util.Log;
 import android.view.View;
 import android.view.WindowManager;
@@ -38,7 +39,6 @@
 import static com.mopub.common.DataKeys.AD_REPORT_KEY;
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static com.mopub.common.DataKeys.CREATIVE_ORIENTATION_KEY;
-import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
@@ -65,7 +65,6 @@
     public static void preRenderHtml(@NonNull final Interstitial mraidInterstitial,
             @NonNull final Context context,
             @NonNull final CustomEventInterstitialListener customEventInterstitialListener,
-            @Nullable final String htmlData,
             @NonNull final Long broadcastIdentifier,
             @Nullable final AdReport adReport) {
         Preconditions.checkNotNull(mraidInterstitial);
@@ -73,7 +72,7 @@ public static void preRenderHtml(@NonNull final Interstitial mraidInterstitial,
         Preconditions.checkNotNull(customEventInterstitialListener);
         Preconditions.checkNotNull(broadcastIdentifier);
 
-        preRenderHtml(mraidInterstitial, customEventInterstitialListener, htmlData,
+        preRenderHtml(mraidInterstitial, customEventInterstitialListener, getResponseString(adReport),
                 new MraidBridge.MraidWebView(context), broadcastIdentifier,
                 new MraidController(context, adReport, PlacementType.INTERSTITIAL));
     }
@@ -140,11 +139,10 @@ public void onReceivedError(final WebView view, final int errorCode,
 
     public static void start(@NonNull final Context context,
             @Nullable final AdReport adreport,
-            @Nullable final String htmlData,
             final long broadcastIdentifier,
             @Nullable final CreativeOrientation orientation) {
         MoPubLog.log(SHOW_ATTEMPTED);
-        final Intent intent = createIntent(context, adreport, htmlData, broadcastIdentifier,
+        final Intent intent = createIntent(context, adreport, broadcastIdentifier,
                 orientation);
         try {
             context.startActivity(intent);
@@ -158,11 +156,9 @@ public static void start(@NonNull final Context context,
     @VisibleForTesting
     protected static Intent createIntent(@NonNull final Context context,
             @Nullable final AdReport adReport,
-            @Nullable final String htmlData,
             final long broadcastIdentifier,
             @Nullable final CreativeOrientation orientation) {
         Intent intent = new Intent(context, MraidActivity.class);
-        intent.putExtra(HTML_RESPONSE_BODY_KEY, htmlData);
         intent.putExtra(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
         intent.putExtra(AD_REPORT_KEY, adReport);
         intent.putExtra(CREATIVE_ORIENTATION_KEY, orientation);
@@ -172,8 +168,8 @@ protected static Intent createIntent(@NonNull final Context context,
 
     @Override
     public View getAdView() {
-        String htmlData = getIntent().getStringExtra(HTML_RESPONSE_BODY_KEY);
-        if (htmlData == null) {
+        final String htmlData = getResponseString();
+        if (TextUtils.isEmpty(htmlData)) {
             MoPubLog.log(CUSTOM, "MraidActivity received a null HTML body. Finishing the activity.");
             finish();
             return new View(this);
@@ -222,6 +218,11 @@ public void onExpand() {
                 // No-op. The interstitial is always expanded.
             }
 
+            @Override
+            public void onResize(final boolean toOriginalSize) {
+                // No-op. The interstitial is always expanded.
+            }
+
             @Override
             public void onOpen() {
                 MoPubLog.log(DID_APPEAR);
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java
index eb282660..988727f5 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java
@@ -35,13 +35,13 @@ protected void extractExtras(Map<String, String> serverExtras) {
     protected void preRenderHtml(@NonNull CustomEventInterstitialListener
             customEventInterstitialListener) {
         MoPubLog.log(LOAD_ATTEMPTED, ADAPTER_NAME);
-        MraidActivity.preRenderHtml(this, mContext, customEventInterstitialListener, mHtmlData,
+        MraidActivity.preRenderHtml(this, mContext, customEventInterstitialListener,
                 mBroadcastIdentifier, mAdReport);
     }
 
     @Override
     public void showInterstitial() {
         MoPubLog.log(SHOW_ATTEMPTED, ADAPTER_NAME);
-        MraidActivity.start(mContext, mAdReport, mHtmlData, mBroadcastIdentifier, mOrientation);
+        MraidActivity.start(mContext, mAdReport, mBroadcastIdentifier, mOrientation);
     }
 }
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdSource.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdSource.java
index cdff8e1c..61dcad18 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdSource.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdSource.java
@@ -27,7 +27,7 @@
  * To take an ad out of the cache, call {@link #dequeueAd}.
  *
  * The cache size may be automatically adjusted by the MoPub server based on an app's usage and
- * ad fill rate. Cached ads have a maximum TTL of 15 minutes before which they expire.
+ * ad fill rate. Cached ads have a maximum TTL of 4 hours before which they expire.
  *
  * The ad source also takes care of retrying failed ad requests, with a reasonable back-off to
  * avoid spamming the server.
diff --git a/mopub-sdk/mopub-sdk-native-video/build.gradle b/mopub-sdk/mopub-sdk-native-video/build.gradle
index 6018a659..1f15ab22 100644
--- a/mopub-sdk/mopub-sdk-native-video/build.gradle
+++ b/mopub-sdk/mopub-sdk-native-video/build.gradle
@@ -4,9 +4,16 @@
 
 apply from: '../shared-build.gradle'
 
+android {
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_8
+        targetCompatibility JavaVersion.VERSION_1_8
+    }
+}
+
 dependencies {
     api project(':mopub-sdk:mopub-sdk-native-static')
-    api 'com.google.android.exoplayer:exoplayer:2.8.3'
+    api 'com.google.android.exoplayer:exoplayer:2.9.5'
 }
 
 project.description = 'MoPub Android SDK - Native Video'
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java
deleted file mode 100644
index d3230d39..00000000
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java
+++ /dev/null
@@ -1,471 +0,0 @@
-// Copyright 2018-2019 Twitter, Inc.
-// Licensed under the MoPub SDK License Agreement
-// http://www.mopub.com/legal/sdk-license-agreement/
-
-package com.mopub.nativeads;
-
-import android.content.Context;
-import android.net.Uri;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.text.TextUtils;
-
-import com.google.android.exoplayer2.upstream.DataSource;
-import com.google.android.exoplayer2.upstream.DataSpec;
-import com.google.android.exoplayer2.upstream.DefaultHttpDataSource;
-import com.google.android.exoplayer2.upstream.HttpDataSource;
-import com.mopub.common.CacheService;
-import com.mopub.common.Preconditions;
-import com.mopub.common.VisibleForTesting;
-import com.mopub.common.logging.MoPubLog;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.IOException;
-import java.util.TreeSet;
-
-import static com.mopub.common.logging.MoPubLog.SdkLogEvent.CUSTOM;
-import static com.mopub.common.logging.MoPubLog.SdkLogEvent.ERROR;
-
-/**
- * This data source caches data on disk as it is read from an {@link HttpDataSource}. This expects
- * relatively large files, and this will segment the files. If any segment becomes invalid, the
- * entire file is effectively cleared from the cache.
- */
-public class HttpDiskCompositeDataSource implements DataSource {
-
-    // Keys are prefixed since URLs can end basically however they want, and key names could
-    // potentially be part of the URL and get the cache confused.
-    @VisibleForTesting static final String INTERVALS_KEY_PREFIX = "intervals-sorted-";
-    @VisibleForTesting static final String EXPECTED_FILE_SIZE_KEY_PREFIX = "expectedsize-";
-
-    // These are used to serialize/deserialize the intervals list
-    private static final String START = "start";
-    private static final String LENGTH = "length";
-
-    /**
-     * The constant used in {@link DefaultHttpDataSource} is private even though this is a pretty
-     * standard constant used in Exoplayer. This represents the constant that tells the HTTP
-     * connection to get all remaining bytes available.
-     */
-    @VisibleForTesting static final int LENGTH_UNBOUNDED = -1;
-
-    /**
-     * HTTP response 416 means trying to request for bytes that the server does not have.
-     */
-    private static final int HTTP_RESPONSE_REQUESTED_RANGE_NOT_SATISFIABLE = 416;
-
-    /**
-     * The current block size is arbitrarily set at 500KiB. This has to be bigger than the biggest
-     * read request from the consumer of this class's read method. This also has to be reasonably
-     * small to accommodate devices that don't have a lot of memory to work with.
-     */
-    @VisibleForTesting static final int BLOCK_SIZE = 500 * 1024;
-
-    /**
-     * The network data source
-     */
-    @NonNull private final HttpDataSource mHttpDataSource;
-
-    /**
-     * Bytes from disk. This is the in-memory working copy.
-     */
-    @Nullable private byte[] mCachedBytes;
-
-    /**
-     * Base key of the cache. This is the URI of the {@link DataSpec}.
-     */
-    @Nullable private String mKey;
-
-    /**
-     * This is the set of intervals that the cache thinks are valid. Intervals have a start and a
-     * length.
-     */
-    @NonNull private final TreeSet<IntInterval> mIntervals;
-
-    /**
-     * The absolute index of the first byte that is currently being requested.
-     */
-    private int mStartInFile;
-
-    /**
-     * The total number of bytes read in the current block. This indicates the current cursor
-     * position. mDataBlockOffset plus mStartInFile is the cursor position for the file.
-     * mDataBlockOffset plus mStartInDataBlock is the cursor position for the current data block.
-     */
-    private int mDataBlockOffset;
-
-    /**
-     * Which segment of the file the current block is on.
-     */
-    private int mSegment;
-
-    /**
-     * The index of the physical byte array for the current block.
-     */
-    private int mStartInDataBlock;
-
-    /**
-     * Whether or not this has an {@link HttpDataSource} that is already open.
-     */
-    private boolean mIsHttpSourceOpen;
-
-    /**
-     * The expected size of the entire file.
-     */
-    @Nullable private Integer mExpectedFileLength = null;
-
-    /**
-     * Data needed to open another {@link HttpDataSource}.
-     */
-    @Nullable private DataSpec mDataSpec;
-
-    /**
-     * Whether or not the cache has been written to during the current session.
-     */
-    private boolean mIsDirty;
-
-    public HttpDiskCompositeDataSource(@NonNull final Context context,
-            @NonNull final String userAgent) {
-        this(context, userAgent, new DefaultHttpDataSource(userAgent, null));
-    }
-
-    @VisibleForTesting
-    HttpDiskCompositeDataSource(@NonNull final Context context,
-            @NonNull final String userAgent,
-            @NonNull final HttpDataSource httpDataSource) {
-        mHttpDataSource = httpDataSource;
-        CacheService.initialize(context);
-        mIntervals = new TreeSet<IntInterval>();
-    }
-
-    @Override
-    public long open(@NonNull final DataSpec dataSpec) throws IOException {
-        Preconditions.checkNotNull(dataSpec);
-        if (dataSpec.uri == null) {
-            return LENGTH_UNBOUNDED;
-        }
-
-        mIsDirty = false;
-
-        mDataSpec = dataSpec;
-        mKey = dataSpec.uri.toString();
-        if (mKey == null) {
-            return LENGTH_UNBOUNDED;
-        }
-        mStartInFile = (int) dataSpec.absoluteStreamPosition;
-        mSegment = mStartInFile / BLOCK_SIZE;
-        mCachedBytes = CacheService.getFromDiskCache(mSegment + mKey);
-        mStartInDataBlock = mStartInFile % BLOCK_SIZE;
-        mDataBlockOffset = 0;
-
-        mExpectedFileLength = getExpectedFileLengthFromDisk(mKey);
-
-        populateIntervalsFromDisk(mKey, mIntervals);
-
-        int mDataRequestStartPoint = getFirstContiguousPointAfter(mStartInFile, mIntervals);
-
-        // Cache miss
-        if (mCachedBytes == null) {
-            mCachedBytes = new byte[BLOCK_SIZE];
-
-            // It's not in the cache, but we expected it to be there.
-            if (mDataRequestStartPoint > mStartInFile) {
-                MoPubLog.log(CUSTOM, "Cache segment " + mSegment + " was evicted. Invalidating cache");
-                mIntervals.clear();
-                mDataRequestStartPoint = (int) dataSpec.absoluteStreamPosition;
-            }
-        }
-
-        long size;
-        // If we think there are more bytes left to read from the network
-        if (mExpectedFileLength == null || mDataRequestStartPoint != mExpectedFileLength) {
-            final long lengthToUse;
-            if (mDataSpec.length == LENGTH_UNBOUNDED) {
-                lengthToUse = LENGTH_UNBOUNDED;
-            } else {
-                // Make sure to take into account that the start point is at a later point
-                lengthToUse = mDataSpec.length - (mDataRequestStartPoint - mStartInFile);
-            }
-            // Modify the data spec to include the new params
-            DataSpec modifiedDataSpec = new DataSpec(dataSpec.uri, mDataRequestStartPoint,
-                    lengthToUse, dataSpec.key, dataSpec.flags);
-
-            try {
-                size = mHttpDataSource.open(modifiedDataSpec);
-                if (mExpectedFileLength == null && lengthToUse == LENGTH_UNBOUNDED) {
-                    // If we don't have an expected file length set, set it if we requested the
-                    // rest of the file.
-                    mExpectedFileLength = (int) (mStartInFile + size);
-                    CacheService.putToDiskCache(EXPECTED_FILE_SIZE_KEY_PREFIX + mKey,
-                            String.valueOf(mExpectedFileLength).getBytes());
-                }
-                mIsHttpSourceOpen = true;
-            } catch (HttpDataSource.InvalidResponseCodeException e) {
-                // This shouldn't happen anymore, but if we accidentally requested too many bytes
-                // because we already had the bytes before that point, then it's still fine.
-                if (e.responseCode == HTTP_RESPONSE_REQUESTED_RANGE_NOT_SATISFIABLE) {
-                    size = mExpectedFileLength == null ? mDataRequestStartPoint - mStartInFile : mExpectedFileLength - mStartInFile;
-                } else {
-                    throw e;
-                }
-                mIsHttpSourceOpen = false;
-            }
-        } else {
-            size = dataSpec.length == LENGTH_UNBOUNDED ? mExpectedFileLength - mStartInFile : dataSpec.length;
-        }
-        return size;
-    }
-
-    private static void populateIntervalsFromDisk(@NonNull final String key,
-            @NonNull final TreeSet<IntInterval> intervals) {
-        Preconditions.checkNotNull(key);
-        Preconditions.checkNotNull(intervals);
-
-        intervals.clear();
-        byte[] intervalsFromDisk = CacheService.getFromDiskCache(INTERVALS_KEY_PREFIX + key);
-        if (intervalsFromDisk != null) {
-            String intervalsStringData = new String(intervalsFromDisk);
-            try {
-                JSONArray jsonIntervalArray = new JSONArray(intervalsStringData);
-                for (int i = 0; i < jsonIntervalArray.length(); i++) {
-                    JSONObject jsonInterval = new JSONObject((String) jsonIntervalArray.get(i));
-                    intervals.add(new IntInterval(jsonInterval.getInt(START),
-                            jsonInterval.getInt(LENGTH)));
-                }
-            } catch (JSONException e) {
-                MoPubLog.log(ERROR, "clearing cache since invalid json intervals found", e);
-                intervals.clear();
-            } catch (ClassCastException e) {
-                MoPubLog.log(CUSTOM, "clearing cache since unable to read json data");
-                intervals.clear();
-            }
-        }
-    }
-
-    private static Integer getExpectedFileLengthFromDisk(@NonNull final String key) {
-        Preconditions.checkNotNull(key);
-
-        byte[] maxSizeByteArray = CacheService.getFromDiskCache(
-                EXPECTED_FILE_SIZE_KEY_PREFIX + key);
-        if (maxSizeByteArray != null) {
-            try {
-                return Integer.parseInt(new String(maxSizeByteArray));
-            } catch (NumberFormatException e) {
-                return null;
-            }
-        }
-        return null;
-    }
-
-    @Override
-    public Uri getUri() {
-        return mDataSpec != null ? mDataSpec.uri : null;
-    }
-
-    @Override
-    public void close() throws IOException {
-        if (!TextUtils.isEmpty(mKey) && mCachedBytes != null) {
-            CacheService.putToDiskCache(mSegment + mKey, mCachedBytes);
-            addNewInterval(mIntervals, mStartInFile, mDataBlockOffset);
-            writeIntervalsToDisk(mIntervals, mKey);
-        }
-        mCachedBytes = null;
-
-        mHttpDataSource.close();
-        mIsHttpSourceOpen = false;
-        mStartInFile = 0;
-        mDataBlockOffset = 0;
-        mStartInDataBlock = 0;
-        mExpectedFileLength = null;
-        mIsDirty = false;
-    }
-
-    private static void writeIntervalsToDisk(@NonNull final TreeSet<IntInterval> intervals,
-            @NonNull final String key) {
-        Preconditions.checkNotNull(intervals);
-        Preconditions.checkNotNull(key);
-
-        final JSONArray jsonIntervals = new JSONArray();
-        for (IntInterval interval : intervals) {
-            jsonIntervals.put(interval);
-        }
-        CacheService.putToDiskCache(INTERVALS_KEY_PREFIX + key,
-                jsonIntervals.toString().getBytes());
-    }
-
-    @Override
-    public int read(final byte[] buffer, final int offset, final int length) throws IOException {
-        if (length > BLOCK_SIZE) {
-            MoPubLog.log(CUSTOM,
-                    "Reading more than the block size (" + BLOCK_SIZE + " bytes) at once is not possible. length = " + length);
-            return -1;
-        }
-        if (mDataSpec == null) {
-            MoPubLog.log(CUSTOM, "Unable to read from data source when no spec provided");
-            return -1;
-        }
-        if (mCachedBytes == null) {
-            MoPubLog.log(CUSTOM, "No cache set up. Call open before read.");
-            return -1;
-        }
-
-        // Number of bytes available in the current block
-        final int bytesAvailableInCurrentBlock = BLOCK_SIZE - mStartInDataBlock - mDataBlockOffset;
-
-        // The position of the next expected break (could be end of file)
-        final int farthestContiguousPoint = getFirstContiguousPointAfter(
-                mStartInFile + mDataBlockOffset, mIntervals);
-        // Amount of data expected to be in the cache
-        final int validBytesLeftInCache = farthestContiguousPoint - mStartInFile - mDataBlockOffset;
-        // The number of expected bytes to be able to read from the cache
-        final int bytesToRead = Math.min(validBytesLeftInCache, length);
-        // To keep track of actual bytes read from the cache
-        int bytesReadFromDisk = 0;
-        // If the data is available at least partially on disk
-        if (areBytesAvailableInCache(farthestContiguousPoint, mStartInFile, mDataBlockOffset)) {
-            // The case of when all of the bytes are available in the current block
-            if (bytesToRead <= bytesAvailableInCurrentBlock) {
-                System.arraycopy(mCachedBytes, mStartInDataBlock + mDataBlockOffset, buffer, offset,
-                        bytesToRead);
-                mDataBlockOffset += bytesToRead;
-                bytesReadFromDisk += bytesToRead;
-            } else {
-                // Read all of the available bytes in the current block
-                System.arraycopy(mCachedBytes, mStartInDataBlock + mDataBlockOffset, buffer, offset,
-                        bytesAvailableInCurrentBlock);
-                mDataBlockOffset += bytesAvailableInCurrentBlock;
-                bytesReadFromDisk += bytesAvailableInCurrentBlock;
-
-                // Flush the cache
-                writeCacheToDiskAndClearVariables();
-
-                // Read in the next segment from disk
-                mCachedBytes = CacheService.getFromDiskCache(mSegment + mKey);
-                if (mCachedBytes == null) {
-                    // If there is a mismatch between expected bytes available in the cache and what
-                    // is actually in the cache, this is an unrecoverable problem. Reset the cache
-                    // and clear the data and open a new HTTP connection starting at the current position.
-                    MoPubLog.log(CUSTOM, "Unexpected cache miss. Invalidating cache");
-                    mIntervals.clear();
-                    mCachedBytes = new byte[BLOCK_SIZE];
-                    mHttpDataSource.close();
-
-                    mHttpDataSource.open(
-                            new DataSpec(mDataSpec.uri, mStartInFile + mDataBlockOffset,
-                                    LENGTH_UNBOUNDED, mDataSpec.key, mDataSpec.flags));
-                    mIsHttpSourceOpen = true;
-                } else {
-                    // If the data is available in the cache, read the remaining bytes into the
-                    // buffer, additionally offset by what has already been written to the buffer.
-                    System.arraycopy(mCachedBytes, mStartInDataBlock + mDataBlockOffset, buffer,
-                            offset + bytesReadFromDisk,
-                            bytesToRead - bytesReadFromDisk);
-                    mDataBlockOffset += bytesToRead - bytesReadFromDisk;
-                    bytesReadFromDisk = bytesToRead;
-                }
-            }
-        }
-
-        // If we have read enough data from disk, don't ask for network data
-        final int bytesToReadFromNetwork = length - bytesReadFromDisk;
-        if (bytesToReadFromNetwork <= 0) {
-            return bytesReadFromDisk;
-        }
-
-        mIsDirty = true;
-
-        // This should never happen, but if we lose network or something, this might happen
-        if (!mIsHttpSourceOpen) {
-            MoPubLog.log(CUSTOM, "end of cache reached. No http source open");
-            return -1;
-        }
-
-        // Read from network and store to disk
-        int bytesReadFromNetwork = mHttpDataSource.read(buffer, offset + bytesReadFromDisk,
-                bytesToReadFromNetwork);
-
-        final int bytesAvailableInCurrentBlockForNetwork =
-                BLOCK_SIZE - mStartInDataBlock - mDataBlockOffset;
-        if (bytesAvailableInCurrentBlockForNetwork < bytesReadFromNetwork) {
-            // If there is not enough room in the current block, write up to the end of the current
-            // block, set up a new segment (which may have data in the cache already), and write
-            // the rest of the data.
-            System.arraycopy(buffer, offset + bytesReadFromDisk, mCachedBytes,
-                    mStartInDataBlock + mDataBlockOffset, bytesAvailableInCurrentBlockForNetwork);
-            mDataBlockOffset += bytesAvailableInCurrentBlockForNetwork;
-
-            writeCacheToDiskAndClearVariables();
-
-            mCachedBytes = CacheService.getFromDiskCache(mSegment + mKey);
-            if (mCachedBytes == null) {
-                mCachedBytes = new byte[BLOCK_SIZE];
-            }
-
-            System.arraycopy(buffer,
-                    offset + bytesAvailableInCurrentBlockForNetwork + bytesReadFromDisk,
-                    mCachedBytes, mStartInDataBlock + mDataBlockOffset,
-                    bytesReadFromNetwork - bytesAvailableInCurrentBlockForNetwork);
-            mDataBlockOffset += bytesReadFromNetwork - bytesAvailableInCurrentBlockForNetwork;
-        } else {
-            System.arraycopy(buffer, offset + bytesReadFromDisk, mCachedBytes,
-                    mStartInDataBlock + mDataBlockOffset, bytesReadFromNetwork);
-            mDataBlockOffset += bytesReadFromNetwork;
-        }
-
-        return bytesReadFromNetwork + bytesReadFromDisk;
-    }
-
-    private static boolean areBytesAvailableInCache(final int farthestContiguousPoint,
-            final int startInFile, final int dataBlockOffset) {
-        return farthestContiguousPoint > startInFile + dataBlockOffset;
-    }
-
-    private void writeCacheToDiskAndClearVariables() {
-        CacheService.putToDiskCache(mSegment + mKey, mCachedBytes);
-        addNewInterval(mIntervals, mStartInFile, mDataBlockOffset);
-        mStartInDataBlock = 0;
-        mStartInFile = mStartInFile + mDataBlockOffset;
-        mDataBlockOffset = 0;
-        mSegment = mStartInFile / BLOCK_SIZE;
-    }
-
-    /**
-     * Gets the first contiguous point from disk that we have starting from the given point. If
-     * there is no segment that contains this point, return that point.
-     */
-    @VisibleForTesting
-    static int getFirstContiguousPointAfter(int point,
-            @NonNull final TreeSet<IntInterval> intervals) {
-        Preconditions.checkNotNull(intervals);
-
-        int lastContiguousPoint = point;
-        for (final IntInterval interval : intervals) {
-            if (interval.getStart() <= lastContiguousPoint) {
-                lastContiguousPoint = Math.max(lastContiguousPoint,
-                        interval.getStart() + interval.getLength());
-            }
-        }
-        return lastContiguousPoint;
-    }
-
-    /**
-     * Adds the interval if the interval does not already exist.
-     *
-     * @param intervals The current set of intervals
-     * @param start     The starting point of this interval
-     * @param length    The length of this interval
-     */
-    @VisibleForTesting
-    static void addNewInterval(@NonNull final TreeSet<IntInterval> intervals, final int start,
-            final int length) {
-        Preconditions.checkNotNull(intervals);
-
-        if (getFirstContiguousPointAfter(start, intervals) >= start + length) {
-            return;
-        }
-        intervals.add(new IntInterval(start, length));
-    }
-}
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCache.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCache.java
new file mode 100644
index 00000000..ae8b02fc
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCache.java
@@ -0,0 +1,60 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.nativeads;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.google.android.exoplayer2.upstream.cache.Cache;
+import com.google.android.exoplayer2.upstream.cache.LeastRecentlyUsedCacheEvictor;
+import com.google.android.exoplayer2.upstream.cache.SimpleCache;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.util.DeviceUtils;
+
+import java.io.File;
+
+class MoPubCache {
+
+    private static final String NATIVE_CACHE_NAME = "mopub-native-cache";
+
+    private volatile static Cache sInstance = null;
+
+    @Nullable
+    static Cache getCacheInstance(@NonNull final Context context) {
+        Preconditions.checkNotNull(context);
+
+        Cache instance = sInstance;
+        if (instance == null) {
+            synchronized (MoPubCache.class) {
+                instance = sInstance;
+                if (instance == null) {
+                    final File cacheDir = context.getApplicationContext().getCacheDir();
+
+                    if (cacheDir != null) {
+                        final File nativeCacheDir = new File(cacheDir.getPath()
+                                + File.separator
+                                + NATIVE_CACHE_NAME);
+                        final long cacheSize = DeviceUtils.diskCacheSizeBytes(cacheDir);
+                        final LeastRecentlyUsedCacheEvictor lruEvictor = new LeastRecentlyUsedCacheEvictor(cacheSize);
+                        instance = new SimpleCache(nativeCacheDir, lruEvictor);
+                        sInstance = instance;
+                    }
+                }
+            }
+        }
+
+        return instance;
+    }
+
+    @VisibleForTesting
+    static void resetInstance() {
+        if (sInstance != null) {
+            sInstance.release();
+            sInstance = null;
+        }
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java
index bf155e52..e9157382 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java
@@ -40,16 +40,19 @@
 import com.google.android.exoplayer2.trackselection.TrackSelector;
 import com.google.android.exoplayer2.upstream.DataSource;
 import com.google.android.exoplayer2.upstream.DefaultAllocator;
+import com.google.android.exoplayer2.upstream.DefaultHttpDataSource;
+import com.google.android.exoplayer2.upstream.cache.Cache;
+import com.google.android.exoplayer2.upstream.cache.CacheDataSource;
 import com.google.android.exoplayer2.video.MediaCodecVideoRenderer;
 
 import com.mopub.common.Preconditions;
+import com.mopub.common.VisibilityTracker.VisibilityChecker;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.RepeatingHandlerRunnable;
 import com.mopub.mobileads.VastTracker;
 import com.mopub.mobileads.VastVideoConfig;
 import com.mopub.nativeads.NativeVideoController.NativeVideoProgressRunnable.ProgressListener;
-import com.mopub.common.VisibilityTracker.VisibilityChecker;
 import com.mopub.network.TrackingRequest;
 
 import java.lang.ref.WeakReference;
@@ -415,7 +418,15 @@ private void preparePlayer() {
             final DataSource.Factory dataSourceFactory = new DataSource.Factory() {
                 @Override
                 public DataSource createDataSource() {
-                    return new HttpDiskCompositeDataSource(mContext, "exo_demo");
+                    DataSource dataSource = new DefaultHttpDataSource("exo_demo",
+                            null);
+                    final Cache cache = MoPubCache.getCacheInstance(mContext);
+
+                    if (cache != null) {
+                        dataSource = new CacheDataSource(cache, dataSource);
+                    }
+
+                    return dataSource;
                 }
             };
 
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
index 015e35e8..05b10318 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
@@ -307,11 +307,6 @@ private void fetchAd(@NonNull String adUnitId, @NonNull String adUrlString, @Nul
                     "unit %s. A request is already pending.", adUnitId));
             return;
         }
-        if (rewardedAdsLoaders.isLoading(adUnitId)) {
-            MoPubLog.log(CUSTOM, String.format(Locale.US, "Did not queue rewarded ad request for ad " +
-                    "unit %s. A request is already pending.", adUnitId));
-            return;
-        }
 
         // Issue MoPub request
         MoPubLog.log(CUSTOM, String.format(Locale.US,
@@ -522,11 +517,10 @@ public void run() {
                         "Updating init settings for custom event %s with params %s",
                         customEventClassName, serverExtrasJsonString));
 
-                // https://github.com/robolectric/robolectric/issues/3641
                 sCustomEventSharedPrefs
                         .edit()
                         .putString(customEventClassName, serverExtrasJsonString)
-                        .commit();
+                        .apply();
             }
 
             // Load custom event
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidActivity.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidActivity.java
index a9ca1d02..b6aca649 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidActivity.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidActivity.java
@@ -29,7 +29,6 @@
 
 import static com.mopub.common.DataKeys.AD_REPORT_KEY;
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
-import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.common.DataKeys.REWARDED_AD_DURATION_KEY;
 import static com.mopub.common.DataKeys.SHOULD_REWARD_ON_CLICK_KEY;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
@@ -46,7 +45,6 @@
     public static void preRenderHtml(@NonNull final Interstitial mraidInterstitial,
             @NonNull final Context context,
             @NonNull final CustomEventInterstitial.CustomEventInterstitialListener customEventInterstitialListener,
-            @Nullable final String htmlData,
             @NonNull final Long broadcastIdentifier,
             @Nullable final AdReport adReport,
             final int rewardedDuration) {
@@ -55,16 +53,16 @@ public static void preRenderHtml(@NonNull final Interstitial mraidInterstitial,
         Preconditions.checkNotNull(customEventInterstitialListener);
         Preconditions.checkNotNull(broadcastIdentifier);
 
-        preRenderHtml(mraidInterstitial, customEventInterstitialListener, htmlData,
+        preRenderHtml(mraidInterstitial, customEventInterstitialListener, getResponseString(adReport),
                 new MraidBridge.MraidWebView(context), broadcastIdentifier,
                 new RewardedMraidController(context, adReport, PlacementType.INTERSTITIAL,
                         rewardedDuration, broadcastIdentifier));
     }
 
     public static void start(@NonNull Context context, @Nullable AdReport adreport,
-            @Nullable String htmlData, long broadcastIdentifier, int rewardedDuration,
-            boolean shouldRewardOnClick) {
-        final Intent intent = createIntent(context, adreport, htmlData, broadcastIdentifier,
+                             long broadcastIdentifier, int rewardedDuration,
+                             boolean shouldRewardOnClick) {
+        final Intent intent = createIntent(context, adreport, broadcastIdentifier,
                 rewardedDuration, shouldRewardOnClick);
         try {
             Intents.startActivity(context, intent);
@@ -76,10 +74,9 @@ public static void start(@NonNull Context context, @Nullable AdReport adreport,
 
     @VisibleForTesting
     protected static Intent createIntent(@NonNull Context context, @Nullable AdReport adReport,
-            @Nullable String htmlData, long broadcastIdentifier, int rewardedDuration,
-            boolean shouldRewardOnClick) {
+                                         long broadcastIdentifier, int rewardedDuration,
+                                         boolean shouldRewardOnClick) {
         Intent intent = new Intent(context, RewardedMraidActivity.class);
-        intent.putExtra(HTML_RESPONSE_BODY_KEY, htmlData);
         intent.putExtra(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
         intent.putExtra(AD_REPORT_KEY, adReport);
         intent.putExtra(REWARDED_AD_DURATION_KEY, rewardedDuration);
@@ -90,7 +87,7 @@ protected static Intent createIntent(@NonNull Context context, @Nullable AdRepor
     @Override
     public View getAdView() {
         final Intent intent = getIntent();
-        final String htmlData = intent.getStringExtra(HTML_RESPONSE_BODY_KEY);
+        final String htmlData = getResponseString();
         if (TextUtils.isEmpty(htmlData)) {
             MoPubLog.log(CUSTOM, "RewardedMraidActivity received a null HTML body. Finishing the activity.");
             finish();
@@ -148,6 +145,11 @@ public void onExpand() {
                 // No-op. The interstitial is always expanded.
             }
 
+            @Override
+            public void onResize(final boolean toOriginalSize) {
+                // No-op. The interstitial is always expanded.
+            }
+
             @Override
             public void onOpen() {
                 if (shouldRewardOnClick) {
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedMraidInterstitial.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedMraidInterstitial.java
index 1fed1e1c..36f80a94 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedMraidInterstitial.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedMraidInterstitial.java
@@ -71,14 +71,14 @@ protected void preRenderHtml(@NonNull CustomEventInterstitialListener
 
         }
         RewardedMraidActivity.preRenderHtml(this, mContext,
-                customEventInterstitialListener, mHtmlData, mBroadcastIdentifier, mAdReport,
+                customEventInterstitialListener, mBroadcastIdentifier, mAdReport,
                 mRewardedDuration);
     }
 
     @Override
     public void showInterstitial() {
         MoPubLog.log(SHOW_ATTEMPTED, ADAPTER_NAME);
-        RewardedMraidActivity.start(mContext, mAdReport, mHtmlData, mBroadcastIdentifier,
+        RewardedMraidActivity.start(mContext, mAdReport, mBroadcastIdentifier,
                 mRewardedDuration, mShouldRewardOnClick);
     }
 
diff --git a/mopub-sdk/publisher.gradle b/mopub-sdk/publisher.gradle
index 785ffac7..b180dd43 100644
--- a/mopub-sdk/publisher.gradle
+++ b/mopub-sdk/publisher.gradle
@@ -54,8 +54,8 @@ publish {
     groupId = project.group
     artifactId = project.ext.projectName
     uploadName = project.ext.uploadName
-    version = project.version
-    description = project.description
+    publishVersion = project.version
+    desc = project.description
     website = siteUrl
     repository = gitUrl
 
diff --git a/mopub-sdk/shared-build.gradle b/mopub-sdk/shared-build.gradle
index e57e66c2..a26ee00b 100644
--- a/mopub-sdk/shared-build.gradle
+++ b/mopub-sdk/shared-build.gradle
@@ -14,14 +14,14 @@ repositories {
 }
 
 project.group = 'com.mopub'
-project.version = '5.5.0'
+project.version = '5.6.0'
 
 android {
     compileSdkVersion 28
     lintOptions { abortOnError false }
-    useLibrary 'org.apache.http.legacy'
+
     defaultConfig {
-        versionCode 66
+        versionCode 67
         versionName version
         minSdkVersion 16
         targetSdkVersion 28
diff --git a/mopub-sdk/src/test/java/com/mopub/common/AdReportTest.java b/mopub-sdk/src/test/java/com/mopub/common/AdReportTest.java
index 84c6d0a6..40274f43 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/AdReportTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/AdReportTest.java
@@ -115,6 +115,28 @@ public void constructor_shouldHandleInvalidAdConfigurationValues() {
         assertThat(subject.toString()).isEqualTo(expectedParameters);
     }
 
+    @Test
+    public void getResponseString_shouldReturnAdResponseStringBody() {
+        final String stringBody = "this is the ad response string body";
+        when(mockAdResponse.getStringBody()).thenReturn(stringBody);
+        when(mockClientMetadata.getMoPubIdentifier()).thenReturn(new MoPubIdentifier(context));
+
+        subject = new AdReport("testAdunit", mockClientMetadata, mockAdResponse);
+
+        assertThat(subject.getResponseString()).isEqualTo(stringBody);
+    }
+
+    @Test
+    public void getResponseString_withNullStringBody_shouldReturnNull() {
+        final String stringBody = null;
+        when(mockAdResponse.getStringBody()).thenReturn(stringBody);
+        when(mockClientMetadata.getMoPubIdentifier()).thenReturn(new MoPubIdentifier(context));
+
+        subject = new AdReport("testAdunit", mockClientMetadata, mockAdResponse);
+
+        assertThat(subject.getResponseString()).isNull();
+    }
+
     private String getCurrentDateTime() {
         SimpleDateFormat dateFormat = new SimpleDateFormat("M/d/yy hh:mm:ss a z", Locale.US);
         return dateFormat.format(now);
diff --git a/mopub-sdk/src/test/java/com/mopub/common/AdapterConfigurationManagerTest.java b/mopub-sdk/src/test/java/com/mopub/common/AdapterConfigurationManagerTest.java
index 1e416860..296818d9 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/AdapterConfigurationManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/AdapterConfigurationManagerTest.java
@@ -103,7 +103,7 @@ public void initialize_withAdapterConfigurationClass_shouldMergeInitializationPa
                 context, CUSTOM_EVENT_PREF_NAME);
         sharedPreferences.edit().putString(
                 ACMTestAdapterConfiguration.class.getName(),
-                "{\"key1\":\"oldValue\",\"key5\":\"value5\"}").commit();
+                "{\"key1\":\"oldValue\",\"key5\":\"value5\"}").apply();
 
         subject.initialize(context, set, networkMediationConfigurations, moPubRequestOptions);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/BaseAdapterConfigurationTest.java b/mopub-sdk/src/test/java/com/mopub/common/BaseAdapterConfigurationTest.java
index 8fbab395..2fc9fa7b 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/BaseAdapterConfigurationTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/BaseAdapterConfigurationTest.java
@@ -42,7 +42,7 @@ public void setup() {
     public void tearDown() {
         final SharedPreferences sharedPreferences = SharedPreferencesHelper.getSharedPreferences(
                 context, CUSTOM_EVENT_PREF_NAME);
-        sharedPreferences.edit().clear().commit();
+        sharedPreferences.edit().clear().apply();
     }
 
     @Test
@@ -66,7 +66,7 @@ public void getCachedInitializationParameters_withInitializationParameters_shoul
         final SharedPreferences sharedPreferences = SharedPreferencesHelper.getSharedPreferences(
                 context, CUSTOM_EVENT_PREF_NAME);
         sharedPreferences.edit().putString(TestAdapterConfiguration.class.getName(),
-                "{\"key1\":\"value1\",\"key2\":\"value2\"}").commit();
+                "{\"key1\":\"value1\",\"key2\":\"value2\"}").apply();
 
         final Map<String, String> initializationParameters =
                 subject.getCachedInitializationParameters(context);
@@ -82,7 +82,7 @@ public void getCachedInitializationParameters_withInvalidInitializationParameter
                 context, CUSTOM_EVENT_PREF_NAME);
         // missing the last curly brace
         sharedPreferences.edit().putString(TestAdapterConfiguration.class.getName(),
-                "{\"key1\":\"value1\",\"key2\":\"value2\"").commit();
+                "{\"key1\":\"value1\",\"key2\":\"value2\"").apply();
 
         final Map<String, String> initializationParameters =
                 subject.getCachedInitializationParameters(context);
diff --git a/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java b/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
index df31154c..7ec9b666 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
@@ -138,7 +138,7 @@ public void isLimitAdTrackingEnabled_whenGooglePlayServicesIsLinkedAndLimitAdTra
         SharedPreferencesHelper.getSharedPreferences(context)
                 .edit()
                 .putBoolean(GpsHelper.IS_LIMIT_AD_TRACKING_ENABLED_KEY, adInfo.LIMIT_AD_TRACKING_ENABLED)
-                .commit();
+                .apply();
         assertThat(GpsHelper.isLimitAdTrackingEnabled(context)).isEqualTo(adInfo.LIMIT_AD_TRACKING_ENABLED);
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/logging/MoPubDefaultLoggerTest.java b/mopub-sdk/src/test/java/com/mopub/common/logging/MoPubDefaultLoggerTest.java
new file mode 100644
index 00000000..ea83f340
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/logging/MoPubDefaultLoggerTest.java
@@ -0,0 +1,62 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.common.logging;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class MoPubDefaultLoggerTest {
+
+    private static final String SHORT_MESSAGE = "short message.";
+    private static String LONG_MESSAGE;
+
+    static {
+        final StringBuilder sb = new StringBuilder();
+        // 9990 bytes
+        for (int i = 0; i < 999; i++) {
+            sb.append("0123456789");
+        }
+        LONG_MESSAGE = sb.toString();
+    }
+
+    @Test
+    public void split_withShortMessage_shouldReturnArrayWithOneElement() {
+        final String[] result = MoPubDefaultLogger.split(SHORT_MESSAGE);
+
+        assertThat(result).isEqualTo(new String[]{SHORT_MESSAGE});
+    }
+
+    @Test
+    public void split_withLongMessage_shouldReturnArrayWithProperSegments() {
+        final String[] result = MoPubDefaultLogger.split(LONG_MESSAGE);
+
+        assertThat(result.length).isEqualTo(
+                (LONG_MESSAGE.length() / MoPubDefaultLogger.MAX_MESSAGE_LENGTH_BYTES) + 1);
+        final StringBuilder resultString = new StringBuilder();
+        for (String segment : result) {
+            resultString.append(segment);
+        }
+        assertThat(resultString.toString()).isEqualTo(LONG_MESSAGE);
+    }
+
+    @Test
+    public void split_withEmptyMessage_shouldReturnArrayWithEmptyString() {
+        final String[] result = MoPubDefaultLogger.split("");
+
+        assertThat(result).isEqualTo(new String[]{""});
+    }
+
+    @Test
+    public void split_withNullMessage_shouldReturnArrayWithNullString() {
+        final String[] result = MoPubDefaultLogger.split(null);
+
+        assertThat(result).isEqualTo(new String[]{null});
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/AdvertisingIdTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/AdvertisingIdTest.java
index 9ee03d3d..f0d5f68c 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/AdvertisingIdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/AdvertisingIdTest.java
@@ -11,6 +11,7 @@
 import org.junit.runner.RunWith;
 
 import java.util.Calendar;
+import java.util.TimeZone;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 
@@ -44,6 +45,8 @@ public void constructor_shouldInitializeCorrectly() {
         assertThat(subject.mDoNotTrack).isTrue();
         // return IFA even when DoNotTrack is true
         assertThat(subject.getIfaWithPrefix()).isEqualTo("ifa:" + ANDROID_ID);
+        assertThat(subject.mLastRotation.get(Calendar.DAY_OF_YEAR)).isEqualTo(
+                time.get(Calendar.DAY_OF_YEAR));
     }
 
     @Test
@@ -54,9 +57,66 @@ public void isRotationRequired_whenMoreThan24Hours_shouldReturnTrue() {
     }
 
     @Test
-    public void isRotationRequired_whenLessThan24Hours_shouldReturnFalse() {
-        // one day and ten seconds ago
-        subject = new AdvertisingId(ANDROID_ID, MOPUB_ID, false, now - ONE_DAY_MS + TEN_SECONDS_MS);
+    public void isRotationRequired_whenMidnightSameDay_shouldReturnFalse() {
+        final Calendar sameDayCalendar = Calendar.getInstance(TimeZone.getTimeZone("GMT"));
+        sameDayCalendar.set(sameDayCalendar.get(Calendar.YEAR), sameDayCalendar.get(Calendar.MONTH),
+                sameDayCalendar.get(Calendar.DAY_OF_MONTH), 0, 0, 0);
+
+        subject = new AdvertisingId(ANDROID_ID, MOPUB_ID, false,
+                sameDayCalendar.getTimeInMillis());
+
+        assertThat(subject.isRotationRequired()).isFalse();
+    }
+
+    @Test
+    public void isRotationRequired_whenLastSecondOfTheSameDay_shouldReturnFalse() {
+        final Calendar sameDayCalendar = Calendar.getInstance(TimeZone.getTimeZone("GMT"));
+        sameDayCalendar.set(sameDayCalendar.get(Calendar.YEAR), sameDayCalendar.get(Calendar.MONTH),
+                sameDayCalendar.get(Calendar.DAY_OF_MONTH), 23, 59, 59);
+
+        subject = new AdvertisingId(ANDROID_ID, MOPUB_ID, false,
+                sameDayCalendar.getTimeInMillis());
+
+        assertThat(subject.isRotationRequired()).isFalse();
+    }
+    @Test
+    public void isRotationRequired_whenMidnightOfNextDay_shouldReturnTrue() {
+        final Calendar sameDayCalendar = Calendar.getInstance(TimeZone.getTimeZone("GMT"));
+        sameDayCalendar.set(sameDayCalendar.get(Calendar.YEAR), sameDayCalendar.get(Calendar.MONTH),
+                sameDayCalendar.get(Calendar.DAY_OF_MONTH), 23, 59, 59);
+        sameDayCalendar.add(Calendar.SECOND, 1);
+
+        subject = new AdvertisingId(ANDROID_ID, MOPUB_ID, false,
+                sameDayCalendar.getTimeInMillis());
+
+        assertThat(subject.isRotationRequired()).isTrue();
+    }
+
+    @Test
+    public void isRotationRequired_whenTimeZoneCausesDayDifference_shouldReturnTrue() {
+        final Calendar sameDayCalendar = Calendar.getInstance(TimeZone.getTimeZone("GMT"));
+        sameDayCalendar.set(sameDayCalendar.get(Calendar.YEAR), sameDayCalendar.get(Calendar.MONTH),
+                sameDayCalendar.get(Calendar.DAY_OF_MONTH), 5, 0, 0);
+        sameDayCalendar.setTimeZone(TimeZone.getTimeZone("PST"));
+        sameDayCalendar.add(Calendar.DATE, -1);
+
+        subject = new AdvertisingId(ANDROID_ID, MOPUB_ID, false,
+                sameDayCalendar.getTimeInMillis());
+
+        assertThat(subject.isRotationRequired()).isTrue();
+    }
+
+    @Test
+    public void isRotationRequired_whenTimeZoneCausesNoDayDifference_shouldReturnFalse() {
+        final Calendar sameDayCalendar = Calendar.getInstance(TimeZone.getTimeZone("GMT"));
+        sameDayCalendar.set(sameDayCalendar.get(Calendar.YEAR), sameDayCalendar.get(Calendar.MONTH),
+                sameDayCalendar.get(Calendar.DAY_OF_MONTH), 22, 0, 0);
+        sameDayCalendar.setTimeZone(TimeZone.getTimeZone("PST"));
+        sameDayCalendar.add(Calendar.DATE, -1);
+
+        subject = new AdvertisingId(ANDROID_ID, MOPUB_ID, false,
+                sameDayCalendar.getTimeInMillis());
+
         assertThat(subject.isRotationRequired()).isFalse();
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/MoPubIdentifierTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/MoPubIdentifierTest.java
index a42f2c8b..5e285e3f 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/MoPubIdentifierTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/MoPubIdentifierTest.java
@@ -12,6 +12,7 @@
 
 import com.mopub.common.GpsHelper;
 import com.mopub.common.SdkInitializationListener;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.Reflection;
 
@@ -39,7 +40,6 @@
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
-import static org.powermock.api.mockito.PowerMockito.verifyStatic;
 
 @RunWith(RobolectricTestRunner.class)
 @PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "android.*", "org.json.*"})
@@ -58,6 +58,7 @@
     private static final String AMAZON_AD_ID = "amazon_ad_id";
     private static final String TEST_IFA_ID = "test_ifa_id";
     public static final String TEST_MOPUB_ID = "test_mopub_id";
+    public static final String GOOGLE_AD_ID_DEBUG = "something_something_10ca1ad1abe1";
 
     @Before
     public void setup() {
@@ -431,6 +432,48 @@ public void refreshAdvertisingInfoBackgroundThread_withNotExpiredId_withAmazon_w
         assertThat(newId.isRotationRequired()).isFalse();
     }
 
+    @Test
+    public void rotateMoPubId_withDebugGAID_shouldSetLogLevelToDebug() throws Exception {
+        // Set log level to none and get value from MoPubLog
+        MoPubLog.setLogLevel(MoPubLog.LogLevel.NONE);
+        final MoPubLog.LogLevel beforeLogLevel = MoPubLog.getLogLevel();
+        setupGooglePlayServiceDebug(context, false);
+
+        ArgumentCaptor<AdvertisingId> oldIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+        ArgumentCaptor<AdvertisingId> newIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+
+        subject = new MoPubIdentifier(context, idChangeListener);
+
+        ShadowLooper.runUiThreadTasks();
+        verify(idChangeListener).onIdChanged(oldIdClientCaptor.capture(), newIdClientCaptor.capture());
+
+        // Get log level
+        final MoPubLog.LogLevel afterLogLevel = MoPubLog.getLogLevel();
+
+        assertThat(beforeLogLevel).isNotEqualTo(afterLogLevel);
+    }
+
+    @Test
+    public void rotateMoPubId_withoutDebugGAID_shouldNotSetLogLevel() throws Exception {
+        // Set log level to none and get value from MoPubLog
+        MoPubLog.setLogLevel(MoPubLog.LogLevel.NONE);
+        final MoPubLog.LogLevel beforeLogLevel = MoPubLog.getLogLevel();
+        setupGooglePlayService(context, false);
+
+        ArgumentCaptor<AdvertisingId> oldIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+        ArgumentCaptor<AdvertisingId> newIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+
+        subject = new MoPubIdentifier(context, idChangeListener);
+
+        ShadowLooper.runUiThreadTasks();
+        verify(idChangeListener).onIdChanged(oldIdClientCaptor.capture(), newIdClientCaptor.capture());
+
+        // Get log level
+        final MoPubLog.LogLevel afterLogLevel = MoPubLog.getLogLevel();
+
+        assertThat(beforeLogLevel).isEqualTo(afterLogLevel);
+    }
+
     // Unit tests utility functions
     public static void setupGooglePlayService(Context context, boolean limitAdTracking) {
         PowerMockito.mockStatic(GpsHelper.class);
@@ -438,6 +481,12 @@ public static void setupGooglePlayService(Context context, boolean limitAdTracki
         PowerMockito.when(GpsHelper.fetchAdvertisingInfoSync(context)).thenReturn(new GpsHelper.AdvertisingInfo(GOOGLE_AD_ID, limitAdTracking));
     }
 
+    public static void setupGooglePlayServiceDebug(Context context, boolean limitAdTracking) {
+        PowerMockito.mockStatic(GpsHelper.class);
+        PowerMockito.when(GpsHelper.isLimitAdTrackingEnabled(context)).thenReturn(limitAdTracking);
+        PowerMockito.when(GpsHelper.fetchAdvertisingInfoSync(context)).thenReturn(new GpsHelper.AdvertisingInfo(GOOGLE_AD_ID_DEBUG, limitAdTracking));
+    }
+
     public static void setupAmazonAdvertisingInfo(boolean limitAdTracking) {
         ContentResolver resolver = RuntimeEnvironment.application.getContentResolver();
         Settings.Secure.putInt(resolver, "limit_ad_tracking", limitAdTracking ? 1 : 0);
@@ -464,7 +513,7 @@ public static AdvertisingId writeAdvertisingInfoToSharedPreferences(Context cont
     }
 
     private static AdvertisingId writeExpiredAdvertisingInfoToSharedPreferences(Context context, boolean doNotTrack) throws Exception {
-        final long time = Calendar.getInstance().getTimeInMillis() - AdvertisingId.ROTATION_TIME_MS;
+        final long time = Calendar.getInstance().getTimeInMillis() - AdvertisingId.ONE_DAY_MS * 2;
         return writeAdvertisingInfoToSharedPreferences(context, doNotTrack, time);
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/PersonalInfoManagerTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/PersonalInfoManagerTest.java
index 7379d36d..ee8712a9 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/PersonalInfoManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/PersonalInfoManagerTest.java
@@ -82,6 +82,7 @@ public void setUp() {
         personalInfoData = subject.getPersonalInfoData();
         mockConsentStatusChangeListener = mock(ConsentStatusChangeListener.class);
         subject.subscribeConsentStatusChangeListener(mockConsentStatusChangeListener);
+        personalInfoData.setLastChangedMs("old_time");
     }
 
     @After
@@ -364,6 +365,7 @@ public void changeConsentStateFromDialog_withYes_shouldChangeStatusToExplicitYes
         assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(ConsentStatus.EXPLICIT_YES);
         assertThat(personalInfoData.getConsentChangeReason()).isEqualTo(
                 ConsentChangeReason.GRANTED_BY_USER.getReason());
+        assertThat(personalInfoData.getLastChangedMs()).isNotEqualTo("old_time");
         verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.UNKNOWN,
                 ConsentStatus.EXPLICIT_YES, true);
     }
@@ -378,6 +380,7 @@ public void changeConsentStateFromDialog_withNo_shouldChangeStatusToExplicitNo()
         assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(ConsentStatus.EXPLICIT_NO);
         assertThat(personalInfoData.getConsentChangeReason()).isEqualTo(
                 ConsentChangeReason.DENIED_BY_USER.getReason());
+        assertThat(personalInfoData.getLastChangedMs()).isNotEqualTo("old_time");
         verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.UNKNOWN,
                 ConsentStatus.EXPLICIT_NO, false);
     }
@@ -748,6 +751,7 @@ public void attemptStateTransition_withSameConsentStatus_shouldDoNothing() {
         subject.attemptStateTransition(ConsentStatus.EXPLICIT_YES, "no reason");
         verifyZeroInteractions(mockConsentStatusChangeListener);
         assertThat(personalInfoData.getConsentedPrivacyPolicyVersion()).isEqualTo("1");
+        assertThat(personalInfoData.getLastChangedMs()).isEqualTo("old_time");
     }
 
     @Test
@@ -767,6 +771,7 @@ public void attemptStateTransition_withUnknownToYes_shouldSetConsentedVersions_s
         assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(ConsentStatus.EXPLICIT_YES);
         verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.UNKNOWN,
                 ConsentStatus.EXPLICIT_YES, true);
+        assertThat(personalInfoData.getLastChangedMs()).isNotEqualTo("old_time");
     }
 
     @Test
@@ -788,6 +793,7 @@ public void attemptStateTransition_withPotentialWhitelistToYes_shouldNotSetConse
         verify(mockConsentStatusChangeListener).onConsentStateChange(
                 ConsentStatus.POTENTIAL_WHITELIST,
                 ConsentStatus.EXPLICIT_YES, true);
+        assertThat(personalInfoData.getLastChangedMs()).isNotEqualTo("old_time");
     }
 
     @Test
@@ -809,6 +815,7 @@ public void attemptStateTransition_withYesToDnt_shouldClearPersonalDataExceptUdi
         assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(ConsentStatus.DNT);
         verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.EXPLICIT_YES,
                 ConsentStatus.DNT, false);
+        assertThat(personalInfoData.getLastChangedMs()).isNotEqualTo("old_time");
     }
 
     @Test
@@ -829,6 +836,7 @@ public void attemptStateTransition_withUnknownToDnt() {
         assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(ConsentStatus.DNT);
         verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.EXPLICIT_YES,
                 ConsentStatus.DNT, false);
+        assertThat(personalInfoData.getLastChangedMs()).isNotEqualTo("old_time");
     }
 
     @Test
@@ -850,6 +858,7 @@ public void attemptStateTransition_withYesToNo_shouldClearPersonalDataExceptUdid
         assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(ConsentStatus.EXPLICIT_NO);
         verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.EXPLICIT_YES,
                 ConsentStatus.EXPLICIT_NO, false);
+        assertThat(personalInfoData.getLastChangedMs()).isNotEqualTo("old_time");
     }
 
     @Test
@@ -870,5 +879,6 @@ public void attemptStateTransition_withUnknownToPotentialWhitelist_shouldSetCons
                 ConsentStatus.POTENTIAL_WHITELIST);
         verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.UNKNOWN,
                 ConsentStatus.POTENTIAL_WHITELIST, false);
+        assertThat(personalInfoData.getLastChangedMs()).isNotEqualTo("old_time");
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertGestureListenerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertGestureListenerTest.java
index ab87604b..d4a86dbe 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertGestureListenerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertGestureListenerTest.java
@@ -23,6 +23,7 @@
 import static com.mopub.mobileads.AdAlertGestureListener.ZigZagState.GOING_RIGHT;
 import static com.mopub.mobileads.AdAlertGestureListener.ZigZagState.UNSET;
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
@@ -317,6 +318,34 @@ public void reset_shouldResetStateAndZigZagCount() throws Exception {
         assertZigZagState(UNSET);
     }
 
+    @Test
+    public void isClicked_initialStateIsFalse(){
+        assertThat(subject.isClicked()).isFalse();
+    }
+
+    @Test
+    public void isClicked_afterMotionEvent_isTrue(){
+        MotionEvent touchEvent = mock(MotionEvent.class);
+
+        subject.onSingleTapUp(touchEvent);
+
+        assertThat(subject.isClicked()).isTrue();
+    }
+
+    @Test
+    public void isClicked_afterMotionEvent_afterReset_isFalse(){
+        MotionEvent touchEvent = mock(MotionEvent.class);
+
+        subject.onSingleTapUp(touchEvent);
+        assertThat(subject.isClicked()).isTrue();
+
+        subject.onResetUserClick();
+        assertThat(subject.isClicked()).isFalse();
+    }
+
+    /*
+        Utils
+     */
     private void simulateScroll(float endX) {
         simulateScroll(endX, savedY);
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
index d51e532d..b8c249c5 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
@@ -103,12 +103,14 @@ public void constructor_shouldCreateIntentWithImageStringAndParametersAndRespons
         emailIntent = subject.getEmailIntent();
         String emailSubject = emailIntent.getStringExtra(Intent.EXTRA_TEXT);
         String bodyParts[] = emailSubject.split("\n=================\n");
-        String parameters = bodyParts[0];
-        String response = bodyParts[1];
-        String imageString = bodyParts[2];
+        String message = bodyParts[0];
+        String parameters = bodyParts[1];
+        String response = bodyParts[2];
+        String imageString = bodyParts[3];
 
-        assertThat(bodyParts.length).isEqualTo(3);
+        assertThat(bodyParts.length).isEqualTo(4);
         //this string is the JPEG encoded version
+        assertThat(message).isEqualTo(AdAlertReporter.MESSAGE);
         assertThat(parameters).isEqualTo(subject.getParameters());
         assertThat(response).isEqualTo(subject.getResponse());
         assertThat(imageString).isEqualTo("Qml0bWFwICgxMCB4IDEwKSBjcmVhdGVkIGZyb20gQml0bWFwIG9iamVjdCBjb21wcmVzc2VkIGFz\nIEpQRUcgd2l0aCBxdWFsaXR5IDI1\n");
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java
index 286cd681..ccefa89c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java
@@ -114,31 +114,25 @@ public void sendTouchEvent_shouldSetUserClicked() {
         subject.initializeOnTouchListener();
         View.OnTouchListener onTouchListener = Shadows.shadowOf(subject).getOnTouchListener();
 
+        onTouchListener.onTouch(subject, touchDown);
         onTouchListener.onTouch(subject, touchUp);
         assertThat(subject.wasClicked()).isTrue();
     }
 
     @Test
-    public void sendTouchEvent_withLotsOfRandomMotionEvents_shouldEventuallySetUserClicked() {
+    public void sendTouchEvent_withTouchDownAndTouchUp_shouldEventuallySetUserClicked() {
         subject.initializeOnTouchListener();
         View.OnTouchListener onTouchListener = Shadows.shadowOf(subject).getOnTouchListener();
 
         onTouchListener.onTouch(subject, touchDown);
         assertThat(subject.wasClicked()).isFalse();
-        onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_CANCEL));
-        assertThat(subject.wasClicked()).isFalse();
+        onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_MOVE));
+        onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_MOVE));
         onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_MOVE));
         assertThat(subject.wasClicked()).isFalse();
 
         onTouchListener.onTouch(subject, touchUp);
         assertThat(subject.wasClicked()).isTrue();
-
-        onTouchListener.onTouch(subject, touchDown);
-        assertThat(subject.wasClicked()).isTrue();
-        onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_CANCEL));
-        assertThat(subject.wasClicked()).isTrue();
-        onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_MOVE));
-        assertThat(subject.wasClicked()).isTrue();
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
index d4ee1da8..c3941b1a 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
@@ -10,21 +10,28 @@
 import android.view.View;
 import android.widget.FrameLayout;
 
+import com.mopub.common.AdReport;
+import com.mopub.common.DataKeys;
 import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Mock;
 import org.robolectric.Robolectric;
 
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
 public class BaseInterstitialActivityTest {
     private BaseInterstitialActivity subject;
     private long broadcastIdentifier;
 
+    @Mock
+    AdReport mockAdReport;
+
     // Make a concrete version of the abstract class for testing purposes.
     private static class TestInterstitialActivity extends BaseInterstitialActivity {
         View view;
@@ -81,6 +88,49 @@ public void getBroadcastIdentifier_withMissingBroadCastId_shouldReturnNull() thr
         assertThat(subject.getBroadcastIdentifier()).isNull();
     }
 
+    @Test
+    public void getResponseString_withNullAdReport_shouldReturnNull() {
+        Intent intent = new Intent()
+                .putExtra(DataKeys.AD_REPORT_KEY, mockAdReport)
+                .putExtra(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
+
+        subject = Robolectric.buildActivity(TestInterstitialActivity.class, intent)
+                .create().get();
+
+        assertThat(subject.getResponseString()).isNull();
+    }
+
+    @Test
+    public void getResponseString_withNonNullAdReport_shouldReturnResponseString() {
+        final String responseString = "this is a response string";
+        when(mockAdReport.getResponseString()).thenReturn(responseString);
+
+        Intent intent = new Intent()
+                .putExtra(DataKeys.AD_REPORT_KEY, mockAdReport)
+                .putExtra(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
+
+        subject = Robolectric.buildActivity(TestInterstitialActivity.class, intent)
+                .create().get();
+
+        assertThat(subject.getResponseString()).isEqualTo(responseString);
+    }
+
+    @Test
+    public void staticGetResponseString_withNullAdReport_shouldReturnNull() {
+        AdReport nullAdReport = null;
+
+        assertThat(BaseInterstitialActivity.getResponseString(nullAdReport)).isNull();
+    }
+
+    @Test
+    public void staticGetResponseString_withNonNullAdReport_shouldReturnResponseString() {
+        final String responseString = "this is a response string";
+        when(mockAdReport.getResponseString()).thenReturn(responseString);
+
+        assertThat(BaseInterstitialActivity.getResponseString(mockAdReport))
+                .isEqualTo(responseString);
+    }
+
     protected FrameLayout getContentView(BaseInterstitialActivity subject) {
         return subject.getCloseableLayout();
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
index 6e1cbc17..becf551b 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
@@ -298,7 +298,7 @@ public void onBannerLoaded_whenViewIsHtmlBannerWebView_withVisibilityImpressionT
         verify(moPubView).creativeDownloaded();
         verify(moPubView).setAdContentView(eq(mockHtmlBannerWebView));
         verify(moPubView, never()).trackNativeImpression();
-        verify(moPubView).pauseAutorefresh();
+        verify(moPubView).pauseAutoRefresh();
     }
 
     @Test
@@ -320,7 +320,7 @@ public void onBannerLoaded_whenViewIsNotHtmlBannerWebView_withVisibilityImpressi
         verify(moPubView).creativeDownloaded();
         verify(moPubView).setAdContentView(eq(view));
         verify(moPubView, never()).trackNativeImpression();
-        verify(moPubView).pauseAutorefresh();
+        verify(moPubView).pauseAutoRefresh();
     }
 
     @Test
@@ -341,7 +341,7 @@ public void onBannerFailed_whenErrorCodeIsNull_shouldPassUnspecifiedError() thro
     public void onBannerExpanded_shouldPauseRefreshAndCallAdPresentOverlay_shouldCallExpand() throws Exception {
         subject.onBannerExpanded();
 
-        verify(moPubView).expand();
+        verify(moPubView).engageOverlay();
         verify(moPubView).adPresentedOverlay();
     }
 
@@ -351,14 +351,14 @@ public void onBannerCollapsed_shouldRestoreRefreshSettingAndCallAdClosed_shouldC
         subject.onBannerExpanded();
         reset(moPubView);
         subject.onBannerCollapsed();
-        verify(moPubView).collapse();
+        verify(moPubView).dismissOverlay();
         verify(moPubView).adClosed();
 
         when(moPubView.getAutorefreshEnabled()).thenReturn(false);
         subject.onBannerExpanded();
         reset(moPubView);
         subject.onBannerCollapsed();
-        verify(moPubView).collapse();
+        verify(moPubView).dismissOverlay();
         verify(moPubView).adClosed();
     }
 
@@ -394,6 +394,20 @@ public void onLeaveApplication_shouldRegisterClick() throws Exception {
         verify(moPubView).registerClick();
     }
 
+    @Test
+    public void onPauseAutoRefresh_shouldEngageOverlay() {
+        subject.onPauseAutoRefresh();
+
+        verify(moPubView).engageOverlay();
+    }
+
+    @Test
+    public void onResumeAutoRefresh_shouldDismissOverlay() {
+        subject.onResumeAutoRefresh();
+
+        verify(moPubView).dismissOverlay();
+    }
+
     @Test
     public void invalidate_shouldCauseLoadAdToDoNothing() throws Exception {
         subject.invalidate();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
index bc10082e..30bdab61 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
@@ -86,7 +86,6 @@ public void showInterstitial_withMinimumExtras_shouldStartMoPubActivityWithDefau
         subject.showInterstitial();
 
         Intent nextStartedActivity = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(nextStartedActivity.getStringExtra(HTML_RESPONSE_BODY_KEY)).isEqualTo(expectedResponse);
         assertThat(nextStartedActivity.getStringExtra(CLICKTHROUGH_URL_KEY)).isNull();
         assertThat(nextStartedActivity.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
         assertThat(nextStartedActivity.getComponent().getClassName()).isEqualTo("com.mopub.mobileads.MoPubActivity");
@@ -100,7 +99,6 @@ public void showInterstitial_shouldStartMoPubActivityWithAllExtras() throws Exce
         subject.showInterstitial();
 
         Intent nextStartedActivity = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(nextStartedActivity.getStringExtra(HTML_RESPONSE_BODY_KEY)).isEqualTo(expectedResponse);
         assertThat(nextStartedActivity.getStringExtra(CLICKTHROUGH_URL_KEY)).isEqualTo("clickthroughUrl");
         assertThat(nextStartedActivity.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
         assertThat(nextStartedActivity.getComponent().getClassName()).isEqualTo("com.mopub.mobileads.MoPubActivity");
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
index 725c8acd..f8122e9c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
@@ -72,9 +72,10 @@ public void setUp() throws Exception {
         htmlInterstitialWebView = TestHtmlInterstitialWebViewFactory.getSingletonMock();
         resetMockedView(htmlInterstitialWebView);
 
+        when(mockAdReport.getResponseString()).thenReturn(EXPECTED_HTML_DATA);
+
         Context context = Robolectric.buildActivity(Activity.class).create().get();
-        Intent moPubActivityIntent = MoPubActivity.createIntent(context,
-                EXPECTED_HTML_DATA, mockAdReport,
+        Intent moPubActivityIntent = MoPubActivity.createIntent(context, mockAdReport,
                 EXPECTED_CLICKTHROUGH_URL, EXPECTED_ORIENTATION, testBroadcastIdentifier);
 
         final ActivityController<MoPubActivity> subjectController = Robolectric.buildActivity(
@@ -97,20 +98,19 @@ public void onCreate_shouldHaveLockedOrientation() {
 
     @Test
     public void preRenderHtml_shouldPreloadTheHtml() throws Exception {
-        String htmlData = "this is nonsense";
         MoPubActivity.preRenderHtml(htmlInterstitial, subject, mockAdReport,
-                customEventInterstitialListener, htmlData,
-                "clickthroughUrl", testBroadcastIdentifier);
+                customEventInterstitialListener, "clickthroughUrl",
+                testBroadcastIdentifier);
 
         verify(htmlInterstitialWebView).enablePlugins(eq(false));
-        verify(htmlInterstitialWebView).loadHtmlResponse(htmlData);
+        verify(htmlInterstitialWebView).loadHtmlResponse(mockAdReport.getResponseString());
     }
 
     @Test
     public void preRenderHtml_shouldEnableJavascriptCachingForDummyWebView() {
         MoPubActivity.preRenderHtml(htmlInterstitial, subject, mockAdReport,
-                customEventInterstitialListener, "html_data",
-                "clickthroughUrl", testBroadcastIdentifier);
+                customEventInterstitialListener,"clickthroughUrl",
+                testBroadcastIdentifier);
 
         verify(htmlInterstitialWebView).enableJavascriptCaching();
     }
@@ -118,8 +118,8 @@ public void preRenderHtml_shouldEnableJavascriptCachingForDummyWebView() {
     @Test
     public void preRenderHtml_shouldHaveAWebViewClientThatForwardsFinishLoad() throws Exception {
         MoPubActivity.preRenderHtml(htmlInterstitial, subject, mockAdReport,
-                customEventInterstitialListener, null,
-                "clickthroughUrl", testBroadcastIdentifier);
+                customEventInterstitialListener, "clickthroughUrl",
+                testBroadcastIdentifier);
 
         ArgumentCaptor<WebViewClient> webViewClientCaptor = ArgumentCaptor.forClass(WebViewClient.class);
         verify(htmlInterstitialWebView).setWebViewClient(webViewClientCaptor.capture());
@@ -134,8 +134,8 @@ public void preRenderHtml_shouldHaveAWebViewClientThatForwardsFinishLoad() throw
     @Test
     public void preRenderHtml_shouldHaveAWebViewClientThatForwardsFailLoad() throws Exception {
         MoPubActivity.preRenderHtml(htmlInterstitial, subject, mockAdReport,
-                customEventInterstitialListener, null,
-                "clickthroughUrl", testBroadcastIdentifier);
+                customEventInterstitialListener, "clickthroughUrl",
+                testBroadcastIdentifier);
 
         ArgumentCaptor<WebViewClient> webViewClientCaptor = ArgumentCaptor.forClass(WebViewClient.class);
         verify(htmlInterstitialWebView).setWebViewClient(webViewClientCaptor.capture());
@@ -187,10 +187,9 @@ public void onDestroy_shouldFireJavascriptWebviewDidClose() throws Exception {
     public void start_shouldStartMoPubActivityWithCorrectParameters() {
         final ActivityController<MoPubActivity> activityController = Robolectric.buildActivity(MoPubActivity.class);
         final MoPubActivity activitySubject = activityController.get();
-        MoPubActivity.start(activitySubject, "expectedResponse", mockAdReport, "clickthroughUrl", CreativeOrientation.PORTRAIT, testBroadcastIdentifier);
+        MoPubActivity.start(activitySubject, mockAdReport, "clickthroughUrl", CreativeOrientation.PORTRAIT, testBroadcastIdentifier);
 
         Intent nextStartedActivity = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(nextStartedActivity.getStringExtra(HTML_RESPONSE_BODY_KEY)).isEqualTo("expectedResponse");
         assertThat(nextStartedActivity.getStringExtra(CLICKTHROUGH_URL_KEY)).isEqualTo("clickthroughUrl");
         assertThat(nextStartedActivity.getSerializableExtra(CREATIVE_ORIENTATION_KEY)).isEqualTo(CreativeOrientation.PORTRAIT);
         assertThat(nextStartedActivity.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java
index cb5b0fca..91d64143 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java
@@ -130,7 +130,7 @@ public void reportAppOpen_shouldTrackWhenConsentIsTrueAndWantToTrack() throws Ex
         mSharedPreferences
                 .edit()
                 .putBoolean(mWantToTrack, true)
-                .commit();
+                .apply();
 
         assertThat(subject.shouldTrack()).isTrue();
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
index c013d0d1..f2c37fe7 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
@@ -171,7 +171,7 @@ public void tearDown() throws Exception {
         ShadowLooper.unPauseMainLooper();
         MoPubRewardedVideoManager.getRewardedAdData().clear();
         MoPubRewardedVideoManager.getAdRequestStatusMapping().clearMapping();
-        mTestCustomEventSharedPrefs.edit().clear().commit();
+        mTestCustomEventSharedPrefs.edit().clear().apply();
         MoPubIdentifierTest.clearPreferences(mActivity);
         new Reflection.MethodBuilder(null, "clearAdvancedBidders")
                 .setStatic(MoPub.class)
@@ -698,7 +698,7 @@ public void onAdSuccess_withNewInitParams_shouldUpdateInitParamsInSharedPrefs()
         // Put in {"k1":"v1","k2":"v2"} as existing init params.
         mTestCustomEventSharedPrefs.edit().putString(
                 TestCustomEvent.class.getName(),
-                "{\"k1\":\"v1\",\"k2\":\"v2\"}").commit();
+                "{\"k1\":\"v1\",\"k2\":\"v2\"}").apply();
 
         // New init params are {"k3":"v3"}.
         JSONObject jsonResponse = createRewardedJsonResponse();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
index fba7b11a..a2ff830a 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
@@ -113,7 +113,7 @@ public void preRenderHtml_shouldLoadHtml() {
     @Test
     public void preRenderHtml_shouldSetWebViewClient() throws Exception {
         MraidActivity.preRenderHtml(mraidInterstitial, subject, customEventInterstitialListener,
-                "3:27", testBroadcastIdentifier, adReport);
+                testBroadcastIdentifier, adReport);
 
         verify(mockMraidWebView).enablePlugins(eq(false));
         verify(mraidController).setMraidListener(any(MraidListener.class));
@@ -124,7 +124,7 @@ public void preRenderHtml_shouldSetWebViewClient() throws Exception {
     @Ignore("Mraid 2.0")
     @Test
     public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialLoaded_whenMraidListenerOnReady() throws Exception {
-        MraidActivity.preRenderHtml(mraidInterstitial, subject, customEventInterstitialListener, "",
+        MraidActivity.preRenderHtml(mraidInterstitial, subject, customEventInterstitialListener,
                 testBroadcastIdentifier, adReport);
 
         ArgumentCaptor<MraidListener> mraidListenerArgumentCaptorr = ArgumentCaptor.forClass(MraidListener.class);
@@ -139,7 +139,7 @@ public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialLoaded_
     @Ignore("Mraid 2.0")
     @Test
     public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialFailed_whenMraidListenerOnFailure() throws Exception {
-        MraidActivity.preRenderHtml(mraidInterstitial, subject, customEventInterstitialListener, "",
+        MraidActivity.preRenderHtml(mraidInterstitial, subject, customEventInterstitialListener,
                 testBroadcastIdentifier, adReport);
 
         ArgumentCaptor<MraidListener> mraidListenerArgumentCaptorr = ArgumentCaptor.forClass(MraidListener.class);
@@ -154,7 +154,7 @@ public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialFailed_
     @Ignore("Mraid 2.0")
     @Test
     public void preRenderHtml_whenWebViewClientShouldOverrideUrlLoading_shouldReturnTrue() throws Exception {
-        MraidActivity.preRenderHtml(mraidInterstitial, subject, customEventInterstitialListener, "",
+        MraidActivity.preRenderHtml(mraidInterstitial, subject, customEventInterstitialListener,
                 testBroadcastIdentifier, adReport);
 
         ArgumentCaptor<WebViewClient> webViewClientArgumentCaptor = ArgumentCaptor.forClass(WebViewClient.class);
@@ -172,7 +172,7 @@ public void preRenderHtml_whenWebViewClientShouldOverrideUrlLoading_shouldReturn
     @Ignore("Mraid 2.0")
     @Test
     public void preRenderHtml_shouldCallCustomEventInterstitialOnInterstitialLoaded_whenWebViewClientOnPageFinished() throws Exception {
-        MraidActivity.preRenderHtml(mraidInterstitial, subject, customEventInterstitialListener, "",
+        MraidActivity.preRenderHtml(mraidInterstitial, subject, customEventInterstitialListener,
                 testBroadcastIdentifier, adReport);
 
         ArgumentCaptor<WebViewClient> webViewClientArgumentCaptor = ArgumentCaptor.forClass(WebViewClient.class);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidActivityTest.java
index 71c3a1ff..3b1a3743 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidActivityTest.java
@@ -21,6 +21,7 @@
 
 import static com.mopub.mraid.RewardedMraidController.MILLIS_IN_SECOND;
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
 public class RewardedMraidActivityTest {
@@ -42,8 +43,9 @@ public void setup() {
         broadcastIdentifier = 3333;
         shouldRewardOnClick = false;
 
+        when(mockAdReport.getResponseString()).thenReturn(HTML_DATA);
         Context context = Robolectric.buildActivity(Activity.class).create().get();
-        Intent intent = RewardedMraidActivity.createIntent(context, mockAdReport, HTML_DATA,
+        Intent intent = RewardedMraidActivity.createIntent(context, mockAdReport,
                 broadcastIdentifier, REWARDED_DURATION_IN_SECONDS, shouldRewardOnClick);
         subject = Robolectric.buildActivity(RewardedMraidActivity.class, intent)
                 .create().get();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/ViewGestureDetectorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/ViewGestureDetectorTest.java
index 05b5dc7a..d144a305 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/ViewGestureDetectorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/ViewGestureDetectorTest.java
@@ -19,7 +19,6 @@
 import org.robolectric.Shadows;
 import org.robolectric.shadows.ShadowGestureDetector;
 
-import static com.mopub.mobileads.ViewGestureDetector.UserClickListener;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
@@ -59,36 +58,11 @@ public void constructor_shouldDisableLongPressAndSetGestureListener() throws Exc
         assertThat(shadowGestureDetector.getListener()).isInstanceOf(AdAlertGestureListener.class);
     }
 
-    @Test
-    public void onTouchEvent_whenActionUpAndClickListener_shouldNotifyClickListenerAndCheckReportAd() throws Exception {
-        MotionEvent expectedMotionEvent = createMotionEvent(MotionEvent.ACTION_UP);
-
-        UserClickListener userClickListener = mock(UserClickListener.class);
-        subject.setUserClickListener(userClickListener);
-
-        subject.sendTouchEvent(expectedMotionEvent);
-
-        verify(userClickListener).onUserClick();
-        verify(adAlertGestureListener).finishGestureDetection();
-    }
-
-    @Test
-    public void onTouchEvent_whenActionUpButNoClickListener_shouldNotNotifyClickListenerAndCheckReportAd() throws Exception {
-        MotionEvent expectedMotionEvent = createMotionEvent(MotionEvent.ACTION_UP);
-
-        UserClickListener userClickListener = mock(UserClickListener.class);
-
-        subject.sendTouchEvent(expectedMotionEvent);
-
-        verify(userClickListener, never()).onUserClick();
-        verify(adAlertGestureListener).finishGestureDetection();
-    }
-
     @Test
     public void onTouchEvent_whenActionDown_shouldForwardOnTouchEvent() throws Exception {
         MotionEvent expectedMotionEvent = createMotionEvent(MotionEvent.ACTION_DOWN);
 
-        subject.sendTouchEvent(expectedMotionEvent);
+        subject.onTouchEvent(expectedMotionEvent);
 
         MotionEvent actualMotionEvent = Shadows.shadowOf(subject).getOnTouchEventMotionEvent();
 
@@ -98,10 +72,10 @@ public void onTouchEvent_whenActionDown_shouldForwardOnTouchEvent() throws Excep
     @Test
     public void onTouchEvent_whenActionMoveWithinView_shouldForwardOnTouchEvent() throws Exception {
         MotionEvent downEvent = createMotionEvent(MotionEvent.ACTION_DOWN);
-        subject.sendTouchEvent(downEvent);
+        subject.onTouchEvent(downEvent);
 
         MotionEvent expectedMotionEvent = createActionMove(160);
-        subject.sendTouchEvent(expectedMotionEvent);
+        subject.onTouchEvent(expectedMotionEvent);
 
         MotionEvent actualMotionEvent = Shadows.shadowOf(subject).getOnTouchEventMotionEvent();
 
@@ -109,27 +83,6 @@ public void onTouchEvent_whenActionMoveWithinView_shouldForwardOnTouchEvent() th
         verify(adAlertGestureListener, never()).reset();
     }
 
-    @Test
-    public void sendTouchEvent_whenReceiveTouchEventOutsideOfViewInXDirection_shouldResetAlertState() throws Exception {
-        subject.sendTouchEvent(createActionMove(350));
-
-        MotionEvent actualMotionEvent = Shadows.shadowOf(subject).getOnTouchEventMotionEvent();
-
-        assertThat(actualMotionEvent).isNull();
-        verify(adAlertGestureListener).reset();
-    }
-
-    @Test
-    public void sendTouchEvent_whenReceiveTouchEventOutsideOfViewInYDirection_shouldResetAlertState() throws Exception {
-        MotionEvent verticalMotion = MotionEvent.obtain(0, 0, MotionEvent.ACTION_MOVE, 160, 200, 0);
-        subject.sendTouchEvent(verticalMotion);
-
-        MotionEvent actualMotionEvent = Shadows.shadowOf(subject).getOnTouchEventMotionEvent();
-
-        assertThat(actualMotionEvent).isNull();
-        verify(adAlertGestureListener).reset();
-    }
-
     @Test
     public void resetAdFlaggingGesture_shouldNotifyAdAlertGestureListenerOfReset() throws Exception {
         subject.resetAdFlaggingGesture();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
index c728cc8e..de679b52 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
@@ -48,6 +48,8 @@
 import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
 import com.mopub.mraid.MraidNativeCommandHandler;
 import com.mopub.network.PlayServicesUrlRewriter;
+import com.mopub.network.RequestRateTracker;
+import com.mopub.network.RequestRateTrackerTest;
 
 import org.junit.After;
 import org.junit.Before;
@@ -183,6 +185,7 @@ public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {
     public void tearDown() throws Exception {
         reset(methodBuilder);
         ClientMetadata.clearForTesting();
+        RequestRateTrackerTest.clearRequestRateTracker();
         MoPubIdentifierTest.clearPreferences(context);
         new Reflection.MethodBuilder(null, "clearAdvancedBidders")
                 .setStatic(MoPub.class)
@@ -233,6 +236,7 @@ public void generateAdUrl_shouldIncludeAllFields() throws Exception {
         when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
 
         ClientMetadata.clearForTesting();
+        RequestRateTrackerTest.prepareRequestRateTracker("adUnitId", 99, "some_reason");
 
         final String expectedAdUrl = new AdUrlBuilder(expectedUdid)
                 .withAdUnitId("adUnitId")
@@ -246,6 +250,8 @@ public void generateAdUrl_shouldIncludeAllFields() throws Exception {
                 .withExternalStoragePermission(false)
                 .withAbt("{\"UrlGeneratorTest\":{\"token\":\"WebViewAdvancedBidderToken\"}}")
                 .withCurrentConsentStatus(ConsentStatus.UNKNOWN.getValue())
+                .withBackoffMs(99)
+                .withBackoffReason("some_reason")
                 .build();
 
         shadowTelephonyManager.setNetworkOperator("123456");
@@ -1042,6 +1048,8 @@ private String generateMinimumUrlString() {
         private String forceGdprApplies = "0";
         private String consentedPrivacyPolicyVersion = "";
         private String consentedVendorListVersion = "";
+        private String backoffMs = "";
+        private String backoffReason = "";
 
         public AdUrlBuilder(String expectedUdid) {
             this.expectedUdid = expectedUdid;
@@ -1079,6 +1087,8 @@ public String build() {
                     paramIfNotEmpty("current_consent_status", currentConsentStatus) +
                     paramIfNotEmpty("consented_privacy_policy_version", consentedPrivacyPolicyVersion) +
                     paramIfNotEmpty("consented_vendor_list_version", consentedVendorListVersion) +
+                    paramIfNotEmpty("backoff_ms", backoffMs) +
+                    paramIfNotEmpty("backoff_reason", backoffReason) +
                     "&mr=1" +
                     "&android_perms_ext_storage=" + externalStoragePermission +
                     "&vv=3";
@@ -1168,6 +1178,18 @@ public AdUrlBuilder withConsentedVendorListVersion(String consentedVendorListVer
             return this;
         }
 
+        AdUrlBuilder withBackoffMs(@Nullable final Integer backoffMs) {
+            if (backoffMs != null) {
+                this.backoffMs = String.valueOf(backoffMs);
+            }
+            return this;
+        }
+
+        AdUrlBuilder withBackoffReason(@Nullable final String backoffReason) {
+            this.backoffReason = backoffReason;
+            return this;
+        }
+
         private String paramIfNotEmpty(String key, String value) {
             if (TextUtils.isEmpty(value)) {
                 return "";
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java
index 5bdacf27..699bf188 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java
@@ -10,6 +10,9 @@
 
 import com.mopub.common.DataKeys;
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.CustomEventBanner;
+import com.mopub.mobileads.InternalCustomEventBannerListener;
+import com.mopub.mobileads.MoPubErrorCode;
 import com.mopub.mobileads.test.support.TestMraidControllerFactory;
 import com.mopub.mraid.MraidController.MraidListener;
 
@@ -23,11 +26,12 @@
 import java.util.Map;
 
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
 import static com.mopub.mobileads.MoPubErrorCode.MRAID_LOAD_ERROR;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
@@ -35,7 +39,7 @@
     private static final String INPUT_HTML_DATA = "%3Chtml%3E%3C%2Fhtml%3E";
 
     MraidController mockMraidController;
-    @Mock CustomEventBannerListener mockBannerListener;
+    @Mock InternalCustomEventBannerListener mockBannerListener;
 
     private Context context;
     private Map<String, Object> localExtras;
@@ -135,6 +139,33 @@ public void bannerMraidListener_onClose_shouldNotifyBannerCollapsed() {
         verify(mockBannerListener).onBannerCollapsed();
     }
 
+    @Test
+    public void bannerMraidListener_onResizeToOriginalSizeTrue_shouldNotifyResumeAutoRefresh() {
+        MraidListener mraidListener = captureMraidListener();
+        mraidListener.onResize(true);
+
+        verify(mockBannerListener).onResumeAutoRefresh();
+    }
+
+    @Test
+    public void bannerMraidListener_onResizeToOriginalSizeFalse_shouldNotifyPauseAutoRefresh() {
+        MraidListener mraidListener = captureMraidListener();
+        mraidListener.onResize(false);
+
+        verify(mockBannerListener).onPauseAutoRefresh();
+    }
+
+    @Test
+    public void bannerMraidListener_notInstanceOfInternalListener_shouldNotifyBannerFailed() {
+        CustomEventBanner.CustomEventBannerListener mockPublicListener = mock(
+                CustomEventBanner.CustomEventBannerListener.class);
+        subject.loadBanner(context, mockPublicListener, localExtras, serverExtras);
+        ArgumentCaptor<MraidListener> listenerCaptor = ArgumentCaptor.forClass(MraidListener.class);
+        verify(mockMraidController, never()).setMraidListener(listenerCaptor.capture());
+
+        verify(mockPublicListener).onBannerFailed(MoPubErrorCode.MRAID_LOAD_ERROR);
+    }
+
     @Test
     public void trackMpxAndThirdPartyImpressions_shouldFireJavascriptWebViewDidAppear() {
         MraidListener mraidListener = captureMraidListener();
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
index e33be002..a044eaeb 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
@@ -57,6 +57,7 @@
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyZeroInteractions;
 import static org.mockito.Mockito.when;
 import static org.robolectric.Shadows.shadowOf;
 
@@ -1032,13 +1033,22 @@ public void unapplyOrientation_withoutLockedOrientation_shouldNotChangeRequested
     }
 
     @Test
-    public void destroy_shouldCancelLastMetricsRequest_shouldUnregisterBroadcastReceiver_shouldDetachAllBridges() {
+    public void destroy_shouldCancelLastMetricsRequest_shouldUnregisterBroadcastReceiver_shouldDetachAllBridges_shouldUnapplyOrientation() throws Exception {
+        setMockActivityInfo(true, ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED,
+                ActivityInfo.CONFIG_ORIENTATION | ActivityInfo.CONFIG_SCREEN_SIZE);
+        subject.handleSetOrientationProperties(false, MraidOrientation.LANDSCAPE);
+        subject.applyOrientation();
+        assertThat(activity.getRequestedOrientation())
+                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
+
         subject.destroy();
 
         verify(mockScreenMetricsWaiter).cancelLastRequest();
         verify(mockOrientationBroadcastReceiver).unregister();
         verify(mockBridge).detach();
         verify(mockTwoPartBridge).detach();
+        assertThat(activity.getRequestedOrientation())
+                .isEqualTo(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
     }
 
     @Test
@@ -1107,6 +1117,195 @@ public void destroy_fromResizedState_shouldRemoveCloseableAdContainerFromContent
         assertThat(rootView.getChildCount()).isEqualTo(0);
     }
 
+    @Test
+    public void callMraidListenerCallbacks_withVariousStates_shouldCallCorrectMraidListenerCallback() {
+        // Previous state LOADING
+
+        ViewState previousViewState = ViewState.LOADING;
+        ViewState currentViewState = ViewState.LOADING;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verifyZeroInteractions(mockMraidListener);
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.LOADING;
+        currentViewState = ViewState.DEFAULT;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verifyZeroInteractions(mockMraidListener);
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.LOADING;
+        currentViewState = ViewState.RESIZED;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verify(mockMraidListener).onResize(false);
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.LOADING;
+        currentViewState = ViewState.EXPANDED;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verify(mockMraidListener).onExpand();
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.LOADING;
+        currentViewState = ViewState.HIDDEN;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verify(mockMraidListener).onClose();
+
+
+        // Previous state DEFAULT
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.DEFAULT;
+        currentViewState = ViewState.LOADING;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verifyZeroInteractions(mockMraidListener);
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.DEFAULT;
+        currentViewState = ViewState.DEFAULT;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verifyZeroInteractions(mockMraidListener);
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.DEFAULT;
+        currentViewState = ViewState.RESIZED;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verify(mockMraidListener).onResize(false);
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.DEFAULT;
+        currentViewState = ViewState.EXPANDED;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verify(mockMraidListener).onExpand();
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.DEFAULT;
+        currentViewState = ViewState.HIDDEN;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verify(mockMraidListener).onClose();
+
+
+        // Previous state RESIZED
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.RESIZED;
+        currentViewState = ViewState.LOADING;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verifyZeroInteractions(mockMraidListener);
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.RESIZED;
+        currentViewState = ViewState.DEFAULT;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verify(mockMraidListener).onResize(true);
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.RESIZED;
+        currentViewState = ViewState.RESIZED;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verify(mockMraidListener).onResize(false);
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.RESIZED;
+        currentViewState = ViewState.EXPANDED;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verify(mockMraidListener).onExpand();
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.RESIZED;
+        currentViewState = ViewState.HIDDEN;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verify(mockMraidListener).onClose();
+
+
+        // Previous state EXPANDED
+
+        previousViewState = ViewState.EXPANDED;
+        currentViewState = ViewState.LOADING;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verifyZeroInteractions(mockMraidListener);
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.EXPANDED;
+        currentViewState = ViewState.DEFAULT;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verify(mockMraidListener).onClose();
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.EXPANDED;
+        currentViewState = ViewState.RESIZED;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verify(mockMraidListener).onResize(false);
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.EXPANDED;
+        currentViewState = ViewState.EXPANDED;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verify(mockMraidListener).onExpand();
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.EXPANDED;
+        currentViewState = ViewState.HIDDEN;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verify(mockMraidListener).onClose();
+
+
+        // Previous state HIDDEN
+
+        previousViewState = ViewState.HIDDEN;
+        currentViewState = ViewState.LOADING;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verifyZeroInteractions(mockMraidListener);
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.HIDDEN;
+        currentViewState = ViewState.DEFAULT;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verifyZeroInteractions(mockMraidListener);
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.HIDDEN;
+        currentViewState = ViewState.RESIZED;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verify(mockMraidListener).onResize(false);
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.HIDDEN;
+        currentViewState = ViewState.EXPANDED;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verify(mockMraidListener).onExpand();
+
+        reset(mockMraidListener);
+        previousViewState = ViewState.HIDDEN;
+        currentViewState = ViewState.HIDDEN;
+        MraidController.callMraidListenerCallbacks(mockMraidListener, previousViewState,
+                currentViewState);
+        verify(mockMraidListener).onClose();
+    }
+
     private void setMockActivityInfo(final boolean activityInfoFound, int screenOrientation,
             int configChanges) throws PackageManager.NameNotFoundException {
         final ActivityInfo mockActivityInfo = mock(ActivityInfo.class);
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java
index f4a12f04..9d1c0718 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java
@@ -113,7 +113,6 @@ public void showInterstitial_shouldStartActivityWithIntent() throws Exception {
 
         assertThat(intent.getComponent().getClassName())
                 .isEqualTo("com.mopub.mobileads.MraidActivity");
-        assertThat(intent.getExtras().get(HTML_RESPONSE_BODY_KEY)).isEqualTo(EXPECTED_HTML_DATA);
         assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java
index b0cf29fb..85f35868 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java
@@ -76,6 +76,7 @@
 public class MraidNativeCommandHandlerTest {
     private static final String IMAGE_URI_VALUE = "file://tmp/expectedFile.jpg";
     private static final String REMOTE_IMAGE_URL = "https://www.mopub.com/expectedFile.jpg";
+    private static final String FILE_PATH = "/tmp/expectedFile.jpg";
     private static final int TIME_TO_PAUSE_FOR_NETWORK = 300;
     private static final String FAKE_IMAGE_DATA = "imageFileData";
     //XXX: Robolectric or JUNIT doesn't support the correct suffix ZZZZZ in the parse pattern, so replacing xx:xx with xxxx for time.
@@ -98,7 +99,7 @@ public void setUp() throws Exception {
 
         ByteArrayOutputStream baos = new ByteArrayOutputStream();
         TestDrawables.EXPECTED_FILE.getBitmap().compress(Bitmap.CompressFormat.JPEG, 100, baos);
-        FileUtils.writeBytesToFile(baos.toByteArray(), "/tmp/expectedFile.jpg");
+        FileUtils.writeBytesToFile(baos.toByteArray(), FILE_PATH);
 
         expectedFile = new File(Environment.getExternalStorageDirectory(), "Pictures" + separator + "expectedFile.jpg");
         pictureDirectory = new File(Environment.getExternalStorageDirectory(), "Pictures");
@@ -112,6 +113,7 @@ public void setUp() throws Exception {
     @After
     public void tearDown() {
         ShadowToast.reset();
+        assertThat(new File(FILE_PATH).delete()).isTrue();
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/RewardedMraidInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/RewardedMraidInterstitialTest.java
index d3f11cd8..0c00f6ef 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/RewardedMraidInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/RewardedMraidInterstitialTest.java
@@ -22,6 +22,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import static com.mopub.common.DataKeys.AD_REPORT_KEY;
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.common.DataKeys.REWARDED_AD_DURATION_KEY;
@@ -128,11 +129,12 @@ public void showInterstitial_shouldStartActivityWithIntent() throws Exception {
 
         assertThat(intent.getComponent().getClassName())
                 .isEqualTo("com.mopub.mobileads.RewardedMraidActivity");
-        assertThat(intent.getExtras().get(HTML_RESPONSE_BODY_KEY)).isEqualTo(EXPECTED_HTML_DATA);
         assertThat(intent.getExtras().get(REWARDED_AD_DURATION_KEY)).isEqualTo(
                 EXPECTED_REWARDED_DURATION_SECONDS);
         assertThat(intent.getExtras().get(SHOULD_REWARD_ON_CLICK_KEY)).isEqualTo(
                 EXPECTED_SHOULD_REWARD_ON_CLICK);
+        assertThat(intent.getExtras().get(AD_REPORT_KEY)).isEqualTo(
+                localExtras.get(AD_REPORT_KEY));
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/HttpDiskCompositeDataSourceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/HttpDiskCompositeDataSourceTest.java
deleted file mode 100644
index 44b6cd63..00000000
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/HttpDiskCompositeDataSourceTest.java
+++ /dev/null
@@ -1,494 +0,0 @@
-// Copyright 2018-2019 Twitter, Inc.
-// Licensed under the MoPub SDK License Agreement
-// http://www.mopub.com/legal/sdk-license-agreement/
-
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.net.Uri;
-
-import com.google.android.exoplayer2.upstream.DataSpec;
-import com.google.android.exoplayer2.upstream.HttpDataSource;
-import com.mopub.common.CacheService;
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import org.robolectric.Robolectric;
-
-import java.util.Arrays;
-import java.util.Random;
-import java.util.TreeSet;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Matchers.refEq;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.verifyZeroInteractions;
-import static org.mockito.Mockito.when;
-
-@RunWith(SdkTestRunner.class)
-public class HttpDiskCompositeDataSourceTest {
-
-    private static final int BASE_SEED = 1234567890;
-    @Mock HttpDataSource mockHttpDataSource;
-    private HttpDiskCompositeDataSource subject;
-    private DataSpec dataSpec;
-    private Uri uri;
-
-
-    @Before
-    public void setUp() throws Exception {
-        Context context = Robolectric.buildActivity(Activity.class).create().get();
-        CacheService.initialize(context);
-        subject = new HttpDiskCompositeDataSource(context, "userAgent", mockHttpDataSource);
-        uri = new Uri.Builder().scheme("https").path("www.someurl").build();
-        dataSpec = new DataSpec(uri, 0, -1, null);
-    }
-
-    @After
-    public void tearDown() throws Exception {
-        CacheService.clearAndNullCaches();
-    }
-
-    @Test
-    public void open_withNullDataSpecUri_shouldReturnLengthUnbounded() throws Exception {
-        DataSpec dataSpecWithNullUri = new DataSpec(null);
-
-        final long result = subject.open(dataSpecWithNullUri);
-
-        assertThat(result).isEqualTo(HttpDiskCompositeDataSource.LENGTH_UNBOUNDED);
-        verifyZeroInteractions(mockHttpDataSource);
-    }
-
-    @Test
-    public void open_withNoCachedData_shouldOpenHttpDataSource() throws Exception {
-        when(mockHttpDataSource.open(any(DataSpec.class))).thenReturn(200000L);
-
-        long result = subject.open(dataSpec);
-
-        assertThat(result).isEqualTo(200000L);
-        verify(mockHttpDataSource).open(refEq(dataSpec));
-        verifyNoMoreInteractions(mockHttpDataSource);
-    }
-
-    @Test
-    public void open_withAllDataCached_shouldNotOpenHttpDataSource() throws Exception {
-        // When the entire file is cached, there's no need to open the network.
-        when(mockHttpDataSource.open(any(DataSpec.class))).thenReturn(100000L);
-        byte[] data = generateRandomByteArray(100000, 0);
-        byte[] expectedFileSize = "100000".getBytes();
-        byte[] intervals = "[\"{start : 0, length : 100000}\"]".getBytes();
-        CacheService.putToDiskCache("0" + uri.toString(), data);
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.EXPECTED_FILE_SIZE_KEY_PREFIX + uri.toString(),
-                expectedFileSize);
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.INTERVALS_KEY_PREFIX + uri.toString(), intervals);
-
-        long result = subject.open(dataSpec);
-
-        assertThat(result).isEqualTo(100000);
-        verifyZeroInteractions(mockHttpDataSource);
-    }
-
-    @Test
-    public void open_withSomeDataCached_shouldOpenHttpDataSourceAtAppropriateStartPoint() throws Exception {
-        // The idea behind this test is that we think we have the first 33333 bytes and need to ask
-        // the network for byte 33333 and onward.
-        when(mockHttpDataSource.open(any(DataSpec.class))).thenReturn(100000L);
-        byte[] data = generateRandomByteArray(100000, 0);
-        byte[] expectedFileSize = "100000".getBytes();
-        byte[] intervals = "[\"{start : 0, length : 33333}\"]".getBytes();
-        CacheService.putToDiskCache("0" + uri.toString(), data);
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.EXPECTED_FILE_SIZE_KEY_PREFIX + uri.toString(),
-                expectedFileSize);
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.INTERVALS_KEY_PREFIX + uri.toString(), intervals);
-
-        long result = subject.open(dataSpec);
-
-        assertThat(result).isEqualTo(100000);
-        DataSpec expectedDataSpec = new DataSpec(dataSpec.uri, 33333, -1, null);
-        // Using refEq because equals() is just the Java default, and they're not the same object.
-        verify(mockHttpDataSource).open(refEq(expectedDataSpec));
-    }
-
-    @Test
-    public void read_with2048ExpectedBytes_shouldFillBufferWith2048Bytes_shouldReturnNumberOfBytesRead2048() throws Exception {
-        // This is the case where we're reading from a cache that has all the necessary bytes
-        byte[] data = generateRandomByteArray(100000, 0);
-        byte[] expectedFileSize = "100000".getBytes();
-        byte[] intervals = "[\"{start : 0, length : 100000}\"]".getBytes();
-        // Pretend we have all the bytes in the cache, complete with the expected file size and
-        // a valid intervals set.
-        CacheService.putToDiskCache("0" + uri.toString(), data);
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.EXPECTED_FILE_SIZE_KEY_PREFIX + uri.toString(),
-                expectedFileSize);
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.INTERVALS_KEY_PREFIX + uri.toString(), intervals);
-        byte[] readBuffer = new byte[2048];
-
-        subject.open(dataSpec);
-        int bytesRead = subject.read(readBuffer, 0, 2048);
-
-        // Verify that all 2048 bytes are expected and that the return value of read() is 2048
-        assertThat(bytesRead).isEqualTo(2048);
-        byte[] expectedData = new byte[2048];
-        System.arraycopy(data, 0, expectedData, 0, 2048);
-        assertThat(readBuffer).isEqualTo(expectedData);
-        verifyZeroInteractions(mockHttpDataSource);
-    }
-
-    @Test
-    public void read_withAllDataCached_whenReadingAcrossSegmentBoundaries_shouldReturnAllBytes() throws Exception {
-        // This is the case where we're reading from a cache that has all the necessary bytes, but
-        // some of it is in the next block. We need to finish reading from the current block, set
-        // up reading from the next block, and then do it.
-        byte[] data1 = generateRandomByteArray(HttpDiskCompositeDataSource.BLOCK_SIZE, 0);
-        byte[] data2 = generateRandomByteArray(HttpDiskCompositeDataSource.BLOCK_SIZE, 1);
-        String expectedFileLengthString = String.valueOf(
-                2 * HttpDiskCompositeDataSource.BLOCK_SIZE);
-        byte[] intervals = ("[\"{start : 0, length : " + expectedFileLengthString + "}\"]").getBytes();
-        CacheService.putToDiskCache("0" + uri.toString(), data1);
-        CacheService.putToDiskCache("1" + uri.toString(), data2);
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.EXPECTED_FILE_SIZE_KEY_PREFIX + uri.toString(),
-                expectedFileLengthString.getBytes());
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.INTERVALS_KEY_PREFIX + uri.toString(), intervals);
-        // Expect to read the last 1337 bytes from the first block and the rest from the second block
-        DataSpec modifiedDataSpec = new DataSpec(dataSpec.uri,
-                HttpDiskCompositeDataSource.BLOCK_SIZE - 1337, -1, null);
-        byte[] readBuffer = new byte[4096];
-
-        subject.open(modifiedDataSpec);
-        int bytesRead = subject.read(readBuffer, 0, 4096);
-
-        assertThat(bytesRead).isEqualTo(4096);
-        byte[] expectedBytes = new byte[4096];
-        System.arraycopy(data1, HttpDiskCompositeDataSource.BLOCK_SIZE - 1337, expectedBytes, 0,
-                1337);
-        System.arraycopy(data2, 0, expectedBytes, 1337, 4096 - 1337);
-        assertThat(readBuffer).isEqualTo(expectedBytes);
-        verifyZeroInteractions(mockHttpDataSource);
-    }
-
-    @Test
-    public void read_withEmptyCache_shouldReadBytesFromNetwork() throws Exception {
-        // Sets up an empty cache and read directly from the network
-        final byte[] bytesFromNetwork = generateRandomByteArray(2048, 0);
-        when(mockHttpDataSource.open(any(DataSpec.class))).thenReturn(100000L);
-        setUpMockHttpDataSourceToReturnBytesFromNetwork(bytesFromNetwork, mockHttpDataSource);
-        byte[] readBuffer = new byte[2048];
-
-        subject.open(dataSpec);
-        int bytesRead = subject.read(readBuffer, 0, 2048);
-
-        assertThat(bytesRead).isEqualTo(2048);
-        assertThat(readBuffer).isEqualTo(bytesFromNetwork);
-        verify(mockHttpDataSource).open(refEq(dataSpec));
-        verify(mockHttpDataSource).read(any(byte[].class), eq(0), eq(2048));
-        verifyNoMoreInteractions(mockHttpDataSource);
-    }
-
-    @Test
-    public void read_withSomeDataInCache_shouldReadRestOfBytesFromNetwork() throws Exception {
-        // This is the case where there is some data in the cache, and we run out of cached data.
-        // The rest of the bytes are from the network.
-        final byte[] bytesFromNetwork = generateRandomByteArray(2048, 0);
-        when(mockHttpDataSource.open(any(DataSpec.class))).thenReturn(100000L);
-        setUpMockHttpDataSourceToReturnBytesFromNetwork(bytesFromNetwork, mockHttpDataSource);
-        byte[] data = generateRandomByteArray(2048, 1);
-        byte[] segment0 = new byte[HttpDiskCompositeDataSource.BLOCK_SIZE];
-        byte[] expectedFileSize = "100000".getBytes();
-        byte[] intervals = ("[\"{start : 0, length : 2048}\"]").getBytes();
-        // So we have the first 2048 bytes in the cache
-        System.arraycopy(data, 0, segment0, 0, 2048);
-        CacheService.putToDiskCache("0" + uri.toString(), segment0);
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.EXPECTED_FILE_SIZE_KEY_PREFIX + uri.toString(),
-                expectedFileSize);
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.INTERVALS_KEY_PREFIX + uri.toString(), intervals);
-        // However, we want to read 4096 bytes (We have to go to the network for the rest).
-        byte[] readBuffer = new byte[4096];
-
-        subject.open(dataSpec);
-        int bytesRead = subject.read(readBuffer, 0, 4096);
-
-        // Make sure that the bytes read have both the first 2048 bytes from the cache and the 2048
-        // bytes from the network.
-        assertThat(bytesRead).isEqualTo(4096);
-        byte[] expectedBytes = new byte[4096];
-        System.arraycopy(data, 0, expectedBytes, 0, 2048);
-        System.arraycopy(bytesFromNetwork, 0, expectedBytes, 2048, 2048);
-        assertThat(readBuffer).isEqualTo(expectedBytes);
-        DataSpec modifiedDataSpec = new DataSpec(dataSpec.uri, 2048, -1, null);
-        verify(mockHttpDataSource).open(refEq(modifiedDataSpec));
-        // Verify that we stored the bytes from network starting from index 2048 for 2048 bytes
-        verify(mockHttpDataSource).read(any(byte[].class), eq(2048), eq(2048));
-        verifyNoMoreInteractions(mockHttpDataSource);
-    }
-
-    @Test
-    public void read_withSomeDataInCacheBeforeBlockBoundary_whenApproachingBlockBoundary_shouldReadBytesFromDisk_shouldReadBytesFromNetwork_shouldSetUpNextBlock() throws Exception {
-        // This is the situation where the cache ends 1024 bytes before the second block boundary.
-        // We need to read the first 1024 bytes from the cache, read the next 3072 bytes, store
-        // the first 1024 bytes in the current block, close it out, flush it, set up the next block,
-        // and store the next 2048 bytes into that block.
-        final byte[] bytesFromNetwork = generateRandomByteArray(3072, 0);
-        when(mockHttpDataSource.open(any(DataSpec.class))).thenReturn(
-                (long) (HttpDiskCompositeDataSource.BLOCK_SIZE * 4));
-        setUpMockHttpDataSourceToReturnBytesFromNetwork(bytesFromNetwork, mockHttpDataSource);
-        byte[] data = generateRandomByteArray(HttpDiskCompositeDataSource.BLOCK_SIZE, 1);
-        byte[] expectedFileSize = String.valueOf(
-                HttpDiskCompositeDataSource.BLOCK_SIZE * 4).getBytes();
-        // Typical access patterns of video is to request for the first 44 bytes, the last 3886
-        // bytes, and then start at byte 44 and request till the end of the video. We are pretending
-        // that we did that, and stopped 1024 bytes before the end of the 2nd block.
-        byte[] intervals = ("[\"{start : 0, length : 44}\", \"{start : " +
-                (HttpDiskCompositeDataSource.BLOCK_SIZE * 4 - 3886) +
-                ", length : 3886}\", \"{start : 44, length : " +
-                (HttpDiskCompositeDataSource.BLOCK_SIZE * 2 - 1024 - 44) + "}\"]")
-                .getBytes();
-        CacheService.putToDiskCache("1" + uri.toString(), data);
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.EXPECTED_FILE_SIZE_KEY_PREFIX + uri.toString(),
-                expectedFileSize);
-        CacheService.putToDiskCache(
-                HttpDiskCompositeDataSource.INTERVALS_KEY_PREFIX + uri.toString(), intervals);
-        byte[] readBuffer = new byte[4096];
-        dataSpec = new DataSpec(dataSpec.uri, 2 * HttpDiskCompositeDataSource.BLOCK_SIZE - 2048, -1,
-                dataSpec.key, dataSpec.flags);
-
-        subject.open(dataSpec);
-        int bytesRead = subject.read(readBuffer, 0, 4096);
-
-        assertThat(bytesRead).isEqualTo(4096);
-        byte[] expectedBytes = new byte[4096];
-        System.arraycopy(data, HttpDiskCompositeDataSource.BLOCK_SIZE - 2048, expectedBytes, 0,
-                1024);
-        System.arraycopy(bytesFromNetwork, 0, expectedBytes, 1024, 3072);
-        assertThat(readBuffer).isEqualTo(expectedBytes);
-        DataSpec modifiedDataSpec = new DataSpec(dataSpec.uri,
-                2 * HttpDiskCompositeDataSource.BLOCK_SIZE - 1024, -1, null);
-        verify(mockHttpDataSource).open(refEq(modifiedDataSpec));
-        verify(mockHttpDataSource).read(any(byte[].class), eq(1024), eq(3072));
-        // Also verify that the 2nd block was written to disk correctly.
-        byte[] expectedBlock = new byte[HttpDiskCompositeDataSource.BLOCK_SIZE];
-        System.arraycopy(data, 0, expectedBlock, 0, HttpDiskCompositeDataSource.BLOCK_SIZE - 1024);
-        System.arraycopy(bytesFromNetwork, 0, expectedBlock,
-                HttpDiskCompositeDataSource.BLOCK_SIZE - 1024, 1024);
-        assertThat(CacheService.getFromDiskCache("1" + uri.toString())).isEqualTo(
-                expectedBlock);
-    }
-
-    @Test
-    public void close_withoutFirstCallingOpen_shouldNotWriteToDisk() throws Exception {
-        subject.close();
-
-        assertThat(CacheService.containsKeyDiskCache("0" + uri.toString())).isFalse();
-        assertThat(CacheService.containsKeyDiskCache(
-                HttpDiskCompositeDataSource.EXPECTED_FILE_SIZE_KEY_PREFIX + uri.toString())).isFalse();
-        assertThat(CacheService.containsKeyDiskCache(
-                HttpDiskCompositeDataSource.INTERVALS_KEY_PREFIX + uri.toString())).isFalse();
-    }
-
-    @Test
-    public void close_withCurrentActiveBlock_shouldWriteToDisk() throws Exception {
-        // Verifying that close() actually writes the current data to disk
-        final byte[] bytesFromNetwork = generateRandomByteArray(1000, 0);
-        when(mockHttpDataSource.open(any(DataSpec.class))).thenReturn(5000L);
-        setUpMockHttpDataSourceToReturnBytesFromNetwork(bytesFromNetwork, mockHttpDataSource);
-        byte[] readBuffer = new byte[1000];
-
-        subject.open(dataSpec);
-        subject.read(readBuffer, 0, 1000);
-        subject.close();
-
-        assertThat(readBuffer).isEqualTo(bytesFromNetwork);
-        byte[] expectedBlock = new byte[HttpDiskCompositeDataSource.BLOCK_SIZE];
-        System.arraycopy(bytesFromNetwork, 0, expectedBlock, 0, 1000);
-        assertThat(CacheService.getFromDiskCache("0" + uri.toString())).isEqualTo(expectedBlock);
-        assertThat(CacheService.getFromDiskCache(
-                HttpDiskCompositeDataSource.EXPECTED_FILE_SIZE_KEY_PREFIX + uri.toString())).isEqualTo(
-                "5000".getBytes());
-        assertThat(CacheService.getFromDiskCache(
-                HttpDiskCompositeDataSource.INTERVALS_KEY_PREFIX + uri.toString())).isEqualTo(
-                "[\"{start : 0, length : 1000}\"]".getBytes());
-    }
-
-    @Test
-    public void addNewInterval_shouldAddNewIntervalToIntervals() {
-        IntInterval interval = new IntInterval(5, 42);
-        TreeSet<IntInterval> intervalList = new TreeSet<IntInterval>();
-
-        HttpDiskCompositeDataSource.addNewInterval(intervalList, 5, 42);
-
-        assertThat(intervalList).containsOnly(interval);
-    }
-
-    @Test
-    public void addNewInterval_withExistingInterval_shouldNotAddNewInterval() {
-        IntInterval interval1 = new IntInterval(5, 42);
-        IntInterval interval2 = new IntInterval(500, 200);
-        TreeSet<IntInterval> intervalList = new TreeSet<IntInterval>();
-        intervalList.add(interval1);
-        intervalList.add(interval2);
-
-        HttpDiskCompositeDataSource.addNewInterval(intervalList, 5, 42);
-
-        assertThat(intervalList).containsOnly(interval1, interval2);
-    }
-
-    @Test
-    public void addNewInterval_withExistingIntervalInParts_shouldNotAddNewInterval() {
-        // The union of these two intervals is 5 with a length of 45 (ie. from 5 to 50).
-        // An interval from 7 to 50 (start at 7, length 43) should not be added to the interval set.
-        IntInterval interval1 = new IntInterval(10, 40);
-        IntInterval interval2 = new IntInterval(5, 20);
-        TreeSet<IntInterval> intervalList = new TreeSet<IntInterval>();
-        intervalList.add(interval1);
-        intervalList.add(interval2);
-
-        HttpDiskCompositeDataSource.addNewInterval(intervalList, 7, 43);
-
-        assertThat(intervalList).containsOnly(interval1, interval2);
-    }
-
-    @Test
-    public void addNewInterval_withNonExistingIntervals_shouldAddNewInterval() {
-        // The existing intervals here are from 10 to 100 and 150 to 250. 7 to 50 is not part of
-        // that, even though the first interval already has part of that covered, 7 to 9 is not
-        // covered by anything, so this interval should be added.
-        IntInterval interval1 = new IntInterval(10, 90);
-        IntInterval interval2 = new IntInterval(150, 100);
-        TreeSet<IntInterval> intervalList = new TreeSet<IntInterval>();
-        intervalList.add(interval1);
-        intervalList.add(interval2);
-
-        HttpDiskCompositeDataSource.addNewInterval(intervalList, 7, 43);
-
-        assertThat(intervalList).containsExactly(new IntInterval(7, 43), interval1, interval2);
-    }
-
-    @Test
-    public void getFirstContiguousPointAfter_withNoIntervals_shouldReturnInput() {
-        TreeSet<IntInterval> intervalList = new TreeSet<IntInterval>();
-        int startPoint = 12345;
-
-        int firstContiguousPointAfterStartPoint = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(
-                startPoint, intervalList);
-
-        assertThat(firstContiguousPointAfterStartPoint).isEqualTo(startPoint);
-    }
-
-    @Test
-    @SuppressWarnings("unchecked")
-    public void getFirstContiguousPointAfter_withMultipleConnectedAndDisconnectedIntervals_shouldReturnFirstContiguousPointAfterStartPoint() {
-        IntInterval[] intervalArray = new IntInterval[8];
-
-        // Goes from 500 to 1250
-        intervalArray[0] = new IntInterval(500, 200);
-        intervalArray[1] = new IntInterval(700, 300);
-        intervalArray[2] = new IntInterval(1000, 250);
-
-        // Separate section that goes from 2000 to 3000
-        intervalArray[3] = new IntInterval(2000, 1000);
-
-        // Goes from 3500 to 4500 but with various sections that overlap
-        intervalArray[4] = new IntInterval(3500, 750);
-        intervalArray[5] = new IntInterval(4000, 100);
-        intervalArray[6] = new IntInterval(4050, 200);
-        intervalArray[7] = new IntInterval(3999, 501);
-
-        TreeSet<IntInterval> intervalList = new TreeSet(Arrays.asList(intervalArray));
-
-        // Before the first section
-        int result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(499, intervalList);
-        assertThat(result).isEqualTo(499);
-
-        // At the start of the first section
-        result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(500, intervalList);
-        assertThat(result).isEqualTo(1250);
-
-        // In the first section
-        result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(567, intervalList);
-        assertThat(result).isEqualTo(1250);
-
-        // Between the first section and the second section
-        result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(1337, intervalList);
-        assertThat(result).isEqualTo(1337);
-
-        // In the second section
-        result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(2222, intervalList);
-        assertThat(result).isEqualTo(3000);
-
-        // Between the second section and the third section
-        result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(3232, intervalList);
-        assertThat(result).isEqualTo(3232);
-
-        // At the start of the third section
-        result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(3500, intervalList);
-        assertThat(result).isEqualTo(4500);
-
-        // In the third section
-        result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(3789, intervalList);
-        assertThat(result).isEqualTo(4500);
-
-        // After the third section
-        result = HttpDiskCompositeDataSource.getFirstContiguousPointAfter(4501, intervalList);
-        assertThat(result).isEqualTo(4501);
-    }
-
-    /**
-     * Creates a byte array and fills it with random data. Use the seed offset to generate
-     * subsequent random byte arrays that are not the same random byte array.
-     *
-     * @param length     How many bytes in the byte array
-     * @param seedOffset Offsets the seed so that different, random byte arrays can be created
-     * @return byte array of specified length filled with random bytes\
-     */
-    private byte[] generateRandomByteArray(int length, int seedOffset) {
-        byte[] byteArray = new byte[length];
-        new Random(BASE_SEED + seedOffset).nextBytes(byteArray);
-        return byteArray;
-    }
-
-    /**
-     * Sets up the mock http data source to return the specified bytes when queried.
-     *
-     * @param bytesFromNetwork   The bytes to write to the buffer.
-     * @param mockHttpDataSource The mock object that does this.
-     * @throws HttpDataSource.HttpDataSourceException This should never happen since this is a
-     *                                                mock.
-     */
-    private static void setUpMockHttpDataSourceToReturnBytesFromNetwork(
-            final byte[] bytesFromNetwork,
-            final HttpDataSource mockHttpDataSource) throws HttpDataSource.HttpDataSourceException {
-        when(mockHttpDataSource.read(any(byte[].class), anyInt(), anyInt())).thenAnswer(
-                new Answer<Long>() {
-                    @Override
-                    public Long answer(final InvocationOnMock invocation) throws Throwable {
-                        final Object[] args = invocation.getArguments();
-                        final byte[] byteBuffer = (byte[]) args[0];
-                        final Integer offset = (Integer) args[1];
-                        final Integer length = (Integer) args[2];
-                        System.arraycopy(bytesFromNetwork, 0, byteBuffer, offset, length);
-                        return (long) length;
-                    }
-                });
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCacheTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCacheTest.java
new file mode 100644
index 00000000..2a628a3a
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCacheTest.java
@@ -0,0 +1,53 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.nativeads;
+
+import android.content.Context;
+
+import com.google.android.exoplayer2.upstream.cache.Cache;
+import com.google.android.exoplayer2.upstream.cache.SimpleCache;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.io.File;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+public class MoPubCacheTest {
+    private static final String BASE_CACHE_DIR = "/some_cache_dir";
+
+    private Context mockContext;
+
+    @Before
+    public void setUp() {
+        mockContext = mock(Context.class);
+        when(mockContext.getApplicationContext()).thenReturn(mockContext);
+    }
+
+    @Test
+    public void getCacheInstance_whenCacheDirIsNull_shouldReturnNull() {
+        when(mockContext.getCacheDir()).thenReturn(null);
+
+        Cache cache = MoPubCache.getCacheInstance(mockContext);
+        assertThat(cache).isNull();
+    }
+
+    @Test
+    public void getCacheInstance_whenCacheDirIsNonNull_shouldReturnSimpleCacheInstance() {
+        when(mockContext.getCacheDir()).thenReturn(new File(BASE_CACHE_DIR));
+
+        Cache cache = MoPubCache.getCacheInstance(mockContext);
+        assertThat(cache).isInstanceOf(SimpleCache.class);
+    }
+
+    @After
+    public void tearDown() {
+        MoPubCache.resetInstance();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/network/AdLoaderTest.java b/mopub-sdk/src/test/java/com/mopub/network/AdLoaderTest.java
index 20f293a1..a618c13c 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/AdLoaderTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/AdLoaderTest.java
@@ -24,6 +24,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
+import org.robolectric.shadows.ShadowLooper;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
@@ -33,8 +34,11 @@
 
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 
@@ -75,6 +79,7 @@ public void setup() {
 
     @After
     public void teardown() {
+        RequestRateTrackerTest.clearRequestRateTracker();
     }
 
     @Test
@@ -127,7 +132,47 @@ public void loadNextAd_whenRunning_returnsOldRequest() throws NoSuchFieldExcepti
     }
 
     @Test
-    public void loadNextAd_whenFailed_callsHandler_OnErrorresponse() throws NoSuchFieldException, IllegalAccessException {
+    public void loadNextAd_firstCall_whenBlockedByRequestRateLimit_makesNoReqeust_returnsNull() {
+        RequestRateTrackerTest.prepareRequestRateTracker(adUnitId, 100, "reason");
+
+        Request<?> request = subject.loadNextAd(null);
+
+        assertNull(request);
+        verify(mockListener).onErrorResponse(any(VolleyError.class));
+        RequestQueue requestQueue = Networking.getRequestQueue();
+        verify(requestQueue, never()).add(any(Request.class));
+    }
+
+    @Test
+    public void twoAdResponseWaterfall_whenBlockedAfterFirstRequest_shouldNotBlockSecondRequest()
+            throws JSONException, MoPubNetworkError, NoSuchFieldException, IllegalAccessException {
+        JSONObject adResponseJson1 = createAdResponseJson("trackingUrl1", "content_1");
+        JSONObject adResponseJson2 = createAdResponseJson("trackingUrl2", "content_2");
+        byte[] body = createResponseBody(null, new JSONObject[]{adResponseJson1, adResponseJson2});
+        NetworkResponse testResponse = new NetworkResponse(200, body, headers, false);
+        MultiAdResponse multiAdResponse = new MultiAdResponse(activity, testResponse, AdFormat.BANNER, adUnitId);
+
+        // set subject MultiAdResponse
+        Field field = getPrivateField("mMultiAdResponse");
+        field.set(subject, multiAdResponse);
+
+        // validation
+        assertThat(subject.hasMoreAds()).isTrue();
+        subject.loadNextAd(null);
+        verify(mockListener, times(1)).onSuccess(any(AdResponse.class));
+        assertThat(subject.hasMoreAds()).isTrue();
+
+        RequestRateTrackerTest.prepareRequestRateTracker(adUnitId, 100, "reason");
+        Request<?> request = subject.loadNextAd(UNSPECIFIED);
+
+        assertNotNull(request);
+        verify(mockListener, times(2)).onSuccess(any(AdResponse.class));
+        verify(mockListener, never()).onErrorResponse(any(VolleyError.class));
+        assertThat(subject.hasMoreAds()).isFalse();
+    }
+
+    @Test
+    public void loadNextAd_whenFailed_callsHandler_OnErrorResponse() throws NoSuchFieldException, IllegalAccessException {
         // set AdLoader.failed=true;
         Field field = getPrivateField("mFailed");
         field.setBoolean(subject, true);
diff --git a/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestUtilsTest.java
index da266df6..a6f3b179 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestUtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestUtilsTest.java
@@ -123,6 +123,14 @@ public void convertQueryToMap_withNoQueryParams_shouldReturnEmptyMap() {
         assertThat(result).isEmpty();
     }
 
+    @Test
+    public void convertQueryToMap_withBadUriString_shouldReturnEmptyMap() {
+        final Map<String, String> result = MoPubRequestUtils.convertQueryToMap(context,
+                "https://*#&(%*$&");
+
+        assertThat(result).isEmpty();
+    }
+
     @Test
     public void generateBodyFromParams_withParamsMap_withMoPubUrl_shouldGenerateJsonString() {
         final String result = MoPubRequestUtils.generateBodyFromParams(params,
diff --git a/mopub-sdk/src/test/java/com/mopub/network/MultiAdResponseTest.java b/mopub-sdk/src/test/java/com/mopub/network/MultiAdResponseTest.java
index de30defc..8270b4db 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/MultiAdResponseTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/MultiAdResponseTest.java
@@ -59,6 +59,7 @@
 import com.mopub.common.Constants;
 import com.mopub.common.DataKeys;
 import com.mopub.common.MoPub;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.ResponseHeader;
 import com.mopub.mobileads.HtmlBanner;
@@ -87,6 +88,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
@@ -156,6 +158,7 @@ public void setup() throws JSONException {
 
     @After
     public void teardown() {
+        RequestRateTrackerTest.clearRequestRateTracker();
         Locale.setDefault(Locale.US);
     }
 
@@ -301,6 +304,70 @@ public void constructor_withResponseWarmup_shouldThrowException() throws JSONExc
         assert false;
     }
 
+    @Test
+    public void constructor_withResponseWarmup_withRateLimitSet_shouldSetBackoffTime() throws JSONException {
+        JSONObject jsonClear = createWarmupAdResponse();
+        JSONObject body = createJsonBody(FAIL_URL, jsonClear);
+        addBackoffParameters(body, 50, "reason");
+        NetworkResponse testResponse = new NetworkResponse(body.toString().getBytes());
+
+        try {
+            new MultiAdResponse(activity, testResponse, AdFormat.BANNER, adUnitId);
+        } catch (Exception ignored) {
+        }
+
+        RequestRateTracker.TimeRecord record = RequestRateTracker.getInstance().getRecordForAdUnit(adUnitId);
+        assertNotNull(record);
+        assertEquals(50, record.mBlockIntervalMs);
+        assertEquals("reason", record.mReason);
+    }
+
+    @Test
+    public void constructor_withResponseClear_withRateLimitSet_shouldSetBackoffTime() throws JSONException {
+        JSONObject jsonClear = createClearAdResponse();
+        JSONObject body = createJsonBody(FAIL_URL, jsonClear);
+        addBackoffParameters(body, 50, "reason");
+        NetworkResponse testResponse = new NetworkResponse(body.toString().getBytes());
+
+        try {
+            new MultiAdResponse(activity, testResponse, AdFormat.BANNER, adUnitId);
+        } catch (Exception ignored) {
+        }
+
+        RequestRateTracker.TimeRecord record = RequestRateTracker.getInstance().getRecordForAdUnit(adUnitId);
+        assertNotNull(record);
+        assertEquals(50, record.mBlockIntervalMs);
+        assertEquals("reason", record.mReason);
+    }
+
+    @Test
+    public void constructor_withRateLimitSetValue_shouldSetBackoffTimeLimit() throws Exception {
+        JSONObject jsonObject = createJsonBody(FAIL_URL, singleAdResponse);
+        addBackoffParameters(jsonObject, 20, "reason");
+        NetworkResponse testResponse = new NetworkResponse(jsonObject.toString().getBytes());
+
+        new MultiAdResponse(activity, testResponse, AdFormat.BANNER, adUnitId);
+
+        RequestRateTracker.TimeRecord record = RequestRateTracker.getInstance().getRecordForAdUnit(adUnitId);
+        assertNotNull(record);
+        assertThat(record.mBlockIntervalMs).isEqualTo(20);
+        assertEquals("reason", record.mReason);
+    }
+
+    @Test
+    public void constructor_withRateLimitSetZero_shouldResetBackoffTimeLimit() throws Exception {
+        RequestRateTrackerTest.prepareRequestRateTracker(adUnitId, 99, "some_reason");
+
+        JSONObject jsonObject = createJsonBody(FAIL_URL, singleAdResponse);
+        addBackoffParameters(jsonObject, 0, "reason");
+        NetworkResponse testResponse = new NetworkResponse(jsonObject.toString().getBytes());
+
+        MultiAdResponse subject = new MultiAdResponse(activity, testResponse, AdFormat.BANNER, adUnitId);
+
+        RequestRateTracker.TimeRecord record = RequestRateTracker.getInstance().getRecordForAdUnit(adUnitId);
+        assertNull(record);
+    }
+
     @Test
     public void constructor_withEmptyResponseArray_shouldThrowError_shouldUseDefaultTimeout() throws JSONException {
         byte[] body = createResponseBody(FAIL_URL, null);
@@ -405,6 +472,55 @@ public void constructor_withTwoAdResponses_withEmptyFailUrl_fullTest() throws Mo
         assertTrue(subject.isWaterfallFinished());
     }
 
+    @Test
+    public void constructor_withEnableDebugLoggingTrue_shouldSetDebugLogLevel() throws Exception {
+        // Set log level to none
+        MoPubLog.setLogLevel(MoPubLog.LogLevel.NONE);
+
+        JSONObject body = createJsonBody(FAIL_URL, singleAdResponse);
+        body.put(ResponseHeader.ENABLE_DEBUG_LOGGING.getKey(), 1); // true
+        NetworkResponse testResponse = new NetworkResponse(body.toString().getBytes());
+        MultiAdResponse subject = new MultiAdResponse(activity, testResponse, AdFormat.BANNER, adUnitId);
+
+        // Get log level and check that it is now MoPubLog.LogLevel.DEBUG
+        final MoPubLog.LogLevel afterLogLevel = MoPubLog.getLogLevel();
+        assertThat(afterLogLevel).isEqualTo(MoPubLog.LogLevel.DEBUG);
+    }
+
+    @Test
+    public void constructor_withEnableDebugLoggingFalse_shouldNotChangeLogLevel() throws Exception {
+        // Set log level to none and get value from MoPubLog
+        MoPubLog.setLogLevel(MoPubLog.LogLevel.NONE);
+        final MoPubLog.LogLevel beforeLogLevel = MoPubLog.getLogLevel();
+
+        JSONObject body = createJsonBody(FAIL_URL, singleAdResponse);
+        body.put(ResponseHeader.ENABLE_DEBUG_LOGGING.getKey(), 0); // false
+        NetworkResponse testResponse = new NetworkResponse(body.toString().getBytes());
+        MultiAdResponse subject = new MultiAdResponse(activity, testResponse, AdFormat.BANNER, adUnitId);
+
+        // Get log level
+        final MoPubLog.LogLevel afterLogLevel = MoPubLog.getLogLevel();
+        assertThat(afterLogLevel).isEqualTo(beforeLogLevel);
+    }
+
+    @Test
+    public void constructor_withoutEnableDebugLogging_shouldNotChangeLogLevel() throws Exception {
+        // Set log level to none and get value from MoPubLog
+        MoPubLog.setLogLevel(MoPubLog.LogLevel.NONE);
+        final MoPubLog.LogLevel beforeLogLevel = MoPubLog.getLogLevel();
+
+        JSONObject body = createJsonBody(FAIL_URL, singleAdResponse);
+        NetworkResponse testResponse = new NetworkResponse(body.toString().getBytes());
+        MultiAdResponse subject = new MultiAdResponse(activity, testResponse, AdFormat.BANNER, adUnitId);
+
+        // The response shouldn't have the key in the headers
+        assertFalse(body.has(ResponseHeader.ENABLE_DEBUG_LOGGING.getKey()));
+
+        // Get log level
+        final MoPubLog.LogLevel afterLogLevel = MoPubLog.getLogLevel();
+        assertThat(afterLogLevel).isEqualTo(beforeLogLevel);
+    }
+
     @Test
     public void parseNetworkResponse_forBanner_withoutImpTrackingHeaders_shouldSucceed() throws MoPubNetworkError, JSONException {
         NetworkResponse networkResponse = new NetworkResponse(singleAdResponse.toString().getBytes());
@@ -993,4 +1109,8 @@ private static JSONObject createWarmupAdResponse() throws JSONException {
         return jsonObject;
     }
 
+    private static void addBackoffParameters(final JSONObject response, int time, String reason) throws JSONException {
+        response.put(ResponseHeader.BACKOFF_MS.getKey(), time);
+        response.put(ResponseHeader.BACKOFF_REASON.getKey(), reason);
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java b/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java
index 4ed1ac6c..0226ace1 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java
@@ -17,12 +17,14 @@
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
 public class NetworkingTest {
     private Activity context;
-    static volatile String sUserAgent;
 
     @Before
     public void setUp() {
@@ -32,7 +34,6 @@ public void setUp() {
     @After
     public void tearDown() {
         Networking.clearForTesting();
-        sUserAgent = null;
     }
 
     @Test
@@ -61,6 +62,27 @@ public void getUserAgent_withSdkVersionGreaterThan16_shouldIncludeAndroid() {
         assertThat(userAgent).containsIgnoringCase("android");
     }
 
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
+    @Config(sdk = Build.VERSION_CODES.JELLY_BEAN_MR1)
+    @Test
+    public void getUserAgent_withSdkVersionGreaterThan16_whenOnABackgroundThread_shouldReturnHttpAgent() throws InterruptedException {
+        final String[] userAgent = new String[1];
+        final CountDownLatch latch = new CountDownLatch(1);
+        new Thread() {
+            @Override
+            public void run() {
+                userAgent[0] = Networking.getUserAgent(context);
+
+                latch.countDown();
+            }
+        }.start();
+
+        latch.await(500, TimeUnit.MILLISECONDS);
+        // Robolectric's default http agent is null which gets rewritten to an empty String.
+        assertThat(userAgent[0]).isEqualTo("");
+
+    }
+
     @Test
     public void getCachedUserAgent_usesCachedUserAgent() {
         Networking.setUserAgentForTesting("some cached user agent");
diff --git a/mopub-sdk/src/test/java/com/mopub/network/RequestRateTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/network/RequestRateTrackerTest.java
new file mode 100644
index 00000000..282dcc8d
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/network/RequestRateTrackerTest.java
@@ -0,0 +1,216 @@
+// Copyright 2018-2019 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.network;
+
+import android.os.SystemClock;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.network.RequestRateTracker.TimeRecord;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+
+import java.util.concurrent.TimeUnit;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+
+@RunWith(SdkTestRunner.class)
+public class RequestRateTrackerTest {
+    private static final long DELTA = 100;
+    private static final int BACKOFF_TIME = 88;
+    private static final String AD_UNIT_1 = "ad_unit_1";
+    private static final String AD_UNIT_2 = "ad_unit_2";
+    private static final String REASON = "backoff_reason";
+    private static final String REASON2 = "reason2";
+    private static final String NO_BACKOFF = "no_backoff";
+
+    private RequestRateTracker subject;
+
+    @Before
+    public void setup() {
+        subject = RequestRateTracker.getInstance();
+    }
+
+    @After
+    public void tearDown() {
+        clearRequestRateTracker();
+    }
+
+    @Test
+    public void registerRateLimit_withValidData_shouldSetRateLimitForAdUnit() {
+        long currentTime = SystemClock.uptimeMillis();
+
+        subject.registerRateLimit(AD_UNIT_1, BACKOFF_TIME, REASON);
+
+        TimeRecord record = subject.getRecordForAdUnit(AD_UNIT_1);
+        assertNotNull(record);
+        assertThat(record.mBlockIntervalMs).isEqualTo(BACKOFF_TIME);
+        assertThat(record.mReason).isEqualTo(REASON);
+        assertThat(record.mBlockStartTime - currentTime).isLessThan(DELTA);
+    }
+
+    @Test
+    public void registerRateLimit_withEmptyAdUnit_shouldDoNothing() {
+        long currentTime = SystemClock.uptimeMillis();
+
+        subject.registerRateLimit(AD_UNIT_1, BACKOFF_TIME, REASON);
+        subject.registerRateLimit("", BACKOFF_TIME, REASON);
+
+        assertNull(subject.getRecordForAdUnit(""));
+
+        TimeRecord record = subject.getRecordForAdUnit(AD_UNIT_1);
+        assertNotNull(record);
+        assertThat(record.mBlockIntervalMs).isEqualTo(BACKOFF_TIME);
+        assertThat(record.mReason).isEqualTo(REASON);
+        assertThat(record.mBlockStartTime - currentTime).isLessThan(DELTA);
+    }
+
+    @Test
+    public void registerRateLimit_withNegativeBackoffTime_shouldResetAdUnit() {
+        long currentTime = SystemClock.uptimeMillis();
+
+        subject.registerRateLimit(AD_UNIT_1, BACKOFF_TIME, REASON);
+
+        TimeRecord record = subject.getRecordForAdUnit(AD_UNIT_1);
+        assertNotNull(record);
+        assertThat(record.mBlockIntervalMs).isEqualTo(BACKOFF_TIME);
+        assertThat(record.mReason).isEqualTo(REASON);
+        assertThat(record.mBlockStartTime - currentTime).isLessThan(DELTA);
+
+        subject.registerRateLimit(AD_UNIT_1, -1, REASON2);
+        assertNull(subject.getRecordForAdUnit(AD_UNIT_1));
+    }
+
+    @Test
+    public void registerRateLimit_withTwoAdUnits_shouldStoreBoth() {
+        long currentTime = SystemClock.uptimeMillis();
+
+        subject.registerRateLimit(AD_UNIT_1, BACKOFF_TIME, REASON);
+        subject.registerRateLimit(AD_UNIT_2, 66, REASON2);
+
+        TimeRecord record1 = subject.getRecordForAdUnit(AD_UNIT_1);
+        assertNotNull(record1);
+        assertThat(record1.mBlockIntervalMs).isEqualTo(BACKOFF_TIME);
+        assertThat(record1.mReason).isEqualTo(REASON);
+        assertThat(record1.mBlockStartTime - currentTime).isLessThan(DELTA);
+
+        TimeRecord record2 = subject.getRecordForAdUnit(AD_UNIT_2);
+        assertNotNull(record2);
+        assertThat(record2.mBlockIntervalMs).isEqualTo(66);
+        assertThat(record2.mReason).isEqualTo(REASON2);
+        assertThat(record2.mBlockStartTime - currentTime).isLessThan(DELTA);
+    }
+
+    @Test
+    public void registerRateLimit_withTwoAdUnits_deleteSecondAdUnit_shouldNotDeleteFirst() {
+        long currentTime = SystemClock.uptimeMillis();
+
+        subject.registerRateLimit(AD_UNIT_1, BACKOFF_TIME, REASON);
+        subject.registerRateLimit(AD_UNIT_2, 66, REASON2);
+
+        TimeRecord record1 = subject.getRecordForAdUnit(AD_UNIT_1);
+        assertNotNull(record1);
+        assertThat(record1.mBlockIntervalMs).isEqualTo(BACKOFF_TIME);
+        assertThat(record1.mReason).isEqualTo(REASON);
+        assertThat(record1.mBlockStartTime - currentTime).isLessThan(DELTA);
+
+        TimeRecord record2 = subject.getRecordForAdUnit(AD_UNIT_2);
+        assertNotNull(record2);
+        assertThat(record2.mBlockIntervalMs).isEqualTo(66);
+        assertThat(record2.mReason).isEqualTo(REASON2);
+        assertThat(record2.mBlockStartTime - currentTime).isLessThan(DELTA);
+
+        subject.registerRateLimit(AD_UNIT_2, 0, "");
+
+        assertNull(subject.getRecordForAdUnit(AD_UNIT_2));
+        assertThat(subject.getRecordForAdUnit(AD_UNIT_1)).isEqualTo(record1);
+    }
+
+    @Test
+    public void getRecordForAdUnit_withNullAdUnitId_shouldReturnNull() {
+        subject.registerRateLimit(AD_UNIT_1, BACKOFF_TIME, REASON);
+
+        assertNull(subject.getRecordForAdUnit(null));
+    }
+
+    @Test
+    public void getRecordForAdUnit_withEmptyStringAdUnitId_shouldReturnNull() {
+        subject.registerRateLimit(AD_UNIT_1, BACKOFF_TIME, REASON);
+
+        assertNull(subject.getRecordForAdUnit(""));
+    }
+
+    @Test
+    public void isBlockedByRateLimit_afterRateLimitSetToZero_shouldReturnFalse() {
+        assertThat(subject.isBlockedByRateLimit(AD_UNIT_1)).isFalse();
+
+        subject.registerRateLimit(AD_UNIT_1, 0, NO_BACKOFF);
+
+        assertThat(subject.isBlockedByRateLimit(AD_UNIT_1)).isFalse();
+    }
+
+    @Test
+    public void isBlockedByRateLimit_afterRateLimitSet_shouldReturnTrue() {
+        assertThat(subject.isBlockedByRateLimit(AD_UNIT_1)).isFalse();
+
+        subject.registerRateLimit(AD_UNIT_1, BACKOFF_TIME, REASON);
+
+        assertThat(subject.isBlockedByRateLimit(AD_UNIT_1)).isTrue();
+    }
+
+    @Test
+    public void isBlockedByRateLimit_afterFailedResponse_afterSuccessResponse_shouldReturnTrue() {
+        assertThat(subject.isBlockedByRateLimit(AD_UNIT_1)).isFalse();
+
+        subject.registerRateLimit(AD_UNIT_1, BACKOFF_TIME, REASON);
+        subject.registerRateLimit(AD_UNIT_1, 0, NO_BACKOFF);
+
+        assertThat(subject.isBlockedByRateLimit(AD_UNIT_1)).isFalse();
+    }
+
+    @Test
+    public void isBlockedByRateLimit_withTwoAdUnits_adUnitsDoNotInterfere() {
+        assertThat(subject.isBlockedByRateLimit(AD_UNIT_1)).isFalse();
+        assertThat(subject.isBlockedByRateLimit(AD_UNIT_2)).isFalse();
+
+        subject.registerRateLimit(AD_UNIT_1, BACKOFF_TIME, REASON);
+        assertThat(subject.isBlockedByRateLimit(AD_UNIT_1)).isTrue();
+        assertThat(subject.isBlockedByRateLimit(AD_UNIT_2)).isFalse();
+
+        subject.registerRateLimit(AD_UNIT_2, 0, NO_BACKOFF);
+        assertThat(subject.isBlockedByRateLimit(AD_UNIT_1)).isTrue();
+        assertThat(subject.isBlockedByRateLimit(AD_UNIT_2)).isFalse();
+
+        subject.registerRateLimit(AD_UNIT_1, 0, NO_BACKOFF);
+        subject.registerRateLimit(AD_UNIT_2, BACKOFF_TIME, REASON);
+        assertThat(subject.isBlockedByRateLimit(AD_UNIT_1)).isFalse();
+        assertThat(subject.isBlockedByRateLimit(AD_UNIT_2)).isTrue();
+    }
+
+    @Test
+    public void isBlockedByRateLimit_afterFailedResponse_afterTimeoutExpires_returnsTrue() {
+        subject.registerRateLimit(AD_UNIT_1, BACKOFF_TIME, REASON);
+
+        assertThat(subject.isBlockedByRateLimit(AD_UNIT_1)).isTrue();
+        Robolectric.getForegroundThreadScheduler().advanceBy(BACKOFF_TIME * 2, TimeUnit.MILLISECONDS);
+        assertThat(subject.isBlockedByRateLimit(AD_UNIT_1)).isFalse();
+    }
+
+    /**
+     * Utility functions
+     */
+    public static void prepareRequestRateTracker(String adUnitId, Integer backoffMs, String backoffReason) {
+        RequestRateTracker.getInstance().registerRateLimit(adUnitId, backoffMs, backoffReason);
+    }
+
+    public static void clearRequestRateTracker() {
+        RequestRateTracker.setInstance(new RequestRateTracker());
+    }
+}
