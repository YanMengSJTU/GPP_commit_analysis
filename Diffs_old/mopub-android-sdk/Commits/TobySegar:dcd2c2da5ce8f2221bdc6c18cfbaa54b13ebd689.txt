diff --git a/CHANGELOG.md b/CHANGELOG.md
index 20e1b5a8..63873ff7 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,15 @@
+## Version 4.18.0 (November 1, 2017)
+- Updated the SDK compile version to 26. Android API 26 artifacts live in the new Google maven repository `maven { url 'https://maven.google.com' }`. See [this article](https://developer.android.com/about/versions/oreo/android-8.0-migration.html) for more information about using Android API 26.
+- Fixed MoPub in-app browser's back and forward button icons.
+- Updated AdMob adapters to 11.4.0.
+- Updated Chartboost adapters to 7.0.1.
+- Updated Facebook Audience Network adapters to 4.26.0.
+- Updated Millennial to 6.6.1.
+- Updated TapJoy adapters to 11.11.0.
+- Updated Unity Ads adapters to 2.1.1.
+- Updated Vungle adapters to 5.3.0.
+- Bug fixes.
+
 ## Version 4.17.0 (September 27, 2017)
 - Rewarded Ads can now send up optional custom data through the server completion url. See `MoPubRewardedVideos#showRewardedVideo(String, String)`.
 - Updated Facebook native adapter to ignore clicks on whitespace as per Facebook policy.
diff --git a/README.md b/README.md
index 97b656d5..c98dd9bc 100644
--- a/README.md
+++ b/README.md
@@ -35,10 +35,11 @@ The MoPub SDK is available via:
     repositories {
         jcenter() // includes the MoPub SDK and AVID library
         maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
+        maven { url 'https://maven.google.com' } // necessary for Android API 26
     }
 
     dependencies {
-        compile('com.mopub:mopub-sdk:4.17.0@aar') {
+        compile('com.mopub:mopub-sdk:4.18.0@aar') {
             transitive = true
         }
     }
@@ -53,33 +54,34 @@ The MoPub SDK is available via:
         // ... other project repositories
         jcenter() // includes the MoPub SDK and AVID library
         maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
+        maven { url 'https://maven.google.com' } // necessary for Android API 26
     }
 
     dependencies {
         // ... other project dependencies
 
         // For banners
-        compile('com.mopub:mopub-sdk-banner:4.17.0@aar') {
+        compile('com.mopub:mopub-sdk-banner:4.18.0@aar') {
             transitive = true
         }
         
         // For interstitials
-        compile('com.mopub:mopub-sdk-interstitial:4.17.0@aar') {
+        compile('com.mopub:mopub-sdk-interstitial:4.18.0@aar') {
             transitive = true
         }
 
         // For rewarded videos. This will automatically also include interstitials
-        compile('com.mopub:mopub-sdk-rewardedvideo:4.17.0@aar') {
+        compile('com.mopub:mopub-sdk-rewardedvideo:4.18.0@aar') {
             transitive = true
         }
 
         // For native static (images).
-        compile('com.mopub:mopub-sdk-native-static:4.17.0@aar') {
+        compile('com.mopub:mopub-sdk-native-static:4.18.0@aar') {
             transitive = true
         }
 
         // For native video. This will automatically also include native static
-        compile('com.mopub:mopub-sdk-native-video:4.17.0@aar') {
+        compile('com.mopub:mopub-sdk-native-video:4.18.0@aar') {
             transitive = true
         }
     }
@@ -107,8 +109,15 @@ The MoPub SDK is available via:
 ## New in this Version
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for a complete list of additions, fixes, and enhancements in the latest release.
 
-- Rewarded Ads can now send up optional custom data through the server completion url. See `MoPubRewardedVideos#showRewardedVideo(String, String)`.
-- Updated Facebook native adapter to ignore clicks on whitespace as per Facebook policy.
+- Updated the SDK compile version to 26. Android API 26 artifacts live in the new Google maven repository `maven { url 'https://maven.google.com' }`. See [this article](https://developer.android.com/about/versions/oreo/android-8.0-migration.html) for more information about using Android API 26.
+- Fixed MoPub in-app browser's back and forward button icons.
+- Updated AdMob adapters to 11.4.0.
+- Updated Chartboost adapters to 7.0.1.
+- Updated Facebook Audience Network adapters to 4.26.0.
+- Updated Millennial to 6.6.1.
+- Updated TapJoy adapters to 11.11.0.
+- Updated Unity Ads adapters to 2.1.1.
+- Updated Vungle adapters to 5.3.0.
 
 ## Requirements
 
@@ -131,7 +140,7 @@ Normally, to add the MoPub SDK to your app via JCenter, your `build.gradle` woul
 
 ```	
 dependencies {
-    compile('com.mopub:mopub-sdk:4.17.0@aar') {
+    compile('com.mopub:mopub-sdk:4.18.0@aar') {
         transitive = true
     }
 }
@@ -140,7 +149,7 @@ Update to the following to exclude one or both viewability vendors:
 
 ```
 dependencies {
-    compile('com.mopub:mopub-sdk:4.17.0@aar') {
+    compile('com.mopub:mopub-sdk:4.18.0@aar') {
         transitive = true
         exclude module: 'libAvid-mopub' // To exclude AVID
         exclude module: 'moat-mobile-app-kit' // To exclude Moat
diff --git a/extras/src/com/mopub/mobileads/ChartboostInterstitial.java b/extras/src/com/mopub/mobileads/ChartboostInterstitial.java
index 82747718..0201a1aa 100644
--- a/extras/src/com/mopub/mobileads/ChartboostInterstitial.java
+++ b/extras/src/com/mopub/mobileads/ChartboostInterstitial.java
@@ -14,7 +14,7 @@
 /**
  * A custom event for showing Chartboost interstitial ads.
  *
- * Certified with Chartboost 6.6.3
+ * Certified with Chartboost 7.0.1
  */
 class ChartboostInterstitial extends CustomEventInterstitial {
 
diff --git a/extras/src/com/mopub/mobileads/ChartboostRewardedVideo.java b/extras/src/com/mopub/mobileads/ChartboostRewardedVideo.java
index b41dd113..bc994411 100644
--- a/extras/src/com/mopub/mobileads/ChartboostRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/ChartboostRewardedVideo.java
@@ -16,7 +16,7 @@
 /**
  * A custom event for showing Chartboost rewarded videos.
  *
- * Certified with Chartboost 6.6.3
+ * Certified with Chartboost 7.0.1
  */
 public class ChartboostRewardedVideo extends CustomEventRewardedVideo {
     @NonNull private static final LifecycleListener sLifecycleListener =
diff --git a/extras/src/com/mopub/mobileads/ChartboostShared.java b/extras/src/com/mopub/mobileads/ChartboostShared.java
index f9e958f6..d70fb7ed 100644
--- a/extras/src/com/mopub/mobileads/ChartboostShared.java
+++ b/extras/src/com/mopub/mobileads/ChartboostShared.java
@@ -27,7 +27,7 @@
 /**
  * Shared infrastructure for initializing the Chartboost SDK when mediated by MoPub
  *
- * Certified with Chartboost 6.6.3
+ * Certified with Chartboost 7.0.1
  */
 public class ChartboostShared {
     private static volatile ChartboostSingletonDelegate sDelegate = new ChartboostSingletonDelegate();
diff --git a/extras/src/com/mopub/mobileads/FacebookBanner.java b/extras/src/com/mopub/mobileads/FacebookBanner.java
index 4d60a635..8a58401e 100644
--- a/extras/src/com/mopub/mobileads/FacebookBanner.java
+++ b/extras/src/com/mopub/mobileads/FacebookBanner.java
@@ -16,8 +16,7 @@
 import java.util.Map;
 
 /**
- * Please reference the Supported Mediation Partner page at http://bit.ly/2mqsuFH for the
- * latest version and ad format certifications.
+ * Certified with Facebook Audience Network 4.26.0
  */
 public class FacebookBanner extends CustomEventBanner implements AdListener {
     public static final String PLACEMENT_ID_KEY = "placement_id";
diff --git a/extras/src/com/mopub/mobileads/FacebookInterstitial.java b/extras/src/com/mopub/mobileads/FacebookInterstitial.java
index 34fc4ad7..806dc492 100644
--- a/extras/src/com/mopub/mobileads/FacebookInterstitial.java
+++ b/extras/src/com/mopub/mobileads/FacebookInterstitial.java
@@ -11,8 +11,7 @@
 import java.util.Map;
 
 /**
- * Please reference the Supported Mediation Partner page at http://bit.ly/2mqsuFH for the
- * latest version and ad format certifications.
+ * Certified with Facebook Audience Network 4.26.0
  */
 public class FacebookInterstitial extends CustomEventInterstitial implements InterstitialAdListener {
     public static final String PLACEMENT_ID_KEY = "placement_id";
diff --git a/extras/src/com/mopub/mobileads/FacebookRewardedVideo.java b/extras/src/com/mopub/mobileads/FacebookRewardedVideo.java
index 196d3d8e..59444f8c 100644
--- a/extras/src/com/mopub/mobileads/FacebookRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/FacebookRewardedVideo.java
@@ -16,7 +16,7 @@
 import java.util.Map;
 
 /**
- * Certified with Facebook Audience Network 4.23.0
+ * Certified with Facebook Audience Network 4.26.0
  */
 public class FacebookRewardedVideo extends CustomEventRewardedVideo implements RewardedVideoAdListener {
 
diff --git a/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java b/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
index 2a52a6eb..46d18c56 100644
--- a/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
+++ b/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
@@ -17,7 +17,7 @@
 import static com.google.android.gms.ads.AdSize.MEDIUM_RECTANGLE;
 
 /*
- * Compatible with version 11.0.2 of the Google Play Services SDK.
+ * Compatible with version 11.4.0 of the Google Play Services SDK.
  */
 
 // Note: AdMob ads will now use this class as Google has deprecated the AdMob SDK.
diff --git a/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java b/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
index fb7c3b23..a91ab2fc 100644
--- a/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
+++ b/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
@@ -10,7 +10,7 @@
 import java.util.Map;
 
 /*
- * Compatible with version 11.0.2 of the Google Play Services SDK.
+ * Compatible with version 11.4.0 of the Google Play Services SDK.
  */
 
 // Note: AdMob ads will now use this class as Google has deprecated the AdMob SDK.
diff --git a/extras/src/com/mopub/mobileads/GooglePlayServicesRewardedVideo.java b/extras/src/com/mopub/mobileads/GooglePlayServicesRewardedVideo.java
index d401ea2f..e5629cba 100644
--- a/extras/src/com/mopub/mobileads/GooglePlayServicesRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/GooglePlayServicesRewardedVideo.java
@@ -21,7 +21,7 @@
 /**
  * A {@link CustomEventRewardedVideo} used to load rewarded video Google rewarded video ads.
  *
- * Compatible with version 11.0.2 of the Google Play Services SDK.
+ * Compatible with version 11.4.0 of the Google Play Services SDK.
  */
 public class GooglePlayServicesRewardedVideo extends CustomEventRewardedVideo implements
         RewardedVideoAdListener {
diff --git a/extras/src/com/mopub/mobileads/MillennialBanner.java b/extras/src/com/mopub/mobileads/MillennialBanner.java
index 4a4b0f1a..0a329984 100644
--- a/extras/src/com/mopub/mobileads/MillennialBanner.java
+++ b/extras/src/com/mopub/mobileads/MillennialBanner.java
@@ -1,240 +1,185 @@
 package com.mopub.mobileads;
 
-import android.app.Activity;
 import android.content.Context;
-import android.os.Build;
-import android.os.Handler;
-import android.os.Looper;
 import android.util.Log;
 import android.view.Gravity;
-import android.widget.LinearLayout;
-import android.widget.LinearLayout.LayoutParams;
+import android.widget.FrameLayout;
+import android.widget.FrameLayout.LayoutParams;
 
 import com.millennialmedia.AppInfo;
+import com.millennialmedia.CreativeInfo;
 import com.millennialmedia.InlineAd;
 import com.millennialmedia.InlineAd.AdSize;
 import com.millennialmedia.InlineAd.InlineAdMetadata;
 import com.millennialmedia.InlineAd.InlineErrorStatus;
 import com.millennialmedia.MMException;
+import com.millennialmedia.MMLog;
 import com.millennialmedia.MMSDK;
-import com.millennialmedia.internal.ActivityListenerManager;
+import com.mopub.common.MoPub;
 
 import java.util.Map;
 
+
 /**
- * Compatible with version 6.3 of the Millennial Media SDK.
+ * Compatible with version 6.6 of the Millennial Media SDK.
  */
 
-class MillennialBanner extends CustomEventBanner {
+final class MillennialBanner extends CustomEventBanner {
 
     private static final String TAG = MillennialBanner.class.getSimpleName();
-    public static final String DCN_KEY = "dcn";
-    public static final String APID_KEY = "adUnitID";
-    public static final String AD_WIDTH_KEY = "adWidth";
-    public static final String AD_HEIGHT_KEY = "adHeight";
 
-    private InlineAd mInlineAd;
-    private CustomEventBannerListener mBannerListener;
-    private LinearLayout mInternalView;
-    private static final Handler UI_THREAD_HANDLER = new Handler(Looper.getMainLooper());
+    private static final String DCN_KEY = "dcn";
+    private static final String APID_KEY = "adUnitID";
+    private static final String AD_WIDTH_KEY = "adWidth";
+    private static final String AD_HEIGHT_KEY = "adHeight";
+
+    private InlineAd inlineAd;
+    private CustomEventBannerListener bannerListener;
+    private FrameLayout internalView;
+
+    static {
+        Log.i(TAG, "Millennial Media Adapter Version: " + MillennialUtils.VERSION);
+    }
+
 
+    public CreativeInfo getCreativeInfo() {
 
+        if (inlineAd == null) {
+            return null;
+        }
+
+        return inlineAd.getCreativeInfo();
+    }
+
+    
     @Override
     protected void loadBanner(final Context context, final CustomEventBannerListener customEventBannerListener,
-            final Map<String, Object> localExtras, final Map<String, String> serverExtras) {
-
-        LayoutParams lp;
-        String apid;
-        String dcn;
-        int width;
-        int height;
-        mBannerListener = customEventBannerListener;
-
-        if (!initializeSDK(context)) {
-            Log.e(TAG, "Unable to initialize MMSDK");
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    mBannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
-                }
-            });
+                              final Map<String, Object> localExtras, final Map<String, String> serverExtras) {
+
+        bannerListener = customEventBannerListener;
+        if (!MillennialUtils.initSdk(context)) {
+            Log.e(TAG, "MM SDK must be initialized with an Activity or Application context.");
+            bannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
             return;
         }
 
-        if (extrasAreValid(serverExtras)) {
-            dcn = serverExtras.get(DCN_KEY);
-            apid = serverExtras.get(APID_KEY);
-            width = Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
-            height = Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
-        } else {
+        String apid = serverExtras.get(APID_KEY);
+        int width = Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
+        int height = Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
+
+        if (MillennialUtils.isEmpty(apid) || (width < 0) || (height < 0)) {
             Log.e(TAG, "We were given invalid extras! Make sure placement ID, width, and height are specified.");
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-                }
-            });
+            bannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
             return;
         }
 
         // Set DCN on the AppInfo if provided
-        try {
-            AppInfo ai = new AppInfo().setMediator("mopubsdk");
-            if (dcn != null && dcn.length() > 0) {
-                ai = ai.setSiteId(dcn);
-            } else {
-                ai = ai.setSiteId(null);
-            }
-            try {
-                MMSDK.setAppInfo(ai);
-            } catch (MMException e) {
-                Log.e(TAG, "MM SDK is not initialized", e);
-            }
-        } catch (IllegalStateException e) {
-            Log.i(TAG, "Caught exception " + e.getMessage());
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    mBannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
-                }
-            });
-            return;
+        String dcn = serverExtras.get(DCN_KEY);
+        AppInfo ai = new AppInfo().setMediator("mopubsdk");
+        if (!MillennialUtils.isEmpty(dcn)) {
+            ai.setSiteId(dcn);
         }
 
-        mInternalView = new LinearLayout(context);
+        try {
 
-        lp = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);
-        lp.gravity = Gravity.CENTER_HORIZONTAL;
-        mInternalView.setLayoutParams(lp);
+            MMSDK.setAppInfo(ai);
 
-        InlineAdMetadata mInlineAdMetadata = null;
+            internalView = new FrameLayout(context);
 
-        try {
-            mInlineAd = InlineAd.createInstance(apid, mInternalView);
-            mInlineAdMetadata = new InlineAdMetadata().setAdSize(new AdSize(width, height));
-        } catch (MMException e) {
-            e.printStackTrace();
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    mBannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
-                }
-            });
-            return;
-        }
+            LayoutParams lp = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);
+            lp.gravity = Gravity.CENTER_HORIZONTAL;
+            internalView.setLayoutParams(lp);
 
-        mInlineAd.setListener(new MillennialInlineListener());
+            inlineAd = InlineAd.createInstance(apid, internalView);
+            InlineAdMetadata mInlineAdMetadata = new InlineAdMetadata().setAdSize(new AdSize(width, height));
 
-        try {
-        /* If MoPub gets location, so do we. */
-            MMSDK.setLocationEnabled((localExtras.get("location") != null));
-        } catch (MMException e) {
-            Log.e(TAG, "MM SDK is not initialized", e);
-        }
+            inlineAd.setListener(new MillennialInlineListener());
+
+            MMSDK.setLocationEnabled(MoPub.getLocationAwareness() != MoPub.LocationAwareness.DISABLED);
+
+            AdViewController.setShouldHonorServerDimensions(internalView);
 
-        AdViewController.setShouldHonorServerDimensions(mInternalView);
+            inlineAd.request(mInlineAdMetadata);
 
-        mInlineAd.request(mInlineAdMetadata);
+        } catch (MMException e) {
+            Log.e(TAG, "MM SDK exception occurred obtaining an inline ad unit.", e);
+            bannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
+        }
     }
 
+
     @Override
     protected void onInvalidate() {
         // Destroy any hanging references.
-        if (mInlineAd != null) {
-            mInlineAd.setListener(null);
-            mInlineAd = null;
+        if (inlineAd != null) {
+            inlineAd.destroy();
+            inlineAd = null;
         }
     }
 
-    private boolean initializeSDK(Context context) {
-        try {
-            if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
-                if (!MMSDK.isInitialized()) {
-                    if (context instanceof Activity) {
-                        try {
-                            MMSDK.initialize(((Activity) context), ActivityListenerManager.LifecycleState.RESUMED);
-                        } catch (Exception e) {
-                            Log.e(TAG, "Error initializing MMSDK", e);
-                            return false;
-                        }
-                    } else {
-                        Log.e(TAG, "MMSDK.initialize must be explicitly called when instantiating the MoPub AdView or InterstitialAd without an Activity.");
-                        return false;
-                    }
-                }
-            } else {
-                Log.e(TAG, "MMSDK minimum supported API is 16");
-                return false;
-            }
-            return true;
-        } catch (Exception e) {
-            Log.e(TAG, "Error initializing MMSDK", e);
-            return false;
-        }
-    }
-
-    private boolean extrasAreValid(final Map<String, String> serverExtras) {
-        try {
-            // Add pos / non-null and APIDs.
-            int w = Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
-            int h = Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
-            if (h < 0 || w < 0) {
-                throw new NumberFormatException();
-            }
-        } catch (Exception e) {
-            Log.e(TAG, "Width and height must exist and contain positive integers!");
-            e.printStackTrace();
-            return false;
-        }
-
-        return serverExtras.containsKey(APID_KEY);
-    }
 
     class MillennialInlineListener implements InlineAd.InlineListener {
 
         @Override
         public void onAdLeftApplication(InlineAd inlineAd) {
-            // Intentionally not calling MoPub's onLeaveApplication to avoid double-count
+            // onLeaveApplication is an alias to on clicked. We are not required to call this.
+
+            // @formatter:off
+            // https://github.com/mopub/mopub-android-sdk/blob/940eee70fe1980b4869d61cb5d668ccbab75c0ee/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
+            // @formatter:on
             Log.d(TAG, "Millennial Inline Ad - Leaving application");
         }
 
+
         @Override
         public void onClicked(InlineAd inlineAd) {
+
             Log.d(TAG, "Millennial Inline Ad - Ad clicked");
-            UI_THREAD_HANDLER.post(new Runnable() {
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mBannerListener.onBannerClicked();
+
+                    bannerListener.onBannerClicked();
                 }
             });
         }
 
+
         @Override
         public void onCollapsed(InlineAd inlineAd) {
+
             Log.d(TAG, "Millennial Inline Ad - Banner collapsed");
-            UI_THREAD_HANDLER.post(new Runnable() {
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mBannerListener.onBannerCollapsed();
+
+                    bannerListener.onBannerCollapsed();
                 }
             });
 
         }
 
+
         @Override
         public void onExpanded(InlineAd inlineAd) {
+
             Log.d(TAG, "Millennial Inline Ad - Banner expanded");
-            UI_THREAD_HANDLER.post(new Runnable() {
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mBannerListener.onBannerExpanded();
+
+                    bannerListener.onBannerExpanded();
                 }
             });
         }
 
+
         @Override
         public void onRequestFailed(InlineAd inlineAd, InlineErrorStatus inlineErrorStatus) {
-            Log.d(TAG, "Millennial Inline Ad - Banner failed (" + inlineErrorStatus.getErrorCode() + "): " + inlineErrorStatus.getDescription());
+
+            Log.d(TAG, "Millennial Inline Ad - Banner failed (" + inlineErrorStatus.getErrorCode() + "): " +
+                    inlineErrorStatus.getDescription());
+
             MoPubErrorCode mopubErrorCode;
 
             switch (inlineErrorStatus.getErrorCode()) {
@@ -259,38 +204,51 @@ public void onRequestFailed(InlineAd inlineAd, InlineErrorStatus inlineErrorStat
             }
 
             final MoPubErrorCode fErrorCode = mopubErrorCode;
-            UI_THREAD_HANDLER.post(new Runnable() {
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mBannerListener.onBannerFailed(fErrorCode);
+
+                    bannerListener.onBannerFailed(fErrorCode);
                 }
             });
 
         }
 
+
         @Override
         public void onRequestSucceeded(InlineAd inlineAd) {
+
             Log.d(TAG, "Millennial Inline Ad - Banner request succeeded");
-            UI_THREAD_HANDLER.post(new Runnable() {
+
+            CreativeInfo creativeInfo = getCreativeInfo();
+
+            if ((creativeInfo != null) && MMLog.isDebugEnabled()) {
+                MMLog.d(TAG, "Banner Creative Info: " + creativeInfo);
+            }
+
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mBannerListener.onBannerLoaded(mInternalView);
+
+                    bannerListener.onBannerLoaded(internalView);
                 }
             });
         }
 
+
         @Override
         public void onResize(InlineAd inlineAd, int w, int h) {
+
             Log.d(TAG, "Millennial Inline Ad - Banner about to resize (width: " + w + ", height: " + h + ")");
         }
 
+
         @Override
         public void onResized(InlineAd inlineAd, int w, int h, boolean isClosed) {
-            Log.d(TAG, "Millennial Inline Ad - Banner resized (width: " + w + ", height: " + h + "). "
-                    + (isClosed ? "Returned to original placement." : "Got a fresh, new place."));
 
-        }
+            Log.d(TAG, "Millennial Inline Ad - Banner resized (width: " + w + ", height: " + h + "). " +
+                    (isClosed ? "Returned to original placement." : "Got a fresh, new place."));
 
+        }
     }
-
 }
diff --git a/extras/src/com/mopub/mobileads/MillennialInterstitial.java b/extras/src/com/mopub/mobileads/MillennialInterstitial.java
index 55eef347..cbb6c879 100644
--- a/extras/src/com/mopub/mobileads/MillennialInterstitial.java
+++ b/extras/src/com/mopub/mobileads/MillennialInterstitial.java
@@ -1,222 +1,188 @@
 package com.mopub.mobileads;
 
-import android.app.Activity;
 import android.content.Context;
-import android.os.Build;
-import android.os.Handler;
-import android.os.Looper;
 import android.util.Log;
 
 import com.millennialmedia.AppInfo;
+import com.millennialmedia.CreativeInfo;
 import com.millennialmedia.InterstitialAd;
 import com.millennialmedia.InterstitialAd.InterstitialErrorStatus;
 import com.millennialmedia.InterstitialAd.InterstitialListener;
 import com.millennialmedia.MMException;
+import com.millennialmedia.MMLog;
 import com.millennialmedia.MMSDK;
-import com.millennialmedia.internal.ActivityListenerManager;
+import com.mopub.common.MoPub;
 
 import java.util.Map;
 
+
 /**
- * Compatible with version 6.3 of the Millennial Media SDK.
+ * Compatible with version 6.6 of the Millennial Media SDK.
  */
 
-class MillennialInterstitial extends CustomEventInterstitial {
+final class MillennialInterstitial extends CustomEventInterstitial {
 
     private static final String TAG = MillennialInterstitial.class.getSimpleName();
-    public static final String DCN_KEY = "dcn";
-    public static final String APID_KEY = "adUnitID";
+    private static final String DCN_KEY = "dcn";
+    private static final String APID_KEY = "adUnitID";
+
+    private InterstitialAd millennialInterstitial;
+    private Context context;
+    private CustomEventInterstitialListener interstitialListener;
+
+    static {
+        Log.i(TAG, "Millennial Media Adapter Version: " + MillennialUtils.VERSION);
+    }
+
+
+    public CreativeInfo getCreativeInfo() {
+
+        if (millennialInterstitial == null) {
+            return null;
+        }
+
+        return millennialInterstitial.getCreativeInfo();
+    }
 
-    private InterstitialAd mMillennialInterstitial;
-    private Context mContext;
-    private CustomEventInterstitialListener mInterstitialListener;
-    private static final Handler UI_THREAD_HANDLER = new Handler(Looper.getMainLooper());
 
     @Override
-    protected void loadInterstitial(final Context context, final CustomEventInterstitialListener customEventInterstitialListener,
-            final Map<String, Object> localExtras, final Map<String, String> serverExtras) {
-        String dcn;
-        mInterstitialListener = customEventInterstitialListener;
-        mContext = context;
+    protected void loadInterstitial(final Context context,
+                                    final CustomEventInterstitialListener customEventInterstitialListener,
+                                    final Map<String, Object> localExtras,
+                                    final Map<String, String> serverExtras) {
 
-        final String apid;
+        interstitialListener = customEventInterstitialListener;
+        this.context = context;
 
-        if (!initializeSDK(context)) {
-            Log.e(TAG, "Unable to initialize MMSDK");
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    mInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
-                }
-            });
+        if (!MillennialUtils.initSdk(context)) {
+            Log.e(TAG, "MM SDK must be initialized with an Activity or Application context.");
+            interstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
             return;
         }
 
-        if (extrasAreValid(serverExtras)) {
-            dcn = serverExtras.get(DCN_KEY);
-            apid = serverExtras.get(APID_KEY);
-        } else {
+        String apid = serverExtras.get(APID_KEY);
+
+        if (MillennialUtils.isEmpty(apid)) {
             Log.e(TAG, "Invalid extras-- Be sure you have an placement ID specified.");
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-                }
-            });
+            interstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+
             return;
         }
 
         // Add DCN support
-        try {
-            AppInfo ai = new AppInfo().setMediator("mopubsdk");
-            if (dcn != null && dcn.length() > 0) {
-                ai = ai.setSiteId(dcn);
-            } else {
-                ai.setSiteId(null);
-            }
-            try {
-                MMSDK.setAppInfo(ai);
-            } catch (MMException e) {
-                Log.e(TAG, "MM SDK is not initialized", e);
-            }
-        } catch (IllegalStateException e) {
-            Log.i(TAG, "SDK not finished initializing-- " + e.getMessage());
-        }
+        String dcn = serverExtras.get(DCN_KEY);
 
-        try {
-        /* If MoPub gets location, so do we. */
-            MMSDK.setLocationEnabled((localExtras.get("location") != null));
-        } catch (MMException e) {
-            Log.e(TAG, "MM SDK is not initialized", e);
+        AppInfo ai = new AppInfo().setMediator("mopubsdk");
+        if (!MillennialUtils.isEmpty(dcn)) {
+            ai.setSiteId(dcn);
         }
 
         try {
-            mMillennialInterstitial = InterstitialAd.createInstance(apid);
+            MMSDK.setAppInfo(ai);
+            MMSDK.setLocationEnabled(MoPub.getLocationAwareness() != MoPub.LocationAwareness.DISABLED);
+            millennialInterstitial = InterstitialAd.createInstance(apid);
+            millennialInterstitial.setListener(new MillennialInterstitialListener());
+            millennialInterstitial.load(context, null);
         } catch (MMException e) {
-            e.printStackTrace();
-            UI_THREAD_HANDLER.post(new Runnable() {
-                @Override
-                public void run() {
-                    mInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
-                }
-            });
-            return;
+            Log.e(TAG, "Exception occurred while obtaining an interstitial from MM SDK.", e);
+            interstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
         }
-
-        mMillennialInterstitial.setListener(new MillennialInterstitialListener());
-        mMillennialInterstitial.load(context, null);
     }
 
+
     @Override
     protected void showInterstitial() {
-        if (mMillennialInterstitial.isReady()) {
+
+        if (millennialInterstitial.isReady()) {
             try {
-                mMillennialInterstitial.show(mContext);
+                millennialInterstitial.show(context);
             } catch (MMException e) {
-                e.printStackTrace();
-                UI_THREAD_HANDLER.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        mInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
-                    }
-                });
-                return;
+                MMLog.e(TAG, "An exception occurred while attempting to show interstitial.", e);
+                interstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
             }
         } else {
-            Log.w(TAG, "showInterstitial called before Millennial's ad was loaded.");
+            Log.w(TAG, "showInterstitial called but interstitial is not ready.");
         }
     }
 
+
     @Override
     protected void onInvalidate() {
-        if (mMillennialInterstitial != null) {
-            mMillennialInterstitial.setListener(null);
-            mMillennialInterstitial = null;
-        }
-    }
 
-    private boolean initializeSDK(Context context) {
-        try {
-            if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
-                if (!MMSDK.isInitialized()) {
-                    if (context instanceof Activity) {
-                        try {
-                            MMSDK.initialize(((Activity) context), ActivityListenerManager.LifecycleState.RESUMED);
-                        } catch (Exception e) {
-                            Log.e(TAG, "Error initializing MMSDK", e);
-                            return false;
-                        }
-                    } else {
-                        Log.e(TAG, "MMSDK.initialize must be explicitly called when instantiating the MoPub AdView or InterstitialAd without an Activity.");
-                        return false;
-                    }
-                }
-            } else {
-                Log.e(TAG, "MMSDK minimum supported API is 16");
-                return false;
-            }
-            return true;
-        } catch (Exception e) {
-            Log.e(TAG, "Error initializing MMSDK", e);
-            return false;
+        if (millennialInterstitial != null) {
+            millennialInterstitial.destroy();
+            millennialInterstitial = null;
         }
     }
 
-    private boolean extrasAreValid(Map<String, String> serverExtras) {
-        return serverExtras.containsKey(APID_KEY);
-    }
 
     class MillennialInterstitialListener implements InterstitialListener {
 
         @Override
         public void onAdLeftApplication(InterstitialAd interstitialAd) {
-            // Intentionally not calling MoPub's onLeaveApplication to avoid double-count
+            // onLeaveApplication is an alias to on clicked. We are not required to call this.
+
+            // @formatter:off
+            // https://github.com/mopub/mopub-android-sdk/blob/940eee70fe1980b4869d61cb5d668ccbab75c0ee/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
+            // @formatter:on
             Log.d(TAG, "Millennial Interstitial Ad - Leaving application");
         }
 
+
         @Override
         public void onClicked(InterstitialAd interstitialAd) {
+
             Log.d(TAG, "Millennial Interstitial Ad - Ad was clicked");
-            UI_THREAD_HANDLER.post(new Runnable() {
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mInterstitialListener.onInterstitialClicked();
+
+                    interstitialListener.onInterstitialClicked();
                 }
             });
         }
 
+
         @Override
         public void onClosed(InterstitialAd interstitialAd) {
+
             Log.d(TAG, "Millennial Interstitial Ad - Ad was closed");
-            UI_THREAD_HANDLER.post(new Runnable() {
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mInterstitialListener.onInterstitialDismissed();
+
+                    interstitialListener.onInterstitialDismissed();
                 }
             });
         }
 
+
         @Override
         public void onExpired(InterstitialAd interstitialAd) {
+
             Log.d(TAG, "Millennial Interstitial Ad - Ad expired");
-            UI_THREAD_HANDLER.post(new Runnable() {
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NO_FILL);
+
+                    interstitialListener.onInterstitialFailed(MoPubErrorCode.NO_FILL);
                 }
             });
         }
 
+
         @Override
-        public void onLoadFailed(InterstitialAd interstitialAd,
-                InterstitialErrorStatus interstitialErrorStatus) {
-            Log.d(TAG, "Millennial Interstitial Ad - load failed (" + interstitialErrorStatus.getErrorCode() + "): " + interstitialErrorStatus.getDescription());
+        public void onLoadFailed(InterstitialAd interstitialAd, InterstitialErrorStatus interstitialErrorStatus) {
+
+            Log.d(TAG, "Millennial Interstitial Ad - load failed (" + interstitialErrorStatus.getErrorCode() + "): " +
+                    interstitialErrorStatus.getDescription());
+
             final MoPubErrorCode moPubErrorCode;
 
             switch (interstitialErrorStatus.getErrorCode()) {
                 case InterstitialErrorStatus.ALREADY_LOADED:
                     // This will generate discrepancies, as requests will NOT be sent to Millennial.
-                    mInterstitialListener.onInterstitialLoaded();
+                    interstitialListener.onInterstitialLoaded();
                     Log.w(TAG, "Millennial Interstitial Ad - Attempted to load ads when ads are already loaded.");
                     return;
                 case InterstitialErrorStatus.EXPIRED:
@@ -237,44 +203,62 @@ public void onLoadFailed(InterstitialAd interstitialAd,
                     moPubErrorCode = MoPubErrorCode.NETWORK_NO_FILL;
             }
 
-            UI_THREAD_HANDLER.post(new Runnable() {
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mInterstitialListener.onInterstitialFailed(moPubErrorCode);
+
+                    interstitialListener.onInterstitialFailed(moPubErrorCode);
                 }
             });
         }
 
+
         @Override
         public void onLoaded(InterstitialAd interstitialAd) {
+
             Log.d(TAG, "Millennial Interstitial Ad - Ad loaded splendidly");
-            UI_THREAD_HANDLER.post(new Runnable() {
+
+            CreativeInfo creativeInfo = getCreativeInfo();
+
+            if ((creativeInfo != null) && MMLog.isDebugEnabled()) {
+                MMLog.d(TAG, "Interstitial Creative Info: " + creativeInfo);
+            }
+
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mInterstitialListener.onInterstitialLoaded();
+
+                    interstitialListener.onInterstitialLoaded();
                 }
             });
         }
 
+
         @Override
-        public void onShowFailed(InterstitialAd interstitialAd,
-                InterstitialErrorStatus interstitialErrorStatus) {
-            Log.e(TAG, "Millennial Interstitial Ad - Show failed (" + interstitialErrorStatus.getErrorCode() + "): " + interstitialErrorStatus.getDescription());
-            UI_THREAD_HANDLER.post(new Runnable() {
+        public void onShowFailed(InterstitialAd interstitialAd, InterstitialErrorStatus interstitialErrorStatus) {
+
+            Log.e(TAG, "Millennial Interstitial Ad - Show failed (" + interstitialErrorStatus.getErrorCode() + "): " +
+                    interstitialErrorStatus.getDescription());
+
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
+
+                    interstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
                 }
             });
         }
 
+
         @Override
         public void onShown(InterstitialAd interstitialAd) {
+
             Log.d(TAG, "Millennial Interstitial Ad - Ad shown");
-            UI_THREAD_HANDLER.post(new Runnable() {
+            MillennialUtils.postOnUiThread(new Runnable() {
                 @Override
                 public void run() {
-                    mInterstitialListener.onInterstitialShown();
+
+                    interstitialListener.onInterstitialShown();
                 }
             });
         }
diff --git a/extras/src/com/mopub/mobileads/MillennialUtils.java b/extras/src/com/mopub/mobileads/MillennialUtils.java
new file mode 100644
index 00000000..0417e7ee
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/MillennialUtils.java
@@ -0,0 +1,65 @@
+package com.mopub.mobileads;
+
+import android.app.Application;
+import android.content.Context;
+import android.os.Handler;
+import android.os.Looper;
+import android.support.annotation.NonNull;
+import android.util.Log;
+
+import com.millennialmedia.MMException;
+import com.millennialmedia.MMSDK;
+import com.mopub.common.Preconditions;
+
+
+final public class MillennialUtils {
+    private static final String LOG_TAG = MillennialUtils.class.getSimpleName();
+
+    private static final Handler handler = new Handler(Looper.getMainLooper());
+
+    public static final String VERSION = "1.2.0";
+
+    private static volatile boolean sIsInitialized = false;
+
+    public static void postOnUiThread(Runnable runnable) {
+        handler.post(runnable);
+    }
+
+    public static boolean isEmpty(String s) {
+        return (s == null || s.trim().isEmpty());
+    }
+
+    /**
+     * @param context - application or activity context
+     * @return {@code true} successfully initialized
+     */
+    public static boolean initSdk(@NonNull Context context) {
+        if (sIsInitialized) {
+            return true;
+        }
+
+        synchronized (MillennialUtils.class) {
+            if (sIsInitialized) {
+                return true;
+            }
+            Preconditions.checkNotNull(context);
+
+            final Application application;
+            if (context instanceof Application) {
+                application = (Application) context;
+            } else {
+                application = (Application) context.getApplicationContext();
+            }
+
+            try {
+                MMSDK.initialize(application);
+            } catch (MMException e) {
+                Log.e(LOG_TAG, "Exception occurred initializing the MM SDK.", e);
+                return false;
+            }
+
+            sIsInitialized = true;
+        }
+        return true;
+    }
+}
diff --git a/extras/src/com/mopub/mobileads/TapjoyInterstitial.java b/extras/src/com/mopub/mobileads/TapjoyInterstitial.java
index 48980569..9a87ee6a 100644
--- a/extras/src/com/mopub/mobileads/TapjoyInterstitial.java
+++ b/extras/src/com/mopub/mobileads/TapjoyInterstitial.java
@@ -24,7 +24,7 @@
 
 import java.util.Map;
 
-// Tested with Tapjoy SDK 11.8.2
+// Tested with Tapjoy SDK 11.11.0
 public class TapjoyInterstitial extends CustomEventInterstitial implements TJPlacementListener {
     private static final String TAG = TapjoyInterstitial.class.getSimpleName();
     private static final String TJC_MOPUB_NETWORK_CONSTANT = "mopub";
diff --git a/extras/src/com/mopub/mobileads/TapjoyRewardedVideo.java b/extras/src/com/mopub/mobileads/TapjoyRewardedVideo.java
index b08d8f04..8613c441 100644
--- a/extras/src/com/mopub/mobileads/TapjoyRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/TapjoyRewardedVideo.java
@@ -21,7 +21,7 @@
 import java.util.Hashtable;
 import java.util.Map;
 
-// Tested with Tapjoy SDK 11.8.2
+// Tested with Tapjoy SDK 11.11.0
 public class TapjoyRewardedVideo extends CustomEventRewardedVideo {
     private static final String TAG = TapjoyRewardedVideo.class.getSimpleName();
     private static final String TJC_MOPUB_NETWORK_CONSTANT = "mopub";
diff --git a/extras/src/com/mopub/mobileads/UnityInterstitial.java b/extras/src/com/mopub/mobileads/UnityInterstitial.java
index d9361a30..37b31b27 100644
--- a/extras/src/com/mopub/mobileads/UnityInterstitial.java
+++ b/extras/src/com/mopub/mobileads/UnityInterstitial.java
@@ -10,7 +10,7 @@
 import java.util.Map;
 
 /**
- * Certified with Unity Ads 2.1.0
+ * Certified with Unity Ads 2.1.1
  */
 public class UnityInterstitial extends CustomEventInterstitial implements IUnityAdsExtendedListener {
 
diff --git a/extras/src/com/mopub/mobileads/UnityRewardedVideo.java b/extras/src/com/mopub/mobileads/UnityRewardedVideo.java
index 02ab0e70..24636be9 100644
--- a/extras/src/com/mopub/mobileads/UnityRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/UnityRewardedVideo.java
@@ -17,13 +17,13 @@
 /**
  * A custom event for showing Unity rewarded videos.
  *
- * Certified with Unity Ads 2.1.0
+ * Certified with Unity Ads 2.1.1
  */
 public class UnityRewardedVideo extends CustomEventRewardedVideo {
     private static final String GAME_ID_KEY = "gameId";
     private static final LifecycleListener sLifecycleListener = new UnityLifecycleListener();
     private static final UnityAdsListener sUnityAdsListener = new UnityAdsListener();
-    private static String sPlacementId = "rewardedVideo";
+    private static String sPlacementId = "";
 
     @Nullable
     private Activity mLauncherActivity;
diff --git a/extras/src/com/mopub/mobileads/UnityRouter.java b/extras/src/com/mopub/mobileads/UnityRouter.java
index 951a91c5..a7358947 100644
--- a/extras/src/com/mopub/mobileads/UnityRouter.java
+++ b/extras/src/com/mopub/mobileads/UnityRouter.java
@@ -12,7 +12,7 @@
 import java.util.Map;
 
 /**
- * Certified with Unity Ads 2.1.0
+ * Certified with Unity Ads 2.1.1
  */
 public class UnityRouter {
     private static String sCurrentPlacementId;
diff --git a/extras/src/com/mopub/mobileads/VungleInterstitial.java b/extras/src/com/mopub/mobileads/VungleInterstitial.java
index f7a9e5dd..ba140085 100644
--- a/extras/src/com/mopub/mobileads/VungleInterstitial.java
+++ b/extras/src/com/mopub/mobileads/VungleInterstitial.java
@@ -3,32 +3,41 @@
 import android.content.Context;
 import android.os.Handler;
 import android.os.Looper;
-import android.util.Log;
+import android.support.annotation.NonNull;
 
-import com.vungle.publisher.EventListener;
-import com.vungle.publisher.VunglePub;
+import com.mopub.common.logging.MoPubLog;
 
 import java.util.Map;
 
-/*
- * Tested with Vungle SDK 4.0.2
+/**
+ * A custom event for showing Vungle Interstitial.
+ * <p>
+ * Certified with Vungle SDK 5.3.0
  */
-public class VungleInterstitial extends CustomEventInterstitial implements EventListener {
+public class VungleInterstitial extends CustomEventInterstitial {
 
-    private static final String DEFAULT_VUNGLE_APP_ID = "YOUR_DEFAULT_VUNGLE_APP_ID";
+    private static final String INTERSTITIAL_TAG = "Vungle Interstitial: ";
 
     /*
      * APP_ID_KEY is intended for MoPub internal use. Do not modify.
      */
     public static final String APP_ID_KEY = "appId";
+    public static final String PLACEMENT_ID_KEY = "pid";
+    public static final String PLACEMENT_IDS_KEY = "pids";
 
-    private final VunglePub mVunglePub;
+    private static VungleRouter sVungleRouter;
     private final Handler mHandler;
     private CustomEventInterstitialListener mCustomEventInterstitialListener;
+    private VungleInterstitialRouterListener mVungleRouterListener;
+    private String mAppId;
+    private String mPlacementId;
+    private String[] mPlacementIds;
+    private boolean mIsPlaying;
+
 
     public VungleInterstitial() {
         mHandler = new Handler(Looper.getMainLooper());
-        mVunglePub = VunglePub.getInstance();
+        sVungleRouter = VungleRouter.getInstance();
     }
 
     @Override
@@ -37,96 +46,192 @@ protected void loadInterstitial(Context context,
             Map<String, Object> localExtras,
             Map<String, String> serverExtras) {
         mCustomEventInterstitialListener = customEventInterstitialListener;
+        mIsPlaying = false;
 
         if (context == null) {
-            mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+            mHandler.post(new Runnable() {
+                @Override
+                public void run() {
+                    mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+                }
+            });
+
             return;
         }
 
-        /*
-         * You may pass the Vungle App Id in the serverExtras Map by specifying Custom Event Data
-         * in MoPub's web interface.
-         */
-        final String appId;
-        if (extrasAreValid(serverExtras)) {
-            appId = serverExtras.get(APP_ID_KEY);
-        } else {
-            appId = DEFAULT_VUNGLE_APP_ID;
+        if (!validateIdsInServerExtras(serverExtras)) {
+            mHandler.post(new Runnable() {
+                @Override
+                public void run() {
+                    mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+                }
+            });
+
+            return;
         }
 
-        // init clears the event listener.
-        mVunglePub.init(context, appId);
-        mVunglePub.setEventListeners(this);
-        if (mVunglePub.isAdPlayable()) {
-            Log.d("MoPub", "Vungle interstitial ad successfully loaded.");
-            mCustomEventInterstitialListener.onInterstitialLoaded();
-        } else {
-            Log.d("MoPub", "Vungle interstitial ad is not loaded.");
-            mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+        if (mVungleRouterListener == null) {
+            mVungleRouterListener = new VungleInterstitialRouterListener();
+        }
+
+        if (!sVungleRouter.isVungleInitialized()) {
+            sVungleRouter.initVungle(context, mAppId, mPlacementIds);
         }
+
+        sVungleRouter.loadAdForPlacement(mPlacementId, mVungleRouterListener);
     }
 
     @Override
     protected void showInterstitial() {
-        if (mVunglePub.isAdPlayable()) {
-            mVunglePub.playAd();
+        if (sVungleRouter.isAdPlayableForPlacement(mPlacementId)) {
+            sVungleRouter.playAdForPlacement(mPlacementId, null);
+            mIsPlaying = true;
         } else {
-            Log.d("MoPub", "Tried to show a Vungle interstitial ad before it finished loading. Please try again.");
+            MoPubLog.d(INTERSTITIAL_TAG + "SDK tried to show a Vungle interstitial ad before it finished loading. Please try again.");
+            mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
         }
     }
 
     @Override
     protected void onInvalidate() {
-        mVunglePub.clearEventListeners();
+        MoPubLog.d(INTERSTITIAL_TAG + "onInvalidate is called for Placement ID:" + mPlacementId);
+        sVungleRouter.removeRouterListener(mPlacementId);
+        mVungleRouterListener = null;
     }
 
-    private boolean extrasAreValid(Map<String, String> serverExtras) {
-        return serverExtras.containsKey(APP_ID_KEY);
-    }
+    // private functions
+    private boolean validateIdsInServerExtras(Map<String, String> serverExtras) {
+        boolean isAllDataValid = true;
 
-    /*
-     * EventListener implementation
-     */
+        if (serverExtras.containsKey(APP_ID_KEY)) {
+            mAppId = serverExtras.get(APP_ID_KEY);
+            if (mAppId.isEmpty()) {
+                MoPubLog.w(INTERSTITIAL_TAG + "App ID is empty.");
+                isAllDataValid = false;
+            }
+        } else {
+            MoPubLog.w(INTERSTITIAL_TAG + "AppID is not in serverExtras.");
+            isAllDataValid = false;
+        }
 
-    @Override
-    public void onVideoView(final boolean isCompletedView, final int watchedMillis, final int videoDurationMillis) {
-        final double watchedPercent = (double) watchedMillis / videoDurationMillis * 100;
-        Log.d("MoPub", String.format("%.1f%% of Vungle video watched.", watchedPercent));
-    }
+        if (serverExtras.containsKey(PLACEMENT_ID_KEY)) {
+            mPlacementId = serverExtras.get(PLACEMENT_ID_KEY);
+            if (mPlacementId.isEmpty()) {
+                MoPubLog.w(INTERSTITIAL_TAG + "Placement ID for this Ad Unit is empty.");
+                isAllDataValid = false;
+            }
+        } else {
+            MoPubLog.w(INTERSTITIAL_TAG + "Placement ID for this Ad Unit is not in serverExtras.");
+            isAllDataValid = false;
+        }
 
-    @Override
-    public void onAdStart() {
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                Log.d("MoPub", "Showing Vungle interstitial ad.");
-                mCustomEventInterstitialListener.onInterstitialShown();
+        if (serverExtras.containsKey(PLACEMENT_IDS_KEY)) {
+            mPlacementIds = serverExtras.get(PLACEMENT_IDS_KEY).replace(" ", "").split(",", 0);
+            if (mPlacementIds.length == 0) {
+                MoPubLog.w(INTERSTITIAL_TAG + "Placement IDs are empty.");
+                isAllDataValid = false;
             }
-        });
-    }
+        } else {
+            MoPubLog.w(INTERSTITIAL_TAG + "Placement IDs for this Ad Unit is not in serverExtras.");
+            isAllDataValid = false;
+        }
 
-    @Override
-    public void onAdEnd(final boolean wasSuccessfulView, final boolean wasCallToActionClicked) {
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                Log.d("MoPub", "Vungle interstitial ad dismissed.");
-                mCustomEventInterstitialListener.onInterstitialDismissed();
-                if (wasCallToActionClicked) {
-                    mCustomEventInterstitialListener.onInterstitialClicked();
+        if (isAllDataValid) {
+            boolean foundInList = false;
+            for (String pid : mPlacementIds) {
+                if (pid.equals(mPlacementId)) {
+                    foundInList = true;
                 }
             }
-        });
-    }
+            if (!foundInList) {
+                MoPubLog.w(INTERSTITIAL_TAG + "Placement IDs for this Ad Unit is not in the array of Placement IDs");
+                isAllDataValid = false;
+            }
+        }
 
-    @Override
-    public void onAdUnavailable(final String s) {
-        mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+        return isAllDataValid;
     }
 
-    @Override
-    public void onAdPlayableChanged(final boolean playable) {
-        Log.d("MoPub", String.format("Vungle interstitial ad is %s.",
-                playable ? "playable" : "not playable"));
+
+    /*
+     * VungleRouterListener
+     */
+    private class VungleInterstitialRouterListener implements VungleRouterListener {
+        @Override
+        public void onAdEnd(@NonNull String placementReferenceId, final boolean wasSuccessfulView, final boolean wasCallToActionClicked) {
+            if (mPlacementId.equals(placementReferenceId)) {
+                MoPubLog.d(INTERSTITIAL_TAG + "onAdEnd - Placement ID: " + placementReferenceId + ", wasSuccessfulView: " + wasSuccessfulView + ", wasCallToActionClicked: " + wasCallToActionClicked);
+                mIsPlaying = false;
+
+                mHandler.post(new Runnable() {
+                    @Override
+                    public void run() {
+                        if (wasCallToActionClicked) {
+                            mCustomEventInterstitialListener.onInterstitialClicked();
+                        }
+                        mCustomEventInterstitialListener.onInterstitialDismissed();
+                    }
+                });
+
+                sVungleRouter.removeRouterListener(mPlacementId);
+            }
+        }
+
+        @Override
+        public void onAdStart(@NonNull String placementReferenceId) {
+            if (mPlacementId.equals(placementReferenceId)) {
+                MoPubLog.d(INTERSTITIAL_TAG + "onAdStart - Placement ID: " + placementReferenceId);
+                mIsPlaying = true;
+
+                mHandler.post(new Runnable() {
+                    @Override
+                    public void run() {
+                        mCustomEventInterstitialListener.onInterstitialShown();
+                    }
+                });
+            }
+        }
+
+        @Override
+        public void onUnableToPlayAd(@NonNull String placementReferenceId, String reason) {
+            if (mPlacementId.equals(placementReferenceId)) {
+                MoPubLog.d(INTERSTITIAL_TAG + "onUnableToPlayAd - Placement ID: " + placementReferenceId + ", reason: " + reason);
+                mIsPlaying = false;
+
+                mHandler.post(new Runnable() {
+                    @Override
+                    public void run() {
+                        mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+                    }
+                });
+            }
+        }
+
+        @Override
+        public void onAdAvailabilityUpdate(@NonNull String placementReferenceId, boolean isAdAvailable) {
+            if (mPlacementId.equals(placementReferenceId)) {
+                if (!mIsPlaying) {
+                    if (isAdAvailable) {
+                        MoPubLog.d(INTERSTITIAL_TAG + "interstitial ad successfully loaded - Placement ID: " + placementReferenceId);
+
+                        mHandler.post(new Runnable() {
+                            @Override
+                            public void run() {
+                                mCustomEventInterstitialListener.onInterstitialLoaded();
+                            }
+                        });
+                    } else {
+                        MoPubLog.d(INTERSTITIAL_TAG + "interstitial ad is not loaded - Placement ID: " + placementReferenceId);
+
+                        mHandler.post(new Runnable() {
+                            @Override
+                            public void run() {
+                                mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+                            }
+                        });
+                    }
+                }
+            }
+        }
     }
 }
diff --git a/extras/src/com/mopub/mobileads/VungleRewardedVideo.java b/extras/src/com/mopub/mobileads/VungleRewardedVideo.java
index f0f283ce..6a44e429 100644
--- a/extras/src/com/mopub/mobileads/VungleRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/VungleRewardedVideo.java
@@ -5,130 +5,196 @@
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
-import com.mopub.common.BaseLifecycleListener;
 import com.mopub.common.DataKeys;
 import com.mopub.common.LifecycleListener;
 import com.mopub.common.MediationSettings;
 import com.mopub.common.MoPubReward;
 import com.mopub.common.logging.MoPubLog;
+
 import com.vungle.publisher.AdConfig;
-import com.vungle.publisher.EventListener;
-import com.vungle.publisher.VunglePub;
 
-import java.util.Locale;
 import java.util.Map;
 
 /**
  * A custom event for showing Vungle rewarded videos.
  *
- * Certified with Vungle 4.0.2
+ * Certified with Vungle SDK 5.3.0
  */
 public class VungleRewardedVideo extends CustomEventRewardedVideo {
 
-    private static final String DEFAULT_VUNGLE_APP_ID = "YOUR_DEFAULT_VUNGLE_APP_ID";
+    private static final String REWARDED_TAG = "Vungle Rewarded: ";
 
     /*
      * These constants are intended for MoPub internal use. Do not modify.
      */
     public static final String APP_ID_KEY = "appId";
-    public static final String VUNGLE_AD_NETWORK_CONSTANT = "vngl_id";
+    public static final String PLACEMENT_ID_KEY = "pid";
+    public static final String PLACEMENT_IDS_KEY = "pids";
 
-    // This has to be reinitialized every time the CE loads to avoid conflict with the interstitials.
-    private static VunglePub sVunglePub;
-    private static VungleRewardedVideoListener sVungleListener;
-    private static boolean sInitialized;
-    private static final LifecycleListener sLifecycleListener = new BaseLifecycleListener() {
-        @Override
-        public void onPause(@NonNull final Activity activity) {
-            super.onPause(activity);
-            sVunglePub.onPause();
-        }
+    public static final String VUNGLE_NETWORK_ID_DEFAULT = "vngl_id";
+    private static final String VUNGLE_DEFAULT_APP_ID = "YOUR_APP_ID_HERE";
+    private static final String[] VUNGLE_DEFAULT_ALL_PLACEMENT_IDS = {"PLACEMENT_ID_1", "PLACEMENT_ID_2", "..."};
 
-        @Override
-        public void onResume(@NonNull final Activity activity) {
-            super.onResume(activity);
-            sVunglePub.onResume();
-        }
-    };
+    private static VungleRouter sVungleRouter;
+    private VungleRewardedRouterListener mVungleRewardedRouterListener;
+    private static boolean sInitialized;
+    private String mAppId;
+    private String mPlacementId;
+    private String[] mPlacementIds;
+    private boolean mIsPlaying;
 
     private String mAdUnitId;
     private String mCustomerId;
 
+
     public VungleRewardedVideo() {
-        sVungleListener = new VungleRewardedVideoListener();
-    }
+        sVungleRouter = VungleRouter.getInstance();
 
-    @Nullable
-    @Override
-    public CustomEventRewardedVideoListener getVideoListenerForSdk() {
-        return sVungleListener;
+        if (mVungleRewardedRouterListener == null) {
+            mVungleRewardedRouterListener = new VungleRewardedRouterListener();
+        }
     }
 
     @Nullable
     @Override
     public LifecycleListener getLifecycleListener() {
-        return sLifecycleListener;
+        return sVungleRouter.getLifecycleListener();
     }
 
     @NonNull
     @Override
     protected String getAdNetworkId() {
-        return VUNGLE_AD_NETWORK_CONSTANT;
+        return mPlacementId;
     }
 
     @Override
     protected boolean checkAndInitializeSdk(@NonNull final Activity launcherActivity,
-                @NonNull final Map<String, Object> localExtras,
-                @NonNull final Map<String, String> serverExtras) throws Exception {
+            @NonNull final Map<String, Object> localExtras,
+            @NonNull final Map<String, String> serverExtras) throws Exception {
         synchronized (VungleRewardedVideo.class) {
-            if (!sInitialized) {
-                sVunglePub = VunglePub.getInstance();
-                String appId = serverExtras.containsKey(APP_ID_KEY) ? serverExtras.get(APP_ID_KEY) : DEFAULT_VUNGLE_APP_ID;
-                sVunglePub.init(launcherActivity, appId);
-                sInitialized = true;
-                return true;
+            if (sInitialized) {
+                return false;
+            }
+
+            if (!validateIdsInServerExtras(serverExtras)) {
+                mAppId = VUNGLE_DEFAULT_APP_ID;
+                mPlacementIds = VUNGLE_DEFAULT_ALL_PLACEMENT_IDS;
+            }
+
+            if (!sVungleRouter.isVungleInitialized()) {
+                sVungleRouter.initVungle(launcherActivity, mAppId, mPlacementIds);
             }
-            return false;
+
+            sInitialized = true;
+
+            return true;
         }
     }
 
     @Override
     protected void loadWithSdkInitialized(@NonNull final Activity activity, @NonNull final Map<String, Object> localExtras, @NonNull final Map<String, String> serverExtras) throws Exception {
-        String appId = serverExtras.containsKey(APP_ID_KEY) ? serverExtras.get(APP_ID_KEY) : DEFAULT_VUNGLE_APP_ID;
-        sVunglePub.init(activity, appId);
-        sVunglePub.setEventListeners(sVungleListener);
+        mIsPlaying = false;
+
+        if (!validateIdsInServerExtras(serverExtras)) {
+            mPlacementId = VUNGLE_NETWORK_ID_DEFAULT;
+            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(VungleRewardedVideo.class, mPlacementId, MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+
+            return;
+        }
+
         Object adUnitObject = localExtras.get(DataKeys.AD_UNIT_ID_KEY);
         if (adUnitObject instanceof String) {
             mAdUnitId = (String) adUnitObject;
         }
 
-        Object customerIdObject = localExtras.get(DataKeys.REWARDED_VIDEO_CUSTOMER_ID);
+        Object customerIdObject = localExtras.get(DataKeys.REWARDED_AD_CUSTOMER_ID_KEY);
         if (customerIdObject instanceof String && !TextUtils.isEmpty((String) customerIdObject)) {
             mCustomerId = (String) customerIdObject;
         }
 
-        if (sVunglePub.isAdPlayable()) {
-            MoPubLog.d("Vungle rewarded video ad successfully loaded.");
-            MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(VungleRewardedVideo.class,
-                    VUNGLE_AD_NETWORK_CONSTANT);
-        } else {
-            MoPubLog.d("Vungle rewarded video ad is not loaded.");
-            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(VungleRewardedVideo.class,
-                    VUNGLE_AD_NETWORK_CONSTANT, MoPubErrorCode.NETWORK_NO_FILL);
+        if (sVungleRouter.isVungleInitialized()) {
+            sVungleRouter.loadAdForPlacement(mPlacementId, mVungleRewardedRouterListener);
+        }
+        else {
+            MoPubLog.d(REWARDED_TAG + "There should not be this case. loadWithSdkInitialized is called before the SDK starts initialization for Placement ID: " + mPlacementId);
+            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(VungleRewardedVideo.class, mPlacementId, MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
         }
     }
 
     @Override
     protected boolean hasVideoAvailable() {
-        return sVunglePub.isAdPlayable();
+        return sVungleRouter.isAdPlayableForPlacement(mPlacementId);
     }
 
     @Override
     protected void showVideo() {
         final AdConfig adConfig = new AdConfig();
-        adConfig.setIncentivized(true);
         setUpMediationSettingsForRequest(adConfig);
-        sVunglePub.playAd(adConfig);
+
+        sVungleRouter.playAdForPlacement(mPlacementId, adConfig);
+        mIsPlaying = true;
+    }
+
+    @Override
+    protected void onInvalidate() {
+        MoPubLog.d(REWARDED_TAG + "onInvalidate is called for Placement ID:" + mPlacementId);
+
+        sVungleRouter.removeRouterListener(mPlacementId);
+        mVungleRewardedRouterListener = null;
+    }
+
+
+    //private functions
+    private boolean validateIdsInServerExtras (Map<String, String> serverExtras) {
+        boolean isAllDataValid = true;
+
+        if (serverExtras.containsKey(APP_ID_KEY)) {
+            mAppId = serverExtras.get(APP_ID_KEY);
+            if (mAppId.isEmpty()) {
+                MoPubLog.w(REWARDED_TAG + "App ID is empty.");
+                isAllDataValid = false;
+            }
+        } else {
+            MoPubLog.w(REWARDED_TAG + "AppID is not in serverExtras.");
+            isAllDataValid = false;
+        }
+
+        if (serverExtras.containsKey(PLACEMENT_ID_KEY)) {
+            mPlacementId = serverExtras.get(PLACEMENT_ID_KEY);
+            if (mPlacementId.isEmpty()) {
+                MoPubLog.w(REWARDED_TAG + "Placement ID for this Ad Unit is empty.");
+                isAllDataValid = false;
+            }
+        } else {
+            MoPubLog.w(REWARDED_TAG + "Placement ID for this Ad Unit is not in serverExtras.");
+            isAllDataValid = false;
+        }
+
+        if (serverExtras.containsKey(PLACEMENT_IDS_KEY)) {
+            mPlacementIds = serverExtras.get(PLACEMENT_IDS_KEY).replace(" ", "").split(",", 0);
+            if (mPlacementIds.length == 0) {
+                MoPubLog.w(REWARDED_TAG + "Placement IDs are empty.");
+                isAllDataValid = false;
+            }
+        } else {
+            MoPubLog.w(REWARDED_TAG + "Placement IDs for this Ad Unit is not in serverExtras.");
+            isAllDataValid = false;
+        }
+
+        if (isAllDataValid) {
+            boolean foundInList = false;
+            for (String pid:  mPlacementIds) {
+                if(pid.equals(mPlacementId)) {
+                    foundInList = true;
+                }
+            }
+            if(!foundInList) {
+                MoPubLog.w(REWARDED_TAG + "Placement IDs for this Ad Unit is not in the array of Placement IDs");
+                isAllDataValid = false;
+            }
+        }
+
+        return isAllDataValid;
     }
 
     private void setUpMediationSettingsForRequest(AdConfig adConfig) {
@@ -166,57 +232,83 @@ private void modifyAdConfig(AdConfig adConfig, VungleMediationSettings mediation
         }
     }
 
-    @Override
-    protected void onInvalidate() {
-    }
-
-    private class VungleRewardedVideoListener implements EventListener,
-            CustomEventRewardedVideoListener {
 
+    /*
+     * VungleRewardedRouterListener
+     */
+    private class VungleRewardedRouterListener implements VungleRouterListener {
         @Override
-        public void onAdEnd(final boolean wasSuccessfulView, final boolean wasCallToActionClicked) {
-            if (wasSuccessfulView) {
-                // Vungle does not provide a callback when a user should be rewarded.
-                // You will need to provide your own reward logic if you receive a reward with
-                // "NO_REWARD_LABEL" && "NO_REWARD_AMOUNT"
-                MoPubRewardedVideoManager.onRewardedVideoCompleted(VungleRewardedVideo.class,
-                        VUNGLE_AD_NETWORK_CONSTANT,
-                        MoPubReward.success(MoPubReward.NO_REWARD_LABEL,
-                                MoPubReward.NO_REWARD_AMOUNT));
-            }
-            if (wasCallToActionClicked) {
-                MoPubRewardedVideoManager.onRewardedVideoClicked(VungleRewardedVideo.class,
-                        VUNGLE_AD_NETWORK_CONSTANT);
+        public void onAdEnd(@NonNull String placementReferenceId, final boolean wasSuccessfulView, final boolean wasCallToActionClicked) {
+            if (mPlacementId.equals(placementReferenceId)) {
+                MoPubLog.d(REWARDED_TAG + "onAdEnd - Placement ID: " + placementReferenceId + ", wasSuccessfulView: " + wasSuccessfulView + ", wasCallToActionClicked: " + wasCallToActionClicked);
+
+                mIsPlaying = false;
+
+                if (wasSuccessfulView) {
+                    // Vungle does not provide a callback when a user should be rewarded.
+                    // You will need to provide your own reward logic if you receive a reward with
+                    // "NO_REWARD_LABEL" && "NO_REWARD_AMOUNT"
+                    MoPubRewardedVideoManager.onRewardedVideoCompleted(VungleRewardedVideo.class,
+                            mPlacementId,
+                            MoPubReward.success(MoPubReward.NO_REWARD_LABEL,
+                                    MoPubReward.NO_REWARD_AMOUNT));
+                }
+
+                if (wasCallToActionClicked) {
+                    MoPubRewardedVideoManager.onRewardedVideoClicked(VungleRewardedVideo.class,
+                            mPlacementId);
+                }
+
+                MoPubRewardedVideoManager.onRewardedVideoClosed(VungleRewardedVideo.class,
+                        mPlacementId);
+
+                sVungleRouter.removeRouterListener(mPlacementId);
             }
-            MoPubRewardedVideoManager.onRewardedVideoClosed(VungleRewardedVideo.class,
-                    VUNGLE_AD_NETWORK_CONSTANT);
         }
 
         @Override
-        public void onAdStart() {
-            MoPubRewardedVideoManager.onRewardedVideoStarted(VungleRewardedVideo.class,
-                    VUNGLE_AD_NETWORK_CONSTANT);
-        }
+        public void onAdStart(@NonNull String placementReferenceId) {
+            if (mPlacementId.equals(placementReferenceId)) {
+                MoPubLog.d(REWARDED_TAG + "onAdStart - Placement ID: " + placementReferenceId);
 
-        @Override
-        public void onAdUnavailable(final String s) {
-            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(VungleRewardedVideo.class,
-                    VUNGLE_AD_NETWORK_CONSTANT, MoPubErrorCode.NETWORK_NO_FILL);
+                mIsPlaying = true;
+
+                MoPubRewardedVideoManager.onRewardedVideoStarted(VungleRewardedVideo.class,
+                        mPlacementId);
+            }
         }
 
         @Override
-        public void onAdPlayableChanged(final boolean playable) {
-            MoPubLog.d(String.format("Vungle rewarded video ad is %s.",
-                    playable ? "playable" : "not playable"));
+        public void onUnableToPlayAd(@NonNull String placementReferenceId, String reason) {
+            if (mPlacementId.equals(placementReferenceId)) {
+                MoPubLog.d(REWARDED_TAG + "onUnableToPlayAd - Placement ID: " + placementReferenceId + ", reason: " + reason);
+
+                mIsPlaying = false;
+                MoPubRewardedVideoManager.onRewardedVideoLoadFailure(VungleRewardedVideo.class,
+                        mPlacementId, MoPubErrorCode.NETWORK_NO_FILL);
+            }
         }
 
         @Override
-        public void onVideoView(final boolean isCompletedView, final int watchedMillis, final int videoMillis) {
-            MoPubLog.d(String.format(Locale.US, "%.1f%% of Vungle video watched.",
-                    (double) watchedMillis / videoMillis * 100));
+        public void onAdAvailabilityUpdate(@NonNull String placementReferenceId, boolean isAdAvailable) {
+            if (mPlacementId.equals(placementReferenceId)) {
+                if (!mIsPlaying) {
+                    if (isAdAvailable) {
+                        MoPubLog.d(REWARDED_TAG + "rewarded video ad successfully loaded - Placement ID: " + placementReferenceId);
+                        MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(VungleRewardedVideo.class,
+                                mPlacementId);
+                    }
+                    else {
+                        MoPubLog.d(REWARDED_TAG + "rewarded video ad is not loaded - Placement ID: " + placementReferenceId);
+                        MoPubRewardedVideoManager.onRewardedVideoLoadFailure(VungleRewardedVideo.class,
+                                mPlacementId, MoPubErrorCode.NETWORK_NO_FILL);
+                    }
+                }
+            }
         }
     }
 
+
     public static class VungleMediationSettings implements MediationSettings {
         @Nullable private final String userId;
         @Nullable private final String title;
diff --git a/extras/src/com/mopub/mobileads/VungleRouter.java b/extras/src/com/mopub/mobileads/VungleRouter.java
new file mode 100644
index 00000000..46a499f7
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/VungleRouter.java
@@ -0,0 +1,211 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.support.annotation.NonNull;
+
+import com.mopub.common.BaseLifecycleListener;
+import com.mopub.common.LifecycleListener;
+import com.mopub.common.logging.MoPubLog;
+
+import com.vungle.publisher.AdConfig;
+import com.vungle.publisher.VungleAdEventListener;
+import com.vungle.publisher.VungleInitListener;
+import com.vungle.publisher.VunglePub;
+import com.vungle.publisher.env.WrapperFramework;
+import com.vungle.publisher.inject.Injector;
+
+import java.util.HashMap;
+import java.util.Map;
+
+
+/**
+ * Certified with Vungle SDK 5.3.0
+ */
+public class VungleRouter {
+
+    private static final String ROUTER_TAG = "Vungle Router: ";
+
+    // Version of the adapter, intended for Vungle internal use.
+    private static final String VERSION = "5.3.0";
+
+    private static VungleRouter instance = new VungleRouter();
+    private enum SDKInitState {
+        NOTINITIALIZED,
+        INITIALIZING,
+        INITIALIZED;
+    }
+
+    private static SDKInitState sInitState = SDKInitState.NOTINITIALIZED;
+    private static VunglePub sVunglePub;
+    private static Map<String, VungleRouterListener> sVungleRouterListeners = new HashMap<>();
+    private static Map<String, VungleRouterListener> sWaitingList = new HashMap<>();
+
+    private static final LifecycleListener sLifecycleListener = new BaseLifecycleListener() {
+        @Override
+        public void onPause(@NonNull final Activity activity) {
+            super.onPause(activity);
+            sVunglePub.onPause();
+        }
+
+        @Override
+        public void onResume(@NonNull final Activity activity) {
+            super.onResume(activity);
+            sVunglePub.onResume();
+        }
+    };
+
+
+    private VungleRouter() {
+        Injector injector = Injector.getInstance();
+        injector.setWrapperFramework(WrapperFramework.mopub);
+        injector.setWrapperFrameworkVersion(VERSION.replace('.', '_'));
+
+        sVunglePub = VunglePub.getInstance();
+    }
+
+    public static VungleRouter getInstance() {
+        return instance;
+    }
+
+    public LifecycleListener getLifecycleListener() {
+        return sLifecycleListener;
+    }
+
+
+    public void initVungle(Context context, String vungleAppId, String[] placementReferenceIds) {
+        sVunglePub.init(context, vungleAppId, placementReferenceIds, new VungleInitListener() {
+            @Override
+            public void onSuccess() {
+                MoPubLog.d(ROUTER_TAG + "SDK is initialized successfully.");
+
+                sInitState = SDKInitState.INITIALIZED;
+
+                sVunglePub.clearAndSetEventListeners(vungleDefaultListener);
+                clearWaitingList();
+            }
+
+            @Override
+            public void onFailure(Throwable throwable) {
+                MoPubLog.w(ROUTER_TAG + "Initialization is failed.");
+
+                sInitState = SDKInitState.NOTINITIALIZED;
+            }
+        });
+
+        sInitState = SDKInitState.INITIALIZING;
+    }
+
+    public boolean isVungleInitialized() {
+        if (sInitState == SDKInitState.NOTINITIALIZED) {
+            return false;
+        } else if (sInitState == SDKInitState.INITIALIZING) {
+            return true;
+        } else if (sInitState == SDKInitState.INITIALIZED) {
+            return true;
+        }
+
+        return sVunglePub.isInitialized();
+    }
+
+    public void loadAdForPlacement(String placementId, VungleRouterListener routerListener) {
+        switch (sInitState) {
+            case NOTINITIALIZED:
+                MoPubLog.w(ROUTER_TAG + "There should not be this case. loadAdForPlacement is called before initialization starts.");
+                break;
+
+            case INITIALIZING:
+                sWaitingList.put(placementId, routerListener);
+                break;
+
+            case INITIALIZED:
+                addRouterListener(placementId, routerListener);
+                sVunglePub.loadAd(placementId);
+                break;
+        }
+    }
+
+    private void addRouterListener(String placementId, VungleRouterListener routerListener) {
+        sVungleRouterListeners.put(placementId, routerListener);
+    }
+
+    public void removeRouterListener(String placementId) {
+        sVungleRouterListeners.remove(placementId);
+    }
+
+    public boolean isAdPlayableForPlacement(String placementId) {
+        return sVunglePub.isAdPlayable(placementId);
+    }
+
+    public void playAdForPlacement(String placementId, AdConfig adConfig) {
+        if (sVunglePub.isAdPlayable(placementId)) {
+            sVunglePub.playAd(placementId, adConfig);
+        }
+        else {
+            MoPubLog.w(ROUTER_TAG + "There should not be this case. playAdForPlacement is called before an ad is loaded for Placement ID: " + placementId);
+        }
+    }
+
+    private void clearWaitingList() {
+        for (Map.Entry<String, VungleRouterListener> entry : sWaitingList.entrySet()) {
+            sVunglePub.loadAd(entry.getKey());
+            sVungleRouterListeners.put(entry.getKey(),entry.getValue());
+        }
+
+        sWaitingList.clear();
+    }
+
+
+    /*
+     * VungleAdEventListener
+     */
+    private final VungleAdEventListener vungleDefaultListener = new VungleAdEventListener() {
+        @Override
+        public void onAdEnd(@NonNull String placementReferenceId, final boolean wasSuccessfulView, final boolean wasCallToActionClicked) {
+            MoPubLog.d(ROUTER_TAG + "onAdEnd - Placement ID: " + placementReferenceId);
+
+            VungleRouterListener targetListener = sVungleRouterListeners.get(placementReferenceId);
+            if (targetListener != null) {
+                targetListener.onAdEnd(placementReferenceId, wasSuccessfulView, wasCallToActionClicked);
+            } else {
+                MoPubLog.w(ROUTER_TAG + "onAdEnd - VungleRouterListener is not found for Placement ID: " + placementReferenceId);
+            }
+        }
+
+        @Override
+        public void onAdStart(@NonNull String placementReferenceId) {
+            MoPubLog.d(ROUTER_TAG + "onAdStart - Placement ID: " + placementReferenceId);
+
+            VungleRouterListener targetListener = sVungleRouterListeners.get(placementReferenceId);
+            if (targetListener != null) {
+                targetListener.onAdStart(placementReferenceId);
+            } else {
+                MoPubLog.w(ROUTER_TAG + "onAdStart - VungleRouterListener is not found for Placement ID: " + placementReferenceId);
+            }
+        }
+
+        @Override
+        public void onUnableToPlayAd(@NonNull String placementReferenceId, String reason) {
+            MoPubLog.d(ROUTER_TAG + "onUnableToPlayAd - Placement ID: " + placementReferenceId);
+
+            VungleRouterListener targetListener = sVungleRouterListeners.get(placementReferenceId);
+            if (targetListener != null) {
+                targetListener.onUnableToPlayAd(placementReferenceId, reason);
+            } else {
+                MoPubLog.w(ROUTER_TAG + "onUnableToPlayAd - VungleRouterListener is not found for Placement ID: " + placementReferenceId);
+            }
+        }
+
+        @Override
+        public void onAdAvailabilityUpdate(@NonNull String placementReferenceId, boolean isAdAvailable) {
+            MoPubLog.d(ROUTER_TAG + "onAdAvailabilityUpdate - Placement ID: " + placementReferenceId);
+
+            VungleRouterListener targetListener = sVungleRouterListeners.get(placementReferenceId);
+            if (targetListener != null) {
+                targetListener.onAdAvailabilityUpdate(placementReferenceId, isAdAvailable);
+            } else {
+                MoPubLog.w(ROUTER_TAG + "onAdAvailabilityUpdate - VungleRouterListener is not found for Placement ID: " + placementReferenceId);
+            }
+        }
+    };
+}
diff --git a/extras/src/com/mopub/mobileads/VungleRouterListener.java b/extras/src/com/mopub/mobileads/VungleRouterListener.java
new file mode 100644
index 00000000..057a8af4
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/VungleRouterListener.java
@@ -0,0 +1,16 @@
+package com.mopub.mobileads;
+
+import android.support.annotation.NonNull;
+
+/**
+ * Certified with Vungle SDK 5.3.0
+ */
+public interface VungleRouterListener {
+    void onAdEnd(@NonNull String var1, boolean var2, boolean var3);
+
+    void onAdStart(@NonNull String var1);
+
+    void onUnableToPlayAd(@NonNull String var1, String var2);
+
+    void onAdAvailabilityUpdate(@NonNull String var1, boolean var2);
+}
diff --git a/extras/src/com/mopub/nativeads/FacebookAdRenderer.java b/extras/src/com/mopub/nativeads/FacebookAdRenderer.java
index 5a345081..90f636b3 100644
--- a/extras/src/com/mopub/nativeads/FacebookAdRenderer.java
+++ b/extras/src/com/mopub/nativeads/FacebookAdRenderer.java
@@ -19,8 +19,7 @@
  * Include this class if you want to use Facebook native video ads. This renderer handles Facebook
  * static and video native ads. This will automatically replace the main image view with the
  * Facebook MediaView that handles showing the main asset.
- * Please reference the Supported Mediation Partner page at http://bit.ly/2mqsuFH for the
- * latest version and ad format certifications.
+ * Certified with Facebook Audience Network 4.26.0
  */
 public class FacebookAdRenderer implements MoPubAdRenderer<FacebookNative.FacebookVideoEnabledNativeAd> {
     private final ViewBinder mViewBinder;
diff --git a/extras/src/com/mopub/nativeads/FacebookNative.java b/extras/src/com/mopub/nativeads/FacebookNative.java
index 9c87ec96..e8767cea 100644
--- a/extras/src/com/mopub/nativeads/FacebookNative.java
+++ b/extras/src/com/mopub/nativeads/FacebookNative.java
@@ -25,8 +25,7 @@
  * Video ads will only be shown if VIDEO_ENABLED is set to true or a server configuration
  * "video_enabled" flag is set to true. The server configuration will override the local
  * configuration.
- * Please reference the Supported Mediation Partner page at http://bit.ly/2mqsuFH for the
- * latest version and ad format certifications.
+ * Certified with Facebook Audience Network 4.26.0
  */
 public class FacebookNative extends CustomEventNative {
     private static final String PLACEMENT_ID_KEY = "placement_id";
@@ -133,16 +132,38 @@ private static void registerChildViewsForInteraction(final View view, final Nati
             return;
         }
 
+        final List<View> clickableViews = new ArrayList<>();
+        assembleChildViewsWithLimit(view, clickableViews, 10);
+
+        if (clickableViews.size() == 1) {
+            nativeAd.registerViewForInteraction(view);
+        } else {
+            nativeAd.registerViewForInteraction(view, clickableViews);
+        }
+    }
+
+    private static void assembleChildViewsWithLimit(final View view,
+            final List<View> clickableViews, final int limit) {
+        if (view == null) {
+            MoPubLog.d("View given is null. Ignoring");
+            return;
+        }
+
+        if (limit <= 0) {
+            MoPubLog.d("Depth limit reached; adding this view regardless of its type.");
+            clickableViews.add(view);
+            return;
+        }
+
         if (view instanceof ViewGroup && ((ViewGroup) view).getChildCount() > 0) {
             final ViewGroup vg = (ViewGroup) view;
-            final List<View> clickableViews = new ArrayList<>();
             for (int i = 0; i < vg.getChildCount(); i++) {
-                clickableViews.add(vg.getChildAt(i));
+                assembleChildViewsWithLimit(vg.getChildAt(i), clickableViews, limit - 1);
             }
-            nativeAd.registerViewForInteraction(view, clickableViews);
-        } else {
-            nativeAd.registerViewForInteraction(view);
+            return;
         }
+
+        clickableViews.add(view);
     }
 
     static class FacebookStaticNativeAd extends StaticNativeAd implements AdListener {
diff --git a/extras/src/com/mopub/nativeads/GooglePlayServicesAdRenderer.java b/extras/src/com/mopub/nativeads/GooglePlayServicesAdRenderer.java
index 4d5df2dd..3887c33d 100644
--- a/extras/src/com/mopub/nativeads/GooglePlayServicesAdRenderer.java
+++ b/extras/src/com/mopub/nativeads/GooglePlayServicesAdRenderer.java
@@ -27,7 +27,7 @@
  * The {@link GooglePlayServicesAdRenderer} class is used to render
  * GooglePlayServicesStaticNativeAds.
  *
- * Compatible with version 11.0.2 of the Google Play Services SDK.
+ * Compatible with version 11.4.0 of the Google Play Services SDK.
  */
 public class GooglePlayServicesAdRenderer implements MoPubAdRenderer<GooglePlayServicesNativeAd> {
 
diff --git a/extras/src/com/mopub/nativeads/GooglePlayServicesNative.java b/extras/src/com/mopub/nativeads/GooglePlayServicesNative.java
index 81d34885..7797c08c 100644
--- a/extras/src/com/mopub/nativeads/GooglePlayServicesNative.java
+++ b/extras/src/com/mopub/nativeads/GooglePlayServicesNative.java
@@ -22,7 +22,7 @@
 /**
  * The {@link GooglePlayServicesNative} class is used to load native Google mobile ads.
  *
- * Compatible with version 11.0.2 of the Google Play Services SDK.
+ * Compatible with version 11.4.0 of the Google Play Services SDK.
  */
 public class GooglePlayServicesNative extends CustomEventNative {
     protected static final String TAG = "MoPubToAdMobNative";
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index 3b683af2..963334ad 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.mopub.simpleadsdemo"
-      android:versionCode="55"
-      android:versionName="4.17.0">
+      android:versionCode="56"
+      android:versionName="4.18.0">
     <uses-sdk android:minSdkVersion="16"
               android:targetSdkVersion="24"/>
 
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index 60c67400..b9101ad4 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -4,24 +4,25 @@ repositories {
         dirs '../libs'
     }
     maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
+    maven { url 'https://maven.google.com' }
 }
 
 apply plugin: 'com.android.application'
 
 project.group = 'com.mopub'
 project.description = '''MoPub Sample App'''
-project.version = '4.17.0'
+project.version = '4.18.0'
 
 android {
-    compileSdkVersion 25
-    buildToolsVersion '25.0.2'
+    compileSdkVersion 26
+    buildToolsVersion '26.0.2'
     lintOptions { abortOnError false }
 
     defaultConfig {
-        versionCode 55
+        versionCode 56
         versionName version
         minSdkVersion 16
-        targetSdkVersion 25
+        targetSdkVersion 26
     }
 
     buildTypes {
@@ -56,8 +57,8 @@ android {
 }
 
 dependencies {
-    compile 'com.android.support:support-v4:25.3.1'
+    compile 'com.android.support:support-v4:26.1.0'
     compile 'com.google.android.gms:play-services-ads:9.4.0'
-    compile 'com.android.support:recyclerview-v7:25.3.1'
+    compile 'com.android.support:recyclerview-v7:26.1.0'
     compile project(':mopub-sdk')
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BrowserWebViewClient.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BrowserWebViewClient.java
index 33d94acb..e7fc2d0c 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BrowserWebViewClient.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BrowserWebViewClient.java
@@ -78,8 +78,6 @@ public void urlHandlingFailed(@NonNull String url,
     @Override
     public void onPageStarted(WebView view, String url, Bitmap favicon) {
         super.onPageStarted(view, url, favicon);
-        mMoPubBrowser.getForwardButton()
-                .setImageDrawable(UNRIGHT_ARROW.createDrawable(mMoPubBrowser));
     }
 
     @Override
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
index dee2664f..c154a387 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
@@ -13,7 +13,7 @@
 import static com.mopub.common.ExternalViewabilitySessionManager.ViewabilityVendor;
 
 public class MoPub {
-    public static final String SDK_VERSION = "4.17.0";
+    public static final String SDK_VERSION = "4.18.0";
 
     public enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
index 303f9539..59865d44 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
@@ -30,6 +30,8 @@
 import static com.mopub.common.util.Drawables.LEFT_ARROW;
 import static com.mopub.common.util.Drawables.REFRESH;
 import static com.mopub.common.util.Drawables.RIGHT_ARROW;
+import static com.mopub.common.util.Drawables.UNLEFT_ARROW;
+import static com.mopub.common.util.Drawables.UNRIGHT_ARROW;
 
 public class MoPubBrowser extends Activity {
     public static final String DESTINATION_URL_KEY = "URL";
@@ -220,8 +222,8 @@ private View getMoPubBrowserView() {
         innerLayout.setBackgroundDrawable(BACKGROUND.createDrawable(this));
         outerLayout.addView(innerLayout);
 
-        mBackButton = getButton(LEFT_ARROW.createDrawable(this));
-        mForwardButton = getButton(RIGHT_ARROW.createDrawable(this));
+        mBackButton = getButton(UNLEFT_ARROW.createDrawable(this));
+        mForwardButton = getButton(UNRIGHT_ARROW.createDrawable(this));
         mRefreshButton = getButton(REFRESH.createDrawable(this));
         mCloseButton = getButton(CLOSE.createDrawable(this));
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
index ca5009e8..f9ac664f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
@@ -9,6 +9,7 @@
 import com.mopub.common.util.AsyncTasks;
 
 import java.io.IOException;
+import java.io.InputStream;
 import java.net.HttpURLConnection;
 import java.net.URI;
 import java.net.URISyntaxException;
@@ -91,6 +92,14 @@ private String getRedirectLocation(@NonNull final String urlString) throws IOExc
             return resolveRedirectLocation(urlString, httpUrlConnection);
         } finally {
             if (httpUrlConnection != null) {
+                final InputStream is = httpUrlConnection.getInputStream();
+                if (is != null) {
+                    try {
+                        is.close();
+                    } catch (IOException e) {
+                        MoPubLog.d("IOException when closing httpUrlConnection. Ignoring.");
+                    }
+                }
                 httpUrlConnection.disconnect();
             }
         }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
index c16c0085..b65913eb 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
@@ -5,6 +5,7 @@
 import android.support.annotation.Nullable;
 import android.view.MotionEvent;
 import android.view.View;
+import android.webkit.WebSettings;
 
 import com.mopub.common.AdReport;
 import com.mopub.common.Constants;
@@ -48,6 +49,24 @@ public void loadUrl(@Nullable final String url) {
         MoPubLog.d("Loading url: " + url);
     }
 
+    @Override
+    public void stopLoading() {
+        if (mIsDestroyed) {
+            MoPubLog.w(BaseHtmlWebView.class.getSimpleName() + "#stopLoading() called after destroy()");
+            return;
+        }
+
+        final WebSettings webSettings = getSettings();
+        if (webSettings == null) {
+            MoPubLog.w(BaseHtmlWebView.class.getSimpleName() + "#getSettings() returned null");
+            return;
+        }
+
+        webSettings.setJavaScriptEnabled(false);
+        super.stopLoading();
+        webSettings.setJavaScriptEnabled(true);
+    }
+
     private void disableScrollingAndZoom() {
         setHorizontalScrollBarEnabled(false);
         setHorizontalScrollbarOverlay(false);
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
index 8bc63db5..eda4eea5 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
@@ -4,9 +4,11 @@
 import android.graphics.Bitmap;
 import android.net.Uri;
 import android.support.annotation.NonNull;
+import android.webkit.WebSettings;
 import android.webkit.WebView;
 import android.webkit.WebViewClient;
 
+import com.mopub.common.Preconditions;
 import com.mopub.common.UrlAction;
 import com.mopub.common.UrlHandler;
 import com.mopub.common.logging.MoPubLog;
@@ -34,8 +36,8 @@
 
     private final Context mContext;
     private final String mDspCreativeId;
-    private HtmlWebViewListener mHtmlWebViewListener;
-    private BaseHtmlWebView mHtmlWebView;
+    private final HtmlWebViewListener mHtmlWebViewListener;
+    private final BaseHtmlWebView mHtmlWebView;
     private final String mClickthroughUrl;
     private final String mRedirectUrl;
 
@@ -83,10 +85,8 @@ public void onClose() {
 
                     @Override
                     public void onFailLoad() {
-                        mHtmlWebView.getSettings().setJavaScriptEnabled(false);
                         mHtmlWebView.stopLoading();
                         mHtmlWebViewListener.onFailed(UNSPECIFIED);
-                        mHtmlWebView.getSettings().setJavaScriptEnabled(true);
                     }
                 })
                 .build().handleUrl(mContext, url, mHtmlWebView.wasClicked());
diff --git a/mopub-sdk/mopub-sdk-native-static/build.gradle b/mopub-sdk/mopub-sdk-native-static/build.gradle
index 8ac48763..ba206ef6 100644
--- a/mopub-sdk/mopub-sdk-native-static/build.gradle
+++ b/mopub-sdk/mopub-sdk-native-static/build.gradle
@@ -2,7 +2,7 @@ apply from: '../shared-build.gradle'
 
 dependencies {
     compile project(':mopub-sdk:mopub-sdk-base')
-    compile 'com.android.support:recyclerview-v7:25.3.1'
+    compile 'com.android.support:recyclerview-v7:26.1.0'
 }
 
 project.description = 'MoPub Android SDK - Native Static'
diff --git a/mopub-sdk/shared-build.gradle b/mopub-sdk/shared-build.gradle
index d1689a5a..d5d31f36 100644
--- a/mopub-sdk/shared-build.gradle
+++ b/mopub-sdk/shared-build.gradle
@@ -7,22 +7,23 @@ repositories {
         dirs project(':mopub-sdk').file('../libs')
     }
     maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
+    maven { url 'https://maven.google.com' }
 }
 
 project.group = 'com.mopub'
-project.version = '4.17.0'
+project.version = '4.18.0'
 
 android {
-    compileSdkVersion 25
-    buildToolsVersion '25.0.2'
+    compileSdkVersion 26
+    buildToolsVersion '26.0.2'
     lintOptions { abortOnError false }
     useLibrary 'org.apache.http.legacy'
 
     defaultConfig {
-        versionCode 55
+        versionCode 56
         versionName version
         minSdkVersion 16
-        targetSdkVersion 25
+        targetSdkVersion 26
         consumerProguardFiles project(':mopub-sdk').file('proguard.txt')
     }
 
@@ -75,6 +76,6 @@ android {
 }
 
 dependencies {
-    compile 'com.android.support:support-v4:25.3.1'
-    compile 'com.android.support:support-annotations:25.3.1'
+    compile 'com.android.support:support-v4:26.1.0'
+    compile 'com.android.support:support-annotations:26.1.0'
 }
diff --git a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
index 1c5c87c1..6b29df7a 100644
--- a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
+++ b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
@@ -1,3 +1,3 @@
 fabric-identifier=com.mopub.sdk.android:mopub
-fabric-version=4.17.0+kit
+fabric-version=4.18.0+kit
 fabric-build-type=source
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
index b4f51bb4..c0bee0bb 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
@@ -6,7 +6,6 @@
 import android.content.Intent;
 import android.content.pm.ResolveInfo;
 import android.net.Uri;
-import android.webkit.WebSettings;
 import android.webkit.WebView;
 
 import com.mopub.common.MoPubBrowser;
@@ -72,17 +71,12 @@ public void shouldOverrideUrlLoading_withMoPubClose_shouldCallAdDidClose() throw
     }
 
     @Test
-    public void shouldOverrideUrlLoading_withMoPubFailLoad_shouldCallLoadFailUrl_shouldStopCurrentLoad_shouldStopAndRestartJavascriptExecution() throws Exception {
-        WebSettings webSettings = mock(WebSettings.class);
-        when(htmlWebView.getSettings()).thenReturn(webSettings);
-
+    public void shouldOverrideUrlLoading_withMoPubFailLoad_shouldCallLoadFailUrl_shouldStopCurrentLoad() throws Exception {
         boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, "mopub://failLoad");
 
         assertThat(didOverrideUrl).isTrue();
         verify(htmlWebViewListener).onFailed(UNSPECIFIED);
         verify(htmlWebView).stopLoading();
-        verify(webSettings).setJavaScriptEnabled(false);
-        verify(webSettings).setJavaScriptEnabled(true);
     }
 
     @Test
