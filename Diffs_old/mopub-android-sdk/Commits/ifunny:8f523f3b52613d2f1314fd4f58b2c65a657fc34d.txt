diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBannerWebView.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBannerWebView.java
index 38fd08f8..22c7061f 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBannerWebView.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBannerWebView.java
@@ -1,50 +1,64 @@
 package com.mopub.mobileads;
 
 import android.content.Context;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
 
 import com.mopub.common.AdReport;
+import com.mopub.mobileads.events.MopubAdCreativeId;
 
 import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
 
 public class HtmlBannerWebView extends BaseHtmlWebView {
-    public static final String EXTRA_AD_CLICK_DATA = "com.mopub.intent.extra.AD_CLICK_DATA";
-
-    public HtmlBannerWebView(Context context, AdReport adReport) {
-        super(context, adReport);
-    }
-
-    public void init(CustomEventBannerListener customEventBannerListener, boolean isScrollable, String redirectUrl, String clickthroughUrl, String dspCreativeId) {
-        super.init(isScrollable);
-
-        setWebViewClient(new HtmlWebViewClient(new HtmlBannerWebViewListener(customEventBannerListener), this, clickthroughUrl, redirectUrl, dspCreativeId));
-    }
-
-    static class HtmlBannerWebViewListener implements HtmlWebViewListener {
-        private final CustomEventBannerListener mCustomEventBannerListener;
-
-        public HtmlBannerWebViewListener(CustomEventBannerListener customEventBannerListener) {
-            mCustomEventBannerListener = customEventBannerListener;
-        }
-
-        @Override
-        public void onLoaded(BaseHtmlWebView htmlWebView) {
-            mCustomEventBannerListener.onBannerLoaded(htmlWebView, null);
-        }
-
-        @Override
-        public void onFailed(MoPubErrorCode errorCode) {
-            mCustomEventBannerListener.onBannerFailed(errorCode);
-        }
-
-        @Override
-        public void onClicked() {
-            mCustomEventBannerListener.onBannerClicked();
-        }
-
-        @Override
-        public void onCollapsed() {
-            mCustomEventBannerListener.onBannerCollapsed();
-        }
-
-    }
+	public static final String EXTRA_AD_CLICK_DATA = "com.mopub.intent.extra.AD_CLICK_DATA";
+	
+	public HtmlBannerWebView(Context context, AdReport adReport) {
+		super(context, adReport);
+	}
+	
+	public void init(CustomEventBannerListener customEventBannerListener, boolean isScrollable, String redirectUrl, String clickthroughUrl,
+	                 String dspCreativeId) {
+		super.init(isScrollable);
+		
+		setWebViewClient(
+				new HtmlWebViewClient(new HtmlBannerWebViewListener(customEventBannerListener, dspCreativeId), this, clickthroughUrl,
+						redirectUrl,
+						dspCreativeId));
+	}
+	
+	static class HtmlBannerWebViewListener implements HtmlWebViewListener {
+		private final CustomEventBannerListener mCustomEventBannerListener;
+		@Nullable
+		private final String mDspCreativeId;
+		
+		public HtmlBannerWebViewListener(CustomEventBannerListener customEventBannerListener, @Nullable String dspCreativeId) {
+			mCustomEventBannerListener = customEventBannerListener;
+			mDspCreativeId = dspCreativeId;
+		}
+		
+		@Override
+		public void onLoaded(BaseHtmlWebView htmlWebView) {
+			MopubAdCreativeId mopubAdCreativeId = null;
+			if (!TextUtils.isEmpty(mDspCreativeId)) {
+				mopubAdCreativeId = new MopubAdCreativeId(mDspCreativeId);
+			}
+			mCustomEventBannerListener.onBannerLoaded(htmlWebView, mopubAdCreativeId);
+		}
+		
+		@Override
+		public void onFailed(MoPubErrorCode errorCode) {
+			mCustomEventBannerListener.onBannerFailed(errorCode);
+		}
+		
+		@Override
+		public void onClicked() {
+			mCustomEventBannerListener.onBannerClicked();
+		}
+		
+		@Override
+		public void onCollapsed() {
+			mCustomEventBannerListener.onBannerCollapsed();
+		}
+		
+	}
 }
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java
index 0f876452..211e5d66 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java
@@ -3,6 +3,7 @@
 import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.text.TextUtils;
 import android.view.View;
 
 import com.mopub.common.AdReport;
@@ -10,6 +11,7 @@
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.AdViewController;
 import com.mopub.mobileads.CustomEventBanner;
+import com.mopub.mobileads.events.MopubAdCreativeId;
 import com.mopub.mobileads.factories.MraidControllerFactory;
 import com.mopub.mraid.MraidController.MraidListener;
 
@@ -20,100 +22,104 @@
 import static com.mopub.mobileads.MoPubErrorCode.MRAID_LOAD_ERROR;
 
 class MraidBanner extends CustomEventBanner {
-
-    @Nullable private MraidController mMraidController;
-    @Nullable private CustomEventBannerListener mBannerListener;
-    @Nullable private MraidWebViewDebugListener mDebugListener;
-
-    @Override
-    protected void loadBanner(@NonNull Context context,
-                    @NonNull CustomEventBannerListener customEventBannerListener,
-                    @NonNull Map<String, Object> localExtras,
-                    @NonNull Map<String, String> serverExtras) {
-        mBannerListener = customEventBannerListener;
-
-        String htmlData;
-        if (extrasAreValid(serverExtras)) {
-            htmlData = serverExtras.get(HTML_RESPONSE_BODY_KEY);
-        } else {
-            mBannerListener.onBannerFailed(MRAID_LOAD_ERROR);
-            return;
-        }
-
-        try {
-            AdReport adReport = (AdReport) localExtras.get(AD_REPORT_KEY);
-            mMraidController = MraidControllerFactory.create(
-                    context, adReport, PlacementType.INLINE);
-        } catch (ClassCastException e) {
-            MoPubLog.w("MRAID banner creating failed:", e);
-            mBannerListener.onBannerFailed(MRAID_LOAD_ERROR);
-            return;
-        }
-
-        mMraidController.setDebugListener(mDebugListener);
-        mMraidController.setMraidListener(new MraidListener() {
-            @Override
-            public void onLoaded(View view) {
-                // Honoring the server dimensions forces the WebView to be the size of the banner
-                AdViewController.setShouldHonorServerDimensions(view);
-                mBannerListener.onBannerLoaded(view, null);
-            }
-
-            @Override
-            public void onFailedToLoad() {
-                mBannerListener.onBannerFailed(MRAID_LOAD_ERROR);
-            }
-
-            @Override
-            public void onExpand() {
-                mBannerListener.onBannerExpanded();
-                mBannerListener.onBannerClicked();
-            }
-
-            @Override
-            public void onOpen() {
-                mBannerListener.onBannerClicked();
-            }
-
-            @Override
-            public void onClose() {
-                mBannerListener.onBannerCollapsed();
-            }
-
-            @Override
-            public void onDirectClick() {
-                mBannerListener.onBannerClicked();
-            }
-        });
-        mMraidController.loadContent(htmlData);
-    }
-
-    @Override
-    protected void onInvalidate() {
-        super.onInvalidate();
-        if (mMraidController != null) {
-            mMraidController.setMraidListener(null);
-            mMraidController.destroy();
-        }
-    }
-
-    private boolean extrasAreValid(Map<String, String> serverExtras) {
-        return serverExtras.containsKey(HTML_RESPONSE_BODY_KEY);
-    }
-    
-    @Override
-    protected void onPause() {
-	    if (mMraidController != null) {
-		    mMraidController.onPause();
-	    }
-    }
-    
-    @Override
-    protected void onResume() {
-	    if (mMraidController != null) {
-		    mMraidController.onResume();
-	    }
-    }
+	
+	@Nullable private MraidController mMraidController;
+	@Nullable private CustomEventBannerListener mBannerListener;
+	@Nullable private MraidWebViewDebugListener mDebugListener;
+	
+	@Override
+	protected void loadBanner(@NonNull Context context,
+	                          @NonNull CustomEventBannerListener customEventBannerListener,
+	                          @NonNull Map<String, Object> localExtras,
+	                          @NonNull Map<String, String> serverExtras) {
+		mBannerListener = customEventBannerListener;
+		
+		String htmlData;
+		if (extrasAreValid(serverExtras)) {
+			htmlData = serverExtras.get(HTML_RESPONSE_BODY_KEY);
+		} else {
+			mBannerListener.onBannerFailed(MRAID_LOAD_ERROR);
+			return;
+		}
+		final AdReport adReport;
+		try {
+			adReport = (AdReport) localExtras.get(AD_REPORT_KEY);
+			mMraidController = MraidControllerFactory.create(
+					context, adReport, PlacementType.INLINE);
+		} catch (ClassCastException e) {
+			MoPubLog.w("MRAID banner creating failed:", e);
+			mBannerListener.onBannerFailed(MRAID_LOAD_ERROR);
+			return;
+		}
+		
+		mMraidController.setDebugListener(mDebugListener);
+		mMraidController.setMraidListener(new MraidListener() {
+			@Override
+			public void onLoaded(View view) {
+				// Honoring the server dimensions forces the WebView to be the size of the banner
+				AdViewController.setShouldHonorServerDimensions(view);
+				MopubAdCreativeId creativeId = null;
+				if (adReport != null && !TextUtils.isEmpty(adReport.getDspCreativeId())) {
+					creativeId = new MopubAdCreativeId(adReport.getDspCreativeId());
+				}
+				mBannerListener.onBannerLoaded(view, creativeId);
+			}
+			
+			@Override
+			public void onFailedToLoad() {
+				mBannerListener.onBannerFailed(MRAID_LOAD_ERROR);
+			}
+			
+			@Override
+			public void onExpand() {
+				mBannerListener.onBannerExpanded();
+				mBannerListener.onBannerClicked();
+			}
+			
+			@Override
+			public void onOpen() {
+				mBannerListener.onBannerClicked();
+			}
+			
+			@Override
+			public void onClose() {
+				mBannerListener.onBannerCollapsed();
+			}
+			
+			@Override
+			public void onDirectClick() {
+				mBannerListener.onBannerClicked();
+			}
+		});
+		mMraidController.loadContent(htmlData);
+	}
+	
+	@Override
+	protected void onInvalidate() {
+		super.onInvalidate();
+		if (mMraidController != null) {
+			mMraidController.setMraidListener(null);
+			mMraidController.destroy();
+		}
+	}
+	
+	private boolean extrasAreValid(Map<String, String> serverExtras) {
+		return serverExtras.containsKey(HTML_RESPONSE_BODY_KEY);
+	}
+	
+	@Override
+	protected void onPause() {
+		if (mMraidController != null) {
+			mMraidController.onPause();
+		}
+	}
+	
+	@Override
+	protected void onResume() {
+		if (mMraidController != null) {
+			mMraidController.onResume();
+		}
+	}
 	
 	@Override
 	protected void onStop() {
@@ -123,10 +129,10 @@ protected void onStop() {
 	}
 	
 	@VisibleForTesting
-    public void setDebugListener(@Nullable MraidWebViewDebugListener debugListener) {
-        mDebugListener = debugListener;
-        if (mMraidController != null) {
-            mMraidController.setDebugListener(debugListener);
-        }
-    }
+	public void setDebugListener(@Nullable MraidWebViewDebugListener debugListener) {
+		mDebugListener = debugListener;
+		if (mMraidController != null) {
+			mMraidController.setDebugListener(debugListener);
+		}
+	}
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/events/MopubAdCreativeId.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/events/MopubAdCreativeId.java
new file mode 100644
index 00000000..2cb4bd8e
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/events/MopubAdCreativeId.java
@@ -0,0 +1,21 @@
+package com.mopub.mobileads.events;
+
+/**
+ * Created by Shad on 30/09/2017.
+ */
+
+public class MopubAdCreativeId implements AdCreativeIdBundle {
+	
+	private String mDspCreativeID;
+	
+	public MopubAdCreativeId(final String dspCreativeID) {
+		mDspCreativeID = dspCreativeID;
+	}
+	
+	
+	@Override
+	public String toStringReport() {
+		return String.format("DSPCreativeId=%s", mDspCreativeID);
+	}
+	
+}
