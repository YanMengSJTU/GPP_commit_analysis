diff --git a/CHANGELOG.md b/CHANGELOG.md
index e88b6816..b8b55c9a 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,21 @@
+## Version 4.9.0 (September 1, 2016)
+- Removed the full SDK bundle.
+- Removed Eclipse support.
+- Removed InMobi custom events from extras.
+- Deprecated rewarded video calls from `MoPub.java` and moved them to `MoPubRewardedVideos.java`.
+  - For example, `MoPub#loadRewardedVideo` is deprecated in favor of `MoPubRewardedVideos#loadRewardedVideo`.
+- Bug fixes.
+
+**Modular SDK**
+ - Added the ability to specify which ad formats to include as dependencies (to decrease the overall footprint of the MoPub SDK in your app).
+ - Default behavior remains unchanged and includes access to all ad formats.
+ - **Note:** Maven builds from source are currently unstable and will be reinstated in a future release. Maven developers can still pull the MoPub SDK AAR from JCenter.
+
+## Version 4.8.0 (August 1, 2016)
+- Changed the behavior of `MoPubInterstitial#load()` while an interstitial is loading or has been successfully loaded. Previously, this would discard the currently-caching or cached interstitial -- now the interstitial will be unaffected and will remain in the cache.
+- `MoPubInterstitial`s can now be shown only once per successful ad load.
+- Modified a number of Native Ads APIs (manual integration) to accept Context instead of Activity. Affected classes/methods include: `MoPubNative`, `AdapterHelper`, `CustomEventNative#loadNativeAd()`, and `MoPubAdRenderer#createAdView()`.
+
 #### Version 4.7.1 (June 10, 2016)
 - Fixed deeplink bug.
 
diff --git a/README.md b/README.md
index 50f2f040..5a7986f1 100644
--- a/README.md
+++ b/README.md
@@ -27,7 +27,48 @@ The MoPub SDK is available via:
     }
 
     dependencies {
-        compile('com.mopub:mopub-sdk:4.7.0@aar') {
+        compile('com.mopub:mopub-sdk:4.9.0@aar') {
+            transitive = true
+        }
+    }
+    ```
+
+    ***SDK Modularization***
+
+    With the modular SDK, you can choose to include specific formats to decrease overall SDK footprint in your app. To do so, include the line for any combination of components that you want in your `build.gradle` file as follows:
+
+    ```groovy
+    repositories {
+        // ... other project repositories
+        jcenter()
+    }
+    // ...
+
+    dependencies {
+        // ... other project dependencies
+
+        // For banners
+        compile('com.mopub:mopub-sdk-banner:4.9.0@aar') {
+            transitive = true
+        }
+        
+        // For interstitials
+        compile('com.mopub:mopub-sdk-interstitial:4.9.0@aar') {
+            transitive = true
+        }
+
+        // For rewarded videos. This will automatically also include interstitials
+        compile('com.mopub:mopub-sdk-rewardedvideo:4.9.0@aar') {
+            transitive = true
+        }
+
+        // For native static (images).
+        compile('com.mopub:mopub-sdk-native-static:4.9.0@aar') {
+            transitive = true
+        }
+
+        // For native video. This will automatically also include native static
+        compile('com.mopub:mopub-sdk-native-video:4.9.0@aar') {
             transitive = true
         }
     }
@@ -39,14 +80,7 @@ The MoPub SDK is available via:
 
     The MoPub SDK is also distributed as zipped source code that you can include in your application.  MoPub provides two prepackaged archives of source code:
 
-    **[MoPub Android Full SDK.zip](http://bit.ly/YUdU9v)**  
-    _Includes everything you need to serve MoPub ads *and* built-in support for Millennial Media third party ad network - [Millennial Media](http://www.millennialmedia.com/) - including the required third party binaries._
-    
-    _**Note:** Millennial Media has updated their minimum supported version of Android to 4.1 (API level 16+). The MoPub Android Full SDK manifest and build.gradle files have been updated accordingly._
-    
-    _**Note:** Millennial Media has deprecated support for Ant/Eclipse; migrating users should use the MoPub Android base SDK and follow [Millennial's Ant/Eclipse Integration Guide](http://docs.millennialmedia.com/android-ad-sdk/ant-eclipse-integration-guide.html)._
-    
-    **[MoPub Android Base SDK.zip](http://bit.ly/YUdWhH)**  
+    **[MoPub Android SDK.zip](http://bit.ly/YUdWhH)**  
     _Includes everything you need to serve MoPub ads.  No third party ad networks are included._
     
     **For additional integration instructions, please see the [Getting Started guide](https://github.com/mopub/mopub-android-sdk/wiki/Getting-Started#requirements-and-dependencies).**
@@ -62,7 +96,17 @@ The MoPub SDK is available via:
 ## New in this Version
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for a complete list of additions, fixes, and enhancements in the latest release.
 
-- Fixed deeplink bug.
+- Removed the full SDK bundle.
+- Removed Eclipse support.
+- Removed InMobi custom events from extras.
+- Deprecated rewarded video calls from `MoPub.java` and moved them to `MoPubRewardedVideos.java`.
+  - For example, `MoPub#loadRewardedVideo` is deprecated in favor of `MoPubRewardedVideos#loadRewardedVideo`.
+- Bug fixes.
+
+**Modular SDK**
+ - Added the ability to specify which ad formats to include as dependencies (to decrease the overall footprint of the MoPub SDK in your app).
+ - Default behavior remains unchanged and includes access to all ad formats.
+ - **Note:** Maven builds from source are currently unstable and will be reinstated in a future release. Maven developers can still pull the MoPub SDK AAR from JCenter.
 
 ## Requirements
 
diff --git a/build.gradle b/build.gradle
index bb85fd31..6a8de973 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,14 +1,14 @@
 buildscript {
     repositories {
-        mavenCentral()
         jcenter()
     }
 
     dependencies {
         classpath 'com.android.tools.build:gradle:2.1.3'
+        classpath 'com.novoda:bintray-release:0.3.4'
     }
 }
 
 task wrapper(type: Wrapper) {
-    gradleVersion = '2.5'
+    gradleVersion = '2.14.1'
 }
diff --git a/extras/README b/extras/README
deleted file mode 100644
index 5cbc94d1..00000000
--- a/extras/README
+++ /dev/null
@@ -1,9 +0,0 @@
-Google AdSense SDK
-==================
-Although the AdSense SDK for Android is deprecated, you can support it by doing the following:
-
-1) Copy AdSenseAdapter.java under the extras/ folder to mopub-android-sdk/src/com/mopub/mobileads
-2) Place the Google AdSense SDK in mopub-android-sdk/libs
-3) Add GoogleAdView.jar to the Java Build Path in the Properties section of mopub-android-sdk.
-
-*NOTE: At this time, Google does not allow distribution of GoogleAdView.jar so you will need to get that file from Google
diff --git a/extras/src/com/mopub/nativeads/FacebookAdRenderer.java b/extras/src/com/mopub/nativeads/FacebookAdRenderer.java
index 72e87349..b27b883f 100644
--- a/extras/src/com/mopub/nativeads/FacebookAdRenderer.java
+++ b/extras/src/com/mopub/nativeads/FacebookAdRenderer.java
@@ -1,6 +1,6 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
+import android.content.Context;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -20,7 +20,8 @@
  * static and video native ads. This will automatically replace the main image view with the
  * Facebook MediaView that handles showing the main asset.
  */
-public class FacebookAdRenderer implements MoPubAdRenderer<FacebookNative.FacebookVideoEnabledNativeAd> {
+public class FacebookAdRenderer
+        implements MoPubAdRenderer<com.mopub.nativeads.FacebookNative.FacebookVideoEnabledNativeAd> {
     private final ViewBinder mViewBinder;
 
     // This is used instead of View.setTag, which causes a memory leak in 2.3
@@ -38,9 +39,9 @@ public FacebookAdRenderer(final ViewBinder viewBinder) {
     }
 
     @Override
-    public View createAdView(final Activity activity, final ViewGroup parent) {
+    public View createAdView(final Context context, final ViewGroup parent) {
         final View adView = LayoutInflater
-                .from(activity)
+                .from(context)
                 .inflate(mViewBinder.layoutId, parent, false);
         final View mainImageView = adView.findViewById(mViewBinder.mainImageId);
         if (mainImageView == null) {
@@ -72,7 +73,7 @@ public View createAdView(final Activity activity, final ViewGroup parent) {
             mainImageView.setVisibility(View.GONE);
         }
 
-        final MediaView mediaView = new MediaView(activity);
+        final MediaView mediaView = new MediaView(context);
         ViewGroup mainImageParent = (ViewGroup) mainImageView.getParent();
         int mainImageIndex = mainImageParent.indexOfChild(mainImageView);
         mainImageParent.addView(mediaView, mainImageIndex + 1, mediaViewLayoutParams);
@@ -81,7 +82,7 @@ public View createAdView(final Activity activity, final ViewGroup parent) {
 
     @Override
     public void renderAdView(final View view,
-            final FacebookNative.FacebookVideoEnabledNativeAd facebookVideoEnabledNativeAd) {
+            final com.mopub.nativeads.FacebookNative.FacebookVideoEnabledNativeAd facebookVideoEnabledNativeAd) {
         FacebookNativeViewHolder facebookNativeViewHolder = mViewHolderMap.get(view);
         if (facebookNativeViewHolder == null) {
             facebookNativeViewHolder = FacebookNativeViewHolder.fromViewBinder(view, mViewBinder);
@@ -98,11 +99,11 @@ public void renderAdView(final View view,
     @Override
     public boolean supports(final BaseNativeAd nativeAd) {
         Preconditions.checkNotNull(nativeAd);
-        return nativeAd instanceof FacebookNative.FacebookVideoEnabledNativeAd;
+        return nativeAd instanceof com.mopub.nativeads.FacebookNative.FacebookVideoEnabledNativeAd;
     }
 
     private void update(final FacebookNativeViewHolder facebookNativeViewHolder,
-            final FacebookNative.FacebookVideoEnabledNativeAd nativeAd) {
+            final com.mopub.nativeads.FacebookNative.FacebookVideoEnabledNativeAd nativeAd) {
         final ImageView mainImageView = facebookNativeViewHolder.getMainImageView();
         NativeRendererHelper.addTextView(facebookNativeViewHolder.getTitleView(),
                 nativeAd.getTitle());
diff --git a/extras/src/com/mopub/nativeads/FacebookNative.java b/extras/src/com/mopub/nativeads/FacebookNative.java
index ab951a6d..8faa9268 100644
--- a/extras/src/com/mopub/nativeads/FacebookNative.java
+++ b/extras/src/com/mopub/nativeads/FacebookNative.java
@@ -1,6 +1,5 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
 import android.content.Context;
 import android.view.View;
 
@@ -47,7 +46,7 @@
 
     // CustomEventNative implementation
     @Override
-    protected void loadNativeAd(final Activity activity,
+    protected void loadNativeAd(final Context context,
             final CustomEventNativeListener customEventNativeListener,
             final Map<String, Object> localExtras,
             final Map<String, String> serverExtras) {
@@ -75,12 +74,12 @@ protected void loadNativeAd(final Activity activity,
         if (shouldUseVideoEnabledNativeAd(sIsVideoRendererAvailable, videoEnabledString,
                 videoEnabledFromServer)) {
             final FacebookVideoEnabledNativeAd facebookVideoEnabledNativeAd =
-                    new FacebookVideoEnabledNativeAd(activity,
-                            new NativeAd(activity, placementId), customEventNativeListener);
+                    new FacebookVideoEnabledNativeAd(context,
+                            new NativeAd(context, placementId), customEventNativeListener);
             facebookVideoEnabledNativeAd.loadAd();
         } else {
             final FacebookStaticNativeAd facebookStaticNativeAd = new FacebookStaticNativeAd(
-                    activity, new NativeAd(activity, placementId), customEventNativeListener);
+                    context, new NativeAd(context, placementId), customEventNativeListener);
             facebookStaticNativeAd.loadAd();
         }
     }
diff --git a/extras/src/com/mopub/nativeads/InMobiNative.java b/extras/src/com/mopub/nativeads/InMobiNative.java
deleted file mode 100644
index 0c0c7a04..00000000
--- a/extras/src/com/mopub/nativeads/InMobiNative.java
+++ /dev/null
@@ -1,230 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.util.Log;
-import android.view.View;
-import android.view.ViewGroup;
-
-import com.inmobi.commons.InMobi;
-import com.inmobi.monetization.IMErrorCode;
-import com.inmobi.monetization.IMNative;
-import com.inmobi.monetization.IMNativeListener;
-import com.mopub.common.logging.MoPubLog;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.json.JSONTokener;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-
-import static com.mopub.common.util.Json.getJsonValue;
-import static com.mopub.common.util.Numbers.parseDouble;
-import static com.mopub.nativeads.NativeImageHelper.preCacheImages;
-
-/*
- * Tested with InMobi SDK 4.4.1
- */
-class InMobiNative extends CustomEventNative {
-    private static final String APP_ID_KEY = "app_id";
-
-    // CustomEventNative implementation
-    @Override
-    protected void loadNativeAd(final Activity activity,
-            final CustomEventNativeListener customEventNativeListener,
-            final Map<String, Object> localExtras,
-            final Map<String, String> serverExtras) {
-
-        final String appId;
-        if (extrasAreValid(serverExtras)) {
-            appId = serverExtras.get(APP_ID_KEY);
-        } else {
-            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        InMobi.initialize(activity, appId);
-        final InMobiStaticNativeAd inMobiStaticNativeAd =
-                new InMobiStaticNativeAd(activity,
-                        new ImpressionTracker(activity),
-                        new NativeClickHandler(activity),
-                        customEventNativeListener);
-        inMobiStaticNativeAd.setIMNative(new IMNative(inMobiStaticNativeAd));
-        inMobiStaticNativeAd.loadAd();
-    }
-
-    private boolean extrasAreValid(final Map<String, String> serverExtras) {
-        final String placementId = serverExtras.get(APP_ID_KEY);
-        return (placementId != null && placementId.length() > 0);
-    }
-
-    static class InMobiStaticNativeAd extends StaticNativeAd implements IMNativeListener {
-        static final int IMPRESSION_MIN_TIME_VIEWED = 0;
-
-        // Modifiable keys
-        static final String TITLE = "title";
-        static final String DESCRIPTION = "description";
-        static final String SCREENSHOTS = "screenshots";
-        static final String ICON = "icon";
-        static final String LANDING_URL = "landing_url";
-        static final String CTA = "cta";
-        static final String RATING = "rating";
-
-        // Constant keys
-        static final String URL = "url";
-
-        private final Context mContext;
-        private final CustomEventNativeListener mCustomEventNativeListener;
-        private final ImpressionTracker mImpressionTracker;
-        private final NativeClickHandler mNativeClickHandler;
-        private IMNative mImNative;
-
-        InMobiStaticNativeAd(final Context context,
-                final ImpressionTracker impressionTracker,
-                final NativeClickHandler nativeClickHandler,
-                final CustomEventNativeListener customEventNativeListener) {
-            mContext = context.getApplicationContext();
-            mImpressionTracker = impressionTracker;
-            mNativeClickHandler = nativeClickHandler;
-            mCustomEventNativeListener = customEventNativeListener;
-        }
-
-        void setIMNative(final IMNative imNative) {
-            mImNative = imNative;
-        }
-
-        void loadAd() {
-            mImNative.loadAd();
-        }
-
-        // IMNativeListener implementation
-        @Override
-        public void onNativeRequestSucceeded(final IMNative imNative) {
-            if (imNative == null) {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
-                return;
-            }
-
-            try {
-                parseJson(imNative);
-            } catch (JSONException e) {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.INVALID_RESPONSE);
-                return;
-            }
-
-            final List<String> imageUrls = new ArrayList<String>();
-            final String mainImageUrl = getMainImageUrl();
-            if (mainImageUrl != null) {
-                imageUrls.add(mainImageUrl);
-            }
-
-            final String iconUrl = getIconImageUrl();
-            if (iconUrl != null) {
-                imageUrls.add(iconUrl);
-            }
-
-            preCacheImages(mContext, imageUrls, new NativeImageHelper.ImageListener() {
-                @Override
-                public void onImagesCached() {
-                    mCustomEventNativeListener.onNativeAdLoaded(InMobiStaticNativeAd.this);
-                }
-
-                @Override
-                public void onImagesFailedToCache(NativeErrorCode errorCode) {
-                    mCustomEventNativeListener.onNativeAdFailed(errorCode);
-                }
-            });
-        }
-
-        @Override
-        public void onNativeRequestFailed(final IMErrorCode errorCode) {
-            if (errorCode == IMErrorCode.INVALID_REQUEST) {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_REQUEST);
-            } else if (errorCode == IMErrorCode.INTERNAL_ERROR || errorCode == IMErrorCode.NETWORK_ERROR) {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
-            } else if (errorCode == IMErrorCode.NO_FILL) {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_NO_FILL);
-            } else {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
-            }
-        }
-
-        // Lifecycle Handlers
-        @Override
-        public void prepare(final View view) {
-            if (view != null && view instanceof ViewGroup) {
-                mImNative.attachToView((ViewGroup) view);
-            } else if (view != null && view.getParent() instanceof ViewGroup) {
-                mImNative.attachToView((ViewGroup) view.getParent());
-            } else {
-                Log.e("MoPub", "InMobi did not receive ViewGroup to attachToView, unable to record impressions");
-            }
-            mImpressionTracker.addView(view, this);
-            mNativeClickHandler.setOnClickListener(view, this);
-        }
-
-        @Override
-        public void clear(final View view) {
-            mImpressionTracker.removeView(view);
-            mNativeClickHandler.clearOnClickListener(view);
-        }
-
-        @Override
-        public void destroy() {
-            mImNative.detachFromView();
-            mImpressionTracker.destroy();
-        }
-
-        // Event Handlers
-        @Override
-        public void recordImpression(final View view) {
-            notifyAdImpressed();
-        }
-
-        @Override
-        public void handleClick(final View view) {
-            notifyAdClicked();
-            mNativeClickHandler.openClickDestinationUrl(getClickDestinationUrl(), view);
-            mImNative.handleClick(null);
-        }
-
-        void parseJson(final IMNative imNative) throws JSONException  {
-            final JSONTokener jsonTokener = new JSONTokener(imNative.getContent());
-            final JSONObject jsonObject = new JSONObject(jsonTokener);
-
-            setTitle(getJsonValue(jsonObject, TITLE, String.class));
-            setText(getJsonValue(jsonObject, DESCRIPTION, String.class));
-
-            final JSONObject screenShotJsonObject = getJsonValue(jsonObject, SCREENSHOTS, JSONObject.class);
-            if (screenShotJsonObject != null) {
-                setMainImageUrl(getJsonValue(screenShotJsonObject, URL, String.class));
-            }
-
-            final JSONObject iconJsonObject = getJsonValue(jsonObject, ICON, JSONObject.class);
-            if (iconJsonObject != null) {
-                setIconImageUrl(getJsonValue(iconJsonObject, URL, String.class));
-            }
-
-            final String clickDestinationUrl = getJsonValue(jsonObject, LANDING_URL, String.class);
-            if (clickDestinationUrl == null) {
-                final String errorMessage = "InMobi JSON response missing required key: "
-                        + LANDING_URL + ". Failing over.";
-                MoPubLog.d(errorMessage);
-                throw new JSONException(errorMessage);
-            }
-
-            setClickDestinationUrl(clickDestinationUrl);
-            setCallToAction(getJsonValue(jsonObject, CTA, String.class));
-
-            try {
-                setStarRating(parseDouble(jsonObject.opt(RATING)));
-            } catch (ClassCastException e) {
-                Log.d("MoPub", "Unable to set invalid star rating for InMobi Native.");
-            }
-            setImpressionMinTimeViewed(IMPRESSION_MIN_TIME_VIEWED);
-        }
-
-    }
-}
diff --git a/extras/src/com/mopub/nativeads/MillennialNative.java b/extras/src/com/mopub/nativeads/MillennialNative.java
index 7a312731..85070c23 100644
--- a/extras/src/com/mopub/nativeads/MillennialNative.java
+++ b/extras/src/com/mopub/nativeads/MillennialNative.java
@@ -25,7 +25,7 @@
     private static final Handler UI_THREAD_HANDLER = new Handler(Looper.getMainLooper());
 
     @Override
-    protected void loadNativeAd(final Activity activity,
+    protected void loadNativeAd(final Context context,
             final CustomEventNativeListener listener,
             final Map<String, Object> localExtras,
             final Map<String, String> serverExtras) {
@@ -35,7 +35,7 @@ protected void loadNativeAd(final Activity activity,
 
         if ( !MMSDK.isInitialized() ) {
             try {
-                MMSDK.initialize(activity);
+                MMSDK.initialize((Activity) context);
             } catch ( Exception e ) {
                 Log.e(LOGCAT_TAG, "Unable to initialize the Millennial SDK-- " + e.getMessage());
                 e.printStackTrace();
@@ -85,10 +85,10 @@ public void run() {
         try {
             NativeAd nativeAd = NativeAd.createInstance(placementId, NativeAd.NATIVE_TYPE_INLINE);
             final MillennialStaticNativeAd millennialStaticNativeAd =
-                    new MillennialStaticNativeAd(activity,
+                    new MillennialStaticNativeAd(context,
                             nativeAd,
-                            new ImpressionTracker(activity),
-                            new NativeClickHandler(activity),
+                            new ImpressionTracker(context),
+                            new NativeClickHandler(context),
                             listener);
             millennialStaticNativeAd.loadAd();
         } catch ( MMException e ) {
diff --git a/extras/src/com/mopub/simpleadsdemo/InMobiBanner.java b/extras/src/com/mopub/simpleadsdemo/InMobiBanner.java
deleted file mode 100644
index b51fb04c..00000000
--- a/extras/src/com/mopub/simpleadsdemo/InMobiBanner.java
+++ /dev/null
@@ -1,142 +0,0 @@
-package com.mopub.simpleadsdemo;
-
-import android.app.Activity;
-import android.content.Context;
-
-import com.inmobi.commons.InMobi;
-import com.inmobi.commons.InMobi.LOG_LEVEL;
-import com.inmobi.monetization.IMBanner;
-import com.inmobi.monetization.IMBannerListener;
-import com.inmobi.monetization.IMErrorCode;
-import com.mopub.common.MoPub;
-import com.mopub.common.util.Views;
-import com.mopub.mobileads.CustomEventBanner;
-import com.mopub.mobileads.MoPubErrorCode;
-
-import java.util.HashMap;
-import java.util.Map;
-
-/*
- * Tested with InMobi SDK 4.4.1
- */
-public class InMobiBanner extends CustomEventBanner implements IMBannerListener {
-
-    private static final String DEFAULT_APP_ID = "YOUR_INMOBI_APP_ID_HERE";
-
-    /*
-     * These keys are intended for MoPub internal use. Do not modify.
-     */
-    public static final String APP_ID_KEY = "app_id";
-
-    @Override
-    protected void loadBanner(Context context,
-            CustomEventBannerListener bannerListener,
-            Map<String, Object> localExtras, Map<String, String> serverExtras) {
-        mBannerListener = bannerListener;
-        String inMobiAppId = DEFAULT_APP_ID;
-
-        Activity activity = null;
-        if (context instanceof Activity) {
-            activity = (Activity) context;
-        } else {
-            // You may also pass in an Activity Context in the localExtras map
-            // and retrieve it here.
-        }
-        if (activity == null) {
-            mBannerListener.onBannerFailed(null);
-            return;
-        }
-
-        if (extrasAreValid(serverExtras)) {
-            inMobiAppId = serverExtras.get(APP_ID_KEY);
-        }
-
-        if (!isAppInitialized) {
-            InMobi.initialize(activity, inMobiAppId);
-            isAppInitialized = true;
-        }
-
-        iMBanner = new IMBanner(activity, inMobiAppId,
-                IMBanner.INMOBI_AD_UNIT_320X50);
-
-        Map<String, String> map = new HashMap<String, String>();
-        map.put("tp", "c_mopub");
-        map.put("tp-ver", MoPub.SDK_VERSION);
-        iMBanner.setRequestParams(map);
-        InMobi.setLogLevel(LOG_LEVEL.VERBOSE);
-        iMBanner.setIMBannerListener(this);
-        iMBanner.setRefreshInterval(-1);
-        iMBanner.loadBanner();
-
-    }
-
-    private boolean extrasAreValid(Map<String, String> extras) {
-        return extras.containsKey(APP_ID_KEY);
-    }
-
-    private CustomEventBannerListener mBannerListener;
-    private IMBanner iMBanner;
-    private static boolean isAppInitialized = false;
-
-    /*
-     * Abstract methods from CustomEventBanner
-     */
-
-    @Override
-    public void onInvalidate() {
-        if (iMBanner != null) {
-            iMBanner.setIMBannerListener(null);
-            Views.removeFromParent(iMBanner);
-            iMBanner.destroy();
-        }
-    }
-
-    @Override
-    public void onBannerInteraction(IMBanner imBanner, Map<String, String> map) {
-        mBannerListener.onBannerClicked();
-    }
-
-    @Override
-    public void onBannerRequestFailed(IMBanner imBanner, IMErrorCode imErrorCode) {
-
-        if (imErrorCode == IMErrorCode.INTERNAL_ERROR) {
-            mBannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
-        } else if (imErrorCode == IMErrorCode.INVALID_REQUEST) {
-            mBannerListener
-                    .onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-        } else if (imErrorCode == IMErrorCode.NETWORK_ERROR) {
-            mBannerListener
-                    .onBannerFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-        } else if (imErrorCode == IMErrorCode.NO_FILL) {
-            mBannerListener.onBannerFailed(MoPubErrorCode.NO_FILL);
-        } else {
-            mBannerListener.onBannerFailed(MoPubErrorCode.UNSPECIFIED);
-        }
-    }
-
-    @Override
-    public void onBannerRequestSucceeded(IMBanner imBanner) {
-        if (iMBanner != null) {
-            mBannerListener.onBannerLoaded(imBanner);
-
-        } else {
-            mBannerListener.onBannerFailed(null);
-        }
-    }
-
-    @Override
-    public void onDismissBannerScreen(IMBanner imBanner) {
-        mBannerListener.onBannerCollapsed();
-    }
-
-    @Override
-    public void onLeaveApplication(IMBanner imBanner) {
-
-    }
-
-    @Override
-    public void onShowBannerScreen(IMBanner imBanner) {
-        mBannerListener.onBannerExpanded();
-    }
-
-}
diff --git a/extras/src/com/mopub/simpleadsdemo/InMobiInterstitial.java b/extras/src/com/mopub/simpleadsdemo/InMobiInterstitial.java
deleted file mode 100644
index ad45e7d8..00000000
--- a/extras/src/com/mopub/simpleadsdemo/InMobiInterstitial.java
+++ /dev/null
@@ -1,135 +0,0 @@
-package com.mopub.simpleadsdemo;
-
-import android.app.Activity;
-import android.content.Context;
-
-import com.inmobi.commons.InMobi;
-import com.inmobi.monetization.IMErrorCode;
-import com.inmobi.monetization.IMInterstitial;
-import com.inmobi.monetization.IMInterstitialListener;
-import com.mopub.common.MoPub;
-import com.mopub.mobileads.CustomEventInterstitial;
-import com.mopub.mobileads.MoPubErrorCode;
-
-import java.util.HashMap;
-import java.util.Map;
-
-/*
- * Tested with InMobi SDK  4.4.1
- */
-public class InMobiInterstitial extends CustomEventInterstitial implements IMInterstitialListener {
-
-    private static final String DEFAULT_APP_ID = "YOUR_INMOBI_APP_ID_HERE";
-
-    /*
-     * These keys are intended for MoPub internal use. Do not modify.
-     */
-    public static final String APP_ID_KEY = "app_id";
-
-    @Override
-    protected void loadInterstitial(Context context,
-                                    CustomEventInterstitialListener interstitialListener,
-                                    Map<String, Object> localExtras, Map<String, String> serverExtras) {
-        mInterstitialListener = interstitialListener;
-
-        Activity activity = null;
-        if (context instanceof Activity) {
-            activity = (Activity) context;
-        } else {
-            // You may also pass in an Activity Context in the localExtras map
-            // and retrieve it here.
-        }
-
-        if (activity == null) {
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.UNSPECIFIED);
-            return;
-        }
-
-        String inMobiAppId = DEFAULT_APP_ID;
-        if (extrasAreValid(serverExtras)) {
-            inMobiAppId = serverExtras.get(APP_ID_KEY);
-        }
-
-        if (!isAppInitialized) {
-            InMobi.initialize(activity, inMobiAppId);
-            isAppInitialized = true;
-        }
-        this.iMInterstitial = new IMInterstitial(activity, inMobiAppId);
-
-        Map<String, String> map = new HashMap<String, String>();
-        map.put("tp", "c_mopub");
-        map.put("tp-ver", MoPub.SDK_VERSION);
-        iMInterstitial.setRequestParams(map);
-        iMInterstitial.setIMInterstitialListener(this);
-        iMInterstitial.loadInterstitial();
-    }
-
-    private boolean extrasAreValid(Map<String, String> extras) {
-        return extras.containsKey(APP_ID_KEY);
-    }
-
-    private CustomEventInterstitialListener mInterstitialListener;
-    private IMInterstitial iMInterstitial;
-    private static boolean isAppInitialized = false;
-
-    /*
-     * Abstract methods from CustomEventInterstitial
-     */
-
-    @Override
-    public void showInterstitial() {
-        if (iMInterstitial != null
-                && IMInterstitial.State.READY.equals(this.iMInterstitial.getState())) {
-            iMInterstitial.show();
-        }
-    }
-
-    @Override
-    public void onInvalidate() {
-        if (iMInterstitial != null) {
-            iMInterstitial.setIMInterstitialListener(null);
-            iMInterstitial.destroy();
-        }
-    }
-
-    @Override
-    public void onDismissInterstitialScreen(IMInterstitial imInterstitial) {
-        mInterstitialListener.onInterstitialDismissed();
-    }
-
-    @Override
-    public void onInterstitialFailed(IMInterstitial imInterstitial, IMErrorCode imErrorCode) {
-        if (imErrorCode == IMErrorCode.INTERNAL_ERROR) {
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
-        } else if (imErrorCode == IMErrorCode.INVALID_REQUEST) {
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-        } else if (imErrorCode == IMErrorCode.NETWORK_ERROR) {
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-        } else if (imErrorCode == IMErrorCode.NO_FILL) {
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NO_FILL);
-        } else {
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.UNSPECIFIED);
-        }
-    }
-
-    @Override
-    public void onInterstitialInteraction(IMInterstitial imInterstitial,
-                                          Map<String, String> map) {
-        mInterstitialListener.onInterstitialClicked();
-    }
-
-    @Override
-    public void onInterstitialLoaded(IMInterstitial imInterstitial) {
-        mInterstitialListener.onInterstitialLoaded();
-    }
-
-    @Override
-    public void onLeaveApplication(IMInterstitial imInterstitial) {
-
-    }
-
-    @Override
-    public void onShowInterstitialScreen(IMInterstitial imInterstitial) {
-        mInterstitialListener.onInterstitialShown();
-    }
-}
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 30d399d8..13372aef 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 57375a65..1e12d0b2 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Wed Jul 15 14:33:43 PDT 2015
+#Mon Jun 20 17:07:26 PDT 2016
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.5-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-bin.zip
diff --git a/gradlew b/gradlew
index 91a7e269..9d82f789 100755
--- a/gradlew
+++ b/gradlew
@@ -42,11 +42,6 @@ case "`uname`" in
     ;;
 esac
 
-# For Cygwin, ensure paths are in UNIX format before anything is touched.
-if $cygwin ; then
-    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
-fi
-
 # Attempt to set APP_HOME
 # Resolve links: $0 may be a link
 PRG="$0"
@@ -61,9 +56,9 @@ while [ -h "$PRG" ] ; do
     fi
 done
 SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >&-
+cd "`dirname \"$PRG\"`/" >/dev/null
 APP_HOME="`pwd -P`"
-cd "$SAVED" >&-
+cd "$SAVED" >/dev/null
 
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 
@@ -114,6 +109,7 @@ fi
 if $cygwin ; then
     APP_HOME=`cygpath --path --mixed "$APP_HOME"`
     CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
 
     # We build the pattern for arguments to be converted via cygpath
     ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
diff --git a/gradlew.bat b/gradlew.bat
index 8a0b282a..aec99730 100644
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -1,90 +1,90 @@
-@if "%DEBUG%" == "" @echo off
-@rem ##########################################################################
-@rem
-@rem  Gradle startup script for Windows
-@rem
-@rem ##########################################################################
-
-@rem Set local scope for the variables with windows NT shell
-if "%OS%"=="Windows_NT" setlocal
-
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
-
-set DIRNAME=%~dp0
-if "%DIRNAME%" == "" set DIRNAME=.
-set APP_BASE_NAME=%~n0
-set APP_HOME=%DIRNAME%
-
-@rem Find java.exe
-if defined JAVA_HOME goto findJavaFromJavaHome
-
-set JAVA_EXE=java.exe
-%JAVA_EXE% -version >NUL 2>&1
-if "%ERRORLEVEL%" == "0" goto init
-
-echo.
-echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:findJavaFromJavaHome
-set JAVA_HOME=%JAVA_HOME:"=%
-set JAVA_EXE=%JAVA_HOME%/bin/java.exe
-
-if exist "%JAVA_EXE%" goto init
-
-echo.
-echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:init
-@rem Get command-line arguments, handling Windowz variants
-
-if not "%OS%" == "Windows_NT" goto win9xME_args
-if "%@eval[2+2]" == "4" goto 4NT_args
-
-:win9xME_args
-@rem Slurp the command line arguments.
-set CMD_LINE_ARGS=
-set _SKIP=2
-
-:win9xME_args_slurp
-if "x%~1" == "x" goto execute
-
-set CMD_LINE_ARGS=%*
-goto execute
-
-:4NT_args
-@rem Get arguments from the 4NT Shell from JP Software
-set CMD_LINE_ARGS=%$
-
-:execute
-@rem Setup the command line
-
-set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
-
-@rem Execute Gradle
-"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
-
-:end
-@rem End local scope for the variables with windows NT shell
-if "%ERRORLEVEL%"=="0" goto mainEnd
-
-:fail
-rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
-rem the _cmd.exe /c_ return code!
-if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
-exit /b 1
-
-:mainEnd
-if "%OS%"=="Windows_NT" endlocal
-
-:omega
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/mopub-sample/.classpath b/mopub-sample/.classpath
deleted file mode 100644
index 3c02ddb2..00000000
--- a/mopub-sample/.classpath
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry kind="src" path="src/main/java"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
-	<classpathentry kind="output" path="bin/classes"/>
-</classpath>
diff --git a/mopub-sample/.project b/mopub-sample/.project
deleted file mode 100644
index 2ae5c5ab..00000000
--- a/mopub-sample/.project
+++ /dev/null
@@ -1,33 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>mopub-sample</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-</projectDescription>
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index 5915b7c8..f7dd6ffc 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.mopub.simpleadsdemo"
-      android:versionCode="42"
-      android:versionName="4.7.1">
+      android:versionCode="44"
+      android:versionName="4.9.0">
     <uses-sdk android:minSdkVersion="9"
               android:targetSdkVersion="23"/>
 
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index 3e922f90..b123a744 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -7,9 +7,9 @@ repositories {
 
 apply plugin: 'com.android.application'
 
-group = 'com.mopub'
-description = '''MoPub Sample App'''
-version = '4.7.1'
+project.group = 'com.mopub'
+project.description = '''MoPub Sample App'''
+project.version = '4.9.0'
 
 android {
     compileSdkVersion 23
@@ -17,7 +17,7 @@ android {
     lintOptions { abortOnError false }
 
     defaultConfig {
-        versionCode 42
+        versionCode 44
         versionName version
         minSdkVersion 9
         targetSdkVersion 23
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java
index 10a1cd82..ff1337ac 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java
@@ -33,6 +33,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
         views.mLoadButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
+                mShowButton.setEnabled(false);
                 if (mMoPubInterstitial == null) {
                     mMoPubInterstitial = new MoPubInterstitial(getActivity(), adUnitId);
                     mMoPubInterstitial.setInterstitialAdListener(InterstitialDetailFragment.this);
@@ -40,7 +41,6 @@ public void onClick(View view) {
                 final String keywords = views.mKeywordsField.getText().toString();
                 mMoPubInterstitial.setKeywords(keywords);
                 mMoPubInterstitial.load();
-                mShowButton.setEnabled(false);
             }
         });
         mShowButton = (Button) view.findViewById(R.id.interstitial_show_button);
diff --git a/mopub-sdk/.classpath b/mopub-sdk/.classpath
deleted file mode 100644
index a4dec28b..00000000
--- a/mopub-sdk/.classpath
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry kind="src" path="src/main/java"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
-	<classpathentry kind="lib" path="libs/android-support-v4.jar"/>
-	<classpathentry kind="output" path="bin/classes"/>
-</classpath>
diff --git a/mopub-sdk/.project b/mopub-sdk/.project
deleted file mode 100644
index bd2cd4f9..00000000
--- a/mopub-sdk/.project
+++ /dev/null
@@ -1,33 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>mopub-sdk</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-</projectDescription>
diff --git a/mopub-sdk/build.gradle b/mopub-sdk/build.gradle
index c0755e94..18c0533d 100644
--- a/mopub-sdk/build.gradle
+++ b/mopub-sdk/build.gradle
@@ -1,117 +1,13 @@
-// This buildscript will assemble the MoPub SDK into an AAR.
-buildscript {
-	repositories {
-		mavenCentral()
-		jcenter()
-	}
-
-	dependencies {
-		classpath 'com.android.tools.build:gradle:2.1.3'
-		classpath 'com.github.dcendents:android-maven-gradle-plugin:1.4.1'
-	}
-}
-
-plugins {
-	id "com.jfrog.bintray" version "1.2"
-}
-
-repositories {
-	flatDir {
-		dirs '../libs'
-	}
-}
-
-configurations {
-	javadocDeps
-}
-
-apply plugin: 'com.android.library'
-apply plugin: 'com.github.dcendents.android-maven'
-
-task wrapper(type: Wrapper) {
-	gradleVersion = '2.14.1'
-}
-
-group = 'com.mopub'
-description = '''MoPub Android SDK'''
-version = '4.7.1'
-
-android {
-	compileSdkVersion 23
-	buildToolsVersion '24.0.1'
-	lintOptions { abortOnError false }
-	useLibrary 'org.apache.http.legacy'
-
-	defaultConfig {
-		versionCode 42
-		versionName version
-		minSdkVersion 9
-		targetSdkVersion 23
-	}
-
-	sourceSets {
-		main {
-			manifest.srcFile 'AndroidManifest.xml'
-			java.srcDirs = ['src/main/java']
-			resources.srcDirs = ['src/main/resources']
-			aidl.srcDirs = ['src/main']
-			renderscript.srcDirs = ['src/main']
-			res.srcDirs = ['res']
-			assets.srcDirs = ['assets']
-		}
-	}
-
-	testOptions {
-		unitTests {
-			// This causes android platform methods from the test JAR
-			// to return null, false, etc instead of throwing an exception.
-			// We should periodically disable this and tackle the broken tests
-			// as it exposes when we are hitting platform APIs in our tests.
-			// If these tests *require* platform APIs we may want to make them
-			// connected tests instead.
-			returnDefaultValues = true
-
-			// Test JVM settings since we have a lot of classes loaded.
-			all {
-				jvmArgs '-XX:MaxPermSize=4096m', '-Xmx8192m'
-				forkEvery 200
-			}
-		}
-	}
-
-	buildTypes {
-		release {
-			minifyEnabled false
-			consumerProguardFiles 'proguard.txt'
-		}
-
-		debug {
-			minifyEnabled false
-		}
-	}
-
-	// Note: You will also need a local.properties file to set the location of the SDK in the same
-	// way that the existing SDK requires, using the sdk.dir property.
-	// Alternatively, you can set an environment variable called ANDROID_HOME. There is no
-	// difference between the two methods, you can use the one you prefer.
-}
-
+apply from: 'shared-build.gradle'
 
 
 dependencies {
-
-	compile 'com.android.support:support-v4:23.4.0'
-	compile 'com.android.support:support-annotations:23.4.0'
-	compile 'com.android.support:recyclerview-v7:23.4.0'
-	compile 'com.mopub.volley:mopub-volley:1.1.0'
-	compile 'com.google.android.exoplayer:exoplayer:r1.5.6'
-	// anchor: additional dependencies
-
-	javadocDeps 'com.google.android.exoplayer:exoplayer:r1.5.6:sources'
-	javadocDeps 'com.mopub.volley:mopub-volley:1.1.0:sources'
-	javadocDeps 'com.android.support:support-v4:23.4.0:sources'
-	javadocDeps 'com.android.support:support-annotations:23.4.0:sources'
-	javadocDeps 'com.android.support:recyclerview-v7:23.4.0:sources'
+	compile project(':mopub-sdk:mopub-sdk-base')
+	compile project(':mopub-sdk:mopub-sdk-banner')
+	compile project(':mopub-sdk:mopub-sdk-interstitial')
+	compile project(':mopub-sdk:mopub-sdk-rewardedvideo')
+	compile project(':mopub-sdk:mopub-sdk-native-static')
+	compile project(':mopub-sdk:mopub-sdk-native-video')
 
 	testCompile 'junit:junit:4.10'
 	testCompile 'org.robolectric:robolectric:3.0'
@@ -119,110 +15,14 @@ dependencies {
 	testCompile 'org.robolectric:shadows-httpclient:3.0'
 	testCompile 'com.squareup:fest-android:1.0.7'
 	testCompile 'org.mockito:mockito-core:1.9.5'
+	testCompile 'org.powermock:powermock-module-junit4:1.6.5'
+	testCompile 'org.powermock:powermock-module-junit4-rule:1.6.5'
+	testCompile 'org.powermock:powermock-api-mockito:1.6.5'
+	testCompile 'org.powermock:powermock-classloading-xstream:1.6.5'
 }
 
-def siteUrl = 'https://github.com/mopub/mopub-android-sdk'
-def gitUrl = 'https://github.com/mopub/mopub-android-sdk.git'
-// Put your credentials (bintray.user, bintray.apikey) in ~/.gradle/gradle.properties
-bintray {
-	user = project.hasProperty("bintray.user") ? project.getProperty("bintray.user") : ""
-	key = project.hasProperty("bintray.apikey") ? project.getProperty("bintray.apikey") : ""
-
-	configurations = ['archives']
-	publish = true
-
-	pkg {
-		repo = 'mopub-android-sdk'
-		name = 'mopub-android-sdk'
-
-		userOrg = 'mopub'
-		desc = description
-
-		websiteUrl = siteUrl
-		vcsUrl = gitUrl
-		licenses = ['Apache-2.0']
-
-		version {
-			name = project.version
-		}
-	}
-}
-
-install {
-	repositories.mavenInstaller {
-		pom {
-			project {
-				packaging 'aar'
-
-				name 'MoPub Android SDK'
-				url siteUrl
-
-				licenses {
-					license {
-						name 'MoPub SDK License'
-						url 'http://www.mopub.com/legal/sdk-license-agreement/'
-					}
-				}
-				developers {
-					// ID corresponds to GitHub user name
-					developer {
-						id 'nathanshayefar'
-						name 'Nathan Shayefar'
-						email 'nshayefar@twitter.com'
-					}
-					developer {
-						id 'joeblubaugh'
-						name 'Joe Blubaugh'
-						email 'joeblubaugh@twitter.com'
-					}
-					developer {
-						id 'steffanc'
-						name 'Steffan Chartrand'
-						email 'schartrand@twitter.com'
-					}
-					developer {
-						id 'aornelas'
-						name 'Andrés Ornelas'
-						email 'andres@twitter.com'
-					}
-					developer {
-						id 'bichenwang'
-						name 'Bichen Wang'
-						email 'bwang@twitter.com'
-					}
-					developer {
-						id 'nathank33'
-						name 'Nathan Braun'
-						email 'nbraun@twitter.com'
-					}
-				}
-				scm {
-					connection gitUrl
-					developerConnection gitUrl
-					url siteUrl
-				}
-			}
-		}
-	}
-}
-
-task sourcesJar(type: Jar) {
-	from android.sourceSets.main.java.srcDirs
-	classifier = 'sources'
-}
-
-task javadoc(type: Javadoc) {
-	source = android.sourceSets.main.java.srcDirs
-	classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
-	classpath += configurations.javadocDeps
-}
-
-task javadocJar(type: Jar, dependsOn: javadoc) {
-	classifier = 'javadoc'
-	from javadoc.destinationDir
-}
-
-artifacts {
-	archives javadocJar
-	archives sourcesJar
-}
+project.description = 'MoPub Android SDK'
+project.ext.displayName = 'MoPub Android SDK'
+project.ext.projectName = 'mopub-sdk'
+project.ext.uploadName = 'mopub-android-sdk'
+apply from: 'publisher.gradle'
diff --git a/mopub-sdk/gradle/wrapper/gradle-wrapper.jar b/mopub-sdk/gradle/wrapper/gradle-wrapper.jar
index 30d399d8..13372aef 100644
Binary files a/mopub-sdk/gradle/wrapper/gradle-wrapper.jar and b/mopub-sdk/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/mopub-sdk/gradle/wrapper/gradle-wrapper.properties b/mopub-sdk/gradle/wrapper/gradle-wrapper.properties
index 75f1f3fd..6faa4eab 100644
--- a/mopub-sdk/gradle/wrapper/gradle-wrapper.properties
+++ b/mopub-sdk/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Fri Jul 24 16:59:31 PDT 2015
+#Mon Jun 20 17:19:29 PDT 2016
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.5-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-bin.zip
diff --git a/mopub-sdk/gradlew b/mopub-sdk/gradlew
index 91a7e269..9d82f789 100755
--- a/mopub-sdk/gradlew
+++ b/mopub-sdk/gradlew
@@ -42,11 +42,6 @@ case "`uname`" in
     ;;
 esac
 
-# For Cygwin, ensure paths are in UNIX format before anything is touched.
-if $cygwin ; then
-    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
-fi
-
 # Attempt to set APP_HOME
 # Resolve links: $0 may be a link
 PRG="$0"
@@ -61,9 +56,9 @@ while [ -h "$PRG" ] ; do
     fi
 done
 SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >&-
+cd "`dirname \"$PRG\"`/" >/dev/null
 APP_HOME="`pwd -P`"
-cd "$SAVED" >&-
+cd "$SAVED" >/dev/null
 
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 
@@ -114,6 +109,7 @@ fi
 if $cygwin ; then
     APP_HOME=`cygpath --path --mixed "$APP_HOME"`
     CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
 
     # We build the pattern for arguments to be converted via cygpath
     ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
diff --git a/mopub-sdk/gradlew.bat b/mopub-sdk/gradlew.bat
index 8a0b282a..aec99730 100644
--- a/mopub-sdk/gradlew.bat
+++ b/mopub-sdk/gradlew.bat
@@ -1,90 +1,90 @@
-@if "%DEBUG%" == "" @echo off
-@rem ##########################################################################
-@rem
-@rem  Gradle startup script for Windows
-@rem
-@rem ##########################################################################
-
-@rem Set local scope for the variables with windows NT shell
-if "%OS%"=="Windows_NT" setlocal
-
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
-
-set DIRNAME=%~dp0
-if "%DIRNAME%" == "" set DIRNAME=.
-set APP_BASE_NAME=%~n0
-set APP_HOME=%DIRNAME%
-
-@rem Find java.exe
-if defined JAVA_HOME goto findJavaFromJavaHome
-
-set JAVA_EXE=java.exe
-%JAVA_EXE% -version >NUL 2>&1
-if "%ERRORLEVEL%" == "0" goto init
-
-echo.
-echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:findJavaFromJavaHome
-set JAVA_HOME=%JAVA_HOME:"=%
-set JAVA_EXE=%JAVA_HOME%/bin/java.exe
-
-if exist "%JAVA_EXE%" goto init
-
-echo.
-echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:init
-@rem Get command-line arguments, handling Windowz variants
-
-if not "%OS%" == "Windows_NT" goto win9xME_args
-if "%@eval[2+2]" == "4" goto 4NT_args
-
-:win9xME_args
-@rem Slurp the command line arguments.
-set CMD_LINE_ARGS=
-set _SKIP=2
-
-:win9xME_args_slurp
-if "x%~1" == "x" goto execute
-
-set CMD_LINE_ARGS=%*
-goto execute
-
-:4NT_args
-@rem Get arguments from the 4NT Shell from JP Software
-set CMD_LINE_ARGS=%$
-
-:execute
-@rem Setup the command line
-
-set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
-
-@rem Execute Gradle
-"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
-
-:end
-@rem End local scope for the variables with windows NT shell
-if "%ERRORLEVEL%"=="0" goto mainEnd
-
-:fail
-rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
-rem the _cmd.exe /c_ return code!
-if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
-exit /b 1
-
-:mainEnd
-if "%OS%"=="Windows_NT" endlocal
-
-:omega
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/mopub-sdk/mopub-sdk-banner/build.gradle b/mopub-sdk/mopub-sdk-banner/build.gradle
new file mode 100644
index 00000000..1c7af287
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-banner/build.gradle
@@ -0,0 +1,11 @@
+apply from: '../shared-build.gradle'
+
+dependencies {
+    compile project(':mopub-sdk:mopub-sdk-base')
+}
+
+project.description = 'MoPub Android SDK - Banner'
+project.ext.displayName = 'MoPub Android SDK - Banner'
+project.ext.projectName = 'mopub-sdk-banner'
+project.ext.uploadName = 'mopub-android-sdk-banner'
+//apply from: '../publisher.gradle'
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/AndroidManifest.xml b/mopub-sdk/mopub-sdk-banner/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..5bf5c16c
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-banner/src/main/AndroidManifest.xml
@@ -0,0 +1,4 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.mopub.mobileads.banner">
+    <application/>
+</manifest>
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBanner.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBanner.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBanner.java
rename to mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBanner.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
rename to mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/DefaultBannerAdListener.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/DefaultBannerAdListener.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/DefaultBannerAdListener.java
rename to mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/DefaultBannerAdListener.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlBanner.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/HtmlBanner.java
rename to mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlBannerWebView.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBannerWebView.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/HtmlBannerWebView.java
rename to mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBannerWebView.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/CustomEventBannerAdapterFactory.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/CustomEventBannerAdapterFactory.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/factories/CustomEventBannerAdapterFactory.java
rename to mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/CustomEventBannerAdapterFactory.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/CustomEventBannerFactory.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/CustomEventBannerFactory.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/factories/CustomEventBannerFactory.java
rename to mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/CustomEventBannerFactory.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java
rename to mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidBanner.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mraid/MraidBanner.java
rename to mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java
diff --git a/mopub-sdk/mopub-sdk-base/build.gradle b/mopub-sdk/mopub-sdk-base/build.gradle
new file mode 100644
index 00000000..4ace1ac1
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/build.gradle
@@ -0,0 +1,11 @@
+apply from: '../shared-build.gradle'
+
+dependencies {
+    compile 'com.mopub.volley:mopub-volley:1.1.0'
+}
+
+project.description = 'MoPub Android SDK - Base'
+project.ext.displayName = 'MoPub Android SDK - Base'
+project.ext.projectName = 'mopub-sdk-base'
+project.ext.uploadName = 'mopub-android-sdk-base'
+//apply from: '../publisher.gradle'
diff --git a/mopub-sdk/mopub-sdk-base/src/main/AndroidManifest.xml b/mopub-sdk/mopub-sdk-base/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..d480f9c5
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/AndroidManifest.xml
@@ -0,0 +1,4 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.mopub.mobileads.base">
+    <application/>
+</manifest>
diff --git a/mopub-sdk/src/main/java/com/mopub/common/AdFormat.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdFormat.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/AdFormat.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdFormat.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/AdReport.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdReport.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/AdReport.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdReport.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/AdType.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdType.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/AdType.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdType.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/AdUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/AdUrlGenerator.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/BaseLifecycleListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseLifecycleListener.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/BaseLifecycleListener.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseLifecycleListener.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/BaseUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseUrlGenerator.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/BaseUrlGenerator.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseUrlGenerator.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/BrowserWebViewClient.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BrowserWebViewClient.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/BrowserWebViewClient.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BrowserWebViewClient.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/CacheService.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CacheService.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/CacheService.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CacheService.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/ClientMetadata.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/ClientMetadata.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/CloseableLayout.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CloseableLayout.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/CloseableLayout.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CloseableLayout.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/Constants.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java
similarity index 82%
rename from mopub-sdk/src/main/java/com/mopub/common/Constants.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java
index 7c5b1462..99efe98b 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/Constants.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java
@@ -1,6 +1,7 @@
 package com.mopub.common;
 
 public class Constants {
+
     private Constants() {}
 
     public static final String HTTP = "http";
@@ -20,4 +21,7 @@ private Constants() {}
     public static final int TEN_MB = 10 * 1024 * 1024;
 
     public static final int UNUSED_REQUEST_CODE = 255;  // Acceptable range is [0, 255]
+
+    public static final String NATIVE_VIDEO_ID = "native_video_id";
+    public static final String NATIVE_VAST_VIDEO_CONFIG = "native_vast_video_config";
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/CreativeOrientation.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CreativeOrientation.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/CreativeOrientation.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CreativeOrientation.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/DataKeys.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/DataKeys.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/DiskLruCache.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DiskLruCache.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/DiskLruCache.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DiskLruCache.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/DiskLruCacheStrictLineReader.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DiskLruCacheStrictLineReader.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/DiskLruCacheStrictLineReader.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DiskLruCacheStrictLineReader.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/DiskLruCacheUtil.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DiskLruCacheUtil.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/DiskLruCacheUtil.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DiskLruCacheUtil.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/DoubleTimeTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DoubleTimeTracker.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/DoubleTimeTracker.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DoubleTimeTracker.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/DownloadResponse.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DownloadResponse.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/DownloadResponse.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DownloadResponse.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/FullAdType.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/FullAdType.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/FullAdType.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/FullAdType.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/GpsHelper.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/GpsHelper.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/HttpResponses.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/HttpResponses.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/HttpResponses.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/HttpResponses.java
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/IntentActions.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/IntentActions.java
new file mode 100644
index 00000000..00dcd8b5
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/IntentActions.java
@@ -0,0 +1,16 @@
+package com.mopub.common;
+
+/**
+ * IntentActions are used by a {@link com.mopub.mobileads.BaseBroadcastReceiver}
+ * to relay information about the current state of a custom event activity.
+ */
+public class IntentActions {
+    public static final String ACTION_INTERSTITIAL_FAIL = "com.mopub.action.interstitial.fail";
+    public static final String ACTION_INTERSTITIAL_SHOW = "com.mopub.action.interstitial.show";
+    public static final String ACTION_INTERSTITIAL_DISMISS = "com.mopub.action.interstitial.dismiss";
+    public static final String ACTION_INTERSTITIAL_CLICK = "com.mopub.action.interstitial.click";
+
+    public static final String ACTION_REWARDED_VIDEO_COMPLETE = "com.mopub.action.rewardedvideo.complete";
+
+    private IntentActions() {}
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/LifecycleListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LifecycleListener.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/LifecycleListener.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LifecycleListener.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/LocationService.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LocationService.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/LocationService.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LocationService.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MediationSettings.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MediationSettings.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/MediationSettings.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MediationSettings.java
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
new file mode 100644
index 00000000..bf067481
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
@@ -0,0 +1,241 @@
+package com.mopub.common;
+
+import android.app.Activity;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Reflection;
+
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+
+public class MoPub {
+    public static final String SDK_VERSION = "4.9.0";
+
+    public enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
+
+    private static final String MOPUB_REWARDED_VIDEOS =
+            "com.mopub.mobileads.MoPubRewardedVideos";
+    private static final String MOPUB_REWARDED_VIDEO_MANAGER =
+            "com.mopub.mobileads.MoPubRewardedVideoManager";
+    private static final String MOPUB_REWARDED_VIDEO_LISTENER =
+            "com.mopub.mobileads.MoPubRewardedVideoListener";
+    private static final String MOPUB_REWARDED_VIDEO_MANAGER_REQUEST_PARAMETERS =
+            "com.mopub.mobileads.MoPubRewardedVideoManager$RequestParameters";
+
+    private static final int DEFAULT_LOCATION_PRECISION = 6;
+    private static volatile LocationAwareness sLocationLocationAwareness = LocationAwareness.NORMAL;
+    private static volatile int sLocationPrecision = DEFAULT_LOCATION_PRECISION;
+    private static boolean sSearchedForUpdateActivityMethod = false;
+    @Nullable private static Method sUpdateActivityMethod;
+
+    public static LocationAwareness getLocationAwareness() {
+        return sLocationLocationAwareness;
+    }
+
+    public static void setLocationAwareness(LocationAwareness locationAwareness) {
+        sLocationLocationAwareness = locationAwareness;
+    }
+
+    public static int getLocationPrecision() {
+        return sLocationPrecision;
+    }
+
+    /**
+     * Sets the precision to use when the SDK's location awareness is set
+     * to {@link com.mopub.common.MoPub.LocationAwareness#TRUNCATED}.
+     */
+    public static void setLocationPrecision(int precision) {
+        sLocationPrecision = Math.min(Math.max(0, precision), DEFAULT_LOCATION_PRECISION);
+    }
+
+
+    //////// MoPub LifecycleListener messages ////////
+
+    public static void onCreate(@NonNull final Activity activity) {
+        MoPubLifecycleManager.getInstance(activity).onCreate(activity);
+        updateActivity(activity);
+    }
+
+    public static void onStart(@NonNull final Activity activity) {
+        MoPubLifecycleManager.getInstance(activity).onStart(activity);
+        updateActivity(activity);
+    }
+
+    public static void onPause(@NonNull final Activity activity) {
+        MoPubLifecycleManager.getInstance(activity).onPause(activity);
+    }
+
+    public static void onResume(@NonNull final Activity activity) {
+        MoPubLifecycleManager.getInstance(activity).onResume(activity);
+        updateActivity(activity);
+    }
+
+    public static void onRestart(@NonNull final Activity activity) {
+        MoPubLifecycleManager.getInstance(activity).onRestart(activity);
+        updateActivity(activity);
+    }
+
+    public static void onStop(@NonNull final Activity activity) {
+        MoPubLifecycleManager.getInstance(activity).onStop(activity);
+    }
+
+    public static void onDestroy(@NonNull final Activity activity) {
+        MoPubLifecycleManager.getInstance(activity).onDestroy(activity);
+    }
+
+    public static void onBackPressed(@NonNull final Activity activity) {
+        MoPubLifecycleManager.getInstance(activity).onBackPressed(activity);
+    }
+
+    ////////// MoPub RewardedVideoControl methods //////////
+    // These methods have been deprecated as of release 4.9 due to SDK modularization. MoPub is
+    // inside of the base module while MoPubRewardedVideos is inside of the rewarded video module.
+    // MoPubRewardedVideos methods must now be called with reflection because the publisher
+    // may have excluded the rewarded video module.
+
+
+    /**
+     * @deprecated As of release 4.9, use MoPubRewardedVideos#initializeRewardedVideo instead
+     */
+    @Deprecated
+    public static void initializeRewardedVideo(@NonNull Activity activity, MediationSettings... mediationSettings) {
+        try {
+            new Reflection.MethodBuilder(null, "initializeRewardedVideo")
+                    .setStatic(Class.forName(MOPUB_REWARDED_VIDEOS))
+                    .addParam(Activity.class, activity)
+                    .addParam(MediationSettings[].class, mediationSettings)
+                    .execute();
+        } catch (ClassNotFoundException e) {
+            MoPubLog.w("initializeRewardedVideo was called without the rewarded video module");
+        } catch (NoSuchMethodException e) {
+            MoPubLog.w("initializeRewardedVideo was called without the rewarded video module");
+        } catch (Exception e) {
+            MoPubLog.e("Error while initializing rewarded video", e);
+        }
+    }
+
+    @VisibleForTesting
+    static void updateActivity(@NonNull Activity activity) {
+        if (!sSearchedForUpdateActivityMethod) {
+            sSearchedForUpdateActivityMethod = true;
+            try {
+                Class moPubRewardedVideoManagerClass = Class.forName(
+                        MOPUB_REWARDED_VIDEO_MANAGER);
+                sUpdateActivityMethod = Reflection.getDeclaredMethodWithTraversal(
+                        moPubRewardedVideoManagerClass, "updateActivity", Activity.class);
+            } catch (ClassNotFoundException e) {
+                // rewarded video module not included
+            } catch (NoSuchMethodException e) {
+                // rewarded video module not included
+            }
+        }
+
+        if (sUpdateActivityMethod != null) {
+            try {
+                sUpdateActivityMethod.invoke(null, activity);
+            } catch (IllegalAccessException e) {
+                MoPubLog.e("Error while attempting to access the update activity method - this " +
+                        "should not have happened", e);
+            } catch (InvocationTargetException e) {
+                MoPubLog.e("Error while attempting to access the update activity method - this " +
+                        "should not have happened", e);
+            }
+        }
+    }
+
+    /**
+     * @deprecated As of release 4.9, use MoPubRewardedVideos#setRewardedVideoListener instead
+     */
+    @Deprecated
+    public static void setRewardedVideoListener(@Nullable Object listener) {
+        try {
+            Class moPubRewardedVideoListenerClass = Class.forName(
+                    MOPUB_REWARDED_VIDEO_LISTENER);
+            new Reflection.MethodBuilder(null, "setRewardedVideoListener")
+                    .setStatic(Class.forName(MOPUB_REWARDED_VIDEOS))
+                    .addParam(moPubRewardedVideoListenerClass, listener)
+                    .execute();
+        } catch (ClassNotFoundException e) {
+            MoPubLog.w("setRewardedVideoListener was called without the rewarded video module");
+        } catch (NoSuchMethodException e) {
+            MoPubLog.w("setRewardedVideoListener was called without the rewarded video module");
+        } catch (Exception e) {
+            MoPubLog.e("Error while setting rewarded video listener", e);
+        }
+    }
+
+    /**
+     * @deprecated As of release 4.9, use MoPubRewardedVideos#loadRewardedVideo instead
+     */
+    @Deprecated
+    public static void loadRewardedVideo(@NonNull String adUnitId,
+            @Nullable MediationSettings... mediationSettings) {
+        MoPub.loadRewardedVideo(adUnitId, null, mediationSettings);
+    }
+
+    /**
+     * @deprecated As of release 4.9, use MoPubRewardedVideos#loadRewardedVideo instead
+     */
+    @Deprecated
+    public static void loadRewardedVideo(@NonNull String adUnitId,
+            @Nullable Object requestParameters,
+            @Nullable MediationSettings... mediationSettings) {
+        try {
+            Class requestParametersClass = Class.forName(
+                    MOPUB_REWARDED_VIDEO_MANAGER_REQUEST_PARAMETERS);
+            new Reflection.MethodBuilder(null, "loadRewardedVideo")
+                    .setStatic(Class.forName(MOPUB_REWARDED_VIDEOS))
+                    .addParam(String.class, adUnitId)
+                    .addParam(requestParametersClass, requestParameters)
+                    .addParam(MediationSettings[].class, mediationSettings)
+                    .execute();
+        } catch (ClassNotFoundException e) {
+            MoPubLog.w("loadRewardedVideo was called without the rewarded video module");
+        } catch (NoSuchMethodException e) {
+            MoPubLog.w("loadRewardedVideo was called without the rewarded video module");
+        } catch (Exception e) {
+            MoPubLog.e("Error while loading rewarded video", e);
+        }
+    }
+
+    /**
+     * @deprecated As of release 4.9, use MoPubRewardedVideos#hasRewardedVideo instead
+     */
+    @Deprecated
+    public static boolean hasRewardedVideo(@NonNull String adUnitId) {
+        try {
+            return (boolean) new Reflection.MethodBuilder(null, "hasRewardedVideo")
+                    .setStatic(Class.forName(MOPUB_REWARDED_VIDEOS))
+                    .addParam(String.class, adUnitId)
+                    .execute();
+        } catch (ClassNotFoundException e) {
+            MoPubLog.w("hasRewardedVideo was called without the rewarded video module");
+        } catch (NoSuchMethodException e) {
+            MoPubLog.w("hasRewardedVideo was called without the rewarded video module");
+        } catch (Exception e) {
+            MoPubLog.e("Error while checking rewarded video", e);
+        }
+        return false;
+    }
+
+    /**
+     * @deprecated As of release 4.9, use MoPubRewardedVideos#showRewardedVideo instead
+     */
+    @Deprecated
+    public static void showRewardedVideo(@NonNull String adUnitId) {
+        try {
+            new Reflection.MethodBuilder(null, "showRewardedVideo")
+                    .setStatic(Class.forName(MOPUB_REWARDED_VIDEOS))
+                    .addParam(String.class, adUnitId)
+                    .execute();
+        } catch (ClassNotFoundException e) {
+            MoPubLog.w("showRewardedVideo was called without the rewarded video module");
+        } catch (NoSuchMethodException e) {
+            MoPubLog.w("showRewardedVideo was called without the rewarded video module");
+        } catch (Exception e) {
+            MoPubLog.e("Error while showing rewarded video", e);
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/MoPubBrowser.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPubHttpUrlConnection.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubHttpUrlConnection.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/MoPubHttpUrlConnection.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubHttpUrlConnection.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPubLifecycleManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubLifecycleManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/MoPubLifecycleManager.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubLifecycleManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/Preconditions.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Preconditions.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/Preconditions.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Preconditions.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/SharedPreferencesHelper.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SharedPreferencesHelper.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/SharedPreferencesHelper.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SharedPreferencesHelper.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/UrlAction.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlAction.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/UrlAction.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlAction.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/UrlHandler.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlHandler.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/UrlHandler.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlHandler.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/UrlResolutionTask.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/UrlResolutionTask.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/VisibleForTesting.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/VisibleForTesting.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/VisibleForTesting.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/VisibleForTesting.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/BaseEvent.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/BaseEvent.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/event/BaseEvent.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/BaseEvent.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/ErrorEvent.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/ErrorEvent.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/event/ErrorEvent.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/ErrorEvent.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/Event.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/Event.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/event/Event.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/Event.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/EventDetails.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventDetails.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/event/EventDetails.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventDetails.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/EventDispatcher.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventDispatcher.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/event/EventDispatcher.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventDispatcher.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/EventRecorder.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventRecorder.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/event/EventRecorder.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventRecorder.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/EventSampler.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventSampler.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/event/EventSampler.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventSampler.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/EventSerializer.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventSerializer.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/event/EventSerializer.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/EventSerializer.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/LogCatEventRecorder.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/LogCatEventRecorder.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/event/LogCatEventRecorder.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/LogCatEventRecorder.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/MoPubEvents.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/MoPubEvents.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/event/MoPubEvents.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/MoPubEvents.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/NoopEventRecorder.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/NoopEventRecorder.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/event/NoopEventRecorder.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/NoopEventRecorder.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/ScribeEventRecorder.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/ScribeEventRecorder.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/event/ScribeEventRecorder.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/event/ScribeEventRecorder.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/factories/MethodBuilderFactory.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/factories/MethodBuilderFactory.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/factories/MethodBuilderFactory.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/factories/MethodBuilderFactory.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/logging/MoPubLog.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/logging/MoPubLog.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/AsyncTasks.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/AsyncTasks.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/AsyncTasks.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/AsyncTasks.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/DateAndTime.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DateAndTime.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/DateAndTime.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DateAndTime.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/DeviceUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DeviceUtils.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/DeviceUtils.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DeviceUtils.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Dips.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Dips.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/Dips.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Dips.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Drawables.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Drawables.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/Drawables.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Drawables.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Files.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Files.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/Files.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Files.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/ImageUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ImageUtils.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/ImageUtils.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ImageUtils.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Intents.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Intents.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/Intents.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Intents.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Json.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Json.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/Json.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Json.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/ManifestUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ManifestUtils.java
similarity index 95%
rename from mopub-sdk/src/main/java/com/mopub/common/util/ManifestUtils.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ManifestUtils.java
index 08b4306e..c248acec 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/ManifestUtils.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ManifestUtils.java
@@ -25,6 +25,8 @@
 public class ManifestUtils {
     private ManifestUtils() {}
 
+    private static final String MOPUB_ACTIVITY = "com.mopub.mobileads.MoPubActivity";
+    private static final String MRAID_ACTIVITY = "com.mopub.mobileads.MraidActivity";
     private static final List<Class<? extends Activity>> REQUIRED_WEB_VIEW_SDK_ACTIVITIES;
     private static FlagCheckUtil sFlagCheckUtil = new FlagCheckUtil();
 
@@ -36,8 +38,15 @@ private ManifestUtils() {}
         REQUIRED_WEB_VIEW_SDK_ACTIVITIES = new ArrayList<Class<? extends Activity>>(4);
         // As a convenience, full class paths are provided here, in case the MoPub SDK was imported
         // incorrectly and these files were left out.
-        REQUIRED_WEB_VIEW_SDK_ACTIVITIES.add(com.mopub.mobileads.MoPubActivity.class);
-        REQUIRED_WEB_VIEW_SDK_ACTIVITIES.add(com.mopub.mobileads.MraidActivity.class);
+        try {
+            final Class moPubActivityClass = Class.forName(MOPUB_ACTIVITY);
+            final Class mraidActivityClass = Class.forName(MRAID_ACTIVITY);
+            REQUIRED_WEB_VIEW_SDK_ACTIVITIES.add(moPubActivityClass);
+            REQUIRED_WEB_VIEW_SDK_ACTIVITIES.add(mraidActivityClass);
+        } catch (ClassNotFoundException e) {
+            MoPubLog.i("ManifestUtils running without interstitial module");
+        }
+
         REQUIRED_WEB_VIEW_SDK_ACTIVITIES.add(com.mopub.mobileads.MraidVideoPlayerActivity.class);
         REQUIRED_WEB_VIEW_SDK_ACTIVITIES.add(com.mopub.common.MoPubBrowser.class);
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/MoPubCollections.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/MoPubCollections.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/MoPubCollections.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/MoPubCollections.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Numbers.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Numbers.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/Numbers.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Numbers.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Reflection.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java
similarity index 80%
rename from mopub-sdk/src/main/java/com/mopub/common/util/Reflection.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java
index 658d5948..5755e559 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/Reflection.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java
@@ -108,4 +108,22 @@ public static boolean classFound(final String className) {
 
         return constructor.newInstance();
     }
+
+    public static <T> T instantiateClassWithConstructor(@NonNull final String className,
+            @NonNull final Class<? extends T> superClass, @NonNull Class[] classes,
+            @NonNull Object[] parameters)
+            throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException,
+            InvocationTargetException, InstantiationException {
+        Preconditions.checkNotNull(className);
+        Preconditions.checkNotNull(superClass);
+        Preconditions.checkNotNull(classes);
+        Preconditions.checkNotNull(parameters);
+
+        final Class<? extends T> clazz = Class.forName(className).asSubclass(superClass);
+        // noinspection unchecked
+        final Constructor<? extends T> constructor = clazz.getDeclaredConstructor(classes);
+        constructor.setAccessible(true);
+
+        return constructor.newInstance(parameters);
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/ResponseHeader.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/ResponseHeader.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Streams.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Streams.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/Streams.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Streams.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Strings.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Strings.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/Strings.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Strings.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Timer.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Timer.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/Timer.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Timer.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Utils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Utils.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/Utils.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Utils.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/VersionCode.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/VersionCode.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/VersionCode.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/VersionCode.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Views.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Views.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/Views.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Views.java
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Visibility.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Visibility.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/util/Visibility.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Visibility.java
diff --git a/mopub-sdk/src/main/java/com/mopub/exceptions/IntentNotResolvableException.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/exceptions/IntentNotResolvableException.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/exceptions/IntentNotResolvableException.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/exceptions/IntentNotResolvableException.java
diff --git a/mopub-sdk/src/main/java/com/mopub/exceptions/UrlParseException.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/exceptions/UrlParseException.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/exceptions/UrlParseException.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/exceptions/UrlParseException.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertGestureListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdAlertGestureListener.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertGestureListener.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdAlertGestureListener.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdAlertReporter.java
similarity index 55%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdAlertReporter.java
index ca5087ce..48a7898f 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdAlertReporter.java
@@ -7,25 +7,19 @@
 import android.support.annotation.Nullable;
 import android.util.Base64;
 import android.view.View;
+import android.widget.Toast;
 
 import com.mopub.common.AdReport;
-import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.DateAndTime;
-import com.mopub.common.util.Streams;
+import com.mopub.common.util.Intents;
+import com.mopub.exceptions.IntentNotResolvableException;
 
 import java.io.ByteArrayOutputStream;
-import java.io.File;
-import java.io.FileOutputStream;
 import java.text.SimpleDateFormat;
-import java.util.ArrayList;
 import java.util.Locale;
 
 public class AdAlertReporter {
     private static final String EMAIL_RECIPIENT = "creative-review@mopub.com";
-    private static final String EMAIL_SCHEME = "mailto:";
-    private static final String SCREEN_SHOT_FILENAME = "mp_adalert_screenshot.png";
-    private static final String PARAMETERS_FILENAME = "mp_adalert_parameters.txt";
-    private static final String MARKUP_FILENAME = "mp_adalert_markup.html";
     private static final String DATE_FORMAT_PATTERN = "M/d/yy hh:mm:ss a z";
     private static final int IMAGE_QUALITY = 25;
     private static final String BODY_SEPARATOR = "\n=================\n";
@@ -35,7 +29,6 @@
     private final View mView;
     private final Context mContext;
     private Intent mEmailIntent;
-    private ArrayList<Uri> mEmailAttachments;
     private String mParameters;
     private String mResponse;
 
@@ -43,8 +36,6 @@ public AdAlertReporter(final Context context, final View view, @Nullable final A
         mView = view;
         mContext = context;
 
-        mEmailAttachments = new ArrayList<Uri>();
-
         SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN, Locale.US);
         mDateString = dateFormat.format(DateAndTime.now());
 
@@ -60,24 +51,22 @@ public AdAlertReporter(final Context context, final View view, @Nullable final A
 
         addEmailSubject();
         addEmailBody(mParameters, mResponse, screenShotString);
-        addTextAttachment(PARAMETERS_FILENAME, mParameters);
-        addTextAttachment(MARKUP_FILENAME, mResponse);
-        addImageAttachment(SCREEN_SHOT_FILENAME, screenShot);
     }
 
     public void send() {
-        mEmailIntent.putParcelableArrayListExtra(Intent.EXTRA_STREAM, mEmailAttachments);
-
-        Intent chooserIntent = Intent.createChooser(mEmailIntent, "Send Email...");
-        chooserIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        mContext.startActivity(chooserIntent);
+        try {
+            Intents.startActivity(mContext, mEmailIntent);
+        } catch (IntentNotResolvableException e) {
+            Toast.makeText(mContext, "No email client available", Toast.LENGTH_SHORT).show();
+        }
     }
 
     private void initEmailIntent() {
-        Uri emailScheme = Uri.parse(EMAIL_SCHEME);
-        mEmailIntent = new Intent(Intent.ACTION_SEND_MULTIPLE);
-        mEmailIntent.setDataAndType(emailScheme, "plain/text");
-        mEmailIntent.putExtra(Intent.EXTRA_EMAIL, new String[]{EMAIL_RECIPIENT});
+        mEmailIntent = new Intent(Intent.ACTION_SENDTO);
+        // Should not set type since that either overrides (via setType) or conflicts with
+        // (via setDataAndType) the data, resulting in NO applications being able to handle this
+        // intent.
+        mEmailIntent.setData(Uri.parse("mailto:" + EMAIL_RECIPIENT));
     }
 
     private Bitmap takeScreenShot() {
@@ -116,7 +105,8 @@ private String convertBitmapInWEBPToBase64EncodedString(Bitmap bitmap) {
     }
 
     private void addEmailSubject() {
-        mEmailIntent.putExtra(Intent.EXTRA_SUBJECT, "New creative violation report - " + mDateString);
+        mEmailIntent.putExtra(Intent.EXTRA_SUBJECT, "New creative violation report - "
+                + mDateString);
     }
 
     private void addEmailBody(String... data) {
@@ -132,57 +122,11 @@ private void addEmailBody(String... data) {
         mEmailIntent.putExtra(Intent.EXTRA_TEXT, body.toString());
     }
 
-    private void addImageAttachment(String fileName, Bitmap bitmap) {
-        FileOutputStream fileOutputStream = null;
-
-        if (fileName == null || bitmap == null) {
-            return;
-        }
-
-        try {
-            fileOutputStream = mContext.openFileOutput(fileName, Context.MODE_WORLD_READABLE);
-            // image quality is okay to be 0 here, since PNG is lossless and will ignore compression quality
-            bitmap.compress(Bitmap.CompressFormat.PNG, IMAGE_QUALITY, fileOutputStream);
-
-            Uri fileUri = Uri.fromFile(new File(mContext.getFilesDir() + File.separator + fileName));
-            mEmailAttachments.add(fileUri);
-        } catch (Exception exception) {
-            MoPubLog.d("Unable to write text attachment to file: " + fileName);
-        } finally {
-            Streams.closeStream(fileOutputStream);
-        }
-    }
-
-    private void addTextAttachment(String fileName, String body) {
-        FileOutputStream fileOutputStream = null;
-
-        if (fileName == null || body == null) {
-            return;
-        }
-
-        try {
-            fileOutputStream = mContext.openFileOutput(fileName, Context.MODE_WORLD_READABLE);
-            fileOutputStream.write(body.getBytes());
-
-            Uri fileUri = Uri.fromFile(new File(mContext.getFilesDir() + File.separator + fileName));
-            mEmailAttachments.add(fileUri);
-        } catch (Exception exception) {
-            MoPubLog.d("Unable to write text attachment to file: " + fileName);
-        } finally {
-            Streams.closeStream(fileOutputStream);
-        }
-    }
-
     @Deprecated // for testing
     Intent getEmailIntent() {
         return mEmailIntent;
     }
 
-    @Deprecated // for testing
-    ArrayList<Uri> getEmailAttachments() {
-        return mEmailAttachments;
-    }
-
     @Deprecated // for testing
     String getParameters() {
         return mParameters;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdRequestStatusMapping.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdRequestStatusMapping.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/AdRequestStatusMapping.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdRequestStatusMapping.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdTypeTranslator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
similarity index 98%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
index a2e3c9f2..0d83a418 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
@@ -259,7 +259,10 @@ public void reload() {
         loadNonJavascript(mUrl);
     }
 
-    void loadFailUrl(MoPubErrorCode errorCode) {
+    /**
+     * Returns true if continuing to load the failover url, false if the ad actually did not fill.
+     */
+    boolean loadFailUrl(MoPubErrorCode errorCode) {
         mIsLoading = false;
 
         Log.v("MoPub", "MoPubErrorCode: " + (errorCode == null ? "" : errorCode.toString()));
@@ -268,9 +271,11 @@ void loadFailUrl(MoPubErrorCode errorCode) {
         if (!TextUtils.isEmpty(failUrl)) {
             MoPubLog.d("Loading failover url: " + failUrl);
             loadNonJavascript(failUrl);
+            return true;
         } else {
             // No other URLs to try, so signal a failure.
             adDidFail(MoPubErrorCode.NO_FILL);
+            return false;
         }
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseBroadcastReceiver.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseBroadcastReceiver.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/BaseBroadcastReceiver.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseBroadcastReceiver.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
similarity index 92%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
index 1a4dc8b5..a3906be0 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
@@ -6,9 +6,8 @@
 import android.content.Intent;
 import android.media.AudioManager;
 
+import com.mopub.common.Constants;
 import com.mopub.common.logging.MoPubLog;
-import com.mopub.nativeads.NativeVideoController;
-import com.mopub.nativeads.NativeVideoViewController;
 
 import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
@@ -72,8 +71,8 @@ public static Intent createIntentNativeVideo(final Context context, final long n
         final Intent intentVideoPlayerActivity = new Intent(context, MraidVideoPlayerActivity.class);
         intentVideoPlayerActivity.setFlags(FLAG_ACTIVITY_NEW_TASK);
         intentVideoPlayerActivity.putExtra(VIDEO_CLASS_EXTRAS_KEY, "native");
-        intentVideoPlayerActivity.putExtra(NativeVideoViewController.NATIVE_VIDEO_ID, nativeVideoId);
-        intentVideoPlayerActivity.putExtra(NativeVideoViewController.NATIVE_VAST_VIDEO_CONFIG, vastVideoConfig);
+        intentVideoPlayerActivity.putExtra(Constants.NATIVE_VIDEO_ID, nativeVideoId);
+        intentVideoPlayerActivity.putExtra(Constants.NATIVE_VAST_VIDEO_CONFIG, vastVideoConfig);
         return intentVideoPlayerActivity;
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
similarity index 95%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
index d1504467..6bc577f0 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
@@ -12,10 +12,9 @@
 import android.widget.RelativeLayout;
 import android.widget.VideoView;
 
+import com.mopub.common.IntentActions;
 import com.mopub.common.logging.MoPubLog;
 
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
-
 public abstract class BaseVideoViewController {
     private final Context mContext;
     private final RelativeLayout mLayout;
@@ -76,7 +75,7 @@ public ViewGroup getLayout() {
 
     protected void videoError(boolean shouldFinish) {
         MoPubLog.e("Video cannot be played.");
-        broadcastAction(ACTION_INTERSTITIAL_FAIL);
+        broadcastAction(IntentActions.ACTION_INTERSTITIAL_FAIL);
         if (shouldFinish) {
            mBaseVideoViewControllerListener.onFinish();
         }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseWebView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseWebView.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/BaseWebView.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseWebView.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/FacebookKeywordProvider.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/FacebookKeywordProvider.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/FacebookKeywordProvider.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/FacebookKeywordProvider.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewListener.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewListener.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewListener.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubErrorCode.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/MoPubErrorCode.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
similarity index 83%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
index aed32832..cbae4920 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
@@ -16,11 +16,12 @@
 import android.widget.FrameLayout;
 
 import com.mopub.common.AdFormat;
+import com.mopub.common.AdReport;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.ManifestUtils;
+import com.mopub.common.util.Reflection;
 import com.mopub.common.util.Visibility;
 import com.mopub.mobileads.factories.AdViewControllerFactory;
-import com.mopub.mobileads.factories.CustomEventBannerAdapterFactory;
 
 import java.util.HashSet;
 import java.util.Map;
@@ -38,9 +39,13 @@
         public void onBannerCollapsed(MoPubView banner);
     }
 
+    private final String CUSTOM_EVENT_BANNER_ADAPTER_FACTORY =
+            "com.mopub.mobileads.factories.CustomEventBannerAdapterFactory";
+
     @Nullable
     protected AdViewController mAdViewController;
-    protected CustomEventBannerAdapter mCustomEventBannerAdapter;
+    // mCustomEventBannerAdapter must be a CustomEventBannerAdapter
+    protected Object mCustomEventBannerAdapter;
 
     private Context mContext;
     private int mScreenVisibility;
@@ -138,17 +143,32 @@ public void destroy() {
         }
 
         if (mCustomEventBannerAdapter != null) {
-            mCustomEventBannerAdapter.invalidate();
+            invalidateAdapter();
             mCustomEventBannerAdapter = null;
         }
     }
 
+    private void invalidateAdapter() {
+        if (mCustomEventBannerAdapter != null) {
+            try {
+                new Reflection.MethodBuilder(mCustomEventBannerAdapter, "invalidate")
+                        .setAccessible()
+                        .execute();
+            } catch (Exception e) {
+                MoPubLog.e("Error invalidating adapter", e);
+            }
+        }
+    }
+
     Integer getAdTimeoutDelay() {
         return (mAdViewController != null) ? mAdViewController.getAdTimeoutDelay() : null;
     }
 
-    protected void loadFailUrl(MoPubErrorCode errorCode) {
-        if (mAdViewController != null) mAdViewController.loadFailUrl(errorCode);
+    protected boolean loadFailUrl(@NonNull final MoPubErrorCode errorCode) {
+        if (mAdViewController == null) {
+            return false;
+        }
+        return mAdViewController.loadFailUrl(errorCode);
     }
 
     protected void loadCustomEvent(String customEventClassName, Map<String, String> serverExtras) {
@@ -168,18 +188,31 @@ protected void loadCustomEvent(String customEventClassName, Map<String, String>
         }
 
         if (mCustomEventBannerAdapter != null) {
-            mCustomEventBannerAdapter.invalidate();
+            invalidateAdapter();
         }
 
         MoPubLog.d("Loading custom event adapter.");
 
-        mCustomEventBannerAdapter = CustomEventBannerAdapterFactory.create(
-                this,
-                customEventClassName,
-                serverExtras,
-                mAdViewController.getBroadcastIdentifier(),
-                mAdViewController.getAdReport());
-        mCustomEventBannerAdapter.loadAd();
+        if (Reflection.classFound(CUSTOM_EVENT_BANNER_ADAPTER_FACTORY)) {
+            try {
+                final Class<?> adapterFactoryClass = Class.forName(CUSTOM_EVENT_BANNER_ADAPTER_FACTORY);
+                mCustomEventBannerAdapter = new Reflection.MethodBuilder(null, "create")
+                        .setStatic(adapterFactoryClass)
+                        .addParam(MoPubView.class, this)
+                        .addParam(String.class, customEventClassName)
+                        .addParam(Map.class, serverExtras)
+                        .addParam(long.class, mAdViewController.getBroadcastIdentifier())
+                        .addParam(AdReport.class, mAdViewController.getAdReport())
+                        .execute();
+                new Reflection.MethodBuilder(mCustomEventBannerAdapter, "loadAd")
+                        .setAccessible()
+                        .execute();
+            } catch (Exception e) {
+                MoPubLog.e("Error loading custom event", e);
+            }
+        } else {
+            MoPubLog.e("Could not load custom event -- missing banner module");
+        }
     }
 
     protected void registerClick() {
@@ -227,7 +260,7 @@ private void setAdVisibility(final int visibility) {
 
     protected void adLoaded() {
         MoPubLog.d("adLoaded");
-        
+
         if (mBannerAdListener != null) {
             mBannerAdListener.onBannerLoaded(this);
         }
@@ -353,11 +386,13 @@ public boolean getTesting() {
 
     public void forceRefresh() {
         if (mCustomEventBannerAdapter != null) {
-            mCustomEventBannerAdapter.invalidate();
+            invalidateAdapter();
             mCustomEventBannerAdapter = null;
         }
 
-        if (mAdViewController != null) mAdViewController.forceRefresh();
+        if (mAdViewController != null) {
+            mAdViewController.forceRefresh();
+        }
     }
 
     public AdViewController getAdViewController() {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
similarity index 80%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
index bbbf6322..ff1bfc63 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
@@ -2,6 +2,7 @@
 
 import android.app.Activity;
 import android.content.ActivityNotFoundException;
+import android.content.Context;
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.os.Bundle;
@@ -11,16 +12,19 @@
 import android.view.Window;
 import android.view.WindowManager;
 
+import com.mopub.common.IntentActions;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Intents;
+import com.mopub.common.util.Reflection;
 import com.mopub.mraid.MraidVideoViewController;
-import com.mopub.nativeads.NativeVideoViewController;
 
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
+import static com.mopub.mobileads.BaseBroadcastReceiver.broadcastAction;
 
 public class MraidVideoPlayerActivity extends BaseVideoPlayerActivity implements BaseVideoViewController.BaseVideoViewControllerListener {
+    private static final String NATIVE_VIDEO_VIEW_CONTROLLER =
+            "com.mopub.nativeads.NativeVideoViewController";
+
     @Nullable private BaseVideoViewController mBaseVideoController;
     private long mBroadcastIdentifier;
 
@@ -39,7 +43,7 @@ protected void onCreate(Bundle savedInstanceState) {
             // This can happen if the activity was started without valid intent extras. We leave
             // mBaseVideoController set to null, and finish the activity immediately.
 
-            broadcastAction(this, mBroadcastIdentifier, ACTION_INTERSTITIAL_FAIL);
+            broadcastAction(this, mBroadcastIdentifier, IntentActions.ACTION_INTERSTITIAL_FAIL);
             finish();
             return;
         }
@@ -110,7 +114,23 @@ private BaseVideoViewController createVideoViewController(Bundle savedInstanceSt
         } else if ("mraid".equals(clazz)) {
             return new MraidVideoViewController(this, getIntent().getExtras(), savedInstanceState, this);
         } else if ("native".equals(clazz)) {
-            return new NativeVideoViewController(this, getIntent().getExtras(), savedInstanceState, this);
+            final Class[] constructorParameterClasses = { Context.class, Bundle.class, Bundle.class,
+                    BaseVideoViewController.BaseVideoViewControllerListener.class };
+            final Object[] constructorParameterValues =
+                    { this, getIntent().getExtras(), savedInstanceState, this };
+
+            if (!Reflection.classFound(NATIVE_VIDEO_VIEW_CONTROLLER)) {
+                throw new IllegalStateException("Missing native video module");
+            }
+
+            try {
+                return Reflection.instantiateClassWithConstructor(NATIVE_VIDEO_VIEW_CONTROLLER,
+                        BaseVideoViewController.class,
+                        constructorParameterClasses,
+                        constructorParameterValues);
+            } catch (Exception e) {
+                throw new IllegalStateException("Missing native video module");
+            }
         } else {
             throw new IllegalStateException("Unsupported video type: " + clazz);
         }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/RepeatingHandlerRunnable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/RepeatingHandlerRunnable.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/RepeatingHandlerRunnable.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/RepeatingHandlerRunnable.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastAdXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAdXmlManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastAdXmlManager.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAdXmlManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManager.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastCompanionAdConfig.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastCompanionAdConfig.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastCompanionAdConfig.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastCompanionAdConfig.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastCompanionAdXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastCompanionAdXmlManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastCompanionAdXmlManager.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastCompanionAdXmlManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastErrorCode.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastErrorCode.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastErrorCode.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastErrorCode.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastExtensionParentXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionParentXmlManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastExtensionParentXmlManager.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionParentXmlManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastExtensionXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionXmlManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastExtensionXmlManager.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionXmlManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastFractionalProgressTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastFractionalProgressTracker.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastFractionalProgressTracker.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastFractionalProgressTracker.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastIconConfig.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastIconConfig.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastIconConfig.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastIconConfig.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastIconXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastIconXmlManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastIconXmlManager.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastIconXmlManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastInLineXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastInLineXmlManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastInLineXmlManager.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastInLineXmlManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastMacro.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMacro.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastMacro.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMacro.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastMacroHelper.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMacroHelper.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastMacroHelper.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMacroHelper.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastManager.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastMediaXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMediaXmlManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastMediaXmlManager.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMediaXmlManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastResource.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastResource.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastResource.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastResource.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastResourceXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastResourceXmlManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastResourceXmlManager.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastResourceXmlManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastTracker.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastTracker.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastTracker.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoCloseButtonWidget.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoCloseButtonWidget.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoCloseButtonWidget.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoCloseButtonWidget.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoConfig.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoConfig.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoCtaButtonWidget.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoCtaButtonWidget.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoCtaButtonWidget.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoCtaButtonWidget.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoGradientStripWidget.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoGradientStripWidget.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoGradientStripWidget.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoGradientStripWidget.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoProgressBarWidget.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoProgressBarWidget.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoProgressBarWidget.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoProgressBarWidget.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoRadialCountdownWidget.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoRadialCountdownWidget.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoRadialCountdownWidget.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoRadialCountdownWidget.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoView.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoView.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoView.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java
similarity index 98%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java
index 1efde370..2015a857 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java
@@ -23,6 +23,7 @@
 import android.widget.RelativeLayout;
 import android.widget.VideoView;
 
+import com.mopub.common.IntentActions;
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.util.Dips;
@@ -35,9 +36,6 @@
 import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
 import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
 import static com.mopub.common.MoPubBrowser.MOPUB_BROWSER_REQUEST_CODE;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.VastXmlManagerAggregator.ADS_BY_AD_SLOT_ID;
 import static com.mopub.mobileads.VastXmlManagerAggregator.SOCIAL_ACTIONS_AD_SLOT_ID;
 import static com.mopub.network.TrackingRequest.makeVastTrackingHttpRequest;
@@ -142,7 +140,7 @@
             public boolean onTouch(View view, MotionEvent motionEvent) {
                 if (motionEvent.getAction() == MotionEvent.ACTION_UP && shouldAllowClickThrough()) {
                     mIsClosing = true;
-                    broadcastAction(ACTION_INTERSTITIAL_CLICK);
+                    broadcastAction(IntentActions.ACTION_INTERSTITIAL_CLICK);
                     mVastVideoConfig.handleClickForResult(activity,
                             mIsVideoFinishedPlaying ? mDuration : getCurrentPosition(),
                             MOPUB_BROWSER_REQUEST_CODE);
@@ -265,7 +263,7 @@ protected void onCreate() {
         }
 
         mVastVideoConfig.handleImpression(getContext(), getCurrentPosition());
-        broadcastAction(ACTION_INTERSTITIAL_SHOW);
+        broadcastAction(IntentActions.ACTION_INTERSTITIAL_SHOW);
     }
 
     @Override
@@ -296,7 +294,7 @@ protected void onPause() {
     @Override
     protected void onDestroy() {
         stopRunnables();
-        broadcastAction(ACTION_INTERSTITIAL_DISMISS);
+        broadcastAction(IntentActions.ACTION_INTERSTITIAL_DISMISS);
 
         mVideoView.onDestroy();
     }
@@ -400,7 +398,7 @@ public void onCompletion(MediaPlayer mp) {
                 videoCompleted(false);
                 mIsVideoFinishedPlaying = true;
                 if (mVastVideoConfig.isRewardedVideo()) {
-                    broadcastAction(RewardedVideoBroadcastReceiver.ACTION_REWARDED_VIDEO_COMPLETE);
+                    broadcastAction(IntentActions.ACTION_REWARDED_VIDEO_COMPLETE);
                 }
 
                 // Only fire the completion tracker if we hit all the progress marks. Some Android implementations
@@ -826,7 +824,7 @@ private VastWebView createCompanionVastWebView(@NonNull final Context context,
         companionView.setVastWebViewClickListener(new VastWebView.VastWebViewClickListener() {
             @Override
             public void onVastWebViewClick() {
-                broadcastAction(ACTION_INTERSTITIAL_CLICK);
+                broadcastAction(IntentActions.ACTION_INTERSTITIAL_CLICK);
                 makeVastTrackingHttpRequest(
                         vastCompanionAdConfig.getClickTrackers(),
                         null,
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewCountdownRunnable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewCountdownRunnable.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewCountdownRunnable.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewCountdownRunnable.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastWebView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWebView.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastWebView.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWebView.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastXmlManager.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VideoDownloader.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoDownloader.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VideoDownloader.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoDownloader.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VideoViewabilityTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoViewabilityTracker.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VideoViewabilityTracker.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoViewabilityTracker.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VideoViewabilityTrackerXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoViewabilityTrackerXmlManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VideoViewabilityTrackerXmlManager.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoViewabilityTrackerXmlManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/ViewGestureDetector.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ViewGestureDetector.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/ViewGestureDetector.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ViewGestureDetector.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/events/BannerAdType.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/events/BannerAdType.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/events/BannerAdType.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/events/BannerAdType.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/AdViewControllerFactory.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/AdViewControllerFactory.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/factories/AdViewControllerFactory.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/AdViewControllerFactory.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/MoPubViewFactory.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/MoPubViewFactory.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/factories/MoPubViewFactory.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/MoPubViewFactory.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/MraidControllerFactory.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/MraidControllerFactory.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/factories/MraidControllerFactory.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/MraidControllerFactory.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/VastManagerFactory.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/VastManagerFactory.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/factories/VastManagerFactory.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/VastManagerFactory.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/BaseWidgetDrawable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/BaseWidgetDrawable.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/resource/BaseWidgetDrawable.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/BaseWidgetDrawable.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/CtaButtonDrawable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CtaButtonDrawable.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/resource/CtaButtonDrawable.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CtaButtonDrawable.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/ProgressBarDrawable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/ProgressBarDrawable.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/resource/ProgressBarDrawable.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/ProgressBarDrawable.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/RadialCountdownDrawable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/RadialCountdownDrawable.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/resource/RadialCountdownDrawable.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/RadialCountdownDrawable.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/WebViews.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/util/WebViews.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/util/WebViews.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/util/WebViews.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/XmlUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/util/XmlUtils.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/util/XmlUtils.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/util/XmlUtils.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidBridge.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidBridge.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mraid/MraidBridge.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidBridge.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidCommandException.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidCommandException.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mraid/MraidCommandException.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidCommandException.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
similarity index 99%
rename from mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
index f8a41988..aaf3ce0c 100644
--- a/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
@@ -617,6 +617,7 @@ private void setViewState(@NonNull ViewState viewState) {
     private void setViewState(@NonNull ViewState viewState, @Nullable Runnable successRunnable) {
         // Make sure this is a valid transition.
         MoPubLog.d("MRAID state set to " + viewState);
+        final ViewState previousViewState = mViewState;
         mViewState = viewState;
         mMraidBridge.notifyViewState(viewState);
 
@@ -628,6 +629,8 @@ private void setViewState(@NonNull ViewState viewState, @Nullable Runnable succe
         if (mMraidListener != null) {
             if (viewState == ViewState.EXPANDED) {
                 mMraidListener.onExpand();
+            } else if (previousViewState == ViewState.EXPANDED && viewState == ViewState.DEFAULT) {
+                mMraidListener.onClose();
             } else if (viewState == ViewState.HIDDEN) {
                 mMraidListener.onClose();
             }
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidJavascriptCommand.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidJavascriptCommand.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mraid/MraidJavascriptCommand.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidJavascriptCommand.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidNativeCommandHandler.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidNativeCommandHandler.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mraid/MraidNativeCommandHandler.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidNativeCommandHandler.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidOrientation.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidOrientation.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mraid/MraidOrientation.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidOrientation.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidScreenMetrics.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidScreenMetrics.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mraid/MraidScreenMetrics.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidScreenMetrics.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidVideoViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidVideoViewController.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mraid/MraidVideoViewController.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidVideoViewController.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidWebViewDebugListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidWebViewDebugListener.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mraid/MraidWebViewDebugListener.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidWebViewDebugListener.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/PlacementType.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/PlacementType.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mraid/PlacementType.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/PlacementType.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/ViewState.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/ViewState.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mraid/ViewState.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/ViewState.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/events/NativeAdEventsListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/nativeads/events/NativeAdEventsListener.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/events/NativeAdEventsListener.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/nativeads/events/NativeAdEventsListener.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/events/NativeAdEventsObserver.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/nativeads/events/NativeAdEventsObserver.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/events/NativeAdEventsObserver.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/nativeads/events/NativeAdEventsObserver.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/events/NativeAdType.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/nativeads/events/NativeAdType.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/events/NativeAdType.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/nativeads/events/NativeAdType.java
diff --git a/mopub-sdk/src/main/java/com/mopub/network/AdRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/network/AdRequest.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
diff --git a/mopub-sdk/src/main/java/com/mopub/network/AdResponse.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdResponse.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/network/AdResponse.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdResponse.java
diff --git a/mopub-sdk/src/main/java/com/mopub/network/BackoffPolicy.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/BackoffPolicy.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/network/BackoffPolicy.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/BackoffPolicy.java
diff --git a/mopub-sdk/src/main/java/com/mopub/network/CustomSSLSocketFactory.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/CustomSSLSocketFactory.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/network/CustomSSLSocketFactory.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/CustomSSLSocketFactory.java
diff --git a/mopub-sdk/src/main/java/com/mopub/network/HeaderUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/HeaderUtils.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/network/HeaderUtils.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/HeaderUtils.java
diff --git a/mopub-sdk/src/main/java/com/mopub/network/MaxWidthImageLoader.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MaxWidthImageLoader.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/network/MaxWidthImageLoader.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MaxWidthImageLoader.java
diff --git a/mopub-sdk/src/main/java/com/mopub/network/MoPubNetworkError.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubNetworkError.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/network/MoPubNetworkError.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubNetworkError.java
diff --git a/mopub-sdk/src/main/java/com/mopub/network/MoPubRequestQueue.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequestQueue.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/network/MoPubRequestQueue.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequestQueue.java
diff --git a/mopub-sdk/src/main/java/com/mopub/network/Networking.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/network/Networking.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java
diff --git a/mopub-sdk/src/main/java/com/mopub/network/PlayServicesUrlRewriter.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/PlayServicesUrlRewriter.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/network/PlayServicesUrlRewriter.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/PlayServicesUrlRewriter.java
diff --git a/mopub-sdk/src/main/java/com/mopub/network/RequestManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/RequestManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/network/RequestManager.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/RequestManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/network/RequestQueueHttpStack.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/RequestQueueHttpStack.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/network/RequestQueueHttpStack.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/RequestQueueHttpStack.java
diff --git a/mopub-sdk/src/main/java/com/mopub/network/ScribeBackoffPolicy.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/ScribeBackoffPolicy.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/network/ScribeBackoffPolicy.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/ScribeBackoffPolicy.java
diff --git a/mopub-sdk/src/main/java/com/mopub/network/ScribeRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/ScribeRequest.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/network/ScribeRequest.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/ScribeRequest.java
diff --git a/mopub-sdk/src/main/java/com/mopub/network/ScribeRequestManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/ScribeRequestManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/network/ScribeRequestManager.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/ScribeRequestManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/network/TrackingRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/TrackingRequest.java
similarity index 98%
rename from mopub-sdk/src/main/java/com/mopub/network/TrackingRequest.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/TrackingRequest.java
index f806a0a9..7d310976 100644
--- a/mopub-sdk/src/main/java/com/mopub/network/TrackingRequest.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/TrackingRequest.java
@@ -25,6 +25,9 @@
 
 public class TrackingRequest extends Request<Void> {
 
+    // Retrying may cause duplicate impressions
+    private static final int ZERO_RETRIES = 0;
+
     public interface Listener extends Response.ErrorListener {
         void onResponse(@NonNull String url);
     }
@@ -37,7 +40,7 @@ private TrackingRequest(@NonNull final String url, @Nullable final Listener list
         setShouldCache(false);
         setRetryPolicy(new DefaultRetryPolicy(
                 DefaultRetryPolicy.DEFAULT_TIMEOUT_MS,
-                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,
+                ZERO_RETRIES,
                 DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
     }
 
diff --git a/mopub-sdk/mopub-sdk-interstitial/build.gradle b/mopub-sdk/mopub-sdk-interstitial/build.gradle
new file mode 100644
index 00000000..fe56e07f
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-interstitial/build.gradle
@@ -0,0 +1,11 @@
+apply from: '../shared-build.gradle'
+
+dependencies {
+    compile project(':mopub-sdk:mopub-sdk-base')
+}
+
+project.description = 'MoPub Android SDK - Interstitial'
+project.ext.displayName = 'MoPub Android SDK - Interstitial'
+project.ext.projectName = 'mopub-sdk-interstitial'
+project.ext.uploadName = 'mopub-android-sdk-interstitial'
+apply from: '../publisher.gradle'
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/AndroidManifest.xml b/mopub-sdk/mopub-sdk-interstitial/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..643b97ff
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/AndroidManifest.xml
@@ -0,0 +1,4 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.mopub.mobileads.interstitial">
+    <application/>
+</manifest>
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
rename to mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
rename to mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
rename to mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/DefaultInterstitialAdListener.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/DefaultInterstitialAdListener.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/DefaultInterstitialAdListener.java
rename to mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/DefaultInterstitialAdListener.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java
similarity index 65%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java
rename to mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java
index 0e19182f..bfe38ea0 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java
@@ -5,6 +5,8 @@
 import android.content.IntentFilter;
 import android.support.annotation.NonNull;
 
+import com.mopub.common.IntentActions;
+
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 
@@ -12,10 +14,6 @@
     private final CustomEventInterstitialListener mCustomEventInterstitialListener;
 
 
-    public static final String ACTION_INTERSTITIAL_FAIL = "com.mopub.action.interstitial.fail";
-    public static final String ACTION_INTERSTITIAL_SHOW = "com.mopub.action.interstitial.show";
-    public static final String ACTION_INTERSTITIAL_DISMISS = "com.mopub.action.interstitial.dismiss";
-    public static final String ACTION_INTERSTITIAL_CLICK = "com.mopub.action.interstitial.click";
     private static IntentFilter sIntentFilter;
 
 
@@ -29,10 +27,10 @@ public EventForwardingBroadcastReceiver(CustomEventInterstitialListener customEv
     public IntentFilter getIntentFilter() {
         if (sIntentFilter == null) {
             sIntentFilter = new IntentFilter();
-            sIntentFilter.addAction(ACTION_INTERSTITIAL_FAIL);
-            sIntentFilter.addAction(ACTION_INTERSTITIAL_SHOW);
-            sIntentFilter.addAction(ACTION_INTERSTITIAL_DISMISS);
-            sIntentFilter.addAction(ACTION_INTERSTITIAL_CLICK);
+            sIntentFilter.addAction(IntentActions.ACTION_INTERSTITIAL_FAIL);
+            sIntentFilter.addAction(IntentActions.ACTION_INTERSTITIAL_SHOW);
+            sIntentFilter.addAction(IntentActions.ACTION_INTERSTITIAL_DISMISS);
+            sIntentFilter.addAction(IntentActions.ACTION_INTERSTITIAL_CLICK);
         }
         return sIntentFilter;
     }
@@ -48,14 +46,14 @@ public void onReceive(Context context, Intent intent) {
         }
 
         final String action = intent.getAction();
-        if (ACTION_INTERSTITIAL_FAIL.equals(action)) {
+        if (IntentActions.ACTION_INTERSTITIAL_FAIL.equals(action)) {
             mCustomEventInterstitialListener.onInterstitialFailed(NETWORK_INVALID_STATE);
-        } else if (ACTION_INTERSTITIAL_SHOW.equals(action)) {
+        } else if (IntentActions.ACTION_INTERSTITIAL_SHOW.equals(action)) {
             mCustomEventInterstitialListener.onInterstitialShown();
-        } else if (ACTION_INTERSTITIAL_DISMISS.equals(action)) {
+        } else if (IntentActions.ACTION_INTERSTITIAL_DISMISS.equals(action)) {
             mCustomEventInterstitialListener.onInterstitialDismissed();
             unregister(this);
-        } else if (ACTION_INTERSTITIAL_CLICK.equals(action)) {
+        } else if (IntentActions.ACTION_INTERSTITIAL_CLICK.equals(action)) {
             mCustomEventInterstitialListener.onInterstitialClicked();
         }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
rename to mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java
rename to mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubActivity.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java
similarity index 94%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/MoPubActivity.java
rename to mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java
index 4e3a4480..649ea18f 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubActivity.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java
@@ -27,10 +27,10 @@
 import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
 import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
 import static com.mopub.mobileads.HtmlWebViewClient.MOPUB_FAIL_LOAD;
 import static com.mopub.mobileads.HtmlWebViewClient.MOPUB_FINISH_LOAD;
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
new file mode 100644
index 00000000..92bcde01
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
@@ -0,0 +1,473 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.location.Location;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.mopub.common.AdFormat;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.mobileads.factories.CustomEventInterstitialAdapterFactory;
+
+import java.util.Map;
+
+import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
+import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.IDLE;
+import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.LOADING;
+import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.READY;
+import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.SHOWING;
+import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.DESTROYED;
+
+public class MoPubInterstitial implements CustomEventInterstitialAdapter.CustomEventInterstitialAdapterListener {
+    @VisibleForTesting
+    enum InterstitialState {
+        /**
+         * Waiting to something to happen. There is no interstitial currently loaded.
+         */
+        IDLE,
+
+        /**
+         * Loading an interstitial.
+         */
+        LOADING,
+
+        /**
+         * Loaded and ready to be shown.
+         */
+        READY,
+
+        /**
+         * The interstitial is showing.
+         */
+        SHOWING,
+
+        /**
+         * No longer able to accept events as the internal InterstitialView has been destroyed.
+         */
+        DESTROYED
+    }
+
+    @NonNull private MoPubInterstitialView mInterstitialView;
+    @Nullable private CustomEventInterstitialAdapter mCustomEventInterstitialAdapter;
+    @Nullable private InterstitialAdListener mInterstitialAdListener;
+    @NonNull private Activity mActivity;
+    @NonNull private InterstitialState mCurrentInterstitialState;
+
+    public interface InterstitialAdListener {
+        void onInterstitialLoaded(MoPubInterstitial interstitial);
+        void onInterstitialFailed(MoPubInterstitial interstitial, MoPubErrorCode errorCode);
+        void onInterstitialShown(MoPubInterstitial interstitial);
+        void onInterstitialClicked(MoPubInterstitial interstitial);
+        void onInterstitialDismissed(MoPubInterstitial interstitial);
+    }
+
+    public MoPubInterstitial(@NonNull final Activity activity, @NonNull final String adUnitId) {
+        mActivity = activity;
+
+        mInterstitialView = new MoPubInterstitialView(mActivity);
+        mInterstitialView.setAdUnitId(adUnitId);
+
+        mCurrentInterstitialState = IDLE;
+    }
+
+    private boolean attemptStateTransition(@NonNull final InterstitialState endState) {
+        return attemptStateTransition(endState, false);
+    }
+
+    /**
+     * Attempts to transition to the new state. All state transitions should go through this method.
+     * Other methods should not be modifying mCurrentInterstitialState.
+     *
+     * @param endState     The desired end state.
+     * @param forceRefresh Whether or not this is part of a forceRefresh transition. Force
+     *                     refresh can happen from IDLE, LOADING, or READY. It will ignore
+     *                     the currently loading or loaded ad and attempt to load another.
+     * @return {@code true} if a state change happened, {@code false} if no state change happened.
+     */
+    @VisibleForTesting
+    boolean attemptStateTransition(@NonNull final InterstitialState endState,
+            boolean forceRefresh) {
+        Preconditions.checkNotNull(endState);
+
+        final InterstitialState startState = mCurrentInterstitialState;
+
+        /**
+         * There are 50 potential cases. Any combination that is a no op will not be enumerated
+         * and returns false. The usual case goes IDLE -> LOADING -> READY -> SHOWING -> IDLE. At
+         * most points, having the force refresh flag into IDLE resets MoPubInterstitial and clears
+         * the interstitial adapter. This cannot happen while an interstitial is showing. Also,
+         * MoPubInterstitial can be destroyed arbitrarily, and once this is destroyed, it no longer
+         * can perform any state transitions.
+         */
+        switch (startState) {
+            case IDLE:
+                switch(endState) {
+                    case LOADING:
+                        // Going from IDLE to LOADING is the usual load case
+                        invalidateInterstitialAdapter();
+                        mCurrentInterstitialState = LOADING;
+                        if (forceRefresh) {
+                            // Force-load means a pub-initiated force refresh.
+                            mInterstitialView.forceRefresh();
+                        } else {
+                            // Otherwise, do a normal load
+                            mInterstitialView.loadAd();
+                        }
+                        return true;
+                    case SHOWING:
+                        MoPubLog.d("No interstitial loading or loaded.");
+                        return false;
+                    case DESTROYED:
+                        setInterstitialStateDestroyed();
+                        return true;
+                    default:
+                        return false;
+                }
+            case LOADING:
+                switch (endState) {
+                    case IDLE:
+                        // Being forced back into idle while loading resets MoPubInterstitial while
+                        // not forced just means the load failed. Either way, it should reset the
+                        // state back into IDLE.
+                        invalidateInterstitialAdapter();
+                        mCurrentInterstitialState = IDLE;
+                        return true;
+                    case LOADING:
+                        if (!forceRefresh) {
+                            // Cannot load more than one interstitial at a time
+                            MoPubLog.d("Already loading an interstitial.");
+                        }
+                        return false;
+                    case READY:
+                        // This is the usual load finished transition
+                        mCurrentInterstitialState = READY;
+                        return true;
+                    case SHOWING:
+                        MoPubLog.d("Interstitial is not ready to be shown yet.");
+                        return false;
+                    case DESTROYED:
+                        setInterstitialStateDestroyed();
+                        return true;
+                    default:
+                        return false;
+                }
+            case READY:
+                switch (endState) {
+                    case IDLE:
+                        if (forceRefresh) {
+                            // This happens on a force refresh
+                            invalidateInterstitialAdapter();
+                            mCurrentInterstitialState = IDLE;
+                            return true;
+                        }
+                        return false;
+                    case LOADING:
+                        // This is to prevent loading another interstitial while one is loaded.
+                        MoPubLog.d("Interstitial already loaded. Not loading another.");
+                        // Let the ad listener know that there's already an ad loaded
+                        if (mInterstitialAdListener != null) {
+                            mInterstitialAdListener.onInterstitialLoaded(this);
+                        }
+                        return false;
+                    case SHOWING:
+                        // This is the usual transition from ready to showing
+                        showCustomEventInterstitial();
+                        mCurrentInterstitialState = SHOWING;
+                        return true;
+                    case DESTROYED:
+                        setInterstitialStateDestroyed();
+                        return true;
+                    default:
+                        return false;
+                }
+            case SHOWING:
+                switch(endState) {
+                    case IDLE:
+                        if (forceRefresh) {
+                            MoPubLog.d("Cannot force refresh while showing an interstitial.");
+                            return false;
+                        }
+                        // This is the usual transition when done showing this interstitial
+                        invalidateInterstitialAdapter();
+                        mCurrentInterstitialState = IDLE;
+                        return true;
+                    case LOADING:
+                        if (!forceRefresh) {
+                            MoPubLog.d("Interstitial already showing. Not loading another.");
+                        }
+                        return false;
+                    case SHOWING:
+                        MoPubLog.d("Already showing an interstitial. Cannot show it again.");
+                        return false;
+                    case DESTROYED:
+                        setInterstitialStateDestroyed();
+                        return true;
+                    default:
+                        return false;
+                }
+            case DESTROYED:
+                // Once destroyed, MoPubInterstitial is no longer functional.
+                MoPubLog.d("MoPubInterstitial destroyed. Ignoring all requests.");
+                return false;
+            default:
+                return false;
+        }
+    }
+
+    /**
+     * Sets MoPubInterstitial to be destroyed. This should only be called by attemptStateTransition.
+     */
+    private void setInterstitialStateDestroyed() {
+        invalidateInterstitialAdapter();
+        mInterstitialView.setBannerAdListener(null);
+        mInterstitialView.destroy();
+        mCurrentInterstitialState = DESTROYED;
+    }
+
+    public void load() {
+        attemptStateTransition(LOADING);
+    }
+
+    public boolean show() {
+        return attemptStateTransition(SHOWING);
+    }
+
+    public void forceRefresh() {
+        attemptStateTransition(IDLE, true);
+        attemptStateTransition(LOADING, true);
+    }
+
+    public boolean isReady() {
+        return mCurrentInterstitialState == READY;
+    }
+
+    boolean isDestroyed() {
+        return mCurrentInterstitialState == DESTROYED;
+    }
+
+    Integer getAdTimeoutDelay() {
+        return mInterstitialView.getAdTimeoutDelay();
+    }
+
+    @NonNull
+    MoPubInterstitialView getMoPubInterstitialView() {
+        return mInterstitialView;
+    }
+
+    private void showCustomEventInterstitial() {
+        if (mCustomEventInterstitialAdapter != null) {
+            mCustomEventInterstitialAdapter.showInterstitial();
+        }
+    }
+
+    private void invalidateInterstitialAdapter() {
+        if (mCustomEventInterstitialAdapter != null) {
+            mCustomEventInterstitialAdapter.invalidate();
+            mCustomEventInterstitialAdapter = null;
+        }
+    }
+
+    ////////////////////////////////////////////////////////////////////////////////////////////////
+
+    public void setKeywords(@Nullable final String keywords) {
+        mInterstitialView.setKeywords(keywords);
+    }
+
+    @Nullable
+    public String getKeywords() {
+        return mInterstitialView.getKeywords();
+    }
+
+    @NonNull
+    public Activity getActivity() {
+        return mActivity;
+    }
+
+    @Nullable
+    public Location getLocation() {
+        return mInterstitialView.getLocation();
+    }
+
+    public void destroy() {
+        attemptStateTransition(DESTROYED);
+    }
+
+    public void setInterstitialAdListener(@Nullable final InterstitialAdListener listener) {
+        mInterstitialAdListener = listener;
+    }
+
+    @Nullable
+    public InterstitialAdListener getInterstitialAdListener() {
+        return mInterstitialAdListener;
+    }
+
+    public void setTesting(boolean testing) {
+        mInterstitialView.setTesting(testing);
+    }
+
+    public boolean getTesting() {
+        return mInterstitialView.getTesting();
+    }
+
+    public void setLocalExtras(Map<String, Object> extras) {
+        mInterstitialView.setLocalExtras(extras);
+    }
+
+    @NonNull
+    public Map<String, Object> getLocalExtras() {
+        return mInterstitialView.getLocalExtras();
+    }
+
+    /*
+     * Implements CustomEventInterstitialAdapter.CustomEventInterstitialListener
+     * Note: All callbacks should be no-ops if the interstitial has been destroyed
+     */
+
+    @Override
+    public void onCustomEventInterstitialLoaded() {
+        if (isDestroyed()) {
+            return;
+        }
+
+        attemptStateTransition(READY);
+
+        if (mInterstitialAdListener != null) {
+            mInterstitialAdListener.onInterstitialLoaded(this);
+        }
+    }
+
+    @Override
+    public void onCustomEventInterstitialFailed(@NonNull final MoPubErrorCode errorCode) {
+        if (isDestroyed()) {
+            return;
+        }
+
+        if (!mInterstitialView.loadFailUrl(errorCode)) {
+            attemptStateTransition(IDLE);
+        }
+    }
+
+    @Override
+    public void onCustomEventInterstitialShown() {
+        if (isDestroyed()) {
+            return;
+        }
+
+        mInterstitialView.trackImpression();
+
+        if (mInterstitialAdListener != null) {
+            mInterstitialAdListener.onInterstitialShown(this);
+        }
+    }
+
+    @Override
+    public void onCustomEventInterstitialClicked() {
+        if (isDestroyed()) {
+            return;
+        }
+
+        mInterstitialView.registerClick();
+
+        if (mInterstitialAdListener != null) {
+            mInterstitialAdListener.onInterstitialClicked(this);
+        }
+    }
+
+    @Override
+    public void onCustomEventInterstitialDismissed() {
+        if (isDestroyed()) {
+            return;
+        }
+
+        attemptStateTransition(IDLE);
+
+        if (mInterstitialAdListener != null) {
+            mInterstitialAdListener.onInterstitialDismissed(this);
+        }
+    }
+
+    ////////////////////////////////////////////////////////////////////////////////////////////////
+
+    public class MoPubInterstitialView extends MoPubView {
+        public MoPubInterstitialView(Context context) {
+            super(context);
+            setAutorefreshEnabled(false);
+        }
+
+        @Override
+        public AdFormat getAdFormat() {
+            return AdFormat.INTERSTITIAL;
+        }
+
+        @Override
+        protected void loadCustomEvent(String customEventClassName, Map<String, String> serverExtras) {
+            if (mAdViewController == null) {
+                return;
+            }
+
+            if (TextUtils.isEmpty(customEventClassName)) {
+                MoPubLog.d("Couldn't invoke custom event because the server did not specify one.");
+                loadFailUrl(ADAPTER_NOT_FOUND);
+                return;
+            }
+
+            if (mCustomEventInterstitialAdapter != null) {
+                mCustomEventInterstitialAdapter.invalidate();
+            }
+
+            MoPubLog.d("Loading custom event interstitial adapter.");
+
+            mCustomEventInterstitialAdapter = CustomEventInterstitialAdapterFactory.create(
+                    MoPubInterstitial.this,
+                    customEventClassName,
+                    serverExtras,
+                    mAdViewController.getBroadcastIdentifier(),
+                    mAdViewController.getAdReport());
+            mCustomEventInterstitialAdapter.setAdapterListener(MoPubInterstitial.this);
+            mCustomEventInterstitialAdapter.loadInterstitial();
+        }
+
+        protected void trackImpression() {
+            MoPubLog.d("Tracking impression for interstitial.");
+            if (mAdViewController != null) mAdViewController.trackImpression();
+        }
+
+        @Override
+        protected void adFailed(MoPubErrorCode errorCode) {
+            attemptStateTransition(IDLE);
+            if (mInterstitialAdListener != null) {
+                mInterstitialAdListener.onInterstitialFailed(MoPubInterstitial.this, errorCode);
+            }
+        }
+    }
+
+    @VisibleForTesting
+    @Deprecated
+    void setInterstitialView(@NonNull MoPubInterstitialView interstitialView) {
+        mInterstitialView = interstitialView;
+    }
+
+    @VisibleForTesting
+    @Deprecated
+    void setCurrentInterstitialState(@NonNull final InterstitialState interstitialState) {
+        mCurrentInterstitialState = interstitialState;
+    }
+
+    @VisibleForTesting
+    @Deprecated
+    @NonNull
+    InterstitialState getCurrentInterstitialState() {
+        return mCurrentInterstitialState;
+    }
+
+    @VisibleForTesting
+    @Deprecated
+    void setCustomEventInterstitialAdapter(@NonNull final CustomEventInterstitialAdapter
+            customEventInterstitialAdapter) {
+        mCustomEventInterstitialAdapter = customEventInterstitialAdapter;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
similarity index 95%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java
rename to mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
index 9b21623f..7431b47d 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
@@ -31,10 +31,10 @@
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
 import static com.mopub.mobileads.BaseInterstitialActivity.JavaScriptWebViewCallbacks.WEB_VIEW_DID_CLOSE;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.broadcastAction;
 
 public class MraidActivity extends BaseInterstitialActivity {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
rename to mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
rename to mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialAdapterFactory.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialAdapterFactory.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialAdapterFactory.java
rename to mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialAdapterFactory.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialFactory.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialFactory.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialFactory.java
rename to mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialFactory.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactory.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactory.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactory.java
rename to mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactory.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mraid/MraidInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mraid/MraidInterstitial.java
rename to mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java
diff --git a/mopub-sdk/mopub-sdk-native-static/build.gradle b/mopub-sdk/mopub-sdk-native-static/build.gradle
new file mode 100644
index 00000000..e9a1c62d
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-native-static/build.gradle
@@ -0,0 +1,12 @@
+apply from: '../shared-build.gradle'
+
+dependencies {
+    compile project(':mopub-sdk:mopub-sdk-base')
+    compile 'com.android.support:recyclerview-v7:23.4.0'
+}
+
+project.description = 'MoPub Android SDK - Native Static'
+project.ext.displayName = 'MoPub Android SDK - Native Static'
+project.ext.projectName = 'mopub-sdk-native-static'
+project.ext.uploadName = 'mopub-android-sdk-native-static'
+//apply from: '../publisher.gradle'
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/AndroidManifest.xml b/mopub-sdk/mopub-sdk-native-static/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..ee9149e4
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/AndroidManifest.xml
@@ -0,0 +1,4 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.mopub.mobileads.native_static">
+    <application/>
+</manifest>
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/AdRendererRegistry.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/AdRendererRegistry.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/AdRendererRegistry.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/AdRendererRegistry.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/AdapterHelper.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/AdapterHelper.java
similarity index 88%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/AdapterHelper.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/AdapterHelper.java
index bc114f96..21206b09 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/AdapterHelper.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/AdapterHelper.java
@@ -1,6 +1,5 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
 import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
@@ -19,7 +18,10 @@
  */
 @Deprecated
 public final class AdapterHelper {
-    @NonNull private final WeakReference<Activity> mActivity;
+    /**
+     * Preferably an Activity Context.
+     */
+    @NonNull private final WeakReference<Context> mContext;
     @NonNull private final Context mApplicationContext;
     private final int mStart;
     private final int mInterval;
@@ -27,11 +29,10 @@
     @Deprecated
     public AdapterHelper(@NonNull final Context context, final int start, final int interval) {
         Preconditions.checkNotNull(context, "Context cannot be null.");
-        Preconditions.checkArgument(context instanceof Activity, "Context must be an Activity.");
         Preconditions.checkArgument(start >= 0, "start position must be non-negative");
         Preconditions.checkArgument(interval >= 2, "interval must be at least 2");
 
-        mActivity = new WeakReference<Activity>((Activity) context);
+        mContext = new WeakReference<Context>(context);
         mApplicationContext = context.getApplicationContext();
         mStart = start;
         mInterval = interval;
@@ -43,9 +44,9 @@ public View getAdView(@Nullable final View convertView,
             @Nullable final ViewGroup parent,
             @Nullable final NativeAd nativeAd,
             @Nullable final ViewBinder viewBinder) {
-        final Activity activity = mActivity.get();
-        if (activity == null) {
-            MoPubLog.w("Weak reference to Activity Context in"
+        final Context context = mContext.get();
+        if (context == null) {
+            MoPubLog.w("Weak reference to Context in"
                     + " AdapterHelper became null. Returning empty view.");
             return new View(mApplicationContext);
         }
@@ -53,7 +54,7 @@ public View getAdView(@Nullable final View convertView,
         return NativeAdViewHelper.getAdView(
                 convertView,
                 parent,
-                activity,
+                context,
                 nativeAd,
                 viewBinder
         );
@@ -113,7 +114,7 @@ private int numberOfAdsThatCouldFitWithContent(final int contentRowCount) {
     // Testing
     @Deprecated
     @VisibleForTesting
-    void clearActivityContext() {
-        mActivity.clear();
+    void clearContext() {
+        mContext.clear();
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/BaseNativeAd.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/BaseNativeAd.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/BaseNativeAd.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/BaseNativeAd.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ClickInterface.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ClickInterface.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/ClickInterface.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ClickInterface.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ClientPositioningSource.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ClientPositioningSource.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/ClientPositioningSource.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ClientPositioningSource.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/CustomEventNative.java
similarity index 96%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/CustomEventNative.java
index 23c04bd2..1253fb4c 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/CustomEventNative.java
@@ -1,6 +1,6 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
+import android.content.Context;
 import android.support.annotation.NonNull;
 
 import com.mopub.nativeads.events.NativeAdEventsObserver;
@@ -27,7 +27,7 @@
      * native ad from a third-party ad network, or execute any application code. It must also notify
      * the provided {@link CustomEventNativeListener} Object of certain lifecycle events.
      *
-     * @param activity The activity.
+     * @param context The context.
      * @param customEventNativeListener An Object that must be notified of certain lifecycle
      * events.
      * @param localExtras A Map containing additional custom data that is set within your
@@ -37,7 +37,7 @@
      * that you want to associate with a given custom event request. This data may be used to pass
      * dynamic information, such as publisher IDs, without changes in application code.
      */
-    protected abstract void loadNativeAd(@NonNull final Activity activity,
+    protected abstract void loadNativeAd(@NonNull final Context context,
             @NonNull final CustomEventNativeListener customEventNativeListener,
             @NonNull final Map<String, Object> localExtras,
             @NonNull final Map<String, String> serverExtras);
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
similarity index 94%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
index c84b77b7..8a198b8a 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
@@ -1,6 +1,6 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
+import android.content.Context;
 import android.support.annotation.NonNull;
 
 import com.mopub.common.DataKeys;
@@ -14,7 +14,7 @@
 final class CustomEventNativeAdapter {
     private CustomEventNativeAdapter() {}
 
-    public static void loadNativeAd(@NonNull final Activity activity,
+    public static void loadNativeAd(@NonNull final Context context,
             @NonNull final Map<String, Object> localExtras,
             @NonNull final AdResponse adResponse,
             @NonNull final CustomEventNative.CustomEventNativeListener customEventNativeListener) {
@@ -45,7 +45,7 @@ public static void loadNativeAd(@NonNull final Activity activity,
         // We catch all exceptions here to prevent crashes from untested code.
         try {
             customEventNative.loadNativeAd(
-                    activity,
+                    context,
                     customEventNativeListener,
                     localExtras,
                     adResponse.getServerExtras()
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionInterface.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionInterface.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionInterface.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionInterface.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionTracker.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionTracker.java
similarity index 98%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionTracker.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionTracker.java
index d757285d..d7775eab 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionTracker.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionTracker.java
@@ -1,6 +1,6 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
+import android.content.Context;
 import android.os.Handler;
 import android.os.Looper;
 import android.support.annotation.NonNull;
@@ -46,11 +46,11 @@
     // Listener for when a view becomes visible or non visible
     @Nullable private VisibilityTrackerListener mVisibilityTrackerListener;
 
-    public ImpressionTracker(@NonNull final Activity activity) {
+    public ImpressionTracker(@NonNull final Context context) {
         this(new WeakHashMap<View, ImpressionInterface>(),
                 new WeakHashMap<View, TimestampWrapper<ImpressionInterface>>(),
                 new VisibilityChecker(),
-                new VisibilityTracker(activity),
+                new VisibilityTracker(context),
                 new Handler(Looper.getMainLooper()));
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/IntInterval.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/IntInterval.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/IntInterval.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/IntInterval.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java
similarity index 68%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java
index e79548bb..04d9c8f3 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java
@@ -1,6 +1,6 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
+import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.view.View;
@@ -19,18 +19,21 @@
 public interface MoPubAdRenderer<T extends BaseNativeAd> {
     /**
      * Creates a new view to be used as an ad.
-     *
+     * <p/>
      * This method is called when you call {@link com.mopub.nativeads.MoPubStreamAdPlacer#getAdView}
      * and the convertView is null. You must return a valid view.
      *
-     * @param activity The activity. Useful for creating a view.
-     * @param parent The parent that the view will eventually be attached to. You might use the
-     * parent to determine layout parameters, but should return the view without attaching it to the
-     * parent.
+     * @param context The context. Useful for creating a view. This is recommended to be an
+     *                Activity. If you have custom themes defined in your Activity, not passing
+     *                in that Activity will result in the default Application theme being used
+     *                when creating the ad view.
+     * @param parent  The parent that the view will eventually be attached to. You might use the
+     *                parent to determine layout parameters, but should return the view without
+     *                attaching it to the parent.
      * @return A new ad view.
      */
     @NonNull
-    View createAdView(@NonNull Activity activity, @Nullable ViewGroup parent);
+    View createAdView(@NonNull Context context, @Nullable ViewGroup parent);
 
     /**
      * Renders a view created by {@link #createAdView} by filling it with ad data.
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
similarity index 97%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
index 936858c1..79b723f9 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
@@ -1,6 +1,5 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
 import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
@@ -29,7 +28,7 @@
 public class MoPubCustomEventNative extends CustomEventNative {
 
     @Override
-    protected void loadNativeAd(@NonNull final Activity activity,
+    protected void loadNativeAd(@NonNull final Context context,
             @NonNull final CustomEventNativeListener customEventNativeListener,
             @NonNull final Map<String, Object> localExtras,
             @NonNull final Map<String, String> serverExtras) {
@@ -44,10 +43,10 @@ protected void loadNativeAd(@NonNull final Activity activity,
         }
 
         final MoPubStaticNativeAd moPubStaticNativeAd =
-                new MoPubStaticNativeAd(activity,
+                new MoPubStaticNativeAd(context,
                         (JSONObject) json,
-                        new ImpressionTracker(activity),
-                        new NativeClickHandler(activity),
+                        new ImpressionTracker(context),
+                        new NativeClickHandler(context),
                         this);
 
         try {
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNative.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNative.java
new file mode 100644
index 00000000..7de26d09
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNative.java
@@ -0,0 +1,333 @@
+package com.mopub.nativeads;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.AdFormat;
+import com.mopub.common.Constants;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.DeviceUtils;
+import com.mopub.common.util.ManifestUtils;
+import com.mopub.mobileads.MoPubErrorCode;
+import com.mopub.network.AdRequest;
+import com.mopub.network.AdResponse;
+import com.mopub.network.MoPubNetworkError;
+import com.mopub.network.Networking;
+import com.mopub.volley.NetworkResponse;
+import com.mopub.volley.RequestQueue;
+import com.mopub.volley.VolleyError;
+
+import java.lang.ref.WeakReference;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+import java.util.TreeMap;
+
+import static com.mopub.common.GpsHelper.fetchAdvertisingInfoAsync;
+import static com.mopub.nativeads.CustomEventNative.CustomEventNativeListener;
+import static com.mopub.nativeads.NativeErrorCode.CONNECTION_ERROR;
+import static com.mopub.nativeads.NativeErrorCode.EMPTY_AD_RESPONSE;
+import static com.mopub.nativeads.NativeErrorCode.INVALID_REQUEST_URL;
+import static com.mopub.nativeads.NativeErrorCode.INVALID_RESPONSE;
+import static com.mopub.nativeads.NativeErrorCode.NATIVE_RENDERER_CONFIGURATION_ERROR;
+import static com.mopub.nativeads.NativeErrorCode.NETWORK_BANNED;
+import static com.mopub.nativeads.NativeErrorCode.SERVER_ERROR_RESPONSE_CODE;
+import static com.mopub.nativeads.NativeErrorCode.UNSPECIFIED;
+
+public class MoPubNative {
+
+	public interface MoPubNativeNetworkListener {
+		void onNativeLoad(final NativeAd nativeAd);
+
+		void onNativeFail(final NativeErrorCode errorCode);
+	}
+
+	static final MoPubNativeNetworkListener EMPTY_NETWORK_LISTENER =
+			new MoPubNativeNetworkListener() {
+				@Override
+				public void onNativeLoad(@NonNull final NativeAd nativeAd) {
+					// If this listener is invoked, it means that MoPubNative instance has been destroyed
+					// so destroy any leftover incoming NativeAds
+					nativeAd.destroy();
+				}
+
+				@Override
+				public void onNativeFail(final NativeErrorCode errorCode) {
+				}
+			};
+
+	// Highly recommended to be an Activity since 3rd party networks need it
+	@NonNull private final WeakReference<Context> mContext;
+	@NonNull private final String mAdUnitId;
+	@NonNull private MoPubNativeNetworkListener mMoPubNativeNetworkListener;
+
+	// For small sets TreeMap, takes up less memory than HashMap
+	@NonNull private Map<String, Object> mLocalExtras = new TreeMap<String, Object>();
+	@NonNull private final AdRequest.Listener mVolleyListener;
+	@Nullable private AdRequest mNativeRequest;
+	@NonNull AdRendererRegistry mAdRendererRegistry;
+
+	private Set<String> bannedAdapters;
+
+	public MoPubNative(@NonNull final Context context,
+	                   @NonNull final String adUnitId,
+	                   @NonNull final MoPubNativeNetworkListener moPubNativeNetworkListener) {
+		this(context, adUnitId, moPubNativeNetworkListener, new HashSet<String>());
+	}
+
+	public MoPubNative(@NonNull final Context context,
+	                   @NonNull final String adUnitId,
+	                   @NonNull final MoPubNativeNetworkListener moPubNativeNetworkListener, Set<String> bannedAdapters) {
+		this(context, adUnitId, new AdRendererRegistry(), moPubNativeNetworkListener, bannedAdapters);
+	}
+
+	@VisibleForTesting
+	public MoPubNative(@NonNull final Context context,
+	                   @NonNull final String adUnitId,
+	                   @NonNull AdRendererRegistry adRendererRegistry,
+	                   @NonNull final MoPubNativeNetworkListener moPubNativeNetworkListener, Set<String> bannedAdapters) {
+		Preconditions.checkNotNull(context, "context may not be null.");
+		Preconditions.checkNotNull(adUnitId, "AdUnitId may not be null.");
+		Preconditions.checkNotNull(adRendererRegistry, "AdRendererRegistry may not be null.");
+		Preconditions.checkNotNull(moPubNativeNetworkListener, "MoPubNativeNetworkListener may not be null.");
+
+		ManifestUtils.checkNativeActivitiesDeclared(context);
+
+		setBannedAdapters(bannedAdapters);
+
+		mContext = new WeakReference<Context>(context);
+		mAdUnitId = adUnitId;
+		mMoPubNativeNetworkListener = moPubNativeNetworkListener;
+		mAdRendererRegistry = adRendererRegistry;
+		mVolleyListener = new AdRequest.Listener() {
+			@Override
+			public void onSuccess(@NonNull final AdResponse response) {
+				onAdLoad(response);
+			}
+
+			@Override
+			public void onErrorResponse(@NonNull final VolleyError volleyError) {
+				onAdError(volleyError);
+			}
+		};
+
+		// warm up cache for google play services info
+		fetchAdvertisingInfoAsync(context, null);
+	}
+
+	/**
+	 * Registers an ad renderer for rendering a specific native ad format.
+	 * Note that if multiple ad renderers support a specific native ad format, the first
+	 * one registered will be used.
+	 */
+	public void registerAdRenderer(MoPubAdRenderer moPubAdRenderer) {
+		mAdRendererRegistry.registerAdRenderer(moPubAdRenderer);
+	}
+
+	public void destroy() {
+		mContext.clear();
+		if (mNativeRequest != null) {
+			mNativeRequest.cancel();
+			mNativeRequest = null;
+		}
+		mMoPubNativeNetworkListener = EMPTY_NETWORK_LISTENER;
+	}
+
+	public void setLocalExtras(@Nullable final Map<String, Object> localExtras) {
+		if (localExtras == null) {
+			mLocalExtras = new TreeMap<String, Object>();
+		} else {
+			mLocalExtras = new TreeMap<String, Object>(localExtras);
+		}
+	}
+
+	public void makeRequest() {
+		makeRequest((RequestParameters) null);
+	}
+
+	public void makeRequest(@Nullable final RequestParameters requestParameters) {
+		makeRequest(requestParameters, null);
+	}
+
+	public void makeRequest(@Nullable final RequestParameters requestParameters,
+	                        @Nullable Integer sequenceNumber) {
+		final Context context = getContextOrDestroy();
+		if (context == null) {
+			return;
+		}
+
+		if (!DeviceUtils.isNetworkAvailable(context)) {
+			mMoPubNativeNetworkListener.onNativeFail(CONNECTION_ERROR);
+			return;
+		}
+
+		loadNativeAd(requestParameters, sequenceNumber);
+	}
+
+	private void loadNativeAd(
+			@Nullable final RequestParameters requestParameters,
+			@Nullable final Integer sequenceNumber) {
+		final Context context = getContextOrDestroy();
+		if (context == null) {
+			return;
+		}
+
+		final NativeUrlGenerator generator = new NativeUrlGenerator(context)
+				.withAdUnitId(mAdUnitId)
+				.withRequest(requestParameters);
+
+		if (sequenceNumber != null) {
+			generator.withSequenceNumber(sequenceNumber);
+		}
+
+		final String endpointUrl = generator.generateUrlString(Constants.HOST);
+
+		if (endpointUrl != null) {
+			MoPubLog.d("Loading ad from: " + endpointUrl);
+		}
+
+		requestNativeAd(endpointUrl);
+	}
+
+	void requestNativeAd(@Nullable final String endpointUrl) {
+		final Context context = getContextOrDestroy();
+		if (context == null) {
+			return;
+		}
+
+		if (endpointUrl == null) {
+			mMoPubNativeNetworkListener.onNativeFail(INVALID_REQUEST_URL);
+			return;
+		}
+
+		mNativeRequest = new AdRequest(endpointUrl, AdFormat.NATIVE, mAdUnitId, context, mVolleyListener);
+		RequestQueue requestQueue = Networking.getRequestQueue(context);
+		requestQueue.add(mNativeRequest);
+	}
+
+	private void onAdLoad(@NonNull final AdResponse response) {
+		final Context context = getContextOrDestroy();
+		if (context == null) {
+			return;
+		}
+
+		if (bannedAdapters.contains(response.getCustomEventClassName())) {
+			mMoPubNativeNetworkListener.onNativeFail(NETWORK_BANNED);
+			return;
+		}
+
+		final CustomEventNativeListener customEventNativeListener =
+				new CustomEventNativeListener() {
+					@Override
+					public void onNativeAdLoaded(@NonNull final BaseNativeAd nativeAd) {
+						final Context context = getContextOrDestroy();
+						if (context == null) {
+							return;
+						}
+
+						MoPubAdRenderer renderer = mAdRendererRegistry.getRendererForAd(nativeAd);
+						if (renderer == null) {
+							onNativeAdFailed(NATIVE_RENDERER_CONFIGURATION_ERROR);
+							return;
+						}
+
+						mMoPubNativeNetworkListener.onNativeLoad(new NativeAd(context,
+								response.getImpressionTrackingUrl(),
+								response.getClickTrackingUrl(),
+								mAdUnitId,
+								nativeAd,
+								renderer)
+						);
+					}
+
+					@Override
+					public void onNativeAdFailed(final NativeErrorCode errorCode) {
+						MoPubLog.v(String.format("Native Ad failed to load with error: %s.", errorCode));
+						requestNativeAd(response.getFailoverUrl());
+					}
+				};
+
+		CustomEventNativeAdapter.loadNativeAd(
+				context,
+				mLocalExtras,
+				response,
+				customEventNativeListener
+		);
+	}
+
+	@VisibleForTesting
+	void onAdError(@NonNull final VolleyError volleyError) {
+		MoPubLog.d("Native ad request failed.", volleyError);
+		if (volleyError instanceof MoPubNetworkError) {
+			MoPubNetworkError error = (MoPubNetworkError) volleyError;
+			switch (error.getReason()) {
+				case BAD_BODY:
+					mMoPubNativeNetworkListener.onNativeFail(INVALID_RESPONSE);
+					return;
+				case BAD_HEADER_DATA:
+					mMoPubNativeNetworkListener.onNativeFail(INVALID_RESPONSE);
+					return;
+				case WARMING_UP:
+					// Used for the sample app to signal a toast.
+					// This is not customer-facing except in the sample app.
+					MoPubLog.c(MoPubErrorCode.WARMUP.toString());
+					mMoPubNativeNetworkListener.onNativeFail(EMPTY_AD_RESPONSE);
+					return;
+				case NO_FILL:
+					mMoPubNativeNetworkListener.onNativeFail(EMPTY_AD_RESPONSE);
+					return;
+				case UNSPECIFIED:
+				default:
+					mMoPubNativeNetworkListener.onNativeFail(UNSPECIFIED);
+					return;
+			}
+		} else {
+			// Process our other status code errors.
+			NetworkResponse response = volleyError.networkResponse;
+			if (response != null && response.statusCode >= 500 && response.statusCode < 600) {
+				mMoPubNativeNetworkListener.onNativeFail(SERVER_ERROR_RESPONSE_CODE);
+			} else if (response == null && !DeviceUtils.isNetworkAvailable(mContext.get())) {
+				MoPubLog.c(String.valueOf(MoPubErrorCode.NO_CONNECTION.toString()));
+				mMoPubNativeNetworkListener.onNativeFail(CONNECTION_ERROR);
+			} else {
+				mMoPubNativeNetworkListener.onNativeFail(UNSPECIFIED);
+			}
+		}
+	}
+
+	@VisibleForTesting
+	@Nullable
+	Context getContextOrDestroy() {
+		final Context context = mContext.get();
+		if (context == null) {
+			destroy();
+			MoPubLog.d("Weak reference to Context in MoPubNative became null. This instance" +
+					" of MoPubNative is destroyed and No more requests will be processed.");
+		}
+		return context;
+	}
+
+	@VisibleForTesting
+	@Deprecated
+	@NonNull
+	MoPubNativeNetworkListener getMoPubNativeNetworkListener() {
+		return mMoPubNativeNetworkListener;
+	}
+
+	public void setBannedAdapters(Set<String> bannedAdapters) {
+		if (bannedAdapters != null) {
+			this.bannedAdapters = bannedAdapters;
+		}
+	}
+
+	public void banAdapter(String networkEventClass) {
+		bannedAdapters.add(networkEventClass);
+	}
+
+	public void permitAdapter(String networkEventClass) {
+		bannedAdapters.remove(networkEventClass);
+	}
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdLoadedListener.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNativeAdLoadedListener.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdLoadedListener.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNativeAdLoadedListener.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdPositioning.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNativeAdPositioning.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdPositioning.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNativeAdPositioning.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubRecyclerViewHolder.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerViewHolder.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/MoPubRecyclerViewHolder.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerViewHolder.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStaticNativeAdRenderer.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubStaticNativeAdRenderer.java
similarity index 95%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStaticNativeAdRenderer.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubStaticNativeAdRenderer.java
index 819d8d8f..aec86d57 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStaticNativeAdRenderer.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubStaticNativeAdRenderer.java
@@ -1,6 +1,6 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
+import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.view.LayoutInflater;
@@ -36,9 +36,9 @@ public MoPubStaticNativeAdRenderer(@NonNull final ViewBinder viewBinder) {
 
     @Override
     @NonNull
-    public View createAdView(@NonNull final Activity activity, @Nullable final ViewGroup parent) {
+    public View createAdView(@NonNull final Context context, @Nullable final ViewGroup parent) {
         return LayoutInflater
-                .from(activity)
+                .from(context)
                 .inflate(mViewBinder.layoutId, parent, false);
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
similarity index 99%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
index 56e09b91..d43f5743 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
@@ -412,7 +412,7 @@ public Object getAdData(final int position) {
      * Gets the ad at the given position, or {@code null} if there is no ad at the given position.
      *
      * This method will attempt to reuse the convertView if it is not {@code null}, and will
-     * otherwise create it. See {@link MoPubAdRenderer#createAdView(Activity, ViewGroup)}.
+     * otherwise create it. See {@link MoPubAdRenderer#createAdView(Context, ViewGroup)}.
      *
      * @param position The position to place an ad into.
      * @param convertView A recycled view into which to render data, or {@code null}.
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAd.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAd.java
similarity index 92%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/NativeAd.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAd.java
index 9347e32c..ce8f7f38 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAd.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAd.java
@@ -1,6 +1,5 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
 import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
@@ -9,7 +8,6 @@
 
 import com.mopub.common.VisibleForTesting;
 import com.mopub.nativeads.MoPubCustomEventNative.MoPubStaticNativeAd;
-import com.mopub.nativeads.MoPubCustomEventVideoNative.MoPubVideoNativeAd;
 import com.mopub.network.AdResponse;
 import com.mopub.network.TrackingRequest;
 
@@ -33,7 +31,7 @@
  *
  * When you have a {@link NativeAd} instance and wish to show a view you should:
  *
- * 1. Call {@link #createAdView(Activity, ViewGroup)} to inflate a {@link View} that can show this ad.
+ * 1. Call {@link #createAdView(Context, ViewGroup)} to inflate a {@link View} that can show this ad.
  * 2. Call {@link #renderAdView(View)} with a compatible {@link View} to render the ad data into the view.
  * 3. Just before the ad is shown to the user, call {@link #prepare(View)}.
  * 4. When the ad view is no longer shown to the user, call {@link #clear(View)}. You can later
@@ -125,7 +123,7 @@ public boolean isDestroyed() {
      * Returns the {@link BaseNativeAd} object for this {@link NativeAd}. This object is created by
      * a {@link CustomEventNative} subclass after a successful ad request and is specific to the ad
      * source. If it comes from the MoPub Exchange or is a directly-served ad it will be of the type
-     * {@link MoPubStaticNativeAd} or {@link MoPubVideoNativeAd}. If it is returned by a mediated ad
+     * {@link MoPubStaticNativeAd} or MoPubVideoNativeAd. If it is returned by a mediated ad
      * network it may have another type.
      */
     @NonNull
@@ -133,9 +131,17 @@ public BaseNativeAd getBaseNativeAd() {
         return mBaseNativeAd;
     }
 
+    /**
+     * Renders the ad view. It is highly recommended that this context is an Activity to preserve
+     * the current activity's theme.
+     *
+     * @param context The context, preferably the Activity.
+     * @param parent  An optional parent.
+     * @return The rendered ad view.
+     */
     @NonNull
-    public View createAdView(@NonNull final Activity activity, @Nullable final ViewGroup parent) {
-        return mMoPubAdRenderer.createAdView(activity, parent);
+    public View createAdView(@NonNull final Context context, @Nullable final ViewGroup parent) {
+        return mMoPubAdRenderer.createAdView(context, parent);
     }
 
     public void renderAdView(View view) {
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdData.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdData.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdData.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdData.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdSource.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdSource.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdSource.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdSource.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
similarity index 89%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
index b600d00d..0b275866 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
@@ -1,6 +1,5 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
 import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
@@ -38,31 +37,31 @@ private NativeAdViewHelper() {
     @NonNull
     static View getAdView(@Nullable View convertView,
             @Nullable final ViewGroup parent,
-            @NonNull final Activity activity,
+            @NonNull final Context context,
             @Nullable final NativeAd nativeAd,
             @Nullable final ViewBinder viewBinder) {
 
         Preconditions.NoThrow.checkNotNull(viewBinder, "ViewBinder is null.");
 
         if (convertView != null) {
-            clearNativeAd(activity, convertView);
+            clearNativeAd(context, convertView);
         }
 
         if (nativeAd == null || nativeAd.isDestroyed() || viewBinder == null) {
             MoPubLog.d("NativeAd or viewBinder null or invalid. Returning empty view");
             // Only create a view if one hasn't been created already
             if (convertView == null || !ViewType.EMPTY.equals(convertView.getTag())) {
-                convertView = new View(activity);
+                convertView = new View(context);
                 convertView.setTag(ViewType.EMPTY);
                 convertView.setVisibility(View.GONE);
             }
         } else {
             // Only create a view if one hasn't been created already
             if (convertView == null || !ViewType.AD.equals(convertView.getTag())) {
-                convertView = nativeAd.createAdView(activity, parent);
+                convertView = nativeAd.createAdView(context, parent);
                 convertView.setTag(ViewType.AD);
             }
-            prepareNativeAd(activity, convertView, nativeAd);
+            prepareNativeAd(context, convertView, nativeAd);
             nativeAd.renderAdView(convertView);
         }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeClickHandler.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeClickHandler.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/NativeClickHandler.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeClickHandler.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeErrorCode.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeErrorCode.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/NativeErrorCode.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeErrorCode.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeImageHelper.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeImageHelper.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/NativeImageHelper.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeImageHelper.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeRendererHelper.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeRendererHelper.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/NativeRendererHelper.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeRendererHelper.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/PlacementData.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PlacementData.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/PlacementData.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PlacementData.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/PositioningRequest.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningRequest.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/PositioningRequest.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningRequest.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/PositioningSource.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningSource.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/PositioningSource.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningSource.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/RequestParameters.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/RequestParameters.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/RequestParameters.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/RequestParameters.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ServerPositioningSource.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ServerPositioningSource.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/ServerPositioningSource.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ServerPositioningSource.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/SpinningProgressView.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/SpinningProgressView.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/SpinningProgressView.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/SpinningProgressView.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/StaticNativeAd.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeAd.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/StaticNativeAd.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeAd.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/StaticNativeViewHolder.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeViewHolder.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/StaticNativeViewHolder.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeViewHolder.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/TaskManager.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TaskManager.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/TaskManager.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TaskManager.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/TimestampWrapper.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TimestampWrapper.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/TimestampWrapper.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TimestampWrapper.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/TrackedStaticNativeAd.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TrackedStaticNativeAd.java
similarity index 84%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/TrackedStaticNativeAd.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TrackedStaticNativeAd.java
index 33badcd2..5edf2db6 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/TrackedStaticNativeAd.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TrackedStaticNativeAd.java
@@ -1,6 +1,6 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
+import android.content.Context;
 import android.support.annotation.NonNull;
 import android.view.View;
 
@@ -12,9 +12,9 @@
 	private final ImpressionTracker impressionTracker;
 	private final NativeClickHandler clickHandler;
 
-	public TrackedStaticNativeAd(Activity activity) {
-		impressionTracker = new ImpressionTracker(activity);
-		clickHandler = new NativeClickHandler(activity);
+	public TrackedStaticNativeAd(Context context) {
+		impressionTracker = new ImpressionTracker(context);
+		clickHandler = new NativeClickHandler(context);
 	}
 
 	@Override
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ViewBinder.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ViewBinder.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/ViewBinder.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ViewBinder.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/VisibilityTracker.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/VisibilityTracker.java
similarity index 81%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/VisibilityTracker.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/VisibilityTracker.java
index 7732643d..39cbfc39 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/VisibilityTracker.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/VisibilityTracker.java
@@ -1,6 +1,7 @@
 package com.mopub.nativeads;
 
 import android.app.Activity;
+import android.content.Context;
 import android.graphics.Rect;
 import android.os.Handler;
 import android.os.SystemClock;
@@ -44,8 +45,8 @@
         void onVisibilityChanged(List<View> visibleViews, List<View> invisibleViews);
     }
 
-    @Nullable @VisibleForTesting OnPreDrawListener mOnPreDrawListener;
-    @NonNull @VisibleForTesting final WeakReference<View> mRootView;
+    @NonNull @VisibleForTesting final OnPreDrawListener mOnPreDrawListener;
+    @NonNull @VisibleForTesting WeakReference<ViewTreeObserver> mWeakViewTreeObserver;
 
     static class TrackingInfo {
         int mMinViewablePercent;
@@ -73,15 +74,15 @@
     // Whether the visibility runnable is scheduled
     private boolean mIsVisibilityScheduled;
 
-    public VisibilityTracker(@NonNull final Activity activity) {
-        this(activity,
+    public VisibilityTracker(@NonNull final Context context) {
+        this(context,
                 new WeakHashMap<View, TrackingInfo>(10),
                 new VisibilityChecker(),
                 new Handler());
     }
 
     @VisibleForTesting
-    VisibilityTracker(@NonNull final Activity activity,
+    VisibilityTracker(@NonNull final Context context,
             @NonNull final Map<View, TrackingInfo> trackedViews,
             @NonNull final VisibilityChecker visibilityChecker,
             @NonNull final Handler visibilityHandler) {
@@ -91,22 +92,57 @@ public VisibilityTracker(@NonNull final Activity activity) {
         mVisibilityRunnable = new VisibilityRunnable();
         mTrimmedViews = new ArrayList<View>(NUM_ACCESSES_BEFORE_TRIMMING);
 
-        final View rootView = activity.getWindow().getDecorView();
-        mRootView = new WeakReference<View>(rootView);
+        mOnPreDrawListener = new OnPreDrawListener() {
+            @Override
+            public boolean onPreDraw() {
+                scheduleVisibilityCheck();
+                return true;
+            }
+        };
+
+        mWeakViewTreeObserver = new WeakReference<ViewTreeObserver>(null);
+        setViewTreeObserver(context, null);
+    }
+
+    private void setViewTreeObserver(@Nullable final Context context, @Nullable final View view) {
+        final ViewTreeObserver originalViewTreeObserver = mWeakViewTreeObserver.get();
+        if (originalViewTreeObserver != null && originalViewTreeObserver.isAlive()) {
+            return;
+        }
+
+        final View rootView = getBestRootView(context, view);
+        if (rootView == null) {
+            MoPubLog.d("Unable to set Visibility Tracker due to no available root view.");
+            return;
+        }
+
         final ViewTreeObserver viewTreeObserver = rootView.getViewTreeObserver();
         if (!viewTreeObserver.isAlive()) {
             MoPubLog.w("Visibility Tracker was unable to track views because the"
                     + " root view tree observer was not alive");
-        } else {
-            mOnPreDrawListener = new OnPreDrawListener() {
-                @Override
-                public boolean onPreDraw() {
-                    scheduleVisibilityCheck();
-                    return true;
-                }
-            };
-            viewTreeObserver.addOnPreDrawListener(mOnPreDrawListener);
+            return;
         }
+
+        mWeakViewTreeObserver = new WeakReference<ViewTreeObserver>(viewTreeObserver);
+        viewTreeObserver.addOnPreDrawListener(mOnPreDrawListener);
+    }
+
+    @VisibleForTesting
+    @Nullable
+    static View getBestRootView(@Nullable final Context context, @Nullable final View view) {
+        if (context instanceof Activity) {
+            return ((Activity) context).getWindow().getDecorView();
+        }
+
+        if (view != null) {
+            final View rootView = view.getRootView();
+            if (rootView != null) {
+                final View rootContentView = rootView.findViewById(android.R.id.content);
+                return rootContentView != null ? rootContentView : rootView;
+            }
+        }
+
+        return null;
     }
 
     void setVisibilityTrackerListener(
@@ -126,6 +162,8 @@ void addView(@NonNull View rootView, @NonNull final View view, final int minPerc
     }
 
     void addView(@NonNull View rootView, @NonNull final View view, final int minVisiblePercentageViewed, final int maxInvisiblePercentageViewed) {
+        setViewTreeObserver(view.getContext(), view);
+
         // Find the view if already tracked
         TrackingInfo trackingInfo = mTrackedViews.get(view);
         if (trackingInfo == null) {
@@ -183,14 +221,11 @@ void clear() {
      */
     void destroy() {
         clear();
-        final View rootView = mRootView.get();
-        if (rootView != null && mOnPreDrawListener != null) {
-            final ViewTreeObserver viewTreeObserver = rootView.getViewTreeObserver();
-            if (viewTreeObserver.isAlive()) {
-                viewTreeObserver.removeOnPreDrawListener(mOnPreDrawListener);
-            }
-            mOnPreDrawListener = null;
+        final ViewTreeObserver viewTreeObserver = mWeakViewTreeObserver.get();
+        if (viewTreeObserver != null && viewTreeObserver.isAlive()) {
+            viewTreeObserver.removeOnPreDrawListener(mOnPreDrawListener);
         }
+        mWeakViewTreeObserver.clear();
         mVisibilityTrackerListener = null;
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/factories/CustomEventNativeFactory.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/factories/CustomEventNativeFactory.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/factories/CustomEventNativeFactory.java
rename to mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/factories/CustomEventNativeFactory.java
diff --git a/mopub-sdk/mopub-sdk-native-video/build.gradle b/mopub-sdk/mopub-sdk-native-video/build.gradle
new file mode 100644
index 00000000..99e1684e
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-native-video/build.gradle
@@ -0,0 +1,12 @@
+apply from: '../shared-build.gradle'
+
+dependencies {
+    compile project(':mopub-sdk:mopub-sdk-native-static')
+    compile 'com.google.android.exoplayer:exoplayer:r1.5.6'
+}
+
+project.description = 'MoPub Android SDK - Native Video'
+project.ext.displayName = 'MoPub Android SDK - Native Video'
+project.ext.projectName = 'mopub-sdk-native-video'
+project.ext.uploadName = 'mopub-android-sdk-native-video'
+//apply from: '../publisher.gradle'
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/AndroidManifest.xml b/mopub-sdk/mopub-sdk-native-video/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..dc41fe9a
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/AndroidManifest.xml
@@ -0,0 +1,4 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.mopub.mobileads.native_video">
+    <application/>
+</manifest>
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java
rename to mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MediaLayout.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaLayout.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/MediaLayout.java
rename to mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaLayout.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MediaViewBinder.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaViewBinder.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/MediaViewBinder.java
rename to mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaViewBinder.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MediaViewHolder.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaViewHolder.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/MediaViewHolder.java
rename to mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaViewHolder.java
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
new file mode 100644
index 00000000..a669f735
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
@@ -0,0 +1,943 @@
+package com.mopub.nativeads;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.graphics.SurfaceTexture;
+import android.media.AudioManager;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.view.TextureView;
+import android.view.View;
+
+import com.mopub.common.DataKeys;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.common.event.BaseEvent;
+import com.mopub.common.event.Event;
+import com.mopub.common.event.EventDetails;
+import com.mopub.common.event.MoPubEvents;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Utils;
+import com.mopub.mobileads.MraidVideoPlayerActivity;
+import com.mopub.mobileads.VastManager;
+import com.mopub.mobileads.VastTracker;
+import com.mopub.mobileads.VastVideoConfig;
+import com.mopub.mobileads.VideoViewabilityTracker;
+import com.mopub.mobileads.factories.VastManagerFactory;
+import com.mopub.nativeads.NativeVideoController.NativeVideoProgressRunnable;
+import com.mopub.nativeads.events.NativeAdType;
+import com.mopub.network.TrackingRequest;
+
+import org.json.JSONArray;
+import org.json.JSONObject;
+
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+import java.util.Set;
+
+import static com.mopub.common.DataKeys.EVENT_DETAILS;
+import static com.mopub.common.DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT;
+import static com.mopub.common.DataKeys.IMPRESSION_VISIBLE_MS;
+import static com.mopub.common.DataKeys.JSON_BODY_KEY;
+import static com.mopub.common.DataKeys.MAX_BUFFER_MS;
+import static com.mopub.common.DataKeys.PAUSE_VISIBLE_PERCENT;
+import static com.mopub.common.DataKeys.PLAY_VISIBLE_PERCENT;
+import static com.mopub.nativeads.NativeImageHelper.preCacheImages;
+import static com.mopub.nativeads.NativeVideoController.VisibilityTrackingEvent;
+
+@TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+public class MoPubCustomEventVideoNative extends CustomEventNative {
+
+	@Override
+	protected void loadNativeAd(@NonNull final Context context,
+	                            @NonNull final CustomEventNativeListener customEventNativeListener,
+	                            @NonNull final Map<String, Object> localExtras,
+	                            @NonNull final Map<String, String> serverExtras) {
+		setCustomEventNativeListener(customEventNativeListener);
+		setNativeAdType(NativeAdType.Mopub);
+
+		final Object json = localExtras.get(JSON_BODY_KEY);
+		// null or non-JSONObjects should not be passed in localExtras as JSON_BODY_KEY
+		if (!(json instanceof JSONObject)) {
+			notifyLoadFailed(NativeErrorCode.INVALID_RESPONSE);
+			return;
+		}
+
+		final Object eventDetailsObject = localExtras.get(EVENT_DETAILS);
+		final EventDetails eventDetails = eventDetailsObject instanceof EventDetails ?
+				(EventDetails) eventDetailsObject : null;
+
+		final VideoResponseHeaders videoResponseHeaders = new VideoResponseHeaders(serverExtras);
+		if (!videoResponseHeaders.hasValidHeaders()) {
+			notifyLoadFailed(NativeErrorCode.INVALID_RESPONSE);
+			return;
+		}
+
+		final Object clickTrackingUrlFromHeaderObject =
+				localExtras.get(DataKeys.CLICK_TRACKING_URL_KEY);
+		// Ensure click tracking url is a non-empty String
+		if (!(clickTrackingUrlFromHeaderObject instanceof String) ||
+				TextUtils.isEmpty((String) clickTrackingUrlFromHeaderObject)) {
+			notifyLoadFailed(NativeErrorCode.UNSPECIFIED);
+			return;
+		}
+
+		final String clickTrackingUrlFromHeader = (String) clickTrackingUrlFromHeaderObject;
+		final MoPubVideoNativeAd videoNativeAd = new MoPubVideoNativeAd(context, (JSONObject) json,
+				this, videoResponseHeaders, eventDetails,
+				clickTrackingUrlFromHeader);
+		try {
+			videoNativeAd.loadAd();
+		} catch (IllegalArgumentException e) {
+			notifyLoadFailed(NativeErrorCode.UNSPECIFIED);
+		}
+	}
+
+	@TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+	public static class MoPubVideoNativeAd extends VideoNativeAd
+			implements VastManager.VastManagerListener, NativeVideoProgressRunnable.ProgressListener,
+			AudioManager.OnAudioFocusChangeListener {
+
+		enum Parameter {
+			IMPRESSION_TRACKER("imptracker", true),
+			CLICK_TRACKER("clktracker", true),
+			TITLE("title", false),
+			TEXT("text", false),
+			IMAGE_URL("mainimage", false),
+			ICON_URL("iconimage", false),
+			CLICK_DESTINATION("clk", false),
+			FALLBACK("fallback", false),
+			CALL_TO_ACTION("ctatext", false),
+			VAST_VIDEO("video", false);
+
+			@NonNull final String mName;
+			final boolean mRequired;
+
+			Parameter(@NonNull final String name, final boolean required) {
+				Preconditions.checkNotNull(name);
+				mName = name;
+				mRequired = required;
+			}
+
+			@Nullable
+			static Parameter from(@NonNull final String name) {
+				Preconditions.checkNotNull(name);
+				for (final Parameter parameter : values()) {
+					if (parameter.mName.equals(name)) {
+						return parameter;
+					}
+				}
+
+				return null;
+			}
+
+			@NonNull
+			@VisibleForTesting
+			static final Set<String> requiredKeys = new HashSet<String>();
+
+			static {
+				for (final Parameter parameter : values()) {
+					if (parameter.mRequired) {
+						requiredKeys.add(parameter.mName);
+					}
+				}
+			}
+		}
+
+		public enum VideoState {
+			CREATED, LOADING, BUFFERING, PAUSED, PLAYING, PLAYING_MUTED, ENDED, FAILED_LOAD
+		}
+
+		static final String PRIVACY_INFORMATION_CLICKTHROUGH_URL = "https://www.mopub.com/optout/";
+
+		@NonNull private final Context mContext;
+		@NonNull private final JSONObject mJsonObject;
+		@NonNull private VideoState mVideoState;
+		@NonNull private final VisibilityTracker mVideoVisibleTracking;
+		@NonNull private final String mMoPubClickTrackingUrl;
+		@NonNull private final VideoResponseHeaders mVideoResponseHeaders;
+		@NonNull private final NativeVideoControllerFactory mNativeVideoControllerFactory;
+		@Nullable private NativeVideoController mNativeVideoController;
+
+		// We need to hold a reference to the VastManager because internal VAST classes
+		// hold only weak refs to this.
+		@NonNull private final VastManager mVastManager;
+		@Nullable VastVideoConfig mVastVideoConfig;
+		@Nullable private MediaLayout mMediaLayout;
+		@Nullable private View mRootView;
+		@Nullable private final EventDetails mEventDetails;
+
+		private final long mId;
+		private boolean mNeedsSeek;
+		private boolean mNeedsPrepare;
+		private boolean mPauseCanBeTracked = false;
+		private boolean mResumeCanBeTracked = false;
+
+		// These variables influence video state.
+		private int mLatestVideoControllerState;
+		private boolean mError;
+		private boolean mLatestVisibility;
+		private boolean mMuted;
+		private boolean mEnded;
+
+		public MoPubVideoNativeAd(
+				@NonNull final Context context,
+				@NonNull final JSONObject jsonObject,
+				@NonNull final CustomEventNative customEventNative,
+				@NonNull final VideoResponseHeaders videoResponseHeaders,
+				@Nullable final EventDetails eventDetails,
+				@NonNull final String clickTrackingUrl) {
+			this(context, jsonObject, customEventNative, videoResponseHeaders,
+					new VisibilityTracker(context), new NativeVideoControllerFactory(),
+					eventDetails, clickTrackingUrl, VastManagerFactory.create(context.getApplicationContext(), false));
+
+		}
+
+		@VisibleForTesting
+		MoPubVideoNativeAd(
+				@NonNull final Context context,
+				@NonNull final JSONObject jsonObject,
+				@NonNull final CustomEventNative customEventNative,
+				@NonNull final VideoResponseHeaders videoResponseHeaders,
+				@NonNull final VisibilityTracker visibilityTracker,
+				@NonNull final NativeVideoControllerFactory nativeVideoControllerFactory,
+				@Nullable final EventDetails eventDetails,
+				@NonNull final String clickTrackingUrl,
+				@NonNull final VastManager vastManager) {
+			Preconditions.checkNotNull(context);
+			Preconditions.checkNotNull(jsonObject);
+			Preconditions.checkNotNull(customEventNative);
+			Preconditions.checkNotNull(videoResponseHeaders);
+			Preconditions.checkNotNull(visibilityTracker);
+			Preconditions.checkNotNull(nativeVideoControllerFactory);
+			Preconditions.checkNotNull(clickTrackingUrl);
+			Preconditions.checkNotNull(vastManager);
+			setEventNative(customEventNative);
+			mContext = context.getApplicationContext();
+			mJsonObject = jsonObject;
+			mVideoResponseHeaders = videoResponseHeaders;
+
+			mNativeVideoControllerFactory = nativeVideoControllerFactory;
+			mMoPubClickTrackingUrl = clickTrackingUrl;
+
+			mEventDetails = eventDetails;
+
+			mId = Utils.generateUniqueId();
+			mNeedsSeek = true;
+			mVideoState = VideoState.CREATED;
+
+			mNeedsPrepare = true;
+			mLatestVideoControllerState = NativeVideoController.STATE_IDLE;
+			mMuted = true;
+			mVideoVisibleTracking = visibilityTracker;
+			mVideoVisibleTracking.setVisibilityTrackerListener(new VisibilityTracker
+					.VisibilityTrackerListener() {
+				@Override
+				public void onVisibilityChanged(final List<View> visibleViews,
+				                                final List<View> invisibleViews) {
+					if (!visibleViews.isEmpty() && !mLatestVisibility) { // State transition
+						mLatestVisibility = true;
+						maybeChangeState();
+					} else if (!invisibleViews.isEmpty() && mLatestVisibility) { // state transition
+						mLatestVisibility = false;
+						maybeChangeState();
+					}
+				}
+			});
+			mVastManager = vastManager;
+		}
+
+		@Override
+		protected void loadAd() throws IllegalArgumentException {
+			if (!containsRequiredKeys(mJsonObject)) {
+				throw new IllegalArgumentException("JSONObject did not contain required keys.");
+			}
+
+			super.loadAd();
+			final Iterator<String> keys = mJsonObject.keys();
+			while (keys.hasNext()) {
+				final String key = keys.next();
+				final Parameter parameter = Parameter.from(key);
+
+				if (parameter != null) {
+					try {
+						addInstanceVariable(parameter, mJsonObject.opt(key));
+					} catch (ClassCastException e) {
+						throw new IllegalArgumentException("JSONObject key (" + key
+								+ ") contained unexpected value.");
+					}
+				} else {
+					addExtra(key, mJsonObject.opt(key));
+				}
+			}
+			setPrivacyInformationIconClickThroughUrl(PRIVACY_INFORMATION_CLICKTHROUGH_URL);
+
+			preCacheImages(mContext, getAllImageUrls(), new NativeImageHelper.ImageListener() {
+				@Override
+				public void onImagesCached() {
+					mVastManager.prepareVastVideoConfiguration(getVastVideo(),
+							MoPubVideoNativeAd.this,
+							mEventDetails == null ? null : mEventDetails.getDspCreativeId(),
+							mContext);
+				}
+
+				@Override
+				public void onImagesFailedToCache(final NativeErrorCode errorCode) {
+					notifyLoadFailed(errorCode);
+				}
+			});
+		}
+
+		@Override
+		public void onVastVideoConfigurationPrepared(@Nullable VastVideoConfig vastVideoConfig) {
+			if (vastVideoConfig == null) {
+				notifyLoadFailed(NativeErrorCode.INVALID_RESPONSE);
+				return;
+			}
+
+			final List<NativeVideoController.VisibilityTrackingEvent> visibilityTrackingEvents =
+					new ArrayList<VisibilityTrackingEvent>();
+
+			// Custom visibility tracking event from http response headers
+			final VisibilityTrackingEvent visibilityTrackingEvent = new VisibilityTrackingEvent();
+			visibilityTrackingEvent.strategy = new HeaderVisibilityStrategy(this);
+			visibilityTrackingEvent.minimumPercentageVisible =
+					mVideoResponseHeaders.getImpressionMinVisiblePercent();
+			visibilityTrackingEvent.totalRequiredPlayTimeMs =
+					mVideoResponseHeaders.getImpressionVisibleMs();
+			visibilityTrackingEvents.add(visibilityTrackingEvent);
+
+			// Visibility tracking event from http response Vast payload
+			mVastVideoConfig = vastVideoConfig;
+			final VideoViewabilityTracker vastVideoViewabilityTracker =
+					mVastVideoConfig.getVideoViewabilityTracker();
+			if (vastVideoViewabilityTracker != null) {
+				final VisibilityTrackingEvent vastVisibilityTrackingEvent =
+						new VisibilityTrackingEvent();
+				vastVisibilityTrackingEvent.strategy =
+						new PayloadVisibilityStrategy(mContext,
+								vastVideoViewabilityTracker.getTrackingUrl());
+				vastVisibilityTrackingEvent.minimumPercentageVisible =
+						vastVideoViewabilityTracker.getPercentViewable();
+				vastVisibilityTrackingEvent.totalRequiredPlayTimeMs =
+						vastVideoViewabilityTracker.getViewablePlaytimeMS();
+				visibilityTrackingEvents.add(vastVisibilityTrackingEvent);
+			}
+
+			Set<String> clickTrackers = new HashSet<String>();
+			clickTrackers.add(mMoPubClickTrackingUrl);
+			clickTrackers.addAll(getClickTrackers());
+
+			final ArrayList<VastTracker> vastClickTrackers = new ArrayList<VastTracker>();
+			for (String clickTrackingUrl : clickTrackers) {
+				vastClickTrackers.add(new VastTracker(clickTrackingUrl, false));
+			}
+			mVastVideoConfig.addClickTrackers(vastClickTrackers);
+
+			// Always use click destination URL from JSON "clk" value instead of from VAST document
+			mVastVideoConfig.setClickThroughUrl(getClickDestinationUrl());
+
+			mNativeVideoController = mNativeVideoControllerFactory.createForId(
+					mId, mContext, visibilityTrackingEvents, mVastVideoConfig, mEventDetails);
+
+			notifyAdLoaded();
+		}
+
+		private boolean containsRequiredKeys(@NonNull final JSONObject jsonObject) {
+			Preconditions.checkNotNull(jsonObject);
+
+			final Set<String> keys = new HashSet<String>();
+			final Iterator<String> jsonKeys = jsonObject.keys();
+			while (jsonKeys.hasNext()) {
+				keys.add(jsonKeys.next());
+			}
+
+			return keys.containsAll(Parameter.requiredKeys);
+		}
+
+		private void addInstanceVariable(@NonNull final Parameter key,
+		                                 @Nullable final Object value) throws ClassCastException {
+			Preconditions.checkNotNull(key);
+			Preconditions.checkNotNull(value);
+
+			try {
+				switch (key) {
+					case IMPRESSION_TRACKER:
+						addImpressionTrackers(value);
+						break;
+					case TITLE:
+						setTitle((String) value);
+						break;
+					case TEXT:
+						setText((String) value);
+						break;
+					case IMAGE_URL:
+						setMainImageUrl((String) value);
+						break;
+					case ICON_URL:
+						setIconImageUrl((String) value);
+						break;
+					case CLICK_DESTINATION:
+						setClickDestinationUrl((String) value);
+						break;
+					case CLICK_TRACKER:
+						parseClickTrackers(value);
+						break;
+					case CALL_TO_ACTION:
+						setCallToAction((String) value);
+						break;
+					case VAST_VIDEO:
+						setVastVideo((String) value);
+						break;
+					default:
+						MoPubLog.d("Unable to add JSON key to internal mapping: " + key.mName);
+						break;
+				}
+			} catch (ClassCastException e) {
+				if (!key.mRequired) {
+					MoPubLog.d("Ignoring class cast exception for optional key: " + key.mName);
+				} else {
+					throw e;
+				}
+			}
+		}
+
+		private void parseClickTrackers(@NonNull final Object clickTrackers) {
+			if (clickTrackers instanceof JSONArray) {
+				addClickTrackers(clickTrackers);
+			} else {
+				addClickTracker((String) clickTrackers);
+			}
+		}
+
+		@Override
+		public void render(@NonNull MediaLayout mediaLayout) {
+			Preconditions.checkNotNull(mediaLayout);
+
+			mVideoVisibleTracking.addView(mRootView,
+					mediaLayout,
+					mVideoResponseHeaders.getPlayVisiblePercent(),
+					mVideoResponseHeaders.getPauseVisiblePercent());
+
+			mMediaLayout = mediaLayout;
+			mMediaLayout.initForVideo();
+
+			mMediaLayout.setSurfaceTextureListener(new TextureView.SurfaceTextureListener() {
+				@Override
+				public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int
+						height) {
+
+					mNativeVideoController.setListener(MoPubVideoNativeAd.this);
+					mNativeVideoController.setOnAudioFocusChangeListener(MoPubVideoNativeAd.this);
+					mNativeVideoController.setProgressListener(MoPubVideoNativeAd.this);
+					mNativeVideoController.setTextureView(mMediaLayout.getTextureView());
+					mMediaLayout.resetProgress();
+
+					// If we're returning to an ended video, make a note of that so we don't flash
+					// a bunch of UI changes while we prepare the data.
+					final long duration = mNativeVideoController.getDuration();
+					final long currentPosition = mNativeVideoController.getCurrentPosition();
+					if (mLatestVideoControllerState == NativeVideoController.STATE_ENDED
+							|| (duration > 0 && duration - currentPosition < NativeVideoController.RESUME_FINISHED_THRESHOLD)) {
+						mEnded = true;
+					}
+
+					if (mNeedsPrepare) {
+						mNeedsPrepare = false;
+						mNativeVideoController.prepare(MoPubVideoNativeAd.this);
+					}
+
+					mNeedsSeek = true;
+					maybeChangeState();
+				}
+
+				@Override
+				public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width,
+				                                        int height) {
+				}
+
+				@Override
+				public boolean onSurfaceTextureDestroyed(final SurfaceTexture surface) {
+					mNeedsPrepare = true;
+					mNativeVideoController.release(MoPubVideoNativeAd.this);
+					applyState(VideoState.PAUSED);
+					return true;
+				}
+
+				@Override
+				public void onSurfaceTextureUpdated(SurfaceTexture surface) {
+				}
+			});
+
+			mMediaLayout.setPlayButtonClickListener(new View.OnClickListener() {
+				@Override
+				public void onClick(View v) {
+					mMediaLayout.resetProgress();
+					mNativeVideoController.seekTo(0);
+					mEnded = false;
+					mNeedsSeek = false;
+				}
+			});
+
+			mMediaLayout.setMuteControlClickListener(new View.OnClickListener() {
+				@Override
+				public void onClick(final View v) {
+					mMuted = !mMuted;
+					maybeChangeState();
+				}
+			});
+
+			mMediaLayout.setOnClickListener(new View.OnClickListener() {
+				@Override
+				public void onClick(final View v) {
+					prepareToLeaveView();
+					mNativeVideoController.triggerImpressionTrackers();
+					MraidVideoPlayerActivity.startNativeVideo(mContext, mId, mVastVideoConfig);
+				}
+			});
+
+			if (mNativeVideoController.getPlaybackState() == NativeVideoController.STATE_CLEARED) {
+				mNativeVideoController.prepare(this);
+			}
+
+			applyState(VideoState.PAUSED);
+		}
+
+		// Lifecycle Handlers
+		@Override
+		public void prepare(@NonNull final View view) {
+			Preconditions.checkNotNull(view);
+			mRootView = view;
+			mRootView.setOnClickListener(new View.OnClickListener() {
+				@Override
+				public void onClick(View v) {
+					prepareToLeaveView();
+					// No need to call notifyAdClicked since handleCtaClick does clickTracking
+					mNativeVideoController.triggerImpressionTrackers();
+					mNativeVideoController.handleCtaClick(mContext);
+				}
+			});
+		}
+
+		@Override
+		public void clear(@NonNull final View view) {
+			Preconditions.checkNotNull(view);
+			mNativeVideoController.clear();
+			cleanUpMediaLayout();
+		}
+
+		@Override
+		public void destroy() {
+			cleanUpMediaLayout();
+			mNativeVideoController.setPlayWhenReady(false);
+			mNativeVideoController.release(this);
+			NativeVideoController.remove(mId);
+			mVideoVisibleTracking.destroy();
+		}
+
+		@Override
+		public void onStateChanged(final boolean playWhenReady, final int playbackState) {
+			mLatestVideoControllerState = playbackState;
+			maybeChangeState();
+		}
+
+		@Override
+		public void onError(final Exception e) {
+			MoPubLog.w("Error playing back video.", e);
+			mError = true;
+			maybeChangeState();
+		}
+
+		@Override
+		public void updateProgress(final int progressTenthPercent) {
+			mMediaLayout.updateProgress(progressTenthPercent);
+		}
+
+		@Override
+		public void onAudioFocusChange(int focusChange) {
+			if (focusChange == AudioManager.AUDIOFOCUS_LOSS
+					|| focusChange == AudioManager.AUDIOFOCUS_LOSS_TRANSIENT) {
+				// Mute the video
+				mMuted = true;
+				maybeChangeState();
+			} else if (focusChange == AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK) {
+				// Lower the volume
+				mNativeVideoController.setAudioVolume(0.3f);
+			} else if (focusChange == AudioManager.AUDIOFOCUS_GAIN) {
+				// Resume playback
+				mNativeVideoController.setAudioVolume(1.0f);
+				maybeChangeState();
+			}
+		}
+
+		private void cleanUpMediaLayout() {
+			// When clearing, we also clear medialayout references so if we're rendered again
+			// with the same view, we reset the video state correctly.
+			if (mMediaLayout != null) {
+				mMediaLayout.setMode(MediaLayout.Mode.IMAGE);
+				mMediaLayout.setSurfaceTextureListener(null);
+				mMediaLayout.setPlayButtonClickListener(null);
+				mMediaLayout.setMuteControlClickListener(null);
+				mMediaLayout.setOnClickListener(null);
+				mVideoVisibleTracking.removeView(mMediaLayout);
+				mMediaLayout = null;
+			}
+		}
+
+		private void prepareToLeaveView() {
+			mNeedsSeek = true;
+			mNeedsPrepare = true;
+
+			// Clean up any references to this class when storing the NativeVideoController
+			// in a static location and starting a new activity
+			mNativeVideoController.setListener(null);
+			mNativeVideoController.setOnAudioFocusChangeListener(null);
+			mNativeVideoController.setProgressListener(null);
+			mNativeVideoController.clear();
+
+			applyState(VideoState.PAUSED, true);
+		}
+
+		private void maybeChangeState() {
+			VideoState newState = mVideoState;
+
+			if (mError) {
+				newState = VideoState.FAILED_LOAD;
+			} else if (mEnded) {
+				newState = VideoState.ENDED;
+			} else {
+				if (mLatestVideoControllerState == NativeVideoController.STATE_PREPARING
+						|| mLatestVideoControllerState == NativeVideoController.STATE_IDLE) {
+					newState = VideoState.LOADING;
+				} else if (mLatestVideoControllerState == NativeVideoController.STATE_BUFFERING) {
+					newState = VideoState.BUFFERING;
+				} else if (mLatestVideoControllerState == NativeVideoController.STATE_ENDED) {
+					mEnded = true;
+					newState = VideoState.ENDED;
+				} else if (mLatestVideoControllerState == NativeVideoController.STATE_READY) {
+					if (mLatestVisibility) {
+						newState = mMuted ? VideoState.PLAYING_MUTED : VideoState.PLAYING;
+					} else {
+						newState = VideoState.PAUSED;
+					}
+				}
+			}
+
+			applyState(newState);
+		}
+
+		@VisibleForTesting
+		void applyState(@NonNull final VideoState videoState) {
+			applyState(videoState, false);
+		}
+
+		@VisibleForTesting
+		void applyState(@NonNull final VideoState videoState, boolean transitionToFullScreen) {
+			Preconditions.checkNotNull(videoState);
+
+			// Ignore the state change if video player is not ready to take state changes.
+			if (mVastVideoConfig == null || mNativeVideoController == null || mMediaLayout == null) {
+				return;
+			}
+
+			// Check and set mVideoState so any changes we make to exo state don't
+			// trigger a duplicate run of this.
+			if (mVideoState == videoState) {
+				return;
+			}
+			VideoState previousState = mVideoState;
+			mVideoState = videoState;
+
+			switch (videoState) {
+				case FAILED_LOAD:
+					mVastVideoConfig.handleError(mContext, null, 0);
+					mNativeVideoController.setAppAudioEnabled(false);
+					mMediaLayout.setMode(MediaLayout.Mode.IMAGE);
+					// Only log the failed to play event when the video has not started
+					if (previousState != VideoState.PLAYING && previousState != VideoState.PLAYING_MUTED) {
+						MoPubEvents.log(Event.createEventFromDetails(
+								BaseEvent.Name.ERROR_FAILED_TO_PLAY,
+								BaseEvent.Category.NATIVE_VIDEO,
+								BaseEvent.SamplingRate.NATIVE_VIDEO,
+								mEventDetails));
+					}
+					break;
+				case CREATED:
+				case LOADING:
+					mNativeVideoController.setPlayWhenReady(true);
+					mMediaLayout.setMode(MediaLayout.Mode.LOADING);
+					break;
+				case BUFFERING:
+					mNativeVideoController.setPlayWhenReady(true);
+					mMediaLayout.setMode(MediaLayout.Mode.BUFFERING);
+					break;
+				case PAUSED:
+					if (transitionToFullScreen) {
+						// Prevents firing resume trackers when we return from full-screen.
+						mResumeCanBeTracked = false;
+					}
+
+					if (!transitionToFullScreen) {
+						mNativeVideoController.setAppAudioEnabled(false);
+						if (mPauseCanBeTracked) {
+							TrackingRequest.makeVastTrackingHttpRequest(
+									mVastVideoConfig.getPauseTrackers(),
+									null, // VastErrorCode
+									(int) mNativeVideoController.getCurrentPosition(),
+									null, // Asset URI
+									mContext);
+							mPauseCanBeTracked = false;
+							mResumeCanBeTracked = true;
+						}
+					}
+					mNativeVideoController.setPlayWhenReady(false);
+					mMediaLayout.setMode(MediaLayout.Mode.PAUSED);
+					break;
+				case PLAYING:
+					handleResumeTrackersAndSeek(previousState);
+
+					mNativeVideoController.setPlayWhenReady(true);
+					mNativeVideoController.setAudioEnabled(true);
+					mNativeVideoController.setAppAudioEnabled(true);
+					mMediaLayout.setMode(MediaLayout.Mode.PLAYING);
+					mMediaLayout.setMuteState(MediaLayout.MuteState.UNMUTED);
+					break;
+				case PLAYING_MUTED:
+					handleResumeTrackersAndSeek(previousState);
+
+					mNativeVideoController.setPlayWhenReady(true);
+					mNativeVideoController.setAudioEnabled(false);
+					mNativeVideoController.setAppAudioEnabled(false);
+					mMediaLayout.setMode(MediaLayout.Mode.PLAYING);
+					mMediaLayout.setMuteState(MediaLayout.MuteState.MUTED);
+					break;
+				case ENDED:
+					if (mNativeVideoController.hasFinalFrame()) {
+						mMediaLayout.setMainImageDrawable(mNativeVideoController.getFinalFrame());
+					}
+					mPauseCanBeTracked = false;
+					mResumeCanBeTracked = false;
+					mVastVideoConfig.handleComplete(mContext, 0);
+					mNativeVideoController.setAppAudioEnabled(false);
+					mMediaLayout.setMode(MediaLayout.Mode.FINISHED);
+					mMediaLayout.updateProgress(1000);
+					break;
+			}
+		}
+
+		private void handleResumeTrackersAndSeek(VideoState previousState) {
+			if (mResumeCanBeTracked
+					&& previousState != VideoState.PLAYING
+					&& previousState != VideoState.PLAYING_MUTED) {  // If we've played before, fire resume trackers.
+				TrackingRequest.makeVastTrackingHttpRequest(
+						mVastVideoConfig.getResumeTrackers(),
+						null, // VastErrorCode
+						(int) mNativeVideoController.getCurrentPosition(),
+						null, // Asset URI
+						mContext
+				);
+				mResumeCanBeTracked = false;
+			}
+
+			mPauseCanBeTracked = true;
+
+			// We force a seek here to get keyframe rendering in ExtractorSampleSource.
+			if (mNeedsSeek) {
+				mNeedsSeek = false;
+				mNativeVideoController.seekTo(mNativeVideoController.getCurrentPosition());
+			}
+		}
+
+
+		private boolean isImageKey(@Nullable final String name) {
+			return name != null && name.toLowerCase(Locale.US).endsWith("image");
+		}
+
+		@NonNull
+		private List<String> getExtrasImageUrls() {
+			final List<String> extrasBitmapUrls = new ArrayList<String>(getExtras().size());
+			for (final Map.Entry<String, Object> entry : getExtras().entrySet()) {
+				if (isImageKey(entry.getKey()) && entry.getValue() instanceof String) {
+					extrasBitmapUrls.add((String) entry.getValue());
+				}
+			}
+
+			return extrasBitmapUrls;
+		}
+
+		@NonNull
+		private List<String> getAllImageUrls() {
+			final List<String> imageUrls = new ArrayList<String>();
+			if (getMainImageUrl() != null) {
+				imageUrls.add(getMainImageUrl());
+			}
+			if (getIconImageUrl() != null) {
+				imageUrls.add(getIconImageUrl());
+			}
+
+			imageUrls.addAll(getExtrasImageUrls());
+			return imageUrls;
+		}
+
+		@Deprecated
+		@VisibleForTesting
+		boolean needsPrepare() {
+			return mNeedsPrepare;
+		}
+
+		@Deprecated
+		@VisibleForTesting
+		boolean hasEnded() {
+			return mEnded;
+		}
+
+		@Deprecated
+		@VisibleForTesting
+		boolean needsSeek() {
+			return mNeedsSeek;
+		}
+
+		@Deprecated
+		@VisibleForTesting
+		boolean isMuted() {
+			return mMuted;
+		}
+
+		@Deprecated
+		@VisibleForTesting
+		long getId() {
+			return mId;
+		}
+
+		@Deprecated
+		@VisibleForTesting
+		VideoState getVideoState() {
+			return mVideoState;
+		}
+
+		@Deprecated
+		@VisibleForTesting
+		void setLatestVisibility(boolean latestVisibility) {
+			mLatestVisibility = latestVisibility;
+		}
+
+		@Deprecated
+		@VisibleForTesting
+		void setMuted(boolean muted) {
+			mMuted = muted;
+		}
+
+		@Deprecated
+		@VisibleForTesting
+		MediaLayout getMediaLayout() {
+			return mMediaLayout;
+		}
+	}
+
+	@VisibleForTesting
+	@TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+	static class HeaderVisibilityStrategy implements VisibilityTrackingEvent.OnTrackedStrategy {
+		@NonNull private final WeakReference<MoPubVideoNativeAd> mMoPubVideoNativeAd;
+
+		HeaderVisibilityStrategy(@NonNull final MoPubVideoNativeAd moPubVideoNativeAd) {
+			mMoPubVideoNativeAd = new WeakReference<MoPubVideoNativeAd>(moPubVideoNativeAd);
+		}
+
+		@Override
+		public void execute() {
+			final MoPubVideoNativeAd moPubVideoNativeAd = mMoPubVideoNativeAd.get();
+			if (moPubVideoNativeAd != null) {
+				moPubVideoNativeAd.notifyAdImpressed();
+			}
+		}
+	}
+
+	@VisibleForTesting
+	@TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+	static class PayloadVisibilityStrategy implements VisibilityTrackingEvent.OnTrackedStrategy {
+		@NonNull private final Context mContext;
+		@NonNull private final String mUrl;
+
+		PayloadVisibilityStrategy(@NonNull final Context context, @NonNull final String url) {
+			mContext = context.getApplicationContext();
+			mUrl = url;
+		}
+
+		@Override
+		public void execute() {
+			TrackingRequest.makeTrackingHttpRequest(mUrl, mContext);
+		}
+	}
+
+	/**
+	 * Created purely for the purpose of mocking to ease testing.
+	 */
+	@VisibleForTesting
+	@TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+	static class NativeVideoControllerFactory {
+		public NativeVideoController createForId(final long id,
+		                                         @NonNull final Context context,
+		                                         @NonNull final List<VisibilityTrackingEvent> visibilityTrackingEvents,
+		                                         @NonNull final VastVideoConfig vastVideoConfig,
+		                                         @Nullable final EventDetails eventDetails) {
+			return NativeVideoController.createForId(id, context, visibilityTrackingEvents,
+					vastVideoConfig, eventDetails);
+		}
+	}
+
+	@VisibleForTesting
+	@TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+	static class VideoResponseHeaders {
+		private boolean mHeadersAreValid;
+		private int mPlayVisiblePercent;
+		private int mPauseVisiblePercent;
+		private int mImpressionMinVisiblePercent;
+		private int mImpressionVisibleMs;
+		private int mMaxBufferMs;
+
+		VideoResponseHeaders(@NonNull final Map<String, String> serverExtras) {
+			try {
+				mPlayVisiblePercent = Integer.parseInt(serverExtras.get(PLAY_VISIBLE_PERCENT));
+				mPauseVisiblePercent = Integer.parseInt(serverExtras.get(PAUSE_VISIBLE_PERCENT));
+				mImpressionMinVisiblePercent =
+						Integer.parseInt(serverExtras.get(IMPRESSION_MIN_VISIBLE_PERCENT));
+				mImpressionVisibleMs = Integer.parseInt(serverExtras.get(IMPRESSION_VISIBLE_MS));
+				mMaxBufferMs = Integer.parseInt(serverExtras.get(MAX_BUFFER_MS));
+				mHeadersAreValid = true;
+			} catch (NumberFormatException e) {
+				mHeadersAreValid = false;
+			}
+		}
+
+		boolean hasValidHeaders() {
+			return mHeadersAreValid;
+		}
+
+		int getPlayVisiblePercent() {
+			return mPlayVisiblePercent;
+		}
+
+		int getPauseVisiblePercent() {
+			return mPauseVisiblePercent;
+		}
+
+		int getImpressionMinVisiblePercent() {
+			return mImpressionMinVisiblePercent;
+		}
+
+		int getImpressionVisibleMs() {
+			return mImpressionVisibleMs;
+		}
+
+		int getMaxBufferMs() {
+			return mMaxBufferMs;
+		}
+	}
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubVideoNativeAdRenderer.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubVideoNativeAdRenderer.java
similarity index 95%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/MoPubVideoNativeAdRenderer.java
rename to mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubVideoNativeAdRenderer.java
index a4a3da39..551e6417 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubVideoNativeAdRenderer.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubVideoNativeAdRenderer.java
@@ -1,6 +1,6 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
+import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.view.LayoutInflater;
@@ -34,9 +34,9 @@ public MoPubVideoNativeAdRenderer(@NonNull final MediaViewBinder mediaViewBinder
 
     @Override
     @NonNull
-    public View createAdView(@NonNull final Activity activity, @Nullable final ViewGroup parent) {
+    public View createAdView(@NonNull final Context context, @Nullable final ViewGroup parent) {
         return LayoutInflater
-                .from(activity)
+                .from(context)
                 .inflate(mMediaViewBinder.layoutId, parent, false);
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
rename to mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeVideoController.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java
similarity index 99%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/NativeVideoController.java
rename to mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java
index 876e2c30..33e80e12 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeVideoController.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java
@@ -132,7 +132,7 @@ public static NativeVideoController createForId(final long id,
     }
 
     @VisibleForTesting
-    static void setForId(final long id,
+    public static void setForId(final long id,
             @NonNull final NativeVideoController nativeVideoController) {
         sManagerMap.put(id, nativeVideoController);
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeVideoViewController.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
similarity index 96%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
rename to mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
index 99e7c58e..4d8e4e55 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
@@ -16,6 +16,7 @@
 import android.view.ViewGroup.LayoutParams;
 import android.widget.VideoView;
 
+import com.mopub.common.Constants;
 import com.mopub.common.Preconditions;
 import com.mopub.common.UrlAction;
 import com.mopub.common.UrlHandler;
@@ -34,9 +35,6 @@
 
     enum VideoState { NONE, LOADING, BUFFERING, PAUSED, PLAYING, ENDED, FAILED_LOAD }
 
-    @NonNull public static final String NATIVE_VIDEO_ID = "native_video_id";
-    @NonNull public static final String NATIVE_VAST_VIDEO_CONFIG = "native_vast_video_config";
-
     @NonNull private VideoState mVideoState;
     @NonNull private VastVideoConfig mVastVideoConfig;
     @NonNull private final NativeFullScreenVideoView mFullScreenVideoView;
@@ -57,7 +55,7 @@ public NativeVideoViewController(@NonNull final Context context,
         this(context, intentExtras, savedInstanceState, baseVideoViewControllerListener,
                 new NativeFullScreenVideoView(context,
                         context.getResources().getConfiguration().orientation,
-                        ((VastVideoConfig) intentExtras.get(NATIVE_VAST_VIDEO_CONFIG))
+                        ((VastVideoConfig) intentExtras.get(Constants.NATIVE_VAST_VIDEO_CONFIG))
                                 .getCustomCtaText()));
     }
 
@@ -74,9 +72,9 @@ public NativeVideoViewController(@NonNull final Context context,
         Preconditions.checkNotNull(fullScreenVideoView);
 
         mVideoState = VideoState.NONE;
-        mVastVideoConfig = ((VastVideoConfig) intentExtras.get(NATIVE_VAST_VIDEO_CONFIG));
+        mVastVideoConfig = ((VastVideoConfig) intentExtras.get(Constants.NATIVE_VAST_VIDEO_CONFIG));
         mFullScreenVideoView = fullScreenVideoView;
-        final long videoId = (long) intentExtras.get(NATIVE_VIDEO_ID);
+        final long videoId = (long) intentExtras.get(Constants.NATIVE_VIDEO_ID);
         mNativeVideoController = NativeVideoController.getForId(videoId);
 
         // Variables being checked below may be null but if they are it indicates
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/VideoNativeAd.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/VideoNativeAd.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/nativeads/VideoNativeAd.java
rename to mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/VideoNativeAd.java
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/build.gradle b/mopub-sdk/mopub-sdk-rewardedvideo/build.gradle
new file mode 100644
index 00000000..f9ad623a
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/build.gradle
@@ -0,0 +1,11 @@
+apply from: '../shared-build.gradle'
+
+dependencies {
+    compile project(':mopub-sdk:mopub-sdk-interstitial')
+}
+
+project.description = 'MoPub Android SDK - Rewarded Video'
+project.ext.displayName = 'MoPub Android SDK - Rewarded Video'
+project.ext.projectName = 'mopub-sdk-rewardedvideo'
+project.ext.uploadName = 'mopub-android-sdk-rewardedvideo'
+apply from: '../publisher.gradle'
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/AndroidManifest.xml b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..0e4559c9
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/AndroidManifest.xml
@@ -0,0 +1,4 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.mopub.mobileads.rewarded_video">
+    <application/>
+</manifest>
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPubReward.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/common/MoPubReward.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/common/MoPubReward.java
rename to mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/common/MoPubReward.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java
rename to mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java
rename to mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideoListener.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoListener.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideoListener.java
rename to mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoListener.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
similarity index 91%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
rename to mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
index fab2d5d8..534d2c6a 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
@@ -58,8 +58,7 @@
     @NonNull private final AdRequestStatusMapping mAdRequestStatus;
     @NonNull private final RewardedVideoData mRewardedVideoData;
     @Nullable private MoPubRewardedVideoListener mVideoListener;
-    private final long mBroadcastIdentifier;
-    
+
     @NonNull private final Set<MediationSettings> mGlobalMediationSettings;
     @NonNull private final Map<String, Set<MediationSettings>> mInstanceMediationSettings;
 
@@ -119,8 +118,7 @@ private MoPubRewardedVideoManager(@NonNull Activity mainActivity, MediationSetti
         mInstanceMediationSettings = new HashMap<String, Set<MediationSettings>>();
         mCustomEventTimeoutHandler = new Handler();
         mTimeoutMap = new HashMap<String, Runnable>();
-        mBroadcastIdentifier = Utils.generateUniqueId();
-        
+
         mAdRequestStatus = new AdRequestStatusMapping();
     }
 
@@ -229,6 +227,15 @@ public static void loadVideo(@NonNull final String adUnitId,
             return;
         }
 
+        final String currentlyShowingAdUnitId =
+                sInstance.mRewardedVideoData.getCurrentlyShowingAdUnitId();
+        if (!TextUtils.isEmpty(currentlyShowingAdUnitId)) {
+            MoPubLog.d(String.format(Locale.US, "Did not queue rewarded video request for ad " +
+                    "unit %s. The video is already showing.", adUnitId));
+            return;
+        }
+
+
         // If any instance MediationSettings have been specified, update the internal map.
         // Note: This always clears the MediationSettings for the ad unit, whether or not any
         // MediationSettings have been provided.
@@ -292,7 +299,7 @@ public static void showVideo(@NonNull String adUnitId) {
                 sInstance.mRewardedVideoData.updateCustomEventLastShownRewardMapping(
                         customEvent.getClass(),
                         sInstance.mRewardedVideoData.getMoPubReward(adUnitId));
-                sInstance.mRewardedVideoData.setCurrentAdUnitId(adUnitId);
+                sInstance.mRewardedVideoData.setCurrentlyShowingAdUnitId(adUnitId);
                 sInstance.mAdRequestStatus.markPlayed(adUnitId);
                 customEvent.showVideo();
             } else {
@@ -354,7 +361,8 @@ private void onAdSuccess(AdResponse adResponse, String adUnitId) {
                     adResponse.getRewardedVideoCurrencyAmount());
             localExtras.put(DataKeys.AD_REPORT_KEY,
                     new AdReport(adUnitId, ClientMetadata.getInstance(mContext), adResponse));
-            localExtras.put(DataKeys.BROADCAST_IDENTIFIER_KEY, mBroadcastIdentifier);
+            localExtras.put(DataKeys.BROADCAST_IDENTIFIER_KEY, Utils.generateUniqueId());
+
             localExtras.put(DataKeys.REWARDED_VIDEO_CUSTOMER_ID,
                     mRewardedVideoData.getCustomerId());
             mRewardedVideoData.updateAdUnitRewardMapping(adUnitId,
@@ -476,8 +484,9 @@ protected void forEach(@NonNull final String moPubId) {
 
     public static <T extends CustomEventRewardedVideo>
     void onRewardedVideoStarted(@NonNull final Class<T> customEventClass, final String thirdPartyId) {
-        final String currentAdUnitId = sInstance.mRewardedVideoData.getCurrentAdUnitId();
-        if (TextUtils.isEmpty(currentAdUnitId)) {
+        final String currentlyShowingAdUnitId =
+                sInstance.mRewardedVideoData.getCurrentlyShowingAdUnitId();
+        if (TextUtils.isEmpty(currentlyShowingAdUnitId)) {
             postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
                 @Override
                 protected void forEach(@NonNull final String moPubId) {
@@ -488,7 +497,7 @@ protected void forEach(@NonNull final String moPubId) {
             postToInstance(new Runnable() {
                 @Override
                 public void run() {
-                    onRewardedVideoStartedAction(currentAdUnitId);
+                    onRewardedVideoStartedAction(currentlyShowingAdUnitId);
                 }
             });
         }
@@ -507,8 +516,9 @@ private static void onRewardedVideoStartedAction(@NonNull final String adUnitId)
 
     public static <T extends CustomEventRewardedVideo>
     void onRewardedVideoPlaybackError(@NonNull final Class<T> customEventClass, final String thirdPartyId, final MoPubErrorCode errorCode) {
-        final String currentAdUnitId = sInstance.mRewardedVideoData.getCurrentAdUnitId();
-        if (TextUtils.isEmpty(currentAdUnitId)) {
+        final String currentlyShowingAdUnitId =
+                sInstance.mRewardedVideoData.getCurrentlyShowingAdUnitId();
+        if (TextUtils.isEmpty(currentlyShowingAdUnitId)) {
             postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
                 @Override
                 protected void forEach(@NonNull final String moPubId) {
@@ -519,7 +529,7 @@ protected void forEach(@NonNull final String moPubId) {
             postToInstance(new Runnable() {
                 @Override
                 public void run() {
-                    onRewardedVideoPlaybackErrorAction(currentAdUnitId, errorCode);
+                    onRewardedVideoPlaybackErrorAction(currentlyShowingAdUnitId, errorCode);
                 }
             });
         }
@@ -535,8 +545,9 @@ private static void onRewardedVideoPlaybackErrorAction(@NonNull final String adU
 
     public static <T extends CustomEventRewardedVideo>
     void onRewardedVideoClicked(@NonNull final Class<T> customEventClass, final String thirdPartyId) {
-        final String currentAdUnitId = sInstance.mRewardedVideoData.getCurrentAdUnitId();
-        if (TextUtils.isEmpty(currentAdUnitId)) {
+        final String currentlyShowingAdUnitId =
+                sInstance.mRewardedVideoData.getCurrentlyShowingAdUnitId();
+        if (TextUtils.isEmpty(currentlyShowingAdUnitId)) {
             postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
                 @Override
                 protected void forEach(@NonNull final String moPubId) {
@@ -547,7 +558,7 @@ protected void forEach(@NonNull final String moPubId) {
             postToInstance(new Runnable() {
                 @Override
                 public void run() {
-                    onRewardedVideoClickedAction(currentAdUnitId);
+                    onRewardedVideoClickedAction(currentlyShowingAdUnitId);
                 }
             });
         }
@@ -563,8 +574,9 @@ private static void onRewardedVideoClickedAction(@NonNull final String adUnitId)
 
     public static <T extends CustomEventRewardedVideo>
     void onRewardedVideoClosed(@NonNull final Class<T> customEventClass, final String thirdPartyId) {
-        final String currentAdUnitId = sInstance.mRewardedVideoData.getCurrentAdUnitId();
-        if (TextUtils.isEmpty(currentAdUnitId)) {
+        final String currentlyShowingAdUnitId =
+                sInstance.mRewardedVideoData.getCurrentlyShowingAdUnitId();
+        if (TextUtils.isEmpty(currentlyShowingAdUnitId)) {
             postToInstance(new ForEachMoPubIdRunnable(customEventClass, thirdPartyId) {
                 @Override
                 protected void forEach(@NonNull final String moPubId) {
@@ -575,10 +587,11 @@ protected void forEach(@NonNull final String moPubId) {
             postToInstance(new Runnable() {
                 @Override
                 public void run() {
-                    onRewardedVideoClosedAction(currentAdUnitId);
+                    onRewardedVideoClosedAction(currentlyShowingAdUnitId);
                 }
             });
         }
+        sInstance.mRewardedVideoData.setCurrentlyShowingAdUnitId(null);
     }
 
     private static void onRewardedVideoClosedAction(@NonNull final String adUnitId) {
@@ -591,9 +604,10 @@ private static void onRewardedVideoClosedAction(@NonNull final String adUnitId)
     public static <T extends CustomEventRewardedVideo>
     void onRewardedVideoCompleted(@NonNull final Class<T> customEventClass, final String thirdPartyId, @NonNull final MoPubReward moPubReward) {
         // Unlike other callbacks in this class, only call the listener once with all the MoPubIds in the matching set.
-        final String currentAdUnitId = sInstance.mRewardedVideoData.getCurrentAdUnitId();
+        final String currentlyShowingAdUnitId =
+                sInstance.mRewardedVideoData.getCurrentlyShowingAdUnitId();
         final String serverCompletionUrl = sInstance.mRewardedVideoData.getServerCompletionUrl(
-                currentAdUnitId);
+                currentlyShowingAdUnitId);
         if (TextUtils.isEmpty(serverCompletionUrl)) {
             postToInstance(new Runnable() {
                 @Override
@@ -601,11 +615,21 @@ public void run() {
                     final MoPubReward chosenReward = chooseReward(
                             sInstance.mRewardedVideoData.getLastShownMoPubReward(customEventClass),
                             moPubReward);
-                    final Set<String> moPubIds = sInstance.mRewardedVideoData.getMoPubIdsForAdNetwork(
-                            customEventClass, thirdPartyId);
-                    Set<String> rewarded = new HashSet<String>(moPubIds);
+
+                    Set<String> rewardedIds = new HashSet<String>();
+                    if (TextUtils.isEmpty(currentlyShowingAdUnitId)) {
+                        final Set<String> moPubIds = sInstance.mRewardedVideoData.getMoPubIdsForAdNetwork(
+                                customEventClass, thirdPartyId);
+                        rewardedIds.addAll(moPubIds);
+                    } else {
+                        // If we know which ad unit is showing, only reward the currently showing
+                        // ad unit.
+                        rewardedIds.add(currentlyShowingAdUnitId);
+                    }
+
                     if (sInstance.mVideoListener != null) {
-                        sInstance.mVideoListener.onRewardedVideoCompleted(rewarded, chosenReward);
+                        sInstance.mVideoListener.onRewardedVideoCompleted(rewardedIds,
+                                chosenReward);
                     }
                 }
             });
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java
new file mode 100644
index 00000000..7380fbf2
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java
@@ -0,0 +1,53 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.MediationSettings;
+import com.mopub.common.Preconditions;
+
+/**
+ * MoPubRewardedVideos is a utility class that holds controller methods for other MoPub rewarded
+ * video classes.
+ */
+public class MoPubRewardedVideos {
+
+    public static void initializeRewardedVideo(@NonNull Activity activity,
+            MediationSettings... mediationSettings) {
+        Preconditions.checkNotNull(activity);
+
+        MoPubRewardedVideoManager.init(activity, mediationSettings);
+    }
+
+    public static void setRewardedVideoListener(@Nullable MoPubRewardedVideoListener listener) {
+        MoPubRewardedVideoManager.setVideoListener(listener);
+    }
+
+    public static void loadRewardedVideo(@NonNull String adUnitId,
+            @Nullable MediationSettings... mediationSettings) {
+        Preconditions.checkNotNull(adUnitId);
+
+        MoPubRewardedVideoManager.loadVideo(adUnitId, null, mediationSettings);
+    }
+
+    public static void loadRewardedVideo(@NonNull String adUnitId,
+            @Nullable MoPubRewardedVideoManager.RequestParameters requestParameters,
+            @Nullable MediationSettings... mediationSettings) {
+        Preconditions.checkNotNull(adUnitId);
+
+        MoPubRewardedVideoManager.loadVideo(adUnitId, requestParameters, mediationSettings);
+    }
+
+    public static boolean hasRewardedVideo(@NonNull String adUnitId) {
+        Preconditions.checkNotNull(adUnitId);
+
+        return MoPubRewardedVideoManager.hasVideo(adUnitId);
+    }
+
+    public static void showRewardedVideo(@NonNull String adUnitId) {
+        Preconditions.checkNotNull(adUnitId);
+
+        MoPubRewardedVideoManager.showVideo(adUnitId);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVastVideoInterstitial.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVastVideoInterstitial.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVastVideoInterstitial.java
rename to mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVastVideoInterstitial.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoBroadcastReceiver.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoBroadcastReceiver.java
similarity index 85%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoBroadcastReceiver.java
rename to mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoBroadcastReceiver.java
index e53712e2..4ec3c111 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoBroadcastReceiver.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoBroadcastReceiver.java
@@ -6,9 +6,10 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
+import com.mopub.common.IntentActions;
+
 public class RewardedVideoBroadcastReceiver extends BaseBroadcastReceiver {
 
-    public static final String ACTION_REWARDED_VIDEO_COMPLETE = "com.mopub.action.rewardedvideo.complete";
     private static IntentFilter sIntentFilter;
 
     @Nullable
@@ -26,7 +27,7 @@ public RewardedVideoBroadcastReceiver(
     public IntentFilter getIntentFilter() {
         if (sIntentFilter == null) {
             sIntentFilter = new IntentFilter();
-            sIntentFilter.addAction(ACTION_REWARDED_VIDEO_COMPLETE);
+            sIntentFilter.addAction(IntentActions.ACTION_REWARDED_VIDEO_COMPLETE);
         }
         return sIntentFilter;
     }
@@ -42,7 +43,7 @@ public void onReceive(@NonNull final Context context, @NonNull final Intent inte
         }
 
         final String action = intent.getAction();
-        if (ACTION_REWARDED_VIDEO_COMPLETE.equals(action)) {
+        if (IntentActions.ACTION_REWARDED_VIDEO_COMPLETE.equals(action)) {
             mRewardedVideoListener.onVideoComplete();
             unregister(this);
         }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequest.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequest.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequest.java
rename to mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequest.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java
similarity index 100%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java
rename to mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoData.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoData.java
similarity index 92%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoData.java
rename to mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoData.java
index 64c5473a..1023820d 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/RewardedVideoData.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoData.java
@@ -7,6 +7,7 @@
 
 import com.mopub.common.MoPubReward;
 import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
 
 import java.util.Collections;
 import java.util.HashMap;
@@ -33,7 +34,7 @@
     @NonNull
     private final Set<CustomEventRewardedVideo.CustomEventRewardedVideoListener> mAdNetworkListeners;
     @Nullable
-    private String mCurrentAdUnitId;
+    private String mCurrentlyShowingAdUnitId;
     @Nullable
     private String mCustomerId;
 
@@ -183,13 +184,13 @@ void associateCustomEventWithMoPubId(
         moPubIds.add(moPubId);
     }
 
-    void setCurrentAdUnitId(@Nullable final String currentAdUnitId) {
-        mCurrentAdUnitId = currentAdUnitId;
+    void setCurrentlyShowingAdUnitId(@Nullable final String currentAdUnitId) {
+        mCurrentlyShowingAdUnitId = currentAdUnitId;
     }
 
     @Nullable
-    String getCurrentAdUnitId() {
-        return mCurrentAdUnitId;
+    String getCurrentlyShowingAdUnitId() {
+        return mCurrentlyShowingAdUnitId;
     }
 
     void setCustomerId(@Nullable final String customerId) {
@@ -201,6 +202,19 @@ String getCustomerId() {
         return mCustomerId;
     }
 
+    @VisibleForTesting
+    @Deprecated
+    void clear() {
+        mAdUnitToCustomEventMap.clear();
+        mAdUnitToRewardMap.clear();
+        mAdUnitToServerCompletionUrlMap.clear();
+        mCustomEventToRewardMap.clear();
+        mCustomEventToMoPubIdMap.clear();
+        mAdNetworkListeners.clear();
+        mCurrentlyShowingAdUnitId = null;
+        mCustomerId = null;
+    }
+
     private static class TwoPartKey extends Pair<Class<? extends CustomEventRewardedVideo>, String> {
         @NonNull
         final Class<? extends CustomEventRewardedVideo> customEventClass;
diff --git a/mopub-sdk/publisher.gradle b/mopub-sdk/publisher.gradle
new file mode 100644
index 00000000..ee0f09ea
--- /dev/null
+++ b/mopub-sdk/publisher.gradle
@@ -0,0 +1,63 @@
+apply plugin: 'com.android.library'
+apply plugin: 'com.novoda.bintray-release'
+
+def siteUrl = 'https://github.com/mopub/mopub-android-sdk'
+def gitUrl = 'https://github.com/mopub/mopub-android-sdk.git'
+def bintrayRepo = 'mopub-android-sdk'
+def bintrayUserOrg = 'mopub'
+// Put your credentials (bintray.user, bintray.apikey) in ~/.gradle/gradle.properties
+
+if (JavaVersion.current().isJava8Compatible()) {
+    allprojects {
+        tasks.withType(Javadoc) {
+            // The javadoc task in Java 8 is too strict and throws unnecessary syntax errors
+            // if our comments fail to abide by the new standard.
+            options.addStringOption('Xdoclint:none', '-quiet')
+        }
+    }
+}
+
+android.libraryVariants.all { variant ->
+    def name = variant.buildType.name
+    def task = project.tasks.create "jar${name.capitalize()}", Jar
+
+    task.dependsOn variant.javaCompile
+    task.from variant.javaCompile.destinationDir
+    artifacts.add('archives', task);
+}
+
+android.libraryVariants.all { variant ->
+    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
+        title = project.ext.displayName
+        description "Generates Javadoc for $variant.name."
+        source = variant.javaCompile.source
+        classpath += files(variant.javaCompile.classpath.files, project.android.getBootClasspath())
+        classpath += project.configurations.compile
+
+        options {
+            links "http://docs.oracle.com/javase/7/docs/api/"
+            linksOffline "https://developer.android.com/reference","${android.sdkDirectory}/docs/reference"
+        }
+
+        exclude '**/BuildConfig.java'
+        exclude '**/R.java'
+    }
+}
+
+publish {
+    repoName = bintrayRepo
+    userOrg = bintrayUserOrg
+    groupId = project.group
+    artifactId = project.ext.projectName
+    uploadName = project.ext.uploadName
+    version = project.version
+    description = project.description
+    website = siteUrl
+    repository = gitUrl
+
+    bintrayUser = project.hasProperty("bintray.user") ? project.getProperty("bintray.user") : ""
+    bintrayKey = project.hasProperty("bintray.apikey") ? project.getProperty("bintray.apikey") : ""
+
+    autoPublish = true
+    dryRun = false
+}
diff --git a/mopub-sdk/res/.README b/mopub-sdk/res/.README
deleted file mode 100644
index 902f3db1..00000000
--- a/mopub-sdk/res/.README
+++ /dev/null
@@ -1 +0,0 @@
-This res directory exists to allow building on Eclipse.
diff --git a/mopub-sdk/shared-build.gradle b/mopub-sdk/shared-build.gradle
new file mode 100644
index 00000000..dfe9809f
--- /dev/null
+++ b/mopub-sdk/shared-build.gradle
@@ -0,0 +1,80 @@
+apply plugin: 'com.android.library'
+
+repositories {
+    mavenCentral()
+    jcenter()
+    flatDir {
+        dirs project(':mopub-sdk').file('../libs')
+    }
+}
+
+project.group = 'com.mopub'
+project.version = '4.9.0'
+
+android {
+    compileSdkVersion 23
+    buildToolsVersion '24.0.1'
+    lintOptions { abortOnError false }
+    useLibrary 'org.apache.http.legacy'
+
+    defaultConfig {
+        versionCode 44
+        versionName version
+        minSdkVersion 9
+        targetSdkVersion 23
+        consumerProguardFiles '../proguard.txt'
+
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'src/main/AndroidManifest.xml'
+            java.srcDirs = ['src/main/java']
+            resources.srcDirs = ['src/main/resources']
+            aidl.srcDirs = ['src/main']
+            renderscript.srcDirs = ['src/main']
+            res.srcDirs = ['res']
+            assets.srcDirs = ['assets']
+        }
+    }
+
+    testOptions {
+        unitTests {
+            // This causes android platform methods from the test JAR
+            // to return null, false, etc instead of throwing an exception.
+            // We should periodically disable this and tackle the broken tests
+            // as it exposes when we are hitting platform APIs in our tests.
+            // If these tests *require* platform APIs we may want to make them
+            // connected tests instead.
+            returnDefaultValues = true
+
+            // Test JVM settings since we have a lot of classes loaded.
+            all {
+                jvmArgs '-XX:MaxPermSize=4096m', '-Xmx8192m'
+                forkEvery 200
+            }
+        }
+    }
+
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'),
+                    project(':mopub-sdk').file('proguard.txt')
+        }
+
+        debug {
+            minifyEnabled false
+        }
+    }
+
+    // Note: You will also need a local.properties file to set the location of the SDK in the same
+    // way that the existing SDK requires, using the sdk.dir property.
+    // Alternatively, you can set an environment variable called ANDROID_HOME. There is no
+    // difference between the two methods, you can use the one you prefer.
+}
+
+dependencies {
+    compile 'com.android.support:support-v4:23.4.0'
+    compile 'com.android.support:support-annotations:23.4.0'
+}
diff --git a/mopub-sdk/AndroidManifest.xml b/mopub-sdk/src/main/AndroidManifest.xml
similarity index 100%
rename from mopub-sdk/AndroidManifest.xml
rename to mopub-sdk/src/main/AndroidManifest.xml
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
deleted file mode 100644
index f857b641..00000000
--- a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
+++ /dev/null
@@ -1,110 +0,0 @@
-package com.mopub.common;
-
-import android.app.Activity;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import com.mopub.mobileads.MoPubRewardedVideoListener;
-import com.mopub.mobileads.MoPubRewardedVideoManager;
-import com.mopub.mobileads.MoPubRewardedVideoManager.RequestParameters;
-
-public class MoPub {
-    public static final String SDK_VERSION = "4.7.1";
-
-    public enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
-
-    private static final int DEFAULT_LOCATION_PRECISION = 6;
-    private static volatile LocationAwareness sLocationLocationAwareness = LocationAwareness.NORMAL;
-    private static volatile int sLocationPrecision = DEFAULT_LOCATION_PRECISION;
-
-    public static LocationAwareness getLocationAwareness() {
-        return sLocationLocationAwareness;
-    }
-
-    public static void setLocationAwareness(LocationAwareness locationAwareness) {
-        sLocationLocationAwareness = locationAwareness;
-    }
-
-    public static int getLocationPrecision() {
-        return sLocationPrecision;
-    }
-
-    /**
-     * Sets the precision to use when the SDK's location awareness is set
-     * to {@link com.mopub.common.MoPub.LocationAwareness#TRUNCATED}.
-     */
-    public static void setLocationPrecision(int precision) {
-        sLocationPrecision = Math.min(Math.max(0, precision), DEFAULT_LOCATION_PRECISION);
-    }
-
-
-    //////// MoPub LifecycleListener messages ////////
-
-    public static void onCreate(@NonNull final Activity activity) {
-        MoPubLifecycleManager.getInstance(activity).onCreate(activity);
-        updateActivity(activity);
-    }
-
-    public static void onStart(@NonNull final Activity activity) {
-        MoPubLifecycleManager.getInstance(activity).onStart(activity);
-        updateActivity(activity);
-    }
-
-    public static void onPause(@NonNull final Activity activity) {
-        MoPubLifecycleManager.getInstance(activity).onPause(activity);
-    }
-
-    public static void onResume(@NonNull final Activity activity) {
-        MoPubLifecycleManager.getInstance(activity).onResume(activity);
-        updateActivity(activity);
-    }
-
-    public static void onRestart(@NonNull final Activity activity) {
-        MoPubLifecycleManager.getInstance(activity).onRestart(activity);
-        updateActivity(activity);
-    }
-
-    public static void onStop(@NonNull final Activity activity) {
-        MoPubLifecycleManager.getInstance(activity).onStop(activity);
-    }
-
-    public static void onDestroy(@NonNull final Activity activity) {
-        MoPubLifecycleManager.getInstance(activity).onDestroy(activity);
-    }
-
-    public static void onBackPressed(@NonNull final Activity activity) {
-        MoPubLifecycleManager.getInstance(activity).onBackPressed(activity);
-    }
-
-    ////////// MoPub RewardedVideoControl methods //////////
-    public static void initializeRewardedVideo(@NonNull Activity activity, MediationSettings... mediationSettings) {
-        MoPubRewardedVideoManager.init(activity, mediationSettings);
-    }
-
-    private static void updateActivity(@NonNull Activity activity) {
-        MoPubRewardedVideoManager.updateActivity(activity);
-    }
-
-    public static void setRewardedVideoListener(@Nullable MoPubRewardedVideoListener listener) {
-        MoPubRewardedVideoManager.setVideoListener(listener);
-    }
-
-    public static void loadRewardedVideo(@NonNull String adUnitId,
-            @Nullable MediationSettings... mediationSettings) {
-        MoPubRewardedVideoManager.loadVideo(adUnitId, null, mediationSettings);
-    }
-
-    public static void loadRewardedVideo(@NonNull String adUnitId,
-            @Nullable RequestParameters requestParameters,
-            @Nullable MediationSettings... mediationSettings) {
-        MoPubRewardedVideoManager.loadVideo(adUnitId, requestParameters, mediationSettings);
-    }
-
-    public static boolean hasRewardedVideo(@NonNull String adUnitId) {
-        return MoPubRewardedVideoManager.hasVideo(adUnitId);
-    }
-
-    public static void showRewardedVideo(@NonNull String adUnitId) {
-        MoPubRewardedVideoManager.showVideo(adUnitId);
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
deleted file mode 100644
index 25bf2a69..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
+++ /dev/null
@@ -1,277 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.location.Location;
-import android.text.TextUtils;
-
-import com.mopub.common.AdFormat;
-import com.mopub.common.MoPub;
-import com.mopub.common.VisibleForTesting;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.mobileads.factories.CustomEventInterstitialAdapterFactory;
-
-import java.util.Map;
-
-import static com.mopub.common.LocationService.LocationAwareness;
-import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
-
-public class MoPubInterstitial implements CustomEventInterstitialAdapter.CustomEventInterstitialAdapterListener {
-
-    private enum InterstitialState {
-        CUSTOM_EVENT_AD_READY,
-        NOT_READY;
-
-        boolean isReady() {
-            return this != InterstitialState.NOT_READY;
-        }
-    }
-
-    private MoPubInterstitialView mInterstitialView;
-    private CustomEventInterstitialAdapter mCustomEventInterstitialAdapter;
-    private InterstitialAdListener mInterstitialAdListener;
-    private Activity mActivity;
-    private String mAdUnitId;
-    private InterstitialState mCurrentInterstitialState;
-    private boolean mIsDestroyed;
-
-    public interface InterstitialAdListener {
-        public void onInterstitialLoaded(MoPubInterstitial interstitial);
-        public void onInterstitialFailed(MoPubInterstitial interstitial, MoPubErrorCode errorCode);
-        public void onInterstitialShown(MoPubInterstitial interstitial);
-        public void onInterstitialClicked(MoPubInterstitial interstitial);
-        public void onInterstitialDismissed(MoPubInterstitial interstitial);
-    }
-
-    public MoPubInterstitial(Activity activity, String id) {
-        mActivity = activity;
-        mAdUnitId = id;
-
-        mInterstitialView = new MoPubInterstitialView(mActivity);
-        mInterstitialView.setAdUnitId(mAdUnitId);
-
-        mCurrentInterstitialState = InterstitialState.NOT_READY;
-
-    }
-
-    public void load() {
-        resetCurrentInterstitial();
-        mInterstitialView.loadAd();
-    }
-
-    public void forceRefresh() {
-        resetCurrentInterstitial();
-        mInterstitialView.forceRefresh();
-    }
-
-    private void resetCurrentInterstitial() {
-        mCurrentInterstitialState = InterstitialState.NOT_READY;
-
-        if (mCustomEventInterstitialAdapter != null) {
-            mCustomEventInterstitialAdapter.invalidate();
-            mCustomEventInterstitialAdapter = null;
-        }
-
-        mIsDestroyed = false;
-    }
-
-    public boolean isReady() {
-        return mCurrentInterstitialState.isReady();
-    }
-
-    boolean isDestroyed() {
-        return mIsDestroyed;
-    }
-
-    public boolean show() {
-        switch (mCurrentInterstitialState) {
-            case CUSTOM_EVENT_AD_READY:
-                showCustomEventInterstitial();
-                return true;
-        }
-        return false;
-    }
-
-    private void showCustomEventInterstitial() {
-        if (mCustomEventInterstitialAdapter != null) mCustomEventInterstitialAdapter.showInterstitial();
-    }
-
-    Integer getAdTimeoutDelay() {
-        return mInterstitialView.getAdTimeoutDelay();
-    }
-
-    MoPubInterstitialView getMoPubInterstitialView() {
-        return mInterstitialView;
-    }
-
-    ////////////////////////////////////////////////////////////////////////////////////////////////
-
-    public void setKeywords(String keywords) {
-        mInterstitialView.setKeywords(keywords);
-    }
-
-    public String getKeywords() {
-        return mInterstitialView.getKeywords();
-    }
-
-    public Activity getActivity() {
-        return mActivity;
-    }
-
-    public Location getLocation() {
-        return mInterstitialView.getLocation();
-    }
-
-    public void destroy() {
-        mIsDestroyed = true;
-
-        if (mCustomEventInterstitialAdapter != null) {
-            mCustomEventInterstitialAdapter.invalidate();
-            mCustomEventInterstitialAdapter = null;
-        }
-
-        mInterstitialView.setBannerAdListener(null);
-        mInterstitialView.destroy();
-    }
-
-    public void setInterstitialAdListener(InterstitialAdListener listener) {
-        mInterstitialAdListener = listener;
-    }
-
-    public InterstitialAdListener getInterstitialAdListener() {
-        return mInterstitialAdListener;
-    }
-
-    public void setTesting(boolean testing) {
-        mInterstitialView.setTesting(testing);
-    }
-
-    public boolean getTesting() {
-        return mInterstitialView.getTesting();
-    }
-
-    public void setLocalExtras(Map<String, Object> extras) {
-        mInterstitialView.setLocalExtras(extras);
-    }
-
-    public Map<String, Object> getLocalExtras() {
-        return mInterstitialView.getLocalExtras();
-    }
-
-    /*
-     * Implements CustomEventInterstitialAdapter.CustomEventInterstitialListener
-     */
-
-    @Override
-    public void onCustomEventInterstitialLoaded() {
-        if (mIsDestroyed) return;
-
-        mCurrentInterstitialState = InterstitialState.CUSTOM_EVENT_AD_READY;
-
-        if (mInterstitialAdListener != null) {
-            mInterstitialAdListener.onInterstitialLoaded(this);
-        }
-    }
-
-    @Override
-    public void onCustomEventInterstitialFailed(MoPubErrorCode errorCode) {
-        if (isDestroyed()) return;
-
-        mCurrentInterstitialState = InterstitialState.NOT_READY;
-        mInterstitialView.loadFailUrl(errorCode);
-    }
-
-    @Override
-    public void onCustomEventInterstitialShown() {
-        if (isDestroyed()) return;
-
-        mInterstitialView.trackImpression();
-
-        if (mInterstitialAdListener != null) {
-            mInterstitialAdListener.onInterstitialShown(this);
-        }
-    }
-
-    @Override
-    public void onCustomEventInterstitialClicked() {
-        if (isDestroyed()) return;
-
-        mInterstitialView.registerClick();
-
-        if (mInterstitialAdListener != null) {
-            mInterstitialAdListener.onInterstitialClicked(this);
-        }
-    }
-
-    @Override
-    public void onCustomEventInterstitialDismissed() {
-        if (isDestroyed()) return;
-
-        mCurrentInterstitialState = InterstitialState.NOT_READY;
-
-        if (mInterstitialAdListener != null) {
-            mInterstitialAdListener.onInterstitialDismissed(this);
-        }
-    }
-
-    ////////////////////////////////////////////////////////////////////////////////////////////////
-
-    public class MoPubInterstitialView extends MoPubView {
-
-        public MoPubInterstitialView(Context context) {
-            super(context);
-            setAutorefreshEnabled(false);
-        }
-
-        @Override
-        public AdFormat getAdFormat() {
-            return AdFormat.INTERSTITIAL;
-        }
-
-        @Override
-        protected void loadCustomEvent(String customEventClassName, Map<String, String> serverExtras) {
-            if (mAdViewController == null) {
-                return;
-            }
-
-            if (TextUtils.isEmpty(customEventClassName)) {
-                MoPubLog.d("Couldn't invoke custom event because the server did not specify one.");
-                loadFailUrl(ADAPTER_NOT_FOUND);
-                return;
-            }
-
-            if (mCustomEventInterstitialAdapter != null) {
-                mCustomEventInterstitialAdapter.invalidate();
-            }
-
-            MoPubLog.d("Loading custom event interstitial adapter.");
-
-            mCustomEventInterstitialAdapter = CustomEventInterstitialAdapterFactory.create(
-                    MoPubInterstitial.this,
-                    customEventClassName,
-                    serverExtras,
-                    mAdViewController.getBroadcastIdentifier(),
-                    mAdViewController.getAdReport());
-            mCustomEventInterstitialAdapter.setAdapterListener(MoPubInterstitial.this);
-            mCustomEventInterstitialAdapter.loadInterstitial();
-        }
-
-        protected void trackImpression() {
-            MoPubLog.d("Tracking impression for interstitial.");
-            if (mAdViewController != null) mAdViewController.trackImpression();
-        }
-
-        @Override
-        protected void adFailed(MoPubErrorCode errorCode) {
-            if (mInterstitialAdListener != null) {
-                mInterstitialAdListener.onInterstitialFailed(MoPubInterstitial.this, errorCode);
-            }
-        }
-    }
-
-    @VisibleForTesting
-    @Deprecated
-    void setInterstitialView(MoPubInterstitialView interstitialView) {
-        mInterstitialView = interstitialView;
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
deleted file mode 100644
index e1409e0e..00000000
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
+++ /dev/null
@@ -1,940 +0,0 @@
-package com.mopub.nativeads;
-
-import android.annotation.TargetApi;
-import android.app.Activity;
-import android.content.Context;
-import android.graphics.SurfaceTexture;
-import android.media.AudioManager;
-import android.os.Build;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.text.TextUtils;
-import android.view.TextureView;
-import android.view.View;
-
-import com.mopub.common.DataKeys;
-import com.mopub.common.Preconditions;
-import com.mopub.common.VisibleForTesting;
-import com.mopub.common.event.BaseEvent;
-import com.mopub.common.event.Event;
-import com.mopub.common.event.EventDetails;
-import com.mopub.common.event.MoPubEvents;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.Utils;
-import com.mopub.mobileads.MraidVideoPlayerActivity;
-import com.mopub.mobileads.VastManager;
-import com.mopub.mobileads.VastTracker;
-import com.mopub.mobileads.VastVideoConfig;
-import com.mopub.mobileads.VideoViewabilityTracker;
-import com.mopub.mobileads.factories.VastManagerFactory;
-import com.mopub.nativeads.NativeVideoController.NativeVideoProgressRunnable;
-import com.mopub.nativeads.events.NativeAdType;
-import com.mopub.network.TrackingRequest;
-
-import org.json.JSONArray;
-import org.json.JSONObject;
-
-import java.lang.ref.WeakReference;
-import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-import java.util.Set;
-
-import static com.mopub.common.DataKeys.EVENT_DETAILS;
-import static com.mopub.common.DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT;
-import static com.mopub.common.DataKeys.IMPRESSION_VISIBLE_MS;
-import static com.mopub.common.DataKeys.JSON_BODY_KEY;
-import static com.mopub.common.DataKeys.MAX_BUFFER_MS;
-import static com.mopub.common.DataKeys.PAUSE_VISIBLE_PERCENT;
-import static com.mopub.common.DataKeys.PLAY_VISIBLE_PERCENT;
-import static com.mopub.nativeads.NativeImageHelper.preCacheImages;
-import static com.mopub.nativeads.NativeVideoController.VisibilityTrackingEvent;
-
-@TargetApi(Build.VERSION_CODES.JELLY_BEAN)
-public class MoPubCustomEventVideoNative extends CustomEventNative {
-
-    @Override
-    protected void loadNativeAd(@NonNull final Activity activity,
-            @NonNull final CustomEventNativeListener customEventNativeListener,
-            @NonNull final Map<String, Object> localExtras,
-            @NonNull final Map<String, String> serverExtras) {
-        setCustomEventNativeListener(customEventNativeListener);
-        setNativeAdType(NativeAdType.Mopub);
-
-        final Object json = localExtras.get(JSON_BODY_KEY);
-        // null or non-JSONObjects should not be passed in localExtras as JSON_BODY_KEY
-        if (!(json instanceof JSONObject)) {
-            notifyLoadFailed(NativeErrorCode.INVALID_RESPONSE);
-            return;
-        }
-
-        final Object eventDetailsObject = localExtras.get(EVENT_DETAILS);
-        final EventDetails eventDetails = eventDetailsObject instanceof EventDetails ?
-                (EventDetails) eventDetailsObject : null;
-
-        final VideoResponseHeaders videoResponseHeaders = new VideoResponseHeaders(serverExtras);
-        if (!videoResponseHeaders.hasValidHeaders()) {
-            notifyLoadFailed(NativeErrorCode.INVALID_RESPONSE);
-            return;
-        }
-
-        final Object clickTrackingUrlFromHeaderObject =
-                localExtras.get(DataKeys.CLICK_TRACKING_URL_KEY);
-        // Ensure click tracking url is a non-empty String
-        if (!(clickTrackingUrlFromHeaderObject instanceof String) ||
-                TextUtils.isEmpty((String) clickTrackingUrlFromHeaderObject)) {
-            notifyLoadFailed(NativeErrorCode.UNSPECIFIED);
-            return;
-        }
-
-        final String clickTrackingUrlFromHeader = (String) clickTrackingUrlFromHeaderObject;
-        final MoPubVideoNativeAd videoNativeAd = new MoPubVideoNativeAd(activity, (JSONObject) json,
-                this, videoResponseHeaders, eventDetails,
-                clickTrackingUrlFromHeader);
-        try {
-            videoNativeAd.loadAd();
-        } catch (IllegalArgumentException e) {
-            notifyLoadFailed(NativeErrorCode.UNSPECIFIED);
-        }
-    }
-
-    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
-    public static class MoPubVideoNativeAd extends VideoNativeAd
-            implements VastManager.VastManagerListener, NativeVideoProgressRunnable.ProgressListener,
-            AudioManager.OnAudioFocusChangeListener {
-
-        enum Parameter {
-            IMPRESSION_TRACKER("imptracker", true),
-            CLICK_TRACKER("clktracker", true),
-            TITLE("title", false),
-            TEXT("text", false),
-            IMAGE_URL("mainimage", false),
-            ICON_URL("iconimage", false),
-            CLICK_DESTINATION("clk", false),
-            FALLBACK("fallback", false),
-            CALL_TO_ACTION("ctatext", false),
-            VAST_VIDEO("video", false);
-
-            @NonNull final String mName;
-            final boolean mRequired;
-
-            Parameter(@NonNull final String name, final boolean required) {
-                Preconditions.checkNotNull(name);
-                mName = name;
-                mRequired = required;
-            }
-
-            @Nullable
-            static Parameter from(@NonNull final String name) {
-                Preconditions.checkNotNull(name);
-                for (final Parameter parameter : values()) {
-                    if (parameter.mName.equals(name)) {
-                        return parameter;
-                    }
-                }
-
-                return null;
-            }
-
-            @NonNull
-            @VisibleForTesting
-            static final Set<String> requiredKeys = new HashSet<String>();
-            static {
-                for (final Parameter parameter : values()) {
-                    if (parameter.mRequired) {
-                        requiredKeys.add(parameter.mName);
-                    }
-                }
-            }
-        }
-
-        public enum VideoState {
-            CREATED, LOADING, BUFFERING, PAUSED, PLAYING, PLAYING_MUTED, ENDED, FAILED_LOAD
-        }
-
-        static final String PRIVACY_INFORMATION_CLICKTHROUGH_URL = "https://www.mopub.com/optout/";
-
-        @NonNull private final Context mContext;
-        @NonNull private final JSONObject mJsonObject;
-        @NonNull private VideoState mVideoState;
-        @NonNull private final VisibilityTracker mVideoVisibleTracking;
-        @NonNull private final String mMoPubClickTrackingUrl;
-        @NonNull private final VideoResponseHeaders mVideoResponseHeaders;
-        @NonNull private final NativeVideoControllerFactory mNativeVideoControllerFactory;
-        @Nullable private NativeVideoController mNativeVideoController;
-
-        // We need to hold a reference to the VastManager because internal VAST classes
-        // hold only weak refs to this.
-        @NonNull private final VastManager mVastManager;
-        @Nullable VastVideoConfig mVastVideoConfig;
-        @Nullable private MediaLayout mMediaLayout;
-        @Nullable private View mRootView;
-        @Nullable private final EventDetails mEventDetails;
-
-        private final long mId;
-        private boolean mNeedsSeek;
-        private boolean mNeedsPrepare;
-        private boolean mPauseCanBeTracked = false;
-        private boolean mResumeCanBeTracked = false;
-
-        // These variables influence video state.
-        private int mLatestVideoControllerState;
-        private boolean mError;
-        private boolean mLatestVisibility;
-        private boolean mMuted;
-        private boolean mEnded;
-
-        public MoPubVideoNativeAd(
-                @NonNull final Activity activity,
-                @NonNull final JSONObject jsonObject,
-                @NonNull final CustomEventNative customEventNative,
-                @NonNull final VideoResponseHeaders videoResponseHeaders,
-                @Nullable final EventDetails eventDetails,
-                @NonNull final String clickTrackingUrl) {
-            this(activity, jsonObject, customEventNative, videoResponseHeaders,
-                    new VisibilityTracker(activity), new NativeVideoControllerFactory(),
-                    eventDetails, clickTrackingUrl, VastManagerFactory.create(activity.getApplicationContext(), false));
-        }
-
-        @VisibleForTesting
-        MoPubVideoNativeAd(
-                @NonNull final Activity activity,
-                @NonNull final JSONObject jsonObject,
-                @NonNull final CustomEventNative customEventNative,
-                @NonNull final VideoResponseHeaders videoResponseHeaders,
-                @NonNull final VisibilityTracker visibilityTracker,
-                @NonNull final NativeVideoControllerFactory nativeVideoControllerFactory,
-                @Nullable final EventDetails eventDetails,
-                @NonNull final String clickTrackingUrl,
-                @NonNull final VastManager vastManager) {
-            Preconditions.checkNotNull(activity);
-            Preconditions.checkNotNull(jsonObject);
-            Preconditions.checkNotNull(customEventNative);
-            Preconditions.checkNotNull(videoResponseHeaders);
-            Preconditions.checkNotNull(visibilityTracker);
-            Preconditions.checkNotNull(nativeVideoControllerFactory);
-            Preconditions.checkNotNull(clickTrackingUrl);
-            Preconditions.checkNotNull(vastManager);
-            setEventNative(customEventNative);
-            mContext = activity.getApplicationContext();
-            mJsonObject = jsonObject;
-            mVideoResponseHeaders = videoResponseHeaders;
-
-            mNativeVideoControllerFactory = nativeVideoControllerFactory;
-            mMoPubClickTrackingUrl = clickTrackingUrl;
-
-            mEventDetails = eventDetails;
-
-            mId = Utils.generateUniqueId();
-            mNeedsSeek = true;
-            mVideoState = VideoState.CREATED;
-
-            mNeedsPrepare = true;
-            mLatestVideoControllerState = NativeVideoController.STATE_IDLE;
-            mMuted = true;
-            mVideoVisibleTracking = visibilityTracker;
-            mVideoVisibleTracking.setVisibilityTrackerListener(new VisibilityTracker
-                    .VisibilityTrackerListener() {
-                @Override
-                public void onVisibilityChanged(final List<View> visibleViews,
-                        final List<View> invisibleViews) {
-                    if (!visibleViews.isEmpty() && !mLatestVisibility) { // State transition
-                        mLatestVisibility = true;
-                        maybeChangeState();
-                    } else if (!invisibleViews.isEmpty() && mLatestVisibility) { // state transition
-                        mLatestVisibility = false;
-                        maybeChangeState();
-                    }
-                }
-            });
-            mVastManager = vastManager;
-        }
-
-        @Override
-        protected void loadAd() throws IllegalArgumentException {
-            if (!containsRequiredKeys(mJsonObject)) {
-                throw new IllegalArgumentException("JSONObject did not contain required keys.");
-            }
-
-            super.loadAd();
-            final Iterator<String> keys = mJsonObject.keys();
-            while (keys.hasNext()) {
-                final String key = keys.next();
-                final Parameter parameter = Parameter.from(key);
-
-                if (parameter != null) {
-                    try {
-                        addInstanceVariable(parameter, mJsonObject.opt(key));
-                    } catch (ClassCastException e) {
-                        throw new IllegalArgumentException("JSONObject key (" + key
-                                + ") contained unexpected value.");
-                    }
-                } else {
-                    addExtra(key, mJsonObject.opt(key));
-                }
-            }
-            setPrivacyInformationIconClickThroughUrl(PRIVACY_INFORMATION_CLICKTHROUGH_URL);
-
-            preCacheImages(mContext, getAllImageUrls(), new NativeImageHelper.ImageListener() {
-                @Override
-                public void onImagesCached() {
-                    mVastManager.prepareVastVideoConfiguration(getVastVideo(),
-                            MoPubVideoNativeAd.this,
-                            mEventDetails == null ? null : mEventDetails.getDspCreativeId(),
-                            mContext);
-                }
-
-                @Override
-                public void onImagesFailedToCache(final NativeErrorCode errorCode) {
-                    notifyLoadFailed(errorCode);
-                }
-            });
-        }
-
-        @Override
-        public void onVastVideoConfigurationPrepared(@Nullable VastVideoConfig vastVideoConfig) {
-            if (vastVideoConfig == null) {
-                notifyLoadFailed(NativeErrorCode.INVALID_RESPONSE);
-                return;
-            }
-
-            final List<NativeVideoController.VisibilityTrackingEvent> visibilityTrackingEvents =
-                    new ArrayList<VisibilityTrackingEvent>();
-
-            // Custom visibility tracking event from http response headers
-            final VisibilityTrackingEvent visibilityTrackingEvent = new VisibilityTrackingEvent();
-            visibilityTrackingEvent.strategy = new HeaderVisibilityStrategy(this);
-            visibilityTrackingEvent.minimumPercentageVisible =
-                    mVideoResponseHeaders.getImpressionMinVisiblePercent();
-            visibilityTrackingEvent.totalRequiredPlayTimeMs =
-                    mVideoResponseHeaders.getImpressionVisibleMs();
-            visibilityTrackingEvents.add(visibilityTrackingEvent);
-
-            // Visibility tracking event from http response Vast payload
-            mVastVideoConfig = vastVideoConfig;
-            final VideoViewabilityTracker vastVideoViewabilityTracker =
-                    mVastVideoConfig.getVideoViewabilityTracker();
-            if (vastVideoViewabilityTracker != null) {
-                final VisibilityTrackingEvent vastVisibilityTrackingEvent =
-                        new VisibilityTrackingEvent();
-                vastVisibilityTrackingEvent.strategy =
-                        new PayloadVisibilityStrategy(mContext,
-                                vastVideoViewabilityTracker.getTrackingUrl());
-                vastVisibilityTrackingEvent.minimumPercentageVisible =
-                        vastVideoViewabilityTracker.getPercentViewable();
-                vastVisibilityTrackingEvent.totalRequiredPlayTimeMs =
-                        vastVideoViewabilityTracker.getViewablePlaytimeMS();
-                visibilityTrackingEvents.add(vastVisibilityTrackingEvent);
-            }
-
-            Set<String> clickTrackers = new HashSet<String>();
-            clickTrackers.add(mMoPubClickTrackingUrl);
-            clickTrackers.addAll(getClickTrackers());
-
-            final ArrayList<VastTracker> vastClickTrackers = new ArrayList<VastTracker>();
-            for (String clickTrackingUrl : clickTrackers) {
-                vastClickTrackers.add(new VastTracker(clickTrackingUrl, false));
-            }
-            mVastVideoConfig.addClickTrackers(vastClickTrackers);
-
-            // Always use click destination URL from JSON "clk" value instead of from VAST document
-            mVastVideoConfig.setClickThroughUrl(getClickDestinationUrl());
-
-            mNativeVideoController = mNativeVideoControllerFactory.createForId(
-                    mId, mContext, visibilityTrackingEvents, mVastVideoConfig, mEventDetails);
-
-            notifyAdLoaded();
-        }
-
-        private boolean containsRequiredKeys(@NonNull final JSONObject jsonObject) {
-            Preconditions.checkNotNull(jsonObject);
-
-            final Set<String> keys = new HashSet<String>();
-            final Iterator<String> jsonKeys = jsonObject.keys();
-            while (jsonKeys.hasNext()) {
-                keys.add(jsonKeys.next());
-            }
-
-            return keys.containsAll(Parameter.requiredKeys);
-        }
-
-        private void addInstanceVariable(@NonNull final Parameter key,
-                @Nullable final Object value) throws ClassCastException {
-            Preconditions.checkNotNull(key);
-            Preconditions.checkNotNull(value);
-
-            try {
-                switch (key) {
-                    case IMPRESSION_TRACKER:
-                        addImpressionTrackers(value);
-                        break;
-                    case TITLE:
-                        setTitle((String) value);
-                        break;
-                    case TEXT:
-                        setText((String) value);
-                        break;
-                    case IMAGE_URL:
-                        setMainImageUrl((String) value);
-                        break;
-                    case ICON_URL:
-                        setIconImageUrl((String) value);
-                        break;
-                    case CLICK_DESTINATION:
-                        setClickDestinationUrl((String) value);
-                        break;
-                    case CLICK_TRACKER:
-                        parseClickTrackers(value);
-                        break;
-                    case CALL_TO_ACTION:
-                        setCallToAction((String) value);
-                        break;
-                    case VAST_VIDEO:
-                        setVastVideo((String) value);
-                        break;
-                    default:
-                        MoPubLog.d("Unable to add JSON key to internal mapping: " + key.mName);
-                        break;
-                }
-            } catch (ClassCastException e) {
-                if (!key.mRequired) {
-                    MoPubLog.d("Ignoring class cast exception for optional key: " + key.mName);
-                } else {
-                    throw e;
-                }
-            }
-        }
-
-        private void parseClickTrackers(@NonNull final Object clickTrackers) {
-            if (clickTrackers instanceof JSONArray) {
-                addClickTrackers(clickTrackers);
-            } else {
-                addClickTracker((String) clickTrackers);
-            }
-        }
-
-        @Override
-        public void render(@NonNull MediaLayout mediaLayout) {
-            Preconditions.checkNotNull(mediaLayout);
-
-            mVideoVisibleTracking.addView(mRootView,
-                    mediaLayout,
-                    mVideoResponseHeaders.getPlayVisiblePercent(),
-                    mVideoResponseHeaders.getPauseVisiblePercent());
-
-            mMediaLayout = mediaLayout;
-            mMediaLayout.initForVideo();
-
-            mMediaLayout.setSurfaceTextureListener(new TextureView.SurfaceTextureListener() {
-                @Override
-                public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int
-                        height) {
-
-                    mNativeVideoController.setListener(MoPubVideoNativeAd.this);
-                    mNativeVideoController.setOnAudioFocusChangeListener(MoPubVideoNativeAd.this);
-                    mNativeVideoController.setProgressListener(MoPubVideoNativeAd.this);
-                    mNativeVideoController.setTextureView(mMediaLayout.getTextureView());
-                    mMediaLayout.resetProgress();
-
-                    // If we're returning to an ended video, make a note of that so we don't flash
-                    // a bunch of UI changes while we prepare the data.
-                    final long duration = mNativeVideoController.getDuration();
-                    final long currentPosition = mNativeVideoController.getCurrentPosition();
-                    if (mLatestVideoControllerState == NativeVideoController.STATE_ENDED
-                        || (duration > 0 && duration - currentPosition < NativeVideoController.RESUME_FINISHED_THRESHOLD)) {
-                        mEnded = true;
-                    }
-
-                    if (mNeedsPrepare) {
-                        mNeedsPrepare = false;
-                        mNativeVideoController.prepare(MoPubVideoNativeAd.this);
-                    }
-
-                    mNeedsSeek = true;
-                    maybeChangeState();
-                }
-
-                @Override
-                public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width,
-                        int height) { }
-
-                @Override
-                public boolean onSurfaceTextureDestroyed(final SurfaceTexture surface) {
-                    mNeedsPrepare = true;
-                    mNativeVideoController.release(MoPubVideoNativeAd.this);
-                    applyState(VideoState.PAUSED);
-                    return true;
-                }
-
-                @Override
-                public void onSurfaceTextureUpdated(SurfaceTexture surface) { }
-            });
-
-            mMediaLayout.setPlayButtonClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    mMediaLayout.resetProgress();
-                    mNativeVideoController.seekTo(0);
-                    mEnded = false;
-                    mNeedsSeek = false;
-                }
-            });
-
-            mMediaLayout.setMuteControlClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(final View v) {
-                    mMuted = !mMuted;
-                    maybeChangeState();
-                }
-            });
-
-            mMediaLayout.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(final View v) {
-                    prepareToLeaveView();
-                    mNativeVideoController.triggerImpressionTrackers();
-                    MraidVideoPlayerActivity.startNativeVideo(mContext, mId, mVastVideoConfig);
-                }
-            });
-
-            if (mNativeVideoController.getPlaybackState() == NativeVideoController.STATE_CLEARED) {
-                mNativeVideoController.prepare(this);
-            }
-
-            applyState(VideoState.PAUSED);
-        }
-
-        // Lifecycle Handlers
-        @Override
-        public void prepare(@NonNull final View view) {
-            Preconditions.checkNotNull(view);
-            mRootView = view;
-            mRootView.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    prepareToLeaveView();
-                    // No need to call notifyAdClicked since handleCtaClick does clickTracking
-                    mNativeVideoController.triggerImpressionTrackers();
-                    mNativeVideoController.handleCtaClick(mContext);
-                }
-            });
-        }
-
-        @Override
-        public void clear(@NonNull final View view) {
-            Preconditions.checkNotNull(view);
-            mNativeVideoController.clear();
-            cleanUpMediaLayout();
-        }
-
-        @Override
-        public void destroy() {
-            cleanUpMediaLayout();
-            mNativeVideoController.setPlayWhenReady(false);
-            mNativeVideoController.release(this);
-            NativeVideoController.remove(mId);
-            mVideoVisibleTracking.destroy();
-        }
-
-        @Override
-        public void onStateChanged(final boolean playWhenReady, final int playbackState) {
-            mLatestVideoControllerState = playbackState;
-            maybeChangeState();
-        }
-
-        @Override
-        public void onError(final Exception e) {
-            MoPubLog.w("Error playing back video.", e);
-            mError = true;
-            maybeChangeState();
-        }
-
-        @Override
-        public void updateProgress(final int progressTenthPercent) {
-            mMediaLayout.updateProgress(progressTenthPercent);
-        }
-
-        @Override
-        public void onAudioFocusChange(int focusChange) {
-            if (focusChange == AudioManager.AUDIOFOCUS_LOSS
-                    || focusChange == AudioManager.AUDIOFOCUS_LOSS_TRANSIENT) {
-                // Mute the video
-                mMuted = true;
-                maybeChangeState();
-            } else if (focusChange == AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK) {
-                // Lower the volume
-                mNativeVideoController.setAudioVolume(0.3f);
-            } else if (focusChange == AudioManager.AUDIOFOCUS_GAIN) {
-                // Resume playback
-                mNativeVideoController.setAudioVolume(1.0f);
-                maybeChangeState();
-            }
-        }
-
-        private void cleanUpMediaLayout() {
-            // When clearing, we also clear medialayout references so if we're rendered again
-            // with the same view, we reset the video state correctly.
-            if (mMediaLayout != null) {
-                mMediaLayout.setMode(MediaLayout.Mode.IMAGE);
-                mMediaLayout.setSurfaceTextureListener(null);
-                mMediaLayout.setPlayButtonClickListener(null);
-                mMediaLayout.setMuteControlClickListener(null);
-                mMediaLayout.setOnClickListener(null);
-                mVideoVisibleTracking.removeView(mMediaLayout);
-                mMediaLayout = null;
-            }
-        }
-
-        private void prepareToLeaveView() {
-            mNeedsSeek = true;
-            mNeedsPrepare = true;
-
-            // Clean up any references to this class when storing the NativeVideoController
-            // in a static location and starting a new activity
-            mNativeVideoController.setListener(null);
-            mNativeVideoController.setOnAudioFocusChangeListener(null);
-            mNativeVideoController.setProgressListener(null);
-            mNativeVideoController.clear();
-
-            applyState(VideoState.PAUSED, true);
-        }
-
-        private void maybeChangeState() {
-            VideoState newState = mVideoState;
-
-            if (mError) {
-                newState = VideoState.FAILED_LOAD;
-            } else if (mEnded) {
-                newState = VideoState.ENDED;
-            } else {
-                if (mLatestVideoControllerState == NativeVideoController.STATE_PREPARING
-                        || mLatestVideoControllerState == NativeVideoController.STATE_IDLE) {
-                    newState = VideoState.LOADING;
-                } else if (mLatestVideoControllerState == NativeVideoController.STATE_BUFFERING) {
-                    newState = VideoState.BUFFERING;
-                } else if (mLatestVideoControllerState == NativeVideoController.STATE_ENDED) {
-                    mEnded = true;
-                    newState = VideoState.ENDED;
-                } else if (mLatestVideoControllerState == NativeVideoController.STATE_READY) {
-                    if (mLatestVisibility) {
-                        newState = mMuted ? VideoState.PLAYING_MUTED : VideoState.PLAYING;
-                    } else {
-                        newState = VideoState.PAUSED;
-                    }
-                }
-            }
-
-            applyState(newState);
-        }
-
-        @VisibleForTesting
-        void applyState(@NonNull final VideoState videoState) {
-            applyState(videoState, false);
-        }
-
-        @VisibleForTesting
-        void applyState(@NonNull final VideoState videoState, boolean transitionToFullScreen) {
-            Preconditions.checkNotNull(videoState);
-
-            // Ignore the state change if video player is not ready to take state changes.
-            if (mVastVideoConfig == null || mNativeVideoController == null || mMediaLayout == null) {
-                return;
-            }
-
-            // Check and set mVideoState so any changes we make to exo state don't
-            // trigger a duplicate run of this.
-            if (mVideoState == videoState) {
-                return;
-            }
-            VideoState previousState = mVideoState;
-            mVideoState = videoState;
-
-            switch (videoState) {
-                case FAILED_LOAD:
-                    mVastVideoConfig.handleError(mContext, null, 0);
-                    mNativeVideoController.setAppAudioEnabled(false);
-                    mMediaLayout.setMode(MediaLayout.Mode.IMAGE);
-                    // Only log the failed to play event when the video has not started
-                    if (previousState != VideoState.PLAYING && previousState != VideoState.PLAYING_MUTED) {
-                        MoPubEvents.log(Event.createEventFromDetails(
-                                BaseEvent.Name.ERROR_FAILED_TO_PLAY,
-                                BaseEvent.Category.NATIVE_VIDEO,
-                                BaseEvent.SamplingRate.NATIVE_VIDEO,
-                                mEventDetails));
-                    }
-                    break;
-                case CREATED:
-                case LOADING:
-                    mNativeVideoController.setPlayWhenReady(true);
-                    mMediaLayout.setMode(MediaLayout.Mode.LOADING);
-                    break;
-                case BUFFERING:
-                    mNativeVideoController.setPlayWhenReady(true);
-                    mMediaLayout.setMode(MediaLayout.Mode.BUFFERING);
-                    break;
-                case PAUSED:
-                    if (transitionToFullScreen) {
-                        // Prevents firing resume trackers when we return from full-screen.
-                        mResumeCanBeTracked = false;
-                    }
-
-                    if (!transitionToFullScreen) {
-                        mNativeVideoController.setAppAudioEnabled(false);
-                        if (mPauseCanBeTracked) {
-                            TrackingRequest.makeVastTrackingHttpRequest(
-                                    mVastVideoConfig.getPauseTrackers(),
-                                    null, // VastErrorCode
-                                    (int) mNativeVideoController.getCurrentPosition(),
-                                    null, // Asset URI
-                                    mContext);
-                            mPauseCanBeTracked = false;
-                            mResumeCanBeTracked = true;
-                        }
-                    }
-                    mNativeVideoController.setPlayWhenReady(false);
-                    mMediaLayout.setMode(MediaLayout.Mode.PAUSED);
-                    break;
-                case PLAYING:
-                    handleResumeTrackersAndSeek(previousState);
-
-                    mNativeVideoController.setPlayWhenReady(true);
-                    mNativeVideoController.setAudioEnabled(true);
-                    mNativeVideoController.setAppAudioEnabled(true);
-                    mMediaLayout.setMode(MediaLayout.Mode.PLAYING);
-                    mMediaLayout.setMuteState(MediaLayout.MuteState.UNMUTED);
-                    break;
-                case PLAYING_MUTED:
-                    handleResumeTrackersAndSeek(previousState);
-
-                    mNativeVideoController.setPlayWhenReady(true);
-                    mNativeVideoController.setAudioEnabled(false);
-                    mNativeVideoController.setAppAudioEnabled(false);
-                    mMediaLayout.setMode(MediaLayout.Mode.PLAYING);
-                    mMediaLayout.setMuteState(MediaLayout.MuteState.MUTED);
-                    break;
-                case ENDED:
-                    if (mNativeVideoController.hasFinalFrame()) {
-                        mMediaLayout.setMainImageDrawable(mNativeVideoController.getFinalFrame());
-                    }
-                    mPauseCanBeTracked = false;
-                    mResumeCanBeTracked = false;
-                    mVastVideoConfig.handleComplete(mContext, 0);
-                    mNativeVideoController.setAppAudioEnabled(false);
-                    mMediaLayout.setMode(MediaLayout.Mode.FINISHED);
-                    mMediaLayout.updateProgress(1000);
-                    break;
-            }
-        }
-
-        private void handleResumeTrackersAndSeek(VideoState previousState) {
-            if (mResumeCanBeTracked
-                    && previousState != VideoState.PLAYING
-                    && previousState != VideoState.PLAYING_MUTED) {  // If we've played before, fire resume trackers.
-                TrackingRequest.makeVastTrackingHttpRequest(
-                        mVastVideoConfig.getResumeTrackers(),
-                        null, // VastErrorCode
-                        (int) mNativeVideoController.getCurrentPosition(),
-                        null, // Asset URI
-                        mContext
-                );
-                mResumeCanBeTracked = false;
-            }
-
-            mPauseCanBeTracked = true;
-
-            // We force a seek here to get keyframe rendering in ExtractorSampleSource.
-            if (mNeedsSeek) {
-                mNeedsSeek = false;
-                mNativeVideoController.seekTo(mNativeVideoController.getCurrentPosition());
-            }
-        }
-
-
-        private boolean isImageKey(@Nullable final String name) {
-            return name != null && name.toLowerCase(Locale.US).endsWith("image");
-        }
-
-        @NonNull
-        private List<String> getExtrasImageUrls() {
-            final List<String> extrasBitmapUrls = new ArrayList<String>(getExtras().size());
-            for (final Map.Entry<String, Object> entry : getExtras().entrySet()) {
-                if (isImageKey(entry.getKey()) && entry.getValue() instanceof String) {
-                    extrasBitmapUrls.add((String) entry.getValue());
-                }
-            }
-
-            return extrasBitmapUrls;
-        }
-
-        @NonNull
-        private List<String> getAllImageUrls() {
-            final List<String> imageUrls = new ArrayList<String>();
-            if (getMainImageUrl() != null) {
-                imageUrls.add(getMainImageUrl());
-            }
-            if (getIconImageUrl() != null) {
-                imageUrls.add(getIconImageUrl());
-            }
-
-            imageUrls.addAll(getExtrasImageUrls());
-            return imageUrls;
-        }
-
-        @Deprecated
-        @VisibleForTesting
-        boolean needsPrepare() {
-            return mNeedsPrepare;
-        }
-
-        @Deprecated
-        @VisibleForTesting
-        boolean hasEnded() {
-            return mEnded;
-        }
-
-        @Deprecated
-        @VisibleForTesting
-        boolean needsSeek() {
-            return mNeedsSeek;
-        }
-
-        @Deprecated
-        @VisibleForTesting
-        boolean isMuted() {
-            return mMuted;
-        }
-
-        @Deprecated
-        @VisibleForTesting
-        long getId() {
-            return mId;
-        }
-
-        @Deprecated
-        @VisibleForTesting
-        VideoState getVideoState() {
-            return mVideoState;
-        }
-
-        @Deprecated
-        @VisibleForTesting
-        void setLatestVisibility(boolean latestVisibility) {
-            mLatestVisibility = latestVisibility;
-        }
-
-        @Deprecated
-        @VisibleForTesting
-        void setMuted(boolean muted) {
-            mMuted = muted;
-        }
-
-        @Deprecated
-        @VisibleForTesting
-        MediaLayout getMediaLayout() {
-            return mMediaLayout;
-        }
-    }
-
-    @VisibleForTesting
-    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
-    static class HeaderVisibilityStrategy implements VisibilityTrackingEvent.OnTrackedStrategy {
-        @NonNull private final WeakReference<MoPubVideoNativeAd> mMoPubVideoNativeAd;
-
-        HeaderVisibilityStrategy(@NonNull final MoPubVideoNativeAd moPubVideoNativeAd) {
-            mMoPubVideoNativeAd = new WeakReference<MoPubVideoNativeAd>(moPubVideoNativeAd);
-        }
-
-        @Override
-        public void execute() {
-            final MoPubVideoNativeAd moPubVideoNativeAd = mMoPubVideoNativeAd.get();
-            if (moPubVideoNativeAd != null) {
-                moPubVideoNativeAd.notifyAdImpressed();
-            }
-        }
-    }
-
-    @VisibleForTesting
-    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
-    static class PayloadVisibilityStrategy implements VisibilityTrackingEvent.OnTrackedStrategy {
-        @NonNull private final Context mContext;
-        @NonNull private final String mUrl;
-
-        PayloadVisibilityStrategy(@NonNull final Context context, @NonNull final String url) {
-            mContext = context.getApplicationContext();
-            mUrl = url;
-        }
-
-        @Override
-        public void execute() {
-            TrackingRequest.makeTrackingHttpRequest(mUrl, mContext);
-        }
-    }
-
-    /**
-     * Created purely for the purpose of mocking to ease testing.
-     */
-    @VisibleForTesting
-    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
-    static class NativeVideoControllerFactory {
-        public NativeVideoController createForId(final long id,
-                @NonNull final Context context,
-                @NonNull final List<VisibilityTrackingEvent> visibilityTrackingEvents,
-                @NonNull final VastVideoConfig vastVideoConfig,
-                @Nullable final EventDetails eventDetails) {
-            return NativeVideoController.createForId(id, context, visibilityTrackingEvents,
-                    vastVideoConfig, eventDetails);
-        }
-    }
-
-    @VisibleForTesting
-    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
-    static class VideoResponseHeaders {
-        private boolean mHeadersAreValid;
-        private int mPlayVisiblePercent;
-        private int mPauseVisiblePercent;
-        private int mImpressionMinVisiblePercent;
-        private int mImpressionVisibleMs;
-        private int mMaxBufferMs;
-
-        VideoResponseHeaders(@NonNull final Map<String, String> serverExtras) {
-            try {
-                mPlayVisiblePercent = Integer.parseInt(serverExtras.get(PLAY_VISIBLE_PERCENT));
-                mPauseVisiblePercent = Integer.parseInt(serverExtras.get(PAUSE_VISIBLE_PERCENT));
-                mImpressionMinVisiblePercent =
-                        Integer.parseInt(serverExtras.get(IMPRESSION_MIN_VISIBLE_PERCENT));
-                mImpressionVisibleMs = Integer.parseInt(serverExtras.get(IMPRESSION_VISIBLE_MS));
-                mMaxBufferMs = Integer.parseInt(serverExtras.get(MAX_BUFFER_MS));
-                mHeadersAreValid = true;
-            } catch (NumberFormatException e) {
-                mHeadersAreValid = false;
-            }
-        }
-
-        boolean hasValidHeaders() {
-            return mHeadersAreValid;
-        }
-
-        int getPlayVisiblePercent() {
-            return mPlayVisiblePercent;
-        }
-
-        int getPauseVisiblePercent() {
-            return mPauseVisiblePercent;
-        }
-
-        int getImpressionMinVisiblePercent() {
-            return mImpressionMinVisiblePercent;
-        }
-
-        int getImpressionVisibleMs() {
-            return mImpressionVisibleMs;
-        }
-
-        int getMaxBufferMs() {
-            return mMaxBufferMs;
-        }
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
deleted file mode 100644
index 5ce99c71..00000000
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
+++ /dev/null
@@ -1,329 +0,0 @@
-package com.mopub.nativeads;
-
-import android.app.Activity;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import com.mopub.common.AdFormat;
-import com.mopub.common.Constants;
-import com.mopub.common.Preconditions;
-import com.mopub.common.VisibleForTesting;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.DeviceUtils;
-import com.mopub.common.util.ManifestUtils;
-import com.mopub.mobileads.MoPubErrorCode;
-import com.mopub.network.AdRequest;
-import com.mopub.network.AdResponse;
-import com.mopub.network.MoPubNetworkError;
-import com.mopub.network.Networking;
-import com.mopub.volley.NetworkResponse;
-import com.mopub.volley.RequestQueue;
-import com.mopub.volley.VolleyError;
-
-import java.lang.ref.WeakReference;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.Set;
-import java.util.TreeMap;
-
-import static com.mopub.common.GpsHelper.fetchAdvertisingInfoAsync;
-import static com.mopub.nativeads.CustomEventNative.CustomEventNativeListener;
-import static com.mopub.nativeads.NativeErrorCode.CONNECTION_ERROR;
-import static com.mopub.nativeads.NativeErrorCode.EMPTY_AD_RESPONSE;
-import static com.mopub.nativeads.NativeErrorCode.INVALID_REQUEST_URL;
-import static com.mopub.nativeads.NativeErrorCode.INVALID_RESPONSE;
-import static com.mopub.nativeads.NativeErrorCode.NATIVE_RENDERER_CONFIGURATION_ERROR;
-import static com.mopub.nativeads.NativeErrorCode.NETWORK_BANNED;
-import static com.mopub.nativeads.NativeErrorCode.SERVER_ERROR_RESPONSE_CODE;
-import static com.mopub.nativeads.NativeErrorCode.UNSPECIFIED;
-
-public class MoPubNative {
-
-    public interface MoPubNativeNetworkListener {
-        void onNativeLoad(final NativeAd nativeAd);
-        void onNativeFail(final NativeErrorCode errorCode);
-    }
-
-    static final MoPubNativeNetworkListener EMPTY_NETWORK_LISTENER =
-            new MoPubNativeNetworkListener() {
-        @Override
-        public void onNativeLoad(@NonNull final NativeAd nativeAd) {
-            // If this listener is invoked, it means that MoPubNative instance has been destroyed
-            // so destroy any leftover incoming NativeAds
-            nativeAd.destroy();
-        }
-        @Override
-        public void onNativeFail(final NativeErrorCode errorCode) {
-        }
-    };
-
-    // must be an activity since 3rd party networks need it
-    @NonNull private final WeakReference<Activity> mActivity;
-    @NonNull private final String mAdUnitId;
-    @NonNull private MoPubNativeNetworkListener mMoPubNativeNetworkListener;
-
-    // For small sets TreeMap, takes up less memory than HashMap
-    @NonNull private Map<String, Object> mLocalExtras = new TreeMap<String, Object>();
-    @NonNull private final AdRequest.Listener mVolleyListener;
-    @Nullable private AdRequest mNativeRequest;
-    @NonNull AdRendererRegistry mAdRendererRegistry;
-
-    private Set<String> bannedAdapters;
-
-    public MoPubNative(@NonNull final Activity activity,
-            @NonNull final String adUnitId,
-            @NonNull final MoPubNativeNetworkListener moPubNativeNetworkListener) {
-        this(activity, adUnitId, moPubNativeNetworkListener,new HashSet<String>());
-    }
-
-    public MoPubNative(@NonNull final Activity activity,
-                       @NonNull final String adUnitId,
-                       @NonNull final MoPubNativeNetworkListener moPubNativeNetworkListener, Set<String> bannedAdapters) {
-        this(activity, adUnitId, new AdRendererRegistry(), moPubNativeNetworkListener,bannedAdapters);
-    }
-
-    @VisibleForTesting
-    public MoPubNative(@NonNull final Activity activity,
-            @NonNull final String adUnitId,
-            @NonNull AdRendererRegistry adRendererRegistry,
-            @NonNull final MoPubNativeNetworkListener moPubNativeNetworkListener, Set<String> bannedAdapters) {
-        Preconditions.checkNotNull(activity, "Activity may not be null.");
-        Preconditions.checkNotNull(adUnitId, "AdUnitId may not be null.");
-        Preconditions.checkNotNull(adRendererRegistry, "AdRendererRegistry may not be null.");
-        Preconditions.checkNotNull(moPubNativeNetworkListener, "MoPubNativeNetworkListener may not be null.");
-
-        ManifestUtils.checkNativeActivitiesDeclared(activity);
-
-        setBannedAdapters(bannedAdapters);
-
-        mActivity = new WeakReference<Activity>(activity);
-        mAdUnitId = adUnitId;
-        mMoPubNativeNetworkListener = moPubNativeNetworkListener;
-        mAdRendererRegistry = adRendererRegistry;
-        mVolleyListener = new AdRequest.Listener() {
-            @Override
-            public void onSuccess(@NonNull final AdResponse response) {
-                onAdLoad(response);
-            }
-
-            @Override
-            public void onErrorResponse(@NonNull final VolleyError volleyError) {
-                onAdError(volleyError);
-            }
-        };
-
-        // warm up cache for google play services info
-        fetchAdvertisingInfoAsync(activity, null);
-    }
-
-    /**
-     * Registers an ad renderer for rendering a specific native ad format.
-     * Note that if multiple ad renderers support a specific native ad format, the first
-     * one registered will be used.
-     */
-    public void registerAdRenderer(MoPubAdRenderer moPubAdRenderer) {
-        mAdRendererRegistry.registerAdRenderer(moPubAdRenderer);
-    }
-
-    public void destroy() {
-        mActivity.clear();
-        if (mNativeRequest != null) {
-            mNativeRequest.cancel();
-            mNativeRequest = null;
-        }
-        mMoPubNativeNetworkListener = EMPTY_NETWORK_LISTENER;
-    }
-
-    public void setLocalExtras(@Nullable final Map<String, Object> localExtras) {
-        if (localExtras == null) {
-            mLocalExtras = new TreeMap<String, Object>();
-        } else {
-            mLocalExtras = new TreeMap<String, Object>(localExtras);
-        }
-    }
-
-    public void makeRequest() {
-        makeRequest((RequestParameters)null);
-    }
-
-    public void makeRequest(@Nullable final RequestParameters requestParameters) {
-        makeRequest(requestParameters, null);
-    }
-
-    public void makeRequest(@Nullable final RequestParameters requestParameters,
-            @Nullable Integer sequenceNumber) {
-        final Activity activity = getActivityOrDestroy();
-        if (activity == null) {
-            return;
-        }
-
-        if (!DeviceUtils.isNetworkAvailable(activity)) {
-            mMoPubNativeNetworkListener.onNativeFail(CONNECTION_ERROR);
-            return;
-        }
-
-        loadNativeAd(requestParameters, sequenceNumber);
-    }
-
-    private void loadNativeAd(
-            @Nullable final RequestParameters requestParameters,
-            @Nullable final Integer sequenceNumber) {
-        final Activity activity = getActivityOrDestroy();
-        if (activity == null) {
-            return;
-        }
-
-        final NativeUrlGenerator generator = new NativeUrlGenerator(activity)
-                .withAdUnitId(mAdUnitId)
-                .withRequest(requestParameters);
-
-        if (sequenceNumber != null) {
-            generator.withSequenceNumber(sequenceNumber);
-        }
-
-        final String endpointUrl = generator.generateUrlString(Constants.HOST);
-
-        if (endpointUrl != null) {
-            MoPubLog.d("Loading ad from: " + endpointUrl);
-        }
-
-        requestNativeAd(endpointUrl);
-    }
-
-    void requestNativeAd(@Nullable final String endpointUrl) {
-        final Activity activity = getActivityOrDestroy();
-        if (activity == null) {
-            return;
-        }
-
-        if (endpointUrl == null) {
-            mMoPubNativeNetworkListener.onNativeFail(INVALID_REQUEST_URL);
-            return;
-        }
-
-        mNativeRequest = new AdRequest(endpointUrl, AdFormat.NATIVE, mAdUnitId, activity, mVolleyListener);
-        RequestQueue requestQueue = Networking.getRequestQueue(activity);
-        requestQueue.add(mNativeRequest);
-    }
-
-    private void onAdLoad(@NonNull final AdResponse response) {
-        final Activity activity = getActivityOrDestroy();
-        if (activity == null) {
-            return;
-        }
-
-        if (bannedAdapters.contains(response.getCustomEventClassName())){
-            mMoPubNativeNetworkListener.onNativeFail(NETWORK_BANNED);
-            return;
-        }
-
-        final CustomEventNativeListener customEventNativeListener =
-                new CustomEventNativeListener() {
-                    @Override
-                    public void onNativeAdLoaded(@NonNull final BaseNativeAd nativeAd) {
-                        final Activity activity = getActivityOrDestroy();
-                        if (activity == null) {
-                            return;
-                        }
-
-                        MoPubAdRenderer renderer = mAdRendererRegistry.getRendererForAd(nativeAd);
-                        if (renderer == null) {
-                            onNativeAdFailed(NATIVE_RENDERER_CONFIGURATION_ERROR);
-                            return;
-                        }
-
-                        mMoPubNativeNetworkListener.onNativeLoad(new NativeAd(activity,
-                                        response.getImpressionTrackingUrl(),
-                                        response.getClickTrackingUrl(),
-                                        mAdUnitId,
-                                        nativeAd,
-                                        renderer)
-                        );
-                    }
-
-                    @Override
-                    public void onNativeAdFailed(final NativeErrorCode errorCode) {
-                        MoPubLog.v(String.format("Native Ad failed to load with error: %s.", errorCode));
-                        requestNativeAd(response.getFailoverUrl());
-                    }
-                };
-
-        CustomEventNativeAdapter.loadNativeAd(
-                activity,
-                mLocalExtras,
-                response,
-                customEventNativeListener
-        );
-    }
-
-    @VisibleForTesting
-    void onAdError(@NonNull final VolleyError volleyError) {
-        MoPubLog.d("Native ad request failed.", volleyError);
-        if (volleyError instanceof MoPubNetworkError) {
-            MoPubNetworkError error = (MoPubNetworkError) volleyError;
-            switch (error.getReason()) {
-                case BAD_BODY:
-                    mMoPubNativeNetworkListener.onNativeFail(INVALID_RESPONSE);
-                    return;
-                case BAD_HEADER_DATA:
-                    mMoPubNativeNetworkListener.onNativeFail(INVALID_RESPONSE);
-                    return;
-                case WARMING_UP:
-                    // Used for the sample app to signal a toast.
-                    // This is not customer-facing except in the sample app.
-                    MoPubLog.c(MoPubErrorCode.WARMUP.toString());
-                    mMoPubNativeNetworkListener.onNativeFail(EMPTY_AD_RESPONSE);
-                    return;
-                case NO_FILL:
-                    mMoPubNativeNetworkListener.onNativeFail(EMPTY_AD_RESPONSE);
-                    return;
-                case UNSPECIFIED:
-                default:
-                    mMoPubNativeNetworkListener.onNativeFail(UNSPECIFIED);
-                    return;
-            }
-        } else {
-            // Process our other status code errors.
-            NetworkResponse response = volleyError.networkResponse;
-            if (response != null && response.statusCode >= 500 && response.statusCode < 600) {
-                mMoPubNativeNetworkListener.onNativeFail(SERVER_ERROR_RESPONSE_CODE);
-            } else if (response == null && !DeviceUtils.isNetworkAvailable(mActivity.get())) {
-                MoPubLog.c(String.valueOf(MoPubErrorCode.NO_CONNECTION.toString()));
-                mMoPubNativeNetworkListener.onNativeFail(CONNECTION_ERROR);
-            } else {
-                mMoPubNativeNetworkListener.onNativeFail(UNSPECIFIED);
-            }
-        }
-    }
-
-    Activity getActivityOrDestroy() {
-        final Activity activity = mActivity.get();
-        if (activity == null) {
-            destroy();
-            MoPubLog.d("Weak reference to Activity in MoPubNative became null. This instance" +
-                    " of MoPubNative is destroyed and No more requests will be processed.");
-        }
-        return activity;
-    }
-
-    @VisibleForTesting
-    @Deprecated
-    @NonNull
-    MoPubNativeNetworkListener getMoPubNativeNetworkListener() {
-        return mMoPubNativeNetworkListener;
-    }
-
-    public void setBannedAdapters(Set<String> bannedAdapters){
-        if (bannedAdapters != null){
-            this.bannedAdapters = bannedAdapters;
-        }
-    }
-
-    public void banAdapter(String networkEventClass){
-        bannedAdapters.add(networkEventClass);
-    }
-
-    public void permitAdapter(String networkEventClass){
-        bannedAdapters.remove(networkEventClass);
-    }
-}
diff --git a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
index d946d6cb..511b8e04 100644
--- a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
+++ b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
@@ -1,3 +1,3 @@
 fabric-identifier=com.mopub.sdk.android:mopub
-fabric-version=4.7.1+kit
+fabric-version=4.9.0+kit
 fabric-build-type=source
diff --git a/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java b/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java
new file mode 100644
index 00000000..b54eb796
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java
@@ -0,0 +1,188 @@
+package com.mopub.common;
+
+import android.app.Activity;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.Reflection;
+import com.mopub.mobileads.BuildConfig;
+import com.mopub.mobileads.MoPubRewardedVideoListener;
+import com.mopub.mobileads.MoPubRewardedVideoManager;
+import com.mopub.mobileads.MoPubRewardedVideos;
+
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
+import org.powermock.core.classloader.annotations.PrepareForTest;
+import org.powermock.modules.junit4.rule.PowerMockRule;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.powermock.api.mockito.PowerMockito.mock;
+import static org.powermock.api.mockito.PowerMockito.mockStatic;
+import static org.powermock.api.mockito.PowerMockito.verifyStatic;
+import static org.powermock.api.mockito.PowerMockito.when;
+
+// If you encounter a VerifyError with PowerMock then you need to set Android Studio to use
+// JDK version 7u79 or later. Go to File > Project Structure > [Platform Settings] > SDK to
+// change the JDK version.
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class, sdk = 21)
+@PowerMockIgnore({ "org.mockito.*", "org.robolectric.*", "android.*" })
+@PrepareForTest({MoPubRewardedVideoManager.class})
+public class MoPubTest {
+
+    private Activity mActivity;
+    private MediationSettings[] mMediationSettings;
+    private String mAdUnitId;
+    private MoPubRewardedVideoListener mockRewardedVideoListener;
+    private MoPubRewardedVideoManager.RequestParameters mockRequestParameters;
+
+    @Rule
+    public PowerMockRule rule = new PowerMockRule();
+
+    @Before
+    public void setup() {
+        mActivity = Robolectric.buildActivity(Activity.class).create().get();
+        mMediationSettings = new MediationSettings[0];
+        mAdUnitId = "123";
+
+        mockRewardedVideoListener = mock(MoPubRewardedVideoListener.class);
+        mockRequestParameters = mock(MoPubRewardedVideoManager.RequestParameters.class);
+
+        mockStatic(MoPubRewardedVideoManager.class);
+    }
+
+    @Test
+    public void initializeRewardedVideo_withReflection_shouldExist() throws Exception {
+        assertThat(Reflection.getDeclaredMethodWithTraversal(MoPubRewardedVideos.class,
+                "initializeRewardedVideo", Activity.class, MediationSettings[].class)).isNotNull();
+    }
+
+    @Test
+    public void initializeRewardedVideo_withValidParameters_shouldCallMoPubRewardedVideoManager() throws Exception {
+        MoPub.initializeRewardedVideo(mActivity, mMediationSettings);
+
+        verifyStatic();
+        MoPubRewardedVideoManager.init(mActivity, mMediationSettings);
+    }
+
+    @Test
+    public void updateActivity_withReflection_shouldExist() throws Exception {
+        assertThat(Reflection.getDeclaredMethodWithTraversal(MoPubRewardedVideoManager.class,
+                "updateActivity", Activity.class)).isNotNull();
+    }
+
+    @Test
+    public void updateActivity_withValidActivity_shouldCallMoPubRewardedVideoManager() throws Exception {
+        MoPub.updateActivity(mActivity);
+
+        verifyStatic();
+        MoPubRewardedVideoManager.updateActivity(mActivity);
+    }
+
+    @Test
+    public void setRewardedVideoListener_withReflection_shouldExist() throws Exception {
+        assertThat(Reflection.getDeclaredMethodWithTraversal(MoPubRewardedVideos.class,
+                "setRewardedVideoListener", MoPubRewardedVideoListener.class)).isNotNull();
+    }
+
+    @Test
+    public void setRewardedVideoListener_withValidListener_shouldSetMoPubRewardedVideoManagerListener() throws Exception {
+        MoPub.setRewardedVideoListener(mockRewardedVideoListener);
+
+        verifyStatic();
+        MoPubRewardedVideoManager.setVideoListener(mockRewardedVideoListener);
+    }
+
+    @Test
+    public void setRewardedVideoListener_withNullListener_shouldCallMoPubRewardedVideoManagerListenerWithNull() throws Exception {
+        MoPub.setRewardedVideoListener(null);
+
+        verifyStatic();
+        MoPubRewardedVideoManager.setVideoListener(null);
+    }
+
+    @Test
+    public void loadRewardedVideo_withReflection_shouldExist() throws Exception {
+        assertThat(Reflection.getDeclaredMethodWithTraversal(MoPubRewardedVideos.class,
+                "loadRewardedVideo", String.class,
+                MoPubRewardedVideoManager.RequestParameters.class,
+                MediationSettings[].class)).isNotNull();
+    }
+
+    @Test
+    public void loadRewardedVideo_withTwoNonNullParameters_shouldCallMoPubRewardedVideoManager() throws Exception {
+        MoPub.loadRewardedVideo(mAdUnitId, mMediationSettings);
+
+        verifyStatic();
+        MoPubRewardedVideoManager.loadVideo(mAdUnitId, null, mMediationSettings);
+    }
+
+    @Test
+    public void loadRewardedVideo_withTwoParameters_withNullMediationSettings_shouldCallMoPubRewardedVideoManager() throws Exception {
+        MoPub.loadRewardedVideo(mAdUnitId, (MediationSettings[]) null);
+
+        verifyStatic();
+        MoPubRewardedVideoManager.loadVideo(mAdUnitId, null, (MediationSettings[]) null);
+    }
+
+    @Test
+    public void loadRewardedVideo_withThreeNonNullParameters_shouldCallMoPubRewardedVideoManager() throws Exception {
+        MoPub.loadRewardedVideo(mAdUnitId, mockRequestParameters, mMediationSettings);
+
+        verifyStatic();
+        MoPubRewardedVideoManager.loadVideo(mAdUnitId, mockRequestParameters, mMediationSettings);
+    }
+
+    @Test
+    public void loadRewardedVideo_withThreeParameters_withNullRequestParameters_shouldCallMoPubRewardedVideoManager() throws Exception {
+        MoPub.loadRewardedVideo(mAdUnitId, null, mMediationSettings);
+
+        verifyStatic();
+        MoPubRewardedVideoManager.loadVideo(mAdUnitId, null, mMediationSettings);
+    }
+
+    @Test
+    public void loadRewardedVideo_withThreeParameters_withNullRequestParameters_withNullMediationSettings_shouldCallMoPubRewardedVideoManager() throws Exception {
+        MoPub.loadRewardedVideo(mAdUnitId, null, (MediationSettings[]) null);
+
+        verifyStatic();
+        MoPubRewardedVideoManager.loadVideo(mAdUnitId, null, (MediationSettings[]) null);
+    }
+
+    @Test
+    public void hasRewardedVideo_withReflection_shouldExist() throws Exception {
+        assertThat(Reflection.getDeclaredMethodWithTraversal(MoPubRewardedVideos.class,
+                "hasRewardedVideo", String.class)).isNotNull();
+    }
+
+    @Test
+    public void hasRewardedVideo_withValidAdUnitId_shouldReturnTrue() throws Exception {
+        when(MoPubRewardedVideoManager.hasVideo(mAdUnitId)).thenReturn(true);
+
+        assertThat(MoPub.hasRewardedVideo(mAdUnitId)).isTrue();
+    }
+
+    @Test
+    public void hasRewardedVideo_withInvalidAdUnitId_shouldReturnFalse() throws Exception {
+        assertThat(MoPub.hasRewardedVideo("fakeId")).isFalse();
+    }
+
+    @Test
+    public void showRewardedVideo_withReflection_shouldExist() throws Exception {
+        assertThat(Reflection.getDeclaredMethodWithTraversal(MoPubRewardedVideos.class,
+                "showRewardedVideo", String.class)).isNotNull();
+    }
+
+    @Test
+    public void showRewardedVideo_withNonNullAdUnitId_shouldCallMoPubRewardedVideoManager() throws Exception {
+        MoPub.showRewardedVideo(mAdUnitId);
+
+        verifyStatic();
+        MoPubRewardedVideoManager.showVideo(mAdUnitId);
+    }
+
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java b/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
index 9f3cf277..19552de1 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
@@ -4,13 +4,16 @@
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.MoPub;
 import com.mopub.common.MoPubHttpUrlConnection;
+import com.mopub.common.Preconditions;
 import com.mopub.common.event.EventDispatcher;
 import com.mopub.common.event.MoPubEvents;
 import com.mopub.common.factories.MethodBuilderFactory;
 import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.DateAndTime;
+import com.mopub.common.util.Reflection;
 import com.mopub.common.util.test.support.ShadowAsyncTasks;
 import com.mopub.common.util.test.support.ShadowMoPubHttpUrlConnection;
+import com.mopub.common.util.test.support.ShadowReflection;
 import com.mopub.common.util.test.support.TestDateAndTime;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
 import com.mopub.mobileads.factories.AdViewControllerFactory;
@@ -58,6 +61,7 @@ public InstrumentationConfiguration createClassLoaderConfig() {
         InstrumentationConfiguration.Builder builder = InstrumentationConfiguration.newBuilder();
         builder.addInstrumentedClass(AsyncTasks.class.getName());
         builder.addInstrumentedClass(MoPubHttpUrlConnection.class.getName());
+        builder.addInstrumentedClass(Reflection.class.getName());
         // To mitigate: https://github.com/robolectric/robolectric/issues/2129
         builder.addInstrumentedPackage("org.xyz.testMp");
         return builder.build();
@@ -73,6 +77,10 @@ public InstrumentationConfiguration createClassLoaderConfig() {
         public void prepareTest(Object test) {
             ClientMetadata.clearForTesting();
 
+            // Precondition exceptions should not be thrown during tests so that we can test
+            // for unexpected behavior even after failing a precondition.
+            Preconditions.NoThrow.setStrictMode(false);
+
             DateAndTime.setInstance(new TestDateAndTime());
             CustomEventBannerFactory.setInstance(new TestCustomEventBannerFactory());
             CustomEventInterstitialFactory.setInstance(new TestCustomEventInterstitialFactory());
@@ -89,6 +97,7 @@ public void prepareTest(Object test) {
 
             ShadowAsyncTasks.reset();
             ShadowMoPubHttpUrlConnection.reset();
+            ShadowReflection.reset();
             MoPubEvents.setEventDispatcher(mock(EventDispatcher.class));
             MoPub.setLocationAwareness(LocationAwareness.NORMAL);
             MoPub.setLocationPrecision(6);
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
index 8db4a294..a42b716d 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
@@ -62,6 +62,8 @@ public void tearDown() throws Exception {
         setDebugMode(false);
         // This may have been set to a mock during testing. Reset this class back to normal
         ManifestUtils.setFlagCheckUtil(new ManifestUtils.FlagCheckUtil());
+
+        addInterstitialModule();
     }
 
     @Test
@@ -108,6 +110,21 @@ public void displayWarningForMissingActivities_withAllActivitiesDeclared_shouldN
         assertThat(ShadowLog.getLogs()).isEmpty();
     }
 
+    @Test
+    public void displayWarningForMissingActivities_withoutInterstitialModule_withoutInterstitialActivitiesDeclared_shouldNotShowLogOrToast() throws Exception {
+        removeInterstitialModule();
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
+        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubBrowser.class), mockResolveInfo);
+
+        ShadowLog.setupLogging();
+        setDebugMode(true);
+
+        ManifestUtils.displayWarningForMissingActivities(context, requiredWebViewSdkActivities);
+
+        assertThat(ShadowToast.getLatestToast()).isNull();
+        assertThat(ShadowLog.getLogs()).isEmpty();
+    }
+
     @Test
      public void displayWarningForMissingActivities_withOneMissingActivity_shouldLogOnlyThatOne() throws Exception {
         RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
@@ -363,6 +380,15 @@ public void getRequiredWebViewSdkActivities_shouldIncludeRequiredActivities() th
         );
     }
 
+    @Test
+    public void getRequiredWebViewSdkActivities_withoutInterstitialModule_shouldNotHaveAllRequiredActivities() throws Exception {
+        removeInterstitialModule();
+        assertThat(requiredWebViewSdkActivities).containsOnly(
+                MraidVideoPlayerActivity.class,
+                MoPubBrowser.class
+        );
+    }
+
     @SuppressWarnings("unchecked")
     @Test
     public void getRequiredNativeSdkActivities_shouldIncludeRequiredActivities() throws Exception {
@@ -371,6 +397,24 @@ public void getRequiredNativeSdkActivities_shouldIncludeRequiredActivities() thr
         );
     }
 
+    private void addInterstitialModule() {
+        Class moPubActivityClass = com.mopub.mobileads.MoPubActivity.class;
+        Class mraidActivityClass = com.mopub.mobileads.MraidActivity.class;
+        if (!ManifestUtils.getRequiredWebViewSdkActivities().contains(moPubActivityClass)) {
+            ManifestUtils.getRequiredWebViewSdkActivities().add(moPubActivityClass);
+        }
+        if (!ManifestUtils.getRequiredWebViewSdkActivities().contains(mraidActivityClass)) {
+            ManifestUtils.getRequiredWebViewSdkActivities().add(mraidActivityClass);
+        }
+    }
+
+    private void removeInterstitialModule() {
+        Class moPubActivityClass = com.mopub.mobileads.MoPubActivity.class;
+        Class mraidActivityClass = com.mopub.mobileads.MraidActivity.class;
+        ManifestUtils.getRequiredWebViewSdkActivities().remove(moPubActivityClass);
+        ManifestUtils.getRequiredWebViewSdkActivities().remove(mraidActivityClass);
+    }
+
     private void setDebugMode(boolean enabled) {
         final ApplicationInfo applicationInfo = context.getApplicationInfo();
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java
index b36ae026..781d273a 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java
@@ -9,6 +9,9 @@
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
 
+import java.math.BigDecimal;
+import java.math.BigInteger;
+
 import static com.mopub.common.util.Reflection.MethodBuilder;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.fest.assertions.api.Assertions.fail;
@@ -158,4 +161,48 @@ public void execute_withAccessibility_shouldRunPrivateMethods() throws Exception
 
         assertThat(result).isEqualTo(-1);
     }
+
+    @Test
+    public void instantiateClassWithConstructor_withCorrectParameters_shouldInstiantiateObject() throws Exception {
+        Class[] classes = {int.class};
+        Object[] parameters = {30};
+        Number integer = Reflection.instantiateClassWithConstructor("java.lang.Integer",
+                Number.class, classes, parameters);
+
+        assertThat(integer).isEqualTo(new Integer(30));
+    }
+
+    @Test
+    public void instantiateClassWithConstructor_withCorrectMultipleParameters_shouldInstiantiateObject() throws Exception {
+        Class[] classes = {BigInteger.class, int.class};
+        Object[] parameters = {new BigInteger("10"), 5};
+        Number bigDecimal = Reflection.instantiateClassWithConstructor("java.math.BigDecimal",
+                Number.class, classes, parameters);
+
+        assertThat(bigDecimal).isEqualTo(new BigDecimal(new BigInteger("10"), 5));
+    }
+
+    @Test(expected = ClassCastException.class)
+    public void instantiateClassWithConstructor_withInvalidSuperClass_shouldThrowException() throws Exception {
+        Class[] classes = {int.class};
+        Object[] parameters = {30};
+
+        Reflection.instantiateClassWithConstructor("java.lang.Integer", String.class, classes, parameters);
+    }
+
+    @Test(expected = ClassNotFoundException.class)
+    public void instantiateClassWithConstructor_withClassNotFound_shouldThrowException() throws Exception {
+        Class[] classes = {int.class};
+        Object[] parameters = {30};
+
+        Reflection.instantiateClassWithConstructor("java.lang.FakeClass123", Integer.class, classes, parameters);
+    }
+
+    @Test(expected = Exception.class)
+    public void instantiateClassWithConstructor_withMismatchingClassParameters_shouldThrowException() throws Exception {
+        Class[] classes = {boolean.class};
+        Object[] parameters = {30};
+
+        Reflection.instantiateClassWithConstructor("java.lang.Integer", Number.class, classes, parameters);
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java
new file mode 100644
index 00000000..3446601f
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java
@@ -0,0 +1,33 @@
+package com.mopub.common.util.test.support;
+
+import com.mopub.common.util.Reflection;
+
+import org.robolectric.annotation.Implementation;
+import org.robolectric.annotation.Implements;
+import org.robolectric.util.ReflectionHelpers;
+
+import static org.robolectric.internal.Shadow.directlyOn;
+
+@Implements(Reflection.class)
+public class ShadowReflection {
+    private static boolean sNextClassNotFound;
+
+    public static void reset() {
+        sNextClassNotFound = false;
+    }
+
+    @Implementation
+    public static boolean classFound(final String className) throws Exception {
+        if (sNextClassNotFound) {
+            sNextClassNotFound = false;
+            return false;
+        }
+
+        return directlyOn(Reflection.class, "classFound",
+                new ReflectionHelpers.ClassParameter<>(String.class, className));
+    }
+
+    public static void setNextClassNotFound(final boolean nextNotFound) {
+        sNextClassNotFound = nextNotFound;
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
index da4c0bb0..d743e27c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
@@ -1,6 +1,5 @@
 package com.mopub.mobileads;
 
-import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
 import android.graphics.Bitmap;
@@ -17,19 +16,16 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.robolectric.Robolectric;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowApplication;
 
-import java.io.File;
-import java.io.FileOutputStream;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.Locale;
 
 import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
@@ -68,10 +64,8 @@ public void constructor_shouldCreateSendToIntentWithEmailAddress() throws Except
         subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
         emailIntent = subject.getEmailIntent();
 
-        assertThat(emailIntent.getAction()).isEqualTo(Intent.ACTION_SEND_MULTIPLE);
-        assertThat(emailIntent.getType()).isEqualTo("plain/text");
-        assertThat(emailIntent.getData().toString()).isEqualTo("mailto:");
-        assertThat(emailIntent.getStringArrayExtra(Intent.EXTRA_EMAIL)[0]).isEqualTo(EMAIL_ADDRESS);
+        assertThat(emailIntent.getAction()).isEqualTo(Intent.ACTION_SENDTO);
+        assertThat(emailIntent.getData()).isEqualTo(Uri.parse("mailto:creative-review@mopub.com"));
     }
 
     @Test
@@ -118,30 +112,6 @@ public void constructor_shouldCreateIntentWithImageStringAndParametersAndRespons
         assertThat(imageString).isEqualTo("Qml0bWFwICgxMCB4IDEwKSBjcmVhdGVkIGZyb20gQml0bWFwIG9iamVjdCBjb21wcmVzc2VkIGFz\nIEpQRUcgd2l0aCBxdWFsaXR5IDI1\n");
     }
 
-    @Test
-    public void constructor_shouldAddBitmapToAttachmentArray() throws Exception {
-        stub(mockContext.getFilesDir()).toReturn(new File("filesDir"));
-        stub(mockContext.openFileOutput(any(String.class), any(int.class))).toReturn(mock(FileOutputStream.class));
-        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
-
-        emailAttachments = subject.getEmailAttachments();
-        Uri fileUri = Uri.fromFile(new File("filesDir/mp_adalert_screenshot.png"));
-
-        assertThat(emailAttachments).contains(fileUri);
-    }
-
-    @Test
-    public void constructor_shouldAddParametersTextFileToAttachmentArray() throws Exception {
-        stub(mockContext.getFilesDir()).toReturn(new File("filesDir"));
-        stub(mockContext.openFileOutput(any(String.class), any(int.class))).toReturn(mock(FileOutputStream.class));
-        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
-
-        emailAttachments = subject.getEmailAttachments();
-        Uri fileUri = Uri.fromFile(new File("filesDir/mp_adalert_parameters.txt"));
-
-        assertThat(emailAttachments).contains(fileUri);
-    }
-
     @Test
     public void constructor_whenAdReportIsNull_shouldReturnEmptyString() throws Exception {
         subject = new AdAlertReporter(mockContext, mockView, null);
@@ -160,45 +130,16 @@ public void constructor_shouldSetCorrectResponseString() throws Exception {
         assertThat(subject.getResponse()).isEqualTo(expectedResponse);
     }
 
-    @Test
-    public void constructor_shouldAddMarkupTextFileToAttachmentArray() throws Exception {
-        stub(mockAdReport.getResponseString()).toReturn("anything!");
-        stub(mockContext.getFilesDir()).toReturn(new File("filesDir"));
-        stub(mockContext.openFileOutput(any(String.class), any(int.class))).toReturn(mock(FileOutputStream.class));
-        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
-
-        emailAttachments = subject.getEmailAttachments();
-        Uri fileUri = Uri.fromFile(new File("filesDir/mp_adalert_markup.html"));
-
-        assertThat(emailAttachments).contains(fileUri);
-    }
-
-    @Test
-    public void send_shouldAddAttachmentsToIntent() throws Exception {
-        stub(mockContext.getFilesDir()).toReturn(new File("filesDir"));
-        stub(mockContext.openFileOutput(any(String.class), any(int.class))).toReturn(mock(FileOutputStream.class));
-        stub(mockAdReport.getResponseString()).toReturn("anything!");
-        subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
-        subject.send();
-
-        emailIntent = subject.getEmailIntent();
-        ArrayList<Uri> attachments = emailIntent.getParcelableArrayListExtra(Intent.EXTRA_STREAM);
-
-        assertThat(attachments.size()).isEqualTo(3);
-        assertThat(attachments).contains(Uri.fromFile(new File("filesDir/mp_adalert_screenshot.png")));
-        assertThat(attachments).contains(Uri.fromFile(new File("filesDir/mp_adalert_parameters.txt")));
-        assertThat(attachments).contains(Uri.fromFile(new File("filesDir/mp_adalert_markup.html")));
-    }
-
     @Test
     public void send_shouldCreateEmailChooserIntent() throws Exception {
-
-        subject = new AdAlertReporter(Robolectric.buildActivity(Activity.class).create().get(), mockView, mockAdReport);
+        final Context applicationContext = RuntimeEnvironment.application;
+        // A real device uses application context here, which causes Intents.startActivity to add
+        // FLAG_ACTIVITY_NEW_TASK (and thus we assert for it below)
+        subject = new AdAlertReporter(applicationContext, mockView, mockAdReport);
         subject.send();
 
         Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_CHOOSER);
-        assertThat(intent.getStringExtra(Intent.EXTRA_TITLE)).isEqualTo("Send Email...");
+        assertThat(intent.getAction()).isEqualTo(Intent.ACTION_SENDTO);
         assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
index d5bb4ec5..e5f40f61 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
@@ -23,10 +23,10 @@
 import java.util.Set;
 
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialAdListener;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
index df8821fe..d641f19c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
@@ -23,8 +23,8 @@
 import static com.mopub.common.DataKeys.REDIRECT_URL_KEY;
 import static com.mopub.common.DataKeys.SCROLLABLE_KEY;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 import static org.fest.assertions.api.Assertions.assertThat;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
index 14308b95..10dd9951 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
@@ -34,10 +34,10 @@
 import static com.mopub.common.DataKeys.REDIRECT_URL_KEY;
 import static com.mopub.common.DataKeys.SCROLLABLE_KEY;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 import static org.fest.assertions.api.Assertions.assertThat;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
index 2c0b3f95..c81d7166 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
@@ -1,6 +1,7 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
+import android.support.annotation.NonNull;
 
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestAdViewControllerFactory;
@@ -22,13 +23,18 @@
 import static com.mopub.mobileads.MoPubErrorCode.CANCELLED;
 import static com.mopub.mobileads.MoPubErrorCode.INTERNAL_ERROR;
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
+import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.DESTROYED;
+import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.IDLE;
+import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.LOADING;
+import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.READY;
+import static com.mopub.mobileads.MoPubInterstitial.InterstitialState.SHOWING;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
-
+import static org.mockito.Mockito.verifyZeroInteractions;
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
 public class MoPubInterstitialTest {
@@ -68,6 +74,7 @@ public void setUp() throws Exception {
     public void forceRefresh_shouldResetInterstitialViewAndMarkNotDestroyed() throws Exception {
         subject.setInterstitialView(interstitialView);
         subject.onCustomEventInterstitialLoaded();
+        subject.setCurrentInterstitialState(READY);
         subject.forceRefresh();
 
         assertThat(subject.isReady()).isFalse();
@@ -267,6 +274,7 @@ public void newlyCreated_shouldNotBeReadyAndNotShow() throws Exception {
 
     @Test
     public void loadingCustomEventInterstitial_shouldBecomeReadyToShowCustomEventAd() throws Exception {
+        subject.load();
         subject.onCustomEventInterstitialLoaded();
 
         assertShowsCustomEventInterstitial(true);
@@ -333,6 +341,350 @@ public void adFailed_shouldNotifyInterstitialAdListener() throws Exception {
         verify(interstitialAdListener).onInterstitialFailed(eq(subject), eq(CANCELLED));
     }
 
+    @Test
+    public void attemptStateTransition_withIdleStartState() {
+        /**
+         * IDLE can go to LOADING when load or forceRefresh is called. IDLE can also go to
+         * DESTROYED if the interstitial view is destroyed.
+         */
+
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(IDLE);
+        boolean stateDidChange = subject.attemptStateTransition(IDLE, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(IDLE);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(IDLE);
+        stateDidChange = subject.attemptStateTransition(IDLE, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(IDLE);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(IDLE);
+        stateDidChange = subject.attemptStateTransition(LOADING, false);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(LOADING);
+        verify(customEventInterstitialAdapter).invalidate();
+        verify(interstitialView).loadAd();
+
+        resetMoPubInterstitial(IDLE);
+        stateDidChange = subject.attemptStateTransition(LOADING, true);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(LOADING);
+        verify(customEventInterstitialAdapter).invalidate();
+        verify(interstitialView).forceRefresh();
+
+        resetMoPubInterstitial(IDLE);
+        stateDidChange = subject.attemptStateTransition(READY, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(IDLE);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(IDLE);
+        stateDidChange = subject.attemptStateTransition(READY, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(IDLE);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(IDLE);
+        stateDidChange = subject.attemptStateTransition(SHOWING, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(IDLE);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(IDLE);
+        stateDidChange = subject.attemptStateTransition(SHOWING, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(IDLE);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(IDLE);
+        stateDidChange = subject.attemptStateTransition(DESTROYED, false);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
+        verify(customEventInterstitialAdapter).invalidate();
+
+        resetMoPubInterstitial(IDLE);
+        stateDidChange = subject.attemptStateTransition(DESTROYED, true);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
+        verify(customEventInterstitialAdapter).invalidate();
+    }
+
+    @Test
+    public void attemptStateTransition_withLoadingStartState() {
+        /**
+         * LOADING can go to IDLE if a force refresh happens. LOADING can also go into IDLE if an
+         * ad failed to load. LOADING should go to READY when the interstitial is done loading.
+         * LOADING can go to DESTROYED if the interstitial view is destroyed.
+         */
+
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(LOADING);
+        boolean stateDidChange = subject.attemptStateTransition(IDLE, false);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(IDLE);
+        verify(customEventInterstitialAdapter).invalidate();
+
+        resetMoPubInterstitial(LOADING);
+        stateDidChange = subject.attemptStateTransition(IDLE, true);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(IDLE);
+        verify(customEventInterstitialAdapter).invalidate();
+
+        resetMoPubInterstitial(LOADING);
+        stateDidChange = subject.attemptStateTransition(LOADING, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(LOADING);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(LOADING);
+        stateDidChange = subject.attemptStateTransition(LOADING, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(LOADING);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(LOADING);
+        stateDidChange = subject.attemptStateTransition(READY, false);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(READY);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(LOADING);
+        stateDidChange = subject.attemptStateTransition(READY, true);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(READY);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(LOADING);
+        stateDidChange = subject.attemptStateTransition(SHOWING, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(LOADING);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(LOADING);
+        stateDidChange = subject.attemptStateTransition(SHOWING, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(LOADING);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(LOADING);
+        stateDidChange = subject.attemptStateTransition(DESTROYED, false);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
+        verify(customEventInterstitialAdapter).invalidate();
+
+        resetMoPubInterstitial(LOADING);
+        stateDidChange = subject.attemptStateTransition(DESTROYED, true);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
+        verify(customEventInterstitialAdapter).invalidate();
+    }
+
+    @Test
+    public void attemptStateTransition_withReadyStartState() {
+        /**
+         * This state should succeed for going to SHOWING. It is also possible to force refresh from
+         * here into IDLE. Also, READY can go into DESTROYED.
+         */
+
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(READY);
+        boolean stateDidChange = subject.attemptStateTransition(IDLE, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(READY);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(READY);
+        stateDidChange = subject.attemptStateTransition(IDLE, true);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(IDLE);
+        verify(customEventInterstitialAdapter).invalidate();
+
+        resetMoPubInterstitial(READY);
+        stateDidChange = subject.attemptStateTransition(LOADING, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(READY);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+        verify(interstitialAdListener).onInterstitialLoaded(subject);
+
+        resetMoPubInterstitial(READY);
+        stateDidChange = subject.attemptStateTransition(LOADING, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(READY);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+        verify(interstitialAdListener).onInterstitialLoaded(subject);
+
+        resetMoPubInterstitial(READY);
+        stateDidChange = subject.attemptStateTransition(READY, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(READY);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(READY);
+        stateDidChange = subject.attemptStateTransition(READY, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(READY);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(READY);
+        stateDidChange = subject.attemptStateTransition(SHOWING, false);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(SHOWING);
+        verify(customEventInterstitialAdapter).showInterstitial();
+
+        resetMoPubInterstitial(READY);
+        stateDidChange = subject.attemptStateTransition(SHOWING, true);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(SHOWING);
+        verify(customEventInterstitialAdapter).showInterstitial();
+
+        resetMoPubInterstitial(READY);
+        stateDidChange = subject.attemptStateTransition(DESTROYED, false);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
+        verify(customEventInterstitialAdapter).invalidate();
+
+        resetMoPubInterstitial(READY);
+        stateDidChange = subject.attemptStateTransition(DESTROYED, true);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
+        verify(customEventInterstitialAdapter).invalidate();
+    }
+
+    @Test
+    public void attemptStateTransition_withShowingStartState() {
+        /**
+         * When the interstitial is dismissed, this should transition to IDLE. Otherwise, block
+         * other transitions except to DESTROYED. You cannot force refresh while an interstitial
+         * is showing.
+         */
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(SHOWING);
+        boolean stateDidChange = subject.attemptStateTransition(IDLE, false);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(IDLE);
+        verify(customEventInterstitialAdapter).invalidate();
+
+        resetMoPubInterstitial(SHOWING);
+        stateDidChange = subject.attemptStateTransition(IDLE, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(SHOWING);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(SHOWING);
+        stateDidChange = subject.attemptStateTransition(LOADING, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(SHOWING);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(SHOWING);
+        stateDidChange = subject.attemptStateTransition(LOADING, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(SHOWING);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(SHOWING);
+        stateDidChange = subject.attemptStateTransition(READY, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(SHOWING);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(SHOWING);
+        stateDidChange = subject.attemptStateTransition(READY, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(SHOWING);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(SHOWING);
+        stateDidChange = subject.attemptStateTransition(SHOWING, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(SHOWING);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(SHOWING);
+        stateDidChange = subject.attemptStateTransition(SHOWING, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(SHOWING);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(SHOWING);
+        stateDidChange = subject.attemptStateTransition(DESTROYED, false);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
+        verify(customEventInterstitialAdapter).invalidate();
+
+        resetMoPubInterstitial(SHOWING);
+        stateDidChange = subject.attemptStateTransition(DESTROYED, true);
+        assertThat(stateDidChange).isTrue();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
+        verify(customEventInterstitialAdapter).invalidate();
+    }
+    @Test
+    public void attemptStateTransition_withDestroyedStartState() {
+        // All state transitions should fail if starting from a destroyed state
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setCurrentInterstitialState(DESTROYED);
+        boolean stateDidChange = subject.attemptStateTransition(IDLE, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(DESTROYED);
+        stateDidChange = subject.attemptStateTransition(IDLE, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(DESTROYED);
+        stateDidChange = subject.attemptStateTransition(LOADING, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(DESTROYED);
+        stateDidChange = subject.attemptStateTransition(LOADING, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(DESTROYED);
+        stateDidChange = subject.attemptStateTransition(READY, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(DESTROYED);
+        stateDidChange = subject.attemptStateTransition(READY, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(DESTROYED);
+        stateDidChange = subject.attemptStateTransition(LOADING, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(DESTROYED);
+        stateDidChange = subject.attemptStateTransition(LOADING, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(DESTROYED);
+        stateDidChange = subject.attemptStateTransition(DESTROYED, false);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
+        verifyZeroInteractions(customEventInterstitialAdapter);
+
+        resetMoPubInterstitial(DESTROYED);
+        stateDidChange = subject.attemptStateTransition(DESTROYED, true);
+        assertThat(stateDidChange).isFalse();
+        assertThat(subject.getCurrentInterstitialState()).isEqualTo(DESTROYED);
+    }
+
     private void loadCustomEvent() {
         MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = subject.new MoPubInterstitialView(activity);
 
@@ -353,4 +705,12 @@ private void assertShowsCustomEventInterstitial(boolean shouldBeReady) {
             verify(customEventInterstitialAdapter, never()).showInterstitial();
         }
     }
+
+    private void resetMoPubInterstitial(
+            @NonNull final MoPubInterstitial.InterstitialState interstitialState) {
+        reset(customEventInterstitialAdapter, interstitialAdListener, interstitialView);
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setInterstitialView(interstitialView);
+        subject.setCurrentInterstitialState(interstitialState);
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
index e23063a6..112b3ff3 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
@@ -6,6 +6,7 @@
 import android.support.annotation.Nullable;
 
 import com.mopub.common.AdType;
+import com.mopub.common.DataKeys;
 import com.mopub.common.LifecycleListener;
 import com.mopub.common.MoPubReward;
 import com.mopub.common.test.support.SdkTestRunner;
@@ -18,9 +19,9 @@
 
 import org.junit.After;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
 import org.mockito.ArgumentMatcher;
 import org.mockito.Mock;
 import org.mockito.invocation.InvocationOnMock;
@@ -30,6 +31,7 @@
 import org.robolectric.shadows.ShadowLooper;
 
 import java.util.Map;
+import java.util.Set;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
@@ -40,6 +42,7 @@
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.mockito.Mockito.verifyZeroInteractions;
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
@@ -47,6 +50,8 @@
 public class
         MoPubRewardedVideoManagerTest {
 
+    public static final String MOPUB_REWARD = "mopub_reward";
+
     @Mock
     MoPubRequestQueue mockRequestQueue;
     @Mock
@@ -78,6 +83,7 @@ public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {
     public void tearDown() {
         // Unpause the main looper in case a test terminated while the looper was paused.
         ShadowLooper.unPauseMainLooper();
+        MoPubRewardedVideoManager.getRewardedVideoData().clear();
     }
 
     @Test
@@ -92,6 +98,7 @@ public void loadVideo_withRequestParameters_shouldGenerateUrlWithKeywords() {
 
         // Finish the request
         requestListener.onErrorResponse(new VolleyError("end test"));
+        ShadowLooper.unPauseMainLooper();
     }
 
     @Test
@@ -106,6 +113,23 @@ public void loadVideo_withCustomerIdInRequestParameters_shouldSetCustomerId() {
 
         // Finish the request
         requestListener.onErrorResponse(new VolleyError("end test"));
+        ShadowLooper.unPauseMainLooper();
+    }
+
+    @Test
+    public void loadVideo_withVideoAlreadyShowing_shouldNotLoadVideo() {
+        // To simulate that a video is showing
+        MoPubRewardedVideoManager.getRewardedVideoData().setCurrentlyShowingAdUnitId("testAdUnit");
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+
+        ShadowLooper.unPauseMainLooper();
+
+        verifyZeroInteractions(mockRequestQueue);
     }
 
     @Test
@@ -128,10 +152,14 @@ public void callbackMethods_withNullListener_shouldNotError() {
 
         ShadowLooper.unPauseMainLooper();
 
-        MoPubRewardedVideoManager.onRewardedVideoClicked(TestCustomEvent.class, "id!");
-        MoPubRewardedVideoManager.onRewardedVideoStarted(TestCustomEvent.class, "id!");
-        MoPubRewardedVideoManager.onRewardedVideoClosed(TestCustomEvent.class, "id!");
-        MoPubRewardedVideoManager.onRewardedVideoCompleted(TestCustomEvent.class, "id!",
+        MoPubRewardedVideoManager.onRewardedVideoClicked(TestCustomEvent.class,
+                TestCustomEvent.AD_NETWORK_ID);
+        MoPubRewardedVideoManager.onRewardedVideoStarted(TestCustomEvent.class,
+                TestCustomEvent.AD_NETWORK_ID);
+        MoPubRewardedVideoManager.onRewardedVideoClosed(TestCustomEvent.class,
+                TestCustomEvent.AD_NETWORK_ID);
+        MoPubRewardedVideoManager.onRewardedVideoCompleted(TestCustomEvent.class,
+                TestCustomEvent.AD_NETWORK_ID,
                 MoPubReward.success("test", 111));
 
         // The test passed because none of the above calls thew an exception even though the listener is null.
@@ -216,7 +244,7 @@ public void onAdSuccess_shouldInstantiateCustomEvent_andLoad() {
     public void onAdSuccess_withCustomEventAlreadyLoaded_shouldInvalidateOldCustomEvent() throws Exception {
         final CustomEventRewardedVideo mockCustomEvent = mock(CustomEventRewardedVideo.class);
         MoPubRewardedVideoManager.getRewardedVideoData().updateAdUnitCustomEventMapping(
-                "testAdUnit", mockCustomEvent, null, "id!");
+                "testAdUnit", mockCustomEvent, null, TestCustomEvent.AD_NETWORK_ID);
 
         AdResponse testResponse = new AdResponse.Builder()
                 .setCustomEventClassName(
@@ -258,6 +286,50 @@ public void onAdSuccess_withCustomEventAlreadyLoaded_shouldInvalidateOldCustomEv
         verifyNoMoreInteractions(mockCustomEvent);
     }
 
+    @Test
+    public void onAdSuccess_shouldHaveUniqueBroadcastIdsSetForEachCustomEvent() throws Exception {
+        AdResponse testResponse = new AdResponse.Builder()
+                .setCustomEventClassName(
+                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
+                .setAdType(AdType.CUSTOM)
+                .build();
+
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
+        // Load the first custom event
+        MoPubRewardedVideoManager.loadVideo("testAdUnit1", null);
+        requestListener.onSuccess(testResponse);
+
+        ShadowLooper.unPauseMainLooper();
+
+        // Get the first custom event's broadcast id
+        TestCustomEvent testCustomEvent1 = (TestCustomEvent)
+                MoPubRewardedVideoManager.getRewardedVideoData().getCustomEvent("testAdUnit1");
+        Long broadcastId1 = (Long) testCustomEvent1.getLocalExtras().get(
+                DataKeys.BROADCAST_IDENTIFIER_KEY);
+        assertThat(broadcastId1).isNotNull();
+
+        ShadowLooper.pauseMainLooper();
+
+        // Load the second custom event
+        MoPubRewardedVideoManager.loadVideo("testAdUnit2", null);
+        requestListener.onSuccess(testResponse);
+
+        ShadowLooper.unPauseMainLooper();
+
+        // Get the second custom event's broadcast id
+        TestCustomEvent testCustomEvent2 = (TestCustomEvent)
+                MoPubRewardedVideoManager.getRewardedVideoData().getCustomEvent("testAdUnit2");
+        Long broadcastId2 = (Long) testCustomEvent2.getLocalExtras().get(
+                DataKeys.BROADCAST_IDENTIFIER_KEY);
+        assertThat(broadcastId2).isNotNull();
+
+        // Make sure they're different
+        assertThat(broadcastId1).isNotEqualTo(broadcastId2);
+    }
+
     @Test
     public void onAdSuccess_shouldUpdateAdUnitRewardMapping() throws Exception {
         AdResponse testResponse = new AdResponse.Builder()
@@ -275,6 +347,8 @@ public void onAdSuccess_shouldUpdateAdUnitRewardMapping() throws Exception {
         MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
         requestListener.onSuccess(testResponse);
 
+        ShadowLooper.unPauseMainLooper();
+
         MoPubReward moPubReward =
                 MoPubRewardedVideoManager.getRewardedVideoData().getMoPubReward("testAdUnit");
         assertThat(moPubReward.getAmount()).isEqualTo(123);
@@ -305,7 +379,6 @@ public void playVideo_shouldSetHasVideoFalse() {
     }
     
     @Test
-    @Ignore("Flaky")
     public void playVideo_whenNotHasVideo_shouldFail() {
         AdResponse testResponse = new AdResponse.Builder()
                 .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$NoVideoCustomEvent")
@@ -329,7 +402,6 @@ public void playVideo_whenNotHasVideo_shouldFail() {
     }
 
     @Test
-    @Ignore("Flaky")
     public void playVideo_shouldUpdateLastShownCustomEventRewardMapping() throws Exception {
         AdResponse testResponse = new AdResponse.Builder()
                 .setCustomEventClassName(
@@ -370,7 +442,7 @@ public void onAdFailure_shouldCallFailCallback() {
 
     @Test
     public void chooseReward_shouldReturnMoPubRewardOverNetworkReward() throws Exception {
-        MoPubReward moPubReward = MoPubReward.success("mopub_reward", 123);
+        MoPubReward moPubReward = MoPubReward.success(MOPUB_REWARD, 123);
         MoPubReward networkReward = MoPubReward.success("network_reward", 456);
 
         MoPubReward chosenReward =
@@ -380,16 +452,70 @@ public void chooseReward_shouldReturnMoPubRewardOverNetworkReward() throws Excep
 
     @Test
     public void chooseReward_withNetworkRewardNotSuccessful_shouldReturnNetworkReward() throws Exception {
-        MoPubReward moPubReward = MoPubReward.success("mopub_reward", 123);
+        MoPubReward moPubReward = MoPubReward.success(MOPUB_REWARD, 123);
         MoPubReward networkReward = MoPubReward.failure();
 
         MoPubReward chosenReward =
                 MoPubRewardedVideoManager.chooseReward(moPubReward, networkReward);
         assertThat(chosenReward).isEqualTo(networkReward);
     }
+    
+    @Test
+    public void onRewardedVideoCompleted_withEmptyServerCompletionUrl_withCurrentlyShowingAdUnitId_shouldNotifyRewardedVideoCompletedForOneAdUnitId() {
+        MoPubReward moPubReward = MoPubReward.success(MOPUB_REWARD, 123);
+        RewardedVideoData rewardedVideoData = MoPubRewardedVideoManager.getRewardedVideoData();
+        rewardedVideoData.setCurrentlyShowingAdUnitId("testAdUnit1");
+        rewardedVideoData.updateAdUnitCustomEventMapping("testAdUnit1", new TestCustomEvent(), null,
+                TestCustomEvent.AD_NETWORK_ID);
+        rewardedVideoData.updateAdUnitCustomEventMapping("testAdUnit2", new TestCustomEvent(), null,
+                TestCustomEvent.AD_NETWORK_ID);
+        // Server completion url empty and custom event has no server reward set
+
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.onRewardedVideoCompleted(TestCustomEvent.class, TestCustomEvent.AD_NETWORK_ID,
+                moPubReward);
+        
+        ShadowLooper.unPauseMainLooper();
+
+        ArgumentCaptor<Set<String>> rewardedIdsCaptor = ArgumentCaptor.forClass((Class) Set.class);
+        verify(mockVideoListener).onRewardedVideoCompleted(rewardedIdsCaptor.capture(),
+                eq(moPubReward));
+        assertThat(rewardedIdsCaptor.getValue()).containsOnly("testAdUnit1");
+    }
+
+    @Test
+    public void onRewardedVideoCompleted_withEmptyServerCompletionUrl_withNoCurrentlyShowingAdUnitId_shouldNotifyRewardedVideoCompletedForAllAdUnitIds() {
+        MoPubReward moPubReward = MoPubReward.success(MOPUB_REWARD, 123);
+        RewardedVideoData rewardedVideoData = MoPubRewardedVideoManager.getRewardedVideoData();
+        rewardedVideoData.setCurrentlyShowingAdUnitId(null);
+        rewardedVideoData.updateAdUnitCustomEventMapping("testAdUnit1", new TestCustomEvent(), null,
+                TestCustomEvent.AD_NETWORK_ID);
+        rewardedVideoData.updateAdUnitCustomEventMapping("testAdUnit2", new TestCustomEvent(), null,
+                TestCustomEvent.AD_NETWORK_ID);
+        rewardedVideoData.updateAdUnitCustomEventMapping("testAdUnit3", new TestCustomEvent(), null,
+                TestCustomEvent.AD_NETWORK_ID);
+        // Server completion url empty and custom event has no server reward set
+
+        ShadowLooper.pauseMainLooper();
+
+        MoPubRewardedVideoManager.onRewardedVideoCompleted(TestCustomEvent.class, TestCustomEvent.AD_NETWORK_ID,
+                moPubReward);
+
+        ShadowLooper.unPauseMainLooper();
+
+        ArgumentCaptor<Set<String>> rewardedIdsCaptor = ArgumentCaptor.forClass((Class) Set.class);
+        verify(mockVideoListener).onRewardedVideoCompleted(rewardedIdsCaptor.capture(),
+                eq(moPubReward));
+        assertThat(rewardedIdsCaptor.getValue()).containsOnly("testAdUnit1", "testAdUnit2",
+                "testAdUnit3");
+    }
 
     public static class TestCustomEvent extends CustomEventRewardedVideo {
-        protected boolean mPlayable = false;
+        public static final String AD_NETWORK_ID = "id!";
+
+        boolean mPlayable = false;
+        private Map<String, Object> mLocalExtras;
 
         @Nullable
         @Override
@@ -406,7 +532,7 @@ protected LifecycleListener getLifecycleListener() {
         @NonNull
         @Override
         protected String getAdNetworkId() {
-            return "id!";
+            return AD_NETWORK_ID;
         }
 
         @Override
@@ -427,7 +553,9 @@ protected void loadWithSdkInitialized(@NonNull final Activity activity,
                 @NonNull final Map<String, String> serverExtras) throws Exception {
             // Do nothing because robolectric handlers execute immediately.
             mPlayable = true;
-            MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(TestCustomEvent.class, "id!");
+            MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(TestCustomEvent.class,
+                    TestCustomEvent.AD_NETWORK_ID);
+            mLocalExtras = localExtras;
         }
 
         @Override
@@ -437,7 +565,12 @@ protected boolean hasVideoAvailable() {
 
         @Override
         protected void showVideo() {
-            MoPubRewardedVideoManager.onRewardedVideoStarted(TestCustomEvent.class, "id!");
+            MoPubRewardedVideoManager.onRewardedVideoStarted(TestCustomEvent.class, TestCustomEvent.AD_NETWORK_ID);
+        }
+
+        @Nullable
+        Map<String, Object> getLocalExtras() {
+            return mLocalExtras;
         }
     }
 
@@ -447,7 +580,7 @@ protected void loadWithSdkInitialized(@NonNull final Activity activity,
                 @NonNull final Map<String, Object> localExtras,
                 @NonNull final Map<String, String> serverExtras) throws Exception {
             mPlayable = false;
-            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(NoVideoCustomEvent.class, "id!", MoPubErrorCode.NETWORK_NO_FILL);
+            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(NoVideoCustomEvent.class, TestCustomEvent.AD_NETWORK_ID, MoPubErrorCode.NETWORK_NO_FILL);
         }
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
index 16fd1507..0b440d17 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
@@ -6,9 +6,12 @@
 import android.view.View;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.Reflection;
+import com.mopub.common.util.test.support.ShadowReflection;
 import com.mopub.mobileads.test.support.TestAdViewControllerFactory;
 import com.mopub.mobileads.test.support.TestCustomEventBannerAdapterFactory;
 
+import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -28,7 +31,7 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
+@Config(constants = BuildConfig.class, shadows = {ShadowReflection.class})
 public class MoPubViewTest {
     private MoPubView subject;
     private Map<String,String> paramsMap = new HashMap<String, String>();
@@ -45,6 +48,11 @@ public void setup() {
         adViewController = TestAdViewControllerFactory.getSingletonMock();
     }
 
+    @After
+    public void tearDown() {
+        ShadowReflection.reset();
+    }
+
     @Test
     public void screenStateBroadcastReceiver_withActionUserPresent_shouldUnpauseRefresh() throws Exception {
         broadcastIntent(new Intent(Intent.ACTION_USER_PRESENT));
@@ -191,6 +199,57 @@ public void loadCustomEvent_whenParamsMapIsNull_shouldCallLoadFailUrl() throws E
         verify(customEventBannerAdapter, never()).loadAd();
     }
 
+    @Test
+    public void loadCustomEvent_withTwoCalls_shouldInvalidateAdapterOnce() throws Exception {
+        subject.loadCustomEvent("name", paramsMap);
+        subject.loadCustomEvent("name", paramsMap);
+
+        verify(customEventBannerAdapter).invalidate();
+    }
+
+    @Test
+    public void forceRefresh_withCallToLoadCustomEvent_shouldInvalidateAdapter() throws Exception {
+        subject.loadCustomEvent("name", paramsMap);
+        subject.forceRefresh();
+
+        verify(customEventBannerAdapter).invalidate();
+    }
+
+    @Test
+    public void loadCustomEvent_withoutBannerModule_shouldNotLoadAd() throws Exception {
+        ShadowReflection.setNextClassNotFound(true);
+
+        subject.loadCustomEvent("name", paramsMap);
+
+        verify(customEventBannerAdapter, never()).loadAd();
+    }
+
+    @Test
+    public void forceRefresh_withoutBannerModule_withCallToLoadCustomEvent_shouldNotInvalidateAdapter() throws Exception {
+        ShadowReflection.setNextClassNotFound(true);
+
+        subject.loadCustomEvent("name", paramsMap);
+        subject.forceRefresh();
+
+        verify(customEventBannerAdapter, never()).invalidate();
+    }
+
+    @Test
+    public void forceRefresh_withoutBannerModule_withCallToLoadCustomEvent_shouldForceRefreshAdViewController() throws Exception {
+        ShadowReflection.setNextClassNotFound(true);
+
+        subject.loadCustomEvent("name", paramsMap);
+        subject.forceRefresh();
+
+        verify(adViewController).forceRefresh();
+    }
+
+    @Test
+    public void invalidateAdapter_withReflection_shouldExist() throws Exception {
+        assertThat(Reflection.getDeclaredMethodWithTraversal(CustomEventBannerAdapter.class,
+                "invalidate")).isNotNull();
+    }
+
     private void broadcastIntent(final Intent intent) {
         final List<ShadowApplication.Wrapper> wrappers = ShadowApplication.getInstance().getRegisteredReceivers();
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
index dc0602f1..189d3ad8 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
@@ -33,9 +33,9 @@
 
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
index ef88b18d..8c120a01 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
@@ -1,16 +1,24 @@
 package com.mopub.mobileads;
 
+import android.annotation.TargetApi;
 import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
 import android.content.pm.ActivityInfo;
+import android.graphics.Bitmap;
+import android.os.Build;
 import android.os.Bundle;
+import android.view.TextureView;
 import android.view.View;
 import android.widget.ImageView;
 
+import com.mopub.common.Constants;
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mraid.MraidVideoViewController;
+import com.mopub.nativeads.NativeFullScreenVideoView;
+import com.mopub.nativeads.NativeVideoController;
+import com.mopub.nativeads.NativeVideoViewController;
 
 import org.junit.Before;
 import org.junit.Ignore;
@@ -21,17 +29,22 @@
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowActivity;
 
+import java.lang.reflect.Constructor;
+
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
 public class MraidVideoPlayerActivityTest {
     private static final String VAST = "vast";
     private static final String MRAID = "mraid";
+    private static final String NATIVE_VIDEO_VIEW_CONTROLLER =
+            "com.mopub.nativeads.NativeVideoViewController";
 
     private MraidVideoPlayerActivity subject;
     private long testBroadcastIdentifier;
@@ -63,6 +76,13 @@ public void onCreate_withMraidExtraKey_shouldUseMraidVideoViewController() throw
         assertThat(subject.getBaseVideoViewController()).isInstanceOf(MraidVideoViewController.class);
     }
 
+    @Test
+    public void onCreate_withNativeExtraKey_shouldUseNativeVideoViewController() throws Exception {
+        initializeSubjectForNative();
+
+        assertThat(subject.getBaseVideoViewController()).isInstanceOf(NativeVideoViewController.class);
+    }
+
     @Ignore("pending: this is currently impossible to write")
     @Test
     public void onCreate_shouldForwardOnCreateToViewController() throws Exception {
@@ -167,6 +187,16 @@ public void onStartActivityForResult_withNullClass_shouldNotStartAnActivity() th
         assertThat(intentForResult).isNull();
     }
 
+    @Test
+    public void createVideoViewController_withNativeVideoViewControllerReflectionConstructor_shouldExist() throws Exception {
+        final Class<?> nativeVideoViewController = Class.forName(NATIVE_VIDEO_VIEW_CONTROLLER);
+        final Constructor<?> declaredConstructor = nativeVideoViewController.getDeclaredConstructor(
+                Context.class, Bundle.class, Bundle.class,
+                BaseVideoViewController.BaseVideoViewControllerListener.class);
+
+        assertThat(declaredConstructor).isNotNull();
+    }
+
     private void initializeSubjectForMraid() {
         intent.putExtra(BaseVideoPlayerActivity.VIDEO_CLASS_EXTRAS_KEY, "mraid");
 
@@ -188,6 +218,32 @@ private void initializeSubjectForVast() {
                 .get();
     }
 
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+    private void initializeSubjectForNative() {
+        intent.putExtra(BaseVideoPlayerActivity.VIDEO_CLASS_EXTRAS_KEY, "native");
+
+        NativeFullScreenVideoView mockFullScreenVideoView = mock(NativeFullScreenVideoView.class);
+        NativeVideoController mockVideoController = mock(NativeVideoController.class);
+        VastVideoConfig mockVastVideoConfig = mock(VastVideoConfig.class);
+        TextureView mockTextureView = mock(TextureView.class);
+        Bitmap mockBitmap = mock(Bitmap.class);
+
+        when(mockVastVideoConfig.getCustomCtaText()).thenReturn("Learn More");
+        when(mockFullScreenVideoView.getTextureView()).thenReturn(mockTextureView);
+        when(mockTextureView.getBitmap()).thenReturn(mockBitmap);
+
+        Bundle additionalExtras = new Bundle();
+        additionalExtras.putSerializable(Constants.NATIVE_VAST_VIDEO_CONFIG, mockVastVideoConfig);
+        additionalExtras.putLong(Constants.NATIVE_VIDEO_ID, 123);
+        NativeVideoController.setForId(123, mockVideoController);
+        intent.putExtras(additionalExtras);
+
+        subject = Robolectric.buildActivity(MraidVideoPlayerActivity.class)
+                .withIntent(intent)
+                .create()
+                .get();
+    }
+
     private void initializeSubjectWithMockViewController() {
         initializeSubjectForMraid();
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoBroadcastReceiverTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoBroadcastReceiverTest.java
index 64b328a4..97a711ec 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoBroadcastReceiverTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoBroadcastReceiverTest.java
@@ -4,6 +4,7 @@
 import android.content.Intent;
 import android.content.IntentFilter;
 
+import com.mopub.common.IntentActions;
 import com.mopub.common.test.support.SdkTestRunner;
 
 import org.fest.util.Sets;
@@ -41,7 +42,7 @@ public void setUp() throws Exception {
     @Test
     public void constructor_shouldSetIntentFilter() throws Exception {
         Set<String> expectedActions = Sets.newLinkedHashSet(
-                RewardedVideoBroadcastReceiver.ACTION_REWARDED_VIDEO_COMPLETE
+                IntentActions.ACTION_REWARDED_VIDEO_COMPLETE
         );
 
         final IntentFilter intentFilter = subject.getIntentFilter();
@@ -57,7 +58,7 @@ public void constructor_shouldSetIntentFilter() throws Exception {
     public void onReceive_withActionRewardedVideoComplete_shouldNotifyListener() {
         final Intent rewardedVideoCompleteIntent = new Intent();
         rewardedVideoCompleteIntent.setAction(
-                RewardedVideoBroadcastReceiver.ACTION_REWARDED_VIDEO_COMPLETE);
+                IntentActions.ACTION_REWARDED_VIDEO_COMPLETE);
         rewardedVideoCompleteIntent.putExtra("broadcastIdentifier", broadcastIdentifier);
 
         subject.onReceive(context, rewardedVideoCompleteIntent);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
index 30c32d09..1fa858ca 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
@@ -29,8 +29,8 @@
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 import static com.mopub.mobileads.VastManager.VastManagerListener;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
index f7cfbc63..1c063c3a 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
@@ -65,9 +65,9 @@
 import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
 import static com.mopub.common.VolleyRequestMatcher.isUrl;
 import static com.mopub.mobileads.BaseVideoViewController.BaseVideoViewControllerListener;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static com.mopub.mobileads.VastVideoViewController.CURRENT_POSITION;
 import static com.mopub.mobileads.VastVideoViewController.DEFAULT_VIDEO_DURATION_FOR_CLOSE_BUTTON;
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
index f824e000..4d79a2e2 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
@@ -409,7 +409,7 @@ public void handleClose_afterDestroy_shouldNotFireOnClose() {
     }
 
     @Test
-    public void handleClose_fromExpandedState_shouldMoveWebViewToOriginalContainer_shouldNotFireOnClose() throws MraidCommandException {
+    public void handleClose_fromExpandedState_shouldMoveWebViewToOriginalContainer_shouldFireOnClose() throws MraidCommandException {
         // Move to EXPANDED state
         subject.handlePageLoad();
         subject.handleExpand(null, false);
@@ -419,11 +419,11 @@ public void handleClose_fromExpandedState_shouldMoveWebViewToOriginalContainer_s
         assertThat(subject.getExpandedAdContainer().getChildCount()).isEqualTo(1);
         assertThat(subject.getAdContainer().getChildCount()).isEqualTo(1);
         assertThat(subject.getViewState()).isEqualTo(ViewState.DEFAULT);
-        verify(mockMraidListener, never()).onClose();
+        verify(mockMraidListener).onClose();
     }
 
     @Test
-    public void handleClose_fromTwoPartExpandedState_shouldDetachTwoPartBridge_shouldMoveWebViewToOriginalContainer_shouldNotFireOnClose()
+    public void handleClose_fromTwoPartExpandedState_shouldDetachTwoPartBridge_shouldMoveWebViewToOriginalContainer_shouldFireOnClose()
             throws MraidCommandException {
         URI uri = URI.create("https://two-part-url");
 
@@ -439,7 +439,7 @@ public void handleClose_fromTwoPartExpandedState_shouldDetachTwoPartBridge_shoul
         assertThat(subject.getAdContainer().getChildCount()).isEqualTo(1);
         assertThat(subject.getViewState()).isEqualTo(ViewState.DEFAULT);
 
-        verify(mockMraidListener, never()).onClose();
+        verify(mockMraidListener).onClose();
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java
index 3d38b27f..2744dc6e 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java
@@ -24,9 +24,9 @@
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_CLICK;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
+import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 import static org.fest.assertions.api.Assertions.assertThat;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java
index a9b49fa1..32c3c858 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java
@@ -32,14 +32,14 @@ public void setUp() {
         subject = new AdapterHelper(context, start, interval);
     }
 
-    @Test(expected = IllegalArgumentException.class)
-    public void constructor_whenPassedAnApplicationContext_shouldThrowIllegalArgumentException() {
+    @Test
+    public void constructor_whenPassedAnApplicationContext_shouldNotThrowIllegalArgumentException() {
         new AdapterHelper(context.getApplicationContext(), start, interval);
     }
 
     @Test
     public void getAdView_withNullActivityContext_shouldReturnEmptyViewWithApplicationContext() {
-        subject.clearActivityContext();
+        subject.clearContext();
         Context viewContext = subject.getAdView(null, null, mock(NativeAd.class),
                 mock(ViewBinder.class)).getContext();
         assertThat(viewContext).isEqualTo(context.getApplication());
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
index a156332a..d8bb770b 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
@@ -83,12 +83,12 @@ public void registerAdRenderer_shouldCallAdRednererRegistryRegisterAdRenderer()
 
     @Test
     public void destroy_shouldSetListenersToEmptyAndClearContext() {
-        assertThat(subject.getActivityOrDestroy()).isSameAs(context);
+        assertThat(subject.getContextOrDestroy()).isSameAs(context);
         assertThat(subject.getMoPubNativeNetworkListener()).isSameAs(mockNetworkListener);
 
         subject.destroy();
 
-        assertThat(subject.getActivityOrDestroy()).isNull();
+        assertThat(subject.getContextOrDestroy()).isNull();
         assertThat(subject.getMoPubNativeNetworkListener()).isSameAs(EMPTY_NETWORK_LISTENER);
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
index eea82131..f3cd7f58 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
@@ -13,6 +13,7 @@
 import android.view.TextureView.SurfaceTextureListener;
 import android.view.View;
 
+import com.mopub.common.Constants;
 import com.mopub.common.event.EventDetails;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BaseVideoPlayerActivity;
@@ -524,9 +525,9 @@ public void MediaLayout_clickListener_shouldPrepareToLeaveView_shouldTriggerImpr
                 .isEqualTo(MraidVideoPlayerActivity.class.getName());
         assertThat(startedActivity.getStringExtra(BaseVideoPlayerActivity.VIDEO_CLASS_EXTRAS_KEY))
                 .isEqualTo("native");
-        assertThat(startedActivity.getLongExtra(NativeVideoViewController.NATIVE_VIDEO_ID, 0L))
+        assertThat(startedActivity.getLongExtra(Constants.NATIVE_VIDEO_ID, 0L))
                 .isGreaterThan(0L);
-        assertThat(startedActivity.getSerializableExtra(NativeVideoViewController
+        assertThat(startedActivity.getSerializableExtra(Constants
                 .NATIVE_VAST_VIDEO_CONFIG))
                 .isEqualTo(mockVastVideoConfig);
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java
index 79307f38..6c35d102 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java
@@ -12,6 +12,7 @@
 import android.view.View;
 import android.view.ViewGroup.LayoutParams;
 
+import com.mopub.common.Constants;
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BaseVideoViewController.BaseVideoViewControllerListener;
@@ -63,13 +64,13 @@ public void setUp() {
         activity = Robolectric.buildActivity(Activity.class).create().get();
 
         intentExtras = new Bundle();
-        intentExtras.putLong(NativeVideoViewController.NATIVE_VIDEO_ID, 123);
+        intentExtras.putLong(Constants.NATIVE_VIDEO_ID, 123);
         NativeVideoController.setForId(123, mockVideoController);
 
         when(mockVastVideoConfig.getCustomCtaText()).thenReturn("Learn More");
         when(mockFullScreenVideoView.getTextureView()).thenReturn(mockTextureView);
         when(mockTextureView.getBitmap()).thenReturn(mockBitmap);
-        intentExtras.putSerializable(NativeVideoViewController.NATIVE_VAST_VIDEO_CONFIG, mockVastVideoConfig);
+        intentExtras.putSerializable(Constants.NATIVE_VAST_VIDEO_CONFIG, mockVastVideoConfig);
 
         subject = new NativeVideoViewController(activity, intentExtras, null,
                 mockBaseVideoViewControllerListener, mockFullScreenVideoView);
@@ -100,7 +101,7 @@ public void constructor_withNullNativeVideoController_shouldThrowNPE() {
 
     @Test(expected = NullPointerException.class)
     public void onCreate_withNullNativeVideoController_shouldThrowNPE() {
-        intentExtras.remove(NativeVideoViewController.NATIVE_VAST_VIDEO_CONFIG);
+        intentExtras.remove(Constants.NATIVE_VAST_VIDEO_CONFIG);
         subject = new NativeVideoViewController(activity, intentExtras, null,
                 mockBaseVideoViewControllerListener, mockFullScreenVideoView);
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
index 4431db2d..c176e2a4 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
@@ -93,9 +93,9 @@ public void constructor_shouldSetOnPreDrawListenerForDecorView() throws Exceptio
         when(viewTreeObserver.isAlive()).thenReturn(true);
 
         subject = new VisibilityTracker(activity1, trackedViews, visibilityChecker, visibilityHandler);
-        assertThat(subject.mRootView.get()).isEqualTo(decorView);
         assertThat(subject.mOnPreDrawListener).isNotNull();
         verify(viewTreeObserver).addOnPreDrawListener(subject.mOnPreDrawListener);
+        assertThat(subject.mWeakViewTreeObserver.get()).isEqualTo(viewTreeObserver);
     }
 
     @Test
@@ -111,9 +111,72 @@ public void constructor_withNonAliveViewTreeObserver_shouldNotSetOnPreDrawListen
         when(viewTreeObserver.isAlive()).thenReturn(false);
 
         subject = new VisibilityTracker(activity1, trackedViews, visibilityChecker, visibilityHandler);
-        assertThat(subject.mRootView.get()).isEqualTo(decorView);
-        assertThat(subject.mOnPreDrawListener).isNull();
         verify(viewTreeObserver, never()).addOnPreDrawListener(subject.mOnPreDrawListener);
+        assertThat(subject.mWeakViewTreeObserver.get()).isNull();
+    }
+
+    @Test
+    public void constructor_withApplicationContext_shouldNotSetOnPreDrawListener() {
+        subject = new VisibilityTracker(activity.getApplicationContext(), trackedViews,
+                visibilityChecker, visibilityHandler);
+
+        assertThat(subject.mWeakViewTreeObserver.get()).isNull();
+    }
+
+    @Test
+    public void getBestRootView_withActivity_withNullView_shouldReturnActivityDecorView() {
+        Activity activity1 = mock(Activity.class);
+        Window window = mock(Window.class);
+        View decorView = mock(View.class);
+        ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
+
+        when(activity1.getWindow()).thenReturn(window);
+        when(window.getDecorView()).thenReturn(decorView);
+        when(decorView.getViewTreeObserver()).thenReturn(viewTreeObserver);
+        when(viewTreeObserver.isAlive()).thenReturn(true);
+
+        View view = VisibilityTracker.getBestRootView(activity1, null);
+
+        assertThat(view).isEqualTo(decorView);
+    }
+
+    @Test
+    public void getBestRootView_withApplicationContext_withRootView_shouldReturnRootView() {
+        View rootView = new View(activity.getApplicationContext());
+
+        View view = VisibilityTracker.getBestRootView(activity.getApplicationContext(), rootView);
+
+        assertThat(view).isEqualTo(rootView);
+    }
+
+    @Test
+    public void getBestRootView_withApplicationContext_withContentView_shouldReturnContentView() {
+        View rootView = mock(View.class);
+        View contentView = mock(View.class);
+
+        when(rootView.findViewById(android.R.id.content)).thenReturn(contentView);
+        when(rootView.getRootView()).thenReturn(rootView);
+
+        View view = VisibilityTracker.getBestRootView(activity.getApplicationContext(), rootView);
+
+        assertThat(view).isEqualTo(contentView);
+    }
+
+    @Test
+    public void getBestRootView_withApplicationContext_withNullView_shouldReturnNull() {
+        View view = VisibilityTracker.getBestRootView(activity.getApplicationContext(), null);
+
+        assertThat(view).isNull();
+    }
+
+    @Test
+    public void getBestRootView_withApplicationContext_withNullRootView_withNullParentView_shouldReturnNull() {
+        View originalView = mock(View.class);
+        when(originalView.getRootView()).thenReturn(null);
+
+        View view = VisibilityTracker.getBestRootView(activity.getApplicationContext(), originalView);
+
+        assertThat(view).isNull();
     }
 
     @Test
@@ -123,7 +186,24 @@ public void addView_withVisibleView_shouldAddVisibleViewToTrackedViews() throws
         assertThat(trackedViews).hasSize(1);
     }
 
-    @Test(expected = AssertionError.class)
+    @Test
+    public void addView_withViewTreeObserverNotSet_shouldSetViewTreeObserver() {
+        ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
+        View rootView = mock(View.class);
+
+        when(view.getContext()).thenReturn(activity.getApplicationContext());
+        when(view.getRootView()).thenReturn(rootView);
+        when(rootView.getViewTreeObserver()).thenReturn(viewTreeObserver);
+        when(viewTreeObserver.isAlive()).thenReturn(true);
+
+        subject = new VisibilityTracker(activity.getApplicationContext(), trackedViews,
+                visibilityChecker, visibilityHandler);
+        subject.addView(view, MIN_PERCENTAGE_VIEWED);
+
+        assertThat(subject.mWeakViewTreeObserver.get()).isEqualTo(viewTreeObserver);
+    }
+
+    @Test(expected = NullPointerException.class)
     public void addView_whenViewIsNull_shouldThrowNPE() throws Exception {
         subject.addView(null, MIN_PERCENTAGE_VIEWED);
 
@@ -177,7 +257,7 @@ public void destroy_shouldCallClear_shouldRemoveListenerFromDecorView() throws E
         assertThat(trackedViews).isEmpty();
         verify(visibilityHandler).removeMessages(0);
         verify(viewTreeObserver).removeOnPreDrawListener(any(OnPreDrawListener.class));
-        assertThat(subject.mOnPreDrawListener).isNull();
+        assertThat(subject.mWeakViewTreeObserver.get()).isNull();
     }
 
     @Test
diff --git a/mopub-sdk/src/test/resources/robolectric.properties b/mopub-sdk/src/test/resources/robolectric.properties
index dbe9f738..3cbe9a8d 100644
--- a/mopub-sdk/src/test/resources/robolectric.properties
+++ b/mopub-sdk/src/test/resources/robolectric.properties
@@ -1,2 +1,3 @@
 sdk=21
 shadows=com.mopub.nativeads.test.support.MoPubShadowDisplay,com.mopub.nativeads.test.support.MoPubShadowBitmap,com.mopub.mobileads.test.support.ShadowVastVideoView
+manifest=src/main/AndroidManifest.xml
\ No newline at end of file
diff --git a/settings.gradle b/settings.gradle
index 281d020c..e0667c15 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,3 +1,4 @@
 rootProject.name = 'mopub-android'
-include ':mopub-sdk', ':mopub-sample'
-
+include ':mopub-sdk', ':mopub-sample', ':mopub-sdk:mopub-sdk-base', ':mopub-sdk:mopub-sdk-banner',
+        ':mopub-sdk:mopub-sdk-interstitial', ':mopub-sdk:mopub-sdk-rewardedvideo',
+        ':mopub-sdk:mopub-sdk-native-static', ':mopub-sdk:mopub-sdk-native-video'
