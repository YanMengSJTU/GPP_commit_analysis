diff --git a/mopub-sample/.classpath b/mopub-sample/.classpath
index 3c02ddb2..2dcead58 100644
--- a/mopub-sample/.classpath
+++ b/mopub-sample/.classpath
@@ -1,8 +1,9 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry kind="src" path="src/main/java"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
-	<classpathentry kind="output" path="bin/classes"/>
-</classpath>
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="gen"/>
+	<classpathentry kind="src" path="src/main/java"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
+	<classpathentry kind="output" path="bin/classes"/>
+</classpath>
diff --git a/mopub-sdk/.classpath b/mopub-sdk/.classpath
index 3b278178..2061dd5f 100644
--- a/mopub-sdk/.classpath
+++ b/mopub-sdk/.classpath
@@ -1,10 +1,31 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry kind="src" path="src/main/java"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
-	<classpathentry kind="lib" path="C:/Users/Stagiaire/Documents/adt-bundle-windows-x86-20140624/adt-bundle-windows-x86-20140624/sdk/extras/android/support/v4/android-support-v4.jar"/>
-	<classpathentry kind="output" path="bin/classes"/>
-</classpath>
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="gen"/>
+	<classpathentry kind="src" output="target/classes" path="src/main/java">
+		<attributes>
+			<attribute name="optional" value="true"/>
+			<attribute name="maven.pomderived" value="true"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
+	<classpathentry kind="lib" path="C:/Program Files (x86)/Android/android-sdk/extras/android/support/v4/android-support-v4.jar"/>
+	<classpathentry kind="src" output="target/test-classes" path="src/test/java">
+		<attributes>
+			<attribute name="optional" value="true"/>
+			<attribute name="maven.pomderived" value="true"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7">
+		<attributes>
+			<attribute name="maven.pomderived" value="true"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="con" path="org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER">
+		<attributes>
+			<attribute name="maven.pomderived" value="true"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="output" path="bin/classes"/>
+</classpath>
diff --git a/mopub-sdk/.project b/mopub-sdk/.project
index 1ac77f95..f97d19f6 100644
--- a/mopub-sdk/.project
+++ b/mopub-sdk/.project
@@ -25,9 +25,15 @@
 			<arguments>
 			</arguments>
 		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.m2e.core.maven2Builder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
 	</buildSpec>
 	<natures>
+		<nature>org.eclipse.m2e.core.maven2Nature</nature>
 		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
 		<nature>org.eclipse.jdt.core.javanature</nature>
 	</natures>
-</projectDescription>
\ No newline at end of file
+</projectDescription>
diff --git a/mopub-sdk/.settings/org.eclipse.core.resources.prefs b/mopub-sdk/.settings/org.eclipse.core.resources.prefs
new file mode 100644
index 00000000..4c28b1a8
--- /dev/null
+++ b/mopub-sdk/.settings/org.eclipse.core.resources.prefs
@@ -0,0 +1,4 @@
+eclipse.preferences.version=1
+encoding//src/main/java=UTF-8
+encoding//src/test/java=UTF-8
+encoding/<project>=UTF-8
diff --git a/mopub-sdk/.settings/org.eclipse.jdt.core.prefs b/mopub-sdk/.settings/org.eclipse.jdt.core.prefs
index 48ab4c6b..bbcbc934 100644
--- a/mopub-sdk/.settings/org.eclipse.jdt.core.prefs
+++ b/mopub-sdk/.settings/org.eclipse.jdt.core.prefs
@@ -1,4 +1,5 @@
 eclipse.preferences.version=1
-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6
-org.eclipse.jdt.core.compiler.compliance=1.6
-org.eclipse.jdt.core.compiler.source=1.6
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
+org.eclipse.jdt.core.compiler.compliance=1.7
+org.eclipse.jdt.core.compiler.problem.forbiddenReference=warning
+org.eclipse.jdt.core.compiler.source=1.7
diff --git a/mopub-sdk/.settings/org.eclipse.m2e.core.prefs b/mopub-sdk/.settings/org.eclipse.m2e.core.prefs
new file mode 100644
index 00000000..14b697b7
--- /dev/null
+++ b/mopub-sdk/.settings/org.eclipse.m2e.core.prefs
@@ -0,0 +1,4 @@
+activeProfiles=
+eclipse.preferences.version=1
+resolveWorkspaceProjects=true
+version=1
diff --git a/mopub-sdk/pom.xml b/mopub-sdk/pom.xml
index 25dbcea8..b90c603b 100644
--- a/mopub-sdk/pom.xml
+++ b/mopub-sdk/pom.xml
@@ -21,13 +21,6 @@
 
     <dependencies>
 
-        <!--main-->
-        <dependency>
-            <groupId>com.android.support</groupId>
-            <artifactId>support-v4</artifactId>
-            <version>19.1.0</version>
-        </dependency>
-
         <!--test-->
         <dependency>
             <groupId>org.apache.httpcomponents</groupId>
@@ -71,6 +64,66 @@
             <version>5.1</version>
             <scope>provided</scope>
         </dependency>
+        
+        
+        <dependency>
+    		<groupId>mopub</groupId>
+    		<artifactId>mopub-volley</artifactId>
+    		<version>1.1.0</version>
+		</dependency>	    
+	    
+		<dependency>
+		    <groupId>android-support-annotations</groupId>
+		    <artifactId>annotations</artifactId>
+		    <version>1.0</version>
+		</dependency>
+	    	    	    		
+		<dependency>
+			<groupId>com.google.android.gms</groupId>
+			<artifactId>play-services</artifactId>
+			<version>5.0.77</version>
+			<type>jar</type>
+		</dependency>
+	    
+	    <dependency>
+			<groupId>unity</groupId>
+			<artifactId>unity-android</artifactId>
+			<version>classes</version>
+		</dependency>
+
+		<dependency>
+			<groupId>com.google.android</groupId>
+			<artifactId>support-v4</artifactId>
+			<version>r6</version>
+		</dependency>
+
+		<dependency>
+			<groupId>com.google.android.annotations</groupId>
+			<artifactId>annotations</artifactId>
+			<version>20.0.3</version>
+		</dependency>
+		
+		<dependency>
+			<groupId>com.google.android</groupId>
+			<artifactId>android</artifactId>
+			<version>5.1</version>
+			<scope>provided</scope>
+		</dependency>
+
+		<dependency>
+			<groupId>junit</groupId>
+			<artifactId>junit</artifactId>
+			<version>4.8.1</version>
+			<scope>test</scope>
+		</dependency>	
+		
+		<dependency>
+			<groupId>MillennialMedia</groupId>
+			<artifactId>MMSDK</artifactId>
+			<version>5.1.0</version>
+			<scope>provided</scope>
+		</dependency>
+        
     </dependencies>
 
     <build>
diff --git a/mopub-sdk/src/main/java/com/mopub/common/event/TimedEvent.java b/mopub-sdk/src/main/java/com/mopub/common/event/TimedEvent.java
deleted file mode 100644
index c2aa7dc9..00000000
--- a/mopub-sdk/src/main/java/com/mopub/common/event/TimedEvent.java
+++ /dev/null
@@ -1,76 +0,0 @@
-package com.mopub.common.event;
-
-import com.mopub.common.ClientMetadata;
-
-import java.util.concurrent.TimeUnit;
-
-/**
- * Immutable data class with client event data, including a duration.
- */
-public class TimedEvent extends BaseEvent {
-    interface Listener {
-        public void onStopped(TimedEvent event);
-
-        public void onCancelled(TimedEvent event);
-    }
-
-    /**
-     * Use this status code when stopping an event where an HTTP Status Code isn't relevant.
-     */
-    public static final int SC_NOT_RELEVANT = 0;
-
-    /**
-     * Use this status code when the timed event has no response.
-     */
-    public static final int SC_NO_RESPONSE = -1;
-
-    private final long mStartTimeNanos;
-    private enum State {
-        WAITING, STOPPED, CANCELLED
-    }
-    private State mState;
-    private final Listener mListener;
-
-
-    private long mDurationMillis;
-    private int mHttpStatusCode;
-
-    TimedEvent(final Type eventType, final String requestUrl,
-            final ClientMetadata clientMetadata, Listener listener) {
-        super(eventType, requestUrl, clientMetadata);
-        // System.nanoTime isn't affected by changing the system time, so we use it here.
-        mState = State.WAITING;
-        mStartTimeNanos = System.nanoTime();
-        mListener = listener;
-    }
-
-    public synchronized void stop(int httpStatusCode) {
-        if (mState == State.WAITING) {
-            mState = State.STOPPED;
-            mHttpStatusCode = httpStatusCode;
-            long stopTimeNanos = System.nanoTime();
-            mDurationMillis = TimeUnit.MILLISECONDS.convert(stopTimeNanos - mStartTimeNanos,
-                    TimeUnit.NANOSECONDS);
-            if (mListener != null) {
-                mListener.onStopped(this);
-            }
-        }
-    }
-
-    public synchronized void cancel() {
-        if (mState == State.WAITING) {
-            mState = State.CANCELLED;
-            if (mListener != null) {
-                mListener.onCancelled(this);
-            }
-        }
-    }
-
-    public final synchronized long getDurationMillis() {
-        return mDurationMillis;
-    }
-
-    public final synchronized int getHttpStatusCode() {
-        return mHttpStatusCode;
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/IntentUtils.java b/mopub-sdk/src/main/java/com/mopub/common/util/IntentUtils.java
deleted file mode 100644
index ac1a3d71..00000000
--- a/mopub-sdk/src/main/java/com/mopub/common/util/IntentUtils.java
+++ /dev/null
@@ -1,113 +0,0 @@
-package com.mopub.common.util;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.PackageManager;
-import android.content.pm.ResolveInfo;
-import android.net.Uri;
-import android.os.Bundle;
-
-import com.mopub.common.logging.MoPubLog;
-
-import java.util.List;
-
-import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;
-
-public class IntentUtils {
-    private static final String TWITTER_APPLICATION_DEEPLINK_URL = "twitter://timeline";
-    private static final String PLAY_GOOGLE_COM = "play.google.com";
-    private static final String MARKET_ANDROID_COM = "market.android.com";
-    private static final String MARKET = "market";
-    private static final String HTTP = "http";
-    private static final String HTTPS = "https";
-
-    private IntentUtils() {}
-
-    /**
-     * Adding FLAG_ACTIVITY_NEW_TASK with startActivityForResult will always result in a
-     * RESULT_CANCELED, so don't use it for Activity contexts.
-     */
-    public static Intent getStartActivityIntent(final Context context, final Class clazz, final Bundle extras) {
-        final Intent intent = new Intent(context, clazz);
-
-        if (!(context instanceof Activity)) {
-            intent.addFlags(FLAG_ACTIVITY_NEW_TASK);
-        }
-
-        if (extras != null) {
-            intent.putExtras(extras);
-        }
-
-        return intent;
-    }
-
-
-    public static boolean deviceCanHandleIntent(final Context context, final Intent intent) {
-        try {
-            final PackageManager packageManager = context.getPackageManager();
-            final List<ResolveInfo> activities = packageManager.queryIntentActivities(intent, 0);
-            return !activities.isEmpty();
-        } catch (NullPointerException e) {
-            return false;
-        }
-    }
-
-    public static boolean isHttpUrl(final String url) {
-        if (url == null) {
-            return false;
-        }
-
-        final String scheme = Uri.parse(url).getScheme();
-        return (HTTP.equals(scheme) || HTTPS.equals(scheme));
-    }
-
-    private static boolean isAppStoreUrl(final String url) {
-        if (url == null) {
-            return false;
-        }
-
-        final Uri uri = Uri.parse(url);
-        final String scheme = uri.getScheme();
-        final String host = uri.getHost();
-
-        if (PLAY_GOOGLE_COM.equals(host) || MARKET_ANDROID_COM.equals(host)) {
-            return true;
-        }
-
-        if (MARKET.equals(scheme)) {
-            return true;
-        }
-
-        return false;
-    }
-
-    public static boolean isDeepLink(final String url) {
-        return isAppStoreUrl(url) || !isHttpUrl(url);
-    }
-
-    public static boolean canHandleTwitterUrl(Context context) {
-        return canHandleApplicationUrl(context, TWITTER_APPLICATION_DEEPLINK_URL, false);
-    }
-
-    public static boolean canHandleApplicationUrl(Context context, String url) {
-        return canHandleApplicationUrl(context, url, true);
-    }
-
-    public static boolean canHandleApplicationUrl(Context context, String url, boolean logError) {
-        // Determine which activities can handle the intent
-        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
-
-        // If there are no relevant activities, don't follow the link
-        if (!IntentUtils.deviceCanHandleIntent(context, intent)) {
-            if (logError) {
-                MoPubLog.w("Could not handle application specific action: " + url + ". " +
-                        "You may be running in the emulator or another device which does not " +
-                        "have the required application.");
-            }
-            return false;
-        }
-
-        return true;
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdConfiguration.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdConfiguration.java
deleted file mode 100644
index 236c577b..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdConfiguration.java
+++ /dev/null
@@ -1,287 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.os.Build;
-import android.provider.Settings;
-import android.webkit.WebView;
-import com.mopub.common.MoPub;
-import com.mopub.common.util.DateAndTime;
-import com.mopub.common.util.Utils;
-import com.mopub.common.util.VersionCode;
-import org.apache.http.HttpResponse;
-
-import java.io.Serializable;
-import java.util.Map;
-
-import static com.mopub.common.util.ResponseHeader.AD_TIMEOUT;
-import static com.mopub.common.util.ResponseHeader.AD_TYPE;
-import static com.mopub.common.util.ResponseHeader.CLICKTHROUGH_URL;
-import static com.mopub.common.util.ResponseHeader.DSP_CREATIVE_ID;
-import static com.mopub.common.util.ResponseHeader.FAIL_URL;
-import static com.mopub.common.util.ResponseHeader.HEIGHT;
-import static com.mopub.common.util.ResponseHeader.IMPRESSION_URL;
-import static com.mopub.common.util.ResponseHeader.NETWORK_TYPE;
-import static com.mopub.common.util.ResponseHeader.REDIRECT_URL;
-import static com.mopub.common.util.ResponseHeader.REFRESH_TIME;
-import static com.mopub.common.util.ResponseHeader.WIDTH;
-import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
-import static com.mopub.mobileads.util.HttpResponses.extractHeader;
-import static com.mopub.mobileads.util.HttpResponses.extractIntHeader;
-import static com.mopub.mobileads.util.HttpResponses.extractIntegerHeader;
-
-public class AdConfiguration implements Serializable {
-    private static final long serialVersionUID = 0L;
-
-    private static final int MINIMUM_REFRESH_TIME_MILLISECONDS = 10000;
-    private static final int DEFAULT_REFRESH_TIME_MILLISECONDS = 60000;
-    private static final String mPlatform = "Android";
-    private final String mSdkVersion;
-
-    private final String mHashedUdid;
-    private final String mUserAgent;
-    private final String mDeviceLocale;
-    private final String mDeviceModel;
-    private final int mPlatformVersion;
-
-    private long mBroadcastIdentifier;
-    private String mResponseString;
-    private String mAdUnitId;
-
-    private String mAdType;
-    private String mNetworkType;
-    private String mRedirectUrl;
-    private String mClickthroughUrl;
-    private String mFailUrl;
-    private String mImpressionUrl;
-    private long mTimeStamp;
-    private int mWidth;
-    private int mHeight;
-    private Integer mAdTimeoutDelay;
-    private int mRefreshTimeMilliseconds;
-    private String mDspCreativeId;
-
-    static AdConfiguration extractFromMap(Map<String,Object> map) {
-        if (map == null) {
-            return null;
-        }
-
-        Object adConfiguration = map.get(AD_CONFIGURATION_KEY);
-
-        if (adConfiguration instanceof AdConfiguration) {
-            return (AdConfiguration) adConfiguration;
-        }
-
-        return null;
-    }
-
-    AdConfiguration(final Context context) {
-        setDefaults();
-
-        if (context != null) {
-            String udid = Settings.Secure.getString(context.getContentResolver(), Settings.Secure.ANDROID_ID);
-            mHashedUdid = Utils.sha1((udid != null) ? udid : "");
-
-            mUserAgent = new WebView(context).getSettings().getUserAgentString();
-            mDeviceLocale = context.getResources().getConfiguration().locale.toString();
-        } else {
-            mHashedUdid = null;
-            mUserAgent = null;
-            mDeviceLocale = null;
-        }
-
-        mBroadcastIdentifier = Utils.generateUniqueId();
-        mDeviceModel = Build.MANUFACTURER + " " + Build.MODEL;
-        mPlatformVersion = VersionCode.currentApiLevel().getApiLevel();
-        mSdkVersion = MoPub.SDK_VERSION;
-    }
-
-    void cleanup() {
-        setDefaults();
-    }
-
-    void addHttpResponse(final HttpResponse httpResponse) {
-        mAdType = extractHeader(httpResponse, AD_TYPE);
-
-        // Set the network type of the ad.
-        mNetworkType = extractHeader(httpResponse, NETWORK_TYPE);
-
-        // Set the redirect URL prefix: navigating to any matching URLs will send us to the browser.
-        mRedirectUrl = extractHeader(httpResponse, REDIRECT_URL);
-
-        // Set the URL that is prepended to links for click-tracking purposes.
-        mClickthroughUrl = extractHeader(httpResponse, CLICKTHROUGH_URL);
-
-        // Set the fall-back URL to be used if the current request fails.
-        mFailUrl = extractHeader(httpResponse, FAIL_URL);
-
-        // Set the URL to be used for impression tracking.
-        mImpressionUrl = extractHeader(httpResponse, IMPRESSION_URL);
-
-        // Set the timestamp used for Ad Alert Reporting.
-        mTimeStamp = DateAndTime.now().getTime();
-
-        // Set the width and height.
-        mWidth = extractIntHeader(httpResponse, WIDTH, 0);
-        mHeight = extractIntHeader(httpResponse, HEIGHT, 0);
-
-        // Set the allowable amount of time an ad has before it automatically fails.
-        mAdTimeoutDelay = extractIntegerHeader(httpResponse, AD_TIMEOUT);
-
-        // Set the auto-refresh time. A timer will be scheduled upon ad success or failure.
-        if (!httpResponse.containsHeader(REFRESH_TIME.getKey())) {
-            mRefreshTimeMilliseconds = 0;
-        } else {
-            mRefreshTimeMilliseconds = extractIntHeader(httpResponse, REFRESH_TIME, 0) * 1000;
-            mRefreshTimeMilliseconds = Math.max(
-                    mRefreshTimeMilliseconds,
-                    MINIMUM_REFRESH_TIME_MILLISECONDS);
-        }
-
-        // Set the unique identifier for the creative that was returned.
-        mDspCreativeId = extractHeader(httpResponse, DSP_CREATIVE_ID);
-    }
-
-    /*
-     * MoPubView
-     */
-
-    String getAdUnitId() {
-        return mAdUnitId;
-    }
-
-    void setAdUnitId(String adUnitId) {
-        mAdUnitId = adUnitId;
-    }
-
-    String getResponseString() {
-        return mResponseString;
-    }
-
-    void setResponseString(String responseString) {
-        mResponseString = responseString;
-    }
-
-    long getBroadcastIdentifier() {
-        return mBroadcastIdentifier;
-    }
-
-    /*
-     * HttpResponse
-     */
-
-    String getAdType() {
-        return mAdType;
-    }
-
-    String getNetworkType() {
-        return mNetworkType;
-    }
-
-    String getRedirectUrl() {
-        return mRedirectUrl;
-    }
-
-    String getClickthroughUrl() {
-        return mClickthroughUrl;
-    }
-
-    @Deprecated
-    void setClickthroughUrl(String clickthroughUrl) {
-        mClickthroughUrl = clickthroughUrl;
-    }
-
-    String getFailUrl() {
-        return mFailUrl;
-    }
-
-    void setFailUrl(String failUrl) {
-        mFailUrl = failUrl;
-    }
-
-    String getImpressionUrl() {
-        return mImpressionUrl;
-    }
-
-    long getTimeStamp() {
-        return mTimeStamp;
-    }
-
-    int getWidth() {
-        return mWidth;
-    }
-
-    int getHeight() {
-        return mHeight;
-    }
-
-    Integer getAdTimeoutDelay() {
-        return mAdTimeoutDelay;
-    }
-
-    int getRefreshTimeMilliseconds() {
-        return mRefreshTimeMilliseconds;
-    }
-
-    @Deprecated
-    void setRefreshTimeMilliseconds(int refreshTimeMilliseconds) {
-        mRefreshTimeMilliseconds = refreshTimeMilliseconds;
-    }
-
-    String getDspCreativeId() {
-        return mDspCreativeId;
-    }
-
-    /*
-     * Context
-     */
-
-    String getHashedUdid() {
-        return mHashedUdid;
-    }
-
-    String getUserAgent() {
-        return mUserAgent;
-    }
-
-    String getDeviceLocale() {
-        return mDeviceLocale;
-    }
-
-    String getDeviceModel() {
-        return mDeviceModel;
-    }
-
-    int getPlatformVersion() {
-        return mPlatformVersion;
-    }
-
-    String getPlatform() {
-        return mPlatform;
-    }
-
-    /*
-     * Misc.
-     */
-
-    String getSdkVersion() {
-        return mSdkVersion;
-    }
-
-    private void setDefaults() {
-        mBroadcastIdentifier = 0;
-        mAdUnitId = null;
-        mResponseString = null;
-        mAdType = null;
-        mNetworkType = null;
-        mRedirectUrl = null;
-        mClickthroughUrl = null;
-        mImpressionUrl = null;
-        mTimeStamp = DateAndTime.now().getTime();
-        mWidth = 0;
-        mHeight = 0;
-        mAdTimeoutDelay = null;
-        mRefreshTimeMilliseconds = DEFAULT_REFRESH_TIME_MILLISECONDS;
-        mFailUrl = null;
-        mDspCreativeId = null;
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetchTask.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetchTask.java
deleted file mode 100644
index 85875e25..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetchTask.java
+++ /dev/null
@@ -1,250 +0,0 @@
-package com.mopub.mobileads;
-
-import android.os.AsyncTask;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.mobileads.factories.HttpClientFactory;
-import org.apache.http.HttpResponse;
-import org.apache.http.HttpStatus;
-import org.apache.http.client.HttpClient;
-import org.apache.http.client.methods.HttpGet;
-import org.apache.http.conn.ClientConnectionManager;
-
-import static com.mopub.common.util.ResponseHeader.AD_TYPE;
-import static com.mopub.common.util.ResponseHeader.USER_AGENT;
-import static com.mopub.common.util.ResponseHeader.WARMUP;
-import static com.mopub.mobileads.util.HttpResponses.extractHeader;
-
-public class AdFetchTask extends AsyncTask<String, Void, AdLoadTask> {
-    private TaskTracker mTaskTracker;
-    private AdViewController mAdViewController;
-    private Exception mException;
-    private HttpClient mHttpClient;
-    private long mTaskId;
-    private String mUserAgent;
-
-    private AdFetcher.FetchStatus mFetchStatus = AdFetcher.FetchStatus.NOT_SET;
-    private static final int MAXIMUM_REFRESH_TIME_MILLISECONDS = 600000;
-    private static final double EXPONENTIAL_BACKOFF_FACTOR = 1.5;
-
-    public AdFetchTask(TaskTracker taskTracker, AdViewController adViewController, String userAgent, int timeoutMilliseconds) {
-        mTaskTracker = taskTracker;
-
-        mAdViewController = adViewController;
-        mHttpClient = HttpClientFactory.create(timeoutMilliseconds);
-        mTaskId = mTaskTracker.getCurrentTaskId();
-        mUserAgent = userAgent;
-    }
-
-    @Override
-    protected AdLoadTask doInBackground(String... urls) {
-        AdLoadTask result = null;
-        try {
-            result = fetch(urls[0]);
-        } catch (Exception exception) {
-            mException = exception;
-        } finally {
-            shutdownHttpClient();
-        }
-        return result;
-    }
-
-    private AdLoadTask fetch(String url) throws Exception {
-        HttpGet httpget = new HttpGet(url);
-        httpget.addHeader(USER_AGENT.getKey(), mUserAgent);
-
-        if (!isStateValid()) return null;
-
-        HttpResponse response = mHttpClient.execute(httpget);
-
-        if (!isResponseValid(response)) return null;
-
-        mAdViewController.configureUsingHttpResponse(response);
-
-        if (!responseContainsContent(response)) return null;
-
-        return AdLoadTask.fromHttpResponse(response, mAdViewController);
-    }
-
-    private boolean responseContainsContent(HttpResponse response) {
-        // Ensure that the ad is not warming up.
-        if ("1".equals(extractHeader(response, WARMUP))) {
-            MoPubLog.d("Ad Unit (" + mAdViewController.getAdUnitId() + ") is still warming up. " +
-                    "Please try again in a few minutes.");
-            mFetchStatus = AdFetcher.FetchStatus.AD_WARMING_UP;
-            return false;
-        }
-
-        // Ensure that the ad type header is valid and not "clear".
-        String adType = extractHeader(response, AD_TYPE);
-        if ("clear".equals(adType)) {
-            MoPubLog.d("No ads found for adunit (" + mAdViewController.getAdUnitId() + ").");
-            mFetchStatus = AdFetcher.FetchStatus.CLEAR_AD_TYPE;
-            return false;
-        }
-
-        return true;
-    }
-
-    private boolean isResponseValid(HttpResponse response) {
-        if (response == null || response.getEntity() == null) {
-            MoPubLog.d("MoPub server returned null response.");
-            mFetchStatus = AdFetcher.FetchStatus.INVALID_SERVER_RESPONSE_NOBACKOFF;
-            return false;
-        }
-
-        final int statusCode = response.getStatusLine().getStatusCode();
-
-        // Client and Server HTTP errors should result in an exponential backoff
-        if (statusCode >= 400) {
-            MoPubLog.d("Server error: returned HTTP status code " + Integer.toString(statusCode) +
-                    ". Please try again.");
-            mFetchStatus = AdFetcher.FetchStatus.INVALID_SERVER_RESPONSE_BACKOFF;
-            return false;
-        }
-        // Other non-200 HTTP status codes should still fail
-        else if (statusCode != HttpStatus.SC_OK) {
-            MoPubLog.d("MoPub server returned invalid response: HTTP status code " +
-                    Integer.toString(statusCode) + ".");
-            mFetchStatus = AdFetcher.FetchStatus.INVALID_SERVER_RESPONSE_NOBACKOFF;
-            return false;
-        }
-        return true;
-    }
-
-    private boolean isStateValid() {
-        // We check to see if this AsyncTask was cancelled, as per
-        // http://developer.android.com/reference/android/os/AsyncTask.html
-        if (isCancelled()) {
-            mFetchStatus = AdFetcher.FetchStatus.FETCH_CANCELLED;
-            return false;
-        }
-
-        if (mAdViewController == null || mAdViewController.isDestroyed()) {
-            MoPubLog.d("Error loading ad: AdViewController has already been GCed or destroyed.");
-            return false;
-        }
-        return true;
-    }
-
-    @Override
-    protected void onPostExecute(AdLoadTask adLoadTask) {
-        if (!isMostCurrentTask()) {
-            MoPubLog.d("Ad response is stale.");
-            cleanup();
-            return;
-        }
-
-        // If cleanup() has already been called on the AdViewController, don't proceed.
-        if (mAdViewController == null || mAdViewController.isDestroyed()) {
-            if (adLoadTask != null) {
-                adLoadTask.cleanup();
-            }
-            mTaskTracker.markTaskCompleted(mTaskId);
-            cleanup();
-            return;
-        }
-
-        if (adLoadTask == null) {
-            if (mException != null) {
-                MoPubLog.d("Exception caught while loading ad: " + mException);
-            }
-
-            MoPubErrorCode errorCode;
-            switch (mFetchStatus) {
-                case NOT_SET:
-                    errorCode = MoPubErrorCode.UNSPECIFIED;
-                    break;
-                case FETCH_CANCELLED:
-                    errorCode = MoPubErrorCode.CANCELLED;
-                    break;
-                case INVALID_SERVER_RESPONSE_BACKOFF:
-                case INVALID_SERVER_RESPONSE_NOBACKOFF:
-                    errorCode = MoPubErrorCode.SERVER_ERROR;
-                    break;
-                case CLEAR_AD_TYPE:
-                case AD_WARMING_UP:
-                    errorCode = MoPubErrorCode.NO_FILL;
-                    break;
-                default:
-                    errorCode = MoPubErrorCode.UNSPECIFIED;
-                    break;
-            }
-
-            mAdViewController.adDidFail(errorCode);
-
-            /*
-             * There are numerous reasons for the ad fetch to fail, but only in the specific
-             * case of actual server failure should we exponentially back off.
-             *
-             * Note: We place the exponential backoff after AdViewController's adDidFail because we only
-             * want to increase refresh times after the first failure refresh timer is
-             * scheduled, and not before.
-             */
-            if (mFetchStatus == AdFetcher.FetchStatus.INVALID_SERVER_RESPONSE_BACKOFF) {
-                exponentialBackoff();
-                mFetchStatus = AdFetcher.FetchStatus.NOT_SET;
-            }
-        } else {
-            adLoadTask.execute();
-            adLoadTask.cleanup();
-        }
-
-        mTaskTracker.markTaskCompleted(mTaskId);
-        cleanup();
-    }
-
-    @Override
-    protected void onCancelled() {
-        if (!isMostCurrentTask()) {
-            MoPubLog.d("Ad response is stale.");
-            cleanup();
-            return;
-        }
-
-        MoPubLog.d("Ad loading was cancelled.");
-        if (mException != null) {
-            MoPubLog.d("Exception caught while loading ad: " + mException);
-        }
-        mTaskTracker.markTaskCompleted(mTaskId);
-        cleanup();
-    }
-
-    /* This helper function is called when a 4XX or 5XX error is received during an ad fetch.
-     * It exponentially increases the parent AdViewController's refreshTime up to a specified cap.
-     */
-    private void exponentialBackoff() {
-        if (mAdViewController == null) {
-            return;
-        }
-
-        int refreshTimeMilliseconds = mAdViewController.getRefreshTimeMilliseconds();
-
-        refreshTimeMilliseconds = (int) (refreshTimeMilliseconds * EXPONENTIAL_BACKOFF_FACTOR);
-        if (refreshTimeMilliseconds > MAXIMUM_REFRESH_TIME_MILLISECONDS) {
-            refreshTimeMilliseconds = MAXIMUM_REFRESH_TIME_MILLISECONDS;
-        }
-
-        mAdViewController.setRefreshTimeMilliseconds(refreshTimeMilliseconds);
-    }
-
-    private void cleanup() {
-        mTaskTracker = null;
-        mException = null;
-        mFetchStatus = AdFetcher.FetchStatus.NOT_SET;
-    }
-
-    private void shutdownHttpClient() {
-        if (mHttpClient != null) {
-            ClientConnectionManager manager = mHttpClient.getConnectionManager();
-            if (manager != null) {
-                manager.shutdown();
-            }
-            mHttpClient = null;
-        }
-    }
-
-    private boolean isMostCurrentTask() {
-        // if we've been cleaned up already, then we're definitely not the current task
-        return (mTaskTracker == null) ? false : mTaskTracker.isMostCurrentTask(mTaskId);
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetcher.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetcher.java
deleted file mode 100644
index 79486a06..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetcher.java
+++ /dev/null
@@ -1,82 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.AsyncTasks;
-import com.mopub.mobileads.factories.AdFetchTaskFactory;
-
-/*
- * AdFetcher is a delegate of an AdViewController that handles loading ad data over a
- * network connection. The ad is fetched in a background thread by executing
- * AdFetchTask, which is an AsyncTask subclass. This class gracefully handles
- * the changes to AsyncTask in Android 4.0.1 (we continue to run parallel to
- * the app developer's background tasks). Further, AdFetcher keeps track of
- * the last completed task to prevent out-of-order execution.
- */
-public class AdFetcher {
-    public static final String HTML_RESPONSE_BODY_KEY = "Html-Response-Body";
-    public static final String REDIRECT_URL_KEY = "Redirect-Url";
-    public static final String CLICKTHROUGH_URL_KEY = "Clickthrough-Url";
-    public static final String SCROLLABLE_KEY = "Scrollable";
-    public static final String AD_CONFIGURATION_KEY = "Ad-Configuration";
-
-    private int mTimeoutMilliseconds = 10000;
-    private AdViewController mAdViewController;
-
-    private AdFetchTask mCurrentTask;
-    private String mUserAgent;
-    private final TaskTracker mTaskTracker;
-
-    enum FetchStatus {
-        NOT_SET,
-        FETCH_CANCELLED,
-        INVALID_SERVER_RESPONSE_BACKOFF,
-        INVALID_SERVER_RESPONSE_NOBACKOFF,
-        CLEAR_AD_TYPE,
-        AD_WARMING_UP;
-    }
-
-    public AdFetcher(AdViewController adview, String userAgent) {
-        mAdViewController = adview;
-        mUserAgent = userAgent;
-        mTaskTracker = new TaskTracker();
-    }
-
-    public void fetchAdForUrl(String url) {
-        mTaskTracker.newTaskStarted();
-        MoPubLog.i("Fetching ad for task #" + getCurrentTaskId());
-
-        if (mCurrentTask != null) {
-            mCurrentTask.cancel(true);
-        }
-
-        mCurrentTask = AdFetchTaskFactory.create(mTaskTracker, mAdViewController, mUserAgent, mTimeoutMilliseconds);
-
-        try {
-            AsyncTasks.safeExecuteOnExecutor(mCurrentTask, url);
-        } catch (Exception exception) {
-            MoPubLog.d("Error executing AdFetchTask", exception);
-        }
-    }
-
-    public void cancelFetch() {
-        if (mCurrentTask != null) {
-            MoPubLog.i("Canceling fetch ad for task #" + getCurrentTaskId());
-            mCurrentTask.cancel(true);
-        }
-    }
-
-    void cleanup() {
-        cancelFetch();
-
-        mAdViewController = null;
-        mUserAgent = "";
-    }
-
-    protected void setTimeout(int milliseconds) {
-        mTimeoutMilliseconds = milliseconds;
-    }
-
-    private long getCurrentTaskId() {
-        return mTaskTracker.getCurrentTaskId();
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoadTask.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoadTask.java
deleted file mode 100644
index cb379e71..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoadTask.java
+++ /dev/null
@@ -1,240 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.net.Uri;
-
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.Json;
-import com.mopub.common.util.Strings;
-import org.apache.http.Header;
-import org.apache.http.HttpEntity;
-import org.apache.http.HttpResponse;
-
-import java.io.*;
-import java.lang.ref.WeakReference;
-import java.lang.reflect.Method;
-import java.util.*;
-
-import static com.mopub.common.util.ResponseHeader.AD_TYPE;
-import static com.mopub.common.util.ResponseHeader.CLICKTHROUGH_URL;
-import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_DATA;
-import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_NAME;
-import static com.mopub.common.util.ResponseHeader.CUSTOM_SELECTOR;
-import static com.mopub.common.util.ResponseHeader.FULL_AD_TYPE;
-import static com.mopub.common.util.ResponseHeader.NATIVE_PARAMS;
-import static com.mopub.common.util.ResponseHeader.REDIRECT_URL;
-import static com.mopub.common.util.ResponseHeader.SCROLLABLE;
-import static com.mopub.mobileads.AdFetcher.CLICKTHROUGH_URL_KEY;
-import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.AdFetcher.REDIRECT_URL_KEY;
-import static com.mopub.mobileads.AdFetcher.SCROLLABLE_KEY;
-import static com.mopub.mobileads.util.HttpResponses.extractBooleanHeader;
-import static com.mopub.mobileads.util.HttpResponses.extractHeader;
-
-abstract class AdLoadTask {
-    WeakReference<AdViewController> mWeakAdViewController;
-    AdLoadTask(AdViewController adViewController) {
-        mWeakAdViewController = new WeakReference<AdViewController>(adViewController);
-    }
-
-    abstract void execute();
-
-    /*
-     * The AsyncTask thread pool often appears to keep references to these
-     * objects, preventing GC. This method should be used to release
-     * resources to mitigate the GC issue.
-     */
-    abstract void cleanup();
-
-    static AdLoadTask fromHttpResponse(HttpResponse response, AdViewController adViewController) throws IOException {
-        return new TaskExtractor(response, adViewController).extract();
-    }
-
-    private static class TaskExtractor {
-        private final HttpResponse response;
-        private final AdViewController adViewController;
-        private String adType;
-        private String adTypeCustomEventName;
-        private String fullAdType;
-
-        TaskExtractor(HttpResponse response, AdViewController adViewController){
-            this.response = response;
-            this.adViewController = adViewController;
-        }
-
-        AdLoadTask extract() throws IOException {
-            adType = extractHeader(response, AD_TYPE);
-            fullAdType = extractHeader(response, FULL_AD_TYPE);
-
-            MoPubLog.d("Loading ad type: " + AdTypeTranslator.getAdNetworkType(adType, fullAdType));
-
-            adTypeCustomEventName = AdTypeTranslator.getCustomEventNameForAdType(
-                    adViewController.getMoPubView(), adType, fullAdType);
-
-            if ("custom".equals(adType)) {
-                return extractCustomEventAdLoadTask();
-            } else if (eventDataIsInResponseBody(adType)) {
-                return extractCustomEventAdLoadTaskFromResponseBody();
-            } else {
-                return extractCustomEventAdLoadTaskFromNativeParams();
-            }
-        }
-
-        private AdLoadTask extractCustomEventAdLoadTask() {
-            MoPubLog.i("Performing custom event.");
-
-            // If applicable, try to invoke the new custom event system (which uses custom classes)
-            adTypeCustomEventName = extractHeader(response, CUSTOM_EVENT_NAME);
-            if (adTypeCustomEventName != null) {
-                String customEventData = extractHeader(response, CUSTOM_EVENT_DATA);
-                return createCustomEventAdLoadTask(customEventData);
-            }
-
-            // Otherwise, use the (deprecated) legacy custom event system for older clients
-            Header oldCustomEventHeader = response.getFirstHeader(CUSTOM_SELECTOR.getKey());
-            return new AdLoadTask.LegacyCustomEventAdLoadTask(adViewController, oldCustomEventHeader);
-        }
-
-        private AdLoadTask extractCustomEventAdLoadTaskFromResponseBody() throws IOException {
-            HttpEntity entity = response.getEntity();
-            String htmlData = entity != null ? Strings.fromStream(entity.getContent()) : "";
-
-            adViewController.getAdConfiguration().setResponseString(htmlData);
-
-            String redirectUrl = extractHeader(response, REDIRECT_URL);
-            String clickthroughUrl = extractHeader(response, CLICKTHROUGH_URL);
-            boolean scrollingEnabled = extractBooleanHeader(response, SCROLLABLE, false);
-
-            Map<String, String> eventDataMap = new HashMap<String, String>();
-            eventDataMap.put(HTML_RESPONSE_BODY_KEY, Uri.encode(htmlData));
-            eventDataMap.put(SCROLLABLE_KEY, Boolean.toString(scrollingEnabled));
-            if (redirectUrl != null) {
-                eventDataMap.put(REDIRECT_URL_KEY, redirectUrl);
-            }
-            if (clickthroughUrl != null) {
-                eventDataMap.put(CLICKTHROUGH_URL_KEY, clickthroughUrl);
-            }
-
-            String eventData = Json.mapToJsonString(eventDataMap);
-            return createCustomEventAdLoadTask(eventData);
-        }
-
-        private AdLoadTask extractCustomEventAdLoadTaskFromNativeParams() throws IOException {
-            String eventData = extractHeader(response, NATIVE_PARAMS);
-
-            return createCustomEventAdLoadTask(eventData);
-        }
-
-        private AdLoadTask createCustomEventAdLoadTask(String customEventData) {
-            Map<String, String> paramsMap = new HashMap<String, String>();
-            paramsMap.put(CUSTOM_EVENT_NAME.getKey(), adTypeCustomEventName);
-
-            if (customEventData != null) {
-                paramsMap.put(CUSTOM_EVENT_DATA.getKey(), customEventData);
-            }
-
-            return new AdLoadTask.CustomEventAdLoadTask(adViewController, paramsMap);
-        }
-
-        private boolean eventDataIsInResponseBody(String adType) {
-            // XXX Hack
-            return "mraid".equals(adType) || "html".equals(adType) || ("interstitial".equals(adType) && "vast".equals(fullAdType));
-        }
-    }
-
-    /*
-     * This is the new way of performing Custom Events. This will be invoked on new clients when
-     * X-Adtype is "custom" and the X-Custom-Event-Class-Name header is specified.
-     */
-    static class CustomEventAdLoadTask extends AdLoadTask {
-        private Map<String,String> mParamsMap;
-
-        public CustomEventAdLoadTask(AdViewController adViewController, Map<String, String> paramsMap) {
-            super(adViewController);
-            mParamsMap = paramsMap;
-        }
-
-        @Override
-        void execute() {
-            AdViewController adViewController = mWeakAdViewController.get();
-
-            if (adViewController == null || adViewController.isDestroyed()) {
-                return;
-            }
-
-            adViewController.setNotLoading();
-            adViewController.getMoPubView().loadCustomEvent(mParamsMap);
-        }
-
-        @Override
-        void cleanup() {
-            mParamsMap = null;
-        }
-
-        @Deprecated // for testing
-        Map<String, String> getParamsMap() {
-            return mParamsMap;
-        }
-    }
-
-    /*
-     * This is the old way of performing Custom Events, and is now deprecated. This will still be
-     * invoked on old clients when X-Adtype is "custom" and the new X-Custom-Event-Class-Name header
-     * is not specified (legacy custom events parse the X-Customselector header instead).
-     */
-    @Deprecated
-    static class LegacyCustomEventAdLoadTask extends AdLoadTask {
-        private Header mHeader;
-
-        public LegacyCustomEventAdLoadTask(AdViewController adViewController, Header header) {
-            super(adViewController);
-            mHeader = header;
-        }
-
-        @Override
-        void execute() {
-            AdViewController adViewController = mWeakAdViewController.get();
-            if (adViewController == null || adViewController.isDestroyed()) {
-                return;
-            }
-
-            adViewController.setNotLoading();
-            MoPubView mpv = adViewController.getMoPubView();
-
-            if (mHeader == null) {
-                MoPubLog.i("Couldn't call custom method because the server did not specify one.");
-                mpv.loadFailUrl(MoPubErrorCode.ADAPTER_NOT_FOUND);
-                return;
-            }
-
-            String methodName = mHeader.getValue();
-            MoPubLog.i("Trying to call method named " + methodName);
-
-            Class<? extends Activity> c;
-            Method method;
-            Activity userActivity = mpv.getActivity();
-            try {
-                c = userActivity.getClass();
-                method = c.getMethod(methodName, MoPubView.class);
-                method.invoke(userActivity, mpv);
-            } catch (NoSuchMethodException e) {
-                MoPubLog.d("Couldn't perform custom method named " + methodName +
-                        "(MoPubView view) because your activity class has no such method");
-                mpv.loadFailUrl(MoPubErrorCode.ADAPTER_NOT_FOUND);
-            } catch (Exception e) {
-                MoPubLog.d("Couldn't perform custom method named " + methodName);
-                mpv.loadFailUrl(MoPubErrorCode.ADAPTER_NOT_FOUND);
-            }
-        }
-
-        @Override
-        void cleanup() {
-            mHeader = null;
-        }
-
-        @Deprecated // for testing
-        Header getHeader() {
-            return mHeader;
-        }
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubBrowserController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubBrowserController.java
deleted file mode 100644
index ff9a8f49..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubBrowserController.java
+++ /dev/null
@@ -1,54 +0,0 @@
-package com.mopub.mobileads;
-
-
-import android.content.Context;
-import android.content.Intent;
-import android.net.Uri;
-import android.util.Log;
-import com.mopub.common.MoPubBrowser;
-import com.mopub.common.util.IntentUtils;
-import com.mopub.mobileads.util.Utils;
-
-class MoPubBrowserController extends MraidAbstractController {
-    private static final String LOGTAG = "MoPubBrowserController";
-    private Context mContext;
-
-    MoPubBrowserController(MraidView view) {
-        super(view);
-        mContext = view.getContext();
-    }
-    
-    protected void open(String url) {
-        Log.d(LOGTAG, "Opening url: " + url);
-        
-        final MraidView mraidView = getMraidView();
-        if (mraidView.getMraidListener() != null) {
-            mraidView.getMraidListener().onOpen(mraidView);
-        }
-
-        // this is added because http/s can also be intercepted
-        if (!isWebSiteUrl(url) && IntentUtils.canHandleApplicationUrl(mContext, url)) {
-            launchApplicationUrl(url);
-            return;
-        }
-
-        Intent i = new Intent(mContext, MoPubBrowser.class);
-        i.putExtra(MoPubBrowser.DESTINATION_URL_KEY, url);
-        i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        mContext.startActivity(i);
-    }
-
-
-    private boolean launchApplicationUrl(String url) {
-        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
-        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-
-        String errorMessage = "Unable to open intent.";
-
-        return Utils.executeIntent(getMraidView().getContext(), intent, errorMessage);
-    }
-
-    private boolean isWebSiteUrl(String url) {
-        return url.startsWith("http://") || url.startsWith("https://");
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidAbstractController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidAbstractController.java
deleted file mode 100644
index 7f56c51f..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidAbstractController.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package com.mopub.mobileads;
-
-
-class MraidAbstractController {
-    private final MraidView mMraidView;
-
-    MraidAbstractController(MraidView view) {
-        super();
-        mMraidView = view;
-    }
-    
-    public MraidView getMraidView() {
-        return mMraidView;
-    }
-}
\ No newline at end of file
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidBanner.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidBanner.java
deleted file mode 100644
index f79a337b..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidBanner.java
+++ /dev/null
@@ -1,96 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.net.Uri;
-
-import com.mopub.mobileads.MraidView.ViewState;
-import com.mopub.mobileads.factories.MraidViewFactory;
-
-import java.util.Map;
-
-import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.MoPubErrorCode.MRAID_LOAD_ERROR;
-import static com.mopub.mobileads.MraidView.MraidListener;
-
-class MraidBanner extends CustomEventBanner {
-    private MraidView mMraidView;
-    private CustomEventBannerListener mBannerListener;
-
-    @Override
-    protected void loadBanner(Context context,
-                    CustomEventBannerListener customEventBannerListener,
-                    Map<String, Object> localExtras,
-                    Map<String, String> serverExtras) {
-        mBannerListener = customEventBannerListener;
-
-        String htmlData;
-        if (extrasAreValid(serverExtras)) {
-            htmlData = Uri.decode(serverExtras.get(HTML_RESPONSE_BODY_KEY));
-        } else {
-            mBannerListener.onBannerFailed(MRAID_LOAD_ERROR);
-            return;
-        }
-
-        AdConfiguration adConfiguration = AdConfiguration.extractFromMap(localExtras);
-        mMraidView = MraidViewFactory.create(context, adConfiguration);
-        mMraidView.loadHtmlData(htmlData);
-        initMraidListener();
-    }
-
-    @Override
-    protected void onInvalidate() {
-        if (mMraidView != null) {
-            resetMraidListener();
-            mMraidView.destroy();
-        }
-    }
-
-    private void onReady() {
-        mBannerListener.onBannerLoaded(mMraidView);
-    }
-
-    private void onFail() {
-        mBannerListener.onBannerFailed(MRAID_LOAD_ERROR);
-    }
-
-    private void onExpand() {
-        mBannerListener.onBannerExpanded();
-        mBannerListener.onBannerClicked();
-    }
-
-    private void onOpen() {
-        mBannerListener.onBannerClicked();
-    }
-
-    private void onClose() {
-        mBannerListener.onBannerCollapsed();
-    }
-
-    private boolean extrasAreValid(Map<String, String> serverExtras) {
-        return serverExtras.containsKey(HTML_RESPONSE_BODY_KEY);
-    }
-
-    private void initMraidListener() {
-        mMraidView.setMraidListener(new MraidListener() {
-            public void onReady(MraidView view) {
-                MraidBanner.this.onReady();
-            }
-            public void onFailure(MraidView view) {
-                onFail();
-            }
-            public void onExpand(MraidView view) {
-                MraidBanner.this.onExpand();
-            }
-            public void onOpen(MraidView view) {
-                MraidBanner.this.onOpen();
-            }
-            public void onClose(MraidView view, ViewState newViewState) {
-                MraidBanner.this.onClose();
-            }
-        });
-    }
-
-    private void resetMraidListener() {
-        mMraidView.setMraidListener(null);
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidCommand.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidCommand.java
deleted file mode 100644
index c6e64d64..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidCommand.java
+++ /dev/null
@@ -1,288 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.common.logging.MoPubLog;
-
-import java.util.Map;
-
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.GET_RESIZE_PROPERTIES;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.OPEN;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.PLAY_VIDEO;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.RESIZE;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.SET_RESIZE_PROPERTIES;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.STORE_PICTURE;
-import static com.mopub.mobileads.MraidView.PlacementType;
-
-abstract class MraidCommand {
-    protected static final String URI_KEY = "uri";
-    protected Map<String, String> mParams;
-    protected MraidView mView;
-
-    MraidCommand(Map<String, String> params, MraidView view) {
-        mParams = params;
-        mView = view;
-    }
-    
-    abstract void execute();
-    
-    protected int getIntFromParamsForKey(String key) {
-        String s = mParams.get(key);
-        if (s == null) return -1;
-        else {
-            try {
-                return Integer.parseInt(s, 10);
-            } catch (NumberFormatException e) {
-                return -1;
-            }
-        }
-    }
-    
-    protected String getStringFromParamsForKey(String key) {
-        return mParams.get(key);
-    }
-    
-    protected float getFloatFromParamsForKey(String key) {
-        String s = mParams.get(key);
-        if (s == null) return 0.0f;
-        else {
-            try {
-                return Float.parseFloat(key);
-            } catch (NumberFormatException e) {
-                return 0.0f;
-            }
-        }
-    }
-    
-    protected boolean getBooleanFromParamsForKey(String key) {
-        return "true".equals(mParams.get(key));
-    }
-
-    protected boolean isCommandDependentOnUserClick(PlacementType placementType) {
-        return false;
-    }
-}
-
-class MraidCommandPlayVideo extends MraidCommand {
-    public MraidCommandPlayVideo(Map<String,String> params, MraidView view) {
-        super(params, view);
-    }
-
-    @Override
-    void execute() {
-        String url = getStringFromParamsForKey(URI_KEY);
-        if (url != null && !url.equals("")){
-            mView.getDisplayController().showVideo(url);
-        } else {
-            mView.fireErrorEvent(PLAY_VIDEO, "Video can't be played with null or empty URL");
-        }
-    }
-
-    @Override
-    protected boolean isCommandDependentOnUserClick(PlacementType placementType) {
-        switch (placementType) {
-            case INLINE:
-                return true;
-            case INTERSTITIAL:
-                return false;
-            default:
-                return super.isCommandDependentOnUserClick(placementType);
-        }
-    }
-}
-
-class MraidCommandStorePicture extends MraidCommand {
-    public static final String MIME_TYPE_HEADER = "Content-Type";
-
-    public MraidCommandStorePicture(Map<String,String> params, MraidView view) {
-        super(params, view);
-    }
-
-    @Override
-    void execute() {
-        String url = getStringFromParamsForKey(URI_KEY);
-
-        if (url != null && !url.equals("")) {
-            mView.getDisplayController().showUserDownloadImageAlert(url);
-        } else {
-            mView.fireErrorEvent(STORE_PICTURE, "Image can't be stored with null or empty URL");
-            MoPubLog.d("Invalid URI for Mraid Store Picture.");
-        }
-    }
-
-    @Override
-    protected boolean isCommandDependentOnUserClick(PlacementType placementType) {
-        return true;
-    }
-}
-
-class MraidCommandClose extends MraidCommand {
-    MraidCommandClose(Map<String, String> params, MraidView view) {
-        super(params, view);
-    }
-
-    @Override
-    void execute() {
-        mView.getDisplayController().close();
-    }
-}
-
-class MraidCommandExpand extends MraidCommand {
-    MraidCommandExpand(Map<String, String> params, MraidView view) {
-        super(params, view);
-    }
-
-    @Override
-    void execute() {
-        int width = getIntFromParamsForKey("w");
-        int height = getIntFromParamsForKey("h");
-        String url = getStringFromParamsForKey("url");
-        boolean shouldUseCustomClose = getBooleanFromParamsForKey("shouldUseCustomClose");
-        boolean shouldLockOrientation = getBooleanFromParamsForKey("lockOrientation");
-        
-        if (width <= 0) width = mView.getDisplayController().mScreenWidth;
-        if (height <= 0) height = mView.getDisplayController().mScreenHeight;
-        
-        mView.getDisplayController().expand(url, width, height, shouldUseCustomClose,
-                shouldLockOrientation);
-    }
-
-    @Override
-    protected boolean isCommandDependentOnUserClick(PlacementType placementType) {
-        switch (placementType) {
-            case INLINE:
-                return true;
-            case INTERSTITIAL:
-                return false;
-            default:
-                return super.isCommandDependentOnUserClick(placementType);
-        }
-    }
-}
-
-class MraidCommandUseCustomClose extends MraidCommand {
-    MraidCommandUseCustomClose(Map<String, String> params, MraidView view) {
-        super(params, view);
-    }
-
-    @Override
-    void execute() {
-        boolean shouldUseCustomClose = getBooleanFromParamsForKey("shouldUseCustomClose");
-        mView.getDisplayController().useCustomClose(shouldUseCustomClose);
-    }
-}
-
-class MraidCommandOpen extends MraidCommand {
-    MraidCommandOpen(Map<String, String> params, MraidView view) {
-        super(params, view);
-    }
-
-    @Override
-    void execute() {
-        String url = getStringFromParamsForKey("url");
-        if (url == null) {
-            mView.fireErrorEvent(OPEN, "Url can not be null.");
-            return;
-        }
-        mView.getBrowserController().open(url);
-    }
-
-    @Override
-    protected boolean isCommandDependentOnUserClick(PlacementType placementType) {
-        return true;
-    }
-}
-
-//As of version 1.15, we've decided to stub the resize command. However, this should be implemented in future versions
-class MraidCommandResize extends MraidCommand {
-    MraidCommandResize(Map<String, String> params, MraidView view) {
-        super(params, view);
-    }
-
-    @Override
-    void execute() {
-        mView.fireErrorEvent(RESIZE, "Unsupported action resize.");
-    }
-}
-
-class MraidCommandGetResizeProperties extends MraidCommand {
-    MraidCommandGetResizeProperties(Map<String, String> params, MraidView view) {
-        super(params, view);
-    }
-
-    @Override
-    void execute() {
-        mView.fireErrorEvent(GET_RESIZE_PROPERTIES, "Unsupported action getResizeProperties.");
-    }
-}
-
-class MraidCommandSetResizeProperties extends MraidCommand {
-    MraidCommandSetResizeProperties(Map<String, String> params, MraidView view) {
-        super(params, view);
-    }
-
-    @Override
-    void execute() {
-        mView.fireErrorEvent(SET_RESIZE_PROPERTIES, "Unsupported action setResizeProperties.");
-    }
-}
-
-class MraidCommandGetCurrentPosition extends MraidCommand {
-    MraidCommandGetCurrentPosition(Map<String, String> params, MraidView view) {
-        super(params, view);
-    }
-
-    @Override
-    void execute() {
-        mView.getDisplayController().getCurrentPosition();
-    }
-}
-
-
-class MraidCommandGetDefaultPosition extends MraidCommand {
-    MraidCommandGetDefaultPosition(Map<String, String> params, MraidView view) {
-        super(params, view);
-    }
-
-    @Override
-    void execute() {
-        mView.getDisplayController().getDefaultPosition();
-    }
-}
-
-class MraidCommandGetMaxSize extends MraidCommand {
-    MraidCommandGetMaxSize(Map<String, String> params, MraidView view) {
-        super(params, view);
-    }
-
-    @Override
-    void execute() {
-        mView.getDisplayController().getMaxSize();
-    }
-}
-
-class MraidCommandGetScreenSize extends MraidCommand {
-    MraidCommandGetScreenSize(Map<String, String> params, MraidView view) {
-        super(params, view);
-    }
-
-    @Override
-    void execute() {
-        mView.getDisplayController().getScreenSize();
-    }
-}
-
-class MraidCommandCreateCalendarEvent extends MraidCommand {
-    MraidCommandCreateCalendarEvent(Map<String, String> params, MraidView view) {
-        super(params, view);
-    }
-
-    @Override
-    void execute() {
-        mView.getDisplayController().createCalendarEvent(mParams);
-    }
-
-    @Override
-    protected boolean isCommandDependentOnUserClick(PlacementType placementType) {
-        return true;
-    }
-}
-
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidCommandFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidCommandFactory.java
deleted file mode 100644
index 4145b710..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidCommandFactory.java
+++ /dev/null
@@ -1,93 +0,0 @@
-package com.mopub.mobileads;
-
-import java.util.Map;
-
-class MraidCommandFactory {
-    protected static MraidCommandFactory instance = new MraidCommandFactory();
-
-    enum MraidJavascriptCommand {
-        CLOSE("close"),
-        EXPAND("expand"),
-        USECUSTOMCLOSE("usecustomclose"),
-        OPEN("open"),
-        RESIZE("resize"),
-        GET_RESIZE_PROPERTIES("getResizeProperties"),
-        SET_RESIZE_PROPERTIES("setResizeProperties"),
-        PLAY_VIDEO("playVideo"),
-        STORE_PICTURE("storePicture"),
-        GET_CURRENT_POSITION("getCurrentPosition"),
-        GET_DEFAULT_POSITION("getDefaultPosition"),
-        GET_MAX_SIZE("getMaxSize"),
-        GET_SCREEN_SIZE("getScreenSize"),
-        CREATE_CALENDAR_EVENT("createCalendarEvent"),
-        UNSPECIFIED("");
-
-        private String mCommand;
-
-        private MraidJavascriptCommand(String command) {
-            mCommand = command;
-        }
-
-        private static MraidJavascriptCommand fromString(String string) {
-            for (MraidJavascriptCommand command : MraidJavascriptCommand.values()) {
-                if (command.mCommand.equals(string)) {
-                    return command;
-                }
-            }
-
-            return UNSPECIFIED;
-        }
-
-        String getCommand() {
-            return mCommand;
-        }
-    }
-
-    @Deprecated // for testing
-    public static void setInstance(MraidCommandFactory factory) {
-        instance = factory;
-    }
-
-    public static MraidCommand create(String command, Map<String, String> params, MraidView view) {
-        return instance.internalCreate(command, params, view);
-    }
-
-    protected MraidCommand internalCreate(String command, Map<String, String> params, MraidView view) {
-        MraidJavascriptCommand mraidJavascriptCommand = MraidJavascriptCommand.fromString(command);
-
-        switch (mraidJavascriptCommand) {
-            case CLOSE:
-                return new MraidCommandClose(params, view);
-            case EXPAND:
-                return new MraidCommandExpand(params, view);
-            case USECUSTOMCLOSE:
-                return new MraidCommandUseCustomClose(params, view);
-            case OPEN:
-                return new MraidCommandOpen(params, view);
-            case RESIZE:
-                return new MraidCommandResize(params, view);
-            case GET_RESIZE_PROPERTIES:
-                return new MraidCommandGetResizeProperties(params, view);
-            case SET_RESIZE_PROPERTIES:
-                return new MraidCommandSetResizeProperties(params, view);
-            case PLAY_VIDEO:
-                return new MraidCommandPlayVideo(params, view);
-            case STORE_PICTURE:
-                return new MraidCommandStorePicture(params, view);
-            case GET_CURRENT_POSITION:
-                return new MraidCommandGetCurrentPosition(params, view);
-            case GET_DEFAULT_POSITION:
-                return new MraidCommandGetDefaultPosition(params, view);
-            case GET_MAX_SIZE:
-                return new MraidCommandGetMaxSize(params, view);
-            case GET_SCREEN_SIZE:
-                return new MraidCommandGetScreenSize(params, view);
-            case CREATE_CALENDAR_EVENT:
-                return new MraidCommandCreateCalendarEvent(params, view);
-            case UNSPECIFIED:
-                return null;
-            default:
-                return null;
-        }
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java
deleted file mode 100644
index 8c1ac81a..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java
+++ /dev/null
@@ -1,867 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.content.ActivityNotFoundException;
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.content.pm.ActivityInfo;
-import android.graphics.Rect;
-import android.graphics.drawable.StateListDrawable;
-import android.media.MediaScannerConnection;
-import android.net.Uri;
-import android.os.Environment;
-import android.os.Handler;
-import android.provider.CalendarContract;
-import android.util.DisplayMetrics;
-import android.util.Log;
-import android.view.Gravity;
-import android.view.MotionEvent;
-import android.view.View;
-import android.view.View.OnClickListener;
-import android.view.View.OnTouchListener;
-import android.view.ViewGroup;
-import android.view.Window;
-import android.view.WindowManager;
-import android.webkit.URLUtil;
-import android.widget.FrameLayout;
-import android.widget.ImageButton;
-import android.widget.ImageView;
-import android.widget.RelativeLayout;
-import android.widget.Toast;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.Dips;
-import com.mopub.common.util.Streams;
-import com.mopub.mobileads.MraidView.ExpansionStyle;
-import com.mopub.mobileads.MraidView.NativeCloseButtonStyle;
-import com.mopub.mobileads.MraidView.PlacementType;
-import com.mopub.mobileads.MraidView.ViewState;
-import com.mopub.mobileads.factories.HttpClientFactory;
-import com.mopub.mobileads.util.HttpResponses;
-import com.mopub.mobileads.util.Interstitials;
-import com.mopub.mobileads.util.Mraids;
-import org.apache.http.Header;
-import org.apache.http.HttpResponse;
-import org.apache.http.client.HttpClient;
-import org.apache.http.client.methods.HttpGet;
-
-import java.io.*;
-import java.net.URI;
-import java.text.ParseException;
-import java.text.SimpleDateFormat;
-import java.util.*;
-
-import static android.graphics.Color.TRANSPARENT;
-import static com.mopub.common.util.Drawables.INTERSTITIAL_CLOSE_BUTTON_NORMAL;
-import static com.mopub.common.util.Drawables.INTERSTITIAL_CLOSE_BUTTON_PRESSED;
-import static com.mopub.common.util.ResponseHeader.LOCATION;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.CREATE_CALENDAR_EVENT;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.EXPAND;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.GET_CURRENT_POSITION;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.GET_DEFAULT_POSITION;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.GET_MAX_SIZE;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.GET_SCREEN_SIZE;
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.STORE_PICTURE;
-import static com.mopub.mobileads.MraidCommandStorePicture.MIME_TYPE_HEADER;
-import static com.mopub.mobileads.MraidView.BaseMraidListener;
-import static com.mopub.mobileads.util.Mraids.ANDROID_CALENDAR_CONTENT_TYPE;
-import static com.mopub.mobileads.util.Mraids.isCalendarAvailable;
-import static com.mopub.mobileads.util.Mraids.isInlineVideoAvailable;
-import static com.mopub.mobileads.util.Mraids.isSmsAvailable;
-import static com.mopub.mobileads.util.Mraids.isStorePictureSupported;
-import static com.mopub.mobileads.util.Mraids.isTelAvailable;
-
-class MraidDisplayController extends MraidAbstractController {
-    private static final String LOGTAG = "MraidDisplayController";
-    private static final long VIEWABILITY_TIMER_MILLIS = 3000;
-    private static final int CLOSE_BUTTON_SIZE_DP = 50;
-    private static final String[] DATE_FORMATS = {
-            "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
-            "yyyy-MM-dd'T'HH:mmZZZZZ"
-    };
-    private static final int MAX_NUMBER_DAYS_IN_MONTH = 31;
-
-    // The view's current state.
-    private ViewState mViewState = ViewState.HIDDEN;
-
-    // Tracks whether this controller's view responds to expand() calls.
-    private final ExpansionStyle mExpansionStyle;
-
-    // Tracks how this controller's view should display its native close button.
-    private final NativeCloseButtonStyle mNativeCloseButtonStyle;
-
-    // Separate instance of MraidView, for displaying "two-part" creatives via the expand(URL) API.
-    private MraidView mTwoPartExpansionView;
-
-    // A reference to the root view.
-    private FrameLayout mRootView;
-
-    // Handler for scheduling viewability checks.
-    private Handler mHandler = new Handler();
-
-    // Stores the requested orientation for the Activity to which this controller's view belongs.
-    // This is needed to restore the Activity's requested orientation in the event that the view
-    // itself requires an orientation lock.
-    private final int mOriginalRequestedOrientation;
-
-    private OrientationBroadcastReceiver mOrientationBroadcastReceiver = new OrientationBroadcastReceiver();
-
-    // Native close button, used for expanded content.
-    private ImageView mCloseButton;
-
-    // Tracks whether expanded content provides its own, non-native close button.
-    private boolean mAdWantsCustomCloseButton;
-
-    // The scale factor for a dip (relative to a 160 dpi screen).
-    protected float mDensity;
-
-    // The width of the screen in pixels.
-    protected int mScreenWidth = -1;
-
-    // The height of the screen in pixels.
-    protected int mScreenHeight = -1;
-
-    // The view's position within its parent.
-    private int mViewIndexInParent;
-
-    // A view that replaces the MraidView within its parent view when the MraidView is expanded
-    // (i.e. moved to the top of the view hierarchy).
-    private FrameLayout mPlaceholderView;
-    private FrameLayout mAdContainerLayout;
-    private RelativeLayout mExpansionLayout;
-    private final OnClickListener mCloseOnClickListener;
-
-    MraidDisplayController(MraidView view, MraidView.ExpansionStyle expStyle,
-            MraidView.NativeCloseButtonStyle buttonStyle) {
-        super(view);
-        mExpansionStyle = expStyle;
-        mNativeCloseButtonStyle = buttonStyle;
-
-        Context context = getContext();
-        mOriginalRequestedOrientation = (context instanceof Activity) ?
-                ((Activity) context).getRequestedOrientation() :
-                ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED;
-
-        initialize();
-
-        mCloseOnClickListener = new OnClickListener() {
-            @Override
-            public void onClick(final View view) {
-                MraidDisplayController.this.close();
-            }
-        };
-
-        mAdContainerLayout = createAdContainerLayout();
-        mExpansionLayout = createExpansionLayout();
-        mPlaceholderView = createPlaceholderView();
-    }
-
-    private void initialize() {
-        mViewState = ViewState.LOADING;
-        initializeScreenMetrics();
-        mOrientationBroadcastReceiver.register(getContext());
-    }
-
-    private void initializeScreenMetrics() {
-        Context context = getContext();
-        DisplayMetrics metrics = new DisplayMetrics();
-        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
-        wm.getDefaultDisplay().getMetrics(metrics);
-        mDensity = metrics.density;
-
-        int statusBarHeight = 0, titleBarHeight = 0;
-        if (context instanceof Activity) {
-            Activity activity = (Activity) context;
-            Window window = activity.getWindow();
-            Rect rect = new Rect();
-            window.getDecorView().getWindowVisibleDisplayFrame(rect);
-            statusBarHeight = rect.top;
-            int contentViewTop = window.findViewById(Window.ID_ANDROID_CONTENT).getTop();
-            titleBarHeight = contentViewTop - statusBarHeight;
-        }
-
-        int widthPixels = metrics.widthPixels;
-        int heightPixels = metrics.heightPixels - statusBarHeight - titleBarHeight;
-        mScreenWidth = (int) (widthPixels * (160.0 / metrics.densityDpi));
-        mScreenHeight = (int) (heightPixels * (160.0 / metrics.densityDpi));
-    }
-
-    private int getDisplayRotation() {
-        WindowManager wm = (WindowManager) getContext()
-                .getSystemService(Context.WINDOW_SERVICE);
-        return wm.getDefaultDisplay().getOrientation();
-    }
-
-    private void onOrientationChanged(int currentRotation) {
-        initializeScreenMetrics();
-        getMraidView().fireChangeEventForProperty(
-                MraidScreenSizeProperty.createWithSize(mScreenWidth, mScreenHeight));
-    }
-
-    public void destroy() {
-        try {
-            mOrientationBroadcastReceiver.unregister();
-        } catch (IllegalArgumentException e) {
-            if (!e.getMessage().contains("Receiver not registered")) {
-                throw e;
-            } // Else ignore this exception.
-        }
-    }
-
-    protected void initializeJavaScriptState() {
-        ArrayList<MraidProperty> properties = new ArrayList<MraidProperty>();
-        properties.add(MraidScreenSizeProperty.createWithSize(mScreenWidth, mScreenHeight));
-        properties.add(MraidViewableProperty.createWithViewable(getMraidView().getIsVisible()));
-        getMraidView().fireChangeEventForProperties(properties);
-
-        mViewState = ViewState.DEFAULT;
-        getMraidView().fireChangeEventForProperty(MraidStateProperty.createWithViewState(mViewState));
-        initializeSupportedFunctionsProperty();
-    }
-
-    protected boolean isExpanded() {
-        return (mViewState == ViewState.EXPANDED);
-    }
-
-    protected void close() {
-        if (mViewState == ViewState.EXPANDED) {
-            resetViewToDefaultState();
-            setOrientationLockEnabled(false);
-            mViewState = ViewState.DEFAULT;
-            getMraidView().fireChangeEventForProperty(MraidStateProperty.createWithViewState(mViewState));
-        } else if (mViewState == ViewState.DEFAULT) {
-            getMraidView().setVisibility(View.INVISIBLE);
-            mViewState = ViewState.HIDDEN;
-            getMraidView().fireChangeEventForProperty(MraidStateProperty.createWithViewState(mViewState));
-        }
-
-        if (getMraidView().getMraidListener() != null) {
-            getMraidView().getMraidListener().onClose(getMraidView(), mViewState);
-        }
-    }
-
-    private void resetViewToDefaultState() {
-        setNativeCloseButtonEnabled(false);
-        mAdContainerLayout.removeAllViewsInLayout();
-
-        mExpansionLayout.removeAllViewsInLayout();
-        mRootView.removeView(mExpansionLayout);
-
-        getMraidView().requestLayout();
-
-        ViewGroup parent = (ViewGroup) mPlaceholderView.getParent();
-        parent.addView(getMraidView(), mViewIndexInParent);
-        parent.removeView(mPlaceholderView);
-        parent.invalidate();
-    }
-
-    protected void expand(String url, int width, int height, boolean shouldUseCustomClose,
-            boolean shouldLockOrientation) {
-        if (mExpansionStyle == MraidView.ExpansionStyle.DISABLED) return;
-
-        if (url != null && !URLUtil.isValidUrl(url)) {
-            getMraidView().fireErrorEvent(EXPAND, "URL passed to expand() was invalid.");
-            return;
-        }
-
-        // Obtain the root content view, since that's where we're going to insert the expanded 
-        // content. We must do this before swapping the MraidView with its place-holder;
-        // otherwise, getRootView() will return the wrong view (or null).
-        mRootView = (FrameLayout) getMraidView().getRootView().findViewById(android.R.id.content);
-
-        useCustomClose(shouldUseCustomClose);
-        setOrientationLockEnabled(shouldLockOrientation);
-        swapViewWithPlaceholderView();
-
-        View expansionContentView = getMraidView();
-        if (url != null) {
-            mTwoPartExpansionView = new MraidView(getContext(), getMraidView().getAdConfiguration(), ExpansionStyle.DISABLED,
-                    NativeCloseButtonStyle.AD_CONTROLLED, PlacementType.INLINE);
-            mTwoPartExpansionView.setMraidListener(new BaseMraidListener() {
-                public void onClose(MraidView view, ViewState newViewState) {
-                    close();
-                }
-            });
-            mTwoPartExpansionView.loadUrl(url);
-            expansionContentView = mTwoPartExpansionView;
-        }
-
-        expandLayouts(expansionContentView, (int) (width * mDensity), (int) (height * mDensity));
-        mRootView.addView(mExpansionLayout, new RelativeLayout.LayoutParams(
-                RelativeLayout.LayoutParams.FILL_PARENT, RelativeLayout.LayoutParams.FILL_PARENT));
-
-        if (mNativeCloseButtonStyle == MraidView.NativeCloseButtonStyle.ALWAYS_VISIBLE ||
-                (!mAdWantsCustomCloseButton &&
-                mNativeCloseButtonStyle != MraidView.NativeCloseButtonStyle.ALWAYS_HIDDEN)) {
-            setNativeCloseButtonEnabled(true);
-        }
-
-        mViewState = ViewState.EXPANDED;
-        getMraidView().fireChangeEventForProperty(MraidStateProperty.createWithViewState(mViewState));
-        if (getMraidView().getMraidListener() != null) getMraidView().getMraidListener().onExpand(getMraidView());
-    }
-
-    protected void showUserDownloadImageAlert(String imageUrl) {
-        Context context = getContext();
-        if (!isStorePictureSupported(context)) {
-            getMraidView().fireErrorEvent(STORE_PICTURE, "Error downloading file - the device does not have an SD card mounted, or the Android permission is not granted.");
-            MoPubLog.d("Error downloading file - the device does not have an SD card mounted, or the Android permission is not granted.");
-            return;
-        }
-
-        if (context instanceof Activity) {
-            showUserDialog(imageUrl);
-        } else {
-            showUserToast("Downloading image to Picture gallery...");
-            downloadImage(imageUrl);
-        }
-    }
-
-    private void showUserToast(final String message) {
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                Toast.makeText(getContext(), message, Toast.LENGTH_SHORT).show();
-            }
-        });
-    }
-
-    private void downloadImage(final String uriString) {
-        final File pictureStoragePath = getPictureStoragePath();
-
-        pictureStoragePath.mkdirs();
-
-        new Thread(new Runnable() {
-            private URI uri;
-            private InputStream pictureInputStream;
-            private OutputStream pictureOutputStream;
-            private MediaScannerConnection mediaScannerConnection;
-
-            @Override
-            public void run() {
-                try {
-                    uri = URI.create(uriString);
-                    HttpClient httpClient = HttpClientFactory.create();
-                    HttpGet httpGet = new HttpGet(uri);
-
-                    HttpResponse httpResponse = httpClient.execute(httpGet);
-                    pictureInputStream = httpResponse.getEntity().getContent();
-
-                    String redirectLocation = HttpResponses.extractHeader(httpResponse, LOCATION);
-                    if (redirectLocation != null) {
-                        uri = URI.create(redirectLocation);
-                    }
-
-                    final String pictureFileName = getFileNameForUriAndHttpResponse(uri, httpResponse);
-                    File pictureFile = new File(pictureStoragePath, pictureFileName);
-                    final String pictureFileFullPath = pictureFile.toString();
-                    pictureOutputStream = new FileOutputStream(pictureFile);
-
-                    Streams.copyContent(pictureInputStream, pictureOutputStream);
-
-                    loadPictureIntoGalleryApp(pictureFileFullPath);
-                } catch (Exception exception) {
-                    mHandler.post(new Runnable() {
-                        @Override
-                        public void run() {
-                            showUserToast("Image failed to download.");
-                            getMraidView().fireErrorEvent(STORE_PICTURE, "Error downloading and saving image file.");
-                            MoPubLog.d("Error downloading and saving image file.");
-                        }
-                    });
-                } finally {
-                    Streams.closeStream(pictureInputStream);
-                    Streams.closeStream(pictureOutputStream);
-                }
-            }
-
-            private void loadPictureIntoGalleryApp(final String filename) {
-                MoPubMediaScannerConnectionClient mediaScannerConnectionClient = new MoPubMediaScannerConnectionClient(filename, null);
-                mediaScannerConnection = new MediaScannerConnection(getContext().getApplicationContext(), mediaScannerConnectionClient);
-                mediaScannerConnectionClient.setMediaScannerConnection(mediaScannerConnection);
-                mediaScannerConnection.connect();
-            }
-        }).start();
-    }
-
-    private void showUserDialog(final String imageUrl) {
-        AlertDialog.Builder alertDialogDownloadImage = new AlertDialog.Builder(getContext());
-        alertDialogDownloadImage
-                .setTitle("Save Image")
-                .setMessage("Download image to Picture gallery?")
-                .setNegativeButton("Cancel", null)
-                .setPositiveButton("Okay", new DialogInterface.OnClickListener() {
-                    @Override
-                    public void onClick(DialogInterface dialog, int which) {
-                        downloadImage(imageUrl);
-                    }
-                })
-                .setCancelable(true)
-                .show();
-    }
-
-    protected void showVideo(String videoUrl) {
-        MraidVideoPlayerActivity.startMraid(getContext(), videoUrl, getMraidView().getAdConfiguration());
-    }
-
-    protected void getCurrentPosition(){
-        getMraidView().fireErrorEvent(GET_CURRENT_POSITION, "Unsupported action getCurrentPosition");
-    }
-
-    protected void getDefaultPosition(){
-        getMraidView().fireErrorEvent(GET_DEFAULT_POSITION, "Unsupported action getDefaultPosition");
-    }
-
-    protected void getMaxSize(){
-        getMraidView().fireErrorEvent(GET_MAX_SIZE, "Unsupported action getMaxSize");
-    }
-
-    protected void getScreenSize(){
-        getMraidView().fireErrorEvent(GET_SCREEN_SIZE, "Unsupported action getScreenSize");
-    }
-
-    protected void createCalendarEvent(Map<String, String> params) {
-        Context context = getMraidView().getContext();
-        if (Mraids.isCalendarAvailable(context)) {
-            try {
-                Map<String, Object> calendarParams = translateJSParamsToAndroidCalendarEventMapping(params);
-                Intent intent = new Intent(Intent.ACTION_INSERT).setType(ANDROID_CALENDAR_CONTENT_TYPE);
-                for (String key : calendarParams.keySet()) {
-                    Object value = calendarParams.get(key);
-                    if (value instanceof Long) {
-                        intent.putExtra(key, ((Long) value).longValue());
-                    } else if (value instanceof Integer) {
-                        intent.putExtra(key, ((Integer) value).intValue());
-                    } else {
-                        intent.putExtra(key, (String) value);
-                    }
-                }
-                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-                context.startActivity(intent);
-            } catch (ActivityNotFoundException anfe) {
-                Log.d(LOGTAG, "no calendar app installed");
-                getMraidView().fireErrorEvent(CREATE_CALENDAR_EVENT, "Action is unsupported on this device - no calendar app installed");
-            } catch (IllegalArgumentException iae) {
-                Log.d(LOGTAG, "create calendar: invalid parameters " + iae.getMessage());
-                getMraidView().fireErrorEvent(CREATE_CALENDAR_EVENT, iae.getMessage());
-            } catch (Exception exception){
-                Log.d(LOGTAG, "could not create calendar event");
-                getMraidView().fireErrorEvent(CREATE_CALENDAR_EVENT, "could not create calendar event");
-            }
-        } else {
-            Log.d(LOGTAG, "unsupported action createCalendarEvent for devices pre-ICS");
-            getMraidView().fireErrorEvent(CREATE_CALENDAR_EVENT, "Action is unsupported on this device (need Android version Ice Cream Sandwich or above)");
-        }
-    }
-
-    private Map<String, Object> translateJSParamsToAndroidCalendarEventMapping(Map<String, String> params) throws Exception {
-        Map<String, Object> validatedParamsMapping = new HashMap<String, Object>();
-        if (!params.containsKey("description") || !params.containsKey("start")) {
-            throw new IllegalArgumentException("Missing start and description fields");
-        }
-
-        validatedParamsMapping.put(CalendarContract.Events.TITLE, params.get("description"));
-
-        if (params.containsKey("start") && params.get("start") != null) {
-            Date startDateTime = parseDate(params.get("start"));
-            if (startDateTime != null) {
-                validatedParamsMapping.put(CalendarContract.EXTRA_EVENT_BEGIN_TIME, startDateTime.getTime());
-            } else {
-                throw new IllegalArgumentException("Invalid calendar event: start time is malformed. Date format expecting (yyyy-MM-DDTHH:MM:SS-xx:xx) or (yyyy-MM-DDTHH:MM-xx:xx) i.e. 2013-08-14T09:00:01-08:00");
-            }
-        } else {
-            throw new IllegalArgumentException("Invalid calendar event: start is null.");
-        }
-
-        if (params.containsKey("end") && params.get("end") != null) {
-            Date endDateTime = parseDate(params.get("end"));
-            if (endDateTime != null) {
-                validatedParamsMapping.put(CalendarContract.EXTRA_EVENT_END_TIME, endDateTime.getTime());
-            } else {
-                throw new IllegalArgumentException("Invalid calendar event: end time is malformed. Date format expecting (yyyy-MM-DDTHH:MM:SS-xx:xx) or (yyyy-MM-DDTHH:MM-xx:xx) i.e. 2013-08-14T09:00:01-08:00");
-            }
-        }
-
-        if (params.containsKey("location")) {
-            validatedParamsMapping.put(CalendarContract.Events.EVENT_LOCATION, params.get("location"));
-        }
-
-        if (params.containsKey("summary")) {
-            validatedParamsMapping.put(CalendarContract.Events.DESCRIPTION, params.get("summary"));
-        }
-
-        if (params.containsKey("transparency")) {
-            validatedParamsMapping.put(
-                    CalendarContract.Events.AVAILABILITY,
-                    params.get("transparency").equals("transparent") ?
-                            CalendarContract.Events.AVAILABILITY_FREE :
-                            CalendarContract.Events.AVAILABILITY_BUSY
-            );
-        }
-
-        validatedParamsMapping.put(CalendarContract.Events.RRULE, parseRecurrenceRule(params));
-
-        return validatedParamsMapping;
-    }
-
-    private Date parseDate(String dateTime) {
-        Date result = null;
-        for (int i=0; i<DATE_FORMATS.length; i++) {
-            try {
-                result = new SimpleDateFormat(DATE_FORMATS[i]).parse(dateTime);
-                if (result != null) {
-                    break;
-                }
-            } catch (ParseException e) {
-                // an exception is okay, just try the next format and find the first one that works
-            }
-        }
-        return result;
-    }
-
-    private String parseRecurrenceRule(Map<String, String> params) throws IllegalArgumentException {
-        StringBuilder rule = new StringBuilder();
-        if (params.containsKey("frequency")) {
-            String frequency = params.get("frequency");
-            int interval = -1;
-            if (params.containsKey("interval")) {
-                interval = Integer.parseInt(params.get("interval"));
-            }
-            if ("daily".equals(frequency)) {
-                rule.append("FREQ=DAILY;");
-                if (interval != -1) {
-                    rule.append("INTERVAL=" + interval + ";");
-                }
-            } else if("weekly".equals(frequency)) {
-                rule.append("FREQ=WEEKLY;");
-                if (interval != -1) {
-                    rule.append("INTERVAL=" + interval + ";");
-                }
-                if (params.containsKey("daysInWeek")) {
-                    String weekdays = translateWeekIntegersToDays(params.get("daysInWeek"));
-                    if (weekdays == null) {
-                       throw new IllegalArgumentException("invalid ");
-                    }
-                    rule.append("BYDAY=" + weekdays + ";");
-                }
-            } else if("monthly".equals(frequency)) {
-                rule.append("FREQ=MONTHLY;");
-                if (interval != -1) {
-                    rule.append("INTERVAL=" + interval + ";");
-                }
-                if (params.containsKey("daysInMonth")) {
-                    String monthDays = translateMonthIntegersToDays(params.get("daysInMonth"));
-                    if (monthDays == null) {
-                        throw new IllegalArgumentException();
-                    }
-                    rule.append("BYMONTHDAY=" + monthDays + ";");
-                }
-            } else {
-                throw new IllegalArgumentException("frequency is only supported for daily, weekly, and monthly.");
-            }
-        }
-        return rule.toString();
-    }
-
-    private String translateWeekIntegersToDays(String expression) throws IllegalArgumentException{
-        StringBuilder daysResult = new StringBuilder();
-        boolean[] daysAlreadyCounted = new boolean[7];
-        String[] days = expression.split(",");
-        int dayNumber;
-        for (int i=0; i<days.length; i++) {
-            dayNumber = Integer.parseInt(days[i]);
-            dayNumber = dayNumber == 7 ? 0 : dayNumber;
-            if (!daysAlreadyCounted[dayNumber]) {
-                daysResult.append(dayNumberToDayOfWeekString(dayNumber) + ",");
-                daysAlreadyCounted[dayNumber] = true;
-            }
-        }
-        if (days.length == 0) {
-            throw new IllegalArgumentException("must have at least 1 day of the week if specifying repeating weekly");
-        }
-        daysResult.deleteCharAt(daysResult.length()-1);
-        return daysResult.toString();
-    }
-
-    private String translateMonthIntegersToDays(String expression) throws IllegalArgumentException {
-        StringBuilder daysResult = new StringBuilder();
-        boolean[] daysAlreadyCounted = new boolean[2*MAX_NUMBER_DAYS_IN_MONTH +1]; //for -31 to 31
-        String[] days = expression.split(",");
-        int dayNumber;
-        for (int i=0; i<days.length; i++) {
-            dayNumber = Integer.parseInt(days[i]);
-            if (!daysAlreadyCounted[dayNumber+MAX_NUMBER_DAYS_IN_MONTH]) {
-                daysResult.append(dayNumberToDayOfMonthString(dayNumber) + ",");
-                daysAlreadyCounted[dayNumber+MAX_NUMBER_DAYS_IN_MONTH] = true;
-            }
-        }
-        if (days.length == 0) {
-            throw new IllegalArgumentException("must have at least 1 day of the month if specifying repeating weekly");
-        }
-        daysResult.deleteCharAt(daysResult.length() - 1);
-        return daysResult.toString();
-    }
-
-    private String dayNumberToDayOfWeekString(int number) throws IllegalArgumentException {
-        String dayOfWeek;
-        switch(number) {
-            case 0: dayOfWeek="SU"; break;
-            case 1: dayOfWeek="MO"; break;
-            case 2: dayOfWeek="TU"; break;
-            case 3: dayOfWeek="WE"; break;
-            case 4: dayOfWeek="TH"; break;
-            case 5: dayOfWeek="FR"; break;
-            case 6: dayOfWeek="SA"; break;
-            default: throw new IllegalArgumentException("invalid day of week " + number);
-        }
-        return dayOfWeek;
-    }
-
-    private String dayNumberToDayOfMonthString(int number) throws IllegalArgumentException {
-        String dayOfMonth;
-        // https://android.googlesource.com/platform/frameworks/opt/calendar/+/504844526f1b7afec048c6d2976ffb332670d5ba/src/com/android/calendarcommon2/EventRecurrence.java
-        if (number != 0 && number >= -MAX_NUMBER_DAYS_IN_MONTH && number <= MAX_NUMBER_DAYS_IN_MONTH) {
-            dayOfMonth = "" + number;
-        } else {
-            throw new IllegalArgumentException("invalid day of month " + number);
-        }
-        return dayOfMonth;
-    }
-
-    private void swapViewWithPlaceholderView() {
-        ViewGroup parent = (ViewGroup) getMraidView().getParent();
-        if (parent == null) return;
-
-        int index;
-        int count = parent.getChildCount();
-        for (index = 0; index < count; index++) {
-            if (parent.getChildAt(index) == getMraidView()) break;
-        }
-
-        mViewIndexInParent = index;
-        parent.addView(mPlaceholderView, index,
-                new ViewGroup.LayoutParams(getMraidView().getWidth(), getMraidView().getHeight()));
-        parent.removeView(getMraidView());
-    }
-
-    private void expandLayouts(View expansionContentView, int expandWidth, int expandHeight) {
-        int closeButtonSize = (int) (CLOSE_BUTTON_SIZE_DP * mDensity + 0.5f);
-        if (expandWidth < closeButtonSize) expandWidth = closeButtonSize;
-        if (expandHeight < closeButtonSize) expandHeight = closeButtonSize;
-
-        View dimmingView = new View(getContext());
-        dimmingView.setBackgroundColor(TRANSPARENT);
-        dimmingView.setOnTouchListener(new OnTouchListener() {
-            public boolean onTouch(View v, MotionEvent event) {
-                return true;
-            }
-        });
-
-        mExpansionLayout.addView(dimmingView, new RelativeLayout.LayoutParams(
-                RelativeLayout.LayoutParams.FILL_PARENT, RelativeLayout.LayoutParams.FILL_PARENT));
-
-        mAdContainerLayout.addView(expansionContentView, new RelativeLayout.LayoutParams(
-                RelativeLayout.LayoutParams.FILL_PARENT, RelativeLayout.LayoutParams.FILL_PARENT));
-
-        addCloseEventRegion(mAdContainerLayout);
-
-        RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(expandWidth, expandHeight);
-        lp.addRule(RelativeLayout.CENTER_IN_PARENT);
-        mExpansionLayout.addView(mAdContainerLayout, lp);
-    }
-
-    private void setOrientationLockEnabled(boolean enabled) {
-        Context context = getContext();
-        Activity activity = null;
-        try {
-            activity = (Activity) context;
-            int requestedOrientation = enabled ?
-                    activity.getResources().getConfiguration().orientation :
-                    mOriginalRequestedOrientation;
-            activity.setRequestedOrientation(requestedOrientation);
-        } catch (ClassCastException e) {
-            Log.d(LOGTAG, "Unable to modify device orientation.");
-        }
-    }
-
-    protected void setNativeCloseButtonEnabled(boolean enabled) {
-        if (mRootView == null) {
-            return;
-        }
-
-        if (enabled) {
-            if (mCloseButton == null) {
-                StateListDrawable states = new StateListDrawable();
-                states.addState(new int[] {-android.R.attr.state_pressed}, INTERSTITIAL_CLOSE_BUTTON_NORMAL.decodeImage(mRootView.getContext()));
-                states.addState(new int[] {android.R.attr.state_pressed}, INTERSTITIAL_CLOSE_BUTTON_PRESSED.decodeImage(mRootView.getContext()));
-                mCloseButton = new ImageButton(getContext());
-                mCloseButton.setImageDrawable(states);
-                mCloseButton.setBackgroundDrawable(null);
-                mCloseButton.setOnClickListener(new OnClickListener() {
-                    public void onClick(View v) {
-                        MraidDisplayController.this.close();
-                    }
-                });
-            }
-
-            final int closeButtonSize = Dips.dipsToIntPixels(CLOSE_BUTTON_SIZE_DP, getContext());
-            FrameLayout.LayoutParams buttonLayout = new FrameLayout.LayoutParams(
-                    closeButtonSize, closeButtonSize, Gravity.RIGHT);
-            mAdContainerLayout.addView(mCloseButton, buttonLayout);
-        } else {
-            mAdContainerLayout.removeView(mCloseButton);
-        }
-
-        MraidView view = getMraidView();
-        if (view.getOnCloseButtonStateChangeListener() != null) {
-            view.getOnCloseButtonStateChangeListener().onCloseButtonStateChange(view, enabled);
-        }
-    }
-
-    protected void useCustomClose(boolean shouldUseCustomCloseButton) {
-        mAdWantsCustomCloseButton = shouldUseCustomCloseButton;
-
-        MraidView view = getMraidView();
-        boolean enabled = !shouldUseCustomCloseButton;
-        if (view.getOnCloseButtonStateChangeListener() != null) {
-            view.getOnCloseButtonStateChangeListener().onCloseButtonStateChange(view, enabled);
-        }
-    }
-
-    FrameLayout createAdContainerLayout() {
-        return new FrameLayout(getContext());
-    }
-
-    void addCloseEventRegion(final FrameLayout frameLayout) {
-        final int buttonSizePixels = Dips.dipsToIntPixels(CLOSE_BUTTON_SIZE_DP, getContext());
-        final FrameLayout.LayoutParams layoutParams =
-                new FrameLayout.LayoutParams(buttonSizePixels, buttonSizePixels, Gravity.TOP | Gravity.RIGHT);
-        Interstitials.addCloseEventRegion(frameLayout, layoutParams, mCloseOnClickListener);
-    }
-
-    RelativeLayout createExpansionLayout() {
-        return new RelativeLayout(getContext());
-    }
-
-    FrameLayout createPlaceholderView() {
-        return new FrameLayout(getContext());
-    }
-
-    private Context getContext() {
-        return getMraidView().getContext();
-    }
-
-    protected void initializeSupportedFunctionsProperty() {
-        Context context = getContext();
-        getMraidView().fireChangeEventForProperty(
-                new MraidSupportsProperty()
-                        .withTel(isTelAvailable(context))
-                        .withSms(isSmsAvailable(context))
-                        .withCalendar(isCalendarAvailable(context))
-                        .withInlineVideo(isInlineVideoAvailable(context))
-                        .withStorePicture(isStorePictureSupported(context)));
-    }
-
-    private File getPictureStoragePath() {
-        return new File(Environment.getExternalStorageDirectory(), "Pictures");
-    }
-
-    private String getFileNameForUriAndHttpResponse(final URI uri, final HttpResponse response) {
-        final String path = uri.getPath();
-
-        if (path == null) {
-            return null;
-        }
-
-        String filename = new File(path).getName();
-
-        Header header = response.getFirstHeader(MIME_TYPE_HEADER);
-        if (header != null) {
-            String[] fields = header.getValue().split(";");
-            for (final String field : fields) {
-                String extension;
-                if (field.contains("image/")) {
-                    extension = "." + field.split("/")[1];
-                    if (!filename.endsWith(extension)) {
-                        filename += extension;
-                    }
-                    break;
-                }
-            }
-        }
-
-        return filename;
-    }
-
-    private class MoPubMediaScannerConnectionClient implements MediaScannerConnection.MediaScannerConnectionClient {
-        private final String mFilename;
-        private final String mMimeType;
-        private MediaScannerConnection mMediaScannerConnection;
-
-        private MoPubMediaScannerConnectionClient(String filename, String mimeType) {
-            mFilename = filename;
-            mMimeType = mimeType;
-        }
-
-        private void setMediaScannerConnection(MediaScannerConnection connection) {
-            mMediaScannerConnection = connection;
-        }
-
-        @Override
-        public void onMediaScannerConnected() {
-            if (mMediaScannerConnection != null) {
-                mMediaScannerConnection.scanFile(mFilename, mMimeType);
-            }
-        }
-
-        @Override
-        public void onScanCompleted(String path, Uri uri) {
-            if (mMediaScannerConnection != null) {
-                mMediaScannerConnection.disconnect();
-            }
-        }
-    }
-
-    class OrientationBroadcastReceiver extends BroadcastReceiver {
-        private int mLastRotation;
-        private Context mContext;
-
-        public void onReceive(Context context, Intent intent) {
-            if(!isRegistered()) {
-                return;
-            }
-            String action = intent.getAction();
-            if (action.equals(Intent.ACTION_CONFIGURATION_CHANGED)) {
-                int orientation = MraidDisplayController.this.getDisplayRotation();
-                if (orientation != mLastRotation) {
-                    mLastRotation = orientation;
-                    MraidDisplayController.this.onOrientationChanged(mLastRotation);
-                }
-            }
-        }
-
-        private boolean isRegistered() {
-            return mContext != null;
-        }
-
-        public void register(Context context) {
-            mContext = context;
-            context.registerReceiver(this,
-                    new IntentFilter(Intent.ACTION_CONFIGURATION_CHANGED));
-        }
-
-        public void unregister() {
-            mContext.unregisterReceiver(this);
-            mContext = null;
-        }
-    }
-
-    // testing
-    @Deprecated
-    public OnClickListener getCloseOnClickListener() {
-        return mCloseOnClickListener;
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidInterstitial.java
deleted file mode 100644
index 53ac578e..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidInterstitial.java
+++ /dev/null
@@ -1,27 +0,0 @@
-package com.mopub.mobileads;
-
-
-import android.net.Uri;
-
-import java.util.Map;
-
-import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
-
-class MraidInterstitial extends ResponseBodyInterstitial {
-    private String mHtmlData;
-
-    @Override
-    protected void extractExtras(Map<String, String> serverExtras) {
-        mHtmlData = Uri.decode(serverExtras.get(HTML_RESPONSE_BODY_KEY));
-    }
-
-    @Override
-    protected void preRenderHtml(CustomEventInterstitialListener customEventInterstitialListener) {
-        MraidActivity.preRenderHtml(mContext, customEventInterstitialListener, mHtmlData);
-    }
-
-    @Override
-    protected void showInterstitial() {
-        MraidActivity.start(mContext, mHtmlData, mAdConfiguration);
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidProperty.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidProperty.java
deleted file mode 100644
index bfcfdf56..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidProperty.java
+++ /dev/null
@@ -1,132 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.mobileads.MraidView.PlacementType;
-import com.mopub.mobileads.MraidView.ViewState;
-
-abstract class MraidProperty {
-    private String sanitize(String str) {
-        return (str != null) ? str.replaceAll("[^a-zA-Z0-9_,:\\s\\{\\}\\\'\\\"]", "") : "";
-    }
-
-    @Override
-    public String toString() {
-        return sanitize(toJsonPair());
-    }
-
-    public abstract String toJsonPair();
-}
-
-class MraidPlacementTypeProperty extends MraidProperty {
-    private final PlacementType mPlacementType;
-
-    MraidPlacementTypeProperty(PlacementType placementType) {
-        mPlacementType = placementType;
-    }
-
-    public static MraidPlacementTypeProperty createWithType(
-            PlacementType placementType) {
-        return new MraidPlacementTypeProperty(placementType);
-    }
-
-    @Override
-    public String toJsonPair() {
-        return "placementType: '" + mPlacementType.toString().toLowerCase() + "'";
-    }
-}
-
-class MraidScreenSizeProperty extends MraidProperty {
-    private final int mScreenWidth;
-    private final int mScreenHeight;
-
-    MraidScreenSizeProperty(int width, int height) {
-        mScreenWidth = width;
-        mScreenHeight = height;
-    }
-
-    public static MraidScreenSizeProperty createWithSize(int width, int height) {
-        return new MraidScreenSizeProperty(width, height);
-    }
-
-    @Override
-    public String toJsonPair() {
-        return "screenSize: { width: " + mScreenWidth + ", height: " + mScreenHeight + " }";
-    }
-}
-
-class MraidStateProperty extends MraidProperty {
-    private final ViewState mViewState;
-
-    MraidStateProperty(ViewState viewState) {
-        mViewState = viewState;
-    }
-
-    public static MraidStateProperty createWithViewState(ViewState viewState) {
-        return new MraidStateProperty(viewState);
-    }
-
-    @Override
-    public String toJsonPair() {
-        return "state: '" + mViewState.toString().toLowerCase() + "'";
-    }
-}
-
-class MraidViewableProperty extends MraidProperty {
-    private final boolean mViewable;
-
-    MraidViewableProperty(boolean viewable) {
-        mViewable = viewable;
-    }
-
-    public static MraidViewableProperty createWithViewable(boolean viewable) {
-        return new MraidViewableProperty(viewable);
-    }
-
-    @Override
-    public String toJsonPair() {
-        return "viewable: " + (mViewable ? "true" : "false");
-    }
-}
-
-class MraidSupportsProperty extends MraidProperty{
-    private boolean sms;
-    private boolean tel;
-    private boolean calendar;
-    private boolean storePicture;
-    private boolean inlineVideo;
-
-    @Override
-    public String toJsonPair() {
-        return "supports: {" +
-                "sms: " + String.valueOf(sms) + ", " +
-                "tel: " + String.valueOf(tel) + ", " +
-                "calendar: " + String.valueOf(calendar) + ", " +
-                "storePicture: " + String.valueOf(storePicture) + ", " +
-                "inlineVideo: " + String.valueOf(inlineVideo) + "}";
-    }
-
-    public MraidSupportsProperty withSms(boolean value) {
-        sms = value;
-        return this;
-    }
-
-
-    public MraidSupportsProperty withTel(boolean value) {
-        tel = value;
-        return this;
-    }
-
-    public MraidSupportsProperty withCalendar(boolean value) {
-        calendar = value;
-        return this;
-    }
-
-    public MraidSupportsProperty withStorePicture(boolean value) {
-        storePicture = value;
-        return this;
-    }
-
-    public MraidSupportsProperty withInlineVideo(boolean value) {
-        inlineVideo = value;
-        return this;
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoViewController.java
deleted file mode 100644
index 06111b88..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoViewController.java
+++ /dev/null
@@ -1,96 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.graphics.drawable.StateListDrawable;
-import android.media.MediaPlayer;
-import android.os.Bundle;
-import android.view.View;
-import android.widget.ImageButton;
-import android.widget.RelativeLayout;
-import android.widget.VideoView;
-import com.mopub.common.util.Dips;
-
-import static android.view.View.GONE;
-import static android.view.View.OnClickListener;
-import static android.view.View.VISIBLE;
-import static com.mopub.common.util.Drawables.INTERSTITIAL_CLOSE_BUTTON_NORMAL;
-import static com.mopub.common.util.Drawables.INTERSTITIAL_CLOSE_BUTTON_PRESSED;
-import static com.mopub.mobileads.BaseVideoPlayerActivity.VIDEO_URL;
-
-public class MraidVideoViewController extends BaseVideoViewController {
-    private static final float CLOSE_BUTTON_SIZE = 50f;
-    private static final float CLOSE_BUTTON_PADDING = 8f;
-
-    private final VideoView mVideoView;
-    private ImageButton mCloseButton;
-    private int mButtonPadding;
-    private int mButtonSize;
-
-    MraidVideoViewController(final Context context, final Bundle bundle, final long broadcastIdentifier, final BaseVideoViewControllerListener baseVideoViewControllerListener) {
-        super(context, broadcastIdentifier, baseVideoViewControllerListener);
-
-        mVideoView = new VideoView(context);
-        mVideoView.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
-            @Override
-            public void onCompletion(MediaPlayer mp) {
-                mCloseButton.setVisibility(VISIBLE);
-                videoCompleted(true);
-            }
-        });
-
-        mVideoView.setOnErrorListener(new MediaPlayer.OnErrorListener() {
-            @Override
-            public boolean onError(MediaPlayer mediaPlayer, int what, int extra) {
-                mCloseButton.setVisibility(VISIBLE);
-                videoError(false);
-
-                return false;
-            }
-        });
-
-        mVideoView.setVideoPath(bundle.getString(VIDEO_URL));
-    }
-
-    @Override
-    void onCreate() {
-        super.onCreate();
-        mButtonSize = Dips.asIntPixels(CLOSE_BUTTON_SIZE, getContext());
-        mButtonPadding = Dips.asIntPixels(CLOSE_BUTTON_PADDING, getContext());
-        createInterstitialCloseButton();
-        mCloseButton.setVisibility(GONE);
-        mVideoView.start();
-    }
-
-    @Override
-    VideoView getVideoView() {
-        return mVideoView;
-    }
-
-    @Override
-    void onDestroy() {}
-
-    @Override
-    void onPause() {}
-
-    @Override
-    void onResume() {}
-
-    private void createInterstitialCloseButton() {
-        mCloseButton = new ImageButton(getContext());
-        StateListDrawable states = new StateListDrawable();
-        states.addState(new int[] {-android.R.attr.state_pressed}, INTERSTITIAL_CLOSE_BUTTON_NORMAL.decodeImage(getContext()));
-        states.addState(new int[] {android.R.attr.state_pressed}, INTERSTITIAL_CLOSE_BUTTON_PRESSED.decodeImage(getContext()));
-        mCloseButton.setImageDrawable(states);
-        mCloseButton.setBackgroundDrawable(null);
-        mCloseButton.setOnClickListener(new OnClickListener() {
-            public void onClick(View v) {
-                getBaseVideoViewControllerListener().onFinish();
-            }
-        });
-
-        RelativeLayout.LayoutParams buttonLayout = new RelativeLayout.LayoutParams(mButtonSize, mButtonSize);
-        buttonLayout.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
-        buttonLayout.setMargins(mButtonPadding, 0, mButtonPadding, 0);
-        getLayout().addView(mCloseButton, buttonLayout);
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidView.java
deleted file mode 100644
index 4a5fa6b9..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidView.java
+++ /dev/null
@@ -1,411 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.ActivityNotFoundException;
-import android.content.Context;
-import android.content.Intent;
-import android.graphics.Color;
-import android.net.Uri;
-import android.util.Log;
-import android.view.MotionEvent;
-import android.view.View;
-import android.webkit.WebView;
-import android.webkit.WebViewClient;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.Strings;
-import com.mopub.mobileads.factories.HttpClientFactory;
-import com.mopub.mobileads.resource.MraidJavascript;
-import org.apache.http.HttpEntity;
-import org.apache.http.HttpResponse;
-import org.apache.http.NameValuePair;
-import org.apache.http.client.ClientProtocolException;
-import org.apache.http.client.HttpClient;
-import org.apache.http.client.methods.HttpGet;
-import org.apache.http.client.utils.URLEncodedUtils;
-
-import java.io.*;
-import java.net.URI;
-import java.util.*;
-
-import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand;
-import static com.mopub.mobileads.ViewGestureDetector.UserClickListener;
-
-public class MraidView extends BaseWebView implements UserClickListener {
-    private static final String LOGTAG = "MraidView";
-    
-    private MoPubBrowserController mBrowserController;
-    private MraidDisplayController mDisplayController;
-    
-    private WebViewClient mWebViewClient;
-
-    private boolean mHasFiredReadyEvent;
-    private boolean mClicked;
-    private final PlacementType mPlacementType;
-    private ViewGestureDetector mViewGestureDetector;
-    private AdConfiguration mAdConfiguration;
-    private boolean mIsVisible;
-
-    static class MraidListenerInfo {
-        private MraidListener mMraidListener;
-        private OnCloseButtonStateChangeListener mOnCloseButtonListener;
-    }
-    private MraidListenerInfo mListenerInfo;
-
-    public enum ViewState {
-        LOADING,
-        DEFAULT,
-        EXPANDED,
-        HIDDEN
-    }
-
-    public enum ExpansionStyle {
-        ENABLED,
-        DISABLED
-    }
-
-    public enum NativeCloseButtonStyle {
-        ALWAYS_VISIBLE,
-        ALWAYS_HIDDEN,
-        AD_CONTROLLED
-    }
-
-    public enum PlacementType {
-        INLINE,
-        INTERSTITIAL
-    }
-
-    public MraidView(Context context, AdConfiguration adConfiguration) {
-        this(context, adConfiguration, ExpansionStyle.ENABLED, NativeCloseButtonStyle.AD_CONTROLLED,
-                PlacementType.INLINE);
-    }
-
-    public MraidView(Context context, AdConfiguration adConfiguration, ExpansionStyle expStyle, NativeCloseButtonStyle buttonStyle,
-                     PlacementType placementType) {
-        super(context);
-        mPlacementType = placementType;
-
-        mAdConfiguration = adConfiguration;
-        mViewGestureDetector = new ViewGestureDetector(context, this, adConfiguration);
-        mViewGestureDetector.setUserClickListener(this);
-
-        mIsVisible = (getVisibility() == View.VISIBLE);
-
-        initialize(expStyle, buttonStyle);
-    }
-
-    @Override
-    public void onUserClick() {
-        mClicked = true;
-    }
-
-    @Override
-    public void onResetUserClick() {
-        mClicked = false;
-    }
-
-    @Override
-    public boolean wasClicked() {
-        return mClicked;
-    }
-
-    private void initialize(ExpansionStyle expStyle, NativeCloseButtonStyle buttonStyle) {
-        setScrollContainer(false);
-        setBackgroundColor(Color.TRANSPARENT);
-        
-        setVerticalScrollBarEnabled(false);
-        setHorizontalScrollBarEnabled(false);
-        
-        setOnTouchListener(new View.OnTouchListener() {
-            public boolean onTouch(View v, MotionEvent event) {
-                mViewGestureDetector.sendTouchEvent(event);
-
-                switch (event.getAction()) {
-                    case MotionEvent.ACTION_DOWN:
-                    case MotionEvent.ACTION_UP:
-                        if (!v.hasFocus()) {
-                            v.requestFocus();
-                        }
-                        break;
-                }
-                return false;
-            }
-        });
-        
-        getSettings().setJavaScriptEnabled(true);
-        
-        mBrowserController = new MoPubBrowserController(this);
-        mDisplayController = new MraidDisplayController(this, expStyle, buttonStyle);
-        
-        mWebViewClient = new MraidWebViewClient();
-        setWebViewClient(mWebViewClient);
-
-        mListenerInfo = new MraidListenerInfo();
-    }
-
-    AdConfiguration getAdConfiguration() {
-        return mAdConfiguration;
-    }
-
-    @Override
-    public void destroy() {
-        mDisplayController.destroy();
-        super.destroy();
-    }
-
-    public void loadHtmlData(String data) {
-        if (data == null) {
-            return;
-        }
-
-        // If the string data lacks the HTML boilerplate, add it.
-        if (!data.contains("<html>")) {
-            data = "<html><head></head><body style='margin:0;padding:0;'>" + data +
-                    "</body></html>";
-        }
-        
-        // Inject the MRAID JavaScript bridge.
-        data = data.replace("<head>", "<head><script>" + MraidJavascript.JAVASCRIPT_SOURCE + "</script>");
-
-        loadDataWithBaseURL(null, data, "text/html", "UTF-8", null);
-    }
-
-    @Override
-    public void loadUrl(String url) {
-        if (url == null) {
-            return;
-        }
-
-        if (url.startsWith("javascript:")) {
-            super.loadUrl(url);
-            return;
-        }
-
-        HttpClient httpClient = HttpClientFactory.create();
-        String outString = "";
-        
-        try {
-            HttpGet httpGet = new HttpGet(url);
-            HttpResponse response = httpClient.execute(httpGet);
-            HttpEntity entity = response.getEntity();
-    
-            if (entity != null) {
-                outString = Strings.fromStream(entity.getContent());
-            }
-        } catch (IllegalArgumentException e) {
-            MoPubLog.d("Mraid loadUrl failed (IllegalArgumentException): " + url);
-            notifyOnFailureListener();
-            return;
-        } catch (ClientProtocolException e) {
-            notifyOnFailureListener();
-            return;
-        } catch (IOException e) {
-            notifyOnFailureListener();
-            return;
-        }
-
-        loadHtmlData(outString);
-    }
-    
-    private void notifyOnFailureListener() {
-        if (mListenerInfo.mMraidListener != null) {
-            mListenerInfo.mMraidListener.onFailure(this);
-        }
-    }
-
-    // Controllers /////////////////////////////////////////////////////////////////////////////////
-    
-    protected MoPubBrowserController getBrowserController() {
-        return mBrowserController;
-    }
-    
-    protected MraidDisplayController getDisplayController() {
-        return mDisplayController;
-    }
-    
-    // Listeners ///////////////////////////////////////////////////////////////////////////////////
-
-    public void setMraidListener(MraidListener mraidListener) {
-        mListenerInfo.mMraidListener = mraidListener;
-    }
-
-    public MraidListener getMraidListener() {
-        return mListenerInfo.mMraidListener;
-    }
-
-    public void setOnCloseButtonStateChange(OnCloseButtonStateChangeListener listener) {
-        mListenerInfo.mOnCloseButtonListener = listener;
-    }
-    
-    public OnCloseButtonStateChangeListener getOnCloseButtonStateChangeListener() {
-        return mListenerInfo.mOnCloseButtonListener;
-    }
-    
-    // JavaScript injection ////////////////////////////////////////////////////////////////////////
-    
-    protected void injectJavaScript(String js) {
-        if (js != null) super.loadUrl("javascript:" + js);
-    }
-    
-    protected void fireChangeEventForProperty(MraidProperty property) {
-        String json = "{" + property.toString() + "}";
-        injectJavaScript("window.mraidbridge.fireChangeEvent(" + json + ");");
-        Log.d(LOGTAG, "Fire change: " + json);
-    }
-    
-    protected void fireChangeEventForProperties(ArrayList<MraidProperty> properties) {
-        String props = properties.toString();
-        if (props.length() < 2) return;
-        
-        String json = "{" + props.substring(1, props.length() - 1) + "}";
-        injectJavaScript("window.mraidbridge.fireChangeEvent(" + json + ");");
-        Log.d(LOGTAG, "Fire changes: " + json);
-    }
-    
-    protected void fireErrorEvent(MraidJavascriptCommand mraidJavascriptCommand, String message) {
-        String action = mraidJavascriptCommand.getCommand();
-
-        injectJavaScript("window.mraidbridge.fireErrorEvent('" + action + "', '" + message + "');");
-    }
-    
-    protected void fireReadyEvent() {
-        injectJavaScript("window.mraidbridge.fireReadyEvent();");
-    }
-    
-    protected void fireNativeCommandCompleteEvent(String command) {
-        injectJavaScript("window.mraidbridge.nativeCallComplete('" + command + "');");
-    }
-    
-    private boolean tryCommand(URI uri) {
-        String commandType = uri.getHost();
-        List<NameValuePair> list = URLEncodedUtils.parse(uri, "UTF-8");
-        Map<String, String> params = new HashMap<String, String>();
-        for (NameValuePair pair : list) {
-            params.put(pair.getName(), pair.getValue());
-        }
-
-        MraidCommand command = MraidCommandFactory.create(commandType, params, this);
-
-        if (command == null) {
-            fireNativeCommandCompleteEvent(commandType);
-            return false;
-        } else if (command.isCommandDependentOnUserClick(mPlacementType) && !wasClicked()) {
-            return false;
-        } else {
-            command.execute();
-            fireNativeCommandCompleteEvent(commandType);
-            return true;
-        }
-    }
-
-    private class MraidWebViewClient extends WebViewClient {
-        @Override
-        public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {
-            Log.d(LOGTAG, "Error: " + description);
-            super.onReceivedError(view, errorCode, description, failingUrl);
-        }
-        
-        @Override
-        public boolean shouldOverrideUrlLoading(WebView view, String url) {
-            Uri uri = Uri.parse(url);
-
-            // Note that scheme will be null when we are passed a relative Uri
-            String scheme = uri.getScheme();
-
-            if ("mopub".equals(scheme)) {
-                return true;
-            }
-
-            if ("mraid".equals(scheme)) {
-                tryCommand(URI.create(url)); // java.net.URI, not android.net.Uri
-                return true;
-            }
-
-            if (wasClicked()) {
-                Intent i = new Intent();
-                i.setAction(Intent.ACTION_VIEW);
-                i.setData(Uri.parse(url));
-                i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-
-                try {
-                    getContext().startActivity(i);
-                    return true;
-                } catch (ActivityNotFoundException e) {
-                    return false;
-                }
-            }
-
-            return false;
-        }
-        
-        @Override
-        public void onPageFinished(WebView view, String url) {
-            if (!mHasFiredReadyEvent) {
-                mDisplayController.initializeJavaScriptState();
-                fireChangeEventForProperty(MraidPlacementTypeProperty.createWithType(mPlacementType));
-                fireReadyEvent();
-                if (getMraidListener() != null) {
-                    getMraidListener().onReady(MraidView.this);
-                }
-                mIsVisible = (getVisibility() == View.VISIBLE);
-                fireChangeEventForProperty(MraidViewableProperty.createWithViewable(mIsVisible));
-                mHasFiredReadyEvent = true;
-            }
-        }
-        
-        @Override
-        public void onLoadResource(WebView view, String url) {
-            Log.d(LOGTAG, "Loaded resource: " + url);
-        }
-    }
-
-    public interface MraidListener {
-        public void onReady(MraidView view);
-        public void onFailure(MraidView view);
-        public void onExpand(MraidView view);
-        public void onOpen(MraidView view);
-        public void onClose(MraidView view, ViewState newViewState);
-    }
-
-    public static class BaseMraidListener implements MraidListener {
-        @Override public void onReady(MraidView view) { }
-        @Override public void onFailure(MraidView view) { }
-        @Override public void onExpand(MraidView view) { }
-        @Override public void onOpen(MraidView view) { }
-        @Override public void onClose(MraidView view, ViewState newViewState) { }
-    }
-
-    public interface OnCloseButtonStateChangeListener {
-        public void onCloseButtonStateChange(MraidView view, boolean enabled);
-    }
-
-    public boolean getIsVisible() {
-        return mIsVisible;
-    }
-
-    @Override
-    protected void onVisibilityChanged (View changedView, int visibility) {
-        super.onVisibilityChanged(changedView, visibility);
-
-        boolean newIsVisible = (visibility == View.VISIBLE);
-        if (newIsVisible != mIsVisible) {
-            mIsVisible = newIsVisible;
-            if (mHasFiredReadyEvent) {
-                fireChangeEventForProperty(MraidViewableProperty.createWithViewable(mIsVisible));
-            }
-        }
-    }
-
-    @Deprecated // for testing
-    void setHasFiredReadyEvent(boolean hasFired) {
-        mHasFiredReadyEvent = hasFired;
-    }
-
-    @Deprecated // for testing
-    WebViewClient getMraidWebViewClient() {
-        return mWebViewClient;
-    }
-
-    @Deprecated // for testing
-    void setMraidDisplayController(MraidDisplayController mraidDisplayController) {
-        mDisplayController = mraidDisplayController;
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/TaskTracker.java b/mopub-sdk/src/main/java/com/mopub/mobileads/TaskTracker.java
deleted file mode 100644
index ffe0a65b..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/TaskTracker.java
+++ /dev/null
@@ -1,24 +0,0 @@
-package com.mopub.mobileads;
-
-public class TaskTracker {
-    private long mCurrentTaskId = -1l;
-    private long mLastCompletedTaskId;
-
-    public long getCurrentTaskId() {
-        return mCurrentTaskId;
-    }
-
-    public void newTaskStarted() {
-        mCurrentTaskId++;
-    }
-
-    public void markTaskCompleted(long taskId) {
-        if (taskId > mLastCompletedTaskId) {
-            mLastCompletedTaskId = taskId;
-        }
-    }
-
-    public boolean isMostCurrentTask(long taskId) {
-        return taskId >= mLastCompletedTaskId;
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/AdFetchTaskFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/AdFetchTaskFactory.java
deleted file mode 100644
index 23c463be..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/AdFetchTaskFactory.java
+++ /dev/null
@@ -1,22 +0,0 @@
-package com.mopub.mobileads.factories;
-
-import com.mopub.mobileads.AdFetchTask;
-import com.mopub.mobileads.AdViewController;
-import com.mopub.mobileads.TaskTracker;
-
-public class AdFetchTaskFactory {
-    protected static AdFetchTaskFactory instance = new AdFetchTaskFactory();
-
-    @Deprecated // for testing
-    public static void setInstance(AdFetchTaskFactory factory) {
-        instance = factory;
-    }
-
-    public static AdFetchTask create(TaskTracker taskTracker, AdViewController adViewController, String userAgent, int timeoutMilliseconds) {
-        return instance.internalCreate(taskTracker, adViewController, userAgent, timeoutMilliseconds);
-    }
-
-    protected AdFetchTask internalCreate(TaskTracker taskTracker, AdViewController adViewController, String userAgent, int timeoutMilliseconds) {
-        return new AdFetchTask(taskTracker, adViewController, userAgent, timeoutMilliseconds);
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/AdFetcherFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/AdFetcherFactory.java
deleted file mode 100644
index 7490ced8..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/AdFetcherFactory.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package com.mopub.mobileads.factories;
-
-import com.mopub.mobileads.AdFetcher;
-import com.mopub.mobileads.AdViewController;
-
-public class AdFetcherFactory {
-    protected static AdFetcherFactory instance = new AdFetcherFactory();
-
-    @Deprecated // for testing
-    public static void setInstance(AdFetcherFactory factory) {
-        instance = factory;
-    }
-
-    public static AdFetcher create(AdViewController adViewController, String userAgent) {
-        return instance.internalCreate(adViewController, userAgent);
-    }
-
-    protected AdFetcher internalCreate(AdViewController adViewController, String userAgent) {
-        return new AdFetcher(adViewController, userAgent);
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/MraidViewFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/MraidViewFactory.java
deleted file mode 100644
index a139babf..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/MraidViewFactory.java
+++ /dev/null
@@ -1,42 +0,0 @@
-package com.mopub.mobileads.factories;
-
-import android.content.Context;
-
-import com.mopub.mobileads.AdConfiguration;
-import com.mopub.mobileads.MraidView;
-import com.mopub.mobileads.MraidView.NativeCloseButtonStyle;
-
-public class MraidViewFactory {
-    protected static MraidViewFactory instance = new MraidViewFactory();
-
-    @Deprecated // for testing
-    public static void setInstance(MraidViewFactory factory) {
-        instance = factory;
-    }
-
-    public static MraidView create(Context context, AdConfiguration adConfiguration) {
-        return instance.internalCreate(context, adConfiguration);
-    }
-
-    public static MraidView create(
-            Context context,
-            AdConfiguration adConfiguration,
-            MraidView.ExpansionStyle expansionStyle,
-            NativeCloseButtonStyle buttonStyle,
-            MraidView.PlacementType placementType) {
-        return instance.internalCreate(context, adConfiguration, expansionStyle, buttonStyle, placementType);
-    }
-
-    protected MraidView internalCreate(Context context, AdConfiguration adConfiguration) {
-        return new MraidView(context, adConfiguration);
-    }
-
-    protected MraidView internalCreate(
-            Context context,
-            AdConfiguration adConfiguration,
-            MraidView.ExpansionStyle expansionStyle,
-            NativeCloseButtonStyle buttonStyle,
-            MraidView.PlacementType placementType) {
-        return new MraidView(context, adConfiguration, expansionStyle, buttonStyle, placementType);
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/ViewGestureDetectorFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/ViewGestureDetectorFactory.java
deleted file mode 100644
index d8e377c0..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/ViewGestureDetectorFactory.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package com.mopub.mobileads.factories;
-
-import android.content.Context;
-import android.view.View;
-
-import com.mopub.mobileads.AdConfiguration;
-import com.mopub.mobileads.ViewGestureDetector;
-
-public class ViewGestureDetectorFactory {
-    protected static ViewGestureDetectorFactory instance = new ViewGestureDetectorFactory();
-
-    @Deprecated // for testing
-    public static void setInstance(ViewGestureDetectorFactory factory) {
-        instance = factory;
-    }
-
-    public static ViewGestureDetector create(Context context, View view, AdConfiguration adConfiguration) {
-        return instance.internalCreate(context, view, adConfiguration);
-    }
-
-    protected ViewGestureDetector internalCreate(Context context, View view, AdConfiguration adConfiguration) {
-        return new ViewGestureDetector(context, view, adConfiguration);
-    }
-}
-
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/Base64.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/Base64.java
deleted file mode 100644
index 5a2aebe0..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/Base64.java
+++ /dev/null
@@ -1,725 +0,0 @@
-package com.mopub.mobileads.util;
-
-import java.io.UnsupportedEncodingException;
-
-/**
- * Utilities for encoding and decoding the Base64 representation of
- * binary data.  See RFCs <a
- * href="http://www.ietf.org/rfc/rfc2045.txt">2045</a> and <a
- * href="http://www.ietf.org/rfc/rfc3548.txt">3548</a>.
- */
-public class Base64 {
-    /**
-     * Default values for encoder/decoder flags.
-     */
-    public static final int DEFAULT = 0;
-
-    /**
-     * Encoder flag bit to omit the padding '=' characters at the end
-     * of the output (if any).
-     */
-    public static final int NO_PADDING = 1;
-
-    /**
-     * Encoder flag bit to omit all line terminators (i.e., the output
-     * will be on one long line).
-     */
-    public static final int NO_WRAP = 2;
-
-    /**
-     * Encoder flag bit to indicate lines should be terminated with a
-     * CRLF pair instead of just an LF.  Has no effect if {@code
-     * NO_WRAP} is specified as well.
-     */
-    public static final int CRLF = 4;
-
-    /**
-     * Encoder/decoder flag bit to indicate using the "URL and
-     * filename safe" variant of Base64 (see RFC 3548 section 4) where
-     * {@code -} and {@code _} are used in place of {@code +} and
-     * {@code /}.
-     */
-    public static final int URL_SAFE = 8;
-
-    /**
-     * Flag to pass to Base64OutputStream to indicate that it
-     * should not close the output stream it is wrapping when it
-     * itself is closed.
-     */
-    public static final int NO_CLOSE = 16;
-
-    //  --------------------------------------------------------
-    //  shared code
-    //  --------------------------------------------------------
-
-    /* package */ static abstract class Coder {
-        public byte[] output;
-        public int op;
-
-        /**
-         * Encode/decode another block of input data.  this.output is
-         * provided by the caller, and must be big enough to hold all
-         * the coded data.  On exit, this.opwill be set to the length
-         * of the coded data.
-         *
-         * @param finish true if this is the final call to process for
-         *        this object.  Will finalize the coder state and
-         *        include any final bytes in the output.
-         *
-         * @return true if the input so far is good; false if some
-         *         error has been detected in the input stream..
-         */
-        public abstract boolean process(byte[] input, int offset, int len, boolean finish);
-
-        /**
-         * @return the maximum number of bytes a call to process()
-         * could produce for the given number of input bytes.  This may
-         * be an overestimate.
-         */
-        public abstract int maxOutputSize(int len);
-    }
-
-    //  --------------------------------------------------------
-    //  decoding
-    //  --------------------------------------------------------
-
-    /**
-     * Decode the Base64-encoded data in input and return the data in
-     * a new byte array.
-     *
-     * <p>The padding '=' characters at the end are considered optional, but
-     * if any are present, there must be the correct number of them.
-     *
-     * @param str    the input String to decode, which is converted to
-     *               bytes using the default charset
-     * @param flags  controls certain features of the decoded output.
-     *               Pass {@code DEFAULT} to decode standard Base64.
-     *
-     * @throws IllegalArgumentException if the input contains
-     * incorrect padding
-     */
-    public static byte[] decode(String str, int flags) {
-        return decode(str.getBytes(), flags);
-    }
-
-    /**
-     * Decode the Base64-encoded data in input and return the data in
-     * a new byte array.
-     *
-     * <p>The padding '=' characters at the end are considered optional, but
-     * if any are present, there must be the correct number of them.
-     *
-     * @param input the input array to decode
-     * @param flags  controls certain features of the decoded output.
-     *               Pass {@code DEFAULT} to decode standard Base64.
-     *
-     * @throws IllegalArgumentException if the input contains
-     * incorrect padding
-     */
-    public static byte[] decode(byte[] input, int flags) {
-        return decode(input, 0, input.length, flags);
-    }
-
-    /**
-     * Decode the Base64-encoded data in input and return the data in
-     * a new byte array.
-     *
-     * <p>The padding '=' characters at the end are considered optional, but
-     * if any are present, there must be the correct number of them.
-     *
-     * @param input  the data to decode
-     * @param offset the position within the input array at which to start
-     * @param len    the number of bytes of input to decode
-     * @param flags  controls certain features of the decoded output.
-     *               Pass {@code DEFAULT} to decode standard Base64.
-     *
-     * @throws IllegalArgumentException if the input contains
-     * incorrect padding
-     */
-    public static byte[] decode(byte[] input, int offset, int len, int flags) {
-        // Allocate space for the most data the input could represent.
-        // (It could contain less if it contains whitespace, etc.)
-        Decoder decoder = new Decoder(flags, new byte[len*3/4]);
-
-        if (!decoder.process(input, offset, len, true)) {
-            throw new IllegalArgumentException("bad base-64");
-        }
-
-        // Maybe we got lucky and allocated exactly enough output space.
-        if (decoder.op == decoder.output.length) {
-            return decoder.output;
-        }
-
-        // Need to shorten the array, so allocate a new one of the
-        // right size and copy.
-        byte[] temp = new byte[decoder.op];
-        System.arraycopy(decoder.output, 0, temp, 0, decoder.op);
-        return temp;
-    }
-
-    /* package */ static class Decoder extends Coder {
-        /**
-         * Lookup table for turning bytes into their position in the
-         * Base64 alphabet.
-         */
-        private static final int DECODE[] = {
-                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63,
-                52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -2, -1, -1,
-                -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
-                15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1,
-                -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
-                41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1,
-                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-        };
-
-        /**
-         * Decode lookup table for the "web safe" variant (RFC 3548
-         * sec. 4) where - and _ replace + and /.
-         */
-        private static final int DECODE_WEBSAFE[] = {
-                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1,
-                52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -2, -1, -1,
-                -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
-                15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, 63,
-                -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
-                41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1,
-                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-        };
-
-        /** Non-data values in the DECODE arrays. */
-        private static final int SKIP = -1;
-        private static final int EQUALS = -2;
-
-        /**
-         * States 0-3 are reading through the next input tuple.
-         * State 4 is having read one '=' and expecting exactly
-         * one more.
-         * State 5 is expecting no more data or padding characters
-         * in the input.
-         * State 6 is the error state; an error has been detected
-         * in the input and no future input can "fix" it.
-         */
-        private int state;   // state number (0 to 6)
-        private int value;
-
-        final private int[] alphabet;
-
-        public Decoder(int flags, byte[] output) {
-            this.output = output;
-
-            alphabet = ((flags & URL_SAFE) == 0) ? DECODE : DECODE_WEBSAFE;
-            state = 0;
-            value = 0;
-        }
-
-        /**
-         * @return an overestimate for the number of bytes {@code
-         * len} bytes could decode to.
-         */
-        public int maxOutputSize(int len) {
-            return len * 3/4 + 10;
-        }
-
-        /**
-         * Decode another block of input data.
-         *
-         * @return true if the state machine is still healthy.  false if
-         *         bad base-64 data has been detected in the input stream.
-         */
-        public boolean process(byte[] input, int offset, int len, boolean finish) {
-            if (this.state == 6) return false;
-
-            int p = offset;
-            len += offset;
-
-            // Using local variables makes the decoder about 12%
-            // faster than if we manipulate the member variables in
-            // the loop.  (Even alphabet makes a measurable
-            // difference, which is somewhat surprising to me since
-            // the member variable is final.)
-            int state = this.state;
-            int value = this.value;
-            int op = 0;
-            final byte[] output = this.output;
-            final int[] alphabet = this.alphabet;
-
-            while (p < len) {
-                // Try the fast path:  we're starting a new tuple and the
-                // next four bytes of the input stream are all data
-                // bytes.  This corresponds to going through states
-                // 0-1-2-3-0.  We expect to use this method for most of
-                // the data.
-                //
-                // If any of the next four bytes of input are non-data
-                // (whitespace, etc.), value will end up negative.  (All
-                // the non-data values in decode are small negative
-                // numbers, so shifting any of them up and or'ing them
-                // together will result in a value with its top bit set.)
-                //
-                // You can remove this whole block and the output should
-                // be the same, just slower.
-                if (state == 0) {
-                    while (p+4 <= len &&
-                            (value = ((alphabet[input[p] & 0xff] << 18) |
-                                    (alphabet[input[p+1] & 0xff] << 12) |
-                                    (alphabet[input[p+2] & 0xff] << 6) |
-                                    (alphabet[input[p+3] & 0xff]))) >= 0) {
-                        output[op+2] = (byte) value;
-                        output[op+1] = (byte) (value >> 8);
-                        output[op] = (byte) (value >> 16);
-                        op += 3;
-                        p += 4;
-                    }
-                    if (p >= len) break;
-                }
-
-                // The fast path isn't available -- either we've read a
-                // partial tuple, or the next four input bytes aren't all
-                // data, or whatever.  Fall back to the slower state
-                // machine implementation.
-
-                int d = alphabet[input[p++] & 0xff];
-
-                switch (state) {
-                    case 0:
-                        if (d >= 0) {
-                            value = d;
-                            ++state;
-                        } else if (d != SKIP) {
-                            this.state = 6;
-                            return false;
-                        }
-                        break;
-
-                    case 1:
-                        if (d >= 0) {
-                            value = (value << 6) | d;
-                            ++state;
-                        } else if (d != SKIP) {
-                            this.state = 6;
-                            return false;
-                        }
-                        break;
-
-                    case 2:
-                        if (d >= 0) {
-                            value = (value << 6) | d;
-                            ++state;
-                        } else if (d == EQUALS) {
-                            // Emit the last (partial) output tuple;
-                            // expect exactly one more padding character.
-                            output[op++] = (byte) (value >> 4);
-                            state = 4;
-                        } else if (d != SKIP) {
-                            this.state = 6;
-                            return false;
-                        }
-                        break;
-
-                    case 3:
-                        if (d >= 0) {
-                            // Emit the output triple and return to state 0.
-                            value = (value << 6) | d;
-                            output[op+2] = (byte) value;
-                            output[op+1] = (byte) (value >> 8);
-                            output[op] = (byte) (value >> 16);
-                            op += 3;
-                            state = 0;
-                        } else if (d == EQUALS) {
-                            // Emit the last (partial) output tuple;
-                            // expect no further data or padding characters.
-                            output[op+1] = (byte) (value >> 2);
-                            output[op] = (byte) (value >> 10);
-                            op += 2;
-                            state = 5;
-                        } else if (d != SKIP) {
-                            this.state = 6;
-                            return false;
-                        }
-                        break;
-
-                    case 4:
-                        if (d == EQUALS) {
-                            ++state;
-                        } else if (d != SKIP) {
-                            this.state = 6;
-                            return false;
-                        }
-                        break;
-
-                    case 5:
-                        if (d != SKIP) {
-                            this.state = 6;
-                            return false;
-                        }
-                        break;
-                }
-            }
-
-            if (!finish) {
-                // We're out of input, but a future call could provide
-                // more.
-                this.state = state;
-                this.value = value;
-                this.op = op;
-                return true;
-            }
-
-            // Done reading input.  Now figure out where we are left in
-            // the state machine and finish up.
-
-            switch (state) {
-                case 0:
-                    // Output length is a multiple of three.  Fine.
-                    break;
-                case 1:
-                    // Read one extra input byte, which isn't enough to
-                    // make another output byte.  Illegal.
-                    this.state = 6;
-                    return false;
-                case 2:
-                    // Read two extra input bytes, enough to emit 1 more
-                    // output byte.  Fine.
-                    output[op++] = (byte) (value >> 4);
-                    break;
-                case 3:
-                    // Read three extra input bytes, enough to emit 2 more
-                    // output bytes.  Fine.
-                    output[op++] = (byte) (value >> 10);
-                    output[op++] = (byte) (value >> 2);
-                    break;
-                case 4:
-                    // Read one padding '=' when we expected 2.  Illegal.
-                    this.state = 6;
-                    return false;
-                case 5:
-                    // Read all the padding '='s we expected and no more.
-                    // Fine.
-                    break;
-            }
-
-            this.state = state;
-            this.op = op;
-            return true;
-        }
-    }
-
-    //  --------------------------------------------------------
-    //  encoding
-    //  --------------------------------------------------------
-
-    /**
-     * Base64-encode the given data and return a newly allocated
-     * String with the result.
-     *
-     * @param input  the data to encode
-     * @param flags  controls certain features of the encoded output.
-     *               Passing {@code DEFAULT} results in output that
-     *               adheres to RFC 2045.
-     */
-    public static String encodeToString(byte[] input, int flags) {
-        try {
-            return new String(encode(input, flags), "US-ASCII");
-        } catch (UnsupportedEncodingException e) {
-            // US-ASCII is guaranteed to be available.
-            throw new AssertionError(e);
-        }
-    }
-
-    /**
-     * Base64-encode the given data and return a newly allocated
-     * String with the result.
-     *
-     * @param input  the data to encode
-     * @param offset the position within the input array at which to
-     *               start
-     * @param len    the number of bytes of input to encode
-     * @param flags  controls certain features of the encoded output.
-     *               Passing {@code DEFAULT} results in output that
-     *               adheres to RFC 2045.
-     */
-    public static String encodeToString(byte[] input, int offset, int len, int flags) {
-        try {
-            return new String(encode(input, offset, len, flags), "US-ASCII");
-        } catch (UnsupportedEncodingException e) {
-            // US-ASCII is guaranteed to be available.
-            throw new AssertionError(e);
-        }
-    }
-
-    /**
-     * Base64-encode the given data and return a newly allocated
-     * byte[] with the result.
-     *
-     * @param input  the data to encode
-     * @param flags  controls certain features of the encoded output.
-     *               Passing {@code DEFAULT} results in output that
-     *               adheres to RFC 2045.
-     */
-    public static byte[] encode(byte[] input, int flags) {
-        return encode(input, 0, input.length, flags);
-    }
-
-    /**
-     * Base64-encode the given data and return a newly allocated
-     * byte[] with the result.
-     *
-     * @param input  the data to encode
-     * @param offset the position within the input array at which to
-     *               start
-     * @param len    the number of bytes of input to encode
-     * @param flags  controls certain features of the encoded output.
-     *               Passing {@code DEFAULT} results in output that
-     *               adheres to RFC 2045.
-     */
-    public static byte[] encode(byte[] input, int offset, int len, int flags) {
-        Encoder encoder = new Encoder(flags, null);
-
-        // Compute the exact length of the array we will produce.
-        int output_len = len / 3 * 4;
-
-        // Account for the tail of the data and the padding bytes, if any.
-        if (encoder.do_padding) {
-            if (len % 3 > 0) {
-                output_len += 4;
-            }
-        } else {
-            switch (len % 3) {
-                case 0: break;
-                case 1: output_len += 2; break;
-                case 2: output_len += 3; break;
-            }
-        }
-
-        // Account for the newlines, if any.
-        if (encoder.do_newline && len > 0) {
-            output_len += (((len-1) / (3 * Encoder.LINE_GROUPS)) + 1) *
-                    (encoder.do_cr ? 2 : 1);
-        }
-
-        encoder.output = new byte[output_len];
-        encoder.process(input, offset, len, true);
-
-        assert encoder.op == output_len;
-
-        return encoder.output;
-    }
-
-    /* package */ static class Encoder extends Coder {
-        /**
-         * Emit a new line every this many output tuples.  Corresponds to
-         * a 76-character line length (the maximum allowable according to
-         * <a href="http://www.ietf.org/rfc/rfc2045.txt">RFC 2045</a>).
-         */
-        public static final int LINE_GROUPS = 19;
-
-        /**
-         * Lookup table for turning Base64 alphabet positions (6 bits)
-         * into output bytes.
-         */
-        private static final byte ENCODE[] = {
-                'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
-                'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
-                'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
-                'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/',
-        };
-
-        /**
-         * Lookup table for turning Base64 alphabet positions (6 bits)
-         * into output bytes.
-         */
-        private static final byte ENCODE_WEBSAFE[] = {
-                'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
-                'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
-                'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
-                'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '_',
-        };
-
-        final private byte[] tail;
-        /* package */ int tailLen;
-        private int count;
-
-        final public boolean do_padding;
-        final public boolean do_newline;
-        final public boolean do_cr;
-        final private byte[] alphabet;
-
-        public Encoder(int flags, byte[] output) {
-            this.output = output;
-
-            do_padding = (flags & NO_PADDING) == 0;
-            do_newline = (flags & NO_WRAP) == 0;
-            do_cr = (flags & CRLF) != 0;
-            alphabet = ((flags & URL_SAFE) == 0) ? ENCODE : ENCODE_WEBSAFE;
-
-            tail = new byte[2];
-            tailLen = 0;
-
-            count = do_newline ? LINE_GROUPS : -1;
-        }
-
-        /**
-         * @return an overestimate for the number of bytes {@code
-         * len} bytes could encode to.
-         */
-        public int maxOutputSize(int len) {
-            return len * 8/5 + 10;
-        }
-
-        public boolean process(byte[] input, int offset, int len, boolean finish) {
-            // Using local variables makes the encoder about 9% faster.
-            final byte[] alphabet = this.alphabet;
-            final byte[] output = this.output;
-            int op = 0;
-            int count = this.count;
-
-            int p = offset;
-            len += offset;
-            int v = -1;
-
-            // First we need to concatenate the tail of the previous call
-            // with any input bytes available now and see if we can empty
-            // the tail.
-
-            switch (tailLen) {
-                case 0:
-                    // There was no tail.
-                    break;
-
-                case 1:
-                    if (p+2 <= len) {
-                        // A 1-byte tail with at least 2 bytes of
-                        // input available now.
-                        v = ((tail[0] & 0xff) << 16) |
-                                ((input[p++] & 0xff) << 8) |
-                                (input[p++] & 0xff);
-                        tailLen = 0;
-                    };
-                    break;
-
-                case 2:
-                    if (p+1 <= len) {
-                        // A 2-byte tail with at least 1 byte of input.
-                        v = ((tail[0] & 0xff) << 16) |
-                                ((tail[1] & 0xff) << 8) |
-                                (input[p++] & 0xff);
-                        tailLen = 0;
-                    }
-                    break;
-            }
-
-            if (v != -1) {
-                output[op++] = alphabet[(v >> 18) & 0x3f];
-                output[op++] = alphabet[(v >> 12) & 0x3f];
-                output[op++] = alphabet[(v >> 6) & 0x3f];
-                output[op++] = alphabet[v & 0x3f];
-                if (--count == 0) {
-                    if (do_cr) output[op++] = '\r';
-                    output[op++] = '\n';
-                    count = LINE_GROUPS;
-                }
-            }
-
-            // At this point either there is no tail, or there are fewer
-            // than 3 bytes of input available.
-
-            // The main loop, turning 3 input bytes into 4 output bytes on
-            // each iteration.
-            while (p+3 <= len) {
-                v = ((input[p] & 0xff) << 16) |
-                        ((input[p+1] & 0xff) << 8) |
-                        (input[p+2] & 0xff);
-                output[op] = alphabet[(v >> 18) & 0x3f];
-                output[op+1] = alphabet[(v >> 12) & 0x3f];
-                output[op+2] = alphabet[(v >> 6) & 0x3f];
-                output[op+3] = alphabet[v & 0x3f];
-                p += 3;
-                op += 4;
-                if (--count == 0) {
-                    if (do_cr) output[op++] = '\r';
-                    output[op++] = '\n';
-                    count = LINE_GROUPS;
-                }
-            }
-
-            if (finish) {
-                // Finish up the tail of the input.  Note that we need to
-                // consume any bytes in tail before any bytes
-                // remaining in input; there should be at most two bytes
-                // total.
-
-                if (p-tailLen == len-1) {
-                    int t = 0;
-                    v = ((tailLen > 0 ? tail[t++] : input[p++]) & 0xff) << 4;
-                    tailLen -= t;
-                    output[op++] = alphabet[(v >> 6) & 0x3f];
-                    output[op++] = alphabet[v & 0x3f];
-                    if (do_padding) {
-                        output[op++] = '=';
-                        output[op++] = '=';
-                    }
-                    if (do_newline) {
-                        if (do_cr) output[op++] = '\r';
-                        output[op++] = '\n';
-                    }
-                } else if (p-tailLen == len-2) {
-                    int t = 0;
-                    v = (((tailLen > 1 ? tail[t++] : input[p++]) & 0xff) << 10) |
-                            (((tailLen > 0 ? tail[t++] : input[p++]) & 0xff) << 2);
-                    tailLen -= t;
-                    output[op++] = alphabet[(v >> 12) & 0x3f];
-                    output[op++] = alphabet[(v >> 6) & 0x3f];
-                    output[op++] = alphabet[v & 0x3f];
-                    if (do_padding) {
-                        output[op++] = '=';
-                    }
-                    if (do_newline) {
-                        if (do_cr) output[op++] = '\r';
-                        output[op++] = '\n';
-                    }
-                } else if (do_newline && op > 0 && count != LINE_GROUPS) {
-                    if (do_cr) output[op++] = '\r';
-                    output[op++] = '\n';
-                }
-
-                assert tailLen == 0;
-                assert p == len;
-            } else {
-                // Save the leftovers in tail to be consumed on the next
-                // call to encodeInternal.
-
-                if (p == len-1) {
-                    tail[tailLen++] = input[p];
-                } else if (p == len-2) {
-                    tail[tailLen++] = input[p];
-                    tail[tailLen++] = input[p+1];
-                }
-            }
-
-            this.op = op;
-            this.count = count;
-
-            return true;
-        }
-    }
-
-    private Base64() { }   // don't instantiate
-}
\ No newline at end of file
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/HttpResponses.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/HttpResponses.java
deleted file mode 100644
index 3167787d..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/HttpResponses.java
+++ /dev/null
@@ -1,46 +0,0 @@
-package com.mopub.mobileads.util;
-
-import com.mopub.common.util.ResponseHeader;
-
-import org.apache.http.Header;
-import org.apache.http.HttpResponse;
-
-import java.text.NumberFormat;
-import java.util.Locale;
-
-public class HttpResponses {
-    public static String extractHeader(HttpResponse response, ResponseHeader responseHeader) {
-        Header header = response.getFirstHeader(responseHeader.getKey());
-        return header != null ? header.getValue() : null;
-    }
-
-    public static boolean extractBooleanHeader(HttpResponse response, ResponseHeader responseHeader, boolean defaultValue) {
-        String header = extractHeader(response, responseHeader);
-        if (header == null) {
-            return defaultValue;
-        }
-        return header.equals("1");
-    }
-
-    public static Integer extractIntegerHeader(HttpResponse response, ResponseHeader responseHeader) {
-        NumberFormat numberFormat = NumberFormat.getInstance(Locale.US);
-        numberFormat.setParseIntegerOnly(true);
-
-        String headerValue = extractHeader(response, responseHeader);
-        try {
-            Number value = numberFormat.parse(headerValue.trim());
-            return value.intValue();
-        } catch (Exception e) {
-            return null;
-        }
-    }
-
-    public static int extractIntHeader(HttpResponse response, ResponseHeader responseHeader, int defaultValue) {
-        Integer headerValue = extractIntegerHeader(response, responseHeader);
-        if (headerValue == null) {
-            return defaultValue;
-        }
-
-        return headerValue;
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/Interstitials.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/Interstitials.java
deleted file mode 100644
index a4e4d384..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/Interstitials.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.mopub.mobileads.util;
-
-import android.graphics.Color;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.Button;
-
-public class Interstitials {
-    private Interstitials(){}
-
-    public static boolean addCloseEventRegion(final ViewGroup viewGroup, final ViewGroup.LayoutParams layoutParams, final View.OnClickListener onClickListener) {
-        if (viewGroup == null || viewGroup.getContext() == null) {
-            return false;
-        }
-
-        // An area of the screen that will always lead to an expanded MRAID ad collapsing.
-        final Button closeEventRegion = new Button(viewGroup.getContext());
-        closeEventRegion.setVisibility(View.VISIBLE);
-        closeEventRegion.setBackgroundColor(Color.TRANSPARENT);
-        closeEventRegion.setOnClickListener(onClickListener);
-
-        viewGroup.addView(closeEventRegion, layoutParams);
-
-        return true;
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/Mraids.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/Mraids.java
deleted file mode 100644
index da58d1f5..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/Mraids.java
+++ /dev/null
@@ -1,50 +0,0 @@
-package com.mopub.mobileads.util;
-
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.PackageManager;
-import android.net.Uri;
-import android.os.Environment;
-
-import com.mopub.common.util.IntentUtils;
-import com.mopub.common.util.VersionCode;
-import com.mopub.mobileads.MraidVideoPlayerActivity;
-
-import static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;
-import static android.os.Environment.MEDIA_MOUNTED;
-
-public class Mraids {
-    public static final String ANDROID_CALENDAR_CONTENT_TYPE = "vnd.android.cursor.item/event";
-
-    public static boolean isTelAvailable(Context context) {
-        Intent telIntent = new Intent(Intent.ACTION_DIAL);
-        telIntent.setData(Uri.parse("tel:"));
-
-        return IntentUtils.deviceCanHandleIntent(context, telIntent);
-    }
-
-    public static boolean isSmsAvailable(Context context) {
-        Intent smsIntent = new Intent(Intent.ACTION_VIEW);
-        smsIntent.setData(Uri.parse("sms:"));
-
-        return IntentUtils.deviceCanHandleIntent(context, smsIntent);
-    }
-
-    public static boolean isStorePictureSupported(Context context) {
-        return MEDIA_MOUNTED.equals(Environment.getExternalStorageState())
-                && context.checkCallingOrSelfPermission(WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
-    }
-
-    public static boolean isCalendarAvailable(Context context) {
-        Intent calendarIntent = new Intent(Intent.ACTION_INSERT).setType(ANDROID_CALENDAR_CONTENT_TYPE);
-
-        return VersionCode.currentApiLevel().isAtLeast(VersionCode.ICE_CREAM_SANDWICH)
-                && IntentUtils.deviceCanHandleIntent(context, calendarIntent);
-    }
-
-    public static boolean isInlineVideoAvailable(Context context) {
-        Intent mraidVideoIntent = new Intent(context, MraidVideoPlayerActivity.class);
-
-        return IntentUtils.deviceCanHandleIntent(context, mraidVideoIntent);
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/Utils.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/Utils.java
deleted file mode 100644
index d96476f4..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/Utils.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.mopub.mobileads.util;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-
-import com.mopub.common.logging.MoPubLog;
-
-public class Utils {
-    private Utils() {}
-
-    public static boolean executeIntent(Context context, Intent intent, String errorMessage) {
-        try {
-            if (!(context instanceof Activity)) {
-                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-            }
-            context.startActivity(intent);
-        } catch (Exception e) {
-            MoPubLog.d((errorMessage != null)
-                    ? errorMessage
-                    : "Unable to start intent.");
-            return false;
-        }
-        return true;
-    }
-}
\ No newline at end of file
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/Constants.java b/mopub-sdk/src/main/java/com/mopub/nativeads/Constants.java
deleted file mode 100644
index ad256b8b..00000000
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/Constants.java
+++ /dev/null
@@ -1,11 +0,0 @@
-package com.mopub.nativeads;
-
-public class Constants {
-    public static final String LOGTAG = "MoPub Native";
-
-    static final String NATIVE_HOST = "ads.mopub.com";
-    static final String NATIVE_HANDLER = "/m/ad";
-
-    static final String POSITIONING_HOST = "ads.mopub.com";
-    static final String POSITIONING_HANDLER = "/m/pos";
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDiskTaskManager.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDiskTaskManager.java
deleted file mode 100644
index f355fe69..00000000
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDiskTaskManager.java
+++ /dev/null
@@ -1,67 +0,0 @@
-package com.mopub.nativeads;
-
-import android.graphics.Bitmap;
-import com.mopub.common.CacheService;
-
-import java.util.*;
-
-import static com.mopub.common.CacheService.DiskLruCacheGetListener;
-
-class ImageDiskTaskManager extends TaskManager<Bitmap> {
-    private final List<String> mUrls;
-    private final int mMaxImageWidth;
-
-    ImageDiskTaskManager(final List<String> urls,
-            final TaskManagerListener<Bitmap> imageTaskManagerListener,
-            final int maxImageWidth)
-            throws IllegalArgumentException {
-        super(urls, imageTaskManagerListener);
-        mMaxImageWidth = maxImageWidth;
-        mUrls = urls;
-    }
-
-    @Override
-    void execute() {
-        if (mUrls.isEmpty()) {
-            mImageTaskManagerListener.onSuccess(mResults);
-        }
-
-        ImageDiskTaskListener imageDiskTaskListener = new ImageDiskTaskListener(mMaxImageWidth);
-        for (final String url : mUrls) {
-            CacheService.getFromDiskCacheAsync(url, imageDiskTaskListener);
-        }
-    }
-
-    void failAllTasks() {
-        if (mFailed.compareAndSet(false, true)) {
-            mImageTaskManagerListener.onFail();
-        }
-    }
-
-    private class ImageDiskTaskListener implements DiskLruCacheGetListener {
-
-        private final int mTargetWidth;
-
-        ImageDiskTaskListener(final int targetWidth) {
-            mTargetWidth = targetWidth;
-        }
-
-        @Override
-        public void onComplete(final String key, final byte[] content) {
-            if (key == null) {
-                failAllTasks();
-                return;
-            } else {
-                Bitmap bitmap = null;
-                if (content != null) {
-                     bitmap = ImageService.byteArrayToBitmap(content, mTargetWidth);
-                }
-                mResults.put(key, bitmap);
-            }
-
-            if (mCompletedCount.incrementAndGet() == mSize) {
-                mImageTaskManagerListener.onSuccess(mResults);
-            }
-        }
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDownloadTaskManager.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDownloadTaskManager.java
deleted file mode 100644
index b022aa2f..00000000
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDownloadTaskManager.java
+++ /dev/null
@@ -1,85 +0,0 @@
-package com.mopub.nativeads;
-
-import com.mopub.common.DownloadResponse;
-import com.mopub.common.DownloadTask;
-import com.mopub.common.util.AsyncTasks;
-import com.mopub.common.logging.MoPubLog;
-
-import org.apache.http.HttpStatus;
-import org.apache.http.client.methods.HttpGet;
-import org.apache.http.client.methods.HttpUriRequest;
-
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import static com.mopub.common.DownloadTask.DownloadTaskListener;
-import static java.util.Map.Entry;
-
-class ImageDownloadTaskManager extends TaskManager<DownloadResponse> {
-
-    private final Map<HttpUriRequest, DownloadTask> mDownloadTasks;
-    private final int mRequestedWidth;
-
-    ImageDownloadTaskManager(final List<String> urls,
-                             final TaskManagerListener<DownloadResponse> imageTaskManagerListener,
-                             final int requestedWidth)
-            throws IllegalArgumentException {
-        super(urls, imageTaskManagerListener);
-
-        mRequestedWidth = requestedWidth;
-
-        final DownloadTaskListener downloadTaskListener = new ImageDownloadTaskListener();
-        mDownloadTasks = new HashMap<HttpUriRequest, DownloadTask>(urls.size());
-        for (final String url : urls) {
-            final HttpGet httpGet = new HttpGet(url);
-            mDownloadTasks.put(httpGet, new DownloadTask(downloadTaskListener));
-        }
-    }
-
-    @Override
-    void execute() {
-        if (mDownloadTasks.isEmpty()) {
-            mImageTaskManagerListener.onSuccess(mResults);
-        }
-
-        for (final Entry<HttpUriRequest, DownloadTask> entry : mDownloadTasks.entrySet()) {
-            final HttpUriRequest httpUriRequest = entry.getKey();
-            final DownloadTask downloadTask = entry.getValue();
-
-            try {
-                AsyncTasks.safeExecuteOnExecutor(downloadTask, httpUriRequest);
-            } catch (Exception e) {
-                MoPubLog.d("Failed to download image", e);
-
-                mImageTaskManagerListener.onFail();
-            }
-        }
-    }
-
-    void failAllTasks() {
-        if (mFailed.compareAndSet(false, true)) {
-            for (final DownloadTask downloadTask : mDownloadTasks.values()) {
-                downloadTask.cancel(true);
-            }
-            mImageTaskManagerListener.onFail();
-        }
-    }
-
-    private class ImageDownloadTaskListener implements DownloadTaskListener {
-        @Override
-        public void onComplete(final String url, final DownloadResponse downloadResponse) {
-            if (downloadResponse == null || downloadResponse.getStatusCode() != HttpStatus.SC_OK) {
-                MoPubLog.d("Failed to download image: " + url);
-                failAllTasks();
-                return;
-            }
-
-            MoPubLog.d("Successfully downloaded image bye array: " + url);
-            mResults.put(url, downloadResponse);
-            if (mCompletedCount.incrementAndGet() == mSize) {
-                mImageTaskManagerListener.onSuccess(mResults);
-            }
-        }
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageService.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageService.java
deleted file mode 100644
index d020becc..00000000
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageService.java
+++ /dev/null
@@ -1,287 +0,0 @@
-package com.mopub.nativeads;
-
-import android.annotation.TargetApi;
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.Point;
-import android.view.Display;
-import android.view.WindowManager;
-
-import com.mopub.common.CacheService;
-import com.mopub.common.DownloadResponse;
-import com.mopub.common.VisibleForTesting;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.VersionCode;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import static android.graphics.BitmapFactory.Options;
-import static android.graphics.BitmapFactory.decodeByteArray;
-import static com.mopub.common.util.VersionCode.HONEYCOMB_MR2;
-import static com.mopub.nativeads.TaskManager.TaskManagerListener;
-import static java.util.Map.Entry;
-
-class ImageService {
-    private static final int TWO_MEGABYTES = 2097152;
-    private static int sTargetWidth = -1;
-
-    interface ImageServiceListener {
-        void onSuccess(Map<String, Bitmap> bitmaps);
-        void onFail();
-    }
-
-    @TargetApi(13)
-    @VisibleForTesting
-    static void initialize(Context context) {
-        if (sTargetWidth == -1) {
-            // Get Display Options
-            WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
-            Display display = wm.getDefaultDisplay();
-            Point size = new Point();
-            if (VersionCode.currentApiLevel().isBelow(HONEYCOMB_MR2)) {
-                size.set(display.getWidth(), display.getHeight());
-            } else {
-                display.getSize(size);
-            }
-
-            // Make our images no wider than the skinny side of the display.
-            sTargetWidth = Math.min(size.x, size.y);
-        }
-    }
-
-    static void get(final Context context, final List<String> urls, final ImageServiceListener imageServiceListener) {
-        initialize(context);
-        CacheService.initialize(context);
-        get(urls, imageServiceListener);
-    }
-
-    static void get(final List<String> urls, final ImageServiceListener imageServiceListener) {
-        final Map<String, Bitmap> cacheBitmaps = new HashMap<String, Bitmap>(urls.size());
-        final List<String> urlCacheMisses = getBitmapsFromMemoryCache(urls, cacheBitmaps);
-
-        if (urlCacheMisses.isEmpty()) {
-            imageServiceListener.onSuccess(cacheBitmaps);
-            return;
-        }
-
-        final ImageDiskTaskManager imageDiskTaskManager;
-        try {
-            imageDiskTaskManager = new ImageDiskTaskManager(
-                    urlCacheMisses,
-                    new ImageDiskTaskManagerListener(imageServiceListener, cacheBitmaps),
-                    sTargetWidth
-            );
-        } catch (IllegalArgumentException e) {
-            MoPubLog.d("Unable to initialize ImageDiskTaskManager", e);
-            imageServiceListener.onFail();
-            return;
-        }
-
-        imageDiskTaskManager.execute();
-    }
-
-
-
-    static void putBitmapInCache(final String key, final Bitmap bitmap) {
-        CacheService.putToBitmapCache(key, bitmap);
-    }
-
-    static void putDataInCache(final String key, final Bitmap bitmap, final byte[] byteData) {
-        CacheService.putToBitmapCache(key, bitmap);
-        CacheService.putToDiskCacheAsync(key, byteData);
-    }
-
-    static List<String> getBitmapsFromMemoryCache(final List<String> urls, final Map<String, Bitmap> hits) {
-        final List<String> cacheMisses = new ArrayList<String>();
-        for (final String url : urls) {
-            final Bitmap bitmap = getBitmapFromMemoryCache(url);
-
-            if (bitmap != null) {
-                hits.put(url, bitmap);
-            } else {
-                cacheMisses.add(url);
-            }
-        }
-
-        return cacheMisses;
-    }
-
-    static Bitmap getBitmapFromMemoryCache(final String key) {
-        return CacheService.getFromBitmapCache(key);
-    }
-
-    private static class ImageDiskTaskManagerListener implements TaskManagerListener<Bitmap> {
-        final private ImageServiceListener mImageServiceListener;
-        final private Map<String, Bitmap> mBitmaps;
-
-        ImageDiskTaskManagerListener(final ImageServiceListener imageServiceListener,
-                final Map<String, Bitmap> bitmaps) {
-            mImageServiceListener = imageServiceListener;
-            mBitmaps = bitmaps;
-        }
-
-        @Override
-        public void onSuccess(final Map<String, Bitmap> diskBitmaps) {
-            final List<String> urlDiskMisses = new ArrayList<String>();
-            for (final Entry <String, Bitmap> entry : diskBitmaps.entrySet()) {
-                if (entry.getValue() == null) {
-                    urlDiskMisses.add(entry.getKey());
-                } else {
-                    putBitmapInCache(entry.getKey(), entry.getValue());
-                    mBitmaps.put(entry.getKey(), entry.getValue());
-                }
-            }
-
-            if (urlDiskMisses.isEmpty()) {
-                mImageServiceListener.onSuccess(mBitmaps);
-            } else {
-
-                final ImageDownloadTaskManager imageDownloadTaskManager;
-                try {
-                    imageDownloadTaskManager = new ImageDownloadTaskManager(
-                            urlDiskMisses,
-                            new ImageDownloadResponseListener(mImageServiceListener, mBitmaps),
-                            sTargetWidth
-                    );
-                } catch (IllegalArgumentException e) {
-                    MoPubLog.d("Unable to initialize ImageDownloadTaskManager", e);
-                    mImageServiceListener.onFail();
-                    return;
-                }
-
-                imageDownloadTaskManager.execute();
-            }
-        }
-
-        @Override
-        public void onFail() {
-            mImageServiceListener.onFail();
-        }
-    }
-
-    private static class ImageDownloadResponseListener implements TaskManagerListener<DownloadResponse> {
-        private final ImageServiceListener mImageServiceListener;
-        private final Map<String, Bitmap> mBitmaps;
-
-        ImageDownloadResponseListener(final ImageServiceListener imageServiceListener,
-                final Map<String, Bitmap> bitmaps) {
-            mImageServiceListener = imageServiceListener;
-            mBitmaps = bitmaps;
-        }
-
-        @Override
-        public void onSuccess(final Map<String, DownloadResponse> responses) {
-            for (final Entry<String, DownloadResponse> entry : responses.entrySet()) {
-                final Bitmap bitmap = asBitmap(entry.getValue(), sTargetWidth);
-                final String key = entry.getKey();
-                if (bitmap == null) {
-                    MoPubLog.d("Error decoding image for url: " + entry.getKey());
-                    onFail();
-                    return;
-                }
-
-                putDataInCache(key, bitmap, entry.getValue().getByteArray());
-                mBitmaps.put(key, bitmap);
-            }
-            mImageServiceListener.onSuccess(mBitmaps);
-        }
-
-        @Override
-        public void onFail() {
-            mImageServiceListener.onFail();
-        }
-    }
-
-    public static Bitmap asBitmap(final DownloadResponse downloadResponse, final int requestedWidth) {
-        if (downloadResponse == null) {
-            return null;
-        }
-
-        final byte[] bytes = downloadResponse.getByteArray();
-        return byteArrayToBitmap(bytes, requestedWidth);
-    }
-
-    public static Bitmap byteArrayToBitmap(final byte[] bytes, final int requestedWidth) {
-        if (requestedWidth <= 0) {
-            return null;
-        }
-
-        Options options = new Options();
-        options.inJustDecodeBounds = true;
-        decodeByteArray(bytes, 0, bytes.length, options);
-        options.inSampleSize = calculateInSampleSize(options.outWidth, requestedWidth);
-
-        // If the bitmap will be very large, downsample more to avoid blowing up the heap.
-        while (getMemBytes(options) > TWO_MEGABYTES) {
-            options.inSampleSize *= 2;
-        }
-
-        options.inJustDecodeBounds = false;
-        Bitmap bitmap = decodeByteArray(bytes, 0, bytes.length, options);
-        if (bitmap == null) {
-            return null;
-        }
-
-        final int subsampleWidth = bitmap.getWidth();
-
-        // If needed, scale the bitmap so it's exactly the requested width.
-        if (subsampleWidth > requestedWidth) {
-            final int requestedHeight = (int)(bitmap.getHeight() * (double) requestedWidth / bitmap.getWidth());
-            Bitmap subsampledBitmap = bitmap;
-            bitmap = Bitmap.createScaledBitmap(subsampledBitmap, requestedWidth, requestedHeight, true);
-            subsampledBitmap.recycle();
-        }
-        
-        return bitmap;
-    }
-
-    /**
-     * Returns the size of the byte array that the bitmap described by the options object will consume.
-     */
-    public static long getMemBytes(Options options) {
-        long memBytes = 4 * (long) options.outWidth * (long) options.outHeight / options.inSampleSize / options.inSampleSize;
-        return memBytes;
-    }
-
-    /**
-     * Calculate the largest inSampleSize value that is a power of 2 and keeps the
-     * width greater than or equal to the requested width.
-     */
-    public static int calculateInSampleSize(final int nativeWidth, int requestedWidth) {
-        int inSampleSize = 1;
-
-        if (nativeWidth > requestedWidth) {
-            final int halfWidth = nativeWidth / 2;
-
-            while ((halfWidth / inSampleSize) >= requestedWidth) {
-                inSampleSize *= 2;
-            }
-        }
-
-        return inSampleSize;
-    }
-
-    // Testing, also performs disk IO
-    @Deprecated
-    static Bitmap getBitmapFromDiskCache(final String key) {
-        Bitmap bitmap = null;
-        byte[] bytes = CacheService.getFromDiskCache(key);
-        if (bytes != null) {
-            bitmap = byteArrayToBitmap(bytes, sTargetWidth);
-        }
-        return bitmap;
-    }
-
-    @VisibleForTesting
-    static void clear() {
-        sTargetWidth = -1;
-    }
-
-    @VisibleForTesting
-    static int getTargetWidth() {
-        return sTargetWidth;
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageViewService.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageViewService.java
deleted file mode 100644
index ef337e0c..00000000
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageViewService.java
+++ /dev/null
@@ -1,87 +0,0 @@
-package com.mopub.nativeads;
-
-import android.graphics.Bitmap;
-import android.widget.ImageView;
-
-import com.mopub.common.VisibleForTesting;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.Utils;
-
-import java.lang.ref.WeakReference;
-import java.util.Arrays;
-import java.util.Map;
-import java.util.WeakHashMap;
-
-import static com.mopub.nativeads.ImageService.ImageServiceListener;
-
-class ImageViewService {
-    // This is used instead of View.setTag, which causes a memory leak in 2.3
-    // and earlier: https://code.google.com/p/android/issues/detail?id=18273
-    private static final WeakHashMap<ImageView, Long> sImageViewRequestIds =
-            new WeakHashMap<ImageView, Long>();
-
-    private ImageViewService(){}
-
-    static void loadImageView(final String url, final ImageView imageView) {
-        if (imageView == null) {
-            MoPubLog.d("Attempted to load an image into a null ImageView");
-            return;
-        }
-
-        // Blank out previous image content while waiting for request to return
-        imageView.setImageDrawable(null);
-
-        if (url != null) {
-            // Unique id to identify this async image request
-            long uniqueId = Utils.generateUniqueId();
-            sImageViewRequestIds.put(imageView, uniqueId);
-
-            // Async call to get image from memory cache, disk and then network
-            ImageService.get(
-                    Arrays.asList(url),
-                    new MyImageViewServiceListener(url, imageView, uniqueId)
-            );
-        }
-    }
-
-    private static class MyImageViewServiceListener implements ImageServiceListener {
-        private final WeakReference<ImageView> mImageView;
-        private final String mUrl;
-        private final long mUniqueId;
-
-        MyImageViewServiceListener(final String url, final ImageView imageView, final long uniqueId) {
-            mUrl = url;
-            mImageView = new WeakReference<ImageView>(imageView);
-            mUniqueId = uniqueId;
-        }
-
-        @Override
-        public void onSuccess(final Map<String, Bitmap> bitmaps) {
-            final ImageView imageView = mImageView.get();
-            if (imageView == null || bitmaps == null || !bitmaps.containsKey(mUrl)) {
-                return;
-            }
-            final Long uniqueId = sImageViewRequestIds.get(imageView);
-            if (uniqueId != null && mUniqueId == uniqueId) {
-                imageView.setImageBitmap(bitmaps.get(mUrl));
-            }
-        }
-
-        @Override
-        public void onFail() {
-            MoPubLog.d("Failed to load image for ImageView");
-        }
-    }
-
-    @VisibleForTesting
-    @Deprecated
-    static Long getImageViewUniqueId(final ImageView imageView) {
-        return sImageViewRequestIds.get(imageView);
-    }
-
-    @VisibleForTesting
-    @Deprecated
-    static void setImageViewUniqueId(final ImageView imageView, final long uniqueId) {
-        sImageViewRequestIds.put(imageView, uniqueId);
-    }
-}
