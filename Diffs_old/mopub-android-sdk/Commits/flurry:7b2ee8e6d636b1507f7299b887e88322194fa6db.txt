diff --git a/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java b/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java
index 30070caf..3cf80a59 100644
--- a/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java
+++ b/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java
@@ -3,10 +3,12 @@
 import android.content.Context;
 import android.os.Build;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.text.TextUtils;
 import android.util.Log;
 
 import com.flurry.android.FlurryAgent;
+import com.flurry.android.FlurryAgentListener;
 
 public final class FlurryAgentWrapper {
     public static final String PARAM_API_KEY = "apiKey";
@@ -34,7 +36,9 @@ private FlurryAgentWrapper() {
         FlurryAgent.addOrigin(ORIGIN_IDENTIFIER, ORIGIN_VERSION);
     }
 
-    public synchronized void startSession(@NonNull final Context context, final String apiKey) {
+    public synchronized void startSession(@NonNull final Context context,
+                                          final String apiKey,
+                                          @Nullable FlurryAgentListener flurryAgentListener) {
         // validate parameters
         if (TextUtils.isEmpty(apiKey)) {
             return;
@@ -42,7 +46,8 @@ public synchronized void startSession(@NonNull final Context context, final Stri
 
         // init
         if (!FlurryAgent.isSessionActive()) {
-            mAgentBuilder.build(context, apiKey);
+            mAgentBuilder.withListener(flurryAgentListener) // withListener allows nulls
+                    .build(context, apiKey);
 
             // sessions are automatic on ICS+
             if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
@@ -68,5 +73,9 @@ public synchronized void endSession(final Context context) {
             FlurryAgent.onEndSession(context);
         }
     }
+
+    public synchronized boolean isSessionActive() {
+        return FlurryAgent.isSessionActive();
+    }
 }
 
diff --git a/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java b/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java
index acd4a805..c68d973a 100644
--- a/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java
+++ b/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java
@@ -60,7 +60,7 @@ protected void loadBanner(Context context,
         String apiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
         mAdSpaceName = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
 
-        FlurryAgentWrapper.getInstance().startSession(context, apiKey);
+        FlurryAgentWrapper.getInstance().startSession(context, apiKey, null);
 
         Log.d(LOG_TAG, "fetch Flurry Ad (" + mAdSpaceName + ") -- " + mLayout.toString());
         mBanner = new FlurryAdBanner(mContext, mLayout, mAdSpaceName);
diff --git a/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java b/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java
index 34951223..07ac6ae5 100644
--- a/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java
+++ b/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java
@@ -58,7 +58,7 @@ protected void loadInterstitial(Context context,
         String apiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
         mAdSpaceName = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
 
-        FlurryAgentWrapper.getInstance().startSession(context, apiKey);
+        FlurryAgentWrapper.getInstance().startSession(context, apiKey, null);
 
         Log.d(LOG_TAG, "fetch Flurry ad (" + mAdSpaceName + ")");
         mInterstitial = new FlurryAdInterstitial(mContext, mAdSpaceName);
diff --git a/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java b/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java
index 415df4eb..4bc81c0a 100644
--- a/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java
+++ b/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java
@@ -9,6 +9,7 @@
 import android.view.View;
 import android.view.ViewGroup;
 
+import com.flurry.android.FlurryAgentListener;
 import com.flurry.android.ads.FlurryAdErrorType;
 import com.flurry.android.ads.FlurryAdNative;
 import com.flurry.android.ads.FlurryAdNativeAsset;
@@ -81,32 +82,26 @@ protected void loadNativeAd(@NonNull final Activity activity,
             flurryApiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
             flurryAdSpace = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
 
-            FlurryAgentWrapper.getInstance().startSession(activity, flurryApiKey);
+            if (FlurryAgentWrapper.getInstance().isSessionActive()) {
+                fetchFlurryAd(activity, flurryAdSpace, localExtras, customEventNativeListener);
+            } else {
+                final FlurryAgentListener flurryAgentListener = new FlurryAgentListener() {
+                    @Override
+                    public void onSessionStarted() {
+                        fetchFlurryAd(activity, flurryAdSpace, localExtras,
+                                customEventNativeListener);
+                    }
+                };
+
+                FlurryAgentWrapper.getInstance().startSession(activity, flurryApiKey,
+                        flurryAgentListener);
+            }
         } else {
             customEventNativeListener.onNativeAdFailed(
                     NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
             Log.i(LOG_TAG, "Failed Native AdFetch: Missing required server extras" +
                     " [FLURRY_APIKEY and/or FLURRY_ADSPACE].");
-            return;
-        }
-
-        FlurryAdNative flurryAdNative = new FlurryAdNative(activity, flurryAdSpace);
-
-        if (localExtras.containsKey(LOCAL_EXTRA_TEST_MODE) &&
-                localExtras.get(LOCAL_EXTRA_TEST_MODE) instanceof Boolean) {
-            FlurryAdTargeting targeting = new FlurryAdTargeting();
-            targeting.setEnableTestAds((Boolean) localExtras.get(LOCAL_EXTRA_TEST_MODE));
-        }
-
-        final FlurryBaseNativeAd flurryNativeAd;
-        if (shouldAllowVideoNativeAds()) {
-            flurryNativeAd = new FlurryVideoEnabledNativeAd(activity, flurryAdNative,
-                    customEventNativeListener);
-        } else {
-            flurryNativeAd = new FlurryStaticNativeAd(activity, flurryAdNative,
-                    customEventNativeListener);
         }
-        flurryNativeAd.fetchAd();
     }
 
     private static synchronized void mapNativeAd(@NonNull final FlurryBaseNativeAd mopubSupportedAd,
@@ -190,6 +185,28 @@ private boolean validateExtras(final Map<String, String> serverExtras) {
         return (!TextUtils.isEmpty(flurryApiKey) && !TextUtils.isEmpty(flurryAdSpace));
     }
 
+    private void fetchFlurryAd(@NonNull Activity activity, String flurryAdSpace,
+                               @NonNull Map<String, Object> localExtras,
+                               @NonNull CustomEventNativeListener customEventNativeListener) {
+        final FlurryAdNative flurryAdNative = new FlurryAdNative(activity, flurryAdSpace);
+
+        if (localExtras.containsKey(LOCAL_EXTRA_TEST_MODE) &&
+                localExtras.get(LOCAL_EXTRA_TEST_MODE) instanceof Boolean) {
+            final FlurryAdTargeting targeting = new FlurryAdTargeting();
+            targeting.setEnableTestAds((Boolean) localExtras.get(LOCAL_EXTRA_TEST_MODE));
+        }
+
+        final FlurryBaseNativeAd flurryNativeAd;
+        if (shouldAllowVideoNativeAds()) {
+            flurryNativeAd = new FlurryVideoEnabledNativeAd(activity, flurryAdNative,
+                    customEventNativeListener);
+        } else {
+            flurryNativeAd = new FlurryStaticNativeAd(activity, flurryAdNative,
+                    customEventNativeListener);
+        }
+        flurryNativeAd.fetchAd();
+    }
+
     private boolean shouldAllowVideoNativeAds() {
         try {
             Class.forName("com.mopub.nativeads.FlurryNativeAdRenderer");
@@ -210,8 +227,8 @@ private boolean shouldAllowVideoNativeAds() {
 
         private @NonNull final Context mContext;
         private @NonNull final CustomEventNativeListener mCustomEventNativeListener;
-        private @NonNull FlurryAdNative mFlurryAdNative;
-        private FlurryAdNativeListener mFlurryNativelistener = new FlurryBaseAdListener(this) {
+        private @NonNull final FlurryAdNative mFlurryAdNative;
+        private final FlurryAdNativeListener mFlurryNativelistener = new FlurryBaseAdListener(this) {
             @Override
             public void onClicked(final FlurryAdNative flurryAdNative) {
                 super.onClicked(flurryAdNative);
@@ -331,8 +348,8 @@ public void onImagesFailedToCache(final NativeErrorCode errorCode) {
     static class FlurryVideoEnabledNativeAd extends BaseNativeAd implements FlurryBaseNativeAd {
         private @NonNull final Context mContext;
         private @NonNull final CustomEventNativeListener mCustomEventNativeListener;
-        private @NonNull FlurryAdNative mFlurryAdNative;
-        private FlurryAdNativeListener mFlurryNativelistener = new FlurryBaseAdListener(this) {
+        private @NonNull final FlurryAdNative mFlurryAdNative;
+        private final FlurryAdNativeListener mFlurryNativelistener = new FlurryBaseAdListener(this) {
             @Override
             public void onClicked(final FlurryAdNative flurryAdNative) {
                 super.onClicked(flurryAdNative);
@@ -370,9 +387,6 @@ public void onError(final FlurryAdNative adNative,
                                    @NonNull CustomEventNativeListener mCustomEventNativeListener) {
             this.mContext = context;
             this.mFlurryAdNative = adNative;
-            FlurryAdTargeting targeting = new FlurryAdTargeting();
-            targeting.setEnableTestAds(true);
-            mFlurryAdNative.setTargeting(targeting);
             this.mCustomEventNativeListener = mCustomEventNativeListener;
             this.mExtras = new HashMap<>();
         }
