diff --git a/extras/src/com/mopub/mobileads/UnityInterstitial.java b/extras/src/com/mopub/mobileads/UnityInterstitial.java
deleted file mode 100644
index 4e2c9ece..00000000
--- a/extras/src/com/mopub/mobileads/UnityInterstitial.java
+++ /dev/null
@@ -1,118 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-
-import com.unity3d.ads.mediation.IUnityAdsExtendedListener;
-import com.unity3d.ads.UnityAds;
-
-import java.util.Map;
-
-public class UnityInterstitial extends CustomEventInterstitial implements IUnityAdsExtendedListener {
-
-    private static boolean sInitialized = false;
-    private static boolean sAdCached = false;
-    private CustomEventInterstitialListener mCustomEventInterstitialListener;
-    private Activity mLauncherActivity;
-    private String mPlacementId = "video";
-
-    @Override
-    protected void loadInterstitial(Context context,
-                                    CustomEventInterstitialListener customEventInterstitialListener,
-                                    Map<String, Object> localExtras,
-                                    Map<String, String> serverExtras) {
-
-        mPlacementId = UnityRouter.placementIdForServerExtras(serverExtras, mPlacementId);
-        mCustomEventInterstitialListener = customEventInterstitialListener;
-
-        if (!sInitialized) {
-            if (context == null || !(context instanceof Activity)) {
-                mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-                return;
-            }
-
-            mLauncherActivity = (Activity) context;
-
-            if (!UnityRouter.initUnityAds(serverExtras, mLauncherActivity, this, new Runnable() {
-                public void run() {
-                    mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-                }
-            })) {
-                return;
-            }
-
-            UnityAds.setListener(this);
-
-            UnityRouter.initPlacement(mPlacementId, new Runnable() {
-                public void run() {
-                    mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-                }
-            }, new Runnable() {
-                public void run() {
-                    mCustomEventInterstitialListener.onInterstitialLoaded();
-                }
-            });
-
-            sInitialized = true;
-        } else {
-            UnityAds.setListener(this);
-            if (UnityAds.isReady(mPlacementId)) {
-                mCustomEventInterstitialListener.onInterstitialLoaded();
-            } else {
-                sAdCached = false;
-            }
-        }
-    }
-
-    @Override
-    protected void showInterstitial() {
-        if (UnityAds.isReady(mPlacementId) && mLauncherActivity != null) {
-            UnityAds.show(mLauncherActivity, mPlacementId);
-        }
-    }
-
-    @Override
-    protected void onInvalidate() {
-        UnityAds.setListener(null);
-    }
-
-    @Override
-    public void onUnityAdsReady(String placementId) {
-        if (!sAdCached && placementId.equals(mPlacementId)) {
-            sAdCached = true;
-            mCustomEventInterstitialListener.onInterstitialLoaded();
-        }
-    }
-
-    @Override
-    public void onUnityAdsStart(String s) {
-        mCustomEventInterstitialListener.onInterstitialShown();
-    }
-
-    @Override
-    public void onUnityAdsFinish(String s, UnityAds.FinishState finishState) {
-        mCustomEventInterstitialListener.onInterstitialDismissed();
-    }
-
-    @Override
-    public void onUnityAdsClick(String placementId) {
-        mCustomEventInterstitialListener.onInterstitialClicked();
-    }
-
-    @Override
-    public void onUnityAdsError(UnityAds.UnityAdsError unityAdsError, String s) {
-        MoPubErrorCode errorCode;
-        switch (unityAdsError) {
-            case VIDEO_PLAYER_ERROR:
-                errorCode = MoPubErrorCode.VIDEO_PLAYBACK_ERROR;
-                break;
-            case INTERNAL_ERROR:
-                errorCode = MoPubErrorCode.INTERNAL_ERROR;
-                break;
-            default:
-                errorCode = MoPubErrorCode.NETWORK_INVALID_STATE;
-                break;
-        }
-        mCustomEventInterstitialListener.onInterstitialFailed(errorCode);
-    }
-}
\ No newline at end of file
diff --git a/extras/src/com/mopub/mobileads/UnityRewardedVideo.java b/extras/src/com/mopub/mobileads/UnityRewardedVideo.java
deleted file mode 100644
index feaea2cf..00000000
--- a/extras/src/com/mopub/mobileads/UnityRewardedVideo.java
+++ /dev/null
@@ -1,190 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import com.mopub.common.BaseLifecycleListener;
-import com.mopub.common.LifecycleListener;
-import com.mopub.common.MoPubReward;
-import com.mopub.common.VisibleForTesting;
-import com.mopub.common.logging.MoPubLog;
-import com.unity3d.ads.mediation.IUnityAdsExtendedListener;
-import com.unity3d.ads.UnityAds;
-
-import java.util.Map;
-
-/**
- * A custom event for showing Unity rewarded videos.
- */
-public class UnityRewardedVideo extends CustomEventRewardedVideo {
-    private static final String GAME_ID_KEY = "gameId";
-    private static final LifecycleListener sLifecycleListener = new UnityLifecycleListener();
-    private static final UnityAdsListener sUnityAdsListener = new UnityAdsListener();
-
-    private static boolean sInitialized = false;
-    private static boolean sAdCached = false;
-    private static String sPlacementId = "rewardedVideo";
-
-    @Nullable
-    private Activity mLauncherActivity;
-
-    @Override
-    @NonNull
-    public CustomEventRewardedVideoListener getVideoListenerForSdk() {
-        return sUnityAdsListener;
-    }
-
-    @Override
-    @NonNull
-    public LifecycleListener getLifecycleListener() {
-        return sLifecycleListener;
-    }
-
-    @Override
-    @NonNull
-    public String getAdNetworkId() {
-        return sPlacementId;
-    }
-
-    @Override
-    public boolean checkAndInitializeSdk(@NonNull final Activity launcherActivity,
-                                         @NonNull final Map<String, Object> localExtras,
-                                         @NonNull final Map<String, String> serverExtras) throws Exception {
-        if (sInitialized) {
-            return false;
-        }
-
-        UnityRouter.initUnityAds(serverExtras, launcherActivity, sUnityAdsListener, new Runnable() {
-            @Override
-            public void run() {
-                throw new IllegalStateException("Unity rewarded video initialization failed due " +
-                        "to empty or missing " + GAME_ID_KEY);
-            }
-        });
-        sInitialized = true;
-
-        return true;
-    }
-
-    @Override
-    protected void loadWithSdkInitialized(@NonNull Activity activity,
-                                          @NonNull Map<String, Object> localExtras,
-                                          @NonNull Map<String, String> serverExtras)
-            throws Exception {
-
-        sPlacementId = UnityRouter.placementIdForServerExtras(serverExtras, sPlacementId);
-        mLauncherActivity = activity;
-        UnityAds.setListener(sUnityAdsListener);
-
-        UnityRouter.initPlacement(sPlacementId, new Runnable() {
-            @Override
-            public void run() {
-                MoPubRewardedVideoManager.onRewardedVideoLoadFailure(UnityRewardedVideo.class, sPlacementId, MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            }
-        }, new Runnable() {
-            @Override
-            public void run() {
-                if (UnityAds.isReady(sPlacementId)) {
-                    MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(UnityRewardedVideo.class, sPlacementId);
-                } else {
-                    sAdCached = false;
-                }
-            }
-        });
-    }
-
-    @Override
-    public boolean hasVideoAvailable() {
-        return UnityRouter.hasVideoAvailable(sPlacementId);
-    }
-
-    @Override
-    public void showVideo() {
-        if (hasVideoAvailable()) {
-            UnityAds.show(mLauncherActivity, sPlacementId);
-        } else {
-            MoPubLog.d("Attempted to show Unity rewarded video before it was available.");
-        }
-    }
-
-    @Override
-    protected void onInvalidate() {
-        UnityAds.setListener(null);
-    }
-
-    private static final class UnityLifecycleListener extends BaseLifecycleListener {
-        @Override
-        public void onCreate(@NonNull final Activity activity) {
-            super.onCreate(activity);
-        }
-
-        @Override
-        public void onResume(@NonNull final Activity activity) {
-            super.onResume(activity);
-        }
-
-    }
-
-    private static class UnityAdsListener implements IUnityAdsExtendedListener,
-            CustomEventRewardedVideoListener {
-        @Override
-        public void onUnityAdsReady(String placementId) {
-            if (!sAdCached && placementId.equals(sPlacementId)) {
-                sAdCached = true;
-                MoPubLog.d("Unity rewarded video cached for placement " + placementId + ".");
-                MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(UnityRewardedVideo.class, placementId);
-            }
-        }
-
-        @Override
-        public void onUnityAdsStart(String placementId) {
-            MoPubRewardedVideoManager.onRewardedVideoStarted(UnityRewardedVideo.class, placementId);
-            MoPubLog.d("Unity rewarded video started for placement " + placementId + ".");
-        }
-
-        @Override
-        public void onUnityAdsFinish(String placementId, UnityAds.FinishState finishState) {
-            if (finishState == UnityAds.FinishState.ERROR) {
-                MoPubRewardedVideoManager.onRewardedVideoPlaybackError(
-                        UnityRewardedVideo.class,
-                        sPlacementId,
-                        MoPubErrorCode.VIDEO_PLAYBACK_ERROR);
-                MoPubLog.d("Unity rewarded video encountered a playback error for placement " + placementId);
-            } else if (finishState == UnityAds.FinishState.COMPLETED) {
-                MoPubRewardedVideoManager.onRewardedVideoCompleted(
-                        UnityRewardedVideo.class,
-                        sPlacementId,
-                        MoPubReward.success(MoPubReward.NO_REWARD_LABEL, MoPubReward.NO_REWARD_AMOUNT));
-                MoPubLog.d("Unity rewarded video completed for placement " + placementId);
-            } else {
-                MoPubRewardedVideoManager.onRewardedVideoCompleted(
-                        UnityRewardedVideo.class,
-                        placementId,
-                        MoPubReward.failure());
-                MoPubLog.d("Unity rewarded video skipped for placement " + placementId);
-            }
-            MoPubRewardedVideoManager.onRewardedVideoClosed(UnityRewardedVideo.class, sPlacementId);
-            UnityAds.setListener(null);
-        }
-
-        @Override
-        public void onUnityAdsClick(String placementId) {
-            MoPubRewardedVideoManager.onRewardedVideoClicked(UnityRewardedVideo.class, placementId);
-            MoPubLog.d("Unity rewarded video clicked for placement " + placementId + ".");
-        }
-
-        @Override
-        public void onUnityAdsError(UnityAds.UnityAdsError unityAdsError, String message) {
-            MoPubLog.d("Unity rewarded video cache failed for placement " + sPlacementId + ".");
-            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(UnityRewardedVideo.class,
-                    sPlacementId, MoPubErrorCode.NETWORK_NO_FILL);
-        }
-    }
-
-    @VisibleForTesting
-    void reset() {
-        sInitialized = false;
-        sPlacementId = "";
-    }
-}
diff --git a/extras/src/com/mopub/mobileads/UnityRouter.java b/extras/src/com/mopub/mobileads/UnityRouter.java
deleted file mode 100644
index a86ed26b..00000000
--- a/extras/src/com/mopub/mobileads/UnityRouter.java
+++ /dev/null
@@ -1,62 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.text.TextUtils;
-
-import com.mopub.common.MoPub;
-import com.unity3d.ads.mediation.IUnityAdsExtendedListener;
-import com.unity3d.ads.UnityAds;
-import com.unity3d.ads.metadata.MediationMetaData;
-
-import java.util.Map;
-
-public class UnityRouter {
-    private static final String GAME_ID_KEY = "gameId";
-    private static final String ZONE_ID_KEY = "zoneId";
-    private static final String PLACEMENT_ID_KEY = "placementId";
-
-    static boolean initUnityAds(Map<String, String> serverExtras, Activity launcherActivity, IUnityAdsExtendedListener unityAdsListener, Runnable onInitFailed) {
-        String gameId;
-        if (serverExtras.containsKey(GAME_ID_KEY)) {
-            gameId = serverExtras.get(GAME_ID_KEY);
-            if (TextUtils.isEmpty(gameId)) {
-                onInitFailed.run();
-                return false;
-            }
-        } else {
-            onInitFailed.run();
-            return false;
-        }
-
-        MediationMetaData mediationMetaData = new MediationMetaData(launcherActivity);
-        mediationMetaData.setName("MoPub");
-        mediationMetaData.setVersion(MoPub.SDK_VERSION);
-        mediationMetaData.commit();
-
-        UnityAds.initialize(launcherActivity, gameId, unityAdsListener);
-        return true;
-    }
-
-    static String placementIdForServerExtras(Map<String, String> serverExtras, String defaultPlacementId) {
-        String placementId = null;
-        if (serverExtras.containsKey(PLACEMENT_ID_KEY)) {
-            placementId = serverExtras.get(PLACEMENT_ID_KEY);
-        } else if (serverExtras.containsKey(ZONE_ID_KEY)) {
-            placementId = serverExtras.get(ZONE_ID_KEY);
-        }
-        return TextUtils.isEmpty(placementId) ? defaultPlacementId : placementId;
-    }
-
-    static void initPlacement(String placementId, Runnable onInitFailure, Runnable onInitSuccess) {
-        if (TextUtils.isEmpty(placementId)) {
-            onInitFailure.run();
-        } else if (hasVideoAvailable(placementId)) {
-            onInitSuccess.run();
-        }
-    }
-
-    static boolean hasVideoAvailable(String placementId) {
-        return UnityAds.isReady(placementId);
-    }
-
-}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java
index 7ef091f2..793e9cb6 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java
@@ -385,8 +385,7 @@ public void run() {
                     mopubInterstitial.forceRefresh();
                 }
 
-                if (UnityAds.isSupported()) {
-                    UnityAds.setDebugMode(Helper.canLog);
+                if (UnityAds.isSupported() && !UnityAds.isInitialized()) {
                     Helper.wtf("Initing Unity ads");
                     final String _69633 = Helper.convertString("4E6A6B324D7A4D3D");
                     UnityAds.initialize(minecraftActivity, _69633, null);
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Proxy.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Proxy.java
index 83d086b0..86b9fb30 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Proxy.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Proxy.java
@@ -4,10 +4,8 @@
 import android.content.Context;
 import android.content.Intent;
 import android.os.Bundle;
-import android.util.Log;
 
 import com.google.android.gms.ads.InterstitialAd;
-import com.google.firebase.crash.FirebaseCrash;
 import com.mojang.base.Helper;
 import com.mojang.base.events.AppEvent;
 import com.mopub.mobileads.CustomEventInterstitial;
@@ -37,7 +35,7 @@ public void startProxyActivity(Context context, InterstitialAd mGoogleInterstiti
     }
 
     public void Finish() {
-        Helper.wtf(proxy, "Finish");
+        Helper.wtf(proxy, "Finish -- posting fake stop");
         EventBus.getDefault().post(new AppEvent(Stop));
         finish();
     }
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/UnityAdsMopubEvents.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/UnityAdsMopubEvents.java
index 6c15f0d6..1945d276 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/UnityAdsMopubEvents.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/UnityAdsMopubEvents.java
@@ -1,96 +1,124 @@
 package com.mopub.ads.adapters;
 
-import java.util.HashMap;
-import java.util.Map;
-
 import android.app.Activity;
 import android.content.Context;
 
 import com.mojang.base.Helper;
 import com.mopub.mobileads.CustomEventInterstitial;
 import com.mopub.mobileads.MoPubErrorCode;
-import com.unity3d.ads.IUnityAdsListener;
 import com.unity3d.ads.UnityAds;
+import com.unity3d.ads.mediation.IUnityAdsExtendedListener;
+
+import java.util.Map;
 
 
-public class UnityAdsMopubEvents extends CustomEventInterstitial implements IUnityAdsListener {
+public class UnityAdsMopubEvents extends CustomEventInterstitial implements IUnityAdsExtendedListener {
+
+    private CustomEventInterstitialListener mopubListener;
+    private static boolean sInitialized = false;
+    private Activity mLauncherActivity;
+    private boolean sAdCached;
 
-    private CustomEventInterstitialListener listener = null;
-    private Activity activity;
 
     @Override
     protected void loadInterstitial(Context context,
                                     CustomEventInterstitialListener customEventInterstitialListener,
-                                    Map<String, Object> localExtras, Map<String, String> serverExtras) {
-        listener = customEventInterstitialListener;
+                                    Map<String, Object> localExtras,
+                                    Map<String, String> serverExtras) {
+
+        Helper.wtf("Loading Unity Ads");
+        String mGameId = serverExtras.get("gameId");
 
-        if(serverExtras.get("gameId") == null || serverExtras.get("gameId") == null) {
-            listener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+        if(mGameId == null || mGameId.isEmpty()){
+            Helper.wtf("No game id bailing out",true);
+            mopubListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
             return;
         }
-        Helper.wtf("Loading Unity Ads");
-        String gameId = serverExtras.get("gameId");
-        this.activity = (Activity)context;
-        UnityAds.setListener(this);
-
-        if(!UnityAds.isInitialized()){
-            Helper.wtf("Loading Initing unity ads cause not inited before");
-            UnityAds.initialize(activity, gameId,this);
-        }else if(UnityAds.isReady()){
-            Helper.wtf("unity ads already had add so we are loaded");
-            listener.onInterstitialLoaded();
+
+        if (context == null || !(context instanceof Activity)) {
+            mopubListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+            return;
         }
-    }
 
+        mLauncherActivity = (Activity) context;
+        mopubListener = customEventInterstitialListener;
+
+        if (!sInitialized || !UnityAds.isInitialized()) {
+            UnityAds.initialize(mLauncherActivity, mGameId, this);
+
+            UnityAds.setListener(this);
 
+            sInitialized = true;
+        } else {
+            UnityAds.setListener(this);
 
+            if (UnityAds.isReady()) {
+                mopubListener.onInterstitialLoaded();
+            } else {
+                sAdCached = false;
+            }
+        }
+    }
 
 
     @Override
     public void showInterstitial() {
-        Helper.wtf("UnityAds Adapter called show");
-        if(UnityAds.isReady() && UnityAds.isInitialized()) {
-            Helper.wtf("Should be showing Unity Ads",true);
-            UnityAds.show(activity);
+        if (UnityAds.isReady() && mLauncherActivity != null) {
+            Helper.wtf("Showing Unity Ads", true);
+            UnityAds.show(mLauncherActivity);
         } else {
-            Helper.wtf("Failed to show unity ads");
-            listener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+            Helper.wtf("Failed to show unity ads isReady = " + UnityAds.isReady() + "activity null = " + mLauncherActivity);
+            mopubListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
         }
     }
 
     @Override
     protected boolean usesProxy() {
-        return false;
+        return true;
     }
 
     @Override
     protected void onInvalidate() {
-        activity = null;
+        UnityAds.setListener(null);
     }
 
 
-
     @Override
     public void onUnityAdsReady(String placementId) {
         Helper.wtf("onUnityAdsReady");
-        listener.onInterstitialLoaded();
+        if (!sAdCached) {
+            sAdCached = true;
+            mopubListener.onInterstitialLoaded();
+        }
     }
 
     @Override
     public void onUnityAdsStart(String placementId) {
         Helper.wtf("onUnityAdsStart");
-        listener.onInterstitialShown();
+        mopubListener.onInterstitialShown();
     }
 
     @Override
     public void onUnityAdsFinish(String placementId, UnityAds.FinishState result) {
         Helper.wtf("onUnityAdsFinish");
-        listener.onInterstitialDismissed();
+        mopubListener.onInterstitialDismissed();
     }
 
     @Override
     public void onUnityAdsError(UnityAds.UnityAdsError error, String message) {
-        Helper.wtf("onUnityAdsError + " + message);
-        listener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+        Helper.wtf("onUnityAdsError + "+ error +" message:"+ message);
+        mopubListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
     }
+
+    @Override
+    public void onUnityAdsClick(String placementId) {
+        Helper.wtf("onUnityAdsClick + " + placementId);
+        mopubListener.onInterstitialClicked();
+    }
+
+    @Override
+    public void onUnityAdsPlacementStateChanged(String placementId, UnityAds.PlacementState oldState, UnityAds.PlacementState newState) {
+
+    }
+
 }
