diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/BaseForwardingNativeAd.java b/mopub-sdk/src/main/java/com/mopub/nativeads/BaseForwardingNativeAd.java
deleted file mode 100644
index 82277f09..00000000
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/BaseForwardingNativeAd.java
+++ /dev/null
@@ -1,431 +0,0 @@
-package com.mopub.nativeads;
-
-import android.content.Context;
-import android.graphics.drawable.Drawable;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.text.TextUtils;
-import android.view.View;
-
-import com.mopub.common.Preconditions.NoThrow;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.network.Networking;
-import com.mopub.volley.VolleyError;
-import com.mopub.volley.toolbox.ImageLoader;
-
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.concurrent.atomic.AtomicInteger;
-
-import static com.mopub.nativeads.CustomEventNative.CustomEventNativeListener;
-import static com.mopub.nativeads.CustomEventNative.ImageListener;
-
-abstract class BaseForwardingNativeAd implements NativeAdInterface {
-    private static final int IMPRESSION_MIN_PERCENTAGE_VIEWED = 50;
-
-    static interface NativeEventListener {
-        public void onAdImpressed();
-        public void onAdClicked();
-    }
-    @Nullable private NativeEventListener mNativeEventListener;
-
-    static final double MIN_STAR_RATING = 0;
-    static final double MAX_STAR_RATING = 5;
-
-    // Basic fields
-    @Nullable private String mMainImageUrl;
-    @Nullable private String mIconImageUrl;
-    @Nullable private String mClickDestinationUrl;
-    @Nullable private String mCallToAction;
-    @Nullable private String mTitle;
-    @Nullable private String mText;
-    @Nullable private Double mStarRating;
-
-    @Nullable private Drawable mDefaultIcon;
-
-    // Impression logistics
-    @NonNull private final Set<String> mImpressionTrackers;
-    private int mImpressionMinTimeViewed;
-
-    // Extras
-    @NonNull private final Map<String, Object> mExtras;
-
-    // Event Logistics
-    private boolean mIsOverridingClickTracker;
-    private boolean mIsOverridingImpressionTracker;
-
-    BaseForwardingNativeAd() {
-        mImpressionMinTimeViewed = 1000;
-
-        mImpressionTrackers = new HashSet<String>();
-        mExtras = new HashMap<String, Object>();
-    }
-
-    // Getters
-    /**
-     * Returns the String url corresponding to the ad's main image.
-     */
-    @Nullable
-    @Override
-    final public String getMainImageUrl() {
-        return mMainImageUrl;
-    }
-
-    /**
-     * Returns the String url corresponding to the ad's icon image.
-     */
-    @Nullable
-    @Override
-    final public String getIconImageUrl() {
-        return mIconImageUrl;
-    }
-
-    /**
-     * Returns a Set<String> of all impression trackers associated with this native ad. Note that
-     * network requests will automatically be made to each of these impression trackers when the
-     * native ad is display on screen. See {@link BaseForwardingNativeAd#getImpressionMinPercentageViewed}
-     * and {@link BaseForwardingNativeAd#getImpressionMinTimeViewed()} for relevant
-     * impression-tracking parameters.
-     */
-    @NonNull
-    @Override
-    final public Set<String> getImpressionTrackers() {
-        return new HashSet<String>(mImpressionTrackers);
-    }
-
-    /**
-     * Returns the String url that the device will attempt to resolve when the ad is clicked.
-     */
-    @Nullable
-    @Override
-    final public String getClickDestinationUrl() {
-        return mClickDestinationUrl;
-    }
-
-    /**
-     * Returns the Call To Action String (i.e. "Download" or "Learn More") associated with this ad.
-     */
-    @Nullable
-    @Override
-    final public String getCallToAction() {
-        return mCallToAction;
-    }
-
-    /**
-     * Returns the String corresponding to the ad's title.
-     */
-    @Nullable
-    @Override
-    final public String getTitle() {
-        return mTitle;
-    }
-
-    /**
-     * Returns the String corresponding to the ad's body text.
-     */
-    @Nullable
-    @Override
-    final public String getText() {
-        return mText;
-    }
-
-    /**
-     * For app install ads, this returns the associated star rating (on a 5 star scale) for the
-     * advertised app. Note that this method may return null if the star rating was either never set
-     * or invalid.
-     */
-    @Nullable
-    @Override
-    final public Double getStarRating() {
-        return mStarRating;
-    }
-
-    @Nullable
-    @Override
-    public Drawable getDefaultIcon() {
-        return mDefaultIcon;
-    }
-
-    /**
-     * Override this method to set the clickthrough url for the DAA icon. No DAA icon will be shown
-     * unless this is set to something non-null.
-     *
-     * @return String representing the DAA icon clickthrough url, or {@code null} if not set.
-     */
-    @Nullable
-    @Override
-    public String getDaaIconClickthroughUrl() {
-        return null;
-    }
-
-    /**
-     * Returns the minimum viewable percentage of the ad that must be onscreen for it to be
-     * considered visible. See {@link BaseForwardingNativeAd#getImpressionMinTimeViewed()} for
-     * additional impression tracking considerations.
-     */
-    @Override
-    final public int getImpressionMinPercentageViewed() {
-        return IMPRESSION_MIN_PERCENTAGE_VIEWED;
-    }
-
-    /**
-     * Returns the minimum amount of time (in milliseconds) the ad that must be onscreen before an
-     * impression is recorded. See {@link BaseForwardingNativeAd#getImpressionMinPercentageViewed()}
-     * for additional impression tracking considerations.
-     */
-    @Override
-    final public int getImpressionMinTimeViewed() {
-        return mImpressionMinTimeViewed;
-    }
-
-    // Extras Getters
-    /**
-     * Given a particular String key, return the associated Object value from the ad's extras map.
-     * See {@link BaseForwardingNativeAd#getExtras()} for more information.
-     */
-    @Nullable
-    @Override
-    final public Object getExtra(@NonNull final String key) {
-        if (!NoThrow.checkNotNull(key, "getExtra key is not allowed to be null")) {
-            return null;
-        }
-        return mExtras.get(key);
-    }
-
-    /**
-     * Returns a copy of the extras map, reflecting additional ad content not reflected in any
-     * of the above hardcoded setters. This is particularly useful for passing down custom fields
-     * with MoPub's direct-sold native ads or from mediated networks that pass back additional
-     * fields.
-     */
-    @NonNull
-    @Override
-    final public Map<String, Object> getExtras() {
-        return new HashMap<String, Object>(mExtras);
-    }
-
-    /**
-     * Returns {@code true} if the native ad is using a network impression tracker. If set to
-     * true, the network must expose a callback that calls into
-     * {@link BaseForwardingNativeAd#notifyAdImpressed()} in order for MoPub to fire its impression
-     * tracker at the appropriate time.
-     */
-    @Override
-    final public boolean isOverridingImpressionTracker() {
-        return mIsOverridingImpressionTracker;
-    }
-
-    /**
-     * Returns {@code true} if the native ad is using a network click tracker. If set to true, the
-     * network must expose a callback that calls into
-     * {@link BaseForwardingNativeAd#notifyAdClicked()} in order for MoPub to fire its click tracker
-     * at the appropriate time.
-     */
-    @Override
-    final public boolean isOverridingClickTracker() {
-        return mIsOverridingClickTracker;
-    }
-
-    // Setters
-    @Override
-    public final void setNativeEventListener(
-            @Nullable final NativeEventListener nativeEventListener) {
-        mNativeEventListener = nativeEventListener;
-    }
-
-    final void setMainImageUrl(@Nullable final String mainImageUrl) {
-        mMainImageUrl = mainImageUrl;
-    }
-
-    final void setIconImageUrl(@Nullable final String iconImageUrl) {
-        mIconImageUrl = iconImageUrl;
-    }
-
-    final void setClickDestinationUrl(@Nullable final String clickDestinationUrl) {
-        mClickDestinationUrl = clickDestinationUrl;
-    }
-
-    final void setCallToAction(@Nullable final String callToAction) {
-        mCallToAction = callToAction;
-    }
-
-    final void setTitle(@Nullable final String title) {
-        mTitle = title;
-    }
-
-    final void setText(@Nullable final String text) {
-        mText = text;
-    }
-
-    final void setDefaultIcon(@Nullable Drawable defaultIcon) {
-        mDefaultIcon = defaultIcon;
-    }
-
-    final void setStarRating(@Nullable final Double starRating) {
-        if (starRating == null) {
-            mStarRating = null;
-        } else if (starRating >= MIN_STAR_RATING && starRating <= MAX_STAR_RATING) {
-            mStarRating = starRating;
-        } else {
-            MoPubLog.d("Ignoring attempt to set invalid star rating (" + starRating + "). Must be "
-                    + "between " + MIN_STAR_RATING + " and " + MAX_STAR_RATING + ".");
-        }
-    }
-
-    final void addExtra(@NonNull final String key, @Nullable final Object value) {
-        if (!NoThrow.checkNotNull(key, "addExtra key is not allowed to be null")) {
-            return;
-        }
-        mExtras.put(key, value);
-    }
-
-    final void addImpressionTracker(@NonNull final String url) {
-        if (!NoThrow.checkNotNull(url, "impressionTracker url is not allowed to be null")) {
-            return;
-        }
-        mImpressionTrackers.add(url);
-    }
-
-    final void setImpressionMinTimeViewed(final int impressionMinTimeViewed) {
-        if (impressionMinTimeViewed >= 0) {
-            mImpressionMinTimeViewed = impressionMinTimeViewed;
-        }
-    }
-
-    final void setOverridingImpressionTracker(final boolean isOverridingImpressionTracker) {
-        mIsOverridingImpressionTracker = isOverridingImpressionTracker;
-    }
-
-    final void setOverridingClickTracker(final boolean isOverridingClickTracker) {
-        mIsOverridingClickTracker = isOverridingClickTracker;
-    }
-
-    // Event Handlers
-    /**
-     * Your base native ad subclass should implement this method if the network requires the developer
-     * to prepare state for recording an impression or click before a view is rendered to screen.
-     *
-     * This method is optional.
-     */
-    @Override
-    public void prepare(@Nullable final View view,@Nullable ViewBinder viewBinder) { }
-
-    public void prepare(@Nullable final View view) {
-        prepare(view, null);
-    }
-
-    /**
-     * Your base native ad subclass should implement this method if the network requires the developer
-     * to explicitly record an impression of a view rendered to screen.
-     *
-     * This method is optional.
-     */
-    @Override
-    public void recordImpression() { }
-
-    /**
-     * Your base native ad subclass should implement this method if the network requires the developer
-     * to explicitly handle click events of views rendered to screen.
-     *
-     * This method is optional.
-     */
-    @Override
-    public void handleClick(@Nullable final View view) { }
-
-    /**
-     * Your base native ad subclass should implement this method if the network requires the developer
-     * to reset or clear state of the native ad after it goes off screen and before it is rendered
-     * again.
-     *
-     * This method is optional.
-     */
-    @Override
-    public void clear(@Nullable final View view) { }
-
-    /**
-     * Your base native ad subclass should implement this method if the network requires the developer
-     * to destroy or cleanup their native ad when they are finished with it.
-     *
-     * This method is optional.
-     */
-    @Override
-    public void destroy() { }
-
-    // Event Notifiers
-    /**
-     * Notifies the SDK that the ad has been shown. This will cause the SDK to record an impression
-     * for the ad. This is meant for network SDKs that expose their own impression tracking
-     * callbacks, and requires that you call
-     * {@link BaseForwardingNativeAd#setOverridingImpressionTracker} from your implementation of
-     * {@link BaseForwardingNativeAd#prepare}.
-     */
-    protected final void notifyAdImpressed() {
-        if (mNativeEventListener != null) {
-            mNativeEventListener.onAdImpressed();
-        }
-    }
-
-    /**
-     * Notifies the SDK that the user has clicked the ad. This will cause the SDK to record an
-     * click for the ad. This is meant for network SDKs that expose their own click
-     * tracking callbacks, and requires that you call
-     * {@link BaseForwardingNativeAd#setOverridingClickTracker} from your implementation of
-     * {@link BaseForwardingNativeAd#prepare}.
-     */
-    protected final void notifyAdClicked() {
-        if (mNativeEventListener != null) {
-            mNativeEventListener.onAdClicked();
-        }
-    }
-
-    /**
-     * Pre caches the given set of image urls. We recommend using this method to warm the image
-     * cache before calling {@link CustomEventNativeListener#onNativeAdLoaded}. Doing so will
-     * force images to cache before displaying the ad.
-     */
-    static void preCacheImages(@NonNull final Context context,
-            @NonNull final List<String> imageUrls,
-            @NonNull final ImageListener imageListener) {
-        final ImageLoader imageLoader = Networking.getImageLoader(context);
-        // These Atomics are only accessed on the main thread.
-        // We use Atomics here so we can change their values while keeping a reference for the inner class.
-        final AtomicInteger imageCounter = new AtomicInteger(imageUrls.size());
-        final AtomicBoolean anyFailures = new AtomicBoolean(false);
-        ImageLoader.ImageListener volleyImageListener = new ImageLoader.ImageListener() {
-            @Override
-            public void onResponse(final ImageLoader.ImageContainer imageContainer, final boolean isImmediate) {
-                // Image Loader returns a "default" response immediately. We want to ignore this
-                // unless the image is already cached.
-                if (imageContainer.getBitmap() != null) {
-                    final int count = imageCounter.decrementAndGet();
-                    if (count == 0 && !anyFailures.get()) {
-                        imageListener.onImagesCached();
-                    }
-                }
-            }
-
-            @Override
-            public void onErrorResponse(final VolleyError volleyError) {
-                MoPubLog.d("Failed to download a native ads image:", volleyError);
-                boolean anyPreviousErrors = anyFailures.getAndSet(true);
-                imageCounter.decrementAndGet();
-                if (!anyPreviousErrors) {
-                    imageListener.onImagesFailedToCache(NativeErrorCode.IMAGE_DOWNLOAD_FAILURE);
-                }
-            }
-        };
-
-        for (String url : imageUrls) {
-            if (TextUtils.isEmpty(url)) {
-                anyFailures.set(true);
-                imageListener.onImagesFailedToCache(NativeErrorCode.IMAGE_DOWNLOAD_FAILURE);
-                return;
-            }
-            imageLoader.get(url, volleyImageListener);
-        }
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
index 18ec136c..99a99688 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
@@ -119,6 +119,16 @@ public void onInvalidated() {
         });
 
         mStreamAdPlacer.setAdLoadedListener(new MoPubNativeAdLoadedListener() {
+            @Override
+            public void onPositionsLoaded() {
+
+            }
+
+            @Override
+            public void onInitialAdLoaded() {
+
+            }
+
             @Override
             public void onAdLoaded(final int position) {
                 handleAdLoaded(position);
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdRenderer.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdRenderer.java
deleted file mode 100644
index d35adf86..00000000
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNativeAdRenderer.java
+++ /dev/null
@@ -1,61 +0,0 @@
-package com.mopub.nativeads;
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-
-import com.mopub.common.VisibleForTesting;
-
-import java.util.WeakHashMap;
-
-import static android.view.View.VISIBLE;
-
-/**
- * An implementation of {@link com.mopub.nativeads.MoPubAdRenderer} for rendering native ads.
- */
-public class MoPubNativeAdRenderer implements MoPubAdRenderer<NativeResponse> {
-    @NonNull private final ViewBinder mViewBinder;
-
-    // This is used instead of View.setTag, which causes a memory leak in 2.3
-    // and earlier: https://code.google.com/p/android/issues/detail?id=18273
-    @VisibleForTesting @NonNull final WeakHashMap<View, NativeViewHolder> mViewHolderMap;
-
-    /**
-     * Constructs a native ad renderer with a view binder.
-     *
-     * @param viewBinder The view binder to use when inflating and rendering an ad.
-     */
-    public MoPubNativeAdRenderer(@NonNull final ViewBinder viewBinder) {
-        mViewBinder = viewBinder;
-        mViewHolderMap = new WeakHashMap<View, NativeViewHolder>();
-    }
-
-    @Override
-    @NonNull
-    public View createAdView(@NonNull final Context context, @Nullable final ViewGroup parent) {
-        return LayoutInflater
-                .from(context)
-                .inflate(mViewBinder.layoutId, parent, false);
-    }
-
-    @Override
-    public void renderAdView(@NonNull final View view,
-            @NonNull final NativeResponse nativeResponse) {
-        NativeViewHolder nativeViewHolder = mViewHolderMap.get(view);
-        if (nativeViewHolder == null) {
-            nativeViewHolder = NativeViewHolder.fromViewBinder(view, mViewBinder);
-            mViewHolderMap.put(view, nativeViewHolder);
-        }
-
-        nativeViewHolder.update(nativeResponse);
-        nativeViewHolder.updateExtras(nativeResponse, mViewBinder);
-        nativeViewHolder.setViewVisibility(VISIBLE);
-    }
-
-    public ViewBinder getViewBinder(){
-        return mViewBinder;
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
index e4ba5530..5c887cb4 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
@@ -228,7 +228,7 @@ public void loadAds(@NonNull String adUnitId) {
      * @param requestParameters Targeting information to pass to the ad server.
      */
     public void loadAds(@NonNull String adUnitId, @Nullable RequestParameters requestParameters) {
-        mStreamAdPlacer.loadAds(adUnitId, requestParameters,null);
+        mStreamAdPlacer.loadAds(adUnitId, requestParameters);
     }
 
     public static int computeScrollOffset(@NonNull final LinearLayoutManager linearLayoutManager,
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
index 2aacb163..74e80d5e 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
@@ -42,6 +42,16 @@
     private static final int DEFAULT_AD_VIEW_TYPE = -1;
     private final static MoPubNativeAdLoadedListener EMPTY_NATIVE_AD_LOADED_LISTENER =
             new MoPubNativeAdLoadedListener() {
+                @Override
+                public void onPositionsLoaded() {
+
+                }
+
+                @Override
+                public void onInitialAdLoaded() {
+
+                }
+
                 @Override
                 public void onAdLoaded(final int position) {
                 }
@@ -273,13 +283,14 @@ void handlePositioningLoad(@NonNull final MoPubClientPositioning positioning) {
             mPendingPlacementData = placementData;
         }
         mHasReceivedPositions = true;
+        mAdLoadedListener.onPositionsLoaded();
     }
 
     @VisibleForTesting
     void handleAdsAvailable() {
         // If we've already placed ads, just notify that we need placement.
         if (mHasPlacedAds) {
-            notifyNeedsPlacement();
+//            notifyNeedsPlacement();
             return;
         }
 
@@ -296,8 +307,12 @@ private void placeInitialAds(PlacementData placementData) {
         removeAdsInRange(0, mItemCount);
 
         mPlacementData = placementData;
-        placeAds();
+//        placeAds();
         mHasPlacedAds = true;
+
+        if (mAdLoadedListener != null) {
+            mAdLoadedListener.onInitialAdLoaded();
+        }
     }
 
     /**
@@ -397,8 +412,14 @@ public Object getAdData(final int position) {
      */
     @Nullable
     public View getAdView(final int position, @Nullable final View convertView,
+                          @Nullable final ViewGroup parent) {
+        return getAdView(getAdDataByOriginalPosition(position), convertView, parent);
+    }
+
+
+    @Nullable
+    public View getAdView(NativeAd nativeAd, @Nullable final View convertView,
             @Nullable final ViewGroup parent) {
-        final NativeAd nativeAd = mPlacementData.getPlacedAd(position);
         if (nativeAd == null) {
             return null;
         }
@@ -518,6 +539,18 @@ public int getOriginalPosition(final int position) {
         return mPlacementData.getOriginalPosition(position);
     }
 
+    public int getOriginalAdPosition(final int position) {
+        return mPlacementData.getOriginalAdPosition(position);
+    }
+
+    public int getPlacedPosition(final int position) {
+        return mPlacementData.getPlacedPosition(position);
+    }
+
+    public int getInsertPosition(final int position) {
+        return mPlacementData.getInsertPosition(position);
+    }
+
     /**
      * Returns the position of an item considering ads in the stream.
      *
@@ -548,6 +581,19 @@ public int getAdjustedCount(final int originalCount) {
         return mPlacementData.getAdjustedCount(originalCount);
     }
 
+    @Nullable
+    public NativeAd getAdDataByOriginalPosition(final int index) {
+        return mPlacementData.getPlacedAdByOriginalPosition(index);
+    }
+
+    public boolean isAdLoadedByOriginalPosition(int position) {
+        return mPlacementData.isAdLoadedByOriginalPosition(position);
+    }
+
+    public int getAdCount() {
+        return mPlacementData.getPlacedCount();
+    }
+
     /**
      * Sets the original number of items in your stream.
      *
@@ -561,9 +607,9 @@ public void setItemCount(final int originalCount) {
         mItemCount = mPlacementData.getAdjustedCount(originalCount);
 
         // If we haven't already placed ads, we'll let ads get placed by the normal loadAds call
-        if (mHasPlacedAds) {
-            notifyNeedsPlacement();
-        }
+//        if (mHasPlacedAds) {
+//            notifyNeedsPlacement();
+//        }
     }
 
     /**
@@ -631,14 +677,14 @@ public void moveItem(final int originalPosition, final int newPosition) {
     }
 
     private void notifyNeedsPlacement() {
-        // Avoid posting if this method has already been called.
-        if (mNeedsPlacement) {
-            return;
-        }
-        mNeedsPlacement = true;
-
-        // Post the placement to happen on the next UI render loop.
-        mPlacementHandler.post(mPlacementRunnable);
+//        // Avoid posting if this method has already been called.
+//        if (mNeedsPlacement) {
+//            return;
+//        }
+//        mNeedsPlacement = true;
+//
+//        // Post the placement to happen on the next UI render loop.
+//        mPlacementHandler.post(mPlacementRunnable);
     }
 
     /**
@@ -682,6 +728,13 @@ private boolean tryPlaceAdsInRange(final int start, final int end) {
         return true;
     }
 
+    public boolean placeAd(int position) {
+        if (mPlacementData.shouldPlaceAd(position)) {
+            return tryPlaceAd(position);
+        }
+        return false;
+    }
+
     /**
      * Attempts to place an ad at the given position, returning false if there is no ad available to
      * be placed.
@@ -705,7 +758,7 @@ private boolean tryPlaceAd(final int position) {
     /**
      * Clears any {@link NativeAd} click trackers and impression tracking are set up for this view.
      */
-    private void clearNativeAd(@Nullable final View view) {
+    public void clearNativeAd(@Nullable final View view) {
         if (view == null) {
             return;
         }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdInterface.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdInterface.java
deleted file mode 100644
index e6d420db..00000000
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdInterface.java
+++ /dev/null
@@ -1,68 +0,0 @@
-package com.mopub.nativeads;
-
-import android.graphics.drawable.Drawable;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.view.View;
-
-import java.util.Map;
-import java.util.Set;
-
-import static com.mopub.nativeads.BaseForwardingNativeAd.NativeEventListener;
-
-interface NativeAdInterface {
-    // Getters
-    @Nullable
-    String getMainImageUrl();
-
-    @Nullable
-    String getIconImageUrl();
-
-    @Nullable
-    String getClickDestinationUrl();
-
-    @Nullable
-    String getCallToAction();
-
-    @Nullable
-    String getTitle();
-
-    @Nullable
-    String getText();
-
-    @Nullable
-    Double getStarRating();
-
-    @Nullable
-    Drawable getDefaultIcon();
-
-    String getDaaIconClickthroughUrl();
-
-    @NonNull
-    Set<String> getImpressionTrackers();
-
-    int getImpressionMinPercentageViewed();
-
-    int getImpressionMinTimeViewed();
-
-    boolean isOverridingClickTracker();
-
-    boolean isOverridingImpressionTracker();
-
-    // Extras Getters
-    @Nullable
-    Object getExtra(final String key);
-
-    @NonNull
-    Map<String, Object> getExtras();
-
-    // Setters
-    void setNativeEventListener(@Nullable final NativeEventListener nativeEventListener);
-
-    // Event Handlers
-    void prepare(@NonNull final View view,@Nullable ViewBinder viewBinder);
-    void recordImpression();
-    void handleClick(@Nullable final View view);
-    void clear(@NonNull final View view);
-    void destroy();
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java
deleted file mode 100644
index 7c2dd1c0..00000000
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java
+++ /dev/null
@@ -1,446 +0,0 @@
-package com.mopub.nativeads;
-
-import android.content.Context;
-import android.graphics.drawable.Drawable;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ImageView;
-
-import com.mopub.common.Preconditions;
-import com.mopub.common.UrlAction;
-import com.mopub.common.UrlHandler;
-import com.mopub.common.VisibleForTesting;
-import com.mopub.common.event.BaseEvent;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.nativeads.MoPubNative.MoPubNativeEventListener;
-import com.mopub.network.Networking;
-import com.mopub.network.TrackingRequest;
-import com.mopub.volley.VolleyError;
-import com.mopub.volley.toolbox.ImageLoader;
-
-import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
-import static android.view.View.OnClickListener;
-import static com.mopub.nativeads.BaseForwardingNativeAd.NativeEventListener;
-import static com.mopub.nativeads.NativeResponse.Parameter.CALL_TO_ACTION;
-import static com.mopub.nativeads.NativeResponse.Parameter.CLICK_DESTINATION;
-import static com.mopub.nativeads.NativeResponse.Parameter.CLICK_TRACKER;
-import static com.mopub.nativeads.NativeResponse.Parameter.ICON_IMAGE;
-import static com.mopub.nativeads.NativeResponse.Parameter.IMPRESSION_TRACKER;
-import static com.mopub.nativeads.NativeResponse.Parameter.MAIN_IMAGE;
-import static com.mopub.nativeads.NativeResponse.Parameter.STAR_RATING;
-import static com.mopub.nativeads.NativeResponse.Parameter.TEXT;
-import static com.mopub.nativeads.NativeResponse.Parameter.TITLE;
-
-public class NativeResponse {
-    enum Parameter {
-        IMPRESSION_TRACKER("imptracker", true),
-        CLICK_TRACKER("clktracker", true),
-
-        TITLE("title", false),
-        TEXT("text", false),
-        MAIN_IMAGE("mainimage", false),
-        ICON_IMAGE("iconimage", false),
-
-        CLICK_DESTINATION("clk", false),
-        FALLBACK("fallback", false),
-        CALL_TO_ACTION("ctatext", false),
-        STAR_RATING("starrating", false);
-
-        @NonNull final String name;
-        final boolean required;
-
-        Parameter(@NonNull final String name, boolean required) {
-            this.name = name;
-            this.required = required;
-        }
-
-        @Nullable
-        static Parameter from(@NonNull final String name) {
-            for (final Parameter parameter : values()) {
-                if (parameter.name.equals(name)) {
-                    return parameter;
-                }
-            }
-
-            return null;
-        }
-
-        @NonNull
-        @VisibleForTesting
-        static final Set<String> requiredKeys = new HashSet<String>();
-        static {
-            for (final Parameter parameter : values()) {
-                if (parameter.required) {
-                    requiredKeys.add(parameter.name);
-                }
-            }
-        }
-    }
-
-    @NonNull private final Context mContext;
-    @NonNull private final ImageLoader mImageLoader;
-    @NonNull private MoPubNativeEventListener mMoPubNativeEventListener;
-    @NonNull private final NativeAdInterface mNativeAd;
-
-    // Impression and click trackers for the MoPub adserver
-    @NonNull private final Set<String> mMoPubImpressionTrackers;
-    @NonNull private final String mMoPubClickTracker;
-    @NonNull private final String mAdUnitId;
-
-    private boolean mRecordedImpression;
-    private boolean mIsClicked;
-    private boolean mIsDestroyed;
-
-    public NativeResponse(@NonNull final Context context,
-            @NonNull final String impressionUrl,
-            @NonNull final String clickUrl,
-            @NonNull final String adUnitId,
-            @NonNull final NativeAdInterface nativeAd,
-            @NonNull final MoPubNativeEventListener moPubNativeEventListener) {
-        mContext = context.getApplicationContext();
-        mAdUnitId = adUnitId;
-        mMoPubNativeEventListener = moPubNativeEventListener;
-        mNativeAd = nativeAd;
-        mNativeAd.setNativeEventListener(new NativeEventListener() {
-            @Override
-            public void onAdImpressed() {
-                recordImpression(null);
-            }
-
-            @Override
-            public void onAdClicked() {
-                handleClick(null);
-            }
-        });
-
-        mMoPubImpressionTrackers = new HashSet<String>();
-        mMoPubImpressionTrackers.add(impressionUrl);
-        mMoPubClickTracker = clickUrl;
-        mImageLoader = Networking.getImageLoader(context);
-    }
-
-    @Override
-    public String toString() {
-        final StringBuilder stringBuilder = new StringBuilder("\n");
-
-        stringBuilder.append(TITLE.name).append(":").append(getTitle()).append("\n");
-        stringBuilder.append(TEXT.name).append(":").append(getText()).append("\n");
-        stringBuilder.append(ICON_IMAGE.name).append(":").append(getIconImageUrl()).append("\n");
-        stringBuilder.append(MAIN_IMAGE.name).append(":").append(getMainImageUrl()).append("\n");
-        stringBuilder.append(STAR_RATING.name).append(":").append(getStarRating()).append("\n");
-        stringBuilder.append(IMPRESSION_TRACKER.name).append(":").append(getImpressionTrackers()).append("\n");
-        stringBuilder.append(CLICK_TRACKER.name).append(":").append(mMoPubClickTracker).append("\n");
-        stringBuilder.append(CLICK_DESTINATION.name).append(":").append(getClickDestinationUrl()).append("\n");
-        stringBuilder.append(CALL_TO_ACTION.name).append(":").append(getCallToAction()).append("\n");
-        stringBuilder.append("recordedImpression").append(":").append(mRecordedImpression).append("\n");
-        stringBuilder.append("extras").append(":").append(getExtras());
-
-        return stringBuilder.toString();
-    }
-
-   @NonNull
-   public String getAdUnitId() {
-       return mAdUnitId;
-   }
-
-    // Interface Methods
-    // Getters
-    @Nullable
-    public String getMainImageUrl() {
-        return mNativeAd.getMainImageUrl();
-    }
-
-    @Nullable
-    public String getIconImageUrl() {
-        return mNativeAd.getIconImageUrl();
-    }
-
-    @Nullable
-    public Drawable getDefaultIcon() {
-        return mNativeAd.getDefaultIcon();
-    }
-
-    @Nullable
-    public String getClickDestinationUrl() {
-        return mNativeAd.getClickDestinationUrl();
-    }
-
-    @Nullable
-    public String getCallToAction() {
-        return mNativeAd.getCallToAction();
-    }
-
-    @Nullable
-    public String getTitle() {
-        return mNativeAd.getTitle();
-    }
-
-    @Nullable
-    public String getText() {
-        return mNativeAd.getText();
-    }
-
-    @NonNull
-    public List<String> getImpressionTrackers() {
-        final Set<String> allImpressionTrackers = new HashSet<String>();
-        allImpressionTrackers.addAll(mMoPubImpressionTrackers);
-        allImpressionTrackers.addAll(mNativeAd.getImpressionTrackers());
-        return new ArrayList<String>(allImpressionTrackers);
-    }
-
-    @NonNull
-    public String getClickTracker() {
-        return mMoPubClickTracker;
-    }
-
-    @Nullable
-    public Double getStarRating() {
-        return mNativeAd.getStarRating();
-    }
-
-    @Nullable
-    public String getDaaIconClickthroughUrl() {
-        return mNativeAd.getDaaIconClickthroughUrl();
-    }
-
-    public int getImpressionMinTimeViewed() {
-        return mNativeAd.getImpressionMinTimeViewed();
-    }
-
-    public int getImpressionMinPercentageViewed() {
-        return mNativeAd.getImpressionMinPercentageViewed();
-    }
-
-    // Extras Getters
-    @Nullable
-    public Object getExtra(final String key) {
-        return mNativeAd.getExtra(key);
-    }
-
-    @NonNull
-    public Map<String, Object> getExtras() {
-        return mNativeAd.getExtras();
-    }
-
-    public boolean isOverridingImpressionTracker() {
-        return mNativeAd.isOverridingImpressionTracker();
-    }
-
-    public boolean isOverridingClickTracker() {
-        return mNativeAd.isOverridingClickTracker();
-    }
-
-    // Event Handlers
-    public void prepare(@NonNull final View view,@Nullable ViewBinder viewBinder) {
-        if (isDestroyed()) {
-            return;
-        }
-
-        if (!isOverridingClickTracker()) {
-            setOnClickListener(view, new NativeViewClickListener());
-        }
-
-        mNativeAd.prepare(view,viewBinder);
-    }
-
-    public void recordImpression(@Nullable final View view) {
-        if (getRecordedImpression() || isDestroyed()) {
-            return;
-        }
-
-        for (final String impressionTracker : getImpressionTrackers()) {
-            TrackingRequest.makeTrackingHttpRequest(
-                    impressionTracker, mContext, BaseEvent.Name.IMPRESSION_REQUEST);
-        }
-
-        mNativeAd.recordImpression();
-        mRecordedImpression = true;
-
-        mMoPubNativeEventListener.onNativeImpression(view);
-    }
-
-    public void handleClick(@Nullable final View view) {
-        handleClick(view, new SpinningProgressView(mContext));
-    }
-
-    @VisibleForTesting
-    void handleClick(@Nullable final View view,
-            @NonNull final SpinningProgressView spinningProgressView) {
-        Preconditions.checkNotNull(spinningProgressView);
-
-        if (isDestroyed()) {
-            return;
-        }
-
-        if (!isClicked()) {
-            TrackingRequest.makeTrackingHttpRequest(
-                    mMoPubClickTracker, mContext, BaseEvent.Name.CLICK_REQUEST);
-        }
-
-        openClickDestinationUrl(view, spinningProgressView);
-        mNativeAd.handleClick(view);
-        mIsClicked = true;
-
-        mMoPubNativeEventListener.onNativeClick(view);
-    }
-
-    public void clear(@NonNull final View view) {
-        setOnClickListener(view, null);
-
-        mNativeAd.clear(view);
-    }
-
-    public void destroy() {
-        if (isDestroyed()) {
-            return;
-        }
-
-        mMoPubNativeEventListener = MoPubNative.EMPTY_EVENT_LISTENER;
-
-        mNativeAd.destroy();
-        mIsDestroyed = true;
-    }
-
-    // Non Interface Public Methods
-    public void loadMainImage(@Nullable final ImageView imageView) {
-        loadImageView(getMainImageUrl(), imageView, null);
-    }
-
-    public void loadIconImage(@Nullable final ImageView imageView) {
-        loadImageView(getIconImageUrl(), imageView, getDefaultIcon());
-    }
-
-    public void loadExtrasImage(final String key, final ImageView imageView) {
-        final Object object = getExtra(key);
-        if (object != null && object instanceof String) {
-            loadImageView((String) object, imageView, null);
-        }
-    }
-
-    public boolean getRecordedImpression() {
-        return mRecordedImpression;
-    }
-
-    public boolean isClicked() {
-        return mIsClicked;
-    }
-
-    public boolean isDestroyed() {
-        return mIsDestroyed;
-    }
-
-    // Helpers
-    private void loadImageView(@Nullable final String url, @Nullable final ImageView imageView, @Nullable final Drawable defaultImage) {
-        if (imageView == null) {
-            return;
-        }
-
-        if (url == null) {
-            imageView.setImageDrawable(defaultImage);
-        } else {
-            mImageLoader.get(url, new ImageLoader.ImageListener() {
-                @Override
-                public void onResponse(final ImageLoader.ImageContainer imageContainer,
-                        final boolean isImmediate) {
-                    if (!isImmediate) {
-                        MoPubLog.d("Image was not loaded immediately into your ad view. You should call preCacheImages as part of your custom event loading process.");
-                    }
-                    imageView.setImageBitmap(imageContainer.getBitmap());
-                }
-
-                @Override
-                public void onErrorResponse(final VolleyError volleyError) {
-                    MoPubLog.d("Failed to load image.", volleyError);
-                    imageView.setImageDrawable(defaultImage);
-                }
-            });
-        }
-    }
-
-    private void openClickDestinationUrl(@Nullable final View view,
-            @NonNull final SpinningProgressView spinningProgressView) {
-        Preconditions.checkNotNull(spinningProgressView);
-
-        if (getClickDestinationUrl() == null) {
-            return;
-        }
-
-        if (view != null) {
-            spinningProgressView.addToRoot(view);
-        }
-
-        new UrlHandler.Builder()
-                .withSupportedUrlActions(
-                        UrlAction.IGNORE_ABOUT_SCHEME,
-                        UrlAction.OPEN_NATIVE_BROWSER,
-                        UrlAction.OPEN_APP_MARKET,
-                        UrlAction.OPEN_IN_APP_BROWSER,
-                        UrlAction.HANDLE_SHARE_TWEET,
-                        UrlAction.FOLLOW_DEEP_LINK_WITH_FALLBACK,
-                        UrlAction.FOLLOW_DEEP_LINK)
-                .withResultActions(new UrlHandler.ResultActions() {
-                    @Override
-                    public void urlHandlingSucceeded(@NonNull String url,
-                            @NonNull UrlAction urlAction) {
-                        removeSpinningProgressView();
-                    }
-
-                    @Override
-                    public void urlHandlingFailed(@NonNull String url,
-                            @NonNull UrlAction lastFailedUrlAction) {
-                        removeSpinningProgressView();
-                    }
-
-                    private void removeSpinningProgressView() {
-                        if (view != null) {
-                            spinningProgressView.removeFromRoot();
-                        }
-                    }
-                })
-                .build().handleUrl(mContext, getClickDestinationUrl());
-    }
-
-    private void setOnClickListener(@NonNull final View view,
-            @Nullable final OnClickListener onClickListener) {
-        view.setOnClickListener(onClickListener);
-        if ((view instanceof ViewGroup)) {
-            ViewGroup viewGroup = (ViewGroup)view;
-            for (int i = 0; i < viewGroup.getChildCount(); i++)
-                setOnClickListener(viewGroup.getChildAt(i), onClickListener);
-        }
-    }
-
-    @VisibleForTesting
-    class NativeViewClickListener implements OnClickListener {
-        @Override
-        public void onClick(@NonNull final View view) {
-            handleClick(view);
-        }
-    }
-
-    @Nullable
-    @Deprecated
-    public String getSubtitle() {
-        return mNativeAd.getText();
-    }
-
-    @NonNull
-    @VisibleForTesting
-    @Deprecated
-    MoPubNativeEventListener getMoPubNativeEventListener() {
-        return mMoPubNativeEventListener;
-    }
-
-    @VisibleForTesting
-    @Deprecated
-    void setRecordedImpression(final boolean recordedImpression) {
-        mRecordedImpression = recordedImpression;
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/PlacementData.java b/mopub-sdk/src/main/java/com/mopub/nativeads/PlacementData.java
index d8ba46c6..a89df594 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/PlacementData.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/PlacementData.java
@@ -204,7 +204,7 @@ int nextInsertionPosition(final int position) {
      */
     int previousInsertionPosition(final int position) {
         final int index = binarySearchFirstEquals(
-                mDesiredInsertionPositions,  mDesiredCount, position);
+                mDesiredInsertionPositions, mDesiredCount, position);
         if (index == 0) {
             return NOT_FOUND;
         }
@@ -314,6 +314,56 @@ int getAdjustedPosition(final int originalPosition) {
         return originalPosition + index;
     }
 
+    NativeAd getPlacedAdByOriginalPosition(final int position) {
+        final int index = binarySearch(mOriginalAdPositions, 0, mPlacedCount, position);
+        return getPlacedAdByIndex(index);
+    }
+
+    @Nullable
+    NativeAd getPlacedAdByIndex(final int index) {
+        if (index < 0) {
+            return null;
+        }
+        return mNativeAds[index];
+    }
+
+    int getOriginalAdPosition(final int position) {
+        final int index = binarySearch(mAdjustedAdPositions, 0, mPlacedCount, position);
+
+        // No match, ~index is the number of ads before this pos.
+        if (index < 0) {
+            return NOT_FOUND;
+        }
+
+        return mOriginalAdPositions[index];
+    }
+
+    int getPlacedPosition(final int position) {
+        final int index = binarySearch(mAdjustedAdPositions, 0, mPlacedCount, position);
+
+        // No match, ~index is the number of ads before this pos.
+        if (index < 0) {
+            return position - ~index;
+        }
+
+        return position - index;
+    }
+
+    int getInsertPosition(final int position) {
+        final int index = binarySearchGreaterThan(mAdjustedAdPositions, mPlacedCount, position);
+
+        return position - index;
+    }
+
+    boolean isAdLoadedByOriginalPosition(final int position) {
+        final int index = binarySearch(mOriginalAdPositions, 0, mPlacedCount, position);
+        return index >= 0;
+    }
+
+    int getPlacedCount() {
+        return mPlacedCount;
+    }
+
     /**
      * @see com.mopub.nativeads.MoPubStreamAdPlacer#getOriginalCount(int)
      */
