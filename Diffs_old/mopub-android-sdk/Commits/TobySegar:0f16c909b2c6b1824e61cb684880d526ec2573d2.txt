diff --git a/CHANGELOG.md b/CHANGELOG.md
index b8b55c9a..cc0e8fd1 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,17 @@
+## Version 4.10.0 (October 18, 2016)
+- **Added and updated mediated network versions**
+  - Added Flurry version 6.5.0. All Flurry adapters can be found in the corresponding `extras` directory (`/extras/src/com/mopub/mobileads` for banners and interstitials, `/extras/src/com/mopub/nativeads` for native).
+    - All Flurry ad formats must include: `FlurryAgentWrapper`
+    - Banners: `FlurryCustomEventBanner`
+    - Interstitial: `FlurryCustomEventInterstitial`
+    - Native: `FlurryCustomEventNative`, `FlurryBaseNativeAd`, `FlurryNativeAdRenderer`, and `FlurryViewBinder`
+  - Certified Facebook Audience Network version 4.15.0  
+  - Certified Tapjoy version 11.8.2
+  - Certified Millennial Media version 6.3.0
+  - Certified Vungle version 4.0.2  
+- Fixed intermittent `IllegalStateException` for MRAID creatives attemping to retrieve getRootView() on unattached Views.
+- Updated `mopub-sample`'s example `proguard.cfg` to properly retain methods called only via reflection.
+
 ## Version 4.9.0 (September 1, 2016)
 - Removed the full SDK bundle.
 - Removed Eclipse support.
diff --git a/README.md b/README.md
index 5a7986f1..3baa42b7 100644
--- a/README.md
+++ b/README.md
@@ -16,10 +16,10 @@ To file an issue with our team visit the [MoPub Forum](https://twittercommunity.
 
 The MoPub SDK is available via:
 
-1. **jCenter AAR**
+1. **JCenter AAR**
     
     [ ![Download](https://api.bintray.com/packages/mopub/mopub-android-sdk/mopub-android-sdk/images/download.svg)](https://bintray.com/mopub/mopub-android-sdk/mopub-android-sdk/_latestVersion)  
-    The MoPub SDK is available as an AAR via jCenter; to use it, add the following to your `build.gradle`.
+    The MoPub SDK is available as an AAR via JCenter; to use it, add the following to your `build.gradle`.
     
     ```
     repositories {
@@ -27,7 +27,7 @@ The MoPub SDK is available via:
     }
 
     dependencies {
-        compile('com.mopub:mopub-sdk:4.9.0@aar') {
+        compile('com.mopub:mopub-sdk:4.10.0@aar') {
             transitive = true
         }
     }
@@ -48,27 +48,27 @@ The MoPub SDK is available via:
         // ... other project dependencies
 
         // For banners
-        compile('com.mopub:mopub-sdk-banner:4.9.0@aar') {
+        compile('com.mopub:mopub-sdk:mopub-sdk-banner:4.10.0@aar') {
             transitive = true
         }
         
         // For interstitials
-        compile('com.mopub:mopub-sdk-interstitial:4.9.0@aar') {
+        compile('com.mopub:mopub-sdk:mopub-sdk-interstitial:4.10.0@aar') {
             transitive = true
         }
 
         // For rewarded videos. This will automatically also include interstitials
-        compile('com.mopub:mopub-sdk-rewardedvideo:4.9.0@aar') {
+        compile('com.mopub:mopub-sdk:mopub-sdk-rewardedvideo:4.10.0@aar') {
             transitive = true
         }
 
         // For native static (images).
-        compile('com.mopub:mopub-sdk-native-static:4.9.0@aar') {
+        compile('com.mopub:mopub-sdk:mopub-sdk-native-static:4.10.0@aar') {
             transitive = true
         }
 
         // For native video. This will automatically also include native static
-        compile('com.mopub:mopub-sdk-native-video:4.9.0@aar') {
+        compile('com.mopub:mopub-sdk:mopub-sdk-native-video:4.10.0@aar') {
             transitive = true
         }
     }
@@ -96,17 +96,20 @@ The MoPub SDK is available via:
 ## New in this Version
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for a complete list of additions, fixes, and enhancements in the latest release.
 
-- Removed the full SDK bundle.
-- Removed Eclipse support.
-- Removed InMobi custom events from extras.
-- Deprecated rewarded video calls from `MoPub.java` and moved them to `MoPubRewardedVideos.java`.
-  - For example, `MoPub#loadRewardedVideo` is deprecated in favor of `MoPubRewardedVideos#loadRewardedVideo`.
-- Bug fixes.
-
-**Modular SDK**
- - Added the ability to specify which ad formats to include as dependencies (to decrease the overall footprint of the MoPub SDK in your app).
- - Default behavior remains unchanged and includes access to all ad formats.
- - **Note:** Maven builds from source are currently unstable and will be reinstated in a future release. Maven developers can still pull the MoPub SDK AAR from JCenter.
+- **Added and updated mediated network versions**
+  - Added Flurry version 6.5.0. All Flurry adapters can be found in the corresponding `extras` directory (`/extras/src/com/mopub/mobileads` for banners and interstitials, `/extras/src/com/mopub/nativeads` for native).
+    - All Flurry ad formats must include: `FlurryAgentWrapper`
+    - Banners: `FlurryCustomEventBanner`
+    - Interstitial: `FlurryCustomEventInterstitial`
+    - Native: `FlurryCustomEventNative`, `FlurryBaseNativeAd`, `FlurryNativeAdRenderer`, and `FlurryViewBinder`
+  - Certified Facebook Audience Network version 4.15.0  
+  - Certified Tapjoy version 11.8.2
+  - Certified Millennial Media version 6.3.0
+  - Certified Vungle version 4.0.2  
+- Fixed intermittent `IllegalStateException` for MRAID creatives attemping to retrieve getRootView() on unattached Views.
+- Updated `mopub-sample`'s example `proguard.cfg` to properly retain methods called only via reflection.
+
+- **Note:** Maven builds from source are currently unstable and will be reinstated in a future release. Maven developers can still pull the MoPub SDK AAR from JCenter.
 
 ## Requirements
 
@@ -115,7 +118,7 @@ Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/mast
 - android-support-annotations.jar, r23 (**Updated in 4.4.0**)
 - android-support-v7-recyclerview.jar, r23 (**Updated in 4.4.0**)
 - MoPub Volley Library (mopub-volley-1.1.0.jar - available on JCenter) (**Updated in 3.6.0**)
-- **Recommended** Google Play Services 7.8.0
+- **Recommended** Google Play Services 9.4.0
 
 ## Upgrading from 3.2.0 and Prior
 In 3.3.0 a dependency on android-support-annotations.jar was added. If you are using Maven or Gradle to include the MoPub SDK, this dependency is included in the build scripts. For instructions on adding dependencies for Eclipse projects, see our [Getting Started Guide](https://github.com/mopub/mopub-android-sdk/wiki/Getting-Started#adding-the-support-libraries-to-your-project)
diff --git a/build.gradle b/build.gradle
index c5a7da47..a0f73c01 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5,7 +5,7 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.1.2'
+        classpath 'com.android.tools.build:gradle:2.1.3'
         classpath 'com.novoda:bintray-release:0.3.4'
     }
 }
diff --git a/extras/src/com/mopub/mobileads/ChartboostShared.java b/extras/src/com/mopub/mobileads/ChartboostShared.java
index a3bb1780..cc722c38 100644
--- a/extras/src/com/mopub/mobileads/ChartboostShared.java
+++ b/extras/src/com/mopub/mobileads/ChartboostShared.java
@@ -75,7 +75,6 @@ public static synchronized boolean initializeSdk(@NonNull Activity launcherActiv
 
         // Perform all the common SDK initialization steps including startAppWithId
         Chartboost.startWithAppId(launcherActivity, mAppId, mAppSignature);
-        Chartboost.setImpressionsUseActivities(false);
         Chartboost.setMediation(Chartboost.CBMediation.CBMediationMoPub, MoPub.SDK_VERSION);
         Chartboost.setDelegate(sDelegate);
         Chartboost.setShouldRequestInterstitialsInFirstSession(true);
diff --git a/extras/src/com/mopub/mobileads/FacebookBanner.java b/extras/src/com/mopub/mobileads/FacebookBanner.java
index c8a0b879..b1954853 100644
--- a/extras/src/com/mopub/mobileads/FacebookBanner.java
+++ b/extras/src/com/mopub/mobileads/FacebookBanner.java
@@ -16,7 +16,7 @@
 import java.util.Map;
 
 /**
- * Tested with Facebook SDK 4.8.1.
+ * Tested with Facebook SDK 4.15.0.
  */
 public class FacebookBanner extends CustomEventBanner implements AdListener {
     public static final String PLACEMENT_ID_KEY = "placement_id";
diff --git a/extras/src/com/mopub/mobileads/FacebookInterstitial.java b/extras/src/com/mopub/mobileads/FacebookInterstitial.java
index 24d19317..06d4b11f 100644
--- a/extras/src/com/mopub/mobileads/FacebookInterstitial.java
+++ b/extras/src/com/mopub/mobileads/FacebookInterstitial.java
@@ -11,7 +11,7 @@
 import java.util.Map;
 
 /**
- * Tested with Facebook SDK 4.8.1.
+ * Tested with Facebook SDK 4.15.0.
  */
 public class FacebookInterstitial extends CustomEventInterstitial implements InterstitialAdListener {
     public static final String PLACEMENT_ID_KEY = "placement_id";
diff --git a/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java b/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java
new file mode 100644
index 00000000..421a7248
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java
@@ -0,0 +1,82 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.flurry.android.FlurryAgent;
+import com.flurry.android.FlurryAgentListener;
+
+/**
+ * Tested with Flurry 6.5.0
+ */
+public final class FlurryAgentWrapper {
+    public static final String PARAM_API_KEY = "apiKey";
+    public static final String PARAM_AD_SPACE_NAME = "adSpaceName";
+
+    private static final String ORIGIN_IDENTIFIER = "Flurry_Mopub_Android";
+    private static final String ORIGIN_VERSION = "6.5.0";
+
+    private FlurryAgent.Builder mAgentBuilder;
+
+    public static FlurryAgentWrapper getInstance() {
+        return FlurryAgentLoader.INSTANCE;
+    }
+
+    private FlurryAgentWrapper() {
+        mAgentBuilder = new FlurryAgent.Builder()
+                .withLogEnabled(false)
+                .withLogLevel(Log.INFO);
+
+        FlurryAgent.addOrigin(ORIGIN_IDENTIFIER, ORIGIN_VERSION);
+    }
+
+    public synchronized void startSession(@NonNull final Context context,
+            final String apiKey,
+            @Nullable FlurryAgentListener flurryAgentListener) {
+        // validate parameters
+        if (TextUtils.isEmpty(apiKey)) {
+            return;
+        }
+
+        // init
+        if (!FlurryAgent.isSessionActive()) {
+            mAgentBuilder.withListener(flurryAgentListener) // withListener allows nulls
+                    .build(context, apiKey);
+
+            // sessions are automatic on ICS+
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
+                return;
+            }
+
+            FlurryAgent.onStartSession(context);
+        }
+    }
+
+    public synchronized void endSession(final Context context) {
+        // validate parameters
+        if (context == null) {
+            return;
+        }
+
+        if (FlurryAgent.isSessionActive()) {
+            // sessions are automatic on ICS+
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
+                return;
+            }
+
+            FlurryAgent.onEndSession(context);
+        }
+    }
+
+    public synchronized boolean isSessionActive() {
+        return FlurryAgent.isSessionActive();
+    }
+
+    private static class FlurryAgentLoader {
+        private static final FlurryAgentWrapper INSTANCE = new FlurryAgentWrapper();
+    }
+}
diff --git a/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java b/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java
new file mode 100644
index 00000000..61397ac4
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java
@@ -0,0 +1,198 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.text.TextUtils;
+import android.util.Log;
+import android.widget.FrameLayout;
+
+import com.flurry.android.ads.FlurryAdBanner;
+import com.flurry.android.ads.FlurryAdBannerListener;
+import com.flurry.android.ads.FlurryAdErrorType;
+
+import java.util.Map;
+
+import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
+import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
+
+/**
+ * Tested with Flurry 6.5.0
+ */
+class FlurryCustomEventBanner extends com.mopub.mobileads.CustomEventBanner {
+    private static final String LOG_TAG = FlurryCustomEventBanner.class.getSimpleName();
+
+    private Context mContext;
+    private CustomEventBannerListener mListener;
+    private FrameLayout mLayout;
+
+    private String mAdSpaceName;
+
+    private FlurryAdBanner mBanner;
+
+    // CustomEventBanner
+    @Override
+    protected void loadBanner(Context context,
+            CustomEventBannerListener listener,
+            Map<String, Object> localExtras, Map<String, String> serverExtras) {
+        if (context == null) {
+            Log.e(LOG_TAG, "Context cannot be null.");
+            listener.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        if (listener == null) {
+            Log.e(LOG_TAG, "CustomEventBannerListener cannot be null.");
+            return;
+        }
+
+        if (!(context instanceof Activity)) {
+            Log.e(LOG_TAG, "Ad can be rendered only in Activity context.");
+            listener.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        if (!validateExtras(serverExtras)) {
+            Log.e(LOG_TAG, "Failed banner ad fetch: Missing required server extras" +
+                    " [FLURRY_APIKEY and/or FLURRY_ADSPACE].");
+            listener.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mContext = context;
+        mListener = listener;
+        mLayout = new FrameLayout(context);
+
+        String apiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
+        mAdSpaceName = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
+
+        FlurryAgentWrapper.getInstance().startSession(context, apiKey, null);
+
+        Log.d(LOG_TAG, "Fetching Flurry ad, ad unit name:" + mAdSpaceName);
+        mBanner = new FlurryAdBanner(mContext, mLayout, mAdSpaceName);
+        mBanner.setListener(new FlurryMopubBannerListener());
+        mBanner.fetchAd();
+    }
+
+    @Override
+    protected void onInvalidate() {
+        if (mContext == null) {
+            return;
+        }
+
+        Log.d(LOG_TAG, "MoPub issued onInvalidate. Flurry ad unit: " + mAdSpaceName);
+
+        if (mBanner != null) {
+            mBanner.destroy();
+            mBanner = null;
+        }
+
+        FlurryAgentWrapper.getInstance().endSession(mContext);
+
+        mContext = null;
+        mListener = null;
+        mLayout = null;
+    }
+
+    private boolean validateExtras(final Map<String, String> serverExtras) {
+        if (serverExtras == null) { return false; }
+
+        final String flurryApiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
+        final String flurryAdSpace = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
+        Log.i(LOG_TAG, "ServerInfo fetched from Mopub " + FlurryAgentWrapper.PARAM_API_KEY + " : "
+                + flurryApiKey + " and " + FlurryAgentWrapper.PARAM_AD_SPACE_NAME + " :" +
+                flurryAdSpace);
+
+        return (!TextUtils.isEmpty(flurryApiKey) && !TextUtils.isEmpty(flurryAdSpace));
+    }
+
+    // FlurryAdListener
+    private class FlurryMopubBannerListener implements FlurryAdBannerListener {
+        private final String LOG_TAG = getClass().getSimpleName();
+
+        @Override
+        public void onFetched(FlurryAdBanner adBanner) {
+            Log.d(LOG_TAG, "onFetched: Flurry banner ad fetched successfully!");
+
+            if (mBanner != null) {
+                mBanner.displayAd();
+            }
+        }
+
+        @Override
+        public void onRendered(FlurryAdBanner adBanner) {
+            Log.d(LOG_TAG, "onRendered: Flurry banner ad rendered");
+
+            if (mListener != null) {
+                mListener.onBannerLoaded(mLayout);
+            }
+        }
+
+        @Override
+        public void onShowFullscreen(FlurryAdBanner adBanner) {
+            Log.d(LOG_TAG, "onFetched: Flurry banner ad in full-screen");
+
+            if (mListener != null) {
+                mListener.onBannerExpanded();
+            }
+        }
+
+        @Override
+        public void onCloseFullscreen(FlurryAdBanner adBanner) {
+            Log.d(LOG_TAG, "onCloseFullscreen: Flurry banner ad full-screen closed");
+
+            if (mListener != null) {
+                mListener.onBannerCollapsed();
+            }
+        }
+
+        @Override
+        public void onAppExit(FlurryAdBanner adBanner) {
+            Log.d(LOG_TAG, "onAppExit: Flurry banner ad exited app");
+
+            if (mListener != null) {
+                mListener.onLeaveApplication();
+            }
+        }
+
+        @Override
+        public void onClicked(FlurryAdBanner adBanner) {
+            Log.d(LOG_TAG, "onClicked: Flurry banner ad clicked");
+
+            if (mListener != null) {
+                mListener.onBannerClicked();
+            }
+        }
+
+        @Override
+        public void onVideoCompleted(FlurryAdBanner adBanner) {
+            Log.d(LOG_TAG, "onVideoCompleted: Flurry banner ad video completed");
+
+            // no-op
+        }
+
+        @Override
+        public void onError(FlurryAdBanner adBanner, FlurryAdErrorType adErrorType,
+                int errorCode) {
+            Log.d(LOG_TAG, String.format("onError: Flurry banner ad not available. " +
+                    "Error type: %s. Error code: %s", adErrorType.toString(), errorCode));
+
+            if (mListener != null) {
+                switch(adErrorType) {
+                    case FETCH:
+                        mListener.onBannerFailed(NETWORK_NO_FILL);
+                        return;
+                    case RENDER:
+                        mListener.onBannerFailed(NETWORK_INVALID_STATE);
+                        return;
+                    case CLICK:
+                        // Don't call onBannerFailed in this case.
+                        return;
+                    default:
+                        mListener.onBannerFailed(UNSPECIFIED);
+                }
+            }
+        }
+    }
+}
diff --git a/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java b/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java
new file mode 100644
index 00000000..d2923675
--- /dev/null
+++ b/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java
@@ -0,0 +1,202 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.flurry.android.ads.FlurryAdErrorType;
+import com.flurry.android.ads.FlurryAdInterstitial;
+import com.flurry.android.ads.FlurryAdInterstitialListener;
+
+import java.util.Map;
+
+import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
+import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
+
+/**
+ * Tested with Flurry 6.5.0
+ */
+class FlurryCustomEventInterstitial extends com.mopub.mobileads.CustomEventInterstitial {
+    private static final String LOG_TAG = FlurryCustomEventInterstitial.class.getSimpleName();
+
+    private Context mContext;
+    private CustomEventInterstitialListener mListener;
+
+    private String mAdSpaceName;
+
+    private FlurryAdInterstitial mInterstitial;
+
+    // CustomEventInterstitial
+    @Override
+    protected void loadInterstitial(Context context,
+            CustomEventInterstitialListener listener,
+            Map<String, Object> localExtras,
+            Map<String, String> serverExtras) {
+        if (context == null) {
+            Log.e(LOG_TAG, "Context cannot be null.");
+            listener.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        if (listener == null) {
+            Log.e(LOG_TAG, "CustomEventInterstitialListener cannot be null.");
+            return;
+        }
+
+        if (!(context instanceof Activity)) {
+            Log.e(LOG_TAG, "Ad can be rendered only in Activity context.");
+            listener.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        if (!validateExtras(serverExtras)) {
+            Log.e(LOG_TAG, "Failed interstitial ad fetch: Missing required server extras" +
+                    " [FLURRY_APIKEY and/or FLURRY_ADSPACE].");
+            listener.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mContext = context;
+        mListener = listener;
+
+        String apiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
+        mAdSpaceName = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
+
+        FlurryAgentWrapper.getInstance().startSession(context, apiKey, null);
+
+        Log.d(LOG_TAG, "Fetching Flurry ad, ad unit name:" + mAdSpaceName);
+        mInterstitial = new FlurryAdInterstitial(mContext, mAdSpaceName);
+        mInterstitial.setListener(new FlurryMopubInterstitialListener());
+        mInterstitial.fetchAd();
+    }
+
+    @Override
+    protected void onInvalidate() {
+        if (mContext == null) {
+            return;
+        }
+
+        Log.d(LOG_TAG, "MoPub issued onInvalidate (" + mAdSpaceName + ")");
+
+        if (mInterstitial != null) {
+            mInterstitial.destroy();
+            mInterstitial = null;
+        }
+
+        FlurryAgentWrapper.getInstance().endSession(mContext);
+
+        mContext = null;
+        mListener = null;
+    }
+
+    @Override
+    protected void showInterstitial() {
+        Log.d(LOG_TAG, "MoPub issued showInterstitial (" + mAdSpaceName + ")");
+
+        if (mInterstitial != null) {
+            mInterstitial.displayAd();
+        }
+    }
+
+    private boolean validateExtras(final Map<String, String> serverExtras) {
+        if (serverExtras == null) { return false; }
+
+        final String flurryApiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
+        final String flurryAdSpace = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
+        Log.i(LOG_TAG, "ServerInfo fetched from Mopub " + FlurryAgentWrapper.PARAM_API_KEY + " : "
+                + flurryApiKey + " and " + FlurryAgentWrapper.PARAM_AD_SPACE_NAME + " :" +
+                flurryAdSpace);
+
+        return (!TextUtils.isEmpty(flurryApiKey) && !TextUtils.isEmpty(flurryAdSpace));
+    }
+
+    // FlurryAdListener
+    private class FlurryMopubInterstitialListener implements FlurryAdInterstitialListener {
+        private final String LOG_TAG = getClass().getSimpleName();
+
+        @Override
+        public void onFetched(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onFetched: Flurry interstitial ad fetched successfully!");
+
+            if (mListener != null) {
+                mListener.onInterstitialLoaded();
+            }
+        }
+
+        @Override
+        public void onRendered(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onRendered: Flurry interstitial ad rendered");
+
+            if (mListener != null) {
+                mListener.onInterstitialShown();
+            }
+        }
+
+        @Override
+        public void onDisplay(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onDisplay: Flurry interstitial ad displayed");
+
+            // no-op
+        }
+
+        @Override
+        public void onClose(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onClose: Flurry interstitial ad closed");
+
+            if (mListener != null) {
+                mListener.onInterstitialDismissed();
+            }
+        }
+
+        @Override
+        public void onAppExit(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onAppExit: Flurry interstitial ad exited app");
+
+            if (mListener != null) {
+                mListener.onLeaveApplication();
+            }
+        }
+
+        @Override
+        public void onClicked(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onClicked: Flurry interstitial ad clicked");
+
+            if (mListener != null) {
+                mListener.onInterstitialClicked();
+            }
+        }
+
+        @Override
+        public void onVideoCompleted(FlurryAdInterstitial adInterstitial) {
+            Log.d(LOG_TAG, "onVideoCompleted: Flurry interstitial ad video completed");
+
+            // no-op
+        }
+
+        @Override
+        public void onError(FlurryAdInterstitial adInterstitial, FlurryAdErrorType adErrorType,
+                int errorCode) {
+            Log.d(LOG_TAG, String.format("onError: Flurry interstitial ad not available. " +
+                    "Error type: %s. Error code: %s", adErrorType.toString(), errorCode));
+
+            if (mListener != null) {
+                switch(adErrorType) {
+                    case FETCH:
+                        mListener.onInterstitialFailed(NETWORK_NO_FILL);
+                        return;
+                    case RENDER:
+                        mListener.onInterstitialFailed(NETWORK_INVALID_STATE);
+                        return;
+                    case CLICK:
+                        // Don't call onInterstitialFailed in this case.
+                        return;
+                    default:
+                        mListener.onInterstitialFailed(UNSPECIFIED);
+                }
+            }
+        }
+    }
+}
diff --git a/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java b/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
index d1268306..679b7d7d 100644
--- a/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
+++ b/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
@@ -17,7 +17,7 @@
 import static com.google.android.gms.ads.AdSize.MEDIUM_RECTANGLE;
 
 /*
- * Compatible with version 7.8.0 of the Google Play Services SDK.
+ * Compatible with version 9.4.0 of the Google Play Services SDK.
  */
 
 // Note: AdMob ads will now use this class as Google has deprecated the AdMob SDK.
diff --git a/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java b/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
index 7417ac76..ac672cbe 100644
--- a/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
+++ b/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
@@ -10,7 +10,7 @@
 import java.util.Map;
 
 /*
- * Compatible with version 7.8.0 of the Google Play Services SDK.
+ * Compatible with version 9.4.0 of the Google Play Services SDK.
  */
 
 // Note: AdMob ads will now use this class as Google has deprecated the AdMob SDK.
diff --git a/extras/src/com/mopub/mobileads/MillennialBanner.java b/extras/src/com/mopub/mobileads/MillennialBanner.java
index d09dcf6e..4a4b0f1a 100644
--- a/extras/src/com/mopub/mobileads/MillennialBanner.java
+++ b/extras/src/com/mopub/mobileads/MillennialBanner.java
@@ -2,6 +2,7 @@
 
 import android.app.Activity;
 import android.content.Context;
+import android.os.Build;
 import android.os.Handler;
 import android.os.Looper;
 import android.util.Log;
@@ -16,16 +17,17 @@
 import com.millennialmedia.InlineAd.InlineErrorStatus;
 import com.millennialmedia.MMException;
 import com.millennialmedia.MMSDK;
+import com.millennialmedia.internal.ActivityListenerManager;
 
 import java.util.Map;
 
 /**
- * Compatible with version 6.0 of the Millennial Media SDK.
+ * Compatible with version 6.3 of the Millennial Media SDK.
  */
 
 class MillennialBanner extends CustomEventBanner {
 
-    public static final String LOGCAT_TAG = "MP->MM Inline";
+    private static final String TAG = MillennialBanner.class.getSimpleName();
     public static final String DCN_KEY = "dcn";
     public static final String APID_KEY = "adUnitID";
     public static final String AD_WIDTH_KEY = "adWidth";
@@ -42,26 +44,21 @@ protected void loadBanner(final Context context, final CustomEventBannerListener
             final Map<String, Object> localExtras, final Map<String, String> serverExtras) {
 
         LayoutParams lp;
-        String apid = null;
-        String dcn = null;
+        String apid;
+        String dcn;
         int width;
         int height;
         mBannerListener = customEventBannerListener;
 
-        if ( !MMSDK.isInitialized() ) {
-            try {
-                MMSDK.initialize((Activity) context);
-            } catch ( Exception e ) {
-                Log.e(LOGCAT_TAG, "Unable to initialize the Millennial SDK-- " + e.getMessage());
-                e.printStackTrace();
-                UI_THREAD_HANDLER.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        mBannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
-                    }
-                });
-                return;
-            }
+        if (!initializeSDK(context)) {
+            Log.e(TAG, "Unable to initialize MMSDK");
+            UI_THREAD_HANDLER.post(new Runnable() {
+                @Override
+                public void run() {
+                    mBannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
+                }
+            });
+            return;
         }
 
         if (extrasAreValid(serverExtras)) {
@@ -70,7 +67,7 @@ public void run() {
             width = Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
             height = Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
         } else {
-            Log.e(LOGCAT_TAG, "We were given invalid extras! Make sure placement ID, width, and height are specified.");
+            Log.e(TAG, "We were given invalid extras! Make sure placement ID, width, and height are specified.");
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
                 public void run() {
@@ -80,17 +77,21 @@ public void run() {
             return;
         }
 
-        // Add DCN's for Nexage folks
+        // Set DCN on the AppInfo if provided
         try {
             AppInfo ai = new AppInfo().setMediator("mopubsdk");
-            if ( dcn != null && dcn.length() > 0 ) {
+            if (dcn != null && dcn.length() > 0) {
                 ai = ai.setSiteId(dcn);
             } else {
                 ai = ai.setSiteId(null);
             }
-            MMSDK.setAppInfo(ai);
-        } catch ( IllegalStateException e ) {
-            Log.i(LOGCAT_TAG, "Caught exception " + e.getMessage());
+            try {
+                MMSDK.setAppInfo(ai);
+            } catch (MMException e) {
+                Log.e(TAG, "MM SDK is not initialized", e);
+            }
+        } catch (IllegalStateException e) {
+            Log.i(TAG, "Caught exception " + e.getMessage());
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
                 public void run() {
@@ -111,7 +112,7 @@ public void run() {
         try {
             mInlineAd = InlineAd.createInstance(apid, mInternalView);
             mInlineAdMetadata = new InlineAdMetadata().setAdSize(new AdSize(width, height));
-        } catch ( MMException e ) {
+        } catch (MMException e) {
             e.printStackTrace();
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
@@ -123,9 +124,13 @@ public void run() {
         }
 
         mInlineAd.setListener(new MillennialInlineListener());
-        
+
+        try {
         /* If MoPub gets location, so do we. */
-        MMSDK.setLocationEnabled( (localExtras.get("location") != null) );
+            MMSDK.setLocationEnabled((localExtras.get("location") != null));
+        } catch (MMException e) {
+            Log.e(TAG, "MM SDK is not initialized", e);
+        }
 
         AdViewController.setShouldHonorServerDimensions(mInternalView);
 
@@ -141,16 +146,43 @@ protected void onInvalidate() {
         }
     }
 
+    private boolean initializeSDK(Context context) {
+        try {
+            if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
+                if (!MMSDK.isInitialized()) {
+                    if (context instanceof Activity) {
+                        try {
+                            MMSDK.initialize(((Activity) context), ActivityListenerManager.LifecycleState.RESUMED);
+                        } catch (Exception e) {
+                            Log.e(TAG, "Error initializing MMSDK", e);
+                            return false;
+                        }
+                    } else {
+                        Log.e(TAG, "MMSDK.initialize must be explicitly called when instantiating the MoPub AdView or InterstitialAd without an Activity.");
+                        return false;
+                    }
+                }
+            } else {
+                Log.e(TAG, "MMSDK minimum supported API is 16");
+                return false;
+            }
+            return true;
+        } catch (Exception e) {
+            Log.e(TAG, "Error initializing MMSDK", e);
+            return false;
+        }
+    }
+
     private boolean extrasAreValid(final Map<String, String> serverExtras) {
         try {
             // Add pos / non-null and APIDs.
             int w = Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
             int h = Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
-            if ( h < 0 || w < 0 ) {
+            if (h < 0 || w < 0) {
                 throw new NumberFormatException();
             }
         } catch (Exception e) {
-            Log.e(LOGCAT_TAG, "Width and height must exist and contain positive integers!");
+            Log.e(TAG, "Width and height must exist and contain positive integers!");
             e.printStackTrace();
             return false;
         }
@@ -161,14 +193,14 @@ private boolean extrasAreValid(final Map<String, String> serverExtras) {
     class MillennialInlineListener implements InlineAd.InlineListener {
 
         @Override
-        public void onAdLeftApplication(InlineAd arg0) {
+        public void onAdLeftApplication(InlineAd inlineAd) {
             // Intentionally not calling MoPub's onLeaveApplication to avoid double-count
-            Log.d(LOGCAT_TAG, "Millennial Inline Ad - Leaving application");
+            Log.d(TAG, "Millennial Inline Ad - Leaving application");
         }
 
         @Override
-        public void onClicked(InlineAd arg0) {
-            Log.d(LOGCAT_TAG, "Millennial Inline Ad - Ad clicked");
+        public void onClicked(InlineAd inlineAd) {
+            Log.d(TAG, "Millennial Inline Ad - Ad clicked");
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
                 public void run() {
@@ -178,8 +210,8 @@ public void run() {
         }
 
         @Override
-        public void onCollapsed(InlineAd arg0) {
-            Log.d(LOGCAT_TAG, "Millennial Inline Ad - Banner collapsed");
+        public void onCollapsed(InlineAd inlineAd) {
+            Log.d(TAG, "Millennial Inline Ad - Banner collapsed");
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
                 public void run() {
@@ -190,8 +222,8 @@ public void run() {
         }
 
         @Override
-        public void onExpanded(InlineAd arg0) {
-            Log.d(LOGCAT_TAG, "Millennial Inline Ad - Banner expanded");
+        public void onExpanded(InlineAd inlineAd) {
+            Log.d(TAG, "Millennial Inline Ad - Banner expanded");
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
                 public void run() {
@@ -201,11 +233,11 @@ public void run() {
         }
 
         @Override
-        public void onRequestFailed(InlineAd arg0, InlineErrorStatus err) {
-            Log.d(LOGCAT_TAG, "Millennial Inline Ad - Banner failed (" + err.getErrorCode() + "): " + err.getDescription() );
+        public void onRequestFailed(InlineAd inlineAd, InlineErrorStatus inlineErrorStatus) {
+            Log.d(TAG, "Millennial Inline Ad - Banner failed (" + inlineErrorStatus.getErrorCode() + "): " + inlineErrorStatus.getDescription());
             MoPubErrorCode mopubErrorCode;
 
-            switch ( err.getErrorCode() ) {
+            switch (inlineErrorStatus.getErrorCode()) {
                 case InlineErrorStatus.ADAPTER_NOT_FOUND:
                     mopubErrorCode = MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
                     break;
@@ -237,8 +269,8 @@ public void run() {
         }
 
         @Override
-        public void onRequestSucceeded(InlineAd arg0) {
-            Log.d(LOGCAT_TAG, "Millennial Inline Ad - Banner request succeeded");
+        public void onRequestSucceeded(InlineAd inlineAd) {
+            Log.d(TAG, "Millennial Inline Ad - Banner request succeeded");
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
                 public void run() {
@@ -248,14 +280,14 @@ public void run() {
         }
 
         @Override
-        public void onResize(InlineAd arg0, int w, int h) {
-            Log.d(LOGCAT_TAG, "Millennial Inline Ad - Banner about to resize (width: " + w + ", height: " + h + ")");
+        public void onResize(InlineAd inlineAd, int w, int h) {
+            Log.d(TAG, "Millennial Inline Ad - Banner about to resize (width: " + w + ", height: " + h + ")");
         }
 
         @Override
-        public void onResized(InlineAd arg0, int w, int h, boolean isClosed) {
-            Log.d(LOGCAT_TAG, "Millennial Inline Ad - Banner resized (width: " + w + ", height: " + h + "). "
-                    + (isClosed ? "Returned to original placement." : "Got a fresh, new place.") );
+        public void onResized(InlineAd inlineAd, int w, int h, boolean isClosed) {
+            Log.d(TAG, "Millennial Inline Ad - Banner resized (width: " + w + ", height: " + h + "). "
+                    + (isClosed ? "Returned to original placement." : "Got a fresh, new place."));
 
         }
 
diff --git a/extras/src/com/mopub/mobileads/MillennialInterstitial.java b/extras/src/com/mopub/mobileads/MillennialInterstitial.java
index 25eba9b4..55eef347 100644
--- a/extras/src/com/mopub/mobileads/MillennialInterstitial.java
+++ b/extras/src/com/mopub/mobileads/MillennialInterstitial.java
@@ -2,26 +2,28 @@
 
 import android.app.Activity;
 import android.content.Context;
+import android.os.Build;
 import android.os.Handler;
 import android.os.Looper;
 import android.util.Log;
 
-import java.util.Map;
-
 import com.millennialmedia.AppInfo;
 import com.millennialmedia.InterstitialAd;
 import com.millennialmedia.InterstitialAd.InterstitialErrorStatus;
 import com.millennialmedia.InterstitialAd.InterstitialListener;
 import com.millennialmedia.MMException;
 import com.millennialmedia.MMSDK;
+import com.millennialmedia.internal.ActivityListenerManager;
+
+import java.util.Map;
 
 /**
- * Compatible with version 6.0 of the Millennial Media SDK.
+ * Compatible with version 6.3 of the Millennial Media SDK.
  */
 
 class MillennialInterstitial extends CustomEventInterstitial {
 
-    public static final String LOGCAT_TAG = "MP->MM Int.";
+    private static final String TAG = MillennialInterstitial.class.getSimpleName();
     public static final String DCN_KEY = "dcn";
     public static final String APID_KEY = "adUnitID";
 
@@ -33,33 +35,28 @@
     @Override
     protected void loadInterstitial(final Context context, final CustomEventInterstitialListener customEventInterstitialListener,
             final Map<String, Object> localExtras, final Map<String, String> serverExtras) {
-        String dcn = null;
+        String dcn;
         mInterstitialListener = customEventInterstitialListener;
         mContext = context;
 
         final String apid;
 
-        if ( !MMSDK.isInitialized() ) {
-            try {
-                MMSDK.initialize((Activity) context);
-            } catch ( Exception e ) {
-                Log.e(LOGCAT_TAG, "Unable to initialize the Millennial SDK-- " + e.getMessage());
-                e.printStackTrace();
-                UI_THREAD_HANDLER.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        mInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
-                    }
-                });
-                return;
-            }
+        if (!initializeSDK(context)) {
+            Log.e(TAG, "Unable to initialize MMSDK");
+            UI_THREAD_HANDLER.post(new Runnable() {
+                @Override
+                public void run() {
+                    mInterstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
+                }
+            });
+            return;
         }
 
         if (extrasAreValid(serverExtras)) {
             dcn = serverExtras.get(DCN_KEY);
             apid = serverExtras.get(APID_KEY);
         } else {
-            Log.e(LOGCAT_TAG, "Invalid extras-- Be sure you have an placement ID specified.");
+            Log.e(TAG, "Invalid extras-- Be sure you have an placement ID specified.");
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
                 public void run() {
@@ -72,18 +69,26 @@ public void run() {
         // Add DCN support
         try {
             AppInfo ai = new AppInfo().setMediator("mopubsdk");
-            if ( dcn != null && dcn.length() > 0 ) {
+            if (dcn != null && dcn.length() > 0) {
                 ai = ai.setSiteId(dcn);
             } else {
                 ai.setSiteId(null);
             }
-            MMSDK.setAppInfo(ai);
-        } catch ( IllegalStateException e ) {
-            Log.i(LOGCAT_TAG, "SDK not finished initializing-- " + e.getMessage());
+            try {
+                MMSDK.setAppInfo(ai);
+            } catch (MMException e) {
+                Log.e(TAG, "MM SDK is not initialized", e);
+            }
+        } catch (IllegalStateException e) {
+            Log.i(TAG, "SDK not finished initializing-- " + e.getMessage());
         }
-        
+
+        try {
         /* If MoPub gets location, so do we. */
-        MMSDK.setLocationEnabled( (localExtras.get("location") != null) );
+            MMSDK.setLocationEnabled((localExtras.get("location") != null));
+        } catch (MMException e) {
+            Log.e(TAG, "MM SDK is not initialized", e);
+        }
 
         try {
             mMillennialInterstitial = InterstitialAd.createInstance(apid);
@@ -107,7 +112,7 @@ protected void showInterstitial() {
         if (mMillennialInterstitial.isReady()) {
             try {
                 mMillennialInterstitial.show(mContext);
-            } catch ( MMException e ) {
+            } catch (MMException e) {
                 e.printStackTrace();
                 UI_THREAD_HANDLER.post(new Runnable() {
                     @Override
@@ -118,7 +123,7 @@ public void run() {
                 return;
             }
         } else {
-            Log.w(LOGCAT_TAG, "showInterstitial called before Millennial's ad was loaded.");
+            Log.w(TAG, "showInterstitial called before Millennial's ad was loaded.");
         }
     }
 
@@ -130,6 +135,33 @@ protected void onInvalidate() {
         }
     }
 
+    private boolean initializeSDK(Context context) {
+        try {
+            if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
+                if (!MMSDK.isInitialized()) {
+                    if (context instanceof Activity) {
+                        try {
+                            MMSDK.initialize(((Activity) context), ActivityListenerManager.LifecycleState.RESUMED);
+                        } catch (Exception e) {
+                            Log.e(TAG, "Error initializing MMSDK", e);
+                            return false;
+                        }
+                    } else {
+                        Log.e(TAG, "MMSDK.initialize must be explicitly called when instantiating the MoPub AdView or InterstitialAd without an Activity.");
+                        return false;
+                    }
+                }
+            } else {
+                Log.e(TAG, "MMSDK minimum supported API is 16");
+                return false;
+            }
+            return true;
+        } catch (Exception e) {
+            Log.e(TAG, "Error initializing MMSDK", e);
+            return false;
+        }
+    }
+
     private boolean extrasAreValid(Map<String, String> serverExtras) {
         return serverExtras.containsKey(APID_KEY);
     }
@@ -137,14 +169,14 @@ private boolean extrasAreValid(Map<String, String> serverExtras) {
     class MillennialInterstitialListener implements InterstitialListener {
 
         @Override
-        public void onAdLeftApplication(InterstitialAd arg0) {
+        public void onAdLeftApplication(InterstitialAd interstitialAd) {
             // Intentionally not calling MoPub's onLeaveApplication to avoid double-count
-            Log.d(LOGCAT_TAG, "Millennial Interstitial Ad - Leaving application");
+            Log.d(TAG, "Millennial Interstitial Ad - Leaving application");
         }
 
         @Override
-        public void onClicked(InterstitialAd arg0) {
-            Log.d(LOGCAT_TAG, "Millennial Interstitial Ad - Ad was clicked");
+        public void onClicked(InterstitialAd interstitialAd) {
+            Log.d(TAG, "Millennial Interstitial Ad - Ad was clicked");
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
                 public void run() {
@@ -154,8 +186,8 @@ public void run() {
         }
 
         @Override
-        public void onClosed(InterstitialAd arg0) {
-            Log.d(LOGCAT_TAG, "Millennial Interstitial Ad - Ad was closed");
+        public void onClosed(InterstitialAd interstitialAd) {
+            Log.d(TAG, "Millennial Interstitial Ad - Ad was closed");
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
                 public void run() {
@@ -165,8 +197,8 @@ public void run() {
         }
 
         @Override
-        public void onExpired(InterstitialAd arg0) {
-            Log.d(LOGCAT_TAG, "Millennial Interstitial Ad - Ad expired");
+        public void onExpired(InterstitialAd interstitialAd) {
+            Log.d(TAG, "Millennial Interstitial Ad - Ad expired");
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
                 public void run() {
@@ -176,16 +208,16 @@ public void run() {
         }
 
         @Override
-        public void onLoadFailed(InterstitialAd arg0,
-                InterstitialErrorStatus err) {
-            Log.d(LOGCAT_TAG, "Millennial Interstitial Ad - load failed (" + err.getErrorCode() + "): " + err.getDescription() );
+        public void onLoadFailed(InterstitialAd interstitialAd,
+                InterstitialErrorStatus interstitialErrorStatus) {
+            Log.d(TAG, "Millennial Interstitial Ad - load failed (" + interstitialErrorStatus.getErrorCode() + "): " + interstitialErrorStatus.getDescription());
             final MoPubErrorCode moPubErrorCode;
 
-            switch (err.getErrorCode() ) {
+            switch (interstitialErrorStatus.getErrorCode()) {
                 case InterstitialErrorStatus.ALREADY_LOADED:
                     // This will generate discrepancies, as requests will NOT be sent to Millennial.
                     mInterstitialListener.onInterstitialLoaded();
-                    Log.w(LOGCAT_TAG, "Millennial Interstitial Ad - Attempted to load ads when ads are already loaded." );
+                    Log.w(TAG, "Millennial Interstitial Ad - Attempted to load ads when ads are already loaded.");
                     return;
                 case InterstitialErrorStatus.EXPIRED:
                 case InterstitialErrorStatus.DISPLAY_FAILED:
@@ -214,8 +246,8 @@ public void run() {
         }
 
         @Override
-        public void onLoaded(InterstitialAd arg0) {
-            Log.d(LOGCAT_TAG, "Millennial Interstitial Ad - Ad loaded splendidly");
+        public void onLoaded(InterstitialAd interstitialAd) {
+            Log.d(TAG, "Millennial Interstitial Ad - Ad loaded splendidly");
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
                 public void run() {
@@ -225,9 +257,9 @@ public void run() {
         }
 
         @Override
-        public void onShowFailed(InterstitialAd arg0,
-                InterstitialErrorStatus arg1) {
-            Log.e(LOGCAT_TAG, "Millennial Interstitial Ad - Show failed (" + arg1.getErrorCode() + "): " + arg1.getDescription());
+        public void onShowFailed(InterstitialAd interstitialAd,
+                InterstitialErrorStatus interstitialErrorStatus) {
+            Log.e(TAG, "Millennial Interstitial Ad - Show failed (" + interstitialErrorStatus.getErrorCode() + "): " + interstitialErrorStatus.getDescription());
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
                 public void run() {
@@ -237,8 +269,8 @@ public void run() {
         }
 
         @Override
-        public void onShown(InterstitialAd arg0) {
-            Log.d(LOGCAT_TAG, "Millennial Interstitial Ad - Ad shown");
+        public void onShown(InterstitialAd interstitialAd) {
+            Log.d(TAG, "Millennial Interstitial Ad - Ad shown");
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
                 public void run() {
diff --git a/extras/src/com/mopub/mobileads/TapjoyInterstitial.java b/extras/src/com/mopub/mobileads/TapjoyInterstitial.java
index 029592dc..48980569 100644
--- a/extras/src/com/mopub/mobileads/TapjoyInterstitial.java
+++ b/extras/src/com/mopub/mobileads/TapjoyInterstitial.java
@@ -1,3 +1,11 @@
+// Copyright (C) 2015 by Tapjoy Inc.
+//
+// This file is part of the Tapjoy SDK.
+//
+// By using the Tapjoy SDK in your software, you agree to the terms of the Tapjoy SDK License Agreement.
+//
+// The Tapjoy SDK is bound by the Tapjoy SDK License Agreement and can be found here: https://www.tapjoy.com/sdk/license
+
 package com.mopub.mobileads;
 
 import android.content.Context;
@@ -7,18 +15,25 @@
 
 import com.mopub.common.logging.MoPubLog;
 import com.tapjoy.TJActionRequest;
+import com.tapjoy.TJConnectListener;
 import com.tapjoy.TJError;
 import com.tapjoy.TJPlacement;
 import com.tapjoy.TJPlacementListener;
+import com.tapjoy.Tapjoy;
 import com.tapjoy.TapjoyLog;
 
 import java.util.Map;
 
-// Tested with Tapjoy SDK 11.5.1
+// Tested with Tapjoy SDK 11.8.2
 public class TapjoyInterstitial extends CustomEventInterstitial implements TJPlacementListener {
     private static final String TAG = TapjoyInterstitial.class.getSimpleName();
     private static final String TJC_MOPUB_NETWORK_CONSTANT = "mopub";
-    private static final String TJC_MOPUB_ADAPTER_VERSION_NUMBER = "4.0.0";
+    private static final String TJC_MOPUB_ADAPTER_VERSION_NUMBER = "4.1.0";
+
+    // Configuration keys
+    public static final String SDK_KEY = "sdkKey";
+    public static final String DEBUG_ENABLED = "debugEnabled";
+    public static final String PLACEMENT_NAME = "name";
 
     private TJPlacement tjPlacement;
     private CustomEventInterstitialListener mInterstitialListener;
@@ -29,7 +44,7 @@
     }
 
     @Override
-    protected void loadInterstitial(Context context,
+    protected void loadInterstitial(final Context context,
             CustomEventInterstitialListener customEventInterstitialListener,
             Map<String, Object> localExtras,
             Map<String, String> serverExtras) {
@@ -38,11 +53,48 @@ protected void loadInterstitial(Context context,
         mInterstitialListener = customEventInterstitialListener;
         mHandler = new Handler(Looper.getMainLooper());
 
-        String name = serverExtras.get("name");
-        if (TextUtils.isEmpty(name)) {
+        final String placementName = serverExtras.get(PLACEMENT_NAME);
+        if (TextUtils.isEmpty(placementName)) {
             MoPubLog.d("Tapjoy interstitial loaded with empty 'name' field. Request will fail.");
         }
-        tjPlacement = new TJPlacement(context, name, this);
+
+        boolean canRequestPlacement = true;
+        if (!Tapjoy.isConnected()) {
+            // Check if configuration data is available
+            boolean enableDebug = Boolean.valueOf(serverExtras.get(DEBUG_ENABLED));
+            Tapjoy.setDebugEnabled(enableDebug);
+
+            String sdkKey = serverExtras.get(SDK_KEY);
+            if (!TextUtils.isEmpty(sdkKey)) {
+                MoPubLog.d("Connecting to Tapjoy via MoPub dashboard settings...");
+                Tapjoy.connect(context, sdkKey, null, new TJConnectListener() {
+                    @Override
+                    public void onConnectSuccess() {
+                        MoPubLog.d("Tapjoy connected successfully");
+                        createPlacement(context, placementName);
+                    }
+
+                    @Override
+                    public void onConnectFailure() {
+                        MoPubLog.d("Tapjoy connect failed");
+                    }
+                });
+
+                // If sdkKey is present via MoPub dashboard, we only want to request placement
+                // after auto-connect succeeds
+                canRequestPlacement = false;
+            } else {
+                MoPubLog.d("Tapjoy interstitial is initialized with empty 'sdkKey'. You must call Tapjoy.connect()");
+            }
+        }
+
+        if (canRequestPlacement) {
+            createPlacement(context, placementName);
+        }
+    }
+
+    private void createPlacement(Context context, String placementName) {
+        tjPlacement = new TJPlacement(context, placementName, this);
         tjPlacement.setMediationName(TJC_MOPUB_NETWORK_CONSTANT);
         tjPlacement.setAdapterVersion(TJC_MOPUB_ADAPTER_VERSION_NUMBER);
         tjPlacement.requestContent();
diff --git a/extras/src/com/mopub/mobileads/TapjoyRewardedVideo.java b/extras/src/com/mopub/mobileads/TapjoyRewardedVideo.java
index d0f81000..b08d8f04 100644
--- a/extras/src/com/mopub/mobileads/TapjoyRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/TapjoyRewardedVideo.java
@@ -21,16 +21,23 @@
 import java.util.Hashtable;
 import java.util.Map;
 
-// Tested with Tapjoy SDK 11.5.1
+// Tested with Tapjoy SDK 11.8.2
 public class TapjoyRewardedVideo extends CustomEventRewardedVideo {
     private static final String TAG = TapjoyRewardedVideo.class.getSimpleName();
     private static final String TJC_MOPUB_NETWORK_CONSTANT = "mopub";
-    private static final String TJC_MOPUB_ADAPTER_VERSION_NUMBER = "4.0.0";
+    private static final String TJC_MOPUB_ADAPTER_VERSION_NUMBER = "4.1.0";
     private static final String TAPJOY_AD_NETWORK_CONSTANT = "tapjoy_id";
 
+    // Configuration keys
+    public static final String SDK_KEY = "sdkKey";
+    public static final String DEBUG_ENABLED = "debugEnabled";
+    public static final String PLACEMENT_NAME = "name";
+
     private String sdkKey;
+    private String placementName;
     private Hashtable<String, Object> connectFlags;
     private TJPlacement tjPlacement;
+    private boolean isAutoConnect = false;
     private static TapjoyRewardedVideoListener sTapjoyListener = new TapjoyRewardedVideoListener();
 
     static {
@@ -62,25 +69,33 @@ protected boolean checkAndInitializeSdk(@NonNull Activity launcherActivity,
             @NonNull Map<String, String> serverExtras)
             throws Exception {
 
+        placementName = serverExtras.get(PLACEMENT_NAME);
+        if (TextUtils.isEmpty(placementName)) {
+            MoPubLog.d("Tapjoy rewarded video loaded with empty 'name' field. Request will fail.");
+        }
+
         if (!Tapjoy.isConnected()) {
             if (checkAndInitMediationSettings()) {
-                MoPubLog.d("Request to connect to Tapjoy");
-
-                Tapjoy.connect(launcherActivity, sdkKey, connectFlags, new TJConnectListener() {
-                    @Override
-                    public void onConnectSuccess() {
-                        MoPubLog.d("Tapjoy connected successfully");
-                    }
-
-                    @Override
-                    public void onConnectFailure() {
-                        MoPubLog.e("Tapjoy connect failed");
-                    }
-                });
+                MoPubLog.d("Connecting to Tapjoy via MoPub mediation settings...");
+                connectToTapjoy(launcherActivity);
 
+                isAutoConnect = true;
                 return true;
             } else {
-                MoPubLog.d("Cannot connect to Tapjoy -- missing 'sdkkey' declaration via TapjoyMediationSettings");
+                boolean enableDebug = Boolean.valueOf(serverExtras.get(DEBUG_ENABLED));
+                Tapjoy.setDebugEnabled(enableDebug);
+
+                sdkKey = serverExtras.get(SDK_KEY);
+                if (!TextUtils.isEmpty(sdkKey)) {
+                    MoPubLog.d("Connecting to Tapjoy via MoPub dashboard settings...");
+                    connectToTapjoy(launcherActivity);
+
+                    isAutoConnect = true;
+                    return true;
+                } else {
+                    MoPubLog.d("Tapjoy rewarded video is initialized with empty 'sdkKey'. You must call Tapjoy.connect()");
+                    isAutoConnect = false;
+                }
             }
         }
 
@@ -93,15 +108,40 @@ protected void loadWithSdkInitialized(@NonNull Activity activity,
             @NonNull Map<String, String> serverExtras)
             throws Exception {
         MoPubLog.d("Requesting Tapjoy rewarded video");
+        createPlacement(activity);
+    }
+
+    private void connectToTapjoy(final Activity launcherActivity) {
+        Tapjoy.connect(launcherActivity, sdkKey, connectFlags, new TJConnectListener() {
+            @Override
+            public void onConnectSuccess() {
+                MoPubLog.d("Tapjoy connected successfully");
+                createPlacement(launcherActivity);
+            }
 
-        String name = serverExtras.get("name");
-        if (TextUtils.isEmpty(name)) {
-            MoPubLog.d("Tapjoy interstitial loaded with empty 'name' field. Request will fail.");
+            @Override
+            public void onConnectFailure() {
+                MoPubLog.d("Tapjoy connect failed");
+            }
+        });
+    }
+
+    private void createPlacement(Activity activity) {
+        if (!TextUtils.isEmpty(placementName)) {
+            if (isAutoConnect && !Tapjoy.isConnected()) {
+                // If adapter is making the Tapjoy.connect() call on behalf of the pub, wait for it to
+                // succeed before making a placement request.
+                MoPubLog.d("Tapjoy is still connecting. Please wait for this to finish before making a placement request");
+                return;
+            }
+
+            tjPlacement = new TJPlacement(activity, placementName, sTapjoyListener);
+            tjPlacement.setMediationName(TJC_MOPUB_NETWORK_CONSTANT);
+            tjPlacement.setAdapterVersion(TJC_MOPUB_ADAPTER_VERSION_NUMBER);
+            tjPlacement.requestContent();
+        } else {
+            MoPubLog.d("Tapjoy placementName is empty. Unable to create TJPlacement.");
         }
-        tjPlacement = new TJPlacement(activity, name, sTapjoyListener);
-        tjPlacement.setMediationName(TJC_MOPUB_NETWORK_CONSTANT);
-        tjPlacement.setAdapterVersion(TJC_MOPUB_ADAPTER_VERSION_NUMBER);
-        tjPlacement.requestContent();
     }
 
     @Override
@@ -117,19 +157,19 @@ protected void showVideo() {
         } else {
             MoPubLog.d("Failed to show Tapjoy rewarded video.");
         }
-
     }
 
     private boolean checkAndInitMediationSettings() {
-        MoPubLog.d("Initializing Tapjoy mediation settings");
-
         final TapjoyMediationSettings globalMediationSettings =
                 MoPubRewardedVideoManager.getGlobalMediationSettings(TapjoyMediationSettings.class);
 
         if (globalMediationSettings != null) {
+            MoPubLog.d("Initializing Tapjoy mediation settings");
+
             if (!TextUtils.isEmpty(globalMediationSettings.getSdkKey())) {
                 sdkKey = globalMediationSettings.getSdkKey();
             } else {
+                MoPubLog.d("Cannot initialize Tapjoy -- 'sdkkey' is empty");
                 return false;
             }
 
@@ -146,7 +186,7 @@ private boolean checkAndInitMediationSettings() {
     private static class TapjoyRewardedVideoListener implements TJPlacementListener, CustomEventRewardedVideoListener, TJVideoListener {
         @Override
         public void onRequestSuccess(TJPlacement placement) {
-            if (!placement.isContentAvailable()){
+            if (!placement.isContentAvailable()) {
                 MoPubLog.d("No Tapjoy rewarded videos available");
                 MoPubRewardedVideoManager.onRewardedVideoLoadFailure(TapjoyRewardedVideo.class, TAPJOY_AD_NETWORK_CONSTANT, MoPubErrorCode.NETWORK_NO_FILL);
             }
diff --git a/extras/src/com/mopub/mobileads/VungleInterstitial.java b/extras/src/com/mopub/mobileads/VungleInterstitial.java
index 09a39731..f7a9e5dd 100644
--- a/extras/src/com/mopub/mobileads/VungleInterstitial.java
+++ b/extras/src/com/mopub/mobileads/VungleInterstitial.java
@@ -9,11 +9,9 @@
 import com.vungle.publisher.VunglePub;
 
 import java.util.Map;
-import java.util.concurrent.ScheduledThreadPoolExecutor;
-import java.util.concurrent.TimeUnit;
 
 /*
- * Tested with Vungle SDK 3.3.0
+ * Tested with Vungle SDK 4.0.2
  */
 public class VungleInterstitial extends CustomEventInterstitial implements EventListener {
 
@@ -27,12 +25,10 @@
     private final VunglePub mVunglePub;
     private final Handler mHandler;
     private CustomEventInterstitialListener mCustomEventInterstitialListener;
-    private boolean mIsLoading;
 
     public VungleInterstitial() {
         mHandler = new Handler(Looper.getMainLooper());
         mVunglePub = VunglePub.getInstance();
-        mIsLoading = false;
     }
 
     @Override
@@ -62,9 +58,11 @@ protected void loadInterstitial(Context context,
         mVunglePub.init(context, appId);
         mVunglePub.setEventListeners(this);
         if (mVunglePub.isAdPlayable()) {
-            notifyAdAvailable();
+            Log.d("MoPub", "Vungle interstitial ad successfully loaded.");
+            mCustomEventInterstitialListener.onInterstitialLoaded();
         } else {
-            mIsLoading = true;
+            Log.d("MoPub", "Vungle interstitial ad is not loaded.");
+            mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
         }
     }
 
@@ -80,24 +78,12 @@ protected void showInterstitial() {
     @Override
     protected void onInvalidate() {
         mVunglePub.clearEventListeners();
-        mIsLoading = false;
     }
 
     private boolean extrasAreValid(Map<String, String> serverExtras) {
         return serverExtras.containsKey(APP_ID_KEY);
     }
 
-    private void notifyAdAvailable() {
-        Log.d("MoPub", "Vungle interstitial ad successfully loaded.");
-        mIsLoading = false;
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                mCustomEventInterstitialListener.onInterstitialLoaded();
-            }
-        });
-    }
-
     /*
      * EventListener implementation
      */
@@ -120,7 +106,7 @@ public void run() {
     }
 
     @Override
-    public void onAdEnd(final boolean wasCallToActionClicked) {
+    public void onAdEnd(final boolean wasSuccessfulView, final boolean wasCallToActionClicked) {
         mHandler.post(new Runnable() {
             @Override
             public void run() {
@@ -140,8 +126,7 @@ public void onAdUnavailable(final String s) {
 
     @Override
     public void onAdPlayableChanged(final boolean playable) {
-        if (mIsLoading && playable) {
-            notifyAdAvailable();
-        }
+        Log.d("MoPub", String.format("Vungle interstitial ad is %s.",
+                playable ? "playable" : "not playable"));
     }
 }
diff --git a/extras/src/com/mopub/mobileads/VungleRewardedVideo.java b/extras/src/com/mopub/mobileads/VungleRewardedVideo.java
index 8f5a8245..f8d86c73 100644
--- a/extras/src/com/mopub/mobileads/VungleRewardedVideo.java
+++ b/extras/src/com/mopub/mobileads/VungleRewardedVideo.java
@@ -1,11 +1,10 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
-import android.os.Handler;
-import android.os.Looper;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
+
 import com.mopub.common.BaseLifecycleListener;
 import com.mopub.common.DataKeys;
 import com.mopub.common.LifecycleListener;
@@ -16,13 +15,13 @@
 import com.vungle.publisher.EventListener;
 import com.vungle.publisher.VunglePub;
 
-import java.util.*;
-import java.util.concurrent.*;
+import java.util.Locale;
+import java.util.Map;
 
 /**
  * A custom event for showing Vungle rewarded videos.
  *
- * Certified with Vungle 3.3.0
+ * Certified with Vungle 4.0.2
  */
 public class VungleRewardedVideo extends CustomEventRewardedVideo {
 
@@ -52,14 +51,11 @@ public void onResume(@NonNull final Activity activity) {
         }
     };
 
-    private final Handler mHandler;
-    private boolean mIsLoading;
     private String mAdUnitId;
+    private String mCustomerId;
 
     public VungleRewardedVideo() {
         sVungleListener = new VungleRewardedVideoListener();
-        mHandler = new Handler(Looper.getMainLooper());
-        mIsLoading = false;
     }
 
     @Nullable
@@ -103,10 +99,20 @@ protected void loadWithSdkInitialized(@NonNull final Activity activity, @NonNull
         if (adUnitObject instanceof String) {
             mAdUnitId = (String) adUnitObject;
         }
+
+        Object customerIdObject = localExtras.get(DataKeys.REWARDED_VIDEO_CUSTOMER_ID);
+        if (customerIdObject instanceof String && !TextUtils.isEmpty((String) customerIdObject)) {
+            mCustomerId = (String) customerIdObject;
+        }
+
         if (sVunglePub.isAdPlayable()) {
-            notifyAdAvailable();
+            MoPubLog.d("Vungle rewarded video ad successfully loaded.");
+            MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(VungleRewardedVideo.class,
+                    VUNGLE_AD_NETWORK_CONSTANT);
         } else {
-            mIsLoading = true;
+            MoPubLog.d("Vungle rewarded video ad is not loaded.");
+            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(VungleRewardedVideo.class,
+                    VUNGLE_AD_NETWORK_CONSTANT, MoPubErrorCode.NETWORK_NO_FILL);
         }
     }
 
@@ -151,33 +157,31 @@ private void modifyAdConfig(AdConfig adConfig, VungleMediationSettings mediation
         if (!TextUtils.isEmpty(mediationSettings.title)) {
             adConfig.setIncentivizedCancelDialogTitle(mediationSettings.title);
         }
-        if (!TextUtils.isEmpty(mediationSettings.userId)) {
+        if (!TextUtils.isEmpty(mCustomerId)) {
+            adConfig.setIncentivizedUserId(mCustomerId);
+        } else if (!TextUtils.isEmpty(mediationSettings.userId)) {
             adConfig.setIncentivizedUserId(mediationSettings.userId);
         }
     }
 
-    private void notifyAdAvailable() {
-        MoPubLog.d("Vungle rewarded video ad successfully loaded.");
-        mIsLoading = false;
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(VungleRewardedVideo.class,
-                        VUNGLE_AD_NETWORK_CONSTANT);
-            }
-        });
-    }
-
     @Override
     protected void onInvalidate() {
-        mIsLoading = false;
     }
 
     private class VungleRewardedVideoListener implements EventListener,
             CustomEventRewardedVideoListener {
 
         @Override
-        public void onAdEnd(final boolean wasCallToActionClicked) {
+        public void onAdEnd(final boolean wasSuccessfulView, final boolean wasCallToActionClicked) {
+            if (wasSuccessfulView) {
+                // Vungle does not provide a callback when a user should be rewarded.
+                // You will need to provide your own reward logic if you receive a reward with
+                // "NO_REWARD_LABEL" && "NO_REWARD_AMOUNT"
+                MoPubRewardedVideoManager.onRewardedVideoCompleted(VungleRewardedVideo.class,
+                        VUNGLE_AD_NETWORK_CONSTANT,
+                        MoPubReward.success(MoPubReward.NO_REWARD_LABEL,
+                                MoPubReward.NO_REWARD_AMOUNT));
+            }
             if (wasCallToActionClicked) {
                 MoPubRewardedVideoManager.onRewardedVideoClicked(VungleRewardedVideo.class,
                         VUNGLE_AD_NETWORK_CONSTANT);
@@ -200,23 +204,14 @@ public void onAdUnavailable(final String s) {
 
         @Override
         public void onAdPlayableChanged(final boolean playable) {
-            if (mIsLoading && playable) {
-                notifyAdAvailable();
-            }
+            MoPubLog.d(String.format("Vungle rewarded video ad is %s.",
+                    playable ? "playable" : "not playable"));
         }
 
         @Override
         public void onVideoView(final boolean isCompletedView, final int watchedMillis, final int videoMillis) {
             MoPubLog.d(String.format(Locale.US, "%.1f%% of Vungle video watched.",
                     (double) watchedMillis / videoMillis * 100));
-            if (isCompletedView) {
-                // Vungle does not provide a callback when a user should be rewarded.
-                // You will need to provide your own reward logic if you receive a reward with
-                // "NO_REWARD_LABEL" && "NO_REWARD_AMOUNT"
-                MoPubRewardedVideoManager.onRewardedVideoCompleted(VungleRewardedVideo.class,
-                        VUNGLE_AD_NETWORK_CONSTANT,
-                        MoPubReward.success(MoPubReward.NO_REWARD_LABEL, MoPubReward.NO_REWARD_AMOUNT));
-            }
         }
     }
 
diff --git a/extras/src/com/mopub/nativeads/FacebookAdRenderer.java b/extras/src/com/mopub/nativeads/FacebookAdRenderer.java
index b27b883f..c054c9a9 100644
--- a/extras/src/com/mopub/nativeads/FacebookAdRenderer.java
+++ b/extras/src/com/mopub/nativeads/FacebookAdRenderer.java
@@ -20,8 +20,7 @@
  * static and video native ads. This will automatically replace the main image view with the
  * Facebook MediaView that handles showing the main asset.
  */
-public class FacebookAdRenderer
-        implements MoPubAdRenderer<com.mopub.nativeads.FacebookNative.FacebookVideoEnabledNativeAd> {
+public class FacebookAdRenderer implements MoPubAdRenderer<FacebookNative.FacebookVideoEnabledNativeAd> {
     private final ViewBinder mViewBinder;
 
     // This is used instead of View.setTag, which causes a memory leak in 2.3
@@ -82,7 +81,7 @@ public View createAdView(final Context context, final ViewGroup parent) {
 
     @Override
     public void renderAdView(final View view,
-            final com.mopub.nativeads.FacebookNative.FacebookVideoEnabledNativeAd facebookVideoEnabledNativeAd) {
+            final FacebookNative.FacebookVideoEnabledNativeAd facebookVideoEnabledNativeAd) {
         FacebookNativeViewHolder facebookNativeViewHolder = mViewHolderMap.get(view);
         if (facebookNativeViewHolder == null) {
             facebookNativeViewHolder = FacebookNativeViewHolder.fromViewBinder(view, mViewBinder);
@@ -99,11 +98,11 @@ public void renderAdView(final View view,
     @Override
     public boolean supports(final BaseNativeAd nativeAd) {
         Preconditions.checkNotNull(nativeAd);
-        return nativeAd instanceof com.mopub.nativeads.FacebookNative.FacebookVideoEnabledNativeAd;
+        return nativeAd instanceof FacebookNative.FacebookVideoEnabledNativeAd;
     }
 
     private void update(final FacebookNativeViewHolder facebookNativeViewHolder,
-            final com.mopub.nativeads.FacebookNative.FacebookVideoEnabledNativeAd nativeAd) {
+            final FacebookNative.FacebookVideoEnabledNativeAd nativeAd) {
         final ImageView mainImageView = facebookNativeViewHolder.getMainImageView();
         NativeRendererHelper.addTextView(facebookNativeViewHolder.getTitleView(),
                 nativeAd.getTitle());
diff --git a/extras/src/com/mopub/nativeads/FacebookNative.java b/extras/src/com/mopub/nativeads/FacebookNative.java
index 8faa9268..c6b1ee58 100644
--- a/extras/src/com/mopub/nativeads/FacebookNative.java
+++ b/extras/src/com/mopub/nativeads/FacebookNative.java
@@ -21,7 +21,7 @@
 import static com.mopub.nativeads.NativeImageHelper.preCacheImages;
 
 /**
- * Tested with Facebook SDK 4.8.1. FacebookAdRenderer is also necessary in order to show video ads.
+ * Tested with Facebook SDK 4.15.0. FacebookAdRenderer is also necessary in order to show video ads.
  * Video ads will only be shown if VIDEO_ENABLED is set to true or a server configuration
  * "video_enabled" flag is set to true. The server configuration will override the local
  * configuration.
diff --git a/extras/src/com/mopub/nativeads/FlurryBaseNativeAd.java b/extras/src/com/mopub/nativeads/FlurryBaseNativeAd.java
new file mode 100644
index 00000000..3fe494e1
--- /dev/null
+++ b/extras/src/com/mopub/nativeads/FlurryBaseNativeAd.java
@@ -0,0 +1,37 @@
+package com.mopub.nativeads;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Tested with Flurry 6.5.0
+ */
+public interface FlurryBaseNativeAd {
+
+    void fetchAd();
+    @NonNull List<String> getImageUrls();
+    boolean isAppInstallAd();
+    void precacheImages();
+
+    @Nullable String getTitle();
+    @Nullable String getText();
+    @Nullable String getCallToAction();
+    @Nullable String getMainImageUrl();
+    @Nullable String getIconImageUrl();
+    @Nullable Double getStarRating();
+    @Nullable Map<String, Object> getExtras();
+
+
+    void setTitle(@Nullable final String title);
+    void setText(@Nullable final String text);
+    void setCallToAction(@Nullable final String callToAction);
+    void setMainImageUrl(@Nullable final String mainImageUrl);
+    void setIconImageUrl(@Nullable final String iconImageUrl);
+    void setStarRating(@Nullable final Double starRating);
+    void addExtra(@NonNull final String key, @Nullable final Object value);
+
+    void onNativeAdLoaded();
+}
diff --git a/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java b/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java
new file mode 100644
index 00000000..ddcc9639
--- /dev/null
+++ b/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java
@@ -0,0 +1,627 @@
+package com.mopub.nativeads;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.util.Log;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.flurry.android.FlurryAgentListener;
+import com.flurry.android.ads.FlurryAdErrorType;
+import com.flurry.android.ads.FlurryAdNative;
+import com.flurry.android.ads.FlurryAdNativeAsset;
+import com.flurry.android.ads.FlurryAdNativeListener;
+import com.flurry.android.ads.FlurryAdTargeting;
+import com.mopub.mobileads.FlurryAgentWrapper;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Tested with Flurry 6.5.0
+ */
+public final class FlurryCustomEventNative extends CustomEventNative {
+
+    /**
+     * Extra image asset for the star-rating of app-install ads.
+     */
+    public static final String EXTRA_STAR_RATING_IMG = "flurry_starratingimage";
+    /**
+     * Extra text asset specifying the category for app-install ads.
+     */
+    public static final String EXTRA_APP_CATEGORY = "flurry_appcategorytext";
+    /**
+     * Extra image asset for the Flurry native ad branding logo.
+     */
+    public static final String EXTRA_SEC_BRANDING_LOGO = "flurry_brandingimage";
+    /**
+     * Key for enabling Flurry debug logging. After manually creating a {@link MoPubNative} object,
+     * pass in <code>true</code> as a value for this key in the map passed to
+     * {@link MoPubNative#setLocalExtras(Map)}.
+     *
+     * E.g.
+     *
+     * <blockquote><pre>
+     * {@code
+     * Map<String, Object> adapterExtras = new TreeMap<String, Object>();
+     * adapterExtras.put(FlurryCustomEventNative.LOCAL_EXTRA_TEST_MODE, true);
+     * mMoPubNative.setLocalExtras(adapterExtras);
+     * }
+     * </pre></blockquote>
+     *
+     * Debug logging is disabled on the Flurry SDK by default.
+     */
+    public static final String LOCAL_EXTRA_TEST_MODE = "enableTestMode";
+    private static final String LOG_TAG = FlurryCustomEventNative.class.getSimpleName();
+    private static final String ASSET_SEC_HQ_IMAGE = "secHqImage";
+    private static final String ASSET_SEC_IMAGE = "secImage";
+    private static final String ASSET_SEC_HQ_RATING_IMG = "secHqRatingImg";
+    private static final String ASSET_SEC_HQ_BRANDING_LOGO = "secHqBrandingLogo";
+    private static final String ASSET_SEC_RATING_IMG = "secRatingImg";
+    private static final String ASSET_APP_RATING = "appRating";
+    private static final String ASSET_APP_CATEGORY = "appCategory";
+    private static final String ASSET_HEADLINE = "headline";
+    private static final String ASSET_SUMMARY = "summary";
+    private static final String ASSET_CALL_TO_ACTION = "callToAction";
+    private static final String ASSET_VIDEO = "videoUrl";
+    private static final double MOPUB_STAR_RATING_SCALE = StaticNativeAd.MAX_STAR_RATING;
+
+    private FlurryAgentListener mFlurryAgentListener;
+
+    @Override
+    protected void loadNativeAd(@NonNull final Context context,
+            @NonNull final CustomEventNativeListener customEventNativeListener,
+            @NonNull final Map<String, Object> localExtras,
+            @NonNull final Map<String, String> serverExtras) {
+
+        final String flurryApiKey;
+        final String flurryAdSpace;
+
+        //Get the FLURRY_APIKEY and FLURRY_ADSPACE from the server.
+        if (validateExtras(serverExtras)) {
+            flurryApiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
+            flurryAdSpace = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
+
+            if (FlurryAgentWrapper.getInstance().isSessionActive() || mFlurryAgentListener != null) {
+                fetchFlurryAd(context, flurryAdSpace, localExtras, customEventNativeListener);
+            } else {
+                mFlurryAgentListener = new FlurryAgentListener() {
+                    @Override
+                    public void onSessionStarted() {
+                        fetchFlurryAd(context, flurryAdSpace, localExtras,
+                                customEventNativeListener);
+                    }
+                };
+
+                FlurryAgentWrapper.getInstance().startSession(context, flurryApiKey,
+                        mFlurryAgentListener);
+            }
+        } else {
+            customEventNativeListener.onNativeAdFailed(
+                    NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
+            Log.i(LOG_TAG, "Failed Native AdFetch: Missing required server extras" +
+                    " [FLURRY_APIKEY and/or FLURRY_ADSPACE].");
+        }
+    }
+
+    private static synchronized void mapNativeAd(@NonNull final FlurryBaseNativeAd mopubSupportedAd,
+            @NonNull final FlurryAdNative flurryAdNative) {
+        FlurryAdNativeAsset coverImageAsset = flurryAdNative.getAsset(ASSET_SEC_HQ_IMAGE);
+        FlurryAdNativeAsset iconImageAsset = flurryAdNative.getAsset(ASSET_SEC_IMAGE);
+
+        if (coverImageAsset != null && !TextUtils.isEmpty(coverImageAsset.getValue())) {
+            mopubSupportedAd.setMainImageUrl(coverImageAsset.getValue());
+        }
+        if (iconImageAsset != null && !TextUtils.isEmpty(iconImageAsset.getValue())) {
+            mopubSupportedAd.setIconImageUrl(iconImageAsset.getValue());
+        }
+
+        mopubSupportedAd.setTitle(flurryAdNative.getAsset(ASSET_HEADLINE).getValue());
+        mopubSupportedAd.setText(flurryAdNative.getAsset(ASSET_SUMMARY).getValue());
+        mopubSupportedAd.addExtra(EXTRA_SEC_BRANDING_LOGO,
+                flurryAdNative.getAsset(ASSET_SEC_HQ_BRANDING_LOGO).getValue());
+
+        if (mopubSupportedAd.isAppInstallAd()) {
+            // App rating image URL may be null
+            FlurryAdNativeAsset ratingHqImageAsset = flurryAdNative
+                    .getAsset(ASSET_SEC_HQ_RATING_IMG);
+            if (ratingHqImageAsset != null && !TextUtils.isEmpty(ratingHqImageAsset.getValue())) {
+                mopubSupportedAd.addExtra(EXTRA_STAR_RATING_IMG, ratingHqImageAsset.getValue());
+            } else {
+                FlurryAdNativeAsset ratingImageAsset = flurryAdNative
+                        .getAsset(ASSET_SEC_RATING_IMG);
+                if (ratingImageAsset != null && !TextUtils.isEmpty(ratingImageAsset.getValue())) {
+                    mopubSupportedAd.addExtra(EXTRA_STAR_RATING_IMG, ratingImageAsset.getValue());
+                }
+            }
+
+            FlurryAdNativeAsset appCategoryAsset = flurryAdNative.getAsset(ASSET_APP_CATEGORY);
+            if (appCategoryAsset != null) {
+                mopubSupportedAd.addExtra(EXTRA_APP_CATEGORY, appCategoryAsset.getValue());
+            }
+            FlurryAdNativeAsset appRatingAsset = flurryAdNative.getAsset(ASSET_APP_RATING);
+            if (appRatingAsset != null) {
+                mopubSupportedAd.setStarRating(getStarRatingValue(appRatingAsset.getValue()));
+            }
+        }
+
+        FlurryAdNativeAsset ctaAsset = flurryAdNative.getAsset(ASSET_CALL_TO_ACTION);
+        if (ctaAsset != null) {
+            mopubSupportedAd.setCallToAction(ctaAsset.getValue());
+        }
+
+        if (mopubSupportedAd.getImageUrls().isEmpty()) {
+            Log.d(LOG_TAG, "preCacheImages: No images to cache for Flurry Native Ad: " +
+                    flurryAdNative.toString());
+            mopubSupportedAd.onNativeAdLoaded();
+        } else {
+            mopubSupportedAd.precacheImages();
+        }
+    }
+
+    @Nullable
+    private static Double getStarRatingValue(@Nullable final String appRatingString) {
+        // App rating String should be of the form X/Y. E.g. 80/100
+        Double rating = null;
+        if (appRatingString != null) {
+            String[] ratingParts = appRatingString.split("/");
+            if (ratingParts.length == 2) {
+                try {
+                    float numer = Integer.valueOf(ratingParts[0]);
+                    float denom = Integer.valueOf(ratingParts[1]);
+                    rating = (numer / denom) * MOPUB_STAR_RATING_SCALE;
+                } catch (NumberFormatException e) { /*Ignore and return null*/ }
+            }
+        }
+        return rating;
+    }
+
+    private boolean validateExtras(final Map<String, String> serverExtras) {
+        final String flurryApiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
+        final String flurryAdSpace = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
+        Log.i(LOG_TAG, "ServerInfo fetched from Mopub " + FlurryAgentWrapper.PARAM_API_KEY + " : "
+                + flurryApiKey + " and " + FlurryAgentWrapper.PARAM_AD_SPACE_NAME + " :" +
+                flurryAdSpace);
+        return (!TextUtils.isEmpty(flurryApiKey) && !TextUtils.isEmpty(flurryAdSpace));
+    }
+
+    private void fetchFlurryAd(@NonNull Context context, String flurryAdSpace,
+            @NonNull Map<String, Object> localExtras,
+            @NonNull CustomEventNativeListener customEventNativeListener) {
+        final FlurryAdNative flurryAdNative = new FlurryAdNative(context, flurryAdSpace);
+
+        if (localExtras.containsKey(LOCAL_EXTRA_TEST_MODE) &&
+                localExtras.get(LOCAL_EXTRA_TEST_MODE) instanceof Boolean) {
+            final FlurryAdTargeting targeting = new FlurryAdTargeting();
+            targeting.setEnableTestAds((Boolean) localExtras.get(LOCAL_EXTRA_TEST_MODE));
+        }
+
+        final FlurryBaseNativeAd flurryNativeAd;
+        if (shouldAllowVideoNativeAds()) {
+            flurryNativeAd = new FlurryVideoEnabledNativeAd(context, flurryAdNative,
+                    customEventNativeListener);
+        } else {
+            flurryNativeAd = new FlurryStaticNativeAd(context, flurryAdNative,
+                    customEventNativeListener);
+        }
+        flurryNativeAd.fetchAd();
+    }
+
+    private boolean shouldAllowVideoNativeAds() {
+        try {
+            Class.forName("com.mopub.nativeads.FlurryNativeAdRenderer");
+        } catch (ClassNotFoundException e) {
+            return false;
+        }
+
+        return true;
+    }
+
+    /**
+     * Class that supports Flurry static native ads with the help of the
+     * {@link MoPubStaticNativeAdRenderer}.
+     *
+     * @see FlurryVideoEnabledNativeAd
+     */
+    private static class FlurryStaticNativeAd extends StaticNativeAd implements FlurryBaseNativeAd {
+
+        @NonNull private final Context mContext;
+        @NonNull private final CustomEventNativeListener mCustomEventNativeListener;
+        @NonNull private final FlurryAdNative mFlurryAdNative;
+        private final FlurryAdNativeListener mFlurryNativelistener = new FlurryBaseAdListener(this) {
+            @Override
+            public void onClicked(final FlurryAdNative flurryAdNative) {
+                super.onClicked(flurryAdNative);
+                notifyAdClicked();
+            }
+
+            @Override
+            public void onImpressionLogged(final FlurryAdNative flurryAdNative) {
+                super.onImpressionLogged(flurryAdNative);
+                notifyAdImpressed();
+            }
+
+            @Override
+            public void onError(final FlurryAdNative adNative,
+                    final FlurryAdErrorType adErrorType,
+                    final int errorCode) {
+                super.onError(adNative, adErrorType, errorCode);
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_NO_FILL);
+            }
+        };
+
+        FlurryStaticNativeAd(@NonNull Context context, @NonNull FlurryAdNative adNative,
+                @NonNull CustomEventNativeListener customEventNativeListener) {
+            mContext = context;
+            mFlurryAdNative = adNative;
+            mCustomEventNativeListener = customEventNativeListener;
+        }
+
+        // region StaticNativeAd
+
+        @Override
+        public void prepare(@NonNull final View view) {
+            mFlurryAdNative.setTrackingView(view);
+            Log.d(LOG_TAG, "prepare(" + mFlurryAdNative.toString() + " " + view.toString() + ")");
+        }
+
+        @Override
+        public void clear(@NonNull final View view) {
+            mFlurryAdNative.removeTrackingView();
+            Log.d(LOG_TAG, "clear(" + mFlurryAdNative.toString() + ")");
+        }
+
+        @Override
+        public void destroy() {
+            Log.d(LOG_TAG, "destroy(" + mFlurryAdNative.toString() + ") started.");
+            mFlurryAdNative.destroy();
+
+            FlurryAgentWrapper.getInstance().endSession(mContext);
+        }
+
+        //endregion
+
+        // region FlurryBaseNativeAd
+
+        @Override
+        public synchronized void fetchAd() {
+            Log.d(LOG_TAG, "Fetching Flurry Native Ad now.");
+            mFlurryAdNative.setListener(mFlurryNativelistener);
+            mFlurryAdNative.fetchAd();
+        }
+
+        @NonNull
+        public List<String> getImageUrls() {
+            final List<String> imageUrls = new ArrayList<>(2);
+            final String mainImageUrl = getMainImageUrl();
+
+            if (mainImageUrl != null) {
+                imageUrls.add(getMainImageUrl());
+                Log.d(LOG_TAG, "Flurry Native Ad main image found.");
+            }
+
+            final String iconUrl = getIconImageUrl();
+            if (iconUrl != null) {
+                imageUrls.add(this.getIconImageUrl());
+                Log.d(LOG_TAG, "Flurry Native Ad icon image found.");
+            }
+            return imageUrls;
+        }
+
+        public boolean isAppInstallAd() {
+            return mFlurryAdNative.getAsset(ASSET_SEC_RATING_IMG) != null ||
+                    mFlurryAdNative.getAsset(ASSET_SEC_HQ_RATING_IMG) != null ||
+                    mFlurryAdNative.getAsset(ASSET_APP_CATEGORY) != null;
+        }
+
+        @Override
+        public void onNativeAdLoaded() {
+            mCustomEventNativeListener.onNativeAdLoaded(this);
+        }
+
+        @Override
+        public void precacheImages() {
+            NativeImageHelper.preCacheImages(mContext, getImageUrls(),
+                    new NativeImageHelper.ImageListener() {
+                        @Override
+                        public void onImagesCached() {
+                            Log.d(LOG_TAG, "preCacheImages: Ad image cached.");
+                            mCustomEventNativeListener.onNativeAdLoaded(FlurryStaticNativeAd.this);
+                        }
+
+                        @Override
+                        public void onImagesFailedToCache(final NativeErrorCode errorCode) {
+                            mCustomEventNativeListener.onNativeAdFailed(errorCode);
+                            Log.d(LOG_TAG, "preCacheImages: Unable to cache Ad image. Error["
+                                    + errorCode.toString() + "]");
+                        }
+                    });
+        }
+
+        //endregion
+    }
+
+    /**
+     * Class that supports both Flurry static and video native ads with the help of
+     * {@link FlurryNativeAdRenderer}. This class does not need to be included if you
+     * are fetching only static ads. Use {@link FlurryStaticNativeAd} instead.
+     */
+    static class FlurryVideoEnabledNativeAd extends BaseNativeAd implements FlurryBaseNativeAd {
+        private @NonNull final Context mContext;
+        private @NonNull final CustomEventNativeListener mCustomEventNativeListener;
+        private @NonNull final FlurryAdNative mFlurryAdNative;
+        private final FlurryAdNativeListener mFlurryNativelistener = new FlurryBaseAdListener(this) {
+            @Override
+            public void onClicked(final FlurryAdNative flurryAdNative) {
+                super.onClicked(flurryAdNative);
+                notifyAdClicked();
+            }
+
+            @Override
+            public void onImpressionLogged(final FlurryAdNative flurryAdNative) {
+                super.onImpressionLogged(flurryAdNative);
+                notifyAdImpressed();
+            }
+
+            @Override
+            public void onError(final FlurryAdNative adNative,
+                    final FlurryAdErrorType adErrorType,
+                    final int errorCode) {
+                super.onError(adNative, adErrorType, errorCode);
+                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_NO_FILL);
+            }
+        };
+
+        // Basic fields
+        @Nullable private String mTitle;
+        @Nullable private String mText;
+        @Nullable private String mCallToAction;
+        @Nullable private String mMainImageUrl;
+        @Nullable private String mIconImageUrl;
+        @Nullable private Double mStarRating;
+
+        // Extras
+        @NonNull private final Map<String, Object> mExtras;
+
+
+        FlurryVideoEnabledNativeAd(@NonNull Context context, @NonNull FlurryAdNative adNative,
+                @NonNull CustomEventNativeListener customEventNativeListener) {
+            mContext = context;
+            mFlurryAdNative = adNative;
+            mCustomEventNativeListener = customEventNativeListener;
+            mExtras = new HashMap<>();
+        }
+
+        // region StaticNativeAd
+
+        @Override
+        public void prepare(@NonNull View view) {
+            mFlurryAdNative.setTrackingView(view);
+            Log.d(LOG_TAG, "prepare(" + mFlurryAdNative.toString() + " " + view.toString() + ")");
+        }
+
+        @Override
+        public void clear(@NonNull View view) {
+            mFlurryAdNative.removeTrackingView();
+            Log.d(LOG_TAG, "clear(" + mFlurryAdNative.toString() + ")");
+        }
+
+        @Override
+        public void destroy() {
+            Log.d(LOG_TAG, "destroy(" + mFlurryAdNative.toString() + ") started.");
+            mFlurryAdNative.destroy();
+
+            FlurryAgentWrapper.getInstance().endSession(mContext);
+        }
+
+        // endregion
+
+        // region FlurryBaseNativeAd
+
+        @Override
+        public synchronized void fetchAd() {
+            Log.d(LOG_TAG, "Fetching Flurry Native Ad now.");
+            mFlurryAdNative.setListener(mFlurryNativelistener);
+            mFlurryAdNative.fetchAd();
+        }
+
+        @Override
+        public boolean isAppInstallAd() {
+            return mFlurryAdNative.getAsset(ASSET_SEC_RATING_IMG) != null ||
+                    mFlurryAdNative.getAsset(ASSET_SEC_HQ_RATING_IMG) != null ||
+                    mFlurryAdNative.getAsset(ASSET_APP_CATEGORY) != null;
+        }
+
+        @Override
+        public void precacheImages() {
+            NativeImageHelper.preCacheImages(mContext, getImageUrls(),
+                    new NativeImageHelper.ImageListener() {
+                        @Override
+                        public void onImagesCached() {
+                            Log.d(LOG_TAG, "preCacheImages: Ad image cached.");
+                            mCustomEventNativeListener.onNativeAdLoaded(
+                                    FlurryVideoEnabledNativeAd.this);
+                        }
+
+                        @Override
+                        public void onImagesFailedToCache(final NativeErrorCode errorCode) {
+                            mCustomEventNativeListener.onNativeAdFailed(errorCode);
+                            Log.d(LOG_TAG, "preCacheImages: Unable to cache Ad image. Error["
+                                    + errorCode.toString() + "]");
+                        }
+                    });
+        }
+
+        @NonNull
+        @Override
+        public List<String> getImageUrls() {
+            final List<String> imageUrls = new ArrayList<>(2);
+            final String mainImageUrl = getMainImageUrl();
+
+            if (mainImageUrl != null) {
+                imageUrls.add(getMainImageUrl());
+                Log.d(LOG_TAG, "Flurry Native Ad main image found.");
+            }
+
+            final String iconUrl = getIconImageUrl();
+            if (iconUrl != null) {
+                imageUrls.add(this.getIconImageUrl());
+                Log.d(LOG_TAG, "Flurry Native Ad icon image found.");
+            }
+            return imageUrls;
+        }
+
+        @Nullable
+        @Override
+        public String getTitle() {
+            return mTitle;
+        }
+
+        @Nullable
+        @Override
+        public String getText() {
+            return mText;
+        }
+
+        @Nullable
+        @Override
+        public String getCallToAction() {
+            return mCallToAction;
+        }
+
+        @Nullable
+        @Override
+        public String getMainImageUrl() {
+            return mMainImageUrl;
+        }
+
+        @Nullable
+        @Override
+        public String getIconImageUrl() {
+            return mIconImageUrl;
+        }
+
+        @Nullable
+        @Override
+        public Double getStarRating() {
+            return mStarRating;
+        }
+
+        @NonNull
+        @Override
+        public Map<String, Object> getExtras() {
+            return mExtras;
+        }
+
+        @Override
+        public void setTitle(@Nullable String title) {
+            mTitle = title;
+        }
+
+        @Override
+        public void setText(@Nullable String text) {
+            mText = text;
+        }
+
+        @Override
+        public void setCallToAction(@Nullable String callToAction) {
+            mCallToAction = callToAction;
+        }
+
+        @Override
+        public void setMainImageUrl(@Nullable String mainImageUrl) {
+            mMainImageUrl = mainImageUrl;
+        }
+
+        @Override
+        public void setIconImageUrl(@Nullable String iconImageUrl) {
+            mIconImageUrl = iconImageUrl;
+        }
+
+        @Override
+        public void setStarRating(@Nullable Double starRating) {
+            mStarRating = starRating;
+        }
+
+        @Override
+        public void addExtra(@NonNull String key, @Nullable Object value) {
+            mExtras.put(key, value);
+        }
+
+        @Override
+        public void onNativeAdLoaded() {
+            mCustomEventNativeListener.onNativeAdLoaded(this);
+        }
+
+        // endregion
+
+        boolean isVideoAd() {
+            return mFlurryAdNative.isVideoAd();
+        }
+
+        void loadVideoIntoView(@NonNull ViewGroup videoView) {
+            mFlurryAdNative.getAsset(ASSET_VIDEO).loadAssetIntoView(videoView);
+        }
+    }
+
+    static abstract class FlurryBaseAdListener implements FlurryAdNativeListener {
+        private final @NonNull FlurryBaseNativeAd mBaseNativeAd;
+
+        FlurryBaseAdListener(@NonNull FlurryBaseNativeAd baseNativeAd) {
+            mBaseNativeAd = baseNativeAd;
+        }
+
+        @Override
+        public void onFetched(final FlurryAdNative flurryAdNative) {
+            Log.d(LOG_TAG, "onFetched: Flurry native ad fetched successfully!");
+            mapNativeAd(mBaseNativeAd, flurryAdNative);
+        }
+
+        @Override
+        public void onShowFullscreen(final FlurryAdNative flurryAdNative) {
+            Log.d(LOG_TAG, "onShowFullscreen: Flurry native ad in full-screen");
+        }
+
+        @Override
+        public void onCloseFullscreen(final FlurryAdNative flurryAdNative) {
+            Log.d(LOG_TAG, "onCloseFullscreen: Flurry native ad full-screen closed");
+        }
+
+        @Override
+        public void onAppExit(final FlurryAdNative flurryAdNative) {
+            Log.d(LOG_TAG, "onAppExit: Flurry native ad exited app");
+        }
+
+        @Override
+        public void onClicked(final FlurryAdNative flurryAdNative) {
+            Log.d(LOG_TAG, "onClicked: Flurry native ad clicked");
+        }
+
+        @Override
+        public void onImpressionLogged(final FlurryAdNative flurryAdNative) {
+            Log.d(LOG_TAG, "onImpressionLogged: Flurry native ad impression logged");
+        }
+
+        @Override
+        public void onExpanded(final FlurryAdNative flurryAdNative) {
+            Log.d(LOG_TAG, "onExpanded: Flurry native ad expanded");
+        }
+
+        @Override
+        public void onCollapsed(final FlurryAdNative flurryAdNative) {
+            Log.d(LOG_TAG, "onCollapsed: Flurry native ad collapsed");
+        }
+
+        @Override
+        public void onError(final FlurryAdNative flurryAdNative,
+                final FlurryAdErrorType adErrorType,
+                final int errorCode) {
+            Log.d(LOG_TAG, String.format("onError: Flurry native ad not available. " +
+                    "Error type: %s. Error code: %s", adErrorType.toString(), errorCode));
+        }
+    }
+}
diff --git a/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java b/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java
new file mode 100644
index 00000000..c73e4e6e
--- /dev/null
+++ b/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java
@@ -0,0 +1,102 @@
+package com.mopub.nativeads;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+
+import java.util.WeakHashMap;
+
+/**
+ * Include this class if you want to use Flurry native video ads. This will use the FrameLayout
+ * specified in the FlurryNativeViewHolder.videoView to show a video. If a video is not available,
+ * this will still use the mainImageView.
+ *
+ * Tested with Flurry 6.5.0
+ */
+public class FlurryNativeAdRenderer implements
+        MoPubAdRenderer<FlurryCustomEventNative.FlurryVideoEnabledNativeAd> {
+    @NonNull private final FlurryViewBinder mViewBinder;
+    @NonNull private final WeakHashMap<View, FlurryNativeViewHolder> mViewHolderMap;
+
+    public FlurryNativeAdRenderer(@NonNull final FlurryViewBinder viewBinder) {
+        mViewBinder = viewBinder;
+        mViewHolderMap = new WeakHashMap<>();
+    }
+
+    @NonNull
+    @Override
+    public View createAdView(@NonNull final Context context, @Nullable final ViewGroup parent) {
+        return LayoutInflater.from(context).inflate(
+                mViewBinder.staticViewBinder.layoutId, parent, false);
+    }
+
+    @Override
+    public void renderAdView(@NonNull View view,
+            @NonNull FlurryCustomEventNative.FlurryVideoEnabledNativeAd ad) {
+        FlurryNativeViewHolder flurryNativeViewHolder = mViewHolderMap.get(view);
+        if (flurryNativeViewHolder == null) {
+            flurryNativeViewHolder = FlurryNativeViewHolder.fromViewBinder(view, mViewBinder);
+            mViewHolderMap.put(view, flurryNativeViewHolder);
+        }
+
+        update(flurryNativeViewHolder, ad);
+        NativeRendererHelper.updateExtras(flurryNativeViewHolder.staticNativeViewHolder.mainView,
+                mViewBinder.staticViewBinder.extras, ad.getExtras());
+        setViewVisibility(flurryNativeViewHolder, View.VISIBLE);
+    }
+
+    @Override
+    public boolean supports(@NonNull BaseNativeAd nativeAd) {
+        return nativeAd instanceof FlurryCustomEventNative.FlurryVideoEnabledNativeAd;
+    }
+
+    private void update(final FlurryNativeViewHolder viewHolder,
+            final FlurryCustomEventNative.FlurryVideoEnabledNativeAd ad) {
+        NativeRendererHelper.addTextView(viewHolder.staticNativeViewHolder.titleView,
+                ad.getTitle());
+        NativeRendererHelper.addTextView(viewHolder.staticNativeViewHolder.textView, ad.getText());
+        NativeRendererHelper.addTextView(viewHolder.staticNativeViewHolder.callToActionView,
+                ad.getCallToAction());
+        NativeImageHelper.loadImageView(ad.getIconImageUrl(),
+                viewHolder.staticNativeViewHolder.iconImageView);
+
+        if (ad.isVideoAd()) {
+            ad.loadVideoIntoView(viewHolder.videoView);
+        } else {
+            NativeImageHelper.loadImageView(ad.getMainImageUrl(),
+                    viewHolder.staticNativeViewHolder.mainImageView);
+        }
+    }
+
+    private void setViewVisibility(@NonNull final FlurryNativeViewHolder viewHolder,
+            final int visibility) {
+        if (viewHolder.staticNativeViewHolder.mainView != null) {
+            viewHolder.staticNativeViewHolder.mainView.setVisibility(visibility);
+        }
+    }
+
+    private static class FlurryNativeViewHolder {
+        private final StaticNativeViewHolder staticNativeViewHolder;
+        private final ViewGroup videoView;
+
+        private FlurryNativeViewHolder(final StaticNativeViewHolder staticNativeViewHolder,
+                final ViewGroup videoView) {
+            this.staticNativeViewHolder = staticNativeViewHolder;
+            this.videoView = videoView;
+        }
+
+        static FlurryNativeViewHolder fromViewBinder(
+                final View view,
+                final FlurryViewBinder viewBinder) {
+            StaticNativeViewHolder staticNativeViewHolder = StaticNativeViewHolder
+                    .fromViewBinder(view, viewBinder.staticViewBinder);
+
+            ViewGroup videoView = (ViewGroup) view.findViewById(viewBinder.videoViewId);
+
+            return new FlurryNativeViewHolder(staticNativeViewHolder, videoView);
+        }
+    }
+}
diff --git a/extras/src/com/mopub/nativeads/FlurryViewBinder.java b/extras/src/com/mopub/nativeads/FlurryViewBinder.java
new file mode 100644
index 00000000..0699f418
--- /dev/null
+++ b/extras/src/com/mopub/nativeads/FlurryViewBinder.java
@@ -0,0 +1,36 @@
+package com.mopub.nativeads;
+
+import android.support.annotation.NonNull;
+
+/**
+ * Tested with Flurry 6.5.0
+ */
+public class FlurryViewBinder {
+    ViewBinder staticViewBinder;
+    int videoViewId;
+
+    private FlurryViewBinder(@NonNull Builder builder) {
+        this.staticViewBinder = builder.staticViewBinder;
+        this.videoViewId = builder.videoViewId;
+    }
+
+    public final static class Builder {
+        ViewBinder staticViewBinder;
+        int videoViewId;
+
+        public Builder(final ViewBinder staticViewBinder) {
+            this.staticViewBinder = staticViewBinder;
+        }
+
+        @NonNull
+        public final Builder videoViewId(final int videoViewId) {
+            this.videoViewId = videoViewId;
+            return this;
+        }
+
+        @NonNull
+        public final FlurryViewBinder build() {
+            return new FlurryViewBinder(this);
+        }
+    }
+}
diff --git a/extras/src/com/mopub/nativeads/MillennialNative.java b/extras/src/com/mopub/nativeads/MillennialNative.java
index 85070c23..03a6abc2 100644
--- a/extras/src/com/mopub/nativeads/MillennialNative.java
+++ b/extras/src/com/mopub/nativeads/MillennialNative.java
@@ -2,6 +2,7 @@
 
 import android.app.Activity;
 import android.content.Context;
+import android.os.Build;
 import android.os.Handler;
 import android.os.Looper;
 import android.util.Log;
@@ -11,6 +12,7 @@
 import com.millennialmedia.MMException;
 import com.millennialmedia.MMSDK;
 import com.millennialmedia.NativeAd;
+import com.millennialmedia.internal.ActivityListenerManager;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -21,42 +23,35 @@
 public class MillennialNative extends CustomEventNative {
     public static final String DCN_KEY = "dcn";
     public static final String APID_KEY = "adUnitID";
-    private final static String LOGCAT_TAG = "MoPub->MM-Native";
+    private final static String TAG = MillennialNative.class.getSimpleName();
     private static final Handler UI_THREAD_HANDLER = new Handler(Looper.getMainLooper());
 
     @Override
     protected void loadNativeAd(final Context context,
-            final CustomEventNativeListener listener,
-            final Map<String, Object> localExtras,
-            final Map<String, String> serverExtras) {
-
+            final CustomEventNativeListener customEventNativeListener,
+            Map<String, Object> localExtras,
+            Map<String, String> serverExtras) {
         String placementId;
         String siteId;
-
-        if ( !MMSDK.isInitialized() ) {
-            try {
-                MMSDK.initialize((Activity) context);
-            } catch ( Exception e ) {
-                Log.e(LOGCAT_TAG, "Unable to initialize the Millennial SDK-- " + e.getMessage());
-                e.printStackTrace();
-                UI_THREAD_HANDLER.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        listener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
-                    }
-                });
-                return;
-            }
+        if (!initializeSDK(context)) {
+            Log.e(TAG, "Unable to initialize MMSDK");
+            UI_THREAD_HANDLER.post(new Runnable() {
+                @Override
+                public void run() {
+                    customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
+                }
+            });
+            return;
         }
 
-        if ( extrasAreValid( serverExtras )) {
+        if (extrasAreValid(serverExtras)) {
             placementId = serverExtras.get(APID_KEY);
             siteId = serverExtras.get(DCN_KEY);
         } else {
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
                 public void run() {
-                    listener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
+                    customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
                 }
             });
             return;
@@ -64,19 +59,23 @@ public void run() {
 
         try {
             AppInfo ai = new AppInfo().setMediator("mopubsdk");
-            if ( siteId != null && siteId.length() > 0 ) {
+            if (siteId != null && siteId.length() > 0) {
                 ai = ai.setSiteId(siteId);
             } else {
                 ai = ai.setSiteId(null);
             }
 
-            MMSDK.setAppInfo(ai);
-        } catch ( IllegalStateException e ) {
-            Log.w(LOGCAT_TAG, "Caught exception: " + e.getMessage());
+            try {
+                MMSDK.setAppInfo(ai);
+            } catch (MMException e) {
+                Log.e(TAG, "MM SDK is not initialized", e);
+            }
+        } catch (IllegalStateException e) {
+            Log.w(TAG, "App info error", e);
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
                 public void run() {
-                    listener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
+                    customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
                 }
             });
             return;
@@ -89,13 +88,13 @@ public void run() {
                             nativeAd,
                             new ImpressionTracker(context),
                             new NativeClickHandler(context),
-                            listener);
+                            customEventNativeListener);
             millennialStaticNativeAd.loadAd();
-        } catch ( MMException e ) {
+        } catch (MMException e) {
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
                 public void run() {
-                    listener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
+                    customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
                 }
             });
         }
@@ -104,7 +103,7 @@ public void run() {
     private boolean extrasAreValid(final Map<String, String> serverExtras) {
         String placementId = serverExtras.get(APID_KEY);
         return (serverExtras.containsKey(APID_KEY) &&
-                placementId != null && placementId.length() > 0 );
+                placementId != null && placementId.length() > 0);
     }
 
 
@@ -132,12 +131,11 @@ public MillennialStaticNativeAd(final Context context,
         }
 
         void loadAd() {
-            Log.i(LOGCAT_TAG, "Loading native ad...");
+            Log.d(TAG, "Millennial native ad loading.");
             try {
                 mNativeAd.load(mContext, null);
             } catch (MMException e) {
-                Log.w(MillennialNative.LOGCAT_TAG, "Caught configuration error Exception.");
-                e.printStackTrace();
+                Log.w(TAG, "Configuration error", e);
                 UI_THREAD_HANDLER.post(new Runnable() {
                     @Override
                     public void run() {
@@ -177,9 +175,9 @@ public void recordImpression(final View view) {
             notifyAdImpressed();
             try {
                 mNativeAd.fireImpression();
-                Log.i(LOGCAT_TAG, "Millennial native impression recorded.");
-            } catch ( MMException m ) {
-                Log.e(LOGCAT_TAG, "Millennial native impression NOT tracked: " + m.getMessage() );
+                Log.d(TAG, "Millennial native ad impression recorded.");
+            } catch (MMException m) {
+                Log.e(TAG, "Error tracking Millennial native ad impression", m);
             }
         }
 
@@ -187,8 +185,8 @@ public void recordImpression(final View view) {
         public void handleClick(final View view) {
             notifyAdClicked();
             mNativeClickHandler.openClickDestinationUrl(getClickDestinationUrl(), view);
-            mNativeAd.fireClicked();
-            Log.i(LOGCAT_TAG, "Millennial native ad clicked!");
+            mNativeAd.fireCallToActionClicked();
+            Log.d(TAG, "Millennial native ad clicked.");
         }
 
         // MM'S Native mListener
@@ -207,8 +205,8 @@ public void onLoaded(NativeAd nativeAd) {
                 UI_THREAD_HANDLER.post(new Runnable() {
                     @Override
                     public void run() {
-                        Log.d(LOGCAT_TAG,
-                                "Millennial native encountered null destination url. Failing over.");
+                        Log.d(TAG,
+                                "Millennial native ad encountered null destination url. Failing over.");
                         mListener.onNativeAdFailed(
                                 NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
                     }
@@ -220,9 +218,13 @@ public void run() {
             setIconImageUrl(iconImageUrl);
             setMainImageUrl(mainImageUrl);
 
-            final List<String> urls = new ArrayList<String>();
-            if ( iconImageUrl != null ) { urls.add(iconImageUrl); }
-            if ( mainImageUrl != null ) { urls.add(mainImageUrl); }
+            final List<String> urls = new ArrayList<>();
+            if (iconImageUrl != null) {
+                urls.add(iconImageUrl);
+            }
+            if (mainImageUrl != null) {
+                urls.add(mainImageUrl);
+            }
 
             UI_THREAD_HANDLER.post(new Runnable() {
                 @Override
@@ -232,7 +234,7 @@ public void run() {
                         @Override
                         public void onImagesCached() {
                             mListener.onNativeAdLoaded(mMillennialStaticNativeAd);
-                            Log.i(LOGCAT_TAG, "Millennial native ad loaded");
+                            Log.d(TAG, "Millennial native ad loaded.");
                         }
 
                         @Override
@@ -248,7 +250,7 @@ public void onImagesFailedToCache(NativeErrorCode errorCode) {
         @Override
         public void onLoadFailed(NativeAd nativeAd, NativeAd.NativeErrorStatus nativeErrorStatus) {
             final NativeErrorCode error;
-            switch ( nativeErrorStatus.getErrorCode() ) {
+            switch (nativeErrorStatus.getErrorCode()) {
                 case NativeAd.NativeErrorStatus.LOAD_TIMED_OUT:
                     error = NativeErrorCode.NETWORK_TIMEOUT;
                     break;
@@ -278,24 +280,46 @@ public void run() {
                     mListener.onNativeAdFailed(error);
                 }
             });
-            Log.i(LOGCAT_TAG, "Millennial native ad failed: " + nativeErrorStatus.getDescription() );
+            Log.i(TAG, "Millennial native ad failed: " + nativeErrorStatus.getDescription());
         }
 
         @Override
         public void onClicked(NativeAd nativeAd, NativeAd.ComponentName componentName, int i) {
-            Log.i(LOGCAT_TAG, "Millennial native SDK's click tracker fired.");
+            Log.d(TAG, "Millennial native ad click tracker fired.");
         }
 
         @Override
         public void onAdLeftApplication(NativeAd nativeAd) {
-            Log.i(LOGCAT_TAG, "Millennial native SDK has left the application.");
+            Log.d(TAG, "Millennial native ad has left the application.");
 
         }
 
         @Override
         public void onExpired(NativeAd nativeAd) {
-            Log.i(LOGCAT_TAG, "Millennial native ad has expired!");
+            Log.d(TAG, "Millennial native ad has expired!");
         }
 
     }
+
+    private boolean initializeSDK(Context context) {
+        try {
+            if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
+                if (!MMSDK.isInitialized()) {
+                    try {
+                        MMSDK.initialize((Activity) context, ActivityListenerManager.LifecycleState.RESUMED);
+                    } catch (Exception e) {
+                        Log.e(TAG, "Error initializing MMSDK", e);
+                        return false;
+                    }
+                }
+            } else {
+                Log.e(TAG, "MMSDK minimum supported API is 16");
+                return false;
+            }
+            return true;
+        } catch (Exception e) {
+            Log.e(TAG, "Error initializing MMSDK", e);
+            return false;
+        }
+    }
 }
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 1e12d0b2..65b9ee77 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Mon Jun 20 17:07:26 PDT 2016
+#Tue Sep 06 11:08:36 PDT 2016
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-all.zip
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index f7dd6ffc..a7a25e5d 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.mopub.simpleadsdemo"
-      android:versionCode="44"
-      android:versionName="4.9.0">
+      android:versionCode="47"
+      android:versionName="4.10.0">
     <uses-sdk android:minSdkVersion="9"
               android:targetSdkVersion="23"/>
 
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index b123a744..587ee1f7 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -9,7 +9,7 @@ apply plugin: 'com.android.application'
 
 project.group = 'com.mopub'
 project.description = '''MoPub Sample App'''
-project.version = '4.9.0'
+project.version = '4.10.0'
 
 android {
     compileSdkVersion 23
@@ -17,7 +17,7 @@ android {
     lintOptions { abortOnError false }
 
     defaultConfig {
-        versionCode 44
+        versionCode 47
         versionName version
         minSdkVersion 9
         targetSdkVersion 23
@@ -56,7 +56,7 @@ android {
 
 dependencies {
     compile 'com.android.support:support-v4:23.1.1'
-    compile 'com.google.android.gms:play-services-ads:7.8.0'
+    compile 'com.google.android.gms:play-services-ads:9.4.0'
     compile 'com.android.support:recyclerview-v7:23.1.1'
     compile project(':mopub-sdk')
 }
diff --git a/mopub-sample/proguard.cfg b/mopub-sample/proguard.cfg
index 9b84b5cf..7cb03eb0 100644
--- a/mopub-sample/proguard.cfg
+++ b/mopub-sample/proguard.cfg
@@ -12,6 +12,9 @@
 -keep class * extends com.mopub.mobileads.CustomEventInterstitial {}
 -keep class * extends com.mopub.nativeads.CustomEventNative {}
 
+# Keep methods that are accessed via reflection
+-keepclassmembers class ** { @com.mopub.common.util.ReflectionTarget *; }
+
 # Support for Android Advertiser ID.
 -keep class com.google.android.gms.common.GooglePlayServicesUtil {*;}
 -keep class com.google.android.gms.ads.identifier.AdvertisingIdClient {*;}
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
index a261bd64..ef72d1ba 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
@@ -10,6 +10,7 @@
 import com.mopub.common.Constants;
 import com.mopub.common.Preconditions;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.ReflectionTarget;
 import com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
 import com.mopub.mobileads.factories.CustomEventBannerFactory;
 
@@ -77,6 +78,7 @@ public void run() {
         mLocalExtras.put(AD_HEIGHT, mMoPubView.getAdHeight());
     }
 
+    @ReflectionTarget
     void loadAd() {
         if (isInvalidated() || mCustomEventBanner == null) {
             return;
@@ -94,6 +96,7 @@ void loadAd() {
         }
     }
 
+    @ReflectionTarget
     void invalidate() {
         if (mCustomEventBanner != null) {
             // Custom event classes can be developed by any third party and may not be tested.
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
index bf067481..b74804c0 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
@@ -11,7 +11,7 @@
 import java.lang.reflect.Method;
 
 public class MoPub {
-    public static final String SDK_VERSION = "4.9.0";
+    public static final String SDK_VERSION = "4.10.0";
 
     public enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java
index 5755e559..4c01c6c8 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java
@@ -10,6 +10,10 @@
 import java.util.ArrayList;
 import java.util.List;
 
+/**
+ * NOTE: Any methods accessed via this class should be annotated with
+ * {@link com.mopub.common.util.ReflectionTarget}
+ */
 public class Reflection {
     public static class MethodBuilder {
         private final Object mInstance;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ReflectionTarget.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ReflectionTarget.java
new file mode 100644
index 00000000..6f2d46f1
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ReflectionTarget.java
@@ -0,0 +1,7 @@
+package com.mopub.common.util;
+
+/**
+ * Methods that are accessed via reflection should be annotated with this so proguard does not
+ * obfuscate them.
+ */
+public @interface ReflectionTarget { }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Views.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Views.java
index e0ebd1e5..694ff1c5 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Views.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Views.java
@@ -1,10 +1,16 @@
 package com.mopub.common.util;
 
+import android.app.Activity;
+import android.content.Context;
+import android.support.annotation.Nullable;
+import android.support.v4.view.ViewCompat;
 import android.view.View;
 import android.view.ViewGroup;
 
+import com.mopub.common.logging.MoPubLog;
+
 public class Views {
-    public static void removeFromParent(View view) {
+    public static void removeFromParent(@Nullable View view) {
         if (view == null || view.getParent() == null) {
             return;
         }
@@ -13,4 +19,59 @@ public static void removeFromParent(View view) {
             ((ViewGroup) view.getParent()).removeView(view);
         }
     }
+
+    /**
+     * Finds the topmost view in the current Activity or current view hierarchy.
+     *
+     * @param context If an Activity Context, used to obtain the Activity's DecorView. This is
+     *                ignored if it is a non-Activity Context.
+     * @param view A View in the currently displayed view hierarchy. If a null or non-Activity
+     *             Context is provided, this View's topmost parent is used to determine the
+     *             rootView.
+     * @return The topmost View in the currency Activity or current view hierarchy. Null if no
+     * applicable View can be found.
+     */
+    @Nullable
+    public static View getTopmostView(@Nullable final Context context, @Nullable final View view) {
+        final View rootViewFromActivity = getRootViewFromActivity(context);
+        final View rootViewFromView = getRootViewFromView(view);
+
+        // Prefer to use the rootView derived from the Activity's DecorView since it provides a
+        // consistent value when the View is not attached to the Window. Fall back to the passed-in
+        // View's hierarchy if necessary.
+        return rootViewFromActivity != null
+                ? rootViewFromActivity
+                : rootViewFromView;
+    }
+
+    @Nullable
+    private static View getRootViewFromActivity(@Nullable final Context context) {
+        if (!(context instanceof Activity)) {
+            return null;
+        }
+
+        return ((Activity) context).getWindow().getDecorView().findViewById(android.R.id.content);
+    }
+
+    @Nullable
+    private static View getRootViewFromView(@Nullable final View view) {
+        if (view == null) {
+            return null;
+        }
+
+        if (!ViewCompat.isAttachedToWindow(view)) {
+            MoPubLog.d("Attempting to call View#getRootView() on an unattached View.");
+        }
+
+        final View rootView = view.getRootView();
+
+        if (rootView == null) {
+            return null;
+        }
+
+        final View rootContentView = rootView.findViewById(android.R.id.content);
+        return rootContentView != null
+                ? rootContentView
+                : rootView;
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
index aaf3ce0c..ef97e1a9 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
@@ -724,7 +724,7 @@ void handleResize(final int widthDips, final int heightDips, final int offsetXDi
             mDefaultAdContainer.setVisibility(View.INVISIBLE);
             mCloseableAdContainer.addView(mMraidWebView,
                     new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
-            getRootView().addView(mCloseableAdContainer, layoutParams);
+            getAndMemoizeRootView().addView(mCloseableAdContainer, layoutParams);
         } else if (mViewState == ViewState.RESIZED) {
             mCloseableAdContainer.setLayoutParams(layoutParams);
         }
@@ -772,7 +772,7 @@ void handleExpand(@Nullable URI uri, boolean shouldUseCustomClose)
                 mDefaultAdContainer.setVisibility(View.INVISIBLE);
                 mCloseableAdContainer.addView(mMraidWebView, layoutParams);
             }
-            getRootView().addView(mCloseableAdContainer,
+            getAndMemoizeRootView().addView(mCloseableAdContainer,
                     new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
         } else if (mViewState == ViewState.RESIZED) {
             if (isTwoPart) {
@@ -821,7 +821,7 @@ void handleClose() {
                         LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
                 mDefaultAdContainer.setVisibility(View.VISIBLE);
             }
-            getRootView().removeView(mCloseableAdContainer);
+            Views.removeFromParent(mCloseableAdContainer);
 
             // Set the view state to default
             setViewState(ViewState.DEFAULT);
@@ -831,18 +831,28 @@ void handleClose() {
         }
     }
 
+    /*
+     * Prefer this method over getAndMemoizeRootView() when the rootView is only being used for
+     * screen size calculations (and not for adding/removing anything from the view hierarchy).
+     * Having consistent return values is less important in the former case.
+     */
     @NonNull
-    @TargetApi(VERSION_CODES.KITKAT)
     private ViewGroup getRootView() {
-        if (mRootView == null) {
-            // This method should never be called this method before the container is ready, ie before
-            // handlePageLoad.
-            if (VERSION.SDK_INT >= VERSION_CODES.KITKAT) {
-                Preconditions.checkState(mDefaultAdContainer.isAttachedToWindow());
-            }
+        if (mRootView != null) {
+            return mRootView;
+        }
 
-            mRootView = (ViewGroup) mDefaultAdContainer.getRootView().findViewById(
-                    android.R.id.content);
+        final View bestRootView = Views.getTopmostView(mWeakActivity.get(),
+                mDefaultAdContainer);
+        return bestRootView instanceof ViewGroup
+                ? (ViewGroup) bestRootView
+                : mDefaultAdContainer;
+    }
+
+    @NonNull
+    private ViewGroup getAndMemoizeRootView() {
+        if (mRootView == null) {
+            mRootView = getRootView();
         }
 
         return mRootView;
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
index 92bcde01..38de8ba8 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
@@ -55,7 +55,7 @@
     @Nullable private CustomEventInterstitialAdapter mCustomEventInterstitialAdapter;
     @Nullable private InterstitialAdListener mInterstitialAdListener;
     @NonNull private Activity mActivity;
-    @NonNull private InterstitialState mCurrentInterstitialState;
+    @NonNull private volatile InterstitialState mCurrentInterstitialState;
 
     public interface InterstitialAdListener {
         void onInterstitialLoaded(MoPubInterstitial interstitial);
@@ -89,7 +89,7 @@ private boolean attemptStateTransition(@NonNull final InterstitialState endState
      * @return {@code true} if a state change happened, {@code false} if no state change happened.
      */
     @VisibleForTesting
-    boolean attemptStateTransition(@NonNull final InterstitialState endState,
+    synchronized boolean attemptStateTransition(@NonNull final InterstitialState endState,
             boolean forceRefresh) {
         Preconditions.checkNotNull(endState);
 
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/AdapterHelper.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/AdapterHelper.java
index 21206b09..9318e2ce 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/AdapterHelper.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/AdapterHelper.java
@@ -55,11 +55,18 @@ public View getAdView(@Nullable final View convertView,
                 convertView,
                 parent,
                 context,
-                nativeAd,
-                viewBinder
+                nativeAd
         );
     }
 
+    @Deprecated
+    @NonNull
+    public View getAdView(@Nullable final View convertView,
+            @Nullable final ViewGroup parent,
+            @Nullable final NativeAd nativeAd) {
+        return getAdView(convertView, parent, nativeAd, null);
+    }
+
     // Total number of content rows + ad rows
     @Deprecated
     public int shiftedCount(final int originalCount) {
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
index 0b275866..50db633a 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
@@ -6,7 +6,6 @@
 import android.view.View;
 import android.view.ViewGroup;
 
-import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 
@@ -38,17 +37,14 @@ private NativeAdViewHelper() {
     static View getAdView(@Nullable View convertView,
             @Nullable final ViewGroup parent,
             @NonNull final Context context,
-            @Nullable final NativeAd nativeAd,
-            @Nullable final ViewBinder viewBinder) {
-
-        Preconditions.NoThrow.checkNotNull(viewBinder, "ViewBinder is null.");
+            @Nullable final NativeAd nativeAd) {
 
         if (convertView != null) {
-            clearNativeAd(context, convertView);
+            clearNativeAd(convertView);
         }
 
-        if (nativeAd == null || nativeAd.isDestroyed() || viewBinder == null) {
-            MoPubLog.d("NativeAd or viewBinder null or invalid. Returning empty view");
+        if (nativeAd == null || nativeAd.isDestroyed()) {
+            MoPubLog.d("NativeAd null or invalid. Returning empty view");
             // Only create a view if one hasn't been created already
             if (convertView == null || !ViewType.EMPTY.equals(convertView.getTag())) {
                 convertView = new View(context);
@@ -61,23 +57,21 @@ static View getAdView(@Nullable View convertView,
                 convertView = nativeAd.createAdView(context, parent);
                 convertView.setTag(ViewType.AD);
             }
-            prepareNativeAd(context, convertView, nativeAd);
+            prepareNativeAd(convertView, nativeAd);
             nativeAd.renderAdView(convertView);
         }
 
         return convertView;
     }
 
-    private static void clearNativeAd(@NonNull final Context context,
-            @NonNull final View view) {
+    private static void clearNativeAd(@NonNull final View view) {
         final NativeAd nativeAd = sNativeAdMap.get(view);
         if (nativeAd != null) {
             nativeAd.clear(view);
         }
     }
 
-    private static void prepareNativeAd(@NonNull final Context context,
-            @NonNull final View view,
+    private static void prepareNativeAd(@NonNull final View view,
             @NonNull final NativeAd nativeAd) {
         sNativeAdMap.put(view, nativeAd);
         nativeAd.prepare(view);
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/VisibilityTracker.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/VisibilityTracker.java
index 39cbfc39..7453d2c4 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/VisibilityTracker.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/VisibilityTracker.java
@@ -1,6 +1,5 @@
 package com.mopub.nativeads;
 
-import android.app.Activity;
 import android.content.Context;
 import android.graphics.Rect;
 import android.os.Handler;
@@ -12,6 +11,7 @@
 
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.Views;
 
 import java.lang.ref.WeakReference;
 import java.util.ArrayList;
@@ -110,7 +110,7 @@ private void setViewTreeObserver(@Nullable final Context context, @Nullable fina
             return;
         }
 
-        final View rootView = getBestRootView(context, view);
+        final View rootView = Views.getTopmostView(context, view);
         if (rootView == null) {
             MoPubLog.d("Unable to set Visibility Tracker due to no available root view.");
             return;
@@ -127,24 +127,6 @@ private void setViewTreeObserver(@Nullable final Context context, @Nullable fina
         viewTreeObserver.addOnPreDrawListener(mOnPreDrawListener);
     }
 
-    @VisibleForTesting
-    @Nullable
-    static View getBestRootView(@Nullable final Context context, @Nullable final View view) {
-        if (context instanceof Activity) {
-            return ((Activity) context).getWindow().getDecorView();
-        }
-
-        if (view != null) {
-            final View rootView = view.getRootView();
-            if (rootView != null) {
-                final View rootContentView = rootView.findViewById(android.R.id.content);
-                return rootContentView != null ? rootContentView : rootView;
-            }
-        }
-
-        return null;
-    }
-
     void setVisibilityTrackerListener(
             @Nullable final VisibilityTrackerListener visibilityTrackerListener) {
         mVisibilityTrackerListener = visibilityTrackerListener;
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
index 4d8e4e55..501d0d19 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
@@ -260,7 +260,6 @@ private void maybeChangeState() {
         applyState(newState);
     }
 
-
     @VisibleForTesting
     void applyState(@NonNull final VideoState videoState) {
         applyState(videoState, false);
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
index 534d2c6a..23eb60f6 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
@@ -22,6 +22,7 @@
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.MoPubCollections;
 import com.mopub.common.util.Reflection;
+import com.mopub.common.util.ReflectionTarget;
 import com.mopub.common.util.Utils;
 import com.mopub.network.AdRequest;
 import com.mopub.network.AdResponse;
@@ -131,6 +132,7 @@ public static synchronized void init(@NonNull Activity mainActivity, MediationSe
         }
     }
 
+    @ReflectionTarget
     public static void updateActivity(@NonNull Activity activity) {
         if (sInstance != null) {
             sInstance.mMainActivity = new WeakReference<Activity>(activity);
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java
index 7380fbf2..3fd9c37b 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java
@@ -6,6 +6,7 @@
 
 import com.mopub.common.MediationSettings;
 import com.mopub.common.Preconditions;
+import com.mopub.common.util.ReflectionTarget;
 
 /**
  * MoPubRewardedVideos is a utility class that holds controller methods for other MoPub rewarded
@@ -13,6 +14,7 @@
  */
 public class MoPubRewardedVideos {
 
+    @ReflectionTarget
     public static void initializeRewardedVideo(@NonNull Activity activity,
             MediationSettings... mediationSettings) {
         Preconditions.checkNotNull(activity);
@@ -20,10 +22,12 @@ public static void initializeRewardedVideo(@NonNull Activity activity,
         MoPubRewardedVideoManager.init(activity, mediationSettings);
     }
 
+    @ReflectionTarget
     public static void setRewardedVideoListener(@Nullable MoPubRewardedVideoListener listener) {
         MoPubRewardedVideoManager.setVideoListener(listener);
     }
 
+    @ReflectionTarget
     public static void loadRewardedVideo(@NonNull String adUnitId,
             @Nullable MediationSettings... mediationSettings) {
         Preconditions.checkNotNull(adUnitId);
@@ -31,6 +35,7 @@ public static void loadRewardedVideo(@NonNull String adUnitId,
         MoPubRewardedVideoManager.loadVideo(adUnitId, null, mediationSettings);
     }
 
+    @ReflectionTarget
     public static void loadRewardedVideo(@NonNull String adUnitId,
             @Nullable MoPubRewardedVideoManager.RequestParameters requestParameters,
             @Nullable MediationSettings... mediationSettings) {
@@ -39,12 +44,14 @@ public static void loadRewardedVideo(@NonNull String adUnitId,
         MoPubRewardedVideoManager.loadVideo(adUnitId, requestParameters, mediationSettings);
     }
 
+    @ReflectionTarget
     public static boolean hasRewardedVideo(@NonNull String adUnitId) {
         Preconditions.checkNotNull(adUnitId);
 
         return MoPubRewardedVideoManager.hasVideo(adUnitId);
     }
 
+    @ReflectionTarget
     public static void showRewardedVideo(@NonNull String adUnitId) {
         Preconditions.checkNotNull(adUnitId);
 
diff --git a/mopub-sdk/shared-build.gradle b/mopub-sdk/shared-build.gradle
index 9b65bf09..1d3de729 100644
--- a/mopub-sdk/shared-build.gradle
+++ b/mopub-sdk/shared-build.gradle
@@ -9,7 +9,7 @@ repositories {
 }
 
 project.group = 'com.mopub'
-project.version = '4.9.0'
+project.version = '4.10.0'
 
 android {
     compileSdkVersion 23
@@ -18,7 +18,7 @@ android {
     useLibrary 'org.apache.http.legacy'
 
     defaultConfig {
-        versionCode 44
+        versionCode 47
         versionName version
         minSdkVersion 9
         targetSdkVersion 23
diff --git a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
index 511b8e04..6e4f5a3a 100644
--- a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
+++ b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
@@ -1,3 +1,3 @@
 fabric-identifier=com.mopub.sdk.android:mopub
-fabric-version=4.9.0+kit
+fabric-version=4.10.0+kit
 fabric-build-type=source
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/ViewsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/ViewsTest.java
index 48fa3198..a9eb7a6b 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/ViewsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/ViewsTest.java
@@ -1,12 +1,11 @@
 package com.mopub.common.util;
 
 import android.app.Activity;
-import android.content.Context;
-import android.content.res.Resources;
 import android.view.View;
 import android.widget.RelativeLayout;
 import android.widget.TextView;
 
+
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -17,63 +16,114 @@
 
 @RunWith(RobolectricTestRunner.class)
 public class ViewsTest {
-    private Context context;
-    private View subject;
-    private RelativeLayout parent;
-    private Activity testActivity;
-    private Resources testResources;
+    private Activity activity;
+    private View frameLayout;
+    private RelativeLayout relativeLayout;
+    private View view;
 
     @Before
     public void setup() {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        subject = new View(context);
-        parent = new RelativeLayout(context);
+        activity = Robolectric.buildActivity(Activity.class).create().get();
+
+        // Expected view hierarchy:
+        // - FrameLayout
+        // -- RelativeLayout
+        // --- View
+        frameLayout = activity.findViewById(android.R.id.content);
+        relativeLayout = new RelativeLayout(activity);
+        view = new View(activity);
 
+        activity.setContentView(relativeLayout);
     }
 
     @Test
     public void removeFromParent_shouldRemoveViewFromParent() throws Exception {
-        assertThat(parent.getChildCount()).isEqualTo(0);
+        assertThat(relativeLayout.getChildCount()).isEqualTo(0);
 
-        parent.addView(subject);
-        assertThat(parent.getChildCount()).isEqualTo(1);
-        assertThat(subject.getParent()).isEqualTo(parent);
+        relativeLayout.addView(view);
+        assertThat(relativeLayout.getChildCount()).isEqualTo(1);
+        assertThat(view.getParent()).isEqualTo(relativeLayout);
 
-        Views.removeFromParent(subject);
+        Views.removeFromParent(view);
 
-        assertThat(parent.getChildCount()).isEqualTo(0);
-        assertThat(subject.getParent()).isNull();
+        assertThat(relativeLayout.getChildCount()).isEqualTo(0);
+        assertThat(view.getParent()).isNull();
     }
 
     @Test
     public void removeFromParent_withMultipleChildren_shouldRemoveCorrectChild() throws Exception {
-        parent.addView(new TextView(context));
+        relativeLayout.addView(new TextView(activity));
 
-        assertThat(parent.getChildCount()).isEqualTo(1);
+        assertThat(relativeLayout.getChildCount()).isEqualTo(1);
 
-        parent.addView(subject);
+        relativeLayout.addView(view);
 
-        assertThat(parent.getChildCount()).isEqualTo(2);
+        assertThat(relativeLayout.getChildCount()).isEqualTo(2);
 
-        Views.removeFromParent(subject);
-        assertThat(parent.getChildCount()).isEqualTo(1);
+        Views.removeFromParent(view);
+        assertThat(relativeLayout.getChildCount()).isEqualTo(1);
 
-        assertThat(parent.getChildAt(0)).isInstanceOf(TextView.class);
+        assertThat(relativeLayout.getChildAt(0)).isInstanceOf(TextView.class);
     }
 
     @Test
-    public void removeFromParent_whenViewIsNull_shouldPass() throws Exception {
+    public void removeFromParent_whenViewIsNull_shouldNotThrowException() throws Exception {
         Views.removeFromParent(null);
 
         // pass
     }
 
     @Test
-    public void removeFromParent_whenViewsParentIsNull_shouldPass() throws Exception {
-        assertThat(subject.getParent()).isNull();
+    public void removeFromParent_whenViewsParentIsNull_shouldNotThrowException() throws Exception {
+        assertThat(view.getParent()).isNull();
 
-        Views.removeFromParent(subject);
+        Views.removeFromParent(view);
 
         // pass
     }
+
+    @Test
+    public void getTopmostView_withActivityContext_shouldReturnRootView() {
+        relativeLayout.addView(view);
+
+        View rootView = Views.getTopmostView(activity, view);
+
+        assertThat(rootView).isEqualTo(frameLayout);
+    }
+
+    @Test
+    public void getTopmostView_withNonActivityContext_shouldReturnRootView() {
+        relativeLayout.addView(view);
+
+        View rootView = Views.getTopmostView(activity.getApplicationContext(), view);
+
+        assertThat(rootView).isEqualTo(frameLayout);
+    }
+
+    @Test
+    public void getTopmostView_withNonActivityContext_withUnattachedView_shouldReturnView() {
+        // don't add "view" to the view hierarchy
+
+        View rootView = Views.getTopmostView(activity.getApplicationContext(), view);
+
+        assertThat(rootView).isEqualTo(view);
+    }
+
+    @Test
+    public void getTopmostView_withNonActivityContext_withNullView_shouldReturnNull() {
+        relativeLayout.addView(view);
+
+        View rootView = Views.getTopmostView(activity.getApplicationContext(), null);
+
+        assertThat(rootView).isNull();
+    }
+
+    @Test
+    public void getTopmostView_withNullArguments_shouldReturnNull() {
+        relativeLayout.addView(view);
+
+        View rootView = Views.getTopmostView(null, null);
+
+        assertThat(rootView).isNull();
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
index 62b74958..4404ab8c 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
@@ -25,7 +25,6 @@
     private Activity activity;
     @Mock private View mockView;
     @Mock private ViewGroup mockViewGroup;
-    @Mock private ViewBinder mockViewBinder;
     @Mock private NativeAd mMockNativeAd1;
     @Mock private NativeAd mMockNativeAd2;
 
@@ -42,8 +41,7 @@ public void setUp() throws Exception {
 
     @Test
     public void getAdView_shouldRenderView() throws Exception {
-        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1,
-                mockViewBinder);
+        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1);
 
         verify(mMockNativeAd1).createAdView(activity, mockViewGroup);
         verify(mMockNativeAd1).renderAdView(mockView);
@@ -53,8 +51,7 @@ public void getAdView_shouldRenderView() throws Exception {
     public void getAdView_withDestroyedNativeAd_shouldReturnEmptyAndGoneConvertView() throws Exception {
         when(mMockNativeAd1.isDestroyed()).thenReturn(true);
 
-        View view = NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1,
-                mockViewBinder);
+        View view = NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1);
 
         assertThat(view).isNotEqualTo(mockView);
         assertThat(view.getTag()).isEqualTo(NativeAdViewHelper.ViewType.EMPTY);
@@ -63,24 +60,20 @@ public void getAdView_withDestroyedNativeAd_shouldReturnEmptyAndGoneConvertView(
 
     @Test
     public void getAdView_shouldClearPreviousNativeAd() throws Exception {
-        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1,
-                mockViewBinder);
+        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1);
 
         // Second call should clear the first NativeAd
-        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd2,
-                mockViewBinder);
+        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd2);
         verify(mMockNativeAd1).clear(mockView);
 
         // Third call should clear the second NativeAd
-        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1,
-                mockViewBinder);
+        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1);
         verify(mMockNativeAd2).clear(mockView);
     }
 
     @Test
     public void getAdView_shouldPrepareNativeAd() throws Exception {
-        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1,
-                mockViewBinder);
+        NativeAdViewHelper.getAdView(mockView, mockViewGroup, activity, mMockNativeAd1);
 
         verify(mMockNativeAd1).prepare(mockView);
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
index c176e2a4..2c6be2a7 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
@@ -35,9 +35,11 @@
 import static com.mopub.nativeads.VisibilityTracker.VisibilityTrackerListener;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyInt;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
@@ -82,13 +84,14 @@ public void onVisibilityChanged(List<View> visibleViews, List<View> invisibleVie
 
     @Test
     public void constructor_shouldSetOnPreDrawListenerForDecorView() throws Exception {
-        Activity activity1 = mock(Activity.class);
+        Activity activity1 = spy(Robolectric.buildActivity(Activity.class).create().get());
         Window window = mock(Window.class);
         View decorView = mock(View.class);
         ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
 
         when(activity1.getWindow()).thenReturn(window);
         when(window.getDecorView()).thenReturn(decorView);
+        when(decorView.findViewById(anyInt())).thenReturn(decorView);
         when(decorView.getViewTreeObserver()).thenReturn(viewTreeObserver);
         when(viewTreeObserver.isAlive()).thenReturn(true);
 
@@ -123,62 +126,6 @@ public void constructor_withApplicationContext_shouldNotSetOnPreDrawListener() {
         assertThat(subject.mWeakViewTreeObserver.get()).isNull();
     }
 
-    @Test
-    public void getBestRootView_withActivity_withNullView_shouldReturnActivityDecorView() {
-        Activity activity1 = mock(Activity.class);
-        Window window = mock(Window.class);
-        View decorView = mock(View.class);
-        ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
-
-        when(activity1.getWindow()).thenReturn(window);
-        when(window.getDecorView()).thenReturn(decorView);
-        when(decorView.getViewTreeObserver()).thenReturn(viewTreeObserver);
-        when(viewTreeObserver.isAlive()).thenReturn(true);
-
-        View view = VisibilityTracker.getBestRootView(activity1, null);
-
-        assertThat(view).isEqualTo(decorView);
-    }
-
-    @Test
-    public void getBestRootView_withApplicationContext_withRootView_shouldReturnRootView() {
-        View rootView = new View(activity.getApplicationContext());
-
-        View view = VisibilityTracker.getBestRootView(activity.getApplicationContext(), rootView);
-
-        assertThat(view).isEqualTo(rootView);
-    }
-
-    @Test
-    public void getBestRootView_withApplicationContext_withContentView_shouldReturnContentView() {
-        View rootView = mock(View.class);
-        View contentView = mock(View.class);
-
-        when(rootView.findViewById(android.R.id.content)).thenReturn(contentView);
-        when(rootView.getRootView()).thenReturn(rootView);
-
-        View view = VisibilityTracker.getBestRootView(activity.getApplicationContext(), rootView);
-
-        assertThat(view).isEqualTo(contentView);
-    }
-
-    @Test
-    public void getBestRootView_withApplicationContext_withNullView_shouldReturnNull() {
-        View view = VisibilityTracker.getBestRootView(activity.getApplicationContext(), null);
-
-        assertThat(view).isNull();
-    }
-
-    @Test
-    public void getBestRootView_withApplicationContext_withNullRootView_withNullParentView_shouldReturnNull() {
-        View originalView = mock(View.class);
-        when(originalView.getRootView()).thenReturn(null);
-
-        View view = VisibilityTracker.getBestRootView(activity.getApplicationContext(), originalView);
-
-        assertThat(view).isNull();
-    }
-
     @Test
     public void addView_withVisibleView_shouldAddVisibleViewToTrackedViews() throws Exception {
         subject.addView(view, MIN_PERCENTAGE_VIEWED);
@@ -236,13 +183,14 @@ public void clear_shouldRemoveAllViewsFromTrackedViews_shouldRemoveMessagesFromV
 
     @Test
     public void destroy_shouldCallClear_shouldRemoveListenerFromDecorView() throws Exception {
-        Activity activity1 = mock(Activity.class);
+        Activity activity1 = spy(Robolectric.buildActivity(Activity.class).create().get());
         Window window = mock(Window.class);
         View decorView = mock(View.class);
         ViewTreeObserver viewTreeObserver = mock(ViewTreeObserver.class);
 
         when(activity1.getWindow()).thenReturn(window);
         when(window.getDecorView()).thenReturn(decorView);
+        when(decorView.findViewById(anyInt())).thenReturn(decorView);
         when(decorView.getViewTreeObserver()).thenReturn(viewTreeObserver);
         when(viewTreeObserver.isAlive()).thenReturn(true);
 
