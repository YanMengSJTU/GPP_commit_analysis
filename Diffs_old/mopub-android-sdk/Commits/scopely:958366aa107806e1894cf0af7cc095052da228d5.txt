diff --git a/.gitignore b/.gitignore
index 955dd1c7..465f95b8 100644
--- a/.gitignore
+++ b/.gitignore
@@ -7,6 +7,7 @@ bin/
 gen/
 out/
 tmp/
+classes/
 local.properties
 target/
 *.orig
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 7dccbb74..b989d6b9 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,26 @@
+## Version 1.15 (Aug 21, 2013)
+
+Includes support for ads in the MRAID 2.0 format. MRAID 2.0 allows advertisers to create ads with rich media functionality, including adding calendar events, storing pictures and playing videos in the native video player. To learn more about MRAID 2.0, read our [help article](http://j.mp/16MKSci).
+
+  - Added the following MRAID 2.0 features: `createCalendarEvent` (Android 4.0 and above), `playVideo`, `storePicture`, and `supports`
+  - Hardware Acceleration is now enabled by default for `MraidInterstitial`s on Android 4.0 and above  
+  - Ensured that Cursors in `FacebookKeywordProvider` are always closed properly; fixes [GitHub issue #8](https://github.com/mopub/mopub-android-sdk/issues/8)  
+  - Added tracking parameter to InMobi ad requests; fixes [GitHub issue #15](https://github.com/mopub/mopub-android-sdk/issues/15)  
+  - Banner WebViews are now removed from the view hierarchy before they are destroyed; fixes [GitHub issue #23](https://github.com/mopub/mopub-android-sdk/issues/23)  
+
+To correctly display ads that ask the user to save a picture (storePicture ads), you need to make the following change to AndroidManifest.xml:  
+* Add the`WRITE_EXTERNAL_STORAGE` permission. Note: **Adding the permission is optional**. If the permission is not added, we will not deliver any store picture ads to the users' devices. All other features will remain functional without the new permission. 
+
+To allow users to play videos using the native video player:
+* Declare activity `com.mopub.mobileads.MraidVideoPlayerActivity` This activity is required to support playing videos in the native player and we strongly recommend adding it.
+ 
+### Version 1.15.1 (Aug 27, 2013)
+  - Updated documentation to remove the requirement for certain AndroidManifest permissions.
+  - Fixed minor bug with mraid 2.0 `storePicture` command where the user sees a false download completed message.
+  
+### Version 1.15.1.1 (Sep 4, 2013)
+  - Made the SDK more resilient to unexpected Flash creatives.
+
 ## Version 1.14 (May 28, 2013)
 
   - Provided improved support for Android Unity by moving all project resources (including layouts, javascript, images, and values) into source
@@ -97,4 +120,4 @@
   - Added support for custom events
   - Added network connectivity check before loading an ad
   - Added `OnAdPresentedOverlay` listener methods
-  - Removed unnecessary permissions from the library's manifest
\ No newline at end of file
+  - Removed unnecessary permissions from the library's manifest
diff --git a/README.md b/README.md
index dde94889..f837d6f5 100644
--- a/README.md
+++ b/README.md
@@ -25,8 +25,15 @@ Integration instructions are available on the [wiki](https://github.com/mopub/mo
 
 ## New in this Version
 
-Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for details.
+This release of the Android SDK includes support for ads in the MRAID 2.0 format. We will now allow advertisers to serve ads with rich media functionality, including adding calendar events, storing pictures to the user's devices and playing videos in the native player. To learn more about MRAID 2.0 and our update, read our [help article](http://j.mp/16MKSci). 
 
+To correctly display ads that ask the user to save a picture (storePicture ads), you need to make the following change to AndroidManifest.xml:  
+* Add the`WRITE_EXTERNAL_STORAGE` permission. Note: **Adding the permission is optional**. If the permission is not added, we will not deliver any store picture ads to the users' devices. All other features will remain functional without the new permission. 
+
+To allow users to play videos using the native video player:
+* Declare activity `com.mopub.mobileads.MraidVideoPlayerActivity` This activity is required to support playing videos in the native player and we strongly recommend adding it.
+
+Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for details. 
 
 ## Requirements
 
@@ -45,4 +52,4 @@ Redistribution and use in source and binary forms, with or without modification,
 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * Neither the name of MoPub nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
 
-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\ No newline at end of file
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
diff --git a/extras/src/com/mopub/mobileads/GoogleAdMobInterstitial.java b/extras/src/com/mopub/mobileads/GoogleAdMobInterstitial.java
index ba691329..281a48d4 100644
--- a/extras/src/com/mopub/mobileads/GoogleAdMobInterstitial.java
+++ b/extras/src/com/mopub/mobileads/GoogleAdMobInterstitial.java
@@ -139,7 +139,6 @@ public void onFailedToReceiveAd(Ad ad, ErrorCode error) {
 
     @Override
     public void onLeaveApplication(Ad ad) {
-        // TODO: This only tracks clicks accurately if all clicks result in leaving the app.
         if (!mHasAlreadyRegisteredClick) {
             Log.d("MoPub", "Google AdMob interstitial ad clicked.");
             mHasAlreadyRegisteredClick = true;
diff --git a/extras/src/com/mopub/mobileads/InMobiBanner.java b/extras/src/com/mopub/mobileads/InMobiBanner.java
index 805427e5..ad9417a9 100644
--- a/extras/src/com/mopub/mobileads/InMobiBanner.java
+++ b/extras/src/com/mopub/mobileads/InMobiBanner.java
@@ -1,17 +1,18 @@
 package com.mopub.simpleadsdemo;
 
-import java.util.Map;
-
 import android.app.Activity;
 import android.content.Context;
 import android.util.Log;
-
 import com.inmobi.androidsdk.IMAdListener;
+import com.inmobi.androidsdk.IMAdRequest;
 import com.inmobi.androidsdk.IMAdRequest.ErrorCode;
 import com.inmobi.androidsdk.IMAdView;
 import com.mopub.mobileads.CustomEventBanner;
 import com.mopub.mobileads.MoPubErrorCode;
 
+import java.util.HashMap;
+import java.util.Map;
+
 /*
  * Tested with InMobi SDK 3.6.2.
  */
@@ -24,16 +25,16 @@
      */
     @Override
     protected void loadBanner(Context context, CustomEventBannerListener bannerListener,
-                              Map<String, Object> localExtras, Map<String, String> serverExtras) {
+            Map<String, Object> localExtras, Map<String, String> serverExtras) {
         mBannerListener = bannerListener;
-
+        
         Activity activity = null;
         if (context instanceof Activity) {
             activity = (Activity) context;
         } else {
             // You may also pass in an Activity Context in the localExtras map and retrieve it here.
         }
-
+        
         if (activity == null) {
             mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
             return;
@@ -45,9 +46,15 @@ protected void loadBanner(Context context, CustomEventBannerListener bannerListe
          */
         String inMobiAppId = "YOUR_INMOBI_APP_ID";
         mInMobiBanner = new IMAdView(activity, IMAdView.INMOBI_AD_UNIT_320X50, inMobiAppId);
-
+        
         mInMobiBanner.setIMAdListener(this);
-        mInMobiBanner.loadNewAd();
+
+        IMAdRequest imAdRequest = new IMAdRequest();
+        Map<String, String> requestParameters = new HashMap<String, String>();
+        requestParameters.put("tp", "c_mopub");
+        imAdRequest.setRequestParams(requestParameters);
+
+        mInMobiBanner.loadNewAd(imAdRequest);
     }
 
     @Override
diff --git a/extras/src/com/mopub/mobileads/InMobiInterstitial.java b/extras/src/com/mopub/mobileads/InMobiInterstitial.java
index 443ad1d5..8e0601cc 100644
--- a/extras/src/com/mopub/mobileads/InMobiInterstitial.java
+++ b/extras/src/com/mopub/mobileads/InMobiInterstitial.java
@@ -1,17 +1,18 @@
 package com.mopub.simpleadsdemo;
 
-import java.util.Map;
-
 import android.app.Activity;
 import android.content.Context;
 import android.util.Log;
-
 import com.inmobi.androidsdk.IMAdInterstitial;
 import com.inmobi.androidsdk.IMAdInterstitialListener;
+import com.inmobi.androidsdk.IMAdRequest;
 import com.inmobi.androidsdk.IMAdRequest.ErrorCode;
 import com.mopub.mobileads.CustomEventInterstitial;
 import com.mopub.mobileads.MoPubErrorCode;
 
+import java.util.HashMap;
+import java.util.Map;
+
 /*
  * Tested with InMobi SDK 3.6.2.
  */
@@ -24,16 +25,16 @@
      */
     @Override
     protected void loadInterstitial(Context context, CustomEventInterstitialListener interstitialListener,
-                                    Map<String, Object> localExtras, Map<String, String> serverExtras) {
+            Map<String, Object> localExtras, Map<String, String> serverExtras) {
         mInterstitialListener = interstitialListener;
-
+        
         Activity activity = null;
         if (context instanceof Activity) {
             activity = (Activity) context;
         } else {
             // You may also pass in an Activity Context in the localExtras map and retrieve it here.
         }
-
+        
         if (activity == null) {
             mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
             return;
@@ -45,11 +46,17 @@ protected void loadInterstitial(Context context, CustomEventInterstitialListener
          */
         String inMobiAppId = "YOUR_INMOBI_APP_ID";
         mInMobiInterstitial = new IMAdInterstitial(activity, inMobiAppId);
-
+        
         mInMobiInterstitial.setIMAdInterstitialListener(this);
-        mInMobiInterstitial.loadNewAd();
-    }
 
+        IMAdRequest imAdRequest = new IMAdRequest();
+        Map<String, String> requestParameters = new HashMap<String, String>();
+        requestParameters.put("tp", "c_mopub");
+        imAdRequest.setRequestParams(requestParameters);
+
+        mInMobiInterstitial.loadNewAd(imAdRequest);
+    }
+    
     @Override
     protected void showInterstitial() {
         Log.d("MoPub", "Showing InMobi interstitial ad.");
@@ -69,7 +76,7 @@ public void onAdRequestLoaded(IMAdInterstitial adInterstitial) {
         Log.d("MoPub", "InMobi interstitial ad loaded successfully.");
         mInterstitialListener.onInterstitialLoaded();
     }
-
+    
     @Override
     public void onAdRequestFailed(IMAdInterstitial adInterstitial, ErrorCode errorCode) {
         Log.d("MoPub", "InMobi interstitial ad failed to load.");
@@ -80,7 +87,7 @@ public void onAdRequestFailed(IMAdInterstitial adInterstitial, ErrorCode errorCo
     public void onShowAdScreen(IMAdInterstitial adInterstitial) {
         mInterstitialListener.onInterstitialShown();
     }
-
+    
     @Override
     public void onLeaveApplication(IMAdInterstitial adInterstitial) {
         /*
diff --git a/extras/src/com/mopub/mobileads/MillennialBanner.java b/extras/src/com/mopub/mobileads/MillennialBanner.java
index abe27fd9..220fcc7a 100644
--- a/extras/src/com/mopub/mobileads/MillennialBanner.java
+++ b/extras/src/com/mopub/mobileads/MillennialBanner.java
@@ -130,7 +130,6 @@ public void intentStarted(MMAd ad, String intent) {
         }
 
 
-        // todo test (un)register
         void register(Context context) {
             mContext = context;
             context.registerReceiver(this, MMBroadcastReceiver.createIntentFilter());
diff --git a/extras/src/com/mopub/mobileads/MillennialInterstitial.java b/extras/src/com/mopub/mobileads/MillennialInterstitial.java
index f8537671..7ca06abd 100644
--- a/extras/src/com/mopub/mobileads/MillennialInterstitial.java
+++ b/extras/src/com/mopub/mobileads/MillennialInterstitial.java
@@ -146,7 +146,6 @@ public void overlayClosed(MMAd ad) {
             mInterstitialListener.onInterstitialDismissed();
         }
 
-        // todo test (un)register
         void register(Context context) {
             mContext = context;
             context.registerReceiver(this, MMBroadcastReceiver.createIntentFilter());
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index 3bba19b9..c21fd982 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -8,7 +8,10 @@
     <uses-permission android:name="android.permission.INTERNET" />
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
     <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
-    
+
+    <!-- For MRAID 2 -->
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
+
     <application android:icon="@drawable/icon" android:label="@string/app_name"
             android:debuggable="true">
 	    <activity android:name="com.mopub.simpleadsdemo.SimpleAdsDemo"
@@ -24,6 +27,8 @@
                 android:configChanges="keyboardHidden|orientation"/>
         <activity android:name="com.mopub.mobileads.MraidBrowser"
                 android:configChanges="keyboardHidden|orientation"/>
+        <activity android:name="com.mopub.mobileads.MraidVideoPlayerActivity"
+                android:configChanges="keyboardHidden|orientation"/>
         <activity android:name="com.mopub.simpleadsdemo.BannersTab" />
         <activity android:name="com.mopub.simpleadsdemo.InterstitialsTab" />
         <activity android:name="com.mopub.simpleadsdemo.ConsoleTab" />
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/SimpleAdsDemo.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/SimpleAdsDemo.java
index 57db6c26..848ff151 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/SimpleAdsDemo.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/SimpleAdsDemo.java
@@ -37,11 +37,10 @@
 import android.os.Bundle;
 import android.widget.TabHost;
 import android.widget.Toast;
-import com.mopub.mobileads.MoPubActivity;
 import com.mopub.mobileads.MoPubConversionTracker;
 
 public class SimpleAdsDemo extends TabActivity {
-    private final int   INTERSTITIAL_AD_REQUEST = 0;
+    private final int INTERSTITIAL_AD_REQUEST = 0;
 
     /** Called when the activity is first created. */
     @Override
@@ -76,12 +75,6 @@ public void onCreate(Bundle savedInstanceState) {
         new MoPubConversionTracker().reportAppOpen(this);
     }
 
-    public void showInterstitialAd() {
-        Intent i = new Intent(this, MoPubActivity.class);
-        i.putExtra("com.mopub.mobileads.AdUnitId", "agltb3B1Yi1pbmNyDAsSBFNpdGUY6tERDA");
-        startActivityForResult(i, INTERSTITIAL_AD_REQUEST);
-    }
-
     // Listen for results from the interstitial ad
     protected void onActivityResult(int requestCode, int resultCode, Intent data) {
         switch (requestCode) {
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/SimpleAdsDemoConstants.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/SimpleAdsDemoConstants.java
index 80b7fdb8..4c676b65 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/SimpleAdsDemoConstants.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/SimpleAdsDemoConstants.java
@@ -4,4 +4,5 @@
     public static final String PUB_ID_320x50 = "agltb3B1Yi1pbmNyDAsSBFNpdGUY8fgRDA";
     public static final String PUB_ID_300x250 = "agltb3B1Yi1pbmNyDQsSBFNpdGUYqKO5CAw";
     public static final String PUB_ID_INTERSTITIAL = "agltb3B1Yi1pbmNyDAsSBFNpdGUY6tERDA";
+    
 }
diff --git a/mopub-sdk/etc/expectedFile.jpg b/mopub-sdk/etc/expectedFile.jpg
new file mode 100644
index 00000000..22a2a3cc
Binary files /dev/null and b/mopub-sdk/etc/expectedFile.jpg differ
diff --git a/mopub-sdk/etc/mraid.js b/mopub-sdk/etc/mraid.js
new file mode 100644
index 00000000..443df6ff
--- /dev/null
+++ b/mopub-sdk/etc/mraid.js
@@ -0,0 +1,739 @@
+(function() {
+  var isIOS = (/iphone|ipad|ipod/i).test(window.navigator.userAgent.toLowerCase());
+  if (isIOS) {
+    console = {};
+    console.log = function(log) {
+      var iframe = document.createElement('iframe');
+      iframe.setAttribute('src', 'ios-log: ' + log);
+      document.documentElement.appendChild(iframe);
+      iframe.parentNode.removeChild(iframe);
+      iframe = null;
+    };
+    console.debug = console.info = console.warn = console.error = console.log;
+  }
+}());
+
+(function() {
+  // Establish the root mraidbridge object.
+  var mraidbridge = window.mraidbridge = {};
+
+  // Listeners for bridge events.
+  var listeners = {};
+
+  // Queue to track pending calls to the native SDK.
+  var nativeCallQueue = [];
+
+  // Whether a native call is currently in progress.
+  var nativeCallInFlight = false;
+
+  //////////////////////////////////////////////////////////////////////////////////////////////////
+
+  mraidbridge.fireReadyEvent = function() {
+    mraidbridge.fireEvent('ready');
+  };
+
+  mraidbridge.fireChangeEvent = function(properties) {
+    mraidbridge.fireEvent('change', properties);
+  };
+
+  mraidbridge.fireErrorEvent = function(message, action) {
+    mraidbridge.fireEvent('error', message, action);
+  };
+
+  mraidbridge.fireEvent = function(type) {
+    var ls = listeners[type];
+    if (ls) {
+      var args = Array.prototype.slice.call(arguments);
+      args.shift();
+      var l = ls.length;
+      for (var i = 0; i < l; i++) {
+        ls[i].apply(null, args);
+      }
+    }
+  };
+
+  mraidbridge.nativeCallComplete = function(command) {
+    if (nativeCallQueue.length === 0) {
+      nativeCallInFlight = false;
+      return;
+    }
+
+    var nextCall = nativeCallQueue.pop();
+    window.location = nextCall;
+  };
+
+  mraidbridge.executeNativeCall = function(command) {
+    var call = 'mraid://' + command;
+
+    var key, value;
+    var isFirstArgument = true;
+
+    for (var i = 1; i < arguments.length; i += 2) {
+      key = arguments[i];
+      value = arguments[i + 1];
+
+      if (value === null) continue;
+
+      if (isFirstArgument) {
+        call += '?';
+        isFirstArgument = false;
+      } else {
+        call += '&';
+      }
+
+      call += encodeURIComponent(key) + '=' + encodeURIComponent(value);
+    }
+
+    if (nativeCallInFlight) {
+      nativeCallQueue.push(call);
+    } else {
+      nativeCallInFlight = true;
+      window.location = call;
+    }
+  };
+
+  //////////////////////////////////////////////////////////////////////////////////////////////////
+
+  mraidbridge.addEventListener = function(event, listener) {
+    var eventListeners;
+    listeners[event] = listeners[event] || [];
+    eventListeners = listeners[event];
+
+    for (var l in eventListeners) {
+      // Listener already registered, so no need to add it.
+      if (listener === l) return;
+    }
+
+    eventListeners.push(listener);
+  };
+
+  mraidbridge.removeEventListener = function(event, listener) {
+    if (listeners.hasOwnProperty(event)) {
+      var eventListeners = listeners[event];
+      if (eventListeners) {
+        var idx = eventListeners.indexOf(listener);
+        if (idx !== -1) {
+          eventListeners.splice(idx, 1);
+        }
+      }
+    }
+  };
+}());
+
+(function() {
+  var mraid = window.mraid = {};
+  var bridge = window.mraidbridge;
+
+  // Constants. ////////////////////////////////////////////////////////////////////////////////////
+
+  var VERSION = mraid.VERSION = '1.0';
+
+  var STATES = mraid.STATES = {
+    LOADING: 'loading',     // Initial state.
+    DEFAULT: 'default',
+    EXPANDED: 'expanded',
+    HIDDEN: 'hidden'
+  };
+
+  var EVENTS = mraid.EVENTS = {
+    ERROR: 'error',
+    INFO: 'info',
+    READY: 'ready',
+    STATECHANGE: 'stateChange',
+    VIEWABLECHANGE: 'viewableChange'
+  };
+
+  var PLACEMENT_TYPES = mraid.PLACEMENT_TYPES = {
+    UNKNOWN: 'unknown',
+    INLINE: 'inline',
+    INTERSTITIAL: 'interstitial'
+  };
+
+  // External MRAID state: may be directly or indirectly modified by the ad JS. ////////////////////
+
+  // Properties which define the behavior of an expandable ad.
+  var expandProperties = {
+    width: -1,
+    height: -1,
+    useCustomClose: false,
+    isModal: true,
+    lockOrientation: false
+  };
+
+  var hasSetCustomSize = false;
+
+  var hasSetCustomClose = false;
+
+  var listeners = {};
+
+  // Internal MRAID state. Modified by the native SDK. /////////////////////////////////////////////
+
+  var state = STATES.LOADING;
+
+  var isViewable = false;
+
+  var screenSize = { width: -1, height: -1 };
+
+  var placementType = PLACEMENT_TYPES.UNKNOWN;
+
+  var supports = {
+    sms: false,
+    tel: false,
+    calendar: false,
+    storePicture: false,
+    inlineVideo: false
+  };
+
+  //////////////////////////////////////////////////////////////////////////////////////////////////
+
+  var EventListeners = function(event) {
+    this.event = event;
+    this.count = 0;
+    var listeners = {};
+
+    this.add = function(func) {
+      var id = String(func);
+      if (!listeners[id]) {
+        listeners[id] = func;
+        this.count++;
+      }
+    };
+
+    this.remove = function(func) {
+      var id = String(func);
+      if (listeners[id]) {
+        listeners[id] = null;
+        delete listeners[id];
+        this.count--;
+        return true;
+      } else {
+        return false;
+      }
+    };
+
+    this.removeAll = function() {
+      for (var id in listeners) {
+        if (listeners.hasOwnProperty(id)) this.remove(listeners[id]);
+      }
+    };
+
+    this.broadcast = function(args) {
+      for (var id in listeners) {
+        if (listeners.hasOwnProperty(id)) listeners[id].apply({}, args);
+      }
+    };
+
+    this.toString = function() {
+      var out = [event, ':'];
+      for (var id in listeners) {
+        if (listeners.hasOwnProperty(id)) out.push('|', id, '|');
+      }
+      return out.join('');
+    };
+  };
+
+  var broadcastEvent = function() {
+    var args = new Array(arguments.length);
+    var l = arguments.length;
+    for (var i = 0; i < l; i++) args[i] = arguments[i];
+    var event = args.shift();
+    if (listeners[event]) listeners[event].broadcast(args);
+  };
+
+  var contains = function(value, array) {
+    for (var i in array) {
+      if (array[i] === value) return true;
+    }
+    return false;
+  };
+
+  var clone = function(obj) {
+    if (obj === null) return null;
+    var f = function() {};
+    f.prototype = obj;
+    return new f();
+  };
+
+  var stringify = function(obj) {
+    if (typeof obj === 'object') {
+      var out = [];
+      if (obj.push) {
+        // Array.
+        for (var p in obj) out.push(obj[p]);
+        return '[' + out.join(',') + ']';
+      } else {
+        // Other object.
+        for (var p in obj) out.push("'" + p + "': " + obj[p]);
+        return '{' + out.join(',') + '}';
+      }
+    } else return String(obj);
+  };
+
+  var trim = function(str) {
+    return str.replace(/^\s+|\s+$/g, '');
+  };
+
+  // Functions that will be invoked by the native SDK whenever a "change" event occurs.
+  var changeHandlers = {
+    state: function(val) {
+      if (state === STATES.LOADING) {
+        broadcastEvent(EVENTS.INFO, 'Native SDK initialized.');
+      }
+      state = val;
+      broadcastEvent(EVENTS.INFO, 'Set state to ' + stringify(val));
+      broadcastEvent(EVENTS.STATECHANGE, state);
+    },
+
+    viewable: function(val) {
+      isViewable = val;
+      broadcastEvent(EVENTS.INFO, 'Set isViewable to ' + stringify(val));
+      broadcastEvent(EVENTS.VIEWABLECHANGE, isViewable);
+    },
+
+    placementType: function(val) {
+      broadcastEvent(EVENTS.INFO, 'Set placementType to ' + stringify(val));
+      placementType = val;
+    },
+
+    screenSize: function(val) {
+      broadcastEvent(EVENTS.INFO, 'Set screenSize to ' + stringify(val));
+      for (var key in val) {
+        if (val.hasOwnProperty(key)) screenSize[key] = val[key];
+      }
+
+      if (!hasSetCustomSize) {
+        expandProperties['width'] = screenSize['width'];
+        expandProperties['height'] = screenSize['height'];
+      }
+    },
+
+    expandProperties: function(val) {
+      broadcastEvent(EVENTS.INFO, 'Merging expandProperties with ' + stringify(val));
+      for (var key in val) {
+        if (val.hasOwnProperty(key)) expandProperties[key] = val[key];
+      }
+    },
+
+    supports: function(val) {
+      broadcastEvent(EVENTS.INFO, 'Set supports to ' + stringify(val));
+        supports = val;
+    },
+  };
+
+  var validate = function(obj, validators, action, merge) {
+    if (!merge) {
+      // Check to see if any required properties are missing.
+      if (obj === null) {
+        broadcastEvent(EVENTS.ERROR, 'Required object not provided.', action);
+        return false;
+      } else {
+        for (var i in validators) {
+          if (validators.hasOwnProperty(i) && obj[i] === undefined) {
+            broadcastEvent(EVENTS.ERROR, 'Object is missing required property: ' + i + '.', action);
+            return false;
+          }
+        }
+      }
+    }
+
+    for (var prop in obj) {
+      var validator = validators[prop];
+      var value = obj[prop];
+      if (validator && !validator(value)) {
+        // Failed validation.
+        broadcastEvent(EVENTS.ERROR, 'Value of property ' + prop + ' is invalid.',
+          action);
+        return false;
+      }
+    }
+    return true;
+  };
+
+  var expandPropertyValidators = {
+    width: function(v) { return !isNaN(v) && v >= 0; },
+    height: function(v) { return !isNaN(v) && v >= 0; },
+    useCustomClose: function(v) { return (typeof v === 'boolean'); },
+    lockOrientation: function(v) { return (typeof v === 'boolean'); }
+  };
+
+  //////////////////////////////////////////////////////////////////////////////////////////////////
+
+  bridge.addEventListener('change', function(properties) {
+    for (var p in properties) {
+      if (properties.hasOwnProperty(p)) {
+        var handler = changeHandlers[p];
+        handler(properties[p]);
+      }
+    }
+  });
+
+  bridge.addEventListener('error', function(message, action) {
+    broadcastEvent(EVENTS.ERROR, message, action);
+  });
+
+  bridge.addEventListener('ready', function() {
+    broadcastEvent(EVENTS.READY);
+  });
+
+  //////////////////////////////////////////////////////////////////////////////////////////////////
+
+  mraid.addEventListener = function(event, listener) {
+    if (!event || !listener) {
+      broadcastEvent(EVENTS.ERROR, 'Both event and listener are required.', 'addEventListener');
+    } else if (!contains(event, EVENTS)) {
+      broadcastEvent(EVENTS.ERROR, 'Unknown MRAID event: ' + event, 'addEventListener');
+    } else {
+      if (!listeners[event]) listeners[event] = new EventListeners(event);
+      listeners[event].add(listener);
+    }
+  };
+
+  mraid.close = function() {
+    if (state === STATES.HIDDEN) {
+      broadcastEvent(EVENTS.ERROR, 'Ad cannot be closed when it is already hidden.',
+        'close');
+    } else bridge.executeNativeCall('close');
+  };
+
+  mraid.expand = function(URL) {
+    if (this.getState() !== STATES.DEFAULT) {
+      broadcastEvent(EVENTS.ERROR, 'Ad can only be expanded from the default state.', 'expand');
+    } else {
+      var args = ['expand'];
+
+      if (this.getHasSetCustomClose()) {
+        args = args.concat(['shouldUseCustomClose', expandProperties.useCustomClose ? 'true' : 'false']);
+      }
+
+      if (this.getHasSetCustomSize()) {
+        if (expandProperties.width >= 0 && expandProperties.height >= 0) {
+          args = args.concat(['w', expandProperties.width, 'h', expandProperties.height]);
+        }
+      }
+
+      if (typeof expandProperties.lockOrientation !== 'undefined') {
+        args = args.concat(['lockOrientation', expandProperties.lockOrientation]);
+      }
+
+      if (URL) {
+        args = args.concat(['url', URL]);
+      }
+
+      bridge.executeNativeCall.apply(this, args);
+    }
+  };
+
+  mraid.getHasSetCustomClose = function() {
+      return hasSetCustomClose;
+  };
+
+  mraid.getHasSetCustomSize = function() {
+      return hasSetCustomSize;
+  };
+
+  mraid.getExpandProperties = function() {
+    var properties = {
+      width: expandProperties.width,
+      height: expandProperties.height,
+      useCustomClose: expandProperties.useCustomClose,
+      isModal: expandProperties.isModal
+    };
+    return properties;
+  };
+
+  mraid.getPlacementType = function() {
+    return placementType;
+  };
+
+  mraid.getState = function() {
+    return state;
+  };
+
+  mraid.getVersion = function() {
+    return mraid.VERSION;
+  };
+
+  mraid.isViewable = function() {
+    return isViewable;
+  };
+
+  mraid.open = function(URL) {
+    if (!URL) broadcastEvent(EVENTS.ERROR, 'URL is required.', 'open');
+    else bridge.executeNativeCall('open', 'url', URL);
+  };
+
+  mraid.removeEventListener = function(event, listener) {
+    if (!event) broadcastEvent(EVENTS.ERROR, 'Event is required.', 'removeEventListener');
+    else {
+      if (listener && (!listeners[event] || !listeners[event].remove(listener))) {
+        broadcastEvent(EVENTS.ERROR, 'Listener not currently registered for event.',
+          'removeEventListener');
+        return;
+      } else if (listeners[event]) listeners[event].removeAll();
+
+      if (listeners[event] && listeners[event].count === 0) {
+        listeners[event] = null;
+        delete listeners[event];
+      }
+    }
+  };
+
+  mraid.setExpandProperties = function(properties) {
+    if (validate(properties, expandPropertyValidators, 'setExpandProperties', true)) {
+      if (properties.hasOwnProperty('width') || properties.hasOwnProperty('height')) {
+        hasSetCustomSize = true;
+      }
+
+      if (properties.hasOwnProperty('useCustomClose')) hasSetCustomClose = true;
+
+      var desiredProperties = ['width', 'height', 'useCustomClose', 'lockOrientation'];
+      var length = desiredProperties.length;
+      for (var i = 0; i < length; i++) {
+        var propname = desiredProperties[i];
+        if (properties.hasOwnProperty(propname)) expandProperties[propname] = properties[propname];
+      }
+    }
+  };
+
+  mraid.useCustomClose = function(shouldUseCustomClose) {
+    expandProperties.useCustomClose = shouldUseCustomClose;
+    hasSetCustomClose = true;
+    bridge.executeNativeCall('usecustomclose', 'shouldUseCustomClose', shouldUseCustomClose);
+  };
+
+  // MRAID 2.0 APIs ////////////////////////////////////////////////////////////////////////////////
+
+  mraid.createCalendarEvent = function(parameters) {
+    CalendarEventParser.initialize(parameters);
+    if (CalendarEventParser.parse()) {
+      bridge.executeNativeCall.apply(this, CalendarEventParser.arguments);
+    } else {
+      broadcastEvent(EVENTS.ERROR, CalendarEventParser.errors[0], 'createCalendarEvent');
+    }
+  };
+
+  mraid.supports = function(feature) {
+    return supports[feature];
+  };
+
+  mraid.playVideo = function(uri) {
+    if (!mraid.isViewable()) {
+      broadcastEvent(EVENTS.ERROR, 'playVideo cannot be called until the ad is viewable', 'playVideo');
+      return;
+    }
+
+    if (!uri) {
+      broadcastEvent(EVENTS.ERROR, 'playVideo must be called with a valid URI', 'playVideo');
+    } else {
+      bridge.executeNativeCall.apply(this, ['playVideo', 'uri', uri]);
+    }
+  };
+
+  mraid.storePicture = function(uri) {
+    if (!mraid.isViewable()) {
+      broadcastEvent(EVENTS.ERROR, 'storePicture cannot be called until the ad is viewable', 'storePicture');
+      return;
+    }
+
+    if (!uri) {
+      broadcastEvent(EVENTS.ERROR, 'storePicture must be called with a valid URI', 'storePicture');
+    } else {
+      bridge.executeNativeCall.apply(this, ['storePicture', 'uri', uri]);
+    }
+  };
+
+  mraid.resize = function() {
+    bridge.executeNativeCall('resize');
+  };
+
+  mraid.getResizeProperties = function() {
+    bridge.executeNativeCall('getResizeProperties');
+  };
+
+  mraid.setResizeProperties = function(resizeProperties) {
+    bridge.executeNativeCall('setResizeProperties', 'resizeProperties', resizeProperties);
+  };
+
+  mraid.getCurrentPosition = function() {
+    bridge.executeNativeCall('getCurrentPosition');
+  };
+
+  mraid.getDefaultPosition = function() {
+    bridge.executeNativeCall('getDefaultPosition');
+  };
+
+  mraid.getMaxSize = function() {
+    bridge.executeNativeCall('getMaxSize');
+  };
+
+  mraid.getScreenSize = function() {
+    bridge.executeNativeCall('getScreenSize');
+  };
+
+  var CalendarEventParser = {
+    initialize: function(parameters) {
+      this.parameters = parameters;
+      this.errors = [];
+      this.arguments = ['createCalendarEvent'];
+    },
+
+    parse: function() {
+      if (!this.parameters) {
+        this.errors.push('The object passed to createCalendarEvent cannot be null.');
+      } else {
+        this.parseDescription();
+        this.parseLocation();
+        this.parseSummary();
+        this.parseStartAndEndDates();
+        this.parseReminder();
+        this.parseRecurrence();
+        this.parseTransparency();
+      }
+
+      var errorCount = this.errors.length;
+      if (errorCount) {
+        this.arguments.length = 0;
+      }
+
+      return (errorCount === 0);
+    },
+
+    parseDescription: function() {
+      this._processStringValue('description');
+    },
+
+    parseLocation: function() {
+      this._processStringValue('location');
+    },
+
+    parseSummary: function() {
+      this._processStringValue('summary');
+    },
+
+    parseStartAndEndDates: function() {
+      this._processDateValue('start');
+      this._processDateValue('end');
+    },
+
+    parseReminder: function() {
+      var reminder = this._getParameter('reminder');
+      if (!reminder) {
+        return;
+      }
+
+      if (reminder < 0) {
+        this.arguments.push('relativeReminder');
+        this.arguments.push(parseInt(reminder) / 1000);
+      } else {
+        this.arguments.push('absoluteReminder');
+        this.arguments.push(reminder);
+      }
+    },
+
+    parseRecurrence: function() {
+      var recurrenceDict = this._getParameter('recurrence');
+      if (!recurrenceDict) {
+        return;
+      }
+
+      this.parseRecurrenceInterval(recurrenceDict);
+      this.parseRecurrenceFrequency(recurrenceDict);
+      this.parseRecurrenceEndDate(recurrenceDict);
+      this.parseRecurrenceArrayValue(recurrenceDict, 'daysInWeek');
+      this.parseRecurrenceArrayValue(recurrenceDict, 'daysInMonth');
+      this.parseRecurrenceArrayValue(recurrenceDict, 'daysInYear');
+      this.parseRecurrenceArrayValue(recurrenceDict, 'monthsInYear');
+    },
+
+    parseTransparency: function() {
+      var validValues = ['opaque', 'transparent'];
+
+      if (this.parameters.hasOwnProperty('transparency')) {
+        var transparency = this.parameters['transparency'];
+        if (contains(transparency, validValues)) {
+          this.arguments.push('transparency');
+          this.arguments.push(transparency);
+        } else {
+          this.errors.push('transparency must be opaque or transparent');
+        }
+      }
+    },
+
+    parseRecurrenceArrayValue: function(recurrenceDict, kind) {
+      if (recurrenceDict.hasOwnProperty(kind)) {
+        var array = recurrenceDict[kind];
+        if (!array || !(array instanceof Array)) {
+          this.errors.push(kind + ' must be an array.');
+        } else {
+          var arrayStr = array.join(',');
+          this.arguments.push(kind);
+          this.arguments.push(arrayStr);
+        }
+      }
+    },
+
+    parseRecurrenceInterval: function(recurrenceDict) {
+      if (recurrenceDict.hasOwnProperty('interval')) {
+        var interval = recurrenceDict['interval'];
+        if (!interval) {
+          this.errors.push('Recurrence interval cannot be null.');
+        } else {
+          this.arguments.push('interval');
+          this.arguments.push(interval);
+        }
+      } else {
+        // If a recurrence rule was specified without an interval, use a default value of 1.
+        this.arguments.push('interval');
+        this.arguments.push(1);
+      }
+    },
+
+    parseRecurrenceFrequency: function(recurrenceDict) {
+      if (recurrenceDict.hasOwnProperty('frequency')) {
+        var frequency = recurrenceDict['frequency'];
+        var validFrequencies = ['daily', 'weekly', 'monthly', 'yearly'];
+        if (contains(frequency, validFrequencies)) {
+          this.arguments.push('frequency');
+          this.arguments.push(frequency);
+        } else {
+          this.errors.push('Recurrence frequency must be one of: "daily", "weekly", "monthly", "yearly".');
+        }
+      }
+    },
+
+    parseRecurrenceEndDate: function(recurrenceDict) {
+      var expires = recurrenceDict['expires'];
+
+      if (!expires) {
+        return;
+      }
+
+      this.arguments.push('expires');
+      this.arguments.push(expires);
+    },
+
+    _getParameter: function(key) {
+      if (this.parameters.hasOwnProperty(key)) {
+        return this.parameters[key];
+      }
+
+      return null;
+    },
+
+    _processStringValue: function(kind) {
+      if (this.parameters.hasOwnProperty(kind)) {
+        var value = this.parameters[kind];
+        this.arguments.push(kind);
+        this.arguments.push(value);
+      }
+    },
+
+    _processDateValue: function(kind) {
+      if (this.parameters.hasOwnProperty(kind)) {
+        var dateString = this._getParameter(kind);
+        this.arguments.push(kind);
+        this.arguments.push(dateString);
+      }
+    },
+  };
+}());
\ No newline at end of file
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetchTask.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetchTask.java
index dfa3038e..17379e8e 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetchTask.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetchTask.java
@@ -14,7 +14,7 @@
 
 import static com.mopub.mobileads.util.HttpResponses.extractHeader;
 
-class AdFetchTask extends AsyncTask<String, Void, AdLoadTask> {
+public class AdFetchTask extends AsyncTask<String, Void, AdLoadTask> {
     private TaskTracker mTaskTracker;
     private AdViewController mAdViewController;
     private Exception mException;
@@ -26,7 +26,7 @@
     private static final int MAXIMUM_REFRESH_TIME_MILLISECONDS = 600000;
     private static final double EXPONENTIAL_BACKOFF_FACTOR = 1.5;
 
-    AdFetchTask(TaskTracker taskTracker, AdViewController adViewController, String userAgent, int timeoutMilliseconds) {
+    public AdFetchTask(TaskTracker taskTracker, AdViewController adViewController, String userAgent, int timeoutMilliseconds) {
         mTaskTracker = taskTracker;
 
         mAdViewController = adViewController;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetcher.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetcher.java
index cedffafb..f2fcdaae 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetcher.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetcher.java
@@ -34,14 +34,17 @@
 
 package com.mopub.mobileads;
 
-import android.os.Build;
 import android.util.Log;
+import com.mopub.mobileads.factories.AdFetchTaskFactory;
+import com.mopub.mobileads.util.VersionCode;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.util.concurrent.Executor;
 
+import static com.mopub.mobileads.util.VersionCode.ICE_CREAM_SANDWICH;
+
 /*
  * AdFetcher is a delegate of an AdViewController that handles loading ad data over a
  * network connection. The ad is fetched in a background thread by executing
@@ -71,8 +74,6 @@
     public static final String SCROLLABLE_KEY = "Scrollable";
 
     private int mTimeoutMilliseconds = 10000;
-    // This is equivalent to Build.VERSION_CODES.ICE_CREAM_SANDWICH
-    private static final int VERSION_CODE_ICE_CREAM_SANDWICH = 14;
     private AdViewController mAdViewController;
 
     private AdFetchTask mCurrentTask;
@@ -102,9 +103,9 @@ public void fetchAdForUrl(String url) {
             mCurrentTask.cancel(true);
         }
 
-        mCurrentTask = new AdFetchTask(mTaskTracker, mAdViewController, mUserAgent, mTimeoutMilliseconds);
+        mCurrentTask = AdFetchTaskFactory.create(mTaskTracker, mAdViewController, mUserAgent, mTimeoutMilliseconds);
 
-        if (Build.VERSION.SDK_INT >= VERSION_CODE_ICE_CREAM_SANDWICH) {
+        if (VersionCode.currentApiLevel().isAtLeast(ICE_CREAM_SANDWICH)) {
             Class<?> cls = AdFetchTask.class;
             Class<?>[] parameterTypes = {Executor.class, Object[].class};
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoadTask.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoadTask.java
index 739a62a7..5d924783 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoadTask.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoadTask.java
@@ -85,7 +85,7 @@ private AdLoadTask extractCustomEventAdLoadTaskFromResponseBody() throws IOExcep
             String htmlData = entity != null ? Strings.fromStream(entity.getContent()) : "";
             String redirectUrl = extractHeader(response, REDIRECT_URL_HEADER);
             String clickthroughUrl = extractHeader(response, CLICKTHROUGH_URL_HEADER);
-            boolean scrollingEnabled = extractBooleanHeader(response, SCROLLABLE_HEADER);
+            boolean scrollingEnabled = extractBooleanHeader(response, SCROLLABLE_HEADER, false);
 
             Map<String, String> eventDataMap = new HashMap<String, String>();
             eventDataMap.put(HTML_RESPONSE_BODY_KEY, Uri.encode(htmlData));
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdUrlGenerator.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdUrlGenerator.java
index 315f826b..12bf1aaf 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdUrlGenerator.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdUrlGenerator.java
@@ -18,6 +18,7 @@
 import static com.mopub.mobileads.AdUrlGenerator.MoPubNetworkType.MOBILE;
 import static com.mopub.mobileads.AdUrlGenerator.MoPubNetworkType.UNKNOWN;
 import static com.mopub.mobileads.AdUrlGenerator.MoPubNetworkType.WIFI;
+import static com.mopub.mobileads.util.MraidUtils.isStorePictureSupported;
 
 public class AdUrlGenerator extends BaseUrlGenerator {
     public static final String DEVICE_ORIENTATION_PORTRAIT = "p";
@@ -101,6 +102,8 @@ public String generateUrlString(String serverHostname) {
 
         setAppVersion(getAppVersionFromContext(mContext));
 
+        setExternalStoragePermission(isStorePictureSupported(mContext));
+
         return getFinalUrlString();
     }
 
@@ -246,4 +249,5 @@ private static String addKeyword(String keywords, String addition) {
             return keywords + "," + addition;
         }
     }
+
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
index 7db71646..dbc231bb 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
@@ -454,9 +454,21 @@ private boolean isNetworkAvailable() {
         return networkInfo != null && networkInfo.isConnected();
     }
 
-    void setAdContentView(View view) {
-        getMoPubView().removeAllViews();
-        getMoPubView().addView(view, getAdLayoutParams(view));
+    void setAdContentView(final View view) {
+        // XXX: This method is called from the WebViewClient's callbacks, which has caused an error on a small portion of devices
+        // We suspect that the code below may somehow be running on the wrong UI Thread in the rare case.
+        // see: http://stackoverflow.com/questions/10426120/android-got-calledfromwrongthreadexception-in-onpostexecute-how-could-it-be
+        mHandler.post(new Runnable() {
+            @Override
+            public void run() {
+                MoPubView moPubView = getMoPubView();
+                if(moPubView == null) {
+                    return;
+                }
+                moPubView.removeAllViews();
+                moPubView.addView(view, getAdLayoutParams(view));
+            }
+        });
     }
 
     private FrameLayout.LayoutParams getAdLayoutParams(View view) {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
index 0a53223b..54784970 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
@@ -1,5 +1,6 @@
 package com.mopub.mobileads;
 
+import android.annotation.SuppressLint;
 import android.content.Context;
 import android.graphics.Color;
 import android.os.Build;
@@ -7,7 +8,11 @@
 import android.view.MotionEvent;
 import android.view.View;
 
+import static com.mopub.mobileads.util.VersionCode.ICE_CREAM_SANDWICH;
+import static com.mopub.mobileads.util.VersionCode.currentApiLevel;
+
 public class BaseHtmlWebView extends BaseWebView {
+    @SuppressLint("SetJavaScriptEnabled")
     public BaseHtmlWebView(Context context) {
         super(context);
 
@@ -18,6 +23,10 @@ public BaseHtmlWebView(Context context) {
 
         disableScrollingAndZoom();
         getSettings().setJavaScriptEnabled(true);
+
+        if (currentApiLevel().isAtLeast(ICE_CREAM_SANDWICH)) {
+            enablePlugins(true);
+        }
         setBackgroundColor(Color.TRANSPARENT);
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseUrlGenerator.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseUrlGenerator.java
index d97427d5..c3c2b665 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseUrlGenerator.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseUrlGenerator.java
@@ -49,6 +49,10 @@ protected void setAppVersion(String appVersion) {
         addParam("av", appVersion);
     }
 
+    protected void setExternalStoragePermission(boolean isExternalStoragePermissionGranted) {
+        addParam("android_perms_ext_storage", isExternalStoragePermissionGranted ? "1" : "0");
+    }
+
     protected void setUdid(String udid) {
         String udidDigest = (udid == null) ? "" : Utils.sha1(udid);
         addParam("udid", "sha:" + udidDigest);
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseWebView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseWebView.java
index 71c1c0b5..39c42cb9 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseWebView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseWebView.java
@@ -1,7 +1,11 @@
 package com.mopub.mobileads;
 
 import android.content.Context;
+import android.util.Log;
 import android.webkit.WebView;
+import com.mopub.mobileads.util.VersionCode;
+
+import java.lang.reflect.Method;
 
 public class BaseWebView extends WebView {
     public BaseWebView(Context context) {
@@ -10,5 +14,29 @@ public BaseWebView(Context context) {
          * an Activity context, as it will leak on Froyo devices and earlier.
          */
         super(context.getApplicationContext());
+        enablePlugins(false);
+    }
+
+    protected void enablePlugins(final boolean enabled) {
+        // Android 4.3 and above has no concept of plugin states
+        if (VersionCode.currentApiLevel().isAtLeast(VersionCode.JELLY_BEAN_MR2)) {
+            return;
+        }
+
+        if (VersionCode.currentApiLevel().isBelow(VersionCode.FROYO)) {
+            getSettings().setPluginsEnabled(enabled);
+        } else {
+            try {
+                Class<Enum> pluginStateClass = (Class<Enum>) Class.forName("android.webkit.WebSettings$PluginState");
+
+                Class<?>[] parameters = {pluginStateClass};
+                Method method = getSettings().getClass().getDeclaredMethod("setPluginState", parameters);
+
+                Object pluginState = Enum.valueOf(pluginStateClass, enabled ? "ON" : "OFF");
+                method.invoke(getSettings(), pluginState);
+            } catch (Exception e) {
+                Log.d("MoPub", "Unable to modify WebView plugin state.");
+            }
+        }
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/FacebookKeywordProvider.java b/mopub-sdk/src/main/java/com/mopub/mobileads/FacebookKeywordProvider.java
index e5a4a042..903b6e66 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/FacebookKeywordProvider.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/FacebookKeywordProvider.java
@@ -32,15 +32,17 @@ public static String getKeyword(Context context) {
 
         lastQueryTime = new Date().getTime();
 
+        Cursor cursor = null;
+
         try {
             String projection[] = {ID_COLUMN_NAME};
-            Cursor c = context.getContentResolver().query(ID_URL, projection, null, null, null);
+            cursor = context.getContentResolver().query(ID_URL, projection, null, null, null);
             
-            if (c == null || !c.moveToFirst()) {
+            if (cursor == null || !cursor.moveToFirst()) {
                 return null;
             }
             
-            String attributionId = c.getString(c.getColumnIndex(ID_COLUMN_NAME));
+            String attributionId = cursor.getString(cursor.getColumnIndex(ID_COLUMN_NAME));
             
             if (attributionId == null || attributionId.length() == 0) {
                 return null;
@@ -52,6 +54,10 @@ public static String getKeyword(Context context) {
         } catch (Exception exception) {
             Log.d("MoPub", "Unable to retrieve FBATTRID: " + exception.toString());
             return null;
+        } finally {
+            if (cursor != null) {
+                cursor.close();
+            }
         }
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlBanner.java b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlBanner.java
index b936844c..2a65afac 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlBanner.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlBanner.java
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 import android.net.Uri;
+import android.view.ViewGroup;
 import com.mopub.mobileads.factories.HtmlBannerWebViewFactory;
 
 import java.util.Map;
@@ -45,6 +46,9 @@ protected void loadBanner(
     @Override
     protected void onInvalidate() {
         if (mHtmlBannerWebView != null) {
+            if (mHtmlBannerWebView.getParent() instanceof ViewGroup) {
+                ((ViewGroup) mHtmlBannerWebView.getParent()).removeView(mHtmlBannerWebView);
+            }
             mHtmlBannerWebView.destroy();
         }
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java
index 75dd6f96..174178f8 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java
@@ -7,7 +7,6 @@
 
 public class HtmlInterstitialWebView extends BaseHtmlWebView {
     private Handler mHandler;
-    private CustomEventInterstitialListener customEventInterstitialListener;
 
     public HtmlInterstitialWebView(Context context) {
         super(context);
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
index 9f8b0bea..099e777f 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
@@ -32,11 +32,11 @@
 
     @Override
     public boolean shouldOverrideUrlLoading(WebView view, String url) {
-        if (handleSpecialMoPubScheme(url) || handlePhoneScheme(url)) {
+        if (handleSpecialMoPubScheme(url) || handlePhoneScheme(url) || handleNativeBrowserScheme(url)) {
             return true;
         }
 
-        if (isMarketUrl(url) && !canHandleMarketUrl(url)) {
+        if (isApplicationUrl(url) && !canHandleApplicationUrl(url)) {
             return true;
         }
 
@@ -44,6 +44,11 @@ public boolean shouldOverrideUrlLoading(WebView view, String url) {
         Log.d("MoPub", "Ad clicked. Click URL: " + url);
         mHtmlWebViewListener.onClicked();
 
+        if (isApplicationUrl(url)) {
+            launchApplicationUrl(url);
+            return true;
+        }
+
         showBrowserForUrl(url);
         return true;
     }
@@ -93,17 +98,47 @@ private boolean handlePhoneScheme(String url) {
         return true;
     }
 
+    private boolean handleNativeBrowserScheme(String url){
+        Uri uri = Uri.parse(url);
+        String urlToOpenInNativeBrowser = uri.getQueryParameter("url");
+        if (!"mopubnativebrowser".equals(uri.getScheme()) || !"navigate".equals(uri.getHost())
+                || urlToOpenInNativeBrowser == null) return false;
+
+        Uri intentUri = Uri.parse(urlToOpenInNativeBrowser);
+
+        if (intentUri == null) { return false; }
+
+        try{
+            Intent iNativeBrowser = new Intent(Intent.ACTION_VIEW, intentUri);
+            iNativeBrowser.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+            mContext.startActivity(iNativeBrowser);
+            mHtmlWebViewListener.onClicked();
+        } catch (ActivityNotFoundException e){
+            Log.w("MoPub", "Could not handle intent with URI: " + url + ". Is this intent unsupported on your phone?");
+        }
+
+        return true;
+    }
+
     private boolean isPhoneIntent(String url) {
         return url.startsWith("tel:") || url.startsWith("voicemail:") ||
                 url.startsWith("sms:") || url.startsWith("mailto:") ||
                 url.startsWith("geo:") || url.startsWith("google.streetview:");
     }
 
+    private boolean isApplicationUrl(String url) {
+        return isMarketUrl(url) || isAmazonUrl(url);
+    }
+
     private boolean isMarketUrl(String url) {
         return url.startsWith("market://");
     }
 
-    private boolean canHandleMarketUrl(String url) {
+    private boolean isAmazonUrl(String url) {
+        return url.startsWith("amzn://");
+    }
+
+    private boolean canHandleApplicationUrl(String url) {
         // Determine which activities can handle the market intent
         Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
         PackageManager packageManager = mContext.getPackageManager();
@@ -112,9 +147,9 @@ private boolean canHandleMarketUrl(String url) {
         // If there are no relevant activities, don't follow the link
         boolean isIntentSafe = activities.size() > 0;
         if (!isIntentSafe) {
-            Log.w("MoPub", "Could not handle market action: " + url
-                    + ". Perhaps you're running in the emulator, which does not have "
-                    + "the Android Market?");
+            Log.w("MoPub", "Could not handle application specific action: " + url + ". " +
+                    "You may be running in the emulator or another device which does not " +
+                    "have the required application.");
             return false;
         }
 
@@ -130,6 +165,12 @@ private String urlWithClickTrackingRedirect(String url) {
         }
     }
 
+    private void launchApplicationUrl(String url) {
+        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
+        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        mContext.startActivity(intent);
+    }
+
     private void showBrowserForUrl(String url) {
         if (url == null || url.equals("")) url = "about:blank";
         Log.d("MoPub", "Final URI to show in browser: " + url);
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPub.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPub.java
index 6d90d35d..85a7a42c 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPub.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPub.java
@@ -33,6 +33,6 @@
 package com.mopub.mobileads;
 
 public class MoPub {
-    public static final String SDK_VERSION = "1.14.1.0";
+    public static final String SDK_VERSION = "1.15.1.1";
 }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubActivity.java
index ad852177..a216bf23 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubActivity.java
@@ -32,8 +32,10 @@
 
 package com.mopub.mobileads;
 
+import android.content.ActivityNotFoundException;
 import android.content.Context;
 import android.content.Intent;
+import android.util.Log;
 import android.view.View;
 import com.mopub.mobileads.factories.HtmlInterstitialWebViewFactory;
 
@@ -48,7 +50,11 @@
 
     public static void start(Context context, String htmlData, boolean isScrollable, String redirectUrl, String clickthroughUrl) {
         Intent intent = createIntent(context, htmlData, isScrollable, redirectUrl, clickthroughUrl);
-        context.startActivity(intent);
+        try {
+            context.startActivity(intent);
+        } catch (ActivityNotFoundException anfe) {
+            Log.d("MoPubActivity", "MoPubActivity not found - did you declare it in AndroidManifest.xml?");
+        }
     }
 
     public static Intent createIntent(Context context, String htmlData, boolean isScrollable, String redirectUrl, String clickthroughUrl) {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
index 829fd686..bd70c947 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
@@ -38,7 +38,6 @@
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.location.Location;
-import android.os.Build;
 import android.util.AttributeSet;
 import android.util.Log;
 import android.view.View;
@@ -47,8 +46,6 @@
 import com.mopub.mobileads.factories.AdViewControllerFactory;
 import com.mopub.mobileads.factories.CustomEventBannerAdapterFactory;
 
-import java.lang.reflect.Constructor;
-import java.lang.reflect.InvocationTargetException;
 import java.util.Collections;
 import java.util.Map;
 
@@ -57,7 +54,7 @@
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
 
 public class MoPubView extends FrameLayout {
-    
+
     public interface BannerAdListener {
         public void onBannerLoaded(MoPubView banner);
         public void onBannerFailed(MoPubView banner, MoPubErrorCode errorCode);
@@ -65,7 +62,7 @@
         public void onBannerExpanded(MoPubView banner);
         public void onBannerCollapsed(MoPubView banner);
     }
-    
+
     public enum LocationAwareness {
         LOCATION_AWARENESS_NORMAL, LOCATION_AWARENESS_TRUNCATED, LOCATION_AWARENESS_DISABLED
     }
@@ -77,7 +74,7 @@
 
     protected AdViewController mAdViewController;
     protected CustomEventBannerAdapter mCustomEventBannerAdapter;
-    
+
     private Context mContext;
     private BroadcastReceiver mScreenStateReceiver;
     private boolean mIsInForeground;
@@ -108,7 +105,7 @@ public MoPubView(Context context, AttributeSet attrs) {
         
         setHorizontalScrollBarEnabled(false);
         setVerticalScrollBarEnabled(false);
-        
+
         // There is a rare bug in Froyo/2.2 where creation of a WebView causes a
         // NullPointerException. (http://code.google.com/p/android/issues/detail?id=10789)
         // It happens when the WebView can't access the local file store to make a cache file.
@@ -120,57 +117,14 @@ public MoPubView(Context context, AttributeSet attrs) {
                     "http://code.google.com/p/android/issues/detail?id=10789");
             return;
         }
-        
-        initVersionDependentAdView(context);
-        registerScreenStateBroadcastReceiver();
-    }
-    
-    private void initVersionDependentAdView(Context context) {
-        int sdkVersion = (new Integer(Build.VERSION.SDK)).intValue();
-        if (sdkVersion < 7) {
-        	mAdViewController = AdViewControllerFactory.create(context, this);
-        } else {
-            // On Android 2.1 (Eclair) and up, try to load our HTML5-enabled AdViewController class.
-            Class<?> HTML5AdViewClass = null;
-            try {
-                HTML5AdViewClass = (Class<?>) Class.forName("com.mopub.mobileads.HTML5AdView");
-            } catch (ClassNotFoundException e) {
-                mAdViewController = AdViewControllerFactory.create(context, this);
-                return;
-            } 
-
-            Class<?>[] parameterTypes = new Class[2];
-            parameterTypes[0] = Context.class;
-            parameterTypes[1] = MoPubView.class;
-
-            Object[] args = new Object[2];
-            args[0] = context;
-            args[1] = this;
-
-            try {
-                Constructor<?> constructor = HTML5AdViewClass.getConstructor(parameterTypes);
-                mAdViewController = (AdViewController) constructor.newInstance(args);
-            } catch (SecurityException e) {
-                Log.e("MoPub", "Could not load HTML5AdView.");
-            } catch (NoSuchMethodException e) {
-                Log.e("MoPub", "Could not load HTML5AdView.");
-            } catch (IllegalArgumentException e) {
-                Log.e("MoPub", "Could not load HTML5AdView.");
-            } catch (InstantiationException e) {
-                Log.e("MoPub", "Could not load HTML5AdView.");
-            } catch (IllegalAccessException e) {
-                Log.e("MoPub", "Could not load HTML5AdView.");
-            } catch (InvocationTargetException e) {
-                Log.e("MoPub", "Could not load HTML5AdView.");
-            }
 
-            if (mAdViewController == null) mAdViewController = AdViewControllerFactory.create(context, this);
-        }
+        mAdViewController = AdViewControllerFactory.create(context, this);
+        registerScreenStateBroadcastReceiver();
     }
 
     private void registerScreenStateBroadcastReceiver() {
         if (mAdViewController == null) return;
-        
+
         mScreenStateReceiver = new BroadcastReceiver() {
             public void onReceive(Context context, Intent intent) {
                 if (intent.getAction().equals(Intent.ACTION_SCREEN_OFF)) {
@@ -181,7 +135,7 @@ public void onReceive(Context context, Intent intent) {
                             mAdViewController.setAutorefreshEnabled(false);
                         }
                     } else {
-                        Log.d("MoPub", "Screen sleep but ad in background; " + 
+                        Log.d("MoPub", "Screen sleep but ad in background; " +
                                 "refresh should already be disabled");
                     }
                 } else if (intent.getAction().equals(Intent.ACTION_USER_PRESENT)) {
@@ -200,7 +154,7 @@ public void onReceive(Context context, Intent intent) {
         filter.addAction(Intent.ACTION_USER_PRESENT);
         mContext.registerReceiver(mScreenStateReceiver, filter);
     }
-    
+
     private void unregisterScreenStateBroadcastReceiver() {
         try {
             mContext.unregisterReceiver(mScreenStateReceiver);
@@ -208,11 +162,11 @@ private void unregisterScreenStateBroadcastReceiver() {
             Log.d("MoPub", "Failed to unregister screen state broadcast receiver (never registered).");
         }
     }
-    
+
     public void loadAd() {
         if (mAdViewController != null) mAdViewController.loadAd();
     }
-    
+
     /*
      * Tears down the ad view: no ads will be shown once this method executes. The parent
      * Activity's onDestroy implementation must include a call to this method.
@@ -220,12 +174,12 @@ public void loadAd() {
     public void destroy() {
         unregisterScreenStateBroadcastReceiver();
         removeAllViews();
-        
+
         if (mAdViewController != null) {
             mAdViewController.cleanup();
             mAdViewController = null;
         }
-        
+
         if (mCustomEventBannerAdapter != null) {
             mCustomEventBannerAdapter.invalidate();
             mCustomEventBannerAdapter = null;
@@ -269,11 +223,11 @@ protected void trackNativeImpression() {
         Log.d("MoPub", "Tracking impression for native adapter.");
         if (mAdViewController != null) mAdViewController.trackImpression();
     }
-    
+
     @Override
     protected void onWindowVisibilityChanged(int visibility) {
         if (mAdViewController == null) return;
-        
+
         if (visibility == VISIBLE) {
             Log.d("MoPub", "Ad Unit ("+ mAdViewController.getAdUnitId()+") going visible: enabling refresh");
             mIsInForeground = true;
@@ -311,7 +265,7 @@ protected void adPresentedOverlay() {
             mOnAdPresentedOverlayListener.OnAdPresentedOverlay(this);
         }
     }
-    
+
     protected void adClosed() {
         if (mBannerAdListener != null) {
             mBannerAdListener.onBannerCollapsed(this);
@@ -327,18 +281,18 @@ protected void adClicked() {
             mOnAdClickedListener.OnAdClicked(this);
         }
     }
-    
+
     protected void nativeAdLoaded() {
         if (mAdViewController != null) mAdViewController.scheduleRefreshTimerIfEnabled();
         adLoaded();
     }
-    
+
     ////////////////////////////////////////////////////////////////////////////////////////////////
 
     public void setAdUnitId(String adUnitId) {
         if (mAdViewController != null) mAdViewController.setAdUnitId(adUnitId);
     }
-    
+
     public void setKeywords(String keywords) {
         if (mAdViewController != null) mAdViewController.setKeywords(keywords);
     }
@@ -370,11 +324,11 @@ public int getAdHeight() {
     public String getResponseString() {
         return (mAdViewController != null) ? mAdViewController.getResponseString() : null;
     }
-    
+
     public void setClickthroughUrl(String url) {
         if (mAdViewController != null) mAdViewController.setClickthroughUrl(url);
     }
-    
+
     public String getClickthroughUrl() {
         return (mAdViewController != null) ? mAdViewController.getClickthroughUrl() : null;
     }
@@ -382,15 +336,15 @@ public String getClickthroughUrl() {
     public Activity getActivity() {
         return (Activity) mContext;
     }
-    
+
     public void setBannerAdListener(BannerAdListener listener) {
         mBannerAdListener = listener;
     }
-    
+
     public BannerAdListener getBannerAdListener() {
         return mBannerAdListener;
     }
-    
+
     public void setLocationAwareness(LocationAwareness awareness) {
         mLocationAwareness = awareness;
     }
@@ -406,131 +360,131 @@ public void setLocationPrecision(int precision) {
     public int getLocationPrecision() {
         return mLocationPrecision;
     }
-    
+
     public void setLocalExtras(Map<String, Object> localExtras) {
         if (mAdViewController != null) mAdViewController.setLocalExtras(localExtras);
     }
-    
+
     public Map<String, Object> getLocalExtras() {
         if (mAdViewController != null) return mAdViewController.getLocalExtras();
         return Collections.emptyMap();
     }
-    
+
     public void setAutorefreshEnabled(boolean enabled) {
         if (mAdViewController != null) mAdViewController.setAutorefreshEnabled(enabled);
     }
-    
+
     public boolean getAutorefreshEnabled() {
         if (mAdViewController != null) return mAdViewController.getAutorefreshEnabled();
         else {
-            Log.d("MoPub", "Can't get autorefresh status for destroyed MoPubView. " + 
+            Log.d("MoPub", "Can't get autorefresh status for destroyed MoPubView. " +
                     "Returning false.");
             return false;
         }
     }
-    
+
     public void setAdContentView(View view) {
         if (mAdViewController != null) mAdViewController.setAdContentView(view);
     }
-    
+
     public void setTesting(boolean testing) {
         if (mAdViewController != null) mAdViewController.setTesting(testing);
     }
-    
+
     public boolean getTesting() {
         if (mAdViewController != null) return mAdViewController.getTesting();
         else {
-            Log.d("MoPub", "Can't get testing status for destroyed MoPubView. " + 
+            Log.d("MoPub", "Can't get testing status for destroyed MoPubView. " +
                     "Returning false.");
             return false;
         }
     }
-    
+
     public void forceRefresh() {
         if (mCustomEventBannerAdapter != null) {
             mCustomEventBannerAdapter.invalidate();
             mCustomEventBannerAdapter = null;
         }
-        
+
         if (mAdViewController != null) mAdViewController.forceRefresh();
     }
-    
+
     @Deprecated
     public interface OnAdWillLoadListener {
         public void OnAdWillLoad(MoPubView m, String url);
     }
-    
+
     @Deprecated
     public interface OnAdLoadedListener {
         public void OnAdLoaded(MoPubView m);
     }
-    
+
     @Deprecated
     public interface OnAdFailedListener {
         public void OnAdFailed(MoPubView m);
     }
-    
+
     @Deprecated
     public interface OnAdClosedListener {
         public void OnAdClosed(MoPubView m);
     }
-    
+
     @Deprecated
     public interface OnAdClickedListener {
         public void OnAdClicked(MoPubView m);
     }
-    
+
     @Deprecated
     public interface OnAdPresentedOverlayListener {
         public void OnAdPresentedOverlay(MoPubView m);
     }
-    
+
     @Deprecated
     public void setOnAdWillLoadListener(OnAdWillLoadListener listener) {
         mOnAdWillLoadListener = listener;
     }
-    
+
     @Deprecated
     public void setOnAdLoadedListener(OnAdLoadedListener listener) {
         mOnAdLoadedListener = listener;
     }
-    
+
     @Deprecated
     public void setOnAdFailedListener(OnAdFailedListener listener) {
         mOnAdFailedListener = listener;
     }
-    
+
     @Deprecated
     public void setOnAdPresentedOverlayListener(OnAdPresentedOverlayListener listener) {
         mOnAdPresentedOverlayListener = listener;
     }
-    
+
     @Deprecated
     public void setOnAdClosedListener(OnAdClosedListener listener) {
         mOnAdClosedListener = listener;
     }
-    
+
     @Deprecated
     public void setOnAdClickedListener(OnAdClickedListener listener) {
         mOnAdClickedListener = listener;
     }
-    
+
     @Deprecated
     protected void adWillLoad(String url) {
         Log.d("MoPub", "adWillLoad: " + url);
         if (mOnAdWillLoadListener != null) mOnAdWillLoadListener.OnAdWillLoad(this, url);
     }
-    
+
     @Deprecated
     public void customEventDidLoadAd() {
         if (mAdViewController != null) mAdViewController.customEventDidLoadAd();
     }
-    
+
     @Deprecated
     public void customEventDidFailToLoadAd() {
         if (mAdViewController != null) mAdViewController.customEventDidFailToLoadAd();
     }
-    
+
     @Deprecated
     public void customEventActionWillBegin() {
         if (mAdViewController != null) mAdViewController.customEventActionWillBegin();
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java
index 52e0c2e9..9ad06073 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java
@@ -11,6 +11,8 @@
 import com.mopub.mobileads.util.WebViews;
 
 import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
+import static com.mopub.mobileads.util.VersionCode.ICE_CREAM_SANDWICH;
+import static com.mopub.mobileads.util.VersionCode.currentApiLevel;
 
 public class MraidActivity extends BaseInterstitialActivity {
     private MraidView mMraidView;
@@ -20,22 +22,27 @@ public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         broadcastInterstitialAction(ACTION_INTERSTITIAL_SHOW);
 
-        getWindow().setFlags(
-                WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED,
-                WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
+        if (currentApiLevel().isAtLeast(ICE_CREAM_SANDWICH)) {
+            getWindow().setFlags(
+                    WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED,
+                    WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
+        }
     }
 
     @Override
     public View getAdView() {
         mMraidView = MraidViewFactory.create(this, ExpansionStyle.DISABLED, NativeCloseButtonStyle.AD_CONTROLLED,
                 PlacementType.INTERSTITIAL);
-        
-        mMraidView.setOnReadyListener(new MraidView.OnReadyListener() {
+
+        mMraidView.setMraidListener(new MraidView.BaseMraidListener(){
             public void onReady(MraidView view) {
                 showInterstitialCloseButton();
             }
+            public void onClose(MraidView view, ViewState newViewState) {
+                finish();
+            }
         });
-        
+
         mMraidView.setOnCloseButtonStateChange(new MraidView.OnCloseButtonStateChangeListener() {
             public void onCloseButtonStateChange(MraidView view, boolean enabled) {
                 if (enabled) {
@@ -45,16 +52,10 @@ public void onCloseButtonStateChange(MraidView view, boolean enabled) {
                 }
             }
         });
-        
-        mMraidView.setOnCloseListener(new MraidView.OnCloseListener() {
-            public void onClose(MraidView view, ViewState newViewState) {
-                finish();
-            }
-        });
-        
+
         String source = getIntent().getStringExtra(HTML_RESPONSE_BODY_KEY);
         mMraidView.loadHtmlData(source);
-        
+
         return mMraidView;
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidBanner.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidBanner.java
index 8ab675d6..246694a1 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidBanner.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidBanner.java
@@ -41,6 +41,7 @@
 
 import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.MoPubErrorCode.MRAID_LOAD_ERROR;
+import static com.mopub.mobileads.MraidView.MraidListener;
 
 class MraidBanner extends CustomEventBanner {
     private MraidView mMraidView;
@@ -63,31 +64,31 @@ protected void loadBanner(Context context,
 
         mMraidView = MraidViewFactory.create(context);
         mMraidView.loadHtmlData(htmlData);
-        initMraidListeners();
+        initMraidListener();
     }
 
     @Override
     protected void onInvalidate() {
         if (mMraidView != null) {
-            resetMraidListeners();
+            resetMraidListener();
             mMraidView.destroy();
         }
     }
 
-    void onReady() {
+    private void onReady() {
         mBannerListener.onBannerLoaded(mMraidView);
     }
 
-    void onFail() {
+    private void onFail() {
         mBannerListener.onBannerFailed(MRAID_LOAD_ERROR);
     }
 
-    void onExpand() {
+    private void onExpand() {
         mBannerListener.onBannerExpanded();
         mBannerListener.onBannerClicked();
     }
 
-    void onClose() {
+    private void onClose() {
         mBannerListener.onBannerCollapsed();
     }
 
@@ -95,36 +96,24 @@ private boolean extrasAreValid(Map<String, String> serverExtras) {
         return serverExtras.containsKey(HTML_RESPONSE_BODY_KEY);
     }
 
-    private void initMraidListeners() {
-        mMraidView.setOnReadyListener(new MraidView.OnReadyListener() {
+    private void initMraidListener() {
+        mMraidView.setMraidListener(new MraidListener() {
             public void onReady(MraidView view) {
                 MraidBanner.this.onReady();
             }
-        });
-
-        mMraidView.setOnFailureListener(new MraidView.OnFailureListener() {
             public void onFailure(MraidView view) {
                 onFail();
             }
-        });
-
-        mMraidView.setOnExpandListener(new MraidView.OnExpandListener() {
             public void onExpand(MraidView view) {
                 MraidBanner.this.onExpand();
             }
-        });
-
-        mMraidView.setOnCloseListener(new MraidView.OnCloseListener() {
             public void onClose(MraidView view, ViewState newViewState) {
                 MraidBanner.this.onClose();
             }
         });
     }
 
-    private void resetMraidListeners() {
-        mMraidView.setOnReadyListener(null);
-        mMraidView.setOnFailureListener(null);
-        mMraidView.setOnExpandListener(null);
-        mMraidView.setOnCloseListener(null);
+    private void resetMraidListener() {
+        mMraidView.setMraidListener(null);
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidCommand.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidCommand.java
index 19cfe523..48e37a63 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidCommand.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidCommand.java
@@ -1,8 +1,14 @@
 package com.mopub.mobileads;
 
+import android.util.Log;
+
 import java.util.Map;
 
+import static com.mopub.mobileads.MraidCommandRegistry.MRAID_JAVASCRIPT_COMMAND_PLAY_VIDEO;
+import static com.mopub.mobileads.MraidCommandRegistry.MRAID_JAVASCRIPT_COMMAND_STORE_PICTURE;
+
 abstract class MraidCommand {
+    protected static final String URI_KEY = "uri";
     protected Map<String, String> mParams;
     protected MraidView mView;
     
@@ -44,6 +50,44 @@ protected float getFloatFromParamsForKey(String key) {
     protected boolean getBooleanFromParamsForKey(String key) {
         return "true".equals(mParams.get(key));
     }
+
+}
+
+class MraidCommandPlayVideo extends MraidCommand {
+    public MraidCommandPlayVideo(Map<String,String> params, MraidView view) {
+        super(params, view);
+    }
+
+    @Override
+    void execute() {
+        String url = getStringFromParamsForKey(URI_KEY);
+        if (url != null && !url.equals("")){
+            mView.getDisplayController().showVideo(url);
+        } else {
+            mView.fireErrorEvent(MRAID_JAVASCRIPT_COMMAND_PLAY_VIDEO, "Video can't be played with null or empty URL");
+        }
+    }
+}
+
+class MraidCommandStorePicture extends MraidCommand {
+    public static final String MIME_TYPE_HEADER = "Content-Type";
+
+    public MraidCommandStorePicture(Map<String,String> params, MraidView view) {
+        super(params, view);
+    }
+
+    @Override
+    void execute() {
+        String url = getStringFromParamsForKey(URI_KEY);
+
+        if (url != null && !url.equals("")) {
+            mView.getDisplayController().showUserDownloadImageAlert(url);
+        } else {
+            mView.fireErrorEvent(MRAID_JAVASCRIPT_COMMAND_STORE_PICTURE, "Image can't be stored with null or empty URL");
+            Log.d("MoPub", "Invalid URI for Mraid Store Picture.");
+            return;
+        }
+    }
 }
 
 class MraidCommandClose extends MraidCommand {
@@ -97,3 +141,86 @@ void execute() {
         mView.getBrowserController().open(url);
     }
 }
+
+//As of version 1.15, we've decided to stub the resize command. However, this should be implemented in future versions
+class MraidCommandResize extends MraidCommand {
+    MraidCommandResize(Map<String, String> params, MraidView view) {
+        super(params, view);
+    }
+
+    void execute() {
+        mView.fireErrorEvent(MraidCommandRegistry.MRAID_JAVASCRIPT_COMMAND_RESIZE, "Unsupported action resize.");
+    }
+}
+
+class MraidCommandGetResizeProperties extends MraidCommand {
+    MraidCommandGetResizeProperties(Map<String, String> params, MraidView view) {
+        super(params, view);
+    }
+
+    void execute() {
+        mView.fireErrorEvent(MraidCommandRegistry.MRAID_JAVASCRIPT_COMMAND_GET_RESIZE_PROPERTIES, "Unsupported action getResizeProperties.");
+    }
+}
+
+class MraidCommandSetResizeProperties extends MraidCommand {
+    MraidCommandSetResizeProperties(Map<String, String> params, MraidView view) {
+        super(params, view);
+    }
+
+    void execute() {
+        mView.fireErrorEvent(MraidCommandRegistry.MRAID_JAVASCRIPT_COMMAND_SET_RESIZE_PROPERTIES, "Unsupported action setResizeProperties.");
+    }
+}
+
+class MraidCommandGetCurrentPosition extends MraidCommand {
+    MraidCommandGetCurrentPosition(Map<String, String> params, MraidView view) {
+        super(params, view);
+    }
+
+    void execute() {
+        mView.getDisplayController().getCurrentPosition();
+    }
+}
+
+
+class MraidCommandGetDefaultPosition extends MraidCommand {
+    MraidCommandGetDefaultPosition(Map<String, String> params, MraidView view) {
+        super(params, view);
+    }
+
+    void execute() {
+        mView.getDisplayController().getDefaultPosition();
+    }
+}
+
+class MraidCommandGetMaxSize extends MraidCommand {
+    MraidCommandGetMaxSize(Map<String, String> params, MraidView view) {
+        super(params, view);
+    }
+
+    void execute() {
+        mView.getDisplayController().getMaxSize();
+    }
+}
+
+class MraidCommandGetScreenSize extends MraidCommand {
+    MraidCommandGetScreenSize(Map<String, String> params, MraidView view) {
+        super(params, view);
+    }
+
+    void execute() {
+        mView.getDisplayController().getScreenSize();
+    }
+}
+
+class MraidCommandCreateCalendarEvent extends MraidCommand {
+    MraidCommandCreateCalendarEvent(Map<String, String> params, MraidView view) {
+        super(params, view);
+    }
+
+    void execute() {
+        mView.getDisplayController().createCalendarEvent(mParams);
+    }
+}
+
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidCommandRegistry.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidCommandRegistry.java
index 68d6bc14..fcd3b7f3 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidCommandRegistry.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidCommandRegistry.java
@@ -1,43 +1,68 @@
 package com.mopub.mobileads;
 
-import java.util.HashMap;
 import java.util.Map;
 
 class MraidCommandRegistry {
-    private static Map<String, MraidCommandFactory> commandMap =
-        new HashMap<String, MraidCommandFactory>();
-    static {
-        commandMap.put("close", new MraidCommandFactory() {
-            public MraidCommand create(Map<String, String> params, MraidView view) {
-                return new MraidCommandClose(params, view);
-            }
-        });
-        
-        commandMap.put("expand", new MraidCommandFactory() {
-            public MraidCommand create(Map<String, String> params, MraidView view) {
-                return new MraidCommandExpand(params, view);
-            }
-        });
-        
-        commandMap.put("usecustomclose", new MraidCommandFactory() {
-            public MraidCommand create(Map<String, String> params, MraidView view) {
-                return new MraidCommandUseCustomClose(params, view);
-            }
-        });
-        
-        commandMap.put("open", new MraidCommandFactory() {
-            public MraidCommand create(Map<String, String> params, MraidView view) {
-                return new MraidCommandOpen(params, view);
-            }
-        });
-    }
-    
-    static MraidCommand createCommand(String string, Map<String, String> params, MraidView view) {
-        MraidCommandFactory factory = commandMap.get(string);
-        return (factory != null) ? factory.create(params, view) : null;
-    }
-    
-    private interface MraidCommandFactory {
-        public MraidCommand create(Map<String, String> params, MraidView view);
+
+    public static final String MRAID_JAVASCRIPT_COMMAND_CLOSE = "close";
+    public static final String MRAID_JAVASCRIPT_COMMAND_EXPAND = "expand";
+    public static final String MRAID_JAVASCRIPT_COMMAND_USECUSTOMCLOSE = "usecustomclose";
+    public static final String MRAID_JAVASCRIPT_COMMAND_OPEN = "open";
+    public static final String MRAID_JAVASCRIPT_COMMAND_RESIZE = "resize";
+    public static final String MRAID_JAVASCRIPT_COMMAND_GET_RESIZE_PROPERTIES = "getResizeProperties";
+    public static final String MRAID_JAVASCRIPT_COMMAND_SET_RESIZE_PROPERTIES = "setResizeProperties";
+    public static final String MRAID_JAVASCRIPT_COMMAND_PLAY_VIDEO = "playVideo";
+    public static final String MRAID_JAVASCRIPT_COMMAND_STORE_PICTURE = "storePicture";
+    public static final String MRAID_JAVASCRIPT_COMMAND_GET_CURRENT_POSITION = "getCurrentPosition";
+    public static final String MRAID_JAVASCRIPT_COMMAND_GET_DEFAULT_POSITION = "getDefaultPosition";
+    public static final String MRAID_JAVASCRIPT_COMMAND_GET_MAX_SIZE = "getMaxSize";
+    public static final String MRAID_JAVASCRIPT_COMMAND_GET_SCREEN_SIZE = "getScreenSize";
+    public static final String MRAID_JAVASCRIPT_COMMAND_CREATE_CALENDAR_EVENT = "createCalendarEvent";
+
+    static MraidCommand createCommand(String command, Map<String, String> params, MraidView view) {
+        if (MRAID_JAVASCRIPT_COMMAND_CLOSE.equals(command)) {
+            return new MraidCommandClose(params, view);
+        }
+        if (MRAID_JAVASCRIPT_COMMAND_EXPAND.equals(command)) {
+            return new MraidCommandExpand(params, view);
+        }
+        if (MRAID_JAVASCRIPT_COMMAND_USECUSTOMCLOSE.equals(command)) {
+            return new MraidCommandUseCustomClose(params, view);
+        }
+        if (MRAID_JAVASCRIPT_COMMAND_OPEN.equals(command)) {
+            return new MraidCommandOpen(params, view);
+        }
+        if (MRAID_JAVASCRIPT_COMMAND_RESIZE.equals(command)) {
+            return new MraidCommandResize(params, view);
+        }
+        if (MRAID_JAVASCRIPT_COMMAND_GET_RESIZE_PROPERTIES.equals(command)) {
+            return new MraidCommandGetResizeProperties(params, view);
+        }
+        if (MRAID_JAVASCRIPT_COMMAND_SET_RESIZE_PROPERTIES.equals(command)) {
+            return new MraidCommandSetResizeProperties(params, view);
+        }
+        if (MRAID_JAVASCRIPT_COMMAND_PLAY_VIDEO.equals(command)) {
+            return new MraidCommandPlayVideo(params, view);
+        }
+        if (MRAID_JAVASCRIPT_COMMAND_STORE_PICTURE.equals(command)) {
+            return new MraidCommandStorePicture(params, view);
+        }
+        if (MRAID_JAVASCRIPT_COMMAND_GET_CURRENT_POSITION.equals(command)) {
+            return new MraidCommandGetCurrentPosition(params, view);
+        }
+        if (MRAID_JAVASCRIPT_COMMAND_GET_DEFAULT_POSITION.equals(command)) {
+            return new MraidCommandGetDefaultPosition(params, view);
+        }
+        if (MRAID_JAVASCRIPT_COMMAND_GET_MAX_SIZE.equals(command)) {
+            return new MraidCommandGetMaxSize(params, view);
+        }
+        if (MRAID_JAVASCRIPT_COMMAND_GET_SCREEN_SIZE.equals(command)) {
+            return new MraidCommandGetScreenSize(params, view);
+        }
+        if (MRAID_JAVASCRIPT_COMMAND_CREATE_CALENDAR_EVENT.equals(command)) {
+            return new MraidCommandCreateCalendarEvent(params, view);
+        }
+
+        return null;
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java
index 0b098f0f..e34f1283 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java
@@ -1,43 +1,67 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.content.IntentFilter;
+import android.app.AlertDialog;
+import android.content.*;
 import android.content.pm.ActivityInfo;
 import android.graphics.Color;
 import android.graphics.Rect;
 import android.graphics.drawable.StateListDrawable;
+import android.media.MediaScannerConnection;
+import android.net.Uri;
+import android.os.Environment;
 import android.os.Handler;
+import android.provider.CalendarContract;
 import android.util.DisplayMetrics;
 import android.util.Log;
 import android.view.*;
 import android.view.View.OnClickListener;
 import android.view.View.OnTouchListener;
 import android.webkit.URLUtil;
-import android.widget.FrameLayout;
-import android.widget.ImageButton;
-import android.widget.ImageView;
-import android.widget.RelativeLayout;
+import android.widget.*;
 import com.mopub.mobileads.MraidView.ExpansionStyle;
 import com.mopub.mobileads.MraidView.NativeCloseButtonStyle;
 import com.mopub.mobileads.MraidView.PlacementType;
 import com.mopub.mobileads.MraidView.ViewState;
+import com.mopub.mobileads.factories.HttpClientFactory;
+import com.mopub.mobileads.util.HttpResponses;
+import com.mopub.mobileads.util.MraidUtils;
+import com.mopub.mobileads.util.Streams;
+import org.apache.http.Header;
+import org.apache.http.HttpResponse;
+import org.apache.http.client.HttpClient;
+import org.apache.http.client.methods.HttpGet;
 
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.net.URI;
+import java.security.InvalidParameterException;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
 import java.util.ArrayList;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.Map;
 
+import static com.mopub.mobileads.MraidCommandRegistry.*;
+import static com.mopub.mobileads.MraidCommandStorePicture.MIME_TYPE_HEADER;
+import static com.mopub.mobileads.MraidView.BaseMraidListener;
 import static com.mopub.mobileads.resource.Drawables.INTERSTITIAL_CLOSE_BUTTON_NORMAL;
 import static com.mopub.mobileads.resource.Drawables.INTERSTITIAL_CLOSE_BUTTON_PRESSED;
+import static com.mopub.mobileads.util.MraidUtils.*;
 
 class MraidDisplayController extends MraidAbstractController {
     private static final String LOGTAG = "MraidDisplayController";
     private static final long VIEWABILITY_TIMER_MILLIS = 3000;
     private static final int CLOSE_BUTTON_SIZE_DP = 50;
-    
+    private static final String DATE_FORMAT = "yyyy-MM-dd'T'HH:mm:ssZZZZZ";
+    private static final int MAX_NUMBER_DAYS_IN_MONTH = 31;
+
     // The view's current state.
     private ViewState mViewState = ViewState.HIDDEN;
-    
+
     // Tracks whether this controller's view responds to expand() calls.
     private final ExpansionStyle mExpansionStyle;
 
@@ -46,13 +70,13 @@
 
     // Separate instance of MraidView, for displaying "two-part" creatives via the expand(URL) API.
     private MraidView mTwoPartExpansionView;
-    
+
     // A reference to the root view.
     private FrameLayout mRootView;
-    
+
     // Tracks whether this controller's view is currently on-screen.
     private boolean mIsViewable;
-    
+
     // Task that periodically checks whether this controller's view is on-screen.
     private Runnable mCheckViewabilityTask = new Runnable() {
         public void run() {
@@ -65,62 +89,49 @@ public void run() {
             mHandler.postDelayed(this, VIEWABILITY_TIMER_MILLIS);
         }
     };
-    
+
     // Handler for scheduling viewability checks.
     private Handler mHandler = new Handler();
-    
+
     // Stores the requested orientation for the Activity to which this controller's view belongs.
     // This is needed to restore the Activity's requested orientation in the event that the view
     // itself requires an orientation lock.
     private final int mOriginalRequestedOrientation;
-    
-    private BroadcastReceiver mOrientationBroadcastReceiver = new BroadcastReceiver() {
-        private int mLastRotation;
-        
-        public void onReceive(Context context, Intent intent) {
-            String action = intent.getAction();
-            if (action.equals(Intent.ACTION_CONFIGURATION_CHANGED)) {
-                int orientation = MraidDisplayController.this.getDisplayRotation();
-                if (orientation != mLastRotation) {
-                    mLastRotation = orientation;
-                    MraidDisplayController.this.onOrientationChanged(mLastRotation);
-                }
-            }
-        }
-    };
-    
+
+    private OrientationBroadcastReceiver mOrientationBroadcastReceiver = new OrientationBroadcastReceiver();
+
     // Native close button, used for expanded content.
     private ImageView mCloseButton;
-    
+
     // Tracks whether expanded content provides its own, non-native close button.
     private boolean mAdWantsCustomCloseButton;
-    
+
     // The scale factor for a dip (relative to a 160 dpi screen).
     protected float mDensity;
-    
+
     // The width of the screen in pixels.
     protected int mScreenWidth = -1;
-    
+
     // The height of the screen in pixels.
     protected int mScreenHeight = -1;
-    
+
     // The view's position within its parent.
     private int mViewIndexInParent;
-    
+
     // A view that replaces the MraidView within its parent view when the MraidView is expanded
     // (i.e. moved to the top of the view hierarchy).
     private FrameLayout mPlaceholderView;
     private FrameLayout mAdContainerLayout;
     private RelativeLayout mExpansionLayout;
 
-    MraidDisplayController(MraidView view, MraidView.ExpansionStyle expStyle, 
+    MraidDisplayController(MraidView view, MraidView.ExpansionStyle expStyle,
             MraidView.NativeCloseButtonStyle buttonStyle) {
         super(view);
         mExpansionStyle = expStyle;
         mNativeCloseButtonStyle = buttonStyle;
-        
-        Context context = getMraidView().getContext();
-        mOriginalRequestedOrientation = (context instanceof Activity) ? 
+
+        Context context = getContext();
+        mOriginalRequestedOrientation = (context instanceof Activity) ?
                 ((Activity) context).getRequestedOrientation() :
                 ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED;
 
@@ -130,17 +141,16 @@ public void onReceive(Context context, Intent intent) {
 
         initialize();
     }
-    
+
     private void initialize() {
         mViewState = ViewState.LOADING;
         initializeScreenMetrics();
         initializeViewabilityTimer();
-        getMraidView().getContext().registerReceiver(mOrientationBroadcastReceiver,
-                new IntentFilter(Intent.ACTION_CONFIGURATION_CHANGED));
+        mOrientationBroadcastReceiver.register(getContext());
     }
-    
+
     private void initializeScreenMetrics() {
-        Context context = getMraidView().getContext();
+        Context context = getContext();
         DisplayMetrics metrics = new DisplayMetrics();
         WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
         wm.getDefaultDisplay().getMetrics(metrics);
@@ -156,55 +166,56 @@ private void initializeScreenMetrics() {
             int contentViewTop = window.findViewById(Window.ID_ANDROID_CONTENT).getTop();
             titleBarHeight = contentViewTop - statusBarHeight;
         }
-        
+
         int widthPixels = metrics.widthPixels;
         int heightPixels = metrics.heightPixels - statusBarHeight - titleBarHeight;
         mScreenWidth = (int) (widthPixels * (160.0 / metrics.densityDpi));
         mScreenHeight = (int) (heightPixels * (160.0 / metrics.densityDpi));
     }
-    
+
     private void initializeViewabilityTimer() {
         mHandler.removeCallbacks(mCheckViewabilityTask);
         mHandler.post(mCheckViewabilityTask);
     }
-    
+
     private int getDisplayRotation() {
-        WindowManager wm = (WindowManager) getMraidView().getContext()
+        WindowManager wm = (WindowManager) getContext()
                 .getSystemService(Context.WINDOW_SERVICE);
         return wm.getDefaultDisplay().getOrientation();
     }
-    
+
     private void onOrientationChanged(int currentRotation) {
         initializeScreenMetrics();
         getMraidView().fireChangeEventForProperty(
                 MraidScreenSizeProperty.createWithSize(mScreenWidth, mScreenHeight));
     }
-    
+
     public void destroy() {
         mHandler.removeCallbacks(mCheckViewabilityTask);
         try {
-            getMraidView().getContext().unregisterReceiver(mOrientationBroadcastReceiver);
+            mOrientationBroadcastReceiver.unregister();
         } catch (IllegalArgumentException e) {
-            if (e.getMessage().contains("Receiver not registered")) {
-                // Ignore this exception.
-            } else throw e;
+            if (!e.getMessage().contains("Receiver not registered")) {
+                throw e;
+            } // Else ignore this exception.
         }
     }
-    
+
     protected void initializeJavaScriptState() {
         ArrayList<MraidProperty> properties = new ArrayList<MraidProperty>();
         properties.add(MraidScreenSizeProperty.createWithSize(mScreenWidth, mScreenHeight));
         properties.add(MraidViewableProperty.createWithViewable(mIsViewable));
         getMraidView().fireChangeEventForProperties(properties);
-        
+
         mViewState = ViewState.DEFAULT;
         getMraidView().fireChangeEventForProperty(MraidStateProperty.createWithViewState(mViewState));
+        initializeSupportedFunctionsProperty();
     }
-    
+
     protected boolean isExpanded() {
         return (mViewState == ViewState.EXPANDED);
     }
-    
+
     protected void close() {
         if (mViewState == ViewState.EXPANDED) {
             resetViewToDefaultState();
@@ -216,12 +227,12 @@ protected void close() {
             mViewState = ViewState.HIDDEN;
             getMraidView().fireChangeEventForProperty(MraidStateProperty.createWithViewState(mViewState));
         }
-        
-        if (getMraidView().getOnCloseListener() != null) {
-            getMraidView().getOnCloseListener().onClose(getMraidView(), mViewState);
+
+        if (getMraidView().getMraidListener() != null) {
+            getMraidView().getMraidListener().onClose(getMraidView(), mViewState);
         }
     }
-    
+
     private void resetViewToDefaultState() {
         setNativeCloseButtonEnabled(false);
         mAdContainerLayout.removeAllViewsInLayout();
@@ -229,19 +240,19 @@ private void resetViewToDefaultState() {
         mRootView.removeView(mExpansionLayout);
 
         getMraidView().requestLayout();
-        
+
         ViewGroup parent = (ViewGroup) mPlaceholderView.getParent();
         parent.addView(getMraidView(), mViewIndexInParent);
         parent.removeView(mPlaceholderView);
         parent.invalidate();
     }
-    
+
     protected void expand(String url, int width, int height, boolean shouldUseCustomClose,
             boolean shouldLockOrientation) {
         if (mExpansionStyle == MraidView.ExpansionStyle.DISABLED) return;
-        
+
         if (url != null && !URLUtil.isValidUrl(url)) {
-            getMraidView().fireErrorEvent("expand", "URL passed to expand() was invalid.");
+            getMraidView().fireErrorEvent(MraidCommandRegistry.MRAID_JAVASCRIPT_COMMAND_EXPAND, "URL passed to expand() was invalid.");
             return;
         }
 
@@ -256,9 +267,9 @@ protected void expand(String url, int width, int height, boolean shouldUseCustom
 
         View expansionContentView = getMraidView();
         if (url != null) {
-            mTwoPartExpansionView = new MraidView(getMraidView().getContext(), ExpansionStyle.DISABLED,
+            mTwoPartExpansionView = new MraidView(getContext(), ExpansionStyle.DISABLED,
                     NativeCloseButtonStyle.AD_CONTROLLED, PlacementType.INLINE);
-            mTwoPartExpansionView.setOnCloseListener(new MraidView.OnCloseListener() {
+            mTwoPartExpansionView.setMraidListener(new BaseMraidListener() {
                 public void onClose(MraidView view, ViewState newViewState) {
                     close();
                 }
@@ -270,30 +281,335 @@ public void onClose(MraidView view, ViewState newViewState) {
         expandLayouts(expansionContentView, (int) (width * mDensity), (int) (height * mDensity));
         mRootView.addView(mExpansionLayout, new RelativeLayout.LayoutParams(
                 RelativeLayout.LayoutParams.FILL_PARENT, RelativeLayout.LayoutParams.FILL_PARENT));
-        
-        if (mNativeCloseButtonStyle == MraidView.NativeCloseButtonStyle.ALWAYS_VISIBLE || 
-                (!mAdWantsCustomCloseButton && 
+
+        if (mNativeCloseButtonStyle == MraidView.NativeCloseButtonStyle.ALWAYS_VISIBLE ||
+                (!mAdWantsCustomCloseButton &&
                 mNativeCloseButtonStyle != MraidView.NativeCloseButtonStyle.ALWAYS_HIDDEN)) {
             setNativeCloseButtonEnabled(true);
         }
-        
+
         mViewState = ViewState.EXPANDED;
         getMraidView().fireChangeEventForProperty(MraidStateProperty.createWithViewState(mViewState));
-        if (getMraidView().getOnExpandListener() != null) getMraidView().getOnExpandListener().onExpand(getMraidView());
+        if (getMraidView().getMraidListener() != null) getMraidView().getMraidListener().onExpand(getMraidView());
+    }
+
+    protected void showUserDownloadImageAlert(String imageUrl) {
+        Context context = getContext();
+        if (!isStorePictureSupported(context)) {
+            getMraidView().fireErrorEvent(MRAID_JAVASCRIPT_COMMAND_STORE_PICTURE, "Error downloading file - the device does not have an SD card mounted, or the Android permission is not granted.");
+            Log.d("MoPub", "Error downloading file - the device does not have an SD card mounted, or the Android permission is not granted.");
+            return;
+        }
+
+        if (context instanceof Activity) {
+            showUserDialog(imageUrl);
+        } else {
+            showUserToast("Downloading image to Picture gallery...");
+            downloadImage(imageUrl);
+        }
+    }
+
+    private void showUserToast(final String message) {
+        mHandler.post(new Runnable() {
+            @Override
+            public void run() {
+                Toast.makeText(getContext(), message, Toast.LENGTH_SHORT).show();
+            }
+        });
+    }
+
+    private void downloadImage(final String uriString) {
+        final File pictureStoragePath = getPictureStoragePath();
+
+        pictureStoragePath.mkdirs();
+
+        new Thread(new Runnable() {
+            private URI uri;
+            private InputStream pictureInputStream;
+            private OutputStream pictureOutputStream;
+            private MediaScannerConnection mediaScannerConnection;
+
+            @Override
+            public void run() {
+                try {
+                    uri = URI.create(uriString);
+                    HttpClient httpClient = HttpClientFactory.create();
+                    HttpGet httpGet = new HttpGet(uri);
+
+                    HttpResponse httpResponse = httpClient.execute(httpGet);
+                    pictureInputStream = httpResponse.getEntity().getContent();
+
+                    String redirectLocation = HttpResponses.extractHeader(httpResponse, "Location");
+                    if (redirectLocation != null) {
+                        uri = URI.create(redirectLocation);
+                    }
+
+                    final String pictureFileName = getFileNameForUriAndHttpResponse(uri, httpResponse);
+                    File pictureFile = new File(pictureStoragePath, pictureFileName);
+                    final String pictureFileFullPath = pictureFile.toString();
+                    pictureOutputStream = new FileOutputStream(pictureFile);
+
+                    Streams.copyContent(pictureInputStream, pictureOutputStream);
+
+                    loadPictureIntoGalleryApp(pictureFileFullPath);
+                } catch (Exception exception) {
+                    mHandler.post(new Runnable() {
+                        @Override
+                        public void run() {
+                            showUserToast("Image failed to download.");
+                            getMraidView().fireErrorEvent(MRAID_JAVASCRIPT_COMMAND_STORE_PICTURE, "Error downloading and saving image file.");
+                            Log.d("MoPub", "Error downloading and saving image file.");
+                        }
+                    });
+                } finally {
+                    Streams.closeStream(pictureInputStream);
+                    Streams.closeStream(pictureOutputStream);
+                }
+            }
+
+            private void loadPictureIntoGalleryApp(final String filename) {
+                MoPubMediaScannerConnectionClient mediaScannerConnectionClient = new MoPubMediaScannerConnectionClient(filename, null);
+                mediaScannerConnection = new MediaScannerConnection(getContext().getApplicationContext(), mediaScannerConnectionClient);
+                mediaScannerConnectionClient.setMediaScannerConnection(mediaScannerConnection);
+                mediaScannerConnection.connect();
+            }
+        }).start();
+    }
+
+    private void showUserDialog(final String imageUrl) {
+        AlertDialog.Builder alertDialogDownloadImage = new AlertDialog.Builder(getContext());
+        alertDialogDownloadImage
+                .setTitle("Save Image")
+                .setMessage("Download image to Picture gallery?")
+                .setNegativeButton("Cancel", null)
+                .setPositiveButton("Okay", new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        downloadImage(imageUrl);
+                    }
+                })
+                .setCancelable(true)
+                .show();
+    }
+
+    protected void showVideo(String videoUrl) {
+        MraidVideoPlayerActivity.start(getContext(), getMraidView(), videoUrl);
+    }
+
+    protected void getCurrentPosition(){
+        getMraidView().fireErrorEvent(MRAID_JAVASCRIPT_COMMAND_GET_CURRENT_POSITION, "Unsupported action getCurrentPosition");
+    }
+
+    protected void getDefaultPosition(){
+        getMraidView().fireErrorEvent(MRAID_JAVASCRIPT_COMMAND_GET_DEFAULT_POSITION, "Unsupported action getDefaultPosition");
+    }
+
+    protected void getMaxSize(){
+        getMraidView().fireErrorEvent(MRAID_JAVASCRIPT_COMMAND_GET_MAX_SIZE, "Unsupported action getMaxSize");
+    }
+
+    protected void getScreenSize(){
+        getMraidView().fireErrorEvent(MRAID_JAVASCRIPT_COMMAND_GET_SCREEN_SIZE, "Unsupported action getScreenSize");
+    }
+
+    protected void createCalendarEvent(Map<String, String> params) {
+        Context context = getMraidView().getContext();
+        if (MraidUtils.isCalendarAvailable(context)) {
+            try {
+                Map<String, Object> calendarParams = translateJSParamsToAndroidCalendarEventMapping(params);
+                Intent intent = new Intent(Intent.ACTION_INSERT).setType(ANDROID_CALENDAR_CONTENT_TYPE);
+                for (String key : calendarParams.keySet()) {
+                    Object value = calendarParams.get(key);
+                    if (value instanceof Long) {
+                        intent.putExtra(key, ((Long) value).longValue());
+                    } else if (value instanceof Integer) {
+                        intent.putExtra(key, ((Integer) value).intValue());
+                    } else {
+                        intent.putExtra(key, (String) value);
+                    }
+                }
+                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+                context.startActivity(intent);
+            } catch (ActivityNotFoundException anfe) {
+                Log.d(LOGTAG, "no calendar app installed");
+                getMraidView().fireErrorEvent(MRAID_JAVASCRIPT_COMMAND_CREATE_CALENDAR_EVENT, "Action is unsupported on this device - no calendar app installed");
+            } catch (IllegalArgumentException iae) {
+                Log.d(LOGTAG, "create calendar: invalid parameters " + iae.getMessage());
+                getMraidView().fireErrorEvent(MRAID_JAVASCRIPT_COMMAND_CREATE_CALENDAR_EVENT, iae.getMessage());
+            } catch (Exception exception){
+                Log.d(LOGTAG, "could not create calendar event");
+                getMraidView().fireErrorEvent(MRAID_JAVASCRIPT_COMMAND_CREATE_CALENDAR_EVENT, "could not create calendar event");
+            }
+        } else {
+            Log.d(LOGTAG, "unsupported action createCalendarEvent for devices pre-ICS");
+            getMraidView().fireErrorEvent(MRAID_JAVASCRIPT_COMMAND_CREATE_CALENDAR_EVENT, "Action is unsupported on this device (need Android version Ice Cream Sandwich or above)");
+        }
+    }
+
+    private Map<String, Object> translateJSParamsToAndroidCalendarEventMapping(Map<String, String> params) throws Exception {
+        SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT);
+        Map<String, Object> validatedParamsMapping = new HashMap<String, Object>();
+        if (!params.containsKey("description") || !params.containsKey("start")) {
+            throw new InvalidParameterException("missing start and description fields");
+        }
+
+        validatedParamsMapping.put(CalendarContract.Events.TITLE, params.get("description"));
+        try {
+            Date date = dateFormat.parse(params.get("start"));
+            validatedParamsMapping.put(CalendarContract.EXTRA_EVENT_BEGIN_TIME, date.getTime());
+            if(params.containsKey("end")) {
+                date = dateFormat.parse(params.get("end"));
+                validatedParamsMapping.put(CalendarContract.EXTRA_EVENT_END_TIME, date.getTime());
+            }
+        } catch (ParseException pe) {
+            throw new InvalidParameterException("Invalid date format. Date format expecting (yyyy-MM-DDTHH:MM:SS-xx:xx) i.e. 2013-08-14T09:00:00-08:00");
+        } catch (NullPointerException npe) {
+            throw new InvalidParameterException("invalid calendar event: start or end is null");
+        }
+
+        if (params.containsKey("location")) {
+            validatedParamsMapping.put(CalendarContract.Events.EVENT_LOCATION, params.get("location"));
+        }
+
+        if (params.containsKey("summary")) {
+            validatedParamsMapping.put(CalendarContract.Events.DESCRIPTION, params.get("summary"));
+        }
+
+        if (params.containsKey("transparency")) {
+            validatedParamsMapping.put(
+                    CalendarContract.Events.AVAILABILITY,
+                    params.get("transparency").equals("transparent") ?
+                            CalendarContract.Events.AVAILABILITY_FREE :
+                            CalendarContract.Events.AVAILABILITY_BUSY
+            );
+        }
+
+        validatedParamsMapping.put(CalendarContract.Events.RRULE, parseRecurrenceRule(params));
+
+        return validatedParamsMapping;
+    }
+
+    private String parseRecurrenceRule(Map<String, String> params) throws IllegalArgumentException {
+        StringBuilder rule = new StringBuilder();
+        if (params.containsKey("frequency")) {
+            String frequency = params.get("frequency");
+            int interval = -1;
+            if (params.containsKey("interval")) {
+                interval = Integer.parseInt(params.get("interval"));
+            }
+            if ("daily".equals(frequency)) {
+                rule.append("FREQ=DAILY;");
+                if (interval != -1) {
+                    rule.append("INTERVAL=" + interval + ";");
+                }
+            } else if("weekly".equals(frequency)) {
+                rule.append("FREQ=WEEKLY;");
+                if (interval != -1) {
+                    rule.append("INTERVAL=" + interval + ";");
+                }
+                if (params.containsKey("daysInWeek")) {
+                    String weekdays = translateWeekIntegersToDays(params.get("daysInWeek"));
+                    if (weekdays == null) {
+                       throw new IllegalArgumentException("invalid ");
+                    }
+                    rule.append("BYDAY=" + weekdays + ";");
+                }
+            } else if("monthly".equals(frequency)) {
+                rule.append("FREQ=MONTHLY;");
+                if (interval != -1) {
+                    rule.append("INTERVAL=" + interval + ";");
+                }
+                if (params.containsKey("daysInMonth")) {
+                    String monthDays = translateMonthIntegersToDays(params.get("daysInMonth"));
+                    if (monthDays == null) {
+                        throw new IllegalArgumentException();
+                    }
+                    rule.append("BYMONTHDAY=" + monthDays + ";");
+                }
+            } else {
+                throw new IllegalArgumentException("frequency is only supported for daily, weekly, and monthly.");
+            }
+        }
+        return rule.toString();
+    }
+
+    private String translateWeekIntegersToDays(String expression) throws InvalidParameterException{
+        StringBuilder daysResult = new StringBuilder();
+        boolean[] daysAlreadyCounted = new boolean[7];
+        String[] days = expression.split(",");
+        int dayNumber;
+        for (int i=0; i<days.length; i++) {
+            dayNumber = Integer.parseInt(days[i]);
+            dayNumber = dayNumber == 7 ? 0 : dayNumber;
+            if (!daysAlreadyCounted[dayNumber]) {
+                daysResult.append(dayNumberToDayOfWeekString(dayNumber) + ",");
+                daysAlreadyCounted[dayNumber] = true;
+            }
+        }
+        if (days.length == 0) {
+            throw new InvalidParameterException("must have at least 1 day of the week if specifying repeating weekly");
+        }
+        daysResult.deleteCharAt(daysResult.length()-1);
+        return daysResult.toString();
     }
-    
+
+    private String translateMonthIntegersToDays(String expression) throws InvalidParameterException {
+        StringBuilder daysResult = new StringBuilder();
+        boolean[] daysAlreadyCounted = new boolean[2*MAX_NUMBER_DAYS_IN_MONTH +1]; //for -31 to 31
+        String[] days = expression.split(",");
+        int dayNumber;
+        for (int i=0; i<days.length; i++) {
+            dayNumber = Integer.parseInt(days[i]);
+            if (!daysAlreadyCounted[dayNumber+MAX_NUMBER_DAYS_IN_MONTH]) {
+                daysResult.append(dayNumberToDayOfMonthString(dayNumber) + ",");
+                daysAlreadyCounted[dayNumber+MAX_NUMBER_DAYS_IN_MONTH] = true;
+            }
+        }
+        if (days.length == 0) {
+            throw new InvalidParameterException("must have at least 1 day of the month if specifying repeating weekly");
+        }
+        daysResult.deleteCharAt(daysResult.length() - 1);
+        return daysResult.toString();
+    }
+
+    private String dayNumberToDayOfWeekString(int number) throws InvalidParameterException {
+        String dayOfWeek;
+        switch(number) {
+            case 0: dayOfWeek="SU"; break;
+            case 1: dayOfWeek="MO"; break;
+            case 2: dayOfWeek="TU"; break;
+            case 3: dayOfWeek="WE"; break;
+            case 4: dayOfWeek="TH"; break;
+            case 5: dayOfWeek="FR"; break;
+            case 6: dayOfWeek="SA"; break;
+            default: throw new InvalidParameterException("invalid day of week " + number);
+        }
+        return dayOfWeek;
+    }
+
+    private String dayNumberToDayOfMonthString(int number) throws InvalidParameterException {
+        String dayOfMonth;
+        // https://android.googlesource.com/platform/frameworks/opt/calendar/+/504844526f1b7afec048c6d2976ffb332670d5ba/src/com/android/calendarcommon2/EventRecurrence.java
+        if (number != 0 && number >= -MAX_NUMBER_DAYS_IN_MONTH && number <= MAX_NUMBER_DAYS_IN_MONTH) {
+            dayOfMonth = "" + number;
+        } else {
+            throw new InvalidParameterException("invalid day of month " + number);
+        }
+        return dayOfMonth;
+    }
+
     private void swapViewWithPlaceholderView() {
         ViewGroup parent = (ViewGroup) getMraidView().getParent();
         if (parent == null) return;
-        
+
         int index;
         int count = parent.getChildCount();
         for (index = 0; index < count; index++) {
             if (parent.getChildAt(index) == getMraidView()) break;
         }
-        
+
         mViewIndexInParent = index;
-        parent.addView(mPlaceholderView, index, 
+        parent.addView(mPlaceholderView, index,
                 new ViewGroup.LayoutParams(getMraidView().getWidth(), getMraidView().getHeight()));
         parent.removeView(getMraidView());
     }
@@ -303,31 +619,31 @@ private void expandLayouts(View expansionContentView, int expandWidth, int expan
         if (expandWidth < closeButtonSize) expandWidth = closeButtonSize;
         if (expandHeight < closeButtonSize) expandHeight = closeButtonSize;
 
-        View dimmingView = new View(getMraidView().getContext());
+        View dimmingView = new View(getContext());
         dimmingView.setBackgroundColor(Color.TRANSPARENT);
         dimmingView.setOnTouchListener(new OnTouchListener() {
             public boolean onTouch(View v, MotionEvent event) {
                 return true;
             }
         });
-        
+
         mExpansionLayout.addView(dimmingView, new RelativeLayout.LayoutParams(
                 RelativeLayout.LayoutParams.FILL_PARENT, RelativeLayout.LayoutParams.FILL_PARENT));
 
         mAdContainerLayout.addView(expansionContentView, new RelativeLayout.LayoutParams(
                 RelativeLayout.LayoutParams.FILL_PARENT, RelativeLayout.LayoutParams.FILL_PARENT));
-        
+
         RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(expandWidth, expandHeight);
         lp.addRule(RelativeLayout.CENTER_IN_PARENT);
         mExpansionLayout.addView(mAdContainerLayout, lp);
     }
 
     private void setOrientationLockEnabled(boolean enabled) {
-        Context context = getMraidView().getContext();
+        Context context = getContext();
         Activity activity = null;
         try {
             activity = (Activity) context;
-            int requestedOrientation = enabled ? 
+            int requestedOrientation = enabled ?
                     activity.getResources().getConfiguration().orientation :
                     mOriginalRequestedOrientation;
             activity.setRequestedOrientation(requestedOrientation);
@@ -335,16 +651,16 @@ private void setOrientationLockEnabled(boolean enabled) {
             Log.d(LOGTAG, "Unable to modify device orientation.");
         }
     }
-    
+
     protected void setNativeCloseButtonEnabled(boolean enabled) {
         if (mRootView == null) return;
-        
+
         if (enabled) {
             if (mCloseButton == null) {
                 StateListDrawable states = new StateListDrawable();
                 states.addState(new int[] {-android.R.attr.state_pressed}, INTERSTITIAL_CLOSE_BUTTON_NORMAL.decodeImage(mRootView.getContext()));
                 states.addState(new int[] {android.R.attr.state_pressed}, INTERSTITIAL_CLOSE_BUTTON_PRESSED.decodeImage(mRootView.getContext()));
-                mCloseButton = new ImageButton(getMraidView().getContext());
+                mCloseButton = new ImageButton(getContext());
                 mCloseButton.setImageDrawable(states);
                 mCloseButton.setBackgroundDrawable(null);
                 mCloseButton.setOnClickListener(new OnClickListener() {
@@ -353,7 +669,7 @@ public void onClick(View v) {
                     }
                 });
             }
-            
+
             int buttonSize = (int) (CLOSE_BUTTON_SIZE_DP * mDensity + 0.5f);
             FrameLayout.LayoutParams buttonLayout = new FrameLayout.LayoutParams(
                     buttonSize, buttonSize, Gravity.RIGHT);
@@ -361,36 +677,145 @@ public void onClick(View v) {
         } else {
             mAdContainerLayout.removeView(mCloseButton);
         }
-        
+
         MraidView view = getMraidView();
         if (view.getOnCloseButtonStateChangeListener() != null) {
             view.getOnCloseButtonStateChangeListener().onCloseButtonStateChange(view, enabled);
         }
     }
-    
+
     protected void useCustomClose(boolean shouldUseCustomCloseButton) {
         mAdWantsCustomCloseButton = shouldUseCustomCloseButton;
-        
+
         MraidView view = getMraidView();
         boolean enabled = !shouldUseCustomCloseButton;
         if (view.getOnCloseButtonStateChangeListener() != null) {
             view.getOnCloseButtonStateChangeListener().onCloseButtonStateChange(view, enabled);
         }
     }
-    
+
     protected boolean checkViewable() {
         return true;
     }
 
     FrameLayout createAdContainerLayout() {
-        return new FrameLayout(getMraidView().getContext());
+        return new FrameLayout(getContext());
     }
 
     RelativeLayout createExpansionLayout() {
-        return new RelativeLayout(getMraidView().getContext());
+        return new RelativeLayout(getContext());
     }
 
     FrameLayout createPlaceholderView() {
-        return new FrameLayout(getMraidView().getContext());
+        return new FrameLayout(getContext());
+    }
+
+    private Context getContext() {
+        return getMraidView().getContext();
+    }
+
+    protected void initializeSupportedFunctionsProperty() {
+        Context context = getContext();
+        getMraidView().fireChangeEventForProperty(
+                new MraidSupportsProperty()
+                        .withTel(isTelAvailable(context))
+                        .withSms(isSmsAvailable(context))
+                        .withCalendar(isCalendarAvailable(context))
+                        .withInlineVideo(isInlineVideoAvailable(context))
+                        .withStorePicture(isStorePictureSupported(context)));
+    }
+
+    private File getPictureStoragePath() {
+        return new File(Environment.getExternalStorageDirectory(), "Pictures");
+    }
+
+    private String getFileNameForUriAndHttpResponse(final URI uri, final HttpResponse response) {
+        final String path = uri.getPath();
+
+        if (path == null) {
+            return null;
+        }
+
+        String filename = new File(path).getName();
+
+        Header header = response.getFirstHeader(MIME_TYPE_HEADER);
+        if (header != null) {
+            String[] fields = header.getValue().split(";");
+            for (final String field : fields) {
+                String extension;
+                if (field.contains("image/")) {
+                    extension = "." + field.split("/")[1];
+                    if (!filename.endsWith(extension)) {
+                        filename += extension;
+                    }
+                    break;
+                }
+            }
+        }
+
+        return filename;
+    }
+
+    private class MoPubMediaScannerConnectionClient implements MediaScannerConnection.MediaScannerConnectionClient {
+        private final String mFilename;
+        private final String mMimeType;
+        private MediaScannerConnection mMediaScannerConnection;
+
+        private MoPubMediaScannerConnectionClient(String filename, String mimeType) {
+            mFilename = filename;
+            mMimeType = mimeType;
+        }
+
+        private void setMediaScannerConnection(MediaScannerConnection connection) {
+            mMediaScannerConnection = connection;
+        }
+
+        @Override
+        public void onMediaScannerConnected() {
+            if (mMediaScannerConnection != null) {
+                mMediaScannerConnection.scanFile(mFilename, mMimeType);
+            }
+        }
+
+        @Override
+        public void onScanCompleted(String path, Uri uri) {
+            if (mMediaScannerConnection != null) {
+                mMediaScannerConnection.disconnect();
+            }
+        }
+    }
+
+    class OrientationBroadcastReceiver extends BroadcastReceiver {
+        private int mLastRotation;
+        private Context mContext;
+
+        public void onReceive(Context context, Intent intent) {
+            if(!isRegistered()) {
+                return;
+            }
+            String action = intent.getAction();
+            if (action.equals(Intent.ACTION_CONFIGURATION_CHANGED)) {
+                int orientation = MraidDisplayController.this.getDisplayRotation();
+                if (orientation != mLastRotation) {
+                    mLastRotation = orientation;
+                    MraidDisplayController.this.onOrientationChanged(mLastRotation);
+                }
+            }
+        }
+
+        private boolean isRegistered() {
+            return mContext != null;
+        }
+
+        public void register(Context context) {
+            mContext = context;
+            context.registerReceiver(this,
+                    new IntentFilter(Intent.ACTION_CONFIGURATION_CHANGED));
+        }
+
+        public void unregister() {
+            mContext.unregisterReceiver(this);
+            mContext = null;
+        }
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidInterstitial.java
index 9ae62fdb..1cd067f6 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidInterstitial.java
@@ -1,8 +1,10 @@
 package com.mopub.mobileads;
 
 
+import android.content.ActivityNotFoundException;
 import android.content.Intent;
 import android.net.Uri;
+import android.util.Log;
 
 import java.util.Map;
 
@@ -21,6 +23,10 @@ protected void showInterstitial() {
         Intent intent = new Intent(mContext, MraidActivity.class);
         intent.putExtra(HTML_RESPONSE_BODY_KEY, mHtmlData);
         intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        mContext.startActivity(intent);
+        try {
+            mContext.startActivity(intent);
+        } catch (ActivityNotFoundException anfe) {
+            Log.d("MraidInterstitial", "MraidActivity.class not found. Did you declare MraidActivity in your manifest?");
+        }
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidProperty.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidProperty.java
index 9a6c4137..bfcfdf56 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidProperty.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidProperty.java
@@ -18,16 +18,16 @@ public String toString() {
 
 class MraidPlacementTypeProperty extends MraidProperty {
     private final PlacementType mPlacementType;
-    
+
     MraidPlacementTypeProperty(PlacementType placementType) {
         mPlacementType = placementType;
     }
-    
+
     public static MraidPlacementTypeProperty createWithType(
             PlacementType placementType) {
         return new MraidPlacementTypeProperty(placementType);
     }
-    
+
     @Override
     public String toJsonPair() {
         return "placementType: '" + mPlacementType.toString().toLowerCase() + "'";
@@ -37,16 +37,16 @@ public String toJsonPair() {
 class MraidScreenSizeProperty extends MraidProperty {
     private final int mScreenWidth;
     private final int mScreenHeight;
-    
+
     MraidScreenSizeProperty(int width, int height) {
         mScreenWidth = width;
         mScreenHeight = height;
     }
-    
+
     public static MraidScreenSizeProperty createWithSize(int width, int height) {
         return new MraidScreenSizeProperty(width, height);
     }
-    
+
     @Override
     public String toJsonPair() {
         return "screenSize: { width: " + mScreenWidth + ", height: " + mScreenHeight + " }";
@@ -55,15 +55,15 @@ public String toJsonPair() {
 
 class MraidStateProperty extends MraidProperty {
     private final ViewState mViewState;
-    
+
     MraidStateProperty(ViewState viewState) {
         mViewState = viewState;
     }
-    
+
     public static MraidStateProperty createWithViewState(ViewState viewState) {
         return new MraidStateProperty(viewState);
     }
-    
+
     @Override
     public String toJsonPair() {
         return "state: '" + mViewState.toString().toLowerCase() + "'";
@@ -72,17 +72,61 @@ public String toJsonPair() {
 
 class MraidViewableProperty extends MraidProperty {
     private final boolean mViewable;
-    
+
     MraidViewableProperty(boolean viewable) {
         mViewable = viewable;
     }
-    
+
     public static MraidViewableProperty createWithViewable(boolean viewable) {
         return new MraidViewableProperty(viewable);
     }
-    
+
     @Override
     public String toJsonPair() {
         return "viewable: " + (mViewable ? "true" : "false");
     }
-}
\ No newline at end of file
+}
+
+class MraidSupportsProperty extends MraidProperty{
+    private boolean sms;
+    private boolean tel;
+    private boolean calendar;
+    private boolean storePicture;
+    private boolean inlineVideo;
+
+    @Override
+    public String toJsonPair() {
+        return "supports: {" +
+                "sms: " + String.valueOf(sms) + ", " +
+                "tel: " + String.valueOf(tel) + ", " +
+                "calendar: " + String.valueOf(calendar) + ", " +
+                "storePicture: " + String.valueOf(storePicture) + ", " +
+                "inlineVideo: " + String.valueOf(inlineVideo) + "}";
+    }
+
+    public MraidSupportsProperty withSms(boolean value) {
+        sms = value;
+        return this;
+    }
+
+
+    public MraidSupportsProperty withTel(boolean value) {
+        tel = value;
+        return this;
+    }
+
+    public MraidSupportsProperty withCalendar(boolean value) {
+        calendar = value;
+        return this;
+    }
+
+    public MraidSupportsProperty withStorePicture(boolean value) {
+        storePicture = value;
+        return this;
+    }
+
+    public MraidSupportsProperty withInlineVideo(boolean value) {
+        inlineVideo = value;
+        return this;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
new file mode 100644
index 00000000..aec1e45f
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
@@ -0,0 +1,73 @@
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.ActivityNotFoundException;
+import android.content.Context;
+import android.content.Intent;
+import android.media.MediaPlayer;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.Window;
+import android.widget.RelativeLayout;
+import android.widget.VideoView;
+
+import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;
+import static com.mopub.mobileads.MraidCommandRegistry.MRAID_JAVASCRIPT_COMMAND_PLAY_VIDEO;
+
+public class MraidVideoPlayerActivity extends Activity {
+    protected static final String MRAID_VIDEO_URL = "mraid_video_url";
+    private static final String TAG = "VideoPlayerActivity";
+    private static MraidView mraidView;
+
+    static void start(Context context, MraidView view, String videoUrl) {
+        MraidVideoPlayerActivity.mraidView = view;
+        Intent intentVideoPlayerActivity = createIntent(context, videoUrl);
+        try {
+            context.startActivity(intentVideoPlayerActivity);
+        } catch (ActivityNotFoundException anfe) {
+            Log.d("MraidVideoPlayerActivity", "Activity MraidVideoPlayerActivity not found. Did you declare it in your AndroidManifest.xml?");
+        }
+    }
+
+    static Intent createIntent(Context context, String videoUrl) {
+        Intent intentVideoPlayerActivity = new Intent(context, MraidVideoPlayerActivity.class);
+        intentVideoPlayerActivity.setFlags(FLAG_ACTIVITY_NEW_TASK);
+        intentVideoPlayerActivity.putExtra(MRAID_VIDEO_URL, videoUrl);
+        return intentVideoPlayerActivity;
+    }
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        requestWindowFeature(Window.FEATURE_NO_TITLE);
+
+        RelativeLayout contentView = new RelativeLayout(this);
+        VideoView videoView = new VideoView(this);
+        RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(
+                RelativeLayout.LayoutParams.FILL_PARENT,
+                RelativeLayout.LayoutParams.FILL_PARENT);
+        layoutParams.addRule(RelativeLayout.CENTER_IN_PARENT);
+        contentView.addView(videoView, layoutParams);
+
+        setContentView(contentView);
+
+        videoView.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
+            @Override
+            public void onCompletion(MediaPlayer mp) {
+                finish();
+            }
+        });
+        videoView.setOnErrorListener(new MediaPlayer.OnErrorListener() {
+            @Override
+            public boolean onError(MediaPlayer mediaPlayer, int what, int extra) {
+                Log.d(TAG, "Error: video can not be played.");
+                mraidView.fireErrorEvent(MRAID_JAVASCRIPT_COMMAND_PLAY_VIDEO, "Video could not be played");
+                return false;
+            }
+        });
+
+        videoView.setVideoPath(getIntent().getStringExtra(MRAID_VIDEO_URL));
+
+        videoView.start();
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidView.java
index 3615e243..29e2631a 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidView.java
@@ -41,12 +41,9 @@
     
     private boolean mHasFiredReadyEvent;
     private final PlacementType mPlacementType;
-    
+
     static class MraidListenerInfo {
-        private OnExpandListener mOnExpandListener;
-        private OnCloseListener mOnCloseListener;
-        private OnReadyListener mOnReadyListener;
-        private OnFailureListener mOnFailureListener;
+        private MraidListener mMraidListener;
         private OnCloseButtonStateChangeListener mOnCloseButtonListener;
         private OnOpenListener mOnOpenListener;
     }
@@ -121,7 +118,8 @@ public boolean onTouch(View v, MotionEvent event) {
         
         mListenerInfo = new MraidListenerInfo();
     }
-    
+
+    @Override
     public void destroy() {
         mDisplayController.destroy();
         super.destroy();
@@ -142,6 +140,7 @@ public void loadHtmlData(String data) {
         loadDataWithBaseURL(null, data, "text/html", "UTF-8", null);
     }
 
+    @Override
     public void loadUrl(String url) {
         HttpClient httpClient = new DefaultHttpClient();
         String outString = "";
@@ -170,8 +169,8 @@ public void loadUrl(String url) {
     }
     
     private void notifyOnFailureListener() {
-        if (mListenerInfo.mOnFailureListener != null) {
-            mListenerInfo.mOnFailureListener.onFailure(this);
+        if (mListenerInfo.mMraidListener != null) {
+            mListenerInfo.mMraidListener.onFailure(this);
         }
     }
 
@@ -186,39 +185,15 @@ protected MraidDisplayController getDisplayController() {
     }
     
     // Listeners ///////////////////////////////////////////////////////////////////////////////////
-    
-    public void setOnExpandListener(OnExpandListener listener) {
-        mListenerInfo.mOnExpandListener = listener;
-    }
-    
-    public OnExpandListener getOnExpandListener() {
-        return mListenerInfo.mOnExpandListener;
-    }
-    
-    public void setOnCloseListener(OnCloseListener listener) {
-        mListenerInfo.mOnCloseListener = listener;
-    }
-    
-    public OnCloseListener getOnCloseListener() {
-        return mListenerInfo.mOnCloseListener;
-    }
-    
-    public void setOnReadyListener(OnReadyListener listener) {
-        mListenerInfo.mOnReadyListener = listener;
-    }
-    
-    public OnReadyListener getOnReadyListener() {
-        return mListenerInfo.mOnReadyListener;
-    }
-    
-    public void setOnFailureListener(OnFailureListener listener) {
-        mListenerInfo.mOnFailureListener = listener;
+
+    public void setMraidListener(MraidListener mraidListener) {
+        mListenerInfo.mMraidListener = mraidListener;
     }
-    
-    public OnFailureListener getOnFailureListener() {
-        return mListenerInfo.mOnFailureListener;
+
+    public MraidListener getMraidListener() {
+        return mListenerInfo.mMraidListener;
     }
-    
+
     public void setOnCloseButtonStateChange(OnCloseButtonStateChangeListener listener) {
         mListenerInfo.mOnCloseButtonListener = listener;
     }
@@ -289,8 +264,7 @@ private boolean tryCommand(URI uri) {
 
     private class MraidWebViewClient extends WebViewClient {
         @Override
-        public void onReceivedError(WebView view, int errorCode, String description, 
-                String failingUrl) {
+        public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {
             Log.d(LOGTAG, "Error: " + description);
             super.onReceivedError(view, errorCode, description, failingUrl);
         }
@@ -323,10 +297,11 @@ public boolean shouldOverrideUrlLoading(WebView view, String url) {
         public void onPageFinished(WebView view, String url) {
             if (!mHasFiredReadyEvent) {
                 mDisplayController.initializeJavaScriptState();
-                fireChangeEventForProperty(
-                        MraidPlacementTypeProperty.createWithType(mPlacementType));
+                fireChangeEventForProperty(MraidPlacementTypeProperty.createWithType(mPlacementType));
                 fireReadyEvent();
-                if (getOnReadyListener() != null) getOnReadyListener().onReady(MraidView.this);
+                if (getMraidListener() != null) {
+                    getMraidListener().onReady(MraidView.this);
+                }
                 mHasFiredReadyEvent = true;
             }
         }
@@ -344,23 +319,21 @@ public boolean onJsAlert(WebView view, String url, String message, JsResult resu
             return false;
         }
     }
-    
-    public interface OnExpandListener {
+
+    public interface MraidListener {
+        public void onReady(MraidView view);
+        public void onFailure(MraidView view);
         public void onExpand(MraidView view);
-    }
-    
-    public interface OnCloseListener {
         public void onClose(MraidView view, ViewState newViewState);
     }
-    
-    public interface OnReadyListener {
-        public void onReady(MraidView view);
-    }
-    
-    public interface OnFailureListener {
-        public void onFailure(MraidView view);
+
+    public static class BaseMraidListener implements MraidListener {
+        @Override public void onReady(MraidView view) { }
+        @Override public void onFailure(MraidView view) { }
+        @Override public void onExpand(MraidView view) { }
+        @Override public void onClose(MraidView view, ViewState newViewState) { }
     }
-    
+
     public interface OnCloseButtonStateChangeListener {
         public void onCloseButtonStateChange(MraidView view, boolean enabled);
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/Utils.java b/mopub-sdk/src/main/java/com/mopub/mobileads/Utils.java
index 5140bb88..0e0d1172 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/Utils.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/Utils.java
@@ -32,6 +32,10 @@
 
 package com.mopub.mobileads;
 
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
 import org.json.JSONObject;
 import org.json.JSONTokener;
 
@@ -40,6 +44,7 @@
 import java.security.NoSuchAlgorithmException;
 import java.util.HashMap;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Map;
 
 public class Utils {
@@ -108,4 +113,10 @@ public static void invokeInstanceMethod(Object instance, String methodName) thro
         method.setAccessible(true);
         method.invoke(instance);
     }
+
+    public static boolean deviceCanHandleIntent(Context context, Intent intent) {
+        PackageManager packageManager = context.getPackageManager();
+        List<ResolveInfo> activities = packageManager.queryIntentActivities(intent, 0);
+        return (activities.size() > 0);
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/AdFetchTaskFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/AdFetchTaskFactory.java
new file mode 100644
index 00000000..23c463be
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/AdFetchTaskFactory.java
@@ -0,0 +1,22 @@
+package com.mopub.mobileads.factories;
+
+import com.mopub.mobileads.AdFetchTask;
+import com.mopub.mobileads.AdViewController;
+import com.mopub.mobileads.TaskTracker;
+
+public class AdFetchTaskFactory {
+    protected static AdFetchTaskFactory instance = new AdFetchTaskFactory();
+
+    @Deprecated // for testing
+    public static void setInstance(AdFetchTaskFactory factory) {
+        instance = factory;
+    }
+
+    public static AdFetchTask create(TaskTracker taskTracker, AdViewController adViewController, String userAgent, int timeoutMilliseconds) {
+        return instance.internalCreate(taskTracker, adViewController, userAgent, timeoutMilliseconds);
+    }
+
+    protected AdFetchTask internalCreate(TaskTracker taskTracker, AdViewController adViewController, String userAgent, int timeoutMilliseconds) {
+        return new AdFetchTask(taskTracker, adViewController, userAgent, timeoutMilliseconds);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/AdViewControllerFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/AdViewControllerFactory.java
index 58489500..d72f784f 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/AdViewControllerFactory.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/AdViewControllerFactory.java
@@ -1,9 +1,15 @@
 package com.mopub.mobileads.factories;
 
 import android.content.Context;
+import android.util.Log;
 import com.mopub.mobileads.AdViewController;
 import com.mopub.mobileads.MoPubView;
 
+import java.lang.reflect.Constructor;
+
+import static com.mopub.mobileads.util.VersionCode.ECLAIR_MR1;
+import static com.mopub.mobileads.util.VersionCode.currentApiLevel;
+
 public class AdViewControllerFactory {
     protected static AdViewControllerFactory instance = new AdViewControllerFactory();
 
@@ -17,6 +23,24 @@ public static AdViewController create(Context context, MoPubView moPubView) {
     }
 
     protected AdViewController internalCreate(Context context, MoPubView moPubView) {
+        if (currentApiLevel().isBelow(ECLAIR_MR1)) {
+            return new AdViewController(context, moPubView);
+        }
+
+        Class<?> HTML5AdViewClass = null;
+        try {
+            HTML5AdViewClass = Class.forName("com.mopub.mobileads.HTML5AdView");
+        } catch (ClassNotFoundException e) {
+            return new AdViewController(context, moPubView);
+        }
+
+        try {
+            Constructor<?> constructor = HTML5AdViewClass.getConstructor(Context.class, MoPubView.class);
+            return (AdViewController) constructor.newInstance(context, moPubView);
+        } catch (Exception e) {
+            Log.e("MoPub", "Could not load HTML5AdView.");
+        }
+
         return new AdViewController(context, moPubView);
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/CustomEventBannerAdapterFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/CustomEventBannerAdapterFactory.java
index 9f6f33f8..bf363e57 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/CustomEventBannerAdapterFactory.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/CustomEventBannerAdapterFactory.java
@@ -4,7 +4,7 @@
 import com.mopub.mobileads.MoPubView;
 
 public class CustomEventBannerAdapterFactory {
-    private static CustomEventBannerAdapterFactory instance = new CustomEventBannerAdapterFactory();
+    protected static CustomEventBannerAdapterFactory instance = new CustomEventBannerAdapterFactory();
 
     @Deprecated // for testing
     public static void setInstance(CustomEventBannerAdapterFactory factory) {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialAdapterFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialAdapterFactory.java
index f29d5c1f..f6534dda 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialAdapterFactory.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialAdapterFactory.java
@@ -4,7 +4,7 @@
 import com.mopub.mobileads.MoPubInterstitial;
 
 public class CustomEventInterstitialAdapterFactory {
-    private static CustomEventInterstitialAdapterFactory instance = new CustomEventInterstitialAdapterFactory();
+    protected static CustomEventInterstitialAdapterFactory instance = new CustomEventInterstitialAdapterFactory();
 
     @Deprecated // for testing
     public static void setInstance(CustomEventInterstitialAdapterFactory factory) {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java
index ffa9125d..7244b6e9 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java
@@ -37,7 +37,7 @@ private void cleanupInstance() {
     }
 
     public HtmlBannerWebView internalCreate(CustomEventBannerListener customEventBannerListener, boolean isScrollable, String redirectUrl, String clickthroughUrl) {
-        return instance.mHtmlBannerWebViewPool.getNextHtmlWebView(customEventBannerListener, isScrollable, clickthroughUrl, redirectUrl);
+        return instance.mHtmlBannerWebViewPool.getNextHtmlWebView(customEventBannerListener, isScrollable, redirectUrl, clickthroughUrl);
     }
 
     @Deprecated // for testing
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactory.java
index 91e85894..4c6efa25 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactory.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactory.java
@@ -8,10 +8,12 @@
 public class HtmlInterstitialWebViewFactory {
     protected static HtmlInterstitialWebViewFactory instance = new HtmlInterstitialWebViewFactory();
     protected HtmlInterstitialWebViewPool mHtmlInterstitialWebViewPool;
-    private int mRefCount;
+    private Context context;
+    private Integer mRefCount = 0;
 
     public static void initialize(Context context) {
         instance.initializeInstance(context);
+        instance.context = context;
     }
 
     public static void cleanup() {
@@ -19,16 +21,20 @@ public static void cleanup() {
     }
 
     private void initializeInstance(Context context) {
-        if (mHtmlInterstitialWebViewPool == null) {
-            mHtmlInterstitialWebViewPool = new HtmlInterstitialWebViewPool(context);
+        synchronized (mRefCount) {
+            if (mHtmlInterstitialWebViewPool == null) {
+                mHtmlInterstitialWebViewPool = new HtmlInterstitialWebViewPool(context);
+            }
+            mRefCount++;
         }
-        mRefCount++;
     }
 
     private void cleanupInstance() {
-        if (--mRefCount == 0) {
-            mHtmlInterstitialWebViewPool.cleanup();
-            mHtmlInterstitialWebViewPool = null;
+        synchronized (mRefCount) {
+            if (--mRefCount == 0) {
+                mHtmlInterstitialWebViewPool.cleanup();
+                mHtmlInterstitialWebViewPool = null;
+            }
         }
     }
 
@@ -50,6 +56,9 @@ public HtmlInterstitialWebView internalCreate(
             boolean isScrollable,
             String redirectUrl,
             String clickthroughUrl) {
+        if (mHtmlInterstitialWebViewPool == null) {
+            initializeInstance(instance.context);
+        }
         return instance.mHtmlInterstitialWebViewPool.getNextHtmlWebView(
                 customEventInterstitialListener,
                 isScrollable,
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/MoPubViewFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/MoPubViewFactory.java
index 17461a1c..85c4ede2 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/MoPubViewFactory.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/MoPubViewFactory.java
@@ -4,7 +4,7 @@
 import com.mopub.mobileads.MoPubView;
 
 public class MoPubViewFactory {
-    private static MoPubViewFactory instance = new MoPubViewFactory();
+    protected static MoPubViewFactory instance = new MoPubViewFactory();
 
     @Deprecated // for testing
     public static void setInstance(MoPubViewFactory factory) {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/MraidViewFactory.java b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/MraidViewFactory.java
index d5e77760..d6bad408 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/factories/MraidViewFactory.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/factories/MraidViewFactory.java
@@ -6,7 +6,7 @@
 import com.mopub.mobileads.MraidView.NativeCloseButtonStyle;
 
 public class MraidViewFactory {
-    private static MraidViewFactory instance = new MraidViewFactory();
+    protected static MraidViewFactory instance = new MraidViewFactory();
 
     @Deprecated // for testing
     public static void setInstance(MraidViewFactory factory) {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java
index ca1ac513..213affa1 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java
@@ -1,8 +1,9 @@
 package com.mopub.mobileads.resource;
 
 public class MraidJavascript {
-    public static final String JAVASCRIPT_SOURCE = "(function() {\n" +
-            "  var isIOS = (/iphone|ipad|ipod/i).test(window.navigator.userAgent.toLowerCase()); \n" +
+    public static final String JAVASCRIPT_SOURCE =
+            "(function() {\n" +
+            "  var isIOS = (/iphone|ipad|ipod/i).test(window.navigator.userAgent.toLowerCase());\n" +
             "  if (isIOS) {\n" +
             "    console = {};\n" +
             "    console.log = function(log) {\n" +
@@ -19,26 +20,26 @@
             "(function() {\n" +
             "  // Establish the root mraidbridge object.\n" +
             "  var mraidbridge = window.mraidbridge = {};\n" +
-            "  \n" +
+            "\n" +
             "  // Listeners for bridge events.\n" +
             "  var listeners = {};\n" +
-            "  \n" +
+            "\n" +
             "  // Queue to track pending calls to the native SDK.\n" +
             "  var nativeCallQueue = [];\n" +
-            "  \n" +
+            "\n" +
             "  // Whether a native call is currently in progress.\n" +
             "  var nativeCallInFlight = false;\n" +
             "\n" +
             "  //////////////////////////////////////////////////////////////////////////////////////////////////\n" +
-            "  \n" +
+            "\n" +
             "  mraidbridge.fireReadyEvent = function() {\n" +
             "    mraidbridge.fireEvent('ready');\n" +
             "  };\n" +
-            "  \n" +
+            "\n" +
             "  mraidbridge.fireChangeEvent = function(properties) {\n" +
             "    mraidbridge.fireEvent('change', properties);\n" +
             "  };\n" +
-            "  \n" +
+            "\n" +
             "  mraidbridge.fireErrorEvent = function(message, action) {\n" +
             "    mraidbridge.fireEvent('error', message, action);\n" +
             "  };\n" +
@@ -54,37 +55,37 @@
             "      }\n" +
             "    }\n" +
             "  };\n" +
-            "  \n" +
+            "\n" +
             "  mraidbridge.nativeCallComplete = function(command) {\n" +
             "    if (nativeCallQueue.length === 0) {\n" +
             "      nativeCallInFlight = false;\n" +
             "      return;\n" +
             "    }\n" +
-            "    \n" +
+            "\n" +
             "    var nextCall = nativeCallQueue.pop();\n" +
             "    window.location = nextCall;\n" +
             "  };\n" +
-            "  \n" +
+            "\n" +
             "  mraidbridge.executeNativeCall = function(command) {\n" +
             "    var call = 'mraid://' + command;\n" +
-            "    \n" +
+            "\n" +
             "    var key, value;\n" +
             "    var isFirstArgument = true;\n" +
-            "    \n" +
+            "\n" +
             "    for (var i = 1; i < arguments.length; i += 2) {\n" +
             "      key = arguments[i];\n" +
             "      value = arguments[i + 1];\n" +
-            "      \n" +
+            "\n" +
             "      if (value === null) continue;\n" +
-            "      \n" +
+            "\n" +
             "      if (isFirstArgument) {\n" +
             "        call += '?';\n" +
             "        isFirstArgument = false;\n" +
             "      } else {\n" +
             "        call += '&';\n" +
             "      }\n" +
-            "      \n" +
-            "      call += key + '=' + escape(value);\n" +
+            "\n" +
+            "      call += encodeURIComponent(key) + '=' + encodeURIComponent(value);\n" +
             "    }\n" +
             "\n" +
             "    if (nativeCallInFlight) {\n" +
@@ -94,19 +95,19 @@
             "      window.location = call;\n" +
             "    }\n" +
             "  };\n" +
-            "  \n" +
+            "\n" +
             "  //////////////////////////////////////////////////////////////////////////////////////////////////\n" +
-            "  \n" +
+            "\n" +
             "  mraidbridge.addEventListener = function(event, listener) {\n" +
             "    var eventListeners;\n" +
             "    listeners[event] = listeners[event] || [];\n" +
             "    eventListeners = listeners[event];\n" +
-            "    \n" +
+            "\n" +
             "    for (var l in eventListeners) {\n" +
             "      // Listener already registered, so no need to add it.\n" +
             "      if (listener === l) return;\n" +
             "    }\n" +
-            "    \n" +
+            "\n" +
             "    eventListeners.push(listener);\n" +
             "  };\n" +
             "\n" +
@@ -126,18 +127,18 @@
             "(function() {\n" +
             "  var mraid = window.mraid = {};\n" +
             "  var bridge = window.mraidbridge;\n" +
-            "  \n" +
+            "\n" +
             "  // Constants. ////////////////////////////////////////////////////////////////////////////////////\n" +
-            "  \n" +
+            "\n" +
             "  var VERSION = mraid.VERSION = '1.0';\n" +
-            "  \n" +
+            "\n" +
             "  var STATES = mraid.STATES = {\n" +
             "    LOADING: 'loading',     // Initial state.\n" +
             "    DEFAULT: 'default',\n" +
             "    EXPANDED: 'expanded',\n" +
             "    HIDDEN: 'hidden'\n" +
             "  };\n" +
-            "  \n" +
+            "\n" +
             "  var EVENTS = mraid.EVENTS = {\n" +
             "    ERROR: 'error',\n" +
             "    INFO: 'info',\n" +
@@ -145,7 +146,7 @@
             "    STATECHANGE: 'stateChange',\n" +
             "    VIEWABLECHANGE: 'viewableChange'\n" +
             "  };\n" +
-            "  \n" +
+            "\n" +
             "  var PLACEMENT_TYPES = mraid.PLACEMENT_TYPES = {\n" +
             "    UNKNOWN: 'unknown',\n" +
             "    INLINE: 'inline',\n" +
@@ -166,26 +167,34 @@
             "  var hasSetCustomSize = false;\n" +
             "\n" +
             "  var hasSetCustomClose = false;\n" +
-            " \n" +
+            "\n" +
             "  var listeners = {};\n" +
             "\n" +
             "  // Internal MRAID state. Modified by the native SDK. /////////////////////////////////////////////\n" +
-            "  \n" +
+            "\n" +
             "  var state = STATES.LOADING;\n" +
-            "  \n" +
+            "\n" +
             "  var isViewable = false;\n" +
-            "  \n" +
+            "\n" +
             "  var screenSize = { width: -1, height: -1 };\n" +
             "\n" +
             "  var placementType = PLACEMENT_TYPES.UNKNOWN;\n" +
-            "  \n" +
+            "\n" +
+            "  var supports = {\n" +
+            "    sms: false,\n" +
+            "    tel: false,\n" +
+            "    calendar: false,\n" +
+            "    storePicture: false,\n" +
+            "    inlineVideo: false\n" +
+            "  };\n" +
+            "\n" +
             "  //////////////////////////////////////////////////////////////////////////////////////////////////\n" +
-            "  \n" +
+            "\n" +
             "  var EventListeners = function(event) {\n" +
             "    this.event = event;\n" +
             "    this.count = 0;\n" +
             "    var listeners = {};\n" +
-            "    \n" +
+            "\n" +
             "    this.add = function(func) {\n" +
             "      var id = String(func);\n" +
             "      if (!listeners[id]) {\n" +
@@ -193,7 +202,7 @@
             "        this.count++;\n" +
             "      }\n" +
             "    };\n" +
-            "    \n" +
+            "\n" +
             "    this.remove = function(func) {\n" +
             "      var id = String(func);\n" +
             "      if (listeners[id]) {\n" +
@@ -205,19 +214,19 @@
             "        return false;\n" +
             "      }\n" +
             "    };\n" +
-            "    \n" +
+            "\n" +
             "    this.removeAll = function() {\n" +
             "      for (var id in listeners) {\n" +
             "        if (listeners.hasOwnProperty(id)) this.remove(listeners[id]);\n" +
             "      }\n" +
             "    };\n" +
-            "    \n" +
+            "\n" +
             "    this.broadcast = function(args) {\n" +
             "      for (var id in listeners) {\n" +
             "        if (listeners.hasOwnProperty(id)) listeners[id].apply({}, args);\n" +
             "      }\n" +
             "    };\n" +
-            "    \n" +
+            "\n" +
             "    this.toString = function() {\n" +
             "      var out = [event, ':'];\n" +
             "      for (var id in listeners) {\n" +
@@ -226,7 +235,7 @@
             "      return out.join('');\n" +
             "    };\n" +
             "  };\n" +
-            "  \n" +
+            "\n" +
             "  var broadcastEvent = function() {\n" +
             "    var args = new Array(arguments.length);\n" +
             "    var l = arguments.length;\n" +
@@ -234,21 +243,21 @@
             "    var event = args.shift();\n" +
             "    if (listeners[event]) listeners[event].broadcast(args);\n" +
             "  };\n" +
-            "  \n" +
+            "\n" +
             "  var contains = function(value, array) {\n" +
             "    for (var i in array) {\n" +
             "      if (array[i] === value) return true;\n" +
             "    }\n" +
             "    return false;\n" +
             "  };\n" +
-            "  \n" +
+            "\n" +
             "  var clone = function(obj) {\n" +
             "    if (obj === null) return null;\n" +
             "    var f = function() {};\n" +
             "    f.prototype = obj;\n" +
             "    return new f();\n" +
             "  };\n" +
-            "  \n" +
+            "\n" +
             "  var stringify = function(obj) {\n" +
             "    if (typeof obj === 'object') {\n" +
             "      var out = [];\n" +
@@ -263,11 +272,11 @@
             "      }\n" +
             "    } else return String(obj);\n" +
             "  };\n" +
-            "  \n" +
+            "\n" +
             "  var trim = function(str) {\n" +
             "    return str.replace(/^\\s+|\\s+$/g, '');\n" +
             "  };\n" +
-            "  \n" +
+            "\n" +
             "  // Functions that will be invoked by the native SDK whenever a \"change\" event occurs.\n" +
             "  var changeHandlers = {\n" +
             "    state: function(val) {\n" +
@@ -278,13 +287,13 @@
             "      broadcastEvent(EVENTS.INFO, 'Set state to ' + stringify(val));\n" +
             "      broadcastEvent(EVENTS.STATECHANGE, state);\n" +
             "    },\n" +
-            "    \n" +
+            "\n" +
             "    viewable: function(val) {\n" +
             "      isViewable = val;\n" +
             "      broadcastEvent(EVENTS.INFO, 'Set isViewable to ' + stringify(val));\n" +
             "      broadcastEvent(EVENTS.VIEWABLECHANGE, isViewable);\n" +
             "    },\n" +
-            "    \n" +
+            "\n" +
             "    placementType: function(val) {\n" +
             "      broadcastEvent(EVENTS.INFO, 'Set placementType to ' + stringify(val));\n" +
             "      placementType = val;\n" +
@@ -301,15 +310,20 @@
             "        expandProperties['height'] = screenSize['height'];\n" +
             "      }\n" +
             "    },\n" +
-            "    \n" +
+            "\n" +
             "    expandProperties: function(val) {\n" +
             "      broadcastEvent(EVENTS.INFO, 'Merging expandProperties with ' + stringify(val));\n" +
             "      for (var key in val) {\n" +
             "        if (val.hasOwnProperty(key)) expandProperties[key] = val[key];\n" +
             "      }\n" +
-            "    }\n" +
+            "    },\n" +
+            "\n" +
+            "    supports: function(val) {\n" +
+            "      broadcastEvent(EVENTS.INFO, 'Set supports to ' + stringify(val));\n" +
+            "        supports = val;\n" +
+            "    },\n" +
             "  };\n" +
-            "  \n" +
+            "\n" +
             "  var validate = function(obj, validators, action, merge) {\n" +
             "    if (!merge) {\n" +
             "      // Check to see if any required properties are missing.\n" +
@@ -325,29 +339,29 @@
             "        }\n" +
             "      }\n" +
             "    }\n" +
-            "    \n" +
+            "\n" +
             "    for (var prop in obj) {\n" +
             "      var validator = validators[prop];\n" +
             "      var value = obj[prop];\n" +
             "      if (validator && !validator(value)) {\n" +
             "        // Failed validation.\n" +
-            "        broadcastEvent(EVENTS.ERROR, 'Value of property ' + prop + ' is invalid.', \n" +
+            "        broadcastEvent(EVENTS.ERROR, 'Value of property ' + prop + ' is invalid.',\n" +
             "          action);\n" +
             "        return false;\n" +
             "      }\n" +
             "    }\n" +
             "    return true;\n" +
             "  };\n" +
-            "  \n" +
+            "\n" +
             "  var expandPropertyValidators = {\n" +
             "    width: function(v) { return !isNaN(v) && v >= 0; },\n" +
             "    height: function(v) { return !isNaN(v) && v >= 0; },\n" +
             "    useCustomClose: function(v) { return (typeof v === 'boolean'); },\n" +
             "    lockOrientation: function(v) { return (typeof v === 'boolean'); }\n" +
             "  };\n" +
-            "  \n" +
+            "\n" +
             "  //////////////////////////////////////////////////////////////////////////////////////////////////\n" +
-            "  \n" +
+            "\n" +
             "  bridge.addEventListener('change', function(properties) {\n" +
             "    for (var p in properties) {\n" +
             "      if (properties.hasOwnProperty(p)) {\n" +
@@ -356,17 +370,17 @@
             "      }\n" +
             "    }\n" +
             "  });\n" +
-            "  \n" +
+            "\n" +
             "  bridge.addEventListener('error', function(message, action) {\n" +
             "    broadcastEvent(EVENTS.ERROR, message, action);\n" +
             "  });\n" +
-            "  \n" +
+            "\n" +
             "  bridge.addEventListener('ready', function() {\n" +
             "    broadcastEvent(EVENTS.READY);\n" +
             "  });\n" +
             "\n" +
             "  //////////////////////////////////////////////////////////////////////////////////////////////////\n" +
-            "  \n" +
+            "\n" +
             "  mraid.addEventListener = function(event, listener) {\n" +
             "    if (!event || !listener) {\n" +
             "      broadcastEvent(EVENTS.ERROR, 'Both event and listener are required.', 'addEventListener');\n" +
@@ -377,30 +391,30 @@
             "      listeners[event].add(listener);\n" +
             "    }\n" +
             "  };\n" +
-            "  \n" +
+            "\n" +
             "  mraid.close = function() {\n" +
             "    if (state === STATES.HIDDEN) {\n" +
             "      broadcastEvent(EVENTS.ERROR, 'Ad cannot be closed when it is already hidden.',\n" +
             "        'close');\n" +
             "    } else bridge.executeNativeCall('close');\n" +
             "  };\n" +
-            "  \n" +
+            "\n" +
             "  mraid.expand = function(URL) {\n" +
-            "    if (state !== STATES.DEFAULT) {\n" +
+            "    if (this.getState() !== STATES.DEFAULT) {\n" +
             "      broadcastEvent(EVENTS.ERROR, 'Ad can only be expanded from the default state.', 'expand');\n" +
             "    } else {\n" +
             "      var args = ['expand'];\n" +
-            "      \n" +
-            "      if (hasSetCustomClose) {\n" +
+            "\n" +
+            "      if (this.getHasSetCustomClose()) {\n" +
             "        args = args.concat(['shouldUseCustomClose', expandProperties.useCustomClose ? 'true' : 'false']);\n" +
             "      }\n" +
             "\n" +
-            "      if (hasSetCustomSize) {\n" +
+            "      if (this.getHasSetCustomSize()) {\n" +
             "        if (expandProperties.width >= 0 && expandProperties.height >= 0) {\n" +
             "          args = args.concat(['w', expandProperties.width, 'h', expandProperties.height]);\n" +
             "        }\n" +
             "      }\n" +
-            "      \n" +
+            "\n" +
             "      if (typeof expandProperties.lockOrientation !== 'undefined') {\n" +
             "        args = args.concat(['lockOrientation', expandProperties.lockOrientation]);\n" +
             "      }\n" +
@@ -408,11 +422,19 @@
             "      if (URL) {\n" +
             "        args = args.concat(['url', URL]);\n" +
             "      }\n" +
-            "      \n" +
+            "\n" +
             "      bridge.executeNativeCall.apply(this, args);\n" +
             "    }\n" +
             "  };\n" +
-            "  \n" +
+            "\n" +
+            "  mraid.getHasSetCustomClose = function() {\n" +
+            "      return hasSetCustomClose;\n" +
+            "  };\n" +
+            "\n" +
+            "  mraid.getHasSetCustomSize = function() {\n" +
+            "      return hasSetCustomSize;\n" +
+            "  };\n" +
+            "\n" +
             "  mraid.getExpandProperties = function() {\n" +
             "    var properties = {\n" +
             "      width: expandProperties.width,\n" +
@@ -422,23 +444,23 @@
             "    };\n" +
             "    return properties;\n" +
             "  };\n" +
-            "  \n" +
+            "\n" +
             "  mraid.getPlacementType = function() {\n" +
             "    return placementType;\n" +
             "  };\n" +
-            "  \n" +
+            "\n" +
             "  mraid.getState = function() {\n" +
             "    return state;\n" +
             "  };\n" +
-            "  \n" +
+            "\n" +
             "  mraid.getVersion = function() {\n" +
             "    return mraid.VERSION;\n" +
             "  };\n" +
-            "  \n" +
+            "\n" +
             "  mraid.isViewable = function() {\n" +
             "    return isViewable;\n" +
             "  };\n" +
-            "  \n" +
+            "\n" +
             "  mraid.open = function(URL) {\n" +
             "    if (!URL) broadcastEvent(EVENTS.ERROR, 'URL is required.', 'open');\n" +
             "    else bridge.executeNativeCall('open', 'url', URL);\n" +
@@ -448,18 +470,18 @@
             "    if (!event) broadcastEvent(EVENTS.ERROR, 'Event is required.', 'removeEventListener');\n" +
             "    else {\n" +
             "      if (listener && (!listeners[event] || !listeners[event].remove(listener))) {\n" +
-            "        broadcastEvent(EVENTS.ERROR, 'Listener not currently registered for event.', \n" +
+            "        broadcastEvent(EVENTS.ERROR, 'Listener not currently registered for event.',\n" +
             "          'removeEventListener');\n" +
             "        return;\n" +
             "      } else if (listeners[event]) listeners[event].removeAll();\n" +
-            "      \n" +
+            "\n" +
             "      if (listeners[event] && listeners[event].count === 0) {\n" +
             "        listeners[event] = null;\n" +
             "        delete listeners[event];\n" +
             "      }\n" +
             "    }\n" +
             "  };\n" +
-            "  \n" +
+            "\n" +
             "  mraid.setExpandProperties = function(properties) {\n" +
             "    if (validate(properties, expandPropertyValidators, 'setExpandProperties', true)) {\n" +
             "      if (properties.hasOwnProperty('width') || properties.hasOwnProperty('height')) {\n" +
@@ -476,11 +498,247 @@
             "      }\n" +
             "    }\n" +
             "  };\n" +
-            "  \n" +
+            "\n" +
             "  mraid.useCustomClose = function(shouldUseCustomClose) {\n" +
             "    expandProperties.useCustomClose = shouldUseCustomClose;\n" +
             "    hasSetCustomClose = true;\n" +
             "    bridge.executeNativeCall('usecustomclose', 'shouldUseCustomClose', shouldUseCustomClose);\n" +
             "  };\n" +
-            "}());";
+            "\n" +
+            "  // MRAID 2.0 APIs ////////////////////////////////////////////////////////////////////////////////\n" +
+            "\n" +
+            "  mraid.createCalendarEvent = function(parameters) {\n" +
+            "    CalendarEventParser.initialize(parameters);\n" +
+            "    if (CalendarEventParser.parse()) {\n" +
+            "      bridge.executeNativeCall.apply(this, CalendarEventParser.arguments);\n" +
+            "    } else {\n" +
+            "      broadcastEvent(EVENTS.ERROR, CalendarEventParser.errors[0], 'createCalendarEvent');\n" +
+            "    }\n" +
+            "  };\n" +
+            "\n" +
+            "  mraid.supports = function(feature) {\n" +
+            "    return supports[feature];\n" +
+            "  };\n" +
+            "\n" +
+            "  mraid.playVideo = function(uri) {\n" +
+            "    if (!mraid.isViewable()) {\n" +
+            "      broadcastEvent(EVENTS.ERROR, 'playVideo cannot be called until the ad is viewable', 'playVideo');\n" +
+            "      return;\n" +
+            "    }\n" +
+            "\n" +
+            "    if (!uri) {\n" +
+            "      broadcastEvent(EVENTS.ERROR, 'playVideo must be called with a valid URI', 'playVideo');\n" +
+            "    } else {\n" +
+            "      bridge.executeNativeCall.apply(this, ['playVideo', 'uri', uri]);\n" +
+            "    }\n" +
+            "  };\n" +
+            "\n" +
+            "  mraid.storePicture = function(uri) {\n" +
+            "    if (!mraid.isViewable()) {\n" +
+            "      broadcastEvent(EVENTS.ERROR, 'storePicture cannot be called until the ad is viewable', 'storePicture');\n" +
+            "      return;\n" +
+            "    }\n" +
+            "\n" +
+            "    if (!uri) {\n" +
+            "      broadcastEvent(EVENTS.ERROR, 'storePicture must be called with a valid URI', 'storePicture');\n" +
+            "    } else {\n" +
+            "      bridge.executeNativeCall.apply(this, ['storePicture', 'uri', uri]);\n" +
+            "    }\n" +
+            "  };\n" +
+            "\n" +
+            "  mraid.resize = function() {\n" +
+            "    bridge.executeNativeCall('resize');\n" +
+            "  };\n" +
+            "\n" +
+            "  mraid.getResizeProperties = function() {\n" +
+            "    bridge.executeNativeCall('getResizeProperties');\n" +
+            "  };\n" +
+            "\n" +
+            "  mraid.setResizeProperties = function(resizeProperties) {\n" +
+            "    bridge.executeNativeCall('setResizeProperties', 'resizeProperties', resizeProperties);\n" +
+            "  };\n" +
+            "\n" +
+            "  mraid.getCurrentPosition = function() {\n" +
+            "    bridge.executeNativeCall('getCurrentPosition');\n" +
+            "  };\n" +
+            "\n" +
+            "  mraid.getDefaultPosition = function() {\n" +
+            "    bridge.executeNativeCall('getDefaultPosition');\n" +
+            "  };\n" +
+            "\n" +
+            "  mraid.getMaxSize = function() {\n" +
+            "    bridge.executeNativeCall('getMaxSize');\n" +
+            "  };\n" +
+            "\n" +
+            "  mraid.getScreenSize = function() {\n" +
+            "    bridge.executeNativeCall('getScreenSize');\n" +
+            "  };\n" +
+            "\n" +
+            "  var CalendarEventParser = {\n" +
+            "    initialize: function(parameters) {\n" +
+            "      this.parameters = parameters;\n" +
+            "      this.errors = [];\n" +
+            "      this.arguments = ['createCalendarEvent'];\n" +
+            "    },\n" +
+            "\n" +
+            "    parse: function() {\n" +
+            "      if (!this.parameters) {\n" +
+            "        this.errors.push('The object passed to createCalendarEvent cannot be null.');\n" +
+            "      } else {\n" +
+            "        this.parseDescription();\n" +
+            "        this.parseLocation();\n" +
+            "        this.parseSummary();\n" +
+            "        this.parseStartAndEndDates();\n" +
+            "        this.parseReminder();\n" +
+            "        this.parseRecurrence();\n" +
+            "        this.parseTransparency();\n" +
+            "      }\n" +
+            "\n" +
+            "      var errorCount = this.errors.length;\n" +
+            "      if (errorCount) {\n" +
+            "        this.arguments.length = 0;\n" +
+            "      }\n" +
+            "\n" +
+            "      return (errorCount === 0);\n" +
+            "    },\n" +
+            "\n" +
+            "    parseDescription: function() {\n" +
+            "      this._processStringValue('description');\n" +
+            "    },\n" +
+            "\n" +
+            "    parseLocation: function() {\n" +
+            "      this._processStringValue('location');\n" +
+            "    },\n" +
+            "\n" +
+            "    parseSummary: function() {\n" +
+            "      this._processStringValue('summary');\n" +
+            "    },\n" +
+            "\n" +
+            "    parseStartAndEndDates: function() {\n" +
+            "      this._processDateValue('start');\n" +
+            "      this._processDateValue('end');\n" +
+            "    },\n" +
+            "\n" +
+            "    parseReminder: function() {\n" +
+            "      var reminder = this._getParameter('reminder');\n" +
+            "      if (!reminder) {\n" +
+            "        return;\n" +
+            "      }\n" +
+            "\n" +
+            "      if (reminder < 0) {\n" +
+            "        this.arguments.push('relativeReminder');\n" +
+            "        this.arguments.push(parseInt(reminder) / 1000);\n" +
+            "      } else {\n" +
+            "        this.arguments.push('absoluteReminder');\n" +
+            "        this.arguments.push(reminder);\n" +
+            "      }\n" +
+            "    },\n" +
+            "\n" +
+            "    parseRecurrence: function() {\n" +
+            "      var recurrenceDict = this._getParameter('recurrence');\n" +
+            "      if (!recurrenceDict) {\n" +
+            "        return;\n" +
+            "      }\n" +
+            "\n" +
+            "      this.parseRecurrenceInterval(recurrenceDict);\n" +
+            "      this.parseRecurrenceFrequency(recurrenceDict);\n" +
+            "      this.parseRecurrenceEndDate(recurrenceDict);\n" +
+            "      this.parseRecurrenceArrayValue(recurrenceDict, 'daysInWeek');\n" +
+            "      this.parseRecurrenceArrayValue(recurrenceDict, 'daysInMonth');\n" +
+            "      this.parseRecurrenceArrayValue(recurrenceDict, 'daysInYear');\n" +
+            "      this.parseRecurrenceArrayValue(recurrenceDict, 'monthsInYear');\n" +
+            "    },\n" +
+            "\n" +
+            "    parseTransparency: function() {\n" +
+            "      var validValues = ['opaque', 'transparent'];\n" +
+            "\n" +
+            "      if (this.parameters.hasOwnProperty('transparency')) {\n" +
+            "        var transparency = this.parameters['transparency'];\n" +
+            "        if (contains(transparency, validValues)) {\n" +
+            "          this.arguments.push('transparency');\n" +
+            "          this.arguments.push(transparency);\n" +
+            "        } else {\n" +
+            "          this.errors.push('transparency must be opaque or transparent');\n" +
+            "        }\n" +
+            "      }\n" +
+            "    },\n" +
+            "\n" +
+            "    parseRecurrenceArrayValue: function(recurrenceDict, kind) {\n" +
+            "      if (recurrenceDict.hasOwnProperty(kind)) {\n" +
+            "        var array = recurrenceDict[kind];\n" +
+            "        if (!array || !(array instanceof Array)) {\n" +
+            "          this.errors.push(kind + ' must be an array.');\n" +
+            "        } else {\n" +
+            "          var arrayStr = array.join(',');\n" +
+            "          this.arguments.push(kind);\n" +
+            "          this.arguments.push(arrayStr);\n" +
+            "        }\n" +
+            "      }\n" +
+            "    },\n" +
+            "\n" +
+            "    parseRecurrenceInterval: function(recurrenceDict) {\n" +
+            "      if (recurrenceDict.hasOwnProperty('interval')) {\n" +
+            "        var interval = recurrenceDict['interval'];\n" +
+            "        if (!interval) {\n" +
+            "          this.errors.push('Recurrence interval cannot be null.');\n" +
+            "        } else {\n" +
+            "          this.arguments.push('interval');\n" +
+            "          this.arguments.push(interval);\n" +
+            "        }\n" +
+            "      } else {\n" +
+            "        // If a recurrence rule was specified without an interval, use a default value of 1.\n" +
+            "        this.arguments.push('interval');\n" +
+            "        this.arguments.push(1);\n" +
+            "      }\n" +
+            "    },\n" +
+            "\n" +
+            "    parseRecurrenceFrequency: function(recurrenceDict) {\n" +
+            "      if (recurrenceDict.hasOwnProperty('frequency')) {\n" +
+            "        var frequency = recurrenceDict['frequency'];\n" +
+            "        var validFrequencies = ['daily', 'weekly', 'monthly', 'yearly'];\n" +
+            "        if (contains(frequency, validFrequencies)) {\n" +
+            "          this.arguments.push('frequency');\n" +
+            "          this.arguments.push(frequency);\n" +
+            "        } else {\n" +
+            "          this.errors.push('Recurrence frequency must be one of: \"daily\", \"weekly\", \"monthly\", \"yearly\".');\n" +
+            "        }\n" +
+            "      }\n" +
+            "    },\n" +
+            "\n" +
+            "    parseRecurrenceEndDate: function(recurrenceDict) {\n" +
+            "      var expires = recurrenceDict['expires'];\n" +
+            "\n" +
+            "      if (!expires) {\n" +
+            "        return;\n" +
+            "      }\n" +
+            "\n" +
+            "      this.arguments.push('expires');\n" +
+            "      this.arguments.push(expires);\n" +
+            "    },\n" +
+            "\n" +
+            "    _getParameter: function(key) {\n" +
+            "      if (this.parameters.hasOwnProperty(key)) {\n" +
+            "        return this.parameters[key];\n" +
+            "      }\n" +
+            "\n" +
+            "      return null;\n" +
+            "    },\n" +
+            "\n" +
+            "    _processStringValue: function(kind) {\n" +
+            "      if (this.parameters.hasOwnProperty(kind)) {\n" +
+            "        var value = this.parameters[kind];\n" +
+            "        this.arguments.push(kind);\n" +
+            "        this.arguments.push(value);\n" +
+            "      }\n" +
+            "    },\n" +
+            "\n" +
+            "    _processDateValue: function(kind) {\n" +
+            "      if (this.parameters.hasOwnProperty(kind)) {\n" +
+            "        var dateString = this._getParameter(kind);\n" +
+            "        this.arguments.push(kind);\n" +
+            "        this.arguments.push(dateString);\n" +
+            "      }\n" +
+            "    },\n" +
+            "  };\n" +
+            "}());\n";
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/HttpResponses.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/HttpResponses.java
index 32324fc7..c50ff4ac 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/HttpResponses.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/HttpResponses.java
@@ -14,7 +14,11 @@ public static int extractIntHeader(HttpResponse response, String headerName) {
         return (headerValue != null) ? Integer.parseInt(headerValue.trim()) : 0;
     }
 
-    public static boolean extractBooleanHeader(HttpResponse response, String headerName) {
-        return !"0".equals(extractHeader(response, headerName));
+    public static boolean extractBooleanHeader(HttpResponse response, String headerName, boolean defaultValue) {
+        String header = extractHeader(response, headerName);
+        if (header == null) {
+            return defaultValue;
+        }
+        return header.equals("1");
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/MraidUtils.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/MraidUtils.java
new file mode 100644
index 00000000..f953b7ef
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/MraidUtils.java
@@ -0,0 +1,48 @@
+package com.mopub.mobileads.util;
+
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.net.Uri;
+import android.os.Environment;
+import com.mopub.mobileads.MraidVideoPlayerActivity;
+import com.mopub.mobileads.Utils;
+
+import static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;
+import static android.os.Environment.MEDIA_MOUNTED;
+
+public class MraidUtils {
+    public static final String ANDROID_CALENDAR_CONTENT_TYPE = "vnd.android.cursor.item/event";
+
+    public static boolean isTelAvailable(Context context) {
+        Intent telIntent = new Intent(Intent.ACTION_DIAL);
+        telIntent.setData(Uri.parse("tel:"));
+
+        return Utils.deviceCanHandleIntent(context, telIntent);
+    }
+
+    public static boolean isSmsAvailable(Context context) {
+        Intent smsIntent = new Intent(Intent.ACTION_VIEW);
+        smsIntent.setData(Uri.parse("sms:"));
+
+        return Utils.deviceCanHandleIntent(context, smsIntent);
+    }
+
+    public static boolean isStorePictureSupported(Context context) {
+        return MEDIA_MOUNTED.equals(Environment.getExternalStorageState())
+                && context.checkCallingOrSelfPermission(WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
+    }
+
+    public static boolean isCalendarAvailable(Context context) {
+        Intent calendarIntent = new Intent(Intent.ACTION_INSERT).setType(ANDROID_CALENDAR_CONTENT_TYPE);
+
+        return VersionCode.currentApiLevel().isAtLeast(VersionCode.ICE_CREAM_SANDWICH)
+                && Utils.deviceCanHandleIntent(context, calendarIntent);
+    }
+
+    public static boolean isInlineVideoAvailable(Context context) {
+        Intent mraidVideoIntent = new Intent(context, MraidVideoPlayerActivity.class);
+
+        return Utils.deviceCanHandleIntent(context, mraidVideoIntent);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/Streams.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/Streams.java
new file mode 100644
index 00000000..eba2f9f1
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/Streams.java
@@ -0,0 +1,32 @@
+package com.mopub.mobileads.util;
+
+import java.io.Closeable;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+
+public class Streams {
+    public static void copyContent(InputStream in, OutputStream out) {
+        byte[] buffer = new byte[65536];
+        int len;
+        try {
+            while((len = in.read(buffer)) != -1){
+                out.write(buffer, 0, len);
+            }
+        } catch (IOException e) {
+            // too bad
+        }
+    }
+
+    public static void closeStream(Closeable stream) {
+        if (stream == null) {
+            return;
+        }
+
+        try {
+            stream.close();
+        } catch (IOException e) {
+            // Unable to close the stream
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/VersionCode.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/VersionCode.java
new file mode 100644
index 00000000..9686bcc2
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/VersionCode.java
@@ -0,0 +1,60 @@
+package com.mopub.mobileads.util;
+
+import android.os.Build;
+
+public enum VersionCode {
+    BASE(1),
+    BASE_1_1(2),
+    CUPCAKE(3),
+    DONUT(4),
+    ECLAIR(5),
+    ECLAIR_0_1(6),
+    ECLAIR_MR1(7),
+    FROYO(8),
+    GINGERBREAD(9),
+    GINGERBREAD_MR1(10),
+    HONEYCOMB(11),
+    HONEYCOMB_MR1(12),
+    HONEYCOMB_MR2(13),
+    ICE_CREAM_SANDWICH(14),
+    ICE_CREAM_SANDWICH_MR1(15),
+    JELLY_BEAN(16),
+    JELLY_BEAN_MR1(17),
+    JELLY_BEAN_MR2(18),
+    CUR_DEVELOPMENT(10000);
+
+    private int mApiLevel;
+
+    public static VersionCode currentApiLevel() {
+        return forApiLevel(Build.VERSION.SDK_INT);
+    }
+
+    private static VersionCode forApiLevel(int targetApiLevel) {
+        for (VersionCode versionCode : VersionCode.values()) {
+            if (versionCode.getApiLevel() == targetApiLevel) {
+                return versionCode;
+            }
+        }
+        return CUR_DEVELOPMENT;
+    }
+
+    private VersionCode(int apiLevel) {
+        this.mApiLevel = apiLevel;
+    }
+
+    public int getApiLevel() {
+        return mApiLevel;
+    }
+
+    public boolean isAtMost(VersionCode that) {
+        return this.getApiLevel() <= that.getApiLevel();
+    }
+
+    public boolean isAtLeast(VersionCode that) {
+        return this.getApiLevel() >= that.getApiLevel();
+    }
+
+    public boolean isBelow(VersionCode that) {
+        return this.getApiLevel() < that.getApiLevel();
+    }
+}
diff --git a/robotium-tests/src/main/java/com/mopub/mobileads/test/RobotiumTestSupportActivityTest.java b/robotium-tests/src/main/java/com/mopub/mobileads/test/RobotiumTestSupportActivityTest.java
index 8e14fcd4..96e99866 100644
--- a/robotium-tests/src/main/java/com/mopub/mobileads/test/RobotiumTestSupportActivityTest.java
+++ b/robotium-tests/src/main/java/com/mopub/mobileads/test/RobotiumTestSupportActivityTest.java
@@ -9,6 +9,7 @@
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialAdListener;
 
 public class RobotiumTestSupportActivityTest extends ActivityInstrumentationTestCase2<RobotiumTestSupportActivity>{
+    private static final long NETWORK_SLEEP_TIME = 3000;
     private Solo solo;
 
     public RobotiumTestSupportActivityTest() {
@@ -34,10 +35,13 @@ public void testMoPubBannerLoadAndClick() throws Exception {
         moPubView.setBannerAdListener(listener);
 
         solo.clickOnButton("Load Banner");
-        Thread.sleep(2000);
+        Thread.sleep(NETWORK_SLEEP_TIME);
+        assertTrue("Banner was loaded.", listener.bannerWasLoaded());
+
         solo.clickOnView(moPubView);
-        Thread.sleep(2000);
-        assertTrue("Banner should click", listener.bannerWasClicked());
+        Thread.sleep(NETWORK_SLEEP_TIME);
+        assertTrue("Banner was clicked.", listener.bannerWasClicked());
+
         solo.assertCurrentActivity("expected an MraidBrowser", MraidBrowser.class);
     }
 
@@ -47,16 +51,16 @@ public void testMoPubInterstitialLoadShowAndClick() throws Exception {
         ((RobotiumTestSupportActivity) solo.getCurrentActivity()).setInterstitialListener(listener);
 
         solo.clickOnButton("Load Interstitial");
-        Thread.sleep(2000);
-        assertTrue("Interstitial should load", listener.interstitialWasLoaded());
+        Thread.sleep(NETWORK_SLEEP_TIME);
+        assertTrue("Interstitial was loaded.", listener.interstitialWasLoaded());
 
         solo.clickOnButton("Show Interstitial");
-        Thread.sleep(2000);
-        assertTrue("Interstitial should show", listener.interstitialWasShown());
+        Thread.sleep(NETWORK_SLEEP_TIME);
+        assertTrue("Interstitial was shown.", listener.interstitialWasShown());
         solo.assertCurrentActivity("expected MoPubActivity", MoPubActivity.class);
 
         solo.clickOnView(solo.getCurrentActivity().findViewById(R.id.content));
-        Thread.sleep(2000);
+        Thread.sleep(NETWORK_SLEEP_TIME);
         solo.assertCurrentActivity("expected MraidBrowser", MraidBrowser.class);
     }
 
@@ -66,14 +70,14 @@ public void testMoPubInterstitialLoadShowAndDismissWithCloseButton() throws Exce
         ((RobotiumTestSupportActivity) solo.getCurrentActivity()).setInterstitialListener(listener);
 
         solo.clickOnButton("Load Interstitial");
-        Thread.sleep(2000);
+        Thread.sleep(NETWORK_SLEEP_TIME);
 
         solo.clickOnButton("Show Interstitial");
-        Thread.sleep(2000);
+        Thread.sleep(NETWORK_SLEEP_TIME);
 
         solo.clickOnImageButton(0);
         Thread.sleep(500);
-        assertTrue("Interstitial should dismiss", listener.interstitialWasDismissed());
+        assertTrue("Interstitial was dismissed.", listener.interstitialWasDismissed());
     }
 
     public void testMoPubInterstitialLoadShowAndDismissWithBackButton() throws Exception {
@@ -82,13 +86,13 @@ public void testMoPubInterstitialLoadShowAndDismissWithBackButton() throws Excep
         ((RobotiumTestSupportActivity) solo.getCurrentActivity()).setInterstitialListener(listener);
 
         solo.clickOnButton("Load Interstitial");
-        Thread.sleep(2000);
+        Thread.sleep(NETWORK_SLEEP_TIME);
 
         solo.clickOnButton("Show Interstitial");
-        Thread.sleep(2000);
+        Thread.sleep(NETWORK_SLEEP_TIME);
 
         solo.goBack();
-        assertTrue("Interstitial should dismiss", listener.interstitialWasDismissed());
+        assertTrue("Interstitial was dismissed.", listener.interstitialWasDismissed());
     }
 
     private void enterBannerAdUnitId() {
diff --git a/script/check_extras b/script/check_extras
index 33c497f9..21845694 100755
--- a/script/check_extras
+++ b/script/check_extras
@@ -15,8 +15,10 @@ def check_current_extras():
         filename = filestem + '.java'
         extras_filepath = shared_values.EXTRAS_ROOT + filename
         demo_filepath = shared_values.DEMO_ROOT + filename
+        alt_demo_filepath = shared_values.ALT_DEMO_ROOT + filename
         robotium_filepath = shared_values.ROBOTIUM_ROOT + filename
-        
+
+
         if not os.path.exists(extras_filepath) :
             print extras_filepath + ' does not exist. Something is wrong. Exiting.'
             exit(1)
@@ -25,6 +27,10 @@ def check_current_extras():
             print 'checking simpleadsdemo: ' + filestem
             demo_is_sane = filepaths_match(extras_filepath, demo_filepath) and demo_is_sane
         
+        if os.path.exists(alt_demo_filepath) : 
+            print 'checking simpleadsdemo (alt): ' + filestem
+            demo_is_sane = filepaths_match(extras_filepath, alt_demo_filepath) and demo_is_sane
+        
         if os.path.exists(robotium_filepath) : 
             print 'checking robotium: ' + filestem
             robotium_is_sane = filepaths_match(extras_filepath, robotium_filepath) and robotium_is_sane
@@ -38,3 +44,4 @@ for branch in shared_values.branches_synced_with_master:
         print 'Problem in branch: ' + branch + "\n"
 
 os_helper.system_quiet('git co ' + original_branch)
+
diff --git a/script/git_helper.pyc b/script/git_helper.pyc
index 1b529618..650401af 100644
Binary files a/script/git_helper.pyc and b/script/git_helper.pyc differ
diff --git a/script/git_pull_all b/script/git_pull_all
new file mode 100755
index 00000000..aba03129
--- /dev/null
+++ b/script/git_pull_all
@@ -0,0 +1,13 @@
+#!/usr/bin/python
+import os
+
+import shared_values
+import git_helper
+import os_helper
+
+original_branch = git_helper.git_current_branch()
+for branch in shared_values.branches_synced_with_master:
+    os_helper.try_system('git co ' + branch)
+    os_helper.try_system('git pull')
+
+os_helper.system_quiet('git co ' + original_branch)
diff --git a/script/make_bundles b/script/make_bundles
index a1f72ed2..b0c46832 100755
--- a/script/make_bundles
+++ b/script/make_bundles
@@ -13,9 +13,9 @@ FULL_FILENAME = 'mopub-android-full-sdk'
 AWS_ID = 'AWS_ACCESS_KEY_ID'
 AWS_SECRET = 'AWS_SECRET_ACCESS_KEY'
 
-TEMP_SDK_PATH = TEMP_STAGING_PATH + '/mopub-android-sdk/mopub-sdk'
+TEMP_SDK_PATH = os_helper.TEMP_STAGING_PATH + '/mopub-android-sdk/mopub-sdk'
 TEMP_MOPUB_PACKAGE = TEMP_SDK_PATH + '/src/main/java/com/mopub/mobileads'
-THIRD_PARTY_LIBS = TEMP_STAGING_PATH + '/mopub-android/libs'
+THIRD_PARTY_LIBS = os_helper.TEMP_STAGING_PATH + '/mopub-android/libs'
 TEMP_BASE_SDK_ZIP_FILE = '/tmp/' + BASE_FILENAME + '.zip'
 TEMP_FULL_SDK_ZIP_FILE = '/tmp/' + FULL_FILENAME + '.zip'
 
@@ -26,16 +26,16 @@ if len(os.sys.argv) > 1:
 def clone_private_repo():
     print 'Cloning the mopub-android (private) repo'
     os.system('git clone https://github.com/mopub/mopub-android.git')
-    os.chdir(TEMP_STAGING_PATH + '/mopub-android')
+    os.chdir(os_helper.TEMP_STAGING_PATH + '/mopub-android')
     if os.system('git checkout ' + release_branch):
         print 'couldn\'t check out' + release_branch
         exit(1)
-    os.chdir(TEMP_STAGING_PATH)
+    os.chdir(os_helper.TEMP_STAGING_PATH)
 
 def start_sdk_staging():
     os_helper.init_temp_staging()
     print 'Moving to staging path'
-    os.chdir(TEMP_STAGING_PATH)
+    os.chdir(os_helper.TEMP_STAGING_PATH)
 
     clone_private_repo()
 
@@ -67,7 +67,7 @@ def create_full_bundle():
     custom_events = ['MillennialBanner.java', 'MillennialInterstitial.java', 'GoogleAdMobBanner.java', 'GoogleAdMobInterstitial.java']
 
     for custom_event in custom_events:
-        os.system('cp ' + TEMP_STAGING_PATH + custom_event_folder + '/' + custom_event + ' ' + TEMP_MOPUB_PACKAGE)
+        os.system('cp ' + os_helper.TEMP_STAGING_PATH + custom_event_folder + '/' + custom_event + ' ' + TEMP_MOPUB_PACKAGE)
 
     # copy jars (where do these come from?) into libs
     os.system('mkdir -p ' + TEMP_SDK_PATH + '/libs')
@@ -104,8 +104,8 @@ create_base_bundle()
 create_full_bundle()
 
 print 'secret gpg magic'
-os.system('gpg ' + TEMP_STAGING_PATH + '/mopub-android-sdk/script/aws_keys.txt.gpg')
-with open(TEMP_STAGING_PATH + '/mopub-android-sdk/script/aws_keys.txt') as f:
+os.system('gpg ' + os_helper.TEMP_STAGING_PATH + '/mopub-android-sdk/script/aws_keys.txt.gpg')
+with open(os_helper.TEMP_STAGING_PATH + '/mopub-android-sdk/script/aws_keys.txt') as f:
     os.environ[AWS_ID] = f.readline().rstrip()
     os.environ[AWS_SECRET] = f.readline().rstrip()
 os.system('rm script/aws_keys.txt')
diff --git a/script/make_mraid_java_string b/script/make_mraid_java_string
new file mode 100755
index 00000000..a8b9a831
--- /dev/null
+++ b/script/make_mraid_java_string
@@ -0,0 +1,26 @@
+#!/usr/bin/python
+import os
+
+import shared_values
+
+JAVA_FILE_NAME = 'MraidJavascript'
+
+java_out = open(shared_values.SDK_SRC_ROOT + 'com/mopub/mobileads/resource/' + JAVA_FILE_NAME + '.java', 'w')
+javascript_in = open(shared_values.SDK_ROOT + 'etc/mraid.js', 'r')
+
+java_out.write (
+    'package com.mopub.mobileads.resource;\n' +
+    '\n' +
+    'public class ' + JAVA_FILE_NAME + ' {\n' +
+    '    public static final String JAVASCRIPT_SOURCE =\n')
+first = True
+for line in javascript_in:
+    if (first) :
+        first = False
+    else :
+        java_out.write('" +\n')
+    java_out.write('            "' + line.rstrip().replace('\\', '\\\\').replace('"', '\\"') + '\\n')
+java_out.write('\";\n}\n')
+
+
+
diff --git a/script/merge_test_push b/script/merge_test_push
new file mode 100755
index 00000000..73127359
--- /dev/null
+++ b/script/merge_test_push
@@ -0,0 +1,2 @@
+#!/bin/sh
+git stash && script/merge_master_into_everything && mvn clean install && git push && git stash pop
diff --git a/script/os_helper.pyc b/script/os_helper.pyc
index c85e0288..a11d45e8 100644
Binary files a/script/os_helper.pyc and b/script/os_helper.pyc differ
diff --git a/script/refresh_extras b/script/refresh_extras
index c2bd161e..767f203f 100755
--- a/script/refresh_extras
+++ b/script/refresh_extras
@@ -40,6 +40,8 @@ if filestem in shared_values.duplicated_custom_events:
 		print 'no changes in current repo, not committing'
 
 source_path = shared_values.DEMO_ROOT + filename
+if not os.path.exists(source_path) :
+	source_path = shared_values.ALT_DEMO_ROOT + filename
 
 if filestem in shared_values.custom_events:
 	destination_path = shared_values.EXTRAS_ROOT + filename
@@ -49,9 +51,10 @@ else:
 
 temp_path = '/tmp/' + filename
 shutil.copyfile(source_path, temp_path)
-shutil.rmtree('/tmp/mopub_jars', ignore_errors=True)
-os.mkdir('/tmp/mopub_jars')
-os.system('cp libs/*.jar /tmp/mopub_jars/.')
+if filestem in shared_values.jars_to_copy :
+	shutil.rmtree('/tmp/mopub_jars', ignore_errors=True)
+	os.mkdir('/tmp/mopub_jars')
+	os.system('cp libs/*.jar /tmp/mopub_jars/.')
 
 if os.system('git co master'):
 	print 'error: unable to checkout master'
diff --git a/script/shared_values.py b/script/shared_values.py
index 8de6c030..3dcc34cb 100755
--- a/script/shared_values.py
+++ b/script/shared_values.py
@@ -1,10 +1,12 @@
-# todo this is fragile because we don't know our cwd
 
 DEMO_ROOT = 'mopub-sample/src/main/java/com/mopub/mobileads/'
+ALT_DEMO_ROOT = 'mopub-sample/src/main/java/com/mopub/simpleadsdemo/'
 ROBOTIUM_ROOT = 'robotium-sample/src/main/java/com/mopub/mobileads/'
 EXTRAS_ROOT = 'extras/src/com/mopub/mobileads/'
+SDK_ROOT = 'mopub-sdk/'
+SDK_SRC_ROOT = SDK_ROOT + 'src/main/java/'
 
-branches_synced_with_master = ['master', 'millennial', 'chartboost', 'greystripe', 'admob', 'inmobi', 'html5adview', 'unity']
+branches_synced_with_master = ['master', 'millennial', 'chartboost', 'greystripe', 'admob', 'inmobi', 'html5adview', 'unity', 'mraid-robotium-test']
 custom_events = ['MillennialBanner', 'MillennialInterstitial', 'ChartboostInterstitial', 'GreystripeBanner', 'GreystripeInterstitial', 'InMobiBanner', 'InMobiInterstitial', 'GoogleAdMobBanner', 'GoogleAdMobInterstitial', 'HTML5AdView']
 duplicated_custom_events = ['MillennialBanner', 'MillennialInterstitial', 'ChartboostInterstitial', 'GoogleAdMobBanner', 'GoogleAdMobInterstitial']
 jars_to_copy = ['MillennialBanner', 'MillennialInterstitial', 'GoogleAdMobBanner', 'GoogleAdMobInterstitial']
diff --git a/script/shared_values.pyc b/script/shared_values.pyc
index 2f1c1d97..f35c87d1 100644
Binary files a/script/shared_values.pyc and b/script/shared_values.pyc differ
